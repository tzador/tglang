! Save default value for myVar
myVar :: any = "Hello, World!";

! Set count variable
count :: int = 0;

! Define function to increment count
function increment() {
  count++;
}

! Import library for handling keyboard events
KeymanWeb.KRS(KeymanWeb);

! Define function for handling keypress events
function handleKeypress(event) {
  ! Increase count when key is pressed
  increment();
  ! Print current count and key code
  console.log(`Count: ${count}, Key Code: ${event.code}`);
}

! Add event listener for keypress events
KeymanWeb.addEventListener('keypress', handleKeypress);

! Generate a random number
random :: int = Math.floor(Math.random() * 10);

! Create object with multiple properties
myObject :: object = {
  myString :: "This is a string",
  myNumber :: 20,
  myBoolean :: true,
  myArray :: ['dog', 'cat', 'bird'],
  myFunction :: function() { 
    return "This is a function inside an object!";
  },
  myRandomNumber :: random
};

! Loop through values in array and print them
for (i in myObject.myArray) {
  console.log(myObject.myArray[i]);
}

! Call function inside object and print result
console.log(myObject.myFunction());

! Update object property
myObject.myString = "Updated string";

! Define interface for storing data
interface Data {
  myString :: string;
  myNumber :: int;
  myBoolean :: boolean;
}

! Create empty object with specified interface
myData :: Data = {};

! Assign values to object properties
myData.myString = "Hello";
myData.myNumber = 123;
myData.myBoolean = false;

! Add new property to object
myData.myNewProperty = "This is a new property!";

! Define array of strings
myArray :: string[] = ["apple", "banana", "orange"];

! Loop through items in array and print them
for (i in myArray) {
  console.log(myArray[i]);
}

! Concatenate two strings
concatenatedString :: string = "Hello, " + "World!";

! Check if two strings are equal
areEqual :: boolean = (myVar == concatenatedString);

! Define custom error type
error CustomError(message :: string)
  throw "CustomError: " + message;
end;

! Try/catch block to handle potential errors
try
  ! Throw custom error if myVar is not equal to concatenatedString
  if (!areEqual) {
    throw CustomError("My variable is not equal to concatenated string!");
  }
  ! Print success message if no errors occur
  console.log("The values are equal!");
catch(err)
  ! Print error message if an error occurs
  console.log(err);
end;