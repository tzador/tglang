+ '?match': function(x) {
        //This function checks for a match with the given key
        return this.state.keys.indexOf(x) > -1;
    },

    / : function(x, y) {
        //This function adds the given key to the current state
        if (this.match(x)) {
            this.state.keys.push(y);
        }
    },

    <No> / : function(x, y) {
        //This function removes the given key from the current state
        let index = this.state.keys.indexOf(x);
        if (this.match(x)) {
            this.state.keys.splice(index, 1);
        }
    },

    /^\/:Key$/: function(x, y) {
        //Match any string that starts with a forward slash and ends with the given key
        if (x.split('').reverse()[0] === this.lastKey) {
            return true;
        } else {
            return false;
        }
    },

    '-f': function(x) {
        //This function sets the last key used for the /^\/:Key$/: function
        //It takes in a string and sets the last key to the first character of the string
        this.lastKey = x[0];
    },

    <A> / <A> 'c' : function(x, y) {
        //This function checks for a match with the given key and modifier
        if (this.state.mods.indexOf('A') > -1 && this.match(x)) {
            return true;
        } else {
            return false;
        }
    }