" Language structure for a simple calculator keyboard
" KEYMAN version: 12.0

" Declare any lexical models that store information about
" a series of keys that the keyboard should be able to produce
store(storeNum) ''
store(storeOp) ''

" Define the layout of our keyboard
c '`' + '`' > '`' U+0060	" Key with deadkey and a specific output
dk '"'		" Deadkey for uppercase quotation marks
dk "'"		" Deadkey for uppercase apostrophes
c '"' > '"' U+0022	" Key for double quotation marks
c "'" > "'" U+0027	" Key for single apostrophes
c '@' + ' '		" Key with split primary and shifted keys

" Define the ruleset for our keyboard
" Add any additional rules or conditions as needed
any(conskeys) + '0' > (storeNum + '0')	" Assigns a number and stores in storeNum
storeNum + '+' > (storeNum + storeOp + '+')	" Adds an operator and stores in storeOp
dk '"' + any(conskeys) > U+0022 + any(conskeys)	" Outputs double quotation marks and the next key
_any() + '\b' > nul	" Nullifies a backspace
 
" The final handler for processing stored numbers and operators
any(conskeys) + any(vowelkeys) > (
	if(storeNum = '') [
		'0' + any(vowelkeys)
	] else [
		storeNum + any(vowelkeys)
	]
)