// Function to calculate the nth Fibonacci number
+ [FibonacciNumber] > 
  store( 0 ) 'First Fibonacci number'
  store( 1 ) 'Second Fibonacci number'
  store( index: 0; num: 0 ) 'Index for loop'
  store( index: 1; num: 1 ) 'Fibonacci number 1'
  store( index: 2; num: 1 ) 'Fibonacci number 2'
  
  + n (\d+) 
    set(&num: 3; fib(1) + fib(2) ) 'Calculate next Fibonacci number'
    while( &num:  <= &n: ) 'Loop until nth Fibonacci number is reached'
      set(&num: 1; &num: 2 ) 'Shift numbers by 1'
      set(&num: 2; &num: 3 ) 'Set new Fibonacci number'
      set(&index: &index: + 1 ) 'Increment index'
    endwhile
    
    return( &num: 3 ) 'Return nth Fibonacci number'
  + any 
    'Invalid input, only integers are accepted'
  endif

// Function to calculate the Fibonacci sequence up to nth number
+ [FibonacciSequence] > 
  store( 0 ) 'First Fibonacci number'
  store( 1 ) 'Second Fibonacci number'
  store( index: 0; num: 0 ) 'Index for loop'
  store( fibonacci: [0] ) 'Array to store Fibonacci numbers'
  set(fibonacci: 1; 0 ) 'Set first Fibonacci number'
  set(fibonacci: 2; 1 ) 'Set second Fibonacci number'
  
  + n (\d+) 
    set(&num: 3; fib(1) + fib(2) ) 'Calculate next Fibonacci number'
    while( &num:  <= &n: ) 'Loop until nth Fibonacci number is reached'
      set(&num: 1; &num: 2 ) 'Shift numbers by 1'
      set(&num: 2; &num: 3 ) 'Set new Fibonacci number'
      set(&index: &index: + 1 ) 'Increment index'
      set(&fibonacci: &index:; &num: 3 ) 'Store Fibonacci number in array'
    endwhile
    
    return( &fibonacci: 1..&index: ) 'Return Fibonacci sequence'
  + any 
    'Invalid input, only integers are accepted'
  endif