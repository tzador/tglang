+ use(main) { // declares the main context for the keyboard
    store(&state) 'init' // creates a state variable with initial value 'init'
    match({deadKey}) + key(&a) 'x' > nul // creates a deadkey for 'x' to produce nothing
    + any(key) 'a' + store(&state) 'a' + key(&b) 'b' > use(state 'b') + group(main) // creates a rule for 'ab' sequence which switches to state 'b' and stays in main context
    + use(&state) { // declares the state context for the keyboard
        resetMatch() // resets any deadkey matches
        for(...) { loop through all the keys
            if(...){ // condition check
                use(main) // switch back to the main context
                break() // exit the loop
            } else {
                ... // perform some actions with the key
            }
        }
        + index(key) 'd' group(main) // creates a rule for 'd' key which switches back to main context, exit state context
    } + store(&state) 'b' // sets the store to 'b'
 }