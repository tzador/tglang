# Begin Unicode > use(main)


begin > group(cyrillic)

any(%) + 'l' > 'ль'
any(%) + 'L' > 'Ль'
any(%) + 'ch' > 'ч'
any(%) + 'CH' > 'Ч'
any(%) + 'zh' > 'ж'
any(%) + 'ZH' > 'Ж'
any(%) + 'sh' > 'ш'
any(%) + 'SH' > 'Ш'
 
+ 'i' + 'a' > 'iа'
+ 'I' + 'A' > 'IА'
 
index(keys) + 'a' > u:a
index(keys) + 'b' > u:b
index(keys) + 'v' > u:v
index(keys) + 'g' > u:g
index(keys) + 'd' > u:d
index(keys) + 'e' > u:e
index(keys) + 'z' > u:z
index(keys) + 'i' > u:i
index(keys) + 'j' > u:j
index(keys) + 'k' > u:k
index(keys) + 'l' > u:l
index(keys) + 'm' > u:m
index(keys) + 'n' > u:n
index(keys) + 'o' > u:o
index(keys) + 'p' > u:p
index(keys) + 'r' > u:r
index(keys) + 's' > u:s
index(keys) + 't' > u:t
index(keys) + 'u' > u:u
index(keys) + 'f' > u:f
index(keys) + 'h' > u:h
index(keys) + 'c' > u:c
index(keys) + 'w' > u:w
index(keys) + 'y' > u:y
index(keys) + 'ъ' > u:uyo:s
index(keys) + 'щ' > u:shch
index(keys) + 'э' > u:e
index(keys) + 'ь' > u:י
index(keys) + 'й' > u:י 
index(keys) + 'ч' > u:ch
index(keys) + 'ш' > u:sh
index(keys) + 'ю' > u:yu 
index(keys) + 'я' > u:ya
index(keys) + 'а' + 'й' > l:a:i
index(keys) + 'А' + 'Й' > l:A:I
index(keys) + 'а' + 'я' > l:a:ya
index(keys) + 'А' + 'Я' > l:A:YA

if(store(keys)) + 'e' > 'с'
if(store(keys)) + 'о' > 'o'


### Documentation:
This is a code snippet in KEYMAN programming language that is used for creating keyboard layouts for different languages, specifically those that use Cyrillic characters. It maps keyboard inputs to Unicode outputs, allowing users to type in their desired language without needing to have specialized keyboards.

The code begins by indicating the language to be used as "main" and then creates a group for the Cyrillic characters. It then proceeds to map specific keyboard inputs to their corresponding Cyrillic characters, such as 'l' being mapped to 'ль'. The use of "any(%) +" allows for any character to be typed before the specific input, allowing for variations in capitalization or accents.

The next few lines of code use the "+" character to indicate a key combination, such as 'i' and 'a' being mapped to 'iа'. The "index(keys) +" indicates a single key press, followed by the corresponding Cyrillic character that it should be mapped to.

The code also includes conditions using "if(store(keys)) +" which allows for variations in character mapping depending on whether certain keys are stored or not. For example, if the user has selected to have the "c" and "o" keys swapped, then the "o" key will be mapped to "o" instead of its default Cyrillic character.

Finally, the last few lines of code use the "l:" command to map specific combinations of character inputs to specific Cyrillic characters. For example, if the user types "a" and "й" together, it will be mapped to "a" and "и" in the output. The code allows for various combinations of characters to be mapped and also takes into account both uppercase and lowercase inputs.

This code snippet provides a small glimpse into the world of creating keyboard layouts and highlights the flexibility and complexity involved in creating them.