store(&accelerated_shorthand) 'This is a store statement that creates a new system variable for the accelerated shorthand rule.’

begin 'This is the start of the code block for the accelerated shorthand rule.’

match [$cons $vowels] 'This match statement searches for a consonant followed by a vowel.’

using (&accelerated_shorthand) + &0

store(&last_char) $cons 'This is a store statement that saves the last typed consonant.’

store(&next_char) $vowels 'This is a store statement that saves the next typed vowel.’

clearContext() 'This statement clears the context to ensure there are no old rules interfering.’

+ &next_char +: output (&last_char) 'This output statement outputs the last consonant followed by the next vowel, creating a combination of two characters.’

U+005C 'This Unicode escape sequence inserts a backslash character as part of the output.’

U+005F &0 'This Unicode escape sequence inserts an underscore character followed by the previous vowel.’

store(&new_var) 'This is a store statement that creates a new variable to hold the modified output.’

index(&next_char) 1 'This index statement retrieves the first character of the next consonant for use in the combining rule.’

if (&next_char = U+0070) + &0 'This if statement checks if the next consonant is a 'p' and combines it with the underscore and previous vowel.’

if (&next_char = U+0075) + &0 'This if statement checks if the next consonant is a 'u' and combines it with the underscore and previous vowel.’

if (&next_char = U+006B) + &0 'This if statement checks if the next consonant is a 'k' and combines it with the underscore and previous vowel.’

index(&next_char) 0 'This index statement retrieves the second character of the next consonant for use in the combining rule.’

if (&next_char = U+006D) + 'm' 'This if statement checks if the second character of the next consonant is an 'm' and outputs it before the first character of the next consonant.’

U+005F &0 'This Unicode escape sequence inserts an additional underscore and previous vowel before the previous output.’

if (&next_char = U+0074) + 't' 'This if statement checks if the second character of the next consonant is a 't' and outputs it before the first character of the next consonant.’

U+005F &0 'This Unicode escape sequence inserts an additional underscore and previous vowel before the previous output.’

if (&next_char = U+006C) + &0 'This if statement checks if the second character of the next consonant is an 'l' and combines it with the underscore and previous vowel.’

output (&new_var) 'This output statement outputs the modified output, combining all the characters together.’

output (&0) 'This output statement outputs the original input character to prevent it from being combined with the next character.’

store(&next_char) $cons 'This is a store statement that saves the next typed consonant for use in the  combining rule.’

U+005F &0 'This Unicode escape sequence inserts an underscore and previous vowel before the previous output.’

output (&next_char) 'This output statement outputs the next typed consonant.’

autocorrect &new_var 'This autocorrect statement replaces the input with the modified output if the rule applies.’

match [$vowels] 'This match statement searches for a single vowel when no consonant is typed.’

+ output (&0) 'This output statement outputs the original input character.’

noMatch + store(&next_char) $vowels 'This noMatch statement stores the next typed vowel for use in the next rule.’

context index(autopair) 2 'This context statement sets the index to the second character in the autopair, allowing for the next rule to target the second vowel in a two-vowel combination.’

match [$vowels] 'This match statement searches for a single vowel when a two-vowel combination is detected.’

+ output (&0) 'This output statement outputs the original input character.’

+ output (&next_char) 'This output statement outputs the second typed vowel in the combination.’