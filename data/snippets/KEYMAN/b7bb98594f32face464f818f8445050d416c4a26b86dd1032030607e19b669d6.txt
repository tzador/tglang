+ store(&x) #'Store'+ store(&x) #'Store'
    + index(&x) index(&x) * index(&x) index(&x)
    + context index(&y) * [ijk] > index(&y)
    + match index(&z) > .store(index(&z)) index(&z)
    + match 'A' + > "B"
    + match "c" + > "d"
    + match "e " + context index(&f) > index(&f)
    + setcontext 'G > 'G
    + nomatch "'H" + > "I"
    + index("J") > store index("J") "'JT
    + deadkey(index, ., A)
    + deadkey('B' + index, ., 'B' + A)
    + use(index &>)any + context "I"
    + use(index &>)any + "J" store
    + store(&K) match any > any & any
    + setmatchcontext(&L) index & index("M") > "%"
    /+ use(index &>)any + "N" store 
    + index(&O) any > index(&P)
    + &Q use(index &>) 'R'
    
This code snippet demonstrates how to use the KEYMAN programming language to define context and match rules for keyboard input. The "+" symbol indicates the start of a rule, followed by the rule conditions and actions. The "store" function allows for the storage of characters or strings, while the "index" function allows for the indexing of characters within a string. The "context" rule sets the context for the following match rule, while the "match" rule matches a specific input and performs an action. The "setcontext" rule changes the current context, and the "nomatch" rule is used for input that does not match any previous rules. The "deadkey" rule allows for the definition of dead keys, and the "use" rule is used to combine context and match rules. Finally, the "setmatchcontext" rule sets the context for the next match rule, the "/" symbol denotes the end of a rule, and the "&" symbol represents a string variable.