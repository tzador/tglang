#-----------------------------------------------------------------------------------------------#
# Description: A complex code snippet in KEYMAN language. The code creates a custom keyboard      #
# layout that allows for the input of various mathematical symbols and operators.                #
#-----------------------------------------------------------------------------------------------#

store(numpad_plus) '107'       c Stores the ASCII code for numpad plus sign
store(numpad_minus) '109'      c Stores the ASCII code for numpad minus sign
store(numpad_multiply) '106'   c Stores the ASCII code for numpad multiply sign
store(numpad_divide) '111'     c Stores the ASCII code for numpad divide sign

begin Unicode > use(main)                                                                  c Activates the custom keyboard for the main Unicode language
   group(main) using keys

  '`numpad_plus`', '`numpad_minus`',  '`numpad_multiply`', '`numpad_divide`', '`/`', '`x`', '`-`', '`+`', '`=`' > numpad_keys.        c Defines the custom keys to be used for the mathematical symbols and operators

  '`1`', '`2`', '`3`', '`4`', '`5`', '`6`', '`7`', '`8`', '`9`' > number_keys.                  c Defines the custom keys for numbers 1-9

  any(numpad_keys) + any(number_keys) > output(numpad_keys)                                   c Combines the custom keys for mathematical symbols and numbers to create output

  any(number_keys) > context(number_keys) c Creates a context for the number keys to be used with shift or alt modifiers for inputting special characters
    shift '`0`' > 'º'                                                c Shift + 0 = °
    alt '`7`' > '√'                                                  c Alt + 7 = √
    shift '`5`' > '‰'                                                c Shift + 5 = ‰
    shift '`1`' > '#'                                                c Shift + 1 = #
    alt '`6`' > '‰'                                                  c Alt + 6 = µ

end group
  group(extended) using keys
  "`a`", "`b`", "`c`" > context(characters)                                                     c Defines context for letters A, B, and C
    alt + '`a`' > 'α'                                                c Alt + a = α
    alt + '`b`' > 'β'                                                c Alt + b = β
    alt + '`c`' > 'γ'                                                c Alt + c = γ

end group

begin Unicode > use(extended)                                                               c Activates the custom keyboard for the extended Unicode language

any(lowercases) > index(lowercases)                                                            c Creates an index for all lowercase letters to be translated into capital letters when SHIFT is pressed
any(uppercases) > index(uppercases)                                                            c Creates an index for all uppercase letters to be translated into lowercase letters when CAPSLOCK is pressed

any(numpad_keys) > output(numpad_keys)                                                         c Outputs the custom keys defined for mathematical symbols and operators

store(numpad_square) '0178'                                                                    c Stores the ASCII code for the numpad squared sign
store(numpad_cube) '0179'                                                                      c Stores the ASCII code for the numpad cubed sign

any(letter_keys) + '`SHIFT`' > output(any(letter_keys) + index(number_keys))                    c Outputs capital letters when SHIFT is pressed along with number keys

any(numpad_keys) > context(numpad_keys)                                                        c Creates a context for the numpad keys to be used with the SHIFT and ALT modifiers
  alt '`numpad_square`' > '²'                                   c Alt + squared sign = ²
  alt '`numpad_cube`' > '³'                                     c Alt + cubed sign = ³
end group