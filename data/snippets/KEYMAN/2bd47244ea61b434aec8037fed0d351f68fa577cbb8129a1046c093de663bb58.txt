store(&LAYOUTS) 'Dictionary to store all layouts'
+ [
  'This is a comment, it will be ignored'
  names = 'string[]' 'An array to store layout names'
  keys = 'string[][]' 'A 2D array to store layout key combinations'
  version = 'integer' 'The version number of the layout'
  capital = 'boolean' 'Flag to indicate if the layout is in capital mode'
]

store(&LANGUAGE) 'Dictionary to store language details'
+ [
  name = 'string' 'Name of the language'
  code = 'string' 'ISO language code'
  country = 'string' 'ISO country code'
]

begin 'Start of the program'
  rule 'Main rule to handle key combinations'

  + any('keys') > context('names') 'Handle key combinations for all layouts'
  
  if &LAYOUTS.match(context(1)) 'Check if layout name is a valid key in LAYOUTS dictionary'
    index = &LAYOUTS.layout_index(context(1)) 'Get the index of the layout in LAYOUTS dictionary'
    
    if &LAYOUTS.[index].capital 'Check if layout is in capital mode'
      + 'Shift' + 'caps' 'Send a shift keypress to toggle capital mode'
      keys = &LAYOUTS.[index].keys.(context(2)) 'Get the key combination for the pressed key'
      
      if keys 'Check if valid key combination exists'
        output(keys) 'Output the key combination'
    
    else
      keys = &LAYOUTS.[index].keys.(context(2)) 'Get the key combination for the pressed key'

      if keys 'Check if valid key combination exists'
        output(keys) 'Output the key combination'
        
        if &LAYOUTS.[index].version > 1 'Check if layout has multiple versions'
          + 'Ctrl' + '+' ['version'] 'Send a control keypress to switch to next version'
          capital = &LAYOUTS.[index].capital 'Update capital mode flag'
        
begin 'Start of the program'
  rule 'Switch rule to handle language changes'
  
  + integer('language') &LAYOUTS.[language].start() 'Set the language and switch to the initial layout of that language'
  store(context(1)) 'Store the current language code in context(1)'
  + 'Alt' + 'Shift' + 'L' 'Send a key combination to switch language settings'
end 'End of the program'