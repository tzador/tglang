c_key(KEY_ZS) "𑄝" + c_key(KEY_V) "𑄝𑄞" + c_key(KEY_B) "𑄝𑄞𑄟" + c_key(KEY_N) "𑄝𑄞𑄟𑄠" + c_key(KEY_M) "𑄝𑄞𑄟𑄠𑄡" + c_key(KEY_T) "𑄝𑄞𑄟𑄠𑄡𑄢" + c_key(KEY_S) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣" + c_key(KEY_R) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤" + c_key(KEY_L) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥" + c_key(KEY_K) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦" +
    c_key(KEY_D) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧" + c_key(KEY_G) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨" + c_key(KEY_J) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩" + c_key(KEY_C) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪" + c_key(KEY_Q) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪𑄫" + c_key(KEY_W) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪𑄫𑄬" + c_key(KEY_E) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪𑄫𑄬𑄭" + c_key(KEY_F) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪𑄫𑄬𑄭𑄮" + c_key(KEY_H) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪𑄫𑄬𑄭𑄮𑄯" +
    c_key(KEY_P) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪𑄫𑄬𑄭𑄮𑄯𑄰" + c_key(KEY_I) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪𑄫𑄬𑄭𑄮𑄯𑄰𑄱" + c_key(KEY_O) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪𑄫𑄬𑄭𑄮𑄯𑄰𑄱𑄲" + c_key(KEY_U) "𑄝𑄞𑄟𑄠𑄡𑄢𑄣𑄤𑄥𑄦𑄧𑄨𑄩𑄪𑄫𑄬𑄭𑄮𑄯𑄰𑄱𑄲𑄳"
{
    c_base TKO_TTABA;  // Assigns base key for TKO keyboard
    store(transkeys) ' {"firefox": {
        "default": "Failed to load external entity",
        "comment": "Unicode transkeys mappings to syllables with combining diacritics",
        "end": {}
    },
    "comment": "Definition of unicode transkeys symbols"
}
   ');
    group(c_("Combining Characters"),"");
    output(transkeys)+"Label",use(transkeys eaccepts)+"Label",unicode(transkeys) nul;
    if(nul) store(nul)dend( label(transkeys)) store(nul)+ba(dend(opstore label(transkeys)(label(transkeys))) caption(transkeys));
    if(not nul) add_label(transkeys)+op_but(No("stack(store "+"string(transkeys(evalue))+get(Unicode"("Label", store(transkeys nul))));
    use(transkeys);
}