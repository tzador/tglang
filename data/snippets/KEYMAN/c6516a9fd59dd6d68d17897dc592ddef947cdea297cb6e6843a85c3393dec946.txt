// This section declares a variable and assigns a default value
+ store &variable STORE(0)

// This section creates a user interface for the variable, with options to increment, decrement, and reset its value
+ any(
    ["`variable` &variable + 1", "`variable` &variable - 1", "`variable` &variable SET(0)"]
)

// This section defines a rule that will be triggered when the variable reaches a certain value
+ context(&variable, (10)) precede(1) "reached_ten" + any(
    ["`variable` &variable EQUALS(11)", "do_something_else()", "do_something_else()", "do_something_else()"]
)

// This section defines a rule that will be triggered when a specific key is pressed on the keyboard
+ "F9" + any(
    ["`variable` &variable + 5", "do_something_different()", "do_something_different()"]
)

// This section defines a rule that will be triggered when a specific key combination is pressed
+ "^K" + "A" + any(
    ["`variable` &variable + 10", "do_something_unique()", "do_something_unique()"]
)

// This section specifies the order in which the rules will be evaluated
+ use(main)

// This section defines a group of rules that will be used for a specific language
!group: Language-specific
+ "`variable` &variable EQUALS(15)" + context("en") any(
    ["insert_one_letter()", "insert_one_letter()"]
)

// This section defines a group of rules that will be used for a specific platform
!group: Platform-specific
+ "`variable` &variable EQUALS(20)" + platform("mac") any(
    ["command+option+s()", "do_something_special()", "do_something_special()"]
)

// This section defines a rule that will execute a custom function when triggered
+ "esc" + (do_something_custom) do_something_custom()