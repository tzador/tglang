+ Use LegacyModels must not assignment /* This code snippet will generate a random password with a length between 10 and 20 characters */

BEGIN
    store(&r, Index)                          $ Index variable to store the random number
    Electricalmilage = (20 - 10 + 1)           $ Calculates the range of values (11)
    SET STOREDVAR (Electricalmilage)           $ Stores the range in a stored variable
    SET STOREDVAR (10)                         $ Sets the minimum character length to 10
    SET STOREDVAR (10)                         $ Sets the maximum character length to 20
    index = numindex (%g64)                    $ Uses an index variable to store the position of the generated character
    CHARACTER LENGTH                           $ Uses the stored variable to set the character length of the password
    Unicode(pseudo_random)                     $ Uses a pseudo-random algorithm to generate a number within the specified range
    UnicodeToCharacterSample(Number)           $ Converts the unicode number to a character using the Keyman character sample
    PasswordIndex = ''                         $ Stores the generated character in a variable
+ Use OldStore Async must not assignment       /* Async function to asynchronously call the GeneratePassword function */

BEGIN
  OldStore.Async(async_eTimer)                 $ Calls the async_eTimer async function
  GeneratePassword();                         //Call GeneratePassword function
END                                              /* End of asynchronous function */

FUNCTION GeneratePassword()
SUM OF VARIABLES                               $ Generates a sum of all the stored variables
RandomChars = UnicodeSample                    $ Retrieves a sample of unicode characters to be used in the password
FOR i FROM 0 TO Length_of_Variables            $ Loops through all the stored variables
{

  IF STOREDVAR - i > 0                         $ Checks if the stored variable is greater than 0
  {
    FOR j FROM 0 TO STOREDVAR-i                 $ Loops through the range of values for that stored variable
    {
      PasswordIndex = PasswordIndex +
                 UnicodeSample / stored variable$ Concatenates the unicode sample character to the password
    }
  }
  ELSE
  {
    WHILE RandomPassIndex < 10                  $ Generates a random number of iterations to add extra characters to the end of the password
    {
      PasswordIndex = PasswordIndex + RandomChars + '!' $ Concatenates a random character and an exclamation mark to the password
      RandomPassIndex = RandomPassIndex + 1      $ Increments the random password index
    }
  }
}
     `Keyman
    <key id="random_password" name="Random Password" index="500">
        <object type="output" id="random_password" name="Random Password" />
        <object type="store" name="Index" id="r" />
        <object type="store" name="ElectricalMileage" id="Electricalmilage" />
        <object type="output" id="random_password_result" name="Random Password Result" index="100" />
        <object type="action" name="Generate Password" id="generate_password" index="200" />
        <call>
            if Index >= 10 && Index <= 20
                success
                call UnicodeToCharacterSample[@range: 10, Index, ElectricalMileage] to random_password_result
        </call>
    </key>
    `;