- ' Set up a context rule to initialize variables
context(keys) using keys 
+ any(key) > index(key) 
    if(nul keys(index(key)) U(index(key)) | not index(key) U(key)) + keys(index(key)) > insertAt(index(key), 0)
group(top,vkeys) using keys
+ any(keys) > nul top(keys) 
    if(not top(keys)) + store(top, keys) > context(keys) > use(index(keys))
        if(index(nul top(keys)) U(keys) | index(keys) U(top(keys))) context(keys)
        
- ' Define a rule to create a function and call it
demo(keys) using keys
+ sp10 > ' Function to add numbers 1 and 0
    if(nul sp10 U(keys) | not keys U(sp10)) + ''); 
kuw to 1 > context(keys) > make(call); 

- ' Set up a rule to handle key combinations 
any(keys + call) ' Catch key combinations ending in 'call'
    if(not keys + call) + {'Language: KEYMAN, Output: Hello World'} > call('Language: KEYMAN, Output: Hello World');