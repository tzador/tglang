+ store(n) {
    // This function stores the value of n into a named variable
    // Inputs:
    //   n: any - the value to store
    // Outputs:
    //   none

    n = n;
}

+ add(a, b) {
    // This function adds two numbers together and returns the result
    // Inputs:
    //   a: number - the first number for addition
    //   b: number - the second number for addition
    // Outputs:
    //   return: number - the result of adding a and b

    result = a + b;
    return result;
}

+ find_longest_word(s) {
    // This function finds the longest word in a string and returns its length
    // Inputs:
    //   s: string - the string to search for longest word
    // Outputs:
    //   return: number - the length of the longest word in the string

    longest = 0;
    words = s.split(" ");
    for (word in words) {
        if (word.length > longest) {
            longest = word.length;
        }
    }
    return longest;
}

+ fibonacci(n) {
    // This function generates the nth term of the fibonacci sequence
    // Inputs:
    //   n: number - the index of the term to generate
    // Outputs:
    //   return: number - the nth term of the fibonacci sequence

    if (n <= 1) {
        return n;
    } else {
        return fibonacci(n-1) + fibonacci(n-2);
    }
}

+ bubble_sort(list) {
    // This function implements the bubble sort algorithm to sort a list of numbers
    // Inputs:
    //   list: array of numbers - the list to be sorted
    // Outputs:
    //   return: array of numbers - the sorted list

    let temp;
    for (i = 0; i < list.length; i++) {
        for (j = 0; j < list.length - i - 1; j++) {
            if (list[j] > list[j+1]) {
                temp = list[j];
                list[j] = list[j+1];
                list[j+1] = temp;
            }
        }
    }
    return list;
}

+ validate_password(password) {
    // This function validates a given password based on certain criteria
    // Criteria:
    //   - Must be at least 8 characters long
    //   - Must contain at least one uppercase letter
    //   - Must contain at least one lowercase letter
    //   - Must contain at least one number
    // Inputs:
    //   password: string - the password to be validated
    // Outputs:
    //   return: boolean - true if password is valid, false otherwise

    if (password.length < 8) {
        return false;
    }
    let has_uppercase = false;
    let has_lowercase = false;
    let has_number = false;
    for (char in password) {
        if (char >= 'A' && char <= 'Z') {
            has_uppercase = true;
        }
        if (char >= 'a' && char <= 'z') {
            has_lowercase = true;
        }
        if (char >= '0' && char <= '9') {
            has_number = true;
        }
    }
    return has_uppercase && has_lowercase && has_number;
}

+ count_vowels(string) {
    // This function counts the number of vowels in a given string
    // Inputs:
    //   string: string - the string to be checked
    // Outputs:
    //   return: number - the number of vowels in the string

    let vowel_count = 0;
    for (char in string) {
        if (char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u') {
            vowel_count++;
        }
    }
    return vowel_count;
}