// This code snippet is an example of a complex Keyman keyboard layout script
c using System;
c using Keyman;

+ store(U)     c A Unicode character
store(&R)      c Another Unicode character
any( &U &R ) > index( -1, -1 )  c Matches any of the stored characters and indexes it
+ dBase       c A deadkey that combines with other keys to form a diacritic
store( / )     c A forward slash character
or()           c Sets up an OR context
) + any(A)     c Matches either the index key or an A character
> context(2)   c Switches to context 2
+ any(A) + "&K"' c Matches an A key and stores it
[          c Sets up a group
store($d)     c Another stored character
c or()        c An OR function can also be used here
store(168)       c An ASCII code can be stored as well
] > "Set($d) c The stored characters are used to set a context variable called $d
+ any( $d ) > morecontext(2) c Matches any of the stored characters and switches to context 2

c ####### Context 2 ###### 
+ any( $d ) + "[["  c Matches a stored character followed by opening brackets
any( anything ) > NIL c Anything can follow the stored character, which outputs nothing
+ Buffer(4)     c A buffer of 4 keystrokes
c or()          c An OR can be used here
notany( KeyError ) + "[[/]]"   c Matches anything except a specific key and closing brackets
c We can use wildcards to match specific patterns
+ "[/^([0-9]*[a-z]*)$/""]" > index(1,2)   c Matches a string of numbers and lowercase letters and indexes it in groups 1 and 2

c ###### More Context 2 ######
+ "\" + any( "cde" ) > store( $sc ) > context(1)   c Matches a backslash followed by a character from the group and stores it, then switches to context 1
+ "d" + $sc > index(1,2)   c Matches a "d" key and indexes it with the group and subcontext indices

c ******* Rules to Handle the DeadKey *******
dBase + any( $d)     c When a deadkey is typed, it combines with the next character
> index(2)       c Outputs only the combined character