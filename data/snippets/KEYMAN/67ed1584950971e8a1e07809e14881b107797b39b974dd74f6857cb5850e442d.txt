// Create a lexical model
store(&mylexicalmodel) 'mylexicalmodel.kmx'

// Define the context for a keyboard
begin Unicode > use(main)

group main

    // Declare variable for character range
    var :groupclass = [a..z] store(&characters)

    // Define deadkeys
    dk: '`' + 'a' > U+00E0
    dk:  `'` + 'e' > U+00E8
    dk:  `.` + 'a' > U+0227

    // Define output
    + [CTRL ALT 'k'] > use(mylexicalmodel)

    // Output rules
    any(«characters») + 'h' > U+01F9    c on h

    any(«characters») + '?' > U+00BF    c on ?

    any(«characters») + '!' > U+00A1    c on !

    any(«characters») + [SHIFT '.'] > U+2026 // Ellipsis

    any(':') + [SHIFT '1'] > U+00A9      : on [SHIFT '1']      // Copyright symbol

    any(':') + [SHIFT '5'] > U+00AE      : on [SHIFT '5']      // Registered trademark symbol
    
    nomatch > use(main)    // Use main group by default for any unmatched keys
    
end group

// Customizable options
begin store(mainoptions)

    options(main)

        + "option1" + "option2" > use(my_custom_keyboard)

        backspace(delete) with bksp

        noModifier with nomod

        us(alternate) with gio

        showKeyHistory

    end options

end store

// Define keyboard based on main group
define keyboard main

    match(?anykeys?)

    use(main)

    store(&mainoptions)

    save_as("my_custom_keyboard.kmx")

end match