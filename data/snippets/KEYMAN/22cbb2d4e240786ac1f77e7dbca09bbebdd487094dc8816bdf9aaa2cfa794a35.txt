#@ Name: Word Freq
#@ Description: Counts the frequency of words in a text and outputs a list of word-frequency pairs.
#@ Input: Text (string)
#@ Output: List of word-frequency pairs (string)

+ store(text)      c      // Store the input text in a context variable named 'c'

store(c)           a*     // Store the context in a variable named 'a', this will be used for iteration
clear(c)                  // Clear the context variable 'c' to free up memory

! Define an array variable to store the word-frequency pairs
store(arr.freq)  a     // The 'a' variable will act as an array for storing the pairs

begin                // Begin the iteration process

  + key = "index"      // Set the 'key' variable to the string "index"
  + index(a, 1)        // Get the index of the first element in the 'a' array and store it in the 'index' variable

  + key = "word"                                // Set the 'key' variable to the string "word"
  + index(a, index+1)                           // Get the word stored at the index following the 'index' variable
  + call(getfreq) a + "wordfreq" -> arr.freq    // Call the 'getfreq' rule with the word and store the result in the 'arr.freq' array

  + index = index + 2  // Update the 'index' variable to skip the word and its frequency in the 'a' array

while(index.isint(a))        // Continue the iteration as long as the 'index' is a valid integer for the 'a' array

! Define a rule to get the frequency of a given word
begin getfreq     // Begin the rule
  if(!index)      // Check if the 'index' variable is not defined
    return 1      // If not, return the default frequency of 1

  store(freq)     // Define a frequency variable to store the result
  store(w)        // Define a variable for the word
  w = index       // Set the 'w' variable to the 'index' variable, which is the word we want to get the frequency of

  loop(w)         // Begin a loop with the word as the input
    if(w = index) // Check if the current word is equal to the input word
      freq = freq + 1    // If so, increment the frequency by 1

  return freq     // Return the final frequency
end getfreq       // End the rule

! Sort the 'arr.freq' array in descending order based on the frequency
arr.freq -> arr.freq // Map the 'arr.freq' array to itself to access the individual elements
store(i) 0            // Define a variable for loop iteration
store(max) 0          // Define a variable for the maximum frequency
loop(arr.freq)        // Begin a loop with the 'arr.freq' array as the input
  if(arr.freq.freq > max)          // Check if the current element's frequency is greater than the maximum frequency
    max = arr.freq.freq            // If so, update the maximum frequency
  if(arr.freq.freqs(max) = max)    // Check if the current element's frequency is equal to the maximum frequency
    continue                      // If so, continue to the next iteration
  else                            // Otherwise
    i = i + 1                     // Increment the loop iteration variable
    arr.freqs(i) = arr.freq       // Move the current element to the left of the array
    arr.freq = arr.freqs(max)     // Insert the element with the maximum frequency at the end of the array
! End the sorting loop

! Print the final result
store(result) "-><"  // Define a string variable for the result
loop(arr.freq)       // Begin a loop with the 'arr.freq' array as the input
  result = result + arr.freq + "<br>"  // Concatenate each element of the 'arr.freq' array to the result string with a line break
call(alert) result   // Call the 'alert' rule with the result string to display the final output

end                // End the rule and the iteration process