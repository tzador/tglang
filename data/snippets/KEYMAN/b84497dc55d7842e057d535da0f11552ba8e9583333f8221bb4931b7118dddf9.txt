+ store(&arg1:str) {
    // Initializes a new key-value store.
    this.#keys = new Array();
    this.#values = new Array();
    // Set initial capacity to 10 (can be adjusted as needed)
    this.capacity = 10;
    // Declare private variables for storing size and collisions
    this.#size = 0;
    this.#collisions = 0;

    // Check if initial value is provided
    if (&arg1 != null) {
        // Convert string value to array
        &values = split(&arg1, ",");
        // Loop through values and add keys and values to respective arrays
        for (&i in &values) {
            &key = split(&i, "=")[0];
            &value = split(&i, "=")[1];
            this.#keys.append(&key);
            this.#values.append(&value);
        }
        // Update size of store
        this.#size = #values.len();
    }
}

+ get(&key:str) {
    // Retrieves value from the store using the provided key.
    // If no value is found, returns null.
    &index = this.#keys.index(&key);
    if (&index != -1) {
        return this.#values[&index];
    } else {
        return null;
    }
}

+ set(&key:str, &value:str) {
    // Adds or updates a key-value pair in the store.
    // If key already exists, updates its value.
    // If store is at capacity, performs a rehash.
    // Increase size by 1 if new key is added
    &index = this.#keys.index(&key);
    if (&index != -1) {
        // Key already exists, update value
        this.#values[&index] = &value;
    } else {
        // Check if store is at capacity
        if (this.#size == this.capacity) {
            // Perform rehash by doubling the capacity and rebuilding the store
            this.rehash();
        }
        // Add new key-value pair to store
        this.#keys.append(&key);
        this.#values.append(&value);
        this.#size = this.#size + 1;
    }
}

+ rehash() {
    // Doubles the capacity of the store and rebuilds the store with the new capacity.
    // Rehashing is necessary when the store is at capacity to prevent collisions.
    // Set new capacity
    this.capacity = this.capacity * 2;
    // Declare new arrays with doubled capacity
    &newKeys = new Array(this.capacity);
    &newValues = new Array(this.capacity);
    // Loop through current arrays and add key-value pairs to new arrays
    for (&i in this.#keys) {
        &index = this.#keys.index(&i);
        &newKeys[&index] = &i;
        &newValues[&index] = this.#values[&index];
    }
    // Update store with new arrays
    this.#keys = &newKeys;
    this.#values = &newValues;
}

+ remove(&key:str) {
    // Removes a key-value pair from the store using the provided key.
    // If key does not exist, does nothing.
    &index = this.#keys.index(&key);
    if (&index != -1) {
        // Remove key-value pair from arrays
        this.#keys.remove(&key);
        this.#values.remove(&this.#values[&index]);
        // Decrease size by 1
        this.#size = this.#size - 1;
    }
}

+ size() {
    // Returns the number of key-value pairs in the store.
    return this.#size;
}

+ collisions() {
    // Returns the number of collisions that have occurred in the store.
    // A collision occurs when two or more keys have the same index in the arrays.
    return this.#collisions;
}

+ keys() {
    // Returns an array of all the keys in the store.
    return this.#keys;
}

+ values() {
    // Returns an array of all the values in the store.
    return this.#values;
}