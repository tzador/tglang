// Define layout
"test_layout" + store(&n, 5) {
    // Define rules for physical keys
    + [K_LSHIFT] > index($n) & [K_A] { //When left shift and A are pressed, it outputs a specific character depending on the current stored value of n
        output % index($n - 1) : "q", //Ascii code of 'q' is 113, if n = 5, then the output will be 113 - 1 = 112, which is the ascii code for 'p'
        store(&n, 0) // After output, reset n to 0
    }
    + [K_LSHIFT] > index($n) & [K_S] {
        output % index($n - 1) : "w", //Ascii code of 'w' is 119, if n = 5, then the output will be 119 - 1 = 118, which is the ascii code for 'v'
        store(&n, 0)
    }
    + [K_LSHIFT] > index($n) & [K_D] {
        output % index($n - 1) : "e", //Ascii code of 'e' is 101, if n = 5, then the output will be 101 - 1 = 100, which is the ascii code for 'd'
        store(&n, 0)
    }
    + [K_LSHIFT] > index($n) & [K_F] {
        output % index($n - 1) : "r", //Ascii code of 'r' is 114, if n = 5, then the output will be 114 - 1 = 113, which is the ascii code for 'q'
        store(&n, 0)
    }

    // Define rules for alt + physical keys
    + [K_ALT] > index($n) & [K_A] {
        output % index($n - 1) : "1", //Ascii code of '1' is 49, if n = 5, then the output will be 49 - 1 = 48, which is the ascii code for '0'
        store(&n, 0)
    }
    + [K_ALT] > index($n) & [K_S] {
        output % index($n - 1) : "2", //Ascii code of '2' is 50, if n = 5, then the output will be 50 - 1 = 49, which is the ascii code for '1'
        store(&n, 0)
    }
    + [K_ALT] > index($n) & [K_D] {
        output % index($n - 1) : "3", //Ascii code of '3' is 51, if n = 5, then the output will be 51 - 1 = 50, which is the ascii code for '2'
        store(&n, 0)
    }
    + [K_ALT] > index($n) & [K_F] {
        output % index($n - 1) : "4", //Ascii code of '4' is 52, if n = 5, then the output will be 52 - 1 = 51, which is the ascii code for '3'
        store(&n, 0)
    }

    // Define rules for shift + physical keys
    + [K_LSHIFT] > index($n) & [K_Q] {
        output % index($n - 1) : "!", //Ascii code of '!' is 33, if n = 5, then the output will be 33 - 1 = 32, which is the ascii code for ' '
        store(&n, 0)
    }
    + [K_LSHIFT] > index($n) & [K_W] {
        output % index($n - 1) : "@", //Ascii code of '@' is 64, if n = 5, then the output will be 64 - 1 = 63, which is the ascii code for '?'
        store(&n, 0)
    }
    + [K_LSHIFT] > index($n) & [K_E] {
        output % index($n - 1) : "#", //Ascii code of '#' is 35, if n = 5, then the output will be 35 - 1 = 34, which is the ascii code for '"'
        store(&n, 0)
    }
    + [K_LSHIFT] > index($n) & [K_R] {
        output % index($n - 1) : "$", //Ascii code of '$' is 36, if n = 5, then the output will be 36 - 1 = 35, which is the ascii code for '#'
        store(&n, 0)
    }

    // Define rules for numpad keys
    + [NumLock] + [K_KP1] {
        output "("
    }
    + [NumLock] + [K_KP2] {
        output ")"
    }
    + [NumLock] + [K_KP3] {
        output "["
    }
    + [NumLock] + [K_KP4] {
        output "]"
    }
    + [NumLock] + [K_KP5] {
        output "{"
    }
    + [NumLock] + [K_KP6] {
        output "}"
    }
    + [NumLock] + [K_KP7] {
        output "<"
    }
    + [NumLock] + [K_KP8] {
        output ">"
    }
    + [NumLock] + [K_KP9] {
        output "|"
    }
    + [NumLock] + [K_KP0] {
        output "\\"
    }
    
    // Define rules for physical keys
    + [K_A] {
        output "a"
    }
    + [K_B] {
        output "b"
    }
    + [K_C] {
        output "c"
    }
    + [K_D] {
        output "d"
    }
    + [K_E] {
        output "e"
    }
    + [K_F] {
        output "f"
    }
    + [K_G] {
        output "g"
    }
    + [K_H] {
        output "h"
    }
    + [K_I] {
        output "i"
    }
    + [K_J] {
        output "j"
    }
    + [K_K] {
        output "k"
    }
    + [K_L] {
        output "l"
    }
    + [K_M] {
        output "m"
    }
    + [K_N] {
        output "n"
    }
    + [K_O] {
        output "o"
    }
    + [K_P] {
        output "p"
    }
    + [K_Q] {
        output "q"
    }
    + [K_R] {
        output "r"
    }
    + [K_S] {
        output "s"
    }
    + [K_T] {
        output "t"
    }
    + [K_U] {
        output "u"
    }
    + [K_V] {
        output "v"
    }
    + [K_W] {
        output "w"
    }
    + [K_X] {
        output "x"
    }
    + [K_Y] {
        output "y"
    }
    + [K_Z] {
        output "z"
    }

    // Define rules for special keys
    + [K_SPC] {
        output " "
    }
    + [K_BSP] {
        output "{delete}"
    }
    + [K_ESC] {
        output "{cancel}"
    }
    + [K_TAB] {
        output "{tab}"
    }
    + [K_ENT] {
        output "{enter}"
    }
    + [K_CAPS] {
        output "{caps}"
    }
    + [K_LSHIFT] {
        output "{lsft}"
    }
    + [K_RSHIFT] {
        output "{rsft}"
    }
    + [K_ALT] {
        output "{alt}"
    }
    + [K_CTRL] {
        output "{ctrl}"
    }
    + [K_LCTRL] {
        output "{lctrl}"
    }
    + [K_LALT] {
        output "{lalt}"
    }
    + [K_LWIN] {
        output "{lwin}"
    }
    + [K_RWIN] {
        output "{rwin}"
    }
    + [K_MENU] {
        output "{menu}"
    }
    + [K_NUMLOCK] {
        output "{numlock}"
    }
    + [K_SCRL] {
        output "{scrolllock}"
    }
    + [K_INS] {
        output "{insert}"
    }
    + [K_HOME] {
        output "{home}"
    }
    + [K_PGUP] {
        output "{pgup}"
    }
    + [K_UP] {
        output "{up}"
    }
    + [K_LGUI] {
        output "{lgui}"
    }
    + [K_RGUI] {
        output "{rgui}"
    }
    + [K_DEL] {
        output "{delete}"
    }
    + [K_END] {
        output "{end}"
    }
    + [K_PGDN] {
        output "{pgdn}"
    }
    + [K_LEFT] {
        output "{left}"
    }
    + [K_DOWN] {
        output "{down}"
    }
    + [K_RIGHT] {
        output "{right}"
    }
    + [K_PSCR] {
        output "{prnt}"
    }
    + [K_PS] {
        output "{prntscr}"
    }
    + [K_SCRL] {
        output "{scrlock}"
    }
    + [K_PAUSE] {
        output "{pause}"
    }
}