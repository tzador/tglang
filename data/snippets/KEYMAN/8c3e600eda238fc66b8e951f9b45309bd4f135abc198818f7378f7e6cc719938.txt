+ [ STORE('Name', 'John', 'n')
  + DEFINE L '?([A-L][nN][cC][dD])[aA][yY]) '
  + MATCH(UCASE(L), STORE('Name', 'John'), 'spelling')
  + DEFINE M '?([M-Z][nN][rR][dD])[aA][yY]) '
  + MATCH(UCASE(M), STORE('Name', 'John'), 'spelling')
  + [CONTEXT L
  + + 'abcdefghijklmnopqrstuvwxyz'
  + + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  + ]
  + [CONTEXT M
  + + 'abcdefghijklmnopqrstuvwxyz'
  + + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  + ]
  + + 'John' > 'Johnny' 
  + + 'Jane' > 'Janie'
  + 'Name' > 'Spelled name: ' + ' Name'

Explanation:
This code snippet is written in the KEYMAN programming language. 
It starts by storing the name 'John' with a shorthand identifier 'n'. 
Then, two patterns are defined to match words that are similar to the word 'name' spelled in two possible ways, one with the letters A-L and one with the letters M-Z. 
If the patterns match, the name 'John' is stored again but with the identifier 'spelling'. 
Next, two contexts are specified, one for each of the defined patterns, which list all the possible characters that can be used in the words. 
Finally, there are two replacements that will occur if the patterns match, one for 'John' which will be replaced by 'Johnny' and one for 'Jane' that will be replaced by 'Janie'. 
The last line outputs the message 'Spelled name: ' followed by the stored name, which will be either 'John' or 'Jane' depending on which pattern was matched.