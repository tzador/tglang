type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
  dateOfBirth: Date!
  friends: [User]!
  posts: [Post]!
  likes: [Post]!
}

type Post {
  id: ID!
  author: User!
  title: String!
  content: String!
  timestamp: Date!
  likes: [User]!
  comments: [Comment]!
}

type Comment {
  id: ID!
  author: User!
  content: String!
  timestamp: Date!
  likes: [User]!
}

enum Role {
  ADMIN
  USER
}

# Queries
query getUserInfo($userID: ID!) {
  user(id: $userID) {
    id
    firstName
    lastName
    email
    posts {
      id
      title
      content
      likes {
        id
        firstName
        lastName
      }
      comments {
        id
        content
        likes {
          id
          firstName
          lastName
        }
      }
    }
  }
}

# Mutations
mutation createUser($firstName: String!, $lastName: String!, $email: String!, $password: String!, $dateOfBirth: Date!, $role: Role!) {
  createUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password, dateOfBirth: $dateOfBirth, role: $role) {
    id
    firstName
    lastName
    email
    role
  }
}

mutation addFriend($userID: ID!, $friendID: ID!) {
  addFriend(userID: $userID, friendID: $friendID) {
    id
    firstName
    lastName
    friends {
      id
      firstName
      lastName
    }
  }
}

mutation createPost($userID: ID!, $title: String!, $content: String!) {
  createPost(userID: $userID, title: $title, content: $content) {
    id
    author {
      id
      firstName
      lastName
    }
    title
    content
    timestamp
  }
}

mutation likePost($userID: ID!, $postID: ID!) {
  likePost(userID: $userID, postID: $postID) {
    id
    title
    likes {
      id
      firstName
      lastName
    }
  }
}

mutation addComment($userID: ID!, $postID: ID!, $content: String!) {
  addComment(userID: $userID, postID: $postID, content: $content) {
    id
    content
    timestamp
  }
}