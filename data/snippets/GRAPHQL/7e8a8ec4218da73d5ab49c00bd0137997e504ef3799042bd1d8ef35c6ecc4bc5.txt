// define schema
const typeDefs = `
    type Book {
        id: ID!
        title: String!
        author: String!
        genre: String
        published: Int!
    }

    type Query {
        books: [Book]
        book(id: ID!): Book
    }

    type Mutation {
        addBook(title: String!, author: String!, genre: String, published: Int!): Book
    }`;

// define resolvers
const resolvers = {
    Query: {
        books: () => Book.find(),
        book: (_, { id }) => Book.findById(id)
    },
    Mutation: {
        addBook: (_, args) => {
            const newBook = new Book(args);
            return newBook.save();
        }
    }
};

// create schema
const schema = makeExecutableSchema({
    typeDefs,
    resolvers
});

// define query
const query = `
    {
        book(id: "123") {
            title
            author
        }
    }`;

// execute query and log output
graphql(schema, query)
    .then(result => console.log(result))
    .catch(err => console.log(err));

// output:
/*
{
    "data": {
        "book": {
            "title": "The Great Gatsby",
            "author": "F. Scott Fitzgerald"
        }
    }
}
*/