// Define a type for a user in GraphQL
type User {
  id: ID!
  name: String!
  age: Int!
  email: String!
  posts: [Post!]!
  friends: [User!]!
}

// Define a type for a post in GraphQL
type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  comments: [Comment!]!
}

// Define a type for a comment in GraphQL
type Comment {
  id: ID!
  content: String!
  author: User!
  post: Post!
}

// Define a query for getting a single user by ID
query GetUserById($id: ID!) {
  user(id: $id) {
    id
    name
    age
    email
    posts {
      id
      title
      content
    }
    friends {
      id
      name
    }
  }
}

// Define a mutation for adding a new user
mutation AddUser($name: String!, $age: Int!, $email: String!) {
  addUser(name: $name, age: $age, email: $email) {
    id
    name
    age
    email
  }
}

// Define a mutation for adding a new post
mutation AddPost($title: String!, $content: String!, $authorId: ID!) {
  addPost(title: $title, content: $content, authorId: $authorId) {
    id
    title
    content
    author {
      id
      name
      email
    }
  }
}

// Define a mutation for adding a new comment
mutation AddComment($content: String!, $authorId: ID!, $postId: ID!) {
  addComment(content: $content, authorId: $authorId, postId: $postId) {
    id
    content
    author {
      id
      name
      email
    }
    post {
      id
      title
    }
  }
}

// Define a schema that includes all types and queries/mutations
schema {
  query: Query
  mutation: Mutation
}

// Define the Query type with the defined user query
type Query {
  user(id: ID!): User
}

// Define the Mutation type with the defined add user, post and comment mutations
type Mutation {
  addUser(name: String!, age: Int!, email: String!): User
  addPost(title: String!, content: String!, authorId: ID!): Post
  addComment(content: String!, authorId: ID!, postId: ID!): Comment
}