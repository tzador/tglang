type Query {
  books: [Book!]!
    //defines a query for all books, non-nullable array of non-nullable Book type
  authors: [Author!]!
    //defines a query for all authors, non-nullable array of non-nullable Author type
  book(id: ID!): Book
    //defines a query for a specific book, accepts an ID as argument and return a single Book type
  author(id: ID!): Author
    //defines a query for a specific author, accepts an ID as argument and returns a single Author type
}

type Book {
  id: ID!
    //unique identifier for a book
  title: String!
    //title of the book, non-nullable
  description: String
    //optional description of the book
  author: Author!
    //defines a field that returns an Author type, non-nullable
  genre: String!
    //genre of the book, non-nullable
  price: Float!
    //price of the book, non-nullable
}

type Author {
  id: ID!
    //unique identifier for an author
  name: String!
    //name of the author, non-nullable
  books: [Book!]!
    //defines a field that returns all books by this author, non-nullable array of non-nullable Book type
  age: Int
    //optional age of the author
  nationality: String!
    //nationality of the author, non-nullable
}