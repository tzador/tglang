const { graphql } = require('graphql');

// GraphQL schema
const schema = `
    type Query {
        user(id: ID, username: String): User
        postsByUser(userId: ID!): [Post]
    }

    type Mutation {
        createUser(username: String, email: String): User
        updateUser(id: ID!, input: UpdateUserInput): User
    }

    type User {
        id: ID
        username: String
        email: String
        posts: [Post]
    }

    type Post {
        id: ID
        title: String
        content: String
        author: User
    }

    input UpdateUserInput {
        username: String
        email: String
    }
`;

// Resolvers
const resolvers = {
    Query: {
        user: async (parent, { id, username }) => {
            // Code to fetch user data from database based on ID or username
            const userData = await getUserData(id, username);

            // Return user data
            return userData;
        },

        postsByUser: async (parent, { userId }) => {
            // Code to fetch posts data from database based on user ID
            const postsData = await getPostsData(userId);

            // Return posts data
            return postsData;
        }
    },

    Mutation: {
        createUser: async (parent, { username, email }) => {
            // Code to create and save a new user in database
            const newUser = await createNewUser(username, email);

            // Return the newly created user data
            return newUser;
        },

        updateUser: async (parent, { id, input }) => {
            // Code to update an existing user in database
            const updatedUser = await updateUser(id, input);

            // Return the updated user data
            return updatedUser;
        }
    },

    User: {
        posts: async (parent) => {
            // Code to fetch posts data from database based on user ID
            const postsData = await getPostsData(parent.id);

            // Return posts data for this specific user
            return postsData;
        }
    },

    Post: {
        author: async (parent) => {
            // Code to fetch user data from database based on user ID
            const userData = await getUserData(parent.authorId);

            // Return the data for the post's author
            return userData;
        }
    }
};

// Query example
const queryExample = `
    query GetUserAndPosts($userId: ID!) {
        user(id: 123) {
            id
            username
            email
            posts {
                id
                title
                content
            }
        }

        postsByUser(userId: $userId) {
            id
            title
            content
            author {
                id
                username
                email
            }
        }
    }
`;

// Mutation example - create new user
const mutationExample = `
    mutation CreateUser($username: String!, $email: String!) {
        createUser(username: $username, email: $email) {
            id
            username
            email
        }
    }
`;

// Run GraphQL query or mutation
graphql(schema, queryExample).then(response => {
    console.log(response);
});

graphql(schema, mutationExample, null, null, { username: "test_user", email: "test@gmail.com" }).then(response => {
    console.log(response);
});