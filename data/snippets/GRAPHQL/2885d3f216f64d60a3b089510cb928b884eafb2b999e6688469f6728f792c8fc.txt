type Query {
    user(id: ID!): User          # Query for getting a single user
    users(limit: Int, offset: Int): [User!]! # Query for getting a list of users with optional limit and offset
}

type Mutation {
    createUser(name: String!, email: String!, age: Int!): User! # Mutation to create a new user
    updateUser(id: ID!, name: String, email: String, age: Int): User # Mutation to update an existing user with optional parameters
    deleteUser(id: ID!): Boolean! # Mutation to delete a user and return a boolean indicating success
}

type User {
    id: ID! # Unique identifier for a user
    name: String! # User's name
    email: String! # User's email
    age: Int! # User's age
    posts: [Post!]! # List of posts created by the user
}

type Post {
    id: ID! # Unique identifier for a post
    title: String! # Title of the post
    content: String! # Content of the post
    author: User! # User who created the post
    comments: [Comment!]! # List of comments on the post
}

type Comment {
    id: ID! # Unique identifier for a comment
    content: String! # Content of the comment
    author: User! # User who wrote the comment
    post: Post! # Post that the comment belongs to
}