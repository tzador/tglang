// GraphQL Schema
type Query {
    user(id: ID!): User # query for a specific user
    posts(limit: Int): [Post] # query for posts with optional limit parameter
}

type User {
    id: ID!
    firstName: String
    lastName: String
    posts: [Post] # list of posts authored by the user
}

type Post {
    id: ID!
    title: String!
    content: String!
    author: User # the user who created the post
}

// GraphQL Resolvers
const resolvers = {
    Query: {
        user: (_, { id }) => getUserById(id), // returns a single user by id
        posts: (_, { limit }) => getPosts(limit) // returns an array of posts with optional limit
    },

    User: {
        posts: (parent) => getPostsByUser(parent.id) // returns an array of posts for the given user
    },

    Post: {
        author: (parent) => getUserById(parent.authorId) // returns the user who created the post
    }
}

// Sample Query
const GET_USER_POSTS = `
    query GetUserPosts($id: ID!) {
        user(id: $id) {
            firstName
            lastName
            posts {
                title
                content
            }
        }
    }
`

// Execution
graphql(schema, GET_USER_POSTS, resolvers); // executes the query and resolves data from schema