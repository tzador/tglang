const { GraphQLServer } = require('graphql-yoga'); //Import the GraphQLServer module

//Define the type definitions for your GraphQL schema
const typeDefs = `
  type Query {
    hello(name: String): String!
    allBooks: [Book!]
    searchBooks(title: String!): [Book!]!
  }

  type Book {
    title: String!
    author: String
    genres: [String!]
    year: Int
  }

  type Mutation {
    addBook(title: String!, author: String, genres: [String!], year: Int!): Book!
  }
`

//Define the resolver functions for the Query and Mutation types
const resolvers = {
  Query: {
    hello: (_, { name }) => `Hello ${name || 'World'}`, //Handle the hello query, with an optional argument of name
    allBooks: () => books, //Return all books from the books array
    searchBooks: (_, { title }) => books.filter(book => book.title.toLowerCase().includes(title.toLowerCase())) //Search for a book by title and return any matching results
  },
  Mutation: {
    addBook: (_, { title, author, genres, year }) => { //Handle the addBook mutation, with the required arguments of title and year, and optional arguments of author and genres
      const newBook = { title, author, genres, year }; //Create a new book object with the given arguments
      books = [...books, newBook]; //Add the new book object to the books array
      return newBook; //Return the newly added book
    },
  },
};

//Create a new instance of GraphQLServer, passing in the type definitions and resolver functions
const server = new GraphQLServer({
  typeDefs,
  resolvers,
});

//Start the server on port 4000
server.start(() => console.log(`Server is running on http://localhost:4000`));

//Sample books data for testing
let books = [
  {
    title: 'To Kill a Mockingbird',
    author: 'Harper Lee',
    genres: ['Fiction', 'Classics'],
    year: 1960
  },
  {
    title: 'Pride and Prejudice',
    author: 'Jane Austen',
    genres: ['Fiction', 'Romance', 'Classics'],
    year: 1813
  },
  {
    title: 'The Great Gatsby',
    author: 'F. Scott Fitzgerald',
    genres: ['Fiction', 'Classics'],
    year: 1925
  }
];