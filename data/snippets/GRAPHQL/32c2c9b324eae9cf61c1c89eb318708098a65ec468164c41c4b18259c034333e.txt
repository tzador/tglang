// GraphQL Schema for Blog Posts

// Import necessary libraries
import { GraphQLObjectType, GraphQLID, GraphQLInt, GraphQLString, GraphQLList, GraphQLSchema } from 'graphql';

// Define PostType representing a single blog post
const PostType = new GraphQLObjectType({
  name: 'Post',
  fields: () => ({
    id: { type: GraphQLID },
    title: { type: GraphQLString },
    body: { type: GraphQLString },
    author: { type: GraphQLString },
    tags: { type: new GraphQLList(GraphQLString) }
  })
});

// Define root QueryType
const QueryType = new GraphQLObjectType({
  name: 'Query',
  fields: {
    // Define field for fetching a single post by its ID
    post: {
      type: PostType,
      args: { id: { type: GraphQLID } }, // Pass ID as argument
      resolve(parent, args) {
        // Use database or API to fetch post with the given ID
        return fetch(`https://myblog.com/posts/${args.id}`)
          .then(res => res.json())
          .then(data => data.post);
      }
    },
    // Define field for fetching all posts
    posts: {
      type: new GraphQLList(PostType), // Specify the return type as a list of PostType
      resolve(parent, args) {
        // Use database or API to fetch all posts
        return fetch(`https://myblog.com/posts`)
          .then(res => res.json())
          .then(data => data.posts);
      }
    }
  }
});

// Define root MutationType for creating, updating, and deleting posts
const MutationType = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    // Define field for creating a new post
    createPost: {
      type: PostType,
      args: { 
        title: { type: GraphQLString },
        body: { type: GraphQLString },
        author: { type: GraphQLString },
        tags: { type: new GraphQLList(GraphQLString) }
      },
      resolve(parent, args) {
        // Use database or API to create a new post with the given data
        return fetch(`https://myblog.com/posts`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(args)
        })
          .then(res => res.json())
          .then(data => data.post);
      }
    },
    // Define field for updating an existing post
    updatePost: {
      type: PostType,
      args: { 
        id: { type: GraphQLID },
        title: { type: GraphQLString },
        body: { type: GraphQLString },
        author: { type: GraphQLString },
        tags: { type: new GraphQLList(GraphQLString) }
      },
      resolve(parent, args) {
        // Use database or API to update the post with the given ID and data
        return fetch(`https://myblog.com/posts/${args.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(args)
        })
          .then(res => res.json())
          .then(data => data.post);
      }
    },
    // Define field for deleting a post
    deletePost: {
      type: PostType,
      args: { id: { type: GraphQLID } }, // Pass ID as argument
      resolve(parent, args) {
        // Use database or API to delete the post with the given ID
        return fetch(`https://myblog.com/posts/${args.id}`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' }
        })
          .then(res => res.json())
          .then(data => data.post);
      }
    }
  }
});

// Export the GraphQL schema
export default new GraphQLSchema({
  query: QueryType,
  mutation: MutationType
});