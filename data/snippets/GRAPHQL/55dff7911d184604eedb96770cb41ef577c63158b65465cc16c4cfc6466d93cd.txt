// Define a GraphQL schema
const typeDefs = `
  type Post {
    id: ID!
    title: String!
    body: String!
    author: User!
  }

  type User {
    id: ID!
    name: String!
    posts: [Post!]!
  }

  type Query {
    post(id: ID!): Post!
    user(id: ID!): User!
  }

  type Mutation {
    createPost(title: String!, body: String!, authorId: ID!): Post!
    createUser(name: String!): User!
  }
`;

// Define resolvers for the available queries and mutations
const resolvers = {
  Query: {
    post: (parent, { id }, { models }) => {
      return models.Post.findById(id);
    },
    user: (parent, { id }, { models }) => {
      return models.User.findById(id);
    },
  },
  Mutation: {
    createPost: (parent, { title, body, authorId }, { models }) => {
      return models.Post.create({
        title,
        body,
        authorId
      });
    },
    createUser: (parent, { name }, { models }) => {
      return models.User.create({
        name
      })
    }
  },
  User: {
    posts: (user, args, { models }) => {
      return models.Post.findAll({
        where: {
          authorId: user.id
        }
      });
    },
  },
  Post: {
    author: (post, args, { models }) => {
      return models.User.findById(post.authorId);
    },
  }
};

// Create the Apollo Server
const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: { models },
});

// Launch the server on a specified port
server.listen().then(({ url }) => {
  console.log(`ğŸš€ Server ready at ${url}`);
});