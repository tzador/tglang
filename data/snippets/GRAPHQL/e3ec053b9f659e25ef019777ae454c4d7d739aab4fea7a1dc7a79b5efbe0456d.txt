type Query {
  posts: [Post]
  users: [User]
  comments: [Comment]
}

type Post {
  id: ID
  title: String
  content: String
  author: User
  comments: [Comment]
}

type User {
  id: ID
  name: String
  email: String
  posts: [Post]
  comments: [Comment]
}

type Comment {
  id: ID
  content: String
  post: Post
  author: User
}

# Query to retrieve all posts
query GetAllPosts {
  posts { # returns a list of Post type objects
    id # returns the id of the post
    title # returns the title of the post
    content # returns the content of the post
    author { # returns the author of the post as a User type object
      id # returns the id of the user
      name # returns the name of the user
      email # returns the email of the user
    }
    comments { # returns a list of Comment type objects
      id # returns the id of the comment
      content # returns the content of the comment
      author { # returns the author of the comment as a User type object
        id # returns the id of the user
        name # returns the name of the user
        email # returns the email of the user
      }
    }
  }
}

# Mutation to create a new post
mutation CreatePost($title: String!, $content: String!, $authorId: ID!) {
  createPost(title: $title, content: $content, authorId: $authorId) { # specifies which fields are required to create a new post
    id # returns the id of the newly created post
    title # returns the title of the newly created post
    content # returns the content of the newly created post
    author { # returns the author of the newly created post as a User type object
      id # returns the id of the user
      name # returns the name of the user
      email # returns the email of the user
    }
  }
}

# Mutation to update an existing post
mutation UpdatePost($id: ID!, $title: String, $content: String) {
  updatePost(id: $id, title: $title, content: $content) { # specifies which fields can be updated in a post
    id # returns the id of the updated post
    title # returns the updated title of the post
    content # returns the updated content of the post
  }
}

# Mutation to delete a post
mutation DeletePost($id: ID!) {
  deletePost(id: $id) # specifies the id of the post to be deleted
}