const { GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLList, GraphQLSchema, graphql } = require('graphql');

// Define a custom GraphQL type for a user, with fields for their name, age, and list of friends
const UserType = new GraphQLObjectType({
  name: 'User',
  fields: {
    name: { type: GraphQLString },
    age: { type: GraphQLInt },
    friends: { type: GraphQLList(GraphQLString) }
  }
});

// Define a query for a specific user, taking in their name as an argument
const RootQuery = new GraphQLObjectType({
  name: 'RootQuery',
  fields: {
    user: {
      type: UserType,
      args: {
        name: { type: GraphQLString }
      },
      // Resolve function to fetch data for a specific user
      resolve(parent, args) {
        // In a real database, this would retrieve a user with the given name
        const user = {
          name: 'John Smith',
          age: 29,
          friends: ['Jane Doe', 'Bob Johnson']
        };
        // Return the user with the queried name
        return user.name === args.name ? user : null;
      }
    }
  }
});

// Define a mutation for adding a new user, taking in their name, age, and list of friends
const Mutation = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    addUser: {
      type: UserType,
      args: {
        name: { type: GraphQLString },
        age: { type: GraphQLInt },
        friends: { type: GraphQLList(GraphQLString) }
      },
      // Resolve function to add a new user to the database
      resolve(parent, args) {
        // In a real database, this would add a new user with the given information
        const newUser = {
          name: args.name,
          age: args.age,
          friends: args.friends
        };
        // Return the new user
        return newUser;
      }
    }
  }
});

// Create a GraphQL schema with the defined query and mutation
const schema = new GraphQLSchema({
  query: RootQuery,
  mutation: Mutation
});

// Execute a query or mutation on the schema
graphql(schema, `
  mutation {
    addUser(name: "Sarah Johnson", age: 25, friends: ["Adam Smith", "Emily Davis"]) {
      name
      age
      friends
    }
  }
`).then(result => console.log(result));