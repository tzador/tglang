const { GraphQLServer } = require('graphql-yoga')

// provide a data structure
const articles = [
  { title: 'Article 1', year: 2020, author: 'John Doe' },
  { title: 'Article 2', year: 2021, author: 'Jane Smith' },
  { title: 'Article 3', year: 2019, author: 'Mike Anderson'},
]

// define resolvers to fetch data
const resolvers = {
  Query: {
    articles: () => articles, // returns all articles
    articleByTitle: (parent, args) => articles.find(article => article.title === args.title), // returns article with given title
    articlesByYear: (parent, args) => articles.filter(article => article.year === args.year), // returns articles published in given year
    articlesByAuthor: (parent, args) => articles.filter(article => article.author === args.author), // returns articles written by given author
  },
  Mutation: {
    addArticle: (parent, { title, year, author }) => {
      // create new article object
      const newArticle = {
        title: title,
        year: year,
        author: author,
      }
      // add new article to the data structure
      articles.push(newArticle)
      // return new article
      return newArticle
    },
    updateArticle: (parent, { title, newTitle }) => {
      // find article with given title
      const article = articles.find(article => article.title === title)
      // update title
      article.title = newTitle
      // return updated article
      return article
    },
    deleteArticle: (parent, { title }) => {
      // find index of article with given title
      const index = articles.findIndex(article => article.title === title)
      // remove article from data structure
      articles.splice(index, 1)
      return `${title} has been deleted.`
    }
  }
}

// create GraphQL server and pass in resolvers
const server = new GraphQLServer({
  typeDefs: './schema.graphql',
  resolvers,
})

// start server
server.start(() => console.log('Server is running on localhost:4000'))