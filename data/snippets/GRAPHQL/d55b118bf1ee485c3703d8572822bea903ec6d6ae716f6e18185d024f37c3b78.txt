// Define a GraphQL schema for a blog API
const { buildSchema } = require('graphql');

// Define custom type 'Post'
const Post = `
  type Post {
    title: String
    content: String
    author: String
    date: String
    comments: [Comment]
  }`;

// Define custom type 'Comment'
const Comment = `
  type Comment {
    author: String
    date: String
    content: String
  }`;

// Define custom type 'Query' to query for posts
const Query = `
  type Query {
    posts: [Post]
  }`;

// Define custom type 'Mutation' to create new posts
const Mutation = `
  type Mutation {
    createPost(title: String!, content: String!, author: String!): Post!
  }`;

// Define the root schema by combining all custom types
const schema = buildSchema(`
  ${Post}
  ${Comment}
  ${Query}
  ${Mutation}
`);

// Define root resolver to handle incoming queries and mutations
const root = {
  // Query resolver to return all posts
  posts: () => {
    return [{
      title: 'My First Blog Post',
      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
      author: 'John Smith',
      date: '2021-03-10',
      comments: [
        { 
          author: 'Jane Doe',
          date: '2021-03-11',
          content: 'Great article! Thanks for sharing.'
        },
        {
          author: 'Mark Johnson',
          date: '2021-03-12',
          content: 'I really enjoyed reading this. Looking forward to more posts.'
        }
      ]
    }];
  },

  // Mutation resolver to create a new post
  createPost: (args) => {
    // Logic to save new post in database
    const { title, content, author } = args;

    // Dummy data for demo purposes
    const newPost = {
      title,
      content,
      author,
      date: new Date().toISOString(),
      comments: []
    };

    // Return the newly created post
    return newPost;
  }
};

// Export the GraphQL schema and root resolver
module.exports = { schema, root };