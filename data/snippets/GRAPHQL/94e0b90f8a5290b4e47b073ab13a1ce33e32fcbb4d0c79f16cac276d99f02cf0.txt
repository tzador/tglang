// Define a GraphQL schema
const typeDefs = `
  type Query {
    # Retrieve a list of all users
    users: [User!]!
    # Retrieve a single user by their ID
    user(id: ID!): User!
  }

  type Mutation {
    # Create a new user
    createUser(name: String!, email: String, password: String!): User!
    # Update an existing user
    updateUser(id: ID!, name: String!, email: String, password: String!): User!
    # Delete a user
    deleteUser(id: ID!): ID!
  }

  type User {
    id: ID!
    name: String!
    email: String!
    password: String!
  }
`;

// Define resolver functions to handle GraphQL queries and mutations
const resolvers = {
  Query: {
    users: () => getAllUsers(),
    user: (parent, { id }) => getUserById(id),
  },
  Mutation: {
    createUser: (parent, args) => {
      const { name, email, password } = args;
      const user = { id: uuidv4(), name, email, password };
      return addUser(user);
    },
    updateUser: (parent, args) => {
      const { id, name, email, password } = args;
      const updatedUser = { id, name, email, password };
      return updateUserById(id, updatedUser);
    },
    deleteUser: (parent, { id }) => {
      deleteUserById(id);
      return id;
    },
  },
};

// Create a GraphQL server using the defined schema and resolver functions
const server = new ApolloServer({ typeDefs, resolvers });

// Start the server to listen for incoming GraphQL requests
server.listen().then(({ url }) => {
  console.log(`ğŸš€  Server ready at ${url}`);
});