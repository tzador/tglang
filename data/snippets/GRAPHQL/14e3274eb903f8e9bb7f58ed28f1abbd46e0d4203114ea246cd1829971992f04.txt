enum Color { // Defines an enum type with colors
  RED // Enum value for "red" color
  GREEN // Enum value for "green" color
  BLUE // Enum value for "blue" color
}

type Shape { // Defines a shape type
  id: ID // The ID of the shape
  name: String // The name of the shape
  color: Color // The color of the shape, using the enum type
  dimensions: [Float!]! // An array of non-null floats representing the dimensions of the shape
  area: Float // The area of the shape, cannot be null
}

type Query { // Defines the Query type for retrieving shapes
  getShapeById(id: ID!): Shape // Query for retrieving a shape by its ID, must provide an ID argument and returns a single Shape object
  getShapesByColor(color: Color!): [Shape]! // Query for retrieving all shapes of a given color, must provide a Color argument and returns an array of Shape objects
  getAllShapes: [Shape!]! // Query for retrieving all shapes, returns an array of non-null Shape objects
}

type Mutation { // Defines the Mutation type for creating shapes
  createShape(name: String!, color: Color!, dimensions: [Float!]!): Shape! // Mutation for creating a shape, must provide a name, color, and dimensions, and returns a single Shape object
  updateShape(id: ID!, color: Color, dimensions: [Float]): Shape // Mutation for updating a shape, must provide an ID and can optionally provide a color and/or dimensions, and returns a single Shape object
  deleteShape(id: ID!): ID // Mutation for deleting a shape by its ID, must provide an ID argument and returns the ID of the deleted shape
}

schema { // The schema defines the available queries and mutations for the API
  query: Query // Specifies the Query type as the root for retrieving data
  mutation: Mutation // Specifies the Mutation type as the root for creating data
}