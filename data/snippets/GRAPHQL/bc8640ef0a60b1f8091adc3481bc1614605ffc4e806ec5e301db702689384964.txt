// Import necessary libraries and dependencies
import graphql from "graphql";
import { GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLList } from "graphql";

// Define custom data types
const ProductType = new GraphQLObjectType({
  name: "Product",
  fields: {
    id: { type: GraphQLInt },
    name: { type: GraphQLString },
    price: { type: GraphQLInt },
    category: { type: GraphQLString },
  },
});

const BrandType = new GraphQLObjectType({
  name: "Brand",
  fields: {
    id: { type: GraphQLInt },
    name: { type: GraphQLString },
    website: { type: GraphQLString },
    products: { type: new GraphQLList(ProductType) },
  },
});

// Define root query
const RootQuery = new GraphQLObjectType({
  name: "RootQuery",
  fields: {
    brand: {
      type: BrandType,
      args: {
        id: { type: GraphQLInt },
      },
      // Resolve the query using a database call or any other method
      async resolve(parent, args) {
        return await db.getBrandById(args.id);
      },
    },
    product: {
      type: ProductType,
      args: {
        id: { type: GraphQLInt },
      },
      // Resolve the query using a database call or any other method
      async resolve(parent, args) {
        return await db.getProductById(args.id);
      },
    },
    products: {
      type: new GraphQLList(ProductType),
      args: {
        category: { type: GraphQLString },
      },
      // Resolve the query using a database call or any other method
      async resolve(parent, args) {
        return await db.getProductsByCategory(args.category);
      },
    },
  },
});

// Define mutation queries
const Mutation = new GraphQLObjectType({
  name: "Mutation",
  fields: {
    addProduct: {
      type: ProductType,
      args: {
        name: { type: GraphQLString },
        price: { type: GraphQLInt },
        category: { type: GraphQLString },
      },
      // Resolve the query by creating a new product in the database
      async resolve(parent, args) {
        const newProduct = {
          name: args.name,
          price: args.price,
          category: args.category,
        };
        return await db.createProduct(newProduct);
      },
    },
    updateProduct: {
      type: ProductType,
      args: {
        id: { type: GraphQLInt },
        name: { type: GraphQLString },
        price: { type: GraphQLInt },
        category: { type: GraphQLString },
      },
      // Resolve the query by updating an existing product in the database
      async resolve(parent, args) {
        const updatedProduct = {
          id: args.id,
          name: args.name,
          price: args.price,
          category: args.category,
        };
        return await db.updateProduct(updatedProduct);
      },
    },
    deleteProduct: {
      type: ProductType,
      args: {
        id: { type: GraphQLInt },
      },
      // Resolve the query by deleting an existing product from the database
      async resolve(parent, args) {
        return await db.deleteProduct(args.id);
      },
    },
  },
});

// Define GraphQL schema
const schema = new GraphQLSchema({
  query: RootQuery,
  mutation: Mutation,
});

// Export the schema to be used in the server
export default schema;