type Query {
    # Retrieves a list of all users, paginated
    users(
        # Optional argument for filtering by user's country
        country: String
        # Optional argument for specifying number of results per page
        limit: Int,
        # Optional argument for specifying page number
        page: Int
    ): [User]!

    # Retrieves a specific user by their ID
    user(
        # Required argument for user's ID
        id: ID!
    ): User!

    # Searches for users based on passed keyword
    searchUsers(
        # Required argument for search keyword
        query: String!
        # Optional argument for filtering by country
        country: String
        # Optional argument for specifying number of results
        limit: Int
    ): [User]!
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    country: String!
}

schema {
    query: Query
}