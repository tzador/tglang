//Defining a GraphQL schema

//Importing necessary libraries and dependencies
const { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInt } = require('graphql');

//Defining object types
const BookType = new GraphQLObjectType({
  name: 'Book',
  fields: {
    title: { type: GraphQLString },
    author: { type: GraphQLString },
    genre: { type: GraphQLString }
  }
});

const AuthorType = new GraphQLObjectType({
  name: 'Author',
  fields: {
    name: { type: GraphQLString },
    nationality: { type: GraphQLString },
    birthYear: { type: GraphQLInt }
  }
});

//Defining root query type
const RootQuery = new GraphQLObjectType({
  name: 'RootQuery',
  fields: {
    book: {
      type: BookType,
      //Arguments for the book field
      args: {
        id: { type: GraphQLInt }
      },
      //Resolving function for the book field
      resolve(parent, args) {
        //Perform query to get book with matching id
        let book = database.getBookById(args.id);
        //Return the book data
        return book;
      }
    },
    author: {
      type: AuthorType,
      //Arguments for the author field
      args: {
        id: { type: GraphQLInt }
      },
      //Resolving function for the author field
      resolve(parent, args) {
        //Perform query to get author with matching id
        let author = database.getAuthorById(args.id);
        //Return the author data
        return author;
      }
    }
  }
});

//Defining mutation types
const Mutation = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    addBook: {
      type: BookType,
      //Arguments for the addBook field
      args: {
        title: { type: GraphQLString },
        author: { type: GraphQLString },
        genre: { type: GraphQLString }
      },
      //Resolving function for the addBook field
      resolve(parent, args) {
        //Create new book object with given data
        let book = {
          title: args.title,
          author: args.author,
          genre: args.genre
        };
        //Add book to database
        database.addBook(book);
        //Return the book data
        return book;
      }
    },
    addAuthor: {
      type: AuthorType,
      //Arguments for the addAuthor field
      args: {
        name: { type: GraphQLString },
        nationality: { type: GraphQLString },
        birthYear: { type: GraphQLInt }
      },
      //Resolving function for the addAuthor field
      resolve(parent, args) {
        //Create new author object with given data
        let author = {
          name: args.name,
          nationality: args.nationality,
          birthYear: args.birthYear
        };
        //Add author to database
        database.addAuthor(author);
        //Return the author data
        return author;
      }
    }
  }
});

//Creating the GraphQL schema with our root query and mutation types
const schema = new GraphQLSchema({
  query: RootQuery,
  mutation: Mutation
});

//Exporting the schema for use in our server
module.exports = schema;