// GraphQL Schema Definition

// Import necessary GraphQL types
import { GraphQLObjectType, GraphQLSchema, GraphQLInt, GraphQLString, GraphQLFloat, GraphQLBoolean, GraphQLList, GraphQLNonNull } from 'graphql'

// Define a custom GraphQL type
const UserType = new GraphQLObjectType({
  name: 'User',
  description: 'A user object',
  fields: () => ({
    id: { type: GraphQLInt },
    name: { type: GraphQLString },
    age: { type: GraphQLInt },
    height: { type: GraphQLFloat },
    isActive: { type: GraphQLBoolean },
    friends: { type: GraphQLList(UserType) },
    address: { type: GraphQLString },
    country: { type: GraphQLString },
    phone: { type: GraphQLInt },
  })
})

// Mock data
const users = [
  {
    id: 1,
    name: 'John Smith',
    age: 25,
    height: 1.75,
    isActive: true,
    friends: [2, 3, 4],
    address: '123 Main St',
    country: 'USA',
    phone: 1234567890,
  },
  {
    id: 2,
    name: 'Jane Doe',
    age: 30,
    height: 1.6,
    isActive: false,
    friends: [1, 5],
    address: '456 Second St',
    country: 'Canada',
    phone: 0987654321,
  },
  {
    id: 3,
    name: 'Bob Jones',
    age: 20,
    height: 1.8,
    isActive: true,
    friends: [1, 5],
    address: '789 Third St',
    country: 'Australia',
    phone: 2468101214,
  }
]

// Query type
const RootQuery = new GraphQLObjectType({
  name: 'Query',
  description: 'Root Query',
  fields: {
    user: {
      type: UserType,
      description: 'Get a single user by id',
      args: {
        id: { type: GraphQLInt }
      },
      resolve: (parent, args) => {
        return users.find(user => user.id === args.id)
      }
    },
    users: {
      type: new GraphQLList(UserType),
      description: 'Get all users',
      resolve: () => users
    }
  }
})

// Mutation type
const Mutation = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Root Mutation',
  fields: {
    addUser: {
      type: UserType,
      description: 'Add a new user',
      args: {
        name: { type: new GraphQLNonNull(GraphQLString) },
        age: { type: new GraphQLNonNull(GraphQLInt) },
        height: { type: GraphQLFloat },
        isActive: { type: new GraphQLNonNull(GraphQLBoolean) },
        friends: { type: new GraphQLList(GraphQLInt) },
        address: { type: GraphQLString },
        country: { type: GraphQLString },
        phone: { type: GraphQLInt }
      },
      resolve: (parent, args) => {
        const newUser = {
          id: users.length + 1,
          name: args.name,
          age: args.age,
          height: args.height,
          isActive: args.isActive,
          friends: args.friends,
          address: args.address,
          country: args.country,
          phone: args.phone
        }
        users.push(newUser)
        return newUser
      }
    },
    deleteUser: {
      type: UserType,
      description: 'Delete a user',
      args: {
        id: { type: new GraphQLNonNull(GraphQLInt) }
      },
      resolve: (parent, args) => {
        const deletedUser = users.find(user => user.id === args.id)
        users.splice(users.indexOf(deletedUser), 1)
        return deletedUser
      }
    }
  }
})

// Create and export GraphQL schema
export default new GraphQLSchema({
  query: RootQuery,
  mutation: Mutation
})