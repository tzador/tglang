const typeDefs = `
# Designing the schema for a fictional fitness app using GraphQL
type User {
  id: ID! # Unique identifier for user
  name: String! # User's name
  age: Int # User's age
  height: Int # User's height in centimeters
  weight: Int # User's weight in kilograms
  gender: Gender # User's gender, defined as an enum
}

type Workout {
  id: ID! # Unique identifier for workout
  user: User # Reference to the user performing the workout
  date: String! # Date of the workout
  exercises: [Exercise!]! # List of exercises performed in the workout
}

type Exercise {
  id: ID! # Unique identifier for exercise
  name: String! # Name of the exercise
  category: ExerciseCategory! # Type of exercise, defined as an enum
  sets: Int # Number of sets performed
  reps: Int # Number of reps performed in each set
  weight: Int # Weight used for the exercise
}

enum Gender {
  MALE
  FEMALE
}

enum ExerciseCategory {
  STRENGTH
  CARDIO
  FLEXIBILITY
}

# Query for retrieving all workouts for a specific user
type Query {
  workouts(userId: ID!): [Workout!]!
}

# Mutation for creating a new workout for a specific user
type Mutation {
  addWorkout(userId: ID!, date: String!, exercises: [ExerciseInput!]!): Workout!
}

# Input type for exercises in mutation
input ExerciseInput {
  name: String!
  category: ExerciseCategory!
  sets: Int
  reps: Int
  weight: Int
}
`;