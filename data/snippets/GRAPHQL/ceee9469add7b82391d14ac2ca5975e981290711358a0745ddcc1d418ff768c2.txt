const { buildSchema } = require('graphql');

// Define the schema using GraphQL schema language
const schema = buildSchema(`
    type Query {
        courses: [Course!]!
        course(id: ID!): Course!
    }

    type Course {
        id: ID!
        title: String!
        author: String!
        description: String!
        topic: String
        url: String
    }

    input CourseInput {
        title: String!
        author: String!
        description: String!
        topic: String
        url: String
    }

    type Mutation {
        addCourse(input: CourseInput): Course!
        updateCourse(id: ID!, input: CourseInput): Course!
        deleteCourse(id: ID!): Course!
    }
`);

// Define resolvers for the root field
const root = {
    courses: () => { /* Implementation for fetching all courses */ },
    course: ({ id }) => { /* Implementation for fetching course by ID */ },
    addCourse: ({ input }) => { /* Implementation for adding new course */ },
    updateCourse: ({ id, input }) => { /* Implementation for updating existing course by ID */ },
    deleteCourse: ({ id }) => { /* Implementation for deleting course by ID */ }
};

// Create an Express route for GraphQL queries
app.get('/graphql', graphqlHTTP({
    schema: schema,
    rootValue: root,
    graphiql: true
}));

// Make a POST request to the Express route with a GraphQL query
fetch("http://localhost:3000/graphql", {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ query: '{ courses { title } }' })
})
    .then(res => res.json())
    .then(res => console.log(res));