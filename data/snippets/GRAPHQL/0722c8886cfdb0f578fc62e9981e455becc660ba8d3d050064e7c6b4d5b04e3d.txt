type Query {
  user(id: ID!): User!
  post(id: ID!): Post!
  comments(postId: ID!): [Comment!]!
}

type User {
  id: ID!
  username: String!
  email: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  content: String!
  author: User!
  post: Post!
}

# In this example, we have defined a Query type with three fields: user, post, and comments. Each field takes in a specific ID and returns the corresponding type (User, Post, or an array of Comments). This allows us to query for specific information about a user, a post, or all comments on a post. 

# We have also defined three object types: User, Post, and Comment. Each type has specific fields that can be queried for, such as an ID, a title, content, and references to other types (such as author and post).

# This code snippet showcases the use of GraphQL, a query language for APIs. It allows for more efficient and flexible communication between a client and server by specifying exactly what data is needed. This helps to reduce over-fetching and under-fetching of data, resulting in faster and more efficient queries. GraphQL also allows for nested and complex queries, making it a powerful tool for building APIs.