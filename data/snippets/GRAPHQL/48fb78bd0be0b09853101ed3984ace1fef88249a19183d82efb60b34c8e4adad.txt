type Query { // defining a 'Query' type
  book(id: Int!): Book // fields for the 'book' query, include an 'id' param of type Int
  bookList(genre: String): [Book] // a 'bookList' query that takes in an optional 'genre' param of type String and returns an array of 'Book' objects
}

type Book { // defining a 'Book' type
  id: Int! // a required 'id' field of type Int
  title: String! // a required 'title' field of type String
  author: String! // a required 'author' field of type String
  genre: String // an optional 'genre' field of type String
  releaseYear: Int // an optional 'releaseYear' field of type Int
}

type Mutation { // defining a 'Mutation' type
  addBook(title: String!, author: String!, genre: String, releaseYear: Int): Book // a 'addBook' mutation that takes in required 'title' and 'author' params of type String and optional 'genre' and 'releaseYear' params of type String and Int respectively, and returns a 'Book' object
  updateBook(id: Int!, title: String, author: String, genre: String, releaseYear: Int): Book // a 'updateBook' mutation that takes in a required 'id' param of type Int and optional 'title', 'author', 'genre', and 'releaseYear' params of type String and Int, and returns a 'Book' object
  deleteBook(id: Int!): Book // a 'deleteBook' mutation that takes in a required 'id' param of type Int and returns a 'Book' object
}

schema { // defining the overall schema for the GraphQL server
  query: Query // specifying the 'Query' type as the root query for the schema
  mutation: Mutation // specifying the 'Mutation' type as the root mutation for the schema
}