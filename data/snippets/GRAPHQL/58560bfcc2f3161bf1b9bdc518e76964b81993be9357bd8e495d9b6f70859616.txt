# Define the GraphQL schema
type User {
  id: ID!
  name: String
  age: Int
  email: String
}

# Create a root query to retrieve a user by ID
type Query {
  user(id: ID!): User
}

# Define the GraphQL resolvers to retrieve and manipulate data
resolvers = {
  Query: {
    user: ({ id }) => {
      // make a database call to find user by ID
      const user = db.query('SELECT * FROM users WHERE id = ?', [id])
      return user
    },
  },
}

# Create a root mutation to update a user's email
type Mutation {
  updateUserEmail(id: ID!, email: String!): User
}

# Define the GraphQL resolvers for the mutation
resolvers.Mutation.updateUserEmail = async ({ id, email }) => {
  // make a database call to update the user's email
  await db.query('UPDATE users SET email = ? WHERE id = ?', [email, id])

  // return the updated user
  const updatedUser = await db.query('SELECT * FROM users WHERE id = ?', [id])
  return updatedUser
}

# Example query:
# Retrieves user with ID 123 and their name, age, and email
{
  user(id: "123") {
    name
    age
    email
  }
}

# Example mutation:
# Updates user with ID 123's email to "newemail@example.com"
mutation {
  updateUserEmail(id: "123", email: "newemail@example.com") {
    name
    email
  }
}