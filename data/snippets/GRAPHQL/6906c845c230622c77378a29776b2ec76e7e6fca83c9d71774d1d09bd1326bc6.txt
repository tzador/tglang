// Define schema for books
type Book {
  id: ID!
  title: String!
  author: String!
  genre: String!
}

// Define resolver function to return all books
books: [Book!]! {
  resolve: (_, __, context) => {
    return context.db.getAllBooks();
  }
}

// Define mutation to add a new book with input parameters
addBook(title: String!, author: String!, genre: String!): Book!
  // DB function to add a book and return the result
  resolve: (_, {title, author, genre}, context) => {
    // generate a unique id for the new book
    const bookId = context.db.generateId();
    // create a new book object with input parameters
    const newBook = {
      id: bookId,
      title: title,
      author: author,
      genre: genre
    };
    // add the new book to the database
    context.db.addBook(newBook);
    // return the newly added book's info
    return newBook;
  }

// Define query to get a specific book using id
getBook(id: ID!): Book!
  // DB function to find and return the book with the given id
  resolve: (_, {id}, context) => {
    return context.db.getBookById(id);
  }

// Define subscription to get real-time updates when a new book is added
newBookAdded: Book!
  subscribe: (_, __, context) => {
    // use the context's pubsub instance to subscribe to the "bookAdded" event
    return context.pubsub.asyncIterator("bookAdded");
  }