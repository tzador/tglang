//Defining a new GraphQL schema
`
  # A type for a user in our application
  type User {
    id: ID!
    name: String!
    email: String!
    friends: [User]
    posts: [Post]
  }

  # A type for a post in our application
  type Post {
    id: ID!
    title: String!
    content: String!
    author: User!
    likes: [User]
  }

  # Defines the query type, which is used for fetching data
  type Query {
    # Get a single user by their ID
    user(id: ID!): User

    # Get all posts written by a specific user
    postsByAuthor(authorID: ID!): [Post]

    # Get all posts that have been liked by a specific user
    likedPosts(userID: ID!): [Post]
  }

  # Defines the mutations for creating, updating, and deleting data
  type Mutation {
    # Creates a new user with the given name and email
    createUser(name: String!, email: String!): User

    # Creates a new post with the given title and content, authored by the specified user
    createPost(title: String!, content: String!, authorID: ID!): Post

    # Updates the name or email of a user with the given ID
    updateUser(id: ID!, name: String, email: String): User

    # Deletes a user with the given ID
    deleteUser(id: ID!): Boolean
  }
`

//Defining schema resolvers
`
  const resolvers = {
    Query: {
      user: (_, { id }) => {
        // Logic for getting a single user from database
      },
      postsByAuthor: (_, { authorID }) => {
        // Logic for getting all posts by a specific author from database
      },
      likedPosts: (_, { userID }) => {
        // Logic for getting all posts liked by a specific user from database
      }
    },
    Mutation: {
      createUser: (_, { name, email }) => {
        // Logic for creating a new user and adding them to database
      },
      createPost: (_, { title, content, authorID }) => {
        // Logic for creating a new post and adding it to database
      },
      updateUser: (_, { id, name, email }) => {
        // Logic for updating the name and/or email of a user in database
      },
      deleteUser: (_, { id }) => {
        // Logic for deleting a user from database
      }
    },
    User: {
      friends: (parent) => {
        // Logic for getting a user's friends from database
      },
      posts: (parent) => {
        // Logic for getting a user's posts from database
      }
    },
    Post: {
      author: (parent) => {
        // Logic for getting a post's author from database
      },
      likes: (parent) => {
        // Logic for getting a post's likes from database
      }
    }
  }
`

//Creating a GraphQL server with Express
`
  const app = express();

  // Define the GraphQL endpoint
  app.use('/graphql', graphqlHTTP({
    schema: schema,
    rootValue: resolvers,
    graphiql: true, // Enables GraphiQL interface for testing and debugging
  }));

  app.listen(4000, () => {
    console.log('GraphQL server running on port 4000');
  });