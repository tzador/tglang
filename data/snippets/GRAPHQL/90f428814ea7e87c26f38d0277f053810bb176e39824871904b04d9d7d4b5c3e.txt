type User {
  id: ID!
  username: String!
  email: String!
  profile: Profile
  friends: [User]
  posts: [Post]
  permissions: [Permission!]!
}

type Profile {
  name: String!
  age: Int
  bio: String
  location: String
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  likes: Int!
  comments: [Comment]
}

type Comment {
  id: ID!
  content: String!
  author: User!
}

type Permission {
  id: ID!
  name: String!
}

# These are the root query types that return data
type Query {
  getUser(id: ID!): User
  getPost(id: ID!): Post
  getComment(id: ID!): Comment
}

# These are the root mutation types that allow for data manipulation
type Mutation {
  addUser(username: String!, email: String!): User
  addPost(title: String!, content: String!): Post
  addComment(content: String!): Comment
  updateUserName(id:ID!, username: String!): User
  updatePostContent(id: ID!, content: String!): Post
  updateCommentContent(id: ID!, content: String!): Comment
  addFriend(userId: ID!, friendId: ID!): User
  addPermission(userId: ID!, permissionId: ID!): User
  removePermission(userId: ID!, permissionId: ID!): User
}

# Schema defines the structure of the graphql API
schema {
  query: Query
  mutation: Mutation
}