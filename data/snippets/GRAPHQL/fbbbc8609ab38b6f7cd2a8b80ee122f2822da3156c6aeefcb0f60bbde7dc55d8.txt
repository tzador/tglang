const { GraphQLObjectType, GraphQLString, GraphQLList } = require('graphql');

const UserType = new GraphQLObjectType({
  name: 'User',
  description: 'A user in the system',
  fields: () => ({
    id: { type: GraphQLString },
    firstName: { type: GraphQLString },
    lastName: { type: GraphQLString },
    username: { type: GraphQLString },
    email: { type: GraphQLString },
    friends: {
      type: new GraphQLList(UserType),
      description: 'A list of the user's friends',
      resolve: (parent, args) => {
        const userFriends = User.findFriends(parent.id);
        return userFriends.map((friendId) => User.findById(friendId));
      }
    },
    posts: {
      type: new GraphQLList(PostType),
      description: 'A list of the user's posts',
      resolve: (parent, args) => {
        const userPosts = Post.findPosts(parent.id);
        return userPosts.map((postId) => Post.findById(postId));
      }
    }
  })
});

const PostType = new GraphQLObjectType({
  name: 'Post',
  description: 'A post in the system',
  fields: () => ({
    id: { type: GraphQLString },
    title: { type: GraphQLString },
    body: { type: GraphQLString },
    author: {
      type: UserType,
      description: 'The user who authored the post',
      resolve: (parent, args) => {
        return User.findById(parent.authorId);
      }
    },
    comments: {
      type: new GraphQLList(CommentType),
      description: 'A list of comments on the post',
      resolve: (parent, args) => {
        const postComments = Comment.findComments(parent.id);
        return postComments.map((commentId) => Comment.findById(commentId));
      }
    }
  })
});

const CommentType = new GraphQLObjectType({
  name: 'Comment',
  description: 'A comment on a post',
  fields: () => ({
    id: { type: GraphQLString },
    body: { type: GraphQLString },
    author: {
      type: UserType,
      description: 'The user who wrote the comment',
      resolve: (parent, args) => {
        return User.findById(parent.authorId);
      }
    }
  })
});

const RootQuery = new GraphQLObjectType({
  name: 'Root',
  fields: () => ({
    user: {
      type: UserType,
      args: {
        id: { type: GraphQLString }
      },
      resolve: (parent, args) => {
        return User.findById(args.id);
      }
    },
    post: {
      type: PostType,
      args: {
        id: { type: GraphQLString }
      },
      resolve: (parent, args) => {
        return Post.findById(args.id);
      }
    },
    comment: {
      type: CommentType,
      args: {
        id: { type: GraphQLString }
      },
      resolve: (parent, args) => {
        return Comment.findById(args.id);
      }
    }
  })
});

module.exports = new GraphQLSchema({
  query: RootQuery
});