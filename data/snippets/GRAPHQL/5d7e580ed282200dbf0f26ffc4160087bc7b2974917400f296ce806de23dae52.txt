/**
 * In GraphQL, we define our schema first which specifies the types of data
 * we can request from our GraphQL API.
 */

// Import the necessary dependencies
import {
  // GraphQLObjectType is used to define the types of data that can be queried
  GraphQLObjectType,
  // GraphQLString is a predefined scalar type representing a string data
  GraphQLString,
  // GraphQLInt is a predefined scalar type representing an integer data
  GraphQLInt,
  // GraphQLList is a predefined scalar type representing a list of data
  GraphQLList,
  // GraphQLSchema is used to combine all the schemas and resolve them
  GraphQLSchema,
} from 'graphql';

// Define a new GraphQLObjectType named "PostType"
const PostType = new GraphQLObjectType({
  // Name of the type
  name: 'Post',
  // Description of the type
  description: 'A blog post',
  // Fields that can be queried on this type
  fields: () => ({
    // `id` field of type GraphQLInt
    id: {
      type: GraphQLInt,
      // Resolve function to return data for this field
      resolve: (post) => post.id,
    },
    // `title` field of type GraphQLString
    title: {
      type: GraphQLString,
      // Resolve function to return data for this field
      resolve: (post) => post.title,
    },
    // `content` field of type GraphQLString
    content: {
      type: GraphQLString,
      // Resolve function to return data for this field
      resolve: (post) => post.content,
    },
    // `author` field of type GraphQLString
    author: {
      type: GraphQLString,
      // Resolve function to return data for this field
      resolve: (post) => post.author,
    },
    // `comments` field of type GraphQLList
    // This field represents a list of comments associated with the post
    comments: {
      type: new GraphQLList(CommentType),
      // Resolve function to return data for this field
      resolve: (post) => post.comments,
    },
  }),
});

// Define a new GraphQLObjectType named "CommentType"
const CommentType = new GraphQLObjectType({
  // Name of the type
  name: 'Comment',
  // Description of the type
  description: 'A comment on a blog post',
  // Fields that can be queried on this type
  fields: () => ({
    // `id` field of type GraphQLInt
    id: {
      type: GraphQLInt,
      // Resolve function to return data for this field
      resolve: (comment) => comment.id,
    },
    // `content` field of type GraphQLString
    content: {
      type: GraphQLString,
      // Resolve function to return data for this field
      resolve: (comment) => comment.content,
    },
    // `author` field of type GraphQLString
    author: {
      type: GraphQLString,
      // Resolve function to return data for this field
      resolve: (comment) => comment.author,
    },
  }),
});

// Define the root query type, which specifies the available queries
const RootQuery = new GraphQLObjectType({
  // Name of the type
  name: 'Query',
  // Fields that can be queried on this type
  fields: () => ({
    // `post` field of type PostType
    post: {
      type: PostType,
      // Arguments that can be passed to this field
      args: {
          // `id` argument of type GraphQLInt
          id: {
            type: GraphQLInt
          }
      },
      // Resolve function to return data for this field
      resolve: (root, args) => {
          // Code to query the database and return the post with the specified id
      }
    },
    // `posts` field of type GraphQLList
    // This field represents a list of all posts in the blog
    posts: {
      type: new GraphQLList(PostType),
      // Resolve function to return data for this field
      resolve: () => {
          // Code to query the database and return all posts
      }
    },
  }),
});

// Define the root mutation type, which specifies the available mutations
const RootMutation = new GraphQLObjectType({
  // Name of the type
  name: 'Mutation',
  // Fields that can be queried on this type
  fields: () => ({
    // `addPost` field of type PostType
    // This mutation allows us to add a new post to the blog
    addPost: {
      type: PostType,
      // Arguments that can be passed to this field
      args: {
        // `title` argument of type GraphQLString
        title: {
          type: GraphQLString,
        },
        // `content` argument of type GraphQLString
        content: {
          type: GraphQLString,
        },
        // `author` argument of type GraphQLString
        author: {
          type: GraphQLString,
        },
      },
      // Resolve function for this mutation
      resolve: (root, args) => {
        // Code to create a new post in the database with the passed arguments
      },
    },
    // `addComment` field of type CommentType
    // This mutation allows us to add a new comment to a post
    addComment: {
      type: CommentType,
      // Arguments that can be passed to this field
      args: {
        // `postId` argument of type GraphQLInt
        postId: {
          type: GraphQLInt,
        },
        // `content` argument of type GraphQLString
        content: {
          type: GraphQLString,
        },
        // `author` argument of type GraphQLString
        author: {
          type: GraphQLString,
        },
      },
      // Resolve function for this mutation
      resolve: (root, args) => {
        // Code to create a new comment in the database with the passed arguments
      },
    },
  }),
});

// Define the schema by combining the query type and mutation type
const schema = new GraphQLSchema({
  query: RootQuery,
  mutation: RootMutation,
});

// Export the schema
export default schema;