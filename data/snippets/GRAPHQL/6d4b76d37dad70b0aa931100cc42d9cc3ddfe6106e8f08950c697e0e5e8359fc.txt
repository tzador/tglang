type Author {
  id: ID! # unique identifier for the author
  name: String! # name of the author
  books: [Book!]! # list of books written by the author
}

type Book {
  id: ID! # unique identifier for the book
  title: String! # title of the book
  author: Author! # author of the book
  genre: String # genre of the book
  published: Int # year the book was published 
  summary: String # brief summary of the book
}

type Query {
  authors: [Author!]! # returns a list of all authors
  author(name: String!): Author # returns the author with the specified name
  books: [Book!]! # returns a list of all books
  book(title: String!): Book # returns the book with the specified title
}

type Mutation {
  addAuthor(name: String!): Author # creates a new author with the specified name
  updateAuthor(id: ID!, name: String): Author # updates the name of the author with the specified id
  deleteAuthor(id: ID!): Author # deletes the author with the specified id
  addBook(title: String!, authorId: ID!, genre: String, published: Int, summary: String): Book # creates a new book with the specified details
  updateBook(id: ID!, title: String, authorId: ID, genre: String, published: Int, summary: String): Book # updates the details of the book with the specified id
  deleteBook(id: ID!): Book # deletes the book with the specified id
}