const { GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLList, GraphQLNonNull } = require('graphql'); // importing necessary GraphQL modules

// defining custom type for a person
const PersonType = new GraphQLObjectType({
  name: 'Person',
  description: 'Represents a person',
  fields: () => ({
    id: { type: GraphQLNonNull(GraphQLInt) }, // non-null GraphQLInt type for id field
    firstName: { type: GraphQLNonNull(GraphQLString) }, // non-null GraphQLString type for first name field
    lastName: { type: GraphQLNonNull(GraphQLString) }, // non-null GraphQLString type for last name field
    age: { type: GraphQLInt }, // nullable GraphQLInt type for age field
    address: { type: GraphQLString }, // nullable GraphQLString type for address field
    friends: { type: GraphQLList(PersonType) }, // list of person types for friends field
  }),
});

// defining root query type
const RootQueryType = new GraphQLObjectType({
  name: 'Query',
  description: 'Root Query',
  fields: () => ({
    person: {
      type: PersonType,
      description: 'A single person',
      args: {
        id: { type: GraphQLInt }, // GraphQLInt type argument for id
      },
      resolve: (parent, args) => { // resolver function to fetch data
        // code to fetch person data based on id
      },
    },
    people: {
      type: GraphQLList(PersonType),
      description: 'List of people',
      resolve: (parent, args) => { // resolver function to fetch data
        // code to fetch all people data
      },
    },
  }),
});

// defining root mutation type
const RootMutationType = new GraphQLObjectType({
  name: 'Mutation',
  description: 'Root Mutation',
  fields: () => ({
    addPerson: {
      type: PersonType,
      description: 'Add a new person',
      args: {
        firstName: { type: GraphQLNonNull(GraphQLString) }, // non-null GraphQLString type argument for first name
        lastName: { type: GraphQLNonNull(GraphQLString) }, // non-null GraphQLString type argument for last name
        age: { type: GraphQLInt }, // nullable GraphQLInt type argument for age
        address: { type: GraphQLString }, // nullable GraphQLString type argument for address
      },
      resolve: (parent, args) => { // resolver function to create new person
        // code to create new person in database using arguments provided
      }
    },
    updatePerson: {
      type: PersonType,
      description: 'Update an existing person',
      args: {
        id: { type: GraphQLNonNull(GraphQLInt) }, // non-null GraphQLInt type argument for id
        firstName: { type: GraphQLString }, // nullable GraphQLString type argument for first name
        lastName: { type: GraphQLString }, // nullable GraphQLString type argument for last name
        age: { type: GraphQLInt }, // nullable GraphQLInt type argument for age
        address: { type: GraphQLString }, // nullable GraphQLString type argument for address
      },
      resolve: (parent, args) => { // resolver function to update existing person
        // code to update person in database based on id and arguments provided
      }
    },
    deletePerson: {
      type: PersonType,
      description: 'Delete an existing person',
      args: {
        id: { type: GraphQLNonNull(GraphQLInt) }, // non-null GraphQLInt type argument for id
      },
      resolve: (parent, args) => { // resolver function to delete existing person
        // code to delete person from database based on id
      }
    }
  }),
});

// exporting schema which includes root query and root mutation
module.exports = new GraphQLSchema({
  query: RootQueryType,
  mutation: RootMutationType,
});