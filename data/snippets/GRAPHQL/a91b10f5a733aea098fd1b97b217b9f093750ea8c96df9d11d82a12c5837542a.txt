type Query { // start of type Query
  country(id: ID!): Country // creates a query for a specific country with the given ID
  countries: [Country] // creates a query for all countries, returns an array of Country objects
}

type Country @key(fields: "id") { // creates a type Country with a unique key field 'id'
  id: ID! // declares the id field as non-nullable ID type
  name: String! // declares the name field as non-nullable String type
  capital: String // declares the capital field as nullable String type
  population: Int! // declares the population field as non-nullable Int type
  languages: [String!]! // declares the languages field as a non-nullable array of non-nullable Strings
}

type Mutation { // start of type Mutation
  addCountry(id: ID!, name: String!, capital: String, population: Int!, languages: [String!]!): Country // creates a mutation for adding a new country with the given parameters
}

schema { // start of schema
  query: Query // declares the root query type as Query
  mutation: Mutation // declares the root mutation type as Mutation
}