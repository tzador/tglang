input MovieInput {
  # The title of the movie
  title: String
  # The year the movie was released
  releaseYear: Int
  # The genre of the movie
  genre: String
}

input ActorInput {
  # The name of the actor/actress
  name: String
  # The age of the actor/actress
  age: Int
  # A list of movies the actor/actress has starred in
  movies: [MovieInput]
}

type Movie {
  # The unique ID of the movie
  id: ID!
  # The title of the movie
  title: String!
  # The year the movie was released
  releaseYear: Int!
  # The genre of the movie
  genre: String!
}

type Actor {
  # The unique ID of the actor/actress
  id: ID!
  # The name of the actor/actress
  name: String!
  # The age of the actor/actress
  age: Int!
  # A list of movies the actor/actress has starred in
  movies: [Movie]!
}

type Query {
  # Retrieve a specific movie by its unique ID
  movie(id: ID!): Movie
  # Retrieve all movies
  allMovies: [Movie]
  # Retrieve a specific actor/actress by their unique ID
  actor(id: ID!): Actor
  # Retrieve all actors/actresses
  allActors: [Actor]
}

type Mutation {
  # Add a new movie to the database
  addMovie(movie: MovieInput!): Movie!
  # Add a new actor/actress to the database
  addActor(actor: ActorInput!): Actor!
  # Update an existing movie in the database
  updateMovie(id: ID!, movie: MovieInput!): Movie!
  # Update an existing actor/actress in the database
  updateActor(id: ID!, actor: ActorInput!): Actor!
  # Remove a movie from the database
  deleteMovie(id: ID!): Movie!
  # Remove an actor/actress from the database
  deleteActor(id: ID!): Actor!
}