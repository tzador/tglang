const {
    GraphQLObjectType,
    GraphQLSchema,
    GraphQLNonNull,
    GraphQLString,
    GraphQLInt
} = require('graphql');

// Define a custom GraphQLObjectType for a type called Book
const BookType = new GraphQLObjectType({
    name: 'Book',
    description: 'A book in our library',
    fields: () => ({
        title: {
            type: new GraphQLNonNull(GraphQLString),
            description: 'The title of the book'
        },
        author: {
            type: new GraphQLNonNull(GraphQLString),
            description: 'The author of the book'
        },
        pages: {
            type: new GraphQLNonNull(GraphQLInt),
            description: 'The number of pages in the book'
        },
        genre: {
            type: GraphQLString,
            description: 'The genre of the book'
        }
    })
});

// Define a custom GraphQLObjectType for a type called Author
const AuthorType = new GraphQLObjectType({
    name: 'Author',
    description: 'An author of books in our library',
    fields: () => ({
        name: {
            type: new GraphQLNonNull(GraphQLString),
            description: 'The name of the author'
        },
        books: {
            type: new GraphQLNonNull(GraphQLList(BookType)),
            description: 'A list of books written by the author'
        }
    })
});

// Define a root query for retrieving data from the library
// This will allow us to query for specific books and authors
const Query = new GraphQLObjectType({
    name: 'Query',
    fields: {
        book: {
            type: BookType,
            description: 'Get information about a specific book',
            args: {
                title: { type: GraphQLString }
            },
            resolve: (root, args, context, info) => {
                // Retrieve data from a database or API
                // Here we are simply returning some dummy data
                return {
                    title: args.title,
                    author: 'J.K. Rowling',
                    pages: 384,
                    genre: 'Fantasy'
                };
            }
        },
        author: {
            type: AuthorType,
            description: 'Get information about a specific author',
            args: {
                name: { type: GraphQLString }
            },
            resolve: (root, args, context, info) => {
                // Retrieve data from a database or API
                // Here we are simply returning some dummy data
                return {
                    name: args.name,
                    books: [{
                        title: 'Harry Potter and the Philosopher\'s Stone',
                        pages: 336,
                        genre: 'Fantasy'
                    },
                    {
                        title: 'Harry Potter and the Chamber of Secrets',
                        pages: 341,
                        genre: 'Fantasy'
                    }]
                };
            }
        }
    }
});

// Define a root mutation for adding or updating data in the library
// This will allow us to add new books and authors to the library
const Mutation = new GraphQLObjectType({
    name: 'Mutation',
    fields: {
        addBook: {
            type: BookType,
            description: 'Add a new book to the library',
            args: {
                title: { type: new GraphQLNonNull(GraphQLString) },
                author: { type: new GraphQLNonNull(GraphQLString) },
                pages: { type: new GraphQLNonNull(GraphQLInt) },
                genre: { type: GraphQLString }
            },
            resolve: (root, args, context, info) => {
                // Save the data to a database or API
                // Here we are simply returning the added book
                return {
                    title: args.title,
                    author: args.author,
                    pages: args.pages,
                    genre: args.genre
                };
            }
        }
    }
});

// Create a new GraphQL schema with the defined query and mutation
const schema = new GraphQLSchema({
    query: Query,
    mutation: Mutation
});

// Export the schema so it can be used in other modules
module.exports = schema;