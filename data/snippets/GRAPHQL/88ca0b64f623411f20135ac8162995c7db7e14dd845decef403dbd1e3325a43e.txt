type Query {   // Type for querying data
  user(id: ID!): User // Query to retrieve a specific user by ID
  allUsers(limit: Int, offset: Int): [User] // Query to retrieve multiple users with optional limit and offset parameters
  post(id:ID!): Post //Query to retrieve a specific post by ID
  allPosts(limit: Int, offset: Int): [Post] // Query to retrieve multiple posts with optional limit and offset parameters
}

type User { // Type for user data
  id: ID! // Unique identifier for each user
  username: String! // User's username
  email: String!   // User's email address
  posts: [Post]!   // List of posts created by the user
}

type Post { // Type for post data
  id: ID! // Unique identifier for each post
  title: String! // Post's title
  content: String! // Post's content
  author: User! // User who created the post
  comments: [Comment]! // List of comments on the post
}

type Comment { // Type for comment data
  id: ID! // Unique identifier for each comment
  content: String! // Comment's content
  author: User! // User who wrote the comment
  post: Post! // Post the comment was written on
}

input CreateUserInput { // Input type for creating a new user
  username: String! // User's desired username
  email: String! // User's email address
  password: String! // User's desired password
}

input CreatePostInput { // Input type for creating a new post
  title: String! // Post's title
  content: String! // Post's content
  authorID: ID! // ID of the user creating the post
}

input CreateCommentInput { // Input type for creating a new comment
  content: String! // Comment's content
  authorID: ID!  // ID of the user writing the comment
  postID: ID! // ID of the post the comment is written on
}

type Mutation { // Type for performing mutations, such as creating, updating, or deleting data
  createUser(input: CreateUserInput!): User! // Mutation to create a new user
  createPost(input: CreatePostInput!): Post! // Mutation to create a new post
  createComment(input: CreateCommentInput!): Comment! // Mutation to create a new comment
  updatePost(id: ID!, input: CreatePostInput!): Post! // Mutation to update a post by ID
  deletePost(id: ID!): Post! // Mutation to delete a post by ID
}

schema { // Schema declaration
  query: Query // Specifies which type will handle incoming query requests
  mutation: Mutation // Specifies which type will handle incoming mutation requests
}