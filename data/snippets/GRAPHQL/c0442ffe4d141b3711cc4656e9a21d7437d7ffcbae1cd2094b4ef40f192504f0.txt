type User {                         # Define a GraphQL type called "User"
  id: ID!                           # Specify the "id" field of type ID with a non-null constraint
  name: String                      # Specify the "name" field of type String
  age: Int                          # Specify the "age" field of type Int
  email: String!                    # Specify the "email" field of type String with a non-null constraint
  friends: [User!]                  # Specify the "friends" field of type list of Users with a non-null constraint
  posts(page: Int, limit: Int): [Post!] # Specify the "posts" field, which takes in page and limit arguments and returns a list of Posts with a non-null constraint
}

type Post {                         # Define a GraphQL type called "Post"
  id: ID!                           # Specify the "id" field of type ID with a non-null constraint
  title: String                     # Specify the "title" field of type String
  body: String!                     # Specify the "body" field of type String with a non-null constraint
  author: User!                     # Specify the "author" field of type User with a non-null constraint
  comments: [Comment!]              # Specify the "comments" field of type list of Comments
}

type Comment {                      # Define a GraphQL type called "Comment"
  id: ID!                           # Specify the "id" field of type ID with a non-null constraint
  text: String!                     # Specify the "text" field of type String with a non-null constraint
  author: User!                     # Specify the "author" field of type User with a non-null constraint
  post: Post!                       # Specify the "post" field of type Post with a non-null constraint
}

schema {                            # Define the root Query and Mutation types for our GraphQL schema
  query: Query                      # Specify the root query type
  mutation: Mutation                # Specify the root mutation type
}

type Query {                        # Define the root Query type
  user(id: ID!): User               # Specify the "user" field, which takes in an "id" argument of type ID and returns a User
  post(id: ID!): Post               # Specify the "post" field, which takes in an "id" argument of type ID and returns a Post
  comments(limit: Int!, sort: String): [Comment!] # Specify the "comments" field, which takes in "limit" and "sort" arguments and returns a list of Comments
}

type Mutation {                     # Define the root Mutation type
  createUser(name: String!, age: Int!, email: String!): User # Specify the "createUser" field, which takes in "name", "age", and "email" arguments and returns a User
  updateUser(id: ID!, name: String, age: Int, email: String): User # Specify the "updateUser" field, which takes in "id", and optional "name", "age", and "email" arguments and returns a User
  deleteUser(id: ID!): String       # Specify the "deleteUser" field, which takes in an "id" argument and returns a String
}