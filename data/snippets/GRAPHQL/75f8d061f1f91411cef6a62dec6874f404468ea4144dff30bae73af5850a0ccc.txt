const { graphql, buildSchema } = require("graphql");

// Define schema with type, input and query types
const schema = buildSchema(`
  type User {
    id: ID!
    name: String!
    email: String!
    age: Int!
    posts: [Post!]!
    friends: [User!]!
  }

  type Post {
    id: ID!
    title: String!
    body: String!
    author: User!
  }

  input UserInput {
    name: String!
    email: String!
    age: Int!
  }

  type Query {
    users: [User!]!
    user(id: ID!): User!
    posts: [Post!]!
    post(id: ID!): Post!
  }
`);

// Define resolvers to handle incoming queries
const root = {
  users: () => {
    // A dummy list of users to return
    return [
      {
        id: 1,
        name: "John Doe",
        email: "john.doe@gmail.com",
        age: 25,
        posts: [1, 2],
        friends: [2, 3]
      },
      {
        id: 2,
        name: "Jane Smith",
        email: "jane.smith@gmail.com",
        age: 30,
        posts: [3],
        friends: [1, 3]
      },
      {
        id: 3,
        name: "Bob Johnson",
        email: "bob.johnson@gmail.com",
        age: 35,
        posts: [4],
        friends: [1, 2]
      }
    ];
  },
  user: (args) => {
    // Find user with matching ID
    return {
      id: args.id,
      name: "John Doe",
      email: "john.doe@gmail.com",
      age: 25,
      posts: [1, 2],
      friends: [2, 3]
    };
  },
  posts: () => {
    // A dummy list of posts to return
    return [
      {
        id: 1,
        title: "First Post",
        body: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        author: {
          id: 1,
          name: "John Doe"
        }
      },
      {
        id: 2,
        title: "Second Post",
        body: "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
        author: {
          id: 1,
          name: "John Doe"
        }
      },
      {
        id: 3,
        title: "Third Post",
        body: "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
        author: {
          id: 2,
          name: "Jane Smith"
        }
      },
      {
        id: 4,
        title: "Fourth Post",
        body: "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
        author: {
          id: 3,
          name: "Bob Johnson"
        }
      }
    ];
  },
  post: (args) => {
    // Find post with matching ID
    return {
      id: args.id,
      title: "First Post",
      body: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
      author: {
        id: 1,
        name: "John Doe"
      }
    };
  }
};

// Execute query
graphql(schema, `
  {
    users {
      id
      name
      email
      age
      posts {
        id
        title
        body
        author {
          name
        }
      }
      friends {
        name
      }
    }
    posts {
      id
      title
      body
      author {
        name
      }
    }
  }
`, root).then((response) => {
  // Print response from query execution
  console.log(response);
});