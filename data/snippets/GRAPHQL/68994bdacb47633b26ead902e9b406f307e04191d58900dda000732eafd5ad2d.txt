type Person { // Declares a GraphQL object type called "Person"
  id: ID! // Declares a non-nullable field of type ID
  name: String! // Declares a non-nullable field of type String
  age: Int // Declares a nullable field of type Int
  address: Address // Declares a nested object type as a field
  friends: [Person] // Declares a list of Person objects as a field
  favoriteMovies: [String!]! // Declares a non-nullable list of non-nullable Strings as a field
}

type Address { // Declares a GraphQL object type called "Address"
  street: String! // Declares a non-nullable field of type String
  city: String! // Declares a non-nullable field of type String
  state: String! // Declares a non-nullable field of type String
}

type Query { // Declares a root Query type
  getPerson(id: ID!): Person // Declares a "getPerson" query that takes in an ID and returns a Person object
}

type Mutation { // Declares a root Mutation type
  addPerson(name: String!, age: Int!, address: Address, friends: [ID]!, favoriteMovies: [String!]!): Person // Declares an "addPerson" mutation that takes in required fields and returns a Person object
  updatePerson(id: ID!, name: String, age: Int, address: Address, friends: [ID], favoriteMovies: [String]): Person // Declares an "updatePerson" mutation that takes in an ID and optional fields and returns a Person object
}

schema { // Creates a schema that specifies the available object types and root types
  query: Query // Specifies the Query root type
  mutation: Mutation // Specifies the Mutation root type
}