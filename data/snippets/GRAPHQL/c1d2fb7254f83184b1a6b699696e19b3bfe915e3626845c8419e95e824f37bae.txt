/* Define an interface for a user with specific fields */
interface User {
    name: String!
    age: Int
    address: String
}

/* Define a type for a query with arguments */
type Query {
    getUser(id: Int!): User
}

/* Define a type for a mutation with arguments */
type Mutation {
    addUser(name: String!, age: Int, address: String): User
}

/* Define a resolver function for retrieving a user based on ID */
getUser: User(id: Int!): User {
    return db.getUserById(id)
}

/* Define a resolver function for adding a new user */
addUser: User(name: String!, age: Int, address: String): User {
    /* Validate user input before adding to database */
    if (name.length > 50 || age < 0) {
        throw new Error("Invalid user input!")
    }

    /* Create a new user object with input data */
    let user = {
        name: name,
        age: age,
        address: address
    }

    /* Add user to database and return the newly added user object */
    user = db.addUser(user)
    return user
}

/* Define a schema with our query and mutation types */
schema {
    query: Query
    mutation: Mutation
}