//Setting up a GraphQL Schema
//First, import the necessary libraries
import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLInt,
  GraphQLSchema,
  GraphQLList,
  GraphQLNonNull
} from 'graphql';

//Define a user type
//This will serve as the model for our data
const UserType = new GraphQLObjectType({
  name: 'User',
  fields: () => ({
    id: { type: GraphQLInt },
    name: { type: GraphQLString }
  })
});

//Define a root query that will serve as our entry point for data
//This example uses a hard-coded array,
//but you can also use a database or API for your data source
const RootQuery = new GraphQLObjectType({
  name: 'RootQueryType',
  fields: {
    //A query to retrieve a single user by their ID
    user: {
      type: UserType,
      //Use non-null to indicate that an ID must be provided
      args: {
        id: { type: new GraphQLNonNull(GraphQLInt) }
      },
      resolve(parent, args) {
        //Perform a data retrieval based on the provided ID
        return users.filter(user => user.id === args.id)[0];
      }
    },
    //A query to retrieve all users
    users: {
      type: new GraphQLList(UserType),
      resolve(parent, args) {
        //Simply return all users in the array
        return users;
      }
    }
  }
});

//Define a mutation for creating new users
const mutation = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    addUser: {
      type: UserType,
      //Use non-null to indicate that all fields must be provided
      args: {
        id: { type: new GraphQLNonNull(GraphQLInt) },
        name: { type: new GraphQLNonNull(GraphQLString) }
      },
      resolve(parent, args) {
        //Create a new user object and add it to the array
        const newUser = {
          id: args.id,
          name: args.name
        };
        users.push(newUser);
        return newUser;
      }
    }
  }
});

//Create a GraphQL schema with our root query and mutation
export default new GraphQLSchema({
  query: RootQuery,
  mutation
});