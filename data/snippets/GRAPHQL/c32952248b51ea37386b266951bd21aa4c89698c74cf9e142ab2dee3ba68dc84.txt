const { GraphQLObjectType, GraphQLSchema, GraphQLInt, GraphQLString, GraphQLList } = require('graphql');

// Define the Book type
const BookType = new GraphQLObjectType({
  name: 'Book',
  description: 'This represents a book written by an author',
  fields: () => ({
    id: { type: GraphQLInt },
    title: { type: GraphQLString },
    author: { type: GraphQLString },
    genre: { type: GraphQLString },
    publications: { type: new GraphQLList(GraphQLString) }
  })
});

// Define the Author type
const AuthorType = new GraphQLObjectType({
  name: 'Author',
  description: 'Represents an author of a book',
  fields: () => ({
    id: { type: GraphQLInt },
    name: { type: GraphQLString },
    books: { type: new GraphQLList(BookType) }
  })
});

// Define the root query
const RootQuery = new GraphQLObjectType({
  name: 'RootQueryType',
  description: 'Root Query',
  fields: {
    book: {
      type: BookType,
      description: 'A single book',
      args: {
        id: { type: GraphQLInt }
      },
      resolve(parent, args) {
        // Logic to get a book by id from database or API
        // Return data in the shape of BookType
      }
    },
    author: {
      type: AuthorType,
      description: 'A single author',
      args: {
        id: { type: GraphQLInt }
      },
      resolve(parent, args) {
        // Logic to get an author by id from database or API
        // Return data in the shape of AuthorType
      }
    },
    books: {
      type: new GraphQLList(BookType),
      description: 'List of all books',
      resolve(parent, args) {
        // Logic to retrieve all books from database or API
        // Return data in the shape of BookType
      }
    },
    authors: {
      type: new GraphQLList(AuthorType),
      description: 'List of all authors',
      resolve(parent, args) {
        // Logic to retrieve all authors from database or API
        // Return data in the shape of AuthorType
      }
    }
  }
});

// Define the schema
const schema = new GraphQLSchema({
  query: RootQuery
});