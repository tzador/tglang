type Query { // defining a GraphQL query type
  books: [Book]! // declaring a field 'books' of type 'Book' array, with the non-null marker '!' indicating that the field cannot be null
}

type Mutation { // defining a GraphQL mutation type
  addBook(title: String!, author: String!, genre: String!): Book! // declaring a mutation field 'addBook' that takes in three arguments (title, author and genre), each with the non-null marker '!', and returns an object of type 'Book' with the non-null marker '!'
}

type Book { // defining a GraphQL object type 'Book'
  id: ID! // declaring a field 'id' of type 'ID' with the non-null marker '!', indicating that the field cannot be null
  title: String! // declaring a field 'title' of type 'String' with the non-null marker '!', indicating that the field cannot be null
  author: String! // declaring a field 'author' of type 'String' with the non-null marker '!', indicating that the field cannot be null
  genre: String! // declaring a field 'genre' of type 'String' with the non-null marker '!', indicating that the field cannot be null
}