const { GraphQLServer } = require('graphql-yoga');

// Define type definitions
const typeDefs = `
  type Query {
    users: [User!]!
    user(id: Int!): User
  }

  type Mutation {
    addUser(name: String!, age: Int!): User!
    editUser(id: Int!, name: String, age: Int): User!
    deleteUser(id: Int!): User!
  }

  type User {
    id: Int!
    name: String!
    age: Int!
  }
`;

// Define resolvers
const resolvers = {
  Query: {
    users: () => getUsers(),
    user: (parent, args) => getUserById(args.id),
  },
  Mutation: {
    addUser: (parent, args) => addUser(args),
    editUser: (parent, args) => editUser(args),
    deleteUser: (parent, args) => deleteUser(args.id),
  },
};

// Define dummy data
let users = [
  {
    id: 1,
    name: "John",
    age: 25,
  },
  {
    id: 2,
    name: "Emily",
    age: 30,
  },
  {
    id: 3,
    name: "Max",
    age: 28,
  },
];

// Create functions for resolvers
const getUsers = () => users;
const getUserById = (id) => users.find((user) => user.id === id);
const addUser = ({name, age}) => {
  const id = users.length + 1;
  const newUser = { id, name, age };
  users.push(newUser);
  return newUser;
};
const editUser = ({ id, name, age }) => {
  const index = users.findIndex((user) => user.id === id);
  if (index !== -1) {
    if (name) users[index].name = name;
    if (age) users[index].age = age;
    return users[index];
  }
  return null;
};
const deleteUser = (id) => {
  const index = users.findIndex((user) => user.id === id);
  if (index !== -1) {
    const deletedUser = users.splice(index, 1);
    return deletedUser[0];
  }
  return null;
};

// Create GraphQL server and start it
const server = new GraphQLServer({ typeDefs, resolvers });
server.start(() => console.log("Server is running on http://localhost:4000"));