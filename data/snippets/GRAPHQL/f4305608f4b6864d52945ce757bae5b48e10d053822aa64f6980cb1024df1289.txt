// Create type definitions
type User {
  id: ID!
  name: String!
  email: String!
  age: Int
}

// Define Query and Mutation
type Query {
  getUser(id: ID!): User!
  getAllUsers: [User]!
}

type Mutation {
  createUser(name: String!, email: String!, age: Int): User!
  updateUser(id: ID!, name: String, email: String, age: Int): User!
  deleteUser(id: ID!): User!
}

// Define resolvers
const userResolvers = {
  Query: {
    getUser: (parent, args, context, info) => {
      const user = users.find(user => user.id === args.id);
      if (!user) throw new Error("User not found");
      return user;
    },
    getAllUsers: () => {
      return users;
    },
  },
  Mutation: {
    createUser: (parent, args, context, info) => {
      const newUser = {
        id: uuidv4(),
        name: args.name,
        email: args.email,
        age: args.age,
      };
      users.push(newUser);
      return newUser;
    },
    updateUser: (parent, args, context, info) => {
      const user = users.find(user => user.id === args.id);
      if (!user) throw new Error("User not found");
      if (args.name) user.name = args.name;
      if (args.email) user.email = args.email;
      if (args.age) user.age = args.age;
      return user;
    },
    deleteUser: (parent, args, context, info) => {
      const userIndex = users.findIndex(user => user.id === args.id);
      if (userIndex === -1) throw new Error("User not found");
      const deletedUser = users.splice(userIndex, 1)[0];
      return deletedUser;
    },
  },
};

// Create Apollo server
const server = new ApolloServer({
  typeDefs: typeDefs,
  resolvers: [userResolvers],
});

// Start server
server.listen().then(({ url }) => {
  console.log(`ğŸš€ Server ready at ${url}`);
});