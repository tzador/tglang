# Define a GraphQL schema

type User {
  id: ID!
  name: String!
  age: Int
  friends: [User!]!
}

type Query {
  getUser(id: ID!): User
}

type Mutation {
  addUser(name: String!, age: Int, friends: [ID]): User
}

# Create resolvers to handle GraphQL queries and mutations

const resolvers = {
  Query: {
    getUser: (parent, args, context, info) => {
      // logic to retrieve a user from database based on id provided
      // return the user object
    }
  },
  Mutation: {
    addUser: (parent, args, context, info) => {
      // logic to add a new user to the database
      // return the newly added user object
    }
  },
  User: {
    friends: (parent, args, context, info) => {
      // logic to retrieve friends of the user from database
      // return an array of user objects
    }
  }
}

# Setup a GraphQL server

const { graphql, buildSchema } = require('graphql')
const express = require('express')

# Define the schema using buildSchema method

const schema = buildSchema(`
  type User {
    id: ID!
    name: String!
    age: Int
    friends: [User!]!
  }

  type Query {
    getUser(id: ID!): User
  }

  type Mutation {
    addUser(name: String!, age: Int, friends: [ID]): User
  }
`)

# Create an express server and setup a route to handle GraphQL requests

const app = express()

app.use('/graphql', graphqlHTTP({
  schema: schema,
  rootValue: resolvers,
  graphiql: true
}))

app.listen(4000, () => {
  console.log('GraphQL server running on port 4000')
})

# Sample GraphQL query to get a user with id 1 and their friends
{
  getUser(id: "1") {
    id
    name
    age
    friends {
      id
      name
      age
    }
  }
}

# Sample GraphQL mutation to add a new user
mutation {
  addUser(name: "John Doe", age: 25, friends: ["2", "3"]) {
    id
    name
    age
    friends {
      id
      name
      age
    }
  }
}