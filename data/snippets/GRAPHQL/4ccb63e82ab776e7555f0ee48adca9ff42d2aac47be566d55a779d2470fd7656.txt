const { GraphQLObjectType, GraphQLSchema, GraphQLList, GraphQLString  } = require('graphql');

// Define a custom type for a user
const UserType = new GraphQLObjectType({
  name: 'User',
  fields: {
    id: { type: GraphQLString },
    name: { type: GraphQLString },
    age: { type: GraphQLString },
    favorites: { type: new GraphQLList(GraphQLString) },
    friends: { type: new GraphQLList(UserType) }
  }
});

// Define the root query type
const QueryType = new GraphQLObjectType({
  name: 'Query',
  fields: {
    // Query to get a specific user by ID
    user: {
      type: UserType,
      args: {
        id: { type: GraphQLString }
      },
      resolve: (parent, args) => {
        // Logic to retrieve user from database, using the id provided in the args
        return getUser(args.id);
      }
    },
    // Query to get all users
    users: {
      type: new GraphQLList(UserType),
      resolve: (parent, args) => {
        // Logic to retrieve all users from database
        return getAllUsers();
      }
    }
  }
});

// Define the root mutation type
const MutationType = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    // Mutation to add a new user
    addUser: {
      type: UserType,
      args: {
        name: { type: GraphQLString },
        age: { type: GraphQLString },
        favorites: { type: new GraphQLList(GraphQLString) }
      },
      resolve: (parent, args) => {
        // Logic to add a new user to the database
        const newUser = {
          name: args.name,
          age: args.age,
          favorites: args.favorites
        };
        return addUser(newUser);
      }
    },
    // Mutation to update an existing user
    updateUser: {
      type: UserType,
      args: {
        id: { type: GraphQLString },
        name: { type: GraphQLString },
        age: { type: GraphQLString },
        favorites: { type: new GraphQLList(GraphQLString) }
      },
      resolve: (parent, args) => {
        // Logic to update an existing user in the database, using the id provided in the args
        const updatedProperties = {
          name: args.name,
          age: args.age,
          favorites: args.favorites
        };
        return updateUser(args.id, updatedProperties);
      }
    }
  }
});

// Configure the GraphQL schema with the defined types and resolvers
const schema = new GraphQLSchema({
  query: QueryType,
  mutation: MutationType
});

// Sample usage:
// Query to get a specific user by ID
const selectedUserQuery = `{
  user(id: "123") {
    name
    age
    favorites
    friends {
      name
    }
  }
}`;

// Mutation to add a new user
const addNewUserMutation = `mutation {
  addUser(name: "John", age: "30", favorites: ["Pizza", "Tacos"]) {
    id
    name
    age
    favorites
  }
}`;

// Output:
//