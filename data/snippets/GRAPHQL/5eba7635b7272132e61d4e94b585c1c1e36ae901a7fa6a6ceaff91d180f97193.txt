// Define the query schema
type Query {
  posts: [Post]
  users: [User]
}

// Define the post type
type Post {
  id: Int!
  title: String!
  content: String!
  author: User!
}

// Define the user type
type User {
  id: Int!
  name: String!
  email: String!
  posts: [Post]
}

// Define the root resolver
type RootResolver {
  posts: [Post]
  users: [User]
}

// Define the resolver for the posts field
posts: [Post] {
  // this resolver will return a list of all posts
  resolve() {
    return fetch('https://api.posts.com/posts')
      .then(response => response.json())
  }
}

// Define the resolver for the users field
users: [User] {
  // this resolver will return a list of all users
  resolve() {
    return fetch('https://api.users.com/users')
      .then(response => response.json())
  }
}

// Define the resolver for the author field in the post type
author(post: Post) {
  // this resolver will return the author of a specific post
  return fetch(`https://api.users.com/users/${post.authorId}`)
    .then(response => response.json())
}

// Define the Mutation schema
type Mutation {
  addPost(title: String!, content: String!, authorId: Int!): Post
  addUser(name: String!, email: String!): User
}

// Define the root resolver for mutations
type MutationRootResolver {
  addPost(title: String!, content: String!, authorId: Int!): Post
  addUser(name: String!, email: String!): User
}

// Define the resolver for the addPost mutation
addPost(title: String!, content: String!, authorId: Int!) {
  // this resolver will add a new post
  resolve(args) {
    const { title, content, authorId } = args;
    return fetch('https://api.posts.com/posts', {
      method: 'POST',
      body: JSON.stringify({ title, content, authorId }),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
  }
}

// Define the resolver for the addUser mutation
addUser(name: String!, email: String!) {
  // this resolver will add a new user
  resolve(args) {
    const { name, email } = args;
    return fetch('https://api.users.com/users', {
      method: 'POST',
      body: JSON.stringify({ name, email }),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
  }
}

// Example query
query {
  posts {
    id
    title
    content
    author {
      name
      email
    }
  }
}

// Example mutation
mutation {
  addPost(title: "New Post", content: "Hello World!", authorId: 1) {
    id
    title
    content
    author {
      name
      email
    }
  }
  addUser(name: "John Smith", email: "john@example.com") {
    id
    name
    email
  }
}