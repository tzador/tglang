type Person { // Creating a custom type Person
  name: String // Defining a field 'name' with data type 'String'
  age: Int // Defining a field 'age' with data type 'Int'
  hobbies: [String] // Defining a field 'hobbies' with data type 'Array of Strings'
  address: Address // Defining a field 'address' with data type 'Address'
}

type Address { // Creating a custom type Address
  street: String // Defining a field 'street' with data type 'String'
  city: String // Defining a field 'city' with data type 'String'
  state: String // Defining a field 'state' with data type 'String'
  country: String // Defining a field 'country' with data type 'String'
}

type Query { // Defining 'Query' type for fetching data
  getPerson(name: String!): Person // Defining a query 'getPerson' with a required argument 'name' of type 'String' and returning a 'Person' type
  getPeople(age: Int!, country: String): [Person] // Defining a query 'getPeople' with required arguments 'age' of type 'Int' and 'country' of type 'String', and returning an 'Array of Persons'
}

type Mutation { // Defining 'Mutation' type for changing data
  addPerson(name: String!, age: Int!, hobbies: [String]!, street: String!, city: String!, state: String, country: String!): Person // Defining a mutation 'addPerson' with required arguments 'name', 'age', 'hobbies' (all non-null), and address fields (all non-null except 'state') and returning a 'Person' type
  editPerson(name: String!, hobbies: [String], street: String, city: String, state: String, country: String): Person // Defining a mutation 'editPerson' with a required argument 'name', and optional arguments 'hobbies' (can be null), and address fields (all optional) and returning a 'Person' type
  deletePerson(name: String!): Boolean // Defining a mutation 'deletePerson' with a required argument 'name' and returning a 'Boolean' value to indicate success/failure
}