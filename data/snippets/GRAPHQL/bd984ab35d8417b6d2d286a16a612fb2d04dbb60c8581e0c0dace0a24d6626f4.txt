type Query {                           // Defines the root query object
  getAllUsers: [User]                  // Returns an array of User objects
  getUserById(id: ID!): User           // Required argument of ID type, returns a single User object
}

type User {                            // Defines an object type for User
  id: ID                               // Unique identifier for a User
  name: String                         // Name of the User
  email: String                        // Email address of the User
  age: Int                             // Age of the User
  posts: [Post]                        // Relationship to a list of Post objects
}

type Post {                            // Defines an object type for Post
  id: ID                               // Unique identifier for a Post
  title: String                        // Title of the Post
  body: String                         // Body content of the Post
  author: User                         // Relationship to a single User object
  comments: [Comment]                  // Relationship to a list of Comment objects
}

type Comment {                         // Defines an object type for Comment
  id: ID                               // Unique identifier for a Comment
  body: String                         // Body content of the Comment
  author: User                         // Relationship to a single User object
  post: Post                           // Relationship to a single Post object
}

schema {                               // Defines the schema for our API
  query: Query                         // Specifies that the root query object is the entry point for all queries
  mutation: Mutation                   // Specifies that the root mutation object is the entry point for all mutations
}

type Mutation {                        // Defines the root mutation object
  createUser(name: String,             // Required argument of String type for the new User's name
    email: String,                     // Required argument of String type for the new User's email
    age: Int): User                    // Optional argument of Int type for the new User's age, returns a User object
  updateUser(id: ID!,                  // Required argument of ID type for the User to be updated
    name: String,                      // Optional argument of String type for the updated name
    email: String,                     // Optional argument of String type for the updated email
    age: Int): User                    // Optional argument of Int type for the updated age, returns a User object
  deleteUser(id: ID!): User            // Required argument of ID type for the User to be deleted
}