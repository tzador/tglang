// Define the schema
const typeDefs = `
  type User {
    id: ID!
    name: String!
    username: String!
    email: String!
    age: Int
    address: Address
    posts: [Post]
  }
  
  type Address {
    street: String!
    city: String!
    state: String!
    zipCode: Int!
  }
  
  type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
  }
  
  type Query {
    getUsers: [User!]!
    getUser(id: ID!): User!
    getPosts: [Post!]!
    getPost(id: ID!): Post!
  }
  
  type Mutation {
    createUser(name: String!, username: String!, email: String!, age: Int, address: AddressInput): User!
    updateUser(id: ID!, name: String, username: String, email: String, age: Int, address: AddressInput): User!
    deleteUser(id: ID!): User!
    createPost(title: String!, body: String!, published: Boolean!, authorId: ID!): Post!
    updatePost(id: ID!, title: String, body: String, published: Boolean): Post!
    deletePost(id: ID!): Post!
  }
  
  input AddressInput {
    street: String!
    city: String!
    state: String!
    zipCode: Int!
  }
`;

// Define resolvers for the queries and mutations
const resolvers = {
  Query: {
    getUsers(parent, args, ctx, info) {
      // Logic for getting all users from the database
    },
    getUser(parent, args, ctx, info) {
      // Logic for getting a single user from the database
    },
    getPosts(parent, args, ctx, info) {
      //Logic for getting all posts from the database
    },
    getPost(parent, args, ctx, info) {
      // Logic for getting a single post from the database
    }
  },
  Mutation: {
    createUser(parent, args, ctx, info) {
      // Logic for creating a new user and adding it to the database
    },
    updateUser(parent, args, ctx, info) {
      // Logic for updating an existing user in the database
    },
    deleteUser(parent, args, ctx, info) {
      // Logic for deleting a user from the database
    },
    createPost(parent, args, ctx, info) {
      // Logic for creating a new post and adding it to the database
    },
    updatePost(parent, args, ctx, info) {
      // Logic for updating an existing post in the database
    },
    deletePost(parent, args, ctx, info) {
      // Logic for deleting a post from the database
    }
  },
  User: {
    posts(parent, args, ctx, info) {
      // Logic for getting all posts written by a specific user
    }
  },
  Post: {
    author(parent, args, ctx, info) {
      // Logic for getting the author of a specific post
    }
  }
}

// Create an Apollo Server with the defined schema and resolvers
const server = new ApolloServer({
  typeDefs,
  resolvers
});

// Start the server
server.listen().then(({ url }) => {
  console.log(`Server running on ${url}`);
});