type Query { // defines a query operation
  user(id: ID!): User // specifies the query name and expected return type

  // defines a nested query for the user's friends
  friends(user: User!): [User!]!
}

type User { // defines a custom type for a user object
  id: ID! // specifies the field name and data type
  name: String!
  age: Int
  friends: [User!] // specifies a list of user objects as the return type
}

// defines the resolver functions for the query and User types
resolvers: {
  Query: {
    user: (parent, { id }, context) => { // resolver function for the user query
      // logic for fetching and returning user data from database
      return context.db.getUserById(id) 
    },
    friends: (parent, { user }, context) => { // resolver function for the friends query
      // logic for fetching and returning a user's friends from database
      const user = context.db.getUserById(user.id)
      return context.db.getFriendsById(user.friendIds)
    }
  },
  User: {
    friends: (parent, args, context) => { // resolver function for the friends field in User type
      // logic for fetching and returning a user's friends from database
      return context.db.getFriendsById(parent.friendIds)
    }
  }
}