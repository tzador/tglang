type Query {                // GraphQL query type
  students(id: ID): [Student]!   // takes in an ID and returns a list of students
}

type Student {             // GraphQL student type
  id: ID!                   // unique ID for each student
  name: String!             // name of the student
  age: Int                  // age of the student, optional
  grades: [Int!]!           // list of grades for the student, non-null and non-empty
  major: Major              // major for the student, resolves to a Major object
}

enum Major {               // GraphQL enum type 
  COMPUTER_SCIENCE         // possible values for a student's major
  BIOLOGY
  PSYCHOLOGY
  HISTORY
}

type Mutation {            // GraphQL mutation type 
  addStudent(input: StudentInput!): Student!   // takes in input of type StudentInput and returns a new student
}

input StudentInput {       // GraphQL input type 
  name: String!             // name of the student
  age: Int                  // age of the student, optional
  grades: [Int!]!           // list of grades for the student, non-null and non-empty
  major: Major              // major for the student, resolves to a Major object
}