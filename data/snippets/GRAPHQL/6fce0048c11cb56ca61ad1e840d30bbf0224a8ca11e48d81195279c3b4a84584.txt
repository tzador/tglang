# This is a simple schema for a blog post
type Query {
  post(id: ID!): Post
  posts: [Post]
}

type Post {
  id: ID!
  title: String
  content: String
  author: String
  views: Int
  comments: [Comment]
}

type Comment {
  id: ID!
  content: String
  author: String
  post: Post
}

# This is a resolver function that retrieves a single post by ID
post: async (root, {id}, {db}) => {
  return await db.getPost(id);
}

# This is a resolver function that retrieves all posts
posts: async (root, args, {db}) => {
  return await db.getAllPosts();
}

# This is a resolver function that retrieves a post's comments
comments: async (post, args, {db}) => {
  return await db.getCommentsByPost(post.id);
}

# This is a resolver function that creates a new post
createPost: async (root, {title, content, author}, {db}) => {
  const newPost = {title, content, author, views: 0};
  await db.addPost(newPost);
  return newPost;
}

# This is a resolver function that adds a new comment to a post
createComment: async (root, {content, author, post}, {db}) => {
  const newComment = {content, author, post};
  await db.addComment(newComment);
  return newComment;
}

# This is a resolver function that updates a post's title
updatePostTitle: async (root, {id, title}, {db}) => {
  await db.updatePostTitle(id, title);
  return await db.getPost(id);
}