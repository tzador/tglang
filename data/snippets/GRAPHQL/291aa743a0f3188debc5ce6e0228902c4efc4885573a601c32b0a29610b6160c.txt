type Query {
    books: [Book!]! //Defines the `books` query that returns an array of non-nullable `Book` objects
    authors: [Author!]! //Defines the `authors` query that returns an array of non-nullable `Author` objects
}

type Book {
    id: ID! //Unique identifier for a book
    title: String! //Title of the book
    author: Author! //Author of the book
    isbn: String //ISBN number of the book
}

type Author {
    id: ID! //Unique identifier for an author
    name: String! //Name of the author
    books: [Book!]! //Array of books written by the author
}

type Mutation { //Defines the `Mutation` type for handling write operations
    addBook(title: String!, authorId: ID, isbn: String): Book //Mutation to add a new `Book` object with a title, optional author, and optional ISBN
    updateBook(id: ID!, title: String, authorId: ID, isbn: String): Book //Mutation to update an existing `Book` object with the given ID, and optional fields of title, author, and ISBN
    deleteBook(id: ID!): Int //Mutation to delete a `Book` object with the given ID, and returns an integer representing the number of deleted objects
    addAuthor(name: String!): Author //Mutation to add a new `Author` object with a name
    updateAuthor(id: ID!, name: String): Author //Mutation to update an existing `Author` object with the given ID, and optional name
    deleteAuthor(id: ID!): Int //Mutation to delete an `Author` object with the given ID, and returns an integer representing the number of deleted objects
}

//Example query to get all books with their titles, authors, and ISBNs
query GetBooks {
    books {
        title
        author {
            name
        }
        isbn
    }
}

//Example mutation to add a new book with a title and author
mutation AddNewBook {
    addBook(title: "Harry Potter and the Philosopher's Stone", authorId: "1") {
        title
        author {
            name
        }
    }
}