type User {                                              // Creates a User type
  id: ID!                                                 // Specifies id field as non-nullable
  username: String!                                       // Specifies username field as non-nullable string
  age: Int                                                // Specifies age field as nullable integer
  email: String                                           // Specifies email field as nullable string
  address: Address                                        // Specifies address field as type Address
  friends(limit: Int = 10): [User!]!                       // Specifies friends field as non-nullable list of User types with an optional limit argument that defaults to 10
}

type Address {                                           // Creates an Address type
  street: String!                                         // Specifies street field as non-nullable string
  city: String!                                           // Specifies city field as non-nullable string
  state: String                                           // Specifies state field as nullable string
  country: String!                                        // Specifies country field as non-nullable string
}

type Query {                                             // Creates a Query type
  user(id: ID!): User                                     // Specifies user query with a non-nullable ID argument that returns a User type
  users(limit: Int = 50): [User!]!                         // Specifies users query with an optional limit argument that defaults to 50 and returns a list of User types
}

type Mutation {                                          // Creates a Mutation type
  addUser(username: String!, age: Int, email: String!, address: Address): User!     // Specifies addUser mutation with non-nullable username and email arguments and returns a User type
  updateUser(id: ID!, username: String, age: Int, email: String, address: Address): User!   // Specifies updateUser mutation with a non-nullable ID argument and optional username, age, email, and address arguments, returning a User type
  deleteUser(id: ID!): Boolean!                                      // Specifies deleteUser mutation with a non-nullable ID argument and returns a boolean
}