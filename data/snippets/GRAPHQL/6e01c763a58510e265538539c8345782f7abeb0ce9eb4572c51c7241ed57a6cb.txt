type Book {                       // Creates a Book type
  id: ID!                         // Specifies an ID with non-null value
  title: String!                  // Specifies a title with non-null value
  author: Author!                 // Specifies an author of type Author with non-null value
  pages: Int                      // Specifies the number of pages as an Int
}

type Author {                     // Creates an Author type
  id: ID!                         // Specifies an ID with non-null value
  name: String!                   // Specifies a name with non-null value
  age: Int                        // Specifies the age as an Int
  books: [Book!]!                 // Specifies a list of books by this author, with non-null and non-empty values
}

type Query {                      // Creates a Query type
  allBooks: [Book!]!              // Returns a list of all books, with non-null and non-empty values
  book(id: ID!): Book             // Returns a specific book by ID
  allAuthors: [Author!]!          // Returns a list of all authors, with non-null and non-empty values
  author(id: ID!): Author         // Returns a specific author by ID
}

type Mutation {                   // Creates a Mutation type for making changes to data
  addBook(title: String!, authorID: ID!, pages: Int): Book  // Adds a new book with specified title, author ID, and number of pages
  updateBook(id: ID!, title: String, authorID: ID, pages: Int): Book  // Updates an existing book with specified parameters
  addAuthor(name: String!, age: Int): Author  // Adds a new author with specified name and age
  updateAuthor(id: ID!, name: String, age: Int): Author  // Updates an existing author with specified parameters
}

schema {                          // Defines the schema for the GraphQL API
  query: Query                    // Specifies which type is used for queries
  mutation: Mutation              // Specifies which type is used for mutations
}