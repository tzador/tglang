const { ApolloServer, gql } = require('apollo-server');
const typeDefs = gql`
# Comments can be included using the '#' symbol
type User {
  id: ID
  name: String
  age: Int
  posts: [Post]
}

type Post {
  id: ID
  title: String
  content: String
  author: User
}

type Query {
  user(id: ID): User
  post(id: ID): Post
}

type Mutation {
  createUser(name: String!, age: Int!): User!
  createPost(title: String!, content: String!, authorId: ID!): Post!
}

type Subscription {
  newPost: Post
}

const resolvers = {
  Query: {
    user: (parent, { id }, { db }) => {
      return db.users.get(id);
    },
    post: (parent, { id }, { db }) => {
      return db.posts.get(id);
    }
  },
  Mutation: {
    createUser: (parent, { name, age }, { db }) => {
      return db.users.insert({ name, age });
    },
    createPost: (parent, { title, content, authorId }, { db }) => {
      return db.posts.insert({ title, content, authorId });
    }
  },
  Subscription: {
    newPost: {
      subscribe: () => pubsub.asyncIterator(['NEW_POST'])
    }
  },
  User: {
    posts: (user, args, { db }) => {
      return db.posts.filter(post => post.authorId === user.id);
    }
  },
  Post: {
    author: (post, args, { db }) => {
      return db.users.get(post.authorId);
    }
  }
};

const server = new ApolloServer({
  typeDefs,
  resolvers
});

server.listen().then(({ url }) => {
  console.log(`ğŸš€ Server ready at ${url}`);
});