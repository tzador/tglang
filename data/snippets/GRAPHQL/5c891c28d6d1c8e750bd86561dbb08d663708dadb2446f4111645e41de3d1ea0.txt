type User implements Node {
    id: ID!
    name: String!
    email: String!
    password: String!
    age: Int!
    friends: [User!]!
    posts: [Post!]!
}

type Post implements Node {
    id: ID!
    title: String!
    content: String!
    author: User!
    comments: [Comment!]!
}

type Comment implements Node {
    id: ID!
    content: String!
    author: User!
    post: Post!
}

interface Node {
    id: ID!
}

type Query {
    user(id: ID!): User
    post(id: ID!): Post
}

type Mutation {
    createUser(name: String!, email: String!, password: String!, age: Int!): User
    createPost(title: String!, content: String!, authorId: ID!): Post
    createComment(content: String!, authorId: ID!, postId: ID!): Comment
    updateUser(id: ID!, name: String, email: String, password: String, age: Int): User
    updatePost(id: ID!, title: String, content: String): Post
    updateComment(id: ID!, content: String): Comment
    deleteUser(id: ID!): User
    deletePost(id: ID!): Post
    deleteComment(id: ID!): Comment
}