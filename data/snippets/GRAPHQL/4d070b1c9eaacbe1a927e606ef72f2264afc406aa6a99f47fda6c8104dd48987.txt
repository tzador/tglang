type User { //this defines a GraphQL type called User
  id: ID! //the exclamation mark signifies that this field is required
  name: String!
  age: Int
  friends: [User] //this defines a list of Users as the friends field
  posts: [Post!]! //this defines a non-nullable list of non-nullable Posts as the posts field
}

type Post {
  id: ID!
  title: String
  body: String
  author: User //this defines an object of the User type as the author field
  comments: [Comment] //this defines a list of Comments as the comments field
  likes: Int
}

type Comment {
  id: ID!
  text: String!
  author: User
  post: Post
}

type Query {
  user(id: ID!): User //this defines a query for a specific User based on their ID
  post(id: ID!): Post //this defines a query for a specific Post based on its ID
  comment(id: ID!): Comment //this defines a query for a specific Comment based on its ID
}

type Mutation {
  createUser(name: String!, age: Int): User //this defines a mutation to create a new User with a name and age
  createPost(title: String, body: String, authorId: ID!): Post //this defines a mutation to create a new Post with a title, body, and author's ID
  createComment(text: String, authorId: ID!, postId: ID!): Comment //this defines a mutation to create a new Comment with text, author's ID, and post's ID
}

"Schema" { //this defines the overall GraphQL schema
  query: Query //this specifies the queries that can be made by the client
  mutation: Mutation //this specifies the mutations that can be made by the client
}