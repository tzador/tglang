# Defining a custom GraphQL type
type User {
  id: ID!
  name: String!
  email: String!
  age: Int!
  posts: [Post!]!
  friends: [User!]!
}

# Defining a custom GraphQL type with arguments
type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  comments(limit: Int = 10): [Comment!]!
}

# Defining a custom GraphQL type with interfaces
interface User {
  id: ID!
  name: String!
  email: String!
  age: Int!
  posts: [Post!]!
  friends: [User!]!
}

# Defining a custom GraphQL scalar type
scalar Date

# Defining a custom GraphQL input type
input PostInput {
  title: String!
  content: String!
  authorId: ID!
}

# Defining a custom GraphQL enum type
enum UserRole {
  ADMIN
  USER
}

# Defining a custom GraphQL union type
union Result = Post | User | Comment

# Defining a custom GraphQL query with arguments
type Query {
  user(id: ID!): User
  post(id: ID!): Post
  users(limit: Int = 10): [User!]!
  posts(limit: Int = 10): [Post!]!
}

# Defining a custom GraphQL mutation
type Mutation {
  createUser(name: String!, email: String!, age: Int!): User!
  createPost(input: PostInput!): Post!
  updatePost(id: ID!, title: String, content: String): Post!
  deleteUser(id: ID!): User!
  deletePost(id: ID!): Post!
}

# Defining a custom GraphQL subscription
type Subscription {
  newPosts: Post!
  postUpdated(id: ID!): Post!
  userDeleted(id: ID!): User!
}