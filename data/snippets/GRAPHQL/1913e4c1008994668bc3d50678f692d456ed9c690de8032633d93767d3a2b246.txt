const { buildSchema } = require('graphql');
// Import necessary modules and methods

const schema = buildSchema(`
  type Book {
    title: String!
    author: String!
    year: Int!
    genre: String!
  }
  // Define a Book type with required fields

  type Query {
    getBook(title: String!, author: String!): Book
    getBooksByGenre(genre: String!): [Book]
  }
  // Define a Query type with two functions, getBook and getBooksByGenre

  type Mutation {
    addBook(title: String!, author: String!, year: Int!, genre: String!): Book!
  }
  // Define a Mutation type with a function to add a new Book

  schema {
    query: Query
    mutation: Mutation
  }
  // Define the schema with the query and mutation types
`);

// Resolver functions to handle the logic for each API endpoint
const root = {
  getBook: ({ title, author }) => {
    const book = fakeDatabase.find(book => book.title === title && book.author === author);
    return book;
    // Find and return the matching book from the fake database
  },
  getBooksByGenre: ({ genre }) => {
    const books = fakeDatabase.filter(book => book.genre === genre);
    return books;
    // Filter and return an array of books with the given genre
  },
  addBook: ({ title, author, year, genre }) => {
    const book = {
      title,
      author,
      year,
      genre
    };
    fakeDatabase.push(book);
    return book;
    // Create a new book object and insert it into the fake database
    // Return the newly added book
  }
};

// Example GraphQL query to retrieve a book
const query = `
  query {
    getBook(title: "Harry Potter and the Sorcerer's Stone", author: "J.K. Rowling") {
      title
      author
      year
      genre
    }
  }
`;

// Execute the query and log the result
graphql(schema, query, root)
  .then(result => console.log(result))
  .catch(err => console.log(err));

// Example GraphQL mutation to add a new book
const mutation = `
  mutation {
    addBook(title: "Pride and Prejudice", author: "Jane Austen", year: 1813, genre: "Romance") {
      title
      author
      year
      genre
    }
  }
`;

// Execute the mutation and log the result
graphql(schema, mutation, root)
  .then(result => console.log(result))
  .catch(err => console.log(err));