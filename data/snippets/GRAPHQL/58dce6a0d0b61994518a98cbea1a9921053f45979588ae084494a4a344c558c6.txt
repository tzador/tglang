const { GraphQLID, GraphQLString, GraphQLInt } = require('graphql');
const { GraphQLObjectType, GraphQLSchema, GraphQLList, GraphQLNonNull } = require('graphql');

// Define BookType
const BookType = new GraphQLObjectType({
  name: 'Book',
  fields: () => ({
    id: { type: GraphQLID },
    title: { type: GraphQLString },
    genre: { type: GraphQLString },
    author: {
      type: AuthorType,
      resolve(parent, args) {
        // code to get and return author for book
      }
    }
  })
});

// Define AuthorType
const AuthorType = new GraphQLObjectType({
  name: 'Author',
  fields: () => ({
    id: { type: GraphQLID },
    name: { type: GraphQLString },
    age: { type: GraphQLInt },
    books: {
      type: new GraphQLList(BookType),
      resolve(parent, args) {
        // code to get and return books by author
      }
    }
  })
});

// Root Query
const RootQuery = new GraphQLObjectType({
  name: 'RootQueryType',
  fields: {
    // Query for getting a single book by id
    book: {
      type: BookType,
      args: { id: { type: GraphQLID } },
      resolve(parent, args) {
        // code to get and return book by id
      }
    },
    // Query for getting a single author by id
    author: {
      type: AuthorType,
      args: { id: { type: GraphQLID } },
      resolve(parent, args) {
        // code to get and return author by id
      }
    },
    // Query for getting all books
    books: {
      type: new GraphQLList(BookType),
      resolve(parent, args) {
        // code to get and return all books
      }
    },
    // Query for getting all authors
    authors: {
      type: new GraphQLList(AuthorType),
      resolve(parent, args) {
        // code to get and return all authors
      }
    }
  }
});

// Mutation for adding a new book
const Mutation = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    addBook: {
      type: BookType,
      args: {
        title: { type: new GraphQLNonNull(GraphQLString) },
        genre: { type: new GraphQLNonNull(GraphQLString) },
        authorId: { type: new GraphQLNonNull(GraphQLID) }
      },
      resolve(parent, args) {
        // code to add new book and return it
      }
    }
  }
});

// Define GraphQL schema
module.exports = new GraphQLSchema({
  query: RootQuery,
  mutation: Mutation
});