type Query {
    books(
        #Optional parameters for filtering and sorting books
        filter: BookFilter,
        orderBy: [BookOrder!]
        #Pagination arguments
        page: Int
        perPage: Int
    ): [Book!]!

    authors(
        #Optional parameters for filtering and sorting authors
        filter: AuthorFilter,
        orderBy: [AuthorOrder!],
        #Pagination arguments
        page: Int
        perPage: Int
    ): [Author!]!
}

input BookFilter {
    #Filters books by title, can use wildcards
    title: String
    #Filters books by genre
    genre: Genre
}

input BookOrder {
    #Orders books by title, in ascending or descending order
    title: SortOrder
    #Orders books by publication date, in ascending or descending order
    publicationDate: SortOrder
} 

input AuthorFilter {
    #Filters authors by name, can use wildcards
    name: String
    #Filters authors by nationality
    nationality: String
}

input AuthorOrder {
    #Orders authors by name, in ascending or descending order
    name: SortOrder
    #Orders authors by date of birth, in ascending or descending order
    dateOfBirth: SortOrder
}

enum Genre {
    FICTION
    NON_FICTION
    POETRY
    DRAMA
}

enum SortOrder {
    ASC
    DESC
}

type Book {
    id: ID!
    title: String!
    genre: Genre!
    publicationDate: String!
    author: Author!
}

type Author {
    id: ID!
    name: String!
    nationality: String!
    dateOfBirth: String!
    books: [Book!]!
}