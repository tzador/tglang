const { ApolloServer, gql } = require("apollo-server");

// Define the GraphQL schema 
const typeDefs = gql`
  type Book {
    title: String
    author: String
    genres: [String]
  }

  type Query {
    books: [Book]
    book(title: String!): Book
  }

  type Mutation {
    addBook(title: String!, author: String!, genres: [String]!): Book
  }
`;

// Mock data for books 
const books = [
  {
    title: "Harry Potter and the Philosopher's Stone",
    author: "J.K. Rowling",
    genres: ["Fantasy", "Young Adult"]
  },
  {
    title: "To Kill a Mockingbird",
    author: "Harper Lee",
    genres: ["Classics", "Historical Fiction"]
  },
  {
    title: "Pride and Prejudice",
    author: "Jane Austen",
    genres: ["Romance", "Classics"]
  }
];

// Resolvers for GraphQL queries and mutations
const resolvers = {
  Query: {
    books: () => books,
    book: (parent, args) => books.find(book => book.title === args.title)
  },
  Mutation: {
    addBook: (parent, args) => {
      // Create a new book object using arguments from mutation
      const newBook = {
        title: args.title,
        author: args.author,
        genres: args.genres
      };
      // Add new book to books array
      books.push(newBook);
      // Return newly added book
      return newBook;
    }
  }
};

// Create Apollo server instance with defined schema and resolvers
const server = new ApolloServer({ typeDefs, resolvers });

// Start the server and listen on specified port
server.listen(4000).then(({ url }) => {
  console.log(`ğŸš€ Server ready at ${url}`);
});