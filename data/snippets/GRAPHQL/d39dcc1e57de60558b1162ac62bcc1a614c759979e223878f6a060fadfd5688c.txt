type Query {
   getUser(id: ID!): User 
   # This query accepts a required ID parameter and returns a User object
}

type User {
   id: ID! 
   # Unique identifier for a user
   name: String 
   # The name of the user
   email: String 
   # The email address of the user
   posts: [Post] 
   # A list of posts created by the user
}

type Post {
   id: ID! 
   # Unique identifier for a post
   title: String 
   # The title of the post
   content: String 
   # The content of the post
   author: User 
   # The user who created the post
}

type Mutation {
   createUser(name: String!, email: String!): User 
   # Creates a new user with the given name and email
   createPost(title: String!, content: String!, authorId: ID!): Post 
   # Creates a new post with the given title and content, linked to the specified user ID
   updateUser(id: ID!, name: String, email: String): User 
   # Updates the name and/or email of the specified user
   deletePost(id: ID!): Boolean 
   # Deletes the post with the given ID and returns a boolean indicating success or failure
}