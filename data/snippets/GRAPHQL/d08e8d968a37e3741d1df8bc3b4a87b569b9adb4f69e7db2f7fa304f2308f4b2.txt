type Query { // Defining a GraphQL query type 
    book(title: String!, author: String!): Book // Declaring a book query with the fields title and author 
    
    booksByAuthor(author: String!): [Book] // Declaring a booksByAuthor query that returns a list of books 
    
    author(name: String!): Author // Declaring an author query with the field name 
    
}

type Book { // Defining a GraphQL book type 
    id: ID! // Declaring the unique ID field for a book 
    title: String! // Declaring the title field for a book 
    author: String! // Declaring the author field for a book 
    genre: String // Declaring the optional genre field for a book 
    releaseYear: Int // Declaring the optional releaseYear field for a book 
}

type Author { // Defining a GraphQL author type 
    id: ID! // Declaring the unique ID field for an author 
    name: String! // Declaring the name field for an author 
    age: Int // Declaring the optional age field for an author 
    books: [Book] // Declaring the books field, which returns a list of books by this author 
}

type Mutation { // Defining a GraphQL mutation type 
    addBook(title: String!, author: String!, genre: String, releaseYear: Int): Book // Declaring an addBook mutation with the fields title, author, genre, and releaseYear 
    editBook(id: ID!, title: String, author: String, genre: String, releaseYear: Int): Book // Declaring an editBook mutation with the fields id, title, author, genre, and releaseYear 
    deleteBook(id: ID!): Book // Declaring a deleteBook mutation with the field id 
}