const fetch = require('node-fetch'); //Import node-fetch library for making HTTP requests

const { GraphQLServer } = require('graphql-yoga'); //Import GraphQL server library

//Create a dummy data set of books
let books = [
  {title: 'Harry Potter and the Philosopher\'s Stone', author: 'J.K. Rowling', genre: 'Fantasy', id: 1},
  {title: 'To Kill a Mockingbird', author: 'Harper Lee', genre: 'Drama', id: 2},
  {title: 'Pride and Prejudice', author: 'Jane Austen', genre: 'Romance', id: 3},
  {title: '1984', author: 'George Orwell', genre: 'Science Fiction', id: 4}
];

//Create a type for a Book
const Book = `
  type Book {
    title: String!
    author: String!
    genre: String!
    id: ID!
  }`

//Create a type for a Query
const Query = `
  type Query {
    books: [Book!]!
    book(id: ID!): Book
  }`

//Create a resolver for the Query type
const resolvers = {
  Query: {
    //Return list of all books
    books: () => books,
    //Return a single book based on ID
    book: (parent, args) => books.find(book => book.id === args.id)
  }
};

//Create a GraphQL server with the appropriate schema and resolvers
const server = new GraphQLServer({
  typeDefs: [Book, Query],
  resolvers
});

//Start the server on port 4000
server.start({ port: 4000 }).then(() => console.log('Server running on port 4000'));