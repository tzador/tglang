// Define GraphQL schema
type User {
  id: ID!
  name: String!
  email: String
  age: Int
}

// Define root query
type Query {
  user(id: ID!): User
  users: [User!]!
}

// Define root mutation
type Mutation {
  addUser(name: String!, email: String, age: Int): User!
  updateUser(id: ID!, name: String, email: String, age: Int): User!
  deleteUser(id: ID!): User
}

// Define GraphQL resolvers
const resolvers = {
  Query: {
    user: (parent, args, context, info) => {
      // Logic for fetching specific user from database
      return getUserById(args.id)
    },
    users: (parent, args, context, info) => {
      // Logic for fetching all users from database
      return getUsers()
    }
  },
  Mutation: {
    addUser: (parent, args, context, info) => {
      // Logic for creating and adding new user to database
      return addUser(args.name, args.email, args.age)
    },
    updateUser: (parent, args, context, info) => {
      // Logic for updating user in database
      return updateUser(args.id, args.name, args.email, args.age)
    },
    deleteUser: (parent, args, context, info) => {
      // Logic for deleting user from database
      return deleteUser(args.id)
    }
  }
}

// Initialize GraphQL server
const server = new ApolloServer({
  typeDefs: schema,
  resolvers
})

// Start server and listen for incoming requests
server.listen().then(({ url }) => {
  console.log(`ğŸš€ Server ready at ${url}`)
})