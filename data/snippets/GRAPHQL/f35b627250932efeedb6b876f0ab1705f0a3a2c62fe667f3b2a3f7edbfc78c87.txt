// Defining a GraphQL schema with a type, query and mutation
type Book {
  id: ID!
  title: String!
  author: String!
  genre: String
  year: Int
}

type Query {
  getBooks: [Book]
  getBook(id: ID!): Book
}

type Mutation {
  addBook(title: String!, author: String!, genre: String, year: Int): Book
  updateBook(id: ID!, title: String, author: String, genre: String, year: Int): Book
  deleteBook(id: ID!): Book
}

// Resolvers to handle CRUD operations for the schema
const resolvers = {
  Query: {
    // Function to retrieve all books from the database
    getBooks: async () => {
      try {
        const books = await Book.find();
        return books;
      } catch (err) {
        console.log(err);
      }
    },
    // Function to retrieve a specific book from the database by its id
    getBook: async (parent, args, context, info) => {
      const { id } = args;
      try {
        const book = await Book.findById(id);
        return book;
      } catch (err) {
        console.log(err);
      }
    }
  },
  Mutation: {
    // Function to add a new book to the database
    addBook: async (parent, args, context, info) => {
      const { title, author, genre, year } = args;
      try {
        const newBook = await Book.create({
          title,
          author,
          genre,
          year
        });
        return newBook;
      } catch (err) {
        console.log(err);
      }
    },
    // Function to update an existing book in the database
    updateBook: async (parent, args, context, info) => {
      const { id, title, author, genre, year } = args;
      try {
        const updatedBook = await Book.findByIdAndUpdate(id, {
          title,
          author,
          genre,
          year
        }, { new: true });
        return updatedBook;
      } catch (err) {
        console.log(err);
      }
    },
    // Function to delete a book from the database
    deleteBook: async (parent, args, context, info) => {
      const { id } = args;
      try {
        const deletedBook = await Book.findByIdAndDelete(id);
        return deletedBook;
      } catch (err) {
        console.log(err);
      }
    }
  }
}