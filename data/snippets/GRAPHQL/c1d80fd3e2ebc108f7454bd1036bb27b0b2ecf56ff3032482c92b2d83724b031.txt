const graphql = require('graphql');
const axios = require('axios');
const {
    GraphQLObjectType,
    GraphQLInt,
    GraphQLString,
    GraphQLBoolean,
    GraphQLList,
    GraphQLSchema,
    GraphQLNonNull
} = graphql;

// Define a custom data type called "User"
const UserType = new GraphQLObjectType({
    name: 'User',
    fields: () => ({
        id: { type: GraphQLString },
        username: { type: GraphQLString },
        email: { type: GraphQLString },
        isActive: { type: GraphQLBoolean },
        posts: {
            type: new GraphQLList(PostType), // Define a relationship between User and Post
            resolve(parentValue, args) {
                // Fetch the posts of the user from an external API
                return axios.get(`https://example.com/posts?userId=${parentValue.id}`)
                    .then(res => res.data);
            }
        }
    })
});

// Define another custom data type called "Post"
const PostType = new GraphQLObjectType({
    name: 'Post',
    fields: () => ({
        id: { type: GraphQLString },
        title: { type: GraphQLString },
        body: { type: GraphQLString },
        likes: { type: GraphQLInt },
        author: {
            type: UserType, // Define a relationship between Post and User
            resolve(parentValue, args) {
                // Fetch the author of the post from an external API
                return axios.get(`https://example.com/users/${parentValue.userId}`)
                    .then(res => res.data);
            }
        }
    })
});

// Define the root query type
const RootQuery = new GraphQLObjectType({
    name: 'RootQueryType',
    fields: {
        // Query to get a single user by id
        user: {
            type: UserType,
            args: { id: { type: GraphQLString } },
            resolve(parentValue, args) {
                // Fetch a single user from an external API based on the provided id
                return axios.get(`https://example.com/users/${args.id}`)
                    .then(res => res.data);
            }
        },
        // Query to get all posts from a specific user
        posts: {
            type: new GraphQLList(PostType),
            args: { userId: { type: GraphQLString } },
            resolve(parentValue, args) {
                // Fetch all posts from an external API based on the provided userId
                return axios.get(`https://example.com/posts?userId=${args.userId}`)
                    .then(res => res.data);
            }
        }
    }
});

// Define the root mutation type
const RootMutation = new GraphQLObjectType({
    name: 'RootMutationType',
    fields: {
        // Mutation to add a new user
        addUser: {
            type: UserType,
            args: {
                username: { type: new GraphQLNonNull(GraphQLString) },
                email: { type: new GraphQLNonNull(GraphQLString) },
                isActive: { type: GraphQLBoolean }
            },
            resolve(parentValue, args) {
                // Add a new user to the external API with the provided data
                return axios.post(`https://example.com/users`, {
                    username: args.username,
                    email: args.email,
                    isActive: args.isActive
                }).then(res => res.data);
            }
        },
        // Mutation to update the likes of a post
        updatePostLikes: {
            type: PostType,
            args: {
                id: { type: new GraphQLNonNull(GraphQLString) },
                likes: { type: new GraphQLNonNull(GraphQLInt) }
            },
            resolve(parentValue, args) {
                // Update the likes of the post in the external API with the provided data
                return axios.patch(`https://example.com/posts/${args.id}`, {
                    likes: args.likes
                }).then(res => res.data);
            }
        }
    }
});

// Create a new schema
const schema = new GraphQLSchema({
    query: RootQuery,
    mutation: RootMutation
});