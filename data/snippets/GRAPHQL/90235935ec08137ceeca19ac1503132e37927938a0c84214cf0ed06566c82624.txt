object GraphQLStringField {
    
    /// This class represents a String field in GraphQL

    public var fieldName: String
    public var type: String
    public var arguments: [String: Any]?
    public var directives: [Directive]?
    public var isNullable: Bool

    public init(fieldName: String,
                type: String,
                arguments: [String: Any]? = nil,
                directives: [Directive]? = nil,
                isNullable: Bool = true) {
        self.fieldName = fieldName
        self.type = type
        self.arguments = arguments
        self.directives = directives
        self.isNullable = isNullable
    }
    
    // function to add arguments to the field
    public func addArguments(arguments: [String: Any]) {
        self.arguments = arguments
    }
    
    // function to add directives to the field
    public func addDirectives(directives: [Directive]) {
        self.directives = directives
    }
    
    // function to set whether the field is nullable
    public func setNullable(isNullable: Bool) {
        self.isNullable = isNullable
    }
    
    // function to get the GraphQL query representing this field
    public func getFieldQuery() -> String {
        var fieldQuery = fieldName
        
        if let arguments = arguments {
            fieldQuery += "("
            for (key, value) in arguments {
                fieldQuery += "\(key): \(value),"
            }
            fieldQuery.removeLast() // remove extra comma
            fieldQuery += ")"
        }
        
        if let directives = directives {
            for directive in directives {
                fieldQuery += " \(directive.name)"
                
                if let arguments = directive.arguments {
                    fieldQuery += "("
                    for (key, value) in arguments {
                        fieldQuery += "\(key): \(value),"
                    }
                    fieldQuery.removeLast() // remove extra comma
                    fieldQuery += ")"
                }
            }
        }
        
        if !isNullable {
            fieldQuery += "!"
        }
        
        return fieldQuery
    }
}

// example usage
let stringField = GraphQLStringField(fieldName: "firstName", type: "String")
stringField.addArguments(arguments: ["limit": 10])
stringField.addDirectives(directives: [Directive(name: "uppercase")])
stringField.setNullable(isNullable: false)
print(stringField.getFieldQuery())

// output: firstName(limit: 10) @uppercase!