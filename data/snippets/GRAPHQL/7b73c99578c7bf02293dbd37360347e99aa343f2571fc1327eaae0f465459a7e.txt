const { graphql, buildSchema } = require('graphql');

// Define schema with required types and fields
const schema = buildSchema(`
  type User {
    id: ID!
    name: String!
    email: String!
    age: Int!
  }

  type Query {
    getUser(id: ID!): User!
    listUsers: [User!]!
  }

  type Mutation {
    createUser(name: String!, email: String!, age: Int!): User!
    updateUser(id: ID!, name: String, email: String, age: Int): User!
    deleteUser(id: ID!): User!
  }
`);

// Create resolver functions for each query and mutation
const root = {
  getUser: ({id}) => {
    for (let user of users) {
      if (user.id == id) {
        return user;
      }
    }
    throw new Error('User not found!');
  },
  listUsers: () => {
    return users;
  },
  createUser: ({name, email, age}) => {
    const id = users.length + 1;
    const user = {id, name, email, age};
    users.push(user);
    return user;
  },
  updateUser: ({id, name, email, age}) => {
    for (let user of users) {
      if (user.id == id) {
        user.name = name || user.name;
        user.email = email || user.email;
        user.age = age || user.age;
        return user;
      }
    }
    throw new Error('User not found!');
  },
  deleteUser: ({id}) => {
    for (let i = 0; i < users.length; i++) {
      if (users[i].id == id) {
        return users.splice(i, 1)[0];
      }
    }
    throw new Error('User not found!');
  }
};

// Execute query or mutation
graphql(
  schema,
  `
    mutation {
      updateUser(id: 1, name: "John Doe") {
        id
        name
        email
      }
    }
  `,
  root
).then((response) => console.log(response));

/*
The output should be:

{
  data: {
    updateUser: {
      id: 1,
      name: "John Doe",
      email: "john@example.com"
    }
  }
}
*/