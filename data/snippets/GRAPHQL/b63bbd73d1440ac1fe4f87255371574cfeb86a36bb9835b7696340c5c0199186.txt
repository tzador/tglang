// Define a schema with a query to retrieve a list of books
// include annotations for object types, fields, and arguments
type Book {
  id: Int
  title: String
  author: String
}

type Query {
  books(limit: Int!): [Book]!
}

// Define the resolver function to handle the books query
const resolvers = {
  Query: {
    books: (parent, args, context, info) => {
      const limit = args.limit;
      // perform logic to retrieve books up to specified limit
      // return an array of book objects
    }
  }
}

// Define a mutation to add a new book to the database
// include annotations for input types and input fields
input BookInput {
  title: String
  author: String
}

type Mutation {
  addBook(input: BookInput!): Book!
}

// Define the resolver function to handle the addBook mutation
const resolvers = {
  Mutation: {
    addBook: (parent, { input }, context, info) => {
      const { title, author } = input;
      // perform logic to add new book to database
      // return the newly added book object
    }
  }
}

// Define a subscription to notify clients when a new book is added
// include annotations for subscription type, arguments, and payload
type Subscription {
  newBookAdded(author: String): BookSubscriptionPayload
}

type BookSubscriptionPayload {
  book: Book
}

// Define the resolver function to handle the newBookAdded subscription
const resolvers = {
  Subscription: {
    newBookAdded: {
      subscribe: () => pubsub.asyncIterator(['NEW_BOOK_ADDED'])
    }
  }
}