const { graphql, buildSchema } = require('graphql');

// Define schema
const schema = buildSchema(`
  type Query {
    hello: String
    getUser(id: Int): User
    getUsers: [User]
  }

  type Mutation {
    addUser(name: String, age: Int): User
    updateUser(id: Int, name: String, age: Int): User
    deleteUser(id: Int): String
  }

  type User {
    id: Int
    name: String
    age: Int
  }
`)

// Define resolvers
const resolvers = {
  hello: () => "Hello World!",

  getUser: ({ id }) => {
    // Code to retrieve user data from database
    return {
      id: id,
      name: "John Doe",
      age: 25
    }
  },

  getUsers: () => {
    // Code to retrieve all users from database
    return [
      {
        id: 1,
        name: "John Doe",
        age: 25
      },
      {
        id: 2,
        name: "Jane Smith",
        age: 30
      },
    ]
  },

  addUser: ({ name, age }) => {
    // Code to add new user to database
    return {
      name: name,
      age: age
    }
  },

  updateUser: ({ id, name, age }) => {
    // Code to update user in database
    return {
      id: id,
      name: name,
      age: age
    }
  },

  deleteUser: ({ id }) => {
    // Code to delete user from database
    return `User with id ${id} has been deleted.`
  }
}

// Execute query
graphql(schema, `
  query {
    hello
    getUser(id: 1) {
      name
      age
    }
    getUsers {
      name
      age
    }
  }
`, resolvers).then(response => console.log(response));

// Output:
// {
//   data: {
//     hello: 'Hello World!',
//     getUser: {
//       name: 'John Doe',
//       age: 25
//     },
//     getUsers: [
//       {
//         name: 'John Doe',
//         age: 25
//       },
//       {
//         name: 'Jane Smith',
//         age: 30
//       }
//     ]
//   }
// }