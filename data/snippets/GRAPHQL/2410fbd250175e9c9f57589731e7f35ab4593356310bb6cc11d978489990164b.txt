type Query {
  users: [User!]! @requiresAuth
  me: User @requiresAuth
  posts(query: String): [Post!]!
  comments(postId: ID!): [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput): CreateUserResponse!
  login(data: LoginInput): LoginResponse!
  createPost(data: CreatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
}

type Subscription {
  comment(postId: ID!): Comment!
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  post: Post!
  author: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input CreatePostInput {
  title: String!
  body: String!
}

input CreateCommentInput {
  text: String!
  postId: ID!
}

interface Error {
  message: String!
}

type CreateUserResponse {
  user: User
  error: UserError
}

type LoginResponse {
  token: String
  user: User
  error: UserError
}

type UserError implements Error{
  message: String!
  field: String!
}