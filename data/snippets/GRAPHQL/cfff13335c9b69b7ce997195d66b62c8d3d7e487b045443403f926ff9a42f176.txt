const typeDefs = `
  type Query {
    hello: String
    greeting(name: String): String
    numbers: [Int]
    user(id: ID): User
  }

  type Mutation {
    createUser(name: String, email: String, age: Int): User
    updateUser(id: ID, name: String, email: String, age: Int): User
  }

  type User {
    id: ID!
    name: String!
    email: String!
    age: Int!
  }`;

  const resolvers = {
    Query: {
      hello: () => 'Hello World!',
      greeting: (parent, args) => { return `Hello ${args.name}!` },
      numbers: () => [1, 2, 3, 4, 5],
      user: (parent, args) => {
        const { id } = args;
        // mock user data
        const users = [
          { id: '1', name: 'John', email: 'john@test.com', age: 25 },
          { id: '2', name: 'Samantha', email: 'samantha@test.com', age: 30 },
          { id: '3', name: 'Michael', email: 'michael@test.com', age: 35 }
        ];
        // return user with matching id
        return users.find(user => user.id === id);
      },
    },
    Mutation: {
      createUser: (parent, args) => {
        const { name, email, age } = args;
        // mock user id
        const id = Math.floor(Math.random() * 9999) + 1;
        // create new user object
        const newUser = { id, name, email, age };
        // return newly created user object
        return newUser;
      },
      updateUser: (parent, args) => {
        const { id, name, email, age } = args;
        // mock user data
        let userToUpdate;
        const users = [
          { id: '1', name: 'John', email: 'john@test.com', age: 25 },
          { id: '2', name: 'Samantha', email: 'samantha@test.com', age: 30 },
          { id: '3', name: 'Michael', email: 'michael@test.com', age: 35 }
        ];
        // find user with matching id and update values
        users.forEach(user => {
          if (user.id === id) {
            userToUpdate = user;
            userToUpdate.name = name;
            userToUpdate.email = email;
            userToUpdate.age = age;
          }
        });
        // return updated user object
        return userToUpdate;
      }
    }
  };

  // Create executable GraphQL schema
  const schema = makeExecutableSchema({ typeDefs, resolvers });

  // GraphQL query
  const query = `
    query {
      hello
      greeting(name: "John")
      numbers
      user(id: "2") {
        id
        name
        email
        age
      }
    }
  `;

  // GraphQL mutation
  const mutation = `
    mutation {
      createUser(name: "Sarah", email: "sarah@test.com", age: 28) {
        id
        name
        email
        age
      }
    }
  `;

  // Execute query and mutation
  graphql(schema, query).then(result => console.log(result));
  graphql(schema, mutation).then(result => console.log(result));