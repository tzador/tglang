## Schema Definition
type Query {
  posts(filter: String): [Post] # Returns an array of Post objects with optional filtering
}

type Post {
  id: ID!
  title: String!
  body: String
  author: User!
}

type User {
  id: ID!
  name: String!
  posts: [Post!]! # Returns an array of required Post objects for the specified User
}

## Resolvers
// Function to fetch an array of Post objects based on optional filter parameter
function fetchPosts(filter) {
  if (filter) {
    // Logic to filter posts based on provided criteria
    // Returns filtered posts array
  } else {
    // Return all posts
    return posts;
  }
}

// Resolvers for Post type
const postResolvers = {
  Query: {
    posts: (parent, { filter }) => fetchPosts(filter), // Calls fetchPosts function with optional filter parameter
  },
  Post: {
    author: (parent) => {
      // Logic to fetch User object based on post's author ID
      const user = fetchUserById(parent.authorId); // Custom function to fetch User by ID
      return user;
    },
  },
};

// Resolver for User type
const userResolvers = {
  User: {
    posts: (parent) => {
      // Returns an array of required Post objects for specified User
      const posts = fetchPostsByUserId(parent.id); // Custom function to fetch posts by User ID
      return posts;
    },
  },
};

## Executable Schema
// Combines all resolvers and types to create an executable schema
const schema = makeExecutableSchema({
  typeDefs,
  resolvers: [postResolvers, userResolvers],
});

## Sample Query
// Sample query to retrieve posts with specified filter and their author's name
{
  posts(filter: "GraphQL") {
    id
    title
    body
    author {
      name
    }
  }
}