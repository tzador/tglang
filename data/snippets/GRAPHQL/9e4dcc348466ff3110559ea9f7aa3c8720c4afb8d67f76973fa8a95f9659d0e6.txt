// Define a type for a book with different properties
type Book {
  id: ID!
  title: String!
  author: String!
  genre: String!
  year: Int!
  summary: String
}

// Define a type for an author with different properties
type Author {
  id: ID!
  name: String!
  age: Int
  nationality: String!
  books: [Book]
}

// Define a root query type that defines all the available queries
type Query {
  // Get a specific book by its id
  book(id: ID!): Book

  // Get a list of all books
  books: [Book]

  // Get a specific author by their id
  author(id: ID!): Author

  // Get a list of all authors
  authors: [Author]

  // Get a list of books by a specific genre
  booksByGenre(genre: String!): [Book]

  // Get a list of books published after a certain year
  booksPublishedAfter(year: Int!): [Book]
}

// Define a root mutation type that defines all the available mutations
type Mutation {
  // Add a new book to the library
  addBook(title: String!, author: String!, genre: String!, year: Int!, summary: String): Book

  // Update an existing book in the library
  updateBook(id: ID!, title: String!, author: String!, genre: String!, year: Int!, summary: String): Book

  // Delete a book from the library
  deleteBook(id: ID!): Book

  // Add a new author to the database
  addAuthor(name: String!, age: Int, nationality: String!): Author

  // Update an existing author in the database
  updateAuthor(id: ID!, name: String!, age: Int, nationality: String!): Author

  // Delete an author from the database
  deleteAuthor(id: ID!): Author
}