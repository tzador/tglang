type Query {
  # Query to get all users
  getUsers: [User!]!,
  # Query to get a specific user
  getUser(id: ID!): User!,
  # Query to search for users by name or email
  searchUsers(query: String!): [User!]!,
}

type User {
  id: ID!,
  name: String!,
  email: String!,
  age: Int,
  address: Address,
  posts: [Post!]!,
}

type Address {
  street: String!,
  city: String!,
  state: String!,
  country: String!,
}

type Post {
  id: ID!,
  title: String!,
  body: String!,
  author: User!,
  comments: [Comment!]!,
}

type Comment {
  id: ID!,
  text: String!,
  user: User!,
  post: Post!,
}

mutation {
  createUser(name: String!, email: String!, age: Int!, address: AddressInput!): User!,
  updateUser(id: ID!, name: String, email: String, age: Int, address: AddressInput): User!,
  deleteUser(id: ID!): Boolean,
  createPost(title: String!, body: String!, author: ID!): Post!,
  updatePost(id: ID!, title: String, body: String): Post!,
  deletePost(id: ID!): Boolean,
  createComment(text: String!, user: ID!, post: ID!): Comment!,
  updateComment(id: ID!, text: String): Comment!,
  deleteComment(id: ID!): Boolean,
}

input AddressInput {
  street: String!,
  city: String!,
  state: String!,
  country: String!,
}

"""

"# Sample Query to get all users:"