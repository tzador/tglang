// Defining types
type Query {
  books: [Book!]!
  authors: [Author!]!
}

type Mutation {
  addBook(title: String!, authorId: ID!): Book!
  addAuthor(name: String!): Author!
}

type Book {
  id: ID!
  title: String!
  author: Author!
}

type Author {
  id: ID!
  name: String!
  books: [Book!]!
}

// Defining resolvers
const resolvers = {
  Query: {
    books: () => books,
    authors: () => authors,
  },
  Mutation: {
    addBook: (parent, data) => {
      const newBook = {
        id: books.length + 1,
        title: data.title,
        authorId: data.authorId
      };
      books.push(newBook);
      return newBook;
    },
    addAuthor: (parent, data) => {
      const newAuthor = {
        id: authors.length + 1,
        name: data.name
      };
      authors.push(newAuthor);
      return newAuthor;
    }
  },
  Book: {
    author: (parent) => {
      return authors.find(author => author.id === parent.authorId);
    }
  },
  Author: {
    books: (parent) => {
      return books.filter(book => book.authorId === parent.id);
    }
  }
}

// Initializing Apollo Server with type definitions and resolvers
const server = new ApolloServer({
  typeDefs,
  resolvers
});

// Starting the server
server.listen().then(({ url }) => {
  console.log(`Server ready at ${url}`);
});