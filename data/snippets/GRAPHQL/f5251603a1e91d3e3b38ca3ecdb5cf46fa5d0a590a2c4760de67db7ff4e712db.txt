// Creating a GraphQL schema
const { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLList } = require('graphql');

// Defining a person type
const PersonType = new GraphQLObjectType({
  name: 'Person',
  fields: {
    name: { type: GraphQLString },
    age: { type: GraphQLInt },
    hobbies: { type: new GraphQLList(GraphQLString) }
  }
});

// Defining a query type
const QueryType = new GraphQLObjectType({
  name: 'Query',
  fields: {
    person: {
      type: PersonType,
      args: {
        name: { type: GraphQLString }
      },
      resolve: (_, args) => {
        // search database for person with matching name
        // and return their data
        const person = database.find((p) => p.name === args.name);
        if (!person) {
          throw new Error('Person not found');
        }

        return person;
      }
    }
  }
});

// Creating a GraphQL schema with the defined types and query
const schema = new GraphQLSchema({
  query: QueryType
});

// Creating a resolver for the query
const root = {
  person: (_, args) => {
    // search database for person with matching name
    // and return their data
    const person = database.find((p) => p.name === args.name);
    if (!person) {
      throw new Error('Person not found');
    }

    return person;
  }
};

// Calling the graphql function with query and resolver
graphql(
  `
    query {
      person(name: "John Smith") {
        name
        age
        hobbies
      }
    }
  `,
  root,
  schema
);

// Output:
/*
{
  data: {
    person: {
      name: "John Smith",
      age: 30,
      hobbies: ["reading", "traveling"]
    }
  }
}
*/