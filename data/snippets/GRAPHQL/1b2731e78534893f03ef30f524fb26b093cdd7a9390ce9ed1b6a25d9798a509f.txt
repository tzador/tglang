// define a GraphQL schema
const { buildSchema } = require('graphql');

// define the types in the schema
const schema = buildSchema(`
  type Query {
    userInfo(id: Int!): User
    productList: [Product]
    orderList: [Order]
  }

  type Mutation {
    updateUser(id: Int!, name: String!, email: String): User
    addProduct(name: String!, price: Int!, quantity: Int!): Product
    createOrder(productIds: [Int!]!, userId: Int!): Order
  }

  interface Error {
    code: Int!
    message: String!
  }

  type User implements Error {
    id: Int!
    name: String!
    email: String!
  }

  type Product implements Error {
    id: Int!
    name: String!
    price: Int!
    quantity: Int!
  }

  type Order {
    id: Int!
    products: [Product]!
    user: User!
  }
`);

// define the resolvers for the schema
const root = {
  // define the resolver for the userInfo query
  userInfo: ({ id }) => {
    // fetch user data from database
    const userData = fetchUserData(id);
    // return the user object
    return userData;
  },

  // define the resolver for the productList query
  productList: () => {
    // fetch product data from database
    const productData = fetchProductData();
    // return the array of products
    return productData;
  },

  // define the resolver for the orderList query
  orderList: () => {
    // fetch order data from database
    const orderData = fetchOrderData();
    // return the array of orders
    return orderData;
  },

  // define the resolver for the updateUser mutation
  updateUser: ({ id, name, email }) => {
    // update user data in database
    const updatedUser = updateUserInDatabase(id, name, email);
    // return the updated user object
    return updatedUser;
  },

  // define the resolver for the addProduct mutation
  addProduct: ({ name, price, quantity }) => {
    // add new product to database
    const newProduct = addProductToDatabase(name, price, quantity);
    // return the newly added product object
    return newProduct;
  },

  // define the resolver for the createOrder mutation
  createOrder: ({ productIds, userId }) => {
    // fetch the products from database using the provided IDs
    const products = fetchProductsByIds(productIds);
    // fetch the user data from database using the provided user ID
    const user = fetchUserData(userId);
    // create the order and save it in the database
    const newOrder = createNewOrder(products, user);
    // return the newly created order object
    return newOrder;
  }
};

// export the root object with all the resolvers
module.exports = root;