type Query {
  # Comments can be added using the '#' symbol
  user(id: ID!): User
  posts(published: Boolean!): [Post!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
}

# Directives can be used to modify the behavior of types, fields or arguments
# In this case, the 'include' directive will only return the user's email if the 'withEmail' argument is set to true
type User {
  id: ID!
  name: String!
  email: String! @include(if: withEmail)
  posts: [Post!]!
}

# Mutations are used to modify or create data in the server
type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  createPost(authorId: ID!, data: CreatePostInput!): Post!
}

input CreateUserInput {
  name: String!
  email: String!
}

input UpdateUserInput {
  name: String
  email: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  authorId: ID!
}