// Define a GraphQL schema
const typeDefs = `
  type Query {
    post(id: Int!): Post
    posts(category: String): [Post]
    comments(postId: Int!): [Comment]
  }

  type Post {
    id: Int
    title: String
    body: String
    author: String
    category: String
    comments: [Comment]
  }

  type Comment {
    id: Int
    text: String
    author: String
    postId: Int
  }
`;

// Define resolver functions for each type
const resolvers = {
  Query: {
    post: (parent, args) => {
      // Retrieve post based on given id
      return getPostById(args.id);
    },
    posts: (parent, args) => {
      // Retrieve posts based on given category, if provided
      if (args.category) {
        return getPostsByCategory(args.category);
      }
      return getAllPosts();
    },
    comments: (parent, args) => {
      // Retrieve comments for a specific post
      return getCommentsForPost(args.postId);
    },
  },
  Post: {
    // Custom resolver for comments field
    comments: (parent) => {
      // Retrieve comments for current post
      return getCommentsForPost(parent.id);
    },
  },
};

// Create a GraphQL server
const server = new ApolloServer({ typeDefs, resolvers });

// Start the server
server.listen().then(({ url }) => {
  console.log(`Server running at ${url}`);
});