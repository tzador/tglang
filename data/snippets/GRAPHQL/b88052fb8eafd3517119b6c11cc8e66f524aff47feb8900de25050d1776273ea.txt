//Import necessary packages
const { GraphQLServer } = require('graphql-yoga'); 
const fetch = require('node-fetch'); 

//Define a type for Posts
const Post = `
  type Post {
    id: ID!
    title: String!
    body: String!
    author: String!
    createdAt: String!
    comments: [Comment!]!
  }
`;

//Define a type for Comments
const Comment = `
  type Comment {
    id: ID!
    body: String!
    author: String!
    post: Post!
    createdAt: String!
  }
`;

//Define root queries
const Query = `
  type Query {
    posts: [Post!]!
    post(id: ID!): Post
  }
`;

//Define root mutations
const Mutation = `
  type Mutation {
    addPost(title: String!, body: String!, author: String!): Post! 
    addComment(postId: ID!, body: String!, author: String!): Comment!
  }
`;

//Define resolvers to handle queries and mutations
const resolvers = {
  Query: {
    posts: () => getAllPosts(),
    post: (_, { id }) => getPostById(id)
  },
  Mutation: {
    addPost: (_, { title, body, author }) => addNewPost(title, body, author),
    addComment: (_, { postId, body, author }) => addNewComment(postId, body, author)
  },
  Post: {
    comments: (parent) => getCommentsForPost(parent.id)
  },
  Comment: {
    post: (parent) => getPostById(parent.postId)
  }
};

//Create a GraphQL server with the defined schema and resolvers
const server = new GraphQLServer({
  typeDefs: [Post, Comment, Query, Mutation],
  resolvers
});

//Start the server on specified port
server.start({ port: 4000 }, () => console.log('Server is running on port 4000.'));

//Functions to make API calls and manipulate data
const getAllPosts = async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/posts');
  const json = await response.json();
  return json;
};

const getPostById = async (id) => {
  const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);
  const json = await response.json();
  return json;
};

const addNewPost = async (title, body, author) => {
  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    body: JSON.stringify({
      title,
      body,
      author
    }),
    headers: {
      'Content-type': 'application/json; charset=UTF-8',
    }
  });
  const json = await response.json();
  return json;
};

const addNewComment = async (postId, body, author) => {
  const response = await fetch('https://jsonplaceholder.typicode.com/comments', {
    method: 'POST',
    body: JSON.stringify({
      postId,
      body,
      author
    }),
    headers: {
      'Content-type': 'application/json; charset=UTF-8',
    }
  });
  const json = await response.json();
  return json;
};

const getCommentsForPost = async (postId) => {
  const response = await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`);
  const json = await response.json();
  return json;
};