// Define and declare a GraphQL schema
const { buildSchema } = require('graphql');

const schema = buildSchema(`
  type Query {
      movie(id: ID!): Movie
      movies: [Movie]
      actor(id: ID!): Actor
      actors: [Actor]
  }

  type Movie {
      id: ID!
      title: String!
      year: Int!
      actors: [Actor]
  }

  type Actor {
      id: ID!
      name: String!
      age: Int!
      movies: [Movie]
  }

  type Mutation {
      createMovie(title: String!, year: Int!): Movie
      createActor(name: String!, age: Int!): Actor
      addActorToMovie(movieId: ID!, actorId: ID!): Movie
  }
`);

// Define resolvers for the queries, mutations, and relationships
const root = {
  movie: ({ id }) => {
      // Implementation of resolving a single movie
      return {
          id: id,
          title: 'Avatar',
          year: 2009,
          actors: [
              {
                  id: '123',
                  name: 'Zoe Saldana',
                  age: 42,
                  movies: [{ id: id, title: 'Avatar', year: 2009 }]
              }
          ]
      };
  },
  movies: () => {
      // Implementation of resolving multiple movies
      return [
          {
              id: '456',
              title: 'The Dark Knight',
              year: 2008,
              actors: [
                  { id: '234', name: 'Christian Bale', age: 47, movies: [{ id: '456', title: 'The Dark Knight', year: 2008 }] },
                  { id: '345', name: 'Heath Ledger', age: 28, movies: [{ id: '456', title: 'The Dark Knight', year: 2008 }] }
              ]
          }
      ];
  },
  actor: ({ id }) => {
      // Implementation of resolving a single actor
      return {
          id: id,
          name: 'Christian Bale',
          age: 47,
          movies: [{ id: '456', title: 'The Dark Knight', year: 2008 }]
      };
  },
  actors: () => {
      // Implementation of resolving multiple actors
      return [
          { id: '234', name: 'Christian Bale', age: 47, movies: [{ id: '456', title: 'The Dark Knight', year: 2008 }] },
          { id: '345', name: 'Heath Ledger', age: 28, movies: [{ id: '456', title: 'The Dark Knight', year: 2008 }] }
      ];
  },
  createMovie: ({ title, year }) => {
      // Implementation of creating a new movie
      return {
          id: '789',
          title: title,
          year: year,
          actors: []
      };
  },
  createActor: ({ name, age }) => {
      // Implementation of creating a new actor
      return {
          id: '987',
          name: name,
          age: age,
          movies: []
      };
  },
  addActorToMovie: ({ movieId, actorId }) => {
      // Implementation of adding an actor to a movie's list of actors
      return {
          id: movieId,
          title: 'Avatar',
          year: 2009,
          actors: [{ id: actorId, name: 'Zoe Saldana', age: 42, movies: [{ id: movieId, title: 'Avatar', year: 2009 }] }]
      };
  }
};

module.exports = {
  schema: schema,
  root: root
};