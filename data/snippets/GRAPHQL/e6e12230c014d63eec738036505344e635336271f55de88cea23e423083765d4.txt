// Define a custom GraphQL object type

const CustomType = new GraphQLObjectType({
  // Name of the object type
  name: 'CustomType',
  // Description of object type (optional)
  description: 'A custom GraphQL object type for demonstration purposes',
  // Fields of the object type
  fields: {
    // Example string field
    exampleString: {
      // Type of field (String)
      type: GraphQLString,
      // Description of field (optional)
      description: 'An example string field'
    },
    // Example int field
    exampleInt: {
      // Type of field (Int)
      type: GraphQLInt,
      // Description of field (optional)
      description: 'An example int field'
    },
    // Example list field
    exampleList: {
      // Type of field (List)
      type: new GraphQLList(GraphQLString),
      // Description of field (optional)
      description: 'An example list field'
    }
  }
});

// Define a custom GraphQL query

const CustomQuery = new GraphQLObjectType({
  // Name of the query
  name: 'CustomQuery',
  // Description of the query (optional)
  description: 'A custom GraphQL query for retrieving data',
  // Fields of the query
  fields: {
    // Example field that retrieves data from CustomType object type
    customType: {
      // Type of field (CustomType object type)
      type: CustomType,
      // Arguments for the field (optional)
      args: {
        // Example argument for filtering results by string
        filterString: {
          // Type of argument (String)
          type: GraphQLString
        },
        // Example argument for filtering results by int
        filterInt: {
          // Type of argument (Int)
          type: GraphQLInt
        }
      },
      // Resolve function for retrieving data for field
      resolve: (parent, args) => {
        // Get data from database or API based on arguments passed
        return getDataFromSource(args.filterString, args.filterInt);
      }
    }
  }
});

// Define a custom GraphQL mutation

const CustomMutation = new GraphQLObjectType({
  // Name of the mutation
  name: 'CustomMutation',
  // Description of the mutation (optional)
  description: 'A custom GraphQL mutation for creating or updating data',
  // Fields of the mutation
  fields: {
    // Example field for updating data
    updateData: {
      // Type of field (CustomType object type)
      type: CustomType,
      // Arguments for the field
      args: {
        // Required argument for identifying data to be updated
        id: {
          // Type of argument (String)
          type: new GraphQLNonNull(GraphQLString)
        },
        // Optional argument for updating exampleString field
        exampleString: {
          // Type of argument (String)
          type: GraphQLString
        },
        // Optional argument for updating exampleInt field
        exampleInt: {
          // Type of argument (Int)
          type: GraphQLInt
        },
        // Optional argument for adding values to exampleList field
        addToList: {
          // Type of argument (String)
          type: GraphQLString
        }
      },
      // Resolve function for updating data for field
      resolve: (parent, args) => {
        // Update data in database or API based on arguments passed
        return updateDataInSource(args.id, args.exampleString, args.exampleInt, args.addToList);
      }
    }
  }
});

// Define a custom GraphQL schema that combines query and mutation types

const CustomSchema = new GraphQLSchema({
  // Query type
  query: CustomQuery,
  // Mutation type
  mutation: CustomMutation
});

// Example query to retrieve data from CustomType object type

query {
  customType(filterString: "example") {
    exampleString
    exampleInt
    exampleList
  }
}

// Example mutation to update data using CustomMutation type

mutation {
  updateData(id: "12345", exampleString: "updated", exampleInt: 10, addToList: "newItem") {
    exampleString
    exampleInt
    exampleList
  }
}