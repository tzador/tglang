const { buildSchema } = require('graphql');

// Define types
const typeDefs = `
  type Person {
    name: String!
    age: Int!
    occupation: String
  }

  type Query {
    person(name: String!): Person
    people: [Person]
  }

  type Mutation {
    addPerson(name: String!, age: Int!, occupation: String): Person
  }
`

// Define resolvers
const resolvers = {
  Query: {
    person: ({ name }) => {
      // Logic to retrieve person with matching name from database
      return {
        name: "John Doe",
        age: 28
      };
    },
    people: () => {
      // Logic to retrieve all people from database
      return [
        {
          name: "Jane Smith",
          age: 35,
          occupation: "Teacher"
        },
        {
          name: "Bob Johnson",
          age: 42,
          occupation: "Engineer"
        }
      ];
    }
  },
  Mutation: {
    addPerson: ({ name, age, occupation }) => {
      // Logic to add new person to database
      return {
        name,
        age,
        occupation
      };
    }
  }
};

// Create schema
const schema = buildSchema(typeDefs);

// Execute a query
schema.execute(`mutation {
  addPerson(name: "Samantha Chan", age: 25, occupation: "Software Developer") {
    name
    age
    occupation
  }
}`).then((result) => {
  // Handle result
});

// Example output:
// {
//   data: {
//     addPerson: {
//       name: "Samantha Chan",
//       age: 25,
//       occupation: "Software Developer"
//     }
//   }
// }