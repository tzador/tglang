const { GraphQLObjectType, GraphQLList, GraphQLString, GraphQLInt, GraphQLSchema } = require("graphql");

// define bookType
const bookType = new GraphQLObjectType({
  name: "Book",
  fields: () => ({
    title: { type: GraphQLString },
    author: { type: GraphQLString },
    genre: { type: GraphQLString },
    pages: { type: GraphQLInt },
    year: { type: GraphQLInt }
  })
});

// define queryType
const queryType = new GraphQLObjectType({
  name: "Query",
  fields: () => ({
    getAllBooks: {
      type: new GraphQLList(bookType),
      resolve: (parent, args) => {
        // code to get all books from database or external API
      }
    },
    getBookByGenre: {
      type: new GraphQLList(bookType),
      args: { genre: { type: GraphQLString } },
      resolve: (parent, args) => {
        // code to get book by specific genre from database or external API
      }
    },
    getBookByYear: {
      type: new GraphQLList(bookType),
      args: { year: { type: GraphQLInt } },
      resolve: (parent, args) => {
        // code to get book by specific year from database or external API
      }
    }
  })
});

// define mutationType
const mutationType = new GraphQLObjectType({
  name: "Mutation",
  fields: () => ({
    addBook: {
      type: bookType,
      args: {
        title: { type: GraphQLString },
        author: { type: GraphQLString },
        genre: { type: GraphQLString },
        pages: { type: GraphQLInt },
        year: { type: GraphQLInt }
      },
      resolve: (parent, args) => {
        // code to add new book to database or external API
      }
    },
    updateBook: {
      type: bookType,
      args: {
        title: { type: GraphQLString },
        author: { type: GraphQLString },
        genre: { type: GraphQLString },
        pages: { type: GraphQLInt },
        year: { type: GraphQLInt }
      },
      resolve: (parent, args) => {
        // code to update existing book in database or external API
      }
    },
    deleteBook: {
      type: bookType,
      args: { title: { type: GraphQLString } },
      resolve: (parent, args) => {
        // code to delete book from database or external API
      }
    }
  })
});

// define schema with query and mutation
const schema = new GraphQLSchema({
  query: queryType,
  mutation: mutationType
});

console.log(schema);