type Query {  #creates a new type called 'Query'
    user(id: ID!): User  #defines a new field 'user' that takes an id argument of type ID and returns a 'User' type
}

type User {  #creates a new type called 'User'
    id: ID!  #defines a non-null field 'id' of type ID
    name: String!  #defines a non-null field 'name' of type String
    email: String!  #defines a non-null field 'email' of type String
    posts: [Post]  #defines a field 'posts' that returns an array of 'Post' types
}

type Post {  #creates a new type called 'Post'
    id: ID!  #defines a non-null field 'id' of type ID
    title: String!  #defines a non-null field 'title' of type String
    body: String!  #defines a non-null field 'body' of type String
    author: User!  #defines a non-null field 'author' of type 'User'
}

type Mutation {  #creates a new type called 'Mutation'
    createUser(name: String!, email: String!): User  #defines a new field 'createUser' that takes name and email arguments of type String and returns a 'User' type
    createPost(title: String!, body: String!, authorId: ID!): Post  #defines a new field 'createPost' that takes title, body, and authorId arguments of type String and returns a 'Post' type
}

schema { #defines the overall schema for our API
    query: Query #specifies that the query type defined above will be the root query type
    mutation: Mutation #specifies that the mutation type defined above will be the root mutation type
}