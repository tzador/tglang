// Define a schema with GraphQL schema language
const typeDefs = `
  type Product {
    id: ID
    name: String
    price: Float
    description: String
  }

  type Query {
    getProduct(id: ID!): Product
    getAllProducts: [Product]
  }

  type Mutation {
    addProduct(name: String!, price: Float!, description: String!): Product
    updateProduct(id: ID!, name: String, price: Float, description: String): Product
    deleteProduct(id: ID!): Boolean
  }
`;

// A map of functions which return data for our schema.
const resolvers = {
  Query: {
    getProduct: (parent, { id }) => {
      // Logic to retrieve product by ID from database
      return getProductById(id);
    },
    getAllProducts: () => {
      // Logic to retrieve all products from database
      return getAllProducts();
    }
  },
  Mutation: {
    addProduct: (parent, { name, price, description }) => {
      // Logic to add product to database
      return addNewProduct(name, price, description);
    },
    updateProduct: (parent, { id, name, price, description }) => {
      // Logic to update product in database
      return updateProductById(id, name, price, description);
    },
    deleteProduct: (parent, { id }) => {
      // Logic to delete product from database
      return deleteProductById(id);
    }
  }
};

// Create GraphQL server using ApolloServer
const server = new ApolloServer({ typeDefs, resolvers });

// Start listening to incoming requests
server.listen().then(({ url }) => {
  console.log(`ğŸš€ Server ready at ${url}`);
});