// first we define the schema
// this will define the structure of our data
// this includes the types of data and their relationships
const typeDefs = `
  type Post {
    id: ID!
    title: String!
    content: String!
    author: User!
  }

  type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
  }

  type Query {
    posts: [Post!]!
    post(id: ID!): Post!
    users: [User!]!
    user(id: ID!): User!
  }

  type Mutation {
    createPost(title: String!, content: String!, authorId: ID!): Post!
    updatePost(id: ID!, title: String, content: String): Post!
    deletePost(id: ID!): ID!
    createUser(name: String!, email: String!): User!
    updateUser(id: ID!, name: String, email: String): User!
    deleteUser(id: ID!): ID!
  }
`

// next, we define the resolvers
// these are functions that handle the incoming requests and return the appropriate data
const resolvers = {
  Query: {
    posts() {
      // logic to retrieve all posts
    },
    post(parent, args) {
      // logic to retrieve a post with given id
    },
    users() {
      // logic to retrieve all users
    },
    user(parent, args) {
      // logic to retrieve a user with given id
    },
  },
  Mutation: {
    createPost(parent, args) {
      // logic to create a new post with given data
    },
    updatePost(parent, args) {
      // logic to update a post with given id and data
    },
    deletePost(parent, args) {
      // logic to delete a post with given id
    },
    createUser(parent, args) {
      // logic to create a new user with given data
    },
    updateUser(parent, args) {
      // logic to update a user with given id and data
    },
    deleteUser(parent, args) {
      // logic to delete a user with given id
    },
  },
  Post: {
    author(parent) {
      // logic to retrieve the author of a post
    },
  },
  User: {
    posts(parent) {
      // logic to retrieve all posts by a user
    },
  },
}

// finally, we create the GraphQL server by passing in the schema and resolvers
const server = new GraphQLServer({
  typeDefs,
  resolvers,
})

// we can then start the server and listen for incoming requests
server.start(() => console.log(`Server is running on http://localhost:4000`));