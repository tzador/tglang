type User {
    id: ID!
    name: String!
    email: String!
    posts(first: Int, after: String, orderBy: PostsOrderBy): [Post!]!
  }

  enum PostsOrderBy {
    LATEST
    OLDEST
    MOST_LIKED
    MOST_COMMENTED
  }

  type Post {
    id: ID!
    title: String!
    body: String!
    author: User!
    likes: Int!
    comments: [Comment!]!
    createdAt: DateTime!
    updatedAt: DateTime!
  }

  type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
    createdAt: DateTime!
    updatedAt: DateTime!
  }

  type Query {
    user(id: ID!): User!
    post(id: ID!): Post!
    allPosts: [Post!]!
  }

  type Mutation {
    createUser(name: String!, email: String!): User!
    createPost(title: String!, body: String!, authorId: ID!): Post!
    createComment(text: String!, authorId: ID!, postId: ID!): Comment!
    updatePost(id: ID!, title: String, body: String): Post!
    updateComment(id: ID!, text: String): Comment!
    deletePost(id: ID!): Post!
    deleteComment(id: ID!): Comment!
  }

  scalar DateTime