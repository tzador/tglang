type Book {
  id: ID! // defining the ID as unique identifier
  title: String! // defining the title as required string value
  author: Author! // defining the author as an object of type Author
  published: Int // defining the published year as optional integer value
}

type Author {
  id: ID! // defining the ID as unique identifier
  name: String! // defining the author name as required string value
  age: Int // defining the age as optional integer value
  books: [Book!]! // defining the books property as list of required Books
}

input BookInput {
  title: String! // defining the title as required string value
  author: String! // defining the author as required string value
  published: Int // defining the published year as optional integer value
}

type Query {
  getBook(id: ID!): Book // defining the getBook query with ID as required parameter and returning a Book object
  getAllBooks: [Book!]! // defining the getAllBooks query that returns a list of required Book objects
}

type Mutation {
  addBook(book: BookInput!): Book // defining the addBook mutation with BookInput as required parameter and returning a Book object
  updateBook(id: ID!, book: BookInput!): Book // defining the updateBook mutation with ID and BookInput as required parameters and returning a Book object
  deleteBook(id: ID!): Book // defining the deleteBook mutation with ID as required parameter and returning a Book object
}

schema {
  query: Query // defining the query operation to be performed on the GraphQL server
  mutation: Mutation // defining the mutation operation to be performed on the GraphQL server
}