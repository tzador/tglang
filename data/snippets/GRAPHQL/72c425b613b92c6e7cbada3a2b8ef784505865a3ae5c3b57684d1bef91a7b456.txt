const { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLList } = require('graphql');

const userType = new GraphQLObjectType({
  name: 'User',
  fields: {
    firstName: { type: GraphQLString },
    lastName: { type: GraphQLString },
    email: { type: GraphQLString },
    age: { type: GraphQLInt },
  }
});

const queryType = new GraphQLObjectType({
  name: 'Query',
  fields: {
    user: {
      type: userType,
      args: {
        firstName: { type: GraphQLString },
        lastName: { type: GraphQLString },
      },
      resolve: (parent, args) => {
        // make API call to get user data
        const userData = await getUserData(args.firstName, args.lastName);
        return userData;
      },
    },
    users: {
      type: new GraphQLList(userType),
      resolve: (parent, args) => {
        // make API call to get all users
        const allUsers = await getAllUsers();
        return allUsers;
      },
    },
  }
});

const mutationType = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    addUser: {
      type: userType,
      args: {
        firstName: { type: GraphQLString },
        lastName: { type: GraphQLString },
        email: { type: GraphQLString },
        age: { type: GraphQLInt },
      },
      resolve: (parent, args) => {
        // make API call to add new user
        const newUser = await addUser(args.firstName, args.lastName, args.email, args.age);
        return newUser;
      },
    },
    updateUser: {
      type: userType,
      args: {
        id: { type: GraphQLString },
        firstName: { type: GraphQLString },
        lastName: { type: GraphQLString },
        email: { type: GraphQLString },
        age: { type: GraphQLInt },
      },
      resolve: (parent, args) => {
        // make API call to update user
        const updatedUser = await updateUser(args.id, args.firstName, args.lastName, args.email, args.age);
        return updatedUser;
      },
    },
    deleteUser: {
      type: GraphQLString,
      args: {
        id: { type: GraphQLString },
      },
      resolve: async (parent, args) => {
        // make API call to delete user
        const deletedUser = await deleteUser(args.id);
        return deletedUser;
      },
    },
  },
});

const schema = new GraphQLSchema({ query: queryType, mutation: mutationType });

// API functions to call from resolves
async function getUserData(firstName, lastName) {
  // make API call to get user data
  return userData;
}

async function getAllUsers() {
  // make API call to get all users
  return allUsers;
}

async function addUser(firstName, lastName, email, age) {
  // make API call to add new user
  return addUser;
}

async function updateUser(id, firstName, lastName, email, age) {
  // make API call to update user
  return updatedUser;
}

async function deleteUser(id) {
  // make API call to delete user
  return deletedUser;
}