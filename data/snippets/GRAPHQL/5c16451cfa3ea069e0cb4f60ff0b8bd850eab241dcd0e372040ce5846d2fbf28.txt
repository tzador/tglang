#Create a GraphQL Schema
const graphql = require('graphql');

#Creating a GraphQL Schema
const {
    GraphQLScheme,
    GraphQLObjectType,
    GraphQLString,
    GraphQLInt,
    GraphQLNonNull
} = graphql;

#Define the schema with fields and types
const EmployeeType = new GraphQLObjectType({
    name: 'Employee',
    description: 'Represents an employee in a company',
    fields: () => ({
        id: { type: GraphQLNonNull(GraphQLInt) },
        name: { type: GraphQLNonNull(GraphQLString) },
        position: { type: GraphQLNonNull(GraphQLString) },
        department: { type: GraphQLNonNull(GraphQLString) },
        salary: { type: GraphQLNonNull(GraphQLInt) }
    })
});

#Define the root query
const RootQuery = new GraphQLObjectType({
    name: 'Query',
    description: 'Root Query',
    fields: {
        employee: {
            type: EmployeeType,
            args: {
                id: { type: GraphQLInt }
            },
            resolve(parent, args) {
                #In a real implementation, this would fetch data from a database
                const employees = [
                    { id: 1, name: 'John Smith', position: 'Manager', department: 'Sales', salary: 50000 },
                    { id: 2, name: 'Jane Doe', position: 'Assistant Manager', department: 'Marketing', salary: 45000 },
                    { id: 3, name: 'Bob Johnson', position: 'Senior Developer', department: 'IT', salary: 80000 }
                ];
                return employees.find(employee => employee.id === args.id);
            }
        }
    }
});

#Define the mutations
const Mutation = new GraphQLObjectType({
    name: 'Mutation',
    description: 'Mutations',
    fields: {
        addEmployee: {
            type: EmployeeType,
            args: {
                name: { type: GraphQLNonNull(GraphQLString) },
                position: { type: GraphQLNonNull(GraphQLString) },
                department: { type: GraphQLNonNull(GraphQLString) },
                salary: { type: GraphQLNonNull(GraphQLInt) }
            },
            resolve(parent, args) {
                const newEmployee = {
                    name: args.name,
                    position: args.position,
                    department: args.department,
                    salary: args.salary
                };
                return newEmployee;
            }
        }
    }
});

#Create the schema
const schema = new GraphQLSchema({
    query: RootQuery,
    mutation: Mutation
});

#Export the schema
module.exports = schema;