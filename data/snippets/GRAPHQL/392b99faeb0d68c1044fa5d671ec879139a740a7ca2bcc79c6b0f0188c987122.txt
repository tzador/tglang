const express = require('express');
const { ApolloServer, gql } = require('apollo-server-express');
const bodyParser = require('body-parser');

// Define your GraphQL schema
const typeDefs = gql`
  type Query {
    info: String!
  }

  type Mutation {
    addLink(url: String!, description: String!): Link!
  }

  type Link {
    id: ID!
    description: String!
    url: String!
  }
`;

// Define your resolver functions for the schema fields
const resolvers = {
  Query: {
    info: () => 'This is a sample GraphQL API',
  },
  Mutation: {
    addLink: (parent, args) => {
      const newLink = {
        id: `link-${linkIdCounter++}`,
        description: args.description,
        url: args.url,
      };
      links.push(newLink);
      return newLink;
    },
  },
};

// Create an express server and ApolloServer instance
const app = express();
app.use(bodyParser.json());
const server = new ApolloServer({ typeDefs, resolvers });

// Use the ApolloServer as a middleware on the express server
server.applyMiddleware({ app });

// Start the express server on port 4000 and log the endpoint
app.listen(4000, () => {
  console.log(`ðŸš€ Server ready at http://localhost:4000${server.graphqlPath}`);
});