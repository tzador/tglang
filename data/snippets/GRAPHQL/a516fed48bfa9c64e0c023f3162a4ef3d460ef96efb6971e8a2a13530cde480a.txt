type Query {
    getEmployee(id: ID!): Employee // Query to retrieve an employee with specific ID

    getEmployeesByDepartment(department: String!, limit: Int): [Employee!]! // Query to retrieve a list of employees in a specific department, with optional limit parameter

    searchEmployeesByKeyword(keyword: String): [Employee] // Query to search for employees by a given keyword

    getDepartments: [Department] // Query to retrieve all departments

    getDepartmentEmployees(departmentId: ID!): [Employee!]! // Query to retrieve all employees in a specific department

    getEmployeeProjects(employeeId: ID!): [Project] // Query to retrieve all projects that an employee is assigned to

    getProjectEmployees(projectId: ID!): [Employee!]! // Query to retrieve all employees assigned to a specific project

    getSalariedEmployees: [Employee!]! // Query to retrieve all salaried employees

    getHourlyEmployees: [Employee!]! // Query to retrieve all hourly employees
}

type Mutation {
    addEmployee(name: String!, department: String!, salary: Int!, hourlyRate: Int, isManager: Boolean): Employee // Mutation to add a new employee

    updateEmployee(id: ID!, name: String, department: String, salary: Int, hourlyRate: Int, isManager: Boolean): Employee // Mutation to update an existing employee

    deleteEmployee(id: ID!): Employee // Mutation to delete an employee
}

type Employee {
    id: ID!
    name: String!
    department: Department!
    salary: Int!
    hourlyRate: Int
    isManager: Boolean!
    projects: [Project]
}

type Department {
    id: ID!
    name: String!
    employees: [Employee]
}

type Project {
    id: ID!
    name: String!
    employees: [Employee]
}