type Query { // define a 'Query' type for GraphQL schema
  users: [User!]! // define a field 'users' that returns an array of User objects, cannot be null and cannot contain null values
  user(id: ID!): User // define a field 'user' that takes an 'id' argument and returns a single User object
}

type Mutation { // define a 'Mutation' type for GraphQL schema
  createUser(name: String!, email: String!): User! // define a field 'createUser' that takes 'name' and 'email' arguments, and returns a User object
  editUser(id: ID!, name: String, email: String): User // define a field 'editUser' that takes 'id', 'name', and 'email' arguments, and returns a single User object
  deleteUser(id: ID!): User // define a field 'deleteUser' that takes an 'id' argument and returns a single User object
}

type User { // define a 'User' type for GraphQL schema
  id: ID! // define a field 'id' that cannot be null
  name: String! // define a field 'name' that cannot be null
  email: String! // define a field 'email' that cannot be null
  posts: [Post!]! // define a field 'posts' that returns an array of Post objects, cannot be null and cannot contain null values
}

type Post { // define a 'Post' type for GraphQL schema
  id: ID! // define a field 'id' that cannot be null
  title: String! // define a field 'title' that cannot be null
  content: String! // define a field 'content' that cannot be null
  author: User! // define a field 'author' that returns a single User object, cannot be null
}