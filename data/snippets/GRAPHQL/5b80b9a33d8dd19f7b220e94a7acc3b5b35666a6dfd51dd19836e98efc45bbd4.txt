# Define a GraphQL schema
type Query {
  # Define a root query field called `user`
  user(id: ID!): User
}

# Define a `User` type
type User {
  id: ID!
  name: String
  email: String
  age: Int
}

# Define a resolver for the `user` field
@resolver(name: getUserById)
# The `user` resolver takes in an `id` argument and
# returns a `User` object
Query.user | function({ id }) {
  return {
    id: id,
    name: "John Doe",
    email: "johndoe@example.com",
    age: 25
  }
}

# Define a `Query` object used to fetch data from the schema
const query = {
  user: async (args, context, info) => {
    // Make a network request to fetch user data with the given id
    const response = await fetch(`https://jsonplaceholder.typicode.com/users/${args.id}`);
    
    // Parse the response to JSON format
    const data = await response.json();
    
    // Return a `User` object with the fetched data
    return {
      id: data.id,
      name: data.name,
      email: data.email,
      age: data.age
    };
  }
}

# Construct a GraphQL schema with the `Query` object and `User` type
const schema = makeExecutableSchema({
  typeDefs,
  resolvers: {
    Query: query,
    User: user
  }
});

# Define a GraphQL query
query GetUser($id: ID!) {
  user(id: $id) {
    name
    email
    age
  }
}

# Execute the query with an id variable of 1
execute(schema, query, null, null, { id: 1 }).then(result => {
  console.log(result); // { data: { user: { name: "John Doe", email: "johndoe@example.com", age: 25 } } }
});