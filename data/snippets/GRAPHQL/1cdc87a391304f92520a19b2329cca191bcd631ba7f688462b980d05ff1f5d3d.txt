// Define a Query type
type Query {
  // Retrieve a list of all users
  users: [User!]!
  // Retrieve a specific user by their unique ID
  user(id: ID!): User
}

// Define a User type with relevant fields
type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
}

// Define a Post type with relevant fields
type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  datePosted: String!
}

// Define a Mutation type for creating, updating, and deleting users and posts
type Mutation {
  // Create a new user with given input parameters
  createUser(name: String!, email: String!, age: Int): User!
  // Update a specific user's information with new input parameters
  updateUser(id: ID!, name: String, email: String, age: Int): User!
  // Delete a specific user by their unique ID
  deleteUser(id: ID!): User!
  // Create a new post with given input parameters
  createPost(title: String!, content: String!, authorId: ID!, datePosted: String!): Post!
  // Update a specific post's information with new input parameters
  updatePost(id: ID!, title: String, content: String, datePosted: String!): Post!
  // Delete a specific post by its unique ID
  deletePost(id: ID!): Post!
}

// Define a Subscription type for receiving real-time updates
type Subscription {
  // Subscribe to a specific user's posts with their unique ID as the channel
  userPosts(id: ID!): Post
}

// Define a Schema with Query, Mutation, and Subscription types
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}