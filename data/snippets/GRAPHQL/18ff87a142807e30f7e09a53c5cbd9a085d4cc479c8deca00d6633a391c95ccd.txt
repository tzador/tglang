type Query {
    getAllPosts(first: Int! = 10, after: String): PostConnection
    # GraphQL query type for fetching all posts with pagination
}

type Mutation {
    createPost(input: PostInput): Post!
    # GraphQL mutation type for creating a new post
}

type Subscription {
    postAdded: Post
    # GraphQL subscription type for receiving notifications when a new post is added
}

type Post {
    id: ID!
    title: String
    body: String!
    author: User
    comments: [Comment]
    # GraphQL object type for a single post with fields for id, title, body, author, and an array of comments
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post]
    # GraphQL object type for a user with fields for id, name, email, and an array of posts
}

type Comment {
    id: ID!
    content: String!
    author: User!
    post: Post!
    # GraphQL object type for a comment with fields for id, content, author, and post
}

input PostInput {
    title: String
    body: String!
    authorId: ID!
    # GraphQL input type for creating a new post with fields for title, body, and authorId
}

type PostConnection {
    edges: [PostEdge]
    pageInfo: PageInfo!
    # GraphQL object type for a connection of posts with fields for edges (an array of post edges) and pageInfo
}

type PostEdge {
    cursor: String!
    node: Post!
    # GraphQL object type for a post edge with fields for a cursor and the post itself
    # Requires a custom resolver to generate a cursor for each post
}

type PageInfo {
    hasNextPage: Boolean!
    endCursor: String
    # GraphQL object type for page information with a boolean for hasNextPage and the endCursor
    # Requires a custom resolver to generate the endCursor
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
    # Root GraphQL schema with fields for the query, mutation, and subscription types
}