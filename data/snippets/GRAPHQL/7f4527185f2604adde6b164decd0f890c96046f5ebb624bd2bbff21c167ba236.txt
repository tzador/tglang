# Define the GraphQL schema
type Book {
    id: ID!
    title: String!
    author: String!
    genre: String!
}

type Query {
    books: [Book!]!
    authors: [String!]!
}

type Mutation {
    addBook(title: String!, author: String!, genre: String!): Book!
    deleteBook(id: ID!): Book!
}

# Define the root resolvers
const resolvers = {
    Query: {
        books: () => books,
        authors: () => authors
    },
    Mutation: {
        addBook: (_, { title, author, genre }) => {
            const book = {
                id: books.length + 1,
                title,
                author,
                genre
            };
            books.push(book);
            return book;
        },
        deleteBook: (_, { id }) => {
            let deletedBook;
            books = books.filter((book) => {
                if (book.id === id) {
                    deletedBook = book;
                    return false;
                }
                return true;
            });
            return deletedBook;
        }
    }
};

# Define the GraphQL server
const server = new ApolloServer({
    typeDefs: "./schema.graphql",
    resolvers
});

# Start the server
server.listen().then(({ url }) => {
    console.log(`Server ready at ${url}`);
});