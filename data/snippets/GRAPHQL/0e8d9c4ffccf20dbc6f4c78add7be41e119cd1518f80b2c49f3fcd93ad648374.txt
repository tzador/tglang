// Define the GraphQL Schema
type Query {
  users: [User!]! # Returns a list of users
  posts: [Post!]! # Returns a list of posts
}

type User {
  id: ID! # Unique identifier for the user
  name: String # Name of the user
  email: String # Email address of the user
  posts: [Post!]! # Returns a list of posts authored by this user
}

type Post {
  id: ID! # Unique identifier for the post
  title: String # Title of the post
  body: String # Body content of the post
  author: User! # Returns the user who authored the post
}

// Define the Query Resolver to handle incoming requests
const resolvers = {
  Query: {
    users: () => getUsers(), // Resolver function to return list of users
    posts: () => getPosts() // Resolver function to return list of posts
  },
  User: {
    posts: (parent) => getPostsByUser(parent.id) // Resolver function to return list of posts for a specific user
  }
}

// Define the Query schema using Apollo Server
const server = new ApolloServer({
  typeDefs: typeDefs, // Use the predefined GraphQL Schema
  resolvers: resolvers // Use the predefined Query Resolver
})

// Start the GraphQL server
server.listen().then(({ url }) => {
  console.log(`ğŸš€ Server ready at ${url}`)
})