// Define a GraphQL Schema
const graphql = require('graphql');

// Import GraphQL types
const {
  GraphQLObjectType,
  GraphQLString,
  GraphQLSchema,
  GraphQLID,
  GraphQLInt,
  GraphQLList
} = graphql;

// Define Movie type
const MovieType = new GraphQLObjectType({
  name: 'Movie',
  fields: () => ({
    id: { type: GraphQLID },
    title: { type: GraphQLString },
    genre: { type: GraphQLString },
    year: { type: GraphQLInt },
    director: { type: GraphQLString },
    actors: { type: new GraphQLList(GraphQLString) }
  })
});

// Define Director type
const DirectorType = new GraphQLObjectType({
  name: 'Director',
  fields: () => ({
    id: { type: GraphQLID },
    name: { type: GraphQLString },
    country: { type: GraphQLString },
    age: { type: GraphQLInt },
    movies: { 
      type: new GraphQLList(MovieType),
      resolve(parent, args) {
        // Simulate database query to get movies by director id
        return db.getMoviesByDirectorId(parent.id)
      }
    }
  })
});

// Define Root Query
const RootQuery = new GraphQLObjectType({
  name: 'RootQueryType',
  fields: {
    // Query to get a Movie by ID
    movie: {
      type: MovieType,
      args: { id: { type: GraphQLID } },
      resolve(parent, args) {
        // Simulate database query to get movie by id
        return db.getMovieById(args.id)
      }
    },
    // Query to get a Director by ID
    director: {
      type: DirectorType,
      args: { id: { type: GraphQLID } },
      resolve(parent, args) {
        // Simulate database query to get director by id
        return db.getDirectorById(args.id)
      }
    },
    // Query to get all movies
    movies: {
      type: new GraphQLList(MovieType),
      resolve(parent, args) {
        // Simulate database query to get all movies
        return db.getAllMovies()
      }
    },
    // Query to get all directors
    directors: { 
      type: new GraphQLList(DirectorType),
      resolve(parent, args) {
        // Simulate database query to get all directors
        return db.getAllDirectors()
      }
    } 
  }
});

// Define Mutation
const Mutation = new GraphQLObjectType({
  name: 'Mutation',
  fields: {
    // Mutation to add a new movie
    addMovie: {
      type: MovieType,
      args: {
        title: { type: GraphQLString },
        genre: { type: GraphQLString },
        year: { type: GraphQLInt },
        directorId: { type: GraphQLID }
      },
      resolve(parent, args) {
        // Simulate database query to create new movie
        return db.createMovie(args.title, args.genre, args.year, args.directorId)
      }
    },
    // Mutation to add a new director
    addDirector: {
      type: DirectorType,
      args: {
        name: { type: GraphQLString },
        country: { type: GraphQLString },
        age: { type: GraphQLInt }
      },
      resolve(parent, args) {
        // Simulate database query to create new director
        return db.createDirector(args.name, args.country, args.age)
      }
    } 
  }
});

// export schema
module.exports = new GraphQLSchema({
  query: RootQuery,
  mutation: Mutation
});