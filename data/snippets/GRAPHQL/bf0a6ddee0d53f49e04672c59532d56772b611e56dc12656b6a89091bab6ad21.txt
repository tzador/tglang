# GraphQL Schema definition for a blog application

# Import necessary libraries and dependencies
import { GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLList, GraphQLSchema } from 'graphql'

# Define a GraphQLObjectType for the User type
const UserType = new GraphQLObjectType({
    # Name of the type
    name: 'User',
    # Description of the type
    description: 'Represents a user on the blog platform',
    # Fields of the type
    fields: () => ({
        id: {
            # Type of the field
            type: GraphQLInt,
            # Description of the field
            description: 'The id of the user'
        },
        username: {
            type: GraphQLString,
            description: 'The username of the user'
        },
        email: {
            type: GraphQLString,
            description: 'The email of the user'
        },
        posts: {
            # Type of the field (list of blog posts)
            type: new GraphQLList(PostType),
            # Description of the field
            description: 'The blog posts created by the user',
            # Resolve function to fetch the user's posts
            resolve: (user) => {
                return getPostsByUser(user.id)
            }
        }
    })
})

# Define a GraphQLObjectType for the Post type
const PostType = new GraphQLObjectType({
    name: 'Post',
    description: 'Represents a blog post',
    fields: () => ({
        id: {
            type: GraphQLInt,
            description: 'The id of the post'
        },
        title: {
            type: GraphQLString,
            description: 'The title of the post'
        },
        content: {
            type: GraphQLString,
            description: 'The content of the post'
        },
        author: {
            # Type of the field (User type)
            type: UserType,
            # Description of the field
            description: 'The author of the post',
            # Resolve function to fetch the post's author
            resolve: (post) => {
                return getUserById(post.authorId)
            }
        }
    })
})

# Define a Query type to fetch data from the GraphQL API
const QueryType = new GraphQLObjectType({
    # Name of the type
    name: 'Query',
    # Fields of the type
    fields: () => ({
        # Field for fetching a single user by id
        user: {
            # Type of the field (User type)
            type: UserType,
            # Arguments for the query (id)
            args: {
                id: { type: GraphQLInt }
            },
            # Resolve function to fetch the user with the given id
            resolve: (root, args) => {
                return getUserById(args.id)
            }
        },
        # Field for fetching a list of all posts
        posts: {
            # Type of the field (list of Post type)
            type: new GraphQLList(PostType),
            # Resolve function to fetch all posts
            resolve: () => {
                return getAllPosts()
            }
        }
    })
})

# Finally, define a GraphQLSchema with the Query type as the root
const schema = new GraphQLSchema({
    query: QueryType
})