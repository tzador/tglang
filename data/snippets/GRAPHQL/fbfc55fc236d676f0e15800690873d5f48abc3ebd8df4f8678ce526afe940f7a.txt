// Defining the schema for a GraphQL API
type Book {
  id: ID,
  title: String,
  author: String,
  genre: String
}

// Query to get all books
query books {
  books {
    id,
    title,
    author,
    genre
  }
}

// Mutation to add a new book
mutation addBook($title: String!, $author: String!, $genre: String!) {
  addBook(title: $title, author: $author, genre: $genre) {
    id,
    title,
    author,
    genre
  }
}

// Mutation to update a book's information
mutation updateBook($id: ID!, $title: String, $author: String, $genre: String) {
  updateBook(id: $id, title: $title, author: $author, genre: $genre) {
    id,
    title,
    author,
    genre
  }
}

// Mutation to delete a book
mutation deleteBook($id: ID!) {
  deleteBook(id: $id) {
    id,
    title,
    author,
    genre
  }
}

// Defining the root query and mutations for the API
type Query {
  books: [Book]
}

type Mutation {
  addBook(title: String!, author: String!, genre: String!): Book,
  updateBook(id: ID!, title: String, author: String, genre: String): Book,
  deleteBook(id: ID!): Book
}

// Setting up resolvers to handle the queries and mutations
const resolvers = {
  Query: {
    books: () => {
      // code to retrieve all books from database
    }
  },
  Mutation: {
    addBook: (parent, args) => {
      // code to add a new book to database
    },
    updateBook: (parent, args) => {
      // code to update a book's information in database
    },
    deleteBook: (parent, args) => {
      // code to delete a book from database
    }
  }
}

// Setting up the GraphQL server
const { graphqlHTTP } = require('express-graphql');
const { buildSchema } = require('graphql');

// Construct a schema defined in the GraphQL schema language
const schema = buildSchema(`
  type Book {
    id: ID,
    title: String,
    author: String,
    genre: String
  }

  type Query {
    books: [Book]
  }

  type Mutation {
    addBook(title: String!, author: String!, genre: String!): Book,
    updateBook(id: ID!, title: String, author: String, genre: String): Book,
    deleteBook(id: ID!): Book
  }
`);

// Root resolver for the GraphQL API
const root = resolvers;

// Start the GraphQL server
app.use('/graphql', graphqlHTTP({
  schema: schema,
  rootValue: root,
  graphiql: true
}));