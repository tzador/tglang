type Book {
  title: String
  author: String
  genre: String
  year: Int
}

type Query {
  book(id: ID!): Book
}

type Mutation {
  addBook(title: String!, author: String!, genre: String!, year: Int!): Book
}

const resolvers = {
  Query: {
    book: (parent, args, context, info) => {
      const { id } = args;
      const book = Book.find(book => book.id === id);
      return book;
    }
  },
  Mutation: {
    addBook: (parent, args, context, info) => {
      const { title, author, genre, year } = args;
      const newBook = {
        id: Math.random().toString(),
        title,
        author,
        genre,
        year
      };
      Book.push(newBook);
      return newBook;
    }
  }
}

const typeDefs = `
  type Book {
    title: String
    author: String
    genre: String
    year: Int
  }

  type Query {
    book(id: ID!): Book
  }

  type Mutation {
    addBook(title: String!, author: String!, genre: String!, year: Int!): Book
  }
`;

const server = new ApolloServer({
  typeDefs,
  resolvers
});

server.listen().then(({ url }) => {
  console.log(`Server ready at ${url}`);
});