const { ApolloServer, gql } = require('apollo-server');
const typeDefs = gql`
  type User {
    id: ID!
    name: String!
    age: Int
    email: String!
  }

  enum Gender {
    MALE
    FEMALE
    NON_BINARY
  }

  type Query {
    users: [User!]!
    user(id: ID!): User!
  }

  type Mutation {
    createUser(name: String!, age: Int, email: String!, gender: Gender): User!
  }
`;
const users = [
  {
    id: '1',
    name: 'John Doe',
    age: 28,
    email: 'johndoe@email.com',
    gender: 'MALE'
  },
  {
    id: '2',
    name: 'Jane Smith',
    age: 32,
    email: 'janesmith@example.com',
    gender: 'FEMALE'
  }
];
const resolvers = {
  Query: {
    users: () => users,
    user: (_, { id }) => users.find((user) => user.id === id)
  },
  Mutation: {
    createUser: (_, { name, age, email, gender }) => {
      const newUser = {
        id: String(users.length + 1),
        name,
        age,
        email,
        gender
      };
      users.push(newUser);
      return newUser;
    }
  }
};
const server = new ApolloServer({ typeDefs, resolvers });
server.listen().then(({ url }) => {
  console.log(`ğŸš€  Server ready at ${url}`);
});