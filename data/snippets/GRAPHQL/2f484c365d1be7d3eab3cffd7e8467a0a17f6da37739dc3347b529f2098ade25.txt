const RootQuery = new GraphQLObjectType({
    name: 'Query',
    fields: {
        user: {
            type: UserType,
            args: { id: { type: GraphQLString } },
            resolve(parentValue, args) {
                return db.getUserById(args.id);
            }
        },
        posts: {
            type: new GraphQLList(PostType),
            resolve(parentValue, args) {
                return db.getAllPosts();
            }
        }
    }
});

const Mutation = new GraphQLObjectType({
    name: 'Mutation',
    fields: {
        addUser: {
            type: UserType,
            args: {
                name: { type: new GraphQLNonNull(GraphQLString) },
                age: { type: new GraphQLNonNull(GraphQLInt) }
            },
            resolve(parentValue, args) {
                return db.addUser(args);
            }
        },
        addPost: {
            type: PostType,
            args: {
                title: { type: new GraphQLNonNull(GraphQLString) },
                content: { type: GraphQLString },
                authorId: { type: new GraphQLNonNull(GraphQLString) }
            },
            resolve(parentValue, args) {
                return db.addPost(args);
            }
        },
        editPost: {
            type: PostType,
            args: {
                id: { type: new GraphQLNonNull(GraphQLString) },
                title: { type: GraphQLString },
                content: { type: GraphQLString }
            },
            resolve(parentValue, args) {
                return db.editPost(args);
            }
        }
    }
});

const schema = new GraphQLSchema({
    query: RootQuery,
    mutation: Mutation
});