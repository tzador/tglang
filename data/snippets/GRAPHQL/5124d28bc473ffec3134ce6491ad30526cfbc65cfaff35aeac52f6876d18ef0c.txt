type Query {
    posts: [Post!]! # List of all posts
    comments(postId: ID!): [Comment!]! # List of comments for a specific post
}

type Post {
    id: ID!
    title: String!
    body: String!
    author: User!
    comments: [Comment!]!
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
}

type Comment {
    id: ID!
    body: String!
    author: User!
    post: Post!
}

# Here we define the queries and mutations for our GraphQL schema
type Query {
    posts: [Post!]! # List of all posts
    comments(postId: ID!): [Comment!]! # List of comments for a specific post
    users: [User!]! # List of all users
    user(id: ID!): User # Single user
}

type Mutation {
    createUser(name: String!, email: String!): User! # Create a new user
    createPost(title: String!, body: String!, authorId: ID!): Post! # Create a new post
    createComment(body: String!, authorId: ID!, postId: ID!): Comment! # Create a new comment
}

# Here we define the relationships between our types
type Post {
    id: ID!
    title: String!
    body: String!
    author: User!
    comments: [Comment!]!
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    body: String!
    author: User!
    post: Post!
}

# Sample query for retrieving all posts
{
    posts {
        id
        title
        body
        author {
            id
            name
        }
        comments {
            id
            body
        }
    }
}

# Sample query for creating a new user
mutation {
    createUser(name: "John Doe", email: "johndoe@example.com") {
        id
        name
        email
    }
}

# Sample query for creating a new post
mutation {
    createPost(title: "New Post", body: "This is a new post", authorId: "1") {
        id
        title
        body
        author {
            id
            name
        }
        comments {
            id
            body
        }
    }
}

# Sample query for creating a new comment
mutation {
    createComment(body: "Great post!", authorId: "2", postId: "1") {
        id
        body
        author {
            id
            name
        }
        post {
            id
            title
        }
    }
}