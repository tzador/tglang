type Movie {
  id: ID!
  title: String!
  year: Int!
  director: Director!
  actors: [Actor!]!
}

type Director {
  name: String!
  age: Int!
  isFemale: Boolean!
  movies: [Movie!]!
}

type Actor {
  name: String!
  age: Int!
  isFemale: Boolean!
  movies: [Movie!]!
}

type Query {
  movies: [Movie!]!
  directors: [Director!]!
  actors: [Actor!]!
  movie(id: ID!): Movie
  director(id: ID!): Director
  actor(id: ID!): Actor
}

type Mutation {
  createMovie(id: ID!, title: String!, year: Int!, directorId: ID!, actorIds: [ID!]!): Movie!
  updateMovie(id: ID!, title: String, year: Int, directorId: ID, actorIds: [ID!]): Movie!
  deleteMovie(id: ID!): Movie
  createDirector(id: ID!, name: String!, age: Int!, isFemale: Boolean!, movieIds: [ID!]!): Director!
  updateDirector(id: ID!, name: String, age: Int, isFemale: Boolean, movieIds: [ID!]): Director!
  deleteDirector(id: ID!): Director
  createActor(id: ID!, name: String!, age: Int!, isFemale: Boolean!, movieIds: [ID!]!): Actor!
  updateActor(id: ID!, name: String, age: Int, isFemale: Boolean, movieIds: [ID!]): Actor!
  deleteActor(id: ID!): Actor
}

type Subscription {
  movieAdded: Movie
  directorAdded: Director
  actorAdded: Actor
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}