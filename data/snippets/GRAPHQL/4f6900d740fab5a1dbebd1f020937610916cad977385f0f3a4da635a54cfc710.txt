# Schema Definition Language (SDL)

# Creating a GraphQL Schema and defining types

type Product { # Defining a type called Product
	_id: ID! # Unique identifier for each product
	name: String! # Name of the product
	description: String # Description of the product (optional)
	price: Float! # Price of the product
	category: Category! # Category of the product
	reviews: [Review] # An array of reviews for the product
}

type Category { # Defining a type called Category
	_id: ID! # Unique identifier for each category
	name: String! # Name of the category
	description: String # Description of the category (optional)
	products: [Product] # An array of products belonging to the category
}

type Review { # Defining a type called Review
	_id: ID! # Unique identifier for each review
	product: Product! # Product that the review belongs to
	rating: Int! # Rating given by the reviewer (out of 5)
	body: String # Body of the review (optional)
}

# Query and Mutation Types

type Query {
	getProductById(id: ID!): Product # Query to get a product by its id
	getProducts: [Product] # Query to get all products
	getCategoryById(id: ID!): Category # Query to get a category by its id
	getCategories: [Category] # Query to get all categories
	getReviewsByProductId(productId: ID!): [Review] # Query to get all reviews for a product
}

type Mutation {
	addProduct(name: String!, description: String, price: Float!, category: ID!): Product # Mutation to add a new product
	addCategory(name: String!, description: String): Category # Mutation to add a new category
	addReview(product: ID!, rating: Int!, body: String): Review # Mutation to add a new review for a product
}

# Creating a GraphQL Schema with SDL

schema { # Defining the root query and mutation types
	query: Query
	mutation: Mutation
}