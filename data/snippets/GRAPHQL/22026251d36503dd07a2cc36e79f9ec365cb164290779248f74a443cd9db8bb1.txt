// Define a schema and types
const { ApolloServer, gql } = require('apollo-server');
const typeDefs = gql`
  type User {
    id: ID!
    username: String
    age: Int
  }

  type Post {
    id: ID!
    title: String!
    content: String!
    author: User!
  }

  type Query {
    post(id: ID!): Post
    user(id: ID!): User
    postsByUser(username: String!): [Post]
  }

  type Mutation {
    addPost(title: String!, content: String!, authorId: ID!): Post
    updateUser(id: ID!, username: String, age: Int): User
  }
`;

// Define resolvers
const resolvers = {
  Query: {
    post: (parent, args, context) => {
      const { id } = args;

      // TODO: Retrieve post from database using id

      return {
        id,
        title: 'Example Post',
        content: 'This is an example post generated with GraphQL.',
        author: {
          id: 'user1',
          username: 'exampleuser',
          age: 25,
        },
      };
    },
    user: (parent, args, context) => {
      const { id } = args;

      // TODO: Retrieve user from database using id

      return {
        id,
        username: 'exampleuser',
        age: 25,
      };
    },
    postsByUser: (parent, args, context) => {
      const { username } = args;

      // TODO: Retrieve posts from database for user with given username

      return [
        {
          id: 'post1',
          title: 'Example Post 1',
          content: 'This is the first example post for the user.',
          author: {
            id: 'user1',
            username,
            age: 25,
          },
        },
        {
          id: 'post2',
          title: 'Example Post 2',
          content: 'This is the second example post for the user.',
          author: {
            id: 'user1',
            username,
            age: 25,
          },
        },
      ];
    },
  },
  Mutation: {
    addPost: (parent, args, context) => {
      const { title, content, authorId } = args;

      // TODO: Create new post in database with given title, content, and authorId

      return {
        id: 'newpost1',
        title,
        content,
        author: {
          id: authorId,
          username: 'exampleuser',
          age: 25,
        },
      };
    },
    updateUser: (parent, args, context) => {
      const { id, username, age } = args;

      // TODO: Update user in database with given id, username, and age

      return {
        id,
        username,
        age,
      };
    },
  },
};

// Create server and set context
const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: ({ req }) => ({ req }),
});

// Start server
server.listen().then(({ url }) => {
  console.log(`Server started at ${url}`);
});