// Schema Definition Language
// Defining an object type
type User {
  id: ID!
  name: String
  age: Int
  email: String!
}

// Defining a query type
type Query {
  getUser(id: ID!): User
  getUsersWithAge(age: Int): [User]
}

// Defining a mutation type
type Mutation {
  addUser(name: String!, email: String!, age: Int!): User!
  updateUser(id: ID!, name: String, email: String, age: Int): User!
  deleteUser(id: ID!): User!
}

// Defining a subscription type
type Subscription {
  userCreated: User
}

// Resolvers
const resolvers = {
  Query: {
    getUser: (parent, args) => {
      // Retrieve user from database based on the id argument
      // Return the user as a JSON object
    },
    getUsersWithAge: (parent, args) => {
      // Retrieve all users with the specified age from database
      // Return an array of users as JSON objects
    }
  },
  Mutation: {
    addUser: (parent, args) => {
      // Create a new user with the provided arguments and store it in the database
      // Return the newly created user as a JSON object
    },
    updateUser: (parent, args) => {
      // Update the specified user in the database with the provided arguments
      // Return the updated user as a JSON object
    },
    deleteUser: (parent, args) => {
      // Delete the specified user from the database
      // Return the deleted user as a JSON object
    },
  },
  Subscription: {
    userCreated: {
      subscribe: () => {
        // Set up a subscription to listen for new user creations
        // Return a newly created user as a subscription payload
      }
    }
  }
}

// Sample query
query getUser($id: ID!) {
  getUser(id: $id) {
    id
    name
    age
    email
  }
}