const { ApolloServer, gql } = require('apollo-server');

// Define schema and resolvers using the gql tag
const typeDefs = gql`
# Represents an User object
type User {
    id: ID!
    name: String!
    age: Int!
    posts: [Post!]!
}

# Represents a Post object
type Post {
    id: ID!
    title: String!
    content: String!
    author: User!
}

# Root Query to fetch data
type Query {
    users: [User!]!
    posts: [Post!]!
}

# Mutation to create a new post
type Mutation {
    createPost(title: String!, content: String!, authorId: ID!): Post!
}

// Resolvers for Query and Mutation
const resolvers = {
    Query: {
        users: () => { /* Logic to fetch all users */ },
        posts: () => { /* Logic to fetch all posts */ }
    },
    Mutation: {
        createPost: (parent, args) => {
            // Logic to create new post with given arguments
        }
    },
    User: {
        posts: (parent) => { /* Logic to fetch posts by user id */ }
    },
    Post: {
        author: (parent) => { /* Logic to fetch author of a post based on authorId */ }
    }
}

// Create Apollo Server and pass in schema and resolvers
const server = new ApolloServer({ typeDefs, resolvers });

// Run server with given port
server.listen({ port: 4000 }).then(({ url }) => {
    console.log(`GraphQL server running at ${url}`);
});