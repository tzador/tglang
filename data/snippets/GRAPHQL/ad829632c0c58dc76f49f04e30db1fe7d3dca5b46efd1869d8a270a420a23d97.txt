type Query { // creates a GraphQL query object
  user(id: ID!): User // specifies a query field called "user" that takes in an ID as an argument and returns a "User" type
  posts: [Post!]! // specifies a query field called "posts" that returns an array of "Post" type with non-null values
}

type User { // creates a User type
  id: ID! // defines a required "id" field of type ID (a unique identifier)
  name: String! // defines a required "name" field of type String
  email: String! // defines a required "email" field of type String
  posts: [Post!] // defines an array field called "posts" that returns a "Post" type with non-null values
}

type Post { // creates a Post type
  id: ID! // defines a required "id" field of type ID
  title: String! // defines a required "title" field of type String
  body: String! // defines a required "body" field of type String
  author: User! // defines a required "author" field of type User
  comments: [Comment!] // defines an array field called "comments" that returns a "Comment" type
}

type Comment { // creates a Comment type
  id: ID! // defines a required "id" field of type ID
  body: String! // defines a required "body" field of type String
  author: User! // defines a required "author" field of type User
  post: Post! // defines a required "post" field of type Post
}

type Mutation { // creates a GraphQL mutation object
  createUser(name: String!, email: String!): User // specifies a mutation field called "createUser" that takes in name and email arguments and returns a "User" type
  createPost(title: String!, body: String!, authorId: ID!): Post // specifies a mutation field called "createPost" that takes in title, body, and authorId arguments and returns a "Post" type
  createComment(body: String!, authorId: ID!, postId: ID!): Comment // specifies a mutation field called "createComment" that takes in body, authorId, and postId arguments and returns a "Comment" type
}