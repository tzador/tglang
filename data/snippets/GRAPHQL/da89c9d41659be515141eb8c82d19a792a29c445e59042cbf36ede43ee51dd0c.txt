"use strict";

import { GraphQLScalarType } from 'graphql';
import { Kind } from 'graphql/language';

// Define custom scalar type
const CustomScalarType = new GraphQLScalarType({
  name: 'CustomScalarType',
  description: 'Custom scalar type that returns the input string in all caps',
  serialize(value) {
    if (typeof value !== 'string') {
      throw new Error(`Input value cannot be converted to string`);
    }
    return value.toUpperCase();
  },
  parseValue(value) {
    if (typeof value !== 'string') {
      throw new Error(`Input value must be a string`);
    }
    return value.toUpperCase();
  },
  parseLiteral(ast) {
    if (ast.kind !== Kind.STRING) {
      throw new Error(`Can only parse string values`);
    }
    return ast.value.toUpperCase();
  }
});

// Define custom query
const CustomQuery = `
  query getCustomData($name: String, $age: Int, $isMarried: Boolean!) {
    customData(name: $name, age: $age, isMarried: $isMarried) {
      id
      name
      age
      dateOfBirth
      isMarried
      favoriteHobbies
    }
  }
`;

// Define custom mutation
const CustomMutation = `
  mutation updateCustomData($id: ID!, $hobbies: [String], $newHobby: String) {
    updateCustomData(id: $id, hobbies: $hobbies, newHobby: $newHobby) {
      id
      name
      age
      dateOfBirth
      isMarried
      favoriteHobbies
    }
  }
`;

// Define custom subscription
const CustomSubscription = `
  subscription getCustomUpdates {
    customUpdates {
      id
      name
      age
      dateOfBirth
      isMarried
      favoriteHobbies
    }
  }
`;

// Create schema
const schema = `
  type Query {
    customData(name: String, age: Int, isMarried: Boolean!): CustomScalarType
  }

  type Mutation {
    updateCustomData(id: ID!, hobbies: [String], newHobby: String): CustomScalarType
  }

  type Subscription {
    customUpdates: CustomScalarType
  }

  schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
  }
`;

// Export custom scalar type, query, mutation, subscription, and schema
export { CustomScalarType, CustomQuery, CustomMutation, CustomSubscription, schema };