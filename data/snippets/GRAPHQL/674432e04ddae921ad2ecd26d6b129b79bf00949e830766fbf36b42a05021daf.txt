// This is a Graphql schema file that defines the structure and types of data for a blog application

type Post {
  _id: ID!
  title: String!
  body: String!
  author: User!
  comments: [Comment!]!
  likes: Int!
}

type User {
  _id: ID!
  name: String!
  email: String!
  password: String!
  posts: [Post!]!
  followers: [User!]!
  following: [User!]!
}

type Comment {
  _id: ID!
  body: String!
  author: User!
  post: Post!
  likes: Int!
}

// Queries for retrieving data

type Query {
  getPosts: [Post!]!
  getPostById(postId: ID!): Post!
  getUsers: [User!]!
  getUserById(userId: ID!): User!
}

// Mutations for creating, updating, and deleting data

type Mutation {
  createPost(title: String!, body: String!): Post!
  updatePost(postId: ID!, title: String, body: String): Post!
  deletePost(postId: ID!): Post!
  createUser(name: String!, email: String!, password: String!): User!
  updateUser(userId: ID!, name: String, email: String, password: String): User!
  deleteUser(userId: ID!): User!
  createComment(postId: ID!, body: String!): Comment!
  updateComment(commentId: ID!, body: String!): Comment!
  deleteComment(commentId: ID!): Comment!
}

// Subscription for real-time updates

type Subscription {
  postAdded: Post!
  postUpdated: Post!
  postDeleted: Post!
  userAdded: User!
  userUpdated: User!
  userDeleted: User!
  commentAdded: Comment!
  commentUpdated: Comment!
  commentDeleted: Comment!
}

// Example query for retrieving a post and its comments

query {
  getPostById(postId: "123456") {
    _id
    title
    body
    author {
      _id
      name
      posts {
        _id
        title
        body
        comments {
          _id
          body
          author {
            _id
            name
          }
        }
      }
      following {
        _id
        name
      }
    }
    likes
    comments {
      _id
      body
      author {
        _id
        name
      }
      likes
    }
  }
}