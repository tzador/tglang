# Define a type called User
type User {
    id: ID!
    name: String
    age: Int
    email: String!
}

# Define a type called Book
type Book {
    id: ID!
    title: String
    author: String
    genre: String
}

# Define a query called user, which takes in an ID and returns a User object
type Query {
    user(id: ID!): User
}

# Define a query called books, which takes in a String and returns a list of Book objects
type Query {
    books(genre: String!): [Book]
}

# Define a mutation called addUser, which takes in variables for name, age, and email and returns a User object
type Mutation {
    addUser(name: String!, age: Int!, email: String!): User
}

# Define a mutation called addBook, which takes in variables for title, author, and genre and returns a Book object
type Mutation {
    addBook(title: String!, author: String!, genre: String!): Book
}

# Define a subscription called newUser, which returns a User object whenever a new user is added
type Subscription {
    newUser: User
}

# Define a subscription called newBook, which returns a Book object whenever a new book is added
type Subscription {
    newBook: Book
}

# Define a schema that combines the Query, Mutation, and Subscription types
schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}