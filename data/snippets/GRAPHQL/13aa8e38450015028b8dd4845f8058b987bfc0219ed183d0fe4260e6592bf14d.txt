// Define the user schema with required and optional fields
type User {
  id: ID! # unique ID for the user
  name: String! # user's name
  age: Int! # user's age
  email: String! # user's email address
  address: Address # user's address, optional field
}

// Define the address schema with required fields
type Address {
  street: String! # street name
  city: String! # city name
  state: String! # state name
  country: String! # country name
  zipCode: String! # zip code
}

// Define the query type for fetching user data
type Query {
  // query for fetching a single user by ID
  user(id: ID!): User 
  // query for fetching a list of users, with optional search parameters
  users(name: String, age: Int, city: String, state: String, country: String): [User!]! 
}

// Define the mutation type for creating and updating user data
type Mutation {
  // mutation for creating a new user with required fields
  createUser(name: String!, age: Int!, email: String!): User!
  // mutation for updating an existing user by ID, with optional fields
  updateUser(id: ID!, name: String, age: Int, email: String, address: Address): User!
}

// Define the subscription type for real-time updates on user data
type Subscription {
  // subscription for receiving real-time updates when a user is created
  userAdded: User!
  // subscription for receiving real-time updates when a user is updated
  userUpdated: User!
}