# Graphql schema for a blog post

type Post {
  id: ID!
  title: String!
  author: User!
  publishedAt: Date!
  content: String!
  tags: [String!]!
  comments: [Comment!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  user: User!
  post: Post!
  content: String!
  createdAt: Date!
}

# Queries and mutations

# Get a single post by ID
query GetPost($id: ID!) {
  post(id: $id) {
    id
    title
    author {
      name
      email
    }
    publishedAt
    content
    tags
    comments {
      content
      createdAt
    }
  }
}

# Get all posts
query AllPosts {
  posts {
    id
    title
    author {
      name
      email
    }
    publishedAt
    content
    tags
    comments {
      content
      createdAt
    }
  }
}

# Create a new post
mutation CreatePost($title: String!, $author: ID!, $content: String!, $tags: [String!]!) {
  createPost(input: { 
    title: $title,
    author: $author,
    content: $content,
    tags: $tags
  }) {
    id
    title
    author {
      name
      email
    }
    publishedAt
    content
    tags
    comments {
      content
      createdAt
    }
  }
}

# Update a post by ID
mutation UpdatePost($id: ID!, $title: String, $content: String, $tags: [String!]) {
  updatePost(id: $id, input: {
    title: $title,
    content: $content,
    tags: $tags
  }) {
    id
    title
    author {
      name
      email
    }
    publishedAt
    content
    tags
    comments {
      content
      createdAt
    }
  }
}

# Delete a post by ID
mutation DeletePost($id: ID!) {
  deletePost(id: $id)
}

# Get all posts written by a specific user
query PostsByUser($userId: ID!) {
  postsByUser(userId: $userId) {
    id
    title
    publishedAt
  }
}

# Get all comments for a specific post
query PostComments($postId: ID!) {
  postComments(postId: $postId) {
    id
    user {
      name
      email
    }
    content
    createdAt
  }
}

# Add a new comment to a post
mutation AddComment($user: ID!, $post: ID!, $content: String!) {
  addComment(input: {
    user: $user,
    post: $post,
    content: $content
  }) {
    id
    user {
      name
      email
    }
    post {
      title
      publishedAt
    }
    content
    createdAt
  }
}

# Delete a comment by ID
mutation DeleteComment($id: ID!) {
  deleteComment(id: $id)
}