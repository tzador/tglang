// Define a type for a user
type User implements Node () {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
}

// Define a type for a post
type Post implements Node () {
  id: ID!
  title: String!
  content: String!
  author: User!
  comments: [Comment!]!
}

// Define a type for a comment
type Comment implements Node () {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

// Define a query to get all posts
query AllPosts() {
  posts {
    id
    title
    content
    author {
      name
    }
    comments {
      text
    }
  }
}

// Define a query to get a specific post by ID
query PostByID($id: ID!) {
  post(id: $id) {
    id
    title
    content
    author {
      name
      email
    }
    comments {
      text
      author {
        name
      }
    }
  }
}

// Define a mutation to create a new post
mutation CreatePost($title: String!, $content: String!, $authorID: ID!) {
  createPost(title: $title, content: $content, authorID: $authorID) {
    id
    title
    content
    author {
      name
    }
  }
}

// Define a mutation to update a post
mutation UpdatePost($id: ID!, $title: String, $content: String) {
  updatePost(id: $id, title: $title, content: $content) {
    id
    title
    content
  }
}

// Define a mutation to delete a post
mutation DeletePost($id: ID!) {
  deletePost(id: $id) {
    id
    title
    content
    author {
      name
      email
    }
    comments {
      text
      author {
        name
      }
    }
  }
}

// Define a subscription to get real-time updates on new posts
subscription PostAdded {
  postAdded {
    id
    title
    content
    author {
      name
      email
    }
    comments {
      text
      author {
        name
      }
    }
  }
}

// Define a subscription to get real-time updates on updated posts
subscription PostUpdated {
  postUpdated {
    id
    title
    content
    author {
      name
      email
    }
    comments {
      text
      author {
        name
      }
    }
  }
}

// Define a subscription to get real-time updates on deleted posts
subscription PostDeleted {
  postDeleted {
    id
    title
    content
    author {
      name
      email
    }
    comments {
      text
      author {
        name
      }
    }
  }
}