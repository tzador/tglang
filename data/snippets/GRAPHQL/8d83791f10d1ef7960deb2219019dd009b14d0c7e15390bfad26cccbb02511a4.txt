const typeDefs = `
      type Book {
        name: String
        author: Author
        genre: String
        pages: Int
        published: Int
      }

      type Author {
        name: String
        nationality: String
        books: [Book]
      }

      type Query {
        books: [Book]
        authors: [Author]
      }

      type Mutation {
        addBook(name: String, author: String, genre: String, pages: Int, published: Int): Book
        deleteBook(name: String, author: String, genre: String, pages: Int, published: Int): Book
        addAuthor(name: String, nationality: String): Author
      }

      schema {
        query: Query
        mutation: Mutation
      }
    `;

    const authors = [
      {
        name: "J.K. Rowling",
        nationality: "British",
        books: [
          { 
            name: "Harry Potter and the Philosopher's Stone", 
            genre: "Fantasy",
            pages: 336,
            published: 1997
          },
          { 
            name: "Harry Potter and the Chamber of Secrets", 
            genre: "Fantasy",
            pages: 352,
            published: 1998
          },
          { 
            name: "Harry Potter and the Prisoner of Azkaban", 
            genre: "Fantasy",
            pages: 448,
            published: 1999
          }
        ]
      },
      {
        name: "J.R.R. Tolkien",
        nationality: "British",
        books: [
          { 
            name: "The Hobbit", 
            genre: "Fantasy",
            pages: 304,
            published: 1937
          },
          { 
            name: "The Lord of the Rings", 
            genre: "Fantasy",
            pages: 1008,
            published: 1954
          },
          { 
            name: "The Silmarillion", 
            genre: "Fantasy",
            pages: 365,
            published: 1977
          }
        ]
      }
    ];

    const resolvers = {
      Query: {
        books: () => {
          return authors.map(author => author.books).flat();
        },
        authors: () => {
          return authors;
        }
      },
      Mutation: {
        addBook: (parent, args) => {
          const author = authors.find(author => author.name === args.author);
          const newBook = {
            name: args.name,
            genre: args.genre,
            pages: args.pages,
            published: args.published
          };
          author.books.push(newBook);
          return newBook;
        },
        deleteBook: (parent, args) => {
          const author = authors.find(author => author.name === args.author);
          const index = author.books.findIndex(book => book.name === args.name);
          const deletedBook = author.books.splice(index, 1);
          return deletedBook[0];
        },
        addAuthor: (parent, args) => {
          const newAuthor = {
            name: args.name,
            nationality: args.nationality,
            books: []
          };
          authors.push(newAuthor);
          return newAuthor;
        }
      }
    };

    const { ApolloServer, gql } = require('apollo-server');
    const server = new ApolloServer({ typeDefs, resolvers });
    server.listen().then(({ url }) => {
      console.log(`Server ready at ${url}`);
    });