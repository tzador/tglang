# Define a GraphQL schema
const { buildSchema } = require('graphql');

const schema = buildSchema(`
  type Query {
    post(id: ID!): Post
    user(id: ID!): User
    users(limit: Int): [User]
  }

  type Mutation {
    addPost(title: String!, content: String!, userId: ID!): Post
    addUser(name: String!, age: Int!): User
  }

  type Post {
    id: ID!
    title: String!
    content: String!
    user: User!
  }

  type User {
    id: ID!
    name: String!
    age: Int!
    posts: [Post]
  }
`);

# Define a resolver to handle queries and mutations
const resolvers = {
  # Resolver for Query.post
  post: ({ id }) => {
    # Retrieve post with given id from database
    return getPostById(id);
  },
  # Resolver for Query.user
  user: ({ id }) => {
    # Retrieve user with given id from database
    return getUserById(id);
  },
  # Resolver for Query.users
  users: ({ limit }) => {
    # Retrieve all users from database, limit to given number if provided
    if (limit) {
      return getUsers().slice(0, limit);
    }
    return getUsers();
  },
  # Resolver for Mutation.addPost
  addPost: ({ title, content, userId }) => {
    # Create new post with given title, content, and userId
    const post = createPost(title, content, userId);
    # Add post to user's list of posts
    const user = getUserById(userId);
    user.posts.push(post);
    return post;
  },
  # Resolver for Mutation.addUser
  addUser: ({ name, age }) => {
    # Create new user with given name and age
    const user = createUser(name, age);
    return user;
  }
};

# Create a GraphQL server with schema and resolvers
const express = require('express');
const { graphqlHTTP } = require('express-graphql');

const app = express();
app.use('/graphql', graphqlHTTP({
  schema,
  rootValue: resolvers,
  graphiql: true, # Enable GraphiQL interface for testing
}));

# Start server on specified port
app.listen(4000);