type Query { //creating the query type
  users(id: ID, name: String) [User] //defining the fields and their types for a 'users' query 
  //the 'users' query takes in an id argument of type ID and a name argument of type String, and returns an array of 'User' objects
  posts(userID: ID, limit: Int, offset: Int) [Post] //defining the fields and their types for a 'posts' query
  //the 'posts' query takes in a userID argument of type ID, a limit argument of type Int, and an offset argument of type Int, and returns an array of 'Post' objects
}

type User { //creating the User type
  id: ID! //defining the fields and their types for the 'User' type
  //the 'id' field is required and of type ID
  name: String
  //the 'name' field is optional and of type String
  age: Int!
  //the 'age' field is required and of type Int
  posts: [Post]
  //the 'posts' field is optional and of type array of 'Post' objects
}

type Post { //creating the Post type
  id: ID!
  title: String
  content: String!
  author: User!
  //the 'author' field is required and of type 'User', establishing a one-to-many relationship between users and posts
  comments: [Comment]
  //the 'comments' field is optional and of type array of 'Comment' objects
}

type Comment { //creating the Comment type
  id: ID!
  text: String!
  author: User!
  //the 'author' field is required and of type 'User', establishing a one-to-many relationship between users and comments
}