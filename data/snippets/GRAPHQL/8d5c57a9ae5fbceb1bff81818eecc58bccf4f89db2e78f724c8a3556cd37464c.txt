# Import necessary modules
import graphql
from graphql import (
    GraphQLSchema,
    GraphQLObjectType,
    GraphQLField,
    GraphQLString,
    GraphQLInt,
    GraphQLList
)

#Define object types
AuthorType = GraphQLObjectType(
    name='Author',
    fields={
        'id': GraphQLField(
            type=GraphQLInt,
            description='The ID of the author.'
        ),
        'name': GraphQLField(
            type=GraphQLString,
            description='The name of the author.'
        ),
        'books': GraphQLField(
            type=GraphQLList(BookType),
            description='The books written by the author.',
            resolve=lambda obj, info: get_books_by_author(obj['id'])
        )
    }
)

BookType = GraphQLObjectType(
    name='Book',
    fields={
        'id': GraphQLField(
            type=GraphQLInt,
            description='The ID of the book.'
        ),
        'title': GraphQLField(
            type=GraphQLString,
            description='The title of the book.'
        ),
        'author': GraphQLField(
            type=AuthorType,
            description='The author of the book.',
            resolve=lambda obj, info: get_author(obj['author_id'])
        )
    }
)

#Define root query type
QueryType = GraphQLObjectType(
    name='Query',
    fields={
        'authors': GraphQLField(
            type=GraphQLList(AuthorType),
            description='List of all authors.',
            resolve=lambda root, info: get_all_authors()
        ),
        'books': GraphQLField(
            type=GraphQLList(BookType),
            description='List of all books.',
            resolve=lambda root, info: get_all_books()
        )
    }
)

#Define schema
schema = GraphQLSchema(
    query=QueryType
)

#Execute query
result = schema.execute('{ authors { id, name, books { id, title } } }')  #get all authors and their books

#Print result
print(result.data)