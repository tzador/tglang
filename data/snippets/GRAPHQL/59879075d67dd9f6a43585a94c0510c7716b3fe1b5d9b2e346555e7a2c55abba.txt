type Query {
  user(id: Int!): User!
  post(id: Int!): Post!
  comments(filter: CommentFilter): [Comment!]!
}

type User {
  id: Int!
  name: String!
  age: Int!
  email: String!
  posts: [Post!]!
  followers: [User!]!
}

type Post {
  id: Int!
  title: String!
  content: String!
  author: User!
  comments: [Comment!]!
}

input CommentFilter {
  post: Int
  author: String
}

type Comment {
  id: Int!
  content: String!
  post: Post!
  author: User!
}

type Mutation {
  createPost(title: String!, content: String!, authorId: Int!): Post!
  createComment(content: String!, postId: Int!, authorId: Int!): Comment!
  followUser(userId: Int!, followerId: Int!): User!
}

enum Gender {
  MALE
  FEMALE
}

interface Person {
  name: String!
  age: Int!
  gender: Gender!
}

type User implements Person {
  id: Int!
  name: String!
  age: Int!
  email: String!
  gender: Gender!
  posts: [Post!]!
  followers: [User!]!
}

type Post implements Person {
  id: Int!
  title: String!
  content: String!
  author: User!
  gender: Gender!
  comments: [Comment!]!
}

type Comment implements Person {
  id: Int!
  content: String!
  post: Post!
  author: User!
  gender: Gender!
}