type Query {
  users(
    ids: [ID] # array of user IDs to be queried
    firstName: String # first name of user
    lastName: String # last name of user
    email: String # email address of user
    age: Int # age of user
    isAdmin: Boolean # flag indicating if user is an admin
    orderBy: UserOrderByInput # input object for sorting results
    limit: Int # maximum number of results to be returned
    offset: Int # number of results to skip
  ): [User] # returns an array of user objects
}

type User {
  id: ID # unique ID for user
  firstName: String # first name of user
  lastName: String # last name of user
  email: String # email address of user
  age: Int # age of user
  isAdmin: Boolean # flag indicating if user is an admin
  profile: Profile # profile object for user
  recentPosts(
    limit: Int # maximum number of posts to be returned
    offset: Int # number of posts to skip
  ): [Post] # returns an array of recent posts made by user
}

type Profile {
  id: ID # unique ID for profile
  bio: String # user's personal bio
  gender: String # user's gender
  location: String # user's location
  avatarUrl: String # URL for user's profile avatar
}

type Post {
  id: ID # unique ID for post
  title: String # title of post
  content: String # content of post
  author: User # user object for post author
  comments(limit: Int, offset: Int): [Comment] # returns an array of comments for the post
}

type Comment {
  id: ID # unique ID for comment
  content: String # content of comment
  author: User # user object for comment author
  post: Post # post object for comment
  createdAt: String # timestamp for when comment was created
  updatedAt: String # timestamp for when comment was last updated
}

input UserOrderByInput {
  field: UserOrderField! # field to sort results by
  order: OrderType! # ascending or descending order
}

enum UserOrderField {
  FIRST_NAME
  LAST_NAME
  EMAIL
  AGE
  IS_ADMIN
}

enum OrderType {
  ASC
  DESC
}