# This is a program that implements a binary search algorithm
# It takes in a sorted list of numbers and a target value
# It returns the index of the target value if found, otherwise it returns -1

proc binarySearch {list target} {
    set low 0
    set high [expr [llength $list] - 1]

    while {$low <= $high} {
        # Find the middle index of the list
        set mid [expr ($low + $high) / 2]

        # Check if the target value is equal to the value at the middle index
        if {$target == [lindex $list $mid]} {
            # Return the index of the target value
            return $mid
        }
        # If the target value is less than the value at the middle index,
        # set the new high index to the index before the middle index
        elseif {$target < [lindex $list $mid]} {
            set high [expr $mid - 1]
        }
        # Otherwise, set the new low index to the index after the middle index
        else {
            set low [expr $mid + 1]
        }
    }

    # Return -1 if the target value is not found
    return -1
}

# Example usage of the binarySearch function
set numbers {1 3 5 7 9 11}
set target 7

set result [binarySearch $numbers $target]
if {$result >= 0} {
    # Print the index of the target value if found
    puts "Target value $target is located at index $result"
}
else {
    # Print a message if the target value is not found
    puts "Target value $target is not found in the list"
}