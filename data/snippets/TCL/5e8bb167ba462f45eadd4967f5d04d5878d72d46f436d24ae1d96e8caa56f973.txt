# This is a code snippet for a simple Tic-Tac-Toe game in TCL

# Function to print the game board
proc print_board {board} {
    puts "-------------"
    puts "| ${board(1)} | ${board(2)} | ${board(3)} |"
    puts "-------------"
    puts "| ${board(4)} | ${board(5)} | ${board(6)} |"
    puts "-------------"
    puts "| ${board(7)} | ${board(8)} | ${board(9)} |"
    puts "-------------" 
}

# Function to check for a winning combination
proc check_win {board} {
    # Vertical combinations
    if {[expr $board(1) eq $board(4) && $board(4) eq $board(7)]} {
        return $board(1)
    } elseif {[expr $board(2) eq $board(5) && $board(5) eq $board(8)]} {
        return $board(2)
    } elseif {[expr $board(3) eq $board(6) && $board(6) eq $board(9)]} {
        return $board(3)
    }
    # Horizontal combinations
    if {[expr $board(1) eq $board(2) && $board(2) eq $board(3)]} {
        return $board(1)
    } elseif {[expr $board(4) eq $board(5) && $board(5) eq $board(6)]} {
        return $board(4)
    } elseif {[expr $board(7) eq $board(8) && $board(8) eq $board(9)]} {
        return $board(7)
    }
    # Diagonal combinations
    if {[expr $board(1) eq $board(5) && $board(5) eq $board(9)]} {
        return $board(1)
    } elseif {[expr $board(3) eq $board(5) && $board(5) eq $board(7)]} {
        return $board(3)
    }
    # If all spaces are filled, return a tie
    if {[set all_full 1]} {
        foreach space [array names board] {
            if {[set board($space) eq " "]} {
                set all_full 0
            }
        }
        if {$all_full} {
            return "Tie"
        }
    }
    # If no winning combination is found, return an empty string
    return ""
}

# Main game logic
proc play_tic_tac_toe {} {
    # Define the game board as an array
    array set board {
        1 " "
        2 " "
        3 " "
        4 " "
        5 " "
        6 " "
        7 " "
        8 " "
        9 " "
    }
    # Player 1 starts with X
    set player "X"
    # Print initial game board
    puts "Welcome to Tic-Tac-Toe!"
    puts "Player 1: X"
    puts "Player 2: O"
    print_board $board
    # Loop until a winning combination is found or all spaces are filled
    while {[check_win $board] eq ""} {
        # Get player's move
        puts "Player $player's turn."
        set valid 0
        while {!$valid} {
            puts "Enter a number 1-9 to place your symbol: "
            gets stdin space
            if {[string is integer -strict $space] && [set space [string trim $space]] &&
                    $space >= 1 && $space <= 9 && [set board($space) eq " "]} {
                set valid 1
            } else {
                puts "Invalid move, please try again."
                puts "Make sure you are entering a number 1-9 and the space is not taken."
            }
        }
        # Place player's symbol on the game board
        set board($space) $player
        # Print updated game board
        print_board $board
        # Switch to the other player
        if {$player eq "X"} {
            set player "O"
        } else {
            set player "X"
        }
    }
    # Print game outcome
    if {[check_win $board] eq "Tie"} {
        puts "It's a tie!"
    } else {
        puts "Player [check_win $board] wins!"
    }
}

# Call the game function to start the game
play_tic_tac_toe