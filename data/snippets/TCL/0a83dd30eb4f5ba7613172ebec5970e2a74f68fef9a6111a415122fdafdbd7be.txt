# This is a commented line
# This is another commented line

# In TCL, variables can be declared using the "set" command
set variable1 123
set variable2 "Hello World"

# Conditionals in TCL are written using the "if" statement
if {$variable1 == 123} {
    # This code will only execute if condition is true
    puts "Variable1 is equal to 123"
} else {
    # This code will execute if condition is false
    puts "Variable1 is not equal to 123"
}

# TCL also has the "foreach" command for iterating over a list
# In this example, we create a list of numbers
set numbers {1 2 3 4 5 6 7 8 9 10}
# We loop through the list and print each number
foreach num $numbers {
    puts $num
}

# TCL also supports the use of procedures for code reusability
# Here, we define a procedure called "calculateSum" which takes in two numbers and returns their sum
proc calculateSum {a b} {
    set sum [expr $a + $b]
    return $sum
}

# We call the procedure and print the result
set result [calculateSum 5 10]
puts "The result of the calculation is $result"

# TCL also has support for arrays
# We can create an array and assign values to it
set fruits(arr) {"Apple" "Banana" "Cherry"}
# We can access the values in the array using their index
puts "The first fruit is $fruits(0)"

# Loops can also be done using the "while" command
set i 0
while {$i < 5} {
    puts "$i is less than 5"
    set i [expr $i + 1]
}

# We can also load and use external files using the "source" command
source "externalfile.tcl"

# And finally, we can use the "catch" command to handle errors and exceptions
catch {
    set x 10
    set y 0
    set z [expr $x / $y]
}
# If an error occurs, it will be caught and printed, otherwise the code will continue to execute
puts "The value of z is $z"