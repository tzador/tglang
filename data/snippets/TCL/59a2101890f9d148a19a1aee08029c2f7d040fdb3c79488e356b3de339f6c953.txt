# This is a comment in TCL
# Define a procedure that takes in two arguments
proc addTwo { num1 num2 } {
    # Convert the inputs to integers
    set int1 [scan $num1 %d]
    set int2 [scan $num2 %d]
    # Add the numbers together
    set result [expr $int1 + $int2]
    # Return the result
    return $result
}

# Call the addTwo procedure with input values and print the result
puts [addTwo 5 10] ; # Output: 15
puts [addTwo 123 321] ; # Output: 444

# Create a variable and assign the result of calling the procedure to it
set sum [addTwo 7 3]

# Use conditional statements to check if the result is greater than 10, less than 10, or equal to 10
if {$sum > 10} {
    puts "The sum is greater than 10"
} elseif {$sum < 10} {
    puts "The sum is less than 10"
} else {
    puts "The sum is equal to 10"
}

# Output: The sum is greater than 10

# Define a list with multiple values
set fruits {"apple" "orange" "banana" "grape"}

# Use a loop to iterate through the list and print each value
foreach fruit $fruits {
    puts $fruit
}

# Output: apple
# orange
# banana
# grape

# Create a dictionary with key-value pairs
set car_colors {
    "Toyota" "Red"
    "Honda" "Blue"
    "Ford" "Green"
}

# Use a loop to iterate through the dictionary and print each key-value pair
foreach {make color} $car_colors {
    puts "$make has a $color car"
}

# Output: Toyota has a Red car
# Honda has a Blue car
# Ford has a Green car

# Define a regular expression to match a phone number with a specific format
set phone_regex {^\([0-9]{3}\) [0-9]{3}-[0-9]{4}$}

# Create a string with a phone number
set phone_number "(123) 456-7890"

# Use the regexp command to check if the phone number matches the regular expression
if {[regexp $phone_regex $phone_number]} {
    puts "Valid phone number"
} else {
    puts "Invalid phone number"
}

# Output: Valid phone number