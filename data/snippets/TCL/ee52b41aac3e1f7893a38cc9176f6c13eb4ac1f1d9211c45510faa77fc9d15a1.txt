# This code snippet sorts a list using the quicksort algorithm
# First, define a proc to handle partitioning
proc partition {list first last} {
    set pivot [lindex $list $last] # Choose pivot as last element
    set i [expr $first - 1] # Initialize index i
    for {set j $first} {$j < $last} {incr j} { # Loop from first element to pivot's index
        if {[lindex $list $j] <= $pivot} { # Compare element to pivot
            set i [expr $i + 1] # Increment i 
            set temp [lindex $list $i] # Swap element with value at i
            lset list $i [lindex $list $j]
            lset list $j $temp
        }
    }
    set temp [lindex $list [expr $last]] # Swap value at i + 1 with pivot
    lset list [expr $i + 1] $pivot
    lset list $last $temp
    return [expr $i + 1] # Return updated index of pivot
}

# Define the quicksort proc
proc quicksort {list first last} {
    if {$first < $last} { # Check base case
        set p [partition $list $first $last] # Partition the list using pivot
        quicksort $list $first [expr $p - 1] # Recursively quicksort left subarray
        quicksort $list [expr $p + 1] $last # Recursively quicksort right subarray
    }
}

# Create a list and call quicksort proc
set list {5 2 7 1 8 3}
quicksort $list 0 [expr [llength $list] - 1] 
puts $list # Outputs sorted list: 1 2 3 5 7 8