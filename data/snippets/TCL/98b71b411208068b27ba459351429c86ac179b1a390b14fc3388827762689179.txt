# This is a code snippet in TCL that generates a fibonacci sequence and calculates the sum of the sequence

proc fibonacci {n} { # define a procedure called "fibonacci" with parameter n
    set a 0 # initialize variable a to 0
    set b 1 # initialize variable b to 1
    for {set i 0} {$i < $n} {incr i} { # iterate from 0 to n
        puts $a # print current value of a
        set c [expr $a + $b] # calculate next value in sequence by adding a and b
        set a $b # update a to be equal to b
        set b $c # update b to be equal to next value in sequence
    }
}

set n 10 # set the value of n to 10, change this value for different sequence length
fibonacci $n # call the fibonacci procedure with n as parameter

# This is a code snippet in TCL that calculates the sum of a fibonacci sequence

proc sum_fibonacci {n} { # define a procedure called "sum_fibonacci" with parameter n
    set sum 0 # initialize variable sum to 0
    set a 0 # initialize variable a to 0
    set b 1 # initialize variable b to 1
    for {set i 0} {$i < $n} {incr i} { # iterate from 0 to n
        set c [expr $a + $b] # calculate next value in sequence by adding a and b
        set sum [expr $sum + $a] # add current value of a to sum
        set a $b # update a to be equal to b
        set b $c # update b to be equal to next value in sequence
    }
    set sum [expr $sum + $a] # add final value of a to sum
    puts "The sum of the first $n fibonacci numbers is: $sum" # print sum
}

set n 10 # set the value of n to 10, change this value for different sequence length
sum_fibonacci $n # call the sum_fibonacci procedure with n as parameter