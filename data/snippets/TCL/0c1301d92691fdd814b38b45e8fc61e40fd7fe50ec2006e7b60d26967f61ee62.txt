# This is a comment
set name "John"  ;# Set the variable 'name' to the value "John"
if {$name eq "John"} { ;# Check if the value of 'name' is "John"
    puts "Hi $name" ;# Print the string "Hi John"
} else { ;# If the value of 'name' is not "John"
    puts "Hello" ;# Print the string "Hello"
}

for {set i 0} {$i < 10} {incr i} { ;# A for loop that runs for 10 times
    puts "Number $i" ;# Print the string "Number" followed by the value of i
}

proc calculate {num1 num2 operation} { ;# Create a procedure named "calculate" that takes in two numbers and an operation
    switch $operation { ;# Perform different operations based on the value of 'operation'
        "+" { return [expr {$num1 + $num2}] } ;# If 'operation' is "+", add num1 and num2
        "-" { return [expr {$num1 - $num2}] } ;# If 'operation' is "-", subtract num1 and num2
        "*" { return [expr {$num1 * $num2}] } ;# If 'operation' is "*", multiply num1 and num2
        "/" { return [expr {$num1 / $num2}] } ;# If 'operation' is "/", divide num1 and num2
    }
}

set result [calculate 10 5 "+"] ;# Set the variable 'result' to the value returned by the "calculate" procedure
puts $result ;# Print the value of 'result'

set list {1 2 3 4 5} ;# Create a list with the values 1, 2, 3, 4, 5
foreach num $list { ;# Loop through each element in the list and store it in the variable 'num'
    puts [expr {$num * 2}] ;# Print the value of 'num' multiplied by 2
}

catch { ;# Catch any errors that may occur in the following code
    set incorrectVar "This is not a valid variable" ;# Create a variable with an incorrect variable name
}

puts "This will not print" ;# This statement will not be executed as an error has occurred