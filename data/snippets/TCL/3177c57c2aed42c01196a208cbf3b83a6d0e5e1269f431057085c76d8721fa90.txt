proc quicksort {list low high} {
    # set low (int) and high (int) to the min and max indices of the list
    # create list 'pivotList' containing the first and last element of 'list'
    set pivotList [list [lindex $list $low] [lindex $list $high]]
    # create variable 'i' to keep track of current element
    set i $low
    # create variable 'storeIndex' to keep track of where to store pivot element
    set storeIndex $low

    # while loop to iterate through list elements
    # 'while' keyword followed by boolean expression 'less than or equal to'
    while {$i <= $high} {
        # condition check, if current element less than pivot element
        # use 'less than' operator '<'
        # 'incr' function increments the value of the variable
        if { [lindex $list $i] < [lindex $pivotList 0] } {
            # swap the current element with element at storeIndex
            # 'lset' function assigns new value to list element
            # 'lindex' function returns value of specified list element
            lset list $storeIndex [lindex $list $i]
            lset list $i [lindex $list $storeIndex]
            # incr the storeIndex to maintain position of pivot element
            incr storeIndex
        }
        # increment 'i' to iterate through list
        incr i
    }
    # once all elements are compared, swap the pivot element with element at storeIndex
    # 'set' function assigns value to variable
    set storeIndex [expr {$storeIndex - 1}]
    set pivotList [lindex $list $storeIndex]
    set pivotList [lindex $list $high]
    
    # recursive calls to quicksort function on sublists
    quicksort $list $low [expr {$storeIndex - 1}];
    quicksort $list [expr {$storeIndex + 1}] $high
    # return the sorted list
    return $list
}
# usage example
# define a list 'nums'
set nums {5 3 9 1 8}
# call quicksort function on nums list
quicksort $nums 0 [expr {[llength $nums]-1}]
# output the sorted list
puts "Sorted list: $nums"