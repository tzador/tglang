proc calculateTax {income} {
    # This procedure takes in a person's income and calculates their tax owed. 
    # It uses progressive tax brackets and a flat tax rate for each bracket. 
    # Inputs:
    #   income [int] - person's income
    # Outputs:
    #   tax [double] - person's tax owed
    set tax 0.0 # initialize tax variable
    
    if {$income > 0 && $income <= 10000} {
        # tax rate for first bracket
        set tax [expr {$tax + ($income * 0.1)}] # add tax based on income in first bracket
    } elseif {$income > 10000 && $income <= 50000} {
        # tax rate for second bracket
        set tax [expr {$tax + (10000 * 0.1) + (($income - 10000) * 0.2)}] # add tax for first bracket and tax for remainder of income in second bracket
    } elseif {$income > 50000 && $income <= 100000} {
        # tax rate for third bracket
        set tax [expr {$tax + (10000 * 0.1) + (40000 * 0.2) + (($income - 50000) * 0.3)}] # add tax for first two brackets and tax for remainder of income in third bracket
    } else {
        # tax rate for fourth bracket
        set tax [expr {$tax + (10000 * 0.1) + (40000 * 0.2) + (50000 * 0.3) + (($income - 100000) * 0.4)}] # add tax for all three brackets and tax for remainder of income in fourth bracket
    }

    return $tax # return calculated tax
}

# example usage
set income 75000
set taxOwed [calculateTax $income]
puts "The tax owed for an income of $income is: $taxOwed"