proc divide {a b} {
  # This is a procedure named 'divide' with two input parameters: a and b
  # It will divide a by b and return the result
  # First, we check if b is equal to 0, if it is, throw an error
  if {$b == 0} {
    error "Cannot divide by zero"
  }

  # Determine the sign of the result based on the signs of a and b
  set sign [expr {[string index $a 0] == "-" != [string index $b 0] == "-"}]

  # Remove the signs from a and b, and convert them to integers
  set a [lindex [split $a ""] 1 end]
  set b [lindex [split $b ""] 1 end]
  set a [string toint $a]
  set b [string toint $b]

  # Divide a by b and get the quotient and remainder
  set quotient [expr {$a / $b}]
  set remainder [expr {$a % $b}]

  # If the result was supposed to be negative, make the quotient negative
  if {$sign} {
    set quotient [expr {$quotient * -1}]
  }

  # Put the signs back onto the quotient and remainder
  if {$sign && [string compare $remainder 0]} {
    set quotient "+$quotient"
    set remainder "+$remainder"
  } elseif {$sign} {
    set quotient "+$quotient"
  }

  # Return an array with the quotient and remainder
  return [list $quotient $remainder]
}

# Test cases
puts [divide "10" "2"] ; # Output: {5 0}
puts [divide "-10" "2"] ; # Output: {-5 0}
puts [divide "9" "2"] ; # Output: {4 1}
puts [divide "-15" "-3"] ; # Output: {5 0}
puts [divide "7" "0"] ; # Output: Error: Cannot divide by zero