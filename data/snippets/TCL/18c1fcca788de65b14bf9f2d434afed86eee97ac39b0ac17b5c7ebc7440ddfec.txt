# This code snippet performs a binary search on a sorted array

# First, we define the search function that takes in the array, the target element, and the starting and ending indices
proc binary_search {array target start end} {
    # Check if the starting index is greater than the ending index, i.e. the search range is empty
    if {$start > $end} {
        # The target element is not in the array, so we return -1
        return -1
    }

    # Calculate the middle index of the search range
    set mid [expr {($start + $end) / 2}]

    # Check if the target element is equal to the value at the middle index
    if {$target == $array($mid)} {
        # Return the middle index, as it is the index of the target element in the array
        return $mid
    }
    # Check if the target element is less than the value at the middle index
    elseif {$target < $array($mid)} {
        # Recursively call the search function with a new end index, one less than the middle index
        return [binary_search $array $target $start [expr {$mid - 1}]]
    }
    # The target element is greater than the value at the middle index
    else {
        # Recursively call the search function with a new start index, one more than the middle index
        return [binary_search $array $target [expr {$mid + 1}] $end]
    }
}

# Define a sorted array for testing the binary search function
set arr {1 2 3 4 5 6 7 8 9 10}

# Call the binary search function with the array, target element, start index, and end index
set result [binary_search $arr 7 0 [expr {[llength $arr] - 1}]]

# Print the result of the binary search
puts "The index of the target element in the array is $result"