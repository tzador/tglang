# This code snippet creates a function in Tcl to find the shortest path in a graph

proc shortestPath {graph start end} {
	# first, create two lists to store the visited and unvisited nodes
	set visited {}
	set unvisited [array names graph]

	# set all distances to infinity except for the start node, which is set to 0
	foreach node $unvisited {
		if {$node eq $start} {
			set distance($node) 0
		} else {
			set distance($node) [info infinity]
		}
	}

	# repeat until all nodes have been visited
	while {$unvisited ne ""} {
		# find the unvisited node with the shortest distance
		set closest [lindex $unvisited 0]
		foreach node $unvisited {
			if {$distance($node) < $distance($closest)} {
				set closest $node
			}
		}

		# mark the node as visited and remove it from the unvisited list
		lappend visited $closest
		set unvisited [lreplace $unvisited [lsearch $unvisited $closest]]

		# calculate the distances from the closest node to its neighbors
		foreach neighbor [array names graph($closest)] {
			if {[lsearch $unvisited $neighbor] ne -1} {
				set distance($neighbor) [min $distance($neighbor) [expr {$distance($closest) + $graph($closest,$neighbor)}]]
			}
		}
	}

	# return the shortest path
	set path [list $end]
	while {$end ne $start} {
		set prev [array get graph($end) weight]
		lappend path $prev
		set end $prev
	}

	return [reverse $path]
}