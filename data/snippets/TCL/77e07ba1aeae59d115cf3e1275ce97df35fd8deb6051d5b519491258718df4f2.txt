# This code snippet creates a function that takes in a list of numbers as an argument and sorts them in ascending order
# It uses the quicksort algorithm to efficiently sort the list

proc quicksort {lst} {
    # Base case: if the list is empty or contains only one element, it is already sorted
    if {[llength $lst] <= 1} {
        return $lst
    }
    set pivot [lindex $lst 0] ;# choose the first element as the pivot
    set lessList {}           ;# empty list to store elements less than pivot
    set equalList {}          ;# empty list to store elements equal to pivot
    set greaterList {}        ;# empty list to store elements greater than pivot
    
    # Loop through the list, compare each element to the pivot and add it to the corresponding list
    for {set i 0} {$i < [llength $lst]} {incr i} {
        set num [lindex $lst $i]
        if {$num < $pivot} {
            lappend lessList $num
        } elseif {$num == $pivot} {
            lappend equalList $num
        } else {
            lappend greaterList $num
        }
    }
    
    # Recursively call the quicksort function on the less and greater lists
    set lessList [quicksort $lessList]
    set greaterList [quicksort $greaterList]
    
    # Combine the sorted lists in the correct order (less list, equal list, greater list)
    return [concat $lessList $equalList $greaterList]
}

# Example call of the quicksort function
set numbers {5 2 7 3 1 6 8 4}
quicksort $numbers ;# Output: 1 2 3 4 5 6 7 8