# This code snippet is a complex sorting algorithm in TCL
# Input: list of integers
# Output: sorted list of integers
proc sortList {list} {
  # Create an empty list to store sorted values
  set sortedList [list]

  # Outer loop to iterate through each element in the list
  for {set i 0} {$i < [llength $list]} {incr i} {

    # Inner loop to compare each element with the already sorted elements
    for {set j 0} {$j < [llength $sortedList]} {incr j} {
      # If the current element is less than the element in the sorted list at index j,
      # insert it at that position and shift the rest of the elements to the right
      if {[lindex $list $i] < [lindex $sortedList $j] } {
        linsert sortedList $j [lindex $list $i]
        break
      }
    }
    # If the element was not inserted in the sorted list, append it at the end
    if {$j == [llength $sortedList]} {
      lappend sortedList [lindex $list $i]
    }
  }

  return $sortedList
}

# Example input and output
sortList {5 2 7 3} ;# Output: {2 3 5 7}