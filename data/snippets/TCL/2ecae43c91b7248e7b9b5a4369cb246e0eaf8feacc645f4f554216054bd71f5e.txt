# This code snippet uses a recursive function to generate a list of Fibonacci numbers
proc Fibonacci {n} {
    
    # Base case
    if {$n == 0} {
        return 0
    } elseif {$n == 1} {
        return 1
    } else {
        # Recursive step - call function on previous two numbers
        return [expr {[Fibonacci [expr {$n-1}]] + [Fibonacci [expr {$n-2}]]}]
    }
}
# Define the number of Fibonacci numbers to generate
set count 10

# Create an empty list to store the generated numbers
set fib_list {}

# Iterate through the numbers using a for loop
for {set i 0} {$i <= $count} {incr i} {
    # Call the Fibonacci function on the current number
    set result [Fibonacci $i]
    
    # Add the result to the list
    lappend fib_list $result
}

# Print the list of Fibonacci numbers
puts "Fibonacci numbers up to $count: $fib_list"

# Output:
#
# Fibonacci numbers up to 10: {0 1 1 2 3 5 8 13 21 34 55}