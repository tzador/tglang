proc sortList {list1} { # define a procedure called 'sortList' that takes in a parameter named 'list1'
    set left 0 # set a variable 'left' to 0
    set right [expr [llength $list1] - 1] # set a variable 'right' to the length of 'list1' minus 1
    while {$left < $right} { # start a while loop that runs as long as 'left' is smaller than 'right'
        set i $left
        set j $right
        set pivot [lindex $list1 [expr {$left + ($right-$left)/2}]] # set a variable 'pivot' to the middle element of the list
        while {$i <= $j} { # start another while loop that runs as long as 'i' is smaller than or equal to 'j'
            while {[lindex $list1 $i] < $pivot} { # start a nested while loop that runs as long as the element at index 'i' is smaller than the pivot
                incr i # increment the value of 'i' by 1
            }
            while {[lindex $list1 $j] > $pivot} { # start another nested while loop that runs as long as the element at index 'j' is larger than the pivot
                decr j # decrement the value of 'j' by 1
            }
            if {$i <= $j} { # if 'i' is still smaller than or equal to 'j'
                set temp [lindex $list1 $i]
                lset list1 $i [lindex $list1 $j] # swap the elements at indexes 'i' and 'j'
                lset list1 $j $temp
                incr i # increment 'i' by 1
                decr j # decrement 'j' by 1
            }
        }
        if {$j > $left} { # if 'j' is larger than 'left'
            sortList [lrange $list1 $left $j] # recursively call the 'sortList' procedure on the sublist to the left of 'j'
        }
        if {$i < $right} { # if 'i' is smaller than 'right'
            sortList [lrange $list1 $i $right] # recursively call the 'sortList' procedure on the sublist to the right of 'i'
        }
        incr left # increment 'left' by 1
        set right [expr $j-1] # set 'right' to 'j' minus 1
    }
    return $list1 # return the sorted list
} # end of procedure