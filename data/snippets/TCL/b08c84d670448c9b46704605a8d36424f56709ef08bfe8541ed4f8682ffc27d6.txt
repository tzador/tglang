## This code snippet shows how to implement Dijkstra's algorithm in TCL

proc dijkstra {graph start} { ## define dijkstra procedure
    set visited [list [expr {size($graph)}] false] ## initialize visited array with size equal to number of vertices in graph
    set distance [list [expr {size($graph)}] [expr {double(inf)}]] ## initialize distance array with all values set to infinity
    set distance($start) 0 ## set distance of starting vertex to 0

    while {1} { ## enter infinite loop to visit all vertices
        set current -1 ## initialize current vertex to -1

        for {set i 0} {$i < [expr {size($graph)}] && $current < 0} {incr i} { ## loop through all vertices
            if {!$visited($i) && $distance($i) < $distance($current)} { ## check if vertex is not visited and distance is less than current distance
                set current $i ## set current vertex to current index
            }
        }

        if {$current < 0} { ## if current vertex is still -1, it means all vertices have been visited
            break ## exit out of infinite loop
        }

        set visited($current) true ## mark current vertex as visited

        foreach neigh [getNeighbors $graph $current] { ## loop through each neighbor of current vertex
            set alt [expr {$distance($current) + [getEdgeWeight $graph $current $neigh]}] ## calculate alternative distance
            if {$alt < $distance($neigh)} { ## check if alternative distance is less than current distance
                set distance($neigh) $alt ## set new distance value for neighbor
            }
        }
    }

    return $distance ## return distance array with shortest paths to all vertices
}

proc getNeighbors {graph vertex} { ## define getNeighbors procedure
    set neighbors [list] ## initialize neighbors list

    for {set i 0} {$i < [expr {size($graph)}]} {incr i} { ## loop through all vertices in graph
        if {[expr {[lindex $graph $vertex $i] > 0}]} { ## check if edge exists between vertex and current index
            lappend neighbors $i ## add current index to neighbors list
        }
    }

    return $neighbors ## return neighbors list
}

proc getEdgeWeight {graph vertex1 vertex2} { ## define getEdgeWeight procedure
    return [lindex $graph $vertex1 $vertex2] ## return edge weight between vertex1 and vertex2
}