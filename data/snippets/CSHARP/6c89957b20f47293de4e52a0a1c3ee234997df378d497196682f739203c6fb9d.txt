/* This code snippet uses LINQ to find all prime numbers less than or equal to a given integer */
using System;
using System.Linq;

// create a function that checks if a number is prime
public bool IsPrime(int n)
{
    // 0 and 1 are not prime numbers
    if (n < 2) return false;
    
    // check if number is divisible by any number from 2 to square root of n
    for (int i = 2; i*i <= n; i++)
    {
        if (n%i == 0) return false; // number is not prime
    }
    
    // if no number is divisible, the number is prime
    return true;
}

// create an integer variable to store the upper limit of the range
int num = 100;

// use LINQ to find all prime numbers less than or equal to the given integer
var primeNums = Enumerable.Range(2, num-1).Where(n => IsPrime(n));

// print the resulting list of prime numbers
foreach (var prime in primeNums)
{
    Console.WriteLine(prime);
}