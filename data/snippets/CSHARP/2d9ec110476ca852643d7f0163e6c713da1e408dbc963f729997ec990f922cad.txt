/// <summary>
/// This code snippet demonstrates how to create and use a generic class in C#
/// </summary>
/// <typeparam name="T">The generic type parameter</typeparam>
public class GenericClass<T>
{
    /// <summary>
    /// A private field of type T
    /// </summary>
    private T field;

    /// <summary>
    /// A public property that gets and sets the field
    /// </summary>
    public T Property
    {
        get
        {
            return field;
        }
        set
        {
            field = value;
        }
    }

    /// <summary>
    /// A public method that takes in a generic parameter and returns a string concatenation using the field and parameter
    /// </summary>
    /// <param name="input">The generic input parameter</param>
    /// <returns>A string concatenation of the field and input parameter</returns>
    public string DoSomethingWithInput<T>(T input)
    {
        return field.ToString() + input.ToString();
    }
}

// Example usage:

// Create a GenericClass object with string as the generic type
GenericClass<string> genericString = new GenericClass<string>();

// Set the field to "Hello"
genericString.Property = "Hello";

// Call the DoSomethingWithInput method with "World" as the input parameter
string result = genericString.DoSomethingWithInput<string>("World");

// The output will be "HelloWorld"