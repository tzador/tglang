// This code snippet demonstrates an implementation of merge sort in C#

using System;

class MergeSort
{
     // Method for splitting and sorting the input array
    static void Sort(int[] arr, int left, int right)
    {
        if (left < right)
        {
            // Getting the middle point of the array
            int middle = (left + right) / 2;

            // Sorting the first half of the array
            Sort(arr, left, middle);
            // Sorting the second half of the array
            Sort(arr, middle + 1, right);

            // Merging the two sorted subarrays
            Merge(arr, left, middle, right);
        }
    }

    // Method for merging two subarrays into a sorted array
    static void Merge(int[] arr, int left, int middle, int right)
    {
        // Creating temporary arrays for the two subarrays
        int[] temp1 = new int[middle - left + 1];
        int[] temp2 = new int[right - middle];

        // Copying the values of the two subarrays into the temporary arrays
        for (int i = 0; i < temp1.Length; i++)
        {
            temp1[i] = arr[left + i];
        }
        for (int i = 0; i < temp2.Length; i++)
        {
            temp2[i] = arr[middle + 1 + i];
        }

        // Initial indexes of first and second subarrays
        int index1 = 0;
        int index2 = 0;

        // Initial index of merged subarray
        int mergedIndex = left;

        // Merging the two subarrays in sorted order
        while (index1 < temp1.Length && index2 < temp2.Length)
        {
            if (temp1[index1] <= temp2[index2])
            {
                arr[mergedIndex] = temp1[index1];
                index1++;
            }
            else
            {
                arr[mergedIndex] = temp2[index2];
                index2++;
            }
            mergedIndex++;
        }

        // Copying any remaining elements of temp1 into the merged array
        while (index1 < temp1.Length)
        {
            arr[mergedIndex] = temp1[index1];
            index1++;
            mergedIndex++;
        }

        // Copying any remaining elements of temp2 into the merged array
        while (index2 < temp2.Length)
        {
            arr[mergedIndex] = temp2[index2];
            index2++;
            mergedIndex++;
        }
    }

    public static void Main()
    {
        // Sample array for testing
        int[] arr = { 6, 5, 3, 1, 8, 7, 2, 4 };

        Console.WriteLine("Unsorted array:");
        // Printing the unsorted array
        foreach (int element in arr)
        {
            Console.Write(element + " ");
        }
        Console.WriteLine();

        // Sorting the array using merge sort
        Sort(arr, 0, arr.Length - 1);

        Console.WriteLine("Sorted array:");
        // Printing the sorted array
        foreach (int element in arr)
        {
            Console.Write(element + " ");
        }
        Console.WriteLine();
    }
}