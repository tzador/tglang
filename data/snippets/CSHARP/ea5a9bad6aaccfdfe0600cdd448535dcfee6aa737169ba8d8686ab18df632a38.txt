// This code snippet generates a random password with criteria specified by the user

// Import necessary libraries
using System;
using System.Security.Cryptography;

// Define function to generate password
public static string GeneratePassword(int length, int upperCase, int lowerCase, int numbers, int symbols)
{
    // Initialize arrays for each character type
    char[] upperCaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
    char[] lowerCaseChars = "abcdefghijklmnopqrstuvwxyz".ToCharArray();
    char[] numberChars = "0123456789".ToCharArray();
    char[] symbolChars = "!@#$%^&*()_+{}[]|\\:;\"'<>,.?/~`".ToCharArray();

    // Set up random number generator
    var rng = new RNGCryptoServiceProvider();

    // Initialize password string
    string password = "";

    // Iterate through each character type and add random characters to password string
    for (int i = 0; i < upperCase; i++)
    {
        password += upperCaseChars[rng.Next(0, upperCaseChars.Length)];
    }

    for (int i = 0; i < lowerCase; i++)
    {
        password += lowerCaseChars[rng.Next(0, lowerCaseChars.Length)];
    }

    for (int i = 0; i < numbers; i++)
    {
        password += numberChars[rng.Next(0, numberChars.Length)];
    }

    for (int i = 0; i < symbols; i++)
    {
        password += symbolChars[rng.Next(0, symbolChars.Length)];
    }

    // Convert password string to array and shuffle characters
    char[] passwordChars = password.ToCharArray();
    for (int i = 0; i < passwordChars.Length; i++)
    {
        int randomIndex = rng.Next(i, passwordChars.Length);
        char temp = passwordChars[randomIndex];
        passwordChars[randomIndex] = passwordChars[i];
        passwordChars[i] = temp;
    }

    // Concatenate shuffled characters and return password
    return new string(passwordChars);
}

// Example usage of function
Console.WriteLine(GeneratePassword(15, 4, 3, 2, 2));
// => "6GytY67F@5J4Lw!"