//Creating an abstract class called 'Shape' with member variables 'name' and 'color'
public abstract class Shape
{
    private string name; //private member variable for name
    private string color; //private member variable for color

    public string Name //public property for name
    {
        get { return name; } //getter for name
        set { name = value; } //setter for name
    }

    public string Color //public property for color
    {
        get { return color; } //getter for color
        set { color = value; } //setter for color
    }

    public Shape(string name, string color) //constructor for Shape class
    {
        Name = name; //setting name using property
        Color = color; //setting color using property
    }

    public abstract double CalculateArea(); //abstract method for calculating area

    public abstract double CalculatePerimeter(); //abstract method for calculating perimeter

    public override string ToString() //overriding ToString method
    {
        return "Name: " + Name + ", Color: " + Color; //returning name and color of shape as a string
    }
}

//Creating a subclass of Shape called 'Rectangle'
public class Rectangle : Shape
{
    //private member variables for the length and width of rectangle
    private double length;
    private double width;

    public double Length //public property for length
    {
        get { return length; } //getter for length
        set { length = value; } //setter for length
    }

    public double Width //public property for width
    {
        get { return width; } //getter for width
        set { width = value; } //setter for width
    }

    //constructor for Rectangle class
    public Rectangle(string name, string color, double length, double width) : base(name, color)
    {
        Length = length; //setting length using property
        Width = width; //setting width using property
    }

    //overriding CalculateArea method from Shape class
    public override double CalculateArea()
    {
        return Length * Width; //calculating area of rectangle
    }

    //overriding CalculatePerimeter method from Shape class
    public override double CalculatePerimeter()
    {
        return 2 * (Length + Width); //calculating perimeter of rectangle
    }

    //overriding ToString method from Shape class
    public override string ToString()
    {
        return base.ToString() + ", Length: " + Length + ", Width: " + Width; //returning name, color, length, and width of rectangle as a string
    }
}

//Creating an interface called 'IPrintable' with 'Print' method
public interface IPrintable
{
    void Print(); //method for printing
}

//Creating a class called 'PrintUtil' that implements IPrintable interface
public class PrintUtil : IPrintable
{
    public void Print()
    {
        Console.WriteLine("Printing..."); //printing message to console
    }
}

//Creating a main method to test the classes and interface
public class Program
{
    public static void Main()
    {
        //creating new Rectangle object
        Rectangle myRectangle = new Rectangle("Rectangle 1", "blue", 5, 10);

        //calling overridden ToString method for Rectangle
        Console.WriteLine(myRectangle.ToString());

        //calculating area and perimeter of Rectangle
        Console.WriteLine("Area: " + myRectangle.CalculateArea());
        Console.WriteLine("Perimeter: " + myRectangle.CalculatePerimeter());

        //creating new PrintUtil object
        PrintUtil myPrintUtil = new PrintUtil();

        //calling Print method from PrintUtil class
        myPrintUtil.Print();
    }
}