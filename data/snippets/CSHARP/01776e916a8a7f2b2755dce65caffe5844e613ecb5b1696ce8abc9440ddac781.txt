/// <summary>
/// This class represents a generic queue data structure
/// </summary>

class Queue<T>
{
    private T[] items;
    private int front;
    private int rear;

    /// <summary>
    /// Constructor for Queue class that takes in a capacity parameter
    /// and initializes the queue with the given capacity
    /// </summary>
    /// <param name="capacity">The capacity of the queue</param>
    public Queue(int capacity)
    {
        items = new T[capacity];
    }

    /// <summary>
    /// Enqueues an item to the back of the queue
    /// </summary>
    /// <param name="item">The item to be enqueued</param>
    public void Enqueue(T item)
    {
        if (rear == items.Length)
        {
            // If rear reaches the end of queue, resize the items array
            ResizeItemsArray();
        }

        items[rear] = item;
        rear++;
    }

    /// <summary>
    /// Dequeues an item from the front of the queue
    /// </summary>
    /// <returns>The dequeued item</returns>
    public T Dequeue()
    {
        if (isEmpty())
        {
            throw new InvalidOperationException("Queue is empty");
        }

        T item = items[front];
        front++;
        return item;
    }

    /// <summary>
    /// Returns the item at the front of the queue without removing it
    /// </summary>
    /// <returns>The item at the front of the queue</returns>
    public T Peek()
    {
        if (isEmpty())
        {
            throw new InvalidOperationException("Queue is empty");
        }

        return items[front];
    }

    /// <summary>
    /// Checks if the queue is empty
    /// </summary>
    /// <returns>True if the queue is empty, false otherwise</returns>
    public bool isEmpty()
    {
        return front == rear;
    }

    /// <summary>
    /// Resizes the items array by doubling its capacity
    /// and copying all existing items into the new array
    /// </summary>
    private void ResizeItemsArray()
    {
        T[] newItems = new T[items.Length * 2];
        Array.Copy(items, newItems, items.Length);
        items = newItems;
    }
}