using System;
using System.Collections.Generic;
using System.Linq;

namespace MyNamespace
{
    /// <summary>
    /// This is a generic class example.
    /// </summary>
    /// <typeparam name="T">A generic type parameter.</typeparam>
    public class GenericClass<T>
    {
        private Dictionary<string, T> _dictionary;

        /// <summary>
        /// This is the constructor for the generic class.
        /// </summary>
        /// <param name="items">A list of items to populate the dictionary with.</param>
        public GenericClass(IEnumerable<T> items)
        {
            // Initializes the dictionary with the items passed in
            _dictionary = items.ToDictionary(item => item.ToString(), item => item);
        }

        /// <summary>
        /// This method adds a new item to the dictionary.
        /// </summary>
        /// <param name="key">The key for the new item.</param>
        /// <param name="item">The item to add to the dictionary.</param>
        public void AddItem(string key, T item)
        {
            // Adds the item to the dictionary using the key provided
            _dictionary.Add(key, item);
        }

        /// <summary>
        /// This method retrieves an item from the dictionary based on the key.
        /// </summary>
        /// <param name="key">The key for the item to retrieve.</param>
        /// <returns>The item if found, or default value if not.</returns>
        public T GetItem(string key)
        {
            // Tries to get the item from the dictionary using the provided key
            if (_dictionary.TryGetValue(key, out T item))
            {
                return item;
            }
            else
            {
                // If item is not found, return default value
                return default;
            }
        }

        /// <summary>
        /// This method removes an item from the dictionary based on the key.
        /// </summary>
        /// <param name="key">The key for the item to remove.</param>
        /// <returns>True if item was successfully removed, false if item was not found.</returns>
        public bool RemoveItem(string key)
        {
            // Checks if the dictionary contains the key
            if (_dictionary.ContainsKey(key))
            {
                // If so, removes the item and returns true
                _dictionary.Remove(key);
                return true;
            }
            else
            {
                // If not, returns false
                return false;
            }
        }

        /// <summary>
        /// This method returns a list of all the keys in the dictionary.
        /// </summary>
        /// <returns>A list of strings representing the keys in the dictionary.</returns>
        public List<string> GetKeys()
        {
            // Returns a list of all the keys in the dictionary
            return _dictionary.Keys.ToList();
        }

        /// <summary>
        /// This method clears the dictionary of all items.
        /// </summary>
        public void Clear()
        {
            // Clears the dictionary of all items
            _dictionary.Clear();
        }
    }
}