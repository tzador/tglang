// This code snippet is a function that calculates the nth Fibonacci number using recursion.
// It also has a second parameter, which is a dictionary that stores previously calculated values for efficiency.
// The function takes in an integer n and returns the calculated Fibonacci number.
int CalculateFibonacci(int n, Dictionary<int, int> memory)
{
    // Base condition: if n is 0 or 1, return n
    if (n == 0 || n == 1)
    {
        return n;
    }
    
    // If value for n is already calculated and stored in the memory dictionary, return that value
    if (memory.ContainsKey(n))
    {
        return memory[n];
    }
    
    // Recursive calls to calculate the nth Fibonacci number by adding the results of n-1 and n-2
    int result = CalculateFibonacci(n - 1, memory) + CalculateFibonacci(n - 2, memory);
    
    // Store the calculated value for n in the memory dictionary for future use
    memory.Add(n, result);
    
    // Return the calculated result
    return result;
}

// Sample usage of the function
int n = 10;
Dictionary<int, int> memory = new Dictionary<int, int>();
int result = CalculateFibonacci(n, memory);

Console.WriteLine(result); // Output: 55 (since the 10th Fibonacci number is 55)