// Initialize array
int[] numbers = {12, 5, 8, 1, 7, 10, 3};

// Sort array using built-in method Array.Sort()
Array.Sort(numbers);

// Print sorted array
Console.WriteLine("Sorted array: [{0}]", string.Join(", ", numbers));

// Define Fibonacci function
public int Fibonacci(int n) {

    // Base case
    if (n == 0) {
        return 0;
    } else if (n == 1) {
        return 1;
    }

    // Recursive call to previous two numbers
    return Fibonacci(n-1) + Fibonacci(n-2); 
}

// Call Fibonacci function and print result
Console.WriteLine("Fibonacci series for n = 7: [{0}]", string.Join(", ", Fibonacci(7)));

// Define custom exception class
public class CustomException : Exception {

    // Constructor with custom message
    public CustomException(string message) : base(message) { }

    // Empty constructor
    public CustomException() { }

    // Override ToString() to return custom message
    public override string ToString() {
        return this.Message;
    }
}

// Initialize list of integers
List<int> numList = new List<int>();

// Try inserting a string to the list
try {
    numList.Add("Hello");
} catch (Exception ex) {

    // Catch and handle custom exception
    if (ex is CustomException) {
        Console.WriteLine("Custom Exception caught: {0}", ex.Message);
    } else {
        Console.WriteLine("Unexpected exception caught: {0}", ex.Message);
    }
}

// Define class with static method
public static class Calculator {

    // Static method to calculate square
    public static int Square(int num) {
        return num * num;
    }
}

// Call static method and print result
Console.WriteLine("Square of 5: {0}", Calculator.Square(5));

// Initialize dictionary
Dictionary<string, int> dict = new Dictionary<string, int>();

// Add key-value pairs to dictionary
dict.Add("One", 1);
dict.Add("Two", 2);
dict.Add("Three", 3);

// Loop through and print key-value pairs
foreach (KeyValuePair<string, int> entry in dict) {
    Console.WriteLine("{0}: {1}", entry.Key, entry.Value);
}

// Create and initialize new object of type Person
Person person = new Person {
    Name = "John Doe",
    Age = 25
};

// Print object properties
Console.WriteLine("Name: {0}, Age: {1}", person.Name, person.Age);

// Define class with properties and constructor
public class Person {

    // Properties
    public string Name { get; set; }
    public int Age { get; set; }

    // Constructor
    public Person(string name, int age) {
        this.Name = name;
        this.Age = age;
    }
}