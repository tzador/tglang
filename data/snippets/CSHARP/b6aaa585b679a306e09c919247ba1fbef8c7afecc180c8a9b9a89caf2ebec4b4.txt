// This code snippet implements a binary search algorithm to find an element in a sorted array of integers.

// Input: sortedArray - an array of integers in ascending order
//        element - the element to be searched for in the array
// Output: if element is found, the index of the element in the array; if not found, -1
// Time Complexity: O(log n)

public int BinarySearch(int[] sortedArray, int element)
{
    // Define the start and end index of the search range
    int start = 0;
    int end = sortedArray.Length - 1;

    // while there are still elements to search
    while (start <= end)
    {
        // calculate the middle element index
        int mid = (start + end) / 2;

        // if the middle element is our target element, return its index
        if (sortedArray[mid] == element)
            return mid;
        
        // if element is smaller than middle element, search in the first half
        if (element < sortedArray[mid])
            end = mid - 1;

        // if element is larger than middle element, search in the second half
        else
            start = mid + 1;
    }

    // element not found, return -1
    return -1;
}

// Example usage:
int[] array = { 2, 4, 6, 8, 10, 12, 14, 16 };
int index = BinarySearch(array, 10); // index = 4
int index2 = BinarySearch(array, 7); // index2 = -1