// This code snippet generates a random password with specified length and complexity.

using System;
using System.Text;

class Program
{
   static void Main()
   {
      // set length of password
      int passwordLength = 12;

      // define character arrays for each type of character
      char[] lowerCaseLetters = "abcdefghijklmnopqrstuvwxyz".ToCharArray();
      char[] upperCaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
      char[] numbers = "0123456789".ToCharArray();
      char[] specialChars = "!@#$%^&*()_+-=[]{}|\\:\"'<>?,./".ToCharArray();

      // create a random number generator
      Random random = new Random();

      // create a string builder to hold password
      StringBuilder password = new StringBuilder();

      // add first character from each character array to password string
      password.Append(lowerCaseLetters[random.Next(0, lowerCaseLetters.Length)]);
      password.Append(upperCaseLetters[random.Next(0, upperCaseLetters.Length)]);
      password.Append(numbers[random.Next(0, numbers.Length)]);
      password.Append(specialChars[random.Next(0, specialChars.Length)]);

      // loop through remaining characters to add to password string
      for (int i = 0; i < passwordLength - 4; i++)
      {
         // randomly decide which character array to use
         int arrayIndex = random.Next(0, 3);
         
         // choose a random character from chosen array and add to password string
         switch (arrayIndex)
         {
            case 0:
               password.Append(lowerCaseLetters[random.Next(0, lowerCaseLetters.Length)]);
               break;
            case 1:
               password.Append(upperCaseLetters[random.Next(0, upperCaseLetters.Length)]);
               break;
            case 2:
               password.Append(numbers[random.Next(0, numbers.Length)]);
               break;
            case 3:
               password.Append(specialChars[random.Next(0, specialChars.Length)]);
               break;
         }
      }

      // shuffle the characters in the password string
      // convert the password string to a char array
      char[] passwordCharArray = password.ToString().ToCharArray();

      // shuffle characters in char array using Fisher-Yates algorithm
      for (int i = passwordCharArray.Length - 1; i > 0; i--)
      {
         int j = random.Next(0, i + 1);
         char temp = passwordCharArray[i];
         passwordCharArray[i] = passwordCharArray[j];
         passwordCharArray[j] = temp;
      }

      // convert char array back to string and store in password variable
      password = new StringBuilder(new string(passwordCharArray));

      // output password
      Console.WriteLine(password);
   }
}