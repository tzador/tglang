/* 
    This is a multi-line comment
    that explains the purpose of this code snippet.
    
    The following code is responsible for creating 
    a custom list class, which allows users to add,
    remove, and access items within the list.
    
    It utilizes a generic type T to allow for 
    flexibility in the data types stored in the list. 
*/

public class CustomList<T>
{
    private T[] items; // private array to store items in list
    private int count; // keeps track of number of items in list
    private int capacity; // determines size of list
    
    // Constructor that sets initial capacity of list to 10
    public CustomList()
    {
        capacity = 10; 
        count = 0;
        items = new T[capacity];
    }
    
    // Method to add an item to the end of the list
    public void Add(T item)
    {
        // Checks if list is at max capacity and increases capacity if necessary 
        if (count == capacity)
        {
            capacity *= 2; 
            T[] newItems = new T[capacity];
            Array.Copy(items, newItems, count);
            items = newItems;
        }
        
        // Adds new item to end of list and increments count
        items[count] = item; 
        count++;
    }
    
    // Method to remove an item at a specified index in the list
    public void RemoveAt(int index)
    {
        // Checks if index is within list range
        if (index < 0 || index >= count)
        {
            throw new IndexOutOfRangeException();
        }
        
        // Moves all items after removed item down by one index
        for (int i = index + 1; i < count; i++)
        {
            items[i - 1] = items[i];
        }
        
        // Sets last index to default value and decrements count
        items[count - 1] = default(T);
        count--;
    }
    
    // Indexer that allows direct access to items in the list
    public T this[int index]
    {
        // Getter for indexer
        get 
        {
            // Checks if index is within list range
            if (index < 0 || index >= count)
            {
                throw new IndexOutOfRangeException();
            }
            
            return items[index];
        }
        
        // Setter for indexer
        set 
        {
            // Checks if index is within list range
            if (index < 0 || index >= count)
            {
                throw new IndexOutOfRangeException();
            }
            
            items[index] = value;
        }
    }
}