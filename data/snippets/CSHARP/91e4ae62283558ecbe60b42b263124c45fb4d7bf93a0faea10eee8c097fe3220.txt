// This code snippet is an example of a complex sorting algorithm called Quicksort
// It takes a List of integers as input and returns a sorted List

private static List<int> QuickSort(List<int> numbers)
{
    if (numbers.Count < 2)
    {
        return numbers;
    }
    int pivotIndex = numbers.Count / 2;
    int pivot = numbers[pivotIndex];
    
    // This loop splits the numbers into two smaller lists, one with numbers less than the pivot and one with numbers greater than the pivot
    List<int> smallerNumbers = new List<int>();
    List<int> largerNumbers = new List<int>();
    for (int i = 0; i < numbers.Count; i++)
    {
        if (i == pivotIndex)
        {
            continue;
        }
        else if (numbers[i] < pivot)
        {
            smallerNumbers.Add(numbers[i]);
        }
        else
        {
            largerNumbers.Add(numbers[i]);
        }
    }
    
    // Recursively call QuickSort on the smaller and larger lists to sort them
    smallerNumbers = QuickSort(smallerNumbers);
    largerNumbers = QuickSort(largerNumbers);
    
    // Combine the sorted smaller and larger lists with the pivot number
    List<int> sortedNumbers = new List<int>();
    sortedNumbers.AddRange(smallerNumbers);
    sortedNumbers.Add(pivot);
    sortedNumbers.AddRange(largerNumbers);
    
    return sortedNumbers;
}