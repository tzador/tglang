#region Using Directives
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
#endregion

namespace MyNamespace
{
    /// <summary>
    /// This is a class with a generic method.
    /// </summary>
    public class MyClass
    {
        /// <summary>
        /// This is a generic method to add two values of any data type.
        /// </summary>
        /// <typeparam name="T">The data type of the values to be added.</typeparam>
        /// <param name="value1">The first value to be added.</param>
        /// <param name="value2">The second value to be added.</param>
        /// <returns>The result of adding the two values.</returns>
        public T Add<T>(T value1, T value2)
        {
            // Use of default keyword to initialize a variable of type T to its default value
            T result = default;

            // Check if the data type is a numeric type
            if (typeof(T).IsValueType && IsNumericType(typeof(T)))
            {
                try
                {
                    // Add the two values using the "+" operator
                    result = (dynamic)value1 + (dynamic)value2;
                }
                catch (Exception ex) // Catch any exceptions that might occur
                {
                    // Print out the exception message
                    Console.WriteLine($"Error: {ex.Message}");
                }
            }

            return result; // Return the result of the addition
        }

        /// <summary>
        /// This method checks if a given Type parameter is a numeric data type.
        /// </summary>
        /// <param name="t">The type to be checked.</param>
        /// <returns>True if the type is a numeric data type, false otherwise.</returns>
        private bool IsNumericType(Type t)
        {
            // Check if the type code is a numeric type
            return Type.GetTypeCode(t) switch
            {
                TypeCode.Byte => true,
                TypeCode.SByte => true,
                TypeCode.UInt16 => true,
                TypeCode.Int16 => true,
                TypeCode.UInt32 => true,
                TypeCode.Int32 => true,
                TypeCode.UInt64 => true,
                TypeCode.Int64 => true,
                TypeCode.Decimal => true,
                TypeCode.Single => true,
                TypeCode.Double => true,
                TypeCode.Char => true,
                _ => false
            };
        }
    }
}