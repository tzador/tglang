// This code snippet shows how to implement a binary search algorithm in C#.

// First we create a class called BinarySearch
public class BinarySearch 
{
    // We declare a method called Search which takes in an array as the first parameter
    // and the value we want to search for as the second parameter
    public static int Search(int[] array, int value)
    {
        // We define the starting index as 0 and the ending index as the length of the array minus 1
        int start = 0;
        int end = array.Length - 1;

        // We create a loop that will continue searching until the starting index is greater than the ending index
        while (start <= end)
        {
            // We find the middle index by adding the starting and ending index and dividing it by 2
            int middle = (start + end) / 2;

            // If the value we are searching for is equal to the value at the middle index, we return the middle index
            if (value == array[middle])
            {
                return middle;
            }

            // If the value we are searching for is less than the value at the middle index, we set the ending index to be one less than the middle index
            else if (value < array[middle])
            {
                end = middle - 1;
            }

            // If the value we are searching for is greater than the value at the middle index, we set the starting index to be one more than the middle index
            else
            {
                start = middle + 1;
            }
        }
        // If the value is not found, we return -1
        return -1;
    }
}

// Now we can call our Search method and pass in an array and the value we want to search for
// For example, if we have an array called numbers that contains [5, 8, 12, 17, 23] and we want to find the index of 17
// We would call the method like this:
int index = BinarySearch.Search(numbers, 17);

// The index variable will hold the value 3, since that is the index where 17 is located in the array.