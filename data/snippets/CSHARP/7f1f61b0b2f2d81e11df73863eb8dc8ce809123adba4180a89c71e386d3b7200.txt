public class BankAccount //class declaration
{
    private string owner; //private field for owner's name
    private decimal balance; //private field for account balance

    //constructor with parameters for owner's name and initial balance
    public BankAccount(string owner, decimal balance)
    {
        this.owner = owner;
        this.balance = balance;
    }

    //method for depositing funds into the account
    public void Deposit(decimal amount)
    {
        //condition to check if amount is positive
        if (amount > 0)
        {
            balance += amount; //add amount to the balance
        }
    }

    //method for withdrawing funds from the account
    public void Withdraw(decimal amount)
    {
        //condition to check if amount is positive and if balance is greater than or equal to amount
        if (amount > 0 && balance >= amount)
        {
            balance -= amount; //subtract amount from the balance
        }
    }

    //method for transferring funds from this account to another account
    public void Transfer(BankAccount destination, decimal amount)
    {
        //condition to check if amount is positive and if balance is greater than or equal to amount
        if (amount > 0 && balance >= amount)
        {
            balance -= amount; //subtract amount from the balance of this account
            destination.Deposit(amount); //call Deposit method on destination account, passing in the amount
        }
    }

    //method to get the account balance
    public decimal GetBalance()
    {
        return balance; //return the current balance
    }
}