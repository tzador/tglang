/// <summary>
/// This is a class that represents a custom list in C#
/// </summary>
public class CustomList<T>
{
    /// <summary>
    /// Private backing array for storing items in the list
    /// </summary>
    private T[] _items;

    /// <summary>
    /// The number of items currently stored in the list
    /// </summary>
    public int Count { get; private set; }

    /// <summary>
    /// The current capacity of the list
    /// </summary>
    public int Capacity
    {
        get { return _items.Length; }
    }

    /// <summary>
    /// Constructor for creating a new custom list with an initial capacity
    /// </summary>
    /// <param name="capacity">The initial capacity of the list</param>
    public CustomList(int capacity = 4)
    {
        _items = new T[capacity];
        Count = 0;
    }

    /// <summary>
    /// Adds a new item to the end of the list
    /// </summary>
    /// <param name="item">The item to be added</param>
    public void Add(T item)
    {
        // If the list is already at capacity, double the size of the backing array
        if (Count == Capacity)
        {
            ResizeList(Capacity * 2);
        }

        _items[Count] = item;
        Count++;
    }

    /// <summary>
    /// Inserts an item to a specific index in the list
    /// </summary>
    /// <param name="index">The index where the item will be inserted</param>
    /// <param name="item">The item to be inserted</param>
    public void Insert(int index, T item)
    {
        // If the list is already at capacity, double the size of the backing array
        if (Count == Capacity)
        {
            ResizeList(Capacity * 2);
        }

        // Shift all items after the specified index to the right
        for (int i = Count - 1; i >= index; i--)
        {
            _items[i + 1] = _items[i];
        }

        _items[index] = item;
        Count++;
    }

    /// <summary>
    /// Removes the item at a specific index from the list
    /// </summary>
    /// <param name="index">The index of the item to be removed</param>
    public void RemoveAt(int index)
    {
        // Shift all items after the specified index to the left
        for (int i = index; i < Count - 1; i++)
        {
            _items[i] = _items[i + 1];
        }

        // Set the last item to null and decrement the count
        _items[Count - 1] = default(T);
        Count--;
    }

    /// <summary>
    /// Resizes the backing array of the list to a specified size
    /// </summary>
    /// <param name="newSize">The desired size of the backing array</param>
    private void ResizeList(int newSize)
    {
        // Create a new array with the specified size
        T[] newArray = new T[newSize];

        // Copy the items from the old array to the new array
        for (int i = 0; i < Count; i++)
        {
            newArray[i] = _items[i];
        }

        // Set the backing array to the new array
        _items = newArray;
    }

    // Indexer for accessing items in the list using bracket notation
    public T this[int index]
    {
        get { return _items[index]; }
        set { _items[index] = value; }
    }
}