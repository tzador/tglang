/*
The following code creates a class called Person with various properties and methods, including a constructor, getter and setter methods, and a method that prints out the person's information.
The class also has a static variable and method that keeps track of the total number of people created.
*/

public class Person
{
    // Properties
    // `public` indicates the accessibility of the property, `string` is the data type, `Name` is the property name, and `get; set;` indicates the getter and setter methods.
    public string Name { get; set; }
    // `private` indicates that the property can only be accessed within the current class.
    private int Age { get; set; }
    public string Occupation { get; set; }
    public string Location { get; set; }
    
    // Constructor
    // Takes in parameters to set the initial values of the properties.
    public Person(string name, int age, string occupation, string location)
    {
        Name = name;
        Age = age;
        Occupation = occupation;
        Location = location;
        // Every time a new person is created, the static variable `totalPeople` is incremented by 1.
        totalPeople++;
    }

    // Getter and Setter Methods
    // `public` indicates the accessibility of the method, `int` is the return type, `GetAge` is the method name, and `get` indicates that this is a getter method.
    public int GetAge()
    {
        return Age;
    }

    // `public` indicates the accessibility of the method, `void` indicates that the method does not return a value, `SetAge` is the method name, and `set` indicates that this is a setter method.
    public void SetAge(int age)
    {
        Age = age;
    }

    // Method to Print Person's Information
    // `public` indicates the accessibility of the method, `void` indicates that the method does not return a value, `PrintInfo` is the method name.
    public void PrintInfo()
    {
        // Uses the `Console.WriteLine()` method to print out the person's information in a formatted string.
        Console.WriteLine($"{Name} is {Age} years old and currently works as a {Occupation} in {Location}.");
    }

    // Static Variable and Method
    // `private` indicates that the static variable can only be accessed within the current class, `static` indicates that this is a static variable, `int` is the data type, `totalPeople` is the variable name.
    private static int totalPeople = 0;

    // `public` indicates the accessibility of the method, `static` indicates that this is a static method, `int` is the return type, `GetTotal()` is the method name.
    public static int GetTotal()
    {
        return totalPeople;
    }
}

// In a separate file or in the `Main` method, we can create new instances of the `Person` class and use its methods and properties.

Person person1 = new Person("John", 25, "Software Developer", "New York");
Person person2 = new Person("Emily", 30, "Marketing Manager", "London");

// We can set and get the age of the person using the getter and setter methods.
person1.SetAge(26);
int person2Age = person2.GetAge();

// We can print the person's information using the `PrintInfo()` method.
person1.PrintInfo(); // Output: John is 26 years old and currently works as a Software Developer in New York.
person2.PrintInfo(); // Output: Emily is 30 years old and currently works as a Marketing Manager in London.

// We can also access the `totalPeople` variable and the `GetTotal()` method using the class name, since they are both static.
Console.WriteLine(Person.GetTotal()); // Output: 2 (since we created 2 people instances)