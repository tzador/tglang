//This is a code snippet in CSharp
//It contains a complex method that checks the validity of a given email address
//The output is either true or false, depending on whether the email address is valid or not

public bool CheckEmailAddress(string email)
{
    //Assuming minimum length of 5 characters and maximum length of 254
    if (email.Length >= 5 && email.Length <= 254)
    {
        //Checking for the presence of '@' symbol
        if (email.Contains("@"))
        {
            //Splitting the email into 2 parts, before and after '@'
            string[] emailParts = email.Split('@');
            string localPart = emailParts[0];
            string domainPart = emailParts[1];

            //Checking the local part for valid characters
            foreach (char c in localPart)
            {
                if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '.' || c == '_' || c == '-'))
                {
                    return false;
                }
            }

            //Checking the domain part for valid characters
            foreach (char c in domainPart)
            {
                if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '.' || c == '-'))
                {
                    return false;
                }
            }

            //Checking for valid length of domain part
            if (domainPart.Length >= 3 && domainPart.Length <= 63)
            {
                //Checking for consecutive dots in domain part
                if (!domainPart.Contains(".."))
                {
                    //Checking for valid characters before and after '.'
                    foreach (char c in domainPart)
                    {
                        if (c == '.')
                        {
                            int index = domainPart.IndexOf(c);

                            //Checking for valid characters before '.'
                            if (!(index > 0 && (domainPart[index - 1] >= 'a' && domainPart[index - 1] <= 'z') || (domainPart[index - 1] >= 'A' && domainPart[index - 1] <= 'Z') || (domainPart[index - 1] >= '0' && domainPart[index - 1] <= '9')))
                            {
                                return false;
                            }

                            //Checking for valid characters after '.'
                            if (!(index < domainPart.Length - 1 && (domainPart[index + 1] >= 'a' && domainPart[index + 1] <= 'z') || (domainPart[index + 1] >= 'A' && domainPart[index + 1] <= 'Z') || (domainPart[index + 1] >= '0' && domainPart[index + 1] <= '9')))
                            {
                                return false;
                            }
                        }
                    }

                    //If all checks passed, the email is valid.
                    return true;
                }
            }
        }
    }

    //If any of the checks fail, the email is not valid.
    return false;
}