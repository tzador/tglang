// This code snippet is a complex algorithm for sorting an array of integers using the bubble sort method

// The bubble sort method works by repeatedly swapping adjacent elements if they are in the wrong order
// In each iteration, the largest element will be pushed to the end of the array
// The sort will continue until no more swaps are needed, indicating that the array is now in sorted order

// First, we define a method for swapping two elements in an array
void Swap(int[] arr, int index1, int index2)
{
    int temp = arr[index1];
    arr[index1] = arr[index2];
    arr[index2] = temp;
}

// Next, we define our bubble sort method
void BubbleSort(int[] arr)
{
    int n = arr.Length;

    // Traverse through the array
    for (int i = 0; i < n - 1; i++) 
    {
        // We set a flag to keep track of whether any swaps were made in a particular iteration
        bool swapped = false;

        // Each iteration, we compare adjacent elements and swap them if necessary
        for (int j = 0; j < n - i - 1; j++)
        {
            // If the current element is greater than the next element, we swap them
            if (arr[j] > arr[j + 1])
            {
                Swap(arr, j, j + 1);
                // Set the flag to true to indicate that a swap has been made
                swapped = true;
            }
        }

        // If no swaps were made in an iteration, the array is already sorted and we can break out of the loop
        if (!swapped)
            break;
    }
}

// To test the algorithm, we create an array of integers and call the BubbleSort method
int[] arr = { 5, 2, 8, 3, 1 };
BubbleSort(arr);

// The sorted array will now be: { 1, 2, 3, 5, 8 }