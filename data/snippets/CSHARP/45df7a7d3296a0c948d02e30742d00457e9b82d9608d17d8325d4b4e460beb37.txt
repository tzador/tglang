using System; // This line imports the System namespace which contains important functions and classes

public static class Fibonacci { // This creates a public class called Fibonacci that is marked as static
    // This function recursively calculates the n-th Fibonacci number
    public static int calculateFibonacci(int n) { // This creates a public static function called calculateFibonacci that takes an integer n as a parameter
        if (n == 0) return 0; // If n is equal to 0, return 0
        if (n == 1) return 1; // If n is equal to 1, return 1
        return calculateFibonacci(n - 1) + calculateFibonacci(n - 2); // Otherwise, return the sum of calculateFibonacci(n-1) and calculateFibonacci(n-2)
    }

    // This function iteratively calculates the n-th Fibonacci number
    public static int calculateFibonacciIterative(int n) { // This creates a public static function called calculateFibonacciIterative that takes an integer n as a parameter
        int first = 0; // Initialize first as 0
        int second = 1; // Initialize second as 1
        for (int i = 2; i < n; i++) { // Create a for loop with i starting at 2 and incrementing until i is equal to n 
            int temp = first + second; // Create temporary variable temp to store the sum of first and second
            first = second; // Set first equal to second
            second = temp; // Set second equal to temp
        }
        return second; // Return second, which is the n-th Fibonacci number
    }
}

public static void Main() { // This creates a public static function called Main that doesn't take any parameters
    int n = 10; // Initialize n as 10
    int recursiveFib = Fibonacci.calculateFibonacci(n); // Call the calculateFibonacci function with n as a parameter and store the result in recursiveFib
    int iterativeFib = Fibonacci.calculateFibonacciIterative(n); // Call the calculateFibonacciIterative function with n as a parameter and store the result in iterativeFib

    Console.WriteLine("Recursive Fibonacci for n={0}: {1}", n, recursiveFib); // Print the recursive Fibonacci number for n=10
    Console.WriteLine("Iterative Fibonacci for n={0}: {1}", n, iterativeFib); // Print the iterative Fibonacci number for n=10
}