// This code snippet makes use of inheritance and polymorphism to create a complex class hierarchy and override methods for different derived classes
public class Shape // base class for all shapes
{
    protected double length;
    protected double width;

    public virtual double CalculateArea() // virtual method to calculate the area of the shape
    {
        return length * width;
    }
}

public class Rectangle : Shape // derived class for rectangle
{
    // overrides the CalculateArea method for rectangle
    public override double CalculateArea()
    {
        return length * width;
    }
}

public class Square : Shape // derived class for square
{
    // overrides the CalculateArea method for square
    public override double CalculateArea()
    {
        return length * length;
    }
}

public class Triangle : Shape // derived class for triangle
{
    private double height; // additional parameter for triangle

    // constructor with parameters for length, width, and height
    public Triangle(double length, double width, double height)
    {
        this.length = length;
        this.width = width;
        this.height = height;
    }

    // overrides the CalculateArea method for triangle
    public override double CalculateArea()
    {
        return (length * width)/2;
    }
}

// main method to test the hierarchy and polymorphism
public static void Main()
{
    // create an instance of rectangle
    Rectangle rectangle = new Rectangle();
    rectangle.length = 5;
    rectangle.width = 10;

    // create an instance of square
    Square square = new Square();
    square.length = 5;

    // create an instance of triangle
    Triangle triangle = new Triangle(5, 3, 4);

    // call the CalculateArea method for each shape and print the result
    Console.WriteLine("Area of rectangle: {0}", rectangle.CalculateArea());
    Console.WriteLine("Area of square: {0}", square.CalculateArea());
    Console.WriteLine("Area of triangle: {0}", triangle.CalculateArea());
}