/* 
This code snippet demonstrates the use of generics and LINQ in C#
*/

using System;
using System.Collections.Generic;
using System.Linq;

namespace GenericsDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            // Create a list of integers
            List<int> numbers = new List<int>();
            numbers.Add(10);
            numbers.Add(20);
            numbers.Add(30);
            numbers.Add(40);
            numbers.Add(50);

            // Use LINQ to filter the list and select only even numbers
            var evenNumbers = numbers.Where(n => n % 2 == 0);

            // Use generics to create a generic class that can hold any data type
            MyList<string> names = new MyList<string>();
            names.Add("John");
            names.Add("Jane");
            names.Add("Kate");

            // Use LINQ to order the list alphabetically
            var orderedNames = names.OrderBy(n => n);

            // Print the results
            Console.WriteLine("Even Numbers:");
            foreach (var num in evenNumbers)
            {
                Console.WriteLine(num);
            }

            Console.WriteLine("Ordered Names:");
            foreach (var name in orderedNames)
            {
                Console.WriteLine(name);
            }

            // Keep the console window open
            Console.ReadLine();
        }

        // Generic class that can hold any data type
        class MyList<T>
        {
            private List<T> items = new List<T>();

            public void Add(T item)
            {
                items.Add(item);
            }

            public List<T> GetData()
            {
                return items;
            }
        }
    }
}