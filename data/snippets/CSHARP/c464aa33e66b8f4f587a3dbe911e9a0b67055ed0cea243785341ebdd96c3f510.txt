/// <summary>
/// This method compares two strings and returns
/// the difference between them as a percentage.
/// </summary>
/// <param name="str1">The first string to compare.</param>
/// <param name="str2">The second string to compare.</param>
/// <returns>The difference between the two strings as a percentage.</returns>
public double CompareStrings(string str1, string str2)
{
    if (str1 == null || str2 == null)
    {
        throw new ArgumentNullException();
    }

    if (str1 == str2)
    {
        return 0.0;
    }

    int length1 = str1.Length;
    int length2 = str2.Length;
    int[,] matrix = new int[length1 + 1, length2 + 1];

    // Initialize the matrix with the default values.
    for (int i = 0; i <= length1; i++)
    {
        matrix[i, 0] = i;
    }
    for (int i = 0; i <= length2; i++)
    {
        matrix[0, i] = i;
    }

    // Loop through the matrix, calculating the cost of character substitutions.
    for (int i = 1; i <= length1; i++)
    {
        for (int j = 1; j <= length2; j++)
        {
            // Calculate the cost of substitution based on the characters at each index.
            int cost = (str1[i - 1] == str2[j - 1]) ? 0 : 1;

            // Get the minimum cost from the previous adjacent cells.
            int deletion = matrix[i - 1, j] + 1;
            int insertion = matrix[i, j - 1] + 1;
            int substitution = matrix[i - 1, j - 1] + cost;
            int minCost = Math.Min(deletion, Math.Min(insertion, substitution));

            // Update the current cell with the minimum cost.
            matrix[i, j] = minCost;
        }
    }

    // Calculate the percentage difference using the formula:
    // (maximum string length - minimum cost) / maximum string length
    int maxLength = Math.Max(length1, length2);
    double difference = (double)(maxLength - matrix[length1, length2]) / maxLength;

    return difference;
}