using System;

//create a generic class called 'LinkedList' with a type parameter 'T'
public class LinkedList<T>
{
    //create a node class with a value property and a next node pointer property
    private class Node
    {
        public T Value { get; set; }
        public Node Next { get; set; }
    }

    //private variable to keep track of head and tail nodes
    private Node head;
    private Node tail;

    //method to add a node to the end of the linked list
    public void AddNode(T val)
    {
        //create a new node with the given value
        Node newNode = new Node();
        newNode.Value = val;

        //if the list is empty, set head and tail to the new node
        if (head == null)
        {
            head = tail = newNode;
        }
        //otherwise, add the new node to the end and update tail
        else
        {
            tail.Next = newNode;
            tail = newNode;
        }
    }

    //method to remove the first occurrence of a specific value from the linked list
    public bool RemoveNode(T val)
    {
        //if the list is empty, return false
        if (head == null)
        {
            return false;
        }
        //if the head node contains the value, remove it and update head
        else if (head.Value.Equals(val))
        {
            head = head.Next;
            return true;
        }
        //otherwise, traverse the list and find the first node with the given value and remove it
        else
        {
            Node current = head;
            while (current.Next != null)
            {
                if (current.Next.Value.Equals(val))
                {
                    current.Next = current.Next.Next;
                    return true;
                }
                current = current.Next;
            }
            return false;
        }
    }

    //method to print the linked list
    public void PrintList()
    {
        //if the list is empty, print a message
        if (head == null)
        {
            Console.WriteLine("List is empty");
        }
        //otherwise, traverse the list and print each node's value
        else
        {
            Node current = head;
            while (current != null)
            {
                Console.Write(current.Value + " ");
                current = current.Next;
            }
        }
    }
}

//sample usage of the generic LinkedList class
public class Program
{
    public static void Main()
    {
        //create a new linked list with integer elements
        LinkedList<int> list = new LinkedList<int>();

        //add nodes with values 1, 2, 3 to the list
        list.AddNode(1);
        list.AddNode(2);
        list.AddNode(3);

        //print the list
        list.PrintList();

        //remove the node with value 2 from the list
        list.RemoveNode(2);

        //print the list again
        list.PrintList();
    }
}