// This code snippet is a complex sorting algorithm using the quicksort method
// It takes in an array of integers and sorts them in ascending order
void Quicksort(int[] array, int low, int high)
{
    if (low >= high)
        return;

    // Divide the array by choosing a pivot element
    int pivot = array[(low + high) / 2];

    // Create two temporary arrays to hold the smaller and larger elements
    int[] smaller = new int[high - low + 1];
    int[] larger = new int[high - low + 1];

    // Loop through the array and place elements < pivot in the smaller array and elements > pivot in the larger array
    for (int i = low; i <= high; i++)
    {
        if (array[i] < pivot)
            smaller[i] = array[i];
        else
            larger[i] = array[i];
    }

    // Recursive call on smaller and larger arrays to perform quicksort
    Quicksort(smaller, 0, smaller.Length - 1);
    Quicksort(larger, 0, larger.Length - 1);

    // Merge the smaller, pivot, and larger arrays into one sorted array
    int index = low;
    for (int i = 0; i < smaller.Length; i++)
    {
        array[index] = smaller[i];
        index++;
    }
    array[index] = pivot;
    index++;

    for (int i = 0; i < larger.Length; i++)
    {
        array[index] = larger[i];
        index++;
    }
}

// Example usage:
int[] numbers = { 5, 2, 8, 12, 3, 1 };
Quicksort(numbers, 0, numbers.Length - 1);