/* This is a C# code snippet that generates a random maze using a depth-first search algorithm. */
// Initialize the maze grid
int[,] grid = new int[10, 10];
// Set the starting cell
int currentRow = 1;
int currentCol = 1;
// Use a stack to keep track of visited cells
Stack<int[]> stack = new Stack<int[]>();
// Push the starting cell onto the stack
stack.Push(new int[] { currentRow, currentCol });
// Loop until all cells have been visited
while (stack.Count > 0)
{
    // Get the current cell's coordinates
    int[] currentCell = stack.Pop();
    currentRow = currentCell[0];
    currentCol = currentCell[1];
    // Check if all surrounding cells have been visited
    if (currentRow >= grid.GetLength(0) - 1 || currentCol >= grid.GetLength(1) - 1 || currentRow <= 0 || currentCol <= 0)
    {
        continue; // Skip to the next cell
    }
    // Check if the cell has not already been visited
    if (grid[currentRow, currentCol] == 0)
    {
        // Mark cell as visited
        grid[currentRow, currentCol] = 1;
        // Generate a random order for the directions to visit neighboring cells
        List<int> directions = new List<int>() { 0, 1, 2, 3 };
        directions = ShuffleList(directions);
        // Visit each neighbor in random order
        foreach (int direction in directions)
        {
            // Get the coordinates of the neighbor cell
            int nextRow = currentRow + (direction == 0 ? -1 : (direction == 2 ? 1 : 0));
            int nextCol = currentCol + (direction == 3 ? -1 : (direction == 1 ? 1 : 0));
            // Check if the neighbor cell is within the grid and has not been visited
            if (nextRow >= grid.GetLength(0) - 1 || nextCol >= grid.GetLength(1) - 1 || nextRow <= 0 || nextCol <= 0)
            {
                continue; // Skip to the next neighbor
            }
            if (grid[nextRow, nextCol] == 0)
            {
                // Mark the neighboring cell as visited
                grid[nextRow, nextCol] = 1;
                // Carve out a path between current cell and neighbor cell
                grid[currentRow + (direction == 0 ? -1 : (direction == 2 ? 1 : 0)), currentCol + (direction == 3 ? -1 : (direction == 1 ? 1 : 0))] = 1;
                // Push the neighbor cell onto the stack to be visited next
                stack.Push(new int[] { nextRow, nextCol });
                break; // Exit the loop to move on to the next cell
            }
        }
    }
}
// Helper function to shuffle a list
List<int> ShuffleList(List<int> list)
{
    Random random = new Random();
    int n = list.Count;
    while (n > 1)
    {
        n--;
        int k = random.Next(n + 1);
        int value = list[k];
        list[k] = list[n];
        list[n] = value;
    }
    return list;
}
// Print the generated maze
for (int i = 0; i < grid.GetLength(0); i++)
{
    for (int j = 0; j < grid.GetLength(1); j++)
    {
        Console.Write(grid[i, j] == 1 ? "  " : "\u2588\u2588"); // Empty cell = '  ', Wall = '\u2588\u2588'
    }
    Console.WriteLine();
}