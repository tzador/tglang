/// <summary>
/// This is a class for managing bank accounts.
/// </summary>
public class BankAccount
{
    /// <summary>
    /// Private field for storing the account number.
    /// </summary>
    private string accountNumber;

    /// <summary>
    /// Property for retrieving and setting the account number.
    /// </summary>
    public string AccountNumber
    {
        get
        {
            return accountNumber;
        }
        set
        {
            accountNumber = value;
        }
    }

    /// <summary>
    /// Private field for storing the account balance.
    /// </summary>
    private decimal accountBalance;

    /// <summary>
    /// Property for retrieving and setting the account balance.
    /// </summary>
    public decimal AccountBalance
    {
        get
        {
            return accountBalance;
        }
        set
        {
            accountBalance = value;
        }
    }

    /// <summary>
    /// Constructor for creating a new BankAccount object.
    /// </summary>
    /// <param name="accountNumber">The account number for the new account.</param>
    /// <param name="accountBalance">The starting balance for the new account.</param>
    public BankAccount(string accountNumber, decimal accountBalance)
    {
        this.AccountNumber = accountNumber;
        this.AccountBalance = accountBalance;
    }

    /// <summary>
    /// Method for depositing money into the account.
    /// </summary>
    /// <param name="amount">The amount of money to deposit.</param>
    public void Deposit(decimal amount)
    {
        this.AccountBalance += amount;
    }

    /// <summary>
    /// Method for withdrawing money from the account.
    /// </summary>
    /// <param name="amount">The amount of money to withdraw.</param>
    public void Withdraw(decimal amount)
    {
        if(this.AccountBalance < amount)
        {
            Console.WriteLine("Insufficient funds. Cannot withdraw {0:c} from account.", amount);
        }
        else
        {
            this.AccountBalance -= amount;
        }
    }

    /// <summary>
    /// Method for transferring money between two bank accounts.
    /// </summary>
    /// <param name="amount">The amount of money to transfer.</param>
    /// <param name="destinationAccount">The account to transfer the money to.</param>
    public void Transfer(decimal amount, BankAccount destinationAccount)
    {
        if(this.AccountBalance < amount)
        {
            Console.WriteLine("Insufficient funds. Cannot transfer {0:c} from account.", amount);
        }
        else
        {
            this.Withdraw(amount);
            destinationAccount.Deposit(amount);
        }
    }
}
/// <summary>
/// This is a class for managing credit cards.
/// </summary>
public class CreditCard
{
    /// <summary>
    /// Private field for storing the card number.
    /// </summary>
    private string cardNumber;

    /// <summary>
    /// Property for retrieving and setting the card number.
    /// </summary>
    public string CardNumber
    {
        get
        {
            return cardNumber;
        }
        set
        {
            cardNumber = value;
        }
    }

    /// <summary>
    /// Private field for storing the credit limit.
    /// </summary>
    private decimal creditLimit;

    /// <summary>
    /// Property for retrieving and setting the credit limit.
    /// </summary>
    public decimal CreditLimit
    {
        get
        {
            return creditLimit;
        }
        set
        {
            creditLimit = value;
        }
    }

    /// <summary>
    /// Private field for storing the current balance.
    /// </summary>
    private decimal currentBalance;

    /// <summary>
    /// Property for retrieving and setting the current balance.
    /// </summary>
    public decimal CurrentBalance
    {
        get
        {
            return currentBalance;
        }
        set
        {
            currentBalance = value;
        }
    }

    /// <summary>
    /// Constructor for creating a new CreditCard object.
    /// </summary>
    /// <param name="cardNumber">The card number for the new credit card.</param>
    /// <param name="creditLimit">The credit limit for the new credit card.</param>
    public CreditCard (string cardNumber, decimal creditLimit)
    {
        this.CardNumber = cardNumber;
        this.CreditLimit = creditLimit;
        this.currentBalance = 0;
    }

    /// <summary>
    /// Method for making a purchase with the credit card.
    /// </summary>
    /// <param name="amount">The amount of the purchase.</param>
    public void Purchase(decimal amount)
    {
        if(this.CurrentBalance + amount > this.CreditLimit)
        {
            Console.WriteLine("Exceeding credit limit. Cannot make purchase of {0:c}.", amount);
        }
        else
        {
            this.CurrentBalance += amount;
        }
    }

    /// <summary>
    /// Method for paying off the credit card balance.
    /// </summary>
    /// <param name="amount">The amount to pay off.</param>
    public void PayOff(decimal amount)
    {
        this.CurrentBalance -= amount;
    }
}