//This is a code snippet in C#

//Create base class "Shape"
public class Shape
{
  //Protected variables can be accessed by derived classes
  protected double length;
  protected double width;

  //Constructor to set length and width
  public Shape(double l, double w)
  {
    length = l;
    width = w;
  }

  //Virtual method to calculate area, to be overridden by derived classes
  public virtual double CalculateArea()
  {
    return 0.0;
  }
}

//Create derived class "Rectangle"
public class Rectangle : Shape
{
  //Constructor to inherit length and width from base class
  public Rectangle(double l, double w) : base(l, w)
  {
  }

  //Override base class method to calculate area for a rectangle
  public override double CalculateArea()
  {
    //Use base class variables to perform calculation
    return length * width;
  }
}

//Create derived class "Triangle"
public class Triangle : Shape
{
  //Constructor to inherit length and width from base class
  public Triangle(double l, double w) : base(l, w)
  {
  }

  //Override base class method to calculate area for a triangle
  public override double CalculateArea()
  {
    //Use base class variables to perform calculation
    return 0.5 * length * width;
  }
}

//Create an array of different shapes
Shape[] shapesArray = new Shape[]
{
  //Create instances of rectangle and triangle using the derived classes
  new Rectangle(5, 3),
  new Triangle(4, 6)
};

//Iterate through the array and calculate the area for each shape
foreach (Shape shape in shapesArray)
{
  //Call the virtual method to calculate area for the specific shape
  double area = shape.CalculateArea();

  //Print out the shape and its corresponding area
  Console.WriteLine($"Shape: {shape.GetType().Name}, Area: {area}");
}