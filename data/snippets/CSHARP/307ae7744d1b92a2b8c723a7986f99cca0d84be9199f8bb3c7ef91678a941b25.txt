//A method that initializes a matrix and calculates its determinant

public void InitializeMatrix(int rows, int cols)
{
    double[,] matrix = new double[rows, cols];

    //populate matrix with random numbers
    Random rand = new Random();

    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            matrix[i, j] = rand.NextDouble() * 10; 
        }
    }

    //calculate determinant using recursive function
    double det = CalculateDeterminant(matrix, rows);

    //print out matrix and determinant
    Console.WriteLine("The matrix is:");
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            Console.Write(matrix[i, j] + " ");
        }
        Console.WriteLine(); //go to next line
    }
    Console.WriteLine("The determinant is: " + det);
}

//recursive function to calculate determinant
public double CalculateDeterminant(double[,] matrix, int n)
{
    if (n == 1) //base case
    {
        return matrix[0, 0];
    }
    else
    {
        double det = 0; //determinant
        int sign = 1; //sign multiplier for submatrices
        //loop through first row of matrix
        for (int i = 0; i < n; i++)
        {
            //calculate submatrix
            double[,] subMatrix = GetSubmatrix(matrix, n, i);
            //recursive call to calculate determinant of submatrix
            det += sign * matrix[0, i] * CalculateDeterminant(subMatrix, n - 1);
            sign = -sign; //flip sign for next submatrix
        }
        return det; //return determinant
    }
}

//method to get submatrix by removing first row and specified column
public double[,] GetSubmatrix(double[,] matrix, int n, int col)
{
    double[,] subMatrix = new double[n - 1, n - 1];
    int r = 0; //row counter for submatrix
    for (int i = 1; i < n; i++)
    {
        int c = 0; //column counter for submatrix
        for (int j = 0; j < n; j++)
        {
            if (j != col) //skip specified column
            {
                subMatrix[r, c] = matrix[i, j]; //add value to submatrix
                c++; //increment column counter
            }
        }
        r++; //increment row counter
    }
    return subMatrix; //return submatrix
}