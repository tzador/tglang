/// <summary>
/// Represents a custom class that implements the IDisposable interface
/// </summary>
public class CustomClass : IDisposable {
    private bool disposed = false; // flag to track whether the Dispose() method has been called

    /// <summary>
    /// Constructor for the CustomClass
    /// </summary>
    public CustomClass() {
        // perform initialization logic
    }

    /// <summary>
    /// Method to be called when the object is no longer needed
    /// </summary>
    public void Dispose() {
        Dispose(true); // calls the overloaded Dispose() method passing in the value true
        GC.SuppressFinalize(this); // tells the garbage collector that finalization of the object is not required
    }

    /// <summary>
    /// Overloaded Dispose() method that takes in a boolean parameter
    /// </summary>
    /// <param name="disposing">A boolean value indicating whether managed resources should be disposed</param>
    protected virtual void Dispose(bool disposing) {
        if (!disposed) { // checks if the Dispose() method has already been called
            if (disposing) {
                // dispose of managed resources
            }

            // dispose of unmanaged resources here

            disposed = true; // sets the disposed flag to true
        }
    }

    /// <summary>
    /// Finalizer method to release unmanaged resources if the Dispose() method was not called
    /// </summary>
    ~CustomClass() {
        Dispose(false); // calls the overloaded Dispose() method passing in the value false
    }

    public static void Main() {
        using (CustomClass custom = new CustomClass()) { // using block to automatically call the Dispose() method when the object goes out of scope
            // perform operations using the custom object
        }
        // after the using block, the Dispose() method has been automatically called and the object is no longer needed
    }
}