// An example of a complex data structure in C#
// This data structure is a graph with nodes and edges

public class Node 
{
    // A node has a value and a list of its children
    public int value;
    public List<Node> children = new List<Node>();

    // Constructor to initialize the node with a value
    public Node(int value) 
    {
        this.value = value;
    }

    // Method to add a child node to the current node
    public void AddChild(Node child) 
    {
        children.Add(child);
    }

    // Method to search for a specific value in the graph using depth-first traversal
    public bool DepthFirstSearch(int targetValue) 
    {
        // Create a stack to store visited nodes
        Stack<Node> stack = new Stack<Node>();

        // Mark the current node as visited
        this.visited = true;

        // Add this node to the stack
        stack.Push(this);

        // Loop until the stack is empty
        while (stack.Count != 0) 
        {
            // Get the top node from the stack
            Node currentNode = stack.Pop();

            // Check if the current node has the target value
            if (currentNode.value == targetValue) 
            {
                return true;
            }

            // Loop through the current node's children
            foreach (Node child in currentNode.children) 
            {
                // Check if the child has not been visited
                if (!child.visited) 
                {
                    // Mark the child as visited
                    child.visited = true;

                    // Add the child to the stack
                    stack.Push(child);
                }
            }
        }

        // If the target value is not found, return false
        return false;
    }
}