// Annotated code snippet in CSHARP
// This code snippet demonstrates creating and using an abstract class with properties and a method

// Abstract class with a public property and a protected property
abstract class Vehicle
{
    public string Make { get; set; } // public property
    protected double GasMileage { get; set; } // protected property

    // Constructor for the abstract class
    public Vehicle(string make, double gasMileage)
    {
        this.Make = make;
        this.GasMileage = gasMileage;
    }

    // Abstract method to calculate annual gas cost
    public abstract double CalculateAnnualGasCost(double distance, double gasPricePerGallon);
}

// Derived class that inherits from the abstract class Vehicle
// Uses the protected GasMileage property and implements the abstract method CalculateAnnualGasCost
class Car : Vehicle
{
    // Constructor for the Car class, calling the base class constructor
    public Car(string make, double gasMileage) : base(make, gasMileage)
    {

    }

    // Implementation of the abstract method to calculate annual gas cost for a car
    public override double CalculateAnnualGasCost(double distance, double gasPricePerGallon)
    {
        return (distance / this.GasMileage) * gasPricePerGallon;
    }
}

// Main method to test the abstract class and derived class
class Program
{
    static void Main(string[] args)
    {
        // Creating a new car object with a make of 'Ford' and a gas mileage of 30 mpg
        Car myCar = new Car("Ford", 30);

        // Calculating the annual gas cost for driving 10,000 miles with a gas price of $3.00 per gallon
        double annualGasCost = myCar.CalculateAnnualGasCost(10000, 3.00);

        // Printing the results
        Console.WriteLine($"The annual gas cost for my {myCar.Make} is ${annualGasCost}");
    }
}