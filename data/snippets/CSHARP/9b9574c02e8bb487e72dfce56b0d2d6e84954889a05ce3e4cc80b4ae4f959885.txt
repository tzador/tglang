// This code snippet implements a binary search algorithm to find a specific element in a sorted array

// Define a binary search function that takes in an array, target element, and starting and ending indices
public static int BinarySearch(int[] arr, int target, int start, int end)
{
    // Keep looping while start is less than or equal to end
    while (start <= end)
    {
        // Find the middle index of the array
        int mid = (start + end) / 2;

        // If the target element is equal to the middle element, return middle index
        if (arr[mid] == target)
        {
            return mid;
        }
        // If the target element is less than the middle element, set end index to be one less than middle index
        else if (arr[mid] > target)
        {
            end = mid - 1;
        }
        // If the target element is greater than the middle element, set start index to be one more than middle index
        else
        {
            start = mid + 1;
        }
    }

    // If element is not found, return -1
    return -1;
}

// Define an array
int[] arr = { 1, 5, 9, 10, 14, 16, 19 };

// Define target element to search for
int target = 16;

// Call the binary search function passing in the array, target element, and starting and ending indices
int result = BinarySearch(arr, target, 0, arr.Length - 1);

// Print the index of the target element
Console.WriteLine("Target element found at index: " + result);