// This code creates a Person class with several properties and methods

public class Person
{
	// Private fields for the person's name and age
	private string name;
	private int age;
	
	// Public property that allows access to the person's name
	public string Name
	{
		get => name;
		set => name = value;
	}
	
	// Public property that allows access to the person's age
	public int Age
	{
		get => age;
		set => age = value;
	}
	
	// Constructor to create a Person object with a specified name and age
	public Person(string name, int age)
	{
		this.name = name;
		this.age = age;
	}
	
	// Method to check if the person is old enough to vote
	public bool CanVote()
	{
		// If the person's age is greater than or equal to 18, return true
		if (age >= 18)
		{
			return true;
		}
		
		// Otherwise, return false
		return false;
	}
	
	// Method to greet the person by their specified name
	public void Greet()
	{
		// Print a greeting message with the person's name
		Console.WriteLine("Hello, my name is " + name + "!");
	}
	
	// Main method to create and use an instance of the Person class
	public static void Main()
	{
		// Create a new Person object with the name "John" and age 25
		Person john = new Person("John", 25);
		
		// Use the Name property to set the person's name to "Jane"
		john.Name = "Jane";
		
		// Use the Age property to set the person's age to 30
		john.Age = 30;
		
		// Call the Greet method to print a greeting with the person's name
		john.Greet();
		
		// Call the CanVote method to check if the person is old enough to vote
		bool canVote = john.CanVote();
		
		// Print a message depending on the result of the CanVote method
		if (canVote)
		{
			Console.WriteLine("This person can vote!");
		}
		else
		{
			Console.WriteLine("This person cannot vote.");
		}
	}
}