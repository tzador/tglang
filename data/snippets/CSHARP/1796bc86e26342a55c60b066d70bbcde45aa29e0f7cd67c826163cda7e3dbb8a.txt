using System;
using System.Threading;

/// <summary>
/// Represents a custom class that implements IDisposable interface.
/// </summary>
public class CustomClass : IDisposable
{
    //private variable to track disposal status
    private bool disposed = false;
    
	//private variable to hold a timer object
    private Timer timer;
    
    //constructor method
    public CustomClass()
    {
        //initialize timer object with 1 second interval
        timer = new Timer(TimerCallback, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }
    
    //method to dispose the object
    public void Dispose()
    {
        //calling the dispose method with true to indicate manual disposal
        Dispose(true);
        
        //suppress finalization for this object
        GC.SuppressFinalize(this);
    }
    
    //protected virtual method to handle manual and finalizer disposal
    protected virtual void Dispose(bool disposing)
    {
        //check if already disposed
        if (disposed)
        {
            return;
        }
        
        //if disposing, dispose managed resources
        if (disposing)
        {
            //dispose timer object
            timer.Dispose();
        }
        
        //mark object as disposed
        disposed = true;
    }
    
    //method to execute when timer ticks
    private void TimerCallback(object state)
    {
    	//check if object is disposed
        if (disposed)
        {
            //throw ObjectDisposedException
            throw new ObjectDisposedException("CustomClass", "Object has already been disposed.");
        }
        
        //print message to console
        Console.WriteLine("Timer ticked.");
    }
    
    //destructor method
    ~CustomClass()
    {
        //call virtual dispose method with false to indicate finalizer disposal
        Dispose(false);
    }
}