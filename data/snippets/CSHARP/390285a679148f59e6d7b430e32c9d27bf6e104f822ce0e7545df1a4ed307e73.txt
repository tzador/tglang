/// <summary>
/// This method generates permutations of a given array.
/// </summary>
/// <param name="array">The array of values to be permuted.</param>
/// <param name="used">A boolean flag array to keep track of used values.</param>
/// <param name="current">The current permutation being generated.</param>
/// <param name="list">The list of generated permutations.</param>
private static void GeneratePermutations(int[] array, bool[] used, List<int> current, List<List<int>> list)
{
    // Base case: if all values have been used, add the current permutation to the list.
    if (current.Count == array.Length)
    {
        list.Add(new List<int>(current));
        return;
    }

    // Loop through the array and recursively generate permutations.
    for (int i = 0; i < array.Length; i++)
    {
        // If the value has not been used yet, add it to the current permutation and mark it as used.
        if (!used[i])
        {
            current.Add(array[i]);
            used[i] = true;
            // Recursively call the method to continue generating permutations.
            GeneratePermutations(array, used, current, list);
            // Backtrack by removing the last added value and marking it as unused.
            current.RemoveAt(current.Count - 1);
            used[i] = false;
        }
    }
}

// Sample usage:
int[] input = { 1, 2, 3 };
List<List<int>> permutations = new List<List<int>>();
GeneratePermutations(input, new bool[input.Length], new List<int>(), permutations);

Console.WriteLine("Permutations of 1, 2, 3:");
foreach (List<int> p in permutations)
{
    Console.WriteLine(string.Join(", ", p));
}

// Output:
// Permutations of 1, 2, 3:
// 1, 2, 3
// 1, 3, 2
// 2, 1, 3
// 2, 3, 1
// 3, 1, 2
// 3, 2, 1