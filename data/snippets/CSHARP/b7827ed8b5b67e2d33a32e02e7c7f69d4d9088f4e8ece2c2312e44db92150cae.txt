// Abstract class
abstract class Vehicle
{
    // Protected properties
    protected string model;
    protected int year;

    // Constructor with parameters
    public Vehicle(string model, int year)
    {
        this.model = model;
        this.year = year;
    }

    // Abstract method
    public abstract void DisplayInfo();

    // Virtual method
    public virtual void Drive()
    {
        Console.WriteLine("Driving " + this.model + " from " + this.year);
    }
}

// Derived class
class Car : Vehicle
{
    // Private property
    private string color;

    // Constructor with parameters
    public Car(string model, int year, string color) : base(model, year)
    {
        this.color = color;
    }

    // Implementation of abstract method
    public override void DisplayInfo()
    {
        Console.WriteLine("This is a " + this.color + " " + this.model + " from " + this.year);
    }

    // Override base method
    public override void Drive()
    {
        Console.WriteLine("Driving the car: " + this.model + " Color: " + this.color);
    }
}

// Main method
static void Main(string[] args)
{
    // Create instance of Car class
    Car myCar = new Car("Toyota", 2021, "blue");

    // Call methods
    myCar.DisplayInfo();
    myCar.Drive();
}