// This program uses a binary search algorithm to find a number in a sorted list

using System;

// A helper function to perform binary search
// Parameters:
//        arr: array of numbers sorted in ascending order
//        num: number to search for
//        low: starting index for search
//        high: ending index for search
// Returns:
//        index of the number in the array, or -1 if not found
public static int BinarySearch(int[] arr, int num, int low, int high)
{
    // Keep searching until low is less than or equal to high
    while (low <= high)
    {
        // Calculate the middle index of the search range
        int mid = (low + high) / 2;

        // If the middle element is the number we're searching for, return its index
        if (arr[mid] == num)
        {
            return mid;
        }
        // If the middle element is greater than the number, search the first half of the array
        else if (arr[mid] > num)
        {
            high = mid - 1;
        }
        // If the middle element is less than the number, search the second half of the array
        else
        {
            low = mid + 1;
        }
    }
    // If the number is not found, return -1
    return -1;
}

// An example of using the BinarySearch function
public static void Main()
{
    // Initialize an array of sorted numbers
    int[] numbers = { 2, 4, 8, 10, 13, 16, 19, 20, 35 };

    // Number to search for
    int searchNum = 10;

    // Call BinarySearch function to find the index of the number
    int result = BinarySearch(numbers, searchNum, 0, numbers.Length - 1);

    // Check if the result is -1, indicating the number was not found
    if (result == -1)
    {
        Console.WriteLine($"{searchNum} was not found in the array.");
    }
    // If the result is not -1, print the index where the number was found
    else
    {
        Console.WriteLine($"{searchNum} was found at index {result}.");
    }
}