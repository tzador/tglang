/// <summary>
/// Class representing a bank account.
/// </summary>
public class BankAccount
{
    // Private fields for storing account information.
    private string accountNumber;
    private string accountHolder;
    private decimal balance;

    /// <summary>
    /// Constructor for creating a new BankAccount instance with specified account information.
    /// </summary>
    /// <param name="accountNumber">The account number of the bank account.</param>
    /// <param name="accountHolder">The name of the account holder.</param>
    /// <param name="balance">The balance of the bank account.</param>
    public BankAccount(string accountNumber, string accountHolder, decimal balance)
    {
        this.accountNumber = accountNumber;
        this.accountHolder = accountHolder;
        this.balance = balance;
    }

    /// <summary>
    /// Method for depositing funds into the bank account.
    /// </summary>
    /// <param name="amount">The amount to be deposited.</param>
    public void DepositFunds(decimal amount)
    {
        balance += amount;
    }

    /// <summary>
    /// Method for withdrawing funds from the bank account, if there are sufficient funds.
    /// </summary>
    /// <param name="amount">The amount to be withdrawn.</param>
    /// <returns>A boolean value indicating whether the withdrawal was successful or not.</returns>
    public bool WithdrawFunds(decimal amount)
    {
        if (balance >= amount)
        {
            balance -= amount;
            return true;
        }
        else
        {
            return false;
        }
    }

    /// <summary>
    /// Property for accessing the account number.
    /// </summary>
    public string AccountNumber
    {
        get { return accountNumber; }
    }

    /// <summary>
    /// Property for accessing the account holder's name.
    /// </summary>
    public string AccountHolder
    {
        get { return accountHolder; }
        set { accountHolder = value; }
    }

    /// <summary>
    /// Property for accessing the current balance of the bank account.
    /// </summary>
    public decimal Balance
    {
        get { return balance; }
    }

    /// <summary>
    /// Method for transferring funds from this bank account to another bank account.
    /// </summary>
    /// <param name="amount">The amount to be transferred.</param>
    /// <param name="recipient">The BankAccount object of the recipient's bank account.</param>

    public void TransferFunds(decimal amount, BankAccount recipient)
    {
        if (balance >= amount)
        {
            // Withdraw funds from this account.
            balance -= amount;

            // Deposit funds into recipient's account.
            recipient.DepositFunds(amount);
        }
    }
}