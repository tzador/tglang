// This code snippet demonstrates how to create an object-oriented programming structure in C#

// Create a class named "Animal"
public class Animal
{
    // Declare private variables
    private string name;
    private int age;
	
    // Create constructor method
    public Animal(string name, int age)
    {
        // Assign values to private variables
        this.name = name;
        this.age = age;
    }
	
    // Create a method to set the name property
    public void SetName(string newName)
    {
        this.name = newName;
    }
	
    // Create a method to set the age property
    public void SetAge(int newAge)
    {
        this.age = newAge;
    }
	
    // Create a method to print the name and age of Animal object
    public void PrintInfo()
    {
        Console.WriteLine("Name: " + this.name);
        Console.WriteLine("Age: " + this.age);
    }
}

// Create a class named "Dog" that inherits from the "Animal" class
public class Dog : Animal
{
    // Declare private variable
    private string breed;
	
    // Create constructor method
    public Dog(string name, int age, string breed) : base(name, age)
    {
        // Assign value to private variable
        this.breed = breed;
    }
	
    // Create a method to set the breed property
    public void SetBreed(string newBreed)
    {
        this.breed = newBreed;
    }
	
    // Override the PrintInfo method from the "Animal" class
    public override void PrintInfo()
    {
        base.PrintInfo(); // Call the base class method
        Console.WriteLine("Breed: " + this.breed);
    }
}

// Create an instance of the "Dog" class
Dog myDog = new Dog("Max", 5, "Labrador");

// Call the SetName method
myDog.SetName("Charlie");

// Call the PrintInfo method
myDog.PrintInfo(); // Output: Name: Charlie, Age: 5, Breed: Labrador