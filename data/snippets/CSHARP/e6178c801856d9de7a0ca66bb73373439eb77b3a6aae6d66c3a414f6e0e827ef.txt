// This code snippet is a basic implementation of a binary search tree in C#
using System;

public class TreeNode
{
    public int data; // data value stored in the node
    public TreeNode left; // left subtree
    public TreeNode right; // right subtree

    // Constructor to initialize a new tree node
    public TreeNode(int value)
    {
        data = value; // set data value
        left = null; // initialize left subtree as null
        right = null; // initialize right subtree as null
    }
}

public class BinarySearchTree
{
    public TreeNode root; // root node of the binary search tree

    // Constructor to initialize a binary search tree with a root node
    public BinarySearchTree(TreeNode rootNode)
    {
        root = rootNode;
    }

    // Method to insert a new node into the binary search tree
    public void Insert(int value)
    {
        TreeNode newNode = new TreeNode(value); // create a new tree node with the given value
        if (root == null) // if the binary search tree is empty, set the new node as the root
            root = newNode;
        else // if the binary search tree is not empty
        {
            TreeNode current = root; // start at the root node
            TreeNode parent; // parent node of the current node
            while (true)
            {
                parent = current; // set the current node as the parent node
                if (value < current.data) // if the new value is less than the current node's data
                {
                    current = current.left; // move to the left subtree
                    if (current == null) // if the left subtree is empty
                    {
                        parent.left = newNode; // set the new node as the left child of the parent node
                        break; // exit the loop
                    }
                }
                else // if the new value is greater than or equal to the current node's data
                {
                    current = current.right; // move to the right subtree
                    if (current == null) // if the right subtree is empty
                    {
                        parent.right = newNode; // set the new node as the right child of the parent node
                        break; // exit the loop
                    }
                }
            }
        }
    }

    // Method to check if a given value exists in the binary search tree
    public bool Search(int value)
    {
        TreeNode current = root; // start at the root node
        while (current != null) // loop until a null node is reached
        {
            if (value == current.data) // if the value is equal to the current node's data
                return true; // return true
            else if (value < current.data) // if the value is less than the current node's data
                current = current.left; // move to the left subtree
            else // if the value is greater than the current node's data
                current = current.right; // move to the right subtree
        }
        return false; // if the value is not found, return false
    }

    // Method to delete a node from the binary search tree
    public bool Delete(int value)
    {
        TreeNode current = root; // start at the root node
        TreeNode parent = root; // parent node of the current node
        bool isLeftChild = true; // boolean flag to indicate if the current node is the left child of its parent
        // loop until a null node is reached or the value is found
        while (current.data != value)
        {
            parent = current; // set the current node as the parent node
            if (value < current.data) // if the value is less than the current node's data
            {
                isLeftChild = true; // set the boolean flag to true
                current = current.left; // move to the left subtree
            }
            else // if the value is greater than the current node's data
            {
                isLeftChild = false; // set the boolean flag to false
                current = current.right; // move to the right subtree
            }
            if (current == null) // if a null node is reached, the value does not exist in the binary search tree
                return false; // return false
        }
        // if the current node is a leaf node (no children)
        if (current.left == null && current.right == null)
        {
            if (current == root) // if the current node is the root node
                root = null; // set the root node to null
            else if (isLeftChild) // if the current node is the left child of its parent
                parent.left = null; // set the left child of the parent node to null
            else // if the current node is the right child of its parent
                parent.right = null; // set the right child of the parent node to null
        }
        // if the current node has only one child (right child)
        else if (current.left == null)
        {
            if (current == root) // if the current node is the root node
                root = current.right; // set the root node to its right child
            else if (isLeftChild) // if the current node is the left child of its parent
                parent.left = current.right; // set the left child of the parent node to the right child of the current node
            else // if the current node is the right child of its parent
                parent.right = current.right; // set the right child of the parent node to the right child of the current node
        }
        // if the current node has only one child (left child)
        else if (current.right == null)
        {
            if (current == root) // if the current node is the root node
                root = current.left; // set the root node to its left child
            else if (isLeftChild) // if the current node is the left child of its parent
                parent.left = current.left; // set the left child of the parent node to the left child of the current node
            else // if the current node is the right child of its parent
                parent.right = current.left; // set the right child of the parent node to the left child of the current node
        }
        // if the current node has two children
        else
        {
            TreeNode successor = FindSuccessor(current); // find the successor of the current node
            if (current == root) // if the current node is the root node
               root = successor; // set the root node to the successor
            else if (isLeftChild) // if the current node is the left child of its parent
               parent.left = successor; // set the left child of the parent node to the successor
            else // if the current node is the right child of its parent
               parent.right = successor; // set the right child of the parent node to the successor
            successor.left = current.left; // set the left child of the successor node to the left child of the current node
        }
        return true; // return true
    }

    // Method to find the successor of a given node
    private TreeNode FindSuccessor(TreeNode node)
    {
        TreeNode successor = node.right; // start at the right subtree of the given node
        TreeNode parent = node; // parent node of the successor
        TreeNode current = node.right; // current node being traversed
        while (current != null) // loop until a null node is reached
        {
            parent = successor; // set the successor as the parent node
            successor = current; // set the current node as the successor
            current = current.left; // move to the left subtree
        }
        // if the successor is not the right child of the given node
        if (successor != node.right)
        {
            parent.left = successor.right; // set the right child of the parent node to the right child of the successor
            successor.right = node.right; // set the right child of the successor to the right child of the given node
        }
        return successor; // return the successor
    }

    // Method to print the values in the binary search tree in in-order traversal
    public void PrintInOrder(TreeNode node)
    {
        if (node != null)
        {
            PrintInOrder(node.left); // recursively call the method on the left subtree
            Console.Write(node.data + " "); // print the node's data
            PrintInOrder(node.right); // recursively call the method on the right subtree
        }
    }
}

public class Program
{
    public static void Main()
    {
        BinarySearchTree tree = new BinarySearchTree(new TreeNode(10)); // create a new binary search tree with a root node of 10
        tree.Insert(5); // insert 5 into the binary search tree
        tree.Insert(15); // insert 15 into the binary search tree
        tree.Insert(3); // insert 3 into the binary search tree
        tree.Insert(8); // insert 8 into the binary search tree
        tree.PrintInOrder(tree.root); // print the values in the binary search tree in in-order traversal (3 5 8 10 15)
        Console.WriteLine(); // print a new line
        Console.WriteLine(tree.Search(8)); // search for 8 in the binary search tree (true)
        Console.WriteLine(tree.Search(20)); // search for 20 in the binary search tree (false)
        tree.Delete(10); // delete 10 from the binary search tree
        tree.PrintInOrder(tree.root); // print the values in the binary search tree in in-order traversal (3 5 8 15)
    }
}