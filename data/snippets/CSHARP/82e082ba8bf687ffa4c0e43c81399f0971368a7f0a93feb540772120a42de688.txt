/// <summary>
/// This class represents a binary search tree data structure.
/// It contains methods for adding, removing, and searching for elements.
/// </summary>
public class BinarySearchTree<T>
{
    // The root node of the binary search tree
    private Node<T> root;

    // The number of elements in the tree
    private int size;

    /// <summary>
    /// Adds an element to the binary search tree.
    /// </summary>
    /// <param name="element">The element to add.</param>
    public void Add(T element)
    {
        // Check if the tree is empty
        if (root == null)
        {
            root = new Node<T>(element);
            size++;
            return;
        }

        // Initialize current and parent nodes
        Node<T> current = root;
        Node<T> parent = null;

        // Loop until we find the correct position to add the element
        while (current != null)
        {
            // Update parent node
            parent = current;

            // Check if the new element should be placed in the left or right subtree
            // based on its value compared to the current node's value
            if (Comparer<T>.Default.Compare(element, current.Value) < 0)
            {
                // Move to the left subtree
                current = current.Left;
            }
            else
            {
                // Move to the right subtree
                current = current.Right;
            }
        }

        // We have found the correct position to add the element
        // Create a new node with the element and place it in the tree
        current = new Node<T>(element);
        // Update parent node's reference to the new node
        if (Comparer<T>.Default.Compare(element, parent.Value) < 0)
        {
            parent.Left = current;
        }
        else
        {
            parent.Right = current;
        }
        // Increase the size of the tree
        size++;
    }

    /// <summary>
    /// Removes an element from the binary search tree.
    /// </summary>
    /// <param name="element">The element to remove.</param>
    public void Remove(T element)
    {
        // Check if the tree is empty
        if (root == null)
        {
            return;
        }

        // Initialize current and parent nodes
        Node<T> current = root;
        Node<T> parent = null;

        // Loop until we find the node with the specified element
        while (current != null && !EqualityComparer<T>.Default.Equals(current.Value, element))
        {
            // Update parent node
            parent = current;

            // Check if the specified element is in the left or right subtree
            // based on its value compared to the current node's value
            if (Comparer<T>.Default.Compare(element, current.Value) < 0)
            {
                // Move to the left subtree
                current = current.Left;
            }
            else
            {
                // Move to the right subtree
                current = current.Right;
            }
        }

        // Check if the element was not found in the tree
        if (current == null)
        {
            return;
        }

        // Check if the node with the element has no children
        if (current.Left == null && current.Right == null)
        {
            // Check if the node is the root node
            if (EqualityComparer<T>.Default.Equals(current.Value, root.Value))
            {
                // Set root to null since it is the only node in the tree
                root = null;
            }
            else
            {
                // Remove the node with the element by setting its parent's reference to null
                if (Comparer<T>.Default.Compare(element, parent.Value) < 0)
                {
                    parent.Left = null;
                }
                else
                {
                    parent.Right = null;
                }
            }
        }
        // Check if the node with the element has one child
        else if (current.Left == null)
        {
            // Check if the node is the root node
            if (EqualityComparer<T>.Default.Equals(current.Value, root.Value))
            {
                // Set root to its only child
                root = current.Right;
            }
            else
            {
                // Replace the node with its only child by setting its parent's reference to the child
                if (Comparer<T>.Default.Compare(element, parent.Value) < 0)
                {
                    parent.Left = current.Right;
                }
                else
                {
                    parent.Right = current.Right;
                }
            }
        }
        else if (current.Right == null)
        {
            // Check if the node is the root node
            if (EqualityComparer<T>.Default.Equals(current.Value, root.Value))
            {
                // Set root to its only child
                root = current.Left;
            }
            else
            {
                // Replace the node with its only child by setting its parent's reference to the child
                if (Comparer<T>.Default.Compare(element, parent.Value) < 0)
                {
                    parent.Left = current.Left;
                }
                else
                {
                    parent.Right = current.Left;
                }
            }
        }
        // If the node with the element has two children, find its successor
        else
        {
            // The successor will be the leftmost node in the right subtree of the node
            // with the element to be removed
            Node<T> successor = current.Right;
            Node<T> successorParent = null;
            while (successor.Left != null)
            {
                // Update parent node
                successorParent = successor;

                // Move to the left subtree
                successor = successor.Left;
            }

            // Check if the successor is the right child of the node to be removed
            if (successorParent != null)
            {
                // Replace the successor with its right child if it has one
                if (successor.Right != null)
                {
                    successorParent.Left = successor.Right;
                }
                else
                {
                    // If the successor has no children, remove it from its parent
                    successorParent.Left = null;
                }
            }
            else
            {
                // If the successor has no parent, set the root to its right child
                root.Right = successor.Right;
            }

            // Replace the node with the element to be removed with the successor
            successor.Left = current.Left;
            successor.Right = current.Right;
            if (EqualityComparer<T>.Default.Equals(current.Value, root.Value))
            {
                // Set the root to the successor if it was the root node initially
                root = successor;
            }
            else
            {
                // Set the successor as the child of the node's parent
                if (Comparer<T>.Default.Compare(element, parent.Value) < 0)
                {
                    parent.Left = successor;
                }
                else
                {
                    parent.Right = successor;
                }
            }
        }

        // Decrease the size of the tree
        size--;
    }

    /// <summary>
    /// Searches for an element in the binary search tree.
    /// </summary>
    /// <param name="element">The element to search for.</param>
    /// <returns>True if the element is found in the tree, otherwise false.</returns>
    public bool Contains(T element)
    {
        // Check if the tree is empty
        if (root == null)
        {
            return false;
        }

        // Initialize current node
        Node<T> current = root;

        // Loop until we find the node with the specified element
        while (current != null && !EqualityComparer<T>.Default.Equals(current.Value, element))
        {
            // Check if the specified element is in the left or right subtree
            // based on its value compared to the current node's value
            if (Comparer<T>.Default.Compare(element, current.Value) < 0)
            {
                // Move to the left subtree
                current = current.Left;
            }
            else
            {
                // Move to the right subtree
                current = current.Right;
            }
        }

        // Check if the element was found in the tree
        if (current != null)
        {
            return true;
        }

        // The element was not found in the tree
        return false;
    }

}