// This code snippet creates a class called "Employee" with multiple properties and methods to perform various tasks related to employees

public class Employee
{
    // Private fields to store employee information
    private string firstName;
    private string lastName;
    private int employeeID;
    private string department;

    // Constructor to initialize the employee object with first name, last name, employee ID, and department
    public Employee(string first, string last, int id, string dept)
    {
        this.firstName = first;
        this.lastName = last;
        this.employeeID = id;
        this.department = dept;
    }

    // Property to get and set the employee's first name
    public string FirstName
    {
        get { return firstName; }
        set { firstName = value; }
    }

    // Property to get and set the employee's last name
    public string LastName
    {
        get { return lastName; }
        set { lastName = value; }
    }

    // Property to get and set the employee's ID
    public int EmployeeID
    {
        get { return employeeID; }
        set { employeeID = value; }
    }

    // Property to get and set the employee's department
    public string Department
    {
        get { return department; }
        set { department = value; }
    }

    // Method to print out the employee's full name
    public void PrintName()
    {
        Console.WriteLine("Employee Name: " + firstName + " " + lastName);
    }

    // Method to check if the employee is part of the specified department
    public bool IsInDepartment(string dept)
    {
        if (this.department.Equals(dept))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    // Method to calculate the employee's monthly salary based on their hourly rate and hours worked
    public double CalculateSalary(double hourlyRate, double hoursWorked)
    {
        double monthlySalary = hourlyRate * hoursWorked * 4;
        return monthlySalary;
    }
}

// Example usage of the Employee class
// Creating an employee with the constructor and setting their properties
Employee employee1 = new Employee("John", "Smith", 12345, "Marketing");
employee1.FirstName = "Jane";
employee1.EmployeeID = 54321;

// Printing out their name and checking if they are part of the specified department
employee1.PrintName(); // Output: Employee Name: Jane Smith
bool isInMarketing = employee1.IsInDepartment("Marketing"); // Output: true

// Calculating their monthly salary and printing it out
double monthlySalary = employee1.CalculateSalary(25, 40); // Hourly rate of $25, worked 40 hours a week
Console.WriteLine("Monthly Salary: $" + monthlySalary); // Output: Monthly Salary: $4000