/* This is a multi-line comment in CSharp
It can span multiple lines and is often used to provide documentation or explanations for the code */

// Here we create a class called "Person" which has two private fields, "name" and "age"
public class Person
{
    private string name;
    private int age;

    // This is a constructor for the "Person" class which takes in two arguments and sets the private fields
    public Person(string name, int age)
    {
        this.name = name;
        this.age = age;
    }

    // This is a method called "GetName" which returns the private field "name"
    public string GetName()
    {
        return this.name;
    }

    // This is another method called "GetAge" which returns the private field "age"
    public int GetAge()
    {
        return this.age;
    }

    // This is a method called "ChangeName" which takes in a string argument and sets the private field "name" to that value
    public void ChangeName(string newName)
    {
        this.name = newName;
    }

    // This is an override method called "ToString" which returns a string containing the person's name and age
    public override string ToString()
    {
        return "Name: " + this.name + ", Age: " + this.age;
    }
}

// And here we have a sample code that uses our "Person" class
class Program
{
    static void Main(string[] args)
    {
        // We create a new instance of "Person" called "person1" and pass in the arguments "John" and 25
        Person person1 = new Person("John", 25);

        // We create another instance of "Person" called "person2" and pass in the arguments "Jane" and 30
        Person person2 = new Person("Jane", 30);

        // We can call methods from our class to retrieve the private fields
        Console.WriteLine(person1.GetName()); // Output: John
        Console.WriteLine(person2.GetAge()); // Output: 30

        // We can also change the private fields using our methods
        person1.ChangeName("Jake");
        Console.WriteLine(person1.GetName()); // Output: Jake

        // Our override method "ToString" allows us to print out information about a person in a formatted way
        Console.WriteLine(person2.ToString()); // Output: Name: Jane, Age: 30
    }
}