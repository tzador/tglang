// This is a complex class that implements both ICollection and INotifyPropertyChanged interfaces
public class DataCollection : ICollection, INotifyPropertyChanged
{
    // Private field to store the collection data
    private List<int> data = new List<int>();

    // Public indexer property to access the collection by index
    public int this[int index]
    {
        get
        {
            return data[index];
        }
        set
        {
            // Notify of property change before setting new value
            OnPropertyChanged("Item");
            data[index] = value;
        }
    }

    // Public property to get the count of items in the collection
    public int Count
    {
        get { return data.Count; }
    }

    // Public method to add an item to the collection
    public void Add(int item)
    {
        data.Add(item);
        // Notify of property change after adding item
        OnPropertyChanged("Count");
    }

    // Public method to remove an item from the collection
    public void Remove(int item)
    {
        data.Remove(item);
        // Notify of property change after removing item
        OnPropertyChanged("Count");
    }

    #region ICollection interface implementation
    // Public method to clear the collection
    public void Clear()
    {
        data.Clear();
        // Notify of property change after clearing the collection
        OnPropertyChanged("Count");
    }

    // Public method to check if an item is contained in the collection
    public bool Contains(int item)
    {
        return data.Contains(item);
    }

    // Public method to copy the collection to an array
    public void CopyTo(int[] array, int arrayIndex)
    {
        data.CopyTo(array, arrayIndex);
    }

    // Public property to check if the collection is read-only
    public bool IsReadOnly
    {
        get { return false; }
    }
    #endregion

    #region INotifyPropertyChanged interface implementation
    // Public event to notify when a property has changed
    public event PropertyChangedEventHandler PropertyChanged;

    // Private method to raise the PropertyChanged event
    private void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    #endregion
}