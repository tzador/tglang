/* This is a C# code snippet that generates a list of prime numbers.
 * It uses the Sieve of Eratosthenes algorithm to find primes up to a given limit.
 * The algorithm involves marking all multiples of a number as not prime and
 * only keeping track of numbers that are not marked. */
 
using System;
using System.Collections.Generic;

static void Main(string[] args)
{
    Console.Write("Enter a limit to generate primes up to: ");
    int limit = Int32.Parse(Console.ReadLine());
    
    // create a list to hold prime numbers
    List<int> primes = new List<int>();
    
    // initialize a boolean array to keep track of marked numbers
    bool[] marked = new bool[limit + 1];
    
    // initialize marked array to true
    for (int i = 2; i <= limit; i++)
    {
        marked[i] = true;
    }
    
    // loop through all numbers up to the square root of limit
    for (int i = 2; i * i <= limit; i++)
    {
        // check if current number is marked
        if (marked[i])
        {
            // loop through all multiples of current number and mark as not prime
            for (int j = i * 2; j <= limit; j += i)
            {
                marked[j] = false;
            }
        }
    }
    
    // add all unmarked numbers (prime numbers) to the list
    for (int i = 2; i <= limit; i++)
    {
        if (marked[i])
        {
            primes.Add(i);
        }
    }
    
    // print out all prime numbers
    Console.WriteLine($"Prime numbers up to {limit}:");
    Console.WriteLine(string.Join(", ", primes));
}