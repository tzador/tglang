// This code snippet generates a complex array of integers using LINQ and lambda expressions
// First, we define a variable to store our array
int[] complexArray;

// Next, we use LINQ to generate a range of numbers from 1 to 100
var numberRange = Enumerable.Range(1, 100);

// We then use a lambda expression to filter out only even numbers from the range and store them in an IEnumerable<int> variable
var evenNumbers = numberRange.Where(num => num % 2 == 0);

// Next, we use another lambda expression to multiply each even number by 2 and store the result in a new IEnumerable<int> variable
var doubledNumbers = evenNumbers.Select(num => num * 2);

// We create a new List<int> using the doubledNumbers variable converted to a List
List<int> complexList = new List<int>(doubledNumbers);

// Finally, we convert the List to an array and assign it to our complexArray variable, which now contains our complex array of integers
complexArray = complexList.ToArray();

// Output of complexArray: [4, 8, 12, 16, 20, ..., 196, 200]