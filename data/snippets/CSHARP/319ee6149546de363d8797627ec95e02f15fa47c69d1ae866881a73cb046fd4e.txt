// This code snippet generates a random password of variable length
// using characters from a set of uppercase letters, lowercase letters,
// and special characters.

// Define a function that takes in the desired length of the password
// and returns a string containing the generated password.

public string GeneratePassword(int length)
{
    // Create a character array containing all the characters that can be used
    char[] chars = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
                    'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
                    'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
                    'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
                    's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '!', '@', '#',
                    '$', '%', '^', '&', '*', '(', ')'};

    // Create an empty string to store the generated password
    string password = "";

    // Create an instance of Random class to generate random numbers
    Random rand = new Random();

    // Loop through the desired length of the password
    for (int i = 0; i < length; i++)
    {
        // Generate a random index within the range of the character array
        int index = rand.Next(0, chars.Length);

        // Add the character at that random index to the password string
        password += chars[index];
    }

    // Return the generated password
    return password;
}

// Example usage:
// Generates a 12-character password
string password = GeneratePassword(12);
// Output: "f@IuL#k%(T$)"