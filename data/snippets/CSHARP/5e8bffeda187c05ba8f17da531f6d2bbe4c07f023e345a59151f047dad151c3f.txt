// This is a code snippet in C# which implements a basic binary search algorithm
using System;

class BinarySearch {
    // This function takes in a sorted array and a target element and returns the index of the target element, if found, or -1 if not found
    // Complexity: O(log n)
    static int Search(int[] arr, int target) {

        // initialize starting and ending indices
        int start = 0;
        int end = arr.Length - 1;

        // keep searching until start and end indices meet
        while (start <= end) {
            // find the middle element
            int mid = start + (end - start) / 2;

            // check if target is present at mid position
            if (arr[mid] == target) {
                return mid;
            }
            // if target is smaller than mid element, search in the left half of the array
            else if (target < arr[mid]) {
                end = mid - 1;
            }
            // if target is larger than mid element, search in the right half of the array
            else {
                start = mid + 1;
            }
        }
        // if target is not found, return -1
        return -1;
    }

    static void Main(string[] args) {
        // initialize an array with random numbers
        int[] arr = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

        // call the Search function and pass in the array and target number
        int index = Search(arr, 5);

        // check the result
        if (index != -1) {
            Console.WriteLine("Found at index: " + index);
        }
        else {
            Console.WriteLine("Not found");
        }
    }
}