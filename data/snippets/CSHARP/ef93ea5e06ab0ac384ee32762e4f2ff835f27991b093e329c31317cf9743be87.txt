/// <summary>
/// This is a generic method that takes in two parameters and returns the larger value.
/// </summary>
/// <typeparam name="T">The type of the parameters used.</typeparam>
/// <param name="first">The first value to be compared.</param>
/// <param name="second">The second value to be compared.</param>
/// <returns>The larger value between the two parameters.</returns>
public T FindLarger<T>(T first, T second)
{
    // If the type of T is numeric, use the greater than comparision operator
    if (typeof(T) == typeof(int) || typeof(T) == typeof(float) || typeof(T) == typeof(double))
        return (first > second) ? first : second; 
    // If the type of T is a string, use the string comparison
    else if (typeof(T) == typeof(string))
        return String.Compare(first.ToString(), second.ToString()) > 0 ? first : second; 
    // If the type of T is a DateTime, use the DateTime comparison
    else if (typeof(T) == typeof(DateTime))
        return DateTime.Compare(first as DateTime, second as DateTime) > 0 ? first : second; 
    else
        throw new ArgumentException("Invalid input parameters. Supported types are int, float, double, string, and DateTime.");
}