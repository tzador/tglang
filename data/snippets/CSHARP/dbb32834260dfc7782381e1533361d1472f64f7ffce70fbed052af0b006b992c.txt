// This is a class declaration with a generic type
public class MyClass<T> 
{
    // Private field with the generic type T
    private T myField; 
    
    // Public constructor that assigns a value to myField
    public MyClass(T value)
    {
        myField = value;
    }
    
    // Public method that returns the type T
    public T GetValue()
    {
        return myField;
    }
    
    // Public static method that takes in two generic type parameters and returns a boolean
    public static bool CompareValues<T1, T2>(T1 value1, T2 value2)
    {
        // If the two values are equal, return true
        if (value1.Equals(value2))
        {
            return true;
        }
        // Otherwise, return false
        else
        {
            return false;
        }
    }
}

// Example usage of the MyClass class
public static void Main()
{
    // Create an instance of MyClass with a string as the generic type
    var myStringClass = new MyClass<string>("Hello");

    // Call the GetValue method and print the returned value
    string returnedString = myStringClass.GetValue();
    Console.WriteLine("Returned string: " + returnedString);

    // Use the CompareValues method to compare a string and an integer
    bool areEqual = MyClass.CompareValues<string, int>("Hello", 5);
    Console.WriteLine("String and integer are equal: " + areEqual);
}