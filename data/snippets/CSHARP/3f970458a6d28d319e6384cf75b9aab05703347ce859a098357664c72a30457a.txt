/// <summary>
/// This method performs a merge sort on a given list of integers
/// </summary>
/// <param name="list">The list of integers to be sorted</param>
/// <returns>The sorted list of integers</returns>
public List<int> MergeSort(List<int> list)
{
    // Check for base case
    if (list.Count <= 1)
    {
        return list;
    }

    // Find the middle index
    int midIndex = list.Count / 2;

    // Create two sublists from the original list
    List<int> leftList = list.GetRange(0, midIndex);
    List<int> rightList = list.GetRange(midIndex, list.Count - midIndex);

    // Recursively call MergeSort on the sublists
    leftList = MergeSort(leftList);
    rightList = MergeSort(rightList);

    // Merge the sublists in sorted order
    int i = 0, j = 0, k = 0;
    while (i < leftList.Count && j < rightList.Count)
    {
        if (leftList[i] < rightList[j])
        {
            list[k] = leftList[i];
            i++;
        }
        else
        {
            list[k] = rightList[j];
            j++;
        }
        k++;
    }

    // Add remaining elements from left list
    while (i < leftList.Count)
    {
        list[k] = leftList[i];
        i++;
        k++;
    }

    // Add remaining elements from right list
    while (j < rightList.Count)
    {
        list[k] = rightList[j];
        j++;
        k++;
    }

    // Return the sorted list
    return list;
}