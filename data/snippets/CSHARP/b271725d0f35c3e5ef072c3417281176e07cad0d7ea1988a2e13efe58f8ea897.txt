// This code snippet generates a random maze using Prim's algorithm
// Taken from Rosetta Code, licensed under GNU Free Documentation License 1.2
using System;
using System.Collections.Generic;

// Helper class to represent a single cell in the maze
struct Cell
{
    public int x, y; // Cell's coordinates
    public bool wall; // Whether cell is a wall or not
}

class MazeGeneration
{
    static void Main()
    {
        // User input for width and height of maze
        int width = int.Parse(Console.ReadLine());
        int height = int.Parse(Console.ReadLine());

        // Initialize 2D array of cells to represent maze
        Cell[,] maze = new Cell[height, width];

        // Fill maze with cells
        for (int i = 0; i < height; i++)
        {
            for (int j = 0; j < width; j++)
            {
                maze[i, j] = new Cell { x = i, y = j, wall = true };
            }
        }

        // Create a starting cell
        Cell currentCell = maze[0, 0];
        currentCell.wall = false;

        // List to hold unvisited cells
        List<Cell> unvisitedCells = new List<Cell>();

        // Add all cells except starting cell to unvisited cells list
        for (int i = 0; i < height; i++)
        {
            for (int j = 0; j < width; j++)
            {
                if (maze[i, j].wall == true)
                {
                    // Add cell to unvisited cells list
                    unvisitedCells.Add(maze[i, j]);
                }
            }
        }

        // Array to hold current cell's neighbors
        Cell[] neighbors = new Cell[4];

        // Begin Prim's algorithm
        while (unvisitedCells.Count > 0)
        {
            // Get a random unvisited cell
            int randomCellIndex = new Random().Next(0, unvisitedCells.Count);
            Cell randomCell = unvisitedCells[randomCellIndex];

            // Get all unvisited neighboring cells of random cell
            int neighborCount = 0;

            // Check cell to the north
            if (randomCell.x > 0 && !maze[randomCell.x - 1, randomCell.y].wall)
            {
                neighbors[neighborCount] = maze[randomCell.x - 1, randomCell.y];
                neighborCount++;
            }

            // Check cell to the east
            if (randomCell.y < width - 1 && !maze[randomCell.x, randomCell.y + 1].wall)
            {
                neighbors[neighborCount] = maze[randomCell.x, randomCell.y + 1];
                neighborCount++;
            }

            // Check cell to the south
            if (randomCell.x < height - 1 && !maze[randomCell.x + 1, randomCell.y].wall)
            {
                neighbors[neighborCount] = maze[randomCell.x + 1, randomCell.y];
                neighborCount++;
            }

            // Check cell to the west
            if (randomCell.y > 0 && !maze[randomCell.x, randomCell.y - 1].wall)
            {
                neighbors[neighborCount] = maze[randomCell.x, randomCell.y - 1];
                neighborCount++;
            }

            // Randomly choose a neighbor to connect to current cell
            if (neighborCount > 0)
            {
                int randomNeighborIndex = new Random().Next(0, neighborCount);

                // Remove wall between current cell and chosen neighbor
                if (randomCell.x > neighbors[randomNeighborIndex].x) // North neighbor
                {
                    currentCell.wall = false;
                }
                else if (randomCell.y < neighbors[randomNeighborIndex].y) // East neighbor
                {
                    currentCell.wall = false;
                }
                else if (randomCell.x < neighbors[randomNeighborIndex].x) // South neighbor
                {
                    neighbors[randomNeighborIndex].wall = false;
                }
                else // West neighbor
                {
                    neighbors[randomNeighborIndex].wall = false;
                }

                // Make chosen neighbor current cell
                currentCell = neighbors[randomNeighborIndex];
                currentCell.wall = false;
            }

            // Remove current cell from unvisited cells list
            unvisitedCells.Remove(randomCell);
        }

        // Print maze
        for (int i = 0; i < height; i++)
        {
            for (int j = 0; j < width; j++)
            {
                if (maze[i, j].wall)
                {
                    // Print wall
                    Console.Write("â–ˆ");
                }
                else
                {
                    // Print cell
                    Console.Write(" ");
                }
            }

            // New line after each row
            Console.WriteLine();
        }
    }
}