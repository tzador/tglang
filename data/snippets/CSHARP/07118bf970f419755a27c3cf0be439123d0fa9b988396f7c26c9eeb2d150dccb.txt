/// <summary>
/// A class representing a bank account.
/// </summary>
public class BankAccount
{
    /// <summary>
    /// The account holder's name.
    /// </summary>
    public string AccountHolderName { get; set; }

    /// <summary>
    /// The account number.
    /// </summary>
    public string AccountNumber { get; set; }

    /// <summary>
    /// The current balance of the account.
    /// </summary>
    public decimal Balance { get; private set; }

    /// <summary>
    /// Constructor for the BankAccount class, initializes the account holder's name and number.
    /// </summary>
    /// <param name="accountHolderName">The account holder's name.</param>
    /// <param name="accountNumber">The account number.</param>
    public BankAccount(string accountHolderName, string accountNumber)
    {
        this.AccountHolderName = accountHolderName;
        this.AccountNumber = accountNumber;
        this.Balance = 0;
    }

    /// <summary>
    /// Method for depositing funds into the account.
    /// </summary>
    /// <param name="amount">The amount to be deposited.</param>
    public void Deposit(decimal amount)
    {
        // Check for negative amount
        if (amount < 0)
        {
            throw new ArgumentException("Amount cannot be negative.");
        }

        // Add amount to balance
        this.Balance += amount;
    }

    /// <summary>
    /// Method for withdrawing funds from the account.
    /// </summary>
    /// <param name="amount">The amount to be withdrawn.</param>
    public void Withdraw(decimal amount)
    {
        // Check if amount exceeds balance
        if (amount > this.Balance)
        {
            throw new ArgumentException("Insufficient funds in account.");
        }

        // Subtract amount from balance
        this.Balance -= amount;
    }

    /// <summary>
    /// Method for transferring funds from this account to another account.
    /// </summary>
    /// <param name="amount">The amount to be transferred.</param>
    /// <param name="recipient">The receiving account.</param>
    public void Transfer(decimal amount, BankAccount recipient)
    {
        try
        {
            // Withdraw from this account
            this.Withdraw(amount);

            // Deposit into recipient's account
            recipient.Deposit(amount);
        }
        catch (ArgumentException)
        {
            // Re-throw exception
            throw;
        }     
    }
}