// This code snippet is an example of a complex data structure: a binary search tree
// It contains functions for creating, inserting, searching and deleting nodes in the tree

// Node class representing each node in the tree
class Node
{
    // Node properties
    int value; // value of the node
    Node left; // left child node
    Node right; // right child node

    // Constructor
    public Node(int val)
    {
        value = val;
        left = null;
        right = null;
    }
}

// Binary Search Tree class 
class BinarySearchTree
{
    // Root node of the BST
    Node root;

    // Constructor
    public BinarySearchTree()
    {
        root = null; 
    }

    // Function to insert a new node in the BST
    public void Insert(int value)
    {
        // Check if tree is empty
        if (root == null)
        {
            root = new Node(value);
        }

        else
        {
            // Create a current node and set it to the root of the BST
            Node current = root;

            while (true)
            {
                // If the value is less than the current node's value, go left
                if (value < current.value)
                {
                    // If left child is null, insert the new node
                    if (current.left == null)
                    {
                        current.left = new Node(value);
                        break;
                    }
                    // If left child is not null, move to the left node
                    else
                    {
                        current = current.left;
                    }
                }

                // If the value is greater than the current node's value, go right
                else if (value > current.value)
                {
                    // If right child is null, insert the new node
                    if (current.right == null)
                    {
                        current.right = new Node(value);
                        break;
                    }
                    // If right child is not null, move to the right node
                    else
                    {
                        current = current.right;
                    }
                }

                // If value already exists in the tree, do not insert
                else
                {
                    break;
                }
            }
        }
    }

    // Function to search for a value in the BST
    public bool Search(int value)
    {
        // Check if tree is empty
        if (root == null)
        {
            return false;
        }

        else
        {
            // Create a current node and set it to the root of the BST
            Node current = root;

            while (current != null)
            {
                // If value is less than current node's value, go left
                if (value < current.value)
                {
                    current = current.left;
                }
                // If value is greater than current node's value, go right
                else if (value > current.value)
                {
                    current = current.right;
                }
                // If value matches current node's value, return true
                else
                {
                    return true;
                }
            }
            // Value not found in the tree
            return false;
        }
    }

    // Function to delete a node from the BST
    public bool Delete(int value)
    {
        // Check if tree is empty
        if (root == null)
        {
            return false;
        }

        else
        {
            // Create current and parent nodes and set them to the root of the BST
            Node current = root;
            Node parent = root;
            bool isLeftChild = false;

            // Loop until value is found or end of tree is reached
            while (current.value != value)
            {
                parent = current;

                // If value is less than current node's value, go left
                if (value < current.value)
                {
                    isLeftChild = true;
                    current = current.left;
                }
                // If value is greater than current node's value, go right
                else if (value > current.value)
                {
                    isLeftChild = false;
                    current = current.right;
                }

                // If value is not found in the tree, return false 
                if (current == null)
                {
                    return false;
                }
            }

            // If node has no children
            if (current.left == null && current.right == null)
            {
                // If node is root, set root to null
                if (current == root)
                {
                    root = null;
                }
                // If node is a left child, set parent's left child to null
                else if (isLeftChild)
                {
                    parent.left = null;
                }
                // If node is a right child, set parent's right child to null
                else
                {
                    parent.right = null;
                }
            }

            // If node has one child 
            else if (current.right == null)
            {
                // If node is root, set root to its left child
                if (current == root)
                {
                    root = current.left;
                }
                // If node is a left child, set parent's left child to the current node's left child
                else if (isLeftChild)
                {
                    parent.left = current.left;
                }
                // If node is a right child, set parent's right child to the current node's left child
                else
                {
                    parent.right = current.left;
                }
            }

            else if (current.left == null)
            {
                // If node is root, set root to its right child
                if (current == root)
                {
                    root = current.right;
                }
                // If node is a left child, set parent's left child to the current node's right child
                else if (isLeftChild)
                {
                    parent.left = current.right;
                }
                // If node is a right child, set parent's right child to the current node's right child
                else
                {
                    parent.right = current.right;
                }
            }

            // If node has two children 
            else
            {
                // Find the successor: smallest value in the right subtree
                Node successor = GetSuccessor(current);

                // If current node is root, set successor as root
                if (current == root)
                {
                    root = successor;
                }
                // If current node is a left child, set parent's left child to the successor
                else if (isLeftChild)
                {
                    parent.left = successor;
                }
                // If current node is a right child, set parent's right child to the successor
                else
                {
                    parent.right = successor;
                }

                // Set successor's left child to the current node's left child
                successor.left = current.left;
            }

            // Return true as node has been deleted
            return true;
        }
    }

    // Function to find the successor: smallest value in the right subtree
    public Node GetSuccessor(Node node)
    {
        Node successor = null;
        Node successorParent = null;
        Node current = node.right;

        // Loop until the end of the subtree is reached
        while (current != null)
        {
            // Successor is the smallest value in the right subtree
            successorParent = successor;
            successor = current;
            current = current.left;
        }

        // If successor is not the right child of the current node, set its right child to its parent's left child
        if (successor != node.right)
        {
            successorParent.left = successor.right;
            successor.right = node.right;
        }

        // Return successor
        return successor;
    }
}

// Driver code for testing
void Main()
{
    // Create a new BST
    BinarySearchTree bst = new BinarySearchTree();

    // Insert nodes into the BST
    bst.Insert(50);
    bst.Insert(25);
    bst.Insert(13);
    bst.Insert(40);
    bst.Insert(31);
    bst.Insert(70);
    bst.Insert(60);
    bst.Insert(90);

    // Search for nodes in the BST
    Console.WriteLine(bst.Search(31)); // Output: True
    Console.WriteLine(bst.Search(100)); // Output: False

    // Delete nodes from the BST
    Console.WriteLine(bst.Delete(40)); // Output: True
    Console.WriteLine(bst.Delete(100)); // Output: False
}