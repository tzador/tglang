/// <summary>
/// Define a generic interface for a graph data structure.
/// </summary>
/// <typeparam name="T">The type of the vertices in the graph.</typeparam>
public interface IGraph<T>
{
    /// <summary>
    /// Add a new vertex to the graph.
    /// </summary>
    /// <param name="vertex">The vertex to add.</param>
    void AddVertex(T vertex);

    /// <summary>
    /// Add a new edge between two vertices in the graph.
    /// </summary>
    /// <param name="from">The starting vertex of the edge.</param>
    /// <param name="to">The ending vertex of the edge.</param>
    void AddEdge(T from, T to);

    /// <summary>
    /// Remove a vertex from the graph.
    /// </summary>
    /// <param name="vertex">The vertex to be removed.</param>
    void RemoveVertex(T vertex);

    /// <summary>
    /// Remove an edge from the graph.
    /// </summary>
    /// <param name="from">The starting vertex of the edge.</param>
    /// <param name="to">The ending vertex of the edge.</param>
    void RemoveEdge(T from, T to);

    /// <summary>
    /// Check if two vertices are connected by an edge in the graph.
    /// </summary>
    /// <param name="from">The starting vertex of the edge.</param>
    /// <param name="to">The ending vertex of the edge.</param>
    /// <returns>True if there is an edge between the two vertices, otherwise False.</returns>
    bool IsAdjacent(T from, T to);

    /// <summary>
    /// Get all the vertices in the graph.
    /// </summary>
    /// <returns>A list of all vertices in the graph.</returns>
    List<T> GetAllVertices();

    /// <summary>
    /// Get all the adjacent vertices of a given vertex in the graph.
    /// </summary>
    /// <param name="vertex">The vertex to get the adjacent vertices of.</param>
    /// <returns>A list of all adjacent vertices of the given vertex.</returns>
    List<T> GetAdjacentVertices(T vertex);

    /// <summary>
    /// Check if the graph is empty.
    /// </summary>
    /// <returns>True if the graph has no vertices, otherwise False.</returns>
    bool IsEmpty();

    /// <summary>
    /// Get the number of vertices in the graph.
    /// </summary>
    /// <returns>The number of vertices in the graph.</returns>
    int NumberOfVertices();

    /// <summary>
    /// Get the number of edges in the graph.
    /// </summary>
    /// <returns>The number of edges in the graph.</returns>
    int NumberOfEdges();
}