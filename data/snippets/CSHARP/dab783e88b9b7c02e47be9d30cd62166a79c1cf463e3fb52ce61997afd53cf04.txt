// This code snippet demonstrates the use of an abstract class in C#
// It creates a Vehicle abstract class and two classes that inherit from it: 
// Car and Motorcycle

using System;

// Vehicle is the abstract base class
// It has two abstract methods: Start() and Drive()
abstract class Vehicle
{
    // Can include non-abstract methods and properties
    public string Make { get; set; }
    public string Model { get; set; }
    public int Year { get; set; }

    // Abstract methods have no implementation and must be overridden by derived classes
    public abstract void Start();
    public abstract void Drive();
}

// Car class inherits from Vehicle
// It overrides the abstract methods and adds its own implementation
class Car : Vehicle
{
    public override void Start()
    {
        // Implementation specific to starting a car
        Console.WriteLine("Car is starting...");
    }

    public override void Drive()
    {
        // Implementation specific to driving a car
        Console.WriteLine("Car is driving...");
    }
}

// Motorcycle class inherits from Vehicle
// It overrides the abstract methods and adds its own implementation
class Motorcycle : Vehicle
{
    public override void Start()
    {
        // Implementation specific to starting a motorcycle
        Console.WriteLine("Motorcycle is starting...");
    }

    public override void Drive()
    {
        // Implementation specific to driving a motorcycle
        Console.WriteLine("Motorcycle is driving...");
    }
}

// Main method for testing the code
class MainClass
{
    // Instantiates objects of type Car and Motorcycle
    public static void Main()
    {
        Car myCar = new Car();
        Motorcycle myMotorcycle = new Motorcycle();

        // Calls the Start() and Drive() methods for each vehicle
        myCar.Start();
        myCar.Drive();

        myMotorcycle.Start();
        myMotorcycle.Drive();
    }
}