/// <summary>
/// This class represents a generic binary tree data structure.
/// </summary>
/// <typeparam name="T">The type of data stored in the nodes of the binary tree.</typeparam>
public class BinaryTree<T>
{
    /// <summary>
    /// Pointer to the root node of the binary tree.
    /// </summary>
    private BinaryTreeNode<T> root;

    /// <summary>
    /// Default constructor.
    /// </summary>
    public BinaryTree()
    {
        this.root = null;
    }

    /// <summary>
    /// Constructs a binary tree with the given root node.
    /// </summary>
    /// <param name="root">The root node of the binary tree.</param>
    public BinaryTree(BinaryTreeNode<T> root)
    {
        this.root = root;
    }

    /// <summary>
    /// Inserts a new node into the binary tree.
    /// </summary>
    /// <param name="value">The value to be inserted into the new node.</param>
    public void Insert(T value)
    {
        // If the root is null, create a new node with the given value and set it as the root.
        if (this.root == null)
        {
            this.root = new BinaryTreeNode<T>(value);
            return;
        }

        // Otherwise, start at the root and traverse through the tree to find the appropriate position for the new node.
        BinaryTreeNode<T> currentNode = this.root;

        while (true)
        {
            // If the value of the new node is less than the current node, move to the left child.
            if (Comparer<T>.Default.Compare(value, currentNode.Value) < 0)
            {
                // If the left child is null, create a new node with the given value and set it as the left child of the current node.
                if (currentNode.LeftChild == null)
                {
                    currentNode.LeftChild = new BinaryTreeNode<T>(value);
                    return;
                }
                // Otherwise, move to the left child and continue traversal.
                else
                {
                    currentNode = currentNode.LeftChild;
                }
            }
            // If the value of the new node is greater than or equal to the current node, move to the right child.
            else
            {
                // If the right child is null, create a new node with the given value and set it as the right child of the current node.
                if (currentNode.RightChild == null)
                {
                    currentNode.RightChild = new BinaryTreeNode<T>(value);
                    return;
                }
                // Otherwise, move to the right child and continue traversal.
                else
                {
                    currentNode = currentNode.RightChild;
                }
            }
        }
    }

    /// <summary>
    /// Searches for a node in the binary tree with the given value.
    /// </summary>
    /// <param name="value">The value to search for.</param>
    /// <returns>The found node, or null if the node with the given value does not exist in the binary tree.</returns>
    public BinaryTreeNode<T> Search(T value)
    {
        // Start at the root and traverse through the tree to find a node with the given value.
        BinaryTreeNode<T> currentNode = this.root;

        while (currentNode != null)
        {
            // If the value of the current node is equal to the given value, return the current node.
            if (Comparer<T>.Default.Compare(value, currentNode.Value) == 0)
            {
                return currentNode;
            }
            // Otherwise, if the given value is less than the current node, move to the left child.
            else if (Comparer<T>.Default.Compare(value, currentNode.Value) < 0)
            {
                currentNode = currentNode.LeftChild;
            }
            // Otherwise, if the given value is greater than the current node, move to the right child.
            else
            {
                currentNode = currentNode.RightChild;
            }
        }

        // If the given value was not found in the binary tree, return null.
        return null;
    }

    /// <summary>
    /// Deletes a node with the given value from the binary tree.
    /// </summary>
    /// <param name="value">The value to be deleted.</param>
    /// <returns>True if the node was found and deleted, false if the node with the given value does not exist in the binary tree.</returns>
    public bool Delete(T value)
    {
        // Start at the root and traverse through the tree to find the node to be deleted.
        BinaryTreeNode<T> currentNode = this.root;
        BinaryTreeNode<T> parentNode = null;
        bool isLeftChild = false;

        // Search for the node with the given value.
        while (Comparer<T>.Default.Compare(value, currentNode.Value) != 0)
        {
            parentNode = currentNode;

            // If the given value is less than the current node, move to the left child.
            if (Comparer<T>.Default.Compare(value, currentNode.Value) < 0)
            {
                currentNode = currentNode.LeftChild;
                isLeftChild = true;
            }
            // Otherwise, if the given value is greater than the current node, move to the right child.
            else
            {
                currentNode = currentNode.RightChild;
                isLeftChild = false;
            }

            // If the node to be deleted does not exist, return false.
            if (currentNode == null)
            {
                return false;
            }
        }

        // If the node to be deleted has no children, simply remove the node.
        if (currentNode.LeftChild == null && currentNode.RightChild == null)
        {
            // If the node to be deleted is the root, set the root to null.
            if (currentNode == this.root)
            {
                this.root = null;
            }
            // Otherwise, set the appropriate child of the parent node to null.
            else if (isLeftChild)
            {
                parentNode.LeftChild = null;
            }
            else
            {
                parentNode.RightChild = null;
            }
        }
        // If the node to be deleted only has a left child, set the appropriate child of the parent node to the left child.
        else if (currentNode.RightChild == null)
        {
            // If the node to be deleted is the root, set the root to its left child.
            if (currentNode == this.root)
            {
                this.root = currentNode.LeftChild;
            }
            // Otherwise, set the appropriate child of the parent node to the left child.
            else if (isLeftChild)
            {
                parentNode.LeftChild = currentNode.LeftChild;
            }
            else
            {
                parentNode.RightChild = currentNode.LeftChild;
            }
        }
        // If the node to be deleted only has a right child, set the appropriate child of the parent node to the right child.
        else if (currentNode.LeftChild == null)
        {
            // If the node to be deleted is the root, set the root to its right child.
            if (currentNode == this.root)
            {
                this.root = currentNode.RightChild;
            }
            // Otherwise, set the appropriate child of the parent node to the right child.
            else if (isLeftChild)
            {
                parentNode.LeftChild = currentNode.RightChild;
            }
            else
            {
                parentNode.RightChild = currentNode.RightChild;
            }
        }
        // If the node to be deleted has both left and right children, replace the node with the successor node.
        else
        {
            // Find the successor node.
            BinaryTreeNode<T> successor = GetSuccessor(currentNode);

            // If the node to be deleted is the root, set the root to the successor node.
            if (currentNode == this.root)
            {
                this.root = successor;
            }
            // Otherwise, set the appropriate child of the parent node to the successor node.
            else if (isLeftChild)
            {
                parentNode.LeftChild = successor;
            }
            else
            {
                parentNode.RightChild = successor;
            }

            // Set the left child of the successor to the left child of the node to be deleted.
            successor.LeftChild = currentNode.LeftChild;
        }

        return true;
    }

    /// <summary>
    /// Gets the successor node of the given node.
    /// </summary>
    /// <param name="node">The node to find the successor for.</param>
    /// <returns>The successor node of the given node.</returns>
    private BinaryTreeNode<T> GetSuccessor(BinaryTreeNode<T> node)
    {
        // The successor will be the leftmost child of the right subtree.
        BinaryTreeNode<T> successorParent = node;
        BinaryTreeNode<T> successor = node.RightChild;
        BinaryTreeNode<T> current = node.RightChild;

        // Iterate through the right subtree until reaching the leftmost leaf.
        while (current != null)
        {
            successorParent = successor;
            successor = current;
            current = current.LeftChild;
        }

        // If the successor is not the right child of the node to be deleted, set the parent's left child to the right child of the successor.
        if (successor != node.RightChild)
        {
            successorParent.LeftChild = successor.RightChild;
            // Set the successor's right child to the right child of the node to be deleted.
            successor.RightChild = node.RightChild;
        }

        return successor;
    }
}

/// <summary>
/// This class represents a node in a binary tree data structure.
/// </summary>
/// <typeparam name="T">The type of data stored in the node.</typeparam>
public class BinaryTreeNode<T>
{
    /// <summary>
    /// Pointer to the left child of the node.
    /// </summary>
    public BinaryTreeNode<T> LeftChild { get; set; }

    /// <summary>
    /// Pointer to the right child of the node.
    /// </summary>
    public BinaryTreeNode<T> RightChild { get; set; }

    /// <summary>
    /// The value stored in the node.
    /// </summary>
    public T Value { get; set; }

    /// <summary>
    /// Default constructor setting all properties to default values.
    /// </summary>
    public BinaryTreeNode()
    {
        this.LeftChild = null;
        this.RightChild = null;
    }

    /// <summary>
    /// Constructor setting the value of the node while leaving the child nodes as null.
    /// </summary>
    /// <param name="value">The value to be stored in the node.</param>
    public BinaryTreeNode(T value)
    {
        this.Value = value;
        this.LeftChild = null;
        this.RightChild = null;
    }
}