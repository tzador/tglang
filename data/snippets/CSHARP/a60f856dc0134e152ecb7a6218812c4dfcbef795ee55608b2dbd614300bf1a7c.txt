// This is a complex code snippet that creates a generic class, LincolnList, with a type parameter
// The class has three properties, one private backing field and two public properties
public class LincolnList<T>
{
    private List<T> backingList = new List<T>(); // private backing list using the List<T> class

    public int Count // public property for getting the number of items in the list
    {
        get { return backingList.Count; } // getter returns the count of the backing list
    }

    public T this[int index] // public indexer for accessing items in the list using index
    {
        get { return backingList[index]; } // getter returns the item at the given index
    }

    // This method adds a new item to the list
    // It takes in a parameter of type T, the item to be added
    // Returns nothing (void)
    public void Add(T item)
    {
        backingList.Add(item); // uses the Add method from the List<T> class to add the item to the backing list
    }
}