// This is a complex code snippet in CSharp
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace MyProject
{
    // This is a custom data structure called Binary Tree that implements IEnumerable
    public class BinaryTree<T> : IEnumerable<T>
    {
        // Private class for the nodes in the tree
        private class Node
        {
            public T value; // Value stored in the node
            public Node left; // Left child of the node
            public Node right; // Right child of the node

            public Node(T value)
            {
                this.value = value;
                left = null;
                right = null;
            }
        }

        private Node root; // Root of the binary tree

        // Constructor to initialize an empty binary tree
        public BinaryTree()
        {
            root = null;
        }

        // Constructor to initialize a binary tree with a root node
        public BinaryTree(T value)
        {
            root = new Node(value);
        }

        // Method to add a new node to the binary tree
        public void Add(T value)
        {
            if (root == null)
            {
                root = new Node(value);
            }
            else
            {
                AddRecursive(root, value);
            }
        }

        // Private helper method to recursively add a new node to the tree
        private void AddRecursive(Node current, T value)
        {
            // If value is less than current node, add it to the left subtree
            if (Comparer<T>.Default.Compare(value, current.value) < 0)
            {
                if (current.left == null)
                {
                    current.left = new Node(value);
                }
                else
                {
                    AddRecursive(current.left, value);
                }
            }
            // If value is greater than current node, add it to the right subtree
            else
            {
                if (current.right == null)
                {
                    current.right = new Node(value);
                }
                else
                {
                    AddRecursive(current.right, value);
                }
            }
        }

        // Method to traverse the binary tree using preorder traversal
        public void PreorderTraversal()
        {
            if (root == null)
            {
                Console.WriteLine("Empty tree");
            }
            else
            {
                PreorderRecursive(root);
            }
        }

        // Private helper method to recursively traverse the tree using preorder traversal
        private void PreorderRecursive(Node current)
        {
            // Print the current node's value
            Console.Write("{0} ", current.value);

            // Traverse the left subtree
            if (current.left != null)
            {
                PreorderRecursive(current.left);
            }

            // Traverse the right subtree
            if (current.right != null)
            {
                PreorderRecursive(current.right);
            }
        }

        // Method to implement IEnumerable interface
        public IEnumerator<T> GetEnumerator()
        {
            // Traverse the tree using inorder traversal and yield return each node's value
            foreach (var item in InorderTraversal())
            {
                yield return item;
            }
        }

        // Private method to traverse the binary tree using inorder traversal
        private IEnumerable<T> InorderTraversal()
        {
            if (root == null)
            {
                throw new InvalidOperationException("Empty tree");
            }

            // Use a stack to keep track of nodes while traversing the tree
            Stack<Node> stack = new Stack<Node>();

            // Start from the root node
            Node current = root;

            // Go to the leftmost node and add all encountered nodes to the stack
            while (current != null)
            {
                stack.Push(current);
                current = current.left;
            }

            // Keep traversing the tree until the stack is empty
            while (stack.Count > 0)
            {
                // Pop the top node from the stack and print its value
                current = stack.Pop();
                yield return current.value;

                // If the node has a right subtree, go to the leftmost node in that subtree and add all encountered nodes to the stack
                if (current.right != null)
                {
                    current = current.right;
                    while (current != null)
                    {
                        stack.Push(current);
                        current = current.left;
                    }
                }
            }
        }

        // Explicit implementation for non-generic IEnumerable interface
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}

// Code snippet to test the custom Binary Tree data structure
BinaryTree<int> tree = new BinaryTree<int>();

tree.Add(5);
tree.Add(3);
tree.Add(7);
tree.Add(1);
tree.Add(4);

Console.WriteLine("Preorder traversal:");
tree.PreorderTraversal();

Console.WriteLine("Inorder traversal:");
foreach (int value in tree)
{
    Console.Write("{0} ", value);
}

// Output:
// Preorder traversal:
// 5 3 1 4 7
// Inorder traversal:
// 1 3 4 5 7