/*
    This is a sample code snippet in C# that creates and manipulates a generic list.
    It utilizes LINQ for filtering, sorting, and selecting items in the list.

    The class "Person" is a sample class that has properties for age, name, and job title.
    It implements the IComparable interface in order to declare a default sorting method.

    Author: Jane Doe
*/

// Declare a generic list of Person objects
var people = new List<Person>();

// Add sample Person objects to the list
people.Add(new Person("John", 25, "Software Engineer"));
people.Add(new Person("Sarah", 32, "Project Manager"));
people.Add(new Person("Mark", 28, "Data Analyst"));
people.Add(new Person("Emily", 23, "Web Developer"));

// Use LINQ to filter the list by age greater than or equal to 25
var filteredList = people.Where(p => p.Age >= 25);

// Sort the filtered list by job title alphabetically
var sortedList = filteredList.OrderBy(p => p.JobTitle);

// Use LINQ to select only the person's name from the sorted list
var selectedNames = sortedList.Select(p => p.Name);

// Print out the selected names in the console
foreach(var name in selectedNames)
{
    Console.WriteLine(name);
}

// Sample Person class
public class Person : IComparable
{
    // Properties
    public string Name { get; set; }
    public int Age { get; set; }
    public string JobTitle { get; set; }

    // Constructor
    public Person(string name, int age, string jobTitle)
    {
        Name = name;
        Age = age;
        JobTitle = jobTitle;
    }

    // Implement the CompareTo method from IComparable interface
    public int CompareTo(object obj)
    {
        if(obj == null) return 1;

        Person otherPerson = obj as Person;
        if(otherPerson != null)
            return this.Name.CompareTo(otherPerson.Name);
        else
            throw new ArgumentException("Object is not a Person.");
    }
}