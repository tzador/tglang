//This code snippet creates a class named "Person" with various properties and methods
public class Person
{
    //Private fields for storing data
    private string name;
    private int age;
    private string gender;
    private float height;

    //Public properties to access and manipulate the private fields
    public string Name 
    {
        get { return this.name; }
        set { this.name = value; }
    }

    public int Age 
    {
        get { return this.age; }
        set 
        {
            //Age cannot be negative, throw an error if a negative value is set
            if (value < 0)
            {
                throw new ArgumentException("Age cannot be negative.");
            }
            this.age = value;
        }
    }

    public string Gender
    {
        get { return this.gender; }
        set 
        {
            //Gender must be "male" or "female", throw an error if any other value is set
            if (value.ToLower() != "male" && value.ToLower() != "female")
            {
                throw new ArgumentException("Gender can only be 'male' or 'female'.");
            }
            this.gender = value;
        }
    }

    public float Height 
    {
        get { return this.height; }
        set { this.height = value; }
    }

    //Constructor method to create a new instance of the class
    //With optional parameters to set the initial values of the properties
    public Person(string name = "Unknown", int age = 18, string gender = "Unknown", float height = 0)
    {
        //Use the properties to set the initial values
        this.Name = name;
        this.Age = age;
        this.Gender = gender;
        this.Height = height;
    }

    //Public method to introduce the person
    public void Introduce()
    {
        //Use interpolation to print the values of the properties
        Console.WriteLine($"Hi, my name is {this.Name}, I am {this.Age} years old, I am {this.Gender} and my height is {this.Height} cm.");
    }
}