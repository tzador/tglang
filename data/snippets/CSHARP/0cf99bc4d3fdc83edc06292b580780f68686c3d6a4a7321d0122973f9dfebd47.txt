/*** This code snippet generates a binary search tree class in C# and implements methods for insertion, deletion, and searching ***/

using System;

// Node class to represent each node in the tree
class Node
{
    public int data; // data field of the node
    public Node left; // pointer to left child
    public Node right; // pointer to right child

    // Constructor to initialize node with given data
    public Node(int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}

// Binary Search Tree class with methods for insertion, deletion, and searching
class BinarySearchTree
{
    // Root node of the tree
    public Node root;

    // Constructor to initialize tree with empty root
    public BinarySearchTree()
    {
        root = null;
    }

    // Method to insert a new node with given data in the tree
    public void Insert(int data)
    {
        // If tree is empty, set new node as root
        if (root == null)
        {
            root = new Node(data);
        }
        else
        {
            // Traverse the tree to find appropriate position for new node
            Node current = root; // start at root
            Node parent = null; // keep track of parent node

            while (current != null)
            {
                parent = current; // save current node as parent
                if (data < current.data)
                {
                    current = current.left; // if new data is less, go to left child
                }
                else
                {
                    current = current.right; // if new data is greater, go to right child
                }
            }

            // Create and add new node at appropriate position
            if (data < parent.data)
            {
                parent.left = new Node(data);
            }
            else
            {
                parent.right = new Node(data);
            }
        }
    }

    // Method to delete a node with given data from the tree
    public void Delete(int data)
    {
        // Use a helper function to avoid root node being deleted
        root = DeleteNode(root, data);
    }

    // Recursive helper function to delete a node with given data from the tree
    private Node DeleteNode(Node current, int data)
    {
        // If tree is empty, return null
        if (current == null)
        {
            return null;
        }
        else
        {
            // If node to be deleted is found
            if (data == current.data)
            {
                // If node has no children, return null
                if (current.left == null && current.right == null)
                {
                    return null;
                }
                // If node has only one child, return that child
                else if (current.left == null)
                {
                    return current.right;
                }
                else if (current.right == null)
                {
                    return current.left;
                }
                else
                {
                    // If node has two children, find successor node
                    Node successor = GetSuccessor(current.right);

                    // Replace current node with successor node
                    current.data = successor.data;

                    // Delete successor node from right subtree
                    current.right = DeleteNode(current.right, successor.data);
                    return current;
                }
            }
            else if (data < current.data)
            {
                // If data is less than current node, go to left subtree
                current.left = DeleteNode(current.left, data);
                return current;
            }
            else
            {
                // If data is greater than current node, go to right subtree
                current.right = DeleteNode(current.right, data);
                return current;
            }
        }
    }

    // Method to find successor node of a given node in the tree
    private Node GetSuccessor(Node current)
    {
        // Keep going left until we reach the last node in left subtree (smallest value)
        while (current.left != null)
        {
            current = current.left;
        }
        return current;
    }

    // Method to search for a given data in the tree
    public bool Search(int data)
    {
        // If tree is empty, return false
        if (root == null)
        {
            return false;
        }
        else
        {
            // Traverse the tree to find the node with given data and return true if found
            Node current = root;
            while (current != null)
            {
                if (current.data == data)
                {
                    return true;
                }
                else if (data < current.data)
                {
                    current = current.left;
                }
                else
                {
                    current = current.right;
                }
            }
            // If data is not found after traversing, return false
            return false;
        }
    }

}

// Driver code to test the BinarySearchTree class
void Main()
{
    BinarySearchTree tree = new BinarySearchTree();

    // Insert some nodes with random data
    tree.Insert(50);
    tree.Insert(30);
    tree.Insert(20);
    tree.Insert(40);
    tree.Insert(70);
    tree.Insert(60);
    tree.Insert(80);

    // Print the tree to check if insertions were successful
    tree.Print();

    // Delete a node and print the updated tree
    tree.Delete(40);
    tree.Print();

    // Search for a given data and print the result
    int data = 60;
    Console.WriteLine("Is " + data + " present? " + tree.Search(data));

    // Search for a non-existent data and print the result
    data = 100;
    Console.WriteLine("Is " + data + " present? " + tree.Search(data));

}