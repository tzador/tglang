/// <summary>
/// This method sorts a given array using quicksort algorithm.
/// </summary>
/// <param name="arr">The array to be sorted.</param>
/// <param name="low">The starting index of the subarray to be sorted.</param>
/// <param name="high">The ending index of the subarray to be sorted.</param>
private void QuickSort(int[] arr, int low, int high)
{
    // Check if the subarray is empty or contains only one element
    if (low >= high)
        return;
    
    // Select a pivot element, in this case we choose the middle element of the subarray
    int pivot = arr[(low + high) / 2];
    
    // Initialize two pointers to track the elements less than and greater than the pivot
    int i = low;
    int j = high;
    
    // Keep swapping elements until the two pointers meet
    while (i <= j)
    {
        // Find the first element from the left that is greater than the pivot
        while (arr[i] < pivot)
            i++;
        
        // Find the first element from the right that is less than the pivot
        while (arr[j] > pivot)
            j--;
        
        // Check if the two pointers have not crossed before swapping the elements
        if (i <= j)
        {
            // Swap the two elements
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            
            // Move the pointers towards the middle
            i++;
            j--;
        }
    }
    
    // Recursively call the method on the two halves of the subarray on either side of the pivot
    QuickSort(arr, low, j);
    QuickSort(arr, i, high);
}