//This code snippet generates a list of prime numbers up to a user-defined limit using the Sieve of Eratosthenes algorithm.

//Declare a function to find all prime numbers up to a given limit
public static void SieveOfEratosthenes(int limit) 
{ 
    //Create a boolean array to track if numbers are prime or not, initialize all to true (assuming all numbers are prime)
    bool[] primeNumbers = new bool[limit+1]; 
    for (int i = 0; i < limit; i++) 
    {     
        primeNumbers[i] = true;     
    } 

    //Set the first two numbers (0 and 1) to false as they are not prime
    primeNumbers[0] = false;
    primeNumbers[1] = false;

    //Loop through all numbers starting from 2 (first prime number)
    for (int p=2; p*p<=limit; p++) 
    { 
        //If primeNumbers[p] is true, it is a prime number and all its multiples are marked as false
        if (primeNumbers[p] == true) 
        { 
            //Mark all multiples of p (starting from p*p) as false
            for (int i=p*p; i<=limit; i += p) 
                primeNumbers[i] = false; 
        } 
    } 

    //Print out all prime numbers by looping through the array and checking which numbers are still marked true
    for (int i=2; i<=limit; i++) 
    { 
        if (primeNumbers[i] == true) 
        Console.Write(i + " "); 
    }
}

//Example usage:
SieveOfEratosthenes(100); //Prints out all prime numbers up to 100 (2 3 5 7 11 ...)