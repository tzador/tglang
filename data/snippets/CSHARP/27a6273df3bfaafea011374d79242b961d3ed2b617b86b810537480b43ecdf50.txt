//This code snippet is a simple function that takes in two parameters and returns the sum of the two numbers.
public int AddNumbers(int num1, int num2)
{
    int sum = num1 + num2;
    return sum;
}

//This code snippet is an example of a custom exception class in C#.
public class CustomException : Exception
{
    public CustomException(string message, Exception innerException) : base(message, innerException)
    {
        //Custom logic for handling the exception.
        Console.WriteLine("Something went wrong: " + message);
    }
}

//This code snippet is a basic LINQ query that retrieves all numbers that are greater than 10.
var nums = new List<int> { 5, 10, 15, 20, 25, 30 };
var greaterThanTen = from num in nums
                     where num > 10
                     select num;
Console.WriteLine(string.Join(",", greaterThanTen)); //output: 15, 20, 25, 30

//This code snippet is an example of a multi-dimensional array in C#.
int[,] matrix = new int[3, 3] { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
//Print the first element in the second row
Console.WriteLine(matrix[1, 0]); //output: 4

//This code snippet is an implementation of the Singleton design pattern in C#.
public class Singleton
{
    private static Singleton instance;
 
    private Singleton()
    {
        //Constructor is private to prevent direct instantiation.
    }
 
    public static Singleton GetInstance()
    {
        //Return the existing instance if it has already been created.
        if (instance == null)
        {
            //Create a new instance if one does not exist.
            instance = new Singleton();
        }
        return instance;
    }
}

//This code snippet is an example of a delegate in C# that takes in two integers and returns their product.
public delegate int MultiplyDelegate(int num1, int num2);
public class Calculator
{
    //A method that uses the delegate to multiply two numbers.
    public int MultiplyNumbers(int num1, int num2)
    {
        MultiplyDelegate multiply = new MultiplyDelegate(Multiply);
        int product = multiply(num1, num2);
        return product;
    }
    
    //The method that the delegate points to.
    private int Multiply(int num1, int num2)
    {
        return num1 * num2;
    }
}

//This code snippet is an example of a lambda expression in C# that multiplies two numbers.
//The result is stored in a variable and then printed to the console.
int result = ((num1, num2) => num1 * num2)(5, 10);
Console.WriteLine(result); //output: 50