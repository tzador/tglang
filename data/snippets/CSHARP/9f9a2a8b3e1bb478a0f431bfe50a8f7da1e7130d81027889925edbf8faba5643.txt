// This code snippet demonstrates the use of LINQ methods to manipulate data from lists
// Define a parent class called Person with properties for name, age, and occupation
class Person
{
    public string Name { get; set; }
    public int Age { get; set; }
    public string Occupation { get; set; }
}

// Define a list of Person objects with different names, ages, and occupations
List<Person> people = new List<Person>()
{
    { new Person() { Name = "John", Age = 25, Occupation = "Teacher" } },
    { new Person() { Name = "Emily", Age = 35, Occupation = "Doctor" } },
    { new Person() { Name = "Dave", Age = 42, Occupation = "Lawyer" } },
    { new Person() { Name = "Melissa", Age = 29, Occupation = "Engineer" } }
};

// Use LINQ method 'Where' to filter the list to only include people over the age of 30
var overThirty = people.Where(p => p.Age > 30);

// Use LINQ method 'Select' to project a new list containing only the names of the people over the age of 30
var namesOverThirty = overThirty.Select(p => p.Name);

// Use LINQ method 'OrderByDescending' to sort the names in descending order
var sortedNames = namesOverThirty.OrderByDescending(name => name);

// Loop through the sorted list and print each name
foreach (var name in sortedNames)
{
    Console.WriteLine(name);
}