/// <summary>
/// This is a class for a linked list data structure
/// </summary>
/// <typeparam name="T">The generic type of data stored in the list.</typeparam>
public class LinkedList<T>
{
    // Store a reference to the head of the list
    private LinkedListNode<T> head;

    /// <summary>
    /// Adds a new node with the given data to the beginning of the list.
    /// </summary>
    /// <param name="data">The data to be stored in the new node.</param>
    public void AddFirst(T data)
    {
        // Create a new node with the given data
        LinkedListNode<T> newNode = new LinkedListNode<T>(data);

        // Set the next node as the current head
        newNode.Next = head;

        // Set the new node as the head of the list
        head = newNode;
    }

    /// <summary>
    /// Adds a new node with the given data to the end of the list.
    /// </summary>
    /// <param name="data">The data to be stored in the new node.</param>
    public void AddLast(T data)
    {
        // Create a new node with the given data
        LinkedListNode<T> newNode = new LinkedListNode<T>(data);

        // If the list is empty, set the new node as the head
        if (head == null)
        {
            head = newNode;
        }
        else
        {
            // Otherwise, iterate through the list until the end
            LinkedListNode<T> current = head;
            while (current.Next != null)
            {
                current = current.Next;
            }
            // Set the new node as the last node
            current.Next = newNode;
        }
    }

    /// <summary>
    /// Removes the node with the given data from the list.
    /// </summary>
    /// <param name="data">The data to be removed.</param>
    public void Remove(T data)
    {
        // Check if the head contains the given data
        if (head != null && head.Data.Equals(data))
        {
            // If so, set the next node as the new head
            head = head.Next;
            return;
        }

        // Otherwise, iterate through the list
        LinkedListNode<T> current = head;
        LinkedListNode<T> previous = null;
        while (current != null)
        {
            // If the current node contains the given data, remove it
            if (current.Data.Equals(data))
            {
                previous.Next = current.Next;
                return;
            }
            // Set the previous node as the current one
            previous = current;
            // Move to the next node
            current = current.Next;
        }
    }

    /// <summary>
    /// Prints out the data in the list in order.
    /// </summary>
    public void PrintList()
    {
        // Start at the head
        LinkedListNode<T> current = head;
        // Iterate through the list and print out the data in each node
        while (current != null)
        {
            Console.WriteLine(current.Data);
            current = current.Next;
        }
    }
}

/// <summary>
/// This is a class for the nodes of a linked list.
/// </summary>
/// <typeparam name="T">The generic type of data stored in the node.</typeparam>
public class LinkedListNode<T>
{
    // Store the data of the node
    public T Data { get; set; }

    // Store a reference to the next node
    public LinkedListNode<T> Next { get; set; }

    /// <summary>
    /// Constructor for the LinkedListNode class.
    /// </summary>
    /// <param name="data">The data to be stored in the node.</param>
    public LinkedListNode(T data)
    {
        Data = data;
    }
}