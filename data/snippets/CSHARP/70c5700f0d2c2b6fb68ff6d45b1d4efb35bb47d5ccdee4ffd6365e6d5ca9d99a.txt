/// <summary>
/// This is a class for creating an inventory system for a store.
/// </summary>
public class InventorySystem
{
    // Private fields for storing the inventory data
    private string[] products;
    private int[] quantities;
    private double[] prices;

    /// <summary>
    /// Constructor method to initialize the inventory with default values.
    /// </summary>
    public InventorySystem()
    {
        // Initialize arrays with default values
        products = new string[] { "Shoes", "Shirts", "Pants" };
        quantities = new int[] { 10, 20, 15 };
        prices = new double[] { 50.00, 25.00, 30.00 };
    }

    /// <summary>
    /// Method to add a new product to the inventory with specified quantity and price.
    /// </summary>
    /// <param name="product">The name of the product to add.</param>
    /// <param name="quantity">The quantity of the product to add.</param>
    /// <param name="price">The price of the product to add.</param>
    public void AddProduct(string product, int quantity, double price)
    {
        // Create temporary arrays with increased size
        string[] tempProducts = new string[products.Length + 1];
        int[] tempQuantities = new int[quantities.Length + 1];
        double[] tempPrices = new double[prices.Length + 1];

        // Copy existing data to temporary arrays
        Array.Copy(products, tempProducts, products.Length);
        Array.Copy(quantities, tempQuantities, quantities.Length);
        Array.Copy(prices, tempPrices, prices.Length);

        // Add new product, quantity and price to temporary arrays
        tempProducts[products.Length] = product;
        tempQuantities[quantities.Length] = quantity;
        tempPrices[prices.Length] = price;

        // Update original arrays with temporary arrays
        products = tempProducts;
        quantities = tempQuantities;
        prices = tempPrices;
    }

    /// <summary>
    /// Method to remove a product from the inventory.
    /// </summary>
    /// <param name="product">The name of the product to remove.</param>
    public void RemoveProduct(string product)
    {
        // Find index of product in products array
        int index = Array.IndexOf(products, product);

        // If product is found
        if (index > -1)
        {
            // Create temporary arrays with decreased size
            string[] tempProducts = new string[products.Length - 1];
            int[] tempQuantities = new int[quantities.Length - 1];
            double[] tempPrices = new double[prices.Length - 1];

            // Copy existing data up to index position to temporary arrays
            Array.Copy(products, tempProducts, index);
            Array.Copy(quantities, tempQuantities, index);
            Array.Copy(prices, tempPrices, index);

            // Copy existing data after index position to temporary arrays
            Array.Copy(products, index + 1, tempProducts, index, products.Length - index - 1);
            Array.Copy(quantities, index + 1, tempQuantities, index, quantities.Length - index - 1);
            Array.Copy(prices, index + 1, tempPrices, index, prices.Length - index - 1);

            // Update original arrays with temporary arrays
            products = tempProducts;
            quantities = tempQuantities;
            prices = tempPrices;
        }

        // If product is not found, throw an exception
        else
        {
            throw new ArgumentException("Product does not exist in inventory.");
        }
    }

    /// <summary>
    /// Method to retrieve the total value of the inventory.
    /// </summary>
    /// <returns>The total value of the inventory.</returns>
    public double GetInventoryValue()
    {
        // Initialize total value variable
        double totalValue = 0;

        // Loop through prices array and calculate total value
        for (int i = 0; i < prices.Length; i++)
        {
            totalValue += prices[i] * quantities[i];
        }

        return totalValue;
    }
}