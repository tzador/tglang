/*
This code snippet is a simple implementation of a binary search algorithm in CSharp.

Explanation:
- The binary search algorithm works by dividing a sorted array into two halves and then searching for the target element in one of the halves.
- If the target element is found, the index of that element is returned, otherwise, the algorithm continues to divide the array until the target element is found or the array is fully divided.
*/

// Function to perform the binary search
public int BinarySearch(int[] arr, int target) 
{
    int left = 0; // index of the leftmost element
    int right = arr.Length - 1; // index of the rightmost element

    // Keep dividing the array until the left index is lesser than or equal to the right index
    while (left <= right) 
    {
        // Calculate the middle index
        int mid = left + (right - left) / 2;

        // Check if the target element is at the middle index
        if (arr[mid] == target) 
        {
            // Return the index of the target element
            return mid;
        }
        // Check if the target element is smaller than the element at the middle index
        else if (arr[mid] > target) 
        {
            // Update the right index to be one less than the middle index
            right = mid - 1;
        }
        // Check if the target element is larger than the element at the middle index
        else 
        {
            // Update the left index to be one more than the middle index
            left = mid + 1;
        }
    }

    // If the target element is not found, return -1
    return -1;
}

// Example usage:
// int[] arr = {5, 10, 15, 20, 25};
// int target = 15;
// int index = BinarySearch(arr, target);
// Console.WriteLine("Target element found at index {0}.", index);

// Output:
// Target element found at index 2.