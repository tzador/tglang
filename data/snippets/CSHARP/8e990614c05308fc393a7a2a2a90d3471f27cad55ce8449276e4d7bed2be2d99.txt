// This code snippet creates an array of integers, sorts it using the QuickSort algorithm and outputs the sorted array
// Define QuickSort function
static void QuickSort(int[] arr, int low, int high)
{
    if (low < high)
    {
        // Partition the array
        int pivot = Partition(arr, low, high);

        // Recursively call QuickSort on the left and right sub-arrays
        QuickSort(arr, low, pivot - 1);
        QuickSort(arr, pivot + 1, high);
    }
}

// Define Partition function
static int Partition(int[] arr, int low, int high)
{
    // Set pivot element as the last element in the array
    int pivot = arr[high];
    // Initialize index of smaller element
    int i = low - 1;

    for (int j = low; j < high; j++)
    {
        // If current element is smaller than or equal to pivot element
        if (arr[j] <= pivot)
        {
            // Increment index of smaller element
            i++;
            // Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // Swap arr[i + 1] and arr[high] to place pivot element in the correct position
    int temp2 = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp2;

    // Return index of pivot element
    return i + 1;
}

// Create and initialize an array of integers
int[] array = { 6, 3, 8, 2, 1, 5, 4, 7 };
// Output unsorted array
Console.WriteLine("Unsorted array: " + string.Join(", ", array));
// Call QuickSort function to sort the array
QuickSort(array, 0, array.Length - 1);
// Output sorted array
Console.WriteLine("Sorted array: " + string.Join(", ", array));