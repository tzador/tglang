///<summary>
///This method performs a merge sort on a given array of integers in ascending order.
///Time complexity: O(nlogn)
///Space complexity: O(n)
///</summary>
///<param name="arr">The array of integers to be sorted</param>
///<returns>The sorted array of integers</returns>
public static int[] MergeSort(int[] arr)
{
    if (arr.Length <= 1) //base case, array of length 1 is already sorted
        return arr;

    //divide the array into two subarrays
    int mid = arr.Length / 2;
    int[] left = new int[mid];
    int[] right = new int[arr.Length - mid];
    Array.ConstrainedCopy(arr, 0, left, 0, mid); //copy first half of array to left subarray
    Array.ConstrainedCopy(arr, mid, right, 0, arr.Length - mid); //copy second half of array to right subarray

    //recursive calls to mergeSort
    left = MergeSort(left); 
    right = MergeSort(right);

    //perform merge operation
    int[] result = new int[arr.Length];
    int i = 0, j = 0, k = 0;
    while (i < left.Length && j < right.Length)
    {
        if (left[i] <= right[j])
            result[k++] = left[i++];
        else
            result[k++] = right[j++];
    }
    while (i < left.Length)
        result[k++] = left[i++];
    while (j < right.Length)
        result[k++] = right[j++];

    return result;
}