/// <summary>
/// This is a class that represents a bank account.
/// It stores the account number, balance and owner's name.
/// </summary>
public class BankAccount
{
    // Private variables to store account information
    private int accountNumber;
    private double balance;
    private string ownerName;

    // Constructor to set initial values for account
    public BankAccount(int accountNum, double initialBalance, string name)
    {
        // Check if initial balance is positive
        if (initialBalance < 0)
        {
            // Throw exception if initial balance is negative
            throw new ArgumentException("Initial balance cannot be negative.");
        }
        // Store account information in private variables
        this.accountNumber = accountNum;
        this.balance = initialBalance;
        this.ownerName = name;
    }

    // Method to deposit funds into the account
    public void Deposit(double amount)
    {
        // Check if deposit amount is positive
        if (amount > 0)
        {
            // Add deposit amount to current balance
            this.balance += amount;
        }
        else
        {
            // Throw exception if deposit amount is negative
            throw new ArgumentException("Deposit amount cannot be negative.");
        }
    }

    // Method to withdraw funds from the account
    public void Withdraw(double amount)
    {
        // Check if withdrawal amount is positive
        if (amount > 0)
        {
            // Check if withdrawal amount is less than current balance
            if (amount < this.balance)
            {
                // Subtract withdrawal amount from current balance
                this.balance -= amount;
            }
            else
            {
                // Throw exception if withdrawal amount is greater than current balance
                throw new InvalidOperationException("Withdrawal amount cannot be greater than current balance.");
            }
        }
        else
        {
            // Throw exception if withdrawal amount is negative
            throw new ArgumentException("Withdrawal amount cannot be negative.");
        }
    }

    // Public method to get account balance
    public double GetBalance()
    {
        // Return current balance
        return this.balance;
    }

    // Override ToString() method to provide string representation of account information
    public override string ToString()
    {
        // Use string interpolation to format account information
        return $"Account Number: {this.accountNumber}\nOwner's Name: {this.ownerName}\nBalance: {this.balance:C}";
    }
}