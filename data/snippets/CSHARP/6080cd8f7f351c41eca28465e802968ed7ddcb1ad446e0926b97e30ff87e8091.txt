/// <summary>
/// Creates a nested list of prime numbers up to the given limit.
/// </summary>
/// <param name="limit">The limit for the list of prime numbers.</param>
/// <returns>A nested list of prime numbers.</returns>
public List<List<int>> GetPrimeNumbers(int limit)
{
    List<List<int>> primeNumbers = new List<List<int>>();
    for (int i = 2; i <= limit; i++) // loop through all numbers up to the limit
    {
        bool isPrime = true; // flag to check if current number is prime
        for (int j = 2; j < i; j++) // loop through all numbers below current number
        {
            if (i % j == 0) // if current number is divisible by any other number, it is not prime
            {
                isPrime = false;
                break;
            }
        }
        if (isPrime) // if current number is prime, add it to the list of prime numbers
        {
            List<int> primes = new List<int>() { i }; // create a new list with current prime number
            for (int k = 1; k < primeNumbers.Count; k++) // loop through all existing lists of prime numbers
            {
                if (primes.Last() > primeNumbers[k][primeNumbers[k].Count - 1]) // check if current prime number is smaller than the last number in the existing list
                {
                    primes.AddRange(primeNumbers[k]); // if so, add the list to the end of the current list
                    primeNumbers.RemoveAt(k); // and remove the existing list from the list of prime numbers
                    k--; // decrease index to account for removed list
                }
                else if (primes.Last() == primeNumbers[k][primeNumbers[k].Count - 1]) // if current prime number is equal to the last number in the existing list, add it to that list
                {
                    primeNumbers[k].Add(primes.Last());
                    primes.RemoveAt(primes.Count - 1); // remove the added prime number from the current list
                }
                else if (primes.Last() < primeNumbers[k][primeNumbers[k].Count - 1]) // if current prime number is larger than the last number in the existing list, continue to the next list
                {
                    continue;
                }
            }
            primeNumbers.Add(primes); // add remaining prime numbers to the list of prime numbers
        }
    }
    return primeNumbers; // return the nested list of prime numbers
}