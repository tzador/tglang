// This code snippet is a basic implementation of quicksort algorithm in C#
// It takes an unsorted array and sorts it using quicksort technique

// Defining the quicksort function
static void Quicksort(int[] array, int low, int high)
{
    // Check if the array is not empty
    if (low < high)
    {
        // Select a pivot element, in this case, the rightmost element
        int pivot = array[high];

        // Define the left and right pointers
        int left = low - 1;
        int right = high + 1;

        // Move the pointers until they cross each other
        while (true)
        {
            // Move the left pointer to the right until it finds an element larger than pivot
            do
            {
                left++;
            } while (array[left] < pivot);

            // Move the right pointer to the left until it finds an element smaller than pivot
            do
            {
                right--;
            } while (array[right] > pivot);

            // Check if pointers have crossed each other
            if (left >= right) break;

            // Swap the elements at the left and right pointers
            var temp = array[left];
            array[left] = array[right];
            array[right] = temp;
        }

        // Recursively call quicksort function for left and right subarrays
        Quicksort(array, low, right);
        Quicksort(array, right + 1, high);
    }
}

// Testing the implementation
int[] unsortedArray = { 5, 2, 8, 1, 4, 7, 3 };
Console.WriteLine("Unsorted array: " + string.Join(", ", unsortedArray));
Quicksort(unsortedArray, 0, unsortedArray.Length - 1);
Console.WriteLine("Sorted array: " + string.Join(", ", unsortedArray));