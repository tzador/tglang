// This code snippet is a function that creates a doubly linked list and adds nodes to it.
// It takes in an array of integers as input and returns the head of the linked list as output
// initialize a class for the node
public class Node
{
    public int data;
    public Node next, prev;

    public Node(int value)
    {
        data = value;
        next = prev = null;
    }
}

// initialize a class for the doubly linked list
public class DoublyLinkedList
{
    public Node head;

    // function to add new node at the beginning of the list
    public void AddNodeToFront(int[] array)
    {
        foreach (int num in array)
        {
            Node newNode = new Node(num);
            newNode.next = head;

            if (head != null)
                head.prev = newNode;

            head = newNode;
        }
    }

    // function to add new node at the end of the list
    public void AddNodeToEnd(int[] array)
    {
        Node temp = head;

        while (temp.next != null)
        {
            temp = temp.next;
        }

        foreach (int num in array)
        {
            Node newNode = new Node(num);
            temp.next = newNode;
            newNode.prev = temp;

            temp = newNode;
        }
    }

    // function to print the linked list in forward direction
    public void PrintListForward()
    {
        Node temp = head;

        while (temp != null)
        {
            Console.Write(temp.data + " ");
            temp = temp.next;
        }

        Console.Write("\n");
    }

    // function to print the linked list in reverse direction
    public void PrintListReverse()
    {
        Node temp = head;

        while (temp.next != null)
        {
            temp = temp.next;
        }

        while (temp != null)
        {
            Console.Write(temp.data + " ");
            temp = temp.prev;
        }

        Console.Write("\n");
    }

    // function to delete a node with given data
    public void DeleteNode(int data)
    {
        // check if head is null or if head contains the data
        if (head == null)
        {
            return;
        }
        else if (head.data == data)
        {
            head = head.next;
            head.prev = null;
            return;
        }

        // loop through the list until the node with the given data is found
        Node temp = head.next;

        while (temp.next != null)
        {
            if (temp.data == data)
            {
                temp.prev.next = temp.next;
                temp.next.prev = temp.prev;
                return;
            }

            temp = temp.next;
        }

        // check if the last node contains the given data
        if (temp.data == data)
        {
            temp.prev.next = null;
            return;
        }
    }
}

// create a new instance of the DoublyLinkedList class
DoublyLinkedList myDLL = new DoublyLinkedList();

// create an array of integers
int[] numbers = {1, 2, 3, 4, 5};

// add nodes to the doubly linked list
myDLL.AddNodeToFront(numbers);
myDLL.AddNodeToEnd(numbers);

// print the linked list in forward and reverse direction
myDLL.PrintListForward();
myDLL.PrintListReverse();

// output:
// 1 2 3 4 5 1 2 3 4 5
// 5 4 3 2 1 5 4 3 2 1