public class MyGenericClass <T> : IList <T>
{
  private List <T> myList;
  public MyGenericClass()
  {
    myList = new List <T>();
  }
  public int Count
  {
    get { return myList.Count; }
  }
  public bool IsReadOnly
  {
    get { return false; }
  }
  public IEnumerator <T> GetEnumerator()
  {
    return myList.GetEnumerator();
  }
  public void Add (T item)
  {
    myList.Add (item);
  }
  public void Clear()
  {
    myList.Clear();
  }
  public bool Contains(T item)
  {
    return myList.Contains(item);
  }
  public void CopyTo(T[] array, int arrayIndex)
  {
    myList.CopyTo(array, arrayIndex);
  }
  public bool Remove(T item)
  {
    return myList.Remove(item);
  }
  public int IndexOf(T item)
  {
    return myList.IndexOf(item);
  }
  public void Insert(int index, T item)
  {
    myList.Insert(index, item);
  }
  public void RemoveAt(int index)
  {
    myList.RemoveAt(index);
  }
  public T this[int index]
  {
    get
    {
      return myList[index];
    }
    set
    {
      myList[index] = value;
    }
  }
}