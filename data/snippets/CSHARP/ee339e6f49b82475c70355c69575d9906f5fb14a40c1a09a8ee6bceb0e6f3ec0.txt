// This is a class with generic type T
public class ExampleClass<T>
{
    // private field of type T
    private T field;

    // Constructor that takes in a parameter of type T
    public ExampleClass(T param)
    {
        // Assigning the parameter to the private field
        this.field = param;
    }

    // Generic method that returns the private field of type T
    public T GetField()
    {
        return this.field;
    }

    // Generic method that takes in a parameter of type R and returns a new instance of ExampleClass with type R
    public ExampleClass<R> ConvertField<R>(R newField)
    {
        // Creating a new instance of ExampleClass with type R
        ExampleClass<R> newClass = new ExampleClass<R>(newField);

        // Returning the new instance
        return newClass;
    }

    // Static method that takes in a parameter of type T and returns it as a string
    public static string ConvertToString(T param)
    {
        return param.ToString();
    }
}

// Creating an instance of ExampleClass with type string
ExampleClass<string> stringClass = new ExampleClass<string>("Hello World!");

// Calling the GetField method and printing the result
Console.WriteLine(stringClass.GetField());

// Converting the string field to an int using the ConvertField method and printing the result
int intField = 10;
ExampleClass<int> intClass = stringClass.ConvertField<int>(intField);
Console.WriteLine(intClass.GetField());

// Calling the static method ConvertToString and printing the result
string convertedField = ExampleClass<string>.ConvertToString("Welcome to the world of C#!");
Console.WriteLine(convertedField);