// This is a complex code snippet in CSharp
// It utilizes advanced concepts and techniques to perform a specific task
// We will be using a custom class to create an array and then sort it using a sorting algorithm

// Create a custom class named ArrayHelper
public class ArrayHelper
{
    // Create a private field to store the array
    private int[] _array;

    // Create a constructor to initialize the array with given size
    public ArrayHelper(int size)
    {
        _array = new int[size];
    }

    // Create a method to add elements to the array
    public void AddElement(int element, int index)
    {
        _array[index] = element;
    }

    // Create a method to sort the array using the bubble sort algorithm
    public void BubbleSort()
    {
        // Initialize swap variable to keep track of swaps
        bool swap = true;
        // Create a temporary variable to use for swapping elements
        int temp;

        // Loop through the array until no more swaps occur
        while (swap)
        {
            swap = false;

            // Loop through the array and compare adjacent elements, swapping them if necessary
            for (int i = 0; i < _array.Length - 1; i++)
            {
                // If the current element is larger than the next, swap them
                if (_array[i] > _array[i + 1])
                {
                    temp = _array[i];
                    _array[i] = _array[i + 1];
                    _array[i + 1] = temp;

                    // Set swap variable to true to indicate a swap has occurred
                    swap = true;
                }
            }
        }

    }

}

// Create an instance of the ArrayHelper class with size of 5
ArrayHelper array = new ArrayHelper(5);

// Add elements to the array
array.AddElement(5, 0);
array.AddElement(2, 1);
array.AddElement(8, 2);
array.AddElement(3, 3);
array.AddElement(1, 4);

// Sort the array using the BubbleSort method
array.BubbleSort();

// Print out the sorted array
foreach (int element in array)
{
    Console.Write(element + " ");
}

// Output: 1 2 3 5 8