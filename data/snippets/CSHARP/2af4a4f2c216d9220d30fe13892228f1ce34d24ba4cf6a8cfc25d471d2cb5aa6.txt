// This is a class for implementing a binary search tree
class BinarySearchTree
{
    // This is a nested class for creating nodes
    // A node consists of a value and two children (left and right)
    class Node
    {
        public int value;
        public Node left;
        public Node right;

        // Constructor for creating a new node with given value
        public Node(int value)
        {
            this.value = value;
        }
    }

    // Root node of the binary search tree
    Node root;

    // Constructor for creating an empty binary search tree
    public BinarySearchTree()
    {
        root = null;
    }

    // Method for adding a node to the binary search tree
    public void Add(int value)
    {
        Node newNode = new Node(value);

        // If tree is empty, set new node as root
        if (root == null)
        {
            root = newNode;
        }
        else
        {
            Node current = root;

            while (true)
            {
                // If value to be added is less than current node's value, move to left child
                if (value < current.value)
                {
                    // If left child is null, set new node as left child
                    if (current.left == null)
                    {
                        current.left = newNode;
                        break;
                    }
                    else
                    {
                        // If left child is not null, move to left child
                        current = current.left;
                    }
                }
                else if (value > current.value) // If value to be added is greater than current node's value, move to right child
                {
                    // If right child is null, set new node as right child
                    if (current.right == null)
                    {
                        current.right = newNode;
                        break;
                    }
                    else
                    {
                        // If right child is not null, move to right child
                        current = current.right;
                    }
                }                
            }
        }
    }

    // Method for searching for a value in the binary search tree
    public bool Search(int value)
    {
        // Start from root
        Node current = root;

        // While current node is not null
        while (current != null)
        {
            // If value is found, return true
            if (current.value == value)
            {
                return true;
            }
            // If value is less than current node's value, move to left child
            else if (value < current.value)
            {
                current = current.left;
            }
            // If value is greater than current node's value, move to right child
            else if (value > current.value)
            {
                current = current.right;
            }
        }

        // If value is not found, return false
        return false;
    }
}