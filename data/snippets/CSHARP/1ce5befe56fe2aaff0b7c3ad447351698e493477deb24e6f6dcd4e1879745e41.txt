/*
    This code snippet demonstrates a complex sorting algorithm using C#.

    It takes in an array of integers as input and uses the quicksort algorithm to sort the elements in ascending order.

    The algorithm works by partitioning the array into two subarrays, one containing elements smaller than a chosen pivot element and one containing elements larger than the pivot element. It then recursively sorts the subarrays and combines them to form the final sorted array.

    This code snippet also includes annotations, explaining each step of the algorithm.
*/

// Function to perform quicksort on an array
public void QuickSort(int[] array, int low, int high)
{
    // Check if array is empty or contains only one element
    if (low >= high)
    {
        return;
    }

    // Choose a pivot element (in this case, the middle element)
    int pivot = array[(low + high) / 2];

    // Initialize the left and right pointers
    int left = low;
    int right = high;

    // Loop until the left and right pointers meet
    while (left <= right)
    {
        // Find an element on the left that should be on the right
        while (array[left] < pivot)
        {
            left++;
        }

        // Find an element on the right that should be on the left
        while (array[right] > pivot)
        {
            right--;
        }

        // Swap the elements if they are in the wrong order
        if (left <= right)
        {
            int temp = array[left];
            array[left] = array[right];
            array[right] = temp;

            // Move the pointers to continue looping
            left++;
            right--;
        }
    }

    // Recursively sort the subarrays on either side of the pivot element
    QuickSort(array, low, right);
    QuickSort(array, left, high);
}

// Example usage
int[] numbers = { 5, 2, 7, 8, 3, 1, 4 };
QuickSort(numbers, 0, numbers.Length - 1);
// Output: [1, 2, 3, 4, 5, 7, 8]