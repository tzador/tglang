%% Define a recursive predicate to check if a list is a palindrome
%% A list is a palindrome if it reads the same forward and backward

%% Base case: an empty list is a palindrome
palindrome([]).

%% Recursive case: a list is a palindrome if the first and last elements are equal
%% and the remaining sublist is also a palindrome
palindrome([X|Y]) :- 
    append(Middle, [X], Y), % Use append to split the list into a sublist and the last element
    palindrome(Middle).     % Recursively call palindrome on the sublist
    
%% Define a predicate to append two lists
%% Base case: appending an empty list to another list is the second list
append([], X, X).

%% Recursive case: append the first element of the first list to the result of 
%% appending the remaining elements of the first list and the second list
append([X|Y], Z, [X|W]) :- append(Y, Z, W).

%% Example query: palindrome([a,b,b,a]).
%% Example output: true