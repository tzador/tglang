%%% fun_with_lists/6
% This is a predicate that takes in two lists and outputs a list of the elements that are common in both lists
fun_with_lists(A, B, Union) :-
    findall(X, (member(X, A), member(X, B)), Union).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% remove/3
% This is a predicate that takes in an element, a list, and outputs a new list with the element removed
remove(_, [], []). % base case, when list is empty, return empty list
remove(X, [X|Tail], NewList) :-
    remove(X, Tail, NewList). % if X is the head, recursively call with tail
remove(X, [Y|Tail], [Y|NewList]) :-
    dif(X, Y), % if X is not the head, check if it is different from Y
    remove(X, Tail, NewList). % if different, recursively call with tail, and add Y to new list

%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% reverse/2
% This is a predicate that takes in a list and outputs the reversed list
reverse(List, Reversed) :-
    reverseHelper(List, [], Reversed). % call helper function with accumulator and empty list

reverseHelper([], Reversed, Reversed). % when original list is empty, accumulator becomes reversed list
reverseHelper([Head|Tail], Acc, Reversed) :-
    reverseHelper(Tail, [Head|Acc], Reversed). % add head to accumulator, recursively call with tail and accumulator as new parameters