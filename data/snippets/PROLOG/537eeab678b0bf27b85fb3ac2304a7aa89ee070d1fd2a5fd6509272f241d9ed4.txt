% A Prolog program that implements a depth-first search algorithm.

% Define the starting and goal states.
startState(s).
goalState(g).
 
% Define the successor function, which takes in a state and returns its possible successor states.
successor(s, [x,y,z]).
successor(x, [z,w]).
successor(y, [z]).
successor(z, [g]).
successor(w, [g]).
 
% The search function takes in a list of visited states (initially empty) and a state to start from.
% Returns a list of actions to reach the goal state.
search(VisitedStates, State, Actions) :-
    % Check if the current state is the goal state.
    goalState(State),
    % If so, reverse the list of visited states to get the actions taken and return.
    reverse(VisitedStates, Actions).
 
search(VisitedStates, State, Actions) :-
    % Check if the current state has already been visited.
    not(member(State, VisitedStates)),
    % Call the successor function to get the next possible states.
    successor(State, NextStates),
    % Add the current state to the visited states list.
    append(VisitedStates, [State], NewVisitedStates), 
    % Loop through the next possible states and recursively call search on each of them.
    member(NewState, NextStates),
    search(NewVisitedStates, NewState, Actions).
 
% Call the search function with the starting state and an empty list for visited states.
search([], startState, Actions).