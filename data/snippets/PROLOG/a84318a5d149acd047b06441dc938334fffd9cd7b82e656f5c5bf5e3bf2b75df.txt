/*
    This is a predicate that performs a binary search in a sorted list.
    It takes in three arguments - the list, the element to search for, and the result.
    The result will be unified with the index of the element if it is found, or -1 if it is not found.
*/
binary_search(List, Element, Result) :-
    binary_search(List, Element, 0, Result).

/*
    This is the base case of the binary search, when the list is empty.
    The result is set to -1, indicating that the element was not found.
*/
binary_search([], _, _, -1).

/*
    This is the recursive case of the binary search.
    It takes in the list, the element to search for, the current index, and the result.
    If the first element in the list is equal to the element we are searching for,
    then the result is unified with the current index.
    Otherwise, we divide the list into two halves and recursively call binary_search
    on the appropriate half, incrementing the current index accordingly.
*/
binary_search([X|_], Element, Index, Result) :-
    X = Element,
    Result = Index.
binary_search(List, Element, Index, Result) :-
    length(List, Length),
    Split is Length // 2,
    split_at(List, Split, Left, Right),
    (
        X < Element ->
            NewIndex is Index + Split,
            binary_search(Right, Element, NewIndex, Result);
        NewIndex is Index,
        binary_search(Left, Element, NewIndex, Result)
    ).

/*
    This is a utility predicate that splits a list into two halves at the specified index.
*/
split_at(List, Index, Left, Right) :-
    length(Left, Index),
    append(Left, Right, List).