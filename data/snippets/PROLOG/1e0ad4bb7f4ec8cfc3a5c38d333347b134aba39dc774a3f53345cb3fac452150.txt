% defining a recursive rule for finding the length of a list
length([], 0). % base case: an empty list has length 0
length([_|T], N) :- length(T, N1), N is N1 + 1. % recursive case: count the length of the tail and add 1 to it

% defining a helper predicate to find the max element in a list
max_list([X], X). % base case: when there is only one element, it is the maximum
max_list([H|T], Max) :- max_list(T, Max1), H =< Max1, Max is Max1. % recursive case: if head is not the maximum, call predicate on tail
max_list([H|T], Max) :- max_list(T, Max1), H > Max1, Max is H. % recursive case: if head is the maximum, set Max to head

% defining a predicate to find the index of a given element in a list
find_index(X, [X|_], 1). % base case: if element is the first in list, its index is 1
find_index(X, [_|T], N) :- find_index(X, T, N1), N is N1 + 1. % recursive case: check if element is in the tail and add 1 to index

% defining a predicate to sort a list in descending order
sort_desc([], []). % base case: an empty list is already sorted
sort_desc([H|T], Sorted) :- split(H, T, Smaller, Bigger), sort_desc(Bigger, BiggerSorted), sort_desc(Smaller, SmallerSorted), append(BiggerSorted, [H|SmallerSorted], Sorted). % recursive case: split list into smaller and bigger elements, sort them recursively and combine them back together in descending order

% defining a helper predicate to split a list into smaller and bigger elements based on a pivot
split(_, [], [], []). % base case: when the list is empty, there are no smaller or bigger elements
split(Pivot, [H|T], [H|Smaller], Bigger) :- H =< Pivot, split(Pivot, T, Smaller, Bigger). % recursive case: if element is smaller or equal to pivot, add it to Smaller list
split(Pivot, [H|T], Smaller, [H|Bigger]):- H > Pivot, split(Pivot, T, Smaller, Bigger). % recursive case: if element is bigger than pivot, add it to Bigger list