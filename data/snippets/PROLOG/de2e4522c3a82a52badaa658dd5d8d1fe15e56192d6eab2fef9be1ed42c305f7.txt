% Define a rule for finding the maximum element in a list
maximum_list([H], H).                            % If the list has only one element, it is the maximum
maximum_list([H|T], H) :- maximum_list(T, Max),  % If the first element is the maximum of the rest of the list
                          H >= Max.              % Ensure that the first element is greater than or equal to the maximum 
maximum_list([H|T], Max) :- maximum_list(T, Max),% If the first element is not the maximum of the rest of the list
                            H < Max.              % Ensure that the first element is less than the maximum
% Define a rule for sorting a list in ascending order
sort_list([], []).                                   % An empty list is already sorted
sort_list([H|T], Sorted) :- partition(T, H, Smaller, Larger),    % Partition the list into smaller and larger elements
                            sort_list(Smaller, SortedSmaller),   % Sort the smaller elements
                            sort_list(Larger, SortedLarger),     % Sort the larger elements
                            append(SortedSmaller, [H|SortedLarger], Sorted).  % Combine the sorted smaller and larger elements

% Define a rule for partitioning a list based on a pivot element
partition([], _, [], []).                          % An empty list will have empty smaller and larger lists
partition([X|T], Pivot, [X|Smaller], Larger) :-    % If the element is less than or equal to the pivot
                                                  X =< Pivot,
                                                  partition(T, Pivot, Smaller, Larger).
partition([X|T], Pivot, Smaller, [X|Larger]) :-    % If the element is larger than the pivot
                                                  X > Pivot,
                                                  partition(T, Pivot, Smaller, Larger).

% Define a rule for calculating the factorial of a number
factorial(0, 1).                         % 0! is equal to 1
factorial(N, Result) :- N > 0,            % If the number is greater than 0
                        N1 is N - 1,      % Decrement the number by 1
                        factorial(N1, SubResult),         % Calculate the factorial of the decremented number
                        Result is N * SubResult.          % Multiply the number by the factorial of the decremented number to get the final result