% This code snippet is an example of finding the shortest path between two nodes in a directed graph using Dijkstra's algorithm

% Begin by defining the facts and rules for your directed graph
% The facts define the edges between nodes and their respective distances
edge(a,b,3).
edge(b,c,4).
edge(c,d,5).
edge(d,e,2).
edge(a,d,2).
edge(b,d,1).
edge(c,e,4).

% The rules define the distance from the starting node to each node
% The distance from the starting node to itself is 0
distance(Node, Node, 0).
% For any other node, the distance is the minimum of the distances from the starting node to its neighbors plus the distance of the edge between them
distance(Source, Node, Distance) :-
    Source \= Node,                % Ensures the node is not the starting node
    edge(Source, Neighbor, Edge),  % Finds the edge between the starting node and one of its neighbors
    distance(Neighbor, Node, NeighborDistance),  % Recursively finds the distance from the neighbor to the destination node
    Distance is Edge + NeighborDistance.

% Next, define the predicate to find the shortest path, using Dijkstra's algorithm
% This predicate takes in the starting node, destination node, and a list of visited nodes
dijkstra(Start, Dest, Visited, Path, Distance) :-
    distance(Start, Dest, Distance),  % Finds the distance from the starting node to the destination node
    reverse([Dest | Visited], Path).  % Reverses the list of visited nodes and adds the destination node to the beginning as the shortest path

% The following rule is used to find the shortest path from the starting node to the destination node
% It uses a helper predicate to keep track of the visited nodes and current shortest distance
dijkstra(Start, Dest, Path, Distance) :-
    dijkstra(Start, Dest, [], Path, Distance).

% Use the following query to find the shortest path and distance from node a to node e
% ?- dijkstra(a, e, Path, Distance).
% Path = [a, d, e],
% Distance = 4.