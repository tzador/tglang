% This is a Prolog program that implements a family tree.

% Define the parent-child relationship
parent(john, molly).
parent(john, peter).
parent(mary, molly).
parent(mary, peter).

% Define the gender of individuals
male(john).
male(peter).
female(mary).
female(molly).

% Define the rules for determining the mother
mother(X, Y) :- parent(X, Y), female(X).

% Define the rules for determining the father
father(X, Y) :- parent(X, Y), male(X).

% Define the rules for determining the siblings
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.

% Define the rules for determining the brother
brother(X, Y) :- sibling(X, Y), male(X).

% Define the rules for determining the sister
sister(X, Y) :- sibling(X, Y), female(X).

% Define the rules for determining the aunt
aunt(X, Y) :- parent(Z, Y), sister(X, Z).

% Define the rules for determining the uncle
uncle(X, Y) :- parent(Z, Y), brother(X, Z).

% Define the rules for determining the ancestor
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).

% Define the rules for determining the descendant
descendant(X, Y) :- parent(Y, X).
descendant(X, Y) :- parent(Y, Z), descendant(X, Z).

% Define the rules for determining the in-laws
in_law(X, Y) :- sibling(X, S), married_to(S, Y).
in_law(X, Y) :- married_to(X, S), sibling(S, Y).
in_law(X, Y) :- parent(X, P), married_to(P, Y).
in_law(X, Y) :- married_to(X, P), parent(P, Y).

% Define the relationships in the family tree
married_to(john, mary).
married_to(molly, nathan).
married_to(peter, sara).

% Define a query
?- ancestor(john, sara).