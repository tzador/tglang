% This is a Prolog code snippet that generates a list of all possible combinations of elements from two lists.
% It takes in two lists, L1 and L2, as arguments and returns a list, Result, containing all combinations.

generate_combinations(List1, List2, Result) :-

    % The base case is when both lists are empty, the result will be empty.
    (   List1 = [], List2 = []
    ->
        Result = []
    ;
    % When list 1 is empty, the result will be the same as list 2.
        List1 = [], List2 \= []
    ->
        Result = List2
    ;
    % When list 2 is empty, the result will be the same as list 1.
        List2 = [], List1 \= []
    ->
        Result = List1
    ;
    % When both lists are not empty, the result will be a list containing the first element of list 1 concatenated with every element of list 2,
    % and the result of the rest of list 1 and list 2.
        [Head|Tail] = List1,
        Result = [Head|Temp],
        generate_combinations(Tail, List2, Temp)
    ),
    
    % Recursive call to generate_combinations predicate with the rest of list 2 and the original list 1 to generate the remaining combinations.
    generate_combinations(List2, List1, RemainingCombinations),
    
    % Append the remaining combinations to the existing result list.
    append(Result, RemainingCombinations, ResultWithRem),
    
    % Remove duplicates from the final result list.
    list_to_set(ResultWithRem, Result).