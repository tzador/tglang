% Define rules for finding the shortest distance between two cities
    %-----------------------------------------------------------------------------

    % Define city distances
    distance(toronto, london, 120).
    distance(toronto, montreal, 350).
    distance(montreal, ottawa, 440).
    distance(ottawa, quebec_city, 400).
    distance(montreal, quebec_city, 260).
    distance(london, kitchener, 100).
    distance(kitchener, hamilton, 75).
    distance(hamilton, toronto, 70).
    distance(london, windsor, 200).
    distance(windsor, detroit, 20).
    distance(detroit, chicago, 300).
    distance(toronto, buffalo, 110).
    distance(buffalo, boston, 336).
    distance(boston, new_york, 225).
    distance(new_york, philadelphia, 95).
    distance(chicago, st_louis, 260).
    distance(boston, philadelphia, 285).

    % Define rule for calculating distance between two cities
    distance(X, Y, Z) :- distance(X, Y, Z). % If city distances are specified
    distance(X, Y, Z) :- distance(Y, X, Z). % If distance in opposite direction, use same distance

    % Define rule for finding shortest distance between two cities
    shortest_path(X, Y, [X,Y], Z) :- distance(X, Y, Z). % If direct distance between cities already defined
    shortest_path(X, Y, [X|Path], Distance) :-  % Splits the shortest path into two parts
            distance(X, Z, Distance1), % Find the distance between X and potential next city Z
            shortest_path(Z, Y, Path, Distance2), % Repeats process to find distance between Z and final city Y
            Distance is Distance1 + Distance2. % Adds the two distances to get total distance

    shortest_path(X, Y, Path, Distance) :- % Rule for finding shortest path between cities 
            distance(X, Z, Distance1), % Find distance between initial city and potential next city
            shortest_path(Z, Y,[Z|Path], Distance2), % Repeats process for other potential cities
            Distance is Distance1 + Distance2. % Adds the two distances to get total distance