% A rule that determines if two lists have the same first element.
same_first([Elem|_], [Elem|_]).
% A recursive rule that checks if the nth element of two lists is the same.
same_nth([_|T1], [_|T2], N) :- N1 is N - 1, same_nth(T1, T2, N1).
% Base case for when the nth element is reached and they are the same.
same_nth([Elem1|_], [Elem2|_], 1) :- Elem1 = Elem2.
% Recursive rule that checks if an element is a member of a list.
member(Elem, [Elem|_]).
member(Elem, [_|T]) :- member(Elem, T).
% A rule that determines if two lists have the same elements in the same order.
same_list(List1, List2) :- same_nth(List1, List2, N), N is 1, !.
same_list(List1, List2) :- same_first(List1, List2), same_list(List1, List2).