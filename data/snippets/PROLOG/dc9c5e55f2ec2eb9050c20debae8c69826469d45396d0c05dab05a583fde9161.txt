is_list([]).  //predicate to check if given input is a list
is_list([_|Tail]) :- is_list(Tail).  //recursive rule to check if given input is a list

sumList([], 0).  //base case for sumList predicate, returns 0 if given input is empty list
sumList([Head|Tail], Sum) :- sumList(Tail, TailSum), Sum is Head + TailSum.  //recursive rule to calculate sum of all elements in list

is_prime(2).  //predicate to check if given number is prime
is_prime(3).
is_prime(N) :- N > 3, N mod 2 =\= 0, \+ has_factor(N, 3).  //recursive rule to check if given number is prime
has_factor(N, Factor) :- N mod Factor =:= 0.  //helper predicate to check if given number has any factors

fib(0,0).  //base case for fibonacci predicate, returns 0 if given input is 0
fib(1,1).  //base case for fibonacci predicate, returns 1 if given input is 1
fib(N,Result) :- N > 1, N1 is N-1, N2 is N-2, fib(N1, Result1), fib(N2, Result2), Result is Result1 + Result2.  //recursive rule to calculate fibonacci series for given input

evenNumbers(List, EvenList) :- findall(X, (member(X, List), X mod 2 =:= 0), EvenList).  //predicate to find all even numbers in given list and return them in a new list

encode([], []).  //base case for encode predicate, returns empty list if given input is empty list
encode(List, CompressedList) :- pack(List, PackedList), maplist(compress, PackedList, CompressedList). //recursive rule to pack consecutive elements in a list and compress them using compress predicate

compress([X], X).  //base case for compress predicate, returns single element if given list contains only one element
compress([X,Y|Ys], X-YCompressed) :- X \= Y, compress([Y|Ys], YCompressed).  //recursive rule to compress consecutive elements in list

pack([], []).  //base case for pack predicate, returns empty list if given input is empty list
pack([X|Xs], [Z|Zs]) :- transfer(X, Xs, Ys, Z), pack(Ys, Zs).  //recursive rule to pack consecutive elements in list

transfer(X, [], [], [X]).  //base case for transfer predicate, returns element in list if no consecutive elements are found
transfer(X, [Y|Ys], [Y|Ys], [X]) :- X \= Y.  //helper predicate to transfer element to next list if not equal to consecutive element
transfer(X, [X|Xs], Ys, [X|Zs]) :- transfer(X, Xs, Ys, Zs).  //helper predicate to transfer consecutive elements to next list