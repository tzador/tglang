/*
This is a complex code snippet in PROLOG.
It contains a rule and a query with multiple conditions and variables.
The rule is used to determine if a given list of numbers is a palindrome.
The query checks if the list [1,2,3,2,1] is a palindrome.
A palindrome is a list that reads the same forwards and backwards.
*/

% Rule to check if a list is a palindrome
palindrome([]).                                           % Base case, an empty list is a palindrome                       
palindrome([_]).                                          % Base case, a list with a single element is a palindrome
palindrome([Head|Tail]) :-                                 % Recursive case, split the list into the head (first element) and tail (remaining elements)
    append(Middle, [Head], Tail),                          % Append the head to the end of the middle, resulting in a reversed list
    palindrome(Middle).                                    % Recursively check if the middle is a palindrome, ignoring the head 

% Query to check if the list [1,2,3,2,1] is a palindrome
?- palindrome([1,2,3,2,1]).                               % The query will return true, as the list is indeed a palindrome.