% This is a Prolog implementation of the popular 'tic-tac-toe' game.
% It uses lists to represent the game board and recursive functions to implement the game logic.

% Function that checks if a list is a winning combination.
% Checks for horizontal, vertical and diagonal wins.
winning_combination([X, X, X|_]).
winning_combination([_, _, _, X, X, X|_]).
winning_combination([_, _, _, _, _, _, X, X, X]).
winning_combination([X, _, _, X, _, _, X, _, _]).
winning_combination([_, X, _, _, X, _, _, X, _]).
winning_combination([X, _, _, _, X, _, _, _, X]).
winning_combination([_, _, X, _, X, _, X, _, _]).

% Function that checks if all elements in a list are already played.
all_played([]).
all_played([X|Xs]):-
(X =\= 0),
all_played(Xs).

% Function that checks if the game is already won or all positions are played.
game_over(Board, 1):-
winning_combination(Board).
game_over(Board, 0):-
not(winning_combination(Board)),
all_played(Board).

% Function that makes a move.
% Checks if the position is available and updates the board accordingly.
move([0|MoreMoves], [X|MoreMoves], Position, 1):-
Position = 1,
X is 1,
!.
move([X|MoreMoves], [X|MoreMoves], Position, 0):-
X =\= 0,
all_played([X|MoreMoves]),
!.	
move([Move|OtherMoves], [X|UpdatedMoves], Position, Flag):-
N is Position - 1,
Flag is 0,
move(OtherMoves, UpdatedMoves, N, Flag).

% Function that prints the board.
print_board([]).
print_board([X1, X2, X3, X4, X5, X6, X7, X8, X9]):-
write([X1, X2, X3]), nl,
write([X4, X5, X6]), nl,
write([X7, X8, X9]), nl.

% Function that allows the players to make moves.
% Uses 'read' to get player input and 'repeat' to keep asking until a valid input is entered.
% Also checks if the game is already won or all positions are played.
make_move(Board, Position, NewBoard):-
repeat,
write('Player 1, enter a position: '),
read(Position),
move(Board, NewBoard, Position, Flag),
game_over(NewBoard, Flag),
print_board(NewBoard),
game_over(NewBoard, Winner),
(Winner =:= 1,
write('Player 1 wins!'), nl;
Winner =:= 0,
write('Draw!'), nl;
make_move(NewBoard, _, UpdatedBoard),
make_move(UpdatedBoard, _, _)).

% Main function that starts the game with an empty board.
start_game:-
print_board([1, 2, 3, 4, 5, 6, 7, 8, 9]),
make_move([0, 0, 0, 0, 0, 0, 0, 0, 0], _, UpdatedBoard),
(Winner =:= 1,
write('Player 1 wins!'), nl;
Winner =:= 0,
write('Draw!'), nl;
start_game).

% To start the game, enter the following query in the Prolog command line:
% ?- start_game.