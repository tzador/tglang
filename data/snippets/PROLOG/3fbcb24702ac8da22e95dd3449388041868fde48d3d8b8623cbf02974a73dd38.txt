% Define the 'collatz' predicate with two parameters
collatz(1, [1]). % Base case: if the input is 1, return a list with 1 as the only element

collatz(N, [N | Rest]) :- % Recursive case: if the input is not 1, add N to the list and continue
    N > 1, % Check that the input is a positive integer
    N mod 2 =:= 0, % Check if N is even by using the mod operator
    N1 is N // 2, % Divide N by 2 to get the next number in the sequence
    collatz(N1, Rest). % Recursively call collatz with the next number and append the result to Rest list

collatz(N, [N | Rest]) :-
    N > 1,
    N mod 2 =\= 0, % Check if N is odd by using the mod operator
    N1 is 3*N + 1, % Multiply N by 3 and add 1 to get the next number in the sequence
    collatz(N1, Rest). % Recursively call collatz with the next number and append the result to Rest list

% Example usage:
% ?- collatz(6, L).
% L = [6, 3, 10, 5, 16, 8, 4, 2, 1]

% ?- collatz(19, L).
% L = [19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]