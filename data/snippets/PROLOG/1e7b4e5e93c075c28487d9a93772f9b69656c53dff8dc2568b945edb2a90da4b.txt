%This is a Prolog code snippet demonstrating the use of arithmetic and conditional statements

%Define a predicate for calculating the factorial of a number
factorial(0,1). %Base case: factorial of 0 is 1
factorial(N,Result) :- %Recursive case
    N > 0, %Check if N is a positive integer
    Prev is N-1, %Assign prev as N-1
    factorial(Prev,PrevResult), %Recursive call for factorial(N-1)
    Result is N*PrevResult. %Calculate factorial of N using previous result and assign to Result

%Define a predicate for calculating the power of a number
power(_,0,1). %Base case: any number raised to 0 is 1
power(X,N,Result) :- %Recursive case
    N > 0, %Check if N is a positive integer
    Prev is N-1, %Assign prev as N-1
    power(X,Prev,PrevResult), %Recursive call to calculate X^(N-1)
    Result is X*PrevResult. %Calculate X^N using previous result and assign to Result

%Define a predicate for checking if a number is prime
is_prime(2). %2 is a prime number
is_prime(3). %3 is a prime number
is_prime(N) :- %General case
    N > 3, %Check if N is greater than 3
    N mod 2 =\= 0, %Check if N is not divisible by 2
    \+ has_factor(N,3). %Check if N has any factors other than 1 and itself

%Define a predicate for checking if a number has any factors
has_factor(N,X) :- %Base case: N is divisible by X
    N mod X =:= 0.
has_factor(N,X) :- %Recursive case
    X < N, %Check if X is less than N
    X1 is X+1, %Increment X by 1
    has_factor(N,X1). %Recursive call to check if X1 is a factor of N

%Define a predicate for calculating the sum of all prime numbers less than or equal to N
sum_of_primes(0,0). %Base case: sum of prime numbers upto 0 is 0
sum_of_primes(N,Result) :- %Recursive case
    N > 0, %Check if N is a positive integer
    Prev is N-1, %Assign prev as N-1
    is_prime(N), %Check if N is a prime number
    sum_of_primes(Prev,PrevResult), %Recursive call to calculate sum of primes less than N-1
    Result is N+PrevResult. %Add N to the sum of primes less than N-1 and assign to Result

%Define a predicate for calculating the product of all odd numbers less than or equal to N
product_of_odds(1,1). %Base case: product of odd numbers upto 1 is 1 
product_of_odds(N,Result) :- %Recursive case
    N > 1, %Check if N is greater than 1
    Prev is N-2, %Assign prev as N-2
    product_of_odds(Prev,PrevResult), %Recursive call to calculate product of odds less than N-2
    Result is N*PrevResult. %Multiply N with product of odds less than N-2 and assign to Result