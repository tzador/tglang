%% Implementing a graph data structure and performing graph algorithms in PROLOG

%% defining edge data structure
edge(Node1, Node2, Weight).

%% defining graph data structure
graph([]).
graph([H|T]) :- graph(T).

%% function to add an edge to the graph
add_edge(Node1, Node2, Weight, Graph, NewGraph) :-
    %% checking if there is a path from Node1 to Node2 already
    path(Node1, Node2, Graph),
    writeln('This edge already exists!'),
    fail.

add_edge(Node1, Node2, Weight, Graph, NewGraph) :-
    %% adding edge to graph
    graph(Graph),
    assert(edge(Node1,Node2,Weight)),
    assert(edge(Node2,Node1,Weight)),
    NewGraph = [edge(Node1, Node2, Weight)|Graph].

%% function to remove an edge from the graph
remove_edge(Node1, Node2, Graph, NewGraph) :-
    %% checking if there is an edge between Node1 and Node2
    edge(Node1, Node2, Graph),
    %% removing edge from the graph data structure
    retract(edge(Node1, Node2)),
    retract(edge(Node2, Node1)),
    NewGraph = [edge(Node1, Node2)|Graph].

%% function to find the shortest path between two nodes using Dijkstra's algorithm
shortest_path(Node1, Node2, Graph, Path) :-
    %% finding the shortest path using Dijkstra's algorithm
    dijkstra(Node1, Node2, Graph, [], Path).

%% function to find the shortest path using Dijkstra's algorithm
dijkstra(Node1, Node2, Graph, Visited, [edge(Node1, Node2, Weight)]) :-
    %% checking if there is a direct path between the two nodes
    edge(Node1, Node2, Graph, Weight).

dijkstra(Node1, Node2, Graph, Visited, [edge(Node1, Node3, Weight)|Tail]) :-
    %% checking if there is an unvisited edge from Node1 to Node3
    edge(Node1, Node3, Graph, Weight),
    \+member(edge(Node1, Node3, Weight), Visited),
    %% adding edge to visited list
    append(Visited, [edge(Node1, Node3, Weight)], NewVisited),
    %% finding shortest path from Node3 to Node2
    dijkstra(Node3, Node2, Graph, NewVisited, Tail).

dijkstra(Node1, Node2, Graph, Visited, [edge(Node1, Node3, Weight)|Tail]) :-
    %% checking if there is an unvisited edge from Node1 to Node3
    edge(Node1, Node3, Graph, Weight),
    \+member(edge(Node1, Node3, Weight), Visited),
    %% adding edge to visited list
    append(Visited, [edge(Node1, Node3, Weight)], NewVisited),
    %% finding shortest path from Node3 to Node2
    dijkstra(Node3, Node2, Graph, NewVisited, Tail).

%% function to find the total cost of a path
total_path_cost([], 0).

total_path_cost([edge(_, _, Weight)|Tail], Cost) :-
    %% recursively calculating the total cost of the path
    total_path_cost(Tail, Subcost),
    Cost is Subcost + Weight.