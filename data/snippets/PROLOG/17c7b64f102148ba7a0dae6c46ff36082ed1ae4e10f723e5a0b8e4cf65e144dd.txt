%Define the predicate factorial, with two parameters
factorial(0,1)
  %Base case, factorial of 0 is 1
factorial(N,Result)
  %Define recursive case
  %If N is greater than 0
  N>0
    %Calculate N-1
    %Store result in Temp
    Temp is N-1,
    %Call factorial recursively
    factorial(Temp,TempResult),
    %Multiply N with TempResult
    Result is N * TempResult.
  %If N is less than 0
  N<0
    %Calculate absolute value of N
    AbsN is abs(N),
    %Call factorial recursively with AbsN
    factorial(AbsN,TempResult),
    %Divide 1 by TempResult to get final result
    Result is 1 / TempResult.

%Define the predicate fibonacci, with two parameters
fibonacci(0,0)
  %Base case, fibonacci of 0 is 0
fibonacci(1,1)
  %Base case, fibonacci of 1 is 1
fibonacci(N,Result)
  %Define recursive case
  %If N is greater than 0
  N>0
    %Calculate N-1
    %Store result in Temp1
    Temp1 is N-1,
    %Calculate N-2
    %Store result in Temp2
    Temp2 is N-2,
    %Call fibonacci recursively for Temp1 and Temp2
    fibonacci(Temp1,TempResult1),
    fibonacci(Temp2,TempResult2),
    %Add TempResult1 and TempResult2 to get final result
    Result is TempResult1 + TempResult2.

%Define the predicate power, with three parameters
power(_,0,1)
  %Base case, any number raised to power 0 is 1
power(N,1,N)
  %Base case, any number raised to power 1 is itself
power(N,Power,Result)
  %Define recursive case
  %If Power is greater than 1
  Power>1
    %Calculate Power-1
    %Store result in Temp
    Temp is Power-1,
    %Call power recursively for N and Temp
    power(N,Temp,TempResult),
    %Multiply N with TempResult to get final result
    Result is N * TempResult.

%Define the predicate gcd, with two parameters
gcd(0,_,Result)
  %Base case, gcd of 0 and any number is that number
  Result is 0.
gcd(N,M,Result)
  %Define recursive case
  %If N is greater than M
  N>M
    %Calculate N-M
    %Call gcd recursively with N-M and M
    gcd(N-M,M,Result).
  %If M is greater than N
  M>N
    %Calculate M-N
    %Call gcd recursively with N and M-N
    gcd(N,M-N,Result).
  %If N is equal to M
  N=M
    %N (or M) is the gcd
    Result is N.