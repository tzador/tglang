/* The following code snippet demonstrates a Prolog program that uses a depth-first search algorithm to solve a maze. The code starts by defining the maze using facts and then defines the rules for moving through the maze. Finally, the depth-first search algorithm is applied to find the solution to the maze. */ 

/* Facts describing the maze */

maze_size(5, 5).        /* Size of the maze */
start(1, 1).            /* Starting position */
goal(5, 5).             /* Goal position */

/* Walls and open paths in the maze */
path(1, 1, [down, right]).
path(1, 2, [down, left, right]).
path(1, 3, [down, left, right]).
path(1, 4, [down, right]).
path(1, 5, [left, down]).
path(2, 1, [up, right, down]).
path(2, 2, [up, left, down]).
path(2, 4, [up, right, down]).
path(2, 5, [up, left, down]).
path(3, 1, [up, left, right]).
path(3, 2, [up, left, right]).
path(3, 3, [up, left, right]).
path(3, 4, [up, left, right]).
path(3, 5, [up, left]).
path(4, 1, [up, down, right]).
path(4, 2, [up, down, left, right]).
path(4, 3, [up, down, left, right]).
path(4, 4, [up, down, right]).
path(4, 5, [up, down, left]).
path(5, 1, [up, right]).
path(5, 2, [up, left]).
path(5, 3, [up, left, right]).
path(5, 4, [up, left, right]).
path(5, 5, [up, left, right]).

/* Rules for moving through the maze */

/* Move to the neighbor above */
move(CurrentX, CurrentY, up, NextX, NextY) :- NextX is CurrentX - 1, NextY is CurrentY.

/* Move to the neighbor below */
move(CurrentX, CurrentY, down, NextX, NextY) :- NextX is CurrentX + 1, NextY is CurrentY.

/* Move to the neighbor on the left */
move(CurrentX, CurrentY, left, NextX, NextY) :- NextX is CurrentX, NextY is CurrentY - 1.

/* Move to the neighbor on the right */
move(CurrentX, CurrentY, right, NextX, NextY) :- NextX is CurrentX, NextY is CurrentY + 1.

/* Checking if a path is open and if current position is within the maze */
can_move(X, Y, Direction) :- maze_size(SizeX, SizeY), X >= 1, X =< SizeX, Y>= 1, Y =< SizeY, path(X, Y, Directions), member(Direction, Directions).

/* Depth-first search algorithm to solve the maze, returning a list of moves */
solve_maze(X, Y, Path) :- depth_first_search(X, Y, [X, Y], Path).
depth_first_search(X, Y, Visited, [X, Y]) :- goal(X, Y).
depth_first_search(X, Y, Visited, [X, Y|Path]) :- can_move(X, Y, Direction), move(X, Y, Direction, NextX, NextY), not(member([NextX, NextY], Visited)), depth_first_search(NextX, NextY, [[NextX, NextY]|Visited], Path).