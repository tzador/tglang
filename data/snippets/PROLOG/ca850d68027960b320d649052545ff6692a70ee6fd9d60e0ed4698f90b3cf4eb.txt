/*
This is a Prolog program that solves the classic puzzle of the Missionaries and Cannibals game.
The goal is to transport all missionaries and cannibals from one side of a river to the other side using a boat.
However, the boat can only carry a maximum of two passengers at a time and there can never be more cannibals than missionaries on either side of the river.
*/

% Define the initial state of the puzzle - six people on the left side of the river and no one on the right side.

initial_state([[m,m,m,c,c,c],[]]).

% Define the goal state - six people on the right side of the river and no one on the left side.

goal_state([[],[m,m,m,c,c,c]]).

% Define the possible moves - either moving one person or two people from the left to the right side or vice versa.

move([X,X], 'Move one missionary from the left to the right side').
move([X,X], 'Move one cannibal from the left to the right side').
move([X,Y], 'Move one missionary and one cannibal from the left to the right side').
move([X,Y], 'Move two missionaries from the left to the right side').
move([Y,X], 'Move one missionary from the right to the left side').
move([Y,X], 'Move one cannibal from the right to the left side').
move([Y,X], 'Move one missionary and one cannibal from the right to the left side').
move([Y,X], 'Move two missionaries from the right to the left side').

% Define a rule to check if a state is valid - number of cannibals cannot be greater than number of missionaries on either side.

valid_state([X,Y]) :- sum(X), sum(Y), X >= Y.
sum([]).
sum([H|T]) :- T >= H.

% Define a rule to solve the puzzle using backtracking and recursion. Start from the initial state and keep making moves until the goal state is reached.

solve([[], [m,m,m,c,c,c]]) :- print('Solution found!').
solve([[m,m,m,c,c,c],[]]) :- print('Solution found!').
solve([[X,Y], Z]) :- move([X,Y], Action), valid_state([X,Y]), \+ member([X,Y],Z), solve(Z).

/* Sample query:
?- initial_state(Initial), solve(Initial).
Solution found!
*/