% This is a Prolog program that implements a Dijkstra's algorithm

% Defining the graph with weighted edges
graph(node(a, b, 3)). 
graph(node(a, c, 2)). 
graph(node(b, d, 5)). 
graph(node(c, d, 1)). 
graph(node(d, e, 4)). 
graph(node(c, f, 6)). 
graph(node(f, e, 2)).

% Finding the shortest path using Dijkstra's algorithm
dijkstra(Start, End, Path, Dist) :- 
    dijkstra_path(Start, End, [], Path, Dist).

dijkstra_path(End, End, Path, Path, 0). 
dijkstra_path(Start, End, Visited, Path, Dist) :- 
    \+ member(node(Start, _, _), Visited), 
    findall(node(Next, Cost), (graph(node(Start, Next, Cost)), \+ member(node(Next, _, _), Visited)), Neighbors), 
    dijkstra_check_neighbors(Start, Neighbors, Visited, Path, Dist).

dijkstra_check_neighbors(_, [], _, _, inf). 
dijkstra_check_neighbors(Start, Neighbors, Visited, [node(Start, Next)|Path], Dist) :- 
    sort(1, @=<, Neighbors, [node(Next,C)|Remaining]), 
    dijkstra_path(Next, End, [node(Start,Next)|Visited], Path, NextDist), 
    Dist is C + NextDist.

% Finding the shortest path with output
?- dijkstra(a, e, Path, Dist).
Path = [node(a,c),node(c,d),node(d,e)],
Dist = 3 ;
false.