% This is a comment in PROLOG

% Defining a predicate 'sum' that takes in two parameters 'X' and 'Y'
% and calculates the sum of the two parameters, returning the result as 'Z'

sum(X,Y,Z) :- 
    Z is X + Y. % 'is' is the PROLOG arithmetic operator for assignment
% End of predicate 'sum'

% Defining a predicate 'power' that takes in two parameters 'X' and 'Y'
% and raises 'X' to the power of 'Y', returning the result as 'Z'

power(X,Y,Z) :-
    Y > 0, % checks if 'Y' is greater than 0 (base case)
    Z is X**Y. % 'is' is the PROLOG arithmetic operator for assignment
% If 'Y' is not greater than 0, recursive call to 'power' is made
power(X,Y,Z) :-
    Y =< 0, % checks if 'Y' is less than or equal to 0 (base case)
    Z is 1. % if 'Y' is 0, result is 1 (anything raised to 0 is 1)
% End of predicate 'power'

% Defining a predicate 'factorial' that takes in a parameter 'N'
% and calculates the factorial of 'N', returning the result as 'Z'

factorial(N,Z) :-
    N > 0, % checks if 'N' is greater than 0 (base case)
    N1 is N - 1, % defining a new variable 'N1' that is 'N' minus 1
    factorial(N1,Z1), % recursive call to 'factorial' with 'N1' as parameter
    Z is Z1 * N. % 'Z1' is the factorial of 'N1', so 'Z' is 'N' factorial
% If 'N' is 0, result is 1
factorial(0,1).
% End of predicate 'factorial'

% Defining a predicate 'fibonacci' that takes in a parameter 'N'
% and calculates the Nth number in the Fibonacci sequence
% (1, 1, 2, 3, 5, 8, 13, ...), returning the result as 'Z'

fibonacci(N,Z) :-
    N > 2, % checks if 'N' is greater than 2 (base case)
    N1 is N - 1, % variable 'N1' is 'N' minus 1
    N2 is N - 2, % variable 'N2' is 'N' minus 2
    fibonacci(N1,Z1), % recursive call to 'fibonacci' with 'N1' as parameter
    fibonacci(N2,Z2), % recursive call to 'fibonacci' with 'N2' as parameter
    Z is Z1 + Z2. % 'Z1' and 'Z2' are the two previous numbers in the sequence
% If 'N' is 1 or 2, result is 1
fibonacci(1,1).
fibonacci(2,1).
% End of predicate 'fibonacci'

% Defining a predicate 'binary_search' that takes in three parameters
% 'List', 'Item', and 'Index' and performs a binary search on the list
% returning the index of the item in the list, or -1 if not found

binary_search(List,Item,Index) :-
    length(List,N), % finding the length of the list
    binary_search(List,Item,Index,1,N).
% recursive predicate with additional parameters 'Start' and 'End'
% 'Start' is the starting index of the sub-list being searched
% 'End' is the ending index of the sub-list being searched
binary_search(List,Item,Index,Start,End) :-
    Start =< End,
    Middle is (Start + End) // 2, % finding the middle index of the sub-list
    nth(Middle,List,MiddleElement), % finding the element at the middle index
    % If the middle element is the item being searched for, return the index
    MiddleElement = Item,
    Index is Middle.
% If the middle element is larger than the item, search the left half of the list
binary_search(List,Item,Index,Start,End) :-
    Middle is (Start + End) // 2,
    nth(Middle,List,MiddleElement),
    MiddleElement > Item,
    NewEnd is Middle - 1, % adjusting the end index of the sub-list
    binary_search(List,Item,Index,Start,NewEnd).
% If the middle element is smaller than the item, search the right half of the list
binary_search(List,Item,Index,Start,End) :-
    Middle is (Start + End) // 2,
    nth(Middle,List,MiddleElement),
    MiddleElement < Item,
    NewStart is Middle + 1, % adjusting the start index of the sub-list
    binary_search(List,Item,Index,NewStart,End).
% If the item is not found in the list, return -1
binary_search(_,_,-1,_,_).
% End of predicate 'binary_search'