%% defining a predicate to check if a list is a palindrome

palindrome(X) :- reverse(X, X).    % base case where the list is its own reverse
palindrome([_|[]]).                 % base case where the list has only one element
palindrome([H|T]) :-                % if the first and last elements are the same, 
    append(Middle, [H], T),         % remove both elements from the list and check if
    palindrome(Middle).             % the remaining list is a palindrome recursively

/*
Example query: palindrome([1,2,3,2,1]).

Explanation:
The first rule states that a list is a palindrome if its reverse is the same as itself.
The second rule states that a list with one element is a palindrome.
The third rule breaks down the list into the first and last elements, and checks if the middle 
portion is a palindrome by using the first rule recursively. This continues until the base cases
are reached, proving that the list is a palindrome.
*/