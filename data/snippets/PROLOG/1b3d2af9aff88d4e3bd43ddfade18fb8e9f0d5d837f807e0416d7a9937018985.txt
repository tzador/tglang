%This is a sample code snippet in PROLOG
%It defines a predicate for checking if a given number is prime

%Define the predicate for checking if a number is prime
is_prime(N) :-
    N > 1, %A number is prime if it is greater than 1
    check_prime(N, 2). %Call the helper predicate with an initial divisor of 2

%Helper predicate to check if a number is prime
%Takes in the number to check and the current divisor
%Base case: if the divisor is equal to the number, it is prime
check_prime(N, N) :-
    !. %Cut to stop backtracking

%Recursive case: check if the number is divisible by the current divisor
%If yes, it is not prime
check_prime(N, D) :-
    N mod D =:= 0, %Check if the remainder when divided is 0
    !, %Cut to stop backtracking
    fail. %Fail to backtrack and return false

%Recursive case: if number is not divisible by current divisor, increment it and check again
check_prime(N, D) :-
    D < N, %Check if current divisor is less than the number
    D1 is D + 1, %Increment the divisor by 1
    check_prime(N, D1). %Call the helper predicate again with the new divisor

%Example Usage:
?- is_prime(13). %Returns true, as 13 is prime
?- is_prime(8). %Returns false, as 8 is not prime