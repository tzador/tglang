%% Define a predicate that calculates the sum of a list of numbers
sum_list([], 0). % if the list is empty, the sum is 0
sum_list([H|T], Sum) :- % else, calculate the sum recursively
    sum_list(T, Rest), % recursively calculate the sum of the tail of the list
    Sum is H + Rest. % add the head of the list to the recursive sum

%% Define a predicate that checks if a number is prime
is_prime(2). % 2 is the only even prime number
is_prime(N) :- % else, check if N is divisible by any number between 2 and N-1
    N > 2, % ensure N is greater than 2
    N mod 2 =\= 0, % ensure N is not divisible by 2 (odd numbers only)
    \+ (between(3, N-1, X), N mod X =:= 0). % check if N is divisible by any number between 3 and N-1 (using negation)

%% Define a predicate for writing a list of numbers in a file
write_list(List, File) :-
    open(File, write, Stream), % open the file in write mode
    write(Stream, List), % write the list to the file
    close(Stream). % close the file stream

%% Define a predicate for sorting a list of numbers
sort_list([], []). % the sorted list of an empty list is an empty list
sort_list([H|T], Sorted) :-
    sort_list(T, Rest), % recursively sort the tail of the list
    insert(H, Rest, Sorted). % insert the head into the sorted tail and assign it to Sorted

insert(X, [], [X]). % if the list is empty, X is the only element
insert(X, [H|T], [X,H|T]) :- % if X is smaller than the head, insert it at the front
    X < H.
insert(X, [H|T], [H|Sorted]) :- % else, recursively insert X into the tail of the list
    insert(X, T, Sorted).