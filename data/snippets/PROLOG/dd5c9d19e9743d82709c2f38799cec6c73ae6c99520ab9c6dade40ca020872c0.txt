% This is a comment in PROLOG

/* 
This is a multiline comment 
in PROLOG
*/

% Defining rules
rule(greater_than(X,0)) :- X > 0.
rule(less_than(X,10)) :- X < 10.
rule(even(X)) :- X mod 2 =:= 0.
rule(odd(X)) :- not(even(X)).

% Rule for finding the sum of a list of numbers
summation([], 0).
summation([X|Tail], Sum) :- summation(Tail, Rest), Sum is X + Rest.

% Finding the factorial of a number using recursion
factorial(0,1).
factorial(N,Result) :- N > 0, N1 is N-1,
        factorial(N1,Result1),
        Result is N * Result1.

% Defining a predicate to check if two lists are equal
equal_lists([], []).
equal_lists([H1|T1], [H2|T2]) :- H1 = H2, equal_lists(T1, T2).

% Defining a parent-child relationship
parent_child(A,B) :- parent(A,B). % A is the parent of B
parent_child(A,B) :- parent(A,C), parent_child(C,B). % A is the ancestor of B

% Using built-in predicates to manipulate lists
member(X,[X|_]).
member(X, [_|Tail]) :- member(X,Tail). % checking if X is a member of the given list

append([],L,L).
append([H|T],L2,[H|L3]) :- append(T,L2,L3). % appending two lists

length([], 0).
length([_|T], N) :- length(T, N1), N is N1 + 1. % finding the length of a list

% Defining an arithmetic predicate to evaluate an expression
arith_expr(A + B, Result) :- Result is A + B.
arith_expr(A - B, Result) :- Result is A - B.
arith_expr(A * B, Result) :- Result is A * B.
arith_expr(A / B, Result) :- Result is A / B.