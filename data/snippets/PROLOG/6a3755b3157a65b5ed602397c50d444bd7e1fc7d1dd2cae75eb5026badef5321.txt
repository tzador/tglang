%% This is a predicate that takes in a list of integers and checks if it contains any duplicates. 
%% It returns true if there are duplicates and false if there are no duplicates.
%% Example Usage: 
%% ?- contains_duplicates([1,2,3]).
%% false
%% ?- contains_duplicates([1,1,2]).
%% true

contains_duplicates(List) :- 
	length(List, Length),  % Gets the length of the list
	numlist(1, Length, Indices),  % Generates a list of numbers from 1 to the length of the input list
	member(Index, Indices),  % Gets a member from the indices list
	get_element(Index, List, Element),  % Gets the element from the list at the index given by Index
	member(Element, List).  % Checks if the element is also a member of the original list

get_element(1, [Head|_], Head).  % Base case, the first element is the head of the given list
get_element(Index, [_|Tail], Element) :-
	NewIndex is Index - 1,  % Calculates the new index needed for the recursive call
	get_element(NewIndex, Tail, Element).  % Recursively calls get_element again

%% This predicate takes in two lists and merges them into one list, while removing any duplicates.
%% Example Usage:
%% ?- merge_lists([1,2,3], [3,4,5], Merged).
%% Merged = [1,2,3,4,5]

merge_lists([], List, List).  % Base case, when the first list is empty, return the second list
merge_lists([Head|Tail], List, Merged) :-
	member(Head, List),  % Checks if the head of the first list is already a member of the second list
	!,
	merge_lists(Tail, List, Merged).  % If it is, continue merging without adding the head
merge_lists([Head|Tail], List, [Head|Merged]) :-
	merge_lists(Tail, List, Merged).  % Otherwise, add the head and continue merging

%% This predicate takes in a list of lists and flattens it into one single list.
%% Example Usage:
%% ?- flatten([[1,2,3], [4,5,6], [7,8,9]], Flattened).
%% Flattened = [1,2,3,4,5,6,7,8,9]

flatten([], []).  % Base case, when the input list is empty, return an empty list
flatten([Head|Tail], Flattened) :-
	is_list(Head),  % Checks if the head of the list is a list itself
	!,
	flatten(Head, FlattenedHead),  % If it is, flatten it and call recursively
	flatten(Tail, FlattenedTail),  % After flattening the head, continue flattening the remaining tail
	append(FlattenedHead, FlattenedTail, Flattened).  % Concatenates the flattened head and tail
flatten([Head|Tail], [Head|Flattened]) :-
	flatten(Tail, Flattened).  % If the head is not a list, add it to the flattened list and continue flattening the tail