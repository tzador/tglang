% Define a rule for finding the factorial of a number
factorial(0,1).
factorial(N,Ans) :-
    N > 0,
    M is N - 1,
    factorial(M,SubAns), % Calls itself recursively
    Ans is N * SubAns. % Multiplies the previous factorial by N to get the current factorial

% Define a rule for finding the nth number in the Fibonacci sequence
fib(0, 0).
fib(1, 1).
fib(N, Ans) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    fib(N1, F1), % Calls itself recursively to get F1 and F2
    fib(N2, F2),
    Ans is F1 + F2. % Adds F1 and F2 to get the nth Fibonacci number
    
% Define a predicate that checks if a list is a palindrome
palindrome(X) :-
    reverse(X,X). % Uses the reverse built-in predicate to check if the list is the same when reversed

% Define a rule for selecting an element from a list at a given position
select(X, [X|_], 1). % Base case, X is at first position in list
select(X, [_|T], N) :-
    N > 1,
    N1 is N - 1,
    select(X, T, N1). % Recursively calls itself on the tail of the list with N-1 to find the element at Nth position