%% This is a program that checks for the existence of a path between two nodes in a directed graph.

%% Define a predicate to check if a path exists between two nodes.
path_exists(Node1, Node2, Graph):-
    %% Traverse the graph starting from Node1.
    traverse(Node1, Node2, Graph, []).

%% Define a predicate to traverse a directed graph.
traverse(Node1, Node2, Graph, Visited):-
    %% Check if there is an edge between the two nodes.
    edge(Node1, Node2, Graph),
    %% If yes, then the path exists.
    writeln('Path exists between Node1 and Node2').
%% If not, recursively traverse through all adjacent nodes.
traverse(Node1, Node2, Graph, Visited):-
    edge(Node1, X, Graph),
    %% Check if the adjacent node has not been visited before.
    not(member(X, Visited)),
    %% Add the adjacent node to the visited list.
    append(Visited, [X], NewVisited),
    %% Recursively traverse through the adjacent node.
    traverse(X, Node2, Graph, NewVisited).

%% Define a predicate to check if there is an edge between two nodes.
edge(Node1, Node2, Graph):-
    %% Traverse through the directed graph.
    member(edge(Node1, Node2), Graph).

%% Define a test graph.
graph([edge(a,b), edge(b,c), edge(c,d), edge(d,e)]).

%% Query the program by calling the path_exists predicate.
?- path_exists(a, e, graph).
%% Output:
%% Path exists between a and e