% Define a predicate that checks if one list is the reverse of another list
reverse_list([], []). % Base case: reverse of an empty list is an empty list
reverse_list([Head|Tail], Reversed) :- reverse_list(Tail, Rest), append(Rest, [Head], Reversed). % Recursive case: append the head to the reversed tail to create the reversed list

% Define a predicate that checks if a list is a palindrome, using reverse_list predicate
palindrome(List) :- reverse_list(List, List). % A list is a palindrome if it is the same when reversed