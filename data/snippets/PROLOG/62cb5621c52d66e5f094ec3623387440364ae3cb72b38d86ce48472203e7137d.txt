%The following code implements an AI that plays the classic game Connect Four.

%Defines the AI's strategy
choose_move([X|Board], Player, Move) :-
    %Checks if the current move leads to a win
    winning_move([X|Board], Player, Move);
    %Checks if the other player can win on their next move and blocks it
    check_block_move([X|Board], Player, Opponent, Move);
    %If none of the above, selects the best possible move
    other_move([X|Board], Player, Move).

%Checks if the current move leads to a win for the given player
winning_move(Board, Player, Move) :-
    %Finds all possible moves and checks if any lead to a win
    findall(Move, make_move(Move, Board, Player), ValidMoves),
    check_winning_move(ValidMoves, Board, Player, Move).

%Checks if the other player has a winning move on their next turn and blocks it
check_block_move(Board, Player, Opponent, [Column, Row]) :-
    %Gets the opponent's symbol
    get_opponent_symbol(Player, Opponent),
    %Finds all possible moves for the opponent and checks if any leads to a win
    findall(Move, make_move(Move, Board, Opponent), ValidMoves),
    %If there is a winning move, blocks it
    check_winning_move(ValidMoves, Board, Opponent, [Column, Row]).

%Selects a random move from the list of possible moves
other_move(Board, _, Move) :-
    %Gets the list of all possible moves
    findall(Move, make_move(Move, Board, _), ValidMoves),
    %Selects a random move from the list
    random_member(Move, ValidMoves).

%Checks if the given move leads to a win for the player
check_winning_move([], _, _, _) :-
    %Returns false if there are no winning moves
    false.
check_winning_move([Move|_], Board, Player, Move) :-
    %Checks if the current move leads to a win
    make_move(Move, Board, Player).

%Rules for making a move on the board

%Base case, if the column is full, the move is invalid
make_move(_, [Column|_], _) :-
    length(Column, 6).
%Recursive case, adds the move to the column if it is not full
make_move([Column, Row], [[Column|ColumnTail]|Tail], Player) :-
    make_move(Row, [ColumnTail|Tail], Player).

%Helper predicate to get the opponent's symbol
get_opponent_symbol('X', 'O').
get_opponent_symbol('O', 'X').

%Example query to find the AI's chosen move for a given board and player
?- choose_move([[X|_],[[X,X,X,X,X,X]], 'X', Move).