/* Defining a predicate that checks if a list is a palindrome */
palindrome(L) :- reverse_list(L, RL), L = RL.

/* Defining a predicate to reverse a list */
reverse_list([], []).
reverse_list([H|T], RL) :- reverse_list(T, RT), append(RT, [H], RL).

/* Defining a predicate to check if a number is prime */
prime(N) :- N > 1, N2 is N - 1, not_divisible(N2, N).

/* Defining a predicate to check if a number is divisible by another number */
divisible(X, Y) :- X mod Y =:= 0.

/* Defining a predicate to check if a number is not divisible by any number */
not_divisible(_, 1).
not_divisible(N, D) :- D > 1, not(divisible(N, D)), D2 is D - 1, not_divisible(N, D2).

/* Defining a predicate to find the factorial of a number */
factorial(0, 1).
factorial(N, Result) :- N > 0, N2 is N - 1, factorial(N2, Result2), Result is N * Result2.