% This is a Prolog code snippet
% It implements the classic Towers of Hanoi puzzle

% Define the predicate hanoi
hanoi(N, Start, End, Middle, Moves):-
    N > 0,      % check that N is a positive integer
    M is N - 1,
    hanoi(M, Start, Middle, End, FirstMoves), % solve the subproblem for N-1 disks
    hanoi(M, Middle, End, Start, SecondMoves), % solve the subproblem for N-1 disks
    append(FirstMoves, [move(Start, End)], TempMoves), % concatenate the moves of the subproblems to get the final solution
    append(TempMoves, SecondMoves, Moves). % append the second set of moves to complete the solution

hanoi(1, Start, End, _, [move(Start, End)]). % base case for N=1 disk, just move the disk directly from Start to End

% Helper predicate to print the moves
print_moves([]). % base case for empty list
print_moves([move(Start, End)|T]):-
    format('~w --> ~w~n', [Start, End]), % print the move from Start to End
    print_moves(T). % recursively print the rest of the moves

% Example query: hanoi(3, 'A', 'C', 'B', Moves).
% Output:
% Move disk from A to C
% Move disk from A to B
% Move disk from C to B
% Move disk from A to C
% Move disk from B to A
% Move disk from B to C
% Move disk from A to C
% Moves = [move('A', 'C'), move('A', 'B'), move('C', 'B'), move('A', 'C'), move('B', 'A'), move('B', 'C'), move('A', 'C')];