% This is a program that generates a list of all possible paths in a directed graph, given a starting node and an ending node

% facts
% path/3 defines a directed edge between two nodes and its weight
% graph/1 defines the directed graph
path(a,b,5).
path(a,c,3).
path(b,d,8).
path(b,e,2).
path(c,d,1).
path(c,f,6).
path(d,f,4).
path(e,g,2).
path(f,g,6).
graph([a,b,c,d,e,f,g]).

% rules
path(X,Y,Length) :- path(X,Z,Length1),path(Z,Y,Length2), Length is Length1 + Length2. % this rule finds a path between two nodes by combining two existing paths
path(X,Y,Length) :- path(Y,X,Length). % this rule allows for bidirectional paths
path(X,Y,Length) :- graph(G), member(X,G), member(Y,G), \+ path(X,Y,_), \+ path(Y,X,_), Length is 999. % this rule finds a path between two nodes not directly connected
all_paths(Start,End,Path,Cost,NewPath,NewCost) :- path(Start,NewPath,Cost1), not(member(NewPath,Path)), NewCost is Cost + Cost1, all_paths(NewPath,End,[NewPath|Path],NewCost,_,_). % this rule finds all possible paths between two nodes
path_from_to(Start,End,Path,Cost) :- all_paths(Start,End,[Start],0,Path,Cost). 

/* 
An example query:
?- path_from_to(a,g,Path,Cost).
Path = [a, c, d, f, g],
Cost = 14 ;
Path = [a, c, f, g],
Cost = 9 ;
Path = [a, b, e, g],
Cost = 9 ;
Path = [a, c, f, g],
Cost = 13. */
/* 
Expected output: