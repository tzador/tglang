% This program checks for the validity of a given Sudoku board

:- use_module(library(clpfd)). % Use Constraint Logic Programming over Finite Domains module

valid_board(Board) :- % Predicate to check validity of a given Sudoku board
    Board = [ % Board consists of a list of rows
        % First row
        [A1, A2, A3, A4, A5, A6, A7, A8, A9], % A list of numbers representing the cells in the row
        % Second row
        [B1, B2, B3, B4, B5, B6, B7, B8, B9],
        % Third row
        [C1, C2, C3, C4, C5, C6, C7, C8, C9],
        % Fourth row
        [D1, D2, D3, D4, D5, D6, D7, D8, D9],
        % Fifth row
        [E1, E2, E3, E4, E5, E6, E7, E8, E9],
        % Sixth row
        [F1, F2, F3, F4, F5, F6, F7, F8, F9],
        % Seventh row
        [G1, G2, G3, G4, G5, G6, G7, G8, G9],
        % Eighth row
        [H1, H2, H3, H4, H5, H6, H7, H8, H9],
        % Ninth row
        [I1, I2, I3, I4, I5, I6, I7, I8, I9]
    ],

    % Each row should have unique numbers from 1 to 9
    % Use all_distinct predicate to check uniqueness
    % _ represents any value, N represents a number
    % all_distinct/1 expects a list of numbers or variables, so we use a nested list comprehension to generate this list
    % For each row, check that all numbers from 1 to 9 are present and unique
    % Once the check is complete, Board will be fully instantiated, so we use the label predicate to label all the remaining variables
    % label/1 expects a list of variables, so we use a nested list comprehension to generate this list
    % Once labeling is done, if all constraints hold true, Board will be a valid Sudoku board
    [all_distinct(Row) : N in 1..9, [N | _] in Row], % Check unique numbers for each row
    [all_distinct(Column) : N in 1..9, [N | _] in Column], % Check unique numbers for each column
    [all_distinct(Square) : N in 1..9, [N | _] in Square], % Check unique numbers for each square
    transpose(Board, Columns), % Transpose the board to get the columns
    maplist(sudoku_square, Board, Squares), % Use sudoku_square predicate to get the squares
    maplist(label, Board), % Label the remaining variables in the board
    maplist(label, Columns), % Label the remaining variables in the columns
    maplist(label, Squares). % Label the remaining variables in the squares

% Predicate to get the 3x3 sudoku sub-square
% _ represents any value, N represents a number
sudoku_square([A, B, C, D, E, F, G, H, I], [S1, S2, S3, S4, S5, S6, S7, S8, S9]) :-
    [S1, S2, S3] = [A, B, C],
    [S4, S5, S6] = [D, E, F],
    [S7, S8, S9] = [G, H, I].