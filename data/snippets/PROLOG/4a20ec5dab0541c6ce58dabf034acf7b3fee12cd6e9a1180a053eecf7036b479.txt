% A predicate to find the length of a list
% Takes a list and a variable as input
length([],0). % The base case for an empty list
length([_|Tail],Length) :- length(Tail,NewLength), Length is NewLength + 1. % Recursively call length on the tail, and add 1 to the result

% A predicate to reverse a list
% Takes a list and a variable as input
reverseList([],[]). % The base case for an empty list
reverseList([Head|Tail],ReversedList) :- reverseList(Tail,NewReversedList), append(NewReversedList,[Head],ReversedList). % Recursively call reverseList on the tail, and append the Head to the result

% A predicate to check if a list is a palindrome
% Takes a list as input
isPalindrome(List) :- reverseList(List,ReversedList), List = ReversedList. % Check if the list is equal to its reversed version