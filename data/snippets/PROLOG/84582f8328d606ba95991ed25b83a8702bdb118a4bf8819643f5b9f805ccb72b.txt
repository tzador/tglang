% This is a program that implements the Tower of Hanoi puzzle with an arbitrary number of disks.

% Define a predicate to hold the state of the puzzle, with three lists representing the left, middle, and right rods.
hanoi(Disks, State) :-
    State = [Left, Middle, Right],
    length(Disks, NumDisks),
    length(State, NumRods),
    NumDisks >= 0, NumRods >= 3,
    length(Left, NumDisks),
    length(Middle, 0),
    length(Right, 0),
    fill_left(Disks, Left).

% Define a predicate to fill the left rod with the specified number of disks, starting with the largest and ending with the smallest.
fill_left([], []).
fill_left([Disk|RestDisks], [Disk|RestRods]) :-
    fill_left(RestDisks, RestRods).

% Define a predicate to move a disk from one rod to another, given the current state and the rods to move from and to.
move(State, From, To) :-
    select(Disk, From, FromRest),
    select(Disk, To, ToRest),
    \+ member(Disk, To),
    update_state(State, From, To, Disk, UpdatedState).

% Define a predicate to update the state after a move has been made.
update_state(State, From, To, Disk, UpdatedState) :-
    select(Disk, From, NewFrom),
    select(Disk, To, NewTo),
    append(NewFrom, [Disk], NewFromUpdated),
    append(NewTo, NewFromUpdated, NewToUpdated),
    replace(State, From, NewFromUpdated, TempState1),
    replace(TempState1, To, NewToUpdated, UpdatedState).

% Define a predicate to replace an element in a list with a new list.
replace([_|Tail], List, New, [New|Tail]) :-
    select(List, Tail, _).

% Define a predicate to solve the Tower of Hanoi puzzle using the specified number of disks, with the given moves being a list of moves taken to reach the solution.
solve_tower_hanoi(Disks, Moves) :-
    hanoi(Disks, State),
    solve_helper(Disks, State, Moves).

% Define a helper predicate to make the actual moves to solve the puzzle.
solve_helper(0, _, []).
solve_helper(Disks, State, [Move|RestMoves]) :-
    move(State, From, To),
    solve_helper(Disks - 1, To, RestMoves),
    append([Move], RestMoves, UpdatedMoves).