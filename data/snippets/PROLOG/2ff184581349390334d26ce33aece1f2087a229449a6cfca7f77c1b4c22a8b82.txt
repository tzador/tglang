/* Define a predicate that checks if a list is a subset of another list */

subset([],_). % base case, empty list is always subset of any list

subset([X|Rest], List) :- % rules for determining subset
    member(X,List), % checks if first element of subset exists in the main list
    subset(Rest,List). % recursively checks for the rest of the element if they exist in the main list

/* Define a predicate that checks if two lists are equal */

equal([],[]). % base case, empty lists are equal

equal([X|Rest1], [X|Rest2]) :- % rules for determining equality
    equal(Rest1,Rest2). % recursively checks if the rest of the elements are equal

/* Define a predicate that finds the intersection of two lists */

intersection([], _, []). % if first list is empty, intersection is empty

intersection([X|Rest], List, [X|Result]) :- % rules for finding intersection
    member(X,List), % checks if element exists in both lists
    intersection(Rest, List, Result). % recursively checks the rest of the elements for intersection

intersection([_|Rest], List, Result) :- % if element doesn't exist, check the rest of the elements
    intersection(Rest, List, Result). % recursively checks the rest of the elements for intersection