/*
This is a Prolog program that checks whether a given number is prime or not.
*/

% Define a predicate to check if the given number is prime.
is_prime(Number) :-
    % Set the range to divide the number (excluding 1).
    Range is Number - 1,
    % Call the helper predicate with the starting value of 2.
    check_prime(Number, Range, 2).

% Base case: if the starting value reaches the end of the range
% and the number is not divisible by any other number, it is prime.
check_prime(Number, Range, Number) :-
    Number > Range.
% Recursive case: if the starting value is less than the end of the range,
% check if it divides the number without any remainder.
check_prime(Number, Range, StartingValue) :-
    StartingValue =< Range,
    % If there is no remainder, the number is not prime.
    Number mod StartingValue =:= 0,
    % Stop recursion by failing.
    !,
    % If the number is divisible, print it is not prime and fail.
    write(Number), write(' is not prime'), nl, fail.

% If there is remainder, recursively call the helper predicate
% with the next number.
check_prime(Number, Range, StartingValue) :-
    StartingValue =< Range,
    % Increase starting value by 1.
    NextStartingValue is StartingValue + 1,
    check_prime(Number, Range, NextStartingValue).

% Example call:
% ?- is_prime(17).
% Output: true

% Example call:
% ?- is_prime(24).
% Output: 24 is not prime
% false