% Defining a predicate to check if a given number is prime

prime(N) :-  % defining the predicate prime with a parameter N
    N > 1,   % checking if N is greater than 1 (1 is not a prime number)
    M is N - 1, % assigning M to be N-1
    prime_util(N, M). % calling the helper predicate with N and M as parameters

% Defining the helper predicate prime_util
prime_util(2, 2). % 2 is a prime number
prime_util(N, M) :- % defining the recursive case
    M > 2, % M should be greater than 2 to continue recursion
    N mod M =\= 0, % N is not divisible by M (not a factor)
    M1 is M-1, % assigning M1 to be M-1
    prime_util(N, M1). % calling the helper predicate recursively

% Defining a predicate to find all prime numbers within a given range

prime_list(Start, End, List) :-
    findall(Num, (between(Start, End, Num), prime(Num)), List). % using the built-in predicate "findall" to generate a list of all numbers between Start and End (inclusive) that satisfy the "prime" predicate