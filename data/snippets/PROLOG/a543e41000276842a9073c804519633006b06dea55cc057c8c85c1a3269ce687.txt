%% Define a predicate to check if an element is a member of a list:
member(X, [X|_]). % if X is the head of the list, then X is a member
member(X, [_|T]) :- member(X, T). % otherwise, recursively check if X is a member of the tail

%% Define a predicate to find the length of a list:
length([], 0). % an empty list has a length of 0
length([_|T], N) :- length(T, N1), N is N1 + 1. % recursively calculate the length of the tail and add 1 to it

%% Define a predicate to concatenate two lists:
concatenate([], L, L). % the result of concatenating an empty list with any list is the same list
concatenate([H|T], L, [H|Result]) :- concatenate(T, L, Result). % recursively concatenate the head of the first list and the second list, and add it to the result list 

%% Define a predicate to reverse a list:
reverse_list([], []). % the reverse of an empty list is an empty list
reverse_list([H|T], RevList) :- reverse_list(T, RevTail), concatenate(RevTail, [H], RevList). % recursively reverse the tail and concatenate it with the head to get the reversed list

%% Define a predicate to find the factorial of a number:
factorial(0, 1). % the factorial of 0 is 1
factorial(N, Result) :- N > 0, N1 is N-1, factorial(N1, SubResult), Result is N * SubResult. % recursively calculate the factorial by multiplying N with the factorial of N-1

%% Define a predicate to check if a list is sorted in ascending order:
sorted([]). % an empty list is always sorted
sorted([_]). % a list with one element is always sorted
sorted([X,Y|T]) :- X =< Y, sorted([Y|T]). % recursively check if the first two elements are in order and then continue checking the remaining elements