% Finding path between two cities
% Using breadth-first search algorithm
% Adapted from 'Artificial Intelligence: A Modern Approach' by Stuart Russell and Peter Norvig

% City Database
city(new_york).
city(los_angeles).
city(chicago).
city(atlanta).
city(dallas).
city(houston).
city(miami).
city(phoenix).
city(seattle).
city(detroit).

% Distance between cities
distance(new_york, los_angeles, 2789).
distance(new_york, chicago, 1131).
distance(new_york, atlanta, 888).
distance(los_angeles, dallas, 1420).
distance(los_angeles, phoenix, 371).
distance(chicago, dallas, 805).
distance(atlanta, miami, 660).
distance(dallas, houston, 239).
distance(phoenix, seattle, 1357).

%%% Breadth-first search algorithm %%%
%%% Takes two cities and returns path between them %%%
% Parameters:
% Start city, goal city, path
% the list of explored cities and paths
bfs(Start, Goal, Path):- 
    % calls the actual bfs predicate
    bfs(Start, Goal, [Start], Path).

% the first two parameters are to find path 
% between Start and Goal
% the third parameter lists the cities that have been explored
% and the fourth parameter lists the paths explored to find the goal
bfs(Start, Goal, Explored, [Start | Path]) :- 
    % find a path from Start to a city
    % and call it NewCity
    % which is not already explored
    distance(Start, NewCity, _),
    \+ member(NewCity, Explored),
    % call bfs with NewCity as the new start city
    bfs(NewCity, Goal, [NewCity | Explored], Path).

% the goal city is reached
% the path is empty as we are at goal
bfs(Goal, Goal, _, []).