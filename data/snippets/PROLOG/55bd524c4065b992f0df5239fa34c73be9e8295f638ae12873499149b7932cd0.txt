%% Define a predicate that checks if a list is palindrome
is_palindrome(List) :- 
    reverse(List, List).
    
%% Define a predicate that checks if the first element of a list is equal to the last element
first_equals_last([H|T]) :- 
    H =:= T.

%% Define a predicate that removes the first and last elements of a list
remove_first_last([_|T], R) :- 
    reverse(T, [_|R1]), 
    reverse(R1, R2), 
    reverse(R2, R).
    
%% Define a predicate that checks if a list is a palindrome by removing the first and last elements
is_palindrome_optimized(List) :- 
    remove_first_last(List, R), 
    is_palindrome(R),
    first_equals_last(List).