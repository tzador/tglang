% Define a relation called 'ancestor' that takes in two arguments, a parent and a descendant
% and is true if the first argument is an ancestor of the second argument.

% Base case: Parent is directly related to descendant
ancestor(Parent, Descendant) :- parent(Parent, Descendant).

% Recursive case: Parent is an ancestor of Descendant if there exists a middle generation
% between them, where the parent is the ancestor of that middle generation and that middle 
% generation is the ancestor of the descendant.
ancestor(Parent, Descendant) :- 
  parent(Parent, MiddleGen), 
  ancestor(MiddleGen, Descendant).

% Define facts for the parent and family relations
parent('Sarah', 'John').
parent('John', 'Emily').
parent('Emily', 'Jacob').

% Define a predicate 'family_relation' that takes in two arguments and checks if they are 
% any type of family relation (parent, grandparent, etc.)

family_relation(Person1, Person2) :- parent(Person1, Person2).
family_relation(Person1, Person2) :- parent(Person2, Person1).
family_relation(Person1, Person2) :- ancestor(Person1, Person2).
family_relation(Person1, Person2) :- ancestor(Person2, Person1).

% Example query to check if two people are related in any way
% family_relation('Sarah', 'Jacob').