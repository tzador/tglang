/* Define a rule for determining if a given number N is a prime number */
is_prime(N) :- N > 1, \+ divsible(N, 2).

/* Define a rule for determining if a number N is divisible by another number X */
divisible(N, X) :- N mod X =:= 0.

/* Define a rule to recursively check if a given number N is prime by checking if it is divisible by any number from 2 to N-1 */
is_prime_wrapper(2).
is_prime_wrapper(N) :- N > 2, N1 is N-1, \+divisible(N, N1), is_prime_wrapper(N1).

/* Define a predicate that returns a list of all prime numbers between a given range of numbers */
list_primes(Start, End, Primes) :- findall(Num, (between(Start, End, Num), is_prime(Num)), Primes).

/* Define a predicate that checks if a given list of numbers are all prime numbers */
all_primes([]).
all_primes([H|T]) :- is_prime(H), all_primes(T).

/* Annoted markdown code snippet

In PROLOG, we can define predicates, which are rules for determining a specified goal. Here, we define a rule to check if a given number N is a prime number by first checking if it is greater than 1, then recursively checking if it is not divisible by any number from 2 to N-1.

We also define a rule to check if a number N is divisible by another number X, by finding the remainder of N/X and checking if it is equal to 0.

Next, we define a wrapper predicate to recursively check if a given number N is prime by first setting the base case for N = 2, and then checking if N is greater than 2 and not divisible by any number from 2 to N-1.

Finally, we define a predicate that takes in a start and end number and returns a list of all the prime numbers between that range using the findall function. We also define a predicate that checks if a given list of numbers are all prime numbers by recursively checking each element in the list using the is_prime predicate.

/* Usage: 
?- is_prime(7).
Yes

?- is_prime(8).
No

?- is_prime_wrapper(13).
Yes

?- list_primes(2, 10, Primes).
Primes = [2, 3, 5, 7]

?- all_primes([2, 3, 5, 7]).
Yes

?- all_primes([4, 6, 8]).
No */