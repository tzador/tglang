% Definition of a binary tree data structure
% tree(+Left, +Value, +Right)
% Represented as tree(LeftSubtree, Value, RightSubtree)

% Define a predicate to check if a given tree is a binary search tree
binary_search_tree(Tree) :-
   check_bst(Tree, min, max). % call helper predicate with initial values

% Helper predicate to check if a given tree is a binary search tree and satisfies BST property
% check_bst(+Tree, +Min, +Max)
check_bst(end, _, _) :- !. % Base case - empty tree is a valid BST
check_bst(tree(Left, Key, Right), Min, Max) :-
   check_bst(Left, Min, Key), % check if left subtree is a BST with values less than current node
   check_bst(Right, Key, Max), % check if right subtree is a BST with values greater than current node
   Key > Min, % check if current node's value is greater than the minimum value allowed in this subtree
   Key < Max. % check if current node's value is lesser than the maximum value allowed in this subtree