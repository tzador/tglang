/* This code snippet is a program in PROLOG that finds the shortest path in a weighted directed graph */
/* First, we define the predicate shortestPath that takes in three arguments: Start, End, and Path */
shortestPath(Start, End, Path) :-
    /* Path is the list of vertices that represent the shortest path from Start to End */
    /* we initialize Path with the Start vertex */
    Path = [Start],
    /* we call the helper predicate shortestPathHelper to find the shortest path */
    shortestPathHelper([Start], End, Path).

/* the shortest path between a vertex and itself is just the vertex */
shortestPathHelper([H | T], H, Path) :-
    /* we reverse the list to get the path in the correct order */
    reverse([H | Path], Path).
/* otherwise, we need to recursively find the shortest path */
shortestPathHelper([H | T], End, Path) :-
    /* we declare a new variable Next that represents the next vertex in the path */
    /* Next is an unvisited vertex that is connected to the current vertex */
    /* and the weight of the edge between them is the minimum weight among all unvisited paths */
    connected(H, Next, W),
    \+member(Next, [H | T]),
    /* we add Next to the new path */
    shortestPathHelper([Next, H | T], End, Path).

/* define the predicate connected that takes in three arguments: Source, Destination, and Weight */
/* Source and Destination are both vertices in the graph, and Weight is the weight of the edge between them */
connected(A, B, Weight) :-
    /* using the edge predicate, we check if there is an edge between A and B in the graph */
    /* if the edge exists, its weight is assigned to the variable Weight */
    edge(A, B, Weight).
/* if there is no direct edge between A and B, we check for a reverse edge */
connected(A, B, Weight) :-
    /* if the reverse edge exists, its weight is assigned to the variable Weight */
    edge(B, A, Weight).
/* if there is no edge between A and B or B and A, the predicate fails and the next unvisited vertex is checked */

/* define the predicate edge that takes in three arguments: Source, Destination and Weight */
/* Source and Destination are both vertices in the graph, and Weight is the weight of the edge between them */
/* in this code snippet, we are using a predefined list of edges, but in a real program, this list would be dynamically generated */
edge(a, b, 5).
edge(a, c, 3).
edge(b, d, 7).
edge(c, d, 6).
edge(c, e, 4).
edge(d, e, 2).

/* example query: shortestPath(a, e, Path). */