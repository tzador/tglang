% This is a program that generates a binary tree using Prolog

% Define the structure of the tree
tree(nil).
tree(node(_, Left, Right)) :- tree(Left), tree(Right).

% Generate a binary tree with n number of nodes
gen_tree(0, nil) :- !.
gen_tree(N, node(X, Left, Right)) :-
    N1 is N - 1,
    between(0, N1, N2),
    % Generate a random number for the node value
    random(1, 100, X),
    gen_tree(N2, Left),
    N3 is N1 - N2,
    gen_tree(N3, Right).

% Define a predicate to traverse the tree in preorder
preorder(nil, []) :- !.
preorder(node(X, Left, Right), [X|L]) :-
    preorder(Left, L1),
    preorder(Right, L2),
    append(L1, L2, L).

% Define a predicate to traverse the tree in inorder
inorder(nil, []) :- !.
inorder(node(X, Left, Right), L) :-
    inorder(Left, L1),
    inorder(Right, L2),
    append(L1, [X|L2], L).

% Define a predicate to traverse the tree in postorder
postorder(nil, []) :- !.
postorder(node(X, Left, Right), L) :-
    postorder(Left, L1),
    postorder(Right, L2),
    append(L1, L2, L3),
    append(L3, [X], L).