% Defining a predicate to find all possible paths between two nodes in a graph
all_paths(Node1, Node2, Graph, Path) :-
  % Checking if the nodes are connected
  member([Node1, Node2], Graph) ; member([Node2, Node1], Graph),
  % Adding the current node to the path
  append(Path, [Node1], Path1),
  % Recursively find paths to all connected nodes
  (member([Node1, NextNode], Graph) ; member([NextNode, Node1], Graph)),
  % Removing previously visited nodes to avoid loops
  \+member(NextNode, Path1),
  all_paths(NextNode, Node2, Graph, Path1).

% Defining a predicate to find the shortest path between two nodes in a graph
shortest_path(Node1, Node2, Graph, ShortestPath) :-
  % Finding all possible paths between the nodes
  findall(Path, all_paths(Node1, Node2, Graph, Path), Paths),
  % Getting the length of each path
  maplist(length, Paths, Lengths),
  % Sorting the paths based on their length
  sort(Lengths, Sorted),
  % Getting the shortest path
  nth0(0, Sorted, ShortestLength),
  nth0(Index, Lengths, ShortestLength),
  nth0(Index, Paths, ShortestPath).