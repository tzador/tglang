% This code snippet solves the N-Queens problem, finding all possible ways to arrange N queens on
% an N x N chessboard without any of them being able to attack each other.

% Generate a list of integers from 1 to N
% N - input value
range(1, N+1, N).

% Check if two queens are attacking each other
% Queen1 - first queen's position in form [Column, Row]
% Queen2 - second queen's position in same form as above
can_attack(Queen1, Queen2) :-
    % check if they are in the same row
    nth1(1, Queen1, Column1),
    nth1(1, Queen2, Column2),
    Column1 =:= Column2,
    % check if they are in the same diagonal
    nth1(2, Queen1, Row1),
    nth1(2, Queen2, Row2),
    Row1 - Row2 =:= Column1 - Column2,
    % check if they are in the same reverse diagonal
    Row1 - Row2 =:= (N+1) - (Column1 + Column2).

% Solve the N-Queens problem
% N - input value
% Rows - list of rows
% Solution - list of all possible solutions
solve_n_queens(N, Rows, Solution) :-
    % generate a list of integers from 1 to N for columns
    range(1, N, Columns),
    % use the built-in permutation predicate to generate all possible combinations
    permutation(Columns, Rows),
    % use the n-queens problem logic to check if the placement is valid
    valid_placement(Rows, N),
    % if the placement is valid, add it to the solution list
    Solution = [Rows|Solution].

% Recursive function to check all valid placements of queens on the board
% Rows - list of rows representing the queen positions
% N - input value
valid_placement([], N).
valid_placement([Row|Rows], N) :-
    % check if the queen is not attacking any other queen in the previous rows
    not_attacking_previous(Row, Rows, N),
    % recursively check for the next row
    valid_placement(Rows, N).

% Helper predicate to check if a new queen is not attacking any previous queens
% NewQueen - position of the new queen
% PreviousQueens - list of positions of previous queens
% N - input value
not_attacking_previous(_, [], _).
not_attacking_previous(NewQueen, [Queen|Queens], N) :-
    % check if the new queen is not attacking the previous queen
    % by using the can_attack predicate
    not(can_attack(NewQueen, Queen)),
    % recursively check for the next previous queen
    not_attacking_previous(NewQueen, Queens, N).

% Sample output for 4x4 board:
?- solve_n_queens(4, Rows, Solution).
Rows = [2, 4, 1, 3]
Solution = [[2, 4, 1, 3], [3, 1, 4, 2], [4, 2, 1, 3], [1, 3, 2, 4]].