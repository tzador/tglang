/* This is a complex Prolog code snippet that defines a parent relationship.
 * It starts by defining the parent predicate with two parameters, child and parent.
 * Then it uses the backtracking feature of Prolog to define different parent relationships.
 * Finally, it displays all the possible parent-child pairs using the findall predicate.
 */
 
parent(X,Y) :- mother(X,Y).    % X is the parent of Y if X is the mother of Y
parent(X,Y) :- father(X,Y).    % X is the parent of Y if X is the father of Y
 
mother(jill,claire).    % jill is the mother of claire
mother(claire,jodie).   % claire is the mother of jodie
mother(jodie,emily).    % jodie is the mother of emily
father(jack,claire).    % jack is the father of claire
father(claire,ryan).    % claire is the father of ryan
father(ryan,emily).     % ryan is the father of emily
 
/* The findall predicate is used to generate a list of all possible parent-child pairs.
 * The first parameter is the list of parent-child pairs, and the second parameter is the query
 * to be satisfied. In this case, we want all possible combinations of the parent predicate.
 */
 
% The output of the following code will be:
% Pairs = [(jill, claire), (claire, jodie), (jodie, emily), (jack, claire), (claire, ryan), (ryan, emily)]
 
?- findall((X,Y), parent(X,Y), Pairs).    % Queries all possible parent-child pairs and stores them in Pairs