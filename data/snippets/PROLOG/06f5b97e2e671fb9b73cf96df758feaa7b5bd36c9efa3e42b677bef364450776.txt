% Annotated code snippet in PROLOG
% Defining a rule to check if a given list is a palindrome
palindrome(List) :- reverse(List, List). 

% Defining the base case for an empty list
palindrome([]).

% Defining a rule to check if a list is a palindrome 
% by recursively splitting the list into smaller halves
palindrome([H|T]) :- 
    split_list([H|T], Half1, Half2), 
    palindrome(Half1), 
    palindrome(Half2), 
    reverse(Half1, Half2). 

% Defining a rule to split a list into two halves
% Uses the built-in predicate length/2 to find the length of the list
split_list(List, Half1, Half2) :- 
    length(List, Length), 
    Midpoint is floor(Length/2), 
    length(Half1, Midpoint), 
    length(Half2, Midpoint), 
    append(Half1, Half2, List). 

% Defining a rule to reverse a list
% Uses an accumulator to keep track of the reversed list
reverse_list(List, Reversed) :- 
    reverse_list_helper(List, [], Reversed). 

% Helper rule for reverse_list/2
% Adds the head of the list to the accumulator and recursively 
% calls itself with the tail of the list until the list is empty
reverse_list_helper([], Reversed, Reversed).

reverse_list_helper([H|T], Acc, Reversed) :-
    reverse_list_helper(T, [H|Acc], Reversed).

% Example query to check if [1,2,3,2,1] is a palindrome
% Should return 'true'
?- palindrome([1,2,3,2,1]).