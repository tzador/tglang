%% A program to find the shortest path in a weighted directed graph
%% First, define the necessary predicates and their arguments
weighted_edge(X, Y, W). %X and Y represent nodes, W represents weight
node(X). %X represents a node in the graph
path(X, Y, W, Path). %X and Y represent the start and end nodes, W represents the weight of the path, Path represents the path itself
visited(X, Path). %X represents a node that has already been visited in the current path
not_visited(X, Path). %X represents a node that has not yet been visited in the current path

%% Then, define the base case for the recursive predicate
path(X, Y, W, [X,Y]) :- %if X and Y are connected by an edge with weight W
    weighted_edge(X, Y, W).

%% Next, define the recursive case for finding the shortest path
path(X, Y, W, Path) :-
    weighted_edge(X, Z, W1), %find an edge from X to Z with weight W1
    not_visited(Z, Path), %make sure Z has not been visited in the current path
    path(Z, Y, W2, P), %recursively find the shortest path from Z to Y with weight W2
    W is W1 + W2, %calculate the total weight of the path
    Path = [X|P], %add X to the front of the path
    not_visited(X, Path). %make sure X has not been visited in the current path

%% Lastly, define the predicate to find the shortest path between two nodes
shortest_path(X, Y, Path) :-
    node(X), %make sure X is a valid node
    node(Y), %make sure Y is a valid node
    path(X, Y, Weight, Path), %find the shortest path with weight Weight and assign it to Path
    not_visited(X, Path), %make sure X has not been visited in the final path
    not_visited(Y, Path). %make sure Y has not been visited in the final path