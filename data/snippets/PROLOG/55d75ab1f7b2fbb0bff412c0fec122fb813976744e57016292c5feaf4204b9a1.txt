``
% Predicate to find the minimum element in a list
min_list([X], X).
min_list([H|T], Min) :- min_list(T, Min1), H > Min1, Min is Min1.
min_list([H|T], Min) :- min_list(T, Min1), H =< Min1, Min is H.

% Predicate to find the factorial of a number using tail recursion
factorial(X, F) :- factorial(X, 1, F).
factorial(0, F, F).
factorial(X, Acc, F) :- X > 0, NewAcc is Acc * X, NewX is X - 1, factorial(NewX, NewAcc, F).

% Predicate to check if a list is a palindrome
palindrome(List) :- reverse(List, List).

% Predicate to remove duplicates from a list
remove_duplicates([], []).
remove_duplicates([X|T], [X|NewList]) :- not(member(X, T)), remove_duplicates(T, NewList).
remove_duplicates([X|T], NewList) :- member(X, T), remove_duplicates(T, NewList).

% Predicate to find the sum of all even numbers in a list
sum_even([], 0).
sum_even([X|T], Sum) :- Sum is X + Sum1, X mod 2 =:= 0, sum_even(T, Sum1).
sum_even([X|T], Sum) :- X mod 2 =\= 0, sum_even(T, Sum).

% Predicate to find the power of a number using tail recursion
power(X, N, P) :- power(X, N, 1, P).
power(_, 0, P, P).
power(X, N, Acc, P) :- N > 0, NewAcc is Acc * X, NewN is N - 1, power(X, NewN, NewAcc, P).