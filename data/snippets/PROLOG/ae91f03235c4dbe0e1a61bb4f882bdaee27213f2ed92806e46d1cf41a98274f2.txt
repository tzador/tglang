% Defining a rule
palindrome(String) :-
  reverse(String, String).
  
% Defining base cases for recursion
palindrome([]).
palindrome([_]).

% Defining recursive cases for checking if a list is a palindrome
palindrome([H|T]) :-
  palindrome(T),
  append(T, [H], T2),
  palindrome(T2).
  
% Defining a rule to check if a number is prime  
prime(2).
prime(3).
prime(P) :- 
  integer(P), 
  P > 3, 
  P mod 2 =\= 0, 
  \+ has_factor(P,3). 

% Defining a helper rule to check if a number has a factor
has_factor(N,L) :-
  N mod L =:= 0.
has_factor(N,L) :-
  L * L < N,
  L2 is L + 2,
  has_factor(N,L2).
  
% Defining a rule to check if a list is a set (no duplicate elements)
set([]).
set([H|T]) :-
  \+ member(H,T),
  set(T).