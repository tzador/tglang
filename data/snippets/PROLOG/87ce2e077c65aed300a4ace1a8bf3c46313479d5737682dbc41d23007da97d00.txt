%% A program that determines if a number is prime
%% Define a dynamic predicate that stores the calculated primes
:- dynamic calculated_prime/1.

%% Base cases for determining if a number is prime
prime(2).
prime(3).

%% Define a recursive rule for checking if a number is prime
prime(N) :-
    %% Check if the number has already been calculated to be prime
    calculated_prime(N),
    %% Negate the query to avoid infinite loop
    \+ calculated_nonprime(N).

%% Check if a number is divisible by any other number between 2 and N-1
prime(N) :-
    \+ calculated_prime(N),
    numlist(2, N-1, Divisors),
    %% Iterate through the list of divisors
    member(D, Divisors),
    %% Check if the number is divisible by the divisor
    0 is N mod D,
    %% Assert that the number is not prime
    assertz(calculated_nonprime(N)).

%% Assert that the number is prime if it has not already been calculated
prime(N) :-
    numlist(2, N-1, Divisors),
    %% Check if the number is not divisible by any number in the range
    \+ (member(D, Divisors), 0 is N mod D),
    %% Assert that the number is prime
    assertz(calculated_prime(N)).