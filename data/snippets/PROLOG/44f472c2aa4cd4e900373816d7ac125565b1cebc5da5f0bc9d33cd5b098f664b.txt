/* This is a Prolog program that checks if two lists have the same elements in a different order */

/* fact: the empty list is a permutation of the empty list */
is_permutation([], []).

/* rule: check if an element is in the list, remove it and check if the remaining elements are a permutation of the remaining list */
is_permutation([Elem|Tail1], List2) :-
  member(Elem, List2), /* check if Elem is in List2 */
  select(Elem, List2, NewList2), /* remove Elem from List2 and store it in NewList2 */
  is_permutation(Tail1, NewList2). /* recursively check if remaining elements are a permutation */

/* rule: to check if two lists are permutations, both lists must have the same elements, so we transpose the second list and check if the first list is a permutation of the transposed list */
are_permutations(List1, List2) :-
  length(List1, Length1),
  length(List2, Length2),
  Length1 =:= Length2, /* check if the lengths are the same */
  \+ \+ is_permutation(List1, List2). /* use double negation to avoid unification errors and check if List1 is a permutation of List2 */