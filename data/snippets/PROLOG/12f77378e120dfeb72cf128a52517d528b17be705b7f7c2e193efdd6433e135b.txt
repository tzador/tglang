:- dynamic answer/0. % declare dynamic predicate

% define a rule for recursive factorial calculation
factorial(0,1). % base case: factorial of 0 is 1
factorial(N,Result) :-
    N > 0, % check if N is greater than 0
    N1 is N-1, % calculate N-1
    factorial(N1,Result1), % recursively calculate factorial of N-1
    Result is Result1*N. % calculate the factorial of N by multiplying with N-1's factorial
    
% define a rule for querying and printing the factorial of a given number
printFactorial(N) :-
    write('The factorial of '), write(N), write(' is '), factorial(N,Result), write(Result).

% assert facts for testing the factorial rule 
:- dynamic answer/1. % declare dynamic predicate with arity of 1
assert(answer(0,1)). % assert the fact that the factorial of 0 is 1
assert(answer(5,120)). % assert the fact that the factorial of 5 is 120

% define a rule for checking if the factorial rule is correct
checkFactorial :-
    answer(N,Factorial), % query for all N and Factorial values from the dynamic predicate
    factorial(N,Result), % calculate factorial using the defined rule
    write('Factorial of '), write(N), write(' is incorrect.'), nl, % if the factorial is incorrect, print an error message
    write('Expected: '), write(Factorial), nl, % print the expected factorial
    write('Actual: '), write(Result), nl. % print the calculated factorial