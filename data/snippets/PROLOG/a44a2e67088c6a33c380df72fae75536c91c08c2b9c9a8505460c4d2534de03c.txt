% Define a predicate that checks if a list is a palindrome
palindrome([]).  % Base case, an empty list is a palindrome
palindrome([_]). % Base case, a singleton list is a palindrome

% Recursive predicate to check if first and last elements are equal
palindrome([H | T]) :-
  append(Middle, [H], T), % Remove the last element from the list
  palindrome(Middle).     % Recursively check if the remaining list is a palindrome

% Define a predicate that checks if a number is even or odd
even(X) :-
  0 is X mod 2.  % A number is even if it is divisible by 2 with remainder 0

odd(X) :-
  X =\= 0,      % A number is odd if it is not equal to 0
  \+ even(X).   % A number is not even if it is not divisible by 2 with remainder 0

% Define a predicate to find the factorial of a number
factorial(0, 1). % Base case, the factorial of 0 is 1

factorial(N, Result) :-
  N > 0,                          % Ensure a positive number is given
  N1 is N - 1,                    % Decrement N by 1
  factorial(N1, Part),            % Recursively find the factorial of N1
  Result is N * Part.             % Multiply N with the factorial of N1 to get the final result