% Predicate to check if a list is sorted in ascending order
isAscending([]). % Base case: An empty list is considered sorted.
isAscending([_]). % Base case: A list with only one element is considered sorted.
isAscending([H1,H2|T]) :-    % The list is split into the first two elements (H1 and H2) and the rest of the list (T).
    H1 =< H2,               % Check if H1 is less than or equal to H2.
    isAscending([H2|T]).    % Recursively call the predicate on the rest of the list, starting with H2 as the first element.

% Predicate to find the minimum element in a list
minList([X], X).            % Base case: The minimum of a list with only one element is that element itself.
minList([H|T], H) :-        % The list is split into the first element (H) and the rest of the list (T).
    minList(T, Min),        % Recursively call the predicate on the rest of the list. This will find the minimum element in the rest of the list.
    H =< Min.               % Check if the first element is less than or equal to the minimum found in the rest of the list.
minList([_|T], Min) :-      % If the first element is not the minimum, ignore it and call the predicate on the rest of the list.
    minList(T, Min).

% Predicate to merge two lists in sorted order
mergeLists([], List, List).     % Base case: Merging an empty list with any list results in the same list.
mergeLists(List, [], List).     % Base case: Merging any list with an empty list results in the same list.
mergeLists([X|T1], [Y|T2], [X|Merged]) :-
    X =< Y,                     % Check if X (from the first list) is less than or equal to Y (from the second list).
    mergeLists(T1, [Y|T2], Merged).  % Recursively call the predicate on the rest of the first list and the second list.
mergeLists([X|T1], [Y|T2], [Y|Merged]) :-
    X > Y,                      % If X is greater than Y, add Y to the beginning of the merged list.
    mergeLists([X|T1], T2, Merged).  % Recursively call the predicate on the first list (with X removed) and the rest of the second list.