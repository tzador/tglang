%% This is a Prolog program that implements a depth-first search algorithm.


% Main predicate to start the search.
dfs(Start, Goal, Path) :-
    write('Starting depth-first search...'), nl,
    dfs(Start, Goal, [Start], Path).


% Base case: if the current node equals the goal, set the current path as the final path and stop the search.
dfs(Goal, Goal, Path, Path) :-
    write('Goal found, terminating search.'), nl.


% Recursive case: Get the current node and search for all its adjacent nodes.
% If an adjacent node is not already on the current path, add it to the path and continue the search.
dfs(Node, Goal, CurrentPath, FinalPath) :-
    write('Current node: '), write(Node),
    write(', current path: '), write(CurrentPath), nl,
    findall(Adjacent, adjacent(Node, Adjacent), AdjacentNodes),
    check_path(AdjacentNodes, Node, CurrentPath, [], NewPath),
    dfs(AdjacentNodes, Goal, NewPath, FinalPath).


% Helper predicate to check if an adjacent node is already on the current path.
% If not, add it to the new path and continue the search using the new path.
check_path([], _, _, NewPath, NewPath).

check_path([Node|Rest], CurrentNode, CurrentPath, Acc, NewPath) :-
    \+ member(Node, CurrentPath),
    append(Acc, [Node], NewAcc),
    check_path(Rest, CurrentNode, CurrentPath, NewAcc, NewPath).

check_path([_|Rest], CurrentNode, CurrentPath, Acc, NewPath) :-
    check_path(Rest, CurrentNode, CurrentPath, Acc, NewPath).


% Adjacent predicate for testing purposes, returns a list of adjacent nodes.
adjacent(Node, Adjacent) :-
    map_adjacents(Node, [1,2,3,4,5,6,7,8],[4,5,6,7,8,9,10,11], Adjacent).

map_adjacents(Node, Xs, Ys, Adjacent) :-
    maplist(plus(Node), Xs, XCoords),
    maplist(plus(Node), Ys, YCoords),
    maplist(make_pair, XCoords, YCoords, Adjacent).


% Helper function for creating a pair.
make_pair(A, B, A-B).