graph([(A,B),(A,C),(B,C),(B,D),(C,E),(E,G),(D,F),(E,F)]).  % Define a graph with nodes and edges
nodes([A,B,C,D,E,F,G]).  % Define the nodes in the graph
path(Graph, Start, End, Path) :-  % Define a predicate to find a path between two nodes in the graph
    travel(Graph, Start, End, [Start], Q),
    reverse(Q, Path).

travel(Graph, End, End, Path, [End|Path]).
% If the current node is the end node, add it to the path and return

travel(Graph, Start, End, Visited, Path) :-
    connected(Graph, Start, Next),
    Next \== End, % Check if the next node is not the end node
    \+member(Next, Visited), % Check if the next node has not already been visited
    travel(Graph, Next, End, [Next|Visited], Path). % Recursively call travel with the next node added to the visited list

connected(Graph, A, B) :- % Define a predicate to check if two nodes are connected in the graph
    member((A,B), Graph). % Check if there exists an edge between the two nodes
connected(Graph, A, B) :-
    member((B,A), Graph). % Check if there exists an edge between the two nodes in the opposite direction