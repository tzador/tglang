/* A rule that determines if a list contains exactly three elements */
contains_three_elements(List) :-
    /* Uses the built-in predicate length() to find the length of the list */
    length(List, 3).

/* A rule that concatenates two lists and returns the result */
concatenate([], List, List).

/* If the first list is not empty, add the head to the concatenated list and recurse for the tails */
concatenate([Head|Tail1], List2, [Head|Tail3]) :-
    concatenate(Tail1, List2, Tail3).

/* A rule that checks if two lists have the same first element */
same_first_element(List1, List2) :-
    /* Get the first element of the first list */
    [Head|_] = List1,
    /* Get the first element of the second list */
    [Head|_] = List2.

/* A rule that checks if two lists are permutations of each other */
is_permutation([], []).
/* If the lists are not empty, check if they have the same first element and recurse for the tails */
is_permutation([Head|Tail1], List2) :-
    select(Head, List2, NewList),
    is_permutation(Tail1, NewList).

/* A rule that checks if a list has unique elements, meaning no element is repeated */
has_unique_elements([]).
/* If the list is not empty, use the built-in predicate member() to check if the head is in the tail */
has_unique_elements([X|XS]) :-
    \+ member(X, XS),
    /* Recurse for the tail */
    has_unique_elements(XS).

/* A rule that sorts a list in ascending order using quicksort algorithm */
quicksort([], []).
/* Divide the list into two parts: elements smaller than the pivot and elements greater than the pivot */
quicksort([Pivot|Xs], Sorted) :-
    partition(Pivot, Xs, Smaller, Bigger),
    /* Recurse for the smaller list and the bigger list separately and concatenate them */
    quicksort(Smaller, SmallSorted),
    quicksort(Bigger, BigSorted),
    concatenate(SmallSorted, [Pivot|BigSorted], Sorted).