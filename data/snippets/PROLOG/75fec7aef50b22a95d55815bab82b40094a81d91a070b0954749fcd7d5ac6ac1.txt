/* Define a rule called "is_palindrome" which takes in a list of elements as input*/
is_palindrome(List) :-
    reverse(List, Reversed_List), /* Reverse the input list and store it in a variable */
    List = Reversed_List. /* Check if the reversed list is equal to the input list */

/* Define a rule called "find_all_palindromes" which takes in a list and a result list as input*/
find_all_palindromes(List, Result_List) :-
    findall(Palindrome, /* Find all palindromes in the given list using a helper rule called "is_palindrome" */
    (is_palindrome(Palindrome),
    member(Palindrome, List)), /* Check if each palindrome is a member of the given list */
    Result_List). /* Store the resulting list of palindromes in the "Result_List" variable */

/* Define a rule called "sublist" which takes in a list, a start index, and a sub-list as input*/
sublist(List, Start_Index, Sub_List) :-
    length(Sub_List, Length), /* Get the length of the sublist */
    length(List, List_Length), /* Get the length of the input list */
    End_Index is Start_Index+Length-1, /* Calculate the end index of the sublist */
    sublist_helper(List, Start_Index, End_Index, Sub_List). /* Call the helper rule */

/* Define a helper rule called "sublist_helper" with the same parameters as "sublist" */
sublist_helper(List, Start_Index, End_Index, Sub_List) :-
    (Start_Index > End_Index, Sub_List = []). /* If the start index is greater than the end index, then the sublist is empty */
sublist_helper(List, Start_Index, End_Index, Sub_List) :-
    nth1(Start_Index, List, Element), /* Get the element at the start index */
    Rest_Index is Start_Index+1, /* Calculate the start index for the rest of the sublist */
    sublist_helper(List, Rest_Index, End_Index, Temp_List), /* Recursively get the rest of the sublist */
    Sub_List = [Element|Temp_List]. /* Add the element to the front of the rest of the sublist */

/* Define a rule called "linewise_read" which reads data in line by line from standard input */
linewise_read(S) :-
    get0(C), /* Get the ASCII value of the next character in standard input */
    read_line(C, S). /* Call the helper rule to read the line */

/* Helper rule called "read_line" with parameters for the current ASCII value and the resulting string */
read_line(10, []) :- !. /* If the ASCII value is 10 (newline), the end of the line has been reached and the resulting string is empty */
read_line(-1, []) :- !. /* If the ASCII value is -1 (end of file), the resulting string is empty */
read_line(C, [C|Tail]) :- /* Otherwise, construct the resulting string recursively */
    get0(C1), /* Get the ASCII value of the next character */
    read_line(C1, Tail). /* Recursively add the character to the end of the resulting string */

/* Define a main rule called "main" with no parameters */
main() :-
    writeln("Enter a list of elements: "), /* Prompt the user for a list of elements */
    linewise_read(List), /* Call the "linewise_read" rule to get the input list from standard input */
    find_all_palindromes(List, Result_List), /* Call the "find_all_palindromes" rule to get a list of all palindromes in the input list */
    write("All palindromes in the list are: "), /* Print a message */
    writeln(Result_List). /* Output the resulting list of palindromes */