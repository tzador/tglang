% This is a comment in PROLOG

% Define a predicate to check if a number is odd
is_odd(Number) :- 
    mod(Number, 2) =:= 1.

% Define a predicate to check if a number is even
is_even(Number) :- 
    mod(Number, 2) =:= 0.

% Define a predicate to calculate the factorial of a number
factorial(0, 1). % Base case, 0 factorial is 1

factorial(Number, Result) :- 
    Number > 0, % Make sure Number is a positive integer 
    Previous_number is Number - 1, % Get the previous number
    factorial(Previous_number, Previous_result), % Calculate factorial of previous number
    Result is Number * Previous_result. % Multiply by the current number to get the factorial

% Define a predicate to calculate the nth Fibonacci number
fib(0, 0). % Base case, first Fibonacci number is 0

fib(1, 1). % Base case, second Fibonacci number is 1 

fib(Number, Result) :- 
    Number > 1, % Make sure Number is a positive integer
    N1 is Number - 1, % Calculate n-1 for recursive step
    N2 is Number - 2, % Calculate n-2 for recursive step
    fib(N1, Result1), % Calculate (n-1)th Fibonacci number
    fib(N2, Result2), % Calculate (n-2)th Fibonacci number
    Result is Result1 + Result2. % Add the two results to get the nth Fibonacci number 

% Define a predicate to check if a list is sorted in ascending order
is_sorted([]). % Base case, empty list is sorted

is_sorted([_]). % Base case, single element list is sorted

is_sorted([Head1, Head2|Tail]) :- 
    Head1 =< Head2, % Check if first element is less than or equal to second element
    is_sorted([Head2|Tail]). % Check if the rest of the list is sorted

% Define a predicate to flatten a nested list
% We are using accumulator, the second argument, in this predicate to store the flattened list
flatten(List, Flat_list) :- 
    flatten(List, [], Flat_list).

% Base case, if the list is empty or a single element, add element to accumulator and return
flatten([], Flat_list, Flat_list).
flatten(Element, Flat_list, [Element|Flat_list]) :- 
    \+ is_list(Element). % Check if Element is not a list, add it to accumulator and return

% Recursive case, flatten the head of the list and add it to accumulator
% and recursively flatten the tail of the list
flatten([Head|Tail], Flat_list, Result) :- 
    flatten(Tail, Flat_list, Acc), % Flatten the tail and add it to accumulator
    flatten(Head, Acc, Result). % Flatten the head and add it to accumulator

% Define a predicate to check if a binary tree is perfect
% A perfect binary tree is a tree where all internal nodes have two children
perfect_binary_tree(nil).
perfect_binary_tree(tree(_, nil, nil)).
perfect_binary_tree(tree(_, Left, Right)) :- 
    perfect_binary_tree(Left), % recursively check if left subtree is perfect
    perfect_binary_tree(Right). % recursively check if right subtree is perfect

% Define a predicate to calculate the sum of all elements in a binary tree
tree_sum(nil, 0). % Base case, sum of an empty tree is 0

tree_sum(tree(Element, Left, Right), Sum) :- 
    tree_sum(Left, Left_sum), % Get sum of left subtree
    tree_sum(Right, Right_sum), % Get sum of right subtree
    Sum is Left_sum + Right_sum + Element. % Calculate sum by adding all elements