% A predicate to determine if a given number is a prime number
% Input: Num (the number to be checked)
% Output: true if Num is a prime number, false otherwise
is_prime(Num) :-
    Num > 1, % Checks if Num is greater than 1, since 1 is neither prime nor composite
    is_prime_helper(2, Num). % Calls helper predicate with the starting divisor as 2
% Helper predicate to check if given number is prime or not
% Input: Divisor (start value for checking), Num (number to be checked)
% Output: true if Num is prime, false otherwise
is_prime_helper(Divisor, Num) :-
    Divisor > Num / 2, % Checks if divisor has reached halfway point, since if no divisor is found till this point, number is prime
    !. % Cuts off backtracking at this point
is_prime_helper(Divisor, Num) :-
    Num mod Divisor =:= 0, % Checks if divisor divides the given number evenly
    !, % Cuts off backtracking at this point
    fail. % Fails, as the number is definitely not prime if Divisor divides it evenly
is_prime_helper(Divisor, Num) :-
    Next_divisor is Divisor + 1, % Increments the divisor
    is_prime_helper(Next_divisor, Num). % Calls itself with the new divisor value to continue checking