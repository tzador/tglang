/* This Prolog program uses a recursive predicate to solve the classic Tower of Hanoi puzzle. It takes in three arguments - the number of disks, the starting peg, and the ending peg. */

% Base case - if there is only one disk, just move it from the starting peg to the ending peg.
tower_of_hanoi(1, Start, End) :-
    write("Move disk from "),
    write(Start),
    write(" to "),
    write(End),
    nl.

% Recursive case - if there are more than one disk, we can break it down into smaller subproblems.
tower_of_hanoi(N, Start, End) :-
    % First, we need to move N-1 disks from the start peg to the auxiliary peg.
    Diff is 6 - Start - End,  % Auxiliary peg is always 6 - (start peg + end peg)
    tower_of_hanoi(N-1, Start, Diff),
    % Then, we move the largest disk from the start peg to the end peg.
    tower_of_hanoi(1, Start, End),
    % Finally, we move the remaining N-1 disks from the auxiliary peg to the end peg.
    tower_of_hanoi(N-1, Diff, End).