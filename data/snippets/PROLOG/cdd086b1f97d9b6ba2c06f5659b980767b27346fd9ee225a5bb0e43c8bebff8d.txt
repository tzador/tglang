%% Define a predicate to check if two lists have the same length
check_length([_], [_]).
check_length([_ | T1], [_ | T2]) :-
  check_length(T1, T2).

%% Define a predicate to find the sum of a list
list_sum([], 0).
list_sum([H | T], Sum) :-
  list_sum(T, Rest),
  Sum is H + Rest.

%% Define a predicate to get the last element of a list
last_element([X], X).
last_element([_ | T], X) :-
  last_element(T, X).

%% Define a predicate to reverse a list
reverse_list(L, R) :-
  reverse_list(L, [], R).

reverse_list([], Acc, Acc).
reverse_list([H | T], Acc, R) :-
  reverse_list(T, [H | Acc], R).

%% Define a predicate to remove duplicates from a list
remove_duplicates([], []).
remove_duplicates([H | T], [H | R]) :-
  not(member(H, T)),
  remove_duplicates(T, R).
remove_duplicates([H | T], R) :-
  member(H, T),
  remove_duplicates(T, R).

%% Define a predicate to check if a given number is prime
is_prime(2).
is_prime(3).
is_prime(N) :-
  integer(N),
  N > 3,
  N mod 2 =\= 0,
  \+ has_factor(N, 3).

has_factor(N, L) :-
  N mod L =:= 0.
has_factor(N, L) :-
  L * L < N,
  L2 is L + 2,
  has_factor(N, L2).