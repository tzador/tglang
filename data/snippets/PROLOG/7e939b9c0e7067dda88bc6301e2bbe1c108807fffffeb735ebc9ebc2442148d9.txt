%This is a Prolog program that finds the path between two nodes in a graph
%It uses a depth-first search algorithm and keeps track of visited nodes
%Source node is given as the first argument, target node as the second argument
%Graph is represented as a list of edges

%Base case: If source node equals target node, path is itself
find_path(Node, Node, [Node]).
%Recursive case: If source node equals one of the nodes in the edge, move to the other node
find_path(Source, Target, [Source, NextNode|Tail]) :-
    edge(Source, NextNode),
    not(member(NextNode, Tail)),
    find_path(NextNode, Target, [NextNode|Tail]).
%Recursive case: If source node does not equal any of the nodes in edge, backtrack and try again
find_path(Source, Target, [Source|Tail]) :-
    find_path(NextNode, Target, [NextNode|Tail]).

%List of edges representing the graph
edge(a, b).
edge(b, c).
edge(b, d).
edge(d, e).
edge(e, f).

?- find_path(a, f, Path).
%Expected output: [a, b, d, e, f]