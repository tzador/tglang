%Sudoku Solver Program
%
%This program solves a 9x9 sudoku puzzle
%using a backtracking algorithm
%
%Predicate to check if the entry at given coords
%does not conflict with any other entries in the row
%and the column
conflicts(Row, Col, Entry, Board) :-
	%check for conflicts in row
	nth1(Row, Board, RowValues), %get row values
	\+ member(Entry, RowValues), %check if entry already exists in row
	%check for conflicts in column
	get_column(Board, Col, ColValues), %get column values
	\+ member(Entry, ColValues). %check if entry already exists in column

%Helper predicate to get values from a specific column in a 9x9 board
get_column([], _, []). %base case
get_column([Row|SubBoard], Col, [Value|SubCol]) :-
	nth1(Col, Row, Value), %get value at given column
	get_column(SubBoard, Col, SubCol). %recurse for remaining rows

%Main predicate to solve the sudoku puzzle
solve_sudoku(Board, Solved) :-
	%find an empty cell to fill
	empty_cell(Row, Col, Board),
	%try every possible entry in the cell
	between(1, 9, Entry),
	%check if there are no conflicts with the entry
	\+ conflicts(Row, Col, Entry, Board),
	%assign the entry to the cell
	replace_row_col(Row, Col, Entry, Board, NewBoard),
	%solve the remaining puzzle
	solve_sudoku(NewBoard, Solved).
	
%Helper predicate to find an empty cell in the board
empty_cell(Row, Col, Board) :-
	%get all rows
	numlist(1, 9, Rows),
	%get all columns
	numlist(1, 9, Cols),
	%find an empty cell by iterating through rows and columns
	member(Row, Rows),
	member(Col, Cols),
	nth1(Row, Board, RowValues), %get values in the row
	nth1(Col, RowValues, Entry), %get value at given column
	var(Entry). %check if the entry is unassigned (empty)

%Helper predicate to replace an entry in a cell
replace_row_col(Row, Col, Entry, Board, NewBoard) :-
	%replace the row with the new entry
	replace_row(Row, Entry, Board, TmpBoard),
	%transpose the board to replace the column
	transpose(TmpBoard, TransposedBoard),
	%replace the column with the new entry
	replace_row(Col, Entry, TransposedBoard, TmpTransposedBoard),
	%transpose the board back to its original form
	transpose(TmpTransposedBoard, NewBoard).
	
%Helper predicate to replace an element in a list at a specific index
replace_element(Index, Element, List, NewList) :-
	nth1(Index, List, _OldElement, TmpList), %remove old element
	nth1(Index, NewList, Element, TmpList). %insert new element at same index

%Helper predicate to replace a row in a 9x9 board with a new row
replace_row(Row, NewRow, Board, NewBoard) :-
	nth1(Row, Board, _OldRow, TmpBoard), %remove old row
	nth1(Row, NewBoard, NewRow, TmpBoard). %insert new row at same index

%Example sudoku board
board([[_,_,_,5,_,_,_,_,_],
	   [2,_,_,9,_,3,_,_,_],
	   [_,_,_,_,_,4,_,_,_],
	   [_,7,_,_,_,_,3,_,_],
	   [5,_,_,_,_,_,_,1,_],
	   [1,_,_,_,_,_,_,_,7],
	   [_,_,6,_,_,_,_,_,4],
	   [_,_,_,_,_,2,_,_,_],
	   [_,_,_,_,6,_,_,_,_]]).
	   
%Example output
%?- board(Board), solve_sudoku(Board, Solved).
%Solved = [[7,8,2,5,4,1,6,3,9],
%		   [2,6,4,9,7,3,1,8,5],
%		   [9,3,5,8,2,4,7,6,1],
%		   [4,7,9,6,5,8,3,2,1],
%		   [5,2,3,4,7,6,8,1,9],
%		   [1,6,8,2,3,9,4,5,7],
%		   [3,1,6,7,5,9,2,8,4],
%		   [8,5,7,1,9,2,4,6,3],
%		   [9,4,1,3,6,8,5,7,2]].