% A simple Prolog program to check if a number is prime or not
% 'is_prime' is a recursive function that checks if 'Num' is divisible by any number from 2 to the square root of 'Num'
% If yes, then 'Num' is not prime, else it is prime

% Define the base cases
is_prime(Num) :- Num =< 1, !, fail.  % Number less than or equal to 1 is not prime
is_prime(2) :- !, true.  % 2 is a prime number
is_prime(3) :- !, true.  % 3 is a prime number

% Recursive call to check if 'Num' is divisible by any number from 2 to square root of itself
is_prime(Num) :- Num mod 2 =\= 0,    % 'Num' is not divisible by 2
                 Num mod 3 =\= 0,    % 'Num' is not divisible by 3
                 check_divisibility(Num, 3).  % Call helper function to check divisibility starting from 3

% Helper function to check divisibility
check_divisibility(Num, Divisor) :- Divisor > sqrt(Num), !.  % If the 'Divisor' is greater than the square root of 'Num', then 'Num' is prime

% Recursive call to check if 'Num' is divisible by the current 'Divisor'
check_divisibility(Num, Divisor) :- Num mod Divisor =:= 0, !, fail.  % If 'Num' is divisible by 'Divisor', then 'Num' is not prime
check_divisibility(Num, Divisor) :- NextDivisor is Divisor + 2,    % Increment 'Divisor' by 2 to skip all even numbers
                                     check_divisibility(Num, NextDivisor).  % Call the helper function again with the updated 'Divisor'

% Example query: is_prime(17).  % Outputs 'true' as 17 is a prime number