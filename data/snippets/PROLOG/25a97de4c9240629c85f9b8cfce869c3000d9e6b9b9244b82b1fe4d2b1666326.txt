consult('knowledgeBase.pl'). % Consult the knowledge base file
:- dynamic path/2. % Declare dynamic predicate for storing paths
:- dynamic visited/1. % Declare dynamic predicate for keeping track of visited nodes
:- discontiguous edge/2. % Allow for non-adjacent edge clauses in knowledge base
find_path(Start, End, Path) :- % Define find_path predicate with 3 variables
    assert(visited(Start)), % Assert start node as visited
    find_path(Start, End, [Start], Path). % Invoke helper predicate with accumulator
find_path(Start, End, Acc, Path) :- % Define helper predicate with 4 variables
    edge(Start, Next), % Get the next node connected to Start
    \+ visited(Next), % Check if the next node has not been visited
    \+ member(Next, Acc), % Check if the next node is not already in the accumulator
    assert(visited(Next)), % Assert next node as visited
    find_path(Next, End, [Next|Acc], Path). % Invoke helper predicate recursively with updated accumulator
find_path(Start, End, Acc, Path) :- % Define base case for the helper predicate
    edge(Start, End), % Check if End is connected to Start
    reverse([Start|Acc], Path). % Reverse accumulator to get final path