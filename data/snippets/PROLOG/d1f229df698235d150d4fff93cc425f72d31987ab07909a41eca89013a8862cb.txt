%%% Prolog program to represent a directed graph %%%

%%% Define the list of nodes %%%

node(a).
node(b).
node(c).
node(d).
node(e).

%%% Define the list of edges %%%

edge(a, b).
edge(a, c).
edge(b, d).
edge(c, d).
edge(d, e).
edge(c, e).

%%% Rule for finding a path between two nodes %%%

path(X, Y) :- edge(X, Y).  % If there is a direct edge between X and Y, then there exists a path between them
path(X, Y) :- edge(X, Z), path(Z, Y). % If there is an edge between X and some intermediate node Z, and there exists a path between Z and Y, then there exists a path between X and Y through Z

%%% Predicate for finding all paths between two nodes %%%

all_paths(X, Y, P) :- findall(Path, path(X, Y, [X], Path), P). % Call findall to find all paths between X and Y and store them in a list P

%%% Predicate for finding the shortest path between two nodes %%%

shortest_path(X, Y, Shortest) :- findall(Path, path(X, Y, [X], Path), Paths), % Call findall to find all paths between X and Y and store them in a list Paths
                                maplist(length, Paths, Lengths), % Map the length predicate over the list of Paths to get the lengths of each path
                                min_list(Lengths, MinLength), % Find the minimum length of all paths
                                nth0(Index, Lengths, MinLength), % Get the index of the shortest path in the list
                                nth0(Index, Paths, Shortest). % Get the path at that index, which is the shortest path

%%% Predicate for finding the longest path between two nodes %%%

longest_path(X, Y, Longest) :- findall(Path, path(X, Y, [X], Path), Paths), % Call findall to find all paths between X and Y and store them in a list Paths
                               maplist(length, Paths, Lengths), % Map the length predicate over the list of Paths to get the lengths of each path
                               max_list(Lengths, MaxLength), % Find the maximum length of all paths
                               nth0(Index, Lengths, MaxLength), % Get the index of the longest path in the list
                               nth0(Index, Paths, Longest). % Get the path at that index, which is the longest path

%%% Predicate for finding the number of paths between two nodes %%%

num_paths(X, Y, Count) :- findall(Path, path(X, Y, [X], Path), Paths), % Call findall to find all paths between X and Y and store them in a list Paths
                          length(Paths, Count). % Get the length of the list, which corresponds to the number of paths between X and Y

%%% Predicate for finding all paths with a specific length between two nodes %%%

paths_of_length(X, Y, N, Paths) :- findall(Path, path(X, Y, [X], Path), AllPaths), % Call findall to find all paths between X and Y and store them in a list AllPaths
                                   include(has_length(N), AllPaths, Paths). % Use the include predicate to filter the AllPaths list and only keep paths with length N

%%% Predicate for checking if a list has a specific length %%%

has_length(N, List) :- length(List, N). % Use the length predicate to check if the length of List is N

%%% Sample outputs %%%

?- all_paths(c, e, P).
P = [[c, e], [c, d, e]].

?- shortest_path(b, e, Shortest).
Shortest = [b, d, e].

?- longest_path(a, d, Longest).
Longest = [a, c, d].

?- num_paths(a, e, Count).
Count = 2.

?- paths_of_length(a, d, 2, Paths).
Paths = [[a, b], [a, c]].