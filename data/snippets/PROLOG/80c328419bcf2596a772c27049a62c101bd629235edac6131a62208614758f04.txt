% This predicate checks if a list is a palindrome
% PARAMETERS:
% InputList: the input list to be checked
% PalindromeList: the reversed list, should be empty in the beginning
%---------------------------------------------------------------------
palindrome(InputList, PalindromeList) :- 
    palindrome_helper(InputList, PalindromeList, []).

% This helper predicate reverses the input list and stores it in PalindromeList
% PARAMETERS:
% []: empty list, marks the end of input list
% TempList: stores the intermediate reversed list
% ReverseList: stores final reversed list
%---------------------------------------------------------------------------
palindrome_helper([], [], ReverseList) :- 
    !, ReverseList = [].

% The first element from the input list is added to the head of the intermediate list
% and the updated intermediate list is passed to the next recursive call.
%---------------------------------------------------------------------------
palindrome_helper([Element|Tail], PalindromeList, ReverseList) :- 
    palindrome_helper(Tail, PalindromeList, [Element|ReverseList]).

% Once the entire input list has been traversed, the intermediate list should 
% hold the reversed input list. To check if the input list is a palindrome, we 
% compare the input list and the reversed list.
%-------------------------------------------------------------------------------
palindrome(InputList, PalindromeList) :- 
    inputList = PalindromeList.