% This is a Prolog program that creates a predicate that checks if a list is a palindrome
% A palindrome is a word or phrase that reads the same backward as forward, for example "radar"

% First, we define the base case for single and empty lists
is_palindrome([]).  % an empty list is a palindrome
is_palindrome([_]). % a single element list is a palindrome

% Next, we define the recursive rule for checking if the first and last elements of a list are the same
% If they are, we then recursively check if the remaining list is a palindrome
is_palindrome([H|T]) :-              % the list has at least two elements (the head H and the tail T)
    append(Middle, [H], T),          % we use the built-in append predicate to split the list into a middle and the first element
    reverse(Middle, ReverseMiddle),  % we use the built-in reverse predicate to reverse the middle list
    is_palindrome(ReverseMiddle),    % we recursively check if the reversed middle list is a palindrome
    !.                               % the cuts (!) prevent unnecessary backtracking and improve performance

% If the first and last elements are not the same, the list is not a palindrome
is_palindrome(_) :- !, fail.

% Example query:
% ?- is_palindrome([r, a, d, a, r]).
% true.

% Explanation:
% This program uses recursion to check if the first and last elements of a list are the same, and then recursively checks if the remaining middle list is a palindrome. The use of a cut (!) prevents unnecessary backtracking, which improves performance. This code also accounts for both empty and single element lists, which are considered palindromes.