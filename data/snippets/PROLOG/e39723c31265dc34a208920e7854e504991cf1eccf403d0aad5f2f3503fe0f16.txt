/*
This program implements a basic dating system.
It takes in a list of people and their preferences in a relationship, and outputs
compatible matches based on those preferences.

Each person is represented by a term with their name and a list of characteristics (preferences).
Compatibility is determined by matching characteristics between two people.
*/

% defines a person with their name and preferences
person(bob, [outgoing, funny, adventurous]).
person(lisa, [adventurous, intellectual, affectionate]).
person(john, [reserved, intellectual, ambitious]).
person(sarah, [outgoing, intellectual, ambitious]).
person(alex, [outgoing, funny, ambitious]).

% predicate to find a compatible match
compatible_match(Name1, Characteristics1, Name2, Characteristics2) :-
    person(Name1, Characteristics1),
    person(Name2, Characteristics2),
    % loop through each characteristic in the first person's preferences
    member(Characteristic, Characteristics1),
    % check if the second person's preferences contain the same characteristic
    member(Characteristic, Characteristics2).

% predicate to search for compatible matches for a given person
find_matches_for(Name) :-
    % loop through each person in the list
    person(Match, _),
    % check if the person is not the same as the given person
    Match \= Name,
    % find a compatible match
    compatible_match(Name, _, Match, _),
    % output the compatible match
    format('~w matches with ~w', [Name, Match]),
    % add new line for readability
    nl,
    % continue searching for more matches
    fail.
% no more matches found, end program
find_matches_for(_).
find_matches_for(bob).