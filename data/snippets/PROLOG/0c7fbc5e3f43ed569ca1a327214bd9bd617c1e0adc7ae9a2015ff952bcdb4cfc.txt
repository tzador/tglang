% This program checks if a given graph is connected or not
% Input: graph represented as list of edges
% Output: true if connected, false otherwise

% Define a predicate to check if a given node is present in a given graph
% Arguments: node, graph
node_present(Node, Graph) :-
    member(Node, Graph).

% Define a predicate to check if two nodes are directly connected in a given graph
% Arguments: node1, node2, graph
connected(Node1, Node2, Graph) :-
    member(edge(Node1,Node2), Graph);
    member(edge(Node2,Node1), Graph).

% Define a predicate to find all nodes connected to a given node in a given graph
% Arguments: node, graph, list of nodes connected to the given node
connected_nodes(Node, Graph, Nodes) :-
    findall(Connected, connected(Node, Connected, Graph), Nodes).

% Define a predicate to recursively find all nodes connected to a given node
% Arguments: node, graph, list of all connected nodes
all_connected_nodes(Node, Graph, ConnectedNodes) :-
    connected_nodes(Node, Graph, Nodes),
    flatten(Nodes, FlattenedNodes),
    remove_duplicates(FlattenedNodes, UniqueNodes),
    member(ConnectedNode, UniqueNodes),
    all_connected_nodes(ConnectedNode, Graph, RestOfNodes),
    append([ConnectedNode], RestOfNodes, ConnectedNodes).

% Define a predicate to check if all nodes in a given graph are connected
% Arguments: graph
all_nodes_connected(Graph) :-
    findall(Node, node_present(Node, Graph), Nodes),
    flatten(Nodes, FlattenedNodes),
    remove_duplicates(FlattenedNodes, UniqueNodes),
    member(Node, UniqueNodes),
    all_connected_nodes(Node, Graph, ConnectedNodes),
    length(UniqueNodes, N),
    length(ConnectedNodes, M),
    N == M.

% Example:
% To check if the graph [(1,2), (2,3), (3,4), (4,5)] is connected, run the following query:
% ?- all_nodes_connected([edge(1,2), edge(2,3), edge(3,4), edge(4,5)]).
% Output: true