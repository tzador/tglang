% Knowledge base
likes(oliver, pizza).
likes(oliver, salad).
likes(oliver, ice_cream).
likes(julia, sushi).
likes(julia, steak).
likes(julia, wine).
likes(emma, spaghetti).
likes(emma, wine).

% Check if two people have a food preference in common
have_common_preference(Person1, Person2, Food) :-
    likes(Person1, Food), % Checks if Person1 likes the food
    likes(Person2, Food). % Checks if Person2 likes the food

% Check if two people are a food match
food_match(Person1, Person2, Food) :-
    have_common_preference(Person1, Person2, Food), % Checks if they have a common food preference
    not(likes(Person1, Food)), % Checks if Person1 does not like the food
    not(likes(Person2, Food)). % Checks if Person2 does not like the food

% Find all possible food matches between two people
find_food_matches(Person1, Person2, Matches) :-
    findall(Food, food_match(Person1, Person2, Food), Matches). % Finds all possible food matches and stores them in a list

% Query example:
?- find_food_matches(oliver, julia, Matches).
% Output:
% Matches = [sushi, steak, wine].