:- dynamic(notAllow/2). /* Declare a predicate as dynamic */
counter(X, Y) :-          /* Define a rule called "counter" with two arguments */
    X > 0,                /* Constrain the first argument to be greater than 0 */
    Y is X - 1,           /* Set the second argument to be one less than the first argument */
    notAllow(X,Y),        /* Check if the pair (X,Y) is marked as not allowed */
    !,                    /* Cut to prevent backtracking */
    counter(Y, Z).        /* Recursively call the "counter" rule with the new second argument */
counter(X, Y) :-          /* Define a second rule called "counter" with two arguments */
    X > 0,                /* Same constraints as first rule */
    Z is X - 1,           /* Set a new variable to be one less than the first argument */
    notAllow(Z, X),       /* Check if the pair (Z,X) is marked as not allowed */
    !,                    /* Cut to prevent backtracking */
    counter(Z, Y).        /* Recursively call the "counter" rule with the new first argument */

/* Example of marking a pair as not allowed */
notAllow(5,6). /* Declares (5,6) to be marked as not allowed */

/* Example query: What is the value of Y when X = 10 in the "counter" rule? */
counter(10, Y). /* This will return Y = 5 */