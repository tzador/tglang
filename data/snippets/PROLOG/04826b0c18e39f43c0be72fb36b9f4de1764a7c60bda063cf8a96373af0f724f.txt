% This is a prolog program that implements a simple bank account system with withdrawal and deposit functions

% Defining the database predicates

:-dynamic(account_balance/1).

% Function to initialize a new bank account with an initial balance of 0
initialize_account(AccountNumber) :-
    assert(account_balance(AccountNumber, 0)).

% Function to deposit a given amount into a specified account
deposit(AccountNumber, Amount) :-
    % Retrieving the current account balance
    account_balance(AccountNumber, Balance),

    % Calculating the new balance
    NewBalance is Balance + Amount,

    % Updating the account balance in the database
    retract(account_balance(AccountNumber, Balance)),
    assert(account_balance(AccountNumber, NewBalance)).

% Function to withdraw a given amount from a specified account
withdraw(AccountNumber, Amount) :-
    % Retrieving the current account balance
    account_balance(AccountNumber, Balance),

    % Checking if there are sufficient funds in the account
    Balance >= Amount,

    % Calculating the new balance
    NewBalance is Balance - Amount,

    % Updating the account balance in the database
    retract(account_balance(AccountNumber, Balance)),
    assert(account_balance(AccountNumber, NewBalance)).

% Function to check the current balance of a specified account
check_balance(AccountNumber) :-
    % Retrieving the current account balance
    account_balance(AccountNumber, Balance),

    % Printing the balance
    format('Current balance of account ~w is ~w', [AccountNumber, Balance]).

% Example usage:
% initialize_account(1234). % Initialize a new account with account number 1234
% deposit(1234, 500). % Deposit $500 into account number 1234
% withdraw(1234, 200). % Withdraw $200 from account number 1234
% check_balance(1234). % Check the current balance of account number 1234