% Define a predicate to check if a number is prime
% Assumes the number is within the range of 2 to 100
% Usage: is_prime(N)
is_prime(N) :-
    N > 1,
    N < 100,
    is_prime_helper(N, 2).
    
% Define a helper predicate to iterate through potential factors
% Usage: is_prime_helper(N, I)
is_prime_helper(N, I) :-
    I >= N, !. % Base case when I is equal to or greater than N
is_prime_helper(N, I) :-
    N mod I =\= 0, % Check if N is not divisible by I
    J is I + 1, % Increment I
    is_prime_helper(N, J). % Call helper predicate recursively
    
% Define a helper predicate to check if N is divisible by any number
% Other than itself and 1
% Usage: is_divisible(N, I)
is_divisible(N, I) :-
    I >= N, !. % Base case when I is equal to or greater than N
is_divisible(N, I) :-
    N mod I =:= 0. % Check if N is divisible by I
    
% Print results
% Using built-in predicate write
write("Enter a number: "),
read(N), % Read user input
is_prime(N), % Check if number is prime
write(N),
write(" is a prime number."). % Print result if true
write(N),
write(" is not a prime number."). % Print result if false