%%% PERSON DATABASE

person(alice, female, 24, programmer).
person(bob, male, 32, engineer).
person(carol, female, 27, doctor).
person(dan, male, 45, lawyer).

%% Define a predicate to check if a person is considered an adult that has reached the age of majority.

adult(Name) :-
  person(Name, _, Age, _),
  Age >= 18.

%% Define a rule to determine if a person is in the same profession as another person.

same_profession(Person1, Person2) :-
  person(Person1, _, _, Profession),
  person(Person2, _, _, Profession),
  Person1 \= Person2.

%% Define a rule to find all the people who are of a certain gender.

all_gender(Gender) :-
  person(Name, Gender, _, _),
  write(Name), nl,
  fail.

%% Define a rule to find the average age of people in the database.

average_age(Average) :-
  findall(Age, person(_, _, Age, _), Ages),
  length(Ages, NumPeople),
  sumlist(Ages, Total),
  Average is Total / NumPeople.

%% Define a rule to find the bachelors (unmarried) in the database.

bachelor(Name) :-
  person(Name, _, _, _),
  \+ married(Name).

%% Define a rule to check if a person is married.

married(Name) :-
  person(Name, _, _, _),
  married_to(Name, _).

%% Define a rule to find the profession of a person's spouse.

spouse_profession(Profession) :-
  married(Name1, Name2),
  person(Name1, _, _, Profession),
  person(Name2, _, _, _).

%% Define a dynamic variable to store information about married couples.

:- dynamic married_to/2.

%% Define a rule to add a new married couple to the database.

marry(Person1, Person2) :-
  \+ married_to(Person1, Person2),
  assertz(married_to(Person1, Person2)),
  assertz(married_to(Person2, Person1)).