% List Processing 
% This code snippet demonstrates how to manipulate lists in PROLOG

% Define a predicate to check if a list is empty
isEmpty([]).

% Define a predicate to add an element at the front of a list
insert_front(Element, List, [Element | List]).

% Define a predicate to add an element at the end of a list
insert_end(Element, [], [Element]).
insert_end(Element, [H | T], [H | Result]) :- insert_end(Element, T, Result).

% Define a predicate to remove all occurrences of an element from a list
remove_all(_, [], []). 
remove_all(X, [X | T], Result) :- remove_all(X, T, Result). 
remove_all(X, [H | T], [H| Result]) :- remove_all(X, T, Result).

% Define a predicate to check if an element is a member of a list
member(X, [X | _]).
member(X, [_ | T]) :- member(X, T).
 
% Define a predicate to find the length of a list
length([], 0).
length([_ | T], Len) :- length(T, Len1), Len is Len1 + 1.

% Define a predicate to find the last element of a list
last_element([X], X).
last_element([_ | T], Last) :- last_element(T, Last).

% Define a predicate to reverse a list
reverse_list([], []).
reverse_list([H | T], Result) :- reverse_list(T, Reverse), insert_end(H, Reverse, Result).

% Define a predicate to sort a list in ascending order
sort_list([], []).
sort_list([H | T], Sorted):- sort_list(T, SortedTail), insert_sorted(H, SortedTail, Sorted).

insert_sorted(Element, [], [Element]).
insert_sorted(Element, [H | T], [Element, H | T]) :- Element =< H.
insert_sorted(Element, [H | T], [H | Result]) :- Element > H, insert_sorted(Element, T, Result).

% Define a predicate to find the minimum element in a list
min_list([Min], Min).
min_list([H | T], Min) :- min_list(T, Min1), Min is min(H, Min1).