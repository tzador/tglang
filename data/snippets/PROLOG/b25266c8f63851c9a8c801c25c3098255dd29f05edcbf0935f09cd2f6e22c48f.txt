% This is a Prolog program that finds the shortest path between two nodes in a graph

% The 'edge' predicate defines the connections between nodes in the graph
% It takes in two nodes and the distance between them as parameters
edge(a, b, 5).
edge(a, c, 3).
edge(b, c, 2).
edge(b, d, 6).
edge(c, d, 7).

% The 'path' predicate finds the path between two nodes
% It takes in two nodes, a list to store the path and the total distance as parameters
path(X, Y, Path, Distance) :-
    % The base case: if the start and end nodes are the same, the path is empty and the distance is 0
    X = Y,
    Path = [],
    Distance = 0.

% If the start and end nodes are different, find all paths between them
% and recursively call the path predicate on each one
% The 'findall' predicate collects all solutions into a list
path(X, Y, Path, Distance) :-
    X \= Y,
    findall([Z|Path1], (edge(X, Z, Dist), path(Z, Y, Path1, Dist1), Distance is Dist + Dist1), Paths),
    % The 'sort' predicate sorts the paths by their total distance in ascending order
    sort(Paths, SortedPaths),
    % The 'member' predicate assigns the first path in the sorted list to the 'Path' parameter
    member([Path|Distance], SortedPaths).

% Example query: path(a, d, Path, Distance).
% Expected output: Path = [b, c, d], Distance = 8.