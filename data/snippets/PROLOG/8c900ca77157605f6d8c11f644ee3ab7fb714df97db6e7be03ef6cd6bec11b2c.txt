takeout(X,[X|L],L). % rule for taking out an element from a list

takeout(X,[F|L],[F|R]) :- takeout(X,L,R). % recursive rule for taking out an element from a list

% rule for checking if an element is a member of a list
member(X,[X|_]).
member(X,[_|L]) :- member(X,L).

% rule for merging two lists into a single list
merge([],L,L). 
merge([X|L1],L2,[X|L3]) :- merge(L1,L2,L3). 

% rule for sorting a list
% base case - an empty list is already sorted
sort([],[]). 

% recursive rule for sorting a list
sort([X|L],Sorted) :- 
    sort(L,R), % sort the remaining elements of the list
    takeout(X,Sorted,R). % take out the first element and add it to the sorted list