/* This is a program that calculates the factorial of a number using tail recursion */
factorial(0, 1).  % Base case for factorial of 0
factorial(N, Result) :- N > 0, % Recursive case for factorial of N
	N1 is N - 1,  % Decrement N by 1
	factorial(N1, SubResult), % Recursive call to calculate factorial of N1
	Result is N * SubResult.

/* This predicate checks if a number is prime using a helper predicate */
is_prime(2). % Base case, 2 is prime
is_prime(N) :- N > 2, helper(N, 2). % Recursive case, start checking divisors from 2

/* Helper predicate to check divisors */
helper(N, X) :- X is N - 1. % If X reaches N - 1 without finding a divisor, N is prime
helper(N, X) :- X > 1, % Recursively check divisors from X - 1
	N mod X =\= 0, % Continue if X is not a divisor of N
	Y is X - 1, % Decrement X by 1
	helper(N, Y). % Recursive call to check for other divisors

/* A predicate to find the sum of numbers in a list using tail recursion */
sum_list([], 0). % Base case for empty list, sum is 0
sum_list([Head|Tail], Sum) :-
	sum_list_helper(Tail, Head, Sum). % Call helper predicate with Tail and Head as starting values

/* Helper predicate to calculate sum recursively */
sum_list_helper([], N, N). % Base case for end of list, sum is total so far
sum_list_helper([Head|Tail], N, Sum) :-
	N1 is N + Head, % Add current Head to total so far
	sum_list_helper(Tail, N1, Sum). % Recursive call with updated total and Tail

/* A predicate to reverse a list using accumulator and tail recursion */
reverse_list(List, Result) :- reverse_list_helper(List, [], Result). % Call helper predicate with accumulator as empty list

/* Helper predicate with accumulator */
reverse_list_helper([], Result, Result). % Base case for empty list, Result is the accumulator
reverse_list_helper([Head|Tail], Acc, Result) :-
	reverse_list_helper(Tail, [Head|Acc], Result). % Recursive call with Head added to accumulator and Tail

/* A predicate to check if a list is a palindrome using accumulator and tail recursion */
palindrome(List) :- reverse_list(List, List). % A list is a palindrome if its reverse is the same as itself