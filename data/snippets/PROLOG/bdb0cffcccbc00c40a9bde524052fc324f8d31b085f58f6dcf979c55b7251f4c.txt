% Define base case for factorial predicate
factorial(0,1).

% Define recursive predicate for factorial calculation
factorial(N, Result) :-
  N > 0,
  N1 is N - 1,
  factorial(N1, SubResult), % Recursive call
  Result is N * SubResult.

% Predicate to calculate the nth fibonacci number
fibonacci(0, 0).
fibonacci(1, 1).
fibonacci(N, Result) :-
  N > 1, % Stop recursive calls when N is less than or equal to 1
  N1 is N - 1,
  N2 is N - 2,
  fibonacci(N1, Result1), % Recursive call for first number
  fibonacci(N2, Result2), % Recursive call for second number
  Result is Result1 + Result2. % Calculate sum of two previous numbers

% Define binary tree data structure
% A binary tree can either be empty or have a root node and two child nodes
% Each node has a value and left and right child nodes (can be empty)
binary_tree(empty).
binary_tree(node(Value, Left, Right)) :-
  binary_tree(Left),
  binary_tree(Right).

% Predicate to check if a given value is in a binary tree
contains_value(node(Value, _, _), Value) :- !. % Value is the root node value, stop checking the rest of the tree
contains_value(node(Value, Left, _), Target) :-
  Target < Value,
  contains_value(Left, Target).
contains_value(node(Value, _, Right), Target) :-
  Target > Value,
  contains_value(Right, Target).

% Predicate to insert a value into a binary tree
insert_value(empty, Value, node(Value, empty, empty)).
insert_value(node(Value, Left, Right), Value, node(Value, Left, Right)) :- !. % Value already exists in tree
insert_value(node(Value, Left, Right), InsertValue, node(Value, NewLeft, Right)) :-
  Value > InsertValue,
  insert_value(Left, InsertValue, NewLeft). % Insert value into left subtree
insert_value(node(Value, Left, Right), InsertValue, node(Value, Left, NewRight)) :-
  Value < InsertValue,
  insert_value(Right, InsertValue, NewRight). % Insert value into right subtree.

% Define predicate to reverse a list
reverse_list([], []).
reverse_list([Head|Tail], Reversed) :-
  reverse_list(Tail, ReversedTail), % Recursive call for tail of list
  append(ReversedTail, [Head], Reversed). % Append head to end of reversed tail

% Predicate to remove duplicates from a list
remove_duplicates([], []).
remove_duplicates([Head|Tail], Unique) :-
  member(Head, Tail), % Check if head element appears in rest of list
  remove_duplicates(Tail, Unique). % If it does, remove head element
remove_duplicates([Head|Tail], [Head|Unique]) :-
  not(member(Head, Tail)), % Check if head element does not appear in rest of list
  remove_duplicates(Tail, Unique). % If it doesn't, keep head element in unique list

% Predicate to check if two lists are equal
lists_equal([], []).
lists_equal([Head1|Tail1], [Head2|Tail2]) :-
  Head1 = Head2, % Check if head element of both lists are equal
  lists_equal(Tail1, Tail2). % Recursive call for tail elements

% Define accumulator predicate to sum all elements in a list
list_sum(List, Sum) :- list_sum_helper(List, 0, Sum).

% Recursive accumulator predicate
list_sum_helper([], Acc, Acc).
list_sum_helper([Head|Tail], Acc, Sum) :-
  NewAcc is Acc + Head, % Add head element to accumulator
  list_sum_helper(Tail, NewAcc, Sum). % Recursive call for tail elements