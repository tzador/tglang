% predicate to find the smallest element in a list
smallest_element([X], X). % X is the smallest element in a list with only one element
smallest_element([X,Y|Tail], X) :- % if X is smaller or equal to Y, it is the smallest element
    X =< Y,
    smallest_element([X|Tail], X).
smallest_element([X,Y|Tail], Y) :- % if Y is smaller than X, it is the smallest element
    X > Y,
    smallest_element([Y|Tail], Y).

% predicate to find the length of a list
list_length([], 0).
list_length([_|Tail], Len) :-
    list_length(Tail, TailLen), % recursively call list_length to get the length of the tail
    Len is TailLen + 1. % add 1 to the tail length to get total length

% predicate to generate a list of numbers from 1 to N
generate_list(N, List) :-
    generate_list_helper(N, [], List).

generate_list_helper(0, Temp, Temp). % base case: when N is 0, return the generated list
generate_list_helper(N, Temp, List) :-
    N > 0,
    NewTemp = [N|Temp], % add N to the temp list
    NewN is N - 1, % decrease N by 1 for next recursive call
    generate_list_helper(NewN, NewTemp, List). % recursively call generate_list_helper

% predicate to map a function to every element in a list
map(_, [], []). % base case: when list is empty, return empty list
map(Function, [Head|Tail], [Result|List]) :-
    call(Function, Head, Result), % apply function to the head element
    map(Function, Tail, List). % recursively call map to the rest of the list and append results

% example usage:
% ?- smallest_element([8,4,6,2], X).
% X = 2.
%
% ?- list_length([a,b,c,d,e], Len).
% Len = 5.
%
% ?- generate_list(5, List).
% List = [1, 2, 3, 4, 5].
%
% ?- map(double, [1,2,3,4,5], Doubles).
% Doubles = [2, 4, 6, 8, 10].
%
% double(Num, Double) :- Double is Num * 2. % a sample function used in map predicate