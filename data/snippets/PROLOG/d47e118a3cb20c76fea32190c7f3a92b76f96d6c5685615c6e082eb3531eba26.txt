% Predicates for manipulating lists
% `member` predicate checks if an element is a member of a list
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).

% `append` predicate appends two lists together
append([], L, L).
append([H|T], L, [H|Result]) :- append(T, L, Result).

% `reverse` predicate reverses a list
reverse([], []).
reverse([H|T], Result) :- reverse(T, Reversed), append(Reversed, [H], Result).

% `flatten` predicate flattens a nested list
flatten([], []).
flatten([L|T], Flat) :- flatten(L, FlatL), flatten(T, FlatT), append(FlatL, FlatT, Flat).
flatten(X, [X]).