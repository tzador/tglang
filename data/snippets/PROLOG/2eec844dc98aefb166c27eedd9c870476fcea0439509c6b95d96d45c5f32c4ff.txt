% Rules for finding the minimum element in a list

minimum([X], X). % Base case: if the list has only one element, it is the minimum

minimum([X,Y|Rest], X) :- % Recursive case: if the first element is smaller than the second,
    X =< Y, % Check if the first element is smaller than the second
    minimum([X|Rest], X). % Call the minimum function again with the first element

minimum([X,Y|Rest], Minimum) :- % Recursive case: if the second element is smaller than the first,
    X > Y, % Check if the first element is larger than the second
    minimum([Y|Rest], Minimum). % Call the minimum function again with the second element

% Example query:
% ?- minimum([5,2,7,1,3], Minimum).
% Output: Minimum = 1

% Explanation:
% This code snippet contains rules for finding the minimum element in a list. The first rule specifies the base case where if the list has only one element, it is automatically the minimum. 
% The next rule uses recursion to check if the first element of the list is smaller than the second element. If it is, the first element is set as the minimum and the function calls itself again with the rest of the list. 
% The final rule is similar to the second rule, but it handles the case where the second element is smaller than the first. This rule also uses recursion, but with the second element as the minimum. 
% An example query is then provided, where the minimum element of the list [5,2,7,1,3] is found and outputted. 
% The output is Minimum = 1, indicating that 1 is the minimum element in the list.