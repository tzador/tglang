/* Define a predicate that checks if a list is empty */
isEmpty(List) :-
    List = [].

/* Define a predicate that adds an element to the end of a list */
addElement(Element, [], [Element]).
addElement(Element, [Head|Tail], [Head|Result]) :-
    addElement(Element, Tail, Result).

/* Define a predicate that merges two lists */
mergeLists([], List, List).
mergeLists([Head|Tail], List2, [Head|Result]) :-
    mergeLists(Tail, List2, Result).

/* Define a predicate that checks if two lists are equal */
isEqual(List1, List2) :-
    mergeLists(List1, List2, Merged),
    subtract(Merged, Merged, Remainder),
    isEmpty(Remainder).

/* Define a list of numbers */
numbers([1, 2, 3, 4, 5]).

/* Define a predicate that multiplies each element of a list by a factor */
multiplyList([], _, []).
multiplyList([Head|Tail], Factor, [Result|Output]) :-
    Result is Head * Factor,
    multiplyList(Tail, Factor, Output).

/* Define a predicate that calculates the sum of a list of numbers */
sumList([], 0).
sumList([Head|Tail], Sum) :-
    sumList(Tail, Sum2),
    Sum is Head + Sum2.

/* Define a predicate that calculates the average of a list of numbers */
averageList(List, Average) :-
    sumList(List, Sum),
    length(List, Length),
    Average is Sum / Length.