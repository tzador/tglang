% This program defines the relations between entities in a knowledge base
parent(peter, john). % Peter is the parent of John
parent(anne, john). % Anne is also the parent of John
parent(john, sam). % John is the parent of Sam
parent(sam, susan). % Sam is the parent of Susan
parent(sam, nick). % Sam is also the parent of Nick

% Defining a recursive relation for ancestor
ancestor(X, Y) :- parent(X, Y). % X is an ancestor of Y if X is a parent of Y
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y). % X is an ancestor of Y if X is a parent of Z and Z is an ancestor of Y

% Defining a rule to check if X is a direct ancestor of Y
direct_ancestor(X, Y) :- parent(X, Y). % X is a direct ancestor of Y if X is a parent of Y

% Defining a rule to check if X is a sibling of Y
sibling(X, Y) :- parent(Z, X), parent(Z, Y), \+ (X=Y). % X and Y are siblings if they have the same parent but are not the same person

% Defining a rule to check if X is a cousin of Y
cousin(X, Y) :- parent(A, X), parent(B,Y), sibling(A,B). % X is a cousin of Y if their parents are siblings

% Defining a rule to check if X and Y have a common ancestor
common_ancestor(X, Y) :- ancestor(X, Z), ancestor(Y, Z), \+ (X=Y). % X and Y have a common ancestor if there exists a third entity Z that is an ancestor of both X and Y, but X and Y are not the same person