/* 
This predicate checks if a list is a palindrome, 
meaning it reads the same backwards as forwards.
*/

palindrome([]). % an empty list is a palindrome
palindrome([_]). % a list with one element is a palindrome

% to check if a list is a palindrome, we compare the first and last elements
% if they are the same, we then remove them and check the rest of the list
% this process is repeated until we reach the middle of the list

palindrome([First | Rest]) :-
    append(Mid, [Last], Rest), % split the list into first, middle, and last elements
    First = Last, % check if the first and last elements are the same
    palindrome(Mid). % recursively check if the middle of the list is a palindrome
   
% example:
% palindrome([a,b,c,b,a]) returns true because the list reads the same forwards and backwards