/* Defining a predicate to perform a depth-first search on a graph */
/* Arguments: start node, goal node, graph, path taken from start node to goal node */
dfs(Start, Goal, Graph, Path):-
    /* Check if start node is the same as goal node, if yes just return the path taken */
    Start == Goal, !, Path = [Start].

dfs(Start, Goal, Graph, Path):-
    /* Get the adjacent nodes of the current start node*/
    /* Filter out nodes that have already been visited to avoid loops */
    adjacent_nodes(Start, Graph, Adjacent),
    filter_visited(Adjacent, Path, Unvisited),
    /* Loop through the unvisited nodes to perform DFS on each node */
    member(Node, Unvisited),
    dfs(Node, Goal, Graph, NewPath),
    /* Adding the current start node to the beginning of the path taken */
    Path = [Start | NewPath].

/* Defining a predicate to filter out nodes that have already been visited */
/* Arguments: list of nodes, path taken from start node, unvisited nodes */
filter_visited([], _, []).

filter_visited([H|T], Path, Unvisited):-
    /* If the current node appeared in the path taken, it has been visited */
    member(H, Path), !,
    filter_visited(T, Path, Unvisited).

filter_visited([H|T], Path, Unvisited):-
    /* Recursively filter out nodes that have been visited */
    filter_visited(T, Path, Unvisited2),
    Unvisited = [H|Unvisited2].

/* Defining a predicate to get adjacent nodes of a given node */
/* Arguments: node, graph, adjacent nodes */
adjacent_nodes(Node, Graph, Adjacent):-
    /* Using findall to get all the nodes that are connected to the given node */
    findall(X, (member([Node, X], Graph) ; member([X, Node], Graph)), Adjacent).