% Define a predicate to check if a list contains a specific element
list_contains(List,[X|_]) :-   % base case: if list starts with X, element is found
    List = [X|_].
list_contains(List,[_|T]) :-    % recursive case: keep searching in the tail of the list
    list_contains(List,T).

% Define a predicate to get the length of a list
list_length([], 0).             % base case: empty list has length of 0
list_length([_|T], Length) :-   % recursive case: increment length by 1 and search in tail
    list_length(T, Temp),
    Length is Temp + 1.

% Define a predicate to merge two lists
merge_lists([], L, L).          % base case: if first list is empty, result is second list
merge_lists([H|T], L, [H|Merged]) :-  % recursive case: add head of first list to result list
    merge_lists(T, L, Merged).         % and continue merging with tail

% Define a predicate to remove duplicates from a list
remove_duplicates([], []).         % base case: empty list has no duplicates
remove_duplicates([H|T], Merged) :-   % recursive case: check if head is already in merged list
    list_contains(Merged, H),         % if not, add to merged list and continue with tail
    remove_duplicates(T, Merged).
remove_duplicates([H|T], [H|Merged]) :- % if head is already in merged list, skip and continue
    remove_duplicates(T, Merged).