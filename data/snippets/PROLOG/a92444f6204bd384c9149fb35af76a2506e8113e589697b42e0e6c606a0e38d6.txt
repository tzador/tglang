/* This is a predicate that will check if a list is a concatenated version of two other lists. */
checkConcatenated(List, List1, List2) :-
    append(List1, List2, Temp),  /* Appends List1 and List2 together to check against List. */
    append(Temp, List3, List), /* Appends Temp and List3 together to check if it equals List. */
    length(List1, N), /* Gets the length of List1. */
    length(List2, M), /* Gets the length of List2. */
    length(List3, L), /* Gets the length of List3. */
    N + M =:= L. /* Checks if the length of List1 and List2 equals the length of List3. */
    
/* Example query: */
/* ?- checkConcatenated([1, 2, 3, 4, 5], [1, 2, 3], [4, 5]) */
/* Output: true */

/* Example query: */
/* ?- checkConcatenated([1, 2, 3, 4, 5], [1, 2, 3], [4, 6]) */
/* Output: false */