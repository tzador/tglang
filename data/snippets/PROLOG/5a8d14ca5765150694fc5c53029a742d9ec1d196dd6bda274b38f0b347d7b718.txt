% This is a Prolog program that creates and manipulates a
% binary tree data structure.

% Define a binary tree with three predicates
binary_tree(empty).
binary_tree(node(_, empty, empty)) :- !.
binary_tree(node(_, Left, Right)) :- 
    binary_tree(Left), binary_tree(Right).

% Create a binary tree with the following structure:
%
%    1
%   / \
%  2   3
%
tree1(node(1, node(2, empty, empty), node(3, empty, empty))).

% Define a predicate to check if a given tree is empty
isEmpty(empty).

% Define a predicate to insert an element into a binary tree
insert(Element, empty, node(Element, empty, empty)) :- !.
insert(Element, node(Value, Left, Right), node(Value, NewLeft, Right)) :-
    Element =< Value, !,
    insert(Element, Left, NewLeft).
insert(Element, node(Value, Left, Right), node(Value, Left, NewRight)) :-
    insert(Element, Right, NewRight).

% Define a predicate to remove an element from a binary tree
remove(Element, node(Element, empty, empty), empty) :- !.
remove(Element, node(Element, Left, empty), Left) :- !.
remove(Element, node(Element, empty, Right), Right) :- !.
remove(Element, node(Element, Left, Right), node(Min, Left, NewRight)) :-
    findMin(Element, Right, Min, NewRight).
remove(Element, node(Value, Left, Right), node(Value, NewLeft, Right)) :-
    Element < Value, !,
    remove(Element, Left, NewLeft).
remove(Element, node(Value, Left, Right), node(Value, Left, NewRight)) :-
    remove(Element, Right, NewRight).

% Define a predicate to find the minimum value in a binary tree
findMin(_, empty, _, empty) :- !.
findMin(_, node(Min, empty, _), Min, empty) :- !.
findMin(Element, node(Value, Left, Right), Min, node(Value, Left, NewRight)) :-
    findMin(Element, Right, Min, NewRight).

% Query to create a new tree and add new elements
insert(4, tree1, NewTree),
insert(5, NewTree, FinalTree).

% Query to remove an element from the existing tree
remove(3, tree1, NewTree).