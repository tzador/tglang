% exp_tree - predicate to evaluate an arithmetic expression tree
% Params:
%   +Tree: expression tree to be evaluated
%   -Result: result of the expression tree
exp_tree(Tree, Result) :-
    atom(Tree), % if tree is an atom, return its value
    atom_number(Tree, Result).
exp_tree(Tree, Result) :-
    Tree =.. [Operator, Left, Right], % if tree is a compound term
    exp_tree(Left, LeftResult), % recursively evaluate the left subtree
    exp_tree(Right, RightResult), % recursively evaluate the right subtree
    evaluate(Operator, LeftResult, RightResult, Result). % apply the operator to the results
% evaluate - predicate to perform the desired operation on two numbers
% Params:
%   +Operator: operator to be applied 
%   +LeftResult: result of evaluating the left subtree 
%   +RightResult: result of evaluating the right subtree 
%   -Result: final result of applying the operator to the two subtrees
evaluate(Operator, LeftResult, RightResult, Result) :-
    Operator = '+', % add the two numbers
    Result is LeftResult + RightResult.
evaluate(Operator, LeftResult, RightResult, Result) :-
    Operator = '-', % subtract the second number from the first
    Result is LeftResult - RightResult.
evaluate(Operator, LeftResult, RightResult, Result) :-
    Operator = '*', % multiply the two numbers
    Result is LeftResult * RightResult.
evaluate(Operator, LeftResult, RightResult, Result) :-
    Operator = '/', % divide the first number by the second
    Result is LeftResult / RightResult.