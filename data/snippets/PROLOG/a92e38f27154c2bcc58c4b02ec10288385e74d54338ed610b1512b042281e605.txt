% This is a Prolog program that implements the game Tic-Tac-Toe
% It allows for a two player game where the players take turns placing their symbol (X or O) on a 3x3 grid
% The first to get three in a row, column or diagonal wins

% Predicates to define the grid and its contents
grid([[_,_,_],
      [_,_,_],
      [_,_,_]]).

% Display the grid with new lines between each row
displayGrid([[A1,A2,A3],
             [B1,B2,B3],
             [C1,C2,C3]]) :- write('|'),displaySymbol(A1),write('|'),displaySymbol(A2),write('|'),displaySymbol(A3),nl,
                              write('|'),displaySymbol(B1),write('|'),displaySymbol(B2),write('|'),displaySymbol(B3),nl,
                              write('|'),displaySymbol(C1),write('|'),displaySymbol(C2),write('|'),displaySymbol(C3),nl.

% Predicates to display X or O for the player's symbol
displaySymbol(X) :- var(X), write(' ').
displaySymbol(X) :- write(X).

% Predicate to check if a winner has been found
winner(Grid, Player) :- threeInRow(Grid, Player), !.
winner(Grid, Player) :- threeInColumn(Grid, Player), !.
winner(Grid, Player) :- threeInDiagonal(Grid, Player), !.

% Predicate to check if there are three in a row, horizontally
threeInRow([[X,X,X],
            [_,_,_],
            [_,_,_]]) :- var(X).

threeInRow([[_,_,_],
            [X,X,X],
            [_,_,_]]) :- var(X).

threeInRow([[_,_,_],
            [_,_,_],
            [X,X,X]]) :- var(X).

% Predicate to check if there are three in a column, vertically
threeInColumn([[X,_,_],
               [X,_,_],
               [X,_,_]]) :- var(X).

threeInColumn([[_,X,_],
               [_,X,_],
               [_,X,_]]) :- var(X).

threeInColumn([[_,_,X],
               [_,_,X],
               [_,_,X]]) :- var(X).

% Predicate to check if there are three in a diagonal
threeInDiagonal([[X,_,_],
                 [_,X,_],
                 [_,_,X]]) :- var(X).

threeInDiagonal([[_,_,X],
                 [_,X,_],
                 [X,_,_]]) :- var(X).

% Predicate to check if the game is a draw
drawGrid(Grid) :- \+ member(_, Grid).

% Predicates to handle the turns for each player
playerInput(Grid, Player) :- write('Player '),write(Player),write('\'s turn:'),nl,
                             write('Enter the row (A, B, or C): '),read(Row),
                             write('Enter the column (1, 2, or 3): '),read(Column),nl,
                             checkInput(Grid, Row, Column, Player).

checkInput(Grid, Row, Column, Player) :- char_code(Row, Code), Code >= 65, Code =< 67,
                                         between(1,3,Column),
                                         convertInput(Row, Column, Grid, Player).

% Predicate to convert the player's input to the prolog grid notation
convertInput(A, 1, [[_,B2,B3],
                    [C1,C2,C3],
                    [D1,D2,D3]], P) :- char_code(A, Code), NewA is Code - 64, P = B1, !.
convertInput(A, 2, [[B1,_,B3],
                    [C1,C2,C3],
                    [D1,D2,D3]], P) :- char_code(A, Code), NewA is Code - 64, P = B2, !.
convertInput(A, 3, [[B1,B2,_],
                    [C1,C2,C3],
                    [D1,D2,D3]], P) :- char_code(A, Code), NewA is Code - 64, P = B3, !.
convertInput(B, 1, [[A1,_,A3],
                    [_,B2,B3],
                    [D1,D2,D3]], P) :- char_code(B, Code), NewB is Code - 64, P = C1, !.
convertInput(B, 2, [[A1,A2,A3],
                    [C1,_,C3],
                    [D1,D2,D3]], P) :- char_code(B, Code), NewB is Code - 64, P = C2, !.
convertInput(B, 3, [[A1,A2,A3],
                    [C1,C2,_],
                    [D1,D2,D3]], P) :- char_code(B, Code), NewB is Code - 64, P = C3, !.
convertInput(C, 1, [[A1,A2,A3],
                    [B1,B2,B3],
                    [_,C2,C3]], P) :- char_code(C, Code), NewC is Code - 64, P = D1, !.
convertInput(C, 2, [[A1,A2,A3],
                    [B1,B2,B3],
                    [D1,_,D3]], P) :- char_code(C, Code), NewC is Code - 64, P = D2, !.
convertInput(C, 3, [[A1,A2,A3],
                    [B1,B2,B3],
                    [D1,D2,_]], P) :- char_code(C, Code), NewC is Code - 64, P = D3, !.

% Predicate to start the game and alternate between players
playGame(Grid, Player) :- repeat,
                          displayGrid(Grid),
                          playerInput(Grid, Player),
                          winner(Grid, Player),
                          write('Player '),write(Player),write(' wins!'),nl,
                          displayGrid(Grid),!.

% Start the game with an empty grid and have player 1 (X) go first
startGame :- grid(Grid),playGame(Grid, 'X').