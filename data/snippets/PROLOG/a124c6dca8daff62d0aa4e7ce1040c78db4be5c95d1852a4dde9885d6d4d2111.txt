%% Define a predicate to check if a list contains a specific element
member(Element, [Element|_]). % If the first element of the list is the desired element, return true
member(Element, [_|List]) :- member(Element, List). % Else, check the rest of the list
 
%% Define a predicate to find the length of a list
list_length([], 0). % An empty list has length 0
list_length([_|Tail], Length) :- list_length(Tail, TailLength), Length is TailLength + 1. % Count the number of elements in the tail of the list
 
%% Define a predicate to remove all duplicates from a list
remove_dups([], []). % An empty list has no duplicates
remove_dups([Head|Tail], NewList) :- member(Head, Tail), !, remove_dups(Tail, NewList). % If the head is already in the tail, recursively remove it
remove_dups([Head|Tail], [Head|NewList]) :- remove_dups(Tail, NewList). % Otherwise, add the head to the new list and continue recursively
 
%% Define a predicate to split a list into two halves
split_list(List, Half1, Half2) :- list_length(List, Length), HalfLength is Length/2, split(List, HalfLength, Half1, Half2). % Calculate the length and half length of the list, then call the split function
split(List, Index, Half1, Half2) :- list_length(Half1, Index), append(Half1, Half2, List). % Once the desired index is reached, append the two halves to the original list
split(List, Index, [Head|Half1], Half2) :- Index > 0, NewIndex is Index-1, split(List, NewIndex, Half1, Half2). % Continuously append elements to the first half until the desired index is reached