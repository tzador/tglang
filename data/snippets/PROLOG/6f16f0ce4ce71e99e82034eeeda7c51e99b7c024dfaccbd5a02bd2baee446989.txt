%% A knowledge base for family relationships in Prolog

parent(john, sarah).     % John is the parent of Sarah
parent(john, james).     % John is also the parent of James
parent(sarah, emma).     % Sarah is the parent of Emma
parent(james, lucy).     % James is the parent of Lucy
parent(emma, david).     % Emma is the parent of David
parent(lucy, michael).   % Lucy is the parent of Michael

female(sarah).          % Sarah is a female
female(emma).           % Emma is also a female
female(lucy).           % Lucy is also a female

male(john).             % John is a male
male(james).            % James is a male
male(david).            % David is a male
male(michael).          % Michael is a male

%% Define a rule for grandfather
grandfather(GP, GC) :- parent(GP, X), parent(X, GC), male(GP).

%% Define a rule for grandmother
grandmother(GM, GC) :- parent(GM, X), parent(X, GC), female(GM).

%% Define a rule for brother
brother(B, S) :- parent(P, B), parent(P, S), male(B), different(B, S).

%% Define a rule for sister
sister(S, B) :- parent(P, S), parent(P, B), female(S), different(S, B).

%% Define a rule for uncle
uncle(U, N) :- parent(P, N), brother(U, P).

%% Define a rule for aunt
aunt(A, N) :- parent(P, N), sister(A, P).

%% Define a rule for cousin
cousin(C1, C2) :- parent(P1, C1), parent(P2, C2), different(P1, P2), sibling(P1, P2).

%% Define a rule for ancestor
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(Z, Y), ancestor(X, Z).

%% Define a rule for descendant
descendant(X, Y) :- parent(Y, X).
descendant(X, Y) :- parent(Y, Z), descendant(X, Z).

different(X, Y) :- not(X=Y).    % Define a rule to check if two terms are different
sibling(X, Y) :- parent(P, X), parent(P, Y), different(X, Y).     % Define a rule for siblings