/* This program is a simple implementation of a family tree in PROLOG */

/* Define male and female predicates */
male(bob).
male(john).
male(mark).
male(luke).
female(sarah).
female(anne).
female(lisa).
female(emily).

/* Define parent-child relationships */
parent(bob, john).
parent(bob, sarah).
parent(mark, luke).
parent(mark, anne).
parent(luke, emily).
parent(anne, emily).

/* Define sibling and half-sibling relationships */
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.
halfsibling(X, Y) :- parent(Z, X), parent(Z, Y), not(sibling(X, Y)), X \= Y.

/* Define grandparent and grandchild relationships */
grandparent(X, Z) :- parent(X, Y), parent(Y, Z).
grandchild(Z, X) :- grandparent(X, Z).

/* Define aunt/uncle and niece/nephew relationships */
auntuncle(X, Y) :- parent(Z, X), sibling(Z, Y).
nieceNephew(X, Y) :- auntuncle(Y, X).

/* Define cousin relationship */
cousin(X, Y) :- parent(Z, X), parent(W, Y), sibling(Z, W), X \= Y.

/* Define ancestor and descendant relationships */
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(Z, Y), ancestor(X, Z).
descendant(X, Y) :- ancestor(Y, X).

/* Example queries and their expected outputs */
/*
?- grandparent(bob, emily).
true.

?- auntuncle(luke, sarah).
true.

?- cousin(emily, lisa).
true.

?- ancestor(mark, emily).
true.

?- descendant(anne, bob).
false.
*/