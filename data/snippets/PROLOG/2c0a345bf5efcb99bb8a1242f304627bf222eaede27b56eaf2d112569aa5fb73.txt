% This is a code snippet in PROLOG that implements a depth-first search algorithm

% Define edge rules
edge(a, b).
edge(b, c).
edge(b, e).
edge(c, d).
edge(d, e).

% Define predicate for depth-first search
% Inputs: Start node, End node, Visited nodes
% Output: List of nodes representing the path

dfs(Start, End, Path):- dfs(Start, End, [Start], Path).

dfs(End, End, _, [End]).
dfs(Start, End, Visited, [Start|Path]):- 
    edge(Start, X),
    \+ member(X, Visited), % Check if node has been visited before
    dfs(X, End, [X|Visited], Path). % Recursively call dfs with updated visited list

% Example usage:
% ?- dfs(a, d, Path).
% Output: Path = [a, b, c, d]