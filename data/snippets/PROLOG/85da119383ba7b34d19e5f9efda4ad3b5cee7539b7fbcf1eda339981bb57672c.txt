/**This code snippet defines a predicate that checks if a list contains a prime number.**/

/**The predicate takes in two parameters, a list and a result, and checks if the head of the list is a prime number or not. If it is, the result is set to true and the predicate stops. If not, the predicate recursively calls itself with the tail of the list.**/

/**The predicate also takes into account edge cases, such as an empty list and lists with a length of 1.**/

is_prime([H|_], true):-     /**if the head of the list is a prime number, set the result to true**/
    is_prime_number(H).

is_prime([H|T], Result):-   /**for a list with more than one element**/
    is_prime_number(H),     /**check if the head is a prime number**/
    is_prime(T, Result).    /**then recursively check the tail**/

is_prime([], false).        /**if the list is empty, set the result to false**/

is_prime([_], false).       /**if the list has only one element, set the result to false**/

/**This helper predicate checks if a number is a prime number by looping through all the numbers from 2 to the square root of the number and checking if there is any number that can divide it evenly. If so, the number is not prime and the helper predicate fails.**/

is_prime_number(2).         /**2 is a prime number**/

is_prime_number(N):-
    N > 2,                  /**for numbers greater than 2**/
    N mod 2 =\= 0,          /**check if the number is not divisible by 2**/
    Limit is ceiling(sqrt(N)), /**limit the loop to the square root of the number**/
    is_prime_helper(3, N, Limit). /**call helper predicate with a starting value of 3**/

is_prime_helper(N, N, _):-  /**helper predicate succeeds if the starting value equals the original number**/
    !.
is_prime_helper(I, N, Limit):-  /**loop through all numbers from 3 to the limit**/
    I =< Limit,
    N mod I =\= 0,          /**if the number is not divisible by the current value,**/
    Next is I + 2,          /**increment the value by 2 (to skip even numbers)**/
    is_prime_helper(Next, N, Limit). /**and recursively call the helper predicate to check the next number**/

/**To use the predicate, simply pass in a list and a result variable to store the output. Example query: is_prime([11, 6, 7], Result). Result will be set to true, since 11 is a prime number in the list.**/

is_prime([11, 6, 7], Result). 

/**Output: 
true
**/