parent(alex, emily). % defines a fact that Alex is the parent of Emily
parent(alex, john).
parent(emily, lila).
parent(john, luke).
parent(lila, joseph).
parent(david, alex).
parent(mary, alex).
grandparent(X, Y) :- parent(X, Z), parent(Z, Y). % defines a rule that X is the grandparent of Y if there is a Z that is a parent of both X and Y
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y. % defines a rule that X and Y are siblings if they share a common parent, but are not the same entity
cousin(X, Y) :- parent(A, X), parent(B, Y), sibling(A, B). % defines a rule that X and Y are cousins if their parents are siblings
ancestor(X, Y) :- parent(X, Y). % defines a rule that X is an ancestor of Y if X is a direct parent of Y
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y). % defines a rule that X is an ancestor of Y if X is a parent of one of Y's ancestors.
related(X, Y) :- ancestor(X, Y). % defines a rule that X and Y are related if X is an ancestor of Y
related(X, Y) :- ancestor(Y, X). % defines a rule that X and Y are related if Y is an ancestor of X
related(X, Y) :- cousin(X, Y). % defines a rule that X and Y are related if they are cousins
related(X, Y) :- cousin(Y, X). % defines a rule that X and Y are related if they are cousins
related(X, Y) :- sibling(X, Y). % defines a rule that X and Y are related if they are siblings
related(X, Y) :- sibling(Y, X). % defines a rule that X and Y are related if they are siblings
related(X, Y) :- grandparent(X, Y). % defines a rule that X and Y are related if X is a grandparent of Y
related(X, Y) :- grandparent(Y, X). % defines a rule that X and Y are related if Y is a grandparent of X
?- related(alex, joseph). % queries if Alex is related to Joseph, which should return true.

parent(alex, emily).
parent(alex, john).
parent(john, luke).
parent(luke, kate).
parent(mary, alex).
parent(ben, alex).
parent(jack, ben).
grandparent(X, Y) :- parent(X, Z), parent(Z, Y). % defines a rule that X is the grandparent of Y if there is a Z that is a parent of both X and Y
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y. % defines a rule that X and Y are siblings if they share a common parent, but are not the same entity
cousin(X, Y) :- parent(A, X), parent(B, Y), sibling(A, B). % defines a rule that X and Y are cousins if their parents are siblings
ancestor(X, Y) :- parent(X, Y). % defines a rule that X is an ancestor of Y if X is a direct parent of Y
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y). % defines a rule that X is an ancestor of Y if X is a parent of one of Y's ancestors.
related(X, Y) :- ancestor(X, Y). % defines a rule that X and Y are related if X is an ancestor of Y
related(X, Y) :- ancestor(Y, X). % defines a rule that X and Y are related if Y is an ancestor of X
related(X, Y) :- cousin(X, Y). % defines a rule that X and Y are related if they are cousins
related(X, Y) :- cousin(Y, X). % defines a rule that X and Y are related if they are cousins
related(X, Y) :- sibling(X, Y). % defines a rule that X and Y are related if they are siblings
related(X, Y) :- sibling(Y, X). % defines a rule that X and Y are related if they are siblings
related(X, Y) :- grandparent(X, Y). % defines a rule that X and Y are related if X is a grandparent of Y
related(X, Y) :- grandparent(Y, X). % defines a rule that X and Y are related if Y is a grandparent of X
?- related(alex, kate). % queries if Alex is related to Kate, which should return true.