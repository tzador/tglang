% This program uses PROLOG's built-in predicates to solve a Sudoku puzzle.
% Sudoku is a number-placement puzzle where the objective is to fill a 9x9 grid with numbers
% so that each row, column, and 3x3 sub-grid contains all the digits from 1 to 9.

% Define the grid as a list of lists, where empty cells are represented by a variable.
Grid = [[_, _, _, _, _, _, _, _, _],
        [_, _, _, _, _, 3, _, 8, 5],
        [_, _, 1, _, 2, _, _, _, _],
        [_, _, _, 5, _, 7, _, _, _],
        [_, _, 4, _, _, _, 1, _, _],
        [_, 9, _, _, _, _,_, _, _],
        [5, _, _, _, _, _, _, 7, 3],
        [_, _, 2, _, 1, _, _, _, _],
        [_, _, _, _, 4, _, _, _, 9]].

% Define the domain of numbers that can be placed in each cell (1 to 9).
Numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9].

% Use built-in predicate 'member' to check if each cell contains a number from the domain.
% The first argument is the variable that represents the cell value, the second argument is the list of possible values.
% The built-in predicate 'member' will unify the variable with a value from the list if it exists.
% If there is no value that satisfies the predicate, backtracking will occur until a solution is found.
% This ensures all cells are filled with numbers from the domain.
member(CellValue, Numbers).

% Define predicate 'row_constraint' to check if each row contains unique numbers.
% The first argument is the list of row values, the second argument is the list of unique row values.
row_constraint([], []).
row_constraint([CellValue|Rest], [CellValue|UniqueRest]) :-
    % Use built-in predicate 'member' to check if the value is not already in the list of unique row values.
    not(member(CellValue, UniqueRest)),
    row_constraint(Rest, UniqueRest).

% Define predicate 'column_constraint' to check if each column contains unique numbers.
% The first argument is the grid, the second argument is the list of unique column values.
column_constraint(Grid, UniqueValues) :-
    % Use built-in predicate 'transpose' to get the columns of the grid.
    transpose(Grid, Columns),
    % Use 'maplist' to apply 'row_constraint' predicate to each column and get the list of unique column values.
    maplist(row_constraint, Columns, UniqueValues).

% Define predicate 'subgrid_constraint' to check if each 3x3 sub-grid contains unique numbers.
% The first argument is the list of sub-grid values, the second argument is the list of unique sub-grid values.
subgrid_constraint([], []).
subgrid_constraint(Subgrid, UniqueValues) :-
    % Use built-in predicate 'flatten' to flatten the list of lists into a single list.
    flatten(Subgrid, Flat),
    % Use 'maplist' to apply 'row_constraint' predicate to each 3x3 sub-grid and get the list of unique sub-grid values.
    maplist(row_constraint, Flat, UniqueValues).

% Define predicate 'sudoku' to solve the puzzle.
% The first argument is the grid, the second argument will be the solution grid.
sudoku(Grid, Solution) :-
    % Define the domain of numbers to be placed in each cell.
    Numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9],
    % Define the constraints for rows, columns, and sub-grids.
    row_constraint(Grid, Solution),
    column_constraint(Grid, Solution),
    subgrid_constraint(Grid, Solution).