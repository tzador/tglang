% This is a code snippet in PROLOG
% It represents a family tree
% Here we define the relationships between individuals in a family

% We start by defining facts about individuals
female(mary).
female(sue).
male(john).
male(tom).
male(bob).

% We define parent-child relationships
parent(mary, john).
parent(mary, tom).
parent(sue, john).
parent(sue, tom).
parent(tom, bob).

% We define sibling relationships
sibling(john, tom).
sibling(bob, tom).
sibling(bob, john).

% We define grandparent-grandchild relationships
grandparent(mary, bob).
grandparent(sue, bob).

% We can then use queries to find relationships between individuals
% For example, to find the siblings of bob, we can use the query:
% `sibling(bob, X)` where X would be the variable representing the siblings.
% This would return john and tom as siblings of bob.

% We can also use logical operators to define more complex relationships
% Here we define uncle and aunt relationships using the parent relationship
uncle(X, Y) :-
    male(X),
    sibling(X, Z),
    parent(Z, Y).
aunt(X, Y) :-
    female(X),
    sibling(X, Z),
    parent(Z, Y).

% We can then use the `uncle` and `aunt` predicates to find the uncles and aunts of bob
% For example, to find bobs' uncles, we can use the query:
% `uncle(X, bob)`, which would return tom as bob's uncle.

% We can also use recursion to define more complex relationships
% Here we define the ancestor relationship using the parent relationship
% It recursively finds ancestors of an individual
ancestor(X, Y) :-
    parent(X, Y).
ancestor(X, Y) :-
    parent(X, Z),
    ancestor(Z, Y).

% We can then use the `ancestor` predicate to find the ancestors of bob
% For example, to find bobs' ancestors, we can use the query:
% `ancestor(X, bob)` which would return mary, sue, and tom as bobs' ancestors.