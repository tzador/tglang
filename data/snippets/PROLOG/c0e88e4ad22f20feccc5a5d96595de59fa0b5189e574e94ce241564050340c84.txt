`
/* --- Example Program: Recursive Backtracking --- */

/* --- Defining the Problem --- */
/* We first need to define the problem by defining the allowed moves and the initial state of the problem. In this example, we will use the problem of finding a path through a maze. */

maze_size(5,5).
initial_position(1,1).
final_position(5,5).

/* Here, we define the size of the maze, the initial position, and the final position. */

allowed_moves([
    [1,0], % Move up
    [0,1], % Move right
    [-1,0], % Move down
    [0,-1]  % Move left
]).

/* This list contains all possible moves that a robot can make. In this case, each move is represented by a pair of numbers indicating the change in coordinates. */

/* --- Defining a Solution --- */
solveMaze(Path) :-
    initial_position(X,Y),
    solve(X,Y,Path).

solve(X,Y,Path) :-
    final_position(X,Y), 
    Path = [].
/* First, we define a predicate called solveMaze that takes in a variable Path as an argument. Next, we define the predicate solve that takes in the current coordinates as arguments and checks if it matches the final position. If it does, then we return an empty path. */

solve(X,Y,Path) :-
    maze_size(M,N),
    X>=1, X=<M,
    Y>=1, Y=<N,
    \+ member([X,Y],Path),
    append(Path,[[X,Y]],NewPath),
    allowed_moves(Moves),
    member([Xmove,Ymove],Moves),
    NewX is X + Xmove,
    NewY is Y + Ymove,
    solve(NewX,NewY,NewPath).
/* This recursive predicate checks if the current position is within the boundaries of the maze, and if it is not already in the path. Next, it appends the current position to the path and then checks all possible moves. For each move, it calculates the new coordinates and recursively calls the solve predicate with these new coordinates and the updated path. */

/* --- Running the Program --- */
/*
?- solveMaze(Path).
Path = [[1,1], [2,1], [3,1], [3,2], [3,3], [3,4], [4,4], [5,4], [5,5]]
*/
/* To run the program, we simply call the solveMaze predicate with a variable for the Path. The program will output the shortest path from the initial position to the final position. */
`