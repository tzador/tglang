%% Define predicate "path" that takes in two arguments: Start and End
path(Start, End) :-
    %% Check if Start is equal to End
    Start = End,
    %% If true, then print "Same location"
    print("Same location").
    
%% If Start is not equal to End, check if there is a connection between them
% This can be done using another predicate "connected"
path(Start, End) :-
    %% Call predicate "connected" with arguments Start and End
    connected(Start, End),
    %% If connected, then print "Connected"
    print("Connected"),
    %% Now call the predicate again with End as new Start and check if End is equal to End
    path(End, End).

%% Predicate "connected" takes in two arguments: A and B
connected(A, B) :-
    %% Define list of connected locations
    connected_locations([a, b, c, d, e, f]),
    %% Check if A is a member of the connected locations list
    member(A, connected_locations),
    %% Check if B is a member of the connected locations list
    member(B, connected_locations),
    %% Now define a map with all the connections between locations
    connected_map([
        [a, b],
        [b, c],
        [c, d],
        [d, e],
        [e, f]
    ]),
    %% Use member predicate to check if there is a connection between A and B in the map
    member([A, B], connected_map).