% This is a Prolog program that creates a family tree
% of the English royal family from 1900 till now

% Define the parent-child relationship
parent(queen_mary, king_george).
parent(king_george, queen_elizabeth).
parent(king_george, princess_margaret).
parent(queen_elizabeth, prince_charles).
parent(queen_elizabeth, princess_anne).
parent(queen_elizabeth, prince_andrew).
parent(queen_elizabeth, prince_edward).
parent(prince_charles, prince_william).
parent(prince_charles, prince_harry).

% Define the gender of each person
female(queen_mary).
female(queen_elizabeth).
female(princess_margaret).
female(princess_anne).

male(king_george).
male(prince_charles).
male(prince_andrew).
male(prince_edward).
male(prince_william).
male(prince_harry).

% Define the married relationship
married(queen_mary, king_george).
married(king_george, queen_mary).
married(queen_elizabeth, prince_philip).
married(prince_philip, queen_elizabeth).
married(prince_charles, lady_diana).
married(lady_diana, prince_charles).
married(prince_william, kate_middleton).
married(kate_middleton, prince_william).

% Define the rules for determining the ancestors and descendants of a person
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).
descendant(X, Y) :- parent(Y, X).
descendant(X, Y) :- parent(Z, X), descendant(Y, Z).

% Define the rules for determining the siblings of a person
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.
brother(X, Y) :- sibling(X, Y), male(X).
sister(X, Y) :- sibling(X, Y), female(X).

% Define the rules for determining the uncles and aunts of a person
uncle(X, Y) :- parent(Z, Y), brother(X, Z).
aunt(X, Y) :- parent(Z, Y), sister(X, Z).

% Define the rules for determining the cousins of a person
first_cousin(X, Y) :- parent(Z, X), parent(W, Y), sibling(Z, W).
second_cousin(X, Y) :- parent(Z, X), parent(W, Y), first_cousin(Z, W).

% Define the rules for determining the in-laws of a person
father_in_law(X, Y) :- married(Y, Z), parent(X, Z).
mother_in_law(X, Y) :- married(Y, Z), parent(X, Z).
brother_in_law(X, Y) :- married(Y, Z), sibling(X, Z).
sister_in_law(X, Y) :- married(Y, Z), sibling(X, Z).

% Define the rules for determining the royal titles of a person
king(X) :- male(X), parent(Y, X), queen(Y).
queen(X) :- female(X), parent(Y, X), queen(Y).
prince(X) :- male(X), parent(Y, X), king(Y).
princess(X) :- female(X), parent(Y, X), king(Y).

% Define the rules for determining the order of succession to the British throne
order_of_succession(X, [X]) :- \+ parent(X, _).
order_of_succession(X, [Y|Tail]) :- parent(Y, X), order_of_succession(X, Tail).

% Define the rules for printing a person's title and order of succession
title_and_order(X) :- format('~w is a ~w and is ~w in the line of succession to the British throne.', [X, Title, Order]),
	(title(X, Title), order_of_succession(X, [Order|_]));
	(individual(X), format('~w is not a member of the British royal family.', [X])).