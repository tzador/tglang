% This is a predicate that checks if an element is a member of a list.
% It takes in the element and the list as arguments and returns true if 
% the element is a member of the list, and false otherwise.
member(X, [X|_]). % Base case, checks if X is the first element of the list.
member(X, [_|T]) :- member(X, T). % Recursive case, checks if X is a member of the tail of the list.

% This is a predicate that checks if a list is a subset of another list.
% It takes in two lists, X and Y, as arguments and returns true if all
% elements in X are also present in Y, and false otherwise.
subset([],_). % Base case, an empty list is a subset of any list.
subset([X|T],Y) :- member(X,Y), subset(T,Y). % Recursive case, checks if
% the head of list X is a member of Y and if the tail of X is a subset of Y.

% This is a predicate that returns the intersection of two lists.
% The returned list contains all elements that are present in both lists.
% It takes in two lists, X and Y, as arguments and returns a new list Z.
intersection([],_,[]). % Base case, an empty list has no intersection.
intersection([X|T],Y,[X|Z]) :- member(X,Y), intersection(T,Y,Z). % Recursive case,
% checks if the head of list X is a member of Y and adds it to the intersection list,
% then checks the tail of X.

% This is a predicate that returns the union of two lists.
% The returned list contains all elements that are present in either list.
% It takes in two lists, X and Y, as arguments and returns a new list Z.
union([],Y,Y). % Base case, union of an empty list and any list is the list itself.
union([X|T],Y,Z) :- member(X,Y), union(T,Y,Z). % If X is a member of Y, only add it to the union list.
union([X|T],Y,[X|Z]) :- \+ member(X,Y), union(T,Y,Z). % If X is not a member of Y, add it to the union list.

% This is a predicate that returns the power set of a given list.
% The returned list contains all possible subsets of the original list.
% It takes in one list, X, as an argument and returns a new list Z.
powerset([], [[]]). % Base case, an empty list has only one possible subset, the empty list.
powerset([X|T], L) :- powerset(T,L1), add_element(X,L1,L2), append(L1,L2,L). % Recursive case,
% generates the subsets of the tail of X and adds the head of X to each of them.
add_element(E, [], [[E]]). % Helper predicate to prepend an element to a list.
add_element(E, [H|T], [HX|T2]) :- HX = [E|H], add_element(E, T, T2). % Helper predicate to add an element to the head of a list.