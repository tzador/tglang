/*
This is a program in PROLOG that determines the longest palindromic substring in a given string.
It uses recursion and backtracking to find all possible substrings and then checks if they are palindromes.
*/

% The main predicate that takes in a string and finds the longest palindromic substring
% The first argument is the input string, second argument is the length of the input string
% and the third argument is the result which will contain the longest palindromic substring
longest_palindromic_substring(String, Length, Result) :-
    % Call helper predicate that finds all possible substrings of the input string
    findall(Substring, substring(String, Substring), Substrings),
    % Sort the substrings in descending order of length
    sort(0, @>, Substrings, Sorted_substrings),
    % Iterate through the sorted substrings
    member(Substring, Sorted_substrings),
    % Check if the substring is a palindrome
    palindrome(Substring),
    % If it is, assign it to the result and break out of the loop
    !, Result = Substring.

% Helper predicate to find all possible substrings of a given string
% The first argument is the input string, second argument is the substring
substring(String, Substring) :-
    % Take a prefix from the input string
    prefix(String, Prefix),
    % Check if the prefix is a suffix of the input string
    suffix(String, Prefix),
    % If it is, assign it to the substring and check for other substrings
    !, Substring = Prefix; substring(String, Substring).

% Predicate to check if a given string is a palindrome
% The first argument is the input string
palindrome(String) :-
    % Convert the string to a list of characters
    atom_chars(String, Chars),
    % Reverse the list
    reverse(Chars, Reversed_chars),
    % Convert the reversed list back to string
    atom_chars(Reversed_string, Reversed_chars),
    % Check if the input string and the reversed string are equal
    String = Reversed_string.

% Predicate to find the prefix of a given string
% The first argument is the input string, second argument is the prefix
prefix(String, Prefix) :-
    % Concatenate the prefix with an empty string
    atom_concat(Prefix, '', String).

% Predicate to find the suffix of a given string
% The first argument is the input string, second argument is the suffix
suffix(String, Suffix) :-
    % Concatenate an empty string with the suffix
    atom_concat('', Suffix, String).