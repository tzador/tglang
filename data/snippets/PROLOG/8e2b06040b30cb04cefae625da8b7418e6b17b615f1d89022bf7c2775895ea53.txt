%% Defining a predicate to check if a given list is a palindrome

palindrome([], []). % if the input list is empty, the output list is also empty

% The predicate has two arguments, the input list and the output reversed list
% It recursively checks if the first and last elements of the input list are the same,
% and then recursively checks the remaining elements of the list

% Base case: if the input list has only one element, the output list is the same
palindrome([X], [X]).

% Recursive case: if the first and last elements are equal, 
% we check if the remaining sublist is a palindrome by recursively calling the predicate
palindrome([X|T], [X|L]) :- palindrome(T, L).

% If the first and last elements are not equal, 
% we append the first element to the end of the reversed list and check if the remaining sublist is a palindrome
palindrome([X|T], L) :- append(L1, [X], L), palindrome(T, L1).

% Examples: 
% palindrome([1,2,3,2,1], L).  % L = [1,2,3,2,1] 
% palindrome([a,b,c,c,b,a], L).  % L = [c,b,a]