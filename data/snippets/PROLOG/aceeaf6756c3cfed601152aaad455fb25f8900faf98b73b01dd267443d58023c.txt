% This Prolog program implements the Quicksort algorithm to sort a list of numbers
% The quicksort predicate takes in three arguments: the list to be sorted, the sorted list, and the pivot element
% The pivot element will be the first element in the list

quicksort([], [], _). % Base case: an empty list is already sorted

quicksort([X | Xs], Sorted, Pivot):- % Recursive case
    partition(Xs, Smaller, Larger, X),
    quicksort(Smaller, SortedSmaller, Pivot),
    quicksort(Larger, SortedLarger, Pivot),
    append(SortedSmaller, [X|SortedLarger], Sorted). % Combine the sorted smaller list and pivot with the sorted larger list

% The partition predicate takes in four arguments: the list to be partitioned, the list of elements smaller than the pivot, the list of elements larger than the pivot, and the pivot element
partition([], [], [], _). % Base case: an empty list has no smaller or larger elements

partition([Y | Ys], [Y | Smaller], Larger, Pivot):- % If the current element is smaller than the pivot, add it to the smaller list and recursively call partition with the rest of the list
    Y =< Pivot,
    partition(Ys, Smaller, Larger, Pivot).

partition([Y | Ys], Smaller, [Y | Larger], Pivot):- % If the current element is larger than the pivot, add it to the larger list and recursively call partition with the rest of the list
    Y > Pivot,
    partition(Ys, Smaller, Larger, Pivot).
    
% Example query: ?- quicksort([5,2,1,3,4], Sorted, 5).
% Output: [1,2,3,4,5]