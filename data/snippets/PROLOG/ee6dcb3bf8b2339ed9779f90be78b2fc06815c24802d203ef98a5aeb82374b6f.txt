%% This is a program written in PROLOG.
%% It checks whether a given list is a palindrome.
%% A palindrome is a word, number, or phrase that reads the same backward as forward.
%% For example: level, radar, 12321

palindrome(X) :- reverse(X, X).  % Checks if the list is equal to its reversed form.

reverse([], []).                 % Base case: an empty list is equal to its reversed form, also an empty list.
reverse([X|Xs], RevList) :-      % Recursive case: X is the first element of the list, Xs is the rest of the list.
    reverse(Xs, RevXs),          % Call reverse on Xs to get the reversed version.
    append(RevXs, [X], RevList). % Append X to the end of RevXs to get the full reversed list.

%% Predicate for checking if a list is a palindrome.
%% X is the list to be checked, Y is the reversed version of X.
%% If X and Y are equal, then X is a palindrome.
is_palindrome(X) :-
    reverse(X, Y),
    X = Y.

%% Example query:
%% ?- is_palindrome([l, e, v, e, l]).
%% true.                           % The list [l, e, v, e, l] is a palindrome.