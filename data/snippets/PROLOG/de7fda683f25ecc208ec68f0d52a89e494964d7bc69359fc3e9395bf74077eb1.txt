% Defining the predicate "list_length" which takes a list and returns its length
list_length([], 0). % Base case: An empty list has a length of 0
list_length([_ | Tail], N) :- list_length(Tail, N1), N is N1 + 1. % Recursively counting the length of the list

% Defining the predicate "nth_element" which takes a list and a number N and returns the Nth element of the list
nth_element(List, N, Element) :- list_length(List, Length), % Getting the length of the list
                                N > 0, N =< Length, % Checking if N is a valid index for the list
                                N1 is N - 1, % Converting N into a valid index for Prolog (which starts counting from 0)
                                element_at_index(N1, List, Element). % Calling the helper predicate "element_at_index" with N-1 to get the Nth element

% Defining the predicate "element_at_index" which takes a number N and a list and returns the Nth element of the list
element_at_index(0, [Head | _], Head). % Base case: The element at index 0 is the first element of the list
element_at_index(N, [_ | Tail], Element) :- N1 is N - 1, element_at_index(N1, Tail, Element). % Recursively going through the list and decreasing N until we reach the Nth element

/*

Example usage:

?- nth_element([1, 2, 3, 4, 5], 3, X). % Querying for the 3rd element of the list [1, 2, 3, 4, 5]
X = 3 % Output: 3

?- nth_element([1, 2, 3, 4, 5], 6, X). % Querying for the 6th element of the list [1, 2, 3, 4, 5]
false % Output: false, since 6 is not a valid index for the list

?- nth_element([], 1, X). % Querying for the 1st element of an empty list
false % Output: false, since the list is empty and there is no 1st element

*/