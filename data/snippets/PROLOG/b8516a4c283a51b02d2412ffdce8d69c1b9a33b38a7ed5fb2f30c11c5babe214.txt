%This program finds the shortest path between two points on a graph using Dijkstra's algorithm

%Declaring dynamic predicates for edges and their corresponding weights
:- dynamic edge/2.
:- dynamic weight/2.

%Defining the predicate to add an edge between two nodes with a given weight
add_edge(Node1, Node2, Weight) :-
    assert(edge(Node1, Node2)),
    assert(edge(Node2, Node1)),
    assert(weight(Node1-Node2, Weight)),
    assert(weight(Node2-Node1, Weight)).

%Predicate to initialize the graph with given edges and weights
init_graph(Edges, Weights) :-
    assert_all_edges(Edges, Weights),
    set_initial_distances(Edges).

assert_all_edges([], []).
assert_all_edges([Edge|RestEdges], [Weight|RestWeights]) :-
    add_edge(Edge, Weight),
    assert_all_edges(RestEdges, RestWeights).

set_initial_distances([]).
set_initial_distances([Node|RestNodes]) :-
    assert(distance(Node, infinity)),
    set_initial_distances(RestNodes).

%Defining the helper predicates for Dijkstra's algorithm
step(Start, End) :-
    minimum_distance(Start, End).

minimum_distance(Start, End) :-
    distance(End, infinity),
    assert(shortest_path(End, [End])),
    shortest_distance(End, Distance),
    writeln('Minimum distance: ' || Distance).

minimum_distance(Start, End) :-
    compare_distances(Start, End),
    update_distance(End),
    step(Start, End).

compare_distances(Start, End) :-
    weight(Start-End, Weight),
    distance(Start, CurrentDistance),
    calculate_new_distance(Start, End, Weight, NewDistance),
    NewDistance < CurrentDistance.

calculate_new_distance(Start, End, Weight, NewDistance) :-
    distance(Start, CurrentDistance),
    NewDistance is CurrentDistance + Weight.

update_distance(End) :-
    shortest_path(End, Path),
    reverse(Path, ReversedPath),
    assert(distance(End, Path)).

%Example graph
init_graph([a, b, c, d], [5, 3, 8, 6]).
add_edge(a, b, 5).
add_edge(b, c, 3).
add_edge(c, d, 8).
add_edge(d, a, 6).

%Querying for the shortest path between two nodes
?- step(a, d).