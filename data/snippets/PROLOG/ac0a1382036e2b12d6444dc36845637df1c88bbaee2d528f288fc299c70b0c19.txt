%% This is a comment in PROLOG
:- set_prolog_flag(double_quotes, chars). % Set double quotes to accept characters instead of strings

%% Define a predicate for finding the length of a given list
listLength([], 0). % If list is empty, length is 0
listLength([_|Tail], Len) :- listLength(Tail, Len1), % Recursive call to find length of remaining list
                             Len is Len1 + 1. % Add 1 to length for each element in list

%% Define a predicate for checking if a list is palindrome
palindrome(List) :- reverse(List, List). % If list is the same when reversed, then it is a palindrome

%% Define a predicate for finding the minimum element in a list
minElement([X], X). % If list contains only one element, minimum is that element
minElement([Head|Tail], Min) :- minElement(Tail, Min1), % Recursive call to find minimum of remaining list
                                Head =< Min1, % If head of list is smaller than current minimum, set it as new minimum
                                Min is Head. % Update minimum
minElement([_|Tail], Min) :- minElement(Tail, Min). % If head of list is not smaller than current minimum, continue with remaining list

%% Define a predicate for checking if an element is a member of a list
member(X, [X|_]). % If element is the head of given list, it is a member
member(X, [_|Tail]) :- member(X, Tail). % Recursive call to check if element is a member of remaining list