% This is a Prolog program that finds the shortest path between two nodes in a graph.
 
% Dynamic declaration for the shortest_path predicate that will be used to store the shortest path found.
:- dynamic shortest_path/2.

% Base case for the shortest_path predicate, path of length 0 between two nodes is an empty list.
shortest_path(A, A, [A]).
 
% Recursion case for the shortest_path predicate, finds the shortest path between two nodes by iterating through the graph.
shortest_path(A, B, [A | Path]) :- 
    % Finds an adjacent node to node A in the graph.
    adjacent(A, Adjacent), 
    % Checks if the adjacent node is not already in the path.
    \+ member(Adjacent, Path), 
    % Finds the shortest path between the adjacent node and the ending node B.
    shortest_path(Adjacent, B, Path).

% Base case for the length predicate, length of an empty list is 0.
length([], 0).

% Recursion case for the length predicate, calculates the length of a list by recursively counting the elements.
length([_ | Tail], N) :-
    % Decrements N for each recursion.
    N > 0,
    N1 is N - 1,
    % Recursively calculates the length of the tail of the list.
    length(Tail, N1).

% Predicate for finding the shortest path length between two nodes, takes in the starting and ending nodes and the length of the path as input.
shortest_path_length(A, B, Length) :-
    % Finds the shortest path between nodes A and B.
    shortest_path(A, B, Path), 
    % Calculates the length of the path using the length predicate.
    length(Path, Length).