/* This is a Prolog program that implements a depth-first search algorithm. It takes an initial state, a goal state, and a list of actions as input, and outputs a sequence of actions to be taken to reach the goal state from the initial state. */

/* The following predicates define the successor function, which takes a state and an action as input and calculates the resulting state. */
successor(state(X,Y,Z), action1, state(NewX, NewY, Z)) :- NewX is X + 1, NewY is Y + 2.
successor(state(X,Y,Z), action2, state(X, NewY, NewZ)) :- NewY is Y * 2, NewZ is Z * 3.
successor(state(X,Y,Z), action3, state(NewX, Y, Z)) :- NewX is X // 2.

/* The following predicates define the goal state and the initial state. */
goal_state(state(10,20,30)).
initial_state(state(0,0,0)).

/* The following predicate implements the depth-first search algorithm, it takes an initial state, a goal state, and a list of actions as input, and outputs the sequence of actions needed to reach the goal state. */
depth_first_search(InitialState, GoalState, Actions) :- dfs(InitialState, GoalState, [], Actions).

/* The dfs predicate takes the current state, the goal state, a list of visited states, and the final sequence of actions as input. It checks if the current state is the goal state, if yes, it returns the final sequence of actions. If not, it calculates the next possible states and recursively calls the dfs predicate until the goal state is reached. */
dfs(CurrentState, GoalState, Visited, Actions) :- goal_state(CurrentState), reverse(Visited, Actions).
dfs(CurrentState, GoalState, Visited, Actions) :- \+member(CurrentState, Visited), successor(CurrentState, Action, NewState), dfs(NewState, GoalState, [CurrentState|Visited], Actions).

/* The following query calls the depth_first_search predicate with the initial and goal state, and outputs the sequence of actions needed to reach the goal state. */
?- depth_first_search(initial_state, goal_state, Actions).