%This is an example of a PROLOG program that checks for valid magic squares

%Defining a predicate to check if a list contains all unique elements
unique([]).
unique([H|T]):-
    not(member(H,T)), %checks if H is not a member of T
    unique(T).

%Defining a predicate to check if a list is a permutation of another list
permutation([],[]).
permutation(L,[X|LT]):-
    select(X,L,R), %selects an element X from the list L and returns the remaining list as R
    permutation(R,LT).

%Defining a predicate to transpose a matrix
transpose([],[]).
transpose([[]|_], []).
transpose([[H|T]|L], [Col|ColT]):-
    first_rows([[H|T]|L], Col, NewL), %takes the first row of the matrix and separates it into a list of first elements and a list of remaining elements
    transpose(NewL, ColT).

%Defining a predicate to check if a matrix is a square matrix
is_square_matrix([]).
is_square_matrix([[]|_]).
is_square_matrix(M):-
    transpose(M, M_Trans), %transposes the matrix
    length(M, N), %gets the length of the matrix
    length(M_Trans, N), %checks if the transposed matrix also has a length of N
    unique(M), %checks if there are no repeated elements in the matrix
    unique(M_Trans). %checks if there are no repeated elements in the transposed matrix

%Defining a predicate to check if a list sums up to a given value
sum_list([],0).
sum_list([H|T],Total):-
    sum_list(T,Remaining),
    Total is H + Remaining.

%Defining a predicate to check if a list contains all valid magic square numbers
valid_magic_square(List,N):-
    N2 is N * N, %calculates the number of elements in the magic square
    length(List, N2), %checks if the list has N^2 elements
    is_square_matrix(List), %checks if the list is a square matrix
    sum_list(List,Expected_Total), %calculates the expected total for a valid magic square
    Expected_Total =:= N*(N2+1)//2. %checks if the actual total of the list matches the expected total for a valid magic square

%Example of a valid magic square of size 3x3
?- valid_magic_square([2,7,6,9,5,1,4,3,8],3). %prints true