% Define a predicate that checks if a number is a prime
is_prime(2). % Base case: 2 is a prime number
is_prime(3). % Base case: 3 is a prime number
is_prime(N) :- % Recursive case
  N > 3, % Ensure N is greater than 3
  N mod 2 =\= 0, % Ensure N is not divisible by 2
  \+has_factor(N, 3). % Call helper predicate to check if N has any factors other than 1 and itself

% Define helper predicate to check if N has any factors other than 1 and itself
has_factor(N, X) :-
  X < N, % Ensure X is less than N
  N mod X =:= 0. % Check if X is a factor of N
has_factor(N, X) :-
  X < N, % Ensure X is less than N
  X2 is X + 2, % Increment X by 2 to only check odd numbers
  has_factor(N, X2). % Recursive case: Call itself with incremented X

/* Example usage:
  ?- is_prime(7). % Output: true
  ?- is_prime(12). % Output: false
*/