% This is a Prolog program that checks if a given list of words form a valid anagram.

% first, we define a predicate 'is_anagram' that takes in two parameters, 'WordList' and 'Anagram'
is_anagram(WordList, Anagram) :-
    % next, we define a helper predicate 'permutation' which takes in two parameters, a list and its permutation
    permutation(WordList, Anagram).

% to define the permutation predicate, we specify that an empty list is a permutation of itself
permutation([],[]).
% and if not, we recursively check if the first element of the list is a member of the permutation
permutation([X|Xs],Zs1) :-
    % X is a member of permutation Zs, so remove X from the original list and check for other elements in the permutation
    select(X,Zs,Zs1),
    % recursively check for the remaining elements in the original list
    permutation(Xs,Zs).

% next, we define a helper predicate 'select' that takes in three parameters, 'X', 'List' and 'Rest'
select(X,[X|Tail],Tail).
% and if not, we recursively check if X is a member of the tail of the list
select(X,[Y|Tail],[Y|NTail]) :-
    % recursively check if X is a member of the tail of the list
    select(X,Tail,NTail).

% to check if a given list of words form an anagram, we first remove all spaces and convert the words to lowercase
check_anagram(WordList, Anagram) :-
    % use the 'atom_chars' predicate to convert the words to a list of characters
    atom_chars(WordList, WordChars),
    % then use the 'delete' predicate to remove all spaces in the list
    delete(WordChars, ' ', NewWordChars),
    % finally, use the 'downcase_atom' predicate to convert all characters in the list to lowercase
    maplist(downcase_atom, NewWordChars, NewAnagram),
    % call the 'is_anagram' predicate and pass in the new list of characters and the anagram
    is_anagram(NewAnagram, Anagram).
    
% example query to check if 'listen' and 'silent' form an anagram
% ?- check_anagram('listen', 'silent').
% should return true.