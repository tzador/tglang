% Define a rule that checks if a number is prime
is_prime(N) :-
  N > 1,
  is_prime_helper(N, 2).

% Helper predicate to check if N is prime
is_prime_helper(N, D) :-
  D > sqrt(N), % stop condition - all possible factors have been checked
  !. % cut to prevent backtracking
is_prime_helper(N, D) :-
  N mod D =\= 0, % check if D is not a factor of N
  D1 is D + 1, % increase D by 1
  is_prime_helper(N, D1). % recursively call helper predicate with updated D

% Define a rule that checks if a list of numbers is sorted in ascending order
is_sorted([]). % empty list is sorted
is_sorted([_]). % single element list is sorted
is_sorted([X,Y|T]) :-
  X =< Y, % check if first element is less than or equal to second element
  is_sorted([Y|T]). % recursively call is_sorted with remaining list

% Define a rule that returns the factorial of a number
factorial(0, 1). % base case: factorial of 0 is 1
factorial(N, F) :-
  N > 0, % prevent negative inputs
  N1 is N - 1, % decrement N by 1
  factorial(N1, F1), % recursively call factorial with updated N
  F is N * F1. % calculate factorial by multiplying N with factorial of (N-1)