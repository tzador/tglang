% Defining a predicate to find all possible permutations of a list
permutation([], []). % Base case when the list is empty, return empty list

permutation(List, [Head|Tail]):-
	select(Head, List, NewList), % Select an element from the list
	permutation(NewList, Tail). % Recursively call permutation with remaining elements

select(X, [X | Tail], Tail). % Select first element from the list

select(Element, [Head | Tail], [Head | NewTail]):-
	select(Element, Tail, NewTail). % Recursively remove elements from the list

/*
Example query and output:
?- permutation([1,2,3], L).
L = [1, 2, 3];
L = [1, 3, 2];
L = [2, 1, 3];
L = [2, 3, 1];
L = [3, 1, 2];
L = [3, 2, 1].
*/