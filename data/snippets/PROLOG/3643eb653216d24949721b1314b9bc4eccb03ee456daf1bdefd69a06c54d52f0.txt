%% Defining a predicate that checks if a given number is prime
is_prime(2). %% Base case
is_prime(3). %% Base case
is_prime(N) :- %% If the number is even or less than 2, it is not prime
    N > 3, %% N is greater than 3
    N mod 2 =\= 0, %% N is not divisible by 2
    \+ has_factor(N,3), %% N does not have a factor other than 1 and itself
    !. %% Cut to stop backtracking

%% Helper predicate that checks if a number has a factor other than 1 and itself
has_factor(N, Current) :- %% If the current number is greater than the square root of N, there are no more factors to check
    Current * Current > N, %% Current number is greater than the square root of N
    false. %% Return false
has_factor(N, Current) :- %% If N is divisible by the current number, it is not prime
    N mod Current =:= 0, %% N is divisible by the current number
    true. %% Return true
has_factor(N, Current) :- %% Otherwise, recursively check if N has a factor with the next number
    Current * Current =< N, %% Current number is less than or equal to the square root of N
    Next is Current + 2, %% Next number is the next odd number
    has_factor(N, Next).