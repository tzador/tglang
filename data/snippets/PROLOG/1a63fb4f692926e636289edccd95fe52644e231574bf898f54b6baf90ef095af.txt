% Program to check if a list of numbers is a valid Fibonacci sequence

% Define the base cases
fibonacci(1,[1]).
fibonacci(2,[1,1]).

% Define the recursive case
fibonacci(N, [A,B|T]) :-
    N > 2,
    N1 is N - 1,
    fibonacci(N1, [A,B|T]), % recursively call fibonacci with the previous two numbers
    X is A + B, % calculate the next number in the sequence
    N =:= T, % check if the number is the same as the last number in the sequence
    append([X],T,[A,B]). % append the next number to the list and reassign to the list

% Define a predicate to check if a list is a valid Fibonacci sequencee
isFibonacciSequence(List) :-
    fibonacci(N,List), % call the fibonacci predicate to generate a list of the same length
    sum_list(List,Sum), % calculate the sum of the list
    sum_list([N,N-1,N-2],Sum). % check if the sum of the list is equal to the sum of the first n Fibonacci numbers, where n is the length of the list

% Sample input and output
?- isFibonacciSequence([1,1,2,3,5,8,13,21,34]).
true.

?- isFibonacciSequence([1,2,3,5,7,11,13]).
false.

% Explanation:
%
% The code snippet checks if a given list of numbers is a valid Fibonacci sequence by:
% - defining the base cases of the first and second Fibonacci numbers
% - defining the recursive case that builds the Fibonacci sequence by adding the previous two numbers
% - defining a predicate to check if a list is a valid Fibonacci sequence by checking the sum of the list with the sum of the first n Fibonacci numbers, where n is the length of the list
% - providing sample input and output to demonstrate the functionality of the code.