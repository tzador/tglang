% This is a program to find the shortest path between two nodes in a graph.

% Define the edges of the graph as dynamic facts.
:- dynamic edge/2.

% Define the recursive predicate to find the shortest path.
% Arguments are start node, end node, current path, current length, and shortest path.
shortest_path(Start, End, Path, Length, Shortest_Path):-
    % Check if the current node is the end node.
    Start = End,
    % Set the shortest path to the current path.
    Shortest_Path = Path,
    % Output the shortest path and length.
    writeln('Shortest Path: '),
    format('~w ~n', [Shortest_Path]),
    writeln('Path Length: '),
    format('~w ~n', [Length]).

shortest_path(Start, End, Path, Length, Shortest_Path):-
    % Check if the current node is not the end node.
    Start \= End,
    % Query for all edges connected to the current node.
    edge(Start, Next),
    % Check if the next node is not already in the path.
    \+ member(Next, Path),
    % Calculate new length by adding the weight of the edge to the current length.
    New_Length is Length + 1,
    % Append the next node to the path.
    shortest_path(Next, End, [Next|Path], New_Length, Shortest_Path).

% Helper predicate to return the shortest path between two nodes.
% Arguments are start node and end node.
find_shortest_path(Start, End):-
    % Initialize path and length variables.
    Path = [],
    Length = 0,
    % Call shortest_path predicate to find the shortest path.
    shortest_path(Start, End, [Start], Length, Shortest_Path),
    % Output the shortest path and length.
    writeln('Shortest Path: '),
    format('~w ~n', [Shortest_Path]),
    writeln('Path Length: '),
    format('~w ~n', [Length]).