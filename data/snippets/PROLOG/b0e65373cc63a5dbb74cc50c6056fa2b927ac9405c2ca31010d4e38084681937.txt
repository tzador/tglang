/* Define a predicate that takes in two lists as arguments and returns the merged list */
merge([], L, L).
merge(L, [], L).
merge([H1|T1], [H2|T2], [H1|T]) :- H1 =< H2,
                                    merge(T1, [H2|T2], T).
merge([H1|T1], [H2|T2], [H2|T]) :- H1 > H2,
                                    merge([H1|T1], T2, T).
/*
Explanation:
- The first two lines define the base cases for when either list is empty, in which case the merged list is simply the other list
- The following two lines define the recursive cases, where the first element of each list is compared and the smaller one is added to the merged list, while the rest of the elements are recursively merged.
- The last line handles the case where the first element of the first list is larger than the first element of the second list, in which case the first element of the second list is added to the merged list and the remaining elements are recursively merged.
*/