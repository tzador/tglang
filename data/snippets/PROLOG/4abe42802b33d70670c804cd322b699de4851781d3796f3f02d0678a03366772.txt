% This is a Prolog program that implements a basic knowledge base 
% about different animals and their characteristics
% Declare the 'animal' predicate to store information about various animals
animal(dog). 
animal(cat).

% Declare the 'mammal' predicate to store information about mammal species
mammal(dog).
mammal(cat).

% Declare the 'fur' predicate to store information about animals with fur
fur(dog).
fur(cat).

% Declare the 'tail' predicate to store information about animals with tails
tail(dog).
tail(cat).

% Declare the 'domestic' predicate to store information about domestic animals
domestic(dog).
domestic(cat).

% Declare the 'pet' predicate to store information about animals that can be pets
pet(dog).
pet(cat).

% Declare the 'size' predicate to store information about the size of animals
size(dog, large).
size(cat, small).

% Declare the 'lives' predicate to store information about where animals live
lives(dog, house).
lives(cat, house).
lives(bear, forest).

% Declare the 'sound' rule to output the sound made by animals
sound(dog) :- bark. % 'bark' is a built-in predicate in Prolog
sound(cat) :- meow.

% Declare the 'legs' rule to output the number of legs for animals
legs(dog, 4).
legs(cat, 4).
legs(bear, 4).

% Declare the 'characteristics' rule to output all the characteristics of an animal
% The characteristics are fur type, tail presence, domesticity, size, and sound
characteristics(Animal) :- 
    animal(Animal), % Check if the given animal is in the knowledge base 
    fur(Animal), % Check if the animal has fur 
    tail(Animal), % Check if the animal has a tail 
    domestic(Animal), % Check if the animal is domestic 
    size(Animal, Size), % Get the size of the animal 
    sound(Animal, Sound), % Get the sound made by the animal 
    write(Animal), % Output the name of the animal 
    write(' has fur'), % Output the fur type 
    write(', has a tail'), % Output if the animal has a tail 
    write(', is domestic'), % Output if the animal is domestic 
    write(', is a '), write(Size), % Output the size of the animal 
    write(' animal'), % Specify that it is an animal 
    write(' and makes a '), write(Sound), write(' sound.'). % Output the sound made by the animal

% Declare the 'livesIn' rule to output where an animal lives
livesIn(Animal) :-
    animal(Animal), % Check if the given animal is in the knowledge base
    lives(Animal, Place), % Get the location where the animal lives
    write(Animal), % Output the name of the animal
    write(' lives in the '), write(Place), write('.'). % Specify where the animal lives