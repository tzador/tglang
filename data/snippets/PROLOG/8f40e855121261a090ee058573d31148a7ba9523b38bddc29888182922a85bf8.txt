% Initialize a list to hold integers
numbers(Xs):-
    Xs = [1, 3, 5, 7, 9].

% Define a predicate to find the sum of a list of numbers
sum([], 0). % If the list is empty, the sum is 0
sum([X|Xs], S):-
    sum(Xs, S1), % Recursively call the predicate on the rest of the list
    S is X + S1. % Calculate the sum of the current element and the sum of the rest of the list

% Define a predicate to find the average of a list of numbers
avg(Xs, A):-
    sum(Xs, Sum), % Calculate the sum of the list
    length(Xs, Length), % Get the length of the list
    A is Sum/Length. % Calculate the average by dividing the sum by the length

% Define a predicate to find the minimum of two numbers
min(A, B, Min):-
    A =< B, % If A is less than or equal to B
    Min is A.
min(A, B, Min):-
    A > B, % If A is greater than B
    Min is B.

% Define a predicate to find the minimum of a list of numbers
min_list([X], X). % If the list has only one element, that is the minimum
min_list([X|Xs], Min):-
    min_list(Xs, Min1), % Recursively call the predicate on the rest of the list
    min(X, Min1, Min). % Find the minimum between the current element and the minimum of the rest of the list

% Define a predicate to find the maximum of two numbers
max(A, B, Max):-
    A >= B, % If A is greater than or equal to B
    Max is A.
max(A, B, Max):-
    A < B, % If A is less than B
    Max is B.

% Define a predicate to find the maximum of a list of numbers
max_list([X], X).
max_list([X|Xs], Max):-
    max_list(Xs, Max1),
    max(X, Max1, Max).

% Define a predicate to find the median of a list of numbers
median(Xs, Med):-
    length(Xs, Length), % Get the length of the list
    NewLength is (Length+1)//2, % Calculate the middle index
    nth1(NewLength, Xs, Med). % Get the element at the middle index

% Generate a list of integers from 1 to N
range(1, 1, [1]). % If N is 1, the list is [1]
range(N, N, [N]). % If N is not 1, the list is [N]
range(Start, End, [Start|Xs]):-
    Start < End, % If the start value is less than the end value
    NewStart is Start+1, % Increment the start value
    range(NewStart, End, Xs). % Recursively call the predicate with the new start value and the rest of the list

% Define a predicate to check if a number is prime
is_prime(X):-
    X > 1, % Prime numbers are greater than 1
    Y is X-1, % Temporary variable to iterate through potential factors
    not((between(2, Y, N), X mod N =:= 0)). % Check if X can be divided by any number between 2 and X-1 with no remainder