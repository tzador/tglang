/* This is a PROLOG program that implements a binary search algorithm on a sorted list
and returns the index of the searched element */

% Predicate for binary search
binary_search(List, Element, Index) :-
    % Call helper predicate with additional arguments
    binary_search(List, Element, 0, Index).

% Helper predicate with additional arguments for start and end indices
binary_search(List, Element, Start, End, Index) :-
    % Calculate mid index
    Mid is (Start + End) // 2,
    % Check if mid element is equal to searched element
    nth0(Mid, List, Element),
    % Set index to mid index
    Index = Mid.

% If mid element is smaller than searched element
binary_search(List, Element, Start, End, Index) :-
    % Calculate mid index
    Mid is (Start + End) // 2,
    % Get mid element
    nth0(Mid, List, MidElement),
    % If mid element is smaller, search right half of list
    MidElement < Element,
    % Increment start index
    NewStart is Mid + 1,
    % Call helper predicate with updated start index
    binary_search(List, Element, NewStart, End, Index).

% If mid element is larger than searched element
binary_search(List, Element, Start, End, Index) :-
    % Calculate mid index
    Mid is (Start + End) // 2,
    % Get mid element
    nth0(Mid, List, MidElement),
    % If mid element is larger, search left half of list
    MidElement > Element,
    % Decrement end index
    NewEnd is Mid - 1,
    % Call helper predicate with updated end index
    binary_search(List, Element, Start, NewEnd, Index).

% If element is not found
binary_search(_, _, _, _, -1).