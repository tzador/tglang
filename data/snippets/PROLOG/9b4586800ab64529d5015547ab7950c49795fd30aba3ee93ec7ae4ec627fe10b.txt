% Define dynamic predicate to store list of students
:- dynamic student_list/1.

% Define dynamic predicate to store list of courses
:- dynamic course_list/1.

% Predicate to add a student to student_list
add_student(Student) :-
    student_list(List),
    retract(student_list(List)),
    assert(student_list([Student|List])).

% Predicate to add a course to course_list
add_course(Course) :-
    course_list(List),
    retract(course_list(List)),
    assert(course_list([Course|List])).

% Predicate to register a student for a course
register(Student, Course) :-
    % Make sure student is in student_list
    student_list(Students),
    member(Student, Students),
    % Make sure course is in course_list
    course_list(Courses),
    member(Course, Courses),
    % Add course to student's list of courses
    add_course(Student, Course).

% Predicate to check if a student is registered for a course
is_registered(Student, Course) :-
    % Make sure student is in student_list
    student_list(Students),
    member(Student, Students),
    % Make sure course is in course_list
    course_list(Courses),
    member(Course, Courses),
    % Check if course is in student's list of courses
    registered_courses(Student, RegisteredCourses),
    member(Course, RegisteredCourses).

% Predicate to get a student's registered courses
registered_courses(Student, RegisteredCourses) :-
    % Make sure student is in student_list
    student_list(Students),
    member(Student, Students),
    % Get list of registered courses for student
    registered_courses(Student, [], RegisteredCourses).

% Helper predicate to recursively get registered courses
registered_courses([], RegisteredCourses, RegisteredCourses).
registered_courses([Course|Rest], Acc, RegisteredCourses) :-
    % Check if first course is registered
    is_registered(Course, CourseList),
    % Add it to accumulator and continue recursively with rest of courses
    registered_courses(Rest, [Course|Acc], RegisteredCourses).

% Predicate to remove a student from student_list
remove_student(Student) :-
    % Make sure student is in student_list
    student_list(List),
    member(Student, List),
    % Remove student from list
    delete(List, Student, NewList),
    % Update student_list with new list
    retract(student_list(List)),
    assert(student_list(NewList)).

% Predicate to remove a course from course_list
remove_course(Course) :-
    % Make sure course is in course_list
    course_list(List),
    member(Course, List),
    % Remove course from list
    delete(List, Course, NewList),
    % Update course_list with new list
    retract(course_list(List)),
    assert(course_list(NewList)).