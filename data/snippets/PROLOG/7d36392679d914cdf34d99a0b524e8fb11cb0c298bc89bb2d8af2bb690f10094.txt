%% Define a predicate that checks if a list is a palindrome
is_palindrome([]). % A list with no elements is a palindrome
is_palindrome([_]). % A list with one element is a palindrome
is_palindrome([H|T]) :- % A list is a palindrome if its first and last elements are equal and the remaining elements are also a palindrome
    last_element(T, H), % Using the last_element predicate to get the last element of the list
    is_palindrome(T). % Recursively check if the remaining elements are a palindrome
    
%% Define a predicate that checks if two lists are equal
lists_equal([], []). % Two empty lists are equal
lists_equal([H1|T1], [H2|T2]) :-
    H1 = H2, % Check if the first elements of the lists are equal
    lists_equal(T1, T2). % Recursively check if the remaining elements are equal

%% Define a predicate that finds the sum of elements in a list
sum_list([], 0). % The sum of an empty list is 0
sum_list([H|T], Sum) :-
    sum_list(T, RemainingSum), % Recursively find the sum of the remaining elements
    Sum is H + RemainingSum. % Add the current element to the remaining sum and assign it to Sum variable

%% Define a predicate that finds the maximum element in a list
max_list([H|T], Max) :-
    max_list(T, H, Max). % Call a helper predicate with the first element as the initial max

% Base case for the helper predicate
max_list([], Max, Max).
% If the current element is greater than the current max, update the max
max_list([H|T], CurrentMax, Max) :-
    H > CurrentMax,
    max_list(T, H, Max).
% If the current element is not greater than the current max, keep the current max and move on to the next element
max_list([H|T], CurrentMax, Max) :-
    H =< CurrentMax,
    max_list(T, CurrentMax, Max).