% This is a block comment in PROLOG

% Define a predicate to check if a list is sorted in ascending order
is_sorted_asc([]).   % Base case, an empty list is sorted
is_sorted_asc([_]).  % A single item list is also sorted
is_sorted_asc([X,Y|T]) :- X < Y, is_sorted_asc([Y|T]).   % Recursively check if succeeding items are smaller than previous ones

% Define a predicate to check if a list is sorted in descending order
is_sorted_desc([]).   % Base case, an empty list is sorted
is_sorted_desc([_]).  % A single item list is also sorted
is_sorted_desc([X,Y|T]) :- X > Y, is_sorted_desc([Y|T]).   % Recursively check if succeeding items are larger than previous ones

% Define a predicate to reverse a list
reverse_list([], []).   % Base case, an empty list reversed is still an empty list
reverse_list([H|T], Reversed) :- reverse_list(T, Rest), append(Rest, [H], Reversed).   % Recursively append the head of the list to the end of the reversed tail

% Define a predicate to find the nth element in a list
nth_element(1, [H|_], H) :- !.   % Base case, the first element is the nth element
nth_element(N, [_|T], X) :- N > 1, M is N-1, nth_element(M, T, X).   % Recursively decrease N and search for the nth element in the remaining list

% Define a predicate to remove duplicates from a list
remove_duplicates([], []).   % Base case, an empty list has no duplicates
remove_duplicates([H|T], [H|T1]) :- not(member(H, T)), remove_duplicates(T, T1).   % If the head is not in the tail, keep it in the new list
remove_duplicates([H|T], T1) :- member(H, T), remove_duplicates(T, T1).   % If the head is in the tail, remove it and continue removing duplicates from the tail