% This program performs a depth-first search in a binary tree and returns the value found.
 % The tree is represented as a list with the root node as the first element, and the left and right sub-trees in the second and third elements respectively.

 % Base case: If the tree is empty, return false.
depth_first_search(_, [], _) :-
    false.

 % If the current node contains the value we are looking for, return true.
depth_first_search(Value, [Root, _, _], Found) :-
    Root is Value,
    Found = true.

 % Otherwise, recursively call depth_first_search on the left subtree and then the right subtree.
depth_first_search(Value, [Root, Left, Right], Found) :-
    depth_first_search(Value, Left, Found),
    depth_first_search(Value, Right, Found).

 % Helper function to print the path taken during the search.
print_path(Path) :-
    reverse(Path, Reversed),
    write('Path taken: '),
    print_path(Reversed, 0).

 % Base case: If the path is empty, print a newline character.
print_path([], _) :-
    nl.

 % Recursive case: Keep printing the nodes in the path and updating the current depth.
print_path([Node|Rest], Depth) :-
    write(Node),
    write(' '),
    NewDepth is Depth + 1,
    print_path(Rest, NewDepth).

 % Sample tree to search for value 5:
 % tree(Value, Left_subtree, Right_subtree)
tree(5, tree(3, tree(2, [], []), tree(4, [], [])), tree(6, [], tree(7, [], []))).

 % Code to perform the search and print the path taken in the tree.
search_and_print(Path, Value) :-
    tree(Root, Left, Right),
    depth_first_search(Value, [Root, Left, Right], Found),
    (Found = true ->
        write('Value '), write(Value), write(' found!'), nl,
        print_path(Path)
    ;
        write('Value '), write(Value), write(' not found.'), nl
    ).