% Defining a predicate that checks if a given list is a palindrome
palindrome(List) :-
    reverse(List, List).

% Defining a predicate that reverses a list
reverse([], []). % Base case, empty list
reverse([Head|Tail], Reversed) :-
    reverse(Tail, ReversedTail), % Recursively call reverse on the tail of the list
    append(ReversedTail, [Head], Reversed). % Append the head at the end of the reversed tail to reverse the list

% Defining a predicate that checks if two lists are equal
equal([], []). % Base case, both lists are empty
equal([Head|Tail1], [Head|Tail2]) :-
    equal(Tail1, Tail2). % Recursively call equal on the tails of both lists

% Defining a predicate that checks if a given list is a palindrome using the above predicates
palindrome_check(List) :-
    reverse(List, ReversedList), % Reverse the given list
    equal(List, ReversedList). % Check if the reversed list is equal to the original list

% Sample query:
?- palindrome_check([1, 2, 2, 1]).
% Output:
% true. % The given list is a palindrome