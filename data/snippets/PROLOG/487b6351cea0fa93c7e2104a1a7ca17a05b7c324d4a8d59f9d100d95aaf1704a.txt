%% This is a Prolog program that solves a Sudoku puzzle.

%% Define the possible digits in a Sudoku grid.
digit(1).
digit(2).
digit(3).
digit(4).
digit(5).
digit(6).
digit(7).
digit(8).
digit(9).

%% Define the rows and columns of a Sudoku grid.
row(1).
row(2).
row(3).
row(4).
row(5).
row(6).
row(7).
row(8).
row(9).
column(1).
column(2).
column(3).
column(4).
column(5).
column(6).
column(7).
column(8).
column(9).

%% Define the 3x3 subgrids in a Sudoku grid.
square(1,1).
square(1,2).
square(1,3).
square(2,1).
square(2,2).
square(2,3).
square(3,1).
square(3,2).
square(3,3).
square(4,1).
square(4,2).
square(4,3).
square(5,1).
square(5,2).
square(5,3).
square(6,1).
square(6,2).
square(6,3).
square(7,1).
square(7,2).
square(7,3).
square(8,1).
square(8,2).
square(8,3).
square(9,1).
square(9,2).
square(9,3).

%% Define the board as a list of nine lists, each containing nine digits.
board([[_,_,8,7,_,_,4,_,_],
       [_,_,_,_,_,8,1,_,_],
       [1,_,_,_,2,_,_,_,6],
       [_,_,3,_,_,_,_,7,_],
       [_,_,_,1,_,5,_,_,_],
       [_,6,_,_,_,_,9,_,_],
       [2,_,_,_,3,_,_,_,7],
       [_,_,9,6,_,_,_,_,_],
       [_,_,_,5,_,_,6,_,_]]).

%% Define a predicate to check if a given value is not present in a row.
not_in_row(Val, Row) :-
    board(Board),
    nth1(Row, Board, RowList),
    not(member(Val, RowList)).

%% Define a predicate to check if a given value is not present in a column.
not_in_column(Val, Column) :-
    board(Board),
    transpose(Board, TransposedBoard),
    nth1(Column, TransposedBoard, ColumnList),
    not(member(Val, ColumnList)).

%% Define a predicate to check if a given value is not present in a 3x3 subgrid.
not_in_subgrid(Val, Row, Column) :-
    board(Board),
    square(SquareRow, SquareColumn),
    RowStart is 3*(SquareRow-1)+1,
    RowEnd is RowStart + 2,
    ColumnStart is 3*(SquareColumn-1)+1,
    ColumnEnd is ColumnStart + 2,
    between(RowStart, RowEnd, Row),
    between(ColumnStart, ColumnEnd, Column),
    nth1(Row, Board, RowList),
    nth1(Column, RowList, Value),
    Val \= Value.

%% Define a predicate to check if a given digit can be placed in a particular position.
can_place(Val, Row, Column) :-
    digit(Val),
    row(Row),
    column(Column),
    not_in_row(Val, Row),
    not_in_column(Val, Column),
    not_in_subgrid(Val, Row, Column).

%% Define a predicate to recursively place digits in the board until the Sudoku puzzle is solved.
sudoku([],[]).
sudoku([H|T], [H|Res]) :-
    number(H),
    sudoku(T, Res).
sudoku([H|T], Res) :-
    var(H),
    sudoku(T, Res),
    can_place(Val, Row, Column),
    H = Val.

%% Define a predicate to solve the Sudoku puzzle and print the result board.
solve_sudoku :-
    board(Board),
    sudoku(Board, SolvedBoard),
    print_result(SolvedBoard).

%% Define a predicate to print the Sudoku puzzle board in a user-friendly format.
print_result(Board) :-
    nth1(1, Board, Row1),
    write(Row1),
    write('\n'),
    nth1(2, Board, Row2),
    write(Row2),
    write('\n'),
    nth1(3, Board, Row3),
    write(Row3),
    write('\n'),
    nth1(4, Board, Row4),
    write(Row4),
    write('\n'),
    nth1(5, Board, Row5),
    write(Row5),
    write('\n'),
    nth1(6, Board, Row6),
    write(Row6),
    write('\n'),
    nth1(7, Board, Row7),
    write(Row7),
    write('\n'),
    nth1(8, Board, Row8),
    write(Row8),
    write('\n'),
    nth1(9, Board, Row9),
    write(Row9).