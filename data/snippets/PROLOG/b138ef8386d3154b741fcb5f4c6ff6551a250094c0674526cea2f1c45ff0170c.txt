% This is a Prolog program that defines a predicate 'palindrome' which checks if a given list is a palindrome 
% A list is a palindrome if it reads the same backward as forward 

palindrome([]).  % empty list is a palindrome
palindrome([_]). % single element list is a palindrome 
palindrome([X,X]). % two elements list is a palindrome only if they are same

% For a list with more than two elements, check if the first and last elements are equal and check if the middle sublist is a palindrome 
palindrome([H|T]) :- 
    append(Middle, [H], T), % Partition the list into two parts, first with the first element and second with the rest of the elements
    palindrome(Middle). % The sublist is a palindrome if the recursive call to palindrome passes

% When the list is a palindrome, the following predicate will also be true
% It reverses the given list and stores in a new list and checks if they are the same
palindrome(List) :- 
    reverse(List, Reversed), 
    Reversed = List.

% Sample queries:
% ?- palindrome([1,2,3,2,1]). % true, since list is a palindrome 
% ?- palindrome([1,2,2,3]). % false, since list is not a palindrome 
% ?- palindrome([1,2,3,3,2,1]). % true, since list is a palindrome