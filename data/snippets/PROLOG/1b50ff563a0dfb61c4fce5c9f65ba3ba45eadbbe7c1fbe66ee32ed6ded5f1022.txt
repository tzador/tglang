%% Define a predicate to find the sum of two numbers
sum(X, Y, Z) :-
    Z is X + Y.
    
%% Define a predicate to find the factorial of a number
factorial(0, 1). % base case: factorial of 0 is 1
factorial(N, Result) :-
    N > 0,
    NewN is N - 1, % decrease N by 1 to get closer to 0
    factorial(NewN, RecursiveResult), % recursive call to get factorial of NewN
    Result is N * RecursiveResult. % multiply N with the recursive result to get the final factorial
    
%% Define a predicate to check if a list is in ascending order
is_ascending([]). % empty list is always in ascending order
is_ascending([_]). % single element list is always in ascending order
is_ascending([X, Y | T]) :- 
    X =< Y, % check if the first element is smaller than or equal to the second element
    is_ascending([Y|T]). % recursively call with the first element removed 
    
%% Define a predicate to merge two sorted lists into one sorted list
merge_sorted([], Y, Y). % base case: merging empty list with Y results in Y
merge_sorted(X, [], X). % base case: merging X with empty list results in X
merge_sorted([X|T1], [Y|T2], [X|Result]) :-
    X =< Y, % check if X is smaller than or equal to Y
    merge_sorted(T1, [Y|T2], Result). % recursive call with X removed from first list
merge_sorted([X|T1], [Y|T2], [Y|Result]) :-
    X > Y, % check if X is larger than Y
    merge_sorted([X|T1], T2, Result). % recursive call with Y removed from second list
    
%% Define a predicate to insert an element into a sorted list while maintaining the sorted order
insert_sorted(X, [], [X]). % base case: inserting X into empty list results in list with X
insert_sorted(X, [Y|T], [X,Y|T]) :-
    X =< Y. % check if X is smaller than or equal to the first element of the list
insert_sorted(X, [Y|T], [Y|Result]) :-
    X > Y, % check if X is larger than the first element of the list
    insert_sorted(X, T, Result). % recursive call to insert X into the rest of the list while maintaining sorted order