%% This code snippet illustrates a depth-first search algorithm in PROLOG
%% Define the initial state of the problem
initial_state(node(X,Y)):-
    start_position(X,Y).

%% Define the goal state of the problem
goal_state(node(X,Y)):-
    end_position(X,Y).

%% Define the valid moves for the problem
move(node(X1,Y1),node(X2,Y2)):-
    % Move vertically
    X2 is X1+1,
    Y2 is Y1;
    X2 is X1-1,
    Y2 is Y1;
    % Move horizontally
    X2 is X1,
    Y2 is Y1+1;
    X2 is X1,
    Y2 is Y1-1;
    % Move diagonally
    X2 is X1+1,
    Y2 is Y1+1;
    X2 is X1-1,
    Y2 is Y1-1.

%% Define the search algorithm
dfs([],_):-!. % If the path is empty, stop searching
dfs([End|Path],Visited):-
    move(End,Next),
    \+member(Next,Visited), % Check if the next node has already been visited
    dfs([Next,End|Path],[Next|Visited]). % Continue searching from the next node

%% Define the function for finding a path from the initial state to the goal state
solve(Start,Path):-
    dfs([Start],[]), % Begin the search from the initial state
    goal_state(End),
    reverse([End|Path],Visited), % Reverse the found path to get the correct order
    write('Path found: '),write(Visited).

 %% Sample input and output
start_position(3,3). % starting position
end_position(6,6). % goal position
solve(node(3,3),Path). % calling solve function with starting position, Path will contain the found path