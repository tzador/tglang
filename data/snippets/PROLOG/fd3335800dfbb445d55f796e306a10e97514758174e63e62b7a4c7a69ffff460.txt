% Define a predicate that checks if a list is a palindrome
palindrome([]). % An empty list is always a palindrome
palindrome([_]). % A single element list is always a palindrome
palindrome([H|T]) :- reverse(T, R), H == R. % Check if the head is equal to the reversed tail
% Define a predicate to reverse a list
reverse([], []). % An empty list reversed is still an empty list
reverse([H|T], R) :- reverse(T, RT), append(RT, [H], R). % Reverse the tail and append the head to it to get the reversed list
% Define a predicate to check if a list is a sublist of another list
sublist(Sublist, List) :- append(_, X, List), append(Sublist, _, X). % Append two lists together in the middle and check if Sublist appears in between them