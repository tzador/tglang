%% Define a predicate that checks if a list is a permutation of another list
%% Parameters:
%%    list1: first list to check
%%    list2: second list to check
%%
%%    Notes:
%%    - This predicate assumes that both lists are of the same length
%%    - This predicate will return true if the lists are permutations of each other,
%%      and false if they are not.

permutation([], []). % base case - empty lists are permutations of each other

permutation(List1, List2) :-
    select(X, List1, NewList1), % select a random element X from List1 and put the remaining elements in NewList1
    select(X, List2, NewList2), % same for List2 and NewList2
    permutation(NewList1, NewList2). % recursively check if NewList1 and NewList2 are permutations of each other

select(X, [X|Tail], Tail). % if X is the head of the list, remove it and return Tail
select(X, [Head|Tail], [Head|Tail1]) :-
    select(X, Tail, Tail1). % recursively check if X is in the tail of the list

%% Example Usage:

%% ?- permutation([1,2,3], [3,2,1]).
%% true.

%% ?- permutation([1,2,3], [3,2,4]).
%% false.