% This is a program that performs a depth-first search on a directed graph

% Define the graph using facts
edge(a, b).
edge(a, c).
edge(b, d).
edge(c, d).
edge(c, e).
edge(d, f).
edge(e, f).

% Define the goal node
goal(f).

% Define the depth-first search predicate
dfs(Node, Path) :-
    % Check if the current Node is the goal node
    goal(Node),
    % If it is, then add it to the Path
    append([Node], [], Path).
dfs(Node, Path) :-
    % Check if the current Node has been visited before
    \+member(Node, Path),
    % If not, add it to the Path
    append([Node], Path, NewPath),
    % Find all the adjacent nodes of the current node
    findall(AdjNode, edge(Node, AdjNode), AdjNodes),
    % Recursively call dfs on each adjacent node
    member(NextNode, AdjNodes),
    dfs(NextNode, NewPath).