% Rules for calculating the square root of a number
% Square root of a non-negative number is a number whose square is equal to the given number

% Define the square root predicate taking two inputs (number and the square root)
% If the input number is 0, the square root is also 0
sqrt(X, 0) :- X =:= 0.
% If the input number is 1, the square root is also 1
sqrt(1, 1).
% For any other input number, check if it is greater than 1 and calculate the square root using Newton's method
sqrt(X, Y) :- X > 1, newton_method(X, Y, 1).

% Newton's method for calculating the square root
% Start with an initial guess of the square root (Z) equal to the input number
% Calculate the improved guess (Z_new) using the formula
% Z_new = (Z + X/Z) / 2
% If the improved guess (Z_new) is close enough to the previous guess (Z), stop and return the improved guess as the square root
newton_method(X, Z_new, Z) :-
    close_enough(Z_new, Z),
    Z_new = Z.
% If the improved guess (Z_new) is not close enough to the previous guess (Z), continue with the improved guess as the new previous guess
newton_method(X, Z_new, Z) :-
    not(close_enough(Z_new, Z)),
    Z_next is (Z + X/Z) / 2,
    newton_method(X, Z_next, Z_new).

% Check if two numbers are close enough, with a tolerance of 0.00001
close_enough(X, Y) :-
    abs(X - Y) =< 0.00001.