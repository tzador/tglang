/* Pattern matching using variable definitions */
transform([], []).
transform([Head|Tail], [NewHead|NewTail]) :-
  process(Head, NewHead), // process input element and store result in new variable
  transform(Tail, NewTail).
  
/* Calling the transform predicate with input list */
?- transform([1, 2, 3], Result).
/* Output:
Result = [1, 2, 7] 
/* NewHead = 1, NewTail = [2, 7] - explanation of output */

/* Recursive predicate for calculating factorial */
factorial(0, 1). // base case
factorial(N, Result) :- 
  N > 0,
  N1 is N - 1, // variable declaration and arithmetic operation
  factorial(N1, Result1), // recursive call with updated N and Result
  Result is N * Result1. // arithmetic operation to calculate factorial

/* Calling the factorial predicate with input value */
?- factorial(5, Result).
/* Output:
Result = 120
/* Result1 = 24 - intermediate value calculated during recursion */