% Defining a predicate that appends two lists together
append([], L, L).
append([H|L1], L2, [H|L3]) :-
    append(L1, L2, L3).

% A helper predicate to check if two lists are equal
equal([], []).
equal([H1|L1], [H2|L2]) :-
    H1 = H2,
    equal(L1, L2).

% Defining a predicate that returns the longest common prefix of two lists
common_prefix(List1, List2, Prefix) :-
    append(Prefix, _, List1), 
    append(Prefix, _, List2), 
    equal(List1, List2).

% Defining a predicate that returns the longest common suffix of two lists
common_suffix(List1, List2, Suffix) :- 
    append(_, Suffix, List1), 
    append(_, Suffix, List2), 
    equal(List1, List2).

% Defining a predicate that returns the longest common subsequence of two lists
lcs([],_,0).
lcs(_,[],0).
lcs([H|T1], [H|T2], N) :-
    lcs(T1,T2,N1),
    N is N1+1.
lcs([_|T1],[_|T2],N) :-
    lcs(T1,T2,N).

% Defining a predicate that returns the longest common substring of two lists
common_substring(List1, List2, Substring) :-
    common_suffix(List1, List2, Suffix), 
    reverse(Suffix, R), 
    common_prefix(List1, R, Substring).