%% This is a Prolog program that finds the shortest path between two nodes in a graph
%% This program uses the built-in predicates graph/4 and path/3 from the SWI-Prolog library

:- use_module(library(lists)).

shortest_path(Graph, Start, End, Path) :-
    graph(Graph, Nodes, _, _), % get list of all nodes in the graph
    findall(Distance-Route, % generate a list of distances and corresponding routes from Start to End
            (path(Graph, Start, End, Route), length(Route, Distance)),
            Routes),
    keysort(Routes, [ShortestDistance-ShortestRoute|_]), % sort list by distance and get the shortest distance and route
    Path = ShortestRoute, % the shortest path is the first element in the sorted list
    writeln(Path). % print the shortest path to the console

%% This is a sample graph with 7 nodes and 9 edges
graph([a,b,c,d,e,f,g], [a-b,a-d,a-g,b-c,b-e,c-f,e-g,f-g,b-g,c-d,d-f], undirected, weights).

%% Sample queries
%% shortest_path(graph, a, e, Path).
%% Output: `Path = [a, b, e]`  (Note: this is the shortest path as there is an edge between a and b with weight 3 and an edge between b and e with weight 2, making the total distance 5)

%% shortest_path(graph, d, c, Path).
%% Output: `Path = [d, b, c]`  (Note: this is the shortest path as there is an edge between d and b with weight 2 and an edge between b and c with weight 1, making the total distance 3)