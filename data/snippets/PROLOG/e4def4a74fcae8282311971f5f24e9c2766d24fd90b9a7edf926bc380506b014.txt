%Initialize a list
my_list([1,2,3,4,5,6,7,8]).
%Create a rule to find the length of the list
length_of_list([], 0). %Base case, empty list has length 0
length_of_list([_|T], N) :- %Recursive case, remove head of list and increment length by 1
    length_of_list(T, N1),  %Recursive call to find length of tail
    N is N1 + 1. %Increment length by 1
%Create a rule to calculate the sum of all elements in the list
sum_of_list([], 0). %Base case, empty list has a sum of 0
sum_of_list([H|T], Sum) :- %Recursive case, add head of list to sum of tail
    sum_of_list(T, Sum1), %Recursive call to find sum of tail
    Sum is Sum1 + H. %Add head to sum of tail
%Create a rule to reverse a list
reverse_list([], []). %Base case, empty list stays empty
reverse_list([H|T], Reversed) :- %Recursive case, add head to reversed tail
    reverse_list(T, Reversed_tail), %Recursive call to reverse the tail
    append(Reversed_tail, [H], Reversed). %Append reversed tail to head to get reversed list
%Create a rule to check if a list is a palindrome
palindrome(List) :- reverse_list(List, List). %List is a palindrome if it is the same when reversed
%Create a rule to find the Nth element of a list
nth_element(List, N, Element) :- %Base case, N is 1, element is head of list
    N = 1,
    [H|_] = List,
    Element = H.
nth_element(List, N, Element) :- %Recursive case, decrement N and remove head of list
    N > 1,
    [_|T] = List,
    N1 is N - 1, %Decrement N by 1
    nth_element(T, N1, Element). %Recursive call to find N-1th element in tail