%This code checks if the given list is a valid binary tree
isBinaryTree([X, Y|Z]) :-
    %Checks if the list contains only two elements
    length([X, Y|Z], 2),
    %Checks if all elements are either 0 or 1
    member(X, [0, 1]),
    member(Y, [0, 1]),
    %Checks if the tail of the list is an empty list, indicating the end of the tree
    Z = [].

isBinaryTree([X, Y|Z]) :-
    %Checks if the list contains only three elements
    length([X, Y|Z], 3),
    %Checks if the first element is a valid left subtree
    isBinaryTree(X),
    %Checks if the second element is a valid right subtree
    isBinaryTree(Y),
    %Checks if the third element is an empty list, indicating the end of the tree
    Z = [].

isBinaryTree([X, Y|Z]) :-
    %Checks if the list contains more than three elements
    length([X, Y|Z], N),
    N > 3,
    %Checks if the first element is a valid left subtree
    isBinaryTree(X),
    %Checks if the second element is a valid right subtree
    isBinaryTree(Y),
    %Removes the first two elements from the list
    append([X, Y], Rest, [X, Y|Z]),
    %Checks if the remaining elements form a valid binary tree
    isBinaryTree(Rest).