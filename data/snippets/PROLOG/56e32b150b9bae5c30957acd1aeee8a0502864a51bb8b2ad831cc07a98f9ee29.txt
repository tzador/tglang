% Define a rule to find the length of a list
length([],0).
length([_|T], Len) :- length(T,NewLen), Len is NewLen+1.

% Define a rule to check if an element exists in a list
member(X,[X|_]).
member(X,[_|T]) :- member(X,T).

% Define a rule to remove duplicates from a list
removeDuplicates([],[]).
removeDuplicates([H|T],ResList) :- member(H,T), removeDuplicates(T,ResList).
removeDuplicates([H|T], [H|ResList]) :- \+member(H,T), removeDuplicates(T,ResList).

% Define a rule to find the intersection of two lists
intersect([], _, []).
intersect([H|T], List2, [H|ResList]) :- member(H, List2), intersect(T, List2, ResList).
intersect([_|T], List2, ResList) :- intersect(T, List2, ResList).

% Define a rule to flatten a nested list
flatten([],[]).
flatten([H|T], ResList) :- flatten(T,TmpList), append(H,TmpList,ResList).
flatten([H|T], [H|ResList]) :- \+ is_list(H), flatten(T,ResList).

% Define a rule to check if a list is a palindrome (same read forwards and backwards)
palindrome(List) :- reverse(List,List).

% Define a rule to reverse a list
reverse(List, RevList) :- revAcc(List, [], RevList).
revAcc([], Acc, Acc).
revAcc([H|T], Acc, RevList) :- revAcc(T, [H|Acc], RevList).