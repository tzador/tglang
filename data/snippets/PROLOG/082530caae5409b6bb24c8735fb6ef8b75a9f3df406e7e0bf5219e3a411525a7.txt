% This is a knowledge base for a tic-tac-toe game

% Helper predicate to determine if a given list contains all the same elements
all_equal([], _).
all_equal([H|T], H) :- all_equal(T, H).

% Helper predicate to determine if a given move is valid
valid_move(Board, Move) :-
    member(Move, [1,2,3,4,5,6,7,8,9]),
    nth1(Move, Board, empty).

% Predicate that checks for a win condition in a given board
win(Board, Symbol) :-
    % Horizontal wins
    Board = [Symbol, Symbol, Symbol, _, _, _, _, _, _];
    Board = [_, _, _, Symbol, Symbol, Symbol, _, _, _];
    Board = [_, _, _, _, _, _, Symbol, Symbol, Symbol];
    % Vertical wins
    Board = [Symbol, _, _, Symbol, _, _, Symbol, _, _];
    Board = [_, Symbol, _, _, Symbol, _, _, Symbol, _];
    Board = [_, _, Symbol, _, _, Symbol, _, _, Symbol];
    % Diagonal wins
    Board = [Symbol, _, _, _, Symbol, _, _, _, Symbol];
    Board = [_, _, Symbol, _, Symbol, _, Symbol, _, _].

% Predicate that checks for a draw condition in a given board
draw(Board) :-
    not(member(empty, Board)).

% Main predicate that determines the next move for the computer player
choose_move(Board, Player, Move) :-
    % Base case: If the game is already won or it's a draw, there is no valid move to choose
    (win(Board, x); win(Board, o); draw(Board)), !, fail.
    % Recursive case: Check for all possible moves and find the first one that results in a win or a draw for the computer player
    findall(X, (
        valid_move(Board, X),
        modify_list(Board, X, Player, NewBoard),
        (win(NewBoard, o); draw(NewBoard))
    ), ValidMoves),
    % Check if there are any valid moves
    ValidMoves \= [],
    % Choose a random valid move from the list and return it as the chosen move
    random_member(Move, ValidMoves).

% Helper predicate to replace an item at a specific index in a list
modify_list(List, Index, Item, NewList) :-
    % Base case: If the index is 1, replace the first item and return the modified list
    Index = 1, !, NewList = [Item|T], nth1(2, List, T).
    % Recursive case: Split the list at the given index, replace the first item of the second list and join the two lists together again
    List = [H|T], Index > 1, Index1 is Index - 1, modify_list(T, Index1, Item, NewList1), NewList = [H|NewList1].