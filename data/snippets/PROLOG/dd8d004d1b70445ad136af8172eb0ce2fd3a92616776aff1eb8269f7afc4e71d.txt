/* This is a PROLOG program that checks if a given list is a palindrome. */

/* First, we define a predicate called 'palindrome' that takes in a list as input. */
palindrome(List) :-
    /* Next, we use the built-in predicate 'reverse' to reverse the input list and store it in a variable called 'ReversedList'. */
    reverse(List, ReversedList),
    /* Then we check if the original list and the reversed list are equivalent using the built-in predicate '==' and if they are, the list is a palindrome. */
    List == ReversedList.

/* Here, we define another predicate called 'palindrome2' that also takes in a list as input. */
palindrome2(List) :-
    /* We use the built-in predicate 'length' to get the length of the list and store it in a variable called 'Length'. */
    length(List, Length),
    /* Next, we use the built-in predicate 'is' to divide the length by 2 and store it in a variable called 'Mid'. */
    Mid is Length // 2,
    /* Then, we use the built-in predicate 'append' to split the list into two halves, the first half is called 'FirstHalf' and the second half is called 'SecondHalf'. */
    append(FirstHalf, SecondHalf, List),
    /* We use the built-in predicate 'length' again to get the length of the first half and check if it is equal to the middle index. */
    length(FirstHalf, Mid),
    /* We use the built-in predicate 'reverse' to reverse the second half and store it in a variable called 'ReversedSecondHalf'. */
    reverse(SecondHalf, ReversedSecondHalf),
    /* Finally, we check if the first half and the reversed second half are equivalent using the built-in predicate '==' and if they are, the list is a palindrome. */
    FirstHalf == ReversedSecondHalf.