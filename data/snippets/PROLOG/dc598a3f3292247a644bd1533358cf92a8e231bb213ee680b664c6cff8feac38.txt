% This is a program that models a simple banking system
% It defines the predicates 'account' and 'transaction', and allows for deposits and withdrawals

% Defining the 'account' predicate
% An account has an account number, account holder's name, balance amount, and a list of transactions
% A 'transaction' is defined as a tuple with an amount and a type (deposit or withdrawal)
account(AccountNumber, Name, Balance, Transactions):-
    number(AccountNumber), % account number must be a number
    atom(Name), % name must be an atom (string)
    number(Balance), % balance must be a number
    is_list(Transactions). % transactions must be a list

% Defining the 'transaction' predicate
% A transaction is a tuple with an amount and a type
transaction(Amount, Type):-
    number(Amount), % amount must be a number
    atom(Type). % type must be an atom (string)

% Defining the predicate to add a new transaction to an account
% Takes in an account number, the amount, and type (deposit or withdrawal)
add_transaction(AccountNumber, Amount, Type):-
    transaction(Amount, Type), % make sure transaction is valid
    account(AccountNumber, Name, Balance, Transactions), % retrieve account details
    NewBalance is Balance + Amount, % calculate new balance
    append(Transactions, [(Amount, Type)], NewTransactions), % add new transaction to existing transaction list
    retract(account(AccountNumber, Name, Balance, Transactions)), % retract old account details
    assert(account(AccountNumber, Name, NewBalance, NewTransactions)). % assert new account details

% Defining the predicate to deposit an amount into an account
% Takes in an account number and the deposit amount
deposit(AccountNumber, Amount):-
    add_transaction(AccountNumber, Amount, deposit). % add deposit transaction to account

% Defining the predicate to withdraw an amount from an account
% Takes in an account number and the withdrawal amount
% Makes sure account has enough balance for the withdrawal
withdraw(AccountNumber, Amount):-
    account(AccountNumber, _, Balance, _), % retrieve account balance
    Balance >= Amount, % check if balance is enough for withdrawal
    add_transaction(AccountNumber, -Amount, withdraw). % add withdrawal transaction to account