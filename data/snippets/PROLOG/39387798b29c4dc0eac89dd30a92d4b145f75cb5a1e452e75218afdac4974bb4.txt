%%% Prolog program to implement a decision tree %%%

%%% defining the decision tree data structures %%%
TreeRoot(Tree, Root):-
    Tree =.. [tree | Root].

TreeNode(Node, Parent, Children):-
    Node =.. [node, Parent, Children].

%%% helper function to check if an element is a list %%%
is_list([]).
is_list([_|_]).

%%% helper function to check if an element is a leaf node %%%
is_leaf(Node):-
    not(is_list(Node)).

%%% function to insert a node into a decision tree %%%
%%% cases where the given node should be inserted as a leaf %%%
insert_node(Tree, Node, Parent):-
    TreeRoot(Tree, Root),
    is_leaf(Root),
    Root = Node.

insert_node(Tree, Node, Parent):-
    TreeRoot(Tree, Root),
    is_list(Root),
    insert_node(Root, Node, Parent).

%%% helper function to insert a node into a list %%%
insert_into_list(List, Node, Parent):-
    is_leaf(List),
    NewList = [List, [Node, Parent]].
insert_into_list([H|T], Node, Parent):-
    compare(H, Node, Parent, Result),
    insert_into_list(T, Node, Parent, NewList).
%%% if the node is the same as a node in the list, do nothing %%%
insert_into_list(List, _, _, List).
%%% if the node is less than the head of the list, insert it before %%%
insert_into_list([H|T], Node, Parent, NewList):-
    compare(H, Node, Parent, Result),
    not(Result == '>'),
    insert_into_list(T, Node, Parent, NewList1),
    NewList = [NewList1, [H, Parent]].
%%% if the node is greater than the head of the list, insert it after %%%
insert_into_list([H|T], Node, Parent, NewList):-
    compare(H, Node, Parent, Result),
    Result == '>',
    Parent = [_, _, OldList],
    NewParent = [H, OldList, [Node, Parent]],
    NewList = [H|T].


%%% helper function to compare two nodes based on their values %%%
compare(Node1, Node2, _, 'Node1 = Node2'):-
    Node1 == Node2.
compare(Node1, Node2, _, 'Node1 > Node2'):-
    Node1 > Node2.
compare(Node1, Node2, Parent, 'Node1 = Node2'):-
    Parent == [_, 'Node2', _].
compare(Node1, Node2, Parent, 'Node1 < Node2'):-
    Parent == [_, 'Node2', _].