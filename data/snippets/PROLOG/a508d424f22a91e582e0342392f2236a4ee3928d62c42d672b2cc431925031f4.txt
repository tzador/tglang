% Define the predicate equal_length, which takes two lists as parameters
equal_length([], []). % Empty lists have an equal length of zero
equal_length([_|T1], [_|T2]) :- % If both lists have at least one element
    equal_length(T1, T2). % Recursively check the tails of the lists

% Define the predicate append, which takes three lists as parameters
append([], L, L). % Appending an empty list to any list results in the same list
append([H|T], L, [H|T2]) :- % If the first list has at least one element
    append(T, L, T2). % Recursively append the tails of the first list and the second list

% Define the predicate rotate, which takes two lists and a number as parameters
rotate(L, N, R) :-
    length(L, Length), % Get the length of the list
    N2 is N mod Length, % Get the remainder when dividing the number by the length
    split(L, N2, R1), % Split the list at the remainder index
    append(R1, R2, R), % Append the second half of the list to the first half
    append(R2, R1, R). % Append the first half of the list to the second half

% Define the predicate split, which takes a list, a number, and the resulting list
split(L, N, R) :-
    split(L, N, [], R).

% Define the base case for the split predicate
split(R, 0, R, []). % When the number is zero, return the result list and an empty list

% Define the recursive case for the split predicate
split([H|T], N, L1, L2) :- % If the list has at least one element
    N > 0, % and the number is greater than zero
    N2 is N-1, % decrement the number
    split(T, N2, [H|L1], L2). % recursively split the tail of the list and add the head to the first list