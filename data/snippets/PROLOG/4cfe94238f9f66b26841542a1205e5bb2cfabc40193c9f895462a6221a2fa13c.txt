%%%The following code is a program for calculating the total cost of a shopping cart

%%%Define the prices of the items in the shopping cart
price(apple, 1). %Each apple costs $1
price(orange, 2). %Each orange costs $2
price(banana, 3). %Each banana costs $3
price(grapes, 4). %Each grapes costs $4
price(milk, 5). %A bottle of milk costs $5
price(bread, 6). %A loaf of bread costs $6

%%%Define the predicate for calculating the total cost of the shopping cart
%%%The input is a list of items and their quantities
%%%The output is the total cost of the shopping cart
total_cost([], 0). %Base case: if the shopping cart is empty, the total cost is 0
total_cost([(Item, Qty)|Rest], Cost) :-
    price(Item, Item_price), %Get the price of the current item
    total_cost(Rest, Rest_cost), %Recursively call total_cost for the rest of the shopping cart
    Cost is Item_price * Qty + Rest_cost. %Calculate the total cost by multiplying the item price with its quantity and adding it to the cost of the rest of the shopping cart

%%%Example query: To calculate the total cost of a shopping cart with 2 apples, 3 bananas and 1 bottle of milk
%%%The input is a list of (item, quantity) pairs
?- total_cost([(apple,2),(banana,3),(milk,1)], Cost).
%%%Output: Cost = 14 %%%(2 apples at $1 each + 3 bananas at $3 each + 1 bottle of milk at $5) = $14