/* This is a program that finds the shortest path from a given starting node to a goal node in a graph */

/* defining the predicate for finding the path */
findPath(Start, End, Path) :-
    % call the helper predicate with an empty list as the starting path
    findPathHelper(Start, End, [], Path).

/* helper predicate for finding the path */
findPathHelper(Start, End, Visited, Path) :-
    % Start and End are the same, so the path is just the list of visited nodes
    Start == End,
    Path = Visited. 

/* loop through all possible paths from the current node */
findPathHelper(Start, End, Visited, Path) :-
    % get all the connected nodes from the current node
    connected(Start, Next),
    % make sure the next node hasn't already been visited to avoid infinite loops
    not(member(Next, Visited)),
    % recursively call the helper predicate with the new node added to the visited list
    findPathHelper(Next, End, [Start|Visited], Path).

/* predicate for checking if two nodes are connected in the graph */
connected(Node1, Node2) :-
    % list all the possible connections
    path(Node1, Node2).
connected(Node1, Node2) :-
    path(Node2, Node1).

/* example graph */
/* a -> b -> c -> d -> e */
/*           /      */
/*       g /        */
/*     f          */

/* defining the connections in the graph */
path(a, b).
path(b, c).
path(c, d).
path(d, e).
path(b, f).
path(a, g).
path(c, f).

/* calling the findPath predicate with the starting and goal nodes */
?- findPath(a, e, Path).
/* output: Path = [a, b, c, d, e] */