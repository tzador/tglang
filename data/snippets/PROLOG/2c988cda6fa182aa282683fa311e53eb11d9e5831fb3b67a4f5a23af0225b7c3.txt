/*
This code snippet is a representation of a game where the player must navigate through a maze to reach the end point.

The game is played on a grid of cells, with each cell having a designated position and being either empty or containing a wall.
*/

% Defines the available directions for movement in the maze
move(north).
move(south).
move(east).
move(west).

% Defines the rules for moving in the maze
connected(Cell1, Cell2) :- % Checks if two cells are connected
    move(Direction),       % Iterates through available directions
    connected(Cell1, Cell2, Direction).

connected(Cell1, Cell2, east) :- % Checks if two cells are connected in the east direction
    adjacent(Cell1, Cell2),      % Checks if the two cells are adjacent
    east(Cell1),                 % Checks if the first cell is to the east of the second cell
    not(wall(Cell1, east)).      % Checks if there is no wall between the two cells in the east direction

% Defines the initial state of the maze
initial_state(State) :-
    State = [cell(1,1,start),     % Sets the starting point of the game at cell (1,1)
             cell(5,5,end),       % Sets the end point of the game at cell (5,5)
             cell(2,2,empty),     % Sets the second cell as empty
             cell(3,2,wall),      % Sets the third cell as a wall
             cell(4,3,wall),      % Sets the fourth cell as a wall
             cell(1,4,empty),     % Sets the fifth cell as empty
             cell(3,5,empty),     % Sets the sixth cell as empty
             cell(5,1,empty)].    % Sets the seventh cell as empty

% Defines the rules for navigating through the maze
navigate(State, Path) :-
    initial_state(State),       % Sets the initial state of the maze
    find_path(State, Path).     % Finds the path from the starting point to the end point

% Defines the base case for the find_path predicate
find_path(State, Path) :-
    member(cell(EndX, EndY, end), State),     % Checks if the end point has been reached
    Path = [cell(EndX, EndY, end)].           % Adds the end point to the path

% Defines the recursive case for the find_path predicate
find_path(State, Path) :-
    member(cell(CurrentX, CurrentY, Current), State),              % Gets the current cell from the state
    select(cell(CurrentX, CurrentY, Current), State, NewState),   % Removes the current cell from the state
    move(Direction),                         % Iterates through available directions
    connected(cell(CurrentX, CurrentY, Current), Next, Direction),      % Checks if the next cell is connected to the current cell in the selected direction
    find_path([cell(Next)|NewState], TempPath),        % Recursively calls find_path with the updated state and a temp path
    Path = [cell(CurrentX,CurrentY,Current)|TempPath]. % Updates the path with the current cell and the temp path