% A predicate to check if a list is a palindrome
palindrome(X) :-
    reverse(X, X).

% A predicate to check if a list is a permutation of another list
permutation([], []).
permutation(X, [H|T]) :-
    select(H, X, Y),
    permutation(Y, T).

% A predicate to find all sublists of a given list
sublist(X, Y) :-
    append(_, Z, Y), % append a list to Z
    append(X, _, Z). % append a list to X and make it Z

% A predicate to find the intersection of two lists
intersect([], _, []). % empty list
intersect([H|T], Y, [H|Z]) :-
    member(H, Y), % check if H is in Y
    intersect(T, Y, Z). % nested intersect call 
intersect([_|T], Y, Z) :-
    intersect(T, Y, Z).