%% Prolog code to implement the Towers of Hanoi puzzle

%% Definition of the predicate hanoi, which takes n, source, auxiliary, and destination as parameters
hanoi(0, _, _, _) :- !.
hanoi(N, Source, Auxiliary, Destination) :-
    M is N-1, % M is the number of disks to be moved from Source to Auxiliary
    hanoi(M, Source, Destination, Auxiliary), % Move M disks from Source to Auxiliary
    move(Source, Destination), % Move the largest disk from Source to Destination
    hanoi(M, Auxiliary, Source, Destination). % Move the M disks from Auxiliary to Destination

%% Definition of the predicate move, which prints the movement of a disk from one peg to another
move(Source, Destination) :-
    write('Move disk from peg '),
    write(Source),
    write(' to peg '),
    write(Destination),
    nl.

%% Sample query: hanoi(3, 'A', 'B', 'C').
%% Output:
%% Move disk from peg A to peg C
%% Move disk from peg A to peg B
%% Move disk from peg C to peg B
%% Move disk from peg A to peg C
%% Move disk from peg B to peg A
%% Move disk from peg B to peg C
%% Move disk from peg A to peg C