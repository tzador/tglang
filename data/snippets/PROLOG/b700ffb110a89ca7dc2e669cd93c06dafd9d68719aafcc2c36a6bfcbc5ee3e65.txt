%% This is a Prolog program that implements a binary search tree data structure.

% This is the node constructor, it represents a single node in the tree.
% A node consists of a key (value) and two branches, left and right.
node(Key, Left, Right).

% This is a helper predicate that checks if a tree is empty.
% An empty tree is represented as 'nil'.
nil(nil).

% This predicate inserts a new node into the tree.
% If the tree is empty, then the node becomes the root.
% If the key is less than the root, it is inserted into the left subtree.
% If the key is greater than the root, it is inserted into the right subtree.
insert(Key, nil, node(Key, nil, nil)).
insert(Key, node(RootKey, Left, Right), node(RootKey, NewLeft, Right)) :-
    Key < RootKey,
    insert(Key, Left, NewLeft).
insert(Key, node(RootKey, Left, Right), node(RootKey, Left, NewRight)) :-
    Key > RootKey,
    insert(Key, Right, NewRight).

% This predicate searches for a node with the given key in the tree.
% If the key matches the root key, then the node is found.
% If the key is less than the root key, the search continues in the left subtree.
% If the key is greater than the root key, the search continues in the right subtree.
search(Key, node(Key, _, _)) :- !.
search(Key, node(RootKey, Left, _)) :-
    Key < RootKey,
    search(Key, Left).
search(Key, node(RootKey, _, Right)) :-
    Key > RootKey,
    search(Key, Right).

% This predicate deletes a node with the given key from the tree.
% If the tree is empty, then no changes are made.
% If the key matches the root key, then the root node is deleted and the tree is rebalanced.
% If the key is less than the root key, the search and delete continue in the left subtree.
% If the key is greater than the root key, the search and delete continue in the right subtree.
delete(Key, nil, nil).
delete(Key, node(Key, Left, Right), Tree) :-
    merge(Left, Right, Tree).
delete(Key, node(RootKey, Left, Right), node(RootKey, NewLeft, Right)) :-
    Key < RootKey,
    delete(Key, Left, NewLeft).
delete(Key, node(RootKey, Left, Right), node(RootKey, Left, NewRight)) :-
    Key > RootKey,
    delete(Key, Right, NewRight).

% This predicate merges two trees into a single tree while maintaining the binary search tree property.
merge(nil, Tree, Tree).
merge(node(Key, Left, Right), Tree, node(Key, Left, NewRight)) :-
    merge(Right, Tree, NewRight).

% This predicate checks if a tree is a valid binary search tree.
% A tree is valid if all nodes in the left subtree are less than the root key
% and all nodes in the right subtree are greater than the root key,
% and the left and right subtrees are also valid binary search trees.
isBST(nil).
isBST(node(_, nil, nil)).
isBST(node(RootKey, Left, Right)) :-
    isBST(Left),
    isBST(Right),
    leftMax(Left, Max),
    rightMin(Right, Min),
    Max =< RootKey,
    Min >= RootKey.

% This predicate finds the maximum key in a tree.
leftMax(nil, 0). % returns 0 as default, since a key cannot be 0
leftMax(node(Key, nil, _), Key).
leftMax(node(_, Left, _), Max) :-
    leftMax(Left, Max).

% This predicate finds the minimum key in a tree.
rightMin(nil, 0). % returns 0 as default, since a key cannot be 0
rightMin(node(Key, _, nil), Key).
rightMin(node(_, _, Right), Min) :-
    rightMin(Right, Min).