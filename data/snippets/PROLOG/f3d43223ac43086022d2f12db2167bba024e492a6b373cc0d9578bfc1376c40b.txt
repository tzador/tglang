% This predicate will check if a given list is a palindrome or not
is_palindrome(List) :-
  reverse(List, List). % if the list is equal to its reverse, it is a palindrome

% This predicate will find the factorial of a given number
factorial(0, 1). % base case, 0 factorial is 1
factorial(N, Res) :-
  N > 0,
  N1 is N-1, % decrement N by 1
  factorial(N1, Res1), % recursively find factorial of N-1
  Res is N * Res1. % multiply N with the factorial of N-1 to get the result

% This predicate will find the maximum element in a list
max(List, Max) :-
  length(List, N), % get the length of the list
  N > 0, % list must have at least one element
  element(List, 1, Max), % assume first element is maximum
  aux_max(2, N, List, Max). % call helper predicate with initial index 2

% helper predicate to compare max with other elements in the list
aux_max(N, N, _, _). % base case, reached end of list
aux_max(I, N, List, Max) :-
  I < N, % check if index is less than length of list
  element(List, I, Element), % get element at current index
  Max >= Element, % check if current max is greater than or equal to current element
  aux_max(I+1, N, List, Max). % call helper predicate with next index
aux_max(I, N, List, Max) :-
  I < N,
  element(List, I, Element),
  Max < Element, % if current max is less than current element, reassign max
  aux_max(I+1, N, List, Element). % call helper predicate with next index

% This predicate will find the element at a given index in a list
element([H|_], 1, H). % base case, element at index 1 is head of list
element([_|T], N, Res) :-
  N > 1,
  N1 is N-1, % decrement N by 1
  element(T, N1, Res). % recursively find element at N-1th index in tail of list