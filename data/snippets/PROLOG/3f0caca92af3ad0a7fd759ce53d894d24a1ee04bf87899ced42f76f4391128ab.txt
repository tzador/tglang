% A predicate that checks if the given list is a palindrome
% Usage: check_palindrome(List)

check_palindrome([]). % Empty list is a palindrome
check_palindrome([_]). % Single element list is a palindrome 
check_palindrome([X|Xs]) :- 
    reverse_list(Xs, Ys), % Reverse the list 
    X == Ys. % Check if the first element is equal to the reversed list

% A predicate that reverses a given list 
% Usage: reverse_list(List, Reversed)

reverse_list([], []). % Reversing an empty list results in an empty list 
reverse_list([X], [X]). % Reversing a single element list results in the same list 
reverse_list([X|Xs], Reversed) :- 
    reverse_list(Xs, Reversed1), % Recursively reverse the tail of the list 
    append(Reversed1, [X], Reversed). % Append the head to the reversed tail to get the final list 

% A predicate that appends two lists 
% Usage: append(List1, List2, Combined)

append([], L, L). % Appending an empty list to another list results in the same list 
append([X|Xs], Ys, [X|Zs]) :- 
    append(Xs, Ys, Zs). % Recursively append the tails of the lists, keeping the head intact