% Defining a rule that determines the average of a list of numbers
average_list([], 0). % Base case: empty list has an average of 0
average_list(List, Average) :- % Recursive case:
    sum_list(List, Sum), % Using built-in predicate to sum up all numbers in list
    length(List, Length), % Using built-in predicate to get total number of elements in list
    Average is Sum/Length. % Calculating average

% Defining a predicate to find the minimum element in a list
min_list([X], X). % Base case: only one element in list, that is the minimum
min_list([H|T], H) :- % Recursive case: first element is the minimum
    min_list(T, Min), % Finding minimum in the rest of the list
    H =< Min. % Comparing first element to minimum found in rest of list
min_list([H|T], Min) :- % Recursive case: minimum in rest of list is not the first element
    min_list(T, Min), % Finding the minimum in the rest of the list
    H > Min. % Comparing first element to minimum found in rest of list