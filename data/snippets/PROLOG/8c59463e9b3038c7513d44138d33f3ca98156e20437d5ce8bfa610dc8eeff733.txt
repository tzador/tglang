% This is a Prolog code snippet that performs a depth-first search on a given graph
% First, declare a predicate to check if a node is a member of a list
member(X,[X|_]).
member(X,[_|T]) :- member(X,T).

% Next, declare a predicate to check if two nodes are connected in a graph
connected(X,Y,Graph) :- member([X,Y],Graph).
connected(X,Y,Graph) :- member([Y,X],Graph).

% Then, declare a predicate to perform depth-first search
dfs(Start,End,Graph,Path) :-
    dfs(Start,End,Graph,[Start],Path).

% The helper function for dfs
dfs(End,End,_,Visited,ReversePath) :-
    reverse(Visited,ReversePath).

% Main search algorithm for dfs
dfs(Start,End,Graph,Visited,Path) :-
    connected(Start,Mid,Graph),
    \+member(Mid,Visited),
    dfs(Mid,End,Graph,[Mid|Visited],Path).