% This is a Prolog program that checks if an element is a member of a list

member(X, [X|_]). % If the first element of the list is X, X is a member of the list
member(X, [_|T]) :- % Otherwise, if X is a member of the tail of the list, then X is a member of the list
  member(X, T).

% Example usage:

?- member(3, [1,2,3,4]).
% Should return true, since 3 is a member of the list [1,2,3,4]

?- member(a, [b,c,d]).
% Should return false, since a is not a member of the list [b,c,d]

% The program uses recursion to check if an element is a member of the list.
% The first predicate checks if the element is the head of the list, if so, it is a member.
% If not, the second predicate recursively checks if the element is a member of the tail of the list.