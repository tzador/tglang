% This is a Prolog code snippet that calculates the nth fibonacci number using dynamic programming.
% The code defines a recursive predicate 'fibonacci_n', which takes an integer 'N' and returns the Nth fibonacci number.
% The recursive predicate 'fibonacci_n' makes use of a dynamic predicate 'fibonacci_dp', which stores previously calculated fibonacci numbers for efficiency.

:- dynamic fibonacci_dp/2.                         % define a dynamic predicate to store fibonacci numbers

fibonacci_n(N, Fib) :-                             % define recursive predicate 'fibonacci_n' with two arguments - N and Fib
    (
        integer(N) ->                              % check if N is an integer
        N > 0 ->                                   
        (
            fibonacci_dp(N, Fib_DP)                % check if Nth fibonacci number is already stored in the dynamic predicate
            -> Fib = Fib_DP                        % if yes, assign the value of Fib_DP to Fib
            ;                                      % if not, calculate Nth fibonacci number using recursion
            N =:= 1 -> Fib = 1                      % base case 1: if N = 1, Fib = 1
            ;
            N =:= 2 -> Fib = 1                      % base case 2: if N = 2, Fib = 1
            ;
            N1 is N - 1,                            % calculate N-1 for recursive function call
            N2 is N - 2,                            % calculate N-2 for recursive function call
            fibonacci_n(N1, Fib1),                  % recursively call 'fibonacci_n' to calculate N-1th fibonacci number
            fibonacci_n(N2, Fib2),                  % recursively call 'fibonacci_n' to calculate N-2th fibonacci number
            Fib is Fib1 + Fib2,                     % calculate Nth fibonacci number using the formula
            assertz(fibonacci_dp(N, Fib))           % assert the calculated fibonacci number to the dynamic predicate for future use
        )
        ;                                           
        format('Error: Argument must be a positive integer.').   % if N is not a positive integer, print error message
    ).