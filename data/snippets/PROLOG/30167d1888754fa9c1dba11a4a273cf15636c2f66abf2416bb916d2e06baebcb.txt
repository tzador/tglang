% Defining a predicate to check if two lists have the same length
same_length([], []). % If both lists are empty, they have the same length
same_length([_|T1], [_|T2]) :- same_length(T1, T2). % Recursively check if the tails have the same length

% Defining a predicate to append two lists
% append(List1, List2, Result)
append([], L, L). % Appending an empty list to any other list results in that same list
append([H|T], L, [H|Result]) :- append(T, L, Result). % Recursively append the tails to the result list

% Defining a predicate to merge two sorted lists into one sorted list
% merge(List1, List2, Result)
merge([], L, L). % If one list is empty, the merged list is the other list
merge(K, [], K). % If one list is empty, the merged list is the other list
merge([H1|T1], [H2|T2], [H1|Result]) :- H1 =< H2, merge(T1, [H2|T2], Result). % If the head of list 1 is smaller, merge it and continue merging list 1 with the tail of list 2
merge([H1|T1], [H2|T2], [H2|Result]) :- H1 > H2, merge([H1|T1], T2, Result). % If the head of list 2 is smaller, merge it and continue merging list 2 with the tail of list 1

% Defining a predicate to merge sort a list
% mergesort(List, Result)
mergesort([], []). % An empty list is already sorted
mergesort([X], [X]). % A list with only one element is already sorted
mergesort(List, Result) :- % If the list has more than one element, split it into two sublists and merge them
	split(List, List1, List2), % Split the list into two sublists
	mergesort(List1, Sorted1), % Recursively call mergesort on the two sublists
	mergesort(List2, Sorted2),
	merge(Sorted1, Sorted2, Result). % Merge the two sorted sublists into one sorted list

% Helper predicate to split a list into two sublists
% split(List, List1, List2)
split([], [], []). % An empty list can be split into two empty lists
split([X], [X], []). % A list with only one element can be split into that element and an empty list
split([H1, H2|T], [H1|T1], [H2|T2]) :- split(T, T1, T2). % Recursively split the tail of the list into two sublists

% Defining a predicate to find the nth element of a list
% nth_element(List, N, Result)
nth_element([X|_], 1, X). % The first element of the list is the nth element if N is 1
nth_element([_|T], N, Result) :- N > 1, NewN is N-1, nth_element(T, NewN, Result). % Recursively decrease N until it reaches 1 and then return the head of the remaining list as the result