%% rule to check if two numbers are equal
equal(X, X).
%% rule to check if two numbers are not equal
not_equal(X, Y) :- 
    X \= Y.
%% rule to check if a list is empty
empty([]).

%% rule to get the length of a list
%% this rule uses an accumulator to store the count
list_length(List, Length) :-
    list_length(List, 0, Length).
%% base case, when the accumulator reaches the end of the list
list_length([], Acc, Acc).
%% recursive case, adds 1 to the accumulator for each element in the list
list_length([_|T], Acc, Length) :-
    NewAcc is Acc + 1,
    list_length(T, NewAcc, Length).
%% rule to check if a list is a palindrome
palindrome(List) :-
    reverse_list(List, List). % check if the list is the same when reversed
%% rule to reverse a list
%% this rule uses an accumulator to store the reversed list
reverse_list(List, RevList) :-
    reverse_list(List, [], RevList).
%% base case, when the original list is empty, the reversed list is the accumulator
reverse_list([], RevList, RevList).
%% recursive case, append the head of the list to the accumulator
%% and recursively call on the tail of the list
reverse_list([H|T], Acc, RevList) :-
    reverse_list(T, [H|Acc], RevList).