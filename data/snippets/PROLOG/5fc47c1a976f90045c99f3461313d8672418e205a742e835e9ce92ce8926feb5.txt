% Define a predicate that checks if a list contains a specific element.
% The predicate should take in two arguments, the element to be searched for and the list to be checked.
% It should return true if the element is present in the list and false otherwise.

%% input: X - element to be searched for, L - list to be checked
%% output: true/false

contains(X, L) :-
    member(X, L).

% Define a predicate that calculates the factorial of a number.
% The predicate should take in one argument, the number to be calculated.
% It should return the factorial value of the given number.

%% input: N - number to be calculated
%% output: factorial value

factorial(N) :-
    N =< 1,
    !,
    1.
factorial(N) :-
    N1 is N - 1,
    factorial(N1, N, 1).

factorial(0, N, N).
factorial(I, N, F) :-
    F1 is I * F,
    I1 is I - 1,
    factorial(I1, N, F1).

% Define a predicate that counts the number of occurrences of a specific element in a list.
% The predicate should take in two arguments, the element to be counted and the list to be checked.
% It should return the number of occurrences of the element in the list.

%% input: X - element to be counted, L - list to be checked
%% output: number of occurrences

count_occurrences(X, L, N) :-
    count_occurrences(X, L, 0, N).

count_occurrences(_, [], N, N).
count_occurrences(X, [X|T], Acc, N) :-
    Acc1 is Acc + 1,
    count_occurrences(X, T, Acc1, N).
count_occurrences(X, [_|T], Acc, N) :-
    count_occurrences(X, T, Acc, N).