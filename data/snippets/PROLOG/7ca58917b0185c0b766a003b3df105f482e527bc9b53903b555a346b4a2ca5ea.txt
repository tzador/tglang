% This is a complex Prolog program that defines and uses multiple predicates and rules for manipulating a database of student information.

% First, we define the structure of a student record and initialize an empty database.
database([
    student(name, age, major),
    student(name, age, major),
    student(name, age, major)
]).

% We then define a predicate that allows us to add a new student record to the database. Note that we are using asserta/1 to add the new record at the beginning of the database list.
add_student(Name, Age, Major) :- 
    database(Students),
    asserta(student(Name, Age, Major)),
    retract(database(Students)).

% Now let's define a rule that allows us to retrieve the name of a student given their major. Here we are using member/2 to iterate through the database and check for a match.
get_name_by_major(Major, Name) :-
    database(Students),
    member(student(Name, _, Major), Students).

% Next, we define a rule that allows us to update a student's major given their name. We are using memberchk/2 to check if the given name exists in the database, and replace the old record with the new one using replace/3.
update_major_by_name(Name, NewMajor) :-
    database(Students),
    memberchk(student(Name, Age, _), Students),
    replace(Students, student(Name, Age, _), student(Name, Age, NewMajor), NewStudents),
    retract(database(Students)),
    asserta(database(NewStudents)).

% Lastly, we define a rule that allows us to delete a student record from the database. We are using select/3 to remove the matching record from the list.
delete_student(Name) :-
    database(Students),
    select(student(Name, _, _), Students, NewStudents),
    retract(database(Students)),
    asserta(database(NewStudents)).

% Some utility predicates used in the rules above.
replace([_|T], X, Y, [Y|T]) :-
    replace(T, X, Y, T).
replace([X|T], X, Y, [Y|T]).
replace([H|T], X, Y, [H|R]) :-
    replace(T, X, Y, R).

% Sample usage of our predicates and rules.
?- add_student("John", 23, "Computer Science").
?- add_student("Jane", 21, "English").
?- add_student("Bob", 25, "Biology").

?- get_name_by_major("Computer Science", Name).
Name = "John".

?- update_major_by_name("Jane", "Computer Science").
?- get_name_by_major("Computer Science", Name).
Name = "Jane".

?- delete_student("Bob").
?- get_name_by_major("Biology", Name).
false. % returns false if the record was successfully deleted from the database.