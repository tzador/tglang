% Define the predicate ancestor with two arguments, parent and child.
ancestor(Parent, Child) :-
    % The parent is a direct ancestor of the child.
    % First, get the direct parent of the child.
    parent(Parent, Child);
    % The parent is an indirect ancestor of the child.
    % Get the intermediate ancestor and recursively check if it is a direct ancestor.
    parent(Ancestor, Child),
    ancestor(Parent, Ancestor).

% Define a list of individuals to be used as example data.
% The individuals are in the form of name-age pair.
individuals([jane-38, john-40, mary-65,
             jack-70, alice-90, peter-95]).

% Define the predicate parent with two arguments, parent and child.
% First, get the individuals list and check if the parent-child pair exists.
parent(Parent, Child) :-
    % Check if the parent-child pair exists in the individuals list.
    individuals(Individuals),
    member(Parent-Age1, Individuals),
    member(Child-Age2, Individuals),
    % The parent must be older than the child.
    Age1 > Age2.

% Define the predicate siblings with two arguments, sibling1 and sibling2.
% First, get the individuals list and check if the siblings exist.
siblings(Sibling1, Sibling2) :-
    % Check if the siblings exist in the individuals list.
    individuals(Individuals),
    % Get the names and ages of the siblings.
    member(Sibling1-Age1, Individuals),
    member(Sibling2-Age2, Individuals),
    % The siblings must have the same parent.
    parent(Parent, Sibling1),
    parent(Parent, Sibling2),
    % The siblings must have different names and ages.
    Sibling1 \= Sibling2,
    Age1 \= Age2.