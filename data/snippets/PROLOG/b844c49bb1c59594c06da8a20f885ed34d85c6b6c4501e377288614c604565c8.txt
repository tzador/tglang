/* 
  This is a complex program written in PROLOG.
  It implements the A* search algorithm to find the shortest path between two nodes in a directed graph.
  The heuristic used is the Manhattan distance between the current node and the goal node.
  The program takes in the graph, start node, goal node, and returns the shortest path and its cost (if there is a path).
 */

% predicate to check if a path exists between two nodes
path_exists(Graph, Start, Goal, Path, Cost) :-
  % call the A* search algorithm with the graph, start node, goal node, and empty list for visited nodes
  astar(Graph, Start, Goal, [], [], Path, Cost).

% base case: if the current node is the goal node, add it to the visited nodes and return the path and cost
astar(Graph, Goal, Goal, Path, Visited, NewPath, Cost) :-
  reverse([Goal | Visited], NewPath), % reverse the visited nodes to get the correct path
  path_cost(Path, Cost). % calculate the cost of the path

% recursive case: find the next node with the minimum heuristic value and add it to the visited nodes
astar(Graph, Current, Goal, Path, Visited, NewPath, Cost) :-
  % find the adjacent nodes of the current node and calculate their heuristic values
  findall((Next, Heuristic), (graph(Current, Next, Cost), heuristic(Next, Goal, Heuristic)), Children),
  sort(2, @=<, Children, SortedChildren), % sort the children based on their heuristic value
  [Next | OtherChildren] = SortedChildren, % get the next node with the minimum heuristic value
  \+ member(Next, Visited), % check if the next node has already been visited
  astar(Graph, Next, Goal, [Current | Path], [Current | Visited], NewPath, Cost).

% predicate to get the cost of a path
path_cost([Node1, Node2 | Path], Cost) :-
  path_cost([Node2 | Path], NewCost),
  graph(Node1, Node2, EdgeCost),
  Cost is NewCost + EdgeCost.
path_cost([_], 0). % base case: if the path has only one node, its cost is 0

% predicate to calculate the Manhattan distance (heuristic) between two nodes
heuristic((X1, Y1), (X2, Y2), Distance) :-
  abs(X2 - X1, DX),
  abs(Y2 - Y1, DY),
  Distance is DX + DY.