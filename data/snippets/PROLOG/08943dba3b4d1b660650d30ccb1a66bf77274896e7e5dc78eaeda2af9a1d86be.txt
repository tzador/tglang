% Define a predicate that checks if a list is a palindrome.
% A list is a palindrome if it reads the same backward as forward.
% Example: palindrome([1, 2, 3, 2, 1]) should return true.
% Example: palindrome([1, 2, 3, 4]) should return false.
% This predicate uses an accumulator to store the reversed list
palindrome(List) :-
  palindrome(List, []).

% Define the base case where the reversed list matches the original list
palindrome([], Acc) :-
  reverse(Acc, Acc).

% Define the recursive case
% Add the head of the original list to the accumulator
% Continue recursively with the tail of the original list
palindrome([Head|Tail], Acc) :-
  palindrome(Tail, [Head|Acc]).

% Define the predicate that reverses a list
reverse(List, RevList) :-
  reverse(List, [], RevList).

% Define the base case where the original list is empty
% Return the reversed list
reverse([], RevList, RevList).

% Define the recursive case
% Add the head of the original list to the beginning of the reversed list
reverse([Head|Tail], Acc, RevList) :-
  reverse(Tail, [Head|Acc], RevList).