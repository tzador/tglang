/* This is a predicate that checks if an element is a member of a list.
   Note: This snippet uses recursion. */
   
member(X, [X|_]). % Base case: checks if X is the head of the list.

member(X, [_|T]) :- % Recursive case: checks if X is a member of the tail of the list.
    member(X, T).
    
/* This is a predicate that finds the largest element in a list.
   Note: This snippet uses recursion and a helper predicate. */

largest_element([X], X). % Base case: list with one element, X is the largest.

largest_element([H|T], B) :- % Recursive case 1: H is larger than B, B becomes H and check T.
    H > B,
    largest_element(T, H).

largest_element([H|T], B) :- % Recursive case 2: H is smaller or equal to B, check T with B.
    H =< B,
    largest_element(T, B).
    
/* This is a predicate that calculates the sum of elements in a list.
   Note: This snippet uses recursion and an accumulator. */

sum_list(L, S) :- % Call helper predicate with accumulator 0.
    sum_list_helper(L, 0, S).

sum_list_helper([], Acc, Acc). % Base case: empty list, return Acc as sum.

sum_list_helper([H|T], Acc, S) :- % Recursive case: add H to Acc and check T.
    New_acc is Acc + H,
    sum_list_helper(T, New_acc, S).