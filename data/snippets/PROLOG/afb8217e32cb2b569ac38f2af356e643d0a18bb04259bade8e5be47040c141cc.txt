% This is a program in PROLOG that implements a naive-bayes network
% for classifying fruits based on their attributes.

% Define the attributes of fruits.
% Each fruit is a combination of a shape and a color.
attribute(fruit, [shape, color]).

% Define the possible values for shape and color.
% Shapes can either be round or oblong, colors can either be red or yellow.
shape(round).
shape(oblong).
color(red).
color(yellow).

% Define examples of fruits and their corresponding attributes.
% The examples are represented by two lists, one for shape and one for color.
example(apple, [round, red]).
example(banana, [oblong, yellow]).
example(lemon, [oblong, yellow]).
example(orange, [round, orange]).
example(peach, [round, yellow]).

% Declare the probability of each fruit being either a round or oblong shape.
% 70% of fruits are round, 30% are oblong.
0.7::shape(fruit, round).
0.3::shape(fruit, oblong).

% Declare the probability of each fruit being either a red or yellow color.
% 60% of fruits are red, 40% are yellow.
0.6::color(fruit, red).
0.4::color(fruit, yellow).

% Define a rule to classify a fruit based on its attributes.
% The classification is based on the probabilities declared earlier.
fruit_class(Class, Fruit):-
    attribute(Fruit, AttributeList),
    calculate_shape_prob(AttributeList, ShapeProb),
    calculate_color_prob(AttributeList, ColorProb),
    calculate_total_prob(ShapeProb, ColorProb, TotalProb),
    classification(TotalProb, Class).

% Calculate the probability of a fruit being round or oblong.
calculate_shape_prob(_, 0.5).
calculate_shape_prob(AttributeList, Prob):-
    select(shape, AttributeList, Shape),
    shape(fruit, Shape),
    calculate_shape_prob(AttributeList, NextProb),
    Prob is 0.7 * NextProb.
calculate_shape_prob(AttributeList, Prob):-
    select(shape, AttributeList, Shape),
    not(shape(fruit, Shape)),
    calculate_shape_prob(AttributeList, NextProb),
    Prob is 0.3 * NextProb.

% Calculate the probability of a fruit being red or yellow.
calculate_color_prob(_, 0.5).
calculate_color_prob(AttributeList, Prob):-
    select(color, AttributeList, Color),
    color(fruit, Color),
    calculate_color_prob(AttributeList, NextProb),
    Prob is 0.6 * NextProb.
calculate_color_prob(AttributeList, Prob):-
    select(color, AttributeList, Color),
    not(color(fruit, Color)),
    calculate_color_prob(AttributeList, NextProb),
    Prob is 0.4 * NextProb.

% Calculate the total probability of a fruit being classified as a certain class.
calculate_total_prob(ShapeProb, ColorProb, TotalProb):-
    TotalProb is ShapeProb * ColorProb.

% Define the possible classifications for fruits.
% Fruits can be either apples or non-apples.
classification(TotalProb, apple) :-
    TotalProb >= 0.5.
classification(TotalProb, non-apple) :-
    TotalProb < 0.5.

% Query the fruit_class rule to classify a fruit.
% Example query: fruit_class(Class, lemon).
% Output: Class = non-apple.