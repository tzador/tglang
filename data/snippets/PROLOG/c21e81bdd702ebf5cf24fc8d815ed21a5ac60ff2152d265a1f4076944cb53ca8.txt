% This is a comment in PROLOG.

% This is a fact in PROLOG, it represents a known relationship between two objects.
% In this example, we have a fact stating that 'apple' is a type of 'fruit'.
fruit(apple).

% This is a rule in PROLOG, it represents a logical relationship between multiple objects.
% In this example, we have a rule saying that if X is a type of Y, then X is also a type of Z.
is_type_of(X, Z) :- is_type_of(X, Y), is_type_of(Y, Z).

% This is a query in PROLOG, it asks the system to find a solution to a logical problem.
% In this example, we are asking if there exists a type X that is a type of fruit.
?- is_type_of(X, fruit).

% This is a complex rule in PROLOG, it uses built-in predicates and variables to create a logical relationship.
% In this example, we are defining a rule that checks if X is a type of Y and Y is a type of Z, 
% and if so, checks if X is also a type of Z. If not, it recursively checks if X is a type of Y 
% and Y is a type of Z until a match is found.
type_of(X, Z) :- is_type_of(X, Y), is_type_of(Y, Z), 
                 X \= Z, type_of(X, Z).
                 
% This is a complex query in PROLOG, it uses cut and fail operators to limit the search space and 
% ensure that only the first solution is returned.
% In this example, we are asking for the first type X that is a type of fruit, 
% and if there are more than one type of fruit, we only want the first one.
?- type_of(X, fruit), !, write(X).