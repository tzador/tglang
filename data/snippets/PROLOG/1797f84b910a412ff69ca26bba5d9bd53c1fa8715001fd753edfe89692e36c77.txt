% These predicates represent different types of people
% The first argument is the person's name
% The second argument is the person's age
% The third argument is the person's gender

person(john, 25, male).
person(mary, 30, female).
person(kate, 20, female).
person(bob, 35, male).
person(mike, 40, male).
person(lisa, 45, female).

% This predicate checks if a person is above a certain age
% The first argument is the person's name
% The second argument is the minimum age

above_age(Person, MinAge) :-
    person(Person, Age, _),
    Age >= MinAge.

% This predicate checks if a person is below a certain age
% The first argument is the person's name
% The second argument is the maximum age

below_age(Person, MaxAge) :-
    person(Person, Age, _),
    Age =< MaxAge.

% This predicate checks if a person is of a given gender
% The first argument is the person's name
% The second argument is the gender

is_gender(Person, Gender) :-
    person(Person, _, Gender).

% This predicate returns a list of all males
% The argument is a list of male names

get_males(Males) :-
    findall(Name, person(Name, _, male), Males).

% This predicate returns a list of all females
% The argument is a list of female names

get_females(Females) :-
    findall(Name, person(Name, _, female), Females).

/* SAMPLE OUTPUT:
person(john, 25, male).
person(mary, 30, female).
person(kate, 20, female).
person(bob, 35, male).
person(mike, 40, male).
person(lisa, 45, female).

above_age(Person, MinAge) :=
    person(Person, Age, _),
    Age >= MinAge.

below_age(Person, MaxAge) :-
    person(Person, Age, _),
    Age =< MaxAge.

is_gender(Person, Gender) :-
    person(Person, _, Gender).

get_males(Males) :-
    findall(Name, person(Name, _, male), Males).

get_females(Females) :-
    findall(Name, person(Name, _, female), Females).
*/