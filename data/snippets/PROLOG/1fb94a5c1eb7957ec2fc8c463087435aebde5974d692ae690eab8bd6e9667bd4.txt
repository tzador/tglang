% This is a Prolog code snippet that implements the 8-queens problem
% The problem involves placing 8 queens on a 8x8 chessboard without any of them attacking each other

% define a predicate to check if a queen can be placed on given row and column
can_place_queen(Row, Column, Queens) :-
    % check if no other queens are in the same row
    not(member(Row, Queens)),
    % create a list of diagonal positions by subtracting or adding constant value
    % for each queen already placed on the board
    Diagonals is [Column + Pos | Pos <- Queens, length(Queens, Pos)],
    not(member(Column, Diagonals)),
    % repeat the same for other diagonal direction
    other_diagonals is [Column - Pos | Pos <- Queens, length(Queens, Pos)],
    not(member(Column, other_diagonals)).

% define the base case, if all queens placed, then goal is found
n_queens(0, _, []) :- !.
% create a recursive predicate to find N number of queens on N x N grid
n_queens(N, N, Queens) :- N1 is N + 1, n_queens(0, N1, Queens).
% check and place queens on each row recursively
n_queens(Row, N, Queens) :-
    Row < N,
    Row1 is Row + 1,
    n_queens(Row1, N, Queens1),
    can_place_queen(Row, Col, Queens1),
    append([Col], Queens1, Queens).

% main predicate to print the solution with N number of queens on N x N grid
eight_queens(N) :-
    n_queens(0, N, Queens),
    write('Possible placement of Queens:'),
    write(Queens), nl.

% call the main predicate with the desired number of queens
?- eight_queens(8).