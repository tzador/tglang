% Define the predicate 'edge' which takes two arguments, a 'start' node and an 'end' node
edge(start, end).

% Define the predicate 'path' which takes two arguments, a 'start' node and an 'end' node 
path(Start, End) :-
    % Check if there is a direct 'edge' from the 'start' node to the 'end' node
    edge(Start, End).

% Define the predicate 'path' which takes three arguments, a 'start' node, a 'middle' node, and an 'end' node
path(Start, Middle, End) :-
    % Check if there is a direct 'edge' from the 'start' node to the 'middle' node
    edge(Start, Middle),
    % Recursively check if there is a 'path' from the 'middle' node to the 'end' node
    path(Middle, End).

% Define the predicate 'path' which takes four arguments, a 'start' node, a 'middle' node, an 'intermediate' node, and an 'end' node
path(Start, Middle, Intermediate, End) :-
    % Check if there is a direct 'edge' from the 'start' node to the 'middle' node
    edge(Start, Middle),
    % Recursively check if there is a 'path' from the 'middle' node to the 'intermediate' node
    path(Middle, Intermediate),
    % Recursively check if there is a 'path' from the 'intermediate' node to the 'end' node
    path(Intermediate, End).

% Define the predicate 'path' which takes five arguments, a 'start' node, a 'middle' node, an 'intermediate1' node, an 'intermediate2' node, and an 'end' node
path(Start, Middle, Intermediate1, Intermediate2, End) :-
    % Check if there is a direct 'edge' from the 'start' node to the 'middle' node
    edge(Start, Middle),
    % Recursively check if there is a 'path' from the 'middle' node to the 'intermediate1' node
    path(Middle, Intermediate1),
    % Recursively check if there is a 'path' from the 'intermediate1' node to the 'intermediate2' node
    path(Intermediate1, Intermediate2),
    % Recursively check if there is a 'path' from the 'intermediate2' node to the 'end' node
    path(Intermediate2, End).
    
% The '|' operator is used to indicate a 'list'
% Define the predicate 'path' which takes two arguments, a 'start' node and a 'path' list
path(Start, [Start|Path]) :-
    % Check if there is a direct 'edge' from the 'start' node to the head of the 'path' list
    edge(Start, Path),
    % Recursively check if there is a 'path' from the head of the 'path' list to the end of the 'path' list
    path(Path).

% Define the predicate 'connected' which takes two arguments, a 'start' node and an 'end' node
connected(Start, End) :-
    % Check if there is a 'path' from the 'start' node to the 'end' node
    path(Start, End).