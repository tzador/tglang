%% This is a complex code snippet in PROLOG

%% Definition of a predicate check_num
check_num(X) :- %% First clause
    number(X), %% Check if X is a number
    X > 0. %% Check if X is greater than 0
check_num(X) :- %% Second clause
    var(X), %% Check if X is a variable
    writeln("X is a variable"), %% Print a message if X is a variable
    fail. %% Fails the predicate if X is a variable

%% Definition of a predicate factorial
factorial(N, Result) :- %% First clause
    N =:= 0, %% Check if N is equal to 0
    Result is 1. %% Result is 1 if N is 0
factorial(N, Result) :- %% Second clause
    N > 0, %% Check if N is greater than 0
    N1 is N - 1, %% Get the next number in the sequence
    factorial(N1, Result1), %% Recursively call the predicate with the next number
    Result is N * Result1. %% Calculate the factorial of N

%% Query the check_num predicate
?- check_num(10). %% Should return true since 10 is greater than 0

%% Query the check_num predicate with a variable
?- check_num(X). %% Should return false and print "X is a variable"

%% Query the factorial predicate
?- factorial(5, Result). %% Should return Result = 120 (5! = 120)