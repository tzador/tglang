/* Define a predicate that checks if a list is a palindrome */

is_palindrome([]). /* base case: empty list is a palindrome */

is_palindrome([_]). /* base case: single element list is a palindrome */

is_palindrome([X|Xs]) :- 
    reverse(Xs, [R|Rs]), /* reverse the tail of the list */
    X == R, /* check if the first element of the original list matches the last element of the reversed list */
    is_palindrome(Xs). /* recursively check if the remaining elements of the list are also palindromes */

/* Example query: is_palindrome([1,2,3,3,2,1]) 
Output: true */