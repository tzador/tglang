% This is a fully connected neural network in PROLOG
% Each neuron is represented by a functor that takes in the input and output
:- op(1200, xfy, is_connected). % operator used to represent connection

% Declare the input layer as a list of neurons
input_layer([input1, input2, input3]).

% Declare the first hidden layer as a list of neurons connected to the input layer
hidden_layer1([h1, h2, h3]) :-
    input_layer(InputLayer), % get the input layer
    h1 is_connected input1, % connect h1 neuron to input1
    h2 is_connected input1, % connect h2 neuron to input2
    h3 is_connected input1. % connect h3 neuron to input3

% Declare the output layer as a list of neurons connected to the first hidden layer
output_layer([output1, output2]) :-
    hidden_layer1(HiddenLayer), % get the first hidden layer
    output1 is_connected h1, % connect output1 neuron to h1
    output1 is_connected h2, % connect output1 neuron to h2
    output2 is_connected h3. % connect output2 neuron to h3

% Define the activation function for the neurons
activation_function(X, Y) :-
    Y is 1 / (1 + exp(-X)). % using sigmoid function

% Define the forward propagation algorithm
forward_propagation(Inputs, Outputs) :-
    input_layer(Inputs), % set the input layer
    hidden_layer1(HiddenLayer), % set the first hidden layer
    output_layer(Outputs), % set the output layer
    output1 is_connected h1, % connect output layer to hidden layer
    output2 is_connected h2,
    output3 is_connected h3,
    HiddenLayer = [h1-HiddenValue1, h2-HiddenValue2, h3-HiddenValue3],
    Outputs = [output1-OutputValue1, output2-OutputValue2], % get output values
    activation_function(HiddenValue1 + HiddenValue2 + HiddenValue3, OutputValue1), % calculate first output value
    activation_function(HiddenValue1 + HiddenValue2 + HiddenValue3, OutputValue2). % calculate second output value

% Sample input and output values
?-forward_propagation([0.5, 0.7, 0.2], Result).
% Outputs:
Result = [output1-0.7248804168049048, output2-0.8206927310698147]