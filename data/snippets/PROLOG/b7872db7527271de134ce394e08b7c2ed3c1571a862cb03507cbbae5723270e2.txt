%% Define a predicate that checks if a given number is a prime number.
%% A number is said to be prime if it is only divisible by 1 and itself.

%% Helper predicate to check if a number is divisible by another number.
divisible(X, Y) :- X mod Y =:= 0.

%% Main predicate to check if a number is prime.
is_prime(N) :-
    N > 1, % A prime number must be greater than 1.
    not(divisible(N, 2)), % 2 is the only even prime number, so skip it.
    not((between(3, N-1, X), divisible(N, X))). % Check if N is divisible by any odd number between 3 and N-1. If yes, not prime.

%% Helper predicate to generate a list of primes up to a given number.
list_primes(0, []). % Base case, empty list.
list_primes(N, [N|T]) :-
    N > 1, % Ignore numbers less than or equal to 1.
    is_prime(N), % Check if N is prime.
    N_prev is N-1, % Get the previous number.
    list_primes(N_prev, T). % Recursively check if the previous number is prime and add it to the list.

%% Example query: list_primes(10, L).
%% Output: L = [2, 3, 5, 7].