% Base case for factorial recursion 
factorial(0,1).
% Recursive rule for factorial
factorial(N,Result) :-
    N > 0,                                 % Check if N is greater than 0
    N1 is N - 1,                           % Decrease N by 1
    factorial(N1,SubResult),                % Recursively call factorial with N1
    Result is N * SubResult.                % Calculate factorial with N and its recursive result
    
% Predicate to check if X is a multiple of Y
is_multiple_of(X,Y) :-
    0 is X mod Y.                           % Use modulus operator to see if there is a remainder
    
% Predicate to calculate the sum of a list of numbers
sum_list([], 0).                            % Base case for empty list, sum is 0
sum_list([Head|Tail], Sum) :-
    sum_list(Tail, SubSum),                  % Recursively call sum_list with the tail of the list
    Sum is SubSum + Head.                     % Calculate the sum of this iteration's head and previous sum