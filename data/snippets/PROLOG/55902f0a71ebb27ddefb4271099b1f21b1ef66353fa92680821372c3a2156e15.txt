% This is a Prolog program that finds all possible paths between two nodes in a directed graph

% Define a predicate to check if two nodes are connected by an edge
connected(Start, End, Graph) :-
    % Check if there is a directed edge from Start to End
    member([Start, End], Graph).

% Define a predicate to recursively find a path between two nodes
find_path(Start, End, Graph, Path) :-
    % Start the path with the first node
    travel(Start, End, Graph, [Start], Path).

% Define a predicate to recursively add nodes to the path
travel(End, End, _, Path, Path).
travel(Start, End, Graph, TempPath, Path) :-
    % Check if there is a directed edge from Start to NextNode
    connected(Start, NextNode, Graph),
    % Make sure NextNode is not already in the path to avoid loops
    \+member(NextNode, TempPath),
    % Add NextNode to TempPath
    travel(NextNode, End, Graph, [NextNode|TempPath], Path).

% Example directed graph
graph([
    [1, 2],
    [1, 3],
    [2, 4],
    [2, 5],
    [3, 4],
    [4, 6],
    [5, 6]
]).

% Find all paths from node 1 to node 6 in the example graph
?- find_path(1, 6, graph, Path).

% Output:
% Path = [1, 3, 4, 6] ;
% Path = [1, 3, 4, 2, 5, 6] ;
% Path = [1, 2, 5, 6] ;
% Path = [1, 2, 4, 6] ;
% false.