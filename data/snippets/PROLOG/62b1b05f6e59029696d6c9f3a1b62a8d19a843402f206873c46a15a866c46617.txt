% Define a predicate that checks if a list of integers is in ascending order
ascending([]). % Base case: an empty list is considered to be in ascending order
ascending([_]). % Base case: a list with one element is considered to be in ascending order
ascending([X,Y|T]) :- % Perform pattern matching, X and Y are the first two elements in the list
    X =< Y, % Check if X is less than or equal to Y
    ascending([Y|T]). % Recursively check the rest of the list

% Define a predicate that merges two lists of integers in ascending order
merge(A,[],A). % Base case: if the second list is empty, return the first list
merge([],B,B). % Base case: if the first list is empty, return the second list
merge([X|A],[Y|B],[X|C]) :- % Perform pattern matching, X and Y are the first elements in the two lists
    X =< Y, % Check if X is less than or equal to Y
    merge(A,[Y|B],C). % Recursively merge the rest of the first list and the second list
merge([X|A],[Y|B],[Y|C]) :- % Perform pattern matching, X and Y are the first elements in the two lists
    X > Y, % Check if X is greater than Y
    merge([X|A],B,C). % Recursively merge the first list and the rest of the second list

% Define a predicate that performs merge sort on a list of integers
mergesort([], []). % Base case: an empty list is already sorted
mergesort([X], [X]). % Base case: a list with one element is already sorted
mergesort(List, Sorted) :- 
    length(List, N), % Get the length of the list
    N > 1, % If the length is more than 1, perform merge sorting
    HalfLength is N // 2, % Get the midpoint of the list (floor division)
    length(Left, HalfLength), % Create a list with the first half of the original list
    append(Left, Right, List), % Split the original list into two halves
    mergesort(Left, SortedLeft), % Recursively perform merge sorting on the first half
    mergesort(Right, SortedRight), % Recursively perform merge sorting on the second half
    merge(SortedLeft, SortedRight, Sorted). % Merge the two sorted halves together to get the final sorted list