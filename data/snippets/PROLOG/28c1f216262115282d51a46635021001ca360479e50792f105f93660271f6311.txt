/* This is a Prolog program that solves Sudoku */
:- use_module(library(clpfd)).

/* Define the Sudoku board as a list of lists with variables ranging from 1 to 9 */
board([
    [A1, A2, A3, A4, A5, A6, A7, A8, A9],
    [B1, B2, B3, B4, B5, B6, B7, B8, B9],
    [C1, C2, C3, C4, C5, C6, C7, C8, C9],
    [D1, D2, D3, D4, D5, D6, D7, D8, D9],
    [E1, E2, E3, E4, E5, E6, E7, E8, E9],
    [F1, F2, F3, F4, F5, F6, F7, F8, F9],
    [G1, G2, G3, G4, G5, G6, G7, G8, G9],
    [H1, H2, H3, H4, H5, H6, H7, H8, H9],
    [I1, I2, I3, I4, I5, I6, I7, I8, I9]
]).

/* Define the constraints for the Sudoku board */
sudoku(Board) :-
    /* All variables must be within the range of 1 to 9 */
    Board = [S11, S12, S13, S14, S15, S16, S17, S18, S19,
             S21, S22, S23, S24, S25, S26, S27, S28, S29,
             S31, S32, S33, S34, S35, S36, S37, S38, S39,
             S41, S42, S43, S44, S45, S46, S47, S48, S49,
             S51, S52, S53, S54, S55, S56, S57, S58, S59,
             S61, S62, S63, S64, S65, S66, S67, S68, S69,
             S71, S72, S73, S74, S75, S76, S77, S78, S79,
             S81, S82, S83, S84, S85, S86, S87, S88, S89,
             S91, S92, S93, S94, S95, S96, S97, S98, S99],

    domain(Board, 1, 9),

    /* Rows must have all different values */
    all_different([S11, S12, S13, S14, S15, S16, S17, S18, S19]),
    all_different([S21, S22, S23, S24, S25, S26, S27, S28, S29]),
    all_different([S31, S32, S33, S34, S35, S36, S37, S38, S39]),
    all_different([S41, S42, S43, S44, S45, S46, S47, S48, S49]),
    all_different([S51, S52, S53, S54, S55, S56, S57, S58, S59]),
    all_different([S61, S62, S63, S64, S65, S66, S67, S68, S69]),
    all_different([S71, S72, S73, S74, S75, S76, S77, S78, S79]),
    all_different([S81, S82, S83, S84, S85, S86, S87, S88, S89]),
    all_different([S91, S92, S93, S94, S95, S96, S97, S98, S99]),

    /* Columns must have all different values */
    all_different([S11, S21, S31, S41, S51, S61, S71, S81, S91]),
    all_different([S12, S22, S32, S42, S52, S62, S72, S82, S92]),
    all_different([S13, S23, S33, S43, S53, S63, S73, S83, S93]),
    all_different([S14, S24, S34, S44, S54, S64, S74, S84, S94]),
    all_different([S15, S25, S35, S45, S55, S65, S75, S85, S95]),
    all_different([S16, S26, S36, S46, S56, S66, S76, S86, S96]),
    all_different([S17, S27, S37, S47, S57, S67, S77, S87, S97]),
    all_different([S18, S28, S38, S48, S58, S68, S78, S88, S98]),
    all_different([S19, S29, S39, S49, S59, S69, S79, S89, S99]),

    /* 3x3 sub-grids must have all different values */
    all_different([S11, S12, S13, S21, S22, S23, S31, S32, S33]),
    all_different([S14, S15, S16, S24, S25, S26, S34, S35, S36]),
    all_different([S17, S18, S19, S27, S28, S29, S37, S38, S39]),
    all_different([S41, S42, S43, S51, S52, S53, S61, S62, S63]),
    all_different([S44, S45, S46, S54, S55, S56, S64, S65, S66]),
    all_different([S47, S48, S49, S57, S58, S59, S67, S68, S69]),
    all_different([S71, S72, S73, S81, S82, S83, S91, S92, S93]),
    all_different([S74, S75, S76, S84, S85, S86, S94, S95, S96]),
    all_different([S77, S78, S79, S87, S88, S89, S97, S98, S99]),

    /* Define the partial solution for the Sudoku board */
    S14 #= 4, S17 #= 9, S18 #= 7, S23 #= 3, S26 #= 9, S28 #= 1,
    S32 #= 9, S36 #= 8, S39 #= 5, S45 #= 2, S59 #= 4, S64 #= 5,
    S68 #= 6, S74 #= 2, S76 #= 3, S77 #= 6, S82 #= 5, S86 #= 7,
    S91 #= 6, S94 #= 1, S98 #= 8,

    /* Solve the Sudoku board */
    labeling([], Board).

/* Print the solved Sudoku board */
print_board(Board) :-
    write('-------------------------'), nl,
    (   foreach(Row, Board)
    do  write('|'),
        (   foreach(Num, Row)
        do  write(' '),
        write(Num)
        ),
        write(' |'), nl
    ),
    write('-------------------------'), nl.

/* To run the program, call the board and sudoku predicates with a partially filled board */
?- board(Board), sudoku(Board), print_board(Board).