/* Program to find the maximum element in a list */

/* Defining the maximum predicate with 3 arguments: op1, op2, and result */
max(X, Y, Z) :- /* If op1 is greater than op2, result is op1 */
    X > Y, !, 
    Z is X. /* Cut to avoid backtracking */

max(_, Y, Y). /* Any other case, result is op2 */

/* Defining the recursive predicate that finds the maximum element in a list */
max_list([X | Xs], Max) :- /* If the list has only one element, then the maximum is that element */
    Xs == [], !,
    Max is X. /* Cut to avoid backtracking */

max_list([X | Xs], Max) :- /* Finding the maximum in the rest of the list */
    max_list(Xs, NewMax), /* Recursive call to find the maximum in the rest of the list */
    max(X, NewMax, Max). /* Finding the maximum between the current element and the maximum in the rest of the list */

/* Example query to find the maximum element in a list */
?- max_list([3, 5, 1, 9, 2, 7], Max).
/* Output: Max = 9 */