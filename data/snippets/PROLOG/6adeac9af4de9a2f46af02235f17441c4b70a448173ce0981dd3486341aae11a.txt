/*This code is a basic implementation of a binary search tree data structure in PROLOG*/ 

%% insertBST/3 predicate takes in the current root of tree, the value to be inserted and returns the updated tree 
insertBST(nil,Value,tree(nil,Value,nil)).
insertBST(tree(Left,Root,Right),Value, tree(Left,Root,NewRight)):-
    Value > Root,
    insertBST(Right,Value,NewRight).
insertBST(tree(Left,Root,Right),Value, tree(NewLeft,Root,Right)):-
    Value =< Root,
    insertBST(Left,Value,NewLeft).

%% printBST/1 predicate takes in the root of the tree and prints all the values in the tree in ascending order
printBST(nil).
printBST(tree(Left,Root,Right)):-
    printBST(Left),
    write(Root),
    nl,
    printBST(Right).

%% searchBST/2 predicate takes in the root of the tree and the value to search for and returns true if value is in the tree
searchBST(nil,_):- fail.
searchBST(tree(Left,Root,Right), Value):-
    Value =:= Root.
searchBST(tree(Left,Root,_),Value):-
    Value < Root,
    searchBST(Left,Value).
searchBST(tree(_,Root,Right),Value):-
    Value > Root,
    searchBST(Right,Value).

%% heightBST/2 predicate takes in the root of the tree and returns the height/depth of the tree 
heightBST(nil,0).
heightBST(tree(Left,_,Right),Height):-
    heightBST(Left,LeftHeight),
    heightBST(Right,RightHeight),
    Height is max(LeftHeight,RightHeight) + 1.

%% maxBST/2 predicate takes in the root of the tree and returns the maximum value in the tree 
maxBST(nil, nil).
maxBST(tree(_,Value,nil), Value).
maxBST(tree(_,_,Right), Max):-
    maxBST(Right,Max).

%% minBST/2 predicate takes in the root of the tree and returns the minimum value in the tree 
minBST(nil, nil).
minBST(tree(nil,Value,_), Value).
minBST(tree(Left,_,_), Min):-
    minBST(Left,Min).