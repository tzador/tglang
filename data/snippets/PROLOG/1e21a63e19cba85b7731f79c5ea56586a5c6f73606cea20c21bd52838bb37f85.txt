% This is a prolog code snippet
%
% This code creates a tree with nodes and their relationships

/* Define a predicate that checks if two nodes are connected */
connected(Node1, Node2) :- 
    edge(Node1, Node2); 
    edge(Node2, Node1).

/* Define a predicate that checks if the given node is a leaf */
leaf(Node) :-
    \+ ( edge(Node, _); edge(_, Node) ).

/* Define a predicate that checks if the given node is a root */
root(Node) :-
    \+ edge(_, Node).

/* Define a predicate that checks if the given tree is a subtree of another tree */
subtree(Tree, Tree).

/* Define a predicate that checks if the given tree has a node with the given value */
contains(Tree, Value) :-
    root(Tree),
    Tree = [Value, Subtrees],
    contains_subtrees(Subtrees, Value).

/* Recursive predicate to check if any of the subtrees contain the given value */
contains_subtrees([], _).
contains_subtrees([Subtree|Rest], Value) :-
    contains(Subtree, Value);
    contains_subtrees(Rest, Value).


/** MAIN **/

/* Create tree 1 */
tree1([[1, [[2, [[3, []], [4, []]]], [5, []]]], [6, []]]).

/* Create tree 2 */
tree2([[1, [[2, [[4, []], [3, [[5, []], [6, []]]]]], [7, []]]], [8, []]]).

/* Check if tree 2 is a subtree of tree 1 */
subtree(tree1, tree2) 
    -> write('Tree 2 is a subtree of tree 1')
    ; write('Tree 2 is not a subtree of tree 1').