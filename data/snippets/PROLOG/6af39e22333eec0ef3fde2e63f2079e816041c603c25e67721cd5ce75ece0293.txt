% This is a PROLOG program that takes in two lists and finds their intersection, if any.

% Defining the predicate for finding the intersection of two lists.
intersection([], _, []).
intersection([H|T], L2, [H|L]) :- 
  % Here, H represents the head of the first list, T represents its tail and L2 is the second list.
  % The 'member' predicate checks if H is present in L2.
  member(H, L2), 
  % Recursively calling the intersection predicate with T and L2 to find any remaining elements in the intersection.
  intersection(T, L2, L).
intersection([_|T], L2, L) :- 
  % If H is not present in L2, calling intersection again with T and L2.
  intersection(T, L2, L).

/*
Example query:
?- intersection([1,2,3,4], [2,4,6,8], L).
Output: L = [2, 4]
Explanation: Since 2 and 4 are present in both lists, they are the intersection.
*/