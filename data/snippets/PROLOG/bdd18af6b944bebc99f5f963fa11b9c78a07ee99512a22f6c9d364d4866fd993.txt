% Define a predicate that checks if a number is prime
prime(2). % 2 is a prime number
prime(3). % 3 is a prime number
prime(X) :- % X is prime if it's a positive number greater than 2 and has no divisors other than itself and 1
    X > 2,
    Z is X - 1,
    \+ (Y = Z - 1, % Y is a number between 2 and X-2
        Y > 1,
        X mod Y =:= 0
    ).

% Define a predicate that generates a list of prime numbers up to a given number
primes(N, Res) :- % Res is the list of prime numbers up to N
    numlist(2, N, List), % generate a list of numbers from 2 to N
    include(prime, List, Res). % filter the list using the prime predicate

% Define a predicate that calculates the factorial of a number
factorial(0, 1). % 0! is 1
factorial(N, Res) :- % Res is the factorial of N
    N > 0,
    X is N - 1,
    factorial(X, Y), % Y is the factorial of N-1
    Res is N * Y. % Res is N * (N-1)!

% Define a predicate that generates a list of factorials for a given list of numbers
factorials([], []). % empty list has no factorials
factorials([H|T], [Res|Rest]) :- % Res is the factorial of H, Rest is the list of factorials for T
    factorial(H, Res),
    factorials(T, Rest).