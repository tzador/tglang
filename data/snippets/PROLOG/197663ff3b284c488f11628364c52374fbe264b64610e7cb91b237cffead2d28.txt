% Define a predicate for determining if an element is a member of a list
member(X,[X|_]).
member(X,[_|Rest]) :- member(X,Rest).

% Define a predicate for determining the union of two lists
union([],L,L).
union([Head|Rest], L2, L3) :- member(Head,L2), !, union(Rest, L2, L3).
union([Head|Rest], L2, [Head|L3]) :- union(Rest, L2, L3).

% Define a predicate for determining the intersection of two lists
intersection([],_,[]).
intersection([Head|Rest], L2, [Head|L3]) :- member(Head,L2), !, intersection(Rest, L2, L3).
intersection([_|Rest], L2, L3) :- intersection(Rest, L2, L3).

% Define a predicate for determining the set difference of two lists
set_difference([],_,[]).
set_difference([Head|Rest], L2, L3) :- member(Head,L2), !, set_difference(Rest, L2, L3).
set_difference([Head|Rest], L2, [Head|L3]) :- set_difference(Rest, L2, L3).

% Define a predicate for checking if a list is a subset of another list
subset([],_).
subset([Head|Rest], L2) :- member(Head,L2), subset(Rest,L2).

% Define a predicate for determining the power set of a list
power_set([], [[]]).
power_set([Head|Rest], PowerSet) :- power_set(Rest,Set),
                                   append(Set, [PowerSet|Set], PowerSet).