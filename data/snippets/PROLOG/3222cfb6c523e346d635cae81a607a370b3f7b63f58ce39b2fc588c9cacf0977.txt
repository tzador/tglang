/* This is a comment in Prolog */

/* Define a predicate to concatenate two lists */
concat([], L2, L2).
concat([H|T], L2, [H|L3]) :- concat(T, L2, L3).

/* Define a predicate to check if a list length is odd or even */
length([], 0).
length([_|T], N) :- length(T, N1), N is N1 + 1.

/* Define the predicate 'odd_length' which checks if a list has an odd length */
odd_length(L) :- length(L, N), N mod 2 =:= 1.

/* Define a predicate to check if a given element is present in a list */
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).

/* Define a predicate to remove duplicate elements from a list */
remove_duplicates([], []).
remove_duplicates([H|T], L) :- member(H, T), remove_duplicates(T, L).
remove_duplicates([H|T], [H|L]) :- \+ member(H, T), remove_duplicates(T, L).