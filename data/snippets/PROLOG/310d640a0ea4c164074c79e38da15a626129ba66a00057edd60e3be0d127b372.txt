% Define a predicate that finds all prime numbers within a given range
% `start` and `end` are the start and end numbers of the range
% `prime_helper` is an auxiliary predicate that checks if a number is prime
prime_range(start, end) :-
    start =< end,
    start > 1,
    prime_helper(start).

prime_range(start, end) :-
    start =< end,
    start2 is start + 1,
    prime_range(start2, end).

% `x` is the number to be checked for primality
% `n` is the divisor, it starts from 2 and increases until half of `x`
% returns `true` if `x` is prime, `false` otherwise
prime_helper(x) :-
    n is 2,
    n2 is x // 2,
    check_prime(x, n, n2).

% Checks if `x` is divisible by `n`, if yes then `x` is not prime
% Otherwise, recursively increases `n` by 1 until it reaches `n2`
% `n` is the current divisor, `n2` is the largest possible divisor
check_prime(x, n, n2) :-
    n =< n2,
    x mod n =\= 0,
    n1 is n + 1,
    check_prime(x, n1, n2).