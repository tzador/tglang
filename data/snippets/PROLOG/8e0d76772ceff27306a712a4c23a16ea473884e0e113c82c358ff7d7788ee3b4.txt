% Define a predicate 'power' that calculates the power of a number
power(Number, 0, 1). % Base case: any number raised to the power of 0 is 1
power(Number, Exponent, Result) :-
    Exponent > 0, % Check if exponent is positive
    NewExponent is Exponent - 1, % Decrease the exponent by one
    power(Number, NewExponent, TempResult), % Recursively compute power of a smaller exponent
    Result is Number * TempResult. % Multiply the number by the result of the smaller exponent

% Example usage:
% ?- power(2, 3, Result).
% Result = 8.

% Define a predicate 'sum_list' that calculates the sum of a list of numbers
sum_list([], 0). % Base case: sum of an empty list is 0
sum_list([Head | Tail], Result) :-
    sum_list(Tail, TempResult), % Recursively compute sum of the tail of the list
    Result is Head + TempResult. % Add the head of the list to the result of the tail

% Example usage:
% ?- sum_list([1, 2, 3, 4, 5], Result).
% Result = 15.