:- use_module(library(random)).

% Predicate that generates a list of random numbers between 1 and 100
random_list(Size, List) :-
    length(List, Size), % generates a list of variables with length Size
    maplist(random(1, 100), List). % maps the random predicate to each element of the list, generating a random number for each

% Predicate that checks if the list is sorted in ascending order
sorted_asc(List) :-
    append(_, [X,Y | _], List), % checks if the list has at least two elements
    X > Y, % checks if the first element is greater than the second element
    !, % cancels backtracking in case of success
    fail. % fails if the first element is greater than the second element
sorted_asc(_). % succeeds if no elements violate the sorted ascending order

% Main predicate
main(Size) :-
    random_list(Size, List), % generates a random list
    write("Generated list: "), write(List), nl, % prints out the generated list
    sorted_asc(List), % checks if the list is sorted ascending
    write("List is sorted in ascending order!"), nl.