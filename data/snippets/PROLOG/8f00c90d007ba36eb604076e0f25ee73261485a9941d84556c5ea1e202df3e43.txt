/* This is a program that finds the shortest path between two nodes in a graph */

/* Define facts */
edge(a, b, 2).
edge(a, c, 4).
edge(b, d, 3).
edge(c, d, 6).
edge(c, e, 1).
edge(d, e, 5).

/* Define rules */
path(X,Y,L) :- edge(X,Y,L). /* If there is a direct edge, the path length is the edge length */

path(X,Y,L) :- edge(X,Z,L1), path(Z,Y,L2), L is L1 + L2. /* If there is an indirect edge, recursively find the path length */

/* Define predicate to find shortest path */
shortest_path(X, Y, P) :-
  findall((L,Path), (path(X,Y,L), reverse(Path, [X,Y])), Paths), /* Find all paths from X to Y and store in a list with their lengths */
  sort(Paths, SortedPaths), /* Sort the list in ascending order based on path length */
  SortedPaths = [(ShortestLength, ShortestPath)|_], /* Get the first element from the sorted list, which has the shortest path */
  P = [ShortestLength, ShortestPath]. /* Store the shortest path length and path in a list and unify with the output predicate */

/* Example query */
?- shortest_path(a, e, P).
P = [3, [a, b, d, e]]. /* Output the shortest path length and path between nodes a and e */