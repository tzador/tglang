% This is a comment in PROLOG

% Defining a predicate for finding the sum of a list of numbers
sum_list([], 0). % Base case: the empty list has a sum of 0
sum_list([Head | Tail], Sum) :-
    sum_list(Tail, TailSum), % Recursively find the sum of the tail of the list
    Sum is Head + TailSum. % Add the head of the list to the sum of the tail

% Defining a predicate for finding the factorial of a number
factorial(0, 1). % Base case: 0! is equal to 1
factorial(N, Factorial) :-
    N > 0, % Ensure N is a positive number
    N1 is N - 1, % Calculate N-1 to use in recursive call
    factorial(N1, SubFactorial), % Recursively find the factorial of N-1
    Factorial is N * SubFactorial. % Multiply N with the factorial of N-1 to get the final result

% Defining a predicate for determining if two lists are equal
equal_list([], []). % Base case: two empty lists are equal
equal_list([X | Xs], [X | Ys]) :-
    equal_list(Xs, Ys). % Recursively check if the tails of the lists are equal

% Defining a predicate for checking if an element is a member of a list
member(Element, [Element | _]). % If the element is the head of the list, it is a member
member(Element, [_ | Rest]) :- % Otherwise, recursively check the rest of the list
    member(Element, Rest). 

% Example queries:
% ?- sum_list([1, 2, 3, 4, 5], Sum).
% Sum = 15.
%
% ?- factorial(5, Factorial).
% Factorial = 120.
%
% ?- equal_list([1, 2, 3], [1, 2, 3]).
% true.
%
% ?- member(2, [1, 2, 3]).
% true.