% declare a predicate to find the factorial of a given number
factorial(0, 1). % base case: factorial of 0 is 1
factorial(N, F) :- N > 0, N1 is N - 1, factorial(N1, F1), F is N * F1. % recursive rule: factorial of N is N multiplied by factorial of N - 1

% declare a predicate to find the maximum of two numbers
max(X, Y, X) :- X >= Y. % if X is greater than or equal to Y, X is the maximum
max(X, Y, Y) :- X < Y. % if X is less than Y, Y is the maximum

% declare a predicate to find the length of a list
length([], 0). % base case: length of an empty list is 0
length([_|T], N) :- length(T, N1), N is N1 + 1. % recursive rule: length of a list is 1 more than the length of its tail

% declare a predicate to sort a list in ascending order
sortList([], []). % base case: sorting an empty list results in an empty list
sortList([X], [X]). % base case: sorting a list with 1 element results in the same list
sortList([X, Y | T], Sorted) :- split([X, Y | T], L1, L2), sortList(L1, S1), sortList(L2, S2), merge(S1, S2, Sorted). % recursive rule: split the list into two sublists, sort each sublist, and merge them together to get the sorted list

% declare a predicate to split a list into two sublists
split([], [], []). % base case: splitting an empty list results in two empty lists
split([X], [X], []). % base case: splitting a list with 1 element results in one list containing that element and an empty list
split([X, Y | T], [X | T1], [Y | T2]) :- split(T, T1, T2). % recursive rule: split the list into two sublists by alternating elements between the two

% declare a predicate to merge two sorted lists
merge([], L, L). % base case: merging an empty list with any list results in the same list
merge(L, [], L). % base case: merging any list with an empty list results in the same list
merge([X | T1], [Y | T2], [X | T]) :- X =< Y, merge(T1, [Y |T2], T). % if X is less than or equal to Y, add X to the merged list and continue merging the remaining elements of the first list with the entire second list
merge([X | T1], [Y | T2], [Y | T]) :- X > Y, merge([X | T1], T2, T). % if X is greater than Y, add Y to the merged list and continue merging the first list with the remaining elements of the second list

% example queries:
% factorial(5, F). % F is the factorial of 5, which is 120
% max(7, 4, Max). % Max is the maximum of 7 and 4, which is 7
% length([1, 2, 3], N). % N is the length of the list [1, 2, 3], which is 3
% sortList([5, 2, 9, 1, 7, 3], S). % S is the sorted list of [5, 2, 9, 1, 7, 3], which is [1, 2, 3, 5, 7, 9]