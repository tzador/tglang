%% Check if a list is a palindrome

palindrome([]). % Base case: empty list is a palindrome
palindrome([_]). % Base case: single element is a palindrome
palindrome([H|T]) :- append(T1, [H], T), palindrome(T1). % Recursively checks if first and last elements are equal, and continues checking for the remaining list

%% Check if a list is a reverse of another list

is_reverse([], []). % Base case: two empty lists are considered the same
is_reverse([H|T], R) :- is_reverse(T, T1), append(T1, [H], R). % Recursively checks if the first element of the original list is the last element of the reversed list, and continues checking for the remaining lists

%% Check if two lists are the same regardless of ordering

same_elements([], []). % Base case: two empty lists are considered the same
same_elements([H|T], L2) :- select(H, L2, L3), same_elements(T, L3). % Recursively removes the first element of list 1 from list 2, and continues checking for the remaining elements of list 1 and the updated list 2

%% Check if a list contains a specific element

contains([H|_], H). % Base case: element is at the head of the list
contains([_|T], E) :- contains(T, E). % Recursively checks if element is in the remaining list