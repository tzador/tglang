% Define a predicate that checks if a number is a perfect square
perfect_square(N) :-
    % Get the square root of N and round it down
    SQRT is floor(sqrt(N)),
    % Check if the square root squared equals N
    SQRT*SQRT =:= N.

% Define a predicate that checks if two numbers are relatively prime
relatively_prime(A, B) :-
    % Use Euclid's algorithm to find the greatest common divisor
    % Set initial values
    X is A,
    Y is B,
    % Loop until one number equals zero
    while(Y \= 0, (
        % Get remainder of X divided by Y
        R is mod(X,Y),
        % Update X to Y and Y to R
        X is Y,
        Y is R
        )
    ),
    % The greatest common divisor is now in X
    % If X is 1, A and B are relatively prime
    X =:= 1.

% Define a predicate that checks if a list is a palindrome
palindrome(List) :-
    % Use recursion to split the list in half
    split(List, FirstHalf, SecondHalf),
    % Reverse the second half of the list
    reverse(SecondHalf, ReversedSecondHalf),
    % Check if the first half and reversed second half are the same
    FirstHalf = ReversedSecondHalf.

% Define a predicate that finds the nth Fibonacci number
fib(N, F) :-
    % If N is 1 or 2, the nth Fibonacci number is 1
    N =:= 1, F = 1;
    N =:= 2, F = 1;
    % If N is greater than 2, calculate the nth Fibonacci number recursively
    N > 2,
    N1 is N-1,
    N2 is N-2,
    fib(N1, F1),
    fib(N2, F2),
    F is F1 + F2.