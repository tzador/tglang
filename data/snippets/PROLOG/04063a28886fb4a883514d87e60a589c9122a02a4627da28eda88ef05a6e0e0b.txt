% This is a Prolog program for finding the shortest path in a graph using Dijkstra's algorithm

% A predicate for initializing the distances of nodes in the graph
init_dist(G, S, [S-X|Dist]) :-
    member(X, G),
    X \= S,
    !,
    Dist = [S-99999|Rest],
    init_dist(G, S, Rest).

init_dist(_, _, []).

% A predicate for updating the distances of nodes with their actual distance from the source
update_dist(G, S, OldDists, Distances) :-
    member(V-W, G),
    member(S-X, OldDists),
    V == X,
    !,
    NewDist is W + S,
    member(V-Y, OldDists),
    NewDist < Y,
    select(V-Y, OldDists, NewDists),
    Distances = [V-NewDist|NewDists].

update_dist(_, _, OldDists, OldDists).

% A predicate for finding the minimum distance of a node from the source among a list of nodes
find_min([X], X).

find_min([X-Y|Rest], Min) :-
    find_min(Rest, Z),
    (X < Z
    -> Min = X
    ; Min = Z).

% A predicate for finding the shortest path using Dijkstra's algorithm
dijkstra(G, S, D) :-
    init_dist(G, S, Distances),
    dijkstra_helper(G, S, Distances, D).

dijkstra_helper(_, _, [], []).

dijkstra_helper(G, S, Distances, [S-Path|Rest]) :-
    find_min(Distances, S),
    member(S-X, Distances),
    X \= 99999,
    !,
    update_dist(G, S, Distances, NewDistances),
    dijkstra_helper(G, S, NewDistances, Rest).

dijkstra_helper(G, S, Distances, Rest) :-
    find_min(Distances, S),
    member(S-X, Distances),
    X == 99999,
    select(S-X, Distances, NewDistances),
    dijkstra_helper(G, S, NewDistances, Rest).