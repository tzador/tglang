/* This is a Prolog program */

/* Define a predicate that checks if a list is empty or not */
isEmpty([]).

/* Define a predicate that checks if an item is a member of a list */
isMember(X, [X | _]).
isMember(X, [_ | T]) :- isMember(X, T).

/* Define a predicate that checks if a list is sorted in ascending order */
isSorted([]).
isSorted([_]).
isSorted([H1, H2 | T]) :- H1 =< H2, isSorted([H2 | T]).

/* Define a predicate that concatenates two lists */
concatenate([], L, L).
concatenate([X | L1], L2, [X | L3]) :- concatenate(L1, L2, L3).

/* Define a predicate that removes all occurrences of an element from a list */
remove(_, [], []).
remove(X, [X | T], L) :- remove(X, T, L).
remove(X, [H | T], [H | L]) :- X \= H, remove(X, T, L).

/* Define a predicate that maps a function to all elements of a list */
map(_, [], []).
map(F, [H | T], [M | L]) :- F(H, M), map(F, T, L).

/* Define a predicate that computes the sum of all elements in a list */
sum([], 0).
sum([H | T], S) :- sum(T, R), S is H + R.

/* Define a predicate that checks if a given list is a sublist of another list */
isSublist([], _).
isSublist([H | T], [H | T2]) :- isSublist(T, T2).
isSublist([H | T], [_ | T2]) :- isSublist([H | T], T2).