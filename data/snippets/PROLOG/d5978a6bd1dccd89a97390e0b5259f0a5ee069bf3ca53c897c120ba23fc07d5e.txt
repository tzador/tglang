% Define a predicate for finding the nth element in a list
% Signature: find_nth_element(+List, +N, -Element)
find_nth_element([Head|_], 1, Head). % The element is the first in the list
find_nth_element([_|Tail], N, Element) :-
  N > 1, % Ensure that N is a positive integer
  N1 is N - 1, % Decrement N by 1
  find_nth_element(Tail, N1, Element). % Recursively call find_nth_element on the Tail list with decremented N

% Define a predicate for calculating the factorial of a number
% Signature: factorial(+N, -Result)
factorial(0, 1). % The factorial of 0 is 1
factorial(N, Result) :-
  N > 0, % Ensure that N is a positive integer
  N1 is N - 1, % Decrement N by 1
  factorial(N1, Result1), % Recursively call factorial on N1 and store the result in Result1
  Result is N * Result1. % Calculate the final result by multiplying N with Result1