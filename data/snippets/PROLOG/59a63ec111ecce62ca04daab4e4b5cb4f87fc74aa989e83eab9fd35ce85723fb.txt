% Define a rule for calculating the factorial of a number
factorial(0, 1).                                                            % Base case: the factorial of 0 is 1
factorial(N, F) :-                                                           % Recursive case:
    N > 0,                                                                   % - Ensure the number is positive
    N1 is N - 1,                                                             % - Calculate the factorial of the previous number
    factorial(N1, F1),                                                       % - Recurse with the previous factorial
    F is N * F1.                                                             % - Multiply the number by the previous factorial to get the current factorial
    
% Define a rule for checking if a list is sorted in ascending order
sorted([]).                                                                  % Base case: an empty list is sorted
sorted([X]).                                                                 % Base case: a list with one element is sorted
sorted([X, Y|Rest]) :-                                                       % Recursive case:
    X =< Y,                                                                  % - Check if the first two elements are in ascending order
    sorted([Y|Rest]).                                                        % - Recurse with the rest of the list
    
% Define a rule for finding the maximum element in a list
max_list([X], X).                                                            % Base case: the maximum element in a list with one element is that element
max_list([X, Y|Rest], Max) :-                                                % Recursive case:
    X >= Y,                                                                   % - If the first element is greater than or equal to the second element
    max_list([X|Rest], Max).                                                  % - Recurse with the first element and the rest of the list
max_list([X, Y|Rest], Max) :-                                                % Recursive case:
    X < Y,                                                                    % - If the second element is greater than the first element
    max_list([Y|Rest], Max).                                                  % - Recurse with the second element and the rest of the list

% Define a rule for calculating the length of a list
length([], 0).                                                               % Base case: the length of an empty list is 0
length([_|Rest], N) :-                                                       % Recursive case:
    length(Rest, N1),                                                         % - Recurse with the rest of the list
    N is N1 + 1.                                                              % - Add 1 to the length of the rest of the list to get the length of the current list

% Define a rule for merging two sorted lists into one sorted list
merge([], Y, Y).                                                             % Base case: if the first list is empty, the merged list is the second list
merge(X, [], X).                                                             % Base case: if the second list is empty, the merged list is the first list
merge([X|RestX], [Y|RestY], [X|Result]) :-                                   % Recursive case:
    X =< Y,                                                                   % - If the first element of the first list is less than or equal to the first element of the second list
    merge(RestX, [Y|RestY], Result).                                          % - Recurse with the rest of the first list and the second list
merge([X|RestX], [Y|RestY], [Y|Result]) :-                                   % Recursive case:
    X > Y,                                                                    % - If the first element of the first list is greater than the first element of the second list
    merge([X|RestX], RestY, Result).                                          % - Recurse with the first list and the rest of the second list
    
% Define a rule for converting a binary number to decimal
binary_to_decimal(0, 0).                                                     % Base case: the decimal value of 0 in binary is 0
binary_to_decimal(1, 1).                                                     % Base case: the decimal value of 1 in binary is 1
binary_to_decimal(B, D) :-                                                   % Recursive case:
    B > 0,                                                                    % - Ensure the binary number is positive
    B1 is B // 10,                                                            % - Divide the binary number by 10 to remove the last digit
    binary_to_decimal(B1, D1),                                                % - Recurse with the remaining binary number
    D is (B mod 10 * 2 ** 0) + (D1 * 2 ** 1).                                 % - Convert the last digit to decimal and add it to the result, multiplying the remaining digits by the power of 2    
    
% Define a rule for determining if a binary tree is balanced
balanced(empty).                                                             % Base case: an empty tree is balanced
balanced(tree(Left, Leaf, Right)) :-                                         % Recursive case:
    balanced(Left),                                                           % - Check if the left subtree is balanced
    balanced(Right),                                                          % - Check if the right subtree is balanced
    height(Left, L),                                                          % - Calculate the height of the left subtree
    height(Right, R),                                                         % - Calculate the height of the right subtree
    abs(L - R) =< 1.                                                          % - Check if the difference between the heights is less than or equal to 1
    
height(empty, 0).                                                            % Base case: the height of an empty tree is 0
height(tree(Left, Leaf, Right), H) :-                                        % Recursive case:
    height(Left, HL),                                                         % - Calculate the height of the left subtree
    height(Right, HR),                                                        % - Calculate the height of the right subtree
    max(HL, HR, Max),                                                         % - Find the maximum of the left and right subtree heights
    H is Max + 1.                                                              % - Add 1 to the maximum height to get the height of the current tree