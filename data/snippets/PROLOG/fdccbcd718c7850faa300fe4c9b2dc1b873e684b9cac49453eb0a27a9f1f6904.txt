/* This is a Prolog program that checks if a given list is a palindrome */

/* Define a predicate for checking if a list is a palindrome */
/* The predicate takes in a list and its reversed list as parameters */
is_palindrome(List,Reversed) :- 
    % Check if the list is empty
	List = [],
	/* If the list is empty, both the list and its reverse are empty, hence it is a palindrome */
	Reversed = []
	;
    % If the list is not empty, check if the first element is the same as the last element of the reversed list
	[Head|Tail] = List,
	/* The first element of the original list should be the same as the last element of the reversed list */
	[Head2|Tail2] = Reversed,
	Head = Head2,
    /* Remove the first and last element from both lists and recursively check the remaining elements */
	init(Tail,ReversedTail),
	init(Tail2,ReversedTail2),
	is_palindrome(Tail, ReversedTail),
	is_palindrome(Tail2, ReversedTail2),
    /* If all the recursive checks pass, then the list is a palindrome */
	true.

/* Define a predicate to remove the first and last element of a list */
init([_],[]).
init([H|T],[H|Init]) :- init(T,Init).

/* Declare some test cases */
/* The list [1,2,3,2,1] should be a palindrome */
?- is_palindrome([1,2,3,2,1],Reversed).
/* The list [1,2,3,4,5] should not be a palindrome */
?- is_palindrome([1,2,3,4,5],Reversed).

/* Output:
Output 1 (true):
true

Output 2 (false):
false
*/