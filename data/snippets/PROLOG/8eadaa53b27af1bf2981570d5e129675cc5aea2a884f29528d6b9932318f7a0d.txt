% import standard library
:- use_module(library(random)).

% define a predicate for generating a random number between 1 and 10
generate_random_number(RandomNumber) :-
    random(1, 11, RandomNumber).

% define a predicate for checking if a number is prime
is_prime(Number) :-
    Number > 1, % check if number is greater than 1
    N is Number - 1, % initialize N as the number - 1
    is_prime_helper(N, Number).

is_prime_helper(1, _). % base case, 1 is always a prime number

is_prime_helper(N, Number) :-
    N > 1, % check if N is greater than 1
    N mod Number =\= 0, % check if N is not divisible by Number
    M is N - 1, % initialize M as N - 1
    is_prime_helper(M, Number). % recursively call the function with updated M

% define a predicate for printing out all prime numbers in a given list
print_primes([]). % base case, empty list

print_primes([Head|Tail]) :-
    is_prime(Head), % check if the head of the list is a prime number
    format('~d ', [Head]), % print out the head followed by a space
    print_primes(Tail). % recursively call the function with the tail of the list

print_primes([_|Tail]) :- print_primes(Tail). % if head is not prime, skip and recursively call function with tail

% define a predicate for generating a list of random numbers and printing out all prime numbers in the list
generate_and_print(RandomList) :-
    generate_random_numbers(RandomList), % generate a list of random numbers
    write('Generated List: '), writeln(RandomList), % print out the generated list
    write('Prime Numbers: '), print_primes(RandomList). % print out all prime numbers in the list

% example query: generate_and_print(RandomList).
% expected sample output:
% Generated List: [7, 3, 9, 2, 6, 8, 1, 5, 10, 4]
% Prime Numbers: 7 3 2 5