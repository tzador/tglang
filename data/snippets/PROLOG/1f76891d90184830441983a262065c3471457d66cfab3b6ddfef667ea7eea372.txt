% Define the predicate that checks if a given list is a palindrome
palindrome(List) :- reverse(List, List).

% Define the predicate that recursively calculates the factorial of a given number
factorial(0, 1). % Base case: 0! = 1
factorial(N, Result) :- N > 0, N1 is N - 1, factorial(N1, R1), Result is N * R1.

% Define the predicate that finds the minimum element in a given list
min_element([X],X). % Base case: when list contains only one element, it is the minimum element
min_element([H|T],Result) :- min_element(T, R), H >= R, Result is R. % If head is greater than or equal to the minimum element of tail, then tail is the minimum element
min_element([H|T],Result) :- min_element(T, R), H < R, Result is H. % If head is less than the minimum element of tail, then head is the minimum element

% Define the predicate that merges two sorted lists and maintains the sorted order
merge([], L, L). % Base case: if first list is empty, second list is already sorted
merge(L, [], L). % Base case: if second list is empty, first list is already sorted
merge([H1|T1], [H2|T2], [H1|R]) :- H1 =< H2, merge(T1, [H2|T2], R). % If head of first list is smaller than or equal to head of second list, add it to the merged list and continue merging the rest of first list with second list
merge([H1|T1], [H2|T2], [H2|R]) :- H1 > H2, merge([H1|T1], T2, R). % If head of first list is greater than head of second list, add head of second list to merged list and continue merging the rest of first list with the remaining elements of second list

% Define the predicate that checks if two lists have the same elements, regardless of order
same_elements([],[]). % Base case: if both lists are empty, they have the same elements
same_elements([H|T], L) :- append(F, E, L), append([H], F, L1), append(E, [], L1), same_elements(T, L1). % If head of first list is in second list, remove it from both lists and recursively check the remaining lists