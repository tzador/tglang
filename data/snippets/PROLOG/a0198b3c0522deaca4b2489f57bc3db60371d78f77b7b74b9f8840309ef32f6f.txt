% Define a predicate for finding the factorial of a number
factorial(0, 1). % Base case: The factorial of 0 is 1
factorial(N, F) :- % Recursive case: The factorial of N is F if:
    N > 0, % N is greater than 0
    M is N - 1, % M is N minus 1
    factorial(M, F1), % F1 is the factorial of M
    F is N * F1. % F is N times F1

% Query the predicate to find the factorial of 6
?- factorial(6, X).
% Output should be X = 720

% Define a predicate for checking if a list is sorted or not
sorted([]). % Base case: An empty list is always sorted
sorted([_]). % Base case: A list with one element is always sorted
sorted([X,Y|T]) :- % Recursive case: A list with first element X and second element Y is sorted if:
    X =< Y, % X is less than or equal to Y
    sorted([Y|T]). % The remaining tail of the list is also sorted

% Query the predicate to check if the list [1, 3, 5, 7, 9] is sorted
?- sorted([1, 3, 5, 7, 9]).
% Output should be true