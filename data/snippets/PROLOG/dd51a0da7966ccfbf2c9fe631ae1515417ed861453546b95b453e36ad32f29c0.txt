% add(X,Y,Z) is true if Z is the sum of X and Y
add(X,Y,Z) :-
    Z is X + Y.

% Calculate the factorial of a given number
factorial(0, 1).
factorial(N, Result) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, Result1),
    Result is N * Result1.

% find the maximum of two numbers
maximum(X,Y,X) :-
    X >= Y.
maximum(X,Y,Y) :-
    X < Y.

% check if an element exists in a list
element(X,[X|_]).
element(X,[_|T]) :-
    element(X,T).

% find the length of a list
len([], 0).
len([_|T], N) :-
    len(T, N1),
    N is N1 + 1.

% concatenate two lists
concatenate([], L, L).
concatenate([H|T], L, [H|Result]) :-
    concatenate(T, L, Result).

% reverse a list
reverse_list([],[]).
reverse_list([H|T], R) :-
    reverse_list(T, R1),
    concatenate(R1, [H], R).
    
% check if a list is a palindrome
palindrome(List) :-
    reverse_list(List, List).
    
% check if a number is prime
prime(2).
prime(3).
prime(P) :-
    integer(P),
    P > 3,
    P mod 2 =\= 0,
    \+ has_factor(P,3).
has_factor(N,L) :-
    N mod L =:= 0.
has_factor(N,L) :-
    L * L < N,
    L2 is L + 2,
    has_factor(N,L2).
prime_list(N, List) :-
    findall(Prime, (between(2, N, Prime), prime(Prime)), List).

% Define a family tree
male(henry).
male(george).
male(alex).
male(benjamin).

female(lily).
female(kate).
female(fiona).
female(rachel).

parent(george, benjamin).
parent(george, fiona).
parent(george, rachel).

parent(kate, benjamin).
parent(kate, fiona).
parent(kate, rachel).

parent(alex, lily).
parent(alex, kate).
parent(alex, george).

% Define grandparent relationship
grandparent(A, C) :-
    parent(A, B),
    parent(B, C).

% Define sibling relationship
sibling(A, B) :-
    parent(P, A),
    parent(P, B),
    A \= B.