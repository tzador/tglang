% This is a Prolog program that implements the Knapsack problem.
% It uses dynamic programming to find the optimal solution.

% The first argument is the capacity of the knapsack, and the second argument is a list of items with their weights and values.
knapsack(Capacity, Items) :-
    % We define a helper predicate that takes in the capacity and a list of items, and returns the optimal value for the knapsack.
    knapsack_helper(Capacity, Items, 0).

% Base case for the recursive predicate.
% If the capacity is 0, then the optimal value is 0.
knapsack_helper(0, _, 0).

% Recursive case for the helper predicate.
knapsack_helper(Capacity, [item(Weight, Value)|Rest], OptimalValue) :-
    % If the weight of the current item is greater than the remaining capacity, we skip this item.
    Weight > Capacity,
    !,
    knapsack_helper(Capacity, Rest, OptimalValue).

% Recursive case for the helper predicate.
knapsack_helper(Capacity, [item(Weight, Value)|Rest], OptimalValue) :-
    % If the weight of the current item is less than or equal to the remaining capacity, we consider two possible options:
    % 1. Including the item in the knapsack and updating the current optimal value with its value.
    % 2. Excluding the item from the knapsack and keeping the current optimal value.
    Weight =< Capacity,
    knapsack_helper(Capacity - Weight, Rest, OptimalValue1),
    OptimalValue2 is OptimalValue1 + Value,
    knapsack_helper(Capacity, Rest, OptimalValue3),
    % We choose the maximum of these two options as the optimal value.
    (OptimalValue1 > OptimalValue3 -> OptimalValue = OptimalValue2 ; OptimalValue = OptimalValue3).

% Example query:
% ?- knapsack(10, [item(5, 10), item(7, 12), item(3, 6), item(6, 8), item(4, 5), item(2, 3)]).