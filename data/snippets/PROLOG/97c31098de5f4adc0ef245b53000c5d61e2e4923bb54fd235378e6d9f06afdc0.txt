% This is a comment in Prolog

% Defining a predicate to check if two lists are equal
equal([], []).
equal([Head1 | Tail1], [Head2 | Tail2]) :- Head1 = Head2, equal(Tail1, Tail2).

/*
This is a multi-line comment in Prolog.
It explains the purpose of the predicate and the different clauses used.
*/

% Defining a predicate to check if a number is positive
positive(X) :- X > 0.

% Defining a predicate to check if a number is negative
negative(X) :- X < 0.

/* Defining a recursive predicate to find the sum of a list of numbers
   It takes in the list and an accumulator as input */

sum([], 0). % Base case, the sum of an empty list is 0
sum([Head|Tail], Sum) :- sum(Tail, Accumulator), Sum is Accumulator + Head.

/*
  Defining a predicate to insert an element at a specific position in a list.
  It takes in the list, the element to insert and the index as input.
*/
insert_at(Element, Index, List, Result) :- insert_at_helper(Element, Index, List, 0, [], Result).

% Helper predicate to keep track of current index and build the new list
insert_at_helper(Element, Index, [], _, Accumulator, Result) :- reverse(Accumulator, Reversed), append(Reversed, [Element], Result).
insert_at_helper(Element, Index, [Head|Tail], CurrentIndex, Accumulator, Result) :-
  CurrentIndex =:= Index,
  reverse(Accumulator, Reversed),
  append(Reversed, [Element, Head|Tail], Result).
insert_at_helper(Element, Index, [Head|Tail], CurrentIndex, Accumulator, Result) :-
  NextIndex is CurrentIndex + 1,
  insert_at_helper(Element, Index, Tail, NextIndex, [Head|Accumulator], Result).