% Define a rule for finding the factorial of a number
factorial(1, 1).
factorial(N, Result) :-
    N > 1,
    N1 is N - 1,
    factorial(N1, Result1),
    Result is N * Result1.

% Define a rule for finding the summation of a list of numbers
sum_list([], 0).
sum_list([H|T], Result) :-
    sum_list(T, Result1),
    Result is H + Result1.

% Define a rule for finding the nth element in a list
element_at(1, [H|_], H).
element_at(N, [_|T], Result) :-
    N > 1,
    N1 is N - 1,
    element_at(N1, T, Result).

% Define a rule for finding the smallest element in a list
smallest_element([X], X).
smallest_element([H|T], H) :-
    smallest_element(T, Result),
    H =< Result.
smallest_element([_|T], Result) :-
    smallest_element(T, Result).

% Define a rule for sorting a list in ascending order
% using the selection sort algorithm
selection_sort([], []).
selection_sort(List, [Min|RestSorted]) :-
    smallest_element(List, Min),
    remove_element(Min, List, NewList),
    selection_sort(NewList, RestSorted).

% Define a rule for removing an element from a list
remove_element(X, [X|T], T).
remove_element(X, [H|T], [H|Rest]) :-
    remove_element(X, T, Rest).