/* This program generates a family tree */

% Define the parent-child relationship
parent(john, mary). % John is the parent of Mary
parent(john, ben). % John is the parent of Ben
parent(mary, tom). % Mary is the parent of Tom
parent(mary, alice). % Mary is the parent of Alice
parent(alice, kate). % Alice is the parent of Kate
parent(alice, jack). % Alice is the parent of Jack
parent(tom, nick). % Tom is the parent of Nick

% Define the male-female relationship
male(john). % John is male
male(ben). % Ben is male
male(tom). % Tom is male
male(jack). % Jack is male
male(nick). % Nick is male
female(mary). % Mary is female
female(alice). % Alice is female
female(kate). % Kate is female

% Define the sibling relationship
sibling(X, Y) :- % X is a sibling of Y if
    parent(Z, X), % Z is a parent of X
    parent(Z, Y), % Z is also a parent of Y
    X \= Y. % X and Y are not the same person

% Define the grandfather-grandchild relationship
grandfather(X, Y) :- % X is a grandfather of Y if
    male(X), % X is male
    parent(X, Z), % X is a parent of Z
    parent(Z, Y). % Z is a parent of Y

% Define the aunt-nephew/niece relationship
aunt(X, Y) :- % X is an aunt of Y if
    female(X), % X is female
    sibling(X, Z), % X has a sibling Z
    parent(Z, Y). % Z is a parent of Y

% Define the ancestor-descendant relationship
ancestor(X, Y) :- % X is an ancestor of Y if
    parent(X, Y). % X is a parent of Y (base case)
ancestor(X, Y) :- % X is an ancestor of Y if
    parent(X, Z), % X is a parent of Z
    ancestor(Z, Y). % Z is an ancestor of Y (recursive case)

% Define the cousin relationship
cousin(X, Y) :- % X is a cousin of Y if
    parent(A, X), % A is a parent of X
    parent(B, Y), % B is a parent of Y
    sibling(A, B), % A and B are siblings
    X \= Y. % X and Y are not the same person

% Define the isDescendantOf relationship
isDescendantOf(X, Y) :- % X is a descendant of Y if
    parent(Y, X). % Y is a parent of X (base case)
isDescendantOf(X, Y) :- % X is a descendant of Y if
    parent(Z, X), % Z is a parent of X
    isDescendantOf(Z, Y). % Z is a descendant of Y (recursive case)

% Define the findSiblings predicate
findSiblings(X, Siblings) :- % Siblings is a list containing all of X's siblings
    setof(Sibling, % Set of unique siblings
        X ^ P ^ Sibling, % Variables to use in the set
        (sibling(X, Sibling); sibling(Sibling, X)), % Check if X is a sibling or if a sibling of X
        Siblings % Store in Siblings variable
    ).

% Define the findDescendants predicate
findDescendants(X, Descendants) :- % Descendants is a list containing all of X's descendants
    setof(Descendant, % Set of unique descendants
        X ^ P ^ Descendant, % Variables to use in the set
        (isDescendantOf(Descendant, X)), % Check if Descendant is a descendant of X
        Descendants % Store in Descendants variable
    ).

% Query to find the siblings of Mary and their children
?- findSiblings(mary, Siblings), findDescendants(mary, Children), findDescendants(Siblings, Grandchildren).