% This code snippet is a prolog program that implements a binary search tree

% define a predicate to inititalize a binary tree with a root node and two empty subtrees
init_tree(node(Root, empty, empty)).

% define a predicate to insert a new element into the binary tree
% if the element is smaller than the root, recursively insert into the left subtree
insert(X, node(Root, Left, Right), node(Root, NewLeft, Right)) :-
  X < Root,
  insert(X, Left, NewLeft).

% if the element is larger than the root, recursively insert into the right subtree
insert(X, node(Root, Left, Right), node(Root, Left, NewRight)) :-
  X > Root,
  insert(X, Right, NewRight).

% if the element is equal to the root, do nothing (which ensures no duplicates are added)
insert(X, node(X, Left, Right), node(X, Left, Right)).

% define a predicate to check if an element is in the binary tree
% if the element is in the root, return true
member(X, node(X, _, _)).

% if the element is smaller than the root, recursively check the left subtree
member(X, node(Root, Left, _)) :-
  X < Root,
  member(X, Left).

% if the element is larger than the root, recursively check the right subtree
member(X, node(Root, _, Right)) :-
  X > Root,
  member(X, Right).

% define a predicate to get the maximum element in the binary tree
% the maximum element is always the rightmost element in the tree
max_element(node(Root, _, empty), Root).

% if there is a non-empty right subtree, recursively find the maximum in that subtree
max_element(node(_, _, Right), Max) :-
  max_element(Right, Max).

% define a predicate to delete an element from the binary tree
% if the element is in the root, replace it with the maximum element from the left subtree
delete(X, node(X, Left, Right), NewTree) :-
  max_element(Left, Max),
  delete(Max, Left, OldLeft),
  NewTree = node(Max, OldLeft, Right).

% if the element is smaller than the root, recursively delete from the left subtree
delete(X, node(Root, Left, Right), node(Root, NewLeft, Right)) :-
  X < Root,
  delete(X, Left, NewLeft).

% if the element is larger than the root, recursively delete from the right subtree
delete(X, node(Root, Left, Right), node(Root, Left, NewRight)) :-
  X > Root,
  delete(X, Right, NewRight).

% if the element is not in the tree, return the unchanged tree
delete(_, Tree, Tree).

% example usage:

% initialize a binary tree with root node 5
?- init_tree(Tree), insert(5, Tree, Tree).
% Tree = node(5, empty, empty)

% insert elements 3, 7, and 10 into the tree
?- insert(3, Tree, Tree), insert(7, Tree, Tree), insert(10, Tree, Tree).
% Tree = node(5, node(3, empty, empty), node(7, empty, node(10, empty, empty)))

% check if element 7 is in the tree
?- member(7, Tree).
% true

% check if element 8 is in the tree
?- member(8, Tree).
% false

% delete element 7 from the tree
?- delete(7, Tree, NewTree).
% NewTree = node(5, node(3, empty, empty), node(10, empty, empty))