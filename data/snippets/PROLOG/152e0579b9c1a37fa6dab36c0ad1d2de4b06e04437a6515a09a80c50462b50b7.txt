% a predicate to check if an element is a member of a list
member(X, [X|_]).
member(X, [_|T]) :-
  member(X, T).

% a predicate to check if two lists are equal
equal([], []).
equal([H1|T1], [H2|T2]) :-
  H1 = H2,
  equal(T1, T2).

% a predicate to find the maximum of two numbers
maximum(X, Y, X) :-
  X >= Y.
maximum(X, Y, Y) :-
  X < Y.

% a predicate to calculate the factorial of a number
factorial(0, 1).
factorial(N, F) :-
  N > 0,
  N1 is N - 1,
  factorial(N1, F1),
  F is N * F1.

% a predicate to generate a list of prime numbers up to a given number
is_prime(2).
is_prime(3).
is_prime(P) :-
  integer(P),
  P > 3,
  P mod 2 =\= 0,
  \+ has_factor(P, 3).

has_factor(N, L) :-
  N mod L =:= 0.
has_factor(N, L) :-
  L * L < N,
  L2 is L + 2,
  has_factor(N, L2).

generate_primes(N, Primes) :-
  N >= 2,
  generate_primes(3, N, 2, [2], Primes).

generate_primes(Num, Limit, Count, Primes, Primes) :-
  Count > Limit.
generate_primes(Num, Limit, Count, PreviousPrimes, Primes) :-
  is_prime(Num),
  Count < Limit,
  append(PreviousPrimes, [Num], NewPrimes),
  NewCount is Count + 1,
  NextNum is Num + 2,
  generate_primes(NextNum, Limit, NewCount, NewPrimes, Primes).
generate_primes(Num,Limit, Count, PreviousPrimes, Primes) :-
  NextNum is Num + 2,
  generate_primes(NextNum, Limit, Count, PreviousPrimes, Primes).