/* This is a program that checks if a list is a permutation of another list */

/* Defining a predicate to check if two lists are permutations of each other */
perm(List1, List2) :-
    /* Using the build-in predicate `sort` to create a sorted version of each list */
    sort(List1, Sorted1),
    sort(List2, Sorted2),
    /* Checking if the sorted lists are equal */
    Sorted1 = Sorted2.

/* Defining a predicate to check if an element is in a list */
member(Element, List) :-
    /* Checking if the element is the first element in the list */
    List = [Element|_];
    /* If the element is not the first element, we use recursion to check the rest of the list */
    List = [_|Tail],
    member(Element, Tail).

/* Defining a predicate to check if two lists have the same elements, regardless of order */
same_elements(List1, List2) :-
    /* Checking if all elements in list 1 are also in list 2 */
    foreach(member(Element, List1), member(Element, List2)),
    /* Checking if all elements in list 2 are also in list 1 */
    foreach(member(Element, List2), member(Element, List1)).

/* Defining a predicate to check if a list is a permutation of another list, using the above predicates */
perm(List1, List2) :-

    /* First we check if the length of the lists are the same */
    /* If not, then they cannot be permutations of each other */
    length(List1, Length),
    length(List2, Length),

    /* Then we check if the lists have the same elements, regardless of order */
    same_elements(List1, List2).