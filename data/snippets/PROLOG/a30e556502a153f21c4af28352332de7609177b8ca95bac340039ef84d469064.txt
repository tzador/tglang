% A Prolog program for calculating the shortest path between two nodes in a graph

% Defining dynamic predicates
:- dynamic arc/3.
:- dynamic shortest_path/3.

% The predicate 'arc' defines the directed edges in the graph.
% The first two arguments are nodes and the third argument is the weight of the edge.
arc(a, b, 5).
arc(b, c, 3).
arc(a, c, 10).
arc(b, d, 8).
arc(c, d, 1).
arc(d, e, 6).
arc(e, f, 4).

% The predicate 'shortest_path' calculates the shortest path between two nodes.
% The first two arguments are the start and end nodes.
% The third argument is the list of nodes in the shortest path.
shortest_path(X, X, [X]).
shortest_path(X, Y, [X | Path]):- path(X, Y, [X], Path, 0).
 
% The predicate 'path' recursively finds a path in the graph and keeps track of the total weight.
% The first argument is the current node.
% The second argument is the end node.
% The third argument is the list of visited nodes.
% The fourth argument is the list of nodes in the path.
% The fifth argument is the total weight.
path(X, Y, Visited, [Y], Weight):- arc(X, Y, Weight).
path(X, Y, Visited, [Z | Path], TotalWeight):- 
    arc(X, Z, Weight),
    \+ member(Z, Visited), 
    path(Z, Y, [Z | Visited], Path, NewWeight), 
    TotalWeight is Weight + NewWeight.

% Querying for the shortest path between nodes 'a' and 'f'
?- shortest_path(a, f, Path).
% The output should be [a, c, d, e, f]. (5 + 1 + 6 + 4 = 16)