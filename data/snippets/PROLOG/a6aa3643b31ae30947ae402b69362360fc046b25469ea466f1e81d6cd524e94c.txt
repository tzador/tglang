% This code generates a maze using Prolog
% It takes in a number N and generates a N*N maze
% The maze is represented by a list of lists

% Predicate to generate a list of 0s of size N
zeros(N, Zeros) :-
    length(Zeros, N), % Creates a list of variables with length N
    maplist(=(0), Zeros). % Maps each variable to 0

% Predicate to generate a list of lists of 0s
empty_maze(N, Maze) :-
    length(Maze, N), % Creates a list of variables with length N
    maplist(zeros(N), Maze). %"Maps" the zeros predicate to each variable in the list

% Predicate to generate a random number between 0 and N (exclusive)
random_num(N, Random) :-
    Random is random(N).

% Predicate to add a random number of walls to the maze
add_walls([], []).

add_walls([Row|Rest], [WallRow|WallRest]) :-
    add_walls(Rest, WallRest), % Calls add_walls with the rest of the rows
    random_num(5, Wall), % Generates a random number between 0 and 5
    insert_walls(Row, Wall, WallRow). % Calls insert_walls to insert the random number of walls in the row

% Predicate to insert walls in a row
insert_walls(_, 0, []).

insert_walls([Head|Tail], N, [Head|Result]) :-
    N1 is N - 1,
    insert_walls(Tail, N1, Result). % Inserts the head of the row and calls insert_walls with rest of row and N-1
    
insert_walls([_|Tail], N, [1|Result]) :-
    N > 0, % Ensures that the number of walls is greater than 0
    N1 is N - 1,
    insert_walls(Tail, N1, Result). % Inserts a wall (represented by 1) and calls insert_walls with rest of row and N-1

% Predicate to add a random start and end point in the maze
add_start_end(Maze, NewMaze) :-
    length(Maze, N),
    random_num(N, X), % Generates a random number for the row
    random_num(N, Y), % Generates a random number for the column
    replace(X, Y, Maze, 2, MazeWithStart), % Replaces the value at X, Y with 2 (representing start point)
    random_num(N, X2),
    random_num(N, Y2),
    replace(X2, Y2, MazeWithStart, 3, NewMaze). % Replaces the value at X2, Y2 with 3 (representing end point)

% Predicate to replace a value at a specific index in a list
replace(I, _, L, _, _) :-
    length(L, Len),
    I < 0, I >= Len.

replace(0, El, [_|List], El, [El|List]).
replace(I, El, [Head|Tail], Val, [Head|Rest]) :-
    I1 is I - 1,
    replace(I1, El, Tail, Val, Rest). % Replaces the element at index I with Val and calls replace with the rest of the list

% Predicate to print a row of the maze
print_row([]) :-
    nl. % New line

print_row([Head|Tail]) :-
    print_element(Head), % Calls print_element to print the first element in the row
    print_row(Tail). % Calls print_row with the rest of the row

% Predicate to print an element in a row (0 is empty, 1 is wall, 2 is start, 3 is end)
print_element(0) :-
    write(' ').

print_element(1) :-
    write('â–ˆ').

print_element(2) :-
    write('S'). % Represents the start point

print_element(3) :-
    write('E'). % Represents the end point

% Main predicate to generate and print a maze
maze_generator(N) :-
    empty_maze(N, Maze), % Generates an empty N*N maze
    add_walls(Maze, MazeWithWalls), % Adds random walls to the maze
    add_start_end(MazeWithWalls, FinalMaze), % Adds a random start and end point to the maze
    print_maze(FinalMaze). % Calls print_maze to print the maze

% Predicate to print the entire maze
print_maze([]).

print_maze([Row|Rest]) :-
    print_row(Row), % Calls print_row to print the current row
    print_maze(Rest). % Calls print_maze with the rest of the rows