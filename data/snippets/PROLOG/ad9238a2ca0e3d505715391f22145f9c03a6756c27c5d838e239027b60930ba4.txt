% define a rule to check if a list is in ascending order
ascending([]).	% base case: empty list is always ascending
ascending([_]).	% base case: single element is always ascending
ascending([X,Y|T]) :-	% recursive case: check first two elements and recurse on remaining list
	X =< Y,	% check if first element is less than or equal to second element
	ascending([Y|T]).	% recurse on remaining list

% define a rule to check if a list is in descending order
descending([]).	% base case: empty list is always descending
descending([_]).	% base case: single element is always descending
descending([X,Y|T]) :-	% recursive case: check first two elements and recurse on remaining list
	X >= Y,	% check if first element is greater than or equal to second element
	descending([Y|T]).	% recurse on remaining list

% define a rule to check if a list is in alternating order
alternating([]).	% base case: empty list is always alternating
alternating([_]).	% base case: single element is always alternating
alternating([X,Y|T]) :-	% recursive case: check first two elements and recurse on remaining list
	(X =< Y, alternating([Y|T]) ; X >= Y, alternating([Y|T])).	% check if first two elements are in ascending or descending order and recurse on remaining list

% examples of using the above rules
?- ascending([1,2,3,4,5]).	% true
?- ascending([1,2,3,5,4]).	% false
?- descending([5,4,3,2,1]).	% true
?- descending([5,4,3,1,2]).	% false
?- alternating([1,2,1,2,1]).	% true
?- alternating([1,2,3,2,1]).	% false