% This is a comment in PROLOG
% Define a predicate to check if a list is empty
isEmpty(List) :-
    length(List, 0).

% Define a predicate to check if a list is not empty
isNotEmpty(List) :-
    not(isEmpty(List)).

% Define a predicate to append two lists
append([], List, List).
append([Head|Tail], List, [Head|NewList]) :-
    append(Tail, List, NewList).

% Define a predicate to reverse a list
reverse(List, Reversed) :-
    reverseHelper(List, [], Reversed).
reverseHelper([], Acc, Acc).
reverseHelper([Head|Tail], Acc, Reversed) :-
    reverseHelper(Tail, [Head|Acc], Reversed).

% Define a predicate to merge two sorted lists
merge([], List, List).
merge(List, [], List).
merge([Head1|Tail1], [Head2|Tail2], [Head1|Merged]) :-
    Head1 =< Head2,
    merge(Tail1, [Head2|Tail2], Merged).
merge([Head1|Tail1], [Head2|Tail2], [Head2|Merged]) :-
    Head1 > Head2,
    merge([Head1|Tail1], Tail2, Merged).

% Define a predicate to sort a list using merge sort
mergeSort([], []) :- !.
mergeSort([X], [X]) :- !.
mergeSort(List, Sorted) :-
    split(List, Left, Right),
    mergeSort(Left, SortedLeft),
    mergeSort(Right, SortedRight),
    merge(SortedLeft, SortedRight, Sorted).

split(List, Left, Right) :-
    length(List, Length),
    Mid is floor(Length / 2),
    length(Left, Mid),
    length(Right, Length - Mid),
    append(Left, Right, List).