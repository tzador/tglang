% This is a comment in PROLOG

% Defining facts, i.e. statements that are always true

likes(john, ice_cream). % John likes ice cream
likes(sarah, pizza). % Sarah likes pizza
likes(mark, sushi). % Mark likes sushi

female(sarah). % Sarah is a female
female(jane). % Jane is a female
male(john). % John is a male
male(mark). % Mark is a male

% Defining rules, i.e. statements that are true under certain conditions

likes(sarah, X) :- likes(X, sushi), male(X). % Sarah likes someone who likes sushi and is male

% Defining a recursive predicate for calculating factorial

factorial(0, 1). % Base case - 0 factorial is 1
factorial(N, F) :- N > 0, N1 is N - 1, factorial(N1, F1), F is N * F1. % Recursive case - N factorial is N multiplied by (N - 1) factorial

% Defining a predicate for checking if a list is a palindrome

palindrome([]). % Empty list is a palindrome
palindrome([_]). % Single element list is a palindrome
palindrome([X|Xs]) :- append(M, [X], Xs), palindrome(M). % A list is a palindrome if the first and last element are equal and the remaining list is also a palindrome