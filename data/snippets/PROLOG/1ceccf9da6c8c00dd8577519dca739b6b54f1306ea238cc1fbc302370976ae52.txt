% This is a comment in Prolog

% Defining a predicate called 'is_even' with one parameter
is_even(X) :-
    X mod 2 =:= 0. % Check if the remainder after dividing X by 2 is 0

% Defining a predicate called 'fibo' with three parameters
fibo(0, 0, _). % Base case: first two Fibonacci numbers are 0
fibo(1, 1, _). % Base case: first two Fibonacci numbers are 1
fibo(N, Result, Previous) :-
    N > 1, % Check if N is greater than 1 (to handle negative values)
    NewN is N - 1, % Decrease N by 1 for recursive call
    fibo(NewN, Previous, PreviousPrevious), % Recursive call to fibo with two previous Fibonacci numbers
    Result is Previous + PreviousPrevious. % Calculate current Fibonacci number by adding previous two numbers

% Defining a predicate called 'is_prime' with one parameter
is_prime(2). % 2 is a prime number
is_prime(X) :-
    X > 2, % Check if X is greater than 2 (to handle negative values)
    X mod 2 =\= 0, % Check if X is not divisible by 2
    \+ has_factor(X, 3). % Use cut operator (\+) to check if X has any other factors besides 1 and itself

% Helper predicate to check if X has a factor other than 1 or itself
has_factor(X, Y) :-
    X mod Y =:= 0. % Check if X is divisible by Y (possible factor)
has_factor(X, Y) :-
    Y * Y < X, % Check if Y is less than the square root of X (to optimize runtime)
    NewY is Y + 2, % Increase Y by 2 to skip even numbers (already checked in is_prime predicate)
    has_factor(X, NewY). % Recursive call to check for other factors