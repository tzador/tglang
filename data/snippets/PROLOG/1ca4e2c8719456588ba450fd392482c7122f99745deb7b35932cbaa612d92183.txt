% Base case: an empty tree has no elements and a depth of 0
depth(empty_tree, 0).
 
% Recursive case: the depth of a tree is the depth of its left subtree plus one
depth(tree(Left, _, Right), Depth) :-
  depth(Left, LeftDepth),
  depth(Right, RightDepth),
  Depth is max(LeftDepth, RightDepth) + 1.
 
 
% Base case: a leaf node has a height of 0
height(leaf(X), 0).
 
% Recursive case: the height of a tree is the maximum of the heights of its
% left and right subtrees plus one
height(tree(Left, _, Right), Height) :-
  height(Left, LeftHeight),
  height(Right, RightHeight),
  Height is max(LeftHeight, RightHeight) + 1.
 
% The following code uses the above predicates to find the depth and height
% of a given binary tree
%
% Sample tree structure:
%
%        1
%      /   \
%     2     3
%    / \   / \
%   4   5 6   7
%
% In order to use the predicates, we need to define the tree structure:
%
% tree(Root, Left, Right)
% where Root is the root element of the tree,
% Left is the left subtree, and
% Right is the right subtree.
 
% Define the sample tree:
tree(
  1,
  tree(
    2,
    tree(4, nil, nil),
    tree(5, nil, nil)
  ),
  tree(
    3,
    tree(6, nil, nil),
    tree(7, nil, nil)
  )
).
 
?- depth(tree(1, tree(2, nil, tree(4, nil, nil)), tree(3, nil, nil)), Depth).
Depth = 2.
 
?- height(tree(1, tree(2, nil, tree(4, nil, nil)), tree(3, nil, nil)), Height).
Height = 3.