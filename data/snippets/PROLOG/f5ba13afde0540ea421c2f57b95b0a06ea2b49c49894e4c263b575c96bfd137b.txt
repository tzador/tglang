% Define a predicate that checks if a given number is a prime number
is_prime(2).    % 2 is a prime number
is_prime(3).    % 3 is a prime number
is_prime(N) :-  % for N to be a prime number,
    integer(N), % N must be an integer
    N > 3,      % N must be greater than 3
    N mod 2 =\= 0,  % N must not be divisible by 2
    \+ has_factor(N, 3). % and N must not have any factors other than 1 and itself

% Define a helper predicate that checks if a given number has a factor other than 1 and itself
% This will be used in the is_prime predicate to make the check more efficient
has_factor(N, M) :-  % for N to have a factor M,
    N mod M =:= 0.   % N must be divisible by M

% Define a predicate that generates a list of prime numbers between two given numbers
% The first argument is the lower bound (inclusive) and the second argument is the upper bound (inclusive)
generate_primes(Start, End, Primes) :-
    findall(Prime, (between(Start, End, N), is_prime(N), Prime is N), Primes). % using findall to generate a list of prime numbers between Start and End, by using is_prime on each number (between 2 and End), and then storing the result in the Primes list