% This is a Prolog program that performs predicate logic resolution

% Rules for finding the negation of a formula
neg(not(X), X) :- !.
neg(X, not(X)) :- !.

% Rules for finding the complement of two predicates
compl(X, Y) :- neg(X, NotX), neg(Y, NotY), !, NotX = NotY.

% Rule for resolution
resolvable(L, P) :- select(X, L, R1), select(Xneg, R1, R2), % Selects two complementary literals from the given clause
                     compl(X, Xneg), append(R2, [P], R3), % Appends the other literals from the clause and the predicate to be resolved to form a new clause
                     sort(R3, R). % Sorts the new clause alphabetically

% Function to perform resolution
resolution([L|Ls], []) :-
    member(neg(L), Ls), !. % If a negated literal is found, the resolution is successful
    
resolution(Clauses, [L|Ls]) :- % Otherwise,
    resolvable(Clauses, L), !, % Find two resolvable predicates
    select(L, Clauses, Rest1), % Select one of the predicates
    select(not(L), Rest1, Rest2), % Select its negation in the rest of the clauses
    append(Rest2, Ls, Resolvents), % Append the remaining clauses
    resolution(Resolvents, []). % Perform resolution on the new clauses

% Sample input
?- Clauses = [[not(p), q], [p,not(r,q)]], L = not(r).
?- resolution(Clauses, L).
%