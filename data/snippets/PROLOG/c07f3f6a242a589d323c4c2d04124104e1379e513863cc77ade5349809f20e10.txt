/*
This program takes in a list of numbers and returns a new list with only the prime numbers.
*/

% "is_prime" predicate to check if a number is prime
is_prime(2).
is_prime(3).
is_prime(X) :- X > 3, X mod 2 =\= 0, \+ has_factor(X, 3). % if number is greater than 3 and not divisible by 2, check for factors

% "has_factor" predicate to check if a number has any factors
has_factor(N, M) :- N mod M =:= 0. % if number is divisible by factor, it is not prime
has_factor(N, M) :- M * M < N, M2 is M + 2, has_factor(N, M2). % recursively check for factors by increasing factor by 2 each time

% "prime_list" predicate to filter out prime numbers from a list
prime_list([],[]). % base case for empty list
prime_list([H|T], [H|Primes]) :- is_prime(H), prime_list(T,Primes). % if head of list is prime, add it to list of primes
prime_list([H|T], Primes) :- \+ is_prime(H), prime_list(T,Primes). % if head is not prime, exclude it from list of primes

% example query: prime_list([3,4,7,21,11,13], Primes).
% output: Primes = [3, 7, 11, 13]