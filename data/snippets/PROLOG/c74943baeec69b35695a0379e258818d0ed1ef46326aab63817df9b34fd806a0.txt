%% Defining a predicate to check if a given number is prime
is_prime(2).                            % Base case: 2 is a prime number

is_prime(X) :-                          % Using recursion to check for other numbers
    X > 2,                              % Making sure X is greater than 2
    X mod 2 =\= 0,                      % Checking if X is evenly divisible by 2
    \+ has_divisor(X, 3).               % Using the helper predicate to check for other divisors

% Helper predicate to check for divisors
has_divisor(N, R) :-
    N mod R =:= 0.                       % If N is evenly divisible by R, R is a divisor of N
has_divisor(N, R) :-
    R * R < N,                          % Using square root of N as upper limit for checking for divisors 
    R2 is R + 2,                        % Incrementing R by 2 to only check for odd numbers as divisors
    has_divisor(N, R2).                 % Recursively calling the helper predicate with incremented R

%% Defining a predicate to generate a list of prime numbers within a given range
list_primes(X, Y, [X|T]) :-              % Recursive rule for generating a list of prime numbers
    X =< Y,                              % Making sure starting number X is less than or equal to the end number Y
    is_prime(X),                         % Checking if X is a prime number
    X2 is X + 1,                         % Incrementing X by 1 for next iteration
    list_primes(X2, Y, T).               % Recursively calling the predicate with the incremented X and updated list

list_primes(_, _, []).                   % Base case: When starting number X exceeds the end number Y, return empty list

%% Testing the predicate
?- list_primes(2, 20, L).                % Query to generate a list of prime numbers in the range [2, 20]
% Expected output: L = [2, 3, 5, 7, 11, 13, 17, 19].