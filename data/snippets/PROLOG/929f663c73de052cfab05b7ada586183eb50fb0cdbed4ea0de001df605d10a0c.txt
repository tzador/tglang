% This is a Prolog program that implements an AI agent capable of playing Tic-Tac-Toe game.

% Rules for determining a winning state in Tic-Tac-Toe game
winning_state(Board, Player) :-
  Board = [Player, Player, Player, _, _, _, _, _, _];         // first row
  Board = [_, _, _, Player, Player, Player, _, _, _];         // second row
  Board = [_, _, _, _, _, _, Player, Player, Player];         // third row
  Board = [Player, _, _, Player, _, _, Player, _, _];         // first column
  Board = [_, Player, _, _, Player, _, _, Player, _];         // second column
  Board = [_, _, Player, _, _, Player, _, _, Player];         // third column
  Board = [Player, _, _, _, Player, _, _, _, Player];         // top-left to bottom-right diagonal
  Board = [_, _, Player, _, Player, _, Player, _, _].         // top-right to bottom-left diagonal

% Rules for determining a tie state in Tic-Tac-Toe game
tie_state(Board) :-
  \+ winning_state(Board, x),    // check if x is not in a winning state
  \+ winning_state(Board, o),    // check if o is not in a winning state
  \+ member(e, Board).           // check if there are no empty squares left on the board

% Rules for making a move in Tic-Tac-Toe game
move(Board, Player, NewBoard) :-
  \+ member(e, Board),    // check if there are still empty squares on the board
  winning_state(Board, _),    // check if there is a winning state on the board
  winning_state(Board, Player),    // check if the player is in a winning state on the board
  select(Player, Board, X, Board1),    // place the player's symbol on a square
  NewBoard = [X | Board1].             // update the board with the new move

% Rules for generating all possible moves in Tic-Tac-Toe game
generate_moves(Board, Player, Moves) :-
  findall(NewBoard, move(Board, Player, NewBoard), Moves).     // find all possible boards after the player's move

% Rules for evaluating the board's score in Tic-Tac-Toe game
score(Board, x, Score) :-
  winning_state(Board, x), !, Score = 1.     // set score to 1 if x is in a winning state
score(Board, o, Score) :-
  winning_state(Board, o), !, Score = -1.    // set score to -1 if o is in a winning state
score(Board, _, Score) :-
  tie_state(Board), !, Score = 0.            // set score to 0 if the game is tied
score(_, _, Score) :- Score = 0.              // set default score to 0

% Rules for finding the best move for a player in Tic-Tac-Toe game using minimax algorithm
minimax(Board, Player, Move, Score) :-
  generate_moves(Board, Player, Moves),                 // generate all possible moves for the player
  findall(S-M, (member(Move, Moves), score(Move, Player, S)), Scores-MoveList),    // find scores for each move
  max_list(Scores, MaxScore),                           // find the maximum score
  member(MaxScore-Move, Scores-MoveList).               // select the move with the maximum score

% Example query:
% minimax([o, e, x, e, e, e, e, e, e], x, Move, Score).
% Output:
% Move = [o,e,x,e,x,e,e,e,e],
% Score = 1.