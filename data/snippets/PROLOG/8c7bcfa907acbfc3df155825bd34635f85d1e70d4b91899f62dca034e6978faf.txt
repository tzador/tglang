% This is a complex Prolog code that finds the shortest path between two nodes in a directed graph
 
% Define the rules for finding the shortest path
 
shortest_path(X, X, [X]) :- !.
shortest_path(X, Y, [X,Y]) :- edge(X,Y,_).
shortest_path(X, Y, [X|Path]) :- shortest_path(X, Z, Path), edge(Z,Y,_), not(member(Z,Path)).
 
% Define the predicate for edge
 
edge(a, b, 5).
edge(a, c, 7).
edge(b, d, 1).
edge(c, e, 4).
edge(c, b, 2).
edge(d, e, 2).
 
% Define the predicate for finding shortest path
 
shortest_path(X, Y, Path, Length) :-
    shortest_path(X, Y, Path),
    get_path_length(Path, Length).
 
% Define the predicate for getting the total length of a path
 
get_path_length([_], 0).
get_path_length([A, B|T], Length) :-
    edge(A, B, EdgeLength),
    get_path_length([B|T], Length2),
    Length is Length2 + EdgeLength.
 
% Call the predicate to find the shortest path and its length
 
?- shortest_path(a, e, Path, Length).
 
% Output:
Path = [a, b, d, e]
Length = 8.