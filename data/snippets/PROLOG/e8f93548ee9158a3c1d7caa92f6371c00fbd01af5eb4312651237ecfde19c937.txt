%% Define a predicate that checks if a list is a palindrome

palindrome([]). % Base case, an empty list is a palindrome

palindrome([_]). % Base case, a single element list is a palindrome

% Recursive call, check if first and last elements are equal
palindrome([H|T]) :- %- `H` is the first element of the list, `T` is the tail of the list
    append(Last,[H],T), % `Last` is a list that has all elements from `T` except the last element, `H` is appended at the end of `Last`
    palindrome(Last). % recursion on `Last` to check if it is also a palindrome

%% Define a predicate that gets the last element of a list

last_element([X], X). % Base case, if list has only one element then that element is the last element

last_element([_|T], X) :-
    last_element(T, X). % Recursive call, discard first element and check the rest of the list to find the last element