%% A simple program that checks for divisibility and prints out the numbers from 1 to 100

% Define the predicate "divisible" which checks if X is divisible by Y
divisible(X,Y) :-
    0 is X mod Y.

% Define the predicate "printNumbers" which recursively prints numbers from Start to End
printNumbers(End,End) :- % Base case, if End is reached, stop recursion
    write(End).
printNumbers(Start,End) :- % Recursive case, if Start is not End, print Start and increment it by 1
    write(Start), nl, % "nl" prints a new line
    NewStart is Start + 1,
    printNumbers(NewStart,End).

% Define the main predicate which checks divisibility and calls the printNumbers predicate
main :-
    between(1,100,N), % Use the built-in predicate "between" to generate numbers from 1 to 100 and store it in N
    (divisible(N,3) -> % If N is divisible by 3, print "Fizz"
        write('Fizz'), nl
    ; divisible(N,5) -> % If N is divisible by 5, print "Buzz"
        write('Buzz'), nl
    ; divisible(N,15) -> % If N is divisible by both 3 and 5, print "FizzBuzz"
        write('FizzBuzz'), nl
    ; % Otherwise, call the printNumbers predicate with N as both the Start and End values
        printNumbers(N,N)
    ),
    fail. % Call the fail predicate to backtrack and generate the next number
% Repeat until there are no more numbers left to iterate through

% Call the main predicate to start the program
:- main.