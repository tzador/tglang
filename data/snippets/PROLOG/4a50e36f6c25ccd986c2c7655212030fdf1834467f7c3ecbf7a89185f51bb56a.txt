% Rules for finding the shortest path in a directed graph using the Dijkstra's algorithm

% Initializing the graph with nodes and their connections
route(Start, End, Length) :- path(Start, End, Length).
route(Start, End, Length) :- path(Start, Intermediate, Length1),
                             route(Intermediate, End, Length2),
                             Length is Length1 + Length2.

% Finding the shortest path using the Dijkstra's algorithm
shortestPath(Start, End, Route, Length) :- setof([Route, Length], route(Start, End, Length), Routes),
                                            Routes = [[Route, Length]|_].
shortestPath(Start, End, Route, Length) :- setof([NewRoute, NewLength], (route(Start, Intermediate, IntermediateLength), shortestPath(Intermediate, End, NewRoute, NewLength)), Routes),
                                            Routes = [[Route, Length]|_],
                                            Route = [Intermediate|_],
                                            Length is IntermediateLength + NewLength.

% Defining the path between two nodes in the graph
path(a, b, 10).
path(b, c, 5).
path(c, d, 10).
path(a, d, 20).
path(b, d, 15).
path(c, e, 5).
path(d, e, 10).
path(d, f, 15).
path(e, f, 5).

% Query to find the shortest path between nodes a and f
?- shortestPath(a, f, Route, Length).