% This is a comment in PROLOG
% Defining a predicate called 'sum' with two arguments
sum(A,B) :-
    % If either argument is 0, the sum is the other argument, we end the recursion
    (A = 0; B = 0) -> 
    % The result is the non-zero argument
    (A + B);
    % If both arguments are not 0, we decrement both arguments by 1 and add 1 to the result
    NewA is A - 1,
    NewB is B - 1,
    Result is 1,
    % Then we recursively call 'sum' with the new arguments and the result as the third argument
    sum(NewA, NewB, Result).

% This is a query that will call the 'sum' predicate with the arguments 3 and 5
?- sum(3, 5, Result).
% Output: Result = 8

% Defining a predicate called 'fibonacci' with two arguments
fibonacci(0, 0).
fibonacci(1, 1).
fibonacci(N, Result) :-
    % If N is greater than 1, we recursively call 'fibonacci' with N-1 and N-2
    N > 1,
    N1 is N-1,
    N2 is N-2,
    fibonacci(N1, Result1),
    fibonacci(N2, Result2),
    % The result is the sum of the previous two terms
    Result is Result1 + Result2.

% This is a query that will call the 'fibonacci' predicate with the argument 5
?- fibonacci(5, Result).
% Output: Result = 5

% Defining a predicate called 'is_prime' with one argument
is_prime(2).
is_prime(3).
is_prime(P) :-
    % If P is larger than 3, we check if it is divisible by any numbers between 2 and P-1
    P > 3,
    % We use a built-in predicate 'between' to generate numbers between 2 and P-1
    between(2, P-1, X),
    % If P is divisible by X, it is not prime
    0 is P mod X ->
    fail;
    % Otherwise, it is prime
    true.

% This is a query that will check if 7 is a prime number
?- is_prime(7).
% Output: true