%this is a comment

/*defining a rule "food" with two arguments*/
food(apple, fruit).

/*defining a rule "food" with three arguments*/
food(pizza, savory, main_dish).

/*defining a rule "likes" with two arguments*/
likes(john, pizza).

/*defining a rule "likes" with three arguments*/
likes(mary, apple, fruit).

/*defining a rule "likes_any" with two arguments and using pattern matching*/
likes_any(X, food(Y,_)) :-
    likes(X,Y).

/*defining a rule "likes_any" with one argument that will match any value and printing a statement if it is true*/
likes_any(X) :-
    food(Y,_), /*using built-in predicate "food" with one anonymous variable*/
    write(X), /*using built-in predicate "write" to print the value of X*/
    write(" likes "),
    write(Y).


/*defining a rule "likable" with one argument that checks if the argument is an existing rule "likes_any"*/
likable(X) :-
    clause(likes_any(X), true). /*using built-in predicate "clause" to check if the rule exists and evaluating it to "true"*/



/*
    OUTPUT:
    
    food(apple, fruit).
    food(pizza, savory, main_dish).
    likes(john, pizza).
    likes(mary, apple, fruit).
    likes_any(X, food(Y,_)) :-
        likes(X,Y).
    likes_any(X) :-
        food(Y,_),
        write(X),
        write(" likes "),
        write(Y).
    likable(X) :-
        clause(likes_any(X), true)
*/