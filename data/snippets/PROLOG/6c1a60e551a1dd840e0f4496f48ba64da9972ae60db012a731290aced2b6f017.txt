/* This is a Prolog program demonstrating the power of logic in solving problems */

/* Define a predicate to check if a number is prime or not */
is_prime(2).
is_prime(3).
is_prime(N):- integer(N), N > 3, N mod 2 =\= 0, \+ has_factor (N,3).

/* Define a predicate to check if a number has a factor */
has_factor(N,S) :- N mod S =:= 0.
has_factor(N,S) :- S * S < N, S2 is S + 2, has_factor(N,S2).

/* Define a predicate to find all prime numbers between two given numbers */
find_primes(Start, End, Primes):-
    findall(N, (between(Start, End, N), is_prime(N)), Primes).

/* Define a predicate to find all possible combinations of a given list*/
comb([], []).
comb([X|Xs], [X|Ps]) :- comb(Xs, Ps).
comb([_|Xs], Ps) :- comb(Xs, Ps).

/* Define a predicate to check if a given list is a permutation of another list */
permutation([], []).
permutation(Xs, [Z|Zs]) :-
    select(Z, Xs, Ys),
    permutation(Ys, Zs).

/* Define a predicate to find the maximum element in a list */
find_max([X], X).
find_max([X|Xs], X):-
    find_max(Xs, Y),
    X >= Y.
find_max([X|Xs], N):-
    find_max(Xs, N),
    X < N.
    
/* Define a predicate to calculate the factorial of a given number */
factorial(0, 1).
factorial(N, F) :- N > 0, N1 is N - 1, factorial(N1, F1), F is N * F1.

/* Define a predicate to calculate the sum of squares of all the elements in a list */
sum_squares([], 0).
sum_squares([X|Xs], Sum):-
    sum_squares(Xs, Sum1),
    Sum is X*X + Sum1.

/* Define a predicate to calculate the length of a list */
length([], 0).
length([_|Xs], N) :- length(Xs, N1), N is N1 + 1.

/* Define a predicate to find the nth element in a list */
nth(1, [X|_], X).
nth(N,[X|Xs],E) :- N > 1, N1 is N - 1, nth(N1,Xs,E).

/* Define a predicate to check if two lists are equal */
are_equal([], []).
are_equal([X|Xs], [X|Ys]):-
  are_equal(Xs,Ys).