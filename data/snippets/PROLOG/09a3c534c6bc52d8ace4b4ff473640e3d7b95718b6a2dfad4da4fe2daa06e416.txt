% This is a program that helps find the shortest path between two nodes in a given graph
% The graph is represented as a list of edges in the form of (Source, Destination, Distance)
% Example graph: [(a, b, 3), (a, c, 5), (b, c, 2), (b, d, 6), (c, d, 4)]

% Check if the given node is the final node
is_final_node(Node, Path) :-
    last(Path, Node).

% Predicate to find the distance between two nodes in the graph
distance(Source, Destination, Distance, Graph):-
    member((Source, Destination, Distance), Graph).

% Find shortest path between two nodes using Dijkstra's algorithm
% Dijkstra's algorithm starts from the start node and considers the closest nodes one by one
% Until it reaches a final node
shortest_path(Start, End, Path, Graph) :-
    dijkstra(Start, End, [Start], Path, 0, Graph).

% Base case for shortest_path
% Once the current node is the final node, return the path
shortest_path(End, End, Path, Path, Distance, _).

% Recursive case for shortest_path
% First, find the distance to all connected nodes from the last node in the current path
% Then, find the closest node among the connected nodes
% Remove the closest node from the connected nodes list and add it to the current path
% Then, recursively call shortest_path with the updated path and distance
% Keep track of the total distance traveled in the current path
shortest_path(Start, End, Visited, Path, Distance, Graph) :-
    last(Visited, Last),
    findall((Next, NewDistance),
        (distance(Last, Next, NewDistance, Graph), \+member(Next, Visited)),
        NewNodes),
    find_next_node(NewNodes, Next, DistanceToNext),
    append(Visited, [Next], VisitedUpdated),
    NewDistance is Distance + DistanceToNext,
    shortest_path(Start, End, VisitedUpdated, Path, NewDistance, Graph).

% Predicate to find the next node with the shortest distance from the current node
% Uses tail recursion to keep track of the closest node and its distance
find_next_node([(Node, Distance)|_], Node, Distance).

find_next_node([(_, Distance)|Rest], Node, CurrentDistance) :-
    find_next_node(Rest, Node, NextDistance),
    NextDistance =< Distance,
    CurrentDistance = NextDistance.