%%% predicate to generate a list and find its median
generate_list(N,List):- 
    %%% use built-in predicate to generate a list of size N 
    length(List, N), 
    %%% use built-in predicate to fill the list with random numbers 
    maplist(random(1,N), List). 
    
%%% predicate to find the median of a list
median(List, Median):- 
    %%% sort the list in ascending order 
    sort(List, Sorted), 
    %%% get the length of the list 
    length(Sorted, Length), 
    %%% if the length is odd, find the middle element 
    Length mod 2 =:= 1 -> 
        %%% calculate the index of the middle element 
        MedianIndex is (Length+1)//2, 
        %%% use built-in predicate to get the element at the median index 
        nth1(MedianIndex, Sorted, Median); 
    %%% if the length is even, find the two middle elements 
    Length mod 2 =:= 0 -> 
        %%% calculate the indices of the two middle elements 
        MidIndex1 is Length//2, 
        MidIndex2 is MidIndex1+1, 
        %%% use built-in predicate to get the elements at the two median indices 
        nth1(MidIndex1, Sorted, Mid1), 
        nth1(MidIndex2, Sorted, Mid2), 
        %%% calculate the average of the two middle elements 
        Median is (Mid1+Mid2)/2.

%%% example usage
?- generate_list(10,List), 
   write(List), nl, 
   median(List, Median), 
   write("Median: "), write(Median).

%%% output
[2, 4, 9, 6, 3, 1, 8, 5, 10, 7]
Median: 5.5