% Define the factorial predicate with two arguments
factorial(0, 1).
factorial(N, Result) :-
    N > 0,
    N1 is N-1,
    factorial(N1, Result1),
    Result is N * Result1.

% Define the sum predicate with three arguments
sum([], 0).
sum([Head|Tail], Sum) :-
    sum(Tail, Sum1),
    Sum is Head + Sum1.

% Define the power predicate with three arguments
power(_, 0, 1).
power(Base, Exponent, Result) :-
    Exponent > 0,
    NewExponent is Exponent - 1,
    power(Base, NewExponent, Result1),
    Result is Base * Result1.

% Define the list_length predicate with two arguments
list_length([], 0).
list_length([_|Tail], Length) :-
    list_length(Tail, Length1),
    Length is Length1 + 1.

% Define the helper predicate for the list_reverse predicate
helper_list_reverse([], Reversed, Reversed).
helper_list_reverse([Head|Tail], Reversed, Accumulator) :-
    helper_list_reverse(Tail, Reversed, [Head|Accumulator]).

% Define the list_reverse predicate with two arguments
list_reverse(List, Reversed) :-
    helper_list_reverse(List, Reversed, []).