/*
    This is a recursive predicate that checks if a given list is a palindrome.
    A palindrome is a sequence that reads the same backward as forward.
    The base case checks if the list is empty or has only one element.
    The recursive case checks if the first and last element are the same, and then calls
    itself on the inner list without the first and last elements.
*/
palindrome([]).                   % base case when list is empty
palindrome([_]).                  % base case when list has one element   
palindrome([X|L]) :-               % recursive case for list with more than one element
    last(L, Y),                    % get the last element of the list
    X = Y,                         % check if first and last elements are the same 
    select(Y, L, L1),              % remove first and last elements from list
    palindrome(L1).                % call itself on the inner list
    
/*
    This is a helper predicate that removes an element from a list.
    The base case checks if the element to be removed is the first element of the list.
    The recursive case checks if the element is present in the list and removes it.
*/
select(X, [X|L], L).               % base case when element to remove is first element of list
select(X, [Y|L], [Y|L1]) :-        % recursive case to remove element from list
    select(X, L, L1). 
    
/*
    Example usage:
    ?- palindrome([1,2,3,2,1]).
    true.
    
    ?- palindrome([1,2,3,4,5]).
    false.
*/