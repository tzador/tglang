%% A Prolog program that checks if a given number is prime

% Define the predicate prime that takes in a number as input and checks if it is prime
prime(X) :- 
    X < 2, % A number less than 2 cannot be prime
    !, 
    false. % Return false if the number is less than 2

prime(X) :- 
    X is 2, % 2 is the only even prime number
    true. % Return true if the number is 2

prime(X) :- 
    X > 2, % Check if the number is greater than 2
    X mod 2 =\= 0, % Check if the number is not divisible by 2
    prime_helper(X, 3). % Call the helper predicate with X as input and start checking primes starting from 3

% Define the helper predicate prime_helper that takes in a number and a divisor as input and checks if the number is divisible by the divisor
prime_helper(X, Y) :- % If the divisor reaches the number itself, return true as it is a prime number
    X =:= Y, 
    true.

prime_helper(X, Y) :- % If the divisor is greater than the square root of the number, return true as it is a prime number
    Y * Y > X, 
    true.

prime_helper(X, Y) :- % Check if the number is divisible by the current divisor
    X mod Y =:= 0, 
    false. % Return false if it is divisible, indicating the number is not prime

prime_helper(X, Y) :- % Increment the divisor and recursively call the helper predicate
    Y < X, 
    Y1 is Y + 2, % Increment Y by 2 since all even numbers are already checked
    prime_helper(X, Y1). % Recursive call to keep checking primes until a divisor greater than the square root of the number is reached