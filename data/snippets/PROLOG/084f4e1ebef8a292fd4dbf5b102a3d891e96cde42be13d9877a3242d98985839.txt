% This is a comment in PROLOG

% Define a predicate for calculating the factorial of a number
% The first argument represents the number, and the second argument represents the factorial value
factorial(0,1). % Base case: 0! = 1
factorial(N,F) :- % Recursive case
    N > 0, % Check that N is a positive integer
    N1 is N-1, % Calculate N-1
    factorial(N1,F1), % Calculate the factorial of N-1
    F is N * F1. % Calculate the factorial of N by multiplying N and the factorial of N-1

% Define a predicate for calculating the Fibonacci sequence
% The first argument represents the index of the number, and the second argument represents the value at that index
fib(0,0). % Base case: fib(0) = 0
fib(1,1). % Base case: fib(1) = 1
fib(N,F) :- % Recursive case
    N > 1, % Check that N is a positive integer
    N1 is N - 1, % Calculate N-1
    N2 is N - 2, % Calculate N-2
    fib(N1,F1), % Calculate the Fibonacci number at N-1
    fib(N2,F2), % Calculate the Fibonacci number at N-2
    F is F1 + F2. % Calculate the Fibonacci number at N by adding the Fibonacci numbers at N-1 and N-2

% Define a predicate for determining whether a list is a palindrome
% The first argument represents the list, and the second argument represents whether the list is a palindrome or not
palindrome(L) :-
    reverse(L,LRev), % Reverse the list
    L == LRev. % Check if the reversed list is equal to the original list