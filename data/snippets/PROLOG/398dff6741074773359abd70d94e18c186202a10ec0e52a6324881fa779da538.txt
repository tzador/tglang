%% This is a Prolog program that implements the Tower of Hanoi problem
%% Tower of Hanoi is a mathematical puzzle that consists of three rods and disks of different sizes
%% The objective of the game is to move all the disks from the first to the third rod, adhering to three rules:
%% 1. Only one disk can be moved at a time
%% 2. A disk can only be placed on top of a larger disk or an empty rod
%% 3. Disks can only be moved from the top of a rod
%% This implementation uses the concept of recursion to solve the problem

%% Define a predicate to solve the Tower of Hanoi problem
%% It takes three arguments: number of disks, starting rod, and ending rod
%% The third argument is initially set to an empty list
tower_of_hanoi(0, _, _, _).
tower_of_hanoi(N, Rod1, Rod2, Rod3) :-
    %% Move N-1 disks from Rod1 to Rod2 using Rod3 as a temporary rod
    N1 is N-1,
    tower_of_hanoi(N1, Rod1, Rod3, Rod2), 
    %% Move the remaining disk from Rod1 to Rod3
    %% This will serve as the base case for the recursion
    %% Since there is only one disk left, it can be moved directly from the starting rod to the ending rod
    write('Move disk from '), 
    write(Rod1), 
    write(' to '),
    write(Rod3), 
    write('.\n'),
    %% Move N-1 disks from Rod2 to Rod3 using Rod1 as a temporary rod
    tower_of_hanoi(N1, Rod2, Rod1, Rod3).

%% Call the predicate with argument values: number of disks = 3, starting rod = A, ending rod = C
tower_of_hanoi(3, A, B, C).

%% Output:
%% Move disk from A to C.
%% Move disk from A to B.
%% Move disk from C to B.
%% Move disk from A to C.
%% Move disk from B to A.
%% Move disk from B to C.
%% Move disk from A to C.