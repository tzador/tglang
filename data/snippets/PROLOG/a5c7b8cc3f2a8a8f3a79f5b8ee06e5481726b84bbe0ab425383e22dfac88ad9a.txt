/*** The following code generates a list of prime numbers using the Sieve of Eratosthenes algorithm
     and checks if a given number is prime or not ***/

% Define the predicate for finding all prime numbers up to a given limit
find_prime_numbers(Limit, Primes) :-
    % Initialize a list of integers from 2 to the limit
    numlist(2, Limit, Numbers), 
    % Exclude any multiples of 2 from the list
    exclude(mult_of_two, Numbers, Primes), 
    % Exclude any multiples of other odd numbers from the list
    sieve(Primes, 3).

% Define the rule for excluding multiples of a given number N from a list
exclude_mult(N, X, L) :- mod(X, N) =\= 0.

% Define the rule for excluding multiples of 2 (since 2 is the only even prime number)
mult_of_two(X) :- exclude_mult(2, X, L).

% Define the rule for excluding multiples of other odd numbers using recursion
sieve([H|T], N) :-
    % Stop when the square of N is greater than the head of the list
    H * H > N,
    % Append the remaining list to the output
    append([], [N|T], Output).

sieve([H|T], N) :-
    % Get the square of N
    N_squared is N * N,
    % Exclude all multiples of N from the list
    exclude(exclude_mult(N), [H|T], Remaining), 
    % Recursively call the sieve function with the updated list and the next odd number
    sieve(Remaining, N + 2).

% Define the predicate for checking if a given number is prime
is_prime(Number) :-
    % Check if the number is greater than 2, since 2 is the smallest prime number
    Number > 2,
    % Check if the number is not divisible by any numbers from 2 to the square root of the number
    not((between(2, sqrt(Number), X), mod(Number, X) =:= 0)).

% Define the predicate for finding all prime numbers up to a given limit and storing them in a list
get_prime_numbers(Limit, PrimeList) :-
    find_prime_numbers(Limit, Primes),
    % Filter out any numbers that are not prime using the is_prime predicate
    include(is_prime, Primes, PrimeList).