/* This is a Prolog program that finds the maximum value in a list of integers */

/* Predicate to find maximum value */
max_list([Head|Tail], Max) :-
/* Call to recursive helper predicate to find maximum value */
    max_list_helper(Tail, Head, Max).

/* Base case: List is empty, maximum value is the current maximum */
max_list_helper([], Max, Max).

/* Recursive rule: Compare the current maximum value with the head of the list
and recursively call the helper predicate with the updated maximum value if it is larger */
max_list_helper([Head|Tail], CurrentMax, Max) :-
    /* If the head of the list is larger than the current maximum, update the maximum */
    Head > CurrentMax,
    /* Call the helper predicate with the updated maximum value */
    max_list_helper(Tail, Head, Max).

/* If the head of the list is smaller than the current maximum, continue with the same maximum */
max_list_helper([Head|Tail], CurrentMax, Max) :-
    /* If the head of the list is smaller than or equal to the current maximum, do not update maximum */
    Head =< CurrentMax,
    /* Call the helper predicate with the same maximum value */
    max_list_helper(Tail, CurrentMax, Max).