/* This is a comment in PROLOG */

/* Defining a predicate to check if a number is prime */
prime(X):-                 /* This line indicates that prime(X) is a fact or rule */
    X > 1,                 /* First condition: X must be greater than 1 */
    Y is X-1,              /* Y is a temporary variable used to check factors of X */
    not((between(2, Y, Z), /* This nested predicate checks if any number between 2 and Y (excluded) is a factor of X */
    X mod Z =\= 0)).       /* 'mod' is the modulo operator, =\= means not equal */

/* Defining a predicate to calculate the factorial of a number */
factorial(N, Result):-     /* N is the input number and Result is the output number */
    (N = 0               % If N is equal to 0,
    -> Result = 1         /* then set Result to 1 (base case) */
    ; Calc is N-1,       /* else, calculate Calc which is N-1 */
    factorial(Calc, Temp), /* recursively call factorial with Calc and assign the result to Temp */
    Result is N * Temp).   /* multiply N and Temp to get the final result */

/* Defining a predicate to reverse a list */
reverseList([], []).      /* Base case: An empty list is the reverse of an empty list */
reverseList([X|Xs], Ys):- /* Recursive case: X is the head of the original list and Xs is the tail */
    reverseList(Xs, Bs),   /* recursively call reverseList with Xs and assign the result to Bs */
    append(Bs, [X], Ys).   /* append X to the end of Bs to get the original list reversed and assign it to Ys */