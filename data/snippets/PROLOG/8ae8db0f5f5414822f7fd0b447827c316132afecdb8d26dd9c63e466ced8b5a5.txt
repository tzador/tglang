%% Defining a predicate to find the sum of a list of numbers
sum_list([],0).    %% Base case: Empty list has a sum of 0
sum_list([H|T],Sum):- sum_list(T,PartialSum),    %% Using recursion to break down the list
                      Sum is H + PartialSum.
%% Defining rules for arithmetic operations on complex numbers in polar form
plus(Complex1,Complex2,Result):-   %% Addition
    Complex1 = polar(Form1,Angle1),
    Complex2 = polar(Form2,Angle2),
    ResultForm is sqrt(Form1^2 + Form2^2 + 2*Form1*Form2*cos(Angle1-Angle2)),
    ResultAngle is atan2(Form1*sin(Angle1)+Form2*sin(Angle2), Form1*cos(Angle1)+Form2*cos(Angle2)),
    Result = polar(ResultForm,ResultAngle).
minus(Complex1,Complex2,Result):-  %% Subtraction
    Complex1 = polar(Form1,Angle1),
    Complex2 = polar(Form2,Angle2),
    ResultForm is sqrt(Form1^2 + Form2^2 - 2*Form1*Form2*cos(Angle1-Angle2)),
    ResultAngle is atan2(Form1*sin(Angle1)-Form2*sin(Angle2), Form1*cos(Angle1)-Form2*cos(Angle2)),
    Result = polar(ResultForm,ResultAngle).
times(Complex1,Complex2,Result):-  %% Multiplication
    Complex1 = polar(Form1,Angle1),
    Complex2 = polar(Form2,Angle2),
    ResultForm is Form1*Form2,
    ResultAngle is Angle1+Angle2,
    Result = polar(ResultForm,ResultAngle).
divide(Complex1,Complex2,Result):- %% Division
    Complex1 = polar(Form1,Angle1),
    Complex2 = polar(Form2,Angle2),
    ResultForm is Form1/Form2,
    ResultAngle is Angle1-Angle2,
    Result = polar(ResultForm,ResultAngle).