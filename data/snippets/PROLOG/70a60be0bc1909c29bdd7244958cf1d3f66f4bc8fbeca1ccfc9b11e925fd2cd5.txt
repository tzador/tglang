/* This is a PROLOG code snippet that defines a predicate for sorting a list in ascending order */

/* base case: if the list is empty, return an empty list */
sort([], []).

/* recursive case: if the list has only one element, return the same list */
sort([X], [X]).

/* recursive case: if the list has more than one element, split the list into head and tail */
sort([H|T], SortedList) :-
    partition(T, H, Smaller, Larger), /* use the partition predicate to split list into smaller and larger elements */
    sort(Smaller, SortedSmaller), /* sort the smaller elements */
    sort(Larger, SortedLarger), /* sort the larger elements */
    append(SortedSmaller, [H|SortedLarger], SortedList). /* append the sorted smaller elements, the head, and the sorted larger elements */

/* partition predicate that splits a list into two lists: one with elements smaller than the pivot, and one with elements larger */
partition([], _, [], []).

/* if the element is smaller than the pivot, add it to the smaller list */
partition([X|T], Pivot, [X|Smaller], Larger) :-
    X =< Pivot,
    partition(T, Pivot, Smaller, Larger).

/* if the element is larger than the pivot, add it to the larger list */
partition([X|T], Pivot, Smaller, [X|Larger]) :-
    X > Pivot,
    partition(T, Pivot, Smaller, Larger).