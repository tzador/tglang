% Defining the list of numbers
numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).

% Predicate to check if the given number is prime
is_prime(Number) :-
  Number > 1, % The number must be greater than 1
  is_prime_helper(Number, 2). % Call helper predicate with starting divisor of 2

% Helper predicate to check if a number is prime
is_prime_helper(Number, Divisor) :-
  Number =:= Divisor, % Base case: Number equals the divisor, therefore it is prime
  !. % Cut operator to stop backtracking

is_prime_helper(Number, Divisor) :-
  Number mod Divisor =\= 0, % Number is not divisible by current divisor
  DivisorPlusOne is Divisor + 1, % Increment the divisor
  is_prime_helper(Number, DivisorPlusOne). % Continue to check with the updated divisor

% Predicate to find the nth prime number
prime(Number, Prime) :-
  numbers(Numbers), % Get list of numbers
  get_nth(Number, Numbers, Nth), % Get the nth number in the list
  is_prime(Nth), % Check if the nth number is prime
  Prime is Nth. % If it is prime, assign it to the output

% Helper predicate to get the nth element in a list
get_nth(N, [Head|_], Head) :-
  N =:= 1, % Base case: First element in list is the desired element
  !. % Cut operator to stop backtracking

get_nth(N, [_|Tail], Element) :-
  NMinusOne is N - 1, % Decrement the desired index
  get_nth(NMinusOne, Tail, Element). % Continue with the updated list and index

% Query to find the 5th prime number
?- prime(5, N).