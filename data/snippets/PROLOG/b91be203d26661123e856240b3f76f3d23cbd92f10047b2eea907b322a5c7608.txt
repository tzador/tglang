/** 
 * This predicate takes in a list and returns whether the list is sorted in ascending order.
 * First we specify our base case, where an empty list is considered sorted.
 * Then we use Prolog's built in predicate to check if the head of the list is less than or equal to the next element in the list.
 * If it is, we recursively call the predicate on the tail of the list.
 * If at any point the above condition is not met, the list is not sorted and the predicate will fail.
 */

is_sorted([]). % Base case, empty list is sorted
is_sorted([_]). % Base case, single element list is sorted
is_sorted([Head, Next|Tail]) :- Head =< Next, is_sorted([Next|Tail]). % Recursive call, check if Head <= Next and call on Tail if true

/** 
 * This predicate takes in two lists, merges them into one sorted list, and removes any duplicates.
 * We first create a new list containing all the elements from both given lists.
 * Then we use Prolog's built in sorting predicate to sort the list in ascending order.
 * Finally, we use Prolog's built in predicate to remove any duplicates from the sorted list.
 */

merge_and_remove_duplicates(List1, List2, SortedList) :-
    append(List1, List2, CombinedList), % Create a new list containing all elements from both lists
    sort(CombinedList, SortedList), % Sort the new list in ascending order
    nth1(_, SortedList, Element), nth1(Index, SortedList, Element), % For each element in the sorted list,
    Index > 1, nth1(Index-1, SortedList, PrevElement), Element == PrevElement, % Check if any previous elements are equal
    delete(SortedList, Element, NewList), % If there is a duplicate, remove it from the list
    merge_and_remove_duplicates(List1, List2, NewList). % Recursive call until there are no more duplicates left in the list