/* This is a program that models a simple banking system with accounts and transactions */
 
/* Define a dynamic predicate to keep track of bank accounts */
:- dynamic(account/3).

/* Define a fact for initial account balance of 5000 for account number 1 */
account(1, account1, 5000).

/* Define a fact for initial account balance of 3000 for account number 2 */
account(2, account2, 3000).

/* Define a predicate to check if an account number is valid */
valid_account(Account) :-
    account(Account, _, _).

/* Define a predicate to check if the given amount is valid (positive and non-zero) */
valid_amount(Amount) :-
    Amount > 0.

/* Define a predicate to check if there is enough balance in a given account */
enough_balance(Account, Amount) :-
    account(Account, _, Balance),
    Balance >= Amount.

/* Define a predicate to perform a withdrawal from a given account */
withdraw(Account, Amount) :-
    valid_account(Account),
    valid_amount(Amount),
    enough_balance(Account, Amount),
    retract(account(Account, AccountName, Balance)), /* Retrieve the current account details */
    NewBalance is Balance - Amount, /* Calculate the new balance */
    assert(account(Account, AccountName, NewBalance)). /* Update the account details */

/* Define a predicate to perform a deposit into a given account */
deposit(Account, Amount) :-
    valid_account(Account),
    valid_amount(Amount),
    retract(account(Account, AccountName, Balance)), /* Retrieve the current account details */
    NewBalance is Balance + Amount, /* Calculate the new balance */
    assert(account(Account, AccountName, NewBalance)). /* Update the account details */

/* Define a predicate to transfer funds from one account to another */
transfer(Sender, Receiver, Amount) :-
    valid_account(Sender),
    valid_account(Receiver),
    valid_amount(Amount),
    enough_balance(Sender, Amount),
    retract(account(Sender, SenderName, SenderBalance)), /* Retrieve the current sender account details */
    NewSenderBalance is SenderBalance - Amount, /* Calculate the new sender balance */
    assert(account(Sender, SenderName, NewSenderBalance)), /* Update the sender account details */
    retract(account(Receiver, ReceiverName, ReceiverBalance)), /* Retrieve the current receiver account details */
    NewReceiverBalance is ReceiverBalance + Amount, /* Calculate the new receiver balance */
    assert(account(Receiver, ReceiverName, NewReceiverBalance)). /* Update the receiver account details */