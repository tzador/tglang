% This is a Prolog comment

% Defining a predicate to check if two lists are equal
equal([], []).                % If both lists are empty, they are equal.
equal([Head1|Tail1], [Head2|Tail2]) :- Head1 = Head2, equal(Tail1, Tail2).   % If heads are equal, check tails for equality.

% Defining a predicate to concatenate two lists
concatenate([], L, L).         % Concatenating an empty list, results in the original list.
concatenate([Head|Tail], L, [Head|Rest]) :- concatenate(Tail, L, Rest).      % Concatenating the head of the first list, and recursively concatenating the tail and second list.

% Defining a predicate to find the length of a list
length([], 0).                 % The length of an empty list is 0.
length([_|Tail], Len) :- length(Tail, TailLen), Len is TailLen+1.            % Incrementing the length by 1 as we recursively iterate through the list.

% Defining a predicate to check if an element is a member of a list
member(X, [X|_]).              % If the head of the list is the element, it is a member.
member(X, [_|Tail]) :- member(X, Tail).                                      % Recursively checking the remaining list for the element.

% Defining a predicate to find the reverse of a list
reverse([], []).               % The reverse of an empty list is an empty list.
reverse([X|Tail], Rev) :- reverse(Tail, RevTail), concatenate(RevTail, [X], Rev).     % Reversing the tail and concatenating it with the head to get the reverse list.

% Defining a predicate to remove duplicates from a list
remove_duplicates([], []).     % Removing duplicates from empty list results in empty list.
remove_duplicates([X|Tail], List) :- member(X, Tail), remove_duplicates(Tail, List).   % If head is a member of tail, remove head and recursively check remaining list.
remove_duplicates([X|Tail], [X|List]) :- remove_duplicates(Tail, List).               % If head is not a member, add it to the resulting list and recursively check remaining list.