%%% This is a comment in PROLOG

%%% This is a predicate called "factorial" that calculates the factorial of a given number
factorial(0, 1). %Base case: factorial of 0 is 1
factorial(N, F) :-
    N > 0,      %Check if N is greater than 0
    N1 is N-1,  %Subtract 1 from N and assign to N1
    factorial(N1, F1), %Recursively call factorial with N1 and assign to F1
    F is N * F1.    %Calculate the factorial and assign to F

%%% This is a predicate called "fibonacci" that calculates the nth number in the fibonacci sequence
fibonacci(0, 0).    %Base case 1: fibonacci of 0 is 0
fibonacci(1, 1).    %Base case 2: fibonacci of 1 is 1
fibonacci(N, F) :-
    N > 1,      %Check if N is greater than 1
    N1 is N-1,  %Subtract 1 from N and assign to N1
    N2 is N-2,  %Subtract 2 from N and assign to N2
    fibonacci(N1, F1),  %Recursively call fibonacci with N1 and assign to F1
    fibonacci(N2, F2),  %Recursively call fibonacci with N2 and assign to F2
    F is F1 + F2.   %Calculate the sum of F1 and F2 and assign to F

%%% This is a predicate called "common_member" that checks if a given element is in a list
common_member(X, [X|_]).     %Base case: element is at the head of the list
common_member(X, [_|T]) :-   %Check if element is in the rest of the list
    common_member(X, T). %Recursively call common_member with the tail of the list

%%% This is a predicate called "append" that appends two lists
append([], L, L).   %Base case: append empty list to any list returns the same list
append([H|T], L, [H|Res]) :-    %Take the head of the first list and add it to the result
    append(T, L, Res).  %Recursively call append with the tail of the first list and the second list to get the result

%%% This is a predicate called "palindrome" that checks if a given list is a palindrome
palindrome([]).     %Base case: empty list is a palindrome
palindrome([_]).    %Base case: single element list is a palindrome
palindrome([H|T]) :-
    append(Left, [H], T),   %Split the list into left and right parts and check if H is the last element of the right part
    palindrome(Left).   %Recursively call palindrome with the left part to check if it is a palindrome