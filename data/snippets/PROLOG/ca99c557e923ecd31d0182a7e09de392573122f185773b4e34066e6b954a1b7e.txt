%% This is a PROLOG program that takes in a list of numbers and returns the sum and average
%% of the numbers in the list.
%% First, we define a predicate called 'sum' that takes in a list and recursively sums up
%% all the numbers in the list.
sum([], 0). % Base case: if the list is empty, the sum is 0.
sum([Head|Tail], Sum) :- % If the list is not empty, take the Head of the list.
    sum(Tail, TailSum), % Recursively call the sum predicate on the Tail of the list.
    Sum is Head + TailSum. % Add the Head to the total sum and assign it to Sum.
 
%% Next, we define a predicate called 'average' that takes in a list and calculates the
%% average by using the 'sum' predicate and the built-in 'length' predicate to get the
%% number of elements in the list.
average(List, Average) :-
    sum(List, Sum), % Call the sum predicate on the List.
    length(List, Length), % Get the length of the List using the 'length' predicate.
    Average is Sum / Length. % Calculate the average by dividing the Sum by the Length.
 
%% Finally, we test our program by passing in a list of numbers and printing the sum and
%% average using the 'write' predicate.
?- average([1, 2, 3, 4, 5], Average).
%% Output:
%% Average = 3
?- sum([1, 2, 3, 4, 5], Sum).
%% Output:
%% Sum = 15