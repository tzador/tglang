% Define a predicate to check if a list is a palindrome
palindrome(List) :-
	reverse_list(List, List). 

% Define a predicate to reverse a list
reverse_list([],[]). 
reverse_list([Head|Tail], RevList) :-
	reverse_list(Tail, RevTail), 
	concat_list(RevTail, [Head], RevList).

% Define a predicate to concatenate two lists
concat_list([], L, L).
concat_list([H|T], L, [H|Res]) :-
	concat_list(T, L, Res).

% Predicate to find the smallest element in a list
min_in_list([Min],Min).
min_in_list([Head | Rest], Min) :-
	min_in_list(Rest, RestMin),
	Head < RestMin,
	Min is Head.
min_in_list([_ | Rest], Min) :-
	min_in_list(Rest, Min).

% Predicate to sort a list in ascending order
sort(List, Sorted) :-
	min_in_list(List, Min),
	remove_from_list(Min, List, Rest),
	sort(Rest, SortedRest),
	concat_list([Min], SortedRest, Sorted).

% Predicate to remove an element from a list
remove_from_list(_, [], []).
remove_from_list(El, [El|Rest], Rest).
remove_from_list(El, [Head|Rest], [Head|Result]) :-
	remove_from_list(El, Rest, Result).

% Sample query
?- sort([5,2,8,3,1], Sorted).
% Output
Sorted = [1, 2, 3, 5, 8].