/* Define the rules for determining equal sets */
equal_set([], []). /* An empty list is equal to another empty list */
equal_set([H|T], L) :- /* An element of the first list is also present in the second list */
    member(H, L), /* Use Prolog's built-in member predicate to check if the element is in the list */
    subtract(T, [H], R), /* Remove the first occurrence of the element from the remaining list */
    equal_set(R, L). /* Recursively call the equal_set rule with the remaining list and the original list */

equal_set(L1, L2) :- /* The lists are equal if both are empty or if they are equal sets */
    L1 = [], /* If both lists are empty */
    L2 = []. /* If both lists are empty */

equal_set(L1, L2) :- /* The lists are equal if both are empty or if they are equal sets */
    length(L1, N1), /* Get the length of both lists */
    length(L2, N2),
    N1 =:= N2, /* The lengths must be equal for the lists to be equal */
    equal_set(L1, L2). /* Call equal_set rule to determine if the lists are equal sets */