% This is a Prolog code snippet that demonstrates the use of recursion and list manipulation.

% Defining the base case for the recursive predicate
remove_item(_, [], []).

% Defining the recursive predicate to remove all occurrences of an item from a list
remove_item(X, [X|T], Y):- 		% If the item is found at the beginning of the list, remove it and continue recursion on the rest of the list
    remove_item(X, T, Y).

remove_item(X, [H|T], [H|Y]):- 	% If the item is not found at the beginning of the list, keep the current element and continue recursion on the rest of the list
    X \= H,
    remove_item(X, T, Y). 		% Y stores the final list after all occurrences of X are removed

% Example use case
?- remove_item(2, [1,2,3,2,4,5,2], L). 	% This query will remove all occurrences of 2 from the list and store the result in L
L = [1,3,4,5]. 					% The output will show that all occurrences of 2 have been successfully removed.