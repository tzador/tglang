% Define a predicate for finding the maximum of two numbers
max(X,Y,Max) :- X > Y, Max is X. % If X is greater than Y, assign X to Max
max(X,Y,Max) :- X =< Y, Max is Y. % If X is less than or equal to Y, assign Y to Max

% Define a predicate to find the maximum of three numbers
max_three(X,Y,Z,Max) :- max(X,Y,Temp), max(Temp,Z,Max). % First find the maximum of X and Y, then compare with Z to get the final Max

% Define a predicate to check if a list is sorted in ascending order
is_sorted([]). % Base case: empty list is already sorted
is_sorted([X]). % Base case: single element list is already sorted
is_sorted([X,Y|Rest]) :- X =< Y, is_sorted([Y|Rest]). % Check if first element is less than or equal to second element, then recursively check the rest of the list

% Define a helper predicate for finding the sum of all elements in a list
sumlist([],0). % Base case: empty list has sum 0
sumlist([X|Rest],Sum) :- sumlist(Rest,Temp), Sum is X + Temp. % Get the sum of the rest of the list and add it to the first element

% Define a predicate to find the average of a list of numbers
avglist(List,Avg) :- sumlist(List,Sum), length(List,Len), Avg is Sum / Len. % Calculate the sum of all elements and divide by the length of the list

% Define a predicate to find the mode (most frequent element) of a list
mode(List,Mode) :- msort(List,Sorted), group_pairs_by_key(Sorted,CountList), max_member(_-Mode,CountList). % First sort the list, then group pairs with the same key (element) and count them, then find the pair with the highest count and assign its key to Mode