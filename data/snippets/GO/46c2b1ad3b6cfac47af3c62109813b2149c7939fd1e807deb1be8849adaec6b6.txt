// This function takes two integer inputs and returns the sum of their squares
func SumOfSquares(x, y int) int {
    return x*x + y*y
}

// A struct to represent a person
type Person struct {
    Name string
    Age int
}

// This function takes a person object as input and returns the details in a formatted string
func (p Person) GetDetails() string {
    return fmt.Sprintf("Name: %s, Age: %d", p.Name, p.Age)
}

// A goroutine that prints the numbers from 1 to 10
func Numbers() {
    for i := 1; i <= 10; i++ {
        fmt.Println(i)
    }
}

// A goroutine that prints the alphabet from A to Z
func Alphabets() {
    for i := 'A'; i <= 'Z'; i++ {
        fmt.Print(string(i))
    }
}

// Main function
func main() {
    // Call the SumOfSquares function
    fmt.Println(SumOfSquares(5, 7))

    // Create a new person object
    person := Person{
        Name: "John",
        Age: 25,
    }

    // Call the GetDetails function on the person object
    fmt.Println(person.GetDetails())

    // Run the Numbers and Alphabets goroutines concurrently
    go Numbers()
    go Alphabets()

    // Keep the main thread active to allow goroutines to finish execution
    fmt.Scanln()
}