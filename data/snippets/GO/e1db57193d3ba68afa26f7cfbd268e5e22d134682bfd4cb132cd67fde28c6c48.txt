// This is a function that takes in two strings and returns a boolean value
// indicating whether the two strings are anagrams or not
func isAnagram(str1, str2 string) bool {  
    // Convert the strings to lowercase
    lowerStr1 := strings.ToLower(str1)  
    lowerStr2 := strings.ToLower(str2)  
    
    // Initialize a map to store the characters and their counts in both strings
    charMap := make(map[rune]int) 
  
    // Loop through the characters in the first string 
    for _, char := range lowerStr1 { 
        // Increment the count of the character in the map 
        charMap[char]++
    } 

    // Loop through the characters in the second string 
    for _, char := range lowerStr2 {
        // Decrement the count of the character in the map 
        charMap[char]-- 
    }

    // Loop through the character counts in the map 
    for _, count := range charMap {
        // If the count is not 0, then the strings are not anagrams
        if count != 0 {
            return false
        }
    }
    // If the loop completes, then all characters had matching counts and the strings are anagrams.
    return true
}

// Call the function and print the result 
fmt.Println(isAnagram("listen", "silent")) // true