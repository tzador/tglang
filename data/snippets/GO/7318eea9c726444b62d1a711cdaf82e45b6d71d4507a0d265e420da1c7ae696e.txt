// declare a variable, assign it a value and print it
var x int = 2
fmt.Println(x)

// declare variables using shorthand and perform arithmetic operation
y, z := 4, 5
fmt.Println(y + z)

// declare a constant and use it in a conditional statement
const limit = 10
if y + z > limit {
    fmt.Println("Sum is greater than limit")
} else {
    fmt.Println("Sum is within limit")
}

// create a slice and iterate over it
numbers := []int{1, 2, 3, 4, 5}
for i := 0; i < len(numbers); i++ {
    fmt.Println(numbers[i])
}

// create a map and iterate over it
languages := map[string]string{"Python": "High-level", "Javascript": "Dynamic"}
for key, value := range languages {
    fmt.Println(key, value)
}

// create a struct and access its properties
type Person struct {
    Name string
    Age int
}
person := Person{Name: "John", Age: 25}
fmt.Println(person.Name)

// create a function that takes two integers as parameters and returns their sum
func add(x int, y int) int {
    return x + y
}

// call the function and print the result
result := add(3, 7)
fmt.Println(result)

// create an interface and implement it for a custom type
type Printable interface {
    print()
}
type CustomType string
func (c CustomType) print() {
    fmt.Println(c)
}

// create an instance of the custom type and call the interface method
var custom CustomType = "Hello there"
custom.print()

// use the "defer" keyword to defer the execution of code until the end of function
defer fmt.Println("End of function")