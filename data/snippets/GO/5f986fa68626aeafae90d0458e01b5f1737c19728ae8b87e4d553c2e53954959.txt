func quicksort(arr []int, low int, high int) {
	// base case
	if low >= high {
		return
	}

	// initialize pivot and partition index
	pivot := arr[high]
	partitionIndex := low

	// partitioning
	for i := low; i < high; i++ {
		// if current element is less than or equal to pivot
		if arr[i] <= pivot {
			// swap elements at partition index and current index
			arr[partitionIndex], arr[i] = arr[i], arr[partitionIndex]
			// increment partition index
			partitionIndex++
		}
	}

	// swap pivot with element at partition index
	arr[high], arr[partitionIndex] = arr[partitionIndex], arr[high]

	// recursive calls for left and right subarrays
	quicksort(arr, low, partitionIndex-1)
	quicksort(arr, partitionIndex+1, high)
}