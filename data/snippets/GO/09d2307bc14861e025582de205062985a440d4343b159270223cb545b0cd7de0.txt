// This block of code uses Go's concurrent features to compute the sum of two arrays in parallel
// without using libraries or packages
func parallelSum(arr1, arr2 []int) int {
	ch := make(chan int)
	sum := 0

	// goroutine to compute sum from first half of each array
	go func(arr1, arr2 []int) {
		for i := 0; i < len(arr1)/2; i++ {
			sum += arr1[i]
		}
		ch <- sum // send sum value to channel
	}(arr1, arr2)

	// goroutine to compute sum from second half of each array
	go func(arr1, arr2 []int) {
		for i := len(arr1) / 2; i < len(arr1); i++ {
			sum += arr2[i]
		}
		ch <- sum // send sum value to channel
	}(arr1, arr2)

	// receive sum values from channel and return the final sum
	return (<-ch + <-ch)
}

// Example usage
arr1 := []int{1, 2, 3, 4, 5}
arr2 := []int{6, 7, 8, 9, 10}
finalSum := parallelSum(arr1, arr2)
fmt.Println(finalSum) // Output: 55