package main

// Import necessary packages
import (
	"fmt" // package for formatted I/O
	"strings" // package for string manipulation
)

// Define a struct for a car
type Car struct {
	Brand string
	Model string
	Year int
	Features []string
}

// Define a function to create a new car
// Accepts brand, model, year, and variadic features
// Returns a pointer to a Car struct
func NewCar(brand string, model string, year int, features ...string) *Car {
	// Create a new car struct and set its fields
	car := &Car{
		Brand: brand,
		Model: model,
		Year: year,
		Features: features,
	}
	// Return the pointer to the new car
	return car
}

// Define a method for the Car struct to get its full name
// Accepts no parameters, returns a formatted string of the car's brand and model
func (c *Car) GetFullName() string {
	// Use the strings package to format the string and return it
	return strings.Title(fmt.Sprintf("%v %v", c.Brand, c.Model))
}

// Define a method for the Car struct to check if a specific feature is available
// Accepts the feature to check as a parameter, returns a boolean
func (c *Car) HasFeature(feature string) bool {
	// Loop through the car's features to check if the specified feature is present
	for _, f := range c.Features {
		// If the feature is found, return true
		if f == feature {
			return true
		}
	}
	// If the feature is not found, return false
	return false
}

// Main function
func main() {
	// Create a new car using the NewCar function and passing in the necessary parameters
	myCar := NewCar("Tesla", "Model S", 2021, "Autopilot", "Panoramic Roof", "All-Wheel Drive")

	// Use the GetFullName method to get the full name of the car and print it
	fmt.Println(myCar.GetFullName())

	// Check if the car has the "Autopilot" feature and print the result
	fmt.Println(myCar.HasFeature("Autopilot"))

	// Check if the car has the "Heated Seats" feature and print the result
	fmt.Println(myCar.HasFeature("Heated Seats"))
}