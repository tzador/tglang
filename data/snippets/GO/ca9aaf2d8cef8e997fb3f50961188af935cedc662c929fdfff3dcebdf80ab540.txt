package main // annotation: package declaration

import ( // annotation: import statement
	"fmt" // annotation: importing fmt package
	"math/rand" // annotation: importing math/rand package
	"time" // annotation: importing time package
)

func main() { // annotation: main function declaration
	const max = 100 // annotation: declaring a constant variable max

	rand.Seed(time.Now().UnixNano()) // annotation: setting the seed for random number generation

	for i := 0; i < max; i++ { // annotation: for loop to iterate over max
		randNum := rand.Intn(100) // annotation: generating a random number from 0-99
		if prime(randNum) { // annotation: checking if the random number is prime
			fmt.Println(randNum, "is a prime number") // annotation: printing the prime number
		} else {
			fmt.Println(randNum, "is not a prime number") // annotation: printing that the number is not prime
		}
	}
}

func prime(num int) bool { // annotation: function to check if a number is prime
	if num == 1 || num == 0 { // annotation: 1 and 0 are not prime numbers
		return false
	}
	for i := 2; i < num; i++ { // annotation: for loop to check for factors of num
		if num%i == 0 { // annotation: if any factor other than 1 and num exist, num is not prime
			return false
		}
	}
	return true // annotation: if no factors exist, num is prime
}