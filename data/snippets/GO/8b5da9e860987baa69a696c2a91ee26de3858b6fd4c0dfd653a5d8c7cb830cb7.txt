package main

import (
    "fmt"
    "time"
)

func main() {
    // Creating a channel to send and receive integers
    c := make(chan int)

    // Spawn a Goroutine to send values to the channel
    go func() {
        for i := 0; i <= 10; i++ {
            time.Sleep(time.Second)
            c <- i
        }
        // Closing the channel after sending all the values
        close(c)
    }()

    // Range over the channel to receive the values being sent
    for num := range c {
        fmt.Println(num)
    }

    // Creating a buffered channel with a capacity of 5
    buffChan := make(chan int, 5)

    // Spawning multiple Goroutines to send values to the buffered channel
    for i := 0; i < 5; i++ {
        go func(x int) {
            time.Sleep(time.Second)
            buffChan <- x
            fmt.Println("Sent value:", x)
        }(i)
    }

    // Range over the buffered channel to receive the values being sent
    for j := 0; j < 5; j++ {
        <-buffChan
        fmt.Println("Received value:", j)
    }

    // Creating a blocking channel
    blockingChan := make(chan string)

    // Spawning a Goroutine to send a value to the blocking channel
    go func() {
        time.Sleep(2 * time.Second)
        blockingChan <- "Hello World!"
    }()

    // Attempting to read from the blocking channel, this will block until a value is received.
    fmt.Println(<-blockingChan)
}