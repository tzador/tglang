// This code snippet uses goroutines in Go to perform concurrent operations on a slice of numbers within a given range
package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

func main() {

	// create a slice of numbers
	numbers := make([]int, 10)

	// populate the slice with random numbers
	for i := range numbers {
		numbers[i] = rand.Intn(100)
	}

	// print the slice before any operations
	fmt.Println("Original slice:", numbers)

	// create a waitgroup to ensure all goroutines have finished executing
	var wg sync.WaitGroup

	// loop through the slice
	for i, num := range numbers {

		// add 1 to the waitgroup for each goroutine
		wg.Add(1)

		// goroutine to square the numbers in the slice
		go func(i int, num int) {
			// sleep for a random amount of time (up to 1 second) to simulate a longer operation
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
			numbers[i] = num * num
			// indicate to the waitgroup that the goroutine has finished executing
			wg.Done()
		}(i, num)
	}

	// wait for all goroutines to finish executing before printing the updated slice
	wg.Wait()

	// print the updated slice
	fmt.Println("Updated slice:", numbers)
}