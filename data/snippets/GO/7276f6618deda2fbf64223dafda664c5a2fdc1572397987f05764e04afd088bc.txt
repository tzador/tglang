// First, we import the necessary packages
import (
    "fmt" // import for printing output
    "math/rand" // import for generating random numbers
    "time" // import for using the current time as a seed
)

// Define a function named "swap" that takes in two integer parameters, "x" and "y", and swaps their values
func swap(x, y int) (int, int) {
    return y, x
}

// Define a function named "quickSort" that takes in an integer slice parameter, "arr", and sorts it using a quick sort algorithm
func quickSort(arr []int) []int {
    if len(arr) < 2 {
        return arr
    }

    left, right := 0, len(arr)-1

    // Choose a random pivot element
    pivotIndex := rand.Int() % len(arr)

    // Move the pivot element to the right
    arr[pivotIndex], arr[right] = arr[right], arr[pivotIndex]

    // Pile elements smaller than the pivot on the left
    for i := range arr {
        if arr[i] < arr[right] {
            arr[i], arr[left] = arr[left], arr[i]
            left++
        }
    }

    // Place the pivot after the last smaller element
    arr[left], arr[right] = arr[right], arr[left]

    // Go down the rabbit hole on the left and right sides
    quickSort(arr[:left])
    quickSort(arr[left+1:])

    return arr
}

// Generate a slice of random integers
func generateRandomSlice(length, max int) []int {
    slice := make([]int, length)
    rand.Seed(time.Now().UnixNano())
    for i := 0; i < length; i++ {
        slice[i] = rand.Intn(max)
    }
    return slice
}

// Main function to execute the program
func main() {
    // Generate a random slice of 10 integers with a maximum value of 100
    arr := generateRandomSlice(10, 100)
    fmt.Println("Unsorted slice:", arr)

    // Sort the slice using the quickSort function
    sortedArr := quickSort(arr)
    fmt.Println("Sorted slice:", sortedArr)
}