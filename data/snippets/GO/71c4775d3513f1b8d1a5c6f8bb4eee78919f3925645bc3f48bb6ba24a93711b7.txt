package main

import (
    "fmt"
    "math"
)

type Rectangle struct { // Define a struct for a rectangle
    width float64
    height float64
}

func main() {
    var rectangle1 Rectangle // Create an instance of Rectangle struct

    rectangle1.width = 10.5 // Set the width of rectangle1
    rectangle1.height = 6.2 // Set the height of rectangle1

    rectangle2 := Rectangle{ // Create a second instance of Rectangle struct using short variable declaration syntax
        width: 8.0,
        height: 4.5,
    }

    // Calculate the area of rectangle1 using a method
    area1 := rectangle1.calculateArea()

    // Calculate the area of rectangle2 using a function
    area2 := calculateArea(rectangle2)

    // Print the areas
    fmt.Printf("Area of rectangle1: %.2f\n", area1) // Output: Area of rectangle1: 64.90
    fmt.Printf("Area of rectangle2: %.2f\n", area2) // Output: Area of rectangle2: 36.00
}

// Method to calculate the area of a rectangle
func (r Rectangle) calculateArea() float64 {
    return r.width * r.height
}

// Function to calculate the area of a rectangle
func calculateArea(r Rectangle) float64 {
    return r.width * r.height
}

// Example of a higher order function that squares a number
func square(x float64) float64 {
    return math.Pow(x, 2)
}

// Creating an anonymous function and storing it in a variable
var cube = func(x float64) float64 {
    return math.Pow(x, 3)
}

// Example of a closure that returns a function which calculates the area of a rectangle using a given formula
func getRectangleAreaFunc(formula string) func (Rectangle) float64 {
    return func(r Rectangle) float64 {
        switch formula { // Determine which formula to use based on the given string
        case "basic":
            return r.width * r.height
        case "pythagorean":
            // Calculate the hypotenuse using the Pythagorean theorem
            // Square the width and height, add them together, then take the square root
            return math.Sqrt(square(r.width) + square(r.height))
        default:
            return 0.0 // Return 0 if no formula is specified
        }
    }
}

// Create an instance of the getRectangleAreaFunc closure
basicArea := getRectangleAreaFunc("basic")

// Calculate the area of rectangle2 using the basic formula
basicArea2 := basicArea(rectangle2)
fmt.Printf("Area of rectangle2 using basic formula: %.2f\n", basicArea2) // Output: Area of rectangle2 using basic formula: 36.00

// Create an instance of the getRectangleAreaFunc closure using a different formula
pythagoreanArea := getRectangleAreaFunc("pythagorean")

// Calculate the area of rectangle2 using the pythagorean formula
pythagoreanArea2 := pythagoreanArea(rectangle2)
fmt.Printf("Area of rectangle2 using pythagorean formula: %.2f\n", pythagoreanArea2) // Output: Area of rectangle2 using pythagorean formula: 9.43

// Example of a defer statement that will execute after the surrounding function finishes
// Defer statements are executed in LIFO order
func printMessage(message string) {
    defer fmt.Println("Executing defer statement") // This deferred statement will print last
    fmt.Println(message) // This statement will print first
}

// Call the printMessage function
printMessage("This message will be printed first") // Output: This message will be printed first
// Output: Executing defer statement