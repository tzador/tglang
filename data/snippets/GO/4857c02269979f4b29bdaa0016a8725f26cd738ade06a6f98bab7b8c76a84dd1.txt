// This is a code snippet demonstrating a bubble sorting algorithm in GO

// Define a function bubbleSort that takes in a slice of integers
func bubbleSort(arr []int) {

	// Create a variable n to store the length of the slice
    n := len(arr)

    // Create a for loop to iterate through the slice
	for i := 0; i < n; i++ {

		// Create another for loop to compare adjacent elements and swap them if necessary
		for j := i + 1; j < n; j++ {

			// If the element at index j is greater than the element at index i, swap them
			if arr[j] > arr[i] {

				// Create a temporary variable temp and assign the value of element at index i
				temp := arr[i]

				// Assign the value of element at index j to element at index i
				arr[i] = arr[j]

				// Assign the value of temporary variable temp to element at index j
				arr[j] = temp
			}
		}
	}
}

// Create a slice of integers to be sorted
arr := []int{3, 8, 1, 6, 2, 5, 4, 7}

// Call the bubbleSort function passing in the slice arr
bubbleSort(arr)

// Print the sorted slice
fmt.Println(arr)

// Output: [1 2 3 4 5 6 7 8]