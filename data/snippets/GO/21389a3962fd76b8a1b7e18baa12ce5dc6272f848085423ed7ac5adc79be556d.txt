user = map[string]int {
    "John": 26,
    "Mary": 30,
    "Kate": 35,
} // This creates a map called 'user' with strings as keys and integers as values

delete(user, "Kate") // This deletes the key-value pair with the key "Kate" from the map 'user'

for key, value := range user { // This iterates through the key-value pairs in the map 'user'
    fmt.Println(key, "is", value, "years old") // This prints out the key and corresponding value in a user-friendly format
}

sortedKeys := make([]string, 0, len(user)) // This creates a slice named 'sortedKeys' with length 0 and capacity equal to the length of the map 'user'

for key := range user { // This iterates through the keys in the map 'user'
    sortedKeys = append(sortedKeys, key) // This adds each key to the 'sortedKeys' slice
}

sort.Strings(sortedKeys) // This uses the sort package to sort the keys alphabetically

for _, key := range sortedKeys { // This iterates through the sorted keys in the 'sortedKeys' slice
    fmt.Printf("%s is %d years old\n", key, user[key]) // This prints out the key and its corresponding value in a user-friendly format
    // Note: the _ symbol is used to ignore the index value of each element in the slice
}

fmt.Println("There are", len(user), "users in the map") // This prints out the length of the map 'user'

// Output:
/*
user = map[string]int {
    "John": 26,
    "Mary": 30,
    "Kate": 35,
}

delete(user, "Kate")

for key, value := range user {
    fmt.Println(key, "is", value, "years old")
}

sortedKeys := make([]string, 0, len(user))

for key := range user {
    sortedKeys = append(sortedKeys, key)
}

sort.Strings(sortedKeys)

for _, key := range sortedKeys {
    fmt.Printf("%s is %d years old\n", key, user[key])
}

fmt.Println("There are", len(user), "users in the map")
*/