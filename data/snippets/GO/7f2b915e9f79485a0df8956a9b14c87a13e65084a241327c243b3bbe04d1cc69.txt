// This code snippet is used for executing a bubble sort algorithm on a slice of integers
// Bubble sort works by repeatedly swapping adjacent elements if they are in wrong order
// It will continue to do this until the entire list is sorted
package main

import "fmt"

func bubbleSort(arr []int) {
    // define the length of the slice, we will use it multiple times
    n := len(arr)

    // loop through the entire slice
    for i := 0; i < n; i++ {
        // nested loop to compare adjacent elements and swap if necessary
        for j := 0; j < n-i-1; j++ {

            // compare the current element with the one next to it
            if arr[j] > arr[j+1] {
                // swap them using a temporary variable
                temp := arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
            }
        }
    }
}

// main function to test the bubble sort implementation
func main() {
    // define a slice of unsorted integers
    arr := []int{12, 7, 9, 4, 15, 18, 1, 3, 6, 10}

    // print the original unsorted slice
    fmt.Println("Unsorted slice:", arr)

    // call the bubbleSort function to sort the slice
    bubbleSort(arr)

    // print the sorted slice
    fmt.Println("Sorted slice:", arr)
}