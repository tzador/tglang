// Define a struct with 2 fields
type User struct {
    Name string
    Age int
}

// Create a slice of pointers to User structs
var users []*User
for i := 0; i < 5; i++ {
    // Create a new User
    user := User{
        Name: fmt.Sprintf("User %d", i+1),
        Age: i + 20,
    }
    // Add the User to the slice
    users = append(users, &user)
}

// Create a map of string keys and functions as values
var actions = map[string]func(){
    "Print Names": func() {
        for _, user := range users {
            fmt.Println(user.Name)
        }
    },
    "Print Oldest": func() {
        oldest := users[0]
        for _, user := range users {
            if user.Age > oldest.Age {
                oldest = user
            }
        }
        fmt.Printf("%s is the oldest user\n", oldest.Name)
    },
}

// Call the functions based on user input
func main() {
    // Prompt user for action
    fmt.Println("What action would you like to perform?")
    // Print available actions
    for action := range actions {
        fmt.Println(action)
    }
    // Receive input from user
    var input string
    fmt.Scanf("%s", &input)
    // Execute the desired function
    actions[input]()
}