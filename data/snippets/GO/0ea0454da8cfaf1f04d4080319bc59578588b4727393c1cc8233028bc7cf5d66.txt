// This code snippet implements a stack data structure in Golang
type Stack struct {
  Elements []int  // holds the elements of the stack
  Top int  // denotes the current top of the stack
}

// This method creates and returns a new empty stack
func NewStack() *Stack {
  return &Stack{
    Elements: make([]int, 0),
    Top: -1,
  }
}

// This method checks if the stack is empty and returns true if yes, otherwise returns false
func (s *Stack) IsEmpty() bool {
  if s.Top == -1 {
    return true
  }
  return false
}

// This method adds an element to the top of the stack
func (s *Stack) Push(el int) {
  s.Elements = append(s.Elements, el)
  s.Top += 1
}

// This method removes and returns the top element of the stack
func (s *Stack) Pop() int {
  if s.IsEmpty() {
    return -1
  }
  top := s.Elements[s.Top]
  s.Elements = s.Elements[:s.Top]
  s.Top -= 1
  return top
}

// Example usage of the Stack data structure
func main() {
  stack := NewStack()  // create a new empty stack
  stack.Push(5)  // add elements
  stack.Push(10)
  stack.Push(15)
  fmt.Println(stack.Pop())  // output: 15 (top element of the stack)
  fmt.Println(stack.IsEmpty())  // output: false (stack is not empty)
}