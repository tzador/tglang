// This function calculates the sum of two numbers
func calculateSum(a int, b int) int {
    return a + b 
}

// This function calculates the factorial of a number 
func calculateFactorial(num int) int {
    if num == 0 {
        return 1 
    } else {
        return num * calculateFactorial(num - 1)
    }
}

// This function sorts an array of integers using bubble sort algorithm 
func bubbleSort(nums []int) {
    for i := range nums {
        for j := 0; j < len(nums)-i-1; j++ {
            if nums[j] > nums[j+1] {
                nums[j], nums[j+1] = nums[j+1], nums[j]
            }
        }
    }
}

// This function creates a struct of a person with name and age fields 
type Person struct {
    Name string 
    Age int 
}

// This function calculates the average of a slice of floats 
func calculateAvg(nums []float64) float64 {
    sum := 0.0
    for _, num := range nums {
        sum += num 
    }
    return sum / float64(len(nums))
}

// This function checks if a string is a palindrome 
func isPalindrome(str string) bool {
    for i := 0; i < len(str) / 2; i++ {
        if str[i] != str[len(str) - i - 1] {
            return false 
        }
    }
    return true 
}

// This function converts a string to uppercase 
func toUpper(str string) string {
    upper := []byte(str)
    for i, char := range upper {
        if char >= 97 && char <= 122 {
            upper[i] = char - 32
        }
    }
    return string(upper)
}

// This function implements Euclid's algorithm to find the GCD of two numbers 
func findGCD(a int, b int) int {
    for b != 0 {
        temp := b
        b = a % b
        a = temp 
    }
    return a 
}

// This function checks if a number is prime 
func isPrime(num int) bool {
    if num <= 1 {
        return false 
    }
    for i := 2; i < num; i++ {
        if num % i == 0 {
            return false 
        }
    }
    return true 
}