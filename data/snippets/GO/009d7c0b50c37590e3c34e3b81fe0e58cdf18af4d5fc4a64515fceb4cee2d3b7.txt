// Initialize a variable with a complex type declaration
var myMap map[string]int

// Add key-value pairs to the map
myMap["key1"] = 1
myMap["key2"] = 2
myMap["key3"] = 3

// Create a struct with multiple fields
type student struct {
  name string
  age int
  major string
}

// Create an empty slice with a specified type
var studentList []student

// Add a new student to the slice
studentList = append(studentList, student{
  name: "John",
  age: 20,
  major: "Computer Science",
})

// Create a function that takes in a map and returns a slice of values
func mapToSlice(m map[string]int) []int {
  var result []int
  // Use a for loop to iterate through the map's keys and values
  for key, value := range m {
    // Append the current value to the result slice
    result = append(result, value)
  }
  // Return the result slice
  return result
}

// Call the function and assign the return value to a variable
var values = mapToSlice(myMap)

// Create a channel that can receive and send integers
var myChannel chan int

// Initialize the channel with a buffer size of 5
myChannel = make(chan int, 5)

// Create a goroutine that sends values to the channel
go func() {
  // Use a for loop to send integers from 1 to 10 to the channel
  for i := 1; i <= 10; i++ {
    myChannel <- i
  }
}()

// Create a variable and assign a slice with values from the channel
var channelSlice []int
channelSlice = make([]int, 0, 10)

// Use a for loop to receive values from the channel and append them to the slice
for i := 0; i < 10; i++ {
  channelSlice = append(channelSlice, <- myChannel)
}

// Print the contents of the slice
fmt.Println(channelSlice)