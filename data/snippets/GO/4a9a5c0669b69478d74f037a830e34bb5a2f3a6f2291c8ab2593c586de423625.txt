package main

import (
	"fmt"
	"math/rand"
	"time"
)

func main() {

	report := make(map[string]*Report)
	report["daily"] = &Report{
		Name: "Daily Report",
		Data: []int{40, 32, 46, 56, 75, 64, 80},
	}

	report["weekly"] = &Report{
		Name: "Weekly Report",
		Data: []int{240, 200, 350, 275, 360, 280, 350},
	}

	report["monthly"] = &Report{
		Name: "Monthly Report",
		Data: []int{1200, 1400, 1550, 1300, 1850, 1700, 2000},
	}

	fmt.Println("Generating Reports...\n")

	for i := 0; i < 3; i++ {
		go func(index int) {
			key := []string{"daily", "weekly", "monthly"}
			rand.Seed(time.Now().UnixNano())
			// Randomly select a report
			r := report[key[rand.Intn(len(key))]]

			fmt.Println("Calculating ", r.Name, "for worker", index+1)

			// Simulate long processing time
			time.Sleep(time.Duration(rand.Intn(10)) * time.Second)

			// Calculate total and average of data in the report
			total := 0
			for _, val := range r.Data {
				total += val
			}
			avg := total / len(r.Data)

			// Update report with totals and averages
			r.Total = total
			r.Avg = avg

			fmt.Println("Worker", index+1, "finished calculating", r.Name)
		}(i)
	}

	// Wait for all three reports to finish processing
	time.Sleep(time.Second * 11)

	// Print final reports
	for _, r := range report {
		fmt.Printf("- %s: Total = %d, Average = %d\n", r.Name, r.Total, r.Avg)
	}
}

// Report represents a report with a name, data, total, and average
type Report struct {
	Name  string
	Data  []int
	Total int
	Avg   int
}