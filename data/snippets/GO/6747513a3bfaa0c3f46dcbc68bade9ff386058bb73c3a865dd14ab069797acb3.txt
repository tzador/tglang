// A function that uses goroutines to calculate the Fibonacci sequence
// and returns a slice of the calculated numbers.

// `fib` function to calculate the Fibonacci sequence using recursion
func fib(n int) int {
    if n <= 1 {
        return n
    }
    return fib(n-1) + fib(n-2)
}

// `calcFib` function to use goroutines and call the `fib` function to calculate the Fibonacci sequence
func calcFib(n int) []int {
    // creating slice to store calculated numbers
    fibSlice := make([]int, n)

    // goroutine to call `fib` function and store result in slice
    go func() {
        for i := 0; i < n; i++ {
            fibSlice[i] = fib(i)
        }
    }()

    // waiting for goroutine to finish before returning the slice
    time.Sleep(time.Second)

    // return the calculated fibonacci numbers in a slice
    return fibSlice
}

func main() {
    // calling the `calcFib` function to calculate the Fibonacci sequence and store the result in a slice
    result := calcFib(10)

    // printing the result
    fmt.Println("Fibonacci sequence:", result)
}