// Create a function to perform QuickSort
func QuickSort(arr []int, start, end int) {
	if start >= end {
		return
	}

	// Choose last element as pivot
	pivot := arr[end]

	// Initialize partition index
	partitionIndex := start

	// Iterate through the array
	for i := start; i < end; i++ {
		// If current element is smaller than pivot,
		// swap it with the element at partition index
		if arr[i] < pivot {
			arr[i], arr[partitionIndex] = arr[partitionIndex], arr[i]
			partitionIndex++
		}
	}

	// Swap pivot element with element at partition index
	arr[end], arr[partitionIndex] = arr[partitionIndex], arr[end]

	// Recursively call QuickSort on left and right subarrays
	QuickSort(arr, start, partitionIndex-1)
	QuickSort(arr, partitionIndex+1, end)
}