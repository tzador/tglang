// This function performs a simple merge sort algorithm
// Input: an array of integers
// Output: the array sorted in ascending order
func MergeSort(arr []int) []int {
    if len(arr) < 2 {
        return arr
    }

    middle := len(arr) / 2
    // recursively call MergeSort on left and right subarrays
    left := MergeSort(arr[:middle])
    right := MergeSort(arr[middle:])

    result := make([]int, len(arr))
    // loop through the left and right arrays and merge them in sorted order
    i := 0
    for len(left) > 0 && len(right) > 0 {
        if left[0] <= right[0] {
            result[i] = left[0]
            left = left[1:]
        } else {
            result[i] = right[0]
            right = right[1:]
        }
        i++
    }
    // add any remaining elements from left or right array to the result
    for j := 0; j < len(left); j++ {
        result[i] = left[j]
        i++
    }
    for j := 0; j < len(right); j++ {
        result[i] = right[j]
        i++
    }
    // return the sorted array
    return result
}

// Example usage
arr := []int{4, 8, 2, 6, 1, 9, 7, 3}
fmt.Println(MergeSort(arr))
// Output: [1 2 3 4 6 7 8 9]