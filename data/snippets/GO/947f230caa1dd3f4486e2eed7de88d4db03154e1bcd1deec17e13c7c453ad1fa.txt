package main

import (
	"fmt"
	"sync"
)

// Define a function `count` that takes in a `chan int` and a `wg` sync.WaitGroup pointer
func count(channel chan int, wg *sync.WaitGroup) {
	defer wg.Done()   // decrease the waitgroup counter by 1 when the function finishes
	for i := 10; i >= 0; i-- {
		channel <- i  // send the current value of `i` to the channel
		fmt.Println("Counting:", i)  // print the current value of `i`
	}
	close(channel) // close the channel to indicate that no more values will be sent
}

// Define a function `print` that takes in a `chan int` and a `wg` sync.WaitGroup pointer
func print(channel chan int, wg *sync.WaitGroup) {
	defer wg.Done()   // decrease the waitgroup counter by 1 when the function finishes
	for num := range channel {  // read the next value from the channel
		fmt.Println("Printed:", num)  // print the value read from the channel
	}
}

// Define the main function
func main() {
	channel := make(chan int)  // create a channel of integers
	var wg sync.WaitGroup  // create a waitgroup
	wg.Add(2)  // set the waitgroup counter to 2

	go count(channel, &wg)  // start the count function as a goroutine with the channel and waitgroup pointer as arguments
	go print(channel, &wg)  // start the print function as a goroutine with the channel and waitgroup pointer as arguments

	wg.Wait()  // wait for the waitgroup to finish before exiting the program
}