package main

  import (
    "fmt"
    "sync"
  )

  type collection struct {
    numbers []int
    mu      sync.Mutex
  }

  func (c *collection) add(number int) {
    c.mu.Lock()
    defer c.mu.Unlock()
    c.numbers = append(c.numbers, number)
  }

  func main() {
    c := &collection{}
    for i := 0; i < 10; i++ {
      go func(n int) { // creating a goroutine
        c.add(n)
      }(i)
    }

    // wait for all goroutines to finish
    wg := sync.WaitGroup{}
    wg.Add(10)
    wg.Wait()

    fmt.Println(c.numbers)
  }