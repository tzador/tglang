// This is a complex implementation of the binary search algorithm
// It takes in a sorted array and uses divide and conquer to find the target value
func binarySearch(arr []int, target int) int {
    // Initialize low and high pointers
    low := 0
    high := len(arr) - 1
    // Loop until low is less than or equal to high
    for low <= high {
        // Get the mid point of the array
        mid := (low + high) / 2
        // Check if the mid point value is equal to the target
        if arr[mid] == target {
            // Return the index of the target value
            return mid
        } else if arr[mid] < target {
            // If target is greater than mid point, move low pointer to mid+1
            low = mid + 1
        } else {
            // If target is less than mid point, move high pointer to mid-1
            high = mid - 1
        }
    }
    // If target value is not found, return -1
    return -1
}

// Test example
arr := []int{1, 3, 5, 7, 9, 11}
target := 5
result := binarySearch(arr, target)
fmt.Println(result) // Output: 2