/*
   This code snippet shows the implementation of a binary search tree in Golang.

   A Binary Search Tree is a type of data structure that allows for efficient searching,
   insertion and deletion operations. It is composed of nodes with a root node at the top
   and two child nodes below - a left child and a right child. The left child's value is always
   less than the root's value, while the right child's value is always greater than the root's value.

   This code snippet includes functions for creating a new binary search tree, inserting nodes,
   searching for a particular node, and deleting a node. It also includes helper functions for
   traversing the tree in order, pre-order, and post-order.

   References:
   - Binary Search Trees: https://en.wikipedia.org/wiki/Binary_search_tree
   - Go Documentation: https://golang.org/doc/
*/

// Node represents a single node in the binary search tree
type Node struct {
   value int   // Value of the node
   left  *Node // Pointer to the left child of the node
   right *Node // Pointer to the right child of the node
}

// Tree represents the entire binary search tree
type Tree struct {
   root *Node // Pointer to the root node of the tree
}

// Helper function for inserting a new node into the tree
func insertUtil(root *Node, key int) *Node {
   // If the root is empty, create a new node with the given key
   if root == nil {
      return &Node{value: key}
   }

   // If the key is less than the value of the root node, insert it into the left subtree
   if key < root.value {
      root.left = insertUtil(root.left, key)
   // If the key is greater than the value of the root node, insert it into the right subtree
   } else {
      root.right = insertUtil(root.right, key)
   }

   return root
}

// Function for inserting a new node into the tree
func (tree *Tree) Insert(key int) {
   // Call the helper function with the root node and the key
   tree.root = insertUtil(tree.root, key)
}

// Helper function for searching for a node in the tree
func searchUtil(root *Node, key int) bool {
   // If the root is empty, return false (the node is not found)
   if root == nil {
      return false
   }

   // If the key is equal to the value of the root node, return true (the node is found)
   if key == root.value {
      return true
   // If the key is less than the value of the root node, search in the left subtree
   } else if key < root.value {
      return searchUtil(root.left, key)
   // If the key is greater than the value of the root node, search in the right subtree
   } else {
      return searchUtil(root.right, key)
   }
}

// Function for searching for a node in the tree
func (tree *Tree) Search(key int) bool {
   // Call the helper function with the root node and the key
   return searchUtil(tree.root, key)
}

// Helper function for deleting a node from the tree
func deleteUtil(root *Node, key int) *Node {
   // If the root is empty, do nothing
   if root == nil {
      return nil
   }

   // If the key is less than the value of the root node, delete it from the left subtree
   if key < root.value {
      root.left = deleteUtil(root.left, key)
   // If the key is greater than the value of the root node, delete it from the right subtree
   } else if key > root.value {
      root.right = deleteUtil(root.right, key)
   // If the key is equal to the value of the root node, delete the root node
   } else {
      // If the root node has only one child or no children
      if root.left == nil {
         temp := root.right
         root = nil
         return temp
      } else if root.right == nil {
         temp := root.left
         root = nil
         return temp
      }

      // If the root node has two children, find the successor (smallest node in the right subtree)
      temp := minValue(root.right)

      // Replace the value of the root node with the value of the successor
      root.value = temp.value

      // Delete the successor node from the right subtree
      root.right = deleteUtil(root.right, temp.value)
   }

   return root
}

// Helper function for finding the minimum value in a subtree
func minValue(root *Node) *Node {
   // If the left child is nil, return the current node
   if root.left == nil {
      return root
   }

   // Otherwise, continue traversing to the left subtree
   return minValue(root.left)
}

// Function for deleting a node from the tree
func (tree *Tree) Delete(key int) bool {
   // Check if the node to be deleted exists in the tree
   if tree.Search(key) {
      // Call the helper function with the root node and the key
      tree.root = deleteUtil(tree.root, key)
      return true
   }

   return false
}

// Helper function for traversing the tree in order
func inorderUtil(root *Node) {
   // If the root is empty, do nothing
   if root == nil {
      return
   }

   // Traverse the left subtree
   inorderUtil(root.left)

   // Print the value of the root node
   fmt.Printf("%d ", root.value)

   // Traverse the right subtree
   inorderUtil(root.right)
}

// Function for traversing the tree in order
func (tree *Tree) TraverseInorder() {
   // Call the helper function with the root node
   inorderUtil(tree.root)
}

// Helper function for traversing the tree in pre-order
func preorderUtil(root *Node) {
   // If the root is empty, do nothing
   if root == nil {
      return
   }

   // Print the value of the root node
   fmt.Printf("%d ", root.value)

   // Traverse the left subtree
   preorderUtil(root.left)

   // Traverse the right subtree
   preorderUtil(root.right)
}

// Function for traversing the tree in pre-order
func (tree *Tree) TraversePreorder() {
   // Call the helper function with the root node
   preorderUtil(tree.root)
}

// Helper function for traversing the tree in post-order
func postorderUtil(root *Node) {
   // If the root is empty, do nothing
   if root == nil {
      return
   }

   // Traverse the left subtree
   postorderUtil(root.left)

   // Traverse the right subtree
   postorderUtil(root.right)

   // Print the value of the root node
   fmt.Printf("%d ", root.value)
}

// Function for traversing the tree in post-order
func (tree *Tree) TraversePostorder() {
   // Call the helper function with the root node
   postorderUtil(tree.root)
}

// Main function for testing the binary search tree
func main() {
   // Create a new binary search tree
   tree := Tree{}

   // Insert nodes into the tree
   tree.Insert(5)
   tree.Insert(3)
   tree.Insert(7)
   tree.Insert(1)
   tree.Insert(4)
   tree.Insert(6)
   tree.Insert(9)

   // Print the tree in order
   fmt.Println("Inorder traversal:")
   tree.TraverseInorder()

   // Print the tree in pre-order
   fmt.Println("\nPreorder traversal:")
   tree.TraversePreorder()

   // Print the tree in post-order
   fmt.Println("\nPostorder traversal:")
   tree.TraversePostorder()

   // Search for node with key 4
   if tree.Search(4) {
      // If found, delete the node
      tree.Delete(4)
   } else {
      fmt.Println("\nNode not found.")
   }

   // Print the updated tree
   fmt.Println("\nInorder traversal after deleting node with key 4:")
   tree.TraverseInorder()

   // Search for node with key 8
   if tree.Search(8) {
      // If found, delete the node
      tree.Delete(8)
   } else {
      fmt.Println("\nNode not found.")
   }

   // Print the updated tree
   fmt.Println("\nInorder traversal after deleting node with key 8:")
   tree.TraverseInorder()
}