// This code snippet performs a bubble sort on an array of integers.
// Bubble sort is a simple sorting algorithm that repeatedly swaps adjacent elements if they are in the wrong order.
// The overall time complexity of bubble sort is O(n^2).

// Function to perform the bubble sort
func bubbleSort(arr []int) {
	// Loop through the array
	for i := 0; i < len(arr); i++ {
		// Loop through the unsorted part of the array
		for j := 0; j < len(arr)-i-1; j++ {
			// Check if the current element is larger than the next element
			if arr[j] > arr[j+1] {
				// Swap the elements
				temp := arr[j]
				arr[j] = arr[j+1]
				arr[j+1] = temp
			}
		}
	}
}

// Initialize an array of integers to sort
arr := []int{9, 2, 7, 1, 3, 8, 5, 4, 6}

// Call the bubble sort function
bubbleSort(arr)

// Print the sorted array
fmt.Println(arr) // Output: [1 2 3 4 5 6 7 8 9]