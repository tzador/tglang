// This is a complex code snippet in GO language, demonstrating the use of interfaces and goroutines
package main

import (
    "fmt"
    "time"
)

type Shape interface {
    Area() float64
    Perimeter() float64
    Type() string
}

type Circle struct {
    radius float64
}

func (c Circle) Area() float64 {
    return 3.14 * c.radius * c.radius
}

func (c Circle) Perimeter() float64 {
    return 2 * 3.14 * c.radius
}

func (c Circle) Type() string {
    return "Circle"
}

type Rectangle struct {
    length float64
    breadth float64
}

func (r Rectangle) Area() float64 {
    return r.length * r.breadth
}

func (r Rectangle) Perimeter() float64 {
    return 2 * (r.length + r.breadth)
}

func (r Rectangle) Type() string {
    return "Rectangle"
}

func calculate(shape Shape) {
    fmt.Printf("The area of %s is %.2f and the perimeter is %.2f \n", shape.Type(), shape.Area(), shape.Perimeter())
}

func main() {
    circle := Circle{radius: 5}
    rectangle := Rectangle{length: 4, breadth: 6}

    go calculate(circle) // using a goroutine to concurrently calculate the area and perimeter of the circle
    go calculate(rectangle) // using a goroutine to concurrently calculate the area and perimeter of the rectangle
    time.Sleep(time.Second) // sleeping for a second to allow the goroutines to complete

    // Output:
    // The area of Circle is 78.50 and the perimeter is 31.40
    // The area of Rectangle is 24.00 and the perimeter is 20.00
}