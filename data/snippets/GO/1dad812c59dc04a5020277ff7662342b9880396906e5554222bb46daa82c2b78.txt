package main

import (
    "fmt"
    "math"
)

// This function takes in an integer and returns the total number of prime numbers within that range.
func countPrimes(n int) int {
    // initialize a boolean slice to store the prime numbers
    isPrime := make([]bool, n)
    // loop through and set all values to true
    for i := 0; i < n; i++ {
        isPrime[i] = true
    }
    // set first two values to false since 0 and 1 are not prime numbers
    isPrime[0] = false
    isPrime[1] = false
    // loop through and perform the Sieve of Eratosthenes algorithm
    for i := 2; float64(i) <= math.Sqrt(float64(n)); i++ {
        // if value is true, it is a prime number
        if isPrime[i] == true {
            // set all multiples of the prime number to false
            for j := i * i; j < n; j += i {
                isPrime[j] = false
            }
        }
    }
    // count the number of true values, which are prime numbers
    count := 0
    for i := 0; i < n; i++ {
        if isPrime[i] == true {
            count++
        }
    }
    // return the count
    return count
}

// main function to test the countPrimes function
func main() {
    // call the function and print the output
    n := 20
    fmt.Println("Total number of prime numbers within the range of", n, "is", countPrimes(n))
}