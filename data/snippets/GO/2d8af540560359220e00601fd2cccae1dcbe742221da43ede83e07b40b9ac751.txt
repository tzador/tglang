// This code checks for prime numbers using the Sieve of Eratosthenes algorithm
func SieveOfEratosthenes(max int) []int {
    // Initialize an array of booleans of length max+1 to track which numbers are marked as prime (true)
    marked := make([]bool, max+1)
    
    // Set all elements in marked to true
    for i := 2; i <= max; i++ {
        marked[i] = true
    }
    
    // The Sieve of Eratosthenes algorithm
    for i := 2; i*i <= max; i++ {
        // If marked[i] is true, then i is a prime number and we need to mark its multiples as false
        if marked[i] {
            // Starting at i*i, mark all multiples as false
            for j := i * i; j <= max; j += i {
                marked[j] = false
            }
        }
    }
    
    // Create an array of prime numbers and append each marked number to it
    primes := make([]int, 0)
    for i := 2; i <= max; i++ {
        if marked[i] {
            primes = append(primes, i)
        }
    }
    
    // Return the array of prime numbers
    return primes
}

// Example usage
func main() {
    // Find all prime numbers less than or equal to 100
    primes := SieveOfEratosthenes(100)
    // Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
    fmt.Println(primes)
}