/* This code snippet implements a quicksort algorithm.

// Quicksort is a popular sorting algorithm that uses a divide and conquer approach.
// The algorithm works by selecting a pivot element and partitioning the input elements into two sublists, one with elements less than or equal to the pivot and one with elements greater than the pivot.
// This process is repeated until the entire list is sorted.

func quicksort(arr []int, low int, high int) {
    // Check for base case
    if low < high {
        // Select pivot element
        pivot := arr[high]

        // Initialize left and right pointers
        left := low
        right := high-1

        // Loop until pointers meet
        for left <= right {
            // Move left pointer until an element greater than pivot is found
            for left <= right && arr[left] <= pivot {
                left++
            }
            // Move right pointer until an element less than pivot is found
            for right >= left && arr[right] > pivot {
                right--
            }
            // If pointers are still not meeting, swap the elements at their respective positions
            if left <= right {
                arr[left], arr[right] = arr[right], arr[left]
            }
        }
        // Swap pivot element with left pointer element to put pivot in correct position
        arr[left], arr[high] = arr[high], arr[left]
        // Recursively call quicksort on the two sublists
        quicksort(arr, low, left-1)
        quicksort(arr, left+1, high)
    }
}

// Example usage
arr := []int{5, 2, 8, 3, 9, 1}
quicksort(arr, 0, len(arr)-1)
fmt.Println(arr) // Output: [1, 2, 3, 5, 8, 9]