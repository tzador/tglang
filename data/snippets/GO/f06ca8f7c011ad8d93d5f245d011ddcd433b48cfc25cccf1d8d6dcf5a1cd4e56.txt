// This code snippet uses Go's goroutines and channels to concurrently compute the sum of two arrays of different sizes, and prints the result
package main

import (
	"fmt"
	"sync"
)

func main() {
	// initialize two arrays
	arr1 := []int{1, 2, 3, 4, 5}
	arr2 := []int{6, 7, 8, 9, 10, 11, 12}

	// create a channel to store the result
	result := make(chan int)

	// use a waitgroup to wait for all goroutines to finish
	var wg sync.WaitGroup

	// start a goroutine for calculating the sum of arr1
	wg.Add(1)
	go func() {
		defer wg.Done()
		// declare a variable to store sum
		sum := 0
		for _, num := range arr1 {
			sum += num
		}
		// send the sum to the channel
		result <- sum
	}()

	// start a goroutine for calculating the sum of arr2
	wg.Add(1)
	go func() {
		defer wg.Done()
		// declare a variable to store sum
		sum := 0
		for _, num := range arr2 {
			sum += num
		}
		// send the sum to the channel
		result <- sum
	}()

	// wait for all goroutines to finish
	wg.Wait()

	// close the channel
	close(result)

	// get the sums from the channel and print the result
	sum1 := <-result
	sum2 := <-result
	fmt.Println("Sum of arr1:", sum1)
	fmt.Println("Sum of arr2:", sum2)

	// add both sums together and print the final result
	totalSum := sum1 + sum2
	fmt.Println("Total sum:", totalSum)
}