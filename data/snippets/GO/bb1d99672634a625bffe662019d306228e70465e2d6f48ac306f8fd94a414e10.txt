package main                              // refers to the main package
import (                                 //  declares packages used
	"fmt"                                 // module for formatted I/O
	"math"                                // module for basic math functions
	"time"                                // module for time related functions
)

func main() {                             // main function, entry point of program
	
	// declaring and initializing variables
	var x int = 20                         // variable with explicit type declaration
	y := 15                                // variable with implicit type declaration and initialization
	const pi = 3.14                        // constant variable with value 3.14 and inferred type float64
    
    // for loop that runs 5 times
    for i := 0; i < 5; i++ {               // i++ increments i by 1 with each iteration
        fmt.Println("Iteration:", i+1)     // prints the current iteration number
    }
    
    // if-else statement to check if x is greater than y
    if x > y {                             // if condition evaluates to true
        fmt.Println("x is greater than y") // prints this statement
    } else {                               // if condition evaluates to false
        fmt.Println("y is greater than x") // prints this statement
    }
    
    // switch statement to check the value of y
    switch y {                             // evaluates the value of y
        case 10:                           // if y == 10
            fmt.Println("y is equal to 10")
        case 15:                           // if y == 15
            fmt.Println("y is equal to 15")
        default:                           // if y is not equal to any of the cases above
            fmt.Println("y is not equal to 10 or 15")
    }
    
    // function with two parameters and return type
    func add(x int, y int) int {           // function name is add, takes two integers and returns an integer
        return x + y                       // returns the sum of the two numbers
    }
    
    result := add(x, y)                    // calls the add function with the given parameters and stores the result
    
    // anonymous function
    func() {                               // anonymous function with no parameters
        fmt.Println("Result:", result)     // prints the result of the add function
    }()
    
    // array declaration and initialization
    arr := [5]int{1, 2, 3, 4, 5}           // declares an array of size 5 with initial values
    
    // for-each loop to iterate through the array
    for index, value := range arr {        // iterates through each element in the array
        fmt.Printf("Index: %d, Value: %d\n", index, value) // prints the index and corresponding value
    }
    
    // declaring a struct
    type Person struct {                   // a Person structure with two fields
        Name string                        // Name field of type string
        Age int                            // Age field of type int
    }
    
    // creating a new instance of Person struct
    person := Person{                      // struct literal to initialize the fields
        Name: "John",                      // specifying the value for Name field
        Age: 25                            // specifying the value for Age field
    }
    
    fmt.Printf("Name: %s, Age: %d\n", person.Name, person.Age) // prints the values of the struct fields
}