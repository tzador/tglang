package main

import (
    "fmt"
    "math/rand"
    "time"
)

// GenerateRandomArray creates a random array of specified length
// Params:
//  - length: the length of the array to be generated
// Returns:
//  - arr: the generated array
func GenerateRandomArray(length int) []int {
    arr := make([]int, length) // use the make function to create an array of specified length
    rand.Seed(time.Now().UnixNano()) // set the seed for generating random numbers
    for i := 0; i < length; i++ {
        arr[i] = rand.Intn(length + 1) // generate a random number between 0 and the length of the array
    }
    return arr
}

// SortArray sorts an array in ascending order using bubble sort algorithm
// Params:
//  - arr: the unsorted array to be sorted
// Returns:
//  - sortedArr: the sorted array
func SortArray(arr []int) []int {
    sortedArr := make([]int, len(arr)) // create a new array to store the sorted values
    copy(sortedArr, arr) // use the copy function to copy the values from the unsorted array to the new array
    for i := 0; i < len(sortedArr); i++ {
        for j := 0; j < len(sortedArr)-i-1; j++ {
            if sortedArr[j] > sortedArr[j+1] { // check if the current element is greater than the next element
                sortedArr[j], sortedArr[j+1] = sortedArr[j+1], sortedArr[j] // if yes, swap the elements
            }
        }
    }
    return sortedArr
}

func main() {
    // generate a random array of length 10
    arr := GenerateRandomArray(10)
    // sort the array
    sortedArr := SortArray(arr)
    // print the sorted array
    fmt.Println(sortedArr)
}