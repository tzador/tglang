// Sort function that implements quicksort algorithm
func QuickSort(arr []int, left, right int) {
	if left < right {
		pivot := partition(arr, left, right) // calling partition function to get pivot index
		QuickSort(arr, left, pivot-1)        // recursive call for the left side of pivot
		QuickSort(arr, pivot+1, right)       // recursive call for the right side of pivot
	}
}

// Function to partition the array and return the pivot index
func partition(arr []int, left, right int) int {
	pivot := arr[right] // choosing last element as pivot
	i := left - 1       // index of smaller element

	// iterating through the subarray
	for j := left; j < right; j++ {
		// if current element is smaller than pivot, swap it with element at smaller index
		if arr[j] < pivot {
			i++
			arr[i], arr[j] = arr[j], arr[i]
		}
	}

	// swap pivot with element at smaller index + 1
	arr[i+1], arr[right] = arr[right], arr[i+1]
	return i + 1
}

// Example of calling the QuickSort function
func main() {
	// unsorted array
	numbers := []int{9, 5, 1, 3, 8, 4, 7, 6, 2, 0}

	// sorting the array using QuickSort function
	QuickSort(numbers, 0, len(numbers)-1)

	// printing the sorted array
	fmt.Println(numbers) // output: [0 1 2 3 4 5 6 7 8 9]
}