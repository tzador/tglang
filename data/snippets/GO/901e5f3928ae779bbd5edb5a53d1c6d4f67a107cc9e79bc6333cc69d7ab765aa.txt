import (
  "fmt"
  "math/rand"
  "time"
)

// Structures to represent a deck of cards and a player's hand
type Card struct {
  Suit string
  Value string
}

type Deck struct {
  Cards []*Card
}

type Hand struct {
  Cards []*Card
}

// Function to create and shuffle a deck of cards
func createDeck() *Deck {
  suits := []string{"Clubs", "Diamonds", "Hearts", "Spades"}
  values := []string{"Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King"}

  deck := &Deck{}

  // Loop through the suits and values to create each card and add it to the deck
  for _, suit := range suits {
    for _, value := range values {
      card := &Card{Suit: suit, Value: value}
      deck.Cards = append(deck.Cards, card)
    }
  }

  // Shuffle the deck using the Fisher-Yates algorithm
  r := rand.New(rand.NewSource(time.Now().Unix()))
  for i := range deck.Cards {
    j := r.Intn(i + 1)
    deck.Cards[i], deck.Cards[j] = deck.Cards[j], deck.Cards[i]
  }

  return deck
}

// Function to deal cards to a player's hand
func dealCards(deck *Deck, hand *Hand, numCards int) {
  for i := 0; i < numCards; i++ {
    hand.Cards = append(hand.Cards, deck.Cards[0]) // Add the first card in the deck to the hand
    deck.Cards = deck.Cards[1:] // Remove the first card from the deck
  }
}

func main() {
  // Create a new deck and shuffle it
  deck := createDeck()

  // Create a new hand for the player
  hand := &Hand{}

  // Deal 5 cards to the player's hand
  dealCards(deck, hand, 5)

  // Print out the player's hand
  fmt.Printf("Player's hand: ")
  for _, card := range hand.Cards {
    fmt.Printf("[%s of %s], ", card.Value, card.Suit)
  }
}