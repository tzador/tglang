package main

import (
	"fmt"
	"math/rand"
	"time"
)

func main() {
	// initialize a slice containing integers from 0 to 100
	slice := make([]int, 0, 100)
	for i := 0; i < 100; i++ {
		slice = append(slice, i)
	}

	// randomly shuffle the slice
	rand.Seed(time.Now().UnixNano())
	rand.Shuffle(len(slice), func(i, j int) {
		slice[i], slice[j] = slice[j], slice[i]
	})

	// create a map to store the counts of each number appearing in the slice
	freqMap := make(map[int]int)

	// loop through the slice and update the map accordingly
	for _, num := range slice {
		freqMap[num]++
	}

	// print the frequency of each number in the slice
	for num, count := range freqMap {
		fmt.Printf("The number %d appears %d times.\n", num, count)
	}

	// calculate and print the average and median of the slice
	average := float64(0)
	median := float64(0)
	mid := len(slice) / 2
	if len(slice)%2 == 0 {
		median = float64((slice[mid-1] + slice[mid]) / 2)
	} else {
		median = float64(slice[mid])
	}

	// calculate the sum of all numbers in the slice
	sum := 0
	for _, num := range slice {
		sum += num
	}

	// calculate the average of the sum and print it
	average = float64(sum) / float64(len(slice))
	fmt.Printf("The average of the slice is %.2f.\n", average)

	// print the median of the slice
	fmt.Printf("The median of the slice is %.2f.", median)
}