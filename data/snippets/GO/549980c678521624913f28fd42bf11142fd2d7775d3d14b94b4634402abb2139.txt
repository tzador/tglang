// This code snippet creates a binary search tree data structure and inserts nodes in a random order
type Node struct { // structure for each node in the tree
    data  int  // data stored in the node
    left  *Node  // pointer to the left child node
    right *Node  // pointer to the right child node
}

func insertNode(root *Node, data int) *Node { // function to insert a new node into the tree
    if root == nil { // if the root node is empty, create a new node as the root
        root = &Node{data, nil, nil}
    } else if data < root.data { // if the data is less than the root node's data, insert the node into the left subtree
        root.left = insertNode(root.left, data)
    } else { // otherwise, insert the node into the right subtree
        root.right = insertNode(root.right, data)
    }
    return root
}

func main() {
    var bst *Node = nil // create an empty binary search tree
    bst = insertNode(bst, 50) // insert nodes in random order
    bst = insertNode(bst, 25)
    bst = insertNode(bst, 75)
    bst = insertNode(bst, 15)
    bst = insertNode(bst, 35)
    bst = insertNode(bst, 60)
    bst = insertNode(bst, 90)
    bst = insertNode(bst, 10)
    bst = insertNode(bst, 30)
    bst = insertNode(bst, 40)

    // Print the tree in order
    fmt.Println("In-order traversal:")
    inOrder(bst)
}

func inOrder(root *Node) { // function to print the tree in ascending order
    if root != nil {
        inOrder(root.left) // recursively print the left subtree
        fmt.Println(root.data) // print the root node
        inOrder(root.right) // recursively print the right subtree
    }
}