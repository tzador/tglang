package main

import "fmt"

// Define a type named 'point' with two float64 fields, x and y
type point struct {
	x, y float64
}

// Define a method on type point, called 'distanceToOrigin', that takes no arguments and returns a float64
func (p point) distanceToOrigin() float64 {
	return math.Sqrt(p.x*p.x + p.y*p.y)
}

// Define a function named 'closestPoint', that takes two arguments of type point, and returns a point
func closestPoint(a, b point) point {
	// Initialize a variable named 'points' as a slice of points
	points := []point{
		// Assign two points to the slice
		point{x: 3, y: 0},
		point{x: 0, y: 4},
	}

	// Initialize a variable named 'closest' as a point with x and y values of 0
	var closest point

	// Iterate through each point in the points slice
	// Calculate the distance from each point to both arguments passed to the function
	// If the distance to the current point is less than the distance to the closest point,
	// update the 'closest' variable to the current point
	for _, p := range points {
		if p.distanceToOrigin() < closest.distanceToOrigin() {
			closest = p
		}
	}

	// Return the closest point
	return closest
}

// Main function
func main() {
	// Initialize two points
	p1 := point{x: 2, y: 2}
	p2 := point{x: 7, y: 9}

	// Call the closestPoint function and assign the result to a variable named 'closest'
	closest := closestPoint(p1, p2)

	// Print the coordinates of the closest point
	fmt.Printf("Closest point to (2, 2) and (7, 9): (%f, %f)\n", closest.x, closest.y)
}