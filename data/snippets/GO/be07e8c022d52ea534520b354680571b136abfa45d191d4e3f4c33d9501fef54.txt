// This code snippet demonstrates a function that checks if a number is prime or not

// Function to check if a number is prime
func isPrime(num int) bool {
    // If number is less than or equal to 1, it is not prime
    if num <= 1 {
        return false
    }

    // If number is 2, it is prime
    if num == 2 {
        return true
    }

    // If number is divisible by any number from 2 to its square root, it is not prime
    sqrt := int(math.Sqrt(float64(num)))
    for i := 2; i <= sqrt; i++ {
        if num%i == 0 {
            return false
        }
    }

    // Number is prime if it passes all the above conditions
    return true
}

// Main function
func main() {
    // Initialize a slice of integers
    nums := []int{2, 5, 7, 9, 11, 13, 17}

    // Iterate through the slice and check if each number is prime
    for _, num := range nums {
        if isPrime(num) {
            fmt.Printf("%d is a prime number\n", num)
        } else {
            fmt.Printf("%d is not a prime number\n", num)
        }
    }
}

// Output:
// 2 is a prime number
// 5 is a prime number
// 7 is a prime number
// 9 is not a prime number
// 11 is a prime number
// 13 is a prime number
// 17 is a prime number