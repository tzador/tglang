package main

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	const numRoutines = 10 //defines number of goroutines to be executed
	var wg sync.WaitGroup //creates waitGroup to wait for all goroutines to finish
	wg.Add(numRoutines)   //increments waitGroup by number of goroutines

	//start a goroutine for each number from 0 to 9
	for i := 0; i < numRoutines; i++ {
		go func(num int) { //anonymous function to be executed as goroutine
			defer wg.Done() //decrements waitGroup when function exits
			fmt.Println("Starting goroutine", num)
			time.Sleep(1 * time.Second) //simulate some work being done
			fmt.Println("Goroutine", num, "finished")
		}(i)
	}

	wg.Wait() //waits for all goroutines to finish before continuing

	fmt.Println("All goroutines finished")
}