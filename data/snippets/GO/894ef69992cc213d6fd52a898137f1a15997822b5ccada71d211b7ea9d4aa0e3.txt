// This program calculates the nth Fibonacci number using optimized recursion and memoization

package main

import (
	"fmt"
)

// mem is a map that stores the previously calculated Fibonacci numbers
var mem = make(map[int]int)

// fib calculates the nth Fibonacci number and stores it in the mem map
func fib(n int) int {
	// check if the value has been calculated before, return it if yes
	if val, ok := mem[n]; ok {
		return val
	}

	// base case
	if n == 0 || n == 1 {
		mem[n] = n
		return n
	}

	// recursive call to calculate the nth Fibonacci number
	f := fib(n-1) + fib(n-2)

	// store the calculated value in the mem map
	mem[n] = f

	// return the calculated value
	return mem[n]
}

func main() {
	// get the input
	var n int
	fmt.Print("Enter the value of n: ")

	// read and store the input
	fmt.Scan(&n)

	// calculate the nth Fibonacci number
	f := fib(n)

	// print the calculated value
	fmt.Printf("The %dth Fibonacci number is %d \n", n, f)
}