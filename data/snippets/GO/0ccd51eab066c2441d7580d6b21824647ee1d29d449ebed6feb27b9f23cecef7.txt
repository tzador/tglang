// Define a function called mergeSort that takes in an array of integers and returns the sorted array
func mergeSort(arr []int) []int {
	// Check if the array has only one element, if so, return the array
	if len(arr) == 1 {
		return arr
	}
	// Find the middle index of the array
	middleIndex := len(arr) / 2
	// Split the array into two halves: left and right
	left := arr[:middleIndex]
	right := arr[middleIndex:]
	// Recursively call the mergeSort function on the two halves
	leftSorted := mergeSort(left)
	rightSorted := mergeSort(right)
	// Merge the two sorted halves into a new sorted array
	return merge(leftSorted, rightSorted)
}

// Define a function called merge that takes in two sorted arrays and merges them into a single sorted array
func merge(left []int, right []int) []int {
	// Initialize a new empty array to store the merged values
	merged := make([]int, 0)
	// While both left and right arrays are not empty
	for len(left) > 0 && len(right) > 0 {
		// If the first element of the left array is smaller than the first element of the right array
		if left[0] < right[0] {
			// Append the first element of the left array to the merged array
			merged = append(merged, left[0])
			// Remove the first element of the left array
			left = left[1:]
		// Otherwise
		} else {
			// Append the first element of the right array to the merged array
			merged = append(merged, right[0])
			// Remove the first element of the right array
			right = right[1:]
		}
	}
	// If there are any remaining elements in the left array, append them to the merged array
	merged = append(merged, left...)
	// If there are any remaining elements in the right array, append them to the merged array
	merged = append(merged, right...)
	// Return the merged array
	return merged
}

// Example usage:
unsorted := []int{7, 4, 2, 9, 1, 6, 3, 8, 5}
sorted := mergeSort(unsorted)
fmt.Println(sorted) // Output: [1 2 3 4 5 6 7 8 9]