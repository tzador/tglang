package main

//importing necessary modules
import (
	"fmt"
	"time"
)

// defining a constant
const PI = 3.14159

// defining a struct type
type Person struct {
	Name  string `json:"name"`
	Age   int    `json:"age"`
	Email string `json:"email"`
}

// defining an interface type
type Shape interface {
	Area() float64
	Perimeter() float64
}

// defining a function that returns a function
func square(x int) func() int {
	return func() int {
		return x * x
	}
}

// main function
func main() {
	// a map with string keys and integer values
	countryPopulations := map[string]int{
		"China":    1439323776,
		"India":    1380004385,
		"USA":      331002651,
		"Indonesia":273523621,
	}

	// using a switch statement
	switch time.Now().Weekday() {
	case time.Monday:
		fmt.Println("Welcome to the start of the week!")
	case time.Tuesday:
		fmt.Println("Happy Taco Tuesday!")
	case time.Wednesday:
		fmt.Println("Hump Day! Keep pushing through.")
	case time.Thursday:
		fmt.Println("Almost there, it's almost Friday!")
	case time.Friday:
		fmt.Println("TGIF! Time to unwind.")
	case time.Saturday:
		fmt.Println("Enjoy your weekend!")
	case time.Sunday:
		fmt.Println("Get ready for Monday.")
	}

	// creating a slice of strings
	people := []string{"John", "Mary", "David", "Emily"}
	fmt.Println("The first person in the slice is", people[0])

	// using a for loop
	for i := 0; i < len(people); i++ {
		fmt.Println("Hello,", people[i]+"!")
	}

	// declaring and initializing a variable
	var circleRadius float64 = 5.5

	// using a for loop
	for index := 0; index <= 10; index++ {
		// using an if statement
		if index%2 == 0 {
			circleArea := PI * circleRadius * circleRadius
			fmt.Println("The area of the circle is", circleArea)
		} else {
			circlePerimeter := 2 * PI * circleRadius
			fmt.Println("The perimeter of the circle is", circlePerimeter)
		}
	}

	// creating an instance of Person struct
	person := Person{
		Name:  "Jane",
		Age:   32,
		Email: "jane@example.com",
	}

	// using a type assertion
	shape, ok := person.(Shape)
	if ok {
		fmt.Println("Person implements Shape interface")
		fmt.Println("Area:", shape.Area())
		fmt.Println("Perimeter:", shape.Perimeter())
	} else {
		fmt.Println("Person does not implement Shape interface")
	}

	// calling a function that returns a function
	// assigning the returned function to a variable
	squareFunc := square(7)
	// calling the returned function
	result := squareFunc()
	fmt.Println("The result is", result)
}

// implementing the Area method of Shape interface for a rectangle
func (r Rectangle) Area() float64 {
	return r.Length * r.Width
}

// implementing the Perimeter method of Shape interface for a rectangle
func (r Rectangle) Perimeter() float64 {
	return 2 * (r.Length + r.Width)
}

// defining a struct type for a rectangle
type Rectangle struct {
	Length float64 `json:"length"`
	Width  float64 `json:"width"`
}