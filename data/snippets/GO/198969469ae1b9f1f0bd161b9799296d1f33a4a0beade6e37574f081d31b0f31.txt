// This is a complex code snippet in GO programming language
// It demonstrates the use of structs, functions, and interfaces

type Person interface {
    // Person interface specifies the methods that any person struct must implement
    GetName() string
    GetAge() int
}

// Person struct represents a person with a name and age
type person struct {
    name string
    age int
}

// GetName returns the person's name
func (p *person) GetName() string {
    return p.name
}

// GetAge returns the person's age
func (p *person) GetAge() int {
    return p.age
}

// Employee struct represents an employee who is also a person
type employee struct {
    person
    position string
}

// GetPosition returns the employee's position
func (e *employee) GetPosition() string {
    return e.position
}

// NewEmployee creates a new employee with the given name, age, and position
func NewEmployee(name string, age int, position string) *employee {
    return &employee{
        person: person{
            name: name,
            age: age,
        },
        position: position,
    }
}

// callInterfaceMethod takes in any struct that implements the Person interface
// and calls the GetName and GetAge methods
func callInterfaceMethod(p Person) {
    fmt.Printf("Name: %s\n", p.GetName())
    fmt.Printf("Age: %d\n", p.GetAge())
}

func main() {
    // create an employee struct using the NewEmployee function
    employee1 := NewEmployee("John Doe", 30, "Manager")

    // call the callInterfaceMethod function and pass in the employee struct
    callInterfaceMethod(employee1)
}