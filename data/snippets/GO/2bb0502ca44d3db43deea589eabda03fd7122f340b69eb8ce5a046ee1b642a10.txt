/* This function checks whether the given number is prime or not. */
func isPrime(num int) bool {
  /* A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. */
  /* 2 is the only prime number that is even, so we can immediately return false if the number is even. */
  if num == 2 {
    return true
  } else if num < 2 || num%2 == 0 {
    return false
  }

  /* We only need to check up to the square root of the given number. */
  sqrRoot := int(math.Sqrt(float64(num)))

  /* Starting with 3, we check if the number has any divisors other than 1 and itself. */
  for i := 3; i <= sqrRoot; i += 2 {
    if num%i == 0 {
      return false
    }
  }
  /* If the loop finishes without finding a divisor, then the number is prime. */
  return true
}

/* Sample function call to test the code snippet. */
isPrime(13)

/* Output: true */