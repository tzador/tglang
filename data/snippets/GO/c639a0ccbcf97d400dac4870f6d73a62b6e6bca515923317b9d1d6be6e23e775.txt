// This is a complex function that takes in two
// slices of integers and returns the larger of
// the two as a sorted slice
func findLarger(slice1, slice2 []int) []int {
	// If the first slice is empty, return the second slice
	if len(slice1) == 0 {
		return slice2
	}
	// If the second slice is empty, return the first slice
	if len(slice2) == 0 {
		return slice1
	}

	// Create a new slice to store the larger values
	largerSlice := make([]int, 0)

	// Loop through both slices and compare each element
	// Add the larger element to the new slice
	for i := 0; i < len(slice1) && i < len(slice2); i++ {
		if slice1[i] > slice2[i] {
			largerSlice = append(largerSlice, slice1[i])
		} else if slice2[i] > slice1[i] {
			largerSlice = append(largerSlice, slice2[i])
		} else {
			largerSlice = append(largerSlice, slice1[i])
		}
	}

	// If there are still elements left in either slice,
	// add them to the new slice
	if len(slice1) > len(slice2) {
		largerSlice = append(largerSlice, slice1[len(slice2):]...)
	} else if len(slice2) > len(slice1) {
		largerSlice = append(largerSlice, slice2[len(slice1):]...)
	}

	// Sort the slice in ascending order
	sort.Slice(largerSlice, func(i, j int) bool { return largerSlice[i] < largerSlice[j] })

	// Return the sorted larger slice
	return largerSlice
}