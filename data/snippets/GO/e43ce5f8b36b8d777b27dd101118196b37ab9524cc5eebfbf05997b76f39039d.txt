//This code snippet uses goroutines and channels
//to perform multithreading and communication between them.
package main

import (
	"fmt"
	"sync"
)

func main() {
	var wg sync.WaitGroup
	ch := make(chan int)

	for i := 0; i < 10; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			ch <- i * 2 //sends the value of i multiplied by 2 to the channel
		}(i)
	}

	go func() {
		wg.Wait()
		close(ch) //closes the channel after all goroutines are finished
	}()

	for val := range ch { //loops through all the values in the channel
		fmt.Println(val)
	}
}