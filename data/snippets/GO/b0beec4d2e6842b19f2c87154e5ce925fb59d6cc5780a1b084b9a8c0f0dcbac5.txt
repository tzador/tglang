package main

import (
	"fmt"
	"time"
)

func main() {
	// Initialize slice of integers
	var nums []int
	nums = append(nums, 5, 6, 2, 8, 9, 3, 7, 1, 4)

	// Parallel QuickSort using goroutines
	go quickSort(nums, 0, len(nums) - 1)

	// Sleep to ensure goroutine finishes execution
	time.Sleep(time.Second)

	// Print sorted slice
	fmt.Println(nums)
}

// Helper function for QuickSort algorithm
func partition(nums []int, low, high int) int {
	// Set pivot as last element
	pivot := nums[high]

	// Set pointer for smaller elements
	i := low - 1

	// Loop through elements
	for j := low; j < high; j++ {
		// If current element is smaller than pivot,
		// increment pointer and swap with that element
		if nums[j] < pivot {
			i++
			nums[i], nums[j] = nums[j], nums[i]
		}
	}

	// Swap pivot with element at pointer position
	nums[i + 1], nums[high] = nums[high], nums[i + 1]

	return i + 1
}

// QuickSort algorithm using goroutines
func quickSort(nums []int, low, high int) {
	// If low index is less than high, continue sorting
	if low < high {
		// Find pivot using partition function
		pivot := partition(nums, low, high)

		// Recursively sort left and right partitions using goroutines
		go quickSort(nums, low, pivot - 1)
		go quickSort(nums, pivot + 1, high)
	}
}