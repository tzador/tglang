package main

import (
    "fmt"
    "strings"
    "os"
)

// Define a struct called "Person" with the fields "name" and "age"
type Person struct {
    name string
    age  int
}

// Create an instance of the "Person" struct
p := Person{
    name: "John",
    age:  25,
}

// Create a slice of strings and append two names
names := []string{"Jane", "Tom"}
names = append(names, "Mary", "Sam")

// Define a function that takes in a string and an integer and returns a string
func concat(name string, age int) string {
    // Convert the age to a string
    ageStr := strconv.Itoa(age)
    // Concatenate the name and age
    result := name + " is " + ageStr + " years old."
    // Return the concatenated string
    return result
}

// Iterate through the names slice and call the concat function for each name and p.age
for _, n := range names {
    fmt.Println(concat(n, p.age))
}

// Define a function that takes in a string and returns a new string with the first letter capitalized
func capitalize(str string) string {
    // Split the string by spaces
    words := strings.Split(str, " ")
    // Iterate through the words slice and capitalize the first letter of each word
    for i, w := range words {
        words[i] = strings.ToUpper(w[:1]) + w[1:]
    }
    // Join the words back together with spaces
    result := strings.Join(words, " ")
    // Return the capitalized string
    return result
}

// Call the capitalize function on the first element of the names slice
fmt.Println(capitalize(names[0]))

// Define a function that checks if a given number is even or odd
func checkEvenOrOdd(num int) string {
    // Use modulus operator to check if the number is even or odd
    if num % 2 == 0 {
        return "even"
    } else {
        return "odd"
    }
}

// Call the checkEvenOrOdd function on p.age and print the result
result := checkEvenOrOdd(p.age)
fmt.Println(result)

// Define a function that creates a file and writes a string to it
func writeFile() {
    // Create a file with the name "output.txt"
    file, err := os.Create("output.txt")
    if err != nil {
        fmt.Println(err)
    }
    
    // Write a string to the file
    _, err = file.WriteString("This is the content of my file.")
    if err != nil {
        fmt.Println(err)
    }

    // Close the file
    file.Close()
}

// Call the writeFile function
writeFile()