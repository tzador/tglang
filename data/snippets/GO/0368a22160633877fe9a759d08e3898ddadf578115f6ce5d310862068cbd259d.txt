package main

import (
    "fmt"
    "time"
)

// This function takes in two integer values
// and returns the sum
func add(x int, y int) int {
    return x + y
}

// This function adds two values asynchronously
// using goroutines and channels
func addAsynchronously(x int, y int) int {
    // Creating a channel to store the result
    // of the asynchronous addition
    result := make(chan int)

    // Spawning a new goroutine
    go func() {
        // Performing the addition
        sum := add(x, y)
        // Sending the result to the channel
        result <- sum
    }()

    // Waiting for the result to be sent to the channel
    // and storing it in the variable finalSum
    finalSum := <-result
    return finalSum
}

func main() {
    // Calling the add function synchronously
    syncResult := add(5, 10)
    fmt.Println("Synchronously added:", syncResult)

    // Calling the addAsynchronously function asynchronously
    // and storing the result in the variable asyncResult
    asyncResult := addAsynchronously(10, 20)

    // Printing the result of the asynchronous addition
    fmt.Println("Asynchronously added:", asyncResult)

    // Sleeping for 2 seconds to allow the asynchronous
    // addition to finish
    time.Sleep(2 * time.Second)
}