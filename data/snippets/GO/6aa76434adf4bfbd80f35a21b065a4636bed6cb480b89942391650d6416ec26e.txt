// This program will generate an encrypted string using RSA encryption
package main

// Import necessary packages
import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"fmt"
)

func main() {
	// Generate a private key with RSA
	privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		panic(err)
	}

	// Public key is derived from the private key
	publicKey := &privateKey.PublicKey

	// Convert the public key to bytes
	publicKeyBytes, err := x509.MarshalPKIXPublicKey(publicKey)
	if err != nil {
		panic(err)
	}

	// Create a pem.Block structure to store the public key in PEM format
	pemPublicKey := pem.Block{
		Type:  "RSA PUBLIC KEY",
		Bytes: publicKeyBytes,
	}

	// Encode the public key into PEM format
	pemPublicKeyBytes := pem.EncodeToMemory(&pemPublicKey)
	fmt.Println("PEM encoded public key:")
	fmt.Println(string(pemPublicKeyBytes))

	// Encrypt a message using the public key
	message := []byte("Secret message to be encrypted")
	encryptedMessage, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, message)
	if err != nil {
		panic(err)
	}

	// Print the encrypted message
	fmt.Println("Encrypted message:")
	fmt.Println(string(encryptedMessage))

	// Decrypt the encrypted message using the private key
	decryptedMessage, err := rsa.DecryptPKCS1v15(rand.Reader, privateKey, encryptedMessage)
	if err != nil {
		panic(err)
	}

	// Print the decrypted message
	fmt.Println("Decrypted message:")
	fmt.Println(string(decryptedMessage))
}