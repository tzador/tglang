// This code snippet demonstrates the use of goroutines in GO language

// Importing necessary packages
import (
	"fmt"			// For printing output
	"sync"			// For synchronization using mutex
	"time"			// For adding delay in goroutines
)

// Function to print a given message
func printMessage(msg string) {
	fmt.Println(msg)
}

// Main function
func main() {
	// Creating a synchronization mutex
	var wg sync.Mutex
	// Creating a wait group
	var wgWait sync.WaitGroup
	// Setting the number of goroutines to be waited for
	wgWait.Add(10)

	// Loop to create 10 goroutines
	for i := 0; i < 10; i++ {
		go func(i int) {
			// Locking the mutex before executing goroutine
			wg.Lock()
			// Function call to print message
			printMessage(fmt.Sprintf("This is goroutine number %d", i))
			// Delaying execution for 200 milliseconds
			time.Sleep(200 * time.Millisecond)
			// Unlocking the mutex after execution
			wg.Unlock()
			// Signaling the wait group that the goroutine has finished execution
			wgWait.Done()
		}(i) // Passing iteration variable as parameter to goroutine function
	}

	// Waiting for all goroutines to finish execution
	wgWait.Wait()
	// Printing final message
	fmt.Println("All goroutines have finished execution.")
}