type Node struct { //Creates a new struct named 'Node' to represent nodes in a graph
    Value int //An integer value for the node
    Next []*Node //A slice of pointers to other 'Node' structs, representing the next nodes in the graph
}

//Function to add a new node to the graph
func (n *Node) AddNode(value int) *Node {
    node := &Node{ //Uses pointer to create a new 'Node' struct
        Value: value, //Sets the 'Value' field to the given value
        Next: []*Node{}, //Initializes the 'Next' field as an empty slice
    }
    n.Next = append(n.Next, node) //Appends the new node to the 'Next' slice of the current node
    return node //Returns the newly created 'Node' struct
}

//Function to search for a specific value in the graph
func (n *Node) Search(value int) *Node {
    node := n //Sets a variable 'node' to the current node
    for node != nil { //Loop while 'node' is not nil
        if node.Value == value { //Checks if the current node's 'Value' matches the given value
            return node //Returns the node if match is found
        }
        node = node.Next[0] //Sets 'node' to the first element in the 'Next' slice, representing the next node in the graph
    }
    return nil //Returns nil if value is not found in the graph
}

//Function to remove a node from the graph
func (n *Node) RemoveNode(node *Node) {
    for i, n := range n.Next { //Loop through the 'Next' slice of the current node
        if n == node { //Checks if the current node matches the node to be removed
            n.Next = append(n.Next[:i], n.Next[i+1:]...) //Removes the node from the 'Next' slice by re-slicing the slice
            return //Returns after the node is removed
        }
    }
}

//Code snippet to create and manipulate a graph using the 'Node' struct
func main() {
    root := &Node{Value: 1} //Creates the root node with a value of 1
    root.AddNode(2) //Adds a new node with a value of 2 to the graph
    root.AddNode(3).AddNode(4) //Adds two more nodes to the graph
    fmt.Println(root) //Prints the root node
    fmt.Println(root.Search(3)) //Searches for a node with a value of 3 and prints it
    root.RemoveNode(root.Next[0]) //Removes the first node from the graph
    fmt.Println(root) //Prints the updated root node
}