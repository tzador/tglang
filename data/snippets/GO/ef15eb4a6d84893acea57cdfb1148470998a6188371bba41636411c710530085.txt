package main

import "fmt"

func main() {
    // Declare and initialize an array with 5 elements
    arr := [5]int{1, 2, 3, 4, 5}
    fmt.Println(arr)

    // Declare and initialize a slice with 3 elements
    slice := []int{6, 7, 8}
    fmt.Println(slice)

    // Add elements to a slice using the built-in append() function
    slice = append(slice, 9, 10)
    fmt.Println(slice)

    // Declare and initialize a map with 3 key-value pairs
    m := map[string]int{"a": 1, "b": 2, "c": 3}
    fmt.Println(m)

    // Use range to iterate over a slice or map
    for i, v := range slice {
        fmt.Println(i, v)
    }

    // Use the defer keyword to delay the execution of a function when the surrounding function returns
    defer fmt.Println("This will be printed last")

    // Use the recover() function to catch and handle panics in a deferred function
    defer func() {
        if r := recover(); r != nil {
            fmt.Println("Recovered from panic:", r)
        }
    }()

    // Use the panic() function to intentionally cause a panic
    panic("Something went wrong")
}