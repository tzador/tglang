// This code snippet shows how to implement binary search in sorted slice of integers

// Define a function called binarySearch that takes in three parameters - a sorted slice of integers, a target integer, and length of the slice 
func binarySearch(slice []int, target, length int) int {
    
    // Initialize variables for start index, end index, and middle index of the slice
    start := 0
    end := length - 1
    middle := (start + end) / 2
    
    // Iterate until start index is less than or equal to end index
    for start <= end {
        
        // If the middle element of the slice is equal to the target, return its index
        if slice[middle] == target {
            return middle
        } 
        // If the target is less than the middle element, update end index to be middle - 1
        // This is because the target can only exist in the left half of the slice 
        else if target < slice[middle] {
            end = middle - 1
        }
        // If the target is greater than the middle element, update start index to be middle + 1
        // This is because the target can only exist in the right half of the slice 
        else {
            start = middle + 1
        }
        // Update middle index to be the new midpoint of the slice 
        middle = (start + end) / 2
    }
    // If the target is not found in the slice, return -1
    return -1
}

// Create a sorted slice of integers
slice := []int{2, 4, 6, 8, 10, 12, 14}

// Call the binarySearch function with the slice, target as 8, and length of slice
result := binarySearch(slice, 8, len(slice))

// Print the result
fmt.Println(result)