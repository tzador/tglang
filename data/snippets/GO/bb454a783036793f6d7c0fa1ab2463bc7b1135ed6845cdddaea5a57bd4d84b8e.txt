/*
	This code snippet generates a random password using alphanumeric characters of length 8.
	The password includes 2 uppercase letters, 2 lowercase letters, 2 numbers, and 2 special characters.
*/

package main 

import (
	"fmt"
	"math/rand"
	"time"
)

func generatePassword() string {
	rand.Seed(time.Now().UnixNano()) // using current time as seed for random generation

	password := make([]byte, 8) // creating a byte slice of size 8
	chars := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()" // all possible characters 

	// generating 2 random uppercase letters
	password[0] = chars[rand.Intn(len(chars)-1)]
	password[1] = chars[rand.Intn(len(chars)-1)]

	// generating 2 random lowercase letters
	password[2] = chars[rand.Intn(len(chars)-1)]
	password[3] = chars[rand.Intn(len(chars)-1)]

	// generating 2 random numbers
	password[4] = chars[rand.Intn(len(chars)-1)]
	password[5] = chars[rand.Intn(len(chars)-1)]

	// generating 2 random special characters
	password[6] = chars[rand.Intn(len(chars)-1)]
	password[7] = chars[rand.Intn(len(chars)-1)]

	// shuffling the password characters using Fisher-Yates algorithm
	for i := len(password) - 1; i > 0; i-- {
		j := rand.Intn(i + 1)
		password[i], password[j] = password[j], password[i]
	}

	// converting byte slice to string and returning the password
	return string(password)
}

func main() {
	fmt.Println(generatePassword()) // printing the generated password
}