// Declare a slice of strings
var stringSlice []string

// Append strings to the slice
stringSlice = append(stringSlice, "hello", "world")

// Create a map with string keys and integer values
var integerMap map[string]int

// Initialize the map with values
integerMap = map[string]int{"value1": 1, "value2": 2, "value3": 3}

// Iterate over the map and print the key-value pairs
for key, value := range integerMap {
    fmt.Println(key, ": ", value)
}

// Sort the integer values in the map and store them in a slice
var sortedValues []int
for _, value := range integerMap {
    sortedValues = append(sortedValues, value)
}
sort.Ints(sortedValues)

// Print the sorted values
fmt.Println(sortedValues)

// Create a struct for a user
type User struct {
    Name  string
    Age   int
    Email string
}

// Create a new instance of User
user := User{Name: "John Doe", Age: 30, Email: "john.doe@example.com"}

// Print the user's name
fmt.Println(user.Name)

// Create an interface that contains a method named "calculate"
type Calculator interface {
    calculate() int
}

// Create a struct that implements the Calculator interface
type Adder struct {
    num1 int
    num2 int
}

// Implement the "calculate" method for the Adder struct
func (a *Adder) calculate() int {
    return a.num1 + a.num2
}

// Create a new instance of Adder
adder := Adder{num1: 5, num2: 6}

// Use the "calculate" method to add two numbers
sum := adder.calculate()

// Print the sum
fmt.Println(sum)

// Create a function that takes in a string argument and returns a function
func stringFunction(str string) func() {
    // The returned function uses the original string argument
    return func() {
        fmt.Println("Original string:", str)
    }
}

// Call the function and store the returned function in a variable
strFunc := stringFunction("Hello World")

// Call the returned function
strFunc()

// Create a goroutine to run a function concurrently
go func() {
    fmt.Println("This function is running in the background")
}()

// Wait for the goroutine to finish before exiting the program
time.Sleep(time.Second)

// Print a statement to indicate the program has finished
fmt.Println("Program finished")