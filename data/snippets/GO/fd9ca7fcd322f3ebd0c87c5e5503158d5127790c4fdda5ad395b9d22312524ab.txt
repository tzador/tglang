func mergeSort(arr []int) []int { //defines a function named 'mergeSort' which takes in an array of integers as input
    if (len(arr) <= 1) { //if the length of the array is 1 or less, return the array itself
        return arr
    }

    middle := len(arr) / 2 //else, define a variable 'middle' as the quotient of the length of the array divided by 2
    left := mergeSort(arr[:middle]) //define a variable 'left' as the result of calling the 'mergeSort' function on the first half of the input array
    right := mergeSort(arr[middle:]) //define a variable 'right' as the result of calling the 'mergeSort' function on the second half of the input array

    return merge(left, right) //return the result of calling the 'merge' function on the 'left' and 'right' variables
}

func merge(left []int, right []int) []int { //defines a function named 'merge' which takes in two arrays of integers as input
    result := make([]int, len(left)+len(right)) //defines a new array 'result' with a length equal to the sum of the lengths of the 'left' and 'right' arrays
    i := 0 //defines a variable 'i' to keep track of the index of the 'result' array
    for len(left) > 0 && len(right) > 0 { //loop through the 'left' and 'right' arrays while either of them has elements left
        if left[0] <= right[0] { //if the first element of the 'left' array is lesser than or equal to the first element of the 'right' array
            result[i] = left[0] //set the first element of the 'result' array as the first element of the 'left' array
            left = left[1:] //remove the first element from the 'left' array
        } else {
            result[i] = right[0] //else, set the first element of the 'result' array as the first element of the 'right' array
            right = right[1:] //remove the first element from the 'right' array
        }
        i++ //increase the value of 'i' by 1
    }

    for _, value := range left { //loop through any remaining elements in the 'left' array
        result[i] = value //set the remaining elements in the 'result' array as the elements in the 'left' array
        i++ //increase the value of 'i' by 1
    }

    for _, value := range right { //loop through any remaining elements in the 'right' array
        result[i] = value //set the remaining elements in the 'result' array as the elements in the 'right' array
        i++ //increase the value of 'i' by 1
    }

    return result //return the sorted and merged 'result' array
}

arr := []int{5, 3, 8, 2, 1, 9, 4, 6, 7} //define an input array 'arr' with unsorted integer values
sortedArr := mergeSort(arr) //call the 'mergeSort' function and store the result in a new array 'sortedArr'

fmt.Println(sortedArr) //print the sorted array to the console