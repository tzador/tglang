// A function that sorts an array of integers using the quicksort algorithm
func quicksort(arr []int, low int, high int) {
    // Base case: If array is empty or only has one element, return the array
    if low >= high {
        return
    }
    // The pivot element is chosen as the last element in the array
    pivot := arr[high]
    // Variable i will be used to track the position of elements  smaller than the pivot element
    i := low
    // Loop through the array and partition elements based on whether they are smaller or larger than the pivot element
    for j := low; j < high; j++ {
        // If the current element is smaller than the pivot element, swap it with the element at index i
        if arr[j] < pivot {
            arr[i], arr[j] = arr[j], arr[i]
            // Increment i to keep track of the partition point
            i++
        }
    }
    // Swap the pivot element with the element at index i, to place it in its correct position 
    arr[i], arr[high] = arr[high], arr[i]
    // Recursively call the quicksort function on the left and right partitions of the array
    quicksort(arr, low, i-1)
    quicksort(arr, i+1, high)
}

//Example usage:
//Create an unsorted array of integers
arr := []int{9, 4, 2, 8, 6, 1}
//Sort the array using the quicksort function, passing in the array, starting index, and ending index as parameters
quicksort(arr, 0, len(arr)-1)
//The sorted array will now be [1, 2, 4, 6, 8, 9]