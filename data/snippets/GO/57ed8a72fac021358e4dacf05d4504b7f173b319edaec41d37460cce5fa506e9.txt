package main

import (
	"fmt"
	"math/rand"
)

type Node struct { //Defining a struct type called "Node" which will be used for creating nodes in our tree structure
	Value int //Field "Value" will hold the integer value of the node
	Left *Node //Field "Left" will hold the pointer to the left child node
	Right *Node //Field "Right" will hold the pointer to the right child node
}

func createNode(val int) *Node { //This function takes an integer value as input and returns a pointer to a newly created node with the given value
	return &Node{ //Creating and instantiating a new node with the given value
		Value: val, //Assigning the input integer value to the "Value" field of the node
		Left: nil, //Setting the "Left" field to nil as there are no child nodes yet
		Right: nil, //Setting the "Right" field to nil as there are no child nodes yet
	}
}

func insert(root *Node, val int) *Node { //This function takes in the root node of a tree and an integer value and inserts a new node with that value into the tree
	if root == nil { //If the root node is nil, create a new node with the given value and make it the root node
		root = createNode(val)
	} else if val < root.Value { //If the input value is smaller than the root node's value, insert the value into the left subtree
		root.Left = insert(root.Left, val)
	} else { //Else, insert the value into the right subtree
		root.Right = insert(root.Right, val)
	}
	return root //Return the root node of the tree after insertion
}

func printTree(root *Node) { //This function takes in the root node of a tree and prints all the nodes in the tree using inorder traversal
	if root != nil { //If the root node is not nil, print the nodes using inorder traversal
		printTree(root.Left) //Print all the nodes in the left subtree
		fmt.Println(root.Value) //Print the value of the root node
		printTree(root.Right) //Print all the nodes in the right subtree
	}
}

func main() {
	root := createNode(50) //Creating the root node of our tree with value 50
	insert(root, 30) //Inserting the value 30 into the tree
	insert(root, 20) //Inserting the value 20 into the tree
	insert(root, 40) //Inserting the value 40 into the tree
	insert(root, 70) //Inserting the value 70 into the tree
	insert(root, 60) //Inserting the value 60 into the tree
	insert(root, 80) //Inserting the value 80 into the tree

	fmt.Println("Inorder traversal of the tree:") //Print the text "Inorder traversal of the tree:"
	printTree(root) //Print all the nodes in the tree using inorder traversal
}