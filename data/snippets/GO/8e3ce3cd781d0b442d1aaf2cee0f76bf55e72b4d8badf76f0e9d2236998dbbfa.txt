package main

import (
    "fmt"
    "time"
    "math/rand"
)

func main() {
    // generate a random integer between 1 and 100
    rand.Seed(time.Now().UnixNano())
    n := rand.Intn(100) + 1

    // initialize slices to store factors and prime factors
    var factors []int
    var primeFactors []int

    // iterate through each integer between 1 and the randomly generated number
    for i := 1; i <= n; i++ {
        // check if the current integer is a factor of n
        if n%i == 0 {
            // append the factor to the factors slice
            factors = append(factors, i)

            // iterate through each integer between 2 and the current factor
            for j := 2; j <= i; j++ {
                // check if the current factor is divisible by j
                if i%j == 0 {
                    // check if j is a prime number by checking if it is only divisible by 1 and itself
                    prime := true
                    for k := 2; k < j; k++ {
                        if j%k == 0 {
                            prime = false
                            break
                        }
                    }
                    // if j is a prime number, append it to the prime factors slice
                    if prime {
                        primeFactors = append(primeFactors, j)
                    }
                }
            }
        }
    }

    // print the randomly generated number
    fmt.Println("Random number:", n)
    fmt.Println()

    // print the factors of the randomly generated number
    fmt.Println("Factors:")
    for _, factor := range factors {
        fmt.Printf("%d ", factor)
    }
    fmt.Println()

    // print the prime factors of the randomly generated number
    fmt.Println("Prime factors:")
    for _, primeFactor := range primeFactors {
        fmt.Printf("%d ", primeFactor)
    }
}