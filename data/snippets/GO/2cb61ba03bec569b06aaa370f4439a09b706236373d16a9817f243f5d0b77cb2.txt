package main                        // package declaration


import "fmt"                        // import statement for 'fmt' package

func main() {                       // main function declaration

    // Variable declaration and initialization
    var num1 int = 5                 // declaring and initializing an integer variable with value 5
    var num2 int = 10                // declaring and initializing an integer variable with value 10

    // Array declaration and initialization
    var arr [5]int                   // declaring an integer array with 5 elements
    for i := 0; i < len(arr); i++ {  // for loop to initialize array elements
        arr[i] = i * 2
    }

    // Print statements
    fmt.Println("The sum of num1 and num2 is", num1 + num2)             // prints the sum of num1 and num2
    fmt.Println("The length of the array is", len(arr))                 // prints the length of the array
    fmt.Println("The first element of the array is", arr[0])            // prints the first element of the array
    fmt.Printf("The type of num1 is %T and the type of num2 is %T\n", num1, num2)  // prints the types of num1 and num2

    // Function call
    result := add(num1, num2)         // calls the add function and stores the result in a variable

    // Conditional statement
    if result > 15 {                  // checks if the result is greater than 15
        fmt.Printf("The result is greater than 15\n")
    } else {                          // executes if the result is not greater than 15
        fmt.Printf("The result is not greater than 15\n")
    }

    // Pointer declaration and assignment
    ptr := &num1                      // declaring and assigning the address of num1 to a pointer variable

    // Dereferencing the pointer
    fmt.Println("The value at the memory address of num1 is", *ptr)     // prints the value at the memory address stored in ptr

}

func add(num1 int, num2 int) int {   // add function declaration
    return num1 + num2                // adds num1 and num2 and returns the result
}