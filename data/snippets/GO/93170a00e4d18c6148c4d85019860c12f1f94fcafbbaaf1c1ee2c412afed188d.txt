package main

import (
    "fmt"
    "math"
)

// This function returns the hypotenuse of a right triangle, given the length of the other two sides.
// It uses the Pythagorean theorem to calculate the hypotenuse.
func calculateHypotenuse(a float64, b float64) float64 {
    return math.Sqrt(math.Pow(a, 2) + math.Pow(b, 2))
}

// This function checks whether a number is prime or not.
// It uses the Sieve of Eratosthenes algorithm.
func isPrime(n int) bool {
    if n <= 1 {
        return false
    }

    // Create a boolean array of size n+1 and initialize all entries to true.
    primes := make([]bool, n+1)
    for i := 2; i <= n; i++ {
        primes[i] = true
    }

    // Mark multiples of primes as false.
    for i := 2; i*i <= n; i++ {
        if primes[i] == true {
            for j := i * i; j <= n; j += i {
                primes[j] = false
            }
        }
    }

    // If any number is still marked as true, then it is a prime number.
    return primes[n]
}

// This Main function calls the other two functions and prints the results.
func main() {
    // Calculate the hypotenuse of a right triangle with sides of length 3 and 4.
    fmt.Println("The hypotenuse is:", calculateHypotenuse(3, 4))

    // Check if 17 is a prime number.
    if isPrime(17) == true {
        fmt.Println("17 is prime")
    } else {
        fmt.Println("17 is not prime")
    }
}

// Output:
//