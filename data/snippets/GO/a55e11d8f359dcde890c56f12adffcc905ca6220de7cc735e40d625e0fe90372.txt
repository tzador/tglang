package main

// Imports the necessary packages
import (
	"fmt" // Allows for printing to the console
	"math/rand" // Allows for random number generation
	"time" // Allows for managing time
)

func main() {

	// Sets a seed for the random number generator to ensure different outputs on each run
	rand.Seed(time.Now().UnixNano())

	// Creates a slice of integers with a length of 10
	numbers := make([]int, 10)

	// Loops through the slice and assigns a random number between 1 and 100 to each element
	for i := 0; i < len(numbers); i++ {
		numbers[i] = rand.Intn(100) + 1
	}

	// Prints the slice before sorting
	fmt.Println("Before sorting:", numbers)

	// Calls the custom sort function to sort the numbers in the slice in ascending order
	customSort(numbers)

	// Prints the slice after sorting
	fmt.Println("After sorting:", numbers)

}

// Function to sort a slice of integers in ascending order
func customSort(numbers []int) {

	// Creates a variable to keep track of whether any swaps have been made
	swapped := true

	// Loops until no more swaps are needed
	for swapped {

		// Sets the swapped variable to false to start the loop
		swapped = false

		// Loops through the slice, comparing each element to the one next to it
		for i := 0; i < len(numbers)-1; i++ {

			// If the current element is larger than the next one, swap them
			if numbers[i] > numbers[i+1] {
				temp := numbers[i]
				numbers[i] = numbers[i+1]
				numbers[i+1] = temp
				swapped = true // Sets swapped to true to continue the loop
			}
		}
	}
}