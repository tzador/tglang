package main

import (
    "fmt"
    "math"
    "sync"
)

func generatePrimes(n int) []int {
    // A function that generates a list of prime numbers up to a given number n
    var primes []int
    for i := 2; i <= n; i++ {
        // Initialize a boolean flag to check if a number is prime
        prime := true
        
        // Loop through numbers from 2 to the square root of i
        for j := 2; j <= int(math.Sqrt(float64(i))); j++ {
            // If i is divisible by any number other than itself, it is not prime
            if i%j == 0 {
                prime = false
                break
            }
        }
        
        // If the flag is still true, i is prime and is added to the list
        if prime {
            primes = append(primes, i)
        }
    }
    return primes
}

func main() {
    // Generate a list of prime numbers up to 50 using the generatePrimes function
    primes := generatePrimes(50)
    
    // Print the list of primes
    fmt.Println("List of prime numbers up to 50:", primes)
    
    // Create a wait group to synchronize goroutines
    var wg sync.WaitGroup
    for i := 0; i < len(primes); i++ {
        // Add a goroutine to the wait group for each prime number in the list
        wg.Add(1)
        
        // Run a goroutine to print out the square of each prime number
        go func(n int) {
            fmt.Println("The square of", n, "is", n*n)
            
            // Mark the goroutine as done and remove it from the wait group
            wg.Done()
        }(primes[i])
    }
    // Wait for all goroutines to finish executing before exiting the main function
    wg.Wait()
}