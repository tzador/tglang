// This function computes the factorial of a given number
func factorial(n int) int {
    if n == 0 {
        return 1
    }

    return n * factorial(n-1)
}

// This function prints all prime numbers up to a given number
func printPrimes(limit int) {
    // Declaring a boolean array to act as a sieve
    prime := make([]bool, limit+1)
    // Setting all elements initially to true
    for i := 2; i <= limit; i++ {
        prime[i] = true
    }

    // Starting from the first prime number
    for p := 2; p*p <= limit; p++ {
        // If the current number is prime
        if prime[p] == true {
            // Update all multiples of the current prime number to be false
            for i := p * p; i <= limit; i += p {
                prime[i] = false
            }
        }
    }

    // Printing all prime numbers up to the given limit
    for p := 2; p <= limit; p++ {
        if prime[p] == true {
            fmt.Print(p, " ")
        }
    }
}

// Main function
func main() {
    // Inputting the number whose factorial is to be computed
    var n int
    fmt.Println("Enter a number:")
    fmt.Scanln(&n)

    // Computing the factorial of the given number
    result := factorial(n)
    fmt.Println("Factorial of", n, "is", result)

    // Printing all prime numbers up to the given limit
    printPrimes(n)
}

// Sample output:

// Enter a number:
// 10
// Factorial of 10 is 3628800
// 2 3 5 7