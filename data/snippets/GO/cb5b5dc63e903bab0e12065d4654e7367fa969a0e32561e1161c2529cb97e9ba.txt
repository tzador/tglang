package main

import (
   "fmt"
   "time"
)

// define custom struct
type Person struct {
    name string
    age int
}

// create a function with variadic parameters
func sum(numbers ...int) int {
  total := 0
  for _, num := range numbers {
    total += num
  }
  return total
}

// create a goroutine to print current time continuously
func printTime() {
  for {
    fmt.Println(time.Now())
    time.Sleep(1 * time.Second)
  }
}

// main function
func main(){

  // create a channel of type Person
  personChan := make(chan Person)

  // create a goroutine to receive data from personChan
  go func () {
    // sample data to be sent through channel
    person := Person{name: "John Doe", age: 28}

    // send data to channel
    personChan <- person
  }()

  // receive data from channel
  receivedPerson := <- personChan

  // print received data
  fmt.Println("Received Name:", receivedPerson.name)
  fmt.Println("Received Age:", receivedPerson.age)

  // call the sum function with multiple parameters
  total := sum(5, 10, 15, 20)

  // print the total
  fmt.Println("Total:", total)

  // call the goroutine to print current time continuously
  printTime()

  // main function will continue execution without waiting for goroutine to finish
}