package main

import (
	"fmt"
)

// BinarySearchTree represents a binary search tree
type BinarySearchTree struct {
	root *Node // pointer to the root node of the BST
}

// Node represents a single node in the BST
type Node struct {
	data  int         // data stored in the node
	left  *Node       // pointer to the left child node
	right *Node       // pointer to the right child node
}

// NewBST creates a new binary search tree with the given root node
func NewBST(root *Node) *BinarySearchTree {
	return &BinarySearchTree{root: root}
}

// Insert inserts a new node with the given data into the BST
func (bst *BinarySearchTree) Insert(data int) {
	if bst.root == nil { // if BST is empty
		bst.root = &Node{data: data} // create root node
	} else {
		bst.insertRecursive(data, bst.root) // insert node recursively
	}
}

// insertRecursive inserts a new node with the given data into the BST recursively
func (bst *BinarySearchTree) insertRecursive(data int, current *Node) {
	if data <= current.data { // if data is smaller than current node
		if current.left == nil { // if no left child node exists
			current.left = &Node{data: data} // insert new node
		} else {
			bst.insertRecursive(data, current.left) // move to left child node and insert recursively
		}
	} else { // if data is greater than current node
		if current.right == nil { // if no right child node exists
			current.right = &Node{data: data} // insert new node
		} else {
			bst.insertRecursive(data, current.right) // move to right child node and insert recursively
		}
	}
}

// Search searches for a node with the given data in the BST
func (bst *BinarySearchTree) Search(data int) *Node {
	return bst.searchRecursive(data, bst.root) // start search recursively from root node
}

// searchRecursive searches for a node with the given data in the BST recursively
func (bst *BinarySearchTree) searchRecursive(data int, current *Node) *Node {
	if current == nil { // if current node is nil, node does not exist in BST
		return nil
	}

	if data == current.data { // if data matches current node, return current node
		return current
	} else if data < current.data { // if data is smaller than current node
		return bst.searchRecursive(data, current.left) // search recursively in left child node
	} else { // if data is greater than current node
		return bst.searchRecursive(data, current.right) // search recursively in right child node
	}
}

func main() {
	// create a BST with root node containing data = 4
	bst := NewBST(&Node{data: 4})

	// insert nodes with data 2, 5, 1, 3, 6 into BST
	bst.Insert(2)
	bst.Insert(5)
	bst.Insert(1)
	bst.Insert(3)
	bst.Insert(6)

	// search for node with data 3 in the BST
	foundedNode := bst.Search(3)

	// print the data of the founded node
	fmt.Println(foundedNode.data) // Output: 3
}