// Define a function named "findPrimeNumbers" that takes in a positive integer "n" as its parameter
func findPrimeNumbers(n int) {
    // Create a slice of boolean values with length "n+1" and initialize all values to "true"
    numbers := make([]bool, n+1)
    for i := range numbers {
        numbers[i] = true
    }
    // Set first two values in slice to "false" as they will not be prime numbers
    numbers[0] = false
    numbers[1] = false
    // Use a for loop to iterate from 2 to the square root of "n"
    for i := 2; i*i <= n; i++ {
        // If the current number is marked as "true", loop through all its multiples and set them to "false"
        if numbers[i] {
            for j := i * i; j <= n; j += i {
                numbers[j] = false
            }
        }
    }
    // Print out all numbers that are marked as "true" in the slice, as they are prime numbers
    for i := 2; i <= n; i++ {
        if numbers[i] {
            fmt.Println(i)
        }
    }
}
// Call the function and pass in a positive integer as the argument
findPrimeNumbers(20)