// This program checks if a given number is prime or not
package main

import (
    "fmt"
    "math"
)

func main() {
    var num int // holds the input number
    fmt.Print("Enter a positive integer: ")
    fmt.Scan(&num)

    // To be prime, a number must be divisible only by 1 and itself
    // We will check for divisibility from 2 to the square root of the number
    // If any number from 2 to square root divides the number, it is not prime
    // Otherwise, it is prime

    sqrtNum := int(math.Sqrt(float64(num)))

    // Declare an array to keep track of found factors
    // Initialize all values to 0
    factors := make([]int, sqrtNum+1)

    // Loop through numbers from 2 to sqrtNum
    for i := 2; i <= sqrtNum; i++ {
        // Check if i is already marked as a factor
        if factors[i] == 0 {
            // If not, set i to be a factor of the input number
            factors[i] = 1

            // Check if i divides the input number
            if num%i == 0 {
                // If it does, the input number is not prime
                fmt.Printf("%d is not a prime number\n", num)
                // Exit the program
                return
            }

            // Mark all multiples of i as factors as well
            for j := i * i; j <= sqrtNum; j += i {
                factors[j] = 1
            }
        }
    }

    // If the program has not exited yet, the input number is prime
    fmt.Printf("%d is a prime number\n", num)
}