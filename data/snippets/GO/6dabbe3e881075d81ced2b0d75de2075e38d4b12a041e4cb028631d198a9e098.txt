// This code generates a linked list with 10 nodes and prints the values of each node.

package main

import (
	"fmt"
	"math/rand"
)

// Node represents a single node in the linked list
type Node struct {
	value int
	next  *Node
}

// LinkedList represents a linked list with a head node
type LinkedList struct {
	head *Node
}

// insertNode adds a new node at the end of the linked list
func (ll *LinkedList) insertNode(value int) {
	newNode := &Node{
		value: value,
		next:  nil,
	}

	if ll.head == nil {
		ll.head = newNode
	} else {
		current := ll.head
		for current.next != nil {
			current = current.next
		}
		current.next = newNode
	}
}

// printList prints the values of each node in the linked list
func (ll LinkedList) printList() {
	current := ll.head
	for current != nil {
		fmt.Printf("%d ", current.value)
		current = current.next
	}
	fmt.Println()
}

func main() {
	rand.Seed(42) // seed the random number generator for consistent output

	// create a linked list
	ll := LinkedList{}
	
	// insert 10 random values into the linked list
	for i := 0; i < 10; i++ {
		ll.insertNode(rand.Intn(100))
	}

	// print the values of each node in the linked list
	ll.printList()
}