package main

import "fmt"

type Graph struct { // Creates a new struct type named 'Graph' which represents a graph data structure
    Nodes []string // Declares a slice of strings to store the names of the nodes in the graph
    Edges map[string][]string // Declares a map to store the edges in the graph, with the key being the starting node and the value being a slice of strings representing the ending nodes
}

func main() {
    // Initializing a new Graph instance
    myGraph := Graph{ // Creates a new variable of type Graph and initializes it with the values inside the curly braces
        Nodes: []string{"A", "B", "C", "D"}, // Adds the names of 4 nodes to the Nodes slice
        Edges: map[string][]string{ // Initializes the Edges map with a key-value pair
            "A": []string{"B", "C"}, // Adds a key-value pair where "A" is the starting node and "B" and "C" are the ending nodes
            "B": []string{"D"}, // Adds a key-value pair where "B" is the starting node and "D" is the ending node
            "C": []string{"B"}, // Adds a key-value pair where "C" is the starting node and "B" is the ending node
            "D": []string{"C"}, // Adds a key-value pair where "D" is the starting node and "C" is the ending node
        },
    }

    // Printing out the nodes and their corresponding edges in the graph
    fmt.Println("Nodes in myGraph:", myGraph.Nodes) // Prints out the names of the nodes in the graph
    fmt.Println("Edges in myGraph:") // Prints out the statement indicating the following output is for the edges in the graph
    for node, edges := range myGraph.Edges { // Loops through each key-value pair in the Edges map, with 'node' representing the starting node and 'edges' representing the slice of ending nodes
        fmt.Printf("Node %s has edges to: %v\n", node, edges) // Prints out the starting node and the list of ending nodes for that particular node
    }
}