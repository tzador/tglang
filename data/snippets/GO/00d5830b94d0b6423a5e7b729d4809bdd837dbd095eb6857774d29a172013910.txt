package main

import (
	"fmt"
	"math/rand"
)

// main is the entry point for our GO program
func main() {
	// initialize an empty slice of integers
	var numbers []int
	// generate 10 random numbers and append them to slice
	for i := 0; i < 10; i++ {
		numbers = append(numbers, rand.Intn(100))
	}
	// print slice before sorting
	fmt.Println("Unsorted numbers:", numbers)
	// sort the slice using quicksort algorithm
	quickSort(numbers, 0, len(numbers)-1)
	// print slice after sorting
	fmt.Println("Sorted numbers:", numbers)
}

// quickSort function uses the quicksort algorithm to sort a slice of integers
// it takes the slice, the starting index and ending index as parameters
func quickSort(numbers []int, low int, high int) {
	// base case: if there is only one element or no element, return
	if low >= high {
		return
	}
	// select the pivot element, in this case, the last element
	pivot := numbers[high]
	// initialize the left and right pointers
	left := low
	right := high - 1
	// loop through while left pointer is less than or equal to the right pointer
	for left <= right {
		// find an element on the left that is greater than or equal to the pivot element
		for left <= right && numbers[left] < pivot {
			left++
		}
		// find an element on the right that is less than or equal to the pivot element
		for left <= right && numbers[right] > pivot {
			right--
		}
		// swap the two elements if the left pointer is less than or equal to the right pointer
		if left <= right {
			numbers[left], numbers[right] = numbers[right], numbers[left]
		}
	}
	// swap the pivot element to its correct position
	numbers[left], numbers[high] = numbers[high], numbers[left]
	// recursively call quickSort on the two sublists, left sublist is from low pointer to left-1, right sublist is from left+1 to high
	quickSort(numbers, low, left-1)
	quickSort(numbers, left+1, high)
}