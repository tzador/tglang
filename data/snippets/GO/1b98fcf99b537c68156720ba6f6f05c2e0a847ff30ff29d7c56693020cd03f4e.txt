package main

import (
    "fmt"
    "time"
)

func main() {
    
    // Declaring a string variable
    var hello string

    // Assigning a value to the variable
    hello = "Hello, GO!"

    // Printing a message to console
    fmt.Println(hello)

    // Declaring and initializing an integer variable
    var num int = 10
    
    // Running a for loop
    for i := 0; i < num; i++ {
        fmt.Println("Current value:", i)
    }

    // Declaring a function that returns an integer
    func add(a, b int) int {
        return a + b
    }

    // Calling the function and printing the result
    result := add(5, 8)
    fmt.Println("The result of adding 5 and 8 is:", result)

    // Declaring and initializing a slice
    names := []string{"John", "Jane", "Bob"}

    // Looping through the slice and printing each name
    for _, name := range names {
        fmt.Println("Hello,", name, "!")
    }

    // Declaring a map with string keys and integer values
    ages := map[string]int{
        "John": 20,
        "Jane": 25,
        "Bob": 30,
    }

    // Looping through the map and printing each name and age
    for name, age := range ages {
        fmt.Println(name, "is", age, "years old.")
    }

    // Using a switch statement to print a message based on current hour
    switch time.Now().Hour() {

    case 0:
        fmt.Println("It's midnight.")
    case 12:
        fmt.Println("It's noon.")
    default:
        fmt.Println("It's currently", time.Now().Hour(), "o'clock.")
    }

    // Declaring an interface type
    type Shape interface {
        // Method to calculate area
        Area() float64

        // Method to calculate perimeter
        Perimeter() float64
    }

    // Declaring a struct for a rectangle
    type Rectangle struct {
        width, height float64
    }

    // Implementing the Shape interface for Rectangle
    func (r Rectangle) Area() float64 {
        return r.width * r.height
    }

    func (r Rectangle) Perimeter() float64 {
        return 2*r.width + 2*r.height
    }

    // Declaring a struct for a circle
    type Circle struct {
        radius float64
    }

    // Implementing the Shape interface for Circle
    func (c Circle) Area() float64 {
        return math.Pi * math.Pow(c.radius, 2)
    }

    func (c Circle) Perimeter() float64 {
        return 2 * math.Pi * c.radius
    }

    // Creating instances of Rectangle and Circle
    rectangle := Rectangle{width: 5, height: 10}
    circle := Circle{radius: 7}

    // Calculating and printing the area and perimeter of each shape
    fmt.Println("The area of the rectangle is:", rectangle.Area())
    fmt.Println("The perimeter of the rectangle is:", rectangle.Perimeter())
    fmt.Println("The area of the circle is:", circle.Area())
    fmt.Println("The perimeter of the circle is:", circle.Perimeter())
}