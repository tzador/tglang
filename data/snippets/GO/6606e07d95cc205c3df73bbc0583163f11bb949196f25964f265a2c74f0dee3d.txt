// This code snippet generates a list of prime numbers up to a given number
// It uses the Sieve of Eratosthenes algorithm to efficiently find prime numbers

package main

import "fmt"

// This function returns a list of all prime numbers up to a given number
func getPrimes(n int) []int {
	// Initialize a boolean array where the index represents a number and the value indicates whether it's prime or not
	boolArr := make([]bool, n+1)
	// Assume all numbers are prime at first
	for i := 2; i <= n; i++ {
		boolArr[i] = true
	}
	// Use Sieve of Eratosthenes algorithm to mark all non-prime numbers
	for i := 2; i*i <= n; i++ {
		// If a number is marked as prime, then all its multiples are not prime
		if boolArr[i] == true {
			// Mark all multiples of i as not prime
			// Start at i^2 and increment by i each time to avoid marking multiples of smaller prime numbers
			for j := i * i; j <= n; j += i {
				boolArr[j] = false
			}
		}
	}
	// Create a list of prime numbers from the boolean array
	primes := []int{}
	for i, v := range boolArr {
		if v == true {
			primes = append(primes, i)
		}
	}
	// Return the list of prime numbers
	return primes
}

// Main function to print out the list of prime numbers
func main() {
	// Get user input for the maximum number
	var n int
	fmt.Println("Enter a number:")
	fmt.Scanln(&n)
	// Get the list of prime numbers using the getPrimes() function
	primes := getPrimes(n)
	// Print out the list of prime numbers
	fmt.Println("Prime numbers up to", n, "are:")
	for _, v := range primes {
		fmt.Println(v)
	}
}