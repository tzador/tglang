package main

import (
    "fmt"
    "math/rand"
    "time"
)

func main() {
    // Generate random seed for rand package
    rand.Seed(time.Now().UnixNano())

    // Initialize slice of strings with some random words
    words := []string{
        "apple", "banana", "cherry", "dragonfruit", "elderberry",
        "fig", "grapefruit", "honeydew", "kiwi", "lemon"}

    // Choose a random word from the slice
    chosenWord := words[rand.Intn(len(words))]

    // Convert the chosen word into a slice of letters
    wordLetters := []rune(chosenWord)

    // Create a slice of underscores with the same length as the word
    underscores := make([]rune, len(chosenWord))
    for i := range underscores {
        underscores[i] = '_'
    }

    // Keep track of the number of incorrect guesses
    incorrectGuesses := 0

    // Keep track of already guessed letters
    guessedLetters := make(map[rune]bool)

    // Loop until the player has guessed all the letters
    for {
        // Print the underscores and spaces
        fmt.Println(string(underscores))

        // Get input from the player
        var guess string
        fmt.Println("Guess a letter:")
        n, err := fmt.Scanln(&guess)
        if n != 1 {
            fmt.Println("Invalid input, try again.")
            continue
        }
        if err != nil {
            fmt.Println("Error:", err)
            continue
        }

        // Convert the input to a rune
        guessRune := []rune(guess)[0]

        // Check if the letter has already been guessed
        if guessedLetters[guessRune] {
            fmt.Println("You already guessed that letter, try again.")
            continue
        }

        // Add the letter to the guessed letters
        guessedLetters[guessRune] = true

        // Check if the letter is in the word
        var correctGuess bool
        for i := range wordLetters {
            if wordLetters[i] == guessRune {
                // Update the underscores with the correctly guessed letter
                underscores[i] = guessRune
                correctGuess = true
            }
        }

        // If the letter is not in the word, increase the incorrect guess count
        if !correctGuess {
            incorrectGuesses++
        }

        // Check if the player has guessed all the letters
        if string(underscores) == chosenWord {
            fmt.Println("You win! The word was:", chosenWord)
            break
        }

        // Check if the player has reached the maximum number of incorrect guesses
        if incorrectGuesses == 6 {
            fmt.Println("You lose! The word was:", chosenWord)
            break
        }
    }
}