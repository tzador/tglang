package main

import (
	"fmt"
	"math/rand"
	"time"
)

//This function checks if a given integer is prime
func isPrime(n int) bool {
	//1 is not a prime number
	if n == 1 {
		return false
	}
	//Checking for divisibility by numbers from 2 to the square root of n
	for i := 2; i*i <= n; i++ {
		if n%i == 0 {
			return false
		}
	}
	return true
}

//This function generates a list of n prime numbers using the Sieve of Eratosthenes
func generatePrimes(n int) []int {
	//Creating a boolean array with indices representing the numbers from 2 to n
	primeList := make([]bool, n+1)
	//Initializing the boolean array with true values
	for i := 2; i <= n; i++ {
		primeList[i] = true
	}
	//Finding prime numbers using the Sieve of Eratosthenes
	for p := 2; p*p <= n; p++ {
		//If primeList[p] is still true, p is a prime number
		if primeList[p] == true {
			//Updating all multiples of p to false, as they are not prime numbers
			for i := p * p; i <= n; i += p {
				primeList[i] = false
			}
		}
	}
	//Generating the list of prime numbers
	var primes []int
	for p := 2; p <= n; p++ {
		//If primeList[p] is true, p is a prime number
		if primeList[p] == true {
			primes = append(primes, p)
		}
	}
	return primes
}

//This function generates a random number between min and max
func generateRandomNumber(min int, max int) int {
	rand.Seed(time.Now().UnixNano())
	return rand.Intn(max-min) + min
}

func main() {
	//Generating a random number between 1 and 1000
	number := generateRandomNumber(1, 1000)
	//Checking if the number is prime
	if isPrime(number) {
		fmt.Printf("%d is a prime number.", number)
	} else {
		fmt.Printf("%d is not a prime number.", number)
	}
	//Generating a list of 100 prime numbers
	primes := generatePrimes(100)
	fmt.Println("Here are 100 prime numbers:")
	for _, prime := range primes {
		fmt.Println(prime)
	}
}