// Annotated markdown code snippet in GO

// Define a function that takes in two integers and returns their sum
func add(x, y int) int {
    return x + y
}

// Define a struct named 'Person' with two fields, 'name' and 'age'
type Person struct {
    name string
    age int
}

// Create an instance of the 'Person' struct with name "John" and age 25
p := Person{name: "John", age: 25}

// Print out the name and age of the 'Person' instance
fmt.Printf("Name: %s, Age: %d\n", p.name, p.age)

// Create a 'map' data structure with string keys and integer values
m := make(map[string]int)

// Add key-value pairs to the map
m["one"] = 1
m["two"] = 2
m["three"] = 3

// Iterate through the map and print out the key-value pairs
for key, value := range m {
    fmt.Printf("%s: %d\n", key, value)
}

// Define an interface named 'Shape' with a method called 'area' that returns a float64
type Shape interface {
    area() float64
}

// Define a 'Rectangle' struct that implements the 'Shape' interface
type Rectangle struct {
    length float64
    width float64
}

// Implement the 'area' method for the 'Rectangle' struct
func (r Rectangle) area() float64 {
    return r.length * r.width
}

// Create an instance of the 'Rectangle' struct with length 4.5 and width 2.5
r := Rectangle{length: 4.5, width: 2.5}

// Call the 'area' method on the 'Rectangle' instance and print the result
fmt.Println("Area of Rectangle:", r.area())

// Define a new function that takes in a variable number of integers and returns their average
func calculateAverage(nums ...int) float64 {
    total := 0
    for _, num := range nums {
        total += num
    }
    return float64(total) / float64(len(nums))
}

// Call the 'calculateAverage' function with five integers and print the result
fmt.Println("Average of 1, 2, 3, 4, 5:", calculateAverage(1, 2, 3, 4, 5))

// Output:
// Name: John, Age: 25
// one: 1
// two: 2
// three: 3
// Area of Rectangle: 11.25
// Average of 1, 2, 3, 4, 5: 3