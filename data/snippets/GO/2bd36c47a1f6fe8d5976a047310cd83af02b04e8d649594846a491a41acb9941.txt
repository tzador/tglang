// This creates a function named "sieve" that takes in an integer parameter
func sieve(n int) []int {
// Creates an array to store prime numbers called "primes" with a length of n
    primes := make([]int,0,n)
// Creates a boolean array to store true/false values called "isPrime" with length n+1
    isPrime := make([]bool,n+1)
// Loops through values of 2 to n and sets isPrime at that index to true
    for i:= 2; i<= n; i++ {
        isPrime[i] = true
    }
// Sets current variable to 2
    current := 2
// Loops while current squared is less than or equal to n
    for current*current <= n {
// If current is a prime number
        if isPrime[current] == true {
// Loop through values of current squared to n with a step size of current 
            for j := current*current; j <= n; j+=current {
// Set isPrime at that index to false
                isPrime[j] = false
            }
        }
// Increment current variable by one
        current++
    }
// Loop through values from 2 to n
    for i:= 2; i <= n; i++ {
// If isPrime at that index is true
        if isPrime[i] == true {
// Append that index to the primes array
            primes = append(primes, i)
        }
    }
// Return the primes array
    return primes
}