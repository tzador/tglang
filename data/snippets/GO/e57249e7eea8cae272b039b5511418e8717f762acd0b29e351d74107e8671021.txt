package main

import (
	"fmt"
)

type Node struct { // defining a struct named Node
	data  string     // struct field "name" of type string
	left  *Node      // struct field "left" of type Node pointer
	right *Node      // struct field "right" of type Node pointer
}

func Insert(root *Node, data string) *Node { // function for inserting nodes into a binary tree
	if root == nil { // if statement checks if the given node is null or not
		root = &Node{ // if null, initialize new Node with given data
			data:  data,
			left:  nil,
			right: nil,
		}
	} else if data < root.data { // if data is smaller than root, insert into the left subtree
		root.left = Insert(root.left, data) // recursive call to insert in the left subtree
	} else { // if data is greater than root, insert into the right subtree
		root.right = Insert(root.right, data) // recursive call to insert in the right subtree
	}
	return root // return the modified root node
}

func Traverse(root *Node) { // function to perform inorder traversal on a binary tree
	if root != nil { // check if root is not null
		Traverse(root.left)       // recursively traverse the left subtree
		fmt.Println(root.data)    // print the data of the root node
		Traverse(root.right)      // recursively traverse the right subtree
	}
}

func main() {
	root := &Node{ // creating root node
		data:  "A",
		left:  nil,
		right: nil,
	}
	Insert(root, "B") // inserting nodes into the binary tree
	Insert(root, "C")
	Insert(root, "D")
	Traverse(root) // calling the Traverse function to print the tree in order
}

// Output:
// A
// B
// C
// D