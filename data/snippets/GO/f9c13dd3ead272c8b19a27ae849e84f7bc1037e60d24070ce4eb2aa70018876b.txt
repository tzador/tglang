package main

import (
    "fmt"
    "math"
)

// define a type of struct that represents a circle
type Circle struct {
    x, y, radius float64
}

// define methods for the Circle type: area calculation and perimeter calculation
func (c Circle) area() float64 {
    return math.Pi * c.radius * c.radius
}

func (c Circle) perimeter() float64 {
    return 2 * math.Pi * c.radius
}

// define an interface that defines a function to calculate area and perimeter
type Geometry interface {
    area() float64
    perimeter() float64
}

// define function to calculate total area and perimeter of multiple shapes
func totalGeometryAreaAndPerimeter(geometries ...Geometry) (totalArea, totalPerimeter float64) {
    // iterate through the geometries and calculate their areas and perimeters
    for _, geometry := range geometries {
        area := geometry.area()         // call the area() method of the geometry
        perimeter := geometry.perimeter() // call the perimeter() method of the geometry

        // add the areas and perimeters together
        totalArea += area
        totalPerimeter += perimeter
    }

    return totalArea, totalPerimeter
}

func main() {
    // create a circle with radius = 5
    c1 := Circle{x: 0, y: 0, radius: 5}

    // create a circle with radius = 2.5
    c2 := Circle{x: 3, y: 4, radius: 2.5}

    // calculate the total area and perimeter of both circles using the totalGeometryAreaAndPerimeter function
    totalArea, totalPerimeter := totalGeometryAreaAndPerimeter(c1, c2)

    // output the total area and perimeter
    fmt.Println("Total area:", totalArea)
    fmt.Println("Total perimeter:", totalPerimeter)
}