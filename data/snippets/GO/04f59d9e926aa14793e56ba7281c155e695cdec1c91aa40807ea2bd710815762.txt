package main

import (
    "fmt"
    "strings"
)

func main() {

    // create map to store key-value pairs
    m := make(map[string]int)

    // add items to map
    m["one"] = 1
    m["two"] = 2
    m["three"] = 3

    // loop through map and print key-value pairs
    for k, v := range m {
        fmt.Println(k, v)
    }

    // create slice of strings
    s := []string{"Hello", "World", "How", "Are", "You"}

    // join slice elements into a single string
    fmt.Println(strings.Join(s, " "))

    // use slice to get substring
    fmt.Println(s[1:3])

    // create struct type for person
    type Person struct {
        name     string
        age      int
        location string
    }

    // create variable of type Person
    var p Person

    // set values for Person variable
    p.name = "John"
    p.age = 25
    p.location = "New York"

    // print struct fields
    fmt.Println(p.name)
    fmt.Println(p.age)
    fmt.Println(p.location)

    // create interface type
    type Animal interface {
        makeSound() string
        move() string
    }

    // create struct type for Dog
    type Dog struct {
        breed string
        age   int
    }

    // implement interface methods for Dog
    func (d Dog) makeSound() string {
        return "Bark"
    }

    func (d Dog) move() string {
        return "Run"
    }

    // create variable of type Animal
    var a Animal

    // assign Dog variable to Animal interface variable
    a = d

    // call methods on Animal variable
    fmt.Println(a.makeSound())
    fmt.Println(a.move())

    // create goroutine to print "Hello"
    go func() { fmt.Println("Hello") }()

    // wait for goroutine to execute
    time.Sleep(1 * time.Second)
}