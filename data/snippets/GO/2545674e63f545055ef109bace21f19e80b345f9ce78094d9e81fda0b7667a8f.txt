func fibonacci(n int) int { // Defining a function named 'fibonacci' with a parameter 'n' of type 'int' and returning an 'int'
    if n == 0 || n == 1 { // Checking if 'n' is equal to 0 or 1, if yes then return the value of 'n'
        return n
    } else { // If 'n' is not equal to 0 or 1, then perform the following steps
        fib := make([]int, n+1) // Creating a slice of length 'n+1' and assigning it to the variable 'fib'
        fib[0] = 0 // Assigning the value of '0' to the first index of the slice 'fib'
        fib[1] = 1 // Assigning the value of '1' to the second index of the slice 'fib'
        for i := 2; i <= n; i++ { // Starting a for loop with initial value '2' and condition 'i <= n', with increment of '1' for each iteration
            fib[i] = fib[i-1] + fib[i-2] // Assigning the value of (previous index of 'i') + (two indexes before 'i') to the current index of 'i'
        }
        return fib[n] // Returning the value of the last index of the slice 'fib', which will be the 'n'th Fibonacci number
    }
}