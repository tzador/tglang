package main

/*
A function that implements the quicksort algorithm to sort a slice of integers.
@param arr - the slice of integers to be sorted
@param left - the starting index of the slice
@param right - the ending index of the slice
*/
func quickSort(arr []int, left, right int) {

    pivot := arr[(left+right)/2] //selects the middle element as the pivot
    i, j := left, right

    for i <= j {

        for arr[i] < pivot { //moves i to the right until it finds an element greater than the pivot
            i++
        }
        for arr[j] > pivot { //moves j to the left until it finds an element lesser than the pivot
            j--
        }

        if i <= j {
            //swaps the elements at i and j indexes
            arr[i], arr[j] = arr[j], arr[i]
            i++
            j--
        }
    }

    //recursively sorts the left and right sub-slices
    if left < j {
        quickSort(arr, left, j)
    }
    if i < right {
        quickSort(arr, i, right)
    }
}

//Example usage
func main() {

    arr := []int{9, 3, 7, 1, 10}
    fmt.Println("Unsorted array: ", arr) //prints [9 3 7 1 10]
    quickSort(arr, 0, len(arr)-1)
    fmt.Println("Sorted array: ", arr) //prints [1 3 7 9 10]
}