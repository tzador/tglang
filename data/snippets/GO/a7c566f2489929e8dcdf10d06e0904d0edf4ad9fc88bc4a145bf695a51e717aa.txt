var comments = make(map[int][][]byte) //create a map to store comments, key is int and value is a 2d slice of byte

type comment struct { //define struct for comment
	UserID   int    //field for user ID of commenter
	Username string //field for username of commenter
	Content  string //field for comment content
}

func addComment(postID int, ct comment) { //function to add new comment to post, takes in post ID and comment struct as parameters
	if comments[postID] == nil { //if there are no comments on the post
		comments[postID] = [][]byte{} //create an empty 2d byte slice for the post's comments
	}
	id := len(comments[postID]) //get the index of the new comment
	commentData := []byte(fmt.Sprintf("%v: %v - %v", ct.UserID, ct.Username, ct.Content)) //create a byte slice for the comment data, using Sprintf to format the data
	comments[postID] = append(comments[postID], commentData) //add the comment data to the 2d slice
}

func getComments(postID int) [][]byte { //function to get all comments for a post, takes in post ID as parameter
	return comments[postID] //return the 2d slice of comments for the given post ID
}

func main() {
	postID := 123 //sample post ID
	comment1 := comment{ //create a comment struct
		UserID:   456,        //set user ID to 456
		Username: "JaneDoe",  //set username to JaneDoe
		Content:  "Great post" //set comment content to "Great post"
	}

	addComment(postID, comment1) //add comment1 to post 123
	allComments := getComments(postID) //get all comments for post 123

	for _, commentData := range allComments { //iterate through all comments for the post
		commentStr := string(commentData) //convert byte slice to string
		fmt.Println(commentStr) //print out the comment in string format
	}
}