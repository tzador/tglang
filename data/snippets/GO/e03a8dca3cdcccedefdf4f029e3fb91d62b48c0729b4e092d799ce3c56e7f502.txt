package main

import (
    "fmt"
    "math/rand"
    "time"
)

func main() {
    // generates a random number seed based on current time
    rand.Seed(time.Now().UTC().UnixNano())

    // creates two channels for communication between two "goroutines"
    // inputs will be sent on first channel, results will be received on second channel
    // "goroutines" are lightweight threads in GO language that can run concurrently
    inputs := make(chan []int)
    results := make(chan int)

    // anonymous function declaration
    // performs a countdown and returns a random number after the countdown
    // uses a "goroutine" to run concurrently
    // receives inputs on channel "inputs" and sends results on channel "results"
    go func(inputs chan []int, results chan int) {
        // declares a random number variable
        var randomNumber int

        // receives input array from channel "inputs"
        inputArray := <-inputs

        // performs countdown loop
        for i := len(inputArray) - 1; i >= 0; i-- {
            // prints current countdown number
            fmt.Printf("%d ", i)

            // sleeps for a random number of milliseconds between 0 and 100
            // effectively creating a countdown effect
            time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)
        }

        // assigns a random number to variable "randomNumber"
        randomNumber = rand.Intn(100)

        // sends the random number result to channel "results"
        results <- randomNumber
    }(inputs, results)

    // declares an input array
    inputArray := []int{3, 2, 1}

    // sends the input array to channel "inputs"
    inputs <- inputArray

    // receives the result from channel "results" and assigns it to variable "result"
    result := <-results

    // prints the final result
    fmt.Printf("\nThe random number generated is: %d\n", result)
}