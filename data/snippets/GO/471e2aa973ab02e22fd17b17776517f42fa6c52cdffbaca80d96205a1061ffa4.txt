package main

/**
 * Summary: A function that performs quick sort on an integer array
 * @param arr: Input integer array
 * @param low: Starting index of array
 * @param high: Ending index of array
 * @return arr: Sorted integer array
 */
func QuickSort(arr []int, low int, high int) []int {
	if low < high {
		partitionIndex := partition(arr, low, high)
		QuickSort(arr, low, partitionIndex-1)
		QuickSort(arr, partitionIndex+1, high)
	}
	return arr
}

/**
 * Summary: A helper function that partitions the array in quick sort
 * @param arr: Input integer array
 * @param low: Starting index of array
 * @param high: Ending index of array
 * @return pivotIndex: Index of pivot element in array
 */
func partition(arr []int, low int, high int) int {
	pivot := arr[high]
	smallestIndex := low - 1
	for j := low; j < high; j++ {
		if arr[j] < pivot {
			smallestIndex++
			swap(&arr[smallestIndex], &arr[j])
		}
	}
	swap(&arr[smallestIndex+1], &arr[high])
	return smallestIndex + 1
}

/**
 * Summary: A helper function that swaps two elements in an array
 * @param element1: First element to be swapped
 * @param element2: Second element to be swapped
 */
func swap(element1 *int, element2 *int) {
	temp := *element1
	*element1 = *element2
	*element2 = temp
}

// Driver code to test QuickSort function
func main() {
	arr := []int{5, 1, 4, 2, 8}
	low := 0
	high := len(arr) - 1
	QuickSort(arr, low, high)
	fmt.Println(arr) //Output: [1 2 4 5 8]
}