// Define a function to calculate the factorial of a given number using recursion
func factorial(n int) int {
	// Base case - if n is 0, return 1
	if n == 0 {
		return 1
	}
	// Recursive call to calculate factorial of n-1
	return n * factorial(n-1)
}

// Define a function to calculate the nth Fibonacci number using recursion
func fibonacci(n int) int {
	// Base case - if n is 0 or 1, return n
	if n < 2 {
		return n
	}
	// Recursive call to calculate the (n-1)th and (n-2)th Fibonacci numbers
	return fibonacci(n-1) + fibonacci(n-2)
}

// Define a struct type for a person
type Person struct {
	name    string
	age     int
	address string
}

// Define a method on the Person type to get the person's name
func (p *Person) getName() string {
	return p.name
}

// Define an interface type for a shape
type Shape interface {
	// Method to calculate the perimeter of the shape
	perimeter() float64
	// Method to calculate the area of the shape
	area() float64
}

// Define a struct type for a rectangle
type Rectangle struct {
	length float64
	width  float64
}

// Define methods for the Shape interface on the Rectangle type
func (r *Rectangle) perimeter() float64 {
	return 2 * (r.length + r.width)
}

func (r *Rectangle) area() float64 {
	return r.length * r.width
}

// Define a struct type for a circle
type Circle struct {
	radius float64
}

// Define methods for the Shape interface on the Circle type
func (c *Circle) perimeter() float64 {
	return 2 * 3.14159 * c.radius
}

func (c *Circle) area() float64 {
	return 3.14159 * c.radius * c.radius
}

// Define a slice of strings
var languages = []string{"Go", "Python", "Java", "JavaScript"}

// Define a function to print the elements of a slice backwards
func printReverse(s []string) {
	// Loop through the slice in reverse order and print each element
	for i := len(s) - 1; i >= 0; i-- {
		fmt.Println(s[i])
	}
}

// Define a map with string keys and int values
var ages = map[string]int{
	"John":   25,
	"Emily":  32,
	"Daniel": 18,
}

// Call the factorial function and print the result
fmt.Println(factorial(5))

// Call the fibonacci function and print the result
fmt.Println(fibonacci(6))

// Create a new Person and call the getName method
p := Person{"Mary", 29, "123 Main St"}
fmt.Println(p.getName())

// Create a new Rectangle and call the perimeter and area methods
r := Rectangle{7, 4.5}
fmt.Println(r.perimeter())
fmt.Println(r.area())

// Create a new Circle and call the perimeter and area methods
c := Circle{3.7}
fmt.Println(c.perimeter())
fmt.Println(c.area())

// Print the elements of the languages slice in reverse order
printReverse(languages)

// Loop through the ages map and print each key-value pair
for n, a := range ages {
	fmt.Printf("%v is %v years old.\n", n, a)
}