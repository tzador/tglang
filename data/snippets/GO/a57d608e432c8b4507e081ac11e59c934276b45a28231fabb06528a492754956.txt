package main

import (
    "fmt"
    "strings"
)

func generateArray() []int {
    // This function generates an array of integers from 1 to 10
    var arr []int
    for i := 1; i <= 10; i++ {
        arr = append(arr, i)
    }
    return arr // Returns the generated array
}

func main() {
    // Calls the generateArray function and stores the returned array
    arr := generateArray()

    fmt.Println("Original array: ", arr)

    // Map function to square each element in the array
    var squaredArr = Map(arr, func(x int) int {
        return x * x
    })

    fmt.Println("Squared array:", squaredArr)

    // Filter function to filter out odd numbers from original array
    var filteredArr = Filter(arr, func(x int) bool {
        return x%2 == 0
    })

    fmt.Println("Filtered array:", filteredArr)

    // Reduce function to get the sum of all elements in original array
    var sum = Reduce(arr, func(x, y int) int {
        return x + y
    }, 0)

    fmt.Println("Sum of all elements:", sum)
}

// Function to map a function to each element in an array
func Map(arr []int, fn func(int) int) []int {
    var mappedArr []int
    for _, val := range arr {
        mappedVal := fn(val)
        mappedArr = append(mappedArr, mappedVal)
    }
    return mappedArr
}

// Function to filter an array based on a given filter function
func Filter(arr []int, fn func(int) bool) []int {
    var filteredArr []int
    for _, val := range arr {
        if fn(val) {
            filteredArr = append(filteredArr, val)
        }
    }
    return filteredArr
}

// Function to reduce an array to a single value using a given reducer function
func Reduce(arr []int, fn func(int, int) int, initialValue int) int {
    var result = initialValue
    for _, val := range arr {
        result = fn(result, val)
    }
    return result
}