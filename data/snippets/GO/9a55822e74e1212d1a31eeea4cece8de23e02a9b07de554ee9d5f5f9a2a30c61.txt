package main
 
 import (
    "fmt"
    "time"
    "math/rand"
 )
 
 func main() {
 
    // defines a function that creates an array of random integers
    createRandIntArr := func(size int) []int {
        arr := make([]int, size)
        for i := 0; i < size; i++ {
            arr[i] = rand.Intn(100)
        }
        return arr
    }
    
    // creates an array of size 10 using the above function
    arr := createRandIntArr(10)
    
    // prints the original array
    fmt.Println("Original array:", arr)
    
    // defines a function to sort the array in ascending order using bubble sort
    bubbleSort := func (arr []int) {
        n := len(arr)
        for i := 0; i < n-1; i++ {
            for j := 0; j < n-i-1; j++ {
                if arr[j] > arr[j+1] {
                    // swapping values using a temporary variable
                    temp := arr[j]
                    arr[j] = arr[j+1]
                    arr[j+1] = temp
                }
            }
        }
    }
    
    // calls the sorting function on the array
    bubbleSort(arr)
    
    // prints the sorted array
    fmt.Println("Sorted array:", arr)
    
    // defines a function to check if a number is prime
    isPrime := func(num int) bool {
        if num < 2 {
            return false
        }
        for i := 2; i < num; i++ {
            if num%i == 0 {
                return false
            }
        }
        return true
    }
    
    // prints whether each element in the array is a prime number or not
    for _, num := range arr {
        if isPrime(num) {
            fmt.Printf("%d is a prime number\n", num)
        } else {
            fmt.Printf("%d is not a prime number\n", num)
        }
    }
    
    // defines a channel to send and receive messages from a goroutine
    c := make(chan string)
    
    // defines a function that executes a go routine sending a message to the channel
    sendMessage := func() {
        // sleeps for a random amount of time before sending the message
        time.Sleep(time.Duration(rand.Intn(10)) * time.Second)
        c <- "Hello from goroutine!"
    }
    
    // starts the go routine
    go sendMessage()
    
    // receives and prints the message from the channel
    msg := <-c
    fmt.Println("Received message from goroutine:", msg)
    
}