// This code snippet uses the "encoding/gob" package in GO to encode and decode a struct

package main

import (
    "encoding/gob"
    "fmt"
    "bytes"
)

type Person struct {
    Name string
    Age int
    Gender string
}

func main() {
    // creating a new Person struct instance
    person := Person{Name: "John", Age: 25, Gender: "Male"}

    // creating a buffer to hold the encoded data
    var buffer bytes.Buffer

    // creating a new encoder with the buffer
    encoder := gob.NewEncoder(&buffer)

    // encoding the Person struct and checking for any errors
    err := encoder.Encode(person)
    if err != nil {
        fmt.Println("Error encoding:", err)
    }

    // creating a new decoder with the buffer
    decoder := gob.NewDecoder(&buffer)

    // creating an empty Person struct to hold the decoded data
    var decodedPerson Person

    // decoding the data and checking for any errors
    err = decoder.Decode(&decodedPerson)
    if err != nil {
        fmt.Println("Error decoding:", err)
    }

    // printing the decoded data
    fmt.Println("Name:", decodedPerson.Name)
    fmt.Println("Age:", decodedPerson.Age)
    fmt.Println("Gender:", decodedPerson.Gender)
}