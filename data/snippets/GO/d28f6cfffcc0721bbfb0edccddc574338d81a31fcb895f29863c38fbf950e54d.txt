package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// function to generate a random list of numbers
func generateRandomList(n int) []int {
	list := make([]int, n)
	for i := 0; i < n; i++ {
		list[i] = rand.Intn(n)
	}
	return list
}

// function to sort the list using quicksort algorithm
func quickSort(list []int) {
	if len(list) < 2 {
		return
	}
	pivot := list[0]
	left, right := 0, len(list)-1
	for i := 1; i <= right; {
		if list[i] < pivot {
			list[left], list[i] = list[i], list[left]
			left++
			i++
		} else {
			list[right], list[i] = list[i], list[right]
			right--
		}
	}
	quickSort(list[:left])
	quickSort(list[left+1:])
	return
}

// function to merge two sorted lists
func merge(left, right []int) []int {
	size, i, j := len(left)+len(right), 0, 0
	slice := make([]int, size, size)
	for k := 0; k < size; k++ {
		if i > len(left)-1 && j <= len(right)-1 {
			slice[k] = right[j]
			j++
		} else if j > len(right)-1 && i <= len(left)-1 {
			slice[k] = left[i]
			i++
		} else if left[i] < right[j] {
			slice[k] = left[i]
			i++
		} else {
			slice[k] = right[j]
			j++
		}
	}
	return slice
}

// function to perform parallel quicksort
// using goroutines and waitgroups
func parallelQuickSort(list []int) {
	if len(list) < 2 {
		return
	}
	pivot := list[0]
	left, right := 0, len(list)-1
	for i := 1; i <= right; {
		if list[i] < pivot {
			list[left], list[i] = list[i], list[left]
			left++
			i++
		} else {
			list[right], list[i] = list[i], list[right]
			right--
		}
	}
	var wg sync.WaitGroup
	wg.Add(2)
	go func() {
		defer wg.Done()
		parallelQuickSort(list[:left])
	}()
	go func() {
		defer wg.Done()
		parallelQuickSort(list[left+1:])
	}()
	wg.Wait()
	return
}

func main() {
	// generate a list of random numbers
	list := generateRandomList(10)
	fmt.Println("Unsorted list:", list)

	// sort the list using sequential quicksort
	quickSort(list)
	fmt.Println("Sequentially sorted list:", list)

	// generate a list of random numbers again
	secondList := generateRandomList(10)
	fmt.Println("Unsorted list:", secondList)

	// sort the list using parallel quicksort
	parallelQuickSort(secondList)
	fmt.Println("Parallel sorted list:", secondList)
}