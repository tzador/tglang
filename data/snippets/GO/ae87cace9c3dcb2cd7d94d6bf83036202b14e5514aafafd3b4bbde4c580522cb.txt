func mergeSort(arr []int, low int, high int) {
	if low < high {
		mid := low + (high-low)/2 // finding the middle index of the array
		mergeSort(arr, low, mid)  // recursively calling mergeSort on the first half
		mergeSort(arr, mid+1, high)       // recursively calling mergeSort on the second half
		merge(arr, low, mid, high) // merging the two sorted halves of the array
	}
}

func merge(arr []int, low int, mid int, high int) {
	// creating temporary arrays to store the left and right halves
	left := make([]int, mid-low+1)
	right := make([]int, high-mid)

	// copying elements to the temporary arrays
	for i := 0; i < len(left); i++ {
		left[i] = arr[low+i]
	}
	for j := 0; j < len(right); j++ {
		right[j] = arr[mid+1+j]
	}

	// merging the two temporary arrays
	i := 0 // index for left array
	j := 0 // index for right array
	k := low // index for merged array

	// comparing elements from left and right arrays and adding them to the merged array in sorted order
	for i < len(left) && j < len(right) {
		if left[i] <= right[j] { // if the element in left array is smaller, add it to the merged array
			arr[k] = left[i]
			i++
		} else { // if the element in right array is smaller, add it to the merged array
			arr[k] = right[j]
			j++
		}
		k++
	}

	// copying remaining elements from left array to the merged array
	for i < len(left) {
		arr[k] = left[i]
		i++
		k++
	}

	// copying remaining elements from right array to the merged array
	for j < len(right) {
		arr[k] = right[j]
		j++
		k++
	}
}