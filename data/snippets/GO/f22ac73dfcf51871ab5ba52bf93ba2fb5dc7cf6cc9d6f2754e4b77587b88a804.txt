package main

import (
    "fmt" 
    "time"
)

func main() {
    // Defining a slice and map
    var slice = []string{"apple", "banana", "orange"}
    var myMap = map[string]int{"apple": 5, "banana": 3, "orange": 2}

    // Looping through slice and map
    for _, fruit := range slice {
        fmt.Println("The fruit is", fruit)
    }

    for fruit, quantity := range myMap {
        fmt.Printf("There are %v %s(s) in the map\n", quantity, fruit)
    }

    // Printing the current time and date
    currentTime := time.Now()
    fmt.Println("The current time is", currentTime.Format("01/02/2006 15:04:05"))
    
    // Declaring a channel
    myChannel := make(chan string)

    // Running a goroutine to send a message to the channel
    go func() {
        myChannel <- "This is a message from a goroutine!"
    }()

    // Receiving message from the channel
    msg := <-myChannel
    fmt.Println("The goroutine message is:", msg)
    
    // Closing the channel
    close(myChannel)
    
    // Declaring a function that returns an integer
    func add(x, y int) int {
    	return x + y
    }
    
    // Calling the function and printing the result
    sum := add(5, 10)
    fmt.Println("The sum of 5 and 10 is:", sum)
    
    // Declaring a struct
    type Person struct {
    	Name string
    	Age int
    }
    
    // Initializing a new person
    var john Person
    john.Name = "John"
    john.Age = 25
    
    // Printing the information about the person
    fmt.Printf("The person's name is %s and their age is %d\n", john.Name, john.Age)
    
    // Declaring a pointer to the person
    var johnPointer *Person = &john
    
    // Accessing the fields of the person using the pointer
    fmt.Println("The person's name is", johnPointer.Name, "and their age is", johnPointer.Age)
    
    // Declaring a defer statement
    defer fmt.Println("This will be printed after the next line")
    
    fmt.Println("This will be printed before the previous line")
    
    // Declaring a panic statement
    panic("This is a panic!")
}