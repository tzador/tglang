// This is a function that takes in two arrays and returns their symmetric difference
func symmetricDifference(arr1 []int, arr2 []int) []int {
    // First, combine both arrays into one using the append() function
    combinedArr := append(arr1, arr2...)
    // Use a map to track the occurrences of each element in the combined array
    occurrences := make(map[int]int)
    for _, num := range combinedArr {
        occurrences[num]++
    }
    // Create an empty array to store the elements that have an odd number of occurrences
    result := []int{}
    // Loop through the map and add elements with an odd number of occurrences to the result array
    for key, value := range occurrences {
        if value%2 == 1 {
            result = append(result, key)
        }
    }
    // Finally, return the sorted result array using the sort function from the standard library
    sort.Ints(result)
    return result
}

// Example usage:
// arr1 := []int{1, 2, 3, 4}
// arr2 := []int{2, 3, 4, 5}
// fmt.Println(symmetricDifference(arr1, arr2))
// Output: [1, 5]