// This code implements a quicksort algorithm to sort an array of integers
func quicksort(arr []int, low int, high int) {
	if low < high {
		pivot := partition(arr, low, high)

		// Separately sort elements before and after pivot
		quicksort(arr, low, pivot-1)
		quicksort(arr, pivot+1, high)
	}
}

func partition(arr []int, low int, high int) int {
	// select pivot element (last element in this case)
	pivot := arr[high]

	// index of smaller element
	i := low - 1

	for j := low; j < high; j++ {
		// if current element is smaller than or equal to pivot
		if arr[j] <= pivot {
			// increment index of smaller element
			i++
			// swap arr[i] and arr[j]
			temp := arr[i]
			arr[i] = arr[j]
			arr[j] = temp
		}
	}
	// swap arr[i + 1] and arr[high]
	temp := arr[i+1]
	arr[i+1] = arr[high]
	arr[high] = temp

	// return index of pivot element
	return i + 1
}

// sample array to be sorted
arr := []int{3, 7, 1, 9, 5, 4}

// call quicksort function
quicksort(arr, 0, len(arr)-1)

// print sorted array
fmt.Println("Sorted array:", arr)

// Output: `quicksort(arr, 0, len(arr)-1)`
// Output: `fmt.Println("Sorted array:", arr)`