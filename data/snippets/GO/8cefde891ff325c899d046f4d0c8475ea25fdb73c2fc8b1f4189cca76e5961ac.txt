// This code snippet demonstrates how to perform a binary search in GO language
package main

import (
	"fmt"
	"sort"
)

// binarySearch takes in a sorted array and a target value
// and returns the index of the target in the array
func binarySearch(arr []int, target int) int {
	// Initialize starting and ending indexes
	start, end := 0, len(arr)-1

	// Loop until starting index is less than or equal to ending index
	for start <= end {
		// Calculate the middle index
		mid := (start + end) / 2

		// If the target is at the middle index, return it
		if arr[mid] == target {
			return mid
		}

		// If the target is less than the middle element,
		// search in the left half of the array
		if target < arr[mid] {
			end = mid - 1
		} else { // Otherwise, search in the right half of the array
			start = mid + 1
		}
	}

	// If target is not found, return -1
	return -1
}

// main function
func main() {
	// Initialize a sorted array
	arr := []int{1, 5, 8, 12, 17}

	// Sort the array using the sort package
	sort.Ints(arr)

	// Initialize a target value
	target := 12

	// Perform a binary search on the array
	index := binarySearch(arr, target)

	// Print the index of the target value in the array
	fmt.Println("Index of", target, "in the array is:", index)
}