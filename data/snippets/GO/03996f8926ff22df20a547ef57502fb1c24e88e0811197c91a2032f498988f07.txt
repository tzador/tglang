// This is a comment
func mergeSort(list []int) []int { // Function to perform Merge Sort on an integer slice
    if len(list) <= 1 { // Check if the slice is already sorted
        return list // Return the sorted slice as it is
    }
    mid := len(list) / 2 // Find the middle index of the slice
    left := mergeSort(list[:mid]) // Recursively perform Merge Sort on the left half of the slice
    right := mergeSort(list[mid:]) // Recursively perform Merge Sort on the right half of the slice
    return merge(left, right) // Call the 'merge' function to merge the two sorted halves and return the final sorted slice
}

func merge(left, right []int) []int { // Function to merge two sorted integer slices
    merged := make([]int, 0) // Create an empty slice for the merged result
    for len(left) > 0 || len(right) > 0 { // Loop until either of the slices is empty
        if len(left) == 0 { // Check if the left slice is empty
            return append(merged, right...) // Append the remaining elements of the right slice to the merged slice and return it
        } else if len(right) == 0 { // Check if the right slice is empty
            return append(merged, left...) // Append the remaining elements of the left slice to the merged slice and return it
        } else if left[0] < right[0] { // Compare the first elements of both slices and append the smaller one to the merged slice
            merged = append(merged, left[0]) // Append the smaller element to the merged slice
            left = left[1:] // Remove the appended element from the left slice
        } else {
            merged = append(merged, right[0]) // Append the smaller element to the merged slice
            right = right[1:] // Remove the appended element from the right slice
        }
    }
    return merged // Return the final merged and sorted slice
}

func main() { // Main function to test the Merge Sort algorithm
    list := []int{7, 2, 1, 6, 8, 5, 3, 4} // Create a random slice of integers to be sorted
    fmt.Println("Original List: ", list) // Print the original list
    sortedList := mergeSort(list) // Call the 'mergeSort' function to sort the list
    fmt.Println("Sorted List: ", sortedList) // Print the sorted list
}