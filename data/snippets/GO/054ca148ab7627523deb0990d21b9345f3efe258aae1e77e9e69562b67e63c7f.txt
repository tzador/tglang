// Declare a function named "merge" that takes in two slices
func merge(sliceOne []int, sliceTwo []int) []int {
    
    // Check if either of the slices are empty
    if len(sliceOne) == 0 {
        return sliceTwo
    }
    if len(sliceTwo) == 0 {
        return sliceOne
    }
    
    // Create a new slice of the sum of the lengths of both slices
    var mergedSlice = make([]int, len(sliceOne) + len(sliceTwo))
    
    // Set two indices, one for each slice, to keep track of position
    var s1, s2 = 0, 0
    
    // Loop through the new slice and compare elements from both slices
    for i := 0; i < len(mergedSlice); i++ {
        
        // If the current element from slice one is smaller, add it to the new slice
        if sliceOne[s1] < sliceTwo[s2] {
            mergedSlice[i] = sliceOne[s1]
            s1++
            
            // If the end of slice one is reached, add the remaining elements from slice two
            if s1 == len(sliceOne) {
                copy(mergedSlice[i+1:], sliceTwo[s2:])
                break
            }
        } else {
            
            // If the current element from slice two is smaller, add it to the new slice
            mergedSlice[i] = sliceTwo[s2]
            s2++
            
            // If the end of slice two is reached, add the remaining elements from slice one
            if s2 == len(sliceTwo) {
                copy(mergedSlice[i+1:], sliceOne[s1:])
                break
            }
        }
    }
    
    // Return the new merged slice
    return mergedSlice
}

// Call the function with two example slices and print the result
sliceOne := []int{1, 3, 5, 7, 9}
sliceTwo := []int{2, 4, 6, 8, 10}
fmt.Println(merge(sliceOne, sliceTwo))

// Output:
// [1 2 3 4 5 6 7 8 9 10]