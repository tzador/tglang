//This function calculates the factorial of a given number.
/* Input: An integer number.
Output: Factorial of the given number. */
func factorial(n int) int {
    if n < 0 {
        return -1
    } else if n == 0 {
        return 1
    } else {
        return n * factorial(n-1)
    }
}

//This function calculates the square root of a given number using Newton's method.
/* Input: A float number.
Output: Square root of the given number. */
func sqrt(x float64) float64 {
    if x < 0 {
        return -1
    }

    var z float64 = 1.0
    var sqrt float64 = 0.0
    for i := 0; i < 10; i++ {
        sqrt = x / z
        z = (sqrt + z) / 2
    }

    return z
}

//This function performs binary search on a sorted array.
/* Input: A sorted array of integers and a search key.
Output: Index of the search key if found, -1 if not found. */
func binarySearch(arr []int, key int) int {
    low := 0
    high := len(arr) - 1
    for low <= high {
        mid := (low + high) / 2
        if arr[mid] < key {
            low = mid + 1
        } else if arr[mid] > key {
            high = mid - 1
        } else {
            return mid
        }
    }
    return -1
}

//This function calculates the nth number in the Fibonacci sequence.
/* Input: An integer, n.
Output: The nth number in the Fibonacci sequence. */
func fibonacci(n int) int {
    if n <= 1 {
        return n
    }
    return fibonacci(n-1) + fibonacci(n-2)
}

//Example of how to use the above functions:
func main() {
    //Calculate the factorial of 5
    fmt.Println(factorial(5))

    //Calculate the square root of 25
    fmt.Println(sqrt(25))

    //Perform binary search on a sorted array
    arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
    fmt.Println(binarySearch(arr, 8))

    //Calculate the 10th number in the Fibonacci sequence
    fmt.Println(fibonacci(10))
}