// This code snippet implements a graph data structure using adjacency list representation
// It also includes functions for DFS traversal and finding the shortest path between two nodes

// `Node` represents a single node in the graph, with an ID and a list of neighboring nodes
type Node struct {
    id string
    neighbors []*Node
}

// `Graph` represents the entire graph, with a map of nodes and a count of total nodes
type Graph struct {
    nodes map[string]*Node
    count int
}

// `AddNode` adds a new node to the graph
func (g *Graph) AddNode(id string) {
    newNode := Node{id: id}
    g.nodes[id] = &newNode
    g.count++
}

// `AddEdge` adds an edge between two nodes in the graph
func (g *Graph) AddEdge(source string, destination string) {
    sourceNode := g.nodes[source]
    destinationNode := g.nodes[destination]
    sourceNode.neighbors = append(sourceNode.neighbors, destinationNode)
    destinationNode.neighbors = append(destinationNode.neighbors, sourceNode)
}

// `DFS` performs a depth-first search traversal of the graph, starting from the given node
func DFS(node *Node) {
    visited := map[string]bool{node.id: true}
    stack := []*Node{node}
    for len(stack) > 0 {
        current := stack[len(stack)-1]
        stack = stack[:len(stack)-1]
        for _, neighbor := range current.neighbors {
            if !visited[neighbor.id] {
                visited[neighbor.id] = true
                stack = append(stack, neighbor)
            }
        }
    }
}

// `ShortestPath` finds the shortest path between two nodes in the graph using BFS
func ShortestPath(source string, destination string) int {
    queue := []string{source}
    visited := map[string]bool{source: true}
    pathCount := map[string]int{source: 0}
    for len(queue) != 0 {
        current := queue[0]
        queue = queue[1:]
        if current == destination {
            return pathCount[current]
        }
        for _, neighbor := range g.nodes[current].neighbors {
            if !visited[neighbor.id] {
                visited[neighbor.id] = true
                queue = append(queue, neighbor.id)
                pathCount[neighbor.id] = pathCount[current] + 1
            }
        }
    }
    return -1
}