// This code snippet generates all permutations of a given string
package main

import (
	"fmt"
	"strings"
)

// function to calculate factorial
func factorial(n int) int {
	if n == 1 {
		return 1
	}
	return n * factorial(n-1)
}

// function to generate permutations recursively
func generatePermutations(prefix string, suffix string) []string {
	// base case
	if suffix == "" {
		return []string{prefix}
	}

	// recursive case
	perms := []string{}
	for i := 0; i < len(suffix); i++ {
		p := generatePermutations(prefix+string(suffix[i]), suffix[:i]+suffix[i+1:])
		perms = append(perms, p...)
	}
	return perms
}

func main() {
	// input string
	s := "abc"

	// calculate the number of permutations
	num := factorial(len(s))

	// generate permutations
	perms := generatePermutations("", s)

	// print all permutations
	fmt.Println("All permutations of", s, ":")
	for i := 0; i < num; i++ {
		fmt.Println(perms[i])
	}
}