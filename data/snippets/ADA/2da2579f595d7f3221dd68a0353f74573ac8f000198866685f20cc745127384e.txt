-- A complex example of a package in ADA

-- This package contains a function that calculates the nth Fibonacci number
package Fibonacci is

   -- Declare a private constant to store the maximum number of iterations
   MAX_N : constant Integer := 100;

   -- Declare an array to store the calculated Fibonacci numbers
   FIB_ARRAY : array(0..MAX_N) of Integer;

   -- Declare a private procedure to initialize the FIB_ARRAY
   procedure Initialize is
   begin
      -- Set the first two values of the array to 0 and 1 (base cases of Fibonacci sequence)
      FIB_ARRAY(0) := 0;
      FIB_ARRAY(1) := 1;

      -- Loop from index 2 to MAX_N and calculate and store the Fibonacci numbers in the array
      for I in 2..MAX_N loop
         FIB_ARRAY(I) := FIB_ARRAY(I-1) + FIB_ARRAY(I-2);
      end loop;
   end Initialize;

   -- Declare a function to calculate the nth Fibonacci number
   function Calculate(N : Integer) return Integer is
   begin
      -- If N is less than 0 or greater than MAX_N, raise an exception
      if N < 0 or N > MAX_N then
         raise Constraint_Error;
      end if;

      -- If the value is already calculated, return it from the array
      if N <= MAX_N then
         return FIB_ARRAY(N);
      end if;

      -- Otherwise, recursively calculate the Fibonacci number and return it
      return Calculate(N-1) + Calculate(N-2);
   end Calculate;
 
end Fibonacci;