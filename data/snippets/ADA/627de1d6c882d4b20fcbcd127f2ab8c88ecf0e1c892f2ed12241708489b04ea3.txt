with Ada.Integer_Text_IO;                   -- Import the Integer Text Input/Output package
with Ada.Text_IO;                           -- Import the Text Input/Output package

procedure Complex_Calculation is            -- Create a procedure named "Complex_Calculation"
   Input_Integer : Integer;                 -- Declare a variable of type Integer named "Input_Integer"
   Output_Integer : Integer;                -- Declare a variable of type Integer named "Output_Integer"

   subtype First_Half is Integer range 0..5; -- Create a subtype named "First_Half" that ranges from 0 to 5
   subtype Second_Half is Integer range 6..10;-- Create a subtype named "Second_Half" that ranges from 6 to 10

   function Add (X : in Integer;             -- Create a function named "Add" that takes in an Integer as input and returns an Integer
                 Y : in Integer) return Integer is
   begin
      return X + Y;                          -- Add X and Y and return the result
   end Add;

   function Square (X : in Integer) return Integer is -- Create a function named "Square" that takes in an Integer as input and returns an Integer
   begin
      return X * X;                          -- Square X and return the result
   end Square;

begin
   Ada.Text_IO.Put_Line("Enter an integer: ");  -- Print a prompt to enter an integer
   Ada.Integer_Text_IO.Get(Input_Integer);      -- Read input integer from user and store in Input_Integer

   if Input_Integer in First_Half then          -- Check if the input integer is in the First_Half range
      Output_Integer := Add(Input_Integer, 5);  -- If so, add 5 to the input integer and store in Output_Integer
   elsif Input_Integer in Second_Half then      -- Check if the input integer is in the Second_Half range
      Output_Integer := Square(Input_Integer);  -- If so, square the input integer and store in Output_Integer
   else
      Output_Integer := Input_Integer;          -- If not in either range, just set Output_Integer to be the input integer
   end if;

   Ada.Text_IO.Put_Line("The result is: "      -- Print a message and the final result
                         & Output_Integer'Image); -- Use 'Image attribute to convert the result (type Integer) to a string

end Complex_Calculation;                       -- End of the procedure "Complex_Calculation"