-- This code snippet implements a binary search algorithm in Ada.

-- Create a generic type for the elements in the array
generic
  type Element is range <>;
  
-- Declare an array of the generic type with a maximum size
type Arr_Type is array (Integer range <>) of Element;
 
-- Define a function that performs a binary search
function Binary_Search (Arr : in Arr_Type; Key : in Element) return Boolean is
    Mid : Integer;
begin
    -- Initialize the lower and upper bounds of the array
    Low := Arr'First;
    High := Arr'Last;
    
    -- Loop until the lower and upper bounds converge
    while Low <= High loop
        -- Calculate the midpoint of the array
        Mid := (Low + High) / 2;
        
        -- Check if the midpoint value is equal to the key
        if Arr(Mid) = Key then
            return True;
        
        -- If the key is less than the midpoint value, update the upper bound
        elsif Key < Arr(Mid) then
            High := Mid - 1;
        
        -- If the key is greater than the midpoint value, update the lower bound
        else
            Low := Mid + 1;
        end if;
    end loop;
    
    -- If the loop ends, the key is not present in the array
    return False;
end Binary_Search;

-- Create a test array with integer elements
Arr_Int : Arr_Type := (1, 3, 4, 6, 8, 10, 12);

-- Call the Binary_Search function to check if an element exists in the array
Found : Boolean := Binary_Search(Arr_Int, 6);

-- If the element is found, print a message
if Found then
    Put_Line("The array contains the element");
else
    Put_Line("The array does not contain the element");
end if;