--- --+Get all possible paths in a directed graph procedure 

Get_All_Paths(In_Graph : in Graph_Type; Start_Node : in Node_Type) is
    Path : Node_List;
    All_Paths : Node_Array;
    Visited : Node_Array;
    Index : Natural;
    procedure Visit(Node : in Node_Type) is
        Successors : Node_List;
        S : Node_Type;
        procedure Explore(Succ : in Node_Type) is
            --generate all possible paths
            Visited(Index) := Succ;
            Index := Index + 1;
            Path(Index) := Succ;
            if Succ /= Start_Node and then Graph.Edge(Start_Node, Succ) = Null then
        		Get_All_Paths.Next(Graph_Rep, Start_Node).Map(Explore);
    		end if;
    		if Succ /= Start_Node and then Graph.Edge(S, Node) = Null then
        		Visited(Index) := Null;
        		Index := Index - 1;
    		end if;
    	end Explore;
    begin
        Successors := Graph_Rep.Successors(Node);
        Get_All_Paths.Next(Graph_Rep, Start_Node).Map(Explore);
    end Visit;
begin
    All_Paths := Null;
    Index := 0;
    Visited := Null;
    Path := Null;
    Index := 0;
    Get_All_Paths.Visit(Start_Node);
end Get_All_Paths;
---