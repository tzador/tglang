-- This code snippet demonstrates how to use a generic package to create a binary search tree

generic
  type Element is private; -- Generic type for elements in the tree

  with function "<" (Left, Right : Element) return Boolean is <>; -- Generic function to compare elements

package Binary_Search_Tree is

  -- Definition of a node in the tree
  type Node;
  type Node_Ptr is access Node;
  type Node is record
    Value : Element; -- The value held in the node
    Left, Right : Node_Ptr; -- Pointers to the left and right child nodes
  end record;

  -- Type for representing a tree
  type Tree is private;
  type Tree_Ptr is access Tree;
  type Tree is record
    Root : Node_Ptr; -- Pointer to the root node of the tree
  end record;

  -- Function to create an empty tree
  function Create_Tree return Tree;

  -- Function to insert a new element into the tree
  procedure Insert (New_Item : in Element; T : in out Tree);

  -- Function to search for an element in the tree
  function Search (Item : in Element; T : in Tree) return Boolean;

private

  -- Internal function to recursively insert a new element
  procedure Insert_Recur (New_Item : in Element; Current : in out Node_Ptr);

  -- Internal function to recursively search for an element
  function Search_Recur (Item : in Element; Current : in Node_Ptr) return Boolean;

end Binary_Search_Tree;

package body Binary_Search_Tree is

  function Create_Tree return Tree is
    Result : Tree_Ptr := new Tree;
  begin
    return Tree'(Root => null);
  end Create_Tree;

  procedure Insert (New_Item : in Element; T : in out Tree) is
  begin
    if T.Root = null then -- If tree is empty, create a new root node
      T.Root := new Node'(Value => New_Item, Left => null, Right => null);
    else -- Otherwise, recursively insert the new element into the tree
      Insert_Recur (New_Item, T.Root);
    end if;
  end Insert;

  function Search (Item : in Element; T : in Tree) return Boolean is
  begin
    if T.Root = null then -- If tree is empty, item does not exist
      return False;
    else -- Otherwise, recursively search for the item in the tree
      return Search_Recur (Item, T.Root);
    end if;
  end Search;

  procedure Insert_Recur (New_Item : in Element; Current : in out Node_Ptr) is
  begin
    if New_Item < Current.Value then -- If new element is less than current node, insert on the left
      if Current.Left = null then
        Current.Left := new Node'(Value => New_Item, Left => null, Right => null);
      else
        Insert_Recur (New_Item, Current.Left);
      end if;
    else -- Otherwise, insert on the right
      if Current.Right = null then
        Current.Right := new Node'(Value => New_Item, Left => null, Right => null);
      else
        Insert_Recur (New_Item, Current.Right);
      end if;
    end if;
  end Insert_Recur;

  function Search_Recur (Item : in Element; Current : in Node_Ptr) return Boolean is
  begin
    if Item = Current.Value then -- If item is found, return True
      return True;
    elsif Item < Current.Value and Current.Left /= null then -- If item is less than current node, search on the left
      return Search_Recur (Item, Current.Left);
    elsif Item > Current.Value and Current.Right /= null then -- If item is greater than current node, search on the right
      return Search_Recur (Item, Current.Right);
    else -- Otherwise, item does not exist
      return False;
    end if;
  end Search_Recur;

end Binary_Search_Tree;