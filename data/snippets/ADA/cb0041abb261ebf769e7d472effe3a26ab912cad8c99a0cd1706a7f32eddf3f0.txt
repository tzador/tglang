-- Generates a list of prime numbers using the Sieve of Eratosthenes method

procedure Generate_Primes is
    type Prime_List is array (Positive range <>) of Positive;
    Primes : Prime_List (1 .. 100); -- Initialize a list of 100 elements
    Primes_Count : Integer := 0; -- Keeps track of the number of primes in the list

    -- Initialize the list with values from 2 to 100
    for i in 2 .. 100 loop
        Primes(i) := i;
    end loop;

    -- Loop through all numbers from 2 to 100
    for i in 2 .. 100 loop
        -- If the current number is still in the list (not crossed out), it is a prime
        if Primes(i) > 1 then
            -- Increase the Primes_Count and print the current prime
            Primes_Count := Primes_Count + 1;
            Put_Line(Primes(i)'Image); -- Prints the prime as an integer

            -- Cross out all multiples of the current prime in the list
            for j in 2 .. 100 loop
                if j * Primes(i) <= 100 then -- Make sure the multiple is within the list range
                    Primes(j * Primes(i)) := 0; -- Set the multiple to 0 to indicate it is not a prime
                else
                    exit; -- Exit the loop when the multiple exceeds the list range
                end if;
            end loop;
        end if;
    end loop;

    -- Print the total number of primes generated
    Put_Line("Total number of primes: " & Integer'Image(Primes_Count));
end Generate_Primes;