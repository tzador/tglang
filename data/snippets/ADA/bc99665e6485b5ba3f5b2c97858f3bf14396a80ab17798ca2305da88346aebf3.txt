with Ada.Text_IO; use Ada.Text_IO;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;

procedure Dynamic_String is

	Maximum_Length : constant := 50;

	type My_String is limited private;
	type My_String_Access is access all My_String;

	type My_String is limited
		record
			Str : String (1 .. Maximum_Length);
		end record;

	procedure Output (Item : in out My_String);

	type My_String is limited private;
	type My_String_Access is access all My_String;

	type My_String is limited private;
	type My_String_Access is access all My_String;

	procedure Output (Item : in out My_String) is
		Length : Natural;

		Result : My_String_Access := new My_String;

	begin
		Put_Line (to_string (Item));

		Result := Item.To_Unbounded_String & " Appendage";

		Length := Length (to_string (Result));

		Put_Line ("Final Length: " & Length'Image);

		for Char in Result'Range loop
			Put_Line ("Character: " & Character'Image (Char));
		end loop;
	end Output;

	Sample_String : My_String := (Str => "This is a test string");
	begin
		Output (Sample_String);
	end Dynamic_String;