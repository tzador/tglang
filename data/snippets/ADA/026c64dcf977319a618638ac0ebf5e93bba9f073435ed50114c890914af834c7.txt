procedure Quick_Sort(A : in out My_Array) is
    -- Implementation of Quick Sort algorithm in Ada
    -- Input is a generic array
    -- Output is the sorted array in ascending order
    -- Time Complexity: O(n*log(n))
    pivot : Integer;      -- Pivot value for partition
    left, right : Integer := A'First;   -- Initialize left and right indices
    procedure Swap(a, b : Integer) is    -- Procedure for swapping two elements
        temp : Integer := A(a);
    begin
        A(a) := A(b);
        A(b) := temp;
    end Swap;
begin
    if A'Length > 1 then    -- Check if array contains more than one element
        pivot := A(A'First);            -- Set pivot value to first element
        while left <= right loop         -- Loop until left and right indices cross each other
            while A(left) < pivot loop   -- Find element on left that is greater than pivot
                left := left + 1;
            end loop;
            while A(right) > pivot loop  -- Find element on right that is less than pivot
                right := right - 1;
            end loop;
            if left <= right then         -- If left and right indices haven't crossed, swap elements
                Swap(left, right);
                left := left + 1;         -- Increment left index
                right := right - 1;       -- Decrement right index
            end if;
        end loop;
        Quick_Sort(A(A'First..right));    -- Apply quick sort on left sub-array
        Quick_Sort(A(left..A'Last));      -- Apply quick sort on right sub-array
    end if;
end Quick_Sort;