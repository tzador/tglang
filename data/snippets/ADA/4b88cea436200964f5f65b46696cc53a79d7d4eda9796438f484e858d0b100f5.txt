-- This is an example of a generic package in Ada
generic
    type Element_Type is private; -- Generic type parameter
    type Container_Type is private; -- Generic type parameter
    Max_Size : Integer; -- Generic constant parameter
package Generic_Package is
    -- Private types and variables
    type Node is private; -- Private type used in implementing the package
    type List is private; -- Private type used in implementing the package
    Last : Integer; -- Private variable to keep track of last element in list
    Size : Integer; -- Private variable to keep track of size of list
    -- Public subprograms
    procedure Add (List : in out List; Elem : in Element_Type); -- Adds an element to the list
    procedure Remove (List : in out List; Elem : in Element_Type); -- Removes an element from the list
    function Contains (List : in List; Elem : in Element_Type) return Boolean; -- Checks if list contains an element
    function Is_Empty (List : in List) return Boolean; -- Checks if list is empty
    function Get_Size (List : in List) return Integer; -- Returns the size of the list
private
    type Node is record
        Data : Element_Type; -- Data stored in the node
        Next : access Node; -- Pointer to the next node in the list
    end record;
    type List is record
        Head : access Node; -- Pointer to the first node in the list
        Tail : access Node; -- Pointer to the last node in the list
    end record;
end Generic_Package;