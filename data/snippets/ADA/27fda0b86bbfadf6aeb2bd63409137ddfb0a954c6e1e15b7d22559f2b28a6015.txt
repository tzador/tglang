-- Declaration of package
package Example is
    -- Constant value of type Integer
    constant MAX_VALUE : Integer := 100;
    
    -- Subtype declaration
    subtype Positive_Number is Integer range 1..MAX_VALUE;
    
    -- Array of type Positive_Number with 10 elements
    array_of_numbers : array (1..10) of Positive_Number;
    
    -- Record type declaration with five fields
    type Person_Record is record
        Name : String(1..30);
        Age : Natural range 1..MAX_VALUE;
        Height : Float range 0.0..MAX_VALUE;
        Gender : Character := 'M' | 'F';
        Occupation : String(1..50);
    end record;
    
    -- Procedure that calculates the average height from an array of Person_Records
    procedure calculate_average_height(records : in array_of_records : Person_Record; average_height : out Float) is
        total_height : Float := 0.0;
    begin
        for i in records'range loop
            total_height := total_height + records(i).Height;
        end loop;
        average_height := total_height / records'length;
    end calculate_average_height;
    
    -- Generic package with two generic parameters
    generic
        type Item_Type is (<>);
        with function Item_Name (item : in Item_Type) return String;
    package Generic_Package is
        type List is private;

        procedure Add_Item (list : in out List; item : in Item_Type);
        function Remove_Item (list : in out List; item : in Item_Type) return Boolean;
        function Get_Size (list : in List) return Integer;
    private
        type List is array (Positive_Number range <>) of Item_Type;  -- Private array type
    end Generic_Package;
end Example;