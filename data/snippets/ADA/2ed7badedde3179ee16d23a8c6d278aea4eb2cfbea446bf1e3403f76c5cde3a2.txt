-- This code snippet is used to implement binary search

-- Set a type for storing values at different positions in an array
type Array is array(Integer range <>) of Integer;

-- Recursive binary search function
function Binary_Search(Arr : in out Array; L, R, Key : Integer) return Integer is
begin
   if R >= L then
      -- Find the middle point
        Mid := L + (R - L)/2;

        -- If element is present at the middle itself
        if Arr(Mid) = Key  then 
            return Mid;
        
        -- If element is smaller than middle, then it can only be present in left subarray
        if Arr(Mid) > Key then 
            return Binary_Search(Arr, L, Mid - 1, Key);
        
        -- Else the element can only be present in right subarray
        return Binary_Search(Arr, Mid + 1, R, Key);
   end if;

   -- Element is not present in the array
   return -1;
end Binary_Search;

-- Main program
procedure Main is
    -- Initialize an array with values
    Arr : Array(1..10) := (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

    -- Set the key to search for
    Key : Integer := 6;
    
    -- Call the binary search function
    Result : Integer := Binary_Search(Arr, 1, 10, Key);
begin
    -- Print the index of the key or -1 if not found
    Put_Line("Index of " & Key & " is " & Result'Image);
end Main;

-- Output: Index of 6 is 5