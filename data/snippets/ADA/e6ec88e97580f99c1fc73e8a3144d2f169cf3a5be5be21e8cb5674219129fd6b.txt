procedure Merge_Sort (A : in out Integer_Array ; N : in Positive) is -- Procedure to perform merge sort on an array of integers
   type Data_Array is array (Positive range <>) of Integer ; -- Create a custom data type for arrays of integers
   function Binary_Search (Data : in Data_Array ; Item : in Integer ; Count : in Positive) return Boolean is -- Function to search for a specific integer using binary search
      Low : Positive := Data'First ; -- Set the lower bound of the array
      High : Positive := Data'Last ; -- Set the upper bound of the array
      Mid : Positive ; -- Initialize a variable for the middle index
   begin
      while Low <= High loop -- Repeat until the lower bound is greater than the upper bound
         Mid := (Low + High) / 2 ; -- Calculate the middle index using integer division
         if Data (Mid) = Item then -- Check if the middle element is equal to the item
            return True ;
         elsif Data (Mid) < Item then -- Check if the middle element is less than the item
            Low := Mid + 1 ;
         else -- The middle element must be greater than the item
            High := Mid - 1 ;
         end if ;
      end loop ;
      return False ;
   end Binary_Search ;
begin

   -- Check if the array is already sorted
   for i in A'First + 1 .. A'Last loop -- Loop through the array
      if A (i - 1) > A (i) then -- Check if the current element is smaller than the previous element
         goto Merge ; -- If the array is not already sorted, go to the merge step
      end if ;
   end loop ;

   return ; -- If the array is already sorted, no need to perform merge sort

   <<Merge>> -- Label for the merge step

   declare
      N1 : Positive := N / 2 ; -- Calculate the size of the first subarray
      N2 : Positive := N - N1 ; -- Calculate the size of the second subarray
      A1 : constant Data_Array (1 .. N1) := A (A'First .. A'First + N1 - 1) ; -- Create a subarray of the first half
      A2 : constant Data_Array (1 .. N2) := A (A'First + N1 .. A'Last) ; -- Create a subarray of the second half
      B : Data_Array (1 .. N) ; -- Create a new array to store the sorted elements
      i : Positive := 1 ; -- Initialize a counter for the first subarray
      j : Positive := 1 ; -- Initialize a counter for the second subarray
      k : Positive := 1 ; -- Initialize a counter for the sorted array
   begin
      while i <= N1 and j <= N2 loop -- Repeat until one of the subarrays is fully traversed
         if A1 (i) <= A2 (j) then -- Compare the first elements of the subarrays and copy the smaller one to the sorted array
            B (k) := A1 (i) ;
            i := i + 1 ;
         else
            B (k) := A2 (j) ;
            j := j + 1 ;
         end if ;
         k := k + 1 ;
      end loop ;

      if i > N1 then -- If the first subarray is fully traversed, copy the remaining elements of the second subarray to the sorted array
         for l in j .. N2 loop
            B (k) := A2 (l) ;
            k := k + 1 ;
         end loop ;
      else -- If the second subarray is fully traversed, copy the remaining elements of the first subarray to the sorted array
         for l in i .. N1 loop
            B (k) := A1 (l) ;
            k := k + 1 ;
         end loop ;
      end if ;

      A := B ; -- Replace the original array with the sorted array

      -- Check if the array is already sorted
      for i in A'First + 1 .. A'Last loop
         if A (i - 1) > A (i) then
            goto Merge ;
         end if ;
      end loop ;
   end ; -- End of procedure Merge_Sort
end Merge_Sort ; -- End of program