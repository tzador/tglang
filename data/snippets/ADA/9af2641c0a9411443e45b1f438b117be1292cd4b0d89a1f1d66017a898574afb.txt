-- This is a code snippet in ADA, a high-level, statically typed programming language, commonly used in real-time and embedded systems.
-- This code snippet defines a generic package for creating a binary tree data structure.

generic
    -- Type of elements to be stored in the binary tree.
    type Element_Type is private;
    
    -- Function to compare two elements.
    with function "<"(Element1, Element2: in Element_Type) return Boolean is <>;
    
    -- Function to generate a null/bottom element.
    with function "null" return Element_Type is <>;
    
package Binary_Tree is
    
    type Node;
    
    type Ptr_To_Node is access Node;
    
    type Node is record
        Key : Element_Type;
        Left, Right : Ptr_To_Node;
    end record;
    
    -- Exception raised when attempting to retrieve from an empty tree.
    Empty_Tree : exception;
    
    -- Function to check if a tree is empty.
    function Is_Empty(Tree : Ptr_To_Node) return Boolean;
    
    -- Function to insert an element into the tree.
    procedure Insert(Tree : in out Ptr_To_Node; Element : in Element_Type);
    
    -- Function to delete an element from the tree.
    procedure Delete(Tree : in out Ptr_To_Node; Element : in Element_Type);
    
    -- Function to retrieve the minimum element in the tree.
    function Minimum(Tree : Ptr_To_Node) return Element_Type;
    
    -- Function to retrieve the maximum element in the tree
    function Maximum(Tree : Ptr_To_Node) return Element_Type;
    
    -- Function to retrieve the successor of a given element in the tree.
    function Successor(Tree : Ptr_To_Node; Element : in Element_Type) return Element_Type;
    
    -- Function to retrieve the predecessor of a given element in the tree.
    function Predecessor(Tree : Ptr_To_Node; Element : in Element_Type) return Element_Type;
    
    -- Function to traverse and print the tree in-order.
    procedure Print_In_Order(Tree : Ptr_To_Node);
    
    -- Function to traverse and print the tree pre-order.
    procedure Print_Pre_Order(Tree : Ptr_To_Node);
    
    -- Function to traverse and print the tree post-order.
    procedure Print_Post_Order(Tree : Ptr_To_Node);
    
end Binary_Tree;

package body Binary_Tree is

    function Is_Empty(Tree : Ptr_To_Node) return Boolean is
    begin
        return Tree = null;
    end Is_Empty;
    
    procedure Insert(Tree : in out Ptr_To_Node; Element : in Element_Type) is
    begin
        if Tree = null then
            Tree := new Node'(Key => Element, Left => null, Right => null);
        else
            if Element < Tree.Key then
                Insert(Tree.Left, Element);
            else
                Insert(Tree.Right, Element);
            end if;
        end if;
    end Insert;
    
    procedure Delete(Tree : in out Ptr_To_Node; Element : in Element_Type) is
        Temp : Ptr_To_Node;
        Child : Ptr_To_Node;
    begin
        if Tree = null then
            raise Empty_Tree;
        else
            if Element < Tree.Key then
                Delete(Tree.Left, Element);
            elsif Element > Tree.Key then
                Delete(Tree.Right, Element);
            else
                if Tree.Left = null then
                    Tree := Tree.Right;
                elsif Tree.Right = null then
                    Tree := Tree.Left;
                else
                    -- If both child nodes are present, replace the node to be deleted with its successor.
                    Temp := Tree.Right;
                    while Temp.Left /= null loop
                        Temp := Temp.Left;
                    end loop;
                    Tree.Key := Temp.Key;
                    Child := Temp.Right;
                    Temp := null;
                    Delete(Child, Element);
                end if;
            end if;
        end if;
    end Delete;
    
    function Minimum(Tree : Ptr_To_Node) return Element_Type is
    begin
        if Tree = null then
            raise Empty_Tree;
        elsif Tree.Left = null then
            return Tree.Key;
        else
            return Minimum(Tree.Left);
        end if;
    end Minimum;
    
    function Maximum(Tree : Ptr_To_Node) return Element_Type is
    begin
        if Tree = null then
            raise Empty_Tree;
        elsif Tree.Right = null then
            return Tree.Key;
        else
            return Maximum(Tree.Right);
        end if;
    end Maximum;
    
    function Successor(Tree : Ptr_To_Node; Element : in Element_Type) return Element_Type is
        Successor_Node : Ptr_To_Node;
    begin
        if Element < Tree.Key then
            Successor_Node := Tree;
            return Successor(Tree.Left, Element);
        elsif Element > Tree.Key then
            return Successor(Tree.Right, Element);
        elsif Is_Empty(Tree.Right) then
            raise Empty_Tree;
        else
            return Minimum(Tree.Right);
        end if;
    end Successor;
    
    function Predecessor(Tree : Ptr_To_Node; Element : in Element_Type) return Element_Type is
        Predecessor_Node : Ptr_To_Node;
    begin
        if Element > Tree.Key then
            Predecessor_Node := Tree;
            return Predecessor(Tree.Right, Element);
        elsif Element < Tree.Key then
            return Predecessor(Tree.Left, Element);
        elsif Is_Empty(Tree.Left) then
            raise Empty_Tree;
        else
            return Maximum(Tree.Left);
        end if;
    end Predecessor;
    
    procedure Print_In_Order(Tree : Ptr_To_Node) is
    begin
        if Tree /= null then
            Print_In_Order(Tree.Left);
            Put(Tree.Key);
            Print_In_Order(Tree.Right);
        end if;
    end Print_In_Order;
    
    procedure Print_Pre_Order(Tree : Ptr_To_Node) is
    begin
        if Tree /= null then
            Put(Tree.Key);
            Print_Pre_Order(Tree.Left);
            Print_Pre_Order(Tree.Right);
        end if;
    end Print_Pre_Order;
    
    procedure Print_Post_Order(Tree : Ptr_To_Node) is
    begin
        if Tree /= null then
            Print_Post_Order(Tree.Left);
            Print_Post_Order(Tree.Right);
            Put(Tree.Key);
        end if;
    end Print_Post_Order;
    
end Binary_Tree;