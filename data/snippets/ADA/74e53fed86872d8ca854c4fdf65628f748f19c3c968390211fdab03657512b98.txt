with Ada.Unchecked_Deallocation; use Ada.Unchecked_Deallocation;
with Ada.Text_IO; use Ada.Text_IO;

procedure Complex_Code_Snippet is

   type Integer_Array is array (1..10) of Integer; -- creates an array of 10 integers

   type Node; -- creates a forward declaration of type Node
   type Node_Ptr is access all Node; -- creates a pointer type for type Node
   type Node is record -- creates a record type for type Node
      Value : Integer;
      Next : Node_Ptr; -- creates a field of type Node_Ptr
   end record;

   type Linked_List is access Node_Ptr; -- creates a pointer type for type Node_Ptr

   procedure Add_To_Front (List_In : in out Linked_List; Value_In : Integer) is
      New_Node : Node_Ptr := new Node; -- creates a new node on the heap
   begin
      New_Node.Value := Value_In;
      New_Node.Next := List_In.all;
      List_In := New_Node;
   end Add_To_Front;

   procedure Print_List (List_In : in Linked_List) is
      Curr_Node : Node_Ptr := List_In.all;
   begin
      while Curr_Node /= null loop
         Ada.Text_IO.Put(Curr_Node.Value & " ");
         Curr_Node := Curr_Node.Next;
      end loop;
   end Print_List;

   procedure Delete_List (List_In : in out Linked_List) is
      Curr_Node : Node_Ptr := List_In.all;
      Next_Node : Node_Ptr;
   begin
      while Curr_Node /= null loop
         Next_Node := Curr_Node.Next;
         Ada.Unchecked_Deallocation (Curr_Node);
         Curr_Node := Next_Node;
      end loop;
   end Delete_List;

   List : Linked_List := null; -- initializes a linked list pointing to null

begin
   Add_To_Front (List, 10); -- adds 10 to the front of the list
   Add_To_Front (List, 7); -- adds 7 to the front of the list
   Add_To_Front (List, 5); -- adds 5 to the front of the list
   Add_To_Front (List, 2); -- adds 2 to the front of the list
   Print_List (List); -- prints the list
   Delete_List (List); -- deletes the list from memory
end Complex_Code_Snippet;