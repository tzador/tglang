-- Linked list data structure in ADA

generic
   type Element_Type is private;

package List is
   type Node;
   type Node_Ptr is access Node;
   
   type List_Type is record
      First, Last : Node_Ptr := null;
      -- First and Last node pointers are initially set to null
   end record;
   
   function Create_Node(New_Item : in Element_Type) return Node_Ptr;
   -- creates a new node with the given item
   
   procedure Insert_Before(Current : in out Node_Ptr; Item : in Element_Type);
   -- inserts a new node with the given item before the specified node
   
   procedure Insert_After(Current : in out Node_Ptr; Item : in Element_Type);
   -- inserts a new node with the given item after the specified node
   
   procedure Free_List(List : in out List_Type);
   -- frees all the nodes in the linked list
   
private
   type Node is record
      Item : Element_Type;
      Next : Node_Ptr := null;
      -- Next node pointer is initially set to null
   end record;
   
   function Create_Node(New_Item : in Element_Type) return Node_Ptr is
   begin
      return new Node'(Item => New_Item);
      -- returns a new node with the given item
   end Create_Node;
   
   procedure Insert_Before(Current : in out Node_Ptr; Item : in Element_Type) is
      New_Node : Node_Ptr := new Node'(Item => Item);
   begin
      New_Node.Next := Current;
      Current := New_Node;
      -- inserts a new node before the specified node
   end Insert_Before;
   
   procedure Insert_After(Current : in out Node_Ptr; Item : in Element_Type) is
      New_Node : Node_Ptr := new Node'(Item => Item);
   begin
      New_Node.Next := Current.Next;
      Current.Next := New_Node;
      -- inserts a new node after the specified node
   end Insert_After;
   
   procedure Free_List(List : in out List_Type) is
      Temp : Node_Ptr := List.First;
   begin
      while Temp /= null loop
         List.First := Temp.Next;
         free(Temp);
         Temp := List.First;
      end loop;
      -- frees all the nodes in the linked list
   end Free_List;
end List;