-- Implementation of a doubly linked list in Ada.

-- Define the node record that will hold our data and the pointers
-- to the previous and next nodes.
type Node is record
  Data : Integer;
  Prev : access Node;
  Next : access Node;
end record;

-- Define the head and tail pointers as global variables.
Head : access Node := null;
Tail : access Node := null;

-- Procedure for adding a new node to the head of the list.
procedure Add_To_Head (New_Node : access Node) is
begin
  -- If the list is empty, set the head and tail pointers to the new node.
  if Head = null then
    Head := New_Node;
    Tail := New_Node;
  
  -- If the list is not empty, make the new node the head and update the pointers.
  else
    New_Node.Next := Head;
    Head.Prev := New_Node;
    Head := New_Node;
  end if;
end Add_To_Head;

-- Procedure for adding a new node to the tail of the list.
procedure Add_To_Tail (New_Node : access Node) is
begin
  -- If the list is empty, set the head and tail pointers to the new node.
  if Tail = null then
    Head := New_Node;
    Tail := New_Node;
  
  -- If the list is not empty, make the new node the tail and update the pointers.
  else
    Tail.Next := New_Node;
    New_Node.Prev := Tail;
    Tail := New_Node;
  end if;
end Add_To_Tail;

-- Procedure for removing a node from the list.
procedure Remove_Node (Node_To_Remove : access Node) is
begin
  -- Update the pointers of the nodes before and after the node to be removed.
  if Node_To_Remove.Prev /= null then
    Node_To_Remove.Prev.Next := Node_To_Remove.Next;
  end if;
  
  if Node_To_Remove.Next /= null then
    Node_To_Remove.Next.Prev := Node_To_Remove.Prev;
  end if;
  
  -- If the node to be removed is the head or tail, update the appropriate pointers.
  if Node_To_Remove = Head then
    Head := Node_To_Remove.Next;
  end if;
  
  if Node_To_Remove = Tail then
    Tail := Node_To_Remove.Prev;
  end if;
end Remove_Node;