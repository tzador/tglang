-- This program generates the inverse of a given matrix using partial pivoting
with Ada.Numerics.Generic_Elementary_Functions;
use Ada.Numerics.Generic_Elementary_Functions;

procedure Inverse is
   
   -- Define type for the matrix
   type Matrix is array (Integer range <>, Integer range <>) of Float;
   
   -- Define type for the indices
   subtype Index_Type is Integer range <>;
   
   -- Declare variables
   Size : Natural;
   A    : Matrix;           
   B    : Matrix;
   C    : Matrix;
   S    : Matrix;
   i, j : Index_Type;               

begin
   
   -- Initialize size of matrix
   Size := 4;
   
   -- Initialize values for matrix A
   A := ( (1.0, 2.0, 3.0, 4.0), 
         (5.0, 6.0, 7.0, 8.0), 
         (9.0, 10.0, 11.0, 12.0), 
         (13.0, 14.0, 15.0, 16.0)
       );
       
   -- Print original matrix A
   Put_Line("Original matrix A:");
   for i in 1..Size loop
      for j in 1..Size loop
         Put(A(i,j), 2);
      end loop;
      New_Line;
   end loop;  
   
   -- Initialize identity matrix B
   B := ( (1.0, 0.0, 0.0, 0.0), 
         (0.0, 1.0, 0.0, 0.0), 
         (0.0, 0.0, 1.0, 0.0), 
         (0.0, 0.0, 0.0, 1.0)
       );
   
   -- Perform Gaussian Elimination with Partial Pivoting
   for i in 1..Size-1 loop
      
      -- Find maximum element in current column
      declare
         Max_Index : Index_Type;
      begin
         Max_Index := i;
         for j in i+1..Size loop
            if abs(A(j,i)) > abs(A(Max_Index,i)) then
               Max_Index := j;
            end if;
         end loop;
         
         -- Swap rows to ensure pivot is non-zero
         declare
            Temp : Float;
         begin
            for j in i..Size loop
               Temp := A(i,j);
               A(i,j) := A(Max_Index,j);
               A(Max_Index,j) := Temp;
               
               Temp := B(i,j);
               B(i,j) := B(Max_Index,j);
               B(Max_Index,j) := Temp;
            end loop;
         end;
         
         -- Perform forward elimination
         for j in i+1..Size loop
            declare
               Multiplier : Float;
            begin
               Multiplier := A(j,i) / A(i,i);
               
               for k in i..Size loop
                  A(j,k) := A(j,k) - Multiplier*A(i,k);
                  B(j,k) := B(j,k) - Multiplier*B(i,k);
               end loop;
            end;
         end loop;
         
      end;
      
      -- Perform backward substitution
      for i in Size downto 1 loop
         for j in i-1 downto 1 loop
            declare
               Multiplier : Float;
            begin
               Multiplier := A(j,i) / A(i,i);
               
               for k in j..Size loop
                  A(j,k) := A(j,k) - Multiplier*A(i,k);
                  B(j,k) := B(j,k) - Multiplier*B(i,k);
               end loop;
            end;
         end loop;
      end loop;
      
   end loop;
   
   -- Calculate inverse matrix C
   for i in 1..Size loop
      for j in 1..Size loop
         C(i,j) := B(i,j) / A(i,i);
      end loop;
   end loop;
   
   -- Print inverse matrix C
   Put_Line("Inverse matrix C:");
   for i in 1..Size loop
      for j in 1..Size loop
         Put(C(i,j), 2);
      end loop;
      New_Line;
   end loop;
   
end Inverse;