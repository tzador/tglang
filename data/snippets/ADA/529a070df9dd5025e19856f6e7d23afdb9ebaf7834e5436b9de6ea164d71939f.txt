-- This code snippet is a function that sorts a given array
-- The function uses the quicksort algorithm
procedure Quicksort(Arr : in out Array_Type) is
   -- The low and high index of the array to be sorted
   Low, High : Integer := Arr'First, Arr'Last;
   -- The pivot element to be used for partitioning
   Pivot : Integer;
procedure Swap(A, B : in out Integer) is
   Temp : Integer := A;
begin
   A := B;
   B := Temp;
end Swap;
procedure Partition(Arr : in out Array_Type; LS : in out Integer) is
begin
   -- Set the pivot value
   Pivot := Arr((Low + High)/2);
   -- Loop through the array and partition elements
   loop
      -- Find elements on the left side that are greater than pivot
      while Arr(Low) < Pivot loop
         Low := Low + 1;
      end loop;
      -- Find elements on the right side that are less than pivot
      while Arr(High) > Pivot loop
         High := High - 1;
      end loop;
      -- Swap elements if necessary
      if Low <= High then
         Swap(Arr(Low), Arr(High));
         Low := Low + 1;
         High := High - 1;
      end if;
      -- Exit loop if pointers cross
      if Low > High then
         exit;
      end if;
   end loop;
   -- Check if there are more elements on the left side
   if Low < LS then
      Partition(Arr, LS);
   end if;
   -- Check if there are more elements on the right side
   if High > LS then
      Partition(Arr, LS);
   end if;
end Partition;
begin
   -- Check if the array has more than two elements
   if Low < High then
      Partition(Arr, High);
   end if;
end Quicksort;
-- Example array to test the function
Test_Array : Array_Type := (10, 53, 23, 4, 76, 2, 9);
-- Call the Quicksort function
Quicksort(Test_Array);
-- Output the sorted array
for i in Test_Array'Range loop
   Ada.Text_IO.Put(Test_Array(i)'Image);
end loop;