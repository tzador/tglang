-- This is a generic package that implements a doubly linked list data structure
generic
    type Element_Type is private; -- data type of the elements to be stored in the list
package Doubly_Linked_List is

    type List is private; -- type representing the list
    type Node; -- type representing a node in the list

    -- Procedure that initializes an empty list
    -- Takes in a list as a parameter and modifies it to be an empty list
    procedure Init_List(L: out List);

    -- Procedure that inserts an element at the beginning of the list
    -- Takes in a list and an element as parameters and inserts the element at the beginning of the list
    procedure Prepend(L: in out List; New_Item: in Element_Type);

    -- Procedure that inserts an element at the end of the list
    -- Takes in a list and an element as parameters and inserts the element at the end of the list
    procedure Append(L: in out List; New_Item: in Element_Type);

    -- Procedure that inserts an element after a specified node in the list
    -- Takes in a list, an element and a node as parameters and inserts the element after the specified node in the list
    procedure Insert_After(L: in out List; New_Item: in Element_Type; After_Node: in Node);

    -- Procedure that deletes the first element of the list
    -- Takes in a list as a parameter and deletes the first element from the list
    procedure Delete_First(L: in out List);

    -- Procedure that deletes the last element of the list
    -- Takes in a list as a parameter and deletes the last element from the list
    procedure Delete_Last(L: in out List);

    -- Procedure that deletes the element after a specified node in the list
    -- Takes in a list and a node as parameters and deletes the element after the specified node in the list
    procedure Delete_After(L: in out List; After_Node: in Node);

    -- Function that checks if the list is empty
    -- Takes in a list as a parameter and returns a boolean value indicating whether the list is empty or not
    function Is_Empty(L: in List) return Boolean;

    -- Function that returns the number of elements in the list
    -- Takes in a list as a parameter and returns an integer indicating the number of elements in the list
    function Size(L: in List) return Integer;

    private

    -- Type representing a node in the list
    type Node is
        record
            Element: Element_Type; -- data stored in the node
            Previous: access Node; -- link to previous node in the list
            Next: access Node; -- link to next node in the list
        end record;

    type List is
        record
            First: access Node; -- pointer to the first node of the list
            Last: access Node; -- pointer to the last node of the list
            Count: Integer; -- number of nodes in the list
        end record;

end Doubly_Linked_List;

package body Doubly_Linked_List is

    -- Implementation of procedures and functions declared in the package specification goes here

end Doubly_Linked_List;