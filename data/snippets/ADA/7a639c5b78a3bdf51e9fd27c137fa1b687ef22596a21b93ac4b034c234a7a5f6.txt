-- This code snippet is an example of a linked list implementation in ADA 

-- Define a record type to represent a node in the list
-- It has two fields: value and next 
type Node is record
  value: Integer;
  next: access Node;
end record;

-- Define a type for the head of the list
-- It is a pointer to the first node
type List is access Node;

-- Function to insert a new node at the beginning of the list
procedure Insert_New_Node (L: in out List; new_value: Integer) is
  -- Create a new node and set its value
  New_Node: List := new Node;
  New_Node.value := new_value;
  -- Set the next pointer of the new node to the current head of the list
  New_Node.next := L;
  -- Make the new node the new head of the list
  L := New_Node;
end Insert_New_Node;

-- Function to remove a specific node from the list
procedure Remove_Node (L: in out List; node_value: Integer) is
  Prev: List := L;
  Curr: List := L;
begin
  while Curr /= null and then Curr.value /= node_value loop
    Prev := Curr;
    Curr := Curr.next;
  end loop;
  -- If the node is found, remove it by connecting the previous node's next pointer to the next node
  if Curr /= null and then Curr.value = node_value then
    Prev.next := Curr.next;
  end if;
end Remove_Node;

-- Function to print out the contents of the list
procedure Print_List (L: List) is
  Curr: List := L;
begin
  -- Loop through the list and print out the value of each node
  while Curr /= null loop
    Put_Line('Node value: ' & Curr.value'Image);
    Curr := Curr.next;
  end loop;
end Print_List;

-- Example usage
procedure Main is
  -- Initialize an empty list
  My_List: List := null;
begin
  -- Insert some values into the list
  Insert_New_Node(My_List, 1);
  Insert_New_Node(My_List, 5);
  Insert_New_Node(My_List, 10);
  -- Print out the initial contents of the list
  Print_List(My_List); -- Output: Node value: 10, Node value: 5, Node value: 1
  -- Remove a node from the list
  Remove_Node(My_List, 5);
  -- Print out the updated contents of the list
  Print_List(My_List); -- Output: Node value: 10, Node value: 1
end Main;