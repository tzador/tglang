--This is a code snippet in ADA--
with Ada.Text_IO;               --importing the ada text input/output module--

procedure Complex_Code is       --defining a procedure called Complex_Code--
begin
   Ada.Text_IO.Put_Line("This is a complex code snippet for demonstration purposes.");  --printing a string to the console--
   
   --declaring and initializing variables--
   var1 : integer := 5; 
   var2 : float := 3.14; 
   var3 : string := "ada";
   
   --performing complex operations--
   for i in 1..var1 loop  
      var2 := var2 + i;
   end loop;
   
   var3 := var3 & " " & "programming language";
   
   --printing out the results--
   Ada.Text_IO.Put_Line("The final value of var2 is " & var2'Image & ";");   --using 'Image attribute to convert float to string--
   Ada.Text_IO.Put_Line("And the final string is: " & var3 & ".");           --concatenating strings--
   
   --nested if-else statement--
   if var1 < var2 then
      Ada.Text_IO.Put_Line("var1 is less than var2.");
   else 
      if var1 > var2 then 
         Ada.Text_IO.Put_Line("var1 is greater than var2.");
      else 
         Ada.Text_IO.Put_Line("var1 is equal to var2.");
      end if;
   end if;
   
   --while loop--
   while var1 > 0 loop 
      Ada.Text_IO.Put_Line("var1 is " & var1'Image & "."); 
      var1 := var1 - 1;
   end loop;
   
   --using an array--
   declare
      type int_array is array (1..5) of integer; 
      nums : int_array := (1, 2, 3, 4, 5);
   begin 
      Ada.Text_IO.Put_Line("The elements of the array are:"); 
      for i in nums'range loop 
         Ada.Text_IO.Put_Line(nums(i)'Image);
      end loop;
   end;
   
   Ada.Text_IO.Put_Line("This concludes the demonstration of the complex code snippet.");
end Complex_Code;