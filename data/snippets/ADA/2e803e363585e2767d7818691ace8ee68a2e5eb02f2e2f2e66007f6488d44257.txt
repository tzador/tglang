-- This code snippet is an implementation of a binary search tree 
-- using the ADA programming language.
-- The tree will be represented as follows:
-- type node represents a single node in the tree
type Node is
    key  : Integer;
    left : access node;
    right : access node;

-- type tree represents the entire binary search tree
type Tree is access Node;

-- add_node procedure adds a new node to the tree
-- It takes in the value to be inserted and the root node of the tree as parameters
procedure add_node(tree : in out Tree; val : in Integer) is
    -- If the tree is empty, create a new node with the value and make it the root
    if tree = null then
        tree := new Node'(key => val, left => null, right => null);
    else
        -- If the value is less than the current node's key, add it to the left subtree
        if val < tree.key then
            add_node(tree.left, val);
        -- If the value is greater than the current node's key, add it to the right subtree
        elsif val > tree.key then
            add_node(tree.right, val);
        -- If the value is already present in the tree, do nothing
        else
            null;
        end if;
    end if;
end add_node;

-- search_node function searches for a node with a given value in the tree
-- It takes in the root node of the tree and the value to be searched for as parameters
function search_node(tree : Tree; val : Integer) return access Node is
    current : access Node := tree;
    found : Boolean := False;
begin
    -- While the current node is not null and the value has not been found
    while current /= null and not found loop
        -- If the value is less than the current node's key, search in the left subtree
        if val < current.key then
            current := current.left;
        -- If the value is greater than the current node's key, search in the right subtree
        elsif val > current.key then
            current := current.right;
        -- If the value is equal to the current node's key, set found to True
        else
            found := True;
        end if;
    end loop;
    return current;
end search_node;