-- This code implements a recursive selection sort algorithm
procedure Recursive_Selection_Sort is
  type Index_Type is range 1 .. Max_N;
  type Array_Type is array (Index_Type) of Integer;
  
  -- Function to find the smallest element in the given array
  function Find_Min (A : in Array_Type; First_Index : in Index_Type) 
    return Integer is
    Min_Value : Integer := A (First_Index);
    Min_Index : Index_Type := First_Index;
  begin
    for i in First_Index + 1 .. A'Last loop
      if A (i) < Min_Value then
        Min_Value := A (i);
        Min_Index := i;
      end if;
    end loop;
    
    return Min_Index;
  end Find_Min;
  
  -- Function to swap two elements in the given array
  procedure Swap (A : in out Array_Type; Index_1, Index_2 : in Index_Type) is
    Temp : Integer := A (Index_1);
  begin
    A (Index_1) := A (Index_2);
    A (Index_2) := Temp;
  end Swap;
  
  -- Procedure to recursively apply selection sort to the given array
  procedure Recursive_Sort (A : in out Array_Type; First_Index : in Index_Type) is
    Min_Index : Index_Type;
  begin
    if First_Index < A'Last then        -- Base Case: Array is not fully sorted
      Min_Index := Find_Min (A, First_Index);
      Swap (A, First_Index, Min_Index);
      Recursive_Sort (A, First_Index + 1);  -- Recursively sort the remaining unsorted array
    end if;
  end Recursive_Sort;
begin  -- Main program
  Ada.Text_IO.Put_Line ("Enter the number of elements in the array:");
  declare
    N : Index_Type;
  begin
    Ada.Text_IO.Get (N);
    
    Ada.Text_IO.Put_Line ("Enter the array elements:");
    declare
      Arr : Array_Type (1 .. N);
    begin
      for i in 1 .. N loop
        Ada.Text_IO.Get (Arr (i));
      end loop;
    
      Recursive_Sort (Arr, 1);
    
      Ada.Text_IO.Put_Line ("Sorted array:");
      for i in 1 .. N loop
        Ada.Text_IO.Put (Arr (i) & "  ");
      end loop;
    end;
  end;
end Recursive_Selection_Sort;