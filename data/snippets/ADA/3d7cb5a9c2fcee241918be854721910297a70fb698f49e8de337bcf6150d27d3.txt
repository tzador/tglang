-- Package Specification of a complex stack data structure
-- with a generic type for variable data representation.

generic
   MAX_SIZE : Integer; -- maximum size of the stack

package Complex_Stack is

   type Complex_Stack is private;

   -- Exception to be raised when the stack is full
   Stack_Full_Exception : exception;

   -- Exception to be raised when the stack is empty
   Stack_Empty_Exception : exception;

   -- Procedure to push an element onto the stack
   procedure Push (S : in out Complex_Stack; Data : in some_type) 
     with Pre => S.Length < MAX_SIZE, 
          Post => S.Length = S.Length'Old + 1;

   -- Function to pop an element off the stack and return its value
   function Pop (S : in out Complex_Stack) return some_type 
     with Pre => S.Length > 0, 
          Post => S.Length = S.Length'Old - 1;

   -- Function to check if the stack is empty
   function Is_Empty (S : in Complex_Stack) return Boolean;

   -- Function to check if the stack is full
   function Is_Full (S : in Complex_Stack) return Boolean;

private
   type Node;
   
   type Complex_Stack is record
      Top : Node := null; -- Pointer to the top of the stack
      Length : Integer := 0; -- Number of elements in the stack
   end record;

   type Node is record
      Data : some_type;
      Next : Node := null; -- Pointer to the next node
   end record;

end Complex_Stack;