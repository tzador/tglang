-- Integer stack implementation using arrays
with Ada.Text_IO; use Ada.Text_IO;

procedure Integer_Stack is
   
   type Stack is record
      Data : array (1..100) of Integer := (others => 0);
      Top : Integer := 0; 
   end record;
   
   procedure Push (S : in out Stack; Item : Integer) is
   begin
      if S.Top = S.Data'Length then
         Put_Line ("Stack overflow");
      else
         S.Top := S.Top + 1;
         S.Data(S.Top) := Item;
      end if;
   end Push;
   
   procedure Pop (S : in out Stack; Item : out Integer) is
   begin
      if S.Top = 0 then
         Put_Line ("Stack underflow");
      else
         Item := S.Data(S.Top);
         S.Top := S.Top - 1;
      end if;
   end Pop;
   
   function Peek (S : Stack) return Integer is
   begin
      if S.Top = 0 then
         Put_Line ("Stack empty");
         return 0;
      else
         return S.Data(S.Top);
      end if;
   end Peek;
   
   S : Stack; -- declaring a stack
   
begin
   Push (S, 10);
   Push (S, 5);
   Put_Line ("Top item in stack is " & Integer'Image(Peek(S))); -- output: Top item in stack is 5
   Pop (S, Item);
   Put_Line ("Removed item from stack is " & Integer'Image(Item)); -- output: Removed item from stack is 5
end Integer_Stack;