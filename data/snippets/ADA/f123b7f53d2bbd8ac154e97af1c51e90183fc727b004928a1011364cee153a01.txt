procedure Merge_Sort (A : in out Array_Type; L, R : Integer) is
   -- This procedure sorts the element in array A between indices L and R using the merge sort algorithm.
   
   Mid : Integer  
   -- Mid represents the middle index of the array A
   
   begin
      if L < R then
         Mid := (L+R)/2;
         
         -- Recursively call Merge_Sort on the left and right subarrays
         Merge_Sort(A, L, Mid);
         Merge_Sort(A, Mid+1, R);
         
         Merge(A, L, Mid, R);  -- Merge the sorted subarrays
      end if;
   end Merge_Sort;
   
   procedure Merge(A : in out Array_Type; L, Mid, R : Integer) is
   -- This procedure merges two sorted subarrays (A[L..Mid] and A[Mid+1..R]) into a single sorted subarray
   
   Temp : Integer_Array(A'First..A'Last) := (others => 0) 
   -- Temporary array to store the merged elements
   i, j, k : Integer := L;  -- i and j point to the start of the first and second subarrays, k is for iterating through Temp array
   
   begin
      while i <= Mid and j <= R loop
         if A(i) <= A(j) then
            Temp(k) := A(i);
            i := i+1;
         else
            Temp(k) := A(j);
            j := j+1;
         end if;
         k := k+1;
      end loop;
      
      -- Copy the remaining elements from first subarray to Temp, if any
      while i <= Mid loop
         Temp(k) := A(i); 
         i := i+1;
         k := k+1;
      end loop;
      
      -- Copy the remaining elements from second subarray to Temp, if any
      while j <= R loop
         Temp(k) := A(j);
         j := j+1;
         k := k+1;
      end loop;
      
      -- Copy the sorted elements from Temp array to original array A
      for n in L..R loop
         A(n) := Temp(n);
      end loop;
   end Merge;