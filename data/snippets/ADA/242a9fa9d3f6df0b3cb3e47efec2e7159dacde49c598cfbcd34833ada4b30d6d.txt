with Ada.Text_IO; --Importing package for input/output
with Ada.Integer_Text_IO; --Importing package for integer input/output
procedure Complex_Code is --Start of procedure
use Ada.Text_IO; --Using Ada.Text_IO package
use Ada.Integer_Text_IO; --Using Ada.Integer_Text_IO package

type Complex_Number is --Defining a new type for complex numbers
   record --Start of record
      Real : Float; --Real part of complex number
      Imag : Float; --Imaginary part of complex number
   end record; --End of record
   
   procedure Display_Complex(N : Complex_Number) is --Procedure to display complex number
   begin
      put("(",N.Real, ", ", N.Imag, ")"); --Prints complex number in the format (a, b) for visual representation
   end Display_Complex;
   
   procedure Add(A : Complex_Number := (0.0, 0.0); B : Complex_Number := (0.0, 0.0)) return Complex_Number is --Procedure to add two complex numbers, with default values of 0 if no input is provided
      C : Complex_Number; --Variable to store result
      
   begin
      C.Real := A.Real + B.Real; --Calculating real part
      C.Imag := A.Imag + B.Imag; --Calculating imaginary part
      return C; --Returning result
   end Add;
   
   procedure Multiply(A : Complex_Number := (0.0, 0.0); B : Complex_Number := (0.0, 0.0)) return Complex_Number is --Procedure to multiply two complex numbers, with default values of 0 if no input is provided
      C : Complex_Number; --Variable to store result
      
   begin
      C.Real := A.Real*B.Real - A.Imag*B.Imag; --Calculating real part
      C.Imag := A.Real*B.Imag + A.Imag*B.Real; --Calculating imaginary part
      return C; --Returning result
   end Multiply;

   procedure Square(N : Complex_Number) is --Procedure to square a complex number
      C : Complex_Number; --Variable to store result
   begin
      C := Multiply(N, N); --Using Multiply procedure to square the complex number
      Display_Complex(C); --Displaying the result
   end Square;

begin
   Put("Enter a complex number in the format (a, b): "); --Prompting user for input
   Get(Real, Imag); --Taking input for real and imaginary part
   declare
      Number : Complex_Number := (Real, Imag); --Declaring and initializing a complex number
   begin
      Put("Your complex number is: "); --Printing message
      Display_Complex(Number); --Calling Display_Complex procedure to display the input complex number
      Put("Squared number is: "); --Printing message
      Square(Number); --Calling Square procedure to square the input complex number
      Put("Enter another complex number in the format (a, b): "); --Prompting user for input
      Get(Real, Imag); --Taking input for real and imaginary part
      declare
         Number2 : Complex_Number := (Real, Imag); --Declaring and initializing another complex number
      begin
         Put("Your second complex number is: "); --Printing message
         Display_Complex(Number); --Calling Display_Complex procedure to display the input complex number
         Put("Sum of both complex numbers is: "); --Printing message
         Display_Complex(Add(Number, Number2)); --Calling Add procedure to add both complex numbers and displaying the result
      end;
   end;
end Complex_Code; --End of procedure