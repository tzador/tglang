procedure merge_Sort(A : in out Vector) is

   procedure swap(Item_1 : in out Integer; Item_2 : in out Integer) is
      Temp : Integer;
   begin
      Temp := Item_1;
      Item_1 := Item_2;
      Item_2 := Temp;
   end swap;
 
   procedure mergesort_array(Low : Integer; High : Integer) is
      Mid : Integer;
      
   begin
      if Low < High then
         Mid := (Low + High)/2;
         mergesort_array(Low, Mid);
         mergesort_array(Mid + 1, High);
         merge_arrays(Low, Mid, High);
      end if;
   end mergesort_array; 
   
   procedure merge_arrays(Low : Integer; Mid : Integer; High : Integer) is
      Temp : Vector(1..Maxitems);
      Index_1, Index_2, Index_3 : Integer := Low;
      
   begin
      Index_1 := Low;
      Index_2 := Mid + 1;
      Index_3 := Low;
      
      while(Index_1 <= Mid and Index_2 <= High) loop
         if A(Index_1) < A(Index_2) then
            Temp(Index_3) := A(Index_1);
            Inc(Index_1);
         else
            Temp(Index_3) := A(Index_2);
            Inc(Index_2);
         end if;
         Inc(Index_3);
      end loop;
      
      while(Index_1 <= Mid) loop
         Temp(Index_3) := A(Index_1);
         Inc(Index_1);
         Inc(Index_3);
      end loop;
      
      while(Index_2 <= High) loop
         Temp(Index_3) := A(Index_2);
         Inc(Index_2);
         Inc(Index_3);
      end loop;
      
      for I in Low..High loop
         A(I) := Temp(I);
      end loop;
   end merge_arrays;

begin
   mergesort_array(1, A'length);
end merge_Sort;