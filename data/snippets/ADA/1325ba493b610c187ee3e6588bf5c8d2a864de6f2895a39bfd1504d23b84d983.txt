-- This is a code snippet in ADA that will perform sorting using the quicksort algorithm

-- Function to swap two elements in an array
procedure Swap(A : in out Data_Arrays.Integer_Array; I, J : in Data_Arrays.Index) is
    Temp : Data_Arrays.Integer_Array (A'Range);
begin
    Temp(A'First .. A'Last) := A(A'First .. A'Last); -- Make a copy of the array
    A(I) := A(J);
    A(J) := Temp(I);
end Swap;

-- Function to partition the array and return the pivot index
function Partition(A : Data_Arrays.Integer_Array; L : in Data_Arrays.Index; R : in Data_Arrays.Index) return Data_Arrays.Index is
    Pivot : Data_Arrays.Integer := A(R); -- Choose the rightmost element as pivot
    I : Data_Arrays.Index := L - 1; -- Initialize the partition index
begin
    for J in L .. R - 1 loop
        -- If current element is smaller than pivot, increment the partition index and swap the elements
        if A(J) < Pivot then
            I := I + 1;
            Swap(A, I, J);
        end if;
    end loop;
    -- Place the pivot element at the correct position, i.e. after all the smaller elements
    Swap(A, I + 1, R);
    return I + 1;
end Partition;

-- Function to perform quicksort on the array
procedure QuickSort(A : in out Data_Arrays.Integer_Array; L, R : Data_Arrays.Index) is
    P : Data_Arrays.Index; -- Stores the pivot index
begin
    if L < R then
        P := Partition(A, L, R); -- Partition the array
        QuickSort(A, L, P - 1); -- Sort the subarray before pivot recursively
        QuickSort(A, P + 1, R); -- Sort the subarray after pivot recursively
    end if;
end QuickSort;

-- Sample code to call the quicksort procedure and sort an array

with Ada.Integer_Text_IO; -- Importing the Ada library for printing output
procedure Main is
    A : Data_Arrays.Integer_Array (1 .. 10) := (10, 4, 7, 2, 5, 1, 9, 8, 3, 6);
begin
    Ada.Integer_Text_IO.Put_Line("Array before sorting: " & Data_Arrays.Values(A)); -- Printing the unsorted array
    QuickSort(A, A'First, A'Last); -- Calling the quicksort procedure
    Ada.Integer_Text_IO.Put_Line("Array after sorting: " & Data_Arrays.Values(A)); -- Printing the sorted array
end Main;