-- Package Declaration
package Some_Package is

   -- Generic Types
   type Int_List is array (Positive range <>) of Integer
     indexed by Positive

   type Complex is record
      Real_Part, Imaginary_Part : Float;
   end record;

   type Entity is tagged...

   -- Protected Types
   protected type Counter is
      procedure Incr;
      entry Value (X : out Integer);
   end Counter;

   -- Public Constants
   Max_Integer: constant Integer := Integer'Last;

-- Function Declaration
   function Fibonacci (N: Positive) return Integer is
     (if N < 2 then N else Fibonacci(N-1) + Fibonacci(N-2));

   -- Package Body
   package body Some_Package is

      -- Private Variables
      Pi : constant Float:= Math.Pi;

      -- Private Types
      type Square_Matrix is array (Positive range <>, Positive range <>) of Integer
        indexed by Positive;

      type Tree is tagged
      record
        Value: Integer;
        Left, Right: access Tree;
      end record;

      -- Function Body
      function Fibonacci (N: Positive) return Integer is
     begin
      if N < 2 then
         return N;
      else
         return Fibonacci(N-1) + Fibonacci(N-2);
      end if;
   end Some_Package;

-- Main Program
with Ada.Text_IO; use Ada.Text_IO;

procedure Main is
   List: Int_List := (1,3,5,7,9);
   Num : Integer;
begin
   -- Create new counter
   C : Counter;

   -- Increment counter 5 times
   for I in 1..5 loop
      C.Incr;
   end loop;

   -- Get counter value
   C.Value(Num);

   -- Print values of Int_List
   for J in List'Range loop
      Put_Line(Integer'Image(Num));
   end loop;

   -- Print value of Max_Integer
   Put_Line(Integer'Image(Max_Integer));

   -- Calculate and print Fibonacci sequence
   for N in 1..10 loop
      Put_Line(Integer'Image(Fibonacci(N)));
   end loop;
end Main;