-- This is a complex snippet in ADA

function Recursive_Factorial (N : Positive) return Natural is
-- This function recursively calculates the factorial of a positive integer

begin
   if N = 0 then
      return 1;
   else
      return (N * Recursive_Factorial(N - 1));
   end if;
end Recursive_Factorial;

procedure Merge_Sort (A : in out Integer_Array) is
-- This procedure uses the merge sort algorithm to sort an integer array in ascending order

   procedure Merge (Left, Right : in out Integer_Array; Result : out Integer_Array) is
   -- This procedure merges two sorted integer arrays into one sorted integer array
      L, R, I : Positive := 0;

   begin
      while L < Left'Length and R < Right'Length loop
         if Left(L) <= Right(R) then
            Result(I) := Left(L);
            L := L + 1;
         else
            Result(I) := Right(R);
            R := R + 1;
         end if;
         I := I + 1;
      end loop;

      while L < Left'Length loop
         Result(I) := Left(L);
         L := L + 1;
         I := I + 1;
      end loop;

      while R < Right'Length loop
         Result(I) := Right(R);
         R := R + 1;
         I := I + 1;
      end loop;
   end Merge;

   procedure Split (A : in out Integer_Array; Left, Right : out Integer_Array) is
   -- This procedure splits an integer array into two halves
      Mid : Positive := A'Length / 2;
   begin
      Left(A'Range(1)..Mid) := A(A'Range(1)..Mid);
      Right(A'Range(Mid + 1..A'Last)) := A(A'Range(Mid + 1..A'Last));
   end Split;

   function Length_Is_Even (A : in Integer_Array) return Boolean is
   -- This function checks if the length of an integer array is even
      Len : Natural := A'Length;
   begin
      if Len mod 2 = 0 then
         return True;
      else
         return False;
      end if;
   end Length_Is_Even;

begin
   if A'Length <= 1 then
      return;
   else
      declare
         Left, Right, Result : Integer_Array(1..A'Length);
      begin
         Split(A, Left, Right);
         Merge_Sort(Left);
         Merge_Sort(Right);
         Merge(Left, Right, Result);
         A := Result;
      end;
   end if;
end Merge_Sort;