-- This code snippet is a program that implements a queue data structure using arrays in ADA

-- Declaring the maximum size of the queue
MAX_SIZE : constant := 5;

-- Defining the queue type that stores integers
type Queue is record
    front : Natural := 0; -- keeping track of the front of the queue
    rear : Natural := 0; -- keeping track of the rear of the queue
    items : array (1..MAX_SIZE) of Integer; -- array that stores the queue elements
end record;

-- Function to check if the queue is empty
function Is_Empty (Q : Queue) return Boolean is
begin
    return Q.front = 0 and Q.rear = 0; -- if both front and rear are 0, queue is empty
end Is_Empty;

-- Function to check if the queue is full
function Is_Full (Q : Queue) return Boolean is
begin
    return Q.rear = MAX_SIZE; -- if rear reaches the maximum size, queue is full
end Is_Full;

-- Procedure to enqueue an element into the queue
procedure Enqueue (Q : in out Queue; item : Integer) is
begin
    if Is_Full(Q) then -- checking if queue is full
        raise PROGRAM_ERROR with "Queue is full!";
    else
        Q.rear := Q.rear + 1; -- incrementing rear index
        Q.items(Q.rear) := item; -- inserting the item at the rear position
    end if;
end Enqueue;

-- Procedure to dequeue an element from the queue
procedure Dequeue (Q : in out Queue; num : out Integer) is
begin
    if Is_Empty(Q) then -- checking if queue is empty
        raise PROGRAM_ERROR with "Queue is empty!";
    else
        num := Q.items(Q.front + 1); -- retrieving the item from the front position
        for i in Q.front..Q.rear - 1 loop
            Q.items(i) := Q.items(i + 1); -- shifting all elements to the left
        end loop;
        Q.rear := Q.rear - 1; -- decrementing rear index
    end if;
end Dequeue;