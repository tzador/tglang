--This code snippet declares an unconstrained generic package that implements a binary search algorithm.
generic
   type Item is array (Integer range <>) of Integer; --defines a flexible array type
package Binary_Search is
   
   type Index is range 0 .. Item'Length; --defines an index type for the array
   
   function Find (Array : Item; Num : Integer) return Index; --function to find index of given number
   
   function Binary_Search (Array : Item; Low : Index; High : Index; Num : Integer) return Index; --recursive function to execute binary search
   
private
   function Find (Array : Item; Num : Integer) return Index is
      L : Index := Array'First;
      H : Index := Array'Last;
      Mid : Index;
   begin
      while L <= H loop --perform binary search while the range of indices is valid
         Mid := (L + H) / 2; --calculate middle index
         if Array(Mid) = Num then --if number is found at middle index
            return Mid;
         elsif Array(Mid) < Num then --if number is greater than middle index
            L := Mid + 1; --move lower bound to middle index + 1
         else
            H := Mid - 1; --move upper bound to middle index - 1
         end if;
      end loop;
      return Index'First; --if number is not found
   end Find;
   
   function Binary_Search (Array : Item; Low : Index; High : Index; Num : Integer) return Index is
      Mid : Index;
   begin
      if High < Low then --if range of indices is not valid
         return Index'First; --return index indicating number is not found
      else
         Mid := (Low + High) / 2; --calculate middle index
         if Array(Mid) = Num then
            return Mid; --if number is found at middle index
         elsif Array(Mid) < Num then
            return Binary_Search(Array, Mid + 1, High, Num); --recursively execute binary search on upper half
         else
            return Binary_Search(Array, Low, Mid - 1, Num); --recursively execute binary search on lower half
         end if;
      end if;
   end Binary_Search;
   
end Binary_Search;