procedure Quicksort (A : in out Array_Index; N : in Positive) is

   --  QSort_Vect takes as parameters both the array to be sorted
   --  and the index of the pivot value.
   procedure QSort_Vect (A : in out Array_Index; Pivot : in Positive) is
      I : Positive := A'First;
      J : Positive := A'Last;
      Temp : Integer;
   begin

      --  Partition the array by rearranging elements in-place
      --  around the pivot value.
      loop
         
         --  increasing looping index
         --  Continue forward until an element that is greater
         --  than or equal to the pivot value is found.
         while A(I) < A(Pivot) loop
            I := I + 1;
         end loop;

         --  decreasing looping index
         --  Continue backwards until an element that is less
         --  than or equal to the pivot value is found.
         while A(J) > A(Pivot) loop
            J := J - 1;
         end loop;

         --  Test whether indices have crossed.
         exit when I >= J;
         
         --  Swap the elements at I and J
         Temp := A(I);
         A(I) := A(J);
         A(J) := Temp;

         -- move on
         I := I + 1;
         J := J - 1;
      end loop;

  
      -- Recurse on the sub-array less than the pivot index.
      if Pivot - 1 > 0 then
         QSort_Vect(A (A'First .. Pivot - 1));
      end if;

      -- Recurse on the sub-array greater than the pivot index.
      if A'Last - (Pivot + 1) + 1 > 0 then
         QSort_Vect(A (Pivot + 1 .. A'Last));
      end if;
   end QSort_Vect;

begin
   --  Make the first call to Quicksort to sort the entire array.
   QSort_Vect(A (A'First .. A'Last));
end Quicksort;