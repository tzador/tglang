-- Declaration of a generic package
generic
   type Element_Type is private;
package Generic_Stack is
   type Stack is private; -- Declare the private type Stack
   procedure Push (Item : in Element_Type);
   procedure Pop (Item : out Element_Type);
   function Is_Empty return Boolean;
private
   type Stack is
      record
         Data : Element_Type;
         Next : access Stack;
      end record;
   Top : access Stack := null;
end Generic_Stack;

-- Implementation of the generic package
package body Generic_Stack is
   procedure Push (Item : in Element_Type) is
      Temp : access Stack;
   begin
      Temp := new Stack'(Data => Item, Next => Top);
      Top := Temp;
   end Push;
   procedure Pop (Item : out Element_Type) is
      Temp : access Stack := Top;
   begin
      if Is_Empty then
         raise Program_Error;
      else
         Item := Temp.Data;
         Top := Temp.Next;
         delete Temp;
      end if;
   end Pop;
   function Is_Empty return Boolean is
   begin
      return Top = null;
   end Is_Empty;
end Generic_Stack;