with Ada.Text_IO; use Ada.Text_IO;    -- Import Text_IO package for input/output
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;    -- Import Integer_Text_IO package for converting types
with Ada.Containers.Ordered_Maps; use Ada.Containers;     -- Import Containers package for using ordered maps

procedure Main is
   type Name is private;    -- Define private type Name
   function "<"(L,R: Name) return Boolean;    -- Define operator "<" for comparing Names

   type Name is new String(1..10);    -- Define new type Name as a string of length 10
   function "<"(L,R: Name) return Boolean is    -- Define operator "<" for comparing Names as a function
   begin
      return To_Lower(L) < To_Lower(R);    -- Compare Names ignoring case
   end "<";

   package Student_Info is    -- Define package Student_Info
      new Ordered_Maps(Key_Type => Name, Element_Type => Integer);    -- Create an ordered map with Name as key and Integer as element
   use Student_Info;    -- Use Student_Info package
   
   Students: Student_Info.Map;    -- Create a map of type Student_Info

   procedure Input is    -- Define procedure for user input
      S: Name;    -- Declare variable S of type Name
      Score: Integer;    -- Declare variable Score of type Integer
   begin
      Put("Enter student name: ");    -- Prompt user for name
      Get_Line(S);    -- Read input and assign to S
      Put("Enter student's score: ");    -- Prompt user for score
      Get(Score);    -- Read input and assign to Score
      Students.Insert(S, Score);    -- Insert name and score in map
      New_Line;    -- Move cursor to next line
   end Input;

begin
   for I in 1..5 loop    -- Loop 5 times for 5 students
      Input;    -- Call Input procedure to get student information
   end loop;
   
   for J in Students.First..Students.Last loop    -- Loop through all entries in map
      Put_Line(J & "'s score is " & Integer'Image(Students.Element(J)));    -- Output student's name and score
   end loop;
   
end Main;