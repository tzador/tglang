-- This is a complex code snippet in ADA

-- Declare a package with a generic type
package Complex_Code_Snippet is
  generic
    type Element is private;
    -- This type will be passed in as a parameter when the package is instantiated
  package Stack_Package is
    -- Declare a record to store the stack and its size
    type Stack_Record is record
      Data : array (1..100) of Element;
      Size : Natural;
    end record;

    -- Declare a stack type
    type Stack is access Stack_Record;

    -- Define procedures to perform stack operations
    procedure Push (Item : in out Element; The_Stack : in out Stack);
    procedure Pop (Item : out Element; The_Stack : in out Stack);
    procedure Peek (Item : out Element; The_Stack : in Stack);
    function Is_Empty (The_Stack : in Stack) return Boolean;
    function Size (The_Stack : in Stack) return Natural;
  end Stack_Package;

  -- Generic instantiation of the package with type Integer
  package Integer_Stack is new Stack_Package (Integer);

  -- Generic instantiation of the package with type String
  package String_Stack is new Stack_Package (String);
end Complex_Code_Snippet;


with Ada.Text_IO; use Ada.Text_IO;

procedure Main is
  Int_Stack : Complex_Code_Snippet.Integer_Stack.Stack;
  Str_Stack : Complex_Code_Snippet.String_Stack.Stack;
begin
  Integer_Stack.Push (1, Int_Stack);
  Integer_Stack.Push (2, Int_Stack);
  Integer_Stack.Push (3, Int_Stack);

  String_Stack.Push ("Hello", Str_Stack);
  String_Stack.Push ("World", Str_Stack);

  Put_Line ("Integer stack size: " & Integer_Stack.Size (Int_Stack)'Image); -- Output: 3
  Put_Line ("String stack size: " & String_Stack.Size (Str_Stack)'Image); -- Output: 2
end Main;