-- This code snippet creates a matrix and performs Gaussian elimination to find its inverse
with MATRIXSUPPORT; -- import MATRIXSUPPORT package

-- Create a 3x3 matrix
subtype MATRIX_ROW is 1 .. 3; -- define subtype for matrix rows
subtype MATRIX_COL is 1 .. 3; -- define subtype for matrix columns
type MATRIX is array(MATRIX_ROW, MATRIX_COL) of Float; -- create matrix type

-- Fill the matrix with values
M: MATRIX; -- declare matrix variable
M := (1.0, 2.0, 3.0, -- matrix values
      0.0, 4.0, 5.0,
      1.0, 0.0, 6.0);

-- Perform Gaussian elimination
for i in MATRIX'range loop -- loop through matrix rows
   if M(i, i) = 0.0 then -- check for pivot element of 0
      -- find a non-zero row and swap it
      for j in MATRIX'range loop -- loop through matrix rows again
         if M(j, i) /= 0.0 then -- check for non-zero element
            M(i, i .. MATRIX'last) := M(j, i .. MATRIX'last); -- swap rows
            exit; -- exit inner loop
         end if;
      end loop;
   end if;
   -- update matrix with Gaussian elimination
   for j in MATRIX'range loop -- loop through matrix rows again
      if j /= i then -- skip current row
         M(j, i .. MATRIX'last) := M(j, i .. MATRIX'last) - (M(j, i) / M(i, i)) * M(i, i .. MATRIX'last); -- row update
      end if;
   end loop;
end loop;

-- Print the inverse matrix
put_line("Inverse Matrix:"); -- print label
for i in MATRIX'range loop -- loop through matrix rows
   for j in MATRIX'range loop -- loop through matrix columns
      put(M(i, j), 6, 3); -- print matrix element with specified column width and precision
   end loop;
   new_line; -- print new line
end loop;