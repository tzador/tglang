-- This is a complex code snippet in ADA that manipulates a binary search tree
with type Node is record         -- Define a record type for our tree nodes
    Key : Integer;               -- Data stored in each node
    Left, Right : Node_Ptr;      -- Pointers to child nodes
end record;

type Node_Ptr is access Node;     -- Define an access type for our tree nodes

function Insert_Node (Root : in out Node_Ptr; New_Node : in Node_Ptr) return Node_Ptr is
    -- This function inserts a new node into the tree, maintaining the binary search property
begin
    if Root = null then                     -- If tree is empty, set new node as root
        Root := New_Node;
    elsif New_Node.Key < Root.Key then      -- If new node's key is less than root's key, insert into left subtree
        Root.Left := Insert_Node(Root.Left, New_Node);
    elsif New_Node.Key > Root.Key then      -- If new node's key is greater than root's key, insert into right subtree
        Root.Right := Insert_Node(Root.Right, New_Node);
    end if;
    return Root;
end Insert_Node;

function Search (Root : Node_Ptr; Key : Integer) return Node_Ptr is
    -- This function searches for a node with a given key in the tree
begin
    if Root = null then                     -- If tree is empty, return null
        return null;
    elsif Root.Key = Key then                -- If root's key is the key we're searching for, return root
        return Root;
    elsif Key < Root.Key then                -- If key is less than root's key, search in left subtree
        return Search(Root.Left, Key);
    else                                     -- If key is greater than root's key, search in right subtree
        return Search(Root.Right, Key);
    end if;
end Search;

with Ada.Text_IO; use Ada.Text_IO;
procedure Binary_Search_Tree is
    -- This is the main program that creates a binary search tree, insert nodes, and search for them
    tree : Node_Ptr := null;        -- Initialize empty tree
begin
    Put_Line("Creating a binary search tree with the following values:");
    Put_Line("12, 6, 18, 3, 9, 15, 21, 1, 4, 7");
    tree := Insert_Node(tree, new Node'(12));      -- Insert root node with key = 12
    tree := Insert_Node(tree, new Node'(6));       -- Insert nodes with keys 6, 18, 3, 9, 15, 21, 1, 4, 7 into tree
    tree := Insert_Node(tree, new Node'(18));
    tree := Insert_Node(tree, new Node'(3));
    tree := Insert_Node(tree, new Node'(9));
    tree := Insert_Node(tree, new Node'(15));
    tree := Insert_Node(tree, new Node'(21));
    tree := Insert_Node(tree, new Node'(1));
    tree := Insert_Node(tree, new Node'(4));
    tree := Insert_Node(tree, new Node'(7));

    Put_Line("Searching for nodes with keys 3, 10, 15 in the tree:");
    Put_Line("Node with key 3 found: " & (if Search(tree, 3) = null then "False" else "True"));
    Put_Line("Node with key 10 found: " & (if Search(tree, 10) = null then "False" else "True"));
    Put_Line("Node with key 15 found: " & (if Search(tree, 15) = null then "False" else "True"));
end Binary_Search_Tree;