procedure Swap (A : in out array (Integer range <>, Integer) is
    -- A function that swaps 2 elements in an array
    Temp : Integer;
begin
    Temp := A (A'First);
    A (A'First) := A (A'Last);
    A (A'Last) := Temp;
end

procedure Selection_Sort (A : in out array (Integer range <>, Integer)) is
    -- A sorting algorithm that uses the swap function
    Min_Index : Integer;
    Counter : Integer;
begin
    for i in A'First .. A'Last - 1 loop
        Min_Index := i;
        for j in i + 1 .. A'Last loop
            if A (j) < A (Min_Index) then
                Min_Index := j;
            end if;
        end loop;
        Swap (A (i), A (Min_Index));
    end loop;
end;

procedure Quick_Sort (A : in out array (Integer range <>, Integer)) is
    -- A recursive sorting algorithm that uses the partition function
    Pivot : Integer;
    Left : Integer;
    Right : Integer;
begin
    if A'Length > 1 then
        Pivot := A (A'First);
        Left := A'First + 1;
        Right := A'Last;
        while Left <= Right loop
            if A (Left) > Pivot and A (Right) < Pivot then
                Swap (A (Left), A (Right));
                Left := Left + 1;
                Right := Right - 1;
            end if;
            if A (Left) <= Pivot then
                Left := Left + 1;
            end if;
            if A (Right) >= Pivot then
                Right := Right - 1;
            end if;
        end loop;
        Swap (A (A'First), A (Right));
        Quick_Sort (A (A'First .. Right - 1));
        Quick_Sort (A (Right + 1 .. A'Last));
    end if;
end;

-- Sample code to test the sorting algorithms
procedure Main is
    A : array (1 .. 10) of Integer := (4, 2, 1, 3, 6, 9, 5, 8, 7, 10);
begin
    Selection_Sort (A);
    -- After sorting, the array should be (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

    -- Reset the array for another test
    A := (4, 2, 1, 3, 6, 9, 5, 8, 7, 10);

    Quick_Sort (A);
    -- After sorting, the array should be (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
end Main;