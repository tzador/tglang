-- ADS Double Linked List Implementation
generic
   type Elem is private;   -- Type of element stored in list
package Doubly_Linked_Lists is

   type List is tagged private; 
   
   procedure Insert_Front(this : in out List; Value : in Elem); -- Inserts value at front of List
   procedure Insert_Rear(this : in out List; Value : in Elem);  -- Inserts value at end of List
   procedure Remove_Front(this : in out List);                  -- Removes first value from List
   procedure Remove_Rear(this : in out List);                   -- Removes last value from List

   function Empty(this : in List) return Boolean;       -- Check if List is empty

   function First(this : in List) return Elem;          -- Returns first element in List
   function Last(this : in List) return Elem;           -- Returns last element in List

   function Size(this : in List) return Integer;        -- Returns the size of the List

   procedure Clear(this : in out List);                 -- Clears the List
   procedure Print(this : in List);                     -- Prints the List
   
private
   type Node;             -- Type of node in List
   type Node_Ptr is access Node;  -- Node pointer
   type Node is tagged record
      Data  : Elem;              -- Element stored in node
      Next  : Node_Ptr;          -- Pointer to next node
      Prev  : Node_Ptr;          -- Pointer to previous node
   end record;
 
   type List is tagged record
      Front  : Node_Ptr;              -- Pointer to first node
      Rear   : Node_Ptr;              -- Pointer to last node
      Size   : Integer := 0;          -- Size of List
   end record;
 
end Doubly_Linked_Lists;