procedure Quick_Sort (A: in out STable) is -- Quick Sort procedure
-- A: the table containing elements to be sorted
-- Output: none

   Key: Integer; -- Key element for partition
   Left: Integer := A'First; -- Highest index on the left side
   Right: Integer := A'Last; -- Highest index on the right side

   procedure Swap (L: in STable; F, S : in Integer) is
      Temp : Integer := L(F); -- Temporary variable
   begin
      L(F) := L(S);
      L(S) := Temp;
   end Swap;

begin
   if Left < Right then -- Only proceed if there's at least 2 elements
      Key := A(Left + (Right-Left)/2); -- Choosing the middle element as the key
      while Left <= Right loop -- Partitioning loop
         while A(Left) < Key loop
            Left := Left + 1; -- Incrementing and looking for a larger element
         end loop;
         while A(Right) > Key loop
            Right := Right - 1; -- Decrementing and looking for a smaller element
         end loop;
         if Left <= Right then -- If both pointers have stopped at different elements
            Swap(A, Left, Right); -- Swap the elements
            Left := Left + 1;
            Right := Right - 1;
         end if;
      end loop;

      Quick_Sort(A(0..Right)); -- Recursively calling the procedure on the left side
      Quick_Sort(A(Left..A'Last)); -- Recursively calling the procedure on the right side
   end if;
end Quick_Sort;