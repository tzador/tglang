with Ada.Text_IO;     -- importing standard text input/output package

procedure Main is
   type Integer_Array is array (Integer range <>) of Integer;   -- declaring an unconstrained array type
   
   package Sort is                                              -- defining a package for sorting algorithms
      procedure Quick_Sort (Array : in out Integer_Array);      -- procedure declaration for Quick Sort
   end Sort;
   
   package body Sort is
      procedure Quick_Sort (Array : in out Integer_Array) is    -- procedure definition for Quick Sort
         Partition : Integer := Array'First;                    -- setting the pivot as the first element of the array
         Right : Integer := Array'Last;                         -- setting the right pointer as the last element of the array
         procedure Swap (Left : in out Integer; Right : in out Integer) is
            Temp : Integer := Array (Left);                     -- temporary variable to store value during swapping
         begin
            Array (Left) := Array (Right);
            Array (Right) := Temp;
         end Swap;
      begin
         if Partition >= Right then                             -- checking if the partition has reached the end of the array
            return;                                             -- if so, exit the procedure
         else
            for i in Partition..Right loop                      -- traversing the array from partition to the end
               if Array (i) < Array (Partition) then            -- comparing with the pivot value
                  Swap (i, Partition);                          -- if smaller, then swap it with the partition element
                  Partition := i;                               -- then increment the partition
               end if;
            end loop;
            Swap (Right, Partition);                            -- finally, swap the pivot value with the partition element
            Quick_Sort (Array (Array'First..Partition - 1));     -- recursively calling Quick Sort on left of partition
            Quick_Sort (Array (Partition + 1..Array'Last));     -- recursively calling Quick Sort on right of partition
         end if;
      end Quick_Sort;
   end Sort;
   
   Array_To_Sort : aliased Integer_Array (1..10) := (13, 21, 5, 9, 6, 2, 8, 1, 10, 25);   -- initializing the array to be sorted
   
begin
   Ada.Text_IO.Put_Line ("Input Array: " & Array_To_Sort'Image);   -- displaying the unsorted array
   Sort.Quick_Sort (Array_To_Sort);                                -- invoking the Quick Sort procedure
   Ada.Text_IO.Put_Line ("Sorted Array: " & Array_To_Sort'Image);  -- displaying the sorted array
end Main;