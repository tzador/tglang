-- Declaration of a generic package for handling different types of queues
generic
   MAX_SIZE : Integer; -- maximum size of the queue

package Queue is

   type Queue_Element is private; -- abstract data type for queue elements

   -- exception for trying to enqueue into a full queue
   Queue_Full : exception;

   -- exception for trying to dequeue from an empty queue
   Queue_Empty : exception;

   procedure Enqueue (Element : in Queue_Element); -- add element to the rear of the queue
   procedure Dequeue (Element : out Queue_Element); -- remove element from the front of the queue
   function Size return Integer; -- return the current size of the queue
   function Is_Empty return Boolean; -- check if the queue is empty
   function Is_Full return Boolean; -- check if the queue is full

private

   type Queue_Element is record
      Data : Integer; -- data element of the queue
      -- additional fields or functionality can be added here
   end record;

   type Queue_Array is array (1..MAX_SIZE) of Queue_Element; -- array of queue elements
   type Queue_Pointer is range 1..MAX_SIZE; -- pointer to keep track of the queue's current size

   Rear : Queue_Pointer; -- pointer to the rear of the queue
   Front : Queue_Pointer; -- pointer to the front of the queue
   Count : Queue_Pointer; -- current size of the queue
   Elements : Queue_Array; -- array to store the queue elements
end Queue;