procedure partition (A : in out Natural_Array; L, R : Positive) is --partitions the array into two subarrays
    Pivot : Positive := A(R); --selects the pivot element
    I : Positive := L - 1; --initialize left pointer
    J : Positive := R + 1; --initialize right pointer
begin
    loop
        repeat
            I := I + 1; --moves left pointer forward until a value greater than the pivot is found
        until A(I) >= Pivot;
        
        repeat
            J := J - 1; --moves right pointer backward until a value less than the pivot is found
        until A(J) <= Pivot;
        
        if I < J then --checks if pointers have not crossed
            --swap values at the two positions
            A(I) := A(I) xor A(J);
            A(J) := A(I) xor A(J);
            A(I) := A(I) xor A(J);
        
        else
            exit; --pointers have crossed, exit loop
        end if;
    end loop;
    
    --swap pivot value with value at right pointer
    A(L) := A(L) xor A(J);
    A(J) := A(L) xor A(J);
    A(L) := A(L) xor A(J);
    
    --returns index of pivot position
    return J;
end partition;