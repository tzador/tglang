-- This is a program that implements the merge sort algorithm in Ada
with Ada.Text_IO, Ada.Integer_Text_IO;

procedure Merge_Sort is

  type Int_Array is array (Positive range <>) of Integer; -- defining the integer array type

  -- Function that performs the merge operation by merging two arrays
  function Merge (A, B : Int_Array) return Int_Array is
    C : Int_Array (A'First .. A'Last + B'Last) := (others => 0); -- initializing the merged array with zeros
    i, j, k : Integer := 1; -- variables for array indices

  begin
    -- check if array A is empty
    if A'IsEmpty then
      return B; -- return array B if A is empty
    end if;

    -- check if array B is empty
    if B'IsEmpty then
      return A; -- return array A if B is empty
    end if;

    -- merge the two arrays by comparing and adding elements to array C
    while i <= A'Last and j <= B'Last loop
      if A(i) <= B(j) then
        C(k) := A(i);
        i := i + 1;
      else
        C(k) := B(j);
        j := j + 1;
      end if;
      k := k + 1;
    end loop;

    -- add the remaining elements from A to array C
    while i <= A'Last loop
      C(k) := A(i);
      i := i + 1;
      k := k + 1;
    end loop;

    -- add the remaining elements from B to array C
    while j <= B'Last loop
      C(k) := B(j);
      j := j + 1;
      k := k + 1;
    end loop;

    return C; -- return the merged array C
  end Merge;

  -- Procedure that performs the merge sort algorithm on an array
  procedure Sort (A : in out Int_Array) is
    N : constant Integer := A'Length; -- length of the array
    Mid : Integer := N / 2; -- middle index of the array

    subtype Left_Arr is Int_Array (A'First .. Mid); -- subtype for the left subarray
    subtype Right_Arr is Int_Array (Mid + 1 .. A'Last); -- subtype for the right subarray

    Left : Left_Arr := A (A'First .. Mid); -- left subarray
    Right : Right_Arr := A (Mid + 1 .. A'Last); -- right subarray

  begin
    -- check for array size
    if N <= 1 then
      return; -- return if array is already sorted
    end if;

    -- recursively sort the left and right subarrays
    Sort (Left);
    Sort (Right);

    -- merge the sorted subarrays
    A := Merge (Left, Right);
  end Sort;

  A : Int_Array (1 .. 10) := (5, 2, 8, 3, 6, 1, 9, 4, 10, 7); -- input array
begin
  Ada.Text_IO.Put_Line ("Input Array:"); -- print input array
  for I in A'Range loop
    Ada.Integer_Text_IO.Put (A(I)); -- print each element in the array
  end loop;
  Ada.Text_IO.New_Line (2);

  Sort (A); -- sort the array using merge sort algorithm

  Ada.Text_IO.Put_Line ("Sorted Array:"); -- print sorted array
  for I in A'Range loop
    Ada.Integer_Text_IO.Put (A(I)); -- print each element in the array
  end loop;
end Merge_Sort;