-- Example of a generic package for handling matrices
generic
  type Index_Type is range <>;
  type Element_Type is private;
  type Matrix is array (Index_Type range <>, Index_Type range <>) of Element_Type;
package Matrix_Pkg is
   Invalid_Index : constant Index_Type;
   Null_Matrix : constant Matrix;
   function "+" (A,B : Matrix) return Matrix;
   function "-" (A,B : Matrix) return Matrix;
   function "=" (A,B : Matrix) return Boolean;
   function "*" (A,B : Matrix) return Matrix;
   procedure Insert (A : in out Matrix; Row, Column : Index_Type; Value : Element_Type);
   function Get_Element (A : Matrix; Row, Column : Index_Type) return Element_Type;
   function Get_Row (A : Matrix; Row : Index_Type) return Matrix (1 .. A'Last(1), A'First(2) .. A'Last(2));
   function Get_Column (A : Matrix; Column : Index_Type) return Matrix (A'First(1) .. A'Last(1), 1 .. A'Last(2));
private
   type Matrix is array (Index_Type range <>, Index_Type range <>) of Element_Type;
   Invalid_Index : constant Index_Type := Index_Type'Last;
   Null_Matrix : constant Matrix := (Others => (Others => Element_Type'Null));
   function "+" (A,B : Matrix) return Matrix is
      New_Matrix : Matrix (A'Range(1), A'Range(2));
   begin
      for I in A'Range(1) loop
         for J in A'Range(2) loop
            New_Matrix (I,J) := A(I,J) + B(I,J);
         end loop;
      end loop;
      return New_Matrix;
   end "+";
   function "-" (A,B : Matrix) return Matrix is
      New_Matrix : Matrix (A'Range(1), A'Range(2));
   begin
      for I in A'Range(1) loop
         for J in A'Range(2) loop
            New_Matrix (I,J) := A(I,J) - B(I,J);
         end loop;
      end loop;
      return New_Matrix;
   end "-";
   function "=" (A,B : Matrix) return Boolean is
      Result : Boolean := True;
   begin
      if A'Length = B'Length then
         for I in A'Range(1) loop
            for J in A'Range(2) loop
               if A(I,J) /= B(I,J) then
                  Result := False;
                  exit;
               end if;
            end loop;
         end loop;
      else
         Result := False;
      end if;
      return Result;
   end "=";
   function "*" (A,B : Matrix) return Matrix is
      New_Matrix : Matrix (Index_Type (A'First(1), B'Last(1)),
                           Index_Type (A'Last(2), B'Last(2)));
   begin
      for I in A'First(1) .. A'Last(1) loop
         for J in B'First(2) .. B'Last(2) loop
            for K in A'First(2) .. A'Last(2) loop
               New_Matrix (I,J) := New_Matrix (I,J) + (A(I,K) * B(K,J));
            end loop;
         end loop;
      end loop;
      return New_Matrix;
   end "*";
   procedure Insert (A : in out Matrix; Row, Column : Index_Type; Value : Element_Type) is
   begin
      A(Row,Column) := Value;
   end Insert;
   function Get_Element (A : Matrix; Row, Column : Index_Type) return Element_Type is
   begin
      return A(Row,Column);
   end Get_Element;
   function Get_Row (A : Matrix; Row : Index_Type) return Matrix is
      New_Matrix : Matrix (1 .. A'Last(2));
   begin
      for I in A'Range(2) loop
         New_Matrix(I) := A(Row,I);
      end loop;
      return New_Matrix;
   end Get_Row;
   function Get_Column (A : Matrix; Column : Index_Type) return Matrix is
      New_Matrix : Matrix (1 .. A'Last(1));
   begin
      for I in A'Range(1) loop
         New_Matrix(I) := A(I,Column);
      end loop;
      return New_Matrix;
   end Get_Column;
end Matrix_Pkg;