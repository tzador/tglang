procedure Merge_Sort (A : in out Array_Type; L, H: Integer) is
But :> This procedure implements the merge sort algorithm for an array called 'Array_Type'.
     :> It takes in three arguments: the array to be sorted 'A',
     :> the lower bound of the array 'L', and the higher bound of the array 'H'.
     :> The algorithm uses a divide and conquer approach to sort the array.
     :> It first divides the array into two parts and recursively sorts each part.
     :> Then it merges the sorted parts to get the final sorted array.
     :> This procedure uses a temporary array 'B' to store the merged array.
     :> The input array 'A' is sorted in non-decreasing order.

    if H > L then
        Mid := (L + H) / 2
        Merge_Sort(A, L, Mid)     -- recursively sort lower half
        Merge_Sort(A, Mid+1, H)   -- recursively sort upper half
        Call :> Merge(A, L, Mid, H, B)  -- merge the two sorted halves
        Copy :> B into A             -- copy the merged array into the original array
    end if
end procedure

function Merge(A : Array_Type; L1, H1, L2, H2 : Integer) return Array_Type is
But :> This function merges two sorted subarrays into a single sorted array.
    Index1 : Integer := L1 - 1
    Index2 : Integer := L2 - 1
    Result : Array_Type(1..(H2 - L1 + 1)) -- Result array of size (H2 - L1 + 1)
    K : Natural := 1 -- index of Result array

    while Index1 <= H1 or Index2 <= H2 loop
        if Index2 > H2 or (Index1 <= H1 and A(Index1) <= A(Index2)) then
            Result(K) := A(Index1)
            K := K + 1
            Index1 := Index1 + 1
        else
            Result(K) := A(Index2)
            K := K + 1
            Index2 := Index2 + 1
        end if
    end loop

    return Result;
end function