-- This is a complex code snippet in ADA
-- It implements binary search in an array

-- Declare an array of integers
array : array(1..10) of Integer;

-- Populate the array with values
for i in 1..10 loop
    array(i) := i;
end loop;

-- Declare the desired target value to search for
target : Integer := 5;

-- Declare the initial lower, middle, and upper indices
lower : Integer := 1;
middle : Integer := (1 + array'Last) / 2;
upper : Integer := array'Last;

-- Iterate until the target value is found or until lower index surpasses upper index
while lower <= upper loop
    -- Check if the middle element is equal to the target value
    if array(middle) = target then
        -- Output the index of the target value
        Put_Line("Target value found at index" & middle'Img);
        
        -- Exit the loop
        exit;
    -- Check if the middle element is less than the target value
    elsif array(middle) < target then
        -- Adjust lower index to be the next element after middle to search in the upper half
        lower := middle + 1;
    -- Check if the middle element is greater than the target value
    else
        -- Adjust upper index to be the element before middle to search in the lower half
        upper := middle - 1;
    end if;
    
    -- Update middle index to split the remaining elements into equal halves
    middle := (lower + upper) / 2;
end loop;

-- Check if the loop exited due to target value being found
if lower > upper then
    -- Output that the target value was not found
    Put_Line("Target value was not found");
end if;