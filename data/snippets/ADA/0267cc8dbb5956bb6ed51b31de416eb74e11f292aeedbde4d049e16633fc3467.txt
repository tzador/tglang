--[[Type declaration]]
type Message_Array is array (Positive range <>) of String (1..500); --Declare a type Message_Array as an array of strings with a range from 1 to 500

type Queue_Capping is (Unbounded, Bounded (Capacity : Positive)); --Declare a type Queue_Capping as a variant record that can either be unbounded or bounded with a positive capacity

type Queue is record --Declare a record type Queue with the fields front, rear, count, max_count and data of type Message_Array
    front : Positive;
    rear : Positive;
    count : Natural;
    max_count : Natural;
    data : Message_Array;
end record;

pragma Unchecked_Union (Queue, Queue_Capping); --Use the unchecked union pragma to allow assigning a Queue type to a Queue_Capping type and vice versa

procedure Insert (Q : in out Queue; New_Item : in String) is --Declare a procedure called Insert with the parameters Q (of type Queue) and New_Item (of type string)
begin
    if Q.count = 0 then
        Q.rear := 1; --If the queue is empty, set the rear to 1
        Q.front := 1; --And the front to 1
    elsif Q.rear = Q.max_count and Q.count = Q.max_count then
        for i in Q.count - 1 .. 1 loop
            Q.data (i + 1) := Q.data (i); --If the queue is full, shift all elements to the right and insert the new item at the rear
        end loop;
        Q.data (Q.count) := New_Item; --Insert the new item at the rear
    else
        Q.rear := Q.rear + 1; --Otherwise, increase the rear by 1
        Q.data (Q.rear) := New_Item; --And insert the new item at the new rear
    end if;
    Q.count := Q.count + 1; --Increase the count of elements in the queue
end Insert;

procedure Remove (Q : in out Queue; Item : out String) is --Declare a procedure called Remove with the parameters Q (of type Queue) and Item (an output parameter of type string)
begin
    Item := Q.data (Q.front); --Set the item equal to the element at the front of the queue
    for i in 1 .. Q.count - 1 loop
        Q.data (i) := Q.data (i + 1); --Shift all elements to the left
    end loop;
    Q.rear := Q.rear - 1; --Decrease the rear by 1
    Q.count := Q.count - 1; --Decrease the count of elements in the queue
end Remove;

function Full (Q : Queue) return Boolean is --Declare a function called Full that takes in a parameter Q (of type Queue) and returns a boolean value
begin
    return Q.count = Q.max_count; --If the count of elements is equal to the maximum capacity, then return true, otherwise return false
end Full;