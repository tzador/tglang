-- This is a comment explaining the purpose of the code snippet
    -- The following code declares a generic package for a binary search tree
    generic
        type Key_Type is private; -- Defines the data type for the key of each node
        type Value_Type is private; -- Defines the data type for the value of each node
        with function "<"(Left, Right: Key_Type) return Boolean is < -- Specifies the comparison function for the tree
    package Binary_Search_Trees is
        
        -- Declares a type for the nodes of the tree
        type Node is private;
        
        -- Declares a type for the tree itself
        type Tree is private;
        
        -- This procedure creates a new tree with the specified comparison function
        procedure Create_Tree(Tree: out Tree);
        
        -- This function inserts a new node with the given key and value into the tree
        function Insert(Tree: in out Tree; Key: in Key_Type; Value: in Value_Type) return Boolean;
        
        -- This function removes the node with the given key from the tree
        function Remove(Tree: in out Tree; Key: in Key_Type) return Boolean;
        
        -- This function searches for a node with the given key in the tree and returns its value
        function Find(Tree: in Tree; Key: in Key_Type) return Value_Type;
        
        -- This function checks whether the tree is empty
        function Is_Empty(Tree: in Tree) return Boolean;
        
        -- This function returns the size of the tree
        function Size(Tree: in Tree) return Integer;
        
    private
        -- This is the implementation of the tree nodes
        type Node is record
            Key: Key_Type;
            Value: Value_Type;
            Left: access Node;
            Right: access Node;
        end record;
        
        -- This is the implementation of the tree itself
        type Tree is record
            Root: access Node;
            Comparison_Function: access function("<"(Left, Right: Key_Type) return Boolean);
        end record;
        
    end Binary_Search_Trees;