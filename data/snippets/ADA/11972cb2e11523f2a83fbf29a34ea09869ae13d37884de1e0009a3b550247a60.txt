-- The following snippet shows an example of a generic binary search procedure in ADA which can be used with any type of array and elements

generic
   type Array_Type is array (Positive range <>) of Integer;  -- generic type for array with positive range and integer elements

   with function "<=" (Element1, Element2: Integer) return Boolean is <;> -- generic function for comparing elements of type Integer

procedure Binary_Search (A: in Array_Type; Key: in Integer; Found: out Boolean; Result: out Positive) is
   L, R, M: Positive;  -- left, right and middle index of the array
begin
   L := A'First;
   R := A'Last;
   Found := False;
   while L <= R loop
      M := (L + R) / 2;  -- calculate middle index of array
      if A(M) = Key then  -- check if key is equal to middle element
         Found := True;
         Result := M;
         exit;  -- exit loop if key is found
      elsif A(M) < Key then
         L := M + 1;  -- if key is greater than middle element, move left index
      else
         R := M - 1;  -- if key is less than middle element, move right index
      end if;
   end loop;
end Binary_Search;