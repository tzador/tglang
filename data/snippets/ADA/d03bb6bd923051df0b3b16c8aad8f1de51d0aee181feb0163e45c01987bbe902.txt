-- This is a complex code snippet in ADA
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Ada.Text_IO; use Ada.Text_IO;

procedure Complex_Code is

   type Complex is record
      Real_Comp : Float;
      Imag_Comp : Float;
   end record;

   type Comp_Array is array (Integer range <>) of Complex;

   function Add_Imag (Item : Complex; Num : Float) return Complex is
   begin
      return Complex'(Real_Comp => Item.Real_Comp,
                      Imag_Comp => Item.Imag_Comp + Num);
   end Add_Imag;

   function Multiply_Complex (Comp1, Comp2 : Complex) return Complex is
   begin
      return Complex'(Real_Comp => Comp1.Real_Comp * Comp2.Real_Comp - Comp1.Imag_Comp * Comp2.Imag_Comp,
                      Imag_Comp => Comp1.Real_Comp * Comp2.Imag_Comp + Comp1.Imag_Comp * Comp2.Real_Comp);
   end Multiply_Complex;

   procedure Print_Complex (Item : Complex) is
   begin
      Put (Num => Item.Real_Comp, Exp => 0);
      Put (Item => " + ");
      Put (Num => Item.Imag_Comp, Exp => 0);
      Put_Line (Item => "i");
   end Print_Complex;

   function Complex_Array (A : in Comp_Array; M : Integer) return Comp_Array is
      B : Comp_Array (A'Range);
   begin
      for I in A'Range loop
         B (I) := A (I) + 3.14;
      end loop;
      for I in A'Range loop
         A (I) := Multiply_Complex (A (I), B (I));
      end loop;
      return A;
   end Complex_Array;

   A : Comp_Array (1 .. 5) := ((Complex'(3.14, 2.71), Complex'(5.0, 1.2), Complex'(-7.1, -9.2), Complex'(0.0, 8.5), Complex'(2.1, 3.3)));
   B : Comp_Array (1 .. 5) := Complex_Array (A, 5);

begin
   for I in A'Range loop
      Print_Complex (A (I));
   end loop;
   for I in B'Range loop
      Print_Complex (B (I));
   end loop;
end Complex_Code;