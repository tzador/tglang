-- This is a complex code snippet in ADA

procedure Quick_Sort (A: in out Array) is

    pivot : Integer;

    -- This function selects a pivot element
    function Select_Pivot (Left, Right: Integer) return Integer is
    begin
        -- Finds the middle index
        declare
            Middle : Integer := (Left + Right) / 2;
        begin
            -- Checks if the elements at Left, Middle and Right are in ascending order
            if A(Left) < A(Middle) then
                if A(Middle) < A(Right) then
                    return Middle; -- Middle is the pivot element
                elsif A(Left) < A(Right) then
                    return Right; -- Right is the pivot element
                else
                    return Left; -- Left is the pivot element
                end if;
            else -- Checks if the elements at Middle, Left and Right are in ascending order
                if A(Middle) < A(Right) then
                    if A(Left) < A(Right) then
                        return Left; -- Left is the pivot element
                    else
                        return Right; -- Right is the pivot element
                    end if;
                else
                    return Middle; -- Middle is the pivot element
                end if;
            end if;
        end;
    end Select_Pivot;

    -- This subprogram swaps two elements in an array
    procedure Swap (I, J: in out Integer) is
        Temp : Integer;
    begin
        Temp := A(I);
        A(I) := A(J);
        A(J) := Temp;
    end Swap;

    -- This subprogram performs the partitioning step of quick sort
    procedure Partition (Left, Right: Integer) is
        Index : Integer;
    begin
        -- Selects the pivot element
        pivot := Select_Pivot (Left, Right);
        -- Swaps the pivot element with the last element in the subarray
        Swap (pivot, Right);
        Index := Left;
        -- Compares elements in the subarray to the pivot element
        for J in Left..Right-1 loop
            if A(J) <= A(Right) then
                Swap (Index, J);
                Index := Index + 1;
            end if;
        end loop;
        -- Swaps the pivot element into its correct position
        Swap (Index, Right);
    end Partition;

begin

    if A'Length > 1 then
        Partition (1, A'Length);
    end if;

end Quick_Sort;