-- This is a code snippet in ADA
with Ada.Text_IO; -- Importing the Ada.Text_IO package

procedure Main is -- Defining the main procedure
  
-- Defining a function to generate Fibonacci numbers
function Fibonacci (Num : Integer) return Integer is
-- Input parameter is Num of type Integer, output is an Integer
   case Num is
      when 0 => return 0; -- Base case, if input is 0, return 0
      when 1 => return 1; -- Base case, if input is 1, return 1
      when others => return Fibonacci (Num - 1) + Fibonacci (Num - 2); -- Recursive case, call the function with Num-1 and Num-2, and add the results
   end case;
end Fibonacci;

begin -- Beginning of the main procedure
   Ada.Text_IO.Put_Line ("Enter a positive integer:"); -- Print a message to enter a positive integer
   declare
      N : Integer := Integer'Value (Ada.Text_IO.Get_Line); -- Get input from user and convert it to Integer using Ada.Text_IO.Get_Line
   begin -- Beginning of the declaration block
      if N > 0 then -- Check if input is positive
         for I in 0 .. N-1 loop -- Loop from 0 to N-1
            Ada.Text_IO.Put (Fibonacci(I)'Img); -- Print the output of the function as a string using 'Img
            Ada.Text_IO.Put (" "); -- Print a space
         end loop;
      else
         Ada.Text_IO.Put_Line ("Invalid input."); -- If input is not positive, print an error message
      end if;
   end; -- End of the declaration block
end Main; -- End of the main procedure