-- Package for manipulating arrays
package Arrays is
    -- A generic type for arrays of arbitrary size and type of elements
    generic
        type Element_Type is private;
        type Index_Type is range <>;
    package Arrays is
        type Array is array (Index_Type) of Element_Type; -- Declare type Array as an array of type Element_Type with index type Index_Type
        -- A function to initialize an array with a default value
        function Initialize (Default_Value : Element_Type) return Array;
        -- A procedure to set the value of a specific index in an array
        procedure Set (A : in out Array; Index : Index_Type; Value : Element_Type);
        -- A function to get the value at a specific index in an array
        function Get (A : Array; Index : Index_Type) return Element_Type;
        -- A function to concatenate two arrays
        function Concat (A, B : Array) return Array;
        -- A function to check if an array contains a specific value
        function Contains (A : Array; Value : Element_Type) return Boolean;
    end Arrays;
private
    element_Array : Array (1 .. 10) of Element_Type;
end Arrays;

-- Implementation of the package Arrays
package body Arrays is
    -- Implementation of the function Initialize
    function Initialize (Default_Value : Element_Type) return Array is
        A : Array (Index_Type);
    begin
        for I in Index_Type loop
            A (I) := Default_Value; -- Set all elements of A to the default value
        end loop;
        return A; -- Return the initialized array
    end Initialize;

    -- Implementation of the procedure Set
    procedure Set (A : in out Array; Index : Index_Type; Value : Element_Type) is
    begin
        A (Index) := Value; -- Set the value at the given index to the specified value
    end Set;

    -- Implementation of the function Get
    function Get (A : Array; Index : Index_Type) return Element_Type is
    begin
        return A (Index); -- Return the value at the given index
    end Get;

    -- Implementation of the function Concat
    function Concat (A, B : Array) return Array is
        C : Array (Index_Type);
    begin
        for I in Index_Type loop
            if I in A'Range then -- check if index is within the range of A
                C (I) := A (I);
            else
                C (I) := B (I - A'Length); -- if index is outside range of A, use index-offset to get value from B
            end if;
        end loop;
        return C; -- Return the concatenated array
    end Concat;

    -- Implementation of the function Contains
    function Contains (A : Array; Value : Element_Type) return Boolean is
    begin
        for I in Index_Type loop
            exit when A (I) = Value; -- If element is found, exit the loop and return true
        end loop;
        return False; -- If element is not found, return false
    end Contains;
end Arrays;