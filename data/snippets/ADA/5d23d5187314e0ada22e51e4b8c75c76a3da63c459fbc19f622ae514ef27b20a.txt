procedure print_overlapping_intervals (interval_list : input list) is
    result_list : output list;

    -- Sort the input intervals based on their start values
    sorted_list := sort(interval_list, by => interval.start_value);

    -- Add the first interval to the result list
    result_list.unsafe_append(sorted_list.first);

    -- Loop through all other intervals in the sorted list
    for i in 2 .. sorted_list.count loop

        -- Initialize variables for overlapping check
        curr_interval := sorted_list.at(i);
        last_result := result_list.last;
        last_endpoint := last_result.interval.end_value;

        if curr_interval.start_value <= last_endpoint then
            -- Current interval overlaps with previous interval
            -- Determine which interval ends later, and replace if needed
            if curr_interval.end_value > last_endpoint then
                result_list.replace(result_list.last, new => Interval(
                    start_value => last_result.interval.start_value,
                    end_value => curr_interval.end_values
                ));
            end if;
        else
            -- Current interval does not overlap, add it to result list
            result_list.unsafe_append(curr_interval);
        end if;

    end loop;

    -- Print the list of non-overlapping intervals
    for i in 1 .. result_list.count loop
        interval := result_list.at(i).interval;
        put_interval(interval);
    end loop;
end print_overlapping_intervals;