with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
procedure Main is

   -- Declaring constants for the maximum number 
   -- of characters in the array and the number
   -- of rows and columns for the matrix
   Max_Characters : constant := 26;
   Num_Rows : constant := 5;
   Num_Cols : constant := 5;

   -- Declaring an array to hold the alphabet
   Alphabet : array (0..Max_Characters) of String (1..1);
   
   -- Declaring a matrix to hold the output
   Output_Matrix : array (1..Num_Rows, 1..Num_Cols) of String (1..1);
   
begin

   -- Populating the alphabet array with uppercase letters
   for Index in 0..Max_Characters loop
      Alphabet(Index) := Character'Val(65 + Index); 
      -- Using 'Character'Val' function to convert
      -- integer value to character value
   end loop;
   
   -- Initializing the output matrix to blank spaces
   for Row in 1..Num_Rows loop
      for Col in 1..Num_Cols loop
         Output_Matrix(Row, Col) := " ";
      end loop;
   end loop;
   
   -- Filling the matrix with the alphabet in a spiral pattern
   declare
      Current_Row : Natural := 1;
      Current_Col : Natural := 1;
      Letter : Integer := 0;
      Direction : Integer := 0;
      Num_Letters : Integer := Num_Rows * Num_Cols;
   begin
      loop
         -- Checking if all letters have been placed
         if Letter = Num_Letters then
            exit;
         end if;
         
         -- Checking current direction and updating row
         -- and column accordingly
         case Direction is
            -- Going right
            when 0 =>
               Output_Matrix(Current_Row, Current_Col) := Alphabet(Letter);
               Current_Col := Current_Col + 1;
               
               -- Checking boundaries and changing direction
               if Current_Col = Num_Cols + 1 or
                  Output_Matrix(Current_Row, Current_Col) /= " " then
                  Current_Col := Num_Cols;
                  Current_Row := Current_Row + 1;
                  Direction := Direction + 1;
               end if;
            
            -- Going down
            when 1 =>
               Output_Matrix(Current_Row, Current_Col) := Alphabet(Letter);
               Current_Row := Current_Row + 1;
               
               -- Checking boundaries and changing direction
               if Current_Row = Num_Rows + 1 or
                  Output_Matrix(Current_Row, Current_Col) /= " " then
                  Current_Row := Num_Rows;
                  Current_Col := Current_Col - 1;
                  Direction := Direction + 1;
               end if;
            
            -- Going left
            when 2 =>
               Output_Matrix(Current_Row, Current_Col) := Alphabet(Letter);
               Current_Col := Current_Col - 1;
               
               -- Checking boundaries and changing direction
               if Current_Col = 0 or
                  Output_Matrix(Current_Row, Current_Col) /= " " then
                  Current_Col := 1;
                  Current_Row := Current_Row - 1;
                  Direction := Direction + 1;
               end if;
            
            -- Going up
            when 3 =>
               Output_Matrix(Current_Row, Current_Col) := Alphabet(Letter);
               Current_Row := Current_Row - 1;
               
               -- Checking boundaries and changing direction
               if Current_Row = 0 or
                  Output_Matrix(Current_Row, Current_Col) /= " " then
                  Current_Row := 2;
                  Current_Col := Current_Col + 1;
                  Direction := 0;
               end if;
         end case;
         
         Letter := Letter + 1;
      end loop;
   end;
   
   -- Printing the output matrix
   for Row in 1..Num_Rows loop
      for Col in 1..Num_Cols loop
         Put(Output_Matrix(Row, Col) & " ");
      end loop;
      New_Line;
   end loop;
   
end Main;