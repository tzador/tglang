-- Declare an array of 10 integers
type Int_Array is array(1..10) of Integer;

-- Declare a function to find the minimum value in the array
function Find_Min(arr: Int_Array) return Integer is
  min: Integer := arr(1);  -- Initialize minimum value to first element in array
begin
  for i in arr'Range loop   -- Loop through all elements in array
    if arr(i) < min then    -- Compare current value to minimum
      min := arr(i);        -- If current value is smaller, update minimum
    end if;
  end loop;
  return min;               -- Return minimum value
end Find_Min;

-- Declare a procedure to print the array
procedure Print_Array(arr: Int_Array) is
begin
  for i in arr'Range loop   -- Loop through all elements in array
    Put(arr(i) & " ");      -- Print the current element of the array
  end loop;
  New_Line;                 -- Print new line after array is printed
end Print_Array;

-- Main program
procedure Main is
  numbers: Int_Array := (5, 2, 8, 3, 1, 9, 4, 6, 7, 10);  -- Initialize array with values
  minimum: Integer;         -- Declare variable to store minimum value
begin
  Put("Original Array: ");  -- Print label for original array
  Print_Array(numbers);     -- Print original array

  minimum := Find_Min(numbers);  -- Find minimum value in array
  Put("Minimum Value: " & minimum'Image);  -- Print label for minimum value and the value itself
  
  -- Reverse the array
  for i in numbers'Range / 2 loop  -- Only swap elements up to the middle of the array
    numbers(i) := numbers(numbers'Last - i + 1);  -- Swap elements based on their position
    numbers(numbers'Last - i + 1) := numbers(i);
  end loop;
  
  Put("Reversed Array: ");  -- Print label for reversed array
  Print_Array(numbers);     -- Print reversed array
end Main;

-- Output:
-- `Original Array: 5 2 8 3 1 9 4 6 7 10
--  Minimum Value: 1
--  Reversed Array: 10 7 6 4 9 1 3 8 2 5`