-- This code generates a sorted array of integers using the merge sort algorithm
with Ada.Containers.Indefinite_Ordered_Maps; use Ada.Containers;
procedure Merge_Sort_Demo is
   -- define indefinite ordered maps of integers
   package Integer_Containers is new Indefinite_Ordered_Maps
      (Key_Type   => Integer,
       Element_Type => Integer);
   use Integer_Containers;
   -- define arrays of integers
   type Integer_Array is array (Positive range <>) of Integer;
   
   -- declaration of functions
   function "<" (Left, Right : Integer) return Boolean is
   -- return true if the left integer is less than the right integer
      (Left < Right);
      
   function Merge (Left, Right : Integer_Array) return Integer_Array is
   -- merge the left and right arrays into a single sorted array
      Result : array (Positive range 1 .. Left'Length+Right'Length) of Integer;
      Left_Index, Right_Index, Result_Index : Positive := 1;
   begin
      loop
         -- if end of left array is reached, append the remaining elements of right array
         if Left_Index > Left'Last then
            for J in Right_Index .. Right'Last loop
               Result (Result_Index) := Right (J);
               Result_Index := Result_Index + 1;
            end loop;
            return Result;
         -- if end of right array is reached, append the remaining elements of left array
         elsif Right_Index > Right'Last then
            for I in Left_Index .. Left'Last loop
               Result (Result_Index) := Left (I);
               Result_Index := Result_Index + 1;
            end loop;
            return Result;
         -- if element in the left array is less than the element in the right array,
         -- append the left element to the result and increment left index
         elsif Left (Left_Index) < Right (Right_Index) then
            Result (Result_Index) := Left (Left_Index);
            Left_Index := Left_Index + 1;
            Result_Index := Result_Index + 1;
         -- if element in the right array is less than or equal to the element in the left array,
         -- append the right element to the result and increment right index
         else
            Result (Result_Index) := Right (Right_Index);
            Right_Index := Right_Index + 1;
            Result_Index := Result_Index + 1;
         end if;
      end loop;
   end Merge;
   
   function Merge_Sort (Array : Integer_Array) return Integer_Array is
   -- recursively split and merge the array until each element is in its own sorted array
      Mid : Positive := Array'Length / 2;
      Left, Right, Sorted : Integer_Array;
   begin
      if Array'Length <= 1 then
         return Array;
      else
         Left := Merge_Sort (Array (1 .. Mid));
         Right := Merge_Sort (Array (Mid+1 .. Array'Length));
         Sorted := Merge (Left, Right);
         return Sorted;
      end if;
   end Merge_Sort;
   
   -- test the merge sort algorithm
   A : Integer_Array := (10, 4, 8, 2, 6, 9, 3, 7, 1, 5);
   Result : constant Integer_Array := Merge_Sort (A);
begin
   -- print the original unsorted array
   Put_Line ("Original Array:");
   for I in A'Range loop
      Put (A (I) & " ");
   end loop;
   
   -- print the sorted array
   Put_Line ("Sorted Array:");
   for J in Result'Range loop
      Put (Result (J) & " ");
   end loop;
end Merge_Sort_Demo;