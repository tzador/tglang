with Ada.Strings.Unbounded;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

procedure Sorting is
   type Int_Array is array (Positive range <>) of Integer; -- defines an unbounded integer array
   with Function "<" (Left, Right : Integer) return Boolean is -- defines a less than function
      (Left < Right); -- returns the boolean value for the comparison
   procedure Quick_Sort (A : in out Int_Array); -- defines the Quick_Sort procedure
   --| Quick_Sort is a recursive procedure that uses the quicksort algorithm
   --| to sort an array of integers in ascending order
   if A'Length < 2 then -- checks if the array has less than 2 elements, if so, it is already sorted
      return;
   end if;
   
   Pivot : constant Integer := A(A'First + A'Length / 2); -- selects the middle element as the pivot
   Low : Int_Array (1 .. A'Length); -- defines a new array for storing elements smaller than pivot
   High : Int_Array (1 .. A'Length); -- defines a new array for storing elements greater than pivot
   Low_Index, High_Index : Integer := 1; -- sets initial indices for new arrays
   
   for I in A'Range loop -- goes through every element in the original array
      if I /= A'First + A'Length / 2 then -- checks if the element is not the pivot
         if A(I) < Pivot then -- checks if element is smaller than pivot
            Low(Low_Index) := A(I); -- adds element to Low array
            Low_Index := Low_Index + 1; -- increments Low index
         else -- element is greater than pivot
            High(High_Index) := A(I); -- adds element to High array
            High_Index := High_Index + 1; -- increments High index
         end if;
      end if;
   end loop;
   
   Quick_Sort (Low(1 .. Low_Index - 1)); -- recursively sorts elements smaller than pivot
   Quick_Sort (High(1 .. High_Index - 1)); -- recursively sorts elements greater than pivot
   
   A := Low(1 .. Low_Index - 1) & Pivot & High(1 .. High_Index - 1); -- combines sorted arrays with pivot in between
end Sorting;