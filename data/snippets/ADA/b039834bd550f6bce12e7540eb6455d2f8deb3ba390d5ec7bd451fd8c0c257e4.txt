-- This is a complex code snippet in ADA that implements a selection sort algorithm

-- Define an array of integers
arr: array(1..10) of Integer;

-- Populate the array with random integers
for i in 1..10 loop
    arr(i) := Integer.random(1, 100);
end loop;

-- Print the unsorted array
put_line("Unsorted array: " & arr'Image);

-- Perform selection sort on the array
for i in 1..10 loop
    -- Find the minimum element in the unsorted portion of the array
    min_index: Integer := i;
    for j in i+1..10 loop
        if arr(j) < arr(min_index) then
            min_index := j;
        end if;
    end loop;

    -- Swap the minimum element with the first element in the unsorted portion of the array
    temp: Integer := arr(i);
    arr(i) := arr(min_index);
    arr(min_index) := temp;
end loop;

-- Print the sorted array
put_line("Sorted array:   " & arr'Image);