with Ada.Text_IO;

procedure Main is
   -- Used to represent an entry in a phone directory
   type Directory_Entry is record
      Name : String (1 .. 30);
      Number : String (1 .. 10);
   end record;

   -- A type that represents a single linked list
   type Single_Linked_List is private;

   procedure Add (List : in out Single_Linked_List; Entry : Directory_Entry);
   procedure Remove (List : in out Single_Linked_List; Entry : Directory_Entry);
   procedure Print (List : in Single_Linked_List);

private

   -- The node record that holds the directory entry and points to the next node
   type Node;
   type Node_Pointer is access Node;

   type Node is record
      Entry : Directory_Entry;
      Next : Node_Pointer;
   end record;

   type Single_Linked_List is record
      Head : Node_Pointer;
      Size : Natural;
   end record;

   -- Procedure to add a new entry to the specified directory list
   procedure Add (List : in out Single_Linked_List; Entry : Directory_Entry) is
      -- Allocate memory for the new node
      New_Node : Node_Pointer := new Node'(Entry => Entry, Next => List.Head);

   begin
      -- Set the new node as the head of the list
      List.Head := New_Node;
      -- Increment the size of the list
      List.Size := List.Size + 1;
   end Add;

   -- Procedure to remove an entry from the specified directory list
   procedure Remove (List : in out Single_Linked_List; Entry : Directory_Entry) is
      -- A pointer that keeps track of the current node being examined
      Curr_Node : Node_Pointer := List.Head;
      -- A pointer that keeps track of the previous node examined
      Prev_Node : Node_Pointer := null;
      -- Flag to indicate if the entry was found and removed
      Found : Boolean := False;

   begin
      -- Loop until the entry is found or the end of the list is reached
      while (Curr_Node /= null and not Found) loop
         -- If the current node holds the entry to be removed
         if Curr_Node.Entry = Entry then
            -- If the previous node is null (i.e. first node is target)
            if Prev_Node = null then
               -- Set the head to point to the next node
               List.Head := Curr_Node.Next;
            -- Otherwise, set the previous node to point to the next node
            else
               Prev_Node.Next := Curr_Node.Next;
            end if;
            -- Deallocate the memory held by the current node
            deallocate Curr_Node;
            -- Decrement the size of the list
            List.Size := List.Size - 1;
            -- Set the flag to indicate that the entry was found and removed
            Found := True;
         end if;
         -- Move to the next node
         Prev_Node := Curr_Node;
         Curr_Node := Curr_Node.Next;
      end loop;
   end Remove;

   -- Procedure to print all the entries in the specified directory list
   procedure Print (List : in Single_Linked_List) is
      -- A pointer that keeps track of the current node being printed
      Curr_Node : Node_Pointer := List.Head;

   begin
      -- Loop until the end of the list is reached
      while (Curr_Node /= null) loop
         -- Print the name and number of the current entry
         Ada.Text_IO.Put_Line("Name: " & Curr_Node.Entry.Name & " | Number: " & Curr_Node.Entry.Number);
         -- Move to the next node
         Curr_Node := Curr_Node.Next;
      end loop;
   end Print;

   -- A directory list with an initial size of 0
   List : Single_Linked_List := (Head => null, Size => 0);

begin
   -- Add some entries to the directory list
   Add(List, (Name => "John", Number => "555-1234"));
   Add(List, (Name => "Jane", Number => "555-5678"));
   Add(List, (Name => "Bob", Number => "555-9012"));

   -- Print all the entries in the directory list
   Print(List);

   -- Remove Jane's entry from the directory list
   Remove(List, (Name => "Jane", Number => "555-5678"));

   -- Print all the entries in the directory list again to confirm removal
   Print(List);
end Main;