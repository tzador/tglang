-- This code snippet implements the Quicksort algorithm in ADA.
-- It sorts an array of integers in ascending order.

-- Generic package that implements the Quicksort algorithm
package Quick_Sort is
   -- Generic type for array indexing
   type Index is (Delta .. Integer);

   -- Generic type for array elements
   type Item is private;

   -- Generic sorting procedure that takes in an array and its indexing range
   procedure Sort (A : in out Array (Index range Delta .. Integer);
                   Low : Index;
                   High : Index);

private
   -- Private type for partitioning the array
   type Partition is record
      Pivot : Integer;
      Left : Integer;
      Right : Integer;
   end record;

   -- Private recursive procedure for partitioning and sorting the array
   procedure Partition_And_Sort (A : in out Array (Index range Delta .. Integer);
                                 Low : Index;
                                 High : Index);

   -- Private function for finding the median of three values
   function Median (V1 : Item; V2 : Item; V3 : Item) return Item;

   -- Private function for finding the partition index using the pivot index and array range
   function Get_Partition_Index (Pivot : Index; Low : Index; High : Index) return Index;

   -- Private procedure for swapping two array elements
   procedure Swap (A : in out Item; B : in out Item);
end Quick_Sort;

-- Main program that uses the generic Quick_Sort package
with Quick_Sort;
with Ada.Text_IO; use Ada.Text_IO;
procedure Main is
   type Int_Array is array (Index range -10 .. 10) of Integer;
   Array_To_Sort : Int_Array := (-7, 1, 5, 3, 12, -9, 0, 4, 2, -11, 8); -- Array to sort
begin
   -- Sorting array using the Quick_Sort procedure from the Quick_Sort package
   Quick_Sort.Sort (Array_To_Sort, -10, 10);

   -- Printing the sorted array to the console
   for I in Int_Array'Range loop
      Put (Array_To_Sort (I)'Image & " ");
   end loop;
   New_Line;
end Main;

-- Package body for the Quick_Sort package
package body Quick_Sort is
   -- Private procedure for swapping two array elements
   procedure Swap (A : in out Item; B : in out Item) is
      Temp : Item := A;
   begin
      A := B;
      B := Temp;
   end Swap;

   -- Private recursive procedure for partitioning and sorting the array
   procedure Partition_And_Sort (A : in out Array (Index range Delta .. Integer);
                                 Low : Index;
                                 High : Index) is
      P : Partition;
      J : Index;
      K : Index;
   begin
      P.Pivot := A (High); -- Choosing the rightmost element as the pivot
      P.Left := Low - 1;   -- Setting the left index to one less than the actual low index
      P.Right := High;
      loop
         exit when J > P.Right;
         select
            when A (J) < P.Pivot => -- Swapping elements if the element is smaller than the pivot
               P.Left := P.Left + 1;
               J := J + 1;
               Swap (A (P.Left), A (J));
            when A (J) > P.Pivot => -- Swapping elements if the element is larger than the pivot
               P.Right := P.Right - 1;
               K := Get_Partition_Index (P.Pivot, Low, High);
               Swap (A (P.Right), A (K));
            when others =>
               J := J + 1;
         end select;
      end loop;
      K := Get_Partition_Index (P.Pivot, Low, High);
      Swap (A (High), A (K));
      if Low < K then -- Checking for more partitioning on the left sub-array
         Partition_And_Sort (A, Low, K - 1);
      end if;
      if K < High then -- Checking for more partitioning on the right sub-array
         Partition_And_Sort (A, K + 1, High);
      end if;
   end Partition_And_Sort;

   -- Generic sorting procedure that takes in an array and its indexing range
   procedure Sort (A : in out Array (Index range Delta .. Integer);
                   Low : Index;
                   High : Index) is
   begin
      if Low < High then -- Checking if the array has at least two elements
         Partition_And_Sort (A, Low, High);
      end if;
   end Sort;

   -- Private function for finding the median of three values
   function Median (V1 : Item; V2 : Item; V3 : Item) return Item is
      Result : Item;
   begin
      if (V1 >= V2 and V1 <= V3) or (V1 >= V3 and V1 <= V2) then
         Result := V1;
      elsif (V2 >= V1 and V2 <= V3) or (V2 >= V3 and V2 <= V1) then
         Result := V2;
      else
         Result := V3;
      end if;
      return Result;
   end Median;

   -- Private function for finding the partition index using the pivot index and array range
   function Get_Partition_Index (Pivot : Index; Low : Index; High : Index) return Index is
      Mid : Index := (Low + (High - Low) / 2);
      Result : Index;
   begin
      if Pivot < Low or Pivot > High then
         return -1; -- Returning -1 in case of an invalid index
      else
         return Median (Pivot, Low, High); -- Returning the median of the three indices
      end if;
   end Get_Partition_Index;
end Quick_Sort;