-- This code snippet implements a generic stack package in ADA

generic
    type Element is private; -- generic type for the stack element

package Stack is
    
    type Stack_Type is (<>); -- initial type for stack
    type Stack_Ptr is access all Stack_Type; -- pointer to stack type
    Max_Stack_Size : constant := 100; -- maximum size of stack

    Empty_Stack_Error : exception; -- exception for empty stack error
    Full_Stack_Error : exception; -- exception for full stack error

    -- procedure to push an element onto the stack
    procedure Push (Stack : in out Stack_Ptr; Item : in Element);

    -- procedure to pop an element from the stack
    procedure Pop (Stack : in out Stack_Ptr; Top : out Element);

    -- function to check if the stack is empty
    function Is_Empty (Stack : in Stack_Ptr) return Boolean;

    -- function to check if the stack is full
    function Is_Full (Stack : in Stack_Ptr) return Boolean;

    pragma Preelaborate (Stack); -- preelaboration directive for stack

private

    type Element_Array is array (1 .. Max_Stack_Size) of Element; -- array for stack elements
    type Stack_Type is record -- record for stack type
        Element_Array : Element_Array;
        Top : Natural := 0; -- initial top of stack at position 0
    end record;

end Stack;

package body Stack is
    
    -- procedure to push an element onto the stack
    procedure Push (Stack : in out Stack_Ptr; Item : in Element) is
    begin
        if Stack.Top = Max_Stack_Size then
            raise Full_Stack_Error;
        else
            Stack.Top := Stack.Top + 1; -- increment top position
            Stack.Element_Array (Stack.Top) := Item; -- push element onto stack
        end if;
    end Push;

    -- procedure to pop an element from the stack
    procedure Pop (Stack : in out Stack_Ptr; Top : out Element) is
    begin
        if Stack.Top = 0 then
            raise Empty_Stack_Error;
        else
            Top := Stack.Element_Array (Stack.Top); -- retrieve top element
            Stack.Top := Stack.Top - 1; -- decrement top position
        end if;
    end Pop;

    -- function to check if the stack is empty
    function Is_Empty (Stack : in Stack_Ptr) return Boolean is
    begin
        if Stack.Top = 0 then
            return True; -- stack is empty
        else
            return False; -- stack is not empty
        end if;
    end Is_Empty;

    -- function to check if the stack is full
    function Is_Full (Stack : in Stack_Ptr) return Boolean is
    begin
        if Stack.Top = Max_Stack_Size then
            return True; -- stack is full
        else
            return False; -- stack is not full
        end if;
    end Is_Full;

end Stack;