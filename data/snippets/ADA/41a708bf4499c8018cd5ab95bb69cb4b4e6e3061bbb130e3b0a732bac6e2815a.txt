-- Data structure representing a linked list

-- Type Aliasing
type Node is record
    Data: Integer;
    Next: access Node;
end record;

-- Initialize an empty linked list
Head: access Node := null;

-- Procedure to insert a node at the beginning of the linked list
procedure Insert_At_Beginning(Item: in Integer) is
    New_Node: access Node := new Node;
begin
    New_Node.Data := Item;
    New_Node.Next := Head;  -- Assign Head as the next node for the new node
    Head := New_Node;  -- Assign the new node as the Head of the linked list
end Insert_At_Beginning;

-- Procedure to insert a node at the end of the linked list
procedure Insert_At_End(Item: in Integer) is
    New_Node: access Node := new Node;
    Temp: access Node := Head;
begin
    New_Node.Data := Item;
    
    -- Traverse the linked list to reach the end
    while Temp.Next /= null loop
        Temp := Temp.Next;
    end loop;
    
    Temp.Next := New_Node;  -- Assign the new node as the next node of the last node
end Insert_At_End;

-- Procedure to insert a node at a given position in the linked list
procedure Insert_At_Position(Item: in Integer; Position: in Integer) is
    New_Node: access Node := new Node;
    Temp: access Node := Head;
    Counter: Integer := 1;
begin
    New_Node.Data := Item;
    
    -- Traverse the linked list to reach the given position
    while Temp.Next /= null and then Counter /= Position loop
        Temp := Temp.Next;
        Counter := Counter + 1;
    end loop;
    
    -- If the given position is greater than the number of nodes in the linked list, insert at the end
    if Temp.Next = null and Counter < Position then
        Temp.Next := New_Node;  -- Assign the new node as the next node of the last node
    else  -- Otherwise, insert at the given position
        New_Node.Next := Temp.Next;  -- Assign the next node of the new node as the next node of the current node
        Temp.Next := New_Node;  -- Assign the new node as the next node of the current node
    end if;
end Insert_At_Position;