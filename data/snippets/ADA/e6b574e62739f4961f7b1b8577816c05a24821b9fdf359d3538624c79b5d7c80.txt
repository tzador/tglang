-- This code takes in a list of numbers, sorts it using merge sort algorithm and outputs the sorted list
-- Code written by Sarah Miller

with Ada.Text_IO;                                   -- importing Ada's standard text input and output library
with Ada.Integer_Text_IO;                            -- importing Ada's standard integer input and output library

procedure Merge_Sort is                              -- declaring a procedure named Merge_Sort

   type Number_Array is array (Integer range <>) of Integer;  -- declaring a type for an integer array

   procedure Sort (List : in out Number_Array) is   -- declaring a recursive procedure to perform merge sort
      First, Middle, Last : Integer;                 -- declaring variables first, middle and last of type integer
      Left_List, Right_List : Number_Array;          -- declaring arrays to hold the left and right sub-lists

      procedure Merge (Dest : in out Number_Array;   -- declaring a procedure to merge two sorted sub-lists into one
                        Source1 : in Number_Array;   -- source array for first sub-list
                        Source2 : in Number_Array;   -- source array for second sub-list
                        First1, Last1 : in Integer;  -- first and last indices of first sub-list
                        First2, Last2 : in Integer)  -- first and last indices of second sub-list
      is
         Index1, Index2 : Integer := First1;        -- declaring and initializing variables to iterate through sub-lists
         Index3 : Integer := First2;

      begin
         while Index1 <= Last1 and Index2 <= Last2 loop  -- iterating until one of the sub-lists has been exhausted
            if Source1(Index1) < Source2(Index2) then     -- comparing elements in sub-lists and storing in destination list
               Dest(Index3) := Source1(Index1);
               Index1 := Index1 + 1;
            else
               Dest(Index3) := Source2(Index2);
               Index2 := Index2 + 1;
            end if;
            Index3 := Index3 + 1;
         end loop;

         -- copying over any remaining elements in the longer sub-list
         while Index1 <= Last1 loop
            Dest(Index3) := Source1(Index1);
            Index1 := Index1 + 1;
            Index3 := Index3 + 1;
         end loop;

         while Index2 <= Last2 loop
            Dest(Index3) := Source2(Index2);
            Index2 := Index2 + 1;
            Index3 := Index3 + 1;
         end loop;

      end Merge;

   begin
      if First < Last then                         -- base case: if the list contains more than one element
         Middle := (First + Last) / 2;              -- finding the middle index
         Sort (List (First .. Middle));             -- sorting the left sub-list
         Sort (List (Middle+1 .. Last));            -- sorting the right sub-list
         Merge (List, List (First .. Middle), List (Middle+1 .. Last), First, Middle, Middle+1, Last);  -- merging the sub-lists
      end if;
   end Sort;

   List : Number_Array (1 .. 10);               -- declaring a list of 10 elements of type Number_Array
   Element : Integer;                           -- declaring a variable to read in user input

begin
   Ada.Integer_Text_IO.Put ("Enter 10 numbers:");     -- prompting the user for input
   for I in 1 .. 10 loop                              -- loop to read in 10 numbers
      Ada.Integer_Text_IO.Get (Element);
      List (I) := Element;
   end loop;

   Ada.Text_IO.Put_Line ("Before sorting:");           -- printing before sorting list
   for I in List'First .. List'Last loop
      Ada.Integer_Text_IO.Put (List (I) & " ");
   end loop;
   Ada.Text_IO.New_Line;

   Sort (List);                                        -- calling the Merge_Sort procedure to sort the list

   Ada.Text_IO.Put_Line ("After sorting:");            -- printing after sorting list
   for I in List'First .. List'Last loop
      Ada.Integer_Text_IO.Put (List (I) & " ");
   end loop;
   Ada.Text_IO.New_Line;
end Merge_Sort;