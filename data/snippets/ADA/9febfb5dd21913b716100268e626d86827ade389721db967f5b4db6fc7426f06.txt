-- This code snippet is written in Ada, a structured, statically typed, imperative programming language.

-- This code performs a binary search on a sorted array to find a particular element.

with Ada.Text_IO; use Ada.Text_IO;
with Ada.Containers.Vectors;
with Ada.Exceptions;

procedure Binary_Search is
    
    -- Define a type for the vector (same as an array) and its index.
    type Vector is new Ada.Containers.Vectors.Vector
        (Index_Type => Integer, Element_Type => Integer);
   
    type Index is range 1 .. Vector'Size;
    
    -- Define a variable to hold the element to be found.
    Element_To_Find : Integer;
    
    -- Define a variable to hold the index of the element.
    Result : Index := 0;
    
    -- Define a sorted array of integers to search through.
    Array_To_Search : Vector := (1, 3, 5, 7, 9, 10, 11, 15, 19, 20);
    
    -- Get the element to search for from user input.
    procedure Get_Element_To_Find (Element : out Integer) is
    begin
        Put_Line ("Please enter the element to find:");
        Get(Element);
    end Get_Element_To_Find;
    
    -- Perform the binary search and return the index of the element, or 0 if not found.
    function Search(Binary_Array : Vector; Element : Integer) return Index is
        L : Index := Binary_Array'First;  -- Leftmost index
        R : Index := Binary_Array'Last;   -- Rightmost index
        Mid : Index;                      -- Middle index
    begin
        loop
            
            Mid := (L + R) / 2;
            
            if Binary_Array(Mid) = Element then return Mid;
            elsif Binary_Array(Mid) < Element then L := Mid + 1;
            else R := Mid - 1;
            
            exit when L > R;
            
        end loop;
        
        return 0;
        
    end Search;
    
begin
    -- Get the element to search for from user input.
    Get_Element_To_Find(Element_To_Find);
    
    -- Perform the binary search and store the result.
    Result := Search(Array_To_Search, Element_To_Find);
    
    -- Print the index of the element, or report if not found.
    if Result /= 0 then
        Put_Line ("The element was found at index " & Integer'Image(Result));
    else
        Put_Line ("The element was not found.");
    end if;
    
end Binary_Search;