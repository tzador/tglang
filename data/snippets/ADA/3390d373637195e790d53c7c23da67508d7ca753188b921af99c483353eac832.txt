-- This is a complex code snippet in ADA, it takes in user input for a number and then checks if it is prime, using the sieve of Eratosthenes algorithm.

with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

procedure Is_Prime is
    -- This procedure takes in user input and checks if it is prime using the sieve of Eratosthenes algorithm
    type Number is range 1..1000; -- User can input a number between 1 and 1000
    Input : Number;
    Prime : Boolean := True; -- Flag variable to keep track of prime status
    Sieve : array (Number) of Boolean := (others => True); -- Creates an array of Booleans, initialized to True

begin
    Put("Enter a number: "); -- Prompts user for input
    Get(Input); -- Gets user input

    for i in Number range 2..Input loop -- Uses a for loop to iterate through numbers 2 to Input
        if Sieve(i) = True then -- Checks if that index in the array is True, meaning it is not crossed out
            for j in Number range 2 * i..Input loop -- Uses a nested for loop to cross out multiples of current number
                Sieve(j) := False; -- Sets index to False, indicating it is not prime
            end loop;
        end if;
    end loop;

    if Sieve(Input) /= True then -- Checks if input index is still True, meaning number is not crossed out as non-prime
        Prime := False; -- Sets prime flag to False
    end if;

    if Prime = True then -- Checks if prime flag is still True by the end of the loop
        Put_Line(Input & " is prime."); -- Prints output indicating number is prime
    else
        Put_Line(Input & " is not prime."); -- Prints output indicating number is not prime
    end if;
end Is_Prime;