-- This code snippet creates an array of type integer, 
-- initializes it with random values, and then sorts it using the QuickSort algorithm

with Ada.Containers.Vectors;
with Ada.Numerics.Discrete_Random;

procedure Quick_Sort is

   type Int_Array is array (Positive range <>) of Integer;
   package Vector is new Ada.Containers.Vectors (Index_Type   => Positive,
                                                  Element_Type => Integer);
   use Vector;
   use Ada.Text_IO;

   -- Generate random values for the array
   G : Ada.Numerics.Discrete_Random.Generator (Int_Array'Length);
   Random_Item : Integer;
   Data : Int_Array (1 .. 10);

   -- QuickSort algorithm
   procedure Do_Quick_Sort (Items : in out Int_Array) is
      Pivot : Integer := Items (Items'First + (Items'Length - Items'First) / 2);
      Lower_Index : Integer := Items'First;
      Upper_Index : Integer := Items'Last;
   begin
      while Lower_Index <= Upper_Index loop
         while Items (Lower_Index) < Pivot loop
            Lower_Index := Lower_Index + 1;
         end loop;
         while Items (Upper_Index) > Pivot loop
            Upper_Index := Upper_Index - 1;
         end loop;

         if Lower_Index <= Upper_Index then
            Swap (Items (Lower_Index), Items (Upper_Index));
            Lower_Index := Lower_Index + 1;
            Upper_Index := Upper_Index - 1;
         end if;
      end loop;

      if Items'First < Upper_Index then
         Do_Quick_Sort (Items (Items'First .. Upper_Index));
      end if;
      if Lower_Index < Items'Last then
         Do_Quick_Sort (Items (Lower_Index .. Items'Last));
      end if;
   end Do_Quick_Sort;

begin
   -- Initialize array with random values
   for I in 1 .. Data'Length loop
      Random_Item := G.Random (1, 100);
      Data (I) := Random_Item;
      Put (Random_Item);
   end loop;

   -- Display array before sorting
   Put_Line ("Array before sorting: ");
   for I in Data'Range loop
      Put (Data (I));
      Put (" ");
   end loop;
   New_Line;

   -- Sort the array using QuickSort algorithm
   Do_Quick_Sort (Data);

   -- Display array after sorting
   Put_Line ("Array after sorting: ");
   for I in Data'Range loop
      Put (Data (I));
      Put (" ");
   end loop;
   New_Line;
end Quick_Sort;