-- A Complex Code Snippet in ADA --

-- Declaration of an Abstract Data Type to represent a Binary Search Tree with generic type of keys and values
generic
    type Key_Type is private;
    type Data_Type is private;
package Binary_Search_Trees is

    -- Declaration of the type for nodes of the Binary Search Tree
    type BST_Node;

    -- Declaration of the Binary Search Tree itself
    type BST_Tree is private;

    -- Creates a new Binary Search Tree with the given initial key and value
    function New_Tree (Key_In : Key_Type; Data_In : Data_Type) return BST_Tree;

    -- Inserts a new key-value pair into the Binary Search Tree
    procedure Insert (Tree_In : in out BST_Tree; Key_In : Key_Type; Data_In : Data_Type);

    -- Searches the Binary Search Tree for the given key and returns the associated value if found
    function Find (Tree_In : in out BST_Tree; Key_In : Key_Type) return Data_Type;

    -- Deletes the specified key-value pair from the Binary Search Tree
    procedure Delete (Tree_In : in out BST_Tree; Key_In : Key_Type);

private

    -- Structure for a node of the Binary Search Tree
    type BST_Node is
        record
            Key : Key_Type;
            Data : Data_Type;
            Left : BST_Node_Ptr;
            Right : BST_Node_Ptr;
        end record;

    -- Pointer type to a BST_Node
    type BST_Node_Ptr is access BST_Node;

    -- Structure for a Binary Search Tree
    type BST_Tree is
        record
            Root : BST_Node_Ptr;
        end record;

end Binary_Search_Trees;