procedure Quick_Sort(arr : in out Integer_Array) is
   -- Implementation of the Quick Sort algorithm in Ada
   
   -- Auxiliary procedure to swap two elements in the array
   procedure Swap(x, y : in out Integer) is
      Temp : Integer := x;
   begin
      x := y;
      y := Temp;
   end Swap;
   
   -- Partition procedure for the Quick Sort algorithm
   -- This procedure takes the last element in the array (pivot)
   -- and puts it in its correct position in the sorted array
   function Partition(A : in out Integer_Array; L, R : Integer) return Integer is
      Pivot : Integer := A(R);
      I, J : Integer := L;
   begin
      for I in L..R-1 loop
         if A(I) <= Pivot then
            Swap(A(I), A(J));
            J := J + 1;
         end if;
      end loop;
      Swap(A(J), A(R));
      return J;
   end Partition;

   -- Quick Sort procedure
   -- Uses recursion to sort the array
   procedure Sort(A : in out Integer_Array; L, R : Integer) is
      P : Integer;
   begin
      if L < R then
         P := Partition(A, L, R);
         Sort(A, L, P-1);
         Sort(A, P+1, R);
      end if;
   end Sort;

begin
   Sort(arr, 1, arr'Length);
end Quick_Sort;