function Quadratic_Probe_Hash (Key : Integer) return Integer is
    P : Integer := 13; -- a prime number for the hash function
    n : Integer := 20; -- size of the hash table
    Hash_Row : array (1 .. n) of Integer := (others => -1); -- initialize the hash table with -1
    H : Integer := 0;
    Index : Integer := 0;
begin
    Index := Key mod n; -- calculate initial index using modulo operator
    H := Index;
    for i in 1 .. n loop -- start quadratic probing
        if Hash_Row(H) = -1 then -- if slot is empty, insert key
            Hash_Row(H) := Key;
            return H; -- return index of inserted key
        elsif Hash_Row(H) = Key then -- if key already exists, return its index
            return H;
        end if;
        H := (Index + (i**2)) mod n; -- use quadratic function to calculate next index
    end loop;
    raise Program_Error; -- if hash table is full after probing, raise error
end Quadratic_Probe_Hash;