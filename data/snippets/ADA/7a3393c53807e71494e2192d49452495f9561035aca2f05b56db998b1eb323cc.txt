-- This is a complex sorting algorithm in Ada
-- Define a generic procedure
procedure Sort is
  type General_List is private; -- Define a generic list type
  
  -- Define the sorting algorithm logic using recursion
  function Sort_Recursive(Input : in General_List) return General_List is
      
      -- Define a variable to hold the sorted list
      Sorted_List : General_List;
      -- Define a variable to store the length of the list
      List_Length : Integer := 0;
      -- Define a temporary variable to store the current element being compared
      Temp : Input.Element_Type;
      
  begin
    -- Base case: if the list only has one element, then return the list as it is already sorted
    if Input.Length = 1 then
        return Input;
    end if;
    
    -- Otherwise, divide the list into two halves
    Sorted_List := Input.Random_Partition;
    List_Length := Sorted_List.Length / 2;
    
    -- Recursively sort the two halves of the list
    Sorted_List := Sort_Recursive(Sorted_List.First_Half);
    Sorted_List := Sort_Recursive(Sorted_List.Second_Half);
    
    -- Merge the two sorted halves
    while Sorted_List.First_Half.Length > 0 and Sorted_List.Second_Half.Length > 0 loop
        -- Compare the first elements of each half and add the smaller one to the sorted list
        if Sorted_List.First_Half.Element(1) < Sorted_List.Second_Half.Element(1) then
            Sorted_List.Append(Sorted_List.First_Half.Get_Element(1));
            Sorted_List.First_Half.Delete(1); -- Delete the element after appending it
        else
            Sorted_List.Append(Sorted_List.Second_Half.Get_Element(1));
            Sorted_List.Second_Half.Delete(1); -- Delete the element after appending it
        end if;
    end loop;
    
    -- Add any remaining elements from either half
    if Sorted_List.First_Half.Length > 0 then
        Sorted_List.Append(Sorted_List.First_Half);
    else
        Sorted_List.Append(Sorted_List.Second_Half);
    end if;
    
    -- Return the sorted list
    return Sorted_List;
  end Sort_Recursive;

begin
  -- Initialize the list to be sorted
  List_To_Sort : General_List := (1, 5, 2, 4, 3);
  
  -- Call the recursive sorting function
  Sorted_List := Sort_Recursive(List_To_Sort);
  
  -- Display the sorted list
  for I in Sorted_List'Range loop
      Put(Sorted_List(I));
  end loop;
  
end Sort;