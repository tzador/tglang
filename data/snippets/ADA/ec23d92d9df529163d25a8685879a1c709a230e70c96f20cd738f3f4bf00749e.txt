-- Define a package to handle complex numbers
package Complex_Numbers is
  -- Define a record type to store complex number values
  type Complex_Number is record
    real_part : float; -- Real part of the complex number
    imag_part : float; -- Imaginary part of the complex number
  end record;
  
  -- Function to add two complex numbers
  function Add (x : Complex_Number; y : Complex_Number) return Complex_Number is
    z : Complex_Number;
  begin
    z.real_part := x.real_part + y.real_part;
    z.imag_part := x.imag_part + y.imag_part;
    return z;
  end Add;
  
  -- Function to multiply two complex numbers
  function Multiply (x : Complex_Number; y : Complex_Number) return Complex_Number is
    z : Complex_Number;
  begin
    z.real_part := x.real_part * y.real_part - x.imag_part * y.imag_part;
    z.imag_part := x.real_part * y.imag_part + x.imag_part * y.real_part;
    return z;
  end Multiply;
  
  -- Function to calculate the magnitude of a complex number
  function Magnitude (x : Complex_Number) return float is
    mag : float;
  begin
    mag := (x.real_part ** 2) + (x.imag_part ** 2);
    return Float'Mod (mag);
  end Magnitude;
  
  -- Function to convert a complex number to polar form
  function To_Polar (x : Complex_Number) return Complex_Number is
    polar : Complex_Number;
  begin
    polar.real_part := Magnitude (x);
    polar.imag_part := atan2f (x.imag_part, x.real_part);
    return polar;
  end To_Polar;
  
  -- Function to convert a complex number to rectangular form
  function To_Rectangular (x : Complex_Number) return Complex_Number is
    rect : Complex_Number;
  begin
    rect.real_part := x.real_part * cosf (x.imag_part);
    rect.imag_part := x.real_part * sinf (x.imag_part);
    return rect;
  end To_Rectangular;
end Complex_Numbers;