-- This is a complex data structure using arrays and records
-- Declare an array with 10 elements of type integer
type integer_array is array(1..10) of Integer;

-- Declare a record type with 3 fields
type person_record is
    record
        name : string(1..20); -- string of length 20
        age : integer; -- integer value
        height : float; -- float value
    end record;

-- Declare an array with 5 elements of type person_record
type student_record_array is array(1..5) of person_record;

-- Define a procedure to initialize the student data
procedure initialize_student_data(students : in out student_record_array) is
begin
    students(1).name := "John";
    students(1).age := 20;
    students(1).height := 175.5;
    students(2).name := "Lucy";
    students(2).age := 19;
    students(2).height := 162.3;
    students(3).name := "Mark";
    students(3).age := 22;
    students(3).height := 182.1;
    students(4).name := "Emily";
    students(4).age := 20;
    students(4).height := 168.8;
    students(5).name := "David";
    students(5).age := 21;
    students(5).height := 178.0;
end initialize_student_data;

-- Declare an array of strings for subjects
type subject_array is array(1..3) of string(1..15);

-- Define a function to compute total grades for each student
function compute_total_grades(students : in student_record_array; subjects : in subject_array) return integer_array is
    total_grades : integer_array;
begin
    for i in students'range loop
        total := 0;
        for j in subjects'range loop
            -- Compute a random number for each subject and add to total
            total := total + (abs(integer(rand(1, 100))) mod 101);
        end loop;
        total_grades(i) := total;
    end loop;
    return total_grades;
end compute_total_grades;

-- Main program to use the above data structures and procedures/functions
procedure main is
    -- Declare an array of 3 subjects
    subjects : constant subject_array := ("Math", "Science", "English");
    
    -- Declare an array of 5 students
    students : student_record_array;
    
    -- Initialize the student data
    initialize_student_data(students);
    
    -- Compute the total grades for each student
    total_grades : integer_array := compute_total_grades(students, subjects);
begin
    -- Print the student data with their total grades
    for i in students'range loop
        put_line(students(i).name & " scored " & total_grades(i)'Image & " total marks.");
    end loop;
end main;