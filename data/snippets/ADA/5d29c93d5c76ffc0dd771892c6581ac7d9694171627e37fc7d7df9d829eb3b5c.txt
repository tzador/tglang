-- This code snippet is written in the ADA programming language.
-- It is a sorting algorithm called QuickSort, which uses a divide-and-conquer approach.

-- Define the range of the array to be sorted
procedure QuickSort(A : in out Array_Type; First, Last : Index_Type) is

    -- Set the pivot element as the middle element of the array
    Pivot : Integer := A((First + Last) / 2);
    -- Initialize the left and right markers
    i, j : Index_Type;

begin
    -- Swap the pivot element with the last element of the array
    A((First + Last) / 2) := A(Last);
    A(Last) := Pivot;
    
    i := First;
    j := Last - 1;
    
    -- Loop until the left and right markers cross over each other
    while (i <= j) loop
    
        -- Increment the left marker until an element greater than the pivot is found
        while (A(i) <= Pivot and i < Last) loop
            i := i + 1;
        end loop;
        
        -- Decrement the right marker until an element lesser than the pivot is found
        while (A(j) >= Pivot and j > First) loop
            j := j - 1;
        end loop;
        
        -- Swap the elements at the left and right markers
        if i < j then
            temp := A(i);
            A(i) := A(j);
            A(j) := temp;
        end if;
    end loop;
    
    -- Swap the pivot element back to its correct position
    A(Last) := A(i);
    A(i) := Pivot;
    
    -- Recursively call the QuickSort procedure for the left and right sub-arrays
    if (First < i - 1) then
        QuickSort(A, First, i - 1);
    end if;
    
    if (Last > i + 1) then
        QuickSort(A, i + 1, Last);
    end if;
    
end QuickSort;

-- Call the procedure to sort an array
QuickSort(Array_Name, 1, Array_Name'Last);