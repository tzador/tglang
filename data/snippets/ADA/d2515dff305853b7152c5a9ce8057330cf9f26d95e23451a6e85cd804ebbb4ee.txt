-- Example of using generic types in ADA

generic
   type Element_Type is private;
   type Heap_Element is private;

package Generic_Heap is

   type Heap is private;

   procedure Push (New_Item : in Element_Type;
                   Heap     : in out Heap);
   
   function Pop (Heap : in out Heap) return Heap_Element;

   function Convert_To_Heap (To_Be_Heaped : in Element_Type) return Heap_Element;
   
   procedure Remove (Item : in out Heap_Element;
                     Heap : in out Heap);

private
   
   type Node;
   
   type Node_Pointer is access Node;
   
   type Node is record
      Element : Heap_Element;
      Left    : Node_Pointer;
      Right   : Node_Pointer;
      Parent  : Node_Pointer;
   end record;
   
   type Heap is record
      Root : Node_Pointer;
   end record;
   
   -- Function to push a new element into the heap
   procedure Push (New_Item: in Element_Type;
                   Heap    : in out Heap) is
                  
      Temp : Node_Pointer;
      New : Heap_Element;
   
   begin
   
      New := Convert_To_Heap (New_Item);
      
      Temp := new Node;
      Temp.Element := New;
      
      if Heap.Root = null then
         Temp.Left := null;
         Temp.Right := null;
         Temp.Parent := null;
         Heap.Root := Temp;
      else
         Insert (Temp, Heap);
      end if;
   end Push;


   -- Function to convert the input type into type Heap_Element
   function Convert_To_Heap (To_Be_Heaped : in Element_Type) return Heap_Element is
   begin
      -- perform any necessary conversion here
      return To_Be_Heaped;
   end Convert_To_Heap;
   
   -- Function to remove an element from the heap
   procedure Remove (Item : in out Heap_Element;
                     Heap : in out Heap) is 
                        
      Temp : Node_Pointer;
   
   begin
      if Item /= null then
         
         -- If the heap only has one element
         if Item = Heap.Root.Element then
            Item := null;
            Heap.Root := null;
            
         -- If the item is at the end of the heap
         elsif Item = Heap.Root.Left.Element then
            Item := null;
            Heap.Root.Left := null;
         
         -- If the item is in the middle of the heap
         else
            -- find the node containing the item
            Temp := find_node (Item, Heap);
            
            -- fix the pointers to remove the node from the heap
            if Temp.Left /= null then
               Temp.Parent.Left := null;
            else
               Temp.Parent.Right := null;
            end if;
         
            Item := null;
            Temp.Element := null;
            
            -- reheap the heap
            if Temp = Heap.Root then
               Heap.Root := null;
            else
               Insert (Temp, Heap);
            end if;
         end if;
      end if;
   end Remove;
   
end Generic_Heap;