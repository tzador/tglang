-- This is a complex code snippet in ADA
-- declaring a package with a generic type parameter and subprograms

generic
	type Element_Type is private; -- generic type parameter
package My_Data_Structure is

	-- subprogram to insert an element into the data structure
	procedure Insert (New_Element : in Element_Type);

	-- subprogram to remove an element from the data structure
	procedure Remove (Element : in out Element_Type);

	-- subprogram to check if the data structure is empty
	function Is_Empty return Boolean;

private
	type Node; -- private nested type

	type Node_Ptr is access Node; -- private nested access type

	type Node is record
		Data : Element_Type;
		Next : Node_Ptr;
	end record;

	Head : Node_Ptr; -- private variable to store the head of the data structure

	-- subprogram to create a new node with the given data
	function New_Node (Data : Element_Type) return Node_Ptr is
		Result : Node_Ptr;
	begin
		Result := new Node;
		Result.Data := Data;
		return Result;
	end New_Node;

	-- body of the Insert subprogram
	procedure Insert (New_Element : in Element_Type) is
		New_Node_Ptr : Node_Ptr;
	begin
		New_Node_Ptr := New_Node (New_Element);
		New_Node_Ptr.Next := Head;
		Head := New_Node_Ptr;
	end Insert;

	-- body of the Remove subprogram
	procedure Remove (Element : in out Element_Type) is
		Previous : Node_Ptr;
		Current : Node_Ptr;
	begin
		Previous := null;
		Current := Head;

		-- iterate through the data structure to find the element
		while Current /= null loop
			-- if element is found, remove it
			if Current.Data = Element then
				if Previous /= null then
					Previous.Next := Current.Next;
				else
					Head := Current.Next;
				end if;
				return;
			end if;
			Previous := Current;
			Current := Current.Next;
		end loop;
	end Remove;

	-- body of the Is_Empty function
	function Is_Empty return Boolean is
		Current : Node_Ptr := Head;
	begin
		-- if head is null, then the data structure is empty
		if Current = null then
			return True;
		else
			return False;
		end if;
	-- end
end My_Data_Structure;

-- Instantiating the package with Integer type for Element_Type
package My_Integer_Data_Structure is new My_Data_Structure (Integer);

-- creating a variable to store the instance
Data_Struct : My_Integer_Data_Structure;

begin
	-- inserting an element
	Data_Struct.Insert (5);
	-- removing an element
	Data_Struct.Remove (5);
	-- checking if the data structure is empty
	if Data_Struct.Is_Empty then
		put_Line ("The data structure is empty.");
	else
		put_Line ("The data structure is not empty.");
	end if;
end;