-- This is a complex code snippet in ADA
with Ada.Integer_Text_IO;
with Ada.Text_IO, Ada.Integer_Text_IO;
 
procedure Main is
 
   package IO is new Ada.Text_IO.Integer_IO(Integer);
   package Char_IO is new Ada.Text_IO.Editing_IO(Character);
   package Line_IO is new Ada.Text_IO.Text_Streams(Integer);
 
   package S is new Ada.Text_IO.Integer_IO(Integer);
   use Ada.Text_IO;
 
   type Proc_Type is access procedure;
   type Proc_Array is array (Positive range <>) of Proc_Type;
 
   -- Task type for executing a procedure asynchronously
   task type Proc_Task (Proc : Proc_Type);
 
   task body Proc_Task is
   begin
      Proc.all;
   end Proc_Task;
 
   -- Array of procedure tasks
   Tasks : Proc_Array (1 .. 24);
 
   -- Initialize procedure tasks
   procedure Init_Tasks is begin
      Tasks (1) := new Proc_Task (Proc => Ada.Integer_Text_IO.Put (15));
      Tasks (2) := new Proc_Task (Proc => Char_IO.Set_Right_Margin (80));
      -- add more tasks here
   end Init_Tasks;
 
   type Proc_Task is access all task Proc_Task'Class;
 
   -- Create an array to hold the task handles
   Task_Handles : array (1 .. 24) of task Proc_Task;
 
   Last : Positive := 0; -- The task ID of the last task started
 
begin
 
   -- Create a task for each procedure
   for I in Proc_Array'Range loop
      Tasks (I).Start;
      Task_Handles (I) := new Proc_Task' (Task_Handles'access (Last));
      Last := Last + 1;
   end loop;
 
   -- Wait for tasks to complete
   for I in 1 .. Last loop
      Task_Handles (I).Join;
   end loop;
 
end Main;