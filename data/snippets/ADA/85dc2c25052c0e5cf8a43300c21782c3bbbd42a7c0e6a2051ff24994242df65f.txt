-- Declare an array of integers
type Int_Array is array(1..10) of Integer;

-- Fill the array with random values
for i in Int_Array'range loop
    Int_Array(i) := Integer(System.Random);
end loop;

-- Sort the array in ascending order using QuickSort algorithm
procedure QuickSort(Arr : in out Int_Array; Low, High : Integer) is
    -- Declare pivot value as the last element
    Pivot : Integer := Arr(High);

    -- Declare index to keep track of smaller elements
    Index : Integer := Low;

    -- Loop through the subarray to partition it around the pivot
    for i in Low..High loop
        -- Check if current element is smaller than pivot
        if Arr(i) < Pivot then
            -- Swap the current element with the element at the index
            Arr(i) := Arr(Index);
            Arr(Index) := Arr(i);
            -- Increase the index by 1
            Index := Index + 1;
        end if;
    end loop;

    -- Swap the pivot element with the element at the index
    Arr(High) := Arr(Index);
    Arr(Index) := Pivot;

    -- Recursively call QuickSort on the two partitions
    if Low < Index - 1 then
        QuickSort(Arr, Low, Index - 1);
    end if;
    if Index + 1 < High then
        QuickSort(Arr, Index + 1, High);
    end if;
end QuickSort;

-- Call QuickSort procedure on the whole array
QuickSort(Int_Array, Int_Array'first, Int_Array'last);