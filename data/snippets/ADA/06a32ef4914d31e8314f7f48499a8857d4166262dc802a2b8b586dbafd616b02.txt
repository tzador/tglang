--This code snippet is a function that sorts a given array in ascending order using the QuickSort algorithm--

--Generic package that allows for sorting of various data types--
generic
    type Element is private;
    type Compare is private;
    type Sort_Array is array (Positive range <>) of Element;
    
    with function "<" (Left, Right : Element) return Boolean is <>;

procedure QuickSort (Items : in out Sort_Array);
pragma Convention (Intrinsic, QuickSort);

private
  
    --Sorts array using QuickSort algorithm--
    procedure Quick_Sort (Items : in out Sort_Array; Left, Right : Positive);
    pragma Inline (Quick_Sort);
    
    --Returns pivot used for partitioning array--
    function Partition (Items : in out Sort_Array; Left, Right : Positive) return Positive;
    pragma Inline (Partition);
    
    --Swaps values at given indices in array--
    procedure Exchange (Items : in out Sort_Array; Index_1, Index_2 : Positive);
    pragma Inline (Exchange);
    
    --Helper function that compares two array elements--
    function Less (Left, Right : Element) return Boolean;
    pragma Inline (Less);
    
    --Helper function that compares two generic types--
    function Less (Left, Right : Element; Compare_Object : Compare) return Boolean;
    pragma Inline (Less);
    
    --Sorts array using QuickSort and calls the appropriate Less function--
    procedure Quick_Sort (Items : in out Sort_Array; Left, Right : Positive; Compare_Object : in Compare);
    pragma Inline (Quick_Sort);
  
    --Implementation of QuickSort algorithm--
    procedure Quick_Sort (Items : in out Sort_Array; Left, Right : Positive) is
        Pivot : Positive;
    begin
        if (Right > Left) then
            Pivot := Partition (Items, Left, Right);
            Quick_Sort (Items, Left, Pivot - 1);
            Quick_Sort (Items, Pivot + 1, Right);
        end if;
    end Quick_Sort;
    
    --Returns pivot used for partitioning array--
    function Partition (Items : in out Sort_Array; Left, Right : Positive) return Positive is
        --Uses right-most element as pivot--
        Pivot : Element := Items (Right);
        --Keeps track of pivot's position--
        Pivot_Position : Positive := Left - 1;
    begin
        for I in Left .. Right loop
            if Less (Items (I), Pivot) then
                Pivot_Position := Pivot_Position + 1;
            Exchange (Items, Pivot_Position, I);
        end loop;
        --Places pivot at its correct position in array--
        Exchange (Items, Pivot_Position + 1, Right);
        return Pivot_Position + 1;
    end Partition;
    
    --Swaps values at given indices in array--
    procedure Exchange (Items : in out Sort_Array; Index_1, Index_2 : Positive) is
        Temp : Element;
    begin
        Temp := Items (Index_1);
        Items (Index_1) := Items (Index_2);
        Items (Index_2) := Temp;
    end Exchange;
    
    --Helper function that compares two array elements--
    function Less (Left, Right : Element) return Boolean is
        begin
            return Left < Right;
        end Less;
    
    --Helper function that compares two generic types--
    function Less (Left, Right : Element; Compare_Object : Compare) return Boolean is
        begin
            return Compare_Object (Left, Right);
        end Less;
    
    --Sorts array using QuickSort and calls the appropriate Less function--
    procedure Quick_Sort (Items : in out Sort_Array; Left, Right : Positive; Compare_Object : in Compare) is
        Pivot : Positive;
    begin
        if (Right > Left) then
            Pivot := Partition (Items, Left, Right);
            Quick_Sort (Items, Left, Pivot - 1, Compare_Object);
            Quick_Sort (Items, Pivot + 1, Right, Compare_Object);
        end if;
    end Quick_Sort;
    
    --Sorts array in ascending order--
    procedure QuickSort (Items : in out Sort_Array) is
        begin
            Quick_Sort (Items, 1, Items'Length);
        end QuickSort;
        
    --Sorts array in ascending order using custom comparison function--
    procedure QuickSort (Items : in out Sort_Array; Compare_Object : in Compare) is
        begin
            Quick_Sort (Items, 1, Items'Length, Compare_Object);
        end QuickSort;

end; --end QuickSort package