-- This is a simple implementation of the merge sort algorithm in Ada.

with Ada.Text_IO; use Ada.Text_IO;
procedure Merge_Sort is

   type Int_Array is array (Positive range <>) of Integer;
   procedure Sort(A : in out Int_Array) is
   
      procedure Merge(A : in out Int_Array; Low, Mid, High : Positive) is
         Left  : Int_Array(A'First .. Mid-A'First+1);
         Right : Int_Array(Mid-A'First+2 .. A'Last);
         I, J, N, L, R : Positive;
      begin
         N := A'Length;
         for I in A'First .. Mid-A'First+1 loop
            Left(I) := A(I);
         end loop;
         for J in Mid-A'First+2 .. A'Last loop
            Right(J-Mid+A'First-1) := A(J);
         end loop;

         I :=1; J :=1;
         for K in A'First .. A'Last loop
            exit when I > L and J > R;
            if R < J or (I <= L and Left(I) < Right(J)) then
               A(K) := Left(I); I := I+1;
            else
               A(K) := Right(J); J := J+1;
            end if;
         end loop;
      end Merge;

      procedure Split(A : in out Int_Array; Low, High : Positive) is
         Mid : Natural;
      begin
         if Low+1>=High then return; end if;
         Mid := (Low+High-1)/2; Mid := Mid+Low-Mid mod 2;  -- Round up
         Split (A, Low, Mid);
         Split (A, Mid+1, High);
         Merge (A, Low, Mid, High);
      end Split;
   
   begin
      Split(A, A'First, A'Last);
   end Sort;
   
   A : Int_Array(1..5) := (4, 5, 2, 1, 3);
begin
   Sort(A);
   for I in A'First .. A'Last loop
      Put(A(I));
   end loop;
   New_Line;
end Merge_Sort;