-- This example shows a generic binary tree data structure in ADA
Generic
  type Element is private;

Package binary_tree is
  
  -- Define a binary tree node as a record
  type Binary_Node is record
    Data : Element;
    Left : access Binary_Node;
    Right : access Binary_Node;
  end record;
  
  -- Define a pointer to a binary tree node
  type Binary_Tree is access Binary_Node;
  
  -- Function to insert a node in the binary tree
  Procedure Insert_Node (Root : in out Binary_Tree; Value : in Element) is
    Temp : Binary_Tree := new Binary_Node;
  begin
    -- Check if the root is null
    if Root = null then
      Temp.Data := Value;
      Temp.Left := null;
      Temp.Right := null;
      Root := Temp;
    else
      -- If value is less than the root, insert it in the left subtree
      if Value < Root.Data then
        Insert_Node(Root.Left, Value);
      -- If value is greater than the root, insert it in the right subtree
      else
        Insert_Node(Root.Right, Value);
      end if;
    end if;
  end Insert_Node;
  
  -- Function to delete a node from the binary tree
  Procedure Delete_Node (Root : in out Binary_Tree; Value : in Element) is
    Temp : Binary_Tree := Root;
    Prev : Binary_Tree := null;
  begin
    -- Loop until the value is found
    while Temp /= null loop
      -- Check if the value is less than the root
      if Value < Temp.Data then
        Prev := Temp;
        Temp := Temp.Left;
      -- Check if the value is greater than the root
      elsif Value > Temp.Data then
        Prev := Temp;
        Temp := Temp.Right;
      else
        -- If the node has two children
        if Temp.Left /= null and Temp.Right /= null then
          -- Find the minimum value in the right subtree
          Min : Binary_Tree := Temp.Right;
          while Min.Left /= null loop
            Min := Min.Left;
          end loop;
          -- Swap the data of the current node and the minimum node
          Temp.Data := Min.Data;
          -- Delete the minimum node
          Delete_Node(Temp.Right, Min.Data);
        else
          -- If the node has only one child or no children
          if Temp.Left = null then
            Temp := Temp.Right;
          else
            Temp := Temp.Left;
          end if;
        end if;
        -- If the node is the root, set the root to null
        if Prev = null then
          Root := null;
        -- Otherwise, set the child of the previous node to the new node
        else
          if Prev.Left = Temp then
            Prev.Left := null;
          else
            Prev.Right := null;
          end if;
        end if;
      end if;
    end loop;
  end Delete_Node;
  
  -- Function to search for a value in the binary tree
  Function Search (Root : in Binary_Tree; Value : in Element) return Boolean is
    Temp : Binary_Tree := Root;
  begin
    -- Loop until the value is found or the tree is empty
    while Temp /= null loop
      -- Check if the value is less than the root
      if Value < Temp.Data then
        Temp := Temp.Left;
      -- Check if the value is greater than the root
      elsif Value > Temp.Data then
        Temp := Temp.Right;
      else
        -- Value found
        return True;
      end if;
    end loop;
    -- Value not found
    return False;
  end Search;
  
  -- Function to display the binary tree in-order
  Procedure In_Order (Root : in Binary_Tree; Output : in out String) is
  begin
    if Root /= null then
      In_Order(Root.Left, Output);
      Output := Output & " " & Element'Image(Root.Data);
      In_Order(Root.Right, Output);
    end if;
  end In_Order;
  
  -- Function to display the binary tree pre-order
  Procedure Pre_Order (Root : in Binary_Tree; Output : in out String) is
  begin
    if Root /= null then
      Output := Output & " " & Element'Image(Root.Data);
      Pre_Order(Root.Left, Output);
      Pre_Order(Root.Right, Output);
    end if;
  end Pre_Order;
  
  -- Function to display the binary tree post-order
  Procedure Post_Order (Root : in Binary_Tree; Output : in out String) is
  begin
    if Root /= null then
      Post_Order(Root.Left, Output);
      Post_Order(Root.Right, Output);
      Output := Output & " " & Element'Image(Root.Data);
    end if;
  end Post_Order;
  
end binary_tree;