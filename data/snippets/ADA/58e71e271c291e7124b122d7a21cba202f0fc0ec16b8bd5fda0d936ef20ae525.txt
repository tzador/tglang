-- This code snippet is a simple implementation of a binary search tree in ADA

with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

-- Define the node structure for the binary search tree
package Binary_Search_Tree is
    type Data_Type is range 1..100;
    type Ptr_Type is access Node;
    
    type Node;
    type Node is record
        Value: Data_Type;
        Left, Right: Ptr_Type;
    end record;
end Binary_Search_Tree;

-- Type to check if the tree is empty or not
package Is_Empty is
    type Boolean_Type is range Boolean'Range;
    function Empty(Tree: Binary_Search_Tree.Ptr_Type) return Boolean_Type;
end Is_Empty;

-- Function to insert a new value into the tree
package Insert is
    procedure Add(Tree: in out Binary_Search_Tree.Ptr_Type; New_Value: in Data_Type);
end Insert;

-- Function to check if a value is present in the tree
package Contains is
    function Exists(Tree: Binary_Search_Tree.Ptr_Type; Value: in Data_Type) return Boolean_Type;
end Contains;

-- Implementation of the functions

package body Is_Empty is
    function Empty(Tree: Binary_Search_Tree.Ptr_Type) return Boolean_Type is
        begin
            return Tree = null;
        end Empty;
end Is_Empty;

package body Insert is
    procedure Add(Tree: in out Binary_Search_Tree.Ptr_Type; New_Value: in Data_Type) is
        begin
            if Is_Empty.Empty(Tree) then
                Tree := new Node'(Value => New_Value, Left => null, Right => null);
            elsif New_Value < Tree.Value then
                Add(Tree.Left, New_Value);
            else
                Add(Tree.Right, New_Value);
            end if;
        end Add;
end Insert;

package body Contains is
    function Exists(Tree: Binary_Search_Tree.Ptr_Type; Value: in Data_Type) return Boolean_Type is
        begin
            if Is_Empty.Empty(Tree) then
                return False;
            elsif Tree.Value = Value then
                return True;
            elsif Value < Tree.Value then
                return Exists(Tree.Left, Value);
            else
                return Exists(Tree.Right, Value);
            end if;
        end Exists;
end Contains;