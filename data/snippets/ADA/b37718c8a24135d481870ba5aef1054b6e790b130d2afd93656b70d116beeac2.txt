procedure Randomized_Quicksort(A : in out Element_List; 
                      First : Positive; Mid : Positive; Last : Positive) is

   Len_P : constant Positive := Mid-First+Last-Mid;

begin
   
   if Len_P-2 > 0 then

      Partition(A, First, Mid, Last);
      Randomized_Quicksort(A, First, First+(Len_P-2)/2, Mid);
      Randomized_Quicksort(A, Mid+1, Mid+1+(Len_P-2)/2, Last);

   else
   
      if Len_P = 2 then
         if A(First) > A(Last) then
            Swap(A(First), A(Last));
         end if;
      end if;
   end if;
   
end Randomized_Quicksort;