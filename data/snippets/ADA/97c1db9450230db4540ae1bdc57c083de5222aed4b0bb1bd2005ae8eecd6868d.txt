-- Generic package for implementing a stack data structure
generic
   type Element_Type is private;
   Max_Size : Natural := 100;
package Stack_Data_Structure is

   type Stack is private;
   
   procedure Push (S : in out Stack; Item : in Element_Type);
   -- Pushes an item onto the stack.
   -- Raises `Stack_Overflow` exception if the stack is full.
   
   procedure Pop (S : in out Stack; Item : out Element_Type);
   -- Pops an item from the stack.
   -- Raises `Stack_Underflow` exception if the stack is empty.
   
   function Top (S : in Stack) return Element_Type;
   -- Returns the topmost item from the stack without removing it.
   -- Raises `Stack_Underflow` exception if the stack is empty.
   
   function Size (S : in Stack) return Natural;
   -- Returns the number of items in the stack.
   
   function Is_Full (S : in Stack) return Boolean;
   -- Returns True if the stack is full, False otherwise.
   
   function Is_Empty (S : in Stack) return Boolean;
   -- Returns True if the stack is empty, False otherwise.
   
   procedure Clear (S : in out Stack);
   -- Removes all items from the stack.
   
private

   type Stack is record
      Data : array (1 .. Max_Size) of Element_Type;
      Top : Natural := 0;
   end record;
   
   Stack_Full : exception;
   Stack_Empty : exception;
   
end Stack_Data_Structure;