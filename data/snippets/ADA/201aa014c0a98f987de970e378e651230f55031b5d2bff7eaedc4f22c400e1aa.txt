-- Create a generic package that implements a stack data structure using a linked list

generic
    type Elem is private;                        -- generic type for elements in the stack
package Stack_Linked_List is
    type Stack is private;                       -- the stack data structure

    procedure Push(S: in out Stack; E: Elem);     -- procedure to push an element to the top of the stack
    procedure Pop(S: in out Stack; E: out Elem);  -- procedure to pop an element from the top of the stack
    function Is_Empty(S: Stack) return Boolean;   -- function to check if the stack is empty
    function Size(S: Stack) return Natural;       -- function to get the size of the stack

private
   type Node;                                    -- private type for a node in the linked list
   type Node_Ptr is access Node;                  -- access type for node pointers
   type Stack is record                          -- stack record containing the head node and size
      Head: Node_Ptr;
      Size: Integer := 0;
    end record;

   type Node is record                           -- node record containing the element and next node
      Element: Elem;
      Next: Node_Ptr := null;
   end record;

end Stack_Linked_List;

-- Implementation of the procedures and functions for the stack data structure

procedure Push(S: in out Stack; E: Elem) is
   New_Node: Node_Ptr := new Node;
begin
   New_Node.Element := E;
   New_Node.Next := S.Head;
   S.Head := New_Node;                           -- set the new node as the head of the linked list
   S.Size := S.Size + 1;                         -- increment the stack size
end Push;

procedure Pop(S: in out Stack; E: out Elem) is
begin
   if not Is_Empty(S) then                       -- check if the stack is not empty
      E := S.Head.Element;                       -- get the element from the head node
      S.Head := S.Head.Next;                     -- set the next node as the head node
      S.Size := S.Size - 1;                      -- decrement the stack size
   end if;
end Pop;

function Is_Empty(S: Stack) return Boolean is
begin
   return S.Size = 0;                            -- check if stack size is 0
end Is_Empty;

function Size(S: Stack) return Natural is
begin
   return S.Size;                                -- return stack size
end Size;