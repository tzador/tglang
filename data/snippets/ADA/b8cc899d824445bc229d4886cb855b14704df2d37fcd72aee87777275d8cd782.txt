-- Declare a package to be used (denoted by the keyword "package")
-- This package will contain all the code snippets that follow
package My_Package is
    -- Declare a new type called "My_Integer" with a range of 0 to 100
    -- This type can hold any value from 0 to 100, inclusive
    type My_Integer is range 0 .. 100;
    
    -- Declare a new type called "My_Record" which contains three fields:
    -- "My_Field_1" of type My_Integer
    -- "My_Field_2" of type Boolean
    -- "My_Field_3" of type Character
    type My_Record is record
        My_Field_1 : My_Integer;
        My_Field_2 : Boolean;
        My_Field_3 : Character;
    end record;
    
    -- Declare a constant "My_Constant" of type My_Integer and assign it a value of 50
    -- This constant cannot be changed once it is initialized
    My_Constant : constant My_Integer := 50;
    
    -- Declare a function "My_Function" that takes in a parameter "n" of type My_Integer
    -- and returns a My_Record type. 
    -- This function will set the fields of the record based on the value of "n" 
    function My_Function(n : My_Integer) return My_Record is
        -- Declare a local variable "my_variable" of type My_Integer
        my_variable : My_Integer;
        
        -- Declare a variable "my_record" of type My_Record and initialize it with fields set to 0, false, and 'a'
        my_record : My_Record := (0, False, 'a');
    begin
        -- Set the value of "my_variable" to be half of "n"
        my_variable := n / 2;
        
        -- Set the field "My_Field_1" of "my_record" to be the value of "my_variable"
        my_record.My_Field_1 := my_variable;
        
        -- Set the field "My_Field_2" of "my_record" to be True if "my_variable" is greater than 25, False otherwise
        if my_variable > 25 then
            my_record.My_Field_2 := True;
        else
            my_record.My_Field_2 := False;
        end if;
        
        -- Set the field "My_Field_3" of "my_record" to be the character with ASCII value equal to "My_Constant"
        my_record.My_Field_3 := Character'Val(My_Constant);
        
        -- Return the record "my_record"
        return my_record;
    end My_Function;
    
    -- Declare a procedure "My_Procedure" that takes in no parameters
    -- This procedure will print out the fields of a My_Record type returned by "My_Function"
    procedure My_Procedure is
        -- Declare a variable "result" of type My_Record to store the result of "My_Function"
        result : My_Record;
    begin
        -- Call "My_Function" with a parameter of 70 and store the result in "result"
        result := My_Function(70);
        
        -- Print out the value of "My_Field_1" of the record "result"
        -- This should print out "35" 
        Put_Line("The value of My_Field_1 is: " & My_Integer'Image(result.My_Field_1));
        
        -- Print out the value of "My_Field_2" of the record "result"
        -- This should print out "True" 
        Put_Line("The value of My_Field_2 is: " & Boolean'Image(result.My_Field_2));
        
        -- Print out the value of "My_Field_3" of the record "result"
        -- This should print out "2" (ASCII value of the character '2')
        Put_Line("The value of My_Field_3 is: " & Character'Image(result.My_Field_3));
    end My_Procedure;
    
end My_Package;

-- Main program to run the code
with My_Package; use My_Package;
-- Use the package "My_Package" in this program

procedure Main is
begin
    -- Call the procedure "My_Procedure"
    My_Procedure;
end Main;