with Ada.Text_IO;

procedure Main is

   type Int_Array is array (Integer range <>) of Integer;

   -- Generic function to sort an array using selection sort algorithm
   generic
      with function Compare (Element1, Element2 : Integer) return Boolean is <>
   procedure Selection_Sort (Array : in out Int_Array; Size : Integer) is
      Min_Index : Integer;
      Temp      : Integer;
   begin
      for I in 0 .. Size - 2 loop
         Min_Index := I;
         for J in I + 1 .. Size - 1 loop
            if Compare (Array (J), Array (Min_Index)) then
               Min_Index := J;
            end if;
         end loop;
         Temp              := Array (I);
         Array (I)         := Array (Min_Index);
         Array (Min_Index) := Temp;
      end loop;
   end Selection_Sort;

   -- Example usage
   type Names_Array is array (1 .. 5) of String (1 .. 10);

   function Compare_Names (Name1, Name2 : String) return Boolean is
   begin
      if Name1 (1 .. 1) = Name2 (1 .. 1) then
         return Name1 (2 .. Name1'Length) < Name2 (2 .. Name2'Length);
      else
         return Name1 (1 .. 1) < Name2 (1 .. 1);
      end if;
   end Compare_Names;

   Names : Names_Array := ("John", "Mary", "Adam", "Kate", "Mike");

begin
   Selection_Sort (Array    => Names,
                   Size     => Names'Length,
                   Compare  => Compare_Names);
   Ada.Text_IO.Put_Line ("Sorted Names:");
   for I in 1 .. Names'Length loop
      Ada.Text_IO.Put_Line (Names (I));
   end loop;
end Main;