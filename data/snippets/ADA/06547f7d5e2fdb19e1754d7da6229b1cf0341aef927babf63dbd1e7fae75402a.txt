-- Declaration of a generic package
generic
    type T is private;     -- generic type T is declared as private
package My_Package is -- Name of the package
    Type Some_Array is array (Integer range <>) of T; -- declaring an array of generic type T
    function Add (a, b : T) return T; -- this function adds two generic types and returns a generic type
    pragma Inline (Add); -- this will instruct compiler to inline the Add function

end My_Package;  -- end of package

-- Body of the generic package
package body My_Package is

    -- Implementation of the Add function
    function Add (a, b : T) return T is
    begin
    return a + b; -- returns the sum of the two generic types
    end Add;

end My_Package;  -- end of package body

-- Example usage of the generic package
with My_Package; -- importing the generic package
procedure Main is
    package Int_Package is new My_Package (Integer); -- instantiating the generic package with type Integer
    My_Array : Int_Package.Some_Array (1..5); -- declaring an array of type Integer with 5 elements
    Result : Integer; 
begin
    for i in My_Array'Range loop
        My_Array(i) := i; -- assigning values to each element of the array
    end loop;
    
    Result := Int_Package.Add(2, 3); -- calling the Add function from the generic package with integer values
    
    Some_Variable := Int_Package.Add(My_Array(1), My_Array(2)); -- calling the Add function with array elements as parameters
end Main;