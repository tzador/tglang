-- This code snippet is a function that generates a random maze using a recursive backtracking algorithm
function generate_maze(rows, columns: Integer) return Integer is
    type cell is record
        top, bottom, left, right: Boolean; -- indicators for walls
        visited: Boolean := False; -- indicator for visited cells
    end record;

    type maze_grid is array(1..rows, 1..columns) of cell; -- 2D array to represent the maze

    maze: maze_grid; -- initialize maze grid
    current_cell: cell;

    -- function to check if all cells have been visited
    function all_cells_visited return Boolean is
    begin
        -- loop through all cells in maze and check if any are not visited
        for i in 1..rows loop
            for j in 1..columns loop
                if not maze(i, j).visited then
                    return False;
                end if;
            end loop;
        end loop;
        return True;
    end all_cells_visited;

begin
    -- choose a random cell as the starting point
    current_cell := maze(randint(1, rows), randint(1, columns));
    current_cell.visited := True; -- mark cell as visited

    -- main loop to generate maze
    while not all_cells_visited loop
        -- check for unvisited neighbors of current cell
        -- if all neighbors are visited, backtrack to previous cell
        loop
            -- choose a random direction
            direction := randint(1, 4);
            -- check if neighbor in that direction is in maze and unvisited
            if direction = 1 and current_cell.top = False and current_cell.visited = False then
                -- add top wall and mark neighbor cell as visited
                current_cell.top := True;
                maze(current_cell.row - 1, current_cell.column).bottom := True;
                maze(current_cell.row - 1, current_cell.column).visited := True;

            elsif direction = 2 and current_cell.bottom = False and current_cell.visited = False then
                -- add bottom wall and mark neighbor cell as visited
                current_cell.bottom := True;
                maze(current_cell.row + 1, current_cell.column).top := True;
                maze(current_cell.row + 1, current_cell.column).visited := True;

            elsif direction = 3 and current_cell.left = False and current_cell.visited = False then
                -- add left wall and mark neighbor cell as visited
                current_cell.left := True;
                maze(current_cell.row, current_cell.column - 1).right := True;
                maze(current_cell.row, current_cell.column - 1).visited := True;

            elsif direction = 4 and current_cell.right = False and current_cell.visited = False then
                -- add right wall and mark neighbor cell as visited
                current_cell.right := True;
                maze(current_cell.row, current_cell.column + 1).left := True;
                maze(current_cell.row, current_cell.column + 1).visited := True;

            else
                -- no unvisited neighbors found, backtrack to previous cell
                break;
            end if;
        end loop;
    end loop; -- end of main loop
    return 0; -- function will return 0 once maze is generated
end generate_maze; -- end of function