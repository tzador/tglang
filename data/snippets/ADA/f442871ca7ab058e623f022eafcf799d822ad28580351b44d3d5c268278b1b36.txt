-- This is a program written in ADA that implements quick sort algorithm
with Ada.Text_IO; use Ada.Text_IO;

procedure Quick_Sort is
    type Int_Array is array (Positive range <>) of Integer;
    
    procedure Swap (A : in out Int_Array; I, J : Positive) is
        Temp : Integer := A (I);
    begin
        A (I) := A (J);
        A (J) := Temp;
    end Swap;
    
    function Partition (A : in out Int_Array; Left, Right : Positive) return Positive is
        Pivot, Index : Positive;
    begin
        Pivot := A (Right);
        Index := Left - 1;
        
        for J in Left .. Right - 1 loop
            if A (J) <= Pivot then
                Index := Index + 1;
                Swap (A, Index, J);
            end if;
        end loop;
        
        Swap (A, Index + 1, Right);
        return Index + 1;
    end Partition;
    
    procedure Sort (A : in out Int_Array; Left, Right : Positive) is
        Index : Positive;
    begin
        if Left < Right then
            Index := Partition (A, Left, Right);
            Sort (A, Left, Index - 1);
            Sort (A, Index + 1, Right);
        end if;
    end Sort;
    
    package Test is new Ada.Text_IO.Integer_IO (Int_Array);
    Array : Int_Array (1 .. 10) := (5, 2, 9, 1, 4, 8, 3, 6, 7, 10);
begin
    Put_Line ("Before sorting:");
    Test.Put (Array);
    
    Sort (A => Array, Left => Array'First, Right => Array'Last);
    
    Put_Line ("After sorting:");
    Test.Put (Array);
end Quick_Sort;