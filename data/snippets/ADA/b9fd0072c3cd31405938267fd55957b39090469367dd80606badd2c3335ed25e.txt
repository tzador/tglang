-- Code to implement a doubly linked list in ADA

-- Define the data structure for the nodes
type Node;
type Node_Ptr is access Node;
type Node is record
    Prev : Node_Ptr;
    Data : Integer;
    Next : Node_Ptr;
end record;

-- Define the functions to manipulate the linked list
function Initialize
    (List : out Node_Ptr) return Node_Ptr
    is
begin
    List := new Node;
    List.Prev := null;
    List.Data := 0;
    List.Next := null;
    return List;
end Initialize;

function Insert
    (List     : Node_Ptr;
     Position : in out Node_Ptr;
     Data     : Integer) return Node_Ptr
    is
    New_Node : Node_Ptr;
begin
    New_Node := new Node;
    New_Node.Prev := Position.Prev;
    Position.Prev := New_Node;
    New_Node.Data := Data;
    New_Node.Next := Position;
    if New_Node.Prev /= null then
        New_Node.Prev.Next := New_Node;
    end if;
    return New_Node;
end Insert;

function Delete
    (List     : Node_Ptr;
     Position : in out Node_Ptr) return Node_Ptr
    is
begin
    Position.Prev.Next := Position.Next;
    if Position.Next /= null then
        Position.Next.Prev := Position.Prev;
    end if;
    free(Position);
    return List;
end Delete;

function Reverse
    (List : in out Node_Ptr) return Node_Ptr
is
    Cur_Node, Next_Node, Prev_Node : Node_Ptr;
begin
    Cur_Node := List;
    Next_Node := null;
    while Cur_Node /= null loop
        Prev_Node := Cur_Node.Prev;
        Cur_Node.Prev := Next_Node;
        Next_Node := Cur_Node.Next;
        Cur_Node.Next := Prev_Node;
        Cur_Node := Next_Node;
    end loop;
    return Next_Node.Prev;
end Reverse; 

-- Example Usage
List : Node_Ptr := Initialize;
Position : Node_Ptr := List;
Position := Insert(List, Position, 1);
Position := Insert(List, Position, 2);
Position := Insert(List, Position, 3);
Position := Insert(List, Position, 4);
Position := Insert(List, Position, 5);

List := Reverse(List);

List := Delete(List, Position);

Output : 

1 -> 2 -> 3 -> 4 -> 5