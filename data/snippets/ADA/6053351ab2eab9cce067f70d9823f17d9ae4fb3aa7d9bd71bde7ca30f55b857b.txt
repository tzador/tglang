-- This code snippet implements a function to rotate an array in-place
-- Input: A is the array to be rotated
--        N is the length of the array
--        K is the number of rotations to be performed
procedure rotate_array(A : in out Array(1..N) of Integer; N : in Integer; K : in Integer) is
    -- Define a temporary array to hold the last K elements of input array
    -- This array will be used to replace the first K elements of input array after rotation
    Temp_Arr : Array(1..K) of Integer;
begin
    -- Check if number of rotations is greater than length of array
    -- If so, reduce K to be the remainder of K divided by N
    if K > N then
        K := K mod N;
    end if;

    -- Copy last K elements of input array to temporary array
    for i in 1..K loop
        Temp_Arr(i) := A(N-K+i);
    end loop;

    -- Shift all elements of input array from index K to N to the right by K places
    -- This fills the first K indexes of input array with the last K elements
    for i in N - K downto 1 loop
        A(i + K) := A(i);
    end loop;

    -- Replace the first K elements of input array with elements from temporary array
    for i in 1..K loop
        A(i) := Temp_Arr(i);
    end loop;
end rotate_array;

-- Example usage:
declare
    -- Declare and initialize input array
    My_Array : Array(1..8) of Integer := (1, 2, 3, 4, 5, 6, 7, 8);
begin
    -- Call rotate_array function with 2 rotations
    rotate_array(My_Array, 8, 2);

    -- The input array will now be (7, 8, 3, 4, 5, 6, 1, 2)
end;