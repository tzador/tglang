-- This is a comment in ADA
-- Creating a generic package with two generic parameters

generic
    -- The type of the key
    type Key_Type is (<>);

    -- The type of the value
    type Value_Type is (<>);

package Generic_Mapping is

    -- An array to store the keys
    type Key_Array is array (Positive range <>) of Key_Type;

    -- An array to store the values
    type Value_Array is array (Key_Array'Range) of Value_Type;

    -- The generic mapping type
    type Map is record
        Keys: Key_Array;
        Values: Value_Array;
    end record;

    -- Procedure to initialize a generic map
    procedure Init (Generic_Map: out Map);

    -- Procedure to insert a key-value pair into the map
    procedure Insert (Generic_Map: in out Map; Key: in Key_Type; Value: in Value_Type);

    -- Function to retrieve the value associated with a given key
    function Retrieve (Generic_Map: in Map; Key: in Key_Type) return Value_Type;

    -- Function to check if a key exists in the map
    function Contains (Generic_Map: in Map; Key: in Key_Type) return Boolean;

    -- Function to return the size of the map
    function Size (Generic_Map: in Map) return Natural;

private
    -- Default initial value for keys
    Default_Key: constant Key_Type := <>;

    -- Default initial value for values
    Default_Value: constant Value_Type := <>;

end Generic_Mapping;

-- Implementation of the generic map package

package body Generic_Mapping is

    -- Procedure to initialize a generic map
    procedure Init (Generic_Map: out Map) is
        begin
            for i in Generic_Map.Keys'Range loop
                Generic_Map.Keys(i) := Default_Key;
                Generic_Map.Values(i) := Default_Value;
            end loop;
        end Init;

    -- Procedure to insert a key-value pair into the map
    procedure Insert (Generic_Map: in out Map; Key: in Key_Type; Value: in Value_Type) is
        begin
            -- Check if map already contains key
            if Contains(Generic_Map, Key) then
                -- Replace value for existing key
                Generic_Map.Values(Retrieve_Index(Generic_Map, Key)) := Value;
            else
                -- Loop through array to find first empty slot
                for i in Generic_Map.Keys'Range loop
                    if Generic_Map.Keys(i) = Default_Key then
                        -- Insert key-value pair
                        Generic_Map.Keys(i) := Key;
                        Generic_Map.Values(i) := Value;
                        exit;  -- Exit loop once pair is inserted
                    end if;
                end loop;
            end if;
        end Insert;

    -- Function to retrieve the value associated with a given key
    function Retrieve (Generic_Map: in Map; Key: in Key_Type) return Value_Type is
        begin
            return Generic_Map.Values(Retrieve_Index(Generic_Map, Key));
        end Retrieve;

    -- Function to check if a key exists in the map
    function Contains (Generic_Map: in Map; Key: in Key_Type) return Boolean is
        begin
            for item of Generic_Map.Keys loop
                if item = Key then
                    return True;  -- Key exists in map
                end if;
            end loop;
            return False;  -- Key does not exist in map
        end Contains;

    -- Function to return the size of the map
    function Size (Generic_Map: in Map) return Natural is
        begin
            return Generic_Map.Keys'Length;
        end Size;

    -- Private function to retrieve the index associated with a given key
    function Retrieve_Index (Generic_Map: in Map; Key: in Key_Type) return Positive is
        begin
            for i in Generic_Map.Keys'Range loop
                if Generic_Map.Keys(i) = Key then
                    return i;
                end if;
            end loop;
        end Retrieve_Index;

end Generic_Mapping;