with Ada.Exceptions; -- import the exceptions library

procedure Exception_Handling is

    type ErrorCode is (ERR1, ERR2, ERR3); -- declare an enum type for error codes 
    
    type Error_Message is record -- create a record type for the error messages
        Code : ErrorCode;      -- field for storing the error code
        Desc : String(1..100); -- field for storing the error description
    end record;
    
    Table : array(ErrorCode) of Error_Message; -- declare an array of error messages
    
    -- set the error messages for each error code 
    Table(ERR1) := (ERR1, "Error 1 occurred.");
    Table(ERR2) := (ERR2, "Error 2 occurred.");
    Table(ERR3) := (ERR3, "Error 3 occurred.");
    
    exception Error is new Ada.Exceptions.Exception with
        record
            Err_Code : ErrorCode; -- field for storing the error code
        end record;
        
    procedure Custom_Error(Err : ErrorCode) is -- procedure for throwing custom error
        Msg : Error_Message := Table(Err); -- retrieve message from array based on error code
    begin
        raise Error with Err_Code => Msg.Code; -- raise the custom error with the error code
    end Custom_Error;
    
begin

    -- some code that can potentially raise an error
    if (condition) then
        Custom_Error(ERR1); -- raise ERR1 error
    end if;
    
exception -- exception block for handling exceptions
    when Error : others => -- catch all exceptions of type Error
        case Error.Err_Code is -- match the error code 
            when ERR1 => 
                Put_Line("Error 1 occurred. Please review the code."); -- print error message
            when ERR2 => 
                Put_Line("Error 2 occurred. Please retry."); 
            when ERR3 => 
                Put_Line("Error 3 occurred. Please contact support."); 
        end case;
end Exception_Handling;