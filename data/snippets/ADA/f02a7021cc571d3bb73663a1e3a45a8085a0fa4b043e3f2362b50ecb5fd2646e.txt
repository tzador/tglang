-- This is a complex code snippet in ADA
with Ada.Numerics;
use Ada.Numerics;

procedure Complex_Numbers is

    -- Create a complex number type with two components: real and imaginary
    type Complex_Number is record
        Real : Float;
        Imaginary : Float;
    end record;

    -- Create a function to add two complex numbers
    function "+" (Left, Right : Complex_Number) return Complex_Number is
        Result : Complex_Number;
    begin
        Result.Real := Left.Real + Right.Real;
        Result.Imaginary := Left.Imaginary + Right.Imaginary;

        return Result;
    end "+";

    -- Create a function to multiply two complex numbers
    function "*" (Left, Right : Complex_Number) return Complex_Number is
        Result : Complex_Number;
    begin
        Result.Real := (Left.Real * Right.Real) - (Left.Imaginary * Right.Imaginary);
        Result.Imaginary := (Left.Real * Right.Imaginary) + (Left.Imaginary * Right.Real);

        return Result;
    end "*";

    -- Create a function to display a complex number
    procedure Display (Number : Complex_Number) is
    begin
        if Number.Imaginary = 0.0 then
            Put_Line(Number.Real'Image);
        else
            Put_Line(Number.Real'Image & " + " & Number.Imaginary'Image & "i");
        end if;
    end Display;

    -- Example of adding and multiplying two complex numbers
    A : Complex_Number := (Real => 2.0, Imaginary => 3.0);
    B : Complex_Number := (Real => 4.0, Imaginary => -1.0);
    C : Complex_Number;
    D : Complex_Number;
begin
    -- Display the original complex numbers
    Put_Line("Original Numbers:");
    Display(A);
    Display(B);
    Put_Line("");

    -- Add and display the result
    Put_Line("After Adding:");
    C := A + B;
    Display(C);
    Put_Line("");

    -- Multiply and display the result
    Put_Line("After Multiplying:");
    D := A * B;
    Display (D);
end Complex_Numbers;