procedure Quick_Sort(A : in out Vector;
                     L : Positive;
                     R : Positive) is
-- Implementation of the Quick Sort algorithm in ADA

   V : Integer; -- pivot element
   I, J : Positive; -- loop counters

-- Partition algorithm
function Partition(A : Vector; L : Positive; R : Positive) return Boolean is
   P : Integer; -- partition index
begin
   V := A(L); -- choose pivot element
   I := L + 1; -- initialize left index
   J := R; -- initialize right index

   -- loop until indices cross
   loop
      -- increment left index until value greater than or equal to pivot
      while A(I) < V loop
         I := I + 1;
      end loop;

      -- decrement right index until value less than or equal to pivot
      while A(J) > V loop
         J := J - 1;
      end loop;

      -- swap elements at indices
      if I < J then
         P := A(I);
         A(I) := A(J);
         A(J) := P;
      else
         return J;
      end if;
   end loop;
end Partition;


begin
   if L < R then
      P := Partition(A, L, R); -- partition array
      Quick_Sort(A, L, P - 1); -- sort left subarray
      Quick_Sort(A, P + 1, R); -- sort right subarray
   end if;
end Quick_Sort;