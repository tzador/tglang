---------------------------------------------------------
-- Subprogram: MERGE 
-- Description: This subprogram takes two sorted arrays 
-- and merges them into a single sorted array, using 
-- divide and conquer technique.
-- Parameters: array1 : in  : integer array
--             array2 : in  : integer array
--             merged_array : out : integer array
--             low : in : integer
--             high : in : integer
----------------------------------------------------------
procedure MERGE (array1 : in  : integer array; 
                 array2 : in  : integer array;
                 merged_array : out : integer array;
                 low : in : integer;
                 high : in : integer) is

   -- Define variables
   i : integer := 0;  -- index for array1
   j : integer := 0;  -- index for array2
   k : integer := 0;  -- index for merged_array
   mid : integer := 0;  -- middle index for array1 and array2
   
begin
   -- Set middle index
   mid := (low+high)/2;
   
   -- Loop through array1 and array2 until one is fully traversed
   while i <= mid and j <= high-mid loop
      
      -- If element in array1 is smaller, add it to merged_array
      if array1(i) <= array2(j) then
         merged_array(k) := array1(i);
         i := i + 1;
         
      -- If element in array2 is smaller, add it to merged_array
      elsif array2(j) < array1(i) then
         merged_array(k) := array2(j);
         j := j + 1;
      end if;
      
      k := k + 1; -- Increment merged_array index
   end loop;
   
   -- Add remaining elements from array1 to merged_array
   while i <= mid loop
      merged_array(k) := array1(i);
      i := i + 1;
      k := k + 1;
   end loop;
   
   -- Add remaining elements from array2 to merged_array
   while j <= high-mid loop
      merged_array(k) := array2(j);
      j := j + 1;
      k := k + 1;
   end loop;
   
end MERGE;
---------------------------------------------------------