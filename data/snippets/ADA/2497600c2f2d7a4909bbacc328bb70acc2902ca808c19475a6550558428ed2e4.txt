-- Package Declaration --
package My_Package is

   -- Constant Declarations --
   Page_Size  : constant := 4096;
   Max_Rows   : constant := 100;
   Max_Columns : constant := 20;
   Pi_Value   : constant := 3.14159;

   -- Array Declaration --
   type Row_Array is array (1 .. Max_Rows) of Integer;
   type Matrix is array (1 .. Max_Rows, 1 .. Max_Columns) of Integer;

   -- Record Declaration --
   type Employee_Record is record
      Id_Number : Integer;
      Name      : String(1 .. 20);
      Salary    : Float;
   end record;

   -- Variable Declarations --
   Total_Salary   : Float;
   Num_Employees  : Integer;
   Row_Index      : Integer;
   Col_Index      : Integer;
   Employee_List  : Row_Array (1 .. Max_Rows);
   Payroll_Matrix : Matrix;

   -- Procedure Declaration --
   procedure Calculate_Salary (Emp_Rec : in out Employee_Record);

   -- Function Declaration --
   function Average_Salary (Emp_List : Row_Array) return Float;

end My_Package;

-- Package Body --
package body My_Package is

   -- Procedure Implementation --
   procedure Calculate_Salary (Emp_Rec : in out Employee_Record) is
   begin
      Emp_Rec.Salary := Emp_Rec.Salary * 1.1;
   end Calculate_Salary;

   -- Function Implementation --
   function Average_Salary (Emp_List : Row_Array) return Float is
      Total_Salary : Float := 0.0;
   begin
      for I in Emp_List'Range loop
         Total_Salary := Total_Salary + Emp_List (I);
      end loop;
      return Total_Salary / Emp_List'Length;
   end Average_Salary;

end My_Package;

-- Main Program --
with Ada.Text_IO; use Ada.Text_IO;
with My_Package; use My_Package;
procedure Main is
begin
   -- Output constants and array type declarations --
   Put_Line ("Page Size: " & Page_Size'Image);
   Put_Line ("Max Rows: " & Max_Rows'Image);
   Put_Line ("Max Columns: " & Max_Columns'Image);
   Put_Line ("Pi Value: " & Pi_Value'Image);
   Put_Line ("");
   Put_Line ("Array type: " & Row_Array'Image);
   Put_Line ("Matrix type: " & Matrix'Image);
   Put_Line ("");

   -- Output record type declaration --
   Put_Line ("Record Type: Id_Number: Integer Name: String(1 .. 20) Salary: Float");
   Put_Line ("");

   -- Output variables and procedure call --
   Total_Salary := 75000.0;
   Num_Employees := 5;
   for I in 1 .. Num_Employees loop
      Employee_List (I) := Integer(75000.0 / Num_Employees);
      Employee_List (I) := Employee_List (I) * (1 + 0.1 * I);
   end loop;
   Put_Line ("Before salary adjustment:");
   for I in Employee_List'Range loop
      Put_Line ("Employee " & I'Image & " salary: " & Employee_List(I)'Image);
   end loop;
   Put_Line ("");
   for J in Employee_List'Range loop
      Calculate_Salary (Employee_List (J));
   end loop;
   Put_Line ("After salary adjustment:");
   for J in Employee_List'Range loop
      Put_Line ("Employee " & J'Image & " salary: " & Employee_List (J)'Image);
   end loop;
   Put_Line ("");

   -- Output function call --
   Put_Line ("Average Salary: " & Average_Salary (Employee_List)'Image);

end Main;