-- This is a complex code snippet in ADA

-- Declare a package for the code
package Complex_Code is

-- Declare a type called Node with two members: a string and an integer
type Node is
    record
        Name : String;
        Value : Integer;
    end record;

-- Declare an array of Nodes
type Node_Array is array (Integer range <>) of Node;

-- Declare a function that takes in an array of Nodes and returns the sum of all the Values
function Sum_Values (Nodes : in Node_Array) return Integer is
    Sum : Integer := 0;
begin
    -- Loop through the array and add each Node's Value to the Sum
    for I in Nodes'range loop
        Sum := Sum + Nodes(I).Value;
    end loop;

    return Sum;
end Sum_Values;

-- Declare a procedure that takes in an array of Nodes and sorts it based on the Value member
procedure Sort_Nodes (Nodes : in out Node_Array) is
    Temp : Node;
begin
    -- Loop through the array and compare each Node's Value with the next Node's Value
    for I in Nodes'range loop
        for J in 0..Nodes'length - 2 loop
            -- If the current Node's Value is greater than the next Node's Value
            if Nodes(J).Value > Nodes(J + 1).Value then
                -- Swap the Nodes positions in the array
                Temp := Nodes(J);
                Nodes(J) := Nodes(J + 1);
                Nodes(J + 1) := Temp;
            end if;
        end loop;
    end loop;
end Sort_Nodes;

-- Declare a procedure that takes in an array of Nodes and prints out each Node's Name and Value
procedure Print_Nodes (Nodes : in Node_Array) is
begin
    for I in Nodes'range loop
        -- Print out the Node's Name and Value in a formatted string
        Put_Line("Node" & Nodes(I).Name & " has a value of " & Integer'Image(Nodes(I).Value));
    end loop;
end Print_Nodes;

-- End of package declaration
end Complex_Code;

-- Main program
with Complex_Code;
use Complex_Code;

procedure Main is
    -- Declare an array of Nodes and initialize it with 5 Nodes
    My_Nodes : Node_Array(1..5) := ((Name => "Node 1", Value => 10),
                                    (Name => "Node 2", Value => 5),
                                    (Name => "Node 3", Value => 25),
                                    (Name => "Node 4", Value => 15),
                                    (Name => "Node 5", Value => 20));
begin
    -- Print out the initial array of Nodes
    Put_Line("Initial array of Nodes:");
    Print_Nodes(My_Nodes);

    -- Calculate and print out the sum of all the Node's Values
    Put("The sum of all the Node's Values is: ");
    Put_Line(Integer'Image(Sum_Values(My_Nodes)));

    -- Sort the array of Nodes based on the Value member
    Sort_Nodes(My_Nodes);

    -- Print out the sorted array of Nodes
    Put_Line("Sorted array of Nodes:");
    Print_Nodes(My_Nodes);
end Main;