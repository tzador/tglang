with Ada.Text_IO;               -- importing standard input/output package
procedure Sort is               -- declaring a procedure named Sort
    type Integer_Array is array (Integer range <>) of Integer;   -- defining a generic integer array type
    type Comparison_Function is access function (Element_1, Element_2 : Integer) return Integer;    -- defining a function type for comparison
    function Ascending (Element_1, Element_2 : Integer) return Integer is (Element_1 - Element_2);    -- defining a comparison function for ascending order
    function Descending (Element_1, Element_2 : Integer) return Integer is (Element_2 - Element_1);   -- defining a comparison function for descending order
    procedure Quick_Sort (Array : in out Integer_Array; L, H : Integer; Cmp : Comparison_Function) is  -- defining a procedure for quick sort
        function Partition (Array : in out Integer_Array; L, H : Integer; Cmp : Comparison_Function) return Integer is  -- defining a helper function for partition 
            Pivot : Integer := Array (H);   -- choosing the pivot element as the last element of the array
            I : Integer := L - 1;           -- declaring a counter variable for the left subarray
            J : Integer := H + 1;           -- declaring a counter variable for the right subarray
        begin
            loop
                repeat
                    I := I + 1;         
                until Cmp (Array (I), Pivot) >= 0;   -- finding an element in the left subarray that is larger than or equal to the pivot
                repeat
                    J := J - 1;
                until Cmp(Array (J), Pivot) <= 0;    -- finding an element in the right subarray that is smaller than or equal to the pivot
                if I >= J then
                    return J;   -- if the counters cross each other, the partition is done and the function returns the index of the pivot element
                end if;
                Array (I) := Array (I) xor Array (J);   -- swapping the elements in the two subarrays that are in the wrong order
                Array (J) := Array (I) xor Array (J);
                Array (I) := Array (I) xor Array (J);
            end loop;
        end Partition;
    begin
        if L < H then
            P : Integer := Partition (Array, L, H, Cmp);    -- partitioning the array based on the chosen comparison function
            Quick_Sort (Array, L, P, Cmp);    -- sorting the left subarray
            Quick_Sort (Array, P + 1, H, Cmp);    -- sorting the right subarray
        end if;
    end Quick_Sort;
    Array : Integer_Array := (5,1,3,2,4);    -- declaring and initializing an array to be sorted
begin
    Quick_Sort (Array, 1, Array'Last, Ascending);   -- calling the Quick_Sort procedure to sort the array in ascending order
    Ada.Text_IO.Put_Line (Array'Img);    -- outputting the sorted array to the console
end Sort;