-- Sorts an array using the Quick Sort algorithm

procedure quick_sort(A : in out Integer_Array) is
    Slice_Index : Integer;  -- Index of the current slice being processed
    Slice_Size : Integer;   -- Number of elements in the current slice
    Partition_Index : Integer;  -- Index of the partition between elements larger and smaller than pivot
    Pivot : Integer;   -- The value of the pivot element
    Left_Index : Integer;  -- Index of the first element in the slice
    Right_Index : Integer;  -- Index of the last element in the slice
    Temp : Integer;   -- Variable used for swapping elements

    -- Subroutine for finding the partition index
    procedure find_partition(A : in out Integer_Array; Left : in Integer; Right : in Integer; Partition : out Integer) is
        Pivot_Val : Integer;   -- Value of the pivot element
        i : Integer;   -- Loop variable
    begin
        Pivot_Val := A(Left);  -- Select the first element in the slice as the pivot
        Partition := Left;    -- Initialize the partition index to the beginning of the slice
        for i in Left + 1 .. Right loop
            if A(i) < Pivot_Val then  -- If the current element is smaller than the pivot
                Partition := Partition + 1;  -- Advance the partition index
                -- Swap the current element with the element at the partition index
                Temp := A(i);
                A(i) := A(Partition);
                A(Partition) := Temp;
            end if;
        end loop;
        -- Swap the pivot element with the element at the partition index
        Temp := A(Left);
        A(Left) := A(Partition);
        A(Partition) := Temp;
    end find_partition;

begin
    Slice_Index := 1;  -- Initialize the slice index to the first slice
    Slice_Size := A'Length;   -- Initialize the slice size to the size of the array
    while Slice_Index <= Slice_Size loop
        -- Find the partition index for the current slice
        find_partition(A, Slice_Index, Slice_Size, Partition_Index);
        -- Recursively sort the left and right subarrays
        Left_Index := Slice_Index;  -- First element in the left subarray
        Right_Index := Partition_Index - 1;  -- Last element in the left subarray
        Slice_Index := Partition_Index + 1;  -- First element in the right subarray
        -- Repeat the process on the left and right subarrays
        if Left_Index < Right_Index then  -- If there are elements in the left subarray
            quick_sort(A(Left_Index .. Right_Index));
        end if;
        if Slice_Index < Slice_Size then  -- If there are elements in the right subarray
            quick_sort(A(Slice_Index .. Slice_Size));
        end if;
    end loop;
end quick_sort;