-- This is a program that implements the QuickSort algorithm
-- and uses generics to sort an array of any type

with Ada.Text_IO, Ada.Integer_Text_IO; use Ada.Text_IO, Ada.Integer_Text_IO;
with Ada.Containers.Generic_Array_Sort; use Ada.Containers;

procedure QuickSort is

   -- Generic package for sorting arrays
   package QuickSort_Pkg is new Generic_Array_Sort
        (Index_Type   => Positive,
         Element_Type => Integer);

   -- Example array to sort
   Arr : QuickSort_Pkg.Array_Type :=
      (2, 6, 4, 8, 1, 9, 5, 3, 7, 10);

   -- Procedure to print sorted array
   procedure Print_Array (A : QuickSort_Pkg.Array_Type) is
   begin
      for I in A'Range loop
         Put (Integer'Image (A (I)) & " ");
      end loop;
      New_Line;
   end Print_Array;

   -- Procedure to swap elements in the array
   procedure Swap (A : in out QuickSort_Pkg.Array_Type;
                   I : QuickSort_Pkg.Index_Type;
                   J : QuickSort_Pkg.Index_Type) is
      Temp : QuickSort_Pkg.Element_Type;
   begin
      Temp   := A (I);
      A (I)  := A (J);
      A (J) := Temp;
   end Swap;

   -- Partition procedure for QuickSort
   procedure Partition (A : in out QuickSort_Pkg.Array_Type;
                        Left : QuickSort_Pkg.Index_Type;
                        Right : QuickSort_Pkg.Index_Type;
                        Pivot : QuickSort_Pkg.Element_Type;
                        Mid : out QuickSort_Pkg.Index_Type) is
      I, J : QuickSort_Pkg.Index_Type := Left;
   begin
      loop
         while A (I) < Pivot loop
            I := I + 1;
         end loop;

         while A (J) > Pivot loop
            J := J - 1;
         end loop;

         if I >= J then
            Mid := J;
            exit;
         end if;

         Swap (A, I, J);
         I := I + 1;
         J := J - 1;
      end loop;
   end Partition;

   -- QuickSort algorithm
   procedure Sort (A : in out QuickSort_Pkg.Array_Type;
                   Left : QuickSort_Pkg.Index_Type;
                   Right : QuickSort_Pkg.Index_Type) is
      Pivot : QuickSort_Pkg.Element_Type;
      Mid : QuickSort_Pkg.Index_Type;
   begin
      if Left < Right then
         Pivot := A (Right);
         Partition (A, Left, Right, Pivot, Mid);
         Sort (A, Left, Mid - 1);
         Sort (A, Mid + 1, Right);
      end if;
   end Sort;

begin
   -- Print unsorted array
   Put_Line ("Unsorted array: ");
   Print_Array (Arr);

   -- Sort the array using QuickSort
   QuickSort_Pkg.Sort (Arr);

   -- Print sorted array
   Put_Line ("Sorted array: ");
   Print_Array (Arr);
end QuickSort;