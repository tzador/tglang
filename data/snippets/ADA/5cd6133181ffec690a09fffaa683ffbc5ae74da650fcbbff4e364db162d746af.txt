-- This is a program that implements Dijkstra's algorithm for finding shortest paths in a weighted graph.

procedure Dijkstra ( G : in Graph; Source : in Node; Distances : out Array ) is

    -- Initialization
    for each node in G loop
        Distances(node) := Infinite; -- set initial distance to infinity
        Previous(node) := null; -- set previous node to null
    end loop;

    Distances(Source) := 0; -- set distance of source node to 0

    -- Create priority queue Q from set of all nodes in G
    declare
        Q : PriorityQueue := CreatePriorityQueue(G);

    -- Main loop
    while not Q.isEmpty loop

        -- Find node u with minimum distance in Q
        u : Node := Q.extractMinimum();

        -- For each neighbor v of u
        for each neighbor v of u in G loop

            -- Calculate tentative distance from source to v
            alt : Integer := Distances(u) + G.weight(u, v);

            -- If new distance is shorter than current distance
            if alt < Distances(v) then

                -- Update distance and previous node
                Distances(v) := alt;
                Previous(v) := u;

                -- Update priority queue with new minimum distance
                Q.decreaseKey(v, alt);
            end if;
        end loop;
    end loop;

end Dijkstra;