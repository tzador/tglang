--Define a generic package with a generic type T
generic
    type T is private;       --private type parameter
package Example is
    type List is array (1..10) of T;    --array type declared using generic type T

    function Sum (Arr: List) return T;  --function that takes in a List type array
    --and returns a value based on the type T

    function Square (Arr: List) return List; --function that takes in a List type array
    --and returns an array of type List

private
    type Node is record        --private type declaration for the Node structure
        Data : T;
        Next : access Node;
    end record;

    type LinkedList is access Node; --type declaration for the linked list using Node type

    function Sum (Arr: List) return T is --private function for computing the sum of the values in the array
        SumTemp : T := 0;
    begin
        for I in Arr'Range loop
            SumTemp := SumTemp + Arr (I);
        end loop;

        return SumTemp;
    end Sum;

    function Square (Arr: List) return List is --private function for calculating the square of each value in the array
        SquareTemp : List;
    begin
        for I in Arr'Range loop
            SquareTemp (I) := Arr (I) * Arr (I);
        end loop;

        return SquareTemp;
    end Square;

end Example;