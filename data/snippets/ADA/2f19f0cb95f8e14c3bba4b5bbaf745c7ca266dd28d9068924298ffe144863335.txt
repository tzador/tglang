procedure permutation(n : integer; input_array : in array(n) of integer) is
    -- This procedure generates all possible permutations of the given input array.
    -- It takes two parameters:
    -- n: the size of the input array
    -- input_array: the array to be permuted
    -- Example of usage:
    -- permutation(5, (1, 2, 3, 4, 5));

    temp : integer; -- temporary variable for swapping elements
    permutation_array : array(n) of integer; -- stores the current permutation
    used : array(1 .. n) of boolean := (others => false); -- tracks which elements have been used
    count : integer := 0; -- counter for number of permutations

    -- Recursive helper procedure to generate permutations
    procedure generate_permutations(k : integer) is
        -- Base case: when all elements have been used, print the permutation and increment count
        when k = n + 1 loop
            count := count + 1;
            ada.text_io.put_line("Permutation " & count'Image & ": " & permutation_array'Image);
        end loop;

        -- Recursive step: for each index k, try all unused elements
        for i in 1 .. n loop
            if not used(i) then
                -- Swap the current element with the element at index k
                temp := permutation_array(k);
                permutation_array(k) := input_array(i);
                permutation_array(i) := temp;

                -- Mark the element as used and recursively call the procedure with k + 1
                used(i) := true;
                generate_permutations(k + 1);

                -- Unmark the element and swap back to restore original array
                used(i) := false;
                permutation_array(i) := permutation_array(k);
                permutation_array(k) := input_array(i);
            end if;
        end loop;
    end generate_permutations;

begin
    -- Initialize permutation_array with input array
    permutation_array := input_array;

    -- Call generate_permutations with starting index 1
    generate_permutations(1);
end permutation;