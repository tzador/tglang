with Ada.Text_IO;               -- Import the Ada standard library package Text_IO

procedure Main is               -- Declare main procedure
    type Natural_Array is array (Positive range <>) of Natural;   -- Declare an unconstrained array type
    procedure Insert_At (Index : in Positive; Item : in Natural; Array : in out Natural_Array)
                                -- Insert an item at given index in the array
    is 
        temp : Natural;
    begin
        temp := Array(Index);   -- Store item at the given index in a temporary variable
        Array(Index) := Item;   -- Place new item at the given index
        for J in Index+1..Array'Last loop  -- Loop through the rest of the array
            temp := temp + Array(J);       -- Add each element to the temporary variable
            Array(J) := temp;               -- Assign the sum value to each element
        end loop;
        temp := Index;      -- Store index in temporary variable
        for J in temp+1..Array'Last loop  -- Loop through the rest of the array
            if Array(J-1) >= Array(J) then  -- Check if previous element is greater than current element
                Array(J) := Array(J-1);     -- If yes, swap places
                Array(J-1) := temp;
                temp := J-1;                -- Update temporary index
            else
                exit;    -- If not, exit loop and procedure
            end if;
        end loop;
    end Insert_At;

begin
    Ada.Text_IO.Put("Enter the number of elements in array: ");  -- Prompt user to enter number of elements
    declare
        N : Integer;
    begin
        Ada.Text_IO.Get(N);              -- Get the input from user
        declare
            Arr : Natural_Array(1..N);   -- Declare an array of N elements
        begin
            for I in 1..N loop            -- Loop to get the elements from user
                Ada.Text_IO.Put("Enter element " & Natural'Mod(I, 10)'Image & ": ");   -- Print label for element
                Ada.Text_IO.Get(Arr(I));  -- Get input
            end loop;
            Ada.Text_IO.New_Line;         -- Print new line
            for I in Arr'Range loop       -- Loop to display original array
                Ada.Text_IO.Put(Arr(I)'Image & " ");   -- Print element
            end loop;
            Ada.Text_IO.New_Line;         -- Print new line
            Insert_At(2, 10, Arr);        -- Insert item (10) at index (2) in the array
            for I in Arr'Range loop       -- Loop to display updated array
                Ada.Text_IO.Put(Arr(I)'Image & " ");   -- Print element
            end loop;
        end;
    end;
end Main;   -- End program