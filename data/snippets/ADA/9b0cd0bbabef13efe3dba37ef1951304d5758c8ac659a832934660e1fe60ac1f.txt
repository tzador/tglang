--This code snippet displays the use of a generic package in Ada to implement a stack data structure.
with Ada.Containers.Generic_Stacks; --importing generic stack package

generic
   type Stack_Type is private; --defining a generic private type for the stack
package My_Stack is

   type Stack_Type is private; --defining the private type for a stack

   procedure Push (S: in out Stack_Type; Item: in Integer); --procedure for pushing an item onto the stack
   procedure Pop (S: in out Stack_Type; Item: out Integer); --procedure for popping an item off the stack
   function Is_Empty(S: Stack_Type) return Boolean; --function for checking if the stack is empty
   function Top(S: Stack_Type) return Integer; --function for getting the top item of the stack

private
   use Ada.Containers.Generic_Stacks; --inheriting from the generic stack package
   type Stack_Type is new Stacks.Stack(Integer); --declaring the private type as a stack of integers
end My_Stack;

with Ada.Text_IO; --importing text input/output package for displaying output
with My_Stack; --importing the generic stack package created

procedure Main is
   
   type Integer_Stack is new My_Stack.Stack_Type; --declaring a stack of integers
   Int_Stack: Integer_Stack; --instantiating the stack
   Item: Integer; --declaring a variable for holding the popped item
begin
   Int_Stack.Push(5); --pushing an integer onto the stack
   Int_Stack.Push(10); --pushing another integer onto the stack
   Ada.Text_IO.Put_Line("Top item of the stack: " & Integer'Image(Int_Stack.Top)); --displaying the top item of the stack
   Int_Stack.Pop(Item); --popping an item off the stack
   Ada.Text_IO.Put_Line("Popped item: " & Integer'Image(Item)); --displaying the popped item
   Ada.Text_IO.Put_Line("Is the stack empty? " & Boolean'Image(Int_Stack.Is_Empty)); --checking if the stack is empty
end Main;