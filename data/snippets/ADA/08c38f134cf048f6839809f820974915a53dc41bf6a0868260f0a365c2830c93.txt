-- Declaration of an array of integers with a size of 10
type Int_Array is array (1..10) of Integer;

-- Declaration of a record type with two fields (both of type Integer)
type My_Record is record
    Field1 : Integer;
    Field2 : Integer;
end record;

-- Declaration of an access pointer to a My_Record type
type My_Record_Ptr is access My_Record;

-- Declaration of a function that takes in an Integer and returns a My_Record pointer
function create_record(num : Integer) return My_Record_Ptr is
    -- Local variable of type My_Record_Ptr
    record_ptr : My_Record_Ptr;
begin
    -- Dynamically allocating memory for the record
    record_ptr := new My_Record' (Field1 => num, Field2 => num * num);
    -- Returning the pointer to the record
    return record_ptr;
end create_record;

-- Main program
procedure Main is
    -- Local variable of type Int_Array
    numbers : Int_Array;
    -- Local variable of type My_Record_Ptr
    record_ptr : My_Record_Ptr;
begin
    -- Setting values in the array
    numbers(1) := 10;
    numbers(2) := 20;
    numbers(3) := 30;
    numbers(4) := 40;
    numbers(5) := 50;
    numbers(6) := 60;
    numbers(7) := 70;
    numbers(8) := 80;
    numbers(9) := 90;
    numbers(10) := 100;

    -- Calling the function to create a record and storing the returned pointer in record_ptr
    record_ptr := create_record(5);

    -- Printing out the values in the record using the access pointer syntax
    Put_Line("Field 1: " & record_ptr.all.Field1'Image);
    Put_Line("Field 2: " & record_ptr.all.Field2'Image);
end Main;