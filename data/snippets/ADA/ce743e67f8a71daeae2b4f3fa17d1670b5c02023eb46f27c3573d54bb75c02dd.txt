-- Package declaration
package My_Code is

   -- Abstract type to represent a set of integers
   type Int_Set is tagged private;

   -- Subprogram to add an integer to the set
   procedure Add (S : in out Int_Set; I : Integer);

   -- Subprogram to remove an integer from the set
   procedure Remove (S : in out Int_Set; I : Integer);

   -- Function to check if the set is empty
   function Is_Empty (S : Int_Set) return Boolean;

private

   -- Tagged record type to store set elements
   type Set_Element (Num : Integer) is
       record
           Value : Integer := Num;
       end record;

   -- Tagged record type to store set elements
   type Set_Node is
       record
           Data : Set_Element;
           Next : access Set_Node;
       end record;

   type Set_Ptr is access Set_Node;

   -- Tagged record type to store the set itself
   type Int_Set is tagged record
       Head : Set_Ptr := null;
   end record;

end My_Code;

-- Package body
package body My_Code is

   -- Subprogram to add an integer to the set
   procedure Add (S : in out Int_Set; I : Integer)
   is
       New_Node : Set_Ptr;
   begin
       -- Check if integer is already in the set
       if not Is_Empty (S) then
           Ptr : Set_Ptr;
           Ptr := S.Head;
           while Ptr.Next /= null loop
               if Ptr.Data.Value = I then
                   -- If integer is found, do nothing and exit
                   return;
               end if;
               Ptr := Ptr.Next;
           end loop;
       end if;

       -- Create new node and assign it the value
       New_Node := new Set_Node;
       New_Node.Data.Value := I;

       -- Add node to the front of the set
       New_Node.Next := S.Head;
       S.Head := New_Node;
   end Add;

   -- Subprogram to remove an integer from the set
   procedure Remove (S : in out Int_Set; I : Integer)
   is
       Ptr : Set_Ptr;
       Prev_Ptr : Set_Ptr;
   begin
       -- Check if set is empty
       if Is_Empty (S) then
           return;
       else
           Prev_Ptr := S.Head;
           Ptr := S.Head;
           while Ptr.Next /= null loop
               if Ptr.Data.Value = I then
                   -- If integer is found, remove it and exit
                   Prev_Ptr.Next := Ptr.Next;
                   return;
               end if;
               Prev_Ptr := Ptr;
               Ptr := Ptr.Next;
           end loop;
           -- If integer is not found, do nothing
       end if;
   end Remove;

   -- Function to check if the set is empty
   function Is_Empty (S : Int_Set) return Boolean
   is
       Ptr : Set_Ptr;
   begin
       Ptr := S.Head;
       -- If set is empty, return true
       if Ptr = null then
           return True;
       else
           -- Otherwise, return false
           return False;
       end if;
   end Is_Empty;
   
end My_Code;