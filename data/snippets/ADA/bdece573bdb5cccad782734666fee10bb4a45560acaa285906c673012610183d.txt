-- This is a code snippet in ADA that defines a generic package with several procedures for sorting an array of integers

generic
    type Item is (<>); -- the type of elements to be sorted
    with function "=" (A, B: Item) return Boolean is <>;
    with function "<" (A, B: Item) return Boolean is <>;
package Sorting is

    -- Procedure to swap two elements in an array
    procedure Swap (A: in out Item; B: in out Item);

    -- Procedure to check if an array is sorted in ascending order
    procedure Is_Sorted (Arr: in Item; Sorted: out Boolean);

    -- Procedure to implement the Bubble Sort algorithm for an array of integers
    procedure Bubble_Sort (Arr: in out Item);

    -- Procedure to implement the Selection Sort algorithm for an array of integers
    procedure Selection_Sort (Arr: in out Item);

    -- Procedure to implement the Insertion Sort algorithm for an array of integers
    procedure Insertion_Sort (Arr: in out Item);

private

    -- Generic procedure to swap two elements in an array (used by other sorting procedures)
    procedure Swap (A: in out Item; B: in out Item) is
        Tmp: Item;
        begin
            Tmp := A;
            A := B;
            B := Tmp;
    end Swap;

    -- Procedure to check if an array is sorted in ascending order
    procedure Is_Sorted (Arr: in Item; Sorted: out Boolean) is
        begin
            for I in Arr'Range loop
                if I < Arr'Last then
                    if not (Arr(I) <= Arr(I+1)) then
                        Sorted := False;
                        return;
                    end if;
                end if;
            end loop;
            Sorted := True;
    end Is_Sorted;

    -- Procedure to implement the Bubble Sort algorithm for an array of integers
    procedure Bubble_Sort (Arr: in out Item) is
        Swapped: Boolean := True;
        begin
            while Swapped loop
                Swapped := False;
                for I in Arr'First .. Arr'Last-1 loop
                    if Arr(I) > Arr(I+1) then
                        Swap(Arr(I), Arr(I+1));
                        Swapped := True;
                    end if;
                end loop;
            end loop;
    end Bubble_Sort;

    -- Procedure to implement the Selection Sort algorithm for an array of integers
    procedure Selection_Sort (Arr: in out Item) is
        Min_Item: Item;
        Min_Index: Integer;
        begin
            for I in Arr'First .. Arr'Last-1 loop
                Min_Index := I;
                Min_Item := Arr(I);
                for J in I+1 .. Arr'Last loop
                    if Arr(J) < Min_Item then
                        Min_Index := J;
                        Min_Item := Arr(J);
                    end if;
                end loop;
                Swap(Arr(I), Arr(Min_Index));
            end loop;
    end Selection_Sort;

    -- Procedure to implement the Insertion Sort algorithm for an array of integers
    procedure Insertion_Sort (Arr: in out Item) is
        Inserted_Item: Item;
        Current_Index: Integer;
        begin
            for I in Arr'First+1 .. Arr'Last loop
                Inserted_Item := Arr(I);
                Current_Index := I;
                while Current_Index > Arr'First and Arr(Current_Index-1) > Inserted_Item loop
                    Arr(Current_Index) := Arr(Current_Index-1);
                    Current_Index := Current_Index - 1;
                end loop;
                Arr(Current_Index) := Inserted_Item;
            end loop;
    end Insertion_Sort;

end Sorting;