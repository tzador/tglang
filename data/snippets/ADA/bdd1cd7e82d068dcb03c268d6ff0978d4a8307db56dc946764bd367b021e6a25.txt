-- Generic package providing a circular buffer data structure
generic
   type Item is private; -- type of items to be stored in the buffer
   Capacity : Positive; -- maximum number of elements the buffer can hold
package Circular_Buffer is

	-- Custom exception to be raised when buffer is full
	Full_Exception : exception;

	-- Instantiation of buffer with given capacity
	Buffer : array (1 .. Capacity) of Item;

	-- Indices to keep track of front and rear of buffer
	Front : Natural := 1;
	Rear : Natural := 1;

	-- Procedure to add new item to the rear of the buffer
	procedure Enqueue (New_Item : in Item);

	-- Function to remove and return item from the front of the buffer
	function Dequeue return Item;

	-- Function to determine if buffer is empty
	function Is_Empty return Boolean;
	
	-- Function to determine if buffer is full
	function Is_Full return Boolean;		
end Circular_Buffer;

package body Circular_Buffer is

	-- Implementation of enqueue procedure
	procedure Enqueue (New_Item : in Item) is
	begin
		-- Check if buffer is full
		if Is_Full then
			-- Raise full exception
			raise Full_Exception;
		else
			-- Add new item to the rear of the buffer
			Buffer(Rear) := New_Item;

			-- Increment rear index, taking into account circular nature of buffer
			Rear := (Rear mod Capacity) + 1;
		end if;
	end Enqueue;

	-- Implementation of dequeue function
	function Dequeue return Item is
		-- Variable to hold item to be returned
		Item_To_Return : Item;
	begin
		-- Check if buffer is empty
		if Is_Empty then
			-- Return Item_To_Return as default value of item type
			return Item_To_Return;
		else
			-- Retrieve item from front of buffer
			Item_To_Return := Buffer(Front);

			-- Increment front index, taking into account circular nature of buffer
			Front := (Front mod Capacity) + 1;

			-- Return retrieved item
			return Item_To_Return;
		end if;
	end Dequeue;

	-- Implementation of is_empty function
	function Is_Empty return Boolean is
	begin
		-- Check if front and rear indices are equal
		if Front = Rear then
			return True; -- buffer is empty
		else
			return False; -- buffer is not empty
		end if;
	end Is_Empty;

	-- Implementation of is_full function
	function Is_Full return Boolean is
	begin
		-- Calculate length of buffer
		Length : Natural := Rear - Front;

		-- If buffer length is equal to capacity, then buffer is full
		if Length = Capacity then
			return True;
		else
			return False;
		end if;
	end Is_Full;
end Circular_Buffer;