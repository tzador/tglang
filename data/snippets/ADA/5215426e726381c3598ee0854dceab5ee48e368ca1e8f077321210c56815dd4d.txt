------------------------------------------------------------------
-- Project: Quicksort
-- Author: John Smith
-- Date: 01/01/2020
-- Description: Implementation of Quicksort algorithm in ADA

-- Main procedure to handle sorting
procedure Quicksort (A : in out Array_Type; L, R: Integer)
is

    i, j, pivot : Integer;

    -- Sub-procedure to partition the array
    procedure Partition (L, R: Integer) is
    begin
        pivot := L;
        i := L;
        j := R;
        while i < j loop
            -- Find index where element is larger than pivot
            while A(i) <= A(pivot) loop
                i := i+1;
            end loop;
            -- Find index where element is smaller than pivot
            while A(j) >= A(pivot) loop
                j := j-1;
            end loop;
            -- Swap elements if indices are still out of order
            if i < j then
                Swap(A(i), A(j));
            end if;
        end loop;
        -- Move pivot to correct position
        Swap(A(pivot), A(j));
        -- Return index of pivot
        return j;
    end Partition;

begin
    -- Base case
    if L < R then
        -- Split array into two partitions
        pivot := Partition(L, R);
        -- Sort left partition
        Quicksort(A, L, pivot-1);
        -- Sort right partition
        Quicksort(A, pivot+1, R);
    end if;
end Quicksort;