procedure Merge (p: in out List; begin: in List; end: in List) is
    begin1, end1, begin2, end2: Integer;
    temp1, temp2, temp3: Node := Nil;
    temp4, temp5: List;
begin
    -- Find the correct locations to insert the list
    begin1 := p; end1 := p;
    while end1.not_equal(Nil) and end1.data < begin.data loop
        temp1 := end1;
        end1 := end1.next;
    end loop;
    if end1 = Nil then
        while begin.not_equal(Nil) loop
            temp1.next := begin;
            temp1 := begin;
            begin := begin.next;
        end loop;
        return;
    end if;
    -- Calculate the remaining indexes
    begin2 := end1;
    end2 := end1;
    while end2.not_equal(Nil) loop
        temp1 := end2;
        end2 := end2.next;
    end loop;
    temp1.next := Nil;
    -- Compare elements and merge the lists
    loop
        if begin1 = end1 then
            temp2 := begin2;
            while temp2.not_equal(Nil) loop
                temp3 := temp2;
                temp2 := temp2.next;
                temp1.next := temp3;
                temp1 := temp3;
            end loop;
            temp1.next := begin;
            return;
        elsif begin2 = end2 then
            temp2 := begin1;
            while temp2.not_equal(Nil) loop
                temp3 := temp2;
                temp2 := temp2.next;
                temp1.next := temp3;
                temp1 := temp3;
            end loop;
            temp1.next := begin;
            return;
        elsif begin1.data < begin2.data then
            temp1.next := begin1;
            temp1 := begin1;
            begin1 := begin1.next;
        else
            temp1.next := begin2;
            temp1 := begin2;
            begin2 := begin2.next;
        end if;
    end loop;
end Merge;