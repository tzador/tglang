-- This is a comment
-- Package declaration for a multi-dimensional array data structure
package Multi_Dimensional_Array is

   -- Initializing constant for the maximum dimensions of the array
   Max_Dims: constant Integer := 3;

   -- Defining the array data structure with generic types
   type Array is array (Positive range <>, Positive range <>) of Element_Type;
   type Element_Type is private;

   -- Procedure for initializing the array with given dimensions and default values
   procedure Init_Array(Structure: out Array; Dims: Positive_Array) is
      Dimensions_Error: exception;

      -- Checking if the number of dimensions is within the maximum limit
      procedure Check_Dimensions is
         begin
            if Dims'Length > Max_Dims then
               raise Dimensions_Error;
            end if;
      end Check_Dimensions;

      -- Initializing the array with the given dimensions and populating with default values
      procedure Initialize is
         begin
            Structure := (others => (others => default_element));
            for I in 1..Dims(1) loop
               for J in 1..Dims(2) loop
                  if Dims'Length > 2 then
                     for K in 1..Dims(3) loop
                        if Dims'Length > 3 then
                           -- Code for initializing additional dimensions can be added here
                        end if;
                        Structure(I,J,K) := default_element;
                     end loop;
                  end if;
                  Structure(I,J) := default_element;
               end loop;
            end loop;
         end Initialize;

      begin
         Check_Dimensions;
         Initialize;
      end Init_Array;
end Multi_Dimensional_Array;