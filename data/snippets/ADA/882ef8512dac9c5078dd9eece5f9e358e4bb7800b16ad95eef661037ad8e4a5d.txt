-- This is a code snippet in ADA.
-- It creates a generic package for a binary search tree data structure.
-- The package uses generics to allow for different data types to be used.
-- It also includes functions for inserting, removing, and searching for nodes in the tree.

package Binary_Search_Tree is

    -- Generic parameter T represents the data type stored in the nodes of the tree
    generic
        type T is private;

    -- Data structure for a node in the tree
    type TreeNode is record
        Value: T;
        Left: TreeNode_Ptr;
        Right: TreeNode_Ptr;
    end record;

    -- A pointer to the node structure, used for traversal of the tree
    type TreeNode_Ptr is access TreeNode;

    -- Root node of the tree
    Root: TreeNode_Ptr := null;

    -- Function to insert a new node into the tree
    procedure Insert(Node: in out TreeNode_Ptr; NewValue: T) is
    begin
        if Node = null then
            -- If the current node is null, create a new node and insert the value
            Node := new TreeNode'(Value => NewValue, Left => null, Right => null);
        else
            -- Otherwise, traverse to the left or right child depending on the value
            if NewValue < Node.Value then
                Insert(Node => Node.Left, NewValue => NewValue);
            else
                Insert(Node => Node.Right, NewValue => NewValue);
            end if;
        end if;
    end Insert;

    -- Function to remove a node from the tree
    procedure Remove(Node: in out TreeNode_Ptr; Value: T) is
    begin
        if Node = null then
            -- If the tree is empty, do nothing
            return;
        else
            -- If the value is found at the current node, remove it
            if Node.Value = Value then
                -- Determine which case applies: no children, one child, or two children
                if Node.Left = null and Node.Right = null then
                    -- No children: set node to null to remove it
                    Node := null;
                elsif Node.Left = null then
                    -- One child: replace node with its child
                    Node := Node.Right;
                elsif Node.Right = null then
                    -- One child: replace node with its child
                    Node := Node.Left;
                else
                    -- Two children: replace node with the smallest value in the right subtree
                    Temp_Ptr := Node.Right;
                    while Temp_Ptr.Left /= null loop
                        Temp_Ptr := Temp_Ptr.Left;
                    end loop;
                    Node.Value := Temp_Ptr.Value;
                    Remove(Node => Node.Right, Value => Node.Value);
                end if;
            else
                -- Otherwise, traverse to the left or right child depending on the value
                if Value < Node.Value then
                    Remove(Node => Node.Left, Value => Value);
                else
                    Remove(Node => Node.Right, Value => Value);
                end if;
            end if;
        end if;
    end Remove;

    -- Function to search for a node with the given value
    function Search(Node: TreeNode_Ptr; Value: T) return TreeNode_Ptr is
    begin
        if Node = null then
            -- If the tree is empty or the value is not found, return null
            return null;
        elsif Node.Value = Value then
            -- If the value is found, return the current node
            return Node;
        else
            -- Otherwise, traverse to the left or right child depending on the value
            if Value < Node.Value then
                return Search(Node => Node.Left, Value => Value);
            else
                return Search(Node => Node.Right, Value => Value);
            end if;
        end if;
    end Search;

end Binary_Search_Tree;