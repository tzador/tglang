with Ada.Text_IO; --Import standard Ada library for I/O operations

procedure Main is --Main program

   -- Variables and constants
   type Month is (January, February, March, April, May, June,
       July, August, September, October, November, December);

   type Temperature is range -100 .. 100; -- Temperature range in degrees Celsius
   
   subtype Day is Integer range 1 .. 31; -- Subtype of Integer for days
   subtype Year is Integer range 1900 .. 2100; -- Subtype of Integer for years

   subtype Hours is Integer range 0 .. 23; -- Subtype of Integer for hours   
   subtype Minutes is Integer range 0 .. 59; -- Subtype of Integer for minutes
   subtype Seconds is Integer range 0 .. 59; -- Subtype of Integer for seconds
   
   subtype Hour_Time is
      Record --Record type for storing time in hours, minutes, and seconds
         Hour : Hours;
         Minute : Minutes;
         Second : Seconds;
      End record;

   Max_Temp : constant Temperature := 40;  -- Constant for maximum temperature
   Min_Temp : constant Temperature := -10;  -- Constant for minimum temperature

   type Days_Arr is array (Day range <>, Month range <>) of Temperature; -- 2D array for storing temperature data

   Temps : Days_Arr (1 .. 31, January .. December) := --Instantiate the array with initial values
      --Inner arrays for each month with temperature data
      ((23, 25, 28, 32, 35, 38, 41, 40, 38, 33, 28, 25), --January
       (22, 24, 29, 34, 38, 40, 43, 42, 38, 32, 26, 23), --February
       (21, 23, 26, 30, 34, 38, 40, 39, 37, 32, 28, 25), --March
       (20, 23, 27, 31, 35, 38, 43, 42, 40, 34, 29, 25), --April
       (20, 23, 27, 32, 35, 38, 43, 41, 39, 35, 29, 24), --May
       (19, 22, 26, 30, 34, 38, 43, 42, 40, 36, 29, 25), --June
       (18, 21, 25, 29, 33, 37, 41, 40, 38, 34, 27, 24), --July
       (19, 22, 26, 29, 33, 36, 40, 39, 37, 33, 28, 24), --August
       (19, 22, 26, 30, 34, 38, 43, 41, 39, 35, 28, 23), --September
       (20, 23, 27, 30, 34, 38, 43, 42, 40, 35, 29, 24), --October
       (21, 24, 29, 33, 37, 40, 43, 41, 38, 34, 28, 24), --November
       (22, 24, 29, 32, 36, 39, 42, 40, 37, 31, 25, 23)); --December

   Report : Ada.Text_IO.File_Type; --Declare a file for reporting output
   Date : Ada.Calendar.Time := Ada.Calendar.Clock; --Get current time

begin
   Ada.Text_IO.Create (Report, "Weather_Report.txt"); --Create the report file
   Ada.Text_IO.Put_Line (Report, "Weather Report for " & Ada.Calendar.Day_Of_Week (Date) & " " &
      Ada.Calendar.Day (Date) & "-" & Ada.Calendar.Month (Date)); --Print report header with current date
   Ada.Text_IO.Put_Line (Report, "----------------------------------------"); --Print divider
   Ada.Text_IO.Put_Line (Report, "Temperature Data for the Year: " & Ada.Integer_Text (Ada.Calendar.Year (Date))); --Print year

   for M in Month loop --Iterate over the months
      Ada.Text_IO.Put_Line (Report, "----------------------------------------"); --Print divider
      Ada.Text_IO.Put_Line (Report, "Month: " & M'Image); --Print month name
      Ada.Text_IO.Put_Line (Report, "----------------------------------------"); --Print divider
      Ada.Text_IO.Put_Line (Report, "Day     High     Low     Average"); --Print table headers

      for D in 1 .. Ada.Calendar.Days_In_Month (M, Ada.Calendar.Year (Date)) loop --Iterate over the days in the month
         declare
            High : Temperature;
            Low : Temperature;
            Avg : Temperature;
         begin
            High := Ada.Numerics.Generic_Elementary_Functions.Max (Temps (D, M)); --Get highest temperature for the day
            Low := Ada.Numerics.Generic_Elementary_Functions.Min (Temps (D, M)); --Get lowest temperature for the day
            Avg := (High + Low) / 2; --Calculate average temperature for the day

            Ada.Text_IO.Put_Line (Report, Ada.Text_IO.Integer'Image (D) & "      " & Temperature'Image (High) &
               "       " & Temperature'Image (Low) & "      " & Temperature'Image (Avg)); --Print data for the day
         end;
      end loop;
   end loop;

   Ada.Text_IO.Put_Line (Report, "----------------------------------------"); --Print divider
   Ada.Text_IO.Put_Line (Report, "Report generated on: " & Ada.Calendar.Time'Image (Date)); --Print timestamp
   Ada.Text_IO.Close (Report); --Close the report file
end Main;