-- This is a code snippet that defines and uses a generic package in ADA

generic
   type Item_Type is private; -- This line defines a generic type

package Stack is -- This is the name of the generic package
   type Stack_Type is private;

   procedure Push (Item : Item_Type; Stack : in out Stack_Type); -- This is a procedure that adds an item to the stack

   procedure Pop (Item : out Item_Type; Stack : in out Stack_Type); -- This is a procedure that removes an item from the stack

   function Is_Empty (Stack : in Stack_Type) return Boolean; -- This function checks if the stack is empty

private
   type Stack_Type is record
      Data : array (Integer range <>) of Item_Type; -- This defines an array that can hold any type of data
      Top : Integer := 0; -- This keeps track of the top element in the stack
   end record;

end Stack;

generic package body Stack is
   procedure Push (Item : Item_Type; Stack : in out Stack_Type) is
   begin
      if Stack.Top = Stack.Data'Last then -- Checks if the stack is full
         raise Stack_Exception; -- Raises an exception if the stack is full
      end if;

      Stack.Top := Stack.Top + 1; -- Moves the top pointer up by 1
      Stack.Data(Stack.Top) := Item; -- Adds the item to the stack
   end Push;

   procedure Pop (Item : out Item_Type; Stack : in out Stack_Type) is
   begin
      if Is_Empty(Stack) then -- Checks if the stack is empty
         raise Stack_Exception; -- Raises an exception if the stack is empty
      end if;

      Item := Stack.Data(Stack.Top); -- Retrieves the top item
      Stack.Top := Stack.Top - 1; -- Moves the top pointer down by 1
   end Pop;

   function Is_Empty (Stack : in Stack_Type) return Boolean is
   begin
      return Stack.Top = 0; -- Returns true if the top pointer is pointing to the first element (which is empty)
   end Is_Empty;
end Stack;