-- This is an example of a package in ADA that implements a binary search tree
package Binary_Search_Tree is
    
    type Node;
    
    type Tree is access Node;

 -- Abstract type representing a tree node
    type Node is tagged private;

  -- Function to create a new binary search tree
    function Tree root return Tree;
    pragma Convention (Convention => Ada, Entity => Tree);

  -- Insert a new node into the binary search tree
    procedure Insert 
        (To_Be_Added : Integer;
         Where : in out Tree);
    pragma Convention (Convention => Ada, Entity => Tree);

  -- Retrieve the value of a given node
    function Value (N : Tree) return Integer;
    pragma Convention (Convention => Ada, Entity => Node, Suffix => "");

  -- Return the left child of a given node
    function Left (N : Tree) return Tree;
    pragma Convention (Convention => Ada, Entity => Node, Suffix => "");

  -- Return the right child of a given node
    function Right (N : Tree) return Tree;
    pragma Convention (Convention => Ada, Entity => Node, Suffix => "");

private
    type Node is tagged record
        Left, Right : Tree;
        Data : Integer;
    end record;
end Binary_Search_Tree;

-- Implementation of the package
package body Binary_Search_Tree is

    function Tree root return Tree is
    begin
        -- Initialize the root node with null values
        return new Node'(Left => null, Right => null, Data => 0);
    end root;

    procedure Insert 
        (To_Be_Added : Integer; 
         Where : in out Tree) is

    begin
        if Where = null then
            Where := new Node'(Left => null, Right => null, Data => To_Be_Added);
        else
            if To_Be_Added < Value(Where) then
                Insert(To_Be_Added, Left(Where));
            else
                Insert(To_Be_Added, Right(Where));
            end if;
        end if;
    end Insert;

    function Value (N : Tree) return Integer is
    begin
        return N.all.Data;
    end Value;

    function Left (N : Tree) return Tree is
    begin
        return N.all.Left;
    end Left;

    function Right (N : Tree) return Tree is
    begin
        return N.all.Right;
    end Right;

end Binary_Search_Tree;