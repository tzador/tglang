-- This is a code snippet in ADA

-- Setting up an unconstrained array of integers
type Int_Array is array (Natural range <>) of Integer;

-- Creating a function that will sort the array in ascending order
function Sort (Array : Int_Array) return Int_Array is

    Length : Natural := Array'Length;
    Sorted : Int_Array := Array;

begin

    -- Loop through the array to compare each element
    for I in 0..Length - 1 loop

        -- Set the minimum value to the current element
        Min : Integer := Sorted(I);

        -- Loop through the remaining elements to find the minimum
        for J in I + 1..Length - 1 loop

            -- If the current element is smaller, then swap positions
            if Sorted(J) < Min then

                -- Temporary variable to hold the current element
                Temp : Integer := Sorted(J);

                -- Swap positions
                Sorted(J) := Min;
                Sorted(I) := Temp;

                -- Update the minimum value
                Min := Temp;
            end if;
        end loop;
    end loop;

    -- Return the sorted array
    return Sorted;

end Sort;

-- Initializing the array with unsorted values
Arr : Int_Array := (4, 7, 1, 9, 2);

-- Calling the Sort function and storing the sorted array in a variable
Sorted_Arr : Int_Array := Sort(Arr);

-- Printing the sorted array to the console
Put_Line("Sorted Array: " & Sorted_Arr'Img);