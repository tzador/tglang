-- This is a complex code snippet that uses different data structures and algorithms in the ADA programming language.

-- Declaring an array of integers with size 10
type Integer_Array is array (1..10) of Integer;

-- Initializing the array with random values
procedure Initialize (Array : in out Integer_Array) is
begin
    for i in 1..Array'Length loop
        Array(i) := Integer'Random(100);
    end loop;
end Initialize;

-- Sorting the array using bubble sort algorithm
procedure Bubble_Sort (Array : in out Integer_Array) is
    Temp : Integer;
begin
    for i in 1..Array'Length-1 loop
        for j in 1..Array'Length-i loop
            if Array(j+1) < Array(j) then
                Temp := Array(j);
                Array(j) := Array(j+1);
                Array(j+1) := Temp;
            end if;
        end loop;
    end loop;
end Bubble_Sort;

-- Declaring a singly linked list
type Node;
type Node_Ptr is access Node;
type Node is record
    Data : Integer;
    Next : Node_Ptr;
end record;

-- Initializing the linked list with random values
function Initialize return Node_Ptr is
    Head : Node_Ptr;
    Temp : Node_Ptr;
    Prev : Node_Ptr;
begin
    Head := new Node;
    Prev := Head;
    for i in 1..10 loop
        Temp := new Node;
        Temp.Data := Integer'Random(100);
        Prev.Next := Temp;
        Prev := Temp;
    end loop;
    return Head;
end Initialize;

-- Reversing the linked list
procedure Reverse (Head : in out Node_Ptr) is
    Curr : Node_Ptr := Head;
    Prev : Node_Ptr := null;
    Next : Node_Ptr := null;
begin
    while Curr /= null loop
        Next := Curr.Next;
        Curr.Next := Prev;
        Prev := Curr;
        Curr := Next;
    end loop;
    Head := Prev;
end Reverse;

begin
    -- Initializing the array
    declare
        My_Array : Integer_Array;
    begin
        Initialize(My_Array);
        
        -- Sorting the array
        Bubble_Sort(My_Array);

        -- Printing the sorted array
        for i in 1..My_Array'Length loop
            Put(My_Array(i));
        end loop;
    end;

    -- Initializing the linked list
    declare
        My_Head : Node_Ptr;
    begin
        My_Head := Initialize;
        
        -- Reversing the linked list
        Reverse(My_Head);

        -- Printing the reversed linked list
        while My_Head /= null loop
            Put(My_Head.Data);
            My_Head := My_Head.Next;
        end loop;
    end;
end;