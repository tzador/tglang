-- This program calculates the maximum subarray sum
with Ada.Text_IO, Ada.Integer_Text_IO, Ada.Command_Line, Ada.Containers.Indefinite_Vectors;

procedure Main is
   type Int_Vector is new Ada.Containers.Indefinite_Vectors.Vector(Item_Type => Integer);
   -- Define subprogram that calculates the maximum subarray sum
   function Max_Subarray_Sum(A : Int_Vector) return Integer is
      Sum : Integer := 0;
      Max_Sum : Integer := 0;
      -- Loop through each element in the vector
      for I in A'Range loop
         -- Calculate sum of current element and previous subarray sum
         Sum := A(I) + Sum;
         -- If current sum is greater than previous maximum sum, update maximum sum
         if Sum > Max_Sum then
            Max_Sum := Sum;
         end if;
         -- If current sum is negative, reset sum to 0
         if Sum < 0 then
            Sum := 0;
         end if;
      end loop;
      return Max_Sum;
   end Max_Subarray_Sum;

   -- Main program
   Subprogram : Integer := 1;
   N : Integer;
   Int_Vec : Int_Vector;
begin
   -- Get input for size of vector from command line argument
   Ada.Command_Line.Get_Argument(1, N);
   -- Resize vector to specified size
   Int_Vec.Resize(N);
   -- Get input for vector values from user
   for I in 1..N loop
      Ada.Integer_Text_IO.Get(Integer(Int_Vec(I)));
   end loop;
   -- Calculate maximum subarray sum using subprogram
   Subprogram := Max_Subarray_Sum(Int_Vec);
   -- Print the result
   Ada.Text_IO.Put_Line("Maximum Subarray Sum: " & Integer'Image(Subprogram));
end Main;