--This code snippet is for generating a binary search tree in the programming language ADA

with Ada.Text_IO;         use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

procedure Binary_Search_Trees is
   type Node;
   type Node_Ptr is access Node;
   
   type Node is record
      Value           : Integer;
      Left, Right     : Node_Ptr := null;
   end record;
   
   Root  : Node_Ptr := null;

   procedure Insert(Node : in out Node_Ptr; Value : in Integer) is
   begin
      if Node = null then
         Node := new Node'(Value => Value);
      elsif Node.Value > Value then
         Insert(Node.Left, Value);
      else
         Insert(Node.Right, Value);
      end if;
   end Insert;

   function Find(Value : Integer; Node : Node_Ptr) return Node_Ptr is
   begin
      if Node = null then
         return null;
      elsif Node.Value = Value then
         return Node;
      elsif Node.Value > Value then
         return Find(Value, Node.Left);
      else
         return Find(Value, Node.Right);
      end if;
   end Find;

   procedure Print_InOrder(Node : Node_Ptr) is
   begin
      if Node = null then
         return;
      else
         Print_InOrder(Node.Left);
         Put(Node.Value & " ");
         Print_InOrder(Node.Right);
      end if;
   end Print_InOrder;

   procedure Print_PreOrder(Node : Node_Ptr) is
   begin
      if Node = null then
         return;
      else
         Put(Node.Value & " ");
         Print_PreOrder(Node.Left);
         Print_PreOrder(Node.Right);
      end if;
   end Print_PreOrder;

   procedure Print_PostOrder(Node : Node_Ptr) is
   begin
      if Node = null then
         return;
      else
         Print_PostOrder(Node.Left);
         Print_PostOrder(Node.Right);
         Put(Node.Value & " ");
      end if;
   end Print_PostOrder;
   
   -- Insert values into the tree
   Insert(Root, 5);
   Insert(Root, 2);
   Insert(Root, 9);
   Insert(Root, 1);
   Insert(Root, 4);
   Insert(Root, 6);
   Insert(Root, 3);
   Insert(Root, 8);
   Insert(Root, 7);

   -- Print the tree in in-order, pre-order, and post-order
   Put_Line("In-Order Traversal:");
   Print_InOrder(Root);
   New_Line;
   Put_Line("Pre-Order Traversal:");
   Print_PreOrder(Root);
   New_Line;
   Put_Line("Post-Order Traversal:");
   Print_PostOrder(Root);

end Binary_Search_Trees;