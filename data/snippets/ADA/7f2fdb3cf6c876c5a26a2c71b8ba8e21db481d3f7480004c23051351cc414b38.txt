-- Package specification for complex numbers
package Complex_Numbers is

   type Complex_Number is
      record
         -- The real part of the complex number
         Real : Float;
         -- The imaginary part of the complex number
         Imaginary : Float;
      end record;

   function Add ( A : Complex_Number; B : Complex_Number ) return Complex_Number;
   function Subtract ( A : Complex_Number; B : Complex_Number ) return Complex_Number;
   function Multiply ( A : Complex_Number; B : Complex_Number ) return Complex_Number;
   function Divide ( A : Complex_Number; B : Complex_Number ) return Complex_Number;

   -- The possible errors that can occur during complex number operations
   type Error_Code is ( No_Error, Divide_By_Zero, Over_Overflow, Under_Overflow );
   function Get_Error_Code ( Z : Complex_Number ) return Error_Code;

end Complex_Numbers;

-- Package body for complex numbers
package body Complex_Numbers is

   -- Adds two complex numbers together and returns the result
   function Add ( A : Complex_Number; B : Complex_Number ) return Complex_Number is
      Result : Complex_Number := (Real => A.Real + B.Real, Imaginary => A.Imaginary + B.Imaginary);
   begin
      return Result;
   end Add;

   -- Subtracts two complex numbers and returns the result
   function Subtract ( A : Complex_Number; B : Complex_Number ) return Complex_Number is
      Result: Complex_Number := (Real => A.Real - B.Real, Imaginary => A.Imaginary - B.Imaginary);
   begin
      return Result;
   end Subtract;

   -- Multiplies two complex numbers and returns the result
   function Multiply ( A : Complex_Number; B : Complex_Number ) return Complex_Number is
      Result : Complex_Number := (Real => A.Real * B.Real - A.Imaginary * B.Imaginary,
                                  Imaginary => A.Real * B.Imaginary + A.Imaginary * B.Real);
   begin
      return Result;
   end Multiply;

   -- Divides two complex numbers and returns the result
   function Divide ( A : Complex_Number; B : Complex_Number ) return Complex_Number is
      Result : Complex_Number;
   begin
      -- Check for division by zero
      if B.Real = 0.0 and B.Imaginary = 0.0 then
         -- Set error code and return zero for result
         Result := (Real => 0.0, Imaginary => 0.0);
         Error_Code := Divide_By_Zero;
         return Result;
      end if;
      -- Calculate the denominator and numerator for division operation
      Denominator := B.Real * B.Real + B.Imaginary * B.Imaginary;
      Numerator := A.Real * B.Real + A.Imaginary * B.Imaginary;
      -- Calculate the real and imaginary parts of the result
      Real_Part := Numerator / Denominator;
      Imaginary_Part := (A.Imaginary * B.Real - A.Real * B.Imaginary) / Denominator;
      -- Set error code to no error
      Error_Code := No_Error;
      -- Return the result
      return Result;
   end Divide;

   -- Returns the current error code associated with a complex number
   function Get_Error_Code ( Z : Complex_Number ) return Error_Code is
   begin
      return Error_Code;
   end Get_Error_Code;

end Complex_Numbers;