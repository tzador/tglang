-- This code snippet generates a random permutation of integers from 1 to 10

with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with Ada.Containers.Vectors;
with Ada.Containers.Vectors;
with Ada.Containers.Vectors;

procedure Random_Permutation is
    type Int_Vector_Type is array (Positive range <>) of Integer;

    generic
        type T_Element (<>) is private;
    package Random_Layout is
        type Ref is access all T_Element;
        type Array is array (Positive range <>) of Ref;
    package body Random_Layout is
        type Ref is access T_Element;
        task Pool is new Ada.Containers.Vectors.Generic_Indexed_Queue (Positive, Ref);
        package Integer_IO is new Ada.Text_IO.Integer_IO (Positive);
        Int_Vector : Int_Vector_Type (1..10);
        Int_Store : Array (1..10);
        I, J : Positive := 1;
        Use : Ref := null;
        Generator : Pool.Master;
    begin
        Put_Line ("Generating a random permutation...");
        Generator.Ensure_Capacity (10);
        while not Generator.Full loop
            Pool.Cycle;
            Use := new Integer'(Integer_IO.Value (Minimum => 1, Maximum => 10));
            if Pool.Insert (Use, Fail_If => Pool.Is_Full) then
                Int_Store (I) := Use;
                Generator.Enqueue (I);
                I := I + 1;
            end if;
        end loop;
        for I in Generator'Range loop
            Int_Vector (I) := Positive'Val (Generator.Dequeue (Position => I).all);
        end loop;
        for I in Int_Vector'First .. Int_Vector'Last loop
            Ada.Integer_Text_IO.Put (Item => Int_Vector (I));
            Ada.Text_IO.Put (" ");
        end loop;
        New_Line;
        for I in Pool'Range loop
            null;
        end loop;
    end Random_Layout;
begin
    null;
end Random_Mapping;