with Text_IO; use Text_IO;
procedure Complex_Code is
  type Array is array (Integer range <>, Integer range <>) of Integer; -- defines a 2-dimensional array
  procedure Matrix_Multiply (A, B : in Array; C : out Array) is
    Row_Index : Integer;
    Column_Index : Integer;
    Inner_Index : Integer;
  begin
    for Row_Index in A'Range(1) loop -- loops through first dimension of A
      for Column_Index in B'Range(2) loop -- loops through second dimension of B
        C (Row_Index, Column_Index) := 0; -- initialize C element to 0
        for Inner_Index in A'Range(2) loop -- loops through inner dimension of A (or second dimension of B)
          C (Row_Index, Column_Index) := C (Row_Index, Column_Index) + A (Row_Index, Inner_Index) * B (Inner_Index, Column_Index); -- multiplies inner elements and adds to C element
        end loop;
      end loop;
    end loop;
  end Matrix_Multiply;
  
  X : Array (1 .. 2, 1 .. 3) := ((1, 2, 3), (4, 5, 6)); -- creates a 2x3 matrix
  Y : Array (1 .. 3, 1 .. 2) := ((7, 8), (9, 10), (11, 12)); -- creates a 3x2 matrix
  Z : Array (1 .. 2, 1 .. 2); -- creates a blank 2x2 matrix
  
  Matrix_Multiply (X, Y, Z); -- calls the Matrix_Multiply procedure
  
  for Row_Index in Z'Range(1) loop -- loops through first dimension of Z
    for Column_Index in Z'Range(2) loop -- loops through second dimension of Z
      Put (Z (Row_Index, Column_Index)); -- prints out each element of Z
    end loop;
    New_Line; -- starts a new line after each row
  end loop;
  
end Complex_Code;