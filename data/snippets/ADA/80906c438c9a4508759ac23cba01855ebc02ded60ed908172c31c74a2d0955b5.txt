-- Generic package for a binary search tree with operations to insert, delete, and search for nodes

generic
    type Key_Type is range <>;
    type Data_Type is private;
package Binary_Search_Tree is
    type Node;
    type Tree is access Node;

    procedure Insert_Node(Tree : in out Tree; Key : in Key_Type; Data : in Data_Type);
    -- Insert Key-Data pair into the tree, uses recursion to traverse the tree and insert the new node in the correct position

    procedure Delete_Node(Tree : in out Tree; Key : in Key_Type);
    -- Delete node with given Key from the tree, uses recursion to traverse the tree and delete the node if found

    function Search_Node(Tree : in Tree; Key : in Key_Type) return Data_Type;
    -- Search for node with given Key in the tree, uses recursion to traverse the tree and return the corresponding Data if found

    procedure Inorder_Traversal(Tree : in Tree; Callback : not null access procedure(Key : in Key_Type; Data : in out Data_Type));
    -- Perform inorder traversal of tree and execute the given callback procedure on each node, passing in the Key and Data of the node

    procedure Preorder_Traversal(Tree : in Tree; Callback : not null access procedure(Key : in Key_Type; Data : in out Data_Type));
    -- Perform preorder traversal of tree and execute the given callback procedure on each node, passing in the Key and Data of the node

    procedure Postorder_Traversal(Tree : in Tree; Callback : not null access procedure(Key : in Key_Type; Data : in out Data_Type));
    -- Perform postorder traversal of tree and execute the given callback procedure on each node, passing in the Key and Data of the node

private
    type Node is
        record
            Left : access Node := null;
            Right : access Node := null;
            Parent : access Node := null;
            Key : Key_Type;
            Data : Data_Type;
        end record;
end Binary_Search_Tree;