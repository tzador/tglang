-- This code snippet uses the Ada programming language
-- and demonstrates a complex functionality of creating a binary tree

with Ada.Text_IO; use Ada.Text_IO;

procedure Binary_Tree is

   type Tree is record
      Value    : Integer;
      Left     : Tree_Ptr;
      Right    : Tree_Ptr;
   end record;

   type Tree_Ptr is access Tree;

   procedure Print_Tree (Root : Tree_Ptr) is
   
      procedure Print_Node (Node : Tree_Ptr; Depth : Integer) is
      begin
         -- Print spaces for indentation based on depth of tree
         for I in 1 .. Depth loop
            Put ('   ');
         end loop;
         -- Print value of node
         Put_Line (Node.Value'Image);
         -- Print left subtree if not null
         if Node.Left /= null then
            Print_Node (Node.Left, Depth + 1);
         end if;
         -- Print right subtree if not null
         if Node.Right /= null then
            Print_Node (Node.Right, Depth + 1);
         end if;
      end Print_Node;
      
   begin
      -- Call recursive print function with root of tree and initial depth of 1
      Print_Node (Root, 1);
   end Print_Tree;

   function Create_Tree (Values : Integer_Array) return Tree_Ptr is
      Root : Tree_Ptr := new Tree;
   begin
      -- Add first value at root of tree
      Root.Value := Values(1);
      -- Loop through remaining values and create binary tree
      for I in 2 .. Values'Last loop
         -- Start at the root of the tree
         Root_Ptr : Tree_Ptr := Root;
         -- Create new node for current value
         New_Node : Tree_Ptr := new Tree;
         New_Node.Value := Values(I);
         -- Keep track of parent node for current value
         Parent_Ptr : Tree_Ptr := null;
         -- Traverse the tree until the appropriate spot for the current value is found
         while Root_Ptr /= null loop
            -- Save current node as parent
            Parent_Ptr := Root_Ptr;
            -- If current value is less than or equal to the value of the current node,
            -- go to left subtree, else go to right subtree
            if Values(I) <= Root_Ptr.Value then
               Root_Ptr := Root_Ptr.Left;
            else
               Root_Ptr := Root_Ptr.Right;
            end if;
         end loop;
         -- Insert current value as left or right child depending on its value compared to its parent
         if Values(I) <= Parent_Ptr.Value then
            Parent_Ptr.Left := New_Node;
         else
            Parent_Ptr.Right := New_Node;
         end if;
      end loop;
      -- Return root of tree
      return Root;
   end Create_Tree;
   
   Values : aliased Integer_Array (1 .. 8) := (40, 20, 60, 10, 30, 50, 70, 25);
   Root : Tree_Ptr := Create_Tree (Values);

begin
   Print_Tree (Root);
end Binary_Tree;