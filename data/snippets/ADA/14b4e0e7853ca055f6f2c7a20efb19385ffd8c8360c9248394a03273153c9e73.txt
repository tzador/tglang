-- This is a generic package that defines an array data structure and various operations on it --

generic
   type Element is private;   -- Define the element type of the array, it can be any private type
   subtype Index is Natural;  -- Define the index type of the array, it is a subtype of Natural
   Max_Size : Index;          -- Define a constant to store the maximum size of the array

package Generic_Array is
   
   type Array is private;     -- Declare the array type as private
   
   ----------------------------------------
   --            Operations              --
   ----------------------------------------
   
   -- Procedure to initialize the array with a default value for all elements
   
   procedure Initialize (A : out Array; Default_Value : Element);
   
   -- Function to check if the array is empty
   
   function Is_Empty (A : Array) return Boolean;
   
   -- Function to check if the array is full
   
   function Is_Full (A : Array) return Boolean;
   
   -- Procedure to insert an element at a given index in the array
   
   procedure Insert (A : in out Array; Val : Element; Pos : Index);
   
   -- Function to retrieve an element from the array at a given index
   
   function Retrieve (A : Array; Pos : Index) return Element;
   
   -- Procedure to delete an element from the array at a given index
   
   procedure Delete (A : in out Array; Pos : Index);
   
   -- Procedure to clear all elements of the array
   
   procedure Clear (A : in out Array);
   
   -- Function to get the size of the array
   
   function Size return Index;
   
private
   type Array is array (1 .. Max_Size) of Element;     -- Declare the array type as an array of Elements
   Count : Index := 0;                                -- Declare a counter variable to keep track of elements in the array
   
end Generic_Array;