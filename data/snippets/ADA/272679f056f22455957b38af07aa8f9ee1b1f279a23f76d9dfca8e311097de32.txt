-- Declare a package that contains a generic stack implementation

generic
    type Element_Type is private; -- Private allows only the package to access the type
    with function "="(Left, Right: Element_Type) return Boolean is <>;
-- Above, we declare a generic type for the elements that will be stored in our stack.
-- The equality function is specified to allow different types to be compared in the stack.

package Stack is

    type Stack_Type is private; -- Private allows only the package to access the type

    procedure Push(Stack: in out Stack_Type; Item: in Element_Type);
-- Function to add an element to the top of the stack, passing in the stack and element to be added.

    procedure Pop(Stack: in out Stack_Type);
-- Function to remove the top element of the stack, passing in the stack.

    function Top(Stack: Stack_Type) return Element_Type;
-- Function to return the top element of the stack, passing in the stack and returning the top element.

    function Is_Empty(Stack: Stack_Type) return Boolean;
-- Function to check if the stack is empty, passing in the stack and returning a boolean value.

    procedure Clean(Stack: in out Stack_Type);
-- Function to remove all elements in the stack, passing in the stack.

private

    type Node;

    type Stack_Type is record
        Top: Node := null; -- Set top to null to indicate an empty stack
    end record;

    type Node is record
        Data: Element_Type;
        Next: Node_Ptr;
    end record;

    type Node_Ptr is access Node;
-- Above, we declare the private types and records used in our stack implementation.

end Stack;
`