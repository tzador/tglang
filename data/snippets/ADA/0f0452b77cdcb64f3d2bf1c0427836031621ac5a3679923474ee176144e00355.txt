with Ada.Text_IO; -- importing standard IO library
procedure Sorting is
    type Int_Array is array (1..10) of Integer; -- declaring an array of integers
    A: Int_Array; -- declaring variable A of type Int_Array
    procedure Quick_Sort (L: Integer; R: Integer) is -- defining the Quick_Sort procedure
        Pivot: Integer; -- declaring variable Pivot
        I, J: Integer; -- declaring variables I and J
    begin -- start of the procedure
        Pivot := A((L + R) / 2); -- choosing pivot element as middle element
        I := L; -- setting I to start index
        J := R; -- setting J to end index
        loop -- loop for partitioning
            loop -- loop for finding element on left side greater than pivot
                exit when A(I) >= Pivot; -- exit the loop when element is found
                I := I + 1; -- incrementing I
            end loop;
            loop -- loop for finding element on right side smaller than pivot
                exit when A(J) <= Pivot; -- exit the loop when element is found
                J := J - 1; -- decrementing J
            end loop;
            if I <= J then -- if I is less than or equal to J, then swap elements
                declare -- declaring a block for swapping elements
                    Temp: Integer; -- declaring variable Temp
                begin -- start of the block
                    Temp := A(I); -- assigning value of A(I) to Temp
                    A(I) := A(J); -- assigning value of A(J) to A(I)
                    A(J) := Temp; -- assigning value of Temp to A(J)
                end; -- end of the block
                I := I + 1; -- incrementing I 
                J := J - 1; -- decrementing J
            end if;
            exit when I > J; -- exit the loop when I is greater than J
        end loop;
        if L < J then -- if start index is less than J, then call Quick_Sort for left side
            Quick_Sort (L, J); -- calling Quick_Sort for left side
        end if;
        if I < R then -- if end index is greater than I, then call Quick_Sort for right side
            Quick_Sort (I, R); -- calling Quick_Sort for right side
        end if;
    end Quick_Sort; -- end of procedure Quick_Sort
 
    procedure Print_Array is -- defining the Print_Array procedure
    begin -- start of the procedure
        for I in A'Range loop -- loop for iterating over array elements
            Ada.Text_IO.Put (Integer'Image(A(I)) & " "); -- printing element with an extra space
        end loop;
        Ada.Text_IO.New_Line; -- printing a new line
    end Print_Array; -- end of procedure Print_Array
 
begin -- start of main program
    Ada.Text_IO.Put_Line ("Enter 10 elements:"); -- prompting user to enter elements
    for I in A'Range loop -- loop for accepting user input
        Ada.Text_IO.Get (A(I)); -- accepting user input for current element
    end loop;
    Quick_Sort (A'First, A'Last); -- calling Quick_Sort procedure to sort the array
    Ada.Text_IO.Put_Line ("Sorted Array:"); -- printing the sorted array
    Print_Array; -- calling Print_Array procedure to print the sorted array
end Sorting; -- end of main program