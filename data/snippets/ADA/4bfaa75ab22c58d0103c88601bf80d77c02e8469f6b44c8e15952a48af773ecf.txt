-- This is a code snippet in ADA that generates a random maze using the Growing Tree algorithm

-- Define a type for the maze cells
type Cell is record
    North: Boolean := False;
    South: Boolean := False;
    East: Boolean := False;
    West: Boolean := False;
end record;

-- Create an array of cells for the maze
Cells: array(1..ROWS, 1..COLUMNS) of Cell;

-- Set the starting cell as the first cell in the array
Current_Cell: Cell := Cells(1,1);

-- Define a procedure to check if a cell has unvisited neighbors
procedure Has_Unvisited_Neighbors (Current: in Cell) return Boolean is
begin
    return (not Current.North and not Current.South and not Current.East and not Current.West);
end Has_Unvisited_Neighbors;

-- Define a procedure to choose a random unvisited neighbor
procedure Choose_Random_Unvisited_Neighbor (Current: in Cell) return Cell is
    Neighbor: Cell;
begin
    loop
        -- Choose a random direction
        Dir: Integer := Random(1, 4);
        
        -- Check if the neighbor in that direction is unvisited
        case Dir is
            when 1 =>
                if Current.North then
                    continue;
                else
                    Neighbor := Cells(Current_Row-1, Current_Column);
                    exit;
                end if;
            when 2 =>
                if Current.South then
                    continue;
                else
                    Neighbor := Cells(Current_Row+1, Current_Column);
                    exit;
                end if;
            when 3 =>
                if Current.East then
                    continue;
                else
                    Neighbor := Cells(Current_Row, Current_Column+1);
                    exit;
                end if;
            when 4 =>
                if Current.West then
                    continue;
                else
                    Neighbor := Cells(Current_Row, Current_Column-1);
                    exit;
                end if;
        end case;
    end loop;
    
    return Neighbor;
end Choose_Random_Unvisited_Neighbor;

-- Define a function to remove the walls between the current cell and its chosen neighbor
procedure Remove_Walls (Current: in Cell; Neighbor: in Cell) return Cell is
begin
    if Current_Row < Neighbor_Row then
        Current.South := True;
        Neighbor.North := True;
        
    elsif Current_Row > Neighbor_Row then
        Current.North := True;
        Neighbor.South := True;
        
    elsif Current_Column < Neighbor_Column then
        Current.East := True;
        Neighbor.West := True;
        
    else
        Current.West := True;
        Neighbor.East := True;
    end if;
end Remove_Walls;

-- Define a function to use the Growing Tree algorithm to generate the maze
procedure Generate_Maze return Cell is
begin
    -- Choose a random starting cell and mark it as visited
    Cells(1,1).Visited := True;
    
    loop
        -- Check if the current cell has any unvisited neighbors
        if Has_Unvisited_Neighbors(Current_Cell) then
            -- Choose a random unvisited neighbor and mark it as visited
            Neighbor_Cell := Choose_Random_Unvisited_Neighbor(Current_Cell);
            Neighbor_Cell.Visited := True;
            
            -- Remove the walls between the current cell and its neighbor
            Remove_Walls(Current_Cell, Neighbor_Cell);
            
            -- Set the neighbor cell as the new current cell
            Current_Cell := Neighbor_Cell;
        else
            -- Backtrack to the last visited cell
            Current_Cell := Stack.Pop();
        end if;
        
        -- Check if the maze is complete (all cells have been visited)
        if All_Cells_Visited(Cells) then
            exit;
        end if;
    end loop;
end Generate_Maze;