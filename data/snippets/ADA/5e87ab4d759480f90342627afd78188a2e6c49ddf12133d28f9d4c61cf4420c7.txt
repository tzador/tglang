-- This is a code snippet in ADA programming language
-- It creates a binary search tree and performs a search and insertion on it
with Ada.Text_IO; use Ada.Text_IO;

procedure Binary_Search_Tree is

   type BST_Node;
   type BST_Pointer is access BST_Node;
   type BST_Node is record
      key  : Integer;
      left : BST_Pointer;
      right : BST_Pointer;
   end record;

   procedure Insert (Item : in Integer; Node : in out BST_Pointer) is
   begin
      if Node = null then
         Node := new BST_Node'(key => Item, left => null, right => null);
      elsif Item < Node.key then
         Insert (Item, Node.left);
      else
         Insert (Item, Node.right);
      end if;
   end Insert;
   
   function Search (Item : in Integer; Node : in BST_Pointer) return Boolean is
   begin
      if Node = null then
         return false;
      elsif Item = Node.key then
         return true;
      elsif Item < Node.key then
         return Search (Item, Node.left);
      else
         return Search (Item, Node.right);
      end if;
   end Search;
   
   -- Create a new tree
   Top : BST_Pointer := null;
  
   -- Insert values into the tree
   Insert(5, Top);
   Insert(2, Top);
   Insert(7, Top);
   Insert(1, Top);
   Insert(3, Top);
   Insert(6, Top);
   Insert(8, Top);
  
   -- Search for a value in the tree
   Found : Boolean := Search(7, Top);
   
begin
   -- Print out the results
   Put_Line("Binary Search Tree:");
   
   -- Traverse the tree and print out values in order
   procedure Traverse (Node : in BST_Pointer) is
   begin
      if Node /= null then
         Traverse (Node.left);
         Put(Item => Node.key, Width => 3);
         Traverse (Node.right);
      end if;
   end Traverse;
   
   Traverse(Top); -- Start from the root
   New_Line;
   Put("Value 7 was found in the tree: " & Found'Image);
end Binary_Search_Tree;