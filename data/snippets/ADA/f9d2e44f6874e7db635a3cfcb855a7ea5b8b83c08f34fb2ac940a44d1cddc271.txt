-- Implementation of quicksort algorithm in ADA
procedure Quicksort (A : in out Array_Type; Low : Positive; High : Positive) is
    Pivot : Integer := A (Low + (High - Low) / 2);   -- selecting pivot element
    I : Positive := Low;                            -- lower bound of subarray
    J : Positive := High;                           -- upper bound of subarray
begin 
    -- partitioning the array based on pivot element
    while I <= J loop
        while A (I) < Pivot loop
            I := I + 1;
        end loop;
        while A (J) > Pivot loop
            J := J - 1;
        end loop;
        if I <= J then
            -- swapping elements if necessary
            A.exchange(I, J);
            I := I + 1;
            J := J - 1;
        end if;
    end loop;
    -- recursively sort subarrays
    if Low < J then
        Quicksort(A, Low, J);
    end if;
    if I < High then
        Quicksort(A, I, High);
    end if;
end Quicksort;