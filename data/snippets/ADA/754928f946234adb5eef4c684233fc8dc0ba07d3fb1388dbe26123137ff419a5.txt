-- This is a complex code snippet in ADA
with Text_IO; use Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

-- Declare a constant with a long name
MY_LONG_CONSTANT : constant Integer := 100000;

-- Declare a type with access to protected type
type Complex_Type is access protected
    record
        Data : Integer := 0;
        Counter : Integer := 0;
    end record;

-- Declare a task type with a generic parameter
task type Complex_Task(G_Type : Integer) is
    pragma Elaborate_Body;
end Complex_Task;

-- Declare an Ada package with a generic parameter
generic
    type Item_Type is private;
package Complex_Package is
    -- Declare a type with limited range for generic parameter
    type Items_Array is array(1..10) of Item_Type range MY_LONG_CONSTANT..1000000;
    -- Declare a function that returns the minimum value of an array
    function Get_Minimum(Item_Array : in Items_Array) return Item_Type;
end Complex_Package;

package body Complex_Package is
    -- Implementation of the Get_Minimum function
    function Get_Minimum(Item_Array : in Items_Array) return Item_Type is
        Min : Item_Type := Item_Array(1);
    begin
        for I in 1..Item_Array'Length loop
            if Item_Array(I) < Min then
                Min := Item_Array(I);
            end if;
        end loop;
        return Min;
    end Get_Minimum;
end Complex_Package;