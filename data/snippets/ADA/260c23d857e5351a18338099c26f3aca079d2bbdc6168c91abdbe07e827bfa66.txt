-- A generic package for implementing a doubly linked list in ADA

generic
    type Element_Type is private; -- Type of element to be stored in list
	
package Doubly_Linked_List is

    -- Definition of the Node record that holds the element and pointers to the previous and next nodes
    type Node(File_Type: Element_Type; Next: access Node; Prev: access Node) is private;

    -- Functions used for accessing information about the nodes in the list

    -- Gets the element stored in a given node
    function Get_Element(Self: access Node) return Element_Type;

    -- Gets the next node in the list
    function Get_Next(Self: access Node) return access Node;

    -- Gets the previous node in the list
    function Get_Prev(Self: access Node) return access Node;

    -- Procedure for adding a new node to the beginning of the list
    procedure Add_First(List: access Node; NewNode: access Node);

    -- Procedure for adding a new node to the end of the list
    procedure Add_Last(List: access Node; NewNode: access Node);

    -- Procedure for inserting a new node at a given position in the list
    procedure Insert_At(List: access Node; Position: Natural; NewNode: access Node);

    -- Procedure for removing the first node in the list
    procedure Remove_First(List: access Node);

    -- Procedure for removing the last node in the list
    procedure Remove_Last(List: access Node);

    -- Procedure for removing a node at a given position in the list
    procedure Remove_At(List: access Node; Position: Natural);

private

    -- Definition of the List record that holds references to the first and last nodes
    type List is tagged record
        First: access Node;
        Last: access Node;
    end record;

    -- Procedure for initializing a new list
    procedure Initialize(List: access List);

    -- Procedure for creating a new node and assigning values to its elements
    procedure Create_Node(NewNode: out access Node; Element: Element_Type);

end Doubly_Linked_List;