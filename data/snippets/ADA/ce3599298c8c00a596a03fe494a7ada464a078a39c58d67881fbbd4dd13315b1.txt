package A_Graphs and Networks is

   type Vertex is new Integer;

   type Adjacency_Matrix is array (Vertex, Vertex) of Boolean;

   type Adjacency_List (H : Positive) is array (Vertex) of Vertex_Array (1..H);
 
   type Vertex_Array is array (Positive range <>) of Vertex;
   
   type Weighted_Graph is record
      Adjacency_Matrix : Adjacency_Matrix; 
      Adjacency_List : Adjacency_List; 
      Weight : array (Vertex, Vertex) of Float; 
      Vertex_Count : Vertex_Count; 
      Edge_Count : Edge_Count;
   end record;
   
   function Add_Edge (G : in out Weighted_Graph; From : Vertex; To : Vertex; Weight : Float) return Boolean is
      (G.Adjacency_Matrix (From, To) := True;
       G.Weight (From, To) := Weight;
       G.Edge_Count := G.Edge_Count + 1;
       true);
   
   function Add_Vertex (G : in out Weighted_Graph) return Vertex is
      V : constant Vertex := G.Vertex_Count + 1;
   begin
      if V /= 0 then
         G.Vertex_Count := G.Vertex_Count + 1;
         return V;
      else
         raise Constraint_Error with "No more vertices available";
      end if;
   end Add_Vertex;
begin
   -- Graph Algorithms Package; 
   null;
end Graphs and Networks;