-- A generic package for sorting arrays using the quick sort algorithm
generic
   type Element is private;    -- generic type parameter for array elements
   type CompFunc is private;   -- generic type parameter for comparison function
   with function Comp (A,B : Element) return Boolean is <>; -- comparison function
package Quick_Sort is
   procedure Sort (A : in out Array_Type; Index_1,Index_2 : Index_Type);
   -- sorts array A from Index_1 to Index_2 in ascending order
   procedure Sort_Desc (A : in out Array_Type; Index_1,Index_2 : Index_Type);
   -- sorts array A from Index_1 to Index_2 in descending order
private
   type Array_Type is array (Positive range <>) of Element;  -- private type for arrays
   function Partition (A : Array_Type; Index_1, Index_2 : Index_Type) return Index_Type;
   -- returns the index of the pivot element in the partitioned array
   function Partition_Desc (A : Array_Type; Index_1, Index_2 : Index_Type) return Index_Type;
   -- returns the index of the pivot element in the partitioned array (for descending order)
end Quick_Sort;

package body Quick_Sort is
   procedure Sort (A : in out Array_Type; Index_1,Index_2 : Index_Type) is
      Pivot_Index : Index_Type;
      -- index of the pivot element
   begin
      if (Index_1 < Index_2) then
         Pivot_Index := Partition(A,Index_1,Index_2); -- partition array
         Sort(A,Index_1,Pivot_Index-1); -- sort left sub-array
         Sort(A,Pivot_Index+1,Index_2); -- sort right sub-array
      end if;
   end Sort;

   procedure Sort_Desc (A : in out Array_Type; Index_1,Index_2 : Index_Type) is
      Pivot_Index : Index_Type;
      -- index of the pivot element
   begin
      if (Index_1 < Index_2) then
         Pivot_Index := Partition_Desc(A,Index_1,Index_2); -- partition array (for descending order)
         Sort_Desc(A,Index_1,Pivot_Index-1); -- sort left sub-array
         Sort_Desc(A,Pivot_Index+1,Index_2); -- sort right sub-array
      end if;
   end Sort_Desc;

   function Partition (A : Array_Type; Index_1, Index_2 : Index_Type) return Index_Type is
      Pivot : Element;
      -- pivot element for partitioning
      Current_Index : Index_Type;
      -- index of the current element being compared to pivot
      Right_Index : Index_Type;
      -- index of the rightmost element in the array (for swapping)
   begin
      Pivot := A(Index_2); -- choose pivot as rightmost element
      Current_Index := Index_1-1; 
      -- start at index-1 to account for increment in loop
      Right_Index := Index_2;
      for i in Index_1 .. Index_2 loop
         if Comp(A(i),Pivot) then -- if element is less than pivot
            Current_Index := Current_Index + 1; -- increment current index
            -- swap current element with rightmost element (to the left of pivot)
            A(Current_Index) := A(Current_Index) + A(i);
            A(i) := A(Current_Index) - A(i);
            A(Current_Index) := A(Current_Index) - A(i);
         end if;
      end loop;
      -- swap pivot (rightmost element) with element directly following current index
      A(Current_Index+1) := A(Current_Index+1) + A(Right_Index);
      A(Right_Index) := A(Current_Index+1) - A(Right_Index);
      A(Current_Index+1) := A(Current_Index+1) - A(Right_Index);

      return Current_Index+1;
   end Partition;

   function Partition_Desc (A : Array_Type; Index_1, Index_2 : Index_Type) return Index_Type is
      -- (same as above, but for descending order)
      Pivot : Element;
      Current_Index : Index_Type;
      Left_Index : Index_Type;
   begin
      Pivot := A(Index_2);
      Current_Index := Index_1-1;
      Left_Index := Index_2;
      for i in Index_1 .. Index_2 loop
         if Comp(A(i),Pivot) then  -- if element is greater than pivot
            Current_Index := Current_Index + 1;
            -- swap current element with leftmost element (to the right of pivot)
            A(Current_Index) := A(Current_Index) + A(i);
            A(i) := A(Current_Index) - A(i);
            A(Current_Index) := A(Current_Index) - A(i);
         end if;
      end loop;
      -- swap pivot (rightmost element) with element directly following current index
      A(Current_Index+1) := A(Current_Index+1) + A(Left_Index);
      A(Left_Index) := A(Current_Index+1) - A(Left_Index);
      A(Current_Index+1) := A(Current_Index+1) - A(Left_Index);

      return Current_Index+1;
   end Partition_Desc;

end Quick_Sort;