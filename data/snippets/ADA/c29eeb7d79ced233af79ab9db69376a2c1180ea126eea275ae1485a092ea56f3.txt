-- This code snippet is an example of a binary search tree data structure implementation in Ada

with Ada.Text_IO;       use Ada.Text_IO;
with Ada.Integer_Text_IO;  use Ada.Integer_Text_IO;
                                   
procedure Main is
   type Node;
   type Tree is access Node;
   type Node is record
      Key   : Integer;
      Left  : Tree;
      Right : Tree;
   end record;
   function Insert (T : Tree; X : Integer) return Tree is
   begin
      if T = null then
         return new Node'(Key => X);
      else
         if X < T.Key then
            T.Left := Insert (T.Left, X);
         else
            T.Right := Insert (T.Right, X);
         end if;
         return T;
      end if;
   end Insert;
      
    
   function Search (T : Tree; X : Integer) return Tree is
   begin
      if T = null then
         return null;
      elsif X = T.Key then
         return T;
      elsif X < T.Key then
         return Search (T.Left, X);
      else
         return Search (T.Right, X);
      end if;
   end Search;
   
   
   procedure Inorder (T : Tree) is
   begin
      if T /= null then
         Inorder (T.Left);
         Put (T.Key, 2);
         Inorder (T.Right);
      end if;
   end Inorder;
   
   
   Root : Tree := null;
begin
   Root := Insert (Root, 5);
   Root := Insert (Root, 2);
   Root := Insert (Root, 7);
   Root := Insert (Root, 9);
   Root := Insert (Root, 3);
   Inorder (Root);
end;