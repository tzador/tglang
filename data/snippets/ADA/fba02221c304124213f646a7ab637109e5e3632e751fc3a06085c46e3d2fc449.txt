-- Example of a complex code snippet in ADA

with Ada.Text_IO; use Ada.Text_IO;

procedure Complex is

   -- Define a record type with a nested record
   type Complex_Num is record
      Real : Float;
      Imag : Float;
   end record;

   -- Declare an array of complex numbers
   type Complex_Array is array (1 .. 10) of Complex_Num;

   -- Initialize a complex number
   Num_1 : Complex_Num := (Real => 1.5, Imag => 2.5);

   -- Initialize an array of complex numbers
   Array_1 : Complex_Array :=
     (1 => (Real => 3.0, Imag => 5.0),
      2 => (Real => -2.5, Imag => -4.0),
      3 => (Real => 6.0, Imag => -1.5),
      4 => (Real => 0.0, Imag => 2.0),
      5 => (Real => -4.5, Imag => 7.5),
      6 => (Real => 1.0, Imag => -3.5),
      7 => (Real => 2.5, Imag => 0.0),
      8 => (Real => -3.0, Imag => 1.5),
      9 => (Real => 4.0, Imag => -6.0),
      10 => (Real => -3.5, Imag => 2.0));

begin
   -- Display the sum of two complex numbers
   Put_Line("Sum of 'Num_1' and 'Array_1(1)' = " & Float'Image ((Num_1.Real + Array_1(1).Real))
   & " + " & Float'Image ((Num_1.Imag + Array_1(1).Imag)) & "i");

   -- Display the product of two complex numbers
   Put_Line("Product of 'Array_1(2)' and 'Array_1(3)' = " & Float'Image ((Array_1(2).Real * Array_1(3).Real
   - Array_1(2).Imag * Array_1(3).Imag)) & " + " & Float'Image ((Array_1(2).Real * Array_1(3).Imag
   + Array_1(2).Imag * Array_1(3).Real)) & "i");

   -- Display the absolute value of a complex number
   Put_Line("Absolute value of 'Array_1(5)' = " & Float'Image (Sqrt (Array_1(5).Real ** 2 + Array_1(5).Imag ** 2)));

   -- Display the conjugate of a complex number
   Put_Line("Conjugate of 'Array_1(7)' = " & Float'Image (Array_1(7).Real) & " - " & Float'Image (Array_1(7).Imag) & "i");

exception
   when Constraint_Error =>
      Put_Line("Constraint error");
   when others =>
      Put_Line("Error");

end Complex;