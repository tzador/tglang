-- This is a comment in ADA

-- Declare a type called "Color"

type Color is
    (Red, Blue, Green, Yellow);

-- Declare a function that returns the opposite color

function Opposite_Color (C: Color) return Color is
begin
    case C is
        when Red => return Blue;
        when Blue => return Red;
        when Green => return Yellow;
        when Yellow => return Green;
    end case;
    
end Opposite_Color;

-- Declare a procedure that prints out a color and its opposite

procedure Print_Opposite (C: Color) is
    opposite: Color; -- variable to hold opposite color
begin
    opposite := Opposite_Color(C); -- call function to get opposite color
    Put_Line("The opposite of " & Color'Image(C) & " is " & Color'Image(opposite)); -- print out colors
end Print_Opposite;

-- Main program
begin
    declare
        color1: Color := Red;
        color2: Color := Blue;
        color3: Color := Green;
        color4: Color := Yellow;
    begin
        -- Call procedure to print out colors and their opposites
        Print_Opposite(color1);
        Print_Opposite(color2);
        Print_Opposite(color3);
        Print_Opposite(color4);
    end;
end;