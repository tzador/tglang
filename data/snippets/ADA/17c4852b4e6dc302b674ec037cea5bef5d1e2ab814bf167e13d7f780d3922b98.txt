-- This code snippet implements a binary search algorithm
with Ada.Text_IO;                        use Ada.Text_IO;
with Ada.Integer_Text_IO;                 use Ada.Integer_Text_IO;

procedure Binary_Search is

   type Array is array (Positive range <>) of Integer;  -- defining a type for the array to be searched

   A : Array (1 .. 8) := (1, 2, 3, 4, 5, 6, 7, 8);      -- initializing the array to be searched

   key : Integer := 6; -- desired element to be searched for in the array

   procedure Search (A : in out Array; key : Integer) is  -- defining the search procedure
      L, R, M : Integer;                                 -- declaring variables for left, right, and middle indices
   begin
      L := A'First;         -- setting left index to be the first element of the array
      R := A'Last;          -- setting right index to be the last element of the array

      while L <= R loop     -- loop until left index is less than or equal to right index
         M := (L + R) / 2;  -- calculating middle index by dividing left and right indices by 2

         if A(M) = key then  -- if middle element is equal to the desired element
            Put_Line("Element found at index " & Integer'Image(M));  -- print out the index
            return;        -- exit the loop and procedure
         elsif A(M) < key then     -- if middle element is less than the desired element
            L := M + 1;           -- set left index to be one greater than middle index
         else                     -- if middle element is greater than the desired element
            R := M - 1;           -- set right index to be one less than middle index
         end if;
      end loop;

      Put_Line("Element not found in the array.");   -- if the loop finishes without finding the element, print out a message
   end Search;

begin
   Search(A, key);  -- calling the search procedure with the given array and key
end Binary_Search;