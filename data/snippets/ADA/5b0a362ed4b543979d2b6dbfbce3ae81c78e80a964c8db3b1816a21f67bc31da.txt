-- This is a comment in ADA
-- Define a new type named "Tree" with a record as its value
type Tree is record
    value: Integer;
    left, right: access Tree;
end record;

-- Declare a function to insert a new value into the tree
-- Takes in a root node and the value to be inserted
function insert_value(root: access Tree; value: Integer) return access Tree is
    temp, current: access Tree;
begin
    -- Check if root node exists
    if root = null then
        -- If not, create a new node with the given value
        temp := new Tree'(value => value, left => null, right => null);
        return temp; -- Return the new node as the root
    else
        -- If root exists, traverse down the tree to find the correct place for the new value
        current := root;
        while current /= null loop
            -- Insert the new value to the left if it is smaller than the current node's value
            if value < current.value then
                -- If there is no left child, create a new node and assign it as the left child
                if current.left = null then
                    current.left := new Tree'(value => value, left => null, right => null);
                    return root; -- Return the root as it does not change
                else
                    current := current.left; -- Continue traversing down the tree
                end if;
            -- Insert the new value to the right if it is larger than the current node's value
            elsif value > current.value then
                -- If there is no right child, create a new node and assign it as the right child
                if current.right = null then
                    current.right := new Tree'(value => value, left => null, right => null);
                    return root; -- Return the root as it does not change
                else
                    current := current.right; -- Continue traversing down the tree
                end if;
            else
                return root; -- If the value is already in the tree, do nothing and return the root
            end if;
        end loop;
    end if;
end insert_value;

-- Declare a procedure to display the values of the tree in sorted order
-- Takes in the root node and an array to store the sorted values
procedure display_values(root: access Tree; values: out Integer_Array is
    current: access Tree := root;
    i: Integer := 0;
begin
    if current /= null then
        -- Inorder traversal to get the values in ascending order
        display_values(current.left, values); -- Traverse to the left child
        values(i) := current.value; -- Store the value in the array
        i := i + 1; -- Increment the index
        display_values(current.right, values); -- Traverse to the right child
    end if;
end display_values;