-- This is a complex code snippet in ADA that demonstrates the use of generics

with Ada.Text_IO;         use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with Ada.Float_Text_IO;   use Ada.Float_Text_IO;

generic
    type Data_Type is digits <>;

package My_Data_Type is

    type Array is array (Integer range 1 .. 10) of Data_Type;

    not null type Not_Null_Array is new Array;
    -- This type ensures that no null values are present in the array

    procedure Bubble_Sort (A : in out Not_Null_Array);

    procedure Print_Results (A : in Not_Null_Array);

private

    procedure Swap (X, Y : in out Data_Type);
    -- This procedure swaps two values of the generic type
    
    procedure Bubble_Sort (A : in out Not_Null_Array) is
        Temp : Data_Type;
    begin
        for I in 1 .. A'Length - 1 loop
            for J in 1 .. A'Length - I loop
                if A (J) > A (J + 1) then
                    Swap (A (J), A (J + 1));
                end if;
            end loop;
        end loop;
    end Bubble_Sort;

    procedure Swap (X, Y : in out Data_Type) is
        Temp : Data_Type;
    begin
        Temp := X;
        X := Y;
        Y := Temp;
    end Swap;

    procedure Print_Results (A : in Not_Null_Array) is
    begin
        for I in A'Range loop
            Put (Integer'Image (I) & " : " & Data_Type'Image (A (I)) & ",");
        end loop;
    end Print_Results;

end My_Data_Type;

with My_Data_Type; use My_Data_Type;

procedure Main is
    A : Not_Null_Array;
begin
    A (1) := 10.5;
    A (2) := 7.8;
    A (3) := 3.2;
    A (4) := 9.1;
    A (5) := 5.6;
    A (6) := 2.8;
    A (7) := 6.4;
    A (8) := 1.9;
    A (9) := 8.7;
    A (10) := 4.5;

    Bubble_Sort (A);
    Print_Results (A);
end Main;