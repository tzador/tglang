-- This is a complex code snippet in ADA, featuring a matrix multiplication and a recursive function

-- Declare a matrix type
type Matrix is array(1..3, 1..3) of Integer;

-- Declare a recursive function for matrix multiplication
function multiply(A : in Matrix; B : in Matrix) return Matrix is
    C : Matrix;
begin
    if A'Length /= B'Length then
        raise Constraint_Error;
    else
        for i in A'Range loop
            for j in B'Range loop
                C(i, j) := 0;
                for k in B'First..B'Last loop
                    C(i, j) := C(i, j) + A(i, k) * B(k, j);
                end loop;
            end loop;
        end loop;
    end if;
    return C;
end multiply;

-- Declare a procedure to print a matrix
procedure print_Matrix(arr : Matrix) is
begin
    for i in arr'Range(1) loop
        for j in arr'Range(2) loop
            Put(arr(i,j));
        end loop;
        New_Line;
    end loop;
end print_Matrix;

-- Create two matrices to be multiplied 
A : Matrix := ((1, 2, 3),
               (4, 5, 6),
               (7, 8, 9));

B : Matrix := ((9, 8, 7),
               (6, 5, 4),
               (3, 2, 1));

-- Multiply the two matrices and store the result in a new matrix
C : Matrix := multiply(A, B);

-- Print the resulting matrix
print_Matrix(C);