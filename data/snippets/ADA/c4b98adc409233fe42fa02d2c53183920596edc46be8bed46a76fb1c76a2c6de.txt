-- This is a code snippet in ADA that creates a generic doubly linked list --

generic
	type Element_Type is private;

package Doubly_Linked_List is
	-- Struct/record to hold node in the linked list --
	type Node is private;

	-- Functions to manipulate/modify the linked list --
	procedure Insert_At_End (List : in out Node; New_Data : Element_Type);
	procedure Insert_At_Beginning (List : in out Node; New_Data : Element_Type);
	procedure Delete_At_End (List : in out Node);
	procedure Delete_At_Beginning (List : in out Node);
	procedure Delete (List : in out Node; Data : Element_Type);

	-- Function to check if linked list is empty --
	function Is_Empty (List : Node) return Boolean;

	-- Function to traverse the linked list and execute a given action on each node --
	procedure Traverse (List : Node; Action : access procedure (Current : access Node));

	-- Function to return the current size of the linked list --
	function Size (List : Node) return Integer;

private
	type Node is
	record
		Data : Element_Type;
		Previous : access Node;
		Next : access Node;
	end record;
end Doubly_Linked_List;