-- This is a code snippet in ADA
-- It creates an array of records and
-- performs sorting and searching operations on it

-- Define a record type "Student" to store student information
type Student is record
    name : String(1..20); -- name with maximum 20 characters
    rollno : Integer range 1..100; -- roll number between 1 and 100
    marks : Integer range 0..100; -- marks out of 100
end record;

-- Define an array of Student records with a fixed size of 10
-- This array will store information of 10 students
-- Syntax for arrays: array_name(index) or array_name(first_index..last_index)
type StudentArray is array (1..10) of Student;

-- Initialize the StudentArray with data for each student
-- This can also be done using user input or file input
StudentData : StudentArray :=
    (Student("John Doe", 1, 90),   -- Record for student 1
     Student("Jane Smith", 2, 85), -- Record for student 2
     Student("Sam Brown", 3, 75),  -- Record for student 3
     Student("Emma Green", 4, 95), -- Record for student 4
     Student("Mike Lee", 5, 80),   -- Record for student 5
     Student("Karen Chen", 6, 70), -- Record for student 6
     Student("Mark Kim", 7, 90),   -- Record for student 7
     Student("Sara Rodriguez", 8, 65), -- Record for student 8
     Student("Tim Patel", 9, 85),  -- Record for student 9
     Student("Anna Nguyen", 10, 95)); -- Record for student 10

-- Define a function to sort the StudentArray by marks in ascending order
procedure SortStudents is
    temp : Student;
    swapped : Boolean := True;
begin
    -- Loop until no swaps are made, indicating that the array is sorted
    while swapped loop
        swapped := False;
        for i in 1..10-1 loop -- Loop through each element in the array
            -- Check if the marks of the current Student is greater than the next Student
            if StudentData(i).marks > StudentData(i+1).marks then
                -- Swap the records if the condition is true
                temp := StudentData(i);
                StudentData(i) := StudentData(i+1);
                StudentData(i+1) := temp;
                swapped := True;
            end if;
        end loop;
    end loop;
end SortStudents;

-- Sort the StudentArray using the SortStudents procedure
SortStudents;

-- Define a function to search for a student by roll number
procedure SearchStudent(rollNo : Integer) is
    found : Boolean := False;
    index : Integer := 1;
begin
    -- Loop through the StudentArray until the roll number is found
    while not found and index <= StudentData'Length loop
        if StudentData(index).rollno = rollNo then
            found := True; -- Set found to true if the roll number is found
        else
            index := index + 1; -- Increment index to move on to the next record
        end if;
    end loop;

    -- Check if the roll number was found or not and print the appropriate message
    if found then
        Put_Line(StudentData(index).name & " has roll number " & rollNo'Image);
    else
        Put_Line("Student with roll number " & rollNo'Image & " not found.");
    end if;
end SearchStudent;

-- Search for student with roll number 5
SearchStudent(5);

-- Search for student with roll number 11
SearchStudent(11);