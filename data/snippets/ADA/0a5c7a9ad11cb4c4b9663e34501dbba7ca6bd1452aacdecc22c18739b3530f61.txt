-- Record type to store student information
type Student_Record is record
    Name : String(1..20);
    Age : Natural;
    Grade : Float;
    Subjects : array(1..5) of String(1..20);
end record;

-- Procedure to validate name input
procedure Validate_Name(Name : String) is
begin
    if Name'length > 20 then
        put_line("Name must be 20 characters or less.");
    end if;
end Validate_Name;

-- Procedure to validate age input
procedure Validate_Age(Age : Natural) is
begin
    if Age > 110 then
        put_line("Age cannot be over 110.");
    end if;
end Validate_Age;

-- Function to calculate overall average grade
function Calculate_Average(Student_Rec : Student_Record) return Float is
    total : Float := 0.0;
begin
    for i in Student_Rec.Subjects'Range loop
        total := total + Student_Rec.Subjects(i);
    end loop;
    return total / Student_Rec.Subjects'Length;
end Calculate_Average;

-- Main program
procedure Main is
    Student : Student_Record;

begin
    put_line("Enter student name: ");
    get(Student.Name);

    Validate_Name(Student.Name);

    put_line("Enter student age: ");
    get(Student.Age);

    Validate_Age(Student.Age);

    for i in Student.Subjects'Range loop
        put_line("Enter grade for subject " & i & ": ");
        get(Student.Subjects(i));
    end loop;

    Student.Grade := Calculate_Average(Student);

    put_line("Student record:");
    put_line("Name: " & Student.Name);
    put_line("Age: " & Student.Age);
    put_line("Overall Average Grade: " & Student.Grade);
end Main;

-- Program output:
-- Enter student name: John Smith
-- Enter student age: 20
-- Enter grade for subject 1: 90.5
-- Enter grade for subject 2: 85.0
-- Enter grade for subject 3: 92.0
-- Enter grade for subject 4: 88.5
-- Enter grade for subject 5: 95.0
-- Student record:
-- Name: John Smith
-- Age: 20
-- Overall Average Grade: 90.2