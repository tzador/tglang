-- This code snippet demonstrates an implementation of Dijkstra's algorithm in ADA

with Ada.Text_IO;                    -- import text input/output package
with Ada.Integer_Text_IO;            -- import integer input/output package

procedure Dijkstra is
   type Node is record               -- declare node type
      Name : String (1 .. 20);       -- node name
      Dist : Integer := Integer'Last;-- distance to start node
      Prev : String;                 -- previous node in shortest path
   end record;

   type Node_Array is array (Positive range <>) of Node;

   function Shortest (N : in Node_Array; F : out Positive) return Node is
      D : Integer := Integer'Last;   -- set default distance to maximum
      V : Positive := 0;             -- set default value to 0
   begin
      for I in N'range loop          -- loop through nodes
         if N (I).Dist < D then      -- if distance is shorter than current distance
            D := N (I).Dist;         -- update distance
            V := I;                  -- update value
         end if;
      end loop;
      F := V;                        -- return shortest node index
      return N (V);                  -- return shortest node
   end Shortest;

   function Dijkstra (E : in Node_Array; S : in String) return Node_Array is
      L : Node_Array (E'First .. E'Last);   -- create new array with same range as input array
      F, T : String;               -- declare variables for start and end nodes
   begin
      for I in E'range loop         -- loop through nodes
         L (I).Name := E (I).Name;  -- copy node names
         if S /= E (I).Name then    -- if start node is not current node
            L (I).Prev := S;        -- set previous node to start node
         end if;
      end loop;

      L (1 .. L'Length) := E (1 .. E'Length);   -- copy contents of input array to new array
      L (S'Length) := Node'First;    -- set start node distance to 0
      L (S'Length).Dist := 0;        -- set start node distance to 0
      while L (L'Last).Dist = Integer'Last loop   -- while final node distance is maximum
         declare
            C : Positive;           -- declare variable for current node index
         begin
            L (C) := Shortest (L, C);   -- get shortest node
            for J in E'range loop   -- loop through nodes
               if E (J).Prev = L (C).Name then   -- if previous node is current node
                  declare
                     N : Integer := E (J).Dist + L (C).Dist;  -- calculate new distance
                  begin
                     if N < L (J).Dist then   -- if new distance is shorter than current distance
                        L (J).Dist := N;   -- update distance
                        L (J).Prev := L (C).Name;   -- update previous node
                     end if;
                  end;
               end if;
            end loop;
         end;
      end loop;
      return L;                     -- return array
   end Dijkstra;

   Nodes : constant Node_Array (1 .. 5) :=
     (Node ('A', 5), Node ('B', 8), Node ('C', 10), Node ('D', 3), Node ('E', 1));   -- declare nodes with distances
   Edges : constant Node_Array (1 .. 4) :=
     (Node ('A', 5, 'D'), Node ('D', 3, 'B'), Node ('B', 8, 'C'), Node ('C', 10, 'E'));   -- declare edges between nodes
   Shortest_Distance : Node_Array := Dijkstra (Nodes, 'A');   -- run Dijkstra's algorithm with 'A' as start node
begin
   Ada.Text_IO.Put (Nodes (Nodes'First).Name & " -> " & Nodes (Nodes'Last).Name);   -- print starting and ending node names
   for I in Shortest_Distance'First + 1 .. Shortest_Distance'Last loop   -- loop through shortest distance array
      if Shortest_Distance (I).Dist /= Integer'Last then   -- if distance is not maximum
         Ada.Text_IO.Put_Line (" -> " & Shortest_Distance (I).Name);   -- print node name
      else
         Ada.Text_IO.Put_Line (" -> No path from " & Nodes (1).Name & " to " & Nodes (Nodes'Last).Name);   -- print no path message
      end if;
   end loop;
end Dijkstra;