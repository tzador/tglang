-- Declare a generic package for a binary search tree
generic
    type Key_Type is private; -- specify key type
    type Data_Type is private; -- specify data type
    package Binary_Search_Tree is  -- generic package name
        -- declare procedures, functions, and types within the package
        type Tree_Node is record   -- define tree node type
            Key : Key_Type;        -- key element in node
            Data : Data_Type;      -- data element in node
            Left : access Tree_Node;  -- pointer to left subtree
            Right : access Tree_Node; -- pointer to right subtree
        end record;
        type Tree is access Tree_Node;   -- define tree type as pointer to tree node
        procedure Insert (T : in out Tree; New_Node : in Tree_Node);  -- procedure to insert new node into tree
        function Search (T : in Tree; Key : in Key_Type) return Data_Type; -- function to search for data in provided key
    end Binary_Search_Tree;
private
    package body Binary_Search_Tree is -- implementation of generic package
        procedure Insert (T : in out Tree; New_Node : in Tree_Node) is
            -- traverse the tree to find correct place for new node, using Key for comparison
            if T = null or else New_Node.Key < T.all.Key then -- check if tree is empty or if new node's key is less than current node's key
                if T = null then -- if tree is empty, set new node as root of tree
                    T := new Tree_Node'(Key => New_Node.Key, Data => New_Node.Data, Left => null, Right => null);
                else -- traverse left subtree
                    Insert(T.Left, New_Node);
                end if;
            else -- traverse right subtree
                Insert(T.Right, New_Node);
            end if;
        end Insert;
        function Search (T : in Tree; Key : in Key_Type) return Data_Type is
            -- search for key recursively in tree, return data if found
            if T = null then -- if tree is empty, return null
                return null;
            elsif Key < T.all.Key then -- traverse left subtree if key is less than current node's key
                return Search(T.Left, Key);
            elsif Key > T.all.Key then -- traverse right subtree if key is greater than current node's key
                return Search(T.Right, Key);
            else -- key matches, return data
                return T.Data;
            end if;
        end Search;
end Binary_Search_Tree;