procedure Factorial(n: Positive; result: out Positive) is
-- This procedure calculates the factorial of a given positive integer n and stores the result in the variable result
begin
    result := 1; -- initialize result to 1
    for i in 1..n loop -- loop through numbers from 1 to n
        result := result * i; -- multiply result by current number
    end loop;
    -- the final value of result will be the factorial of n
end Factorial;

function Fibonacci(n: Natural) return Natural is
-- This function calculates the nth Fibonacci number and returns it as a natural number
    return n if n <= 1; -- base case
    return Fibonacci(n-1) + Fibonacci(n-2); -- recursive call to calculate the sum of previous two numbers
    -- the final value will be the nth Fibonacci number
end Fibonacci;

procedure MergeSort(A: in out Integer_Array; low, high: Integer) is
-- This procedure implements the merge sort algorithm to sort the given array A in ascending order
    -- base case: if the array has only one element, it is already sorted
    if high <= low then
        return;
    end if;
    
    -- find the middle index of the array
    mid := (high + low) / 2;
    
    -- recursively sort the first half of the array
    MergeSort(A, low, mid);
    
    -- recursively sort the second half of the array
    MergeSort(A, mid+1, high);
    
    -- merge the two sorted halves of the array
    Merge(A, low, mid, high);
end MergeSort;