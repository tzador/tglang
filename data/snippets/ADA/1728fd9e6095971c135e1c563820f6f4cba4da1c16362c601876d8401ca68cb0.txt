-- Define a generic package for a hash table data structure
generic
    type KeyType is range <>;
    type ValueType is private;
    type TableSizeType is range <>;
package Hash_Table is
    
    -- Define the 'hash function' subprogram, which maps a key to a bucket index
    function Hash_Function(Key : KeyType) return TableSizeType is 
        Value : TableSizeType;
    begin
        -- Perform some mathematical operations to generate a unique hash value
        Value := ((Key mod 10) + (Key mod 100));
        return Value;
    end Hash_Function;
    
    -- Define the internal 'bucket' record type to store key/value pairs
    type Bucket_Type is record
        Key : KeyType;
        Value : ValueType;
    end record;
    
    -- Define the hash table itself as an array of buckets
    type Table_Type is array (TableSizeType range <>) of Bucket_Type;
    Table : Table_Type;
    
    -- Define a procedure to insert a new key/value pair into the hash table
    procedure Insert(Key : in KeyType; Value : in ValueType) is
        Bucket_Index : TableSizeType;
    begin
        -- Use the hash function to find the appropriate bucket index
        Bucket_Index := Hash_Function(Key);
        
        -- Insert the key/value pair into the correct bucket
        Table(Bucket_Index).Key := Key;
        Table(Bucket_Index).Value := Value;
    end Insert;
    
    -- Define a function to get the value associated with a key in the hash table
    function Get(Key : KeyType) return ValueType is
        Bucket_Index : TableSizeType;
    begin
        -- Use the hash function to find the appropriate bucket index
        Bucket_Index := Hash_Function(Key);
        
        -- Return the value corresponding to the given key
        return Table(Bucket_Index).Value;
    end Get;
end Hash_Table;