-- A task type that implements parallel mergesort
task type MergeSort_Task(L: Integer_Array; first, last: in Integer) is
    pragma Priority(10); -- sets the priority of the task
    S: Integer_Array(L'Range); -- array to store sorted elements

    -- recursive procedure for split and merge process
    procedure Divide_And_Merge(T: Integer_Array; p, r, q: in Integer) is
        i, j, k: Integer; -- variables for indexing
        n1, n2: Integer; -- size of subarrays
        T1, T2: aliased Integer_Array(0 .. n1); -- temporary arrays

    begin
        -- terminating condition
        if p = q then -- if only a single element remains
            T(p) := S(p); -- copy the element to original array
        else
            -- split the array into 2 subarrays
            n1 := (p + q) / 2;
            n2 := (p + q) / 2 + 1;

            -- recursively call Divide_And_Merge on subarrays
            MergeSort_Task(T1, p, r);
            MergeSort_Task(T2, r + 1, q);

            -- merge the sorted subarrays
            i := p;
            j := r + 1;
            k := p;

            while i <= r and j <= q loop
                if T1(i) < T2(j) then
                    T(k) := T1(i);
                    i := i + 1;
                else
                    T(k) := T2(j);
                    j := j + 1;
                end if;
                
                k := k + 1;
            end loop;

            -- copy remaining elements to original array
            while i <= r loop
                T(k) := T1(i);
                i := i + 1;
                k := k + 1;
            end loop;

            while j <= q loop
                T(k) := T2(j);
                j := j + 1;
                k := k + 1;
            end loop;
        end if;
    end Divide_And_Merge;

    -- main task body
    begin
        -- create temporary array to store unsorted elements
        T: aliased Integer_Array(first .. last);

        -- initialize temporary array with unsorted elements
        for k in T'Range loop
            T(k) := L(k);
        end loop;

        -- call the recursive procedure
        Divide_And_Merge(T, first, last, first + (last - first) / 2);

        -- copy sorted elements to original array
        for k in S'Range loop
            L(k + first - 1) := S(k);
        end loop;
    end;
end MergeSort_Task;