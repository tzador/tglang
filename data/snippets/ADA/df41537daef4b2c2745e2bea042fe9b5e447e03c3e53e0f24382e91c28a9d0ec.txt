with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Ada.Unchecked_Deallocation; use Ada.Unchecked_Deallocation;
-- Imported packages
 
procedure Main is
   type Int_Array is array (Positive range <>) of Integer;
   -- Defines a type for integer arrays
   
   function Max (Vec : in Int_Array) return Integer 
   -- Function that returns the maximum integer value in an array 
                                       
   is
      Max_Value : Integer := Vec(1);
      -- Set the maximum value to the first element in the array

   begin
      for I in Vec'First + 1 .. Vec'Last loop
         if Vec(I) > Max_Value then
            Max_Value := Vec(I);
         end if;
      end loop;

      return Max_Value;
      -- Return the maximum value found in the array

   end Max;
   
   procedure Merge (Left, Right : in Int_Array; Result : out Int_Array) 
   -- Procedure that merges two sorted arrays into one sorted array
   
   is
      I : Positive := Left'First;
      J : Positive := Right'First;
      K : Positive := Result'First;
      -- Initialize the indexes for the left, right, and result arrays
      
   begin
      while I <= Left'Last and J <= Right'Last loop
         if Left(I) < Right(J) then
            Result(K) := Left(I);
            I := I + 1;
         else
            Result(K) := Right(J);
            J := J + 1;
         end if;
         K := K + 1;
      end loop;

      while I <= Left'Last loop
         Result(K) := Left(I);
         I := I + 1;
         K := K + 1;
      end loop;

      while J <= Right'Last loop
         Result(K) := Right(J);
         J := J + 1;
         K := K + 1;
      end loop;

   end Merge;

   procedure Merge_Sort (Vector : in out Int_Array) 
   -- Procedure that sorts an array using merge sort
   
   is
      N : Integer := Vector'Length;
      Mid : Integer := N / 2;
      Left, Right : Int_Array (1 .. Mid, 1 .. N - Mid);
      -- Split the array into two subarrays
      
   begin
      if N > 1 then
         for I in 1 .. Mid loop
            Left(I) := Vector(I);
         end loop;

         for J in Mid + 1 .. N loop
            Right(J - Mid) := Vector(J);
         end loop;

         Merge_Sort (Left);
         Merge_Sort (Right);
         -- Sort the subarrays using recursion

         Merge (Left, Right, Vector);
         -- Merge the sorted subarrays into one array
      end if;
   end Merge_Sort;


   procedure Print_Array (Vec : in Int_Array) 
   -- Procedure that prints the elements of an array
   
   is
      B : Strings.Unbounded.Unbounded_String := "( ";
      -- Initialize an empty string to store the elements of the array
      
   begin
      for I in Vec'Range loop
         Integer'Image(I, B);
         -- Convert the element to a string
         if I < Vec'Last then
            B := B & ", ";
         end if;
      end loop;

      B := B & " )";
      Put_Line (B.Unbounded_String);
      -- Print the elements of the array
   end Print_Array;
   
   
   Vector : Int_Array (1 .. 10);
   -- Declare an array of size 10
   
   begin
      Vector := (9, 7, 3, 1, 8, 5, 6, 2, 4, 10);
      -- Initialize the array with random values
      
      Merge_Sort (Vector);
      -- Sort the array using merge sort
      Put_Line ("Sorted Array: ");
      Print_Array (Vector);
      -- Print the sorted array
   end Main;