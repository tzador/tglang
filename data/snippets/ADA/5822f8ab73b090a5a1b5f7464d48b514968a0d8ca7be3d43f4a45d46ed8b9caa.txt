with Ada.Text_IO; -- imports the Text_IO package 

procedure Main is -- declares a procedure named Main
    type Color is (Red, Green, Blue); -- declares an enumeration type named Color 

    task Some_Task is -- declares a task named Some_Task 
    end Some_Task; -- end of task declaration

    procedure Another_Procedure(X : in out Integer) is -- declares a procedure named Another_Procedure that takes an Integer by reference 
        New_Num : Integer := X + 10; -- creates a local variable named New_Num and initializes it with value X + 10 
    begin 
        Ada.Text_IO.Put_Line("The value of X is " & Integer'Image(X)); -- outputs the value of X using Text_IO package 
        Ada.Text_IO.Put_Line("The value of New_Num is " & Integer'Image(New_Num)); -- outputs the value of New_Num using Text_IO package 
    end Another_Procedure; -- end of procedure declaration 

begin 
    Some_Task; -- starts the task 
    Some_Task; -- starts the task again 
    for I in 1..10 loop -- loops 10 times 
        Ada.Text_IO.Put_Line("New loop iteration: " & Integer'Image(I)); -- outputs the iteration number using Text_IO package 
    end loop; 

    declare -- declares a local block 
        X : Integer := 5; -- creates a local variable named X and initializes it with value 5 
    begin 
        Another_Procedure(X); -- calls Another_Procedure and passes X as argument 
    end; 

exception -- handles exceptions 
    when Constraint_Error => -- handles Constraint_Error exceptions 
        Ada.Text_IO.Put_Line("Oops, something went wrong!"); -- outputs an error message using Text_IO package 
end Main; -- end of procedure Main