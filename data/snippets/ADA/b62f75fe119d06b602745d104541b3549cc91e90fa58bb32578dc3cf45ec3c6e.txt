-- Create generic package for implementing a hashtable --

generic
    type Key_Type is (<Key_Type_Range>);
    type Value_Type is (<Value_Type_Range>);
    type Hash is private;
    type Equality is private;

package Hash_Table is

    -- Define the Hash_Type record which keeps track of the keys and values --
    type Hash_Type is record
        Key : Key_Type;
        Value : Value_Type;
    end record;

    -- Define a hash table as an array of Hash_Types --
    type Hash_Table_Type is array(Hash range <>, Positive range <>) of Hash_Type;
    pragma Pure(Hash_Table_Type);

    -- Define functions for hash functions, equality checks, and index calculations --
    function Hash_Function(Key : Key_Type; H : Hash) return Positive;
    function Int_Equal(Left, Right : Hash) return Boolean;
    function Calculate_Index(Key : Key_Type; Size : Positive; H : Hash) return Positive;

    -- Initialize a hash table, returns default null values for keys and values --
    function Initialize(Size : Positive) return Hash_Table_Type;
    pragma Inline(Initialize);

    -- Set a key-value pair in the hash table --
    procedure Set(Key : Key_Type; Value : Value_Type; Table : in out Hash_Table_Type);
    pragma Inline(Set);

    -- Get the value for a given key in the hash table --
    function Get(Key : Key_Type; Table : Hash_Table_Type) return Value_Type;
    pragma Inline(Get);

private

    -- Define the maximum size of the hash table --
    Max_Size : constant Positive := 100;

end Hash_Table;