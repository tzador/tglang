procedure Merge (A : in out Arr; S, M, E : Integer) is
-- This procedure implements the merge sort algorithm
-- A : the input array to be sorted
-- S, M, E : integer indices representing the start, middle and end positions of A

   Lsize : Integer := M - S + 1; -- size of the left subarray
   Rsize : Integer := E - M; -- size of the right subarray

   L_arr : Arr(1 .. Lsize);     -- left subarray
   R_arr : Arr(1 .. Rsize);     -- right subarray

   i, j : Integer := 1;         -- indices for left and right subarrays
   k : Integer := S;            -- index for the main array A

begin

   -- copy data from A to L_arr and R_arr
   for x in S .. M loop
      L_arr(i) := A(x);
      i := i + 1;
   end loop;

   for y in M+1 .. E loop
      R_arr(j) := A(y);
      j := j + 1;
   end loop;

   i := 1;
   j := 1;

   -- compare elements in L_arr and R_arr and add the smaller element to main array A
   for k in S .. E loop
      if L_arr(i) <= R_arr(j) then
         A(k) := L_arr(i);
         i := i + 1;
      else
         A(k) := R_arr(j);
         j := j + 1;
      end if;
   end loop;

end Merge;

procedure Merge_Sort (A : in out Arr; S, E : Integer) is
-- This procedure uses the merge sort algorithm to sort the array A
-- A : the input array to be sorted
-- S, E : integer indices representing the start and end positions of A

begin

   if (S < E) then
      M : Integer := (S + E) / 2; -- finding the middle index

      -- recursively call Merge_Sort to sort the left and right subarrays
      Merge_Sort(A, S, M);
      Merge_Sort(A, M+1, E);

      -- merge the sorted left and right subarrays
      Merge(A, S, M, E);
   end if;

end Merge_Sort;