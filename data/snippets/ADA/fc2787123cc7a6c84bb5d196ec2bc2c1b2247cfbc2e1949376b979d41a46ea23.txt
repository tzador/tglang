--This code snippet is written in ADA language.
--It creates a generic package for handling linked lists of integers.
--First, we declare a private type of our linked list node with an integer data value and a pointer to the next node.
private type List_Node is
    record
        Data : Integer;
        Next : access List_Node;
    end record;
    
--Next, we declare a generic package using the above type with a type parameter for the data type.
generic
    type Data_Type is private;
package Linked_List is
    
    --Declare the public type List_Type which is a pointer to a List_Node with the generic data type.
    type List_Type is access List_Node(Data_Type);
    
    --Declare the methods for creating a new list and adding and removing nodes from the list.
    --Note: These methods require the List_Type parameter to be instantiated.
    procedure Create_List (L : out List_Type);
    procedure Add (L : in out List_Type; Item : in Data_Type);
    procedure Remove (L : in out List_Type; Item : in Data_Type);
    
    --Declare a function that checks if a given list is empty.
    --Note: This function can be used without instantiating the List_Type parameter.
    function Is_Empty (L : List_Type) return Boolean;
    
end Linked_List;

--Implementation of the package.
package body Linked_List is

    --Create_List method - sets the list to null.
    procedure Create_List (L : out List_Type) is
    begin
        L := null;
    end Create_List;
    
    --Add method - creates a new node and adds it to the front of the list.
    procedure Add (L : in out List_Type; Item : in Data_Type) is
        New_Node : access List_Node := new List_Node'(Data => Item, Next => L);
    begin
        L := New_Node;
    end Add;
    
    --Remove method - removes the first node from the list that contains the given item.
    procedure Remove (L : in out List_Type; Item : in Data_Type) is
        Current : access List_Node := L;
        Previous : access List_Node := null;
    begin
        while Current /= null loop
            if Current.Data = Item then
                if Previous = null then
                    L := Current.Next;
                else
                    Previous.Next := Current.Next;
                end if;
                exit; --end loop once a match is found.
            end if;
            Previous := Current;
            Current := Current.Next;
        end loop;
    end Remove;
    
    --Is_Empty function - checks if the list is null.
    function Is_Empty (L : List_Type) return Boolean is
    begin
        return L = null;
    end Is_Empty;

end Linked_List;