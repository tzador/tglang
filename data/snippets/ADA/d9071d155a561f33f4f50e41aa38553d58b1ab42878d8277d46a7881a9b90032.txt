-- This package implements a generic binary tree data structure
with type Key is private;
package Binary_Tree is
   -- Define the data structure of a binary tree node
   type TreeNode;
   private

   type Tree_Pointer is access TreeNode;

   type TreeNode is record
      Data : Key;
      Left_Child : Tree_Pointer := null;
      Right_Child : Tree_Pointer := null;
   end record;

   -- Function to check if a node is a leaf
   function Is_Leaf (Node : Tree_Pointer) return Boolean;

   -- Function to check if the tree is empty
   function Is_Empty return Boolean;

   -- Procedure to insert a new node into the tree
   procedure Insert (Node : in out Tree_Pointer; New_Data : in Key);

   -- Procedure to delete a node from the tree
   procedure Delete (Node : in out Tree_Pointer; Data_To_Delete in Key);

   -- Procedure to print the tree in preorder traversal
   procedure Preorder (Node : in Tree_Pointer);

   -- Procedure to print the tree in inorder traversal
   procedure Inorder (Node : in Tree_Pointer);

   -- Procedure to print the tree in postorder traversal
   procedure Postorder (Node : in Tree_Pointer);

   -- Function to find the minimum value in the tree
   function Find_Minimum (Node : in Tree_Pointer) return Key;

   -- Function to find the maximum value in the tree
   function Find_Maximum (Node : in Tree_Pointer) return Key;

   -- Function to find the successor of a given node
   function Successor (Node : in Tree_Pointer) return Tree_Pointer;
   
   -- Function to find the predecessor of a given node
   function Predecessor (Node : in Tree_Pointer) return Tree_Pointer;
   
   -- Function to return the height of the tree
   function Get_Height (Node : in Tree_Pointer) return Integer;
   
   -- Procedure to clear the tree
   procedure Clear_Tree (Node : in out Tree_Pointer);
   
   -- Function to check if a value is present in the tree
   function Contains (Node : in Tree_Pointer; Value : in Key) return Boolean;
   
   -- Function to perform a deep copy of the tree
   function Copy_Tree (Node : in Tree_Pointer) return Tree_Pointer;
   
end Binary_Tree;

with Ada.Text_IO; use Ada.Text_IO;
with Binary_Tree;
procedure Main is
   -- Create a new integer binary tree
   package Integer_Binary_Tree is new Binary_Tree (Key => Integer);
   
   -- Declare a variable to hold the root node
   Root : Integer_Binary_Tree.Tree_Pointer;
   
   -- Insert some test data into the tree
   Integer_Binary_Tree.Insert (Root, 10);
   Integer_Binary_Tree.Insert (Root, 5);
   Integer_Binary_Tree.Insert (Root, 15);
   Integer_Binary_Tree.Insert (Root, 8);
   Integer_Binary_Tree.Insert (Root, 3);
   
   -- Print the tree in preorder traversal
   Put_Line ("Preorder Traversal:");
   Integer_Binary_Tree.Preorder (Root);
   New_Line;
   
   -- Print the tree in inorder traversal
   Put_Line ("Inorder Traversal:");
   Integer_Binary_Tree.Inorder (Root);
   New_Line;
   
   -- Print the height of the tree
   Put_Line ("Tree Height: " & Integer_Binary_Tree.Get_Height (Root)'Image);
   
   -- Delete the node with value 5 from the tree
   Integer_Binary_Tree.Delete (Root, 5);
   
   -- Print the tree in postorder traversal to show updated structure
   Put_Line ("Postorder Traversal (after deleting 5):");
   Integer_Binary_Tree.Postorder (Root);
   New_Line;
   
   -- Check if value 5 is still present in the tree
   if Integer_Binary_Tree.Contains (Root, 5) then
      Put_Line ("5 is still in the tree.");
   else
      Put_Line ("5 has been successfully deleted.");
   end if;
   
   -- Clear the tree before exiting the program
   Integer_Binary_Tree.Clear_Tree (Root);
   
end Main;