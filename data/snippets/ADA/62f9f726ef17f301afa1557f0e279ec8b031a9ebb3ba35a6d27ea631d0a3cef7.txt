-- Declare an array with an unconstrained generic type
type Generic_Array is array (Positive range <>) of unspecified;

-- Declare a function that takes in a Generic_Array and returns a Generic_Array
function Process_Array (Array : in Generic_Array) return Generic_Array is
    New_Array : Generic_Array;
begin
    -- Loop through the elements in the input array
    for I in Array'Range loop
        -- Perform some operation on the element and add it to the new array
        New_Array(I) := Array(I) + 1;
    end loop;
    return New_Array;
end Process_Array;

-- Declare a procedure to print out the contents of a Generic_Array
procedure Print_Array (Array : in Generic_Array) is
begin
    -- Loop through the elements in the array and print each one
    for I in Array'Range loop
        Put_Line(Array(I)'Image);
    end loop;
end Print_Array;

-- Declare a new array and initialize it with some values
My_Array : Generic_Array(1..10) := (2,4,6,8,10,12,14,16,18,20);

-- Call the Process_Array function on the My_Array and store the result in a new array
New_Array : Generic_Array := Process_Array(My_Array);

-- Print out the contents of both arrays
Print_Array(My_Array);
Print_Array(New_Array);