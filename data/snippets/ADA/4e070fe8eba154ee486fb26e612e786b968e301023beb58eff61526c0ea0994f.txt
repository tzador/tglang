-- This code snippet implements a doubly linked list data structure
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

procedure Doubly_Linked_List is
   
   -- Define the node type
   type Node is record
      Data : Integer;
      Next : access Node;
      Prev : access Node;
   end record;
   
   -- Define the head and tail variables
   Head : access Node := null;
   Tail : access Node := null;
   
   -- Function to check if the linked list is empty
   function Is_Empty return Boolean is
   begin
      return Head = null;
   end Is_Empty;
   
   -- Procedure to insert a new node at the beginning
   procedure Insert_Beg (Value : Integer) is
      New_Node : access Node := new Node;
   begin
      New_Node.Next := Head;
      New_Node.Prev := null;
      New_Node.Data := Value;
      
      if not Is_Empty then
         Head.Prev := New_Node;
      else
         Tail := New_Node;
      end if;
      
      Head := New_Node;
   end Insert_Beg;
   
   -- Procedure to insert a new node at the end
   procedure Insert_End (Value : Integer) is
      New_Node : access Node := new Node;
   begin
      New_Node.Next := null;
      New_Node.Prev := Tail;
      New_Node.Data := Value;
      
      if not Is_Empty then
         Tail.Next := New_Node;
      else
         Head := New_Node;
      end if;
      
      Tail := New_Node;
   end Insert_End;
   
   -- Procedure to delete a node at the beginning
   procedure Delete_Beg is
   begin
      if not Is_Empty then
         Head := Head.Next;
         
         if Head /= null then
            Head.Prev := null;
         else
            Tail := null;
         end if;
      else
         Put_Line("The linked list is already empty");
      end if;
   end Delete_Beg;
   
   -- Procedure to delete a node at the end
   procedure Delete_End is
   begin
      if not Is_Empty then
         Tail := Tail.Prev;
         
         if Tail /= null then
            Tail.Next := null;
         else
            Head := null;
         end if;
      else
         Put_Line("The linked list is already empty");
      end if;
   end Delete_End;

   -- Procedure to print the linked list from head to tail
   procedure Print_List (Current : access Node := Head) is
   begin
      if Current /= null then
         Put(Current.Data, 5);
         Print_List(Current.Next);
      end if;
   end Print_List;
   
   -- Procedure to print the linked list from tail to head
   procedure Reverse_Print (Current : access Node := Tail) is
   begin
      if Current /= null then
         Put(Current.Data, 5);
         Reverse_Print(Current.Prev);
      end if;
   end Reverse_Print;
   
begin
   -- Insert nodes
   Insert_Beg(1);
   Insert_Beg(2);
   Insert_End(3);
   Insert_End(4);
   
   -- Print the list from head to tail
   Put_Line("The linked list from head to tail:");
   Print_List;
   
   -- Delete a node at the beginning
   Delete_Beg;
   
   -- Print the list from tail to head
   Put_Line("The linked list in reverse:");
   Reverse_Print;
end Doubly_Linked_List;