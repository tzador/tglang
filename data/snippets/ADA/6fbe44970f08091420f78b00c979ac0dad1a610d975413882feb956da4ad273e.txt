-- Package for a linked list data structure in ADA

generic
    type Data_Type is private; -- generic type parameter for data stored in nodes
package Linked_List is

    type List is private; -- private type for linked list
    type Node is private; -- private type for node in linked list

    function Create return List; -- function to create a new linked list

    procedure Add_End(item : in Data_Type; list : in out List); -- procedure to add new element at the end of the list
    procedure Add_Index(item : in Data_Type; index : in Integer; list : in out List); -- procedure to add new element at specified index in the list

    procedure Delete_End(list : in out List); -- procedure to delete last element from the list
    procedure Delete_Index(index : in Integer; list : in out List); -- procedure to delete element at specified index from the list

    function Get(item : in Data_Type; list : in List) return Node; -- function to get the node containing specified data
    function Get_Index(item : in Data_Type; list : in List) return Integer; -- function to get the index of node containing specified data

    function Is_Empty(list : in List) return Boolean; -- function to check if the list is empty 
    function Length(list : in List) return Integer; -- function to get the length of the list

    function To_String(list : in List) return String; -- function to convert the list to a string representation

private

    type Node is
        record
            Data : Data_Type;
            Next : access Node;
        end record;

    type List is
        record
            Head : access Node; -- reference to the head of the list
            Size : Integer; -- variable to store the length of the list
        end record;

end Linked_List;