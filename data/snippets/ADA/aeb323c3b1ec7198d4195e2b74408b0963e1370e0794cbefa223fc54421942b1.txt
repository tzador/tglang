-- Declare a generic package with a parameter allowing for different numeric types
generic
    type Num is digits <>; -- generic type parameter
package Generic_Math is
    -- Declare a generic function for calculating the square root of a number
    function Square_Root (Input : Num) return Num;
    
    -- Declare a generic procedure for swapping the values of two variables
    procedure Swap (Var1, Var2 : in out Num);
    
private
    -- Define the internal constant for the maximum allowed error in square root calculations
    Max_Error : constant Float := 0.00001;
    
    -- Define the internal function for calculating the absolute value of a number
    function Abs (Input : Num) return Num is
        Result : Num := Input;
    begin
        if Result < 0 then
            Result := -Input;
        end if;
        
        return Result;
    end Abs;
    
    -- Define the internal function for comparing two numbers based on a maximum error
    function Is_Equal (Num1, Num2 : Num) return Boolean is
    begin
        if Abs (Num1 - Num2) < Max_Error then
            return True;
        else
            return False;
        end if;
    end Is_Equal;
    
    -- Define the internal function for calculating the square root using the Newton-Raphson method
    function Newton_Sqrt (Input : Num) return Num is
        Approximation : Num := Num'Base (0.5); -- initial guess
        Root : Num := Num'Base (0.0); -- initial root value
    begin
        -- Loop until the calculated root is within the maximum error
        while not Is_Equal (Approximation, Root) loop
            Root := Approximation;
            Approximation := (Root + Input / Root) / 2;
        end loop;
        
        return Approximation;
    end Newton_Sqrt;
    
    -- Define the internal procedure for swapping two numbers using a temporary variable
    procedure Temp_Swap (Var1, Var2 : in out Num) is
        Temp : Num := Var1;
    begin
        Var1 := Var2;
        Var2 := Temp;
    end Temp_Swap;
    
    -- Define the internal procedure for swapping two numbers using XOR operation
    procedure Xor_Swap (Var1, Var2 : in out Num) is
    begin
        Var1 := Var1 xor Var2;
        Var2 := Var1 xor Var2;
        Var1 := Var1 xor Var2;
    end Xor_Swap;
    
begin
    -- Define a default implementation for the generic function Square_Root
    function Square_Root (Input : Num) return Num is
    begin
        -- Use the internal function Newton_Sqrt to calculate the square root
        return Newton_Sqrt (Input);
    end Square_Root;
    
    -- Define a default implementation for the generic procedure Swap
    procedure Swap (Var1, Var2 : in out Num) is
    begin
        -- Use the internal procedure Temp_Swap to swap the values of the two variables
        Temp_Swap (Var1, Var2);
    end Swap;
end Generic_Math;