-- Package declaration
package Graphs is
   -- Generic type for representing vertices in a graph
   type Vertex is (<>);
   
   -- Generic type for representing edges in a graph
   type Edge is record
      Source : Vertex;
      Target : Vertex;
   end record;

   -- Type for storing the graph data
   type Graph is record
      Vertices : Integer;
      Edges : Integer;
      Adjacency_Matrix : array(1 .. 100, 1 .. 100) of Integer;
   end record;

   -- Exception raised when accessing non-existent vertex
   Invalid_Vertex_Exception : Exception;

   -- Exception raised when adding an existing edge
   Existing_Edge_Exception : Exception;

   -- Function to add a new vertex to the graph
   procedure Add_Vertex(Vertex : inout Vertex; G : inout Graph);

   -- Function to add a new edge to the graph
   procedure Add_Edge(Edge : inout Edge; G : inout Graph);

   -- Procedure to remove a vertex from the graph
   procedure Remove_Vertex(Vertex : in Vertex; G : inout Graph);

   -- Procedure to remove an edge from the graph
   procedure Remove_Edge(Edge : in Edge; G : inout Graph);

   -- Function to check if two vertices are adjacent
   function Is_Adjacent(Vertex1 : in Vertex; Vertex2 : in Vertex; G : in Graph) return Boolean;

   -- Function to get the number of edges in the graph
   function Number_Of_Edges(G : in Graph) return Integer;
end Graphs;

-- Package body
package body Graphs is
   -- Function to add a new vertex to the graph
   procedure Add_Vertex(Vertex : inout Vertex; G : inout Graph) is
   begin

      -- Check if the vertex already exists in the graph
      if Number_Of_Edges(G) /= 0 then
         for i in 1 .. G.Vertices loop
            if Is_Adjacent(Vertex, Vertex'(<>)G.Vertex[i], G) then
               raise Existing_Edge_Exception;
            end if;
         end loop;
      end if;

      -- Add the vertex to the graph
      G.Vertices := G.Vertices + 1;
      G.Vertex[G.Vertices] := Vertex;
   end Add_Vertex;

   -- Function to add a new edge to the graph
   procedure Add_Edge(Edge : inout Edge; G : inout Graph) is
   begin

      -- Check if the edge already exists in the graph
      if G.Adjacency_Matrix(Edge.Source, Edge.Target) = 1 then
         raise Existing_Edge_Exception;
      end if;

      -- Add the edge to the graph
      G.Adjacency_Matrix(Edge.Source, Edge.Target) := 1;
      G.Adjacency_Matrix(Edge.Target, Edge.Source) := 1;
      G.Edges := G.Edges + 1;
   end Add_Edge;

   -- Procedure to remove a vertex from the graph
   procedure Remove_Vertex(Vertex : in Vertex; G : inout Graph) is
      Index : Integer;
   begin

      -- Find the index of the vertex in the graph
      for i in 1 .. G.Vertices loop
         if G.Vertex[i] = Vertex then
            Index := i;
            exit;
         end if;
      end loop;

      if Index = 0 then
         -- Vertex does not exist in the graph, raise exception
         raise Invalid_Vertex_Exception;
      else
         -- Remove the vertex from the graph
         for i in Index .. G.Vertices - 1 loop
            G.Vertex[i] := G.Vertex[i + 1];
         end loop;
         G.Vertices := G.Vertices - 1;
      end if;

      -- Remove edges connected to the removed vertex
      for i in 1 .. G.Vertices loop
         if G.Adjacency_Matrix[i, Index] = 1 then
            G.Adjacency_Matrix[i, Index] := 0;
            G.Adjacency_Matrix[Index, i] := 0;
            G.Edges := G.Edges - 1;
         end if;
      end loop;
   end Remove_Vertex;

   -- Procedure to remove an edge from the graph
   procedure Remove_Edge(Edge : in Edge; G : inout Graph) is
   begin
      -- Check if the edge exists in the graph
      if G.Adjacency_Matrix(Edge.Source, Edge.Target) = 0 then
         raise Invalid_Edge_Exception;
      end if;

      -- Remove the edge from the graph
      G.Adjacency_Matrix(Edge.Source, Edge.Target) := 0;
      G.Adjacency_Matrix(Edge.Target, Edge.Source) := 0;
      G.Edges := G.Edges - 1;
   end Remove_Edge;

   -- Function to check if two vertices are adjacent
   function Is_Adjacent(Vertex1 : in Vertex; Vertex2 : in Vertex; G : in Graph) return Boolean is
   begin
      return G.Adjacency_Matrix(Vertex1, Vertex2) = 1 or G.Adjacency_Matrix(Vertex2, Vertex1) = 1;
   end Is_Adjacent;

   -- Function to get the number of edges in the graph
   function Number_Of_Edges(G : in Graph) return Integer is
   begin
      return G.Edges;
   end Number_Of_Edges;
end Graphs;