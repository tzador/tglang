procedure Merge_Sort(A: in out Array) is

   procedure Merge(A: in out Array; L: Integer; M: Integer; R : Integer) is
      
      Left_Array : Array(L..M) of A(L..M);
      Right_Array : Array(M+1..R) of A(M+1..R);
      
      i, j, k: Integer;
      
   begin
      -- Copy data from the main array to temporary arrays
      for i in L..M loop       
         Left_Array(i) := A(i);
      end loop;
      for j in M+1..R loop
         Right_Array(j) := A(j);
      end loop;
      
      i := L;
      j := M+1;
      k := L;
      
      -- Merge the temporary arrays back into the main array
      while i <= M and j <= R loop
         -- Compare elements in the left and right array
         if Left_Array(i) <= Right_Array(j) then
            A(k) := Left_Array(i);
            i := i + 1;
         else
            A(k) := Right_Array(j);
            j := j + 1;
         end if;
         
         k := k + 1;
      end loop;
      
      -- Copy any remaining elements from the left array
      while i <= M loop
         A(k) := Left_Array(i);
         i := i + 1;
         k := k + 1;
      end loop;
      
      -- Copy any remaining elements from the right array
      while j <= R loop
         A(k) := Right_Array(j);
         j := j + 1;
         k := k + 1;
      end loop;
      
   end Merge;
   
   -- Divide the array into smaller subarrays for sorting
   procedure Sort(A: in out Array; L: Integer; R: Integer) is
      M : Integer;
   begin
      if L < R then
         -- Find the middle index of the array
         M := (L + R) / 2;
         -- Sort the elements in the left subarray
         Sort(A, L, M);
         -- Sort the elements in the right subarray
         Sort(A, M+1, R);
         -- Merge the sorted subarrays
         Merge(A, L, M, R);
      end if;
   end Sort;
   
begin
   
   -- Sort the entire array
   Sort(A, 1, Array'Last);
end Merge_Sort;