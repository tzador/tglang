--Task type definition for a binary search algorithm
task type Binary_Search is
   entry Initialize (nums : in out Integer_Array);
   entry Search (target : in Integer);
   entry Terminate;
end Binary_Search;

--Implementation of the task type
task body Binary_Search is
   nums : Integer_Array; --array to store numbers to be searched
   target : Integer; --target number to be searched for
   low, high, mid : Integer; --variables for storing indices
   found : Boolean := false; --flag to indicate if target is found
begin
   accept Initialize (nums : in out Integer_Array) do
      low := nums'First; --set the lowest index to first index of array
      high := nums'Last; --set the highest index to last index of array
   end Initialize;

   accept Search (target : in Integer) do
      while low <= high and not found loop --as long as low index is less than high index and target not found
         mid := (low + high) / 2; --calculate the middle index
         if nums(mid) = target then --if middle element equals target
            found := true; --set flag to true
         elsif target < nums(mid) then --if target is less than middle element
            high := mid - 1; --set high index to one index lower than middle index
         else --if target is greater than middle element
            low := mid + 1; --set low index to one index higher than middle index
         end if;
      end loop;
   end Search;

   entry Terminate when found do --terminate when target is found
      null;
   end Terminate;
end Binary_Search;