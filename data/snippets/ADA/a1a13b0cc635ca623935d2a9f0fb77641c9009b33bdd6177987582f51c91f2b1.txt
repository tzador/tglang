-- This code snippet is a function that checks whether a given number is prime or not
-- It uses the Fermat's primality test and has a complexity of O(log(n))

function is_prime(n: positive) return Boolean is

    k: constant positive := 100; -- number of iterations for the test
    a: positive;
    x: positive;
    power_result: natural;

begin
    if n = 2 then -- 2 is a prime number
        return True;
    elsif n mod 2 = 0 then -- any even number (except 2) is not prime
        return False;
    else
        for i in 1..k loop -- loop for k iterations
            a := random(n - 2) + 2; -- generate a random number between 2 and n-1
            power_result := ((a ** (n - 1)) mod n); -- calculate a^(n-1) mod n

            if power_result /= 1 then -- if result is not 1, number is definitely not prime
                return False;
            end if;
        end loop;

        return True; -- if all iterations pass the test, number is likely to be prime
    end if;
end is_prime;