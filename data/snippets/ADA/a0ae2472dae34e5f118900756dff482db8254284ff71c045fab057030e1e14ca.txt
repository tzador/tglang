-- This is a code snippet in ADA that creates a linked list with insertion and deletion functions 

with Ada.Text_IO; use Ada.Text_IO;

procedure Linked_List is
   
   -- Node record to store data and pointers for the linked list
   -- Generic allows for different data types 
   
   type Node(Generic_Data_Type: Type) is record
      Data : Generic_Data_Type;
      Next : access Node(Generic_Data_Type);
      Prior : access Node(Generic_Data_Type);
   end record;
   
   -- Head and tail pointers of the linked list
   
   Head : access Node(Integer) := null;
   Tail : access Node(Integer) := null;
   
   -- Procedure for inserting new nodes into the linked list
   
   procedure Insert(Item : in Integer) is
      New_Node : access Node(Integer) := new Node'(Data => Item, Next => null);     -- Creating a new node with the given data and no next pointer
      Current_Node : access Node(Integer) := Head;
      
   begin
      
      if Head = null then     -- If linked list is empty, new node becomes head and tail
         Head := New_Node;
         Tail := New_Node;
         
      elsif Item < Head.Data then     -- If new node is smaller than current head, it becomes the new head
         New_Node.Next := Head;
         Head.Prior := New_Node;
         Head := New_Node;
         
      elsif Item > Tail.Data then     -- If new node is larger than current tail, it becomes the new tail
         New_Node.Prior := Tail;
         Tail.Next := New_Node;
         Tail := New_Node;
         
      else     -- If new node is in between two nodes, insert it in the correct position while maintaining order
         
         loop
            if Item < Current_Node.Data then
               New_Node.Next := Current_Node;
               New_Node.Prior := Current_Node.Prior;
               Current_Node.Prior.Next := New_Node;
               Current_Node.Prior := New_Node;
               exit;
               
            end if;
            
            Current_Node := Current_Node.Next;
         end loop;
      end if;
   
   end Insert;
   
   -- Procedure for deleting nodes from the linked list
   
   procedure Delete(Item : in Integer) is
      Current_Node : access Node(Integer) := Head;
      
   begin
      
      if Head = null then     -- If linked list is empty, no deletion can occur
         return;
         
      elsif Item = Head.Data then     -- If the node to be deleted is the head, update the head pointer
         Head := Head.Next;
         
         if Head /= null then
            Head.Prior := null;
         end if;
         
      elsif Item = Tail.Data then     -- If the node to be deleted is the tail, update the tail pointer
         Tail := Tail.Prior;
         
         if Tail /= null then
            Tail.Next := null;
         end if;
         
      else     -- If the node to be deleted is in between two nodes, delete it while maintaining order
         
         loop
            if Item = Current_Node.Data then
               Current_Node.Prior.Next := Current_Node.Next;
               Current_Node.Next.Prior := Current_Node.Prior;
               exit;
               
            end if;
            
            Current_Node := Current_Node.Next;
         end loop;
      end if;
      
      free(Current_Node);     -- Free up memory for the deleted node
   
   end Delete;
      
begin
   Insert(6);
   Insert(8);
   Insert(2);
   Insert(10);
   Delete(2);
end Linked_List;