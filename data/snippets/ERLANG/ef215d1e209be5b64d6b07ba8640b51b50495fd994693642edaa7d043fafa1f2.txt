-module(example). % Declares a module

-export([calculate_sum/1]). % Exports a function
                            % named calculate_sum with 1 argument

-import(math,[sqrt/1]). % Imports the sqrt function from the math library

%% Function to calculate the sum of a list of numbers
%% @param List: list of numbers
%% @return: sum of the list
calculate_sum(List) ->
    %% Pattern matching to check if List is indeed a list
    [H | T] = List,

    %% Base case: when List is empty, return 0
    case List of
        [] -> 0;

        %% Recursive call: add the head (H) to the sum of the tail (T)
        [H | T] -> H + calculate_sum(T)
    end.

%% Function to calculate the average of a list of numbers
%% @param List: list of numbers
%% @return: average of the list
average(List) ->
    %% Calls the calculate_sum function to get the sum of the list
    Sum = calculate_sum(List),

    %% Calls the length function to get the length of the list
    Length = length(List),

    %% Divides the sum by the length to get the average
    Avg = Sum / Length,

    %% Calls the sqrt function from the imported math library
    Root = math:sqrt(Avg),

    %% Rounds the result to 2 decimal places
    Rounded = round(Root * 100) / 100,

    %% Returns the result
    Rounded.