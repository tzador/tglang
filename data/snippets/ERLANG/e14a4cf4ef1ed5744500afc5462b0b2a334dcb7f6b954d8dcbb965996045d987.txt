%% This is a module that implements a simple calculator using processes and messaging in Erlang
-module(calculator).

%% Exported functions
-export([start/0, add/2, multiply/2, divide/2, subtract/2]).

%% Start function that spawns the calculator process and returns its PID
start() ->
    spawn(fun() -> calculator_loop(0) end).

%% Calculator process loop
calculator_loop(Store) ->
    receive
        {add, Num1, Num2} ->
            Result = Num1 + Num2,
            io:format("~p + ~p = ~p~n", [Num1, Num2, Result]),
            calculator_loop(Store);
        {multiply, Num1, Num2} ->
            Result = Num1 * Num2,
            io:format("~p * ~p = ~p~n", [Num1, Num2, Result]),
            calculator_loop(Store);
        {divide, Num1, Num2} ->
            Result = Num1 / Num2,
            io:format("~p / ~p = ~p~n", [Num1, Num2, Result]),
            calculator_loop(Store);
        {subtract, Num1, Num2} ->
            Result = Num1 - Num2,
            io:format("~p - ~p = ~p~n", [Num1, Num2, Result]),
            calculator_loop(Store);
        _ ->
            io:format("Invalid input!~n"),
            calculator_loop(Store)
    end.

%% Function to add numbers
add(Pid, Num1, Num2) ->
    Pid ! {add, Num1, Num2}.

%% Function to multiply numbers
multiply(Pid, Num1, Num2) ->
    Pid ! {multiply, Num1, Num2}.

%% Function to divide numbers
divide(Pid, Num1, Num2) ->
    Pid ! {divide, Num1, Num2}.

%% Function to subtract numbers
subtract(Pid, Num1, Num2) ->
    Pid ! {subtract, Num1, Num2}.