%% This module represents a simple implementation of a binary search tree in Erlang

-module(binary_search_tree).
-export([insert/2, search/2, delete/2]).

%% record for storing tree nodes
-record(node, {key, value, left=nil, right=nil}).

%% function for inserting a new node into the tree
%% accepts a tree and a tuple with key and value
%% returns a new tree or an error if the key already exists
insert(Tree=#node{}, {Key, Value}) ->
    insert_node(Tree, #node{key=Key, value=Value}).

%% helper function for inserting a node
%% recursively traverses the tree until it finds the correct position for the new node
%% updates the left or right child if necessary
%% returns a new tree or an error if the key already exists
%% throws an error if invalid input is given
insert_node(#node{key=Key, value=Value, left=nil, right=nil}, Node) ->
    if
        Key > Node#node.key -> #node{key=Key, value=Value, left=Node, right=nil};
        Key < Node#node.key -> #node{key=Key, value=Value, left=nil, right=Node};
        true -> erlang:error(badarg, "Invalid input")
    end;
insert_node(#node{key=Key, value=Value, left=Left, right=nil}, Node) ->
    case Key > Node#node.key of
        true -> #node{key=Key, value=Value, left=insert_node(Left, Node), right=nil};
        false -> erlang:error(badarg, "Key already exists")
    end;
insert_node(#node{key=Key, value=Value, left=nil, right=Right}, Node) ->
    case Key < Node#node.key of
        true -> #node{key=Key, value=Value, left=nil, right=insert_node(Right, Node)};
        false -> erlang:error(badarg, "Key already exists")
    end;
insert_node(#node{key=Key, value=Value, left=Left, right=Right}, Node) ->
    case Key > Node#node.key of
        true -> #node{key=Key, value=Value, left=insert_node(Left, Node), right=Right};
        false -> #node{key=Key, value=Value, left=Left, right=insert_node(Right, Node)}
    end.

%% function for searching for a specific key in the tree
%% accepts a tree and a key
%% returns the value associated with the key or an error if the key is not found
search(#node{key=Key, value=Value, left=nil, right=nil}, Key) ->
    if
        Key == Key -> Value;
        true -> erlang:error(badarg, "Key not found")
    end;
search(#node{key=Key, value=Value, left=Left, right=nil}, Key) ->
    case Key > Key of
        true -> search(Left, Key);
        false -> erlang:error(badarg, "Key not found")
    end;
search(#node{key=Key, value=Value, left=nil, right=Right}, Key) ->
    case Key < Key of
        true -> search(Right, Key);
        false -> erlang:error(badarg, "Key not found")
    end;
search(#node{key=Key, value=Value, left=Left, right=Right}, Key) ->
    case Key > Key of
        true -> search(Left, Key);
        false -> search(Right, Key)
    end.

%% function for deleting a node from the tree
%% accepts a tree and a key
%% returns a new tree without the deleted node or an error if the key is not found
delete(#node{key=Key, value=Value, left=nil, right=nil}, Key) ->
    if
        Key == Key -> nil;
        true -> erlang:error(badarg, "Key not found")
    end;
delete(#node{key=Key, value=Value, left=Left, right=nil}, Key) ->
    case Key > Key of
        true -> #node{key=Key, value=Value, left=delete(Left, Key), right=nil};
        false -> erlang:error(badarg, "Key not found")
    end;
delete(#node{key=Key, value=Value, left=nil, right=Right}, Key) ->
    case Key < Key of
        true -> #node{key=Key, value=Value, left=nil, right=delete(Right, Key)};
        false -> erlang:error(badarg, "Key not found")
    end;
delete(#node{key=Key, value=Value, left=Left, right=Right}, Key) ->
    case Key > Key of
        true -> #node{key=Key, value=Value, left=delete(Left, Key), right=Right};
        false -> #node{key=Key, value=Value, left=Left, right=delete(Right, Key)}
    end.