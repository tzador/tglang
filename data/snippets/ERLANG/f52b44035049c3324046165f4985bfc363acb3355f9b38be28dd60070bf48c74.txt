-module(math).
-compile(export_all).

% Function to calculate the factorial of a number using recursion
fact(0) -> 1;
fact(N) -> N * fact(N-1).

% Function to calculate the nth term in the Fibonacci sequence using tail recursion
fib(N) -> fib_helper(N, 0, 1).

fib_helper(0, A, B) -> A;
fib_helper(N, A, B) -> fib_helper(N - 1, B, A + B).

% Function to calculate the sum of all elements in a list using pattern matching
sum([]) -> 0;
sum([H|T]) -> H + sum(T).

% Function to calculate the maximum number in a list using recursion
max([H]) -> H;
max([H|T]) -> 
    Max = max(T),
    if H > Max -> H; true -> Max end.

% Function to calculate the average of a list using list comprehension
average(List) ->
    Sum = lists:sum(List),
    Length = length(List),
    Average = Sum / Length,
    [X || X <- List, X > Average].

% Function to calculate the power of a number using pattern matching and guards
power(X, 0) -> 1;
power(X, N) when N > 0 -> X * power(X, N-1).

% Function to calculate the binomial coefficient using nested functions
binomial_coefficient(N, K) -> 
    coefficient_helper(N, K, 1, 1).

coefficient_helper(_, 0, _, Result) ->
    Result;
coefficient_helper(N, K, Current, Result) ->
    Next = (Current * (N + 1 - K)) div K,
    coefficient_helper(N, K-1, Next, Next * Result).