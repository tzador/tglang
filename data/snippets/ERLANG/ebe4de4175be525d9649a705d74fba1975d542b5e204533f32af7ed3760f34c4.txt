%%% Function to recursively calculate the factorial of a number %%%
factorial(N) ->
  case N of
    0 -> 1; %% Base case, 0! = 1
    1 -> 1; %% Base case, 1! = 1
    _ -> N * factorial(N-1) %% Recursive call to calculate N!
  end.
  
%%% Function to calculate the nth term in the Fibonacci sequence %%%
fibonacci(N) ->
  case N of
    0 -> 0; %% Base case, F(0) = 0
    1 -> 1; %% Base case, F(1) = 1
    _ -> fibonacci(N-1) + fibonacci(N-2) %% Recursive call to calculate F(N)
  end.
  
%%% Implementation of a simple stack data structure %%%
-module(my_stack).

%%% Export the 'new' function which creates a new stack %%%
-export([new/0]).

%%% Private helper function to initialize the stack %%%
init_stack() ->
  {[], 0}.

%%% Create a new stack and return its reference %%%
new() ->
  init_stack().

%%% Push an element onto the stack %%%
push(Stack, Element) ->
  {Stack#stack.values ++ [Element], Stack#stack.top + 1}.

%%% Pop an element from the stack %%%
pop(Stack) ->
  {Values, Top} = Stack,
  {hd(Values), {tl(Values), Top - 1}}.

%%% Get the top element from the stack %%%
peek(Stack) ->
  {hd(Stack#stack.values)}.

%%% Check if the stack is empty %%%
isEmpty(Stack) ->
  {_, Top} = Stack,
  Top == 0.