-module(employee_management). % creates a module for managing employee records
-export([add_employee/2, delete_employee/1, update_employee/2, search_employee/1, get_all_employees/0]). % declares exported functions

-record(employee, {name="", age=0, position="", salary=""}). % defines a record for employee data
%% @record :: employee{name :: string(), age :: integer(), position :: string(), salary :: string()}

add_employee(Employee, Records) ->
  case records:is_record(Employee, employee) of % checks if Employee is a valid employee record
    true ->
      [Employee | Records]; % if true, adds Employee record to Records list
    false ->
      Records % if false, returns the original Records list
  end.

delete_employee(Name, Records) ->
  lists:delete({Name, _, _, _}, Records). % deletes record with matching name from Records list 
%% @type :: Name :: string()
%% @spec delete_employee(Name, Records) :: list(employee)

update_employee(Name, {NewName, NewAge, NewPosition, NewSalary}, Records) ->
  lists:keyreplace(Name, 1, Records, {name, NewName, NewAge, NewPosition, NewSalary}). % replaces old record with updated one in Records list
%% @type :: Name :: string()
%% @type :: NewName :: string()
%% @type :: NewAge :: integer()
%% @type :: NewPosition :: string()
%% @type :: NewSalary :: string()
%% @spec update_employee(Name, {NewName, NewAge, NewPosition, NewSalary}, Records) :: list(employee)

search_employee(Name, Records) ->
  lists:filter(fun(Employee) -> element(1, Employee) == Name end, Records). % returns list of records with matching name from Records list
%% @spec search_employee(Name, Records) :: list(employee)

get_all_employees() ->
  Employees = [{<<"John">>, 25, <<"Developer">>, <<"50,000">>},
               {<<"Sarah">>, 30, <<"Manager">>, <<"70,000">>},
               {<<"Michael">>, 24, <<"Designer">>, <<"60,000">>},
               {<<"Emily">>, 28, <<"Accountant">>, <<"65,000">>},
               {<<"David">>, 36, <<"Director">>, <<"100,000">>}]. % creates a sample list of employee records
%% @spec get_all_employees() :: list(employee)

employee_management:add_employee(employee_management:employee("Alex", 32, "Software Engineer", "55,000"), get_all_employees()). % example usage of functions to add a new employee record to the list