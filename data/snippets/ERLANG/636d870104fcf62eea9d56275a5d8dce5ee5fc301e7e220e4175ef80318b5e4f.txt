%%% Erlang Code Snippet %%%
-module(example). 
%% This is a module declaration in Erlang. The module name is 'example'.

-compile(export_all).
%% This directive tells the compiler to export all functions and attributes defined 
%% in the module so they can be used by other modules.

%% Define a record structure to represent a person with an id, name, and age.
-record(person, {id, name, age}).

%% Define a function that creates a new person record with the given parameters.
create_person(Id, Name, Age) ->
    #person{id = Id, name = Name, age = Age}.

%% Define a function that prints out a person's information.
%% The function takes in a person record and uses pattern matching to extract 
%% the id, name, and age from the record.
print_person(#person{id = Id, name = Name, age = Age}) ->
    io:format("ID: ~w, Name: ~s, Age: ~w~n", [Id, Name, Age]).
%% The '~w' and '~s' are placeholders for the values of Id, Name, and Age respectively.
%% The values are passed in as a list in the second argument of io:format().

%% Define a function that checks if a person is of legal drinking age (21 years).
%% The function takes in a person record and uses pattern matching to extract 
%% the age from the record. It then compares the age to 21 and returns a boolean.
legal_drinking_age(#person{age = Age}) ->
    if
        Age >= 21 -> true;
        true -> false
    end.

%% Define a function that calls the create_person() and print_person() functions
%% to create and print a person record.
%% The function takes in the id, name, and age as parameters.
%% It uses the pipe operator (|) to pass the result of create_person() to print_person().
create_and_print_person(Id, Name, Age) ->
    create_person(Id, Name, Age)
    | print_person.

%% Define a function that calls the legal_drinking_age() function to check if a person
%% is of legal drinking age and prints out a message accordingly.
%% The function takes in the person record as a parameter and uses pattern matching
%% to extract the name from the record. If the person is of legal drinking age, it
%% prints a message saying so. Otherwise, it prints a message saying they are underage.
check_legal_drinking_age(Person) ->
    case legal_drinking_age(Person) of
        true -> io:format("~s is of legal drinking age.~n", [Person#person.name]);
        false -> io:format("~s is underage.~n", [Person#person.name])
    end.

%% Define a function that calls the create_and_print_person() and check_legal_drinking_age()
%% functions to create and print a person record and check if they are of legal drinking age.
%% The function takes in the id, name, and age as parameters.
%% It first creates and prints the person record, and then checks their age and prints a message.
create_print_and_check_person(Id, Name, Age) ->
    create_and_print_person(Id, Name, Age),
    check_legal_drinking_age(create_person(Id, Name, Age)).

%% A simple example of using the functions defined above.
create_print_and_check_person(1, "John Smith", 25).
%% This will print "ID: 1, Name: John Smith, Age: 25" and "John Smith is of legal drinking age".