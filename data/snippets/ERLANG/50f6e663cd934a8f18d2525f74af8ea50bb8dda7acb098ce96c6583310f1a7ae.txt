-module(sort).
%% This module defines functions for sorting lists using different algorithms.

-export([bubble_sort/1,
        insertion_sort/1,
        quick_sort/1]).

%%% Public API %%%

%% bubble_sort(List) -> SortedList
%% Applies bubble sort algorithm to the given list.
%% Example:
%%   sort:bubble_sort([3, 1, 5, 2]) -> [1, 2, 3, 5].
-spec bubble_sort(List) -> SortedList when
    List :: [number()],
    SortedList :: [number()].
bubble_sort(List) ->
    bubble_sort(List, []).

%% insertion_sort(List) -> SortedList
%% Applies insertion sort algorithm to the given list.
%% Example:
%%   sort:insertion_sort([3, 1, 5, 2]) -> [1, 2, 3, 5].
-spec insertion_sort(List) -> SortedList when
    List :: [number()],
    SortedList :: [number()].
insertion_sort(List) ->
    insertion_sort(List, []).

%% quick_sort(List) -> SortedList
%% Applies quick sort algorithm to the given list.
%% Example:
%%   sort:quick_sort([3, 1, 5, 2]) -> [1, 2, 3, 5].
-spec quick_sort(List) -> SortedList when
    List :: [number()],
    SortedList :: [number()].
quick_sort(List) ->
    quick_sort(List, []).

%%% Private functions %%%

%% bubble_sort(Unsorted, Acc) -> SortedList
%% Helper function for bubble_sort/1. Applies bubble sort algorithm to the given list.
-spec bubble_sort(Unsorted, Acc) -> SortedList when
    Unsorted :: [number()],
    Acc :: [number()],
    SortedList :: [number()].
bubble_sort([], Acc) -> lists:reverse(Acc);
bubble_sort([X | Xs], Acc) ->
    case bubble_sort_pass([X | Xs], []) of
        {SortedXs, true} -> lists:reverse([X | Acc] ++ SortedXs);
        {SortedXs, false} -> bubble_sort(SortedXs, [X | Acc])
    end.

%% bubble_sort_pass(Unsorted, Acc) -> {SortedList, Sorted}
%% Helper function for bubble_sort/2. Performs a single pass of bubble sort on the given list.
-spec bubble_sort_pass(Unsorted, Acc) -> {SortedList, Sorted} when
    Unsorted :: [number()],
    Acc :: [number()],
    SortedList :: [number()],
    Sorted :: boolean().
bubble_sort_pass([X], Acc) -> {X, true};
bubble_sort_pass([A, B | Xs], Acc) when A =< B ->
    bubble_sort_pass([B | Xs], [A | Acc]);
bubble_sort_pass([A, B | Xs], Acc) when A > B ->
    {lists:reverse([A | Acc] ++ [B | Xs]), false}.

%% insertion_sort(Unsorted, Acc) -> SortedList
%% Helper function for insertion_sort/1. Applies insertion sort algorithm to the given list.
-spec insertion_sort(Unsorted, Acc) -> SortedList when
    Unsorted :: [number()],
    Acc :: [number()],
    SortedList :: [number()].
insertion_sort([], Acc) -> lists:reverse(Acc);
insertion_sort([X | Xs], Acc) ->
    case lists:splitwith(fun (E) -> X > E end, Acc) of
        {Smaller, Greater} -> insertion_sort(Xs, Smaller ++ [X] ++ Greater)
    end.

%% quick_sort(Unsorted, Acc) -> SortedList
%% Helper function for quick_sort/1. Applies quick sort algorithm to the given list.
-spec quick_sort(Unsorted, Acc) -> SortedList when
    Unsorted :: [number()],
    Acc :: [number()],
    SortedList :: [number()].
quick_sort([], Acc) -> lists:reverse(Acc);
quick_sort([Pivot | Xs], Acc) ->
    {Smaller, Larger} = partition(Pivot, Xs, [], []),
    quick_sort(Smaller, [Pivot] ++ quick_sort(Larger, Acc)).

%% partition(Pivot, [A | Xs], Smaller, Larger) -> {Smaller, Larger}
%% Helper function for quick_sort/2. Partitions the given list into two lists, one with elements smaller than
%% the pivot and one with elements larger than the pivot.
-spec partition(Pivot, List, Smaller, Larger) -> {Smaller, Larger} when
    Pivot :: number(),
    List :: [number()],
    Smaller :: [number()],
    Larger :: [number()].
partition(_Pivot, [], Smaller, Larger) -> {Smaller, Larger};
partition(Pivot, [A | Xs], Smaller, Larger) when A < Pivot ->
    partition(Pivot, Xs, [A | Smaller], Larger);
partition(Pivot, [A | Xs], Smaller, Larger) when A >= Pivot ->
    partition(Pivot, Xs, Smaller, [A | Larger]).