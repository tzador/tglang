%% This module contains functions for manipulating lists

-module(list_utils).

%% This function takes in a list and returns the number of elements in the list
%% @param List: list to be checked
%% @return length: integer representing the number of elements in the list
length(List) ->
    length(List, 0).

%% Helper function that recursively counts the number of elements in the list
%% @param List: list to be checked
%% @param Acc: accumulator to keep track of the number of elements
%% @return length: integer representing the number of elements in the list
length([], Acc) ->
    Acc;
length([_|Tail], Acc) ->
    length(Tail, Acc + 1).

%% This function takes in two lists and returns a new list containing the elements of both lists in order
%% @param List1: first list
%% @param List2: second list
%% @return ConcatenatedList: concatenated list containing elements from both lists
concat(List1, List2) ->
    append(List1, List2, []).

%% Helper function that recursively appends the elements of the second list to the first list
%% @param List1: first list
%% @param List2: second list
%% @param Acc: accumulator to store the elements of the second list added to the first list
%% @return ConcatenatedList: concatenated list containing elements from both lists
append([], List2, Acc) ->
    Acc ++ List2;
append([Head|Tail], List2, Acc) ->
    append(Tail, List2, Acc ++ [Head]).