%% A module for performing mathematical operations on complex numbers
-module(complex_math).
-export([add/2, subtract/2, multiply/2, divide/2]).

%% Defines the complex number data structure
-type complex() :: {real, imag :: float()}.

%% Function for adding two complex numbers
%% In: {real1, imag1}, {real2, imag2}
%% Out: {real1 + real2, imag1 + imag2}
-spec add(complex(), complex()) -> complex().
add({R1, I1}, {R2, I2}) ->
    {R1+R2, I1+I2}.

%% Function for subtracting one complex number from another
%% In: {real1, imag1}, {real2, imag2}
%% Out: {real1 - real2, imag1 - imag2}
-spec subtract(complex(), complex()) -> complex().
subtract({R1, I1}, {R2, I2}) ->
    {R1-R2, I1-I2}.

%% Function for multiplying two complex numbers
%% In: {real1, imag1}, {real2, imag2}
%% Out: {real1 * real2 - imag1 * imag2, real1 * imag2 + imag1 * real2}
-spec multiply(complex(), complex()) -> complex().
multiply({R1, I1}, {R2, I2}) ->
    {(R1*R2)-(I1*I2), (R1*I2)+(I1*R2)}.

%% Function for dividing one complex number by another
%% In: {real1, imag1}, {real2, imag2}
%% Out: {(real1 * real2 + imag1 * imag2) / (real2 * real2 + imag2 * imag2),
%%        (imag1 * real2 - real1 * imag2) / (real2 * real2 + imag2 * imag2)}
-spec divide(complex(), complex()) -> complex().
divide({R1, I1}, {R2, I2}) ->
    {(R1*R2+I1*I2)/((R2*R2)+(I2*I2)),(I1*R2-R1*I2)/((R2*R2)+(I2*I2))}.