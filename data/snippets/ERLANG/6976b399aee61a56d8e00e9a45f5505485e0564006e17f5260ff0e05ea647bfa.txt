-module(my_module).
-export([start/0]).

% This is a function that outputs a list of numbers in a given range
range(Start, End) -> range_helper([], Start, End).
range_helper(L, Start, End) when Start =< End ->
    range_helper([Start|L], Start+1, End);
range_helper(L, _, _) ->
    lists:reverse(L).

% This is a function that finds the minimum value in a list of numbers
find_min(List) -> {List, [L || L <- List, L =< hd(List)]}.

% This is a function that calculates the factorial of a given number
factorial(Num) -> factorial_helper(Num, 1).
factorial_helper(0, Acc) -> Acc;
factorial_helper(Num, Acc) when Num > 0
  -> factorial_helper(Num-1, Num*Acc).

% This is a function that creates a random password of a given length
create_password(Length) ->
    PasswordChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
    lists:map(fun(_) -> lists:nth(random:uniform(62), PasswordChars) end, lists:seq(1,Length)). 

% This is the main function to start the program
start() ->
    Range = range(1,10),
    Min = find_min(Range),
    Fac = factorial(5),
    Password = create_password(10),
    io:format("Range: ~p~n", [Range]),
    io:format("Minimum value: ~p~n", [Min]),
    io:format("Factorial of 5: ~p~n", [Fac]),
    io:format("Generated password: ~p~n", [Password]).