-module(maths). %% creates a module named maths

-export([factorial/1, fibonacci/1]). %% specifies exported functions

%% Function to calculate the factorial of a given number
%% @param N the number to calculate the factorial of
%% @return the factorial of N
factorial(N) -> 
    if N =< 1 -> 1; %% checks if N is less than or equal to 1
       true -> N * factorial(N-1) %% if not, calculate factorial using recursion
    end.

%% Function to generate the fibonacci sequence up to a given number
%% @param N the number to generate the sequence up to
%% @return a list containing the fibonacci sequence up to N
fibonacci(N) -> 
    if N <- 1 -> [0]; %% checks if N is less than or equal to 1
       N == 1 -> [0, 1]; %% if N is 1, return [0, 1] as the first two sequence numbers
       true -> [0, 1 | generate_fibonacci(N-2)] %% if not, recursively generate the sequence
    end.

%% Helper function for fibonacci/1 to generate the sequence
%% @param N the remaining number of sequence numbers to generate
%% @return a list containing the generated numbers
generate_fibonacci(N) -> 
    if N == 0 -> []; %% checks if there are no more numbers to generate
       true -> [lists:last(fibonacci(N-1)) + lists:last(fibonacci(N-2)) | generate_fibonacci(N-1)] %% generate next number and recursively call to generate the rest
    end.