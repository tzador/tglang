%% A simple function that calculates the sum of a list of numbers
sum([]) -> % if the list is empty, return 0
    0;
sum([H|T]) -> % if the list has at least one element, add it to the sum of the rest of the list
    H + sum(T).

%% A helper function that finds the maximum element in a list
max_helper([], Max) -> % if the list is empty, return the current maximum element
    Max;
max_helper([H|T], Max) when H > Max -> % if the current element is greater than the current maximum, update the maximum element
    max_helper(T, H);
max_helper([H|T], Max) -> % otherwise, keep the same maximum element
    max_helper(T, Max).

%% A function that finds the maximum element in a list
%% Returns 0 if the list is empty
max(List) ->
    max_helper(List, 0).

%% A function that checks if a given number is prime
%% Assumes that the given number is positive
is_prime(N) ->
    is_prime_helper(N, 2). % start checking from 2 (the smallest prime number)

%% A helper function that checks if a given number is prime
is_prime_helper(N, X) when X =:= N -> % if we have reached the given number, it is prime
    true;
is_prime_helper(N, X) when N rem X =:= 0 -> % if the number is divisible by X, it is not prime
    false;
is_prime_helper(N, X) -> % otherwise, continue checking with the next number
    is_prime_helper(N, X+1).