-module(data_structures). %% Creating a module in ERLANG

-export([init/0, add/2, remove/1, contains/1]). %% Exporting functions to be used by other modules

init() -> %% Function to initialize a data structure, in this case, a map
    Map = maps:new(), %% Creating an empty map
    MapWithValues = maps:put(1, "FirstValue", %% Adding key-value pairs to the map
                     maps:put(2, "SecondValue", 
                     maps:put(3, "ThirdValue", 
                     maps:put(4, "FourthValue", 
                     maps:put(5, "FifthValue", 
                     maps:put(6, "SixthValue", 
                     Map)))))), 
    {ok, MapWithValues}. %% Returning an 'ok' tuple with the initialized map

add(Key, Value) -> %% Function to add a key-value pair to the map
    CurrentMap = init(), %% Initializing the map
    NewMap = maps:put(Key, Value, CurrentMap), %% Adding the new key-value pair
    {ok, NewMap}. %% Returning an 'ok' tuple with the updated map

remove(Key) -> %% Function to remove a key-value pair from the map
    CurrentMap = init(), %% Initializing the map
    NewMap = maps:remove(Key, CurrentMap), %% Removing the specified key-value pair
    {ok, NewMap}. %% Returning an 'ok' tuple with the updated map

contains(Key) -> %% Function to check if the map contains a specific key
    CurrentMap = init(), %% Initializing the map
    case maps:is_key(Key, CurrentMap) of %% Using a case statement to check if the key exists in the map
        true -> {ok, "The map contains the specified key"}; %% Returning an 'ok' tuple if the key exists
        false -> {error, "The map does not contain the specified key"} %% Returning an 'error' tuple if the key does not exist
    end.