-module(list_utilities).

-export([get_sublist/3, remove_duplicates/1]).

%% This function takes in a list, a start index, and an end index as parameters
%% and returns a sublist of the given list, starting from the start index
%% and ending at the end index.

%% Function: get_sublist(List, StartIndex, EndIndex)
%% Input: List: a list
%%        StartIndex: an integer
%%        EndIndex: an integer
%% Output: A sublist of the given list

get_sublist(List, StartIndex, EndIndex) ->
    case (lists:reverse(List)) of
        [] ->
            [];
        [H|_] ->
            [H]
    end,

    NewList = lists:reverse(List),
    case (length(NewList) =< EndIndex) of
        true ->
            OutputList = lists:sublist(NewList, StartIndex, EndIndex);
        false ->
            case (StartIndex =< EndIndex) of
                true ->
                    OutputList = lists:sublist(NewList, StartIndex, length(NewList));
                false ->
                    OutputList = []
            end
    end,
    OutputList.

%% This function takes in a list as a parameter and removes any duplicate elements
%% from the given list.

%% Function: remove_duplicates(List)
%% Input: List: a list with any type of elements
%% Output: A list with all duplicate elements removed

remove_duplicates(List) ->
    UniqueList = lists:usort(List),
    ReverseList = lists:reverse(UniqueList),
    ReverseUniqueList = lists:reverse(UniqueList, []),
    case (ReverseList =:= ReverseUniqueList) of
        true ->
            ReverseList;
        false ->
            case (length(ReverseList) =< 1) of
                true ->
                    ReverseList;
                false ->
                    [H|T] = ReverseList,
                    [H|remove_duplicates(T)]
            end
    end.