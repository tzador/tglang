-module(example).
-export([fib/1, sum/1]).

%% Function for calculating the nth number in the Fibonacci sequence
%% Uses pattern matching and recursion for efficiency
fib(0) -> 0; %% Base case
fib(1) -> 1; %% Base case
fib(N) when is_integer(N) and N > 0 -> fib(N-1) + fib(N-2). %% Recursive case, add previous two numbers

%% Function for calculating the sum of a list of numbers
%% Uses pattern matching and tail recursion for efficiency
sum(List) -> sum(List, 0). %% Call helper function with initial sum of 0

%% Helper function for calculating the sum of a list of numbers
%% Uses pattern matching and tail recursion for efficiency
sum([], Acc) -> Acc; %% Base case, return accumulated sum
sum([H|T], Acc) -> sum(T, H+Acc). %% Recursive case, add head of list to accumulated sum and continue with tail of list