-module(example). %This is a module declaration
-export([factorial/1]). %This is a function export declaration

%% A tail-recursive factorial function
factorial(N) ->
    factorial(N, 1). %Function call with initial value of accumulator set to 1

%% Helper function with accumulator parameter
%% The accumulator keeps track of the current product
factorial(0, Acc) ->
    Acc;
factorial(N, Acc) when N > 0 ->
    factorial(N - 1, N * Acc). %Recursive call with updated accumulator value

%% A function for calculating the nth Fibonacci number
fibonacci(N) ->
    fibonacci(N, 0, 1). %Function call with initial values of accumulator set to 0 and 1

%% Helper function with accumulator parameters
%% The accumulator keeps track of the previous two Fibonacci numbers
fibonacci(0, A, _) ->
    A;
fibonacci(1, _, B) ->
    B;
fibonacci(N, A, B) when N > 1 ->
    fibonacci(N - 1, B, A + B). %Recursive call with updated accumulator values