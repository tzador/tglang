-module(my_module). % This line defines the module name

-export([my_function/2, my_function/1]). % This line exports the functions to be called externally

-import(mymodule, [my_other_function/1]). % This line imports a function from another module

-record(my_structure, { % This line defines a record with three fields
    field1 = 0, % Default value for field1 is 0
    field2 = <<>>,  % Default value for field2 is an empty binary
    field3 = undefined % Default value for field3 is undefined
}).

%% my_function/2 - This function takes in two parameters and returns the sum of the two
-spec my_function(number(), number()) -> number(). % Type specification for the function

my_function(X, Y) -> X + Y. % Function definition

%% my_function/1 - This function takes in a list and returns the length of the list
-spec my_function(list()) -> number(). % Type specification for the function

my_function(List) -> length(List). % Function definition

%% my_other_function/1 - This function takes in a string and prints it to the console
-spec my_other_function(string()) -> ok. % Type specification for the function

my_other_function(Str) -> io:format("The string is: ~s~n", [Str]). % Function definition

init() -> % This function is called when the module is loaded
    Struct = #my_structure{field1 = 1, field2 = <<"Hello">>}, % Creating an instance of the record
    NewStruct = Struct#my_structure{field3 = my_function(field1, field1)}, % Updating the value of a field
    {ok, NewStruct}. % Return value of the function