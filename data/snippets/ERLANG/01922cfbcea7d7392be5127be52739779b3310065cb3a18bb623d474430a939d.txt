%% This module provides functions for creating and manipulating sets.

-module(set).

%% Export all functions.
-export([create/0, add/2, member/2, intersect/2, union/2, difference/2]).

%% Internal representation of a set as a list.
-define(S_EMPTY, []).

%% Returns an empty set.
create() -> ?S_EMPTY.

%% Adds an element to a set.
add(Elem, Set) ->
    [Elem | Set].


%% Checks if an element is a member of a set.
member(Elem, Set = [H | T]) ->
    % found the element
    if Elem == H ->
        true;
    % not found, check the rest of the set
    true ->
        member(Elem, T)
    end;
% reached the end of the set without finding the element
member(_, _) ->
    false.


%% Returns the intersection of two sets.
intersect(Set1, Set2) ->
    [Elem || Elem <- Set1, member(Elem, Set2)].


%% Returns the union of two sets.
union(Set1, Set2) ->
    [Elem | Set2] ++ Set1.


%% Returns the difference of two sets.
difference(Set1, Set2) ->
    [Elem || Elem <- Set1, not member(Elem, Set2)].