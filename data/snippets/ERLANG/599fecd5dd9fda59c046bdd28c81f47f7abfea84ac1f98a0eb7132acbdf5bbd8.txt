-module(euler).
-import(lists, [map/2, foldl/3]).
-export([sum_divisors/1, is_prime/1, euler_phi/1]).

% Finds the sum of all divisors of a given number
sum_divisors(N) ->
    case N == 1 of
        true -> 1;
        _ ->
            % Create a list of numbers from 1 to N/2
            Divisors = lists:map(fun(N) -> N - 1 end, lists:seq(2, N div 2)),
            % Filter out numbers that are not divisors
            DivisorsFiltered = lists:filter(fun(X) -> N rem X == 0 end, Divisors),
            % Sum all remaining divisors
            lists:foldl(fun(A, B) -> A + B end, 1, DivisorsFiltered)
    end.

% Checks if a given number is prime
is_prime(N) when N > 1 ->
    % Create a list of numbers from 2 to the square root of N
    Divisors = lists:seq(2, trunc(math:sqrt(N))),
    % Check if N is divisible by any of the numbers in the list
    not lists:any(fun(X) -> N rem X == 0 end, Divisors);
is_prime(_) -> false.

% Calculates the Euler's totient function for a given number
euler_phi(N) when N > 0 ->
    % Create a list of numbers from 1 to N
    nums = lists:seq(1, N),
    lists:foldl(fun(A, B) -> if is_prime(A) -> B + 1; true -> B end end, 0, nums).