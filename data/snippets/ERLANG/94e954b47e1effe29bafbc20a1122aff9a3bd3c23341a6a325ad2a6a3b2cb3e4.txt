%% This module defines functions for creating and manipulating binary trees.
-module(bintree).

%% Exported functions.
-export([insert/2, delete/2, search/2, print/1]).

%% tree(Vertex, LeftSubtree, RightSubtree)  |  Leaf value
%%
%% Defines the tree data structure as a tuple of a value, left subtree, and right subtree.
%% If a node is a leaf, it is represented as just the value.
%%
%% Examples:
%% tree(5, tree(3, tree(1), tree(4)), tree(8, tree(6), tree(9)))  |  tree with root node of 5, left subtree with 3 as root, and right subtree with 8 as root.
%% tree(2)  |  leaf node with value 2.

%% insert(Tree, Value) -> NewTree
%%
%% Inserts a new value into the given tree.
%% If the tree is a leaf, the new value replaces the existing value.
%% If the value already exists in the tree, it is not inserted again.
%%
%% Examples:
%% insert(tree(5, tree(3, tree(1), tree(4)), tree(8, tree(6), tree(9))), 2)  |  New tree with value 2 inserted as left child of root node.
%% insert(tree(10), 10)  |  tree remains unchanged.
insert(tree(Value), Value) ->
    tree(Value);
insert(tree(Vertex, LeftSubtree, RightSubtree), Value) when Value =< Vertex ->
    tree(Vertex, insert(LeftSubtree, Value), RightSubtree);
insert(tree(Vertex, LeftSubtree, RightSubtree), Value) ->
    tree(Vertex, LeftSubtree, insert(RightSubtree, Value)).

%% delete(Tree, Value) -> NewTree
%%
%% Deletes the given value from the tree, if it exists.
%% If the value does not exist, the tree remains unchanged.
%% If the deleted node has children, the leftmost child in the right subtree will replace it.
%%
%% Examples:
%% delete(tree(5, tree(3, tree(1), tree(4)), tree(8, tree(6), tree(9))), 8)  |  New tree with value 8 removed and replaced by 9.
%% delete(tree(10), 2)  |  tree remains unchanged.
delete(tree(Value), Value) ->
	tree(Leaf);
delete(tree(Value), Value) ->
	tree(Value);
delete(tree(Vertex, LeftSubtree, RightSubtree), Value) when Value =< Vertex ->
	tree(Vertex, delete(LeftSubtree, Value), RightSubtree);
delete(tree(Vertex, LeftSubtree, RightSubtree), Value) ->
	tree(Vertex, LeftSubtree, delete(RightSubtree, Value)).

%% search(Tree, Value) -> Found?
%%
%% Searches for the given value in the tree.
%% Returns true if the value is found, false otherwise.
%%
%% Examples:
%% search(tree(5, tree(3, tree(1), tree(4)), tree(8, tree(6), tree(9))), 8)  |  Returns true.
%% search(tree(10), 2)  |  Returns false.
search(tree(Value), Value) ->
	true;
search(tree(Vertex, LeftSubtree, RightSubtree), Value) when Value < Vertex ->
	search(LeftSubtree, Value);
search(tree(Vertex, LeftSubtree, RightSubtree), Value) ->
	search(RightSubtree, Value).

%% print(Tree)
%%
%% Prints the values of the tree in preorder traversal.
%%
%% Examples:
%% print(tree(5, tree(3, tree(1), tree(4)), tree(8, tree(6), tree(9))))  |  Prints "5, 3, 1, 4, 8, 6, 9".
%% print(tree(2))  |  Prints "2".
print(tree(Value)) ->
	io:format("~w, ", [Value]);
print(Value) ->
	io:format("~w", [Value]).