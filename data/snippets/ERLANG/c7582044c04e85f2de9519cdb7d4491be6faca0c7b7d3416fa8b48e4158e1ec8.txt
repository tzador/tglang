-module(my_module). % Creates a module named "my_module"

-export([function1/1]). % Exports function1 with an arity of 1

-record(tuple, { % Creates a record named "tuple" with fields "field1", "field2", and "field3"
    field1,
    field2,
    field3
}).

start(N) -> % Defines a function named "start" with an arity of 1
    Result = do_something(N), % Assigns the result of do_something function to the variable "Result"
    spawn(fun() -> worker(Result) end). % Spawns a new process that executes the worker function with the "Result" variable as its argument

do_something(N) -> % Defines a function named "do_something" with an arity of 1
    case N of % Pattern match on the variable "N"
        0 -> []; % If N is 0, return an empty list
        _ -> [{N, N * 2} | do_something(N-1)] % Otherwise, recursively call do_something with N-1 and append a tuple containing N and N*2 to the list
    end.

worker(Result) -> % Defines a function named "worker" with an arity of 1
    receive % Receives a message from the process that spawned it
        {tuple, Field1, Field2, Field3} -> % Pattern match on the tuple that was received
            % Do something with the fields of the tuple
        _ -> % If the message does not match the pattern above, do nothing
    end.

function1(Param) -> % Defines a function named "function1" with an arity of 1
    % Some code that uses the "tuple" record and calls the start function with a parameter
    start(Param).