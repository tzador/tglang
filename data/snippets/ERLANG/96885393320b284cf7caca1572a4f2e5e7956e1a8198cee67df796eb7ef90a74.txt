-module(stack).

%% Defines the start function for our program, takes in an empty list as input
start() ->
    main([]).

%% Main function that recursively calls itself
main(Stack) ->
    io:format("Enter command (push, pop or quit): "),
    Input = io:fread("", "~s"),
    case string:sub_string(Input, 2, length(Input) - 2) of
        "push" ->
            %% Takes input from user and splits into two separate strings
            io:format("Enter value to push onto stack: "),
            [Value, _] = io:fread("", "~s"),
            %% Appends the value to the stack list
            NewStack = [Value | Stack],
            %% Calls main function again with updated stack
            main(NewStack);
        "pop" ->
            %% Checks if stack is empty
            case is_empty(Stack) of
                true -> 
                    io:format("Stack is empty.~n"),
                    %% Calls main function again with same unmodified stack
                    main(Stack);
                false ->
                    %% Removes the top value from the stack and prints it
                    [Top | Rest] = Stack,
                    io:format("Popped value: ~s~n", [Top]),
                    %% Calls main function again with updated stack
                    main(Rest)
            end;
        "quit" ->
            io:format("Exiting program.~n");
        _ ->
            %% If user enters an invalid command, calls main function again
            io:format("Invalid command.~n"),
            main(Stack)
    end.

%% Function to check if stack is empty by checking if list is empty
is_empty([]) ->
    true;
is_empty(_Stack) ->
    false.