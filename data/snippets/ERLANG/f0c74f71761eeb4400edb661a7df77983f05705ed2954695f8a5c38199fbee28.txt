% This is a module that implements a binary search algorithm in Erlang.

-module(binary_search).
-export([binarySearch/2]).

%% % Function that performs a binary search on a list of sorted integers
%% % Parameters:
%% % Element - the element to search for
%% % List - the sorted list to search in
%% % Returns:
%% % {ok, Index} - if the element is found in the list at the given index
%% % not_found - if the element is not found in the list
binarySearch(Element, List) ->
    %% % Helper function with extra parameters
    binarySearchHelper(Element, List, 1, length(List)).

%% % Helper function for the binary search algorithm
%% % Parameters:
%% % Element - the element to search for
%% % List - the sorted list to search in
%% % Start - the starting index of the sublist to search in
%% % End - the ending index of the sublist to search in
%% % Returns:
%% % {ok, Index} - if the element is found in the sublist at the given index
%% % not_found - if the element is not found in the sublist
binarySearchHelper(Element, List, Start, End) ->
    if Start =< End ->
        %% % Calculate the middle index of the sublist
        Middle = (Start + End) div 2,
        %% % Check if the middle element is equal to the element being searched for
        case Element =:= lists:nth(Middle, List) of
            true  -> {ok, Middle};
            false ->
                %% % Check if the middle element is greater than the element being searched for
                case Element < lists:nth(Middle, List) of
                    true  -> %% % Call helper function on first half of sublist
                              binarySearchHelper(Element, List, Start, Middle - 1);
                    false -> %% % Call helper function on second half of sublist
                              binarySearchHelper(Element, List, Middle + 1, End)
                end
        end;
    true ->
        %% % If start exceeds end, the element is not found in the sublist
        not_found
    end.