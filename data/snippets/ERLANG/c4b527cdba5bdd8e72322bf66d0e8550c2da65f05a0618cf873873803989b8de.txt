%%----------------------------------------
%% Module: conversation
%%----------------------------------------
-module(conversation). 
-export([start_conversation/2]). 
%% Function to start a conversation between two people 
%% @param Person1 The first person in the conversation 
%% @param Person2 The second person in the conversation 
%% @return The conversation between the two people 
start_conversation(Person1, Person2) -> 
    say("Hello, " ++ Person2 ++ "! My name is " ++ Person1 ++ ".", Person1), 
    say("Hi, " ++ Person1 ++ "! My name is " ++ Person2 ++ ".", Person2), 
    talk(Person1, Person2, ["How are you?", "I'm doing well, thanks for asking."]), 
    talk(Person2, Person1, ["That's good to hear.", "Anything new and exciting going on?"]), 
    talk(Person1, Person2, ["Actually, yes! I just got a promotion at work.", "Wow, congratulations!"]), 
    talk(Person2, Person1, ["That's amazing! We should celebrate.", "I couldn't agree more."]), 
    say("Well, it was nice talking to you, " ++ Person2 ++ ". Have a great day!", Person1), 
    say("You too, " ++ Person1 ++ ". Let's catch up again soon!", Person2). 
%% Function for one person to say something to the other person 
%% @param Message The message to be said 
%% @Param Sender The person saying the message 
say(Message, Sender) -> io:format(Sender ++ " says: " ++ Message ++ "~n"). 
%% Function for one person to talk to the other person with multiple possible responses 
%% @param Sender The person talking 
%% @param Receiver The person being talked to 
%% @param Responses The list of possible responses from the receiver 
talk(Sender, Receiver, Responses) -> 
    io:format(Sender ++ ": " ++ hd(Responses) ++ "~n"), 
    {ok, Response} = io:fread(">> "), 
    case lists:member(Response, Responses) of 
        true -> 
            say(Response, Receiver), 
            [Response | tl(Responses)]; 
        false -> 
            say("I'm sorry, I didn't understand that. Let's try again.", Receiver), 
            talk(Sender, Receiver, Responses) 
    end.