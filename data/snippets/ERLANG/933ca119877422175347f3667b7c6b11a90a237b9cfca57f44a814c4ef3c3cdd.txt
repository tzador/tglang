%% An Erlang module for generating a list of prime numbers using the Sieve of Eratosthenes algorithm
-module(prime_sieve).
-export([generate/1]).

%% Function to generate a list of prime numbers up to a given limit
%% Input: Integer representing the limit
%% Output: List of prime numbers up to the limit
generate(Limit) ->
    %% Create a list of consecutive integers from 2 to the given limit
    Numbers = lists:seq(2, Limit),

    %% Initialize a 'sieve' list with all elements set to true
    Sieve = [true || _ <- Numbers],

    %% Remove multiples of each prime number starting from 2
    remove_multiples(2, Numbers, Sieve).

%% Function to remove multiples of a given prime number from the list
%% Input: Integer representing the prime number, list of numbers, and sieve list
%% Output: Sieve list with multiples of the prime number set to false
remove_multiples(_, [], Sieve) ->
    %% If the list is empty, return the sieve list
    Sieve;
remove_multiples(Prime, [H|T], Sieve) ->
    %% If the current number is a multiple of the prime number, set its corresponding index in sieve to false
    %% and call the function recursively on the remaining numbers
    if
        H rem Prime == 0 -> remove_multiples(Prime, T, lists:update(element_number(H, T), false, Sieve));
        true -> remove_multiples(Prime, T, Sieve)
    end.

%% Function to find the index number of an element in a list
%% Input: Element and list in which to search for the element
%% Output: Index number of the element
element_number(Elem, [H|_]) when H == Elem ->
    %% If the first element is the desired element, return 1 as the index number
    1;
element_number(Elem, [_|T]) ->
    %% If the first element is not the desired element, the index number is 1 + the element number in the remaining list
    1 + element_number(Elem, T).