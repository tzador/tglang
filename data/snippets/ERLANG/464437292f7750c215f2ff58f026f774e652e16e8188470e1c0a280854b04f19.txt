-module(my_module).

-export([sum/1, factorial/1, insert_sort/1, merge/2]).

%% Function to calculate the sum of a list of integers
%% Params:
%%   List: A list of integers
%% Returns:
%%   Sum: The sum of all the integers in the list
sum(List) ->
  case List of % Start a case statement for pattern matching
    [] -> % If list is empty
      0;  % Return 0
    [Head|Tail] -> % If list is not empty, get the head and tail
      Head + sum(Tail) % Add the head to the sum of the tail
  end.

%% Function to calculate the factorial of a number
%% Params:
%%   Num: An integer
%% Returns:
%%   Factorial: The factorial of the input number
factorial(Num) ->
  case Num of
    0 -> % If input number is 0
      1; % Return 1
    _ -> % In all other cases
      Num * factorial(Num - 1) % Multiply number by factorial of (number-1)
  end.

%% Function to perform insertion sort on a list
%% Params:
%%   List: A list of integers
%% Returns:
%%   Sorted: The sorted list in ascending order
insert_sort(List) ->
  insert_sort(List, []). % Call helper function with accumulator

%% Helper function for insertion sort
%% Params:
%%   Unsorted: Unsorted list
%%   Sorted: Accumulator for the sorted list
%% Returns:
%%   Sorted: The sorted list in ascending order
insert_sort([], Sorted) ->
  Sorted; % If unsorted list is empty, return accumulator
insert_sort([Head|Tail], Sorted) ->
  insert_sort(Tail, insert(Head, Sorted)). % Recursively call insert_sort with tail of unsorted list and the result of inserting head into sorted list

%% Function to insert element into a sorted list in ascending order
%% Params:
%%   Elem: Element to be inserted
%%   List: Sorted list
%% Returns:
%%   Inserted: The sorted list after inserting the element in the correct position
insert(Elem, []) ->
  [Elem]; % If list is empty, return list with element as the only element
insert(Elem, [Head|Tail]) ->
  case Elem < Head of % Compare element with head for sorting
    true -> % If element is less than head
      [Elem|Head|Tail]; % Insert element as new head
    false -> % If element is not less than head
      [Head|insert(Elem, Tail)] % Insert element into tail recursively
  end.

%% Function to merge two sorted lists into one sorted list
%% Params:
%%   List1: Sorted list 1
%%   List2: Sorted list 2
%% Returns:
%%   Merged: The merged sorted list
merge([], List2) ->
  List2; % If list 1 is empty, return list 2
merge(List1, []) ->
  List1; % If list 2 is empty, return list 1
merge([Head1|Tail1], [Head2|Tail2]) ->
  case Head1 < Head2 of % Compare heads of both lists for sorting
    true -> % If head of list 1 is less than head of list 2
      [Head1|merge(Tail1, [Head2|Tail2])]; % Append head of list 1 to merged list
    false -> % If head of list 1 is not less than head of list 2
      [Head2|merge(Tail2, [Head1|Tail1])] % Append head of list 2 to merged list
  end.