%% This module defines a tree data structure and various functions to manipulate it
-module(tree).

%% Public API functions
-export([create/0, insert/2, search/2, preorder_traverse/1, postorder_traverse/1, inorder_traverse/1]).

%% Record that will be used to represent tree nodes
-record(node, {value, left, right}).

%% Function to create an empty tree
create() ->
  nil.

%% Function to insert a value into the tree
%% Returns a new tree with the value inserted
insert(Value, nil) ->
  #node{value = Value, left = nil, right = nil};
insert(Value, #node{value = NodeValue, left = Left, right = Right}) when Value < NodeValue ->
  #node{value = NodeValue, left = insert(Value, Left), right = Right};
insert(Value, #node{value = NodeValue, left = Left, right = Right}) ->
  #node{value = NodeValue, left = Left, right = insert(Value, Right)}.

%% Function to search for a value in the tree
%% Returns true if value is found, false otherwise
search(Value, nil) ->
  false;
search(Value, #node{value = NodeValue, left = Left, right = Right}) when Value == NodeValue ->
  true;
search(Value, #node{value = NodeValue, left = Left, right = Right}) when Value < NodeValue ->
  search(Value, Left);
search(Value, #node{value = NodeValue, left = Left, right = Right}) ->
  search(Value, Right).

%% Function to perform a preorder traversal of the tree
preorder_traverse(nil) ->
  [];
preorder_traverse(#node{value = NodeValue, left = Left, right = Right}) ->
  [NodeValue | preorder_traverse(Left) | preorder_traverse(Right)].

%% Function to perform a postorder traversal of the tree
postorder_traverse(nil) ->
  [];
postorder_traverse(#node{value = NodeValue, left = Left, right = Right}) ->
  [postorder_traverse(Left) | postorder_traverse(Right) | NodeValue].

%% Function to perform an inorder traversal of the tree
inorder_traverse(nil) ->
  [];
inorder_traverse(#node{value = NodeValue, left = Left, right = Right}) ->
  [inorder_traverse(Left) | NodeValue | inorder_traverse(Right)].