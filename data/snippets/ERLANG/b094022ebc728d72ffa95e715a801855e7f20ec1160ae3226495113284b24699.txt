%% Annotated ERLANG Code ###
-module(example).
-export([start/0]).

% Module attribute to define the API exported by the module
% The start function takes no arguments and returns no value
%% Use -spec and types to define the function signature
-spec start() -> ok | {error, term()}

% Function defining the start/0 function
start() ->
    %% Pattern matching to check for valid inputs and outputs
    %% Use the io:format/2 function to print messages to the console
    io:format("Welcome to the example module!~n"),
    ok.

%% An example of a recursive function
%% The function takes in a list of integers and sums them
%% Use guards to check for empty list and end the recursion
sum([]) -> 0;
sum([Head|Tail]) when is_integer(Head) -> Head + sum(Tail).

%% An example of a higher order function
%% Takes in a list of strings and applies a function to each element
%% The function takes in a string and returns its length
%% Use the lists:map/2 function to map the given function to each element of the list
get_lengths(List) ->
    %% Use a lambda function defined with the fun keyword
    %% The function takes in a string and returns its length
    F = fun(String) -> string:len(String) end,
    lists:map(F, List).