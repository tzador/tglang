-module(example). %%Defines the start of a module in ERLANG

-export([factorial/1, add_odd_nums/1]). %%Exports the functions `factorial` and `add_odd_nums`

-spec factorial(integer()) -> integer(). %%Specifies the type and arity of the function `factorial`
factorial(0) -> 1; %%Base case: when the input is 0, return 1
factorial(N) when N > 0 ->
    N * factorial(N-1). %%Recursive call to calculate factorial of N-1 until N=0

-spec add_odd_nums([integer()]) -> integer(). %%Specifies the type and arity of the function `add_odd_nums`
add_odd_nums([]) -> 0;
add_odd_nums([H|T]) when H rem 2 /= 0 ->
    H + add_odd_nums(T); %%If the head of list is odd, add it to the sum and recursively call the function with the tail
add_odd_nums([_|T]) ->
    add_odd_nums(T). %%If the head of list is even, skip it and recursively call the function with the tail