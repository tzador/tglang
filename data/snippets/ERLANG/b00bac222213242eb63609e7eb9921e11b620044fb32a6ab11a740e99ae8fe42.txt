% This is a function that takes in a list of integers and performs a series of operations on the list
% before returning a new list as output.

-module(my_list_functions).

-export([manipulate_list/1]).

% Function to manipulate the list
% Input: List of integers
% Output: New list of manipulated integers
manipulate_list(List) ->
    % Call helper function to sort the list
    Sorted = sort_list(List),
    % Call helper function to filter out even numbers
    Filtered = filter_list(Sorted),
    % Call helper function to multiply each number by 2
    Multiplied = multiply_list(Filtered),
    % Call helper function to square each number
    Squared = square_list(Multiplied),
    % Call helper function to remove duplicates
    Duplicates_removed = remove_duplicates(Squared),
    % Call helper function to reverse the list
    Reversed = reverse_list(Duplicates_removed),
    % Call helper function to append a 0 to the end of the list
    Appended = append_list(Reversed),
    % Call helper function to calculate the sum of the list
    Sum = calculate_sum(Appended),
    % Return the final manipulated list
    Sum.

% Helper function to sort the list in ascending order
sort_list(List) ->
    lists:sort(List).

% Helper function to filter out even numbers from the list
filter_list(List) ->
    lists:filter(fun(X) -> X rem 2 == 0 end, List).

% Helper function to multiply each number in the list by 2
multiply_list(List) ->
    lists:map(fun(X) -> X * 2 end, List).

% Helper function to square each number in the list
square_list(List) ->
    lists:map(fun(X) -> X * X end, List).

% Helper function to remove duplicates from the list
remove_duplicates(List) ->
    lists:usort(List).

% Helper function to reverse the order of the list
reverse_list(List) ->
    lists:reverse(List).

% Helper function to append a 0 to the end of the list
append_list(List) ->
    lists:append(List, [0]).

% Helper function to calculate the sum of the list
calculate_sum(List) ->
    lists:foldl(fun(X, Acc) -> X + Acc end, 0, List).