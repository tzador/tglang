%% This module performs a binary search on a sorted list
-module(binary_search).

%% Export the functions perform_search/2 and binary_search/3
-export([perform_search/2, binary_search/3]).

%% Define the main function binary_search/3
%% which takes start index, end index, and the list to be searched
binary_search(Start, End, List) ->
    %% Calculate the middle index
    Mid = (Start + End) div 2,
    
    %% Check if middle element is the target value
    if lists:nth(Mid, List) == Target ->
        %% Return the middle index
        Mid;
    lists:nth(Mid, List) < Target ->
        %% Call binary_search recursively on the right half of the list
        binary_search(Mid + 1, End, List);
    true ->
        %% Call binary_search recursively on the left half of the list
        binary_search(Start, Mid - 1, List)
    end.

%% Define the helper function perform_search/2
%% which takes the target value and the list to be searched
perform_search(Target, List) ->
    %% Call binary_search with the start index as 1, end index as the length of the list, and the list itself
    binary_search(1, length(List), List).

%% Test case 1 - search for 10 in [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
%% Expected output - 5 (index of 10)
-define(LIST, [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]).
-define(TARGET, 10).

binary_search_test_1() ->
    ?assertEqual(5, perform_search(?TARGET, ?LIST)).

%% Test case 2 - search for 1 in [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
%% Expected output - "NotFound" (index of 1)
-define(LIST, [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]).
-define(TARGET, 1).

binary_search_test_2() ->
    ?assertEqual("NotFound", perform_search(?TARGET, ?LIST)).