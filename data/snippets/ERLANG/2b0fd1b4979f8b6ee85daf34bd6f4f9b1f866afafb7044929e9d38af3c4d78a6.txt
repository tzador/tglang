%% A module that implements a simple server that echoes messages back to the client
-module(echo_server).
-export([start/0, stop/1]).
 
%% Function to start the server
start() ->
    %% Register the server with a unique name
    {ok, Pid} = gen_server:start_link({local, ?MODULE}, ?MODULE, [], []),
    {ok, Pid}.
 
%% Function to stop the server, takes in the pid of the server to be stopped
stop(Pid) ->
    gen_server:call(Pid, stop).
 
%% Function to handle incoming messages and echo them back to the client
handle_call({echo, Msg}, _From, State) ->
    {reply, Msg, State};
handle_call(stop, _From, State) ->
    %% Shut down the server
    {stop, normal, ok, State}.
 
%% Function to handle incoming messages and update the server state
handle_cast(Msg, State) ->
    {noreply, Msg, State}.
 
%% Function to handle a server crash and restart it
%% In this case, we just print an error message and continue
handle_info(_Msg, State) ->
    error_logger:error_msg("Server crashed!~n"),
    {noreply, State}.
 
%% Function to return initial server state
%% In this case, we just return an empty list as the initial state
init([]) ->
    {ok, []}.