%% This module implements a basic binary search algorithm

-module(binary_search).
%% Export the search function
-export([search/2]).

%% Function to search for an element in a sorted list
%% Takes in the list and the element to search for as parameters
search(List, Element) ->
    %% Initialize the start and end indices
    Start = 1,
    End = length(List),
    %% Set the initial middle index
    Middle = (Start + End) div 2,
    %% Start the loop while the middle index is not equal to the element
    do_search(List, Element, Middle, Start, End).

%% Function to perform the search
do_search(List, Element, Middle, Start, End) ->
    %% Check if the middle index is equal to the element
    case lists:nth(Middle, List) of
        Element ->
            %% If the element is found, return its index
            {ok, Middle};
        _ ->
            %% If the element is not found, check if it is lower or higher than the middle index
            case lists:nth(Middle, List) < Element of
                true ->
                    %% If it is lower, adjust the start index and calculate a new middle index
                    Start1 = Middle + 1,
                    Middle1 = (Start1 + End) div 2,
                    %% Call the do_search function again with the updated indices
                    do_search(List, Element, Middle1, Start1, End);
                false ->
                    %% If it is higher, adjust the end index and calculate a new middle index
                    End1 = Middle - 1,
                    Middle1 = (Start + End1) div 2,
                    %% Call the do_search function again with the updated indices
                    do_search(List, Element, Middle1, Start, End1)
            end
    end.