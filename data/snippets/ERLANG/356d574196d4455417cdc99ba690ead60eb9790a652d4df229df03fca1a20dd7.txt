-module(tree).
-export([insert/2, lookup/2]).

% This module defines a tree data structure and two functions for inserting and looking up values in the tree.

-record(tree, {value, left, right}).

% The tree record defines the structure of each node in the tree, including its value and pointers to its left and right child nodes.

%% @doc Inserts a value into the tree.
%% @spec insert(tree(), any()) :: tree().

insert(nil, Value) ->
    #tree{value = Value, left = nil, right = nil};
insert(#tree{value = Value, left = Left, right = Right}, NewValue) when NewValue < Value ->
    #tree{value = Value, left = insert(Left, NewValue), right = Right};
insert(#tree{value = Value, left = Left, right = Right}, NewValue) ->
    #tree{value = Value, left = Left, right = insert(Right, NewValue)}.

% The insert function creates a new tree node with the given value and inserts it into the appropriate place in the tree, maintaining proper binary search tree (BST) order.

%% @doc Looks up a value in the tree.
%% @spec lookup(tree(), any()) :: boolean().

lookup(nil, _Value) ->
    false;
lookup(#tree{value = Value, left = Left, right = Right}, LookupValue) ->
    case LookupValue of
        Value -> true;
        _ ->
            case LookupValue < Value of
                true -> lookup(Left, LookupValue);
                false -> lookup(Right, LookupValue)
            end
    end.

% The lookup function recursively searches the tree for the given value and returns true if found, false otherwise.