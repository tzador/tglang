-module(example). % This is the name of our module

-export([factorial/1, fib/1]). % This is the list of functions we want to export

% Function to calculate the factorial of a given number
% Parameters:
%   N - the number to calculate the factorial
% Returns:
%   the factorial of N
%%
factorial(N) -> % The function definition starts with the name and the parameters
    case N of % We use a case statement to handle different cases of N
        0 -> 1; % If N is 0, the factorial is 1
        _ -> N * factorial(N-1) % For any other value of N, we recursively call the factorial function
    end. % The end statement marks the end of the function definition

% Function to calculate the fibonacci sequence at a given position
% Parameters:
%   N - the position in the fibonacci sequence
% Returns:
%   the value at the given position in the fibonacci sequence
%%
fib(N) when N =< 0 -> 0; % If N is less than or equal to 0, the value is 0
fib(1) -> 1; % If N is 1, the value is 1
fib(N) -> fib(N-1) + fib(N-2). % For any other value of N, we use recursion to calculate the value at that position in the sequence