-module(calendar).

%% Internal data structures

-record(date, {year = 0, month = 0, day = 0}).
%% Record definition for holding date information

-record(time, {hour = 0, minute = 0, second = 0}).
%% Record definition for holding time information

-record(event, {description = "", startDate = #date{}, endDate = #date{}, startTime = #time{}, endTime = #time{}}).
%% Record definition for holding event information

-record(calendar, {events = []}).
%% Record definition for holding calendar with events

%% Public API

%% Create a new empty calendar
new_calendar() -> #calendar{}.

%% Add an event to the calendar
add_event(Calendar = #calendar{}, Event = #event{}) ->
    UpdatedEvents = [Event | Calendar#calendar.events],
    #calendar{events = UpdatedEvents}.

%% Remove an event from the calendar
remove_event(Description, Calendar = #calendar{}) ->
    UpdatedEvents = [Event || Event = Calendar#calendar.events, Event#event.description â‰  Description],
    #calendar{events = UpdatedEvents}.

%% Get all events in a specific date
get_events_by_date(Date, Calendar = #calendar{}) ->
    FilteredEvents = [Event || Event = Calendar#calendar.events, is_same_date(Event, Date)],
    %% Function to filter events by date
    %% Uses 'is_same_date' function defined below
    FilteredEvents.

%% Get all events in a specific month
get_events_by_month(Month, Calendar = #calendar{}) ->
    FilteredEvents = [Event || Event = Calendar#calendar.events, Event#event.startDate#date.month =:= Month],
    FilteredEvents.

%% Get all events that are overlapping with a given event
get_overlapping_events(Event, Calendar = #calendar{}) ->
    OverlappingEvents = [Event2 || Event2 = Calendar#calendar.events,
						is_overlapping(Event#event.startTime, Event#event.endTime, 
						Event2#event.startTime, Event2#event.endTime)],
    %% Function to check if two events overlap
    %% Uses 'is_overlapping' function defined below
    OverlappingEvents.

%% Private functions

%% Check if two events overlap
is_overlapping(Time1, Time2, Time3, Time4) ->
    not (Time1 > Time4 or Time3 > Time2).

%% Check if two dates are the same
is_same_date(Event = #event{startDate = Date}, DateToCompare = #date{}) ->
    Event#event.startDate =:= DateToCompare;
is_same_date(Event = #event{endDate = Date}, DateToCompare = #date{}) ->
    Event#event.endDate =:= DateToCompare.