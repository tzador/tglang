%% This Erlang code snippet generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm.
%% The function takes in an integer as the limit and returns a list of prime numbers.
%% The algorithm uses a list to keep track of the numbers that have been checked, and recursively filters out multiples of each prime number.

-module(prime_numbers). %% Defines the module name.
-export([primes/1]). %% Uses the "primes" function for export.

%% Function for generating the list of prime numbers.
%% Uses list comprehension to generate a list of numbers from 2 to the given limit.
primes(Limit) ->
    Numbers = [X || X <- lists:seq(2, Limit)], %% Generate list of numbers from 2 to limit.
    [2 | _] = Numbers, %% Make sure list starts with 2.
    Sieve = filter(Numbers, []), %% Call helper function with the number list and empty filter list.
    primes_helper(Sieve, []). %% Call helper function with the sieve and empty prime list.

%% Helper function for recursively filtering out the non-prime numbers.
%% Takes in the current sieve list and the list of prime numbers found so far.
primes_helper(Sieve, Primes) ->
    case Sieve of
        [] -> Primes; %% Base case: return list of prime numbers when sieve is empty.
        [P | Rest] -> primes_helper(filter(Rest, [P | Primes]), [P | Primes]) %% Remove all multiples of current prime, add it to the list of primes, and call helper function again with updated lists.
    end.

%% Helper function for filtering out multiples of a given number.
%% Takes in a list of numbers and a filter list to keep track of numbers that have been checked.
filter([], Filter) -> Filter; %% Base case: return filter list when list is empty.
filter([Num | Rest], Filter) ->
    case lists:member(Num, Filter) of
        true -> filter(Rest, Filter); %% If number is in filter list, skip it and call function again with rest of list.
        false -> [Num | filter(Rest, [Num | Filter])] %% If number is not in filter list, add it to the filter and call function again with rest of list.
    end.