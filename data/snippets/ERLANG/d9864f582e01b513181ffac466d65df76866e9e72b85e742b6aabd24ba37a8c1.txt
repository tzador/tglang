-module(treemaps).
-author("John Smith").

% Defines a type 'tree' with two possible states
% A leaf with a value, or a node with two child trees
% Leaf holds any type of value
% Node holds two tree values
-type tree() :: leaf(value()) | node(tree(), tree()).

% Function to add a new value to a tree
% Takes in a tree and a value
% Returns a new tree with the added value

add(Value, Tree) ->
    case Tree of
        leaf(_) ->
            % If Tree is a leaf, return a new node with
            % Tree as the left child and a new leaf with Value as the right child
            node(Tree, leaf(Value));
        node(LeftChild, RightChild) ->
            % If Tree is a node, recursively call add on the
            % LeftChild until a leaf is reached and then add the new value
            node(add(Value, LeftChild), RightChild)
    end.