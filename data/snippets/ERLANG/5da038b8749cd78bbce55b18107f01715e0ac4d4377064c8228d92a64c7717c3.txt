%% Module Documentation
-module(my_module).
%% Exported Functions
-export([factorial/1, factorial/2]).

%% Factorial function with accumulator
%% Takes in a number and an accumulator
factorial(N, Acc) when N < 1 -> Acc;
factorial(N, Acc) -> factorial(N - 1, N * Acc).

%% Factorial function using tail recursion
%% Takes in a number and calls the helper function with an initial accumulator value of 1
factorial(N) -> factorial(N, 1). 

%% Helper function for factorial using tail recursion
%% Takes in a number, accumulator, and result
factorial(0, Acc, Result) -> Result; 
factorial(N, Acc, Result) -> 
    factorial(N - 1, N * Acc, Result).

%% Simple function to demonstrate pattern matching
%% Takes in a list and returns the last element
last([X|[]]) -> X;
last([_|Tail]) -> last(Tail).

%% Function to calculate the nth Fibonacci number
%% Takes in a positive integer n and returns the result
fibonacci(0) -> 0;
fibonacci(1) -> 1;
fibonacci(N) -> fibonacci(N - 1) + fibonacci(N - 2).

%% Example of a record definition
%% Defines a person record with fields name, age, and occupation
-record(person, {
    name = "",
    age = 0,
    occupation = ""
}). 

%% Example function using pattern matching on a record
%% Takes in a person record and returns their name
get_name(#person{name = Name}) -> Name.

%% Example of a try-catch block
%% Tries to open a file and returns its contents, or returns an error if it fails
try_open() ->
    try {ok, File} = file:open("my_file.txt", [read]),
        io:get_line(File, ""),
        io:get_line(File, ""),
        io:get_line(File, "")
    catch
        _:Error -> {error, Error}
    after
        file:close(File)
    end.

%% Example of a list comprehension
%% Returns a list of numbers from 1 to n
numbers(N) ->
    [X || X <- lists:seq(1, N)].