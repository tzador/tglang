%%% Module definition
-module(my_module).

%%% Exported functions
-export([some_function/1, another_function/2, complex_function/3]).

%%% Imported modules
-import(my_other_module, [helper_function/1]).

%%% Function definitions

%% Function with single argument
some_function(Argument) ->
    %% Code here
    Result = helper_function(Argument),
    
    %%  If statement
    if
        Result < 10 ->
            %% Call another function
            another_function(Result, "less_than_ten"),

        true ->
            %% Call complex function with multiple arguments
            complex_function(Result, Argument, "greater_than_ten")
    end.

%% Function with two arguments
another_function(Arg1, Arg2) ->
    %% String concatenation
    Str = "The result is: " ++ integer_to_list(Arg1) ++ Arg2,

    %% Call built-in function
    io:format("~p~n", [Str]),

    %% Function call
    case Arg1 >= 0 of
        true ->
            do_something();
        false ->
            do_something_else()
    end.

%% Complex function with pattern matching
complex_function(0, Arg2, Arg3) ->
    %% Perform operation
    Arg2 + string_to_integer(Arg3);

complex_function(Arg1, Arg2, Arg3) ->
    %% Function composition
    NewArg = wrapper_function(helper_function(Arg1, Arg2)),

    %% Recursive call
    complex_function(NewArg + 1, Arg2, Arg3).