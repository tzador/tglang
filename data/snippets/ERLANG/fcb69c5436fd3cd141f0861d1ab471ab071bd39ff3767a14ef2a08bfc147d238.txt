%% Annotated ERLANG Code Snippet
-module(my_module).  % Code that declares a module called "my_module".

-export([my_func/0]). % Code that exports a function called "my_func" with 0 arguments.

-record(my_record, { % Code that defines a record data structure called "my_record" with three fields.
    field1 = 0 :: integer(), % Field 1 is an integer with a default value of 0.
    field2 = "" :: string(), % Field 2 is a string with a default value of an empty string.
    field3 = false :: boolean() % Field 3 is a boolean with a default value of false.
}).

my_func() -> % Code that defines the function "my_func".
    %% This function takes no arguments and returns a string.
    Record = #my_record{field1 = 1, field2 = "hello", field3 = true}, % Code that creates an instance of the record with specific values for each field.
    <<"Field 1: ", integer_to_list(Record#my_record.field1), "Field 2: ", Record#my_record.field2/binary, "Field 3: ", atom_to_binary(if Record#my_record.field3 -> true; true -> false end)>>. % Code that formats and returns a binary string using the field values from the record.