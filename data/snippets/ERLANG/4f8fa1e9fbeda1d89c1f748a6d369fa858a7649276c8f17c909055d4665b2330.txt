%% This module implements a depth-first search algorithm for a graph.
%% It takes in a graph represented as an adjacency list and a starting node,
%% and outputs the path in which the algorithm traverses through the graph.

-module(depth_first_search).

%% Public API

-export([dfs/2]).

%% Function to perform depth-first search on a graph given an adjacency list and a starting node
dfs(Graph, Start_Node) ->
    %% Initialize a stack to keep track of nodes to be visited
    Stack = [Start_Node],

    %% Initialize a list to keep track of the visited nodes
    Visited = [],

    %% Call the private function dfs_helper to perform the actual search
    dfs_helper(Graph, Stack, Visited).

%% Private API

%% Function to recursively perform depth-first search on a graph
dfs_helper(Graph, Stack, Visited) ->
    %% Get the first node in the stack
    [Current_Node | Rest] = Stack,

    %% Check if the current node has already been visited
    case lists:member(Current_Node, Visited) of
        %% If the node has already been visited, skip it and continue with the rest of the stack
        true ->
            dfs_helper(Graph, Rest, Visited);

        %% If the node has not been visited, add it to the visited list and find its adjacent nodes
        false ->
            %% Add the current node to the visited list
            Visited_Updated = lists:append(Visited, [Current_Node]),

            %% Get the adjacent nodes of the current node from the graph
            Adjacent_Nodes = proplists:get_value(Current_Node, Graph),

            %% Add the adjacent nodes to the stack in reverse order to follow a depth-first approach
            Stack_Updated = lists:reverse(Adjacent_Nodes) ++ Rest,

            %% Recursively call dfs_helper with the updated stack and visited list
            dfs_helper(Graph, Stack_Updated, Visited_Updated)
    end.