%%% This module implements a binary search tree

-module(bstree).

%%% Public API
-export([new/0, insert/2, search/2]).

%%% Types and record declarations
-type bstree() :: nil | {node, Key :: any(), Value :: any(),
                               Left :: bstree(),
                               Right :: bstree()}.
-record(tree, {root :: bstree(),
               compare :: fun((any(), any()) -> 'strictly_less' | 'equal' | 'strictly_greater')}).

%%% Module API functions
%% Creates a new tree object with a custom comparison function
-spec new() -> tree().
new() ->
  #tree{root = nil,
        compare = fun(_, _) -> 'equal' end}.

%% Inserts a key-value pair into the tree
-spec insert(any(), any()) -> tree().
insert(Key, Value) ->
  #tree{ root = insert_recursive(Key, Value, root) }.

%% Recursive insert function for binary search tree
-spec insert_recursive(any(), any(), bstree()) -> bstree().
insert_recursive(Key, Value, nil) ->
  {node, Key, Value, nil, nil};
insert_recursive(Key, Value, {node, Key, _, Left, Right}) ->
  {node, Key, Value, Left, Right};
insert_recursive(Key, Value, {node, NodeKey, NodeValue, Left, Right}) when Key < NodeKey ->
  {node, NodeKey, NodeValue, insert_recursive(Key, Value, Left), Right};
insert_recursive(Key, Value, {node, NodeKey, NodeValue, Left, Right}) ->
  {node, NodeKey, NodeValue, Left, insert_recursive(Key, Value, Right)}.

%%% Helper functions
%% Searches the tree for a given key
-spec search(any(), tree()) -> 'undefined' | any().
search(Key, #tree{ root = BSTree, compare = CompareFun }) ->
  search_recursive(Key, BSTree, CompareFun).

%% Recursive search function for binary search tree
-spec search_recursive(any(), bstree(), fun((any(), any()) -> 'strictly_less' | 'equal' | 'strictly_greater'))
      -> 'undefined' | any().
search_recursive(Key, nil, _) ->
  'undefined';
search_recursive(Key, {node, NodeKey, NodeValue, Left, Right}, CompareFun) ->
  case CompareFun(Key, NodeKey) of
    'equal' ->
      NodeValue;
    'strictly_less' ->
      search_recursive(Key, Left, CompareFun);
    'strictly_greater' ->
      search_recursive(Key, Right, CompareFun)
  end.