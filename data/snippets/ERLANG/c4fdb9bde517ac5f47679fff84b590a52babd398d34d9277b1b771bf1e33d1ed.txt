%% This is a module that implements a binary search tree
-module(binary_search_tree).
%% A tuple record that represents a tree node
-record(node, {key :: term(),
               value :: term(),
               left :: #node{},
               right :: #node{}}).
%% Function that inserts a key-value pair into the tree
-spec insert(Key :: term(), Value :: term(), Tree :: #node{}) -> #node{}
insert(Key, Value, Tree) ->
    case Tree of
        #node{key = Key, value = Value} ->
            %% If the key already exists, we update the value
            Tree#node{value = Value};
        #node{key = Key, value = Value, right = Right, left = Left} ->
            %% If the key matches, update the value
            Tree#node{value = Value, right = Right, left = Left};
        #node{} ->
            %% No key in the current node, so we insert the key-value pair here
            #node{key = Key, value = Value};
        #node{key = Key2, value = Value2, right = Right, left = Left} when Key < Key2 ->
            %% The key is smaller than the current node's key, so we insert it on the left child
            Tree#node{left = insert(Key, Value, Left)};
        #node{key = Key2, value = Value2, left = Left, right = Right} when Key > Key2 ->
            %% The key is larger than the current node's key, so we insert it on the right child
            Tree#node{right = insert(Key, Value, Right)};
    end.