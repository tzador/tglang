-module(multiple_processes).
-export([start/0, send_messages/1, wait_for_messages/1]).

% This module shows an example of creating and managing multiple processes in Erlang
% In Erlang, processes are created using the spawn function, which takes a function as an argument
% and returns the process identifier (PID) of the new process

start() ->
    % create a new process with the send_receive function as the argument
    % store the PID of the new process in a variable
    Pid = spawn(fun send_receive/0),

    % send a message to the new process using the PID and the ! operator
    Pid ! {hello, self()},

    % start the wait_for_messages function with the PID as an argument to monitor the new process
    wait_for_messages(Pid).

send_messages(N) ->
    % create N number of processes and store their PIDs in a list
    Pids = [spawn(fun send_receive/0) || _ <- lists:seq(1,N)],

    % send a message to each process in the list using the ! operator
    [Pid ! {hello, self()} || Pid <- Pids],

    % start the wait_for_messages function with the list of PIDs as an argument to monitor all the processes
    wait_for_messages(Pids).

wait_for_messages(Pid) ->
    % receive a message from the process being monitored using the receive statement
    receive
        % handle the message based on its type
        {hello, Sender} ->
            io:format("Received hello message from ~p~n", [Sender]),
            % send a reply message to the original sender using the ! operator
            Sender ! {bye, self()};
        {bye, Sender} ->
            io:format("Received bye message from ~p~n", [Sender])
    end.

send_receive() ->
    % wait for a message using receive statement
    receive
        % handle the message based on its type
        {hello, Sender} ->
            io:format("Received hello message from ~p~n", [Sender]),
            % send a reply message to the original sender using the ! operator
            Sender ! {bye, self()};
        {bye, Sender} ->
            io:format("Received bye message from ~p~n", [Sender])
    end.