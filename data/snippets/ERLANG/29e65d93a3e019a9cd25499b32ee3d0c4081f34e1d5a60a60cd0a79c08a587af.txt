-module(my_module).
-export([filter/2]).

%% This function takes a list and a predicate function as arguments.
%% It filters out elements from the list that do not satisfy the predicate function.
filter(List, Predicate) ->
    % recursion base case
    filter_helper(List, Predicate, []).

filter_helper([Head|Tail], Predicate, Acc) ->
    % check if Head satisfies the predicate
    case Predicate(Head) of
        true ->
            % add Head to accumulator list
            filter_helper(Tail, Predicate, [Head|Acc]);
        _ ->
            % skip Head and continue recursion
            filter_helper(Tail, Predicate, Acc)
    end;
% base case, end recursion
filter_helper([], _, Acc) ->
    % reverse accumulator list to get filtered list in correct order
    lists:reverse(Acc).