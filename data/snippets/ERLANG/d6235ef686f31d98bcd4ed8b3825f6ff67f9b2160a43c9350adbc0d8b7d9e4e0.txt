-module(complex_module).
-export([complex_function/3]).

%% @doc This is a complex function that takes in three arguments and returns
%% a list of tuples.
%% The first argument is a list of integers, the second argument is a string,
%% and the third argument is a boolean.
%% @end
complex_function(List, String, Bool) ->
    %% @doc Nested function that performs additional calculations.
    %% @end
    NestedFunction = fun(NestedList, NestedString) ->
        %% @doc Helper function to convert list of integers to a list of tuples.
        %% @end
        HelperFunction = fun(List) ->
            lists:map(fun(X) ->
                {X, NestedString}
            end, List)
        end,
        %% @doc Call helper function and convert result to string.
        %% @end
        Converted = io_lib:format("~ts", [HelperFunction(NestedList)]),
        %% @doc Create final list of tuples with converted string.
        %% @end
        Result = lists:zipwith(fun(X, Y) ->
            {X, Y}
        end, NestedList, Converted),
        %% @doc Check boolean and return appropriate list.
        %% @end
        case Bool of
            true ->
                %% @doc Add even more complexity with guards.
                %% @end
                [Tuple || Tuple = {X, _} <- Result, X == 5];
            false ->
                %% @doc Return original list of tuples.
                %% @end
                Result
        end,
    %% @doc Call nested function with arguments passed into main function.
    %% @end
    NestedFunction(List, String).