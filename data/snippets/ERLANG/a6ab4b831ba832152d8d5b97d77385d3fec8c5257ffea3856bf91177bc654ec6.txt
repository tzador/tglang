%% A module that implements the merge sort algorithm

-module(mergesort).

-export([sort/1]).

%% Sorts a list in ascending order using the merge sort algorithm
sort(List) ->
    Merge = fun(A, B) ->
        case {A, B} of
            {[], B} -> B;
            {A, []} -> A;
            {[A | TailA], [B | TailB]} ->
                case A < B of
                    true -> [A | Merge(TailA, [B | TailB])];
                    false -> [B | Merge([A | TailA], TailB)]
                end
        end
    end,
    Div = fun(L, SubList) ->
        case {L, SubList} of
            {[], _} -> SubList;
            {L, []} -> L;
            {[Head | Tail], _} -> Div(Tail, lists:sublist(Head, SubList, lists:length(Tail)))
        end
    end,
    MergeAll = fun(L) ->
        case L of
            [] -> [];
            [A] -> [A];
            [A, B | Tail] -> MergeAll([Merge(A, B) | Div(Tail, [])])
        end
    end,
    MergeAll(List).