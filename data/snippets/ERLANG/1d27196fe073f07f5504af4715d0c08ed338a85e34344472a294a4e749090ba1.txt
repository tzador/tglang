%%% A module that creates and manipulates a queue data structure

-module(queue).
-export([empty/0, enqueue/2, dequeue/1, front/1, size/1]).

%%% The data structure for a queue is a tuple containing 2 lists.
%%% The first list keeps track of the front of the queue, while the second list
%%% keeps track of the back of the queue.
%%% The second list is reversed so that items can be easily added to the back of
%%% the queue using the list concatenation operator.

%%% Function to create an empty queue
empty() ->
    {[], []}.

%%% Function to add an item to the back of the queue
%%% Takes in the current queue and the item to be added
%%% Returns the updated queue
enqueue({Front, Back}, Item) ->
    {[Item|Front], [Item|Back]}.

%%% Function to remove an item from the front of the queue
%%% Takes in the current queue
%%% Returns the item at the front of the queue and the updated queue
%%% If the queue is empty, an error is thrown
dequeue({[], []}) ->
    {error, empty_queue};
dequeue({[Front|Rest], Back}) ->
    {Front, {Rest, Back}}.

%%% Function to get the item at the front of the queue
%%% Takes in the current queue
%%% Returns the item at the front of the queue
%%% If the queue is empty, an error is thrown
front({[], []}) ->
    {error, empty_queue};
front({[Front|_], _}) ->
    Front.

%%% Function to get the size of the queue
%%% Takes in the current queue
%%% Returns the number of items in the queue
size({Front, Back}) ->
    length(Front) + length(Back).