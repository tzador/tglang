%Function that calculates the factorial of a given number
%Input: Integer
%Output: Integer
%Function Definition
fact(0) -> 1; %Base case when input is 0, return 1
fact(N) when N > 0 -> %Compare input to 0
    N * fact(N-1). %Recursive call to calculate factorial

%Function that calculates the sum of numbers in a given list
%Input: List of integers
%Output: Integer
%Function Definition
sum([]) -> 0; %Base case when input list is empty, return 0
sum([H|T]) -> %Pattern matching to extract the head and tail of the list
    H + sum(T). %Recursive call to add head to the sum of the rest of the list

%Function that checks if a given integer is a prime number
%Input: Integer
%Output: Boolean
%Function Definition
is_prime(2) -> true; %Base case when input is 2, return true
is_prime(N) when N > 2, N rem 2 =:= 0 -> false; %If input is divisible by 2, not a prime number
is_prime(N) -> %Check for all odd numbers from 3 to the square root of N
    is_prime(N, 3, round(math:sqrt(N))). %Pass input, starting number, and upper limit
is_prime(_N, MIN, MAX) when MIN > MAX -> true; %Base case when all possible numbers have been checked, return true
is_prime(N, MIN, MAX) when N rem MIN =:= 0 -> false; %If input is divisible by current number, not a prime number
is_prime(N, MIN, MAX) -> is_prime(N, MIN + 2, MAX). %Recursive call, increment MIN by 2 (odd numbers) and check again

%Function that calculates the Nth number in the Fibonacci sequence
%Input: Integer
%Output: Integer
%Function Definition
fib(0) -> 0; %Base case when input is 0, return 0
fib(1) -> 1; %Base case when input is 1, return 1
fib(N) when N > 1 -> fib(N-1) + fib(N-2). %Recursive call to calculate sum of two previous numbers in the sequence