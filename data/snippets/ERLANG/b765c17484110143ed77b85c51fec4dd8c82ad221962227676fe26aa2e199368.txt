-module(bank_account).

-export([add_account/2, deposit/2, withdraw/2, get_balance/1]).

%% @doc
%% Given a list of all existing accounts and a new account number,
%% adds the new account to the end of the list and returns the updated list.
%%
%% @spec add_account(list(), integer()) :: list()
add_account(Accounts, NewAccount) ->
    [NewAccount | Accounts].

%% @doc
%% Given an account number and an amount, adds the amount to the balance of the account and returns the updated balance.
%%
%% @spec deposit(integer(), number()) :: number()
deposit(AccountNum, Amount) ->
    case get_balance(AccountNum) of
        false ->
            false;
        Balance ->
            NewBalance = Balance + Amount,
            update_balance(AccountNum, NewBalance)
    end.

%% @doc
%% Given an account number and an amount, subtracts the amount from the balance of the account and returns the updated balance.
%%
%% @spec withdraw(integer(), number()) :: number()
withdraw(AccountNum, Amount) ->
    case get_balance(AccountNum) of
        false ->
            false;
        Balance when Balance >= Amount ->
            NewBalance = Balance - Amount,
            update_balance(AccountNum, NewBalance);
        Balance ->
            io:format("Insufficient funds.~n"),
            Balance
    end.

%% @doc
%% Given an account number, returns the current balance of the account.
%%
%% @spec get_balance(integer()) :: number() | false
get_balance(AccountNum) ->
    case ets:lookup_element(?TABLE_NAME, AccountNum, 2) of
        {AccountNum, Balance} ->
            Balance;
        _ ->
            false
    end.

%% @doc
%% Given an account number and a new balance, updates the balance of the account in the ETS table.
%%
%% @spec update_balance(integer(), number()) :: true
update_balance(AccountNum, NewBalance) ->
    ets:insert(?TABLE_NAME, {AccountNum, NewBalance}),
    true.