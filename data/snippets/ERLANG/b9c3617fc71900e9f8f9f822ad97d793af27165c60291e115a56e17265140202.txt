%% This program generates a list of Fibonacci numbers up to a given limit

-module(fib).

-export([get_fibonacci/1, fibonacci/2]).

%% `get_fibonacci/1` function takes an integer `Limit` as input and returns a list of fibonacci numbers
%% up to the given `Limit` using the helper function `fibonacci/2`.
%% Recursive call is used to generate the fibonacci sequence.
%% The initial values `0` and `1` are used to generate the sequence.

get_fibonacci(Limit) ->
    fibonacci(Limit, 0, 1, []).

%% `fibonacci/2` helper function takes the given `Limit`, `Current`, `Next`, and `Acc` as inputs and recursively
%% generates the list of fibonacci numbers using the `Limit` as the base case.
%% The current and next values are used to generate the next number in the sequence,
%% while the `Acc` parameter stores the list of generated fibonacci numbers.
%% The list is then reversed to return the numbers in ascending order.

fibonacci(0, _, _, Acc) ->
    lists:reverse(Acc);
fibonacci(Limit, Current, Next, Acc) ->
    fibonacci(Limit-1, Next, Current+Next, [Current|Acc]).

%% Example:
%% `get_fibonacci(10)` returns `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]` as output.