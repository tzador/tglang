%%% This module creates a binary search tree %%%

-module(bst).
-export([new/0, insert/2, search/2, remove/2]).

%%% DATA TYPES %%%

-record(node, {key, left, right}).

%%% EXPORTED FUNCTIONS %%%

%% Creates an empty BST
new() -> 
    nil.

%% Inserts a node with a given key into the BST
insert(Key, Tree) ->
    Tree1 = insert(Key, Tree#node.left, side(left)),
    Tree2 = insert(Key, Tree#node.right, side(right)),
    Tree#node{left = Tree1, right = Tree2}.

%% Searches for a given key in the BST
search(Key, Tree) ->
    case Tree of
        nil -> nil;
        #node{key = Key} -> Tree;
        #node{key = Key1} when Key < Key1 -> search(Key, Tree#node.left);
        #node{key = Key1} -> search(Key, Tree#node.right)
    end.

%% Removes a node with the given key from the BST
remove(Key, Tree) ->
    case search(Key, Tree) of
        nil -> Tree;
        Node ->
            Tree1 = delete(Node#node.left, Node#node.key),
            Tree2 = delete(Node#node.right, Node#node.key),
            Tree#node{left = Tree1, right = Tree2}
    end.

%%% HELPER FUNCTIONS %%%

%% Inserts a node with the given key into the specified side of the tree
insert(Key, nil, Side) ->
    #node{key = Key, Side = nil};
insert(Key, Tree, Side) ->
    case Key of
        Tree#node.key -> Tree;
        Key1 when Key < Key1 -> Tree#node{left = insert(Key, Tree#node.left, side(Tree#node.right))};
        Key1 -> Tree#node{right = insert(Key, Tree#node.right, side(Tree#node.left))}
    end.

%% Deletes a node with the given key from the BST
delete(nil, _) ->
    nil;
delete(Node, Key) ->
    if Key == Node#node.key ->
        case Node#node.right of
            nil -> Node#node.left;
            _ -> replace(Node#node.right)
        end;
    Key1 when Key < Key1 -> Node#node{left = delete(Node#node.left, Key)};
    _ -> Node#node{right = delete(Node#node.right, Key)}
    end.

%% Replaces the current node with the smallest key in the right subtree
replace(Node) ->
    case Node#node.left of
        nil -> Node#node.right;
        _ -> replace(Node#node.left)
    end.

%% Helper function to determine which side the node will be inserted into
side(nil) -> nil;
side(left) -> left;
side(right) -> right.