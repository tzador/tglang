%% Erlang code for implementing a simple banking system

-module(banking_system).

-author("John Smith").

-export([init_account/0, deposit/2, withdraw/2, check_balance/1]).

%% The record for a bank account
-record(account, {id, balance}).

%% Function for initializing a new account
init_account() ->
    #account{id = generate_id(), balance = 0}.

%% Function for generating a unique account ID
generate_id() ->
    random:uniform(1000000).

%% Function for depositing funds into an account
%% Takes in an existing account and the amount to deposit
%% Returns the updated account with the new balance
deposit(Account, Amount) ->
    #account{id = Id, balance = Bal} = Account,
    NewBal = Bal + Amount,
    #account{id = Id, balance = NewBal}.

%% Function for withdrawing funds from an account
%% Takes in an existing account and the amount to withdraw
%% Returns the updated account with the new balance
%% If the account does not have enough funds, an error is thrown
withdraw(Account, Amount) ->
    #account{id = Id, balance = Bal} = Account,
    case Bal >= Amount of
        true ->
            NewBal = Bal - Amount,
            #account{id = Id, balance = NewBal};
        false ->
            erlang:error({"Insufficient funds in account "~p, Id})
    end.

%% Function for checking the balance of an account
%% Takes in an existing account
%% Returns the current balance of the account
check_balance(Account) ->
    #account{balance = Bal} = Account,
    Bal.