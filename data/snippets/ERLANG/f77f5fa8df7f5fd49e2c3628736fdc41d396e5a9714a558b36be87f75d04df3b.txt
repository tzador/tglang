%% This module defines functions for managing and manipulating lists.

-module(list_utils).

%% Returns a new list with only the elements satisfying the given predicate.
%% Parameters:
%% - List: the original list
%% - Predicate: a function that takes an element and returns a boolean
%% Example:
%%   % Filter out odd numbers from a list
%%   list_utils:filter([1,2,3,4,5], fun(X) -> X rem 2 =:= 0 end).
-export([filter/2]).

filter(List, Predicate) ->
    filter(List, Predicate, []).

filter([], _, Acc) ->
    lists:reverse(Acc);
filter([H|T], Predicate, Acc) ->
    case Predicate(H) of
        true ->
            filter(T, Predicate, [H|Acc]);
        false ->
            filter(T, Predicate, Acc)
    end.

%% Zips two lists together, creating a list of tuples containing elements from
%% each list. The length of the resulting list will be the minimum length of the
%% two input lists.
%% Parameters:
%% - List1: the first list
%% - List2: the second list
%% Example:
%%   % Zip two lists together
%%   list_utils:zip([1,2,3], [a,b,c,d]).
-export([zip/2]).

zip(List1, List2) ->
    zip(List1, List2, []).

zip([], _, Acc) ->
    lists:reverse(Acc);
zip(_, [], Acc) ->
    lists:reverse(Acc);
zip([H1|T1], [H2|T2], Acc) ->
    zip(T1, T2, [{H1, H2}|Acc]).