%% This is an example module in ERLANG that uses
%% a functional approach to implement a binary search algorithm.

-module(binary_search).

%% Function for finding the index of a given element in a list using binary search
%% Function takes in a target element, a list to search, and the starting and ending indices of the list.
%% Returns the index of the element if found, or -1 if element is not in list.
binary_search(Target, List, Start, End) ->
    Middle = (Start + End) div 2, %% Calculates the index of the middle element in the list
    case list:nth(Middle, List) of %% Pattern matching to check if middle element is target
        Target -> Middle; %% If true, return index
        element ->
            case (Target < element) of %% If target is less than middle element, search lower half of list
                true -> binary_search(Target, List, Start, Middle - 1);
                false -> binary_search(Target, List, Middle + 1, End) %% Otherwise, search upper half of list
            end
    end.

%% Sample call to the binary search function
%% Searches for the index of the element 5 in a list [1,2,3,4,5,6,7]
Index = binary_search(5, [1,2,3,4,5,6,7], 0, list_len([1,2,3,4,5,6,7]) - 1). %% list_len function counts the number of elements in a list

%% Output: Index = 4 (since the index of element 5 in the list is 4)