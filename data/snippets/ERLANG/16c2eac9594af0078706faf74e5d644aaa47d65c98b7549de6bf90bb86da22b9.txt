-module(my_module). % Declares a module named "my_module"

-export([example/0]). % Exports the function "example" with zero arguments

% Definition of the exported function "example"
example() ->
    %% A simple print statement
    io:format("Hello world!~n"),
    
    % A list containing two numbers
    Numbers = [3, 5],
    
    % A list comprehension that adds 1 to each number in the Numbers list
    [Num + 1 || Num <- Numbers],
    
    % A tuple containing a string, a number, and a list
    {"Hello", 123, ["This", "is", "a", "list"]},
    
    % A recursive function that calculates the factorial of a number
    fact(Num) ->
        % Base case
        if Num =< 1 ->
            1;
            
        % Recursive case
        true ->
            % Calls the fact function again with Num-1 as argument
            Num * fact(Num-1)
        end.
        
% The following functions are not exported, so they can only be used within the module

% A function that concatenates two strings
concat(String1, String2) ->
    String1 ++ String2.
    
% A function that checks if a number is odd
is_odd(Num) ->
    % Performs a bitwise AND operation on the number and 1
    case Num band 1 of
        1 ->
            true;
        _ ->
            false
    end.