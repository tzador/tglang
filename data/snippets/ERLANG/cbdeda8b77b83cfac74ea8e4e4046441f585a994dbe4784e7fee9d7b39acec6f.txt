%% Erlang Code Snippet - Complex Matrix Multiplication

-module(matrix).

-export([multiply/2, dot_product/2, transpose/1]).

%% Function to perform matrix multiplication
multiply(MatrixA, MatrixB) ->
    %% Get the number of rows and columns in MatrixA
    {M, N} = dimensions(MatrixA),

    %% Get the number of rows and columns in MatrixB
    {P, Q} = dimensions(MatrixB),

    %% Check if the dimensions are compatible for multiplication
    if
        N /= P -> throw(incompatible_dimensions)
    end,

    %% Transpose MatrixB for easier computation
    TransposedB = transpose(MatrixB),

    %% Loop through all the rows and columns in the matrices
    %% and calculate the dot product for each position
    [ [ dot_product(RowA, ColumnB) || ColumnB <- TransposedB ] || RowA <- MatrixA ].

%% Function to perform the dot product of two lists
dot_product(ListA, ListB) ->
    %% Multiply corresponding elements in the lists
    Zip = lists:zip(ListA, ListB),

    %% Calculate the sum of the multiplied elements
    sum([ A*B || {A, B} <- Zip ]).

%% Function to transpose a matrix
transpose(Matrix) ->
    %% Get the number of rows and columns in the matrix
    {M, N} = dimensions(Matrix),

    %% If matrix has no elements, return empty list
    if
        M == 0 -> []
    end,

    %% Transpose the matrix by looping through each column
    [ [ lists:nth(Index, Row) || Row <- Matrix ] || Index <- lists:seq(1, N) ].

%% Helper function to get the dimensions of a matrix
dimensions(Matrix) ->
    %% Get the number of rows and columns in the matrix
    {length(Matrix), length(hd(Matrix))}.