-module(my_module).
-export([my_func/2]).
          % This is a module declaration in ERLANG, indicating the start of the code.

% This is a function declaration in ERLANG, specifying the name 'my_func' and the number of arguments.
my_func(Param1, Param2) ->
  % This is a tuple declaration in ERLANG, containing two elements.
  {match_result, Result} =
    % This is a case expression in ERLANG, matching the first parameter with different patterns.
    case Param1 of
      % This is a pattern matching in ERLANG, checking if the first parameter is equal to 0.
      0 -> {success, Param2};
      % This is a pattern matching in ERLANG, checking if the first parameter is equal to any other integer.
      _ -> {failure, "Invalid parameter"}
    end,
  % This is a conditional statement in ERLANG, checking if the first element of the tuple is equal to 'success'.
  if
    Result =:= "success" ->
      % This is an asynchronous message sending in ERLANG, using the '!' operator.
      io:format("Result ~p was successful.~n", [Result]),
      % This is a recursive function call in ERLANG, calling 'my_func' with different values.
      my_func(Param1 - 1, Param2 + 1);
    % This is a conditional statement in ERLANG, checking if the first element of the tuple is equal to 'failure'.
    Result =:= "failure" ->
      % This is a pattern matching in ERLANG, matching the second parameter with different patterns.
      case Param2 of
        % This is a pattern matching in ERLANG, checking if the second parameter is equal to any atom.
        atom ->
          % This is a record declaration in ERLANG, defining a new data type with the specified fields.
          Record = #myrecord{field1 = Param1, field2 = Param2},
          % This is a tuple declaration in ERLANG, containing the atom 'result' and the record.
          {result, Record};
        % This is a pattern matching in ERLANG, checking if the second parameter is equal to the empty list.
        [] ->
          % This is a function call in ERLANG, calling the built-in function 'make_ref'.
          % It generates a new reference, which is a unique identifier.
          Ref = make_ref(),
          % This is a list comprehension in ERLANG, iterating through a list and adding a reference to each element.
          [Element || Element <- [1,2,3], {Param1, Ref} | Element == tuple],
          % This is a tuple declaration in ERLANG, containing the atom 'finished' and the reference.
          {finished, Ref}
      end
  end.