%% This module implements a simple queue data structure using a list.
-module(queue).

%% Exported functions
-export([new/0, enqueue/2, dequeue/1, peek/1]).

%% Define a tuple to represent the queue
-record(queue, {front=[], back=[]}).

%% Returns a new empty queue
new() ->
    #queue{front=[], back=[]}.

%% Adds an element to the back of the queue
enqueue(Element, #queue{back=Back, front=Front}=Q) ->
    {ok, Q#queue{back=[Element|Back]}}.

%% Removes an element from the front of the queue
dequeue(#queue{front=[E|Front], back=Back}=Q) ->
    {ok, E, Q#queue{front=Front}}.

%% Returns the element at the front of the queue without removing it
peek(#queue{front=[E|_]}=Q) ->
    {ok, E, Q}.