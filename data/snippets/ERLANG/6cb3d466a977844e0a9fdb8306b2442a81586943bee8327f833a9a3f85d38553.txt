-module(my_module).
-compile(export_all). %%compiles all functions in module for external access

%%define a recursive function to calculate the nth Fibonacci number
fib(0) -> 0; %%base case when n = 0
fib(1) -> 1; %%base case when n = 1
fib(N) -> fib(N-1) + fib(N-2). %%recursive call to calculate fibonacci number

%%define a function to print the first n Fibonacci numbers
print_fib(N) -> print_fib(N, 1, 0, 1). %%calls helper function with initial values
print_fib(0, _Index, _Fib1, _Fib2) -> ok; %%base case when n = 0, output "ok"
print_fib(N, Index, Fib1, Fib2) -> %%recursive call to print fibonacci numbers
    io:format("~B: ~B~n", [Index, Fib1]), %%prints fibonacci number at current index
    print_fib(N-1, Index+1, Fib2, Fib1+Fib2). %%moves to next fibonacci number and index

%%example of calling the functions and printing output
MyFibonacci = fib(6). %%calls fib function and assigns return value to variable
io:format("The 6th Fibonacci number is ~B~n", [MyFibonacci]). %%prints output
print_fib(6). %%calls print_fib function to print first 6 Fibonacci numbers