%% Example ERLANG code snippet
-module(example_module).
-export([function1/1, function2/2]).

%% This function takes in a list of numbers and returns the sum
function1(Numbers) ->
    function1(Numbers, 0). % Calls the private function with an accumulator

%% Private function with an accumulator
function1([], Acc) ->
    Acc; % Base case, return the accumulator
function1([H|T], Acc) ->
    function1(T, H+Acc). % Recursive call with updated accumulator

%% This function takes in a number and returns a list of its factors
function2(Number) ->
    function2(Number, Number, []). % Calls the private function with a list as an accumulator

%% Private function with a list accumulator
function2(0, _, List) ->
    lists:reverse(List); % Base case, return the reversed list as the factors
function2(Number, Factor, List) ->
    case Number rem Factor of % Check if Factor is a factor of Number
        0 ->
            function2(Number, Factor-1, [Factor|List]); % If it is, add it to the list and continue
        _ ->
            function2(Number, Factor-1, List) % If not, continue without adding to the list
    end.