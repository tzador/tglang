-module(mymodule). %% Defines a module named 'mymodule'

-export([myfunction/1]). %% Specifies the function to be exported from the module

%% Erlang functions use pattern matching to define different cases
%% The first function clause matches when the parameter is an empty list
myfunction([]) ->
    [];
    
%% The second function clause matches when the parameter is a list with one element
%% In this case, the function multiplies the element by 2 and returns a list
myfunction([X]) ->
    [X*2];
    
%% The third function clause matches when the parameter is a list with more than one element
%% In this case, the function recursively calls itself on the rest of the list and
%% adds the first element multiplied by 2 to the result
myfunction([H|T]) ->
    [H*2 | myfunction(T)].
    
%% Erlang also supports guards, which are used to add additional conditions to function clauses
%% In this case, the guard ensures that the parameter is a number and returns an error if not
myfunction(Num) when is_number(Num) ->
    {error, "Input must be a list"}.