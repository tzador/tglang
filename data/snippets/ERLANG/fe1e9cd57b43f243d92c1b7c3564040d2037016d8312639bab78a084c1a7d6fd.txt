-module(example_module).
-export([example_function/1]). %% a function called example_function with 1 argument

%%% function definitions
sum(X, Y) -> X + Y. %% a function to calculate the sum of two numbers
factorial(0) -> 1; %% base case for factorial function
factorial(N) when N > 0 -> N * factorial(N-1). %% recursive case for factorial function

%%% types and pattern matching
add_one(X) when is_number(X) -> X + 1; %% add one to a number
add_one(X) when is_list(X) -> [X | [1]]. %% add one to a list (append 1 to the end)
add_one(X) when is_tuple(X) -> tuple_size(X) + 1. %% add one to a tuple (increase tuple size)

%%% higher-order functions
map(Function, List) -> lists:map(Function, List). %% apply a function to each element in a list
filter(Function, List) -> lists:filter(Function, List). %% filter a list based on a given function
foldl(Function, Accumulator, List) -> lists:foldl(Function, Accumulator, List). %% apply a function to each element in a list, with an initial accumulator value

%%% concurrency and parallelism
spawn(fun() -> %% spawn a new process
    receive %% receive a message from the current process
        {Message, Sender} -> Sender ! Message * 2 %% double the message and send it back to the sender
    end
end).

receive %% receive a message from another process
    {Message, Sender} -> Sender ! factorial(Message) %% calculate the factorial of the message and send it back to the sender
end.

%%% error handling
divide(X, Y) -> %% a function to divide two numbers
    try %% try block to catch potential errors
        X / Y
    catch %% handle different types of errors
        error:badarith ->
            io:format("Cannot divide by 0. Please provide a non-zero value.~n");
        error:throw ->
            io:format("An error was thrown. Please provide valid input.~n");
        Type:Reason ->
            io:format("An unexpected ~p error occurred: ~p~n", [Type, Reason])
    after %% execute code after the try block, regardless of errors
        io:format("Division operation complete.~n")
    end.