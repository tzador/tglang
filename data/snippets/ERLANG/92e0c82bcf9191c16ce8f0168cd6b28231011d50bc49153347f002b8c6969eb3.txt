%% This is a comment
-module(math_functions). %% Defining a module named "math_functions"

-export([factorial/1, fibonacci/1]). %% Exporting the functions "factorial" and "fibonacci"

%% Implementation of the factorial function
factorial(0) -> 1; %% Base case, if the input is 0 then return 1
factorial(N) when N > 0 -> N * factorial(N-1). %% Recursive case, return N multiplied by the result of calling the factorial function with N-1

%% Implementation of the fibonacci function
fibonacci(1) -> 0; %% First number in the sequence is 0
fibonacci(2) -> 1; %% Second number in the sequence is 1
fibonacci(N) when N > 2 -> fibonacci(N-1) + fibonacci(N-2). %% Recursive case, return the sum of the two previous numbers in the sequence

%% This is a helper function to calculate the power of a number
power(X, 0) -> 1; %% Base case, if the exponent is 0 then return 1
power(X, N) when N > 0 -> X * power(X, N-1). %% Recursive case, multiply X by itself N times

%% Implementation of the square root function
sqrt(N) -> sqrt_helper(N, N/2). %% Call the helper function with an initial guess of N/2

%% Helper function for calculating the square root using the Newton-Raphson method
sqrt_helper(N, Guess) ->
    New_guess = (Guess + N/Guess) / 2, %% Calculate the new guess using the formula
    if abs(New_guess - Guess) < 0.00001 -> New_guess; %% If the difference between the new and old guess is smaller than the threshold, return the new guess
       true -> sqrt_helper(N, New_guess) %% If not, call the helper function again with the new guess
    end.