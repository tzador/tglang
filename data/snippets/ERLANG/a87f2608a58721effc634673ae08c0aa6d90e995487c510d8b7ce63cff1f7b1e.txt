-module(my_module).  % Creating a module in Erlang

-export([start/0]).  % Exporting the function start

% Function start that takes no arguments
start() ->
    {ok, Pid} = spawn_link(fun parallel/0),  % Spawning and linking a parallel process to the current one
    receive
        {Pid, done} ->  % Receiving a message from the parallel process
            io:format("Parallel process completed.~n"),  % Printing a message to the console
            stop(Pid);  % Calling the stop function with the Pid of the parallel process as argument
        _ ->
            io:format("Unexpected message received.~n")  % Handling unexpected messages
    end.

% Function parallel that takes no arguments
parallel() ->
    io:format("Starting parallel process.~n"),  % Printing a message to the console
    timer:sleep(1000),  % Waiting for 1 second
    io:format("Parallel process completed.~n"),  % Printing a message to the console
    {self(), done}.  % Sending a message with the Pid of the current process and the atom done as content

% Function stop that takes a Pid as argument
stop(Pid) ->
    io:format("Stopping process with Pid ~p.~n", [Pid]),  % Printing a message with the Pid of the process to be stopped
    exit(Pid, normal).  % Exiting the process with the given Pid, ending its execution