-module(math_util).

%%% Function: compute_variance/1
%%% Description: Takes in a list of numbers and calculates their variance.
%%% Parameters:
%%%    - NumList: A list of numbers.
%%% Returns:
%%%    - Variance: The calculated variance.
%%% Example1: compute_variance([1, 2, 3]) should return 0.66666666
%%% Example2: compute_variance([]) should return 0
%%% Example3: compute_variance([1.5, 2.5, 3.5, 4.5, 5.5, 6.5]) should return 2.9166666666666665

-export([compute_variance/1]).

%%% Internal function: sum_list/1
%%% Description: Sums up all the numbers in a given list.
%%% Parameters:
%%%    - NumList: A list of numbers.
%%% Returns:
%%%    - Sum: The sum of all the numbers in the list.
%%% Example1: sum_list([1, 2, 3]) should return 6
%%% Example2: sum_list([]) should return 0

sum_list(NumList) ->
    lists:foldl(fun(X, Acc) -> X + Acc end, 0, NumList).

%%% Internal function: calculate_mean/1
%%% Description: Calculates the mean of a given list of numbers.
%%% Parameters:
%%%    - NumList: A list of numbers.
%%% Returns:
%%%    - Mean: The calculated mean.
%%% Example1: calculate_mean([1, 2, 3]) should return 2
%%% Example2: calculate_mean([]) should return 0

calculate_mean(NumList) ->
    Sum = sum_list(NumList),
    length(NumList) > 0 && Sum /= 0 ->
        Sum / length(NumList);
    true ->
        0.

%%% Function: compute_variance/1
%%% Description: Takes in a list of numbers and calculates their variance.
%%% Parameters:
%%%    - NumList: A list of numbers.
%%% Returns:
%%%    - Variance: The calculated variance.
%%% Example1: compute_variance([1, 2, 3]) should return 0.66666666
%%% Example2: compute_variance([]) should return 0
%%% Example3: compute_variance([1.5, 2.5, 3.5, 4.5, 5.5, 6.5]) should return 2.9166666666666665

compute_variance(NumList) ->
    Mean = calculate_mean(NumList),
    lists:foldl(fun(X, Acc) -> (X - Mean) * (X - Mean) + Acc end, 0, NumList) / length(NumList).