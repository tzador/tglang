-module(math_functions).

%% Imports the math module for access to mathematical functions
-import(math, [sin/1, cos/1, tan/1, exp/1]).

%% Defines a factorial function using pattern matching and recursion
factorial(0) ->
  1; %% Base case - returns 1 if input is 0
factorial(N) when N > 0 -> %% Recursive case - continues until 0 is reached
  N * factorial(N-1).

%% Defines a function that evaluates the expression sin(y) + cos(z) + exp(x)
evaluate(X, Y, Z) when is_number(X), is_number(Y), is_number(Z) ->
  sin(Y) + cos(Z) + exp(X). %% Uses imported math functions for evaluation

%% Defines a function that calculates the area of a circle with radius R
circle_area(R) when is_number(R), R >= 0 ->
  math:pi() * R * R. %% Uses the pi function from the math module

%% Defines a function that calculates the hypotenuse of a right triangle with sides A, B
hypotenuse(A, B) when is_number(A), is_number(B), A >= 0, B >= 0 ->
  math:sqrt(A*A + B*B). %% Uses the sqrt function from the math module for calculating square root

%% Defines a function that checks if a number is even using a guard statement
is_even(Num) when is_number(Num), Num rem 2 == 0 ->
  true; %% Returns true if remainder when divided by 2 is 0
is_even(_) -> false. %% Returns false for all other cases