%% Define a record named 'Employee' with fields for name, age, position and salary.
-record(Employee, {name = "", age = 0, position = "", salary = 0.0}).
 
%% Create a function to add two employees and return the sum of their salaries.
add_salaries(Employee1, Employee2) ->
    Salary1 = Employee1#Employee.salary,
    Salary2 = Employee2#Employee.salary,
    Sum = Salary1 + Salary2,
    {ok, Sum}.
 
%% Create a function to check if an employee is eligible for a promotion based on their age and position.
check_promotion(Employee) ->
    case {Employee#Employee.age, Employee#Employee.position} of
        {Age, "Manager"} when Age >= 35 -> {ok, "Promotion Granted"};
        {Age, "Staff"} when Age >= 30 -> {ok, "Promotion Granted"};
        _ -> {error, "Not Eligible for Promotion"}
    end.
    
%% Create two employees and add their salaries.
Employee1 = #Employee{name = "John Doe", age = 45, position = "Manager", salary = 100000.0}.
Employee2 = #Employee{name = "Jane Smith", age = 28, position = "Staff", salary = 50000.0}.
{ok, TotalSalary} = add_salaries(Employee1, Employee2).
 
%% Check if Employee1 is eligible for a promotion.
{ok, Promotion} = check_promotion(Employee1).
 
%% Print the total salary and promotion result.
io:format("The total salary is ~p and the promotion result is ~p.~n", [TotalSalary, Promotion]).