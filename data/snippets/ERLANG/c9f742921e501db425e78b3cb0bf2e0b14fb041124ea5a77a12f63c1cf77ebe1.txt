% This code snippet is written in the ERLANG programming language.
-module(example).                                    % Uses "-module" directive to declare module name.
-compile(export_all).                                % Uses "-compile" directive to export all functions.
                                                            
factorial(0) -> 1;                                   % Defines a recursive function with a base case.
factorial(N) when N > 0 -> N * factorial(N - 1).      % Defines recursive case.
                                                            
range(N) -> [X || X <- lists:seq(1, N)].              % Using list comprehension to generate a range from 1 to N.
  
tuple_example() ->                                   % Example function to work with tuples.
    Tuple = {name, {first, "John"}, {last, "Doe"}, {age, 25}, {id, "12345"}},    % Creates a tuple with various elements.
    io:format("Name: ~p~n",                % Uses formatting operator "~p" to print variable.
    element(2, element(1, Tuple))),                   % Uses element function to access element within tuple.
    io:format("ID: ~p~n", element(4, Tuple)).         % Prints ID element by accessing it with element function.