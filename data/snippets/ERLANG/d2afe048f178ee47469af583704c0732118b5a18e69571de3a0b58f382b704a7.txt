-module(my_module).
-compile(export_all).

%% function to calculate the factorial of a number
%% @param Number the number to calculate the factorial of
%% @return the factorial of Number
factorial(0) -> 1;
factorial(N) -> N * factorial(N-1).

%% function to check if a given number is a prime number
%% @param Number the number to check
%% @return true if number is prime, false otherwise
is_prime(Number) ->
    case Number of
        2 -> true;
        _ -> is_divisible(Number, 2)
    end.

%% helper function to check if a number is divisible by another number
%% @param Number the number to check if it is divisble
%% @param Divisor the number to check if it is a divisor
%% @return true if Number is divisible by Divisor, false otherwise
is_divisible(Number, Divisor) when Number == Divisor -> false;
is_divisible(Number, Divisor) when Number rem Divisor == 0 -> true;
is_divisible(Number, Divisor) -> is_divisible(Number, Divisor + 1).

%% function to get the nth fibonacci number
%% @param N the index of the fibonacci number to retrieve
%% @return the nth fibonacci number
fibonacci(N) ->
    case N of
        0 -> 0;
        1 -> 1;
        _ -> fibonacci(N-1) + fibonacci(N-2)
    end.

%% function to find the maximum of a list of numbers
%% @param Numbers the list of numbers to find the maximum of
%% @return the maximum number
get_maximum(Numbers) -> lists:foldl(fun(X, Acc) -> if X > Acc -> X; true -> Acc end end, hd(Numbers), tl(Numbers)).

%% example usage of the functions
io:format("~p~n", [factorial(5)]). %% output: 120
io:format("~p~n", [is_prime(17)]). %% output: true
io:format("~p~n", [fibonacci(9)]). %% output: 34
io:format("~p~n", [get_maximum([3, 7, 10, 5])]). %% output: 10