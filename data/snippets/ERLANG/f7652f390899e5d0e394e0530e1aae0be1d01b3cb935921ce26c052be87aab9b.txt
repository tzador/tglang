-module(my_module). % a module in ERLANG

-export([function/1, function/2]). % exported functions in ERLANG

%% function/1 -> takes 1 argument
function(Arg1) ->
  case Arg1 of
    true ->
      io:format("True!", []); % print "True!" if argument is true
    false ->
      io:format("False!", []) % print "False!" if argument is false
  end.

%% function/2 -> takes 2 arguments
function(Arg1, Arg2) ->
  {ok, Result} = do_something(Arg1, Arg2), % call do_something function and pattern match on result
  Result. % return result

do_something(Arg1, Arg2) ->
  %% complex operation on arguments
  Sum = Arg1 + Arg2,
  Product = Arg1 * Arg2,
  %% call helper functions
  Partial1 = helper1(Arg1, Arg2),
  Partial2 = helper2(Sum, Partial1),
  %% return result
  {ok, {Sum, Product, Partial1, Partial2}}. % pattern matched result

helper1(Arg1, Arg2) ->
  %% helper function that returns a list of integers
  Sum = Arg1 + Arg2,
  Product = Arg1 * Arg2,
  [Sum, Product].

helper2(Sum, Partial1) ->
  %% helper function that returns a string
  PartialSum = lists:nth(1, Partial1), % extract first element of the list
  PartialProduct = lists:nth(2, Partial1), % extract second element of the list
  %% pattern match on partial sum
  case PartialSum of
    0 ->
      %% if partial sum is 0, return a string stating so
      "Partial sum is 0";
    _ ->
      %% otherwise, return a string with the partial product
      "Partial product is " ++ integer_to_list(PartialProduct)
  end.