-module(my_module).
%% This is a module declaration in ERLANG. A module is a collection of related functions and data.
%% It starts with a dash followed by the module name and ends with a dot.
-export([my_function/2]).
%% This is an export declaration in ERLANG. It makes the my_function/2 function visible to other modules.
%% It starts with a dash followed by the export keyword, and then a list of functions to be exported.
my_function(Arg1, Arg2) ->
%% This is a function declaration in ERLANG. The function name is my_function and it has two arguments, Arg1 and Arg2.
%% It ends with a dot.
    if
        Arg1 > Arg2 ->
        %% This is an if statement in ERLANG. It checks if Arg1 is greater than Arg2.
        %% It starts with the if keyword and ends with an end keyword.
        io:format("Arg1 is greater than Arg2.~n", []);
        %% This is an io format statement in ERLANG. It prints a message to the console.
        %% It starts with the io keyword, followed by a colon, and then the format function.
        %% The message to be printed is between double quotes and ends with the new line escape sequence ~n.
        Arg1 < Arg2 ->
        %% This is another if statement in ERLANG. It checks if Arg1 is less than Arg2.
        %% It starts with the if keyword and ends with an end keyword.
        io:format("Arg1 is less than Arg2.~n", []);
        true ->
        %% This is the else statement of the if statement. It will be executed if none of the if conditions are true.
        %% It starts with the true atom and ends with an end keyword.
        io:format("Arg1 is equal to Arg2.~n", [])
    end.
%% This is the end of the function declaration.