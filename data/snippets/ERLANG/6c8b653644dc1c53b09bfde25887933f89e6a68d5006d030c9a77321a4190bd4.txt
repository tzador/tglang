-module(my_module).
-compile(export_all).

%% Define a function that takes in a list and a number as parameters
%% and returns the number of elements in the list that are larger than the given number.
larger_elements([], _Num) -> 0;
larger_elements([Head|Tail], Num) ->
    %% Check if the current element is larger than the given number.
    %% If true, increment the count by 1.
    if Head > Num ->
        1 + larger_elements(Tail, Num);
    %% If false, move on to the next element in the list.
    _Else ->
        larger_elements(Tail, Num)
    end.
    
%% Define a function that takes in two numbers and returns their sum.
sum(A, B) ->
    A + B.

%% Define a function that takes in two strings and concatenates them.
concat_str(String1, String2) ->
    String1 ++ String2.
    
%% Define a function that takes in a list of lists and returns a flattened list.
flatten(Lists) ->
    %% Check if the input list is empty.
    %% If true, return an empty list.
    if Lists =:= [] ->
        [];
    %% If false, concatenate the first element in the list to the flattened list of the rest of the elements.
    _Else ->
        Lists_hd = hd(Lists),
        lists:append(Lists_hd, flatten(tl(Lists)))
    end.
    
%% Define a function that takes in a binary and reverses it.
reverse_binary(Binary) ->
    %% Convert the binary to a list.
    List = binary_to_list(Binary),
    %% Use the lists:reverse function to reverse the list.
    Reversed = lists:reverse(List),
    %% Convert the reversed list back to a binary.
    list_to_binary(Reversed).