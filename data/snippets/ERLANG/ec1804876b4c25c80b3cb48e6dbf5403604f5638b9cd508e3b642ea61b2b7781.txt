%% Create an abstraction called "Module" that takes in a parameter 
-module(Module).

%% Define a public function "add" that takes in two parameters and adds them together 
%% to return the sum
-spec add(X, Y) -> integer().
add(X, Y) ->
    X + Y.

%% Define a private function "multiply" that takes in three parameters and multiplies 
%% them together to return the product
-spec multiply(A, B, C) -> integer().
multiply(A, B, C) ->
    A * B * C.

%% Create an instance of the "Module" abstraction
Module = Module:new().

%% Use the "add" function from the "Module" abstraction to add 4 and 6, and print the result
Result = Module:add(4, 6), io:format("Result of add function: ~p~n", [Result]).

%% Use the "multiply" function from the "Module" abstraction to multiply 2, 3, and 4, and print the result
Product = Module:multiply(2, 3, 4), io:format("Product of multiply function: ~p~n", [Product]).