%% This module defines functions for sorting a list of integers
-module(sorter).
%% Export the functions for external use
-export([bubble_sort/1, selection_sort/1]).
%% The bubble_sort function implements the bubble sort algorithm
%% It takes in a list of integers and returns the sorted list
%% @param List: A list of integers 
%% @return NewList: A sorted list of integers
bubble_sort(List) when is_list(List) ->
    bubble_sort(List, length(List)).
%% Recursive helper function for bubble_sort
%% @param List: A list of integers
%% @param Length: The length of the list
%% @return NewList: A sorted list of integers
bubble_sort(List, Length) when Length > 0 ->
    bubble_sort(List, Length-1, Length-1).
%% Base case for bubble_sort helper function
%% If Length = 0, return the sorted list
bubble_sort(List, 0, _) ->
    List;
%% Iterate through the list and swap adjacent elements if they are out of order
%% @param List: A list of integers
%% @param Current: Index of current element being compared
%% @param Length: Length of remaining unsorted portion of list
%% @return NewList: Sorted list after one pass through unsorted portion
bubble_sort(List, Current, Length) ->
    case Current of
        1 -> bubble_sort(List, Length, Length-1);
        _ -> if lists:nth(Current, List) < lists:nth(Current-1, List) ->
                bubble_sort(lists:sublist(List, 0, Current-2) ++ [lists:nth(Current, List)]
                    ++ [lists:nth(Current-1, List)] ++ lists:sublist(List, Current, Length), Current-1, Length);
            true ->
                bubble_sort(List, Current-1, Length)
        end
    end.
%% The selection_sort function implements the selection sort algorithm
%% It takes in a list of integers and returns the sorted list
%% @param List: A list of integers 
%% @return NewList: A sorted list of integers
selection_sort(List) when is_list(List) ->
    selection_sort(List, 1).
%% Recursive helper function for selection_sort
%% @param List: A list of integers
%% @param Current: Index of current element being compared
%% @return NewList: A sorted list of integers
selection_sort(List, Current) when Current <= length(List) ->
    %% Find smallest element in unsorted portion of list
    Smallest = lists:min(lists:sublist(List, Current, length(List))),
    %% Swap smallest element with first element in unsorted portion
    case lists:nth(Current, List) =:= Smallest of
        true ->
            selection_sort(List, Current+1);
        false ->
            NewList = lists:sublist(List, 0, Current-1) ++ [Smallest] ++ [lists:nth(Current, List)]
                ++ lists:sublist(List, Current+1, length(List)),
            %% Recursively call selection_sort on remaining unsorted portion
            selection_sort(NewList, Current+1)
    end;
%% Base case for selection_sort helper function
%% If Current exceeds list length, return the sorted list 
selection_sort(List, _) ->
    List.