%% This module implements a binary search algorithm
-module(binary_search).

%% Export the binary_search/2 function
-export([binary_search/2]).

%% binary_search/2 takes in a sorted list and a search key
%% and returns the index of the key in the list.
%% If the key is not found, returns -1.
binary_search(List, Key) ->
    %% Set the initial low and high indexes to 0 and length of list - 1 respectively
    Low = 0,
    High = length(List) - 1,
    %% Use a helper function to perform the actual binary search
    search(List, Key, Low, High).

%% Recursive helper function to perform binary search
%% Takes in the list, key, low index, and high index
search(List, Key, Low, High) when Low =< High ->
    %% Calculate the middle index of the list
    Mid = Low + (High - Low) div 2,
    case lists:nth(Mid, List) of
        %% If the middle element is equal to the key, return its index
        Key ->
            Mid;
        %% If the middle element is greater than the key, search the left half of the list
        Greater when Greater > Key ->
            search(List, Key, Low, Mid - 1);
        %% If the middle element is less than the key, search the right half of the list
        Less when Less < Key ->
            search(List, Key, Mid + 1, High)
    end;
search(_, _, _, _) ->
    %% If the key is not found, return -1
    -1.