% This is a function that checks if a given number is a prime number or not
% The function takes in one argument, which is the number to be checked

-export([prime/1]).

% The function recursively checks if the number is divisible by any number from 2 up to half of the number
prime(Num) ->
    prime(Num, 2, Num div 2).

% Base case: if the divisor is greater than the number itself, then the number is prime
prime(_, Divisor, Num) when Divisor > Num ->
    true;
% If the divisor divides the number with no remainder, then the number is not prime
prime(Num, Divisor, _) when Num rem Divisor =:= 0 ->
    false;
% If the number is not divisible by the current divisor, increment the divisor and continue recursively
prime(Num, Divisor, Max) ->
    prime(Num, Divisor + 1, Max).

% Example call:
prime(7).
% Output:
true