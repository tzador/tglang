%% This module contains functions for manipulating lists.
-module(my_lists).
-export([filter/2, map/2, foldl/3, unfold/2]).

%% Applies a filter function to the elements of a list.
%% filter(Function, List) -> Filtered_List.
filter(_, [])  -> [];
filter(F, [H | T]) -> case F(H) of 
			true -> [H | filter(F, T)];
			false -> filter(F, T)
		      end.

%% Applies a map function to the elements of a list. 
%% map(Function, List) -> Mapped_List.
map(_, []) -> [];
map(F, [H | T]) -> [F(H) | map(F, T)].

%% Applies a function to the elements of a list, starting from the left.
%% foldl(Function, Initial_Value, List) -> Value.
foldl(_, Acc, []) -> Acc;
foldl(F, Acc, [H | T]) -> foldl(F, F(Acc, H), T).

%% Generates a list by unfolding a starting value using a function.
%% unfold(Function, Value) -> List.
unfold(_, Val) -> unfold(F, Val, []).
unfold(F, Val, Acc) -> case F(Val) of
			{stop, _} -> lists:reverse(Acc);
			{Next, New_Val} -> unfold(F, New_Val, [Next | Acc])
		      end.