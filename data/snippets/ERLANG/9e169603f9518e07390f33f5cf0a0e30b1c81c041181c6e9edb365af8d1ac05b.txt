%% Module for creating and manipulating a queue data structure
-module(queue).
-export([init/0, push/2, pop/0, isEmpty/1, peek/0, size/0]).
-export([new/0, add/2, remove/1, peek_front/0, peek_back/0, is_empty/1, get_size/0]).

%% Record definition for the queue
-record(queue, {front, back, size}).

%% Function to initialize an empty queue
init() ->
    #queue{front = [], back = [], size = 0}.

%% Function to push an element onto the back of the queue
push(Queue, Item) ->
    #queue{front = Queue#queue.front, back = [Item | Queue#queue.back], size = Queue#queue.size + 1}.

%% Function to remove and return the front element of the queue
pop() ->
    case queue:isEmpty(Queue) of
        true ->
            {empty_queue, Queue};
        _ ->
            Front = Queue#queue.front,
            {Front, Queue#queue{front = tl(Front), size = Queue#queue.size - 1}}
    end.

%% Function to check if the queue is empty
isEmpty(Queue) ->
    Queue#queue.size == 0.

%% Function to return the front element of the queue
peek() ->
    case queue:isEmpty(Queue) of
        true ->
            {empty_queue, Queue};
        _ ->
            Front = Queue#queue.front,
            {Front, Queue}
    end.

%% Function to return the size of the queue
size() ->
    Queue#queue.size.

%% Function to create a new empty queue
new() ->
    #queue{front = [], back = [], size = 0}.

%% Function to add an element to the back of the queue
add(Queue, Item) ->
    #queue{front = Queue#queue.front, back = [Item | Queue#queue.back], size = Queue#queue.size + 1}.

%% Function to remove and return the front element of the queue
remove(Queue) ->
    case queue:is_empty(Queue) of
        true ->
            {empty_queue, Queue};
        _ ->
            Front = Queue#queue.front,
            {Front, Queue#queue{front = tl(Front), size = Queue#queue.size - 1}}
    end.

%% Function to return the front element of the queue
peek_front() ->
    case queue:is_empty(Queue) of
        true ->
            {empty_queue, Queue};
        _ ->
            Front = Queue#queue.front,
            {Front, Queue}
    end.

%% Function to return the back element of the queue
peek_back() ->
    case queue:is_empty(Queue) of
        true ->
            {empty_queue, Queue};
        _ ->
            Back = Queue#queue.back,
            {Back, Queue}
    end.

%% Function to check if the queue is empty
is_empty(Queue) ->
    Queue#queue.size == 0.

%% Function to return the size of the queue
get_size() ->
    Queue#queue.size.