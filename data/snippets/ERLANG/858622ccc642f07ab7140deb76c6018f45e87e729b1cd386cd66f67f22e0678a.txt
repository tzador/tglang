% Define a module called "sorting"
-module(sorting).

% Export the functions "bubble_sort" and "merge_sort"
-export([bubble_sort/1, merge_sort/1]).

% Define the bubble_sort function
bubble_sort(List) ->
    % Call the private function "bubble_sort/2" to perform the actual sorting
    bubble_sort(List, length(List)).

% Define the merge_sort function
merge_sort(List) ->
    % Base case: If list has only one element, return the list
    (length(List) == 1) andalso (return List);

    % If list has more than one element, split it in the middle and call merge_sort recursively
    {Left, Right} = split(List),
    SortedLeft = merge_sort(Left),
    SortedRight = merge_sort(Right),

    % Call the private function "merge/2" to merge the sorted lists
    merge(SortedLeft, SortedRight).

% Private function for bubble sorting
% Takes in a list and the length of the list
bubble_sort(List, Len) when Len > 0 ->
    % Iterate through the list and compare adjacent elements
    % If the left element is larger than the right, swap them
    % Continue until the end of the list is reached
    bubble_sort(swap(List), Len - 1);
% If the end of the list is reached, return the list
bubble_sort(List, _) ->
    List.

% Private function for merging two sorted lists
merge([], Right) -> Right;
merge(Left, []) -> Left;
merge([LH|LT], [RH|RT]) ->
    % Compare the first elements of each list and append the smaller one to the result list
    % Continue until both lists are empty
    if
        LH =< RH ->
            [LH | merge(LT, [RH|RT])];
        true ->
            [RH | merge([LH|LT], RT)]
    end.

% Private function for splitting a list in half
% Uses Erlang's built-in list comprehension
split(List) ->
    % Calculate the midpoint of the list
    Mid = length(List) div 2,
    % Return two lists - one from the beginning to the midpoint and one from the 
    % midpoint to the end of the list
    [[X || X <- lists:seq(1, Mid)] | [Y || Y <- lists:seq(Mid+1, length(List))]].