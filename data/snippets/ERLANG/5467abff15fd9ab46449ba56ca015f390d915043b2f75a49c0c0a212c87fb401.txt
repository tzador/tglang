-module(math_ops).
%% This module contains functions for mathematical operations.

-export([add/2, subtract/2, multiply/2, divide/2]).
%% Specifies the functions to be exported from the module.

%% Function for adding two numbers.
add(A, B) ->
    A + B.

%% Function for subtracting two numbers.
subtract(A, B) ->
    A - B.

%% Function for multiplying two numbers.
multiply(A, B) ->
    A * B.

%% Function for dividing two numbers.
divide(A, B) when B =/= 0 ->
    A / B.

%% Function for handling division by zero error.
divide(_A, _B) when B =:= 0 ->
    {error, "Division by zero not allowed."}.
  
%% Function for calculating the factorial of a number using recursion.
factorial(0) -> 1;
factorial(N) when N > 0 ->
    N * factorial(N-1).
  
%% Function for calculating the nth term in the Fibonacci sequence using tail recursion.
fib(N) ->
    fib(N, 0, 1).
fib(0, A, _) ->
    A;
fib(1, _, B) ->
    B;
fib(N, A, B) ->
    fib(N-1, B, (A+B)).

%% Function for calculating the nth term in the Fibonacci sequence using iteration.
fib_iter(N) ->
    fib_iter(N-1, 0, 1, 0, 1).
fib_iter(1, A, B, _, _) ->
    B;
fib_iter(N, A, B, C, D) ->
    fib_iter(N-1, B, (C+D), D, (C+D)).

%% Function for calculating the nth term in the Fibonacci sequence using dynamic programming.
fib_mem(N) ->
    fib_mem(N, [0, 1]).
fib_mem(N, [A, B]) when N == 0 ->
    A;
fib_mem(N, [A, B]) when N == 1 ->
    B;
fib_mem(N, [A, B]) ->
    fib_mem(N-1, [B, (A+B)]).

%% Function for finding the nth prime number using the Sieve of Eratosthenes algorithm.
sieve(N) ->
    sieve(2, [], N).
sieve(N, Primes, Max) when N =< Max ->
    sieve(N+1, [N|Primes], Max);
sieve(_N, Primes, Max) ->
    lists:reverse(Primes).

%% Function for calculating the nth term in the Catalan number sequence using dynamic programming.
catalan_mem(N) ->
    catalan_mem(N, [1]).
catalan_mem(1, [A]) ->
    A;
catalan_mem(N, [A]) ->
    catalan_mem(N, [A|catalan_mem_helper(N-1, [A], 1)]).
catalan_mem_helper(0, _List, _I) ->
    [];
catalan_mem_helper(N, List, I) ->
    [catalan_helper(I+1, List)|catalan_mem_helper(N-1, List, I+1)].
catalan_helper(I, List) ->
    sum_prod_list_part(lists:sublist(List, 1, I), lists:reverse(lists:nthtail(I, List))).
sum_prod_list_part([A],[B]) -> A+B;
sum_prod_list_part([A | As], [B | Bs]) ->
    (A * B) + sum_prod_list_part(As, Bs).