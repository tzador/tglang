%% This is a function that takes in a list of numbers and returns the sum of all even numbers in the list
%% It uses recursion and pattern matching to extract even numbers from the list
%% and recursively call the function with the remaining list until the list is empty
 %% and the sum is returned
    -module(even_sum).
    -export([sum_even/1]).
    
    %% Function takes in a list of numbers
    sum_even(List) ->
        %% Use pattern matching to check if list is empty
        sum_even_helper(List, 0).
    
    %% Function to recursively extract even numbers and add them to the sum
    sum_even_helper([], Sum) ->
        Sum; %% Once list is empty, return the sum
    sum_even_helper([Head|Tail], Sum) ->
        %% Use pattern matching to check if head of list is an even number
        case Head rem 2 of
            0 -> sum_even_helper(Tail, Sum + Head); %% If even, add to sum and recursively call function with tail of list
            _ -> sum_even_helper(Tail, Sum) %% If not even, recursively call function with tail of list and same sum
        end.
    
%% Example call to function
even_sum:sum_even([1,2,3,4,5,6]). %% Output: 12 (2 + 4 + 6)