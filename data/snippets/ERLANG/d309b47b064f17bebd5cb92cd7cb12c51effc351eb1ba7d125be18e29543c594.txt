%% Define a module in Erlang
-module(math).

%% Export the functions in the module
-export([add/2, multiply/2]).

%% Add a function to the module
add(A, B) ->
    %% Pattern match on the input values
    %% and perform addition
    A + B.

%% Add another function to the module
multiply(X, Y) ->
    %% Pattern match on the input values
    %% and perform multiplication
    X * Y.

%%%%%%%%%%%%%%

%% Create a process and start it
spawn(fun() ->
    %% Get input from the user
    io:format("Enter a number: "),
    %% Read the input and convert it to an integer
    Number = io:fread("Enter a number: ", "~d"),
    %% Call the add function from our module
    Sum = add(Number, 10),
    %% Print the sum to the console
    io:format("Sum is ~p", [Sum])
end).

%%%%%%%%%%%%%%

%% Receive a message and perform some calculations
receive
    %% Pattern match on the message
    {add, A, B} ->
        %% Call the add function from our module
        Result = add(A, B),
        %% Send the result as a message back to the sender
        sender ! {result, Result};
    {multiply, X, Y} ->
        %% Call the multiply function from our module
        Result = multiply(X, Y),
        %% Send the result as a message back to the sender
        sender ! {result, Result}
end.