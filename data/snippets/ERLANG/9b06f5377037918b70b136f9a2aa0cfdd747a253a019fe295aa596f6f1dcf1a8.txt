-module(example). %% Defines the module name
-export([merge_sort/1]). %% Exports the function merge_sort with 1 argument

merge_sort(List) ->
    case List of
        [] -> []; %% Empty list case
        [Head] -> [Head]; %% Single item list case
        _ -> %% All other cases
            {Left, Right} = split(List), %% Split the list in two halves
            merge(merge_sort(Left), merge_sort(Right)) %% Recursively call merge_sort on both halves and then merge them
    end.

split(List) ->
    {First_half, Second_half} = split(List, List, []), %% Using an accumulator in the helper function
    {lists:reverse(First_half), Second_half}. %% Reverses the first half so that it is in the correct order

split(First_half, [Head | Second_half], Acc) ->
    split(First_half, Second_half, [Head | Acc]);
split(First_half, [], Acc) ->
    {First_half, Acc}. %% Returns the two halves of the list

merge([], Second_half) ->
    Second_half;
merge(First_half, []) ->
    First_half;
merge([Head1 | First_half], [Head2 | Second_half]) ->
    case Head1 < Head2 of %% Compare the first items of each list
        true -> [Head1 | merge(First_half, [Head2 | Second_half])]; %% If Head1 is smaller, add it to the merged list and continue with the rest
        false -> [Head2 | merge([Head1 | First_half], Second_half)] %% If Head2 is smaller, add it to the merged list and continue with the rest
    end.