%% This is a module in Erlang
-module(my_module).

%% Imports from the standard library
-include_lib("stdlib/include/qlc.hrl").

%% Exported functions
-export([
    filter_and_sort/2,
    print_tuple/1,
    start/0
]).

%% Internal functions
-compile(export_all).
-define(TUPLE_SIZE, 3). %% A constant macro for the size of our tuples

%% Public functions
%% This function takes in a list of tuples and a filter function
%% and returns a new list of filtered tuples, sorted by the second element of the tuples.
-spec filter_and_sort(List :: [tuple()], Func :: fun((tuple()) -> boolean())) -> [tuple()].
filter_and_sort(List, Func) ->
    NewList = lists:filter(Func, List),  %% Filter the list using the given filter function
    SortedList = lists:sort(fun(A, B) -> element(2, A) < element(2, B) end, NewList),  %% Sort the filtered list by the second element of the tuples
    SortedList.

%% This function takes in a tuple and prints it out in a human-readable format
-spec print_tuple(Tuple :: tuple()) -> ok.
print_tuple(Tuple) ->
    io:format("~p~n", [Tuple]). %% Print out the tuple using the ~p format specifier

%% This is the entry point of our module
%% It just calls the start/1 function with an empty list as input
start() ->
    start([]).

%% Private functions
%% This function takes in a list of tuples and recursively prints out each tuple
start(List) ->
    case List of
        [] -> ok;
        [H|T] ->
            print_tuple(H), %% Print out the current tuple
            start(T) %% Call the function recursively with the remaining list
    end.