-module(example).
-behaviour(gen_server).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3]).

-define(SERVER, ?MODULE). % Defining a macro.

%% Client API
-export([start_link/0, get_info/0, set_info/1]).

-record(state, {info = undefined}). % Defining a record to store state.

%% Client API functions

%%% start_link()
%
% starts the server and returns {ok, Pid} 
-spec start_link() -> {ok, pid()}.
start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

%%% get_info()
%
% Get the value of the state variable info
-spec get_info() -> Term.
get_info() ->
    gen_server:call(?SERVER, get_info).

%%% set_info(Value)
%
% Set the value of the state variable info 
-spec set_info(Term) -> ok.
set_info(Value) ->
    gen_server:call(?SERVER, {set_info, Value}).

%% gen_server callbacks
%
tours
%%% init(Args) -> {ok, State}
%
% Initialize the server
-spec init([Args]) -> {ok, State}.
init(_) ->
    io:format("Initializing server.~n", []),
    {ok, #state{info = undefined}}.

%%% handle_call(Request, Client, State) -> {reply, Reply, State} | {noreply, State} | {stop, Reason, State}
%
% Handle synchronous client requests
-spec handle_call(call, {pid(), Tag}, State) -> {reply, reply, State} | {noreply, State} | {stop, Reason, State}.
handle_call(get_info, _From, State) ->
    io:format("Getting info from state.~n", []),
    {reply, State#state.info, State};
handle_call({set_info, Value}, _From, State) ->
    io:format("Setting info in state.~n", []),
    {reply, ok, State#state{info = Value}};
handle_call(_Request, _From, State) ->
    io:format("Invalid request received.~n", []),
    {stop, unknown_request, State}. % Return stop with an error reason.

%%% handle_cast(Request, State) -> {noreply, State} | {stop, Reason, State}
%
% Handle asynchronous client requests
-spec handle_cast(Request, State) -> {noreply, State} | {stop, Reason, State}.
handle_cast({set_info, Value}, State) ->
    io:format("Setting info in state.~n", []),
    {noreply, State#state{info = Value}};
handle_cast(_Request, State) ->
    io:format("Invalid request received.~n", []),
    {stop, unknown_request, State}. % Return stop with an error reason.

%%% handle_info(Info, State) -> {noreply, State} | {stop, Reason, State}
%
% Handle non-client related messages
-spec handle_info(info, State) -> {noreply, State}.
handle_info(_Info, State) ->
    {noreply, State}.

%%% terminate(Reason, State) -> void()
%
% Terminate the server
-spec terminate(reason, State) -> void().
terminate(_Reason, _State) ->
    io:format("Terminating server.~n", []).

%%% code_change(PreviousVsn, State, Extra) -> {ok, State}
%
% Code change handler
-spec code_change(vsn, State, Extra) -> {ok, State}.
code_change(_PreviousVsn, State, _Extra) ->
    {ok, State}.