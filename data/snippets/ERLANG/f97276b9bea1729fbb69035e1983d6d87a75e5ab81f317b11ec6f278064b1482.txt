%% Erlang modules: to handle rondom numbers
-module(rand). %%creating a module named rand
-export([random/0]). %%As `Erlang` is a functional programming language
random() ->
    S = now(), %%calling the function now() to get current time
    {_, A, B} = S, %%destructuring the tuple returned by now() function
    R = B rem 123 + 1, %%calculate a random value
    A2 = xor(A, A), %%call to the `xor` function with the same values
    B2 = xor(B, B), %%to produce a different random number every time
    P = {A2, B2},
    P2 = xor(P, S),
    {_, _, C} = P2,
    C2 = xor(B, C),
    {_, _, D} = P2, %%calling the `xor` function again for more complexity
    D2 = xor(A, D),
    random_float() %%call to the function that converts the random number
                   %%into a random float between 0 and 1
    (R, D2, C2). %%returning the random float along with the random numbers for future use
    
random_float(R, D2, C2) ->
    X = R * (1024*1024),
    Y = ((1.0*1024*1024) / X) + (log(X,10)/log(9.0,10)), %%calling the `log` function
    Z = pow(R, Y), %%calling the `pow` function to raise R to the power of Y
    A = D2 div 96578,
    B = C2 rem 257951,
    C = (sqrt(log(R)+log(Z))),
    S = (A/B) + (C/(R+B-C)), %%calculating the final random float
    S.