%% A module that implements a binary search tree data structure

-module(binary_search_tree).

%% Exports the functions `insert/2` and `search/2` so they can be used by other modules
-export([insert/2, search/2]).

%% Declares a record for the tree nodes, containing the key and left/right subtrees
-record(node, {key, left, right}).

%% Defines the insert function which inserts a key into the tree
%% If the tree is empty, create a new node with the key as the root
%% If the key is less than the root, insert it into the left subtree
%% If the key is greater than the root, insert it into the right subtree
%% If the key is equal to the root, do not insert it as it already exists
insert(Key, empty) ->
    #node{key = Key, left = empty, right = empty};
insert(Key, #node{key = Key, left = Left, right = Right}) ->
    #node{key = Key, left = Left, right = Right};
insert(Key, #node{key = Root, left = Left, right = Right}) when Key < Root ->
    #node{key = Root, left = insert(Key, Left), right = Right};
insert(Key, #node{key = Root, left = Left, right = Right}) when Key > Root ->
    #node{key = Root, left = Left, right = insert(Key, Right)}.

%% Defines the search function which searches for a key in the tree
%% If the tree is empty, the key is not found
%% If the key is equal to the root, return the root
%% If the key is less than the root, search in the left subtree
%% If the key is greater than the root, search in the right subtree
%% If the key is not found after searching in both subtrees, it does not exist in the tree
search(Key, empty) ->
    not_found;
search(Key, #node{key = Key, left = _Left, right = _Right}) ->
    {ok, Key};
search(Key, #node{key = Root, left = Left, right = Right}) when Key < Root ->
    search(Key, Left);
search(Key, #node{key = Root, left = Left, right = Right}) when Key > Root ->
    search(Key, Right).