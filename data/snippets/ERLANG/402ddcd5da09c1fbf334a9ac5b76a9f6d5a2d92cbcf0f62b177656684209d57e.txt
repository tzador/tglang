%% Define a function that calculates the factorial of a given number
factorial(N) when N > 0 ->
    N * factorial(N-1);
factorial(0) ->
    1.

%% Define a function that searches for a specific element in a list and returns its position
search(List, Element) ->
    search(List, Element, 0).

search([], _, _) ->
    not_found;
search([H|_], H, Index) ->
    Index + 1;
search([_|T], Element, Index) ->
    search(T, Element, Index + 1).

%% Define a recursive function that checks if a given number is a prime number
is_prime(N) when N =< 1 ->
    false;
is_prime(2) ->
    true;
is_prime(3) ->
    true;
is_prime(N) when N rem 2 =:= 0 ->
    false;
is_prime(N) when N rem 3 =:= 0 ->
    false;
is_prime(N) ->
    is_prime(N, 5).

is_prime(N, Counter) ->
    if
        Counter * Counter > N ->
            true;
        N rem Counter =:= 0 ->
            false;
        true ->
            is_prime(N, Counter + 2)
    end.