%% This module implements an AVL tree

-module(avl_tree).

%% Public API

-export([new/0, insert/2, delete/2, search/2, print/1]).

%% Data structure representing an AVL tree

-record(avl_tree, {root=nil}).

%% Function: new()
%% Description: Creates a new, empty AVL tree
%% Returns: An empty AVL tree
%% Example: T = avl_tree:new().

new() ->
    #avl_tree{root=nil}.

%% Function: insert/2
%% Description: Inserts a new element into the AVL tree
%% Params:
%%     Elem: The element to be inserted
%%     Tree: The AVL tree to insert into
%% Returns: A new AVL tree with the inserted element
%% Example: T = avl_tree:insert(10, T).

insert(Elem, #avl_tree{root=nil}) ->
    % If tree is empty, create new root
    #avl_tree{root=#avl_node{value=Elem}};
insert(Elem, Tree) ->
    % Insert element into tree recursively
    Tree#avl_tree{root=insert_element(Elem, Tree#avl_tree.root)}.

%% Helper function for insert/2
%% Inserts a new element into the AVL tree recursively
insert_element(Elem, nil) ->
    #avl_node{value=Elem, left=nil, right=nil, height=1};
insert_element(Elem, Node=#avl_node{value=Val, left=L, right=R, height=H}) ->
    case Elem > Val of
        true ->
            % Insert into right subtree
            #avl_node{value=Val, left=L, right=insert_element(Elem, R), height=H+1};
        false ->
            % Insert into left subtree
            #avl_node{value=Val, left=insert_element(Elem, L), right=R, height=H+1}
    end.

%% Function: delete/2
%% Description: Deletes an element from the AVL tree
%% Params:
%%     Elem: The element to be deleted
%%     Tree: The AVL tree to delete from
%% Returns: A new AVL tree with the element deleted
%% Example: T = avl_tree:delete(10, T).

delete(Elem, #avl_tree{root=nil}) ->
    % If tree is empty, return empty tree
    #avl_tree{root=nil};
delete(Elem, Tree=#avl_tree{root=Node}) ->
    % Delete element from tree recursively
    Tree#avl_tree{root=delete_element(Elem, Node)}.

%% Helper function for delete/2
%% Deletes an element from the AVL tree recursively
delete_element(Elem, nil) ->
    nil;
delete_element(Elem, Node=#avl_node{value=Val, left=L, right=R, height=H}) ->
    case Elem > Val of
        true ->
            % Delete from right subtree
            #avl_node{value=Val, left=L, right=delete_element(Elem, R), height=H-1};
        false ->
            % Delete from left subtree
            #avl_node{value=Val, left=delete_element(Elem, L), right=R, height=H-1}
    end.

%% Function: search/2
%% Description: Searches for an element in the AVL tree
%% Params:
%%     Elem: The element to be searched for
%%     Tree: The AVL tree to search in
%% Returns: true if element is found, false if not
%% Example: Result = avl_tree:search(10, T).

search(Elem, #avl_tree{root=nil}) ->
    % If tree is empty, element is not found
    false;
search(Elem, #avl_tree{root=Node}) ->
    % Search for element recursively
    search_element(Elem, Node).

%% Helper function for search/2
%% Searches for an element in the AVL tree recursively
search_element(Elem, nil) ->
    false;
search_element(Elem, #avl_node{value=Elem, left=nil, right=nil}) ->
    % Element is found
    true;
search_element(Elem, #avl_node{value=Val, left=L, right=R}) ->
    % Search in left and right subtrees
    search_element(Elem, L) orelse search_element(Elem, R).

%% Function: print/1
%% Description: Prints out the elements in pre-order traversal
%% Params:
%%     Tree: The AVL tree to print
%% Returns: none
%% Example: avl_tree:print(T).

print(#avl_tree{root=nil}) ->
    % If tree is empty, nothing to print
    ok;
print(#avl_tree{root=Node}) ->
    % Print elements recursively in pre-order traversal
    print_element(Node),
    print(Node#avl_node.left),
    print(Node#avl_node.right).

%% Helper function for print/1
%% Prints out an element in pre-order traversal
print_element(nil) ->
    ok;
print_element(#avl_node{value=Val}) ->
    io:format("~p ", [Val]).