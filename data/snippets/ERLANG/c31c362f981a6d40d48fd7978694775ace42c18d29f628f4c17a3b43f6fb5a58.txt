%% This code snippet generates a list of prime numbers up to a given limit
-module(prime_numbers).
-export([get_primes/1, is_prime/1]).

%% Function for generating a list of prime numbers up to a given limit
%% Input: Limit (integer)
%% Output: List of prime numbers (list)
get_primes(Limit) ->
    [X || X <- lists:seq(2, Limit), is_prime(X)].

%% Helper function to check if a number is prime
%% Input: Number (integer)
%% Output: Boolean
is_prime(2) -> true;
is_prime(3) -> true;
is_prime(N) when N rem 2 =:= 0 -> false;
is_prime(N) when N rem 3 =:= 0 -> false;
is_prime(N) ->
    is_prime(N, 5).

%% Recursive function to check if a number is prime
%% Input: Number (integer), Divisor (integer)
%% Output: Boolean
is_prime(Current, Divisor) when Current rem Divisor =:= 0 -> false;
is_prime(Current, Divisor) when Divisor * Divisor > Current -> true;
is_prime(Current, Divisor) ->
    is_prime(Current, Divisor + 2).

%% Example usage:
%% prime_numbers:get_primes(20).
%% Returns: [2, 3, 5, 7, 11, 13, 17, 19]