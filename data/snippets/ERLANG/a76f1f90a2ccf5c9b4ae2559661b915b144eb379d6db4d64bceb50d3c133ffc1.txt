%% This is a comment in ERLANG

-module(ex_sample).

%% Defines a factorial function that takes an integer as a parameter
%% and returns the factorial of that number
%% A recursive implementation using pattern matching
%% Pattern matching is used to match different input values and execute different blocks of code

fact(N) when N < 0 -> %% A guard used to check for negative input values
  error;
fact(0) -> %% Base case
  1;
fact(N) -> %% Recursive case
  N * fact(N - 1).  %% Calls itself with a smaller input value until it reaches the base case

%% Defines a function to calculate the Fibonacci sequence up to a given number
%% Uses pattern matching and a list comprehension
%% A list comprehension allows us to create a list with specific elements based on a pattern or condition

fib(N) when N < 0 -> %% A guard used to check for negative input values
  error;
fib(N) -> %% Recursive case
  [1, 1 | [fib(X) + fib(X - 1) || X <- lists:seq(3, N)]].

%% Defines a function to reverse a list using recursion
%% Uses pattern matching and tail recursion
%% Tail recursion eliminates the need for stack memory by using an accumulator

reverse([]) -> %% Base case
  [];
reverse([Head | Tail]) -> %% Recursive case
  reverse(Tail, [Head]).

%% Tail recursion using an accumulator
reverse([], Acc) -> %% Base case
  Acc;
reverse([Head | Tail], Acc) -> %% Recursive case
  reverse(Tail, [Head | Acc]).

%% Defines a function to check if a list is a palindrome
%% A palindrome is a list that reads the same forwards and backwards

is_palindrome(List) ->
  List =:= lists:reverse(List). %% Uses the built-in list:reverse function

%% Defines a function to calculate the nth number in the Fibonacci sequence using dynamic programming
%% Dynamic programming is an efficient problem-solving technique that stores previously calculated results
%% to avoid redundant calculations

fib_dp(N) when N < 0 -> %% A guard used to check for negative input values
  error;
fib_dp(N) -> %% Recursive case
  fib_dp(N, [0, 1]).

%% Helper function that uses dynamic programming to calculate the nth number in the Fibonacci sequence
%% Stores previously calculated results in a list for efficient retrieval

fib_dp(N, DP) when length(DP) =:= N + 1 -> %% Checks if the result has already been calculated
  lists:last(DP); %% Retrieves the result from the list
fib_dp(N, DP) -> %% Recursive case
  fib_dp(N, [lists:last(DP), lists:last(DP) + lists:nth(N, DP) | DP]). %% Calculates and adds the next result to the list