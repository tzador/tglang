-module(sorting). % This is a module declaration

-export([bubble_sort/1, merge_sort/1]). % This declares which functions can be accessed from outside the module

%% BUBBLE SORT %%
bubble_sort(List) when is_list(List) ->
    bubble_sort(List, length(List)).
 
bubble_sort([], _) ->
    []; % Base case 
bubble_sort(List, N) when is_integer(N), N =< 1 ->
    List; % Base case
bubble_sort(List, N) when is_integer(N)->
    bubble(List, bubble_sort(List, N-1)).
 
bubble([A, B|T], Acc) when A > B ->
    bubble([A|T], [B|Acc]);
 
bubble([A | T], Acc) ->
    bubble(T, [A|Acc]);
 
bubble([], Acc) ->
    reverse(Acc).

%% MERGE SORT %%
merge_sort(List) when is_list(List) ->
    merge_sort(List, length(List)).

merge_sort([X]) ->
    [X];
merge_sort(List) ->
    {L, R} = split(List, length(List) div 2),
    merge(merge_sort(L), merge_sort(R)).
    
split(List, N) ->
    split(List, N, []).
    
split(List, 0, Acc) ->
    {reverse(Acc), List}; % Returns a tuple of the reversed accumulator and the remaining list
split([H|T], N, Acc) ->
    split(T, N-1, [H|Acc]).
    
merge(L, []) ->
    L;
merge([], R) ->
    R;
merge([L|LS], [R|RS]) when L =< R ->
    [L|merge(LS, [R|RS])];
merge([L|LS], [R|RS]) when L > R ->
    [R|merge([L|LS], RS]).