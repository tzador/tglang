-module(my_module). %% Defines a module in Erlang, equivalent to a class in other languages.
-export([my_func/1, my_func/2]). %% Exported functions that can be called from outside the module.

my_func(Data) -> %% Defines a function named my_func with one argument, Data.
    NewData = [Elem*2 || Elem <- Data], %% List comprehension to double the value of each element in Data.
    lists:reverse(NewData). %% Uses the built-in reverse function from the lists module to reverse the order of elements in NewData.

my_func(Num1, Num2) when Num2 > 0 -> %% Defines a second my_func function with two arguments and a guard to ensure the second argument is greater than 0.
    total = Num1 + Num2. %% Assigns the sum of the two arguments to total.
my_func(Num1, Num2) when Num2 < 0 -> %% Defines another my_func function with the same arguments but a different guard.
    total = Num1 - Num2. %% Assigns the difference of the two arguments to total.