-module(concurrent).

-export([start/0]).

% Function for starting the concurrent program
start() ->
    {ok, Pid1} = spawn(concurrent, worker, ["Worker1"]),
    {ok, Pid2} = spawn(concurrent, worker, ["Worker2"]),
    {ok, Pid3} = spawn(concurrent, worker, ["Worker3"]),
    receive
        {Pid1, Message} -> 
            io:format("Received message ~p from ~p~n", [Message, Pid1]);
        {Pid2, Message} -> 
            io:format("Received message ~p from ~p~n", [Message, Pid2]);
        {Pid3, Message} -> 
            io:format("Received message ~p from ~p~n", [Message, Pid3])
    end.

% Function for defining behavior of a worker process
worker(Name) ->
    % Setup timer to send a message to self after 5 seconds
    timer:send_after(5000, self(), "Hello, I am "~Name),
    % Receive the message and send it to the start process
    receive
        Message ->
            {self(), Message}
    end.