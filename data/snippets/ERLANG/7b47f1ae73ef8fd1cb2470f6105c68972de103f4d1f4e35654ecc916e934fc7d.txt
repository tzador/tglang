%% Module that implements a simple queue data structure
-module(queue).

%% Exported functions
-export([new/0, enqueue/2, dequeue/1, size/1]).

%% Internal queue representation
-record(queue, {f = [], r = []}).

%% Create a new queue
new() ->
	#queue{}.

%% Add an element to the back of the queue
%% @param Queue the original queue
%% @param X the element to add
%% @return a new queue with the element at the back
enqueue(Queue, X) ->
	#queue{f = F, r = R} = Queue,
	#queue{f = F, r = [X|R]}.

%% Remove the element at the front of the queue
%% @param Queue the original queue
%% @return a tuple containing the removed element and the new queue
dequeue(Queue) ->
	#queue{f = F, r = [X|R]} = Queue,
	{X, #queue{f = F, r = R}}.

%% Get the current size of the queue
%% @param Queue the queue
%% @return the number of elements in the queue
size(Queue) ->
	length(Queue#queue.f) + length(Queue#queue.r).