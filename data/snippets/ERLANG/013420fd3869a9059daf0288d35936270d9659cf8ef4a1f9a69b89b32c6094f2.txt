-module(my_module).
%%% This is a module that defines a function for sorting lists using quicksort algorithm.
-export([quicksort/1]).

%%% This function implements the quicksort algorithm.
quicksort(List) ->

%%% This section checks if the list is empty or has only one element, and returns the list as it is.
    case List of
        [] -> [];
        [X] -> [X];
        
%%% If the list has more than one elements, the following code is executed.
    _ ->
        %%% The first element of the list is chosen as the pivot.
        Pivot = hd(List),
        
        %%% The list is divided into two sublists: one with elements smaller than the pivot, and one with elements larger than the pivot.
        {Smaller, Larger} = partition(Pivot, tl(List)),
        
        %%% The function is recursively called on the smaller sublist and the larger sublist.
        SortedSmaller = quicksort(Smaller),
        SortedLarger = quicksort(Larger),
        
        %%% The two sorted sublists are concatenated with the pivot in between to form the final sorted list.
        SortedSmaller ++ [Pivot] ++ SortedLarger
    end.

%%% This function partitions the given list into two sublists based on the given pivot.
partition(Pivot, List) ->
    
    %%% The list is partitioned into two sublists: one with elements smaller than the pivot and one with elements larger than the pivot.
    Smaller = [X || X<-List, X < Pivot],
    Larger = [X || X<-List, X >= Pivot],
    
    %%% The two sublists are returned as a tuple.
    {Smaller, Larger}.
    
%%% Example usage of the quicksort function.
Sorted = quicksort([5, 2, 8, 3, 6, 1]),
%% Output: [1, 2, 3, 5, 6, 8]
  
%%% This function checks if the given list is sorted in ascending order.
is_sorted(List) ->
    
    %%% The list is checked if it is empty or has only one element, and returns true.
    case List of
        [] -> true;
        [_] -> true;
        
    %%% If the list has more than one element, the following code is executed.
        [Head|Tail] ->
            
            %%% The function recursively checks if the tail of the list is sorted and if the first element is smaller than the second.
            is_sorted(Tail) andalso Head =< hd(Tail)
    end.