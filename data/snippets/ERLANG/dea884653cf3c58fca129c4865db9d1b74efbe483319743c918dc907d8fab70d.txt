-module(example). % Declares a module named 'example'

-export([factorial/1]). % Export the function 'factorial' with 1 argument

%% Tail-recursive function 'factorial' 
%% that calculates the factorial of a number
factorial(N) when N > 0 ->
    factorial(N, 1); % Calls the helper function 'factorial' with the accumulator set to 1

%% Helper function 'factorial' with 2 arguments, 
%% calculates the factorial of the number and keeps track of the accumulator
factorial(0, Acc) ->
    Acc; % The base case, returns the accumulator
factorial(N, Acc) ->
    factorial(N-1, N*Acc). % Recursive call, multiplies the current number by the accumulator and decreases the number by 1

%% Example function call
factorial(5). % Returns the factorial of 5, which is 120