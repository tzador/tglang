%% Function to calculate the nth Fibonacci number
%% Parameters:
%% n: the position of the Fibonacci number
%% Returns:
%% The nth Fibonacci number
fibonacci(1) ->
    1;
fibonacci(2) ->
    1;
fibonacci(n) ->
    fibonacci(n-1) + fibonacci(n-2).

%% Function to calculate the factorial of a number
%% Parameters:
%% n: the number to calculate the factorial of
%% Returns:
%% The factorial of n
factorial(N) ->
    if
        %% Base case, factorial of 0 is 1
        N == 0 ->
            1;
        %% Recursive case, factorial of N is N multiplied by factorial of N-1
        N > 0 ->
            N * factorial(N-1);
        %% Catch clause to handle negative numbers
        true ->
            error("Cannot calculate factorial of negative number")
    end.

%% Function to check if a number is prime
%% Parameters:
%% n: the number to check
%% i: the current divisor, initially set to 2
%% Returns:
%% true if n is prime, false if n is divisible by any number between 2 and n-1
is_prime(N) ->
    is_prime(N, 2).

%% Recursive helper function for is_prime
is_prime(N, I) ->
    %% Base case, if I is equal to N, N is prime
    if
        I == N -> true;
        %% If N is divisible by I, N is not prime
        N rem I == 0 -> false;
        %% If N is not divisible by I, recursively check if N is divisible by next divisor
        true -> is_prime(N, I+1)
    end.