-module(my_module). %% creates a module in Erlang

-export([function/1]). %% exports the function so it can be used outside the module

%% function/1 takes in one argument and returns an integer
function(X) ->
	case X of % performs pattern matching on X
		1 -> 2; % if X is equal to 1, return 2
		2 -> 4; % if X is equal to 2, return 4
		_ -> 0 % for any other value of X, return 0
	end.

%% function/2 takes in two arguments and returns a list
function(X, Y) ->
	case X > Y of % performs a comparison between X and Y
		true -> [Y, X]; % if X is greater than Y, return a list with Y followed by X
		false -> [X, Y] % if X is not greater than Y, return a list with X followed by Y
	end.

main() ->
	A = function(3), % calls function/1 with the argument 3 and assigns the return value to A
	B = function(3, 5), % calls function/2 with the arguments 3 and 5 and assigns the return value to B 
	io:format("A = ~w~n", [A]), % prints the value of A using the io module's format function
	io:format("B = ~w~n", [B]). % prints the value of B using the io module's format function