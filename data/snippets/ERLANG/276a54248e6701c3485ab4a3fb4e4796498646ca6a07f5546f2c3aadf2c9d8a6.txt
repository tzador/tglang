%%% module name is stack.

-module(stack).          %%% defines a module in Erlang.

-export([init/1, push/2, pop/1, peek/1]).

%%% initialise a stack with an empty list.
init(Size) ->
  empty = lists:seq(1,Size),    %%% creates a list of integers from 1 to the given size.
  {ok, empty}.       %%% returns a tuple with ok as the first element and the initialized stack as the second element.

%%% push element onto the stack.
%%% first parameter is element to be pushed, second is the stack.
%%% list:append function is used to add element to end of list.
push(Element, Stack) ->
  [Element | Stack].

%%% pop element off the stack.
pop(Stack) ->
  case Stack of
    [] -> {error, empty_stack};       %%% return an error if the stack is empty.
    [Head | Tail] -> Head             %%% return the first element and remove it from the stack.
  end.

%%% peek at the top element of the stack without removing it.
peek(Stack) ->
  case Stack of
    [] -> {error, empty_stack};       %%% return an error if the stack is empty.
    [Head | _] -> Head                %%% return the first element without removing it.
  end.