%% This module implements a graph data structure in Erlang.
-module(graph).

%% Exported functions.
-export([init/0, add_vertex/1, add_edge/3, adjacent/2, bfs/2]).

%% Private data and functions.
-export([depth_first_search/3]).

%% Record representing a vertex in the graph.
-record(vertex, {value, edges=[]}).

%% Record representing an edge in the graph.
-record(edge, {source, destination, weight=0}).

%% Initializes an empty graph.
init() -> [].

%% Adds a vertex to the graph.
%% @param Value The value to be stored in the vertex.
add_vertex(Value) -> [{value=Value, edges=[]}].

%% Adds an edge between two vertices in the graph.
%% @param Source The source vertex.
%% @param Destination The destination vertex.
%% @param Weight The weight of the edge (optional).
add_edge(Source, Destination, Weight) ->
    Edges = proplists:get_value(edges, Source),
    NewEdge = #edge{source=Source, destination=Destination, weight=Weight},
    NewEdges = lists:append(Edges, [NewEdge]),
    proplists:put(edges, Source, NewEdges).

%% Checks if two vertices are adjacent in the graph.
%% @param Vertex1 The first vertex.
%% @param Vertex2 The second vertex.
adjacent(Vertex1, Vertex2) ->
    case proplists:is_defined(Vertex2, proplists:get_value(edges, Vertex1)) of
        true -> true;
        false -> false
    end.

%% Breadth-first search traversal of the graph.
%% @param StartVertex The starting vertex for the traversal.
%% @param Graph The graph to be traversed.
bfs(StartVertex, Graph) ->
    Visited = [],
    Queue = [StartVertex],
    bfs(Visited, Queue, Graph).


%% Helper function for bfs.
%% @hidden
bfs(Visited, [], Graph) -> Visited;
bfs(Visited, [Current|Rest], Graph) ->
    case lists:member(Current, Visited) of
        true -> bfs(Visited, Rest, Graph);
        false ->
            NextVertices = [Edge#edge.destination || Edge <- proplists:get_value(edges, Current)],
            UpdatedQueue = lists:foldl(fun lists:append/2, Rest, [NextVertices]),
            bfs([Current|Visited], UpdatedQueue, Graph)
    end.

%% Depth-first search traversal of the graph.
%% @param StartVertex The starting vertex for the traversal.
%% @param Graph The graph to be traversed.
depth_first_search(StartVertex, Graph) -> dfs(StartVertex, [], Graph).
%% Helper function for dfs.
%% @hidden
dfs(Current, Visited, Graph) ->
    case lists:member(Current, Visited) of
        true -> Visited;
        false ->
            NextVertices = [Edge#edge.destination || Edge <- proplists:get_value(edges, Current)],
            lists:foldl(fun dfs/2, [Current|Visited], NextVertices)
    end.