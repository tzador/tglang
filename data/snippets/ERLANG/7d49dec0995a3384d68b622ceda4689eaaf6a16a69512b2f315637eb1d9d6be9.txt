-module(my_module). %%Defines a module named 'my_module' in Erlang
-export([my_function/0]). %%Exports a function named 'my_function' for external use 
-import(lists, [reverse/1]). %%Imports the built-in 'reverse' function from the 'lists' module

%%This is a function that recursively calculates the factorial of a given number
my_function() ->
  io:format("Please enter a number:"), %%Outputs a message asking the user to enter a number
  Number = io:get_line(), %%Gets input from the user and stores it in a variable called 'Number'
  case string:to_integer(Number) of %%Converts the input to an integer and matches it in a case statement
    {ok, N} when N >= 0 -> %%If the input is a positive integer, continue with the calculation
      io:format("Factorial of ~p is ~p~n", [N, fact(N)]);
    _ -> %%If the input is not a positive integer, print an error message
      io:format("Invalid input. Please enter a positive integer.~n")
  end.

%%This is a helper function that calculates the factorial
fact(0) -> 1; %%Base case: the factorial of 0 is 1
fact(N) -> N * fact(N - 1). %%Recursive call to calculate the factorial

%%Example of calling the function from the Erlang shell:
%%my_module:my_function().
%%Please enter a number:
%%3
%%Factorial of 3 is 6