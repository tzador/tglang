%% Define an Erlang record for a customer
-record(customer, {
  id :: integer(),
  name :: string(),
  address :: string(),
  age :: integer(),
  purchases :: list(atom())
}).

%% Function to add a purchase to a customer record
%% @spec add_purchase(integer(), atom(), customer()) -> customer()
add_purchase(Id, Purchase, Record) -> 
    Record#customer{purchases = [Purchase|Record#customer.purchases], 
    age = Record#customer.age + 1}.

%% Function to print all customer records with a given age
%% @spec print_customers_with_age(integer(), list(customer())) -> ok
print_customers_with_age(Age, []) ->
    ok;
print_customers_with_age(Age, [Record|Records]) ->
    if Record#customer.age == Age ->
        io:format("Customer ~p has age ~p~n", [Record#customer.name, Age]),
        print_customers_with_age(Age, Records);
    true ->
        print_customers_with_age(Age, Records)
    end.

%% Test code to use the functions
Customer1 = #customer{id = 1, name = "John Doe", address = "123 Main Street", age = 25, purchases = []}.
Customer2 = #customer{id = 2, name = "Jane Smith", address = "456 Park Avenue", age = 30, purchases = [books, clothing]}.

%% Add a purchase for Customer1
Customer1Updated = add_purchase(1, electronics, Customer1).

%% Print all customers with age 30
print_customers_with_age(30, [Customer1Updated, Customer2]).