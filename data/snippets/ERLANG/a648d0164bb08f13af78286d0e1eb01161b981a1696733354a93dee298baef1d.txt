%% Function to generate Fibonacci sequence for a given number of terms
fib(Terms) ->
    %% Initialize accumulator for previous two numbers in sequence
    Acc = [0, 1],
    %% Call recursive helper function to generate sequence
    fib_helper(Terms, Acc).

%% Recursive helper function to generate Fibonacci sequence
%% Takes a number of terms and an accumulator list as arguments
fib_helper(0, Acc) ->
    %% Return the accumulator list as the final sequence
    Acc;
fib_helper(Terms, Acc) ->
    %% Get the last two numbers in the accumulator list
    {X, Y} = lists:last(Acc),
    %% Add them together to get the next number in the sequence
    Z = X + Y,
    %% Add the new number to the accumulator list
    New_Acc = lists:append(Acc, [Z]),
    %% Decrement the number of terms by 1
    New_Terms = Terms - 1,
    %% Recursive call with updated terms and accumulator lists
    fib_helper(New_Terms, New_Acc).
    
%% Example usage:
%% Generate Fibonacci sequence with 10 terms
fib(10).

%% Output:
%% [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]