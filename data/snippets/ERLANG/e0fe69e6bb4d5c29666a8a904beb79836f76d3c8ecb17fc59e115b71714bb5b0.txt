%% This is a multi-line comment in Erlang
-module(shapes).
%% Defining a record to represent a point in 2-dimensional space
-record(point, {x, y}).
%% Defining a record to represent a circle
-record(circle, {center = #point{}, radius}).

%% Function to calculate the area of a circle given its radius
area(#circle{radius = Radius}) ->
    math:pi() * Radius * Radius.

%% Function to move a point by given coordinates
%% Acc is an accumulator variable used to hold the updated point
%% dx and dy represent the amount to move in the x and y directions
translate_point(#point{x = X, y = Y}, Dx, Dy, Acc = #point{x = NewX, y = NewY}) ->
    #point{x = X + Dx, y = Y + Dy}.

%% Function to create a new circle given a center point and radius
create_circle(Center, Radius) ->
    #circle{center = Center, radius = Radius}.

%% Testing the functions
Point = #point{x = 2, y = 3}.
Translated = translate_point(Point, 1, 2). %% Translated = #point{x = 3, y = 5}.
Circle = create_circle(Translated, 5). %% Circle = #circle{center = #point{x = 3, y = 5}, radius = 5}.

%% Outputting the area of the circle
io:format("The area of the circle with radius ~p is ~p", [Circle#circle.radius, area(Circle)]).