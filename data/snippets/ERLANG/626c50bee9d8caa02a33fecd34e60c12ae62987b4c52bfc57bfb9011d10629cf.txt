%% Annotated markdown code snippet
-module(math_functions). % creating a new module called "math_functions" 
-compile(export_all).   % exporting all functions defined in the module
 
%% function for calculating the factorial of a number 
%% takes in a single argument, the number to find factorial of 
factorial(0) ->         % factorial of 0 is 1 
    1;
factorial(N) when N > 0 -> % factorial of a number N is N multiplied by factorial of N-1 
    N * factorial(N-1).
    
%% function for calculating the fibonacci series up to a given number 
%% takes in a single argument, the maximum number in the series 
fibonacci(Max) ->       % initializing variables 
    fib(0, 1, Max).     
fib(A, B, Max) ->   
    case A + B > Max of  
        true ->
            lists:seq(1, B);  % returns the series as a list 
        false ->
            [A + B | fib(B, A + B, Max)]  % recursively adds the next number to the list 
    end.
    
%% function for calculating the sum of all odd numbers in a list 
%% takes in a single argument, the list of numbers 
sum_odd(List) ->
    lists:foldl(fun(X,Acc) -> 
                    case X rem 2 of 
                        1 -> X + Acc;
                        0 -> Acc 
                    end 
                end, 0, List).
                
%% function for finding the mode (most frequent element) in a list 
%% takes in a single argument, the list of elements 
mode(List) ->
    MaxCount = 0,   % initializing variables 
    Mode = 0,
    [lists:foreach(fun(X) ->                                            % loop through the elements in the list 
        Count = lists:count(fun(Y) -> Y =:= X end, List),              % count the number of occurrences
        case Count > MaxCount of                                      % if current count is greater than max count
            true ->                                                   
                Mode = X,                                             % set the current element as mode
                MaxCount = Count                                      % update max count
        end 
    end,lists:usort(List)), Mode].                                     % sort list and return mode in a tuple