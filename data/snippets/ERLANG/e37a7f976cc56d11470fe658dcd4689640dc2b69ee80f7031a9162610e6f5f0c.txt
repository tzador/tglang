%%% Annotated Code Snippet %%%

-module(my_module). % Starts a new ERLANG module named "my_module"
% This line is just a comment

%% Function Definitions %%
add(X, Y) -> % Defines the "add" function with two parameters, X and Y
    Result = X + Y, % Calculates the sum of X and Y
    {ok, Result}. % Returns a tuple with the atom "ok" and the calculated result

multiply(X, Y) -> % Defines the "multiply" function with two parameters, X and Y
    case X of % Starts a case statement with X as the condition
        0 -> % If X is equal to 0
            0; % Return 0
        _ -> % For all other cases
            Y + multiply(X-1, Y) % Recursively calls multiply function with X-1 and Y as parameters and adds Y to the result
    end. % Ends the case statement

%% Pattern Matching %%
func(X) when X > 10 -> % Defines the "func" function with one parameter, X, and a guard condition where X has to be greater than 10
    even(X); % Calls the "even" function
func(X) when X < 10 -> % Defines the "func" function with one parameter, X, and a guard condition where X has to be less than 10
    odd(X). % Calls the "odd" function
func(_) -> % Defines the "func" function with any single parameter, denoted by the underscore character
    invalid_parameter. % Returns the atom "invalid_parameter"

%% Recursion %%
fibonacci(0) -> 0; % Defines the "fibonacci" function with one parameter, n, and sets the base case for n=0
fibonacci(1) -> 1; % Sets the base case for n=1
fibonacci(N) when N > 1 -> 
    fibonacci(N-1) + fibonacci(N-2). % Calculates the n-th number in the Fibonacci sequence using recursion

%% Higher Order Functions %%
add_list(List) -> % Defines the "add_list" function with one parameter, List
    lists:sum(List). % Calls the "sum" function from the standard library "lists" module to calculate the sum of the elements in the list and return it

map_add(List) -> % Defines the "map_add" function with one parameter, List
    lists:map(fun(X) -> add(X, 5) end, List). % Uses the "map" function from the standard library "lists" module to apply the "add" function to each element in the list and add 5 to it, returning a new list with the modified elements

%% Concurrency %%
spawn(add(X, Y)). % Spawns a new process to execute the "add" function with the given parameters 
% This line runs concurrently with the rest of the code

%%% End of annotated code snippet %%%