-module(game).
-export([start/0, turn/2]).

%%%% Design %%%% 
% This module implements a simple guessing game in Erlang.
% The game is played between two players, a guesser and a referee,
% where the referee chooses a random number and the guesser tries to
% guess it within a given number of attempts.

%%%% Interface %%%%
% The `start/0` function is used to start the game.
% It takes no arguments and returns a tuple with the chosen number and the maximum number of attempts.

% The `turn/2` function is used to make a guess.
% It takes two arguments, the current guess and the chosen number, and returns a tuple
% with the result of the guess and the updated number of attempts.

%%% Implementation %%%
% Utilizes the built-in `random` module to generate a random number.
% Uses recursion to keep track of the number of attempts and handle incorrect guesses.

%%% Function Definitions %%%
start() ->
    Number = random:uniform(10), % generate a random number between 1 and 10
    Attempts = 5, % set maximum number of attempts
    {Number, Attempts}. % return a tuple with the chosen number and number of attempts

turn(Guess, Number) ->
    case Guess =:= Number of
        true ->
            {correct, 0}; % return correct result and 0 remaining attempts
        false ->
            Attempts = Attempts - 1, % decrease number of attempts
            case Attempts =:= 0 of
                true ->
                    {incorrect, 0}; % return incorrect result and 0 remaining attempts
                false ->
                    {incorrect, Attempts} % return incorrect result and updated number of attempts
            end
    end.