-module(custom_sort). % Creating a module in ERLANG
-export([merge/2, mergeSort/1]). % Exporting two functions, merge and mergeSort

%% merge Function: merges two lists in ascending order
merge(List1, List2) ->
    merge(List1, List2, []). % Calling the merge function with an empty list as accumulator

merge([], List2, Acc) -> % Base Case: if list1 is empty, return the second list
    lists:reverse(acc) ++ List2;
merge(List1, [], Acc) -> % Base Case: if list2 is empty, return the first list
    lists:reverse(Acc) ++ List1;
merge([H1|T1], [H2|T2], Acc) when H1 < H2 -> % If first element of list1 is less than first element of list2
    merge(T1, [H2|T2], [H1|Acc]);
merge([H1|T1], [H2|T2], Acc) when H2 < H1 -> % If first element of list2 is less than first element of list1
    merge([H1|T1], T2, [H2|Acc]);
merge([H1|T1], [H2|T2], Acc) when H1 == H2 -> % If both first elements are equal
    merge(T1, T2, [H1|Acc]).

%% mergeSort Function: Performs merge sort on a list
mergeSort(List) -> 
    case List of
        [] -> List; % If the list is empty, return the empty list
        [X] -> List; % If the list has one element, return the list
        _ -> % Otherwise, split the list in half and recursively mergeSort both halves
            Mid = length(List) div 2,
            {Left, Right} = lists:split(Mid, List),
            merge(mergeSort(Left), mergeSort(Right))
    end.