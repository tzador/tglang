%% This module creates a dictionary and performs various operations on it

-module(dictionary).
%% Exported functions
-export([new/0,insert/3,find/2,key_exists/2,update/3,delete/2,size/1,map/2,filter/3,any/2,all/2,count/2]).

%% Function: new()
%% Description: Creates an empty dictionary
%% Returns: The empty dictionary
new() -> dict:new().

%% Function: insert(Key, Value, Dictionary)
%% Description: Inserts a key-value pair into the dictionary
%% Parameters:
%%      Key - The key to be inserted
%%      Value - The value to be inserted
%%      Dictionary - The dictionary to insert the pair in
%% Returns: The updated dictionary
insert(Key, Value, Dictionary) ->
    dict:store(Key, Value, Dictionary).

%% Function: find(Key, Dictionary)
%% Description: Finds the value associated with the given key
%% Parameters:
%%      Key - The key to be searched for
%%      Dictionary - The dictionary to search in
%% Returns: The value associated with the key, or undefined if key does not exist
find(Key, Dictionary) ->
    dict:find(Key, Dictionary).

%% Function: key_exists(Key, Dictionary)
%% Description: Checks if the given key exists in the dictionary
%% Parameters:
%%      Key - The key to be checked
%%      Dictionary - The dictionary to check in
%% Returns: True if key exists, false otherwise
key_exists(Key, Dictionary) ->
    case dict:is_key(Key, Dictionary) of
        true -> true;
        false -> false
    end.

%% Function: update(Key, Value, Dictionary)
%% Description: Updates the value associated with the given key
%% Parameters:
%%      Key - The key to be updated
%%      Value - The new value for the key
%%      Dictionary - The dictionary to update in
%% Returns: The updated dictionary
update(Key, Value, Dictionary) ->
    dict:replace(Key, Value, Dictionary).

%% Function: delete(Key, Dictionary)
%% Description: Deletes the given key-value pair from the dictionary
%% Parameters:
%%      Key - The key to be deleted
%%      Dictionary - The dictionary to delete from
%% Returns: The updated dictionary
delete(Key, Dictionary) ->
    dict:erase(Key, Dictionary).

%% Function: size(Dictionary)
%% Description: Gets the size of the dictionary
%% Parameters:
%%      Dictionary - The dictionary to get size of
%% Returns: The size of the dictionary
size(Dictionary) ->
    dict:size(Dictionary).

%% Function: map(Function, Dictionary)
%% Description: Maps a function on all key-value pairs in the dictionary
%% Parameters:
%%      Function - The function to be mapped
%%      Dictionary - The dictionary to be mapped on
%% Returns: The updated dictionary
map(Function, Dictionary) ->
    dict:map(fun(K, V) -> {K, Function(V)} end, Dictionary).

%% Function: filter(Predicate, Dictionary)
%% Description: Filters the dictionary based on a predicate function
%% Parameters:
%%      Predicate - The predicate function to be applied
%%      Dictionary - The dictionary to be filtered
%% Returns: The filtered dictionary
filter(Predicate, Dictionary) ->
    dict:filter(fun(K, V) -> Predicate(V) end, Dictionary).

%% Function: any(Function, Dictionary)
%% Description: Checks if any key-value pair in the dictionary satisfies the given function
%% Parameters:
%%      Function - The function to be checked on all key-value pairs
%%      Dictionary - The dictionary to be checked
%% Returns: True if any key-value pair satisfies the function, false otherwise
any(Function, Dictionary) ->
    case dict:any(Function, Dictionary) of
        true -> true;
        false -> false
    end.

%% Function: all(Function, Dictionary)
%% Description: Checks if all key-value pairs in the dictionary satisfy the given function
%% Parameters:
%%      Function - The function to be checked on all key-value pairs
%%      Dictionary - The dictionary to be checked
%% Returns: True if all key-value pairs satisfy the function, false otherwise
all(Function, Dictionary) ->
    case dict:all(Function, Dictionary) of
        true -> true;
        false -> false
    end.

%% Function: count(Function, Dictionary)
%% Description: Counts the number of key-value pairs in the dictionary that satisfy the given function
%% Parameters:
%%      Function - The function to be checked on all key-value pairs
%%      Dictionary - The dictionary to be checked
%% Returns: The number of key-value pairs that satisfy the function
count(Function, Dictionary) ->
    dict:fold(fun(_K, V, Count) -> if Function(V) -> Count + 1; true -> Count end end, 0, Dictionary).