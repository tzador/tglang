-module(example).
-export([count/2,
    top/1,
    get/2,
    set/3]).

-record(item, {
    name="", 
    count=0,
    price=0.00
}).

%% This function counts the total number of items in a list of records
%% It takes in a list of item records and returns the total count as an integer
count(Items, Total) ->
    TotalAcc = 0,
    lists:foldl(fun(Item, Acc) ->
        TotalAcc = TotalAcc + Item#item.count,
        Acc
    end, TotalAcc, Items).

%% This function returns the item record with the highest count
%% It takes in a list of item records and returns the item record with the highest count
top(Items) ->
    topCount = 0,
    topItem = null,
    lists:foreach(fun(Item) ->
        %% Check if current item count is higher than current top count
        if Item#item.count > topCount ->
            topCount = Item#item.count,
            topItem = Item;
        true ->
            ok
        end
    end, Items),
    topItem.

%% This function gets the count of a specific item in a list of item records
%% It takes in an item name and a list of item records and returns the count as an integer
get(ItemName, Items) ->
    lists:foldl(fun(Item, Acc) ->
        %% Check if current item name matches requested item name
        if Item#item.name =:= ItemName ->
            Acc = Item#item.count
        else ->
            Acc
        end
    end, 0, Items).

%% This function sets the count of a specific item in a list of item records
%% It takes in an item name, a new count, and a list of item records
%% It returns the updated list with the count for the specified item changed
set(ItemName, NewCount, Items) ->
    lists:map(fun(Item) ->
        %% Check if current item name matches requested item name
        if Item#item.name =:= ItemName ->
            %% Create a new item record with the updated count
            #item{name=Item#item.name, count=NewCount, price=Item#item.price}
        else ->
            Item
        end
    end, Items).