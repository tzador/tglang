%% This module implements a recursive factorial function in Erlang, taking a positive integer as input and returning its factorial using tail recursion

-module(factorial).
-export([factorial/1]).


%% In the function declaration, 'n' is the input integer and 'Acc' is an accumulator used in tail recursion
%% We start with the base case of 0, which returns 1 as the factorial
factorial(0, Acc) ->
    Acc;

%% In the recursive case, we decrement n and multiply it with the accumulator, passing the new value as the accumulator in the next recursive call
factorial(N, Acc) ->
    factorial(N-1, N*Acc).


%% In the factorial function, we start with N and an initial accumulator value of 1
%% This ensures that the accumulator is multiplied with all values from N to 1, giving us the factorial value
factorial(N) ->
    factorial(N, 1).


%% Example usage:
%% factorial:factorial(5).
%% Output: 120 (as 5! = 5*4*3*2*1 = 120)