-module(dictionary).
-behavior(gen_server).

-export([start_link/0, init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3, get_value/1, string_to_binary/1, binary_to_string/1]).

% The dictionary module creates a key-value storage using the built-in gen_server behavior.

start_link() ->
  gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

%= `start_link` creates a new instance of the `gen_server` with `dictionary` as the process name and initializes it with an empty list using `init`.

init([]) ->
  {ok, []}.

%= `init` sets the initial state of the gen_server to an empty list and returns a tuple with `ok` status and the initial state.

handle_call({get_value, Key}, _From, State) ->
  {reply, dict:find(Key, State), State}.

%= `handle_call` handles the call message of `{get_value, Key}` by using the `dict` module's `find` function to return the value associated with the given key in the current state.

handle_cast({add_value, Key, Value}, State) ->
  NewState = dict:store(Key, Value, State),
  {noreply, NewState}.

%= `handle_cast` handles the cast message of `{add_value, Key, Value}` by using the `dict` module's `store` function to add the new key-value pair to the current state and returning the updated state without sending a reply.

handle_info(_Info, State) ->
  {noreply, State}.

%= `handle_info` handles all other messages by simply returning the current state without sending a reply.

terminate(_Reason, _State) ->
  ok.

%= `terminate` is called when the gen_server is shutting down and has no additional actions to perform.

code_change(_OldVsn, State, _Extra) ->
  {ok, State}.

%= `code_change` is called when the code is changed while the gen_server is running and simply returns the current state without making any changes.

get_value(Key) ->
  gen_server:call(?MODULE, {get_value, Key}).

%= `get_value` is a helper function that calls the gen_server with the `get_value` message for the given key and returns the associated value.

string_to_binary(Str) ->
  list_to_binary(Str).

%= `string_to_binary` converts a string to a binary by using the built-in `list_to_binary` function.

binary_to_string(Bin) ->
  binary_to_list(Bin).

%= `binary_to_string` converts a binary to a string by using the built-in `binary_to_list` function.