% This module represents a basic binary search tree implementation in Erlang.

-module(binary_search_tree).

-export([init/0,insert/2,delete/2,lookup/2,size/1,contains/2]).

-init() ->
    empty.

insert(Value, empty) ->
    {node, Value, empty, empty};
insert(Value, {node, NodeVal, Left, Right}) when Value < NodeVal ->
    {node, NodeVal, insert(Value, Left), Right};
insert(Value, {node, NodeVal, Left, Right}) when Value > NodeVal ->
    {node, NodeVal, Left, insert(Value, Right)};
insert(_, Tree) ->
    Tree.

delete(Value, {node, Value, empty, Right}) ->
    Right;
delete(Value, {node, Value, Left, empty}) ->
    Left;
delete(Value, {node, Value, Left, Right}) ->
    case Left of
        empty ->
            Right;
        _ ->
            {node, LMax, LRest, _} = remove_max(Left),
            {node, LMax, LRest, Right}
    end;
delete(Value, {node, NodeVal, Left, Right}) when Value < NodeVal ->
    {node, NodeVal, delete(Value, Left), Right};
delete(Value, {node, NodeVal, Left, Right}) when Value > NodeVal ->
    {node, NodeVal, Left, delete(Value, Right)};
delete(_, Tree) ->
    Tree.

remove_max({node, V, empty, _}) ->
    {V, empty};
remove_max({node, V, empty, R = {node, _, _, _}}) ->
    {V, R};
remove_max({node, V, L={node, _, _, _}, R}) ->
    {Max, LR} = remove_max(L),
    {Max, {node, V, LR, R}}.

lookup(_, empty) ->
    not_found;
lookup(Value, {node, Value, _, _}) ->
    found;
lookup(Value, {node, NodeVal, Left, Right}) when Value < NodeVal ->
    lookup(Value, Left);
lookup(Value, {node, NodeVal, Left, Right}) when Value > NodeVal ->
    lookup(Value, Right).

size(empty) ->
    0;
size({node, _, Left, Right}) ->
    1 + size(Left) + size(Right).

contains(_, empty) ->
    false;
contains(Value, {node, Value, _, _}) ->
    true;
contains(Value, {node, NodeVal, Left, Right}) when Value < NodeVal ->
    contains(Value, Left);
contains(Value, {node, NodeVal, Left, Right}) when Value > NodeVal ->
    contains(Value, Right).