-module(tictactoe_game).

-export([start/0, play/1]).

% start() function initializes the game and prints instructions

start() ->
    io:format("Welcome to Tic-Tac-Toe game!~n"),
    io:format("To make your move, enter a number from 1 to 9 where you want to place your mark.~n"),
    io:format("Let's begin!~n"),
    play(["-", "-", "-", "-", "-", "-", "-", "-", "-"]).

% play(Board) function takes in the current state of the board and starts the game

play(Board) ->
    print_board(Board),
    case game_over(Board) of
        % if game_over() returns 'true', then the game is over and prints the result
        true  -> io:format("Game end! Result: ~p~n", [get_result(Board)]);
        % if game_over() returns 'false', then the game continues and prompts the next move
        false -> io:format("Next move: ~n"),
                 Player = read_player(),
                 move(Board, Player)
    end.
    
% print_board(Board) function prints the current state of the board

print_board([A, B, C, D, E, F, G, H, I]) ->
    io:format("~p ~p ~p ~n", [A, B, C]),
    io:format("~p ~p ~p ~n", [D, E, F]),
    io:format("~p ~p ~p ~n", [G, H, I]).

% game_over(Board) function checks if the game is over by checking for a win or a draw

game_over([A, B, C, D, E, F, G, H, I]) ->
    % check for horizontal lines
    case A == B andalso B == C andalso A /= "-" of
        true -> true;
        false ->
        case D == E andalso E == F andalso D /= "-" of
            true -> true;
            false ->
            case G == H andalso H == I andalso G /= "-" of
                true -> true;
                false ->
                % check for vertical lines
                case A == D andalso D == G andalso A /= "-" of
                    true -> true;
                    false ->
                    case B == E andalso E == H andalso B /= "-" of
                        true -> true;
                        false ->
                        case C == F andalso F == I andalso C /= "-" of
                            true -> true;
                            false ->
                            % check for diagonal lines
                            case A == E andalso E == I andalso A /= "-" of
                                true -> true;
                                false ->
                                case C == E andalso E == G andalso C /= "-" of
                                    true -> true;
                                    false -> check_draw(Board)
                                end
                        end
                end
        end
    end.

% check_draw(Board) function checks if the game is a draw by looking for any empty spaces

check_draw([A, B, C, D, E, F, G, H, I]) ->
    case A /= "-" andalso B /= "-" andalso C /= "-" andalso
        D /= "-" andalso E /= "-" andalso F /= "-" andalso
        G /= "-" andalso H /= "-" andalso I /= "-" of
        true -> true;
        false -> false
    end.

% move(Board, Player) function takes in the current state of the board and the player's move, updates the board and calls play() again

move(Board, Player) ->
    case Player < 1 orelse Player > 9 of
        true -> io:format("Invalid input!%n"),
                play(Board);
        false -> case make_move(Board, Player) of
                     % if make_move() returns 'false', then the position is already taken by a player
                     false -> io:format("Position already taken!%n"),
                              play(Board);
                     % if make_move() returns 'true', then the move is valid and the game continues
                     true  -> play(Board)
                 end
     end.

% read_player() function reads the input from the user and converts it to an integer

read_player() ->
    io:fread("Enter a number from 1 to 9:~n", "~d").

% make_move(Board, Player) function takes in the current state of the board and the player's move, checks if the position is empty and updates the board accordingly

make_move([A, B, C, D, E, F, G, H, I], Player) ->
    case Player of
        1 ->
            case A == "-" of
                true -> [Player, B, C, D, E, F, G, H, I];
                false -> false
            end;
        2 ->
            case B == "-" of
                true -> [A, Player, C, D, E, F, G, H, I];
                false -> false
            end;
        3 ->
            case C == "-" of
                true -> [A, B, Player, D, E, F, G, H, I];
                false -> false
            end;
        4 ->
            case D == "-" of
                true -> [A, B, C, Player, E, F, G, H, I];
                false -> false
            end;
        5 ->
            case E == "-" of
                true -> [A, B, C, D, Player, F, G, H, I];
                false -> false
            end;
        6 ->
            case F == "-" of
                true -> [A, B, C, D, E, Player, G, H, I];
                false -> false
            end;
        7 ->
            case G == "-" of
                true -> [A, B, C, D, E, F, Player, H, I];
                false -> false
            end;
        8 ->
            case H == "-" of
                true -> [A, B, C, D, E, F, G, Player, I];
                false -> false
            end;
        9 ->
            case I == "-" of
                true -> [A, B, C, D, E, F, G, H, Player];
                false -> false
            end
    end.

% get_result(Board) function checks who won the game or if it's a draw and returns the result

get_result([A, B, C, D, E, F, G, H, I]) ->
    case A == B andalso B == C of
        true ->
            case A == "X" of
                true -> "Player 1 (X) wins!";
                false -> "Player 2 (O) wins!"
            end;
        false ->
            case D == E andalso E == F of
                true ->
                    case D == "X" of
                        true -> "Player 1 (X) wins!";
                        false -> "Player 2 (O) wins!"
                    end;
                false ->
                    case G == H andalso H == I of
                        true ->
                            case G == "X" of
                                true -> "Player 1 (X) wins!";
                                false -> "Player 2 (O) wins!"
                            end;
                        false ->
                            case A == D andalso D == G of
                                true ->
                                    case A == "X" of
                                        true -> "Player 1 (X) wins!";
                                        false -> "Player 2 (O) wins!"
                                    end;
                                false ->
                                    case B == E andalso E == H of
                                        true ->
                                            case B == "X" of
                                                true -> "Player 1 (X) wins!";
                                                false -> "Player 2 (O) wins!"
                                            end;
                                        false ->
                                            case C == F andalso F == I of
                                                true ->
                                                    case C == "X" of
                                                        true -> "Player 1 (X) wins!";
                                                        false -> "Player 2 (O) wins!"
                                                    end;
                                                false ->
                                                    case A == E andalso E == I of
                                                        true ->
                                                            case A == "X" of
                                                                true -> "Player 1 (X) wins!";
                                                                false -> "Player 2 (O) wins!"
                                                            end;
                                                        false ->
                                                            case C == E andalso E == G of
                                                                true ->
                                                                    case C == "X" of
                                                                        true -> "Player 1 (X) wins!";
                                                                        false -> "Player 2 (O) wins!"
                                                                    end;
                                                                false ->
                                                                    "It's a draw!"
                                                            end
                                            end
                                    end
                            end
                    end
            end
    end.