-module(bubble_sort). % defining a module named bubble_sort
-export([bubble_sort/1]). % exporting the bubble_sort function with 1 parameter

bubble_sort(List) ->
    bubble_sort(List, length(List)). % calling the bubble_sort function with 2 parameters (List and the length of the List)

bubble_sort([], _N) -> % defining the base case when the List is empty
    []; % return an empty List

bubble_sort(_List, 0) -> % defining the base case when the length of List is 0
    _List; % return the original List

bubble_sort(List, N) when N =:= length(List) ->
    sorted_list = lists:foldl(fun(X, Sorted) -> % creating a new variable sorted_list and using foldl function to iterate through the List
        bubble(X, Sorted)
    end, [], List), % calling the bubble function for each element in List and passing in the sorted_list as the accumulator

    if
        List =:= sorted_list -> % if the sorted_list is equal to the original List, then it is already sorted
            List;
        true ->
            bubble_sort(sorted_list, N - 1) % recursively calling bubble_sort function with the updated sorted_list and N-1 as parameters
    end.

bubble(X, [Y | Tail]) when X > Y ->
    [Y | bubble(X, Tail)]; % if X is greater than Y, then X should be placed after Y in the sorted list

bubble(X, [Y | Tail]) when X < Y ->
    [X, Y | Tail]; % if X is less than Y, then X should be placed before Y in the sorted list

bubble(X, []) -> % defining the base case when there are no more elements in the List
    [X]. % return X as a single element in the List