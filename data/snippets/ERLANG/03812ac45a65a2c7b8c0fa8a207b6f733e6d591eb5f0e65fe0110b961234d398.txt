-module(example).
-record(person, {name, age, occupation}).

%% Function to format a person's information
-spec format_person(#person{}) -> string().
format_person(#person{name=Name, age=Age, occupation=Occupation}) ->
    "Name: " ++ Name ++ ", Age: " ++ Age ++ ", Occupation: " ++ Occupation ++ ".".

%% Function to find the average age of a list of people
%% Argument: list of #person{} records
-spec find_average_age([#person{}]) -> integer() | float().
find_average_age([]) -> 0;
find_average_age([#person{age=Age} | T]) ->
    Sum = Age + find_average_age(T),
    Average = Sum / length(T),
    Average.

%% Function to filter a list of people based on occupation
%% Arguments: list of #person{} records, occupation
-spec find_occupation_people([#person{}], atom()) -> [#person{}].
find_occupation_people([]) -> [];
find_occupation_people([#person{occupation=Occupation} | T], Occupation) ->
    [#person{name=Name, age=Age, occupation=Occupation} | find_occupation_people(T, Occupation)].

%% Example usage:
People = [ #person{name="John", age=25, occupation=engineer},
          #person{name="Jane", age=30, occupation=doctor},
          #person{name="Jake", age=40, occupation=lawyer},
          #person{name="Jill", age=35, occupation=engineer} ].

%% Format the information of all people
Formatted = lists:map(fun format_person/1, People).

%% Find the average age of all people
AverageAge = find_average_age(People).

%% Find all people who are engineers
Engineers = find_occupation_people(People, engineer).

%% Output:
Formatted.
% ["Name: John, Age: 25, Occupation: engineer.",
%  "Name: Jane, Age: 30, Occupation: doctor.",
%  "Name: Jake, Age: 40, Occupation: lawyer.",
%  "Name: Jill, Age: 35, Occupation: engineer."]
AverageAge.
% 32.5
Engineers.
% [#person{name="John", age=25, occupation=engineer},
%  #person{name="Jill", age=35, occupation=engineer}]