%%% Module Example
-module(example).

%%% API Functions
-export([
    initialize/1,
    process_data/2,
    check_input/1,
    print_result/1
]).

%%% Internal Functions
-define(ERROR, "Input cannot be processed").

%%% Public API Functions
%%
%% Initializes the example module.
%%
%% @param Config the configuration settings for the module
%%
%% @return ok when initialization is successful, otherwise throws an error
initialize(Config) ->
    % check if the given configuration is valid
    case check_config(Config) of
        ok ->
            % if valid, initialize the module
            io:format("Initializing module...~n"),
            % create a state variable with initial values
            State = #{data => [], count => 0},
            % return ok on successful initialization
            ok = State;
        error ->
            % if invalid, throw an error
            throw({error, "Invalid configuration"})
    end.

%%
%% Processes input data and updates the module state.
%%
%% @param Input the input data to be processed
%% @param State the current state of the module
%%
%% @return Updated state variable
%%
%% @throws error if input cannot be processed
process_data(Input, State) ->
    % check if the input is valid
    case check_input(Input) of
        ok ->
            % if valid, add the input to the data list
            NewState = State#{data => [Input | State.data]},
            % increment the count value
            NewState#{count => State.count + 1};
        error ->
            % if invalid, throw an error
            throw({error, ?ERROR})
    end.

%%
%% Checks if the input is valid.
%%
%% @param Input the input data to be checked
%%
%% @return ok if the input is valid, otherwise throws an error
check_input(Input) ->
    % check if input is a list
    case is_list(Input) of
        true ->
            % if it is a list, return ok
            ok;
        false ->
            % if not a list, throw an error
            throw({error, ?ERROR})
    end.

%%
%% Prints the result of the module.
%%
%% @param State the current state of the module
print_result(State) ->
    % create a formatted string with the data and count values
    Result = io_lib:fwrite("~p data points processed. Last input: ~p~n", [State.count, hd(State.data)]),
    % print the result
    io:format(Result).