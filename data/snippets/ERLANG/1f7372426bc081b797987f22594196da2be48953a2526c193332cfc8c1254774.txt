-module(sales).

-export([start/0]).

%% Define record for products
-record(product, {id, name, price, quantity}).

%% Define record for customers
-record(customer, {id, name, email}).

%% Define record for orders
-record(order, {id, product_id, customer_id, status}).

%% Define list of products
products() ->
    [#product{
        id = 1,
        name = "iPhone X",
        price = 999,
        quantity = 10
    },
    #product{
        id = 2,
        name = "MacBook Pro",
        price = 1999,
        quantity = 5
    },
    #product{
        id = 3,
        name = "Apple Watch",
        price = 399,
        quantity = 20
    }
].

%% Define list of customers
customers() ->
    [#customer{
        id = 1,
        name = "John Smith",
        email = "john.smith@example.com"
    },
    #customer{
        id = 2,
        name = "Jane Doe",
        email = "jane.doe@example.com"
    }
].

%% Define list of orders
orders() ->
    [#order{
        id = 1,
        product_id = 1,
        customer_id = 1,
        status = "Pending"
    },
    #order{
        id = 2,
        product_id = 2,
        customer_id = 2,
        status = "Completed"
    }
].

%% Function to start the program
start() ->
    %% Retrieve the lists of products, customers and orders
    ProductList = products(),
    CustomerList = customers(),
    OrderList = orders(),
    
    %% Process the orders
    ProcessedOrderList = process_orders(ProductList, CustomerList, OrderList),
    
    %% Display the processed orders
    display_orders(ProcessedOrderList).

%% Function to process the orders
process_orders(ProductList, CustomerList, OrderList) ->
    %% Loop through the order list
    lists:foldl(fun(Order, Acc) ->
        %% Retrieve the product and customer corresponding to the order
        Product = find_product(Order#order.product_id, ProductList),
        Customer = find_customer(Order#order.customer_id, CustomerList),
        
        %% Update the product quantity and customer email
        UpdatedProduct = Product#product{quantity = Product#product.quantity - 1},
        UpdatedCustomer = Customer#customer{email = "Your order is being processed."},
        
        %% Update the order status
        UpdatedOrder = Order#order{status = "Processed"},
        
        %% Add the updated order to the accumulator
        [UpdatedOrder | Acc]
    end, [], OrderList).

%% Function to find a product by its ID
find_product(Id, [Product | _]) when Product#product.id == Id ->
    Product;
find_product(Id, [_ | Tail]) ->
    find_product(Id, Tail).

%% Function to find a customer by its ID
find_customer(Id, [Customer | _]) when Customer#customer.id == Id ->
    Customer;
find_customer(Id, [_ | Tail]) ->
    find_customer(Id, Tail).

%% Function to display the orders
display_orders([]) ->
    ok;
display_orders([Order | Tail]) ->
    io:format("~p~n", [Order]),
    display_orders(Tail).