-module(example).
-export([factorial/1, fibonacci/1, find_pairs/1, merge_sort/1]).
 
% A function that calculates the factorial of a given number
factorial(N) ->
    case N < 0 of
        true -> throw({error, "Negative number not allowed"});
        _ ->
            loop(N, 1)
    end.
 
% A helper function that recursively calculates the factorial
loop(N, Acc) when N > 0 ->
    loop(N - 1, Acc * N);
loop(_, Acc) ->
    Acc.
 
% A function that calculates the nth Fibonacci number
fibonacci(N) ->
    case N < 0 of
        true -> throw({error, "Negative number not allowed"});
        _ ->
            loop(N, 0, 1)
    end.
 
% A helper function that recursively calculates the nth Fibonacci number
loop(1, _, Acc2) ->
    Acc2;
loop(N, Acc1, Acc2) when N > 1 ->
    loop(N - 1, Acc2, Acc1 + Acc2).
 
% A function that finds all possible pairs in a given list
find_pairs(List) ->
    [ {X, Y} || X <- List, Y <- List, X /= Y ].
 
% A function that implements the merge sort algorithm
merge_sort(List) ->
    case List of
        [] -> [];
        [H] -> [H];
        _ ->
            {Left, Right} = split(List),
            merge(merge_sort(Left), merge_sort(Right))
    end.
 
% A helper function that splits a list into two halves
split(List) ->
    split(List, [], List).
 
split([H | Rest], Acc, [_, _ | Rest2]) ->
    split(Rest, [H | Acc], Rest2);
split(Acc, Acc, _Rest) ->
    {lists:reverse(Acc), _Rest}.
 
% A helper function that merges two sorted lists
merge([X | Rest1], [Y | Rest2]) when X < Y ->
    [X | merge(Rest1, [Y | Rest2])];
merge([X | Rest1], [Y | Rest2]) ->
    [Y | merge([X | Rest1], Rest2)];
merge(List1, []) ->
    List1;
merge([], List2) ->
    List2.