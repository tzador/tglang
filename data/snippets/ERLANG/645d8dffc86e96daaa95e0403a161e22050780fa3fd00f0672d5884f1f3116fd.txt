%%% This is a function that sorts a list in ascending order
-sort(List) ->
    sort(List, fun(A, B) -> A < B end).

%%% This is a helper function that uses merge sort algorithm
sort(List, Comparator) -> 
    case List of
        [A] ->                                % If the list contains only one element
            [A];
        [] ->                                 % If the list is empty
            [];
        List1 = [_|_] ->                      % If the list contains more than 1 element
            Len = length(List1) div 2,         % Finding the middle point
            {Sorted1, Sorted2} = {sort(take(List1, Len), Comparator), 
                                  sort(drop(List1, Len), Comparator)},
            merge(Sorted1, Sorted2, Comparator) % Merging the two sorted lists
    end. 

%%% This function takes a list and a number 'n' as input and returns the first 'n' elements of the list
take(List, n) ->
    take(List, n, []).

take(List, 0, Acc) ->
    lists:reverse(Acc);
take([], _, Acc) ->
    lists:reverse(Acc);
take([Head|Tail], N, Acc) ->
    take(Tail, N - 1, [Head|Acc]).

%%% This function drops the first n elements of a list and returns the remaining list
drop(List, n) ->
    drop(List, n, []).

drop([], _, Acc) ->
    lists:reverse(Acc);
drop(List, 0, Acc) ->
    lists:reverse(Acc) ++ List;
drop([_|Tail], N, Acc) ->
    drop(Tail, N - 1, Acc).

%%% This function merges two sorted lists in ascending order
merge(List1, List2, Comparator) ->
    case {List1, List2} of
        {[], _} ->
            List2;
        {_, []} ->
            List1;
        {[Head1|Tail1], [Head2|Tail2]} ->
            if
                Comparator(Head1, Head2) ->
                    [Head1 | merge(Tail1, [Head2|Tail2], Comparator)];
                true ->
                    [Head2 | merge([Head1|Tail1], Tail2, Comparator)]
            end
    end.