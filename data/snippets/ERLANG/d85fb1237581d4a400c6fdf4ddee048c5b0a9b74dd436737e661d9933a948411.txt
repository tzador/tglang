-module(tictactoe).                   %% Defines the module name

%% -export([<Function Name>/<Number of Arguments>:<Arity>]).  %% Note: Commented out to show an example below
-export([start/0]).                   %% Exported function to start the game

start() ->                            %% Start function definition
  Board = [                          %% List Comprehension to create the 3x3 board
    [{1,1},{1,2},{1,3}],
    [{2,1},{2,2},{2,3}],
    [{3,1},{3,2},{3,3}]
  ],
  print_board(Board),                 %% Function call to print the initial board state
  game_loop(Board).                   %% Function call to start the game loop

%% Example function definition
another_function(Var1, Var2) ->        %% Function name and two arguments defined
  case Var1 + Var2 of                  %% Case statement - pattern match on the sum of Var1 and Var2
    0 -> Var1;                         %% Case 0 - returns Var1
    Other -> Other                     %% Default case - returns the sum of Var1 and Var2
  end.                                 %% End of case statement

game_loop(Board) ->                    %% Game loop function definition
  Input = read_input(),                %% Function call to read user input for their move
  Board = update_board(Input, Board),  %% Function call to update the board state with new move
  print_board(Board),                  %% Function call to print the updated board state
  check_win_condition(Board),          %% Function call to check if there is a win condition
  next_move(Board).                    %% Function call to determine the next move of the AI/player

read_input() ->                        %% Input reading function definition
  io:format("Enter your move: "),      %% Prints a message to prompt for input
  Input = io:get_line ("~s"),          %% Reads input from user
  {X, Y} = string:tokens(Input, " "),  %% Splits the input into X and Y coordinates
  {string:to_integer(X), string:to_integer(Y)} %% Converts X and Y from string to integer
  .                                    %% End of function definition

update_board({X, Y}, Board) ->         %% Board update function definition
  NewBoard = lists:sublist(Board, X - 1) ++         %% Takes a sublist of the board based on the row number (X coordinate)
    [lists:sublist(lists:nth(X, Board), Y - 1) ++   %% Takes a sublist of the sublist based on the column number (Y coordinate)
    [ {X, Y, X + Y} ] ++                    %% Adds a tuple with the player's symbol and the sum of X and Y for identification later
    lists:nthtail(Y, lists:nth(X, Board))], %% Takes a sublist of the sublist's tail based on the column number (Y coordinate)
    lists:nthtail(X, Board), NewBoard,    %% Takes a sublist of the board's tail based on the row number (X coordinate)
    NewBoard                             %% Returns the updated board
  .                                      %% End of function definition

check_win_condition(Board) when         %% Win condition function definition with guard clause
  get_sum(Board, {1,1}) == get_sum(Board, {1,2}) andalso  %% Checks if the sum of the top left and top middle positions match
  get_sum(Board, {1,1}) == get_sum(Board, {1,3});         %% Checks if the sum of the top left and top right positions match
  get_sum(Board, {2,1}) == get_sum(Board, {2,2}) andalso  %% Checks if the sum of the middle left and middle middle positions match
  get_sum(Board, {2,1}) == get_sum(Board, {2,3});         %% Checks if the sum of the middle left and middle right positions match
  get_sum(Board, {3,1}) == get_sum(Board, {3,2}) andalso  %% Checks if the sum of the bottom left and bottom middle positions match
  get_sum(Board, {3,1}) == get_sum(Board, {3,3});         %% Checks if the sum of the bottom left and bottom right positions match
  get_sum(Board, {1,1}) == get_sum(Board, {2,2}) andalso  %% Checks if the sum of the top left and middle middle positions match
  get_sum(Board, {1,1}) == get_sum(Board, {3,3});         %% Checks if the sum of the top left and bottom right positions match
  get_sum(Board, {1,3}) == get_sum(Board, {2,2}) andalso  %% Checks if the sum of the top right and middle middle positions match
  get_sum(Board, {1,3}) == get_sum(Board, {3,1}).         %% Checks if the sum of the top right and bottom left positions match
  true -> io:format("You won!");      %% If any of the above conditions match, prints "You won!"
  false -> false.                      %% If none of the conditions match, returns false (game continues)

next_move(Board) ->                    %% Function to determine the next move
  case check_win_condition(Board) of   %% Case statement to check if there is a win condition
    true -> io:format("Game over");    %% If there is a win condition, prints "Game over"
    false -> another_function(1,2)     %% If there is no win condition, calls another function to determine the next move
  end.                                 %% End of case statement

print_board(Board) ->                  %% Function to print the board
  io:format("BOARD:~n"),               %% Prints a header for the board
  [{X, Y, Symbol} ||                    %% List comprehension to print each row with the player's symbol at each position
    {X, Row} <- lists:zip([1,2,3], Board),      %% Zip function to create a list of tuples containing the row number and the row
    {Y, {_, _, Symbol}} <- lists:zip([1,2,3], Row), %% Zip function to create a list of tuples containing the column number and the symbol at that position
    X > 0,Y > 0                        %% Conditions to print only the positions on the board, not the added sum tuples
    ].