-module(complex_list).
%% This module defines functions for manipulating complex lists in ERLANG
-export([member/2, flatten/1, map/2, filter/2, zip_with/3]).

%% member/2 function checks if an element is present in a list
%% @param element the element to be checked
%% @param list the list to be checked
%% @return true if element is present, false otherwise.
member(Element, List) ->
    case List of
        [Head | _Tail] when Head == Element -> true;
        [_Head | Tail] -> member(Element, Tail);
        [] -> false
    end.

%% flatten/1 function flattens a nested list into a flat list
%% @param list the nested list to be flattened
%% @return a flat list
flatten(List) ->
    case List of
        [Head | Tail] when is_list(Head) -> flatten(Head) ++ flatten(Tail);
        [Head | Tail] -> [Head | flatten(Tail)];
        [] -> []
    end.

%% map/2 applies a function to each element of a list
%% @param fun the function to be applied
%% @param list the list on which the function will be applied
%% @return a list with the function applied to each element
map(_Fun, []) ->
    [];
map(Fun, [Head | Tail]) ->
    [Fun(Head) | map(Fun, Tail)].

%% filter/2 removes elements from a list that don't meet a certain condition
%% @param fun the function that is used to filter the list
%% @param list the list to be filtered
%% @return a list with the filtered elements
filter(_Fun, []) ->
    [];
filter(Fun, [Head | Tail]) ->
    case Fun(Head) of
        true -> [Head | filter(Fun, Tail)];
        false -> filter(Fun, Tail)
    end.

%% zip_with/3 combines two lists element-wise using a function
%% @param fun the function to combine the elements
%% @param list1 the first list to be zipped
%% @param list2 the second list to be zipped
%% @return a list with the combined elements
zip_with(_Fun, [], []) ->
    [];
zip_with(Fun, [Head1 | Tail1], [Head2 | Tail2]) ->
    [Fun(Head1, Head2) | zip_with(Fun, Tail1, Tail2)].