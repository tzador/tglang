%this is a comment
-module(bank_account).
-export([new/0, deposit/2, withdraw/2, statement/1]).
-record(account, {balance = 0, transactions = []}).
%% This module is used to manage bank accounts

%% Function: new/0
%% Description: Create a new bank account with a balance of 0
new() -> #account{}.

%% Function: deposit/2
%% Description: Deposit money into the account and update the balance and transaction history
%% Parameters:
%%    Account - the account to deposit into
%%    Amount - the amount to deposit
deposit(Account = #account{balance = Balance, transactions = Transactions}, Amount) ->
    NewBalance = Balance + Amount,
    NewTransactions = Transactions ++ [{deposit, Amount, NewBalance}],
    #account{balance = NewBalance, transactions = NewTransactions}.

%% Function: withdraw/2
%% Description: Withdraw money from the account if possible and update the balance and transaction history
%% Parameters:
%%    Account - the account to withdraw from
%%    Amount - the amount to withdraw
withdraw(Account = #account{balance = Balance, transactions = Transactions}, Amount) ->
    case can_withdraw(Balance, Amount) of
        true ->
            NewBalance = Balance - Amount,
            NewTransactions = Transactions ++ [{withdraw, Amount, NewBalance}],
            #account{balance = NewBalance, transactions = NewTransactions};
        false ->
            {error, insufficient_funds}
    end.

%% Function: statement/1
%% Description: Generate a statement of all the transactions for a given account
%% Parameters:
%%    Account - the account to generate a statement for
statement(#account{balance = Balance, transactions = Transactions}) ->
    {account_balance, Balance} ++ Transactions.

%% Function: can_withdraw/2
%% Description: Checks if the account has enough balance to withdraw the given amount
%% Parameters:
%%    Balance - current balance in the account
%%    Amount - amount to withdraw
can_withdraw(Balance, Amount) ->
    Balance >= Amount.