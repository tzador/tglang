-module(example). % module declaration
-export([factorial/1, fib/1]). % export the factorial and fibonacci functions

%% factorial function
factorial(0) -> % pattern matching for base case
    1; % return 1 as the factorial of 0
factorial(N) when N > 0 -> % pattern matching with guard
    N * factorial(N-1). % recursive call to calculate factorial

%% fibonacci function
fib(0) -> % pattern matching for base case
    0; % return 0 as the fibonacci of 0
fib(1) -> % pattern matching for base case
    1; % return 1 as the fibonacci of 1
fib(N) when N > 1 -> % pattern matching with guard
    fib(N-1) + fib(N-2). % recursive call to calculate fibonacci
    
%%% unit tests for factorial and fibonacci functions
-ifdef(TEST). % macro for unit testing
-include_lib("eunit/include/eunit.hrl"). % include the eunit library

% test function for factorial
factorial_test() ->
    ?assertEqual(factorial(0), 1), % assert that the factorial of 0 is equal to 1
    ?assertEqual(factorial(5), 120), % assert that the factorial of 5 is equal to 120
    ?assertEqual(factorial(10), 3628800). % assert that the factorial of 10 is equal to 3628800

% test function for fibonacci
fib_test() ->
    ?assertEqual(fib(0), 0), % assert that the fibonacci of 0 is equal to 0
    ?assertEqual(fib(1), 1), % assert that the fibonacci of 1 is equal to 1
    ?assertEqual(fib(10), 55), % assert that the fibonacci of 10 is equal to 55
    ?assertEqual(fib(20), 6765). % assert that the fibonacci of 20 is equal to 6765

-endif. % end of unit tests

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% External Functions %%%
%% factorial function with accumulator
factorial_acc(0, Accumulator) -> % base case
    Accumulator; % return accumulator
factorial_acc(N, Accumulator) -> % pattern matching with accumulator
    factorial_acc(N-1, N*Accumulator). % recursive call with updated accumulator


%%% Internal Functions %%%
%% factorial function with accumulator
fact_acc(0, Result) -> % base case
    Result; % return result
fact_acc(N, Result) -> % pattern matching with accumulator
    fact_acc(N-1, N*Result). % recursive call with updated result

%%% Usage %%%
-define(FACT, 10). % define a macro for the value of factorial
?MODULE:factorial(?FACT). % call the factorial function with the value of the macro

-define(FIB, 5). % define a macro for the value of fibonacci
?MODULE:fib(?FIB). % call the fibonacci function with the value of the macro.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Error Handling %%%
%% factorial function with error handling
factorial_error(0) -> % pattern matching for base case
    {ok, 1}; % return a tuple with the atom 'ok' and the factorial
factorial_error(N) when N > 0 -> % pattern matching with guard
    case factorial_error(N-1) of % perform case matching on the result of the factorial of N-1
        {ok, Factorial} -> % if the result is a tuple with 'ok' and the factorial
            {ok, N*Factorial}; % return a tuple with 'ok' and the factorial of N
        _ -> % if the result is not a tuple with 'ok'
            {error, "Invalid input"}. % return a tuple with the atom 'error' and a message
fibonacci_error(0) -> % pattern matching for base case
    {ok, 0}; % return a tuple with the atom 'ok' and the fibonacci
fibonacci_error(1) -> % pattern matching for base case
    {ok, 1}; % return a tuple with the atom 'ok' and the fibonacci
fibonacci_error(N) when N > 1 -> % pattern matching with guard
    case fibonacci_error(N-1) of % perform case matching on the result of the fibonacci of N-1
        {ok, Fibonacci1} -> % if the result is a tuple with 'ok' and the fibonacci
            case fibonacci_error(N-2) of % perform case matching on the result of the fibonacci of N-2
                {ok, Fibonacci2} -> % if the result is a tuple with 'ok' and the fibonacci
                    {ok, Fibonacci1 + Fibonacci2}; % return a tuple with 'ok' and the fibonacci of N
                _ -> % if the result is not a tuple with 'ok'
                    {error, "Invalid input"}. % return a tuple with the atom 'error' and a message
        _ -> % if the result is not a tuple with 'ok'
            {error, "Invalid input"}. % return a tuple with the atom 'error' and a message

%%% Usage %%%
factorial_error(5).
fibonacci_error(10).