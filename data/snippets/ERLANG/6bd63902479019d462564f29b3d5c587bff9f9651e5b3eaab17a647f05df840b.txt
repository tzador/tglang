-module(matrix).
-export([dot_product/2, transpose/1, multiply/2]).

%% The `matrix` module defines functions for matrix operations.
%% The functions `dot_product`, `transpose`, and `multiply` are exported for use outside the module.

%% dot_product([Num], [Num]) -> Num |
%% The `dot_product` function calculates the dot product of two vectors.
dot_product(Vector1, Vector2) ->
    dot_product(Vector1, Vector2, 0).

%% dot_product([Num], [Num], Acc) -> Num |
%% The `dot_product` function calculates the dot product of two vectors using the accumulator pattern.
%% The accumulator is used to keep track of the partial sum as the function recurses through the vectors.
dot_product([], [], Acc) ->
    Acc;
dot_product([A1 | Tail1], [A2 | Tail2], Acc) ->
    dot_product(Tail1, Tail2, Acc + A1 * A2).

%% transpose([[Any]]) -> [[Any]] |
%% The `transpose` function transposes the given matrix.
transpose(Matrix) ->
    if
        is_empty(Matrix) -> Matrix;
        true -> transpose(Matrix, 1)
    end.
    
%% transpose([[Any]], Row) -> [[Any]] |
%% The `transpose` function transposes the given matrix by recursively swapping rows and columns.
%% The `transpose_row` function is called on each row to swap its elements with the corresponding column.
%% Row is used as an index to keep track of the current row being transposed.
transpose(Matrix, Row) ->
    if
        Row > length(Matrix) -> Matrix;
        true -> transpose(transpose_row(Matrix, Row), Row + 1)
    end.

%% transpose_row([[Any]], Integer) -> [[Any]] |
%% The `transpose_row` function swaps the elements of a row with their corresponding column.
%% Integer is used as an index to keep track of the current element being swapped.
transpose_row(Matrix, Integer) ->
    [lists:nth(Integer, Column) || Column <- Matrix].

%% multiply([[Num]], [[Num]]) -> [[Num]] |
%% The `multiply` function multiplies two matrices and returns the result.
multiply(Matrix1, Matrix2) ->
    [[dot_product(Row, Column) || Column <- transpose(Matrix2)] || Row <- Matrix1].

%% is_empty([Any]) -> Bool |
%% The `is_empty` function checks if the given matrix is empty.
is_empty([]) ->
    true;
is_empty(_) ->
    false.