-module(counterce).
-export([init/0, start/0, increment/0, decrement/0, reset/0]).
-record(count, {value=0}).

%% @doc Initializes the counter with a value of zero.
init() ->
    #count{}.

%% @doc Starts the counter and sends itself a 'increment' message at regular intervals.
start() ->
    receive
        {increment} ->
            io:format("Incrementing counter by 1.~n", []),
            NewValue = ?MODULE:increment(),
            io:format("Current value: ~p~n~n", [NewValue])
    after 1000 ->
        self() ! {increment},
        start()
    end.

%% @doc Increments the counter value by 1.
increment() ->
    fun(State) ->
        NewState = State#count{value = State#count.value + 1},
        {ok, NewState}
    end.

%% @doc Decrements the counter value by 1.
decrement() ->
    fun(State) ->
        NewState = State#count{value = State#count.value - 1},
        {ok, NewState}
    end.

%% @doc Resets the counter value back to zero.
reset() ->
    fun(_) ->
        {ok, #count{value = 0}}
    end.