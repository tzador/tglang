-module(fib).

%% define function
fib(0) -> 0;
fib(1) -> 1;

%% handle recursive calls
fib(N) when N > 1 ->
    fib(N-1) + fib(N-2).

%% define memoization
memo(fun(F, N) when is_function(F, 1), N) ->
    Value = F(N),
    Memo = dict:store(N, Value, F(memo, N)),
    setelement(1, memo, Memo).

%% generate list of fibonacci numbers
generate_fib_nums(N) ->
    [fib(I) || I <- lists:seq(0, N-1)].

%% print fibonacci numbers
print_fib_nums(N) ->
    List = generate_fib_nums(N),
    [io:fwrite("~w\n", [X]) || X <- List].