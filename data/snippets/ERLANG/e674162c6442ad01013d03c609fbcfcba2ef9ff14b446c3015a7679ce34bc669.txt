-module(counter).
-export([counter/0, increment/0, decrement/0]).

-counter() -> 
  State = #counter{count = 0}, 
  update_count(State, #{event => init}).

-update_count(State, #{event := init}) -> State;
-update_count(State, #{event := increment}) ->
  Count = State#counter.count,
  NewState = State#counter{count = Count + 1},
  notify_subscribers(NewState),
  NewState;
-update_count(State, #{event := decrement}) ->
  Count = State#counter.count,
  NewState = State#counter{count = Count - 1},
  notify_subscribers(NewState),
  NewState.

increment() -> update_count(#{event => increment}).

decrement() -> update_count(#{event => decrement}).

notify_subscribers(State) ->
  io:format("Current count is ~p.~n", [State#counter.count]).

%%%%%Example Usage%%%%%

1> counter:counter().
#counter{count = 0}

2> counter:increment().
#counter{count = 1}

3> counter:decrement().
#counter{count = 0}

4> counter:increment().
#counter{count = 1}