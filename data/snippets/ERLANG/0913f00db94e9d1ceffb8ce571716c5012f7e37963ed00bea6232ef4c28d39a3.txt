-module(my_module). %% Defines the name of the module

-export([my_function/1]). %% Exports the function to make it available outside the module

%% This is a comment, which will not affect the code

my_function(Param) -> %% Defines the function with parameter
  Result = calculate(Param), %% Calls the calculate function and assigns the result to a variable
  io:format("The result is ~w", [Result]). %% Prints the result to the console

calculate(Input) ->
  case Input of %% Starts a case statement to check different options for Input
    <<"Option 1">> ->
      Result = process_one(Input); %% Calls the process_one function and assigns the result to a variable
    <<"Option 2">> ->
      Result = process_two(Input); %% Calls the process_two function and assigns the result to a variable
    _ -> %% Matches any other input
      Result = default_process(Input) %% Calls the default_process function and assigns the result to a variable
  end, %% End of case statement
  Result. %% Returns the result

process_one(Input) ->
  %% Process the input and return a result
  Result.

process_two(Input) ->
  %% Process the input and return a result
  Result.

default_process(Input) ->
  %% Process the input and return a result
  Result.