-module(my_module).
-compile(export_all).

%% Define complex data structure
-record(person, {name, age, hobbies}).

%% Define helper functions
-spec calculate_average_age([person()]) -> float().
calculate_average_age([]) -> 0;
calculate_average_age(People) ->
    Total = lists:foldl(fun(P, Acc) -> Acc + P#person.age end, 0, People),
    Total / length(People).

-spec sort_people([person()]) -> [person()].
sort_people([]) -> [];
sort_people(People) ->
    lists:sort(fun(P1, P2) -> P1#person.age < P2#person.age end, People).

%% Main function
-spec main() -> ok.
main() ->
    %% Create some sample data
    People = [#person{name = "John", age = 25, hobbies = ["hiking", "reading"]},
              #person{name = "Mary", age = 32, hobbies = ["painting", "yoga"]},
              #person{name = "Bob", age = 45, hobbies = ["gardening", "fishing"]}],

    %% Calculate average age and sort people by age
    AverageAge = calculate_average_age(People),
    SortedPeople = sort_people(People),

    %% Print results
    io:fwrite("The average age is ~p~n", [AverageAge]),
    io:fwrite("People sorted by age: ~p~n", [SortedPeople]).