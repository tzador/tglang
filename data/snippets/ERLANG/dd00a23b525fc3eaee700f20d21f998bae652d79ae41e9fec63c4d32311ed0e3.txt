%Defining a function to handle a list of integers
handle_list(List) ->
    %Start by pattern matching and checking the input type
    case is_list(List) of
        true ->
            %If the input is a list, we start a new recursive function 
            %to iterate through the list
            handle_list_items(List, []); %Pass an empty list to store results
        false ->
            %If the input is not a list, we raise an error
            error_logger:error_msg("~p is not a list!", [List])
    end.

%Defining a recursive function to handle each item in the list
handle_list_items([]) ->
    %If we reach the end of the list, we return the stored results
    Results;
handle_list_items([Item|Rest], Results) ->
    %Check if the item is an integer and add it to the result list if true
    case is_integer(Item) of
        true ->
            %Add the item to the result list and call the function recursively
            handle_list_items(Rest, [Item|Results]);
        false ->
            %If the item is not an integer, we skip it and continue to the next item
            handle_list_items(Rest, Results)
    end.