%% This is a comment in Erlang
-module(example_module).

%%% Imports and exports %%%
-export([example_function/2, other_function/1]).
-import(lists, [append/2, reverse/1]).

%%% Data types %%%
-record(example_record, {name :: string(), age :: non_neg_integer()}).
-type alias example_tuple() :: {string(), integer()}.

%%% Function definitions %%%
-spec divide_positives(number(), number()) -> number().
divide_positives(X, Y) when X > 0, Y > 0 -> X / Y.

-spec sum_list(list(integer())) -> integer().
sum_list(List) -> lists:sum(List).

%%% Pattern matching %%%
-spec get_example_name(example_record()) -> string().
get_example_name(Record) -> Record#example_record.name.

-spec is_odd(integer()) -> boolean().
is_odd(X) when rem(X, 2) =:= 1 -> true;
is_odd(_) -> false.

%%% Error handling %%%
-spec safe_divide(number(), number()) -> {ok, number()} | {error, term()}.
safe_divide(X, Y) when Y =/= 0 -> {ok, X / Y};
safe_divide(_, _) -> {error, division_by_zero}.

%%% Processes %%%
start_process() ->
    spawn(fun () -> loop() end).

loop() ->
    receive
        {print_message, Message} ->
            io:format("Received message: ~p~n", [Message]),
            loop();
        stop ->
            io:format("Stopping process.~n", []),
            exit(normal);
        _ ->
            io:format("Invalid message received.~n", []),
            loop()
    end.

%% End of file