%%Imports necessary libraries
-import(lists, [foreach/2, map/2]).
-import(file, [write_file/2]).

%%Defines a function that takes in a list as an argument
%%and sorts it in ascending order
sort(List) ->
  %%Converts list to tuple for better sorting performance
  Tuple = tuple(List),

  %%Extracts elements from tuple into a new list
  SortedList = extract(Tuple, []),

  %%Converts list back to tuple for output
  Output = tuple(SortedList),

  %%Returns the sorted tuple
  Output.

%%Function to extract elements from tuple and sort them
extract(Tuple, Acc) ->
  case Tuple of
    %%If tuple is empty, return the accumulator
    [] -> Acc;

    %%Otherwise, compare first element to rest of tuple
    %%and insert it into the accumulator in the correct position
    [X|Rest] -> extract(Rest, insert(X, Acc))
  end.

%%Function to insert an element into a sorted list
%%in the correct position
insert(X, [Y|Rest]) when X < Y ->
  [X,Y|Rest];

insert(X, [Y|Rest]) ->
  [Y|insert(X, Rest)];

insert(X, []) ->
  [X].

%%Function to convert a list to a tuple for better sorting performance
tuple(List) ->
	  lists:map(fun(X) -> {X} end, List).