%% This function takes in two numbers as arguments and
%% recursively calculates their product using addition.
-module(recursive).

%% Export the `multiply/2` function so it can be used in other modules.
-export([multiply/2]).

%% The `multiply/2` function takes in two integers and returns their product.
multiply(Number1, Number2) ->
    %% Check if either of the numbers is 0, in which case the product is 0.
    if
        Number1 =:= 0 ->
            0;
        Number2 =:= 0 ->
            0;

    %% If both numbers are negative, we make them positive before running the algorithm.
    %% We also keep track of the original numbers to return the correct sign at the end.
        Number1 < 0 andalso Number2 < 0 ->
            PositiveNumber1 = abs(Number1),
            PositiveNumber2 = abs(Number2),
            %% Call the `multiply_algorithm` function to perform the calculation.
            multiply_algorithm(PositiveNumber1, PositiveNumber2, -1);

    %% Otherwise, we simply call the `multiply_algorithm` function.
        true ->
            multiply_algorithm(Number1, Number2, 1)
    end.

%% This function uses tail recursion to recursively calculate the product of two numbers.
multiply_algorithm(Left, Right, Accumulator) ->
    %% If the right number is 1, we've reached the end of the recursion and return the accumulator.
    if
        Right =:= 1 ->
            Accumulator;
        
    %% Otherwise, we add the left number to the accumulator and decrement the right number by 1.
        true ->
            multiply_algorithm(Left, Right-1, Accumulator+Left)
    end.