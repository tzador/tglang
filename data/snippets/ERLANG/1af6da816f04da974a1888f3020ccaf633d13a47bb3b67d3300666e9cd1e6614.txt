%% This is an example of a module in Erlang
-module(example_module).

%% Export the functions in this module
-export([example_function/1, another_function/2]).

%% Define a function with one argument
example_function(Argument) ->
    %% Pattern match on the argument
    case Argument of
        %% If argument is a positive number
        Positive when Positive > 0 ->
            %% Print the argument
            io:format("The argument is ~w~n", [Positive]);
        %% If argument is a negative number
        Negative when Negative < 0 ->
            %% Print error message
            io:format("Error: negative number given~n");
        %% If argument is not a number
        Else ->
            %% Print error message
            io:format("Error: argument is not a number~n")
    end.

%% Define a function with two arguments
another_function(First, Second) ->
    %% Pattern match on the first argument
    case First of
        %% If first argument is an atom
        atom ->
            %% Print the atoms
            io:format("Atom: ~w~n", [First]),
            io:format("Atom: ~w~n", [Second]);
        %% If first argument is a tuple
        Tuple when is_tuple(Tuple) ->
            %% Print the tuple
            io:format("First element of tuple: ~w~n", [element(1, Tuple)]);
        %% If first argument is not an atom or tuple
        Else ->
            %% Print error message
            io:format("Error: argument is not an atom or tuple~n")
    end.
    
%% Define an example record
-record(person, {name, age, gender}).

%% Define a function to create a new person record
create_person(Name, Age, Gender) ->
    %% Create a new person record using record syntax
    #person{name = Name, age = Age, gender = Gender}.