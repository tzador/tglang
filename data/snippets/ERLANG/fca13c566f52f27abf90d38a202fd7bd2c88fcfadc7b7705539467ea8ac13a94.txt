%% A module that implements a binary search tree data structure

-module(tree).

-export([new/0, insert/2, search/2, traverse/1, delete/2]).

%% record to represent a tree node
-record(node, {key, value, left, right}).

%% function to create a new, empty tree
new() ->
    undefined.

%% function to insert a new key-value pair into the tree
%% tree:new() must be called first
insert(Key, Value) ->
    insert(Key, Value, undefined).

%% helper function to insert a new key-value pair into the tree
insert(Key, Value, undefined) ->
    Node = #node{key = Key, value = Value, left = undefined, right = undefined},
    {ok, Node};

insert(Key, Value, Parent = #node{key = Key0, value = Value0, left = Left, right = Right}) when Key > Key0 ->
    Result = insert(Key, Value, Right),
    Parent#node{right = L} = Result,
    {ok, Node#node{right = Result}};

insert(Key, Value, #node{left = Left}) ->
    Result = insert(Key, Value, Left),
    Parent#node{left = L} = Result,
    {ok, Node#node{left = Result}};

insert(Key, Value, #node{right = Right}) ->
    Result = insert(Key, Value, Right),
    Parent#node{right = L} = Result,
    {ok, Node#node{right = Result}};

insert(Key, Value, Node = #node{key = Key0, value = Value0}) ->
    Node#node{}.

%% function to search for a value in the tree based on a given key
search(Key, Tree) ->
    search(Key, Tree, undefined).

%% helper function to search for a value in the tree based on a given key
search(Key, #node{key = Key0, value = Value}, _) when Key =:= Key0 ->
    {ok, Value};

search(Key, #node{key = Key0, left = Left, right = Right}, _) when Key > Key0 ->
    search(Key, Right, Left);

search(Key, #node{key = Key0, left = Left}, _) when Key < Key0 ->
    search(Key, Left, Right);

search(_, undefined, _) ->
    {error, not_found}.

%% function to traverse the tree in order and return a list of key-value pairs
traverse(Tree) ->
    traverse(Tree, []).

%% helper function to traverse the tree in order and return a list of key-value pairs
traverse(#node{key = Key, value = Value, left = Left, right = Right}, Acc) ->
    traverse(Left, [{Key, Value} | traverse(Right, Acc)]);

traverse(undefined, Acc) ->
    Acc.

%% function to delete a node with a given key from the tree
delete(Key, Tree) ->
    delete(Key, Tree, undefined).

%% helper function to delete a node with a given key from the tree
delete(Key, #node{key = Key0}, Parent = #node{key = Key0}) ->
    Parent#node{}.

delete(Key, #node{key = Key0, left = L}, Parent = #node{key = Key0}) ->
    Result = delete(Key, L, Parent),
    Parent#node{left = Result};

delete(Key, #node{key = Key0, right = R}, Parent = #node{key = Key0}) ->
    Result = delete(Key, R, Parent),
    Parent#node{right = Result};

delete(Key, #node{key = Key0, left = Left, right = Right}, Parent = #node{key = Key0}) ->
    L = successor(Left, Right),
    Result = delete(Key, Tree, L),
    Parent#node{left = Result, right = Right}.

delete(Key, Tree, Parent = #node{key = Key0, left = Left}) ->
    Result = delete(Key, Tree, Left),
    Parent#node{left = Result}.

delete(Key, Tree, Parent = #node{key = Key0, right = Right}) ->
    Result = delete(Key, Tree, Right),
    Parent#node{right = Result}.

delete(Key, Tree, _) ->
    Tree.

%% function to find the smallest key in a tree
find_min(Tree) ->
    find_min(Tree, Tree#node{key = nil}).

%% helper function to find the smallest key in a tree
find_min(#node{left = Left}, Node) ->
    Node;
find_min(#node{right = Right}, Node) ->
    find_min(Right, Node#node{key = Key}).

%% function to find the successor of a given node in the tree
successor(#node{left = Left}, Node) ->
    find_min(Left, Node).

successor(#node{right = Right, key = Key, parent = Parent}) ->
    find_min(Right, Node).