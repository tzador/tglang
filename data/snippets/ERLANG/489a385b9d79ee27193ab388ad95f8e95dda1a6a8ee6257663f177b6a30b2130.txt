% This code snippet creates a module for handling a simple queue data structure
-module(queue).
-export([new/0, enqueue/2, dequeue/1, peek/1, size/0]).

%%% Types and Function Specifications %%%
-type queue() :: [any()].
-spec new() :: queue().
-spec enqueue(queue(), any()) :: queue().
-spec dequeue(queue()) :: {any(), queue()}.
-spec peek(queue()) :: any().
-spec size() :: integer().

%%% Public Functions %%%
new() -> [].

enqueue(Queue, Item) ->
    case Queue of
        [] -> [Item];
        _ -> Queue ++ [Item]
    end.

dequeue(Queue) ->
    case Queue of
        [] -> {error, empty_queue};
        _ -> {hd(Queue), tl(Queue)}
    end.

peek(Queue) ->
    case Queue of
        [] -> undefined;
        _ -> hd(Queue)
    end.

size() ->
    ets:first(queue) - 1.

%%% Private Functions %%%
head([H|_]) -> H.

tail([_|T]) -> T.