-module(advanced_operations).
% This is a module that contains advanced mathematical operations in ERLANG.
% No need to include variables and functions for the purpose of this code snippet.

% This function uses pattern matching to calculate the factorial of a given number.
% Example usage: factorial(5) -> 120.
factorial(0) -> 1;
factorial(N) when N > 0 -> N * factorial(N-1).

% This function uses recursion to calculate the nth Fibonacci number.
% Example usage: fibonacci(8) -> 21.
fibonacci(1) -> 0;
fibonacci(2) -> 1;
fibonacci(N) -> fibonacci(N-1) + fibonacci(N-2).

% This function calculates the nth prime number using the Sieve of Eratosthenes algorithm.
% Example usage: prime(10) -> 29.
prime(1) -> 2;
prime(N) -> eratosthenes([],2,1,N).

% Helper function for prime(N), performs the Sieve of Eratosthenes algorithm.
eratosthenes(Primes, Candidate, Count, N) when Count =:= N -> Candidate-1;
eratosthenes(Primes, Candidate, Count, N) ->
    case is_prime(Primes, Candidate) of
        true -> eratosthenes([Candidate | Primes], Candidate+1, Count+1, N);
        false -> eratosthenes(Primes, Candidate+1, Count, N)
    end.

% Helper function for eratosthenes(Primes, Candidate, Count, N), checks if a number is prime.
is_prime([], _) -> true;
is_prime([Prime | Primes], Candidate) when Prime > math:sqrt(Candidate) -> true;
is_prime([Prime | Primes], Candidate) when Candidate rem Prime =:= 0 -> false;
is_prime([Prime | Primes], Candidate) -> is_prime(Primes, Candidate).

% This function uses the Quickselect algorithm to find the kth smallest element in an unsorted list.
% Example usage: quickselect([5,3,8,2,9], 3) -> 5.
quickselect(List, K) ->
    Index = partition(List, 1, length(List), K),
    case Index =:= K-1 of
        true -> lists:nth(Index+1, List);
        false -> case Index > K-1 of
            true -> quickselect(List, K);
            false -> quickselect(lists:nthtail(Index, List), K-Index-1)
        end
    end.

% Helper function for quickselect(List, K), performs partitioning.
partition(List, Left, Right, Pivot) ->
    case Left >= Right of
        true -> Right;
        false -> case lists:nth(Left, List) =< Pivot of
            true -> partition(List, Left+1, Right, Pivot);
            false -> partition(lists:reverse(lists:sublist(lists:reverse(List), size(List)-Left)), Left, Right-1, Pivot)
        end
    end.
  
% This function finds the longest common subsequence between two strings using dynamic programming.
% Example usage: lcs("ABCD", "AEDFG") -> "AD".
lcs(String1, String2) ->
    Matrix = lists:duplicate(length(String1)+1, lists:duplicate(length(String2)+1, 0)),
    {_, Lcs} = lcs_helper(String1, String2, Matrix, length(String1), length(String2)),
    Lcs.

% Helper function for lcs(String1, String2), performs dynamic programming.
lcs_helper(_, _, Matrix, 0, _) -> {0, []};
lcs_helper(_, _, Matrix, _, 0) -> {0, []};
lcs_helper(String1, String2, Matrix, I, J) ->
    case lists:nth(I, String1) =:= lists:nth(J, String2) of
        true ->
            {PreviousLength, Lcs} = lcs_helper(String1, String2, Matrix, I-1, J-1),
            {PreviousLength+1, [lists:nth(I, String1) | Lcs]};
        false ->
            {Length1, Lcs1} = lcs_helper(String1, String2, Matrix, I-1, J),
            {Length2, Lcs2} = lcs_helper(String1, String2, Matrix, I, J-1),
            case Length1 > Length2 of
                true -> {Length1, Lcs1};
                false -> {Length2, Lcs2}
            end
    end.