-module(example_module).
%% This is a module in the ERLANG programming language.
-behaviour(gen_server). % This module will behave as a generic server.

%% Exported functions.
-module_info/0.
init/1.
handle_call/3.
handle_cast/2.
handle_info/2.
terminate/2.
code_change/3.

%% Internal functions.
start_link/0.
do_something/1.

%% Module attributes.
-compile(export_all). % Export all functions in this module.

%% Exported functions definition.
-module_info() ->
    %% Returns information about the module.
    [{description, "This is an example module."}].
    
init(_) ->
    %% Initializes the generic server.
    %% In this case, we just return {ok, undefined}.
    {ok, undefined}.

handle_call(Request, From, State) ->
    %% Handles calls to the generic server.
    %% In this case, we just send back the state.
    {reply, State, State}.

handle_cast(Message, State) ->
    %% Handles casts to the generic server.
    %% In this case, we do some operation on the state and return {noreply, NewState}.
    NewState = do_something(State),
    {noreply, NewState}.

handle_info(Info, State) ->
    %% Handles non-call or cast messages to the generic server.
    %% In this case, we log the message and return {noreply, State}.
    error_logger:error_msg("Received info message: ~p", [Info]),
    {noreply, State}.

terminate(Reason, State) ->
    %% Handles termination of the generic server.
    %% In this case, we just log the reason for termination and return ok.
    error_logger:info_msg("Terminating server with reason: ~p", [Reason]),
    ok.

code_change(OldVsn, State, Extra) ->
    %% Handles changes in code versions.
    %% In this case, we just log the old version and return {ok, State}.
    error_logger:info_msg("Old code version: ~p", [OldVsn]),
    {ok, State}.

%% Internal functions definition.
start_link() ->
    %% Starts the generic server and returns its process id.
    gen_server:start_link({local, example_server}, example_module, [], []).

do_something(State) ->
    %% Performs some operation on the state.
    %% In this case, we just generate a random integer and add it to the state.
    random:uniform(100) + State.