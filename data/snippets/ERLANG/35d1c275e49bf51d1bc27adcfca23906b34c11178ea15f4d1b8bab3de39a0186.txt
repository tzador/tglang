%% Annotated ERLANG Code Snippet

-module(my_module). %% Module declaration

-export([my_function/1]). %% Exported function with 1 argument

%% Function definition with guard clauses
my_function(Input) when is_number(Input) -> 
    double(Input);
my_function(Input) when is_list(Input) -> 
    list_to_atom(Input);
my_function(Input) when is_tuple(Input) -> 
    tuple_to_list(Input).

double(N) -> 
    N * 2.

list_to_atom(L) -> 
    list_to_atom_helper(L, []).

%% Tail-recursive helper function to convert a list to atom
list_to_atom_helper([H|T], Acc) -> 
    list_to_atom_helper(T, [H | Acc]);
list_to_atom_helper([], Acc) -> 
    list_to_atom(lists:reverse(Acc)).

%% Function to convert a tuple to list
tuple_to_list(T) -> 
    tuple_to_list(T, element(arity(T), T), []).

%% Tail-recursive helper function to convert a tuple to list
tuple_to_list(T, 1, Acc) -> 
    [element(1, T) | lists:reverse(Acc)];
tuple_to_list(T, N, Acc) -> 
    tuple_to_list(T, N-1, [element(N, T) | Acc]).