%%% The following code snippet implements a function that calculates the Euclidean distance between two points in a three-dimensional space
%%% using the Pythagorean theorem
%%% Inputs:
%%% x1, y1, z1: coordinates of the first point
%%% x2, y2, z2: coordinates of the second point
%%%
%%% Output:
%%% dist: the calculated distance between the two points
%%% 
%%% Example usage:
%%% Input: 2, 5, 3, 8, 1, 4
%%% Output: 6.708203932
calculate_distance({x1, y1, z1}, {x2, y2, z2}) ->
    Distance_X = abs(x2-x1), %%% Calculates the difference between x-coordinates
    Distance_Y = abs(y2-y1), %%% Calculates the difference between y-coordinates
    Distance_Z = abs(z2-z1), %%% Calculates the difference between z-coordinates
    Dist_Squared = (Distance_X*Distance_X)+(Distance_Y*Distance_Y)+(Distance_Z*Distance_Z), % Uses the Pythagorean theorem to calculate the squared distance between the two points
    Dist = math:sqrt(Dist_Squared), % Calculates the square root of the squared distance to get the actual distance
    Dist. % Returns the calculated distance