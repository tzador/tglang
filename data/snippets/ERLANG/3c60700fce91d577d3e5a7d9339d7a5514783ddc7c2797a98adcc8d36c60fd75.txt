%% Erlang program to calculate the nth element of a Fibonacci sequence
-module(fibonacci).

%% Function to calculate nth Fibonacci number using recursion
%% Parameters:
%% 	n - the index of the number in the Fibonacci sequence
%% Returns:
%% 	the nth Fibonacci number
fib(N) when N == 0 -> 0; % base case, first number in sequence
fib(N) when N == 1 -> 1; % base case, second number in sequence
fib(N) -> fib(N-1) + fib(N-2). % recursive case, sum of previous two numbers in sequence

%% Function to print the Fibonacci sequence up to a given index
%% Parameters:
%% 	n - the index to print up to
%% Returns:
%% 	none
print_fib_sequence(N) ->
    io:format("~p", [fib(N)]), % print first number in sequence
    print_fib_sequence(0, 1, N-1). % call helper function with starting numbers and remaining count
    
%% Helper function for printing the Fibonacci sequence
%% Parameters:
%% 	prev1 - the previous number in the sequence
%% 	prev2 - the number before the previous number in the sequence
%% 	n - the remaining count to print
%% Returns:
%% 	none
print_fib_sequence(_, _, 0) -> % base case, print up to given index
    io:format("~n"); % print new line
print_fib_sequence(Prev1, Prev2, N) -> % recursive case
    Current = Prev1 + Prev2, % calculate next number in sequence
    io:format(", ~p", [Current]), % print next number
    print_fib_sequence(Prev2, Current, N-1). % call helper function with updated numbers and remaining count

%% Example usage:
%% fibonacci:print_fib_sequence(10).
%% Output:
%% 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55
%% ok