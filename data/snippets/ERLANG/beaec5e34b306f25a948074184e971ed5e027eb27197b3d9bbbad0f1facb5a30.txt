-module(my_module).
-export([my_function/2]).

%% This is a comment in ERLANG

%% This function takes in two integers and returns their product
my_function(A, B) ->
    %% Pattern matching to check if inputs are integers
    case {A, B} of
        {Int1, Int2} when is_integer(Int1), is_integer(Int2) ->
            %% Calculate the product and return it
            Int1 * Int2;
        _ ->
            %% Print an error message if inputs are not integers
            io:format("Inputs must be integers~n")
    end.
    
%% This is a recursive function that calculates the factorial of a given integer
my_factorial(N) ->
    %% Base case: if N is 0, return 1
    case N of
        0 -> 1;
        _ ->
            %% Recursive call to find factorial of N-1
            N * my_factorial(N-1)
    end.
    
%% This is a function that returns the nth Fibonacci number
my_fibonacci(N) ->
    %% Base cases: if N is 0 or 1, return 1
    case N of 
        0 -> 1;
        1 -> 1;
        _ ->
            %% Recursive call to find the sum of the two previous Fibonacci numbers
            my_fibonacci(N-1) + my_fibonacci(N-2)
    end.
    
%% This function takes in a list and returns a new list with only odd numbers
filter_odd(List) ->
    %% Use list comprehension to iterate through List and filter odd numbers
    [X || X <- List, X rem 2 =/= 0].
    
%% This is a module attribute that specifies the version of the module
-module_attribute(version, "1.0").