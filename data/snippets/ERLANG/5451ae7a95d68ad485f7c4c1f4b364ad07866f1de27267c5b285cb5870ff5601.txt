-module(my_module). % defines a module
-export([add/2]). % exposes add/2 function to other modules

%% Function add/2 accepts two integers and returns the sum of the two numbers
-spec add(integer(), integer()) -> integer().
add(X, Y) ->
  X + Y. % returns sum of X and Y

%% Function add/1 accepts a list of integers and recursively calculates the sum
-spec add(list(integer())) -> integer().
add([]) -> % base case if empty list
  0;
add([H|T]) -> % recursively calculates sum of list elements
  H + add(T). % calls `add` function with remaining list elements 

%% Function add/3 accepts three integers and returns the sum of the three numbers
-spec add(integer(), integer(), integer()) -> integer().
add(X, Y, Z) ->
  add(X, add(Y, Z)). % uses previously defined `add` function to calculate sum of three numbers