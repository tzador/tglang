-module(my_module).

-export([start/0, factorial/1]).

%% This function uses tail recursion to compute the factorial of a given number
%% It takes in an integer as input and returns the factorial of that number

%% Function start/0
%% This function starts the execution of the program
start() ->
    %% Prompting user for input
    io:format("Enter a number: "),
    %% Getting user input and converting it to an integer
    {ok, Input} = io:fread(""),
    Num = list_to_integer(Input),
    %% Calling factorial function with input
    Res = factorial(Num),
    %% Printing result to console
    io:format("The factorial of ~B is: ~B~n", [Num, Res]).

%% Function factorial/1
%% This function calculates the factorial of a number using tail recursion
%% It takes in an integer as input and returns the factorial of that number
%% It also calculates the factorial using an accumulator for efficiency
factorial(N) ->
    factorial(N, 1).

%% Helper function
%% This function does the actual computation using tail recursion and an accumulator
%% It takes in an integer and an accumulator as inputs and returns the factorial of that number
factorial(0, Acc) ->
    Acc;
factorial(N, Acc) ->
    factorial(N-1, N*Acc).