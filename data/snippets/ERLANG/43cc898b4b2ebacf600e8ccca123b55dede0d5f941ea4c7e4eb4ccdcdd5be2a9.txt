%% this is a module declaration
-module(my_module).
%% this is a function declaration
%% with two arguments
%% and a pattern matching definition
%% connecting the arguments to the variables
count_occurrences(List, Elem) ->
    Count = 0,
    case List of
        [Elem | T] -> Count = Count + 1,
                      count_occurrences(T, Elem);
        [H | T] -> count_occurrences(T, Elem)
    end,
    Count.
    
% This function counts the number of occurrences of
% a given element in a list. It uses recursion and
% pattern matching to iterate through the list and
% update the count variable.
    
%%% This is a helper function that checks if a given
%%% element is the same as the head of a list
%%% and returns 1 if it is and 0 if it is not.
%%% Note: this function is not exported.
check_occurrence(H, Elem) ->
    case H of
        Elem -> 1;
        _ -> 0
    end.
    
%% This is an exported function that uses the
%% helper function to count the total number of 
%% occurrences of a given element in a list.
%% It takes in a list and an element and returns
%% the total count as an integer.
total_occurrences(List, Elem) ->
    Count = 0,
    lists:foreach(
        fun(H) ->
            Count = Count + check_occurrence(H, Elem)
        end,
        List
    ),
    Count.
    
%%% This is a recursive function that checks if a 
%%% given element is the same as the head of a list
%%% and if it is, adds it to the accumulator.
%%% It then uses recursion to continue checking
%%% the remainder of the list and updating the
%%% accumulator until there are no more elements
%%% in the list.
%%% Note: this function is not exported.
check_occurrence_recursively(H, Elem, Acc) ->
    case H of
        Elem -> Acc + 1;
        _ -> Acc
    end.

%% This is an exported function that uses the
%% helper function to count the total number of 
%% occurrences of a given element in a list.
%% It takes in a list and an element and returns
%% the total count as an integer. This version
%% uses tail recursion to improve efficiency.
recursive_total_occurrences(List, Elem) ->
    check_occurrence_recursively(
        List,
        Elem,
        0
    ).