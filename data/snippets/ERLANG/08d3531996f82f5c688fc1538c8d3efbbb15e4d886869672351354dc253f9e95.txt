-module(example).
-export([map/2, reduce/2]).

%% map/2 takes a function and a list as input and returns a new list
%% where the function has been applied to each element in the original list
map(_Func, []) ->
    [];
map(Func, [H|T]) ->
    [Func(H)| map(Func, T)].

%% reduce/2 takes a function and a list as input and returns a single value
%% by applying the function to each element of the list in a left-to-right 
%% order, using the first element as the initial accumulator value
reduce(_Func, [H|[]]) ->
    H;
reduce(Func, [H|T]) ->
    Func(H, reduce(Func, T)).