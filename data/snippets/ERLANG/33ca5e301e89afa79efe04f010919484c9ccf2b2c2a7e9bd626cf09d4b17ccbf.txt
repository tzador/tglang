%% A module that contains functions for manipulating matrices
-module(matrix).

%% Export the functions to make them available to other modules
-export([add/2, subtract/2, multiply/2]).

%% Function that adds two matrices together
add(Matrix1, Matrix2) ->
    % Check that the matrices have the same dimensions
    Rows1 = length(Matrix1),
    Rows2 = length(Matrix2),
    Cols1 = length(hd(Matrix1)),
    Cols2 = length(hd(Matrix2)),
    if
        Rows1 =:= Rows2 andalso Cols1 =:= Cols2 ->
            % Use a list comprehension to add corresponding elements in the matrices
            [[X + Y || {X, Y} <- lists:zip(Row1, Row2)] || {Row1, Row2} <- lists:zip(Matrix1, Matrix2)];
        true ->
            % Throw an error if the matrices do not have the same dimensions
            {error, "Matrices must have the same dimensions"}
    end.

%% Function that subtracts one matrix from another
subtract(Matrix1, Matrix2) ->
    % Check that the matrices have the same dimensions
    Rows1 = length(Matrix1),
    Rows2 = length(Matrix2),
    Cols1 = length(hd(Matrix1)),
    Cols2 = length(hd(Matrix2)),
    if
        Rows1 =:= Rows2 andalso Cols1 =:= Cols2 ->
            % Use a list comprehension to subtract corresponding elements in the matrices
            [[X - Y || {X, Y} <- lists:zip(Row1, Row2)] || {Row1, Row2} <- lists:zip(Matrix1, Matrix2)];
        true ->
            % Throw an error if the matrices do not have the same dimensions
            {error, "Matrices must have the same dimensions"}
    end.

%% Function that multiplies two matrices together
multiply(Matrix1, Matrix2) ->
    % Check that the number of columns in Matrix1 is equal to the number of rows in Matrix2
    Cols1 = length(hd(Matrix1)),
    Rows2 = length(Matrix2),
    if
        Cols1 =:= Rows2 ->
            % Create a list of the column indices in Matrix2
            CIndices = lists:seq(1, length(hd(Matrix2))),
            % Use a list comprehension to multiply each element in each row by each column
            [[lists:foldl(fun({X, Y}, Acc) -> X * Y + Acc end, 0, lists:zip(Row, lists:nth(CIndex, Matrix2))) || CIndex <- CIndices] || Row <- Matrix1];
        true ->
            % Throw an error if the number of columns in Matrix1 is not equal to the number of rows in Matrix2
            {error, "Number of columns in Matrix1 must equal number of rows in Matrix2"}
    end.