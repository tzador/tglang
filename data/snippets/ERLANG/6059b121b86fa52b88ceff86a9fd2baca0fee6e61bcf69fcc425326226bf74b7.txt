%% Example module for creating a binary tree
-module(binary_tree).

%% Exported functions
-export([insert/2, search/2, in_order/1]).

%% Record definition for the tree node
-record(node, {key, value, left, right}).

%% Function to insert a key-value pair into the tree
%% Parameters:
%%  Key - the key of the new node
%%  Value - the value of the new node
insert(Key, Value) ->
    %% Call the private function with the root node
    insert(Key, Value, #node{}).

%% Private function to insert a key-value pair into the tree
%% Parameters:
%%  Key - the key of the new node
%%  Value - the value of the new node
%%  Tree - the current tree node
insert(Key, Value, #node{key = K, left = L, right = R} = Tree) ->
    case Key < K of
        true ->
            %% If key is less than the current node key, insert into left subtree
            UpdatedLeft = insert(Key, Value, L),
            %% Update the current node's left subtree
            #node{Tree#node.left = UpdatedLeft};
        false ->
            %% If key is greater than or equal to the current node key, insert into right subtree
            UpdatedRight = insert(Key, Value, R),
            %% Update the current node's right subtree
            #node{Tree#node.right = UpdatedRight}
    end.

%% Function to search for a key in the tree
%% Parameters:
%%  Key - the key to search for
%%  Tree - the current tree node
search(Key, Tree) ->
    case Tree of
        #node{key = K, value = V, left = L, right = R} ->
            case Key < K of
                true ->
                    %% If key is less than the current node key, search left subtree
                    search(Key, L);
                false ->
                    case Key > K of
                        true ->
                            %% If key is greater than the current node key, search right subtree
                            search(Key, R);
                        false ->
                            %% If key is equal to the current node key, return the value
                            V
                    end
            end;
        %% If node is not found, return error message
        _ ->
            {error, "Node not found"}
    end.

%% Function to print the tree in order
%% Parameters:
%%  Tree - the current tree node
in_order(Tree) ->
    case Tree of
        #node{left = L, key = K, value = V, right = R} ->
            %% Print left subtree
            in_order(L),
            %% Print current node
            io:format("Key: ~p, Value: ~p~n", [K, V]),
            %% Print right subtree
            in_order(R);
        _ ->
            %% If node is empty, return empty list
            []
    end.