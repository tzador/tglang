%% Prime Number Generator
-module(prime_numbers).
-export([generate/1, is_prime/1]).

%% Function to generate a list of prime numbers up to a given limit
%% Algorithm used - Sieve of Eratosthenes
%% Example Input: 20
%% Output: [2, 3, 5, 7, 11, 13, 17, 19]
generate(Limit) ->
  %% Create a list of integers from 2 to the given limit
  AllInts = lists:seq(2, Limit),
  %% Initialize an empty list to hold the prime numbers
  Primes = [],
  %% Create a list of booleans with the same length as AllInts
  %% to keep track of whether a number is prime or not
  Booleans = lists:duplicate(length(AllInts), true),
  %% Start at the first number (2) and loop through all numbers
  %% up to the square root of the given limit
  for(N = 2, N =< math:sqrt(Limit), N++) ->
    %% If N is marked as a prime number, add it to the list of Primes
    if get_element(N - 1, Booleans) == true ->
      Primes = [N | Primes],
      %% Mark all multiples of N as non-prime by changing the corresponding
      %% boolean value in the list to false
      for(M = N * N, M =< Limit, M = M + N) ->
        set_element(M - 1, Booleans, false)
      end
    end
  end,
  %% Filter out all non-prime numbers from the list of AllInts
  %% and return the resulting list of Primes in reverse order
  lists:reverse(lists:filter(fun(I) -> get_element(I - 1, Booleans) == true end, AllInts)).

%% Function to check if a given number is prime
is_prime(Number) ->
  %% Numbers less than 2 are not considered prime
  if Number < 2 ->
    false;
  %% Numbers 2 and 3 are prime by default
  Number =:= 2; Number =:= 3 ->
    true;
  %% Check if the given number is divisible by any odd number up to its square root
  %% If it is, then it is not a prime number
  %% Odd numbers starting from 5 are checked since 2 and 3 are already covered
  Number rem 2 =/= 0 andalso Number rem 3 =/= 0 andalso
  for(N = 5, N * N =< Number, N = N + 2) ->
    if Number rem N =:= 0 or Number rem (N + 2) =:= 0 ->
      %% Number is not prime if it is divisible by any number up to its square root
      false;
    %% Otherwise, continue checking until the loop ends
    true -> true
    end
  end.