%% Define a function that takes in two integers and returns their sum
sum(X, Y) ->
    X + Y.

%% Define a recursive function that calculates the factorial of a number
factorial(0) ->
    1;
factorial(N) ->
    N * factorial(N-1).

%% Define a module that prints a greeting message
-module(greet).
-export([say_hello/1]).

%% Define a function that prints a personalized greeting message
say_hello(Name) ->
    io:format("Hello, ~s! Welcome to our program.~n", [Name]).

%% Define a process that performs a simple calculation
-module(calculation).
-export([start/0, calculate/0]).

start() ->
    Pid = spawn(fun calculation:calculate/0),
    io:format("Calculation process started.~n"),
    receive
        {result, Result} ->
            io:format("The result is ~p.~n", [Result])
    end.

calculate() ->
    io:format("Please enter two integers.~n"),
    X = io:get_line(""),
    Y = io:get_line(""),
    {integer_to_list(X), integer_to_list(Y)}= list_to_tuple(X ++ Y),
    Result = sum(X, Y),
    Pid = self(),
    Pid ! {result, Result}.