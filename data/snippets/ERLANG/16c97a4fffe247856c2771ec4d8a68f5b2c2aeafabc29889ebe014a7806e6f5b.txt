%% This is a module in Erlang language that defines a gen_server behavior
-module(gen_server).
-behavior(gen_server).

%% Exported API functions
-export([start_link/2, cast/2, call/3]).

%% Internal state of the gen_server
-record(state, {pid, name, counter}).

%% Callback function for initializing the server state
%% No input parameters, returns a tuple: {ok, State}
init() ->
    % Initialize server state with a pid, name, and counter value of 0
    {ok, #state{pid=self(), name="GenServer", counter=0}}.

%% Callback function for handling incoming messages
%% Input parameters: Request, State
%% Returns: {reply, Reply, NewState}
%%          or {noreply, NewState}
%%          or {stop, Reason, Reply, NewState}
%%          or {continue, NewState}
handle_call(Request, State) ->
    % Update the counter in the server state
    NewState = State#state{counter = State#state.counter + 1},
    % Return a tuple with reply and updated state
    {reply, "Received call: " ++ Request, NewState}.

%% Callback function for handling incoming cast messages
%% Input parameters: Request, State
%% Returns: {noreply, NewState}
%%          or {stop, Reason, NewState}
%%          or {continue, NewState}
handle_cast(Request, State) ->
    % Update the counter in the server state
    NewState = State#state{counter = State#state.counter + 1},
    % Print a message to the console
    io:format("Received cast: ~p~n", [Request]),
    % Return a tuple with noreply and updated state
    {noreply, NewState}.

%% Callback function for handling messages without specific handler
%% Input parameters: Msg, State
%% Returns: {noreply, State}
%%          or {stop, Reason, State}
%%          or {continue, State}
handle_info(Msg, State) ->
    % Print a message to the console
    io:format("Received unknown message: ~p~n", [Msg]),
    % Return a tuple with noreply and unchanged state
    {noreply, State}.

%% Callback function for handling server termination
%% Input parameters: Reason, State
%% Returns: none
terminate(Reason, State) ->
    % Print a message to the console
    io:format("Server terminated: ~p~n", [Reason]),
    % Return undefined
    undefined.

%% API function for starting the server
%% Input parameters: Name, Options
%% Returns: {ok, Pid}
%%          or {error, Error}
start_link(Name, Options) ->
    % Start the gen_server process and return a tuple with the result
    % of calling the init function and the process id
    gen_server:start_link({local, Name}, ?MODULE, [], Options).

%% API function for sending cast messages to the server
%% Input parameters: Pid, Request
%% Returns: void
cast(Pid, Request) ->
    % Send the request to the server process using cast and don't wait for a reply
    gen_server:cast(Pid, Request).

%% API function for sending call messages to the server
%% Input parameters: Pid, Request, Timeout
%% Returns: Response
call(Pid, Request, Timeout) ->
    % Send the request to the server process using call and wait for a reply
    % with the specified timeout
    gen_server:call(Pid, Request, Timeout).