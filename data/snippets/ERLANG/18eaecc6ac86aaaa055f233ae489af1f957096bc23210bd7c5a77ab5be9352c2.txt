-module(my_module).
%% This module represents a shopping cart with functionalities for adding, removing and displaying items.

%% Exported functions
-export([add_item/2, remove_item/2, display_cart/1, total_cost/1]).

%% Internal state variable for cart items
-record(cart, {items=[]}).

%% Function for adding an item to the shopping cart
-spec add_item(item(), cart()) -> cart().
add_item(Item, Cart) ->
    Cart1 = Cart#cart{items = [Item | Cart#cart.items]},
    io:format("Added ~p to the shopping cart.~n", [Item]),
    Cart1.

%% Function for removing an item from the shopping cart
-spec remove_item(item(), cart()) -> cart().
remove_item(Item, Cart) ->
    Cart1 = Cart#cart{items = lists:delete(Item, Cart#cart.items)},
    io:format("Removed ~p from the shopping cart.~n", [Item]),
    Cart1.

%% Function for displaying the shopping cart items
-spec display_cart(cart()) -> ok.
display_cart(Cart) ->
    io:format("These items are currently in your shopping cart:~n"),
    lists:foreach(
        fun(Item) ->
            io:format("~p~n", [Item])
        end,
        Cart#cart.items
    ).

%% Function for calculating the total cost of all cart items
-spec total_cost(cart()) -> number().
total_cost(Cart) ->
    lists:foldl(
        fun(Item, Acc) ->
            Acc + Item#item.price
        end,
        0,
        Cart#cart.items
    ).