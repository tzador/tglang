%% This module defines functions for calculating the Fibonacci sequence
-module(fibonacci).

%% Export the functions to be used outside the module
-export([fib/1, fib/2]).

%% Define the recursive function for calculating the nth Fibonacci number
fib(N) when N =:= 0; N =:= 1 -> N;
fib(N) -> fib(N-1) + fib(N-2). // Define the base case for n=0 and n=1 and then recursive case for n>1

%% Define a basic error to be raised if input is negative
-define(ERR_ARG_NEG, {error, "Negative argument not allowed"}).

%% Define the higher-order function for handling negative arguments
fib(N) when N < 0 -> 
    io:format("Invalid argument provided: ~w~n",[N]),
    ?ERR_ARG_NEG.

%% Define the mapped function for calculating Fibonacci numbers up to a given limit
fib(Limit) ->
    FibList = lists:map(fun fib/1,lists:seq(0,Limit)), // Apply the fib/1 function to a list of numbers from 0 to the specified limit
    lists:filter(fun(N) -> N =/= ?ERR_ARG_NEG end, FibList). // Remove any error values from the resulting list

%% Define the function for calculating the nth Fibonacci number using explicit recursion
fib(N) when N < 0 -> ?ERR_ARG_NEG;
fib(N) -> 
    fib(N, 1, 0).

%% Helper function for explicit recursion, keeps track of the previous and current Fibonacci numbers
fib(0, Prev, _) -> Prev; // If n=0, return the previous Fibonacci number
fib(1, _, Curr) -> Curr; // If n=1, return the current Fibonacci number
fib(N, Prev, Curr) -> 
    fib(N-1, Curr, Prev+Curr). // Recursive case for n>1, updating the previous and current Fibonacci numbers