-module(shopping_cart).  %% creates a module called shopping_cart
-export([add_item/2, remove_item/2, calculate_total/1]). %% specifies which functions should be exported from the module

%% function to add an item to the shopping cart, takes in the current cart and the item to be added
add_item(Cart, Item) ->
    [Item | Cart]. %% adds the item to the beginning of the cart list

%% function to remove an item from the shopping cart, takes in the current cart and the item to be removed
remove_item(Cart, Item) ->
    NewCart = lists:delete(Item, Cart), %% removes the item from the cart list
    case NewCart of
        [] -> empty. %% if the cart is now empty, return the atom 'empty'
        _ -> NewCart %% otherwise, return the updated cart
    end.

%% function to calculate the total cost of all items in the shopping cart, takes in the current cart
calculate_total(Cart) ->
    lists:foldl(fun(Item, Total) -> Total + Item, 0, Cart). %% uses the foldl function to iterate through each item in the cart and add its cost to the total, starting at 0