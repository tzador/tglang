%% This module defines a process that counts the number of words in a given string

-module(count_words).

-behaviour(gen_server).

%% Exported functions
-export([start/1]).

%% Internal functions
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).

%% Record definition
-record(state, {text, num_words}).

%% Function for starting the server process
%% Takes a string as input and starts the process
start(Text) ->
    %% Initilaize state record
    State = #state{text = Text, num_words = 0},
    gen_server:start_link({local, ?MODULE}, ?MODULE, State, []).

%% Callback function for initializing state
%% Returns {ok, State} tuple
init(State) ->
    {ok, State}.

%% Callback function for handling synchronous calls
%% Takes Request, From and State parameters as input
handle_call(_Request, _From, State) ->
    %% Count number of words in the string
    Num_Words = length(string:tokens(State#state.text, " ")),
    %% Update state record
    New_State = State#state{num_words = Num_Words},
    {reply, ok, New_State}.

%% Callback function for handling asynchronous calls
%% Takes Message and State parameters as input
handle_cast(_Message, State) ->
    %% No action required for our functionality
    {noreply, State}.

%% Callback function for handling system messages
%% Takes Info and State parameters as input
handle_info(_Info, State) ->
    %% No action required for our functionality
    {noreply, State}.

%% Callback function for terminating the server process
%% Takes Reason and State parameters as input
terminate(_Reason, _State) ->
    ok.

%% Callback function for handling code changes
%% Takes Old_Version, State and Extra parameters as input
%% Returns {ok, New_Version, New_State} tuple
code_change(_Old_Version, State, _Extra) ->
    {ok, State}.