-module(family_tree).
-export([distance/2, cousin/2, related/2]).

%%% Internal functions %%%
calculate_distance(RelaX, RelaY, 0) when RelaX == RelaY ->
    0;
calculate_distance(RelaX, RelaY, Distance) ->
    ParentX = parent(RelaX),
    ParentY = parent(RelaY),
    calculate_distance(ParentX, ParentY, Distance + 1).

calculate_common_ancestor(_, [], _) ->
    [];
calculate_common_ancestor(RelaX, [RelaY|Rest], AncestorAcc) ->
    case find_common_ancestor(RelaX, RelaY) of
        undefined -> AncestorAcc;
        CommonAncestor -> calculate_common_ancestor(RelaX, Rest, [CommonAncestor|AncestorAcc])
    end.

%%% Public functions %%%
distance(RelaX, RelaY) ->
    case find_common_ancestor(RelaX, RelaY) of
        undefined -> undefined;
        CommonAncestor -> calculate_distance(RelaX, CommonAncestor, 0) + calculate_distance(RelaY, CommonAncestor, 0)
    end.

cousin(RelaX, RelaY) ->
    case distance(RelaX, RelaY) of
        undefined -> undefined;
        0 -> 0;
        Distance -> Distance / 2
    end.

related(RelaX, RelaY) ->
    case distance(RelaX, RelaY) of
        undefined -> "Not related";
        0 -> "Same person";
        Distance ->
            case Distance of
                1 -> "Sibling";
                2 -> "First cousin";
                _ -> "Distant relative"
            end
    end.