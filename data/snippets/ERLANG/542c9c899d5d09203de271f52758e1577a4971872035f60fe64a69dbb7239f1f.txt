%% Defining a function that computes the nth fibonacci number
-spec fibonacci(integer()) -> integer().
fibonacci(0) -> 0; %% Base case
fibonacci(1) -> 1; %% Base case
fibonacci(N) when N > 1 -> %% Recursive case
    fibhelper(1, 0, N). %% Calling helper function with initial values 1 (f0) and 0 (f1)
-ifdef(TEST). %% Optional test code (can be removed if not needed)
fibtest() ->
    0 = fibonacci(0),
    1 = fibonacci(1),
    1 = fibonacci(2),
    1 = fibonacci(3),
    2 = fibonacci(4),
    3 = fibonacci(5),
    5 = fibonacci(6),
    8 = fibonacci(7),
    13 = fibonacci(8),
    21 = fibonacci(9).
-endif.
-spec fibhelper(integer(), integer(), integer()) -> integer().
fibhelper(Fm2, Fm1, 0) -> %% Recursive case (base case)
    Fm2;
fibhelper(Fm2, Fm1, 1) -> %% Recursive case (base case)
    Fm1;
fibhelper(Fm2, Fm1, N) when N > 1 -> %% Recursive case
    Fn = Fm2 + Fm1, %% Computing the new fibonacci number
    fibhelper(Fm1, Fn, N-1). %% Recursively calling the helper function to compute the next fibonacci number
-ifdef(TEST). %% Optional test code (can be removed if not needed)
fibhelpertest() ->
    0 = fibhelper(0, 1, 0),
    1 = fibhelper(0, 1, 1),
    1 = fibhelper(0, 1, 2),
    2 = fibhelper(0, 1, 3),
    3 = fibhelper(0, 1, 4),
    5 = fibhelper(0, 1, 5),
    8 = fibhelper(0, 1, 6),
    13 = fibhelper(0, 1, 7),
    21 = fibhelper(0, 1, 8).
-endif.