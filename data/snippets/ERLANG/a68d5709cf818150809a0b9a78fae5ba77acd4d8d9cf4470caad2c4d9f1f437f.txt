%%This code snippet generates a binary search tree and performs a search on it

-module(binary_search_tree).
-export([insert/2, search/2]). %specifies the export functions

-record(node, {key = none, value = none, left = none, right = none}). %defines a record type 'node' with key, value, left and right fields

%% @doc Inserts a new node with given key and value into the binary search tree
%% @end
%% @spec insert(any(), any()) -> node()
insert(Key, Value) ->
    insert_node(Key, Value, none).

%% @hidden
%% insert_node(Key, Value, Tree) -> node()
insert_node(Key, Value, none) ->
    #node{key = Key, value = Value, left = none, right = none};

insert_node(Key, Value, Tree = #node{key = NodeKey, left = Left, right = Right}) when Key < NodeKey ->
    #node{key = NodeKey, value = Left, left = insert_node(Key, Value, Left), right = Right};

insert_node(Key, Value, Tree = #node{key = NodeKey, left = Left, right = Right}) when Key > NodeKey ->
    #node{key = NodeKey, value = Left, left = Left, right = insert_node(Key, Value, Right)};

insert_node(Key, Value, Tree = #node{key = NodeKey, left = Left, right = Right}) when Key == NodeKey ->
    #node{key = NodeKey, value = Value, left = Left, right = Right};

%% @doc Searches for a node with given key in the binary search tree
%% @end
%% @spec search(any(), node()) -> any()
search(Key, Tree) ->
    search_node(Key, Tree).

%% @hidden
%% search_node(Key, Tree) -> any()
search_node(_, none) ->
    none;

search_node(Key, #node{key = NodeKey, value = Value, left = Left, right = Right}) when Key < NodeKey ->
    search_node(Key, Left);

search_node(Key, #node{key = NodeKey, value = Value, left = Left, right = Right}) when Key > NodeKey ->
    search_node(Key, Right);

search_node(Key, #node{key = NodeKey, value = Value, left = Left, right = Right}) when Key == NodeKey ->
    Value.