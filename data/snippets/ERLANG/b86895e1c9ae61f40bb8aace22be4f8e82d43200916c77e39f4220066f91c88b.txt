%% Module for creating a doubly linked list
-module(doubly_linked_list).

%% Exported functions
-export([new/0, insert_front/2, insert_back/2, delete_front/1, delete_back/1, search_by_index/2, search_by_value/2]).

%% Create an empty list
new() -> {list, null, null}.

%% Insert an element at the front of the list
insert_front(Element, {list, Front, Back}) ->
	{list, [{element, Element, Front}, | Front], Back}.

%% Insert an element at the back of the list
insert_back(Element, {list, Front, Back}) ->
	{list, Front, [{element, Element, Back}, | Back]}.

%% Delete the element at the front of the list
delete_front({list, [{element, _, Front} | Tail], Back}) ->
	{list, Front, Back, Tail}.

%% Delete the element at the back of the list
delete_back({list, Front, [{element, _, Back} | Tail]}) ->
	{list, Front, Back, Tail}.

%% Search for an element by its index
search_by_index(Index, {list, Front, Back}) when Index > 0, Index =< length(Front) ->
	element(Index, Front);
search_by_index(Index, {list, Front, Back}) when Index > length(Front), Index =< (length(Front) + length(Back)) ->
	element(Index - length(Front), Back);
search_by_index(_, _) ->
	null.

%% Search for an element by its value
search_by_value(Value, {list, Front, Back}) ->
	find_element(Value, Front, Back).

%% Function to recursively search for an element by its value
find_element(Value, [{element, Value, _} | _], _) ->
	true;
find_element(Value, [{element, _, Next} | Tail], Back) ->
	find_element(Value, Tail, Back);
find_element(Value, [{element, _, _} | Tail], [{element, Value, _} | _]) ->
	true;
find_element(Value, [{element, _, _} | Tail], [_ | Back]) ->
	find_element(Value, Tail, Back);
find_element(_, [], []) ->
	null.