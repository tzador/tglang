-module(complex_math).
-export([factorial/1, fibonacci/1, matrix_multiply/2, check_squares/1]).

% Calculates the factorial of a given number
factorial(0) -> 1;
factorial(N) -> N * factorial(N-1).

% Calculates the n-th number in the Fibonacci sequence
fibonacci(0) -> 1;
fibonacci(1) -> 1;
fibonacci(N) -> fibonacci(N-1) + fibonacci(N-2).

% Multiplies two matrices of equal size
matrix_multiply(A, B) -> lists:zipwith(fun(A_row, B_col) -> lists:sum(lists:zipwith(fun(X,Y) -> X*Y end, A_row, B_col)) end, A,lists:transpose(B)).

% Checks if a list of numbers are perfect squares
check_squares(Numbers) -> lists:map(fun(N) -> Case = trunc(math:sqrt(N)), Case*Case == N end, Numbers).