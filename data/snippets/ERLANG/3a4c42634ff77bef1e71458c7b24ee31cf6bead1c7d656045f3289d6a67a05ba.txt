-module(examples).
-export([fib/1,euler/0]).
 
%% Function: fib/1
%% Parameters:
%%      N - integer
%% Returns:
%%      the Nth number in the Fibonacci sequence
%%
%% Description:
%%      This function calculates the Nth number in the Fibonacci
%%      sequence using recursion.
fib(0) -> 0; % Base case
fib(1) -> 1; % Base case
fib(N) -> fib(N-1) + fib(N-2). % Recursive case
 
%% Function: euler/0
%% Returns:
%%      the value of Euler's number, e, calculated using a series expansion
%%
%% Description:
%%      This function calculates the value of Euler's number, e, by
%%      summing the terms of the series expansion 1 + 1/1! + 1/2! + 1/3! + ...
euler() ->
    Acc = 0,
    %% Define an infinite list of the factorial of
    %% each element in the series
    Fact = [1/X || X <- lists:seq(1, infinity)],
    %% Define an infinite list of the terms in the series
    Terms = [1/element(I, Fact) || I <- lists:seq(1, infinity)],
    %% Use a fold function to sum the terms
    lists:foldl(fun(X, Y) -> X + Y end, Acc, Terms).