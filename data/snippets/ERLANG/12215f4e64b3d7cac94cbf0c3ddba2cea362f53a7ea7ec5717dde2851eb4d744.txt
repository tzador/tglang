-module(intervals).
-export([merge_intervals/1]).
%%
%% Merge Intervals function takes a list of intervals and merges overlapping intervals
%% in the initial list.
%%
merge_intervals(Intervals) ->
  %% Sort the list of intervals by the starting value
  SortedIntervals = lists:sort(fun({A,_}, {B,_}) -> A < B end, Intervals),
  %% Call the helper function with initial values
  merge_intervals_helper(SortedIntervals, {0,0}, []).

%% Helper function to merge the intervals one by one
merge_intervals_helper([{Start, End} | Tail], {CurrStart, CurrEnd}, Result) ->
  %% If the current interval overlaps with the previous one, update the end value
  if Start =< CurrEnd ->
    merge_intervals_helper(Tail, {CurrStart, max(End, CurrEnd)}, Result);
  true ->
    %% Otherwise, add the current interval to the Result list
    merge_intervals_helper(Tail, {Start, End}, Result ++ [{CurrStart, CurrEnd}])
  end;
%% Base case - no more intervals to merge, return the Result list
merge_intervals_helper([], _, Result) ->
  Result.