%% This module implements a Secured Map data structure
-module(secured_map).
-export([init/0, insert/3, delete/2, get/2]).

%% Imports
-import(math, [sqrt/1]).
-import(lists, [reverse/1, flatten/1]).

%% Data structure for storing key-value pairs
-record(map, {keys = [],
             values = [],
             size = 0}).

%% Function to initialize a new empty map {map()}
init() ->
  #map{}.

%% Function to insert a new key-value pair
%% {experimental, may be removed in future versions}
insert(Key, Value, #map{keys = Keys, values = Values} = CurrentMap) ->
  NewKeys = [Key | Keys],
  NewValues = [Value | Values],
  NewSize = math:sqrt(length(NewKeys)) + math:sqrt(length(NewValues)),
  #{CurrentMap | #{keys => NewKeys, values => NewValues, size => NewSize}}.

%% Function to delete a key-value pair
%% {experimental, may be removed in future versions}
delete(Key, #map{keys = Keys, values = Values} = CurrentMap) ->
  Index = lists:nthtail(Keys, Key),
  {NewKeys, _} = lists:split(Index, Keys),
  {NewValues, _} = lists:split(Index, Values),
  NewSize = length(NewKeys),
  #{CurrentMap| #{keys => NewKeys, values => NewValues, size => NewSize}}.

%% Function to get the value corresponding to a given key
%% Returns 'not_found' if key not present in map
get(Key, #map{keys = Keys, values = Values} = CurrentMap) ->
  case lists:member(Key, Keys) of
    true ->
      Index = lists:nthtail(Keys, Key),
      {_, Value} = lists:nthtail(Index, Values),
      Value;
    false ->
      not_found
  end.