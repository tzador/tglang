-module(lists). %% Creates a module called 'lists'

-export([filter/2]). %% Exports the 'filter' function

filter(F, L) -> %% Defines the 'filter' function with inputs 'F' (a function) and 'L' (a list)
    case L of %% Start of a conditional statement for the list 'L'
        [] -> []; %% If the list is empty, return an empty list
        [H|T] -> case F(H) of %% Otherwise, apply the function 'F' to the head element of the list and start another conditional statement
            true -> [H|filter(F, T)]; %% If the output of 'F' is true, add the head element to the output list and recursively call 'filter' on the rest of the list
            false -> filter(F, T) %% If the output of 'F' is false, skip the head element and recursively call 'filter' on the rest of the list
        end
    end. %% End of outer conditional statement