%% This is a comment in ERLANG
-module(my_module).  % defining a module
-export([my_function/1, my_other_function/2]).  % exporting functions

my_function(Input1) ->  % function definition
    case Input1 of  % pattern matching
        [] ->  % if the input is an empty list
            %% do something
            ok;  % return ok atom
        [Head|Tail] ->  % if the input is a non-empty list
            %% do something
            [Head|my_function(Tail)];  % call function recursively on tail and prepend head
        _ ->  % if the input does not match any patterns
            %% do something
            error  % return error atom
    end.  % end of case statement

my_other_function(Param1, Param2) ->  % function definition
    case {Param1, Param2} of  % pattern matching
        {{atom1, Param2}, {Param1, Param2}} ->  % if both parameters match specific atoms
            %% do something
            {ok, Param1, Param2};  % return tuple with ok atom and parameters
        {{atom2, _}, _} ->  % if first parameter matches specific atom
            %% do something
            error;  % return error atom
        {_} ->  % if tuple contains only one parameter
            %% do something
            ok  % return ok atom
    end.  % end of case statement