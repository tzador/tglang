%% Module definition
-module(example).

%% Exported functions
-export([factorial/1, fibonacci/1, is_prime/1]).

%% Calculates the factorial of a number
%% @input: N (integer)
%% @output: N! (integer)
factorial(N) ->
    case N of
        0 -> 1;
        _ -> N * factorial(N-1)
    end.

%% Calculates the nth number in the Fibonacci sequence
%% @input: N (integer)
%% @output: Nth number in the Fibonacci sequence (integer)
fibonacci(N) ->
    case N of
        0 -> 0;
        1 -> 1;
        _ -> fibonacci(N-1) + fibonacci(N-2)
    end.

%% Checks if a number is prime
%% @input: N (integer)
%% @output: true/false (boolean)
is_prime(N) ->
    %% Uses a helper function to check if N is divisible by any number between 2 and its square root
    check_divisible(N, trunc(math:sqrt(N))).

%% Helper function to check if a number is divisible by any number between 2 and R
%% @input: N (integer), R (integer)
%% @output: true/false (boolean)
check_divisible(1, R) ->
    true; %% Base case, 1 is not considered a prime number
check_divisible(N, 2) ->
    N rem 2 =/= 0; %% If N is divisible by 2, it is not prime
check_divisible(N, R) ->
    N rem R =/= 0 andalso check_divisible(N, R-1). %% Recursively checks if N is divisible by any number between 2 and R-1