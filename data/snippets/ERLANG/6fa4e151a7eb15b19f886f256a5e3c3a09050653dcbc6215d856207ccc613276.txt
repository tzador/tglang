-module(treesort).

-export([sort/1]).
%% define the sort function
sort(L) ->
  lists:flatten(sort_tree(build_tree(L))).
  
%% define the build_tree function
build_tree(L) ->
  build_tree(L, []).
%% define the build_tree function with accumulator variable
build_tree([], Tree) ->
  Tree;
build_tree([H|T], Tree) ->
  insert_node(H, build_tree(T, Tree)).
  
%% define the insert_node function
insert_node(Node, undefined) ->
  {Node, undefined, undefined};
insert_node(Node, {Val, Left, Right}) ->
  if
    Node < Val ->
      {Val, insert_node(Node, Left), Right};
    Node > Val ->
      {Val, Left, insert_node(Node, Right)}
  end.
  
%% define the flatten function
flatten(Tree) ->
  flatten(Tree, []).
%% define the flatten function with accumulator variable
flatten(undefined, List) ->
  List;
flatten({Val, Left, Right}, List) ->
  flatten(Left, [Val|flatten(Right, List)]).