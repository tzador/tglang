%%% This module implements a hash table structure using Erlang
%%% Record syntax
-module(hash_table).

%%% Internal representation of the hash table, using the 'record' data type
%%% and the syntax for defining records:
%%% `record(NAME, FIELDS)`
-record(hash_table, {size, buckets}).

%%% Function to create a new hash table with an initial size
%%% Input: Size of the hash table
%%% Output: Hash table record with specified size and empty buckets
new(Size) ->
    #hash_table{size=Size, buckets=lists:duplicate(Size, [])}.

%%% Function to insert a key-value pair into the hash table
%%% Input: Hash table record, key, value
%%% Output: Hash table record with key-value pair inserted
insert(Table, Key, Value) ->
    BucketIndex = hash(Key, size(Table)),
    Bucket = element(BucketIndex + 1, buckets(Table)),
    NewBucket = lists:keystore(Key, 1, Bucket, {Key, Value}),
    UpdatedBuckets = setelement(BucketIndex + 1, buckets(Table), NewBucket),
    #hash_table{size=size(Table), buckets=UpdatedBuckets}.

%%% Function to retrieve a value from the hash table based on a key
%%% Input: Hash table record, key
%%% Output: Value corresponding to the specified key
get(Table, Key) ->
    BucketIndex = hash(Key, size(Table)),
    Bucket = element(BucketIndex + 1, buckets(Table)),
    lists:keyfind(Key, 1, Bucket).

%%% Function to remove a key-value pair from the hash table
%%% Input: Hash table record, key
%%% Output: Hash table record with the specified key-value pair removed
remove(Table, Key) ->
    BucketIndex = hash(Key, size(Table)),
    Bucket = element(BucketIndex + 1, buckets(Table)),
    NewBucket = lists:keydelete(Key, 1, Bucket),
    UpdatedBuckets = setelement(BucketIndex + 1, buckets(Table), NewBucket),
    #hash_table{size=size(Table), buckets=UpdatedBuckets}.

%%% Function to calculate the hash value for a key
%%% Input: Key, size of hash table
%%% Output: Hash value (integer)
hash(Key, Size) ->
    crypto:hash(sha, term_to_binary(Key)) rem Size.