%%% Initial Value Optimization Example

-module(io_example).
-export([opt/1]).

%% Function to optimize a list of values
opt(List) ->
    Result = calculate(List),
    %% Check if result meets minimum threshold
    if
        Result < 10 ->
            %% Return minimum value as result
            10;
        Result > 100 ->
            %% Return maximum value as result
            100;
        true ->
            %% Return the calculated value
            Result
    end.


%% Helper function to calculate the sum of a list of values
calculate(List) ->
    %% Initialize variables
    Sum = 0,
    Length = length(List),
    %% Loop through the list and calculate the sum
    %% Iteration starts from the end to optimize for tail recursion
    calculate_helper(List, Length, Sum).


%% Helper function for tail recursion
calculate_helper([], _Length, Sum) ->
    Sum;
calculate_helper([Head|Tail], Length, Sum) ->
    %% Add the current value to the sum
    NewSum = Sum + Head,
    %% Reduce the length by 1
    NewLength = Length - 1,
    %% Tail recursion
    calculate_helper(Tail, NewLength, NewSum).