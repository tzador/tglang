%% This code snippet implements a gen_server in Erlang

-module(example_server). %% Creating a module called 'example_server'

-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2]). %% Exporting all the necessary functions

-behaviour(gen_server). %% Utilizing the gen_server behaviour

%% Defining the state of the server as an empty list
%% State can also be defined as any other data type such as a tuple, map or record
%% For simplicity, an empty list will be used

-record(state, {history = [], current_state}). %% Defining a record for the state

%% Function to initialize the server with the given arguments
%% In this case, the arguments will be a list of options for the server
init(Options) ->
    {ok, #state{history = [], current_state = Options}, 0}. %% Returning the initial state as the third argument

%% Function to handle incoming synchronous calls to the server
%% Calls will be made using the gen_server:call/2 or gen_server:call/3 functions
%% The arguments received will be the request, the caller process and the server state
handle_call(Request, _From, State) ->
    %% Making some changes to the state based on the received request
    NewState = State#state{history = State#state.history ++ [Request]},
    {reply, Response, NewState}. %% Returning a response to the caller and the updated state

%% Function to handle incoming asynchronous casts to the server
%% Casts will be made using the gen_server:cast/2 or gen_server:cast/3 functions
%% The arguments received will be the request and the server state
handle_cast(Request, State) ->
    %% Making some changes to the state based on the received request
    NewState = State#state{history = State#state.history ++ [Request]},
    {noreply, NewState}. %% Returning 'noreply' since there is no need to reply to the caller

%% Function to handle any other messages received by the server
%% In this case, only a 'timeout' message will be handled and no changes will be made to the state
handle_info(timeout, State) ->
    {noreply, State}.

%% Function to be called when the server is being terminated
%% The second argument 'Reason' will contain the reason for termination
terminate(_Reason, _State) ->
    ok.