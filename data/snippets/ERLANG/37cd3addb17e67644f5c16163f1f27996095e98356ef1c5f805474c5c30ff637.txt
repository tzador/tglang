-module(example).
-export([module_stats/0, compute_average/1, add_to_list/2]).

%% Function to calculate module stats
module_stats() ->
  Total_lines = 0,
  Total_functions = 0,
  Total_calls = 0,

  %% Get list of functions
  Functions = module_info(functions),
  %% Loop through each function, get number of calls and increment total_calls
  lists:foreach(fun(F) ->
    Calls = erlang:apply(?MODULE, F, []),
    Total_calls = Total_calls + Calls
  end, Functions),

  %% Get list of lines for each function
  Function_lines = module_info(lines),
  %% Sum up total lines for all functions
  Total_lines = lists:sum(Function_lines),

  %% Get number of functions
  Total_functions = length(module_info(exports)),

  %% Print out results
  io:format("Module Stats:~n"),
  io:format("Total Lines: ~p~nTotal Functions: ~p~nTotal Calls: ~p~n", [Total_lines, Total_functions, Total_calls]).

%% Function to compute the average of a list
compute_average(List) ->
  %% Check if list is empty
  case List of
    [] -> 0;
    _ ->
      %% Calculate sum of list
      Sum = lists:sum(List),
      %% Calculate length of list
      Length = length(List),
      %% Calculate average
      Average = Sum / Length
  end.

%% Function to add elements to a list
add_to_list(Element, List) ->
  %% Check element type and add to list only if it is a number
  case Element of
    Number when is_number(Number) ->
      %% Append element to list
      [Element | List];
    _ ->
      %% Print error message if element is not a number
      io:format("Error: ~p is not a number.~n", [Element]),
      %% Return original list
      List
  end.