-module(banking).
-export([transfer/3, show_balance/1]).

%% This module represents a basic banking system in ERLANG

%% Function to transfer money from one account to another
%% Account balances are stored in a map
%% Parameters:
%%  1. From account
%%  2. To account
%%  3. Amount to transfer
transfer(From, To, Amount) ->
    %% Make sure the accounts exist in the map
    case maps:is_key(From, AccountBalances) of
        true ->
            case maps:is_key(To, AccountBalances) of
                true ->
                    %% Get the current balance of the From account
                    case maps:get(From, AccountBalances) of
                        Balance when Balance >= Amount ->
                            %% Subtract the amount from the current balance
                            NewFromBalance = Balance - Amount,
                            %% Add the amount to the To account
                            NewToBalance = maps:get(To, AccountBalances) + Amount,
                            %% Update the map with the new balances
                            NewAccountBalances = maps:update(From, NewFromBalance, AccountBalances),
                            NewAccountBalances2 = maps:update(To, NewToBalance, NewAccountBalances),
                            %% Return the new map with updated balances
                            {ok, NewAccountBalances2};
                        Balance ->
                            %% If the From account does not have enough balance, return an error
                            {error, "Not enough balance"}
                    end;
                false ->
                    %% If the To account does not exist, return an error
                    {error, "To account does not exist"}
            end;
        false ->
            %% If the From account does not exist, return an error
            {error, "From account does not exist"}
    end.

%% Function to show the current balance of an account
%% Parameters:
%%  1. Account
show_balance(Account) ->
    %% Make sure the account exists in the map
    case maps:is_key(Account, AccountBalances) of
        true ->
            %% Get the current balance and return it
            {ok, maps:get(Account, AccountBalances)};
        false ->
            %% If the account does not exist, return an error
            {error, "Account does not exist"}
    end.

%% A map to store the account balances
AccountBalances = #{1 => 5000, 2 => 10000, 3 => 15000}.