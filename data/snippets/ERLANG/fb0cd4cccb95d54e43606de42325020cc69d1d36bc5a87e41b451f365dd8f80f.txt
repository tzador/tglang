%%% This is a module that implements a binary search algorithm in Erlang

-module(binary_search).

%% Public functions

%% The binary_search function takes in a sorted list and a value to search for and returns the index of the value in the list.
-spec binary_search([number()], number()) -> integer().
binary_search(List, Value) ->
    %% Define initial low and high indices and the middle index
    Low = 0,
    High = length(List) - 1,
    Middle = trunc((Low + High) / 2),
    
    %% Call the helper function with the initial indices
    search(List, Middle, Low, High, Value).

%% Private functions

%% The helper function takes in the list, middle index, low index, high index and value to search for and recursively searches for the value in the list.
-spec search([number()], integer(), integer(), integer(), number()) -> integer().
%% Base case - if the low index is greater than the high index, the value is not in the list
search(_, _, Low, High, _) when Low > High ->
    -1;
%% Base case - if the value at the middle index is equal to the value we are searching for, return the middle index
search(List, Middle, _, _, Value) when lists:nth(Middle, List) == Value ->
    Middle;
%% Recursive case - if the value at the middle index is less than the value we are searching for, search in the right half of the list
search(List, Middle, Low, High, Value) when lists:nth(Middle, List) < Value ->
    search(List, trunc((Middle + 1 + High) / 2), Middle + 1, High, Value);
%% Recursive case - if the value at the middle index is greater than the value we are searching for, search in the left half of the list
search(List, Middle, Low, High, Value) when lists:nth(Middle, List) > Value ->
    search(List, trunc((Low + Middle - 1) / 2), Low, Middle - 1, Value).

%% Example usage:

% Create a sorted list
List = [1, 3, 5, 7, 9].

% Search for the value 5
binary_search(List, 5).

% Output:
% 2