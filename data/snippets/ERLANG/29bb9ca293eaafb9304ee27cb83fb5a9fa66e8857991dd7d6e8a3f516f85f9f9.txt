%% This module implements the Sieve of Eratosthenes algorithm for finding prime numbers up to a given limit
-module(prime_generator).
-export([generate/1]).

%% The generate/1 function takes a limit as input and returns a list of prime numbers up to that limit
%% If the limit is 2 or less, returns an empty list
%% Otherwise, creates a list of consecutive integers from 2 up to and including the limit
%% Then, uses a recursive function to filter out all non-prime numbers from the list
%% Finally, returns the filtered list of prime numbers
generate(Limit) ->
    case Limit of
        Limit when Limit < 2 -> [];
        Limit when Limit =:= 2 -> [2];
        _ -> sieve([2 | lists:seq(3, Limit, 2)], [])
    end.

%% The sieve/2 function takes in two lists, the first being a list of all integers from 2 up to the limit
%% The second list is initially empty, but will eventually hold all the prime numbers that have been found
%% If the first list is empty, the second list is returned as the final filtered list of prime numbers
%% Otherwise, the first element of the first list is taken as a prime number
%% Then, all multiples of that prime number are removed from the first list
%% This recursive function continues until the first list is empty
%% Then, returns the filtered list of prime numbers
sieve([], Primes) ->
    Primes;
sieve([H | T], Primes) ->
    sieve([X || X <- T, X rem H =/= 0], [H | Primes]).