-module(graph).

-export([new/0, add_vertex/2, add_edge/3, get_vertex/2, get_edge/3, get_neighbors/2, get_all_vertices/1]).

%Module for creating and manipulating a graph data structure

%% Data structure for representing the graph
-record(graph, {vertices = [], edges = []}).

%% Constructs a new empty graph
new() ->
    #graph{}.

%% Adds a vertex to the graph
% Vertex: The vertex to be added
% Graph: The graph to add the vertex to
add_vertex(Vertex, #graph{vertices = Vertices} = Graph) ->
    Graph#graph{vertices = [Vertex | Vertices]}.

%% Adds an edge between two vertices in the graph
% Vertex1: The first vertex of the edge
% Vertex2: The second vertex of the edge
% Graph: The graph to add the edge to
add_edge(Vertex1, Vertex2, #graph{edges = Edges} = Graph) ->
    Graph#graph{edges = [{Vertex1, Vertex2} | Edges]}.

%% Gets a specific vertex from the graph
% Id: The id of the vertex to retrieve
% Graph: The graph to retrieve the vertex from
get_vertex(Id, #graph{vertices = Vertices}) ->
    lists:nth(Id, Vertices, none).

%% Gets a specific edge from the graph
% From: The starting vertex of the edge
% To: The ending vertex of the edge
% Graph: The graph to retrieve the edge from
get_edge(From, To, #graph{edges = Edges}) ->
    lists:nth(1, lists:filter(fun({V1, V2}) -> V1 == From end, Edges), {none}).

%% Gets all neighbors of a specific vertex in the graph
% Vertex: The vertex to retrieve neighbors for
% Graph: The graph to retrieve neighbors from
get_neighbors(Vertex, #graph{edges = Edges}) ->
    [To || {Vertex, To} <- Edges].

%% Gets all vertices in the graph
% Graph: The graph to retrieve vertices from
get_all_vertices(#graph{vertices = Vertices}) ->
    Vertices.