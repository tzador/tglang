%% This is a commented line in ERLANG, denoted by double percentage signs %%
-module(complex_code).
%% Defines the module name, which should be the same as the file name %%

-export([complex_function/1]).
%% Specifies the function name and the number of parameters it takes %%

%% This is a helper function which takes two parameters and returns the sum %%
helper_function(A, B) ->
  A + B.

%% This is the main function, which takes one parameter %%
complex_function(Parameter) ->
  %% Uses pattern matching to check for specific parameter values %%
  case Parameter of
    %% If the parameter is a number %%
    Number when is_number(Number) ->
      %% Calls the helper function with the number equal to both parameters %%
      Sum = helper_function(Number, Number),
      %% Uses recursion to continue calling the helper function until the sum equals 100 %%
      if Sum =:= 100 -> Sum;
        true -> complex_function(Sum) %% Recursive call with the new sum %%
      end;
    %% If the parameter is a list %%
    List when is_list(List) ->
      %% Uses the lists:sum function to find the sum of all elements in the list %%
      Sum = lists:sum(List),
      %% Uses the lists:map function to double all elements in the list %%
      Doubled_List = lists:map(fun(Element) -> Element*2 end, List),
      %% Uses the lists:reverse function to reverse the order of elements in the list %%
      Reversed_List = lists:reverse(Doubled_List),
      %% Uses the lists:nth function to retrieve the last element in the list %%
      Last_Element = lists:nth(1, Reversed_List),
      %% Uses recursion to call the main function again with the last element %%
      complex_function(Last_Element);
    %% If the parameter is anything else %%
    _ -> throw(error)
  end.