%%% Set up a new Erlang node with a custom cookie.
%%% This node will be connected to other nodes in a distributed network.
%%% First, set the node name and the cookie.
%%%
%%% Usage:
%%% erlang -sname my_node_name -setcookie my_cookie

%% Set the node name and cookie.
%% This will be used when connecting to other nodes.
%% The node name must be enclosed in single quotes.
-name 'my_node_name' -setcookie my_cookie.

%% Load the necessary standard libraries.
-application(snmp).
-application(crypto).
 %% Specify any additional applications to be loaded.
 %% This can be useful for custom functionality or libraries.

%% Specify the load order of the applications.
%% This determines the order in which the applications will be started.
%% The applications will be started in the order specified here.
-applications([kernel, stdlib, inets, snmp, crypto]).

%% Start the applications.
ok = application:start(kernel).
ok = application:start(stdlib).
ok = application:start(inets).
ok = application:start(snmp).
ok = application:start(crypto).

%%% Now that the node is set up and connected to other nodes,
%%% you can start executing Erlang code and communicating with other nodes.
%%% For example, you can use the distribution library to send messages to other nodes.
%%% This snippet demonstrates sending a message to a node named 'other_node'.
%%% First, establish a connection to the other node.
OtherNode = net_kernel:connect_node('other_node').

%%% Then, use the distribution library to send a message.
%%% The message can be any Erlang term.
Distribution:send(OtherNode, my_message).

%%% To receive messages sent to this node, use the distribution library as well.
%%% The function 'listen' takes a callback function as an argument,
%%% which will be called each time a new message is received.
listen(Function) ->
  receive
    Message ->
      Function(Message),
      listen(Function)
  end.

%%% Using the 'listen' function is helpful for handling incoming messages
%%% and performing custom actions based on the content of the message.
%%% For example, you can use pattern matching to handle different types of messages.
listen(fun
  {my_custom_message, Data} ->
    io:format("Received custom message: ~p~n", [Data]);
  {another_custom_message, OtherData} ->
    io:format("Received another custom message: ~p~n", [OtherData]);
  _ ->
    io:format("Received unknown message.~n")
end).