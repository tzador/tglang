%%% Author: John Smith
%%% Date: 09/02/2021
%%% Description: This module implements a simple stack data structure in ERLANG.

-module(stack).
-export([new/0, push/2, pop/1]).

%% Creates a new empty stack.
new() ->
    {[], 0}.

%% Pushes an element onto the stack.
%% @param Stack the current stack
%% @param Element the element to be pushed
push({Stack, Size}, Element) ->
    {[Element | Stack], Size + 1}.

%% Pops the top element from the stack.
%% @param Stack the current stack
pop({[Head | Tail], Size}) ->
    {Head, {[Tail], Size - 1}}.

%% Pops all elements from the stack and returns them as a list.
%% @param Stack the current stack
pop_all({Stack, Size}) ->
    pop_all({[], Stack, Size}).

%% Helper function for pop_all/1.
pop_all(Result, _, 0) ->
    Result;
pop_all({Acc, Stack, Size}, _, Len) when Len > 0 ->
    [{_, {NewStack, _}} | Rest] = [pop(Stack) || _ <- lists:seq(1, Size)],
    pop_all({Acc ++ Rest, NewStack, Size - 1}, [], Len - 1).