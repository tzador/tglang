-module(complex_module).

%% This module contains a complex function that calculates
%% the product of two matrices.
-export([multiply_matrices/2]).

%% Helper function to transpose a matrix
-define(transpose(Matrix), [[lists:nth(N, Row) || Row <- Matrix] || N <- lists:seq(1, length(hd(Matrix))). 

%% Main function for multiplying matrices
multiply_matrices(Matrix1, Matrix2) ->
    %% Validate inputs
    if length(Matrix1) /= length(Matrix2) ->
        error;
    length(hd(Matrix1)) /= length(tl(Matrix2)) ->
        error;
    true ->
        %% Transpose the second matrix to simplify calculations
        TransposedMatrix2 = ?transpose(Matrix2),
        %% Initialize result matrix with 0s
        ResultMatrix = [[0 || _ <- lists:nth(1, Matrix1)] || _ <- lists:nth(1, TransposedMatrix2)],
        %% Loop through each row of the first matrix
        multiply_rows(Matrix1, TransposedMatrix2, 1, ResultMatrix)
    end.

%% Helper function to multiply rows of the first matrix with columns of the second matrix
multiply_rows([], _, _, _) ->
    ok;
multiply_rows([Row|RemainingRows], TransposedMatrix2, RowCount, ResultMatrix) ->
    %% Loop through each column of the second matrix
    multiply_columns(Row, TransposedMatrix2, 1, RowCount, ResultMatrix),
    multiply_rows(RemainingRows, TransposedMatrix2, RowCount + 1, ResultMatrix).

%% Helper function to multiply columns of the second matrix with a single row of the first matrix
multiply_columns(_, [], _, _, _) ->
    ok;
multiply_columns(Row, [Column|RemainingColumns], ColumnCount, RowCount, ResultMatrix) ->
    %% Calculate the product of the row and column
    Product = lists:sum([lists:nth(N, Row) * lists:nth(N, Column) || N <- lists:seq(1, length(Row))]),
    %% Update the corresponding entry in the result matrix
    lists:setelement(ColumnCount, lists:nth(RowCount, ResultMatrix), Product),
    multiply_columns(Row, RemainingColumns, ColumnCount + 1, RowCount, ResultMatrix).