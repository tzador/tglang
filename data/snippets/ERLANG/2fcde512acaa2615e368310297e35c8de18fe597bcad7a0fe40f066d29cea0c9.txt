%% ATOMS
%% Atoms are used to represent constants.

atom_example_1 = my_atom. %% Declares an atom with name 'my_atom'
atom_example_2 = true. %% Another example of an atom

%% BUILT-IN TYPES
%% ERLANG has four built-in types - integers, floats, atoms, and binaries.

integer_example = 42. %% Declares an integer with value 42
float_example = 3.1415. %% Declares a float with value 3.1415

%% VARIABLES
%% Variables start with an uppercase letter or underscore.

_variable = 10. %% Declares a variable with value 10
CapitalVariable = "Hello world". %% Another variable example

%% TUPLES
%% Tuples are an ordered collection of values of any type.

tuple_example = {1, true, "Hello"}. %% Declares a tuple with three values

%% LISTS
%% Lists are also an ordered collection of values, but can only contain one type.

list_example = [1, 2, 3]. %% Declares a list with three integers

%% FUNCTIONS
%% Functions are the building blocks of ERLANG programs.

%% The following function takes two integers and returns their sum.
sum(A, B) ->
    A + B.

%% CALLING FUNCTIONS
%% Functions can be called by using the module name followed by a colon (:).

sum_result = erlang:sum(3, 5). %% Calls the sum function and stores the result in a variable

%% PATTERN MATCHING
%% ERLANG has great support for pattern matching, allowing for powerful functions and error handling.

%% The following function checks if its argument is an integer or a tuple and returns a different message accordingly.
check_type(Value) ->
    case Value of
        Integer when is_integer(Integer) ->
            io:format("~w is an integer", [Integer]);
        Tuple when is_tuple(Tuple) ->
            io:format("~w is a tuple", [Tuple])
    end.

%% CALLING PATTERN MATCHING FUNCTIONS
%% Functions with pattern matching can be easily called by passing in different values.

check_type(42). %% Outputs "42 is an integer"
check_type({1, 2, 3}). %% Outputs "{1, 2, 3} is a tuple" 

%% ERROR HANDLING
%% ERLANG has built-in support for handling errors with the 'try' and 'catch' keywords.

%% The following function tries to divide two numbers and handles the potential 'badarith' error.
divide(A, B) ->
    try A / B
    catch
        error:badarith ->
            io:format("Oops, division by zero!")
    end.

%% CALLING ERROR HANDLING FUNCTIONS
%% Functions with error handling can be called without having to worry about potential errors.

divide_result = erlang:divide(10, 2). %% Outputs 5
divide_result2 = erlang:divide(10, 0). %% Outputs "Oops, division by zero!"

%% CONCURRENCY
%% ERLANG is known for its excellent support for concurrency and distribution.

%% The following function creates a process that prints a message every second.
start() ->
    spawn(fun() ->
        loop()
    end).

%% The loop function continuously prints a message every second.
loop() ->
    io:format("Hello from a concurrent process~n"),
    timer:sleep(1000),
    loop().

%% CALLING CONCURRENCY FUNCTIONS
%% Concurrency functions can be called like regular functions, but will run in a separate process.

start(). %% Creates a concurrent process and prints "Hello from a concurrent process" every second.