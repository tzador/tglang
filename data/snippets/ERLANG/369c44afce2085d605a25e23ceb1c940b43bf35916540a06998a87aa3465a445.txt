%%% A module that implements a simple stack data structure using Erlang lists.

-module(stack).

%% API functions

%% Creates an empty stack
-spec create() -> {ok, stack()}.

create() ->
    {ok, []}.


%% Pushes an element onto the stack
-spec push(T, stack()) -> {ok, stack(T)}.

push(T, Stack) ->
    {ok, [T | Stack]}.


%% Pops an element off the stack
-spec pop(stack(T)) -> {ok, T, stack(T)} | {error, empty_stack}.

pop([H | T]) ->
    {ok, H, T};
pop([]) ->
    {error, empty_stack}.


%% Returns the top element of the stack without removing it
-spec peek(stack(T)) -> {ok, T} | {error, empty_stack}.

peek([H | _]) ->
    {ok, H};
peek([]) ->
    {error, empty_stack}.


%% Returns the number of elements in the stack
-spec size(stack()) -> non_neg_integer().

size(Stack) ->
    length(Stack).


%% Internal functions

%% Checks if the stack is empty
-spec is_empty(stack()) -> boolean().

is_empty(Stack) ->
    length(Stack) == 0.