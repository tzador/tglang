-module(my_module). %% Defines a module
-export([my_function/1]). %% Exported function with 1 argument

my_function(Input) -> %% Function definition
    Result = do_math(Input), %% Assigns the result of the do_math function to the variable 'Result'
    Final_Result = do_other_stuff(Result), %% Assigns the result of the do_other_stuff function to the variable 'Final_Result'
    io:format("The final result is ~p.", [Final_Result]). %% Prints the final result
           
do_math(Value) -> %% Function to perform mathematical operations
    Square = math:pow(Value, 2), %% Calculates the square of the input value
    Double = Square * 2, %% Calculates the double of the squared value
    Triple = Square * 3, %% Calculates the triple of the squared value
    Result = Double + Triple. %% Calculates the final result by adding the double and triple values
    %% Returns the final result
 
do_other_stuff(Result) -> %% Function to perform other operations
    New_Result = Result + math:sqrt(Result), %% Calculates the square root of the input result and adds it to the result
    %% Returns the new result