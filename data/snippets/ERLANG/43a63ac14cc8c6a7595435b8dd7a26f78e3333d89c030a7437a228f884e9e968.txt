%% This is a module that defines functions for finding prime numbers.
-module(primes).

%% A helper function that checks if a number is prime.
%% `Int` represents the number to be checked.
%% Returns `true` if `Int` is prime, `false` otherwise.
-spec is_prime(integer()) -> boolean().
is_prime(Int) ->
    %% If `Int` is less than or equal to 1, it is not prime.
    if Int =< 1 ->
        false;
    %% If `Int` is 2, it is prime.
       Int =:= 2 ->
        true;
    %% If `Int` is even, it is not prime.
       Int rem 2 =:= 0 ->
        false;
    %% If `Int` is divisible by any odd number up to its square root, it is not prime.
       [X || X <- lists:seq(3, round(math:sqrt(Int)), 2), Int rem X =:= 0] =/= [] ->
        false;
    %% Otherwise, `Int` is prime.
       true ->
        true
    end.

%% A function that returns a list of all prime numbers up to a given `Limit`.
%% `Limit` represents the upper bound of the prime numbers.
%% Returns a list of prime numbers.
-spec primes(integer()) -> [integer()].
primes(Limit) ->
    %% Creates a list of all numbers from 2 up to `Limit`.
    NumberList = lists:seq(2, Limit),
    %% Uses `lists:filter` to filter out all non-prime numbers.
    Primes = lists:filter(is_prime, NumberList),
    %% Returns the list of prime numbers.
    Primes.