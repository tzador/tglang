-module(database).
-record(customer, {id, name, address}). %Define customer record with id, name and address fields

%% Public functions
-export([get_customer_by_id/1, get_customer_by_name/1, add_customer/2]).

%% Database functions
-export([query/1, add_to_database/1]).

%% Functions for retrieving data from database
%% `get_customer_by_id(Id)` accepts an id and returns customer record with matching id
get_customer_by_id(Id) ->
    Query = {select, "*", "customers", [{where, "id", expeq, Id}]},
    Result = database:query(Query),
    case Result of
        [Record] ->
            Record;
        _ ->
            {error, not_found}
    end.

%% `get_customer_by_name(Name)` accepts a name and returns customer record with matching name
get_customer_by_name(Name) ->
    Query = {select, "*", "customers", [{where, "name", expeq, Name}]},
    Result = database:query(Query),
    case Result of
        [Record] ->
            Record;
        _ ->
            {error, not_found}
    end.

%% Functions for adding data to database
%% `add_customer(Customer, Address)` accepts customer record and address and adds to database
add_customer(Customer, Address) ->
    #customer{name=Name, address=Address} = Customer,
    NextId = database:get_next_id("customers"),
    NewCustomer = #customer{id=NextId, name=Name, address=Address},
    database:add_to_database(NewCustomer).

%% `query(Query)` accepts a database query and returns the result
query(Query) ->
    database:query(Query).

%% `add_to_database(Record)` adds a database record to the specified table
add_to_database(Record) ->
    database:add_to_table(Record, "customers").