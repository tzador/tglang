%% This is a module that defines a custom data type for representing an online store.
-module(store).

%% Record definition for the 'product' data type.
-record(product, {id, name, description, price, available}).

%% Function for creating a new product instance.
-spec new_product(id(), name(), description(), price(), boolean()) -> product().
new_product(Id, Name, Description, Price, Available) ->
    #product{
        id = Id,
        name = Name,
        description = Description,
        price = Price,
        available = Available
    }.

%% Function for checking if a product is available for purchase.
-spec is_product_available(product()) -> boolean().
is_product_available(#product{available = true}) -> true;
is_product_available(#product{available = false}) -> false.

%% Function for updating the quantity of a product.
-spec update_product_quantity(product(), integer()) -> product().
update_product_quantity(#product{id = Id, name = Name, description = Description,
    price = Price, available = Available}, Quantity) ->
    #product{
        id = Id,
        name = Name,
        description = Description,
        price = Price,
        available = Available,
        quantity = Quantity
    }.

%% Function for calculating the total cost of a product.
-spec calculate_product_total_cost(product()) -> float().
calculate_product_total_cost(#product{price = Price, quantity = Quantity}) ->
    Price * Quantity.

%% Record definition for the 'cart' data type.
-record(cart, {id, products = [], total_cost = 0.0}).

%% Function for adding a product to a cart.
-spec add_product_to_cart(cart(), product()) -> cart().
add_product_to_cart(#cart{id = Id, products = Products, total_cost = TotalCost}, Product) ->
    NewProducts = [Product | Products],
    NewTotalCost = TotalCost + calculate_product_total_cost(Product),
    #cart{
        id = Id,
        products = NewProducts,
        total_cost = NewTotalCost
    }.

%% Function for removing a product from a cart.
-spec remove_product_from_cart(cart(), product()) -> cart().
remove_product_from_cart(#cart{id = Id, products = Products, total_cost = TotalCost}, Product) ->
    FilteredProducts = lists:filter(fun(P) -> P /= Product end, Products),
    NewTotalCost = TotalCost - calculate_product_total_cost(Product),
    #cart{
        id = Id,
        products = FilteredProducts,
        total_cost = NewTotalCost
    }.