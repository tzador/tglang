--[[
This function uses a recursive algorithm to find all prime numbers from 2 up to the given limit
@param limit the upper bound of numbers to check
@returns the list of all prime numbers found within the limit
--]]

function find_prime_numbers(limit)
  -- create a list to store the prime numbers
  local prime_numbers = {}
  -- skip 0 and 1, as they are not considered prime numbers
  local current_number = 2
  -- check every number from 2 up to the limit
  while current_number <= limit do
    -- flag to check if a number is prime or not
    local is_prime = true
    -- check if the current number is divisible by any number from 2 to itself
    for i = 2, current_number do
      -- ignore the current number itself
      if i ~= current_number then
        -- check if the current number is divisible by i
        if current_number % i == 0 then
          -- if yes, then the current number is not prime
          is_prime = false
          -- exit the loop
          break
        end
      end
    end
    -- if the current number is prime, add it to the list
    if is_prime then
      table.insert(prime_numbers, current_number)
    end
    -- increase the current number by 1
    current_number = current_number + 1
  end
  -- return the list of all prime numbers found
  return prime_numbers
end

-- example call to the function
local primes = find_prime_numbers(100)
-- print the list of prime numbers found
print("Prime numbers from 2 to 100:")
for i = 1, #primes do
  print(primes[i])
end

--[[
Output:
Prime numbers from 2 to 100:
2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71
73
79
83
89
97
--]]