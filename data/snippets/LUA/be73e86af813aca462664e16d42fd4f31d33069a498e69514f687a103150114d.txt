-- This is a function that checks the stability of a matrix
-- Input: Matrix M
-- Output: Boolean indicating stability

function checkStability(M)
  local row = #M
  local col = #M[1]

  -- Initialize table to store row sums
  local rowSum = {}

  -- Calculate sum of each row and store in table
  for i = 1, row do
    local sum = 0
    for j = 1, col do
      sum = sum + M[i][j]
    end
    rowSum[i] = sum
  end

  -- Initialize table to store column sums
  local colSum = {}

  -- Calculate sum of each column and store in table
  for j = 1, col do
    local sum = 0
    for i = 1, row do
      sum = sum + M[i][j]
    end
    colSum[j] = sum
  end

  -- Initialize variables to keep track of whether matrix is stable or not
  local stable = true
  local stabilityRow = 0
  local stabilityCol = 0

  -- Check stability of each row
  for i = 1, row do
    if rowSum[i] ~= rowSum[1] then
      stable = false
      stabilityRow = i
      break
    end
  end

  -- Check stability of each column
  for j = 1, col do
    if colSum[j] ~= colSum[1] then
      stable = false
      stabilityCol = j
      break
    end
  end

  -- If matrix is stable, return true
  if stable then
    return true
  end

  -- If matrix is not stable, return false and print location where it is unstable
  print("Matrix is not stable at (" .. stabilityRow .. ", " .. stabilityCol .. ")")
  return false
end

-- Example matrix
M = {
  {2, 3, 5},
  {4, 2, 1},
  {6, 8, 4},
}

-- Check stability of matrix M
print(checkStability(M))

-- Output: Matrix is not stable at (2, 3)
-- False