--[[
This code snippet is a simple implementation of a binary search algorithm
using a Lua table and recursion.
It takes in a sorted table and a target value as parameters and returns the index
 of the target value in the table if found, or -1 if not found.
]]--

--Function to perform binary search
local function binary_search(table, target, low, high) 
    if low > high then --Check if target is not in table
        return -1 
    end

    local mid = math.floor((low + high) / 2) --Calculate middle index
    if table[mid] == target then --Check if target is in middle index
        return mid
    elseif table[mid] > target then --If target is smaller, recursively call on left half 
        return binary_search(table, target, low, mid - 1)
    else
        return binary_search(table, target, mid + 1, high) --Else recursively call on right half
    end
end

--Example usage:
local sorted_table = {1, 3, 5, 7, 9, 11}
local target = 5
local index = binary_search(sorted_table, target, 1, #sorted_table)
print("Index of target value:", index) --Output: 3