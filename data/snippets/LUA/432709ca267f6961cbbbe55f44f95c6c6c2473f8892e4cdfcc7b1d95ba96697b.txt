---[[
    This is a multi-line comment in LUA. It is enclosed within a pair of double square brackets.
    It can span across multiple lines.
    Every programming language has its own way of commenting, and this is LUA's way.
]]

-- Here, a simple function named 'add' is defined that takes two parameters 'a' and 'b' and returns their sum
function add(a, b)
    return a + b
end

--The result of the function call is stored in a variable named 'sum'
local sum = add(5, 10)

-- A for loop is used to print out the squares of numbers from 1 to 10
for i = 1, 10 do
    print(i * i)
end

-- A table is created with key-value pairs
local fruits = {
    apple = 1,
    orange = 2,
    banana = 3
}

-- A string is concatenated using the '..' operator
print("Total number of fruits: " .. (fruits.apple + fruits.orange + fruits.banana))

--[[
    This is an if-else statement that checks if the sum of previous function call is greater than 15.
    If it is, then it prints a message saying so. Otherwise, it prints a different message.
]]
if sum > 15 then
    print("The sum is greater than 15")
else
    print("The sum is not greater than 15")
end

-- A repeat-until loop is used to keep asking the user for input until they enter a valid number
local num = 0
repeat
    print("Enter a number:")
    num= tonumber(io.read())
until num ~= nil

-- A function is defined that takes a table as a parameter and prints out the key-value pairs
function printTable(table)
    for key, value in pairs(table) do
        print(key .. " = " .. value)
    end
end

-- The function is called to print the fruits table
printTable(fruits)

-- A global variable 'num2' is created and assigned a value of 20
_G.num2 = 20

--[[
    A while loop is used to multiply the 'sum' variable with the global variable 'num2' 
    until 'sum' becomes equal to or greater than 'num2'
]]
while sum < _G.num2 do
    sum = sum * _G.num2
end

-- The final value of 'sum' is printed
print("The final value of sum is: " .. sum)