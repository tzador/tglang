-- Create a table with different types of data
local myTable = {
  string = "Hello World",
  number = 3.14,
  boolean = true,
  nilVal = nil,
  func = function(arg1, arg2)
    return arg1 + arg2
  end,
  evenArray = {2, 4, 6, 8, 10},
  oddArray = {1, 3, 5, 7, 9},
  nestedTable = {
    anotherTable = {1, 2, 3}
  }
}

-- Iterate through the table and print the values
for key, value in pairs(myTable) do
  print("Key: " .. key .. ", Value: " .. value)
end

-- Change the value of a key in the table
myTable.boolean = false

-- Print updated value
print("Updated boolean value: " .. tostring(myTable.boolean))

-- Add a new key-value pair to the table
myTable.newKey = "New value"

-- Check if a key exists in the table
if myTable["newKey"] ~= nil then
  print("New key exists in table")
else
  print("New key does not exist in table")
end

-- Create a function that returns the sum of all elements in a table
function sumTable(table)
  local sum = 0

  for _, value in ipairs(table) do
    sum = sum + value
  end

  return sum
end

-- Call the function on the evenArray and print the result
print("Sum of evenArray: " .. sumTable(myTable.evenArray))

-- Concatenate two tables
local mergedTable = {
  table1 = {1, 2, 3},
  table2 = {4, 5, 6}
}

-- Concatenate the two tables and print the result
for _, value in ipairs(mergedTable.table2) do
  table.insert(mergedTable.table1, value)
end
print("Merged table: " .. table.concat(mergedTable.table1, ", "))