--- [[
-- Class to represent a 2D vector.
-- @type Vector2
local Vector2 = {}

--- Create a new Vector2 object.
-- @tparam number x The x coordinate of the vector.
-- @tparam number y The y coordinate of the vector.
-- @treturn Vector2 The new Vector2 object.
function Vector2:new(x, y)
   local object = { x = x, y = y }

   setmetatable(object, { __index = self })

   return object
end

--- Add two vectors together.
-- @param other The vector to be added.
-- @treturn Vector2 The result of the addition.
function Vector2:__add(other)
   return Vector2:new(self.x + other.x, self.y + other.y)
end

--- Subtract one vector from another.
-- @param other The vector to be subtracted.
-- @treturn Vector2 The result of the subtraction.
function Vector2:__sub(other)
   return Vector2:new(self.x - other.x, self.y - other.y)
end

--- Multiply a vector by a scalar value.
-- @tparam number scalar The scalar value to multiply the vector by.
-- @treturn Vector2 The result of the multiplication.
function Vector2:__mul(scalar)
   return Vector2:new(self.x * scalar, self.y * scalar)
end

--- Divide a vector by a scalar value.
-- @tparam number scalar The scalar value to divide the vector by.
-- @treturn Vector2 The result of the division.
function Vector2:__div(scalar)
   return Vector2:new(self.x / scalar, self.y / scalar)
end

--- Calculate the length (magnitude) of the vector.
-- @treturn number The length of the vector.
function Vector2:length()
   return math.sqrt(self.x * self.x + self.y * self.y)
end

--- Normalize the vector, making it unit length.
function Vector2:normalize()
   local length = self:length()

   if length > 0 then
      self.x = self.x / length
      self.y = self.y / length
   end
end

--- Calculate the dot product of two vectors.
-- @param other The vector to calculate the dot product with.
-- @treturn number The dot product of the two vectors.
function Vector2:dot(other)
   return self.x * other.x + self.y * other.y
end

--- Calculate the cross product of two vectors.
-- @param other The vector to calculate the cross product with.
-- @treturn number The cross product of the two vectors.
function Vector2:cross(other)
   return self.x * other.y - self.y * other.x
end

--- Calculate the angle between two vectors in radians.
-- @param other The vector to calculate the angle with.
-- @treturn number The angle between the two vectors in radians.
function Vector2:angle(other)
   return math.acos(self:dot(other) / (self:length() * other:length()))
end

return Vector2

--- Usage:
-- local vector1 = Vector2:new(1, 2)
-- local vector2 = Vector2:new(3, 4)

-- local vector3 = vector1 + vector2
-- local vector4 = vector1 - vector2
-- local vector5 = vector1 * 5
-- local vector6 = vector1 / 2

-- vector1:normalize()

-- local length = vector1:length()

-- local dot = vector1:dot(vector2)
-- local cross = vector1:cross(vector2)
-- local angle = vector1:angle(vector2)