-- This is a comment in LUA

-- Declaring a function in LUA
function fibonacci(n)
    if n == 0 or n == 1 then  -- Checking if n is equal to 0 or 1
        return n  -- Returning the current value of n
    else
        return fibonacci(n-1) + fibonacci(n-2)  -- Recursively calling the fibonacci function with n-1 and n-2 as parameters
    end
end

-- Declaring a table in LUA
local colors = {"red", "green", "blue"}

-- Looping through the table and printing out the colors
for i, color in ipairs(colors) do
    print("The color at index " .. i .. " is " .. color)
end

-- Declaring a variable in LUA
local age = 18

-- Using conditional statements to check the age
if age < 18 then
    print("You are not old enough to vote.")
elseif age >= 18 and age < 21 then
    print("You can vote, but you cannot drink.")
else
    print("You can vote and drink!")
end

-- Declaring a class in LUA
Shape = {area = 0}

-- Constructor for Shape class
function Shape:new (o, side)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    self.area = side * side
    return o
end

-- Creating an instance of the Shape class
mySquare = Shape:new(nil, 5)

-- Printing out the area of the square
print("The area of my square is " .. mySquare.area)