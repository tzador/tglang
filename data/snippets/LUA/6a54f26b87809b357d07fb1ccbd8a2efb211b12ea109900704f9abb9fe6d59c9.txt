--[[
This is an example of a complex code snippet in LUA.
It calculates the determinant of a square matrix using recursion.
]]
function determinant(matrix)
    local n = #matrix
    if n == 1 then
        return matrix[1][1]
    else
        local result = 0
        for i = 1, n, 1 do
            local temp = {}
            for j = 2, n, 1 do
                temp[j - 1] = {}
                for k = 1, n, 1 do
                    if k ~= i then
                        temp[j - 1][#temp[j - 1] + 1] = matrix[j][k]
                    end
                end
            end
            if i % 2 == 0 then
                result = result - matrix[1][i] * determinant(temp)
            else
                result = result + matrix[1][i] * determinant(temp)
            end
        end
        return result
    end
end

-- example matrix
matrix = {
    {2, 3, 1},
    {5, 6, 8},
    {9, 4, 7}
}

-- calculate determinant
det = determinant(matrix)

-- print result to console
print("Determinant: " .. det)