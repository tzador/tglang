--This function uses recursion to calculate the factorial of a given number
--Input: number
--Output: factorial of the input number
function factorial(num)
    if num == 0 then --base case
        return 1
    else
        return num * factorial(num-1) --recursive call
    end
end

--This function checks if a number is prime or not using a for loop
--Input: number
--Output: true if number is prime, false if not prime
function isPrime(num)
    if num == 2 then --2 is prime by definition
        return true
    elseif num <= 1 or num % 2 == 0 then --1 and even numbers are not prime
        return false
    else
        for i = 3, math.sqrt(num), 2 do --loop through odd numbers from 3 to square root of input number
            if num % i == 0 then --if input number is divisible by i, then it's not prime
                return false
            end
        end
    end
    return true --if input number is not divisible by any odd number, then it's prime
end

--This function reverses a string using recursion
--Input: string
--Output: reversed string
function reverseString(str)
    if #str == 0 then --base case
        return str
    else
        return reverseString(str:sub(2)) .. str:sub(1,1) --recursive call, adds last character to the beginning
    end
end

--This function merges two sorted arrays into one sorted array
--Input: two sorted arrays
--Output: merged sorted array
function mergeSortedArrays(arr1, arr2)
    local result = {} --empty table to store merged array
    local index1 = 1 --index to iterate through first array
    local index2 = 1 --index to iterate through second array

    while index1 <= #arr1 and index2 <= #arr2 do
        if arr1[index1] < arr2[index2] then --if element in first array is smaller, add to result table
            table.insert(result, arr1[index1])
            index1 = index1 + 1
        else --if element in second array is smaller, add to result table
            table.insert(result, arr2[index2])
            index2 = index2 + 1
        end
    end

    --add remaining elements from first array to result table
    while index1 <= #arr1 do
        table.insert(result, arr1[index1])
        index1 = index1 + 1
    end

    --add remaining elements from second array to result table
    while index2 <= #arr2 do
        table.insert(result, arr2[index2])
        index2 = index2 + 1
    end

    return result
end

--This function uses a binary search algorithm to find the index of a target value in a sorted array
--Input: sorted array, target value
--Output: index of target value if found, -1 if not found
function binarySearch(arr, target)
    local low = 1 --index of lowest element in array
    local high = #arr --index of highest element in array

    while low <= high do
        local mid = math.floor((low + high) / 2) --calculate middle index
        if arr[mid] == target then --if middle element is equal to target value, return index
            return mid
        elseif arr[mid] < target then --if middle element is less than target value, search upper half
            low = mid + 1
        else --if middle element is greater than target value, search lower half
            high = mid - 1
        end
    end

    return -1 --if target value is not found in array, return -1
end