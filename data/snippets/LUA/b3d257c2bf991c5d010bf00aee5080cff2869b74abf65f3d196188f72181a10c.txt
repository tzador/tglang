--[[
Fibonacci series using for loop and memoization

This code snippet generates a Fibonacci series using for loop and implements memoization to drastically improve its performance.

The Fibonacci series is a sequence of numbers where each number is the sum of the two preceding ones, starting from 0 and 1.

Memoization is a technique where previously calculated results are stored in memory for future use, thus avoiding the need to recalculate them again.

In this code, we create a table named 'fib' to store the previously calculated Fibonacci numbers. The 'n' variable represents the desired length of the series.

First, we check if the first two numbers of the series (0 and 1) are already in the table. If they are not, we add them to the table.

Then, we use a for loop to iterate through the remaining numbers in the series, starting from index 3. For each iteration, we first check if the value is already present in the table. If it is, we simply fetch it from the table. If it is not, we use the previous two values from the table, add them together, and store the result in the table.

Finally, we print the values of the table, which will represent the Fibonacci series.

Note: In Lua, tables can be used as arrays, where the index starts from 1 instead of 0, as in traditional arrays.

Example output for n = 8:
0
1
1
2
3
5
8
13
]]--

-- Define table to store Fibonacci numbers
local fib = {}

-- Get desired length of series
local n = 8

-- Check if first two numbers are already in table
if not fib[1] then
    fib[1] = 0
end

if not fib[2] then
    fib[2] = 1
end

-- Loop through remaining numbers in series
for i = 3, n do
    -- Check if value is already in table
    if not fib[i] then
        -- Use previous two values to calculate and store result
        fib[i] = fib[i-1] + fib[i-2]
    end
end

-- Print values in the table, representing Fibonacci series
for i = 1, n do
    print(fib[i])
end

-- Output:
-- 0
-- 1
-- 1
-- 2
-- 3
-- 5
-- 8
-- 13