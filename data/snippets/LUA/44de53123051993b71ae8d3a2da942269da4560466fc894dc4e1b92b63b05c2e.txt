---[[ This is a multiline comment in LUA
which can span multiple lines
Here we will create a function that finds the longest common substring between two strings 
@tparam string str1 First string to compare
@tparam string str2 Second string to compare
@treturn string Longest common substring between the two strings
--]]
function longestCommonSubstring(str1, str2)
    local len1 = #str1
    local len2 = #str2

    --[[ Table to store the lengths of common substrings 
    between every pair of characters from both strings 
    This table will be used for dynamic programming approach 
    --]]
    local longestCommonSubstringLengths = {} 
    
    --[[ Variable to store the length of longest common substring 
    and the corresponding ending index in the strings 
    --]]
    local longestSubstringLength = 0
    local longestSubstringEndingIndex = 0

    --[[ Loop to fill the table with values based on dynamic programming approach 
    Each entry in the table represents the length of longest common substring ending at that index 
    e.g. longestCommonSubstringLengths[3][4] represents the length of longest common substring 
    ending at index 3 in str1 and index 4 in str2 
    --]]
    for i = 1, len1 do
        longestCommonSubstringLengths[i] = {}
        for j = 1, len2 do
            --[[ Check if the characters at current indices are equal 
            If true, then update the length based on the previous longest substring length 
            --]]
            if str1:sub(i,i) == str2:sub(j,j) then
                longestCommonSubstringLengths[i][j] = longestCommonSubstringLengths[i-1][j-1] + 1
                --[[ Update the longest substring information if the current length is longer 
                and update the corresponding ending index 
                --]]
                if longestCommonSubstringLengths[i][j] > longestSubstringLength then
                    longestSubstringLength = longestCommonSubstringLengths[i][j]
                    longestSubstringEndingIndex = i
                end
            else
                --[[ If the characters are not equal, then the length is set to 0 
                in order to start a new substring 
                --]]
                longestCommonSubstringLengths[i][j] = 0
            end
        end
    end
    --[[ Return the longest common substring by using the stored information 
    and the ending index 
    --]]
    return str1:sub(longestSubstringEndingIndex-longestSubstringLength+1, longestSubstringEndingIndex)
end

-- Example usage
local result = longestCommonSubstring("programming", "grammars")
print(result) -- Output: "gram"