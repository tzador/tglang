-- This function checks if a given number is prime
-- @param num the number to be checked for primness
-- @return true if the number is prime, false otherwise
function is_prime(num)
    for i = 2, num - 1 do
        if num % i == 0 then
            return false
        end
    end
    
    return true
end

-- This function calculates the factorial of a given number
-- @param num the number whose factorial is to be calculated
-- @return the factorial value of the given number
function factorial(num)
    if num == 0 then
        return 1
    end
    
    return num * factorial(num - 1)
end

-- This function calculates the nth fibonacci number
-- @param n the position of the fibonacci number to be calculated
-- @return the nth fibonacci number
function fibonacci(n)
    if n == 0 or n == 1 then
        return n
    end

    return fibonacci(n-1) + fibonacci(n-2)
end

-- This function checks if a given string is a palindrome
-- @param str the string to be checked for palindrome
-- @return true if the string is a palindrome, false otherwise
function is_palindrome(str)
    local reversed_string = string.reverse(str)
    
    if str == reversed_string then
        return true
    end
    
    return false
end

-- This function adds two numbers together
-- @param num1 the first number to be added
-- @param num2 the second number to be added
-- @return the sum of the two numbers
function add(num1, num2)
    return num1 + num2
end

-- This function multiplies two numbers together
-- @param num1 the first number to be multiplied
-- @param num2 the second number to be multiplied
-- @return the product of the two numbers
function multiply(num1, num2)
    return num1 * num2
end

-- This function finds the largest number in a table of numbers
-- @param nums the table of numbers
-- @return the largest number in the table
function find_max(nums)
    local max = nums[1]
    
    for i, num in ipairs(nums) do
        if num > max then
            max = num
        end
    end
    
    return max
end

-- This function sorts a table of numbers in ascending order using bubble sort algorithm
-- @param nums the table of numbers to be sorted
-- @return the sorted table of numbers
function bubble_sort(nums)
    local size = #nums
    
    for i = 1, size - 1 do
        for j = 1, size - i do
            if nums[j] > nums[j+1] then
                local temp = nums[j]
                nums[j] = nums[j+1]
                nums[j+1] = temp
            end
        end
    end
    
    return nums
end

-- This function generates a random password with a given length
-- @param length the length of the password to be generated
-- @return the randomly generated password
function generate_password(length)
    local chars = {}
    
    for i = 48, 57 do
        table.insert(chars, string.char(i))
    end
    
    for i = 65, 90 do
        table.insert(chars, string.char(i))
    end
    
    for i = 97, 122 do
        table.insert(chars, string.char(i))
    end
    
    local password = ""
    
    for i = 1, length do
        local index = math.random(#chars)
        password = password .. chars[index]
    end
    
    return password
end

-- This function converts a decimal number to binary
-- @param num the decimal number to be converted
-- @return the binary representation of the given decimal number
function dec_to_bin(num)
    local binary = ""
    
    while num > 0 do
        binary = binary .. (num % 2)
        num = math.floor(num / 2)
    end
    
    return string.reverse(binary)
end

-- This function calculates the hypotenuse of a right triangle
-- @param a the length of the first side
-- @param b the length of the second side
-- @return the hypotenuse length
function calculate_hypotenuse(a, b)
    return math.sqrt(a^2 + b^2)
end

-- This function calculates the area of a circle
-- @param radius the radius of the circle
-- @return the area of the circle
function calculate_area(radius)
    return math.pi * radius^2
end

-- This function calculates the volume of a rectangular prism
-- @param length the length of the prism
-- @param width the width of the prism
-- @param height the height of the prism
-- @return the volume of the rectangular prism
function calculate_volume(length, width, height)
    return length * width * height
end