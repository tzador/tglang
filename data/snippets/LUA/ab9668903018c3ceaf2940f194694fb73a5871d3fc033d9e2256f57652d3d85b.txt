--- This function sorts a table using quicksort algorithm
--- arr is the input table and low/high are the starting and ending indices
--- Returns a sorted table
function quicksort(arr, low, high)
   if low < high then
      local pivot = partition(arr, low, high) -- select pivot using partition function
      quicksort(arr, low, pivot-1) -- recursively sort elements before pivot
      quicksort(arr, pivot+1, high) -- recursively sort elements after pivot
   end
   return arr
end

--- This function partitions the table using the pivot element
--- arr is the input table, low/high are the starting and ending indices
--- Returns the index of the pivot element
function partition(arr, low, high)
   local pivot = arr[high] -- pivot element is the last element
   local i = low - 1 -- index of smaller element that will be swapped with arr[j]
   for j = low, high-1 do
      if arr[j] <= pivot then -- if current element is smaller than pivot
         i = i + 1
         arr[i], arr[j] = arr[j], arr[i] -- swap elements
      end
   end
   arr[i+1], arr[high] = arr[high], arr[i+1] -- swap the pivot element with the element at i+1
   return i+1
end

-- Example usage:
local unsorted = {6, 2, 8, 1, 5, 4, 9, 3}
local sorted = quicksort(unsorted, 1, #unsorted)
--- Output:
-- sorted = {1, 2, 3, 4, 5, 6, 8, 9}