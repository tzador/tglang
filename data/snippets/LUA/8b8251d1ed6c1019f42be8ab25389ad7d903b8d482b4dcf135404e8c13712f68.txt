-- This is a function that takes in a table of strings and returns a sorted list of strings
function sortStrings(stringTable)
    -- First we check if the table is empty
    if #stringTable == 0 then
        return {}
    end

    -- We create a new table to store our sorted strings
    local sortedTable = {}

    -- Now we loop through each string in the table
    for i, string in ipairs(stringTable) do
        -- We check if the string is already in our sorted table
        if #sortedTable == 0 then
            -- If it is, we skip to the next string
            goto continue
        end

        -- We compare the current string to each string in the sorted table
        for j, sortedString in ipairs(sortedTable) do
            -- If the current string is less than the sorted string, we insert it into the sorted table
            if string < sortedString then
                table.insert(sortedTable, j, string)
                sortedTable[j + 1] = sortedString
                break
            end
        end

        -- If the string is not less than any of the sorted strings, we append it to the end of the table
        table.insert(sortedTable, string)

        -- This is a label used for the goto statement to skip to the next iteration of the loop
        ::continue::

    end

    return sortedTable
end

-- This is an example of how the function can be used
local fruits = {"apple", "orange", "banana", "pineapple", "grape"}
print(sortStrings(fruits)) -- Output: {"apple", "banana", "grape", "orange", "pineapple"}