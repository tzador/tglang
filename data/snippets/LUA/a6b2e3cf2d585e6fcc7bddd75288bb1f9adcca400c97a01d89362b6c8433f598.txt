--[[
This is a comment block in LUA
It can span multiple lines
]]--

-- Variables can hold any data type
local fruit = "apple"
local num1 = 10
local bool = true

-- Functions in LUA can be defined with the "function" keyword
-- This function takes in two parameters and adds them together
function add(x, y)
    return x + y
end

-- Arrays, or tables as they are called in LUA, can hold multiple values
local myTable = {"LUA", "is", "a", "powerful", "programming", "language"}

-- Loop through the table and print each element
for i = 1, #myTable do
    print(myTable[i])
end

-- If-else statements can be used for conditional logic
if num1 >= 10 then
    print("num1 is greater than or equal to 10")
else
    print("num1 is less than 10")
end

-- While loops can be used for repeated tasks
local count = 1
while count <= 5 do
    print("Count: " .. count)
    count = count + 1
end

-- LUA supports object-oriented programming through metatables and functions
-- Here we create a table as our custom object, with a name and a function
local person = {}
person.name = "John"

function person:greet()
    print("Hello, my name is " .. self.name)
end

-- Call the greet function using the colon syntax
person:greet()

-- Output:
--[[
LUA
is
a
powerful
programming
language
num1 is greater than or equal to 10
Count: 1
Count: 2
Count: 3
Count: 4
Count: 5
Hello, my name is John
]]