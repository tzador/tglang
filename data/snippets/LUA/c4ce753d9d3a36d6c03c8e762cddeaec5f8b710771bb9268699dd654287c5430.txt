-- This code snippet uses a recursive function to implement quicksort algorithm

-- Function to partition the array into two sections based on the pivot element
local function partition(array, low, high)
    local pivot = array[high] -- select highest element as pivot
    local i = low - 1 -- index of smaller element
    for j = low, high - 1 do
        if array[j] < pivot then
            i = i + 1 -- increment index of smaller element
            array[i], array[j] = array[j], array[i] -- swap elements
        end
    end
    array[i + 1], array[high] = array[high], array[i + 1] -- swap pivot with element at i+1
    return i + 1 -- return index of pivot element
end

-- Recursive function to sort the partitions
local function quicksort(array, low, high)
    if low < high then
        local pivot = partition(array, low, high) -- get pivot index
        quicksort(array, low, pivot - 1) -- sort left partition
        quicksort(array, pivot + 1, high) -- sort right partition
    end
end

-- Main function to generate an array of random numbers and call quicksort
local function main()
    local n = 10 -- size of array
    local array = {} -- initialize empty array
    for i = 1, n do
        array[i] = math.random(1, 100) -- add random numbers to array
    end
    print("Unsorted array:")
    print(table.concat(array, " ")) -- print unsorted array
    quicksort(array, 1, n) -- call quicksort
    print("Sorted array:")
    print(table.concat(array, " ")) -- print sorted array
end

main() -- call the main function to run the code