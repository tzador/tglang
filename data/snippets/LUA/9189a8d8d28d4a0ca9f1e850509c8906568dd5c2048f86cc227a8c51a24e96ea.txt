--This function calculates the nth Fibonacci number using recursion
--@param n The number whose Fibonacci value is to be calculated
--@returns The Fibonacci value of the given number
local function fibonacci(n)
   if (n < 2) then
      return n
   else
      return( fibonacci(n-1) + fibonacci(n-2) )
   end
end

--This function calculates the factorial of a given number using a loop
--@param n The number whose factorial is to be calculated
--@returns The factorial value of the given number
local function factorial(n)
   local result = 1
   for i = 1, n do 
      result = result * i
   end
   return result
end

--This table contains predefined functions for different mathematical operations
local math = {
   abs = math.abs, 
   pow = math.pow, 
   round = math.round, 
   sqrt = math.sqrt, 
   log = math.log, 
   exp = math.exp, 
   sin = math.sin, 
   cos = math.cos, 
   tan = math.tan, 
   pi = math.pi
}

--This function calculates the sine of a given number, using the predefined math table
--@param n The number whose sine is to be calculated
--@returns The sine value of the given number
local function sine(n)
   return math.sin(n)
end

--This function calculates the area of a triangle, using the formula A = 0.5 * base * height
--@param base The length of the base of the triangle
--@param height The height of the triangle
--@returns The area of the triangle
local function triangle_area(base, height)
   return (0.5 * base * height)
end

--This function calculates the volume of a cylinder, using the formula V = π * radius^2 * height
--@param radius The radius of the cylinder
--@param height The height of the cylinder
--@returns The volume of the cylinder
local function cylinder_volume(radius, height)
   return (math.pi * math.pow(radius, 2) * height)
end

--This function calculates the distance between two points in a 2D coordinate system
--@param x1 The x coordinate of the first point
--@param y1 The y coordinate of the first point
--@param x2 The x coordinate of the second point
--@param y2 The y coordinate of the second point
--@returns The distance between the two points
local function distance(x1, y1, x2, y2)
   return math.sqrt( math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) )
end

--This function calculates the area of a rectangle, using the formula A = length * width
--@param length The length of the rectangle
--@param width The width of the rectangle
--@returns The area of the rectangle
local function rectangle_area(length, width)
   return (length * width)
end

--This function calculates the circumference of a circle, using the formula C = 2 * π * radius
--@param radius The radius of the circle
--@returns The circumference of the circle
local function circle_circumference(radius)
   return (2 * math.pi * radius)
end

--This function calculates the volume of a sphere, using the formula V = 4/3 * π * radius^3
--@param radius The radius of the sphere
--@returns The volume of the sphere
local function sphere_volume(radius)
   return (4/3 * math.pi * math.pow(radius, 3))
end

--This function converts a given temperature in degrees Celsius to Fahrenheit
--@param celsius The temperature in degrees Celsius
--@returns The temperature in degrees Fahrenheit
local function celsius_to_fahrenheit(celsius)
   return ((celsius * 9/5) + 32)
end

--This function converts a given temperature in degrees Fahrenheit to Celsius
--@param fahrenheit The temperature in degrees Fahrenheit
--@returns The temperature in degrees Celsius
local function fahrenheit_to_celsius(fahrenheit)
   return ((fahrenheit - 32) * 5/9)
end

--This function checks whether a given number is even or odd
--@param n The number to be checked
--@returns "Even" if the number is even, "Odd" if the number is odd
local function is_even(n)
   if (n % 2 == 0) then
      return "Even"
   else
      return "Odd"
   end
end

--This function checks if a given string is a palindrome
--@param str The string to be checked
--@returns "Yes" if the string is a palindrome, "No" if it is not
local function is_palindrome(str)
   --Remove any spaces and convert the string to lowercase
   str = string.lower(str:gsub("[%s%p]", ""))
   --Reverse the string using a for loop
   local reverse_str = ""
   for i = string.len(str), 1, -1 do 
      reverse_str = reverse_str .. string.sub(str, i, i)
   end
   --Compare the original and reversed strings 
   if (str == reverse_str) then
      return "Yes"
   else
      return "No"
   end
end

--Example usage of the functions
local n = 7
print("The " .. n .. "th Fibonacci number is: " .. fibonacci(n))

local num = 5
print(num .. "! = " .. factorial(num))

local angle = math.pi/4
print("The sine of " .. angle .. " radians is: " .. sine(angle))

local base = 3
local height = 4
print("The area of a triangle with base " .. base .. " and height " .. height .. " is: " .. triangle_area(base, height))

local radius = 2
local cylinder_height = 5
print("The volume of a cylinder with radius " .. radius .. " and height " .. cylinder_height .. " is: " .. cylinder_volume(radius, cylinder_height))

local x1 = 0
local y1 = 0
local x2 = 3
local y2 = 4
print("The distance between (" .. x1 .. ", " .. y1 .. ") and (" .. x2 .. ", " .. y2 .. ") is: " .. distance(x1, y1, x2, y2))

local length = 6
local width = 8
print("The area of a rectangle with length " .. length .. " and width " .. width .. " is: " .. rectangle_area(length, width))

local circle_radius = 5
print("The circumference of a circle with radius " .. circle_radius .. " is: " .. circle_circumference(circle_radius))

local sphere_radius = 4
print("The volume of a sphere with radius " .. sphere_radius .. " is: " .. sphere_volume(sphere_radius))

local celsius = 25
print(celsius .. " degrees Celsius is equal to " .. celsius_to_fahrenheit(celsius) .. " degrees Fahrenheit.")

local fahrenheit = 98.6
print(fahrenheit .. " degrees Fahrenheit is equal to " .. fahrenheit_to_celsius(fahrenheit) .. " degrees Celsius.")

local even_num = 10
print(even_num .. " is " .. is_even(even_num))

local odd_num = 11
print(odd_num .. " is " .. is_even(odd_num))

local palindrome_str = "race car"
print(palindrome_str .. " is a palindrome: " .. is_palindrome(palindrome_str))