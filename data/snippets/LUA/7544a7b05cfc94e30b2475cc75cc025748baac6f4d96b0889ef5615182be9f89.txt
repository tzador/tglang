-- This function takes in two tables as parameters and returns a new table with the combined values from the two tables.
--@param t1 Table 1
--@param t2 Table 2
--@return Table: The combined table of t1 and t2
function combineTables(t1, t2)
    local newTable = {} -- Create empty table to store combined values
    -- Loop through first table
    for key, value in pairs(t1) do
        if type(value) == "table" then -- Check if value is itself a table
            newTable[key] = combineTables(value, {}) -- If so, call function recursively, passing an empty table as second parameter
        else
            newTable[key] = value -- Otherwise, simply add value to new table at current key
        end
    end
    -- Loop through second table
    for key, value in pairs(t2) do
        if type(value) == "table" then -- Check if value is itself a table
            newTable[key] = combineTables(newTable[key], value) -- If so, call function recursively, passing the existing value at that key as first parameter
        else
            newTable[key] = value -- Otherwise, simply add value to new table at current key
        end
    end
    return newTable -- Return combined table
end

-- Example usage
table1 = {a = "Hello", b = "World", c = {d = 1, e = 2}}
table2 = {b = "Lua", c = {d = 3, f = 4}, g = "Programming"}
combinedTable = combineTables(table1, table2)
print(combinedTable) -- Output: {a = "Hello", b = "Lua", c = {d = 3, e = 2, f = 4}, g = "Programming"}