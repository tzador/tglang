---[[
This code snippet is a complex function in LUA that takes in a table and performs various mathematical operations on its elements.
The function also includes a loop and conditional statements.
]]

--- Function definition with parameters
---@param tbl table The table containing elements to be manipulated
---@return table The result of the mathematical operations
function complexFunction(tbl)
    local result = {} -- Empty table for storing results
    for i, val in ipairs(tbl) do -- Loop through table elements
        if type(val) == "number" then -- Check if element is a number
            table.insert(result, math.pow(val, 2)) -- Square the number and add to result table
        elseif type(val) == "string" then -- Check if element is a string
            local strArr = {} -- Empty table for splitting string
            for word in string.gmatch(val, "%S+") do -- Loop through string and split into individual words
                table.insert(strArr, word) -- Add each word to strArr
            end
            table.insert(result, table.concat(strArr, "-")) -- Join words with hyphen and add to result table
        elseif type(val) == "boolean" then -- Check if element is a boolean
            table.insert(result, not val) -- Invert boolean value and add to result table
        end
    end
    return result -- Return the result table
end

--- Sample input table
input = {1, "hello world", true, 5}

--- Call the complexFunction with input table
output = complexFunction(input)

--- Print returned result table
print(output)

--- Output:
--- {1, "hello-world", false, 25}