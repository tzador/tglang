local function fibonacci(n) -- define a local function to calculate the Fibonacci sequence
  if n == 0 or n == 1 then -- base cases, return n if n equals 0 or 1
      return n
  else
      return fibonacci(n - 1) + fibonacci(n - 2) -- recursive step, add previous two numbers in the sequence
  end
end

local cache = {} -- create a cache table to store previously calculated values

local function memoized_fibonacci(n) -- define a memoized version of the fibonacci function
  if cache[n] then -- check if the value for n is already calculated and stored in the cache table
      return cache[n] -- if it is, return the cached value
  else
      local result = fibonacci(n) -- otherwise, calculate the value using the regular fibonacci function
      cache[n] = result -- and store it in the cache table for future use
      return result -- return the calculated value
  end
end

-- calling the memoized fibonacci function for n = 10
local result = memoized_fibonacci(10) -- the first time this is called, it will be calculated using the regular fibonacci function
print(result) -- output: 55

-- calling the memoized fibonacci function again for n = 10
result = memoized_fibonacci(10) -- this time, the value for n = 10 is already stored in the cache table, so no calculations will be made
print(result) -- output: 55