---[[
This code snippet creates a table of prime numbers using the Sieve of Eratosthenes algorithm.
The table is then iterated through and the prime numbers are printed.
]]

--- Helper function for finding all prime numbers up to 'n'
local function sieve(n)
    local primes = {}       -- create empty table to store prime numbers
    for i = 2, n do         -- iterate from 2 to n
        primes[i] = true    -- set all numbers to 'true' initially
    end
    for i = 2, math.sqrt(n) do
        if primes[i] then   -- if current number is still true
            for j = i * i, n, i do
                primes[j] = false   -- set all multiples of current number to 'false'
            end
        end
    end
    return primes
end

--- Main function for printing prime numbers
local function printPrimes(n)
    local primes = sieve(n)     -- call sieve function to generate table of prime numbers
    for i = 2, n do             -- iterate through the table
        if primes[i] then       -- if current number is true, then it is prime
            print(i)            -- print the prime number
        end
    end
end

--- Example usage: printing all prime numbers up to 100
printPrimes(100)       --> 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97