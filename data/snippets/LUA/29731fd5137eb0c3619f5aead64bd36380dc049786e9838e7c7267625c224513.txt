--[[

This is a longer code snippet showcasing various features of LUA programming language.

First, we declare a function that takes in two numbers as parameters and returns the sum of the two numbers.

]]

function sum(x, y)
    return x + y
end

--[[
Next, we define a table that contains strings, numbers, and a function as its values.
]]
table = {
    "apple",
    12,
    "orange",
    function(x)
        print("The value of x is: " .. x)
    end
}

--[[
Now, we loop through the table to print out each value along with its data type.
]]
for i, v in ipairs(table) do
    print("Value #" .. i .. " is " .. tostring(v) .. " of type: " .. type(v))
end

--[[
We can also create a class-like structure using metatables.
]]
Shape = {
    sides = 0,
    area = function(self)
        print("This shape has " .. self.sides .. " sides.")
    end
}

--[[
To initialize an object of this class, we set its metatable to Shape and define the number of sides.
]]
obj = {
    sides = 3
}

setmetatable(obj, Shape)

--[[
Finally, we call the area function on our object to print out the number of sides.
]]
obj:area()