---[[This function sorts a given table in ascending order using merge sort algorithm
--@param tab the table to be sorted
--@return the sorted table
--]]
local function mergeSort(tab)
  if #tab <= 1 then --if table has 1 or less elements, it is already sorted
    return tab
  end
  local middle = #tab / 2 --calculating midpoint to split table
  local leftTab = mergeSort(table.pack(table.unpack(tab, 1, middle))) --splitting left half and recursively sorting it
  local rightTab = mergeSort(table.pack(table.unpack(tab, middle+1))) --splitting right half and recursively sorting it
  for i = 1, #rightTab do
    local value = rightTab[i]
    local j = i - 1
    while j >= 1 and rightTab[j] > value do --looping until we find the correct position for the value in rightTab
      rightTab[j+1] = rightTab[j]
      j = j - 1
    end
    rightTab[j+1] = value --placing the value in its correct position
  end
  return table.combine(leftTab, rightTab) --combining the sorted left and right halves into one sorted table
end

--sample table to test the function
local testTable = {4, 8, 2, 6, 3, 1, 9, 5, 7}
print("Before sorting: ", table.unpack(testTable))

testTable = mergeSort(testTable) --calling the mergeSort function on the sample table

print("After sorting: ", table.unpack(testTable))