-- A function to generate a random maze
-- Input: size of maze (n x n)
-- Output: a maze represented as a 2D array of cells, each with 4 walls (represented as booleans)
function generateMaze(n)
    -- Generate a 2D array to represent the maze
    local maze = {}
    for i = 1, n do
        maze[i] = {}
        for j = 1, n do
            maze[i][j] = {}
            -- Set all walls to true (closed)
            maze[i][j].topWall = true
            maze[i][j].rightWall = true
            maze[i][j].bottomWall = true
            maze[i][j].leftWall = true
            -- Set starting cell to have no top wall
            if i == 1 and j == 1 then
                maze[i][j].topWall = false
            end
        end
    end

    -- Initialize stack data structure for backtracking
    local stack = {}

    -- Choose a random starting cell
    local currentCell = {x = 1, y = 1}

    -- Create a function to check if a cell has any unvisited neighbors
    function hasUnvisitedNeighbors(cell)
        if cell.x - 1 > 0 and maze[cell.x - 1][cell.y].visited == nil then
            return true -- left neighbor
        elseif cell.x + 1 <= n and maze[cell.x + 1][cell.y].visited == nil then
            return true -- right neighbor
        elseif cell.y - 1 > 0 and maze[cell.x][cell.y - 1].visited == nil then
            return true -- top neighbor
        elseif cell.y + 1 <= n and maze[cell.x][cell.y + 1].visited == nil then
            return true -- bottom neighbor
        else
            return false -- all neighbors visited
        end
    end

    repeat
        -- Mark current cell as visited
        maze[currentCell.x][currentCell.y].visited = true

        -- While current cell has unvisited neighbors
        while hasUnvisitedNeighbors(currentCell) do
            -- Choose a random unvisited neighbor
            local neighborCell = {}
            repeat
                neighborCell.x = currentCell.x
                neighborCell.y = currentCell.y
                local direction = math.random(1,4) -- random number from 1 to 4
                if direction == 1 and neighborCell.x - 1 > 0 and maze[neighborCell.x - 1][neighborCell.y].visited == nil then
                    neighborCell.x = neighborCell.x - 1 -- left neighbor
                    break
                elseif direction == 2 and neighborCell.x + 1 <= n and maze[neighborCell.x + 1][neighborCell.y].visited == nil then
                    neighborCell.x = neighborCell.x + 1 -- right neighbor
                    break
                elseif direction == 3 and neighborCell.y - 1 > 0 and maze[neighborCell.x][neighborCell.y - 1].visited == nil then
                    neighborCell.y = neighborCell.y - 1 -- top neighbor
                    break
                elseif direction == 4 and neighborCell.y + 1 <= n and maze[neighborCell.x][neighborCell.y + 1].visited == nil then
                    neighborCell.y = neighborCell.y + 1 -- bottom neighbor
                    break
                end
            until false

            -- Remove wall between current cell and chosen neighbor
            if neighborCell.x < currentCell.x then
                maze[currentCell.x][currentCell.y].leftWall = false
                maze[neighborCell.x][neighborCell.y].rightWall = false
            elseif neighborCell.x > currentCell.x then
                maze[currentCell.x][currentCell.y].rightWall = false
                maze[neighborCell.x][neighborCell.y].leftWall = false
            elseif neighborCell.y < currentCell.y then
                maze[currentCell.x][currentCell.y].topWall = false
                maze[neighborCell.x][neighborCell.y].bottomWall = false
            elseif neighborCell.y > currentCell.y then
                maze[currentCell.x][currentCell.y].bottomWall = false
                maze[neighborCell.x][neighborCell.y].topWall = false
            end

            -- Push current cell onto stack
            table.insert(stack, currentCell)

            -- Move to chosen neighbor cell
            currentCell = neighborCell
        end

        -- If stack is not empty, pop cell and set it as current cell
        if #stack > 0 then
            currentCell = table.remove(stack)
        end
    until #stack == 0 -- Repeat until all cells have been visited

    -- Return generated maze
    return maze
end