-- This code snippet generates a random maze using Prim's algorithm

-- Define constants for maze dimensions
local WIDTH = 10
local HEIGHT = 10

-- Define a table to store visited cells
local visited = {}

-- Define a helper function to check if all cells are visited
local function allVisited()
    for i=1, WIDTH do
        for j=1, HEIGHT do
            if not visited[i][j] then
                return false
            end
        end
    end
    return true
end

-- Define a function to generate the maze
local function generateMaze()
    -- Initialize the maze with all walls
    local maze = {}
    for i=1, WIDTH+1 do
        maze[i] = {}
        for j=1, HEIGHT+1 do
            maze[i][j] = {}
            maze[i][j]["top"] = true
            maze[i][j]["bottom"] = true
            maze[i][j]["left"] = true
            maze[i][j]["right"] = true
        end
    end

    -- Choose a random starting cell and mark it as visited
    local current = {x=math.random(WIDTH), y=math.random(HEIGHT)}
    visited[current.x][current.y] = true

    -- Repeat until all cells are visited
    while not allVisited() do
        -- Choose a random neighbor that has not been visited
        local neighbors = {}
        if current.x > 1 and not visited[current.x-1][current.y] then
            neighbors[#neighbors+1] = {x=current.x-1, y=current.y}
        end
        if current.y > 1 and not visited[current.x][current.y-1] then
            neighbors[#neighbors+1] = {x=current.x, y=current.y-1}
        end
        if current.x < WIDTH and not visited[current.x+1][current.y] then
            neighbors[#neighbors+1] = {x=current.x+1, y=current.y}
        end
        if current.y < HEIGHT and not visited[current.x][current.y+1] then
            neighbors[#neighbors+1] = {x=current.x, y=current.y+1}
        end

        -- Choose a random neighbor and remove the wall between current and neighbor
        local neighbor = neighbors[math.random(#neighbors)]
        if current.x < neighbor.x then
            maze[current.x+1][current.y]["right"] = false
            maze[neighbor.x+1][neighbor.y]["left"] = false
        elseif current.x > neighbor.x then
            maze[current.x][current.y]["left"] = false
            maze[neighbor.x][neighbor.y]["right"] = false
        elseif current.y < neighbor.y then
            maze[current.x][current.y+1]["bottom"] = false
            maze[neighbor.x][neighbor.y+1]["top"] = false
        else
            maze[current.x][current.y]["top"] = false
            maze[neighbor.x][neighbor.y]["bottom"] = false
        end

        -- Mark neighbor as visited and update current cell
        visited[neighbor.x][neighbor.y] = true
        current = neighbor
    end

    -- Remove unnecessary walls
    for i=1, WIDTH+1 do
        for j=1, HEIGHT+1 do
            if visited[i][j] then
                if i > 1 and not visited[i-1][j] then
                    maze[i][j]["left"] = false
                end
                if i < WIDTH and not visited[i+1][j] then
                    maze[i][j]["right"] = false
                end
                if j > 1 and not visited[i][j-1] then
                    maze[i][j]["top"] = false
                end
                if j < HEIGHT and not visited[i][j+1] then
                    maze[i][j]["bottom"] = false
                end
            end
        end
    end

    -- Return the generated maze
    return maze
end

-- Generate the maze
local maze = generateMaze()

-- Print the generated maze in a grid format
for j=1, HEIGHT*2+1 do
    local row = {}
    for i=1, WIDTH do
        row[i] = "X"
    end
    if j % 2 == 1 then
        for i=2, WIDTH*2+1, 2 do
            if j == 1 then
                row[i] = " "
            else
                row[i] = "X"
            end
        end
    else
        for i=3, WIDTH*2+2, 2 do
            row[i] = "X"
        end
    end
    for i=1, WIDTH+1 do
        if j % 2 == 1 then
            if i == 1 then
                if maze[i][math.floor(j/2)+1]["top"] then
                    row[i] = "X"
                else
                    row[i] = " "
                end
            else
                if maze[i-1][math.floor(j/2)+1]["right"] then
                    row[i*2-1] = "X"
                else
                    row[i*2-1] = " "
                end
                if maze[i][math.floor(j/2)+1]["left"] then
                    row[i*2] = "X"
                else
                    row[i*2] = " "
                end
            end
        else
            if i == 1 then
                if maze[i][math.floor(j/2)]["left"] then
                    row[i] = "X"
                else
                    row[i] = " "
                end
            else
                if maze[i-1][math.floor(j/2)]["right"] then
                    row[i*2-1] = "X"
                else
                    row[i*2-1] = " "
                end
                if maze[i-1][math.floor(j/2)]["bottom"] then
                    row[i*2] = "X"
                else
                    row[i*2] = " "
                end
            end
        end
    end
    print(table.concat(row))
end