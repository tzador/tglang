---[[
This is a multi-line comment in LUA, enclosed in triple square brackets.
Multi-line comments are used to provide extensive documentation about functions, variables, or overall code blocks.

To define a variable, simply use the keyword `local`, followed by the variable name and the equal sign, and then initialize it with a value.
Example:
`local name = "John"`
Or, you can omit the keyword `local` and use the assignment operator `=` to initialize a global variable.

Variables in LUA can hold a variety of data types, including numbers, strings, booleans, and even functions or tables.

To define a function, use the keyword `function`, followed by the function name and a set of parentheses for parameters.
Example:
`function greet(name)`

To call a function, simply use its name in a statement.
Example:
`greet("John")`

LUA uses `if` statements for conditional branching.
The syntax is `if [condition] then [code_block] end`.
To add an `else` clause, simply use `else [code_block]`.
Example:
`if name == "John" then
    print("Hello John!")
else
    print("Hello stranger!")
end`

LUA also has `for` and `while` loops for repetitive actions.
The syntax for a `for` loop is `for [variable] = [start], [stop], [step] do [code_block] end`.
Example:
`for i = 1, 10, 2 do
    print(i)
end`

The `while` loop syntax is `while [condition] do [code_block] end`.
It will continue to execute the code block as long as the condition is true.
Example:
`while i > 0 do
    print(i)
    i = i - 1
end`

Tables in LUA are used to store collections of data, similar to arrays in other languages.
They can hold any data type as values and can be accessed using brackets `[]`.
Example:
`local fruits = {"apple", "banana", "orange"}`
To add a new value to the table, use `insert` and provide the table name and the value.
Example:
`table.insert(fruits, "mango")`

To access an element in the table, use brackets `[]` and provide the index.
Example: `print(fruits[2])` would output "banana".

Lastly, to concatenate strings in LUA, use the concatenation operator `..`.
Example:
`local greeting = "Hello " .. name`

Happy coding!
]]--

-- Defining a variable
local name = "John"

-- Defining a function
function greet(name)
    print("Hello " .. name .. "!")
end

-- Conditional branching
if name == "John" then
    print("Hello John!")
else
    print("Hello stranger!")
end

-- For loop
for i = 1, 10, 2 do
    print(i)
end

-- While loop
local i = 10
while i > 0 do
    print(i)
    i = i - 1
end

-- Defining a table
local fruits = {"apple", "banana", "orange"}

-- Adding a new value to the table
table.insert(fruits, "mango")

-- Accessing and printing an element in the table
print(fruits[2])

-- Concatenating strings
local greeting = "Hello " .. name

-- Output: Hello John!