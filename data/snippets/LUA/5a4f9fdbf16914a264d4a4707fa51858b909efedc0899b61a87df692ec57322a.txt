---[[
This code snippet uses object-oriented programming in LUA to create a class representing a bank account.
Each bank account has a balance and methods to deposit, withdraw, and transfer funds.
]]

--define class 'BankAccount'
BankAccount = {}

--define a constructor for new instances
function BankAccount:new(balance)
  local obj = {balance = balance}
  setmetatable(obj, self)
  self.__index = self
  return obj
end

--define a method to deposit funds
function BankAccount:deposit(amount)
  self.balance = self.balance + amount
end

--define a method to withdraw funds
function BankAccount:withdraw(amount)
  --check if withdrawal amount is greater than balance
  if amount > self.balance then
    error("Insufficient funds, cannot withdraw.")
  else
    self.balance = self.balance - amount
  end
end

--define a method to transfer funds from one bank account to another
function BankAccount:transfer(amount, targetAccount)
  --check if transfer amount is greater than balance
  if amount > self.balance then
    error("Insufficient funds, cannot transfer.")
  else
    self.balance = self.balance - amount --withdraw from source account
    targetAccount:deposit(amount) --deposit into target account
  end
end

--create instances of BankAccount class
account1 = BankAccount:new(500)
account2 = BankAccount:new(1000)

--use methods to manipulate account balances
account1:deposit(100)
account2:withdraw(250)
account1:transfer(200, account2)

--print updated balances
print("Account 1 balance: " .. account1.balance)
print("Account 2 balance: " .. account2.balance)