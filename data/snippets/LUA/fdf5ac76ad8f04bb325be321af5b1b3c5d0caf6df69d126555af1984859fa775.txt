--[[
This is a long and complex code snippet in LUA
It generates a random maze using recursive backtracking algorithm
--]]

-- Initialize variables and functions
local rows = 10
local cols = 10

-- Function to create a grid for the maze
local function createGrid(rows, cols)
  local grid = {}
  for i = 1, rows do
    grid[i] = {}
    for j = 1, cols do
        grid[i][j] = true
    end
  end
  return grid
end

-- Generate a random number within a range
local function randomNumber(min, max)
  math.randomseed(os.time())
  return math.random(min, max)
end

-- Function to get all possible directions from a given cell
local function getPossibleDirections(cell)
  local possibleDirections = {}
  if cell[1] > 1 then
    table.insert(possibleDirections, "up")
  end
  if cell[1] < cols then
    table.insert(possibleDirections, "down")
  end
  if cell[2] > 1 then
    table.insert(possibleDirections, "left")
  end
  if cell[2] < rows then
    table.insert(possibleDirections, "right")
  end
  return possibleDirections
end

-- Function to remove a wall between two cells
local function removeWall(currentCell, nextCell)
  local x = nextCell[1] - currentCell[1]
  local y = nextCell[2] - currentCell[2]

  if x == -1 then
    grid[currentCell[1]][currentCell[2]].leftWall = false
    grid[nextCell[1]][nextCell[2]].rightWall = false
  elseif x == 1 then
    grid[currentCell[1]][currentCell[2]].rightWall = false
    grid[nextCell[1]][nextCell[2]].leftWall = false
  elseif y == -1 then
    grid[currentCell[1]][currentCell[2]].upWall = false
    grid[nextCell[1]][nextCell[2]].bottomWall = false
  elseif y == 1 then
    grid[currentCell[1]][currentCell[2]].bottomWall = false
    grid[nextCell[1]][nextCell[2]].upWall = false
  end
end

-- Recursive function to generate the maze
local function generateMaze(currentCell)
  -- Mark current cell as visited
  grid[currentCell[1]][currentCell[2]] = false

  -- Get all possible directions from current cell
  local possibleDirections = getPossibleDirections(currentCell)

  -- Keep track of visited cells while backtracking
  local visitedCells = {}

  -- Loop until all possible directions have been checked
  while #possibleDirections > 0 do
    -- Select a random direction
    local randomDirection = possibleDirections[randomNumber(1, #possibleDirections)]

    -- Move to the next cell in the selected direction
    local nextCell
    if randomDirection == "up" then
      nextCell = {currentCell[1] - 1, currentCell[2]}
    elseif randomDirection == "down" then
      nextCell = {currentCell[1] + 1, currentCell[2]}
    elseif randomDirection == "left" then
      nextCell = {currentCell[1], currentCell[2] - 1}
    elseif randomDirection == "right" then
      nextCell = {currentCell[1], currentCell[2] + 1}
    end

    -- Check if the next cell is not visited
    if grid[nextCell[1]][nextCell[2]] == true then
      -- Remove the wall between the current and next cell
      removeWall(currentCell, nextCell)
      -- Set the next cell as current cell and recursively call the function
      currentCell = nextCell
      generateMaze(currentCell)
    else
      -- Add current cell to visited cells
      table.insert(visitedCells, currentCell)
      -- Remove the selected direction from possible directions
      for i, direction in ipairs(possibleDirections) do
        if direction == randomDirection then
          table.remove(possibleDirections, i)
          break
        end
      end
      -- Backtrack to the previous cell
      currentCell = visitedCells[#visitedCells]
    end
  end
end

-- Call the createGrid function to initialize the maze grid
local grid = createGrid(rows, cols)

-- Select any cell in the grid and call the generateMaze function
local startCell = {randomNumber(1, rows), randomNumber(1, cols)}
generateMaze(startCell)

-- Print the maze grid
for i = 1, rows do
  -- Print each row in the grid
  for j = 1, cols do
    -- Print the left wall of the current cell if it exists
    if grid[i][j].leftWall then
      io.write("|")
    else
      io.write(" ")
    end
    -- Print the bottom wall of the current cell if it exists
    if grid[i][j].bottomWall then
      io.write("_")
    else
      io.write(" ")
    end
    -- Print the right wall of the current cell if it exists
    if j == cols then
      io.write("|")
    elseif grid[i][j].rightWall then
      io.write("|")
    else
      io.write(" ")
    end
  end
  -- Print a new line after each row
  io.write("\n")
end