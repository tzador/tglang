function quicksort(arr, left, right)
    -- This function implements the quicksort algorithm to sort an array in ascending order
    -- Input:
    -- arr - the array to be sorted
    -- left - the starting index of the array (usually 1)
    -- right - the ending index of the array (usually the length of the array)

    -- if the array has less than or equal to 1 element, it is already sorted
    if left >= right then
        return
    end

    -- select the pivot element as the middle element of the array
    local pivot = arr[math.ceil((left + right) / 2)]

    -- initialize two pointers, one from the left and one from the right
    local i = left
    local j = right

    -- loop until the pointers meet
    while i <= j do
        -- find an element on the left side that is greater than or equal to the pivot
        while arr[i] < pivot do
            i = i + 1
        end

        -- find an element on the right side that is less than or equal to the pivot
        while arr[j] > pivot do
            j = j - 1
        end

        -- if the pointers have not met, swap the elements at their respective positions
        if i <= j then
            local temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp

            i = i + 1
            j = j - 1
        end
    end

    -- recursively call the quicksort function on the left and right partitions
    quicksort(arr, left, j)
    quicksort(arr, i, right)
end

-- example usage
local arr = {5, 2, 1, 7, 6, 3, 4}
quicksort(arr, 1, #arr)

-- output: {1, 2, 3, 4, 5, 6, 7}