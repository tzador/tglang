--[[ 
Creates a new class, inherits from a base class and adds a method to it
@param base (table): the base class
@return (table): the new class table 
--]]
function newClass(base)
  local newcls = {}
  --[[ 
    sets the meta table for the new class to inherit from the base class
    contains the base class's methods and fields
    @param __index (function): the base class's __index method
    @param __newindex (function): the base class's __newindex method
    @param __call (function): the base class's __call method
  --]]
  setmetatable(newcls, {__index = base, __newindex = base, __call = base})
  local classMt = {__index = newcls}
  --[[ 
    creates a new instance of the class
    @param self (table): the parent object
    @return (table): the new instance of the class
  --]]
  function newcls:new(self)
    local instance = setmetatable({}, classMt)
    instance.super = base
    self.__index = self
    --[[ 
      calls the base class's constructor method
      @param instance (table): the instance of the new class
      @param self (table): the parent object
    --]]
    if instance.super.new then
      instance.super.new(instance, self)
    end
    return instance
  end
  --[[ 
    adds a new method to the class
    @param methodName (string): the name of the method
    @param method (function): the method to be added
  --]]
  function newcls:method(methodName, method)
    self[methodName] = method
  end
  return newcls
end