--This program generates a random maze using a recursive backtracking algorithm

--Function to create a grid
function createGrid(rows, cols)
    local grid = {}

    --Loop through rows
    for i=1,rows do
        grid[i] = {}

        --Loop through columns
        for j=1,cols do
            grid[i][j] = {
                --Initialize the walls for each cell
                topWall = true,
                bottomWall = true,
                leftWall = true,
                rightWall = true,
                --Set cell as unvisited
                visited = false
            }
        end
    end

    return grid
end

--Function to get the neighbors of a cell
function getNeighbors(grid, cell)
    local neighbors = {}

    --Get top neighbor if it exists
    if cell.i > 1 then
        local topNeighbor = grid[cell.i - 1][cell.j]
        if not topNeighbor.visited then
            table.insert(neighbors, topNeighbor)
        end
    end

    --Get bottom neighbor if it exists
    if cell.i < #grid then
        local bottomNeighbor = grid[cell.i + 1][cell.j]
        if not bottomNeighbor.visited then
            table.insert(neighbors, bottomNeighbor)
        end
    end

    --Get left neighbor if it exists
    if cell.j > 1 then
        local leftNeighbor = grid[cell.i][cell.j - 1]
        if not leftNeighbor.visited then
            table.insert(neighbors, leftNeighbor)
        end
    end

    --Get right neighbor if it exists
    if cell.j < #grid[1] then
        local rightNeighbor = grid[cell.i][cell.j + 1]
        if not rightNeighbor.visited then
            table.insert(neighbors, rightNeighbor)
        end
    end

    return neighbors
end

--Function to remove wall between two cells
function removeWalls(current, neighbor)
    --Remove left wall of current cell if neighbor is to the left
    if current.j > neighbor.j then
        current.leftWall = false
        neighbor.rightWall = false
    end

    --Remove right wall of current cell if neighbor is to the right
    if current.j < neighbor.j then
        current.rightWall = false
        neighbor.leftWall = false
    end

    --Remove top wall of current cell if neighbor is above
    if current.i > neighbor.i then
        current.topWall = false
        neighbor.bottomWall = false
    end

    --Remove bottom wall of current cell if neighbor is below
    if current.i < neighbor.i then
        current.bottomWall = false
        neighbor.topWall = false
    end
end

--Recursive function to generate maze using backtracking algorithm
function generateMaze(grid, current)
    --Mark current cell as visited
    current.visited = true

    --Get all unvisited neighbors
    local neighbors = getNeighbors(grid, current)

    while #neighbors > 0 do
        --Choose a random neighbor
        local randomIndex = math.random(#neighbors)
        local neighbor = neighbors[randomIndex]

        --Remove wall between current and neighbor
        removeWalls(current, neighbor)

        --Recursively call the function with neighbor as current cell
        generateMaze(grid, neighbor)

        --Remove neighbor from list of neighbors
        table.remove(neighbors, randomIndex)
    end
end

--Function to print the maze in the console
function printMaze(grid)
    --Loop through rows
    for i=1,#grid do
        local row = ""

        --Loop through columns
        for j=1,#grid[1] do
            local cell = grid[i][j]

            --Add top wall if it exists
            if cell.topWall then
                row = row .. "###"
            else
                row = row .. "# #"
            end

            --Add right wall if it exists
            if cell.rightWall then
                row = row .. "#"
            else
                row = row .. " "
            end
        end

        --Add last wall of row
        row = row .. "#"

        --Print row
        print(row)

        --Print bottom walls
        for j=1,#grid[1] do
            local cell = grid[i][j]

            --Add bottom wall if it exists
            if cell.bottomWall then
                io.write("###")
            else
                io.write("# #")
            end
        end

        --Print last bottom wall
        io.write("#\n")
    end
end

--Initialize grid
local grid = createGrid(10,10)

--Set starting cell as current cell
local current = grid[1][1]

--Generate maze starting from current cell
generateMaze(grid, current)

--Print maze
printMaze(grid)