-- This code snippet generates a random maze using the Recursive Backtracker algorithm

-- Function to create an empty grid
function createGrid(rows, columns)
    local grid = {}
    for i = 1, rows do
        grid[i] = {}
        for j = 1, columns do
            grid[i][j] = {}
        end
    end
    return grid
end

-- Function to check if a cell is within the bounds of the grid
function inBounds(grid, row, column)
    local rows = #grid
    local columns = #grid[1]
    if row < 1 or row > rows or column < 1 or column > columns then
        return false
    end
    return true
end

-- Function to get the neighbors of a cell
function getNeighbors(grid, row, column)
    local neighbors = {}
    local offsets = {-1, 1, -1, 1}
    for i = 1, 4 do
        local neighborRow = row + offsets[i]
        local neighborColumn = column + offsets[i+1]
        if inBounds(grid, neighborRow, neighborColumn) then
            table.insert(neighbors, grid[neighborRow][neighborColumn])
        end
    end
    return neighbors
end

-- Function for recursive backtracking
function recursiveBacktracker(grid, currentCell)
    currentCell.visited = true
    local neighbors = getNeighbors(grid, currentCell.row, currentCell.column)
    while #neighbors > 0 do
        local randomIndex = math.random(#neighbors)
        local randomNeighbor = neighbors[randomIndex]
        if not randomNeighbor.visited then
            -- Remove the wall between the currentCell and the randomNeighbor
            if randomNeighbor.row == currentCell.row then
                if randomNeighbor.column > currentCell.column then
                    currentCell.rightWall = false
                    randomNeighbor.leftWall = false
                else
                    currentCell.leftWall = false
                    randomNeighbor.rightWall = false
                end
            else
                if randomNeighbor.row < currentCell.row then
                    currentCell.topWall = false
                    randomNeighbor.bottomWall = false
                else
                    currentCell.bottomWall = false
                    randomNeighbor.topWall = false
                end
            end
            -- Recursively call this function with the randomNeighbor as the currentCell
            recursiveBacktracker(grid, randomNeighbor)
        end
        table.remove(neighbors, randomIndex)
    end
    return grid
end

-- Main Function
function main()
    -- Create a 10x10 grid
    local grid = createGrid(10, 10)

    -- Choose a random starting cell
    local currentCell = grid[math.random(10)][math.random(10)]

    -- Generate the maze using recursive backtracking
    grid = recursiveBacktracker(grid, currentCell)

    -- Print the maze in the console
    for i = 1, #grid do
        local row = ""
        for j = 1, #grid[1] do
            local cell = grid[i][j]
            row = row .. "+"
            if cell.topWall then
                row = row .. "----"
            else
                row = row .. "    "
            end
        end
        print(row .. "+")

        for j = 1, #grid[1] do
            local cell = grid[i][j]
            if cell.leftWall then
                io.write("|    ")
            else
                io.write("     ")
            end
            if j == #grid[1] then
                if cell.rightWall then
                    io.write("|")
                else
                    io.write(" ")
                end
            end
        end
        print()

        for j = 1, #grid[1] do
            local cell = grid[i][j]
            if cell.bottomWall then
                io.write("+----")
            else
                io.write("+    ")
            end
            if j == #grid[1] then
                print("+")
            end
        end
    end
end

-- Call the main function to generate the maze
main()