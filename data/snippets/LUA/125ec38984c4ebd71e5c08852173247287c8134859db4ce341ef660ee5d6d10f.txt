-- This code snippet generates a random 3D maze using recursive backtracking algorithm
-- Define the size of the maze
local width, height = 10, 10

-- Define the default values for maze cells
local WALL, PATH, VISITED = 1, 0, 2

-- Initialize the maze with all walls
local maze = {}
for i = 1, height do
  maze[i] = {}
  for j = 1, width do
    maze[i][j] = WALL
  end
end

-- Utility function to check if a cell is in bound
local function in_bound(x, y)
  return x >= 1 and y >= 1 and x <= width and y <= height
end

-- Recursive function to generate the maze
local function generate_maze(x, y)
  -- Initialize directions: up, down, left, right
  local directions = { {0, -1}, {0, 1}, {-1, 0}, {1, 0} }
  -- Randomize the order of directions
  math.randomseed(os.time())
  for i = 1, 4 do
    local random_index = math.random(1, 4)
    local temp = directions[i]
    directions[i] = directions[random_index]
    directions[random_index] = temp
  end

  -- Loop through each direction
  for i = 1, 4 do
    -- Get the new cell coordinates after moving in the direction
    local new_x = x + directions[i][1]
    local new_y = y + directions[i][2]

    -- Check if the cell is in bound and not visited
    if in_bound(new_x, new_y) and maze[new_y][new_x] == WALL then
      -- Create a path between current cell and the new cell
      maze[y][x] = PATH
      maze[new_y][new_x] = PATH

      -- Move to the new cell and continue generating the maze recursively
      generate_maze(new_x, new_y)
    end
  end
end

-- Starting point of generation at top left corner
generate_maze(1, 1)

-- Print the generated maze in a formatted way
for i = 1, height do
  local row = ""
  for j = 1, width do
    -- Replace the WALL, PATH and VISITED values with symbols to print
    if maze[i][j] == WALL then
      row = row .. "# "
    elseif maze[i][j] == PATH then
      row = row .. "  "
    elseif maze[i][j] == VISITED then
      row = row .. "x "
    end
  end
  print(row)
end