-- Function to check if a number is prime
function isPrime(number)
    -- Start with 2 as the first prime number
    local divisor = 2

    -- Use a while loop to check each number from 2 to the square root of the input number
    while divisor * divisor <= number do
        -- If the input number is divisible by the current divisor, return false
        if number % divisor == 0 then
            return false
        end
        -- Increment the divisor by 1 for each iteration
        divisor = divisor + 1
    end

    -- If the number is not divisible by any number up till its square root, then it is prime
    return true
end

-- Function to generate the first n prime numbers
function generatePrimes(n)
    -- Create an empty table to store the prime numbers
    local primes = {}

    -- Keep a count of the prime numbers generated
    local count = 0

    -- Start with 2 as the first prime number
    local currentNumber = 2

    -- Use a while loop to generate the first 'n' prime numbers
    while count < n do
        -- Check if the current number is prime by calling the isPrime function
        if isPrime(currentNumber) then
            -- If the current number is prime, add it to the primes table
            table.insert(primes, currentNumber)

            -- Increment the count by 1
            count = count + 1
        end

        -- Increment the current number by 1 for each iteration
        currentNumber = currentNumber + 1
    end

    -- Return the table of prime numbers
    return primes
end

-- Call the generatePrimes function with n = 10 and store the result in the 'primeNumbers' variable
local primeNumbers = generatePrimes(10)

-- Print out the first 10 prime numbers generated
print("The first 10 prime numbers are:")
for i, prime in ipairs(primeNumbers) do
    print(i, prime)
end