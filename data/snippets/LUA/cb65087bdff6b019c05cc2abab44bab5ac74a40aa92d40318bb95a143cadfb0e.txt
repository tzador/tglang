--[[
This is a multi-line comment in LUA.
It can span across multiple lines and is used to document the code.
]]

-- This is a single-line comment in LUA.

-- Variables can be declared using the `local` keyword.
local num = 10; -- Initializing a variable `num` with value 10.

-- Variables can also be declared without the `local` keyword and have a global scope.
globalVariable = "I am a global variable";

-- Conditional statements in LUA use the `if` keyword.
if num == 10 then -- `then` is used to mark the start of the code block.
    -- Two hyphens is used to add comments in a code block.

    -- Printing the value of a variable using the `print()` function.
    print("The value of `num` is 10.");
else -- `else` is used when the condition is not met.
    print("The value of `num` is not 10.");
end -- `end` is used to mark the end of the code block.

-- LUA uses `elseif` for adding multiple conditions.
if num > 0 then
    print("`num` is a positive number.");
elseif num < 0 then
    print("`num` is a negative number.");
else
    print("`num` is 0.");
end

-- Loops in LUA use the `while` keyword.
while num > 0 do
    print(num);
    num = num - 1;
end

-- `for` loop can also be used in LUA.
for i = 1, 5 do -- `i` is the loop variable, `1` is starting value, `5` is the ending value.
    print(i);
end

-- Functions in LUA can be declared using the `function` keyword.
function sum(x, y)
    return x + y;
end

-- Calling a function and printing the result.
print("The sum of 5 and 10 is " .. sum(5, 10));

-- Tables in LUA are used as an associative array.
-- Keys and values can be any type of data.
local fruits = {apple = "red", banana = "yellow", orange = "orange"}

-- Accessing values from a table using keys.
print(fruits["apple"]); -- Output: red
print(fruits["banana"]); -- Output: yellow
print(fruits["orange"]); -- Output: orange

--[[
Tables can also be used to represent objects.
Methods can be defined within tables using the `:` operator.
Parameters of methods always include a reference to the object.

This table represents a rectangle.
]]
rectangle = {
    length = 5,
    width = 10,

    -- Method for calculating the area of the rectangle.
    calculateArea = function(self)
        return self.length * self.width;
    end
}

-- Calling the method and printing the result.
print("The area of the rectangle is " .. rectangle:calculateArea());