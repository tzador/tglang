---[[
A complex code snippet in LUA
This code snippet performs a binary search algorithm on an array
Parameters:
    arr: the array to be searched
    min: the starting index of the array
    max: the ending index of the array
    val: the value to be searched for in the array
Returns:
    If the value is found, returns the index of the value
    If the value is not found, returns -1
]]--

function binarySearch(arr, min, max, val)
  -- check if min is greater than or equal to max
  if min >= max then
    -- return -1 since the value was not found
    return -1
  end
  -- calculate the mid index of the array
  local mid = math.floor((min + max) / 2)
  -- compare the middle element with the value
  if arr[mid] == val then
    -- return the index of the value since it was found
    return mid
  elseif arr[mid] > val then
    -- recursively call binarySearch with updated parameters for the left half of the array
    return binarySearch(arr, min, mid-1, val)
  else
    -- recursively call binarySearch with updated parameters for the right half of the array
    return binarySearch(arr, mid+1, max, val)
  end
end

-- sample array to be searched
local arr = {2, 5, 7, 9, 11, 13, 19}
-- value to be searched for
local val = 11
-- perform binary search on the array
local result = binarySearch(arr, 1, #arr, val)
-- print the result
print("Value " .. val .. " found at index " .. result)