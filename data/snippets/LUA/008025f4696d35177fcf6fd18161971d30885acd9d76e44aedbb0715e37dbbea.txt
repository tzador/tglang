local function quickSort(array, low, high)
  if low < high then -- check if low index is less than high index
    local pivot = array[high] -- set pivot as the last element
    local i = low - 1 -- set initial index

    for j = low, high - 1 do -- loop through elements from low to high-1
      if array[j] <= pivot then -- if current element is less than or equal to pivot
        i = i + 1 -- increment initial index
        array[i], array[j] = array[j], array[i] -- swap elements at initial index and current index
      end
    end

    array[i + 1], array[high] = array[high], array[i + 1] -- swap pivot with element at initial index + 1

    -- recursive calls to quickSort on elements below and above pivot
    quickSort(array, low, i)
    quickSort(array, i + 2, high)
  end
end

local array = {5, 9, 1, 3, 2, 8, 7, 6, 4} -- example array
quickSort(array, 1, #array) -- call quickSort function
print(table.concat(array, ", ")) -- print sorted array in a comma separated format

-- Output:
-- 1, 2, 3, 4, 5, 6, 7, 8, 9