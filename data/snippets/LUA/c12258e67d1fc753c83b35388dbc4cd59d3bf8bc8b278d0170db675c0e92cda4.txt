--[[
This is a long and complex code snippet written in LUA.
It uses object-oriented programming and demonstrates
the use of metatables, classes, and inheritance.

First, we create a class called 'Shape' with attributes 'x' and 'y'.
We also define a function called 'new' to instantiate an object of this class.

Then, we create another class called 'Rectangle' that inherits from the 'Shape' class.
This class adds an attribute 'width' and overrides the 'new' function to include the 'width' parameter.

Next, we use the 'setmetatable' function to set the 'Rectangle' class as the metatable for 'Shape'.
This allows 'Shape' objects to access 'Rectangle' methods.

Lastly, we create an instance of the 'Rectangle' class called 'rect' with x = 5, y = 10, and width = 20.
We then print out the area and perimeter of this rectangle using the 'getArea' and 'getPerimeter' methods.

-- Define class 'Shape' --
Shape = {x = 0, y = 0} -- attributes 'x' and 'y'

function Shape:new(x, y) -- function to instantiate object
  local obj = {}
  setmetatable(obj, self) -- set 'Shape' as metatable for obj
  self.__index = self
  obj.x = x
  obj.y = y
  return obj
end

function Shape:getArea() -- method to calculate and return area
  return self.x * self.y
end

function Shape:getPerimeter() -- method to calculate and return perimeter
  return 2 * (self.x + self.y)
end

-- Define class 'Rectangle' that inherits from 'Shape' --
Rectangle = {width = 0} -- adds attribute 'width'

function Rectangle:new(x, y, width) -- override 'new' function to include 'width' parameter
  local obj = Shape:new(x, y) -- call 'new' function of 'Shape' class
  setmetatable(obj, self) -- set 'Rectangle' as metatable for obj
  self.__index = self
  obj.width = width
  return obj
end

function Rectangle:getArea() -- override 'getArea' method to calculate area of rectangle
  return self.x * self.y * self.width
end

-- Set 'Rectangle' class as metatable for 'Shape' class --
setmetatable(Shape, Rectangle)

-- Create an instance of 'Rectangle' class called 'rect' --
rect = Rectangle:new(5, 10, 20)

-- Print area and perimeter of 'rect' --
print("Area = " .. rect:getArea()) -- output: 1000
print("Perimeter = " .. rect:getPerimeter()) -- output: 60