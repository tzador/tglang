-- This code snippet creates an Inventory class
-- with methods for adding, removing, and searching for items.
-- It also includes error handling, getters and setters, and a constructor.

-- Define the Inventory class
Inventory = {}

-- Define the constructor method
function Inventory:new()
    local inv = {}  -- Create a new table for the inventory
    setmetatable(inv, self)  -- Set the Inventory class as its metatable
    self.__index = self  -- Set the Inventory class as the default index for the table
    inv.items = {}  -- Initialize an empty table for storing items in the inventory
    return inv  -- Return the newly created inventory object
end

-- Define the addItem method
function Inventory:addItem(item)
    -- Check if the input is a string and not empty
    if type(item) == "string" and item ~= "" then
        table.insert(self.items, item)  -- Add the item to the inventory table
    else
        error("Invalid input")  -- Throw an error if input is not valid
    end
end

-- Define the removeItem method
function Inventory:removeItem(item)
    -- Check if the input is a string and not empty
    if type(item) == "string" and item ~= "" then
        local removed = false  -- Create a boolean value to track if item was successfully removed
        -- Loop through the inventory table
        for i, currentItem in ipairs(self.items) do
            if currentItem == item then  -- If the current item matches the input item
                table.remove(self.items, i)  -- Remove it from the inventory table
                removed = true  -- Set the boolean value to true
                break  -- Exit the loop
            end
        end
        if not removed then  -- If the item was not removed (meaning it was not found in the table)
            error("Item not found")  -- Throw an error
        end
    else
        error("Invalid input")  -- Throw an error if input is not valid
    end
end

-- Define the searchItem method
function Inventory:searchItem(item)
    -- Check if the input is a string and not empty
    if type(item) == "string" and item ~= "" then
        -- Loop through the inventory table
        for i, currentItem in ipairs(self.items) do
            if currentItem == item then  -- If the current item matches the input item
                return "Found item: " .. item  -- Return a string with the item name
            end
        end
        return "Item not found"  -- If item is not found, return a message
    else
        error("Invalid input")  -- Throw an error if input is not valid
    end
end

-- Define the getter method for the items table
function Inventory:getItems()
    return self.items  -- Return the items table
end

-- Define the setter method for the items table
function Inventory:setItems(items)
    -- Check if the input is a table
    if type(items) == "table" then
        self.items = items  -- Set the input table as the items table
    else
        error("Invalid input")  -- Throw an error if input is not valid
    end
end

-- Create a new instance of the Inventory class
myInventory = Inventory:new()

-- Add items to the inventory
myInventory:addItem("Sword")
myInventory:addItem("Potion")
myInventory:addItem("Shield")

-- Remove an item from the inventory
myInventory:removeItem("Potion")

-- Search for an item in the inventory
print(myInventory:searchItem("Sword"))  -- Output: Found item: Sword

-- Get the current items in the inventory
print(#myInventory:getItems())  -- Output: 2

-- Set a new items table for the inventory
myInventory:setItems({"Bow", "Arrow", "Dagger"})

-- Get the new items in the inventory
print(#myInventory:getItems())  -- Output: 3