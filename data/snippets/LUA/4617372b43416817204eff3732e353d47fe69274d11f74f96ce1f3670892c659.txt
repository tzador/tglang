--This code snippet generates a simple text-based game--

print("Welcome to the Adventure Game!")
print("You are on a quest to find a treasure hidden deep in a forest.")

--Create variables for player name and starting location--
player_name = "John"
current_location = "Starting Area"

--Create a list of possible actions--
actions = {"explore", "move", "take", "use", "inventory", "quit"}

--Create a table of locations with their descriptions and available actions--
locations = {
    ["Starting Area"] = {description = "You are standing in a grassy field with a dirt path leading deeper into the forest. There is a rusty sword laying on the ground.", actions = {"explore", "move", "take"}},
    ["Forest Path"] = {description = "The dirt path leads deeper into the forest. There are trees on either side.", actions = {"explore", "move", "take"}},
    ["Clearing"] = {description = "You have reached a clearing in the forest. There is a small pond surrounded by wildflowers.", actions = {"explore", "move", "take"}}
}

--Create a function to handle player input--
function handle_input(input)
    --Check if input is a valid action--
    if table.contains(actions, input) then
        --Check if player is using an available action for their current location--
        if table.contains(locations[current_location].actions, input) then
            --Handle each action separately--
            if input == "explore" then
                --Print the description of the current location--
                print(locations[current_location].description)
            elseif input == "move" then
                --Get input from player on which direction to move--
                print("Which direction would you like to move? (north, south, east, west)")
                --Use string.upper() to ensure input is in uppercase for comparison--
                local direction = string.upper(io.read())
                --Use a switch statement to handle each direction--
                --If the direction is unavailable, print an error message--
                switch (direction) {
                    case "NORTH":
                        --Check if new location exists in the locations table--
                        if locations[current_location].north_location ~= nil then
                            --Update current location and print new location description--
                            current_location = locations[current_location].north_location
                            print(locations[current_location].description)
                        else
                            print("You cannot move in that direction.")
                        end
                        break;
                    case "SOUTH":
                        if locations[current_location].south_location ~= nil then
                            current_location = locations[current_location].south_location
                            print(locations[current_location].description)
                        else
                            print("You cannot move in that direction.")
                        end
                        break;
                    case "EAST":
                        if locations[current_location].east_location ~= nil then
                            current_location = locations[current_location].east_location
                            print(locations[current_location].description)
                        else
                            print("You cannot move in that direction.")
                        end
                        break;
                    case "WEST":
                        if locations[current_location].west_location ~= nil then
                            current_location = locations[current_location].west_location
                            print(locations[current_location].description)
                        else
                            print("You cannot move in that direction.")
                        end
                        break;
                    default:
                        print("Invalid direction. Please try again.")
                }
            elseif input == "take" then
                --Check if there is an item to take in the current location--
                if locations[current_location].item ~= nil then
                    --Update player's inventory and remove item from current location--
                    table.insert(inventory, locations[current_location].item)
                    locations[current_location].item = nil
                    print("You have taken the item.")
                else
                    print("There is nothing to take.")
                end
            elseif input == "use" then
                --Print player's current inventory--
                print("You have the following items in your inventory:")
                for key, value in pairs(inventory) do
                    print("-" .. value)
                end
                --Get input from player on which item to use--
                print("Which item would you like to use?")
                local item = string.upper(io.read())
                --Check if the item is in the inventory--
                if table.contains(inventory, item) then
                    --Handle each usable item separately--
                    if item == "RUSTY SWORD" then
                        print("You swing the rusty sword at the air.")
                    else
                        print("That item cannot be used.")
                    end
                else
                    print("You do not have that item.")
                end
            elseif input == "inventory" then
                --Print player's current inventory--
                print("You have the following items in your inventory:")
                for key, value in pairs(inventory) do
                    print("-" .. value)
                end
            elseif input == "quit" then
                --End the game loop--
                game_over = true
            end
        else
            print("You cannot do that here.")
        end
    else
        print("Invalid action. Please try again.")
    end
end

--Initialize game variables--
inventory = {}
game_over = false

--Game loop--
while not game_over do
    --Print available actions for player--
    print("Available actions: " .. table.concat(actions, ", "))
    --Get input from player and use string.upper() to ensure input is in uppercase for comparison--
    local input = string.upper(io.read())
    --Handle player input--
    handle_input(input)
end

--Print game over message with final inventory--
print("Thanks for playing! Your final inventory included:")
for key, value in pairs(inventory) do
    print("-" .. value)
end