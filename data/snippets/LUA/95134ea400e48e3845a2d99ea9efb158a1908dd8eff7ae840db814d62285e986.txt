--[[
    This is a long and complex code snippet written in LUA.
    The snippet shows the use of metamethods and tables in LUA programming language.
    Metamethods allow for response to operations on tables, such as arithmetic and comparison.
    Tables in LUA are associative arrays consisting of key-value pairs.
    This code snippet creates a table with metamethods that performs basic arithmetic operations on its values.
    It also includes a function that checks the data type of values in the table.
    The snippet also shows how to access and modify the values in the table.
]]
-- Declare a table with metamethods
local mt = {
    __add = function(self, other) -- Define addition metamethod
        local sum = {}
        for i=1, #self do
            sum[i] = self[i] + other[i]
        end
        return sum
    end,
    __sub = function (self, other) -- Define subtraction metamethod
        local diff = {}
        for i=1, #self do
            diff[i] = self[i] - other[i]
        end
        return diff
    end,
    __mul = function (self, other) -- Define multiplication metamethod
        local product = {}
        for i=1, #self do
            product[i] = self[i] * other[i]
        end
        return product
    end,
    __div = function (self, other) -- Define division metamethod
        local quotient = {}
        for i=1, #self do
            quotient[i] = self[i] / other[i]
        end
        return quotient
    end,
    __mod = function (self, other) -- Define modulo metamethod
        local remainder = {}
        for i=1, #self do
            remainder[i] = self[i] % other[i]
        end
        return remainder
    end,
    __pow = function (self, other) -- Define exponentiation metamethod
        local result = {}
        for i=1, #self do
            result[i] = self[i] ^ other[i]
        end
        return result
    end
}
-- Create a table with key-value pairs
local numbers = {
    a = 10, -- Value with datatype number
    b = "abc", -- Value with datatype string
    c = true, -- Value with datatype boolean
    d = {1, 2, 3, 4}, -- Value with datatype table
    e = nil -- Value with datatype nil
}
-- Set the metatable of numbers table to use the declared metamethods
setmetatable(numbers, mt)
-- Function to check the data type of values in a table
local function check_type(table) 
    for key, value in pairs(table) do
        print(key, "=>", type(value)) -- Print the key-value pair and its data type
    end
end
-- Print the data type of values in the numbers table
check_type(numbers)
-- Output: 
-- a => number
-- b => string
-- c => boolean
-- d => table
-- e => nil
-- Access and modify the values in the table
numbers.a = numbers.a + 20 -- Add 20 to value in 'a' key
numbers.b = numbers.b .. "def" -- Concatenate "def" to value in 'b' key
numbers.c = not numbers.c -- Negate value in 'c' key
numbers.d[2] = 5 -- Change value at index 2 in 'd' key
-- Print the updated values in the table
for key, value in pairs(numbers) do
    print(key, "=>", value)
end
-- Output:
-- a => 30
-- b => abcdef
-- c => false
-- d => {1, 5, 3, 4}