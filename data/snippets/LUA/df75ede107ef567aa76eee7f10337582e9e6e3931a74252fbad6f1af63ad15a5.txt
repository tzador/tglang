--[[
This code uses the Corona SDK to create a 2D game in Lua.

-- Load physics module
local physics = require("physics")

-- Start physics engine
physics.start()

-- Set gravity
physics.setGravity(0, 9.8)

-- Hide status bar
display.setStatusBar(display.HiddenStatusBar)

-- Create background
local background = display.newRect(0, 0, display.contentWidth, display.contentHeight)
background.anchorX = 0
background.anchorY = 0
background:setFillColor(0, 0, 0)

-- Create ground
local ground = display.newRect(display.contentCenterX, display.contentHeight - 25, display.contentWidth, 50)
ground:setFillColor(1, 1, 1)
ground.strokeWidth = 3
ground:setStrokeColor(0.7, 0.2, 0.8)

-- Create player
local player = display.newCircle(display.contentCenterX, display.contentCenterY, 25)
player:setFillColor(1, 0, 0)
player.strokeWidth = 3
player:setStrokeColor(1, 1, 0)

-- Add physics properties to player
physics.addBody(player, "dynamic", {density = 1, bounce = 0, friction = 1})

-- Create ball
local ball = display.newCircle(display.contentCenterX, display.contentCenterY - 200, 15)
ball:setFillColor(1, 1, 1)
ball.strokeWidth = 3
ball:setStrokeColor(1, 0, 1)

-- Add physics properties to ball
physics.addBody(ball, "dynamic", {density = 0.5, bounce = 0.8})

-- Create score text
local scoreText = display.newText("Score: 0", display.contentCenterX, 20, native.systemFontBold, 20)

-- Set initial score
local score = 0

-- Create function to increase score
local function increaseScore()
    score = score + 1
    scoreText.text = "Score: " .. score
end

-- Create touch event listener for player
local function playerTouched(event)
    -- Add impulse to player when touched
    if event.phase == "began" then
        player:applyLinearImpulse(0, -15, player.x, player.y)
    end
end

-- Add touch event listener to player
player:addEventListener("touch", playerTouched)

-- Function to create new ball
local function newBall()
    local newBall = display.newCircle(display.contentCenterX, display.contentCenterY - 200, 15)
    newBall:setFillColor(1, 1, 1)
    newBall.strokeWidth = 3
    newBall:setStrokeColor(1, 0, 1)

    -- Add physics properties to new ball
    physics.addBody(newBall, "dynamic", {density = 0.5, bounce = 0.8})

    -- Add collision listener to new ball
    function newBall:collision(event)
        -- Check if collision is with player
        if event.other == player then
            -- Remove ball from screen
            newBall:removeSelf()

            -- Increase score
            increaseScore()
        end
    end

    -- Add collision listener to new ball
    newBall:addEventListener("collision", newBall)

    -- Add new ball to the screen after random amount of time
    timer.performWithDelay(math.random(2000, 4000), newBall)
end

-- Start game by creating first ball
newBall()