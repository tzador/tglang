-- this function takes in two arrays and returns a new array
function mergeArrays(arr1, arr2)
    local result = {} -- create an empty array for result
    local i = 1 -- initialize counter for first array
    local j = 1 -- initialize counter for second array

    -- loop through both arrays until one reaches its end
    while i <= #arr1 and j <= #arr2 do
        -- if the current element in arr1 is smaller, add it to the result array
        if arr1[i] < arr2[j] then
            result[#result + 1] = arr1[i] -- since arrays are 1-indexed in Lua, we use #result + 1 to add an element
            i = i + 1 -- increment counter for arr1
        else -- otherwise, add the current element in arr2 to the result array
            result[#result + 1] = arr2[j]
            j = j + 1 -- increment counter for arr2
        end
    end

    -- add remaining elements from arr1 to the result array
    for k = i, #arr1 do
        result[#result + 1] = arr1[k]
    end

    -- add remaining elements from arr2 to the result array
    for k = j, #arr2 do
        result[#result + 1] = arr2[k]
    end

    -- return the result array
    return result
end

-- example usage of the function
local arr1 = {2, 4, 6, 8}
local arr2 = {1, 3, 5, 7, 9}
print("Merged array: ", table.concat(mergeArrays(arr1, arr2), ", "))
-- output: Merged array: 1, 2, 3, 4, 5, 6, 7, 8, 9