-- This is a comment in LUA.

-- Function to check if number is prime
function is_prime(number)
  -- If number is less than 2, it's not prime
  if number < 2 then
    return -1
  end
  -- Loop to check if number is divisible by any number less than it
  for i=2, number-1, 1 do
    if number % i == 0 then
      -- If it is divisible, it's not prime
      return -1
    end
  end
  -- If number is not divisible by any number, it is prime
  return 1
end

-- Function to find all prime numbers within a given range
function find_primes(start, finish)
  -- Empty table to store prime numbers
  local primes = {}
  -- Loop through the range
  for i=start, finish do
    -- Check if i is prime using the is_prime function
    if is_prime(i) == 1 then
      -- If it is, add it to the table
      table.insert(primes, i)
    end
  end
  -- Return the table of prime numbers
  return primes
end

-- Print all prime numbers from 1 to 100 using the find_primes function
print(table.concat(find_primes(1,100), ", "))  -- Output: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97

-- Function to check if number is even
function is_even(number)
  -- If number is divisible by 2, it's even
  if number % 2 == 0 then
    return true
  else
    return false  -- If not, it's odd
  end
end

-- Function to generate a Fibonacci sequence of a given length
function generate_fibonacci(length)
  -- Empty table to store Fibonacci numbers
  local fibonacci = {0, 1}
  -- Loop to generate Fibonacci numbers of the given length
  for i=3, length do
    -- Calculate next Fibonacci number by summing the two previous numbers
    local next_fibonacci = fibonacci[i-1] + fibonacci[i-2]
    -- Add the next Fibonacci number to the table
    table.insert(fibonacci, next_fibonacci)
  end
  -- Return the table of Fibonacci numbers
  return fibonacci
end

-- Print the first 10 Fibonacci numbers
print(table.concat(generate_fibonacci(10), ", "))  -- Output: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34