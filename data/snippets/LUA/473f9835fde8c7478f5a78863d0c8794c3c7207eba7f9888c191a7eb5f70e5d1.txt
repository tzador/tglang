---[[
Introduction:
This code snippet demonstrates the calculation of the factorial of a given number using a recursive function in LUA.
The factorial of a positive integer n is defined as: n! = 1 * 2 * ... * (n-1) * n. 
In other words, n! is the product of all positive integers from 1 to n.
]]

---[[
Function: factorial
Parameters:
- num: a positive integer whose factorial needs to be calculated
Returns:
- the factorial of num
Description:
This function calculates the factorial of a given number using recursion.
Note: In this implementation, negative or non-integer values for num are ignored and the function returns nil.
]]
factorial = function(num)
    -- base case for recursion: factorial of 0 is 1
    if num == 0 then 
        return 1
    end

    -- invalid case: negative or non-integer values
    if (type(num) ~= "number") or (num < 0) or (math.floor(num) ~= num) then 
        return nil
    end

    -- recursive case: the factorial of a number n is n times the factorial of (n-1)
    return num * factorial(num - 1)
end

---[[
How to use:
1. Assign a positive integer to the variable 'number'.
2. Call the factorial function with this variable as the argument.
3. The result will be stored in the variable 'result'.
4. Print the value of result to see the factorial of the given number.
5. Note: If the argument is not a positive integer, the result will be nil.
]]
number = 5
result = factorial(number)
print(result) --> Output: 120

number = 7
result = factorial(number)
print(result) --> Output: 5040

number = 3.5
result = factorial(number)
print(result) --> Output: nil