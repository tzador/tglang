-- A function to perform quicksort on an array
---@param arr table The array to be sorted
---@param low number The starting index of the array
---@param high number The ending index of the array
local function quicksort(arr, low, high)
    if low < high then
        -- Select pivot element
        local pivot = arr[high]
        -- Initialize temporary arrays
        local left = {}
        local right = {}
        local equal = {}
        -- Partition array into left, right, and equal arrays
        for i = low, high do
            if arr[i] < pivot then
                table.insert(left, arr[i])
            elseif arr[i] > pivot then
                table.insert(right, arr[i])
            else
                table.insert(equal, arr[i])
            end
        end
        -- Recursive call for subarrays
        quicksort(left, 1, #left)
        quicksort(right, 1, #right)
        -- Merge sorted arrays
        local index = 1
        for i = 1, #left do
            arr[index] = left[i]
            index = index + 1
        end
        for i = 1, #equal do
            arr[index] = equal[i]
            index = index + 1
        end
        for i = 1, #right do
            arr[index] = right[i]
            index = index + 1
        end
    end
end

-- Example array to sort
local arr = {4, 2, 6, 1, 3, 5}

-- Call quicksort function
quicksort(arr, 1, #arr)

-- Print sorted array
print("Sorted array: " .. table.concat(arr, ", "))