---[[
Algorithm to generate a random maze
1. Create a function `generateMaze()` that takes in `height` and `width` as parameters
2. Create a 2D array `maze` with dimensions (height * 2 + 1) by (width * 2 + 1)
3. Initialize all elements of `maze` to 1, representing unvisited cells
4. Create a function `drawPath()` that takes in `x` and `y` as parameters
5. Set `maze[y][x]` to 0, representing a visited cell
6. Create a function `isOutOfBounds()` that takes in `x` and `y` as parameters
7. Check if `x` and `y` are within the bounds of `maze`
8. Create a function `getRandomDir()` that does not allow the maze to double back on itself
9. Choose a random direction (`north`, `east`, `south`, `west`) and check if the cell in that direction is unvisited
10. If the cell is unvisited, go to step 11. Otherwise, repeat step 9 until an unvisited cell is found or all directions have been checked
11. Set `maze[y + direction.y][x + direction.x]` to 0, representing a visited cell
12. Call `drawPath()` with the new coordinates
13. Call `getRandomDir()` to get a new direction
14. If all directions have been checked, go back to the previous cell and repeat steps 9-13 until all cells have been visited
15. Call `generateMaze()` with the desired height and width to start generating the maze
16. Print `maze` to see the final generated maze
]]

-- Initialize height and width
local height = 10
local width = 10

-- Generate a random maze
function generateMaze(height, width)
  local maze = {}

  -- Create a 2D array with dimensions (height * 2 + 1) by (width * 2 + 1)
  for i = 1, height * 2 + 1 do
    maze[i] = {}
    for j = 1, width * 2 + 1 do
      maze[i][j] = 1
    end
  end

  -- Call drawPath() with the starting coordinates
  drawPath(1, 1)
end

-- Function to draw a path in the maze
function drawPath(x, y)
  -- Set the current cell to 0, representing a visited cell
  maze[y][x] = 0

  -- Get a random direction to move in
  local direction = getRandomDir()

  -- Check if the cell in that direction is within the bounds of the maze and is unvisited
  if not isOutOfBounds(x + direction.x, y + direction.y) and maze[y + direction.y][x + direction.x] == 1 then
    -- Set the new cell to 0, representing a visited cell
    maze[y + direction.y][x + direction.x] = 0

    -- Call drawPath() with the new coordinates
    drawPath(x + direction.x, y + direction.y)
  else
    -- If all directions have been checked, go back to the previous cell and repeat the process
    drawPath(x, y)
  end
end

-- Function to check if given coordinates are within the bounds of the maze
function isOutOfBounds(x, y)
  -- Check if x and y are within the bounds of the maze
  if x < 1 or x > width * 2 + 1 or y < 1 or y > height * 2 + 1 then
    return true
  else
    return false
  end
end

-- Function to get a random direction
function getRandomDir()
  -- Create an array with all possible directions
  local directions = {
    {x = 0, y = -1}, -- North
    {x = 1, y = 0}, -- East
    {x = 0, y = 1}, -- South
    {x = -1, y = 0} -- West
  }

  local rand = math.random(1, 4) -- Get a random number between 1 and 4
  return directions[rand] -- Return the direction at the random index
end

-- Call generateMaze() to start generating the maze
generateMaze(height, width)

-- Print the maze to see the final generated output
print(maze)