--[[
This is a code snippet in LUA that generates a Fibonacci sequence up to the specified number.
It uses a for loop and a table to store the sequence values.
Input: The desired number of Fibonacci numbers to generate.
Output: A table containing the Fibonacci sequence up to the given input number.
--]]

-- Function to generate Fibonacci sequence
local function generateFibNumbers(n)
    -- Create a table to store the sequence values
    local fibTable = {}

    -- Use a for loop to generate the sequence
    for i = 1, n do
        -- Check if it is the first or second number in the sequence
        if i == 1 or i == 2 then
            -- Set the value in the table to 1
            fibTable[i] = 1
        else
            -- Generate the next number in the sequence by adding the previous two numbers
            fibTable[i] = fibTable[i-1] + fibTable[i-2]
        end
    end

    -- Return the table containing the sequence
    return fibTable
end

-- Get user input for the number of Fibonacci numbers to generate
print("Enter the number of Fibonacci numbers to generate: ")
local input = io.read()

-- Convert input to a number
input = tonumber(input)

-- Call the function to generate the Fibonacci sequence
fibSequence = generateFibNumbers(input)

-- Print the table containing the sequence
print("Fibonacci Sequence:")
-- Loop through the table and print each value
for i = 1, #fibSequence do
    print(fibSequence[i])
end

-- Output:
--