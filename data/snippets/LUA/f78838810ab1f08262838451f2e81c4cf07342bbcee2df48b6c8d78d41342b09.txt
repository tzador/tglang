---[[
    This is a complex code snippet in LUA that demonstrates a custom function that takes in multiple arguments and returns a sorted list.
    It also makes use of conditional statements and looping structures.

    Parameters:
    array       - The unsorted list of numbers
    reverse     - Boolean value indicating whether to sort in descending order (Optional)
    even_only   - Boolean value indicating whether to only include even numbers in the sorted list (Optional)

    Returns:
    sorted_array    - A new list of numbers that is sorted based on the parameters passed in
]]
---local function sortList(array, reverse, even_only)

    local newArray = {} -- Initialize a new empty array to store sorted values

    -- Loop through the given array and add only even numbers (if even_only is true) to the new array
    for i,v in ipairs(array) do
        if even_only and v % 2 == 0 then
            table.insert(newArray, v)
        elseif not even_only then
            table.insert(newArray, v)
        end
    end

    -- Sort the new array in ascending order if reverse is not specified or set to false
    if not reverse then
        table.sort(newArray)
    else
        -- Sort the new array in descending order if reverse is set to true
        table.sort(newArray, function(a,b) return a > b end)
    end

    -- Return the sorted array
    return newArray
end

-- Example usage of the sortList function
local unsorted_array = {1, 8, 3, 6, 9, 4, 2, 7} -- Initialize an unsorted list of numbers
print("Unsorted array: ", unpack(unsorted_array)) -- Print the unsorted array using the unpack function

-- Call the sortList function with the unsorted array and store the sorted array in a new variable
local sorted_array = sortList(unsorted_array, true, true) -- Sort the array in descending order and only include even numbers
print("Sorted array: ", unpack(sorted_array)) -- Print the sorted array using the unpack function

-- Expected Output:
-- Unsorted array: 1, 8, 3, 6, 9, 4, 2, 7
-- Sorted array: 8, 6, 4, 2