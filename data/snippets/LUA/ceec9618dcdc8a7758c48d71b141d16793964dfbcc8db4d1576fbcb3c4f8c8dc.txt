--[[
This code snippet is a simple implementation of a sorting algorithm called 'bubble sort' in LUA programming language.

Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. 
The pass through the list is repeated until the list is sorted.

--]]

-- Function to perform bubble sort on a given list
--@param list: The list to be sorted
--@return list: The sorted list
local function bubbleSort(list)

    -- Initialize variables
    local length = #list -- Length of the list
    local swapped = false -- A boolean flag to check if elements have been swapped
    
    -- Loop through the list 
    for i = length, 2, -1 do -- Loop starting from last element and decrementing by 1
        swapped = false -- Reset the flag to false at the beginning of each iteration
        for j = 1, i - 1 do -- Loop through the unsorted list up to the current position
            -- Compare adjacent elements
            if list[j] > list[j + 1] then
                -- Swap elements if they are in the wrong order
                list[j], list[j + 1] = list[j + 1], list[j]
                swapped = true -- Set the flag to true to indicate that elements have been swapped
            end
        end
        -- If no elements have been swapped, the list is sorted
        if not swapped then
            break -- Break out of the loop
        end
    end

    -- Return the sorted list
    return list 
end

-- Example list to be sorted
local exampleList = {4, 2, 5, 1, 3}

-- Print the unsorted list
print("Unsorted List: ")
for _, value in ipairs(exampleList) do
    print(value)
end

-- Call the bubbleSort function with the example list
local sortedList = bubbleSort(exampleList)

-- Print the sorted list
print("Sorted List: ")
for _, value in ipairs(sortedList) do
    print(value)
end

-- Output:
-- Unsorted List:
-- 4
-- 2
-- 5
-- 1
-- 3
-- Sorted List:
-- 1
-- 2
-- 3
-- 4
-- 5