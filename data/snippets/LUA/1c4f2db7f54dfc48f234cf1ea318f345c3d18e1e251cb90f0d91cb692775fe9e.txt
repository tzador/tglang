---[[
This is a long and complex code snippet in LUA.
It creates a function that takes in a table of numbers and performs various mathematical operations on them.
The code uses a for loop to iterate through the table and perform the operations on each number.
The output is a new table with the updated values.
]]

-- Define a function that takes in a table of numbers and returns the updated table
function mathOperations(numberTable)
    local newTable = {} -- Create a new table to store the updated values
    for i, number in ipairs(numberTable) do -- Loop through the table using ipairs
        -- Perform mathematical operations on the number
        local squared = number * number 
        local cubed = number * number * number
        local squaredRoot = math.sqrt(number)
        local factorial = 1
        for j=1,number do
            factorial = factorial * j
        end

        -- Add the updated values to the new table
        newTable[i] = {
            original = number, -- Store the original value
            squared = squared,
            cubed = cubed,
            squaredRoot = squaredRoot,
            factorial = factorial
        }
    end

    return newTable -- Return the updated table
end

-- Call the function and pass in a table of numbers
local numbers = {2, 4, 6, 8, 10}
local updatedTable = mathOperations(numbers)

-- Print the updated table
print("Original Table:")
for i, number in ipairs(numbers) do
    print(number)
end

print("Updated Table:")
for i, values in ipairs(updatedTable) do
    -- Print out the original number and all the updated values for each number
    print(values.original, values.squared, values.cubed, values.squaredRoot, values.factorial)
end