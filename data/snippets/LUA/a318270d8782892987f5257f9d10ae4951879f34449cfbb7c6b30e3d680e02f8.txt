--[[
This is a comment for multi-line comments in LUA.
It starts with two hyphens and two square brackets,
and ends with two square brackets.
This allows for easier commenting in longer code.
--]]

-- Defining a function in LUA that takes in two parameters
-- and returns the sum of the two numbers
function sum(a, b)
    return a + b
end

-- Declaring a string variable
local greeting = "Hello"

-- Initializing a table with key-value pairs
local fruits = {
    apple = "red",
    banana = "yellow",
    orange = "orange"
}

-- Looping through the table and printing each key and value
for fruit, color in pairs(fruits) do
    print("The", fruit, "is", color)
end

-- Creating a while loop that runs until the condition is met
local count = 1
while count <= 5 do
    print(count)
    count = count + 1
end

-- Creating a conditional statement
if count > 5 then
    print("Count is greater than 5")
else
    print("Count is less than or equal to 5")
end

-- Using logical operators to combine conditions
if count > 0 and count < 10 then
    print("Count is between 0 and 10")
elseif count == 0 or count == 10 then
    print("Count is equal to either 0 or 10")
else
    print("Count is not between 0 and 10")
end

-- Declaring a function that takes in a table as a parameter
-- and prints out each element in the table
function printTable(table)
    for index, value in ipairs(table) do
        print(index, value)
    end
end

-- Calling the function with a table as an argument
printTable({10, 20, 30})

-- Creating a local variable and setting it to a function
local function sayHello(name)
    print("Hello,", name)
end

-- Calling the function with a string as an argument
sayHello("John")

-- Using the ternary operator to assign a value based on a condition
local isRaining = true
local weather = isRaining and "It's raining!" or "It's not raining!"
print(weather)

-- Using the 'not' operator to check for false values
if not nil then
    print("nil is false")
end

-- Declaring a class with properties and methods
local Person = {
    name = "John",
    age = 25,
    -- Defining a method that prints out the person's name and age
    introduce = function(self)
        print("My name is", self.name, "and I am", self.age, "years old.")
    end
}

-- Creating an instance of the Person class and calling its method
local john = Person
john:introduce()

--[[ Output:
The apple is red
The banana is yellow
The orange is orange
1
2
3
4
5
Count is less than or equal to 5
Count is between 0 and 10
1       10
2       20
3       30
Hello, John
It's raining!
nil is false
My name is John and I am 25 years old.
]]