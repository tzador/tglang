-- This is a comment in LUA

-- Create a variable named 'number' and initialize it with the value 5
local number = 5

-- Define a function named 'double' that takes in one parameter
-- and returns double the value of the parameter
function double(x)
    return x * 2
end

-- Print the result of calling the 'double' function on the 'number' variable
print(double(number))

-- Create a table named 'myTable' with two key-value pairs 
-- where the keys are strings and the values are numbers
local myTable = {
    ["apple"] = 10,
    ["orange"] = 5
}

-- Loop through the table and print out each key-value pair
for key, value in pairs(myTable) do
    print(key, value)
end

-- Create a new empty table named 'mergedTable'
local mergedTable = {}

-- Merge the 'number' variable and the 'myTable' table into the 'mergedTable' table
mergedTable["number"] = number
for key, value in pairs(myTable) do
    mergedTable[key] = value
end

-- Print out the contents of 'mergedTable'
print(mergedTable["number"], mergedTable["apple"], mergedTable["orange"])

-- Create a new empty function named 'callTwice'
local function callTwice()

    -- Within the function, define a local variable 'count' and initialize it with the value 0
    local count = 0

    -- Create a new anonymous function that increments the 'count' variable and prints it out
    local increment = function()
        count = count + 1
        print(count)
    end

    -- Call the anonymous function twice
    increment()
    increment()
end

-- Call the 'callTwice' function
callTwice()