--[[
This is a complex code snippet in LUA, showcasing some of the language's features
--]]

-- Define a function that takes in a string parameter
function stringLength(myString)
    -- Initialize a counter variable
    local counter = 0
    -- Loop through each character in the string
    for i = 1, #myString do
        -- If the character is not a space, increment the counter variable
        if myString:sub(i, i) ~= " " then
            counter = counter + 1
        end
        -- If the character is a space and the counter is greater than 0, break
        if myString:sub(i, i) == " " and counter > 0 then
            break
        end
    end
    -- Return the counter variable
    return counter
end

-- Call the function and store the result in a variable
local length = stringLength("This is a complex string")

-- Print the length of the string
print("The string length is: " .. length)

-- Define a table with key-value pairs
local person = {
    name = "John",
    age = 25,
    occupation = "Developer"
}

-- Loop through the table and print out the key-value pairs
for key, value in pairs(person) do
    print(key .. ": " .. value)
end

--[[
Output:
The string length is: 15
name: John
age: 25
occupation: Developer
--]]