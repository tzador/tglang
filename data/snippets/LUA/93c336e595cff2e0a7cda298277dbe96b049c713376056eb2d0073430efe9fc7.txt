--set variables
local num = 5 --integer variable
local str = "hello" --string variable
local bool = true --boolean variable

--print statement
print("The value of num is: " .. num) --concatenation to print a string and variable value

--if statement
if bool then
    print("The boolean value is true.")
else
    print("The boolean value is false.")
end

--function declaration
function add(x, y)
    return x + y --return statement
end

--call function and assign return value to a new variable
local sum = add(2, 3)

--for loop
for i = 1, 10 do
    if i % 2 == 0 then --modulus operator to check for even numbers
        print(i .. " is an even number.")
    else
        print(i .. " is an odd number.")
    end
end

--table declaration
local table = {
    1, --index 1
    2, --index 2
    3, --index 3
    ["four"] = 4, --string key-value pair
    ["five"] = 5, --string key-value pair
    six = 6 --key-value pair without quotes
}

--while loop
local i = 1
while i <= 5 do
    print("The value at index " .. i .. " is " .. table[i]) --concatenation to print index and value
    i = i + 1 --increment i
end

--repeat-until loop
local j = 1
repeat
    print("The value at index " .. j .. " is " .. table[j])
    j = j + 1
until(j == 4)

--multi-line string with escape characters
local multiline = "This is a \"multi-line\" string\nWith \ttab \nAnd \nnew line."
print(multiline)

--logical operators
if sum > 0 and table.four == 4 then
    print("The sum is positive and the value at index four is 4.")
elseif sum < 0 or table.five == 5 then
    print("The sum is negative or the value at index five is 5.")
else
    print("The sum is equal to 0.")
end

--nested table
local nestedTable = {
    one = 1,
    two = 2,
    nested = {
        three = 3,
        four = 4
    }
}

--access nested table value
print("The value of nested.three is " .. nestedTable.nested.three)

--length operator
print("The length of the string variable is " .. #str)

--dynamically adding new key-value pair to table
table["seven"] = 7

--generic for loop to iterate through table
for key, value in pairs(table) do
    print("The key is " .. key .. " and the value is " .. value)
end

--error handling with try-catch
local success, result = pcall(function()
    error("This will trigger an error.")
end)
if success then --if no error occurred
    print("No error occurred.")
else
    print("The error message is: " .. result)
end