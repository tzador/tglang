-- This is a function that implements a binary search algorithm
-- @param arr: the array to be searched in
-- @param low: the lower bound index for the search
-- @param high: the higher bound index for the search
-- @param target: the value being searched for

function binarySearch(arr, low, high, target)
    -- Check if the lower bound index is equal to or greater than the higher bound index
    if low > high then
        -- The target value was not found in the array, return -1
        return -1
    end

    -- Calculate the middle index of the array
    local mid = math.floor((high + low) / 2)

    -- Check if the middle element is equal to the target value
    if arr[mid] == target then
        -- Target value was found, return the index
        return mid
    elseif arr[mid] > target then
        -- Target value is smaller than the middle element, search in the left half of the array
        return binarySearch(arr, low, mid - 1, target)
    else
        -- Target value is larger than the middle element, search in the right half of the array
        return binarySearch(arr, mid + 1, high, target)
    end
end

-- Example array for testing the code
local arr = {1, 3, 5, 7, 9, 11}

-- Value to be searched for
local target = 7

-- Call the binary search function and store the result in a variable
local index = binarySearch(arr, 1, #arr, target)

-- Check if the index is equal to -1, meaning the target value was not found
if index == -1 then
    print("Target value could not be found in the array.")
else
    -- Target value was found, print the index
    print("Target value was found at index: " .. index)
end