-- This is a comment in LUA

-- Defining a function with parameters
local function addNums(num1, num2)
    -- Using conditional statements and arithmetic operations
    -- to calculate and return the sum of the two numbers
    if num1 and num2 and type(num1)=="number" and type(num2)=="number" then
        return num1 + num2
    else
        error("Incorrect input, both parameters must be numbers.")
    end
end

-- Calling the function and storing the returned value in a variable
local sum = addNums(5, 10)

-- Printing the result to the console
print("The sum of 5 and 10 is: " .. sum)

-- Defining a table with key-value pairs
local fruits = {
    apple = "red",
    banana = "yellow",
    orange = "orange",
    kiwi = "green"
}

-- Looping through the table and printing each key-value pair
for fruit, color in pairs(fruits) do
    print("A " .. fruit .. " is " .. color)
end

-- Creating a class
Animal = {
    -- Class constructor function
    new = function(self, name)
        -- Instance properties
        self.name = name
    end,

    -- Instance method
    makeNoise = function(self, noise)
        print(self.name .. " makes " .. noise)
    end
}

-- Inheritance by assigning the parent class as a metatable
Cat = setmetatable({
    -- Inheriting properties and methods from the Animal class
    __index = Animal
},{
    -- Overriding the inherited method
    __index = {
        -- Adding a new method specific to the Cat class
        purr = function(self)
            print(self.name .. " purrs")
        end
    }
})

-- Creating an instance of the Cat class
local myCat = Cat:new("Garfield")

-- Calling inherited method from Animal class
myCat:makeNoise("meow")

-- Calling overridden method from Cat class
myCat:purr()