-- This code snippet will generate a Fibonacci sequence up to a given number

-- Function to generate a Fibonacci sequence
function generateFibonacci(num)
    local sequence = {} -- Initialize an empty table to store the sequence
    local prev1 = 0 -- Initialize the first previous number in the sequence
    local prev2 = 1 -- Initialize the second previous number in the sequence

    -- Loop through numbers from 1 to the given number
    for i = 1, num do
        -- If the current number is 1, append 0 to the sequence
        if i == 1 then
            table.insert(sequence, 0)
        -- If the current number is 2, append 1 to the sequence
        elseif i == 2 then
            table.insert(sequence, 1)
        -- For subsequent numbers, the current number is the sum of the two previous numbers
        else
            local current = prev1 + prev2
            table.insert(sequence, current)
            -- Update the previous numbers for the next iteration
            prev1 = prev2
            prev2 = current
        end
    end

    -- Return the generated sequence
    return sequence
end

-- Call the function with a given number
local fibonacci = generateFibonacci(10)

-- Print the generated sequence in a formatted way
for i = 1, #fibonacci do
    io.write(fibonacci[i]) -- Print the number
    if i ~= #fibonacci then
        io.write(", ") -- Print a comma if it's not the last number
    end
end