--[[
This function checks if a given number is prime
@param num The number to be checked
@return boolean Flag indicating if the number is prime or not
--]]
local function checkPrime(num)
    local isPrime = true
    if num < 2 then isPrime = false end -- Numbers less than 2 are not prime
    for i = 2, math.sqrt(num) do -- Loop from 2 to square root of num
        if num % i == 0 then -- If num is divisible by current i
            isPrime = false -- Then num is not prime
            break -- Stop looping
        end
    end
    return isPrime -- Return boolean flag
end

--[[
This function generates n number of prime numbers
@param n Number of prime numbers to be generated
@return table A table containing n prime numbers
--]]
local function generatePrimes(n)
    local primes = {} -- Initialize table for primes
    local count = 0 -- Keep track of how many primes have been generated
    local current = 2 -- Start checking for primes from 2
    while count < n do -- Loop until n primes have been generated
        if checkPrime(current) then -- If current number is prime
            table.insert(primes, current) -- Add it to the primes table
            count = count + 1 -- Increase count
        end
        current = current + 1 -- Check next number
    end
    return primes -- Return table of prime numbers
end

print("Enter the number of primes to be generated:")
local n = io.read("*n") -- Read user input as number
local primeNumbers = generatePrimes(n) -- Call generatePrimes function
print("The first " .. n .. " prime numbers are:")
print(table.concat(primeNumbers, ", ")) -- Print out the generated prime numbers, separated by comma