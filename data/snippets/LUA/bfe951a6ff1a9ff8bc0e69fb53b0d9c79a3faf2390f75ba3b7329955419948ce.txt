-- This code snippet generates a random dungeon map using the Cellular Automata method

-- Define grid dimensions
x_size = 50
y_size = 50

-- Set initial grid
grid = {}

-- Fill grid with random values
for x = 1, x_size do
    grid[x] = {}
    for y = 1, y_size do
        grid[x][y] = math.random(0, 1)
    end
end

-- Set up rules for updating grid
function update_grid()
    updated_grid = {} -- create a new grid to hold updated values

    for x = 1, x_size do
        updated_grid[x] = {}
        for y = 1, y_size do
            -- Apply rule to update each cell based on its neighbors
            count = 0
            for i = x-1, x+1 do
                for j = y-1, y+1 do
                    -- Make sure to handle edge cases
                    if i < 1 or i > x_size or j < 1 or j > y_size then
                        neighbor = 0
                    else
                        neighbor = grid[i][j]
                    end

                    count = count + neighbor -- sum all neighboring cells
                end
            end

            -- Apply the rule: if a cell has 5 or more live neighbors, it becomes a live cell (represented by 1)
            if count >= 5 then
                updated_grid[x][y] = 1 
            else
                updated_grid[x][y] = 0
            end
        end
    end

    return updated_grid
end

-- Run iterations to update and refine the grid
iterations = 5
for i = 1, iterations do
    grid = update_grid()
end

-- Render final grid as map
for x = 1, x_size do
    for y = 1, y_size do
        if grid[x][y] == 1 then
            io.write("#") -- print a wall for live cells
        else
            io.write(" ") -- print an empty space for dead cells
        end
    end
    io.write("\n") -- print a new line at the end of each row
end

-- The output should be a randomized dungeon map created with the Cellular Automata method