---[[
	Function to sort a table in descending order using quicksort algorithm
	@param t - the table to be sorted
	@param lo - the lower index of the table
	@param hi - the upper index of the table
	@param c - a comparator function to determine the order of sorting
	@return - the sorted table
]]
local function quicksort(t, lo, hi, c)
	-- Default comparator function
	c = c or function(a, b)
		return a < b
	end
	-- Base case
	if lo >= hi then
		return t
	end
	-- Choosing pivot element
	local pivot = t[hi]
	-- Partitioning step
	local i = lo
	for j = lo, hi - 1 do
		if c(t[j], pivot) then
			t[i], t[j] = t[j], t[i]
			i = i + 1
		end
	end
	t[i], t[hi] = t[hi], t[i]
	-- Sorting recursively
	quicksort(t, lo, i - 1, c)
	quicksort(t, i + 1, hi, c)
	return t
end
-- Sample table to be sorted
local unsortedTable = {5, 2, 8, 1, 6}
-- Sorting the table in descending order using quicksort
local sortedTable = quicksort(unsortedTable, 1, #unsortedTable, function(a, b) return a > b end)
-- Printing the sorted table to console
for _, v in ipairs(sortedTable) do
	print(v)
end