-- This code snippet generates a random maze

-- Set up variables
local gridWidth = 10
local gridHeight = 10
local cells = {}
local visitedCells = {}
local currentCell = 1
local stack = {}

-- Create grid of cells
for row = 1, gridHeight do
    for col = 1, gridWidth do
        table.insert(cells, {north = true, east = true, south = true, west = true})
    end
end

-- Recursive function to visit unvisited cells
local function visit_cell(x, y)
    visitedCells[x][y] = true
    local possible_neighbours = {}
    local potential_neighbour

    -- Check North neighbour
    if x > 1 and not visitedCells[x-1][y] then
        table.insert(possible_neighbours, {x = x-1, y = y, direction = "north"})
    end

    -- Check East neighbour
    if y < gridWidth and not visitedCells[x][y+1] then
        table.insert(possible_neighbours, {x = x, y = y+1, direction = "east"})
    end

    -- Check South neighbour
    if x < gridHeight and not visitedCells[x+1][y] then
        table.insert(possible_neighbours, {x = x+1, y = y, direction = "south"})
    end

    -- Check West neighbour
    if y > 1 and not visitedCells[x][y-1] then
        table.insert(possible_neighbours, {x = x, y = y-1, direction = "west"})
    end

    -- Choose a random neighbour
    if #possible_neighbours > 0 then
        potential_neighbour = possible_neighbours[math.random(#possible_neighbours)]
        local neighbour_x = potential_neighbour.x
        local neighbour_y = potential_neighbour.y
        local neighbour_direction = potential_neighbour.direction

        -- Remove walls between current cell and chosen neighbour
        if neighbour_direction == "north" then
            cells[x][y].north = false
            cells[neighbour_x][neighbour_y].south = false
        elseif neighbour_direction == "east" then
            cells[x][y].east = false
            cells[neighbour_x][neighbour_y].west = false
        elseif neighbour_direction == "south" then
            cells[x][y].south = false
            cells[neighbour_x][neighbour_y].north = false
        elseif neighbour_direction == "west" then
            cells[x][y].west = false
            cells[neighbour_x][neighbour_y].east = false
        end

        -- Visit the next cell and add current cell to stack
        table.insert(stack, currentCell)
        currentCell = get_cell_index(x, y)
        visit_cell(neighbour_x, neighbour_y)
    else
        -- Backtrack to previous cell
        currentCell = table.remove(stack)
    end
end

-- Visit the first cell and generate maze
visit_cell(1, 1)

-- Print the maze
for row = 1, gridHeight do
    for col = 1, gridWidth do
        local cell = cells[row][col]
        local cell_text = ""

        if cell.north then
            cell_text = cell_text .. " _ "
        else
            cell_text = cell_text .. "   "
        end

        if cell.west then
            cell_text = cell_text .. "|"
        else
            cell_text = cell_text .. "_"
        end

        if cell.south then
            cell_text = cell_text .. "_"
        else
            cell_text = cell_text .. " "
        end

        if cell.east then
            cell_text = cell_text .. "|"
        else
            cell_text = cell_text .. "_"
        end

        io.write(cell_text)
    end
    io.write("\n")
end

-- Helper function to get cell index from coordinates
function get_cell_index(x, y)
    return (x-1)*gridHeight + y
end