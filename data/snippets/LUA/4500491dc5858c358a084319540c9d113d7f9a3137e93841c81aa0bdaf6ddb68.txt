---[[
    This is a multi-line comment in LUA.
    It can span multiple lines and is enclosed in a pair of double square brackets.
    This is useful for annotating and documenting code.
]]

-- Variables
local var1 = "hello"  -- variable of type string
local var2 = 123  -- variable of type number
local var3 = true  -- variable of type boolean

-- Functions
local function add(x, y)
    -- This function adds two numbers and returns the result
    return x + y
end

local function divide(x, y)
    -- This function divides x by y and returns the result
    if y == 0 then
        return nil -- If y is 0, will return nil to avoid division by 0 error
    end
    return x / y
end

-- Control Structures
if var2 > 100 then
    print("var2 is greater than 100")
elseif var2 == 100 then
    print("var2 is equal to 100")
else
    print("var2 is less than 100")
end

for i = 1, 10 do
    -- This loop will execute 10 times, incrementing i by 1 each time
    print("Loop iteration #" .. i)
end

-- Tables
local my_table = { -- Table with key-value pairs
    name = "John",
    age = 25,
    is_true = true
}

print(my_table.name) -- Output: John
my_table.height = 175 -- Add new key-value pair to table

-- Loops through the keys in the table
for key, value in pairs(my_table) do
    print("Key: " .. key .. ", Value: " .. tostring(value))
    -- Output: Key: name, Value: John
    -- Output: Key: age, Value: 25
    -- Output: Key: is_true, Value: true
    -- Output: Key: height, Value: 175
end

-- Classes and Objects
local class = {}  -- Class table

-- Constructor function
function class:new(name, age)
    -- Create new object and set initial values
    local obj = {
        name = name,
        age = age
    }
    setmetatable(obj, self) -- Set class as metatable for the new object
    self.__index = self -- Set self as index for the new object
    return obj -- Return the new object
end

-- Method 1 for the class
function class:print_name()
    print("Name: " .. self.name) -- Access the name of the object
end

-- Method 2 for the class
function class:print_age()
    print("Age: " .. self.age) -- Access the age of the object
end

-- Create new object from the class using the constructor function
local obj1 = class:new("Emily", 30)
obj1:print_name() -- Output: Name: Emily
obj1:print_age() -- Output: Age: 30

-- Inheritance
local childClass = class:new() -- Child class that inherits from the parent class

-- Override method from parent class in child class
function childClass:print_name()
    print("Child name: " .. self.name) -- Access the name of the child class
end

local obj2 = childClass:new("Alex", 35)
obj2:print_name() -- Output: Child name: Alex
obj2:print_age() -- Output: Age: 35 (inherited from parent class)