--This code snippet generates a maze using a randomized depth-first search algorithm

--function for generating maze using DFS
function generateMaze(height, width)
    --create empty maze grid
    local maze = {}
    for i=1, height do
        maze[i] = {}
        for j=1, width do
            maze[i][j] = 1  --representing walls
        end
    end
    --create a random starting location
    local currentX = math.random(1, height)
    local currentY = math.random(1, width)
    maze[currentX][currentY] = 0 --open the starting location
    local visited = {} --keep track of visited cells
    table.insert(visited, currentX)
    table.insert(visited, currentY)
    --start DFS algorithm
    while #visited > 0 do
        --choose a random direction to move
        local directions = {{0,1}, {0,-1}, {1,0}, {-1,0}}
        local randIndex = math.random(1, #directions)
        local direction = directions[randIndex]
        --calculate new location
        local newX = currentX + (direction[1] * 2)
        local newY = currentY + (direction[2] * 2)
        --check if new location is within bounds and not visited yet
        if newX > 0 and newX < height and newY > 0 and newY < width and maze[newX][newY] == 1 then
            --remove wall between current and new location
            maze[currentX + direction[1]][currentY + direction[2]] = 0
            --open new location
            maze[newX][newY] = 0
            --update current location
            currentX = newX
            currentY = newY
            --add new location to visited list
            table.insert(visited, currentX)
            table.insert(visited, currentY)
        else
            --remove current location from visited list
            table.remove(visited, #visited)
            table.remove(visited, #visited)
        end
    end
    return maze
end

--generate 15x15 maze and print it
local maze = generateMaze(15, 15)
for i=1, 15 do
    for j=1, 15 do
        io.write(maze[i][j])
    end
    io.write("\n")
end