--[[ This is a multi-line comment that explains the purpose of the following code snippet. ]]
local function mergeSort(arr, low, high)
    if low < high then
        local mid = math.floor((low + high) / 2) 
        mergeSort(arr, low, mid)
        mergeSort(arr, mid + 1, high)
        merge(arr, low, mid, high)
    end
end

local function merge(arr, low, mid, high)
    local temp = {} -- create a temporary array to store merged subarrays
    local i = low -- index for left subarray
    local j = mid + 1 -- index for right subarray
    local k = 1 -- index for temp array

    while i <= mid and j <= high do
      if arr[i] < arr[j] then
        temp[k] = arr[i]
        i = i + 1
      else
        temp[k] = arr[j]
        j = j + 1
      end
      k = k + 1
    end

    --[[ copy remaining elements of left subarray into temp ]]
    while i <= mid do
        temp[k] = arr[i]
        i = i + 1
        k = k + 1
    end

    --[[ copy remaining elements of right subarray into temp ]]
    while j <= high do
        temp[k] = arr[j]
        j = j + 1
        k = k + 1
    end

    --[[ copy temp array back into original array ]]
    for x = 1, #temp do
        arr[low + x - 1] = temp[x]
    end
end

--[[ Example of using the mergeSort function ]]
local arr = {8, 4, 1, 9, 3, 7, 2}
mergeSort(arr, 1, #arr)
print(table.concat(arr, ", "))
-- output: 1, 2, 3, 4, 7, 8, 9