--[[
  This is a long and complex code snippet in LUA,
  used to calculate the n-th Fibonacci number.
  It uses a recursive approach and memoization for faster performance.
  The input is taken from the user and the corresponding Fibonacci number is outputted.
]]
-- Define a global table to store the results for memoization
FIBONACCI = {}

-- Define a function to calculate the n-th Fibonacci number
function fibonacci(n)

  -- Check if the result for n has been pre-calculated and stored in the table
  if FIBONACCI[n] then

    -- Return the pre-calculated result
    return FIBONACCI[n]

  -- Check if n is 1 or 2, as they are base cases with known results of 1
  elseif n == 1 or n == 2 then

    -- Store the result in the table and return it
    FIBONACCI[n] = 1
    return FIBONACCI[n]

  else
    -- Calculate the result by recursively calling the function for (n-1) and (n-2)
    local result = fibonacci(n-1) + fibonacci(n-2)

    -- Store the result in the table for future use
    FIBONACCI[n] = result

    -- Return the result
    return FIBONACCI[n]
  end
end

-- Ask the user for the input
io.write("Enter the value of n for calculating the n-th Fibonacci number: ")

-- Read the input and convert it to a number
local n = tonumber(io.read())

-- Call the fibonacci function with the input n
local result = fibonacci(n)

-- Print the result
io.write(string.format("The %d-th Fibonacci number is: %d", n, result))