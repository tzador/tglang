--[[
This is a multi-line comment in LUA that explains what the following code will do.

It will create a function named "generate_list"
which takes in three arguments: "max", "step", and "callback".

The function will then generate and return a list of numbers
starting from 1 and going up to the "max" number,
increasing by the "step" amount with each iteration.

Each number in the list will go through the "callback" function,
which will update the number in the list based on the function's logic.
]]

-- Define the function "generate_list"
-- which takes in the arguments "max", "step", and "callback"
function generate_list(max, step, callback)
    -- Create an empty list to store the generated numbers
    local list = {}

    -- Use a for loop to iterate from 1 to "max"
    for i = 1, max do
        -- Calculate the current number by adding the "step" amount
        -- to the previous number in the list, or 1 for the first iteration
        local num = list[i-1] and (list[i-1] + step) or 1
        -- Pass the current number through the "callback" function
        -- and update it in the list based on the function's logic
        list[i] = callback(num)
    end

    -- Return the generated list
    return list
end