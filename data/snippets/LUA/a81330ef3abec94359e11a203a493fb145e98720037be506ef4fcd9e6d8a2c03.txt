--[[
This is a multi-line comment in LUA.
It is enclosed in double square brackets.

In this snippet, we will create and populate a table
with various data types and perform different operations with it.

Then, we will use a for loop to iterate through the table
and print out the results.

This snippet will showcase various features of the LUA programming language. 
]]

-- Variable declaration and initialization
local myTable = {"Hello", 12, true, "World", 22.5}

-- Adding new key-value pairs to the table
myTable["Name"] = "John"
myTable["Age"] = 25
myTable[7] = false

-- Accessing values from the table
print(myTable[1]) -- Output: Hello
print(myTable["Name"]) -- Output: John

-- Length of the table
print("Table length: " .. #myTable) -- Output: Table length: 7

-- Checking if a key exists in the table
if myTable["Age"] then
    print("Age key exists")
end

-- Removing a key-value pair from the table
myTable["Name"] = nil
print(myTable["Name"]) -- Output: nil

-- Looping through the table and performing operations
for key, value in pairs(myTable) do
    if type(value) == "string" then 
        print("Key: " .. key .. ", Value: " .. value)
    elseif type(value) == "number" then
        print("Key: " .. key .. ", Value squared: " .. value * value)
    elseif type(value) == "boolean" then
        print("Key: " .. key .. ", Value negated: " .. not value)
    end
end

--[[
Output:
Key: 1, Value: Hello
Key: 2, Value: 144
Key: 3, Value: true
Key: 4, Value: World
Key: 5, Value squared: 506.25
Key: 7, Value negated: true
Key: Age, Value negated: true
]]

--[[
This snippet demonstrates the flexibility and ease of use of tables in LUA.
They can be used for storing and manipulating data of various types,
and their key-value structure makes them versatile for different tasks. 
]]