-- Table to store prime numbers
local primes = {}

-- Function to check if a number is prime
function isPrime(num)
    -- If num has already been checked and stored, return the result
    if primes[num] ~= nil then
        return primes[num]
    end
    -- If the number is less than 2, it is not prime
    if num < 2 then
        primes[num] = false
        return false
    end
    -- Loop through all numbers from 2 to the square root of num
    for i = 2, math.sqrt(num) do
        -- If num is divisible by any number, it is not prime
        if num % i == 0 then
            primes[num] = false
            return false
        end
    end
    -- If the loop completes without finding a divisor, num is prime
    primes[num] = true
    return true
end

-- Function to generate a list of prime numbers with a specified length
function generatePrimes(length)
    -- List to store prime numbers
    local primeList = {}
    -- Starting number for generating primes
    local num = 2
    -- Loop until the list reaches the desired length
    while #primeList < length do
        -- If num is prime, add it to the list
        if isPrime(num) then
            table.insert(primeList, num)
        end
        -- Increment num
        num = num + 1
    end
    -- Return the list of primes
    return primeList
end

-- Print the first 10 prime numbers
local list = generatePrimes(10)
for i = 1, #list do
    print(list[i])
end