---[[--This is a multi-line comment using LUA's double square brackets
    This code snippet creates a class called "Shape" with attributes "width" and "height"
    and methods "area" and "perimeter".
    Class "Shape" is inherited by class "Rectangle".
--]]

Shape = {   -- defining class "Shape" with attributes
    width = 0,  -- default value for width
    height = 0  -- default value for height
}

--- Define a constructor for class Shape
function Shape:new (o, width, height)
    o = o or {} -- create table if not provided
    setmetatable(o, self)  -- make "self" the metatable of o
    self__index = self  -- __index refers to the class itself, here it is 'Shape'
    self.width = width or self.width  -- set values for width and height
    self.height = height or self.height
    return o  -- return the object
end

--- Define methods for class Shape
function Shape:area ()
    return self.width * self.height  -- calculate and return area
end

function Shape:perimeter ()
    return 2 * (self.width + self.height)  -- calculate and return perimeter
end

--- Inherit from class Shape to create class Rectangle
Rectangle = Shape:new()  -- Rectangle inherits attributes and methods from Shape

--- Override constructor for class Rectangle
function Rectangle:new (o, width, height)
    o = o or {}  -- create table if not provided
    setmetatable(o, self)  -- make "self" the metatable of o
    self__index = self  -- __index refers to the class itself, here it is 'Rectangle'
    self.width = width or self.width  -- set values for width and height
    self.height = height or self.height
    return o  -- return the object
end

--- Override methods for class Rectangle
function Rectangle:area ()
    return self.width * self.height  -- calculate and return area
end

function Rectangle:perimeter ()
    return 2 * (self.width + self.height)  -- calculate and return perimeter
end

--- Create an instance of class Rectangle with custom values for width and height
my_rectangle = Rectangle:new(nil, 5, 10)

--- Output the area and perimeter of the rectangle
print("Area of Rectangle: " .. my_rectangle:area())
print("Perimeter of Rectangle: " .. my_rectangle:perimeter())