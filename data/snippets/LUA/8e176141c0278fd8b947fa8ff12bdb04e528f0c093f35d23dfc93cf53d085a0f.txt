--[[ This is a multi-line comment in LUA --]]

-- Define a function that takes in two parameters
function multiplyNumbers(num1, num2)
    -- Check if either parameter is not a number
    if type(num1) ~= "number" or type(num2) ~= "number" then
        -- Print an error message and return nil
        print("Error: Parameters must be numbers")
        return nil
    end
    -- Multiply the two numbers and return the result
    return num1 * num2
end

-- Create a local variable with a value of 5
local x = 5

-- Define a table with key-value pairs
 local student = {
    name = "John",
    age = 18,
    major = "Computer Science"
}

-- Use a for loop to iterate through a table
-- and print out the key-value pairs
for key, value in pairs(student) do
    print(key .. ": " .. value)
end

-- Define a string variable
local message = "Hello World!"

-- Use string functions to manipulate the string
-- and print out the result
print(string.upper(message)) -- Output: HELLO WORLD!
print(string.gsub(message, "World", "LUA")) -- Output: Hello LUA!

-- Use logical operators to perform boolean expressions
if(x > 10 and x < 15) then
    print("x is between 10 and 15")
elseif(x < 5 or x == 8) then
    print("x is either less than 5 or equal to 8")
else
    print("x is not within the specified conditions")
end

-- Use a while loop to print numbers from 1 to 10
local i = 1
while(i <= 10) do
    print(i)
    i = i + 1
end

-- Use conditional expressions in a function
function checkAge(age)
    -- Use ternary operator to set a variable based on condition
    -- Equivalent to: local allowed = age >= 18 and true or false
    local allowed = (age >= 18) and true or false
    -- Output a different string depending on the value of the variable
    if(allowed) then
        print("You are allowed to enter the site")
    else
        print("You are not allowed to enter the site")
    end
end

-- Call the function and pass in an age value
checkAge(19) -- Output: You are allowed to enter the site

-- Use closures to create a function factory that
-- generates functions that multiply a given number
function multiplier(factor)
    -- Define a function within the closure
    -- that takes in a number and multiplies it by the factor
    return function(num)
        return factor * num
    end
end

-- Create a function that multiplies numbers by 10
local multiplyBy10 = multiplier(10)

-- Call the function with different numbers as the parameter
print(multiplyBy10(5)) -- Output: 50
print(multiplyBy10(2)) -- Output: 20