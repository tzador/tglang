-- This function takes in a string and returns the reversed string
function reverseString(str)
  local reversedStr = ""
  for i = #str, 1, -1 do -- Loop through the characters of the string in reverse order
    reversedStr = reversedStr .. string.sub(str, i, i) -- Append each character to the reversed string
  end
  return reversedStr -- Return the reversed string
end

-- This function checks if a given number is prime or not
function isPrime(num)
  if num <= 1 then -- 1 and any number less than 1 are not prime
    return false
  end
  for i = 2, math.sqrt(num) do -- Loop through numbers from 2 to the square root of the given number
    if num % i == 0 then -- If the given number is divisible by any number in the loop, it is not prime
      return false
    end
  end
  return true -- Otherwise, the given number is prime
end

-- This function does the Fibonacci sequence up to a given number and returns the numbers in a table
function fibonacci(num)
  local fibTable = {} -- Create an empty table to store the Fibonacci sequence
  local a, b = 0, 1 -- Set initial values for the sequence
  while b < num do -- Loop until the next number in the sequence is greater than the given number
    table.insert(fibTable, b) -- Add the current number to the table
    a, b = b, a + b -- Calculate the next number in the sequence
  end
  return fibTable -- Return the table of Fibonacci numbers
end

-- This function calculates the factorial of a given number using recursion
function factorial(num)
  if num == 0 then -- Factorial of 0 is 1
    return 1
  else
    return num * factorial(num - 1) -- Multiply the given number with the factorial of the number one less than it
  end
end

-- This function converts a binary number to decimal
function binaryToDecimal(binaryNum)
  local decimalNum = 0 -- Initialize the decimal number to 0
  local power = 0 -- Initialize the power for base 2 to 0
  while binaryNum > 0 do -- Loop through the binary number
    local digit = binaryNum % 10 -- Get the last digit of the number
    decimalNum = decimalNum + digit * 2^power -- Convert the digit to decimal and add it to the total
    binaryNum = math.floor(binaryNum / 10) -- Remove the last digit from the number
    power = power + 1 -- Increase the power for base 2
  end
  return decimalNum -- Return the decimal number
end

-- This function checks if a given string is a palindrome (same forward and backward)
function isPalindrome(str)
  local reversedStr = reverseString(str) -- Use the previous function to get the reverse of the given string
  if reversedStr == str then -- If the reversed string is the same as the original string, it is a palindrome
    return true
  else
    return false -- Otherwise, it is not a palindrome
  end
end

-- Sample usage of the functions

print(reverseString("hello")) -- Output: olleh
print(isPrime(7)) -- Output: true
print(fibonacci(13)) -- Output: {1, 1, 2, 3, 5, 8}
print(factorial(5)) -- Output: 120
print(binaryToDecimal(101)) -- Output: 5
print(isPalindrome("racecar")) -- Output: true