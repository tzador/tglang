---[[
    This is a code snippet in LUA that generates a sudoku puzzle board.
    It uses backtracking algorithm to ensure a unique solution.
    The output is a 2D array representing the sudoku board.
]]

--- Function to check if a given number is valid in a given position on the board
---@param board table - 2D array representing the sudoku board
---@param num number - number to be checked
---@param row number - row of the position
---@param col number - column of the position
---@return boolean - true if number is valid, false otherwise
local function isValid(board, num, row, col)
    -- Check for duplicate numbers in same row
    for i = 1, 9 do
        if board[row][i] == num and i ~= col then
            return false
        end
    end

    -- Check for duplicate numbers in same column
    for i = 1, 9 do
        if board[i][col] == num and i ~= row then
            return false
        end
    end

    -- Check for duplicate numbers in same 3x3 grid
    local boxStartRow = math.floor((row - 1) / 3) * 3 + 1
    local boxStartCol = math.floor((col - 1) / 3) * 3 + 1
    for i = boxStartRow, boxStartRow + 2 do
        for j = boxStartCol, boxStartCol + 2 do
            if board[i][j] == num and i ~= row and j ~= col then
                return false
            end
        end
    end

    return true
end

--- Function to generate a sudoku puzzle board using backtracking
---@param board table - 2D array representing the sudoku board
---@param row number - current row of the board
---@param col number - current column of the board
---@return boolean - true if board is valid, false otherwise
local function generateBoard(board, row, col)
    -- Base case: when all positions on the board have been filled
    if row > 9 then
        return true
    end

    local nextRow = row
    local nextCol = col + 1
    -- If end of current row reached, move to next row
    if nextCol > 9 then
        nextRow = nextRow + 1
        nextCol = 1
    end

    -- If current position is already occupied, skip to next position
    if board[row][col] ~= 0 then
        return generateBoard(board, nextRow, nextCol)
    end

    -- Loop through all possible values for current position
    for num = 1, 9 do
        -- Check if current value is valid in current position
        if isValid(board, num, row, col) then
            -- Place current value in current position
            board[row][col] = num
            -- Recursively fill next position
            if generateBoard(board, nextRow, nextCol) then
                return true
            end
            -- If unable to fill next position, backtrack and try a different value
            board[row][col] = 0
        end
    end

    return false
end

--- Call generateBoard function to generate a valid sudoku board
local board = {}
for i = 1, 9 do
    board[i] = {}
    for j = 1, 9 do
        board[i][j] = 0
    end
end
-- Start generation from top left corner of the board (row 1, column 1)
generateBoard(board, 1, 1)

-- Print the generated board
for i = 1, 9 do
    print(table.concat(board[i], ' '))
end