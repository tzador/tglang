---[[

This is a complex code snippet written in LUA, a popular programming language used for game development.

It uses the setmetatable() function to create objects and inheritance between them.

Let's create a parent class named "Shape", which has a "new" function that initializes its instance variables.
]]
Shape = {}

---[[

The "Shape" class has a "new" function that takes in two parameters, "self" and "x".
It initializes the instance variables "x" and "y" with the values passed in and returns them in a table.
]]
function Shape:new(x)
    local obj = {
        x = x,
        y = 0
    }
    setmetatable(obj, self)   --[[

Here, we are using the setmetatable() function to set the "Shape" class as the metatable for the "obj" table.
This allows us to use inheritance and access the methods of the "Shape" class from the "obj" table.
]]
    self.__index = self
    return obj
end

---[[

We can then define a child class of "Shape" named "Rectangle".
It has its own "new" function that takes in three parameters, "self", "x", and "y".
The "x" and "y" parameters are used to initialize the instance variables of the "Shape" class using the "super" keyword.
]]
Rectangle = Shape:new()

function Rectangle:new(x, y)
    local obj = Shape:new(x)   --[[

Here, we are using the "super" keyword to call the "new" function of the "Shape" class and pass in the "x" parameter.
This is a convenient way to inherit the "x" and "y" instance variables from the "Shape" class.
]]
    obj.y = y
    setmetatable(obj, self)
    self.__index = self
    return obj
end

---[[

Now, let's create an instance of the "Rectangle" class and print out its "x" and "y" values.
]]
-- Create an instance of Rectangle class
local rect = Rectangle:new(10, 20)

-- Print out x and y values
print(rect.x, rect.y)

---[[

Output:
10   20
]]