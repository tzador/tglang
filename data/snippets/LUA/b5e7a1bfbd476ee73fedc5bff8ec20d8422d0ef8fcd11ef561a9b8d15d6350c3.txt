-- This is a function that generates a list of random numbers
function generateRandomList(size, min, max)
    local list = {} -- initialize an empty table
    for i = 1, size do
        list[i] = math.random(min, max) -- add a random number to the list
    end
    return list -- return the list of random numbers
end

--[[
    This is a function that reverses a list in-place
    @param list: the list to be reversed
]]
function reverseList(list)
    local start = 1 -- pointer to the first element
    local stop = #list -- pointer to the last element
    while start < stop do -- loop until start reaches stop
        list[start], list[stop] = list[stop], list[start] -- swap the values at start and stop
        start = start + 1 -- increment the start pointer
        stop = stop - 1 -- decrement the stop pointer
    end
end


-- This is a function that sorts a list in ascending order
function sortList(list)
    local n = #list -- get the length of the list
    for i = 1, n do -- loop through the list
        local minIndex = i -- set the current index as the minimum
        for j = i + 1, n do -- loop through the remaining list
            if list[j] < list[minIndex] then -- if the value at j is smaller than the value at the minimum index
                minIndex = j -- update the minimum index
            end
        end
        -- swap the values at the current index and minimum index
        list[i], list[minIndex] = list[minIndex], list[i]
    end
end


-- This is a function that merges two sorted lists into one
function mergeLists(list1, list2)
    local result = {} -- initialize an empty table for the result
    local i, j = 1, 1 -- indices for list1 and list2 respectively
    while i <= #list1 and j <= #list2 do -- loop while both lists have elements
        if list1[i] < list2[j] then -- if the current element in list1 is smaller
            table.insert(result, list1[i]) -- add it to the result table
            i = i + 1 -- increment the index for list1
        else
            table.insert(result, list2[j]) -- add the current element from list2 to the result table
            j = j + 1 -- increment the index for list2
        end
    end
    -- add any remaining elements from list1 to the result
    for k = i, #list1 do
        table.insert(result, list1[k])
    end
    -- add any remaining elements from list2 to the result
    for k = j, #list2 do
        table.insert(result, list2[k])
    end
    return result -- return the sorted and merged list
end


-- This is a function that implements the quicksort algorithm
function quicksort(list, low, high)
    if low < high then -- check if the partition has at least two elements
        local pivot = list[high] -- choose the last element as the pivot
        local i = low - 1 -- set the index for the elements smaller than the pivot
        for j = low, high - 1 do -- loop through the elements
            if list[j] <= pivot then -- if the current element is smaller than or equal to the pivot
                i = i + 1 -- increment the index for the smaller elements
                list[i], list[j] = list[j], list[i] -- swap the values at i and j
            end
        end
        list[i + 1], list[high] = list[high], list[i + 1] -- swap the pivot with the next element
        local p = i + 1 -- get the index of the pivot
        quicksort(list, low, p - 1) -- recursively call quicksort on the elements smaller than the pivot
        quicksort(list, p + 1, high) -- recursively call quicksort on the elements larger than the pivot
    end
end


-- Example usage:
local list = generateRandomList(10, 1, 100) -- generate a list of 10 random numbers between 1 and 100
print("Original List: ", table.concat(list, ", ")) -- print the original list
reverseList(list) -- reverse the list in-place
print("Reversed List: ", table.concat(list, ", ")) -- print the reversed list
sortList(list) -- sort the list in ascending order
print("Sorted List: ", table.concat(list, ", ")) -- print the sorted list

-- Another example:
local list1 = generateRandomList(5, 1, 10) -- generate a list of 5 random numbers between 1 and 10
local list2 = generateRandomList(5, 1, 10) -- generate another list of 5 random numbers between 1 and 10
print("List 1: ", table.concat(list1, ", ")) -- print list1
print("List 2: ", table.concat(list2, ", ")) -- print list2
local mergedList = mergeLists(list1, list2) -- merge the two lists
print("Merged List: ", table.concat(mergedList, ", ")) -- print the merged list
quicksort(mergedList, 1, #mergedList) -- use quicksort to sort the merged list
print("Sorted and Merged List: ", table.concat(mergedList, ", ")) -- print the final sorted and merged list