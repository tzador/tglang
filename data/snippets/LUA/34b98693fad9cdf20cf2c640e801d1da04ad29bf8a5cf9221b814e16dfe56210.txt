-- This code snippet generates a list of prime numbers 
-- up to a given limit using the Sieve of Eratosthenes algorithm

-- Function to generate the list of prime numbers
-- Takes in a limit parameter
function generatePrimes(limit)
  -- Create an empty table to store the prime numbers
  local primes = {}
  -- Create a boolean array with all values set to true
  -- Assume all numbers are prime initially
  local isPrime = {}
  for i = 1, limit do
    isPrime[i] = true
  end

  -- Set the first two values as false as 0 and 1 are not prime numbers
  isPrime[0] = false
  isPrime[1] = false

  -- Use the Sieve of Eratosthenes algorithm to find prime numbers
  for i = 2, limit do
    -- If the boolean value at index i is true, then it is a prime number
    if isPrime[i] then
      -- Add i to the list of primes
      primes[#primes + 1] = i
      -- Mark all multiples of i as non-prime by setting their boolean value to false
      for j = i * 2, limit, i do
        isPrime[j] = false
      end
    end
  end

  -- Return the list of prime numbers
  return primes
end

-- Set the limit for generating prime numbers
local limit = 100

-- Call the function to generate the prime numbers up to the limit
local primeNumbers = generatePrimes(limit)

-- Print the list of prime numbers
print("Prime numbers up to limit " .. limit .. ":")
for i = 1, #primeNumbers do
  print(primeNumbers[i])
end