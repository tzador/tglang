--[[ 
This is a multi-line comment in LUA.
It is enclosed in two square brackets, followed by two sets of hyphens.
]]

-- This is a single line comment in LUA, which starts with two hyphens.

-- LUA supports multiple data types including strings, numbers, booleans, and functions.
-- Here, we will create a table with values of different data types.
myTable = { 
    ["string"] = "Hello World", -- table element 1
    ["number"] = 123, -- table element 2
    ["boolean"] = true, -- table element 3
    ["function"] = function(x, y) return x * y end -- table element 4, which is a function that multiplies two values
}

-- In LUA, functions can be assigned to variables.
myFunction = myTable["function"] -- assigning the function element of the table to a variable

-- We can also pass functions as arguments in LUA.
-- Here, we define a function that takes in two values and an operation function as arguments.
function calculate(x, y, operation)
    return operation(x, y)
end

-- Now, we can use our calculate function with different operations.
print(calculate(2, 3, myFunction)) -- should output 6, as it calls our function element from the table with x=2 and y=3 as arguments
print(calculate(4, 5, function(x, y) return x + y end)) -- should output 9, as it defines a new function inline and uses it in the calculate function

-- LUA also has built-in control structures like if-else, for loops, and while loops.
-- Here, we will use a for loop to iterate over a table and print out its elements.
for key, value in pairs(myTable) do -- pairs() function returns key-value pairs from a table
    print(key .. ": " .. tostring(value)) -- tostring() function converts the value to a string
end

--[[ 
Output:
string: Hello World
number: 123
boolean: true
function: function: 0x7fffcdb00540
]]