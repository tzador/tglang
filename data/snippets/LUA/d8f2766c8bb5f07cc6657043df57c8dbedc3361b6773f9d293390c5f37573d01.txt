-- Initialize a table with key-value pairs
local table = {
    name = "John",
    age = 25, 
    hobbies = {"reading", "writing", "coding"} 
}

-- Loop through the table and print key-value pairs
for key, value in pairs(table) do
    print(key, value)
end

-- Create a function that returns the sum of two numbers
function add(x, y)
    return x + y
end

-- Call the function and store the result in a variable
local result = add(5, 10)

-- Print the result
print("The sum of 5 and 10 is: ", result)

-- Create a nested table with key-value pairs
local nestedTable = {
    key1 = "value1",
    key2 = "value2",
    subTable = {
        key3 = "value3",
        key4 = "value4"
    }
}

-- Access the value of a nested table
print(nestedTable.subTable.key3)

-- Create a local variable with a custom metatable
local metatable = {
    __index = function(table, key) 
        return table[key] * 2 -- multiply any value by 2
    end
}

-- Assign the metatable to the previously created table
setmetatable(table, metatable)

-- Access a value from the table using its key
print(table.age) -- the value will be multiplied by 2 due to the metatable

-- Create a coroutine function that returns a random number after a certain amount of time
local function randomCoroutine()
    local timer = os.time() + 5 -- set a timer for 5 seconds
    while os.time() < timer do
        coroutine.yield() -- pause the function until timer is reached
    end
    math.randomseed(os.time()) -- set the random seed using current time
    return math.random(1, 10) -- return a random number between 1 and 10
end

-- Create a coroutine that will wait for the function to finish and then print the result
local co = coroutine.create(function()
    local result = coroutine.resume(randomCoroutine())
    print("The random number is: ", result)
end)

-- Start the coroutine
coroutine.resume(co)