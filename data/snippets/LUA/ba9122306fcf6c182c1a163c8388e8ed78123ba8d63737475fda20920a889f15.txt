--[[ This code snippet demonstrates a complex sorting algorithm in LUA
     It first creates an array and fills it with random numbers, then uses
     the quicksort algorithm to sort the array in ascending order --]]

-- function that implements the quicksort algorithm
function quicksort(array, left, right)
    local l = left   -- left pointer
    local r = right  -- right pointer
    local pivot = array[math.floor((left + right) / 2)] -- pivot element
    
    -- while loop that iterates until the left and right pointers meet
    while l <= r do
        
        -- loop that moves the left pointer until it finds a value greater than or equal to the pivot
        while array[l] < pivot do
            l = l + 1
        end

        -- loop that moves the right pointer until it finds a value less than or equal to the pivot
        while array[r] > pivot do
            r = r - 1
        end

        -- if left pointer is still smaller than or equal to the right pointer
        if l <= r then
            -- swap elements at left and right pointers
            local temp = array[l]
            array[l] = array[r]
            array[r] = temp

            -- move left and right pointers to the next element
            l = l + 1
            r = r - 1
        end
    end
    
    -- recursively call quicksort on the left and right partitions
    if left < r then
        quicksort(array, left, r)
    end
    if l < right then
        quicksort(array, l, right)
    end
end

-- create an array and fill it with 10 random numbers
local array = {}
for i=1, 10 do
    array[i] = math.random(1, 100)
end

-- print the unsorted array
print("Unsorted array: ")
for i=1, #array do
    print(array[i])
end

-- call quicksort function on the array
quicksort(array, 1, #array)

-- print the sorted array
print("Sorted array: ")
for i=1, #array do
    print(array[i])
end