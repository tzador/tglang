-- This is a comment
function mergeSort(arr) -- Function to perform merge sort on an array
    if #arr > 1 then -- Check if length of array is greater than 1
        local middle = math.floor(#arr / 2) -- Calculate middle index of array
        local leftArr = {} -- Initialize left array
        local rightArr = {} -- Initialize right array
        for i=1, middle do -- Loop through first half of array and add elements to left array
            table.insert(leftArr, arr[i])
        end
        for i= middle + 1, #arr do -- Loop through second half of array and add elements to right array
            table.insert(rightArr, arr[i])
        end
        mergeSort(leftArr) -- Recursive function call to sort left array
        mergeSort(rightArr) -- Recursive function call to sort right array
        local leftPointer = 1 -- Pointer for left array
        local rightPointer = 1 -- Pointer for right array
        for i=1, #arr do -- Merge sorted elements into original array
            if leftPointer > #leftArr then -- If all elements in left array have been merged
                arr[i] = rightArr[rightPointer]
                rightPointer = rightPointer + 1
            elseif rightPointer > #rightArr then -- If all elements in right array have been merged
                arr[i] = leftArr[leftPointer]
                leftPointer = leftPointer + 1
            elseif leftArr[leftPointer] < rightArr[rightPointer] then -- Compare elements from left and right arrays
                arr[i] = leftArr[leftPointer]
                leftPointer = leftPointer + 1
            else
                arr[i] = rightArr[rightPointer]
                rightPointer = rightPointer + 1
            end
        end
    end
end