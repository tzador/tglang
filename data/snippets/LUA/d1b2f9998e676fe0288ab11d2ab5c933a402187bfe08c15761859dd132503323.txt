---[[
This is a function that returns the value of x raised to the power of y.
@param x The base value.
@param y The exponent value.
@return The result of x to the power of y.
]]
function power(x, y)
    if y == 0 then
        return 1
    elseif y % 2 == 0 then
        return power(x, y/2)^2
    else
        return x * power(x, y-1)
    end
end

---[[
This is a function that calculates the factorial of a given number.
@param n The number to calculate the factorial of.
@return The factorial of n.
]]
function factorial(n)
    if n == 0 then
        return 1
    else
        return n * factorial(n-1)
    end
end

---[[
This is a function that calculates the nth Fibonacci number.
@param n The index of the Fibonacci number to return.
@return The nth Fibonacci number.
]]
function fibonacci(n)
    if n < 2 then
        return n
    else
        return fibonacci(n-1) + fibonacci(n-2)
    end
end

---[[ 
This is a recursive function that calculates the sum of all numbers in a given table.
@param t The table of numbers.
@return The sum of the numbers in t.
]]
function sum(t)
    if #t == 0 then
        return 0
    else
        return t[#t] + sum({table.unpack(t, 1, #t-1)})
    end
end

---[[
This is a recursive function that reverses a given string.
@param str The string to be reversed.
@return The reversed string.
]]
function reverseString(str)
    if string.len(str) <= 1 then
        return str
    else
        return reverseString(string.sub(str, 2)) .. string.sub(str, 1, 1)
    end
end

---[[
This is a recursive function that sorts a given table of numbers in ascending order using the quicksort algorithm.
@param t The table of numbers to be sorted.
@param low The starting index of the table.
@param high The ending index of the table.
@return The sorted table.
]]
function quicksort(t, low, high)
    if low >= high then
        return t
    end
    local pivot = t[high]
    local i = low - 1
    for j = low, high - 1 do
        if t[j] < pivot then
            i = i + 1
            t[i], t[j] = t[j], t[i]
        end
    end
    t[i + 1], t[high] = t[high], t[i + 1]
    quicksort(t, low, i)
    quicksort(t, i + 2, high)
    return t
end