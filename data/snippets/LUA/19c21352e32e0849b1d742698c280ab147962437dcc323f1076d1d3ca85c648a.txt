-- This code snippet is an example of a recursive function in LUA
-- The function takes in a table and multiplies each element by 2
-- and then returns the new table

-- Define the recursive function
local function multiply(table)
  -- Base case: if table is empty or only contains one element
  if #table < 2 then
    return table
  end

  -- Create new table to store multiplied elements
  local new_table = {}

  -- Multiply first element by 2 and add it to new table
  local first = table[1]
  new_table[1] = first * 2

  -- Recursive call: pass in the sliced table (without first element)
  -- and concatenate the result with the new table
  new_table = table.concat(new_table, multiply(table[slice(2, #table)]))

  -- Return the new table
  return new_table
end

-- Create a test table
local test_table = {1, 2, 3, 4, 5}

-- Call the recursive function and store the result in a new variable
local result = multiply(test_table)

-- Print the original and new table
print("Original table: ", table.concat(test_table, ", "))
print("Multiplied table: ", result)