--- This function takes in a string of words and returns a table
--- of the unique words and the number of occurrences for each word.
local function countWords(string)
  --- Create an empty table to store the unique words and their counts.
  local wordCount = {}

  --- Loop through each word in the string, separated by spaces.
  for word in string.gmatch(string, "%S+") do

    --- Check if the word already exists in the table.
    --- If it does, increment the count for that word.
    if wordCount[word] then
      wordCount[word] = wordCount[word] + 1
    else
      --- If the word does not exist, initialize its count to 1.
      wordCount[word] = 1
    end
  end

  --- Sort the table in descending order based on the word counts.
  --- The second argument of the sorting function ensures that words
  --- with the same count are sorted alphabetically.
  local sortedWordCount = {}
  for word, count in pairs(wordCount) do
    table.insert(sortedWordCount, {word = word, count = count})
  end
  table.sort(sortedWordCount, function(a, b)
    if a.count == b.count then
      return a.word < b.word
    else
      return a.count > b.count
    end
  end)

  --- Return the sorted table.
  --- Each entry in the table contains the word and its count.
  return sortedWordCount
end

--- Example input string.
local exampleString = "The quick brown fox jumps over the lazy dog"

--- Call the function to count the words and store the result in a variable.
local countedWords = countWords(exampleString)

--- Print the result.
print("Word count for '" .. exampleString .. "':")
for _, entry in ipairs(countedWords) do
  --- Use string formatting to add leading spaces for alignment.
  print(string.format("%2d %s", entry.count, entry.word))
end