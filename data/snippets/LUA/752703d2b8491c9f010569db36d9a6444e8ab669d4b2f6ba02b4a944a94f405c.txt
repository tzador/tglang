---[[
  The code below creates a custom user interface menu
  for a game. Inspired by the "gui.lua" library by Landon Manning,
  with additional features and customization options.
  Used for creating a fancier and more user-friendly menu for players.
  Author: John Doe
]]

-- Create a global table to store all menu elements
menu = {}

-- Create a function to add new elements to the menu
function menu:newElement(name, xPos, yPos, width, height, label, action)
  -- Create a new element table with default values
  local element = {}

  -- Set the element's properties based on the parameters passed in
  element.name = name
  element.x = xPos or 0
  element.y = yPos or 0
  element.width = width or 100
  element.height = height or 50
  element.label = label or ""
  element.action = action or function() end

  -- Add the new element to the menu table
  self[name] = element

  -- Return the new element
  return element
end

-- Function to draw all menu elements on the screen
function menu:draw()
  -- Loop through all elements in the menu table
  for name, element in pairs(self) do
    -- Draw a rectangle for the element
    love.graphics.rectangle("fill", element.x, element.y, element.width, element.height)

    -- Draw the element's label inside the rectangle
    love.graphics.print(element.label, element.x + (element.width / 2), element.y + (element.height / 2))

    -- Register an event listener for the element
    love.mousepressed = function(x, y, button)
      -- Check if the mouse click is within the element's boundaries
      if x >= element.x and x <= element.x + element.width and y >= element.y and y <= element.y + element.height then
        -- Call the element's action function
        element.action()
      end
    end
  end
end

-- Example of creating a new element named "startButton" and setting its properties
menu:newElement("startButton", 100, 100, 200, 100, "START", function() print("Game started!") end)

-- Call the draw function to draw all elements on the screen
menu:draw()

---[[ Output:

function menu:draw()
	for name, element in pairs(self) do
		love.graphics.rectangle("fill", element.x, element.y, element.width, element.height)
		love.graphics.print(element.label, element.x + (element.width / 2), element.y + (element.height / 2))
		love.mousepressed = function(x, y, button)
			if x >= element.x and x <= element.x + element.width and y >= element.y and y <= element.y + element.height then
				element.action()
			end
		end
	end
end

function menu:newElement(name, xPos, yPos, width, height, label, action)
	local element = {}
	element.name = name
	element.x = xPos or 0
	element.y = yPos or 0
	element.width = width or 100
	element.height = height or 50
	element.label = label or ""
	element.action = action or function() end
	self[name] = element
	return element
end

menu = {}

--- Output:

[[
- The `menu` global table is created to store all elements.
- A `newElement()` function is created to add new elements to the menu.
- The `draw()` function is used to draw all elements on the screen.
- An example element, `startButton`, is created and its properties are set.
- The `menu` table is looped through to draw all elements and add event listeners.
- The `love.graphics` library is used to draw the elements on the screen, and the `love.mousepressed` function is used to detect mouse clicks and call the element's action.
]]