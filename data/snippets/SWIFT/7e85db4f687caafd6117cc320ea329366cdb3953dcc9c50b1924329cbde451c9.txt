/// Protocol that defines a car object
protocol Car {
    var make: String { get }
    var model: String { get }
    var year: Int { get }
    var color: String? { get set }
    
    func start()
    func stop()
    mutating func changeColor(to color: String)
}

/// Struct representing a specific car model
struct Mustang: Car {
    let make: String
    let model: String
    let year: Int
    var color: String?
    
    init(make: String, model: String, year: Int, color: String?) {
        self.make = make
        self.model = model
        self.year = year
        self.color = color
    }
    
    func start() {
        print("Starting engine...")
    }
    
    func stop() {
        print("Stopping engine...")
    }
    
    mutating func changeColor(to color: String) {
        print("Changing color from \(self.color ?? "no color") to \(color)")
        self.color = color
    }
}

/// Creating instance of Mustang struct and calling functions
var myMustang = Mustang(make: "Ford", model: "Mustang GT", year: 2019, color: "red")

myMustang.start()
// Prints "Starting engine..."

myMustang.stop()
// Prints "Stopping engine..."

myMustang.changeColor(to: "blue")
// Prints "Changing color from red to blue"

print("My \(myMustang.make) \(myMustang.model) \(myMustang.year) is now \(myMustang.color ?? "no color").")
// Prints "My Ford Mustang GT 2019 is now blue."