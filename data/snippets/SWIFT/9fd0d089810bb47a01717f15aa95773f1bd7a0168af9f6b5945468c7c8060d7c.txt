/// Function to sort an array using quicksort algorithm
func quickSort<T: Comparable>(_ array: [T], low: Int, high: Int) -> [T] {
    
    // Base case, if low index is greater than high index, return empty array
    guard low < high else { return [] }
    
    // Set pivot as middle element of array
    let pivot = array[(low + high) / 2]
    
    // Declare variables for left and right indices
    var left = low
    var right = high
    
    // Loop until left index is greater than right index
    while left <= right {
        
        // Find element in left side that is greater than pivot
        while array[left] < pivot {
            left += 1
        }
        
        // Find element in right side that is less than pivot
        while array[right] > pivot {
            right -= 1
        }
        
        // Swap elements at left and right indices
        if left <= right {
            array.swapAt(left, right)
            left += 1
            right -= 1
        }
    }
    
    // Recursively call quickSort function on left and right subarrays
    let sortedLeft = quickSort(array, low: low, high: right)
    let sortedRight = quickSort(array, low: left, high: high)
    
    // Return concatenated array
    return sortedLeft + [pivot] + sortedRight
}

// Example usage
let unsortedArray = [5, 2, 8, 1, 6, 3, 9, 4, 7]
let sortedArray = quickSort(unsortedArray, low: 0, high: unsortedArray.count - 1)
print(sortedArray) // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]