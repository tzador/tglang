/*
 This code snippet is a Fibonacci sequence calculator,
 based on a recursive algorithm.
 It takes in an integer input for the desired sequence length,
 and returns an array containing the Fibonacci numbers.
 */

// Function to calculate Fibonacci numbers recursively
func generateFibonacci(sequenceLength: Int) -> [Int] {
    // Base case - Fibonacci numbers 0 and 1
    if sequenceLength == 1 {
        return [0]
    } else if sequenceLength == 2 {
        return [0, 1]
    } else {
        // Recursive call to generate the remaining Fibonacci numbers
        var sequence = generateFibonacci(sequenceLength: sequenceLength - 1)
        
        // Calculate next Fibonacci number and append it to the sequence
        let nextNumber = sequence[sequenceLength - 2] + sequence[sequenceLength - 3]
        sequence.append(nextNumber)
        return sequence
    }
}

// User input for desired sequence length
let length = 10

// Call function to generate Fibonacci sequence
let sequence = generateFibonacci(sequenceLength: length)

// Print results
print(sequence) // Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]