//Define a custom struct called "Person" that conforms to the Codable protocol


struct Person: Codable {
  
  //Create properties with custom coding keys
  var name: String
  var age: Int
  var address: String
  
  enum CodingKeys: String, CodingKey {
    case name = "person_name"
    case age = "person_age"
    case address = "person_address"
  }
  
  //Add an initializer that takes in the values for each property
  init(name: String, age: Int, address: String) {
    self.name = name
    self.age = age
    self.address = address
  }
  
  //Add the function to encode the data
  func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(name, forKey: .name)
    try container.encode(age, forKey: .age)
    try container.encode(address, forKey: .address)
  }
  
  //Add the function to decode the data
  init(from decoder: Decoder) throws {
    let values = try decoder.container(keyedBy: CodingKeys.self)
    name = try values.decode(String.self, forKey: .name)
    age = try values.decode(Int.self, forKey: .age)
    address = try values.decode(String.self, forKey: .address)
  }
}