import UIKit

// MARK: - Protocol
protocol Playable {
    func play()
    var isPlaying: Bool { get }
}

// MARK: - Class
class VideoPlayer: NSObject {
    // MARK: Properties
    private var videoUrl: URL
    private var videoPlayer: AVPlayer?
    var delegate: VideoPlayerDelegate?

    // MARK: Initializer
    init(videoUrl: URL) {
        self.videoUrl = videoUrl
        super.init()
        setupVideoPlayer()
    }

    // MARK: Methods
    private func setupVideoPlayer() {
        let videoAsset = AVAsset(url: self.videoUrl)
        let playerItem = AVPlayerItem(asset: videoAsset)
        self.videoPlayer = AVPlayer(playerItem: playerItem)
    }

    func play() {
        self.videoPlayer?.play()
        self.delegate?.didPlayVideo()
    }

    func pause() {
        self.videoPlayer?.pause()
        self.delegate?.didPauseVideo()
    }

    // MARK: - Notifications
    @objc private func playerDidFinishPlaying(note: NSNotification) {
        self.delegate?.didFinishPlayingVideo()
    }
}

// MARK: - Extension
extension VideoPlayer: Playable {
    var isPlaying: Bool {
        return self.videoPlayer?.rate != 0 && self.videoPlayer?.error == nil
    }
}

// MARK: - Protocol
protocol VideoPlayerDelegate {
    func didPlayVideo()
    func didPauseVideo()
    func didFinishPlayingVideo()
}