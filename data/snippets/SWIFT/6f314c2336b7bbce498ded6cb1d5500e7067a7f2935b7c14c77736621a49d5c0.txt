func binarySearch<T: Comparable>(_ array: [T], target: T) -> Int? {
    // set the lower and upper bounds of the array
    var lowerBound = 0
    var upperBound = array.count - 1
    
    // loop until lowerBound is equal to or greater than upperBound
    while lowerBound <= upperBound {
        
        // calculate the middle index of the array
        let middleIndex = (lowerBound + upperBound) / 2
        
        // check if the middle element is the target
        if array[middleIndex] == target {
            return middleIndex
        } else if array[middleIndex] < target {
            // if the middle element is smaller than the target, update lowerBound
            lowerBound = middleIndex + 1
        } else {
            // if the middle element is greater than the target, update upperBound
            upperBound = middleIndex - 1
        }
    }
    
    // return nil if target is not found in the array
    return nil
}

// example usage
let array = ["apple", "banana", "orange", "pineapple", "strawberry"]
let target = "orange"

if let index = binarySearch(array, target: target) {
    print("Found \(target) at index: \(index)") // output: Found orange at index: 2
} else {
    print("\(target) is not found in the array.") // output: orange is not found in the array.
}