//The following code snippet demonstrates the implementation of a linked list data structure in Swift.

class Node { //defining a class for individual nodes in the list
    var data: Int //data to be stored in the node
    var next: Node? //pointer to the next node in the list

    init(data: Int) {
        self.data = data 
        self.next = nil //initializing the next pointer as nil
    }
}

class LinkedList { //defining a class for the linked list
    var head: Node? //pointer to the head of the list
    var tail: Node? //pointer to the tail of the list

    init() {
        self.head = nil //initializing the head pointer as nil
        self.tail = nil //initializing the tail pointer as nil
    }

    func insert(data: Int) {

        let newNode = Node(data: data) //creating a new node with given data
        if self.head == nil { //if the list is empty
            self.head = newNode //set the new node as the head
            self.tail = newNode //set the new node as the tail
        } else { //if the list is not empty
            self.tail?.next = newNode //set the current tail's next pointer to the new node
            self.tail = newNode //set the new node as the tail
        }
    }

    func delete(data: Int) {

        guard var current = self.head, current.data != data else { //checking if list is empty or if the head contains the data to be deleted
            return
        }

        var previous: Node? = nil //variable for keeping track of the previous node
        while current.data != data { //looping until we find the node with the given data
            previous = current
            current = current.next!
        }

        previous?.next = current.next //setting the previous node's next pointer to the next node
    }

    func printList() {

        var current: Node? = self.head //assigning the head of the list to a temporary node
        while current != nil { //looping until the end of the list
            print(current!.data) //printing the data in the current node
            current = current!.next //moving to the next node
        }
    }
}

let linkedList = LinkedList() //creating an instance of the linked list

linkedList.insert(data: 5) //inserting data at the end of the list
linkedList.insert(data: 10)
linkedList.insert(data: 15)
linkedList.printList() //output: 5, 10, 15

linkedList.delete(data: 10) //deleting a node from the list
linkedList.printList() //output: 5, 15