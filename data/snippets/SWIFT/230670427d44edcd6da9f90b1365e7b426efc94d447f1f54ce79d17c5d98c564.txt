func mergeSort<T: Comparable>(array: [T]) -> [T] {
    guard array.count > 1 else {
        return array
    }
    
    let middleIndex = array.count / 2
    let leftArray = mergeSort(array: Array(array[..<middleIndex]))
    let rightArray = mergeSort(array: Array(array[middleIndex...]))
    
    return merge(leftArray: leftArray, rightArray: rightArray)
}

func merge<T: Comparable>(leftArray: [T], rightArray: [T]) -> [T] {
    var leftIndex = 0
    var rightIndex = 0
    var result = [T]()
    
    while leftIndex < leftArray.count && rightIndex < rightArray.count {
        if leftArray[leftIndex] < rightArray[rightIndex] {
            result.append(leftArray[leftIndex])
            leftIndex += 1
        } else if leftArray[leftIndex] > rightArray[rightIndex] {
            result.append(rightArray[rightIndex])
            rightIndex += 1
        } else {
            result.append(leftArray[leftIndex])
            leftIndex += 1
            result.append(rightArray[rightIndex])
            rightIndex += 1
        }
    }
    
    while leftIndex < leftArray.count {
        result.append(leftArray[leftIndex])
        leftIndex += 1
    }
    
    while rightIndex < rightArray.count {
        result.append(rightArray[rightIndex])
        rightIndex += 1
    }
    
    return result
}