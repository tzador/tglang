// This code snippet creates a function that checks whether a given number is prime or not

func isPrime(number: Int) -> Bool { // Declaring a function with a parameter of type integer and return type boolean
    if number <= 1 { // Checking if the number is less than or equal to 1, which is not considered a prime number according to definition
        return false // If condition is met, return false
    }
    if number == 2 { // Checking if the number is equal to 2, which is considered a prime number
        return true // If condition is met, return true
    }
    if number % 2 == 0 { // Checking if the number is divisible by 2, this means it is not a prime number as all prime numbers are odd except for 2
        return false // If condition is met, return false
    }
    var divisor = 3 // Declaring variable to use as a divisor, starting from 3 as we have already checked for 2
    while divisor <= Int(sqrt(Double(number))) { // Looping through all odd numbers up to the square root of the given number, as that is the maximum possible divisor
        if number % divisor == 0 { // Checking if the number is divisible by the current divisor
            return false // If condition is met, return false
        }
        divisor += 2 // Increasing the divisor by 2 to continue checking only odd numbers
    }
    return true // If all conditions are not met, return true as the number is a prime number
}