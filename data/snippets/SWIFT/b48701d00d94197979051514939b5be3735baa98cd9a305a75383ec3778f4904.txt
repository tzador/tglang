// This program uses Swift's Extended Generics
// to implement a binary search algorithm
// with a custom data type

// Declare a generic function to perform binary search on any type conforming to the Comparable protocol
func binarySearch<T: Comparable>(_ array: [T], for value: T) -> Int? {

    // Set starting and ending indices of the search range
    var start = 0
    var end = array.count - 1

    // Loop while start index is less than or equal to end index
    while start <= end {
        // Find the middle index
        let middle = (start + end) / 2

        // Check if value is equal to value at middle index
        if value == array[middle] {
            return middle // Return the index if found
        } else if value < array[middle] {
            // If value is less than value at middle index, set end index to middle - 1
            end = middle - 1
        } else {
            // If value is greater than value at middle index, set start index to middle + 1
            start = middle + 1
        }
    }

    return nil // Return nil if value is not found
}

// Define a custom data type using a Struct
// This data type represents a person with a name and age
struct Person: Comparable {
    var name: String
    var age: Int

    // Implement Comparable protocol by comparing persons' ages
    static func < (lhs: Person, rhs: Person) -> Bool {
        return lhs.age < rhs.age
    }

    static func == (lhs: Person, rhs: Person) -> Bool {
        return lhs.name == rhs.name && lhs.age == rhs.age
    }
}

// Create an array of Person objects
let people = [Person(name: "John", age: 25), Person(name: "Jane", age: 30), Person(name: "Alex", age: 20)]

// Use the binarySearch function to search for a person with name "John"
if let index = binarySearch(people, for: Person(name: "John", age: 0), by: {$0.age}) {
    // If found, print the person's name and age
    print("Found \(people[index].name) with age \(people[index].age)")
} else {
    // If not found, print an error message
    print("Person not found")
}