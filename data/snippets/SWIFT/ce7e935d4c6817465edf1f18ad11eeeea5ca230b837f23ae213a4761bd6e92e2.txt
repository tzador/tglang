//declaring a function
func mergeSort<T: Comparable>(_ array: [T]) -> [T] {
    //base case
    guard array.count > 1 else { return array }
    
    //setting the middle element as the pivot
    let middleIndex = array.count / 2
    let pivot = array[middleIndex]
    
    //rearranging elements into subarrays based on pivot
    let leftArray = mergeSort(Array(array[..<middleIndex]))
    let rightArray = mergeSort(Array(array[middleIndex...]))
    
    //combining subarrays into sorted array
    return merge(leftArray, rightArray)
}

//helper function to merge subarrays into sorted array
func merge<T: Comparable>(_ leftArray: [T], _ rightArray: [T]) -> [T] {
    //initializing variables
    var leftIndex = 0
    var rightIndex = 0
    var result: [T] = []
    
    //comparing elements in subarrays and appending to result
    while leftIndex < leftArray.count && rightIndex < rightArray.count {
        let leftElement = leftArray[leftIndex]
        let rightElement = rightArray[rightIndex]
        
        //comparing elements and adding to result
        if leftElement < rightElement {
            result.append(leftElement)
            leftIndex += 1
        } else if leftElement > rightElement {
            result.append(rightElement)
            rightIndex += 1
        } else {
            result.append(leftElement)
            leftIndex += 1
            result.append(rightElement)
            rightIndex += 1
        }
    }
    
    //adding remaining elements from subarrays
    while leftIndex < leftArray.count {
        result.append(leftArray[leftIndex])
        leftIndex += 1
    }
    
    while rightIndex < rightArray.count {
        result.append(rightArray[rightIndex])
        rightIndex += 1
    }
    
    return result
}

//creating an array to be sorted
var unsortedArray = [9, 2, 6, 4, 1, 8, 3, 5, 7]

//calling the mergeSort function and printing the sorted array
print(mergeSort(unsortedArray)) //output: [1, 2, 3, 4, 5, 6, 7, 8, 9]