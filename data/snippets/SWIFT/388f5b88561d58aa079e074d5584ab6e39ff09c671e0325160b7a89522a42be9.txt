/// Function to merge sort an array of integers
func mergeSort(_ arr: [Int]) -> [Int] {
    // Base case: If the array has only one element, return it
    guard arr.count > 1 else { return arr }

    // Find the middle index of the array
    let middleIndex = arr.count / 2

    // Divide the array into left and right subarrays
    let leftArray = mergeSort(Array(arr[..<middleIndex]))
    let rightArray = mergeSort(Array(arr[middleIndex...]))

    // Merge the left and right subarrays while sorting them
    return merge(leftArray, rightArray)
}

/// Helper function to merge two sorted arrays
func merge(_ left: [Int], _ right: [Int]) -> [Int] {
    // Initialize two pointers to keep track of the elements in the left and right arrays
    var leftPointer = 0
    var rightPointer = 0

    // Initialize an empty array to store the sorted elements
    var sortedArray = [Int]()

    // Loop through both arrays until one of them is exhausted
    while leftPointer < left.count && rightPointer < right.count {
        // Compare the elements at both pointers and append the smaller one to the sorted array
        if left[leftPointer] < right[rightPointer] {
            sortedArray.append(left[leftPointer])
            leftPointer += 1
        } else {
            sortedArray.append(right[rightPointer])
            rightPointer += 1
        }
    }

    // Check if there are any remaining elements in either array and append them to the sorted array
    if leftPointer < left.count {
        sortedArray.append(contentsOf: left[leftPointer...])
    }

    if rightPointer < right.count {
        sortedArray.append(contentsOf: right[rightPointer...])
    }

    // Return the sorted array
    return sortedArray
}

// Example usage
let unsortedArray = [5, 2, 8, 1, 4, 6, 3, 7]
let sortedArray = mergeSort(unsortedArray)
print(sortedArray) // output: [1, 2, 3, 4, 5, 6, 7, 8]