// This code snippet creates a recursive function in Swift to find the greatest common divisor of two numbers using the Euclidean algorithm
// The function takes in two parameters, 'a' and 'b', which represent the two numbers whose GCD needs to be found 
// Returns the GCD as an Int
func findGCD(a: Int, b: Int) -> Int {
  // Base case: if 'b' is equal to 0, return 'a' as the GCD
  if (b == 0) {
    return a
  }
  // Recursive case: call the function again, with 'b' as the new value of 'a' and 'a % b' as the new value of 'b'
  else {
    return findGCD(a: b, b: a % b)
  }
}
// Example usage: finding the GCD of 24 and 36
let result = findGCD(a: 24, b: 36)
print("The GCD is \(result)")
// Output: The GCD is 12