if let num = Optional(5.5) { //create an optional variable using a literal value
    print("Number is \(num)") //prints "Number is 5.5"
}
var dict = [String: Any]() //creates an empty dictionary with keys of type String and values of type Any
dict.updateValue("Hello", forKey: "greeting") //adds the string "Hello" with key "greeting" to the dictionary
dict.updateValue(7, forKey: "number") //adds the integer 7 with key "number" to the dictionary
for (key, value) in dict { //loops through the key-value pairs in the dictionary
    print("\(key): \(value)") //prints "greeting: Hello" and "number: 7"
}
let numArray = [1, 2, 3, 4, 5] //creates an array of integers
let filteredNums = numArray.filter { $0 % 2 == 0 } //filters the array to only contain even numbers
print(filteredNums) //prints "[2, 4]"
class Person { //creates a class named Person
    var name: String //creates a property called name of type String
    init(name: String) { //designated initializer for the Person class
        self.name = name //assigns the passed in name parameter to the name property
    }
    func introduce() { //creates a method called introduce
        print("Hi, my name is \(name).") //prints a statement using the name property
    }
}
let person = Person(name: "John") //creates an instance of the Person class with the name "John"
person.introduce() //prints "Hi, my name is John."
enum Direction { //creates an enumeration called Direction
    case north //enumeration case with no associated value
    case south //enumeration case with no associated value
    case east(speed: Int) //enumeration case with an associated value of type Int
    case west(speed: Int) //enumeration case with an associated value of type Int
    func printName() { //method within the enumeration
        switch self { //switch statement based on which case the enumeration is currently in
        case .north:
            print("N") //prints "N" for the north case
        case .south:
            print("S") //prints "S" for the south case
        case .east(let speed):
            print("E with speed \(speed)") //prints "E with speed <value of speed>" for the east case
        case .west(let speed):
            print("W with speed \(speed)") //prints "W with speed <value of speed>" for the west case
        }
    }
}
let direction = Direction.east(speed: 50) //creates an instance of the Direction enumeration with the east case and a speed of 50
direction.printName() //prints "E with speed 50"