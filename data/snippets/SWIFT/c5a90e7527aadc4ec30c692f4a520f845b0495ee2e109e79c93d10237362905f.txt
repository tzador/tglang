/*
This is a complex code snippet in SWIFT that performs a binary search algorithm on 
an array of numbers.

First, we define our binary search function which takes in an array of numbers 
and the target number we are searching for as parameters and returns 
the index of the target number if found, and -1 if not found.

Next, we declare our starting and ending index variables, as well as a loop 
condition variable that will be used in our while loop.

We then begin our while loop, which will continue running until the starting 
index is less than or equal to the ending index.

Inside the while loop, we first calculate the midpoint by adding the starting 
and ending index together and dividing by 2. Then, we check if the value at 
the midpoint index in the array is equal to our target number. If it is, 
we return the midpoint index.

If the target number is less than the value at the midpoint index, we update 
the ending index to be one less than the midpoint index, effectively reducing 
the search space for the next iteration.

If the target number is greater than the value at the midpoint index, we update 
the starting index to be one more than the midpoint index, continuing our search 
in the second half of the array.

If we reach the end of the while loop without finding the target number, we 
return -1 to indicate that it was not found in the array.

To use this function, we can pass in an array of numbers and the target number 
we are looking for. The function will return the index of the target number if 
found, otherwise it will return -1.

Example usage:

let numbers = [6, 12, 20, 34, 41, 55, 63]
let target = 41

let index = binarySearch(array: numbers, target: target)
// index = 4, since 41 is located at index 4 in the array
*/

func binarySearch(array: [Int], target: Int) -> Int {
    var startIndex = 0
    var endIndex = array.count - 1
    var found = false
    
    while startIndex <= endIndex {
        let midIndex = (startIndex + endIndex) / 2
        if array[midIndex] == target {
            found = true
            return midIndex
        } else if target < array[midIndex] {
            endIndex = midIndex - 1
        } else {
            startIndex = midIndex + 1
        }
    }
    
    if !found {
        return -1
    }
}

let numbers = [6, 12, 20, 34, 41, 55, 63]
let target = 41

let index = binarySearch(array: numbers, target: target)
// index = 4, since 41 is located at index 4 in the array