//Defining a generic struct called "Queue"
struct Queue<Element> {
    private var elements: [Element]
    //Creating a constructor for the "Queue" struct
    init(_ elements: [Element]) {
        self.elements = elements
    }
    //Method to add element to the end of the queue
    mutating func enqueue(_ element: Element) {
        elements.append(element)
    }
    //Method to remove first element from the queue
    mutating func dequeue() -> Element {
        return elements.removeFirst()
    }
    //Method to check if the queue is empty
    func isEmpty() -> Bool {
        return elements.isEmpty
    }
    //Method to get the size of the queue
    func size() -> Int {
        return elements.count
    }
    //Method to peek at the first element in the queue
    func peek() -> Element? {
        return elements.first
    }
    //Method to print out the contents of the queue
    func printContents() {
        for element in elements {
            print(element)
        }
    }
}

//Creating a queue of strings
var stringQueue = Queue(["Hello", "World"])
//Adding a new string to the queue
stringQueue.enqueue("Code")
//Removing the first element and assigning it to a variable
let firstElement = stringQueue.dequeue()
print(firstElement) //Output: Hello
//Checking if queue is empty
print(stringQueue.isEmpty()) //Output: False
//Getting the size of the queue
print(stringQueue.size()) //Output: 2
//Peeking at the first element
print(stringQueue.peek()!) //Output: World
//Printing out the contents of the queue
stringQueue.printContents() //Output: World, Code