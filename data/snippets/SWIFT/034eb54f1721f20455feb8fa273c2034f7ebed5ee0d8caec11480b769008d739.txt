// This function calculates the factorial of a given number n
func factorial(_ n: Int) -> Int {
    // Base case: if n is 0, return 1
    if n == 0 {
        return 1
    }
    // Recursive case: n multiplied by the factorial of n-1
    return n * factorial(n-1)
}

// This function prints the fibonacci sequence up to a given number n
func fibonacci(_ n: Int) -> [Int] {
    // Create an empty array to store the sequence
    var sequence: [Int] = []
    
    // Loop through each number from 0 up to n
    for i in 0...n {
        // Base cases: if i is 0 or 1, append i to the sequence
        if i == 0 || i == 1 {
            sequence.append(i)
        }
        // Recursive case: add the previous two numbers in the sequence to get the next number
        else {
            sequence.append(sequence[i-1] + sequence[i-2])
        }
    }
    // Return the fibonacci sequence up to n
    return sequence
}

// This function checks if a given number is prime
func isPrime(_ n: Int) -> Bool {
    // Base case: if n is less than or equal to 3, return true
    if n <= 3 {
        return true
    }
    
    // If n is divisible by 2 or 3, it is not prime
    if n % 2 == 0 || n % 3 == 0 {
        return false
    }
    // Use Fermat's little theorem to check if n is prime
    let a = Int.random(in: 2...n-2)
    if expMod(a: a, b: n-1, m: n) != 1 {
        return false
    }
    
    // If n passes all tests, it is prime
    return true
}

// This function calculates the modular exponentiation of a to the power of b mod m
func expMod(a: Int, b: Int, m: Int) -> Int {
    // Base case: if b is 0, return 1
    if b == 0 {
        return 1
    }
    // Recursive case: a multiplied by itself to the power of b-1 mod m
    return (a * expMod(a: a, b: b-1, m: m)) % m
}