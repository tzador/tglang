// This is a complex code snippet in Swift that creates a function to calculate the power of a number using a recursive approach

// Define the function with two parameters, the base and the exponent, both of type Double for more precision
func power(base: Double, exponent: Double) -> Double {
    // Check for edge cases first - if exponent is 0, return 1, and if exponent is 1, return the base
    if exponent == 0 {
        return 1
    } else if exponent == 1 {
        return base
    } else {
        // For all other cases, recursively call the function, passing in the base and the exponent minus 1
        // Then multiply the base with the result and return it
        return base * power(base: base, exponent: exponent - 1)
    }
}

// Test the function with different inputs
print(power(base: 2, exponent: 4)) // Output: 16
print(power(base: 5, exponent: 3)) // Output: 125
print(power(base: 7, exponent: 0)) // Output: 1

// This is a more complex example using nested functions to calculate the factorial of a number

// Define a factorial function that takes in a number of type Int as its parameter
func factorial(number: Int) -> Int {
    // Define a helper function that will be called recursively to calculate the factorial
    func innerFactorial(number: Int, accumulator: Int) -> Int {
        // Check for edge case - if number is 0, return the accumulator which will hold the factorial value
        if number == 0 {
            return accumulator
        } else {
            // For all other cases, recursively call the helper function, passing in number minus 1 and the accumulator multiplied by the current number
            // This will keep multiplying the accumulator by the current number until it reaches 1
            return innerFactorial(number: number - 1, accumulator: accumulator * number)
        }
    }
    
    // Call the helper function with the initial number and an accumulator of 1
    return innerFactorial(number: number, accumulator: 1)
}

// Test the function with different inputs
print(factorial(number: 5)) // Output: 120
print(factorial(number: 8)) // Output: 40320
print(factorial(number: 0)) // Output: 1