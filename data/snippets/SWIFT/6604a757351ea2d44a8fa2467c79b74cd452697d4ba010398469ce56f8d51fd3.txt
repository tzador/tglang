func mergeSort<T: Comparable>(array: [T]) -> [T] { // defines a function named 'mergeSort' with a generic type 'T' that conforms to 'Comparable' and takes in an array of type 'T' as parameter
    guard array.count > 1 else { // using 'guard' keyword to check if array contains more than one element, if not, return the array
        return array
    }

    let midIndex = array.count / 2 // creating a constant 'midIndex' which is half the length of the array
    let leftArray = mergeSort(array: Array(array[..<midIndex])) // creating a constant 'leftArray' by recursively calling 'mergeSort' function on the first half of the given array
    let rightArray = mergeSort(array: Array(array[midIndex...])) // creating a constant 'rightArray' by recursively calling 'mergeSort' function on the second half of the given array

    return merge(leftArray: leftArray, rightArray: rightArray) // returning the result of calling 'merge' function on the 'leftArray' and 'rightArray'
}

func merge<T: Comparable>(leftArray: [T], rightArray: [T]) -> [T] { // defines a function named 'merge' with a generic type 'T' that conforms to 'Comparable' and takes in two arrays of type 'T' as parameters
    var leftIndex = 0 // creating a variable 'leftIndex' and setting its initial value to 0 
    var rightIndex = 0 // creating a variable 'rightIndex' and setting its initial value to 0
    var result: [T] = [] // creating an empty array of type 'T' to store the merged result

    while leftIndex < leftArray.count && rightIndex < rightArray.count { // using 'while' loop to iterate through both arrays until either 'leftIndex' or 'rightIndex' reaches the end of their respective arrays
        if leftArray[leftIndex] < rightArray[rightIndex] { // checking if the element at 'leftIndex' in 'leftArray' is less than the element at 'rightIndex' in 'rightArray'
            result.append(leftArray[leftIndex]) // if so, append that element to the 'result' array
            leftIndex += 1 // increment 'leftIndex' by 1 to move to the next element in 'leftArray'
        } else {
            result.append(rightArray[rightIndex]) // if not, append the element at 'rightIndex' in 'rightArray' to the 'result' array
            rightIndex += 1 // increment 'rightIndex' by 1 to move to the next element in 'rightArray'
        }
    }

    // append any remaining elements to the 'result' array
    while leftIndex < leftArray.count {
        result.append(leftArray[leftIndex])
        leftIndex += 1
    }
    
    while rightIndex < rightArray.count {
        result.append(rightArray[rightIndex])
        rightIndex += 1
    }

    return result // return the merged and sorted 'result' array
}

// Example of how to use the 'mergeSort' function:
let unsortedArray = [5, 7, 2, 9, 1, 3, 8, 4, 6] // creating an unsorted array
let sortedArray = mergeSort(array: unsortedArray) // calling the 'mergeSort' function to sort the unsorted array
print(sortedArray) // output: [1, 2, 3, 4, 5, 6, 7, 8, 9]