// This code snippet uses Swift to create a linked list class with the ability to add, remove, and search for nodes.

// Define the Node class
class Node<T> {

    // Properties - data and a link to the next node
    var data: T
    var next: Node<T>?

    // Initializer
    init(data: T) {
        self.data = data
    }
}

// Define the LinkedList class
class LinkedList<T> {

    // Properties - reference to the head and tail nodes
    var head: Node<T>?
    var tail: Node<T>?

    // Function to add a node to the end of the list
    func append(data: T) {

        // Check if list is empty
        if head == nil {
            // Create new node and assign to head and tail
            head = Node<T>(data: data)
            tail = head
        } else {
            // Create new node and attach to tail
            let newNode = Node<T>(data: data)
            tail?.next = newNode
            tail = newNode
        }
    }

    // Function to remove a specific node from the list
    func remove(data: T) {

        // Check if list is empty
        if head == nil {
            return
        }

        // Start at the head
        var current = head
        var previous: Node<T>?

        // Traverse the list to find the node to remove
        while current != nil {
            if current?.data == data {
                // Check if node to remove is the head
                if current === head {
                    head = current?.next
                } else {
                    previous?.next = current?.next
                }
                // Check if node to remove is the tail
                if current === tail {
                    tail = previous
                }
                return
            }
            // Move to the next node
            previous = current
            current = current?.next
        }
    }

    // Function to search for a specific node in the list
    func search(data: T) -> Bool {

        // Check if list is empty
        if head == nil {
            return false
        }

        // Start at the head
        var current = head

        // Traverse the list to find the node
        while current != nil {
            if current?.data == data {
                // Node found
                return true
            }
            // Move to the next node
            current = current?.next
        }

        // Node not found
        return false
    }
}

// Example usage
let linkedList = LinkedList<Int>()
linkedList.append(data: 1)
linkedList.append(data: 2)
linkedList.append(data: 3)

print(linkedList.search(data: 2)) // Output: true

linkedList.remove(data: 2)

print(linkedList.search(data: 2)) // Output: false