//Demo of using closure
let numbers: [Int] = [5,10,15,20,25,30,35,40,45,50]
let result = numbers.map({ (number: Int) -> Int in
    let result = number * 2
    return result
})

print(result)

//Function that takes in a String and returns a String
func reverseString(str: String) -> String {
    var reversed = ""
    for char in str {
        reversed = "\(char)" + reversed
    }
    return reversed
}

let name = "Swift"
let reversedName = reverseString(str: name)

print(reversedName)

//Struct to represent a person
struct Person {
    var name: String
    var age: Int
    var occupation: String
    
    //Function to print a greeting
    func greet() {
        print("Hello! My name is \(name) and I am \(age) years old. I work as a \(occupation).")
    }
}

//Creating an instance of Person
let john = Person(name: "John", age: 28, occupation: "Software Engineer")
john.greet()

//Example of using a custom protocol
protocol Shape {
    var area: Double { get }
    var perimeter: Double { get }
}

//Struct representing a rectangle
struct Rectangle: Shape {
    var width: Double
    var height: Double
    
    //Implementing the properties from Shape protocol
    var area: Double {
        return width * height
    }
    
    var perimeter: Double {
        return 2 * (width + height)
    }
}

//Creating an instance of Rectangle
let rectangle = Rectangle(width: 5, height: 10)

//Printing the area and perimeter of the rectangle
print("The area of the rectangle is \(rectangle.area)")
print("The perimeter of the rectangle is \(rectangle.perimeter)")