/// A generic function that takes in an array of Optionals and returns a dictionary with the unwrapped values as keys and the original Optional values as values.
func unwrapDictionaryFromOptionals<T: Hashable, U>(optionalsArray: [T?]) -> [U: T?] {

    // Define an empty Dictionary that will hold the unwrapped values as keys and the original Optional values as values
    var unwrappedDictionary = [U: T?]()

    // Loop through the optionalsArray and check if the Optional value is not nil
    for optionalValue in optionalsArray {

        if let unwrappedValue = optionalValue {

            // If the Optional value is not nil, add it to the unwrappedDictionary using the "unwrappedValue" as the key and the "optionalValue" as the value
            unwrappedDictionary[unwrappedValue as! U] = optionalValue
        }
    }

    // Return the unwrappedDictionary
    return unwrappedDictionary
}

// Example usage of the unwrapDictionaryFromOptionals function
let optionals = [1, nil, 3, nil, nil, 6, 7] 
let unwrappedDictionary = unwrapDictionaryFromOptionals(optionalsArray: optionals) 
// Output: [1: 1, 3: 3, 6: 6, 7: 7]