func quicksort<T: Comparable>(array: [T]) -> [T] {
    
    // Base case: Checks if array is empty or has only one element
    guard array.count > 1 else { return array }
    
    // Selects pivot element
    let pivot = array[array.count / 2]
    
    // Creates three empty arrays to hold values less than, equal to, and greater than pivot
    var less = [T]()
    var equal = [T]()
    var greater = [T]()
    
    // Partitions elements into the three arrays based on their value compared to the pivot
    for element in array {
        if element < pivot {
            less.append(element)
        } else if element == pivot {
            equal.append(element)
        } else {
            greater.append(element)
        }
    }
    
    // Recursively calls function on less and greater arrays and combines with equal array
    return quicksort(array: less) + equal + quicksort(array: greater)
}

// Example usage
let unsortedArray = [9, 4, 7, 2, 5, 3, 1, 8, 6]
let sortedArray = quicksort(array: unsortedArray) // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]