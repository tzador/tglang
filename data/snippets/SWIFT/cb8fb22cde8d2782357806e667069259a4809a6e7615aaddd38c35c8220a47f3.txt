// This code snippet generates a random password with a length of 12 characters
// using uppercase and lowercase letters, numbers, and special characters.

import Foundation

// Function to generate a random character from a given character set
func randomCharacter(from characters: String) -> Character {
    let index = Int(arc4random_uniform(UInt32(characters.count)))
    let randomCharacter = characters[characters.index(characters.startIndex, offsetBy: index)]
    return randomCharacter
}

var password = ""

// Allowed character sets
let uppercaseLetters = "ABCDEFGHIJKLMNPQRSTUVWXYZ"
let lowercaseLetters = "abcdefghijklmnpqrstuvwxyz"
let numbers = "123456789"
let specialCharacters = "!@#$%^&*()_+-=\\|[]{};:'\"<>,.?/~"

// Add random uppercase letter to password
password.append(randomCharacter(from: uppercaseLetters))
// Add random lowercase letter to password
password.append(randomCharacter(from: lowercaseLetters))
// Add random number to password
password.append(randomCharacter(from: numbers))
// Add random special character to password
password.append(randomCharacter(from: specialCharacters))

// Generate remaining 8 characters for password
for _ in 0..<8 {
    // Get a random number to determine which character set to use
    let randomIndex = Int(arc4random_uniform(4))
    // Choose a random character set based on the random number
    var characters: String
    switch randomIndex {
    case 0: characters = uppercaseLetters
    case 1: characters = lowercaseLetters
    case 2: characters = numbers
    default: characters = specialCharacters
    }
    // Add a random character from the chosen character set to password
    password.append(randomCharacter(from: characters))
}

// Print generated password
print(password) // Example output: R7qy]A2}P~mS (password will be different each time the code runs)

// Note: This is a simplified example and not the most secure way to generate a password. It is always recommended to use a secure random number generator and a larger character set for password generation.