func quicksort<T: Comparable>(_ array: [T]) -> [T] {
    var less: [T] = []
    var equal: [T] = []
    var greater: [T] = []
    
    if array.count > 1 {
        let pivot = array[0]
        
        for element in array {
            if element < pivot {
                less.append(element)
            } else if element == pivot {
                equal.append(element)
            } else {
                greater.append(element)
            }
        }
        
        return quicksort(less) + equal + quicksort(greater)
    } else {
        return array
    }
}

let numbers = [20, 19, 7, 12, 4, 3, 9, 8]

let sortedNumbers = quicksort(numbers)

print(sortedNumbers)

// Output:
// [3, 4, 7, 8, 9, 12, 19, 20]

// This code snippet is a simple implementation of the quicksort algorithm in Swift. It takes in an array of any type that conforms to the Comparable protocol, and returns a sorted array using recursion.

// The main function is called quicksort() and it takes in a generic array parameter called `array`, which is specified as a type that conforms to the Comparable protocol by placing the constraint <T: Comparable> after the function name.

// Within the function, three empty arrays are declared: `less`, `equal`, and `greater`, which will be used to store values before, equal to, and after the pivot element, respectively.

// The first conditional statement checks if `array` has more than one element. If it does, the first element is taken as the pivot by declaring a new variable `pivot` and setting it to `array[0]`.

// The next section of code is a for-in loop that iterates through every element in `array`. Depending on the value of each element compared to the pivot, it will be added to the `less`, `equal`, or `greater` array accordingly.

// Finally, the function recursively calls itself on the `less` and `greater` arrays, and adds the `equal` array in between, resulting in the array being sorted. If `array` has only one element, it is returned as is.

// The code concludes with creating a sample array of numbers, sorting it using the quicksort function, and printing the result to the console. The output should be a sorted array of numbers from smallest to largest.