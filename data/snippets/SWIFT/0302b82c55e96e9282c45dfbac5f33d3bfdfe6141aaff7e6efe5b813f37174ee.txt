struct Point<T> { // Declare a Swift struct called Point
    var x: T // Declare a property of type T called x
    var y: T // Declare a property of type T called y
    init(x: T, y: T) { // Initialize the struct with two parameters of type T
        self.x = x // Assign the value of parameter x to the property x
        self.y = y // Assign the value of parameter y to the property y
    }
    
    mutating func translate(by vector: Point<T>) { // Declare a mutating method to translate the point
        self.x += vector.x // Add the x value of the vector to the x value of the point
        self.y += vector.y // Add the y value of the vector to the y value of the point
    }
    
    static func distance(from point1: Point<T>, to point2: Point<T>) -> Double { // Declare a static method to calculate the distance between two points
        let xDist = Double(point2.x - point1.x) // Calculate the difference between the x values of the two points and convert it to a Double
        let yDist = Double(point2.y - point1.y) // Calculate the difference between the y values of the two points and convert it to a Double
        let distance = sqrt(pow(xDist, 2) + pow(yDist, 2)) // Use the Pythagorean theorem to calculate the distance using the squared differences
        return distance // Return the distance as a Double
    }
}