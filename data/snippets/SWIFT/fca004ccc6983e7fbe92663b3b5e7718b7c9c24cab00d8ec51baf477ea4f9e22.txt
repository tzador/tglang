/// A generic struct that takes in a type parameter
struct GenericStruct<T> {
    var value: T // variable of type parameter T

    /// An initializer that takes in a value of type T and sets the value variable to it
    init(value: T) {
        self.value = value
    }

    /// A function that takes in a closure as a parameter and calls it with the value variable as an argument.
    func performOperation(closure: (T) -> Void) {
        closure(self.value)
    }

    /// A mutating function that takes in a value of type T, sets the value variable to it and prints out the new value.
    mutating func updateValue(newValue: T) {
        self.value = newValue
        print("New value is \(self.value)")
    }
}

/// Declaring an instance of GenericStruct with an Int as type parameter
let integerStruct = GenericStruct<Int>(value: 5)

/// Calling performOperation function with a closure that multiplies the value variable by 2
integerStruct.performOperation { (value) in
    print(value * 2)
}

/// Calling updateValue function and passing in a new value of type Int
integerStruct.updateValue(newValue: 10)

/// Declaring an instance of GenericStruct with a String as type parameter
let stringStruct = GenericStruct<String>(value: "Hello World")

/// Calling performOperation function with a closure that adds an exclamation mark to the value variable
stringStruct.performOperation { (value) in
    print(value + "!")
}