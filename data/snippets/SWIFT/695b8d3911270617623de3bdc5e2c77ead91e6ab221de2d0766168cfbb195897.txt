/// This function takes in an array of integers, sorts them in ascending order using a recursive merge sort algorithm, and returns the sorted array.
func mergeSort(_ array: [Int]) -> [Int] {
    
    // Base case - if array only contains one element, return it
    guard array.count > 1 else {
        return array
    }
    
    // Find the middle index of the array
    let middleIndex = array.count / 2
    
    // Split the array into left and right sub-arrays
    let leftArray = mergeSort(Array(array[..<middleIndex]))
    let rightArray = mergeSort(Array(array[middleIndex...]))
    
    // Merge the two sub-arrays in sorted order
    return merge(leftArray, rightArray)
}

/// This helper function takes in two sorted arrays and combines them into one sorted array.
func merge(_ leftArray: [Int], _ rightArray: [Int]) -> [Int] {
    // Create a combined result array
    var resultArray = [Int]()
    
    // Create variables to track the index for each sub-array
    var leftIndex = 0
    var rightIndex = 0
    
    // Loop through each element in both sub-arrays and place the smaller one into the result array
    while leftIndex < leftArray.count && rightIndex < rightArray.count {
        // If left element is smaller, add it to the result array and increment left index
        if leftArray[leftIndex] < rightArray[rightIndex] {
            resultArray.append(leftArray[leftIndex])
            leftIndex += 1
        }
        // Otherwise, add right element to result array and increment right index
        else {
            resultArray.append(rightArray[rightIndex])
            rightIndex += 1
        }
    }
    
    // If there are any remaining elements in the left array, add them to the result array
    while leftIndex < leftArray.count {
        resultArray.append(leftArray[leftIndex])
        leftIndex += 1
    }
    
    // If there are any remaining elements in the right array, add them to the result array
    while rightIndex < rightArray.count {
        resultArray.append(rightArray[rightIndex])
        rightIndex += 1
    }
    
    // Return the combined and sorted result array
    return resultArray
}

// Example usage:
let myArray = [5, 2, 10, 8, 3, 6, 1, 9, 4, 7]
let sortedArray = mergeSort(myArray)
// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]