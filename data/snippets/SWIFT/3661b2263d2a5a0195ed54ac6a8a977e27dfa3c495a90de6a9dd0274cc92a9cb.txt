import Foundation

// This code snippet demonstrates how to create a custom class with inheritance and generics in Swift.

// Parent class with generic data type T
class ParentClass<T> {
    var data: T
    var description: String
    
    // Initializer that takes in a value of type T
    init(data: T) {
        self.data = data
        self.description = ""
    }
    
    // Function that sets the description for the instance
    func setDescription(description: String) {
        self.description = description
    }
    
    // Function that prints the description and data of the instance
    func printData() {
        print("\(self.description): \(self.data)")
    }
}

// Child class that inherits from ParentClass and uses String as the generic data type
class ChildClass: ParentClass<String> {
    var count: Int
    
    // Initializer that takes in a String value and an Int value
    init(data: String, count: Int) {
        // Calls the super class initializer and passes in the String value
        super.init(data: data)
        self.count = count
    }
    
    // Function that overrides the printData function from the ParentClass
    override func printData() {
        // Calls the super class printData function
        super.printData()
        print("Count: \(self.count)")
    }
}

// Creates an instance of the ParentClass with an Int value of 5
let parentInstance = ParentClass(data: 5)

// Creates an instance of the ChildClass with a String value of "Hello" and an Int value of 3
let childInstance = ChildClass(data: "Hello", count: 3)

// Sets the description for the parent instance
parentInstance.setDescription(description: "This is a parent instance")

// Sets the description for the child instance
childInstance.setDescription(description: "This is a child instance")

// Prints the data for both instances
parentInstance.printData()
childInstance.printData()