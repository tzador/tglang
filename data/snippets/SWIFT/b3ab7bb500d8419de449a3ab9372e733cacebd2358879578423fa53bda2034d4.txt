// Declare a function with a closure as a parameter
func calculateSum(_ numbers: [Int], closure: ((Int, Int) -> Int)) -> Int {
    // Initialize sum variable
    var sum = 0
    // Loop through numbers array and call closure with two values
    for number in numbers {
        sum = closure(sum, number)
    }
    // Return sum value
    return sum
}

// Create a closure that calculates the product of two numbers
let multiplyClosure: ((Int, Int) -> Int) = { num1, num2 in
    return num1 * num2
}

// Create an array of numbers
let numbers = [1, 2, 3, 4, 5]

// Call calculateSum function with numbers array and multiplyClosure
let product = calculateSum(numbers, closure: multiplyClosure)

// Print result
print(product) // Output: 120