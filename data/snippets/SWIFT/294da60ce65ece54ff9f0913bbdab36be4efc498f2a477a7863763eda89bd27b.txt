/// Optionals
// An optional is a type in Swift that represents a variable that can either have a value or be nil.

// Optional chaining
// Optional chaining allows us to safely access properties, methods, and subscripts on optional values.

// Optional binding
// Optional binding is a way to check if an optional has a value, and if so, safely unwrap it and use its value.

class Person {
    var name: String?
    var age: Int?
}

// Creating an optional instance of Person:
let myPerson: Person? = Person()

// Optional chaining:
// Checking if the person has a name, and if so, printing it:
if let name = myPerson?.name {
    print("The person's name is \(name)")
} else {
    print("The person's name is nil")
}

// Optional binding:
// Unwrapping myPerson to check if it has an age, and if so, printing it:
if let person = myPerson, let age = person.age {
    print("The person's age is \(age)")
} else {
    print("The person's age is nil")
}