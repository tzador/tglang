func quickSort<T: Comparable>(_ array: inout [T], low: Int, high: Int) {
    if low < high {
        let pivotIndex = partition(&array, low: low, high: high)

        quickSort(&array, low: low, high: pivotIndex - 1)
        quickSort(&array, low: pivotIndex + 1, high: high)
    }
}

/// This function takes the last element as pivot, places
/// the pivot element at its correct position in sorted
/// array, and places all smaller (smaller than pivot)
/// to left of pivot and all greater elements to right
/// of pivot
/// - Parameter array: Array to be sorted
/// - Parameter low: Starting index of array
/// - Parameter high: Ending index of array
/// - Returns: Index of pivot element
private func partition<T: Comparable>(_ array: inout [T], low: Int, high: Int) -> Int {
    let pivot = array[high]
    var i = low

    //Loop until all elements have been compared to pivot
    for j in low..<high {
        //If element at current index is smaller than pivot,
        //swap it with element at i (which is known to be larger than pivot)
        if array[j] <= pivot {
            array.swapAt(i, j)
            i += 1
        }
    }

    //Swap pivot element into correct position
    array.swapAt(i, high)
    return i
}

//Example usage:
var numbers = [9,8,7,6,5,4,3,2,1]
quickSort(&numbers, low: 0, high: numbers.count - 1)
print(numbers) //Output: [1,2,3,4,5,6,7,8,9]