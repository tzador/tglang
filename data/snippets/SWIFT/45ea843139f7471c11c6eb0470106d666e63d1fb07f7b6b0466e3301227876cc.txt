/*
  This is a multiline comment in SWIFT.
  It will be ignored by the compiler.
*/

// This is a single line comment in SWIFT.

// MARK: - Protocol Declaration

// We are declaring a protocol named Animal.
// The protocol requires a method called 'makeSound' that takes in a String parameter.
// It also requires a property called 'numberOfLegs' that is an Integer.
// Finally, it requires a function called 'eatFood' that takes in an optional String parameter and returns a String.

protocol Animal {
    func makeSound(sound: String)
    var numberOfLegs: Int { get }
    func eatFood(food: String?) -> String
}

// MARK: - Struct Declaration

// We are declaring a struct named Dog.
// It conforms to the Animal protocol and implements all its required methods and properties.

struct Dog: Animal {
    var name: String
    var age: Int
    var species: String
    var numberOfLegs: Int
    
    // We are implementing the makeSound method from the Animal protocol.
    func makeSound(sound: String) {
        print("\(name) makes a \(sound) sound.")
    }
    
    // We are implementing the eatFood function from the Animal protocol.
    // It takes in an optional food parameter, which defaults to "bones" if no value is passed in.
    // It returns a string that states what the dog ate.
    func eatFood(food: String? = "bones") -> String {
        guard let food = food else { return "\(name) didn't eat anything." }
        return "\(name) ate \(food)."
    }
}

// MARK: - Creating Instances

// We are creating two instances of Dog, and calling their makeSound and eatFood methods.
// Finally, we are printing their names and the return value of the eatFood method.

let dog1 = Dog(name: "Buddy", age: 5, species: "Golden Retriever", numberOfLegs: 4)
dog1.makeSound(sound: "woof")
print(dog1.name)
print(dog1.eatFood())

let dog2 = Dog(name: "Max", age: 3, species: "German Shepherd", numberOfLegs: 4)
dog2.makeSound(sound: "bark")
print(dog2.name)
print(dog2.eatFood(food: "chicken"))