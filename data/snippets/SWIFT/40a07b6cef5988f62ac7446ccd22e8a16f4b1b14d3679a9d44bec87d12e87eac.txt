enum Rank {
    case ace
    case king
    case queen
    case jack
    case ten
    case nine
    case eight
    case seven
    case six
    case five
    case four
    case three
    case two
    
    func description() -> String {
        switch self {
        case .ace:
            return "Ace"
        case .king:
            return "King"
        case .queen:
            return "Queen"
        case .jack:
            return "Jack"
        case .ten:
            return "Ten"
        case .nine:
            return "Nine"
        case .eight:
            return "Eight"
        case .seven:
            return "Seven"
        case .six:
            return "Six"
        case .five:
            return "Five"
        case .four:
            return "Four"
        case .three:
            return "Three"
        case .two:
            return "Two"
        }
    }
    
    func value() -> Int {
        switch self {
        case .ace:
            return 14
        case .king:
            return 13
        case .queen:
            return 12
        case .jack:
            return 11
        case .ten:
            return 10
        case .nine:
            return 9
        case .eight:
            return 8
        case .seven:
            return 7
        case .six:
            return 6
        case .five:
            return 5
        case .four:
            return 4
        case .three:
            return 3
        case .two:
            return 2
        }
    }
}

struct Card {
    var rank: Rank
    var suit: Suit
}

enum Suit {
    case spades, hearts, diamonds, clubs
    
    func description() -> String {
        switch self {
        case .spades:
            return "Spades"
        case .hearts:
            return "Hearts"
        case .diamonds:
            return "Diamonds"
        case .clubs:
            return "Clubs"
        }
    }
}

class Deck {
    var cards: [Card]
    
    init() {
        self.cards = []
        
        for suit in Suit.allValues {
            for rank in Rank.allValues {
                self.cards.append(Card(rank: rank, suit: suit))
            }
        }
    }
    
    func shuffle() {
        cards.shuffle()
    }
}

extension Deck: CustomStringConvertible {
    var description: String {
        var output = ""
        for index in 0..<cards.count {
            output += "Card \(index + 1): \(cards[index].rank.description()) of \(cards[index].suit.description()) \n"
        }
        return output
    }
}

extension Suit {
    static var allValues: [Suit] {
        return [.spades, .hearts, .diamonds, .clubs]
    }
}

extension Rank {
    static var allValues: [Rank] {
        return [.ace, .king, .queen, .jack, .ten, .nine, .eight, .seven, .six, .five, .four, .three, .two]
    }
}

let deck = Deck()
print(deck)