// This code snippet shows the implementation of a binary search algorithm in Swift 

func binarySearch<T: Comparable>(for array: [T], value: T, range: Range<Int>) -> Int? {
// This function takes an array of T type elements, a value to search for, and a range within which to search
   if range.lowerBound == range.upperBound {
      return nil
   } else {
      let midIndex = range.lowerBound + (range.upperBound - range.lowerBound) / 2
      // Finds the middle index of the range
      if array[midIndex] > value {
         return binarySearch(for: array, value: value, range: range.lowerBound ..< midIndex)
         // Recursively calls the function on the lower half of the range
      } else if array[midIndex] < value {
         return binarySearch(for: array, value: value, range: midIndex + 1 ..< range.upperBound)
         // Recursively calls the function on the upper half of the range
      } else {
         return midIndex
         // Returns the index of the value if it is found
      }
   }
}

// Example Usage
let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
let index = binarySearch(for: numbers, value: 7, range: 0 ..< numbers.count)

print("Index of 7 is \(index!)") // Output: Index of 7 is 6