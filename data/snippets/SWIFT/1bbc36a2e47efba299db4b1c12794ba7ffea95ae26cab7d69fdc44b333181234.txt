// This class represents a linked list node
class Node<T> {
    let data: T // stores data of type T
    var next: Node<T>? // points to the next node in the list
    initialize(data: T) {
        self.data = data // initializes data with given value
    }
}

// This class represents a linked list data structure
class LinkedList<T> {
    var head: Node<T>? // points to the first node in the list
    
    // Function to insert a new node at the beginning of the list
    func insertFirst(data: T) {
        let newNode = Node(data: data) // creates a new node with given data
        newNode.next = head // points the new node to the current first node
        head = newNode // updates the head to point to the new node
    }
    
    // Function to insert a new node at the end of the list
    func insertLast(data: T) {
        let newNode = Node(data: data) // creates a new node with given data
        // checks if list is empty
        if head == nil {
            head = newNode // if empty, makes the new node the first node
            return // exits the function
        }
        // loop through the list to find the last node
        var currentNode = head
        while let nextNode = currentNode?.next {
            currentNode = nextNode // updates the current node to the next node
        }
        currentNode?.next = newNode // adds the new node to the end of the list
    }
    
    // Function to insert a new node at a specific position in the list
    func insert(data: T, at position: Int) {
        // checks if position is 0
        if position == 0 {
            insertFirst(data: data) // calls insertFirst() function
            return // exits the function
        }
        
        // creates a new node with given data
        let newNode = Node(data: data)
        
        // loop through the list to find the node at the given position
        var currentNode = head
        for _ in 0..<position-1 {
            currentNode = currentNode?.next // updates current node to the next node
        }
        
        // checks if currentNode is nil (position is out of bounds)
        guard let foundNode = currentNode else {
            print("Position is out of bounds.") // prints an error message
            return // exits the function
        }
        
        newNode.next = foundNode.next // points the new node to the next node
        foundNode.next = newNode // points the previous node to the new node
    }
    
    // Function to remove the first node in the list
    func removeFirst() {
        // checks if list is empty
        guard let currentHead = head else {
            print("List is empty.") // prints an error message
            return // exits the function
        }
        
        head = currentHead.next // updates the head to point to the next node
    }
    
    // Function to remove the last node in the list
    func removeLast() {
        // checks if list is empty
        guard let currentHead = head else {
            print("List is empty.") // prints an error message
            return // exits the function
        }
        
        // checks if list has only one node
        if currentHead.next == nil {
            head = nil // if only one node, sets head to nil
            return // exits the function
        }
        
        // loop through list to find second to last node
        var currentNode = head
        while let nextNode = currentNode?.next?.next {
            currentNode = nextNode // updates the current node to the next node
        }
        
        currentNode?.next = nil // sets previous node's next to nil to remove last node
    }
    
    // Function to remove a node at a specific position in the list
    func remove(at position: Int) {
        // checks if position is 0
        if position == 0 {
            removeFirst() // calls removeFirst() function
            return // exits the function
        }
        
        // checks if list is empty
        guard let currentHead = head else {
            print("List is empty.") // prints an error message
            return // exits the function
        }
        
        // loop through the list to find the node at the given position
        var currentNode = head
        for _ in 0..<position-1 {
            currentNode = currentNode?.next // updates current node to the next node
        }
        
        // checks if currentNode is nil (position is out of bounds)
        guard let foundNode = currentNode else {
            print("Position is out of bounds.") // prints an error message
            return // exits the function
        }
        
        // checks if next node is nil (position is at the end of the list)
        guard let nextNode = foundNode.next else {
            print("Position is out of bounds.") // prints an error message
            return // exits the function
        }
        
        foundNode.next = nextNode.next // points previous node to node after next node
    }
    
    // Function to print the contents of the list
    func printList() {
        // checks if list is empty
        if head == nil {
            print("List is empty.") // prints an error message
            return // exits the function
        }
        
        // loop through list and print the data in each node
        var currentNode = head
        while let nextNode = currentNode {
            print(nextNode.data)
            currentNode = nextNode.next // updates current node to the next node
        }
    }
}