/// This code snippet demonstrates how to implement a binary search tree in SWIFT

class Node {
    var key:Int?
    var left:Node?
    var right:Node?
    
    init(key:Int) {
        self.key = key
    }
}

class BinarySearchTree {
    var root:Node?
    
    /// Function to insert a new node into the binary search tree
    ///
    /// - parameter key: Key value to be inserted
    /// - parameter currentNode: Node to compare with the new node while traversing the tree
    ///
    /// - Returns: The inserted node
    func insert(key:Int, currentNode:Node?) -> Node {
        guard let currentNode = currentNode else {
            let newNode = Node(key: key)
            return newNode
        }
        
        if key < currentNode.key! {
            currentNode.left = insert(key: key, currentNode: currentNode.left)
        } else if key > currentNode.key! {
            currentNode.right = insert(key: key, currentNode: currentNode.right)
        }
        return currentNode
    }
    
    /// Function to search for a specific key in the binary search tree
    ///
    /// - parameter key: Key value to search for
    /// - parameter currentNode: Node to compare with while traversing the tree
    ///
    /// - Returns: The node with the searched key, if found. Otherwise, returns nil
    func search(key:Int, currentNode:Node?) -> Node? {
        guard let currentNode = currentNode else {
            return nil
        }
        
        if key == currentNode.key {
            return currentNode
        } else if key < currentNode.key! {
            return search(key: key, currentNode: currentNode.left)
        } else {
            return search(key: key, currentNode: currentNode.right)
        }
    }
    
    /// Function to delete a specific key from the binary search tree
    ///
    /// - parameter key: Key value to be deleted
    /// - parameter currentNode: Node to compare with while traversing the tree
    ///
    /// - Returns: Updated root node after deleting the key
    func delete(key:Int, currentNode:Node?) -> Node? {
        guard let currentNode = currentNode else {
            return nil
        }
        
        if key == currentNode.key {
            // If the node has no child, simply remove it
            if currentNode.left == nil && currentNode.right == nil {
                return nil
            }
            // If the node has only one child, replace it with the child node
            if currentNode.left == nil {
                return currentNode.right
            }
            if currentNode.right == nil {
                return currentNode.left
            }
            // If the node has two children, find the successor to replace it
            let successor = findSuccessor(node: currentNode.right!)
            currentNode.key = successor.key
            currentNode.right = delete(key: successor.key!, currentNode: currentNode.right)
        } else if key < currentNode.key! {
            currentNode.left = delete(key: key, currentNode: currentNode.left)
        } else {
            currentNode.right = delete(key: key, currentNode: currentNode.right)
        }
        return currentNode
    }
    
    /// Function to find the successor of a specific key in the binary search tree
    ///
    /// - parameter node: Node to search from
    ///
    /// - Returns: The successor of the given node
    func findSuccessor(node:Node) -> Node {
        var successor = node
        while successor.left != nil {
            successor = successor.left!
        }
        return successor
    }
}