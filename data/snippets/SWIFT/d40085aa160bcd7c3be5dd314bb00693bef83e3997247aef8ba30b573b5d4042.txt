func mergeSort<T: Comparable>(_ array: [T]) -> [T] { // creates a generic function called mergeSort that takes in an array of comparable elements and returns an array of comparable elements
    guard array.count > 1 else { return array } // checks if the array has more than one element, if not, returns the array as is
    let middleIndex = array.count / 2 // calculates the middle index of the array
    let leftArray = mergeSort(Array(array[..<middleIndex])) // recursively calls mergeSort on the left half of the array
    let rightArray = mergeSort(Array(array[middleIndex..<array.count])) // recursively calls mergeSort on the right half of the array
    return merge(leftArray, rightArray) // calls the merge function with the sorted left and right arrays as arguments
}

func merge<T: Comparable>(_ leftArray: [T], _ rightArray: [T]) -> [T] { // creates a generic function called merge that takes in two arrays of comparable elements and returns an array of comparable elements
    var leftIndex = 0 // creates a variable to track the index of the left array
    var rightIndex = 0 // creates a variable to track the index of the right array
    var mergedArray: [T] = [] // creates an empty array to store the merged elements
    while leftIndex < leftArray.count && rightIndex < rightArray.count { // iterates through both arrays until one of them is fully traversed
        if leftArray[leftIndex] < rightArray[rightIndex] { // compares the first element of each array and appends the smaller one to the mergedArray
            mergedArray.append(leftArray[leftIndex])
            leftIndex += 1
        } else if leftArray[leftIndex] > rightArray[rightIndex] { // compares the first element of each array and appends the smaller one to the mergedArray
            mergedArray.append(rightArray[rightIndex])
            rightIndex += 1
        } else { // if the first elements of both arrays are equal, appends both to the mergedArray
            mergedArray.append(leftArray[leftIndex])
            mergedArray.append(rightArray[rightIndex])
            leftIndex += 1
            rightIndex += 1
        }
    }
    while leftIndex < leftArray.count { // appends any remaining elements in the left array to the mergedArray
        mergedArray.append(leftArray[leftIndex])
        leftIndex += 1
    }
    while rightIndex < rightArray.count { // appends any remaining elements in the right array to the mergedArray
        mergedArray.append(rightArray[rightIndex])
        rightIndex += 1
    }
    return mergedArray // returns the mergedArray
}

var unsortedArray = [9, 4, 2, 7, 1, 6, 3, 8, 5] // creates an unsorted array
var sortedArray = mergeSort(unsortedArray) // calls the mergeSort function on the unsorted array and assigns the sorted array to a new variable
print(sortedArray) // prints the sorted array