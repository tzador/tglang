// This code snippet uses Swift's advanced Generics feature to create a complex data structure

// Define a generic node class
class Node<T> {
    var value: T
    var next: Node<T>?

    init(value: T) {
        self.value = value
    }
}

// Define a generic linked list class
class LinkedList<T> {
    var head: Node<T>?

    func append(value: T) {
        let newNode = Node(value: value)
        if head == nil {
            head = newNode
        } else {
            var current = head
            while(current?.next != nil) {
                current = current?.next
            }
            current?.next = newNode
        }
    }

    // Define a generic function to print the nodes in the linked list
    func printList() {
        var current = head
        while(current != nil) {
            print("\(current!.value)")
            current = current?.next
        }
    }
}

// Create an instance of the linked list class with String data type
let stringList = LinkedList<String>()
stringList.append(value: "Hello")
stringList.append(value: "world")
stringList.append(value: "!")
stringList.printList() // Output: Hello, world, !

// Create an instance of the linked list class with Int data type
let intList = LinkedList<Int>()
intList.append(value: 1)
intList.append(value: 2)
intList.append(value: 3)
intList.printList() // Output: 1, 2, 3