func mergeSort<T: Comparable>(_ array: [T]) -> [T] {
    guard array.count > 1 else { return array }
    
    let middleIndex = array.count / 2
    let leftArray = mergeSort(Array(array[0..<middleIndex]))
    let rightArray = mergeSort(Array(array[middleIndex..<array.count]))
    
    return merge(leftPile: leftArray, rightPile: rightArray)
}

func merge<T: Comparable>(leftPile: [T], rightPile: [T]) -> [T] {
    var leftIndex = 0
    var rightIndex = 0
    
    var orderedPile = [T]()
    
    while leftIndex < leftPile.count && rightIndex < rightPile.count {
        let leftElement = leftPile[leftIndex]
        let rightElement = rightPile[rightIndex]
        
        if leftElement < rightElement {
            orderedPile.append(leftElement)
            leftIndex += 1
        } else if leftElement > rightElement {
            orderedPile.append(rightElement)
            rightIndex += 1
        } else {
            orderedPile.append(leftElement)
            leftIndex += 1
            orderedPile.append(rightElement)
            rightIndex += 1
        }
    }
    
    while leftIndex < leftPile.count {
        orderedPile.append(leftPile[leftIndex])
        leftIndex += 1
    }
    
    while rightIndex < rightPile.count {
        orderedPile.append(rightPile[rightIndex])
        rightIndex += 1
    }
    
    return orderedPile
}

// Example input and output
let array = [2, 4, 1, 6, 8, 5, 9, 3, 7]
let sortedArray = mergeSort(array) // [1, 2, 3, 4, 5, 6, 7, 8, 9]