//This code snippet creates a binary search tree
 
//Defining the node class for the binary search tree
class Node {
    
    let value: Int //Value stored in the node
    var leftChild: Node? //Pointer to the left child node
    var rightChild: Node? //Pointer to the right child node
    
    //Initializing a node with given value and no child nodes
    init(value: Int) {
        self.value = value
        self.leftChild = nil
        self.rightChild = nil
    }
}

//Defining the binary search tree class
class BinarySearchTree {
    
    var root: Node? //Pointer to the root node of the tree
    
    //Inserting a new value into the tree
    func insert(value: Int) {
        
        //If tree is empty, set new node as the root
        if root == nil {
            root = Node(value: value)
            return
        }
        
        //Creating a new node with the given value
        let newNode = Node(value: value)
        
        //Starting at the root, loop until a suitable spot is found to insert the new node
        var current = root
        
        while current != nil {
            
            //If the value to be inserted is less than the current node's value, move to the left child
            if newNode.value < current!.value {
                
                //If left child is nil, insert new node as the left child
                if current!.leftChild == nil {
                    current!.leftChild = newNode
                    break
                }
                
                //If left child is not nil, continue traversing the tree
                current = current!.leftChild
            }
                
            //If the value to be inserted is greater than or equal to the current node's value, move to the right child
            else {
                
                //If right child is nil, insert new node as the right child
                if current!.rightChild == nil {
                    current!.rightChild = newNode
                    break
                }
                
                //If right child is not nil, continue traversing the tree
                current = current!.rightChild
            }
        }
    }
    
    //Searching for a given value in the tree
    func search(value: Int) -> Bool {
        
        //Start at the root
        var current = root
        
        //Loop until the value is found or until the end of the tree is reached
        while current != nil {
            
            //If the value is equal to the current node's value, return true
            if value == current!.value {
                return true
            }
                
            //If the value is less than the current node's value, move to the left child
            else if value < current!.value {
                current = current!.leftChild
            }
                
            //If the value is greater than the current node's value, move to the right child
            else {
                current = current!.rightChild
            }
        }
        
        //If the end of the tree is reached without finding the value, return false
        return false
    }
}

//Example usage
let tree = BinarySearchTree()
tree.insert(value: 8)
tree.insert(value: 3)
tree.insert(value: 10)
tree.insert(value: 1)
tree.insert(value: 6)
tree.insert(value: 14)
tree.insert(value: 4)
tree.insert(value: 7)
tree.insert(value: 13)

tree.search(value: 7) //Outputs: true
tree.search(value: 5) //Outputs: false