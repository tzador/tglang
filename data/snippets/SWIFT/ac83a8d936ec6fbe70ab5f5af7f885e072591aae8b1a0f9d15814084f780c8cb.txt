/// A generic function that sorts an array of type T using the quicksort algorithm
/// - Parameters:
///   - array: The array of elements to be sorted
///   - start: The starting index of the array
///   - end: The ending index of the array
/// - Returns: A sorted array in ascending order

func quicksort<T: Comparable>(_ array: inout [T], start: Int, end: Int) -> [T] {
    if start < end {
        // Partition the array into two halves and return the index of the pivot element
        let pivotIndex = partition(&array, start: start, end: end)
        
        // Recursively call quicksort on the left and right halves of the array
        quicksort(&array, start: start, end: pivotIndex - 1)
        quicksort(&array, start: pivotIndex + 1, end: end)
    }
    
    return array
}

/// Helper function to partition an array using the pivot element
/// - Parameters:
///   - array: The array of elements to be sorted
///   - start: The starting index of the array
///   - end: The ending index of the array
/// - Returns: The index of the pivot element after it has been placed in its correct position in the array

private func partition<T: Comparable>(_ array: inout [T], start: Int, end: Int) -> Int {
    // Choose the pivot element (in this case, the last element in the array)
    let pivot = array[end]
    
    // Initialize index of smaller element
    var i = start - 1
    
    // Loop through the array, comparing each element to the pivot element
    for j in start...end-1 {
        // If the current element is smaller than the pivot, increment the index of the smaller element
        if array[j] < pivot {
            i += 1
            // Swap the elements at positions i and j
            array.swapAt(i, j)
        }
    }
    // Swap the pivot element into its correct position
    array.swapAt(i + 1, end)
    
    // Return the index of the pivot element
    return i + 1
}

/// Example usage of the quicksort function
var numbers = [10, 7, 3, 9, 2, 1, 5, 4, 6, 8]
let sortedNumbers = quicksort(&numbers, start: 0, end: numbers.count - 1)
print(sortedNumbers) // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]