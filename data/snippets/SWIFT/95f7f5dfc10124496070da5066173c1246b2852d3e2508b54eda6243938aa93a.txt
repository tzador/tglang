// An example of a complex code snippet in SWIFT
import UIKit

// Defining a generic class called `SortingAlgorithm` with a `sort` method of type `T`
class SortingAlgorithm<T> where T: Comparable {
    // Define a function `sort` which takes an array of type `T` as input and returns a sorted array of type `T`
    func sort(input: [T]) -> [T] {
        // Set a variable `sortedArray` equal to the values of the `input` array
        var sortedArray = input
        // Set a variable `n` equal to the size of the `sortedArray`
        let n = sortedArray.count
        
        // Create a loop that will run through `n` times
        for i in 0..<n {
            // Create another loop that will run through all the elements in the `sortedArray`
            for j in 0..<(n - i - 1) {
                // Check if the element at index `j` in the `sortedArray` is greater than the element at index `j + 1`
                if sortedArray[j] > sortedArray[j + 1] {
                    // Swap the elements at index `j` and `j + 1`
                    let temp = sortedArray[j]
                    sortedArray[j] = sortedArray[j + 1]
                    sortedArray[j + 1] = temp
                }
            }
        }
        
        // Return the `sortedArray`
        return sortedArray
    }
}

// Create an instance of `SortingAlgorithm` with type `String`
let stringSort = SortingAlgorithm<String>()
// Create an instance of `SortingAlgorithm` with type `Int`
let intSort = SortingAlgorithm<Int>()

// Define an array of unsorted strings
let stringArray = ["b", "e", "a", "c", "d"]
// Sort the string array using `stringSort` instance
let sortedStrings = stringSort.sort(input: stringArray)
// Print the sorted array
print(sortedStrings)

// Define an array of unsorted integers
let intArray = [5, 2, 6, 1, 3, 4]
// Sort the integer array using `intSort` instance
let sortedIntegers = intSort.sort(input: intArray)
// Print the sorted array
print(sortedIntegers)