// Sorting algorithm using quicksort
// Input: array of integers
// Output: sorted array of integers
func quicksort(_ array: [Int]) -> [Int] {
    if array.count <= 1 {
        return array
    }
    
    let pivot = array[array.count / 2] // choosing pivot as middle element
    let less = array.filter { $0 < pivot } // partition into subarrays with elements less than pivot
    let equal = array.filter { $0 == pivot } // partition into subarrays with elements equal to pivot
    let greater = array.filter { $0 > pivot } // partition into subarrays with elements greater than pivot
    
    // recursively sort subarrays and combine into final sorted array
    return quicksort(less) + equal + quicksort(greater)
}

// Example input
let unsortedArray = [4, 3, 7, 1, 9, 5, 2, 8, 6]
// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]

// Print sorted array
print(quicksort(unsortedArray))