struct Queue<T> { // define a generic Queue struct
    private var elements: [T] = [] // initialize an array to store elements
    
    mutating func enqueue(element: T) { // add an element to the back of the queue
        elements.append(element) // append element to the end of the array
    }
    
    mutating func dequeue() -> T? { // remove and return the element at the front of the queue
        guard !elements.isEmpty else { // check if the queue is empty
            print("Queue is empty") // print error message if queue is empty
            return nil
        }
        
        return elements.removeFirst() // remove and return the first element in the array
    }
    
    func peek() -> T? { // return the element at the front of the queue without removing it
        return elements.first // return the first element in the array
    }
    
    var isEmpty: Bool { // check if the queue is empty
        return elements.isEmpty // return true if array is empty, false if not
    }
    
    var size: Int { // return the number of elements in the queue
        return elements.count // return the count of elements in the array
    }
}

var queue = Queue<Int>() // create a queue of type Int

queue.enqueue(element: 1) // enqueue element 1
queue.enqueue(element: 2) // enqueue element 2
queue.enqueue(element: 3) // enqueue element 3

print(queue.peek()) // print the element at the front of the queue (1)

queue.dequeue() // dequeue and remove element at the front of the queue (1)

print(queue.isEmpty) // print whether the queue is empty or not (false)

print(queue.size) // print the number of elements in the queue (2)