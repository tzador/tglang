// Declaring a generic class with constraints
class GenericClass<T: Comparable> {
    
    // Declaring a generic property
    var genericProperty: T
    
    // Declaring a generic initializer 
    init(genericValue: T) {
        self.genericProperty = genericValue
    }
    
    // Declaring a generic function with constraints 
    func findLargerValue<U: Comparable>(valueOne: T, valueTwo: U) -> T {
        
        // Using conditional statements with generic types 
        if valueOne >= valueTwo as! T {
            return valueOne
        } else {
            return valueTwo as! T
        }
    }
}

// Creating an instance of the GenericClass with Int as the generic type 
let integerClass = GenericClass<Int>(genericValue: 5)

// Finding the larger value using the generic function 
let largerValue = integerClass.findLargerValue(valueOne: 10, valueTwo: 8)

// Output: 10