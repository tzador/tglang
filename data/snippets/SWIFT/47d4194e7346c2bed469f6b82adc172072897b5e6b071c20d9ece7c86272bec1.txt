/*
This function finds the length of the longest common subsequence between two given strings
*/

func longestCommonSubsequence(_ firstString: String, _ secondString: String) -> Int {

    /* 
    Convert the strings to character arrays for easier manipulation 
    */
    let firstStringArray = Array(firstString)
    let secondStringArray = Array(secondString)

    /*
    Create a 2D array with rows and columns corresponding to the lengths of the two strings
    */
    var lcsTable = [[Int]](repeating: [Int](repeating: 0, count: secondStringArray.count + 1), count: firstStringArray.count + 1)

    /*
    Iterate through the strings and fill up the 2D array with LCS values
    */
    for i in 0...firstStringArray.count {
        for j in 0...secondStringArray.count {
            if i == 0 || j == 0 {
                lcsTable[i][j] = 0
            }
            else if firstStringArray[i-1] == secondStringArray[j-1] {
                lcsTable[i][j] = lcsTable[i-1][j-1] + 1
            }
            else {
                lcsTable[i][j] = max(lcsTable[i-1][j], lcsTable[i][j-1])
            }
        }
    }

    /*
    The length of the longest common subsequence can be found in the bottom-right corner of the 2D array
    */
    return lcsTable[firstStringArray.count][secondStringArray.count]

}