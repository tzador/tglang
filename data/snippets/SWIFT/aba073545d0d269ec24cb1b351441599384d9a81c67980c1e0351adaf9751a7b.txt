/* This Swift code will sort an array of integers using the quick sort algorithm */

func quickSort(_ arr: [Int]) -> [Int] {
    // Base case: If the array is empty or contains only 1 element, return the array
    guard arr.count > 1 else {
        return arr
    }
    
    // Select a pivot element and create empty arrays for elements less than and greater than the pivot
    let pivot = arr[arr.count - 1]
    var lessThanPivot = [Int]()
    var greaterThanPivot = [Int]()
    
    // Loop through the array, comparing each element to the pivot
    for i in 0..<arr.count - 1 {
        if arr[i] < pivot {
            lessThanPivot.append(arr[i])
        } else {
            greaterThanPivot.append(arr[i])
        }
    }
    
    // Recursively call quickSort on the two subarrays, then combine them with the pivot to create the sorted array
    return quickSort(lessThanPivot) + [pivot] + quickSort(greaterThanPivot)
}

// Example usage and output:

let unsortedArray = [9, 4, 2, 7, 1]
let sortedArray = quickSort(unsortedArray)
print(sortedArray) // Output: [1, 2, 4, 7, 9]