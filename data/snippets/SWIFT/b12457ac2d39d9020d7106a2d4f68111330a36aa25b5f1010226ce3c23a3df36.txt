// Declare a constant with a tuple type, specifying two integers
let coordinates: (Int, Int) = (10, 5)

// Accessing individual elements of the tuple using dot notation
let x = coordinates.0 // x = 10
let y = coordinates.1 // y = 5

// Create a function that returns a tuple
func getScore() -> (Int, String) {
    return (100, "Excellent")
}

// Calling the function and storing the return values into constants
let score = getScore()
let points = score.0 // points = 100
let grade = score.1 // grade = "Excellent"

// Using a tuple to initialize multiple constants at once
let (num1, num2, num3) = (1, 2, 3) // num1 = 1, num2 = 2, num3 = 3

// Tuples can also be used as parameters in a function
func addNumbers(_ numbers: (Int, Int)) -> Int {
    let sum = numbers.0 + numbers.1
    return sum
}

// Calling the function with a tuple as the argument
let total = addNumbers((5, 10)) // total = 15

// Tuples can be named for easier access to elements
var employee: (name: String, age: Int, position: String)
employee.name = "John"
employee.age = 25
employee.position = "Manager"

// Accessing the named elements of the tuple using dot notation
let name = employee.name // name = "John"
let age = employee.age // age = 25
let position = employee.position // position = "Manager"

// Tuples can also be used as return types in a function
func getUserInfo() -> (name: String, age: Int, email: String) {
    let name = "Sarah"
    let age = 30
    let email = "sarah@example.com"
    return (name: name, age: age, email: email)
}

// Calling the function and storing the return values into constants
let user = getUserInfo()
let userName = user.name // userName = "Sarah"
let userAge = user.age // userAge = 30
let userEmail = user.email // userEmail = "sarah@example.com"