/// This function takes in an array of integers and returns a sorted array using merge sort algorithm.
/// - Parameters:
///    - array: The array of integers to be sorted.
///
/// - Returns: A sorted array of integers.
func mergeSort(_ array: [Int]) -> [Int] {
    // Base case: If the array is empty or has only one element, return the array.
    guard array.count > 1 else {
        return array
    }
    
    // Divide the array into two halves.
    let mid = array.count / 2
    let leftArray = Array(array[0..<mid])
    let rightArray = Array(array[mid..<array.count])
    
    // Recursively sort the two halves.
    let sortedLeft = mergeSort(leftArray)
    let sortedRight = mergeSort(rightArray)
    
    // Merge the two sorted halves.
    var sortedArray: [Int] = []
    var leftIndex = 0
    var rightIndex = 0
    
    while leftIndex < sortedLeft.count && rightIndex < sortedRight.count {
        if sortedLeft[leftIndex] < sortedRight[rightIndex] {
            sortedArray.append(sortedLeft[leftIndex])
            leftIndex += 1
        } else if sortedLeft[leftIndex] > sortedRight[rightIndex] {
            sortedArray.append(sortedRight[rightIndex])
            rightIndex += 1
        } else {
            sortedArray.append(sortedLeft[leftIndex])
            sortedArray.append(sortedRight[rightIndex])
            leftIndex += 1
            rightIndex += 1
        }
    }
    
    // Add remaining elements from either left or right array.
    if leftIndex < sortedLeft.count {
        sortedArray.append(contentsOf: sortedLeft[leftIndex...])
    } else if rightIndex < sortedRight.count {
        sortedArray.append(contentsOf: sortedRight[rightIndex...])
    }
    
    return sortedArray
}

// Example usage:
let unsortedArray = [6, 3, 8, 1, 4, 2, 7, 5]
let sortedArray = mergeSort(unsortedArray)
print(sortedArray)
// Output: [1, 2, 3, 4, 5, 6, 7, 8]