/// Define a generic class with a type constraint
class Container<T: Equatable> {
    private var elements = [T]() // Declare a private property of type Array

    /// Function to add an element to the container
    func addElement(element: T) {
        elements.append(element)
    }

    /// Function to remove an element from the container
    func removeElement(element: T) {
        if let index = elements.firstIndex(of: element) {
            elements.remove(at: index)
        }
    }

    /// Function to check if an element is contained in the container
    func containsElement(element: T) -> Bool {
        return elements.contains(element)
    }
}