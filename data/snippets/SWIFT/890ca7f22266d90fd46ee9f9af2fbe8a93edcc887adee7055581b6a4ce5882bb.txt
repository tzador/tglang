import Foundation

// Define a custom enum with associated values
enum Currency {
    case usd(amount: Double)
    case eur(amount: Double)
    case gbp(amount: Double)
    
    func convert(to currency: Currency) -> String {
        switch (self, currency) {
        case (.usd(let amount), .eur):
            return "\(amount * 0.85) EUR"
        case (.usd(let amount), .gbp):
            return "\(amount * 0.73) GBP"
        case (.eur(let amount), .usd):
            return "\(amount * 1.18) USD"
        case (.eur(let amount), .gbp):
            return "\(amount * 0.86) GBP"
        case (.gbp(let amount), .usd):
            return "\(amount * 1.37) USD"
        case (.gbp(let amount), .eur):
            return "\(amount * 1.16) EUR"
        default:
            return "Invalid Conversion"
        }
    }
}

// Convert USD 100 to EUR
let usdAmount = Currency.usd(amount: 100)
let convertedAmount = usdAmount.convert(to: Currency.eur(amount: 0))

print(convertedAmount) // Outputs: 85.0 EUR