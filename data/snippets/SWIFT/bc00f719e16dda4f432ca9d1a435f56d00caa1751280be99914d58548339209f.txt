//MARK: - String Encryption using AES
extension String {
    func aesEncrypt(key: String, iv: String) throws -> Data {
        let keyData: Data = key.data(using: String.Encoding.utf8)!
        let data: Data = self.data(using: String.Encoding.utf8)!
        let encrypted = try AES(key: keyData.bytes, blockMode: CBC(iv: iv), padding: .pkcs5).encrypt(data.bytes)
        return Data(bytes: encrypted, count: encrypted.count)
    }
    
    func aesDecrypt(key: String, iv: String) throws -> String {
        let keyData: Data = key.data(using: String.Encoding.utf8)!
        let data = Data(base64Encoded: self)!
        let decrypted = try AES(key: keyData.bytes, blockMode: CBC(iv: iv), padding: .pkcs5).decrypt(data!.bytes)
        return String(bytes: decrypted, encoding: String.Encoding.utf8)
    }
}

//MARK: - Example Usage
let message = "This is a secret message."
let key = "mysecretkey123"
let iv = "myinitializationvector"
do {
    let encryptedMessage = try message.aesEncrypt(key: key, iv: iv)
    print(encryptedMessage) //prints "úÇ!¹cÍÄÜ3·¥îTó§=Ö^´ÚÏàlÐÔp|"
    
    let decryptedMessage = try encryptedMessage.aesDecrypt(key: key, iv: iv)
    print(decryptedMessage) //prints "This is a secret message."
} catch {
    print("Error: \(error)")
}