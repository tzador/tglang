// Define a protocol with associated type
protocol Order {
    associatedtype Product
    var quantity: Int { get set }
    func totalPrice() -> Double
}

// Conform to the protocol with a generic struct
struct ShoppingCart<T: Order>: Order {
    var items: [T.Product]
    var quantity: Int
    
    // Implement totalPrice() function
    func totalPrice() -> Double {
        var total: Double = 0.0
        for item in items {
            if let price = item as? Double {
                total += price * Double(quantity)
            }
        }
        return total
    }
}

// Create an instance of the generic struct and call the totalPrice() function
let cart = ShoppingCart(items: [20.99, 35.75, 12.50], quantity: 2)
print("Total Price: $\(cart.totalPrice())")

// Output:
Total Price: $117.48