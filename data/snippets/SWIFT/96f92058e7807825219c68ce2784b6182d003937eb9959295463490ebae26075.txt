/*
This is a generic function that takes in an array of strings and a closure as parameters
and returns a dictionary with string keys and an array of strings as values.
*/
func createDictionary(inputArray: [String], closure: (String) -> String) -> [String: [String]] {
    var dictionary = [String: [String]]()
    for string in inputArray {
        // calling the closure on each element of the array to get the transformed string
        let transformedString = closure(string)
        // checking if the dictionary already has a key for the transformed string
        if dictionary[transformedString] == nil {
            // if not, add a new array with the current string as the only element
            dictionary[transformedString] = [string]
        } else {
            // if yes, append the current string to the existing array for that key
            dictionary[transformedString]?.append(string)
        }
    }
    return dictionary
}

// calling the function with an array of names and a closure that returns the first letter of each string
let names = ["John", "Mary", "Steven", "Emily", "David"]
let dictionary = createDictionary(inputArray: names) { (name) -> String in
    return String(name.prefix(1))
}

// expected output: ["J": ["John"], "M": ["Mary"], "S": ["Steven"], "E": ["Emily"], "D": ["David"]]
print(dictionary)