/**
 This function takes in two arrays and returns a sorted merged array
 
 - Parameters:
   - arr1: the first array to be sorted
   - arr2: the second array to be sorted
 
 - Returns: the merged and sorted array
 
 - Complexity:
   - Best case: O(n) where n is the length of the shorter array
   - Average case: O(n log n) where n is the average length of the two arrays
   - Worst case: O(n^2) where n is the length of the longer array
*/
func mergeSort(arr1: [Int], arr2: [Int]) -> [Int] {
    var sortedArr = [Int]()
    
    // Check for empty arrays
    if arr1.isEmpty && arr2.isEmpty {
        return sortedArr
    } else if arr1.isEmpty {
        return arr2
    } else if arr2.isEmpty {
        return arr1
    }
    
    // Set up pointers
    var i = 0
    var j = 0
    
    // Compare elements from both arrays and add them to sortedArr
    while i < arr1.count && j < arr2.count {
        if arr1[i] <= arr2[j] {
            sortedArr.append(arr1[i])
            i += 1
        } else {
            sortedArr.append(arr2[j])
            j += 1
        }
    }
    
    // Add remaining elements from either arr1 or arr2
    if i < arr1.count {
        sortedArr.append(contentsOf: arr1[i...])
    } else if j < arr2.count {
        sortedArr.append(contentsOf: arr2[j...])
    }
    
    // Return the sorted array
    return sortedArr
}

// Example usage
let arr1 = [1, 3, 5, 7]
let arr2 = [2, 4, 6, 8, 10]
let mergedArr = mergeSort(arr1: arr1, arr2: arr2)
print(mergedArr) // Output: [1, 2, 3, 4, 5, 6, 7, 8, 10]