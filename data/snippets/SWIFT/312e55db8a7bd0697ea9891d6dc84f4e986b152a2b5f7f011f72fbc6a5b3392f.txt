// This is a complex code snippet in Swift
import UIKit // Importing the UIKit framework

// Defining a struct with a generic type
struct Container<T> {
    var value: T // Property of type T
}

// Extension of the Container struct to add a method
extension Container {
    mutating func insert(_ item: T) {
        self.value = item
    }
}

// Creating an instance of the Container struct with type String
var container = Container<String>()
container.insert("Hello World") // Inserts a string into the container

// Defining a protocol with associated types
protocol Calculatable {
    associatedtype Number // Associated type
    func add(_ num1: Number, _ num2: Number) -> Number // Function that takes in two Numbers and returns a Number
}

// Creating a class that conforms to the Calculatable protocol with Int as the associated type
class Calculator: Calculatable {
    typealias Number = Int // Typealias for Number
    func add(_ num1: Int, _ num2: Int) -> Int {
        return num1 + num2
    }
}

// Creating an enum with associated values
enum Website {
    case personal(String) // Associated value of type String
    case blog(title: String, url: URL) // Associated values of different types
}

// Using pattern matching to print information about the enum cases
func getInfo(for website: Website) {
    switch website {
    case .personal(let name):
        print("This is my personal website: \(name)")
    case .blog(let title, let url):
        print("This is my blog titled \(title) located at \(url)")
    }
}

let myWebsite = Website.personal("www.example.com")
getInfo(for: myWebsite) // Prints "This is my personal website: www.example.com" to the console