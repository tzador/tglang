/* Sorting algorithm - Merge sort */

func mergeSort(_ array: [Int]) -> [Int] { // Function that takes in an array of integers and returns a sorted array of integers

    guard array.count > 1 else { // Checks if the array has more than 1 element, if not, returns the array as is
        return array
    }
    
    let middleIndex = array.count / 2 // Gets the middle index of the array
    let leftArray = mergeSort(Array(array[..<middleIndex])) // Recursively calls the function on the left half of the array
    let rightArray = mergeSort(Array(array[middleIndex...])) // Recursively calls the function on the right half of the array
    
    return merge(leftArray, rightArray) // Returns the result of the merge function on the two sorted arrays
}

func merge(_ left: [Int], _ right: [Int]) -> [Int] { // Function that takes in two sorted arrays and merges them into one sorted array
    var leftIndex = 0 // Index for the left array
    var rightIndex = 0 // Index for the right array
    
    var mergedArray: [Int] = [] // Empty array to store the merged elements
    
    while leftIndex < left.count && rightIndex < right.count { // Loops until one of the indexes is out of range
        if left[leftIndex] < right[rightIndex] { // Checks if the element at left index is smaller than the element at right index
            mergedArray.append(left[leftIndex]) // Adds the element from the left array to the merged array
            leftIndex += 1 // Increments the left index
        } else {
            mergedArray.append(right[rightIndex]) // Adds the element from the right array to the merged array
            rightIndex += 1 // Increments the right index
        }
    }
    
    // Adds any remaining elements from the left and right arrays to the merged array
    mergedArray.append(contentsOf: left[leftIndex...])
    mergedArray.append(contentsOf: right[rightIndex...])
    
    return mergedArray // Returns the merged array
}