// Enum with associated values
enum Vehicle {
  case car(brand: String)
  case bike(brand: String, gear: Int)

  mutating func changeGear(newGear: Int) {
    switch self {
    case .car:
      print("Can't change gear on a car!")
    case .bike(let brand, _):
      self = .bike(brand: brand, gear: newGear)
    }
  }
}

// Class with generic type
class Container<T> {
  var item: T!

  init(_ item: T) {
    self.item = item
  }

  func printItem() {
    print(item)
  }
}

// Function with optional return type
func divide(dividend: Int, divisor: Int) -> Int? {
  guard divisor != 0 else {
    return nil
  }
  return dividend / divisor
}

// Dictionary with different data types
var dictionary: [String: Any] = ["name": "John", "age": 25, "isEmployed": true, "salary": 5000.00]

// Struct with computed property
struct Square {
  var sideLength: Double = 1.0

  var area: Double {
    get {
      return sideLength * sideLength
    }
    set(newArea) {
      sideLength = sqrt(newArea)
    }
  }
}

// Extension with protocol constraints
extension Array where Element: Numeric {
  func sum() -> Element {
    var total: Element = 0
    for element in self {
      total += element
    }
    return total
  }
}