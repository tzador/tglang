enum GameMode {
    case singlePlayer
    case multiplayer(Int)
    
    var description: String {
        switch self {
        case .singlePlayer:
            return "Single player game mode"
        case .multiplayer(let numberOfPlayers):
            return "\(numberOfPlayers) player game mode"
        }
    }
}

protocol Scorable {
    var score: Int { get set }
}

class Player: Scorable {
    var score: Int = 0
    let name: String
    
    init(name: String) {
        self.name = name
    }
}

extension Player: Equatable {
    static func ==(lhs: Player, rhs: Player) -> Bool {
        return lhs.name == rhs.name && lhs.score == rhs.score
    }
}

class Game {
    let gameMode: GameMode
    var players: [Player]
    
    init(gameMode: GameMode) {
        self.gameMode = gameMode
        self.players = []
    }
    
    // MARK: - Private Methods
    
    private func updateScores(for player: Player) {
        player.score += 10
    }
    
    // MARK: - Public Methods
    
    func addPlayer(_ player: Player) {
        self.players.append(player)
    }
    
    func startGame() {
        print("Starting \(gameMode.description)")
        for player in players {
            updateScores(for: player)
        }
        print("\(players.count) players are playing")
    }
}

// MARK: - Testing

let singlePlayerGame = Game(gameMode: .singlePlayer)
singlePlayerGame.addPlayer(Player(name: "John"))
singlePlayerGame.startGame()

let multiplayerGame = Game(gameMode: .multiplayer(4))
multiplayerGame.addPlayer(Player(name: "Bob"))
multiplayerGame.addPlayer(Player(name: "Jane"))
multiplayerGame.addPlayer(Player(name: "Sarah"))
multiplayerGame.addPlayer(Player(name: "Mike"))
multiplayerGame.startGame()