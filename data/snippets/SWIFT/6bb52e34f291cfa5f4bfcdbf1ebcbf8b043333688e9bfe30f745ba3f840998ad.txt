/// This is a function that sorts an array using the bubble sort algorithm
func bubbleSort(_ array: [Int]) -> [Int] {
    // This is the base condition for the recursive function
    guard array.count > 1 else { return array }
    
    var result = array // create a mutable copy of the given array
    
    /// This nested function swaps two elements in the array
    func swap(_ index1: Int, _ index2: Int) {
        let temp = result[index1]
        result[index1] = result[index2]
        result[index2] = temp
    }
    
    var shouldContinue = true // flag to indicate if there are still elements to be sorted
    
    // iterate over the elements while there are still elements to be sorted
    while shouldContinue {
        shouldContinue = false
        
        for index in 0..<(result.count - 1) {
            // compare the current element with the next element
            if result[index] > result[index + 1] {
                // swap the elements if they are not in the correct order
                swap(index, index + 1)
                shouldContinue = true // set the flag to true to indicate that sorting should continue
            }
        }
    }
    
    return result // return the sorted array
}

// Example usage of the bubbleSort function
let unsortedArray = [5, 3, 8, 1, 9, 2]
let sortedArray = bubbleSort(unsortedArray)
print(sortedArray) // output: [1, 2, 3, 5, 8, 9]