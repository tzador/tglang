// Declare variables
var age: Int = 22
var name: String = "John"
var weight: Double = 65.5

// Declare arrays
var languages: [String] = ["Swift", "Java", "Python"]
var numbers: [Int] = [1, 2, 3, 4, 5]

// Declare dictionary
var userDetails: [String: String] = ["age": "22", "name": "John", "city": "New York"]

// Declare function
func calculateBMI(weight: Double, height: Double) -> Double {
    let BMI = weight / (height * height)
    return BMI
}

// Call function and assign return value to variable
var BMI = calculateBMI(weight: weight, height: 1.75)

// Loop through array
for language in languages {
    print("I can code in \(language)")
}

// Conditionals
if age >= 18 {
    print("You are eligible to vote")
} else {
    print("You are not eligible to vote")
}

// Optional binding
var optionalName: String? = "John"

if let name = optionalName {
    print("Hello \(name)")
} else {
    print("Name is not provided")
}

// Enum with raw values
enum Direction: Int {
    case north = 1
    case south = 2
    case east = 3
    case west = 4
}

var currentDirection = Direction.north.rawValue

// Class
class Person {
    var name: String
    var age: Int
    
    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
}

// Instantiate an object
var person = Person(name: "Jane", age: 25)

// Subclass
class Student: Person {
    var major: String
    
    init(name: String, age: Int, major: String) {
        self.major = major
        super.init(name: name, age: age)
    }
}

// Instantiate a subclass object
var student = Student(name: "Bob", age: 20, major: "Computer Science")

// Protocol
protocol Printable {
    func printDetails()
}

// Conform to protocol
extension Person: Printable {
    func printDetails() {
        print("Name: \(name), Age: \(age)")
    }
}

// Call method on object
person.printDetails()