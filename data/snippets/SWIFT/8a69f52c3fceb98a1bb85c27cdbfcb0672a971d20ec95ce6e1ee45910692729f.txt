// Declaration of a generic structure named 'Box'
// with a generic placeholder 'T' for any type
struct Box<T> {
    var item: T // item property of type 'T'
    
    // Function to add an item to the Box
    mutating func addItem(_ newItem: T) {
        self.item = newItem
    }
}

// Extending the Box structure with a generic function
// that takes in a closure and returns an array of items
extension Box {
    func map<U>(_ transform: (T) -> U) -> [U] {
        var result: [U] = []
        
        result.append(transform(self.item))
        
        return result
    }
}

// Creating a class of type 'User'
class User {
    var name: String
    
    init(name: String) {
        self.name = name
    }
}

// Creating an instance of type 'User'
let user = User(name: "John")

// Creating an instance of type 'Box' with 'User' as the placeholder type
var userBox = Box<User>(item: user)

// Using the 'map' function to transform the User object into an array of strings
let namesArray = userBox.map { (user) -> String in
    return user.name
}

print(namesArray) // Output: ["John"]