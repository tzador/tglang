// MARK: - Structures
struct Person {
    let name: String
    let age: Int
    var occupation: String?
    
    // Nested structure
    struct Address {
        var street: String
        var city: String
        var state: String
    }
    
    // Computed Property
    var fullName: String {
        return "\(name) - \(age)"
    }
    
    // Initializer
    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
}

// MARK: - Protocols
protocol CanFly {
    var numberOfWings: Int { get }
    
    func fly()
}

extension CanFly {
    func fly() {
        print("I am flying with \(numberOfWings) wings.")
    }
}

// MARK: - Enums
enum Food: String {
    case pizza
    case pasta
    case burger
    case salad
}

// MARK: - Classes
class Animal {
    let name: String
    var age: Int
    
    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
    
    // Method
    func eat(food: Food) {
        print("\(name) is eating \(food.rawValue).")
    }
}

// Subclass
class Dog: Animal, CanFly {
    var numberOfWings: Int {
        return 0
    }
    
    override func eat(food: Food) {
        print("\(name) is munching on \(food.rawValue).")
    }
}

// MARK: - Extensions
extension Int {
    func squared() -> Int {
        return self * self
    }
}

// MARK: - Generics
enum Result<T> {
    case success(T)
    case failure(Error)
}

// Usage
let person = Person(name: "John", age: 25)
person.fullName // Output: John - 25

let personAddress = Person.Address(street: "Main Street", city: "New York", state: "NY")

let animal = Animal(name: "Tiger", age: 10)
animal.eat(food: .pasta) // Output: Tiger is eating pasta.

let dog = Dog(name: "Max", age: 3)
dog.eat(food: .burger) // Output: Max is munching on burger.
dog.fly() // Output: I am flying with 0 wings.

let result: Result<Int> = .success(5)
switch result {
case .success(let value):
    print("The result is \(value).") // Output: The result is 5.
case .failure(let error):
    print("Error: \(error.localizedDescription)")
}

5.squared() // Output: 25