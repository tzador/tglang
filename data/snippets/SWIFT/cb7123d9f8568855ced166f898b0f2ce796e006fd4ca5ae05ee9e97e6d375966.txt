//This is a function that takes in an optional array of integers and an optional closure as parameters and returns an optional String
//This function uses Swift's functional programming capabilities to perform operations on the given parameters
func manipulateArray(array: [Int]?, closure: ((Int) -> Int)?) -> String? {
  
    //Unwrapping the optional array and checking for nil values
    guard let array = array else { return nil }
    
    //Using Swift's map function to apply the given closure on each element of the array
    let manipulatedArray = array.map { closure?($0) }
    
    //Using Swift's reduce function to combine all the elements of the array into a single optional String
    let resultString = manipulatedArray.reduce("", { acc, curr -> String? in
        guard let acc = acc, let curr = curr else { return nil }
        return "\(acc) \(curr)"
    })
    
    return resultString
}

//Example usage of the function with an optional array and a closure that multiplies each element by 2
let exampleArray: [Int]? = [1, 2, 3, 4]
let output = manipulateArray(array: exampleArray) { $0 * 2 }

//Output:
print(output) // Optional("2 4 6 8")