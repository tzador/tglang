// This code snippet generates a maze using a recursive backtracking algorithm
let gridSize = 20
var cells = Array(repeating: Array(repeating: "  ", count: gridSize), count: gridSize)

// Function to check if the given cell is a valid one to move in
func isValidCell(_ row: Int, _ col: Int) -> Bool {
    if row < 0 || row >= gridSize || col < 0 || col >= gridSize {
        return false
    }
    return true
}

// Function to check if all cells have been visited
func allCellsVisited(_ visited: [[Bool]]) -> Bool {
    for i in 0..<visited.count {
        for j in 0..<visited[i].count {
            if !visited[i][j] {
                return false
            }
        }
    }
    return true
}

// Recursive function to generate the maze
func generateMaze(_ row: Int, _ col: Int, _ visited: inout [[Bool]]) {
    visited[row][col] = true

    // Possible directions to move in from the current cell
    let possibleDirections = [[row, col-1], [row, col+1], [row-1, col], [row+1, col]]

    // Randomizing the directions to avoid creating long straight paths
    var shuffledDirections = possibleDirections.shuffled()

    for direction in shuffledDirections {
        // Checking if the cell in the chosen direction is a valid one to move in
        if isValidCell(direction[0], direction[1]) && !visited[direction[0]][direction[1]] {
            // Creating a path between the current cell and the chosen direction
            cells[row*2+1][col*2+1] = "  "
            cells[(row*2+1)+(direction[0]-row)][(col*2+1)+(direction[1]-col)] = "  "
            generateMaze(direction[0], direction[1], &visited)
        }
    }

    // If all cells have been visited, mark the starting and ending points
    if allCellsVisited(visited) {
        cells[1][0] = "S "
        cells[(gridSize * 2)-1][(gridSize * 2)-2] = "E "
    }
}

// Initializing the visited matrix and starting the maze generation from top left cell
var visited = Array(repeating: Array(repeating: false, count: gridSize), count: gridSize)
generateMaze(0, 0, &visited)

// Printing the completed maze
for row in 0..<gridSize*2 {
    for col in 0..<gridSize*2 {
        print(cells[row][col], terminator: "")
    }
    print()
}