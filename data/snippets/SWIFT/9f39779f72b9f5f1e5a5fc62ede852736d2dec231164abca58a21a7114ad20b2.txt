let baseURL = URL(string: "https://example.com")! // Declares and initializes a constant of type URL with a specified base URL.

struct User: Codable { // Defines a structure named User that conforms to the Codable protocol.
    let id: Int // Declares a constant property for the user's ID.
    let name: String // Declares a constant property for the user's name.
    let email: String // Declares a constant property for the user's email.
    
    enum CodingKeys: String, CodingKey { // Defines an enumeration that conforms to the String and CodingKey protocols.
        case id // Defines a "raw" value without a string initializer.
        case name // Defines a "raw" value without a string initializer.
        case email // Defines a "raw" value without a string initializer.
    }
    
    init(from decoder: Decoder) throws { // Customizes the initialization process for the User structure when decoding from a string into an instance of User.
        let container = try decoder.container(keyedBy: CodingKeys.self) // Creates a container to hold the values associated with the CodingKeys enumeration.
        id = try container.decode(Int.self, forKey: .id) // Uses the decode method to retrieve the associated value for the "id" key.
        name = try container.decode(String.self, forKey: .name) // Uses the decode method to retrieve the associated value for the "name" key.
        email = try container.decode(String.self, forKey: .email) // Uses the decode method to retrieve the associated value for the "email" key.
    }
    
    func encode(to encoder: Encoder) throws { // Customizes the encoding process for the User structure when encoding from an instance of User into a string.
        var container = encoder.container(keyedBy: CodingKeys.self) // Creates a container to hold the values associated with the CodingKeys enumeration.
        try container.encode(id, forKey: .id) // Uses the encode method to associate the id with its respective key in the container.
        try container.encode(name, forKey: .name) // Uses the encode method to associate the name with its respective key in the container.
        try container.encode(email, forKey: .email) // Uses the encode method to associate the email with its respective key in the container.
    }
}

let user = User(id: 1, name: "John Doe", email: "johndoe@example.com") // Declares and initializes an instance of the User structure with the given properties.
let encoder = JSONEncoder() // Initializes an instance of the JSONEncoder class.
let data = try encoder.encode(user) // Uses the encode method to convert the user instance into a JSON object and stores it in a constant called data.
let json = String(data: data, encoding: .utf8) // Converts the data into a string using the specified encoding.
print(json!) // Prints the JSON string representing the user object.