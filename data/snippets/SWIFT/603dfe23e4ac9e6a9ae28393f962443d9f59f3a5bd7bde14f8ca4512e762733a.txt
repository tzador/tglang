/* This is a complex code snippet in Swift that creates a binary search tree and performs a pre-order traversal on it */ 

class Node {
    var value: Int
    var leftChild: Node?
    var rightChild: Node?
    
    init(value: Int) {
        self.value = value
    }
}

class BinaryTree {
    var root: Node?
    
    // Function to insert a new node into the tree
    func insert(value: Int) {
        let newNode = Node(value: value)
        
        // If tree is empty, set new node as root
        if root == nil {
            root = newNode
        } else {
            var current = root
            var parent: Node?
            
            // Loop until the correct position is found
            while current != nil {
                parent = current
                
                // If new node's value is less than current node's value, go to left child
                if value < current!.value {
                    current = current!.leftChild
                    
                    // If left child is null, insert new node
                    if current == nil {
                        parent!.leftChild = newNode
                    }
                }
                // If new node's value is greater than current node's value, go to right child
                else if value > current!.value {
                    current = current!.rightChild
                    
                    // If right child is null, insert new node
                    if current == nil {
                        parent!.rightChild = newNode
                    }
                }
            }
        }
    }
    
    // Function to perform a pre-order traversal starting from the root node
    func preOrderTraversal(node: Node?) {
        guard let current = node else { return }
        
        print(current.value)
        preOrderTraversal(node: current.leftChild)
        preOrderTraversal(node: current.rightChild)
    }
}

// Create an instance of the binary tree
let binaryTree = BinaryTree()

// Insert nodes with values of 5, 3, 7, 1, 4, 6, and 9
binaryTree.insert(value: 5)
binaryTree.insert(value: 3)
binaryTree.insert(value: 7)
binaryTree.insert(value: 1)
binaryTree.insert(value: 4)
binaryTree.insert(value: 6)
binaryTree.insert(value: 9)

// Perform a pre-order traversal on the binary tree, starting from the root node
binaryTree.preOrderTraversal(node: binaryTree.root)