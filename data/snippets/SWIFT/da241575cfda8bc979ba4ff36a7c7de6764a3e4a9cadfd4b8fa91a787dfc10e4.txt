// This is a complex sorting function in Swift
func mergeSort<T: Comparable>(_ array: [T]) -> [T] {
    guard array.count > 1 else { return array }

    let middle = array.count / 2
    let left = mergeSort(Array(array[..<middle]))
    let right = mergeSort(Array(array[middle..<array.count]))

    return merge(left, right)
}

// Helper function for merging two sorted arrays
func merge<T: Comparable>(_ leftArray: [T], _ rightArray: [T]) -> [T] {
    var mergedArray: [T] = []
    var leftIndex = 0
    var rightIndex = 0

    while leftIndex < leftArray.count && rightIndex < rightArray.count {
        if leftArray[leftIndex] < rightArray[rightIndex] {
            mergedArray.append(leftArray[leftIndex])
            leftIndex += 1
        } else if leftArray[leftIndex] > rightArray[rightIndex] {
            mergedArray.append(rightArray[rightIndex])
            rightIndex += 1
        } else {
            mergedArray.append(leftArray[leftIndex])
            leftIndex += 1
            mergedArray.append(rightArray[rightIndex])
            rightIndex += 1
        }
    }

    while leftIndex < leftArray.count {
        mergedArray.append(leftArray[leftIndex])
        leftIndex += 1
    }

    while rightIndex < rightArray.count {
        mergedArray.append(rightArray[rightIndex])
        rightIndex += 1
    }

    return mergedArray
}

// Example usage of the mergeSort function
let numbers = [5, 2, 8, 1, 9, 3, 6, 4, 7, 10]
let sortedNumbers = mergeSort(numbers) // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]