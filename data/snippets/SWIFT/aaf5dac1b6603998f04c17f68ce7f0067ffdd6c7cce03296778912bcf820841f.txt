// This is a function that calculates the nth Fibonacci number recursively
func fibonacci(_ n: Int) -> Int {
    if n <= 1 {
        return n
    }
    return fibonacci(n - 1) + fibonacci(n - 2)
}

// This is a simple class with properties and a function
class Person {
    let name: String
    var age: Int
    
    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
    
    func sayHello() {
        print("Hello, my name is \(name) and I am \(age) years old.")
    }
}

// This is a higher-order function that filters an array based on a given condition
let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
let evenNumbers = numbers.filter({ $0 % 2 == 0 })

// This is a switch statement with multiple cases and a default case
let fruit = "apple"
switch fruit {
    case "apple":
        print("It's an apple")
    case "orange":
        print("It's an orange")
    case "banana":
        print("It's a banana")
    default:
        print("I don't know what fruit this is")
}

// This is a computed property that returns the average of an array of numbers
extension Array where Element == Int {
    var average: Double {
        get {
            var total = 0
            for number in self {
                total += number
            }
            return Double(total) / Double(self.count)
        }
    }
}

// This is a generic Queue structure
struct Queue<T> {
    private var items: [T] = []
    
    mutating func enqueue(_ item: T) {
        items.append(item)
    }
    
    mutating func dequeue() -> T? {
        guard !items.isEmpty else { return nil }
        return items.removeFirst()
    }
    
    func peek() -> T? {
        return items.first
    }
    
    var isEmpty: Bool {
        return items.isEmpty
    }
    
    var size: Int {
        return items.count
    }
}

// This is an example of using a Queue to store a list of tasks
var taskQueue = Queue<String>()
taskQueue.enqueue("Wash dishes")
taskQueue.enqueue("Do laundry")
taskQueue.enqueue("Buy groceries")

while !taskQueue.isEmpty {
    if let task = taskQueue.dequeue() {
        print("Completing task: \(task)")
    }
}