class ComplexNumber {
    // defining properties to store real and imaginary components
    var real: Double = 0.0
    var imaginary: Double = 0.0
    
    // initializers for real and imaginary components
    init(real: Double, imaginary: Double) {
        self.real = real
        self.imaginary = imaginary
    }
    
    // function to add two complex numbers
    func add(complex1: ComplexNumber, complex2: ComplexNumber) -> ComplexNumber {
        let sumReal = complex1.real + complex2.real
        let sumImaginary = complex1.imaginary + complex2.imaginary
        return ComplexNumber(real: sumReal, imaginary: sumImaginary)
    }
    
    // function to subtract two complex numbers
    func subtract(complex1: ComplexNumber, complex2: ComplexNumber) -> ComplexNumber {
        let differenceReal = complex1.real - complex2.real
        let differenceImaginary = complex1.imaginary - complex2.imaginary
        return ComplexNumber(real: differenceReal, imaginary: differenceImaginary)
    }
    
    // function to multiply two complex numbers
    func multiply(complex1: ComplexNumber, complex2: ComplexNumber) -> ComplexNumber {
        let productReal = complex1.real * complex2.real - complex1.imaginary * complex2.imaginary
        let productImaginary = complex1.real * complex2.imaginary + complex1.imaginary * complex2.real
        return ComplexNumber(real: productReal, imaginary: productImaginary)
    }
    
    // function to divide two complex numbers
    func divide(complex1: ComplexNumber, complex2: ComplexNumber) -> ComplexNumber {
        let denominator = pow(complex2.real, 2) + pow(complex2.imaginary, 2)
        let quotientReal = (complex1.real * complex2.real + complex1.imaginary * complex2.imaginary) / denominator
        let quotientImaginary = (complex1.imaginary * complex2.real - complex1.real * complex2.imaginary) / denominator
        return ComplexNumber(real: quotientReal, imaginary: quotientImaginary)
    }
    
    // function to calculate the magnitude of a complex number
    func magnitude(complex: ComplexNumber) -> Double {
        return sqrt(pow(complex.real, 2) + pow(complex.imaginary, 2))
    }
    
    // function to calculate the conjugate of a complex number
    func conjugate(complex: ComplexNumber) -> ComplexNumber {
        return ComplexNumber(real: complex.real, imaginary: -complex.imaginary)
    }
    
    // function to calculate the polar form of a complex number
    func polarForm(complex: ComplexNumber) -> (magnitude: Double, angle: Double) {
        let magnitude = self.magnitude(complex: complex)
        let angle = atan2(complex.imaginary, complex.real)
        return (magnitude, angle)
    }
}