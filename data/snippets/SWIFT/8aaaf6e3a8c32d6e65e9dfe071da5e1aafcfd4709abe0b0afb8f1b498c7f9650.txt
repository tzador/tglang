// Define a class with a generic type T
class LinkedList<T> {
    
    // Define a private node class to store data and a reference to the next node
    private class Node {
        var data: T
        var next: Node?
        
        init(_ data: T) {
            self.data = data
        }
    }
    
    // Define head and tail nodes to keep track of the first and last nodes in the linked list
    private var head: Node?
    private var tail: Node?
    
    // Define a method to add a new node to the end of the linked list
    func addNode(data: T) {
        let newNode = Node(data)
        if let tail = tail {
            tail.next = newNode
        } else {
            head = newNode
        }
        tail = newNode
    }
    
    // Define a method to insert a new node at a particular index in the linked list
    func insertNode(data: T, at index: Int) {
        let newNode = Node(data)
        
        // If index is 0, insert the new node as the head node
        if index == 0 {
            newNode.next = head
            head = newNode
            return
        }
        
        // Initialize a variable to keep track of the current node
        var currentNode = head
        // Initialize a variable to keep track of the previous node
        var previousNode: Node? = nil
        
        // Iterate through the linked list until the desired index is reached
        for _ in 1..<index {
            previousNode = currentNode
            currentNode = currentNode?.next
        }
        
        // Connect the new node to the next node, and the previous node to the new node
        newNode.next = currentNode
        previousNode?.next = newNode
    }
    
    // Define a method to remove the node at a particular index
    func removeNode(at index: Int) {
        
        // If index is 0, remove the head node by setting the next node as the new head
        if index == 0 {
            head = head?.next
            return
        }
        
        // Initialize a variable to keep track of the current node
        var currentNode = head
        // Initialize a variable to keep track of the previous node
        var previousNode: Node? = nil
        
        // Iterate through the linked list until the desired index is reached
        for _ in 1..<index {
            previousNode = currentNode
            currentNode = currentNode?.next
        }
        
        // Remove the current node by connecting the previous node to the next node
        previousNode?.next = currentNode?.next
    }
    
    // Define a method to print all the elements in the linked list
    func printAllElements() {
        var currentNode = head
        while let node = currentNode {
            print(node.data)
            currentNode = currentNode?.next
        }
    }
}

// Example usage:

// Initialize a linked list with type Int
let linkedList = LinkedList<Int>()

// Add a few nodes to the linked list
linkedList.addNode(data: 5)
linkedList.addNode(data: 7)
linkedList.addNode(data: 9)

// Insert a new node at index 1
linkedList.insertNode(data: 8, at: 1)

// Remove the node at index 2
linkedList.removeNode(at: 2)

// Print all the elements in the linked list
linkedList.printAllElements()

// Output: 5, 8, 9