// This code snippet shows how to implement a binary search algorithm in Swift

// Create a function that takes in an array of integers and a target value
func binarySearch(array: [Int], target: Int) -> Int {

    // Create variables for the low and high indices of the array
    var low = 0
    var high = array.count - 1
    
    // Loop until low index is greater than high index, indicating target value is not in array
    while low <= high {
        
        // Find the mid point of the array
        let mid = (low + high) / 2
        
        // Check if the target value is at the mid point
        if array[mid] == target {
            return mid // Return the index of the target value
        } else if array[mid] > target { // If target value is smaller than mid point, search the left half of the array
            high = mid - 1
        } else { // If target value is larger than mid point, search the right half of the array
            low = mid + 1
        }
    }
    
    return -1 // Target value not found in array, return -1 
}

// Initialize an array and target value for testing
let array = [1, 3, 5, 7, 9, 11, 13, 15]
let target = 9

// Call the binarySearch function and print the result
print("Index of target value in the array is: \(binarySearch(array: array, target: target))")

// Output: Index of target value in the array is: 4