/// A struct representing a 2D vector
struct Vector2D {
    var x: Double
    var y: Double

    /// The magnitude of the vector
    var magnitude: Double {
        return sqrt(x * x + y * y)
    }

    /// The normalized version of the vector
    var normalized: Vector2D {
        let mag = magnitude
        if mag != 0 {
            return Vector2D(x: x / mag, y: y / mag)
        } else {
            return Vector2D(x: 0, y: 0)
        }
    }

    /**
     * Initializer for the struct
     * - parameters:
        - x: The x coordinate of the vector
        - y: The y coordinate of the vector
     */ 
    init(x: Double, y: Double) {
        self.x = x
        self.y = y
    }

    /// Adds two vectors together
    static func + (left: Vector2D, right: Vector2D) -> Vector2D {
        return Vector2D(x: left.x + right.x, y: left.y + right.y)
    }

    /// Subtracts one vector from another
    static func - (left: Vector2D, right: Vector2D) -> Vector2D {
        return Vector2D(x: left.x - right.x, y: left.y - right.y)
    }

    /// Multiplies a vector by a scalar value
    static func * (left: Vector2D, right: Double) -> Vector2D {
        return Vector2D(x: left.x * right, y: left.y * right)
    }

    /// Divides a vector by a scalar value
    static func / (left: Vector2D, right: Double) -> Vector2D {
        return Vector2D(x: left.x / right, y: left.y / right)
    }

    /// Calculates the dot product of two vectors
    static func dotProduct(_ first: Vector2D, _ second: Vector2D) -> Double {
        return first.x * second.x + first.y * second.y
    }

    /// Calculates the cross product of two vectors
    static func crossProduct(_ first: Vector2D, _ second: Vector2D) -> Double {
        return first.x * second.y - first.y * second.x
    }
}

// Example usage
let vector1 = Vector2D(x: 2.5, y: 4.8)
let vector2 = Vector2D(x: 1.3, y: -0.8)

let addedVector = vector1 + vector2
let subtractedVector = vector1 - vector2
let scaledVector = vector1 * 3.0
let normalizedVector = vector1.normalized
let dotProduct = Vector2D.dotProduct(vector1, vector2)
let crossProduct = Vector2D.crossProduct(vector1, vector2)

// Output:
// addedVector = Vector2D(x: 3.8, y: 4.0)
// subtractedVector = Vector2D(x: 1.2, y: 5.6)
// scaledVector = Vector2D(x: 7.5, y: 14.4)
// normalizedVector = Vector2D(x: 0.5105740188068769, y: 0.8595974630228327)
// dotProduct = 2.1
// crossProduct = 2.2