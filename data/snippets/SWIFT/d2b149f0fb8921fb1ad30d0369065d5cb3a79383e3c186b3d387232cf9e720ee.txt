// This is a Swift code snippet using structs and protocols
// It creates a Customer struct and a ShoppingCart protocol
struct Customer {
    var name: String
    var email: String
    var address: String
    var shoppingCart: ShoppingCart?
}

protocol ShoppingCart {
    var items: [String: Int] { get }
    
    mutating func addItem(item: String, quantity: Int)
    func calculateTotal() -> Double
}

// This extension implements the functions of the ShoppingCart protocol
extension ShoppingCart {
    mutating func addItem(item: String, quantity: Int) {
        if var currentQuantity = items[item] {
            currentQuantity += quantity
            items[item] = currentQuantity
        } else {
            items[item] = quantity
        }
    }
    
    func calculateTotal() -> Double {
        var total: Double = 0.0
        for (item, quantity) in items {
            var itemPrice: Double = 0.0
            switch item {
            case "hat":
                itemPrice = 19.99
            case "shirt":
                itemPrice = 29.99
            case "pants":
                itemPrice = 39.99
            default:
                itemPrice = 0.0
            }
            total += itemPrice * Double(quantity)
        }
        
        return total
    }
}

// This is an example of using the Customer struct and ShoppingCart protocol
var customer1 = Customer(name: "John", email: "john@example.com", address: "1234 Main St", shoppingCart: nil)

customer1.shoppingCart = ShoppingCart(items: [:])
customer1.shoppingCart?.addItem(item: "hat", quantity: 2)
customer1.shoppingCart?.addItem(item: "shirt", quantity: 3)
customer1.shoppingCart?.addItem(item: "pants", quantity: 1)

let total = customer1.shoppingCart?.calculateTotal() ?? 0.0