// Create a struct to represent a Person
struct Person {
    var name: String
    var age: Int
    var favoriteColors: [String]
    
    // A nested enum to represent different types of jobs
    enum Job {
        case programmer, teacher, doctor, lawyer, chef
    }
    
    // A method to introduce the person and their job
    func introduce(job: Job) {
        switch job {
            case .programmer:
                print("Hi, my name is \(name) and I am a programmer.")
            case .teacher:
                print("Hi, my name is \(name) and I am a teacher.")
            case .doctor:
                print("Hi, my name is \(name) and I am a doctor.")
            case .lawyer:
                print("Hi, my name is \(name) and I am a lawyer.")
            case .chef:
                print("Hi, my name is \(name) and I am a chef.")
        }
    }
    
    // A computed property to calculate average age of favorite colors
    var averageAgeOfColors: Double {
        var totalAge = 0
        for color in favoriteColors {
            totalAge += age
        }
        return Double(totalAge) / Double(favoriteColors.count)
    }
}

// Create an instance of the Person struct
var john = Person(name: "John", age: 30, favoriteColors: ["blue", "green", "yellow"])

// Call the introduce method with a random job
john.introduce(job: .doctor)

// Print the average age of their favorite colors
print(john.averageAgeOfColors)