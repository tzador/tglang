/* 
This code snippet is a function in Swift that takes in an array of integers and a target sum.
If the target sum can be achieved by adding any two numbers in the array, it returns them in a tuple.
If not, it returns nil.
*/

func findTwoSum(numbers: [Int], targetSum: Int) -> (Int, Int)? {
    // Initialize a dictionary to store the complement (targetSum - currentNum) and its index as key-value pairs
    var complementIndices = [Int: Int]()
    
    // Iterate through the array of numbers
    for (index, num) in numbers.enumerated() {
        // Check if the current num is already a complement in the dictionary
        if let complementIndex = complementIndices[num] {
            // If yes, return the indices of the two numbers that add up to the target sum
            return (index, complementIndex)
        } else {
            // If not, add the complement of the current num and its index as a key-value pair
            complementIndices[targetSum - num] = index
        }
    }
    // Return nil if no match was found
    return nil
}

// Example usage
let numbers = [2, 4, 6, 8, 10]
let targetSum = 12

if let result = findTwoSum(numbers: numbers, targetSum: targetSum) {
    print("The two numbers that add up to \(targetSum) are \(numbers[result.0]) and \(numbers[result.1])")
} else {
    print("No two numbers in the array add up to the target sum of \(targetSum)")
}