/* This code snippet is an implementation of a binary search tree in Swift */

// Node class to represent a node in the tree
class Node<T> {
    var value: T
    var leftChild: Node?
    var rightChild: Node?

    init(value: T) {
        self.value = value
    }
}

// Binary Search Tree class
class BinarySearchTree<T: Comparable> {
    var root: Node<T>?

    // Insert method to add a new node to the tree
    func insert(_ value: T) {
        let newNode = Node(value: value)

        // If tree is empty, set new node as root
        guard let root = root else {
            self.root = newNode
            return
        }

        // Recursive function to find the appropriate leaf node for insertion
        func insertRecursively(currentNode: Node<T>) {
            if value < currentNode.value {   // If value is less than current node, go to the left subtree
                if let leftChild = currentNode.leftChild {   
                    insertRecursively(currentNode: leftChild)
                } else {    
                    currentNode.leftChild = newNode
                }
            } else {    // If value is greater than or equal to current node, go to the right subtree
                if let rightChild = currentNode.rightChild {
                    insertRecursively(currentNode: rightChild)
                } else {
                    currentNode.rightChild = newNode
                }
            }
        }

        // Call recursive function with root node
        insertRecursively(currentNode: root)
    }
}