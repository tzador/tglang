extension Array where Element: Comparable { // Creates an extension for the Array type with elements that conform to the comparable protocol
    mutating func bubbleSort() { // Creates a mutating function with no parameters, used to bubble sort the array
        var swapped = true // Creates and initializes a boolean variable for checking if elements have been swapped
        while swapped { // Executes the loop as long as elements have been swapped
            swapped = false // Resets the swapped variable to false
            for i in 0..<self.count - 1 { // Executes a loop through all elements of the array
                if self[i] > self[i+1] { // Checks if the current element is larger than the next element
                    self.swapAt(i, i+1) // Swaps the two elements using the built-in swapAt function
                    swapped = true // Sets the swapped variable to true, indicating that elements have been swapped
                }
            }
        }
    }
    func binarySearch(for value: Element, in range: Range<Int>) -> Int? { // Creates a function that performs a binary search on the array, taking in a value and a range as parameters
        guard range.lowerBound < range.upperBound else { // Checks if the lower bound is smaller than the upper bound, otherwise the search range is invalid and returns nil
            return nil
        }
        let middleIndex = range.lowerBound + (range.upperBound - range.lowerBound) / 2 // Calculates the middle index of the search range
        if self[middleIndex] == value { // Checks if the value at the middle index is equal to the search value
            return middleIndex // Returns the middle index if the value is found
        } else if self[middleIndex] > value { // Checks if the value at the middle index is greater than the search value
            return binarySearch(for: value, in: range.lowerBound..<middleIndex) // Calls the binarySearch function recursively with a new search range from the lower bound to the middle index 
        } else { // If the value is not found at the middle index and is not less than the middle index, it must be greater than the middle index
            return binarySearch(for: value, in: middleIndex+1..<range.upperBound) // Calls the binarySearch function recursively with a new search range from the middle index + 1 to the upper bound 
        }
    }
}

var numbers = [9,4,2,7,1,8,3,6,5] // Creates an array of integers
numbers.bubbleSort() // Calls the bubbleSort function on the array
print(numbers) // Prints the sorted array - [1, 2, 3, 4, 5, 6, 7, 8, 9]
let index = numbers.binarySearch(for: 7, in: 0..<numbers.count) // Performs a binary search on the sorted array for the value 7, returns the index where it is found
print(index) // Prints the index - 6