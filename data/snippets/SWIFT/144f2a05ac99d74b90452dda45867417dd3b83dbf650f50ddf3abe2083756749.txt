func mergeSort<T: Comparable>(_ array: [T]) -> [T] {
    guard array.count > 1 else { return array } // Checks if the array has more than one element
    let middleIndex = array.count / 2 // Finds the middle index of the array
    let leftArray = mergeSort(Array(array[..<middleIndex])) // Splits the array into two halves
    let rightArray = mergeSort(Array(array[middleIndex...]))
    // Merges and sorts the two halves recursively until it becomes a single sorted array
    return merge(leftArray, rightArray)
}

func merge<T: Comparable>(_ leftArray: [T], _ rightArray: [T]) -> [T] {
    var sortedArray: [T] = [] // Creates an empty array to hold the sorted elements
    var leftIndex = 0
    var rightIndex = 0
    // Compares and sorts elements from both arrays until one of them runs out of elements
    while leftIndex < leftArray.count && rightIndex < rightArray.count {
        if leftArray[leftIndex] <= rightArray[rightIndex] {
            sortedArray.append(leftArray[leftIndex]) // Adds the smaller element to the sorted array
            leftIndex += 1
        } else {
            sortedArray.append(rightArray[rightIndex])
            rightIndex += 1
        }
    }
    // Appends any remaining elements from both arrays to the sorted array
    sortedArray.append(contentsOf: leftArray[leftIndex...])
    sortedArray.append(contentsOf: rightArray[rightIndex...])
    return sortedArray
}

let unsortedArray = [5, 8, 2, 1, 9, 3, 7, 6, 4, 10]
let sortedArray = mergeSort(unsortedArray) // Calls the mergeSort function on the unsorted array
print(sortedArray) // Prints the sorted array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]