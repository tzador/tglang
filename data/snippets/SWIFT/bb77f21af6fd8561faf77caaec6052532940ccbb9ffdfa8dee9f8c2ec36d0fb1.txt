/// Function that returns the value of a number raised to the specified power.
/// - Parameter base: The base number.
/// - Parameter power: The power to raise the base number to.
/// - Returns: The result of the operation.
func power(_ base: Int, to power: Int) -> Int {
    /// Recursive function to calculate the power.
    /// - Parameter base: The base number.
    /// - Parameter power: The power to raise the base number to.
    /// - Returns: The result of the operation.
    func powerCalculator(_ base: Int, to power: Int) -> Int {
        if power == 0 {
            return 1
        }
        let temp = power / 2
        let result = powerCalculator(base, to: temp)
        if power % 2 == 0 {
            return result * result
        } else {
            return base * result * result
        }
    }
    return powerCalculator(base, to: power)
}

// Example usage:
power(5, to: 3) // Output: 125

//Explanation:
//The first function is the main function that takes two parameters and returns an Int.
//The second function is recursive and calculates the power using the given parameters.
//It uses an if statement to check for the base case (power is 0) and returns 1.
//Otherwise, it calculates the power using the recursive function and the temporary power (power / 2).
//If the power is even, it returns the result squared. If it is odd, it multiplies the result by the base before squaring it.
//The example usage shows how to call the function and the output it produces.