//Declaring a function that takes in two arguments
func addNumbers(a: Int, b: Int) -> Int {
    return a + b
}

//Declaring a closure that multiplies two numbers
var multiplyNumbers: (Int, Int) -> Int = { a, b in
    return a * b
}

//Declaring a class with a stored property and a method
class Person {
    var name: String
    
    init(name: String) {
        self.name = name
    }
    
    func introduce() {
        print("Hello, my name is \(name).")
    }
}

//Declaring an extension for the Int data type
extension Int {
    //Function to check if the number is even or odd
    func isEven() -> Bool {
        return self % 2 == 0
    }
    
    //Function to return the factorial of a number
    func factorial() -> Int {
        return self == 0 ? 1 : self * (self - 1).factorial()
    }
}

//Declaring an enum to represent different types of vehicles
enum Vehicle {
    case car, motorcycle, truck
}

//Declaring a protocol with a method and property requirements
protocol Driving {
    var licenseType: String { get set }
    func drive()
}

//Declaring a struct that conforms to the Driving protocol
struct Driver: Driving {
    var licenseType: String = "Class C"
    
    func drive() {
        print("Driving a \(licenseType) vehicle.")
    }
}