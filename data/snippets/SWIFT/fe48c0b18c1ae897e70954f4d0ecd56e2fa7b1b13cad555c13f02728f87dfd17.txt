struct Rectangle {
    var length: Int
    var width: Int

    init(_ length: Int, _ width: Int) {
        self.length = length
        self.width = width
    }
    
    var area: Int {
        return length * width
    }

    mutating func scaleBy(_ scale: Int) {
        length *= scale
        width *= scale
    }

    func printArea() {
        print("The area of the rectangle is \(area)")
    }
}

enum ShapeType {
    case rectangle(Int, Int)
    case square(Int)
}

func createShape(_ type: ShapeType) -> Rectangle {
    switch type {
    case .rectangle(let length, let width):
        return Rectangle(length, width)
    case .square(let side):
        return Rectangle(side, side)
    }
}

let rectangle = createShape(.rectangle(10, 5))
rectangle.printArea()

var square = createShape(.square(7))
square.printArea()

square.scaleBy(2)
square.printArea()