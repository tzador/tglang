//Define custom Error type for file processing errors
enum FileProcessingError: Error {
	//Error cases for different types of file processing errors
	case fileNotFound
	case invalidDataFormat
	case fileCorrupted
	
	//Computed property to return user-friendly description for each error case
	var localizedDescription: String {
		switch self {
			case .fileNotFound:
				return "File not found. Please check if the file exists and try again."
			case .invalidDataFormat:
				return "Invalid data format. Please check the file and make sure it is in the correct format."
			case .fileCorrupted:
				return "File corrupted. Please try again with a different file."
		}
	}
}

//Function to process a file at a given file path
func processFile(at path: String) throws {
	//Check if the file exists at the given path
	guard FileManager.default.fileExists(atPath: path) else {
		//Throw FileProcessingError with .fileNotFound case
		throw FileProcessingError.fileNotFound
	}
	
	//Read data from the file at the given path
	let data = try Data(contentsOf: URL(fileURLWithPath: path))
	
	//Convert data to String
	guard let stringData = String(data: data, encoding: .utf8) else {
		//Throw FileProcessingError with .invalidDataFormat case
		throw FileProcessingError.invalidDataFormat
	}
	
	//Process the string data
	//...
}

//Example of using the function
let filePath = "/Users/username/Documents/example.txt"
do {
	//Try to process the file at the given file path
	try processFile(at: filePath)
	//If successful, print a success message
	print("File processed successfully.")
} catch {
	//If an error is thrown, handle it accordingly
	switch error {
		case FileProcessingError.fileNotFound:
			print(error.localizedDescription)
		case FileProcessingError.invalidDataFormat:
			print(error.localizedDescription)
		case FileProcessingError.fileCorrupted:
			print(error.localizedDescription)
		default:
			print("An unexpected error occurred.")
	}
}