import Foundation

protocol Account {
    var accountNumber: String { get }
    var balance: Double { get set }
    func deposit(amount: Double)
    func withdraw(amount: Double) throws
}

class SavingsAccount: Account {
    var accountNumber: String
    var balance: Double
    
    init(accountNumber: String, balance: Double) {
        self.accountNumber = accountNumber
        self.balance = balance
    }
    
    func deposit(amount: Double) {
        balance += amount
    }
    
    func withdraw(amount: Double) throws {
        guard balance >= amount else {
            throw TransactionError.insufficientFunds
        }
        balance -= amount
    }
}

enum TransactionError: Error {
    case insufficientFunds
}

func transfer(from account1: Account, to account2: Account, amount: Double) {
    do {
        try account1.withdraw(amount: amount)
        account2.deposit(amount: amount)
        print("Transfer successful!")
    } catch {
        print(error)
    }
}

let savingsAccount = SavingsAccount(accountNumber: "123456789", balance: 500.0)
let checkingAccount = SavingsAccount(accountNumber: "987654321", balance: 1000.0)

transfer(from: savingsAccount, to: checkingAccount, amount: 200.0)
 
// Output: