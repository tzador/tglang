// A function that finds the square root of a given number
func findSquareRoot(of numberToFind: Double) -> Double {
    // Declare variables for lower and upper limits
    var lowerLimit: Double = 0
    var upperLimit = numberToFind
    
    // Loop until the difference between limits is less than 0.000001
    while upperLimit - lowerLimit > 0.000001 {
        // Calculate the midpoint between the limits
        let midpoint = (upperLimit + lowerLimit) / 2
        
        // If the square of the midpoint is equal to the number, return it as the square root
        if midpoint * midpoint == numberToFind {
            return midpoint
        }
        
        // If the square of the midpoint is less than the number, set it as the new lower limit
        else if midpoint * midpoint < numberToFind {
            lowerLimit = midpoint
        }
        
        // If the square of the midpoint is greater than the number, set it as the new upper limit
        else {
            upperLimit = midpoint
        }
    }
    
    // Once loop is finished, return the midpoint as the square root with a rounded accuracy of 6 decimal places
    return round(midpoint * 1000000) / 1000000
}

// Example call of the function
let squareRoot = findSquareRoot(of: 17)

// Outputs "4.123105" as the square root of 17
print(squareRoot)