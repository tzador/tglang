func mergeSort<T: Comparable>(_ array: [T], by comparison: (T, T) -> Bool) -> [T] {
    guard array.count > 1 else { return array }
    
    let middleIndex = array.count / 2
    let leftArray = mergeSort(Array(array[..<middleIndex]), by: comparison)
    let rightArray = mergeSort(Array(array[middleIndex...]), by: comparison)
    
    return merge(leftArray, rightArray, by: comparison)
}

func merge<T: Comparable>(_ leftArray: [T], _ rightArray: [T], by comparison: (T, T) -> Bool) -> [T] {
    var leftIndex = 0
    var rightIndex = 0
    
    var sortedArray: [T] = []
    
    while leftIndex < leftArray.count && rightIndex < rightArray.count {
        if comparison(leftArray[leftIndex], rightArray[rightIndex]) {
            sortedArray.append(leftArray[leftIndex])
            leftIndex += 1
        } else {
            sortedArray.append(rightArray[rightIndex])
            rightIndex += 1
        }
    }
    
    sortedArray.append(contentsOf: leftArray[leftIndex...])
    sortedArray.append(contentsOf: rightArray[rightIndex...])
    
    return sortedArray
}

let unsortedArray = [8, 5, 2, 6, 9, 3, 1, 4, 7]
let sortedArray = mergeSort(unsortedArray, by: <)
print(sortedArray) // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]