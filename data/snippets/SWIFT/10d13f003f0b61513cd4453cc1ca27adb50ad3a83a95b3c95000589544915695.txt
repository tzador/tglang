/// Function to calculate the nth Fibonacci number
/// - Parameters:
///   - n: The position of the desired Fibonacci number
///   - memo: A dictionary that stores previously calculated Fibonacci numbers
func fibonacci(_ n: Int, _ memo: inout [Int: Int]) -> Int {

    // Check if the Fibonacci number has already been calculated and stored in the dictionary
    if let result = memo[n] {
        return result
    }

    // Check if the position is 1 or 2 (first two Fibonacci numbers are 1)
    if n == 1 || n == 2 {
        return 1
    }

    // Otherwise, calculate the Fibonacci number recursively by calling the function
    let result = fibonacci(n - 1, &memo) + fibonacci(n - 2, &memo)

    // Store the calculated Fibonacci number in the dictionary for future use
    memo[n] = result

    return result
}

// Initialize the dictionary with the first two Fibonacci numbers
var memo: [Int: Int] = [1: 1, 2: 1]

// Generate the 10th Fibonacci number
let result = fibonacci(10, &memo)

// Output
print(result) // 55