/// Declaring a generic class with two type parameters and a property with a generic type
class Pair<T, U> {
    var first: T
    var second: U
    
    init(first: T, second: U) {
        self.first = first
        self.second = second
    }
}

/// Adding a protocol conformance with where clauses to restrict the types of T and U that can be used
extension Pair: CustomStringConvertible where T: CustomStringConvertible, U: CustomStringConvertible {
    var description: String {
        return "(\(first), \(second))"
    }
}

/// Creating an instance of the Pair class using a String for the first type and an Int for the second type
let pair = Pair<String, Int>(first: "Hello", second: 123)

/// Printing the description of the pair instance
print(pair.description) // Output: (Hello, 123)