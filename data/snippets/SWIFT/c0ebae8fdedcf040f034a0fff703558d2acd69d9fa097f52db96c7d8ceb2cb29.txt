// Creating a generic class
class GenericClass<T> {
    var value: T
    
    init(value: T) {
        self.value = value
    }
    
    // A function that takes in a generic type and returns a string
    func toString<U>(withType type: U.Type) -> String {
        return "Value \(value) is of type \(type)"
    }
}

// Creating an instance of the generic class with type Int
let myIntClass = GenericClass<Int>(value: 5)

// Calling the function on the instance
print(myIntClass.toString(withType: Int.self))

// Output: Value 5 is of type Int