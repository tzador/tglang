struct User {
  let name: String
  let age: Int
  let email: String
  var isActive: Bool
}

enum ProductType {
  case book (title: String, author: String, genre: String)
  case movie (title: String, director: String, genre: String)
  case game (title: String, developer: String, genre: String)
}

protocol ShoppingItem: CustomStringConvertible {
  var price: Double { get set }
  var quantity: Int { get set }
  var itemType: String { get }
  mutating func updatePrice(newPrice: Double)
}

extension ShoppingItem {
  mutating func updatePrice(newPrice: Double) {
    self.price = newPrice
  }
}

class Product: ShoppingItem {
  var price: Double
  var quantity: Int
  var itemType: String {
    return "Product"
  }
  
  init(price: Double, quantity: Int) {
    self.price = price
    self.quantity = quantity
  }
  
  var description: String {
    return "\(itemType) - \(price) x \(quantity)"
  }
}

struct Order {
  var items: [ShoppingItem]
  var checkoutTotal: Double {
    var total: Double = 0
    for item in items {
      total += item.price * Double(item.quantity)
    }
    return total
  }
}

let john = User(name: "John", age: 30, email: "john@example.com", isActive: true)
let product1 = Product(price: 9.99, quantity: 1)
let product2 = Product(price: 1.99, quantity: 2)

var order = Order(items: [product1, product2])

// Output: 
// A structure `User` with 4 properties - `name` of type `String`, `age` of type `Int`, `email` of type `String`, and `isActive` of type `Bool`.
// An enum `ProductType` with 3 cases - `book`, `movie`, and `game`, each with 3 properties - `title` of type `String`, `author`/`director`/`developer` of type `String`, and `genre` of type `String`.
// A protocol `ShoppingItem` with 3 properties - `price` of type `Double`, `quantity` of type `Int`, and `itemType` of type `String`. It also includes a mutating function `updatePrice()` that updates the `price` property with a new `Double` parameter and conforms to `CustomStringConvertible`.
// An extension to `ShoppingItem` that provides a default implementation for `updatePrice()`.
// A class `Product` that inherits from `ShoppingItem` and conforms to `CustomStringConvertible`. It has 2 properties - `price` of type `Double` and `quantity` of type `Int`. It also has a computed property `itemType` that returns a string with the value "Product". The initializer takes in a `price` and `quantity` as parameters.
// A structure `Order` with 2 properties - `items` which is an array of `ShoppingItem` objects and `checkoutTotal` which is a computed property that calculates the total price of all items in the `items` array.
// Instances of `User`, `Product`, and `Order` are created and stored in variables `john`, `product1`, `product2` and `order` respectively.
// End of code snippet.