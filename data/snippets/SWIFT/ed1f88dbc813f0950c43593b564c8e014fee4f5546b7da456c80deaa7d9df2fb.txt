func quickSort<T: Comparable>(_ array: inout [T], low: Int, high: Int) -> [T] {
    guard low < high else { return array }
    let pivot = array[high]
    
    var i = low - 1
    
    for j in low ..< high {
        if array[j] < pivot { // compare current element to pivot
            i += 1 // move i to right
            array.swapAt(i, j) // swap elements at i and j
        }
    }
    
    array.swapAt(i + 1, high) // place pivot at correct position
    
    let partitionIndex = i + 1
    quickSort(&array, low: low, high: partitionIndex - 1) // recursively sort elements before pivot
    quickSort(&array, low: partitionIndex + 1, high: high) // recursively sort elements after pivot
    
    return array
}

var unsortedArray = [6, 4, 9, 2, 1, 8, 3]
quickSort(&unsortedArray, low: 0, high: unsortedArray.count - 1)
print(unsortedArray) // [1, 2, 3, 4, 6, 8, 9]