// A function that calculates the nth Fibonacci number using recursion
func fibonacci(_ n: Int) -> Int {
    if (n == 0 || n == 1) {
        return n
    }
    
    return fibonacci(n-1) + fibonacci(n-2)
}

// A dictionary mapping numbers to their respective Fibonacci numbers
var fibDict = [Int:Int]()

// A function that calculates Fibonacci number using dynamic programming
func fibonacciDP(_ n: Int) -> Int {
    // Check if value is already in dictionary
    if let result = fibDict[n] {
        return result
    }
    
    // If not present, calculate using recursive function and store in dictionary
    let result = fibonacciDP(n-1) + fibonacciDP(n-2)
    fibDict[n] = result
    
    return result
}

// Calculate and print the 20th Fibonacci number using recursion
print("The 20th Fibonacci number using recursion is: \(fibonacci(20))")

// Calculate and print the 20th Fibonacci number using dynamic programming
print("The 20th Fibonacci number using dynamic programming is: \(fibonacciDP(20))")