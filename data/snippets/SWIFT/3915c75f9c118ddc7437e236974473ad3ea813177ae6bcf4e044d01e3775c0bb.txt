import Foundation

// Defining a custom error type
enum DataError: Error {
    case notFound
    case unableToRetrieve
    case corruptedData
}

// Creating a function that fetches data from a remote server
func fetchData(from url: URL, completionHandler: @escaping (Result<Data, DataError>) -> Void) {
    URLSession.shared.dataTask(with: url) { (data, response, error) in
        if let error = error {
            completionHandler(.failure(.unableToRetrieve))
        } else if let data = data {
            completionHandler(.success(data))
        } else {
            completionHandler(.failure(.corruptedData))
        }
    }.resume()
}

// Using the function to fetch data from a given URL
let url = URL(string: "https://www.example.com/data")!
fetchData(from: url) { (result) in
    switch result {
    case .success(let data):
        // Data successfully retrieved, process it here
        break
    case .failure(let error):
        switch error {
        case .notFound:
            // Handle "not found" error
            break
        case .unableToRetrieve:
            // Handle "unable to retrieve" error
            break
        case .corruptedData:
            // Handle "corrupted data" error
            break
        }
    }
}