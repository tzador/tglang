/// This function calculates the factorial of a given number
func factorial(_ num: Int) -> Int {
    // If the number is 0, then the factorial is 1
    if num == 0 {
        return 1
    }
    
    // If the number is 1, then the factorial is also 1
    if num == 1 {
        return 1
    }
    
    // Initialize a variable to store the result
    var result = 1
    
    // Loop through each number from 2 to the given number
    for i in 2...num {
        // Multiply the current result with the current number
        result *= i
    }
    
    // Return the final result
    return result
}

/// This function performs linear search on an array of integers and returns the index of the target element
func linearSearch(_ array: [Int], target: Int) -> Int {
    // Loop through each element in the array
    for (index, num) in array.enumerated() {
        // If the current element is equal to the target, return its index
        if num == target {
            return index
        }
    }
    
    // If the target element is not found, return -1
    return -1
}

/// This function calculates the area of a triangle using Heron's formula
func areaOfTriangle(side1: Double, side2: Double, side3: Double) -> Double {
    // Calculate the semi perimeter
    let s = (side1 + side2 + side3) / 2
    
    // Calculate the area using the semi perimeter and sides
    let area = sqrt(s * (s-side1) * (s-side2) * (s-side3))
    
    // Return the area as a Double value
    return area
}

/// This function calculates the power of a number
func power(base: Int, exponent: Int) -> Int {
    // Initialize a variable to store the result
    var result = 1
    
    // Perform exponentiation using a loop
    for _ in 0..<exponent {
        // Multiply the result with the base
        result *= base
    }
    
    // Return the final result
    return result
}