/* This function calculates the nth fibonacci number using recursion */
func fibonacci(n: Int) -> Int {
    if n <= 1 {
        return n
    } else {
        return fibonacci(n: n-1) + fibonacci(n: n-2)
    }
}

/* This function calculates the sum of two numbers */
func sum(_ a: Int, _ b: Int) -> Int {
    return a + b
}

/* This function calculates the factorial of a number using recursion */
func factorial(n: Int) -> Int {
    if n == 0 {
        return 1
    } else {
        return n * factorial(n: n-1)
    }
}

/* This function calculates the n-th number in the fibonacci sequence using a loop */
func fibonacciLoop(n: Int) -> Int {
    var num1 = 0, num2 = 1, count = 0

    while count < n {
        let sum = num1 + num2
        num1 = num2
        num2 = sum
        count += 1
    }

    return num1
}

/* This function calculates the power of a number using recursion */
func power(base: Int, exponent: Int) -> Int {
    if exponent == 0 {
        return 1
    } else {
        return base * power(base: base, exponent: exponent-1)
    }
}

/* This function checks if a number is prime or not */
func isPrime(_ num: Int) -> Bool {
    for i in 2..<num {
        if num % i == 0 {
            return false
        }
    }
    return true
}

/* This function calculates the factorial of a number using a loop */
func factorialLoop(n: Int) -> Int {
    var result = 1
    for i in 1...n {
        result *= i
    }
    return result
}