/// Struct representing a book in a library
struct Book {
    let title: String // the title of the book
    let author: String // the author of the book
    let genre: String // the genre of the book
    var numPages: Int // the number of pages in the book, can be updated
    
    /// Method for printing the book's information
    func printInfo() {
        print("Title: \(title)")
        print("Author: \(author)")
        print("Genre: \(genre)")
        print("Number of pages: \(numPages)")
    }
    
    /// Method for checking if two books are the same
    func isEqual(_ otherBook: Book) -> Bool {
        return self.title == otherBook.title && self.author == otherBook.author && self.genre == otherBook.genre && self.numPages == otherBook.numPages
    }
    
    /// Method for borrowing the book from the library (decrements numPages)
    mutating func borrow() {
        guard self.numPages > 0 else {
            print("This book is out of stock.")
            return
        }
        self.numPages -= 1
        print("Enjoy reading \(title) by \(author)!")
    }
}

// Create instances of books
var prideAndPrejudice = Book(title: "Pride and Prejudice", author: "Jane Austen", genre: "Romance", numPages: 279)
var harryPotter = Book(title: "Harry Potter and the Philosopher's Stone", author: "J.K. Rowling", genre: "Fantasy", numPages: 309)

// Print book information
prideAndPrejudice.printInfo()
harryPotter.printInfo()

// Check if two books are the same
prideAndPrejudice.isEqual(harryPotter)

// Borrow a book from the library
harryPotter.borrow() // Output: Enjoy reading Harry Potter and the Philosopher's Stone by J.K. Rowling!

// Update number of pages and borrow again
harryPotter.numPages = 300
harryPotter.borrow() // Output: Enjoy reading Harry Potter and the Philosopher's Stone by J.K. Rowling!