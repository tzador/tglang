func mergeSort<T: Comparable>(_ array: [T]) -> [T] {
    guard array.count > 1 else { return array }
 
    let middleIndex = array.count / 2
 
    let leftArray = mergeSort(Array(array[0..<middleIndex]))
    let rightArray = mergeSort(Array(array[middleIndex..<array.count]))
 
    return merge(leftArray, rightArray)
}
 
func merge<T: Comparable>(_ left: [T], _ right: [T]) -> [T] {
    var leftIndex = 0
    var rightIndex = 0
 
    var orderArray: [T] = []
 
    while leftIndex < left.count && rightIndex < right.count {
        let leftElement = left[leftIndex]
        let rightElement = right[rightIndex]
 
        if leftElement < rightElement {
            orderArray.append(leftElement)
            leftIndex += 1
        } else if leftElement > rightElement {
            orderArray.append(rightElement)
            rightIndex += 1
        } else {
            orderArray.append(leftElement)
            leftIndex += 1
            orderArray.append(rightElement)
            rightIndex += 1
        }
    }
 
    while leftIndex < left.count {
        orderArray.append(left[leftIndex])
        leftIndex += 1
    }
 
    while rightIndex < right.count {
        orderArray.append(right[rightIndex])
        rightIndex += 1
    }

    return orderArray
}
 
let sortedArray = mergeSort([3, 7, 8, 5, 2, 1, 9, 5, 4])
print(sortedArray)