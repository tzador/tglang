// Declare a generic class with constraints
class Container<T: Numeric> {
    var value: T // Declare a variable of generic type with a constraint
    
    init(value: T) {
        self.value = value
    }
    
    // A generic function with a constraint that returns a tuple of two generic types
    func transform<U: Numeric>(with transformFn: (T) -> U) -> (T, U) {
        let transformedValue = transformFn(value)
        
        return (value, transformedValue)
    }
}

// Create an instance of the Container class with an Integer type value
let container = Container<Int>(value: 5)

// Invoke the transform method with a closure that multiplies the value by 2
let result = container.transform { (value: Int) -> Int in
    return value * 2
}

// Print the result
print(result) // Output: (5, 10)