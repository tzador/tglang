// Class for storing and manipulating complex numbers
class ComplexNumber {
  private var real: Double // Real part of complex number
  private var imaginary: Double // Imaginary part of complex number
  
  // Constructor to initialize the complex number
  init(real: Double, imaginary: Double) {
    self.real = real
    self.imaginary = imaginary
  }
  
  // Function to add two complex numbers
  func add(complexNumber: ComplexNumber) -> ComplexNumber {
    let realSum = self.real + complexNumber.real // Compute sum of real parts
    let imaginarySum = self.imaginary + complexNumber.imaginary // Compute sum of imaginary parts
    return ComplexNumber(real: realSum, imaginary: imaginarySum) // Create new complex number with sum of parts
  }
  
  // Function to subtract two complex numbers
  func subtract(complexNumber: ComplexNumber) -> ComplexNumber {
    let realDiff = self.real - complexNumber.real // Compute difference of real parts
    let imaginaryDiff = self.imaginary - complexNumber.imaginary // Compute difference of imaginary parts
    return ComplexNumber(real: realDiff, imaginary: imaginaryDiff) // Create new complex number with difference of parts
  }
  
  // Function to multiply two complex numbers
  func multiply(complexNumber: ComplexNumber) -> ComplexNumber {
    let realProd = self.real * complexNumber.real - self.imaginary * complexNumber.imaginary // Compute real part of product
    let imaginaryProd = self.real * complexNumber.imaginary + self.imaginary * complexNumber.real // Compute imaginary part of product
    return ComplexNumber(real: realProd, imaginary: imaginaryProd) // Create new complex number with product of parts
  }
  
  // Function to divide two complex numbers
  func divide(complexNumber: ComplexNumber) -> ComplexNumber {
    let divisor = pow(complexNumber.real, 2) + pow(complexNumber.imaginary, 2) // Compute divisor for division
    let realQuot = (self.real * complexNumber.real + self.imaginary * complexNumber.imaginary) / divisor // Compute real part of quotient
    let imaginaryQuot = (self.imaginary * complexNumber.real - self.real * complexNumber.imaginary) / divisor // Compute imaginary part of quotient
    return ComplexNumber(real: realQuot, imaginary: imaginaryQuot) // Create new complex number with quotient of parts
  }
  
  // Function to compute the modulus of a complex number
  func modulus() -> Double {
    let squaredSum = pow(self.real, 2) + pow(self.imaginary, 2) // Compute squared sum of parts
    return sqrt(squaredSum) // Return square root of squared sum as modulus
  }
  
  // Function to compute the conjugate of a complex number
  func conjugate() -> ComplexNumber {
    return ComplexNumber(real: self.real, imaginary: -self.imaginary) // Create new complex number with same real part and negative imaginary part
  }
}