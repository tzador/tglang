/// An enumeration for different types of animals
enum AnimalType {
    case cat
    case dog
    case bird
    case reptile
}

/// A class representing an animal
class Animal {
    let name: String
    let type: AnimalType
    var age: Int
    var isFed: Bool

    init(name: String, type: AnimalType, age: Int) {
        self.name = name
        self.type = type
        self.age = age
        self.isFed = false
    }

    /// Method to feed the animal
    func feed() {
        if !isFed {
            isFed = true
            print("\(name) has been fed.")
        } else {
            print("\(name) is already fed.")
        }
    }

    /// Method to make the animal make a sound
    func makeSound() {
        switch type {
        case .cat:
            print("Meow!")
        case .dog:
            print("Woof!")
        case .bird:
            print("Chirp!")
        case .reptile:
            print("Hiss!")
        }
    }
}

/// A class representing a zoo
class Zoo {
    var animals: [Animal]

    init(animals: [Animal]) {
        self.animals = animals
    }

    /// Method to print the types of animals in the zoo
    func printAnimalTypes() {
        var types: Set<AnimalType> = []

        for animal in animals {
            types.insert(animal.type)
        }

        for type in types {
            print(type)
        }
    }
}

/// Creating animals and adding them to the zoo
let cat = Animal(name: "Fluffy", type: .cat, age: 5)
let dog = Animal(name: "Max", type: .dog, age: 3)
let bird = Animal(name: "Tweety", type: .bird, age: 1)
let reptile = Animal(name: "Slytherin", type: .reptile, age: 2)

let zoo = Zoo(animals: [cat, dog, bird, reptile])

/// Calling methods on animals in the zoo
cat.feed()
dog.feed()
bird.makeSound()
reptile.makeSound()

/// Printing the types of animals in the zoo
zoo.printAnimalTypes()