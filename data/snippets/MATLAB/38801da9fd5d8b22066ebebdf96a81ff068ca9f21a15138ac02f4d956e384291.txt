%% Load and preprocess data
 data = load('dataset.mat'); % load dataset from file
 X = data(:, 1:10); % extract first 10 columns as features
 y = data(:, 11); % extract last column as labels
 m = size(X, 1); % get number of training examples
 n = size(X, 2); % get number of features
 X = [ones(m, 1) X]; % add intercept term to features
 lambda = 0.1; % regularization parameter
 
 %% Initialize weight parameters
 initial_theta = zeros(n + 1, 1); % initialize theta to all zeros
 
 %% Define cost function
 function J = costFunction(X, y, theta, lambda)
    m = size(X, 1); % get number of training examples
    h = sigmoid(X * theta); % calculate hypothesis using sigmoid function
    reg_term = (lambda / (2 * m)) * sum(theta(2:end) .^ 2); % calculate regularization term
    J = (1 / m) * (-y' * log(h) - (1 - y') * log(1 - h)) + reg_term; % calculate cost function with regularization

%% Define gradient descent function
function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters, lambda)
    m = length(y); % get number of training examples
    J_history = zeros(num_iters, 1); % initialize matrix to store cost history
    for i = 1:num_iters % loop through specified number of iterations
        h = sigmoid(X * theta); % calculate hypothesis using sigmoid function
        reg_term = (lambda / m) * [0; theta(2:end)]; % calculate regularization term
        theta = theta - (alpha / m) * (X' * (h - y) + reg_term); % update theta using gradient descent
        J_history(i) = costFunction(X, y, theta, lambda); % calculate cost function and store in history matrix
    end
end

%% Test model and make predictions
% split data into training and testing sets
X_train = X(1:end-50, :);
y_train = y(1:end-50, :);
X_test = X(end-49:end, :);
y_test = y(end-49:end, :);
% train model using gradient descent with specified parameters
[theta, ~] = gradientDescent(X_train, y_train, initial_theta, 0.01, 1000, lambda);
% make predictions on testing set using trained theta values
h = sigmoid(X_test * theta);
predictions = (h >= 0.5);
% calculate accuracy of predictions
accuracy = mean(double(predictions == y_test)) * 100;