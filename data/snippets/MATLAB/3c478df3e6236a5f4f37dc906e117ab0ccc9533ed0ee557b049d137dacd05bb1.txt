%% Pre-processing
% Load data
dataset = load('data.csv');
% Extract features
features = dataset(:, 1:10);
% Normalize features
normalized_features = normalize(features);
% Add bias term
bias_features = [ones(size(normalized_features, 1), 1), normalized_features];
% Extract labels
labels = dataset(:, 11);

%% Cost function
% Initialize parameters
theta = zeros(size(bias_features, 2), 1);
% Calculate predictions
predictions = bias_features * theta;
% Calculate cost
cost = (1 / (2 * size(bias_features, 1))) * sum((predictions - labels).^2);

%% Gradient descent
% Set hyperparameters
alpha = 0.01; % learning rate
num_iters = 1000; % number of iterations
% Initialize cost history
J_history = zeros(num_iters, 1);
% Perform gradient descent
for iter = 1:num_iters
    % Update parameters
    theta = theta - (alpha / size(bias_features,1)) * bias_features' * (bias_features * theta - labels);
    % Calculate cost
    predictions = bias_features * theta;
    cost = (1 / (2 * size(bias_features, 1))) * sum((predictions - labels).^2);
    % Save cost in history
    J_history(iter) = cost;
end

%% Plot cost history
% Initialize plot
figure;
% Set plot properties
plot(1:num_iters, J_history, '-b', 'LineWidth', 2);
xlabel('Number of iterations');
ylabel('Cost');
title('Cost history');
legend('Cost');