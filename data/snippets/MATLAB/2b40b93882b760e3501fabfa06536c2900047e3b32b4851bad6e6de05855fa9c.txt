%{
This code snippet demonstrates a function that sorts an array in ascending order using the heapsort algorithm.
The heapify function is used to create a max heap from the input array, and the heapsort function uses this max heap to sort the array.
%}

function [sorted_array] = heapsort(input_array)

    % Create a max heap from the input array using the heapify function
    max_heap = heapify(input_array);
    % Initialize the variable to store the sorted array
    sorted_array = [];

    % Continue sorting until the heap is empty
    while(~isempty(max_heap))
        % Store the root (maximum value) of the heap in the sorted array
        sorted_array = [sorted_array, max_heap(1)];
        % Replace the root with the last element in the heap
        max_heap(1) = max_heap(end);
        % Remove the last element (now the duplicate root) from the heap
        max_heap(end) = [];
        % Check if the current root violates the max heap property
        if(length(max_heap) > 1)
            % Fix the heap by calling the max_heapify function
            max_heap = max_heapify(max_heap, 1);
        end
    end

    % Function to create a max heap from an input array
    function [max_heap] = heapify(input_array)
        % Initialize the max heap as the input array
        max_heap = input_array;
        % Calculate the index of the last parent node in the heap
        parent = floor(length(max_heap)/2);
        % Iterate through all parent nodes and fix the heap
        for i = parent:-1:1
            max_heap = max_heapify(max_heap, i);
        end
    end

    % Function to fix the max heap property at a given index
    function [max_heap] = max_heapify(input_array, index)
        % Calculate the left and right child indices of the input index
        left_child = 2*index;
        right_child = 2*index + 1;
        % Calculate the index of the maximum value among the current index and its children
        if(left_child <= length(input_array) && input_array(left_child) > input_array(index))
            max_index = left_child;
        else
            max_index = index;
        end
        if(right_child <= length(input_array) && input_array(right_child) > input_array(max_index))
            max_index = right_child;
        end
        % If the maximum value is not at the current index, swap the elements
        if(max_index ~= index)
            temp = input_array(index);
            input_array(index) = input_array(max_index);
            input_array(max_index) = temp;
            % Recursively fix the heap at the new index
            input_array = max_heapify(input_array, max_index);
        end
        % Store the modified heap
        max_heap = input_array;
    end

end

% Example usage of the heapsort function
unordered_array = [5, 9, 2, 1, 7, 3, 6, 8, 4];
sorted_array = heapsort(unordered_array)
% Output:
% sorted_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]