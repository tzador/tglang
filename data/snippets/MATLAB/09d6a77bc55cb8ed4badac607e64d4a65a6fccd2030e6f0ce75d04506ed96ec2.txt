%% Defining function to solve differential equation using Runge-Kutta method
% This function takes in the differential equation, initial conditions, step size,
% and number of iterations as inputs and outputs an array of solutions

function [x, y] = solveRK(func, init_cond, h, n)

    % Initializing arrays to store solutions
    x = zeros(1, n+1);
    y = zeros(1, n+1);

    % Setting initial conditions
    x(1) = init_cond(1);
    y(1) = init_cond(2);

    % Looping through each iteration
    for i = 1:n
        % Calculating k values (slope values) using the given function
        k1 = func(x(i), y(i));
        k2 = func(x(i) + h/2, y(i) + h/2*k1);
        k3 = func(x(i) + h/2, y(i) + h/2*k2);
        k4 = func(x(i) + h, y(i) + h*k3);

        % Calculating new x and y values using the Runge-Kutta formula
        x(i+1) = x(i) + h;
        y(i+1) = y(i) + (h/6)*(k1 + 2*k2 + 2*k3 + k4);
    end
end

% Example use of the function
% Defining the differential equation as a function handle
func = @(x, y) x + y^2;

% Setting the initial conditions, step size, and number of iterations
init_cond = [0, 1];
h = 0.1;
n = 10;

% Using the solveRK function to obtain the x and y solutions
[x, y] = solveRK(func, init_cond, h, n);

% Displaying the solutions in a table
disp("x values: ");
disp(x);
disp("y values: ");
disp(y);