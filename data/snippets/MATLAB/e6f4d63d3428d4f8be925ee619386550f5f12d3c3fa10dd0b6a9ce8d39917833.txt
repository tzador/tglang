%% Access Control System Simulation

% Define variables for the system
numTerms = 10;
maxInstructors = 5;
studentsPerInstructor = 25;
studentID = 1:500;
instructorID = 1:maxInstructors;

% Create arrays to store data on student and instructor access
studentAccess = zeros(numTerms, length(studentID));
instructorAccess = zeros(numTerms, length(instructorID));

% Run simulation for each term
for i = 1:numTerms
    
    % Determine number of instructors present in each term
    numInstructorsPresent = randi([1, maxInstructors]);
    
    % Generate random instructor IDs for current term
    randInstructorIDs = randperm(length(instructorID), numInstructorsPresent);
    
    % Assign instructor access for current term
    instructorAccess(i, randInstructorIDs) = 1;
    
    % Create arrays to store data on student attendance and ID checks
    studentAttendance = zeros(studentsPerInstructor, numInstructorsPresent);
    studentIDCheck = zeros(studentsPerInstructor, numInstructorsPresent);
    
    % Loop through each instructor present in current term
    for j = 1:numInstructorsPresent
        
        % Generate random student IDs for current instructor
        randStudentIDs = randperm(length(studentID), studentsPerInstructor);
        
        % Assign student attendance and ID checks for current instructor
        studentAttendance(:, j) = randi([0, 1], studentsPerInstructor, 1);
        studentIDCheck(:, j) = ismember(studentID, randStudentIDs);
        
        % Check if students passed both attendance and ID check
        passed = studentAttendance(:, j) & studentIDCheck(:, j);
        
        % Assign access to students who passed
        studentAccess(i, randStudentIDs(passed)) = 1;
    end
end

% Calculate overall access for each student
overallAccess = sum(studentAccess, 1) ./ numTerms;

% Print results
fprintf("Student ID\tOverall Access\n");
for i = 1:length(studentID)
    fprintf("%d\t\t%.2f\n", studentID(i), overallAccess(i));
end