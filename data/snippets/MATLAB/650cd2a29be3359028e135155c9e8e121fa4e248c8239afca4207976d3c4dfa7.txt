%% This code snippet demonstrates how to implement a Kalman filter on a noisy sinusoidal signal
% Initialization
N = 50; % Number of steps
x_noisy = zeros(1, N); % Initialize noisy signal vector
x_clean = sin(0:0.1:N*0.1); % Generate clean sinusoidal signal vector
for i = 1:N
    x_noisy(i) = x_clean(i) + 0.5*randn(); % Add Gaussian noise to signal
end

% Setup matrices for Kalman filter
A = [1, 0.1; 0, 1]; % State transition matrix
H = [1, 0]; % Observation matrix
Q = [0.01, 0; 0, 0.01]; % Process noise covariance matrix
R = 0.5; % Measurement noise covariance

% Initialization of filter parameters
x_hat = zeros(2, N+1); % State estimate
x_hat(:,1) = [0; 0]; % Initial state estimate
P = [1, 0; 0, 1]; % Initial state covariance matrix

% Kalman filter loop
for k = 1:N
    % Prediction step
    x_hat(:,k+1) = A*x_hat(:,k); % Predict state
    P = A*P*A' + Q; % Predict state covariance
    
    % Measurement update step
    K = P*H'/(H*P*H' + R); % Calculate Kalman gain
    z = x_noisy(k+1); % Measure noisy signal at current step
    x_hat(:,k+1) = x_hat(:,k+1) + K*(z - H*x_hat(:,k+1)); % Update state estimate
    P = (eye(2) - K*H)*P; % Update state covariance
end

% Plot results
t = 0:0.1:N*0.1; % Time vector
figure;
subplot(2,1,1);
plot(t,x_noisy,'b.',t,x_clean,'r'); % Plot noisy and clean signals
xlabel('Time');
ylabel('Signal');
legend('Noisy Signal', 'Clean Signal');

subplot(2,1,2);
plot(t,x_hat(1,2:end),'b.'); % Plot estimated signal
xlabel('Time');
ylabel('Signal Estimate');