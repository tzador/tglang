%%% This code snippet creates a function to find the roots of a polynomial using the bisection method, with a user-defined tolerance and maximum number of iterations %%%

function [root, iterations] = bisectionMethod(polyCoeff, a, b, tol, maxIter)
%%% This function takes in five input parameters: polyCoeff - coefficients of the polynomial (in descending order), a - lower bound of interval, b - upper bound of interval, tol - tolerance value, maxIter - maximum number of iterations allowed

%%% Initialize variables
iterations = 0;    %%% Number of iterations performed
fa = polyval(polyCoeff, a);    %%% Evaluate polynomial at lower bound
fb = polyval(polyCoeff, b);    %%% Evaluate polynomial at upper bound
if (fa*fb > 0)    %%% Check if initial bounds enclose a root
    error('The interval given does not enclose a root.');
end

%%% Loop until convergence or maximum number of iterations reached
while (abs(a-b) > tol) && (iterations < maxIter)
    c = (a+b)/2;    %%% Calculate midpoint
    fc = polyval(polyCoeff, c);    %%% Evaluate polynomial at midpoint
    if (fa*fc > 0)    %%% Check if root must be in (c,b)
        fa = fc;    %%% Update value of f(a)
        a = c;    %%% Update value of a
    elseif (fa*fc < 0)    %%% Check if root must be in (a,c)
        fb = fc;    %%% Update value of f(b)
        b = c;    %%% Update value of b
    else
        root = c;    %%% Exact root found
    end
    iterations = iterations + 1;    %%% Increment number of iterations
end
root = (a+b)/2;    %%% Approximate root found
return
end