%% Find the roots of a polynomial using the Muller's method
% Inputs:
% P - Vector of polynomial coefficients in descending order
% x1, x2, x3 - Initial guesses for the roots
% eps - Error tolerance
% maxIter - Maximum number of iterations
% Outputs:
% x - Vector of roots
function x = muller(P, x1, x2, x3, eps, maxIter)
    %% Initialization
    f = polyval(P, x1); % Calculate function value at x1
    g = polyval(P, x2); % Calculate function value at x2
    h = polyval(P, x3); % Calculate function value at x3
    iter = 0; % Iteration counter
    
    %% Muller's method
    while abs(x3-x2) > eps && iter < maxIter
        c = (x1 + x2)/2; % Calculate c
        if g^2 - 4*f*h < 0 % Check discriminant for complex roots
            % Calculate lambda for complex roots
            lambda1 = c - 2*f/(g + sqrt(g^2 - 4*f*h));
            lambda2 = c - 2*f/(g - sqrt(g^2 - 4*f*h));
            if abs(lambda1 - x1) > abs(lambda2 - x1)
                x3 = lambda1;
            else
                x3 = lambda2;
            end
            f = polyval(P, x3);
        else % Calculate lambda for real roots
            lambda = c - 2*g*(f-g)/(f-h-2*g);
            x3 = lambda;
            f = polyval(P, x3);
        end
        x1 = x2;
        x2 = x3;
        g = polyval(P, x2);
        h = polyval(P, x3);
        iter = iter + 1;
    end % end of while loop
    
    %% Output
    x = zeros(1, 2); % Initialize vector to store roots
    if abs(x3-x2) < eps && iter < maxIter
        % Calculate real roots using quadratic formula
        x(1) = (-g + sqrt(g^2 - 4*f*h))/(2*h);
        x(2) = (-g - sqrt(g^2 - 4*f*h))/(2*h);
    else
        % Calculate complex roots using complex conjugates
        x(1) = c - f/g;
        x(2) = conj(x(1));
    end
end % end of function