% This program uses the feeding vector algorithm to calculate the optimized
% distribution of food to a group of animals based on their energy needs.

% Initialize variables
N = 10; % number of animals
M = 5; % number of food sources
max_iter = 100; % maximum number of iterations
rng(1); % set the seed for random number generation

E_min = 5; % minimum energy requirement for each animal
E_max = 10; % maximum energy requirement for each animal
E_avg = (E_min + E_max)/2; % average energy requirement for each animal

F_min = 2; % minimum amount of food available at each source
F_max = 5; % maximum amount of food available at each source
F_total = F_min + (F_max - F_min)*rand(1,M); % total amount of food at each source

F_r = zeros(N,M); % initialize feeding matrix
F_r(1,:) = F_total./sum(F_total); % calculate initial feeding proportions based on total food available

iter = 1; % initialize iteration counter

% Start feeding vector algorithm
while iter <= max_iter
    
    % Calculate energy consumed by each animal
    E_consumed = sum(F_r.*E_avg, 2); % dot product of feeding matrix and average energy requirement
    
    % Calculate error between total energy consumed and total energy required
    E_error = sum(E_consumed) - N*E_avg; % sum of all energy consumed - total energy required
    
    % Initialize change vector
    dF = zeros(M,1);
    
    % Calculate change in feeding proportion for each source
    for j = 1:M
        dF(j) = -E_error*F_r(1,j)/E_consumed(1); % equation for change in feeding proportion for each source
    end
    
    % Update feeding proportions for all animals
    F_r(1,:) = F_r(1,:) + dF'; % transpose dF vector and add to initial feeding proportions
    
    % Normalize feeding proportions to ensure they sum to 1
    F_r(1,:) = F_r(1,:)./sum(F_r(1,:));
    
    iter = iter + 1; % increase iteration counter
end

% Display optimized feeding proportions
disp("Optimized feeding proportions:")
disp(F_r(1,:));