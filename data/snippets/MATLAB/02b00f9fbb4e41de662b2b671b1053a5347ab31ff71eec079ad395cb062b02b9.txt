%% Solving a system of non-linear equations using Newton's method

% Set initial guess for vector of unknowns
x = [1;2;3];

% Set maximum number of iterations and tolerance level
max_iter = 100;
tol = 1e-6;

% Define function handles for system of equations and its Jacobian
F = @(x)[x(1)^2 + x(2)^2 + x(3)^2 - 10; x(1) - x(2) + x(3) - 1; x(1)^3 + 3*x(2)^2 - x(3)^2 - 15];
J = @(x)[2*x(1), 2*x(2), 2*x(3); 1, -1, 1; 3*x(1)^2, 6*x(2), -2*x(3)];

% Initialize variables for iteration
iter = 0;
x_new = x;

while iter < max_iter
    
    % Evaluate function and Jacobian at current guess
    F_x = F(x_new);
    J_x = J(x_new);
    
    % Calculate Newton direction
    delta_x = -J_x\F_x;
    
    % Update guess
    x_new = x_new + delta_x;
    
    % Check for convergence
    if norm(delta_x) < tol
        break;
    end
    
    iter = iter + 1;
end

% Print solution if converged within maximum iterations
if iter == max_iter
    fprintf('Did not converge within maximum iterations.');
else
    fprintf('Solution: x = [%f; %f; %f]', x_new(1), x_new(2), x_new(3));
end