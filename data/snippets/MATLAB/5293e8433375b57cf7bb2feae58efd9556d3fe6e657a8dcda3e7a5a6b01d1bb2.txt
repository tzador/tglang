%% Solution to the N-body problem using Runge-Kutta method
% This code snippet solves the N-body problem, which involves
% predicting the movements and interactions of N celestial bodies
% under the influence of gravity, using the Runge-Kutta method.
% Parameters:
% - tspan: vector containing start and end time
% - r0: matrix containing initial positions of bodies
% - v0: matrix containing initial velocities of bodies
% - m: vector containing masses of bodies
% - G: gravitational constant
% - N: number of bodies
% - h: time step
% - tol: tolerance level for error
% Output:
% - t: vector containing time values
% - r: matrix containing positions of bodies at each time step

% Set initial values
t = tspan(1); % initial time
r = r0; % initial positions of bodies
v = v0; % initial velocities of bodies

% Initialize variables for RK4 method
k1 = zeros(3, N); % first RK4 step
k2 = zeros(3, N); % second RK4 step
k3 = zeros(3, N); % third RK4 step
k4 = zeros(3, N); % fourth RK4 step

% Calculate accelerations of bodies using Newton's law of gravitation
while t <= tspan(2)
    for i = 1:N
        a(i, :) = 0; % initialize acceleration for each body
        for j = 1:N
            if i ~= j
                % calculate distance between bodies
                r_ij = sqrt((r(1, j) - r(1, i))^2 + (r(2, j) - r(2, i))^2 + (r(3, j) - r(3, i))^2);
                % calculate acceleration using Newton's law of gravitation
                a(i, :) = a(i, :) + (G * m(j) * (r(j, :) - r(i, :))) / (r_ij^3);
            end
        end
        % Calculate RK4 steps
        k1(:, i) = v(:, i);
        k2(:, i) = v(:, i) + h * a(i, :) / 2;
        k3(:, i) = v(:, i) + h * a(i, :) / 2;
        k4(:, i) = v(:, i) + h * a(i, :);
        % Update positions and velocities
        r(:, i) = r(:, i) + (h / 6) * (k1(:, i) + 2 * k2(:, i) + 2 * k3(:, i) + k4(:, i));
        v(:, i) = v(:, i) + (h / 6) * (a(i, :));
    end
    % Update time
    t = t + h;
    % Check for error tolerance
    error = max(abs(v(:, :))); % calculate maximum velocity for any body
    if error > tol
        disp("Error tolerance exceeded, try reducing time step or increasing tolerance.");
        break;
    end
end

% Plot positions of bodies in 3D space
figure;
plot3(r(1, :), r(2, :), r(3, :));
title("N-body simulation using Runge-Kutta method");
xlabel("x coordinates");
ylabel("y coordinates");
zlabel("z coordinates");
grid on;