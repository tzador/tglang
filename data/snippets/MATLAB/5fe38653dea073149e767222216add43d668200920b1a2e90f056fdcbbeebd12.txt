function result = solvePDE(x, y)
% Solves a partial differential equation using finite difference method
% Inputs:
%   x: array of x values
%   y: array of y values
% Output:
%   result: 2d array containing the solution to the PDE

% Declare constants
M = 100; % Number of x grid points
N = 75; % Number of y grid points
h = 0.1; % x grid spacing
k = 0.2; % y grid spacing
iterations = 500; % Number of iterations for solving

% Initialize solution matrix
u = zeros(M,N); % u(x,y) matrix

% Set boundary conditions
u(1,:) = 0; % u(0,y) = 0 for all y
u(M,:) = sin(x); % u(10,y) = sin(x) for all y
u(:,1) = cos(y); % u(x,0) = cos(y) for all x
u(:,N) = 0; % u(x,5) = 0 for all x

% Solve PDE using finite difference method
for i = 2:M-1
    for j = 2:N-1
        u(i,j+1) = (k^2*u(i,j-1) + h^2*u(i+1,j) + h^2*u(i-1,j)) / ...
        (2*(h^2+k^2));
    end
end

% Perform iterations
for n = 1:iterations
    for i = 2:M-1
        for j = 2:N-1
            u(i,j) = (h^2 * (u(i+1,j) + u(i-1,j)) + k^2 * (u(i,j+1) + u(i,j-1))) / ...
            (2*(h^2+k^2));
        end
    end
end

% Output final solution
result = u;

end