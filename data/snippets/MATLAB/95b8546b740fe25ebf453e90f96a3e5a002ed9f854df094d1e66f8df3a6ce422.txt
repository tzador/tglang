% This code snippet performs image segmentation using the watershed algorithm
% Import the image to be segmented
img = imread('image.jpg');

% Convert the image to grayscale
gray = rgb2gray(img);

% Perform edge detection using the Sobel operator
edges = edge(gray, 'sobel');

% Create a marker matrix by computing the distance of pixels from the edges
D = bwdist(edges);

% Create a watershed segmentation mask by thresholding the distances
mask = D > 10;

% Compute the Euclidean gradient of the grayscale image
grad = imgradient(gray);

% Transform the gradient into a grayscale intensity map
grad = rescale(grad);

% Calculate the minimum and maximum values of the gradient map
grad_min = min(grad(:));
grad_max = max(grad(:));

% Use the gradient map as markers for the watershed algorithm
markers = imextendedmin(grad, grad_max);

% Perform the watershed algorithm using the markers and the mask
labels = watershed(imimposemin(grad, markers), 8);

% Show the segmented image
imshow(label2rgb(labels))