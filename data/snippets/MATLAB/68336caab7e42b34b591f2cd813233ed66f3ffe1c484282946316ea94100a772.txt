%%% Initialization %%%
clear all; % Clear all variables from workspace
clc; % Clear command window
close all; % Close all open figures

%%% Defining Constants %%%
g = 9.8; % Gravitational acceleration in m/s^2
m = 1; % Mass in kg
L = 1; % Length in m
c = 0.5; % Drag coefficient

%%% Calculating Trajectory %%%
tspan = [0 10]; % Time interval in seconds
y0 = [0 0 0 pi/4]; % Initial conditions in [x, xdot, y, ydot]
[T, Y] = ode45(@dynamicsFunc,tspan,y0); % Solving differential equations
theta = Y(:,4); % Extracting angle data from solution
x = Y(:,1); % Extracting x-coordinate data from solution
y = Y(:,3); % Extracting y-coordinate data from solution

%%% Plotting Trajectory %%%
figure()
subplot(2,1,1) % Dividing plot into subplots, first row
plot(x,y) % Plotting y against x
title('Projectile Trajectory') % Adding title to plot
xlabel('x (m)') % Adding x-axis label
ylabel('y (m)') % Adding y-axis label
axis equal % Setting axes to equal scale
grid on % Adding grid
subplot(2,1,2) % Dividing plot into subplots, second row
plot(T, theta*180/pi) % Plotting angle against time
title('Angle vs Time') % Adding title to plot
xlabel('Time (s)') % Adding x-axis label
ylabel('\theta(degrees)') % Adding y-axis label
grid on % Adding grid

%%% Defining Dynamics Function %%%
function dydt = dynamicsFunc(t,y)
    dydt = zeros(4,1); % Initializing solution vector
    dydt(1) = y(2); % xdot = xdot
    dydt(2) = -c/m*sqrt(y(2)^2+y(4)^2)*y(2); % xddot = -c/m*v*xdot
    dydt(3) = y(4); % ydot = ydot
    dydt(4) = -g-c/m*sqrt(y(2)^2+y(4)^2)*y(4); % yddot = -g-c/m*v*ydot
end