%% Newton's Method for Solving Nonlinear Equations
% This code implements Newton's method for finding the root of a nonlinear
% equation. First, a function is created that evaluates the equation at
% a given x-value. Then, the derivative of the function is calculated
% using symbolic differentiation. The main function iteratively updates 
% the guess for the root using the Newton's method formula until the 
% desired level of accuracy is achieved.

%% Define the function
% This function evaluates the given nonlinear equation at a given x-value.

function f = nonlinear_equation(x)
% Input: 
% x - initial guess for the root
% 
% Output: 
% f - function value at x

f = (x^2 - 4*x + sqrt(x)) + (2*x^2 - x^3); % Example nonlinear equation
end

%% Calculate the derivative
% The following code snippet uses symbolic differentiation to calculate the 
% derivative of the function created above. This is an important step in 
% Newton's method as it is used to update the guess for the root.

syms x; % Create symbolic variable
f_prime = diff(nonlinear_equation(x), x); % Calculate derivative of the function
f_prime = matlabFunction(f_prime); % Convert symbolic derivative to a function handle

%% Main function
% This is the main function that implements Newton's method for finding 
% the root of the given nonlinear equation. It iteratively updates the 
% guess for the root until the desired level of accuracy is achieved. 

function root = newtons_method(guess, tolerance)
% Inputs:
% guess - initial guess for the root
% tolerance - desired level of accuracy
%
% Output:
% root - final guess for the root

iterations = 0; % Counter for iterations
error = abs(nonlinear_equation(guess)); % Initial error
while error > tolerance % Loop until desired accuracy is achieved
    guess = guess - (nonlinear_equation(guess) / f_prime(guess)); % Update guess for the root
    error = abs(nonlinear_equation(guess)); % Calculate new error
    iterations = iterations + 1; % Update iteration counter
end

root = guess; % Final guess for the root
fprintf('Total iterations: %d\n', iterations) % Display total iterations
end

%% Call the main function
root = newtons_method(1, 1e-6) % Call the main function with an initial guess of 1 and a tolerance of 1e-6