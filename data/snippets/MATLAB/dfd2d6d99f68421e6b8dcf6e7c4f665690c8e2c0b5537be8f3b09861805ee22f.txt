% Initializing variables
x = 1; % Variable for iteration
N = 10; % Number of random elements
A = zeros(N, N); % 2D array of zeros
B = randi(100, N, N); % 2D array of random integers between 1 and 100
C = zeros(N, 1); % Column vector of zeros
D = randi(100, 1, N); % Row vector of random integers between 1 and 100

% Loop to generate random values for array A and column vector C
for i = 1:N
    for j = 1:N
        A(i,j) = randi(100);
    end
    C(i) = randi(100);
end

% Displaying array A
fprintf('Array A: \n');
disp(A);

% Multiplying array A with row vector D
E = A * D;

% Displaying row vector D
fprintf('Row vector D: \n');
disp(D);

% Displaying resulting array E
fprintf('Resulting array E = A * D: \n');
disp(E);

% Sorting resulting array E in descending order
F = sort(E, 'descend');

% Displaying sorted array F
fprintf('Sorted array F = descending order of array E: \n');
disp(F);

% Calculating the trace of array B
G = trace(B);

% Displaying trace of array B
fprintf('Trace of array B = %d \n', G);

% Calculating the inverse of array B
H = inv(B);

% Displaying inverse of array B
fprintf('Inverse of array B: \n');
disp(H);

% Calculating the determinant of array B
I = det(B);

% Displaying determinant of array B
fprintf('Determinant of array B = %g \n', I);

% Applying a Gaussian filter to array B
J = imgaussfilt(B);

% Displaying resulting array J
fprintf('Resulting array J = Gaussian filtered array B: \n');
disp(J);

% Plotting a 3D surface plot of array B
figure;
surf(B);
title('Surface Plot of Array B');