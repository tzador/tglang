% Create a random matrix of size 5x5
A = rand(5);

% Create a ones matrix of size 5x1
B = ones(5,1);

% Multiply the matrices
C = A*B;

% Print the result
disp(C);

% Find the maximum value and its index in the matrix
[max_val, max_index] = max(C(:));

% Create a new matrix with only the elements smaller than the maximum value
D = C(C<max_val);

% Calculate the sum of the elements in the new matrix
sum = sum(D);

% Create a figure and plot the original matrix and the new matrix side by side
figure;
subplot(1, 2, 1);
imagesc(A);
title('Original Matrix');
colorbar;
subplot(1, 2, 2);
imagesc(D);
title('New Matrix');
colorbar;

% Calculate the eigenvalues and eigenvectors of the original matrix
[eig_val, eig_vec] = eig(A);

% Create a vector to store the sorted eigenvalues
sorted_eig_val = zeros(1,size(eig_val,1));

% Loop through the eigenvalues and sort them in ascending order
for i = 1:size(eig_val,1)
    % Find the smallest eigenvalue in the remaining values
    [min_val, min_index] = min(eig_val);
    % Store the eigenvalue in the correct position in the new vector
    sorted_eig_val(i) = min_val;
    % Remove the eigenvalue from the original vector
    eig_val(min_index) = [];
end

% Calculate the condition number of the original matrix
cond_num = cond(A);

% Plot the sorted eigenvalues in a bar plot
figure;
bar(sorted_eig_val);
ylabel('Eigenvalues');
xlabel('Position');
title('Sorted Eigenvalues');
grid on;

% Calculate the SVD of the original matrix
[U, S, V] = svd(A);

% Set a tolerance level for the singular values
tol = 1e-6;

% Find the number of singular values larger than the tolerance level
num_sing_vals = sum(diag(S) > tol);

% Calculate the rank of the original matrix
rank = rank(A);

% Print the results
fprintf('The maximum value in the matrix is %f at index (%d,%d). \n', max_val, max_index(1), max_index(2));
fprintf('The sum of the elements smaller than the maximum value is %f. \n', sum);
fprintf('The condition number of the original matrix is %f. \n', cond_num);
fprintf('There are %d singular values larger than the tolerance level of %f. \n', num_sing_vals, tol);
fprintf('The rank of the original matrix is %d. \n', rank);