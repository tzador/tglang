%% This code snippet solves a system of linear equations AX = B using Gaussian elimination

% Set the parameters and variables
A = [3, 5, 7; 9, 11, 13; 15, 17, 19]; % Coefficient matrix
B = [10; 20; 30]; % Right-hand side vector
n = size(B, 1); % Dimension of the system

% Perform Gaussian elimination on the augmented matrix [A B]
Ab = [A, B]; % Augmented matrix
for k = 1:n-1 % Loop over the diagonal elements
    [~, max_idx] = max(abs(Ab(k:n, k))); % Find pivot row index
    max_idx = max_idx + k - 1; % Adjust for offset
    if max_idx ~= k % If pivot row is not the current row, do row interchange
        Ab([k, max_idx], :) = Ab([max_idx, k], :); % Swap rows
    end
    for j = k+1:n % Eliminate variable from subsequent equations
        factor = Ab(j, k) / Ab(k, k); % Compute elimination factor
        Ab(j, :) = Ab(j, :) - factor * Ab(k, :); % Eliminate variable
    end
end

% Solve the upper triangular system using back substitution
X = zeros(n, 1); % Initialize solution vector
X(n) = Ab(n, n+1) / Ab(n, n); % Solve for the last variable
for i = n-1:-1:1 % Loop over remaining variables
    X(i) = (Ab(i, n+1) - Ab(i, i+1:n) * X(i+1:n)) / Ab(i, i); % Solve using already computed solution
end

% Display the solution
fprintf('The solution to the system of equations is:\nX = [ ');
for i = 1:n-1
    fprintf('%.3f, ', X(i)); % Display all but last solution
end
fprintf('%.3f ]\n', X(n)); % Display last solution