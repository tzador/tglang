function [A, b] = gaussian_elimination(A, b)
% Performs Gaussian elimination with pivoting on a matrix A
% and a vector b.

% Get the size of the matrix A
[m, n] = size(A);

% Initialize a temporary vector p to store the pivot indices
p = [1:m]';

% Loop through each column of A
for k = 1:n
    % Set the max value and index to be the current pivot element
    max_val = abs(A(k, k));
    max_index = k;
    
    % Find the maximum value in the current column
    for i = k+1:m
        if abs(A(i, k)) > max_val
            % Update the max value and index if a greater value is found
            max_val = abs(A(i, k));
            max_index = i;
        end
    end
    
    % Swap rows in A and b to pivot on the maximum value
    A([k, max_index], :) = A([max_index, k], :);
    b([k, max_index]) = b([max_index, k]);
    
    % Loop through each row below the pivot element
    for i = k+1:m
        % Calculate the ratio between the current element and the pivot element
        ratio = A(i, k) / A(k, k);
        
        % Subtract a multiple of the pivot row from the current row
        A(i, :) = A(i, :) - ratio * A(k, :);
        
        % Update the corresponding element in the vector b
        b(i) = b(i) - ratio * b(k);
    end
end

% Back-substitution to solve for x
x = zeros(n, 1);

for i = n:-1:1
    % Calculate the sum of the remaining terms in the row
    sum = 0;
    for j = i+1:n
        sum = sum + A(i, j) * x(j);
    end
    
    % Solve for the value of x
    x(i) = (b(i) - sum) / A(i, i);
end

% Return the solution vector x and the updated matrix A
A = A;
b = x;
end