% This code snippet creates a function that solves a system of linear equations using the LU decomposition method.
    
function x = solve_lu(A,b)
    %  A: input matrix of coefficients
    %  b: input vector of constants
    %  x: output vector of solutions

    % Check if A is square matrix
    if size(A,1) ~= size(A,2)
        error('Matrix must be square.');
    end
    
    % Determine size of A
    n = size(A,1);
    
    % Initialize L and U matrices
    L = eye(n);
    U = zeros(n);
    
    % LU decomposition algorithm
    for i = 1:n-1
        % Calculate pivot element
        pivot = A(i,i);
        
        % Check if pivot is 0
        if pivot == 0
            error('Pivot cannot be 0.');
        end
        
        % Calculate U row i
        U(i,i:n) = A(i,i:n);
        
        % Calculate L column i+1
        L(i+1:n,i) = A(i+1:n,i) / pivot;
        
        % Update A matrix
        A(i+1:n,i+1:n) = A(i+1:n,i+1:n) - L(i+1:n,i) * U(i,i+1:n);
    end
    
    % Calculate final U row
    U(n,n) = A(n,n);
    
    % Solve for y in Ly = b
    y = forward_sub(L,b);
    
    % Solve for x in Ux = y
    x = backward_sub(U,y);
end

function y = forward_sub(L,b)
    % L: input lower triangular matrix
    % b: input vector of constants
    % y: output vector of solutions
    
    % Determine size of L and b
    n = size(L,1);
    
    % Initialize y vector
    y = zeros(n,1);
    
    % Forward substitution algorithm
    for i = 1:n
        % Calculate sum of previous y values
        sum = 0;
        for j=1:i-1
            sum = sum + y(j) * L(i,j);
        end
        
        % Calculate y value for current row
        y(i) = (b(i) - sum) / L(i,i);
    end
end

function x = backward_sub(U,y)
    % U: input upper triangular matrix
    % y: input vector of constants
    % x: output vector of solutions
    
    % Determine size of U and y
    n = size(U,1);
    
    % Initialize x vector
    x = zeros(n,1);
    
    % Backward substitution algorithm
    for i = n:-1:1
        % Calculate sum of previous x values
        sum = 0;
        for j=i+1:n
            sum = sum + x(j) * U(i,j);
        end
        
        % Calculate x value for current row
        x(i) = (y(i) - sum) / U(i,i);
    end
end

% Sample usage:
% A = [2, 1, -1; -3, -1, 2; -2, 1, 2];
% b = [8; -11; -3];
% x = solve_lu(A,b);