%%% This code snippet simulates the movement of a pendulum using numerical integration %%%
%%% of the equations of motion in MATLAB %%%

%%% Define constants %%%
g = 9.81;  % gravitational acceleration

%%% Define initial conditions %%%
theta = 0.5;  % initial angle in radians
omega = 0;  % initial angular velocity in radians per second

%%% Initialize arrays to store data %%%
time = 0;  % array to store time values
theta_vals = theta;  % array to store angle values
omega_vals = omega;  % array to store angular velocity values

%%% Define time step and simulation time %%%
dt = 0.01;  % time step in seconds
T = 10;  % simulation time in seconds

%%% Numerically integrate using Euler's method %%%
for t = dt:dt:T
    % Calculate new values using Euler's method
    theta = theta + omega * dt;
    omega = omega - (g / 1) * sin(theta) * dt;
    
    % Append new values to arrays
    time = [time, t];
    theta_vals = [theta_vals, theta];
    omega_vals = [omega_vals, omega];
end

%%% Plot the results using MATLAB's built-in functions %%%
figure;  % create a new figure
subplot(2,1,1);  % create a subplot for the angle
plot(time, theta_vals);  % plot angle values against time
title('Angle vs Time');  % add a title
xlabel('Time (s)');  % label x-axis
ylabel('Angle (rad)');  % label y-axis
grid on;  % turn on gridlines

subplot(2,1,2);  % create a subplot for the angular velocity
plot(time, omega_vals);  % plot angular velocity values against time
title('Angular Velocity vs Time');  % add a title
xlabel('Time (s)');  % label x-axis
ylabel('Angular Velocity (rad/s)');  % label y-axis
grid on;  % turn on gridlines