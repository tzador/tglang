function results = solveOptimizationProblem(A, b, c, d)
% This function solves a linear optimization problem
% Inputs:
% A - matrix of constraints
% b - vector of constraint limits
% c - coefficients for objective function
% d - constant term for objective function
% Outputs:
% results - optimal solution for the optimization problem
[n, m] = size(A); % determine dimensions of matrix A
Aeq = [A, eye(n)]; % create matrix with slack variables
beq = b; % keep constraint limits the same
f = [zeros(m,1); ones(n,1)]; % set objective function coefficients
lb = zeros(n+m,1); % set lower bound for variables
ub = []; % set upper bound for variables (unbounded)
x0 = []; % set initial guess for variables
options = optimoptions('linprog', 'Algorithm', 'dual-simplex'); % set solver algorithm options
[x, ~, exitflag, ~] = linprog(f, Aeq, beq, [], [], lb, ub, x0, options); % solve linear optimization problem
if exitflag == 1 % if solver finds an optimal solution
    results = x(1:m); % return only the values for the original variables
else % if solver does not find an optimal solution
    error("Solver could not find an optimal solution."); % display error message
end
end