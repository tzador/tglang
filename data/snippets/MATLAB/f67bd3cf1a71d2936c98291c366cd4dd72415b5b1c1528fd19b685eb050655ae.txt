%% This program calculates the shortest path between two points in a 2D map using Dijkstra's algorithm.
n = input('Enter the number of nodes: '); % User inputs the number of nodes in the graph
G = zeros(n,n); % Initializes adjacency matrix with all values set to zero
% User inputs the edge weights for each node pair
for i = 1:n
    for j = i+1:n
        weight = input(sprintf('Enter the weight between Node %d and Node %d: ', i, j));
        G(i,j) = weight;
        G(j,i) = weight; % Since the graph is undirected, weight is input for both i,j and j,i
    end
end
start = input('Enter the starting node: '); % User inputs the starting node for the shortest path
D = inf * ones(n,1); % Initializes vector D with all values set to infinity
D(start) = 0; % Sets the starting node distance to 0
visited = zeros(n,1); % Initializes vector visited with all values set to zero
prev = zeros(n,1); % Initializes vector prev with all values set to zero
Q = 1:n; % Sets the set of unvisited nodes to all nodes in the graph
while ~isempty(Q)
    [~,idx] = min(D(Q)); % Finds the index of the node with the minimum distance in the set Q
    u = Q(idx); % Sets current node to be the one with the minimum distance
    Q(idx) = []; % Removes current node from unvisited set Q
    visited(u) = 1; % Sets current node as visited
    % Updates distances to neighboring nodes if they are unvisited and the new distance is smaller
    for v = 1:n
        if G(u,v) ~= 0 && ~visited(v)
            alt = D(u) + G(u,v); % Calculates alternative distance to node v through current node u
            if alt < D(v)
                D(v) = alt; % Replaces previous distance with new, smaller distance
                prev(v) = u; % Sets previous node for node v to be current node u
            end
        end
    end
end
% Reconstructs the shortest path from the start to each node by backtracking through the previous nodes
for i = 1:n
    temp = i;
    shortest_path = [i];
    while temp ~= start
        temp = prev(temp);
        shortest_path = [temp shortest_path]; % Adds previous node to the start of the shortest path
    end
    disp(sprintf('The shortest path from Node %d to Node %d is: %s', start, i, sprintf('%d->', shortest_path(1:end-1), shortest_path(end))));
end