%% Equation solver
% This program solves a system of linear equations using Gaussian elimination

% Define the matrix of coefficients
A = [2 4 -3; 5 1 2; 1 0 3];
% Define the vector of constants
b = [-5; 9; 4];

% Create a copy of A for row operations
B = A;

% Determine the size of the matrix A
[m, n] = size(A);

% Loop through each row of the matrix A
for i = 1:m
    % If the diagonal entry is 0, pivot with a lower row
    if B(i,i) == 0
        [~, max_row] = max(B(i+1:m,i));
        % Swap rows in both A and b
        temp = B(i,:);
        B(i,:) = B(max_row+i,:);
        B(max_row+i,:) = temp;
        temp = b(i);
        b(i) = b(max_row+i);
        b(max_row+i) = temp;
    end
    % Loop through all the rows below the current row
    for j = i+1:m
        % Calculate the multiplier for row operations
        multi = B(j, i) / B(i, i);
        % Update the values of the lower rows
        B(j,i:n) = B(j,i:n) - multi*B(i,i:n);
        % Update the value of the constant vector
        b(j) = b(j) - multi*b(i);
    end
end

% Back substitution to solve for x values
x = zeros(m,1);
x(n) = b(n) / B(m,n);
for i = n-1:-1:1
    x(i) = (b(i) - B(i,i+1:n) * x(i+1:n)) / B(i,i);
end

% Print the solution vector
disp('The solution vector x is:')
disp(x);