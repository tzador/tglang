% This code snippet is a function that implements the Newton's method for finding the root of a given function.
% The function takes in a function handle, initial guess, and tolerance as inputs.
% It outputs the approximate root and the total number of iterations.
% The function works for any real-valued function and can be used for solving various optimization problems.

function [x_opt, iter] = newtonsMethod(f, x0, tol)

% Initialize variables and counters
x_prev = x0;
iter = 0;
diff = tol + 1;

% Loop until the desired tolerance is reached
while diff > tol
    % Calculate the derivative of the function at x_prev
    df = (f(x_prev + tol) - f(x_prev - tol)) / (2 * tol);

    % Calculate the newton's step
    dx = - f(x_prev) / df;

    % Update the estimate of the root
    x_next = x_prev + dx;

    % Calculate the difference between the current and previous estimate
    diff = abs(x_next - x_prev);

    % Update the previous estimate
    x_prev = x_next;

    % Update the iteration counter
    iter = iter + 1;
end

% The root approximation is the final estimate
x_opt = x_prev;

% Print the result
disp(['The approximate root is: ', num2str(x_opt), '. It took ', num2str(iter), ' iterations.']);