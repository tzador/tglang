% This code snippet solves the heat equation using the fully implicit Crank-Nicolson method.
% The domain is defined as x=0 to x=L and the boundary conditions are specified as Dirichlet type.
% The initial condition is defined as u(x,0) = 0.
% The code is structured to take in user inputs for the domain, boundary conditions, and time step.

L = input('Enter the domain length:');
dt = input('Enter the time step:');
dx = L/10;
x = 0:dx:L;
t = 0:dt:5;
alpha = dt/dx^2;

% Initialize solution matrix
u = zeros(length(t),length(x));

% Implement boundary conditions
u(:,1) = 0; % u(0,t) = 0
u(:,end) = 0; % u(L,t) = 0

% Implement initial condition
u(1,:) = 0; % u(x,0) = 0

% Set up matrix A for Crank-Nicolson method
A = diag((2+2*alpha)*ones(1,length(x))) + diag(-alpha*ones(1,length(x)-1),1) + diag(-alpha*ones(1,length(x)-1),-1);
A(1,1) = 1; % set first row for Dirichlet boundary condition
A(end,end) = 1; % set last row for Dirichlet boundary condition

% Set up matrix B for Crank-Nicolson method
B = diag((2-2*alpha)*ones(1,length(x))) + diag(alpha*ones(1,length(x)-1),1) + diag(alpha*ones(1,length(x)-1),-1);
B(1,1) = 1; % set first row for Dirichlet boundary condition
B(end,end) = 1; % set last row for Dirichlet boundary condition

% Loop over time steps
for i = 2:length(t)
    % Solve for interior points using Crank-Nicolson method
    u(i,2:end-1) = A\B*u(i-1,2:end-1)';
end

% Plot solution at final time step
plot(x,u(end,:))
xlabel('x')
ylabel('u(x,5)')
title('Solution to Heat Equation using Crank-Nicolson Method')