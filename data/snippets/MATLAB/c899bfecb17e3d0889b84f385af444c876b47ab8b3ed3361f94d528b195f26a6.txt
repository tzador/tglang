%% Solving a system of nonlinear equations using Newton's method

% Initialize variables
x = [1; 2; 3]; % Initial guesses for x1, x2, x3
tol = 1e-6; % Tolerance for convergence
max_iter = 100; % Maximum number of iterations

% Define the system of equations
% Note: The system of equations must be written in the form F(x) = 0
F = @(x) [x(1)^2 + x(2) - 4; x(1)^3 + x(3) - 3; x(2) - x(3)^2];

% Calculate the Jacobian matrix using symbolic variables
syms x1 x2 x3;
J = jacobian(F, [x1, x2, x3]);

% Perform iterations until convergence or maximum number of iterations reached
for iter = 1:max_iter
    % Evaluate F(x) and J(x) at current iteration
    F_x = double(subs(F, [x1, x2, x3], x));
    J_x = double(subs(J, [x1, x2, x3], x));
    
    % Check for convergence
    if norm(F_x) < tol
        break;
    end
    
    % Calculate the next iteration
    x = x - J_x\F_x;
end

% Check if maximum number of iterations reached
if iter == max_iter
    disp('Maximum number of iterations reached.')
else
    disp(['Solution found after ' num2str(iter) ' iterations:']);
    disp(x);
end