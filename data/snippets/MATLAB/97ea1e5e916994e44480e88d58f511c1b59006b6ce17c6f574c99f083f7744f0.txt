% This is a program in MATLAB that uses an iterative algorithm to approximate the solution to a system of linear equations using the Jacobi method.

% Initialization
A = [3 -1 1; 1 4 -2; -1 2 5]; % coefficient matrix
b = [5; 6; 7]; % constant vector
x0 = [0; 0; 0]; % initial guess for solution
tol = 1e-6; % tolerance value for convergence
max_iter = 100; % maximum number of iterations
n = length(A); % size of matrix

% Iterative algorithm
x = x0; % set initial guess as current solution
iter = 0; % initialize iteration counter
err = inf; % initialize error
while err > tol && iter < max_iter % check for tolerance and iteration limit
    x_new = zeros(n, 1); % initialize new solution vector
    for i = 1:n % loop through rows of matrix
        sum = 0; % initialize sum
        for j = 1:n % loop through columns of matrix
            if j ~= i % exclude the current element
                sum = sum + A(i, j) * x(j); % multiply coefficient and current solution
            end
        end
        x_new(i) = (b(i) - sum) / A(i, i); % calculate new solution
    end
    err = norm(x_new - x); % calculate error
    x = x_new; % set new solution as current solution
    iter = iter + 1; % increment iteration counter
end

% Output
fprintf('Solution: \n'); % print output label
disp(x); % display solution
fprintf('Number of iterations: %d \n', iter); % print output label