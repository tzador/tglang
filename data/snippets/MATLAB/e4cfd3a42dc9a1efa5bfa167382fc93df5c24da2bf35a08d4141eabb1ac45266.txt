%% Curve Fitting using Nonlinear Least Squares Method
% 
% This code snippet uses the 'nlinfit' function to fit a nonlinear model to data using the least squares method.
% 
% Define the data to be fitted
x = [0.25, 0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 2.00, 2.25, 2.50];
y = [1.18, 1.33, 1.47, 1.59, 1.69, 1.78, 1.86, 1.92, 1.97, 2.00];

% Define the nonlinear model function
fun = @(beta, x) beta(1).*exp(-beta(2).*x);

% Use the 'nlinfit' function to fit the model to the data
% Initial values for beta are set to [1, 1] and the 'Options' specify a maximum of 50 iterations
[beta, R, J, CovB, MSE] = nlinfit(x, y, fun, [1, 1], 'Options', statset('MaxIter', 50));

% Print the fitted parameters and the root mean squared error (RMSE)
fprintf('Fitted Parameters: beta(1) = %f, beta(2) = %f \nRMSE = %f\n', beta(1), beta(2), sqrt(MSE));

% Plot the data points and the fitted curve
figure;
plot(x, y, 'o');
hold on;
plot(x, fun(beta, x));
title('Fitted Curve using Nonlinear Least Squares Method');
xlabel('x');
ylabel('y');
legend('Data', 'Fitted Curve');
grid;