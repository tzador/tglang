%% Define constants and parameters
    
% Define universal constants
c = 299792458;    % speed of light in m/s
h = 6.62607004e-34;    % Planck's constant in J*s

% Define system parameters
alpha = 0.9;    % system's attenuation coefficient
beta = 1.3;    % system's gain coefficient

% Define initial conditions
X0 = 0;    % initial position of particle in m
V0 = 0;    % initial velocity of particle in m/s
t0 = 0;    % initial time in s
tf = 10;    % final time in s
dt = 0.01;    % time step size in s

%% Simulation loop
    
% Initialize arrays to store results
t = zeros(1, round((tf-t0)/dt)+1);    % array to store time values
X = zeros(1, round((tf-t0)/dt)+1);    % array to store position values
V = zeros(1, round((tf-t0)/dt)+1);    % array to store velocity values

% Set initial values
t(1) = t0;    % set initial time
X(1) = X0;    % set initial position
V(1) = V0;    % set initial velocity

% Initialize counter
i = 1;

% Run simulation
while t(i) < tf    % loop until final time is reached
    % Calculate new position and velocity values using Euler's method
    X(i+1) = X(i) + V(i)*dt;    % calculate new position
    V(i+1) = V(i) + (c^2 - V(i)^2)*beta*dt - alpha*X(i)*dt;    % calculate new velocity

    % Update time
    t(i+1) = t(i) + dt;    % increment time by dt
    
    % Update counter
    i = i + 1;    % increment counter by 1
end

%% Plot results
    
% Create figure
figure

% Plot position
subplot(2,1,1)    % create subplot
plot(t,X)    % plot position vs. time
xlabel('Time (s)')    % label x-axis
ylabel('Position (m)')    % label y-axis
title('Particle Position vs. Time')    % add title
xlim([t0 tf])    % set x-axis limits
ylim([X0 X0+V0*tf])    % set y-axis limits

% Plot velocity
subplot(2,1,2)    % create subplot
plot(t,V)    % plot velocity vs. time
xlabel('Time (s)')    % label x-axis
ylabel('Velocity (m/s)')    % label y-axis
title('Particle Velocity vs. Time')    % add title
xlim([t0 tf])    % set x-axis limits
ylim([V0-dt*t0 V0+(c/beta)*t0])    % set y-axis limits