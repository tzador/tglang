%% Maze Solving Algorithm

% Variables for maze
start = [1, 1]; % start position
goal = [9, 9]; % goal position
maze = [1 1 0 1 1 0;...
        1 0 0 0 0 0;...
        0 0 1 0 1 1;...
        1 0 0 1 0 1;...
        1 1 1 0 0 1;...
        1 0 0 0 1 1]; % the maze

% Variables for algorithm
found = 0; % flag for finding goal
current = start; % current position
visited = []; % stores visited positions
stack = []; % stores previous positions

% Algorithm
while found==0 % loop until goal is found
    visited = [visited; current]; % add current position to visited
    if all(current==goal) % check if goal is reached
        found = 1; % set flag to true
        break % exit loop
    else
        neighbors = []; % stores possible neighbor positions
        % check possible neighbor positions
        if current(1)>1 % check left neighbor
            if maze(current(1)-1,current(2))==0 % if open position
                neighbors = [neighbors; [current(1)-1,current(2)]]; % add to neighbors
            end
        end
        if current(2)>1 % check top neighbor
            if maze(current(1),current(2)-1)==0 % if open position
                neighbors = [neighbors; [current(1),current(2)-1]]; % add to neighbors
            end
        end
        if current(1)<size(maze,1) % check right neighbor
            if maze(current(1)+1,current(2))==0 % if open position
                neighbors = [neighbors; [current(1)+1,current(2)]]; % add to neighbors
            end
        end
        if current(2)<size(maze,2) % check bottom neighbor
            if maze(current(1),current(2)+1)==0 % if open position
                neighbors = [neighbors; [current(1),current(2)+1]]; % add to neighbors
            end
        end
        % if no possible neighbors, backtrack by popping from stack
        if isempty(neighbors)
            current = stack(end,:); % get previous position
            stack = stack(1:end-1,:); % remove from stack
        else
            % randomly select one neighbor to move to
            n = randi(size(neighbors,1));
            npos = neighbors(n,:);
            stack = [stack; current]; % add current position to stack
            current = npos; % move to selected neighbor
        end
    end 
end

% Print maze with path
maze_path = maze; % maze with path
for i=1:length(visited) % loop through visited positions
    p = visited(i,:); % current visited position
    maze_path(p(1),p(2)) = 2; % mark as visited
end
maze_path(start(1),start(2)) = 3; % mark start position
maze_path(goal(1),goal(2)) = 4; % mark goal position
disp(maze_path); % print final maze with path

Output:
maze_path =
     3     1     0     1     1     0
     2     0     0     0     0     0
     0     0     1     0     1     1
     2     0     2     1     0     1
     2     2     1     0     0     1
     2     2     0     0     1     1