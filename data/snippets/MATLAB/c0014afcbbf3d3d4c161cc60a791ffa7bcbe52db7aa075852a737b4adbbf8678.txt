function [sorted_vals,sorted_indices] = bubbleSort(values,indices)
% This function takes in two arrays of values and indices and performs
% bubble sort to return the values in sorted order along with their
% corresponding indices.
% Inputs:
% - values: a 1D array of values
% - indices: a 1D array of indices corresponding to the values
% Outputs:
% - sorted_vals: a 1D array of values in sorted order
% - sorted_indices: a 1D array of indices corresponding to the sorted values

% initialize the outputs as the input arrays
sorted_vals = values;
sorted_indices = indices;

% loop through the array until all elements are in sorted order
for i = 1:length(sorted_vals)
    isSorted = true; % flag to check if elements are already sorted
    % loop through the unsorted elements
    for j = 1:length(sorted_vals)-i
        % compare adjacent elements and swap if necessary
        if sorted_vals(j) > sorted_vals(j+1)
            % swap the values
            temp_val = sorted_vals(j);
            sorted_vals(j) = sorted_vals(j+1);
            sorted_vals(j+1) = temp_val;
            % swap the indices
            temp_ind = sorted_indices(j);
            sorted_indices(j) = sorted_indices(j+1);
            sorted_indices(j+1) = temp_ind;
            isSorted = false; % if a swap occurs, elements are not sorted
        end
    end
    if isSorted == true % if no swap occurs in a pass, array is sorted
        break;
    end
end