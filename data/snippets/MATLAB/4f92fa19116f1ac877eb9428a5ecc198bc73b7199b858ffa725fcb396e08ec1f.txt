% This code snippet solves a system of linear equations using Gaussian elimination
% The system of equations is of the form Ax = b
% where A is a square matrix and b is a column vector
% This implementation includes partial pivoting for improved accuracy
% Initialize the matrix A and the column vector b
A = [3 2 -4; 
    2 -1 2;
    1 2 3];
b = [8; 1; 4];

% Determine the size of the matrix A
[m, n] = size(A);

% Initialize the augmented matrix [A|b]
M = [A b];

% Implement partial pivoting by finding the row with the largest first element
[~, idx] = max(abs(M(:,1)));
M([1,idx],:) = M([idx,1],:);

% Perform Gaussian elimination
% Loop through the rows of the matrix
for k = 1:m-1
    % Loop through the columns of the matrix
    for j = k+1:m
        % Compute the multiplier for row j
        m = M(j,k)/M(k,k);
        
        % Update the row by subtracting the kth row multiplied by the multiplier
        M(j,:) = M(j,:) - m*M(k,:);
    end
end

% Backward substitution to solve for x
x = zeros(n,1);
x(n) = M(n,n+1) / M(n,n);

% Loop through the rows of the matrix backwards
for k = n-1:-1:1
    % Initialize the sum
    s = 0;
    % Loop through the columns of the matrix
    for j = k+1:n
        % Calculate the sum of elements
        s = s + M(k,j)*x(j);
    end
    % Solve for x(k)
    x(k) = (M(k,n+1)-s) / M(k,k);
end