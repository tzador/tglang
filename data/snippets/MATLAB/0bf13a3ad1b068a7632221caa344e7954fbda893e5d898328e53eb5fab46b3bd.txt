%% Generate random data
data = rand(1000, 5); % Creates a 1000x5 matrix with random numbers between 0 and 1
%%
%% Pre-processing
data_mean = mean(data); % Calculates the mean for each column
data_std = std(data); % Calculates the standard deviation for each column
data_normalized = (data - data_mean) ./ data_std; % Normalizes the data
%%
%% Model training
inputs = data_normalized(:,1:4); % Selects first 4 columns as inputs
targets = data_normalized(:,5); % Selects last column as target
hidden_layer = 10; % Number of neurons in hidden layer
epochs = 100; % Number of training iterations
eta = 0.01; % Learning rate
weights_input_hidden = rand(size(inputs,2), hidden_layer); % Initializes weights between input and hidden layer
weights_hidden_output = rand(hidden_layer, 1); % Initializes weights between hidden and output layer
for i=1:epochs
    % Forward pass
    hidden_layer_output = sigmoid(inputs * weights_input_hidden); % Calculates output of hidden layer
    output = sigmoid(hidden_layer_output * weights_hidden_output); % Calculates final output
    % Backward pass
    output_error = output - targets; % Calculates error at output layer
    hidden_layer_error = output_error * weights_hidden_output' .* hidden_layer_output .* (1-hidden_layer_output); % Calculates error at hidden layer
    % Update weights
    weights_hidden_output = weights_hidden_output - eta * hidden_layer_output' * output_error; % Updates weights between hidden and output layer
    weights_input_hidden = weights_input_hidden - eta * inputs' * hidden_layer_error; % Updates weights between input and hidden layer
end