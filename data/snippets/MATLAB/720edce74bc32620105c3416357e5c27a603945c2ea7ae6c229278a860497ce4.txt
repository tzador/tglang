% This code snippet uses the Runge-Kutta method to solve a system of differential equations
% Define initial conditions
t0 = 0; % initial time
x0 = 0; % initial x-value
y0 = 0; % initial y-value

% Define other parameters
dt = 0.001; % time step
t_final = 1; % final time
N = round((t_final - t0)/dt); % number of time steps

% Define the differential equations
f = @(t,x,y) -x + y; 
g = @(t,x,y) x - 2*y;

% Initialize arrays for solutions
t = zeros(N+1,1); % array for time values
x = zeros(N+1,1); % array for x-values
y = zeros(N+1,1); % array for y-values

% Set initial values
t(1) = t0; % first time value
x(1) = x0; % first x-value
y(1) = y0; % first y-value

% Implement the Runge-Kutta method to solve the system of differential equations
for i = 1:N
    k1 = f(t(i),x(i),y(i));
    l1 = g(t(i),x(i),y(i));
    k2 = f(t(i)+dt/2,x(i)+dt/2*k1,y(i)+dt/2*l1);
    l2 = g(t(i)+dt/2,x(i)+dt/2*k1,y(i)+dt/2*l1);
    k3 = f(t(i)+dt/2,x(i)+dt/2*k2,y(i)+dt/2*l2);
    l3 = g(t(i)+dt/2,x(i)+dt/2*k2,y(i)+dt/2*l2);
    k4 = f(t(i)+dt,x(i)+dt*k3,y(i)+dt*l3);
    l4 = g(t(i)+dt,x(i)+dt*k3,y(i)+dt*l3);
    x(i+1) = x(i) + dt/6*(k1+2*k2+2*k3+k4);
    y(i+1) = y(i) + dt/6*(l1+2*l2+2*l3+l4);
    t(i+1) = t(i) + dt;
end

% Plot the solutions
plot(t,x,'b--');
hold on
plot(t,y,'r--');
xlabel('Time');
ylabel('Values');
legend('x-value','y-value');
title('Solution of System of Differential Equations using Runge-Kutta Method');