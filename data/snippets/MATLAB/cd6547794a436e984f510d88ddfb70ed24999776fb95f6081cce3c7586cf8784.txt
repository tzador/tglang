%% Calculate the inverse of a matrix using LU decomposition
% Input matrix A
A = [2, 1, -1; -3, -1, 2; -2, 1, 2];
% Initialize variables
n = size(A,1); % size of matrix
L = eye(n); % initialize lower triangular matrix
U = zeros(n); % initialize upper triangular matrix
P = eye(n); % initialize permutation matrix
% LU decomposition with partial pivoting
for j = 1:n
    [pivot, index] = max(abs(A(j:n, j))); % find pivot element and its index
    index = index + j - 1; % add j-1 to index to correct for submatrix
    % swap rows in A, L, P matrices
    if index ~= j
       A([j,index],:) = A([index,j],:);
       L([j,index],:) = L([index,j],:);
       P([j,index],:) = P([index,j],:);
    end
    U(j,:) = A(j,:); % copy jth row to U matrix
    L(j+1:end,j) = A(j+1:end,j) / A(j,j); % calculate elements in jth column of L matrix
    A(j+1:end,j+1:end) = A(j+1:end,j+1:end) - L(j+1:end,j) * U(j,j+1:end); % update submatrix of A
end
% Calculate inverse using LU decomposition
y = zeros(n); % initialize vector y
inv = zeros(n); % initialize inverse matrix
for i = 1:n
    % Solve for y in Ly = Pe_i (i-th column vector of P)
    for j = 1:n
        if j == i
            y(j) = 1; % set y_i = 1
        end
        for k = 1:j-1
            y(j) = y(j) - L(j,k) * y(k); % forward substitution
        end
    end
    % Solve for x in Ux = y
    x = y;
    for j = n:-1:1
        for k = j+1:n
            x(j) = x(j) - U(j,k) * x(k); % backward substitution
        end
        x(j) = x(j) / U(j,j); % divide by diagonal element of U
    end
    inv(:,i) = x; % set i-th column of inverse matrix to solution
end
inv % print inverse matrix