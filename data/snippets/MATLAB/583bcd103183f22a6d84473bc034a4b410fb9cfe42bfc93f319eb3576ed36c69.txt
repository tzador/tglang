% This code snippet calculates the inverse of a square matrix using the Gauss-Jordan method

% Prompt user to enter the size of the square matrix
n = input("Enter the size of the square matrix: ");

% Generate a random square matrix of size n
A = randn(n,n);

% Display the generated matrix
disp("Generated Matrix:");
disp(A);

% Create an identity matrix of size n
I = eye(n);

% Perform row operations to convert the matrix A into an upper triangular matrix
for i = 1:n-1
    for j = i+1:n
        factor = A(j,i)/A(i,i); % Calculate the factor to multiply the rows
        A(j,:) = A(j,:) - factor*A(i,:); % Multiply and subtract the rows
        I(j,:) = I(j,:) - factor*I(i,:); % Corresponding row operations on the identity matrix
    end
end

% Perform column operations to convert the upper triangular matrix to an identity matrix
for i = n:-1:2
    for j = i-1:-1:1
        factor = A(j,i)/A(i,i); % Calculate the factor to multiply the columns
        A(j,:) = A(j,:) - factor*A(i,:); % Multiply and subtract the columns
        I(j,:) = I(j,:) - factor*I(i,:); % Corresponding column operations on the identity matrix
    end
end

% Divide each row of A and I by the diagonal elements of A to get the inverse of A
for i = 1:n
    I(i,:) = I(i,:)/A(i,i);
    A(i,:) = A(i,:)/A(i,i);
end

% Display the inverse matrix
disp("Inverse Matrix:");
disp(I);

% Check if the inverse is correct by multiplying A and its inverse, the result should be an identity matrix
disp("A * inv(A):");
disp(A*I);