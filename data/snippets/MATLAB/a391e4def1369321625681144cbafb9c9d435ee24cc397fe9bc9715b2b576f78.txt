% This code snippet solves a system of linear equations using the Jacobi method
% Define the coefficients matrix A and the constants vector b
A = [4 -1 1; -2 5 1; 1 1 8];
b = [5; 11; 12];
% Define initial guess vector x0 and maximum number of iterations
x0 = [0; 0; 0];
max_iterations = 100;
% Calculate the diagonal matrix D, the lower triangular matrix L, and the upper triangular matrix U
D = diag(diag(A));
L = tril(A, -1);
U = triu(A, 1);
% Initialize the solution vector x and the error tolerance
x = zeros(size(A, 1), 1);
tol = 1e-6;
% Perform Jacobi iteration
for i = 1:max_iterations
    x = (D \ (b - (L + U) * x0));
    % Check convergence by calculating the error
    error = norm(x - x0, inf);
    % Update x0 with the new vector x
    x0 = x;
    % Exit the loop if the error is lower than the tolerance
    if error < tol
        break;
    end
end
% Display the solution vector x and the number of iterations
disp(x);
disp(i);