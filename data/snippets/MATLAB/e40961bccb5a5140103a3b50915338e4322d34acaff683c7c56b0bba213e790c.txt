% define variables 
a = 5; % integer variable
b = "hello"; % string variable
c = 3.14; % float variable

% generate random matrix
M = randn(3,4); % 3x4 matrix with random values from standard normal distribution

% perform element-wise operations on matrix
M_squared = M.^2; % square each element in M
M_reversed = fliplr(M); % reverse the columns of M
M_rotated = rot90(M,2); % rotate M by 180 degrees

% print matrix dimensions
fprintf('The dimensions of M are %d x %d\n', size(M,1), size(M,2));

% calculate mean of matrix and print result
M_mean = mean(M(:));
fprintf('The mean of M is %0.2f\n', M_mean);

% create logical mask based on matrix values
mask = M > M_mean; % mask is true where matrix values are greater than mean

% apply mask to select elements from matrix
M_selected = M(mask); % creates vector with selected elements from M

% create subplot of original and selected matrix
subplot(1,2,1), imagesc(M), axis equal, title('Original Matrix');
subplot(1,2,2), imagesc(M_selected), axis equal, title('Selected Matrix');

% data analysis using built-in functions
M_sum = sum(M(:)); % calculate sum of all elements in M
M_max = max(M(:)); % find maximum value in M
M_min = min(M(:)); % find minimum value in M
M_std = std(M(:)); % calculate standard deviation of elements in M