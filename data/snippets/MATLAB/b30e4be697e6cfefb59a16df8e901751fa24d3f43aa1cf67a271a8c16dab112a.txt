%% Solving a system of nonlinear equations using the Newton's method

% Define the equations to be solved
syms x y z
eq1 = x^2 + y^2 + z^2 - 3 == 0;
eq2 = x^2 - 2*y + 3*z^3 == 0;
eq3 = 2*x - y^2 + z== -3;

% Convert equations to function handles
f = matlabFunction([eq1, eq2, eq3], 'vars', [x, y, z]);

% Set initial values for the variables
x0 = [1, 1, 1];

% Set tolerance level for convergence
tol = 1e-6;

% Initialize error and iteration variables
err = inf;
n = 0;

% Iterate until error is less than tolerance
while err > tol

    % Calculate Jacobian matrix of the equations
    J = jacobian(f(x0(1), x0(2), x0(3)), [x, y, z]);
    
    % Calculate function values at current point
    fx0 = f(x0(1), x0(2), x0(3));
    
    % Solve for increment of variables
    delta = -J\fx0';
    
    % Update variables
    x0 = x0 + delta';
    
    % Calculate error
    err = norm(fx0);
    
    % Increase iteration count
    n = n + 1;
     
end

% Print final result
fprintf('Solution: x = %.4f, y = %.4f, z = %.4f\n', x0(1), x0(2), x0(3));
fprintf('Number of iterations: %d\n', n);