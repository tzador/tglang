%% Monte Carlo Simulations for Portfolio Optimization
% Define the number of assets in the portfolio
num_assets = 5;

% Generate random returns for each asset
returns = randn(1000, num_assets);

% Calculate the covariance matrix
cov_matrix = cov(returns);

% Define initial weights for the portfolio
weights = ones(1, num_assets) / num_assets;

% Define the target return and maximum risk
target_return = 0.1;
max_risk = 0.08;

% Set the number of simulations to run
num_simulations = 1000;

% Initialize variables to store results
portfolio_returns = zeros(num_simulations, 1);
portfolio_risks = zeros(num_simulations, 1);
allocation_weights = zeros(num_simulations, num_assets);

% Run Monte Carlo simulations
for i = 1:num_simulations
    % Generate random weight allocation for the portfolio
    allocation_weights(i,:) = rand(1, num_assets);
    allocation_weights(i,:) = allocation_weights(i,:) / sum(allocation_weights(i,:));
    
    % Calculate expected portfolio returns and risks
    portfolio_returns(i) = allocation_weights(i,:) * mean(returns)';
    portfolio_risks(i) = sqrt(allocation_weights(i,:) * cov_matrix * allocation_weights(i,:)');
end

% Plot the efficient frontier
figure;
scatter(portfolio_risks, portfolio_returns);
hold on;
scatter(max_risk, target_return, 50, 'r', 'filled');
hold off;
xlabel('Risk');
ylabel('Return');
title('Efficient Frontier for Optimal Portfolios');

% Calculate the portfolio with the maximum Sharpe ratio
sharpe_ratios = (portfolio_returns - 0.01) ./ portfolio_risks;
[max_sharpe, index] = max(sharpe_ratios);
max_sharpe_allocation = allocation_weights(index,:);

% Plot the portfolio with maximum Sharpe ratio
figure;
pie(max_sharpe_allocation, {'Asset 1', 'Asset 2', 'Asset 3', 'Asset 4', 'Asset 5'});
title('Portfolio with Maximum Sharpe Ratio');