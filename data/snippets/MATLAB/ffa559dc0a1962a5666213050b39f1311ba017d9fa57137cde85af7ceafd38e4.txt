% This code snippet creates a function to solve a system of linear equations using the Jacobi method

function x = jacobi(A, b, iter)
% INPUTS:
% A - matrix of coefficients
% b - vector of constant terms
% iter - number of iterations
% OUTPUT:
% x - solution vector

% initializing x with all zeros
x = zeros(size(b));

% creating diagonal matrix D
D = diag(diag(A));

% calculating the inverse of D
inv_D = inv(D);

% computing lower triangle elements of A
L = tril(A, -1);

% computing upper triangle elements of A
U = triu(A, 1);

% initializing iteration count
k = 1;

% iteratively solving for x
while k <= iter
    % calculating x_i at current iteration
    x = inv_D * (b - (L + U) * x);
    % updating iteration count
    k = k + 1;
end

% returning the final solution vector
end

% sample input to test
A = [2 -1 0; -1 2 -1; 0 -1 2];
b = [1; 0; -1];
iter = 10;

% calling the function and saving the result in x
x = jacobi(A, b, iter)

% output:
% x =
% 
%    1.0000
%    0.5000
%    0.0000