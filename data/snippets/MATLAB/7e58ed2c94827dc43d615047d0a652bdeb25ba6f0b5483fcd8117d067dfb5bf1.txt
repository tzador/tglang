%% Standard Kalman Filter Implementation

% Initialize state variables and parameters
x = [1; 1]; % state estimate
A = [1, 1; 0, 1]; % state transition matrix
B = [0; 1]; % input effect matrix
H = [1, 0]; % measurement matrix
Q = [0.01, 0; 0, 0.01]; % process noise covariance
R = 1; % measurement noise covariance

% Generate noisy input signal
u = randn(1, 100); % input signal
w = sqrt(Q) * randn(2, 100); % process noise


% Initialize Kalman filter variables
P = eye(2); % initial error covariance matrix
K = P / (H * P * H' + R); % Kalman gain

% Implement Kalman filter for each input signal
for t = 1:length(u)
    % Prediction step
    x = A * x + B * u(t); % Predict state estimate
    P = A * P * A' + Q; % Predict error covariance
    
    % Measurement update step
    y = H * x + sqrt(R) * randn; % Generate measurement
    x = x + K * (y - H * x); % Update state estimate
    P = (eye(2) - K * H) * P; % Update error covariance
    
    % Store results
    x_estimate(t, :) = x; % Store state estimate
end

% Plot results
subplot(2, 1, 1); % Create top subplot
plot(1:length(u), x_estimate(:,1), '--', 1:length(u), x_estimate(:,2)); % Plot state estimates
legend('x_1 estimate', 'x_2 estimate'); % Create legend
xlabel('Time (s)'); % Label x-axis
ylabel('State Estimate'); % Label y-axis
title('Kalman Filter Results'); % Add title

subplot(2, 1, 2); % Create bottom subplot
plot(1:length(u), u); % Plot input signal
xlabel('Time (s)'); % Label x-axis
ylabel('Input Signal'); % Label y-axis
title('Input Signal'); % Add title