%% Convolutional Neural Network

% create layers
layers = [
    imageInputLayer([28 28 1]) % input layer
    convolution2dLayer(3,16,'Padding','same') % convolutional layer with 16 filters
    batchNormalizationLayer % normalize output
    reluLayer % rectified linear unit activation function
    maxPooling2dLayer(2,'Stride',2) % max pooling layer
    convolution2dLayer(3,32,'Padding','same') % convolutional layer with 32 filters
    batchNormalizationLayer % normalize output
    reluLayer % rectified linear unit activation function
    maxPooling2dLayer(2,'Stride',2) % max pooling layer
    convolution2dLayer(3,64,'Padding','same') % convolutional layer with 64 filters
    batchNormalizationLayer % normalize output
    reluLayer % rectified linear unit activation function
    fullyConnectedLayer(10) % fully connected layer with 10 outputs
    softmaxLayer % softmax activation function
    classificationLayer]; % output layer

% specify training options
options = trainingOptions('adam', ...
    'InitialLearnRate',0.0001, ... % learning rate
    'Plots','training-progress', ... % show training progress
    'ValidationData',{XValidation,YValidation}, ... % validation data
    'ValidationFrequency',30, ... % validate every 30 iterations
    'ValidationPatience',Inf, ... % don't terminate until validation error stops improving
    'Verbose',false, ... % don't display training info
    'Shuffle','every-epoch', ... % shuffle data every epoch
    'MiniBatchSize',64, ... % mini batch size of 64
    'MaxEpochs',4); % train for 4 epochs

% train the network
convnet = trainNetwork(XTrain,YTrain,layers,options);