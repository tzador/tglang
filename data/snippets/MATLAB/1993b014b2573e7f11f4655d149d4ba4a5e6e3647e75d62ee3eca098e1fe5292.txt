% This code snippet implements the Jacobi iterative method for solving a system of linear equations
% with a user-defined tolerance and maximum number of iterations
% Inputs:
%   A: coefficient matrix
%   b: solution vector
%   x0: initial guess for the solution vector
%   tol: desired tolerance for the solution
%   max_iter: maximum number of iterations allowed
% Output:
%   x: solution vector

function x = Jacobi(A, b, x0, tol, max_iter)
% initialize solution vector
x = x0;
% get dimensions of coefficient matrix
[n,~] = size(A);
% initialize iteration count
iter = 0;
% loop until desired tolerance or maximum number of iterations is reached
while norm(A*x - b) > tol && iter < max_iter
    % iterate through each variable in solution vector
    for i = 1:n
        % initialize temporary sum variable
        sum = 0;
        % iterate through each variable in solution vector except for current variable
        for j = 1:n
            if j ~= i
                % add current variable's coefficient times previous solution value to the sum
                sum = sum + A(i,j)*x(j);
            end
        end
        % update solution vector by dividing sum by current variable's coefficient and subtracting from b
        x(i) = (1/A(i,i))*(b(i) - sum);
    end
    % increment iteration count
    iter = iter + 1;
end
% display error message if maximum number of iterations is reached without reaching desired tolerance
if iter == max_iter
    disp("Maximum number of iterations reached without reaching desired tolerance.");
end
end
% example usage
% A = [3 1 1; 2 4 1; 2 2 5]; b = [6; 4; 7]; x0 = [0; 0; 0]; tol = 1e-6; max_iter = 100;
% x = Jacobi(A, b, x0, tol, max_iter);