%% Create a matrix of random integers
A = randi([-10,10], 5, 5);

%% Compute the dot product of the matrix with itself
B = A * A';

%% Take the element-wise square root of the dot product
C = sqrt(B);

%% Create custom vector
x = [1,2,3,4,5];

%% Divide each row of the matrix by the custom vector
divided_matrix = bsxfun(@rdivide, C, x);

%% Sort the rows of the divided matrix in descending order and save the indices
[sorted_rows, indices] = sort(divided_matrix, 'descend');

%% Print the sorted rows and their corresponding indices
disp('Sorted rows:');
disp(sorted_rows);
disp('Row indices:');
disp(indices);

%% Create empty matrix
D = [];

%% Loop through each row of the divided matrix and replace any NaN with zero
for i = 1:size(divided_matrix,1)
    for j = 1:size(divided_matrix,2)
        if isnan(divided_matrix(i,j))
            divided_matrix(i,j) = 0;
        end
    end
end

%% Fill the empty matrix with values from the divided matrix
for i = 1:size(divided_matrix,1)
    for j = 1:size(divided_matrix,2)
        if divided_matrix(i,j) == 0
            D(i,j) = C(i,j);
        else
            D(i,j) = divided_matrix(i,j);
        end
    end
end

%% Print the final matrix with replaced NaN values
disp('Final matrix:');
disp(D);