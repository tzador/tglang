% This code snippet calculates the inverse discrete Fourier transform (IDFT) 
% of a given input signal using the fast Fourier transform (FFT) algorithm.
% Inputs: x - Input signal in frequency domain (complex array)
%         N - Length of the input signal (integer)
% Outputs: y - Inverse IDFT of the input signal (complex array)
%          w - Frequency domain values (complex array)
% Define the FFT function
function [y, w] = fast_IDFT(x,N)
% Define the first iteration of the FFT algorithm
w = exp((-2*pi*1i)/N).^(0:N-1); % Generate the frequency domain values
w = repmat(w',1,N); % Create N copies of the w vector
M = N/2; % Set the value of M
c = x(1:2:N); % Split the input signal into even-indexed elements
d = x(2:2:N); % Split the input signal into odd-indexed elements
% Apply the FFT algorithm recursively
if N == 2 % Base case
    y = [c+d,c-d];
else % Recursive case
    y = [fast_IDFT(c,M) + w(1:M,1:M).*fast_IDFT(d,M), fast_IDFT(c,M) - w(1:M,1:M).*fast_IDFT(d,M)];
end
end