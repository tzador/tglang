% This program solves the heat equation using the Crank-Nicolson scheme
% for a set of initial and boundary conditions.
clear all; % clears all stored variables
clc; % clears the command window

% Define the constants and parameters
L = 5; % length of the rod in meters
tmax = 5; % maximum time in seconds
N = 50; % number of spatial intervals
M = 500; % number of time intervals
k = tmax / M; % time step
h = L / N; % spatial step
kappa = 0.5; % thermal diffusivity
alpha = kappa * k / (h^2); % stability parameter

% Define the initial temperature distribution
u0 = zeros(N + 1, 1); % initial temperature at all spatial points
u0(1) = 100; % temperature at the left boundary
u0(N + 1) = 0; % temperature at the right boundary

% Define the matrix operators required for the Crank-Nicolson scheme
A = eye(N + 1) .* (1 + 2 * alpha) - diag(ones(N, 1) .* alpha, 1) - ...
    diag(ones(N, 1) .* alpha, -1); % spatial operator
B = eye(N + 1) .* (1 - 2 * alpha) + diag(ones(N, 1) .* alpha, 1) + ...
    diag(ones(N, 1) .* alpha, -1); % temporal operator

% Initialize the temperature matrix to store the solution at each time step
u = zeros(N + 1, M + 1);
u(:, 1) = u0; % initial condition at t = 0

% Apply the Crank-Nicolson scheme to solve the heat equation
for j = 2:M+1 % iterate over time steps
    u(:, j) = (B \ (A * u(:, j-1))); % solve for the next time step
end

% Plot the temperature distribution at the final time
plot(0:h:L, u(:, M+1)); % plot temperature against spatial position
title('Temperature distribution at t = 5 seconds'); % add a title
xlabel('Spatial position (m)'); % add label to x-axis
ylabel('Temperature (K)'); % add label to y-axis
grid on; % add grid lines