%% This code snippet calculates the Fast Fourier Transform (FFT) of a given signal %%
clear all; close all; clc;

%% Define the signal %%
t = linspace(0,1,1000); % Generating 1000 evenly spaced points between 0 and 1
x = sin(2*pi*10*t) + sin(2*pi*30*t); % Creating a signal with two frequencies (10Hz and 30Hz)

%% Setting up the FFT %%
N = length(x); % Getting the length of the signal
f = linspace(0,1,N); % Generating a frequency vector
X = fft(x); % Computing the FFT of the signal

%% Plotting the results %%
figure; % Creating a new figure
subplot(2,1,1) % Creating a subplot with 2 rows and 1 column
plot(t,x,'b'); % Plotting the original signal in blue
title('Original Signal'); % Adding a title
xlabel('Time (s)'); % Labeling the x-axis
ylabel('Amplitude'); % Labeling the y-axis
subplot(2,1,2) % Creating a subplot with 2 rows and 1 column
plot(f(1:N/2), abs(X(1:N/2))*2/N,'r'); % Plotting the FFT of the signal in red
title('FFT of Signal'); % Adding a title
xlabel('Frequency (Hz)'); % Labeling the x-axis 
ylabel('Amplitude'); % Labeling the y-axis
xlim([0 max(f)]); % Setting the x-axis limit to the maximum frequency

% The following code snippet will also output the frequency and amplitude values %%
[Freq, Amp] = findpeaks(abs(X)); % Finding the peaks/maximum values of the FFT
disp('Peaks found at frequencies (Hz) and corresponding amplitudes:');
disp([f(Freq), abs(X(Freq))]);

%% Optional: Adding custom FFT parameters %%
% Uncomment the following code and modify the parameters to customize the FFT %%
% X = fft(x, N/2); % Customized N-point FFT
% X = fft(x,N,2); % N-point FFT of signal along the 2nd dimension
% X = fftshift(X); % Shifting FFT result to have 0Hz in the center