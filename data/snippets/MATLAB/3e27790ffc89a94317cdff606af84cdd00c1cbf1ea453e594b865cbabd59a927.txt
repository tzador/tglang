%% Initialize variables and set parameters

% Set parameters
timesteps = 100; % Number of time steps
dt = 0.01; % Time step size
t = 0:dt:timesteps*dt; % Time vector

% Initialize variables
x = zeros(1,length(t)); % Initialize position vector
v = zeros(1,length(t)); % Initialize velocity vector
a = zeros(1,length(t)); % Initialize acceleration vector
F = 1; % Set force constant

% Set initial conditions
x(1) = 0; % Initial position
v(1) = 0; % Initial velocity
a(1) = F; % Initial acceleration

%% Perform calculations and update variables

% Use forward Euler method to calculate position, velocity, and acceleration at each time step
for i = 2:length(t)
    
    % Calculate acceleration using Newton's second law (F=ma)
    a(i) = F;
    
    % Update velocity using forward difference approximation (v(t+dt) = v(t) + a(t)*dt)
    v(i) = v(i-1) + a(i-1)*dt;
    
    % Update position using forward difference approximation (x(t+dt) = x(t) + v(t)*dt)
    x(i) = x(i-1) + v(i-1)*dt;
end

%% Plot results

% Plot position, velocity, and acceleration over time
figure;
subplot(3,1,1);
plot(t,x,'LineWidth',2);
xlabel('Time (s)','FontSize',14);
ylabel('Position (m)','FontSize',14);
title('Position vs Time','FontSize',16);

subplot(3,1,2);
plot(t,v,'LineWidth',2);
xlabel('Time (s)','FontSize',14);
ylabel('Velocity (m/s)','FontSize',14);
title('Velocity vs Time','FontSize',16);

subplot(3,1,3);
plot(t,a,'LineWidth',2);
xlabel('Time (s)','FontSize',14);
ylabel('Acceleration (m/s^2)','FontSize',14);
title('Acceleration vs Time','FontSize',16);