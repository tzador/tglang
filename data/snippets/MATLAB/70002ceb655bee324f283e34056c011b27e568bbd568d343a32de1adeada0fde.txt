function [x, y] = gradient_descent(f, initial_guess, step_size, threshold, max_iterations)
    % This function implements the gradient descent algorithm to find the minimum of a given function.
    
    %INPUTS:
    %   f - the function to be optimized
    %   initial_guess - initial guess for the optimal solution
    %   step_size - the size of the steps taken in each iteration
    %   threshold - the minimum difference between two consecutive iterations' values for the algorithm to stop
    %   max_iterations - the maximum number of iterations before the algorithm stops
    %
    %OUTPUTS:
    %   x - the optimal value for the parameter being optimized
    %   y - the minimum value of the function f at x
    
    % Initialize variables
    x = initial_guess;
    y = f(x);
    iteration = 0;
    iteration_values = [];
    
    % Loop until convergence or maximum iterations
    while iteration < max_iterations
        % Calculate gradient
        gradient = diff(f, x);
        
        % Update x and y
        x = x - (step_size * gradient);
        y = f(x);
        
        % Append iteration value to list
        iteration_values = [iteration_values, y];
        
        % Check for convergence
        if abs(y - iteration_values(end-1)) < threshold
            break
        else
            iteration = iteration + 1;
        end
    end
    
    % Plot iteration values
    figure;
    plot(0:iteration, iteration_values);
    xlabel('Iteration');
    ylabel('Value');
    title('Value of f at each iteration');
    
    % Print final optimal value and minimum function value
    fprintf('Optimal value of x: %f\n', x);
    fprintf('Minimum value of the function: %f\n', y);
end