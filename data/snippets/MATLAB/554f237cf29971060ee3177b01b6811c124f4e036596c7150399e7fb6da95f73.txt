%this code snippet finds the roots of a given polynomial using the Bairstow method

function [roots] = bairstow(polynomial, error_threshold, max_iterations)
%this function takes in a polynomial, an error threshold, and max number of iterations 
%and returns the roots of the polynomial

%initial guess for the roots
r = zeros(1, length(polynomial)-2);
s = zeros(1, length(polynomial)-2);

%setting up the iterative process
for i = 1:max_iterations
    %calculating the necessary coefficients
    [A, B, C] = calculate_coefficients(polynomial, r(i), s(i));
    
    %performing the Bairstow method for the current iteration
    [delta_r, delta_s] = bairstow_method(A, B, C, polynomial);
    
    %updating the roots for the next iteration
    r(i+1) = r(i) + delta_r;
    s(i+1) = s(i) + delta_s;
    
    %checking if the error is below the threshold
    if abs(delta_r) < error_threshold && abs(delta_s) < error_threshold
        break;
    end
end

%returning the roots as a column vector
roots = [r(i+1);s(i+1)];

%helper function to calculate coefficients
function [A, B, C] = calculate_coefficients(polynomial, r, s)
%calculating coefficients using synthetic division
[quotient, remainder] = deconv(polynomial, [1, -r, -s]);
A = quotient(end);
B = remainder(end-1);
C = remainder(end);

%helper function for the Bairstow method
function [delta_r, delta_s] = bairstow_method(A, B, C, polynomial)
%calculating the updates for the roots
delta_r = ((B*A - C*(polynomial(end-2))) / (A^2 - C*polynomial(end-1)));
delta_s = ((B*C - polynomial(end)) / (A^2 - C*polynomial(end-1)));