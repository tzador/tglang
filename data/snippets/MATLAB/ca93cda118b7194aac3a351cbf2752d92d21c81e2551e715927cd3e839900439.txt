function [roots, count] = newton_raphson_method(f, df, a, b, tol, n)
% This function implements the Newton-Raphson method to find the roots of a given function f
% within a specified interval [a,b] with a given tolerance tol and maximum number of iterations n
% Input:
%   - f: the function whose roots we are trying to find
%   - df: the derivative of the function f
%   - a: the left endpoint of the interval [a,b]
%   - b: the right endpoint of the interval [a,b]
%   - tol: the desired tolerance for the root
%   - n: the maximum number of iterations allowed
% Output:
%   - roots: an array of all the roots found within the interval
%   - count: the number of iterations taken to find each root
% initialize roots and count to empty arrays
roots = [];
count = [];
% calculate the value of x using the midpoint of the interval [a,b]
x = (a+b)/2;
% initialize the current iteration to 0
i = 0;
% loop until the maximum number of iterations is reached
while i < n
    % calculate the value of f(x)
    fx = f(x);
    % calculate the value of df(x)
    dfx = df(x);
    % check if the absolute value of df(x) is less than the tolerance
    if abs(dfx) < tol
        % if true, x is considered a root
        roots = [roots, x];
        % add the current iteration to the count
        count = [count, i+1];
        % increase the current value of x by 1 to avoid division by zero
        x = x + 1;
        % reset the current iteration to 0
        i = 0;
    end
    % perform the Newton-Raphson iteration
    x = x - fx/dfx;
    % increase the current iteration by 1
    i = i + 1;
end
end