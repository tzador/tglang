% This program calculates the intensity of light transmitted through a series of polarizers
% with different orientations, using Malus' Law
% Define a vector of input light intensities
input_intensities = [10, 15, 20, 25];
% Define a vector of polarizer orientations in degrees
polarizer_orientations = [0, 30, 60, 90];
% Define the initial intensity of the light (before any polarizer)
initial_intensity = 50;
% Define a function to calculate the intensity of light transmitted through a polarizer
function transmitted_intensity = calc_intensities(theta, initial_intensities, polarizer_orients)
    % Convert polarizer orientation from degrees to radians
    polarizer_radians = deg2rad(polarizer_orients);
    % Use Malus' Law to calculate the transmitted intensity
    transmitted_intensity = initial_intensities .* (cos(theta) .* cos(polarizer_radians) .^ 2);
end
% Initialize an empty matrix to store the transmitted intensities for each combination
% of input intensity and polarizer orientation
transmitted_intensities = zeros(length(input_intensities), length(polarizer_orientations));
% Loop through each input intensity
for i = 1:length(input_intensities)
    % Loop through each polarizer orientation
    for j = 1:length(polarizer_orientations)
        % Calculate the transmitted intensity for the current input intensity
        % and polarizer orientation by calling the `calc_intensities` function
        transmitted_intensities(i, j) = calc_intensities(0, input_intensities(i), polarizer_orientations(j));
    end
end
% Print out the final transmitted intensities in a table format
fprintf('Polarizer Orientation (degrees) | Input Intensity | Transmitted Intensity\n');
fprintf('-----------------------------------------------------------------------\n');
for i = 1:length(input_intensities)
    for j = 1:length(polarizer_orientations)
        fprintf('%20i | %15i | %20.4f\n', polarizer_orientations(j), input_intensities(i), transmitted_intensities(i, j));
    end
end