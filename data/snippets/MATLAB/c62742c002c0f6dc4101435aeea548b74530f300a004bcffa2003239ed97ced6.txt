% This code snippet performs the Jacobi iteration method to solve a system of linear equations.
% Input: A n x n coefficient matrix, b n x 1 solution vector, and tolerance value.
% Output: The solution vector x n x 1.

n = size(A, 1); % determine the number of unknowns using the size of coefficient matrix
x = zeros(n, 1); % initialize the solution vector
x_prev = x; % create a previous solution vector for comparison
err = Inf; % initialize the error to a large value
iter = 0; % initialize iteration counter

while err > tol % loop until error is less than tolerance
  for i = 1:n % loop through each equation
    sigma = 0; % initialize the sum for the current equation
    for j = 1:n % loop through each unknown
      if j ~= i % exclude the current unknown in the sum
        sigma = sigma + A(i, j) * x_prev(j); % calculate the sum
      end
    end
    x(i) = (b(i) - sigma) / A(i, i); % solve for x_i using the current solution vector
  end
  err = norm(x - x_prev) / norm(x); % calculate the error using the 2-norm
  iter = iter + 1; % increase the iteration counter
  x_prev = x; % update the previous solution vector
end

% print the solution vector and number of iterations
fprintf('Solution vector: ');
disp(x);
fprintf('Number of iterations: %d', iter); 

% Output:
%