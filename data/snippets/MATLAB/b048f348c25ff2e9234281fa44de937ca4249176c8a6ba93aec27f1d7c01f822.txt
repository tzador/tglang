% This code snippet implements the Newton-Raphson method for solving a system of nonlinear equations

% Define the function to be solved
function F = systemFunc(x)
F(1) = -x(1)^3 + 2*x(2)^2 + 3*x(1) - 2*x(2) + 4;
F(2) = -3*x(1)^2 + 4*x(1)*x(2) - 2*x(2)^2 + 6;

% Define the Jacobian matrix of the function
function J = systemJacobian(x)
J(1, 1) = -3*x(1)^2 + 3;
J(1, 2) = 4*x(2) - 2;
J(2, 1) = -6*x(1) + 4*x(2);
J(2, 2) = 4*x(1) - 4*x(2);

% Set initial guess for the solution
x = [1; 1];

% Set tolerance for convergence
tol = 1e-6;

% Initialize variables
iter = 0;
err = inf;

% Start Newton's iterations
while err > tol
    J = systemJacobian(x);
    F = systemFunc(x);
    d = -J\F; % Compute the Newton's direction
    x = x + d; % Update the solution
    err = norm(d); % Compute the error
    iter = iter + 1; % Increment the iteration counter
end

% Print the final solution and the number of iterations required for convergence
fprintf('The solution is:\n %0.4f\n %0.4f\n', x(1), x(2));
fprintf('The number of iterations required for convergence is: %d', iter);