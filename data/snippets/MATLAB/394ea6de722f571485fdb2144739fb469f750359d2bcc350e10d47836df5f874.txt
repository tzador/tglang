function [result] = iterative_dfs(adj_matrix, start_node)
% Performs iterative depth-first search on a given adjacency matrix
% Input:
%   adj_matrix: a square binary matrix representing the graph
%   start_node: the starting node for the search
%
% Output:
%   result: an ordered list of nodes visited during the search

% create empty stack and visited array
stack = [];
visited = zeros(1, size(adj_matrix, 1));

% push start node onto stack
stack = [stack, start_node];

while ~isempty(stack)
    % pop top node from stack
    node = stack(end);
    stack(end) = [];
    
    % if node has not been visited yet
    if ~visited(node)
        % mark as visited and add to result list
        visited(node) = 1;
        result = [result, node];
        
        % get neighbors of current node
        neighbors = find(adj_matrix(node,:));
        
        % push unvisited neighbors onto stack
        for i = 1:length(neighbors)
            if ~visited(neighbors(i))
                stack = [stack, neighbors(i)];
            end
        end
    end
end

end  % end of function