%% This code snippet creates a function that solves a system of linear equations using the Gaussian elimination method
% It takes in a coefficient matrix A and a constant vector b as inputs
% and returns the solution vector x.

function x = gaussianElimination(A, b)

% determine the number of rows and columns in the coefficient matrix A
[r, c] = size(A);

% check if the coefficient matrix A is a square matrix
if r ~= c
    error('Coefficient matrix must be a square matrix');
end

% check if the number of rows in the coefficient matrix A is equal to the
% number of elements in the constant vector b
if r ~= length(b)
    error('Number of rows in coefficient matrix must be equal to the length of constant vector');
end

% use forward elimination to convert the coefficient matrix into an upper
% triangular matrix
for k = 1:r-1
    % initialize pivot
    p = k;
    
    % find the index of the largest element in the kth column
    for i = k+1:r
        if abs(A(i,k)) > abs(A(p,k))
            p = i;
        end
    end
    
    % interchange the rows if necessary
    if p ~= k
        A([p,k],:) = A([k,p],:);
        b([p,k]) = b([k,p]);
    end
    
    % perform the elimination step
    for i = k+1:r
        factor = A(i,k)/A(k,k);
        A(i,:) = A(i,:) - factor*A(k,:);
        b(i) = b(i) - factor*b(k);
    end
end

% use back substitution to solve for the unknowns
x = zeros(r,1);
x(r) = b(r)/A(r,r);
for i = r-1:-1:1
    x(i) = (b(i) - A(i,i+1:r)*x(i+1:r))/A(i,i);
end

end