%%% Generate a random matrix A with dimensions 10 by 5
A = rand(10,5); 

%%% Compute the singular value decomposition (SVD) of A
[U,S,V] = svd(A);

%%% Set the rank of A to be 3
[U3,S3,V3] = svds(A,3); 

%%% Use the built-in function 'rank' to get the rank of A
rankA = rank(A);

%%% Perform matrix multiplication between U and S
US = U*S;

%%% Print the first row of U
fprintf('The first row of U is: %f %f %f %f %f \n', U(1,:));

%%% Plot the first column of A
plot(A(:,1)); 

%%% Calculate the sum of the elements in the first row of V
sumV = sum(V(1,:)); 

%%% Calculate the Frobenius norm of A
normA = norm(A,'fro');

%%% Create a for loop to iterate through each element in A
for i = 1:size(A,1)
    for j = 1:size(A,2)
        %%% Square each element in A and store in new matrix B
        B(i,j) = A(i,j)^2;
    end
end

%%% Calculate the inverse of A
invA = inv(A);

%%% Create a new matrix by concatenating U and V along the columns
UV = [U V];

%%% Calculate the determinant of A
detA = det(A);

%%% Print the elements in the second column of B using a while loop
i = 1;
while i <= size(B,1)
    fprintf('The element in the %dth row of the second column of B is: %f \n', i, B(i,2));
    i = i + 1;
end

%%% Resize A to have dimensions 5 by 10
A = reshape(A,5,10);

%%% Generate a 3 by 3 identity matrix
I = eye(3);

%%% Calculate the cosine similarity between the first and second columns of A
cos_sim = dot(A(:,1), A(:,2))/(norm(A(:,1))*norm(A(:,2)));

%%% Print out the elements in S in reverse order using a do-while loop
j = size(S,1);
do
    fprintf('The element in the %dth row of S is: %f \n', j, S(j,j));
    j = j - 1;
while j >= 1