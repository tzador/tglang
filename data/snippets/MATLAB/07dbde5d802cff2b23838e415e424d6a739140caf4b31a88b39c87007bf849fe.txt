% Set initial values
n = 1000; % number of iterations
A = ones(n,n+1); % matrix of size n x n+1 with all values initialized as 1
b = ones(n,1); % vector of size n with all values initialized as 1
tol = 10^-5; % tolerance value for convergence

% Perform Gaussian elimination with partial pivoting
for i = 1:n-1 % iterate through columns
    % Find pivot row by finding maximum absolute value in current column
    [~, pivot] = max(abs(A(i:n,i)));
    pivot = pivot + i - 1; % add current row index to get actual pivot row
    % Swap current row and pivot row
    temp = A(i,:);
    A(i,:) = A(pivot,:);
    A(pivot,:) = temp;
    temp = b(i,:);
    b(i,:) = b(pivot,:); 
    b(pivot,:) = temp;
    % Perform elimination on remaining rows
    for j = i+1:n % iterate through rows below current row
        % Calculate multiplier for row j
        m = A(j,i)/A(i,i); 
        % Update rows j to end using row i
        A(j,i:end) = A(j,i:end) - m*A(i,i:end);
        % Update corresponding value in vector b
        b(j,:) = b(j,:) - m*b(i,:);
    end
end

% Back substitution to solve for x
x = zeros(n,1); % initialize solution vector
% Start from bottom and work up
for i = n:-1:1
    % Calculate sum of known previous values multiplied by their coefficients
    s = A(i,i+1:end)*x(i+1:end); 
    % Subtract from corresponding value in vector b
    b(i,:) = b(i,:) - s;
    % Use updated b value to solve for current x value
    x(i) = b(i,:)/A(i,i);
end

% Check for convergence
if norm(A*x - b) < tol % A*x should ideally equal b
    fprintf('Solution converged within tolerance of %d\n', tol);
else
    fprintf('Solution did not converge within tolerance of %d\n', tol);
end

% Display solution
fprintf('Solution vector: \n');
disp(x);