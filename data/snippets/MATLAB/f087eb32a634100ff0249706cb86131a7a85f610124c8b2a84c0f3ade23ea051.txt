%% Load and preprocess data
data = load('data.csv'); % load data from CSV file
X = data(:, 1:end-1); % separate features
y = data(:, end); % separate labels

% Normalize features
X_norm = (X - mean(X))./std(X);

% Add intercept term to X
X = [ones(size(X, 1), 1) X_norm];

%% Define hyperparameters
alpha = 0.01; % learning rate
lambda = 0.1; % regularization parameter
num_iters = 100; % number of gradient descent iterations

%% Initialize theta
initial_theta = zeros(size(X, 2), 1); % initialize theta to zeros

%% Perform gradient descent
theta = initial_theta; % set theta to initial values
J_history = zeros(num_iters, 1); % initialize vector to track cost function values over iterations

for iter = 1:num_iters
    % Calculate gradient descent
    grad = (1/length(y))*(X'*(X*theta - y)); % calculate gradient for current theta values
    
    % Update theta values
    theta = theta - alpha*grad; % update theta using gradient descent
    
    % Calculate cost function value for current theta values
    J_history(iter) = (1/length(y))*sum((X*theta - y).^2) + (lambda/(2*length(y)))*sum(theta(2:end).^2); 
end