%% Define a function for solving a system of linear equations using LU decomposition
% Inputs:
% A - the coefficient matrix of the system
% b - the solution vector of the system
% Output:
% x - the solution vector
function x = solveLUDecomp(A, b)
% Determine the number of rows in A
[n,~] = size(A);
% Check if A is square
if n ~= size(A,2)
    error('A must be a square matrix')
end
% Initialize L and U as matrices of zeros
L = zeros(n,n);
U = zeros(n,n);
% Loop through rows and columns of A to calculate LU decomposition
for i = 1:n
    % Calculate U matrix elements
    for j = i:n
        sum = 0;
        for k = 1:i-1
            sum = sum + L(i,k)*U(k,j);
        end
        U(i,j) = A(i,j) - sum;
    end
    % Calculate L matrix elements
    for j = i+1:n
        sum = 0;
        for k = 1:i-1
            sum = sum + L(j,k)*U(k,i);
        end
        L(j,i) = (A(j,i) - sum)/U(i,i);
    end
end
% Forward substitution to solve Ly = b
y = zeros(n,1);
for i = 1:n
    sum = 0;
    for j = 1:i-1
        sum = sum + L(i,j)*y(j);
    end
    y(i) = (b(i) - sum)/L(i,i);
end
% Back substitution to solve Ux = y
x = zeros(n,1);
for i = n:-1:1
    sum = 0;
    for j = i+1:n
        sum = sum + U(i,j)*x(j);
    end
    x(i) = (y(i) - sum)/U(i,i);
end