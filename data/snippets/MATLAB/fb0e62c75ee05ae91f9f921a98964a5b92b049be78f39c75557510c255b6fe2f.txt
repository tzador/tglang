% This code snippet solves the heat equation using the Crank-Nicolson method
% Set initial conditions
nx = 1000; % number of grid points
nt = 1000; % number of time steps
T = 1; % final time
x = linspace(0,1,nx); % spatial grid
dx = x(2)-x(1); % grid spacing
dt = T/nt; % time step size
r = dt/(2*dx^2); % stability parameter
u0 = sin(pi*x); % initial condition

% Construct the tridiagonal matrix A for the implicit scheme
d = 2*(1+r)*ones(nx-1,1); % main diagonal
l = -r*ones(nx-2,1); % lower diagonal
u = -r*ones(nx-2,1); % upper diagonal
A = spdiags([l,d,u],[-1,0,1],nx-1,nx-1);

% Initialize the solution matrix U with the initial condition u0
U = zeros(nx,nt+1);
U(:,1) = u0;

% Perform time-stepping using the Crank-Nicolson method
for n = 1:nt
    % Compute the right-hand side of the linear system
    b = (1-r)*U(2:nx,n) + r*U(1:nx-1,n);
    % Solve the linear system using a backslash operator
    U(2:nx,n+1) = A\b;
    % Apply boundary conditions
    U(1,n+1) = 0;
    U(nx+1,n+1) = 0;
end

% Plot the solution at different time steps
figure(1)
plot(x,u0,'k--','LineWidth',2)
xlim([0 1])
hold on
plot(x,U(:,100),'k','LineWidth',2)
plot(x,U(:,500),'k','LineWidth',2)
plot(x,U(:,1000),'k','LineWidth',2)
xlabel('x')
ylabel('u(x,t)')
legend('Initial condition','t = 0.1','t = 0.5','t = 1.0','Location','Best')
hold off

% Print the final solution
fprintf('The solution at t = 1.0 is:\n')
disp(U(:,end))