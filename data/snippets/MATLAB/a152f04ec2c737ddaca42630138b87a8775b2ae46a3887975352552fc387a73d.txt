% Define a 3x3 identity matrix
I = eye(3);

% Create a random 3x3 matrix
A = rand(3);

% Calculate the eigenvalues and eigenvectors of A
[eig_vals, eig_vecs] = eig(A);

% Display the result
disp("The eigenvalues of A are:");
disp(eig_vals);
disp("The eigenvectors of A are:");
disp(eig_vecs);

% Check if A is symmetric
if A == A'
    disp("A is symmetric");
else
    disp("A is not symmetric");
end

% Calculate the Frobenius norm of A
fro_norm = norm(A, 'fro');

% Create a vector of ones
ones_v = ones(3,1);

% Convert A and ones_v to symbolic variables
syms A_syms ones_v_syms;

% Calculate the dot product of A_syms and ones_v_syms
dot_prod = dot(A_syms, ones_v_syms);

% Create a figure and plot the elements of A
figure;
scatter(1:9, A(:), 'filled');
title("Elements of Matrix A");
xlabel("Index");
ylabel("Element Value"); 

% Calculate the trace of A
trace_A = trace(A);

% Define a 3x3 matrix
B = [1, 2, 3; 4, 5, 6; 7, 8, 9];

% Add A and B element-wise 
A_plus_B = A + B;

% Print the result of the addition
disp("A plus B equals:");
disp(A_plus_B);

% Transpose B
B_t = B';

% Calculate the determinant of B
det_B = det(B);

% Check if A is singular
if det(A) == 0
    disp("A is singular");
else
    disp("A is non-singular");
end

% Create a vector of even numbers
even_nums = 2:2:10;

% Calculate the mean of even_nums
even_nums_mean = mean(even_nums);

% Define a function that takes in two matrices and returns their product
function prod = matrix_product(A, B)
    % Calculate the product of A and B
    prod = A * B;
end

% Call the function with A and B as inputs
AB_prod = matrix_product(A, B);

% Print the product of A and B
disp("The product of A and B is:");
disp(AB_prod);