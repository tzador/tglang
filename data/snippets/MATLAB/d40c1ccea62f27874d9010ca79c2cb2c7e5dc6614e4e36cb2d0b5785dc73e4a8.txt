% This code snippet calculates the inverse of a square matrix using the Gauss-Jordan elimination method
% Define the matrix to be inverted
A = [2 -1 0; -1 2 -1; 0 -1 2];
% Extract the size of the matrix
[m, n] = size(A);
% Create an identity matrix of the same size
I = eye(m);
% Perform forward elimination
for i = 1:m-1
    % Check for zero pivot
    if A(i, i) == 0
        % Find the maximum value below current pivot
        [max_val, max_ind] = max(A(i+1:m, i));
        % Swap rows to make the pivot non-zero
        temp = A(i, :);
        A(i, :) = A(max_ind+i, :);
        A(max_ind+i, :) = temp;
        temp = I(i, :);
        I(i, :) = I(max_ind+i, :);
        I(max_ind+i, :) = temp;
    end
    % Eliminate elements below pivot
    for j = i+1:m
        % Calculate multiplier
        k = A(j, i)/A(i, i);
        % Subtract from row
        A(j, :) = A(j, :) - k*A(i, :);
        I(j, :) = I(j, :) - k*I(i, :);
    end
end
% Perform backward substitution
for i = m:-1:2
    % Eliminate elements above pivot
    for j = i-1:-1:1
        % Calculate multiplier
        k = A(j, i)/A(i, i);
        % Subtract from row
        A(j, :) = A(j, :) - k*A(i, :);
        I(j, :) = I(j, :) - k*I(i, :);
    end
end
% Divide each row by the pivot to obtain the inverse
for i = 1:m
    I(i, :) = I(i, :)/A(i, i);
end
% Print the inverse matrix
disp("The inverse of the given matrix is:");
disp(I)