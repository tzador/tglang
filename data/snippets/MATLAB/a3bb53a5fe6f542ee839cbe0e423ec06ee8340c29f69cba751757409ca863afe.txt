% This code calculates the estimated coefficient of determination (R^2) for a polynomial regression model 
% with degree d using leave-one-out cross-validation
% X: independent variables 
% y: dependent variable 
% d: degree of polynomial

% Initialize vector to store R^2 values for each degree
R2 = zeros(d, 1); 

% Use nested for loops to iterate through each degree and each data point for leave-one-out cross-validation
for i = 1:d 
    for j = 1:length(X) 
        % Select X values except for j-th data point 
        X_train = X([1:j-1 j+1:end]); 
        
        % Select j-th data point for testing 
        x_test = X(j); 
        
        % Fit polynomial regression model with d degree using training data 
        model = polyfit(X_train, y, d); 
        
        % Calculate model predictions for test data 
        y_pred = polyval(model, x_test); 
        
        % Calculate sum of squares of residuals for test data 
        SS_res = sum((y_pred - y(j)).^2); 
        
        % Calculate total sum of squares for test data 
        SS_tot = sum((y - mean(y)).^2); 
        
        % Calculate R^2 for current degree and data point 
        R2(i) = R2(i) + (1 - SS_res/SS_tot); 
    end 
    
    % Calculate average R^2 value for current degree 
    R2(i) = R2(i)/length(X); 
end

% Find degree with highest R^2 value and corresponding model 
[d_max, i_max] = max(R2); 
model = polyfit(X, y, d_max); 

% Plot data points and fitted polynomial regression model 
plot(X, y, 'o'); 
hold on; 
plot(X, polyval(model, X)); 
xlabel('X'); 
ylabel('y'); 
title(['Polynomial regression with d = ' num2str(d_max) ' and R^2 = ' num2str(d_max)]); 
legend('Data Points', 'Fitted Model'); 
hold off;