% This is a code snippet in MATLAB to calculate the Fast Fourier Transform (FFT) of a given signal.
% First, we define the input signal, which is a sinusoidal wave with frequency 10Hz and amplitude 5.
input_signal = 5*sin(2*pi*10*(0:0.01:1));

% Next, we define the sampling frequency, which is 100Hz.
sampling_freq = 100;

% Then, we calculate the number of samples in the signal.
n_samples = length(input_signal);

% To ensure that the signal length is a power of 2 (required for FFT), we pad the signal with zeros.
% We calculate the next power of 2 using the log2 function and pad the signal with zeros accordingly.
next_power_of_2 = 2^ceil(log2(n_samples));
input_signal = [input_signal, zeros(1, next_power_of_2 - n_samples)];

% To perform FFT, we use the built-in function fft() with the input signal and sampling frequency as parameters.
fft_output = fft(input_signal, n_samples);

% The output of FFT is a complex vector, with a real and imaginary component.
% To plot the FFT output, we need to calculate the frequencies corresponding to each point in the output vector.
frequencies = sampling_freq*(0:(n_samples/2))/n_samples;

% To plot the magnitude of FFT output, we use the abs() function.
% We also need to normalize the output by dividing it by the number of samples.
fft_magnitude = abs(fft_output(1:n_samples/2+1))/n_samples;

% Finally, we plot the FFT output using the plot() function and label the axes.
plot(frequencies, fft_magnitude)
xlabel('Frequency (Hz)')
ylabel('Amplitude')
title('FFT of Input Signal')