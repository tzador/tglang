%% Function to implement the Gauss-Jacobi method for solving a system of linear equations
%Inputs:
%A: Coefficient matrix of the system
%b: Right hand side vector
%x0: Initial guess for the solution
%tol: Tolerance value for convergence
%max_iter: Maximum number of iterations
%Outputs:
%x: Solution vector
%iter: Number of iterations performed

function [x, iter] = gauss_jacobi(A, b, x0, tol, max_iter)

% Get the size of the system
n = size(A, 1);

% Initialize solution vector, iteration number and error
x = x0;
iter = 0;
err = inf;

% Loop until error falls below tolerance or maximum number of iterations is reached
while err > tol && iter < max_iter
    % Initialize temporary solution vector
    x_temp = zeros(n, 1);
    
    % Iterate through each row of the system
    for i = 1:n
        % Calculate the sum of off-diagonal elements multiplied by their respective solutions
        sum = 0;
        for j = 1:n
            if j ~= i
                sum = sum + A(i, j) * x(j);
            end
        end
        % Calculate the new solution for this row
        x_temp(i) = (b(i) - sum) / A(i, i);
    end
    
    % Calculate the error using the 2-norm of the difference between the two solution vectors
    err = norm(x_temp - x, 2);
    
    % Update the solution vector and increment the iteration number
    x = x_temp;
    iter = iter + 1;
end

if iter >= max_iter
    % Display warning message if maximum number of iterations is reached
    warning('Maximum number of iterations reached.');
end
end

% Example usage:
%A = [3 -1 1; 1 -4 2; -2 1 5];
%b = [5; -8; 12];
%x0 = [1; 1; 1];
%[x, iter] = gauss_jacobi(A, b, x0, 1e-6, 100); % Tolerance = 1e-6, maximum 100 iterations