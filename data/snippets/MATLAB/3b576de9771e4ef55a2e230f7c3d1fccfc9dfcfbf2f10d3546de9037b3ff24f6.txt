%% This code snippet uses the Extended Kalman Filter (EKF) for state estimation in nonlinear systems

% Define system dynamics
A = [1 0; 0 1]; % state transition matrix
B = [0.5 0; 0 1]; % input matrix
C = [1 0; 0 1]; % output matrix

% Define initial states and covariance matrix
x0 = [0; 0]; % initial state vector
P0 = [1 0; 0 1]; % initial covariance matrix

% Define process and measurement noise
Q = [0.01 0; 0 0.01]; % process noise covariance matrix
R = [0.1 0; 0 0.1]; % measurement noise covariance matrix

% Define input and output data
u = randn(2,100); % random input data
y = zeros(2,100); % empty output data matrix

% Simulate system
x = zeros(2,100); % initialize state estimate matrix
x(:,1) = x0; % set initial state estimate
for k = 2:100
    x(:,k) = A*x(:,k-1) + B*u(:,k); % propagate state estimate
    y(:,k) = C*x(:,k) + Q*randn(2,1); % generate noisy measurement
end

% Implement EKF algorithm
for k = 1:100
    % Predict step
    x_hat = A*x(:,k) + B*u(:,k); % predicted state estimate
    P_hat = A*P0*A' + Q; % predicted covariance matrix
    
    % Update step
    K = P_hat*C'/(C*P_hat*C' + R); % calculate Kalman gain
    x(:,k+1) = x_hat + K*(y(:,k+1) - C*x_hat); % update state estimate
    P0 = (eye(2) - K*C)*P_hat; % update covariance matrix
end

% Plot results
t = 1:100; % time vector
figure
plot(t,x(1,:),t,y(1,:),'--') % plot state estimate and noisy measurement
legend('State estimate','Measurement')
ylabel('State value')
xlabel('Time step')