%%% Initialize Variables %%%

% Set the number of generations
numGenerations = 100;

% Set the population size
popSize = 50;

% Initialize population matrix
population = rand(popSize, 10);

%%% Create Fitness Function %%%

% Define fitness function
fitnessFunc = @(x) sum(x.^2);

%%% Main Loop %%%

% Initialize best individual and best fitness
bestInd = zeros(1,10);
bestFit = Inf;

% Loop through specified number of generations
for gen = 1:numGenerations
    
    % Calculate fitness for each individual in population
    fits = zeros(1, popSize);
    for i = 1:popSize
        fits(i) = fitnessFunc(population(i,:));
    end
    
    % Find best individual and corresponding fitness
    [minFit, idx] = min(fits);
    if minFit < bestFit
        bestInd = population(idx,:);
        bestFit = minFit;
    end
    
    % Create new population by selecting top 20% and performing
    % crossover and mutation
    newPop = population(idx,:);
    for i = 1:popSize/5
        % Select two parents randomly
        parent1 = population(randi(popSize), :);
        parent2 = population(randi(popSize), :);
        
        % Perform crossover
        crossoverIdx = randi(10);
        child = [parent1(1:crossoverIdx), parent2(crossoverIdx+1:end)];
        
        % Perform mutation
        mutationIdx = randi(10);
        child(mutationIdx) = rand();
        
        % Add child to new population
        newPop = [newPop; child];
        
    end
    
    % Update population
    population = newPop;
    
end

%%% Print Best Individual and Fitness %%%
disp("Best Individual:");
disp(bestInd);
disp("Best Fitness:");
disp(bestFit);