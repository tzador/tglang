% Set up initial parameters and conditions
data = randn(1000,3); % Generate random data matrix
num_clusters = 3; % Set number of clusters
max_iters = 10; % Set maximum number of iterations
centroids = zeros(num_clusters,3); % Initialize centroids matrix
cluster_idx = zeros(size(data,1),1); % Initialize cluster index vector
distances = zeros(size(data,1),num_clusters); % Initialize distance matrix

% Perform k-Means algorithm
for i=1:max_iters
    % Calculate Euclidean distance between each data point and each centroid
    for j=1:num_clusters
        distances(:,j) = sqrt(sum(bsxfun(@minus,data,centroids(j,:)).^2,2));
    end
    
    % Assign each data point to its closest centroid
    [~, cluster_idx] = min(distances,[],2);
    
    % Calculate new centroid positions
    for k=1:num_clusters
        centroids(k,:) = mean(data(cluster_idx==k,:));
    end
end

% Plot final results
figure;
scatter(data(:,1),data(:,2),[],cluster_idx,'filled');
hold on;
scatter(centroids(:,1),centroids(:,2),200,[1:num_clusters],'filled','^');
legend('Data','Centroids');
xlabel('Feature 1');
ylabel('Feature 2');
title('k-Means Clustering Results');
hold off;