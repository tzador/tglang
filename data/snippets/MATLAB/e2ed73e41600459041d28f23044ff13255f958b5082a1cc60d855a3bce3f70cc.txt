% This code snippet solves the Knapsack problem using dynamic programming approach

clear all;
close all;
clc;

% Input data
n = input('Enter number of items: ');
c = input('Enter total capacity: ');

for i = 1:n
    profit(i) = input(strcat('Enter profit for item ', num2str(i), ': '));
    weight(i) = input(strcat('Enter weight for item ', num2str(i), ': '));
end

% Initializations
memo = zeros(n+1, c+1); % Initialize memoization matrix
items = cell(n+1, c+1); % Initialize items matrix to keep track of selected items

% Solve subproblems using dynamic programming
for i = 1:n+1
    for w = 1:c+1
        % Base case: No items or no capacity
        if i==1 || w==1
            memo(i,w) = 0;
        % Check if current item can be included in optimal solution
        elseif weight(i-1) <= w
            remaining_cap = w - weight(i-1); 
            % Calculate maximum profit if current item is included
            included_profit = profit(i-1) + memo(i-1,remaining_cap);
            % Calculate maximum profit if current item is not included
            excluded_profit = memo(i-1,w);
            % Choose maximum profit and update memoization matrix
            memo(i,w) = max(included_profit, excluded_profit);
            % Keep track of selected items
            if memo(i,w) == included_profit
                items{i, w} = strcat(items{i-1, remaining_cap}, 'item', num2str(i-1), ', ');
            else % Item not included in optimal solution
                items{i, w} = items{i-1, w};
            end
        else % Item cannot be included in current capacity, just copy previous value
            memo(i,w) = memo(i-1,w);
            items{i, w} = items{i-1, w};
        end
    end
end

% Print optimal solution
selected_items = items{n+1, c+1};
fprintf('Optimal Solution: %s\n', selected_items);
fprintf('Optimal Total Profit: $%d\n', memo(n+1, c+1));

% Plot memoization matrix
figure;
imagesc(memo);
colorbar;
colormap jet;
xlabel('Capacity');
ylabel('Items');
title('Memoization Matrix');