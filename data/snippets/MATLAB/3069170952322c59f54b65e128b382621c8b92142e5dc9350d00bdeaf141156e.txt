%This code snippet implements the Jacobi method for solving a system of linear equations
%A is the n x n coefficient matrix of the system
%b is the n x 1 vector of constants
%x is the n x 1 vector representing the solution to the system

n = size(A,1); %get the size of the matrix A (the number of rows)
xOld = zeros(n,1); %initialize a vector for the old values of x
xNew = zeros(n,1); %initialize a vector for the new values of x
tol = 1e-6; %tolerance for convergence
maxIter = 1000; %maximum number of iterations

for iter = 1:maxIter %loop for the maximum number of iterations
    for i = 1:n %loop through each row of A and b
        sum = 0; %initialize sum variable for the iterative step
        for j = 1:n %loop through each column of A
            if j ~= i %if the column is not the same as the current row
                sum = sum + A(i,j)*xOld(j); %compute the sum of the previous solutions
            end
        end
        xNew(i) = (1/A(i,i))*(b(i) - sum); %update the new values of x
    end
    if abs(norm(xNew-xOld)) < tol %check for convergence using the difference between old and new x values
        fprintf('Converged at iteration %d\n',iter); %print the iteration at which it converged
        x = xNew; %set the solution vector to be the converged values of x
        break %break out of the main loop
    end
    xOld = xNew; %update the old values with the new values for the next iteration
end

if iter == maxIter %if the loop reaches the maximum number of iterations without convergence
    disp('Maximum number of iterations reached'); %print a message indicating no convergence
end