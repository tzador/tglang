%% Random Walk Simulation
% This code simulates a random walk in 2 dimensions using the Metropolis
% algorithm. It starts at the origin and calculates the walker's path
% after a specified number of steps.
% Author: John Doe
% Date: 11/20/2021

% Initialize variables
num_steps = 100; % number of steps to simulate
x = zeros(1,num_steps); % array to store x coordinates
y = zeros(1,num_steps); % array to store y coordinates
current_x = 0; % initial x coordinate
current_y = 0; % initial y coordinate

% Set up figure to plot path
figure;
hold on; % keeps previous plots visible
title('Random Walk Simulation');
xlabel('X');
ylabel('Y');

% Main loop for simulating steps
for i = 1:num_steps
    % Generate new x and y coordinates randomly
    new_x = current_x + randi([-1,1]); % chooses between -1, 0, or 1
    new_y = current_y + randi([-1,1]);
    
    % Calculate Metropolis probability
    del_E = -2*(current_x*new_x + current_y*new_y); % change in energy
    if del_E <= 0 % if new position lowers energy
        accept_prob = 1; % set acceptance probability to 1
    else % if new position raises energy
        accept_prob = exp(-del_E); % calculate acceptance probability
    end
    
    % Accept or reject new position
    if rand <= accept_prob % if random number is less than accept probability
        % Update current position and arrays
        current_x = new_x;
        current_y = new_y;
        x(i) = new_x;
        y(i) = new_y;
    else % if random number is greater than accept probability
        % Keep current position and update arrays
        x(i) = current_x;
        y(i) = current_y;
    end
    
    % Plot path
    plot(x,y,'b-','LineWidth',3);
    pause(0.1); % pause to slow down animation
end

% Plot starting and ending points
plot(0,0,'ro','LineWidth',3);
plot(current_x,current_y,'go','LineWidth',3);

% Calculate and display final displacement from origin
disp(['Final displacement from origin: ',num2str(sqrt(current_x^2 + current_y^2))]);

% Display legend and grid
legend('Path','Starting Point','Ending Point');
grid on;