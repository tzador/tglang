% This code snippet calculates the inverse of a matrix using the Gauss-Jordan Elimination method.
% It takes in a square matrix A and returns the inverse matrix A_inv.
function A_inv = inverse(A)
% Initialize the identity matrix
I = eye(size(A));
% Augment the identity matrix to A
A_aug = [A, I];
n = size(A,1); % Size of the square matrix
% Perform Gauss-Jordan elimination
for i = 1:n
    % Find the largest element in the ith column
    [~,max_row] = max(abs(A_aug(i:n,i))); 
    max_row = max_row + i - 1;
    % Swap the rows to bring the largest element to the top
    temp = A_aug(i,:);
    A_aug(i,:) = A_aug(max_row,:);
    A_aug(max_row,:) = temp;
    % Divide the pivot row by the pivot element to make it 1
    pivot = A_aug(i,i);
    A_aug(i,:) = A_aug(i,:) / pivot;
    % Use row operations to make the rest of the elements in column i to be 0
    for j = 1:n
        if j ~= i % Avoid the pivot row
            row_op = A_aug(j,i) / A_aug(i,i); % The factor to multiply by the pivot row
            A_aug(j,:) = A_aug(j,:) - row_op * A_aug(i,:);
        end
    end
end
% The inverse matrix is the second half of A_aug
A_inv = A_aug(:,(n+1):end);