% This code snippet finds the roots of a given polynomial using Newton's method

% Define the polynomial function as an inline function
f = @(x) x.^3 - 2*x.^2 + 3; 

% Define the derivative of the polynomial as a symbolic function
fprime = diff(sym(f)); 

% Set initial guess for the root
x0 = 2; 

% Set tolerance for convergence 
tol = 1e-6; 

% Set maximum number of iterations to prevent infinite looping 
max_iter = 100;

% Initialize iteration counter 
iter = 0; 

% Loop until convergence or maximum number of iterations is reached 
while abs(f(x0)) > tol 
    % Calculate the new estimate of the root using Newton's method 
    x1 = x0 - f(x0)/fprime(x0); 
    
    % Update the initial guess 
    x0 = x1; 
    
    % Increment iteration counter 
    iter = iter + 1; 
    
    % Check for maximum number of iterations 
    if iter > max_iter 
        % If maximum number of iterations is reached, display an error message 
        disp('Maximum number of iterations reached'); 
        
        % Terminate the program 
        return 
    end
end

% Display the root and the number of iterations 
disp(['Root: ' num2str(x0)]);
disp(['Number of iterations: ' num2str(iter)]);

% Plot the polynomial and the root 
x = linspace(-2, 4, 100); 
plot(x, f(x)); 
hold on;
plot(x0, f(x0), 'o'); 
title('Root of a Polynomial using Newtons Method'); 
xlabel('x'); 
ylabel('f(x)'); 
legend('Polynomial', 'Root');