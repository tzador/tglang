%% Optimization using particle swarm optimization
clc; %Clear command window
clear all; %Clear all variables from workspace
close all; %Close all figures
% Define objective function to be minimized
fun = @(x) x(1)^2+x(2)^2-x(1)*x(2)-10*x(2);
% Set lower and upper bounds of decision variables
lb = [-10,-10];
ub = [10,10];
% Set number of particles and iteration
npar = 20; % Numbers of particles
max_it = 100; % Maximum number of iterations
% Initialize random positions for particles
x0 = rand(npar,2).*repmat(ub-lb,npar,1) + repmat(lb,npar,1);
% Initialize velocity for particles
v0 = zeros(npar,2);
% Initialize best position and best value for each particle
pbest_pos = x0; % Best position of particle
pbest_val = fun(pbest_pos); % Best value of particle
% Initialize best global position and best global value
gbest_pos = x0(1,:); % Best global position
gbest_val = pbest_val(1); % Best global value
% Start iterations
for it = 1: max_it
    % Update velocity
    v0 = v0 + rand(npar,2).*(pbest_pos-x0) + rand(npar,2).*(gbest_pos-x0);
    % Update position
    x0 = x0 + v0;
    % Apply boundaries for position
    x0(x0>ub) = ub;
    x0(x0<lb) = lb;
    % Update pbest and gbest
    for i = 1:npar
        % Calculate value for new position
        fnew = fun(x0(i,:));
        % Update pbest if new value is better
        if fnew < pbest_val(i)
            pbest_val(i) = fnew;
            pbest_pos(i,:) = x0(i,:);
        end
        % Update gbest if new value is better
        if fnew < gbest_val
            gbest_val = fnew;
            gbest_pos = x0(i,:);
        end
    end
end
% Display results
fprintf('The optimized value using Particle Swarm Optimization is: %f\n', gbest_val);
fprintf('The optimized position is: (%f, %f)\n', gbest_pos(1),gbest_pos(2));