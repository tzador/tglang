% This code snippet uses the Newton-Raphson method to find the root of a given function f(x).
% Inputs: 
% f - anonymous function representing the function f(x)
% x0 - starting guess for the root of f(x)
% tol - tolerance for the error in the root
% max_iter - maximum number of iterations to perform
% Output:
% x - estimated root of f(x)
% iter - number of iterations performed

function [x, iter] = newton_raphson(f, x0, tol, max_iter)

% Initialize variables
x = x0;
iter = 0;
err = f(x);

% Loop until error is within tolerance or maximum number of iterations is reached
while abs(err) > tol && iter < max_iter
    
    % Calculate the derivative of f(x) using the Symbolic Math Toolbox (requires installation)
    dfdx = diff(f(x));
    
    % Calculate the new estimate for the root using the Newton-Raphson formula
    x = x - f(x)/dfdx(x);
    
    % Update the error and iteration count
    err = f(x);
    iter = iter + 1;
    
end

% Check if the maximum number of iterations was reached without finding a root within tolerance
if iter == max_iter && abs(err) > tol
    error('Maximum number of iterations reached without finding a root within tolerance');
end

end