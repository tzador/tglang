% Set up initial conditions
initial_position = [0 0 0];  % [x, y, z]
initial_velocity = [5 10 0]; % [Vx, Vy, Vz]
initial_acceleration = [0 -9.8 0]; % [Ax, Ay, Az]

% Define constants
mass = 50;  % mass in kg
gravity = 9.8;  % acceleration due to gravity in m/s^2

% Create time variables
t_start = 0;  % start time in seconds
t_end = 10;  % end time in seconds
dt = 0.01;   % time step in seconds
t = t_start:dt:t_end; % array containing time steps

% Initialize position, velocity, and acceleration arrays
position = zeros(3,length(t)); % [x; y; z]
velocity = zeros(3,length(t)); % [Vx; Vy; Vz]
acceleration = zeros(3,length(t)); % [Ax; Ay; Az]

% Set initial values for position, velocity, and acceleration arrays
position(:,1) = initial_position';  % transpose initial position vector to column vector
velocity(:,1) = initial_velocity';  % transpose initial velocity vector to column vector
acceleration(:,1) = initial_acceleration';  % transpose initial acceleration vector to column vector

% Calculate position, velocity, and acceleration at each time step using Euler's method
for i = 2:length(t)
    % Calculate acceleration using Newton's second law F = ma
    F = [0; -mass * gravity; 0];  % force vector in Newtons
    a = F / mass;  % acceleration vector in m/s^2
    
    % Update velocity using Euler's method v(n+1) = v(n) + a(n) * dt
    velocity(:,i) = velocity(:,i-1) + a * dt;
    
    % Update position using Euler's method x(n+1) = x(n) + v(n) * dt
    position(:,i) = position(:,i-1) + velocity(:,i-1) * dt;
    
    % Store the calculated acceleration for the next time step
    acceleration(:,i) = a;
end

% Plot the results
figure;
subplot(3,1,1);
plot(t,position(1,:));  % plot x position vs. time
xlabel('Time (s)');
ylabel('X Position (m)');
title('Projectile Motion');

subplot(3,1,2);
plot(t,velocity(2,:));  % plot y velocity vs. time
xlabel('Time (s)');
ylabel('Y Velocity (m/s)');

subplot(3,1,3);
plot(t,acceleration(3,:));  % plot z acceleration vs. time
xlabel('Time (s)');
ylabel('Z Acceleration (m/s^2)');