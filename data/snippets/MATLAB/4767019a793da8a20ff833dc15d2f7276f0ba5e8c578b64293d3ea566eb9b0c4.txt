% This function calculates the inverse of a square matrix using the Gauss-Jordan elimination method.

% Define the function with two input arguments, the matrix (A) and the identity matrix (I)
function inv = gauss_jordan_inverse(A, I)

% Get the dimensions of the matrix
[m, n] = size(A);

% Check if the matrix is square
if m ~= n
    error('Input matrix must be square');
end

% Build an augmented matrix by appending the identity matrix to the right of the input matrix
aug_matrix = [A, I];

% Use Gauss-Jordan elimination to put the augmented matrix in reduced row echelon form
% Loop through each column
for j = 1:n
    % Perform row operations to get zeros below the diagonal element (A(j, j)) in the jth column
    for i = 1:m
        if i ~= j
            multiplier = aug_matrix(i, j) / aug_matrix(j, j);
            aug_matrix(i, :) = aug_matrix(i, :) - multiplier * aug_matrix(j, :);
        end
    end
    % Divide the whole row by the diagonal element to get a leading one
    aug_matrix(j, :) = aug_matrix(j, :) / aug_matrix(j, j);
end

% The inverse matrix is the right half of the augmented matrix
inv = aug_matrix(:, (n+1):end);