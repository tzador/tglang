%% This code snippet implements Newton's method to find root of a polynomial function
% Initialize variables
f = @(x) x^3 - 5*x^2 + 9; % Polynomial function
df = @(x) 3*x^2 - 10*x; % Derivative of polynomial function
tol = 1e-6; % Tolerance
maxIter = 100; % Maximum number of iterations
k = 0; % Iteration counter
x0 = 1; % Initial guess
error = tol + 1; % Set initial error to be greater than tolerance
% Loop until error is less than tolerance or maximum number of iterations is reached
while (error > tol) && (k < maxIter)
    x1 = x0 - (f(x0) / df(x0)); % Calculate next approximation
    error = abs(x1 - x0); % Calculate error
    x0 = x1; % Update approximation
    k = k + 1; % Increase iteration counter
end
% Display results
if k < maxIter
    fprintf('Root of the polynomial function is: %f\n', x1); % Print root
    fprintf('Number of iterations: %d\n', k); % Print number of iterations
else
    fprintf('Maximum number of iterations reached\n'); % Print error message
end