% This code snippet calculates the discrete Fourier transform (DFT) of a signal using the fast Fourier transform (FFT) algorithm.

% Generate a random signal of length 256
signal = rand(1,256);

% Calculate the DFT using FFT algorithm
dft = fft(signal);

% Plot the signal and its DFT
figure
subplot(2,1,1)
plot(1:256, signal)
title('Input signal')
yticks([])
subplot(2,1,2)
plot(1:256, abs(dft))
title('Discrete Fourier Transform')
xlabel('Frequency (Hz)')

% Create a low pass filter with cut-off frequency of 20 Hz
N = 256; % number of samples
Fs = 100; % sampling frequency
fc = 20; % cut-off frequency
% Design the filter using a Kaiser window method
w = kaiser(N, 6); % using a Kaiser window with shape factor of 6
b = fir1(N-1, fc/(Fs/2), 'low', w); % FIR filter design
% Apply the filter to the signal using convolution
filtered_signal = conv(signal, b, 'same');

% Calculate the DFT of the filtered signal
dft_filtered = fft(filtered_signal);

% Plot the filtered signal and its DFT
figure
subplot(2,1,1)
plot(1:256, filtered_signal)
title('Filtered signal')
yticks([])
subplot(2,1,2)
plot(1:256, abs(dft_filtered))
title('Discrete Fourier Transform of filtered signal')
xlabel('Frequency (Hz)')