% This code snippet calculates the determinant of a NxN matrix using recursive cofactor expansion
function determinant = calculateDeterminant(matrix)
% @param matrix: The NxN matrix whose determinant is to be calculated
% @return determinant: The determinant of the input matrix

% Check if matrix is square
[m, n] = size(matrix);
if m ~= n
    fprintf('Input matrix must be square.');
    return;
end

% Define base case
if n == 1
    determinant = matrix(1,1);
    return;
end

% Initialize determinant to zero
determinant = 0;

% Create a temporary matrix to store cofactors
temp = zeros(n-1);

% Loop through first row of matrix
for i = 1:n
    % Calculate the minor of the current element
    minor = calculateMinor(matrix, i);
    
    % Calculate the cofactor of the current element
    cofactor = (-1)^(1+i) * minor;
    
    % Store the cofactor in the temporary matrix
    temp(1:n-1, i) = cofactor;
    
    % Calculate the determinant using recursive cofactor expansion
    determinant = determinant + matrix(1,i) * cofactor * calculateDeterminant(temp(1:n-1, 1:n-1));
end
end

% Helper function to calculate the minor of a given element
function minor = calculateMinor(matrix, element)
% @param matrix: The NxN matrix whose minor is to be calculated
% @param element: The element whose minor is to be calculated
% @return minor: The minor of the element in the input matrix

% Create a temporary matrix to store elements of the minor
minor = zeros(size(matrix)-1);

% Loop through the rows and columns of the input matrix
for i = 1:size(minor,1)
    for j = 1:size(minor,2)
        % Check for the row and column of the current element
        % If it is the same as the element, skip it
        if i == 1
            new_i = i + 1;
        else
            new_i = i;
        end
        
        if j == element
            new_j = j + 1;
        else
            new_j = j;
        end
        
        % Populate the minor matrix
        minor(i,j) = matrix(new_i,new_j);
    end
end
end