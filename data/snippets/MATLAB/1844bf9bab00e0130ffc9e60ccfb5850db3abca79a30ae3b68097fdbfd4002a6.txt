% This code snippet creates a function that solves a set of linear equations using the Gauss-Jordan method
function [x] = gauss_jordan(A,b)
%     Inputs:
%         A: Coefficient matrix
%         b: Right hand side vector
%     Output:
%         x: Solution vector
        
%     Step 1: Augment the coefficient matrix with the right hand side vector
A_aug = [A, b];

%     Step 2: Convert all non-leading entries in the first column to zero
%     by using row operations
for i=2:length(A_aug)
    A_aug(i,:) = A_aug(i,:) - (A_aug(i,1)/A_aug(1,1))*A_aug(1,:);
end

%     Step 3: Repeat Step 2 for the rest of the columns
for j=2:length(A)
    for i=j+1:length(A_aug)
        A_aug(i,:) = A_aug(i,:) - (A_aug(i,j)/A_aug(j,j))*A_aug(j,:);
    end
end

%     Step 4: Reduce all leading entries to 1 by dividing the row by the
%     leading entry
for i=1:length(A_aug)
    A_aug(i,:) = A_aug(i,:)/A_aug(i,i);
end

%     Step 5: Get the solution vector from the augmented matrix
x = A_aug(:,end);