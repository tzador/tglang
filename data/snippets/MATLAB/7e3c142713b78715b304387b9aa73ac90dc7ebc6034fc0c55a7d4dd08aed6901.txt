% Define a matrix with 5 rows and 3 columns 
A = [1,2,3;4,5,6;7,8,9;10,11,12;13,14,15]

% Find the sum of all elements in the matrix
sum = sum(A(:))

% Calculate the mean of each row
mean_rows = mean(A,2)

% Calculate the standard deviation of each column
std_columns = std(A)

% Create a 5x1 vector of random integers between 1 and 100
B = randi([1,100],5,1)

% Normalize the matrix by subtracting the mean of each row and dividing by the standard deviation of each column
norm_A = (A - mean_rows) ./ std_columns

% Multiply the normalized matrix by the vector B 
product = norm_A * B

% Calculate the matrix multiplication of A and its transpose
A_trans = A'
mat_mult = A * A_trans

% Display the result of the matrix multiplication in a different format
fprintf('Matrix multiplication of A and its transpose:\n');
disp(mat_mult)

% Calculate the determinant of the matrix A
det_A = det(A)

% Create an identity matrix with the same dimensions as A 
I = eye(size(A))

% Calculate the inverse of A 
inv_A = inv(A)

% Check if the inverse of A is correct by multiplying it with A (should result in identity matrix)
check_A = inv_A * A

% Calculate the eigenvalues and eigenvectors of the matrix A
[eig_vec, eig_val] = eig(A)

% Plot the eigenvalues as a bar graph
bar(eig_val)

% Add titles and labels to the bar graph
title('Eigenvalues of Matrix A')
xlabel('Eigenvalue index')
ylabel('Eigenvalue')

% Calculate the singular value decomposition of A
[U,S,V] = svd(A)

% Print the first and last row of the matrix U 
fprintf('First row of U:\n');
disp(U(1,:));
fprintf('Last row of U:\n');
disp(U(end,:));