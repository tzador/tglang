%% This code snippet solves a system of linear equations using Gauss-Seidel Iteration method.
% The algorithm iteratively improves the initial estimates for each
% unknown variable until a desired tolerance level is reached.

%% Input variables
A = input('Enter the coefficient matrix A: '); % Input matrix
b = input('Enter the right-hand side vector b: '); % Input vector
n = input('Enter number of variables: '); % Input number of variables
x0 = input('Enter initial estimates for variables: '); % Input initial estimates for variables
tol = input('Enter desired tolerance level: '); % Input desired tolerance level

%% Calculations
xnew = zeros(n,1); % Initialize new estimate vector
count = 0; % Initialize iteration count
err = norm(A*x0 - b); % Calculate error between initial estimates and actual solution
while err > tol % Loop until desired tolerance level is reached
    for i = 1:n % Loop through each variable
        sigma = 0; % Initialize sum variable
        for j = 1:n % Loop through each coefficient
            if j ~= i % If not on diagonal
                sigma = sigma + A(i,j)*xnew(j); % Calculate sum
            end
        end
        xnew(i) = (1/A(i,i))*(b(i) - sigma); % Update new estimate for variable
    end
    err = norm(A*xnew - b); % Calculate new error between new estimates and actual solution
    count = count + 1; % Increment iteration count
    x0 = xnew; % Update initial estimates with new estimates
end

%% Output
disp(['Solution for x:']); % Display solution
disp(xnew); % Display variables with updated estimates
disp(['Number of iterations: ', num2str(count)]); % Display number of iterations