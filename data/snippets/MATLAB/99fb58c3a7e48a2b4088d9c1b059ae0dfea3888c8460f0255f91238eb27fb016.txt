%% Runge-Kutta method
% This code snippet implements the fourth-order Runge-Kutta method for solving an
% ordinary differential equation (ODE). The method is widely used for its
% accuracy and stability.

% Define the ODE
f = @(t,y) t * y + t;

% Define the initial values and the step size
t0 = 0;
y0 = 0;
h = 0.1;

% Calculate the number of iterations
N = 10 / h;

% Initialize arrays to store the values of t and y
t = zeros(N, 1);
y = zeros(N, 1);

% Set the initial values
t(1) = t0;
y(1) = y0;

% Implement the Runge-Kutta method
for n = 1:N-1
    
    % Calculate k1, k2, k3, and k4
    k1 = h * f(t(n), y(n));
    k2 = h * f(t(n) + h/2, y(n) + k1/2);
    k3 = h * f(t(n) + h/2, y(n) + k2/2);
    k4 = h * f(t(n) + h, y(n) + k3);
    
    % Calculate y(n+1)
    y(n+1) = y(n) + (1/6) * (k1 + 2*k2 + 2*k3 + k4);
    
    % Update t(n)
    t(n+1) = t(n) + h;
end

% Plot the solution
plot(t, y)
xlabel('t')
ylabel('y(t)')
title('Solution of ODE using Runge-Kutta method')

% Set the exact solution for comparison
t_exact = linspace(t0, t0+N*h, 100);
y_exact = -1 + exp(t_exact.^2 / 2);

% Plot the exact solution
hold on
plot(t_exact, y_exact, '--')
legend({'Numerical solution', 'Exact solution'}, 'Location', 'northwest')
hold off