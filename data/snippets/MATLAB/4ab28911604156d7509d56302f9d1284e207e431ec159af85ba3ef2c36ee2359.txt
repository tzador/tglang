% This code snippet is a function that performs the Monte Carlo method to approximate the integral of a given function over a given interval.

function output = MonteCarlo(func, a, b, n)
% func: the function to be integrated
% a: lower bound of the interval
% b: upper bound of the interval
% n: number of random points to be generated
% output: the estimated integral value

% generate n random points in the interval [a, b]
x = (b - a) * rand(n,1) + a;
% evaluate the function at the generated points
fx = feval(func, x);
% calculate the area of the rectangle
rect_area = (b - a) * max(fx);
% generate n random points in the interval [0, rect_area]
y = rect_area * rand(n,1);
% count how many random points are below the curve
count = sum(y < fx);
% calculate the estimated integral value
output = rect_area * count / n;
end

% example usage:
% define the function to be integrated
func = @(x) x.^2 + 2.*x + 1;
% define the interval [a, b]
a = 0;
b = 2;
% define the number of random points
n = 10000;
% call the MonteCarlo function
integral = MonteCarlo(func, a, b, n);
% display the estimated integral value
disp(integral);