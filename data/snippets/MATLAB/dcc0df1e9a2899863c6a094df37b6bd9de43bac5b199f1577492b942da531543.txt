% define a function called 'kalman_filter' that takes in an input signal, initial state estimate
% and initial error covariance matrix as its arguments
function [filtered_signal, state_estimate, error_covariance] = kalman_filter(input_signal, initial_estimate, initial_covariance)

% set the size of the input signal and initialize the filtered signal, state estimate, and error covariance matrix
n = length(input_signal);
filtered_signal = zeros(1,n);
state_estimate = zeros(1,n);
error_covariance = zeros(1,n);

% set the initial state estimate and error covariance matrix
state_estimate(1) = initial_estimate;
error_covariance(1) = initial_covariance;

% define the process noise covariance matrix Q and measurement noise covariance matrix R
Q = [0.0001 0; 0 0.01];
R = 0.01;

% for each time step, calculate the Kalman gain and update the state estimate and error covariance
for i = 1 : n
    % calculate the Kalman gain using the current error covariance matrix and measurement noise covariance
    K = error_covariance(i) / (error_covariance(i) + R);
    
    % update the state estimate using the Kalman gain and the current input signal
    state_estimate(i) = state_estimate(i) + K * (input_signal(i) - state_estimate(i));
    
    % update the error covariance matrix using the Kalman gain
    error_covariance(i+1) = (1-K) * error_covariance(i) + Q;
    
    % update the filtered signal using the current state estimate
    filtered_signal(i) = state_estimate(i);
end