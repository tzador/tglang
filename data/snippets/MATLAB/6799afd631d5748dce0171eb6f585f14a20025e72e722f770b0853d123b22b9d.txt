%% Define parameters
num_rows = 100; % number of rows in the matrix
num_cols = 50; % number of columns in the matrix
cutoff = 0.5; % cutoff value for filtering
max_iterations = 100; % maximum number of iterations
convergence_threshold = 0.001; % threshold for convergence
%% Initialize matrix
input_matrix = rand(num_rows, num_cols); % generates a random matrix with given dimensions
%% Apply filtering algorithm
for i = 1:max_iterations % loop over maximum number of iterations
    prev_matrix = input_matrix; % stores previous iteration matrix
    for j = 1:num_rows % loop over rows
        for k = 1:num_cols % loop over columns
            temp = 0; % initialize temporary variable
            if j ~= 1 % if not first row
                temp = temp + input_matrix(j-1,k); % add value from top neighbour
            end
            if j ~= num_rows % if not last row
                temp = temp + input_matrix(j+1,k); % add value from bottom neighbour
            end
            if k ~= 1 % if not first column
                temp = temp + input_matrix(j,k-1); % add value from left neighbour
            end
            if k ~= num_cols % if not last column
                temp = temp + input_matrix(j,k+1); % add value from right neighbour
            end
            input_matrix(j,k) = temp ./ 4; % take average of neighbours and update matrix value
            if input_matrix(j,k) < cutoff % if value is below cutoff
                input_matrix(j,k) = 0; % set value to zero
            end
        end
    end
    diff = abs(input_matrix - prev_matrix); % calculate difference between current and previous iteration matrix
    if max(diff(:)) < convergence_threshold % if maximum difference is below convergence threshold
        break; % stop iterating
    end
end