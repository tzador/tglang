% this code snippet calculates the inverse kinematics of a 3-degree-of-freedom robotic arm
% using the Denavit-Hartenberg convention

% define the DH parameters
a = [0, 0, 10]; % link length
alpha = [pi/2, 0, pi/2]; % twist angle
d = [0, 0, 0]; % link offset
theta = [0, 0, 0]; % joint angle

% define the end-effector position and orientation
px = 10; % x-coordinate
py = 20; % y-coordinate
pz = 30; % z-coordinate
Rx = pi/4; % rotation about x-axis
Ry = pi/6; % rotation about y-axis
Rz = pi/3; % rotation about z-axis

% construct the homogeneous transformation matrix
T0 = eye(4); % initial transformation matrix
T1 = DH_transform(a(1), alpha(1), d(1), theta(1)); % transformation matrix for link 1
T2 = DH_transform(a(2), alpha(2), d(2), theta(2)); % transformation matrix for link 2
T3 = DH_transform(a(3), alpha(3), d(3), theta(3)); % transformation matrix for link 3
T4 = T1 * T2 * T3; % overall transformation matrix for the end-effector
T4(1:3, 4) = [px; py; pz]; % add translation components to the transformation matrix
R = RotationMatrix(Rx, Ry, Rz); % create rotation matrix from Euler angles
T4(1:3, 1:3) = T4(1:3, 1:3) * R; % apply rotation to the transformation matrix

% perform inverse kinematics using the geometric method
syms t1 t2 t3; % define symbolic variables for joint angles
T0e = T0 * T4; % homogeneous transformation matrix from base frame to end-effector frame
T0e = simplify(T0e); % simplify the transformation matrix
R0e = T0e(1:3, 1:3); % rotation matrix from base frame to end-effector frame
euler_angles = rotation2euler(R0e); % convert rotation matrix to Euler angles
t1 = atan2(T0e(2, 4), T0e(1, 4)); % calculate joint angle 1 using inverse trigonometric functions
t2 = atan2(sqrt(T0e(1, 4)^2 + T0e(2, 4)^2), T0e(3, 4)); % calculate joint angle 2 using inverse trigonometric functions
t3 = atan2(T0e(3, 3), -T0e(3, 2)); % calculate joint angle 3 using inverse trigonometric functions

% display the result
disp("The joint angles are:");
disp("Joint 1: " + rad2deg(t1) + " deg");
disp("Joint 2: " + rad2deg(t2) + " deg");
disp("Joint 3: " + rad2deg(t3) + " deg");

% define the DH function for calculating transformation matrix
function [T] = DH_transform(a, alpha, d, theta)
    T = [cos(theta), -sin(theta)*cos(alpha), sin(theta)*sin(alpha), a*cos(theta);
         sin(theta), cos(theta)*cos(alpha), -cos(theta)*sin(alpha), a*sin(theta);
         0, sin(alpha), cos(alpha), d;
         0, 0, 0, 1];
end

% define the function for converting rotation matrix to Euler angles
function [euler_angles] = rotation2euler(R)
    if R(3, 1) < 1
        if R(3, 1) > -1
            theta1 = atan2(R(3, 2), R(3, 3));
            theta2 = asin(-R(3, 1));
            theta3 = atan2(R(2, 1), R(1, 1));
        else
            theta1 = -atan2(R(1, 2), R(2, 2));
            theta2 = -pi/2;
            theta3 = 0;
        end
    else
        theta1 = atan2(R(1, 2), R(2, 2));
        theta2 = pi/2;
        theta3 = 0;
    end
    euler_angles = [theta1, theta2, theta3];
end

% define the function for creating a rotation matrix from Euler angles
function [R] = RotationMatrix(rx, ry, rz)
    R = [cos(ry)*cos(rz), sin(rx)*sin(ry)*cos(rz) - cos(rx)*sin(rz), cos(rx)*sin(ry)*cos(rz) + sin(rx)*sin(rz), 0;
         cos(ry)*sin(rz), sin(rx)*sin(ry)*sin(rz) + cos(rx)*cos(rz), cos(rx)*sin(ry)*sin(rz) - sin(rx)*cos(rz), 0;
         -sin(ry), sin(rx)*cos(ry), cos(rx)*cos(ry), 0;
         0, 0, 0, 1];
end