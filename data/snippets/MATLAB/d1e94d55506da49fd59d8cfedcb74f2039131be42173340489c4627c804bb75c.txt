%% Generate a random matrix
A = rand(5); % initialize a 5x5 matrix with random values between 0 and 1

%% Find the maximum value in each row
max_vals = max(A,[],2); % returns a column vector with the maximum value of each row

%% Reshape the matrix into a 3D array
B = reshape(A, [5, 5, 1]); % reshape A into a 5x5x1 3D array

%% Multiply the matrix by its transpose
C = A * A.'; % multiply A by its transpose to get a symmetric 5x5 matrix

%% Create a diagonal matrix
D = diag([1, 2, 3, 4, 5]); % create a 5x5 diagonal matrix with values 1 to 5 along the main diagonal

%% Concatenate two matrices horizontally
E = horzcat(A, B); % concatenate A and B along the horizontal dimension to create a 5x10 matrix

%% Convert the matrix to a cell array
F = mat2cell(A, [2, 3], [2, 2, 1]); % convert A into a 2x2 and a 3x1 cell array

%% Plot a 3D surface
[X, Y] = meshgrid(1:5, 1:5); % create a grid of points in the x-y plane
Z = sin(X) + cos(Y); % define the z-values as a function of x and y
surf(X, Y, Z); % plot a 3D surface with x, y, and z as the axes

%% Perform a linear regression
y = [1, 3, 5, 7, 9]; % initialize a vector of dependent variables
x = [1, 2, 3, 4, 5]; % initialize a vector of independent variables
[A, B] = polyfit(x, y, 1); % perform a linear regression and return the coefficients as a 1x2 vector
y_fit = A * x + B; % calculate the fitted values 
plot(x, y, 'o'); % plot the original data points
hold on; % hold the current plot
plot(x, y_fit); % plot the fitted line
legend({'Original Data', 'Fitted Line'}); % add a legend to the plot
hold off; % release the current plot