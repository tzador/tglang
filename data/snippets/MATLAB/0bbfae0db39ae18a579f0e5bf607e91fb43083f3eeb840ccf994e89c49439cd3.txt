%% Generate random matrix with specified properties
A = rand(10); % Generate 10x10 matrix with random values between 0 and 1
B = A' * A; % Multiply matrix by its transpose to ensure it is symmetric
[V, D] = eig(B); % Compute eigenvalues and eigenvectors of symmetric matrix
[~, idx] = sort(diag(D), 'descend'); % Sort eigenvalues in descending order
V = V(:,idx); % Reorder eigenvectors based on sorted eigenvalues
w = randi([1, 10], 1, 10); % Generate a random vector of length 10 with values between 1 and 10
C = V * diag(w) * V'; % Construct a diagonal matrix using the eigenvectors and random vector
D = C + eye(10); % Add identity matrix to make C positive definite
x = rand(10, 1); % Generate a random vector of length 10
b = C * x; % Multiply C by random vector to construct b for Ax=b problem
%% Solve Ax=b using different methods
% Solve using Cholesky decomposition
tic
L = chol(D, 'lower'); % Compute lower triangular Cholesky factor of D
y = L\b; % Forward substitution to compute y in Ly=b
x1 = L'\y; % Back substitution to compute x1 in L'x1=y
t1 = toc;
% Solve using QR factorization
tic
[Q, R] = qr(D); % Compute QR factorization of D
y = Q'*b; % Compute y by solving Q'y=b
x2 = R\y; % Compute x2 by solving Rx2=y
t2 = toc;
% Solve using eigenvalue decomposition
tic
[V, D] = eig(D); % Compute eigenvalues and eigenvectors of D
invD = inv(D); % Invert the diagonal matrix of eigenvalues
Vt = V'; % Transpose of eigenvector matrix
y = V \ b; % Solve for y using back substitution with V
x3 = V * (invD * (Vt * y)); % Compute x3 using inverse of diagonal matrix
t3 = toc;