% Define initial conditions
x0 = 0; % initial position
v0 = 0; % initial velocity
T = 10; % total simulation time
dt = 0.01; % time step size

% Define parameters
m = 0.5; % mass
k = 2; % spring constant
b = 0.5; % damping coefficient
X_eq = 1; % equilibrium position

% Initialize variables
t = 0:dt:T; % time vector
x = zeros(size(t)); % position vector
v = zeros(size(t)); % velocity vector
F = zeros(size(t)); % force vector

% Set initial values
x(1) = x0; % first element of position vector
v(1) = v0; % first element of velocity vector
F(1) = -k*(x(1)-X_eq) - b*v(1); % first element of force vector

% Define ODE function
F_x = @(t,x,v) -k*(x-X_eq) - b*v; % governing equation

% Implement Euler's method
for i = 2:length(t)
    v(i) = v(i-1) + F_x(t(i-1),x(i-1),v(i-1))/m*dt; % calculate new velocity
    x(i) = x(i-1) + v(i)*dt; % calculate new position
    F(i) = F_x(t(i),x(i),v(i)); % calculate new force
end

% Plot results
figure
subplot(2,1,1) % create subplot for position plot
plot(t,x) % plot time vs. position
xlabel('Time') % label x-axis
ylabel('Position') % label y-axis
subplot(2,1,2) % create subplot for velocity plot
plot(t,v) % plot time vs. velocity
xlabel('Time') % label x-axis
ylabel('Velocity') % label y-axis