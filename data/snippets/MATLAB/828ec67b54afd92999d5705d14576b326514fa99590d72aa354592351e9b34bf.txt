% This code snippet performs principal component analysis (PCA) on a dataset

% Preprocessing the data
X = normalize(dataset); % normalize the dataset to have mean 0 and unit variance

% Calculating the covariance matrix
[m, n] = size(X); % get dimensions of dataset
sigma = (1/m) * (X' * X); % calculate covariance matrix

% Performing singular value decomposition (SVD)
[U, S, V] = svd(sigma); % performs SVD on covariance matrix

% Projecting the data onto the principal components
Z = X * U; % get projection of data onto principal components

% Calculating the variance explained
var_explained = (S(1,1) / sum(diag(S))) * 100; % calculate percentage of variance explained by first principal component

% Plotting the principal components
figure;
scatter(Z(:,1), Z(:,2)) % scatter plot of first two principal components
xlabel('Principal Component 1');
ylabel('Principal Component 2');
title('PCA Plot');

% Selecting the number of principal components
var_threshold = 0.95; % set threshold for variance explained
total_var = 0; % initialize total variance
k = 0; % initialize number of principal components
while (total_var < var_threshold) % loop until total variance exceeds threshold
    k = k + 1; % increment number of principal components
    total_var = total_var + (S(k,k) / sum(diag(S))); % add variance explained by next principal component
end

% Reconstructing the dataset with reduced dimensionality
U_reduced = U(:, 1:k); % select first k principal components
Z_reduced = X * U_reduced; % project data onto reduced principal components
X_recon = Z_reduced * U_reduced'; % reconstruct original dataset

% Calculating the reconstruction error
recon_error = norm(X - X_recon); % calculate frobenius norm of residual matrix
frac_error = (recon_error ^ 2) / (norm(X, 'fro') ^ 2); % calculate fraction of variance lost due to dimensionality reduction

% Printing results
fprintf('First %d principal components explain %.2f%% of the variance.\n', k, var_explained);
fprintf('Dimensionality reduction by %.2f%% results in a reconstruction error of %.4f.\n', (1 - frac_error) * 100, recon_error);

% Code snippet adapted from Andrew Ng's Machine Learning Course on Coursera.