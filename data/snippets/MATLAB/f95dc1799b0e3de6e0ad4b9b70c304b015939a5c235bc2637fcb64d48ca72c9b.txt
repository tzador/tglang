function y = mergeSort(x)
% This function performs a merge sort on an input vector x
% Inputs:
%   x: input vector to sort
% Output:
%   y: sorted version of input vector
if length(x) > 1 % check if input vector has more than 1 element
    mid = ceil(length(x)/2); % calculate middle index of vector
    left = mergeSort(x(1:mid)); % recursively sort left half of vector
    right = mergeSort(x(mid+1:end)); % recursively sort right half of vector
    y = merge(left, right); % merge the sorted halves
else % if input vector has 1 element or less, return the input vector
    y = x;
end
end

function z = merge(a, b)
% This function merges two sorted vectors, a and b
% Inputs:
%   a: first sorted vector
%   b: second sorted vector
% Output:
%   z: merged sorted vector
z = zeros(length(a)+length(b), 1); % initialize merged vector with correct size
i = 1; % index for vector a
j = 1; % index for vector b
k = 1; % index for merged vector
while i <= length(a) && j <= length(b) % loop until one of the vectors is exhausted
    if a(i) < b(j)
        z(k) = a(i); % add element from vector a to merged vector
        i = i + 1; % increment index for vector a
    else
        z(k) = b(j); % add element from vector b to merged vector
        j = j + 1; % increment index for vector b
    end
    k = k + 1; % increment index for merged vector
end
if i > length(a) % if vector a is exhausted, add remaining elements from vector b
    z(k:end) = b(j:end);
else % if vector b is exhausted, add remaining elements from vector a
    z(k:end) = a(i:end);
end
end