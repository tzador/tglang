%% Gaussian Mixture Model
% This code snippet implements a Gaussian Mixture Model using the Expectation-Maximization algorithm
% for data clustering.

%% Input data
x = [1,2,3,4,5,6,7,8,9,10]; % Input data
k = 3; % Number of clusters

%% Initialization
n = length(x); % Number of data points
mu = rand(1,k)*max(x); % Randomly initialize means
sigma = rand(1,k)*max(x); % Randomly initialize variances
pi = ones(1,k)/k; % Initialize mixture coefficients

%% Expectation-Maximization algorithm
for i = 1:10 % Iterate 10 times
    % Expectation step
    w = zeros(n,k); % Initialize responsibilities
    for j = 1:n
        for l = 1:k
            w(j,l) = pi(l)*exp(-(x(j)-mu(l))^2/(2*sigma(l)^2)); % Calculate responsibilities
        end
    end
    w = w./sum(w,2); % Normalize responsibilities
    
    % Maximization step
    pi = sum(w)/n; % Update mixture coefficients
    mu = sum(repmat(w,[1,1,n]).*repmat(x,[1,k,1]),3)./sum(w); % Update means
    sigma = sqrt(sum(repmat(w,[1,1,n]).*(repmat(x,[1,k,1])-mu).^2,3)./sum(w)); % Update variances
end

%% Clustering
[~,cluster] = max(w,[],2); % Assign data points to clusters

%% Plot results
figure; hold on;
colors = ['r','g','b'];
for i = 1:k
    scatter(x(cluster==i),zeros(1,sum(cluster==i)),colors(i),'filled'); % Plot data points in different colors based on clusters
end
legend('Cluster 1','Cluster 2','Cluster 3');
title('Gaussian Mixture Model using Expectation-Maximization Algorithm');
xlabel('Data points');
ylabel('Cluster assignments');