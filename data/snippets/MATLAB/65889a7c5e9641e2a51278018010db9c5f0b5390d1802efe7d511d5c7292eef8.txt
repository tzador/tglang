%% Generating a random matrix and computing its eigenvalues
% Define number of rows and columns of the matrix
n = 5; 

% Generate a random n-by-n matrix with integer entries between 1 and 10
A = randi([1, 10],n,n); 

% Compute the eigenvalues of the generated matrix
eigenvalues = eig(A); 

% Create a figure window for plotting the matrix entries
figure; 

% Plot the real and imaginary parts of the eigenvalues as scatter plot
plot(real(eigenvalues),imag(eigenvalues),'.','MarkerSize',25); 

% Access axes and change properties
ax = gca; 
ax.FontSize = 14; 
ax.XColor = 'k'; 
ax.YColor = 'k'; 
ax.XLabel.String = 'Real part of eigenvalues'; 
ax.YLabel.String = 'Imaginary part of eigenvalues'; 

% Add title to the plot
title('Scatter Plot of Eigenvalues of Random Matrix A'); 

% Generate a colorbar
colorbar; 

% Create a copy of the generated matrix A
B = A; 

% Sort the elements of each column in ascending order and save the indices
[~,idx] = sort(B); 

% Use indices to reorder the elements in each column
for i = 1:n
    B(:,i) = B(idx(:,i),i); 
end

% Save the sorted matrix as a new variable
sortedA = B;

% Compute the eigenvalues of the sorted matrix
sortedEigenvalues = eig(sortedA);

% Plot the sorted real and imaginary parts of the eigenvalues as line plots
hold on; 
plot(real(sortedEigenvalues),imag(sortedEigenvalues),'r-','LineWidth',3)
hold off; 

% Add a legend to the plot
legend('Unsorted Eigenvalues','Sorted Eigenvalues');

% Output the sorted matrix A and its eigenvalues
disp('Sorted Matrix:');
disp(sortedA); 
disp('Eigenvalues of Sorted Matrix:');
disp(sortedEigenvalues); 

% Check if the sorted eigenvalues are equal to the original eigenvalues
if sortedEigenvalues == eigenvalues 
    disp('Eigenvalues are equal.');
else
    disp('Eigenvalues are not equal.');
end