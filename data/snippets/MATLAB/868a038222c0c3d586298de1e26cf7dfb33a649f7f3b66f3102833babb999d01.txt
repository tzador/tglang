%% Load data
data = load('data.csv');

%% Pre-processing
X = data(:, 1:end-1); % Feature variables
Y = data(:, end); % Target variable

X_scaled = (X - mean(X)) ./ std(X); % Standardize features

%% Split data into training and testing sets
[train_idx, test_idx] = split_indices(size(data, 1), 0.8); % 80% training, 20% testing
X_train = X_scaled(train_idx, :); % Training set features
Y_train = Y(train_idx, :); % Training set target
X_test = X_scaled(test_idx, :); % Testing set features
Y_test = Y(test_idx, :); % Testing set target

%% Train model
model = svmtrain(X_train, Y_train, 'kernel_function', 'rbf'); % Train SVM model with RBF kernel

%% Predict on test data
Y_pred = svmpredict(Y_test, X_test, model); % Use model to predict on test data

%% Evaluate model performance
accuracy = sum(Y_test == Y_pred) / length(Y_test); % Calculate model accuracy
confusion_matrix = confusionmat(Y_test, Y_pred); % Create confusion matrix
precision = confusion_matrix(1,1) / sum(confusion_matrix(:,1)); % Calculate precision
recall = confusion_matrix(1,1) / sum(confusion_matrix(1,:)); % Calculate recall
f1_score = 2 * (precision * recall) / (precision + recall); % Calculate F1 score