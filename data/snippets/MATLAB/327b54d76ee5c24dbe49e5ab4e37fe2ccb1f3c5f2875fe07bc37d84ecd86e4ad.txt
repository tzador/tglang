% This code uses the finite difference method to solve a 2D heat equation

% Define variables
nx = 50; % number of grid points in x direction
ny = 50; % number of grid points in y direction
L = 1; % length of x domain
W = 1; % length of y domain
dx = L/(nx-1); % grid spacing in x direction
dy = W/(ny-1); % grid spacing in y direction
dt = 0.001; % time step size
T = 100; % total simulation time
alpha = 0.01; % thermal conductivity
rho = 1.2; % density
Cp = 1000; % specific heat capacity
Pe = 300; % Peclet number
D = alpha*dt/(rho*Cp); % diffusion coefficient
u = zeros(nx,ny); % initial temperature distribution
x = linspace(0,L,nx); % x axis values
y = linspace(0,W,ny); % y axis values

% Set boundary conditions
u(1,:) = 0; % left boundary
u(:,1) = 100; % bottom boundary
u(nx,:) = 0; % right boundary
u(:,ny) = 0; % top boundary

% Perform time iteration
for t = 1:T
    % Compute temperature for interior grid points using central difference
    for i = 2:nx-1
        for j = 2:ny-1
            u(i,j) = u(i,j) + D*(u(i+1,j)- 2*u(i,j)+u(i-1,j))/(dx^2) + D*(u(i,j+1)-2*u(i,j)+u(i,j-1))/(dy^2);
        end
    end
    
    % Apply Neumann boundary conditions
    u(2:nx-1,ny) = u(2:nx-1,ny-1); % top boundary
    u(2:nx-1,1) = u(2:nx-1,2); % bottom boundary
    u(nx,2:ny-1) = u(nx-1,2:ny-1); % right boundary
    
    % Apply Dirichlet boundary condition on left boundary
    u(1,2:ny-1) = u(2,2:ny-1);
    
    % Apply Peclet number condition
    u(2:nx-1,2:ny-1) = u(2:nx-1,2:ny-1) + Pe*(u(1:nx-2,2:ny-1)-u(2:nx-1,2:ny-1))*dt/(rho*Cp*dx);

end