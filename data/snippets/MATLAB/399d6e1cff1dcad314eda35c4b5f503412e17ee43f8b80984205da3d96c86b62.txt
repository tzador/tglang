%% 2D Heat Equation Solver
%This code solves the 2D heat equation numerically using the finite difference method
%and plots the temperature distribution over time

%Define constants
nx = 50; %number of grid points in x-direction
ny = 50; %number of grid points in y-direction
Lx = 1; %length of domain in x-direction
Ly = 1; %length of domain in y-direction
dx = Lx/(nx-1); %grid spacing in x-direction
dy = Ly/(ny-1); %grid spacing in y-direction
T = zeros(nx,ny); %temperature array
T(1,:) = 100; %boundary condition at x=0
T(nx,:) = 50; %boundary condition at x=1
T(:,1) = 75; %boundary condition at y=0
T(:,ny) = 25; %boundary condition at y=1
T(25:35,25:35) = 150; %initial temperature distribution in a small square

%Set up iteration parameters
timesteps = 500; %number of timesteps to run
dt = 0.001; %time step size
alpha = 0.1; %thermal diffusivity constant
gamma = alpha*dt/(dx^2); %coefficients for finite difference method

%Main loop
for t = 1:timesteps
    T_old = T; %store old temperature values
    for i = 2:(nx-1)
        for j = 2:(ny-1)
            T(i,j) = T_old(i,j) + gamma*(T_old(i+1,j) + T_old(i-1,j) + T_old(i,j+1) + T_old(i,j-1) - 4*T_old(i,j)); %finite difference method
        end
    end
end

%Plotting
x = linspace(0,Lx,nx);
y = linspace(0,Ly,ny);
[X,Y] = meshgrid(x,y);
surf(X,Y,T); %plot temperature distribution over time
title('2D Heat Equation Solution')
xlabel('x')
ylabel('y')
zlabel('Temperature')