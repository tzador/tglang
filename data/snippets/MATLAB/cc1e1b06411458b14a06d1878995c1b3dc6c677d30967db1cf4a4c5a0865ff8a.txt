%% Set up problem parameters

% Define number of iterations
N = 100;

% Define matrix size
M = 3; 

% Set random seed
rng(1); 

% Initialize matrix A with random values
A = rand(M,M,N); 

% Initialize matrix x with random values
x = rand(M,1); 

% Initialize matrix b as a vector of ones
b = ones(M,1); 

%% Solve the system of equations using the Jacobi method
x_jacobi = zeros(M,1); % Initialize solution vector
for iter = 1:N % Loop through the specified number of iterations      
    for i = 1:M % Loop through each row of A and x
        % Compute the dot product of row i of A and x
        dot_prod = dot(A(i,:,iter),x_jacobi); 
        % Update solution vector based on Jacobi method formula
        x_jacobi(i) = (b(i) - dot_prod + A(i,i,iter)*x_jacobi(i))/A(i,i,iter); 
    end
end

%% Solve the system of equations using the Gauss-Seidel method
x_gauss = zeros(M,1); % Initialize solution vector
for iter = 1:N % Loop through the specified number of iterations  
    for i = 1:M % Loop through each row of A and x
        % Initialize variables for computing dot product
        dot_prod1 = 0;
        dot_prod2 = 0;
        for j = 1:i-1
            % Compute the dot product of row i of A and x
            dot_prod1 = dot_prod1 + A(i,j,iter)*x_gauss(j); 
        end
        for j = i+1:M
            % Compute the dot product of row i of A and x
            dot_prod2 = dot_prod2 + A(i,j,iter)*x_gauss(j); 
        end
        % Update solution vector based on Gauss-Seidel method formula
        x_gauss(i) = (b(i) - dot_prod1 - dot_prod2)/A(i,i,iter); 
    end
end