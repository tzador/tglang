%% Monte Carlo Simulation for European Option Pricing
% Set number of time steps, risk-free rate, volatility, strike price, and maturity
nSteps = 100; % 100 time steps
r = 0.05; % 5% risk-free rate
sig = 0.25; % 25% volatility
K = 100; % strike price = $100
T = 1; % maturity = 1 year

% Initialize vector for stock prices
S(1) = 100; % starting stock price = $100

% Simulate stock prices using Brownian motion
for i = 2: nSteps
    dW = sqrt(T/nSteps) * randn; % random term 
    S(i) = S(i-1) + r*S(i-1)*T/nSteps + sig*S(i-1)*dW; % stock price at each time step
end

% Calculate option payoff at maturity
CallPayoff = max(S(nSteps) - K, 0); % European Call option payoff
PutPayoff = max(K - S(nSteps), 0); % European Put option payoff

% Compute option price using Monte Carlo simulation
nSim = 10000; % number of simulations
CallP = zeros(1, nSim); % vector to store Call option price for each simulation
PutP = zeros(1, nSim); % vector to store Put option price for each simulation

for i = 1: nSim
    % Simulate stock prices for each simulation
    S(1) = 100; % starting stock price = $100
    for j = 2: nSteps
        dW = sqrt(T/nSteps) * randn; % random term
        S(j) = S(j-1) + r*S(j-1)*T/nSteps + sig*S(j-1)*dW; % stock price at each time step
    end
    
    % Calculate option payoff at maturity for each simulation
    CallPayoff = max(S(nSteps) - K, 0); % European Call option payoff
    PutPayoff = max(K - S(nSteps), 0); % European Put option payoff
    
    % Recalculate option price using discounted expected payoff
    CallP(i) = exp(-r*T) * CallPayoff; % discounted Call option price
    PutP(i) = exp(-r*T) * PutPayoff; % discounted Put option price
end

% Calculate option price as average of all simulations
CallPrice = mean(CallP); % European Call option price
PutPrice = mean(PutP); % European Put option price

% Print option prices
fprintf('European Call option price: $%.2f \n', CallPrice)
fprintf('European Put option price: $%.2f \n', PutPrice)