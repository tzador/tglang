function [output] = solve_system(A, b)
% This function solves the system of linear equations Ax=b
% Input:
%   A: coefficient matrix
%   b: right hand side vector
% Output:
%   output: solution vector

[m, n] = size(A);  % get dimensions of matrix A
if m ~= n  % check if matrix is square
    error('Matrix A must be square.');
else
    % LU decomposition of A
    L = eye(n);  % initialize L as identity matrix
    for k = 1:n-1
        if A(k,k) == 0  % check for zero pivot
            error('Matrix A is singular.');
        else
            for i = k+1:n
                factor = A(i,k)/A(k,k);  % calculate factor for elimination
                L(i,k) = factor;  % store factor in L matrix
                for j = k+1:n
                    A(i,j) = A(i,j) - factor*A(k,j);  % update A matrix
                end
                b(i) = b(i) - factor*b(k);  % update b vector
            end
        end
    end
    U = A;  % U matrix is now upper triangular

    % forward substitution
    y = zeros(n,1);  % initialize y vector
    for i = 1:n
        sum = 0;
        for j = 1:i-1
            sum = sum + L(i,j)*y(j);  % calculate sum for forward substitution
        end
        y(i) = (b(i) - sum)/L(i,i);  % calculate solution for y vector
    end

    % back substitution
    x = zeros(n,1);  % initialize x vector
    for i = n:-1:1
        sum = 0;
        for j = i+1:n
            sum = sum + U(i,j)*x(j);  % calculate sum for back substitution
        end
        x(i) = (y(i) - sum)/U(i,i);  % calculate solution for x vector
    end

    output = x;  % output the solution vector
end