%% This code snippet calculates the inverse of a matrix using the LU decomposition method
[A, b] = deal(rand(10,10),rand(10,1)); % Generate a random 10x10 matrix and a 10x1 vector
[L,U,P] = lu(A); % Use lu() function to get the lower, upper, and permutation matrices
x = zeros(size(A,2),size(b,2)); % Initialize the solution vector
y = forward_substitution(L,P*b); % Use forward substitution to solve L*y = P*b
x = backward_substitution(U,y); % Use backward substitution to solve U*x = y
disp("Solution matrix x:"); % Display the solution matrix
disp(x); % Display the solution vector
% Functions for forward and backward substitution
function y = forward_substitution(L,b) % Function for forward substitution (lower triangular matrix)
y = zeros(size(L,2),size(b,2)); % Initialize the solution vector
y(1,:) = b(1,:)/L(1,1); % Solve for first element in solution vector
for i = 2:size(L,1) % Loop for each row in solution vector
    sum = 0; % Initialize sum variable
    for j = 1:i-1 % Loop for each element in the current row
        sum = sum + L(i,j)*y(j,:); % Calculate the sum for this row
    end
    y(i,:) = (b(i,:)-sum)/L(i,i); % Solve for current element in solution vector
end
function x = backward_substitution(U,y) % Function for backward substitution (upper triangular matrix)
x = zeros(size(U,2),size(y,2)); % Initialize the solution vector
x(size(U,2),:) = y(size(U,2),:)/U(size(U,2),size(U,2)); % Solve for last element in solution vector
for i = size(U,2)-1:-1:1 % Loop from second to last row in solution vector
    sum = 0; % Initialize sum variable
    for j = i+1:size(U,2) % Loop for each element in the current row
        sum = sum + U(i,j)*x(j,:); % Calculate the sum for this row
    end
    x(i,:) = (y(i,:)-sum)/U(i,i); % Solve for current element in solution vector
end