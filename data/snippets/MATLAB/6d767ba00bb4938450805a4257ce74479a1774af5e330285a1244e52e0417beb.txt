%% Matlab code snippet for computing the inverse of a matrix using Gauss-Jordan elimination

% Define a square matrix A
A = [3 5 1; 2 4 6; 7 9 8];

% Create an identity matrix of the same size as A
I = eye(size(A));

% Concatenate A and I to form an augmented matrix
aug_matrix = [A, I];

% Set row and column indices to keep track of pivots
[r, c] = size(aug_matrix);

% Initialize a pivot counter
p = 1;

% Begin Gaussian elimination
for j = 1:c-1
    
    % Find the index of the largest element in column j
    [~, max_index] = max(abs(aug_matrix(p:r, p)));
    
    % Swap rows to ensure that the largest element is in the pivot position
    aug_matrix([p,max_index],:) = aug_matrix([max_index,p],:);
    
    % Normalize the pivot row
    aug_matrix(p,:) = aug_matrix(p,:) / aug_matrix(p,p);
    
    % Use row operations to make all other elements in column j equal to 0
    for i = 1:r
        if i~=p
            aug_matrix(i,:) = aug_matrix(i,:) - aug_matrix(i,p)*aug_matrix(p,:);
        end
    end
    
    % Update pivot counter
    p = p+1;
end

% Extract the inverse matrix from the augmented matrix
inv_A = aug_matrix(:,c+1:end);