%% Input Processing
% Read in the data and store it in a matrix
data = readmatrix('data.csv');
% Separate the predictor variables (first 3 columns) and the response variable (last column)
X = data(:,1:3);
y = data(:,4);

%% Exploratory Data Analysis
% Calculate the mean and standard deviation of the predictor variables
mean_X = mean(X);
std_X = std(X);

% Calculate the correlation between the predictor variables
corr_X = corrcoef(X);

%% Model Training
% Split the data into training and testing sets
[X_train, X_test, y_train, y_test] = train_test_split(X, y, test_size=0.2);

% Initialize a linear regression model
model = fitlm(X_train, y_train);

% Generate predictions on the testing set using the trained model
y_pred = predict(model, X_test);

% Calculate the mean squared error and R2 score on the testing set
test_mse = immse(y_pred, y_test);
test_r2 = corr(y_test, y_pred)^2;

% Plot the actual vs predicted values on a scatter plot
scatter(y_test, y_pred);
xlabel('Actual values');
ylabel('Predicted values');
title('Actual vs Predicted Values');

%% Model Evaluation
% Perform k-fold cross validation on the entire dataset using the trained model
K = 10;
cv_mse = crossval(model, 'kfold', K);

% Calculate the average MSE over the folds
avg_cv_mse = kfoldLoss(cv_mse);

% Print the average MSE and R2 score
fprintf('Average MSE: %f \n', avg_cv_mse);
fprintf('R2 score: %f \n', model.Rsquared.Ordinary);