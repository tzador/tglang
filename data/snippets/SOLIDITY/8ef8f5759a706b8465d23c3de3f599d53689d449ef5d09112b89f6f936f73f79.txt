pragma solidity 0.8.2;
// SPDX-License-Identifier: MIT

contract Example {
    // This is a single-line comment in Solidity

    /*
    This is a multi-line comment
    spanning multiple lines
    in Solidity
    */

    string greeting = "Hello World"; // Variable declaration with an initial value
    string name; // Variable declaration without an initial value

    // Function with input parameters and return value
    function sayHello(string memory _name) public view returns (string memory) {
        return string(abi.encodePacked(greeting, ", ", _name)); // Concatenating strings using abi.encodePacked
    }

    // Function that modifies state variables
    function changeName(string memory _newName) public {
        name = _newName; // Assigning new value to the variable
    }

    // Function with require statement
    function divide(uint256 _numerator, uint256 _denominator) public pure returns (uint256) {
        require(_denominator > 0, "Cannot divide by zero"); // Requiring _denominator to be greater than 0
        return _numerator / _denominator;
    }

    // Mapping data structure
    mapping(address => uint256) public balances; // Mapping address to uint256 value

    // Events
    event Deposit(address indexed _sender, uint256 _amount); // Declaring event with indexed parameter

    // Function that updates mapping value and emits event
    function deposit(uint256 _amount) public {
        balances[msg.sender] += _amount; // Updating mapping value
        emit Deposit(msg.sender, _amount); // Emitting event
    }

}