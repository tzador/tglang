// This contract represents a cryptocurrency token
// It follows the ERC-20 standard for Ethereum tokens
pragma solidity ^0.8.0;
// Importing the OpenZeppelin contracts for safe math operations and managing ownership
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
// Defining the contract
contract Cryptocurrency {
    // Using the SafeMath library for safe math operations on uint variables
    using SafeMath for uint;
    // Defining the variables for the token
    string public name = "Example Token";
    string public symbol = "EXT";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    // Mapping to keep track of token balances for each address
    mapping(address => uint256) public balanceOf;
    // Mapping to keep track of approved spending limits for each address
    mapping(address => mapping(address => uint256)) public allowance;
    
    // Events for transferring and approving tokens
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    // Constructor to initialize the total supply of tokens to the contract's creator
    constructor() {
        totalSupply = 1000000 * (10**uint(decimals));
        balanceOf[msg.sender] = totalSupply;
    }
    
    // Function to transfer tokens from one address to another
    function transfer(address _to, uint256 _value) public returns (bool success) {
        // Ensuring the sender has enough tokens to transfer
        require(balanceOf[msg.sender] >= _value, "Not enough tokens to transfer.");
        // Subtracting the transferred amount from the sender's balance
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        // Adding the transferred amount to the recipient's balance
        balanceOf[_to] = balanceOf[_to].add(_value);
        // Emitting the transfer event
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    
    // Function to approve a spender to use up to a certain number of tokens from the sender's balance
    function approve(address _spender, uint256 _value) public returns (bool success) {
        // Setting the spender's allowance to the requested value
        allowance[msg.sender][_spender] = _value;
        // Emitting the approval event
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    // Function for a spender to transfer allowed funds from a sender's balance to a designated recipient
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        // Ensuring the sender has enough allowed funds to transfer
        require(allowance[_from][msg.sender] >= _value, "Not enough allowance to transfer.");
        // Ensuring the sender has enough tokens to transfer
        require(balanceOf[_from] >= _value, "Not enough tokens to transfer.");
        // Subtracting the transferred amount from the sender's balance
        balanceOf[_from] = balanceOf[_from].sub(_value);
        // Adding the transferred amount to the recipient's balance
        balanceOf[_to] = balanceOf[_to].add(_value);
        // Decreasing the allowance of the sender by the transferred amount
        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
        // Emitting the transfer event
        emit Transfer(_from, _to, _value);
        return true;
    }
}