// Creating a contract called MyContract
contract MyContract {
    // Declaring variables
    uint8 num1; // Unsigned integer with 8 bits (0-255)
    int16 num2; // Signed integer with 16 bits (-32768 to 32767)
    string greeting; // String data type
    
    // Initializing constructor function with parameters
    constructor(uint8 _num1, int16 _num2, string memory _greeting) public {
        num1 = _num1; // Assigning value of _num1 to num1
        num2 = _num2; // Assigning value of _num2 to num2
        greeting = _greeting; // Assigning value of _greeting to greeting
    }
    
    // Function to return the sum of num1 and num2
    function sum() public view returns (int) {
        return int(num1) + num2; // Converting num1 to signed integer before adding to num2
    }
    
    // Function to update value of num1
    function updateNum1(uint8 _num1) public {
        require(_num1 != 0); // Checking if _num1 is not equal to 0
        num1 = _num1; // Updating value of num1
    }
    
    // Function to update value of greeting
    function updateGreeting(string memory _greeting) public {
        bytes memory strBytes = bytes(greeting); // Converting string to bytes
        bytes memory newBytes = bytes(_greeting); // Converting new greeting to bytes
        
        require(strBytes.length == newBytes.length); // Checking if the length of old and new greeting is the same
        
        for (uint i = 0; i < strBytes.length; i++) { // Looping through each character of the string
            strBytes[i] = newBytes[i]; // Replacing each character of the old greeting with new greeting
        }
        
        greeting = string(strBytes); // Converting bytes back to string and updating greeting
    }
}