// Define the Solidity version to be used
pragma solidity ^0.6.12;

// Import necessary libraries
import "./Ownable.sol";
import "./SafeMath.sol";

// Create a contract named "Token"
contract Token is Ownable {
    using SafeMath for uint256; // Use SafeMath library for handling mathematical operations safely
    
    // Define variables
    string public name;
    string public symbol;
    uint256 private _totalSupply;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    // Define events
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
    
    // Construct function to set initial values
    constructor(string memory _name, string memory _symbol, uint256 initialSupply) public {
        name = _name;
        symbol = _symbol;
        _totalSupply = initialSupply;
        _balances[msg.sender] = initialSupply;
    }
    
    // Define public functions
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }
    
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }
    
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }
    
    // Define internal functions
    function _transfer(address from, address to, uint256 amount) internal {
        require(from != address(0), "Transfer from the zero address is not allowed");
        require(to != address(0), "Transfer to the zero address is not allowed");
        
        _balances[from] = _balances[from].sub(amount);
        _balances[to] = _balances[to].add(amount);
        
        emit Transfer(from, to, amount);
    }
    
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approval from the zero address is not allowed");
        require(spender != address(0), "Approval to the zero address is not allowed");
        
        _allowances[owner][spender] = amount;
        
        emit Approval(owner, spender, amount);
    }
}

// Create a contract named "Exchange"
contract Exchange is Ownable {
    using SafeMath for uint256; // Use SafeMath library for handling mathematical operations safely
    
    // Define variables
    Token private _token;
    uint256 private _exchangeRate;
    uint256 private _totalExchanged;
    mapping(address => uint256) private _exchangedBalances;
    
    // Define events
    event TokenExchanged(address indexed from, uint256 ethAmount, uint256 tokenAmount);
    
    // Construct function to set initial values
    constructor(address tokenAddress, uint256 initialExchangeRate) public {
        require(tokenAddress != address(0), "Token address cannot be zero");
        require(initialExchangeRate > 0, "Initial exchange rate cannot be zero");
        
        _token = Token(tokenAddress);
        _exchangeRate = initialExchangeRate;
    }
    
    // Define public functions
    function exchangeTokens() public payable returns (bool) {
        require(msg.value > 0, "Ether value must be greater than zero");
        
        uint256 tokenAmount = msg.value.mul(_exchangeRate);
        require(_token.balanceOf(address(this)) >= tokenAmount, "Not enough tokens in contract");
        
        _token.transfer(msg.sender, tokenAmount);
        _exchangedBalances[msg.sender] = _exchangedBalances[msg.sender].add(tokenAmount);
        _totalExchanged = _totalExchanged.add(tokenAmount);
        
        emit TokenExchanged(msg.sender, msg.value, tokenAmount);
        
        return true;
    }
    
    function withdrawTokens() public onlyOwner returns (bool) {
        uint256 tokenBalance = _token.balanceOf(address(this));
        require(tokenBalance > 0, "Token balance is zero");
        
        require(_token.transfer(owner(), tokenBalance), "Token transfer failed");
        
        return true;
    }
    
    function withdrawEth() public onlyOwner returns (bool) {
        require(address(this).balance > 0, "Ether balance is zero");
        
        require(address(uint160(owner())).send(address(this).balance), "Ether transfer failed");
        
        return true;
    }
    
    // Define getters
    function token() public view returns (address) {
        return address(_token);
    }
    
    function exchangeRate() public view returns (uint256) {
        return _exchangeRate;
    }
    
    function totalExchanged() public view returns (uint256) {
        return _totalExchanged;
    }
    
    function exchangedBalance(address account) public view returns (uint256) {
        return _exchangedBalances[account];
    }
}