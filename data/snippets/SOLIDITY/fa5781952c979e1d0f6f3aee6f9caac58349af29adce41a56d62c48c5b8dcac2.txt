contract ExampleContract {

    //State variables
    uint public num1;
    address public owner;
    string private name;
    bool internal isAdmin;
    mapping(address => uint) private balances;
    
    //Events
    event NewNumber(uint number);
    
    //Modifier
    modifier onlyOwner {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }

    //Functions
    constructor(string memory _name) public {
        owner = msg.sender;
        name = _name;
        isAdmin = true;
    }
    
    function setNumber(uint _num) external onlyOwner {
        num1 = _num;
        emit NewNumber(num1);
    }
    
    function getBalance() external view returns (uint) {
        return balances[msg.sender];
    }
    
    //Fallback function
    fallback() external payable {
        balances[msg.sender] += msg.value;
    } 
}