pragma solidity ^0.4.25;

contract Numbers {
    // initialization variables
    uint public numberOne;
    uint public numberTwo;
    uint[] public numbers;

    // constructor function
    constructor(uint _numberOne, uint _numberTwo) public {
        numberOne = _numberOne;
        numberTwo = _numberTwo;
    }

    // public view function that returns the sum of numberOne and numberTwo
    function sum() public view returns (uint) {
        return numberOne + numberTwo;
    }

    // private function that adds a new number to the 'numbers' array
    function addNumber(uint _number) private {
        numbers.push(_number);
    }

    // public function that can only be called by the contract creator
    function addNumberByCreator(uint _number) public {
        require(msg.sender == creator); // check if sender is contract creator
        addNumber(_number); // call private function to add number to array
    }

    // public function that can only be called by the contract owner
    function addNumberByOwner(uint _number) public {
        require(msg.sender == owner); // check if sender is contract owner
        addNumber(_number); // call private function to add number to array
    }

    // modifier that can only be used by the contract creator
    modifier onlyCreator() {
        require(msg.sender == creator);
        _;
    }

    // modifier that can only be used by the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    // user-defined data types
    struct User {
        string name;
        uint age;
    }

    // mapping data type, maps an address to a User struct
    mapping(address => User) public users;

    // event that is emitted when a new user is added
    event NewUserAdded(string name, uint age);

    // public function that adds a new user to the 'users' mapping
    function addUser(string _name, uint _age) public {
        users[msg.sender] = User(_name, _age); // add new user to mapping
        emit NewUserAdded(_name, _age); // emit event
    }

    // fallback function that is invoked when no other function matches the call
    function() public {
        revert(); // revert the transaction if no function matches the call
    }
}