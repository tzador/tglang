pragma solidity ^0.8.0;

contract Voting {

    // Stores the number of votes each candidate has received
    mapping (bytes32 => uint256) public votesReceived;

    // Stores the list of candidates
    bytes32[] public candidateList;

    // Constructor to initialize the list of candidates
    constructor(bytes32[] memory candidateNames) public {
        candidateList = candidateNames;
    }

    // Function to cast a vote for a candidate
    function voteForCandidate(bytes32 candidate) public {
        // Check if candidate is in the list of candidates
        require(validCandidate(candidate));

        // Increase the vote count for the candidate
        votesReceived[candidate] += 1;
    }

    // Function to check if a candidate is a valid candidate
    function validCandidate(bytes32 candidate) view public returns (bool) {
        // Iterate through the list of candidates
        for(uint i = 0; i < candidateList.length; i++) {
            // Check if candidate matches any candidate in the list
            if(candidateList[i] == candidate) {
                return true;
            }
        }
        // If no match is found, return false
        return false;
    }

    // Function to get the total number of votes for a candidate
    function getTotalVotesForCandidate(bytes32 candidate) view public returns (uint256) {
        // Check if candidate is a valid candidate
        require(validCandidate(candidate));

        // Return the number of votes received for the candidate
        return votesReceived[candidate];
    }
}