pragma solidity >=0.4.22 <0.6.0;

/** @title Pet store contract. */
contract PetStore {
    address owner;
    uint petCount;
    uint constant MAX_PETS = 10;

    // Define a new enumeration type called Breed.
    enum Breed {
        Labrador,
        Poodle,
        ShibaInu
    }

    /** @dev Set contract creator as owner and initialize pet count to 0.
      * @notice Owner can add and remove pets from the store.
      */
    constructor() public {
        owner = msg.sender;
        petCount = 0;
    }

    /** @dev Add a pet to the store.
      * @param _breed Select a Breed from the enumeration.
      * @param _name Name of the pet.
      * @param _age Age of the pet in years.
      * @param _price Price of the pet in ether.
      * @notice Only the owner can add pets and there is a maximum of 10 pets allowed.
      */
    function addPet(Breed _breed, string memory _name, uint _age, uint _price) public {
        require(msg.sender == owner, "Only the owner can add pets.");
        require(petCount < MAX_PETS, "Maximum number of pets already reached.");
        petCount++;
        // TODO: create pet struct and add to mapping
    }

    /** @dev Remove a pet from the store.
      * @param _breed Select a Breed from the enumeration.
      * @param _name Name of the pet.
      * @param _age Age of the pet in years.
      * @param _price Price of the pet in ether.
      * @notice Only the owner can remove pets and there must be at least 1 pet in the store.
      */
    function removePet(Breed _breed, string memory _name, uint _age, uint _price) public {
        require(msg.sender == owner, "Only the owner can remove pets.");
        require(petCount > 0, "There are no pets to remove from the store.");
        petCount--;
        // TODO: remove pet struct from mapping
    }
}