pragma solidity >=0.4.22 <0.9.0;
//Specifies the version of Solidity to be used

contract PetRegistry {
    //defines the contract PetRegistry

    address owner;
    //declares a variable to store the owner's address

    Pet[] pets;
    //declares an array to store the pets

    struct Pet {
        //defines the struct Pet
        string name;
        //declares a variable to store the pet's name
        string species;
        //declares a variable to store the pet's species
        uint age;
        //declares a variable to store the pet's age
        address owner;
        //declares a variable to store the pet's owner's address
    }

    event PetAdded(string name, string species, address owner);
    //defines an event that will be emitted when a new pet is added

    constructor() public {
        //constructor function
        owner = msg.sender;
        //sets the owner address to the address that deployed the contract
    }

    modifier onlyOwner() {
        //modifier to restrict access to certain functions to the owner only
        require(msg.sender == owner, "Only the contract owner can access this function");
        _;
        //function body will be added where the "_" is located
    }

    function addPet(string memory _name, string memory _species, uint _age) public onlyOwner {
        //function to add a new pet
        pets.push(Pet(_name, _species, _age, msg.sender));
        //stores the new pet information in the array
        emit PetAdded(_name, _species, msg.sender);
        //emits the PetAdded event
    }

    function getPet(address _owner) public view returns(string[] memory, string[] memory, uint[] memory) {
        //function to get the pets belonging to a specific owner
        uint length = 0;
        //declares a variable to store the length of the returned arrays
        for (uint i = 0; i < pets.length; i++) {
            //loops through the pets array
            if (pets[i].owner == _owner) {
                //checks if the pet belongs to the specified owner
                length++;
                //increases the length variable by 1
            }
        }
        //end of loop
        string[] memory names = new string[](length);
        //declares a dynamic array of strings to store the names of the pets
        string[] memory species = new string[](length);
        //declares a dynamic array of strings to store the species of the pets
        uint[] memory ages = new uint[](length);
        //declares a dynamic array of uints to store the ages of the pets
        uint j = 0;
        //declares a variable to keep track of the current index in the arrays
        for (uint i = 0; i < pets.length; i++) {
            //loops through the pets array again
            if (pets[i].owner == _owner) {
                //checks if the pet belongs to the specified owner
                names[j] = pets[i].name;
                //stores the pet's name in the "names" array
                species[j] = pets[i].species;
                //stores the pet's species in the "species" array
                ages[j] = pets[i].age;
                //stores the pet's age in the "ages" array
                j++;
                //increases the current index by 1
            }
        }
        //end of loop
        return (names, species, ages);
        //returns the arrays
    }
}