pragma solidity ^0.8.4; //pragma directive specifying the compiler version


//contract is a collection of code (functions, data, etc.) that resides at a specific address on the Ethereum blockchain
//the following code defines a contract named MyContract
contract MyContract {

    //state variables are permanently stored in contract storage
    //they can be structs, mappings or arrays
    uint balance; //state variable of type uint (unsigned integer)

    //constructor is an optional function that is executed only once when the contract is first deployed
    constructor() {
        balance = 0; //assigning value 0 to the balance variable
    }

    //functions can be public, private, external, or internal
    //public functions can be called by anyone, either from within the contract or externally
    //the following function is a public function named deposit, which takes one parameter of type uint
    function deposit(uint amount) public {

       //msg is a global variable containing information about the current transaction
       //sender returns the address of the account that initiated the transaction
       //balance is an address property that returns the current balance of an account
       if (msg.sender.balance >= amount) { //checking if the sender has enough balance
          balance += amount; //adding the amount to the contract's balance
       }
    }

    //view functions do not modify the state of the contract and do not require a transaction to be called
    //the following function is a view function named getBalance, which returns the current balance of the contract
    //view functions are free to call other view functions, but not functions that modify the state
    function getBalance() public view returns (uint) {
        return balance; //returns the value of the balance variable
    }

    //event is a way for contract functions to communicate that something happened on the blockchain to the outside world
    //the following event is named Withdrawal and takes two parameters of type address and uint
    event Withdrawal(address indexed withdrawer, uint amount); //indexed keyword allows for efficient filtering of events

    //functions can also have modifiers
    //modifiers are code that is run before the function executes, and can check conditions and decide whether to continue or abort
    //the following function is a public function named withdraw
    function withdraw() public {

        //require is a global function that checks a condition and throws an exception if it is not met
        //the following require statement checks if the condition within the parentheses is true
       require(balance > 0); //checking if the contract has a positive balance

       //send and transfer are two ways to send ether (currency) from one address to another
       //the following statement sends the contract's balance to the sender's address
       payable(msg.sender).send(balance); //using the send method

       //the following statement reverts the transaction if the send operation fails
       //this ensures that the transaction is not partially executed
       require(payable(msg.sender).send(balance)); //using the transfer method

       //emit is used to trigger an event
       //the following emit statement triggers the Withdrawal event with the sender's address and the amount withdrawn
       emit Withdrawal(msg.sender, balance);
    }
}