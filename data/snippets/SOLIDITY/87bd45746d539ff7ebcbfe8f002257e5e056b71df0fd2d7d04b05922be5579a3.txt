pragma solidity ^0.8.0;

// Importing the necessary libraries
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

// Creating a contract named MyNFT
contract MyNFT is ERC721 {
    // Using the Counters library for managing token IDs
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;
    
    // Mapping to store the token URIs
    mapping (uint256 => string) private _tokenURIs;
    
    // Event for emitting when an NFT is minted
    event NFTMinted(address indexed owner, uint256 tokenId, string tokenURI);
    
    // Initializing the contract
    constructor() ERC721("MyNFT", "MNFT") {}
    
    // Function to mint a new NFT
    function mintNFT(address owner, string memory tokenURI) public returns (uint256) {
        // Incrementing the token ID
        _tokenIds.increment();
        uint256 newTokenId = _tokenIds.current();
        
        // Minting the NFT and setting its token URI
        _mint(owner, newTokenId);
        _setTokenURI(newTokenId, tokenURI);
        
        // Emitting the NFTMinted event
        emit NFTMinted(owner, newTokenId, tokenURI);
        
        // Returning the new token ID
        return newTokenId;
    }
    
    // Function to retrieve the token URI of a specific token
    function getTokenURI(uint256 tokenId) public view returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        return _tokenURIs[tokenId];
    }
    
    // Overriding internal function from ERC721 contract to set token URI
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }
}