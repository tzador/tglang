pragma solidity ^0.6.0;

// Importing OpenZeppelin's ERC-20 contract
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";

// Defining the contract
contract MyToken is ERC20 {
    // Adding the owner variable
    address owner;

    // Creating a mapping of addresses to bool
    mapping(address => bool) public whitelist;

    // Events
    event AddedToWhitelist(address indexed account);
    event RemovedFromWhitelist(address indexed account);

    // Constructor
    constructor() public ERC20("MyToken", "MTKN") {
        // Assigning the contract creator as the owner
        owner = msg.sender;

        // Minting 100 tokens to the creator
        _mint(owner, 100 * (10 ** uint256(decimals())));
    }

    // Function to add an address to the whitelist
    function addToWhitelist(address account) external {
        require(msg.sender == owner, "You are not the owner");

        // Adding the address to the whitelist
        whitelist[account] = true;

        // Emitting the event
        emit AddedToWhitelist(account);
    }

    // Function to remove an address from the whitelist
    function removeFromWhitelist(address account) external {
        require(msg.sender == owner, "You are not the owner");

        // Removing the address from the whitelist
        whitelist[account] = false;

        // Emitting the event
        emit RemovedFromWhitelist(account);
    }

    // Overriding the transfer function to only allow transfer to whitelisted addresses
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(whitelist[recipient], "Recipient is not whitelisted");

        // Calling the transfer function from ERC20
        super.transfer(recipient, amount);
    }
}