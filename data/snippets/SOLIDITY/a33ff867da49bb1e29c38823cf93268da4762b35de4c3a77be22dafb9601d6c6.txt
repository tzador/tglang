interface ERC20 {
    //Method 1: Total supply of the token
   function totalSupply() external view returns (uint256);

    //Method 2: Get the balance of a specific account
   function balanceOf(address account) external view returns (uint256);

    //Method 3: Transfer tokens from one account to another
   function transfer(address recipient, uint256 amount) external returns (bool);

    //Method 4: Get the allowance approved by owner for spender to spend tokens on their behalf
   function allowance(address owner, address spender) external view returns (uint256);

    //Method 5: Approve the given address to spend the specific amount of tokens on behalf of msg.sender
   function approve(address spender, uint256 amount) external returns (bool);

    //Method 6: Transfer tokens from one account to another using the allowance mechanism
   function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    //Events
   event Transfer(address indexed from, address indexed to, uint256 value);
   event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract MyToken is ERC20 {
    //Variables
   string public name = "My Token";
   string public symbol = "MTK";
   uint8 public decimals = 18;
   uint256 public totalSupply;

    //Mappings
   mapping(address => uint256) balances;
   mapping(address => mapping(address => uint256)) allowances;

    //Constructor
   constructor(uint256 _totalSupply) {
    balances[msg.sender] = _totalSupply;
    totalSupply = _totalSupply;
   }

    //Method 1 Implementation
   function totalSupply() external view override returns (uint256) {
    return totalSupply;
   }

    //Method 2 Implementation
   function balanceOf(address account) external view override returns (uint256) {
    return balances[account];
   }

    //Method 3 Implementation
   function transfer(address recipient, uint256 amount) external override returns (bool) {
    require(balances[msg.sender] >= amount, "Insufficient balance");
    balances[msg.sender] -= amount;
    balances[recipient] += amount;
    emit Transfer(msg.sender, recipient, amount);
    return true;
   }

    //Method 4 Implementation
   function allowance(address owner, address spender) external view override returns (uint256) {
    return allowances[owner][spender];
   }

    //Method 5 Implementation
   function approve(address spender, uint256 amount) external override returns (bool) {
    allowances[msg.sender][spender] = amount;
    emit Approval(msg.sender, spender, amount);
    return true;
   }

    //Method 6 Implementation
   function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
    require(balances[sender] >= amount, "Insufficient balance");
    require(allowances[sender][msg.sender] >= amount, "Allowance too low");
    balances[sender] -= amount;
    balances[recipient] += amount;
    allowances[sender][msg.sender] -= amount;
    emit Transfer(sender, recipient, amount);
    return true;
   }
}