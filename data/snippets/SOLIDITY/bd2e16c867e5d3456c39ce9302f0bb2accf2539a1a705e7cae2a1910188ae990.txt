pragma solidity >=0.7.0 <0.9.0; // ensure compatibility with Solidity versions
contract MyContract {
    address public owner; // declare public variable to store owner's address
    mapping(address => uint256) public balances; // declare public mapping to store balances of addresses

    modifier onlyOwner() { // declare modifier to restrict access to owner only
        require(msg.sender == owner, "Not the owner"); // require statement checks if caller is the owner
        _; // continue execution if caller is the owner
    }

    constructor() { // constructor function to set owner to contract deployer
        owner = msg.sender;
    }

    function deposit() public payable { // function to deposit funds into contract
        balances[msg.sender] += msg.value; // update balance of caller
    }

    function withdraw(uint256 amount) public { // function to withdraw funds from contract
        require(balances[msg.sender] >= amount, "Insufficient balance"); // require statement checks if caller has enough funds
        balances[msg.sender] -= amount; // update balance of caller
        payable(msg.sender).transfer(amount); // transfer funds to caller
    }

    function transfer(address to, uint256 amount) public onlyOwner { // function to transfer funds from contract to another address, restricted to owner only
        require(balances[address(this)] >= amount, "Insufficient balance"); // require statement checks if contract has enough funds
        balances[address(this)] -= amount; // update contract's balance
        balances[to] += amount; // update balance of recipient
    }
}