pragma solidity ^0.8.4; //version declaration

contract VotingSystem {
    
    //creating a mapping for voter's address to a boolean value to track their eligibility to vote
    mapping(address => bool) public votersEligibility;
    
    //declaring an event for when a new candidate is added
    event NewCandidateAdded(string _name);
    
    //creating a candidate structure
    struct Candidate {
        string name;
        uint voteCount; //track number of votes for each candidate
    }
    
    //declaring array to store list of candidates
    Candidate[] public candidates;
    
    //function to add new candidate 
    function addCandidate(string memory _name) public {
        Candidate memory newCandidate = Candidate(_name, 0); //create new candidate with name and initial vote count of 0
        candidates.push(newCandidate); //add new candidate to array
        emit NewCandidateAdded(_name); //emit event for new candidate
    }
    
    //function to return number of candidates
    function getCandidateCount() public view returns (uint) {
        return candidates.length;
    }
    
    //function to cast a vote for a candidate
    function vote(uint _candidateIndex) public {
        require(votersEligibility[msg.sender], "You are not eligible to vote."); //check if voter is eligible to vote
        require(_candidateIndex < candidates.length, "Invalid candidate index."); //check if candidate index is valid
        candidates[_candidateIndex].voteCount++; //increment vote count for candidate
    }
    
    //function to check the winning candidate
    function getWinner() public view returns (string memory) {
        uint winningVoteCount = 0;
        string memory winningCandidateName;
        for(uint i=0; i < candidates.length; i++) {
            if(candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winningCandidateName = candidates[i].name;
            }
        }
        return winningCandidateName;
    }
}