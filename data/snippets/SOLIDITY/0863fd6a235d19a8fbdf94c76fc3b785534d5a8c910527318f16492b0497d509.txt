// contract that implements a voting system

contract VotingSystem {

    // list of candidates
    mapping (address => bool) public candidates;

    // list of voters
    mapping (address => bool) public voters;

    // list of votes
    mapping (address => Candidate) public votes;

    // event to track vote casting
    event Voted(address _voter, address _candidate);

    // struct for candidate
    struct Candidate {
        string name;
        uint votes;
    }

    // modifier to check if caller is a candidate
    modifier onlyCandidate() {
        require(candidates[msg.sender]);
        _;
    }

    // modifier to check if caller is a voter
    modifier onlyVoter() {
        require(voters[msg.sender]);
        _;
    }

    // function to add candidates
    function addCandidate(address _candidate, string _name) public onlyOwner {
        candidates[_candidate] = true;

        // create candidate struct and add to votes mapping
        votes[_candidate] = Candidate({
            name: _name,
            votes: 0
        });
    }

    // function to register voter
    function registerVoter(address _voter) public onlyOwner {
        voters[_voter] = true;
    }

    // function to vote for a candidate
    function vote(address _candidate) public onlyVoter {
        require(!votes[msg.sender].name); // check if voter has already voted

        // increment vote count for candidate in votes mapping
        votes[_candidate].votes++;

        // emit Voted event
        emit Voted(msg.sender, _candidate);
    }

    // function to get candidate with highest votes
    function getWinner() public view returns (string _name, uint highestVotes) {
        for (uint i = 0; i < votes.length; i++) {
            if (votes[i].votes > highestVotes) {
                highestVotes = votes[i].votes;
                _name = votes[i].name;
            }
        }
    }

}