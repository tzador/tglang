// Contract definition
contract MyContract {
    
    // State variables
    uint256 public balance;
    uint256 private constant MAX_BALANCE = 1000;
    address private owner;
    string private token = "ABC";
    bool private isActive = false;
    
    // Events
    event BalanceChanged(uint256 newBalance);
    event TokenTransferred(address recipient, uint amount);
    
    // Constructor
    constructor() {
        owner = msg.sender;
    }
    
    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }
    
    modifier balanceNotMaxed() {
        require(balance < MAX_BALANCE, "Balance is already at maximum");
        _;
    }
    
    modifier contractActive() {
        require(isActive == true, "Contract is not active");
        _;
    }
    
    // Functions
    function deposit(uint256 amount) external onlyOwner balanceNotMaxed contractActive {
        balance = balance + amount;
        emit BalanceChanged(balance);
    }
    
    function withdraw(uint256 amount) external onlyOwner contractActive {
        require(balance >= amount, "Not enough balance");
        balance = balance - amount;
        emit BalanceChanged(balance);
    }
    
    function transferToken(address recipient, uint256 amount) external onlyOwner contractActive {
        require(balance >= amount, "Not enough balance");
        emit TokenTransferred(recipient, amount);
    }
}