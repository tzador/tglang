pragma solidity ^0.8.0; //Declare the version of Solidity being used

contract ExampleContract { //Create a contract called ExampleContract
    
    uint public num; //Declare a public variable of type uint (unsigned integer)
    
    constructor(uint _num) { //Create a constructor that takes in a parameter of type uint called _num
        num = _num; //Set the value of num to the value of the _num parameter
    }
    
    function doubleNum() public view returns(uint) { //Create a function called doubleNum that returns a uint value
        return num * 2; //Return the value of num multiplied by 2
    }
    
    function changeNum(uint _newNum) public { //Create a function called changeNum that takes in a parameter of type uint called _newNum
        require(_newNum > 0, "New number must be greater than 0"); //Require that the value of _newNum is greater than 0, otherwise revert with an error message
        
        num = _newNum; //Set the value of num to the value of the _newNum parameter
    }
    
    function calculateSum(uint[] memory _numbers) public pure returns(uint) { //Create a function called calculateSum that takes in a dynamic array of uint values called _numbers and returns a uint value
        uint sum = 0; //Declare a local variable called sum and initialize it to 0
        
        for(uint i = 0; i < _numbers.length; i++) { //Create a for loop that iterates through the _numbers array
            sum += _numbers[i]; //Add the value of each element in the array to the sum variable
        }
        
        return sum; //Return the final value of sum
    }
    
    modifier onlyOwner() { //Create a modifier called onlyOwner
        require(msg.sender == owner, "Only owner can call this function"); //Require that the caller of the function is the owner of the contract, otherwise revert with an error message
        _; //Execute the function's code
    }
    
    function changeOwner(address _newOwner) public onlyOwner { //Create a function called changeOwner that takes in a parameter of type address called _newOwner and can only be called by the owner of the contract
        owner = _newOwner; //Set the value of owner to the value of the _newOwner parameter
    }
    
    address public owner; //Declare a public variable of type address called owner
    
}