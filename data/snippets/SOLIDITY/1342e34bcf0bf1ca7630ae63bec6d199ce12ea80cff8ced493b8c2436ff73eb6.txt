// Interfaces
interface ERC721TokenReceiver {
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);
}

// Libraries
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
      if (a == 0) {
        return 0;
      }
      uint256 c = a * b;
      assert(c / a == b);
      return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
      uint256 c = a / b;
      return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
      uint256 c = a % b;
      return c;
    }
}

// Contract
contract ExampleContract {

    // Struct
    struct Person {
        string name;
        uint age;
        string country;
    }

    // Events
    event NewPerson(string name, uint age, string country);

    // State variables
    address public owner;
    uint public numPeople;

    // Mappings
    mapping (uint => Person) idToPerson;

    // Constructor
    constructor() public {
        owner = msg.sender;
    }

    //Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    // Functions
    function addPerson(string _name, uint _age, string _country) public onlyOwner {
        numPeople = SafeMath.add(numPeople, 1);
        Person memory newPerson = Person(_name, _age, _country);
        idToPerson[numPeople] = newPerson;
        emit NewPerson(_name, _age, _country);
    }

    function getPerson(uint _id) public view returns(string, uint, string) {
        return (idToPerson[_id].name, idToPerson[_id].age, idToPerson[_id].country);
    }

    function updatePerson(uint _id, string _name, uint _age, string _country) public onlyOwner {
        Person storage personToUpdate = idToPerson[_id];
        personToUpdate.name = _name;
        personToUpdate.age = _age;
        personToUpdate.country = _country;
    }

    function deletePerson(uint _id) public onlyOwner {
        delete idToPerson[_id];
        numPeople = SafeMath.sub(numPeople, 1);
    }

    function withdrawFunds() public onlyOwner {
        msg.sender.transfer(address(this).balance);
    }

    function() payable {}
}