pragma solidity ^0.8.7; // version of Solidity used

// Interface for a token contract
interface IToken {
    // Function to get the total supply of tokens
    function totalSupply() external view returns (uint256);
    
    // Function to get the balance of a specific address
    function balanceOf(address account) external view returns (uint256);
    
    // Function to transfer tokens from the sender to a specified address
    function transfer(address recipient, uint256 amount) external returns (bool);
    
    // Function to approve a specific amount of tokens for a specific address
    function approve(address spender, uint256 amount) external returns (bool);
    
    // Function to get the current allowance of an address for a specific spender
    function allowance(address owner, address spender) external view returns (uint256);
    
    // Event triggered when tokens are transferred
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    // Event triggered when an allowance is set
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// Contract for a simple token
contract MyToken is IToken {
    // State variables
    string public name; // Name of the token
    string public symbol; // Symbol of the token
    uint8 public decimals; // Decimal places for the token
    uint256 private _totalSupply; // Total supply of the token
    mapping (address => uint256) private _balances; // Mapping of address to balance
    mapping (address => mapping (address => uint256)) private _allowances; // Mapping of address to address to allowance
    
    // Constructor
    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        _totalSupply = _initialSupply;
        _balances[msg.sender] = _initialSupply;
    }
    
    // Function to get the total supply of tokens
    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }
    
    // Function to get the balance of a specific address
    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }
    
    // Function to transfer tokens from the sender to a specified address
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        require(amount <= _balances[msg.sender], "Not enough balance");
        _balances[msg.sender] = _balances[msg.sender] - amount;
        _balances[recipient] = _balances[recipient] + amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }
    
    // Function to approve a specific amount of tokens for a specific address
    function approve(address spender, uint256 amount) external override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    // Function to get the current allowance of an address for a specific spender
    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }
}