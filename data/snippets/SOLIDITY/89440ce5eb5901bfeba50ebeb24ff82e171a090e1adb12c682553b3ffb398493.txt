pragma solidity ^0.8.0; // Declare the version of Solidity being used

// Create a contract called "Token" with basic ERC20 token functionality
contract Token {
    string public constant name = "MyToken"; // Set the token name
    string public constant symbol = "MTK"; // Set the token symbol
    uint8 public constant decimals = 18; // Set the number of decimals for token display

    // Declare events to track token transfers and approval
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    // Create a mapping to keep track of token balances for each address
    mapping (address => uint256) public balanceOf;

    // Create a mapping to keep track of allowed token spending for each address
    mapping (address => mapping (address => uint256)) public allowance;

    // Set the initial supply of tokens to be distributed
    uint256 public totalSupply = 1000000 * 10**uint256(decimals);

    // Create a constructor function to distribute initial supply to the contract creator
    constructor() public {
        balanceOf[msg.sender] = totalSupply; // Set the initial balance of the contract creator to total supply
    }

    // Create a function to transfer tokens to another address
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value); // Check if the sender has enough tokens to transfer
        balanceOf[msg.sender] -= _value; // Subtract the transferred amount from the sender's balance
        balanceOf[_to] += _value; // Add the transferred amount to the recipient's balance
        emit Transfer(msg.sender, _to, _value); // Trigger the transfer event
        return true; // Return success status
    }

    // Create a function to approve another address to spend tokens on sender's behalf
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value; // Set the approved amount for the spender
        emit Approval(msg.sender, _spender, _value); // Trigger the approval event
        return true; // Return success status
    }

    // Create a function to transfer tokens from one address to another on behalf of token owner
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from]); // Check if the sender has enough tokens to transfer
        require(_value <= allowance[_from][msg.sender]); // Check if the spender is allowed to spend the requested amount
        balanceOf[_from] -= _value; // Subtract the transferred amount from the sender's balance
        balanceOf[_to] += _value; // Add the transferred amount to the recipient's balance
        allowance[_from][msg.sender] -= _value; // Reduce the allowed token spending for the sender
        emit Transfer(_from, _to, _value); // Trigger the transfer event
        return true; // Return success status
    }
}