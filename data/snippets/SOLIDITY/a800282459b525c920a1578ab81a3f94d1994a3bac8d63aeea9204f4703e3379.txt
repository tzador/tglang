pragma solidity ^0.8.0;   // Define the version of Solidity being used

contract MyContract {  // Define a contract called 'MyContract'
   
    // State variables
    uint public variable1;
    string public variable2;
    address public owner;
   
    // Events
    event NewValueSet(uint indexed _value, string _message);   // Define an event 'NewValueSet' that takes in a uint and a string as parameters
   
    // Constructor
    constructor() {
        owner = msg.sender;   // Set 'owner' variable to the address of the contract creator (msg.sender)
    }

    // Functions
    function setValue(uint _newValue) public {   // Define a function 'setValue' that takes in a uint as a parameter and is public
        require(msg.sender == owner, "Only the owner can set a new value.");   // Require that only the owner can call this function
        variable1 = _newValue;   // Set 'variable1' to the new value provided
        emit NewValueSet(_newValue, "New value has been set.");   // Emit the 'NewValueSet' event with the new value and a message
    }

    function getValue() public view returns (uint) {   // Define a function 'getValue' that is public and returns a uint
        return variable1;   // Return the value of 'variable1'
    }
}