pragma solidity ^0.8.0;

contract MyContract {
    // State variables
    uint256 private variable1;
    address public contractOwner;

    // Events
    event Variable1Set(uint256 newValue);
    
    // Constructor
    constructor(){
        contractOwner = msg.sender;
    }

    // Functions
    function setVariable1(uint256 _newValue) external {
        require(msg.sender == contractOwner, "Only contract owner can set variable1");
        variable1 = _newValue;
        emit Variable1Set(_newValue);
    }

    function getVariable1() external view returns (uint256) {
        return variable1;
    }

    // Modifiers
    modifier onlyAdmin() {
        require(msg.sender == contractOwner, "Only contract owner can access this function");
        _;
    }
    
    // Inheritance
    contract ChildContract is MyContract {
        uint256 private variable2;
    }
    
    // Interface
    interface IMyContract {
        function getVariable1() external view returns (uint256);
    }
    
    // Struct
    struct MyStruct {
        string name;
        uint256 age;
    }

    // Enums
    enum MyEnum {
        Value1,
        Value2,
        Value3
    }

    // Mapping
    mapping(address => uint256) private balances;

    // Arrays
    uint256[] private numbers;

    // Fallback function
    fallback() external payable {
        balances[msg.sender] += msg.value;
    }

    // Receive function
    receive() external payable {}
}