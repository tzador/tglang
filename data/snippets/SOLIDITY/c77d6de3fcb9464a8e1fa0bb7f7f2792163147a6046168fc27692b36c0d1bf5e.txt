pragma solidity >=0.4.0 <0.6.0; // specifying the version of solidity

// creating an abstract contract
contract MyContract {
    address public owner; // declaring the owner variable

    // defining a modifier for restricting function access
    modifier onlyOwner() {
        require(msg.sender == owner); // checking if the caller is the owner
        _; // placeholder for the actual function code
    }

    // declaring a constructor function to set the owner
    constructor() public {
        owner = msg.sender; // setting the owner to be the caller of the function
    }

    // declaring a function to transfer ownership
    function transferOwnership(address newOwner) public onlyOwner {
        // requiring the new owner address to not be 0x0
        require(newOwner != address(0));

        owner = newOwner; // assigning the new owner
    }

    // declaring a function that can only be called by the owner
    function doSomething() public onlyOwner {
        // function code goes here
    }
}

// creating a new contract that extends MyContract
contract MyNewContract is MyContract {
    // declaring a function that calls the parent contract's doSomething function
    function doSomethingElse() public {
        doSomething(); // calling the parent function
        // function code goes here
    }
}