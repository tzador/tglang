pragma solidity >=0.5.0 <0.7.0;

// A contract that implements a bank account
contract Bank {
    // Variables to store balance and owner address
    uint private balance;
    address private owner;

    // Event to emit when a transaction is made
    event Transaction(address _sender, uint _amount);

    // Constructor function to set initial balance and owner address
    constructor(uint _initialBalance) public {
        balance = _initialBalance;
        owner = msg.sender;
    }

    // Function to deposit funds to the bank account
    function deposit() public payable {
        // Checks if the sender is the owner
        require(msg.sender == owner, "Only the owner can deposit funds");
        
        // Adds the deposit amount to the balance
        balance = balance + msg.value;
        
        // Emits the Transaction event
        emit Transaction(msg.sender, msg.value);
    }

    // Function to withdraw funds from the bank account
    function withdraw(uint _amount) public {
        // Checks if the sender is the owner
        require(msg.sender == owner, "Only the owner can withdraw funds");

        // Checks if the bank account has enough balance
        require(balance >= _amount, "Insufficient balance");

        // Subtracts the withdrawal amount from the balance
        balance = balance - _amount;

        // Transfers the funds to the sender
        msg.sender.transfer(_amount);

        // Emits the Transaction event
        emit Transaction(msg.sender, _amount);
    }

    // Function to get the current balance of the bank account
    function getBalance() public view returns (uint) {
        return balance;
    }

    // Function to change the owner of the bank account
    function changeOwner(address _newOwner) public {
        // Checks if the sender is the current owner
        require(msg.sender == owner, "Only the owner can transfer ownership");

        // Changes the owner to the new address
        owner = _newOwner;
    }
}