pragma solidity ^0.8.0;

//Creates a contract called MyToken
contract MyToken {
    //Declares a variable that will hold the total supply for our token
    uint256 totalSupply;
    //Mapping to hold the balance of each address
    mapping (address => uint256) balances;
    //Mapping to hold the allowance for each address for another address
    mapping (address => mapping (address => uint256)) allowed;

    //Event to track when tokens are transferred
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    //Event to track when an address approves another address to spend a certain amount of tokens
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    //Constructor function to initialize the total supply to be held by the contract creator
    constructor() public {
        totalSupply = 1000000;
        balances[msg.sender] = totalSupply;
    }

    //Function to get the total supply of the token
    function getTotalSupply() public view returns (uint256) {
        return totalSupply;
    }

    //Function to get the balance of a specific address
    function getBalance(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    //Function to allow an address to transfer tokens on behalf of another address
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    //Function to transfer tokens from one address to another
    function transfer(address _to, uint256 _value) public returns (bool) {
        //Checks if the sender has enough tokens to transfer
        require(balances[msg.sender] >= _value, "Insufficient balance");
        //Updates the balances of the sender and receiver
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        //Emits the transfer event
        emit Transfer(msg.sender, _to, _value);
        //Returns true to indicate a successful transfer
        return true;
    }

    //Function to transfer tokens from an address to another address on behalf of a given address
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        //Checks if the sender has enough tokens to spend on behalf of the given address
        require(_value <= allowed[_from][msg.sender], "Insufficient allowance");
        //Checks if the sender has enough tokens to transfer
        require(balances[_from] >= _value, "Insufficient balance");
        //Updates the balances and the allowance for the given addresses
        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;
        //Emits the transfer event
        emit Transfer(_from, _to, _value);
        //Returns true to indicate a successful transfer
        return true;
    }

    //Function to get the allowance for a given address to spend on behalf of the sender
    function getAllowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }
}