/**
 * @title Token
 * @dev This contract represents a standard ERC20 compliant token
 */
contract Token {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    /**
     * @dev Constructor function sets the initial values for the token
     * @param _name The name of the token
     * @param _symbol The symbol of the token
     * @param _decimals The number of decimals the token uses
     * @param _totalSupply The total supply of the token
     */
    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;

        // Assign the total supply of tokens to the contract creator
        balanceOf[msg.sender] = _totalSupply;
    }

    /**
     * @dev Function to transfer tokens from one address to another
     * @param _to The address to transfer tokens to
     * @param _value The amount of tokens to be transferred
     * @return A boolean that indicates if the transfer was successful or not
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        // Require the sender has enough tokens to transfer
        require(balanceOf[msg.sender] >= _value);

        // Reduce the sender's balance by the amount being transferred
        balanceOf[msg.sender] -= _value;

        // Increase the recipient's balance by the amount being transferred
        balanceOf[_to] += _value;

        // Emit the event that the transfer took place
        emit Transfer(msg.sender, _to, _value);

        // Return true to indicate a successful transfer
        return true;
    }

    /**
     * @dev Function to approve another address to spend tokens on behalf of the sender
     * @param _spender The address to approve
     * @param _value The amount of tokens to approve for spending
     * @return A boolean that indicates if the approval was successful or not
     */
    function approve(address _spender, uint256 _value) public returns (bool success) {
        // Update the allowance mapping for the sender and the spender
        allowance[msg.sender][_spender] = _value;

        // Emit the event that the approval took place
        emit Approval(msg.sender, _spender, _value);

        // Return true to indicate a successful approval
        return true;
    }

    /**
     * @dev Function to transfer tokens from one address to another on behalf of the sender
     * @param _from The address to transfer tokens from
     * @param _to The address to transfer tokens to
     * @param _value The amount of tokens to be transferred
     * @return A boolean that indicates if the transfer was successful or not
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        // Require the spender has enough allowance to transfer the specified amount
        require(allowance[_from][msg.sender] >= _value);

        // Require the sender has enough tokens to transfer
        require(balanceOf[_from] >= _value);

        // Reduce the spender's allowance by the amount being transferred
        allowance[_from][msg.sender] -= _value;

        // Reduce the sender's balance by the amount being transferred
        balanceOf[_from] -= _value;

        // Increase the recipient's balance by the amount being transferred
        balanceOf[_to] += _value;

        // Emit the event that the transfer took place
        emit Transfer(_from, _to, _value);

        // Return true to indicate a successful transfer
        return true;
    }

    /**
     * @dev Event that is emitted when tokens are transferred
     * @param _from The address the tokens are transferred from
     * @param _to The address the tokens are transferred to
     * @param _value The amount of tokens that were transferred
     */
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    /**
     * @dev Event that is emitted when an address is approved to spend tokens on behalf of another address
     * @param _owner The address that approved spending permissions
     * @param _spender The address that is approved to spend tokens
     * @param _value The amount of tokens that were approved for spending
     */
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}