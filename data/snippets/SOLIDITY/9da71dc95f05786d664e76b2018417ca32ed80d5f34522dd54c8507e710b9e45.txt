pragma solidity >=0.4.22 <0.9.0; // Solidity version requirement

contract MyContract { // Contract declaration
    address owner; // Owner's address variable

    struct User { // Struct for user data storage
        uint id; // User ID
        string name; // User name
        uint age; // User age
    }

    mapping(address => User) public users; // Mapping for user data mapped to address

    event UserAdded(uint id, string name, uint age); // Event to trigger when user data is added

    constructor() { // Constructor function
        owner = msg.sender; // Set the contract deployer as the owner
    }

    modifier onlyOwner() { // Modifier to restrict access to owner only
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }

    function addUser(string memory _name, uint _age) public onlyOwner { // Function to add a new user
        uint id = uint(keccak256(abi.encodePacked(msg.sender, _name, _age))); // Generate unique ID for the new user
        users[msg.sender] = User(id, _name, _age); // Add the new user to the mapping
        emit UserAdded(id, _name, _age); // Trigger the UserAdded event
    }

    function getUser(address _userAddress) public view returns (uint, string memory, uint) { // Function to get user data
        User storage user = users[_userAddress]; // Store the user data from the mapping
        return (user.id, user.name, user.age); // Return the user data as a tuple
    }

    function changeOwner(address _newOwner) public onlyOwner { // Function to change the contract owner
        require(_newOwner != address(0), "Invalid address."); // Check for valid address
        owner = _newOwner; // Set new owner
    }
}