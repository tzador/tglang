pragma solidity ^0.8.4; /* Version of Solidity compiler being used */

interface ERC20 {
    /* ERC20 Token Standard Interface */

    function totalSupply() external view returns (uint256); /* Returns the total token supply */
    function balanceOf(address account) external view returns (uint256); /* Returns the balance of the specified address */
    function allowance(address owner, address spender) external view returns (uint256); /* Returns the amount which spender is still allowed to withdraw from owner */
    function transfer(address recipient, uint256 amount) external returns (bool); /* Transfers amount of tokens to address recipient */
    function approve(address spender, uint256 amount) external returns (bool); /* Sets amount as the allowance of spender over msg.sender's tokens */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); /* Move amount tokens from sender to recipient */
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool); /* Increases the allowance granted to spender by addedValue (handling overflow) */
    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool); /* Decreases the allowance granted to spender by subtractedValue (handling underflow) */
    event Transfer(address indexed from, address indexed to, uint256 value); /* Emits when tokens are transferred */
    event Approval(address indexed owner, address indexed spender, uint256 value); /* Emits when spender is allowed to withdraw from owner */
}