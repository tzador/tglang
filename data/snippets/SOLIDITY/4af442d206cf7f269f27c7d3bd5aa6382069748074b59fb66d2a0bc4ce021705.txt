/* This code snippet shows an example of a contract that implements the SOLID principle of Single Responsibility 
by separating different functionalities into distinct and cohesive functions and contracts.*/
contract ExampleContract {
    mapping(address => uint) balances; // state variable to keep track of account balances
    
    /* first function - handles the transfer of tokens from one address to another */
    function transfer(address _to, uint _amount) external {
        require(balances[msg.sender] >= _amount, "Insufficient balance"); // check if sender has enough balance
        balances[msg.sender] -= _amount; // deduct transferred amount from sender's balance
        balances[_to] += _amount; // add transferred amount to receiver's balance
    }
    
    /* second function - returns balance of a specific address */
    function getBalance(address _account) external view returns (uint) {
        return balances[_account]; // returns balance of the specified account
    }
}

/* Another contract that adds a new feature of generating a random number */
contract RandomNumberGenerator {
    /* event that will be emitted when a new random number is generated */
    event RandomNumberGenerated(uint randomNumber);
    
    /* state variables for storing random number and the current block number */
    uint public randomNumber;
    uint public currentBlockNumber;
    
    /* function for generating a random number, can only be called by the owner of the contract */
    function generateRandomNumber() external {
        require(msg.sender == owner); // check if caller is the owner of the contract
        randomNumber = uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty))); // generate random number using current block's timestamp and difficulty
        currentBlockNumber = block.number; // save the current block number
        emit RandomNumberGenerated(randomNumber); // emit event with the generated random number
    }
}