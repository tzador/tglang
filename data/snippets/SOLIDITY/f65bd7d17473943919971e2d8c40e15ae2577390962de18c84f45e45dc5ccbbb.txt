pragma solidity ^0.6.0;

//This contract represents a basic decentralized voting system
contract VotingSystem {

  //Struct to store information about a candidate
  struct Candidate {
    string name;
    uint voteCount;
  }

  //Array to store all the candidates
  Candidate[] public candidates;

  //Mapping to keep track of addresses that have already voted
  mapping(address => bool) public voters;

  //Event to emit when a new candidate is added
  event CandidateAdded(string candidateName);

  //Event to emit when a vote is cast
  event VoteCast(address voter, string candidateName);

  //Function to add a new candidate to the election
  function addCandidate(string memory _name) public {

    //Check if the caller is the contract owner
    require(msg.sender == owner);

    //Add the new candidate to the candidates array
    candidates.push(Candidate(_name, 0));

    //Emit the CandidateAdded event
    emit CandidateAdded(_name);
  }

  //Function to cast a vote for a candidate
  function castVote(uint _candidateIndex) public {

    //Check if the caller has not already voted
    require(voters[msg.sender] == false);

    //Check if the candidate index is valid
    require(_candidateIndex >= 0 && _candidateIndex < candidates.length);

    //Increment the vote count for the selected candidate
    candidates[_candidateIndex].voteCount++;

    //Mark the caller as having voted
    voters[msg.sender] = true;

    //Emit the VoteCast event
    emit VoteCast(msg.sender, candidates[_candidateIndex].name);
  }
}