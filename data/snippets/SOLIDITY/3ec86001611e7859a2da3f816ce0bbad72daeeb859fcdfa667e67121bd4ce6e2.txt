pragma solidity >=0.7.0 <0.9.0; //pragma directive to specify compiler version
/// @title ERC20 Interface
interface IERC20 {
    /// @dev Returns the amount of tokens in existence.
    function totalSupply() external view returns (uint256);
    /// @dev Returns the amount of tokens owned by `account`.
    function balanceOf(address account) external view returns (uint256);
    /// @dev Moves `amount` tokens from the caller's account to `recipient`.
    /// Returns a boolean value indicating whether the operation was successful.
    function transfer(address recipient, uint256 amount) external returns (bool);
    /// @dev Returns the remaining number of tokens that `spender` will be
    /// allowed to spend on behalf of `owner` through `delegate`'s approval.
    function allowance(address owner, address spender) external view returns (uint256);
    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
    /// Returns a boolean value indicating whether the operation was successful.
    function approve(address spender, uint256 amount) external returns (bool);
    /// @dev Moves `amount` tokens from `sender` to `recipient` using the
    /// allowance mechanism. `amount` is then deducted from the caller's allowance.
    /// Returns a boolean value indicating whether the operation was successful.
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    /// @dev Emitted when `value` tokens are moved from one account (`from`) to
    /// another (`to`).
    event Transfer(address indexed from, address indexed to, uint256 value);
    /// @dev Emitted when the allowance of a `spender` for an `owner` is set by
    /// a call to `approve`. `value` is the new allowance.
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
/// @title ERC20 Token contract, implementing the IERC20 interface.
contract MyToken is IERC20 {
    string internal _name;
    string internal _symbol;
    uint8 internal _decimals;
    uint256 internal _totalSupply;
    mapping(address => uint256) internal _balances;
    mapping(address => mapping(address => uint256)) internal _allowances;
    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
        _totalSupply = totalSupply_ * 10**uint256(decimals_);
        _balances[msg.sender] = _totalSupply;
    }
    /// @dev See {IERC20-totalSupply}.
    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }
    /// @dev See {IERC20-balanceOf}.
    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }
    /// @dev See {IERC20-transfer}.
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    /// @dev See {IERC20-allowance}.
    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }
    /// @dev See {IERC20-approve}.
    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    /// @dev See {IERC20-transferFrom}.
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }
    
    /// @dev Internal function to transfer tokens from one account to another.
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");
        
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        
        emit Transfer(sender, recipient, amount);
    }
    
    /// @dev Internal function to approve an allowance for a spender.
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        
        _allowances[owner][spender] = amount;
        
        emit Approval(owner, spender, amount);
    }
}