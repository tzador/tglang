/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

/**
 * @dev The Ownable constructor sets the original `owner` of the contract to the sender
 * account.
 */
constructor() public {
owner = msg.sender;
}

/**
 * @dev Throws if called by any account other than the owner.
 */
modifier onlyOwner() {
require(isOwner());
_;
}

/**
 * @dev Returns true if the caller is the current owner.
 */
function isOwner() public view returns (bool) {
return msg.sender == owner;
}

/**
 * @dev Allows the current owner to relinquish control of the contract.
 * @notice Renouncing ownership will leave the contract without an owner.
 * It will not be possible to call the functions with the `onlyOwner`
 * modifier anymore.
 */
function renounceOwnership() public onlyOwner {
emit OwnershipTransferred(owner, address(0));
owner = address(0);
}

/**
 * @dev Allows the current owner to transfer control of the contract to a newOwner.
 * @param _newOwner The address to transfer ownership to.
 */
function transferOwnership(address _newOwner) public onlyOwner {
require(_newOwner != address(0));
emit OwnershipTransferred(owner, _newOwner);
owner = _newOwner;
}
}