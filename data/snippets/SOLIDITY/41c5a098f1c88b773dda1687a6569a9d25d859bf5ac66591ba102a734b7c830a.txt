pragma solidity >=0.8.0 <0.9.0; // pragma directive to specify the compiler version

// Contract definition
contract SimpleContract {

    // State variables
    address payable private owner; // private owner variable that can receive ether
    uint private value; // private value variable

    // Constructor
    constructor() {
        owner = payable(msg.sender); // set the owner to the address that deployed the contract
        value = 1000; // initialize the value to 1000
    }

    // Events
    event NewValue(uint _value, address _owner); // event to emit when the value is changed

    // Modifiers
    modifier onlyOwner() { // modifier to restrict function access to only the owner
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    // Functions
    function getValue() public view returns (uint) { // public function to get the value variable
        return value;
    }

    function changeValue(uint _value) public onlyOwner { // public function to change the value variable, restricted to only the owner
        value = _value; // update the value variable
        emit NewValue(_value, msg.sender); // emit the event
    }

    function deposit() public payable { // public function to deposit ether to the contract
        require(msg.value > 0, "Deposit amount must be greater than 0."); // require that the deposit amount is greater than 0
        owner.transfer(msg.value); // transfer the deposited ether to the owner variable
    }

    function withdraw() public onlyOwner { // public function to withdraw all ether from the contract, restricted to only the owner
        owner.transfer(address(this).balance); // transfer the entire balance of the contract to the owner
    }

    fallback() external payable { // fallback function to receive any ether sent directly to the contract
        if(msg.value > 0) { // check if the value is greater than 0
            value += msg.value; // add the value to the value variable
            emit NewValue(value, msg.sender); // emit the event
        }
    }

    receive() external payable { // receive function to receive any ether sent directly to the contract, similar to fallback function but only called when msg.data is empty
        if(msg.value > 0) { // check if the value is greater than 0
            value += msg.value; // add the value to the value variable
            emit NewValue(value, msg.sender); // emit the event
        }
    }
}