contract Bank {
    // declaring variables
    address private owner;
    mapping(address => uint) private balances;
    bool private paused;
    
    // events for logging changes
    event Deposit(address indexed from, uint value);
    event Withdraw(address indexed to, uint value);
    
    // constructor function to set owner and initial paused state
    constructor() public {
        owner = msg.sender;
        paused = false;
    }
    
    // modifier to check if caller is owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }
    
    // modifier to check if contract is not paused
    modifier whenNotPaused() {
        require(paused == false, "Contract is paused");
        _;
    }
    
    // function to deposit ether into contract
    function deposit() public payable whenNotPaused {
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    // function to withdraw ether from contract
    function withdraw(uint amount) public whenNotPaused {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        msg.sender.transfer(amount);
        emit Withdraw(msg.sender, amount);
    }
    
    // function to transfer ether from one address to another
    function transfer(address to, uint amount) public onlyOwner whenNotPaused {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[to] += amount;
    }
    
    // function to pause contract activities
    function pause() public onlyOwner {
        paused = true;
    }
    
    // function to unpause contract activities
    function unpause() public onlyOwner {
        paused = false;
    }
    
    // function to check current balance of caller
    function checkBalance() public view returns (uint) {
        return balances[msg.sender];
    }
}