// Create a contract called Bank
contract Bank {
    // Define variables
    uint totalBalance;
    address owner;
    
    // Create a mapping to store user balances
    mapping (address => uint) balances;
    
    // Events for tracking transactions
    event Deposit(address indexed user, uint amount);
    event Withdrawal(address indexed user, uint amount);
    
    // Constructor function to set owner and initial balance
    constructor() public {
        owner = msg.sender;
        totalBalance = msg.value;
    }
    
    // Function to deposit funds into the contract
    function deposit() public payable {
        require(msg.value > 0, "Value must be greater than 0");
        
        // Add deposit amount to user's balance
        balances[msg.sender] = balances[msg.sender] + msg.value;
        
        // Update total balance
        totalBalance = totalBalance + msg.value;
        
        // Trigger deposit event
        emit Deposit(msg.sender, msg.value);
    }
    
    // Function to withdraw funds from the contract
    function withdraw(uint amount) public {
        // Check if user has enough balance
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        // Subtract withdrawal amount from user's balance
        balances[msg.sender] = balances[msg.sender] - amount;
        
        // Update total balance
        totalBalance = totalBalance - amount;
        
        // Transfer funds to user
        msg.sender.transfer(amount);
        
        // Trigger withdrawal event
        emit Withdrawal(msg.sender, amount);
    }
    
    // Function to check user's balance
    function checkBalance() public view returns (uint) {
        return balances[msg.sender];
    }
    
    // Function to check total balance of the contract
    function checkTotalBalance() public view returns (uint) {
        return totalBalance;
    }
}