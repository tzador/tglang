pragma solidity ^0.8.0;

contract Crowdsale {
    // variables to keep track of token balances and prices
    mapping(address => uint256) public balances;
    uint256 public tokenPrice;

    // constructor to set the initial token price
    constructor(uint256 _initialPrice) {
        tokenPrice = _initialPrice;
    }

    // function to buy tokens
    function buyTokens() public payable {
        // check if enough ether is sent
        require(msg.value > 0, "You need to send some ether to buy tokens.");

        // calculate the amount of tokens to be bought
        uint256 tokenAmount = msg.value / tokenPrice;

        // update sender's token balance
        balances[msg.sender] += tokenAmount;

        // transfer the tokens to the sender
        // note: this is for demonstration purposes only, a safe way to transfer tokens would be to use a token contract
        address(0x0).call{value: msg.value}("");

        // update token price
        tokenPrice += 1;
    }

    // function to sell tokens
    function sellTokens(uint256 _amount) public {
        // check if sender has enough tokens to sell
        require(balances[msg.sender] >= _amount, "You don't have enough tokens to sell.");

        // calculate the amount of ether to be received
        uint256 etherAmount = _amount * tokenPrice;

        // transfer tokens from sender to contract
        // note: this is for demonstration purposes only, a safe way to transfer tokens would be to use a token contract
        balances[msg.sender] -= _amount;
        address(0x0).transfer(etherAmount);

        // update token price
        tokenPrice -= 1;
    }
}