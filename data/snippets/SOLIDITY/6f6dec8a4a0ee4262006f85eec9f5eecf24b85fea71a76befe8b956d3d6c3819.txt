<<<<<<<
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// Define a smart contract
contract Bank {
    // Declare state variables
    address private owner;
    uint256 private totalBalance;
    mapping(address => uint256) public balances;
    
    // Define events
    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);

    // Define constructor
    constructor() {
        owner = msg.sender;
    }

    // Define functions with modifiers
    function deposit() public payable onlyOwner {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        
        // Update state variable
        totalBalance += msg.value;

        // Emit event
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) public {
        require(amount > 0, "Withdraw amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update state variable
        totalBalance -= amount;
        balances[msg.sender] -= amount;

        // Emit event
        emit Withdraw(msg.sender, amount);

        // Transfer funds
        payable(msg.sender).transfer(amount);
    }

    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }

    // Define modifier
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }
}
>>>>>>>