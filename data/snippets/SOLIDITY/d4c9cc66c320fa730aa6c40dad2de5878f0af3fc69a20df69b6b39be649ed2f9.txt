// This contract allows users to deposit and withdraw ether
 
contract DepositWithdraw {
    
    // create a mapping to store the balances of users
    mapping (address => uint) public balances;
    
    // event that will be emitted when a deposit is made
    event DepositMade(address indexed user, uint amount);
    
    // event that will be emitted when a withdrawal is made
    event WithdrawalMade(address indexed user, uint amount);
    
    // function to deposit ether into the contract
    function deposit() public payable {
        
        // increase the user's balance by the amount sent
        balances[msg.sender] += msg.value;
        
        // emit the deposit event
        emit DepositMade(msg.sender, msg.value);
    }
    
    // function to withdraw ether from the contract
    function withdraw(uint amount) public {
        
        // require that the user has enough balance to withdraw
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        // decrease the user's balance by the amount withdrawn
        balances[msg.sender] -= amount;
        
        // transfer the ether from the contract to the user
        msg.sender.transfer(amount);
        
        // emit the withdrawal event
        emit WithdrawalMade(msg.sender, amount);
    }
}