pragma solidity ^0.8.0; // specifying the solidity version

contract Token { // creating a contract named Token

    event Approval(address indexed tokenOwner, address indexed spender, uint tokens); // defining an event to track token approvals
    event Transfer(address indexed from, address indexed to, uint tokens); // defining an event to track token transfers
    
    string public name; // public variable to store the token name
    string public symbol; // public variable to store the token symbol
    
    mapping(address => uint256) balances; // using a mapping to store token balances for each address
    mapping(address => mapping (address => uint256)) allowed; // using a mapping to store allowance for each address
    
    uint256 public totalSupply; // public variable to store the total supply of tokens
    
    constructor(uint256 _initialSupply, string memory _name, string memory _symbol) { // constructor to initialize the token's name, symbol, and initial supply
        name = _name;
        symbol = _symbol;
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply; // assigning the total supply to the contract creator's address
    }
    
    function balanceOf(address tokenOwner) public view returns (uint) { // function to check the balance of a given address
        return balances[tokenOwner];
    }
    
    function transfer(address to, uint tokens) public returns (bool) { // function to transfer tokens from sender's address to a given address
        require(tokens <= balances[msg.sender], "Insufficient balance.");
        balances[msg.sender] = balances[msg.sender] - tokens; // deducting the tokens from sender's balance
        balances[to] = balances[to] + tokens; // adding the tokens to receiver's balance
        emit Transfer(msg.sender, to, tokens); // emitting the Transfer event
        return true;
    }
    
    function approve(address spender, uint tokens) public returns (bool) { // function to approve a given address to spend a specified number of tokens on behalf of sender
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens); // emitting the Approval event
        return true;
    }
    
    function transferFrom(address from, address to, uint tokens) public returns (bool) { // function to transfer approved tokens from a given address to another address
        require(tokens <= balances[from], "Insufficient balance.");
        require(tokens <= allowed[from][msg.sender], "Not enough allowance.");
        balances[from] = balances[from] - tokens; // deducting the tokens from sender's balance
        allowed[from][msg.sender] = allowed[from][msg.sender] - tokens; // deducting the tokens from sender's allowance
        balances[to] = balances[to] + tokens; // adding the tokens to receiver's balance
        emit Transfer(from, to, tokens); // emitting the Transfer event
        return true;
    }
}