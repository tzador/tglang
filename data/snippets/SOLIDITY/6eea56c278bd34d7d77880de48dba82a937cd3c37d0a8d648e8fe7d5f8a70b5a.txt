// The following contract is a basic example of using inheritance and modifiers in Solidity.
pragma solidity ^0.8.0;

// This is the parent contract with a reusable modifier
contract Ownable {
    address private _owner;

    constructor() {
        _owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == _owner, "Caller is not the owner");
        _;
    }
}

// This is an interface contract to define multiple functions.
interface IContract {
    function setNumber(uint256 number) external;
    function getNumber() external view returns (uint256);
}

// This contract inherits from the parent contract Ownable and implements the interface IContract.
contract Example is Ownable, IContract {
    uint256 private _number;

    // This function can only be called by the owner of the contract.
    // It sets the number value.
    function setNumber(uint256 number) override external onlyOwner {
        _number = number;
    }

    // This function can be called by anyone and returns the current number value.
    function getNumber() override external view returns (uint256) {
        return _number;
    }

    // This function uses the 'onlyOwner' modifier from the parent contract.
    // It can only be called by the contract owner.
    function changeOwner(address newOwner) external onlyOwner {
        _owner = newOwner;
    }
}