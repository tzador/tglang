pragma solidity >=0.5.0; // Set minimum allowed version 0.5.0

/**
 * @title ComplexContract
 * @dev This contract contains a complex function with multiple modifiers.
 */
contract ComplexContract {
    
    uint256 public subtotal; // Define public state variable
    
    /**
     * @dev Function to update an item's subtotal.
     * @param _subtotal New subtotal value to update to.
     */
    function updateSubtotal(uint256 _subtotal) public returns (uint256) {
        require(_subtotal > 0, "Subtotal must be greater than zero"); // Modifier to check for non-zero value
        require(_subtotal < 100, "Subtotal must be less than 100"); // Modifier to check for value less than 100
        
        subtotal = _subtotal; // Update subtotal
        
        emit SubtotalUpdated(subtotal); // Emit event
        
        return subtotal; // Return updated subtotal
    }
    
    /**
     * @dev Modifier to only allow the contract owner to call a function.
     */
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function"); // Check if caller is owner
        _; // Continue with function execution
    }
    
    /**
     * @dev Modifier to check if the contract is active.
     */
    modifier isActive() {
        require(status == true, "Contract is not active"); // Check if contract is active
        _; // Continue with function execution
    }
    
    /**
     * @dev Function to activate the contract.
     */
    function activateContract() public onlyOwner {
        status = true; // Set contract status to active
    }

    /**
     * @dev Function to update the subtotal and check if contract is active.
     * @param _subtotal New subtotal value to update to.
     */
    function updateAndCheckSubtotal(uint256 _subtotal) public isActive returns (uint256) {
        updateSubtotal(_subtotal); // Update subtotal
        
        require(status == true, "Contract is not active"); // Check if contract is active
        
        return subtotal; // Return updated subtotal
    }
    
    event SubtotalUpdated(uint256 newSubtotal); // Event emitted when subtotal is updated
}