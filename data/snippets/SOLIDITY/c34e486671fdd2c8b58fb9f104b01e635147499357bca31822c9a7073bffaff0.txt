contract Voting {
    //mapping to store vote counts
    mapping (bytes32 => uint8) public votesReceived;
    //array of candidates
    bytes32[] public candidateList;

    //function to add candidates to the list
    function addCandidate(bytes32 candidate) public {
        //impose restriction that only contract creator can add candidates
        require(msg.sender == owner);
        //require that candidate doesn't already exist in the list
        require(!checkIfCandidateExists(candidate));

        //add candidate to array
        candidateList.push(candidate);
        //initialize vote count to 0
        votesReceived[candidate] = 0;
    }

    //function to cast a vote for a candidate
    function voteForCandidate(bytes32 candidate) public {
        //require that candidate exists in the list
        require(checkIfCandidateExists(candidate));

        //increment vote count for chosen candidate
        votesReceived[candidate] += 1;
    }

    //function to check if a candidate exists in the list
    function checkIfCandidateExists(bytes32 candidate) public view returns (bool) {
        //loop through candidate list to check for a match
        for (uint i = 0; i < candidateList.length; i++) {
            if (candidateList[i] == candidate) {
                return true;
            }
        }
        //if no match is found, return false
        return false;
    }

    //fallback function to reject any incoming ether
    function () external payable {
        revert();
    }
}