pragma solidity ^0.8.0; 
contract MyContract { 
    address payable owner; 
    mapping (uint256 => string) dataArray; 
    uint256[] dataIDs; 
     
    // Constructor 
    constructor() public { 
        // Set the owner of the contract 
        owner = payable(msg.sender); 
    } 
     
    // Function to add new data 
    function addData(uint256 dataID, string memory data) public { 
        // Check if the sender is the owner 
        require(msg.sender == owner, "Only the owner can add data."); 
        
        // Add the data to the mapping 
        dataArray[dataID] = data; 
        
        // Add the dataID to the array 
        dataIDs.push(dataID); 
    } 
    
    // Function to get data by its ID 
    function getData(uint256 dataID) public view returns (string memory) { 
        return dataArray[dataID]; 
    } 
    
    // Function to update data 
    function updateData(uint256 dataID, string memory newData) public { 
        // Check if the sender is the owner 
        require(msg.sender == owner, "Only the owner can update data."); 
        
        // Update the data in the mapping 
        dataArray[dataID] = newData; 
    } 
    
    // Function to delete data 
    function deleteData(uint256 dataID) public { 
        // Check if the sender is the owner 
        require(msg.sender == owner, "Only the owner can delete data."); 
        
        // Delete the data from the mapping 
        delete dataArray[dataID]; 
        
        // Loop through the dataIDs array to find and remove the deleted dataID 
        for (uint i = 0; i < dataIDs.length; i++) { 
            if (dataIDs[i] == dataID) { 
                delete dataIDs[i]; 
            } 
        } 
    } 
}