pragma solidity ^0.8.4;

contract MyContract {
    // This contract stores employees' information and has functions to add, update, and delete employees
    struct Employee {
        address employeeAddress;
        string name;
        uint256 age;
        string department;
        uint256 salary;
    }

    Employee[] public employees; // dynamic array of employees

    // Mapping to keep track of the employees' addresses and their corresponding indexes in the employees array
    mapping(address => uint256) public employeeIndexes;

    // Event to be emitted when a new employee is added
    event EmployeeAdded(address employee);

    // Function to add a new employee
    function addEmployee(address _employeeAddress, string memory _name, uint256 _age, string memory _department, uint256 _salary) public {
        uint256 index = employees.length; // get the index for the new employee
        employees.push(Employee(_employeeAddress, _name, _age, _department, _salary)); // add the employee to the employees array
        employeeIndexes[_employeeAddress] = index; // update the mapping with the employee's address and index
        emit EmployeeAdded(_employeeAddress); // emit the event
    }

    // Function to update an existing employee's information
    function updateEmployee(address _employeeAddress, string memory _name, uint256 _age, string memory _department, uint256 _salary) public {
        require(employeeIndexes[_employeeAddress] != 0); // check if the employee exists
        Employee storage employee = employees[employeeIndexes[_employeeAddress] - 1]; // get the employee from the employees array
        employee.name = _name; // update the employee's name
        employee.age = _age; // update the employee's age
        employee.department = _department; // update the employee's department
        employee.salary = _salary; // update the employee's salary
    }

    // Function to delete an employee
    function deleteEmployee(address _employeeAddress) public {
        require(employeeIndexes[_employeeAddress] != 0); // check if the employee exists
        uint256 index = employeeIndexes[_employeeAddress] - 1; // get the index of the employee to be deleted
        delete employeeIndexes[_employeeAddress]; // delete the employee from the mapping
        emit EmployeeDeleted(_employeeAddress); // emit the event
        employees[index] = employees[employees.length - 1]; // replace the employee to be deleted with the last employee in the array
        employees.pop(); // remove the last employee from the array
        employeeIndexes[employees[index].employeeAddress] = index + 1; // update the index of the last employee in the mapping
    }
}