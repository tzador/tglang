/* Define a contract called Employee that implements the Pausable and Ownable contracts */
contract Employee is Pausable, Ownable {
    
    // Define variables
    uint public salary; // Salary of the employee
    bool public isManager; // Flag to indicate if the employee is a manager
    uint public constant RAISE_PERCENT = 10; // Constant for calculating raise percentage
    
    // Define events
    event SalaryChanged(uint newSalary); // Event triggered when salary is changed
    event Promoted(uint newSalary, bool newIsManager); // Event triggered when employee is promoted
    
    // Constructor function
    constructor(uint initialSalary, bool initialIsManager) public {
        salary = initialSalary;
        isManager = initialIsManager;
    }
    
    /** 
    * @dev Function to change the salary of an employee
    * @param newSalary The new salary to be set
    */
    function changeSalary(uint newSalary) public onlyOwner whenNotPaused {
        require(newSalary > 0, "Salary must be greater than 0.");
        
        // Calculate and set new salary based on raise percentage
        uint raiseAmount = (newSalary * RAISE_PERCENT) / 100;
        uint newSalaryWithRaise = newSalary + raiseAmount;
        
        salary = newSalaryWithRaise;
        
        emit SalaryChanged(salary);
    }
    
    /** 
    * @dev Function to promote an employee to manager position
    * @param newSalary The new salary to be set
    */
    function promote(uint newSalary) public onlyOwner whenNotPaused {
        require(newSalary > 0, "Salary must be greater than 0.");
        
        // Set new salary and change isManager flag
        salary = newSalary;
        isManager = true;
        
        emit Promoted(salary, isManager);
    }
    
    /** 
    * @dev Function to demote a manager to regular employee
    */
    function demote() public onlyOwner whenNotPaused {
        // Set isManager flag to false
        isManager = false;
    }
    
    /** 
    * @dev Function to withdraw contract balance to owner's address
    */
    function withdraw() public onlyOwner {
        // Use built-in transfer function to send contract balance to owner's address
        address payable owner = address(uint160(owner()));
        owner.transfer(address(this).balance);
    }
}