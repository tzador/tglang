// Example contract implementing the ERC20 token standard
contract ERC20Token {
    // Variables
    string public name; // Name of the token
    string public symbol; // Abbreviation of the token
    uint8 public decimals; // Number of decimals
    uint256 public totalSupply; // Total supply of tokens

    // Mappings to keep track of token balances and allowances
    mapping(address => uint256) public balanceOf; // Mapping of account addresses to token balances
    mapping(address => mapping(address => uint256)) public allowance; // Mapping of account addresses to other account addresses for token allowances

    // Events to emit when token transfers and approvals occur
    event Transfer(address indexed from, address indexed to, uint256 value); // Event emitted when tokens are transferred
    event Approval(address indexed owner, address indexed spender, uint256 value); // Event emitted when a token approval occurs

    // Constructor function to initialize token details and set total supply
    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) public {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;

        // Assigns the initial total supply to the contract creator's balance
        balanceOf[msg.sender] = _totalSupply;
    }

    // Function that allows a user to transfer tokens to another account
    function transfer(address _to, uint256 _value) public returns (bool success) {
        // Checks if the sender has enough tokens to transfer
        require(balanceOf[msg.sender] >= _value, "Not enough tokens in sender's balance!");

        // Updates the balances of the sender and recipient
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        // Emits a Transfer event
        emit Transfer(msg.sender, _to, _value);
        
        // Returns true to indicate a successful transfer
        return true;
    }

    // Function that allows a user to approve another user to spend a specified amount of their tokens
    function approve(address _spender, uint256 _value) public returns (bool success) {
        // Updates the allowance for the sender and spender
        allowance[msg.sender][_spender] = _value;

        // Emits an Approval event
        emit Approval(msg.sender, _spender, _value);

        // Returns true to indicate a successful approval
        return true;
    }

    // Function that allows a user with an approved allowance to transfer tokens on behalf of the owner of the tokens
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        // Checks if the sender has enough allowance to transfer the specified amount of tokens
        require(allowance[_from][msg.sender] >= _value, "Not enough allowance!");

        // Checks if the owner of the tokens has enough balance to transfer
        require(balanceOf[_from] >= _value, "Not enough tokens in owner's balance!");

        // Updates the balances and allowances of the owner and recipient
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;

        // Emits a Transfer event
        emit Transfer(_from, _to, _value);

        // Returns true to indicate a successful transfer
        return true;
    }
}