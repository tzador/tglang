/***********************************************
 * Contract Name: NoneToSome
 * Purpose: This contract implements a storage mechanism
 *          for converting none tokens to some tokens.
 ***********************************************/

pragma solidity ^0.5.0;

// Import Ownable contract from OpenZeppelin library
import "./Ownable.sol";

// Declare contract NoneToSome
contract NoneToSome is Ownable {

    // Define state variables
    address public owner;
    mapping (address => uint256) public balances;
    uint256 public totalSupply;

    // Events for deposit and withdrawal
    event Deposit(address indexed _from, uint256 amount);
    event Withdrawal(address indexed _to, uint256 amount);

    // Constructor to set owner and initial supply
    constructor() public {
        owner = msg.sender;
        totalSupply = 1000;
    }

    // Function to deposit none tokens and receive some tokens
    function deposit() public payable {
        require(msg.value > 0, "Value must be greater than 0.");
        balances[msg.sender] += msg.value;
        totalSupply += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // Function to withdraw some tokens and return none tokens
    function withdraw(uint256 _amount) public {
        require(_amount <= balances[msg.sender], "Insufficient balance.");
        balances[msg.sender] -= _amount;
        totalSupply -= _amount;
        msg.sender.transfer(_amount);
        emit Withdrawal(msg.sender, _amount);
    }
}