pragma solidity ^0.8.0;

contract Lottery {
    address public manager;
    address[] public players;
    
    // declaring a new dynamic array of addresses named 'players'
    
    constructor() {
        manager = msg.sender;
    }
    
    // assigning the address of the contract creator as the manager variable
    
    function enter() public payable {
        require(msg.value > 0.01 ether);
        // verifying that the amount sent is greater than 0.01 ether
        
        players.push(msg.sender);
        // adding the sender's address to the players array
    }
    
    function random() private view returns (uint) {
        // defining a private function named 'random' that returns an unsigned integer
        return uint(keccak256(abi.encode(block.timestamp, block.difficulty, players)));
        // using the keccak256 hashing function to generate a unique uint value 
        // based on the current block timestamp, block difficulty and players array
    }
    
    function pickWinner() public restricted {
        // specifying that only the manager can call this function
        uint index = random() % players.length;
        // calculating a random index based on the length of the players array
        payable(players[index]).transfer(address(this).balance);
        // transferring the entire contract balance to the player at the randomly generated index
        players = new address[](0);
        // resetting the players array to a new empty array
    }
    
    modifier restricted() {
        // defining a modifier that restricts functions to only be callable by the manager
        require(msg.sender == manager);
        // verifying that the sender is the manager
        _;
        // executing the rest of the function body
    }
    
    function getPlayers() public view returns (address[] memory) {
        // specifying that this function returns a dynamic array of addresses
        return players;
        // returning the players array
    }
}