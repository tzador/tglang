pragma solidity >=0.4.22 <0.7.0;

// Creates a contract called "MyContract"
contract MyContract {
    
    // Defines an array called "values" that will store uint values
    uint[] values;
    
    // A variable "myValue" that will store a uint value
    uint public myValue;
    
    // A mapping called "myMapping" that will store the address of a user and their uint value
    mapping(address => uint) public myMapping;
    
    // A constructor function that takes in an initial value and stores it as "myValue"
    constructor(uint _initialValue) public {
        myValue = _initialValue;
    }
    
    // A function "addValue" that takes in a new uint value and adds it to the end of "values" array
    function addValue(uint _newValue) public {
        values.push(_newValue);
    }
    
    // A function "changeValue" that takes in a new uint value and reassigns it to "myValue"
    function changeValue(uint _newValue) public {
        myValue = _newValue;
    }
    
    // A function "changeMapping" that takes in a new address and uint value and reassigns it to "myMapping" for that address
    function changeMapping(address _userAddress, uint _newValue) public {
        myMapping[_userAddress] = _newValue;
    }
    
    // A function "getValues" that returns the entire "values" array
    function getValues() public view returns (uint[] memory) {
        return values;
    }
    
    // A function "getMapping" that takes in an address and returns the uint value stored in "myMapping" for that address
    function getMapping(address _userAddress) public view returns (uint) {
        return myMapping[_userAddress];
    }
}