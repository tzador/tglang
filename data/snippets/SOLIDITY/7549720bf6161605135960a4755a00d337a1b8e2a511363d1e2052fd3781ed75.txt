// Contract definition
contract Voting {
    // Declare variables
    uint public totalVotes;
    mapping(address => bool) public voters;
    mapping(bytes32 => uint) public votesReceived;
    
    // Event for successful vote
    event Voted(address voter, bytes32 candidate);

    // Constructor function
    constructor() public {
        totalVotes = 0;
    }

    // Function for adding candidates
    function addCandidate(bytes32 candidate) public {
        votesReceived[candidate] = 0;
    }

    // Function for voting
    function vote(bytes32 candidate) public {
        require(!voters[msg.sender], "You have already voted.");
        require(votesReceived[candidate] > 0, "Candidate does not exist.");

        voters[msg.sender] = true;
        votesReceived[candidate]++;
        totalVotes++;

        emit Voted(msg.sender, candidate);
    }

    // Function to get total votes for a candidate
    function getTotalVotes(bytes32 candidate) public view returns (uint) {
        return votesReceived[candidate];
    }
}