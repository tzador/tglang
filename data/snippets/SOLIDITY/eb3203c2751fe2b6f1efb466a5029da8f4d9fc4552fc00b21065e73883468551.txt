pragma solidity ^0.8.0; //specify the pragma directive for the compiler version

contract MyContract { //define a contract named MyContract

  address owner; //create a state variable to store the owner's address
  
  //creates a dynamic array of uint8
  uint8[] dynamicArray; 
  
  //define a struct
  struct Person { 
    string name;
    uint age;
    uint salary;
  }
  
  //create a mapping to store Person structs
  mapping(address => Person) personMapping;
  
  //event to emit when a new person is added
  event personAdded(address owner, string name, uint age);
  
  //modifier to check if the caller is the owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner, "You are not the owner of this contract");
    _; //execute the rest of the code if the requirement is met
  }
  
  //function to add a new person to the mapping
  function addPerson(string memory _name, uint _age, uint _salary) public onlyOwner {
    Person memory newPerson = Person(_name, _age, _salary); //create a new Person struct
    personMapping[msg.sender] = newPerson; //add the new person to the mapping
    emit personAdded(msg.sender, _name, _age); //emit the event
  }
  
  //function to update the age of a person in the mapping
  function updateAge(uint _newAge) public onlyOwner {
    require(personMapping[msg.sender].age > 0, "Person does not exist"); //check if the person exists
    personMapping[msg.sender].age = _newAge; //update the age
  }
  
  //function to withdraw the contract balance
  function withdraw(address payable _to) public onlyOwner {
    _to.transfer(address(this).balance); //transfer the balance to the specified address
  }
  
  //fallback function to receive ether
  fallback() external payable {
    require(msg.value > 0, "No ether sent"); //check if ether was sent
    dynamicArray.push(uint8(msg.value)); //add the sent value to the array
  }
}