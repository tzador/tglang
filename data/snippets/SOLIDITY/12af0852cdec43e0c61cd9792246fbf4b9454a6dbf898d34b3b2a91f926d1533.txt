// SPDX-License-Identifier: <SPDX-License>
pragma solidity ^0.8.4;

// Abstract contract for the ERC721 token standard
abstract contract ERC721 {

    // Required functions
    function totalSupply() external view virtual returns (uint256);
    function balanceOf(address _owner) external view virtual returns (uint256);
    function ownerOf(uint256 _tokenId) external view virtual returns (address);
    function transfer(address _to, uint256 _tokenId) external virtual;
    function approve(address _to, uint256 _tokenId) external virtual;
    function takeOwnership(uint256 _tokenId) external virtual;
    function setApprovalForAll(address _operator, bool _approved) external virtual;
    function getApproved(uint256 _tokenId) external view virtual returns (address);
    function isApprovedForAll(address _owner, address _operator) external view virtual returns (bool);
    
    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
}

// Example contract that implements the ERC721 token standard
contract MyToken is ERC721 {
    uint256 private _totalSupply;
    mapping(address => uint256) private _balances;
    mapping(uint256 => address) private _owners;
    mapping(uint256 => address) private _tokenApprovals;
    mapping(address => mapping(address => bool)) private _operatorApprovals;
    
    // Required functions
    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }
    
    function balanceOf(address _owner) external view override returns (uint256) {
        return _balances[_owner];
    }
    
    function ownerOf(uint256 _tokenId) external view override returns (address) {
        return _owners[_tokenId];
    }
    
    function transfer(address _to, uint256 _tokenId) public override {
        // Check if sender is owner of the token
        address currentOwner = ownerOf(_tokenId);
        require(_msgSender() == currentOwner, "Sender is not owner of token");
        
        // Check if transfer is within current owner's approved tokens or if current owner is operator
        require(_msgSender() == currentOwner || _msgSender() == getApproved(_tokenId) || isApprovedForAll(currentOwner, _msgSender()),
            "Transfer not approved");
        
        // Update balances and ownership
        _balances[_to]++;
        _balances[_msgSender()]--;
        _owners[_tokenId] = _to;
        
        // Emit Transfer event
        emit Transfer(_msgSender(), _to, _tokenId);
    }
    
    function approve(address _to, uint256 _tokenId) public override {
        // Check if sender is owner of the token
        address currentOwner = ownerOf(_tokenId);
        require(_msgSender() == currentOwner, "Sender is not owner of token");
        
        // Update token approval
        _tokenApprovals[_tokenId] = _to;
        
        // Emit Approval event
        emit Approval(_msgSender(), _to, _tokenId);
    }
    
    function takeOwnership(uint256 _tokenId) public override {
        // Check if sender is approved for token transfer
        require(_tokenApprovals[_tokenId] == _msgSender(), "Sender is not approved for token transfer");
        
        // Update balances and ownership
        _balances[_msgSender()]++;
        _balances[ownerOf(_tokenId)]--;
        _owners[_tokenId] = _msgSender();
        
        // Emit Transfer event
        emit Transfer(ownerOf(_tokenId), _msgSender(), _tokenId);
    }
    
    function setApprovalForAll(address _operator, bool _approved) external override {
        // Update operator approval
        _operatorApprovals[_msgSender()][_operator] = _approved;
        
        // Emit ApprovalForAll event
        emit ApprovalForAll(_msgSender(), _operator, _approved);
    }
    
    function getApproved(uint256 _tokenId) external view override returns (address) {
        return _tokenApprovals[_tokenId];
    }
    
    function isApprovedForAll(address _owner, address _operator) external view override returns (bool) {
        return _operatorApprovals[_owner][_operator];
    }
    
    // Additional functions
    function mint(address _to, uint256 _tokenId) external {
        // Check if sender is contract owner
        require(owner() == _msgSender(), "Sender is not contract owner");
        
        // Update balances and ownership
        _balances[_to]++;
        _owners[_tokenId] = _to;
        
        // Update total supply
        _totalSupply++;
        
        // Emit Transfer event
        emit Transfer(address(0), _to, _tokenId);
    }
}