/**
 * @dev Contract that implements a token with a dynamic supply.
 * It also includes a function to burn tokens.
 */

// Import required libraries
import "./SafeMath.sol";

// Define contract
contract Token {
  
  // Declare variables
  using SafeMath for uint256; // Use SafeMath for uint256
  address public owner; // Owner address
  string public name; // Token name
  string public symbol; // Token symbol
  uint8 public decimals; // Token decimals
  uint256 public totalSupply; // Token total supply
  mapping (address => uint256) public balances; // Mapping of balances for each address
  mapping (address => mapping (address => uint256)) public allowed; // Mapping of allowed amounts for each address

  // Events
  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);

  
  /**
   * @dev Constructor function to initialize the contract.
   * Sets the initial owner to the contract creator, name, symbol, and decimals of the token, and total supply.
   * @param _name Name of the token.
   * @param _symbol Symbol of the token.
   * @param _decimals Decimals of the token.
   * @param _totalSupply Total supply of tokens.
   */
  constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public {
    owner = msg.sender;
    name = _name;
    symbol = _symbol;
    decimals = _decimals;
    totalSupply = _totalSupply;
    balances[msg.sender] = _totalSupply;
  }

  /**
   * @dev Function to transfer tokens from the caller to the specified address.
   * @param _to Address to transfer tokens to.
   * @param _value Amount of tokens to transfer.
   * @return True if the transfer was successful.
   */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0)); // Make sure transfer is not to the zero address
    require(_value <= balances[msg.sender]); // Make sure caller has enough balance

    // Update balances
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);

    // Emit transfer event
    emit Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
   * @dev Function to approve the specified address to spend a specific amount of tokens on behalf of the caller.
   * @param _spender Address that is being approved to spend tokens.
   * @param _value Amount of tokens to approve for spending.
   * @return True if the approval was successful.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;

    // Emit approval event
    emit Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to transfer tokens from one address to another on behalf of the token owner.
   * @param _from Address to transfer tokens from.
   * @param _to Address to transfer tokens to.
   * @param _value Amount of tokens to transfer.
   * @return True if the transfer was successful.
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0)); // Make sure transfer is not to the zero address
    require(_value <= allowed[_from][msg.sender]); // Make sure caller is allowed to spend the specified amount

    // Update balances and allowance
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);

    // Emit transfer event
    emit Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Function to burn a specific amount of tokens.
   * @param _value Amount of tokens to burn.
   * @return True if the burn was successful.
   */
  function burn(uint256 _value) public returns (bool) {
    require(_value > 0); // Make sure burn amount is greater than zero
    require(_value <= balances[msg.sender]); // Make sure caller has enough balance

    // Update balances
    balances[msg.sender] = balances[msg.sender].sub(_value);
    totalSupply = totalSupply.sub(_value);

    // Emit transfer event with value as 0 to indicate tokens are being burned
    emit Transfer(msg.sender, address(0), _value);
    return true;
  }
}