pragma solidity ^0.8.0;

// Importing Open Zeppelin's ERC20 contract
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

// Creating a new smart contract
contract MyToken is ERC20 {
    // Declaring global variables
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    // Constructor function to initialize the token
    constructor(
        string memory name,
        string memory symbol,
        uint8 decimals,
        uint256 initialSupply
    ) ERC20(name, symbol) {
        // Set global variables
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        // Set initial supply to the msg.sender
        _mint(msg.sender, initialSupply);
        // Update total supply
        _totalSupply = initialSupply;
    }

    // Public function to get the total supply
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    // Public function to get the name of the token
    function name() public view override returns (string memory) {
        return _name;
    }

    // Public function to get the symbol of the token
    function symbol() public view override returns (string memory) {
        return _symbol;
    }

    // Public function to get the number of decimals of the token
    function decimals() public view override returns (uint8) {
        return _decimals;
    }

    // Public function to transfer tokens to a given address
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    // Private function to transfer tokens from one address to another
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        require(sender != address(0), "Sender address must not be 0.");
        require(recipient != address(0), "Recipient address must not be 0.");
        require(amount > 0, "Transfer amount must be greater than 0.");
        require(
            balanceOf(sender) >= amount,
            "Sender must have sufficient balance to transfer."
        );
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    // Public function to approve an address to spend tokens on behalf of the caller
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    // Private function to approve an address to spend tokens on behalf of the caller
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "Owner address must not be 0.");
        require(spender != address(0), "Spender address must not be 0.");
        require(amount > 0, "Approval amount must be greater than 0.");
        require(
            balanceOf(owner) >= amount,
            "Owner must have sufficient balance to approve."
        );
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    // Public function to transfer tokens from a given address to another address
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender] -= amount
        );
        return true;
    }
}