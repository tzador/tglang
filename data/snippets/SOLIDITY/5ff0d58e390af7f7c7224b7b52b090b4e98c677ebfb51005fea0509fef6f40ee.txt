/**
 * @dev Contract with multiple inheritance using interfaces and modifiers
 */
 
pragma solidity ^0.6.0;

/**
 * @dev Modifier that checks if caller is the owner of the contract
 */
modifier onlyOwner() {
    require(msg.sender == owner, "Caller is not the owner");
    _;
}

/**
 * @dev Interface for contract with an 'add' function
 */
interface Adder {
    function add(uint256 a, uint256 b) external view returns (uint256);
}

/**
 * @dev Interface for contract with a 'multiply' function
 */
interface Multiplier {
    function multiply(uint256 a, uint256 b) external view returns (uint256);
}

/**
 * @dev Contract inheriting from multiple interfaces and using the 'onlyOwner' modifier
 */
contract MathContract is Adder, Multiplier {
    uint256 public owner;
    
    constructor() public {
        owner = msg.sender;
    }
    
    function add(uint256 a, uint256 b) external pure override returns (uint256) {
        return a + b;
    }
    
    function multiply(uint256 a, uint256 b) external pure override returns (uint256) {
        return a * b;
    }
    
    /**
     * @dev Function only callable by the contract owner
     */
    function doMath(uint256 a, uint256 b) external view onlyOwner returns (uint256) {
        uint256 result = add(a, b);
        result = multiply(result, b);
        return result;
    }
}