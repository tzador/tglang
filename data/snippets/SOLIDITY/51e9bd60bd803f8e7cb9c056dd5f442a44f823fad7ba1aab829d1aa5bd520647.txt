pragma solidity ^0.8.0;

// This is an example contract that implements a simple voting system using the SOLIDITY programming language. 

contract Voting {
    
    // state variables
    address public owner;
    mapping(address => bool) public voters;
    mapping(uint => uint) public votes;
    uint public totalVotes;
    
    // events
    event NewVote(address _voter, uint _candidate);
    event NewVoter(address _voter);
    event OwnerChanged(address _newOwner);
    
    // modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }
    
    // constructor
    constructor() {
        owner = msg.sender;
    }
    
    // fallback function
    fallback() external payable {
        revert("Fallback function not allowed.");
    }

    // add a new voter
    function addVoter(address _voter) public onlyOwner {
        voters[_voter] = true;
        emit NewVoter(_voter);
    }
    
    // change the owner of the contract
    function changeOwner(address _newOwner) public onlyOwner {
        owner = _newOwner;
        emit OwnerChanged(_newOwner);
    }
    
    // function for casting a vote
    function vote(uint _candidate) public {
        require (voters[msg.sender] == true, "You are not authorized to vote.");
        require(_candidate > 0 && _candidate <= 5, "Invalid candidate number.");
        votes[_candidate] += 1;
        totalVotes += 1;
        emit NewVote(msg.sender, _candidate);
    }
    
    // function for getting the winning candidate
    function getWinner() public view returns (uint) {
        uint maxVotes = 0;
        uint winningCandidate = 0;
        for(uint i=1; i<=5; i++) {
            if (votes[i] > maxVotes) {
                maxVotes = votes[i];
                winningCandidate = i;
            }
        }
        return winningCandidate;
    }
    
    // function for getting the total votes
    function getTotalVotes() public view returns (uint) {
        return totalVotes;
    }
}