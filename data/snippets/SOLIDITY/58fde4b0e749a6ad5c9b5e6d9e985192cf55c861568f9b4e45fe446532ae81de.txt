// Interface for ERC20 Token Standard
interface ERC20Token {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// Inheritance from ERC20 Token Standard
contract MyToken is ERC20Token {
    string public name = "My Token"; // token name
    string public symbol = "MYT"; // token symbol
    uint256 public decimals = 18; // token decimals
    uint256 public override totalSupply; // total token supply
    address public owner; // token owner address
    mapping(address => uint256) public balances; // mapping for token balances
    mapping(address => mapping(address => uint256)) public allowed; // mapping for token allowances

    // Constructor function
    constructor(uint256 initialSupply) public {
        totalSupply = initialSupply * 10 ** decimals; // set total token supply
        owner = msg.sender; // set owner address
        balances[owner] = totalSupply; // set initial token balance for owner
    }

    // Returns total supply of token
    function totalSupply() public override view returns (uint256) {
        return totalSupply;
    }

    // Returns token balance of an account
    function balanceOf(address account) public override view returns (uint256) {
        return balances[account];
    }

    // Returns token allowance for spender from owner
    function allowance(address owner, address spender) public override view returns (uint256) {
        return allowed[owner][spender];
    }

    // Transfers tokens from sender to recipient
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(amount > 0, "Amount must be greater than zero"); // check for valid amount
        require(balances[msg.sender] >= amount, "Insufficient balance"); // check for sufficient balance
        balances[msg.sender] = balances[msg.sender] - amount; // subtract amount from sender balance
        balances[recipient] = balances[recipient] + amount; // add amount to recipient balance
        emit Transfer(msg.sender, recipient, amount); // emit transfer event
        return true;
    }

    // Approve spender to spend a specific amount of tokens
    function approve(address spender, uint256 amount) public override returns (bool) {
        require(amount > 0, "Amount must be greater than zero"); // check for valid amount
        require(balances[msg.sender] >= amount, "Insufficient balance"); // check for sufficient balance
        allowed[msg.sender][spender] = amount; // set allowance for spender
        emit Approval(msg.sender, spender, amount); // emit approval event
        return true;
    }

    // Transfer tokens from one account to another using allowance
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(amount > 0, "Amount must be greater than zero"); // check for valid amount
        require(balances[sender] >= amount, "Insufficient balance"); // check for sufficient balance
        require(allowed[sender][msg.sender] >= amount, "Not allowed to transfer that amount"); // check for sufficient allowance
        balances[sender] = balances[sender] - amount; // subtract amount from sender balance
        balances[recipient] = balances[recipient] + amount; // add amount to recipient balance
        allowed[sender][msg.sender] = allowed[sender][msg.sender] - amount; // subtract amount from allowance
        emit Transfer(sender, recipient, amount); // emit transfer event
        return true;
    }
}