/// @title ERC721 Non-Fungible Token Standard
/// @notice Interface for contracts conforming to ERC-721: NFT Non-Fungible Tokens
contract ERC721 {
  
    // Required methods
    function totalSupply() public view returns (uint256 total);
    function balanceOf(address _owner) public view returns (uint256 balance);
    function ownerOf(uint256 _tokenId) public view returns (address owner);
    function approve(address _to, uint256 _tokenId) public;
    function transfer(address _to, uint256 _tokenId) public;
    function transferFrom(address _from, address _to, uint256 _tokenId) public;
    
    // Optional methods
    function name() public view returns (string name);
    function symbol() public view returns (string symbol);
    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 tokenId);
    function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);
    
    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
}

/// @title ERC721TokenReceiver interface
/// @dev Interface for any contract that wants to support safeTransfers from ERC721 asset contracts
interface ERC721TokenReceiver {
    /// @notice Handle the receipt of an NFT
    /// @dev The ERC721 smart contract calls this function on the recipient
    /// @param _from The sending address
    /// @param _tokenId The NFT identifier which is being transferred
    /// @param _data Additional data with no specified format
    /// @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`
    /// unless throwing
    function onERC721Received(address _from, uint256 _tokenId, bytes _data) external returns(bytes4);
}

/// @title ERC721Metadata interface
/// @dev Interface for ERC721 Non-Fungible Token Metadata
interface ERC721Metadata {
    /// @notice A descriptive name for a collection of NFTs in this contract
    function name() external view returns (string _name);

    /// @notice An abbreviated name for NFTs in this contract
    function symbol() external view returns (string _symbol);

    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.
    /// @dev Throws if `_tokenId` is not a valid NFT
    /// @param _tokenId Id for which we want uri
    function tokenMetadata(uint256 _tokenId) external view returns (string _infoUrl);
}

/// @title SafeMath
/// @dev Math operations with safety checks that throw on error
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }
}