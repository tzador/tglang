contract MyToken {
    // Variables
    string public constant name = "MyToken";
    string public constant symbol = "MTK";
    uint8 public constant decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    // Constructor
    constructor(uint256 _initialSupply) public {
        // Set initial supply to msg.sender
        balanceOf[msg.sender] = _initialSupply;
        totalSupply = _initialSupply;
    }
    
    // Functions
    // Transfer tokens from sender's account to another account
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_value > 0 && balanceOf[msg.sender] >= _value);
        
        // Reduce sender's balance and add to recipient's balance
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        
        // Emit Transfer event
        emit Transfer(msg.sender, _to, _value);
        
        return true;
    }
    
    // Allow spender to withdraw tokens from sender's account up to approved amount
    function approve(address _spender, uint256 _value) public returns (bool) {
        // Set allowance for _spender to _value
        allowance[msg.sender][_spender] = _value;
        
        // Emit Approval event
        emit Approval(msg.sender, _spender, _value);
        
        return true;
    }
    
    // Transfer approved tokens from sender's account to another account
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_value > 0 && balanceOf[_from] >= _value && allowance[_from][msg.sender] >= _value);
        
        // Reduce _from's balance, add to _to's balance, and deduct from allowance
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        
        // Emit Transfer event
        emit Transfer(_from, _to, _value);
        
        return true;
    }
}