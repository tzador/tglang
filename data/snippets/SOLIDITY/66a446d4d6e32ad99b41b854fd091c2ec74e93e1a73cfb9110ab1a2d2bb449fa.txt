pragma solidity ^0.8.0; // version declaration

interface IERC20 { // interface declaration
    function totalSupply() external view returns (uint256); // function declaration
    function balanceOf(address account) external view returns (uint256); // function declaration
    function transfer(address recipient, uint256 amount) external returns (bool); // function declaration
    function allowance(address owner, address spender) external view returns (uint256); // function declaration
    function approve(address spender, uint256 amount) external returns (bool); // function declaration
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); // function declaration
    event Transfer(address indexed from, address indexed to, uint256 value); // event declaration
    event Approval(address indexed owner, address indexed spender, uint256 value); // event declaration
}

contract MyToken is IERC20 { // contract declaration
    
    string public name = "My Token"; // state variable declaration
    string public symbol = "MTK"; // state variable declaration
    uint256 public decimals = 18; // state variable declaration
    uint256 private totalSupply; // state variable declaration
    address public owner; // state variable declaration
    mapping(address => uint256) private _balances; // mapping declaration
    mapping(address => mapping(address => uint256)) private _allowances; // nested mapping declaration
    
    constructor(uint256 initialSupply) { // constructor declaration
        owner = msg.sender; // assigning sender's address to owner
        totalSupply = initialSupply; // assigning initial supply to total supply
        _balances[owner] = totalSupply; // assigning total supply to owner's balance
    }
    
    function totalSupply() public override view returns (uint256) { // overriding totalSupply function from interface
        return totalSupply; // returning total supply
    }
    
    function balanceOf(address account) public override view returns (uint256) { // overriding balanceOf function from interface
        return _balances[account]; // returning balance of specified account
    }
    
    function transfer(address recipient, uint256 amount) public override returns (bool) { // overriding transfer function from interface
        require(msg.sender != address(0), "ERC20: transfer from the zero address"); // checking if sender's address is not zero address
        require(_balances[msg.sender] >= amount, "ERC20: transfer amount exceeds balance"); // checking if sender has enough balance
        _balances[msg.sender] = _balances[msg.sender] - amount; // deducting transferred amount from sender's balance
        _balances[recipient] = _balances[recipient] + amount; // adding transferred amount to recipient's balance
        emit Transfer(msg.sender, recipient, amount); // emitting Transfer event
        return true; // returning true
    }
    
    function allowance(address owner, address spender) public view override returns (uint256) { // overriding allowance function from interface
        return _allowances[owner][spender]; // returning allowance for specified owner and spender
    }
    
    function approve(address spender, uint256 amount) public override returns (bool) { // overriding approve function from interface
        require(msg.sender != address(0), "ERC20: approve from the zero address"); // checking if sender's address is not zero address
        require(spender != address(0), "ERC20: approve to the zero address"); // checking if spender's address is not zero address
        require(_balances[msg.sender] >= amount, "ERC20: approve amount exceeds balance"); // checking if sender has enough balance
        _allowances[msg.sender][spender] = amount; // setting allowance for spender
        emit Approval(msg.sender, spender, amount); // emitting Approval event
        return true; // returning true
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) { // overriding transferFrom function from interface
        require(msg.sender != address(0), "ERC20: transfer from the zero address"); // checking if sender's address is not zero address
        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance"); // checking if sender has enough balance
        require(_allowances[sender][msg.sender] >= amount, "ERC20: transfer amount exceeds allowance"); // checking if sender has enough allowance
        _balances[sender] = _balances[sender] - amount; // deducting transferred amount from sender's balance
        _balances[recipient] = _balances[recipient] + amount; // adding transferred amount to recipient's balance
        _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount; // deducting transferred amount from allowance for sender
        emit Transfer(sender, recipient, amount); // emitting Transfer event
        return true; // returning true
    }
}