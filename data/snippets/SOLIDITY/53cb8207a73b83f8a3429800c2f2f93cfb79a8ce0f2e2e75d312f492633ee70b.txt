pragma solidity ^0.8.0;

// Defining a contract called Exchange
contract Exchange {
    // Declaring a variable to store the total supply of tokens
    uint public totalSupply;

    // Mapping from address to their balances
    mapping(address => uint) public balanceOf;
    
    // Mapping from address to mapping of allowance for each address
    mapping(address => mapping(address => uint)) public allowance;

    // Event emitted when tokens are transferred
    event Transfer(address indexed from, address indexed to, uint value);

    // Event emitted when a new allowance is approved
    event Approval(address indexed owner, address indexed spender, uint value);

    // Constructor function - initializes contract with initial supply of tokens and allocates them to creator's address
    constructor(uint initialSupply) {
        totalSupply = initialSupply;
        balanceOf[msg.sender] = initialSupply;
    }

    // Function to transfer tokens
    function transfer(address to, uint value) public returns (bool) {
        // Checking for sufficient balance
        require(value <= balanceOf[msg.sender], "Insufficient balance");

        // Updating balance of sender and receiver
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;

        // Emitting the Transfer event
        emit Transfer(msg.sender, to, value);

        return true;
    }

    // Function to approve an allowance for another address
    function approve(address spender, uint value) public returns (bool) {
        // Setting the allowance
        allowance[msg.sender][spender] = value;

        // Emitting the Approval event
        emit Approval(msg.sender, spender, value);

        return true;
    }

    // Function to transfer tokens through an approved allowance
    function transferFrom(address from, address to, uint value) public returns (bool) {
        // Checking for sufficient allowance
        require(value <= allowance[from][msg.sender], "Insufficient allowance");

        // Checking for sufficient balance
        require(value <= balanceOf[from], "Insufficient balance");

        // Updating allowance and balance
        allowance[from][msg.sender] -= value;
        balanceOf[from] -= value;
        balanceOf[to] += value;

        // Emitting the Transfer event
        emit Transfer(from, to, value);

        return true;
    }
}