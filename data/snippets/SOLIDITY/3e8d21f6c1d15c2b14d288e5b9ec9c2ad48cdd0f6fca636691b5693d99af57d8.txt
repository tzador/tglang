pragma solidity ^0.6.0; // Sets the compiler version to 0.6.0
contract Voting { // Defines the contract name
    // Defines state variables
    address public chairperson;
    mapping(address => bool) public voters;
    mapping(bytes32 => uint256) public votesReceived;

    // Defines events
    event VoterAdded(address voter);
    event VoteReceived(address voter, bytes32 candidate);

    // Modifier to restrict function access
    modifier onlyChairperson() {
        require(msg.sender == chairperson);
        _;
    }

    // Constructor function to set chairperson
    constructor() public {
        chairperson = msg.sender;
    }

    // Function to add a voter
    function addVoter(address _voter) public onlyChairperson {
        require(!voters[_voter]);
        voters[_voter] = true;
        emit VoterAdded(_voter);
    }

    // Function to cast a vote
    function vote(bytes32 _candidate) public {
        require(voters[msg.sender]);

        // Checks if candidate exists and adds vote
        require(_candidate != "");
        votesReceived[_candidate] += 1;
        emit VoteReceived(msg.sender, _candidate);
    }

    // Function to get total number of votes for a candidate
    function totalVotesFor(bytes32 _candidate) public view returns (uint256) {
        return votesReceived[_candidate];
    }
}