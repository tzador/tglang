// Example contract to demonstrate inheritance and modifiers
contract Owner {
    address owner;
    
    // constructor to set the owner variable
    constructor() public {
        owner = msg.sender;
    }
    
    // modifier to restrict functions to only be called by the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }
    
    // fallback function to receive ether
    fallback() external payable {}
}

// Inherited contract from Owner
contract Inherited is Owner {
    // new variable in the inherited contract
    uint public inheritedNumber;
    
    // function that can only be called by the owner
    function setNumber(uint _number) external onlyOwner {
        inheritedNumber = _number;
    }
    
    // example function using the 'super' keyword to call the parent contract's function
    function receiveEther() external payable {
        // call the parent contract's fallback function
        super.fallback();
    }
}

// contract that interacts with the Inherited contract
contract Interaction {
    Inherited inheritedContract;
    
    // constructor to set the inherited contract variable
    constructor() public {
        // set the address of the inherited contract
        inheritedContract = new Inherited();
    }
    
    // function that interacts with the inherited contract
    function interact() external payable {
        // call the function in the inherited contract
        inheritedContract.setNumber{value: msg.value}(5);
    }
}