/// @title Contract for a decentralized marketplace
/// @notice A contract that allows users to buy and sell goods in a decentralized marketplace
/// @dev This contract follows the SOLID principles of object-oriented programming
/// @author Jane Smith

contract Marketplace {

    // Variables
    address public owner; // Address of the contract owner
    address public admin; // Address of the marketplace admin
    uint public numProducts; // Number of products in the marketplace

    // Struct for storing product information
    struct Product {
        string name; // Name of the product
        uint price; // Price of the product in wei
        uint quantity; // Quantity available for sale
        bool available; // Flag to check availability of the product
    }

    // Mapping to store all products, with product ID as the key
    mapping (uint => Product) public products;

    // Events
    event ProductAdded(uint indexed productId); // Event triggered when a new product is added
    event ProductPurchased(uint indexed productId, address buyer); // Event triggered when a product is purchased
    event ProductSoldOut(uint indexed productId); // Event triggered when a product is sold out

    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action");
        _;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only the marketplace admin can perform this action");
        _;
    }

    /// @dev Constructor function that sets the owner and admin addresses
    constructor() public {
        owner = msg.sender;
        admin = msg.sender;
    }

    /// @notice Function to add a new product to the marketplace
    /// @param _name Name of the product
    /// @param _price Price of the product in wei
    /// @param _quantity Quantity available for sale
    function addProduct(string memory _name, uint _price, uint _quantity) public onlyAdmin {
        require(_price > 0, "Price must be greater than 0"); // Check that price is not 0
        require(_quantity > 0, "Quantity must be greater than 0"); // Check that quantity is not 0

        // Increase numProducts by 1
        numProducts++;

        // Add product to mapping
        products[numProducts] = Product({
            name: _name,
            price: _price,
            quantity: _quantity,
            available: true
        });

        // Trigger ProductAdded event
        emit ProductAdded(numProducts);
    }

    /// @notice Function to purchase a product from the marketplace
    /// @param _productId ID of the product being purchased
    function purchaseProduct(uint _productId) public payable {
        require(products[_productId].available == true, "Product is not available"); // Check that product is available
        require(msg.value == products[_productId].price, "Incorrect payment amount"); // Check that payment amount is equal to product price

        // Transfer product price to contract owner
        owner.transfer(msg.value);

        // Decrease product quantity by 1
        products[_productId].quantity--;

        // Trigger ProductPurchased event
        emit ProductPurchased(_productId, msg.sender);

        // Check if product is now sold out
        if (products[_productId].quantity == 0) {
            // Set product as not available
            products[_productId].available = false;

            // Trigger ProductSoldOut event
            emit ProductSoldOut(_productId);
        }
    }

    /// @notice Function to change the admin address
    /// @param _newAdmin Address of the new admin
    function changeAdmin(address _newAdmin) public onlyOwner {
        admin = _newAdmin;
    }
}