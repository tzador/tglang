contract Voting {
    // state variables
    mapping(address => bool) public voters;
    mapping(string => uint) public candidateVotes;

    // constructor
    constructor() {
        voters[msg.sender] = true; // initialize contract creator as a voter
    }

    // modifiers
    modifier onlyVoter() {
        require(voters[msg.sender], "Only registered voters can vote."); // to be used for voting functions
        _;
    }

    // events
    event NewVoter(address voter);
    event Vote(address voter, string candidate);

    // functions
    function registerVoter(address _voter) public onlyVoter {
        voters[_voter] = true; // register new voter
        emit NewVoter(_voter); // emit NewVoter event
    }

    function vote(string memory _candidate) public onlyVoter {
        candidateVotes[_candidate]++; // increment vote count for candidate
        emit Vote(msg.sender, _candidate); // emit Vote event
    }

    function getCandidateVotes(string memory _candidate) public view returns (uint) {
        return candidateVotes[_candidate]; // return vote count for specified candidate
    }
}