// This contract represents a smart contract for a decentralized voting system
contract Voting {
    // Stores the address of the election commissioner
    address public electionCommissioner;
    // Stores the mapping of candidates and their vote counts
    mapping (bytes32 => uint256) public voteCounts;
    // Stores the list of eligible voters
    address[] public eligibleVoters;
    
    // Constructor function to set the election commissioner's address upon deployment
    constructor() public {
        electionCommissioner = msg.sender;
    }
    
    // Modifiers
    // Modifier to restrict the function to only the election commissioner
    modifier onlyCommissioner() {
        require(msg.sender == electionCommissioner, "Only the election commissioner can call this function.");
        _;
    }
    
    // Modifier to restrict the function to only eligible voters
    modifier onlyEligible() {
        bool isEligible = false;
        for(uint256 i = 0; i < eligibleVoters.length; i++) {
            if(msg.sender == eligibleVoters[i]) {
                isEligible = true;
                break;
            }
        }
        require(isEligible, "Only eligible voters can call this function.");
        _;
    }
    
    // Events
    // Event to emit when a new candidate is added
    event CandidateAdded(bytes32 _candidateName);
    // Event to emit when a vote is casted
    event VoteCasted(address _voter, bytes32 _candidateName);
    
    // Functions
    // Function to add a new candidate to the voting system
    function addCandidate(bytes32 _candidateName) public onlyCommissioner {
        voteCounts[_candidateName] = 0;
        emit CandidateAdded(_candidateName);
    }
    
    // Function to add an eligible voter to the list
    function addEligibleVoter(address _voterAddress) public onlyCommissioner {
        eligibleVoters.push(_voterAddress);
    }
    
    // Function to cast a vote for a candidate
    function castVote(bytes32 _candidateName) public onlyEligible {
        voteCounts[_candidateName]++;
        emit VoteCasted(msg.sender, _candidateName);
    }
}