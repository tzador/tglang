pragma solidity ^0.5.0; //version specifier

contract MyContract { //declaring a contract
    uint256 public myNumber; //declaring a public state variable
    
    function setNumber(uint256 _number) public { //declaring a public function
        myNumber = _number; //setting value for state variable
    }
    
    function getNumber() public view returns (uint256) { //declaring a public function with a return value
        return myNumber; //returning state variable value
    }
    
    function addNumbers(uint256 _num1, uint256 _num2) public pure returns (uint256) { //declaring a pure function with multiple parameters and a return value
        return _num1 + _num2; //returning the sum of parameters
    }
    
    function safeTransfer() public payable { //declaring a payable function
        //code for transferring funds
    }
    
    function withdrawFunds() public { //declaring a public function
        require(myNumber > 0, "Balance must be greater than 0"); //using require to check a condition
        msg.sender.transfer(myNumber); //transferring funds to the sender's address
        myNumber = 0; //resetting state variable
    }
    
    modifier onlyOwner() { //declaring a modifier
        require(msg.sender == owner); //using require to check a condition
        _; //placeholder for code to be executed
    }
    
    function changeOwner(address newOwner) public onlyOwner { //using the modifier in a function
        owner = newOwner; //updating owner address
    }
    
    //declaring events
    event NumberSet(uint256 number); //declaring an event with a parameter
    
    //declaring structs
    struct Person { //declaring a struct
        string name; //variable of type string
        uint256 age; //variable of type uint
    }
    
    Person[] public people; //declaring a dynamic array of structs
    
    function addPerson(string memory _name, uint256 _age) public { //declaring a public function with memory variables
        Person memory newPerson = Person(_name, _age); //creating a new struct object
        people.push(newPerson); //adding struct object to the array
    }
    
    //using fallback functions
    function() external payable { //declaring an external fallback function
        //code for receiving funds
    }
}