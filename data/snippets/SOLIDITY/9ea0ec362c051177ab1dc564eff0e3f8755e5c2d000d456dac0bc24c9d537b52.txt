pragma solidity ^0.8.0;

contract MyContract {
    
    //state variables
    string private name;
    uint256 private age;
    address private owner;
    
    //events
    event NameUpdated(string newName);
    event AgeUpdated(uint256 newAge);
    
    //constructor
    constructor(string memory _name, uint256 _age) {
        name = _name;
        age = _age;
        owner = msg.sender;
    }
    
    //modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }
    
    //functions
    function updateName(string memory _newName) public onlyOwner {
        name = _newName;
        emit NameUpdated(_newName);
    }
    
    function updateAge(uint256 _newAge) public onlyOwner {
        age = _newAge;
        emit AgeUpdated(_newAge);
    }
    
    function getName() public view returns (string memory) {
        return name;
    }
    
    function getAge() public view returns (uint256) {
        return age;
    }
    
    function getOwner() public view returns (address) {
        return owner;
    }
}