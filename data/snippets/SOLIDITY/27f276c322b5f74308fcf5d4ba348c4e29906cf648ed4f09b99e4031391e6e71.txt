pragma solidity ^0.8.6;

contract VotingSystem {

    uint256 public candidatesCount;
    mapping(uint256 => Candidate) public candidates;
    mapping(address => bool) public voters;

    struct Candidate {
        string name;
        uint256 voteCount;
    }

    event CandidateAdded(uint256 index);

    constructor() {
        candidatesCount = 0;
    }

    function addCandidate(string memory _name) public {
        require(!voters[msg.sender], "Already voted");
        require(bytes(_name).length > 0, "Empty name not allowed");
        
        candidates[candidatesCount] = Candidate(_name, 0);
        candidatesCount++;
        
        emit CandidateAdded(candidatesCount - 1);
    }

    function vote(uint256 _index) public {
        require(_index < candidatesCount, "Invalid candidate index");
        require(!voters[msg.sender], "Already voted");
        
        candidates[_index].voteCount++;
        voters[msg.sender] = true;
    }

    function winner() public view returns (string memory) {
        uint256 maxVotes = 0;
        string memory winnerName;
        
        for (uint256 i = 0; i < candidatesCount; i++) {
            if (candidates[i].voteCount > maxVotes) {
                maxVotes = candidates[i].voteCount;
                winnerName = candidates[i].name;
            }
        }
        
        return winnerName;
    }
    
    function reset() public {
        for (uint256 i = 0; i < candidatesCount; i++) {
            candidates[i].voteCount = 0;
        }
        
        candidatesCount = 0;
    }
}