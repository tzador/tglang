pragma solidity ^0.8.7;
// ^ above indexing is to specify the version of solidity language being used

// Define a contract named 'Voting'
contract Voting {

    // Declare variables
    uint public totalVotes;
    address public contractOwner;
    mapping (address => bool) public voters;
    mapping (string => uint) public candidateVotes;

    // Create an event named 'Vote'
    event Vote(address voter, string candidate);

    // Create a constructor function
    constructor() {
        // Initialize the contract owner as the sender of the transaction
        contractOwner = msg.sender;
    }

    // Create a function to register as a voter
    function registerVoter(address _voter) external {
        // Only the contract owner is able to register voters
        require(msg.sender == contractOwner, "Only the contract owner can register voters.");
        // Add the voter's address to the 'voters' mapping with a default value of 'true'
        voters[_voter] = true;
    }

    // Create a function to vote for a candidate
    function vote(string calldata _candidate) external {
        // Require the sender to be a registered voter
        require(voters[msg.sender] == true, "Sender is not a registered voter.");

        // Update the total number of votes
        totalVotes++;

        // Add the sender's address to the 'voters' mapping with a value of 'false' to restrict future votes
        voters[msg.sender] = false;

        // Increase the vote count for the chosen candidate
        candidateVotes[_candidate]++;

        // Emit the 'Vote' event
        emit Vote(msg.sender, _candidate);
    }
}