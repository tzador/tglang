pragma solidity ^0.8.0;

contract Voting {
    // Struct to define a Candidate with their name and vote count
    struct Candidate {
        string name;
        uint votes;
    }

    // A dynamically-sized array to store all candidates
    Candidate[] public candidates;

    // Map to store the total number of votes casted for each candidate
    mapping(string => uint) public totalVotes;

    // Function to add a new candidate to the contract
    function addCandidate(string memory _name) public {
        // Checking if the candidate already exists
        require(totalVotes[_name] == 0, "Candidate already exists!");

        // Creating a new candidate object and adding it to the array and mapping
        Candidate memory newCandidate = Candidate({
            name: _name,
            votes: 0
        });
        candidates.push(newCandidate);
        totalVotes[_name] = 0;
    }

    // Function to vote for a candidate
    function vote(uint _candidateIndex) public {
        // Checking if the candidate index exists
        require(_candidateIndex < candidates.length, "Invalid candidate index!");

        // Incrementing the vote count for the chosen candidate
        candidates[_candidateIndex].votes++;

        // Incrementing the total number of votes for the chosen candidate
        totalVotes[candidates[_candidateIndex].name]++;
    }

    // Function to get the winner of the election
    function getWinner() public view returns (string memory) {
        // Variable to store the highest number of votes
        uint highestVotes = 0;

        // Variable to store the name of the candidate with the highest number of votes
        string memory winner;

        // Looping through all candidates to find the one with the highest number of votes
        for(uint i = 0; i < candidates.length; i++) {
            if(candidates[i].votes > highestVotes) {
                highestVotes = candidates[i].votes;
                winner = candidates[i].name;
            }
        }

        // Returning the name of the winner
        return winner;
    }

    // Function to get the total number of votes for a candidate
    function getTotalVotesForCandidate(string memory _name) public view returns (uint) {
        return totalVotes[_name];
    }
}