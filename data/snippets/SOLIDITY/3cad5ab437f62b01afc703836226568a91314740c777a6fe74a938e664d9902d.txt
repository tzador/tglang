pragma solidity >=0.4.22 <0.6.0; //Defining the version of Solidity

contract MessagingSystem { //Defining the contract
    address public owner; //Declaring a state variable

    struct Message { //Defining a struct named 'Message'
        uint256 id; //Struct member, unique identifier for the message
        string text; //Struct member, the actual message
        address sender; //Struct member, address of the sender
        address recipient; //Struct member, address of the recipient
        bool isRead; //Struct member, boolean to track if the message has been read
    }

    //Events to be emitted on certain actions
    event MessageSent(uint256 _id, address _sender, address _recipient);
    event MessageRead(uint256 _id, address _reader);

    Message[] public messages; //Declaring a public array of type 'Message'

    constructor() public { //Constructor to be executed upon deployment
        owner = msg.sender; //Setting the contract owner to the deployer's address
    }

    function sendMessage(string memory _text, address _recipient) public { //Function to send a message
        require(msg.sender != _recipient, "Cannot send a message to yourself"); //Checking if the sender and recipient are different
        uint256 id = messages.length; //Assigning the message's id to the current length of the array
        messages.push(Message(id, _text, msg.sender, _recipient, false)); //Creating a new instance of 'Message' and adding it to the array
        emit MessageSent(id, msg.sender, _recipient); //Emitting the 'MessageSent' event
    }

    function readMessage(uint256 _id) public { //Function to read a message
        require(messages[_id].recipient == msg.sender, "You are not the recipient of this message"); //Checking if the caller is the intended recipient
        messages[_id].isRead = true; //Setting the 'isRead' property of the message to true
        emit MessageRead(_id, msg.sender); //Emitting the 'MessageRead' event
    }
}