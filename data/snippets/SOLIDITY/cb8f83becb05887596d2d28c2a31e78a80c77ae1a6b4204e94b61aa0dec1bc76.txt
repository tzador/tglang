pragma solidity ^0.8.0; //specifies the version of solidity to be used

contract MyContract {
    uint256 public myVariable; //declares a public variable of type uint256 (unsigned integer with 256 bits)
    address public owner; //declares a public variable of type address, to store the owner address
    
    constructor() {
        owner = msg.sender; //sets the owner variable to the address of the person deploying the contract
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action."); //ensures that only the contract owner can call functions with this modifier
        _; //placeholder for the modified function code to be executed
    }
    
    function setMyVariable(uint256 _newVariable) public onlyOwner {
        myVariable = _newVariable; //sets the value of myVariable to the input parameter _newVariable, only if the function is called by the contract owner
    }
    
    function getMyVariable() public view returns (uint256) {
        return myVariable; //returns the current value of myVariable
    }
    
    //other functions and variables
}