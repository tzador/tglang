// This is a contract that manages the transfer of ERC20 tokens
contract TokenTransfer {
//Declaring variables
address public tokenAddress; //the address of the ERC20 token
mapping(address => uint) public balances; //mapping of addresses to token balances
uint public totalSupply; //total supply of tokens
//Events
event Transfer(address indexed from, address indexed to, uint value); //event to track token transfers
event Approval(address indexed owner, address indexed spender, uint value); //event to track approved token transfers

//Constructor function
constructor(address _tokenAddress) public {
    tokenAddress = _tokenAddress;
  }

//Function to transfer tokens from sender to recipient
function transfer(address _to, uint _value) public returns (bool) {
    require(balances[msg.sender] >= _value); //check if sender has enough balance
    require(_to != address(0)); //check if recipient address is valid
    require(balances[_to] + _value <= balances[_to]); //check for overflow
    balances[msg.sender] -= _value; //deduct transferred amount from sender's balance
    balances[_to] += _value; //add transferred amount to recipient's balance
    emit Transfer(msg.sender, _to, _value); //trigger transfer event
    return true;
  }

//Function to approve a spender to transfer tokens from sender's account
function approve(address _spender, uint _value) public returns (bool) {
    require(_spender != address(0)); //check if spender address is valid
    balances[msg.sender] -= _value; //deduct approved amount from sender's balance
    balances[_spender] += _value; //add approved amount to spender's balance
    emit Approval(msg.sender, _spender, _value); //trigger approval event
    return true;
  }

//Function to transfer approved tokens from sender to recipient
function transferFrom(address _from, address _to, uint _value) public returns (bool) {
    require(balances[_from] >= _value); //check if sender has enough balance
    require(balances[_to] + _value <= balances[_to]); //check for overflow
    require(balances[msg.sender] >= _value); //check if spender has enough approved tokens
    balances[_from] -= _value; //deduct transferred amount from sender's balance
    balances[_to] += _value; //add transferred amount to recipient's balance
    balances[msg.sender] -= _value; //deduct approved amount from spender's balance
    emit Transfer(_from, _to, _value); //trigger transfer event
    return true;
  }
  
//Function to get total token balance of an address
function balanceOf(address _owner) public view returns (uint) {
    return balances[_owner]; //return token balance of specified address
  }
  
//Function to get the remaining approved token balance of a spender
function allowance(address _owner, address _spender) public view returns (uint) {
    return balances[_owner][_spender]; //return approved token balance for specified owner and spender
  }
}