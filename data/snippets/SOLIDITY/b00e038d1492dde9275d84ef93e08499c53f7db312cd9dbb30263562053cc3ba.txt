pragma solidity ^0.8.0;

contract Timelock {
    // address of the owner of the contract
    address public owner;
    // unix timestamp for when the contract should unlock
    uint public unlockTime;
    
    // constructor function to set owner and unlockTime upon deployment
    constructor(address _owner, uint _unlockTime){
        owner = _owner;
        unlockTime = _unlockTime;
    }
    
    // modifier that requires the msg.sender to be the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }
    
    // function to withdraw funds from the contract after the unlock time has passed
    function withdraw() public onlyOwner{
        require(block.timestamp >= unlockTime, "Unlock time has not yet passed.");
        payable(owner).transfer(address(this).balance);
    }
    
    // function to change the unlockTime by the owner
    function updateUnlockTime(uint _newUnlockTime) public onlyOwner{
        require(_newUnlockTime > block.timestamp, "New unlock time must be in the future.");
        unlockTime = _newUnlockTime;
    }
}