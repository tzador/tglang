pragma solidity ^0.4.24;

// import statements
import "./Strings.sol";
import "./SafeMath.sol";

// contract definition
contract ExampleContract {

    // state variables
    address public owner;
    mapping(address => uint) public balances;

    // constructor function
    constructor() public {
        owner = msg.sender;
    }

    // public function that accepts two string parameters
    function combineStrings(string memory str1, string memory str2)
        public
        pure
        returns (string memory)
    {
        // use Strings library to concatenate strings
        return Strings.strConcat(str1, str2);
    }

    // internal function that returns a uint
    function add(uint a, uint b)
        internal
        pure
        returns (uint)
    {
        // use SafeMath library to perform addition
        return SafeMath.add(a, b);
    }

    // modifier function that checks for owner's permission
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    // external function that can only be called by owner
    function withdraw()
        external
        onlyOwner
    {
        // transfer balance from contract to owner
        owner.transfer(balances[msg.sender]);
        // decrement the balance
        balances[msg.sender] = 0;
    }

    // fallback function
    function ()
        public
        payable
    {
        // increment the balance of the sender by the received amount
        balances[msg.sender] = add(balances[msg.sender], msg.value);
    }
}