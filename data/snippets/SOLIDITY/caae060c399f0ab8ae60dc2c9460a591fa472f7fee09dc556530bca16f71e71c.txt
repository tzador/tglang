pragma solidity 0.8.6;

// This is a contract that allows users to store and retrieve data using a key-value model

contract DataStorage {
    // array to store the data values
    uint[] dataValues;
    
    // mapping to track the indexes of the data values
    mapping(uint => uint) dataIndexes;
    
    // event to track when new data value is stored
    event DataStored(uint index, uint value);
    
    // function to store a new data value
    function store(uint value) public {
        // adding the new data value to the array
        dataValues.push(value);
        
        // setting the index of the new data value in the mapping
        dataIndexes[value] = dataValues.length - 1;
        
        // emitting the DataStored event
        emit DataStored(dataValues.length - 1, value);
    }
    
    // function to retrieve data value using its index
    function retrieve(uint index) public view returns (uint) {
        // make sure the index is within the range of the data array
        // otherwise return 0
        if (index >= 0 && index <= dataValues.length) {
            return dataValues[index];
        } else {
            return 0;
        }
    }
    
    // function to retrieve data value using its key
    function retrieveByKey(uint key) public view returns (uint) {
        // make sure the key has a corresponding index
        // otherwise return 0
        if (dataIndexes[key] != 0) {
            return dataValues[dataIndexes[key]];
        } else {
            return 0;
        }
    }
}