//"The code below is an example of a basic ERC20 Token contract in Solidity"
pragma solidity ^0.5.6;

contract Token {
    //Variables of the token
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    //Events for transfer and approval
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    //Constructor function to initialize token
    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
        ) public {
            name = _name;
            symbol = _symbol;
            decimals = _decimals;
            totalSupply = _totalSupply;

            balanceOf[msg.sender] = _totalSupply;
        }

    /**
     * @dev Transfers tokens from one address to another
     * @param _to The recipient address
     * @param _value The amount of tokens to transfer
     * @return True if successful, false otherwise
     */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[msg.sender], "Insufficient balance");

        //SafeMath to prevent overflow
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        //Emit Transfer event
        emit Transfer(msg.sender, _to, _value);

        return true;
    }

    /**
     * @dev Allows a user to approve another address to spend tokens on their behalf
     * @param _spender The address to be approved
     * @param _value The amount of tokens to approve
     * @return True if successful, false otherwise
     */
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;

        //Emit Approval event
        emit Approval(msg.sender, _spender, _value);

        return true;
    }

    /**
     * @dev Transfers tokens from one address to another on behalf of a user
     * @param _from The address to transfer tokens from
     * @param _to The address to transfer tokens to
     * @param _value The amount of tokens to transfer
     * @return True if successful, false otherwise
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from], "Insufficient balance");
        require(_value <= allowance[_from][msg.sender], "Not enough allowance");

        //SafeMath to prevent overflow
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;

        //Reduce approved allowance
        allowance[_from][msg.sender] -= _value;

        //Emit Transfer event
        emit Transfer(_from, _to, _value);

        return true;
    }
}