pragma solidity ^0.8.0; // version pragma defining compiler version to be used

contract MyContract {
    uint256 public total; // defining a public variable to store a uint value
    address public owner; // defining a public variable to store an address value

    constructor() {
        owner = msg.sender; // assigning current address to owner variable
    }

    function add(uint256 a, uint256 b) public returns (uint256) {
        require(msg.sender == owner, "Only owner can call this function"); // setting a condition for the caller of the function
        total = a + b; // adding two uint values and storing result in total variable
        return total; // returning the result
    }

    modifier onlyOwner() { // declaring a modifier to restrict function access
        require(msg.sender == owner, "Only owner can call this function"); // setting a condition for the caller of the function
        _; // placeholder for function code
    }

    function subtract(uint256 a, uint256 b) public onlyOwner returns (uint256) {
        total = a - b; // subtracting two uint values and storing result in total variable
        return total; // returning the result
    }

    function changeOwner(address newOwner) public onlyOwner { // function to change the owner address
        owner = newOwner; // assigning new address to owner variable
    }
}