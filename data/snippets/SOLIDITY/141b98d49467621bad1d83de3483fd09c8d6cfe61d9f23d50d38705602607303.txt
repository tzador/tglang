pragma solidity ^0.8.0;
// defining a contract named MyContract, which is a smart contract
contract MyContract {
    // state variable of type string with name message
    string message;
    
    // constructor function executed upon contract deployment, sets initial message
    constructor(string memory initialMessage) {
        // assigning the initialMessage value to the message state variable
        message = initialMessage;
    }

    // function to set the value of the message state variable
    function setMessage(string memory newMessage) public {
        // require statement to check if the newMessage is not empty
        require(bytes(newMessage).length != 0, "Message can't be empty");
        // setting the new value for the message state variable
        message = newMessage;
    }

    // function to get the value of the message state variable
    function getMessage() public view returns (string memory) {
        // returning the value of the message state variable 
        return message;
    }
    
    // a modifier to restrict access to specific addresses
    modifier onlyOwner {
        // require statement to check if the sender of the transaction is the contract owner
        require(msg.sender == owner, "Only the owner can call this function");
        // indicating that the code inside the function should be executed
        _;
    }

    // state variable of type address with name owner
    address owner;
    
    // mapping to keep track of specific user's permissions
    mapping(address => bool) public userAccess;

    // function to add a new user address to the userAccess mapping
    function givePermission(address user) public onlyOwner {
        // setting the value for the specified user address to true
        userAccess[user] = true;
    }

    // function to revoke a user's permission to access the contract functions
    function revokePermission(address user) public onlyOwner {
        // setting the value for the specified user address to false
        userAccess[user] = false;
    }
}