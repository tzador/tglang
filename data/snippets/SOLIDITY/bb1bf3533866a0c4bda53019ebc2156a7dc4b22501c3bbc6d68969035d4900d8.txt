contract Wallet {
  //state variables
  address owner;
  uint256 walletBalance;
  uint256 timeLocked;
  
  //events
  event Deposit(address indexed _from, uint256 _amount);
  event Withdrawal(address indexed _to, uint256 _amount);
  
  //modifiers
  modifier onlyOwner {
    require(msg.sender == owner);
    _;
  }
  
  modifier onlyBeforeTimeLocked {
    require(now < timeLocked);
    _;
  }
  
  //constructor
  constructor(uint256 _time) public {
    owner = msg.sender;
    walletBalance = 0;
    timeLocked = now + _time;
  }
  
  //functions
  function deposit() public payable {
    walletBalance += msg.value;
    emit Deposit(msg.sender, msg.value);
  }
  
  function withdraw(address payable _to, uint256 _amount) public onlyOwner onlyBeforeTimeLocked {
    require(_amount <= walletBalance);
    walletBalance -= _amount;
    _to.transfer(_amount);
    emit Withdrawal(_to, _amount);
  }
  
  function getWalletBalance() public view returns (uint256) {
    return walletBalance;
  }
  
}