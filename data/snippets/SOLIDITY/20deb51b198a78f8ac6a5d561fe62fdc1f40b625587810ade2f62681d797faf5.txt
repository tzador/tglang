// Example contract implementing the Factory design pattern
// Inherits from the ERC20 standard token contract 

pragma solidity ^0.4.24;

import "ERC20.sol"; // Import the ERC20.sol contract as a dependency

contract MyTokenFactory is ERC20 { // Contract name and inheritance declaration
    address[] public newTokens; // Public array to store addresses of new token contracts created
    
    // Event emitted when a new token contract is created
    event TokenCreated(address indexed _tokenAddress, string _name, string _symbol, uint8 _decimals, uint256 _totalSupply);
    
    // Struct to store details of a new token
    struct Token {
        string name;
        string symbol;
        uint8 decimals;
        uint256 totalSupply;
    }
    
    // Function to create a new token contract
    function createToken(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public {
        Token memory newToken = Token(_name, _symbol, _decimals, _totalSupply); // Instantiate a new Token struct
        address newTokenAddress = new ERC20Token(newToken.name, newToken.symbol, newToken.decimals, newToken.totalSupply); // Instantiate a new ERC20Token contract with the given parameters
        newTokens.push(newTokenAddress); // Add the new token contract address to the newTokens array
        emit TokenCreated(newTokenAddress, newToken.name, newToken.symbol, newToken.decimals, newToken.totalSupply); // Emit the TokenCreated event
    }
    
    // Function to get the count of new tokens created
    function getNewTokenCount() public view returns (uint) {
        return newTokens.length;
    }
}