pragma solidity ^0.8.0;

contract MyContract {
    string public name;
    uint256 public age;
    address public owner;
    
    // Events to track changes
    event NameChanged(string name);
    event AgeChanged(uint256 age);
    event OwnerChanged(address owner);
    
    // Modifier to restrict access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }
    
    // Function to set contract owner
    function setOwner(address _newOwner) public onlyOwner {
        owner = _newOwner;
        emit OwnerChanged(_newOwner);
    }
    
    // Function to change name
    function changeName(string memory _newName) public {
        require(bytes(_newName).length > 0, "Name cannot be empty.");
        name = _newName;
        emit NameChanged(_newName);
    }
    
    // Function to change age
    function changeAge(uint256 _newAge) public {
        require(_newAge >= 18, "Age must be at least 18.");
        age = _newAge;
        emit AgeChanged(_newAge);
    }
    
    // Function to get owner's name and age
    function getOwnerDetails() public view returns (string memory, uint256) {
        return (name, age);
    }
}