pragma solidity ^0.8.0; // sets the version of Solidity to use

// define a contract called "MyContract"
contract MyContract {

	// set a variable of type uint named "myNumber"
	uint myNumber;
	// set a string variable named "myString"
	string myString;
	// set a mapping variable with address as keys and bool as values
	mapping (address => bool) public myMapping;

	// create a constructor function that sets default values
	constructor() {
		myNumber = 10;
		myString = "Hello World!";
		myMapping[msg.sender] = true;
	}

	// create a function that allows changing the value of myNumber
	function setNumber(uint _newNumber) public {
		myNumber = _newNumber;
	}

	// create a function that returns the value of myString
	function getString() public view returns (string memory) {
		return myString;
	}

	// create a function that adds a new key and value to myMapping
	function addToMapping(address _address) public {
		myMapping[_address] = true;
	}

	// create a function that checks if the sender is in myMapping
	function checkMapping() public view returns (bool) {
		return myMapping[msg.sender];
	}

	// create a function that only allows the owner to set a new string
	function setString(string memory _newString) public {
		require(msg.sender == owner); // restricts access to only the owner
		myString = _newString;
	}

	// create a function with a modifier that restricts access to only the owner
	function changeMapping(address _address, bool _value) public onlyOwner {
		myMapping[_address] = _value;
	}

	// create a modifier named onlyOwner
	modifier onlyOwner() {
		require(msg.sender == owner); // restricts access to only the owner
		_;
	}

	// declare a variable to keep track of the contract owner's address
	address owner = msg.sender;
}