// Define a contract
contract Car {
    
    // Declare variables
    address public owner;
    string public make;
    string public model;
    uint public year;
    string[] private features;
    uint public price;
    
    // Define modifier
    modifier onlyOwner {
        require(msg.sender == owner);
        _; // Continue execution
    }
    
    // Define events
    event TransferOwnership(address oldOwner, address newOwner);
    event AddFeature(string feature);
    event UpdatePrice(uint oldPrice, uint newPrice);
    
    // Contract constructor
    constructor(string _make, string _model, uint _year) public {
        owner = msg.sender; // Set owner as deployer of contract
        make = _make;
        model = _model;
        year = _year;
        price = 0;
    }
    
    // Function to add a new feature to the car
    function addFeature(string _feature) public onlyOwner {
        features.push(_feature);
        emit AddFeature(_feature);
    }
    
    // Function to update the price of the car
    function updatePrice(uint _newPrice) public onlyOwner {
        uint oldPrice = price;
        price = _newPrice;
        emit UpdatePrice(oldPrice, _newPrice);
    }
    
    // Function to transfer ownership of the car
    function transferOwnership(address _newOwner) public onlyOwner {
        address oldOwner = owner;
        owner = _newOwner;
        emit TransferOwnership(oldOwner, _newOwner);
    }
}