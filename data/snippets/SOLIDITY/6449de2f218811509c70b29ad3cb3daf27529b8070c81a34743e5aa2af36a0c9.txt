pragma solidity ^0.8.0; //Set compiler version

contract MyContract { //Create contract
    address public owner; //Declare state variable of type address

    constructor() { //Constructor function
        owner = msg.sender; //Set owner to address of sender
    }

    modifier onlyOwner { //Create modifier to restrict access to certain functions
        require(msg.sender == owner, "Only owner can call this function.");
        _; //Run the rest of the code
    }

    struct Payment { //Create struct for payments
        uint amount; //Declare state variables of type uint
        uint timestamp;
    }

    uint public numPayments; //Declare state variable of type uint
    uint public totalAmount; //Declare state variable of type uint
    mapping(uint => Payment) public payments; //Create mapping for payments

    function makePayment() public payable { //Create function for making payments
        require(msg.value > 0, "Payment amount must be greater than 0.");
        numPayments++; //Increment numPayments
        totalAmount += msg.value; //Add msg.value to totalAmount

        payments[numPayments] = Payment({ //Add new payment to mapping
            amount: msg.value,
            timestamp: block.timestamp
        });
    }

    function getAveragePayment() public view onlyOwner returns(uint) { //Create function for getting average payment
        require(numPayments > 0, "No payments have been made.");
        return totalAmount / numPayments; //Return average payment
    }
}