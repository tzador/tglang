// An example of a complex code snippet in Solidity
contract MyContract {
    // State variables
    address public owner;
    uint public balance;
    uint public constant MAX_AMOUNT = 5000;

    // Events
    event Deposit(address depositor, uint amount);
    event Withdraw(address recipient, uint amount);

    // Constructor
    constructor() public {
        owner = msg.sender;
    }

    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }

    // Functions
    function deposit(uint amount) public payable {
        // Check if deposit amount is less than max amount
        require(amount < MAX_AMOUNT, "Deposit amount cannot exceed max amount.");

        // Update balance
        balance += amount;

        // Emit deposit event
        emit Deposit(msg.sender, amount);
    }

    function withdraw() public onlyOwner {
        // Check if balance is greater than 0
        require(balance > 0, "Balance must be greater than 0 for withdrawal.");

        // Transfer balance to owner
        owner.transfer(balance);

        // Update balance
        balance = 0;

        // Emit withdraw event
        emit Withdraw(owner, balance);
    }

    function getBalance() external view returns(uint) {
        // Return the current balance
        return balance;
    }
}