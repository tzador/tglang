//Contract for a decentralized voting system

//Import necessary libraries
pragma solidity ^0.8.0;
import "./SafeMath.sol";

//Create contract
contract VotingSystem {
    
    //Declare variables and mapping
    address owner;
    SafeMath safeMath;
    mapping(address => bool) public voters;
    mapping(uint => Candidate) public candidates;
    
    //Candidate struct with name and voteCount
    struct Candidate {
        string name;
        uint voteCount;
    }
    
    //Event to emit when vote is cast
    event Vote(address indexed voter, uint candidateId);
    
    //Constructor to set owner and add owner as voter
    constructor() {
        owner = msg.sender;
        voters[msg.sender] = true;
    }
    
    //Modifier to restrict certain functions to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Sender is not the owner");
        _;
    }
    
    //Function to add new candidate to the mapping
    function addCandidate(string memory _name) public onlyOwner {
        uint candidateId = safeMath.add(uint160(msg.sender), block.timestamp);
        candidates[candidateId] = Candidate(_name, 0);
        emit CandidateAdded(candidateId, _name);
    }
    
    //Function to cast vote for a candidate
    function vote(uint _candidateId) public {
        require(voters[msg.sender], "Sender is not a registered voter");
        require(candidates[_candidateId].voteCount == 0, "Candidate is already voted for");
        candidates[_candidateId].voteCount++;
        emit Vote(msg.sender, _candidateId);
    }
    
}