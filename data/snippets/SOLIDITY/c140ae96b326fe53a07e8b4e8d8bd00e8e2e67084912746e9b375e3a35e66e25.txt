// Contract that implements a simple ERC20 token with a fixed supply

pragma solidity ^0.8.4;

// Importing necessary libraries
import "./IERC20.sol";
import "./SafeMath.sol";
import "./Address.sol";

// Defining contract
contract ERC20Token is IERC20 {
    
    // Using SafeMath library to prevent integer overflow/underflow
    using SafeMath for uint256;
    
    // Mapping the total supply of tokens
    mapping(address => uint256) private _balances;
    uint256 private _totalSupply;
    
    // Mapping the allowances for token transfers
    mapping(address => mapping(address => uint256)) private _allowances;
    
    // Contract owner
    address private _owner;
    
    // Token name, symbol, and decimal places
    string private _name;
    string private _symbol;
    uint8 private _decimals = 18;
    
    // Contract constructor
    constructor (string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
        _totalSupply = 1000000 * 10**_decimals; // 1 million tokens with 18 decimal places
        _balances[msg.sender] = _totalSupply; // Assigning total supply to contract owner
        _owner = msg.sender; // Setting contract owner
    }
    
    // Function to get the name of the token
    function name() public view override returns (string memory) {
        return _name;
    }
    
    // Function to get the symbol of the token
    function symbol() public view override returns (string memory) {
        return _symbol;
    }
    
    // Function to get the decimal places of the token
    function decimals() public view override returns (uint8) {
        return _decimals;
    }
    
    // Function to get the total supply of the token
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }
    
    // Function to get the balance of a specific address
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    
    // Function to transfer tokens to a specified address
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    // Function to approve a designated address to spend tokens
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    // Function to get the current spender allowance for a specific address
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    // Function for a designated spender to transfer tokens from an approved address
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }
    
    // Internal function to transfer tokens from one address to another
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Cannot transfer from the zero address");
        require(recipient != address(0), "Cannot transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(_balances[sender] >= amount, "Insufficient balance");
        
        // Updating sender and recipient balances
        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        
        // Emitting Transfer event
        emit Transfer(sender, recipient, amount);
    }
    
    // Internal function for a designated spender to transfer tokens from an approved address
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Owner cannot be the zero address");
        require(spender != address(0), "Spender cannot be the zero address");
        
        // Updating allowance for designated spender
        _allowances[owner][spender] = amount;
        
        // Emitting Approval event
        emit Approval(owner, spender, amount);
    }
    
    // Function to mint more tokens (only executable by contract owner)
    function mint(uint256 amount) public {
        require(msg.sender == _owner, "Only owner can mint new tokens");
        require(amount > 0, "Minted amount must be greater than zero");
        
        // Updating total supply and owner balance
        _totalSupply = _totalSupply.add(amount);
        _balances[_owner] = _balances[_owner].add(amount);
        
        // Emitting Transfer event
        emit Transfer(address(0), _owner, amount);
    }
    
    // Function to burn tokens (only executable by contract owner)
    function burn(uint256 amount) public {
        require(msg.sender == _owner, "Only owner can burn tokens");
        require(amount > 0, "Burned amount must be greater than zero");
        require(_totalSupply >= amount, "Insufficient total supply");
        
        // Updating total supply and owner balance
        _totalSupply = _totalSupply.sub(amount);
        _balances[_owner] = _balances[_owner].sub(amount);
        
        // Emitting Transfer event
        emit Transfer(_owner, address(0), amount);
    }
    
    // Function to increase allowance for a designated spender (only executable by contract owner)
    function increaseAllowance(address spender, uint256 addedValue) public {
        require(msg.sender == _owner, "Only owner can increase allowance");
        require(spender != address(0), "Spender cannot be the zero address");
        
        // Updating allowance for designated spender
        _allowances[_owner][spender] = _allowances[_owner][spender].add(addedValue);
        
        // Emitting Approval event
        emit Approval(_owner, spender, _allowances[_owner][spender]);
    }
    
    // Function to decrease allowance for a designated spender (only executable by contract owner)
    function decreaseAllowance(address spender, uint256 subtractedValue) public {
        require(msg.sender == _owner, "Only owner can decrease allowance");
        require(spender != address(0), "Spender cannot be the zero address");
        
        // Updating allowance for designated spender
        _allowances[_owner][spender] = _allowances[_owner][spender].sub(subtractedValue);
        
        // Emitting Approval event
        emit Approval(_owner, spender, _allowances[_owner][spender]);
    }
}