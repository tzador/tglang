pragma solidity >=0.5.0 <0.7.0; // Indicate the Solidity version used

// Import necessary libraries
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";

contract MyContract is Ownable { // Create a contract called 'MyContract' that inherits from OpenZeppelin's Ownable contract

    using SafeMath for uint256; // Use SafeMath library to prevent integer overflows/underflows
    
    address private owner; // Define a private variable 'owner' of type address

    // Define struct 'Person' which contains a name and age property
    struct Person {
        string name;
        uint age;
    }

    mapping(address => Person) public people; // Create a mapping that maps an address to a Person struct
    
    // Define an event 'PersonAdded' which emits the address of the new person added
    event PersonAdded(address personAddress);

    // Define a modifier named 'onlyOwner' which restricts function access to only the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }

    constructor() public {
        owner = msg.sender; // Set the contract creator as the initial owner
    }

    // Define a function that adds a new Person to the mapping, emits the PersonAdded event, and only allows the contract owner to call it
    function addPerson(address _personAddress, string memory _name, uint _age) public onlyOwner {
        Person memory newPerson = Person(_name, _age); // Create a new Person struct using the provided name and age
        people[_personAddress] = newPerson; // Set the new Person as the value in the mapping using the provided address as the key
        emit PersonAdded(_personAddress); // Emit the PersonAdded event with the provided address
    }

    // Define a function that returns the age of a Person using their address as input
    function getAge(address _personAddress) public view returns (uint) {
        return people[_personAddress].age; // Return the age value from the Person struct in the mapping for the provided address
    }
}