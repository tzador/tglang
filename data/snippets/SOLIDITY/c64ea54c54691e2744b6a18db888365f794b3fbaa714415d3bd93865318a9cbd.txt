// Example contract implementing the Solidity Interface for Token
contract Token {
    uint256 public totalSupply; // Declares a state variable to keep track of the total supply of tokens

    mapping(address => uint256) public balanceOf; // Maps the balance of tokens to the address of the holder

    event Transfer(address indexed from, address indexed to, uint256 value); // Event to track token transfers

    // Initializes the contract with an initial supply of tokens, assigned to the deployer's address
    // The total supply is specified in the constructor
    constructor(uint256 initialSupply) {
        balanceOf[msg.sender] = initialSupply; // Assigns the initial supply of tokens to the deployer's address
        totalSupply = initialSupply; // Sets the total supply of tokens
    }

    // Function to transfer tokens from one account to another
    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] >= _value); // Checks if the sender has enough tokens to transfer
        require(balanceOf[_to] + _value >= balanceOf[_to]); // Prevents integer overflow
        balanceOf[msg.sender] -= _value; // Decreases the balance of the sender
        balanceOf[_to] += _value; // Increases the balance of the recipient
        emit Transfer(msg.sender, _to, _value); // Emits the transfer event
    }
}