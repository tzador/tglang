contract DataSharing {
    // Modifier to check for valid addresses
    modifier isValidAddress(address _address) {
        require(_address != address(0), "Not a valid address");
        _;
    }

    // Modifier to check contract owner
    modifier isOwner() {
        require(msg.sender == owner, "Not contract owner");
        _;
    }

    // Events for adding/retrieving data
    event DataAdded(address indexed owner, string data);
    event DataRetrieved(address indexed owner, string data);

    // Data mapping
    mapping(address => string) private data;

    // Contract owner
    address private owner;

    // Constructor function, sets the contract owner
    constructor() public {
        owner = msg.sender;
    }

    // Function to add data to the mapping
    function addData(string memory _data) public isOwner {
        // Check for valid data
        require(bytes(_data).length > 0, "Data is empty");
        // Add data to mapping
        data[msg.sender] = _data;
        // Emit event
        emit DataAdded(msg.sender, _data);
    }

    // Function to retrieve data
    function retrieveData(address _address) public isValidAddress(_address) returns (string memory) {
        // Return data from mapping
        return data[_address];
        // Emit event
        emit DataRetrieved(_address, data[_address]);
    }
}