pragma solidity ^0.8.0;

/// @title Math Operations
/// @dev This contract contains various math operations
contract MathOperations {

    uint256 private value;

    /// @notice Adds two numbers and updates the value variable
    /// @param _num1 First number to be added
    /// @param _num2 Second number to be added
    function add(uint256 _num1, uint256 _num2) external {
        value = _num1 + _num2;
    }

    /// @notice Subtracts _num2 from _num1 and updates the value variable
    /// @param _num1 First number to be used in subtraction
    /// @param _num2 Second number to be subtracted from the first number
    function subtract(uint256 _num1, uint256 _num2) external {
        value = _num1 - _num2;
    }

    /// @notice Multiplies two numbers and updates the value variable
    /// @param _num1 First number to be multiplied
    /// @param _num2 Second number to be multiplied
    function multiply(uint256 _num1, uint256 _num2) external {
        value = _num1 * _num2;
    }

    /// @notice Divides _num1 by _num2 and updates the value variable
    /// @dev Throws an error if _num2 is 0
    /// @param _num1 Number to be divided
    /// @param _num2 Number to divide by
    function divide(uint256 _num1, uint256 _num2) external {
        require(_num2 != 0, "Cannot divide by 0");
        value = _num1 / _num2;
    }

    /// @notice Returns the current value variable
    function getValue() external view returns (uint256) {
        return value;
    }
}