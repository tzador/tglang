pragma solidity >=0.4.22 <0.9.0;

// Define a contract called `Example` with a `Data` struct and a `mapping` from address to `Data` struct
contract Example {
    struct Data {
        uint256 value;
        uint256 timestamp;
    }

    mapping(address => Data) public dataMap;

    // Event emitted when data is added to the mapping
    event DataAdded(address indexed sender, uint256 value, uint256 timestamp);

    // Constructor function, initializes an empty `Data` struct for the deployer
    constructor() {
        dataMap[msg.sender] = Data(0, 0);
    }

    // Function to add data to the mapping
    function addData(uint256 _value) external {
        // Update the `value` and `timestamp` in the `Data` struct
        dataMap[msg.sender].value = _value;
        dataMap[msg.sender].timestamp = block.timestamp;

        // Emit the `DataAdded` event
        emit DataAdded(msg.sender, _value, block.timestamp);
    }

    // Function to get the `value` and `timestamp` for a specific address
    function getData(address _address) external view returns (uint256, uint256) {
        // Return the `value` and `timestamp` stored in the `Data` struct for the given address
        return (dataMap[_address].value, dataMap[_address].timestamp);
    }
}