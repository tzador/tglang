contract Voting {
    
    // Variables
    uint public totalVotes;
    uint public winningProposalId;
    
    // Structs
    struct Proposal {
        string description;
        uint voteCount;
    }

    // Mappings
    mapping(address => bool) public voters;
    mapping(uint => Proposal) public proposals;
    
    // Events
    event NewVote(address indexed _voter, uint _proposalId);
    event WinningProposal(uint indexed _proposalId);

    // Constructor
    constructor() public {
        totalVotes = 0;
        winningProposalId = 0;
    }
    
    // Functions
    
    // Add a proposal
    function addProposal(string memory _description) public {
        proposals[totalVotes] = Proposal({
            description: _description,
            voteCount: 0
        });
        totalVotes += 1;
    }
    
    // Vote for a proposal
    function vote(uint _proposalId) public {
        require(!voters[msg.sender], "You have already voted.");
        require(_proposalId <= totalVotes, "Proposal does not exist.");
        
        proposals[_proposalId].voteCount += 1;
        voters[msg.sender] = true;
        
        emit NewVote(msg.sender, _proposalId);
        
        // Update the winning proposal if necessary
        if (proposals[_proposalId].voteCount > proposals[winningProposalId].voteCount) {
            winningProposalId = _proposalId;
            
            emit WinningProposal(winningProposalId);
        }
    }
}