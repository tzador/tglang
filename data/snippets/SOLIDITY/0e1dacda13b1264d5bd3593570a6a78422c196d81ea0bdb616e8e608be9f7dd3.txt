pragma solidity ^0.8.0;

/** @title ERC20 Token */
contract MyToken {
    /* Variables */
    string public name = "My Token";
    string public symbol = "MTK";
    uint256 public totalSupply = 1000000;
    address public owner;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    /* Events */
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
    
    /* Constructor */
    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }
    
    /* Functions */
    
    /** @dev Transfer tokens from one address to another.
     * @param _to The address to transfer to.
     * @param _amount The amount to be transferred.
     * @return Boolean indicating whether the transfer was successful.
     */
    function transfer(address _to, uint256 _amount) public returns (bool) {
        require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
        require(_to != address(0), "Invalid address");
        
        balanceOf[msg.sender] -= _amount;
        balanceOf[_to] += _amount;
        
        emit Transfer(msg.sender, _to, _amount);
        
        return true;
    }
    
    /** @dev Approve a third party spender to spend a specified amount of tokens on behalf of the owner.
     * @param _spender The address of the spender.
     * @param _amount The amount to be approved.
     * @return Boolean indicating whether the approval was successful.
     */
    function approve(address _spender, uint256 _amount) public returns (bool) {
        allowance[msg.sender][_spender] = _amount;
        
        emit Approval(msg.sender, _spender, _amount);
        
        return true;
    }
    
    /** @dev Transfer tokens from one address to another on behalf of the owner (if allowed).
     * @param _from The address to transfer from.
     * @param _to The address to transfer to.
     * @param _amount The amount to be transferred.
     * @return Boolean indicating whether the transfer was successful.
     */
    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {
        require(balanceOf[_from] >= _amount, "Insufficient balance");
        require(_to != address(0), "Invalid address");
        require(allowance[_from][msg.sender] >= _amount, "Not allowed to spend this amount");
        
        balanceOf[_from] -= _amount;
        balanceOf[_to] += _amount;
        allowance[_from][msg.sender] -= _amount;
        
        emit Transfer(_from, _to, _amount);
        
        return true;
    }
}