/**
 * @title ExampleContract
 * @dev This contract is an example of implementing the SOLID principles in Solidity
 */
contract ExampleContract {
    // Single Responsibility Principle
    // Each function performs a single task
    function add(uint256 a, uint256 b) external pure returns (uint256) {
        return a+b;
    }

    function subtract(uint256 a, uint256 b) external pure returns (uint256) {
        return a-b;
    }

    function multiply(uint256 a, uint256 b) external pure returns (uint256) {
        return a*b;
    }

    function divide(uint256 a, uint256 b) external pure returns (uint256) {
        require(b != 0, "Divisor cannot be zero");
        return a/b;
    }

    // Open-Closed Principle
    // External functions can be extended but not modified
    function exponentiation(uint256 base, uint256 exponent) external pure returns (uint256) {
        require(exponent > 0, "Exponent must be greater than 0");
        uint256 result = 1;
        for (uint256 i = 1; i <= exponent; i++) {
            result = result * base;
        }
        return result;
    }

    // Liskov Substitution Principle
    // Child contracts can be substituted for their parent contracts without altering the functioning of the contract
    // In this case, ExampleContract is the parent contract and SubExampleContract is the child contract
    function exampleFunction(uint256 a, uint256 b) external pure returns (uint256) {
        return multiply(a, b);
    }

    // Interface Segregation Principle
    // Interfaces should be segregated for different usage scenarios
    interface IExampleInterface {
        function deposit() external payable returns (bool);
        function withdraw(uint256 amount) external returns (bool);
        function getBalance() external view returns (uint256);
    }

    // Dependency Inversion Principle
    // Contracts should depend on abstractions instead of concrete implementations
    // Contract is dependent on the interface instead of the actual implementation
    IExampleInterface private exampleInterface;

    constructor(address _exampleInterfaceAddress) public {
        exampleInterface = IExampleInterface(_exampleInterfaceAddress);
    }

    function deposit(uint256 amount) external payable returns (bool) {
        // calls the deposit function from the interface
        return exampleInterface.deposit.value(amount)();
    }

    function withdraw(uint256 amount) external returns (bool) {
        // calls the withdraw function from the interface
        return exampleInterface.withdraw(amount);
    }

    function getBalance() external view returns (uint256) {
        // calls the getBalance function from the interface
        return exampleInterface.getBalance();
    }
}