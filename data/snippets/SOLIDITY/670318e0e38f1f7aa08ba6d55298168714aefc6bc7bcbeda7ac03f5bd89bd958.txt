pragma solidity ^0.8.0;

// Import necessary libraries
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

// Define contract inheriting from ERC20 and Ownable
contract MyToken is ERC20, Ownable {
    uint256 private constant INITIAL_SUPPLY = 1000000 * (10 ** 18);

    // Constructor to mint initial supply and transfer to Owner
    constructor() ERC20("MyToken", "MTK") {
        _mint(msg.sender, INITIAL_SUPPLY);
    }

    // Function to transfer tokens with require
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount <= balanceOf(msg.sender), "ERC20: transfer amount exceeds balance");
        
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    // Function to transfer from Owner with require
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount <= balanceOf(sender), "ERC20: transfer amount exceeds balance");
        
        _transfer(sender, recipient, amount);
        return true;
    }

    // Function to mint tokens with onlyOwner modifier
    function mint(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    // Function to burn tokens with onlyOwner modifier
    function burn(uint256 amount) public onlyOwner {
        _burn(msg.sender, amount);
    }

    // Function to pause transfers with onlyOwner modifier
    function pause() public onlyOwner {
        _pause();
    }

    // Function to unpause transfers with onlyOwner modifier
    function unpause() public onlyOwner {
        _unpause();
    }
}