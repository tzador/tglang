/**
 * @title SimpleBank
 * @dev A simple bank contract for storing and transferring funds.
 */
contract SimpleBank {

    address owner; // the contract owner
    mapping (address => uint) balances; // mapping of addresses to account balances
    
    // event for when funds are deposited
    event LogDepositMade(address indexed accountAddress, uint amount);
    
    // event for when funds are withdrawn
    event LogWithdrawalMade(address indexed accountAddress, uint amount);
    
    // constructor function to set the contract owner
    function SimpleBank() public {
        owner = msg.sender;
    }
    
    /**
     * @dev Function to deposit funds into the contract.
     * @param _amount Amount of funds to deposit.
     */
    function deposit(uint _amount) public payable {
        require(_amount > 0); // make sure amount is greater than 0
        require(msg.value == _amount); // make sure sent ether is equal to specified amount
        balances[msg.sender] += _amount; // add amount to sender's balance
        emit LogDepositMade(msg.sender, _amount); // emit deposit event
    }
    
    /**
     * @dev Function to withdraw funds from the contract.
     * @param _amount Amount of funds to withdraw.
     */
    function withdraw(uint _amount) public {
        require(_amount > 0); // make sure amount is greater than 0
        require(balances[msg.sender] >= _amount); // make sure sender has enough funds
        balances[msg.sender] -= _amount; // subtract amount from sender's balance
        msg.sender.transfer(_amount); // transfer funds to sender
        emit LogWithdrawalMade(msg.sender, _amount); // emit withdrawal event
    }
    
    /**
     * @dev Function to get the balance of a specified address.
     * @param _address Address to get the balance of.
     * @return Balance of the specified address.
     */
    function getBalance(address _address) public view returns (uint) {
        return balances[_address];
    }
    
    /**
     * @dev Function to update the contract owner.
     * @param _newOwner Address of the new owner.
     */
    function changeOwner(address _newOwner) public {
        require(msg.sender == owner); // require that the sender is the current owner
        require(_newOwner != address(0)); // make sure new owner address is valid
        owner = _newOwner; // set new owner
    }
    
}