// Example contract showing the use of modifiers
contract Example {
    
    // Variables that will be used in the contract
    uint public count;
    address public owner;
    mapping(address => bool) public users;
    
    // Modifier to restrict access to a function to only the owner of the contract
    modifier onlyOwner {
        require(msg.sender == owner, "Only the owner of this contract can access this function");
        _; // This is where the function code will be executed
    }
    
    // Modifier to restrict access to a function to only authorized users
    modifier onlyAuthorized {
        require(users[msg.sender] == true, "Only authorized users can access this function");
        _; // This is where the function code will be executed
    }
    
    // Constructor to set the owner of the contract and add an initial authorized user
    constructor() public {
        owner = msg.sender;
        users[msg.sender] = true;
    }
    
    // Function that can only be called by the owner of the contract
    function incrementCount() public onlyOwner {
        count++; // Increment the count variable
    }
    
    // Function that can only be called by authorized users
    function updateUsers(address newUser) public onlyAuthorized {
        users[newUser] = true; // Add the new user's address to the mapping
    }
    
    // Function that can be called by anyone, but has additional restrictions
    function updateOwner(address newOwner) public {
        require(msg.sender != owner, "Only non-owners can call this function"); // Only non-owners can call this function
        require(users[msg.sender] == true, "You are not an authorized user"); // Only authorized users can call this function
        owner = newOwner; // Update the owner address
    }
}