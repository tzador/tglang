// This code snippet shows a basic implementation of the Factory Design Pattern in Solidity

// Factory contract
contract Factory {
    
    // Event to track new contracts created
    event ContractCreated(address contractAddress);
    
    // Mapping to store the addresses of created contracts
    mapping(address => bool) public contracts;
    
    // Function to create a new contract
    function createContract(string memory _name, string memory _symbol) public {
        
        // Instantiate the new contract
        ERC20Token newContract = new ERC20Token(_name, _symbol);
        
        // Store the address of the new contract in the mapping
        contracts[address(newContract)] = true;
        
        // Emit the event to track the new contract
        emit ContractCreated(address(newContract));
    }
}

// ERC20Token contract
contract ERC20Token {
    
    // Variables to store the token name and symbol
    string public name;
    string public symbol;
    
    // Mapping to store balances of token holders
    mapping(address => uint) public balances;
    
    // Constructor to set the name and symbol of the token
    constructor(string memory _name, string memory _symbol) public {
        name = _name;
        symbol = _symbol;
    }
    
    // Function to transfer tokens from one address to another
    function transfer(address _to, uint _amount) public {
        
        // Check if the sender has sufficient balance
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        
        // Transfer tokens
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
    }
}

// Inheritance of ERC20Token contract
contract Token is ERC20Token {
    
    // Variable to store the total supply of tokens
    uint public totalSupply;
    
    // Constructor to set the total supply of tokens
    constructor() public {
        totalSupply = 100000;
        
        // Transfer all tokens to the contract creator
        balances[msg.sender] = totalSupply;
    }
    
    // Function to mint new tokens
    function mint(uint _amount) public {
        
        // Only the contract creator can mint new tokens
        require(msg.sender == owner);
        
        // Increase the total supply of tokens
        totalSupply += _amount;
        
        // Mint new tokens to the contract creator
        balances[msg.sender] += _amount;
    }
}