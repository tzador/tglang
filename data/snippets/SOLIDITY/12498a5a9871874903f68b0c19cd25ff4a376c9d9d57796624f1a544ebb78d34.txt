/// @title A simple contract for tracking and managing tasks
pragma solidity ^0.8.0;

/// @dev Task struct representing a task with a name, description and status
struct Task {
    string name;
    string description;
    bool completed;
}

/// @dev Contract that manages tasks
contract TaskTracker {

    /// @dev storage array to store tasks
    Task[] public tasks;

    /// @dev Events for task creation and completion
    event TaskCreated(string name, string description);
    event TaskCompleted(string name);

    /// @dev Function to create a new task
    /// @param _name The name of the task
    /// @param _description The description of the task
    function createTask(string memory _name, string memory _description) public {
        // create new task and add it to the tasks array
        tasks.push(Task(_name, _description, false));

        // emit task created event
        emit TaskCreated(_name, _description);
    }

    /// @dev Function to mark a task as completed
    /// @param _name The name of the task
    function completeTask(string memory _name) public {
        // loop through tasks array and find task with matching name
        for(uint i = 0; i < tasks.length; i++) {
            if(keccak256(abi.encodePacked(tasks[i].name)) == keccak256(abi.encodePacked(_name))) {
                // update task status to completed
                tasks[i].completed = true;

                // emit task completed event
                emit TaskCompleted(_name);
            }
        }
    }
}