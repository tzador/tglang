pragma solidity ^0.8.0; // pragma directive specifying the version of Solidity 

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol"; // importing the ERC20 interface

// contract declaration
contract exampleContract {
    
    // define state variables
    address public owner; // address of the contract owner
    mapping(address => bool) public allowedAddresses; // mapping to track allowed addresses
    
    // events declaration
    event OwnershipTransfer(address indexed previousOwner, address indexed newOwner);
    event AddressAllowed(address indexed allowedAddress);
    
    // constructor function
    constructor() public {
        owner = msg.sender; // set contract creator as owner
    }
    
    // function to transfer ownership of contract
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Invalid address"); // require address to be valid
        emit OwnershipTransfer(owner, newOwner); // emit event
        owner = newOwner; // update owner
    }
    
    // function to allow an address
    function allowAddress(address _address) public onlyOwner {
        require(allowedAddresses[_address] == false, "Address already allowed"); // require address to not already be allowed
        emit AddressAllowed(_address); // emit event
        allowedAddresses[_address] = true; // update mapping
    }
    
    // function to transfer ERC20 tokens
    function transferTokens(address tokenAddress, address recipient, uint amount) public onlyAllowedAddress {
        IERC20 token = IERC20(tokenAddress); // create token interface
        token.transfer(recipient, amount); // call transfer function
    }
    
    // function modifier to check for owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only contract owner can call this function"); // require sender to be owner
        _;
    }
    
    // function modifier to check for allowed address
    modifier onlyAllowedAddress() {
        require(allowedAddresses[msg.sender] == true, "Sender not allowed to call this function"); // require sender to be allowed address
        _;
    }
    
    // fallback function
    fallback() external payable {
        revert(); // reject any incoming ether
    }
}