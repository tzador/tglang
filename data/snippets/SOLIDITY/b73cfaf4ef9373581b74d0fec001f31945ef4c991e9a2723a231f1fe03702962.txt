pragma solidity ^0.7.0; //specifying the Solidity version

contract ExampleContract { //creating a contract named 'ExampleContract'
    
    //state variables
    address public owner; //declaring a public variable 'owner' of type 'address'
    uint public contractBalance; //declaring a public variable 'contractBalance' of type 'uint'
    mapping(address => uint) public balances; //declaring a public mapping 'balances' with key type 'address' and value type 'uint'
    
    //events
    event LogDeposit(address depositor, uint amount); //declaring an event 'LogDeposit' with parameters 'depositor' of type 'address' and 'amount' of type 'uint'
    
    //constructor
    constructor() {
        owner = msg.sender; //assigning the address of the person deploying the contract as the owner
    }
    
    //modifiers
    modifier onlyOwner() { //defining a modifier 'onlyOwner' to restrict access to certain functions
        require(msg.sender == owner); //ensuring that only the owner can access the function
        _; //placing '_' at the end to indicate where the function's code will be executed
    }
    
    //functions
    receive() external payable { //defining a fallback function to receive Ether
        emit LogDeposit(msg.sender, msg.value); //emitting the 'LogDeposit' event with the address of the sender and the amount of Ether sent
    }
    
    function deposit() external payable { //defining a function 'deposit' to deposit Ether into the contract
        balances[msg.sender] += msg.value; //adding the amount of ether sent by the user to their balance in the 'balances' mapping
        contractBalance += msg.value; //adding the amount of ether sent to the contract to the contract's balance
        emit LogDeposit(msg.sender, msg.value); //emitting the 'LogDeposit' event with the address of the sender and the amount of Ether sent
    }
    
    function withdraw(uint amount) external onlyOwner { //defining a function 'withdraw' to withdraw Ether from the contract, restricted to the owner
        require(contractBalance >= amount); //ensuring that the contract has enough balance to withdraw
        msg.sender.transfer(amount); //transferring the specified amount of Ether to the owner's address
        contractBalance -= amount; //subtracting the withdrawn amount from the contract's balance
    }
    
    function getBalance(address user) external view returns (uint) { //defining a function 'getBalance' to retrieve a user's balance
        return balances[user]; //returning the user's balance from the 'balances' mapping
    }
}