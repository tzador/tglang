/**
 * @title CrowdFunding
 * @dev Contract for managing a crowdfunding campaign
 */
contract CrowdFunding {
    // State variables
    address public owner; // Campaign owner address
    uint public goal; // Campaign goal in wei
    uint public deadline; // Campaign deadline in unix timestamp
    uint public raisedAmount = 0; // Amount already raised in wei
    mapping(address => uint) public contributors; // Mapping of contributor addresses to their contribution amount in wei
    address[] public contributorsArray; // Array of contributor addresses
    bool public campaignClosed = false; // Flag for closing the campaign

    // Events
    event NewContribution(address contributor, uint amount);
    event Withdrawal(address contributor, uint amount);
    event Refund(address contributor, uint amount);

    // Constructor function
    constructor(uint _goal, uint _deadline) {
        owner = msg.sender; // Set the contract owner as the deployer
        goal = _goal;
        deadline = _deadline;
    }

    // Modifier to check if the campaign is still active
    modifier campaignActive() {
        require(!campaignClosed && block.timestamp <= deadline, "Campaign is not active anymore");
        _;
    }

    // Modifier to check if the sender is the campaign owner
    modifier isOwner() {
        require(msg.sender == owner, "You are not the owner of this campaign");
        _;
    }

    // Function for making a contribution to the campaign
    function contribute() public payable campaignActive {
        require(msg.value > 0, "Contribution amount must be greater than 0");

        // Add the contribution amount to the raised amount
        raisedAmount += msg.value;

        // Add or update the contributor's contribution amount
        if (contributors[msg.sender] == 0) {
            contributorsArray.push(msg.sender);
        }
        contributors[msg.sender] += msg.value;

        // Emit event for new contribution
        emit NewContribution(msg.sender, msg.value);
    }

    // Function for closing the campaign and transferring the raised amount to the owner
    function closeCampaign() public isOwner {
        require(raisedAmount >= goal, "Campaign goal not reached yet");

        // Transfer the raised amount to the owner
        payable(owner).transfer(raisedAmount);

        // Set campaign as closed
        campaignClosed = true;
    }

    // Function for withdrawing the raised amount by the owner
    function withdrawRaisedAmount() public isOwner {
        require(raisedAmount > 0, "No raised amount to withdraw");

        // Transfer the raised amount to the owner
        payable(owner).transfer(raisedAmount);

        // Emit event for withdrawal
        emit Withdrawal(owner, raisedAmount);

        // Set the raised amount to 0
        raisedAmount = 0;
    }

    // Function for refunding the contributors if the campaign is not successful
    function refund() public {
        require(campaignClosed && block.timestamp > deadline && raisedAmount < goal, "Cannot refund at the moment");

        // Get the contributor's contribution amount
        uint amount = contributors[msg.sender];

        // Check if the contributor has already been refunded
        require(amount > 0, "You have already been refunded");

        // Set the contributor's contribution amount to 0
        contributors[msg.sender] = 0;

        // Transfer the contribution amount to the contributor
        payable(msg.sender).transfer(amount);

        // Emit event for refund
        emit Refund(msg.sender, amount);
    }
}