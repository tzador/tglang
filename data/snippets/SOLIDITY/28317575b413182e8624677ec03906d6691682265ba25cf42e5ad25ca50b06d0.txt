/*
    @Title: Inheritance example in Solidity
    @Description: This contract demonstrates the concept of inheritance in Solidity programming language
*/

// Base contract 'A'
contract A {
    uint public numA;
    event ASet(uint indexed newNumA);
    // Sets the value of numA
    function setA(uint _newNumA) public {
        numA = _newNumA;
        emit ASet(_newNumA);
    }
}

// Contract 'B' inherits from contract 'A'
contract B is A {
    uint public numB;
    event BSet(uint indexed newNumB);
    uint private randomNum;

    // Modifier to check if caller is contract 'B'
    modifier onlyB() {
        require(msg.sender == address(this), "Error: You are not contract B");
        _;
    }

    // Sets the value of numB
    function setB(uint _newNumB) public onlyB {
        numB = _newNumB;
        emit BSet(_newNumB);
    }

    // Generates a random number and sets its value to randomNum
    function generateRandomNumber() public {
        // Accesses the setA function from contract 'A'
        setA(block.timestamp);
        uint _rand = uint(keccak256((abi.encodePacked(numA, numB, block.difficulty, blockhash(block.number - 1)))));
        randomNum = _rand;
    }

    // Gets the current value of randomNum
    function getRandomNum() public view returns(uint) {
        return randomNum;
    }
}

// Contract 'C' inherits from contract 'B'
contract C is B {
    uint public numC;

    // Sets the value of numC
    function setC(uint _newNumC) public {
        numC = _newNumC;
    }

    // Gets the sum of all three numbers: numA, numB, and numC
    function getSum() public view returns(uint) {
        return numA + numB + numC;
    }
}