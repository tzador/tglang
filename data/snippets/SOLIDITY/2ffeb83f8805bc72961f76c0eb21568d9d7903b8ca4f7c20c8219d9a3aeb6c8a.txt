// Contract that defines a voting system
contract Voting {
    // Store the candidates who are running for office
    string[] public candidates;

    // Store the number of votes each candidate receives
    mapping (string => uint256) public voteCount;

    // Event to track when a vote has been cast
    event VoteCast(string candidate);

    // Modifier to check if the caller is a valid candidate
    modifier onlyCandidate(string candidate) {
        bool isValid = false;
        for (uint256 i = 0; i < candidates.length; i++) {
            if (keccak256(bytes(candidates[i])) == keccak256(bytes(candidate))) {
                isValid = true;
            }
        }
        require(isValid, "Invalid candidate");
        _;
    }

    // Function to add new candidates to the election
    function addCandidate(string memory candidate) public {
        candidates.push(candidate);
    }

    // Function to cast a vote for a specific candidate
    function vote(string memory candidate) public onlyCandidate(candidate) {
        voteCount[candidate]++;
        emit VoteCast(candidate);
    }

    // Function to retrieve the winner of the election
    function getWinner() public view returns (string memory) {
        uint256 max = 0;
        string memory winner;
        for (uint256 i = 0; i < candidates.length; i++) {
            if (voteCount[candidates[i]] > max) {
                max = voteCount[candidates[i]];
                winner = candidates[i];
            }
        }
        return winner;
    }
}