pragma solidity ^0.8.0;

// Interface for ERC20 Token
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// Contract that implements the ERC20 Token interface
contract MyToken is IERC20 {
    
    // Variable to hold the total supply of tokens
    uint256 totalTokenSupply;
    
    // Mapping to store the balance of each address
    mapping (address => uint256) balances;
    
    // Mapping to store the approved allowance for each address
    mapping (address => mapping (address => uint256)) allowances;
    
    // Function to get the total supply of tokens
    function totalSupply() external override view returns (uint256) {
        return totalTokenSupply;
    }
    
    // Function to get the balance of a particular address
    function balanceOf(address account) external override view returns (uint256) {
        return balances[account];
    }
    
    // Function to transfer tokens from sender to recipient
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        require(balances[msg.sender] >= amount, "Not enough tokens in sender's account");
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        
        emit Transfer(msg.sender, recipient, amount);
        
        return true;
    }
    
    // Function to get the approved allowance for a spender to spend tokens on behalf of owner
    function allowance(address owner, address spender) external override view returns (uint256) {
        return allowances[owner][spender];
    }
    
    // Function for a spender to request permission to spend tokens on behalf of the owner
    function approve(address spender, uint256 amount) external override returns (bool) {
        require(amount > 0, "Approval amount must be greater than 0");
        allowances[msg.sender][spender] = amount;
        
        emit Approval(msg.sender, spender, amount);
        
        return true;
    }
    
    // Function for a spender to transfer tokens on behalf of the owner
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        require(balances[sender] >= amount, "Not enough tokens in sender's account");
        require(allowances[sender][msg.sender] >= amount, "Spender's allowance not enough");
        
        balances[sender] -= amount;
        balances[recipient] += amount;
        allowances[sender][msg.sender] -= amount;
        
        emit Transfer(sender, recipient, amount);
        
        return true;
        
    }
    
}