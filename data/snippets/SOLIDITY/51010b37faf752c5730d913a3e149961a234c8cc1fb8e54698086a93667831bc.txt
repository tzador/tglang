pragma solidity ^0.8.0; // indicates that the code will only work on solidity version 0.8.0 or higher

/* This is a contract that implements a simple voting system */

contract VotingSystem {

    mapping(address => bool) public voteCasters; // mapping to keep track of who has already cast their vote
    mapping(uint => uint) public voteCount; // mapping to keep track of the number of votes for each option
    address[] public candidates; // array to store the candidates

    // event that will be emitted when a new candidate is added
    event AddCandidate(address indexed candidate);

    // function to add a new candidate to the voting system
    function addCandidate(address candidate) public {
        require(!voteCasters[candidate], "Candidate already exists in the system."); // check if the candidate already exists
        voteCasters[candidate] = true; // add the candidate to the vote casters mapping
        candidates.push(candidate); // add the candidate to the candidates array
        emit AddCandidate(candidate); // emit the AddCandidate event
    }

    // function to cast a vote for a candidate
    function castVote(address candidate) public {
        require(voteCasters[candidate], "Candidate does not exist in the system."); // check if the candidate exists
        require(!voteCasters[msg.sender], "Already casted your vote."); // check if the voter has already cast their vote
        voteCount[uint(candidate)]++; // increment the vote count for the chosen candidate
        voteCasters[msg.sender] = true; // add the voter to the vote casters mapping
    }

    // function to retrieve the vote count for a specific candidate
    function getVoteCount(address candidate) public view returns (uint) {
        require(voteCasters[candidate], "Candidate does not exist in the system."); // check if the candidate exists
        return voteCount[uint(candidate)]; // return the vote count for the chosen candidate
    }

    // function to retrieve the total number of candidates
    function getTotalCandidates() public view returns (uint) {
        return candidates.length; // return the length of the candidates array
    }

    // function to check if a voter has cast their vote
    function hasCastedVote() public view returns (bool) {
        return voteCasters[msg.sender]; // return whether or not the voter has cast their vote
    }
}

/* In this contract, we have implemented a simple voting system where anyone can add candidates and cast their vote for a chosen candidate. 
It also keeps track of who has already cast their vote to ensure fairness in the voting process. */