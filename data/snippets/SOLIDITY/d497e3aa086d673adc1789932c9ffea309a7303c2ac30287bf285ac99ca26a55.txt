pragma solidity >=0.7.0 <0.9.0; /* Version constraint for the Solidity compiler */

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions". It also allows the
 * owner to transfer ownership of the contract to a new address.
 */

contract Ownable {

    address public owner;

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        owner = msg.sender;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner, "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Allows the current owner to transfer control of the contract to a new owner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        owner = newOwner;
    }

    /**
     * @dev Allows the owner to withdraw any ether balance in the contract.
     */
    function withdraw() public onlyOwner {
        payable(owner).transfer(address(this).balance);
    }

    /**
     * @dev Allows the owner to destroy the contract.
     */
    function destroy() public onlyOwner {
        selfdestruct(payable(owner));
    }
}

/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {

    /**
     * @dev Multiplies two numbers, reverts on overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev This function is deprecated, use 'div' instead
     */
    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b);
    }

    /**
     * @dev Divides two numbers, reverts on division by zero. The result is rounded
     * towards zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }

    /**
     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;
        return c;
    }

    /**
     * @dev Adds two numbers, reverts on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this method uses a `revert` opcode (which
     * leaves remaining gas untouched) while Solidity uses an invalid opcode to revert (consuming
     * all remaining gas).
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert` opcode (which leaves
     * remaining gas untouched) while Solidity uses an invalid opcode to revert (consuming all
     * remaining gas).
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * @title ERC20Interface
 * @dev ERC20 token standard interface.
 */
interface ERC20Interface {

    function balanceOf(address _owner) external view returns (uint256);

    function totalSupply() external view returns (uint256);

    function allowance(address _owner, address _spender) external view returns (uint256);

    function transfer(address _to, uint256 _value) external returns (bool);

    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);

    function approve(address _spender, uint256 _value) external returns (bool);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

/**
 * @title ERC20
 * @dev Implementation of ERC20 token standard.
 */
contract ERC20 is ERC20Interface, Ownable {

    using SafeMath for uint256;

    mapping (address => uint256) internal balances;
    mapping (address => mapping (address => uint256)) internal allowed;

    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 internal totalSupplyAmount;

    /**
     * @dev Initializes the contract by setting up name, symbol and decimal number.
     */
    constructor(string memory _name, string memory _symbol, uint8 _decimals) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }

    /**
     * @dev Returns the balance of the specified address.
     * @param _owner The address to query the balance of.
     * @return An uint256 representing the amount owned by the passed address.
     */
    function balanceOf(address _owner) external view override returns (uint256) {
        return balances[_owner];
    }

    /**
     * @dev Returns the total supply amount.
     * @return An uint256 representing the total amount of tokens in existence.
     */
    function totalSupply() external view override returns (uint256) {
        return totalSupplyAmount;
    }

    /**
     * @dev Returns the remaining number of tokens that _spender will be allowed
     * to spent on behalf of owner through transferFrom function.
     *
     * This is zero by default.
     * @param _owner address The address which owns the tokens.
     * @param _spender address The address which will spend the funds.
     * @return An uint256 specifying the remaining amount of tokens allowed to be spent.
     */
    function allowance(address _owner, address _spender) external view override returns (uint256) {
        return allowed[_owner][_spender];
    }

    /**
     * @dev Transfers token for a specified address.
     * @param _to The address to transfer to.
     * @param _value The amount to be transferred.
     * @return Whether the transfer was successful or not.
     */
    function transfer(address _to, uint256 _value) external override returns (bool) {
        require(_to != address(0), "ERC20: transfer to the zero address");

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);

        emit Transfer(msg.sender, _to, _value);

        return true;
    }

    /**
     * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount.
     * If this function is called again it overwrites the current allowance with _value.
     * @param _spender The address to be authorized to spend tokens from your account.
     * @param _value The max amount they can spend.
     * @return Whether the approval was successful or not.
     */
    function approve(address _spender, uint256 _value) external override returns (bool) {
        allowed[msg.sender][_spender] = _value;

        emit Approval(msg.sender, _spender, _value);

        return true;
    }

    /**
     * @dev Transfer tokens from one address to another.
     * @param _from The address which can spend tokens.
     * @param _to The address that will receive the tokens.
     * @param _value The amount of tokens to be transferred.
     * @return Whether the transfer was successful or not.
     */
    function transferFrom(address _from, address _to, uint256 _value) external override returns (bool) {
        require(_to != address(0), "ERC20: transfer to the zero address");

        uint256 allowanceAmount = allowed[_from][msg.sender];
        require(allowanceAmount >= _value, "ERC20: insufficient allowance");

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowanceAmount.sub(_value);

        emit Transfer(_from, _to, _value);

        return true;
    }

    /**
     * @dev Increase the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined).
     * @param _spender The address which will spend the funds.
     * @param _addedValue The added amount of tokens that the spender can spend from the owner.
     * @return Whether the operation was successful or not.
     */
    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool) {
        require(_spender != address(0), "ERC20: approve to the zero address");

        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);

        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);

        return true;
    }

    /**
     * @dev Decrease the amount of tokens that an owner allowed to a spender.
     * approve should be called when allowed[_spender] == 0. To decrement
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined).
     * @param _spender The address which will spend the funds.
     * @param _subtractedValue The subtracted amount of tokens that the spender can spend from the owner.
     * @return Whether the operation was successful or not.
     */
    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool) {
        require(_spender != address(0), "ERC20: approve to the zero address");

        uint256 allowanceAmount = allowed[msg.sender][_spender];
        require(allowanceAmount >= _subtractedValue, "ERC20: insufficient allowance");

        allowed[msg.sender][_spender] = allowanceAmount.sub(_subtractedValue);

        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);

        return true;
    }

    /**
     * @dev Mint new tokens and adds it to the total supply.
     * Only owner is allowed to call this function.
     * @param _recipient The address which will receive newly minted tokens.
     * @param _amount The amount of tokens to mint.
     * @return Whether the operation was successful or not.
     */
    function mint(address _recipient, uint256 _amount) external onlyOwner returns (bool) {
        require(_recipient != address(0), "ERC20: mint to the zero address");

        totalSupplyAmount = totalSupplyAmount.add(_amount);
        balances[_recipient] = balances[_recipient].add(_amount);

        emit Transfer(address(0), _recipient, _amount);

        return true;
    }

    /**
     * @dev Burn the specific amount from sender address.
     * Only owner is allowed to call this function.
     * @param _amount The amount of tokens to be burned.
     * @return Whether the operation was successful or not.
     */
    function burn(uint256 _amount) external onlyOwner returns (bool) {
        require(_amount <= balances[msg.sender], "ERC20: amount exceeds balance");

        totalSupplyAmount = totalSupplyAmount.sub(_amount);
        balances[msg.sender] = balances[msg.sender].sub(_amount);

        emit Transfer(msg.sender, address(0), _amount);

        return true;
    }

    /**
     * @dev Get function signatures for ERC20 ABI compatibility.
     */
    function _getFunctionsSignature() external pure returns (bytes4, bytes4, bytes4, bytes4) {
        return (
        this.transfer.selector,
        this.approve.selector,
        this.transferFrom.selector,
        this.increaseAllowance.selector
        );
    }
}