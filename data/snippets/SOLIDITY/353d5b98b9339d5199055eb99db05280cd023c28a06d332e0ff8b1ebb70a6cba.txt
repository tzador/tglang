//This is a contract written in Solidity
pragma solidity ^0.8.0;

//The contract contains multiple functions, modifiers and events
contract MyContract {
  //State variables
  uint public myNumber;
  string public myString;
  address public owner;
  
  //Events
  event NumberUpdated(uint number);
  
  //Constructor function
  constructor() {
    myNumber = 100;
    myString = "Hello World";
    owner = msg.sender;
  }
  
  //A function that updates the state variable 'myNumber'
  function updateNumber(uint _number) public {
    require(msg.sender == owner, "Only the contract owner can update the number");
    myNumber = _number;
    
    //Emitting the event NumberUpdated
    emit NumberUpdated(myNumber);
  }
  
  //A function that returns the state variable 'myString'
  function getString() public view returns (string memory) {
    require(myNumber >= 10, "MyNumber must be greater than or equal to 10");
    return myString;
  }
  
  //A modifier that restricts access to a function only to the contract owner
  modifier onlyOwner() {
    require(msg.sender == owner, "Only the contract owner can access this function");
    _;
  }
  
  //A function that can only be called by the contract owner, using the 'onlyOwner' modifier
  function changeString(string memory _newString) public onlyOwner {
    myString = _newString;
  }
  
  //A fallback function that is triggered when the contract receives Ether without any specific function call
  fallback() external payable {
    //Do something with the received Ether
  }
}