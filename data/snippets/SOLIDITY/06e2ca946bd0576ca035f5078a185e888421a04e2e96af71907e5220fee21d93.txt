pragma solidity ^0.8.0;

/* 
 * @dev Contract to store and transfer tokens between addresses.
 * Implements ERC-20 standard methods.
*/

interface ERC20Token {
    function totalSupply() external view returns (uint256);
    function balanceOf(address _owner) external view returns (uint256 balance);
    function allowance(address _owner, address _spender) external view returns (uint256 remaining);
    function transfer(address _to, uint256 _value) external returns (bool success);
    function approve(address _spender, uint256 _value) external returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) external returns  (bool success);
}

contract MyToken is ERC20Token {
    
    // state variables
    mapping (address => uint256) public balances;
    mapping (address => mapping (address => uint256)) public allowed;
    
    uint256 private totalTokens;
    string private tokenName = "MyToken";
    string private tokenSymbol = "MTK";
    uint8 private constant decimals = 18;
    
    // events
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    
    // constructor
    constructor(uint256 _initialSupply) {
        totalTokens = _initialSupply;
        balances[msg.sender] = _initialSupply;
    }
    
    // ERC-20 standard methods
    function totalSupply() external view override returns (uint256) {
        return totalTokens;
    }
    
    function balanceOf(address _owner) external view override returns (uint256 balance) {
        return balances[_owner];
    }
    
    function allowance(address _owner, address _spender) external view override returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
    
    function transfer(address _to, uint256 _value) external override returns (bool success) {
        require(balances[msg.sender] >= _value);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    
    function approve(address _spender, uint256 _value) external override returns (bool success) {
        require(_value == 0 || allowed[msg.sender][_spender] == 0);
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) external override returns (bool success) {
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }
    
    // custom method to mint additional tokens
    function mintTokens(uint256 _amountToMint) external {
        require(msg.sender == owner); // only contract owner can mint tokens
        totalTokens += _amountToMint;
        balances[msg.sender] += _amountToMint;
        emit Mint(_amountToMint, _amountToMint);
    }
    
    // custom method to burn tokens
    function burnTokens(uint256 _amountToBurn) external {
        require(msg.sender == owner); // only contract owner can burn tokens
        require(balances[msg.sender] >= _amountToBurn);
        totalTokens -= _amountToBurn;
        balances[msg.sender] -= _amountToBurn;
        emit Burn(msg.sender, _amountToBurn);
    }
}