// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

// Interface for external contract
interface Contract {
    function getValue(address sender) external view returns (uint256);
    function setValue(address sender, uint256 value) external;
}

// Contract implementing Contract interface
contract MyContract is Contract {
    
    // Storage variables
    mapping (address => uint256) private values;
    
    // Modifier that only allows the owner to call functions
    modifier onlyOwner () {
        require(msg.sender == owner);
        _;
    }
    
    // Contract owner
    address public owner;

    // Event emitted when value is set
    event ValueSet(address sender, uint256 value);
    
    // Constructor to set owner
    constructor() {
        owner = msg.sender;
    }
    
    // External function to get value from storage
    function getValue(address sender) public view override returns (uint256) {
        return values[sender];
    }
    
    // External function to set value in storage, onlyOwner modifier ensures only owner can call this function
    function setValue(address sender, uint256 value) external override onlyOwner {
        values[sender] = value;
        emit ValueSet(sender, value);
    }
    
}

// Inherit from MyContract
contract MyDerivedContract is MyContract {
    
    // Storage variables
    uint256 private counter;
    
    // Function to increment counter and call set value function from MyContract
    function incrementCounter() external {
        counter++;
        setValue(msg.sender, counter);
    }
}