/**
 * @title MyToken
 * @dev ERC20 Token example, using SafeMath library for safe mathematical operations
 */
 
 contract MyToken {
    using SafeMath for uint256; // import SafeMath library
    string public constant name = "MyToken"; // declare string variable 'name' with value "MyToken"
    string public constant symbol = "MTK"; // declare string variable 'symbol' with value "MTK"
    uint8 public constant decimals = 18; // declare unsigned integer variable 'decimals' with value 18
    uint256 public totalSupply; // declare unsigned integer variable 'totalSupply'
    mapping (address => uint256) public balanceOf; // declare mapping variable 'balanceOf' that maps address to unsigned integer
    
    event Transfer(address indexed from, address indexed to, uint256 value); // declare event 'Transfer' that takes in indexed addresses and unsigned integer value
    
    /**
     * @dev Constructor function
     * Initializes contract with initial supply tokens to the creator of the contract
     */
    constructor(uint256 initialSupply) public {
        totalSupply = initialSupply; // set totalSupply to initialSupply
        balanceOf[msg.sender] = initialSupply; // set balanceOf of creator address to initialSupply
    }
    
    /**
     * @dev Transfer function
     * Transfers tokens from one address to another
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(balanceOf[msg.sender] >= _value); // check if sender has enough balance
        require(balanceOf[_to] + _value >= balanceOf[_to]); // prevent overflow
        
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); // subtract value from sender's balance
        balanceOf[_to] = balanceOf[_to].add(_value); // add value to receiver's balance
        emit Transfer(msg.sender, _to, _value); // emit Transfer event
        
        return true;
    }
    
    /**
     * @dev Approve function
     * Approves a certain address to spend a certain amount of tokens
     */
    function approve(address _spender, uint256 _value) public returns (bool) {
        require(_spender != address(0)); // prevent approval to zero address
        
        approved[msg.sender][_spender] = _value; // set approved value for spender
        emit Approval(msg.sender, _spender, _value); // emit Approval event
        
        return true;
    }
    
    /**
     * @dev TransferFrom function
     * Transfers tokens from one address to another, with allowance
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(balanceOf[_from] >= _value); // check if sender has enough balance
        require(allowed[_from][msg.sender] >= _value); // check if sender is allowed to spend
        
        balanceOf[_from] = balanceOf[_from].sub(_value); // subtract value from sender's balance
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // subtract value from sender's allowed balance
        balanceOf[_to] = balanceOf[_to].add(_value); // add value to receiver's balance
        emit Transfer(_from, _to, _value); // emit Transfer event
        
        return true;
    }
    
    /**
     * @dev Increase Approval function
     * Increases the allowance for a certain address to spend a certain amount of tokens
     */
    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {
        require(_spender != address(0)); // prevent approval to zero address
        
        approved[msg.sender][_spender] = approved[msg.sender][_spender].add(_addedValue); // add value to spender's approved balance
        emit Approval(msg.sender, _spender, approved[msg.sender][_spender]); // emit Approval event
        
        return true;
    }
    
    /**
     * @dev Decrease Approval function
     * Decreases the allowance for a certain address to spend a certain amount of tokens
     */
    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {
        require(_spender != address(0)); // prevent approval to zero address
        require(approved[msg.sender][_spender] >= _subtractedValue); // prevent decreasing below zero
        
        approved[msg.sender][_spender] = approved[msg.sender][_spender].sub(_subtractedValue); // subtract value from spender's approved balance
        emit Approval(msg.sender, _spender, approved[msg.sender][_spender]); // emit Approval event
        
        return true;
    }
 }