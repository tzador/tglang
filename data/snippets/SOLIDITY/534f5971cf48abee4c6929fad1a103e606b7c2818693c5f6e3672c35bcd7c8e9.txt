pragma solidity ^0.8.0;

// This is a contract that implements a simple decentralized voting system using the Ethereum smart contract language Solidity

contract votingSystem {

    //create a mapping of the candidate names to their vote count
    mapping (string => uint) voteCount;

    //create a public array of all the candidates
    string[] public candidates;

    //create an event to notify when a vote is cast
    event VoteCast(address voter, string candidate);

    //create a constructor function to initialize the candidates array
    constructor (string[] memory _candidates) {
        candidates = _candidates;
    }

    //create a function to cast a vote for a specific candidate
    function castVote(string memory candidate) public {
        //check if the candidate is valid
        require(validCandidate(candidate), "Invalid candidate selected.");

        //increment the vote count for the selected candidate
        voteCount[candidate]++;

        //emit the VoteCast event
        emit VoteCast(msg.sender, candidate);
    }

    //create a function to check if a candidate is valid
    function validCandidate (string memory candidate) public view returns (bool) {
        //loop through the candidates array to check if the candidate exists
        for (uint i = 0; i < candidates.length; i++) {
            if (keccak256(bytes(candidates[i])) == keccak256(bytes(candidate))) {
                //return true if the candidate exists
                return true;
            }
        }
        
        //return false if the candidate does not exist
        return false;
    }

    //create a function to get the total number of votes for a candidate
    function getVoteCount(string memory candidate) public view returns (uint) {
        return voteCount[candidate];
    }
}