/**

 * @title ERC20Interface
 * @dev Interface for the ERC20 standard
 */
interface ERC20Interface {
    function totalSupply() external view returns (uint);
    function balanceOf(address tokenOwner) external view returns (uint balance);
    function allowance(address tokenOwner, address spender) external view returns (uint remaining);
    function transfer(address to, uint tokens) external returns (bool success);
    function approve(address spender, uint tokens) external returns (bool success);
    function transferFrom(address from, address to, uint tokens) external returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

/**

 * @title ApproveAndCallFallBack
 * @dev Interface for receiving approval and forwarding it to a different contract
 */
interface ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes calldata data) external;
}

/**

 * @title SafeMath
 * @dev Library for mathematical operations with safety checks
 */
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    /**
    * @dev Integer division of two numbers, truncating the quotient.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

/**

 * @title Owned
 * @dev Contract owner can only be changed by current owner
 */
contract Owned {
    address public owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() public {
        owner = msg.sender;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    /**
     * @dev Allows the current owner to transfer control of the contract to a new owner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

/**

 * @title ERC20Token
 * @dev Implementation of the ERC20Interface
 */
contract ERC20Token is ERC20Interface, Owned {
    using SafeMath for uint;

    string public name;
    string public symbol;
    uint8 public decimals;
    uint _totalSupply;

    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;

    /**
     * @dev Constructor function to initialize the initial supply of tokens and set the token information.
     * @param _initialSupply The initial supply of tokens.
     * @param _tokenName The name of the token.
     * @param _tokenSymbol The symbol of the token.
     * @param _decimalUnits The decimal units of the token.
     */
    constructor(uint _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimalUnits) public {
        _totalSupply = _initialSupply.mul(10 ** uint(_decimalUnits));
        name = _tokenName;
        symbol = _tokenSymbol;
        decimals = _decimalUnits;
        balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    /**
     * @dev Returns the total supply of tokens.
     */
    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }

    /**
     * @dev Gets the balance of the specified address.
     * @param tokenOwner The address to query the balance of.
     * @return An uint representing the amount owned by the passed address.
     */
    function balanceOf(address tokenOwner) public view returns (uint) {
        return balances[tokenOwner];
    }

    /**
     * @dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of the owner through transferFrom.
     * This is zero by default.
     * This value changes when approve or transferFrom are called.
     * @param tokenOwner Address of the token owner.
     * @param spender Address of the spender.
     * @return The remaining number of tokens allowed to be spent.
     */
    function allowance(address tokenOwner, address spender) public view returns (uint) {
        return allowed[tokenOwner][spender];
    }

    /**
     * @dev Transfers tokens from one address to another at a specified amount.
     * @param to The address of the recipient.
     * @param tokens The amount of tokens to be transferred.
     * @return A bool indicating if the transfer was successful.
     */
    function transfer(address to, uint tokens) public returns (bool) {
        require(to != address(0));
        require(tokens <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    /**
     * @dev Approves a specified amount of tokens to be transferred by a spender.
     * @param spender The address of the spender.
     * @param tokens The amount of tokens to be transferred.
     * @return A bool indicating if the approval was successful.
     */
    function approve(address spender, uint tokens) public returns (bool) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    /**
     * @dev Transfer tokens from one address to another at a specified amount
     * and calling the receiveApproval function from the spender contract.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokens The amount of tokens to transfer.
     * @param data The extra data to be passed to the receiving contract.
     * @return A bool indicating if the transfer was successful.
     */
    function transferFrom(address from, address to, uint tokens, bytes data) public returns (bool) {
        require(to != address(0));
        require(tokens <= balances[from]);
        require(tokens <= allowed[from][msg.sender]);

        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);

        if (isContract(to)) {
            tokenFallback(from, tokens, data);
        }
        return true;
    }

    /**
     * @dev Transfer tokens from one address to another at a specified amount
     * and calling the receiveApproval function from the spender contract.
     * @param from The address to transfer from.
     * @param to The address to transfer to.
     * @param tokens The amount of tokens to transfer.
     * @param data The extra data to be passed to the receiving contract.
     * @return A bool indicating if the transfer was successful.
     */
    function transferFrom(address from, address to, uint tokens) public returns (bool) {
        require(to != address(0));
        require(tokens <= balances[from]);
        require(tokens <= allowed[from][msg.sender]);

        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);

        if (isContract(to)) {
            tokenFallback(from, tokens, "");
        }
        return true;
    }

    /**
     * @dev Approves and then calls the receiveApproval function of the recipient.
     * @param spender The address of the spender.
     * @param tokens The amount of tokens to be transferred.
     * @param data The extra data to be passed to the receiving contract.
     * @return A bool indicating if the approval was successful.
     */
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
        return true;
    }

    /**
     * @dev Approves and then calls the receiveApproval function of the recipient.
     * @param spender The address of the spender.
     * @param tokens The amount of tokens to be transferred.
     * @return A bool indicating if the approval was successful.
     */
    function approveAndCall(address spender, uint tokens) public returns (bool) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), "");
        return true;
    }

    /**
     * @dev Fallback function allowing to receive ether.
     * Reverts if ether is sent to this contract accidentally.
     */
    function () external payable {
        revert();
    }

    /**
     * @dev Function to transfer any tokens held in the contract to the contract owner.
     * @param token The token to transfer.
     * @param tokens The amount of tokens to transfer.
     * @return A bool indicating if the transfer was successful.
     */
    function transferAnyERC20Token(address token, uint tokens) public onlyOwner returns (bool) {
        return ERC20Interface(token).transfer(owner, tokens);
    }

    /**
     * @dev Private function to check if the given address is a contract.
     * @param _address The address to check.
     * @return A bool indicating if the address is a contract.
     */
    function isContract(address _address) private constant returns (bool) {
        uint codeLength;
        assembly {
            codeLength := extcodesize(_address)
        }
        return (codeLength > 0);
    }

    /**
     * @dev Private function to call the token's receive approval function.
     * @param _from The address to transfer from.
     * @param _tokens The amount of tokens to transfer.
     * @param _data The extra data to be passed to the receiving contract.
     */
    function tokenFallback(address _from, uint _tokens, bytes _data) private {
        if (isContract(_from)) {
            ApproveAndCallFallBack(_from).receiveApproval(msg.sender, _tokens, address(this), _data);
        }
    }
}