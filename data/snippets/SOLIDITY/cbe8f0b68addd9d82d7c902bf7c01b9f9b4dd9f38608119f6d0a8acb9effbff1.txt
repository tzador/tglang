//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract MyContract {

  address public owner;
  // This is a state variable that stores the address of the owner of the contract

  constructor() {
    owner = msg.sender;
    // On deployment of the contract, set the owner variable to the address of the account that deployed the contract
  }

  /// @dev Modifier that only allows the owner of the contract to execute the function.
  modifier onlyOwner {
    require(msg.sender == owner, "Only the contract owner can call this function");
    _; // Continue execution
  }

  /// @dev Function that can only be called by the contract owner and requires a specific amount of ether to be sent.
  /// @param amount The amount of ether to be sent
  function sendEther(uint256 amount) external payable onlyOwner {
    require(msg.value == amount, "Incorrect amount of ether sent");
    // Ensure that the amount sent is equal to the value specified in the function call
    // Code to execute if requirements are met
  }

  /// @dev Function that can be called by any address and requires a specific input string to be provided.
  /// @param input The input string to be checked
  function checkString(string memory input) external view returns (bool) {
    require(keccak256(bytes(input)) == keccak256(bytes("Hello World")), "Incorrect string provided");
    // Check if the provided input string is equal to "Hello World"
    // Return a boolean value
    return true;
  }
}