pragma solidity >=0.5.0 <0.7.0;

// This is a comment that explains the following contract
// It is the foundation for our decentralized voting system
contract Voting {
    // This is a state variable that keeps track of the number of candidates
    uint public numCandidates;

    // This is a mapping that links candidates to their vote count
    mapping (string => uint) public candidateVotes;

    // This is an event that is triggered when a vote is casted
    event VoteCasted(address voter, string candidate);

    // This is a modifier that restricts certain functions to only voters
    modifier onlyVoters() {
        require(msg.sender == voter, "Caller is not a voter");
        _;
    }

    // This is a struct that defines the properties of a voter
    struct Voter {
        bool hasVoted;
        string vote;
    }

    // This is a mapping that links voter addresses to their Voter struct
    mapping (address => Voter) public voters;

    // This is a function that adds a new candidate to the voting system
    function addCandidate(string memory candidate) public {
        // Requires the caller to be the owner of the contract
        require(msg.sender == owner, "Caller is not the owner");
        // Requires the candidate to not already exist in the system
        require(candidateVotes[candidate] == 0, "Candidate already exists");
        // Adds the candidate to the mapping with an initial vote count of 0
        candidateVotes[candidate] = 0;
        // Increases the number of candidates
        numCandidates++;
    }

    // This is a function that allows voters to cast a vote
    function castVote(string memory candidate) public onlyVoters {
        // Requires the candidate to exist in the system
        require(candidateVotes[candidate] != 0, "Candidate does not exist");
        // Requires the voter to have not already voted
        require(voters[msg.sender].hasVoted == false, "Voter has already casted vote");
        // Sets the voter's vote to the chosen candidate
        voters[msg.sender].vote = candidate;
        // Increases the candidate's vote count by 1
        candidateVotes[candidate]++;
        // Sets the voter's hasVoted status to true
        voters[msg.sender].hasVoted = true;
        // Triggers the VoteCasted event
        emit VoteCasted(msg.sender, candidate);
    }
}