// Function to withdraw funds from a contract
function withdrawFunds() public {
    require(msg.sender == owner); // Only contract owner can withdraw funds
    for(uint i = 0; i < balances.length; i++) { // Loop through balances array
        balances[i].recipient.transfer(balances[i].amount); // Transfer funds to recipient address
        balances[i].amount = 0; // Set balance to 0
    }
}

// Struct to store recipient and amount
struct Balance {
    address recipient;
    uint amount;
}

// Array to store all balances
Balance[] balances;

// Function to add a new balance to the array
function addBalance(address _recipient, uint _amount) public {
    require(msg.sender == owner); // Only contract owner can add balances
    balances.push(Balance(_recipient, _amount)); // Push new balance to array
}

// Function to get total balance of the contract
function getTotalBalance() public view returns (uint) {
    uint totalBalance = 0; // Set initial total balance to 0
    for(uint i = 0; i < balances.length; i++) { // Loop through balances array
        totalBalance += balances[i].amount; // Add each balance amount to total balance
    }
    return totalBalance; // Return total balance
}

// Function to transfer specific amount from contract to a recipient
function transferFromContract(address _recipient, uint _amount) public {
    require(msg.sender == owner); // Only contract owner can transfer funds
    require(_amount <= getTotalBalance()); // Amount cannot exceed total balance of contract
    _recipient.transfer(_amount); // Transfer funds to recipient
}