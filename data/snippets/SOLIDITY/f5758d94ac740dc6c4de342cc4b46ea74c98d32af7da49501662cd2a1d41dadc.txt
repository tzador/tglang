pragma solidity ^0.4.22;

contract Voting {
    //Struct for candidate
    struct Candidate{
        uint id;
        string name;
        uint numOfVotes;
    }
    //Store the address that can vote
    mapping(address => bool) public voters;
    //Keep track of total votes
    uint public totalVotes;
    //Store and update candidates
    mapping(uint => Candidate) public candidates;
    
    //Add candidates and also update total candidates
    function addCandidate(string _name) public{
        //Prevent from adding empty name
        require(bytes(_name).length > 0);
        //Only admin can add candidates
        require(voters[msg.sender] == true);
        
        //New candidate with passed in name
        candidates[totalCandidates] = Candidate(totalCandidates, _name, 0);
        //Increase total candidates
        totalCandidates ++;
    }
    
    //Allow voters to cast their vote
    function vote(uint _candidateId) public{
        //Check if voter has already voted
        require(voters[msg.sender] == false);
        //Check if candidate is valid
        require(_candidateId > 0 && _candidateId < totalCandidates);
        
        //Update number of votes for candidate
        candidates[_candidateId].numOfVotes ++;
        //Mark voter as voted
        voters[msg.sender] = true;
        //Increase total votes
        totalVotes ++;
    }
    
    //Get winner of the election
    function getWinner() public view returns(string){
        uint maxVotes = 0;
        string memory winnerName;
        
        //Loop through candidates to find winner
        for(uint i = 0; i < totalCandidates; i++){
            if(candidates[i].numOfVotes > maxVotes){
                maxVotes = candidates[i].numOfVotes;
                winnerName = candidates[i].name;
            }
        }
        
        return winnerName;
    }
}