/**
* @title ERC721Token 
* @dev A standard interface for non-fungible tokens.
*/
pragma solidity ^0.4.24;

/**
* @dev ERC721 token non-fungible interface
*/
contract ERC721Basic {
    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);
    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);

    // Functions
    function balanceOf(address _owner) public view returns (uint256 _balance);
    function ownerOf(uint256 _tokenId) public view returns (address _owner);
    function exists(uint256 _tokenId) public view returns (bool _exists);
    function approve(address _to, uint256 _tokenId) public;
    function getApproved(uint256 _tokenId) public view returns (address _operator);
    function transferFrom(address _from, address _to, uint256 _tokenId) public;
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;
}

/**
* @dev ERC721 token non-fungible interface
*/
contract ERC721Token is ERC721Basic {
    // Variables
    mapping (uint256 => address) public tokenOwner;
    mapping (uint256 => address) public tokenApprovals;
    mapping (address => uint256) public ownedTokensCount;

    // Functions
    function balanceOf(address _owner) public view returns (uint256 _balance) {
        return ownedTokensCount[_owner];
    }

    function ownerOf(uint256 _tokenId) public view returns (address _owner) {
        return tokenOwner[_tokenId];
    }

    function exists(uint256 _tokenId) public view returns (bool _exists) {
        return tokenOwner[_tokenId] != address(0);
    }

    function approve(address _to, uint256 _tokenId) public {
        require(msg.sender == ownerOf(_tokenId));
        tokenApprovals[_tokenId] = _to;
        emit Approval(msg.sender, _to, _tokenId);
    }

    function getApproved(uint256 _tokenId) public view returns (address _operator) {
        require(exists(_tokenId));
        return tokenApprovals[_tokenId];
    }

    function transferFrom(address _from, address _to, uint256 _tokenId) public {
        require(getApproved(_tokenId) == msg.sender || msg.sender == ownerOf(_tokenId));
        _transfer(_from, _to, _tokenId);
    }

    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public {
        safeTransferFrom(_from, _to, _tokenId, "");
    }

    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public {
        transferFrom(_from, _to, _tokenId);
        if (isContract(_to)) {
            bytes4 result = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);
            require(result == ERC721_RECEIVED);
        }
    }

    function _transfer(address _from, address _to, uint256 _tokenId) internal {
        require(ownerOf(_tokenId) == _from);
        require(_to != address(0));

        // Change token ownership
        tokenOwner[_tokenId] = _to;
        ownedTokensCount[_from] = ownedTokensCount[_from] - 1;
        ownedTokensCount[_to] = ownedTokensCount[_to] + 1;
        emit Transfer(_from, _to, _tokenId);
    }

    function isContract(address _addr) internal view returns (bool _isContract) {
        uint256 size;
        // solium-disable-next-line security/no-inline-assembly
        assembly { size := extcodesize(_addr) }
        return size > 0;
    }
}

/**
* @dev ERC721 receiver interface
*/
contract ERC721Receiver {
    // Constants
    bytes4 constant ERC721_RECEIVED = 0x150b7a02;

    /**
    * @dev Function called when transfering tokens.
    * @param _from The address which previously owned the token.
    * @param _tokenId The ID of the token being transfered.
    * @param _data Additional data with no specified format.
    * @return Returns a bytes4 magic value if the transfer is successful.
    */
    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns (bytes4);
}