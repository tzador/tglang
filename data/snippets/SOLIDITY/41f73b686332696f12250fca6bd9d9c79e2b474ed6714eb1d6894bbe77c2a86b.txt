// Solidify smart contract to store and transfer tokens
pragma solidity ^0.8.0;

// Define contract named 'Token'
contract Token {
    // Define state variables
    string private _name; // Token name
    string private _symbol; // Token symbol
    uint256 private _totalSupply; // Total supply of tokens

    // Define mapping for token balances
    mapping(address => uint256) private _balances;

    // Define mapping for token allowances
    mapping(address => mapping(address => uint256)) private _allowances;

    // Define constructor to initialize token details and set total supply
    constructor(string memory name_, string memory symbol_, uint256 totalSupply_) {
        _name = name_;
        _symbol = symbol_;
        _totalSupply = totalSupply_;

        // Assign total supply to contract deployer's balance
        _balances[msg.sender] = totalSupply_;
    }

    // Define functions to retrieve token details
    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    // Define function for transferring tokens
    function transfer(address recipient, uint256 amount) public returns (bool) {
        // Check if sender's balance is enough to transfer
        require(_balances[msg.sender] >= amount, "Insufficient balance");

        // Subtract transferred amount from sender's balance
        _balances[msg.sender] -= amount;

        // Add transferred amount to recipient's balance
        _balances[recipient] += amount;

        // Emit Transfer event
        emit Transfer(msg.sender, recipient, amount);

        // Return success
        return true;
    }

    // Define function for approving token allowance
    function approve(address spender, uint256 amount) public returns (bool) {
        // Set allowance for spender on behalf of sender
        _allowances[msg.sender][spender] = amount;

        // Emit Approval event
        emit Approval(msg.sender, spender, amount);

        // Return success
        return true;
    }

    // Define function for transferring tokens from one account to another using allowance
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        // Check if sender has enough allowance from owner to transfer
        require(_allowances[sender][msg.sender] >= amount, "Insufficient allowance");

        // Check if sender's balance is enough to transfer
        require(_balances[sender] >= amount, "Insufficient balance");

        // Subtract transferred amount from sender's balance
        _balances[sender] -= amount;

        // Add transferred amount to recipient's balance
        _balances[recipient] += amount;

        // Subtract approved allowance from sender
        _allowances[sender][msg.sender] -= amount;

        // Emit Transfer event
        emit Transfer(sender, recipient, amount);

        // Return success
        return true;
    }

    // Define event for token transfers
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Define event for token allowance approval
    event Approval(address indexed owner, address indexed spender, uint256 value);
}