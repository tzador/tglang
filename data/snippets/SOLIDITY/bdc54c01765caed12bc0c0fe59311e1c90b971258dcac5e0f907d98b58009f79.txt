pragma solidity ^0.5.0; //specifies the version of Solidity

contract MyContract { //declares the contract
  uint public myVariable; //declares a public variable of type uint (unsigned integer)
  
  event NewNumber(uint); //declares an event that will be emitted when a new number is set
  
  function setNumber(uint _newNumber) public { //declares a function to set a new number
    require(_newNumber > myVariable, "New number must be larger than existing number."); //adds a requirement for the new number to be larger than the existing number
    myVariable = _newNumber; //sets the new number as the value of myVariable
    emit NewNumber(myVariable); //emits the NewNumber event with the new value
  }
  
  function getNumber() public view returns (uint) { //declares a function to get the current number
    return myVariable; //returns the value of myVariable
  }
  
  function addNumbers(uint _num1, uint _num2) public pure returns (uint) { //declares a function to add two numbers, marked as pure as it does not read or modify state variables
    return _num1 + _num2; //returns the sum of the two numbers
  }
  
  function checkEven(uint _number) public pure returns (bool) { //declares a function to check if a number is even, marked as pure
    if (_number % 2 == 0) { //checks if the number is even
      return true; //returns true if so
    } else {
      return false; //returns false if not
    }
  }
  
  //constructor function
  constructor(uint _initialNumber) public { //declares the constructor function with a parameter for initial number
    myVariable = _initialNumber; //sets the initial number as the value of myVariable when the contract is initialized
  }
}