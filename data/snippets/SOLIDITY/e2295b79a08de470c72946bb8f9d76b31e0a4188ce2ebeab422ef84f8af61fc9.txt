pragma solidity ^0.8.0;

// This contract implements a basic token exchange
// with functionality for buying and selling tokens
// using the Solidity programming language.

contract TokenExchange {
    
    // The ERC-20 token being traded
    address token;
    
    // Address of the token seller
    address seller;
    
    // Address of the token buyer
    address buyer;
    
    // Price of the token in ETH
    uint256 price;
    
    // Constructor function
    constructor(address _token, address _seller, uint256 _price) {
        token = _token;
        seller = _seller;
        price = _price;
    }
    
    // Function for buying tokens
    function buyTokens() public payable {
        // Check if the buyer has sent the correct amount of ETH
        require(msg.value == price, "Incorrect ETH amount sent.");
        
        // Transfer the tokens from the seller to the buyer
        IERC20(token).transferFrom(seller, buyer, 1);
        
        // Transfer the ETH from the buyer to the seller
        payable(seller).transfer(msg.value);
    }
    
    // Function for selling tokens
    function sellTokens(uint256 amount) public {
        // Check if the seller has enough tokens to sell
        require(IERC20(token).balanceOf(seller) >= amount, "Insufficient token balance.");
        
        // Transfer the tokens from the seller to the contract
        IERC20(token).transferFrom(seller, address(this), amount);
        
        // Transfer the ETH from the contract to the seller
        payable(seller).transfer(amount * price);
    }
    
    // Function for getting the current token price
    function getPrice() public view returns (uint256) {
        return price;
    }
    
    // Function for updating the token price by the seller
    function updatePrice(uint256 newPrice) public {
        // Check if only the seller can update the price
        require(msg.sender == seller, "Only the seller can update the price.");
        
        // Set the new price
        price = newPrice;
    }
}