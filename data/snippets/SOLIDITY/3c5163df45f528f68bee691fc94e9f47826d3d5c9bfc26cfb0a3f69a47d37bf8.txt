pragma solidity ^0.8.6; // version declaration
// contract definition
contract Farm {
    
    // state variables
    uint256 public totalAnimals; // total number of animals in the farm
    address public owner; // owner of the farm
    
    // events
    event AnimalAdded(
        uint256 indexed id, // unique ID for the added animal
        string name, // name of the animal
        uint8 age, // age of the animal in years
        string breed // breed of the animal
    );
    
    // modifiers
    modifier onlyOwner {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }
    
    // constructor
    constructor(uint256 _initialAnimals) {
        totalAnimals = _initialAnimals;
        owner = msg.sender;
    }
    
    // functions
    // adds a new animal to the farm
    function addAnimal(string memory _name, uint8 _age, string memory _breed) public onlyOwner {
        // increment the total number of animals
        totalAnimals++;
        
        // emit an AnimalAdded event
        emit AnimalAdded(totalAnimals, _name, _age, _breed);
    }
    
    // updates the details of an existing animal
    function updateAnimal(uint256 _id, string memory _name, uint8 _age, string memory _breed) public onlyOwner {
        // check if the ID is valid
        require(_id <= totalAnimals, "Invalid animal ID");
        
        // emit an AnimalAdded event
        emit AnimalAdded(_id, _name, _age, _breed);
    }
}