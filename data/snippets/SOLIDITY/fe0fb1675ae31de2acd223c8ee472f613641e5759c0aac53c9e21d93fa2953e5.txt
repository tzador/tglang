pragma solidity ^0.8.0;

// A contract with complex logic
contract ComplexLogic {

    // State variables
    address public owner;
    uint256 public totalValue;

    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Constructor function
    constructor() {
        owner = msg.sender;
    }

    // Modifier to check if caller is the owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    // Function to add value to contract's totalValue
    function add(uint256 _value) external onlyOwner() {
        totalValue += _value;
        emit Transfer(msg.sender, address(this), _value);
    }

    // Function to subtract value from contract's totalValue
    function subtract(uint256 _value) external onlyOwner() {
        totalValue -= _value;
        emit Transfer(address(this), msg.sender, _value);
    }

    // Function to transfer value from contract to specified address
    function transfer(address _to, uint256 _value) external onlyOwner() {
        require(_to != address(this), "Cannot transfer to this contract");
        require(totalValue >= _value, "Insufficient balance");
        totalValue -= _value;
        emit Transfer(address(this), _to, _value);
    }
}