pragma solidity ^0.8.0;

// This contract represents a decentralized voting system, using the Solidity programming language.

contract VotingSystem {
    // declaring state variables
    address public electionManager;
    uint public totalVotes;
    bool public votingOpen;

    // creating a struct to represent a single vote
    struct Vote {
        address voter; // address of the voter
        uint candidateID; // ID of the chosen candidate
    }

    // creating a dynamic array to store all the votes
    Vote[] public votes;

    // mapping to keep track of the candidates and their respective vote counts
    mapping (uint => uint) public voteCounts;

    // creating an event to emit when a new vote is cast
    event NewVote(address indexed voter, uint candidateID);

    // constructor function to set the election manager as the contract creator
    constructor() {
        electionManager = msg.sender;
        totalVotes = 0;
        votingOpen = false;
    }

    // modifier to restrict certain functions to only be called by the election manager
    modifier onlyManager() {
        require(msg.sender == electionManager);
        _;
    }

    // function to add a new candidate to the voting system
    function addCandidate() public onlyManager {
        // TODO: add candidate to the system
    }

    // function to open voting to the public
    function openVoting() public onlyManager {
        votingOpen = true;
    }

    // function to close voting and compute the results
    function closeVoting() public onlyManager {
        checkVoteCounts();
        votingOpen = false;
    }

    // internal function to check and update the vote counts of each candidate
    function checkVoteCounts() internal {
        for (uint i = 0; i < votes.length; i++) {
            voteCounts[votes[i].candidateID]++;
        }
    }

    // function for voters to cast their vote
    function castVote(uint candidateID) public {
        // checking if voting is open and the voter has not already voted
        require(votingOpen && !hasVoted(msg.sender));

        // TODO: handle invalid candidateID inputs

        // creating a new vote object and adding it to the votes array
        Vote memory newVote = Vote({
            voter: msg.sender,
            candidateID: candidateID
        });
        votes.push(newVote);

        // updating the vote count for the chosen candidate
        voteCounts[candidateID]++;

        // incrementing the total votes received
        totalVotes++;

        // emitting the new vote event
        emit NewVote(msg.sender, candidateID);
    }

    // function to check if a voter has already casted a vote
    function hasVoted(address _voter) public view returns (bool) {
        for (uint i = 0; i < votes.length; i++) {
            if (votes[i].voter == _voter) {
                return true;
            }
        }
        return false;
    }
}