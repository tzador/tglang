pragma solidity >=0.5.0 <0.9.0; // defining solidity version

contract ExampleContract { // contract keyword used to create a contract

  // state variables
  uint256 public totalSupply; // declaring a public state variable of type integer (unsigned 256 bit integer)
  mapping(address => uint) public balances; // declaring a public mapping that maps addresses to integer values
  address public owner; // declaring a public state variable of type address to represent the contract owner

  // events
  event Transfer(address indexed _from, address indexed _to, uint256 _value); // declaring the Transfer event with indexed parameters

  // constructor
  constructor(uint256 _initialSupply) { // constructor function that takes in an initial supply parameter
    totalSupply = _initialSupply; // initializing the total supply variable with the initial supply
    balances[msg.sender] = _initialSupply; // assigning the initial supply to the contract owner's balance
    owner = msg.sender; // assigning the contract owner as the address that deployed the contract
  }

  // functions
  function transfer(address _to, uint256 _value) public returns (bool) { // transfer function to send tokens from the contract owner to another address
    require(balances[msg.sender] >= _value); // checking if the sender has enough tokens to transfer
    balances[msg.sender] -= _value; // subtracting the transfer amount from the sender's balance
    balances[_to] += _value; // adding the transfer amount to the receiver's balance
    emit Transfer(msg.sender, _to, _value); // emitting the Transfer event
    return true; // returning true to indicate a successful transfer
  }

  function burn(uint256 _amount) public { // burn function to decrease the total supply by a specified amount
    require(msg.sender == owner); // checking that only the contract owner can call burn
    require(balances[msg.sender] >= _amount); // checking if the sender has enough tokens to burn
    require(totalSupply > _amount); // ensuring that the total supply will not be negative after burning
    totalSupply -= _amount; // decreasing the total supply
    balances[msg.sender] -= _amount; // subtracting the burn amount from the contract owner's balance
  }

  function mint(uint256 _amount) public { // mint function to increase the total supply by a specified amount
    require(msg.sender == owner); // checking that only the contract owner can call mint
    totalSupply += _amount; // increasing the total supply
    balances[msg.sender] += _amount; // assigning the minted tokens to the contract owner's balance
  }

  // modifiers
  modifier onlyOwner() { // modifier to restrict access to certain functions to the contract owner only
    require(msg.sender == owner); // checking that only the contract owner can call the function
    _; // continue executing the function if the condition is met
  }

  // fallback function
  fallback() external payable { // fallback function to receive ether and add it to the contract owner's balance
    require(msg.sender == owner); // checking that only the contract owner can receive ether via the fallback function
    balances[msg.sender] += msg.value; // adding the received ether to the contract owner's balance
  }
}