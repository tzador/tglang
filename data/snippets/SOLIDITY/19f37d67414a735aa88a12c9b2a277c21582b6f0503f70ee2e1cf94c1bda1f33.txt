// This contract implements a simple voting system using the Solidity programming language

contract Voting {
    // Arrays to store the list of candidates and their vote counts
    address[] public candidateList;
    mapping(address => uint) public votesReceived;
    
    // Modifier to restrict certain functions to only the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    // Event to be emitted when a new candidate is added
    event NewCandidateAdded(address candidateAddress);
    
    // Event to be emitted when a vote is cast
    event VoteCast(address voter, address candidate, uint voteCount);
    
    // Variables to store the contract owner and total number of votes
    address public owner;
    uint public totalVotes;
    
    // Constructor to set the contract owner
    constructor() public {
        owner = msg.sender;
    }
    
    // Function to add a new candidate to the list
    function addCandidate(address _candidateAddress) public onlyOwner {
        // Check if candidate already exists in the list
        for (uint i = 0; i < candidateList.length; i++) {
            require(candidateList[i] != _candidateAddress);
        }
        candidateList.push(_candidateAddress);
        emit NewCandidateAdded(_candidateAddress);
    }
    
    // Function to cast a vote for a candidate
    function castVote(address _candidateAddress) public {
        // Check if candidate is present in the list
        for (uint i = 0; i < candidateList.length; i++) {
            require(candidateList[i] == _candidateAddress);
        }
        // Increment vote count for the candidate
        votesReceived[_candidateAddress]++;
        // Increment total vote count
        totalVotes++;
        emit VoteCast(msg.sender, _candidateAddress, votesReceived[_candidateAddress]);
    }
    
    // Function to get the winning candidate
    function getWinner() public view returns (address winner) {
        // Use a temporary variable to store the winner
        address tempWinner = candidateList[0];
        for (uint i = 1; i < candidateList.length; i++) {
            // Check if current candidate has more votes than the previous winner
            if (votesReceived[candidateList[i]] > votesReceived[tempWinner]) {
                tempWinner = candidateList[i];
            }
        }
        return tempWinner;
    }
}