pragma solidity ^0.8.7; //specify the version of Solidity
contract MyContract { //create a contract named MyContract
  uint256 myNumber; //initialize a variable of type 'uint256'
  address myAddress; //initialize a variable of type 'address'
  string myString; //initialize a variable of type 'string'

  event NumberUpdated(uint256 _newNumber); //create an event that will be emitted when the number is updated

  constructor() { //initialize the constructor
    myNumber = 100; //set the initial value of myNumber to 100
    myAddress = msg.sender; //set myAddress to the address of the person deploying the contract
    myString = "Hello World!"; //set myString to "Hello World!"
  }

  function updateNumber(uint256 _newNumber) public { //create a function named 'updateNumber' that takes in a parameter of type 'uint256' and is publicly accessible
    require(msg.sender == myAddress); //only allow the person who deployed the contract to call this function
    myNumber = _newNumber; //set the value of myNumber to the newNumber passed in as a parameter
    emit NumberUpdated(_newNumber); //emit the 'NumberUpdated' event with the new number as a parameter
  }

  function getString() public view returns (string memory) { //create a function named 'getString' that is publicly accessible and returns a value of type 'string'
    return myString; //return the value of myString
  }
}