//Declare a contract 'Token' with the following features:

pragma solidity ^0.8.0;

contract Token {
  // Variables
  string public name;
  string public symbol;
  uint256 public totalSupply;
  mapping(address => uint256) public balanceOf;
  
  // Events
  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
  
  // Constructor function
  constructor(string memory _name, string memory _symbol, uint256 _totalSupply) {
      name = _name;
      symbol = _symbol;
      totalSupply = _totalSupply;
      balanceOf[msg.sender] = _totalSupply;
  }
  
  // Functions
  function transfer(address _to, uint256 _value) external returns (bool) {
      require(balanceOf[msg.sender] >= _value, "Not enough balance");
      balanceOf[msg.sender] -= _value;
      balanceOf[_to] += _value;
      emit Transfer(msg.sender, _to, _value);
      return true;
  }
  
  function approve(address _spender, uint256 _value) external returns (bool) {
      require(_spender != address(0), "Invalid spender address");
      balanceOf[msg.sender] -= _value;
      balanceOf[_spender] += _value;
      emit Approval(msg.sender, _spender, _value);
      return true;
  }
  
  function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {
      require(_value <= balanceOf[_from], "Not enough balance");
      require(_value <= balanceOf[_to], "Not enough allowance");
      balanceOf[_from] -= _value;
      balanceOf[_to] += _value;
      emit Transfer(_from, _to, _value);
      return true;
  }
  
  function allowance(address _owner, address _spender) external view returns (uint256) {
      return balanceOf[_owner][_spender];
  }
}