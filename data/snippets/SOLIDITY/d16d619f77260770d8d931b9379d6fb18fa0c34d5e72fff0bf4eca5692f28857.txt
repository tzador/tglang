// This contract allows users to exchange tokens with a specified conversion rate
contract TokenExchange {
    
    mapping (address => uint) public balances;

    event Transfer(address indexed _from, address indexed _to, uint _value);

    // Function to calculate exchange rate
    function calcExchangeRate(uint _tokens, uint _rate) private view returns (uint) {
        return _tokens * _rate;
    }

    // Function to exchange tokens
    function exchangeTokens(address _to, uint _tokens, uint _rate) public {
        uint convertedTokens = calcExchangeRate(_tokens, _rate);
        require(balances[msg.sender] >= convertedTokens, "Insufficient balance");
        balances[msg.sender] -= convertedTokens;
        balances[_to] += convertedTokens;
        emit Transfer(msg.sender, _to, convertedTokens);
    }

    // Function to redeem tokens
    function redeemTokens(uint _tokens, uint _rate) public {
        uint redeemedAmount = calcExchangeRate(_tokens, _rate);
        require(balances[msg.sender] >= redeemedAmount, "Insufficient balance");
        balances[msg.sender] -= redeemedAmount;
    }
}