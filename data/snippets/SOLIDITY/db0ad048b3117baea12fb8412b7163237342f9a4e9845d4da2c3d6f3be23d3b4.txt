pragma solidity ^0.8.0; //specifies the version of Solidity to be used

import "@openzeppelin/contracts/utils/math/SafeMath.sol"; //imports the SafeMath library

contract Token {
    using SafeMath for uint; //using SafeMath library for uint type

    uint public totalSupply; //declares a public variable to track total supply
    mapping(address => uint) public balanceOf; //declares a mapping to track balances of each address

    event Transfer(address indexed from, address indexed to, uint value); //declares an event to track transfers

    constructor(uint _initialSupply) { //constructor function
        totalSupply = _initialSupply; //sets the total supply to the initial supply provided
        balanceOf[msg.sender] = _initialSupply; //gives the initial supply to the contract creator
    }

    function transfer(address _to, uint _value) public returns (bool) { //transfer function
        require(balanceOf[msg.sender] >= _value, "Insufficient balance"); //ensures sender has enough balance
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); //subtracts the transferred amount from sender's balance
        balanceOf[_to] = balanceOf[_to].add(_value); //adds the transferred amount to receiver's balance
        emit Transfer(msg.sender, _to, _value); //emits transfer event
        return true; //returns true for successful transfer
    }

    function approve(address _spender, uint _value) public returns (bool) { //approve function
        require(_value <= balanceOf[msg.sender], "Insufficient balance"); //ensures sender has enough balance
        allowance[msg.sender][_spender] = _value; //sets the allowance amount for the spender
        emit Approval(msg.sender, _spender, _value); //emits approval event
        return true; //returns true for successful approval
    }

    function transferFrom(address _from, address _to, uint _value) public returns (bool) { //transferFrom function
        require(_value <= allowance[_from][msg.sender], "Insufficient allowance"); //ensures there is enough allowance from sender
        require(balanceOf[_from] >= _value, "Insufficient balance"); //ensures sender has enough balance
        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); //subtracts the transferred amount from allowance
        balanceOf[_from] = balanceOf[_from].sub(_value); //subtracts the transferred amount from sender's balance
        balanceOf[_to] = balanceOf[_to].add(_value); //adds the transferred amount to receiver's balance
        emit Transfer(_from, _to, _value); //emits transfer event
        return true; //returns true for successful transfer
    }
}