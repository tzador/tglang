pragma solidity 0.8.4; //version of Solidity language
contract ExampleContract {
    //1. Variable declarations
    string public name; //public variable
    uint private age; //private variable
    address internal owner; //internal variable

    //2. Event declaration
    event NameChanged(string newName); //event to be called when name is changed

    //3. Constructor function
    constructor(string memory _initialName, uint _initialAge, address _owner) {
        name = _initialName;
        age = _initialAge;
        owner = _owner;
    }

    //4. Getter functions (public)
    function getName() public view returns (string memory) {
        return name;
    }

    function getAge() public view returns (uint) {
        return age;
    }

    //5. Setter functions (internal)
    function setName(string memory _newName) internal {
        name = _newName;
    }

    function setAge(uint _newAge) internal {
        age = _newAge;
    }

    //6. Modifier
    modifier onlyOwner() { //modifier to restrict access to certain functions to only the contract owner
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    //7. Function to change name (public and onlyOwner modifier used)
    function changeName(string memory _newName) public onlyOwner {
        name = _newName;
        emit NameChanged(_newName); //calling the event 
    }

    //8. Fallback function (not payable)
    fallback() external {
        revert("Contract does not accept ether.");
    }

    //9. Receive function (payable)
    receive() external payable {
        revert("Contract does not accept ether.");
    }
}