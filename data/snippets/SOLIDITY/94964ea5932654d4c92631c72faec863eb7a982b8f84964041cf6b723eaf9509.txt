pragma solidity >=0.4.22 <0.9.0;

contract SimpleContract {
    // owner of the contract
    address public owner;

    // event when a new user is created
    event NewUser(address indexed _user);

    // event when a new transaction is made
    event NewTransaction(address indexed _sender, address indexed _receiver, uint _amount);

    // Struct to store user details
    struct User {
        string name;
        uint age;
    }

    // mapping to store user details by their address
    mapping (address => User) public users;

    // constructor function to set owner of the contract
    constructor() public {
        owner = msg.sender;
    }

    // modifier to check if the caller is the owner
    modifier onlyOwner {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }

    // function to create a new user (can be called by anyone)
    function createUser(string memory _name, uint _age) public {
        // creating a new user object
        User memory newUser = User(_name, _age);
        // adding the new user to the mapping
        users[msg.sender] = newUser;
        // emitting the NewUser event 
        emit NewUser(msg.sender);
    }

    // function to make a transaction between two users (can be called by anyone)
    function makeTransaction(address _receiver, uint _amount) public payable {
        // checking if the sender has enough balance to make the transaction
        require(msg.value >= _amount && msg.sender.balance >= _amount, "Insufficient balance");

        // transferring the specified amount from the sender to the receiver
        _receiver.transfer(_amount);

        // emitting the NewTransaction event
        emit NewTransaction(msg.sender, _receiver, _amount);
    }

    // function to delete the contract (can only be called by the owner)
    function deleteContract() public onlyOwner {
       selfdestruct(msg.sender);
    }
}