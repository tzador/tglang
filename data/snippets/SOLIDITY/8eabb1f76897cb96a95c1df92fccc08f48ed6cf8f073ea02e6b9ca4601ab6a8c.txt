// This contract demonstrates the use of inheritance and modifiers.

// Base contract with a defined modifier
contract Base {
    // Modifier that checks if the sender is the owner of the contract
    modifier onlyOwner {
        require(msg.sender == owner, "You are not the owner.");
        _; // This underscore indicates where the function body will be inserted
    }

    // Owner of the contract
    address payable owner;

    // Set the owner of the contract to the caller of this function
    constructor() public {
        owner = msg.sender;
    }
}

// Inherited contract that requires a certain amount of ether to be sent
contract EtherDemo is Base {
    // Modifier that checks if a certain amount of ether has been sent
    modifier costs(uint256 amount) {
        require(msg.value >= amount, "Not enough ether sent.");
        _;
    }

    // Deposit function that requires 1 ether to be sent and can only be called by the owner
    function deposit() public payable onlyOwner costs(1 ether) {
        // Deposit logic here
    }
}

// Inherited contract that requires a certain time limit to be passed
contract TimeLimitDemo is Base {
    // Modifier that checks if a certain time limit has passed
    modifier deadline(uint256 timeLimit) {
        require(now < timeLimit, "Time limit has passed.");
        _;
    }

    // Function that can only be called within the given time limit and by the owner
    function execute() public payable onlyOwner deadline(now + 1 days) {
        // Execution logic here
    }
}