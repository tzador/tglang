pragma solidity ^0.8.0;

// Import SafeMath library from OpenZeppelin 
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

// create the contract
contract Token {
    // initialize SafeMath library
    using SafeMath for uint256;
    
    // create variables for the total supply and balance of each account
    uint256 totalSupply;
    mapping(address => uint256) balances;

    // Event for the transfer of tokens
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Event for the approval of tokens
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Constructor function to set the initial total supply
    constructor(uint256 _initialSupply) {
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply;
    }

    // Standard ERC20 token functions
    function totalSupply() public view returns (uint256) {
        return totalSupply;
    }

    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
        // ensure that the sender has enough tokens to transfer
        require(balances[msg.sender] >= _value);
        
        // ensure that the transfer does not result in an overflow
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        
        // emit the Transfer event
        emit Transfer(msg.sender, _to, _value);
        
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) {
        // set the approved amount for the spender
        allowed[msg.sender][_spender] = _value;

        // emit the Approval event
        emit Approval(msg.sender, _spender, _value);

        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {
        // return the approved amount for a specific owner and spender
        return allowed[_owner][_spender];
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        // ensure that the sender has enough allowance to transfer
        // and that the transfer does not result in an overflow
        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value);
        
        // update the balance and allowance after transfer
        balances[_from] = balances[_from].sub(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(value);
        balances[_to] = balances[_to].add(_value);
        
        // emit the Transfer event
        emit Transfer(_from, _to, _value);
        
        return true;
    }
}