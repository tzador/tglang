pragma solidity ^0.8.0;

abstract contract Ownable {
    address public owner; // state variable to store owner address
    
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); // event to notify when ownership is transferred

    constructor() {
        owner = msg.sender; // initialize owner as contract creator
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner cannot be zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

contract MyContract is Ownable {
    string public name;
    uint8 public age;

    /**
     * @dev Sets the name and age of the contract.
     */
    function setNameAndAge(string memory newName, uint8 newAge) public onlyOwner {
        name = newName;
        age = newAge;
    }

    /**
     * @dev Allows the owner to withdraw funds from the contract.
     */
    function withdrawFunds() public onlyOwner {
        // code to withdraw funds
        // ...
    }
}