// Contract to store and manage student information 
    contract StudentManagement {
        // Struct to hold student info
        struct Student {
            string fullName;
            uint age;
            string major;
            bool currentStudent;
        }

        // Mapping to store student address and associated student struct
        mapping(address => Student) public students;

        // Function to add a new student
        function addStudent(string memory _fullName, uint _age, string memory _major, bool _currentStudent) public {
            // Require function caller to have admin role
            require(msg.sender == admin, "Only admin can add new students");
            // Assign student struct values
            students[msg.sender].fullName = _fullName;
            students[msg.sender].age = _age;
            students[msg.sender].major = _major;
            students[msg.sender].currentStudent = _currentStudent;
        }

        // Function to update student information
        function updateStudent(string memory _fullName, uint _age, string memory _major, bool _currentStudent) public {
            // Require function caller to be the student themselves
            require(msg.sender == students[msg.sender], "Can only update your own information");
            // Update student struct values
            students[msg.sender].fullName = _fullName;
            students[msg.sender].age = _age;
            students[msg.sender].major = _major;
            students[msg.sender].currentStudent = _currentStudent;
        }

        // Function to remove a student
        function removeStudent(address _studentAddress) public {
            // Require function caller to have admin role
            require(msg.sender == admin, "Only admin can remove students");
            // Delete student from mapping
            delete students[_studentAddress];
        }

        // Function to check if student is currently enrolled
        function checkCurrentStudent(address _studentAddress) public view returns (bool) {
            // Return currentStudent value from student struct
            return students[_studentAddress].currentStudent;
        }

        // Function to get student's major
        function getMajor(address _studentAddress) public view returns (string memory) {
            // Return major value from student struct
            return students[_studentAddress].major;
        }
    }