// Contract definition
contract Bank {
    
    // Address of the owner of the contract
    address owner;
    
    // Mapping of account balances
    mapping (address => uint) public balances;
    
    // Event declaration
    event NewDeposit(address sender, uint amount);
    
    // Constructor function
    constructor() public {
        // Set the owner of the contract
        owner = msg.sender;
    }
    
    // OnlyOwner modifier
    modifier onlyOwner {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }
    
    // Function to deposit funds into the contract
    function deposit() public payable {
        // Check if sender is not the owner
        require(msg.sender != owner, "Owner cannot deposit funds.");
        // Add deposited amount to sender's balance
        balances[msg.sender] += msg.value;
        // Emit NewDeposit event
        emit NewDeposit(msg.sender, msg.value);
    }
    
    // Function to withdraw funds from the contract
    function withdraw(uint amount) public onlyOwner {
        // Check if contract has enough balance to withdraw
        require(address(this).balance >= amount, "Insufficient funds in the contract.");
        // Subtract withdrawn amount from owner's balance
        balances[owner] -= amount;
        // Transfer funds to owner's address
        owner.transfer(amount);
    }
}