pragma solidity ^0.8.0;

// This is a contract that implements a basic bank
// It allows users to deposit and withdraw funds
// while preventing overdrafts or negative balances
contract Bank {
    address public owner; // The owner of the bank
    mapping(address => uint) private balances; // Mapping of user addresses to their current balance
    
    // Constructor function to set the bank owner
    constructor() {
        owner = msg.sender; // Set the contract deployer as the owner
    }
    
    // Function to deposit funds into the bank
    // Requires the user to send an amount and their address
    function deposit() public payable {
        // Check if amount is greater than 0
        require(msg.value > 0, "Amount must be greater than 0");
        
        // Add the deposited funds to the user's balance
        balances[msg.sender] += msg.value;
    }
    
    // Function to withdraw funds from the bank
    // Requires the user to send an amount, which cannot be more than their current balance
    function withdraw(uint amount) public {
        // Check if amount is greater than 0
        require(amount > 0, "Amount must be greater than 0");
        
        // Check if user has enough funds in their balance
        require(balances[msg.sender] >= amount, "Insufficient funds");
        
        // Subtract the withdrawn amount from the user's balance
        balances[msg.sender] -= amount;
        
        // Transfer the withdrawn amount to the user's address
        payable(msg.sender).transfer(amount);
    }
    
    // Function to check the balance of a user
    // Requires the user's address
    function checkBalance(address user) public view returns (uint) {
        // Check if user is the owner
        if (user == owner) {
            // Return the total balance of the bank
            return address(this).balance;
        }
        
        // Otherwise, return the user's balance
        return balances[user];
    }
    
    // Fallback function to handle any deposits sent directly to the contract
    fallback() external payable {
        // Add the deposited funds to the owner's balance
        balances[owner] += msg.value;
    }
}