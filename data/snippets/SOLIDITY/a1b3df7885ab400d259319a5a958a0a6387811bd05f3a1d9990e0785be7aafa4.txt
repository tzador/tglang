pragma solidity >=0.5.0 <0.7.0;

contract Bank {
    address public owner;
    mapping(address => uint256) public balances;
    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);

    constructor() public {
        owner = msg.sender;
    }

    function deposit() external payable {
        require(msg.value > 0, 'Invalid deposit amount');
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external {
        require(msg.sender == owner, 'Only owner can withdraw');
        require(amount <= balances[msg.sender], 'Insufficient balance');
        balances[msg.sender] -= amount;
        msg.sender.transfer(amount);
        emit Withdraw(msg.sender, amount);
    }

    function transfer(address recipient, uint256 amount) external {
        require(amount > 0, 'Invalid transfer amount');
        require(recipient != address(0), 'Invalid recipient address');
        require(amount <= balances[msg.sender], 'Insufficient balance');
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
    }
    
    function getBalance(address account) external view returns (uint256) {
        return balances[account];
    }
}