//This code snippet is an example of a contract in Solidity, the programming language used for creating smart contracts on the Ethereum blockchain.

pragma solidity >=0.7.0 <0.9.0; //Declares the compiler version to be used for this contract.

//Contract declaration and inheritance.
contract ExampleContract is OtherContract {
    //State variables.
    string public name; //Public variable that can be accessed by anyone.
    uint256 private age; //Private variable that can only be accessed by this contract.
    address internal owner; //Internal variable that can be accessed by inherited contracts.

    //Events - used for logging and notifying external systems.
    event NameChanged(address indexed _address, string name); //Indexed to allow filtering.
    event AgeChanged(uint256 age);

    //Constructor function - only executed once during contract deployment.
    constructor() public {
        name = "Example Contract";
        age = 25;
        owner = msg.sender; //Msg.sender is the address of the account that deployed the contract.
    }

    //Modifiers - used to restrict access to functions.
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action.");
        _; //The code in the function that this modifier is used on will be inserted here.
    }

    //Functions - can be called by external accounts.
    function changeName(string memory newName) public onlyOwner {
        name = newName; //Changes the name variable.
        emit NameChanged(msg.sender, name); //Emits the NameChanged event.
    }

    function changeAge(uint256 newAge) public onlyOwner {
        age = newAge; //Changes the age variable.
        emit AgeChanged(age); //Emits the AgeChanged event.
    }

    function withdrawFunds() public onlyOwner {
        uint256 balance = address(this).balance; //Gets the balance of the contract.
        payable(owner).transfer(balance); //Transfers the funds to the owner.
    }

    //Fallback function - executed when the contract receives ether without a specific function call.
    fallback() external payable {
        revert(); //Reverts the transaction and returns the ether.
    }

    //Receive function - executed when the contract receives ether AND has a receive() function.
    receive() external payable {
        //Additional code can be added here, such as updating state variables or emitting events.
    }

    //Custom functions - used for internal calculations or other specific purposes.
    function calculateSum(uint256 num1, uint256 num2) internal pure returns (uint256) {
        return num1 + num2; //Returns the sum of the two numbers.
    }
}