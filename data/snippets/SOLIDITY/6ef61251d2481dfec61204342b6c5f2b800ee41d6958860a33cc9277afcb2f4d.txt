// Indicates that the code contains the definition of a contract
contract Example {
    
    // A variable of type address that can be read and written by anyone
    address public variable;
    
    // An event that can be emitted by the contract
    event ExampleEvent(address indexed sender, uint256 value);
    
    // A constructor that initializes the variable with a given value
    constructor(address _variable) public {
        variable = _variable;
    }
    
    // A function that can be called by anyone and will update the variable
    function updateVariable(address _newVariable) public {
        variable = _newVariable;
        
        // Emits the ExampleEvent with the updated sender and value
        emit ExampleEvent(msg.sender, variable);
    }
    
    // A function that can be called only by the contract itself
    function doSomething() internal {
        // Code to be executed by the contract only
    }
    
    // A function that can be called only by a specific address
    function doSomethingRestricted() external {
        require(msg.sender == 0x123abc, "Restricted to specific address");
        // Code to be executed by the specific address
    }
    
    // A function that can be called only by a specific contract
    function doSomethingElse() public {
        require(msg.sender == address(specificContract), "Restricted to specific contract");
        // Code to be executed by the specific contract
    }
    
    // A function that can receive and send Ether
    function transferEther(address payable _receiver) public payable {
        // Transfers the specified amount of Ether to the receiver
        _receiver.transfer(msg.value);
        
        // Allows the contract to receive Ether
        msg.sender.transfer(address(this).balance);
    }
    
    // A function that allows a specified address to withdraw Ether from the contract
    function withdrawEther() external {
        require(msg.sender == 0x456def, "Restricted to specific address");
        
        // Transfers the entire contract balance to the specified address
        address payable receiver = address(uint160(msg.sender));
        receiver.transfer(address(this).balance);
    }
    
    // A function that allows a specified amount of ERC20 tokens to be transferred from the contract
    function transferTokens(address _token, address _receiver, uint256 _amount) external {
        // Calls the transfer function of a specific ERC20 token contract
        require(Token(_token).transfer(_receiver, _amount), "Transfer failed");
    }
    
    // A function that allows a specified amount of ERC721 tokens to be transferred from the contract
    function transferNFT(address _token, address _receiver, uint256 _tokenId) external {
        // Calls the transferFrom function of a specific ERC721 token contract
        require(Token(_token).transferFrom(address(this), _receiver, _tokenId), "Transfer failed");
    }
    
}

// Defines an ERC20 token contract
contract Token {
    function transfer(address _to, uint256 _value) external returns (bool);
}

// Defines an ERC721 token contract
contract NFT {
    function transferFrom(address _from, address _to, uint256 _tokenId) external;
}