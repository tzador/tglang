/*
    @title Token Vault Contract
*/

pragma solidity ^0.8.0;

import "./IERC20.sol";

contract TokenVault {

    address private owner; // owner of the vault
    uint256 private unlockDate; // date after which the tokens can be unlocked

    // mapping of token addresses to the amount of tokens deposited
    mapping (address => uint256) private depositedTokens; 

    // event triggered when the owner deposits tokens into the vault
    event TokensDeposited(address indexed token, uint256 amount);

    // event triggered when the owner withdraws tokens from the vault
    event TokensWithdrawn(address indexed token, uint256 amount);

    // modifier that restricts access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can access this function");
        _;
    }
    
    // constructor function, sets the owner and the unlock date
    constructor(address _owner, uint256 _unlockDate) {
        require(_unlockDate > block.timestamp, "Unlock date must be in the future");
        owner = _owner;
        unlockDate = _unlockDate;
    }

    // function to deposit tokens into the vault
    function depositTokens(address _token, uint256 _amount) external onlyOwner {
        // transfer tokens from the owner to the vault
        IERC20(_token).transferFrom(msg.sender, address(this), _amount);
        // update deposited tokens state variable
        depositedTokens[_token] += _amount;
        // emit event 
        emit TokensDeposited(_token, _amount);
    }

    // function to withdraw tokens from the vault 
    function withdrawTokens(address _token, uint256 _amount) external onlyOwner {
        // make sure that the unlock date has passed
        require(block.timestamp > unlockDate, "Tokens cannot be withdrawn before unlock date");
        // make sure that the requested amount is not more than the deposited amount
        require(depositedTokens[_token] >= _amount, "Not enough tokens deposited");
        // transfer tokens from the vault to the owner
        IERC20(_token).transfer(owner, _amount);
        // update deposited tokens state variable
        depositedTokens[_token] -= _amount;
        // emit event
        emit TokensWithdrawn(_token, _amount);
    }

    // function to get the amount of deposited tokens for a specific token
    function getDepositedTokens(address _token) external view returns (uint256) {
        return depositedTokens[_token];
    }
}