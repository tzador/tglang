contract AdvancedToken {
    
    // Variables
    string public name;
    string public symbol;
    uint8 public decimals;
    address public owner;
    uint256 public totalSupply;
    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowed;
    
    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    /**
    CONSTRUCTOR FUNCTION
    Initializes contract with initial token supply, owner address and sets token name, symbol and decimals.
     */
    constructor(uint256 _initialSupply, address _owner, string _name, string _symbol, uint8 _decimals) public {
        totalSupply = _initialSupply;
        owner = _owner;
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        balances[owner] = totalSupply;
    }
    
    /**
    TRANSFER FUNCTION
    Transfer tokens from sender to recipient.
    @param _to The address to transfer tokens to.
    @param _value The amount of tokens to be transferred.
    */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0), "Invalid recipient address provided."); // Checks for invalid recipient address
        require(_value <= balances[msg.sender], "Insufficient token balance."); // Checks if sender has enough tokens to transfer
        balances[msg.sender] = balances[msg.sender] - _value; // Deducts tokens from sender's balance
        balances[_to] = balances[_to] + _value; // Adds tokens to recipient's balance
        emit Transfer(msg.sender, _to, _value); // Emits transfer event
        return true; // Returns success
    }
    
    /**
    APPROVE FUNCTION
    Approve spender with a specific amount of tokens.
    @param _spender The address of the spender to approve.
    @param _value The amount of tokens to be approved.
    */
    function approve(address _spender, uint256 _value) public returns (bool) {
        require(_spender != address(0), "Invalid spender address provided."); // Checks for invalid spender address
        allowed[msg.sender][_spender] = _value; // Sets allowance for spender under sender's address
        emit Approval(msg.sender, _spender, _value); // Emits approval event
        return true; // Returns success
    }
    
    /**
    TRANSFERFROM FUNCTION
    Transfer tokens from a specific address to another.
    @param _from The address to transfer tokens from.
    @param _to The address to transfer tokens to.
    @param _value The amount of tokens to be transferred.
    */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0), "Invalid recipient address provided."); // Checks for invalid recipient address
        require(_value <= balances[_from], "Insufficient token balance for specified address."); // Checks if _from has enough tokens to transfer
        require(_value <= allowed[_from][msg.sender], "Insufficient allowance for sender."); // Checks if sender has enough allowance to transfer from _from
        balances[_from] = balances[_from] - _value; // Deducts tokens from _from's balance
        balances[_to] = balances[_to] + _value; // Adds tokens to _to's balance
        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value; // Deducts transferred amount from sender's allowance
        emit Transfer(_from, _to, _value); // Emits transfer event
        return true; // Returns success
    }
}