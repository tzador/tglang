pragma solidity ^0.8.0; // declaring the version of solidity being used
 
contract Token { // creating a contract named Token
    address owner; // declaring a state variable for the contract owner
    mapping(address => uint) balances; // creating a mapping to store the balances of each address
    
    event Transfer(address from, address to, uint value); // creating an event to emit for transfers
    
    constructor() { // constructor function to set the contract owner
        owner = msg.sender; // set the contract owner to message sender
    }
    
    modifier onlyOwner { // modifier to restrict functions to only the owner
        require(msg.sender == owner, "Only the contract owner can perform this action.");
        _; // placeholder for the actual function code
    }
    
    function mint(address recipient, uint amount) public onlyOwner { // function to mint new tokens
        require(amount <= 10000, "Maximum amount of tokens to be minted is 10000.");
        balances[recipient] += amount; // increase the recipient's balance by the minted amount
        emit Transfer(address(0), recipient, amount); // emit transfer event with address(0) representing a minted token
    }
    
    function transfer(address recipient, uint amount) public { // function to transfer tokens
        require(amount <= balances[msg.sender], "Insufficient balance."); // check if the sender has enough tokens
        balances[msg.sender] -= amount; // decrease the sender's balance by the transfer amount
        balances[recipient] += amount; // increase the recipient's balance by the transfer amount
        emit Transfer(msg.sender, recipient, amount); // emit transfer event with the sender and recipient addresses
    }
    
    function getBalance(address account) public view returns (uint) { // function to get the balance of an address
        return balances[account]; // return the balance associated with the given address
    }
}