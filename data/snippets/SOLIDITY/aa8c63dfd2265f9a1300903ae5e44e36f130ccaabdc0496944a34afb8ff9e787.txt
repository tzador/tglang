// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.0;

contract Voting {
    // Creating a mapping to store the votes for each candidate
    mapping (string => uint256) public candidateVotes;
    // Creating an array to store the list of candidates
    string[] public candidates;
    // Creating a variable to store the total number of votes
    uint256 public totalVotes;

    // Creating a function to add a new candidate to the list
    function addCandidate(string memory name) public {
        // Making sure the candidate does not already exist
        require(candidateVotes[name] == 0, "Candidate already exists");
        // Adding the candidate to the list
        candidates.push(name);
        // Setting the initial votes for the candidate to 0
        candidateVotes[name] = 0;
    }

    // Creating a function to vote for a candidate
    function vote(string memory name) public {
        // Making sure the candidate exists
        require(candidateVotes[name] > 0, "Candidate does not exist");
        // Adding 1 vote for the candidate
        candidateVotes[name] += 1;
        // Increasing the total number of votes
        totalVotes += 1;
    }

    // Creating a function to get the winner
    function getWinner() public view returns (string memory) {
        string memory winner;
        uint256 winnerVotes;

        // Looping through the candidates
        for (uint i = 0; i < candidates.length; i++){
            // Checking if the current candidate has more votes than the current winner
            if(candidateVotes[candidates[i]] > winnerVotes) {
                // Updating the winner and the number of votes
                winner = candidates[i];
                winnerVotes = candidateVotes[winner];
            }
        }
        // Returning the winner
        return winner;
    }
}