pragma solidity ^0.8.0;

//**@title ERC20Token**
contract ERC20Token{
    //**@title Emitted when a new token is created**
    event NewTokenCreated(address creator, string tokenName);
    
    //**@title Stores information about the token**
    struct Token{
        string name;
        uint256 totalSupply;
    }
    
    //**@title Stores the token balances of each address**
    mapping(address => uint256) public balances;
    
    //**@dev Array of all tokens created on the contract**
    Token[] public tokens;
    
    //**@title Creates a new token**
    function createToken(string memory _name, uint256 _supply) external{
        //**@dev Require non-zero supply and name length cannot be greater than 50**
        require(_supply > 0, "Supply must be greater than zero");
        require(bytes(_name).length > 0 && bytes(_name).length < 50, "Name length must be between 1 and 50 characters");
        
        //**@dev Store new token in the tokens array**
        tokens.push(Token(_name, _supply));
        
        //**@dev Emit NewTokenCreated event with creator and token name**
        emit NewTokenCreated(msg.sender, _name);
        
        //**@dev Set balance of token creator to token supply**
        balances[msg.sender] = _supply;
    }
    
    //**@title Transfers tokens from message sender to another address**
    function transfer(address _to, uint256 _amount) external{
        //**@dev Require sufficient balance to transfer tokens**
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        
        //**@dev Update balances of both parties**
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
    }
    
    //**@title Returns the total number of tokens in circulation**
    function getTotalSupply() external view returns (uint256){
        uint256 totalSupply = 0;
        for(uint256 i = 0; i < tokens.length; i++){
            totalSupply += tokens[i].totalSupply;
        }
        return totalSupply;
    }
}