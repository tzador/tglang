// Define contract and set its visibility to public
contract MyContract {
    
    // Define state variables using the uint data type
    uint public myNumber;
    uint public anotherNumber;
    
    // Define constructor function
    constructor(uint _myNumber) public {
        // Set initial value for myNumber
        myNumber = _myNumber;
    }
    
    // Define a function that updates myNumber
    function updateMyNumber(uint _newNumber) public {
        // Require that the new number is greater than 10
        require(_newNumber > 10, "New number must be greater than 10");
        
        // Update myNumber with the new value
        myNumber = _newNumber;
    }
    
    // Define a function that adds two numbers and returns the result
    function addNumbers(uint _num1, uint _num2) public pure returns (uint) {
        // Return the sum of the two numbers
        return _num1 + _num2;
    }
    
    // Define a function that retrieves the sum of myNumber and anotherNumber
    function getSum() public view returns (uint) {
        // Return the sum of the two state variables
        return myNumber + anotherNumber;
    }
    
    // Define a function that deletes anotherNumber
    function deleteAnotherNumber() public {
        // Require that the caller is the owner of the contract
        require(msg.sender == owner, "Caller is not the owner of the contract");
        
        // Delete the value of anotherNumber
        delete anotherNumber;
    }
    
    // Fallback function - triggered when the contract receives ether
    function() public payable {
        // Add the received ether to anotherNumber
        anotherNumber = msg.value;
    }
    
}