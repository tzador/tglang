contract MyContract {
    
    // Struct to store data
    struct Person {
        string name;
        uint age;
    }
    
    // Array of Person structs
    Person[] public people;
    
    // Mapping to keep track of persons' addresses
    mapping (address => bool) public personExists;
    
    // Event to emit when a new person is added
    event NewPersonAdded(address personAddress, string name, uint age);
    
    // Function to add a new person to the array of people
    function addPerson(string memory _name, uint _age) public {
        
        // Only allow unique addresses 
        require(!personExists[msg.sender], "Person with this address already exists.");
        
        // Add the person struct to the array
        people.push(Person(_name, _age));
        
        // Set person address to true in mapping
        personExists[msg.sender] = true;
        
        // Emit the event
        emit NewPersonAdded(msg.sender, _name, _age);
    }
    
    // Function to update a person's name 
    function updateName(uint _personIndex, string memory _name) public {
        
        // Make sure the person exists
        require(personExists[msg.sender], "Person with this address does not exist.");
        
        // Update the person's name
        people[_personIndex].name = _name;
    }
}