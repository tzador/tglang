// Define contract with constructor
contract MyContract {
    address owner; // Declare address variable
    
    // Define structs with two elements
    struct Person {
        uint age;
        string name;
    }
    
    // Define events
    event NewPersonAdded(uint indexed _id, string _name);
    event PersonUpdated(uint indexed _id, string _name);
    event PersonDeleted(uint indexed _id);
    
    // Define mapping
    mapping (uint => Person) public people;
    
    // Define constructor
    constructor() public {
        owner = msg.sender; // Set owner address to msg.sender
    }
    
    // Add new person function
    function addPerson(string memory _name, uint _age) public {
        // Require that msg.sender is owner
        require(msg.sender == owner, "Caller must be owner");
        
        people[_age] = Person(_name, _age); // Add new person to mapping
        emit NewPersonAdded(_age, _name); // Emit NewPersonAdded event
    }
    
    // Update person function
    function updatePerson(string memory _name, uint _age) public {
        // Require that msg.sender is owner
        require(msg.sender == owner, "Caller must be owner");
        
        Person storage person = people[_age]; // Get person from mapping
        person.name = _name; // Update name
        emit PersonUpdated(_age, _name); // Emit PersonUpdated event
    }
    
    // Delete person function
    function deletePerson(uint _age) public {
        // Require that msg.sender is owner
        require(msg.sender == owner, "Caller must be owner");
        
        delete people[_age]; // Delete person from mapping
        emit PersonDeleted(_age); // Emit PersonDeleted event
    }
}