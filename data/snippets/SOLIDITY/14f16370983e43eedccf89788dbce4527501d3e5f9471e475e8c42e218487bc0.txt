/**
 * @title MyContract
 * @dev A contract that implements a basic token
 */
contract MyContract {
    // State variables
    address owner;
    uint256 totalSupply;
    mapping (address => uint) balances;
    
    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    // Constructor
    constructor() public {
        owner = msg.sender; // Set the owner of the contract
        totalSupply = 100; // Set the total supply of tokens to 100
        balances[msg.sender] = totalSupply; // Give all tokens to the contract creator
    }
    
    // Functions
    /**
     * @dev Function to get the total supply of tokens
     * @return The total supply
     */
    function getTotalSupply() public view returns (uint256) {
        return totalSupply;
    }
    
    /**
     * @dev Function to transfer tokens from the caller to another address
     * @param _to The address to transfer tokens to
     * @param _value The amount of tokens to transfer
     * @return True if the transfer was successful, false otherwise
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(balances[msg.sender] >= _value, "Insufficient balance"); // Check if caller has enough tokens
        
        // Transfer tokens
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        
        // Emit transfer event
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    
    /**
     * @dev Function to get the balance of an address
     * @param _address The address to get the balance of
     * @return The balance of the address
     */
    function getBalance(address _address) public view returns (uint256) {
        return balances[_address];
    }
    
    /**
     * @dev Function to destroy the contract and send remaining tokens back to the owner
     */
    function destroy() external {
        require(msg.sender == owner, "Only owner can destroy this contract"); // Check if caller is owner
        
        // Transfer remaining tokens back to owner
        balances[owner] = totalSupply;
        totalSupply = 0;
    }
}