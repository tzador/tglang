/**
 * @title PaymentContract
 * @dev A contract that handles payments and refunds.
 */
contract PaymentContract {
    
    // Variables
    address private owner; // Owner of the contract
    mapping(address => uint256) private balances; // Balances of users
    mapping(address => bool) private refunded; // Whether user was refunded or not

    /**
     * @dev Constructor function
     */
    constructor() public {
        owner = msg.sender;
    }

    /**
     * @dev Modifier that checks if the sender is the owner of the contract
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    /**
     * @dev Function to make a payment
     * @param _user The user to make the payment for
     * @param _amount The amount to be paid
     */
    function makePayment(address _user, uint256 _amount) public onlyOwner {
        require(balances[_user] >= _amount); // Check if the user has enough balance
        balances[_user] -= _amount; // Deduct the balance
    }

    /**
     * @dev Function to refund a user
     * @param _user The user to be refunded
     */
    function refundUser(address _user) public onlyOwner {
        require(refunded[_user] == false); // Check if the user has not been refunded before
        uint256 amount = balances[_user]; // Get the user's balance
        require(amount > 0); // Check if the balance is greater than zero
        _user.transfer(amount); // Refund the user
        balances[_user] = 0; // Reset the user's balance
        refunded[_user] = true; // Mark user as refunded
    }

}