pragma solidity >=0.7.0 <0.9.0; // specifying the version of solidity

contract Token { // defining a contract named Token
  string private name;
  string private symbol;
  uint8 private constant decimals = 18;
  uint256 private constant decimalFactor = 10**uint256(decimals);
  uint256 public totalSupply;

  mapping (address => uint256) public balanceOf; // mapping to keep track of address balances
  mapping (address => mapping (address => uint256)) public allowance; // mapping to keep track of allowances


  event Transfer(address indexed from, address indexed to, uint256 value); // event for token transfers
  event Approval(address indexed owner, address indexed spender, uint256 value); // event for approval of allowances


  constructor(string memory _name, string memory _symbol, uint256 _initialSupply) { // constructor function
    name = _name;
    symbol = _symbol;
    totalSupply = _initialSupply * decimalFactor; // setting the total supply of tokens
    balanceOf[msg.sender] = totalSupply; // setting the initial balance of the contract creator as the total supply
    emit Transfer(address(0), msg.sender, totalSupply); // emitting a transfer event for the initial allocation of tokens
  }


  function transfer(address _to, uint256 _value) public returns (bool) { // function to transfer tokens
    require(balanceOf[msg.sender] >= _value); // checking if the sender has enough balance
    require(_to != address(0)); // checking if the receiver address is not 0x0
    balanceOf[msg.sender] -= _value; // subtracting the transferred tokens from the sender's balance
    balanceOf[_to] += _value; // adding the transferred tokens to the receiver's balance
    emit Transfer(msg.sender, _to, _value); // emitting the transfer event
    return true; // returning true to indicate a successful transfer
  }

  
  function approve(address _spender, uint256 _value) public returns (bool) { // function to approve an allowance
    allowance[msg.sender][_spender] = _value; // setting the allowance amount for the spender
    emit Approval(msg.sender, _spender, _value); // emitting the approval event
    return true; // returning true to indicate a successful approval
  }

  
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { // function to transfer tokens from a delegated allowance
    require(balanceOf[_from] >= _value); // checking if the sender has enough balance
    require(allowance[_from][msg.sender] >= _value); // checking if the delegated allowance is enough
    require(_to != address(0)); // checking if the receiver address is not 0x0
    balanceOf[_from] -= _value; // subtracting the transferred tokens from the sender's balance
    balanceOf[_to] += _value; // adding the transferred tokens to the receiver's balance
    allowance[_from][msg.sender] -= _value; // subtracting the delegated allowance from the spender's allowance
    emit Transfer(_from, _to, _value); // emitting the transfer event
    return true; // returning true to indicate a successful transfer
  }
}