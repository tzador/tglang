pragma solidity ^0.8.4;
// An employee smart contract that stores employee data and calculates salary
contract Employee {
    // Creating state variables
    uint totalSalary;
    uint constant monthlyPay = 10000;

    // Creating a struct to store employee data
    struct EmployeeData {
        string name;
        uint age;
        uint salary;
        bool active;
    }

    // Creating a mapping to store employee data by their address
    mapping(address => EmployeeData) employees;

    // Constructor function to initialize contract
    constructor() {
        totalSalary = 0;
    }

    // Function to add new employee data to the mapping
    function addEmployee(address _address, string memory _name, uint _age) public {
        // Checking if the employee already exists in the mapping
        require(!employees[_address].active, "Employee already exists");

        // Adding new employee data to the mapping
        employees[_address] = EmployeeData(_name, _age, 0, true);
    }

    // Function to update employee salary
    function updateSalary(address _address, uint _newSalary) public {
        // Checking if the employee exists
        require(employees[_address].active, "Employee does not exist");

        // Updating employee salary
        employees[_address].salary = _newSalary;
        
        // Calculating total salary of all employees
        totalSalary += employees[_address].salary;
    }
}