pragma solidity ^0.8.0;

// This contract allows for the creation and management of a decentralized voting system.

contract VotingSystem {
    
    // Declare state variables
    address public owner; // Address of the contract owner
    mapping(address => bool) public voters; // Mapping of addresses to their voting eligibility
    mapping(string => uint) public candidateVotes; // Mapping of candidate names to their vote count
    uint public totalVotes; // Total number of votes casted
    
    // Define events for vote casting and eligibility
    event NewVote(address indexed voter, string indexed candidate);
    event NewVoter(address indexed voter);
    
    // Set contract owner as the deployer
    constructor() {
        owner = msg.sender;
    }
    
    // Create function to check eligibility and cast vote
    function vote(string memory candidateName) public {
        require(voters[msg.sender]); // Check if sender is eligible voter
        candidateVotes[candidateName]++; // Increment vote count for candidate
        totalVotes++; // Increment total vote count
        emit NewVote(msg.sender, candidateName); // Trigger event for vote casting
    }
    
    // Create function to add new eligible voters
    function addVoters(address[] memory _voters) public {
        require(msg.sender == owner); // Check if sender is contract owner
        for (uint i=0; i < _voters.length; i++) {
            voters[_voters[i]] = true; // Set eligibility for new voters
            emit NewVoter(_voters[i]); // Trigger event for new voters
        }
    }
    
    // Create function to remove voters
    function removeVoters(address[] memory _voters) public {
        require(msg.sender == owner); // Check if sender is contract owner
        for (uint i=0; i < _voters.length; i++) {
            voters[_voters[i]] = false; // Remove eligibility for voters
        }
    }
    
    // Create function to get vote count for a specific candidate
    function getVoteCount(string memory candidateName) public view returns (uint) {
        return candidateVotes[candidateName]; // Return vote count for candidate
    }
    
    // Create function to get total vote count
    function getTotalVotes() public view returns (uint) {
        return totalVotes; // Return total vote count
    }
}