// import libraries
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title MyNFT
 * @dev Contract for creating and managing non-fungible tokens.
 */
contract MyNFT is ERC721, Ownable {
    // state variables
    uint256 public totalTokens;
    string public baseMetadataURI;

    // mappings
    mapping(uint256 => string) public tokenURIs;

    // events
    event TokenMinted(uint256 indexed tokenId, address indexed to, string indexed tokenURI);

    constructor() ERC721("MyNFT", "NFT") {
        totalTokens = 0;
    }

    /**
     * @dev Mint a new token and assign it to the given address.
     * The token will have a URI specified by tokenURI.
     * Token URI can point to any metadata for the token, such as an image or description.
     * @param to The address the token will be minted to.
     * @param tokenURI The URI for the token.
     * @return The newly minted token's ID.
     */
    function mint(address to, string memory tokenURI) public onlyOwner returns (uint256) {
        totalTokens = totalTokens + 1;
        uint256 tokenId = totalTokens;
        _mint(to, tokenId);
        tokenURIs[tokenId] = tokenURI;
        emit TokenMinted(tokenId, to, tokenURI);
        return tokenId;
    }

    /**
     * @dev Returns the URI for a given token.
     * @param tokenId The ID of the token.
     * @return The URI for the token.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        string memory _tokenURI = tokenURIs[tokenId];
        // base metadata URI + token URI = full token URI
        return string(abi.encodePacked(baseMetadataURI, _tokenURI));
    }

    /**
     * @dev Sets the base URI for all tokens.
     * @param newBaseMetadataURI The new base URI.
     */
    function setBaseURI(string memory newBaseMetadataURI) public onlyOwner {
        baseMetadataURI = newBaseMetadataURI;
    }

    /**
     * @dev Returns the total number of tokens minted.
     * @return The total number of tokens minted.
     */
    function getTotalTokens() public view returns (uint256) {
        return totalTokens;
    }
}