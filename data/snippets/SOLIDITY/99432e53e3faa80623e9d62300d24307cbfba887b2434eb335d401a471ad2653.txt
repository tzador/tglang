pragma solidity ^0.8.0;

// User-defined data structure
struct User {
    address id;
    string name;
    uint256 age;
    bool active;
}

// Contract definition
contract UserManagement {
    
    // State variable to store user count
    uint256 userCount;
    
    // Mapping to store user data using their address as key
    mapping(address => User) public users;
    
    // Event to emit when a new user is added
    event UserAdded(address userAddress, string userName, uint256 userAge, bool userActive);
    
    // Modifier to restrict function access to only contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only contract owner can call this function.");
        _;
    }
    
    // Contract owner address
    address owner;
    
    // Constructor, to set contract owner and initial user count
    constructor() {
        owner = msg.sender;
        userCount = 0;
    }
    
    // Function to add a new user
    function addUser(string memory _name, uint256 _age, bool _active) public {
        // Check if user already exists
        require(!isUser(msg.sender), "User already exists.");
        
        // Add user to mapping
        users[msg.sender] = User(msg.sender, _name, _age, _active);
        
        // Increase user count by 1
        userCount++;
        
        // Emit UserAdded event
        emit UserAdded(msg.sender, _name, _age, _active);
    }
    
    // Function to check if a user exists
    function isUser(address _userAddress) internal view returns (bool) {
        if (users[_userAddress].id == _userAddress) {
            return true;
        } else {
            return false;
        }
    }
    
    // Function to get user information
    function getUser(address _userAddress) public view returns (string memory, uint256, bool) {
        // Check if user exists
        require(isUser(_userAddress), "User does not exist.");
        
        // Return user data
        return (users[_userAddress].name, users[_userAddress].age, users[_userAddress].active);
    }
    
    // Function to update user information
    function updateUser(string memory _name, uint256 _age, bool _active) public {
        // Check if user exists
        require(isUser(msg.sender), "User does not exist.");
        
        // Update user data
        users[msg.sender].name = _name;
        users[msg.sender].age = _age;
        users[msg.sender].active = _active;
        
        // Emit UserAdded event
        emit UserAdded(msg.sender, _name, _age, _active);
    }
    
    // Function to delete a user
    function deleteUser() public {
        // Check if user exists
        require(isUser(msg.sender), "User does not exist.");
        
        // Remove user from mapping
        delete users[msg.sender];
        
        // Decrease user count by 1
        userCount--;
    }
}