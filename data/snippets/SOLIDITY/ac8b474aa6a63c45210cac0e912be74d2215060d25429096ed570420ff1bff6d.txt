pragma solidity ^0.8.4;
/*
 * This is a comment for demonstration purposes.
 * It explains the purpose of the contract below.
 */
contract MyContract {
    // This variable will store the total number of tokens.
    uint256 public totalTokens;
    // This mapping will store the balance of each address.
    mapping(address => uint256) public balances;

    /*
     * This function allows a user to purchase tokens with Ether.
     * The number of tokens is determined by the value of Ether sent.
     * The tokens are then added to the user's balance.
     */
    function buyTokens() public payable {
        // Check if the user has sent enough Ether.
        require(msg.value > 0, "You must send Ether to purchase tokens.");
        // Calculate the number of tokens based on the value of Ether.
        uint256 tokens = msg.value * 100;
        // Add the tokens to the user's balance.
        balances[msg.sender] += tokens;
        // Increase the total number of tokens.
        totalTokens += tokens;
        // Emit an event to notify other contracts about the token purchase.
        emit TokensPurchased(msg.sender, tokens, msg.value);
    }

    /*
     * This function allows a user to sell their tokens for Ether.
     * The Ether is sent directly to the user's address.
     */
    function sellTokens(uint256 amount) public {
        // Check if the user has enough tokens to sell.
        require(balances[msg.sender] >= amount, "You do not have enough tokens to sell.");
        // Calculate the amount of Ether the user will receive.
        uint256 etherAmount = amount / 100;
        // Subtract the tokens from the user's balance.
        balances[msg.sender] -= amount;
        // Decrease the total number of tokens.
        totalTokens -= amount;
        // Send the Ether to the user's address.
        payable(msg.sender).transfer(etherAmount);
        // Emit an event to notify other contracts about the token sale.
        emit TokensSold(msg.sender, amount, etherAmount);
    }

    // Event emitted when tokens are purchased.
    event TokensPurchased(address buyer, uint256 tokens, uint256 etherAmount);
    // Event emitted when tokens are sold.
    event TokensSold(address seller, uint256 tokens, uint256 etherAmount);
}