pragma solidity ^0.8.0; //indicates the version of the solidity compiler we are using

contract MyContract { //start of the contract
    address public owner; //declares a public variable "owner" of type address
    
    mapping (address => uint) public balance; //declares a mapping named "balance" that maps addresses to integers
    
    event Deposit(address indexed from, uint amount); //creates an event to be triggered upon depositing funds
    
    constructor() { //constructor function to set the owner of the contract
        owner = msg.sender; //sets the owner variable to the address that created the contract
    }
    
    function deposit() public payable { //function to deposit funds into the contract and update the balance mapping
        balance[msg.sender] = msg.value; //sets the value of the sender's address to the amount deposited
        emit Deposit(msg.sender, msg.value); //triggers the deposit event
    }
    
    function withdraw(uint amount) public { //function to withdraw funds from the contract
        require(balance[msg.sender] >= amount, "Insufficient balance"); //ensures that the sender has enough balance to withdraw
        balance[msg.sender] -= amount; //subtracts the amount from the sender's balance
        payable(msg.sender).transfer(amount); //transfers the specified amount to the sender's address
    }
    
    modifier onlyOwner { //modifier that restricts access to certain functions to only the contract owner
        require(msg.sender == owner, "Only the contract owner can call this function");
        _; //continue executing the function
    }
    
    function destroy() public onlyOwner { //function to destroy the contract and return the remaining funds to the owner
        selfdestruct(payable(owner)); //destroys the contract and transfers the remaining funds to the owner
    }
}