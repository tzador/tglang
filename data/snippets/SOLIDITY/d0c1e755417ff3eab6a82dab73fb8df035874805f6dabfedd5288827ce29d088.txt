pragma solidity ^0.8.0; //specifying the compiler version

contract MyContract { //declaring the contract
    uint private x; //declaring a private state variable 'x' of type unsigned integer
    
    constructor() { //defining the constructor function
        x = 10; //initializing x with the value 10
    }
    
    function getX() public view returns (uint) { //defining the getter function 'getX' which returns the value of x
        return x;
    }
    
    function setX(uint _x) public { //defining the setter function 'setX' which takes in a parameter '_x' of type uint
        x = _x; //setting x to the value of _x
    }
    
    function increment() public { //defining a function 'increment' which increments the value of x by 1
        x++;
    }
    
    function decrement() public { //defining a function 'decrement' which decrements the value of x by 1
        x--;
    }
    
    function multiply(uint _value) public { //defining a function 'multiply' which multiplies the value of x by the input parameter '_value'
        x *= _value;
    }
    
    function divide(uint _value) public { //defining a function 'divide' which divides the value of x by the input parameter '_value'
        x /= _value;
    }
    
    function reset() public { //defining a function 'reset' which resets the value of x to 0
        delete x;
    }
    
    function isMoreThan50() public view returns (bool) { //defining a function 'isMoreThan50' which checks if the value of x is greater than 50 and returns a boolean value
        return (x > 50);
    }
    
    function performMultipleOperations(uint[] memory _values) public { //defining a function 'performMultipleOperations' which takes in an array '_values' of type uint and performs multiple operations on the value of x
        for(uint i=0; i<_values.length; i++) { //looping through the array and performing operations
            if(i%2 == 0){ //checking if the index is even
                x += _values[i]; //adding the value at that index to x
            }
            else {
                x -= _values[i]; //subtracting the value at that index from x
            }
        }
    }
    
    function checkAddressBalance(address _address) public view returns (uint){ //defining a function 'checkAddressBalance' which takes in an address '_address' and returns its balance
        return _address.balance;
    }
    
    function transferEther(address payable _recipient) public payable { //defining a function 'transferEther' which takes in a payable address '_recipient' and transfers the specified amount of Ether to it
        _recipient.transfer(msg.value);
    }
    
    function transferToken(address _recipient, uint _tokenAmount) public { //defining a function 'transferToken' which takes in an address '_recipient' and a uint '_tokenAmount' and transfers the specified amount of tokens to it
        //transfer logic here
    }
}