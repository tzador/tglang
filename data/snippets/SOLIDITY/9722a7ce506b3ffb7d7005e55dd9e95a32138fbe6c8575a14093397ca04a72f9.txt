/**
 * @title Bank
 * @dev A contract that allows users to deposit and withdraw ether from their accounts.
 */
contract Bank {
    mapping (address => uint) private balances;
    address public owner;

    /**
     * @dev Constructor: sets the owner of the bank to the address that deploys the contract.
     */
    constructor() public {
        owner = msg.sender;
    }

    /**
     * @dev Function to deposit ether into the sender's account.
     * @return The updated balance of the sender's account.
     */
    function deposit() public payable returns (uint) {
        balances[msg.sender] += msg.value;
        return balances[msg.sender];
    }

    /**
     * @dev Function to withdraw ether from the sender's account.
     * @param amount The amount of ether to withdraw.
     * @return The updated balance of the sender's account.
     */
    function withdraw(uint amount) public returns (uint) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        msg.sender.transfer(amount);
        return balances[msg.sender];
    }

    /**
     * @dev Function to get the current balance in the sender's account.
     * @return The current balance in the sender's account.
     */
    function getBalance() public view returns (uint) {
        return balances[msg.sender];
    }

    /**
     * @dev Function to transfer ether from the sender's account to another account.
     * @param recipient The address to transfer ether to.
     * @param amount The amount of ether to transfer.
     * @return True if the transfer is successful, otherwise returns false.
     */
    function transfer(address recipient, uint amount) public returns (bool) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        return true;
    }
}