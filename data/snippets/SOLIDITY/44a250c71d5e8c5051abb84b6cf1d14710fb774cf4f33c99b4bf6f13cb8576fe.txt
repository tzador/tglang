// this is a contract to store and retrieve employee information
contract EmployeeInfo{
    
    // state variables to store data
    mapping(uint => string) private employeeNames; // mapping to store employee names with their employee IDs
    mapping(uint => uint) private employeeSalaries; // mapping to store employee salaries with their employee IDs
    mapping(uint => uint) private employeeAges; // mapping to store employee ages with their employee IDs
  
    // event to log employee information updates
    event EmployeeUpdated(uint employeeID, string name, uint salary, uint age);
    
    // function to add a new employee and their information to the contract
    function addEmployee(uint employeeID, string memory _name, uint _salary, uint _age) public{
        
        // check if the employee ID is already taken 
        require(bytes(employeeNames[employeeID]).length == 0, "Employee ID already taken.");
        
        // add the employee's information to the mappings
        employeeNames[employeeID] = _name;
        employeeSalaries[employeeID] = _salary;
        employeeAges[employeeID] = _age;
        
        // log the employee information update
        emit EmployeeUpdated(employeeID, _name, _salary, _age);
    }
    
    // function to update an employee's salary
    function updateSalary(uint employeeID, uint _salary) public{
        
        // check if the employee exists
        require(bytes(employeeNames[employeeID]).length != 0, "Employee ID does not exist.");
        
        // update the employee's salary in the mapping
        employeeSalaries[employeeID] = _salary;
        
        // log the employee information update
        emit EmployeeUpdated(employeeID, employeeNames[employeeID], _salary, employeeAges[employeeID]);
    }
    
    // function to update an employee's age
    function updateAge(uint employeeID, uint _age) public{
        
        // check if the employee exists
        require(bytes(employeeNames[employeeID]).length != 0, "Employee ID does not exist.");
        
        // update the employee's age in the mapping
        employeeAges[employeeID] = _age;
        
        // log the employee information update
        emit EmployeeUpdated(employeeID, employeeNames[employeeID], employeeSalaries[employeeID], _age);
    }
    
    // function to retrieve an employee's information
    function getEmployeeInfo(uint employeeID) public view returns(string memory, uint, uint){
        
        // check if the employee exists
        require(bytes(employeeNames[employeeID]).length != 0, "Employee ID does not exist.");
        
        // return the employee's information
        return(employeeNames[employeeID], employeeSalaries[employeeID], employeeAges[employeeID]);
    }
    
    // function to delete an employee's information from the contract
    function deleteEmployee(uint employeeID) public{
        
        // check if the employee exists
        require(bytes(employeeNames[employeeID]).length != 0, "Employee ID does not exist.");
        
        // delete the employee's information from the mappings
        delete employeeNames[employeeID];
        delete employeeSalaries[employeeID];
        delete employeeAges[employeeID];
        
        // log the employee information update
        emit EmployeeUpdated(employeeID, "", 0, 0);
    }
}