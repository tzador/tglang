pragma solidity >=0.4.22 <0.7.0; // Sets the version of Solidity

// Defines a smart contract named "Example"
contract Example {
    
    // Declares a state variable "owner" to store the address of the contract owner
    address public owner;
    
    // Defines an array "items" to store strings
    string[] items;
    
    // Defines a mapping "balances" to store the balances of each address
    mapping (address => uint) balances;
    
    // Declares an event that emits "LogNewItem" when a new item is added to the array
    event LogNewItem(string item);
    
    // Declares a constructor function that sets the owner of the contract
    constructor() public {
        owner = msg.sender;
    }
    
    // Creates a modifier "onlyOwner" that restricts function access to the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }
    
    // Defines a function "addItem" that adds a new item to the array and emits "LogNewItem" event
    function addItem(string memory newItem) public onlyOwner {
        items.push(newItem);
        emit LogNewItem(newItem);
    }
    
    // Defines a function "getItems" that returns the array of items
    function getItems() public view returns (string[] memory){
        return items;
    }
    
    // Defines a function "getBalance" that returns the balance of the given address
    function getBalance(address user) public view returns (uint balance) {
        balance = balances[user];
    }
    
    // Defines a function "deposit" that allows a user to deposit ether to their balance
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
    
    // Defines a function "withdraw" that allows a user to withdraw ether from their balance
    function withdraw(uint amount) public {
        require(amount <= balances[msg.sender], "Insufficient balance.");
        balances[msg.sender] -= amount;
        msg.sender.transfer(amount);
    }
}