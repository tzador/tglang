// Import statements
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

// Contract definition
contract MyContract is Ownable, ReentrancyGuard {

      // State variables
      address[] public addresses; // Dynamic array of addresses
      mapping(address => uint) public balances; // Mapping of address balances

      // Events
      event Deposit(address depositor, uint amount);
      event Withdraw(address withdrawer, uint amount);

      // Constructor function
      constructor() {

      }

      // Modifier for only owner function access
      modifier onlyOwner() {
            require msg.sender == owner, "Ownable: caller is not the owner";
            _;
      }

      // Function to deposit funds
      function deposit() public payable {
            require(msg.value > 0, "Deposit amount must be greater than 0");
            balances[msg.sender] += msg.value;
            addresses.push(msg.sender);
            emit Deposit(msg.sender, msg.value);
      }

      // Function to withdraw funds
      function withdraw(uint amount) public onlyOwner nonReentrant {
            require(amount <= address(this).balance, "Insufficient balance in contract");
            payable(msg.sender).transfer(amount);
            emit Withdraw(msg.sender, amount);
      }

      // Fallback function to receive ether
      receive() external payable {
            deposit();
      }

      // Function to get total address count
      function getAddressCount() public view returns (uint) {
            return addresses.length;
      }

      // Function to get balance for a specific address
      function getBalance(address account) public view returns (uint) {
            return balances[account];
      }
}