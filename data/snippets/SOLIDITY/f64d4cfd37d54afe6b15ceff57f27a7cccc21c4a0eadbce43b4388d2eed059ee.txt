pragma solidity ^0.4.0;

// Example contract implementing inheritance and modifiers

contract Bank {
    string private _name;

    // Modifiers can be used to restrict access to certain functions
    modifier onlyOwner() {
        require(msg.sender == owner);
        _; // Underscore indicates that function body should be inserted here
    }

    // Contract owner
    address public owner;

    constructor(string name) public {
        _name = name;
        owner = msg.sender;
    }

    // Function to change the contract owner
    function changeOwner(address newOwner) public onlyOwner {
        owner = newOwner;
    }

    // Standard functions for retrieving contract information
    function getName() public view returns (string) {
        return _name;
    }

    function getOwner() public view returns (address) {
        return owner;
    }
}

// Example contract that inherits from Bank
contract BankAccount is Bank {
    uint private _balance;

    // Function to deposit funds in the account
    function deposit(uint amount) public {
        // Only the owner of the contract can deposit funds
        require(msg.sender == owner);
        _balance += amount;
    }
}