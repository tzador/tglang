pragma solidity ^0.4.0; // specify the version of Solidity used

contract MathOperations { // define a contract named MathOperations
    
    // declare variables
    uint public addResult;
    uint public subResult;
    uint public mulResult;
    uint public divResult;
    
    function addNumbers(uint _num1, uint _num2) public { // define a function to add two numbers
        
        addResult = _num1 + _num2; // assign the result of the addition to addResult
    }
    
    function subtractNumbers(uint _num1, uint _num2) public { // define a function to subtract two numbers
        
        subResult = _num1 - _num2; // assign the result of the subtraction to subResult
    }
    
    function multiplyNumbers(uint _num1, uint _num2) public { // define a function to multiply two numbers
        
        mulResult = _num1 * _num2; // assign the result of the multiplication to mulResult
    }
    
    function divideNumbers(uint _num1, uint _num2) public { // define a function to divide two numbers
        
        divResult = _num1 / _num2; // assign the result of the division to divResult
    }
    
    function pow(uint _base, uint _exponent) public constant returns (uint result) { // define a function to calculate power
        
        // calculate the result using a for loop
        result = _base;
        
        for (uint i = 1; i < _exponent; i++) {
            
            result *= _base; // calculate the result using successive multiplication
        }
    }
    
    function mod(uint _num1, uint _num2) public constant returns (uint result) { // define a function to calculate the modulus
        
        result = _num1 % _num2; // assign the result of the modulus operation to result
    }
    
}