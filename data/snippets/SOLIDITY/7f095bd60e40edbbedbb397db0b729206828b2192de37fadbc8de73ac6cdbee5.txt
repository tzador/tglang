pragma solidity ^0.8.5;


//Creating a contract called "MyContract"
contract MyContract {
    //Data variable to store a string
    string public myString = "Hello World!";

    //Data variable to store a uint
    uint public myUint = 12345;

    //Data variable to store a boolean
    bool public myBool = true;

    //Array to store addresses
    address[] public myAddressArray;

    //Mapping to store key-value pairs of type uint => bool
    mapping(uint => bool) public myMapping;

    //Creating an enum to store different colors
    enum Color { RED, GREEN, BLUE }

    //Creating a state variable of type Color
    Color public myColor = Color.RED;

    //Event fired when a new string is set
    event NewStringSet(string myNewString);

    //Function to set the value of myString
    function setString(string memory _newString) public {
        myString = _newString;
        //Triggering the NewStringSet event
        emit NewStringSet(_newString);
    }

    //Function to add an address to myAddressArray
    function addAddress(address _address) public {
        myAddressArray.push(_address);
    }

    //Function to add a key-value pair to myMapping
    function addKeyValue(uint _key, bool _value) public {
        myMapping[_key] = _value;
    }

    //Function to delete an address from myAddressArray
    function deleteAddress(uint _index) public {
        //Swapping the address to be deleted with the last address in the array
        myAddressArray[_index] = myAddressArray[myAddressArray.length - 1];
        //Deleting the last element in the array (previously swapped)
        myAddressArray.pop();
    }
}