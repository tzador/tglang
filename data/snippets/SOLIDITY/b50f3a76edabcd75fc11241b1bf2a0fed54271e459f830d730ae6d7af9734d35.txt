// Define a contract called "Token"
contract Token {
    // Define variables
    address owner;
    uint256 totalSupply;
    mapping (address => uint256) balances;
    
    // Constructor function
    constructor() public {
        owner = msg.sender;
        totalSupply = 100000;
        balances[msg.sender] = totalSupply;
    }
    
    // Function to transfer tokens from sender's account to another account
    function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] >= _value); // Check if sender has enough tokens to transfer
        require(balances[_to] + _value >= balances[_to]); // Check for overflow
        balances[msg.sender] -= _value; // Deduct tokens from sender's account
        balances[_to] += _value; // Add tokens to receiver's account
        return true; // Return true if successful
    }
    
    // Function to get balance of a particular address
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }
    
    // Function to mint new tokens
    function mint(uint256 _amount) public {
        require(msg.sender == owner); // Only owner can mint new tokens
        require(totalSupply + _amount >= totalSupply); // Check for overflow
        totalSupply += _amount; // Add new tokens to total supply
        balances[owner] += _amount; // Add new tokens to owner's account
    }
    
    // Function to burn tokens
    function burn(uint256 _amount) public {
        require(msg.sender == owner); // Only owner can burn tokens
        require(balances[owner] >= _amount); // Check if owner has enough tokens to burn
        require(totalSupply - _amount <= totalSupply); // Check for underflow
        totalSupply -= _amount; // Deduct tokens from total supply
        balances[owner] -= _amount; // Deduct tokens from owner's account
    }
}