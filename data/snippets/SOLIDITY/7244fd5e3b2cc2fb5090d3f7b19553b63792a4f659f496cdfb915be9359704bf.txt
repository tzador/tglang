// SPDX-License-Identifier: <SPDX-License>
pragma solidity ^0.8.0; // Setting compiler version

// Importing required contracts
import "./Ownable.sol";
import "./SafeMath.sol";

contract Token is Ownable {
    using SafeMath for uint256; // Using SafeMath library for integer operations

    string public name = "MyToken";
    string public symbol = "MYT";
    uint8 public decimals = 18;

    uint256 public totalSupply;

    mapping(address => uint256) public balances; // Mapping to store address balances
    mapping(address => mapping(address => uint256)) public allowance; // Mapping to store allowed tokens for transfer

    event Approval(address indexed owner, address indexed spender, uint256 amount); // Event to be emitted on token approval

    event Transfer(address indexed from, address indexed to, uint256 amount); // Event to be emitted on token transfer

    // Constructor to initialize token supply and allocate balance to owner
    constructor(uint256 _initialSupply) {
        totalSupply = _initialSupply; // Setting total supply
        balances[msg.sender] = _initialSupply; // Allocating balance to contract deployer/owner
    }

    // Function to get token balance for an address
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner]; 
    }

    // Function to approve transfer of tokens to another address
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value); // Emitting approval event
        return true;
    }

    // Function to transfer tokens from one address to another
    function transfer(address _to, uint256 _amount) public returns (bool) {
        require(_to != address(0), "Invalid address"); // Requiring valid address
        require(_amount <= balances[msg.sender], "Insufficient balance"); // Requiring sender to have enough balance

        balances[msg.sender] = balances[msg.sender].sub(_amount); // Subtracting amount from sender's balance
        balances[_to] = balances[_to].add(_amount); // Adding amount to receiver's balance
        emit Transfer(msg.sender, _to, _amount); // Emitting transfer event
        return true;
    }

    // Function to transfer tokens from one address to another with allowance
    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {
        require(_from != address(0), "Invalid address"); // Requiring valid from address
        require(_to != address(0), "Invalid address"); // Requiring valid to address
        require(_amount <= balances[_from], "Insufficient balance"); // Requiring from address to have enough balance
        require(_amount <= allowance[_from][msg.sender], "Insufficient allowance"); // Requiring sender to have enough allowance

        balances[_from] = balances[_from].sub(_amount); // Subtracting amount from from address balance
        balances[_to] = balances[_to].add(_amount); // Adding amount to to address balance
        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_amount); // Subtracting amount from sender's allowance
        emit Transfer(_from, _to, _amount); // Emitting transfer event
        return true;
    }
}