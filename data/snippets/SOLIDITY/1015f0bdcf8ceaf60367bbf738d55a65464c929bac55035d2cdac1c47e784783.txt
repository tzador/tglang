pragma solidity ^0.8.0; //using pragma to specify the Solidity version being used

//declaring a contract named TestContract
contract TestContract {
    
    address public owner; //declaring a public state variable owner of type address
    
    //constructor function to initialize TestContract and set the owner variable to the creator of the contract
    constructor() {
        owner = msg.sender;
    }
    
    //function modifier used to restrict who can call a function
    modifier onlyOwner() {
        require(msg.sender == owner); //using require to validate the condition, else revert 
        _; //placeholder for the function's body
    }
    
    //struct declaration to store information about a person
    struct Person {
        string name;
        uint age;
    }
    
    mapping (address => Person) public people; //declaring a public mapping called people that maps addresses to Person entries
    
    //event declaration to be emitted when a new person is added to the people mapping
    event NewPersonAdded(address indexed _address, string _name, uint _age);
    
    //function that adds a new person to the people mapping, can only be called by the contract owner
    function addPerson(string memory _name, uint _age) public onlyOwner {
        people[msg.sender] = Person(_name, _age); //setting the Person entry for the caller's address
        emit NewPersonAdded(msg.sender, _name, _age); //emitting the NewPersonAdded event
    }
    
    //function that returns the name and age of a person based on their address
    function getPerson(address _address) public view returns(string memory, uint) {
        Person memory person = people[_address]; //declaring a Person variable and initializing it to the Person entry for the given address
        return (person.name, person.age); //returning the name and age of the person
    }
}