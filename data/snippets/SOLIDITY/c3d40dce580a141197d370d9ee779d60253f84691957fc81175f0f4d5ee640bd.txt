/* Contracts are similar to classes in other programming languages.
They contain data and functions that can be called by other contracts or external accounts. */

contract MyContract {
    
    // State variables are permanently stored in contract storage.
    uint256 public myNumber; // Declaring a public state variable
    address public myAddress = msg.sender; // Declaring an address variable and initializing it with the sender's address
    
    // Events allow for the logging of major contract updates or actions
    event NumberUpdated(uint256 newNumber); // Defining an event with a parameter
    
    // Modifiers are used to restrict certain functions from executing unless certain conditions are met
    modifier onlyOwner { // Defining a modifier
        require(msg.sender == myAddress, "Only the owner can call this function.");
        _; // Indicating where the modified function will be inserted
    }
    
    // The constructor function is executed once at the time of contract creation
    constructor(uint256 _myNumber) public { // Defining the constructor with a parameter
        myNumber = _myNumber; // Initializing a state variable
    }
    
    // Functions are used to carry out specific tasks or return data
    function updateNumber(uint256 _newNumber) public onlyOwner { // Adding the onlyOwner modifier to restrict execution
        myNumber = _newNumber; // Updating the state variable
        emit NumberUpdated(_newNumber); // Emitting an event
    }
    
    // Functions can have return values and/or parameters
    function getNumber() public view returns (uint256) { // Declaring a view function with a return value
        return myNumber; // Returning the state variable
    }
}