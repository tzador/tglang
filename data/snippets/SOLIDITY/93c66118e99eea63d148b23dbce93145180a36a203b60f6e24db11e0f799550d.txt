// An example contract implementing the SOLID principle of Interface Segregation

interface IBank {
    function deposit(uint _amount) external;
    function withdraw(uint _amount) external;
}

interface IInterest {
    function calculateInterest(uint _amount) external returns(uint);
}

interface ILoan {
    function requestLoan(uint _amount) external;
    function repayLoan(uint _amount) external;
}

contract Bank is IBank, IInterest, ILoan {

    mapping(address => uint) private balances;
    uint private totalBalance;

    // IBank interface implementation
    function deposit(uint _amount) external override {
        require(_amount > 0, "Deposit amount must be greater than 0.");
        balances[msg.sender] += _amount;
        totalBalance += _amount;
    }

    function withdraw(uint _amount) external override {
        require(balances[msg.sender] >= _amount, "Insufficient balance.");
        balances[msg.sender] -= _amount;
        totalBalance -= _amount;
        msg.sender.transfer(_amount);
    }

    // IInterest interface implementation
    function calculateInterest(uint _amount) external override returns(uint) {
        return _amount * 5 / 100; // 5% annual interest rate
    }

    // ILoan interface implementation
    function requestLoan(uint _amount) external override {
        require(_amount <= totalBalance * 2, "Loan amount cannot exceed double the total balance.");
        balances[msg.sender] += _amount;
        totalBalance += _amount;
    }

    function repayLoan(uint _amount) external override {
        require(balances[msg.sender] >= _amount, "Insufficient balance.");
        balances[msg.sender] -= _amount;
        totalBalance -= _amount;
    }
}