pragma solidity ^0.8.0;

// Contract to create a basic token
contract BasicToken {
    // Variables for total supply and mapping for balances
    uint256 public totalSupply;
    mapping(address => uint256) public balances;
    
    // Events to notify when tokens are transferred
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    // Constructor to set initial supply and assign it to the contract creator
    constructor(uint256 _initialSupply) {
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply;
    }
    
    // Function to transfer tokens from one address to another
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value); // Checks if sender has enough tokens
        require(balances[_to] + _value >= balances[_to]); // Overflow check
        
        balances[msg.sender] -= _value; // Decrease sender's balance
        balances[_to] += _value; // Increase receiver's balance
        
        emit Transfer(msg.sender, _to, _value); // Event to notify
        
        return true;
    }
    
    // Function to transfer tokens from one address to multiple addresses
    function transferMultiple(address[] memory _addresses, uint256[] memory _values) public returns (bool success) {
        require(_addresses.length == _values.length); // Checks if equal number of addresses and values are provided
        
        for (uint256 i = 0; i < _addresses.length; i++) {
            require(balances[msg.sender] >= _values[i]); // Checks if sender has enough tokens
            require(balances[_addresses[i]] + _values[i] >= balances[_addresses[i]]); // Overflow check
            
            balances[msg.sender] -= _values[i]; // Decrease sender's balance
            balances[_addresses[i]] += _values[i]; // Increase receiver's balance
            
            emit Transfer(msg.sender, _addresses[i], _values[i]); // Event to notify
        }
        
        return true;
    }
}