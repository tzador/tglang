/**
 * @title ERC20Mintable
 * @dev ERC20 minting logic
 */
 
import "./ERC20.sol";
import "./SafeMath.sol";

contract ERC20Mintable is ERC20 {
    using SafeMath for uint256;

    event MintFinished();

    bool private _mintingFinished = false;

    /**
     * @dev Checks if minting is finished.
     * @return True if minting is finished, false otherwise.
     */
    function mintingFinished() public view returns (bool) {
        return _mintingFinished;
    }

    /**
     * @dev Function to mint tokens.
     * @param to The address that will receive the minted tokens.
     * @param value The amount of tokens to mint.
     * @return A boolean that indicates if the operation was successful.
     */
    function mint(address to, uint256 value) public returns (bool) {
        require(!_mintingFinished, "Minting already finished.");
        require(to != address(0), "Cannot mint to the zero address.");

        totalSupply = totalSupply.add(value);
        balances[to] = balances[to].add(value);
        emit Transfer(address(0), to, value);
        return true;
    }

    /**
     * @dev Function to finish minting.
     * @return A boolean that indicates if the operation was successful.
     */
    function finishMinting() public returns (bool) {
        require(!_mintingFinished, "Minting already finished.");

        _mintingFinished = true;
        emit MintFinished();
        return true;
    }

    /**
     * @dev Modifier to check if minting is still ongoing.
     */
    modifier canMint() {
        require(!_mintingFinished, "Minting already finished.");
        _;
    }

    /**
     * @dev Overridden transfer function to check if minting is still ongoing.
     */
    function transfer(address to, uint256 value) public canMint returns (bool) {
        return super.transfer(to, value);
    }

    /**
     * @dev Overridden transferFrom function to check if minting is still ongoing.
     */
    function transferFrom(address from, address to, uint256 value) public canMint returns (bool) {
        return super.transferFrom(from, to, value);
    }

    /**
     * @dev Overridden approve function to check if minting is still ongoing.
     */
    function approve(address spender, uint256 value) public canMint returns (bool) {
        return super.approve(spender, value);
    }

    /**
     * @dev Overridden increaseAllowance function to check if minting is still ongoing.
     */
    function increaseAllowance(address spender, uint256 addedValue) public canMint returns (bool) {
        return super.increaseAllowance(spender, addedValue);
    }

    /**
     * @dev Overridden decreaseAllowance function to check if minting is still ongoing.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public canMint returns (bool) {
        return super.decreaseAllowance(spender, subtractedValue);
    }
}