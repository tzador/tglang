// Contract that manages a list of employee salaries
// Implements the OpenZeppelin Ownable library for access control
// Follows the Single Responsibility Principle and Open-Closed Principle
// Utilizes the SafeMath library for secure arithmetic operations
pragma solidity ^0.5.0;

// Import OpenZeppelin libraries 
import "github.com/OpenZeppelin/openzeppelin-contracts/contracts/ownership/Ownable.sol";
import "github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol";

// Define the contract
contract EmployeePayroll is Ownable {

    // Define SafeMath library for secure arithmetic operations
    using SafeMath for uint256;

    // Define an Employee struct to store employee data
    struct Employee {
        address addr; // employee's address
        uint256 salary; // employee's salary in ether
    }

    // Define variables
    mapping(address => Employee) public employees; // maps employee's address to employee struct
    uint256 public totalSalaries; // total salaries of all employees

    // Declare events to emit on employee added and removed
    event EmployeeAdded(address indexed employee, uint256 salary);
    event EmployeeRemoved(address indexed employee, uint256 salary);

    // Function to add an employee to the payroll
    function addEmployee(address _employee, uint256 _salary) public onlyOwner {
        // Check that employee address is not empty
        require(_employee != address(0), "Employee address cannot be empty");
        // Check that employee does not already exist
        require(employees[_employee].addr == address(0), "Employee already exists");
        // Check that salary is greater than zero
        require(_salary > 0, "Salary must be greater than zero");
        
        // Add new employee to mapping
        employees[_employee] = Employee(_employee, _salary);
        // Increment total salaries
        totalSalaries = totalSalaries.add(_salary);

        // Emit event
        emit EmployeeAdded(_employee, _salary);
    }

    // Function to remove an employee from the payroll
    function removeEmployee(address _employee) public onlyOwner {
        // Check that employee address is not empty
        require(_employee != address(0), "Employee address cannot be empty");
        // Check that employee exists
        require(employees[_employee].addr != address(0), "Employee does not exist");

        // Get employee's salary
        uint256 salary = employees[_employee].salary;
        
        // Remove employee from mapping
        delete employees[_employee];
        // Decrement total salaries
        totalSalaries = totalSalaries.sub(salary);

        // Emit event
        emit EmployeeRemoved(_employee, salary);
    }
}