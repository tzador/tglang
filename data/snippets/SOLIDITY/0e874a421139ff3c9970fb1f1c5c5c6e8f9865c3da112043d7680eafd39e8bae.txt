// An abstract contract representing a token
contract Token {

    // Variables
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    string public version;

    // Constructor
    constructor(
        string _name,
        string _symbol,
        uint8 _decimals,
        uint256 _totalSupply,
        string _version
    ) public {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;
        version = _version;
    }

    /////// SOME FUNCTIONS //////

    // Check balance of the token holder
    function balanceOf(address _owner) public view returns (uint256 balance);

    // Transfer tokens from sender to recipient
    function transfer(address _to, uint256 _value) public returns (bool success);

    // Transfer tokens from a specific address to recipient
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    // Allow spender to withdraw from sender's account multiple times, up to the allowance amount
    function approve(address _spender, uint256 _value) public returns (bool success);

    // Check the remaining allowed value for spender to withdraw from owner's account
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);

    // Triggered when tokens are transferred, but not when transferred by the owner to themselves
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    // Triggered when approved amount is changed
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}