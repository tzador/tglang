pragma solidity 0.8.6;

contract Bank {
    
    // State variables
    address public manager;
    mapping (address => uint) balances;
    
    // Events
    event Deposit(address indexed _from, uint _amount, string _currency);
    event Withdrawal(address indexed _to, uint _amount, string _currency);
    
    // Constructor
    constructor() {
        // Set contract creator as manager
        manager = msg.sender;
    }
    
    // Modifiers
    modifier OnlyManager() {
        require(msg.sender == manager, "Only the manager can call this function.");
        _;
    }
    
    // Functions
    
    // Deposit function
    function deposit(uint _amount, string memory _currency) public payable {
        // Check if amount is not 0
        require(_amount > 0, "Amount must be greater than 0.");
        // Add the deposited amount to the sender's balance
        balances[msg.sender] += _amount;
        // Emit Deposit event
        emit Deposit(msg.sender, _amount, _currency);
    }
    
    // Withdraw function
    function withdraw(uint _amount, string memory _currency) public payable OnlyManager {
        // Check if amount is not 0
        require(_amount > 0, "Amount must be greater than 0.");
        // Check if contract has enough balance to cover withdrawal
        require(address(this).balance >= _amount, "Not enough balance in the contract.");
        // Transfer the specified amount to the manager's address
        payable(manager).transfer(_amount);
        // Subtract the withdrawn amount from the sender's balance
        balances[msg.sender] -= _amount;
        // Emit Withdrawal event
        emit Withdrawal(msg.sender, _amount, _currency);
    }
}