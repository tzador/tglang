//---- smart contract ----

pragma solidity ^0.8.0;

contract MyContract {
    
    //---- state variables ----
    
    address payable owner;
    mapping(address => uint) public balances;
    
    //---- events ----
    
    event Deposit(address from, uint amount);
    
    //---- constructor ----
    
    constructor() {
        owner = payable(msg.sender);
    }
    
    //---- modifiers ----
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can execute this function.");
        _;
    }
    
    //---- functions ----
    
    function deposit() external payable {
        require(msg.value > 0, "No value sent to deposit.");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    function withdraw(uint amount) external onlyOwner {
        require(amount <= balances[owner], "Insufficient balance.");
        owner.transfer(amount);
        balances[owner] -= amount;
    }
    
    function getBalance(address account) external view returns(uint) {
        return balances[account];
    }
    
    function kill() external onlyOwner {
        selfdestruct(owner);
    }
}