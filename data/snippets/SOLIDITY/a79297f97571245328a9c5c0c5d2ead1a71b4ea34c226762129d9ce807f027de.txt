// Disclaimer: This is for example purposes only, do not use in production
// Contract A
// This contract implements the Withdraw pattern using the inheritance-based approach
contract A {
    address owner;

    // Constructor sets the owner of the contract
    constructor() {
        owner = msg.sender;
    }

    // Modifier to restrict access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    // Withdraw function
    function withdraw(uint amount) public onlyOwner {
        require(amount <= address(this).balance, "Insufficient balance");
        payable(owner).transfer(amount);
    }
}

// Contract B
// This contract inherits from contract A and uses the withdraw function
contract B is A {

    // Mapping to store the balances of different users
    mapping(address => uint) public balances;

    // Function to deposit funds into the contract
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    // Function to withdraw funds from the contract
    function withdrawFunds(uint amount) public {
        require(amount <= balances[msg.sender], "Insufficient funds");
        // Check if the user has enough balance to cover the withdrawal and make the call to the withdraw function in contract A
        this.withdraw(amount);
        balances[msg.sender] -= amount;
    }
}