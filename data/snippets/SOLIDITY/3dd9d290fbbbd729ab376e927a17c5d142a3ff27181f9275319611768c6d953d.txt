// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.4;

// Custom SafeMath library for safe arithmetic operations
library SafeMath {
    // Safe addition
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    // Safe subtraction
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    // Safe multiplication
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.3.0/contracts/math/SafeMath.sol
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    // Safe division
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }
}

// Contract that uses the SafeMath library to perform safe arithmetic operations
contract SafeArithmetic {
    using SafeMath for uint256;

    uint256 public num1 = 5;
    uint256 public num2 = 3;
    uint256 public num3;
    uint256 public num4;

    function calculateAddition() public {
        // Using SafeMath to add two numbers safely
        num3 = num1.add(num2);
        // Checking the result
        assert(num3 == 8);
    }

    function calculateSubtraction() public {
        // Using SafeMath to subtract two numbers safely
        num4 = num1.sub(num2);
        // Checking the result
        assert(num4 == 2);
    }
}