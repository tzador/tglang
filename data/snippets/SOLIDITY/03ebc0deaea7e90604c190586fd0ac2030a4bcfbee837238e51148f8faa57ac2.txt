contract MyContract { // declare a contract called MyContract

    address public owner; // declare a public variable owner of type address

    struct Person { // create a struct called Person
        string name; // declare string variable name inside Person struct
        uint age; // declare uint variable age inside Person struct
    }

    mapping (address => Person) public people; // declare a public mapping called people that maps an address to a Person

    event personAdded(string name, uint age); // declare an event called personAdded that takes in a name and age as parameters

    constructor() public { // declare a constructor function
        owner = msg.sender; // set the owner variable to the address of the contract deployer
    }

    modifier onlyOwner() { // declare a modifier called onlyOwner
        require(msg.sender == owner); // require that the function caller is the owner
        _; // continue with the execution of the function
    }

    function addPerson(string memory _name, uint _age) public onlyOwner { // declare a function called addPerson that takes in a name and age as parameters and can only be called by the owner
        people[msg.sender] = Person(_name, _age); // add a new Person to the people mapping with the caller's address as the key and the provided name and age
        emit personAdded(_name, _age); // emit the personAdded event with the provided name and age as parameters
    }

    function getPerson(address _address) public view returns (string memory, uint) { // declare a function called getPerson that takes in an address as a parameter and returns a string and a uint
        return (people[_address].name, people[_address].age); // return the name and age of the person associated with the provided address from the people mapping
    }
}