pragma solidity ^0.8.4;

contract Ownable {
    // Solidity has a built-in `owner` variable, so we don't need to declare it ourselves
    // Instead, we'll use `msg.sender` to reference the address of the contract owner
    
    // `onlyOwner` modifier restricts functions to only be called by the contract owner
    modifier onlyOwner {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }
    
    // `public` makes the `owner` variable readable by other contracts
    // `private` makes it only readable by this contract (and not others)
    address public owner;
    
    constructor() {
        // Set the `owner` variable to the address of the person deploying the contract
        owner = msg.sender;
    }
    
    // `transferOwnership` function for the contract owner to transfer ownership to another address
    function transferOwnership(address newOwner) public onlyOwner {
        // Check that the new owner address is not 0x0 (or non-existent)
        require(newOwner != address(0), "New owner address is invalid");
        
        // Set the `owner` variable to the new owner's address
        owner = newOwner;
    }
}

// `Bank` contract inherits from `Ownable` contract
contract Bank is Ownable {
    
    // Mapping to keep track of balances for each address
    mapping(address => uint) public balances;
    
    // `deposit` function to deposit funds into the contract
    function deposit() public payable {
        // Check that the deposit amount is not 0
        require(msg.value > 0, "Deposit amount must be greater than 0");
        
        // Add the deposited amount to the balance of the sender
        balances[msg.sender] += msg.value;
    }
    
    // `withdraw` function to withdraw funds from the contract
    function withdraw(uint amount) public onlyOwner {
        // Check that the amount being withdrawn is not more than the balance of the contract
        require(amount <= address(this).balance, "Insufficient balance in contract");
        
        // Transfer the requested amount to the contract owner's address
        payable(owner).transfer(amount);
    }
}

// `Token` contract for creating a custom token
contract Token is Ownable {
    
    // Mapping to keep track of balances for each address
    mapping(address => uint) public balances;
    
    // Mapping to allow for allowance functionality
    mapping(address => mapping(address => uint)) public allowance;
    
    // `mint` function for the contract owner to mint new tokens
    function mint(address receiver, uint amount) public onlyOwner {
        // Check that the receiver address is not 0x0 (or non-existent)
        require(receiver != address(0), "Receiver address is invalid");
        
        // Mint the requested amount of tokens to the receiver's balance
        balances[receiver] += amount;
    }
    
    // `approve` function to allow a spender to transfer tokens on behalf of the sender
    function approve(address spender, uint amount) public {
        // Set the allowance of the spender to the requested amount
        allowance[msg.sender][spender] = amount;
    }
    
    // `transferFrom` function for the spender to transfer tokens from the sender's allowance
    function transferFrom(address sender, address recipient, uint amount) public {
        // Check that the sender has enough allowance to transfer the requested amount
        require(amount <= allowance[sender][msg.sender], "Insufficient allowance for transfer");
        
        // Subtract the amount from the sender's allowance
        allowance[sender][msg.sender] -= amount;
        
        // Transfer the requested amount from the sender to the recipient
        balances[sender] -= amount;
        balances[recipient] += amount;
    }
}