// A contract to store and transfer funds

pragma solidity ^0.6.0;

contract MyContract {
    
    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    
    // Variables
    address payable public owner;
    mapping(address => uint256) public balances;
    
    // Constructor
    constructor() public {
        owner = msg.sender; // set owner to the address that deployed the contract
    }
    
    // Modifiers
    modifier onlyOwner {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }
    
    // Functions
    function sendFunds(address _to, uint256 _value) public payable {
        // Check if contract has enough balance to send
        require(address(this).balance >= _value, "Not enough balance in contract");
        
        // Transfer funds
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        
        // Emit event
        emit Transfer(msg.sender, _to, _value);
    }
    
    function withdrawFunds(uint256 _value) public onlyOwner {
        // Check if contract has enough balance to withdraw
        require(address(this).balance >= _value, "Not enough balance in contract");
        
        // Withdraw funds
        owner.transfer(_value);
        
        // Update balances
        balances[owner] -= _value;
        
        // Emit event
        emit Transfer(address(this), owner, _value);
    }
}