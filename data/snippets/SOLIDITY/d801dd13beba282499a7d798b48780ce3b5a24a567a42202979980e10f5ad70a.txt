pragma solidity ^0.8.4; // Sets the compiler version

contract Voting { // Declares a contract called Voting
  struct Voter { // Declares a struct called Voter
    bool voted;  // Declares a boolean variable 'voted'
    string candidate; // Declares a string variable 'candidate'
  }

  mapping(address => Voter) public voters; // Declares a mapping that maps addresses to voters

  // Declares an event that will be emitted when a voter casts their vote
  event VoteCast(address voterAddress, string candidate);

  function vote(string memory _candidate) public { // Declares a public function called vote
    require(!voters[msg.sender].voted, "This voter has already voted"); // Checks if the voter has not already voted
    voters[msg.sender].voted = true; // Sets the voted variable for the current voter to true
    voters[msg.sender].candidate = _candidate; // Sets the candidate variable for the current voter to the chosen candidate
    emit VoteCast(msg.sender, _candidate); // Emits the VoteCast event 
  }

  function getVote(address _voter) public view returns(string memory) { // Declares a public view function called getVote
    return voters[_voter].candidate; // Returns the chosen candidate for the given voter's address
  }

}