// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

// this is an interface for a ERC20 token contract
interface IERC20 {
    
    // these are events that will be emitted on transfers and approvals
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    // these are functions that will be implemented by the ERC20 token contract
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

// this is an implementation of the ERC20 token contract
contract MyToken is IERC20 {
    
    // this is a mapping of addresses to uints, representing balances of tokens
    mapping (address => uint256) private _balances;
    
    // this is a mapping of addresses to a mapping of addresses to uints, representing
    // approved allowances of tokens
    mapping (address => mapping (address => uint256)) private _allowances;
    
    // this is the total supply of tokens
    uint256 private _totalSupply;
    
    // the name, symbol, and number of decimals for the token
    string public name;
    string public symbol;
    uint8 public decimals;
    
    constructor(string memory _name, string memory _symbol, uint8 _decimals) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }
    
    // this function returns the total supply of tokens
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }
    
    // this function returns the balance of the specified account
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    
    // this function transfers tokens from the sender's account to the recipient's account
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    // this function returns the amount of tokens that the spender is allowed to spend on behalf of the owner
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    // this function approves the spender to spend the specified amount of tokens on behalf of the owner
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    // this function transfers tokens from the sender's account to the recipient's account, but only if the
    // sender has a high enough allowance
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }
    
    // this function performs the actual transfer of tokens and emits the appropriate events
    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }
    
    // this function approves the spender to spend the specified amount of tokens on behalf of the owner, and emits the
    // appropriate event
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}