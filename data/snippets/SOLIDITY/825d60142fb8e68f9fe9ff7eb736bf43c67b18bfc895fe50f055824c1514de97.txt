pragma solidity 0.8.0;

// Defines a contract named 'Token'
contract Token {
    
    // Creates a mapping of addresses to unsigned integers called 'balances'
    mapping (address => uint) balances;

    // Assigns the owner of the contract
    address owner;

    // Defines a constructor function to assign the creator of the contract as the owner
    constructor() {
        owner = msg.sender;
    }

    // Defines a modifier that restricts a function's access to the owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can access this function.");
        _;
    }

    // Defines a function to add tokens to a specified address
    function addTokens(address _address, uint _amount) public onlyOwner {
        
        // Increases the balance of the specified address by the specified amount
        balances[_address] += _amount;
    }

    // Defines a function to withdraw tokens from the contract to a specified address
    function withdrawTokens(address _address, uint _amount) public onlyOwner {
        
        // Requires the specified address to have a balance greater than or equal to the specified amount
        require(balances[_address] >= _amount, "Insufficient funds.");
        
        // Decreases the balance of the specified address by the specified amount
        balances[_address] -= _amount;
        
        // Transfers the specified amount of tokens from the contract to the specified address
        payable(_address).transfer(_amount);
    }
}