pragma solidity ^0.8.0; //specifies the version of solidity used

contract BookStore { //defines a contract
    
    address owner; //creates variable to store owner address
    
    struct Book { //defines structure for books
        string title;
        string author;
        uint price;
    }
    
    mapping (uint => Book) books; //creates map to store books
    uint bookCount; //creates variable to store total book count
    
    event NewBookAdded(string title, string author, uint price); //defines an event
    
    constructor() { //constructor function
        owner = msg.sender; //sets owner address 
    }
    
    modifier onlyOwner() { //modifier function
        require(msg.sender == owner, "You are not the owner"); //checks if caller is owner
        _; //allows function to continue execution
    }
    
    function addBook(string memory _title, string memory _author, uint _price) public onlyOwner { //function to add book
        books[bookCount] = Book(_title, _author, _price); //creates new book and adds it to map
        bookCount++; //updates book count
        emit NewBookAdded(_title, _author, _price); //emits event
    }
    
    function buyBook(uint _bookId) public payable { //function to buy book
        require(msg.value == books[_bookId].price, "Incorrect amount sent"); //checks if correct amount of ether is sent
        payable(owner).transfer(msg.value); //transfers ether to owner
    }
}