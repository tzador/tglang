//The following code snippet creates a contract for a simple voting system

pragma solidity ^0.8.6;

contract VotingSystem {
    //Structure to hold voter details
    struct Voter {
        bool hasVoted; //Flag to check if the voter has already voted or not
        uint candidateID; //ID of the candidate voted for
    }
    
    //Structure to hold candidate details
    struct Candidate {
        string name; //Name of the candidate
        string party; //Political party the candidate belongs to
        uint voteCount; //Number of votes received
    }
    
    address public admin; //Address of the admin
    
    mapping(address => Voter) public voters; //Map of addresses to Voter structure
    Candidate[] public candidates; //Dynamic array of candidates
    
    constructor(string[] memory _names, string[] memory _parties) {
        admin = msg.sender;
        
        //Loop to initialize the candidates array with candidate details
        for (uint i = 0; i < _names.length; i++) {
            candidates.push(Candidate({
                name: _names[i],
                party: _parties[i],
                voteCount: 0
            }));
        }
    }
    
    //Function to allow a user to vote for a particular candidate
    function castVote(uint _candidateID) public {
        require(!voters[msg.sender].hasVoted, "You have already voted."); //Check if the user has already voted
        require(0 <= _candidateID && _candidateID < candidates.length, "Invalid candidate ID."); //Check if the candidate ID is valid
        
        voters[msg.sender].hasVoted = true; //Mark the user's address as having voted
        voters[msg.sender].candidateID = _candidateID; //Assign the candidate ID voted for to the user's address
        candidates[_candidateID].voteCount++; //Increase the vote count for the specific candidate
    }
    
    //Function to get the winner of the election
    function getWinner() public view returns(string memory) {
        require(msg.sender == admin, "Only the admin can get the winner.");
        
        uint maxVotes = 0; //Variable to hold the maximum number of votes
        string memory winner = ""; //Variable to hold the name of the winner
        
        //Loop to check which candidate has the maximum vote count
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i].voteCount > maxVotes) {
                maxVotes = candidates[i].voteCount;
                winner = candidates[i].name;
            }
        }
        
        return winner;
    }
    
    //Function to get the party of a specific candidate
    function getParty(uint _candidateID) public view returns(string memory) {
        require(0 <= _candidateID && _candidateID < candidates.length, "Invalid candidate ID."); //Check if the candidate ID is valid
        
        return candidates[_candidateID].party;
    }
}