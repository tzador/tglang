// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.5.0 <0.9.0;

contract ExampleContract {
  
  address public owner;
  
  // define a struct called User
  struct User {
    string name;
    uint age;
    uint balance;
  }
  
  // define a mapping to store users by their address
  mapping(address => User) public users;
  
  // define an event that will be emitted when a new user is added
  event NewUser(address indexed userAddress, string name, uint age);
  
  // define a constructor function that sets the contract owner
  constructor () {
    owner = msg.sender;
  }
  
  // define a function to add a new user 
  function addUser(string memory _name, uint _age) public {
    // require that only the contract owner can add new users
    require(msg.sender == owner, "Only the contract owner can add new users.");
    
    // create a new user and set their name and age
    User memory newUser = User(_name, _age, 0);
    
    // add the new user to the mapping
    users[msg.sender] = newUser;
    
    // emit the NewUser event
    emit NewUser(msg.sender, _name, _age);
  }
  
  // define a function to update a user's balance
  function updateBalance(uint _balance) public {
    // require that the user calling the function is the owner of the user being updated
    require(msg.sender == address(users[msg.sender]), "Only the user can update their own balance.");
    
    // update the user's balance
    users[msg.sender].balance = _balance;
  }
}