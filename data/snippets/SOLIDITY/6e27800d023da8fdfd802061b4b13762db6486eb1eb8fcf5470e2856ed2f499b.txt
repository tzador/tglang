/**
 * @title Book Purchase Contract
 * @dev This contract allows users to purchase books using Ether
 */

contract BookPurchase {

    // Define variables
    uint public price;                      // Price of the book in Wei
    uint public quantity;                   // Number of books available for purchase
    address payable public seller;          // Address of the seller
    mapping(address => uint) public orders; // Mapping of user addresses to their corresponding order quantity

    // Constructor function
    constructor(uint _price, uint _quantity, address payable _seller) public {
        price = _price;
        quantity = _quantity;
        seller = _seller;
    }

    // Function for users to buy books
    function buy(uint _quantity) public payable {
        require(msg.value >= price * _quantity, "Insufficient Ether provided."); // Check if user is paying enough Ether

        require(_quantity <= quantity, "Not enough books available.");           // Check if there are enough books to fulfill order

        // Transfer Ether from buyer to seller
        seller.transfer(msg.value);

        // Update order quantity for buyer
        orders[msg.sender] += _quantity;

        // Update book quantity
        quantity -= _quantity;
    }

    // Function to withdraw Ether from contract
    function withdraw() public {
        require(msg.sender == seller, "Only the seller can withdraw Ether."); // Check if caller is the seller

        require(address(this).balance > 0, "No Ether to withdraw.");           // Check if there is Ether in the contract to withdraw

        // Transfer Ether to seller
        seller.transfer(address(this).balance);
    }

    // Fallback function to reject any Ether sent without calling a function
    function() external payable {
        revert("No function called."); // Revert the transaction
    }
}