// Example contract for storing and accessing user data
contract UserData {
    // Struct for storing user data
    struct User {
        string name;
        uint age;
        string email;
        bool verified;
    }
    
    // Mapping to store users with their addresses
    mapping(address => User) private users;
    
    // Modifier to only allow verified users to access certain functions
    modifier onlyVerified() {
        require(users[msg.sender].verified, "User is not verified");
        _;
    }
    
    // Function to add a new user
    function addUser(string memory _name, uint _age, string memory _email) public {
        // Require that user does not already exist
        require(!userExists(msg.sender), "User already exists");
        
        // Create new User struct and assign values
        User memory user;
        user.name = _name;
        user.age = _age;
        user.email = _email;
        user.verified = false;
        
        // Update mapping with user's address and struct
        users[msg.sender] = user;
    }
    
    // Function to check if a user exists
    function userExists(address _user) public view returns (bool) {
        // If user's address is mapped, they exist
        if(users[_user].verified) {
            return true;
        }
        
        return false;
    }
    
    // Function to verify a user
    function verifyUser() public {
        // Require that user exists
        require(userExists(msg.sender), "User does not exist");
        
        // Verify user and update mapping
        users[msg.sender].verified = true;
    }
    
    // Function to get a user's name
    // Only available to verified users
    function getUserName() public view onlyVerified returns (string memory) {
        return users[msg.sender].name;
    }
    
    // Function to update a user's email
    // Only available to verified users
    function updateUserEmail(string memory _email) public onlyVerified {
        users[msg.sender].email = _email;
    }
    
    // Function to delete a user
    // Only available to contract owner
    function deleteUser(address _user) public onlyOwner {
        // Require that user exists
        require(userExists(_user), "User does not exist");
        
        // Remove user from mapping
        delete users[_user];
    }
    
    // Modifier to only allow the contract owner to execute a function
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }
    
    // Address of the contract owner
    address owner;
    
    // Constructor to assign contract owner
    constructor() public {
        owner = msg.sender;
    }
}