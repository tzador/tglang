pragma solidity ^0.8.0;

//contract to store and transfer ERC20 tokens
contract ERC20Token {
    //initialize variables
    string public name;
    string public symbol;
    uint256 public totalSupply;
    
    //using mappings to store balances of each address
    mapping(address => uint256) public balanceOf;
    
    //using mappings to store allowances for transfer of tokens
    mapping(address => mapping(address => uint256)) public allowance;
    
    //event to track transfer of tokens
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    //event to track approval of token transfer
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    //constructor function to initialize name, symbol and total supply of tokens
    constructor(string memory _name, string memory _symbol, uint256 _totalSupply) {
        name = _name;
        symbol = _symbol;
        totalSupply = _totalSupply;
        
        //set the total supply to the address that deploys the contract
        balanceOf[msg.sender] = totalSupply;
    }
    
    //function to transfer tokens to another address
    function transfer(address _to, uint256 _value) public returns (bool) {
        //check if sender has enough balance
        require(balanceOf[msg.sender] >= _value, "Insufficient balance.");
        
        //reduce sender's balance and increase receiver's balance
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        
        //emit transfer event
        emit Transfer(msg.sender, _to, _value);
        
        return true;
    }
    
    //function to approve another address to transfer tokens on behalf of caller
    function approve(address _spender, uint256 _value) public returns (bool) {
        //set the allowance for spender to transfer caller's tokens
        allowance[msg.sender][_spender] = _value;
        
        //emit approval event
        emit Approval(msg.sender, _spender, _value);
        
        return true;
    }
    
    //function to transfer tokens from one address to another if caller is approved
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        //check if sender is approved and has enough allowance
        require(allowance[_from][msg.sender] >= _value, "Caller is not approved or has insufficient allowance.");
        
        //check if sender has enough balance
        require(balanceOf[_from] >= _value, "Insufficient balance.");
        
        //reduce sender's balance and increase receiver's balance
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        
        //reduce sender's allowance
        allowance[_from][msg.sender] -= _value;
        
        //emit transfer event
        emit Transfer(_from, _to, _value);
        
        return true;
    }
}