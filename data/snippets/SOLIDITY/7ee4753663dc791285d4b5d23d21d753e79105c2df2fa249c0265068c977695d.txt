//This contract implements a simple voting system using the Solidity programming language
contract VotingSystem {
    //Stores the address of the contract creator
    address owner;
    
    //Stores the total number of votes
    uint totalVotes;
    
    //Stores the list of candidates
    address[] candidates;
    
    //Maps the candidate's address to their name
    mapping (address => string) candidateNames;
    
    //Maps the candidate's address to their vote count
    mapping (address => uint) voteCounts;
    
    //Stores the minimum amount of ether required to vote
    uint minEtherAmount;
    
    //Stores the start and end time of the voting period
    uint startTime;
    uint endTime;
    
    //Adds a new candidate to the list
    function addCandidate(address _candidate, string _name) public {
        require (msg.sender == owner, "Only the owner can add candidates");
        require (voteCounts[_candidate] == 0, "Candidate has already been added");
        
        candidates.push(_candidate);
        candidateNames[_candidate] = _name;
    }
    
    //Allows users to vote for a candidate by sending ether
    function vote(address _candidate) public payable {
        require (msg.value >= minEtherAmount, "Not enough ether sent");
        require (voteCounts[_candidate] > 0, "Candidate does not exist");
        require (now >= startTime && now <= endTime, "Voting period is over");
        
        voteCounts[_candidate] += 1;
        totalVotes++;
    }
    
    //Returns the total number of votes for a specific candidate
    function getVotesForCandidate(address _candidate) public view returns (uint) {
        return voteCounts[_candidate];
    }
    
    //Returns the winning candidate's address
    function getWinner() public view returns (address) {
        uint maxVotes;
        address winner;
        
        for (uint i = 0; i < candidates.length; i++) {
            if (voteCounts[candidates[i]] > maxVotes) {
                maxVotes = voteCounts[candidates[i]];
                winner = candidates[i];
            }
        }
        
        return winner;
    }
    
    //fallback function that returns any accidentally sent ether
    function () public payable {
        msg.sender.transfer(msg.value);
    }
}