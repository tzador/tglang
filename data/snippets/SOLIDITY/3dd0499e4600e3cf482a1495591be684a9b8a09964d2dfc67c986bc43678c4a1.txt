// Define a variable called 'balance' of type 'uint256' (unsigned integer)
// and initialize it with the value 1000
uint256 balance = 1000;
// Define a function called 'deposit' with a parameter 'amount' of type 'uint256'
// This function should update the 'balance' variable by adding the provided 'amount' to it
function deposit(uint256 amount) public {
    balance += amount;
}
// Define a function called 'withdraw' with a parameter 'amount' of type 'uint256'
// This function should update the 'balance' variable by subtracting the provided 'amount' from it
function withdraw(uint256 amount) public {
    balance -= amount;
}
// Define a modifier called 'onlyOwner'
// This modifier should check if the 'msg.sender' (caller of the function) is the owner of the contract
// If not, it should revert (cancel) the transaction
modifier onlyOwner() {
    require(msg.sender == owner, "Only the owner can call this function.");
    _; // This will execute the function's code only if the require statement is met
}
// Define a variable 'owner' of type 'address' which will hold the owner address
address owner;
// Define a constructor which sets the 'owner' variable to the address of the contract creator
constructor() public {
    owner = msg.sender;
}
// Define a function called 'changeOwner' with a parameter 'newOwner' of type 'address'
// This function should update the 'owner' variable to the provided 'newOwner' address
// It can only be called by the current owner of the contract
function changeOwner(address newOwner) public onlyOwner {
    owner = newOwner;
}