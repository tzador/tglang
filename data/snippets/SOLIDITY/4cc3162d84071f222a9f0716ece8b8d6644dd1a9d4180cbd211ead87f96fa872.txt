pragma solidity ^0.6.0;

contract MyContract {
    // state variables
    uint public myNumber;
    string public myString;
    address public owner;
    uint public constant myConstant = 10;

    // constructor
    constructor(uint _myNumber, string memory _myString) public {
        myNumber = _myNumber;
        myString = _myString;
        owner = msg.sender;
    }

    // modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner!");
        _;
    }

    // fallback function
    fallback() external payable {
        // do something
    }

    // receive function
    receive() external payable {
        // do something
    }

    // external function (can only be called from outside the contract)
    function addNumber(uint _number) external onlyOwner {
        myNumber += _number;
    }

    // internal function (can only be called from within the contract)
    function _changeString(string memory _newString) internal {
        myString = _newString;
    }
}