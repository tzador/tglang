pragma solidity ^0.8.0; //specifying compiler version

contract MyContract { //creating a contract
    
    //declaring state variables
    address private owner; //holds owner address
    uint256 private value; //holds contract value
    mapping (address => uint256) balances; //mapping to keep track of balances
    
    //events
    event ValueChanged(uint256 oldValue, uint256 newValue); //event triggered when value changes
    
    //constructor function to initialize contract
    constructor(address _owner, uint256 _value) {
        owner = _owner;
        value = _value;
    }
    
    //function to get owner address, marked as view
    function getOwner() public view returns (address _owner) {
        return owner;
    }
    
    //function to get contract value, marked as view
    function getValue() public view returns (uint256 _value) {
        return value;
    }
    
    //function to set a new value, can only be called by contract owner
    function setValue(uint256 _newValue) external {
        require(msg.sender == owner, "Only contract owner can call this function."); //checking for caller permission
        require(_newValue != value, "New value must be different from current value."); //checking if new value is different
        emit ValueChanged(value, _newValue); //triggering event
        value = _newValue; //updating value
    }
    
    //function to deposit ETH into contract, payable and external
    function depositETH() payable external {
        require(msg.value > 0, "You must send some ETH."); //checking for non-zero value
        balances[msg.sender] += msg.value; //updating sender's balance
    }
    
    //function to withdraw ETH from contract, payable and external
    function withdrawETH(uint256 _amount) external {
        require(balances[msg.sender] >= _amount, "Insufficient balance."); //checking if sender has enough balance
        balances[msg.sender] -= _amount; //updating sender's balance
        payable(msg.sender).transfer(_amount); //transferring ETH to sender
    }
}