// Contract to manage a cryptocurrency token
pragma solidity ^0.8.7;

contract Token {
    mapping (address => uint256) balances; // A mapping to keep track of balances of each address
    uint256 totalSupply; // Total supply of the token
    
    // Event to be emitted when tokens are transferred
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    // Constructor to set the total supply of the token
    constructor(uint256 _totalSupply) {
        totalSupply = _totalSupply;
        balances[msg.sender] = totalSupply; // Assign all the tokens to the contract creator
    }

    // Function to transfer tokens from one address to another
    function transfer(address _to, uint256 _value) public {
        require(_value <= balances[msg.sender]); // Check if the sender has enough tokens to transfer
        balances[msg.sender] -= _value; // Subtract the tokens from sender's balance
        balances[_to] += _value; // Add the tokens to receiver's balance
        emit Transfer(msg.sender, _to, _value); // Emit the transfer event
    }
    
    // Function to retrieve the balance of an address
    function balanceOf(address _address) public view returns (uint256) {
        return balances[_address]; // Return the balance of the given address
    }
    
    // Function to get the total supply of the token
    function getTotalSupply() public view returns (uint256) {
        return totalSupply; // Return the total supply of the token
    }
}