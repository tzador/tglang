// Define contract
contract MyContract { 

    // Variables
    uint256 public myNumber = 5;
    string public myString = "Hello World";
    address public myAddress = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;

    // Events
    event NumberChanged(uint256 oldValue, uint256 newValue);
    event StringChanged(string oldValue, string newValue);
    event AddressChanged(address oldValue, address newValue);

    // Constructor
    constructor() public {
        // Initialize values
        myNumber = 5;
        myString = "Hello World";
        myAddress = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;
    }

    // Functions
    function changeNumber(uint256 _newValue) public {
        // Check if new value is different from current value
        require(_newValue != myNumber, "New value must be different");
        // Get old value
        uint256 oldValue = myNumber;
        // Assign new value
        myNumber = _newValue;
        // Emit event
        emit NumberChanged(oldValue, _newValue);
    }

    function changeString(string memory _newValue) public {
        // Check if new value is different from current value
        require(keccak256(abi.encodePacked(_newValue)) != keccak256(abi.encodePacked(myString)), "New value must be different");
        // Get old value
        string memory oldValue = myString;
        // Assign new value
        myString = _newValue;
        // Emit event
        emit StringChanged(oldValue, _newValue);
    }

    function changeAddress(address _newValue) public {
        // Check if new value is different from current value
        require(_newValue != myAddress, "New value must be different");
        // Get old value
        address oldValue = myAddress;
        // Assign new value
        myAddress = _newValue;
        // Emit event
        emit AddressChanged(oldValue, _newValue);
    }
}