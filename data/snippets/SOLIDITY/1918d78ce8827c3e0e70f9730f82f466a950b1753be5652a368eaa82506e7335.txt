// This contract represents a decentralized voting system
contract VotingSystem {
    
    // An array to store all the candidates
    address[] public candidates;
    
    // A mapping to keep track of the number of votes for each candidate
    mapping(address => uint) public voteCount;
    
    // A modifier to check if the caller is a valid candidate
    modifier validCandidate(address _candidate) {
        bool isCandidate = false;
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i] == _candidate) {
                isCandidate = true;
                break;
            }
        }
        require(isCandidate, "Not a valid candidate");
        _;
    }
    
    // A function that allows a candidate to register
    function registerAsCandidate() public {
        
        // Check if the caller is already a candidate
        require(!isCandidate(msg.sender), "Already a candidate");
        
        // Add the candidate to the array of candidates
        candidates.push(msg.sender);
    }
    
    // A function that allows voters to cast their votes
    function vote(address _candidate) public validCandidate(_candidate) {
        voteCount[_candidate]++;
    }
    
    // A helper function to check if a given address is a candidate
    function isCandidate(address _address) private view returns (bool) {
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i] == _address) {
                return true;
            }
        }
        return false;
    }
}