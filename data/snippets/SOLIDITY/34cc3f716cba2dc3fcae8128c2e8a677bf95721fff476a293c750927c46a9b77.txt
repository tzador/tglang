// Defines a contract called "MyContract" with a uint data type variable called "myNumber"
contract MyContract{
    uint myNumber;
    
    // Defines a function called "setNumber" that takes in a uint parameter and sets it to myNumber variable
    function setNumber(uint _number) public {
        myNumber = _number;
    }
    
    // Defines a function called "getNumber" that returns the value of myNumber variable
    function getNumber() public view returns (uint) {
        return myNumber;
    }
    
    // Defines a modifier called "ownerOnly" that only allows the owner of the contract to call a function
    modifier ownerOnly {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }
    
    // Defines a variable called "owner" of type address and assigns it to the address that deploys the contract
    address owner = msg.sender;
    
    // Defines an empty constructor
    constructor() public {}
    
    // Defines a function called "changeOwner" that takes in an address parameter, assigns it to the owner variable, and emits an event
    function changeOwner(address _newOwner) public ownerOnly {
        owner = _newOwner;
        emit OwnerChanged(owner, _newOwner);
    }
    
    // Defines an event called "OwnerChanged" with two parameters: oldOwner of type address and newOwner of type address
    event OwnerChanged(address indexed oldOwner, address indexed newOwner);
}