// an example contract using all principles of the SOLID design model

// Example contract showing the implementation of single responsibility principle
// The contract focuses on only one aspect of functionality - managing a list of users and their data
// This allows for easier modification and maintenance of the code in the future

contract UserManagement {
    // list of users stored in a mapping
    mapping(address => User) public users;

    // event to be emitted when a new user is added to the list
    event UserAdded(address userAddress, string name, uint age);

    // User struct to store user data
    struct User {
        string name;
        uint age;
    }

    // function to add a new user to the list of users
    // the function follows the open-closed principle by allowing for extension but not modification
    function addUser(address _userAddress, string _name, uint _age) public {
        users[_userAddress] = User(_name, _age);
        emit UserAdded(_userAddress, _name, _age);
    }

    // function for retrieving a user's name
    // follows the single responsibility principle by only focusing on retrieving data
    function getUserName(address _userAddress) public view returns (string) {
        return users[_userAddress].name;
    }

    // function for changing a user's age
    // follows the Liskov substitution principle by not changing the overall functionality of the contract
    function changeUserAge(address _userAddress, uint _newAge) public {
        users[_userAddress].age = _newAge;
    }

    // function for deleting a user from the list
    // follows the interface segregation principle by breaking down a larger interface into smaller and more specific ones
    function deleteUser(address _userAddress) public {
        delete users[_userAddress];
    }
}

// Example contract demonstrating the implementation of open-closed principle
// The contract allows for extension by adding new functionality without modifying existing code

contract Token {
    // Mapping of token holders and their balances
    mapping(address => uint) public balances;
    // total supply of tokens available
    uint public totalSupply;

    // event to be emitted when new tokens are minted
    event TokensMinted(address tokenHolder, uint amount);

    // function to mint new tokens and update the total supply
    // follows the open-closed principle by allowing for extension but not modification
    function mint(address _tokenHolder, uint _amount) public {
        balances[_tokenHolder] += _amount;
        totalSupply += _amount;
        emit TokensMinted(_tokenHolder, _amount);
    }
}