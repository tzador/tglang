pragma solidity ^0.8.0;

// Define a contract called Ballot 
contract Ballot {
    
    // Member variables of the contract Ballot
    address chairperson;
    mapping(address => uint) public voterWeights; 
    Proposal[] proposals;
    
    // Struct for the details of a proposal
    struct Proposal {
        string name;
        uint voteCount; 
    }
    
    // Constructor function to set the chairperson and allocate voter weights 
    constructor() {
        chairperson = msg.sender;
        voterWeights[chairperson] = 1;
    }
    
    // Function to add a new proposal to the ballot
    function addProposal(string memory proposalName) public {
        // Check if the caller is the chairperson 
        require(msg.sender == chairperson, "Only the chairperson can add a proposal.");
        // Push the new proposal to the proposals array 
        proposals.push(Proposal({
            name: proposalName,
            voteCount: 0
        }));
    }
    
    // Function to cast a vote for a specific proposal 
    function vote(uint proposalIndex) public {
        // Check if the voter has not voted yet 
        require(voterWeights[msg.sender] == 0, "The caller has already voted.");
        // Check if the proposal index is valid 
        require(proposalIndex < proposals.length, "Invalid proposal index.");
        
        // Update the vote count for the selected proposal 
        proposals[proposalIndex].voteCount += voterWeights[msg.sender];
        // Set the voter weight to 0 to indicate that the voter has voted 
        voterWeights[msg.sender] = 0;
    }
    
    // Function to determine the winning proposal 
    function winningProposal() public view returns (string memory) {
        uint winningVoteCount = 0;
        uint winningProposalIndex = 0;
        
        // Loop through all proposals to find the one with the most votes 
        for (uint i = 0; i < proposals.length; i++) {
            if (proposals[i].voteCount > winningVoteCount) {
                winningVoteCount = proposals[i].voteCount;
                winningProposalIndex = i;
            }
        }
        
        // Return the name of the winning proposal 
        return proposals[winningProposalIndex].name;
    }
    
    // Function to give a voter a weight that is used for voting 
    function giveRightToVote(address voter) public {
        // Check if the caller is the chairperson 
        require(msg.sender == chairperson, "Only the chairperson can give voting rights.");
        // Check if the voter has not already been given voting rights 
        require(voterWeights[voter] == 0, "The voter has already been given voting rights.");
        
        // Assign a voter weight of 1 to the voter 
        voterWeights[voter] = 1;
    }
}