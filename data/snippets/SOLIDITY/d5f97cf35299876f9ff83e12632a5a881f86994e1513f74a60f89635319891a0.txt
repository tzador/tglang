// Contract to handle the registration of users with unique addresses

contract UserRegistry {

    // A mapping to store the addresses of registered users
    mapping(address => bool) public registeredUsers;

    // Event triggered when a new user is registered
    event UserRegistered(address user, string name);

    // Function to register a new user with their name
    function registerUser(string memory name) public {
        
        // Check if the user is already registered
        require(!registeredUsers[msg.sender], "User already registered");

        // Verify that the name is not empty
        require(bytes(name).length > 0, "Name cannot be empty");

        // Add the user's address to the mapping
        registeredUsers[msg.sender] = true;

        // Trigger the UserRegistered event
        emit UserRegistered(msg.sender, name);
    }

    // Function to get the name of a registered user
    function getUserName(address user) public view returns (string memory) {

        // Check if the user is registered
        require(registeredUsers[user], "User is not registered");

        // Return the name of the user
        string memory name;

        // Logic to retrieve the user's name from a database or other source
        // ...

        return name;
    }
}