pragma solidity ^0.8.0; //specifies the version of Solidity to be used

//declaration of contract named "MyTokens"
contract MyTokens {
    
    mapping (string => uint) public myTokens; //creates a mapping to store token names and their corresponding values
    
    address public owner; //creates a variable to store owner's address
    
    constructor() {
        owner = msg.sender; //initializes the owner's address as the address of the account deploying the contract
    }
    
    //function to add token to the mapping
    function addToken(string memory _tokenName, uint _value) external {
        require(msg.sender == owner, "You are not the contract owner."); //requires that the caller of the function is the contract owner
        myTokens[_tokenName] = _value; //sets the value of the token name in the mapping to the specified value
    }
    
    //function to transfer tokens
    function transfer(address _recipient, string memory _tokenName, uint _amount) external {
        require(myTokens[_tokenName] >= _amount, "Not enough tokens."); //requires that the contract has enough tokens to transfer
        require(_recipient != owner, "Cannot transfer tokens to the owner."); //requires that the tokens are not being transferred to the owner
        myTokens[_tokenName] -= _amount; //updates the balance of the token in the mapping
        //calls the transfer function of the ERC20 token contract, passing in the recipient's address and the specified amount
        //assume the ERC20 token contract has a transfer function with the same parameters
        ERC20TokenContract.transfer(_recipient, _amount);
    }
    
    //event to track token transfers
    event TokenTransfer(address from, address to, string tokenName, uint amount);
    
}