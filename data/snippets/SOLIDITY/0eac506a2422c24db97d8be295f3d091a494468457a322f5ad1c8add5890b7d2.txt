pragma solidity >=0.6.0 <0.8.0;

contract MyContract {
    
    address public owner;
    uint256 public totalSupply;
    mapping(address => uint256) public balances;
    
    constructor() {
        owner = msg.sender;
        totalSupply = 1000;
        balances[owner] = totalSupply;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, 'You are not the owner.');
        _;
    }
    
    function transfer(address _recipient, uint256 _amount) public {
        require(balances[msg.sender] >= _amount, 'Not enough balance.');
        require(_recipient != address(0), 'Invalid address.');
        
        balances[msg.sender] -= _amount;
        balances[_recipient] += _amount;
    }
    
    function mint(uint256 _amount) public onlyOwner {
        totalSupply += _amount;
        balances[owner] += _amount;
    }
    
    function burn(uint256 _amount) public onlyOwner {
        require(totalSupply >= _amount, 'Not enough supply to burn.');
        
        totalSupply -= _amount;
        balances[owner] -= _amount;
    }
}