// Example of a complex code snippet in Solidity
pragma solidity ^0.8.4;

contract ComplexContract {
    // State variables
    address public owner; // Public state variable accessible to all
    
    // Struct
    struct Person {
        string name;
        uint age;
        bool isMember;
    }
    
    mapping(address => Person) private people; // Mapping to store people by their address
    
    // Events
    event NewPersonAdded(address _address, string _name, uint _age); // Event to notify when a new person is added
    
    // Modifier to restrict access to owner only
    modifier onlyOwner() {
        require(msg.sender == owner, "Permission denied.");
        _;
    }
    
    // Constructor function
    constructor() {
        owner = msg.sender; // Set the owner of the contract to the address that deployed it
    }
    
    // External function to add a new person
    function addNewPerson(string memory _name, uint _age) external {
        require(!people[msg.sender].isMember, "Person already added.");
        
        people[msg.sender] = Person(_name, _age, true); // Add the new person to the mapping
        emit NewPersonAdded(msg.sender, _name, _age); // Fire the event
    }
    
    // Public function to get a person's details
    function getPerson(address _address) public view returns (string memory, uint, bool) {
        require(_address != address(0), "Invalid address.");
        
        Person memory person = people[_address]; // Retrieve the person from the mapping
        return (person.name, person.age, person.isMember); // Return the person's details
    }
    
    // External function to update a person's name
    function updateName(string memory _newName) external onlyOwner {
        require(people[msg.sender].isMember, "Person not found.");
        
        people[msg.sender].name = _newName; // Update the person's name
    }
    
    // Fallback function to receive and transfer Ether
    receive() external payable {
        owner.transfer(msg.value);
    }
}