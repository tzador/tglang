pragma solidity ^0.8.4;

//This contract is a simple example of the SOLID principles in Solidity programming language.

/* `E` stands for "encapsulation". This contract will be encapsulated in a library so that it can be reused in other contracts. */
library Encapsulation {
    /* `S` stands for "single responsibility". This function is responsible for checking if a given number is even or not. */
    function isEven(uint number) external pure returns(bool) {
        if(number % 2 == 0) {
            return true;
        }
        else {
            return false;
        }
    }

    /* `O` stands for "open/closed". This function is open for extension by allowing the caller to pass in a modifier function to modify the result. */
    function isGreaterThan(uint number1, uint number2, function (uint, uint) external pure returns(uint) modifierFunction) external pure returns(bool) {
        uint modifiedResult = modifierFunction(number1, number2);
        if(modifiedResult > number2) {
            return true;
        }
        else {
            return false;
        }
    }
}

contract SolidityExample {
    /* `L` stands for "Liskov substitution". This variable of type `Encapsulation` can be substituted for its inherited types. */
    Encapsulation encapsulated;

    //`I` stands for "interface segregation". This interface only contains relevant functions for the contract to use.
    interface EncapsulationInterface {

        /* This function is the same as the one in the `Encapsulation` library, but it has been included in the interface for easier use in the contract. */
        function isEven(uint number) external pure returns(bool);
    }

    constructor() {
        /* `D` stands for "dependency inversion". This contract does not need to know the inner workings of the `Encapsulation` library, it only needs to know that it exists. */
        encapsulated = new Encapsulation();
    }

    /* `D` stands for "dependency inversion". This function does not need to know the inner workings of the `Encapsulation` library, it only needs to know that it exists. */
    function isGreaterThan(uint number1, uint number2) external view returns(bool) {
        /* `R` stands for "reusability". This function makes use of the `isGreaterThan` function in the `Encapsulation` library. */
        bool greaterThan = encapsulated.isGreaterThan(number1, number2, Encapsulation.isEven);

        //`I` stands for "interface segregation". This function only uses the relevant function from the `EncapsulationInterface` interface.
        bool isEven = EncapsulationInterface.isEven(number1);

        //`D` stands for "dependency inversion". This function does not need to know the inner workings of the `Encapsulation` library, it only needs to know that it exists.
        bool isEvenInverted = encapsulated.isEven(number1);

        return greaterThan && isEven && isEvenInverted;
    }
}