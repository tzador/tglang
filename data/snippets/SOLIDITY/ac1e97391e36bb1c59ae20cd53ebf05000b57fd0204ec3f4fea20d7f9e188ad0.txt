pragma solidity ^0.8.0;

contract ExampleContract {
    // state variables
    address owner;
    string public name;
    uint256 public age;
    uint256 private constant secretNumber = 42;
    mapping(uint256 => string) public names;
    
    // events
    event NewNameAdded(address indexed _owner, string _name);
    
    // constructor
    constructor(string memory _name, uint256 _age) {
        owner = msg.sender;
        name = _name;
        age = _age;
    }
    
    // onlyOwner modifier
    modifier onlyOwner {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }
    
    // functions
    function addName(uint256 _id, string memory _name) external onlyOwner {
        names[_id] = _name;
        emit NewNameAdded(msg.sender, _name);
    }
    
    function getSecretNumber() external view returns (uint256) {
        return secretNumber;
    }
}