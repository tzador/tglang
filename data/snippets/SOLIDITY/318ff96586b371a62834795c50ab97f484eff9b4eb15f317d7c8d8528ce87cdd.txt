//declaring a contract

contract Complex {
    
    //state variables
    uint256 public num1; //public state variable of type unsigned integer with 256 bits
    address private owner; //private state variable of type address
    string constant private message = "Hello World!"; //constant private state variable of type string
    
    //events
    event LogChange(string _msg, uint256 _newNum); //event that is triggered when the num1 variable is changed
    
    //modifiers
    modifier onlyOwner { //custom modifier that restricts certain functions to be called only by the owner
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }
    
    //constructor
    constructor(uint256 _num) public { //constructor function that takes in an integer parameter
        num1 = _num;
        owner = msg.sender; //sets owner to be the person who deployed the contract
    }
    
    //functions
    function updateNum(uint256 _newNum) public onlyOwner { //function to update the num1 variable, restricted by the onlyOwner modifier
        num1 = _newNum;
        emit LogChange("Num1 variable has been updated.", _newNum);
    }
    
    function getMessage() public view returns (string memory) { //function to get the value of the constant message variable
        return message;
    }
}