pragma solidity ^0.8.6;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol";

contract MyNFT is ERC721 {
    // Variables
    uint256 public totalSupply;
    address public owner;

    // Events
    event Mint(address indexed _owner, uint256 _tokenId);
    event Burn(address indexed _owner, uint256 _tokenId);

    // Constructor
    constructor() ERC721("MyNFT", "MFT") {
        owner = msg.sender;
    }

    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    // Mint function - onlyOwner
    function mint(address _to) external onlyOwner returns (uint256) {
        totalSupply++;
        uint256 tokenId = totalSupply;
        _safeMint(_to, tokenId);
        emit Mint(_to, tokenId);
        return tokenId;
    }

    // Burn function - onlyOwner
    function burn(uint256 _tokenId) external onlyOwner {
        totalSupply--;
        _burn(_tokenId);
        emit Burn(ownerOf(_tokenId), _tokenId);
    }

    // ERC721 fallback function
    function _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal override {
        super._beforeTokenTransfer(_from, _to, _tokenId);
    }

    // ERC721 metadata function
    function _baseURI() internal override view returns (string memory) {
        return "https://mynft.com/";
    }

    // Get token details
    function getToken(uint256 _tokenId) external view returns (string memory) {
        require(_exists(_tokenId), "Token with given id does not exist");
        return _tokenURI(_tokenId);
    }
}