// Contract to handle the ownership of a token
contract TokenOwnership {
    // Create a mapping to keep track of token ownership
    mapping (uint256 => address) public owners;
    
    // Create an event to emit when ownership is transferred
    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);
    
    // Create a modifier to restrict access to token owners only
    modifier onlyOwner(uint256 _tokenId) {
        require(msg.sender == owners[_tokenId], "Only the token owner can perform this action.");
        _;
    }
    
    // Function to transfer ownership of a token
    function transfer(address _to, uint256 _tokenId) public onlyOwner(_tokenId) {
        require(_to != address(0), "Invalid address.");
        owners[_tokenId] = _to;
        emit Transfer(msg.sender, _to, _tokenId);
    }
    
    // Function to get the current owner of a token
    function getOwner(uint256 _tokenId) public view returns (address) {
        return owners[_tokenId];
    }
}