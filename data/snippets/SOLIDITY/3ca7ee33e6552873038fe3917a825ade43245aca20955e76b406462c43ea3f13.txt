pragma solidity ^0.8.0; // pragma directive to specify compiler version

// contract definition
contract BookStore {
    // state variables
    string public name; // public variable that can be accessed from outside the contract
    uint private bookCount; // private variable that can only be accessed from within the contract

    // events
    event NewBookAdded(string title, uint price); // event that emits when a new book is added to the store

    // constructor function
    constructor(string memory _name) {
        name = _name;
        bookCount = 0;
    }

    // functions
    function addBook(string memory _title, uint _price) public {
        require(_price > 0); // require statement to check for valid input
        bookCount++; // increments the book count
        emit NewBookAdded(_title, _price); // emits the event with the title and price of the new book
    }

    function getBookCount() public view returns(uint) {
        return bookCount; // returns the total number of books in the store
    }

    function buyBook(uint _id) public payable {
        require(_id > 0 && _id <= bookCount); // require statement to check for valid input
        // code to handle the purchase of a book
    }
}