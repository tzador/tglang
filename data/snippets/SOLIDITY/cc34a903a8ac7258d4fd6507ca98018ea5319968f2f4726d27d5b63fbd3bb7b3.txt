// This is a complex code snippet in Solidity that implements a smart contract
contract MyToken {

    // Variables and mappings
    string public name = "My Token"; // Publicly accessible string variable 
    uint public totalSupply; // Publicly accessible unsigned integer variable
    address public owner; // Publicly accessible address variable
    mapping(address => uint) public balanceOf; // Mapping to track balance of tokens for each address
    mapping(address => mapping(address => uint)) public allowance; // Mapping to track the allowance granted by an address to another address

    // Events
    event Transfer(address indexed from, address indexed to, uint value); // Event to be emitted when tokens are transferred
    event Approval(address indexed owner, address indexed spender, uint value); // Event to be emitted when an address approves allowance for another address

    // Constructor function
    constructor(uint initialSupply) {
        totalSupply = initialSupply; // Assign the initial supply to the totalSupply variable
        owner = msg.sender; // Assign the address deploying the contract as the owner
        balanceOf[msg.sender] = initialSupply; // Assign all tokens to the owner's balance
    }

    // Functions
    function transfer(address to, uint value) public {
        require(balanceOf[msg.sender] >= value, "Insufficient balance"); // Check if the sender has enough tokens
        balanceOf[msg.sender] -= value; // Subtract the transferred amount from the sender's balance
        balanceOf[to] += value; // Add the transferred amount to the recipient's balance
        emit Transfer(msg.sender, to, value); // Emit the Transfer event
    }

    function approve(address spender, uint value) public {
        allowance[msg.sender][spender] = value; // Set the allowance for the specified spender
        emit Approval(msg.sender, spender, value); // Emit the Approval event
    }

    function transferFrom(address from, address to, uint value) public {
        require(value <= balanceOf[from], "Insufficient balance"); // Check if the sender has enough tokens
        require(value <= allowance[from][msg.sender], "Not allowed"); // Check if the sender is allowed to transfer the specified amount
        balanceOf[from] -= value; // Subtract the transferred amount from the sender's balance
        balanceOf[to] += value; // Add the transferred amount to the recipient's balance
        allowance[from][msg.sender] -= value; // Reduce the allowed amount from the sender's allowance
        emit Transfer(from, to, value); // Emit the Transfer event
    }
}