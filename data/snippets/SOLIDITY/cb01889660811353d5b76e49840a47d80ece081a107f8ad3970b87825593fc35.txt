// Interface for accessing the external contract "ERC20"
// Inherit all functions from the "ERC20" contract
// Author: John Doe
interface ERC20 is ERC20 {
    // Event declaration for a transfer event
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    // Event declaration for an approval event
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    // Function to get the total supply of ERC20 tokens
    // No inputs required
    // Returns total supply as a uint256
    function totalSupply() external view returns (uint256);

    // Function to get the balance of a specific address
    // Inputs:
    // - _owner: address of the owner
    // Returns balance of _owner as a uint256
    function balanceOf(address _owner) external view returns (uint256 balance);

    // Function to transfer ERC20 tokens from one address to another
    // Inputs:
    // - _to: address of the recipient
    // - _value: amount of tokens to transfer
    // Returns a boolean indicating success/failure of the transfer
    function transfer(address _to, uint256 _value) external returns (bool success);

    // Function to transfer tokens on behalf of a specified address
    // Inputs:
    // - _from: address of the owner
    // - _to: address of the recipient
    // - _value: amount of tokens to transfer
    // Returns a boolean indicating success/failure of the transfer
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);

    // Function to approve a specific address to spend ERC20 tokens on behalf of the sender
    // Inputs:
    // - _spender: address to approve for spending
    // - _value: amount of tokens to approve
    // Returns a boolean indicating success/failure of the approval
    function approve(address _spender, uint256 _value) external returns (bool success);

    // Function to get the remaining allowance for a specific address to spend tokens on behalf of another address
    // Inputs:
    // - _owner: address of the owner
    // - _spender: address of the spender
    // Returns remaining allowance as a uint256
    function allowance(address _owner, address _spender) external view returns (uint256 remaining);
}