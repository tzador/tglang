pragma solidity ^0.8.0;

contract MyContract {
    address owner;
    mapping(address => bool) allowedUsers;
    
    constructor() {
        owner = msg.sender;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner");
        _;
    }
    
    function allowUser(address _user) public onlyOwner {
        allowedUsers[_user] = true;
    }
    
    function removeUser(address _user) public onlyOwner {
        allowedUsers[_user] = false;
    }
    
    function transferOwnership(address _newOwner) public onlyOwner {
        owner = _newOwner;
    }
    
    function deposit() public payable {
        require(allowedUsers[msg.sender] == true, "Only allowed users can deposit");
        //Logic for deposit
    }
    
    function withdraw(address _to, uint256 _amount) public onlyOwner {
        require(address(this).balance >= _amount, "Not enough balance in the contract");
        //Logic for withdraw
        (bool success, ) = _to.call{value: _amount}("");
        require(success, "Transfer failed");
    }
    
    function getBalance() public view onlyOwner returns (uint256) {
        return address(this).balance;
    }
}