pragma solidity >=0.7.0 <0.9.0; //specifying the version of Solidity

contract MyContract {
  address payable public owner; //declaring a variable of type 'address' and 'payable'

  struct Person { //defining a custom data structure 'Person'
    uint id;
    string name;
    uint age;
  }

  mapping (address => Person) public people; //declaring a mapping named 'people' to store Person objects

  constructor() { //constructor which will be executed once during contract deployment
    owner = payable(msg.sender); //assigning the sender's address to the 'owner' variable
  }

  modifier onlyOwner() { //defining a modifier named 'onlyOwner'
    require(msg.sender == owner, "Only the owner can access this function!"); //checking if the sender is the owner
    _; //this will execute the function where this modifier is used
  }

  function addPerson(string memory _name, uint _age) public onlyOwner { //function to add a Person object
    people[msg.sender] = Person(people[msg.sender].id, _name, _age); //assigning the arguments to the Person object stored in the 'people' mapping
  }

  function changeOwner(address payable _newOwner) public onlyOwner { //function to change the owner of the contract
    owner = _newOwner; //assigning the new owner's address to the 'owner' variable
  }
}