// This contract is an example of the SOLIDITY programming language
// It creates a simple contract for managing bank accounts

// Defining the contract
contract BankAccount {

    // Declaring state variables for account address and balance
    address public accountAddress;
    uint public accountBalance;

    // Defining events for deposit and withdrawal
    event Deposit(address _from, uint _amount);
    event Withdrawal(address _from, uint _amount);

    // Defining constructor to initialize the account with an initial balance
    constructor(uint initialBalance) {
        accountAddress = msg.sender; // Set the account address to the contract creator
        accountBalance = initialBalance; // Set the initial balance
    }

    // Defining modifier to check if the caller is the account owner
    modifier onlyAccountOwner {
        require(msg.sender == accountAddress, "Only the account owner can call this function");
        _;
    }

    // Defining function for depositing funds into the account
    function deposit()
        public payable
        onlyAccountOwner
    {
        accountBalance += msg.value; // Add the deposited amount to the account balance
        emit Deposit(msg.sender, msg.value); // Emit an event with the account owner's address and deposit amount
    }

    // Defining function for withdrawing funds from the account
    function withdraw(uint amount)
        public
        onlyAccountOwner
    {
        require(amount <= accountBalance, "Insufficient balance"); // Checking if the account has enough balance for withdrawal
        accountBalance -= amount; // Deduct the withdrawal amount from the account balance
        msg.sender.transfer(amount); // Transfer the funds to the caller's address
        emit Withdrawal(msg.sender, amount); // Emit an event with the account owner's address and withdrawal amount
    }
}