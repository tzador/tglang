/**
 * @title Owned
 * @dev Base contract with an owner.
 *      Provides onlyOwner modifier, onlyOwnerUnrestricted modifier,
 *      transferOwnership function.*
 */
contract Owned {
    address public owner; // public is needed for the modifier
                           // (cannot be internal, otherwise mocking won't work)
    address public pendingOwner; // temporary storage of proposed new owner

    /**
     * @dev the Owned constructor sets the original `owner` of the contract to the sender
     *      account.* */
    constructor() {
        owner = msg.sender;
    }

    /**
     * @dev `onlyOwner` modifier throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        if (msg.sender != owner) {
            throw;
        }
        _;
    }
    
    /**
     * @dev `onlyOwnerUnrestricted` modifier throws if called by any account other than the owner
     *      or the pending owner.
     */
    modifier onlyOwnerUnrestricted() {
        if (msg.sender != owner && msg.sender != pendingOwner) {
            throw;
        }
        _;
    }

    /**
     * @dev allows the current owner to transfer control of the contract to a new owner
     * @param _newOwner The address to transfer ownership to
     */
    function transferOwnership(address _newOwner) public onlyOwner {
        if (_newOwner != owner) {
            pendingOwner = _newOwner;
        }
    }

    /**
     * @dev allows the pending owner to accept ownership of the contract
     */
    function acceptOwnership() public {
        if (msg.sender == pendingOwner) {
            owner = pendingOwner;
            pendingOwner = 0x0;
        }
    }

    /**
     * @dev prevents accidentally calling a method in the wrong contract (by the name of a function)
     * @param _addr The address of the supposed original contract
     * @return Whether the given address actually did contain a contract
     */
    function onlyThisContract(address _addr) internal{
        // by convention the constructor is not considered part of the contract
        assert(_addr != address(this));
    }
}