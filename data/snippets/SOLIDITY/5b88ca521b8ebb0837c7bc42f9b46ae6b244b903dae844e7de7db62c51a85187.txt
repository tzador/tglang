pragma solidity ^0.8.0;

// This is a Contract that stores and manages the ownership of a house

contract HouseOwnership {
    // Variables
    address owner; // stores the address of the owner
    uint public numOfRooms; // stores the number of rooms in the house
    mapping(uint => address) roomToOwner; // maps room numbers to owner addresses
    uint[] public roomNumbers; // stores all the room numbers in the house
    mapping(address => uint) ownerToRoomCount; // maps owner addresses to room counts

    // Events
    event RoomTransfer(address indexed from, address indexed to, uint roomNumber);

    // Constructor function
    constructor() {
        owner = msg.sender; // sets the owner to the address of the deployer of the contract
    }

    // Function to add a room to the house
    function addRoom() public {
        require(msg.sender == owner, "Only the owner can add rooms."); // checks if the caller is the owner
        
        uint roomNumber = roomNumbers.length + 1; // room number is one more than the current length of the room numbers array
        roomNumbers.push(roomNumber); // adds the room number to the room numbers array
        
        roomToOwner[roomNumber] = msg.sender; // maps the room number to the owner address
        ownerToRoomCount[msg.sender]++; // increases the owner's room count by 1
        
        emit RoomTransfer(address(0), msg.sender, roomNumber); // emits an event to indicate that the room has been transferred to the owner
    }

    // Function to transfer ownership of a room
    function transferRoom(address to, uint roomNumber) public {
        require(msg.sender == roomToOwner[roomNumber], "You are not the owner of this room."); // checks if the caller is the current owner of the room
        require(to != address(0), "Invalid address."); // checks if the address to transfer ownership to is valid

        roomToOwner[roomNumber] = to; // updates the owner address of the room
        ownerToRoomCount[msg.sender]--; // decreases the current owner's room count by 1
        ownerToRoomCount[to]++; // increases the new owner's room count by 1

        emit RoomTransfer(msg.sender, to, roomNumber); // emits an event to indicate that the room has been transferred to the new owner
    }

    // Function to get the owner of a room
    function getOwner(uint roomNumber) public view returns (address) {
        return roomToOwner[roomNumber];
    }

    // Function to get the number of rooms owned by an address
    function getRoomCount(address _owner) public view returns (uint) {
        return ownerToRoomCount[_owner];
    }
}