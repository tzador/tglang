pragma solidity ^0.8.0;

contract MyContract {
    
    uint public totalSupply;
    address public owner;
    mapping(address => mapping(address => uint)) public allowance;
    mapping(address => uint) public balanceOf;
    
    event Transfer(address indexed _from, address indexed _to, uint _value);
    event Approval(address indexed _owner, address indexed _spender, uint _value);
    
    constructor() {
        totalSupply = 10000000; //sets the total supply of tokens
        balanceOf[msg.sender] = totalSupply; //gives all tokens to contract owner
        owner = msg.sender;
    }
    
    function transfer(address _to, uint _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Not enough tokens."); //checks if sender has enough tokens to transfer
        balanceOf[msg.sender] -= _value; //decreases sender's balance
        balanceOf[_to] += _value; //increases receiver's balance
        emit Transfer(msg.sender, _to, _value); //triggers the Transfer event
        return true;
    }
    
    function approve(address _spender, uint _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value; //sets the allowed amount for a specific spender
        emit Approval(msg.sender, _spender, _value); //triggers the Approval event
        return true;
    }
    
    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
        require(allowance[_from][msg.sender] >= _value, "Not enough allowed tokens."); //checks if allowed amount is enough
        require(balanceOf[_from] >= _value, "Not enough tokens."); //checks if sender has enough tokens
        balanceOf[_from] -= _value; //decreases sender's balance
        balanceOf[_to] += _value; //increases receiver's balance
        allowance[_from][msg.sender] -= _value; //decreases allowed amount
        emit Transfer(_from, _to, _value); //triggers the Transfer event
        return true;
    }
}