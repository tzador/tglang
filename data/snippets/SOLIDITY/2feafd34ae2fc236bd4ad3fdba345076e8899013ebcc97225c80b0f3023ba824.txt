pragma solidity >=0.4.22 <0.9.0; // version declaration

contract Bank { // contract declaration

    // variables
    address owner;  // stores address of contract owner
    mapping (address => uint) balances; // maps address to a uint balance
    
    // events
    event Deposit(address indexed _from, uint _value); // emitted when a deposit is made
    event Withdrawal(address indexed _to, uint _value); // emitted when a withdrawal is made
    
    
    // constructor function
    constructor() public {
        owner = msg.sender; // sets contract owner as the caller of the function
    }

    // functions
    function deposit() public payable {
        balances[msg.sender] += msg.value; // adds deposited value to sender's balance
        emit Deposit(msg.sender, msg.value); // emits deposit event
    }

    function withdraw(uint amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance"); // checks if sender has enough balance to withdraw
        balances[msg.sender] -= amount; // subtracts withdrawn amount from sender's balance
        msg.sender.transfer(amount); // transfers the amount to the sender
        emit Withdrawal(msg.sender, amount); // emits withdrawal event
    }

    function getBalance() public view returns (uint) {
        return balances[msg.sender]; // returns sender's balance
    }

    modifier onlyOwner(){ // modifier restricting function execution to only the contract owner
        require(msg.sender == owner, "Caller not the contract owner");
        _;
    }

    function close() public onlyOwner { // function to close the contract and transfer remaining balance to the owner
        selfdestruct(msg.sender);
    }
}