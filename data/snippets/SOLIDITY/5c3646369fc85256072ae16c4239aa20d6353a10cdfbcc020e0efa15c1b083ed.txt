contract Bank {
  
    // variables
    mapping(address => uint) private balances;
    address private owner;
    uint private totalBalance;
    
    // events
    event BalanceAdded(address indexed _from, uint _amount);
    event BalanceWithdrawn(address indexed _from, uint _amount);
    
    // functions
    constructor() {
        owner = msg.sender;
    }
    
    function deposit(uint _amount) external {
        require(_amount > 0, "Invalid amount");
        
        balances[msg.sender] += _amount;
        totalBalance += _amount;
        emit BalanceAdded(msg.sender, _amount);
    }
    
    function withdraw(uint _amount) external {
        require(_amount > 0, "Invalid amount");
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        
        balances[msg.sender] -= _amount;
        totalBalance -= _amount;
        emit BalanceWithdrawn(msg.sender, _amount);
    }
    
    // modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }
    
    // owner only functions
    function changeOwner(address _newOwner) external onlyOwner {
        require(_newOwner != address(0), "Invalid address");
        
        owner = _newOwner;
    }
    
    function getBalance(address _account) external view onlyOwner returns (uint) {
        return balances[_account];
    }
}