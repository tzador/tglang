//This code snippet demonstrates a complex contract in Solidity
pragma solidity ^0.8.0;

contract ComplexContract {
    //variable for storing total number of users
    uint public totalUsers;
    
    //created mapping to store user address and their balance
    mapping (address => uint) balance;
    
    //event to be emitted when user balance is updated
    event BalanceUpdate(address indexed user, uint balance);
    
    //modifier to ensure only owner can call certain functions
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    //constructor function to set initial values
    constructor() {
        owner = msg.sender;
        totalUsers = 0;
    }
    
    //function to add new user and their balance 
    function addUser(address _user, uint _balance) public onlyOwner {
        //check if user already exists
        require(balance[_user] == 0, "User already exists");
        
        //add user and balance to mapping
        balance[_user] = _balance;
        
        //increase totalUsers and emit event
        totalUsers++;
        emit BalanceUpdate(_user, _balance);
    }
    
    //function to update user balance
    function updateBalance(address _user, uint _balance) public onlyOwner {
        //check if user already exists
        require(balance[_user] > 0, "User does not exist");
        
        //update user balance
        balance[_user] = _balance;
        
        //emit event
        emit BalanceUpdate(_user, _balance);
    }
    
    //function to withdraw balance from contract
    function withdrawBalance(uint _amount) public onlyOwner {
        //make sure contract has enough balance
        require(address(this).balance >= _amount, "Not enough balance in contract");
        
        //transfer balance to owner
        payable(owner).transfer(_amount);
    }
    
    //fallback function to receive and store eth sent to contract
    receive() external payable {
        //increase contract balance
        balance[address(this)] += msg.value;
    }
}