pragma solidity ^0.8.0; // Specifying compiler version

contract Escrow { // Creating a contract called "Escrow"
    address public payer; // Declaring a public variable "payer" of type address
    address public payee; // Declaring a public variable "payee" of type address
    address public arbiter; // Declaring a public variable "arbiter" of type address
    mapping(address => uint) public deposits; // Creating a mapping to store address and amount deposited
    
    constructor(address _payee, address _arbiter) { // Constructor to initialize contract with payee and arbiter
        payee = _payee;
        arbiter = _arbiter;
    }
    
    function deposit() public payable { // Function for payer to deposit funds
        require(msg.sender == payer, "Only payer can deposit."); // Ensure only payer can deposit
        deposits[msg.sender] += msg.value; // Add deposited amount to mapping
    }
    
    function release() public { // Function for payee/arbiter to release funds
        require(msg.sender == payee || msg.sender == arbiter, "Only payee or arbiter can release.");
        payee.transfer(address(this).balance); // Transfer all funds to payee
    }
    
    function refund() public { // Function for payer/arbiter to refund funds
        require(msg.sender == payer || msg.sender == arbiter, "Only payer or arbiter can refund.");
        payer.transfer(deposits[payer]); // Transfer deposited amount back to payer
    }
}