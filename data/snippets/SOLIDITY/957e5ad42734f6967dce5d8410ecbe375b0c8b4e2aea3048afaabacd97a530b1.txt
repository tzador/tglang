pragma solidity ^0.7.0;

contract Token {
    // state variables
    string public name;
    string public symbol;
    uint256 private totalSupply;
    address public owner;
    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    // events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // constructor
    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        totalSupply = _initialSupply;
        owner = msg.sender;
        balances[msg.sender] = totalSupply;
    }

    // view functions
    function getTotalSupply() public view returns (uint256) {
        return totalSupply;
    }

    function getBalance(address _address) public view returns (uint256) {
        return balances[_address];
    }

    function getAllowance(address _owner, address _spender) public view returns (uint256) {
        return allowances[_owner][_spender];
    }

    // public functions
    function transfer(address _to, uint256 _amount) public returns (bool) {
        require(balances[msg.sender] >= _amount, 'Insufficient balance');
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }

    function approve(address _spender, uint256 _amount) public returns (bool) {
        require(_spender != address(0), 'Invalid spender address');
        allowances[msg.sender][_spender] = _amount;
        emit Approval(msg.sender, _spender, _amount);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {
        require(balances[_from] >= _amount, 'Insufficient balance');
        require(allowances[_from][msg.sender] >= _amount, 'Insufficient allowance');
        balances[_from] -= _amount;
        balances[_to] += _amount;
        allowances[_from][msg.sender] -= _amount;
        emit Transfer(_from, _to, _amount);
        return true;
    }

    // private functions
    function _burnTokens(address _address, uint256 _amount) private {
        require(balances[_address] >= _amount, 'Insufficient balance');
        balances[_address] -= _amount;
        totalSupply -= _amount;
        emit Transfer(_address, address(0), _amount);
    }

    // modifiers
    modifier onlyOwner {
        require(msg.sender == owner, 'Sender is not the owner');
        _;
    }
}