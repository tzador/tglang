/**
    @Title SafeMathContract
    @dev Library for safe mathematical operations
 */
library SafeMath {
    /**
        @dev Multiplies two numbers, reverts on overflow.
        Returns the result of the multiplication.
        @param _a Factor one
        @param _b Factor two
        @return The result of the multiplication
     */
    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {
        if (_a == 0) {
            return 0;
        }
        uint256 c = _a * _b;
        require(c / _a == _b, "Multiplication overflow");
        return c;
    }

    /**
        @dev Divides two numbers, reverts if the divisor is zero.
        Returns the result of the division.
        @param _a Numerator
        @param _b Denominator
        @return The result of the division
     */
    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
        require(_b > 0, "Division by zero");
        uint256 c = _a / _b;
        return c;
    }

    /**
        @dev Subtracts two numbers, reverts on underflow.
        Returns the result of the subtraction.
        @param _a Number to subtract from
        @param _b Number to subtract
        @return The result of the subtraction
     */
    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
        require(_b <= _a, "Subtraction underflow");
        uint256 c = _a - _b;
        return c;
    }

    /**
        @dev Adds two numbers, reverts on overflow.
        Returns the result of the addition.
        @param _a Number one
        @param _b Number two
        @return The result of the addition
     */
    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {
        uint256 c = _a + _b;
        require(c >= _a, "Addition overflow");
        return c;
    }
}