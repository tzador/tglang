/* 
  Example contract using the Solidity programming language
  This contract outlines a basic voting system 
  using the principles of the SOLID design principles.
*/

// Simplest form of imports
import './SafeMath.sol';

// Creating the contract
contract VotingSystem {

  // Using SafeMath library for secure mathematical operations
  using SafeMath for uint;

  // Storing the total number of votes
  uint totalVotes;
  
  // Storing the voting options
  uint[] votingOptions;
  
  // Mapping to keep track of votes for each option
  mapping(uint => uint) votesPerOption;
  
  // Event to emit when a vote is casted
  event VoteCasted(address _voter, uint _option);
  
  // Function to add new voting options
  function addOption(uint _newOption) external {
    require(_newOption != 0, "Option cannot be 0");
    require(!votingOptions.contains(_newOption), "Option already exists");
    votingOptions.push(_newOption);
  }
  
  // Function to cast a vote
  function castVote(uint _option) external {
    require(votingOptions.contains(_option), "Option does not exist"); // Using require for input validation
    votesPerOption[_option] = votesPerOption[_option].add(1); // Using SafeMath for secure addition
    totalVotes = totalVotes.add(1); // Using SafeMath for secure addition
    emit VoteCasted(msg.sender, _option); // Emitting the VoteCasted event
  }
  
  // Function to get total votes for a particular option
  function getTotalVotesForOption(uint _option) external view returns (uint) {
    require(votingOptions.contains(_option), "Option does not exist"); // Using require for input validation
    return votesPerOption[_option];
  }
  
  // Function to get total votes
  function getTotalVotes() external view returns (uint) {
    return totalVotes;
  }
}