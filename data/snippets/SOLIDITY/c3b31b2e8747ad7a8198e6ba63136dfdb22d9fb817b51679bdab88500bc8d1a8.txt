// Example of creating a contract that follows the SOLID principles
// --- START CONTRACT ---

// Open the solidity version to use
pragma solidity ^0.8.0;

// Define an interface for an external contract to interact with
interface IExampleToken {
    function transfer(address to, uint amount) external returns (bool);
    function balanceOf(address owner) external view returns (uint);
}

// Define the main contract
contract SOLIDContract {
    // Define variables
    address public owner; // Owner of the contract
    uint public totalSupply; // Total supply of tokens
    mapping(address => uint) public balances; // Mapping of address to token balances
    mapping(address => mapping(address => uint)) public allowed; // Mapping of address to allowed spending
    uint8 constant decimals = 18; // Number of decimals for token value

    // Create events that allow logging of actions
    event Transfer(address from, address to, uint amount);
    event Approval(address owner, address spender, uint amount);

    // Define constructor that sets the owner and initial supply of tokens
    constructor() {
        owner = msg.sender;
        totalSupply = 1000000 * 10 ** uint(decimals);
        balances[owner] = totalSupply;
    }

    // Implement the transfer function, following the single responsibility principle
    function transfer(address to, uint amount) external returns (bool) {
        // Ensure the sender has enough tokens to transfer
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Transfer the tokens
        balances[msg.sender] -= amount;
        balances[to] += amount;

        // Emit transfer event
        emit Transfer(msg.sender, to, amount);

        // Return success
        return true;
    }

    // Implement the approve function, following the Open-Closed principle
    function approve(address spender, uint amount) external returns (bool) {
        // Update the allowance for the sender and spender
        allowed[msg.sender][spender] = amount;

        // Emit approval event
        emit Approval(msg.sender, spender, amount);

        // Return success
        return true;
    }

    // Implement the transferFrom function, following the Liskov Substitution principle
    function transferFrom(address from, address to, uint amount) external returns (bool) {
        // Ensure the sender has enough tokens to transfer
        require(balances[from] >= amount, "Insufficient balance");

        // Ensure the sender has enough allowance to transfer
        require(allowed[from][msg.sender] >= amount, "Insufficient allowance");

        // Transfer the tokens
        balances[from] -= amount;
        balances[to] += amount;

        // Update the allowance
        allowed[from][msg.sender] -= amount;

        // Emit transfer event
        emit Transfer(from, to, amount);

        // Return success
        return true;
    }

    // Implement the increaseAllowance function, following the Interface Segregation principle
    function increaseAllowance(address spender, uint amount) public returns (bool) {
        // Increase the allowance for the sender and spender
        allowed[msg.sender][spender] += amount;

        // Emit approval event
        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);

        // Return success
        return true;
    }

    // Implement the decreaseAllowance function, following the Dependency Inversion principle
    function decreaseAllowance(address spender, uint amount) public returns (bool) {
        // Decrease the allowance for the sender and spender
        allowed[msg.sender][spender] -= amount;

        // Emit approval event
        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);
        
        // Return success
        return true;
    }
}

// --- END CONTRACT ---