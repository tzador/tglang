/// @title Voting Contract

contract Voting {

    // State variables
    address public creator;
    mapping (bytes32 => uint8) public votesReceived;
    bytes32[] public candidateList;

    /// @notice Constructor function that initializes candidate list and sets contract creator
    constructor(bytes32[] memory candidateNames) public {
        candidateList = candidateNames;
        creator = msg.sender;
    }

    /// @notice Adds a new candidate to the candidate list
    /// @dev Only the contract creator can add new candidates
    /// @param candidateName Name of the candidate to be added
    function addCandidate(bytes32 candidateName) public {
        require(msg.sender == creator, "Only the contract creator can add candidates!");
        candidateList.push(candidateName);
    }

    /// @notice Casts a vote for a specific candidate
    /// @dev Only the candidate names that are present in the candidate list can be voted for
    /// @param candidateName Name of the candidate to be voted for
    function voteForCandidate(bytes32 candidateName) public {
        require(validCandidate(candidateName), "This candidate is not present in the candidate list!");
        votesReceived[candidateName] += 1;
    }

    /// @notice Checks if a candidate is valid
    /// @param candidateName Name of the candidate to be checked
    /// @return A boolean value indicating whether the candidate is valid or not
    function validCandidate(bytes32 candidateName) view public returns (bool) {
        for (uint i = 0; i < candidateList.length; i++) {
            if (candidateList[i] == candidateName) {
                return true;
            }
        }
        return false;
    }

    /// @notice Gets the total number of votes received by a specific candidate
    /// @param candidateName Name of the candidate for which the total number of votes will be returned
    /// @return The total number of votes received by the candidate
    function totalVotesFor(bytes32 candidateName) view public returns (uint8) {
        require(validCandidate(candidateName), "This candidate is not present in the candidate list!");
        return votesReceived[candidateName];
    }

    /// @notice Gets the total number of candidates in the candidate list
    /// @return The total number of candidates in the candidate list
    function totalCandidates() view public returns (uint) {
        return candidateList.length;
    }

}