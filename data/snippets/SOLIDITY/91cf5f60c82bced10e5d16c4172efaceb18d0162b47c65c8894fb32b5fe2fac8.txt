/*
 * This is an example of a complex code snippet in Solidity, a programming language used for smart contract development on the Ethereum blockchain.
 */

pragma solidity ^0.8.0; // Specifies the version of Solidity to use

/**
 * @title ExampleContract
 * @dev A contract that stores and retrieves data using various types and functions
 */
contract ExampleContract {
    // State variables
    uint public num; // Unsigned integer variable
    string public name; // String variable
    bool private isTrue; // Boolean variable, set to private for encapsulation

    // Struct example
    struct Person {
        string name;
        uint age;
    }

    // Modifier example
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    // Events
    event DataStored(uint _num, string _name, bool _isTrue); // Custom event that logs when data is stored

    // Constructor
    constructor(uint _num, string memory _name) {
        // Constructor sets the initial state variables
        num = _num;
        name = _name;
        isTrue = true;
    }

    // Functions
    /**
     * @dev Sets the value of num and emits the DataStored event
     * @param _num The new value of num
     */
    function setNum(uint _num) public onlyOwner {
        num = _num;
        // Emit the event with the updated values
        emit DataStored(num, name, isTrue);
    }

    /**
     * @dev Sets the value of name and emits the DataStored event
     * @param _name The new value of name
     */
    function setName(string memory _name) public onlyOwner {
        name = _name;
        // Emit the event with the updated values
        emit DataStored(num, name, isTrue);
    }

    /**
     * @dev Sets the value of isTrue and emits the DataStored event
     * @param _isTrue The new value of isTrue
     */
    function setIsTrue(bool _isTrue) public onlyOwner {
        isTrue = _isTrue;
        // Emit the event with the updated values
        emit DataStored(num, name, isTrue);
    }

    /**
     * @dev Returns a Person struct
     * @param _name The name of the person
     * @param _age The age of the person
     */
    function getPerson(string memory _name, uint _age) public pure returns (Person memory) {
        // Create and return a new Person struct
        return Person({
            name: _name,
            age: _age
        });
    }
}