// Example Contract

pragma solidity ^0.8.0;

contract ExampleContract {

    struct User { 
        string name;
        uint age;
    }
    
    enum UserType { 
        Admin,
        Member,
        Guest 
    }
    
    address owner; 
    
    mapping (address => uint) balances;

    event UserAdded(address userAddress, string name, uint age, UserType userType);

    constructor() {
        owner = msg.sender;
    }

    function addBalance(uint amount) public {
        balances[msg.sender] += amount;
    }
    
    function withdrawBalance() public {
        require(msg.sender == owner, "You are not the owner of this contract!");
        msg.sender.transfer(address(this).balance);
    }
    
    function addUser(string memory _name, uint _age, UserType _userType) public {
        require(msg.sender == owner, "You are not the owner of this contract!");
        users[msg.sender] = User(_name, _age);
        emit UserAdded(msg.sender, _name, _age, _userType);
    }

    function getUser(address userAddress) public view returns (string memory, uint) {
        return (users[userAddress].name, users[userAddress].age);
    }
    
    function getUserType(address userAddress) public view returns (UserType) {
        if (userAddress == owner) {
            return UserType.Admin;
        } else {
            return UserType.Member;
        }
    }
}