// example contract using SOLIDITY

contract Bank {
    address private owner; // private variable to store owner's address
    
    struct Account {
        address owner; // address of the account owner
        uint balance; // balance of the account
    }
    
    mapping(address => Account) private accounts; // private mapping to store accounts
    
    event Deposit(address indexed accountOwner, uint amount); // event for deposit transactions
    event Withdrawal(address indexed accountOwner, uint amount); // event for withdrawal transactions
    
    
    constructor() public {
        owner = msg.sender; // set the contract owner as the address that deploys the contract
    }
    
    // function to deposit funds into the contract
    // updates the account balance for the account owner and emits the Deposit event
    function deposit() external payable {
        accounts[msg.sender].balance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    // function to withdraw funds from the contract
    // ensures that the account owner has sufficient balance and emits the Withdrawal event
    function withdraw(uint amount) external {
        require(accounts[msg.sender].balance >= amount, "Insufficient balance");
        msg.sender.transfer(amount);
        accounts[msg.sender].balance -= amount;
        emit Withdrawal(msg.sender, amount);
    }
    
    // function to check the balance of an account
    // can be called by anyone, but only returns the balance of the account owner
    function balanceOf(address accountOwner) external view returns (uint) {
        require(msg.sender == owner || msg.sender == accountOwner, "Not authorized to view balance");
        return accounts[msg.sender].balance;
    }
    
}