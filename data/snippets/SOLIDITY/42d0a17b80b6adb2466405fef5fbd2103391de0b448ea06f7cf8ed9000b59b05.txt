pragma solidity ^0.8.0; // Sets the compiler version

contract ExampleContract { // Creates a contract named ExampleContract
    
    address owner; // Creates a variable 'owner' with the type 'address'
    
    struct Person { // Creates a struct named Person
        string name; // Creates a variable 'name' with the type 'string'
        uint age; // Creates a variable 'age' with the type 'uint'
        string occupation; // Creates a variable 'occupation' with the type 'string'
    }
    
    Person[] public people; // Creates a public dynamic array named 'people' with the type 'Person'
    
    constructor() { // Creates a constructor function
        owner = msg.sender; // Assigns the address that deployed the contract to the variable 'owner'
    }
    
    function addPerson(string memory _name, uint _age, string memory _occupation) public { // Creates a function named addPerson with three parameters
        require(msg.sender == owner, "Only the contract owner can add people."); // Checks if the sender of the function call is the owner of the contract
        people.push(Person(_name, _age, _occupation)); // Adds a new Person object to the people array
    }
    
    function getPersonAge(string memory _name) view public returns (uint) { // Creates a function named getPersonAge that returns a uint
        for (uint i = 0; i < people.length; i++) { // Loops through the people array
            if (keccak256(bytes(people[i].name)) == keccak256(bytes(_name))) { // Checks if the names match
                return people[i].age; // Returns the age of the person
            }
        }
    }
}