// Contract Definition
contract MyContract {
    // State Variables
    uint private myVariable; // private state variable
    address private owner; // private state variable of type address

    // Constructor Function
    constructor() public {
        owner = msg.sender; // set owner to the address of the contract deployer
    }

    // Modifier
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _; // continue execution
    }

    // Setter Function
    function setMyVariable(uint _value) public onlyOwner {
        myVariable = _value; // assign _value to myVariable
    }

    // Getter Function
    function getMyVariable() public view returns (uint) {
        return myVariable; // return the value of myVariable
    }

    // Struct Definition
    struct User {
        uint id;
        string name;
        address wallet;
    }

    // Array and Mapping
    User[] private users; // array of User structs
    mapping(address => bool) private userExists; // mapping to track if the user exists

    // Event
    event NewUserAdded(uint _id, string _name, address _wallet); // event that is triggered when a new user is added

    // Function to add a new user
    function addUser(uint _id, string memory _name, address _wallet) public onlyOwner {
        require(!userExists[_wallet], "User already exists.");
        users.push(User(_id, _name, _wallet)); // add user to the users array
        userExists[_wallet] = true; // set userExists to true for the user's address
        emit NewUserAdded(_id, _name, _wallet); // trigger NewUserAdded event
    }
}