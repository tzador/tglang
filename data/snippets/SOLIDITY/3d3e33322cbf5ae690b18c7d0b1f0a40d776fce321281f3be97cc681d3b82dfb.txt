/// @title A contract to manage the ownership of assets
/// @dev This contract implements the Ownership pattern of the SOLID design principles
contract Ownership {

    // Defines the owner of the contract
    address private owner;

    // Defines a mapping of asset ID to its owner
    mapping(uint => address) private assetOwners;

    // Events for tracking ownership transfer
    event AssetTransferred(uint assetID, address from, address to);

    // Modifier for restricting access to specific functions to only the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action.");
        _;
    }

    // Function to initialize the contract
    constructor() public {
        owner = msg.sender;
    }

    // Function to transfer ownership of an asset
    function transferOwnership(uint assetID, address newOwner) public onlyOwner {
        require(assetOwners[assetID] == msg.sender, "Only the current owner can transfer ownership of an asset.");

        assetOwners[assetID] = newOwner;

        emit AssetTransferred(assetID, msg.sender, newOwner);
    }

    // Function to get the owner of a specific asset
    function getOwner(uint assetID) public view returns (address) {
        return assetOwners[assetID];
    }
    
}