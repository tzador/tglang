pragma solidity ^0.8.9; //Using Solidity version 0.8.9

//Contract definition
contract MyContract {
    //Variables
    uint256 number;
    address owner;
    mapping(address => bool) allowed;

    //Events
    event NumberChanged(uint256 updatedNumber, uint256 oldNumber);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event AddressAdded(address indexed addedAddress, bool hasPermission);

    //Constructor
    constructor() {
        owner = msg.sender; //Sets owner of contract to the address that deployed it
    }

    //Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only contract owner can call this function");
        _;
    }

    //Functions
    function setNumber(uint256 _number) external onlyOwner {
        emit NumberChanged(_number, number); //Emits event
        number = _number; //Updates number variable
    }

    function transferOwnership(address _newOwner) external onlyOwner {
        require(_newOwner != address(0), "New owner can't be null address");
        emit OwnershipTransferred(owner, _newOwner); //Emits event
        owner = _newOwner; //Transfers ownership
    }

    function addAddress(address _address) external onlyOwner {
        emit AddressAdded(_address, true); //Emits event
        allowed[_address] = true; //Adds address to mapping
    }

    //Fallback function
    fallback() external payable {
        //Fallback function can receive Ether without any function call
    }

    //Receive function
    receive() external payable {
        //Receive function can receive Ether without any function call
    }
}