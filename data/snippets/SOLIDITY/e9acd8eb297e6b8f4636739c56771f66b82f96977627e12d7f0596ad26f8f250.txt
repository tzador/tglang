pragma solidity >=0.7.0 <0.9.0; // Version specification

contract FoodCoin { // Contract declaration
    address owner; // Variable to store contract owner's address
    
    struct FoodItem { // Struct to hold food item details
        string name;
        uint price;
        uint quantity;
    }
    
    mapping (uint => FoodItem) public foodItems; // Mapping to link food item ID to food item struct
    
    uint public foodItemsCount; // Variable to keep track of number of food items
    
    constructor() { // Constructor function to set contract owner's address
        owner = msg.sender; // Set owner to address of person deploying the contract
    }
    
    function addFoodItem(string memory _name, uint _price, uint _quantity) public { // Function to add a new food item
        require(msg.sender == owner, "Only contract owner can add new food items.");
        
        foodItems[foodItemsCount] = FoodItem(_name, _price, _quantity); // Add new food item to mapping
        foodItemsCount++; // Increment food item count
    }
    
    function updateFoodItem(uint _id, string memory _name, uint _price, uint _quantity) public { // Function to update an existing food item
        require(msg.sender == owner, "Only contract owner can update food items.");
        
        require(_id < foodItemsCount, "Invalid food item ID."); // Check if food item exists
        FoodItem storage foodItem = foodItems[_id]; // Get food item from mapping
        
        foodItem.name = _name; // Update food item details
        foodItem.price = _price;
        foodItem.quantity = _quantity;
    }
    
    function removeFoodItem(uint _id) public { // Function to remove an existing food item
        require(msg.sender == owner, "Only contract owner can remove food items.");
        
        require(_id < foodItemsCount, "Invalid food item ID."); // Check if food item exists
        delete foodItems[_id]; // Delete food item from mapping
    }
}