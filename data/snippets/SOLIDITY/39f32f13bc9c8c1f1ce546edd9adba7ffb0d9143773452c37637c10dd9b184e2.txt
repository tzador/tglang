pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

interface Rarity {
    
    function _rarity() external returns(string memory);
    
}

contract MyContract is ERC721 {
    
    Rarity public rarity;
    
    constructor () ERC721("MyToken", "MTK") {
        rarity = Rarity(0x1234567890);
    }
    
    function getRarity() public view returns(string memory) {
        return rarity._rarity();
    }

    function mintToken(uint256 tokenId) public {
        uint256 timestamp = block.timestamp;
        uint256 blockNumber = block.number;
        _safeMint(msg.sender, tokenId);
        _setTokenURI(tokenId, string(abi.encodePacked(getRarity(), "_", toString(timestamp), "_", toString(blockNumber))));
    }
    
    function toString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
}