contract Voting {
    mapping(address => bool) public hasVoted;
    mapping(string => uint256) public candidateVotes;
    uint256 public totalVotes;

    struct Voter {
        string name;
        bool hasVoted;
    }

    mapping(address => Voter) public voters;

    function vote(string memory _candidate) public {
        require(!hasVoted[msg.sender], "This address has already voted.");
        require(candidateVotes[_candidate] > 0, "Candidate does not exist.");
        totalVotes++;
        hasVoted[msg.sender] = true;
        candidateVotes[_candidate]++;
        voters[msg.sender].name = _candidate;
        voters[msg.sender].hasVoted = true;
    }

    function getWinner() public view returns (string memory) {
        require(totalVotes > 0, "No votes have been cast.");
        string memory winner;
        uint256 mostVotes;
        for (uint256 i = 0; i < totalVotes; i++) {
            if (candidateVotes[voters[msg.sender].name] > mostVotes) {
                mostVotes = candidateVotes[voters[msg.sender].name];
                winner = voters[msg.sender].name;
            }
        }
        return winner;
    }
}