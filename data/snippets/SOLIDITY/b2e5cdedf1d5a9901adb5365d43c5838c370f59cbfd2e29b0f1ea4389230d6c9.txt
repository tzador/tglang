// This contract handles the creation and functionality of a simple decentralized voting system

// Import necessary libraries
pragma solidity ^0.8.0;

// Define the contract
contract VotingSystem {
    // Variables to track voting process
    mapping(address => bool) public voters; // stores addresses of voters
    mapping(string => uint8) public votesReceived; // stores candidates and their vote counts
    bool public votingActive; // boolean to track if voting is still ongoing

    // Event to be emitted when a vote is cast
    event Vote(address indexed _voter, string indexed _candidate);
    
    // Function to add a new voter
    function addVoter(address _voterAddress) external {
        require(msg.sender == owner, "Only owner can add voters."); // restrict access to only owner
        voters[_voterAddress] = true; // add new address to mapping
    }
    
    // Function to start the voting process
    function startVoting() external {
        require(msg.sender == owner, "Only owner can start voting."); // restrict access to only owner
        votingActive = true; // set status to active
    }
    
    // Function to cast a vote
    function castVote(string calldata _candidate) external {
        require(voters[msg.sender] == true, "You are not registered to vote."); // check if sender is a registered voter
        require(votingActive == true, "Voting is currently closed."); // check if voting is still active
        votesReceived[_candidate] += 1; // increment vote count for candidate
        emit Vote(msg.sender, _candidate); // emit the Vote event
    }
    
    // Function to end the voting process and determine the winner
    function endVoting() external {
        require(msg.sender == owner, "Only owner can end voting."); // restrict access to only owner
        votingActive = false; // set status to inactive
        uint8 highestVoteCount = 0; // variable to track highest vote count
        string memory winner; // variable to store the winning candidate
        
        // Loop through all candidates and find the one with the most votes
        for (uint8 i = 0; i < candidateList.length; i++) {
            if (votesReceived[candidateList[i]] > highestVoteCount) {
                highestVoteCount = votesReceived[candidateList[i]];
                winner = candidateList[i];
            }
        }
        
        // Print the winner
        emit Winner(winner);
    }
}

// Example usage
// In this example, a voter adds themselves to the system and casts a vote for a candidate
contract example {
    VotingSystem votingContract = VotingSystem(address): // deploy the VotingSystem contract
    
    // Add a new voter
    votingContract.addVoter(msg.sender);
    
    // Cast a vote for a candidate
    votingContract.castVote("John Smith");
}