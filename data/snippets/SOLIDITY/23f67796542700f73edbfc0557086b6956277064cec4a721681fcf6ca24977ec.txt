// Defining an interface
interface IFlight {
    // A function to book a flight
    function bookFlight(uint256 id, uint256 seats) external payable;

    // A function to get the total number of seats available
    function getAvailableSeats(uint256 id) external view returns (uint256);
}

// Defining a contract that implements the interface
contract FlightTicket is IFlight {
    // Declaring a state variable to store the number of available seats for each flight
    mapping(uint256 => uint256) public availableSeats;

    // A function to book a flight by providing flight id and desired number of seats
    function bookFlight(uint256 id, uint256 seats) external payable override {
        // Checking if the desired number of seats is less than or equal to the total available seats
        require(seats <= availableSeats[id], "Not enough seats available");

        // Checking if the appropriate payment has been made
        require(msg.value == seats * 0.5 ether, "Incorrect payment amount");

        // Updating the number of available seats
        availableSeats[id] -= seats;
    }

    // A function to get the total number of available seats for a specific flight
    function getAvailableSeats(uint256 id) external view override returns (uint256) {
        return availableSeats[id];
    }
}