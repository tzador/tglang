pragma solidity ^0.8.6;

//This is a contract that allows users to create and interact with events

contract EventContract {
    
    //variables for event participants and registration fee
    uint public registrationFee;
    uint[] public eventParticipants;
    
    //events can have different types and different data
    event NewEvent(string eventType, address creator, uint eventDate, string eventDescription);
    
    //modifier for checking if the sender is an event creator
    modifier onlyCreator(uint _index) {
        require(msg.sender == eventCreators[_index]);
        _;
    }
    
    //function for creating a new event
    function createEvent(string memory _eventType, uint _eventDate, string memory _eventDescription) public {
        //emit the event
        emit NewEvent(_eventType, msg.sender, _eventDate, _eventDescription);
        //add the event creator to the list of event participants
        eventParticipants.push(msg.sender);
    }
    
    //function for registering for an event by paying the registration fee
    function registerForEvent(uint _index) public payable {
        //check if the sent value is equal to the registration fee
        require(msg.value == registrationFee);
        //add the event participant to the list of participants for the specified event
        eventRegistrations[_index].push(msg.sender);
    }
    
    //function for retrieving the list of events and their details
    function getEvents() public view returns (string[] memory, uint[] memory, string[] memory) {
        //create arrays to store event data
        string[] memory _eventTypes = new string[](eventParticipants.length);
        uint[] memory _eventDates = new uint[](eventParticipants.length);
        string[] memory _eventDescriptions = new string[](eventParticipants.length);
        
        //loop through each event and add its data to the arrays
        for (uint i = 0; i < eventParticipants.length; i++) {
            _eventTypes[i] = events[i].eventType;
            _eventDates[i] = events[i].eventDate;
            _eventDescriptions[i] = events[i].eventDescription;
        }
        
        //return the arrays of event data
        return (_eventTypes, _eventDates, _eventDescriptions);
    }
}