pragma solidity 0.8.6;

// This is a comment in Solidity, similar to comments in JavaScript

/* In Solidity, a contract represents smart contracts, which are the fundamental building blocks of any Ethereum application. */
contract HelloWorld {
    
    // Variables can be declared with types, similar to most programming languages
    string greeting;
    
    /* Constructor: A special function in Solidity with same name as contract that is executed only once upon deployment to the blockchain. */
    constructor() {
        // Initializes the 'greeting' variable with a default value
        greeting = "Hello, world!";
    }
    
    /* Function which can be called by anyone and returns the value of the 'greeting' variable. */
    function getGreeting() public view returns (string) {
        // 'view' keyword ensures that the function only reads information and does not modify state data
        return greeting;
    }
    
    /* Function which can be called by the contract owner and updates the value of the 'greeting' variable. */
    function setGreeting(string newGreeting) public {
        // 'require' is used to ensure that only the contract owner can call this function
        require(msg.sender == owner);
        greeting = newGreeting;
    }
    
    // Events can be triggered to log information to the blockchain
    event GreetingChanged(string newGreeting);
    
    /* Function which can be called by the contract owner and updates the value of the 'greeting' variable, while also triggering the 'GreetingChanged' event. */
    function setGreetingWithEvent(string newGreeting) public {
        require(msg.sender == owner);
        greeting = newGreeting;
        emit GreetingChanged(newGreeting);
    }
    
    // Only the contract owner can access the 'owner' variable
    address owner;
    
    /* Function to set the contract owner, can only be called once. */
    function setOwner(address newOwner) public {
        // 'require' is used to ensure that this function can only be called once
        require(owner == address(0));
        owner = newOwner;
    }
    
    /* Function to transfer ownership of the contract to a new address, can only be called by the contract owner. */
    function transferOwnership(address newOwner) public {
        // 'require' is used to ensure the new owner address is valid
        require(newOwner != address(0));
        // 'require' is used to ensure that only the contract owner can call this function
        require(msg.sender == owner);
        owner = newOwner;
    }
    
    /* Function to self-destruct the contract, can only be called by the contract owner. */
    function destroyContract() public {
        // 'require' is used to ensure that only the contract owner can call this function
        require(msg.sender == owner);
        // 'selfdestruct' is a built-in function used to destroy the contract and transfer any remaining Ether to the specified address
        selfdestruct(payable(owner));
    }
}