pragma solidity ^0.8.0;

/// @title A contract that manages ownership and permissions for various users
contract UserManagementSystem {

    /// @dev Struct that holds user information
    struct User {
        string name;
        address walletAddress;
        bool isAdmin;
        mapping(string => bool) permissions;
    }

    /// @dev Mapping to keep track of users by their wallet address
    mapping(address => User) public users;

    /// @dev Event triggered when a new user is added to the system
    event NewUserAdded(string name, address walletAddress, bool isAdmin, string[] permissions);

    /// @dev Function to add a new user to the system
    /// @param _name The name of the user
    /// @param _walletAddress The user's wallet address
    /// @param _isAdmin Whether or not the user has admin privileges
    /// @param _permissions Array of permissions the user has
    function addNewUser(string memory _name, address _walletAddress, bool _isAdmin, string[] memory _permissions) public {
        User memory newUser = User(_name, _walletAddress, _isAdmin);

        // Loop through permissions array and add each permission to the user's mapping
        for (uint i = 0; i < _permissions.length; i++) {
            newUser.permissions[_permissions[i]] = true;
        }

        // Add user to mapping
        users[_walletAddress] = newUser;

        // Trigger event
        emit NewUserAdded(_name, _walletAddress, _isAdmin, _permissions);
    }

    /// @dev Function to modify the admin privileges of a user
    /// @param _walletAddress The wallet address of the user
    /// @param _isAdmin Whether or not the user should have admin privileges
    function modifyAdminPrivileges(address _walletAddress, bool _isAdmin) public {
        users[_walletAddress].isAdmin = _isAdmin;
    }

    /// @dev Function to add a new permission to a user
    /// @param _walletAddress The wallet address of the user
    /// @param _permission The permission to be added
    function addPermission(address _walletAddress, string memory _permission) public {
        users[_walletAddress].permissions[_permission] = true;
    }

    /// @dev Function to remove a permission from a user
    /// @param _walletAddress The wallet address of the user
    /// @param _permission The permission to be removed
    function removePermission(address _walletAddress, string memory _permission) public {
        users[_walletAddress].permissions[_permission] = false;
    }

    /// @dev Function to check if a user has a specific permission
    /// @param _walletAddress The wallet address of the user
    /// @param _permission The permission to check for
    /// @return True if the user has the permission, false if not
    function hasPermission(address _walletAddress, string memory _permission) public view returns (bool) {
        return users[_walletAddress].permissions[_permission];
    }
}