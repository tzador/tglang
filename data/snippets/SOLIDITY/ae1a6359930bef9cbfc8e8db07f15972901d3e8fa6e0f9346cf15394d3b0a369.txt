pragma solidity ^0.8.0; // pragma directive specifying Solidity compiler version

//contract definition
contract ComplexContract {
    //state variables
    uint256 public contractNumber; //unsigned integer state variable
    bool public isApproved; //boolean state variable
    address[] public approvedBy; //dynamic array of addresses state variable

    //events definition
    event NumberSet(uint256 _number); //event that emits when number is set
    event ApprovalAdded(address _approver); //event that emits when approval is added

    //constructor function
    constructor(uint256 _initialNumber) {
        contractNumber = _initialNumber; //initialize state variable with input
        isApproved = false; //set initial value for boolean state variable
    }

    //set number function
    function setNumber(uint256 _newNumber) public {
        require(msg.sender == address(0x123), "Can only be called by specific address"); //require statement with error message
        contractNumber = _newNumber; //update state variable
        emit NumberSet(contractNumber); //emit event
    }

    //add approval function
    function addApproval(address _approver) public {
        require(!isApproved, "Contract has already been approved"); //require statement with error message
        approvedBy.push(_approver); //add address to dynamic array state variable
        isApproved = true; //update state variable
        emit ApprovalAdded(_approver); //emit event
    }
}