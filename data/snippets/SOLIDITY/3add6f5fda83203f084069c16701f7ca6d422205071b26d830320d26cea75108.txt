pragma solidity ^0.8.0;

// Contract to manage a voting system
contract VotingSystem {
    // Struct representing a candidate
    struct Candidate {
        uint id; // Unique ID for candidate
        string name; // Name of candidate
        uint voteCount; // Number of votes received
    }

    // State variables
    mapping(address => bool) public voters; // Mapping to track if an address has voted
    mapping(uint => Candidate) public candidates; // Mapping to store candidates
    uint public candidatesCount; // Total number of candidates
    uint public totalVotes; // Total number of votes casted

    // Event triggered when a vote is casted
    event VoteCasted(
        uint indexed candidateId,
        address indexed voter
    );

    // Constructor to initialize candidates and set total number of candidates
    constructor() public {
        candidatesCount = 0;
        addCandidate("John Doe");
        addCandidate("Jane Doe");
    }

    // Function to add a candidate to the mapping
    function addCandidate(string memory _name) public {
        candidatesCount++; // Increase candidate count by 1
        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0); // Add candidate to mapping
    }

    // Function to cast a vote for a candidate
    function castVote(uint _candidateId) public {
        // Check if voter has already voted
        require(!voters[msg.sender], "You have already voted.");

        // Check if candidate exists
        require(_candidateId > 0 && _candidateId <= candidatesCount, "Invalid candidate ID.");

        // Increment candidate's vote count
        candidates[_candidateId].voteCount++;

        // Update total number of votes
        totalVotes++;

        // Update mapping to register address as voted
        voters[msg.sender] = true;

        // Trigger event
        emit VoteCasted(_candidateId, msg.sender);
    }
}