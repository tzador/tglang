pragma solidity ^0.8.0; // Setting the version of Solidity to be used

contract Token { // Defining the contract name Token
    string public name = "My Token"; // Defining a public string variable named name with value "My Token"
    string public symbol = "MTKN"; // Defining a public string variable named symbol with value "MTKN"
    uint public totalSupply; // Defining a public unsigned integer variable named totalSupply

    mapping(address => uint) public balanceOf; // Defining a mapping data structure with keys as addresses and values as unsigned integers, named balanceOf. This will store the balance of each account

    event Transfer(address indexed _from, address indexed _to, uint _value); // Defining a new event named Transfer that will be emitted whenever a transfer occurs. It takes in three parameters: the address of the sender, the address of the receiver and the value being transferred

    constructor(uint _initialSupply) { // Defining the constructor function for the contract with a parameter of type unsigned integer named _initialSupply
        totalSupply = _initialSupply; // Setting the value of totalSupply to be equal to the value passed in as _initialSupply when the contract is deployed
        balanceOf[msg.sender] = _initialSupply; // Setting the initial balance of the contract creator's address (msg.sender) to be equal to the _initialSupply
    }

    function transfer(address _to, uint _value) public returns (bool) { // Defining the transfer function which takes in two parameters: the address of the receiver and the value to be transferred. It also specifies that the function can be called by any account
        require(balanceOf[msg.sender] >= _value); // Using a require statement to check if the sender has enough balance to carry out the transfer
        balanceOf[msg.sender] -= _value; // Subtracting the _value from the balance of the sender
        balanceOf[_to] += _value; // Adding the _value to the balance of the receiver
        emit Transfer(msg.sender, _to, _value); // Emitting the Transfer event to notify listeners of the transfer that just occurred
        return true; // Returning true to indicate that the transfer was successful
    }

    function transferFrom(address _from, address _to, uint _value) public returns (bool) { // Defining the transferFrom function which takes in three parameters: the address of the sender, the address of the receiver and the value to be transferred. It also specifies that the function can be called by any account
        require(balanceOf[_from] >= _value); // Using a require statement to check if the sender has enough balance to carry out the transfer
        require(allowance[_from][msg.sender] >= _value); // Using a require statement to check if the sender has been given permission by the owner of the balance to transfer the specified amount
        balanceOf[_from] -= _value; // Subtracting the _value from the balance of the sender
        balanceOf[_to] += _value; // Adding the _value to the balance of the receiver
        allowance[_from][msg.sender] -= _value; // Subtracting the _value from the allowance granted by the sender to the current caller (msg.sender)
        emit Transfer(_from, _to, _value); // Emitting the Transfer event to notify listeners of the transfer that just occurred
        return true; // Returning true to indicate that the transfer was successful
    }

    mapping(address => mapping(address => uint)) public allowance; // Defining a mapping data structure with keys as addresses and values as another mapping data structure, named allowance. This will store the allowance granted by one address to another

    function approve(address _spender, uint _value) public returns (bool) { // Defining the approve function which takes in two parameters: the address of the spender and the value to be approved. It also specifies that the function can be called by any account
        allowance[msg.sender][_spender] = _value; // Setting the allowance granted by the current caller (msg.sender) to the specified spender to be equal to the specified _value
        return true; // Returning true to indicate that the approval was successful
    }
}