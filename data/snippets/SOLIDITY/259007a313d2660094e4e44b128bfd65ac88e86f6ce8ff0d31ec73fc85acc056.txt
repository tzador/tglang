pragma solidity ^0.6.0; //specify the version
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol"; //import the ERC20 token contract from OpenZeppelin

contract MyToken is ERC20 { //create a new contract named MyToken that inherits from ERC20
  address private owner; //define a private variable to store the owner's address

  constructor() public ERC20("My Token", "MTK") { //create a constructor function with token name and symbol as parameters
    owner = msg.sender; //set the owner's address to the address of the contract creator (msg.sender)
    _mint(msg.sender, 1000000 * (10 ** 18)); //mint 1 million tokens to the contract creator
  }

  modifier onlyOwner() { //define a modifier that restricts access to certain functions to only the owner
    require(msg.sender == owner, "You are not the owner."); //check if the caller is the owner
    _; //continue with the function if the modifier conditions are met
  }

  function transferOwnership(address newOwner) public onlyOwner { //function to transfer ownership of the contract
    owner = newOwner; //update the owner's address
  }

  function mintTokens(uint amount) public onlyOwner { //function to mint new tokens
    _mint(owner, amount * (10 ** 18)); //multiply the amount by 10^18 to convert it to the token's decimal places
  }

  function burnTokens(uint amount) public onlyOwner { //function to burn existing tokens
    _burn(owner, amount * (10 ** 18)); //multiply the amount by 10^18 to convert it to the token's decimal places
  }

  //other functions and logic for the token can be added here
}