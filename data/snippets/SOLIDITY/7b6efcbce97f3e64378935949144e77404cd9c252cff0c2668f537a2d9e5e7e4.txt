pragma solidity ^0.8.0;

// This is a contract that implements a basic bank to store and transfer funds
contract Bank {
    // State variables
    address private owner; // The owner of the contract
    mapping(address => uint256) private balances; // Map of balances for each address

    // Events
    event Transfer(address indexed sender, address indexed recipient, uint256 amount);

    // Constructor function that sets the owner as the deployer
    constructor() {
        owner = msg.sender;
    }

    // Modifier to restrict function access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    // Function to deposit funds into the bank
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
    }

    // Function to transfer funds from the bank to another address
    function transfer(address recipient, uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
    }

    // Function to withdraw funds from the bank
    function withdraw(uint256 amount) public onlyOwner {
        require(balances[owner] >= amount, "Insufficient balance");
        balances[owner] -= amount;
        payable(owner).transfer(amount);
    }

    // Function to check the balance of an address
    function checkBalance(address user) public view returns (uint256) {
        return balances[user];
    }
}