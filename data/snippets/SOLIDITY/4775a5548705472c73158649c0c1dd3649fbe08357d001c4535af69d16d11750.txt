pragma solidity ^0.8.0;

// This is a contract example that demonstrates the use of multiple Solidity principles, including inheritance and interfaces.

// Interfaces are used to define common functions and structs that will be inherited by other contracts.
interface ERC20Token {
    function transfer(address recipient, uint256 amount) external returns (bool);
}

// In this contract, we create a new token that follows the ERC20 standard.
contract MyToken is ERC20Token {

    // State variables
    string public name;     // Token name
    string public symbol;   // Token symbol
    uint8 public decimals;  // Token decimals
    uint256 public totalSupply; // Total token supply

    mapping(address => uint256) public balances; // Mapping of token balances for each address
    mapping(address => mapping(address => uint256)) public allowed; // Mapping of allowed transfers for each address

    // Modifier to only allow the owner of the contract to perform certain actions.
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action.");
        _;
    }

    // Events to track token transfers and allowances.
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);

    // Constructor function that sets the initial token details and mints all the tokens to the contract owner.
    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _initialSupply * 10**uint256(decimals);
        balances[msg.sender] = totalSupply;
    }

    // Functions to implement the ERC20Token interface.

    // Transfers tokens from the sender's balance to the recipient's balance.
    function transfer(address _to, uint256 _amount) public override returns (bool) {
        require(balances[msg.sender] >= _amount, "Insufficient balance.");
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }

    // Allows a spender to transfer tokens from the owner's balance, up to the approved amount.
    function approve(address _spender, uint256 _amount) public override returns (bool) {
        allowed[msg.sender][_spender] = _amount;
        emit Approval(msg.sender, _spender, _amount);
        return true;
    }

    // Transfers tokens from a specific address to another address, as long as the amount is within the approved allowance.
    function transferFrom(address _from, address _to, uint256 _amount) public override returns (bool) {
        require(allowed[_from][msg.sender] >= _amount, "Not enough allowance.");
        require(balances[_from] >= _amount, "Insufficient balance.");
        allowed[_from][msg.sender] -= _amount;
        balances[_from] -= _amount;
        balances[_to] += _amount;
        emit Transfer(_from, _to, _amount);
        return true;
    }

    // Functions that only the owner of the contract can perform.

    // Mints additional tokens to the contract owner's balance.
    function mint(uint256 _amount) public onlyOwner {
        totalSupply += _amount;
        balances[msg.sender] += _amount;
        emit Transfer(address(0), msg.sender, _amount);
    }

    // Burns existing tokens from the contract owner's balance.
    function burn(uint256 _amount) public onlyOwner {
        require(balances[msg.sender] >= _amount, "Insufficient balance.");
        totalSupply -= _amount;
        balances[msg.sender] -= _amount;
        emit Transfer(msg.sender, address(0), _amount);
    }
}