/**
* @title ERC20 Token
* @dev Implementation of the basic standard token.
*/
contract ERC20Token {
    string public name;
    string public symbol;
    uint8 public decimals;

    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(string _name, string _symbol, uint8 _decimals) public {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }

    /**
    * @dev Gets the total supply of tokens.
    * @return Total supply as a uint256
    */
    function totalSupply() public view returns (uint256) {
        return address(this).balance;
    }

    /**
    * @dev Transfers tokens from sender to receiver.
    * @param _to The receiving address
    * @param _value The amount of tokens to be transferred
    * @return True if transfer is successful
    */
    function transfer(address _to, uint256 _value) public returns (bool){
        require(_to != address(0)); // Prevent transfer to 0x0 address
        require(balanceOf[msg.sender] >= _value); // Check if sender has enough balance
        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows
        balanceOf[msg.sender] -= _value; // Subtract from sender's balance
        balanceOf[_to] += _value; // Add to receiver's balance
        emit Transfer(msg.sender, _to, _value); // Emit transfer event
        return true;
    }

    /**
    * @dev Approves another address to spend tokens on sender's behalf.
    * @param _spender The address allowed to spend the tokens
    * @param _value The amount of tokens to be approved
    * @return True if approval is successful
    */
    function approve(address _spender, uint256 _value) public returns (bool){
        allowance[msg.sender][_spender] = _value; // Set the allowed amount
        emit Approval(msg.sender, _spender, _value); // Emit approval event
        return true;
    }

    /**
    * @dev Transfers tokens from one address to another using the approved amount.
    * @param _from The address to transfer tokens from
    * @param _to The address to transfer tokens to
    * @param _value The amount of tokens to be transferred
    * @return True if transfer is successful
    */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){
        require(_to != address(0)); // Prevent transfer to 0x0 address
        require(balanceOf[_from] >= _value); // Check if sender has enough balance
        require(allowance[_from][msg.sender] >= _value); // Check if allowed amount is enough
        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows
        balanceOf[_from] -= _value; // Subtract from sender's balance
        balanceOf[_to] += _value; // Add to receiver's balance
        allowance[_from][msg.sender] -= _value; // Reduce approved amount
        emit Transfer(_from, _to, _value); // Emit transfer event
        return true;
    }
}