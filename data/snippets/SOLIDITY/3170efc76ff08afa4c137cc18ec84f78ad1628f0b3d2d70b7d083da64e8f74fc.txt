pragma solidity >=0.6.0 <0.9.0; //specify version of solidity to use 

//import statements
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol";

contract TokenSwap {
    using SafeERC20 for IERC20; //using SafeERC20 library for safe token transfers

    //define variables
    IERC20 public tokenFrom; //token being sent
    IERC20 public tokenTo; //token being received
    address public sender; //address of sender
    address public receiver; //address of receiver
    uint256 public amount; //amount of tokens being swapped
    
    //event to track token swap
    event TokenSwap(address sender, address receiver, uint256 amountSent, uint256 amountReceived);
    
    //constructor to initiate token swap
    constructor (IERC20 _tokenFrom, IERC20 _tokenTo, address _sender, address _receiver, uint256 _amount) public {
        tokenFrom = _tokenFrom;
        tokenTo = _tokenTo;
        sender = _sender;
        receiver = _receiver;
        amount = _amount;
    }
    
    //function to execute token swap
    function swapTokens() external {
        //transfer tokens from sender to contract
        tokenFrom.safeTransferFrom(sender, address(this), amount);
        
        //calculate amount of tokens to receive (assuming 1:1 swap ratio)
        uint256 amountToReceive = amount;
        
        //transfer tokens from contract to receiver
        tokenTo.safeTransfer(receiver, amountToReceive);
        
        //emit token swap event
        emit TokenSwap(sender, receiver, amount, amountToReceive);
    }
}