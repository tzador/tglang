// Contract representing a basic bank account
contract BankAccount {
    // Variables to store account information
    address owner;
    uint256 balance;
    
    // Event to emit when funds are deposited
    event Deposit(address depositor, bool success, uint amount);
    
    /**
     * @dev Constructor function - sets account owner and initial balance
     */
    constructor() public {
        owner = msg.sender;
        balance = 0;
    }
    
    /**
     * @dev function to deposit funds into the account
     * @param _amount The amount to be deposited
     */
    function deposit(uint256 _amount) public payable {
        require(msg.value == _amount, "Amount sent must match amount specified.");
        balance += _amount;
        
        // Emit event to notify of deposit
        emit Deposit(msg.sender, true, _amount);
    }
    
    /**
     * @dev function to withdraw funds from the account
     * @param _amount The amount to be withdrawn
     */
    function withdraw(uint256 _amount) public {
        // Check if account has enough funds
        require(balance >= _amount, "Insufficient funds.");
        balance -= _amount;
        
        // Transfer funds to caller
        msg.sender.transfer(_amount);
        
        // Emit event to notify of withdrawal
        emit Deposit(msg.sender, true, _amount);
    }
    
    /**
     * @dev function to get the current balance of the account
     * @return The current balance
     */
    function getBalance() public view returns (uint256) {
        return balance;
    }
}