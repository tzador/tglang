// Define a contract
contract MyContract {
    // Define state variables
    uint256 public myNumber;
    string public myString;
    address public owner;
    mapping(address => bool) public myMapping;

    // Define events
    event NumberSet(uint256 _newNumber);
    event StringSet(string _newString);

    // Constructor function
    constructor() public {
        // Set the owner of the contract
        owner = msg.sender;
    }

    // Modifier to check if caller is the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller must be the owner");
        _;
    }

    // Function to set a new number
    function setNumber(uint256 _newNumber) public onlyOwner {
        myNumber = _newNumber;
        // Emit an event
        emit NumberSet(_newNumber);
    }

    // Function to set a new string
    function setString(string memory _newString) public onlyOwner {
        myString = _newString;
        // Emit an event
        emit StringSet(_newString);
    }

    // Function to add a new address to the mapping
    function addAddress(address _newAddress) public onlyOwner {
        myMapping[_newAddress] = true;
    }

    // Function to delete an address from the mapping
    function deleteAddress(address _addressToDelete) public onlyOwner {
        myMapping[_addressToDelete] = false;
    }
}