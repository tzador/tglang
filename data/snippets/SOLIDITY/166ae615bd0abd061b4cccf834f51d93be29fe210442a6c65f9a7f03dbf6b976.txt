pragma solidity ^0.8.0; // Solidity compiler version

// Interface for other contracts to interact with this contract
interface IContract {
    function deposit(uint256 _amount) external;
    function withdraw(uint256 _amount) external;
}

// Contract using the 'S' in SOLID design principles
contract SingleResponsibility is IContract {
    // Variables
    uint256 public totalBalance;
    address public owner;

    // Events
    event Deposit(address indexed _depositer, uint256 _amount);
    event Withdrawal(address indexed _withdrawee, uint256 _amount);

    // Constructor
    constructor() {
        owner = msg.sender;
    }

    // Modifier to restrict access to only the owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }

    // Function to deposit funds into the contract
    function deposit(uint256 _amount) external override onlyOwner {
        require(_amount > 0, "Deposit amount must be greater than 0.");
        totalBalance += _amount;
        emit Deposit(msg.sender, _amount);
    }

    // Function to withdraw funds from the contract
    function withdraw(uint256 _amount) external override onlyOwner {
        require(_amount > 0, "Withdrawal amount must be greater than 0.");
        require(_amount <= totalBalance, "Insufficient balance.");
        totalBalance -= _amount;
        emit Withdrawal(msg.sender, _amount);
    }
}