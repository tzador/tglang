// SPDX-License-Identifier: MIT 

pragma solidity ^0.8.0; 

// Contract created to demonstrate the implementation of the five principles of SOLID 
// Principle 1: Single Responsibility 

contract SRPExample { 
    
    // Private variables
    
    uint private numA = 10; 
    uint private numB = 20; 
    
    // Public function that calculates the sum of numA and numB 
    
    function calculateSum() public view returns (uint) { 
        return numA + numB; 
    } 
    
    // Private function to add the two numbers 
    
    function addNumbers(uint a, uint b) private pure returns (uint) { 
        return a + b; 
    } 
    
    // Principle 2: Open/Closed 
    
    // Public function that calculates the difference between numA and numB 
    
    function calculateDifference() public view returns (uint) { 
        return numA - numB; 
    } 
    
    // Public function that calculates the product of numA and numB 
    
    function calculateProduct() public view returns (uint) { 
        return numA * numB; 
    } 
    
    // Principle 3: Liskov Substitution 
    
    // Interface for Shape contract 
    
    interface IShape { 
        function getArea(uint height, uint width) external pure returns (uint); 
    } 
    
    // Rectangle contract implementing IShape interface 
    
    contract Rectangle is IShape { 
        
        // Function to get the area of a rectangle 
        
        function getArea(uint height, uint width) external pure override returns (uint) { 
            return height * width; 
        } 
    } 
    
    // Square contract also implementing IShape interface 
    
    contract Square is IShape { 
        
        // Function to get the area of a square 
        
        function getArea(uint height, uint width) external pure override returns (uint) { 
            require(height == width, "Height and width must be equal for a square"); 
            return height * width; 
        } 
    } 
    
    // Principle 4: Interface Segregation 
    
    // Interface for Vehicle contract 
    
    interface IVehicle { 
        function accelerate() external; 
        function brake() external; 
    } 
    
    // Car contract implementing IVehicle interface 
    
    contract Car is IVehicle { 
        
        // Function to accelerate the car 
        
        function accelerate() external override { 
            // Code for accelerating the car 
        } 
        
        // Function to brake the car 
        
        function brake() external override { 
            // Code for braking the car 
        } 
    } 
    
    // Bicycle contract implementing IVehicle interface 
    
    contract Bicycle is IVehicle { 
        
        // Function to pedal the bicycle 
        
        function accelerate() external override { 
            // Code for pedaling the bicycle 
        } 
        
        // Function to use the brake on the bicycle 
        
        function brake() external override { 
            // Code for using the brake on the bicycle 
        } 
    } 
    
    // Principle 5: Dependency Inversion 
    
    // Interface for MessagingService contract 
    
    interface IMessagingService { 
        function sendMessage(string memory message) external; 
    } 
    
    // EmailService contract implementing IMessagingService interface 
    
    contract EmailService is IMessagingService { 
        
        // Function to send an email 
        
        function sendMessage(string memory message) external override { 
            // Code for sending an email 
        } 
    } 
    
    // SmsService contract implementing IMessagingService interface 
    
    contract SmsService is IMessagingService { 
        
        // Function to send an SMS 
        
        function sendMessage(string memory message) external override { 
            // Code for sending an SMS 
        } 
    } 
    
    // Constructor to select the messaging service 
    constructor(IMessagingService _messagingService) { 
        messagingService = _messagingService; 
    } 
    
    // Function to send a message using the selected messaging service 
    
    function sendMessage(string memory message) public { 
        messagingService.sendMessage(message); 
    } 
    
    // Private variable for storing the selected messaging service 
    
    IMessagingService private messagingService; 
}