pragma solidity ^0.8.4;

// This contract implements a voting system using Solidity

contract VotingSystem {
    
    // Stores the address of the election administrator
    address public administrator;
    
    // Name of the election
    string public electionName;
    
    // Stores candidate information
    struct Candidate {
        string name;
        uint256 voteCount;
        address candidateAddress;
    }
    // Array of candidates
    Candidate[] public candidates;
    
    // Stores the address of eligible voters
    mapping(address => bool) public voters;
    
    // Stores the voter's choice
    mapping(address => Candidate) public votes;
    
    // Event triggered when a new candidate is added
    event CandidateAdded(string name, address candidateAddress);
    
    // Modifier to check if caller is the election administrator
    modifier onlyAdministrator() {
        require(msg.sender == administrator);
        _;
    }
    
    // Constructor function for setting up the election
    constructor(string memory _name) {
        electionName = _name;
        administrator = msg.sender;
    }
    
    // Function to add new candidates
    function addCandidate(string memory _name, address _candidateAddress) public onlyAdministrator {
        candidates.push(Candidate(_name, 0, _candidateAddress));
        emit CandidateAdded(_name, _candidateAddress);
    }
    
    // Function to register a voter
    function registerVoter(address _voter) public onlyAdministrator {
        voters[_voter] = true;
    }
    
    // Function to cast a vote
    function vote(address _voter, address _candidateAddress) public {
        require(voters[_voter]);
        require(votes[_voter].voteCount == 0); // check if voter has not voted already
        votes[_voter] = _candidateAddress; // record vote
        candidates[getCandidateIndex(_candidateAddress)].voteCount++; // increment vote count for the candidate
    }
    
    // Function to retrieve the index of a candidate given their address
    function getCandidateIndex(address _candidateAddress) private view returns (uint256) {
        for(uint256 i = 0; i < candidates.length; i++) {
            if(candidates[i].candidateAddress == _candidateAddress) {
                return i;
            }
        }
    }
}