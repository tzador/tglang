pragma solidity ^0.8.0; // declaring version of solidity
/**
 * @dev contract for creating a decentralized smart contract
 */
contract DecentralizedContract {
    // variables
    address payable public owner;
    uint public totalSupply;
    mapping(address => uint) balances;
    
    // events
    event Transfer(address indexed _from, address indexed _to, uint _value);
    
    // constructor
    constructor() public {
        owner = msg.sender;
        totalSupply = 100;
        balances[msg.sender] = 100;
    }
    
    // modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }
    
    // functions
    /**
     * @dev transfer tokens from one address to another
     * @param _to address to transfer tokens to
     * @param _value number of tokens to transfer
     */
    function transfer(address _to, uint _value) public {
        require(balances[msg.sender] >= _value, "Not enough tokens in sender's balance.");
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
    }
    
    /**
     * @dev get balance of specific address
     * @param _address address to get balance of
     * @return balance of the given address
     */
    function getBalance(address _address) public view returns(uint) {
        return balances[_address];
    }
    
    /**
     * @dev mint new tokens
     * @param _to address to mint tokens to
     * @param _value number of tokens to mint
     */
    function mint(address _to, uint _value) public onlyOwner {
        totalSupply += _value;
        balances[_to] += _value;
    }
}