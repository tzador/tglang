pragma solidity ^0.8.4;

// Creating a contract named 'Voting'
contract Voting {

    // Defining a variable to store the total number of votes
    uint totalVotes;

    // Creating a mapping to store the votes of each candidate
    mapping(string => uint) candidateVotes;

    // Defining an array to store the names of the candidates
    string[] candidateNames;

    // Creating a function to add a new candidate
    function addCandidate(string memory name) public {

        // Adding the name of the candidate to the array
        candidateNames.push(name);

        // Initializing the number of votes for the candidate to 0
        candidateVotes[name] = 0;
    }

    // Creating a function to cast a vote for a candidate
    function voteForCandidate(string memory name) public {

        // Checking if the candidate exists in the candidateNames array
        require(candidateExists(name), "Candidate does not exist");

        // Incrementing the vote count for the candidate by 1
        candidateVotes[name]++;
    }

    // Creating a function to check if a candidate exists
    function candidateExists(string memory name) private view returns (bool) {

        // Looping through the candidateNames array
        for (uint i = 0; i < candidateNames.length; i++) {

            // Checking if the given name matches any of the names in the array
            if (keccak256(bytes(candidateNames[i])) == keccak256(bytes(name))) {
                return true; // Candidate exists
            }
        }

        // Candidate does not exist
        return false;
    }

    // Creating a function to get the total number of votes
    function getTotalVotes() public view returns (uint) {

        // Looping through the candidateNames array
        for (uint i = 0; i < candidateNames.length; i++) {

            // Adding the candidate's votes to the totalVotes variable
            totalVotes += candidateVotes[candidateNames[i]];
        }

        // Returning the total number of votes
        return totalVotes;
    }

    // Function to get the number of votes for a specific candidate
    function getVotesForCandidate(string memory name) public view returns (uint) {

        // Checking if the candidate exists
        require(candidateExists(name), "Candidate does not exist");

        // Returning the number of votes for the candidate
        return candidateVotes[name];
    }
}