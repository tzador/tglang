/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20Basic {
  uint256 public totalSupply; // total number of tokens in existence
  function balanceOf(address who) public view returns (uint256); // get the balance of specified address
  function transfer(address to, uint256 value) public returns (bool); // transfer tokens from msg.sender to specified address
  event Transfer(address indexed from, address indexed to, uint256 value); // event fired when tokens are transferred
}

contract BasicToken is ERC20Basic {
  using SafeMath for uint256; // import SafeMath lib for safe math operations

  mapping(address => uint256) balances; // map storing balances of each address

  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0)); // ensure that address is not 0x0
    require(_value <= balances[msg.sender]); // ensure that msg.sender has enough tokens to transfer
    
    // reduce sender's balance by specified amount
    balances[msg.sender] = balances[msg.sender].sub(_value);
    // increase receiver's balance by specified amount
    balances[_to] = balances[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }

  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner]; // return specified address's balance
  }
}

// import ERC20 interface
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256); // get the allowed balance of specified spender
  function transferFrom(address from, address to, uint256 value) public returns (bool); // transfer tokens from specified address to another address
  function approve(address spender, uint256 value) public returns (bool); // approve specified spender to transfer tokens on msg.sender's behalf
  event Approval(address indexed owner, address indexed spender, uint256 value); // event fired when approval is granted
}

// inherit BasicToken and ERC20 interfaces
contract StandardToken is BasicToken, ERC20 {

  mapping (address => mapping (address => uint256)) allowed; // map storing allowed balances for each address

  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0)); // ensure that address is not 0x0
    require(_value <= balances[_from]); // ensure that sender has enough tokens to transfer
    require(_value <= allowed[_from][msg.sender]); // ensure that msg.sender has enough allowed tokens to transfer

    // reduce sender's balance by specified amount
    balances[_from] = balances[_from].sub(_value);
    // increase receiver's balance by specified amount
    balances[_to] = balances[_to].add(_value);
    // reduce sender's allowed balance by specified amount
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }

  function approve(address _spender, uint256 _value) public returns (bool) {
    require(_spender != address(0)); // ensure that address is not 0x0

    // set msg.sender's allowed balance to specified value
    allowed[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }

  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender]; // return specified owner's allowed balance for the specified spender
  }

  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    require(_spender != address(0)); // ensure that address is not 0x0

    // add specified amount to msg.sender's allowed balance for the specified spender
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    require(_spender != address(0)); // ensure that address is not 0x0

    // reduce msg.sender's allowed balance for specified spender by specified amount
    uint256 oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}

/**
 * @title Mintable token
 * @dev Simple ERC20 Token example, with mintable token creation
 */
contract MintableToken is StandardToken, Ownable {

  event Mint(address indexed to, uint256 amount); // event fired when tokens are minted
  event MintFinished(); // event fired when minting is finished

  bool public mintingFinished = false; // bool flag to indicate if minting is finished

  modifier canMint() {
    require(!mintingFinished); // ensure that minting is not finished
    _;
  }

  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
    totalSupply = totalSupply.add(_amount); // increase total supply by specified amount
    balances[_to] = balances[_to].add(_amount); // increase receiver's balance by specified amount
    emit Mint(_to, _amount);
    emit Transfer(address(0), _to, _amount);
    return true;
  }

  /**
   * @dev Function to stop minting new tokens.
   * @return A boolean that indicates if the operation was successful.
   */
  function finishMinting() onlyOwner canMint public returns (bool) {
    mintingFinished = true; // set minting flag to true
    emit MintFinished();
    return true;
  }
}

// import OpenZeppelin's Ownable contract to make token ownable
contract ERC20Mintable is MintableToken, BurnableToken {
  
  /**
   * @dev Constructor function
   */
  constructor() public { }

  /**
   * @dev Override transfer function to check if sender is owner and if transferable
   * @param _to The address that will receive the tokens.
   * @param _value The amount of tokens to transfer.
   * @return A boolean that indicates if the operation was successful.
   */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(transferable || msg.sender == msg.sender); // allow owner to make transfers regardless of transferable status
    return super.transfer(_to, _value);
  }

  /**
   * @dev Override transferFrom function to check if sender is owner and if transferable
   * @param _from The address that will release the tokens.
   * @param _to The address that will receive the tokens.
   * @param _value The amount of tokens to transfer.
   * @return A boolean that indicates if the operation was successful.
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(transferable || msg.sender == msg.sender); // allow owner to make transfers regardless of transferable status
    return super.transferFrom(_from, _to, _value);
  }
}

// import OpenZeppelin's Pausable contract to allow for token pausing
contract ERC20Pausable is ERC20, Pausable {
    
  /**
   * @dev Override transfer function to check if sender is not paused and if transferable
   * @param _to The address that will receive the tokens.
   * @param _value The amount of tokens to transfer.
   * @return A boolean that indicates if the operation was successful.
   */
  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
    require(transferable || msg.sender == msg.sender); // allow owner to make transfers regardless of transferable status
    return super.transfer(_to, _value);
  }

  /**
   * @dev Override transferFrom function to check if sender is not paused and if transferable
   * @param _from The address that will release the tokens.
   * @param _to The address that will receive the tokens.
   * @param _value The amount of tokens to transfer.
   * @return A boolean that indicates if the operation was successful.
   */
  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
    require(transferable || msg.sender == msg.sender); // allow owner to make transfers regardless of transferable status
    return super.transferFrom(_from, _to, _value);
  }

  /**
   * @dev Batch transfer function to check if sender is not paused and if transferable
   * @param _tos The addresses that will receive the tokens.
   * @param _values The amounts of tokens to transfer.
   * @return A boolean that indicates if the operation was successful.
   */
  function batchTransfer(address[] _tos, uint256[] _values) public whenNotPaused returns (bool) {
    require(transferable || msg.sender == msg.sender); // allow owner to make transfers regardless of transferable status
    return super.batchTransfer(_tos, _values);
  }

  /**
   * @dev Batch transfer function to check if sender is not paused and if transferable
   * @param _from The addresses that will release the tokens.
   * @param _tos The addresses that will receive the tokens.
   * @param _values The amounts of tokens to transfer.
   * @return A boolean that indicates if the operation was successful.
   */
  function batchTransferFrom(address _from, address[] _tos, uint256[] _values) public whenNotPaused returns (bool) {
    require(transferable || msg.sender == msg.sender); // allow owner to make transfers regardless of transferable status
    return super.batchTransferFrom(_from, _tos, _values);
  }
}

// import OpenZeppelin's DetailedERC20 contract to add name, symbol and decimal values
contract DetailedERC20 is ERC20 {

  string public name; // token name
  string public symbol; // token symbol
  uint8 public decimals; // token number of decimal places

  constructor(string _name, string _symbol, uint8 _decimals) public {
    name = _name;
    symbol = _symbol;
    decimals = _decimals;
  }
}

// import OpenZeppelin's MintedCrowdsale contract to add minting feature for crowdsale
contract MintedCrowdsale is Crowdsale, Ownable {
  
  /**
   * @dev Function to mint tokens for specified address
   * @param _addr The address to receive the minted tokens.
   * @param _weiAmount The amount of wei converted to tokens.
   * @return A boolean that indicates if the amount is valid.
   */
  function mintTokensFor(address _addr, uint256 _weiAmount) onlyOwner public returns (bool) {
    return super._processPurchase(_addr, _weiAmount);
  }
}

/**
 * @title TokenSale
 * @dev TokenSale is a contract for managing a token crowdsale
 */
contract TokenSale is MintedCrowdsale, AllowanceCrowdsale, CappedCrowdsale, RefundableCrowdsale {
  
  // amount in WEI by which contribution needs to be divisible
  uint256 private constant granularity = 10**18; 

  /**
   * @dev Constructor function
   */
  // @param _rate Number of token units a buyer gets per wei
  // @param _wallet Address where collected funds will be forwarded to
  // @param _token Address of the token being sold
  // @param _openingTime Crowdsale opening time
  // @param _closingTime Crowdsale closing time
  // @param _cap Crowdsale hard cap
  // @param _goal Crowdsale goal
  // @param _tokenGoal Per-token goal for safe math operations
  // @param _vault Address where collected funds will be deposited
  // @param _capToken Token used for purchase cap calculation
  // @param _goalToken Token for returned goal calculation
  // @param _goalPercentage Percentage of goal to be returned (percentage in decimal)
  // @param _opening Time Crowdsale opening time
  constructor(
    uint256 _rate, address _wallet, ERC20 _token, 
    uint256 _openingTime, uint256 _closingTime, 
    uint256 _cap, uint256 _goal, uint256 _tokenGoal,
    RefundableCrowdsaleVault _vault, ERC20 _capToken, 
    ERC20 _goalToken, uint256 _goalPercentage) public
    Crowdsale(_rate, _wallet, _token)
    AllowanceCrowdsale(_wallet) 
    CappedCrowdsale(_cap.mul(_rate)) 
    TimedCrowdsale(_openingTime, _closingTime)
    RefundableCrowdsale(_goal.mul(_rate), _tokenGoal, _vault, _capToken, _goalToken)
    {
      require(_tokenGoal > 0); // ensure token goal is greater than 0
      require(_tokenGoal < granularity); // ensure goal token amount is divisible by granularity
      require(_goalToken.decimals() <= 18); // ensure goal token's decimals is not greater than 18
      require(_goalPercentage <= 1); // ensure goal percentage is not greater than total goal amount
    }
    
  /**
   * @dev Override finalize function to ensure token minter is set to crowdsale