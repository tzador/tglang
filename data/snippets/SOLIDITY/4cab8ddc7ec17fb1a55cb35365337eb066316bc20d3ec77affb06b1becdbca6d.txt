contract BankingSystem {
    
    address public owner; //public state variable to store owner address
    
    //Struct to store bank account information
    struct BankAccount {
        address accountHolder; //address of the account holder
        uint balance; //account balance
        uint accountNumber; //account number
    }
    
    mapping(uint => BankAccount) public accounts; //public mapping to store all BankAccounts
    
    //Modifier to check if caller is the owner of the contract
    modifier onlyOwner {
        require(msg.sender == owner); //revert transaction if not called by owner
        _; //continue with function execution
    }
    
    //Event to be emitted when a new bank account is created
    event BankAccountCreated(address indexed accountHolder, uint accountNumber);
    
    //Function to create a new BankAccount
    function createBankAccount(address _accountHolder, uint _initialBalance) public onlyOwner returns (uint) {
        require(_accountHolder != address(0)); //revert transaction if the account holder address is 0
        BankAccount memory newAccount = BankAccount(_accountHolder, _initialBalance, accountsCount + 1); //create new BankAccount object
        accounts[accountsCount] = newAccount; //add new account to mapping
        accountsCount++; //increment the accountsCount
        emit BankAccountCreated(_accountHolder, newAccount.accountNumber); //emit event
        return newAccount.accountNumber; //return the new account's accountNumber
    }
    
    //Function to deposit funds to a specific bank account
    function depositFunds(uint _accountNumber, uint _amount) public payable {
        require(accounts[_accountNumber].accountHolder == msg.sender); //revert transaction if the sender is not the account holder
        accounts[_accountNumber].balance += _amount; //add deposit amount to account balance
    }
    
    //Function to withdraw funds from a specific bank account
    function withdrawFunds(uint _accountNumber, uint _amount) public payable {
        require(accounts[_accountNumber].accountHolder == msg.sender); //revert transaction if the sender is not the account holder
        require(accounts[_accountNumber].balance >= _amount); //revert transaction if account balance is less than withdrawal amount
        accounts[_accountNumber].balance -= _amount; //subtract withdrawal amount from account balance
        msg.sender.transfer(_amount); //transfer funds to sender's account
    }
    
    //Function to get account balance for a specific account
    function getBalance(uint _accountNumber) public view returns (uint) {
        require(accounts[_accountNumber].accountHolder == msg.sender); //revert transaction if the sender is not the account holder
        return accounts[_accountNumber].balance;
    }
    
}