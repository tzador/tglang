pragma solidity 0.8.4;

// Defines a contract called MyContract
contract MyContract {

    // Variables declared within a contract are called "state variables"
    // These are similar to class member variables in object-oriented programming
    uint public myInt;
    address public owner;

    // Events allow for the logging of important contract data
    // It is recommended to use events instead of console.log
    event NewInt(uint myNewInt);
    event NewOwner(address newOwner);

    // Constructor function which is invoked only once, immediately upon contract creation
    constructor() {
        // Sets the owner of the contract to the address of the person who deployed it
        owner = msg.sender;

        // Sets the initial value of myInt to 5
        myInt = 5;
    }

    // Function that can be called to change the value of myInt
    function setMyInt(uint _newInt) public {
        // Only the owner of the contract can change the value of myInt
        require(msg.sender == owner);
        // Sets myInt to the value passed in as a parameter
        myInt = _newInt;
        // Emits a NewInt event with the new value
        emit NewInt(myInt);
    }

    // Function that can be called to transfer ownership of the contract
    function changeOwner(address _newOwner) public {
        // Only the current owner can transfer ownership
        require(msg.sender == owner);
        // Sets the owner to the new address
        owner = _newOwner;
        // Emits a NewOwner event with the new owner's address
        emit NewOwner(owner);
    }
}