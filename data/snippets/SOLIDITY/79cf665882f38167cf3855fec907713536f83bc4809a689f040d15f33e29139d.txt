pragma solidity >= 0.7.0; // Specifying the version of Solidity

/*
 * @title Token Contract
 * @dev This contract simulates a simple ERC20 token with basic functionalities and follows the Solidity coding standard.
 */

contract Token {
    // Storage variables
    string private _name; // Name of the token
    string private _symbol; // Symbol of the token
    uint8 private _decimals; // Number of decimals for the token
    // Mappings
    mapping(address => uint256) private _balances; // Mapping of account addresses to their token balances
    mapping(address => mapping(address => uint256)) private _allowances; // Mapping of an address to an address and the allowed token amount
    // Events
    event Transfer(address indexed from, address indexed to, uint256 value); // Event triggered when a transfer occurs
    event Approval(address indexed owner, address indexed spender, uint256 value); // Event triggered when an approval occurs

    constructor(string memory name_, string memory symbol_, uint8 decimals_) {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
    }

    // Function modifiers
    modifier onlyValidAddress(address account) {
        require(account != address(0), "Token: transfer from the zero address"); // Checks if the address is not the zero address
        _;
    }

    // Public functions
    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public onlyValidAddress(recipient) returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public onlyValidAddress(spender) returns (bool) {
        require(_msgSender() == spender || amount == 0, "Token: approve from non-owner"); // Checks if the spender is the owner or the approved amount is 0
        _approve(msg.sender, spender, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function transferFrom(address sender, address recipient, uint256 amount) public onlyValidAddress(recipient) returns (bool) {
        _transfer(sender, recipient, amount); // Transfers the specified amount from the sender to the recipient
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount); // Updates the allowance by deducting the transferred amount
        return true;
    }

    // Internal functions
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Token: transfer from the zero address"); // Checks if the sender is not the zero address
        require(recipient != address(0), "Token: transfer to the zero address"); // Checks if the recipient is not the zero address
        _balances[sender] -= amount; // Deducts the transferred token amount from the sender's balance
        _balances[recipient] += amount; // Adds the transferred token amount to the recipient's balance
        emit Transfer(sender, recipient, amount);
    }

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Token: approve from the zero address"); // Checks if the owner is not the zero address
        require(spender != address(0), "Token: approve to the zero address"); // Checks if the spender is not the zero address
        _allowances[owner][spender] = amount; // Sets the allowed amount for the specified owner and spender
        emit Approval(owner, spender, amount);
    }
}