// This contract implements a simple voting system using the Solidity programming language.

// Creating a contract called "VotingSystem"
contract VotingSystem {
    
    // Variables to store the number of yes, no, and abstain votes.
    uint public yesVotes;
    uint public noVotes;
    uint public abstainVotes;
    
    // Mapping to keep track of which addresses have already voted.
    mapping(address => bool) public hasVoted;
    
    // An event to notify when a vote is cast.
    event VoteCast(address voter, bool choice);
    
    // A modifier to ensure only eligible voters can cast their votes.
    modifier onlyEligibleVoters {
        require(hasVoted[msg.sender] == false);
        _;
    }
    
    // A function to cast a vote, only eligible voters can call this function.
    function vote(bool _choice) public onlyEligibleVoters {
        // Increment the vote count based on the choice and mark the voter as having voted.
        if(_choice == true) {
            yesVotes++;
            hasVoted[msg.sender] = true;
        }
        else if (_choice == false) {
            noVotes++;
            hasVoted[msg.sender] = true;
        }
        else {
            abstainVotes++;
            hasVoted[msg.sender] = true;
        }
        
        // Emitting the VoteCast event.
        emit VoteCast(msg.sender, _choice);
    }
    
    // A function to check the winning choice.
    function getWinner() public view returns (string) {
        // If there are more yes votes than no votes, yes wins.
        if(yesVotes > noVotes) {
            return "Yes is the winning choice!";
        }
        // If there are more no votes than yes votes, no wins.
        else if (noVotes > yesVotes) {
            return "No is the winning choice!";
        }
        // Otherwise, it is a tie between yes and no votes.
        else {
            return "It is a tie between yes and no votes.";
        }
    }
}