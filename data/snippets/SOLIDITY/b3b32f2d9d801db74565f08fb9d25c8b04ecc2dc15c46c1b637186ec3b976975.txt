pragma solidity ^0.8.0; // version identifier

contract Bank {
    uint balance;
    address owner;

    // constructor to initialize the owner
    constructor(address _owner) {
        owner = _owner;
    }

    // function to deposit money into the bank
    function deposit(uint amount) external {
        require(msg.sender == owner, "You do not have permission to deposit."); // only the owner can deposit
        require(amount > 0, "Amount must be greater than 0."); // check if amount is valid
        balance += amount; // add amount to balance
    }

    // function to withdraw money from the bank
    function withdraw(uint amount) external {
        require(msg.sender == owner, "You do not have permission to withdraw."); // only the owner can withdraw
        require(amount > 0, "Amount must be greater than 0."); // check if amount is valid
        require(balance > amount, "Insufficient balance."); // check if balance is enough
        balance -= amount; // subtract amount from balance
    }

    // function to transfer money to another address
    function transfer(address recipient, uint amount) external {
        require(msg.sender == owner, "You do not have permission to transfer."); // only the owner can transfer
        require(recipient != address(0), "Invalid recipient address."); // check if recipient address is valid
        require(amount > 0, "Amount must be greater than 0."); // check if amount is valid
        require(balance > amount, "Insufficient balance."); // check if balance is enough
        balance -= amount; // subtract amount from balance
        Bank recipientBank = Bank(recipient); // get instance of recipient's bank contract
        recipientBank.deposit(amount); // call deposit function on recipient's bank contract to add amount to their balance
    }

    // function to check the current balance
    function getBalance() external view returns (uint) {
        return balance;
    }
}