// Define contract
contract Example {
  // State variables
  address public owner; // Declares owner state variable to store address type
  uint public memberCount; // Declares memberCount as unsigned integer

  // Mapping to store user addresses and their balances
  mapping (address => uint) public balances;

  // Events
  event NewMember(address member); // Event to track new members

  // Constructor
  constructor() public {
    owner = msg.sender; // Sets the contract owner as the address that deployed the contract
  }

  // Modifier for only owner function
  modifier onlyOwner() {
    require(msg.sender == owner, "Caller is not the owner."); // Check if function caller is the owner
    _; // Continue execution of function if caller is the owner
  }

  // Function to add members
  function addMember(address _member) public onlyOwner {
    balances[_member] = 100; // Sets the initial balance of new member to 100
    memberCount++; // Increments the member count by 1
    emit NewMember(_member); // Emit event to track new member
  }

  // Function to transfer funds between members
  function transfer(address _to, uint _amount) public {
    require(balances[msg.sender] >= _amount, "Not enough balance."); // Check if sender has enough balance
    require(balances[_to] + _amount >= balances[_to], "Overflow detected."); // Check for overflow
    balances[msg.sender] -= _amount; // Deduct amount from sender's balance
    balances[_to] += _amount; // Add amount to receiver's balance
  }
}