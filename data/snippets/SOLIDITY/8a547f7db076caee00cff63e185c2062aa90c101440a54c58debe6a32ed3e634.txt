pragma solidity ^0.8.0;

// Contract to manage farming tokens
contract Farming {
    // Variables for token details
    string public name = "Farming Token";
    string public symbol = "FARM";
    uint256 public totalSupply;
    uint256 public decimals = 18;

    // Mapping to keep track of user balances
    mapping(address => uint256) public balanceOf;

    // Events for token transfer and approval
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Constructor to set total supply and assign initial balance to contract creator
    constructor(uint256 _totalSupply) {
        totalSupply = _totalSupply;
        balanceOf[msg.sender] = _totalSupply;
    }

    // Function to transfer tokens
    function transfer(address _to, uint256 _value) external returns (bool) {
        // Check if sender has enough balance
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");

        // Subtract tokens from sender and add to recipient
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        // Emit event for transfer
        emit Transfer(msg.sender, _to, _value);

        return true;
    }

    // Function to approve spender to spend a certain amount of tokens on sender's behalf
    function approve(address _spender, uint256 _value) external returns (bool) {
        // Set allowance for spender to spend tokens on sender's behalf
        allowance[msg.sender][_spender] = _value;

        // Emit event for approval
        emit Approval(msg.sender, _spender, _value);

        return true;
    }

    // Mapping to keep track of allowed tokens for spenders
    mapping(address => mapping(address => uint256)) public allowance;

    // Function to transfer tokens on behalf of sender
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {
        // Check if sender has enough allowance
        require(allowance[_from][msg.sender] >= _value, "Insufficient allowance");

        // Check if sender has enough balance
        require(balanceOf[_from] >= _value, "Insufficient balance");

        // Subtract tokens from _from and add to _to
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;

        // Reduce allowance of _from by _value
        allowance[_from][msg.sender] -= _value;

        // Emit event for transfer
        emit Transfer(_from, _to, _value);

        return true;
    }
}