//**********************************************************
// Abstract contract for ERC20 tokens
//**********************************************************

abstract contract ERC20Token {
    uint public totalSupply;
    string public name;
    uint public decimals;
    string public symbol;

    mapping (address => uint) balances;
    mapping (address => mapping (address => uint)) allowed;

    //**************************************************
    // Internal function to transfer tokens from one
    // account to another
    //**************************************************

    function _transfer(address _from, address _to, uint _value) internal {
        
        //**************************************************
        // Check if the sender has enough tokens
        //**************************************************

        require(balances[_from] >= _value);

        //**************************************************
        // Check for overflow
        //**************************************************

        require(balances[_to] + _value >= balances[_to]);

        //**************************************************
        // Update balances and emit Transfer event
        //**************************************************

        balances[_from] -= _value;
        balances[_to] += _value;
        emit Transfer(_from, _to, _value);
    }

    //**************************************************
    // Function to get the balance of an address
    //**************************************************

    function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
    }

    //**************************************************
    // Internal function to approve an address to spend
    // a certain amount of tokens
    //**************************************************

    function _approve(address _owner, address _spender, uint _value) internal {
        allowed[_owner][_spender] = _value;
        emit Approval(_owner, _spender, _value);
    }

    //**************************************************
    // Function to get the approved amount for an address
    //**************************************************

    function allowance(address _owner, address _spender) public view returns (uint remaining) {
        return allowed[_owner][_spender];
    }

    //**************************************************
    // Function to transfer tokens to another address
    //**************************************************

    function transfer(address _to, uint _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }

    //**************************************************
    // Function to approve an address to spend a certain
    // amount of tokens
    //**************************************************

    function approve(address _spender, uint _value) public returns (bool success) {
        _approve(msg.sender, _spender, _value);
        return true;
    }

    //**************************************************
    // Function to transfer tokens from one address to
    // another on behalf of another address
    //**************************************************

    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
        
        //**************************************************
        // Check if the sender has enough tokens
        //**************************************************

        require(allowed[_from][msg.sender] >= _value);

        //**************************************************
        // Check if the sender has enough approved tokens
        //**************************************************

        require(balances[_from] >= _value);

        //**************************************************
        // Check for overflow
        //**************************************************

        require(balances[_to] + _value >= balances[_to]);

        //**************************************************
        // Update balances, allowed and emit Transfer event
        //**************************************************

        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        
        return true;
    }

    //**************************************************
    // Event to track token transfers
    //**************************************************

    event Transfer(address indexed _from, address indexed _to, uint _value);

    //**************************************************
    // Event to track approved token transfers
    //**************************************************

    event Approval(address indexed _owner, address indexed _spender, uint _value);
}