pragma solidity >=0.4.22 <0.9.0; // Setting the Solidity version

contract Calculator { // Declaring the contract
    uint public result; // Declaring a public variable to store the calculation result
    
    function add(uint _num1, uint _num2) public { // Creating a function to add two numbers
        result = _num1 + _num2; // Assigning the result variable to the addition of the two input numbers
    }
    
    function subtract(uint _num1, uint _num2) public { // Creating a function to subtract two numbers
        result = _num1 - _num2; // Assigning the result variable to the subtraction of the two input numbers
    }
    
    function multiply(uint _num1, uint _num2) public { // Creating a function to multiply two numbers
        result = _num1 * _num2; // Assigning the result variable to the multiplication of the two input numbers
    }

    function divide(uint _num1, uint _num2) public { // Creating a function to divide two numbers
        require(_num2 != 0); // Adding a require statement to prevent division by 0
        result = _num1 / _num2; // Assigning the result variable to the division of the two input numbers
    }
}

contract SafeMath { // Declaring a library for safe math operations
    function add(uint _num1, uint _num2) internal pure returns (uint) { // Creating a function to add two numbers and return the result
        uint256 c = _num1 + _num2; // Storing the result of the addition in a new variable
        require(c >= _num1); // Adding a require statement to prevent overflow
        return c; // Returning the result
    }
    
    function sub(uint _num1, uint _num2) internal pure returns (uint) { // Creating a function to subtract two numbers and return the result
        require(_num2 <= _num1); // Adding a require statement to prevent underflow
        return _num1 - _num2; // Returning the result
    }
    
    function mul(uint _num1, uint _num2) internal pure returns (uint) { // Creating a function to multiply two numbers and return the result
        if (_num1 == 0) { // Checking if either of the numbers is 0
            return 0; // Returning 0 if one of the numbers is 0
        }
        uint256 c = _num1 * _num2; // Storing the result of the multiplication in a new variable
        require(c / _num1 == _num2); // Adding a require statement to prevent overflow
        return c; // Returning the result
    }

    function div(uint _num1, uint _num2) internal pure returns (uint) { // Creating a function to divide two numbers and return the result
        require(_num2 > 0); // Adding a require statement to prevent division by 0
        return _num1 / _num2; // Returning the result
    }
}

contract SafeCalculator is Calculator, SafeMath { // Inheriting from both the Calculator contract and the SafeMath library
    function safeAdd(uint _num1, uint _num2) public { // Creating a function to safely add two numbers
        result = add(_num1, _num2); // Calling the add function from the SafeMath library and assigning the result to the public variable
    }
    
    function safeSubtract(uint _num1, uint _num2) public { // Creating a function to safely subtract two numbers
        result = sub(_num1, _num2); // Calling the sub function from the SafeMath library and assigning the result to the public variable
    }
    
    function safeMultiply(uint _num1, uint _num2) public { // Creating a function to safely multiply two numbers
        result = mul(_num1, _num2); // Calling the mul function from the SafeMath library and assigning the result to the public variable
    }

    function safeDivide(uint _num1, uint _num2) public { // Creating a function to safely divide two numbers
        result = div(_num1, _num2); // Calling the div function from the SafeMath library and assigning the result to the public variable
    }
}