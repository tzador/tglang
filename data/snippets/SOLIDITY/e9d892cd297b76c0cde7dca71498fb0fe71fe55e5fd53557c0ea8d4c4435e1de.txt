// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;
/**
* @title MyContract
* @dev Test contract for Solidity
*/ 
contract MyContract {
    // Storage Variables 
    uint public balance;
    address private owner;
    string private data;
    
    // Events 
    event Transfer(address indexed _from, address indexed _to, uint _amount);
    
    // Constructor 
    constructor() {
        owner = msg.sender;
    }
    
    // Modifiers 
    modifier onlyOwner {
        require(msg.sender == owner, "Not the owner");
        _;
    }
    
    // Functions 
    /**
    * @dev Transfer tokens from one address to another 
    * @param _to Receiver's address
    * @param _amount Amount of tokens to transfer
    * @return A boolean that shows if the transfer was successful or not
    */ 
    function transfer(address _to, uint _amount) public onlyOwner returns (bool) {
        require(_amount <= balance, "Insufficient balance");
        balance -= _amount;
        emit Transfer(owner, _to, _amount);
        return true;
    }
    
    /**
    * @dev Update the data variable
    * @param _newData New value for the data variable
    */ 
    function updateData(string memory _newData) public onlyOwner {
        data = _newData;
    }
}