pragma solidity ^0.8.10;

/**
 * @dev Contract that defines the ERC20 token standard with additional functionalities.
 */
interface IERC20 {
    /**
     * @notice Returns the total supply of tokens.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @notice Returns the balance of a specific account.
     * @param account The address of the account to check.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @notice Returns the allowance for a specific spender and owner.
     * @param owner The address of the owner.
     * @param spender The address of the spender.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @notice Transfers tokens from the sender's account to the specified account.
     * @param recipient The address to transfer tokens to.
     * @param amount The amount of tokens to transfer.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @notice Transfers tokens from one account to another using the allowance mechanism.
     * @param sender The address to transfer tokens from.
     * @param recipient The address to transfer tokens to.
     * @param amount The amount of tokens to transfer.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @notice Sets the allowance for a specific spender and owner.
     * @param spender The address of the spender.
     * @param amount The amount of tokens to allow.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @notice Emits a {Transfer} event when tokens are transferred, including from the zero address.
     * @param from The address tokens are transferred from.
     * @param to The address tokens are transferred to.
     * @param amount The amount of tokens transferred.
     */
    event Transfer(address indexed from, address indexed to, uint256 amount);

    /**
     * @notice Emits a {Approval} event when the allowance of a spender for an owner is set or decreased.
     * @param owner The address whose allowance is being set.
     * @param spender The address being allowed to spend.
     * @param amount The amount of tokens allowed to be spent.
     */
    event Approval(address indexed owner, address indexed spender, uint256 amount);
}

/**
 * @dev Contract that implements the ERC20 token standard with additional functionalities.
 */
contract ERC20 is IERC20 {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 private _totalSupply;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    /**
     * @param initialSupply The initial supply of the token.
     * @param tokenName The name of the token.
     * @param tokenSymbol The symbol of the token.
     * @param decimalUnits The number of decimal units the token has.
     */
    constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint8 decimalUnits) {
        _totalSupply = initialSupply;
        _balances[msg.sender] = initialSupply;
        name = tokenName;
        symbol = tokenSymbol;
        decimals = decimalUnits;
    }

    /**
     * @inheritdoc
     */
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @inheritdoc
     */
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    /**
     * @inheritdoc
     */
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @inheritdoc
     */
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(_balances[msg.sender] >= amount, "Insufficient balance to transfer");
        _balances[msg.sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    /**
     * @inheritdoc
     */
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(_balances[sender] >= amount, "Insufficient balance to transfer");
        require(_allowances[sender][msg.sender] >= amount, "Insufficient allowance to transfer");
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        _allowances[sender][msg.sender] -= amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }

    /**
     * @inheritdoc
     */
    function approve(address spender, uint256 amount) public override returns (bool) {
        require(spender != address(0), "Cannot approve zero address");
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
}