pragma solidity ^0.8.4; // Version declaration

import "./SafeMath.sol"; // Importing external library to use SafeMath

contract MyContract { // Contract declaration
    using SafeMath for uint256; // Using SafeMath library for uint256 data type
    
    address public owner;
    
    // Struct containing details of a user
    struct User {
        string name;
        uint256 age;
    }
    
    // Mapping of addresses to corresponding users
    mapping(address => User) public users;
    
    // Event triggered when new user is added
    event NewUser(address indexed userAddress, string name, uint256 age);
    
    constructor() { // Constructor function
        owner = msg.sender; // Owner of contract is the address that deploys it
    }
    
    function addUser(string calldata _name, uint256 _age) external { // Function to add a new user
        require(msg.sender == owner, "Only owner can add user.");
        
        users[msg.sender] = User(_name, _age); // Adding user to mapping
        emit NewUser(msg.sender, _name, _age); // Triggering NewUser event
    }
    
    function getUserAge() external view returns (uint256) { // Function to get the age of the user calling the function 
        require(users[msg.sender].age > 0, "User does not exist."); // Requiring user to exist in mapping
        
        return users[msg.sender].age;
    }
    
    function getUserCount() external view returns (bool, uint256) { // Function to get the number of users in the contract
        if (users[msg.sender].age > 0) { // Checking if user calling function exists
            return (true, address(this).balance);
        }
        
        return (false, 0);
    }
}