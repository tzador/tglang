// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
 
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol";
 
// Library usage
contract Math {
  using SafeMath for uint256;
 
  function mul(uint256 a, uint256 b) public pure returns (uint256) {
    return a.mul(b);
  }
 
  function div(uint256 a, uint256 b) public pure returns (uint256) {
    return a.div(b);
  }
 
  function sub(uint256 a, uint256 b) public pure returns (uint256) {
    return a.sub(b);
  }
 
  function add(uint256 a, uint256 b) public pure returns (uint256) {
    return a.add(b);
  }
}

// Interface for a contract
interface ERC20Interface {
  function transfer(address recipient, uint amount) external returns (bool);
}

// Contract that implements the interface and uses the math library
contract Token is ERC20Interface {
  string public name = "My Token";
  string public symbol = "MTK";
 
  mapping(address => uint) public balances;
 
  // Use SafeMath to avoid integer overflow
  function transfer(address recipient, uint amount) public override returns (bool) {
    balances[msg.sender] = balances[msg.sender].sub(amount);
    balances[recipient] = balances[recipient].add(amount);
    return true;
  }
}