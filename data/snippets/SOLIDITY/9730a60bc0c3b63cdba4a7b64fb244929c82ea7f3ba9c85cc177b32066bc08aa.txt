// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// This contract creates a voting system with multiple options and tallies the votes.

contract VotingSystem {
    // Specifies the possible options for voting and their corresponding vote count
    enum VotingOptions {Option1, Option2}

    // Stores the votes for each option
    mapping(VotingOptions => uint256) voteCount;

    // Emits an event when a vote is casted
    event VoteCasted(address from, VotingOptions option);

    // Allows users to cast their vote for a particular option
    function castVote(VotingOptions option) public {
        // Increases the corresponding vote count
        voteCount[option]++;

        // Emits the VoteCasted event
        emit VoteCasted(msg.sender, option);
    }

    // Retrieves the total number of votes for a particular option
    function getVoteCount(VotingOptions option) public view returns (uint256) {
        return voteCount[option];
    }

    // Retrieves the winning option with the most votes
    function getWinningOption() public view returns (VotingOptions) {
        // Initializes the current winning option to the first option
        VotingOptions winningOption = VotingOptions(0);

        // Loops through all the options and compares their vote counts
        for (uint256 i = 1; i < uint256(VotingOptions); i++) {
            // If the current option has more votes than the current winning option, update the current winning option
            if (voteCount[VotingOptions(i)] > voteCount[winningOption]) {
                winningOption = VotingOptions(i);
            }
        }

        // Returns the winning option
        return winningOption;
    }
}