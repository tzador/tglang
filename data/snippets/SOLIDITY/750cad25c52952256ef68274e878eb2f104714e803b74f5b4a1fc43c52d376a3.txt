contract ERC20Token {
    string public name; // public variable to store token name
    string public symbol; // public variable to store token symbol
    uint8 public decimals; // public variable to store number of decimal places
    
    mapping (address => uint256) public balanceOf; // mapping to store balance of each user
    mapping (address => mapping (address => uint256)) public allowance; // mapping to store approved tokens for transfer
    
    event Transfer(address indexed from, address indexed to, uint256 value); // event to be triggered when tokens are transferred
    event Approval(address indexed owner, address indexed spender, uint256 value); // event to be triggered when tokens are approved for transfer
    
    // constructor function to initialize token name, symbol and decimals
    constructor(string memory _name, string memory _symbol, uint8 _decimals) public{
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }
    
    // function to transfer tokens from sender to receiver
    function transfer(address _to, uint256 _value) public returns (bool success){
        require(balanceOf[msg.sender] >= _value); // check if sender has enough tokens
        require(balanceOf[_to] + _value >= balanceOf[_to]); // prevent overflow
        
        balanceOf[msg.sender] -= _value; // subtract tokens from sender's balance
        balanceOf[_to] += _value; // add tokens to receiver's balance
        
        emit Transfer(msg.sender, _to, _value); // trigger Transfer event
        
        return true; // return success
    }
    
    // function to approve transfer of tokens from sender to spender
    function approve(address _spender, uint256 _value) public returns (bool success){
        allowance[msg.sender][_spender] = _value; // set approved amount for sender and spender
        
        emit Approval(msg.sender, _spender, _value); // trigger Approval event
        
        return true; // return success
    }
    
    // function to transfer approved tokens from sender to receiver
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){
        require(balanceOf[_from] >= _value); // check if sender has enough tokens
        require(allowance[_from][msg.sender] >= _value); // check if sender has enough approved tokens for transfer
        require(balanceOf[_to] + _value >= balanceOf[_to]); // prevent overflow
        
        balanceOf[_from] -= _value; // subtract tokens from sender's balance
        balanceOf[_to] += _value; // add tokens to receiver's balance
        allowance[_from][msg.sender] -= _value; // reduce approved amount for sender and spender
        
        emit Transfer(_from, _to, _value); // trigger Transfer event
        
        return true; // return success
    }
}