pragma solidity ^0.8.0;

contract SolidityExampleContract {
    // Define state variables
    string private variable1;
    uint256 private variable2;
    address private owner;

    // Define mappings
    mapping (address => uint256) private balances;

    // Define events
    event LogDeposit(address indexed from, uint256 amount);

    // Define constructor function
    constructor() {
        owner = msg.sender;
    }

    // Define getter and setter functions
    function getVariable1() public view returns (string memory) {
        return variable1;
    }

    function setVariable1(string memory newValue) public {
        // Require the caller to be the contract owner
        require(msg.sender == owner, "Only the contract owner can set this variable");

        // Set the new value
        variable1 = newValue;
    }

    // Define payable function
    function deposit() public payable {
        // Require the amount to be greater than 0
        require(msg.value > 0, "Amount must be greater than 0");

        // Add the deposited amount to the sender's balance
        balances[msg.sender] += msg.value;

        // Emit deposit event
        emit LogDeposit(msg.sender, msg.value);
    }

    // Define internal function
    function _internalFunction(string memory param1, uint256 param2) internal returns (uint256) {
        // Concatenate the string and uint parameters
        string memory concatenatedString = string(abi.encodePacked(param1, uint2str(param2)));

        // Convert the concatenated string to a number and return it
        return parseInt(concatenatedString);
    }

    // Define private function
    function _privateFunction(uint256 param) private pure returns (uint256) {
        // Return the parameter multiplied by 2
        return param * 2;
    }

    // Define external function
    function externalFunction() external view returns (string memory) {
        // Call private function and return the result
        uint256 result = _privateFunction(10);
        return uint2str(result);
    }

    // Define fallback function
    fallback() external payable {
        // Require the amount to be greater than 0
        require(msg.value > 0, "Amount must be greater than 0");

        // Add the deposited amount to the sender's balance
        balances[msg.sender] += msg.value;

        // Emit deposit event
        emit LogDeposit(msg.sender, msg.value);
    }

    // Define receive function
    receive() external payable {
        // Require the amount to be greater than 0
        require(msg.value > 0, "Amount must be greater than 0");

        // Add the deposited amount to the sender's balance
        balances[msg.sender] += msg.value;

        // Emit deposit event
        emit LogDeposit(msg.sender, msg.value);
    }

    // Define helper functions
    function uint2str(uint256 number) internal pure returns (string memory) {
        // Convert the uint to a string and return it
        if (number == 0) {
            return "0";
        }
        uint256 temp = number;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (number != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + number % 10));
            number /= 10;
        }
        return string(buffer);
    }

    function parseInt(string memory _a) internal pure returns (uint256) {
        // Convert string to uint and return it
        bytes memory bresult = bytes(_a);
        uint res = 0;
        for (uint i = 0; i < bresult.length; i++) {
            if (bresult[i] >= 48 && bresult[i] <= 57) {
                res = res * 10 + (uint(bresult[i]) - 48);
            }
        }
        return res;
    }
}