// This contract implements a simple betting game where players can bet on a number and win if the number is rolled
// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;

// Importing SafeMath library for handling uint256 underflow and overflow
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

// Creating contract
contract BettingGame {

    // Declaring variables
    address public owner; // Owner of the contract
    uint256 public minimumBet; // Minimum bet amount
    uint256 public totalBet; // Total bet amount
    uint256 public numberOfBets; // Number of bets placed
    uint256 public maximumNumberOfBets = 100; // Maximum number of bets allowed
    uint256 public constant maximumNumber = 10; // Maximum number that can be rolled for winning
    uint256 public winningNumber; // Winning number
    uint256 public winAmount; // Total amount of winnings

    // Mapping to store player's address and bets
    mapping(address => Bet) public playerBets;

    // Declaring struct to store bet details
    struct Bet {
        uint256 betAmount; // Amount bet by player
        uint256 chosenNumber; // Number chosen by player
    }

    // Initializing SafeMath library
    using SafeMath for uint256;

    // Event to be emitted when a new bet is placed
    event NewBet(address indexed player, uint256 indexed betAmount, uint256 indexed chosenNumber);

    // Event to be emitted when a player wins
    event Win(address indexed player, uint256 indexed betAmount, uint256 indexed winAmount);

    // Event to be emitted when a player withdraws their winnings
    event Withdraw(address indexed player, uint256 indexed withdrawAmount);

    // Constructor function that runs when contract is deployed
    constructor(uint256 _minimumBet) {
        owner = msg.sender; // Set owner as the one deploying the contract
        minimumBet = _minimumBet; // Set minimum bet amount
    }

    // Function to place a bet
    function bet(uint256 _chosenNumber) public payable {
        // Revert transaction if maximum number of bets has been reached
        require(numberOfBets < maximumNumberOfBets, "Maximum number of bets reached");
        // Check if bet amount is greater than or equal to minimum bet
        require(msg.value >= minimumBet, "Bet amount must be greater than or equal to minimum bet amount");
        // Check if number chosen is between 1 and maximum number
        require(_chosenNumber > 0 && _chosenNumber <= maximumNumber, "Chosen number must be between 1 and maximum number");
        // Store bet details in mapping
        playerBets[msg.sender] = Bet(msg.value, _chosenNumber);
        // Increase total bet amount and number of bets
        totalBet = totalBet.add(msg.value);
        numberOfBets++;
        // Emit new bet event
        emit NewBet(msg.sender, msg.value, _chosenNumber);
    }

    // Function to roll the dice and determine the winning number
    function rollDice() public {
        // Revert transaction if sender is not the owner
        require(msg.sender == owner, "Only the contract owner can roll the dice");
        // Generate random winning number using blockhash and modulo operator
        winningNumber = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1)))) % maximumNumber + 1;
        // If chosen number matches winning number, calculate and send win amount to player
        if (playerBets[msg.sender].chosenNumber == winningNumber) {
            winAmount = playerBets[msg.sender].betAmount.mul(maximumNumber).div(playerBets[msg.sender].chosenNumber);
            payable(msg.sender).transfer(winAmount);
            // Emit win event
            emit Win(msg.sender, playerBets[msg.sender].betAmount, winAmount);
        }
    }

    // Function to withdraw winnings
    function withdraw() public {
        // Revert transaction if sender is not the player who won
        require(msg.sender == owner, "Only the player who won can withdraw");
        // Revert transaction if no win amount has been calculated
        require(winAmount > 0, "No win amount available");
        // Transfer win amount to player
        payable(msg.sender).transfer(winAmount);
        // Reset win amount and player's bet details
        winAmount = 0;
        playerBets[msg.sender].betAmount = 0;
        playerBets[msg.sender].chosenNumber = 0;
        // Emit withdraw event
        emit Withdraw(msg.sender, winAmount);
    }

    // Function to withdraw contract balance (for owner only)
    function withdrawContractBalance() public {
        // Revert transaction if sender is not the owner
        require(msg.sender == owner, "Only the contract owner can withdraw the contract balance");
        // Transfer contract balance to owner
        payable(msg.sender).transfer(address(this).balance);
    }

}