/// @title Bank
/// @notice An example contract showcasing the principles of SOLIDITY
contract Bank {
    address public owner;
    mapping(address => uint256) balance;
    
    /// @dev Sets the contract owner to the address that deployed the contract
    constructor() public {
        owner = msg.sender;
    }
    
    /// @dev Checks if the caller is the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the contract owner.");
        _;
    }

    /// @dev Allows the caller to deposit funds into their account
    function deposit() public payable {
        require(msg.value > 0, "You must deposit a non-zero amount.");
        balance[msg.sender] += msg.value;
    }
    
    /// @dev Allows the caller to withdraw funds from their account
    function withdraw(uint256 amount) public onlyOwner {
        require(balance[msg.sender] > amount, "Insufficient funds.");
        msg.sender.transfer(amount);
        balance[msg.sender] -= amount;
    }
    
    /// @dev Allows the contract owner to transfer funds from one account to another
    /// @param recipient The address of the recipient
    /// @param amount The amount to be transferred
    function transfer(address recipient, uint256 amount) public onlyOwner {
        require(balance[msg.sender] > amount, "Insufficient funds.");
        balance[recipient] += amount;
        balance[msg.sender] -= amount;
    }
    
    /// @dev Returns the balance of the caller's account
    /// @return The balance of the caller's account
    function getBalance() public view returns (uint256) {
        return balance[msg.sender];
    }
    
    /// @dev Allows the caller to close their account and transfer all funds to the contract owner
    function closeAccount() public payable onlyOwner {
        msg.sender.transfer(balance[msg.sender]);
        balance[msg.sender] = 0;
    }
}