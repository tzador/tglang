/*
 * @title Tic-Tac-Toe Game
 * @dev This contract allows two players to play a game of Tic-Tac-Toe on the blockchain
 */
contract TicTacToe {
    /* State variables */
    address player1; // Address of Player 1
    address player2; // Address of Player 2
    address currentPlayer; // Address of the current player
    uint8[9] board; // Game board

    /* Events */
    event GameStarted(address player1, address player2);
    event XPlayed(uint8 index, address player);
    event OPlayed(uint8 index, address player);
    event GameEnded(address winner);

    /* Constructor */
    constructor(address _player2) public {
        player1 = msg.sender;
        player2 = _player2;
        currentPlayer = player1;
    }

    /* Function to start a new game */
    function startGame() external {
        require(msg.sender == player1 || msg.sender == player2, "Only players can start the game");
        emit GameStarted(player1, player2);
    }

    /* Function for player X to make a move */
    function playX(uint8 index) external {
        require(msg.sender == player1, "Only Player 1 can play as X");
        require(board[index] == 0, "That spot is already taken");
        require(currentPlayer == player1, "It is not player X's turn");
        board[index] = 1; // Set the board index to 1 for player X
        emit XPlayed(index, player1);
        // Check for a winning condition
        if(_checkWin() == 1) {
            emit GameEnded(player1);
        }
        // Switch to player O's turn
        currentPlayer = player2;
    }

    /* Function for player O to make a move */
    function playO(uint8 index) external {
        require(msg.sender == player2, "Only Player 2 can play as O");
        require(board[index] == 0, "That spot is already taken");
        require(currentPlayer == player2, "It is not player O's turn");
        board[index] = 2; // Set the board index to 2 for player O
        emit OPlayed(index, player2);
        // Check for a winning condition
        if(_checkWin() == 2) {
            emit GameEnded(player2);
        }
        // Switch to player X's turn
        currentPlayer = player1;
    }

    /* Function to check for a winning condition */
    function _checkWin() internal view returns(uint8) {
        if(board[0] == board[1] && board[1] == board[2] && board[0] != 0) {
            return board[0]; // Returns the player number (1 for X, 2 for O)
        } else if(board[3] == board[4] && board[4] == board[5] && board[3] != 0) {
            return board[3];
        } else if(board[6] == board[7] && board[7] == board[8] && board[6] != 0) {
            return board[6];
        } else if(board[0] == board[3] && board[3] == board[6] && board[0] != 0) {
            return board[0];
        } else if(board[1] == board[4] && board[4] == board[7] && board[1] != 0) {
            return board[1];
        } else if(board[2] == board[5] && board[5] == board[8] && board[2] != 0) {
            return board[2];
        } else if(board[0] == board[4] && board[4] == board[8] && board[0] != 0) {
            return board[0];
        } else if(board[2] == board[4] && board[4] == board[6] && board[2] != 0) {
            return board[2];
        } else {
            return 0; // No player has won yet
        }
    }
}