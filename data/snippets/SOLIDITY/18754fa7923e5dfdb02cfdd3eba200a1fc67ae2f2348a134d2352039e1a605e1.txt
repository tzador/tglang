// Define a contract with inheritance
contract A {
  uint a;
  function setA(uint newA) public {
    a = newA;
  }
}

// Second contract B inherits from “A”
contract B is A {
  string b;
  function setB(string newB) public {
    b = newB;
  }
}

// Third contract C inherits from “B”
contract C is B {
  uint c;
  function setC(uint newC) public {
    c = newC;
  }
}

// Deploy contract C and call functions from each inherited contract
contract Main {
  address cAddress;
  constructor() public {
    C c = new C();
    cAddress = address(c);
  }
  
  function callA(uint newA) public {
    A a = A(cAddress);
    a.setA(newA);
  }
  
  function callB(string newB) public {
    B b = B(cAddress);
    b.setB(newB);
  }
  
  function callC(uint newC) public {
    C c = C(cAddress);
    c.setC(newC);
  }
}