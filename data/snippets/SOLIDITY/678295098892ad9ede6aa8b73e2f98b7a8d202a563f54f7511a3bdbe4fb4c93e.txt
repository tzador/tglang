//Code snippet for a smart contract using SOLIDITY programming language
pragma solidity ^0.8.0; //specifies the version of SOLIDITY to be used

//Contract definition
contract MyContract {

  //State variables
  address public owner; //stores the address of the contract owner
  uint public totalSupply; //stores the total supply of the contract's token

  //Mapping defining the balance of each account
  mapping(address => uint) public balances;

  //Constructor function defining the initial values
  constructor() {
    owner = msg.sender; //sets the contract owner
    balances[owner] = 1000; //gives 1000 tokens to the contract owner
    totalSupply = 1000; //sets the total supply to 1000 tokens
  }

  //Function to transfer tokens from one account to another
  function transfer(address recipient, uint amount) external {
    require(balances[msg.sender] >= amount, "Insufficient balance"); //checks if the sender has enough tokens
    balances[msg.sender] -= amount; //deducts the tokens from the sender's account
    balances[recipient] += amount; // adds the tokens to the recipient's account
  }

  //Function to mint new tokens
  function mint(uint amount) external {
    require(msg.sender == owner, "Only owner can mint new tokens"); //checks if the caller is the contract owner
    balances[owner] += amount; //adds the new tokens to the owner's account
    totalSupply += amount; //increases the total supply
  }

  //Function to burn tokens
  function burn(uint amount) external {
    require(balances[msg.sender] >= amount, "Insufficient balance"); //checks if the sender has enough tokens
    balances[msg.sender] -= amount; //deducts the tokens from the sender's account
    totalSupply -= amount; //decreases the total supply
  }

  //Event to be emitted when new tokens are minted
  event Mint(address indexed recipient, uint amount);

  //Event to be emitted when tokens are burned
  event Burn(address indexed sender, uint amount);
}