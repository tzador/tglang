/*
This contract represents a decentralized voting system
with secure and transparent vote counting.
*/
pragma solidity ^0.5.0;

contract VotingSystem {
    /* ### STATE VARIABLES ### */
    // Mappings to store voters and candidates
    mapping(address => bool) public voters;
    mapping(uint => Candidate) public candidates;

    // Struct to represent a candidate
    struct Candidate {
        string name;
        uint voteCount;
    }

    // Address of the contract creator
    address public owner;
    // Flag to represent if voting period is active
    bool public votingActive;
    // Array to store list of candidates
    Candidate[] public candidateList;

    /* ### EVENTS ### */
    // Event to notify when a new candidate is added
    event CandidateAdded(uint candidateId, string name);
    // Event to notify when a vote is casted
    event VoteCasted(address voter, uint candidateId);
    // Event to notify when the voting period is closed
    event VotingPeriodClosed();

    /* ### MODIFIERS ### */
    // Modifier to restrict access to only contract creator
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the contract owner.");
        _;
    }

    // Modifier to check if the voting period is active
    modifier votingOpen() {
        require(votingActive = true, "Voting period is not active.");
        _;
    }

    /* ### FUNCTIONS ### */
    // Constructor to set the contract creator
    constructor() public {
        owner = msg.sender;
    }

    /* #### EXTERNAL FUNCTIONS #### */
    // Function to add a new candidate
    function addCandidate(string memory _name) public onlyOwner {
        uint candidateId = candidateList.length;
        candidates[candidateId] = Candidate(_name, 0);
        emit CandidateAdded(candidateId, _name);
    }

    // Function to allow a voter to cast a vote
    function castVote(uint _candidateId) external votingOpen {
        require(voters[msg.sender] == false, "Address has already voted.");
        require(_candidateId < candidateList.length, "Invalid candidate ID.");
        candidates[_candidateId].voteCount++;
        voters[msg.sender] = true;
        emit VoteCasted(msg.sender, _candidateId);
    }

    // Function to close the voting period
    function closeVotingPeriod() external onlyOwner {
        votingActive = false;
        emit VotingPeriodClosed();
    }
}