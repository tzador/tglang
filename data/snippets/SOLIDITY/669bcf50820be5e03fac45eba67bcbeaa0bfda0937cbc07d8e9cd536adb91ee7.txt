// This is a contract that implements a voting system using the Solidity programming language.

// Defines a contract called VotingContract
contract VotingContract {
    // Defines a state variable that stores a list of candidates
    address[] candidates;

    // Defines a state variable that stores a mapping of voters and their votes
    mapping(address => uint) votes;

    // Defines a function to add a new candidate to the list
    // Takes in a candidate address as a parameter and returns a boolean
    function addCandidate(address _candidate) public returns (bool) {
        // Checks if the candidate is already in the list of candidates
        for(uint i=0; i<candidates.length; i++){
            if(candidates[i] == _candidate){
                // If candidate is already in the list, function returns false
                return false;
            }
        }
        // If candidate is not already in the list, adds them to the list and maps their address to 0 votes
        candidates.push(_candidate);
        votes[_candidate] = 0;
        // Function returns true to indicate success
        return true;
    }

    // Defines a function to cast a vote for a candidate
    // Takes in a candidate address as a parameter and returns a boolean
    function castVote(address _candidate) public returns (bool) {
        // Checks if the sender of the transaction has already voted
        if(votes[msg.sender] > 0){
            // If sender has already voted, function returns false
            return false;
        }
        // Checks if the candidate is in the list of candidates
        for(uint i=0; i<candidates.length; i++){
            if(candidates[i] == _candidate){
                // If candidate is found, increments their vote count and maps sender's address to their vote
                votes[_candidate]++;
                votes[msg.sender] = 1;
                // Function returns true to indicate success
                return true;
            }
        }
        // If candidate is not found, function returns false
        return false;
    }

    // Defines a function to get the total number of votes for a candidate
    // Takes in a candidate address as a parameter and returns an integer
    function getVotes(address _candidate) public view returns (uint) {
        // Checks if the candidate is in the list of candidates
        for(uint i=0; i<candidates.length; i++){
            if(candidates[i] == _candidate){
                // If candidate is found, returns their vote count
                return votes[_candidate];
            }
        }
        // If candidate is not found, returns 0
        return 0;
    }
}