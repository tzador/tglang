// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0; // Specifies the compiler version

// Import statements

import "./SafeMath.sol"; // Imports a library for safe mathematical operations
import "./Ownable.sol"; // Imports a contract for ownership functionality

// Contract declaration

contract Token is Ownable {
    
    // SafeMath library usage
    
    using SafeMath for uint256;
    
    // Variables
    
    string private _name; // Stores the name of the token
    string private _symbol; // Stores the symbol of the token
    uint8 private _decimals; // Stores the number of decimals used for the token
    uint256 private _totalSupply; // Stores the total supply of the token
    mapping(address => uint256) private _balances; // Maps addresses to token balances
    mapping(address => mapping(address => uint256)) private _allowances; // Maps addresses to the amount of tokens they can transfer on behalf of another address
    
    // Events
    
    event Transfer(address indexed from, address indexed to, uint256 value); // Logs a transfer of tokens between two addresses
    event Approval(address indexed owner, address indexed spender, uint256 value); // Logs the approval of an allowance transfer
    
    // Constructor
    
    constructor (string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
        _totalSupply = totalSupply_.mul(10 ** decimals_); // Multiplies the total supply by 10 to the power of the decimals
        _balances[msg.sender] = _totalSupply; // Sets the total supply as the initial balance of the contract owner
        emit Transfer(address(0), msg.sender, _totalSupply); // Emits a transfer from the zero address to the contract owner with the total supply as the value
    }
    
    // Public Functions
    
    function name() public view returns (string memory) {
        return _name;
    }
    
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    
    function decimals() public view returns (uint8) {
        return _decimals;
    }
    
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount)); // Reduces the allowance for the sender by the amount being transferred
        return true;
    }
    
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue)); // Increases the allowance for the spender by the added value
        return true;
    }
    
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue)); // Decreases the allowance for the spender by the subtracted value
        return true;
    }
    
    // Private Functions
    
    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "Token: transfer from the zero address");
        require(recipient != address(0), "Token: transfer to the zero address");
        require(amount > 0, "Token: transfer amount must be greater than zero");
        
        _balances[sender] = _balances[sender].sub(amount); // Reduces the balance of the sender
        _balances[recipient] = _balances[recipient].add(amount); // Increases the balance of the recipient
        emit Transfer(sender, recipient, amount); // Emits a transfer event with the sender, recipient, and amount
    }
    
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "Token: approve from the zero address");
        require(spender != address(0), "Token: approve to the zero address");
        require(amount > 0, "Token: approve amount must be greater than zero");
        
        _allowances[owner][spender] = amount; // Sets the allowance for the owner and spender
        emit Approval(owner, spender, amount); // Emits an approval event with the owner, spender, and amount
    }
}