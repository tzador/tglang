/**
    @title ERC20 Token
    @dev Standardized token interface
    */
interface ERC20 {
    /**
    * @dev Returns the total supply of tokens
    * @return Total supply of tokens
    */
    function totalSupply() external view returns (uint256);

    /**
    * @dev Returns the balance of the given address
    * @param owner Address to check balance for
    * @return Balance of the given address
    */
    function balanceOf(address owner) external view returns (uint256);

    /**
    * @dev Returns the amount of tokens that the spender is allowed to spend on behalf of the owner
    * @param owner Owner address
    * @param spender Spender address
    * @return Amount of tokens that the spender is allowed to spend on behalf of the owner
    */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
    * @dev Transfers tokens from the sender's address to the receiver's address
    * @param to Receiver address
    * @param value Amount of tokens to transfer
    * @return True if the transfer was successful
    */
    function transfer(address to, uint256 value) external returns (bool);

    /**
    * @dev Transfers tokens from the sender's address to the receiver's address
    * @param from Sender address
    * @param to Receiver address
    * @param value Amount of tokens to transfer
    * @return True if the transfer was successful
    */
    function transferFrom(address from, address to, uint256 value) external returns (bool);

    /**
    * @dev Approves the spender to spend a specified amount of tokens on behalf of the owner
    * @param spender Spender address
    * @param value Amount of tokens to approve
    * @return True if the approval was successful
    */
    function approve(address spender, uint256 value) external returns (bool);

    /**
    * @dev Emitted when tokens are transferred
    * @param from Sender address
    * @param to Receiver address
    * @param value Amount of tokens transferred
    */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
    * @event Approval
    * @dev Emitted when tokens are approved to be spent by a spender
    * @param owner Owner address
    * @param spender Spender address
    * @param value Amount of tokens approved
    */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}