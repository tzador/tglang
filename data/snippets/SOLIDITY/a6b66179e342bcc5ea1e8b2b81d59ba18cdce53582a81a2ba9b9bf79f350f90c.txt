pragma solidity ^0.8.0;

// This is a simple contract that defines a bank account
// and allows users to deposit and withdraw funds.

contract BankAccount {
  uint public balance;
  address public owner;
 
  // Constructor to set the initial balance and owner.
  constructor(uint _initialBalance) {
    balance = _initialBalance;
    owner = msg.sender;
  }
 
  // Function to deposit funds into the bank account.
  function deposit(uint _amount) public {
    require(msg.sender == owner, "Only the owner can deposit funds.");
    balance += _amount;
  }
 
  // Function to withdraw funds from the bank account.
  function withdraw(uint _amount) public {
    require(msg.sender == owner, "Only the owner can withdraw funds.");
    require(_amount <= balance, "The requested amount exceeds the available balance.");
    balance -= _amount;
  }
 
  // Function to transfer funds from the bank account to another address.
  function transfer(address _to, uint _amount) public {
    require(msg.sender == owner, "Only the owner can transfer funds.");
    require(_amount <= balance, "The requested amount exceeds the available balance.");
    balance -= _amount;
    BankAccount account = BankAccount(_to);
    account.deposit(_amount);
  }
}

// This contract represents a bank with multiple accounts.
 
contract Bank {
  // A mapping of account addresses to BankAccounts.
  mapping(address => BankAccount) private accounts;
  
  // Function to add a new account to the bank.
  function addAccount(address _account, uint _initialBalance) public {
    require(_account != address(0), "Invalid account address.");
    BankAccount account = new BankAccount(_initialBalance);
    accounts[_account] = account;
  }
 
  // Function to get the bank account of a specific address.
  function getAccount(address _account) public view returns (BankAccount) {
    require(_account != address(0), "Invalid account address.");
    return accounts[_account];
  }
}