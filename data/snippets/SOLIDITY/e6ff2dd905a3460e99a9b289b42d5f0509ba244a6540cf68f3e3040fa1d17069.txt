// Define contract
contract Token {
    // Variables
    address public owner;
    uint256 public totalSupply;
    
    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    
    // Constructor
    constructor() public {
        owner = msg.sender;
        totalSupply = 1000;
    }
    
    // Struct
    struct Person {
        string name;
        uint256 age;
    }
    
    // Functions
    function transfer(address _to, uint256 _value) public returns (bool) {
        // Check if sender has enough tokens
        require(_value <= balances[msg.sender]);
        
        // Update balances
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        
        // Emit event
        emit Transfer(msg.sender, _to, _value);
        
        return true;
     }
     
     function mint(address _to, uint256 _value) public {
         // Only owner can mint new tokens
         require(msg.sender == owner);
         
         // Update total supply
         totalSupply += _value;
         
         // Update balances
         balances[_to] += _value;
     }
     
     // Mapping
     mapping (address => uint256) public balances;
     
     // Inheritance
     contract MyContract is Token {
         // Code for inherited contract
     }
}