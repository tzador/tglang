pragma solidity ^0.6.0; //sets the version for the Solidity compiler to use

contract User { //creates a contract called 'User'
    
    address private userAddress; //declares a private variable called 'userAddress' of type 'address'
    string[] private userNames; //declares a private dynamic array called 'userNames' of type 'string'
    
    constructor() public { //constructor function for the 'User' contract
        userAddress = msg.sender; //sets the 'userAddress' variable to the sender of the transaction
    }
    
    modifier onlyOwner() { //creates a 'modifier' function called 'onlyOwner'
        require(msg.sender == userAddress, "You are not the owner!"); //checks if the sender of the transaction is the same as the 'userAddress' variable, if not, throws an error
        _; //if condition is met, continues with the function
    }
    
    function addUserName(string memory name) public onlyOwner { //creates a public function called 'addUserName' that takes in a string as an argument and can only be called by the owner of the contract
        userNames.push(name); //adds the string argument to the end of the 'userNames' array
    }
    
    function getUserNames() view public returns (string[] memory) { //creates a public view function called 'getUserNames' that returns a 'string' dynamic array
        return userNames; //returns the 'userNames' array
    }
}