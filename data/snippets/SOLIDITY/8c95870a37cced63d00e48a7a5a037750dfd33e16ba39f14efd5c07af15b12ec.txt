/// @title ERC20 Interface
/// @notice This interface represents the standard ERC20 token contract.
interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/// @title SafeMathLib
/// @notice This library provides safe mathematics functions to avoid integer overflow and underflow.
library SafeMathLib {
    /// @notice Adds two numbers and returns the sum.
    /// @param a The first number.
    /// @param b The second number.
    /// @return The sum of the two numbers.
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /// @notice Subtracts two numbers and returns the difference.
    /// @param a The first number.
    /// @param b The second number.
    /// @return The difference of the two numbers.
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    /// @notice Multiplies two numbers and returns the product.
    /// @param a The first number.
    /// @param b The second number.
    /// @return The product of the two numbers.
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /// @notice Divides two numbers and returns the quotient.
    /// @param a The first number.
    /// @param b The second number.
    /// @return The quotient of the two numbers.
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }
}

/// @title ExampleToken
/// @notice This contract represents an example ERC20 token implementation.
contract ExampleToken is IERC20 {
    using SafeMathLib for uint256;

    string public name;
    string public symbol;
    uint8 public decimals;

    mapping(address => uint256) private balances;

    mapping(address => mapping(address => uint256)) private allowances;

    uint256 private _totalSupply;

    /// @notice Sets the name, symbol, and decimal values for the token.
    /// @param _name The token name.
    /// @param _symbol The token symbol.
    /// @param _decimals The number of decimal places for the token.
    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }

    /// @notice Returns the total supply of the token.
    /// @return The total supply.
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    /// @notice Returns the balance of a given address.
    /// @param account The address to check.
    /// @return The balance of the given address.
    function balanceOf(address account) external view returns (uint256) {
        return balances[account];
    }

    /// @notice Transfers a given amount of tokens from the sender to the recipient.
    /// @param recipient The address to transfer tokens to.
    /// @param amount The amount of tokens to transfer.
    /// @return A boolean indicating whether the transfer was successful or not.
    function transfer(address recipient, uint256 amount) external returns (bool) {
        balances[msg.sender] = balances[msg.sender].sub(amount);
        balances[recipient] = balances[recipient].add(amount);
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    /// @notice Returns the remaining allowance amount for a spender of a given address.
    /// @param owner The owner of the tokens.
    /// @param spender The spender address.
    /// @return The remaining allowance amount for the spender.
    function allowance(address owner, address spender) external view returns (uint256) {
        return allowances[owner][spender];
    }

    /// @notice Approves a given amount of tokens to a spender.
    /// @param spender The spender address.
    /// @param amount The amount of tokens to approve.
    /// @return A boolean indicating whether the approval was successful or not.
    function approve(address spender, uint256 amount) external returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    /// @notice Transfers a given amount of tokens from a given account to another.
    /// @param sender The address transferring tokens from.
    /// @param recipient The address receiving tokens.
    /// @param amount The amount of tokens to transfer.
    /// @return A boolean indicating whether the transfer was successful or not.
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool) {
        balances[sender] = balances[sender].sub(amount);
        balances[recipient] = balances[recipient].add(amount);
        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    /// @notice Mints a given amount of tokens and adds them to the total supply.
    /// @param amount The amount of tokens to mint.
    function mint(uint256 amount) public {
        balances[msg.sender] = balances[msg.sender].add(amount);
        _totalSupply = _totalSupply.add(amount);
        emit Transfer(address(0), msg.sender, amount);
    }

    /// @notice Burns a given amount of tokens and deducts them from the total supply.
    /// @param amount The amount of tokens to burn.
    function burn(uint256 amount) public {
        balances[msg.sender] = balances[msg.sender].sub(amount);
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(msg.sender, address(0), amount);
    }
}