// This is a contract that implements a voting system using the `SOLIDITY` programming language

pragma solidity ^0.8.0;

contract VotingSystem {
    // Initializing state variables
    mapping (address => bool) public voters;
    Candidate[] public candidates;
    mapping (address => bool) public hasVoted;
    uint public totalVotes;
    
    // Creating a struct for candidates
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
    }
    
    // A constructor to add default candidates
    constructor() {
        addCandidate("John Smith");
        addCandidate("Jane Doe");
    }
    
    // A function to add new candidates
    function addCandidate(string memory _name) private {
        uint id = candidates.length;
        candidates.push(Candidate(id, _name, 0));
    }
    
    // A function to allow voters to vote for candidates
    function vote(uint _id) public {
        // Checking if the voter has not voted before
        require(!hasVoted[msg.sender], "You have already voted.");
        
        // Checking if the voter is allowed to vote
        require(voters[msg.sender], "You are not registered as a voter.");
        
        // Checking if the candidate exists
        require(_id < candidates.length, "Invalid candidate ID.");
        
        // Incrementing the vote count for the selected candidate
        candidates[_id].voteCount++;
        
        // Updating the hasVoted mapping
        hasVoted[msg.sender] = true;
        
        // Incrementing the totalVotes variable
        totalVotes++;
    }
    
    // A function to get the winner of the voting system
    function getWinner() public view returns (string memory) {
        // Initializing variables to store the winning candidate info
        uint winningVoteCount = 0;
        string memory winner;
        
        // Looping through all candidates to find the winner
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winner = candidates[i].name;
            }
        }
        
        return winner;
    }
}