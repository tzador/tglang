//Start of contract
pragma solidity 0.7.4; //Declaring the version of solidity used

contract Bank { //Declaring the contract name
        //Struct to store bank users' information
        struct User {
            address accountAddress;
            string name;
            uint256 balance;
            bool isActive;
        }

        //Mapping to store users' addresses and their respective user struct
        mapping(address => User) private users;

        //Modifier that checks if the user is already registered
        modifier isNotRegistered() {
            require(users[msg.sender].isActive == false, "User already registered");
            _;
        }

        //Function to register a new user
        function registerUser(string memory _name) public isNotRegistered {
            users[msg.sender] = User(msg.sender, _name, 0, true);
        }

        //Modifier that checks if the user is registered
        modifier isRegistered() {
            require(users[msg.sender].isActive == true, "User is not registered");
            _;
        }

        //Function to deposit funds into user's balance
        function deposit() public payable isRegistered {
            users[msg.sender].balance += msg.value;
        }

        //Function to withdraw funds from user's balance
        function withdraw(uint256 _amount) public isRegistered {
            require(users[msg.sender].balance >= _amount, "Insufficient funds");
            users[msg.sender].balance -= _amount;
            msg.sender.transfer(_amount);
        }
    }
//End of contract