pragma solidity ^0.8.0;

// This contract implements a simple voting system using the Ethereum blockchain.

contract Voting {

    // Defines a struct for storing information about a candidate
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
    }

    // Defines a mapping to store all the candidates
    mapping(uint => Candidate) public candidates;

    // Defines a mapping to keep track of who has voted
    mapping(address => bool) public voters;

    // Defines a variable to keep track of the total number of candidates
    uint public totalCandidates;

    // Defines a variable to keep track of the total number of votes
    uint public voteCount;

    // Defines an event for when a new candidate is added
    event NewCandidate(uint candidateId, string candidateName);

    // Defines an event for when a user casts their vote
    event Voted(address voter);

    // Adds a new candidate to the contract
    function addCandidate(string memory _name) public {

        // Increases the total number of candidates by 1
        totalCandidates++;

        // Adds the candidate to the 'candidates' mapping
        candidates[totalCandidates] = Candidate(totalCandidates, _name, 0);

        // Emits the NewCandidate event
        emit NewCandidate(totalCandidates, _name);
    }

    // Allows a user to cast their vote for a particular candidate
    function vote(uint _candidateId) public {

        // Verifies if the user has already voted
        require(!voters[msg.sender]);

        // Verifies if the candidate exists
        require(_candidateId > 0 && _candidateId <= totalCandidates);

        // Increments the vote count for the selected candidate
        candidates[_candidateId].voteCount++;

        // Adds the user to the list of voters
        voters[msg.sender] = true;

        // Increments the total vote count
        voteCount++;

        // Emits the Voted event
        emit Voted(msg.sender);
    }
}