pragma solidity ^0.8.0; //specifies the solidity version to be used

contract MyContract { //defines a contract called MyContract
    address public owner; //declares a public variable of type address called owner
    
    uint256 public totalSupply; //declares a public variable of type uint256 called totalSupply
    
    mapping(address => uint256) balances; //creates a mapping data structure that maps addresses to uint256 values
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value); //declares an event called Transfer
    
    constructor(uint256 _initialSupply) { //constructor function that takes in an initial supply parameter
        owner = msg.sender; //assigns the owner variable to the sender of the contract
        totalSupply = _initialSupply; //assigns the totalSupply variable to the initial supply parameter
        
        balances[owner] = totalSupply; //assigns the total supply to the owner's balance
    }
    
    function transfer(address _to, uint256 _value) public returns (bool) { //function to transfer tokens to another address
        require(_to != address(0), "Invalid address"); //checks if the address to transfer to is not the null address
        require(balances[msg.sender] >= _value, "Insufficient balance"); //checks if the sender has enough balance
        
        balances[msg.sender] -= _value; //deducts the transfer amount from the sender's balance
        balances[_to] += _value; //adds the transfer amount to the receiver's balance
        
        emit Transfer(msg.sender, _to, _value); //emits the Transfer event
        
        return true; //returns a boolean value indicating a successful transfer
    }
    
    function getBalance(address _address) public view returns (uint256) { //function to get the balance of a given address
        return balances[_address]; //returns the balance of the given address
    }
}