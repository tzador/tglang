pragma solidity ^0.6.0;

// This is a contract to create a voting system using blockchain

contract VotingSystem {
    mapping (address => bool) public voters; // mapping to store the addresses of voters
    mapping (bytes32 => uint256) public voteCounts; // mapping to store the vote counts for each candidate 
    
    address public owner; // variable to store the owner of the contract
    bytes32[] public candidateList; // array to store the list of candidates 
    
    constructor(bytes32[] memory _candidateList) public {
        
        owner = msg.sender;  // set owner of the contract to the address of the sender 
        candidateList = _candidateList; // initialize the candidate list 
        
        for(uint i = 0; i < candidateList.length; i++) {
            voteCounts[candidateList[i]] = 0; // initialize the vote count for each candidate to 0
        }
    }
    
    function vote(bytes32 candidate) public {
        require(voters[msg.sender] == false); // check if the sender has already voted or not 
        require(isValidCandidate(candidate)); // check if the candidate is valid 
        
        voteCounts[candidate]++; // increase the vote count for the specified candidate by 1
        voters[msg.sender] = true; // mark the sender as a voter 
        
        // emit an event to notify everyone about the vote 
        emit Vote(msg.sender, candidate); 
    }
    
    // function to check if a candidate is valid 
    function isValidCandidate(bytes32 candidate) public view returns (bool) {
        for(uint i = 0; i < candidateList.length; i++) {
            if(candidate == candidateList[i]) {
                return true;
            }
        }
        return false;
    }
    
    // function to get the total number of votes for a candidate 
    function getTotalVotes(bytes32 candidate) public view returns (uint256) {
        require(isValidCandidate(candidate)); // check if the candidate is valid 
        return voteCounts[candidate]; // return the vote count for the specified candidate 
    }
    
    // event to notify about the vote 
    event Vote(address indexed _voter, bytes32 indexed _candidate);
}