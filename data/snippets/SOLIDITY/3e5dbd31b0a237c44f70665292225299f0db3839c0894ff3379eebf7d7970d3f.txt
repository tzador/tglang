pragma solidity ^0.8.4; // setting the compiler version

contract MyContract { // creating a contract

    uint public myVariable; // declaring a public variable of type unsigned integer

    constructor() { 
        myVariable = 5; // initializing the variable
    }

    function setMyVariable(uint _newValue) public { // declaring a function to set the value of myVariable
        myVariable = _newValue; // assigning the input parameter to myVariable
    }

    function getMyVariable() public view returns (uint) { // declaring a function to get the value of myVariable
        return myVariable; // returning the value of myVariable
    }

    mapping(address => uint) public balances; // declaring a public mapping to store balances of addresses
    
    function deposit() public payable { // declaring a function to deposit funds
        balances[msg.sender] += msg.value; // adding the deposited amount to the sender's balance in the mapping
    }

    function withdraw(uint _amount) public { // declaring a function to withdraw funds
        require(balances[msg.sender] >= _amount); // using require to ensure the sender has enough balance to withdraw
        balances[msg.sender] -= _amount; // subtracting the withdrawn amount from the sender's balance in the mapping
        payable(msg.sender).transfer(_amount); // transferring the withdrawn amount to the sender's address
    }

    event NewTransaction(address _from, address _to, uint _amount); // declaring an event to track transactions

    function transfer(address _to, uint _amount) public { // declaring a function to transfer funds
        require(balances[msg.sender] >= _amount); // using require to ensure the sender has enough balance to transfer
        balances[msg.sender] -= _amount; // subtracting the transferred amount from the sender's balance in the mapping
        balances[_to] += _amount; // adding the transferred amount to the recipient's balance in the mapping
        emit NewTransaction(msg.sender, _to, _amount); // emitting the event to track the transaction
    }
}