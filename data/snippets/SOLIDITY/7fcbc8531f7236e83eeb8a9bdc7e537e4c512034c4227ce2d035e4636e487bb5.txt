// Contract to represent a voting system
contract Voting {
    // State variables
    address public creator; // address of the contract creator
    mapping(address => bool) public voters; // map of addresses allowed to vote
    mapping(string => uint256) public voteCounts; // map of proposals to their vote counts
    string[] public proposals; // array of proposals for voting
    uint256 public totalVotes; // total number of votes casted

    // Constructor function to set the contract creator and initialize proposals
    function Voting() public {
        creator = msg.sender;
        proposals = ["Proposal 1", "Proposal 2", "Proposal 3"];
    }

    // Modifier function to restrict certain functions to the contract creator only
    modifier onlyCreator() {
        require(msg.sender == creator, "Only the contract creator can perform this action");
        _;
    }

    // Function to add new proposals for voting
    function addProposal(string _proposal) public onlyCreator {
        proposals.push(_proposal);
    }

    // Function to allow an address to vote
    function allowVoter(address _voter) public onlyCreator {
        voters[_voter] = true;
    }

    // Function to cast a vote
    function vote(string _proposal) public {
        require(voters[msg.sender], "You are not allowed to vote");
        require(voteCounts[_proposal] >= 0, "Invalid proposal. Please enter a valid proposal.");
        voteCounts[_proposal] += 1;
        totalVotes += 1;
    }

    // Function to get the winning proposal
    function getWinningProposal() public view onlyCreator returns(string) {
        require(totalVotes > 0, "No votes have been casted yet");
        uint256 winningVoteCount = 0;
        string memory winningProposal;
        // Loop through each proposal to find the one with the highest vote count
        for(uint i = 0; i < proposals.length; i++) {
            if(voteCounts[proposals[i]] > winningVoteCount) {
                winningVoteCount = voteCounts[proposals[i]];
                winningProposal = proposals[i];
            }
        }
        return winningProposal;
    }
}