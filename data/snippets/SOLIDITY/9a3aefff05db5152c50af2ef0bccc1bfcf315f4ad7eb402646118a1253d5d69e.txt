// This contract creates a decentralized voting system using blockchain technology

contract Voting {
    mapping (address => bool) public voters; // mapping to keep track of eligible voters
    mapping (address => uint8) public votes; // mapping to keep track of votes

    uint public totalVotes; // total number of votes casted
    uint public totalVoters; // total number of eligible voters

    // Event to be emitted when a new vote is casted
    event NewVote(address voter, uint8 vote);

    // Modifier to ensure only eligible voters can call a function
    modifier onlyVoters() {
        require(voters[msg.sender], "Only eligible voters can access this function");
        _; // run the function if the condition is satisfied
    }

    // Function to add a new eligible voter
    function addVoter(address _voter) public {
        voters[_voter] = true;
        totalVoters++;
    }

    // Function to cast a vote
    function castVote(uint8 _vote) public onlyVoters {
        votes[msg.sender] = _vote;
        totalVotes++;
        emit NewVote(msg.sender, _vote);
    }

    // Function to get the total votes casted by a voter
    function getVotesByVoter(address _voter) public view returns (uint8) {
        require(voters[_voter], "Voter is not eligible");
        return votes[_voter];
    }

    // Function to get the winning option
    function getWinningOption() public view returns (string memory) {
        if (totalVotes == 0) {
            return "No votes have been casted yet";
        }

        uint8 optionOne;
        uint8 optionTwo;

        // Loop through all the votes and keep track of the two options
        for (uint i = 0; i < totalVoters; i++) {
            if (votes[i] == 1) {
                optionOne++;
            } else if (votes[i] == 2) {
                optionTwo++;
            } else {
                continue;
            }
        }

        if (optionOne > optionTwo) {
            return "Option One is the winning option";
        } else if (optionOne < optionTwo) {
            return "Option Two is the winning option";
        } else {
            return "There is a tie between Option One and Option Two";
        }
    }
}