/** An example of a complex function in Solidity that implements the ERC20 standard token **/

pragma solidity ^0.8.0;

interface IERC20 {
    
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);
    
    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be allowed
     * to spend on behalf of `owner` through {transferFrom}. This is zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract MyToken is IERC20 {
    // Token Name and Symbol
    string private _name = "My Token";
    string private _symbol = "MTK";
    
    // Total Supply
    uint256 private _totalSupply;
    
    // Owner's Balance
    mapping (address => uint256) private _balances;
    
    // Allowances
    mapping (address => mapping (address => uint256)) private _allowances;
    
    constructor(uint256 initialSupply) {
        // Set Total Supply to initial supply passed in constructor
        _totalSupply = initialSupply;
        
        // Transfer Total Supply to Owner
        _balances[msg.sender] = _totalSupply;
        
        // Emit Transfer event
        emit Transfer(address(0), msg.sender, _totalSupply);
    }
    
    // Get total supply of tokens
    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }
    
    // Get balance of a specific account
    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }
    
    // Transfer tokens from sender's account to recipient
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        // Check if sender has enough balance
        require(_balances[msg.sender] >= amount, "Insufficient balance.");
        
        // Update balances
        _balances[msg.sender] -= amount;
        _balances[recipient] += amount;
        
        // Emit Transfer event
        emit Transfer(msg.sender, recipient, amount);
        
        // Return true
        return true;
    }
    
    // Get remaining allowance of spender for specific owner
    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    // Set allowance of spender for sender's account
    function approve(address spender, uint256 amount) external override returns (bool) {
        // Update allowances
        _allowances[msg.sender][spender] = amount;
        
        // Emit Approval event
        emit Approval(msg.sender, spender, amount);
        
        // Return true
        return true;
    }
    
    // Transfer tokens from sender to recipient using allowance
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        // Check if sender has enough balance
        require(_balances[sender] >= amount, "Insufficient balance.");
        
        // Check if sender has enough allowance
        require(_allowances[sender][msg.sender] >= amount, "Insufficient allowance.");
        
        // Update balances and allowances
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        _allowances[sender][msg.sender] -= amount;
        
        // Emit Transfer event
        emit Transfer(sender, recipient, amount);
        
        // Return true
        return true;
    }
}