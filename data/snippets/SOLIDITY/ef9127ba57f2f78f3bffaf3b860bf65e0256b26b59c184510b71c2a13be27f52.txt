pragma solidity ^0.8.4;

//Define a contract called Bank
contract Bank {
    //Set owner variable to hold the address of the contract deployer
    address owner;
    
    //Set the balance mapping to keep track of balances for each address
    mapping(address => uint) balances;
    
    //Define an event for tracking transactions
    event Transaction(address from, address to, uint amount);
    
    //Constructor function that sets the owner to the address of the deployer
    constructor() {
        owner = msg.sender;
    }
    
    //Function to deposit funds into the bank
    function deposit() public payable {
        //Add the deposited amount to the sender's balance
        balances[msg.sender] += msg.value;
        
        //Emit a transaction event
        emit Transaction(address(this), msg.sender, msg.value);
    }
    
    //Function to withdraw funds from the bank
    function withdraw(uint amount) public {
        //Make sure the sender's balance is greater than or equal to the specified amount
        require(balances[msg.sender] >= amount, "Insufficient funds");
        
        //Subtract the withdrawn amount from the sender's balance
        balances[msg.sender] -= amount;
        
        //Transfer the specified amount to the sender's address
        payable(msg.sender).transfer(amount);
        
        //Emit a transaction event
        emit Transaction(msg.sender, address(this), amount);
    }
    
    //Function to check the balance of a given address
    function checkBalance(address account) public view returns (uint) {
        return balances[account];
    }
    
    //Function to transfer funds from one address to another
    function transfer(address to, uint amount) public {
        //Make sure the sender's balance is greater than or equal to the specified amount
        require(balances[msg.sender] >= amount, "Insufficient funds");
        
        //Subtract the transferred amount from the sender's balance
        balances[msg.sender] -= amount;
        
        //Add the transferred amount to the receiver's balance
        balances[to] += amount;
        
        //Emit a transaction event
        emit Transaction(msg.sender, to, amount);
    }
    
    //Function to close the bank and transfer remaining funds to the owner
    function closeBank() public {
        //Make sure the sender is the owner
        require(msg.sender == owner, "Only owner can close the bank");
        
        //Transfer all remaining funds to the owner's address
        payable(owner).transfer(address(this).balance);
    }
}