pragma solidity >=0.7.0 <0.9.0;

// The following contract represents a decentralized voting system using blockchain technology

contract VotingSystem {
    // List of initialized candidates and their corresponding vote counts
    mapping (string => uint) public candidates;
    
    // List of eligible voters and their voting status
    mapping (address => bool) public voters;
    
    // Event to be emitted when vote is casted
    event VoteCasted(address indexed voter, string indexed candidate);
    
    // Function to add new candidate to the list of candidates
    // Requires sender to be the contract owner
    function addCandidate(string memory _candidateName) public onlyOwner {
        candidates[_candidateName] = 0;
    }
    
    // Function to check if sender is the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    // Function to check if sender is an eligible voter
    modifier onlyVoters() {
        require(voters[msg.sender]);
        _;
    }
    
    // Function to cast a vote
    // Requires sender to be an eligible voter
    function vote(string memory _candidateName) public onlyVoters {
        require(candidates[_candidateName] != 0);
        candidates[_candidateName]++;
        
        // Emit VoteCasted event
        emit VoteCasted(msg.sender, _candidateName);
    }
    
    // Function to register a voter
    // Requires sender to be the contract owner
    function registerVoter(address _voterAddress) public onlyOwner {
        voters[_voterAddress] = true;
    }
    
    // Function to remove a voter
    // Requires sender to be the contract owner
    function removeVoter(address _voterAddress) public onlyOwner {
        delete voters[_voterAddress];
    }
    
    // Function to get the vote count of a candidate
    function getVoteCount(string memory _candidateName) public view returns (uint) {
        return candidates[_candidateName];
    }
}