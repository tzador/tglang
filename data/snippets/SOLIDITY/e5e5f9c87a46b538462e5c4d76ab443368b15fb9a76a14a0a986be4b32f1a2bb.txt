// Interface for a contract that takes in a deposit
interface DepositContract {
  uint public deposit; // state variable for the deposit amount

  // function that allows deposits
  // returns true if deposit was successful
  function deposit(uint _amount) external returns (bool);

  // event to emit when a deposit is made
  event DepositMade(address _depositer, uint _amount);
}

// Contract that inherits from DepositContract
contract MyContract is DepositContract {
  // state variables
  uint public count = 0;
  string private name;

  // constructor
  constructor(string memory _name) {
    name = _name;
  }

  // deposit function
  function deposit(uint _amount) public override returns (bool) {
    deposit = _amount;
    emit DepositMade(msg.sender, _amount);
    return true;
  }

  // function that increments count
  function incrementCount() public {
    count++;
  }

  // function that gets the contract name
  function getName() public view returns (string memory) {
    return name;
  }
}