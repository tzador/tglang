pragma solidity ^0.5.0; //specify the version of Solidity to use

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol"; //import ERC721 OpenZeppelin library

contract MyToken is ERC721 { //create contract called MyToken that inherits from ERC721

    string[] public tokenNames; //create public array to store token names

    mapping(string => bool) _nameExists; //create mapping to keep track of existing token names

    constructor() public { //constructor function for MyToken contract
        tokenNames.push("Token #0"); //push default token name to array
        _nameExists["Token #0"] = true; //set default token name as existing
    }

    function _getRandomName(uint tokenId) internal view returns (string memory) { //internal function to generate random name for token
        return string(abi.encodePacked("Token #", tokenId)); //use encoding to concatenate token id to string
    }

    function mintToken() public { //function for users to mint new tokens
        uint tokenId = totalSupply(); //get token id based on current total supply
        string memory newTokenName = _getRandomName(tokenId); //use internal function to generate token name
        require(!_nameExists[newTokenName], "Token name already exists."); //check if token name exists
        tokenNames.push(newTokenName); //add new token name to array
        _nameExists[newTokenName] = true; //set new token name as existing
        _mint(msg.sender, tokenId); //mint token with specified id and sender address
    }

    function getTokensByOwner(address owner) public view returns (string[] memory) { //function to retrieve token names of a specific owner
        uint[] memory tokenIds = _tokensOfOwner(owner); //use internal function to get list of token ids owned by address
        string[] memory currentOwnerTokens = new string[](tokenIds.length); //create array to store token names
        for (uint i = 0; i < tokenIds.length; i++) { //loop through token ids
            currentOwnerTokens[i] = tokenNames[tokenIds[i]]; //retrieve token name from tokenNames array and add to currentOwnerTokens array
        }
        return currentOwnerTokens; //return array of token names
    }
}