pragma solidity ^0.8.7; // declare solidity version

contract ExampleContract { // create contract

    // state variables
    address public owner;
    string public name = "Example Contract";
    uint public balance;
    mapping(address => uint) public balances;

    // events
    event Deposit(address sender, uint amount);
    event Withdraw(address recipient, uint amount);

    // constructor
    constructor() {
        owner = msg.sender; // set owner as deployer of contract
    }

    // functions with modifiers
    function deposit() public payable onlyOwner { // deposit funds function with onlyOwner modifier
        require(msg.value > 0); // require non-zero value
        balances[msg.sender] += msg.value; // add funds to sender's balance
        balance += msg.value; // increase total balance
        emit Deposit(msg.sender, msg.value); // emit deposit event
    }

    function withdraw(address _recipient, uint _amount) public onlyOwner { // withdraw funds function with onlyOwner modifier
        require(_amount > 0); //require non-zero amount
        require(balances[msg.sender] >= _amount); // require sender's balance to be greater than or equal to amount
        balances[msg.sender] -= _amount; // subtract amount from sender's balance
        balance -= _amount; // decrease total balance
        payable(_recipient).transfer(_amount); // transfer funds to recipient's address
        emit Withdraw(_recipient, _amount); // emit withdraw event
    }

    // modifiers
    modifier onlyOwner() {
        require(msg.sender == owner); // require sender to be owner
        _; // continue function execution
    }

    // fallback function
    fallback() external payable {
        deposit(); // execute deposit function if no other function is called
    }
}