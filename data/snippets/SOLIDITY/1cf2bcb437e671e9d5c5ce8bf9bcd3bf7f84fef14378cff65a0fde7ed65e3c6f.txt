pragma solidity ^0.8.0;

// Create an ERC20 token with optional functionalities
contract ERC20Token {
    string public name; // Name of the token
    string public symbol; // Symbol of the token
    uint8 public decimals; // Decimals for the token

    // Mapping of account addresses to their balance
    mapping(address => uint256) public balanceOf;

    // Mapping of account addresses to mapping of spender addresses to allowance amount
    mapping(address => mapping(address => uint256)) public allowance;

    // Event to track transfer from one account to another
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Event to track approval of allowance to spend from one account to another
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Constructor function for initializing token parameters
    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        balanceOf[msg.sender] = _initialSupply;
    }

    // Function to transfer tokens from one account to another
    function transfer(address _to, uint256 _value) public returns (bool) {
        // Check if sender has enough balance
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");

        // Subtract tokens from sender's account
        balanceOf[msg.sender] -= _value;

        // Add tokens to recipient's account
        balanceOf[_to] += _value;

        // Trigger transfer event
        emit Transfer(msg.sender, _to, _value);

        return true;
    }

    // Function to approve allowance for spender to spend tokens on behalf of owner
    function approve(address _spender, uint256 _value) public returns (bool) {
        // Set spender's allowance for owner's tokens
        allowance[msg.sender][_spender] = _value;

        // Trigger approval event
        emit Approval(msg.sender, _spender, _value);

        return true;
    }

    // Function to transfer tokens from one account to another on behalf of account owner
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        // Check if spender has enough allowance
        require(allowance[_from][msg.sender] >= _value, "Insufficient allowance");

        // Check if owner has enough balance
        require(balanceOf[_from] >= _value, "Insufficient balance");

        // Subtract tokens from owner's account
        balanceOf[_from] -= _value;

        // Add tokens to recipient's account
        balanceOf[_to] += _value;

        // Subtract allowance from spender's allowance
        allowance[_from][msg.sender] -= _value;

        // Trigger transfer event
        emit Transfer(_from, _to, _value);

        return true;
    }
}