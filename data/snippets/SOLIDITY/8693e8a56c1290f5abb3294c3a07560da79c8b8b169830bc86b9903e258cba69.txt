pragma solidity ^0.8.6;

//This is a contract that implements a simple token system
contract Token {
    //Variables for storing the total supply and balances of each address
    uint internal totalSupply;
    mapping(address => uint) internal balances;

    //Events to keep track of token transfers
    event Transfer(address indexed _from, address indexed _to, uint _value);

    //Constructor function to set the initial total supply
    constructor(uint _initialSupply) {
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply;
    }

    //Function to get the total supply
    function getTotalSupply() public view returns (uint) {
        return totalSupply;
    }

    //Function to get the balance of an address
    function getBalance(address _address) public view returns (uint) {
        return balances[_address];
    }

    //Function to transfer tokens from one address to another
    function transfer(address _to, uint _value) public {
        //Ensure that the sender has enough tokens
        require(balances[msg.sender] >= _value, "Not enough funds");

        //Update balances of both addresses
        balances[msg.sender] -= _value;
        balances[_to] += _value;

        //Emit transfer event
        emit Transfer(msg.sender, _to, _value);
    }
}