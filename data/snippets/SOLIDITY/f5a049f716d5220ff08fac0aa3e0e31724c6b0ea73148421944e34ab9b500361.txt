/**
Title: Token Contract
Description: A sample ERC20 token contract
Solidity Version: 0.8.7
*/

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

contract Token {
    mapping(address => uint256) balances; // mapping for storing balance of each address

    uint256 totalSupply; // total supply of the token
    string name; // name of the token
    string symbol; // symbol of the token
    uint8 decimals; // number of decimals used in displaying token balance

    constructor(
        uint256 _initialSupply,
        string memory _name,
        string memory _symbol,
        uint8 _decimals
    ) {
        balances[msg.sender] = _initialSupply; // assign total supply to the contract creator
        totalSupply = _initialSupply; // set total supply
        name = _name; // set name
        symbol = _symbol; // set symbol
        decimals = _decimals; // set decimals
    }

    // transfer function to send tokens from sender to receiver
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(
            balances[msg.sender] >= _value, // check if sender has enough balance
            "Insufficient balance"
        );
        require(_to != address(0), "Invalid address"); // check if receiver is a valid address
        balances[msg.sender] -= _value; // deduct tokens from sender's balance
        balances[_to] += _value; // add tokens to receiver's balance
        emit Transfer(msg.sender, _to, _value); // emit transfer event
        return true;
    }

    // allowance mapping to allow spender to spend a certain number of tokens on behalf of the owner
    mapping(address => mapping(address => uint256)) allowances;

    // approve function to allow spender to spend certain number of tokens
    function approve(address _spender, uint256 _limit)
        public
        returns (bool)
    {
        require(
            _spender != address(0), // check if spender is a valid address
            "Invalid address"
        );
        allowances[msg.sender][_spender] = _limit; // set allowance of spender
        emit Approval(msg.sender, _spender, _limit); // emit approval event
        return true;
    }

    // transferFrom function to transfer tokens on behalf of the owner
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool) {
        require(
            allowances[_from][msg.sender] >= _value, // check if spender has enough allowance
            "Insufficient allowance"
        );
        require(
            balances[_from] >= _value, // check if owner has enough balance
            "Insufficient balance"
        );
        require(_to != address(0), "Invalid address"); // check if receiver is a valid address
        balances[_from] -= _value; // deduct tokens from owner's balance
        balances[_to] += _value; // add tokens to receiver's balance
        allowances[_from][msg.sender] -= _value; // deduct allowance of spender
        emit Transfer(_from, _to, _value); // emit transfer event
        return true;
    }

    // event to emit when transfer or transferFrom function is called
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    // event to emit when approve function is called
    event Approval(
        address indexed _owner,
        address indexed _spender,
        uint256 _value
    );
}