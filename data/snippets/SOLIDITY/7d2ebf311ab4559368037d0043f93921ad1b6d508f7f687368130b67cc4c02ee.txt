// Solidity code example
pragma solidity ^0.8.0; // Version specification

// Abstract contract that defines the functions and variables for owning a contract
abstract contract Ownable {
    address public owner; // Storage variable for contract owner

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); // Event for owner transfer

    // Constructor that sets the owner as the one who deployed the contract
    constructor() {
        owner = msg.sender;
        emit OwnershipTransferred(address(0), msg.sender);
    }

    // Modifier that restricts access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Restricted to contract owner only");
        _;
    }

    // Function for transferring ownership of the contract to a new address
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Invalid address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

// Example contract that inherits from the Ownable contract
contract MyContract is Ownable {
    uint public myVar; // Public instance variable

    // Function that sets the value of myVar
    function setMyVar(uint _myVar) public onlyOwner {
        myVar = _myVar;
    }
}

// Interface contract for a token that has a transfer function
interface ERC20Token {
    function transfer(address to, uint value) external returns (bool);
}

// Example contract that uses the ERC20Token interface and inherits from the Ownable contract
contract TokenContract is Ownable {
    ERC20Token public token; // Storage variable for ERC20Token contract address

    // Constructor that sets the ERC20Token contract address
    constructor(address _token) {
        token = ERC20Token(_token);
    }

    // Function for transferring tokens from the contract to an address
    function transferTokens(address _to, uint _value) public onlyOwner {
        require(token.transfer(_to, _value), "Transfer failed");
    }
}