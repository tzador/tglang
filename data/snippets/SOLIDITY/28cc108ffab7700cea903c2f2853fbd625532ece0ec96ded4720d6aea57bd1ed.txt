pragma solidity 0.8.0;

//This is a comment
contract Example {
  address public owner;
  mapping(address => bool) public approvedList;
  address[] public userList;
  
  //A constructor function
  constructor() {
    owner = msg.sender;
  }
  
  //A getter function
  function getOwner() external view returns (address) {
    return owner;
  }
  
  //A setter function
  function setOwner(address _newOwner) external {
    require(msg.sender == owner, "Only the owner can call this function.");
    owner = _newOwner;
  }
  
  //An add user function
  function addUser(address _user) external {
    require(msg.sender == owner, "Only the owner can call this function.");
    require(!approvedList[_user], "User is already approved.");
    approvedList[_user] = true;
    userList.push(_user);
  }
  
  //A remove user function
  function removeUser(address _user) external {
    require(msg.sender == owner, "Only the owner can call this function.");
    require(approvedList[_user], "User is not approved.");
    approvedList[_user] = false;
    for (uint i = 0; i < userList.length; i++) {
      if (userList[i] == _user) {
        //Delete the element in the array
        userList[i] = userList[userList.length - 1];
        userList.pop();
        break;
      }
    }
  }
  
  //A transfer ERC20 token function
  function transferToken(address _token, uint _amount) external {
    require(approvedList[msg.sender], "User is not approved.");
    ERC20 token = ERC20(_token);
    require(token.balanceOf(address(this)) >= _amount, "Insufficient balance.");
    token.transfer(msg.sender, _amount);
  }
  
}

//The ERC20 interface
interface ERC20 {
  function transfer(address recipient, uint256 amount) external returns (bool);
  function balanceOf(address account) external view returns (uint256);
}