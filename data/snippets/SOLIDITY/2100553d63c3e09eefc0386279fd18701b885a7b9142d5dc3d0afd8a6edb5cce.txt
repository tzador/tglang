// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

import "./IERC20.sol";
import "./SafeMath.sol";

contract MyToken is IERC20 {
  using SafeMath for uint256;

  string public constant name = "MyToken";
  string public constant symbol = "MTK";
  uint8 public constant decimals = 18;
  uint256 private _totalSupply = 100000000 * 10 ** decimals;

  mapping(address => uint256) private _balances;
  mapping(address => mapping(address => uint256)) private _allowances;

  constructor() {
    _balances[msg.sender] = _totalSupply;
    emit Transfer(address(0), msg.sender, _totalSupply);
  }

  function totalSupply() public view override returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address account) public view override returns (uint256) {
    return _balances[account];
  }

  function transfer(address recipient, uint256 amount) public override returns (bool) {
    require(recipient != address(0), "ERC20: transfer to the zero address");
    require(amount <= _balances[msg.sender], "ERC20: transfer amount exceeds balance");
    
    _balances[msg.sender] = _balances[msg.sender].sub(amount);
    _balances[recipient] = _balances[recipient].add(amount);
    emit Transfer(msg.sender, recipient, amount);
    return true;
  }

  function allowance(address owner,address spender) public view override returns (uint256) {
    return _allowances[owner][spender];
  }

  function approve(address spender, uint256 amount) public override returns (bool) {
    require(spender != address(0), "ERC20: approve to the zero address");
    
    _allowances[msg.sender][spender] = amount;
    emit Approval(msg.sender, spender, amount);
    return true;
  }

  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
    require(sender != address(0), "ERC20: transfer from the zero address");
    require(recipient != address(0), "ERC20: transfer to the zero address");
    require(amount <= _balances[sender], "ERC20: transfer amount exceeds balance");
    require(amount <= _allowances[sender][msg.sender], "ERC20: transfer amount exceeds allowance");
    
    _balances[sender] = _balances[sender].sub(amount);
    _balances[recipient] = _balances[recipient].add(amount);
    _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);
    emit Transfer(sender, recipient, amount);
    return true;
  }
  
  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
    require(spender != address(0), "ERC20: approve to the zero address");

    _allowances[msg.sender][spender] = _allowances[msg.sender][spender].add(addedValue);
    emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
    require(spender != address(0), "ERC20: approve to the zero address");

    _allowances[msg.sender][spender] = _allowances[msg.sender][spender].sub(subtractedValue);
    emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);
    return true;
  }

  function mint(address recipient, uint256 amount) public virtual {
    require(msg.sender == recipient, "ERC20: mint to non-recipient address");
    require(amount > 0, "ERC20: minted amount must be greater than zero");

    _totalSupply = _totalSupply.add(amount);
    _balances[recipient] = _balances[recipient].add(amount);
    emit Transfer(address(0), recipient, amount);
  }

  function burn(uint256 amount) public virtual {
    require(amount > 0, "ERC20: burned amount must be greater than zero");
    require(amount <= _balances[msg.sender], "ERC20: burned amount exceeds balance");

    _totalSupply = _totalSupply.sub(amount);
    _balances[msg.sender] = _balances[msg.sender].sub(amount);
    emit Transfer(msg.sender, address(0), amount);
  }

  function approveAndCall(address spender, uint256 amount, bytes memory data) public returns (bool) {
    approve(spender, amount);
    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), data);
    return true;
  }
}