pragma solidity ^0.8.0;

contract ExampleContract {
  address owner;
  mapping(address => uint) balances;
  
  event Transfer(address indexed from, address indexed to, uint amount);

  constructor() {
    owner = msg.sender;
    balances[msg.sender] = 1000;
  }

  function transfer(address recipient, uint amount) external {
    require(msg.sender == owner, "Only the contract owner can transfer funds.");
    require(amount <= balances[msg.sender], "Insufficient funds to transfer.");
    
    balances[msg.sender] -= amount;
    balances[recipient] += amount;
    
    emit Transfer(msg.sender, recipient, amount);
  }

  function getBalance(address account) external view returns (uint) {
    return balances[account];
  }

  function withdraw(uint amount) external {
    require(msg.sender == owner, "Only the contract owner can withdraw funds.");
    require(amount <= address(this).balance, "Insufficient contract balance to withdraw.");
    
    msg.sender.transfer(amount);
  }

  function donate() external payable {
    require(msg.value > 0, "Donation amount must be greater than 0.");
    
    balances[msg.sender] += msg.value;
  }
}