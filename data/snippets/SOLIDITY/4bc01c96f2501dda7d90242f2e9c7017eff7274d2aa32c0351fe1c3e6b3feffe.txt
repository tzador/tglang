pragma solidity ^0.7.0; // specifies version of Solidity used

contract ExampleContract { // creates a contract called ExampleContract
  uint private number; // private unsigned integer variable called 'number'
  
  event NewNumber(address indexed _sender, uint _number); // event emitted when 'number' is changed
  
  constructor() { // constructor function to initialize the contract
    number = 0; // sets initial value of 'number' to 0
  }
  
  function setNumber(uint _newNumber) public { // function to change the value of 'number'
    require(number != _newNumber); // requires the new value to be different from the current one
    number = _newNumber; // changes the value of 'number'
    emit NewNumber(msg.sender, _newNumber); // emits the NewNumber event with the sender's address and the new number
  }
  
  function getNumber() public view returns (uint) { // function to retrieve the value of 'number'
    return number; // returns the value of 'number'
  }
  
  function add(uint _num1, uint _num2) private pure returns (uint) { // private pure function to add two numbers
    return _num1 + _num2; // returns the sum of the two numbers
  }
  
  function multiply(uint _num1, uint _num2) private pure returns (uint) { // private pure function to multiply two numbers
    return _num1 * _num2; // returns the product of the two numbers
  }
  
  function calculate(uint _num1, uint _num2, bool _add) public view returns (uint) { // public view function to calculate the sum or product of two numbers
    if(_add) { // if _add is true
      return add(_num1, _num2); // calls the add function and returns the result
    } else { // if _add is false
      return multiply(_num1, _num2); // calls the multiply function and returns the result
    }
  }
}