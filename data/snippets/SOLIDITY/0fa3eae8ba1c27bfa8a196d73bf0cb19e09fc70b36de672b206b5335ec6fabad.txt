pragma solidity ^0.6.0; // Solidity version
                 
// Creating contract
contract CodeSnippet {

    // Defining variables
    address payable public owner; // Owner of the contract

    // Creating structure
    struct User {
        string name; // User's name
        uint age; // User's age
    }

    // Creating mappings
    mapping(address => uint) public balances; // Mapping of address to balance
    mapping(address => User) public users; // Mapping of address to User struct

    // Defining events
    event UserAdded(string name, uint age); // Event for when a new user is added
    event BalanceIncreased(address user, uint newBalance); // Event for when a user's balance is increased

    // Constructor function
    constructor() public {
        owner = msg.sender; // Set owner as the address that deployed the contract
    }

    // Function to add a new user
    function addUser(string memory _name, uint _age) public {
        users[msg.sender] = User(_name, _age); // Add new user to mapping
        emit UserAdded(_name, _age); // Emit UserAdded event
    }

    // Function to increase a user's balance
    function increaseBalance(uint _amount) public payable {
        require(msg.value == _amount); // Require that the amount sent matches the amount passed in
        require(msg.sender == owner); // Require that the sender is the owner of the contract
        balances[msg.sender] += _amount; // Increase user's balance by given amount
        emit BalanceIncreased(msg.sender, balances[msg.sender]); // Emit BalanceIncreased event
    }

    // Function to withdraw funds from the contract
    function withdraw() public {
        require(msg.sender == owner); // Require that the sender is the owner of the contract
        require(address(this).balance > 0); // Require that there are funds in the contract to withdraw
        owner.transfer(address(this).balance); // Transfer all funds to owner's address
    }
}