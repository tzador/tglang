pragma solidity ^0.8.0; //set the version of Solidity to use

contract Bank {
    address private owner; //declare private variable

    mapping (address => uint) private balances; //create a mapping for storing balances

    event Deposit(address indexed account, uint amount); //event to emit when a deposit is made

    constructor() { //constructor function
        owner = msg.sender; //set the owner to the sender
    }

    modifier onlyOwner { //modifier to ensure only owner can make changes
        require(msg.sender == owner, "Only the owner can make changes");
        _; //placeholder for the function to be modified
    }

    function deposit() payable public { //function to make a deposit
        require(msg.value > 0, "Deposit must be greater than 0"); //ensure deposit amount is greater than 0
        balances[msg.sender] += msg.value; //add deposit amount to sender's balance
        emit Deposit(msg.sender, msg.value); //emit deposit event
    }

    function withdraw(uint _amount) public onlyOwner { //function to withdraw funds
        require(_amount > 0, "Withdrawal amount must be greater than 0"); //ensure withdrawal amount is greater than 0
        require(_amount <= balances[msg.sender], "Insufficient balance"); //ensure sender has enough balance
        msg.sender.transfer(_amount); //transfer funds to sender
        balances[msg.sender] -= _amount; //subtract withdrawal amount from sender's balance
    }

    function getBalance() public view returns (uint) { //function to get sender's balance
        return balances[msg.sender]; //return sender's balance
    }
}