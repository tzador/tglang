pragma solidity 0.8.4; // Sets the Solidity compiler version

library SafeMath {  // Creates a library called SafeMath
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b; // Adds two numbers and stores the result in c
        require(c >= a, "SafeMath: addition overflow"); // Checks if the result is greater than or equal to at least the first number
        return c; // Returns the result
    }
    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow"); // Calls the sub function with an additional error message
    }
    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage); // Checks if the second number is less than or equal to the first number
        uint256 c = a - b; // Subtracts b from a and stores the result in c
        return c; // Returns the result
    }
    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0; // If a is 0, the result will also be 0
        }
        uint256 c = a * b; // Multiplies two numbers and stores the result in c
        require(c / a == b, "SafeMath: multiplication overflow"); // Checks if the result is divisible by a
        return c; // Returns the result
    }
    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero"); // Calls the div function with an additional error message
    }
    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage); // Checks if the second number is greater than 0
        uint256 c = a / b; // Divides a by b and stores the result in c
        return c; // Returns the result
    }
}

contract ExampleContract {
    using SafeMath for uint256; // Imports the SafeMath library
    
    uint256 public number;
    
    function addNumber(uint256 value) external {
        number = number.add(value); // Calls the SafeMath add function to add the value to the number variable
    }
    
    function subtractNumber(uint256 value) external {
        number = number.sub(value); // Calls the SafeMath sub function to subtract the value from the number variable
    }
    
    function multiplyNumber(uint256 value) external {
        number = number.mul(value); // Calls the SafeMath mul function to multiply the number variable by the value
    }
    
    function divideNumber(uint256 value) external {
        number = number.div(value); //Calls the SafeMath div function to divide the number variable by the value
    }
}