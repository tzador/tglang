pragma solidity ^0.8.0;

interface IUniswapV2Router {
    function getAmountsOut(uint amountIn, address[] calldata path)
        external
        view
        returns (uint[] memory amounts);
}

contract UniswapSwapExample {

    address private constant UNISWAP_V2_ROUTER = 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F;
    
    IUniswapV2Router private uniswapV2Router;

    constructor() {
        uniswapV2Router = IUniswapV2Router(UNISWAP_V2_ROUTER);
    }

    // Executes a swap on Uniswap V2 using the specified token addresses and amount
    // Returns the amount of tokens received after the swap
    function swapTokens(
        address inputToken,
        address outputToken,
        uint amountIn,
        address to,
        uint deadline
    ) public returns (uint) {

        // Converts the input token address to an array for the Uniswap function call
        address[] memory path = new address[](2);
        path[0] = inputToken;
        path[1] = outputToken;

        // Approves the Uniswap contract to spend the input tokens
        ERC20(inputToken).approve(address(uniswapV2Router), amountIn);

        // Executes the swap on Uniswap V2
        uint[] memory amounts = uniswapV2Router.getAmountsOut(amountIn, path);
        uniswapV2Router.swapExactTokensForTokens(
            amountIn,
            amounts[amounts.length - 1],
            path,
            to,
            deadline
        );

        // Checks the balance of the output token after the swap and returns it
        uint outputBalance = ERC20(outputToken).balanceOf(address(this));
        return outputBalance;
    }
}