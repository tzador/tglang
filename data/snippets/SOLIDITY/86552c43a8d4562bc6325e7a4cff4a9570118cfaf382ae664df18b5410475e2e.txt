pragma solidity ^0.8.0;

contract MyContract {
    // Define variables
    address public owner;
    uint256 public value;
    mapping(address => bool) public allowedAddresses;

    // Events
    event ValueSet(address indexed _address, uint256 _value);

    // Constructor function
    constructor() {
        owner = msg.sender;
    }

    // Restrict access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can access this function");
        _;
    }

    // Add an address to the allowedAddresses mapping
    function addAddress(address _address) public onlyOwner {
        allowedAddresses[_address] = true;
    }

    // Set the value variable to a new value
    function setValue(uint256 _value) public {
        require(allowedAddresses[msg.sender], "You are not allowed to set the value");
        value = _value;

        // Emit an event
        emit ValueSet(msg.sender, _value);
    }
}