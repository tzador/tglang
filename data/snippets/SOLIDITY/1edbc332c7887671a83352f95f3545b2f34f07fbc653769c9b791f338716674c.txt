/**
 * @dev This contract implements the ERC20 token standard, with the following functionalities:
 * - Ability to mint and burn tokens
 * - Allowance functions to approve and transfer tokens
 * - Ability to pause and unpause token transfers
 * - Ability to set and get a token's name, symbol, and decimal places
 * - Ability to freeze and unfreeze accounts from being able to transfer tokens
 * - Events for tracking token transfers, approvals, and pausing/unpausing
 */
contract ERC20Token {
    // token owner's address
    address private _owner;

    // total supply of tokens
    uint256 private _totalSupply;

    // mapping of account balances
    mapping(address => uint256) private _balances;

    // mapping of approved allowances
    mapping(address => mapping(address => uint256)) private _allowances;

    // mapping of frozen accounts
    mapping(address => bool) private _frozenAccounts;

    // token name
    string private _name;

    // token symbol
    string private _symbol;

    // number of decimal places for token
    uint8 private _decimals;

    // flag for pausing/unpausing token transfers
    bool private _paused;

    // event for tracking token transfers
    event Transfer(address indexed from, address indexed to, uint256 value);

    // event for tracking approved allowances
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // event for tracking pausing/unpausing
    event Paused(address account);

    /**
     * @dev Constructor function, sets the token's name, symbol, and decimal places.
     * @param name Token name
     * @param symbol Token symbol
     * @param decimals Number of decimal places
     */
    constructor(string memory name, string memory symbol, uint8 decimals) public {
        _owner = msg.sender;
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }

    /**
     * @dev Modifier that only allows the contract owner to perform a function.
     */
    modifier onlyOwner() {
        require(msg.sender == _owner, "Sender is not the contract owner.");
        _;
    }

    /**
     * @dev Modifier that only allows token transfers if the contract is not paused.
     */
    modifier notPaused() {
        require(!_paused, "Token transfers are currently paused.");
        _;
    }

    /**
     * @dev Returns the token's total supply.
     * @return Total supply of the token
     */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev Returns the balance of the specified account.
     * @param account Address of the account to check
     * @return Balance of the account
     */
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev Returns the amount of tokens that the spender is allowed to spend on behalf of the owner.
     * @param owner Address of the owner
     * @param spender Address of the spender
     * @return Allowed amount
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev Transfers tokens from the sender's account to the specified recipient.
     * @param recipient Address of the recipient
     * @param amount Amount of tokens to transfer
     * @return True if successful
     */
    function transfer(address recipient, uint256 amount) public notPaused returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    /**
     * @dev Approves the specified amount of tokens to be spent by the specified spender.
     * @param spender Address of the spender
     * @param amount Amount of tokens to approve
     * @return True if successful
     */
    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    /**
     * @dev Transfers tokens from the specified sender to the specified recipient on behalf of the owner.
     * @param sender Address of the sender
     * @param recipient Address of the recipient
     * @param amount Amount of tokens to transfer
     * @return True if successful
     */
    function transferFrom(address sender, address recipient, uint256 amount) public notPaused returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }

    /**
     * @dev Increases the approved allowance of the specified spender.
     * @param spender Address of the spender
     * @param addedValue Amount of additional allowance
     * @return True if successful
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Decreases the approved allowance of the specified spender.
     * @param spender Address of the spender
     * @param subtractedValue Amount of allowance to subtract
     * @return True if successful
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }

    /**
     * @dev Mints new tokens and automatically gives them to the token owner.
     * @param amount Amount of tokens to mint
     * @return True if successful
     */
    function mint(uint256 amount) public onlyOwner returns (bool) {
        _mint(_owner, amount);
        return true;
    }

    /**
     * @dev Burns tokens from the specified account.
     * @param amount Amount of tokens to burn
     * @return True if successful
     */
    function burn(uint256 amount) public onlyOwner returns (bool) {
        _burn(_owner, amount);
        return true;
    }

    /**
     * @dev Pauses token transfers.
     * @return True if successful
     */
    function pause() public onlyOwner returns (bool) {
        require(!_paused, "Token transfers are already paused.");
        _paused = true;
        emit Paused(msg.sender);
        return true;
    }

    /**
     * @dev Unpauses token transfers.
     * @return True if successful
     */
    function unpause() public onlyOwner returns (bool) {
        require(_paused, "Token transfers are not currently paused.");
        _paused = false;
        emit Unpaused(msg.sender);
        return true;
    }

    /**
     * @dev Sets the token name.
     * @param name New name for the token
     * @return True if successful
     */
    function setName(string memory name) public onlyOwner returns (bool) {
        _name = name;
        return true;
    }

    /**
     * @dev Returns the token name.
     * @return Token name
     */
    function getName() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Sets the token symbol.
     * @param symbol New symbol for the token
     * @return True if successful
     */
    function setSymbol(string memory symbol) public onlyOwner returns (bool) {
        _symbol = symbol;
        return true;
    }

    /**
     * @dev Returns the token symbol.
     * @return Token symbol
     */
    function getSymbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Sets the number of decimal places for the token.
     * @param decimals New number of decimal places
     * @return True if successful
     */
    function setDecimals(uint8 decimals) public onlyOwner returns (bool) {
        _decimals = decimals;
        return true;
    }

    /**
     * @dev Returns the number of decimal places for the token.
     * @return Number of decimal places
     */
    function getDecimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev Freezes the specified account from being able to transfer tokens.
     * @param account Address of the account to freeze
     * @return True if successful
     */
    function freezeAccount(address account) public onlyOwner returns (bool) {
        _frozenAccounts[account] = true;
        return true;
    }

    /**
     * @dev Unfreezes the specified account, allowing it to transfer tokens.
     * @param account Address of the account to unfreeze
     * @return True if successful
     */
    function unfreezeAccount(address account) public onlyOwner returns (bool) {
        _frozenAccounts[account] = false;
        return true;
    }

    /**
     * @dev Checks if the specified account is frozen.
     * @param account Address of the account to check
     * @return True if the account is frozen, false otherwise
     */
    function isFrozen(address account) public view returns (bool) {
        return _frozenAccounts[account];
    }

    /**
     * @dev Internal function that transfers tokens from the specified sender to the specified recipient.
     * @param sender Address of the sender
     * @param recipient Address of the recipient
     * @param amount Amount of tokens to transfer
     */
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Cannot transfer from the zero address.");
        require(recipient != address(0), "Cannot transfer to the zero address.");
        require(amount > 0, "Amount must be greater than zero.");
        require(_balances[sender] >= amount, "Insufficient balance.");

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /**
     * @dev Internal function that approves the specified spender to spend the specified amount on behalf of the owner.
     * @param owner Address of the owner
     * @param spender Address of the spender
     * @param amount Amount to approve
     */
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Cannot approve from the zero address.");
        require(spender != address(0), "Cannot approve to the zero address.");
        require(_balances[owner] >= amount, "Insufficient balance.");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Internal function that mints new tokens and gives them to the specified recipient.
     * @param recipient Address of the recipient
     * @param amount Amount of tokens to mint
     */
    function _mint(address recipient, uint256 amount) internal {
        require(recipient != address(0), "Cannot mint to the zero address.");
        require(amount > 0, "Amount must be greater than zero.");

        _totalSupply = _totalSupply.add(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(address(0), recipient, amount);
    }

    /**
     * @dev Internal function that burns tokens from the specified account.
     * @param account Address of the account to burn from
     * @param amount Amount of tokens to burn
     */
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "Cannot burn from the zero address.");
        require(amount > 0, "Amount must be greater than zero.");
        require(_balances[account] >= amount, "Insufficient balance.");

        _totalSupply = _totalSupply.sub(amount);
        _balances[account] = _balances[account].sub(amount);
        emit Transfer(account, address(0), amount);
    }
}