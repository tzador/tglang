pragma solidity >=0.4.22 <0.8.0; //set the compiler version

contract ExampleContract { //create a contract called ExampleContract
    //state variables
    uint private variable1; //unsigned integer variable that can only be accessed within the contract
    address public variable2; //public variable that can be accessed by anyone
    
    //events
    event VariableChanged(uint newValue); //event that will be triggered when variable1 is changed
    
    //constructor
    constructor(uint initialValue, address initialAddress) public { //set the initial values for the state variables
        variable1 = initialValue;
        variable2 = initialAddress;
    }
    
    //modifiers
    modifier onlyOwner { //modifier that restricts a function to only be called by the contract owner
        require(msg.sender == variable2, "Only the contract owner can call this function");
        _;
    }
    
    //functions
    function setVariable1(uint newValue) public onlyOwner { //function for changing the value of variable1
        variable1 = newValue;
        emit VariableChanged(newValue); //trigger the VariableChanged event
    }
    
    function getVariable1() public view returns (uint) { //function for getting the value of variable1
        return variable1;
    }
}