pragma solidity >=0.6.0 <0.8.0;

contract MyContract {
    
    // Solidity supports multiple inheritance with the "is" keyword
    // This contract inherits from two other contracts
    // Each contract must be defined and imported separately
    // This allows for code reuse and organization
    
    // Define a contract called Ownable
    // This contract stores the address of the contract owner
    contract Ownable {
        address public owner;
        
        constructor() {
            // The constructor sets the contract owner as the address that deployed the contract
            // In this case, "msg.sender" refers to the address that deployed the contract
            owner = msg.sender;
        }
        
        // Modifier function to restrict functions to the contract owner
        // The underscore "_" indicates where the modified function's code will be inserted
        modifier onlyOwner() {
            require(msg.sender == owner, "You are not the contract owner.");
            _;
        }
        
        // Function to transfer ownership of the contract to a new address
        // This function can only be called by the contract owner, as indicated by the "onlyOwner" modifier
        function transferOwnership(address newOwner) public onlyOwner {
            owner = newOwner;
        }
    }
    
    // Define another contract called Pausable
    // This contract allows for functions to be paused in case of emergency
    contract Pausable {
        bool public paused;
        
        constructor() {
            paused = false;
        }
        
        // Modifier function to restrict functions when the contract is paused
        modifier whenNotPaused() {
            require(!paused, "This function cannot be called while the contract is paused.");
            _;
        }
        
        // Modifier function to restrict functions when the contract is not paused
        modifier whenPaused() {
            require(paused, "This function can only be called when the contract is paused.");
            _;
        }
        
        // Function to pause the contract
        // This function can only be called by the contract owner, as indicated by the "onlyOwner" modifier
        function pause() public onlyOwner whenNotPaused {
            paused = true;
        }
        
        // Function to unpause the contract
        // This function can only be called by the contract owner, as indicated by the "onlyOwner" modifier
        function unpause() public onlyOwner whenPaused {
            paused = false;
        }
    }
    
    // The MyContract contract inherits from both the Ownable and Pausable contracts
    contract MyContract is Ownable, Pausable {
        
        // Variables declared public are accessible outside of the contract
        // This can be useful for viewing or setting values on the blockchain
        bool public active;
        
        // Define a variable that maps addresses to a numeric value
        mapping(address => uint) public balances;
        
        // Events can be used to log important information for off-chain analysis
        event BalanceUpdated(address sender, uint newBalance);
        
        constructor() {
            active = true;
        }
        
        // Functions can take multiple arguments and return multiple values
        // In this function, we are updating the balance of a specific address and returning the new balance
        function updateBalance(address user, uint amount) public whenNotPaused returns(uint) {
            // Check if the contract is active
            require(active, "Contract is not currently active.");
            
            // Update the balance for the specified address
            balances[user] += amount;
            
            // Log the updated balance
            emit BalanceUpdated(user, balances[user]);
            
            // Return the updated balance
            return balances[user];
        }
    }
}