pragma solidity ^0.8.0; // This defines the version of Solidity being used.

interface Calculator {
    function add(uint256 a, uint256 b) external view returns (uint256); // This defines the function called "add" and its return type.
    function subtract(uint256 a, uint256 b) external view returns (uint256); // This defines the function called "subtract" and its return type.
}

contract AdvancedCalculator is Calculator {
    uint256 public savedValue; // This defines the state variable "savedValue".

    function add(uint256 a, uint256 b) external override view returns (uint256) {
        savedValue = a + b; // This updates savedValue with the result of the addition.
        return savedValue; // This returns the savedValue.
    }

    function subtract(uint256 a, uint256 b) external override view returns (uint256) {
        savedValue = a - b; // This updates savedValue with the result of the subtraction.
        return savedValue; // This returns the savedValue.
    }
}

contract MyContract {
    address public calculatorAddress; // This defines the state variable "calculatorAddress".

    function deployCalculator() public {
        calculatorAddress = address(new AdvancedCalculator()); // This deploys a new instance of the AdvancedCalculator contract and assigns its address to calculatorAddress.
    }

    function useCalculator(uint256 a, uint256 b, string memory operation) public view returns (uint256 result) {
        Calculator calculator = Calculator(calculatorAddress); // This creates a new instance of the Calculator interface using the calculatorAddress.
        if (keccak256(abi.encodePacked(operation)) == keccak256(abi.encodePacked("add"))) {
            result = calculator.add(a, b); // This calls the add function on the deployed calculator contract.
        } else if (keccak256(abi.encodePacked(operation)) == keccak256(abi.encodePacked("subtract"))) {
            result = calculator.subtract(a, b); // This calls the subtract function on the deployed calculator contract.
        }
    }
}