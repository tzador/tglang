//Defines a contract with the name 'Token'
contract Token {
    //Declares a mapping with key type address and value type uint called 'balances'
    mapping (address => uint) balances;
    //Declares a mapping with key type address and value type mapping of address and uint called 'allowances'
    mapping (address => mapping (address => uint)) allowances;
    //Declares the state variable 'owner' with type address
    address owner;
    //Declares the state variable 'totalSupply' with type uint
    uint totalSupply;

    //Defines an event that emits the transfer of tokens
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    //Defines an event that emits the approval of another address to spend tokens
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    //The 'constructor' function runs once when the contract is deployed and initializes the owner and totalSupply variables
    constructor() public {
        //Sets the owner to the address that deployed the contract
        owner = msg.sender;
        //Sets the totalSupply to 10000
        totalSupply = 10000;
        //Sets the balance of the owner to the totalSupply
        balances[owner] = totalSupply;
    }

    //Allows the msg.sender to transfer tokens to another address
    //Takes in the address to send tokens to and the amount to send
    function transfer(address _to, uint256 _value) public returns (bool) {
        //Requires that the balance of the msg.sender is greater than or equal to the amount being sent
        require(balances[msg.sender] >= _value);
        //Subtracts the amount being sent from the balance of the msg.sender
        balances[msg.sender] -= _value;
        //Adds the amount being sent to the balance of the recipient
        balances[_to] += _value;
        //Emits the Transfer event
        emit Transfer(msg.sender, _to, _value);
        //Returns true to indicate a successful transfer
        return true;
    }

    //Allows the msg.sender to allow another address to spend their tokens
    //Takes in the address to approve and the amount to approve
    function approve(address _spender, uint256 _value) public returns (bool) {
        //Sets the allowance for the msg.sender's address to the _spender's address
        allowances[msg.sender][_spender] = _value;
        //Emits the Approval event
        emit Approval(msg.sender, _spender, _value);
        //Returns true to indicate a successful approval
        return true;
    }

    //Allows the _spender to transfer tokens from the msg.sender's address to another address
    //Takes in the address to send tokens to, the amount to send, and the sender's address
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        //Requires that the balance of the _from address is greater than or equal to the amount being sent
        require(balances[_from] >= _value);
        //Requires that the allowance for the _from address to the msg.sender's address is greater than or equal to the amount being sent
        require(allowances[_from][msg.sender] >= _value);
        //Subtracts the amount being sent from the _from address
        balances[_from] -= _value;
        //Adds the amount being sent to the _to address
        balances[_to] += _value;
        //Subtracts the amount being sent from the allowance of the _from address to the msg.sender's address
        allowances[_from][msg.sender] -= _value;
        //Emits the Transfer event
        emit Transfer(_from, _to, _value);
        //Returns true to indicate a successful transfer
        return true;
    }
}