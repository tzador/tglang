pragma solidity ^0.8.0;

// This contract implements a basic bank with functionality for depositing and withdrawing funds.

contract Bank {
    uint balance; // State variable to track the balance of the bank
    
    address owner; // State variable to track the owner of the bank
    
    mapping(address => uint) balances; // Mapping to track the balances of different accounts

    // Constructor function to set the owner of the bank
    constructor() {
        owner = msg.sender;
    }

    // Function to deposit funds into the bank
    function deposit() public payable {
        balances[msg.sender] += msg.value;
        balance += msg.value;
    }

    // Function to withdraw funds from the bank
    function withdraw(uint amount) public {
        require(balances[msg.sender] >= amount); // Check if the account has sufficient balance

        balances[msg.sender] -= amount;
        balance -= amount;

        payable(msg.sender).transfer(amount); // Transfer the funds to the account
    }

    // Function to check the balance of the bank
    function getBalance() public view returns (uint) {
        return balance;
    }

    // Function to transfer funds from one account to another
    function transfer(address recipient, uint amount) public {
        require(balances[msg.sender] >= amount); // Check if the sender has sufficient balance

        balances[msg.sender] -= amount; // Deduct the amount from the sender's balance
        balances[recipient] += amount; // Add the amount to the recipient's balance
    }

    // Modifier to restrict access to certain functions only to the owner of the bank
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }
}