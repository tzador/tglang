// This contract represents a decentralized voting system using Ethereum blockchain

// Declaration of contract
contract VotingSystem {
    mapping(address => uint256) public votes; // mapping to store votes by user address
    address[] public candidates; // array to store candidate addresses

    // Event triggered when a new vote is cast
    event Vote(address indexed candidate);

    // Modifier to validate if sender has already voted
    modifier hasNotVoted() {
        require(votes[msg.sender] == 0, "Already voted.");
        _;
    }

    // Function to create a new candidate
    function createCandidate(address candidate) public {
        candidates.push(candidate);
    }

    // Function to cast vote for a candidate
    function castVote(address candidate) public hasNotVoted() {
        require(isCandidate(candidate), "Not a valid candidate.");
        votes[msg.sender] = candidate;
        emit Vote(candidate); // trigger Vote event
    }

    // Function to check if address is a candidate
    function isCandidate(address addr) private view returns (bool) {
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i] == addr) {
                return true;
            }
        }
        return false;
    }

    // Function to get total votes for a candidate
    function getTotalVotes(address addr) public view returns (uint) {
        require(isCandidate(addr), "Not a valid candidate.");
        uint totalVotes = 0;
        for (uint i = 0; i < candidates.length; i++) {
            if (votes[candidates[i]] == addr) {
                totalVotes++;
            }
        }
        return totalVotes;
    }
}