uint constant maxSupply = 1000000; // declare unsigned integer constant
    address owner; // declare address variable

    struct Token { // declare Token struct
        string name; // declare name property as string
        uint supply; // declare supply property as unsigned integer
    }

    Token[] public tokens; // declare dynamic array of Token structs, publicly accessible

    function createToken(string memory _name, uint _supply) public { // declare public function to create Token
        require(msg.sender == owner); // require function caller to be the owner
        require(tokens.length < maxSupply); // require tokens array to be less than maxSupply
        Token memory newToken = Token(_name, _supply); // declare newToken variable of type Token and assign name and supply
        tokens.push(newToken); // add newToken to tokens array
    }

    function buyToken(uint _index) public payable { // declare public function to buy Token
        require(_index < tokens.length); // require _index to be within bounds of tokens array
        require(tokens[_index].supply > 0); // require Token supply to be greater than 0
        require(msg.value == 1 ether); // require msg value to be equal to 1 ether
        owner.transfer(msg.value); // transfer the msg value to the owner
        tokens[_index].supply--; // decrease supply of Token at _index by 1
        msg.sender.transfer(1 ether); // send 1 ether to the function caller
    }

    function transferToken(uint _index, address _to) public { // declare public function to transfer Token
        require(_index < tokens.length); // require _index to be within bounds of tokens array
        require(tokens[_index].supply > 0); // require Token supply to be greater than 0
        tokens[_index].supply--; // decrease supply of Token at _index by 1
        _to.transfer(1 ether); // transfer 1 ether to _to address
    }