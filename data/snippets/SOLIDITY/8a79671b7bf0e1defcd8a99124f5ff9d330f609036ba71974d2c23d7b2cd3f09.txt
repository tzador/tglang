pragma solidity >=0.5.0 <0.7.0;

// Define a contract
contract MyContract {
    // State variables
    address public owner;
    uint256 public totalSupply;
    string public name;
    mapping (address => uint256) private balances;

    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    // Constructor
    constructor(string memory _name, uint256 _totalSupply) public {
        owner = msg.sender; // Set contract creator as owner
        totalSupply = _totalSupply; // Set initial supply
        name = _name; // Set name
        balances[msg.sender] = _totalSupply; // Give all initial supply to owner
    }

    // Functions
    // Transfer tokens from sender to recipient
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value, "Insufficient balance"); // Require enough tokens to transfer
        balances[msg.sender] -= _value; // Deduct tokens from sender
        balances[_to] += _value; // Add tokens to recipient
        emit Transfer(msg.sender, _to, _value); // Emit transfer event
        return true;
    }

    // Get balance of an address
    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner]; // Return balance of the specified address
    }
}