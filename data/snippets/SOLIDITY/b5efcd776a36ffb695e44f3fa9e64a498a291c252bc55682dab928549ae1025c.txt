/**
 * @dev A simple contract that allows for the creation and manipulation of string arrays
 */
 
contract StringArray {
    
    // State variables
    string[] private stringArray;
    uint public count;
    
    // Constructor
    constructor() public {
        
    }
    
    // Function to add a string to the array
    function addString(string memory str) public {
        stringArray.push(str);
        count++;
    }
    
    // Function to remove a string from the array
    function removeString(string memory str) public {
        // Loop through the array and find the index of the string
        for(uint i = 0; i < stringArray.length; i++) {
            if(keccak256(bytes(stringArray[i])) == keccak256(bytes(str))) {
                // Once found, remove the string and decrease the count
                stringArray[i] = stringArray[stringArray.length - 1];
                stringArray.pop();
                count--;
            }
        }
    }
    
    // Function to check if a string exists in the array
    function stringExists(string memory str) public view returns (bool) {
        // Loop through the array and compare the string to each element
        for(uint i = 0; i < stringArray.length; i++) {
            if(keccak256(bytes(stringArray[i])) == keccak256(bytes(str))) {
                // If a match is found, return true
                return true;
            }
        }
        // If no match is found, return false
        return false;
    }
    
    // Function to return the array
    function getStringArray() public view returns (string[] memory) {
        return stringArray;
    }
}