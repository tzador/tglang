pragma solidity >=0.4.0 <0.6.0; // Specifying the Solidity version

//Defining a contract named 'Crowdfunding'
contract Crowdfunding {

    //Using SafeMath library to prevent integer overflow/underflow vulnerabilities
    using SafeMath for uint256;

    //Defining a mapping to keep track of funds contributed by each address
    mapping(address => uint256) public fundsContributed;

    //Defining an event to emit when funds are contributed
    event FundsContributed(address indexed contributor, uint256 amount);

    //Defining a function to receive funds from contributors
    function contribute() public payable {
        require(msg.value > 0, "Must contribute a positive amount"); //Ensuring a positive contribution

        fundsContributed[msg.sender] = fundsContributed[msg.sender].add(msg.value); //Updating funds contributed by the caller

        emit FundsContributed(msg.sender, msg.value); //Emitting the FundsContributed event
    }

    //Defining a function to withdraw funds from the contract
    function withdrawFunds(uint256 amount) public {
        require(amount > 0, "Amount must be positive"); //Ensuring a positive withdrawal amount
        require(fundsContributed[msg.sender] >= amount, "Insufficient funds"); //Ensuring the caller has enough funds contributed

        msg.sender.transfer(amount); //Transferring the requested amount to the caller's address

        fundsContributed[msg.sender] = fundsContributed[msg.sender].sub(amount); //Updating funds contributed by the caller
    }
}

//Defining a library to safely perform arithmetic operations
library SafeMath {

    //Defining a function to add two numbers without risking integer overflow
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "Integer overflow detected"); //Ensuring no overflow occurred
        return c;
    }

    //Defining a function to subtract two numbers without risking integer underflow
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "Integer underflow detected"); //Ensuring no underflow occurred
        uint256 c = a - b;
        return c;
    }
}