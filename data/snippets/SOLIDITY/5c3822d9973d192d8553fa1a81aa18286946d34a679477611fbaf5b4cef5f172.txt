// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract MyContract {
  // State Variables
  address public owner;
  mapping(address => uint) public balances;
  
  // Events
  event Deposit(address depositor, uint amount);
  event Withdraw(address withdrawer, uint amount);
  
  // Constructor
  constructor() {
    owner = msg.sender;
  }
  
  // Modifiers
  modifier onlyOwner() {
    require(msg.sender == owner, "Only owner can call this function");
    _;
  }
  
  // Functions
  function deposit() public payable {
    require(msg.value > 0, "Amount must be greater than zero");
    
    balances[msg.sender] += msg.value;
    emit Deposit(msg.sender, msg.value);
  }
  
  function withdraw(uint _amount) public {
    require(balances[msg.sender] >= _amount, "Insufficient balance");
    
    balances[msg.sender] -= _amount;
    payable(msg.sender).transfer(_amount);
    emit Withdraw(msg.sender, _amount);
  }
  
  function changeOwner(address _newOwner) public onlyOwner {
    require(_newOwner != address(0), "New owner must be a valid address");
    
    owner = _newOwner;
  }
  
  // Fallback and Receive Functions
  receive() external payable {
    deposit();
  }
  
  fallback() external payable {
    revert("Invalid function called");
  }
  
  // Pure and View Functions
  function divide(uint _numerator, uint _denominator) public pure returns (uint) {
    require(_denominator > 0, "Denominator cannot be zero");
    
    return _numerator / _denominator;
  }
  
  function getBalance(address _address) public view returns (uint) {
    return balances[_address];
  }
  
  function checkIfEven(uint _number) public pure returns (bool) {
    return _number % 2 == 0;
  }
}