pragma solidity ^0.8.0; //Sets the version of solidity

contract MyContract { //Declares a contract named MyContract
	
	address private owner; //Declares a private variable named owner of type address
	
	constructor() { //Constructor function
		owner = msg.sender; //Sets the value of owner to the address of the contract creator
	}

	modifier onlyOwner() { //Declares a modifier named onlyOwner
		require(msg.sender == owner, "You are not the owner of this contract"); //Verifies that the sender is the contract owner
		_; //Placeholder for the function body that the modifier will modify
	}

	function changeOwner(address newOwner) public onlyOwner { //Function to change the owner of the contract
		owner = newOwner; //Sets the new owner
	}

	function withdraw(address recipient, uint amount) external onlyOwner { //Function to withdraw funds from the contract
		require(address(this).balance > amount, "Insufficient balance"); //Checks if there are enough funds in the contract
		payable(recipient).transfer(amount); //Transfers the specified amount of ether to the recipient
	}

	function destroyContract() public onlyOwner { //Function to destruct the contract and transfer remaining funds to the owner
		selfdestruct(payable(owner)); //Transfers all remaining funds to the owner and destroys the contract
	}
}