pragma solidity ^0.8.4; // Solidity version pragma

// Importing libraries
import "node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol"; // Importing ERC721 token contracts from OpenZeppelin
import "node_modules/@openzeppelin/contracts/access/Ownable.sol"; // Importing ownable contracts from OpenZeppelin

// Defining contract
contract MyNFTContract is ERC721, Ownable {
	// Defining variables
	string public name; // Name of the token
	string public symbol; // Symbol of the token

	// Mapping for token IDs
	mapping(uint256 => string) private _tokenURIs; // Mapping to store the token IDs and their corresponding metadata URIs

	// Defining events
	event TokenMinted(address indexed owner, uint256 indexed tokenId); // Event to track the minting of tokens
	event TokenBurnt(uint256 indexed tokenId); // Event to track the burning of tokens

	// Constructor function
	constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {
		name = _name; // Setting the name of the token
		symbol = _symbol; // Setting the symbol of the token
	}

	// Function to mint a token
	function mint(string memory _tokenURI) public onlyOwner {
		uint256 tokenId = totalSupply() + 1; // Calculating the next token ID
		_tokenURIs[tokenId] = _tokenURI; // Storing the token ID and its metadata URI in the mapping
		_mint(msg.sender, tokenId); // Minting the token and assigning it to the contract owner
		emit TokenMinted(msg.sender, tokenId); // Emitting the TokenMinted event
	}

	// Function to burn a token
	function burn(uint256 _tokenId) public {
		require(_isApprovedOrOwner(msg.sender, _tokenId), "Caller is not approved or owner of token"); // Checking if the caller has the necessary permissions to burn the token
		_burn(_tokenId); // Burning the token
		emit TokenBurnt(_tokenId); // Emitting the TokenBurnt event
	}

	// Function to update the metadata URI of a token
	function setTokenURI(uint256 _tokenId, string memory _tokenURI) public onlyOwner {
		require(_exists(_tokenId), "Token does not exist"); // Checking if the token exists
		_tokenURIs[_tokenId] = _tokenURI; // Updating the metadata URI in the mapping
	}

	// Function to get the metadata URI of a token
	function tokenURI(uint256 _tokenId) public view returns (string memory) {
		require(_exists(_tokenId), "Token does not exist"); // Checking if the token exists
		return _tokenURIs[_tokenId]; // Returning the metadata URI from the mapping
	}
}