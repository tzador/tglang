// Example contract showing use of Solidity's inheritance feature
pragma solidity ^0.8.0; // Specifying Solidity version

// Parent contract
contract Vehicle {
    // State variables
    string internal _make; 
    string internal _model;
    uint internal _year;

    // Constructor
    constructor(string memory make, string memory model, uint year) {
        _make = make;
        _model = model;
        _year = year;
    }

    // Getters
    function getMake() public view returns (string memory) {
        return _make;
    }

    function getModel() public view returns (string memory) {
        return _model;
    }

    function getYear() public view returns (uint) {
        return _year;
    }
}

// Child contract, inheriting from Vehicle
contract Car is Vehicle {

    // State variables
    uint private _miles;

    // Constructor, utilizing parent constructor 
    constructor(string memory make, string memory model, uint year, uint miles) Vehicle(make, model, year) {
        _miles = miles;
    }

    // Getter
    function getMiles() public view returns (uint) {
        return _miles;
    }
}

// Child contract, inheriting from Vehicle
contract Truck is Vehicle {

    // State variables
    uint private _loadCapacity;

    // Constructor, utilizing parent constructor
    constructor(string memory make, string memory model, uint year, uint loadCapacity) Vehicle(make, model, year) {
        _loadCapacity = loadCapacity;
    }

    // Getter
    function getLoadCapacity() public view returns (uint) {
        return _loadCapacity;
    }
}