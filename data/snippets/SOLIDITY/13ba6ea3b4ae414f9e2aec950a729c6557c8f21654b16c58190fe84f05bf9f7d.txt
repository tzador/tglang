pragma solidity ^0.8.0;

interface IERC20 {
	// Annotate this as a contract interface with pragma mark
	// ERC20 standard
    // pragma mark - ERC20 standard
    /**
     * @dev Returns the amount of tokens in existence.
     */
	function totalSupply() external view returns (uint256);
    
    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
	function balanceOf(address account) external view returns (uint256);
    
    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     */
	function transfer(address recipient, uint256 amount) external returns (bool);
    
    /**
     * @dev Returns the remaining number of tokens that `spender` will be allowed
     * to spend on behalf of `owner` through `transferFrom`. This is zero by default.
     * This value changes when `approve` or `transferFrom` are called.
     */
	function allowance(address owner, address spender) external view returns (uint256);
    
    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     */
	function approve(address spender, uint256 amount) external returns (bool);
    
    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's allowance.
     */
	function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    /**
     * @dev Emitted when `owner` allows `spender` to use `amount` of their tokens.
     */
	event Approval(address indexed owner, address indexed spender, uint256 amount);
    
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     */
	event Transfer(address indexed from, address indexed to, uint256 value);
}

/**
 * @dev Extension of {IERC20} that adds a cap to the supply of tokens.
 */
interface ICappedERC20 is IERC20 {
    // Annotate this as a contract interface with pragma mark
	// ERC20 cap
    //pragma mark -ERC20 cap
    /**
     * @dev Returns the cap on the token's total supply.
     */
	function cap() external view returns (uint256);
}

/**
 * @dev Standard implementation of ERC20.
 */
contract ERC20 is IERC20, ICappedERC20 {
    // Annotate this as a contract with pragma mark
    // pragma mark - ERC20
    
	mapping (address => uint256) private _balances;
	mapping (address => mapping (address => uint256)) private _allowances;
	uint256 private _totalSupply;
	uint256 private _cap;
    
	/**
     * @dev Sets the values for {name} and {symbol}.
     * The `constructor` should be payable if you want them to be payable.
     */
	constructor (string memory name, string memory symbol) {
		_name = name;
		_symbol = symbol;
	}
    
	/**
     * @dev Returns the name of the token.
     */
	function name() public view returns (string memory) {
		return _name;
	}
    
	/**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
	function symbol() public view returns (string memory) {
		return _symbol;
	}
    
	/**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * NOTE: This information is only used for display purposes: it in no way
     * affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
	function decimals() public pure returns (uint8) {
		return 18;
	}
    
	/**
     * @dev See {IERC20-totalSupply}.
     */
	function totalSupply() public view override returns (uint256) {
		return _totalSupply;
	}
    
	/**
     * @dev See {IERC20-balanceOf}.
     */
	function balanceOf(address account) public view override returns (uint256) {
		return _balances[account];
	}
    
	/**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
	function transfer(address recipient, uint256 amount) public override returns (bool) {
		_transfer(_msgSender(), recipient, amount);
		return true;
	}
    
	/**
     * @dev See {IERC20-allowance}.
     */
	function allowance(address owner, address spender) public view override returns (uint256) {
		return _allowances[owner][spender];
	}
    
	/**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
	function approve(address spender, uint256 amount) public override returns (bool) {
		_approve(_msgSender(), spender, amount);
		return true;
	}
    
	/**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
	function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
		_transfer(sender, recipient, amount);
		uint256 currentAllowance = _allowances[sender][_msgSender()];
		require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
		_approve(sender, _msgSender(), currentAllowance - amount);
		return true;
	}
    
	/**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
	function _approve(address owner, address spender, uint256 amount) internal {
		require(owner != address(0), "ERC20: approve from zero address");
		require(spender != address(0), "ERC20: approve to zero address");
        
		_allowances[owner][spender] = amount;
		emit Approval(owner, spender, amount);
	}
    
	/**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This internal function is equivalent to `transfer`, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     */
	function _transfer(address sender, address recipient, uint256 amount) internal {
		require(sender != address(0), "ERC20: transfer from zero address");
		require(recipient != address(0), "ERC20: transfer to zero address");
        
		_balances[sender] -= amount;
		_balances[recipient] += amount;
		emit Transfer(sender, recipient, amount);
	}
    
	/**
     * @dev See {ICappedERC20-capped}.
     */
	function cap() public view override returns (uint256) {
		return _cap;
	}
    
	/**
     * @dev See {ICappedERC20-mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     * - the token must not be capped.
     */
	function mint(address account, uint256 amount) public returns (bool) {
		_mint(account, amount);
		return true;
	}
    
	/**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `account` must have a balance of at least `amount`.
     */
	function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
		_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
		return true;
	}
    
	/**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least `subtractedValue`.
     * - `account` must have a balance of at least `subtractedValue`.
     */
	function decreaseAllowance(address spender, uint256 subtractedValue)
		public
		returns (bool)
	{
		uint256 currentAllowance = _allowances[_msgSender()][spender];
		require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
		_approve(_msgSender(), spender, currentAllowance - subtractedValue);
		return true;
	}
    
	/**
     * @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply by `amount`.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - if `amount` is not zero, `mint` cannot be paused.
     */
	function _mint(address account, uint256 amount) internal {
		require(account != address(0), "ERC20: mint to zero address");
		require(_cap >= _totalSupply + amount, "ERC20: cap exceeded");
        
		_totalSupply += amount;
		_balances[account] += amount;
		emit Transfer(address(0), account, amount);
	}
}