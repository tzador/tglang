/**
 * @title EscrowContract
 * @dev A smart contract that acts as an escrow for a transaction.
 */
contract EscrowContract {

    // Variables to keep track of parties involved in the transaction
    address public buyer;
    address public seller;
    address public arbiter;

    /**
     * @dev The constructor function sets the addresses for the buyer, seller, and arbiter.
     * @param _buyer The address of the buyer.
     * @param _seller The address of the seller.
     * @param _arbiter The address of the arbiter.
     */
    constructor(address _buyer, address _seller, address _arbiter) public {
        require(_buyer != address(0));
        require(_seller != address(0));
        require(_arbiter != address(0));

        buyer = _buyer;
        seller = _seller;
        arbiter = _arbiter;
    }

    /**
     * @dev Function to make a payment for the transaction.
     * @dev Only the buyer can call this function.
     */
    function makePayment() public payable {
        require(msg.sender == buyer);
        require(msg.value > 0);
    }

    /**
     * @dev Function to release funds to the seller once the transaction is complete.
     * @dev Only the buyer or arbiter can call this function.
     */
    function releaseFunds() public {
        require(msg.sender == buyer || msg.sender == arbiter);

        // Transfer funds to seller
        seller.transfer(address(this).balance);
    }

    /**
     * @dev Function to refund the buyer in case of a dispute.
     * @dev Only the arbiter can call this function.
     */
    function refund() public {
        require(msg.sender == arbiter);

        // Refund the buyer
        buyer.transfer(address(this).balance);
    }

    /**
     * @dev Function to get the balance of the contract.
     * @return The current balance of the contract.
     */
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}