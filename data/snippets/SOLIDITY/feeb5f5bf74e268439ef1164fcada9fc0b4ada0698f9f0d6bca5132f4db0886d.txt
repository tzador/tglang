pragma solidity >=0.4.22 <0.8.0; // Indicating the solidity version requirement

contract Escrow { // Defining a smart contract named Escrow
    address public buyer; // Defining a public variable 'buyer' with address data type
    address payable public seller; // Defining a public variable 'seller' with payable address data type
    address public arbiter; // Defining a public variable 'arbiter' with address data type
    uint public value; // Defining a public variable 'value' with uint data type
    bool public sellerApproved; // Defining a public variable 'sellerApproved' with bool data type
    bool public buyerApproved; // Defining a public variable 'buyerApproved' with bool data type

    constructor(address _buyer, address payable _seller, uint _value) public { // Defining a constructor function with three parameters
        buyer = _buyer; // Assigning the value of the given parameter to the 'buyer' variable
        seller = _seller; // Assigning the value of the given parameter to the 'seller' variable
        value = _value; // Assigning the value of the given parameter to the 'value' variable
    }

    function approveSeller() public { // Defining a public function named 'approveSeller'
        require(msg.sender == buyer || msg.sender == arbiter, "Only buyer or arbiter can approve seller"); // Checking if the sender is either the buyer or the arbiter
        sellerApproved = true; // Assigning the value true to the 'sellerApproved' variable
    }

    function approveBuyer() public { // Defining a public function named 'approveBuyer'
        require(msg.sender == seller || msg.sender == arbiter, "Only seller or arbiter can approve buyer"); // Checking if the sender is either the seller or the arbiter
        buyerApproved = true; // Assigning the value true to the 'buyerApproved' variable
    }

    function releasePayment() public { // Defining a public function named 'releasePayment'
        require(sellerApproved && buyerApproved, "Both parties must approve before releasing payment"); // Checking if both parties have approved
        seller.transfer(value); // Transferring the value to the seller
    }

    function refundPayment() public { // Defining a public function named 'refundPayment'
        require(!sellerApproved || !buyerApproved, "One party must not approve before refunding payment"); // Checking if one party has not approved
        require(msg.sender == seller || msg.sender == buyer, "Only buyer or seller can request refund"); // Checking if the sender is either the buyer or the seller
        if (sellerApproved) { // Checking if the seller has approved
            buyer.transfer(value); // Transferring the value to the buyer
        } else { // Executing if the seller has not approved
            seller.transfer(value); // Transferring the value to the seller
        }
    }

    function setArbiter(address _arbiter) public { // Defining a public function named 'setArbiter' with one parameter
        require(msg.sender == seller, "Only seller can set arbiter"); // Checking if the sender is the seller
        arbiter = _arbiter; // Assigning the value of the given parameter to the 'arbiter' variable
    }
}