pragma solidity ^0.8.0; //sets the Solidity version to be used
contract MyContract { //creates a new contract named MyContract
    uint public myVariable; //declares a public variable of type uint (unsigned integer)
    constructor(uint _myVariable) { //constructor function that takes in a parameter of type uint
        myVariable = _myVariable; //assigns the value of the parameter to the public variable
    }
    
    function setVariable(uint _newValue) public { //function to set the value of the public variable
        myVariable = _newValue; //sets the value of the public variable to the new value passed in
    }
    
    function getValue() public view returns (uint) { //function to get the value of the public variable
        return myVariable; //returns the value of the public variable
    }
    
    function increment() internal { //internal function to increment the value of the public variable
        myVariable++; //increments the value of the public variable by 1
    }
    
    function decrement() internal { //internal function to decrement the value of the public variable
        myVariable--; //decrements the value of the public variable by 1
    }
    
    modifier onlyOwner { //modifier that restricts access to functions only to the contract creator (owner)
        require(msg.sender == owner); //checks if the caller of the function is the contract owner
        _; //executes the rest of the code in the function
    }
    
    function updateValue(uint _newValue) public onlyOwner { //function to update the value of the public variable, only accessible by the contract owner
        myVariable = _newValue; //sets the value of the public variable to the new value passed in
    }
    
    address owner = msg.sender; //assigns the address of the contract creator as the owner of the contract
}