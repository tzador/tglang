// Contract to handle ownership and transfer of tokens
 contract TokenOwnership {
  // Variable to store the total supply of tokens
  uint totalSupply;
  // Mapping to keep track of token balance for each address
  mapping(address => uint) balances;
  // Mapping to keep track of token allowance for each address
  mapping(address => mapping(address => uint)) allowed;
  // Event to emit when a transfer of tokens is made
  event Transfer(address sender, address recipient, uint amount);
  // Event to emit when an approval for token transfer is made
  event Approval(address owner, address spender, uint amount);
  // Modifier to restrict certain functions to only the owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner, "Only the owner can call this function");
    _; // Placeholder for function code
  }
  
  // Initializes the contract with an initial supply of tokens
  constructor(uint initialSupply) public {
    totalSupply = initialSupply;
    balances[msg.sender] = initialSupply;
  }
  
  // Function to retrieve the total supply of tokens
  function getTotalSupply() public view returns (uint) {
    return totalSupply;
  }
  
  // Function to retrieve the token balance of a given address
  function getBalance(address account) public view returns (uint) {
    return balances[account];
  }
  
  // Function to retrieve the token allowance for a given address
  function getAllowance(address owner, address spender) public view returns (uint) {
    return allowed[owner][spender];
  }
  
  // Function to transfer tokens from msg.sender to a given recipient
  function transfer(address recipient, uint amount) public returns (bool) {
    require(balances[msg.sender] >= amount, "Insufficient balance");
    balances[msg.sender] -= amount;
    balances[recipient] += amount;
    emit Transfer(msg.sender, recipient, amount);
    return true;
  }
  
  // Function to approve a given spender to transfer a specified amount of tokens from msg.sender's account
  function approve(address spender, uint amount) public returns (bool) {
    allowed[msg.sender][spender] = amount;
    emit Approval(msg.sender, spender, amount);
    return true;
  }
  
  // Function to transfer tokens from one account to another, given the sender has enough allowance from the owner
  function transferFrom(address from, address to, uint amount) public returns (bool) {
    require(balances[from] >= amount, "Insufficient balance");
    require(allowed[from][msg.sender] >= amount, "Insufficient allowance");
    balances[from] -= amount;
    balances[to] += amount;
    allowed[from][msg.sender] -= amount;
    emit Transfer(from, to, amount);
    return true;
  }
  
  // Function to mint new tokens, restricted to only the owner of the contract
  function mint(address recipient, uint amount) public onlyOwner {
    totalSupply += amount;
    balances[recipient] += amount;
    emit Transfer(address(0), recipient, amount);
  }
  
  // Function to burn tokens, restricted to only the owner of the contract
  function burn(address account, uint amount) public onlyOwner {
    require(balances[account] >= amount, "Insufficient balance");
    totalSupply -= amount;
    balances[account] -= amount;
    emit Transfer(account, address(0), amount);
  }
 }