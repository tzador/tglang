pragma solidity ^0.8.0;
​
// Simple Greeter contract
contract Greeter {
    string private greeting; // private variable to store the greeting message
​
    // Constructor function
    constructor(string memory _greeting) {
        greeting = _greeting; // set the greeting message when contract is deployed
    }
    ​
    // Function to get the greeting message
    function getGreeting() public returns (string memory) {
        return greeting;
    }
    ​
    // Function to set a new greeting message
    function setGreeting(string memory _newGreeting) public {
        greeting = _newGreeting;
    }
    ​
    // Function to destroy the contract and send remaining funds to a specified address
    function destroy(address _recipient) public {
        selfdestruct(payable(_recipient));
    }
}
​
// Inheritance contract
contract Inheritance is Greeter {
    uint256 private number; // private variable to store a number
​
    // Constructor function that calls the parent constructor
    constructor(string memory _greeting, uint256 _number) Greeter(_greeting) {
        number = _number;
    }
    ​
    // Function to get the number
    function getNumber() public returns (uint256) {
        return number;
    }
    ​
    // Function to set a new number
    function setNumber(uint256 _newNumber) public {
        number = _newNumber;
    }
    ​
    // Function to call the parent function and add the number to the greeting
    function getGreetingAndNumber() public returns (string memory) {
        // call the parent function and concatenate the number to the end of the greeting
        return string(abi.encodePacked(super.getGreeting(), " ", number.toString()));
    }
}