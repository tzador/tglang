contract MyContract {
    //state variables
    uint public myUint;
    address public owner;
    
    //event
    event NewUint(uint newValue);
    
    //constructor
    constructor() public {
        myUint = 10;
        owner = msg.sender;
    }
    
    //functions
    function setUint(uint _newUint) public {
        require(msg.sender == owner); //only the owner can set the value
        myUint = _newUint;
        emit NewUint(myUint);
    }
    
    //fallback function
    function() external payable {
        revert();
    }
    
    //function modifiers
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    //view function
    function getOwner() public view returns(address) {
        return owner;
    }
    
    //pure function
    function addToUint(uint _num1, uint _num2) public pure returns(uint) {
        return _num1 + _num2;
    }
    
    //payable function
    function payEther() public payable {
        require(msg.value > 0); //must send some Ether
    }
    
    //struct
    struct Person {
        string name;
        uint age;
    }
    
    //mapping
    mapping(address => Person) public people;
    
    //array
    Person[] public personArray;
    
    //function to add new person to mapping and array
    function addPerson(string _name, uint _age) public {
        //create a new Person struct
        Person memory newPerson = Person(_name, _age);
        
        //add person to mapping
        people[msg.sender] = newPerson;
        
        //add person to array
        personArray.push(newPerson);
    }
    
    //internal function
    function _internalFunction() public pure returns (string) {
        return "This is an internal function";
    }
}