// Contract to create and manage a decentralized marketplace for digital assets
pragma solidity ^0.8.0; // Specifies the version of Solidity used for the contract

contract Marketplace {
    // Variables:
    address public owner; // Stores the address of the contract owner
    uint public assetCount; // Stores the total number of assets listed on the marketplace

    // Struct to represent an asset
    struct Asset {
        uint id; // Unique ID of the asset
        string name; // Name of the asset
        string description; // Description of the asset
        address payable owner; // Address of the current owner of the asset
        uint price; // Price of the asset
        bool isSold; // Flag to indicate if the asset has been sold
    }

    // Events:
    event AssetCreated(uint id, string name, string description, address owner, uint price); // Event triggered when a new asset is listed on the marketplace
    event AssetPurchased(uint id, string name, address buyer, uint price); // Event triggered when an asset is purchased

    // Mapping to store the assets
    mapping(uint => Asset) public assets;

    // Constructor function to set the contract owner
    constructor() {
        owner = msg.sender; // Sets the contract owner to the address that deployed the contract
    }

    // Function to add a new asset to the marketplace
    function addAsset(string memory _name, string memory _description, uint _price) public {
        require(msg.sender == owner, "Only the contract owner can add assets");
        assetCount++; // Increments the asset count
        assets[assetCount] = Asset(assetCount, _name, _description, payable(msg.sender), _price, false); // Creates a new asset and adds it to the assets mapping
        emit AssetCreated(assetCount, _name, _description, msg.sender, _price); // Emits the AssetCreated event
    }

    // Function to purchase an asset
    function purchaseAsset(uint _id) public payable {
        require(assets[_id].isSold == false, "Asset has already been sold");
        require(msg.value == assets[_id].price, "Incorrect amount sent");

        assets[_id].owner.transfer(msg.value); // Sends the payment to the asset owner
        assets[_id].isSold = true; // Updates the isSold flag to indicate the asset has been sold

        emit AssetPurchased(_id, assets[_id].name, msg.sender, msg.value); // Emits the AssetPurchased event
    }

}