pragma solidity ^0.8.0; //specify the version of Solidity to be used

//importing OpenZeppelin's ERC721 contract which implements the ERC721 interface
import "@openzeppelin/contracts/token/ERC721/ERC721.sol"; 

//creating a contract named "MyToken" which inherits from ERC721 contract
contract MyToken is ERC721 { 

    string private _name; //a private variable to hold the name of the token
    mapping(uint256 => string) private _tokenURIs; //a mapping to hold a link to metadata for each token

    //event to be emitted when a new token is minted
    event NewTokenMinted(address indexed owner, uint256 indexed tokenId, string tokenURI);

    //constructor function to initialize the name and symbol of the token
    constructor(string memory name, string memory symbol) ERC721(name, symbol) {
        _name = name;
    }

    //function to mint a new token, takes in the token owner address and the token ID
    function mintToken(address owner, uint256 tokenId) public {
        //use the _mint function from ERC721 to mint the new token
        _mint(owner, tokenId);

        //use the _setTokenURI function to set the token's metadata URI
        _setTokenURI(tokenId, "https://mytoken.com/mytoken-metadata.json");

        //emit the "NewTokenMinted" event with the relevant data
        emit NewTokenMinted(owner, tokenId, "https://mytoken.com/mytoken-metadata.json");
    }

    //function to get the name of the token
    function name() public view returns (string memory) {
        return _name;
    }

    //function to get the URI of a specific token
    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        return _tokenURIs[tokenId];
    }

    //function to set the URI of a specific token
    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {
        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
        _tokenURIs[tokenId] = tokenURI;
    }

    //function to check if a token with the given ID exists
    function _exists(uint256 tokenId) internal view returns (bool) {
        return _tokenOwners[tokenId] != address(0);
    }

    //other functions and logic for the MyToken contract can be added here

}