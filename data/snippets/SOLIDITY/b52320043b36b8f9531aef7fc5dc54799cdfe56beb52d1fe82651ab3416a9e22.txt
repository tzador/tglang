pragma solidity ^0.8.0;

// Definition of a contract
contract ExampleContract {
    // State variables
    address public owner;
    uint public amount;
    string public greeting;

    // Events to log changes
    event OwnerChanged(address indexed previousOwner, address indexed newOwner);
    event AmountChanged(uint indexed previousAmount, uint indexed newAmount);
    event GreetingChanged(string indexed previousGreeting, string indexed newGreeting);

    // Constructor function
    constructor() {
        owner = msg.sender;
        amount = 0;
        greeting = "Hello World!";
    }

    // Modifiers to validate conditions
    modifier onlyOwner {
        require(msg.sender == owner, "Only the owner can perform this action.");
        _;
    }

    modifier hasEnoughFunds(uint _amount) {
        require(_amount <= amount, "Insufficient funds to perform this action.");
        _;
    }

    modifier hasValidGreeting(string memory _greeting) {
        require(bytes(_greeting).length <= 20, "Greeting cannot exceed 20 characters.");
        _;
    }

    // Functions to allow changes to state variables
    function changeOwner(address _newOwner) public onlyOwner {
        emit OwnerChanged(owner, _newOwner);
        owner = _newOwner;
    }

    function addFunds(uint _amount) public onlyOwner {
        amount += _amount;
        emit AmountChanged(amount - _amount, amount);
    }

    function setGreeting(string memory _greeting) public onlyOwner hasValidGreeting(_greeting) {
        emit GreetingChanged(greeting, _greeting);
        greeting = _greeting;
    }

    // Function to withdraw funds
    function withdraw(uint _amount) public hasEnoughFunds(_amount) {
        amount -= _amount;
        payable(msg.sender).transfer(_amount);
        emit AmountChanged(amount + _amount, amount);
    }
}