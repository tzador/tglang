pragma solidity ^0.8.0; //Set the minimum required version for the code

contract MyContract { //Define a contract
  uint256 private myVariable; //Declare a private unsigned integer variable
  
  event ValueChanged(uint256 newValue); //Define an event to emit when variable is changed
  
  constructor(uint256 initialValue) { //Constructor for initializing the variable
    myVariable = initialValue;
  }
  
  function getVariable() public view returns (uint256) { //Function to get the value of the variable
    return myVariable;
  }
  
  function setVariable(uint256 newValue) public { //Function to set the value of the variable
    myVariable = newValue;
    emit ValueChanged(newValue); //Emit the event with the new value
  }
  
  function addValue(uint256 valueToAdd) public { //Function to add a given value to the variable
    myVariable += valueToAdd;
    emit ValueChanged(myVariable); //Emit the event with the updated value
  }
  
  function subValue(uint256 valueToSub) public { //Function to subtract a given value from the variable
    require(valueToSub <= myVariable, "Value to subtract exceeds current value"); //Require the value to be subtracted to be less than or equal to the current value
    myVariable -= valueToSub;
    emit ValueChanged(myVariable); //Emit the event with the updated value
  }
}