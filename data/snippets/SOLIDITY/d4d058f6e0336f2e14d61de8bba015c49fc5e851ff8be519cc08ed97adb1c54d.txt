contract ExampleContract {
    /* Declare variables */

    // Public variables - automatically getters will be generated
    address public owner;
    uint256 minDeposit;

    // Private variables - access restricted to inside this contract only
    address private creator;
    
    // Protected variables - access restricted to this contract and contracts that inherit from it
    uint256 protectedValue;

    // Internal variables - access restricted to this contract and contracts that inherit from it,
    // as well as contracts that are in the same solidity source file
    uint256 internalValue;

    // Constant variable - value cannot be changed
    uint256 constant publicConstant = 100;

    // Array variable
    uint256[] public variableArray;

    // Struct variable
    struct Person {
        string name;
        uint age;
        uint height;
        bool hasPets;
    }

    // Enum variable
    enum Seasons { Spring, Summer, Fall, Winter }

    // Event - can be emitted from the contract to log events
    event NewDeposit(address indexed _from, uint256 _amount);

    // Function modifiers - code that is run before or after a function is called
    modifier onlyOwner {
        require(msg.sender == owner);
        _; // Continue execution
    }

    // Constructor - code that is run once when the contract is deployed
    constructor(uint256 _minDeposit) public {
        creator = msg.sender;
        owner = msg.sender;
        minDeposit = _minDeposit;
    }

    // View function - can only view data, cannot modify state variables
    function getMinDeposit() public view returns (uint256) {
        return minDeposit;
    }

    // Pure function - cannot access state variables, only operates on input parameters and returns a result
    function add(uint256 _a, uint256 _b) public pure returns (uint256) {
        return _a + _b;
    }

    // Payable function - can receive ether along with the function call
    function deposit() public payable {
        require(msg.value >= minDeposit);
        emit NewDeposit(msg.sender, msg.value);
    }

    // Fallback function - called when no other function matches the function call, also receives ether
    function() external payable {}

    // Function with multiple conditions in require statement
    function transferOwnership(address _newOwner) public onlyOwner {
        require(msg.sender == owner || msg.sender == creator);
        require(_newOwner != address(0));
        owner = _newOwner;
    }

    // Function that accepts array as input
    function addValues(uint256[] memory _numbers) public view returns (uint256) {
        uint256 sum = 0;
        for (uint256 i = 0; i < _numbers.length; i++) {
            sum += _numbers[i];
        }
        return sum;
    }
}