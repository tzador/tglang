/// @title ERC20Token
/// @notice Represents an ERC20 token with a fixed supply
/// @dev This contract follows the standard ERC20 token interface and implements basic token functionality
contract ERC20Token {

    // Variables
    string private _name; // name of the token
    string private _symbol; // symbol of the token
    uint256 private _totalSupply; // total supply of the token
    mapping(address => uint256) private _balances; // mapping of account addresses to their respective balances
    mapping(address => mapping(address => uint256)) private _allowances; // mapping of account addresses to another address and their respective allowances
    
    // Events
    event Transfer(address indexed from, address indexed to, uint256 value); // event to track transfers
    event Approval(address indexed owner, address indexed spender, uint256 value); // event to track approvals

    // Constructor
    constructor(string memory name, string memory symbol, uint256 initialSupply) public {
        _name = name;
        _symbol = symbol;
        _totalSupply = initialSupply;
        _balances[msg.sender] = initialSupply;
    }
    
    // Functions
    
    /// @notice Returns the name of the token
    /// @return _name The name of the token
    function name() public view returns (string memory) {
        return _name;
    }
    
    /// @notice Returns the symbol of the token
    /// @return _symbol The symbol of the token
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    
    /// @notice Returns the total supply of the token
    /// @return _totalSupply The total supply of the token
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    
    /// @notice Returns the balance of the specified account
    /// @param account The account to retrieve the balance from
    /// @return balance The balance of the specified account
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }
    
    /// @notice Returns the allowance for the specified owner and spender
    /// @param owner The owner of the tokens
    /// @param spender The spender of the tokens
    /// @return remaining The remaining allowance for the specified owner and spender
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }
    
    /// @notice Allows a user to transfer tokens from their account to another account
    /// @param to The address of the recipient
    /// @param value The amount of tokens to transfer
    /// @return success A boolean value indicating whether the transfer was successful or not
    function transfer(address to, uint256 value) public returns (bool) {
        require(value <= _balances[msg.sender], "Insufficient balance");
        require(to != address(0), "Cannot transfer to zero address");
        
        // Update balances
        _balances[msg.sender] = _balances[msg.sender].sub(value);
        _balances[to] = _balances[to].add(value);
        
        // Emit Transfer event
        emit Transfer(msg.sender, to, value);
        
        return true;
    }
    
    /// @notice Allows a user to transfer tokens from a specific account to another account on behalf of that account
    /// @param from The address of the account where tokens are being transferred from
    /// @param to The address of the recipient
    /// @param value The amount of tokens to transfer
    /// @return success A boolean value indicating whether the transfer was successful or not
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(value <= _balances[from], "Insufficient balance");
        require(value <= _allowances[from][msg.sender], "Insufficient allowance");
        require(to != address(0), "Cannot transfer to zero address");
        
        // Update balances and allowance
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);
        
        // Emit Transfer event
        emit Transfer(from, to, value);
        
        return true;
    }
    
    /// @notice Allows a user to approve another user to transfer tokens on their behalf
    /// @param spender The address of the user being approved to transfer tokens
    /// @param value The amount of tokens to approve
    /// @return success A boolean value indicating whether the approval was successful or not
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0), "Cannot approve zero address");
        
        // Update allowance
        _allowances[msg.sender][spender] = value;
        
        // Emit Approval event
        emit Approval(msg.sender, spender, value);
        
        return true;
    }
}