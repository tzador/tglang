pragma solidity ^0.5.0;

// Contract for a decentralized voting system

contract Voting {
    
    // Variables to store vote counts and addresses of allowed voters
    mapping(address => bool) public voters;
    mapping(uint => uint) public votesCount;
    uint public candidatesCount;

    // Events for logging vote and adding candidates
    event Vote(address indexed voter, uint indexed candidate);
    event AddCandidate(uint indexed candidate);

    // Constructor function to add initial candidates
    constructor() public {
        candidatesCount = 0;
    }

    // Function to add a candidate to the election
    function addCandidate() public {
        candidatesCount++;
        emit AddCandidate(candidatesCount);
    }

    // Function to allow an address to vote
    function addVoter(address _voter) public {
        require(_voter != address(0));
        voters[_voter] = true;
    }

    // Function to cast a vote for a candidate
    function vote(uint _candidate) public {
        // Check if voter is eligible to vote
        require(voters[msg.sender]);
        // Check if candidate exists
        require(_candidate > 0 && _candidate <= candidatesCount);

        // Increment vote count for the chosen candidate
        votesCount[_candidate]++;

        // Emit vote event
        emit Vote(msg.sender, _candidate);
    }
}