// A complex smart contract using the SOLIDITY programming language

// import required libraries
pragma solidity ^0.8.4;
import "./SafeMath.sol";
import "./Ownable.sol";

// define contract
contract MyContract is Ownable {

  // state variables
  uint256 public totalSupply;
  string public name;
  string public symbol;
  uint8 public decimals;
  uint256 public launchDate;
  address public tokenOwner;

  // mapping for balances
  mapping(address => uint256) public balances;

  // events
  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);

  // initialize constructor
  constructor() {
    // set initial values 
    totalSupply = 1000;
    name = "My Token";
    symbol = "MTK";
    decimals = 18;
    launchDate = block.timestamp;
    tokenOwner = msg.sender;

    // give all tokens to owner
    balances[tokenOwner] = totalSupply;
  }

  // functions
  function transfer(address to, uint256 value) public returns (bool) {
    // checks for valid transfer
    require(to != address(0), "Invalid address");
    require(value > 0, "Transfer value must be greater than 0");
    require(value <= balances[msg.sender], "Insufficient balance");

    // transfer tokens
    balances[msg.sender] -= value;
    balances[to] += value;

    // emit transfer event
    emit Transfer(msg.sender, to, value);
    return true;
  }

  function approve(address spender, uint256 value) public returns (bool) {
    // checks for valid approval
    require(spender != address(0), "Invalid address");
    require(value > 0, "Approval value must be greater than 0");
    require(value <= balances[msg.sender], "Insufficient balance");

    // approve tokens
    balances[msg.sender] -= value;
    balances[spender] += value;

    // emit approval event
    emit Approval(msg.sender, spender, value);
    return true;
  }

  function transferFrom(address from, address to, uint256 value) public returns (bool) {
    // checks for valid transfer
    require(from != address(0), "Invalid from address");
    require(to != address(0), "Invalid to address");
    require(value > 0, "Transfer value must be greater than 0");
    require(value <= balances[from], "Insufficient balance");
    require(value <= allowed[from][msg.sender], "Insufficient allowance");

    // transfer tokens
    balances[from] -= value;
    balances[to] += value;

    // decrease allowance
    allowed[from][msg.sender] -= value;

    // emit transfer event
    emit Transfer(from, to, value);
    return true;
  }

  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    // checks for valid allowance increase
    require(spender != address(0), "Invalid address");
    require(addedValue > 0, "Added allowance value must be greater than 0");
    require(addedValue <= balances[msg.sender], "Insufficient balance");

    // increase allowance
    allowed[msg.sender][spender] += addedValue;

    // emit approval event
    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    // checks for valid allowance decrease
    require(spender != address(0), "Invalid address");
    require(subtractedValue > 0, "Subtracted allowance value must be greater than 0");
    require(subtractedValue <= allowed[msg.sender][spender], "Insufficient allowance");

    // decrease allowance
    allowed[msg.sender][spender] -= subtractedValue;

    // emit approval event
    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);
    return true;
  }

  // fallback function
  fallback() external payable {
    // revert if funds are sent
    revert();
  }
}