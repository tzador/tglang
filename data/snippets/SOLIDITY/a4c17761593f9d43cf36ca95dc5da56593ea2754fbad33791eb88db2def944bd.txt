/**
  * @dev Interface for token authorization methods.
*/
interface ITokenAuthorization {
    /**
      * @dev Checks if token is authorized for transfer.
      * @param _token address of the token contract.
      * @param _from address of the sender.
      * @param _to address of the recipient.
      * @param _amount amount of tokens being transferred.
      * @return bool if token is authorized.
    */
    function isTokenAuthorized(address _token, address _from, address _to, uint256 _amount) external view returns (bool);
    
     /**
      * @dev Allows specific tokens to be authorized for transfer.
      * @param _token address of the token contract.
    */
    function authorizeToken(address _token) external;
    
     /**
      * @dev Revokes authorization for specific tokens.
      * @param _token address of the token contract.
    */
    function revokeToken(address _token) external;
    
     /**
      * @dev Event for tracking authorized tokens.
      * @param _token address of the authorized token.
    */
    event TokenAuthorized(address _token);
    
     /**
      * @dev Event for tracking revoked tokens.
      * @param _token address of the revoked token.
    */
    event TokenRevoked(address _token);
}

/**
  * @dev Contract that uses the ITokenAuthorization interface for token authorization.
*/
contract TokenAuthorizationUser {
    // Specifies the ITokenAuthorization interface contract.
    ITokenAuthorization private tokenAuthorization;
    
     /**
      * @dev Checks if token is authorized for transfer before executing the transfer.
      * @param _token address of the token contract.
      * @param _from address of the sender.
      * @param _to address of the recipient.
      * @param _amount amount of tokens being transferred.
      * @return bool if token is authorized.
    */
    function transferTokens(address _token, address _from, address _to, uint256 _amount) public returns (bool) {
        require(tokenAuthorization.isTokenAuthorized(_token, _from, _to, _amount), "Token is not authorized for transfer.");
        return true;
    }
    
     /**
      * @dev Allows the owner to authorize a specific token for transfer.
      * @param _token address of the token contract.
    */
    function authorizeToken(address _token) public  {
        tokenAuthorization.authorizeToken(_token);
        emit TokenAuthorized(_token);
    }
    
     /**
      * @dev Allows the owner to revoke authorization for a specific token.
      * @param _token address of the token contract.
    */
    function revokeToken(address _token) public  {
        tokenAuthorization.revokeToken(_token);
        emit TokenRevoked(_token);
    }

     /**
      * @dev Event for tracking authorized tokens.
      * @param _token address of the authorized token.
    */
    event TokenAuthorized(address _token);
    
     /**
      * @dev Event for tracking revoked tokens.
      * @param _token address of the revoked token.
    */
    event TokenRevoked(address _token);
}