//Contract definition
contract MyContract {
    
    //State Variables
    address public owner;
    uint public totalSupply;
    mapping (address => uint) public balances;
    
    //Events
    event Transfer(address indexed from, address indexed to, uint value);
    
    //Constructor function
    constructor(uint initialSupply) public {
        owner = msg.sender;
        totalSupply = initialSupply;
        balances[owner] = totalSupply;
    }
    
    //Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }
    
    //Public functions
    function transfer(address to, uint value) public returns (bool success) {
        require(balances[msg.sender] >= value, "Insufficient balance.");
        require(to != address(0), "Invalid address provided.");
        
        balances[msg.sender] -= value;
        balances[to] += value;
        
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns (bool success) {
        require(balances[from] >= value, "Insufficient balance.");
        require(allowance[from][msg.sender] >= value, "Not enough allowance.");
        require(to != address(0), "Invalid address provided.");
        
        balances[from] -= value;
        balances[to] += value;
        allowance[from][msg.sender] -= value;
        
        emit Transfer(from, to, value);
        return true;
    }
    
    function approve(address spender, uint value) public returns (bool success) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    
    //Private functions
    function _burn(address account, uint value) private {
        require(balances[account] >= value, "Insufficient balance.");
        
        balances[account] -= value;
        totalSupply -= value;
        
        for (uint i = 0; i < accounts.length; i++) {
            balances[accounts[i]] = (balances[accounts[i]] * totalSupply) / (totalSupply + value);
        }
    }
    
    function _mint(uint value) private {
        balances[owner] += value;
        totalSupply += value;
        
        for (uint i = 0; i < accounts.length; i++) {
            balances[accounts[i]] = (balances[accounts[i]] * totalSupply) / (totalSupply - value);
        }
    }
}