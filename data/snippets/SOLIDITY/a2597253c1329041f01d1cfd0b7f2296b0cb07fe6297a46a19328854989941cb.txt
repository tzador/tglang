pragma solidity ^0.8.4; // version of Solidity being used
// the following code defines a contract named 'Token'
contract Token {
    // declaring variables
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    // creating a mapping to store balances of each address
    mapping (address => uint256) public balanceOf;

    // defining an event to track transfer of tokens
    event Transfer(address indexed from, address indexed to, uint256 value);

    // constructor function to initialize the token
    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) {
        name = _name; // assigning name to the passed parameter
        symbol = _symbol; // assigning symbol to the passed parameter
        decimals = _decimals; // assigning decimals to the passed parameter
        totalSupply = _totalSupply; // assigning total supply to the passed parameter
        balanceOf[msg.sender] = _totalSupply; // assigning the total supply as the initial balance of the contract creator
    }

    // function to transfer tokens to other addresses
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value); // checking if the sender has enough tokens
        require(balanceOf[_to] + _value >= balanceOf[_to]); // checking for arithmetic overflow
        balanceOf[msg.sender] -= _value; // deducting the tokens from the sender's account
        balanceOf[_to] += _value; // adding the tokens to the recipient's account
        emit Transfer(msg.sender, _to, _value); // emitting the transfer event
        return true; // returning success
    }
}