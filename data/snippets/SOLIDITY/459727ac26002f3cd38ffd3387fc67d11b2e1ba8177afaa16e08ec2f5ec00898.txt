//@title Voting Contract

 contract Voting {
   //mapping to keep track of votes
   mapping (string => uint8) votesReceived;

   //list of candidates
   string[] candidates = ["Candidate A", "Candidate B", "Candidate C"];

   //voters mapping, keeps track of who has voted
   mapping (address => bool) voters;

   //modifier to ensure only registered voters can vote
   modifier onlyVoters() {
     require(voters[msg.sender] == true, "You are not a registered voter."); //only allow registered voters to call this function
     _;
   }

   //function to vote for a candidate
   function vote(string _candidateName) public onlyVoters {
     require(bytes(_candidateName).length != 0, "Candidate name must not be empty."); //ensure candidate name is not empty
     require(votesReceived[_candidateName] != 0, "Candidate does not exist."); //ensure the candidate exists
     votesReceived[_candidateName] += 1; //add a vote to the candidate
   }

   //function to add a new candidate to the list
   function addCandidate(string _newCandidate) public {
     require(bytes(_newCandidate).length != 0, "New candidate name must not be empty."); //ensure the new candidate name is not empty
     candidates.push(_newCandidate); //add the new candidate to the list
     votesReceived[_newCandidate] = 0; //initialize their vote count to 0
   }

   //function to check the total votes a candidate has received
   function getVotesReceived(string _candidateName) public constant returns (uint8) {
     require(bytes(_candidateName).length != 0, "Candidate name must not be empty."); //ensure candidate name is not empty
     require(votesReceived[_candidateName] != 0, "Candidate does not exist."); //ensure the candidate exists
     return votesReceived[_candidateName]; //return the vote count for the candidate
   } 
 }