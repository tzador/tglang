pragma solidity ^0.8.0;  // Specifies the version of Solidity to be used

// Importing necessary libraries
import "@openzeppelin/contracts/token/ERC721/ERC721.sol"; // Imports the ERC721 token contract from OpenZeppelin
import "@openzeppelin/contracts/access/Ownable.sol"; // Imports the Ownable contract from OpenZeppelin

// Creating a contract named "MyNFT" that inherits from ERC721 and Ownable
contract MyNFT is ERC721, Ownable {
    
    // Create an event to be emitted when a new NFT is minted
    event NewNFTMinted(address owner, uint256 tokenId);

    // Create a mapping to store the NFT's metadata (name and image)
    mapping(uint256 => string) public tokenMetadata;

    // Create a variable to track the total number of NFTs minted
    uint256 public totalNFTsMinted;

    // Create a constructor function that sets the name and symbol of the NFT
    constructor() ERC721("My NFT", "NFT") {}

    // Create a function to mint a new NFT
    function mintNFT(address _to, string memory _name, string memory _image) external onlyOwner {
        
        // Increase the total number of NFTs minted
        totalNFTsMinted++;

        // Generate a new token ID by combining the current timestamp and the total number of NFTs minted
        uint256 tokenId = block.timestamp + totalNFTsMinted;

        // Mint the new NFT to the specified address and assign it the generated token ID
        _safeMint(_to, tokenId);
        
        // Set the NFT's metadata in the mapping using the token ID as the key
        tokenMetadata[tokenId] = string(abi.encodePacked(_name, ",", _image));

        // Emit the NewNFTMinted event with the owner's address and the generated token ID
        emit NewNFTMinted(_to, tokenId);
    }
}