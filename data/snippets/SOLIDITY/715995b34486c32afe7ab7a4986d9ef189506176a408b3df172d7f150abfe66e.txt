pragma solidity ^0.8.9; // specify the version of Solidity used for compiling

// create a contract with a function that checks if a number is prime
contract PrimeChecker {
    
    // create a mapping to keep track of already checked numbers
    mapping(uint => bool) public primeNumbers;
    
    // event to emit when a new prime number is checked
    event PrimeChecked(uint number, bool isPrime);
    
    // function to check if a number is prime
    function checkPrime(uint number) public returns(bool) {
        // if number has already been checked, return previous result from mapping
        if(primeNumbers[number] == true) {
            emit PrimeChecked(number, true); // emit event
            return true;
        }
        
        // check if number is divisible by any number other than 1 and itself
        for(uint i=2; i < number; i++) {
            if(number % i == 0) {
                primeNumbers[number] = false; // set mapping value to false
                emit PrimeChecked(number, false); // emit event
                return false;
            }
        }
        
        primeNumbers[number] = true; // set mapping value to true
        emit PrimeChecked(number, true); // emit event
        return true;
    }
}