pragma solidity ^0.8.0;

// Creating a contract named "MyToken"
contract MyToken {
  // Variables: total supply, balances, allowances
  uint256 totalSupply;
  mapping(address => uint256) balances;
  mapping(address => mapping(address => uint256)) allowances;

  // Constructor function that sets the initial total supply
  constructor(uint256 _totalSupply) {
    totalSupply = _totalSupply;
    // Sets the initial balance of the contract creator to the total supply
    balances[msg.sender] = _totalSupply;
  }

  // Function to transfer tokens from one address to another
  function transfer(address _to, uint256 _amount) public {
    // Checks if the sender has enough balance to transfer
    require(balances[msg.sender] >= _amount, "Not enough balance.");

    // Subtracts the amount from the sender's balance
    balances[msg.sender] -= _amount;

    // Adds the amount to the recipient's balance
    balances[_to] += _amount;

    // Emits an event to notify external applications about the transfer
    emit Transfer(msg.sender, _to, _amount);
  }

  // Function to approve an allowance for a certain address
  function approve(address _spender, uint256 _amount) public {
    // Sets the allowance for the msg.sender to the specified amount
    allowances[msg.sender][_spender] = _amount;

    // Emits an event to notify external applications about the approval
    emit Approval(msg.sender, _spender, _amount);
  }

  // Function to transfer tokens from one address to another, using an approved allowance
  function transferFrom(address _from, address _to, uint256 _amount) public {
    // Checks if the sender has enough allowance to transfer
    require(allowances[_from][msg.sender] >= _amount, "Not enough allowance.");

    // Checks if the sender has enough balance to transfer
    require(balances[_from] >= _amount, "Not enough balance.");

    // Subtracts the amount from the sender's balance
    balances[_from] -= _amount;

    // Adds the amount to the recipient's balance
    balances[_to] += _amount;

    // Subtracts the amount from the sender's allowance
    allowances[_from][msg.sender] -= _amount;

    // Emits an event to notify external applications about the transfer
    emit Transfer(_from, _to, _amount);
  }

  // Function to get the total supply of the token
  function getTotalSupply() public view returns (uint256) {
    return totalSupply;
  }

  // Function to get the balance of a specific address
  function getBalance(address _address) public view returns (uint256) {
    return balances[_address];
  }

  // Function to get the allowance for a specific address
  function getAllowance(address _owner, address _spender) public view returns (uint256) {
    return allowances[_owner][_spender];
  }

  // Event that is emitted when a transfer or allowance is approved
  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);

  // Event that is emitted when a transfer or allowance is made
  event Transfer(address indexed _from, address indexed _to, uint256 _amount);
}