// define a contract named 'Bank'
contract Bank {
    // variable to store total number of accounts
    uint totalAccounts;
    // mapping to store account balances
    mapping(address => uint) accountBalances;
    
    // event to log deposited funds
    event Deposited(address indexed account, uint amount);
    
    // event to log withdrawn funds
    event Withdrawn(address indexed account, uint amount);
    
    // function to add funds to an account
    function deposit() external payable {
        // ensure account is not zero address
        require(msg.sender != address(0));
        // ensure amount deposited is greater than zero
        require(msg.value > 0);
        
        // add deposit amount to account balance
        accountBalances[msg.sender] += msg.value;
        // increment number of accounts
        totalAccounts++;
        // emit deposit event
        emit Deposited(msg.sender, msg.value);
    }
    
    // function to withdraw funds from an account
    function withdraw(uint amount) external {
        // ensure account is not zero address
        require(msg.sender != address(0));
        // ensure amount withdrawn is greater than zero
        require(amount > 0);
        // ensure amount withdrawn is not more than account balance
        require(accountBalances[msg.sender] >= amount);
        
        // subtract amount from account balance
        accountBalances[msg.sender] -= amount;
        // decrement number of accounts
        totalAccounts--;
        // transfer funds to user
        msg.sender.transfer(amount);
        // emit withdraw event
        emit Withdrawn(msg.sender, amount);
    }
}