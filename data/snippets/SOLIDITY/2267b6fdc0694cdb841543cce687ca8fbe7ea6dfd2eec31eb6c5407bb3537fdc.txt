contract MyContract {
    // State Variables
    uint256 public value; // A public unsigned int variable 
    
    // Constructor function
    // Used to initialize the contract's state variables
    constructor(uint256 _value) public {
        value = _value; // Assign the passed value to the state variable "value"
    }
    
    // Public function to update the state variable "value"
    function updateValue(uint256 _newValue) public {
        value = _newValue; // Assign the passed value to the state variable "value"
    }
    
    // External function to retrieve the current value of the state variable "value"
    function getValue() external view returns (uint256) {
        return value; // Return the current value of the state variable "value"
    }
    
    // Internal function to check if the passed value is greater than the current value of "value"
    function isGreaterThan(uint256 _value) internal view returns (bool) {
        return _value > value; // Return a boolean indicating if the passed value is greater than the current value of "value"
    }
    
    // Private function to double the current value of the state variable "value"
    function doubleValue() private {
        value *= 2; // Double the current value of "value"
    }
    
    // Function with the "payable" modifier to allow it to receive Ether
    function receiveEther() public payable {
        // do something with the received Ether
    }
    
    // Function with a require statement that checks if the sender is the contract owner
    function onlyOwner() public {
        // Require that the sender is the contract owner
        require(msg.sender == owner); // msg.sender is a global variable containing the address of the caller of the function
        // do something only the owner can do
    }
    
    // Function with a modifier that checks if the passed value is even
    function onlyEven(uint256 _value) public view onlyIfEven(_value) returns (bool) {
        return true; // Return true if the passed value is even
    }
    
    // Modifier that checks if the passed value is even before executing the function
    modifier onlyIfEven(uint256 _value) {
        require(_value % 2 == 0); // Require that the passed value is even
        _; // Continue executing the function
    }
}