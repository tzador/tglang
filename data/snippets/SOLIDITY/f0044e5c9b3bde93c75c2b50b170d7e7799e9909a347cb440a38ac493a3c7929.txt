// This is a contract that implements a token registry and allows for token registrations and transfers
pragma solidity ^0.8.0; // Specifying the solidity version

// Initializing the contract
contract TokenRegistry {

    // Defining a struct to store token information
    struct Token {
        address owner; // Address of the token owner
        uint256 totalSupply; // Total supply of the token
        mapping(address => uint256) balances; // Mapping of token balances for each address
    }

    mapping(string => Token) public tokens; // Mapping of token name to Token struct

    // Function to register a new token by providing a token name and initial supply
    function registerToken(string memory _tokenName, uint256 _initialSupply) public {
        Token memory newToken = Token(msg.sender, _initialSupply); // Creating a new Token struct with the token owner and initial supply
        tokens[_tokenName] = newToken; // Adding the new token to the tokens mapping
    }

    // Function to transfer tokens from one address to another
    function transferToken(string memory _tokenName, address _to, uint256 _amount) public {
        require(tokens[_tokenName].owner == msg.sender, "Sender is not the owner of this token!"); // Checking if the sender is the owner of the token
        require(tokens[_tokenName].balances[msg.sender] >= _amount, "Sender does not have enough tokens!"); // Checking if the sender has enough tokens
        tokens[_tokenName].balances[msg.sender] -= _amount; // Subtracting the transferred amount from the sender's balance
        tokens[_tokenName].balances[_to] += _amount; // Adding the transferred amount to the recipient's balance
    }

    // Function to get the balance of a specific address for a specified token
    function getBalance(string memory _tokenName, address _address) public view returns (uint256) {
        return tokens[_tokenName].balances[_address];
    }
}