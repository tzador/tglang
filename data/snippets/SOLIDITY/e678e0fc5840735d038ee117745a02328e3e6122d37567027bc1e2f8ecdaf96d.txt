pragma solidity ^0.6.0;

// contract declaration
contract MyContract {
    // state variables of various data types
    address public owner;
    uint256 public number;
    string public greeting;
    bool public isTrue;
    bytes32 public dataHash;

    // events
    event LogNumberChanged(uint256 _newNumber);
    event LogOwnerChanged(address _newOwner);
    event LogGreetingChanged(string _newGreeting);
    event LogBoolChanged(bool _newBool);
    event LogDataHashChanged(bytes32 _newDataHash);

    // constructor function
    // sets initial values of state variables
    constructor() public {
        owner = msg.sender;
        number = 10;
        greeting = "Hello world!";
        isTrue = true;
        dataHash = keccak256(abi.encodePacked(number, greeting, isTrue));
    }

    // modifier function to restrict access to certain functions
    modifier onlyOwner {
        require(msg.sender == owner, "You are not the owner!");
        _;
    }

    // getter function to return dataHash
    function getDataHash() public view returns (bytes32) {
        return dataHash;
    }

    // setter functions to update state variables
    function updateNumber(uint256 _newNumber) public onlyOwner {
        number = _newNumber;
        emit LogNumberChanged(_newNumber);
    }

    function updateOwner(address _newOwner) public onlyOwner {
        owner = _newOwner;
        emit LogOwnerChanged(_newOwner);
    }

    function updateGreeting(string memory _newGreeting) public onlyOwner {
        greeting = _newGreeting;
        emit LogGreetingChanged(_newGreeting);
    }

    function updateBool(bool _newBool) public onlyOwner {
        isTrue = _newBool;
        emit LogBoolChanged(_newBool);
    }

    function updateDataHash(bytes32 _newDataHash) public onlyOwner {
        dataHash = _newDataHash;
        emit LogDataHashChanged(_newDataHash);
    }
}