pragma solidity ^0.8.0;

// This is a comment in Solidity

//Creating a contract called "ExampleContract"
contract ExampleContract {
    
    // Declaring state variables
    uint public num1;
    string public str1;
    address public owner;
    
    // Defining a constructor function
    constructor() public {
        
        // Assigning values to state variables
        num1 = 10;
        str1 = "Hello World";
        
        // Setting the contract creator as the owner
        owner = msg.sender;
    }
    
    // Declaring a function that can only be called by the owner
    function changeNum(uint _newNum) public {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        num1 = _newNum;
    }
    
    // Declaring a function that returns a string
    function getInfo() public view returns (string memory) {
        return str1;
    }
    
    // Creating a modifier to restrict access to certain functions
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }
    
    // Declaring a function that can only be called by the owner using the "onlyOwner" modifier
    function updateInfo(string memory _newInfo) public onlyOwner {
        str1 = _newInfo;
    }
    
    // Creating a function that allows the contract to receive Ether
    function fundContract() public payable {
        
    }
    
    // Creating a function to withdraw Ether from the contract
    function withdraw() public onlyOwner {
        require(address(this).balance > 0, "There is no Ether to withdraw.");
        payable(owner).transfer(address(this).balance);
    }
}