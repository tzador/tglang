pragma solidity >=0.4.22 <0.8.0; // Ensures code is compatible with Solidity versions between 0.4.22 and 0.8.0

contract Bank { // Creates a new contract called 'Bank'
    address owner; // Declares a variable 'owner' of type 'address'
    mapping(address => uint) public balances; // Creates an associative array called 'balances' that maps addresses to unsigned integers

    event Transfer(address _from, address _to, uint _amount); // Creates an event called 'Transfer' that takes in three arguments: addresses for '_from' and '_to', and an unsigned integer '_amount'

    constructor() public { // Creates a function named 'constructor' that is executed when the contract is deployed
        owner = msg.sender; // Sets the 'owner' variable to the address of the person deploying the contract using 'msg.sender'
    }

    modifier onlyOwner { // Creates a modifier called 'onlyOwner'
        require(msg.sender == owner, "Only the owner can call this function!"); // Checks if the 'msg.sender' is equal to the 'owner' and throws an error message if false
        _; // Placeholder for the code inside the function that is using this modifier
    }

    function deposit() public payable { // Creates a function named 'deposit' that can receive Ether and is accessible from outside the contract
        require(msg.value > 0, "Insufficient funds!"); // Checks if the value of the deposit is greater than 0 and throws an error message if false
        balances[msg.sender] += msg.value; // Adds the deposited amount to the sender's balance in the 'balances' array
    }

    function withdraw(uint _amount) public { // Creates a function named 'withdraw' that takes in one argument '_amount' of type unsigned integer and is accessible from outside the contract
        require(balances[msg.sender] >= _amount, "Insufficient balance!"); // Checks if the sender's balance is greater than or equal to the amount they want to withdraw and throws an error message if false
        balances[msg.sender] -= _amount; // Subtracts the withdrawn amount from the sender's balance in the 'balances' array
        msg.sender.transfer(_amount); // Transfers the withdrawn amount from the contract to the sender
    }

    function transfer(address _to, uint _amount) public { // Creates a function named 'transfer' that takes in two arguments: addresses for '_to' and an unsigned integer '_amount' and is accessible from outside the contract
        require(balances[msg.sender] >= _amount, "Insufficient balance!"); // Checks if the sender's balance is greater than or equal to the amount they want to transfer and throws an error message if false
        balances[msg.sender] -= _amount; // Subtracts the transferred amount from the sender's balance in the 'balances' array
        balances[_to] += _amount; // Adds the transferred amount to the receiver's balance in the 'balances' array
        emit Transfer(msg.sender, _to, _amount); // Emits the 'Transfer' event with the relevant arguments
    }

    function getBalance() public view returns (uint) { // Creates a function named 'getBalance' that is accessible from outside the contract and returns an unsigned integer
        return balances[msg.sender]; // Returns the sender's balance from the 'balances' array
    }

    function getContractBalance() public view onlyOwner returns (uint) { // Creates a function named 'getContractBalance' that is accessible from outside the contract, only for the contract owner, and returns an unsigned integer
        return address(this).balance; // Returns the contract's balance in Wei
    }

}