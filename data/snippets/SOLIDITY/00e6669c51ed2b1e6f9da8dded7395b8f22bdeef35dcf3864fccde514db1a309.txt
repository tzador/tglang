pragma solidity ^0.8.0; //pragma directive to specify compiler version

contract Token { //creating a contract called Token

    string public name = "My Token"; //public variable storing name of the token
    string public symbol = "MT"; //public variable storing the token symbol
    uint256 public totalSupply; //public variable storing total supply of the token

    mapping(address => uint256) public balanceOf; //mapping to keep track of token balances
    mapping(address => mapping(address => uint256)) public allowance; //mapping to keep track of approved transfers
    
    event Transfer(address indexed from, address indexed to, uint256 value); //event to be fired when tokens are transferred
    
    event Approval(address indexed owner, address indexed spender, uint256 value); //event to be fired when tokens are approved for transfer
    
    constructor(uint256 _initialSupply) { //constructor function to initialize the contract with an initial supply
        totalSupply = _initialSupply;
        balanceOf[msg.sender] = _initialSupply; //setting the initial supply to the contract creator's balance
    }
    
    function transfer(address _to, uint256 _value) public returns (bool success) { //function to transfer tokens
        require(balanceOf[msg.sender] >= _value); //checking if sender has enough tokens to transfer
        balanceOf[msg.sender] -= _value; //deducting tokens from sender's balance
        balanceOf[_to] += _value; //adding tokens to receiver's balance
        emit Transfer(msg.sender, _to, _value); //firing the transfer event
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) { //function to approve transfer of tokens
        allowance[msg.sender][_spender] = _value; //setting _spender's allowance to _value
        emit Approval(msg.sender, _spender, _value); //firing the approval event
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value); //checking if _from has enough tokens to transfer
        require(allowance [_from][msg.sender] >= _value); //checking if msg.sender is allowed to transfer the specified amount from _from
        balanceOf[_from] -= _value; //deducting tokens from _from's balance
        balanceOf[_to] += _value; //adding tokens to _to's balance
        allowance[_from][msg.sender] -= _value; //deducting the allowed amount from msg.sender's allowance
        emit Transfer(_from, _to, _value); //firing the transfer event
        return true;
    }
}