pragma solidity ^0.8.0;

// Creating a contract called "MyContract"
contract MyContract {
    
    // Declaring state variables
    uint public myUint;
    string public myString;
    address public myAddress;
    bool public myBool;

    // Creating a constructor function
    constructor() {
        // Initializing the state variables
        myUint = 10;
        myString = "Hello World";
        myAddress = msg.sender;
        myBool = true;
    }

    // Creating a function to update the value of myUint
    function updateUint(uint _newUint) public {
        // Restricting access to the function to only the contract creator
        require(msg.sender == myAddress, "You are not authorized to update the value of myUint.");
        // Updating the value of myUint
        myUint = _newUint;
    }

    // Creating a function to update the value of myString
    function updateString(string memory _newString) public {
        // Restricting access to the function to only the contract creator
        require(msg.sender == myAddress, "You are not authorized to update the value of myString.");
        // Updating the value of myString
        myString = _newString;
    }

    // Creating a function to update the value of myAddress
    function updateAddress(address _newAddress) public {
        // Restricting access to the function to only the contract creator
        require(msg.sender == myAddress, "You are not authorized to update the value of myAddress.");
        // Updating the value of myAddress
        myAddress = _newAddress;
    }

    // Creating a function to update the value of myBool
    function updateBool(bool _newBool) public {
        // Restricting access to the function to only the contract creator
        require(msg.sender == myAddress, "You are not authorized to update the value of myBool.");
        // Updating the value of myBool
        myBool = _newBool;
    }
}