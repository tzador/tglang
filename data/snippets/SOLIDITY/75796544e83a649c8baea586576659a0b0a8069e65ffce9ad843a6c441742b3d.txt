pragma solidity >=0.7.0 <0.9.0;

interface IBank {
    // Events
    event NewClient(address indexed _client);
    event Transaction(address indexed _sender, address indexed _receiver, uint256 _amount);

    // Functions
    function enroll(address _client) external;
    function deposit(address _client) external payable;
    function withdraw(address _receiver, uint256 _amount) external;
}

contract Bank is IBank {
    // Variables
    mapping(address => uint256) private balances;

    // Functions
    function enroll(address _client) override external {
        balances[_client] = 0;
        emit NewClient(_client);
    }

    function deposit(address _client) override external payable {
        require(msg.value > 0, "Invalid amount to deposit.");
        balances[_client] += msg.value;
        emit Transaction(msg.sender, _client, msg.value);
    }

    function withdraw(address _receiver, uint256 _amount) override external {
        require(balances[msg.sender] >= _amount, "Insufficient balance.");
        balances[msg.sender] -= _amount;
        _receiver.transfer(_amount);
        emit Transaction(msg.sender, _receiver, _amount);
    }
}