// Declare a contract named MyContract
contract MyContract {
    // Declare state variables
    address private owner; // Needs to be set before contract deployment
   
    struct User { // Declare a struct named User
        string name; // Declare a variable named name of type string
        uint age; // Declare a variable named age of type uint
        bool isActive; // Declare a variable named isActive of type bool
    }
    
    mapping (uint => User) private users; // Declare a private mapping named users with key type uint and value type User
    uint private userCount; // Declare a private variable named userCount of type uint
    
    // Declare an event named NewUser
    event NewUser(string name, uint age, bool isActive);
    
    // Declare a constructor function
    constructor() public {
        owner = msg.sender; // Set the owner variable to the address of the contract deployer
        userCount = 0; // Set the userCount variable to 0
    }
    
    // Declare a function to add a new user
    function addUser(string memory _name, uint _age, bool _isActive) public {
        require(msg.sender == owner); // Check if the sender is the owner
        userCount++; // Increment userCount
        users[userCount] = User(_name, _age, _isActive); // Add new user to the mapping
        emit NewUser(_name, _age, _isActive); // Emit the NewUser event
    }
    
    // Declare a function to get a user's information
    function getUser(uint _id) public view returns (string memory, uint, bool) {
        require(msg.sender == owner); // Check if the sender is the owner
        return (users[_id].name, users[_id].age, users[_id].isActive); // Return user information
    }
    
}