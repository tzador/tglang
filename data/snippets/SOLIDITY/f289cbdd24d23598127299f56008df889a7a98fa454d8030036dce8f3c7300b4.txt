pragma solidity ^0.8.0;

// Imports
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

// Contract definition
contract MyToken is Ownable, ERC20 {
    
    // ERC20 token name and symbol
    string private constant NAME = "MyToken";
    string private constant SYMBOL = "MTK";
    
    // Contract creator address
    address private _creator;
    
    // ADDRESS_ZERO constant
    address private constant ADDRESS_ZERO = address(0);
    
    // Events
    event Burn(address indexed account, uint256 value);
    event Mint(address indexed account, uint256 value);

    // Constructor
    constructor() ERC20(NAME, SYMBOL) {
        _creator = msg.sender;
    }
    
    // Token burn function
    function burn(uint256 amount) external {
        require(_creator != ADDRESS_ZERO, "Token owner cannot be ZERO address");
        _burn(msg.sender, amount);
        emit Burn(msg.sender, amount);
    }
    
    // Token mint function
    function mint(uint256 amount) external onlyOwner {
        _mint(_creator, amount);
        emit Mint(_creator, amount);
    }
    
    // Function to transfer ownership of token contract
    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != ADDRESS_ZERO, "New contract owner cannot be ZERO address");
        renounceOwnership();
        Ownable.transferOwnership(newOwner);
    }
    
}