// Define a contract called "Election"
contract Election {
    // Define a variable to store the owner of the contract
    address owner;

    // Define a constructor to set the owner of the contract
    constructor() public {
        owner = msg.sender;
    }

    // Define a struct called Candidate to store information about candidates
    struct Candidate {
        string name;
        uint voteCount;
    }

    // Define a dynamic array of Candidate structs
    Candidate[] public candidates;

    // Define a mapping to keep track of the addresses that have voted
    mapping(address => bool) public voters;

    // Define a modifier that only allows the owner of the contract to make changes
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    // Define a function to add a candidate to the election
    function addCandidate(string memory _name) public onlyOwner {
        // Create a new Candidate struct and add it to the array
        candidates.push(Candidate({
            name: _name,
            voteCount: 0
        }));
    }

    // Define a function to vote for a candidate
    function vote(uint _candidateIndex) public {
        // Check if the sender has already voted
        require(!voters[msg.sender], "This address has already voted");

        // Check if the candidate index is valid
        require(_candidateIndex < candidates.length, "Invalid candidate index");

        // Update the vote count for the candidate
        candidates[_candidateIndex].voteCount++;

        // Add the sender's address to the list of voters
        voters[msg.sender] = true;
    }

    // Define a function to get the winner of the election
    function getWinner() public view returns (string memory) {
        // Set a variable to keep track of the current highest vote count
        uint highestVotes = 0;

        // Set a variable to store the name of the winning candidate
        string memory winner;

        // Loop through the candidates
        for (uint i = 0; i < candidates.length; i++) {
            // Check if the current candidate has the highest vote count
            if (candidates[i].voteCount > highestVotes) {
                // Update the highestVotes and winner variables
                highestVotes = candidates[i].voteCount;
                winner = candidates[i].name;
            }
        }

        // Return the name of the winning candidate
        return winner;
    }
}