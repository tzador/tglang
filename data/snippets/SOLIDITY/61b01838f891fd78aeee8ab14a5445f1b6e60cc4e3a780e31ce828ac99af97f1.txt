//Contract to store and transfer ownership of a simple asset

pragma solidity ^0.8.0;

contract Asset {
    address public owner; //variable to store the contract owner's address
    uint public value; //variable to store the asset's value

    constructor() {
        owner = msg.sender; //set the contract owner as the address of the one deploying the contract
        value = 0; //initially set the asset value to 0
    }

    //modifier to restrict access to certain functions to the contract owner only
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner of this contract.");
        _; //continue executing the function if the modifier condition is met
    }

    //function to transfer ownership of the asset to a new owner
    function transferOwnership(address newOwner) public onlyOwner {
        owner = newOwner; //set the new owner's address as the contract owner
    }

    //function to set a new value for the asset
    function setValue(uint newValue) public onlyOwner {
        value = newValue; //set the new value for the asset
    }

    //function to get the current value of the asset
    function getValue() public view returns (uint) {
        return value;
    }
}