pragma solidity >=0.7.0 <0.9.0; // defining the version of Solidity

contract MyContract { // creating a contract named MyContract
    
    uint public myUint; // declaring a state variable of type uint (unsigned integer) and making it publicly accessible
    
    address private myAddress; // declaring a state variable of type address and making it private
    
    constructor(uint _myUint, address _myAddress) { // defining the contructor with two parameters, _myUint of type uint and _myAddress of type address
        myUint = _myUint; // assigning the value passed to myUint
        myAddress = _myAddress; // assigning the value passed to myAddress
    }
    
    function setMyUint(uint _myUint) public { // defining a function named setMyUint that takes in a parameter _myUint of type uint and is public
        require(msg.sender == myAddress, "Only the owner can call this function."); // using a conditional statement to check if the caller is the owner of the contract
        myUint = _myUint; // if the condition is met, assigning the passed value to myUint
    }
    
    function getMyUint() public view returns (uint) { // defining a function named getMyUint that is public and returns a uint value
        return myUint; // returning the value of myUint
    }
    
    function getMyAddress() public view returns (address) { // defining a function named getMyAddress that is public and returns an address
        return myAddress; // returning the value of myAddress
    }
    
    function myFunction(uint _myUint) public pure returns (uint) { // defining a function named myFunction that takes in a parameter _myUint of type uint, is a pure function, and returns a uint value
        uint result = _myUint * 10; // declaring a local variable named result and assigning it the value of _myUint multiplied by 10
        if (result > 100) { // using a conditional statement to check if the value of result is greater than 100
            return _myUint; // if the condition is met, returning the value of _myUint
        } else { // if the condition is not met
            return result; // returning the value of result
        }
    }
}