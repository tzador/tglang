// Create contract
contract SolidityExample {
    // Define variables
    address public owner;
    uint public totalSupply;

    // Define mapping
    mapping(address => uint) public balanceOf;
    mapping(address => mapping(address => uint)) public allowance;

    // Define event
    event Transfer(address indexed from, address indexed to, uint value);

    // Constructor
    constructor() public {
        // Set initial values
        owner = msg.sender;
        totalSupply = 1000000;
        balanceOf[msg.sender] = totalSupply;
    }

    // Function to transfer tokens
    function transfer(address _to, uint _value) public returns (bool success) {
        // Check if sender has enough tokens
        require(balanceOf[msg.sender] >= _value);

        // Subtract tokens from sender
        balanceOf[msg.sender] -= _value;
        // Add tokens to receiver
        balanceOf[_to] += _value;

        // Trigger event
        emit Transfer(msg.sender, _to, _value);

        // Return success
        return true;
    }

    // Function to approve transfer of tokens
    function approve(address _spender, uint _value) public returns (bool success) {
        // Update allowance mapping
        allowance[msg.sender][_spender] = _value;

        // Return success
        return true;
    }

    // Function to transfer tokens from a certain address
    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
        // Check if sender has enough allowance
        require(_value <= allowance[_from][msg.sender]);

        // Subtract tokens from sender's balance
        balanceOf[_from] -= _value;
        // Add tokens to receiver's balance
        balanceOf[_to] += _value;

        // Subtract allowance from sender
        allowance[_from][msg.sender] -= _value;

        // Trigger event
        emit Transfer(_from, _to, _value);

        // Return success
        return true;
    }
}