pragma solidity ^0.4.21; // Specifying version of Solidity to be used

contract ExampleContract { // Defining contract

    address public owner; // Declaring state variable to store address of owner
    
    enum Status { // Enum to define different status options
        Active,
        Inactive,
        Pending
    }

    struct User { // Defining user struct
        string name; // User's name
        uint age; // User's age
        Status status; // User's status
    }

    mapping (address => User) public users; // Mapping to store user data using address as key

    event UserAdded(string name); // Declaring event to be emitted when a new user is added

    constructor() public{ // Constructor function to initialize contract
        owner = msg.sender; // Setting contract owner as the address that deployed the contract
    }

    modifier onlyOwner(){ // Modifier to restrict access to certain functions to only the contract owner
        require(msg.sender == owner);
        _; // Underscore indicates where the function's code will be executed
    }

    function addUser(string name, uint age, Status status) public onlyOwner { // Function to add a new user
        users[msg.sender] = User(name, age, status); // Storing user data based on sender's address
        emit UserAdded(name); // Emitting event to notify when a user is added
    }

    function getUser() public view returns (string, uint, Status){ // Function to retrieve a user's data
        return (users[msg.sender].name, users[msg.sender].age, users[msg.sender].status); // Returning user's data based on sender's address
    }

    function changeUserStatus(Status newStatus) public { // Function to change a user's status
        users[msg.sender].status = newStatus; // Updating user's status based on sender's address
    }

}