pragma solidity ^0.8.4;

/**
 * @dev Contract used for creating a decentralized voting system.
 */
 
contract VotingSystem {
    
    address[] public candidateAddresses;
    mapping(address => uint) public candidateVotes;
    address public owner;
    
    /**
    * @dev Modifier for only allowing the contract owner to call functions
    */
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Sender is not the contract owner");
        _;
    }
    
    /**
    * @dev Event to be emitted when a new candidate is added
    * @param candidateAddress The address of the candidate
    */
    
    event NewCandidate(address candidateAddress);
    
    /**
    * @dev Event to be emitted when a vote is cast
    * @param candidateAddress The address of the candidate
    */
    
    event VoteCast(address candidateAddress);
    
    /**
    * @dev Constructor function that sets the contract owner
    */
    
    constructor() {
        owner = msg.sender;
    }
    
    /**
    * @dev Function used to add a new candidate to the election
    * @param candidateAddress The address of the candidate to be added
    */
    
    function addCandidate(address candidateAddress) public onlyOwner {
        require(candidateAddress != address(0), "Candidate address cannot be zero");
        candidateAddresses.push(candidateAddress);
        
        emit NewCandidate(candidateAddress);
    }
    
    /**
    * @dev Function used to cast a vote for a candidate
    * @param candidateAddress The address of the candidate to be voted for
    */
    
    function vote(address candidateAddress) public {
        require(candidateVotes[candidateAddress] != 0, "Candidate does not exist");
        require(candidateAddress != address(0), "Candidate address cannot be zero");
        
        candidateVotes[candidateAddress]++;
        
        emit VoteCast(candidateAddress);
    }
}