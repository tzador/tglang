pragma solidity ^0.8.0;

import "./Interface.sol";

contract Contract {

    address owner;

    mapping(address => uint) balances;

    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized.");
        _;
    }

    function transferOwnership(address _newOwner) external onlyOwner {
        require(_newOwner != address(0), "New owner cannot be zero address");
        owner = _newOwner;
    }

    function deposit() external payable {
        require(msg.value > 0, "Amount must be greater than zero");
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint _amount) external {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        balances[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
    }

    function getBalance() external view returns (uint) {
        return balances[msg.sender];
    }
}

contract ExternalContract {

    address contract1;

    function setContract(address _contract1) external {
        contract1 = _contract1;
    }

    function callFunction(uint _amount) external {
        require(contract1 != address(0), "Contract address not set");
        Interface(contract1).withdraw(_amount);
    }
}

interface Interface {
    function withdraw(uint _amount) external;
}