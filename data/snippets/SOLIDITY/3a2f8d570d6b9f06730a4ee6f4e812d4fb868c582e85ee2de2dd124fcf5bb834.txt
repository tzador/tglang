pragma solidity ^0.8.0;

// This contract implements a voting system using Solidity

contract VotingSystem {
    
    // Declare variables
    
    address public owner; // person who deploys the contract
    uint public totalVotes; // total number of votes
    bool public votingOpen; // flag to indicate if voting is open
    
    // Set up a map to store candidate names and their vote count
    
    mapping(string => uint) public candidateVotes;
    
    // Events to emit when a new candidate is added or when a vote is cast
    
    event NewCandidate(string candidateName);
    event VoteCast(string candidateName);
    
    // Constructor function, sets up the owner as the contract deployer and sets total votes to zero
    
    constructor() {
        owner = msg.sender;
        totalVotes = 0;
        votingOpen = true;
    }
    
    // Modifier to check if the sender of a function call is the contract owner
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }
    
    // Function to add a new candidate to the map, only the owner can call this function
    
    function addCandidate(string memory candidateName) public onlyOwner {
        // First check if the voting is still open
        require(votingOpen == true, "Voting is closed, no new candidates can be added.");
        
        // Check if the candidate is already in the map
        require(candidateVotes[candidateName] == 0, "Candidate already exists, please choose a different name.");
        
        // Add the candidate to the map with a starting vote count of zero
        candidateVotes[candidateName] = 0;
        
        // Emit an event to notify that a new candidate has been added
        emit NewCandidate(candidateName);
    }
    
    // Function to cast a vote for a candidate, anyone can call this function
    
    function vote(string memory candidateName) public {
        // First check if the voting is still open
        require(votingOpen == true, "Voting is closed, no new votes can be cast.");
        
        // Check if the candidate is in the map
        require(candidateVotes[candidateName] != 0, "Candidate does not exist, please choose a valid candidate.");
        
        // Increment the vote count for the chosen candidate
        candidateVotes[candidateName] += 1;
        
        // Increment the total vote count
        totalVotes += 1;
        
        // Emit an event to notify that a vote has been cast
        emit VoteCast(candidateName);
    }
    
    // Function to close voting, only the owner can call this function
    
    function closeVoting() public onlyOwner {
        // First check if the voting is still open
        require(votingOpen == true, "Voting is already closed.");
        
        // Set the votingOpen flag to false
        votingOpen = false;
    }
    
    // Function to get the winner of the election, can be called by anyone
    
    function getWinner() public view returns (string memory) {
        // First check if the voting is closed
        require(votingOpen == false, "Voting is still open, winner cannot be announced yet.");
        
        // Find the candidate with the most votes
        uint highestVotes = 0;
        string memory winner;
        for (uint i = 0; i < totalVotes; i++) {
            if (candidateVotes[candidateName] > highestVotes) {
                highestVotes = candidateVotes[candidateName];
                winner = candidateName;
            }
        }
        
        return winner;
    }
}