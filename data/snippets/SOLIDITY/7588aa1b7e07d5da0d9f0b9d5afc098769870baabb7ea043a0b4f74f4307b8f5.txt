pragma solidity ^0.8.4; // declaring the solidity version

// Creating a contract called "MyBank"
contract MyBank {

   address private owner; // declaring an address variable

   // Modifier that checks if the sender is the owner
   modifier onlyOwner() {
     require(msg.sender == owner);
     _;
   }

   // Initializing the contract
   constructor() {
     owner = msg.sender; // assigning the sender's address to the owner variable
   }

   // Mapping with key-value pairs of customer's address and their balance
   mapping (address => uint) customerBalances;

   // Function to deposit funds into the contract by the customer
   function deposit() public payable {
     require(msg.value > 0); // checking if the deposited value is greater than 0
     require(msg.sender != address(0)); // checking the sender's address is not 0
     customerBalances[msg.sender] += msg.value; // adding the deposited amount to the customer's balance
   }

   // Function to withdraw funds from the contract by the customer
   function withdraw(uint _amount) public onlyOwner {
     require(_amount <= customerBalances[msg.sender]); // checking if the amount to be withdrawn is less than or equal to the customer's balance
     payable(msg.sender).transfer(_amount); // transferring the specified amount to the customer's address
     customerBalances[msg.sender] -= _amount; // subtracting the withdrawn amount from the customer's balance
   }

   // Function to check the balance of a specific customer
   function checkBalance() public view returns (uint) {
     require(msg.sender != address(0)); // checking the sender's address is not 0
     return customerBalances[msg.sender]; // returning the balance of the sender
   }
}