// Example contract using various SOLIDITY features
// SPDX-License-Identifier: MIT

pragma solidity >=0.8.0;

contract ExampleContract {
    string private name;
    mapping(address => uint) public balances;
    address public owner;
    
    event NameChange(string newName);

    constructor(string memory _name) {
        name = _name;
        owner = msg.sender;
    }

    function setName(string memory _name) public {
        require(msg.sender == owner, "Only the owner can change the name.");
        name = _name;
        emit NameChange(_name);
    }

    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint _amount) external {
        require(balances[msg.sender] >= _amount, "Insufficient balance.");
        (bool success, ) = msg.sender.call{value: _amount}("");
        require(success, "Transfer failed.");
        balances[msg.sender] -= _amount;
    }

    fallback() external payable {}

    receive() external payable {}
}

contract InheritanceContract is ExampleContract {
    function setInheritedName(string memory _name) public {
        setName(_name);
    }
}