// Contract used for storing and transferring tokens
contract Token {
    // Variables to store token name, symbol, decimals and total supply
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    // Mapping to store token balances for each address
    mapping(address => uint256) public balanceOf;

    // Mapping to store allowances for token transfers
    mapping(address => mapping(address => uint256)) public allowance;

    // Event emitted when tokens are transferred
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Event emitted when an allowance is set
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Constructor function to set token values and assign total supply to contract creator
    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    ) public {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;
        balanceOf[msg.sender] = _totalSupply;
    }

    // Function to transfer tokens from sender to receiver
    function transfer(address _to, uint256 _value) public returns (bool success) {
        // Transfer must have a non-zero value and sender must have enough balance
        require(_value > 0 && balanceOf[msg.sender] >= _value, "Invalid value or insufficient balance");

        // Update sender and receiver balances
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        // Emit Transfer event
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    // Function to approve an allowance for a spender to transfer tokens from sender's account
    function approve(address _spender, uint256 _value) public returns (bool success) {
        // Approval must have a non-zero value
        require(_value > 0, "Invalid value");

        // Set allowance for the spender
        allowance[msg.sender][_spender] = _value;

        // Emit Approval event
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    // Function to transfer tokens from one address to another using allowance
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        // Transfer must have a non-zero value, sender must have enough balance and spender must have enough allowance
        require(_value > 0 && balanceOf[_from] >= _value && allowance[_from][msg.sender] >= _value,
            "Invalid value, insufficient balance or allowance");

        // Update sender and receiver balances and decrease allowance
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;

        // Emit Transfer event
        emit Transfer(_from, _to, _value);
        return true;
    }
}