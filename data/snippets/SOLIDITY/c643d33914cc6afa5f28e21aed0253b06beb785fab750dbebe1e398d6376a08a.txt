pragma solidity ^0.8.0;

contract MyContract {
    //state variables
    string private name;
    uint private value;
    
    //events
    event NameChanged(string newName);
    event ValueIncreased(uint newValue);
    
    //constructor
    constructor(string memory _name, uint _value) {
        name = _name;
        value = _value;
    }
    
    //getters
    function getName() public view returns(string memory) {
        return name;
    }
    
    function getValue() public view returns(uint) {
        return value;
    }
    
    //setters
    function changeName(string memory _newName) public {
        require(msg.sender == owner, "Only the owner can change the name!");
        name = _newName;
        emit NameChanged(_newName);
    }
    
    function increaseValue(uint _newValue) public {
        require(_newValue > value, "New value must be greater than current value!");
        value = _newValue;
        emit ValueIncreased(_newValue);
    }
    
    //fallback function
    fallback() external {
        revert("This contract does not accept any ether!");
    }
}