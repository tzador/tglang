// Define contract
contract Auction {
  
  // Define variables
  address public highestBidder;
  uint public highestBid;
  
  // Define mapping for bids
  mapping(address => uint) public bids;
  
  // Define events
  event NewHighestBid(address bidder, uint bidAmount);
  event AuctionEnded(address winner, uint winningBid);
  
  // Function to place a bid
  function placeBid() public payable {
    
    require(msg.value > highestBid, "Bid amount must be higher than current highest bid.");
    
    // If previous bidder exists, return their bid
    if (highestBidder != address(0)) {
      bids[highestBidder] += highestBid;
    }
    
    // Update highest bidder and bid amount
    highestBidder = msg.sender;
    highestBid = msg.value;
    
    // Emit event for new highest bid
    emit NewHighestBid(msg.sender, msg.value);
  }
  
  // Function to end the auction and transfer winning bid to contract owner
  function endAuction() public {
    
    // Check if sender is contract owner
    require(msg.sender == owner, "Only contract owner can end the auction.");
    
    // Transfer winning bid to owner
    owner.transfer(address(this).balance);
    
    // Emit event for auction end
    emit AuctionEnded(highestBidder, highestBid);
    
    // Reset variables
    highestBidder = address(0);
    highestBid = 0;
  }
}