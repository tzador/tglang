pragma solidity ^0.6.0;

/**
 * @dev Contract definition for a DApp that implements a decentralized voting system.
 * This contract uses the principles of the SOLID architectural design pattern.
 */

// Interface of DApp Voter contract
contract DAppVoter {

    /**
     * @dev Variable that stores the total number of registered voters.
     */
    uint totalVoters;

    /**
     * @dev Mapping that stores the addresses of registered voters.
     */
    mapping(address => bool) private voters;

    /**
     * @dev Event that is triggered when a new vote is cast.
     */
    event VoteCast(address voter, uint choice);

    /**
     * @dev Constructor function that initializes the contract with an initial list of voters.
     * The contract creator is registered as the first voter.
     */
    constructor()
        public
    {
        // Register contract creator as a voter
        voters[msg.sender] = true;

        // Increment total number of voters
        totalVoters++;
    }

    /**
     * @dev Modifier that checks if the provided address is a registered voter.
     * @param _address The address to check.
     */
    modifier onlyVoter(address _address) {
        require(voters[_address] == true, "Address is not registered as a voter");
        _;
    }

    /**
     * @dev Function that registers a new voter to the DApp.
     * @param _address The address of the new voter.
     */
    function registerVoter(address _address)
        public
    {
        // Check if _address is not already a registered voter
        require(voters[_address] == false, "Address is already a registered voter");

        // Register _address as a voter
        voters[_address] = true;

        // Increment total number of voters
        totalVoters++;
    }

    /**
     * @dev Function that allows a registered voter to cast their vote.
     * @param _choice The choice selected by the voter.
     */
    function castVote(uint _choice)
        public
        onlyVoter(msg.sender)
    {
        // Trigger VoteCast event
        emit VoteCast(msg.sender, _choice);
    }

    /**
     * @dev Function that returns the total number of registered voters.
     * @return uint The total number of registered voters.
     */
    function getTotalVoters()
        public
        view
        returns (uint)
    {
        return totalVoters;
    }

    /**
     * @dev Function that checks if the provided address is a registered voter.
     * @param _address The address to check.
     * @return bool True if the address is a registered voter, false otherwise.
     */
    function checkVoter(address _address)
        public
        view
        returns (bool)
    {
        return voters[_address];
    }

}