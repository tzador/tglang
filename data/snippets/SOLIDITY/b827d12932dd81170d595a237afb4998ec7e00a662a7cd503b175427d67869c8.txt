/**
 * @title AdvancedToken
 * @dev A more complex token example with additional functions and features.
 */
contract AdvancedToken {

    // Token's name.
    string public name = "AdvancedToken";

    // Token's symbol.
    string public symbol = "ADV";

    // Token's total supply.
    uint256 totalSupply;

    // Mapping of all balances.
    mapping(address => uint256) balances;

    // Mapping of all allowances.
    mapping(address => mapping(address => uint256)) allowances;

    // Event emitted when new tokens are minted.
    event TokensMinted(address indexed to, uint256 amount);

    // Event emitted when tokens are burned.
    event TokensBurned(address indexed from, uint256 amount);

    /**
     * @dev Constructor function.
     * Initializes 'totalSupply' with initial token amount which will be locked.
     */
    constructor(uint256 _initialAmount) public {
        totalSupply = _initialAmount;
        // Lock initial tokens for the contract deployer.
        balances[msg.sender] = _initialAmount;
    }

    /**
     * @dev Function to get the total supply of tokens.
     * @return The total supply of tokens.
     */
    function getTotalSupply() constant public returns (uint256) {
        return totalSupply;
    }

    /**
     * @dev Function to get the balance of a specific address.
     * @param _address The address to query the balance of.
     * @return The balance of the specified address.
     */
    function getBalance(address _address) constant public returns (uint256) {
        return balances[_address];
    }

    /**
     * @dev Function to transfer tokens to a specified address.
     * @param _to The address to transfer tokens to.
     * @param _amount The amount of tokens to transfer.
     */
    function transfer(address _to, uint256 _amount) public {
        // Check if sender has enough tokens.
        require(balances[msg.sender] >= _amount);
        // Check if amount is not greater than zero.
        require(_amount > 0);
        // Subtract amount from sender's balance.
        balances[msg.sender] = balances[msg.sender] - _amount;
        // Add amount to receiver's balance.
        balances[_to] = balances[_to] + _amount;
    }

    /**
     * @dev Function to transfer tokens from one address to another.
     * @param _from The address to transfer tokens from.
     * @param _to The address to transfer tokens to.
     * @param _amount The amount of tokens to transfer.
     */
    function transferFrom(address _from, address _to, uint256 _amount) public {
        // Check if sender has enough allowance to transfer.
        require(allowances[_from][msg.sender] >= _amount);
        // Check if amount is not greater than zero.
        require(_amount > 0);
        // Subtract amount from sender's allowance.
        allowances[_from][msg.sender] = allowances[_from][msg.sender] - _amount;
        // Subtract amount from sender's balance.
        balances[_from] = balances[_from] - _amount;
        // Add amount to receiver's balance.
        balances[_to] = balances[_to] + _amount;
    }

    /**
     * @dev Function to approve a specific amount of tokens to be spent by a specified address.
     * @param _spender The address allowed to spend the tokens.
     * @param _amount The amount of tokens to be approved.
     */
    function approve(address _spender, uint256 _amount) public {
        // Set allowance from sender to spender.
        allowances[msg.sender][_spender] = _amount;
    }

    /**
     * @dev Function to transfer tokens from the contract to a specified address.
     * @param _to The address to transfer tokens to.
     * @param _amount The amount of tokens to transfer.
     */
    function mint(address _to, uint256 _amount) public {
        // Add amount to total supply.
        totalSupply = totalSupply + _amount;
        // Add amount to receiver's balance.
        balances[_to] = balances[_to] + _amount;
        // Emit 'TokensMinted' event.
        emit TokensMinted(_to, _amount);
    }

    /**
     * @dev Function to burn tokens from a specified address.
     * @param _from The address to burn tokens from.
     * @param _amount The amount of tokens to burn.
     */
    function burn(address _from, uint256 _amount) public {
        // Check if sender has enough tokens to burn.
        require(balances[_from] >= _amount);
        // Check if amount is not greater than zero.
        require(_amount > 0);
        // Subtract amount from total supply.
        totalSupply = totalSupply - _amount;
        // Subtract amount from sender's balance.
        balances[_from] = balances[_from] - _amount;
        // Emit 'TokensBurned' event.
        emit TokensBurned(_from, _amount);
    }

    /**
     * @dev Function to increase allowance for a specified address to spend tokens from the sender's tokens.
     * @param _spender The address allowed to spend the tokens.
     * @param _amount Increment of the allowance.
     */
    function increaseAllowance(address _spender, uint256 _amount) public {
        // Check if amount is not greater than zero.
        require(_amount > 0);
        // Add amount to sender's allowance for the specified address.
        allowances[msg.sender][_spender] = allowances[msg.sender][_spender] + _amount;
    }

    /**
     * @dev Function to decrease allowance for a specified address to spend sender's tokens.
     * @param _spender The address allowed to spend the tokens.
     * @param _amount Decrement of the allowance.
     */
    function decreaseAllowance(address _spender, uint256 _amount) public {
        // Check if sender has enough allowance.
        require(allowances[msg.sender][_spender] >= _amount);
        // Check if amount is not greater than zero.
        require(_amount > 0);
        // Subtract amount from sender's allowance for the specified address.
        allowances[msg.sender][_spender] = allowances[msg.sender][_spender] - _amount;
    }

    /**
     * Fallback function.
     * Reverts if ether is sent to this contract by mistake.
     */
    function () public payable {
        revert();
    }
}