pragma solidity ^0.8.0; //specifies the version of solidity being used

contract MyContract { //creates a new contract called MyContract
    
    uint256 public value; //declares a public variable of type uint256 named value
    
    constructor() { //creates the constructor function
        value = 5; //sets the initial value of the variable to 5
    }
    
    function setValue(uint256 _newValue) public { //creates a function called setValue that takes in a uint256 as a parameter and is accessible to the public
        value = _newValue; //sets the value of the variable to the new value passed in as a parameter
    }
    
    function getValue() public view returns (uint256) { //creates a function called getValue that is accessible to the public and returns a uint256 value
        return value; //returns the current value of the variable
    }
    
    modifier onlyOwner() { //creates a modifier called onlyOwner
        require(msg.sender == owner, "You are not the owner of this contract."); //checks if the sender is the owner of the contract, otherwise throws an error
        _; //continues execution if the condition is met
    }
    
    address owner; //declares a variable of type address named owner
    
    function changeOwner(address _newOwner) public onlyOwner { //creates a function called changeOwner that takes in an address as a parameter and is only accessible to the owner
        owner = _newOwner; //sets the owner to the new address
    }
    
    event ValueChanged(uint256 _newValue); //creates an event called ValueChanged that takes in a uint256 as a parameter
    
    function updateValue(uint256 _newValue) public onlyOwner { //creates a function called updateValue that takes in a uint256 as a parameter and is only accessible to the owner
        value = _newValue; //sets the value to the new value
        emit ValueChanged(_newValue); //emits the ValueChanged event with the new value
    }
    
}