/**
 * @title Voting
 * @dev Smart contract for managing a basic voting system
 */
contract Voting {

    // Struct to hold the details of a candidate
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
    }

    // Mapping of candidates by their id
    mapping(uint => Candidate) public candidates;

    // Mapping of address to indicate if it has already voted
    mapping(address => bool) public voters;

    // Number of candidates in the election
    uint public candidatesCount;

    // Constructor to initialize candidates and voters
    constructor() public {
        addCandidate("Candidate 1");
        addCandidate("Candidate 2");
    }

    /**
     * @dev Function to add a new candidate
     * @param _name string The name of the candidate
     */
    function addCandidate(string memory _name) private {
        candidatesCount++;
        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);
    }

    /**
     * @dev Function to vote for a candidate
     * @param _candidateId uint The id of the candidate being voted for
     */
    function vote(uint _candidateId) public {
        // Check if address has already voted
        require(!voters[msg.sender]);

        // Check if candidate is a valid option
        require(_candidateId > 0 && _candidateId <= candidatesCount);

        // Mark address as a voter
        voters[msg.sender] = true;

        // Increment vote count for candidate
        candidates[_candidateId].voteCount++;
    }

    /**
     * @dev Function to get the winner of the election
     * @return string The name of the winning candidate
     */
    function getWinner() public view returns (string memory) {
        uint maxVoteCount = 0;
        uint winnerId = 0;

        // Loop through candidates to find the one with the most votes
        for(uint i = 1; i <= candidatesCount; i++) {
            if(candidates[i].voteCount > maxVoteCount) {
                maxVoteCount = candidates[i].voteCount;
                winnerId = i;
            }
        }

        // Return name of the winner
        return candidates[winnerId].name;
    }
}