pragma solidity >=0.6.0 <0.8.0;
// ^ The version of Solidity we are using

contract ComplexContract {
    // ^ Indicates the start of a contract, named ComplexContract

    address payable owner;
    // ^ Declaring a variable 'owner' that stores an address, declared as 'payable'

    uint256 constant MAX_SUPPLY = 100000;
    // ^ Declaring a constant variable 'MAX_SUPPLY' with a value of 100000

    mapping (address => bool) registeredUsers;
    // ^ Defining a mapping data structure to store Boolean values for registered users based on their address

    event NewUserRegistered(address indexed user, uint256 date);
    // ^ Declaring an event called 'NewUserRegistered' which takes in the user's address and the date as parameters

    modifier onlyOwner {
        require(msg.sender == owner, "You are not the owner of this contract.");
        // ^ Modifier that checks if the caller of the function is the owner of the contract
        _;
        // ^ Indicates the code that will be executed after the function with this modifier is called
    }

    constructor () public {
        owner = msg.sender;
        // ^ Setting the 'owner' variable to the address of the person deploying the contract
    }

    function registerUser(address user) public returns (bool) {
        require(registeredUsers[user] == false, "User is already registered.");
        // ^ Checking if the user is not already registered
        registeredUsers[user] = true;
        // ^ Setting the user's status to registered in the mapping data structure
        emit NewUserRegistered(user, block.timestamp);
        // ^ Emitting the 'NewUserRegistered' event with the user's address and the current timestamp
        return true;
        // ^ Returning a boolean value
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Invalid new owner address.");
        // ^ Checking if the new owner's address is not 0
        owner = newOwner;
        // ^ Updating the 'owner' variable with the new owner's address
    }

    function changeMaxSupply(uint256 newMaxSupply) public onlyOwner {
        require(newMaxSupply > 0, "Max supply must be greater than 0.");
        // ^ Checking if the new max supply is greater than 0
        MAX_SUPPLY = newMaxSupply;
        // ^ Updating the 'MAX_SUPPLY' constant variable with the new value
    }
}
// ^ Closing the contract