// Contract to hold funds in a wallet
// Uses modifiers and events

contract Wallet {
  address owner; // address of the owner of the wallet
  mapping(address => uint) balances; // mapping of addresses to their respective balances
  uint totalBalance; // total balance of the wallet
  
  // Event emitted when a deposit is made
  event Deposit(address indexed _address, uint _amount);
  
  // Modifier to check if the caller is the owner of the wallet
  modifier onlyOwner {
    require(msg.sender == owner, "Only the owner can perform this action.");
    _;
  }
  
  // Constructor function to set the owner
  constructor() public {
    owner = msg.sender;
  }
  
  // Function to deposit funds into the wallet
  function deposit() public payable {
    balances[msg.sender] += msg.value; // increase the balance of the caller
    totalBalance += msg.value; // increase the total balance of the wallet
    emit Deposit(msg.sender, msg.value); // emit the deposit event
  }
  
  // Function to withdraw funds from the wallet
  function withdraw(uint _amount) public payable onlyOwner {
    require(_amount <= balances[msg.sender], "Insufficient balance.");

    balances[msg.sender] -= _amount; // decrease the balance of the caller
    totalBalance -= _amount; // decrease the total balance of the wallet

    // Transfer the funds to the owner
    msg.sender.transfer(_amount);
  }
  
  // Function to get the balance of a specific address
  function getBalance(address _address) public view returns (uint) {
    return balances[_address];
  }
  
  // Function to get the total balance of the wallet
  function getTotalBalance() public view returns (uint) {
    return totalBalance;
  }
}