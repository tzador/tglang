pragma solidity >=0.4.22 <0.7.0; // Specifies the version of Solidity used

// Declare a contract named Payroll
contract Payroll {

    // Declare variables
    address private owner; // Stores the address of the contract owner
    uint private salary; // Stores the salary amount
    uint private constant PAY_FREQ = 30 days; // Stores the pay frequency (30 days in this example)

    // Declare events
    event SalaryPaid(address recipient, uint amount); // Emits an event when salary is paid to a recipient

    // Constructor function to set the contract owner address and salary amount
    constructor(address _owner, uint _salary) public {
        owner = _owner; // Assign owner address
        salary = _salary; // Assign salary amount
    }

    // Modifier to restrict access to only the contract owner
    modifier onlyOwner {
        require(msg.sender == owner, "Only the contract owner can access this function.");
        _;
    }

    // Function to change the contract owner address
    function changeOwner(address newOwner) public onlyOwner {
        owner = newOwner; // Assign new owner address
    }

    // Function to change the salary amount
    function changeSalary(uint newSalary) public onlyOwner {
        salary = newSalary; // Assign new salary amount
    }

    // Function to get the current salary amount
    function getSalary() public view returns (uint) {
        return salary; // Return current salary amount
    }

    // Function to pay salary to a specified recipient
    function paySalary(address recipient) public onlyOwner {
        require(recipient != address(0), "Invalid recipient address."); // Check for valid recipient address
        uint amount = salary * (now/PAY_FREQ); // Calculate salary amount based on current time and pay frequency
        recipient.transfer(amount); // Transfer salary amount to recipient address
        emit SalaryPaid(recipient, amount); // Emit SalaryPaid event
    }
}