// Define a contract 'MultiRole'
contract MultiRole {

    // Declare variables to store role names
    string constant ROLE_ADMIN = "ADMIN";
    string constant ROLE_SUPERUSER = "SUPERUSER";
    string constant ROLE_USER = "USER";

    // Define a data structure to store role details
    struct Role {
        string name; // Name of the role
        mapping (address => bool) members; // Mapping to store addresses of members belonging to this role
    }

    // Declare a mapping to store available roles with their corresponding Role struct
    mapping (string => Role) roles;

    // Modifier to restrict access to certain functions to members of a specific role
    modifier onlyRole(string _role) {
        // Check if the caller belongs to the specified role
        require(roles[_role].members[msg.sender] == true, "Caller does not have required role");
        _;
    }

    // Constructor to add initial roles
    constructor() public {
        // Add initial roles to the mapping
        _addRole(ROLE_ADMIN);
        _addRole(ROLE_SUPERUSER);
        _addRole(ROLE_USER);
    }

    // Function to add new role
    function addRole(string _role) public onlyRole(ROLE_ADMIN) {
        // Use internal function to avoid code duplication
        _addRole(_role);
    }

    // Internal function to add new role to the 'roles' mapping
    function _addRole(string _role) internal {
        // Check if role does not already exist
        require(roles[_role].members[msg.sender] == false, "Role already exists");
        // Add role to the mapping
        roles[_role].name = _role;
        roles[_role].members[msg.sender] = true;
    }

    // Function to remove existing role
    function removeRole(string _role) public {
        // Check if caller has the required permission
        require(msg.sender == address(this), "Only contract itself can remove roles");
        // Remove role from the mapping
        delete roles[_role];
    }

    // Function to check if an address has a particular role
    function hasRole(string _role, address _member) public view returns (bool) {
        return roles[_role].members[_member];
    }
}