// SPDX-License-Identifier: UNLICENSED

// This contract represents a bank that serves as a custodian for users' funds

// Declaring the contract
contract Bank {

    // State variables
    address owner; // The owner of the bank
    mapping(address => uint) balances; // Map of user addresses to their balances
    uint totalFunds; // Total funds held by the bank

    // Event that is emitted when a user makes a deposit
    event Deposit(address _from, uint _amount);

    // Event that is emitted when a user withdraws funds
    event Withdrawal(address _to, uint _amount);

    // Constructor function
    constructor() public {
        // Set the contract owner to be the person who deployed the contract
        owner = msg.sender;
    }

    // Function to deposit funds into the bank
    function deposit() public payable {
        // Only allow deposits from non-zero addresses
        require(msg.sender != address(0), "Invalid address");

        // Add the deposited funds to the user's balance
        balances[msg.sender] += msg.value;

        // Update the total funds held by the bank
        totalFunds += msg.value;

        // Emit an event to signal the deposit
        emit Deposit(msg.sender, msg.value);
    }

    // Function to withdraw funds from the bank
    function withdraw(uint _amount) public {
        // Only allow withdrawals from non-zero balances
        require(balances[msg.sender] > 0, "Insufficient balance");

        // Only allow withdrawals up to the user's balance
        require(_amount <= balances[msg.sender], "Insufficient balance");

        // Transfer the requested amount to the user's address
        msg.sender.transfer(_amount);

        // Update the user's balance
        balances[msg.sender] -= _amount;

        // Update the total funds held by the bank
        totalFunds -= _amount;

        // Emit an event to signal the withdrawal
        emit Withdrawal(msg.sender, _amount);
    }

    // Function to get a user's balance
    function getBalance(address _user) public view returns (uint) {
        // Check if the user's balance is greater than 0
        if (balances[_user] > 0) {
            // Return the user's balance
            return balances[_user];
        } else {
            // Return 0 if the user's balance is 0
            return 0;
        }
    }

    // Function to transfer funds from one user to another
    function transfer(address _to, uint _amount) public {
        // Only allow transfers from non-zero balances
        require(balances[msg.sender] > 0, "Insufficient balance");

        // Only allow transfers up to the user's balance
        require(_amount <= balances[msg.sender], "Insufficient balance");

        // Transfer the requested amount to the user's address
        msg.sender.transfer(_amount);

        // Update the sender's balance
        balances[msg.sender] -= _amount;

        // Update the recipient's balance
        balances[_to] += _amount;
    }
}