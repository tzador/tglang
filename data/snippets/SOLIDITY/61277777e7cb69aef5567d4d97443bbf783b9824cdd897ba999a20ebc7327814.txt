/**
 * @title Voting
 * @dev Implements a basic voting system using smart contracts
 */

contract Voting {
    // Variables
    mapping(bytes32 => uint8) public votesReceived; // Stores the votes received for each candidate
    bytes32[] public candidateList; // Stores the list of candidates

    // Events
    event VoteCast(address indexed voter, bytes32 indexed candidate); // Triggered when someone casts a vote

    // Constructor
    constructor(bytes32[] candidates) public {
        candidateList = candidates;
    }

    // Functions
    /**
     * @dev Allows a user to cast a vote for a specific candidate
     * @param candidate The name of the candidate
     */
    function castVote(bytes32 candidate) public {
        require(validCandidate(candidate)); // Check if the candidate is valid

        votesReceived[candidate] += 1; // Increment the vote count for the candidate
        emit VoteCast(msg.sender, candidate); // Trigger the VoteCast event
    }

    /**
     * @dev Checks if the given candidate is valid
     * @param candidate The name of the candidate
     * @return Boolean indicating if the candidate is valid or not
     */
    function validCandidate(bytes32 candidate) public view returns (bool) {
        for (uint i = 0; i < candidateList.length; i++) {
            if (candidateList[i] == candidate) return true; // If candidate is found, return true
        }
        return false; // If candidate is not found, return false
    }

    /**
     * @dev Returns the vote count for a specific candidate
     * @param candidate The name of the candidate
     * @return Vote count for the given candidate
     */
    function getVotesForCandidate(bytes32 candidate) public view returns (uint8) {
        require(validCandidate(candidate)); // Check if the candidate is valid

        return votesReceived[candidate]; // Return the vote count for the candidate
    }
}