contract MyContract {
    
    address owner; // owner variable
    uint public totalSupply; // public variable for total supply
    mapping (address => uint) balances; // mapping to store balances of addresses
    mapping (address => mapping (address => uint)) allowed; // mapping to store allowances for a specific address
    
    //events for transfer and approval
    event Transfer(address indexed _from, address indexed _to, uint _amount);
    event Approval(address indexed _owner, address indexed _spender, uint _amount);
    
    //MODIFIERS
    modifier onlyOwner{
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }
    
    //constructor function to set initial values
    constructor(uint _supply) public {
        owner = msg.sender;
        totalSupply = _supply; 
        balances[msg.sender] = _supply;
    }
    
    //function to get balance of an address
    function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
    }
    
    //function to transfer tokens from one address to another
    function transfer(address _to, uint _amount) public returns (bool success) {
        //check if the sender has enough tokens
        require(_amount <= balances[msg.sender], "Insufficient balance");
        
        //update balances
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
        
        //emit event
        emit Transfer(msg.sender, _to, _amount);
        
        return true;
    }
    
    //function to approve allowance for a specific address
    function approve(address _spender, uint _amount) public returns (bool success) {
        //update allowance
        allowed[msg.sender][_spender] = _amount;
        
        //emit event
        emit Approval(msg.sender, _spender, _amount);
        
        return true;
    }
    
    //function to transfer tokens from one address to another on behalf of the owner
    function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {
        //check if the sender has enough allowance
        require(_amount <= allowed[_from][msg.sender], "Insufficient allowance");
        
        //check if the sender has enough tokens
        require(_amount <= balances[_from], "Insufficient balance");
        
        //update balances and allowance
        balances[_from] -= _amount;
        balances[_to] += _amount;
        allowed[_from][msg.sender] -= _amount;
        
        //emit event
        emit Transfer(_from, _to, _amount);
        
        return true;
    }
}