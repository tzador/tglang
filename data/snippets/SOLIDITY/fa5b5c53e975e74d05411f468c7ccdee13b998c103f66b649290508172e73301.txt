pragma solidity ^0.8.0; //specifies the compiler version

contract MyContract { //defines a contract
    uint256 private number; //declares a private variable of type uint256
    
    //This is a single-line comment
    
    /*
    This is a multi-line
    comment
    */
    
    constructor() { //constructor function
        number = 10; //initializes the variable to a value of 10
    }
    
    function updateNumber(uint256 newNumber) public { //function to update the value of number
        require(number < newNumber, "New number must be greater than current number"); //requires that the new number is greater than the current number
        number = newNumber; //updates the value of number
    }
    
    function getNumber() public view returns (uint256) { //function to retrieve the value of number
        return number; //returns the value of number
    }
    
    event NumberUpdated(uint256 newNumber); //event to log when the value of number is updated
    
    function emitEvent(uint256 newNumber) public { //function to emit the NumberUpdated event
        emit NumberUpdated(newNumber); //emits the event with the parameter newNumber
    }
    
    //Inheritance
    contract NewContract is MyContract { //creates a new contract that inherits from MyContract
        uint256 private newNumber;
    
        constructor() {
            newNumber = 20;
        }
        
        function updateNewNumber() public { //function to update the value of newNumber
            require(newNumber > getNumber(), "New number must be greater than old number"); //requires that the new number is greater than the value retrieved from the getNumber function
            updateNumber(newNumber); //calls the updateNumber function from MyContract
        }
    }
    
    /*
    Modifiers
    Modifiers are functions that can be used to modify the behavior of other functions in the contract
    */
    
    modifier validateNewNumber(uint256 newNumber) { //modifier function that validates the newNumber parameter before executing the function
        require(newNumber > 0, "New number must be greater than 0"); //requires that the new number is greater than 0
        _; //placeholder for the function body
    }
    
    function updateNumberWithModifier(uint256 newNumber) public validateNewNumber(newNumber) { //function that uses the validateNewNumber modifier
        number = newNumber; //updates the value of number
    }
    
    /*
    Enums
    Enums are used to create custom types with a limited number of possible values
    */
    
    enum Color { //defines an enum called Color
        RED,
        GREEN,
        BLUE
    }
    
    Color public color = Color.RED; //declares a public variable of type Color and initializes it to the RED value from the enum
    
    function setColor(Color newColor) public { //function to update the value of color
        color = newColor; //updates the value of color with the newColor parameter
    }
    
    /*
    Structs
    Structs are used to create custom data types that can hold multiple values
    */
    
    struct Person { //defines a struct called Person
        string name;
        uint256 age;
    }
    
    Person public person; //declares a public variable of type Person
    
    constructor(string memory newName, uint256 newAge) { //constructor function to initialize the values of person
        person = Person(newName, newAge); //creates a new instance of Person with the provided parameters
    }
    
    function updatePerson(string memory newName, uint256 newAge) public { //function to update the values of person
        person = Person(newName, newAge); //updates the values of person with the provided parameters
    }
    
    /*
    View and Pure Functions
    View functions do not modify the state of the contract, while pure functions do not even read the state.
    */
    
    function addNumbers(uint256 num1, uint256 num2) public pure returns (uint256) { //pure function that adds two numbers and returns the sum
        return num1 + num2; //returns the sum of num1 and num2
    }
    
    function getSum() public view returns (uint256) { //view function that retrieves the sum of the number variable and a constant value
        uint256 constant value = 5; //declares a constant value of 5
        return number + value; //returns the sum of the number variable and the constant value
    }
}