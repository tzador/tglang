pragma solidity ^0.8.0;

contract Token {                       // Defining a contract named Token

  mapping(address => uint) balances;   // Declaring a mapping data structure to store the balance of each address

  event Transfer(address indexed from, address indexed to, uint value);   // Defining an event to emit when a transfer is made

  // Initializing the contract with some initial supply of tokens
  constructor(uint initialSupply) {
    balances[msg.sender] = initialSupply;   // Assigning the initial supply to the contract creator's address
  }

  function transfer(address to, uint value) public returns (bool) {

    require(balances[msg.sender] > value);   // Checking if the sender has enough balance to make the transfer
    require(balances[to] + value > balances[to]);   // Checking for integer overflow in the recipient's balance

    balances[msg.sender] -= value;   // Deducting the transferred amount from the sender's balance
    balances[to] += value;   // Adding the transferred amount to the recipient's balance

    emit Transfer(msg.sender, to, value);   // Emitting the transfer event

    return true;   // Returning true to signify a successful transfer
  }

  function getBalance(address addr) public view returns (uint) {
    return balances[addr];   // Returning the balance of the specified address
  }

}