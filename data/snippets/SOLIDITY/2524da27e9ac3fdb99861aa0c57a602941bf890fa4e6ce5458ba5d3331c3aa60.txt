// This is a contract that implements a basic banking system
// with the ability to deposit, withdraw and check balances

contract Bank {
    
    // State variables
    mapping(address => uint256) balances;
    address public owner;
    
    // Events
    event Deposit(address indexed depositor, uint256 amount);
    event Withdrawal(address indexed receiver, uint256 amount);
    
    // Constructor
    constructor() public {
        owner = msg.sender;
    }
    
    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }
    
    // Functions
    
    /// @dev Deposits an amount into the depositor's account
    function deposit() public payable {
        require(msg.value > 0, "Amount must be greater than 0");
        
        balances[msg.sender] += msg.value;
        
        emit Deposit(msg.sender, msg.value);
    }
    
    /// @dev Withdraws an amount from the sender's account
    /// @param amount The amount to be withdrawn from the sender's account
    function withdraw(uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        msg.sender.transfer(amount);
        
        balances[msg.sender] -= amount;
        
        emit Withdrawal(msg.sender, amount);
    }
    
    /// @dev Checks the balance of the specified address
    /// @param addr The address to check the balance of
    /// @return The balance of the specified address
    function checkBalance(address addr) public view returns (uint256) {
        return balances[addr];
    }
}