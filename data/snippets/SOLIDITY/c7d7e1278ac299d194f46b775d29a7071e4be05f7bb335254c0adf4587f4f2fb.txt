// This contract implements a basic voting system
// with the SOLIDITY programming language.

pragma solidity ^0.8.0;

// Importing libraries
import "./SafeMath.sol";

contract Voting {
    // SafeMath library for preventing overflows and underflows
    using SafeMath for uint256;

    // Mapping of candidates to their respective vote counts
    mapping (string => uint256) public candidateVotes;

    // List of all candidates
    string[] public candidateList;

    // Address of the contract owner
    address public owner;

    // Event for new candidate registration
    event NewCandidate(string candidate);

    // Event for vote casted
    event NewVote(string candidate);

    // Event for candidate removed
    event CandidateRemoved(string candidate);

    // Modifier to check if the caller is the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action");
        _;
    }

    // Constructor - sets the contract owner
    constructor() {
        owner = msg.sender;
    }

    // Function to register a new candidate
    function registerCandidate(string memory candidateName) public onlyOwner {
        // Check if the candidate is already registered
        require(candidateVotes[candidateName] == 0, "Candidate already registered");

        // Add the candidate to the list and set their vote count to 0
        candidateList.push(candidateName);
        candidateVotes[candidateName] = 0;

        // Trigger the NewCandidate event
        emit NewCandidate(candidateName);
    }

    // Function for a voter to cast their vote
    function castVote(uint256 index) public {
        // Check if the candidate index is valid
        require(index < candidateList.length, "Invalid candidate index");

        // Increment the vote count for the candidate
        candidateVotes[candidateList[index]] = candidateVotes[candidateList[index]].add(1);

        // Trigger the NewVote event
        emit NewVote(candidateList[index]);
    }

    // Function to remove a candidate from the list
    function removeCandidate(uint256 index) public onlyOwner {
        // Check if the candidate index is valid
        require(index < candidateList.length, "Invalid candidate index");

        // Remove the candidate from the list and set their vote count to 0
        string memory candidate = candidateList[index];
        candidateList[index] = candidateList[candidateList.length - 1];
        candidateList.pop();
        candidateVotes[candidate] = 0;

        // Trigger the CandidateRemoved event
        emit CandidateRemoved(candidate);
    }
}