/**
 * @title Voting
 * @dev A voting contract using Solidity
 */
contract Voting {

    // mapping for storing candidate names and vote counts
    mapping (bytes32 => uint8) public votesReceived;

    // array for storing list of candidates
    bytes32[] public candidateList;

    // event to notify the addition of a new candidate
    event AddedCandidate(bytes32 candidate);

    // constructor function to add initial candidates to the list
    constructor() public {
        candidateList.push("Candidate 1");
        candidateList.push("Candidate 2");
    }

    // function to add a new candidate to the list
    function addCandidate(bytes32 candidate) public {
        // checking if the candidate already exists in the list
        require(votesReceived[candidate] == 0, "Candidate already exists in the list!");

        // adding the new candidate to the list
        candidateList.push(candidate);

        // emitting the event to notify the addition of a new candidate
        emit AddedCandidate(candidate);
    }

    // function to vote for a candidate
    function voteForCandidate(bytes32 candidate) public {
        // checking if the candidate is in the list
        require(votesReceived[candidate] != 0, "Candidate does not exist in the list!");

        // incrementing the vote count for the selected candidate
        votesReceived[candidate] += 1;
    }

    // function to get the total vote count for a candidate
    function getVoteCount(bytes32 candidate) public view returns (uint8) {
        return votesReceived[candidate];
    }
}