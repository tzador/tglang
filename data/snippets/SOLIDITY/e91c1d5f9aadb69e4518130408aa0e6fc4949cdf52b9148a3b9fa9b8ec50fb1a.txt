pragma solidity ^0.7.0; // Solidity version

contract Bank { // Contract declaration
    address public owner; // Declaring a public variable

    mapping(address => uint) balances; // Declaring a mapping (key-value pair)

    modifier onlyOwner { // Defining a modifier
        require(msg.sender == owner, "Only owner can call this function."); // Using "require" global function
        _; // Placeholder for the code inside the function where the modifier is used
    }

    constructor() { // Constructor function
        owner = msg.sender; // Assigning the address of the contract's creator to the owner variable
    }

    function deposit() public payable { // Public deposit function
        balances[msg.sender] += msg.value; // Updating the balance of the sender
    }

    function withdraw(uint amount) public onlyOwner { // Public withdraw function with the onlyOwner modifier
        require(amount <= balances[msg.sender], "Insufficient funds."); // Using "require" global function
        balances[msg.sender] -= amount; // Updating the balance of the sender
        msg.sender.transfer(amount); // Transferring the specified amount to the owner
    }

    function getBalance() public view returns (uint) { // Public view function to retrieve the balance of the sender
        return balances[msg.sender]; // Returning the balance of the sender
    }
}