// Filename: myContract.sol
// This is a contract written in Solidity
// It implements a basic bank account

pragma solidity ^0.8.0; // This indicates the version of Solidity to be used

// Declare a new contract called `BankAccount`
contract BankAccount {

    // Define the account owner as a variable of type `address`
    address public owner;

    // Define the starting balance as a variable of type `uint`
    uint public balance;

    // Create a constructor function that will run once when the contract is deployed
    constructor() {
        // Set the owner of the account to be the account that deployed the contract
        owner = msg.sender;
        // Set the initial balance to be 0
        balance = 0;
    }

    // Define a function to deposit funds into the account
    // This function takes in the amount of funds to be deposited as a parameter
    function deposit(uint amount) public {
        // Ensure that the amount deposited is greater than 0
        require(amount > 0, "Invalid amount.");
        // Add the deposited amount to the current balance
        balance += amount;
    }

    // Define a function to withdraw funds from the account
    // This function takes in the amount of funds to be withdrawn as a parameter
    function withdraw(uint amount) public {
        // Ensure that the amount withdrawn does not exceed the current balance
        require(balance >= amount, "Insufficient balance.");
        // Subtract the withdrawn amount from the current balance
        balance -= amount;
    }

    // Define a function to check the account balance
    // This function does not take in any parameters
    // It returns the current balance
    function checkBalance() public view returns (uint) {
        return balance;
    }

}