pragma solidity ^0.8.0; // 1. Setting the version of the Solidity compiler

contract MyContract { // 2. Defining the contract

    address public owner; // 3. Declaring a state variable, public accessor ensures "owner" can be accessed by anyone on the blockchain

    constructor() { // 4. Defining the constructor function, only runs once when the contract is deployed
        owner = msg.sender; // 5. Set the value of "owner" to the address of the person who deployed the contract
    }

    function updateOwner(address newOwner) public { // 6. Defining a function that allows the current owner to update the owner address
        require(msg.sender == owner, "Only the owner can update the owner address"); // 7. Guarding against unauthorized updates by checking that the function caller is the current owner
        owner = newOwner; // 8. Set the new owner address
    }
    
    function transferOwnership(address newOwner) public { //9. Defining a function that allows the current owner to transfer ownership to a new address
        require(msg.sender == owner, "Only the owner can transfer ownership"); //10. Guarding against unauthorized transfers by checking that the function caller is the current owner
        owner = newOwner; //11. Set the new owner address
    }
    
    function sendFunds(address payable recipient, uint amount) public { //12. Defining a function that allows the contract owner to send funds to a specific recipient
        require(msg.sender == owner, "Only the owner can send funds"); //13. Guarding against unauthorized transfers by checking that the function caller is the current owner
        require(address(this).balance >= amount, "Insufficient balance"); //14. Checking that the contract has enough funds to send
        recipient.transfer(amount); //15. Sending the specified amount to the recipient
    }
    
    function receiveFunds() public payable { //16. Defining a function that allows the contract to receive funds
    }

}