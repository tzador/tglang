// Code snippet in SOLIDITY programming language
	// This code creates a contract for a simple voting system

	pragma solidity ^0.8.0;

	contract Voting {
		
		// Array to store the list of candidates
		string[] public candidates;

		// Dictionary to store the vote count for each candidate
		mapping(string => uint) public voteCount;

		// Event to emit when a new vote is casted
		event NewVote(string candidate, uint totalVotes);

		// Modifier to check if the sender is authorized to vote
		modifier onlyVoter() {
			require(msg.sender == authorizedVoters[msg.sender], "You are not authorized to vote.");
			_;
		}

		// Constructor to initialize the list of candidates
		constructor(string[] memory _candidates) {
			candidates = _candidates;
		}

		// Function to add a new candidate to the list
		function addCandidate(string memory _candidate) public {
			candidates.push(_candidate);
		}

		// Function to give permission for a voter to vote
		function givePermission(address _voter) public {
			authorizedVoters[_voter] = true;
		}

		// Function to cast a vote for a specific candidate
		function vote(string memory _candidate) public onlyVoter {
			voteCount[_candidate]++;
			emit NewVote(_candidate, voteCount[_candidate]);
		}

		// Function to get the total number of votes for a specific candidate
		function getTotalVotes(string memory _candidate) public view returns (uint) {
			return voteCount[_candidate];
		}
	}