pragma solidity 0.8.4;

contract YourContract {
  // This contract implements a simple bank system
  
  mapping(address => uint) private balances; // tracks balances of all accounts
  
  event Deposit(address indexed _account, uint _amount); // event to signal deposit transaction
  event Withdrawal(address indexed _account, uint _amount); // event to signal withdrawal transaction
  
  // Function to deposit funds into the bank
  function deposit() public payable {
    require(msg.value > 0, "Deposit amount must be greater than 0"); // require deposit to be greater than 0
    
    balances[msg.sender] += msg.value; // add deposited amount to sender's balance
    
    emit Deposit(msg.sender, msg.value); // emit deposit event
  }
  
  // Function to withdraw funds from the bank
  function withdraw(uint _amount) public {
    require(balances[msg.sender] >= _amount, "Insufficient balance"); // require sufficient balance for withdrawal
    
    balances[msg.sender] -= _amount; // subtract withdrawal amount from sender's balance
    payable(msg.sender).transfer(_amount); // transfer funds to sender
    
    emit Withdrawal(msg.sender, _amount); // emit withdrawal event
  }
  
  // Function to check account balance
  function checkBalance() public view returns (uint) {
    return balances[msg.sender];
  }
  
  // Function to get total deposits in the bank
  function getTotalDeposits() public view returns (uint) {
    uint totalDeposits;
    
    // loop through all accounts and add their balances to totalDeposits
    for (uint i = 0; i < msg.sender.length; i++) {
      totalDeposits += balances[msg.sender[i]];
    }
    
    return totalDeposits;
  }
}