pragma solidity ^0.8.0;

// Define a contract called MyToken
contract MyToken 
{
    string public name; // Name of the token

    // Declare a public mapping of addresses to balances
    mapping(address => uint256) public balanceOf;
    
    // Declare a public mapping of addresses to a mapping of addresses to approved amounts
    mapping(address => mapping(address => uint256)) public allowance;

    // Declare a public variable for total supply of tokens
    uint256 public totalSupply;
    
    // Declare an event for when tokens are transferred
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    // Declare an event for when an approval for token spending is made
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Constructor function that initializes the token
    constructor(string memory tokenName) 
    {
        name = tokenName; // Set the token name
    }
    
    // Function to transfer tokens from one address to another
    function transfer(address _to, uint256 _value) public returns (bool success) 
    {
        require(balanceOf[msg.sender] >= _value); // Check if sender has enough tokens
        require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflow
        
        balanceOf[msg.sender] -=  _value; // Subtract tokens from sender
        balanceOf[_to] += _value; // Add tokens to receiver
        
        emit Transfer(msg.sender, _to, _value); // Trigger transfer event
        
        return true; // Return success
    }
    
    // Function to approve a spender to spend tokens on behalf of the token owner
    function approve(address _spender, uint256 _value) public returns (bool success) 
    {
        allowance[msg.sender][_spender] = _value; // Set the approved amount
        
        emit Approval(msg.sender, _spender, _value); // Trigger approval event
        
        return true; // Return success
    }
    
    // Function to transfer tokens from one address to another on behalf of the sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) 
    {
        require(balanceOf[_from] >= _value); // Check if sender has enough tokens
        require(allowance[_from][msg.sender] >= _value); // Check if the sender is approved to spend tokens
        require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflow
        
        balanceOf[_from] -= _value; // Subtract tokens from sender
        balanceOf[_to] += _value; // Add tokens to receiver
        
        allowance[_from][msg.sender] -= _value; // Subtract approved amount from sender
        emit Transfer(_from, _to, _value); // Trigger transfer event
        
        return true; // Return success
    }
    
    // Function to mint new tokens and add to total supply
    function mint(address _to, uint256 _amount) public 
    {
        totalSupply += _amount; // Add amount to total supply
        balanceOf[_to] += _amount; // Add tokens to receiver
        
        emit Transfer(address(0), _to, _amount); // Trigger transfer event for minted tokens
    }
    
    // Function to burn tokens and subtract from total supply
    function burn(address _from, uint256 _amount) public 
    {
        require(balanceOf[_from] >= _amount); // Check if sender has enough tokens to burn
        
        balanceOf[_from] -= _amount; // Subtract tokens from sender
        totalSupply -= _amount; // Subtract amount from total supply
        
        emit Transfer(_from, address(0), _amount); // Trigger transfer event for burned tokens
    }
}