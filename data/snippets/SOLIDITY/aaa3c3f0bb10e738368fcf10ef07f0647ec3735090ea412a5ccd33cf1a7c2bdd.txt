pragma solidity ^0.8.0;

contract MyContract {

  // state variables
  uint private num;
  address private owner;
  mapping(address => bool) private whitelist;

  // events
  event NumSet(uint indexed _num);
  event OwnerSet(address indexed _owner);
  event AddedToWhitelist(address indexed _address);
  event RemovedFromWhitelist(address indexed _address);

  // constructor
  constructor() {
    owner = msg.sender;
  }

  // modifiers
  modifier onlyOwner {
    require(msg.sender == owner, "Caller is not the owner");
    _;
  }

  modifier onlyWhitelisted {
    require(whitelist[msg.sender] == true, "Caller is not whitelisted");
    _;
  }

  // function to set num
  function setNum(uint _num) public onlyOwner {
    num = _num;
    emit NumSet(_num);
  }

  // function to set owner
  function setOwner(address _owner) public onlyOwner {
    owner = _owner;
    emit OwnerSet(_owner);
  }

  // function to add address to whitelist
  function addToWhitelist(address _address) public onlyOwner {
    require(whitelist[_address] == false, "Address is already whitelisted");
    whitelist[_address] = true;
    emit AddedToWhitelist(_address);
  }

  // function to remove address from whitelist
  function removeFromWhitelist(address _address) public onlyOwner {
    require(whitelist[_address] == true, "Address is not whitelisted");
    whitelist[_address] = false;
    emit RemovedFromWhitelist(_address);
  }

  // function to get num
  function getNum() public view onlyWhitelisted returns (uint) {
    return num;
  }

  // function to get owner
  function getOwner() public view returns (address) {
    return owner;
  }

  // function to check if an address is whitelisted
  function isWhitelisted(address _address) public view returns (bool) {
    return whitelist[_address];
  }
}