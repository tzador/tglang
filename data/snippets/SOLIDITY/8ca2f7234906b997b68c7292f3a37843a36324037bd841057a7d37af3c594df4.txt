// This contract outlines a decentralized voting system

contract VotingSystem {

  // Data structures for managing votes and candidates
  mapping(address => bool) hasVoted;
  mapping(uint => Candidate) candidates;
  uint numCandidates;
  uint maxVotes;

  // Custom data structure for candidates
  struct Candidate {
    string name;
    uint numVotes;
  }

  // Event for when a vote is cast
  event VoteCast(address voter, uint candidateId);

  // Constructor to initialize the contract
  constructor(string[] candidateNames) public {
    // Add candidates to the candidate mapping
    for(uint i = 0; i < candidateNames.length; i++) {
      candidates[numCandidates] = Candidate({ name: candidateNames[i], numVotes: 0 });
      numCandidates++;
    }
    // Set maxVotes to total number of candidates
    maxVotes = numCandidates;
  }

  // Function to cast a vote for a candidate
  function castVote(uint candidateId) public {
    // Check if voter has already voted
    require(!hasVoted[msg.sender]);
    // Check if candidateId is valid
    require(candidateId < numCandidates);
    // Update numVotes for candidate
    candidates[candidateId].numVotes++;
    // Set hasVoted to true for this voter
    hasVoted[msg.sender] = true;
    // Emit VoteCast event
    emit VoteCast(msg.sender, candidateId);
  }

  // Function to get the winner of the election
  function getWinner() public view returns (string) {
    uint topVotes = candidates[0].numVotes;
    uint winnerIndex = 0;
    for(uint i = 1; i < numCandidates; i++) {
      // Check for ties
      if (topVotes == candidates[i].numVotes) {
        // Make sure winnerIndex is set to smallest index in case of a tie
        if (winnerIndex > i) {
          winnerIndex = i;
        }
      }
      // Check if current candidate has more votes than current winner
      else if (candidates[i].numVotes > topVotes) {
        topVotes = candidates[i].numVotes;
        winnerIndex = i;
      }
    }
    // Return name of winner
    return candidates[winnerIndex].name;
  }

}