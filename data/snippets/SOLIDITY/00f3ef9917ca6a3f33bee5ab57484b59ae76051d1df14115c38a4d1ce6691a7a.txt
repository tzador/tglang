contract MyContract {
    
    // State variables
    uint256 private myVariable;
    address payable private owner;
    mapping(address => bool) private authorizedUsers;
    
    // Events
    event ValueChanged (uint256 newValue);
    
    // Constructor
    constructor () public {
        owner = msg.sender;
    }
    
    // Modifier
    modifier onlyOwner () {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }
    
    // Functions
    function setValue(uint256 _newValue) external onlyOwner {
        myVariable = _newValue;
        emit ValueChanged(_newValue);
    }
    
    function getValue() external view returns (uint256) {
        return myVariable;
    }
    
    function authorizeUser(address _user) external onlyOwner {
        authorizedUsers[_user] = true;
    }
    
    function revokeUser(address _user) external onlyOwner {
        authorizedUsers[_user] = false;
    }
    
    // Fallback function
    function () external payable {
        require(authorizedUsers[msg.sender], "Sender is not authorized to send Ether to this contract");
    }
}