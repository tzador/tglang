pragma solidity ^0.8.0; //Specifies the compiler version

contract MyContract { //Contract declaration
    string public myString; //Public state variable of type string
    
    constructor(string memory _initialString) { //Constructor that takes in a string parameter
        myString = _initialString; //Assigns the parameter value to the myString state variable
    }
    
    function setMyString(string memory _newString) public { //Function to update the value of myString state variable
        myString = _newString; //Assigns the new string value to myString
    }
    
    function getMyString() public view returns (string memory) { //Function to retrieve the value of myString state variable
        return myString; //Returns the value of myString
    }
    
    function splitString(string memory _input) private pure returns (string[] memory) { //Private function to split a string into an array of strings
        bytes memory strBytes = bytes(_input); //Converts the input string into a byte array
        string[] memory result = new string[](strBytes.length); //Creates a string array with the length of the byte array
        
        for (uint i = 0; i < strBytes.length; i++) { //Loop through the byte array
            result[i] = string(strBytes[i]); //Assigns each byte element to a string in the array
        }
        
        return result; //Returns the string array containing the split string
    }

    function reverseString(string memory _input) private pure returns (string memory) { //Private function to reverse a string
        bytes memory strBytes = bytes(_input); //Converts the input string into a byte array
        
        for (uint i = 0; i < strBytes.length / 2; i++) { //Loop through half the length of the byte array
            bytes1 temp = strBytes[i]; //Temporarily stores the byte value at index i
            strBytes[i] = strBytes[strBytes.length - i - 1]; //Swaps the byte at index i with the byte at the corresponding index from the end
            strBytes[strBytes.length - i - 1] = temp; //Swaps the byte at the end with the byte at index i
        }

        return string(strBytes); //Returns the reversed string
    }
    
    function compareStrings(string memory _input1, string memory _input2) private pure returns (bool) { //Private function to compare two strings
        return (keccak256(abi.encodePacked(_input1)) == keccak256(abi.encodePacked(_input2))); //Compares the hashed values of the two strings and returns a boolean
    }
}