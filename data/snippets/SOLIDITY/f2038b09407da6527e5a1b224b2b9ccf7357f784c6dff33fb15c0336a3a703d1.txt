contract ContractA {
    // Define state variables
    bool private isActive;
    uint256 private totalFunds;
    address public owner;

    // Define event to be emitted when funds are received
    event FundsReceived(uint256 amount, address sender);

    // Constructor function that sets the owner of the contract
    constructor() public {
        owner = msg.sender;
    }

    // Modifier to ensure only the owner can call certain functions
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }

    // Function to receive funds and update totalFunds state variable
    function receiveFunds() external payable {
        isActive = true;
        totalFunds += msg.value;
        emit FundsReceived(msg.value, msg.sender);
    }

    // Function to withdraw funds, only callable by owner
    function withdrawFunds() external payable onlyOwner {
        require(isActive == true, "Funds must be active before they can be withdrawn.");
        uint256 withdrawAmount = totalFunds / 2;
        totalFunds -= withdrawAmount;
        msg.sender.transfer(withdrawAmount);
        isActive = false;
    }
}