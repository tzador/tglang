contract Token {
// Annotated markdown code snippet for creating a contract called Token
    string public name = "MyToken"; // State variable with data type string and a public modifier
    string public symbol = "MTK"; // State variable with data type string and a public modifier
    uint public totalSupply = 1000000; // State variable with data type uint and a public modifier

    mapping(address => uint) public balances; // Mapping with key of type address and value of type uint

    event Transfer(address indexed _from, address indexed _to, uint _value); // Event to emit when transfer happens

    constructor() public { // Constructor function with public modifier
        balances[msg.sender] = totalSupply; // Setting the balance of the contract creator to the total supply
    }

    function transfer(address _to, uint _value) public returns (bool) { // Function to transfer tokens
        require(balances[msg.sender] >= _value); // Checks if the sender has enough tokens to transfer
        require(_to != address(0)); // Checks if the address to transfer to is not 0x0

        balances[msg.sender] -= _value; // Deducting the tokens from the sender's balance
        balances[_to] += _value; // Adding the tokens to the recipient's balance
        emit Transfer(msg.sender, _to, _value); // Emitting Transfer event
        return true; // Returning true to indicate successful transfer
    }

    function approve(address _spender, uint _value) public returns (bool) { // Function to give approval for other address to spend tokens
        require(_spender != address(0)); // Checks if the address to approve is not 0x0
        require(_value <= balances[msg.sender]); // Checks if the sender has enough tokens to approve

        allowed[msg.sender][_spender] = _value; // Setting the allowed amount for the spender
        emit Approval(msg.sender, _spender, _value); // Emitting Approval event
        return true; // Returning true to indicate successful approval
    }

    function transferFrom(address _from, address _to, uint _value) public returns (bool) { // Function to transfer tokens from other address
        require(_value <= balances[_from]); // Checks if the sender has enough tokens to transfer
        require(_value <= allowed[_from][msg.sender]); // Checks if the sender is allowed to transfer the specified amount

        balances[_from] -= _value; // Deducting the tokens from the sender's balance
        balances[_to] += _value; // Adding the tokens to the recipient's balance
        allowed[_from][msg.sender] -= _value; // Deducting the allowed amount for the spender
        emit Transfer(_from, _to, _value); // Emitting Transfer event
        return true; // Returning true to indicate successful transfer
    }

    function allowance(address _owner, address _spender) public view returns (uint remaining) { // Function to get the amount of tokens approved
        return allowed[_owner][_spender]; // Returning the allowed amount for the spender from the owner's balance
    }

    mapping(address => mapping(address => uint)) allowed; // Nested mapping with first key of type address and second key of type address and value of type uint

    event Approval(address indexed _owner, address indexed _spender, uint _value); // Event to emit when approval happens
}