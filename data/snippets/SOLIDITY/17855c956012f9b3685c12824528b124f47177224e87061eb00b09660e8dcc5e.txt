contract MyContract {
    // this is a single-line comment
    /* 
    This is a
    multi-line comment
    */
    
    address public owner;
    
    // Events for logging
    event NewValueSet(uint256 value);
    event ValueTransfer(address from, address to, uint256 value);
    
    // Structs to define custom data types
    struct Person {
        string name;
        uint8 age;
        address wallet;
    }
    
    // Mappings for storing data
    mapping(address => uint256) public balances;
    mapping(uint256 => bool) internal validValues;
    
    // Modifier to set restrictions on functions
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function!");
        _;
    }
    
    // Constructor function to set initial values
    constructor() public {
        owner = msg.sender;
    }
    
    // Function to set a new value, can only be called by the owner
    function setValue(uint256 _value) public onlyOwner {
        emit NewValueSet(_value);
    }
    
    // Function to transfer value from one address to another
    function transferValue(address _to, uint256 _value) public {
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit ValueTransfer(msg.sender, _to, _value);
    }
}