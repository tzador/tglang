pragma solidity ^0.8.0;

contract Token {
    string public name;
    string public symbol;
    mapping(address => uint) public balances;
    uint public totalSupply;

    constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
        totalSupply = 1000000;
        balances[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance.");
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
    }

    function approve(address _spender, uint _amount) public returns (bool) {
        require(balances[msg.sender] >= _amount, "Insufficient balance.");
        allowances[msg.sender][_spender] = _amount;
        emit Approval(msg.sender, _spender, _amount);
        return true;
    }

    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {
        require(balances[_from] >= _amount, "Insufficient balance.");
        require(allowances[_from][msg.sender] >= _amount, "Not allowed to spend this amount.");
        balances[_from] -= _amount;
        balances[_to] += _amount;
        allowances[_from][msg.sender] -= _amount;
        return true;
    }
}