// Contract to handle purchase of items using ERC20 tokens

// Import standard ERC20 interface
import "./ERC20.sol";

// Create contract
contract Purchase {

    // Declare variables for token contract address and desired item price
    ERC20 token;
    uint public price;

    // Declare mapping to keep track of buyer balances
    mapping(address => uint) public balances;

    // Event to trigger when an item is purchased
    event PurchaseItem(address buyer, uint amount);

    // Constructor function to set token contract address and desired item price
    constructor(address _token, uint _price) public {
        token = ERC20(_token);
        price = _price;
    }

    // Function to purchase an item
    function purchase() external {
        // Ensure that the buyer has enough tokens
        require(token.balanceOf(msg.sender) >= price, "Not enough tokens!");

        // Transfer tokens from buyer to seller
        token.transferFrom(msg.sender, address(this), price);

        // Update buyer balance
        balances[msg.sender] += price;

        // Trigger event
        emit PurchaseItem(msg.sender, price);
    }

    // Function to withdraw tokens from buyer balance
    function withdrawTokens(uint amount) external {
        // Ensure that the buyer has enough tokens in their balance
        require(balances[msg.sender] >= amount, "Not enough tokens in balance!");

        // Transfer tokens back to buyer
        token.transfer(msg.sender, amount);

        // Update buyer balance
        balances[msg.sender] -= amount;
    }

    // Function to withdraw tokens from contract
    function withdrawTokensFromContract(uint amount) external {
        // Ensure that the sender is the contract owner
        require(msg.sender == owner, "Only contract owner can withdraw tokens!");

        // Transfer tokens to contract owner
        token.transfer(msg.sender, amount);
    }
}