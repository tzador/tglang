/**
    @title PaymentContract
    @dev Contract to handle payments between multiple parties
*/
contract PaymentContract {
    mapping(address => uint) balances; //Tracks the balances of each party
    
    address public contractCreator; //Stores the address of the contract creator
    
    /**
        @dev This struct represents an individual payment with a specified amount and recipient
    */
    struct Payment {
        uint amount;
        address recipient;
    }
    
    Payment[] public payments; //Array to store all payments
    
    /**
        @dev Event to log new payments made
    */
    event NewPayment(uint amount, address recipient);
    
    /**
        @dev Modifier to check if the permission to make a payment is granted
    */
    modifier onlyCreator() {
        require(msg.sender == contractCreator, "You do not have permission to make a payment");
        _;
    }
    
    /**
        @dev Constructor function to set contract creator as the deployment address
    */
    constructor() public {
        contractCreator = msg.sender;
    }

    /**
        @dev Function to make a payment to a specified recipient
        @param _amount The amount to be paid
        @param _recipient The recipient of the payment
    */
    function makePayment(uint _amount, address _recipient) public onlyCreator {
        balances[contractCreator] -= _amount; //Remove amount from contract creator's balance
        balances[_recipient] += _amount; //Add amount to recipient's balance
        
        Payment memory newPayment = Payment(_amount, _recipient); //Create new payment struct
        payments.push(newPayment); //Add payment to payments array
        
        emit NewPayment(_amount, _recipient); //Emit event for new payment
    }
    
    /**
        @dev Function to check the current balance of a specific address
        @param _address The address whose balance will be checked
        @return The balance of the specified address
    */
    function getBalance(address _address) public view returns (uint) {
        return balances[_address];
    }
}