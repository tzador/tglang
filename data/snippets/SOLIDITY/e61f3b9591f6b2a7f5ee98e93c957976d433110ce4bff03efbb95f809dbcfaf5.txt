// Importing required libraries
import "github.com/ethereum/solidity/std/coercion.sol"; // Importing coercion library
import "github.com/ethereum/solidity/std/math.sol"; // Importing math library

// Contract declaration
contract MyContract {

// Variables declaration
  address public owner; // Publicly accessible owner address
  uint256 public totalSupply; // Publicly accessible total supply of tokens
  string private name; // Privately accessible name of contract
  mapping (address => uint256) private balances; // Mapping address to token balances
  
// Events declaration
  event Transfer(address indexed _from, address indexed _to, uint256 _value); // Event fired when transfer of tokens occurs
  
// Constructor function
  constructor(uint256 _initialSupply, string memory _name) public {
    totalSupply = _initialSupply; // Setting initial total supply
    name = _name; // Setting contract name
    owner = msg.sender; // Setting contract owner as deployer
    balances[msg.sender] = _initialSupply; // Assigning total supply to contract owner's balance
  }
  
// Function to transfer tokens from one address to another
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0)); // Checking if recipient address is not zero
    require(_value <= balances[msg.sender]); // Checking if sender has enough balance
    balances[msg.sender] = balances[msg.sender].sub(_value); // Subtracting tokens from sender's balance
    balances[_to] = balances[_to].add(_value); // Adding tokens to recipient's balance
    emit Transfer(msg.sender, _to, _value); // Firing transfer event
    return true; // Returning true upon successful transfer
  }
  
// Function to get balance of a specified address
  function balanceOf(address _owner) public view returns (uint256) {
    return balances[_owner]; // Returning balance of specified address
  }
  
// Function to get contract name
  function getName() public view returns (string memory) {
    return name; // Returning contract name
  }
  
// Function to destroy contract and transfer remaining tokens to owner
  function destroy() public {
    require(msg.sender == owner); // Checking if sender is owner
    selfdestruct(owner); // Destroying contract and sending remaining ether to owner
  }
}