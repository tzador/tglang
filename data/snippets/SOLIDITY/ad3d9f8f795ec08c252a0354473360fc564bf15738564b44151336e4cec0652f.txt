/**
 * @title TokenContract
 * @dev ERC20 token representing a virtual currency.
 * This contract follows the standard version of the ERC20 token.
 * Implements all standard token functions and adds extra functionality such as pausing and burning tokens.
 */
contract TokenContract is ERC20, Pausable {
    using SafeMath for uint256;

    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 public totalSupply;

    // Mapping of balances for each account
    mapping (address => uint256) public balances;

    // Mapping of allowances for each account
    mapping (address => mapping (address => uint256)) public allowed;

    // Event triggered when tokens are burned
    event Burn(address indexed from, uint256 amount);

    /**
    * @dev Constructor function to initialize the contract
    * @param name The name of the token
    * @param symbol The symbol of the token
    * @param initialSupply The initial supply of tokens to be minted
    */
    constructor(string _name, string _symbol, uint256 initialSupply) public {
        require(initialSupply > 0, "Initial supply must be greater than 0");
        name = _name;
        symbol = _symbol;
        totalSupply = initialSupply * (10 ** uint256(decimals)); // calculate the total supply with decimal places
        balances[msg.sender] = totalSupply; // assign total supply to the contract creator
    }

    /**
    * @dev Function to transfer tokens from one address to another
    * @param to The address to transfer tokens to
    * @param amount The amount of tokens to be transferred
    * @return A boolean indicating whether the transfer was successful or not
    */
    function transfer(address to, uint256 amount) public whenNotPaused returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    /**
    * @dev Function to approve a certain amount of tokens to an address
    * @param spender The address being approved to spend tokens
    * @param amount The amount of tokens to be approved
    * @return A boolean indicating whether the approval was successful or not
    */
    function approve(address spender, uint256 amount) public whenNotPaused returns (bool) {
        allowed[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    /**
    * @dev Function to transfer tokens from one address to another on the behalf of the sender
    * @param from The address to transfer tokens from
    * @param to The address to transfer tokens to
    * @param amount The amount of tokens to be transferred
    * @return A boolean indicating whether the transfer was successful or not
    */
    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {
        require(allowed[from][msg.sender] >= amount, "Insufficient allowance");
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
    * @dev Function to increase the allowance for an address to spend tokens on behalf of the sender
    * @param spender The address to increase the allowance for
    * @param addedAmount The amount to be added to the allowance
    * @return A boolean indicating whether the increase was successful or not
    */
    function increaseAllowance(address spender, uint256 addedAmount) public whenNotPaused returns (bool) {
        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedAmount);
        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);
        return true;
    }

    /**
    * @dev Function to decrease the allowance for an address to spend tokens on behalf of the sender
    * @param spender The address to decrease the allowance for
    * @param subtractedAmount The amount to be subtracted from the allowance
    * @return A boolean indicating whether the decrease was successful or not
    */
    function decreaseAllowance(address spender, uint256 subtractedAmount) public whenNotPaused returns (bool) {
        require(allowed[msg.sender][spender] >= subtractedAmount, "Insufficient allowance");
        allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedAmount);
        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);
        return true;
    }

    /**
    * @dev Function to pause token transfers, can only be called by the contract owner
    * @return A boolean indicating whether the pause was successful or not
    */
    function pause() public onlyOwner returns (bool) {
        _pause();
        return true;
    }

    /**
    * @dev Function to unpause token transfers, can only be called by the contract owner
    * @return A boolean indicating whether the unpause was successful or not
    */
    function unpause() public onlyOwner returns (bool) {
        _unpause();
        return true;
    }

    /**
    * @dev Function to burn tokens from the caller's account
    * @param amount The amount of tokens to be burned
    * @return A boolean indicating whether the burn was successful or not
    */
    function burn(uint256 amount) public returns (bool) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] = balances[msg.sender].sub(amount);
        totalSupply = totalSupply.sub(amount);
        emit Burn(msg.sender, amount);
        return true;
    }

    /**
    * @dev Function to burn tokens from a specific account, can only be called by the contract owner
    * @param account The address of the account to be burned
    * @param amount The amount of tokens to be burned
    * @return A boolean indicating whether the burn was successful or not
    */
    function burnFrom(address account, uint256 amount) public onlyOwner returns (bool) {
        require(balances[account] >= amount, "Insufficient balance");
        balances[account] = balances[account].sub(amount);
        totalSupply = totalSupply.sub(amount);
        emit Burn(account, amount);
        return true;
    }

    // Internal transfer function
    function _transfer(address from, address to, uint256 amount) internal {
        require(to != address(0), "Cannot transfer to 0 address");
        require(balances[from] >= amount, "Insufficient balance");

        balances[from] = balances[from].sub(amount);
        balances[to] = balances[to].add(amount);
        emit Transfer(from, to, amount);
    }
}