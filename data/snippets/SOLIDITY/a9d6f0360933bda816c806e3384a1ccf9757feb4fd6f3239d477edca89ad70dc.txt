pragma solidity ^0.8.0; //Specifies Solidity compiler version
contract MyToken { //Declares contract named MyToken
    string public name; //declares variable name of string type, public
    string public symbol; //declares variable symbol of string type, public

    constructor(string memory _name, string memory _symbol) { //constructor function with two string parameters
        name = _name; //assigns value of _name to name variable
        symbol = _symbol; //assigns value of _symbol to symbol variable
    }

    mapping(address => uint256) private balances; //declares private mapping named 'balances' that maps address to uint256 value
    address[] private tokenHolders; //declares private array of addresses named 'tokenHolders'

    function mint(address _to, uint256 _amount) public { //function that mints new tokens to specified address
        require(_amount > 0, "Amount must be greater than 0"); //checks if _amount is greater than 0
        balances[_to] += _amount; //adds _amount to balance of specified address
        tokenHolders.push(_to); //adds specified address to array of tokenHolders
    }

    function transfer(address _to, uint256 _amount) public { //function that transfers tokens from sender to specified address
        require(balances[msg.sender] >= _amount, "Insufficient balance"); //checks if sender has sufficient balance
        balances[msg.sender] -= _amount; //subtracts _amount from sender's balance
        balances[_to] += _amount; //adds _amount to balance of specified address
    }
}