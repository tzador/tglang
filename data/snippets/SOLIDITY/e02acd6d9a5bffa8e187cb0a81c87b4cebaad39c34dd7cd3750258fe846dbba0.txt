// This is an example contract that implements a simple bank
contract Bank {
    address owner;
    mapping(address => uint) balances;

    // Modifier that only allows owner of the contract to execute function
    modifier onlyOwner() {
        require(msg.sender == owner, 'Only owner can execute this function');
        _; // continue with function execution
    }

    // Constructor function that sets the owner's address
    constructor() {
        owner = msg.sender;
    }

    // Function to deposit funds into the bank
    function deposit() public payable {
        require(msg.value > 0, 'Cannot deposit 0 wei');
        balances[msg.sender] += msg.value;
    }

    // Function to withdraw funds from the bank
    function withdraw(uint _amount) public payable onlyOwner {
        require(_amount > 0 && _amount <= balances[msg.sender], 'Invalid amount');
        msg.sender.transfer(_amount); // transfers funds from contract to owner's address
        balances[msg.sender] -= _amount;
    }

    // Function to transfer funds from one address to another
    function transfer(address _to, uint _amount) public {
        require(_amount > 0 && _amount <= balances[msg.sender], 'Invalid amount');
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
    }

    // Function to check balance of an address
    function checkBalance(address _address) public view returns (uint) {
        return balances[_address];
    }
}