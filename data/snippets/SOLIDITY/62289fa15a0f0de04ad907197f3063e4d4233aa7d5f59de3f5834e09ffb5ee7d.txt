// define contract
contract myContract {
  // define state variables
  uint public myNumber; // unsigned integer
  string public myString; // string
  address public myAddress; // ethereum address
  bytes32 public myBytes; // fixed size bytes
  bytes[] public myArray; // dynamic bytes array
  mapping (address => uint) public myMap; // address-to-unsigned-integer mapping

  // define events
  event numberUpdated(uint number, string message); // event to be emitted when myNumber is updated
  event stringUpdated(string text); // event to be emitted when myString is updated

  // define modifiers
  modifier onlyOwner {
    require(msg.sender == owner); // require that caller is the owner of the contract
    _; // continue with code execution if requirement is met
  }

  // define constructor
  constructor() {
    myNumber = 0; // set initial value of myNumber to 0
    myString = "Hello World"; // set initial value of myString to "Hello World"
    myAddress = msg.sender; // set myAddress to the address of the contract creator
    owner = msg.sender; // set owner of contract to the contract creator
  }

  // define functions
  function updateNumber(uint newNumber) public onlyOwner {
    myNumber = newNumber; // set myNumber to newNumber
    emit numberUpdated(myNumber, "myNumber was updated."); // emit event to notify listeners
  }

  function updateString(string newText) public onlyOwner {
    myString = newText; // set myString to newText
    emit stringUpdated(myString); // emit event to notify listeners
  }

  function addToMap(address addr, uint num) public onlyOwner {
    myMap[addr] = num; // add mapping of address to num
  }

  function addToArray(bytes memory newBytes) public onlyOwner {
    myArray.push(newBytes); // add newBytes to myArray
  }
}