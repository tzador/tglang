/// @title A simple lottery contract
// Contract written in Solidity version 0.8.4
contract Lottery {
    
    // Declare variables
    address public manager;
    address[] public players;
    
    // Constructor function to set manager
    constructor() {
        manager = msg.sender;
    }
    
    // Function to enter the lottery
    function enter() public payable {
        require(msg.value > 0.01 ether); // Entry fee is 0.01 ether
        
        // Add player's address to players array
        players.push(msg.sender);
    }
    
    // Function to generate random number between 0 and players length
    function random() private view returns (uint256) {
        return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, players.length)));
    }
    
    // Function to pick a winner
    function pickWinner() public {
        require(msg.sender == manager); // Only manager can call this function
        require(players.length > 0); // To make sure there are players in the lottery
        
        // Generate random index to pick a winner
        uint256 winnerIndex = random() % players.length;
        
        // Transfer the contract's balance to the winner
        payable(players[winnerIndex]).transfer(address(this).balance);
        
        // Reset players array for the next round
        players = new address[](0);
    }
    
    // Function to get list of players
    function getPlayers() public view returns (address[] memory) {
        return players;
    }
}