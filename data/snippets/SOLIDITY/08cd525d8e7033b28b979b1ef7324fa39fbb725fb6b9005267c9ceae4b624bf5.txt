pragma solidity ^0.8.0;

// This is a comment in Solidity

contract TodoList {
    // State variables
    address public owner;
    uint256 public taskCount;
    mapping(uint256 => Task) public tasks;

    // Struct
    struct Task {
        uint256 id;
        string content;
        bool completed;
    }
    
    // Events
    event TaskCreated(uint256 id, string content, bool completed);
    event TaskCompleted(uint256 id, bool completed);
    event TaskUpdated(uint256 id, string content);

    // Constructor 
    constructor() {
        owner = msg.sender;
        taskCount = 0;
    }

    // Function to create a new task
    function createTask(string memory _content) public {
        require(msg.sender == owner, "Only the owner can create tasks");
        
        taskCount++;
        tasks[taskCount] = Task(taskCount, _content, false);
        
        emit TaskCreated(taskCount, _content, false);
    }

    // Function to complete a task
    function toggleCompleted(uint256 _id) public {
        require(msg.sender == owner, "Only the owner can complete tasks");
        
        Task memory _task = tasks[_id];
        _task.completed = !_task.completed;
        tasks[_id] = _task;
        
        emit TaskCompleted(_id, _task.completed);
    }

    // Function to update the content of a task
    function updateTask(uint256 _id, string memory _content) public {
        require(msg.sender == owner, "Only the owner can update tasks");
        
        Task storage _task = tasks[_id];
        _task.content = _content;
        
        emit TaskUpdated(_id, _content);
    }
}