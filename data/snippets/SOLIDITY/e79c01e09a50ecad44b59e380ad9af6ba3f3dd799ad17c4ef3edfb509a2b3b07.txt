pragma solidity ^0.8.0; //specifying solidity version

contract ExampleContract {
    address payable public owner; //defining a payable address variable
    string public contractName = "Example Contract"; //defining a string variable

    struct Person { //creating a struct named Person
        string name; // adding name property
        uint age; //adding age property
    }

    Person[] public people; //creating a dynamic array of type Person

    constructor() {
        owner = payable(msg.sender); //assigning owner variable to the address of the deployer of the contract
    }

    function createPerson(string memory _name, uint _age) public { //creating a function to add a Person to the array
        Person memory newPerson = Person(_name, _age); //creating a new Person using the provided name and age
        people.push(newPerson); //adding the newPerson to the people array
    }

    function calculateTotalAge() external view returns (uint) { //creating a function to calculate the total age of all people in the array
        uint totalAge = 0;
        for (uint i = 0; i < people.length; i++) { //looping through the people array
            totalAge += people[i].age; //adding each person's age to the totalAge variable
        }
        return totalAge; //returning the total age
    }

    modifier onlyOwner() { //creating a modifier to restrict access to certain functions to only the contract owner
        require(msg.sender == owner, "Only the contract owner can call this function."); //using the require keyword to check if the caller is the owner
        _; //the function will continue executing if the caller is the owner
    }

    function withdraw() external onlyOwner { //creating a function to withdraw the contract's balance
        require(address(this).balance > 0, "There is no balance to withdraw."); //checking if there is a balance to withdraw
        owner.transfer(address(this).balance); //transferring the balance to the owner's address
    }

    function changeOwner(address payable _newOwner) external onlyOwner { //creating a function to change the contract's owner
        owner = _newOwner; //assigning the new owner
    }
}