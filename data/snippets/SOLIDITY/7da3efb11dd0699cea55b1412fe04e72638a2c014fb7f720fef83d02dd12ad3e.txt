pragma solidity ^0.8.0;

contract Example {
    // state variables
    uint256 public number;
    address public owner;
    mapping(address => uint) public balances;
    
    // events
    event NumberSet(uint256 newNumber);
    event Withdraw(address indexed recipient, uint amount);
    
    // constructor
    constructor() {
        number = 0;
        owner = msg.sender;
    }
    
    // modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }
    
    // functions
    function setNumber(uint256 _newNumber) public onlyOwner {
        number = _newNumber;
        emit NumberSet(number);
    }
    
    function withdraw() public {
        require(balances[msg.sender] > 0, "Insufficient balance");
        
        uint amount = balances[msg.sender];
        balances[msg.sender] = 0;
        
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        
        emit Withdraw(msg.sender, amount);
    }
}