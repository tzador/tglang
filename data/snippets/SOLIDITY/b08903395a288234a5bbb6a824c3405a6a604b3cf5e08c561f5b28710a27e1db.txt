pragma solidity ^0.4.24; //declaring the solidity version

//Library Contract to store all the required math functions
library MyMath {
  //Function to add two numbers
  function add(uint x, uint y) public pure returns (uint) {
    return x + y;
  }

  //Function to subtract two numbers
  function subtract(uint x, uint y) public pure returns (uint) {
    return x - y;
  }

  //Function to multiply two numbers
  function multiply(uint x, uint y) public pure returns (uint) {
    return x * y;
  }

  //Function to divide two numbers
  function divide(uint x, uint y) public pure returns (uint) {
    require(y != 0); //revert if y is 0
    return x / y;
  }
}

//Contract for a basic bank account
contract BankAccount {
  address owner;
  mapping (address => uint) balances; //mapping to store address and balance

  //Event to track deposits
  event Deposit(address indexed _from, uint _amount);

  //Event to track withdrawals
  event Withdrawal(address indexed _from, uint _amount);

  //Constructor to set the owner of the contract
  constructor() public {
    owner = msg.sender;
  }

  //Function to deposit funds into the bank account
  function deposit() public payable {
    uint amount = msg.value;
    balances[msg.sender] += amount; //add deposited amount to sender's balance
    emit Deposit(msg.sender, amount); //emit deposit event
  }

  //Function to withdraw funds from the bank account
  function withdraw(uint _amount) public {
    require(balances[msg.sender] >= _amount); //revert if insufficient balance
    balances[msg.sender] = MyMath.subtract(balances[msg.sender], _amount); //subtract withdrawal amount from sender's balance using MyMath library
    msg.sender.transfer(_amount); //transfer funds to the sender's address
    emit Withdrawal(msg.sender, _amount); //emit withdrawal event
  }

  //Function to check the current balance of the bank account
  function checkBalance() public view returns (uint) {
    return balances[msg.sender];
  }
}