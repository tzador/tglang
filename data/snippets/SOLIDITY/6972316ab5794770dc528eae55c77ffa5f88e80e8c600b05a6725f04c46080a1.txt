/**
 * @title Bond Market Smart Contract
 * @dev Represents a bond market smart contract that allows transactions between buyers and sellers.
 */
contract BondMarket {
    
    // Variables to store information about bonds
    uint public totalBonds;
    mapping(uint => Bond) public bonds;
    
    // Struct to represent a bond
    struct Bond {
        address seller;
        uint price;
        uint yield;
        bondStatus status;
    }
    
    // Enum representing the status of a bond
    enum bondStatus { ForSale, Sold }
    
    // Event to emit when a bond is listed for sale
    event BondListed(address indexed seller, uint price, uint bondId);
    
    // Event to emit when a bond is purchased
    event BondPurchased(address indexed buyer, address indexed seller, uint price, uint bondId);
    
    // Function to list a bond for sale
    function listBond(uint _price, uint _yield) public {
        // Set bond details and increase total bonds count
        Bond memory bond = Bond({
            seller: msg.sender,
            price: _price,
            yield: _yield,
            status: bondStatus.ForSale
        });
        bonds[totalBonds] = bond;
        totalBonds++;
        
        // Emit event
        emit BondListed(msg.sender, _price, totalBonds-1);
    }
    
    // Function to purchase a bond
    function purchaseBond(uint _bondId) payable public {
        // Check if bond exists and is for sale
        require(bonds[_bondId].status == bondStatus.ForSale, "Bond with given ID is not for sale.");
        
        // Check if correct amount of Ether is sent
        require(msg.value == bonds[_bondId].price, "Incorrect amount of Ether sent.");
        
        // Transfer Ether to seller
        bonds[_bondId].seller.transfer(msg.value);
        
        // Update bond status and emit event
        bonds[_bondId].status = bondStatus.Sold;
        emit BondPurchased(msg.sender, bonds[_bondId].seller, bonds[_bondId].price, _bondId);
    }
    
    // Function to get details of a specific bond
    function getBondDetails(uint _bondId) public view returns (address, uint, uint, bondStatus) {
        return (bonds[_bondId].seller, bonds[_bondId].price, bonds[_bondId].yield, bonds[_bondId].status);
    }
    
    // Function to get the total number of bonds
    function getTotalBonds() public view returns (uint) {
        return totalBonds;
    }
}