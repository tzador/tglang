pragma solidity ^0.8.0;
// Importing OpenZeppelin's Ownable contract to use its functionality
import "@openzeppelin/contracts/access/Ownable.sol";
// Creating a contract called ExampleContract that inherits from Ownable contract
contract ExampleContract is Ownable {
    // Creating a variable called owner of type address
    address private owner;
    // Creating a mapping that connects addresses to balances
    mapping(address => uint256) public balances;
    // Creating an event to track when a new deposit is made
    event DepositMade(address indexed depositor, uint256 amount);
    // Creating a constructor function that sets the owner to be the deployer of the contract
    constructor() {
        owner = msg.sender;
    }
    // Creating a function modifier that only allows the owner to call a function
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }
    // Creating a function called deposit that allows users to deposit funds into the contract
    function deposit() public payable {
        // Adding the deposited amount to the depositor's balance
        balances[msg.sender] += msg.value;
        // Emitting the DepositMade event
        emit DepositMade(msg.sender, msg.value);
    }
    // Creating a function called withdraw that allows only the owner to withdraw funds from the contract
    function withdraw() public onlyOwner {
        // Setting the amount to be withdrawn to the contract's balance
        uint256 amount = address(this).balance;
        // Transferring the funds to the owner's address
        payable(owner).transfer(amount);
    }
}