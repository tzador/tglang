// Contract to manage employee information
contract EmployeeInfo {
    // Employee role enum
    enum Role {
        ADMIN,
        MANAGER,
        EMPLOYEE
    }
    
    // Struct to store employee details
    struct Employee {
        string name;
        uint age;
        Role role;
        uint salary;
    }
    
    // Array of employees
    Employee[] employees;
    
    // Mapping of employee addresses to their information
    mapping (address => Employee) employeeInfo;
    
    // Function to add employee
    function addEmployee(string calldata _name, uint _age, Role _role, uint _salary) external {
        Employee memory newEmployee = Employee(_name, _age, _role, _salary);
        employees.push(newEmployee);
        employeeInfo[msg.sender] = newEmployee;
    }
    
    // Function to get employee details by address
    function getEmployee(address _employeeAddress) external view returns (string memory, uint, Role, uint) {
        require(employeeInfo[_employeeAddress].age != 0, "Employee does not exist.");
        return (
            employeeInfo[_employeeAddress].name,
            employeeInfo[_employeeAddress].age,
            employeeInfo[_employeeAddress].role,
            employeeInfo[_employeeAddress].salary
        );
    }
    
    // Function to update employee details
    function updateEmployee(string calldata _name, uint _age, Role _role, uint _salary) external {
        require(employeeInfo[msg.sender].age != 0, "Employee does not exist.");
        employeeInfo[msg.sender].name = _name;
        employeeInfo[msg.sender].age = _age;
        employeeInfo[msg.sender].role = _role;
        employeeInfo[msg.sender].salary = _salary;
    }
    
    // Function to remove employee
    function removeEmployee(address _employeeAddress) external {
        require(employeeInfo[_employeeAddress].age != 0, "Employee does not exist.");
        delete employeeInfo[_employeeAddress];
    }
    
    // Function to calculate total salary of all employees
    function calculateTotalSalary() external view returns (uint) {
        uint totalSalary = 0;
        for (uint i=0; i<employees.length; i++) {
            totalSalary += employees[i].salary;
        }
        return totalSalary;
    }
    
    // Function to get number of employees
    function getNumberOfEmployees() external view returns (uint) {
        return employees.length;
    }
}