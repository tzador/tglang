pragma solidity ^0.6.0; // declare compiler version
// create contract
contract MyContract {
    uint private myInt; // declare private uint variable
    
    // create constructor
    constructor () public {
        myInt = 0; // set initial value for myInt variable
    }
    
    // create external function that returns myInt value
    function getMyInt() external view returns (uint) {
        return myInt; // return myInt value
    }
    
    // create internal function that sets myInt value
    function setMyInt(uint _newInt) internal {
        myInt = _newInt; // set myInt value to _newInt parameter
    }
    
    // create public function that calls setMyInt function and passes in a new value for myInt
    function updateMyInt() public {
        setMyInt(10); // call setMyInt function and pass in 10 as the new value for myInt
    }
    
    // create event that emits the new value for myInt when it is set
    event NewInt(uint indexed newValue);
    
    // create fallback function that is triggered when a transaction does not match any other function
    fallback() external payable {
        emit NewInt(msg.value); // emit the new transaction value as the new value for myInt
    }
}