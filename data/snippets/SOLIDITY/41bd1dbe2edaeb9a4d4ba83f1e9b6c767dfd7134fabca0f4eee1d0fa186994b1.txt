pragma solidity ^0.8.0;
// This code declares the pragma for the Solidity version to be used

import './SafeMath.sol';
// This line imports the SafeMath library for secure mathematical operations

contract SimpleToken {
   // This is the contract declaration
   using SafeMath for uint256;
   // This line uses the SafeMath library for the uint256 data type

   string public name = "Simple Token";
   // This line declares a public string variable named 'name'

   mapping(address => uint) balances;
   // This line creates a mapping for address to store balances

   address public owner;
   // This line declares a public address variable named 'owner'

   uint256 public totalSupply;
   // This line declares a public uint256 variable named 'totalSupply'

   event Transfer(address indexed _from, address indexed _to, uint256 _value);
   // This line declares an event named 'Transfer' to track token transfers

   constructor(uint256 _initialSupply) {
     // This is the constructor function 
     balances[msg.sender] = _initialSupply;
     // This line sets the initial balance for the contract deployer
     totalSupply = _initialSupply;
     // This line sets the initial total supply of tokens
     owner = msg.sender;
     // This line assigns the contract deployer as the owner of the contract
   }
   
   function transfer(address _to, uint256 _value) public returns (bool success) {
      // This function is used to transfer tokens from sender to receiver
      balances[msg.sender] = balances[msg.sender].sub(_value);
      // This line subtracts the transfer amount from the sender's balance
      balances[_to] = balances[_to].add(_value);
      // This line adds the transfer amount to the receiver's balance
      emit Transfer(msg.sender, _to, _value);
      // This line emits the 'Transfer' event
      return true;
      // This line returns a boolean value indicating a successful transfer
   }
   
   function balanceOf(address _owner) public view returns (uint256 balance) {
      // This function returns the balance of a specific address
      return balances[_owner];
      // This line returns the balance of the given address
   }
}