/**
* @title Example Contract
* @dev This is an example contract that demonstrates SOLIDITY principles
*/
pragma solidity ^0.5.0;

// Define Contract
contract ExampleContract {
    // Declare state variables
    uint public num;
    string public message;

    // Event
    event ValueChanged(uint _num); // Event declaration

    // Constructor
    constructor(uint _initialNum) public {
        num = _initialNum;
        message = "Initial Message";
    }

    // Function to set new value for num
    function setNum(uint _newNum) public {
        num = _newNum;
        emit ValueChanged(_newNum); // Trigger event
    }

    // Function to set new message
    function setMessage(string memory _newMessage) public {
        message = _newMessage;
    }

    // Fallback function
    function() external payable {
        // Custom logic to handle fallback
    }
    
    // Pure function
    function addTwoNums(uint _num1, uint _num2) public pure returns (uint) {
        return _num1 + _num2;
    }

    // View function
    function getMessage() public view returns (string memory) {
        return message;
    }

    // Payable function
    function deposit() public payable {
        // Custom logic to handle deposit
    }

    // Modifier
    modifier onlyOwner {
        require(msg.sender == owner, "Only contract owner can call this function");
        _; // This indicates where the rest of the function's body should go
    }

    // Owner only function
    function changeOwner(address _newOwner) public onlyOwner {
        owner = _newOwner;
    }

    // Struct
    struct Person {
        string name;
        uint age;
    }

    // Mapping
    mapping(address => Person) public people;

    // Function to add new person to mapping
    function addPerson(string memory _name, uint _age) public {
        people[msg.sender] = Person(_name, _age);
    }

    // Enum
    enum Season { Spring, Summer, Fall, Winter }

    // Function to get current season
    function getCurrentSeason(uint _month) public pure returns (Season) {
        if (_month == 3 || _month == 4 || _month == 5) {
            return Season.Spring;
        } else if (_month == 6 || _month == 7 || _month == 8) {
            return Season.Summer;
        } else if (_month == 9 || _month == 10 || _month == 11) {
            return Season.Fall;
        } else {
            return Season.Winter;
        }
    }

    // Events

    // Event to store transaction hash and date
    event Transaction(string transactionHash, uint timestamp);

    // Function to make a transaction and emit event
    function makeTransaction() public {
        // Custom logic to make transaction
        emit Transaction("0x1234567890", now); // Emits the event with the given values
    }
}