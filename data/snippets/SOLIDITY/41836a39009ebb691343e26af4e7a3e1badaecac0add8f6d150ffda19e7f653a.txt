pragma solidity ^0.8.0; //specifies the version of Solidity to be used for compiling

contract ERC20Token { //contract declaration
    string public constant name = "MyToken"; //declares a public string variable with the constant keyword
    string public constant symbol = "MTK"; //declares a public string variable with the constant keyword
    address owner; //declares an address variable
    mapping(address => uint256) balances; //declares a mapping data structure that maps addresses to uint256 values

    event Transfer(address indexed _from, address indexed _to, uint256 _value); //event declaration, used to signal information to external parties

    constructor() { //constructor function, automatically runs when the contract is deployed
        owner = msg.sender; //assigns the deploying address as the contract owner
        balances[owner] = 1000; //assigns an initial balance of 1000 to the owner's address
    }

    function transfer(address _to, uint256 _value) external { //function that allows the owner to transfer tokens to another address
        require(balances[msg.sender] >= _value, "Insufficient balance"); //requires that the sender has enough tokens to transfer
        require(_to != address(0), "Invalid address"); //requires that the receiver's address is not null
        balances[msg.sender] -= _value; //removes the transferred amount from the sender's balance
        balances[_to] += _value; //adds the transferred amount to the receiver's balance
        emit Transfer(msg.sender, _to, _value); //emits the transfer event
    }

    function balanceOf(address _owner) external view returns (uint256) { //function that retrieves the token balance of a given address
        return balances[_owner]; //returns the balance from the mapping data structure
    }
    
    function mint(address _to, uint256 _amount) external { //function that allows the contract owner to mint new tokens
        require(msg.sender == owner, "Only owner can mint"); //requires that the sender is the contract owner
        require(_to != address(0), "Invalid address"); //requires that the receiver's address is not null
        balances[_to] += _amount; //adds the minted amount to the receiver's balance
        emit Transfer(address(0), _to, _amount); //emits the transfer event with the null address as the sender
    }
    
    function burn(uint256 _amount) external { //function that allows a token holder to burn their tokens
        require(balances[msg.sender] >= _amount, "Insufficient balance"); //requires that the sender has enough tokens to burn
        balances[msg.sender] -= _amount; //removes the burned amount from the sender's balance
        emit Transfer(msg.sender, address(0), _amount); //emits the transfer event with the null address as the receiver
    }
}