pragma solidity ^0.8.0;

// Contract defining a simple bank account
contract BankAccount {
    // State variables
    address owner;
    mapping(address => uint) balances;
    
    // Events
    event Deposit(address indexed owner, uint amount);
    event Withdrawal(address indexed owner, uint amount);
    
    // Constructor
    constructor() {
        owner = msg.sender;
    }
    
    // Functions
    
    /// @dev Function to deposit funds into the bank account
    /// @param amount The amount of funds to deposit
    function deposit(uint amount) public {
        require(amount > 0, "Amount must be greater than 0");
        require(msg.sender == owner, "Only the account owner can deposit funds");
        
        balances[msg.sender] += amount;
        emit Deposit(msg.sender, amount);
    }
    
    /// @dev Function to withdraw funds from the bank account
    /// @param amount The amount of funds to withdraw
    function withdraw(uint amount) public {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient funds");
        
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        
        emit Withdrawal(msg.sender, amount);
    }
    
    /// @dev Function to check the balance of the bank account
    /// @return The balance of the sender's account
    function checkBalance() public view returns (uint) {
        return balances[msg.sender];
    }
}