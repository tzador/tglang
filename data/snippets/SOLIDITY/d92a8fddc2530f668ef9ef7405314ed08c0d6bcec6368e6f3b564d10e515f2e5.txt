// Defining an interface for a bank contract
interface Bank {
    function deposit(uint amount) external;
    function withdraw(uint amount) external;
}

// Defining a contract for a bank account
contract BankAccount is Bank {
    
    // Variables to store account owner and balance
    address owner;
    uint balance;
    
    // Constructor to set account owner
    constructor(address _owner) {
        owner = _owner;
    }
    
    // Function to deposit funds into the account
    function deposit(uint amount) external override {
        require(msg.sender == owner, "Only the owner can deposit funds");
        
        // Updating the balance
        balance += amount;
    }
    
    // Function to withdraw funds from the account
    function withdraw(uint amount) external override {
        require(msg.sender == owner, "Only the owner can withdraw funds");
        require(amount <= balance, "Not enough balance");
        
        // Updating the balance
        balance -= amount;
    }
    
    // Function to check the account balance
    function getBalance() external view returns (uint) {
        return balance;
    }
    
    // Function to transfer funds to another account
    function transfer(address payable recipient, uint amount) external {
        require(msg.sender == owner, "Only the owner can transfer funds");
        require(amount <= balance, "Not enough balance");
        
        // Updating the balance
        balance -= amount;
        
        // Sending the amount to the recipient
        recipient.transfer(amount);
    }
}