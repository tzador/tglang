pragma solidity ^0.4.24; //Annotated as Solidity version

interface MyInterface {  //Declaring an interface named MyInterface
    function doSomething(uint256 a, uint256 b) external; // Declaring an abstract function
}

contract MyContract { //Declaring a contract named MyContract
    address public owner; //Declaring a public owner variable of type address

    function MyContract() public { //Constructor function that runs when the contract is deployed
        owner = msg.sender; //Set the owner variable to the address that deployed the contract
    }

    function doSomething(uint256 a, uint256 b) public { //Implementation of the doSomething function from the interface
        require(msg.sender == owner); //Checks that the sender is the owner of the contract
        //Do something with the values of a and b
    }
}

contract MyInheritedContract is MyContract { //Declaring a contract named MyInheritedContract that inherits from MyContract
    MyInterface public myInterface; //Declaring a public variable of type MyInterface

    function MyInheritedContract(address _myInterface) public { //Constructor function that takes in an address
        myInterface = MyInterface(_myInterface); //Create a new instance of MyInterface using the address passed in
    }

    function doSomething(uint256 a, uint256 b) public { //Implementation of the doSomething function from the interface
        require(msg.sender == owner); //Checks that the sender is the owner of the contract
        myInterface.doSomething(a, b); //Calls the doSomething function from the interface
    }
}