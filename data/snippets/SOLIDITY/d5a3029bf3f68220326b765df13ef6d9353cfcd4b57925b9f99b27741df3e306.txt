pragma solidity >=0.5.0;
//This is a comment
contract ExampleContract {
    //Completely private state variable
    uint256 private secretNumber;
    //Public state variable
    address public owner;
    //Event that is emitted when the secretNumber is changed
    event NumberChanged(uint256 newNumber);
    
    //Only callable by the owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _; //continue execution
    }

    //Constructor function, sets the initial value of the secretNumber
    constructor(uint256 _initialNumber) public {
        secretNumber = _initialNumber;
        owner = msg.sender;
    }

    //Function to change the secretNumber, can only be called by the owner
    function changeNumber(uint256 _newNumber) public onlyOwner() {
        require(secretNumber != _newNumber, "New number must be different from current secretNumber");
        secretNumber = _newNumber;
        emit NumberChanged(_newNumber); //emit event
    }

    //Returns the current secretNumber
    function getSecretNumber() public view returns (uint256) {
        return secretNumber;
    }
}