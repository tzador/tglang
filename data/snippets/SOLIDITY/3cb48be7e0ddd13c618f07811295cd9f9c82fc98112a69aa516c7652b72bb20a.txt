pragma solidity ^0.8.0; // version pragma for solidity compiler

contract ComplexContract { // contract keyword for creating a new contract
    uint public num; // state variable, accessible to the public
    address public owner; // state variable, accessible to the public
    
    constructor(uint _num) { // constructor function, takes in a parameter
        num = _num; // setting value of num state variable to the constructor parameter
        owner = msg.sender; // setting value of owner state variable to the address of the contract creator
    }

    function add(uint _value) public { // function for adding a value to num state variable, accessible to the public
        require(msg.sender == owner, "Only the contract owner can call this function."); // require statement to ensure that only the owner can call this function
        num = num + _value; // adding _value to num state variable
    }

    function subtract(uint _value) public { // function for subtracting a value from num state variable, accessible to the public
        require(msg.sender == owner, "Only the contract owner can call this function."); // require statement to ensure that only the owner can call this function
        num = num - _value; // subtracting _value from num state variable
    }

    function multiply(uint _value) public { // function for multiplying num state variable by a value, accessible to the public
        require(msg.sender == owner, "Only the contract owner can call this function."); // require statement to ensure that only the owner can call this function
        num = num * _value; // multiplying num state variable by _value
    }

    function divide(uint _value) public { // function for dividing num state variable by a value, accessible to the public
        require(msg.sender == owner, "Only the contract owner can call this function."); // require statement to ensure that only the owner can call this function
        require(_value != 0, "Cannot divide by zero."); // require statement to ensure that the value is not zero
        num = num / _value; // dividing num state variable by _value
    }
}