pragma solidity ^0.6.0; // Use Solidity version 0.6.0 or higher

contract MyCoin {
    
    // Declare state variables
    address public owner; // Stores the address of contract owner
    uint256 public totalSupply; // Stores the total supply of coins
    mapping(address => uint256) public balances; // Maps addresses to their coin balances
    
    // Declare Events
    event Transfer(address indexed _from, address indexed _to, uint256 _value); // Event fired when coins are transferred
    
    // Constructor function
    constructor(uint256 _initialSupply) public {
        owner = msg.sender; // Set contract owner to the address that deployed the contract
        totalSupply = _initialSupply; // Set initial supply of coins
        balances[msg.sender] = _initialSupply; // Set initial balance for contract owner
    }
    
    // Function to transfer coins
    function transfer(address _to, uint256 _value) public {
        // Check if sender has enough coins to transfer
        require(balances[msg.sender] >= _value, "Insufficient balance to transfer!");
        
        // Transfer coins
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        
        // Trigger the Transfer event
        emit Transfer(msg.sender, _to, _value);
    }
    
    // Function to increase total supply of coins
    function increaseSupply(uint256 _amount) public {
        // Check if sender is the contract owner
        require(msg.sender == owner, "Only the contract owner can increase the total supply!");
        
        // Increase total supply
        totalSupply += _amount;
        
        // Mint new coins to the contract owner
        balances[owner] += _amount;
    }
    
    // Function to get the balance of an address
    function getBalance(address _address) public view returns (uint256) {
        return balances[_address];
    }
}