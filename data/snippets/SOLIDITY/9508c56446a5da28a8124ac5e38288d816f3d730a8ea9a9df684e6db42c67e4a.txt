pragma solidity >=0.4.22 <0.6.0; //specify the version of Solidity

contract ExampleContract { //create a contract called ExampleContract
    mapping(address => uint) public balances; //declare a public mapping that maps addresses to unsigned integers called balances

    function deposit() external payable { //declare a function called deposit that is external and payable, allowing the contract to receive ETH
        balances[msg.sender] += msg.value; //increase the sender's balance by the value of the transaction
    }

    function withdraw(uint amount) external { //declare a function called withdraw that is external and takes in a uint amount
        require(balances[msg.sender] >= amount, "Insufficient balance"); //require that the sender's balance is equal to or greater than the amount being withdrawn
        msg.sender.transfer(amount); //send the specified amount of ETH back to the sender
        balances[msg.sender] -= amount; //decrease the sender's balance by the withdrawn amount
    }

    function transfer(address recipient, uint amount) external { //declare a function called transfer that is external and takes in an address recipient and a uint amount
        require(balances[msg.sender] >= amount, "Insufficient balance"); //require that the sender's balance is equal to or greater than the amount being transferred
        balances[msg.sender] -= amount; //decrease the sender's balance by the transferred amount
        balances[recipient] += amount; //increase the recipient's balance by the transferred amount
    }

    function getBalance(address account) public view returns (uint) { //declare a function called getBalance that is public, view and takes in an address account, returning a uint
        return balances[account]; //return the balance of the specified account
    }
}