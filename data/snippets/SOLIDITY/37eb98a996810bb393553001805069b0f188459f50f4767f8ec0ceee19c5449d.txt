pragma solidity ^0.8.0;   // specifies the Solidity version being used

contract ExampleContract {   // creates a contract named ExampleContract
 
    uint[] public numbers;   // creates a public array variable named numbers
 
    constructor() {   // creates a constructor function
 
        numbers.push(1);   // adds the number 1 to the array
 
        numbers.push(2);   // adds the number 2 to the array
 
        numbers.push(3);   // adds the number 3 to the array
 
        numbers.push(4);   // adds the number 4 to the array
 
        numbers.push(5);   // adds the number 5 to the array
 
    }
 
    function getSum() public view returns (uint) {   // creates a function named getSum, which returns a uint value
 
        uint sum = 0;   // creates a variable named sum and initializes it to 0
 
        for (uint i=0; i < numbers.length; i++) {   // starts a for loop with the variable i starting at 0 and ending at the length of the numbers array
 
            sum += numbers[i];   // adds the element at index i to the variable sum
 
        }
 
        return sum;   // returns the value of sum
 
    }
 
    function getValueAtIndex(uint index) public view returns (uint) {   // creates a function named getValueAtIndex, which takes in an index value and returns a uint value
 
        require(index < numbers.length, "Index is out of range.");   // checks if the index value is within the range of the array
 
        return numbers[index];   // returns the element at the specified index
 
    }
 
    function removeValueAtIndex(uint index) public {   // creates a function named removeValueAtIndex, which takes in an index value
 
        require(index < numbers.length, "Index is out of range.");   // checks if the index value is within the range of the array
 
        for (uint i = index; i < numbers.length-1; i++){   // starts a for loop with the variable i starting at the specified index and ending at the second last element of the array
 
            numbers[i] = numbers[i+1];   // replaces the current element with the next element
 
        }
 
        numbers.pop();   // removes the last element from the array
 
    }
 
}