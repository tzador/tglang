pragma solidity >=0.4.22 <0.7.0; // declaring the solidity version to be used

import "./SafeMath.sol"; // importing a library for safe mathematical operations

contract MyContract { // declaring the contract
    using SafeMath for uint256; // using the library for safe mathematical operations
    
    // declaring state variables
    uint256 public totalSupply;
    address public owner;
    mapping (address => uint256) public balances;
    
    // declaring events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor() public {
        totalSupply = 1000000; // setting initial supply
        owner = msg.sender; // setting owner as the deployer of the contract
        balances[msg.sender] = totalSupply; // setting initial balance for owner
    }
    
    // declaring functions
    function transfer(address to, uint256 value) public returns (bool) {
        require(value <= balances[msg.sender]); // require that the value being sent is within the sender's balance
        
        balances[msg.sender] = balances[msg.sender].sub(value); // subtracting the value being sent from the sender's balance
        balances[to] = balances[to].add(value); // adding the value to the recipient's balance
        
        emit Transfer(msg.sender, to, value); // emit Transfer event
        
        return true;
    }
    
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0)); // require that the spender's address is not 0
        
        emit Approval(msg.sender, spender, value); // emit Approval event
        
        return true;
    }
    
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(value <= balances[from]); // require that the value being sent is within the sender's balance
        require(value <= allowed[from][msg.sender]); // require that the value being sent is within the allowed amount by the sender
        
        balances[from] = balances[from].sub(value); // subtracting the value being sent from the sender's balance
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value); // subtracting the value being sent from the allowed amount by the sender
        balances[to] = balances[to].add(value); // adding the value to the recipient's balance
        
        emit Transfer(from, to, value); // emit Transfer event
        
        return true;
    }
}