// An example of a reusable contract in SOLIDITY
// This contract calculates the factorial of a given number using recursion

contract FactorialCalculator {
    // create a mapping to store the factorial values for each number
    mapping(uint => uint) factorials;

    // function to calculate the factorial of a given number
    function calculateFactorial(uint num) public returns (uint) {
        // check if the factorial for this number has already been calculated
        if (factorials[num] != 0) {
            return factorials[num];
        }
        // base case for recursion, factorial of 0 is 1
        if (num == 0) {
            factorials[num] = 1;
            return 1;
        }
        // calculate factorial recursively
        factorials[num] = num * calculateFactorial(num - 1;
        return factorials[num];
    }

    // function to get the stored factorial value for a specific number
    function getFactorial(uint num) public returns (uint) {
        // if the factorial value has not been calculated, return 0
        if (factorials[num] == 0) {
            return 0;
        }
        // else return the calculated value
        return factorials[num];
    }
}