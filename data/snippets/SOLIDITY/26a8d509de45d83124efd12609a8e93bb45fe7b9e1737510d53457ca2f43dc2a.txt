pragma solidity ^0.8.0; //specify the compiler version

contract myContract { //declares a contract

    //variables
    uint private variable; //private variable of type uint
    address public owner; //public variable of type address

    //events
    event NewOwner(address indexed oldOwner, address indexed newOwner); //event declaration

    //constructor
    constructor() {
        variable = 0; //set initial value of variable to 0
        owner = msg.sender; //set owner to the address of the contract creator
    }

    //functions
    function setVariable(uint _value) public { //function to set the value of variable
        require(msg.sender == owner, "Only owner can call this function"); //modifier to validate the owner
        variable = _value; //set variable value to the input parameter
    }

    function getVariable() public view returns (uint) { //function to get the value of variable
        return variable; //return the value of variable
    }

    function transferOwnership(address _newOwner) public { //function to transfer ownership
        require(msg.sender == owner, "Only owner can call this function"); //modifier to validate the owner
        require(_newOwner != address(0), "New owner cannot be null"); //modifier to validate the new owner
        owner = _newOwner; //set owner to the new owner
        emit NewOwner(msg.sender, _newOwner); //emit the event for ownership change
    }
}