// Declare a Contract
// The following code snippet declares a contract with multiple functions and modifiers.

contract MyContract {
    
    // State variables
    address owner; // owner of the contract
    string name; // name of the contract
    
    // Events
    event LogSetOwner(address indexed previousOwner, address indexed newOwner);
    event LogSetName(string previousName, string newName);
    
    // Constructor
    constructor() public {
        owner = msg.sender; // set owner as the address of the contract creator
        name = "MyContract"; // set name as MyContract
    }
    
    // Modifiers
    modifier onlyOwner {
        require(msg.sender == owner, "Only the owner can call this function.");
        _; // continue execution
    }
    
    modifier onlyValidName(string memory _name) {
        require(bytes(_name).length > 0, "Name must not be empty.");
        _; // continue execution
    }
    
    // Functions
    function changeOwner(address _newOwner) public onlyOwner {
        require(_newOwner != address(0), "New owner must be a valid address.");
        emit LogSetOwner(owner, _newOwner); // emit event
        owner = _newOwner; // set new owner
    }
    
    function changeName(string memory _newName) public onlyOwner onlyValidName(_newName) {
        emit LogSetName(name, _newName); // emit event
        name = _newName; // set new name
    }
    
    function sendMessage(string memory _message) public view returns (string memory) {
        require(bytes(_message).length > 0, "Message must not be empty."); // check if message is not empty
        return string(abi.encodePacked("This message was sent by ", name, " from address ", toString(msg.sender), ": ", _message)); // concatenate strings and convert address to string using helper function
    }
    
    // Helper function - convert address to string
    function toString(address _address) private pure returns (string memory) {
        bytes32 value = bytes32(uint256(_address)); // convert address to bytes32
        bytes memory alphabet = "0123456789abcdef"; // hex characters
        bytes memory str = new bytes(42); // max length of address in hex + 2 prefix chars
        str[0] = '0'; // prefix with "0x"
        str[1] = 'x';
        for (uint i = 0; i < 20; i++) {
            str[2+i*2] = alphabet[uint(value[i + 12] >> 4)]; // get first hex char of byte
            str[2+i*2+1] = alphabet[uint(value[i + 12] & 0x0f)]; // get second hex char of byte
        }
        return string(str); // convert bytes to string
    }
    
}