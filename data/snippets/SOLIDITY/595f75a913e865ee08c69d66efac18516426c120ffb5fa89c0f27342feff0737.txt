pragma solidity ^0.8.0; // Version of Solidity compiler used

// Contract definition
contract ComplexContract {

    // State variables
    uint256 public totalSupply; // Total supply of tokens
    mapping(address => uint256) public balances; // Mapping of addresses to token balances

    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 _value); // Event triggered on token transfer

    // Constructor
    constructor(uint256 _initialSupply) {
        totalSupply = _initialSupply; // Set total supply to initial supply
        balances[msg.sender] = _initialSupply; // Set sender's balance to initial supply
    }

    // Functions with modifiers
    function transfer(address _to, uint256 _value) public {
        require(_value <= balances[msg.sender]); // Check if sender has sufficient balance

        balances[msg.sender] -= _value; // Deduct tokens from sender's balance
        balances[_to] += _value; // Add tokens to recipient's balance

        emit Transfer(msg.sender, _to, _value); // Trigger transfer event
    }

    // Fallback function
    fallback() external payable {
        revert(); // Revert any incoming transactions
    }
}