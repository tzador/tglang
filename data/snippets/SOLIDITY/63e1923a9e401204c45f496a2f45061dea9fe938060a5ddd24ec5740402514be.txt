pragma solidity >=0.4.22 <0.6.0; // specifies the version of solidity

contract ExampleContract {
    
    address owner; // declares a variable with the type address
    
    event LogDeposit(address _sender, uint256 _amount); // declares an event with two parameters, address and uint256
    
    modifier onlyOwner { // declares a modifier that restricts the execution of a function to the contract owner
        require(msg.sender == owner, "You are not the owner of this contract.");
        _;
    }
    
    constructor() public { // constructor function
        owner = msg.sender; // assigns the address of the person deploying the contract to the owner variable
    }
    
    function deposit() public payable { // function to deposit funds to the contract
        require(msg.value > 0, "You must deposit a non-zero amount."); // checks if the deposited amount is greater than 0
        owner.transfer(msg.value); // transfers the deposited amount to the owner's address
        emit LogDeposit(msg.sender, msg.value); // emits the LogDeposit event with the sender's address and the deposited amount
    }
    
    function withdraw(uint256 _amount) public payable onlyOwner { // function to withdraw funds from the contract, restricted to the contract owner
        require(address(this).balance >= _amount, "Insufficient balance."); // checks if the contract has enough balance to withdraw the requested amount
        msg.sender.transfer(_amount); // transfers the requested amount to the sender's address
    }
    
}