// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

// Contract for a simple voting system
contract VotingSystem {
    // Variables to track votes and candidates
    mapping(address => bool) public voters;
    mapping(bytes32 => uint) public candidateVotes;
    mapping(uint => bytes32) public candidates;
    uint public candidateCount;

    // Event to emit when a new candidate is added
    event NewCandidate(uint _candidateId, bytes32 _name);

    // Function to add a new candidate
    function addCandidate(bytes32 _name) public {
        // Require that the person calling this function is not already a voter
        require(!voters[msg.sender], "Already registered as a voter.");
        // Increment candidateCount and assign candidate Id
        candidateCount++;
        uint candidateId = candidateCount;
        // Add candidate to candidates mapping
        candidates[candidateId] = _name;
        // Emit NewCandidate event
        emit NewCandidate(candidateId, _name);
    }

    // Function to vote for a candidate
    function vote(uint _candidateId) public {
        // Require that the person calling this function is a registered voter
        require(voters[msg.sender], "Not registered as a voter.");
        // Add vote to candidateVotes mapping
        candidateVotes[candidates[_candidateId]]++;
    }

    // Function to register as a voter
    function register() public {
        // Require that the person calling this function is not already a voter
        require(!voters[msg.sender], "Already registered as a voter.");
        // Set voter status to true in voters mapping
        voters[msg.sender] = true;
    }
}