contract ExampleContract {

    // Struct storing information about a person
    struct Person {
        uint256 id;
        string name;
        uint256 age;
        address walletAddress;
    }

    // Mappings used to store data
    mapping(uint256 => mapping(string => Person)) public peopleByIDAndName; // Mapping 1
    mapping(string => mapping(address => Person)) public peopleByNameAndWallet; // Mapping 2

    // Events to emit when a new person is added
    event NewPerson(string name);
    event NewPersonAdded(uint256 id, string name, uint256 age, address walletAddress);

    // Modifier to restrict access to certain functions
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner.");
        _;
    }

    // Owner of the contract
    address owner;

    // Constructor function to set owner
    constructor() {
        owner = msg.sender;
    }

    // Function to add a new person to the mappings
    function addPerson(uint256 _id, string memory _name, uint256 _age, address _walletAddress) public onlyOwner {
        // Create a new person struct
        Person memory newPerson = Person({
            id: _id,
            name: _name,
            age: _age,
            walletAddress: _walletAddress
        });

        // Add new person to mapping 1
        peopleByIDAndName[_id][_name] = newPerson;

        // Add new person to mapping 2
        peopleByNameAndWallet[_name][_walletAddress] = newPerson;

        // Emit event for new person added
        emit NewPersonAdded(_id, _name, _age, _walletAddress);
    }

    // Function to get a person's information by their ID and name
    function getPersonByIDAndName(uint256 _id, string memory _name) public view returns (uint256, string memory, uint256, address) {
        // Search for the person using mapping 1
        Person memory person = peopleByIDAndName[_id][_name];

        // Return their information
        return (person.id, person.name, person.age, person.walletAddress);
    }

    // Function to get a person's information by their name and wallet address
    function getPersonByNameAndWallet(string memory _name, address _walletAddress) public view returns (uint256, string memory, uint256, address) {
        // Search for the person using mapping 2
        Person memory person = peopleByNameAndWallet[_name][_walletAddress];

        // Return their information
        return (person.id, person.name, person.age, person.walletAddress);
    }
}