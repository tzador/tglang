pragma solidity ^0.8.0; // use version 0.8.0 or higher

// create contract MyContract
contract MyContract{
    
    // state variables
    uint256 public variable1; // public state variable of type uint256
    address public owner; // public state variable of type address
    string private variable2; // private state variable of type string

    // events
    event NewVariable1Set(uint256 newValue); // event triggered when variable1 is set
    
    // constructor
    constructor(address _owner) {
        owner = _owner; // set owner as _owner passed in
    }
    
    // functions
    
    // function to set variable1
    function setVariable1(uint256 newValue) public {
        require(msg.sender == owner, "Only the owner can set variable1!"); // require that the caller is the owner
        variable1 = newValue; // set variable1 to newValue
        emit NewVariable1Set(newValue); // emit event
    }
    
    // function to get the value of variable1
    function getVariable1() public view returns (uint256) {
        return variable1; // return variable1
    }
    
    // function to set variable2
    function setVariable2(string memory newValue) public {
        require(msg.sender == owner, "Only the owner can set variable2!"); // require that the caller is the owner
        variable2 = newValue; // set variable2 to newValue
    }
    
    // function to get the value of variable2
    function getVariable2() public view returns (string memory) {
        return variable2; // return variable2
    }
}