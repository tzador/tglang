pragma solidity >=0.8.0 <0.9.0;  // specifies the version of Solidity

contract SampleContract{
    uint private constant MAX = 100; // declares a private constant variable MAX with data type uint and assigns it to a value of 100
    
    address public owner; // declares a public state variable owner with data type address
    uint[] public nums; // declares a public state variable nums that is an array of uint
    
    event NumberAdded(uint num); // declares an event called NumberAdded with paramater num of data type uint
    
    constructor() { // constructor function that sets owner to the address of the account that deployed this contract
        owner = msg.sender;
    }
    
    function addNumber(uint num) public { // declares a function addNumber with parameter num of data type uint and a public visibility specifier
        require(num <= MAX, "Number cannot be greater than 100"); // checks if num is less than or equal to MAX, if not, throws an exception with the specified error message
        nums.push(num); // adds the value of num to the end of the nums array
        emit NumberAdded(num); // emits the NumberAdded event with the value of num as the parameter
    }
    
    function getSum() public view returns(uint) { // declares a function getSum with a public visibility specifier, a view mutability specifier, and a return type of uint
        uint sum = 0; // declares a local variable sum with data type uint and assigns it to a value of 0
        for (uint i=0; i < nums.length; i++) { // iterates through the nums array using a for loop
            sum += nums[i]; // adds the value of the current index to the sum variable
        }
        return sum; // returns the value of sum
    }
    
    function transferOwnership(address newOwner) external { // declares a function transferOwnership with a parameter newOwner of data type address and an external visibility specifier
        require(msg.sender == owner, "Only the owner can transfer ownership"); // checks if the caller is the owner, if not, throws an exception with the specified error message
        owner = newOwner; // assigns the value of newOwner to the owner variable
    }
}