// Contract for a token with ERC20 standard
contract ERC20Token {
    // Use SafeMath library for safe mathematical operations
    using SafeMath for uint256;

    // Hash table to store balances of each address
    mapping(address => uint256) public balances;

    // Hash table to store allowance for each address and spender
    mapping(address => mapping(address => uint256)) public allowances;

    // Total supply of the token
    uint256 public totalSupply;

    // Token name and symbol
    string public name;
    string public symbol;

    // Number of decimal places for the token
    uint8 public decimals;

    // Event to trigger when tokens are transferred
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Event to trigger when an allowance is set
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Constructor that sets initial token parameters
    constructor() public {
        name = "MyToken";
        symbol = "MTK";
        decimals = 18;
        totalSupply = 1000000 * (10 ** uint256(decimals));

        // Assign total supply to the contract deployer
        balances[msg.sender] = totalSupply;

        // Trigger transfer event to reflect initial balance
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    // Function to get the balance of an address
    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    // Function to transfer tokens from sender to receiver
    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(recipient != address(0), "Invalid recipient address"); // Check for valid recipient

        // Check if sender has enough balance
        require(amount <= balances[msg.sender], "Insufficient balance");

        // Update balances
        balances[msg.sender] = balances[msg.sender].sub(amount); // Subtract amount from sender's balance
        balances[recipient] = balances[recipient].add(amount); // Add amount to recipient's balance

        // Trigger transfer event
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    // Function to approve an allowance for a spender
    function approve(address spender, uint256 amount) public returns (bool) {
        // Set allowance for sender
        allowances[msg.sender][spender] = amount;

        // Trigger approval event
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    // Function to transfer tokens from a specific address to another address
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(recipient != address(0), "Invalid recipient address"); // Check for valid recipient

        // Check if sender has enough balance
        require(amount <= balances[sender], "Insufficient balance");

        // Check if sender has enough allowance
        require(amount <= allowances[sender][msg.sender], "Insufficient allowance");

        // Update balances and allowance
        balances[sender] = balances[sender].sub(amount); // Subtract amount from sender's balance
        balances[recipient] = balances[recipient].add(amount); // Add amount to recipient's balance
        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(amount); // Subtract amount from sender's allowance

        // Trigger transfer event
        emit Transfer(sender, recipient, amount);
        return true;
    }
}

// SafeMath library to prevent mathematical overflow
library SafeMath {
    // Function to add two numbers without overflowing
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "Mathematical overflow");
        return c;
    }

    // Function to subtract one number from another without underflowing
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "Mathematical underflow");
        return a - b;
    }

    // Function to multiply two numbers without overflowing
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // If either of the numbers is 0, return 0
        if (a == 0 || b == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "Mathematical overflow");
        return c;
    }

    // Function to divide one number by another without underflowing
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "Invalid divisor");
        // Solidity automatically throws an error if division by 0 is attempted
        return a / b;
    }
}