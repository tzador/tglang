// Contract to represent a voting system
// This contract implements the Solidity Voting Smart Contract.
pragma solidity ^0.8.0;

contract VotingSystem {
    // Variables to store information about the contract
    address public owner; // The owner of the contract
    uint public totalVotes; // Total number of votes casted
    uint public proposalCount; // Total number of proposals

    // Struct representing a single proposal
    struct Proposal {
        string description; // Description of the proposal
        uint voteCount; // Number of positive votes
        mapping(address => bool) votes; // Map to keep track of who has voted
    }

    // Map to store the proposals
    mapping(uint => Proposal) public proposals;

    // Constructor to set the owner and initial values
    constructor() {
        owner = msg.sender; // Set the owner of the contract
        totalVotes = 0; // Set the initial total votes to 0
        proposalCount = 0; // Set the initial proposal count to 0
    }

    // Function to add a new proposal
    function addProposal(string memory _description) public {
        require(msg.sender == owner, "Only owner can add proposals"); // Check if the caller is the owner
        proposals[proposalCount] = Proposal(_description, 0); // Add the proposal to the proposals map with initial vote count as 0
        proposalCount++; // Increase the proposal count
    }

    // Function to vote for a proposal
    function vote(uint _proposal) public {
        require(proposals[_proposal].votes[msg.sender] == false, "Already voted"); // Check if the user has already voted for this proposal
        proposals[_proposal].votes[msg.sender] = true; // Mark that the user has voted
        proposals[_proposal].voteCount++; // Increase the vote count for the proposal
        totalVotes++; // Increase the total number of votes
    }
}