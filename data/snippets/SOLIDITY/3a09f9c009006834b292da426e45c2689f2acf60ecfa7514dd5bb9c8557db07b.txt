pragma solidity >=0.4.22 <0.6.0;

contract ComplexContract {
    // Variables
    uint256 public value;
    address public owner;

    // Events
    event Deposit(address indexed _from, uint256 _value);

    // Constructor
    constructor(uint256 _value) public {
        value = _value;
        owner = msg.sender;
    }

    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }

    // Functions
    function deposit() public payable {
        // update value
        value += msg.value;
        // emit event
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 _amount) public onlyOwner {
        // check if enough balance
        require(_amount <= value, "Insufficient balance.");
        // update value
        value -= _amount;
        // transfer ether to owner
        msg.sender.transfer(_amount);
    }

    function changeOwner(address _newOwner) public onlyOwner {
        // update owner
        owner = _newOwner;
    }

    function getValue() public view returns(uint256) {
        // return value
        return value;
    }
}