// Import necessary libraries
pragma solidity ^0.8.0;

// Create contract
contract Token {
    // Initialize state variables
    uint256 public totalSupply;
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    
    // Create mapping for addresses and their balances
    mapping(address => uint256) public balanceOf;
    
    // Create events for transfer and approval functions
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    // Create constructor to set initial values
    constructor(uint256 _initialSupply, string memory _name, string memory _symbol) {
        // Set initial values
        totalSupply = _initialSupply * 10 ** decimals;
        name = _name;
        symbol = _symbol;
        
        // Assign initial supply to contract creator
        balanceOf[msg.sender] = totalSupply;
    }
    
    // Create functions for transfer and approval functionality
    function transfer(address _to, uint256 _value) public returns (bool success) {
        // Check if sender has enough tokens
        require(balanceOf[msg.sender] >= _value);
        
        // Subtract tokens from sender's balance and add to receiver's balance
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        
        // Emit transfer event
        emit Transfer(msg.sender, _to, _value);
        
        // Return true to indicate successful transfer
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) {
        // Update allowance for spender
        allowance[msg.sender][_spender] = _value;
        
        // Emit approval event
        emit Approval(msg.sender, _spender, _value);
        
        // Return true to indicate successful approval
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        // Check if spender has enough allowance to transfer tokens from sender
        require(_value <= allowance[_from][msg.sender]);
        
        // Check if sender has enough tokens
        require(balanceOf[_from] >= _value);
        
        // Subtract tokens from sender's balance and add to receiver's balance
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        
        // Update allowance for spender
        allowance[_from][msg.sender] -= _value;
        
        // Emit transfer event
        emit Transfer(_from, _to, _value);
        
        // Return true to indicate successful transfer
        return true;
    }
}