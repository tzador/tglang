pragma solidity ^0.8.4;

// This is a comment

/*
This is a multi-line comment
*/

/**
 * @title Voting
 * @dev A smart contract for conducting elections
 */
contract Voting {
    
    // Variables
    uint public votingStartTime;
    uint public votingEndTime;
    bool public votingClosed;
    
    // Vote structure
    struct Vote {
        address voter;
        bytes32 choice; // in encrypted form
    }
    
    // List of all votes
    Vote[] public votes;
    
    // Events
    event NewVote(address voter, bytes32 choice);
    event VotingStarted(uint startTime, uint endTime);
    event VotingEnded(bool closed);
    
    /**
     * @dev Constructor to set the voting start and end times
     * @param _startTime The start time of voting 
     * @param _endTime The end time of voting 
     */
    constructor (uint _startTime, uint _endTime) {
        votingStartTime = _startTime;
        votingEndTime = _endTime;
    }
    
    /**
     * @dev Function to handle voting
     * @param _choice The encrypted vote choice
     */
    function vote(bytes32 _choice) public {
        require(!votingClosed, "Voting has ended");
        Vote memory vote = Vote({
            voter: msg.sender,
            choice: _choice
        });
        votes.push(vote);
        emit NewVote(msg.sender, _choice);
    }
    
    /**
     * @dev Function to start voting
     */
    function startVoting() public {
        require(!votingClosed, "Voting has already started");
        votingStartTime = block.timestamp;
        emit VotingStarted(votingStartTime, votingEndTime);
    }
    
    /**
     * @dev Function to end voting
     */
    function endVoting() public {
        require(!votingClosed, "Voting has already ended");
        require(block.timestamp >= votingEndTime, "Voting is still in progress");
        votingClosed = true;
        emit VotingEnded(votingClosed);
    }
}