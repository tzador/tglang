contract OloToken {
    using SafeMath for uint256;

    // Variables
    string public constant name = "OloToken"; // Token name
    string public constant symbol = "OLO"; // Token symbol
    uint8 public constant decimals = 18; // Number of decimal places
    uint256 public totalSupply; // Total supply of tokens

    // Mapping of balances
    mapping (address => uint256) public balanceOf;
    // Mapping of allowances
    mapping (address => mapping (address => uint256)) public allowance;

    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    // Constructor
    constructor(uint256 _initialSupply) public {
        totalSupply = _initialSupply; // Set total supply
        balanceOf[msg.sender] = _initialSupply; // Give all tokens to contract creator
    }
    
    // Transfer function
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value); // Checks if sender has enough balance
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); // Decrease sender's balance
        balanceOf[_to] = balanceOf[_to].add(_value); // Increase recipient's balance
        emit Transfer(msg.sender, _to, _value); // Emit Transfer event
        return true; // Transfer successful
    }
    
    // Approve function
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value; // Set allowance for spender
        emit Approval(msg.sender, _spender, _value); // Emit Approval event
        return true; // Approval successful
    }
    
    // Transfer from function
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value); // Checks if sender has enough balance
        require(allowance[_from][msg.sender] >= _value); // Checks if sender is allowed to spend _value from _from's balance
        balanceOf[_from] = balanceOf[_from].sub(_value); // Decrease _from's balance
        balanceOf[_to] = balanceOf[_to].add(_value); // Increase _to's balance
        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Decrease sender's allowance
        emit Transfer(_from, _to, _value); // Emit Transfer event
        return true; // Transfer successful
    }
    
    // Returns the amount of tokens approved by _owner to _spender
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowance[_owner][_spender];
    }
    
    // Returns the balance of _owner's account
    function balanceOf(address _owner) public view returns (uint256) {
        return balanceOf[_owner];
    }
}