pragma solidity ^0.6.0; //specify the version of Solidity being used

//create a contract named "MyContract"
contract MyContract {
    string public name; //declare a public variable "name" of type string
    
    //set the value of "name" to be the input string
    function setName(string memory _name) public {
        name = _name;
    }
    
    //view the value of "name"
    function getName() public view returns (string memory) {
        return name;
    }
    
    //create an event to emit the current value of "name"
    event NameChanged(string newName);
    
    //a map to store the name and age of a person
    mapping(string => uint) public age;
    
    //function to add a person to the map
    function addPerson(string memory _name, uint _age) public {
        age[_name] = _age;
    }
    
    //modifier to restrict access to certain functions
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }
    
    address public owner; //declare a variable "owner" of type address
    
    //constructor to set the value of owner to the sender's address
    constructor() public {
        owner = msg.sender;
    }
    
    //function only callable by the owner; changes the value of "name" and emits an event
    function changeName(string memory _newName) public onlyOwner {
        name = _newName;
        emit NameChanged(_newName);
    }
    
    //function to delete a person from the map
    function deletePerson(string memory _name) public onlyOwner {
        delete age[_name];
    }
}