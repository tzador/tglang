// Annotated markdown code snippet
// This is a contract to create a token that complies with the ERC-20 standard.
// It includes all five principles of SOLIDITY - Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, Dependency Inversion.

pragma solidity ^0.8.0;

// Single Responsibility - each element has a single responsibility, such as transfer or balance.
contract Token {
    // Variables
    string private _name;
    string private _symbol;
    uint256 private _decimals;
    uint256 private _totalSupply;
    address private _owner;
    // Mappings to store balance and allowances
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    // Events to notify external entities of important contract changes
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    // Constructor - set initial token details and assign total supply to owner
    constructor (string memory name_, string memory symbol_, uint256 decimals_, uint256 totalSupply_) {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
        _totalSupply = totalSupply * 10 ** decimals;
        _owner = msg.sender;
        _balances[msg.sender] = _totalSupply;
    }

    // Getters for token details
    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    // Functions to transfer tokens from sender to receiver
    function transfer(address receiver, uint256 amount) public returns (bool) {
        _transfer(msg.sender, receiver, amount);
        return true;
    }

    // Functions to approve another address to spend tokens on behalf of sender
    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    // Function to transfer tokens from one account to another on behalf of sender
    function transferFrom(address sender, address receiver, uint256 amount) public returns (bool) {
        _transfer(sender, receiver, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    // Function to increase the allowance for certain spender
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    // Function to decrease the allowance for certain spender
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }

    // Internal function to transfer tokens from one account to another
    function _transfer(address sender, address receiver, uint256 amount) internal {
        require(sender != address(0), "Sender cannot be zero address");
        require(receiver != address(0), "Receiver cannot be zero address");
        require(_balances[sender] >= amount, "Insufficient balance");

        _balances[sender] -= amount;
        _balances[receiver] += amount;

        emit Transfer(sender, receiver, amount);
    }

    // Internal function to approve another address to spend tokens on behalf of sender
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Owner cannot be zero address");
        require(spender != address(0), "Spender cannot be zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    // Function to transfer ownership of contract to new owner
    function transferOwnership(address newOwner) public {
        require(newOwner != address(0), "New owner cannot be zero address");
        require(msg.sender == _owner, "Only current owner can transfer ownership");

        emit OwnershipTransferred(_owner, newOwner);

        _owner = newOwner;
    }
}