// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.4;

// Interface declaration for a Contract Name

interface ExampleContract {
  function doSomething() external view returns(bool);
}

/**
 * @title Storage
 * @notice Stores a value and emits an event when it is changed
 */
contract Storage {
  uint256 public storedValue;

  /**
   * @notice Sets the stored value and emits an event
   * @param newValue the new value to be stored
   */
  function set(uint256 newValue) public {
    storedValue = newValue;
    emit ValueChanged(newValue);
  }

  /**
   * @notice Gets the stored value
   * @return the current stored value
   */
  function get() public view returns (uint256) {
    return storedValue;
  }

  event ValueChanged(uint256 newValue);
}

/**
 * @title SimpleContract
 * @notice Demonstrates the use of the Storage contract
 */
contract SimpleContract {
  Storage storageContract;

  constructor(address storageAddress) {
    storageContract = Storage(storageAddress);
  }

  /**
   * @notice Gets the stored value from the Storage contract
   * @return the current stored value
   */
  function getStoredValue() public view returns (uint256) {
    return storageContract.get();
  }

  /**
   * @notice Sets the stored value in the Storage contract
   * @param newValue the new value to be stored
   */
  function setStoredValue(uint256 newValue) public {
    storageContract.set(newValue);
  }
}

/**
 * @title AdvancedContract
 * @notice Demonstrates the use of the SimpleContract and calls the doSomething function from the ExampleContract interface
 */
contract AdvancedContract {
  using SafeMath for uint256;

  SimpleContract simpleContract;
  ExampleContract exampleContract;

  constructor(address simpleContractAddress, address exampleContractAddress) {
    simpleContract = SimpleContract(simpleContractAddress);
    exampleContract = ExampleContract(exampleContractAddress);
  }

  /**
   * @notice Sets the stored value using the SimpleContract and calls the doSomething function from the ExampleContract
   * @param newValue the new value to be stored
   */
  function setStoredValueAndCall(uint256 newValue) public {
    simpleContract.setStoredValue(newValue);
    require(exampleContract.doSomething(), "doSomething failed");
  }
}

/**
 * @title SafeMath
 * @notice Library for safe math operations
 */
library SafeMath {
  /**
   * @notice Adds two numbers together and reverts if the result overflows
   * @param a first number
   * @param b second number
   * @return the sum of a and b
   */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "addition overflow");
    return c;
  }
}