pragma solidity >=0.4.22 <0.7.0;

contract SimpleStorage {
    // The constant `owner` is initialized to the account that creates the contract
    // and can only be changed by the current owner.
    address private owner;

    // The value stored in this contract can only be accessed (either publically or
    // internally) by the owner of the contract.
    uint private storedData;

    // The `constructor` is executed at deployment.
    constructor() public {
        // Set the owner variable to the address of the person
        // creating this contract.
        owner = msg.sender;

        // Set the initial value to 100.
        storedData = 100;
    }

    // A `getter` function is used to retrieve the value stored in this contract.
    function getData() public view returns (uint) {
        require(msg.sender == owner, "Only the owner of this contract can access the stored data.");
        return storedData;
    }

    // A `setter` function is used to modify the value stored in this contract.
    function setData(uint newVal) public {
        require(msg.sender == owner, "Only the owner of this contract can modify the stored data.");
        storedData = newVal;
    }
}

// This is an example of how another contract can interact with the `SimpleStorage` contract.
contract StorageUser {
    // The `SimpleStorage` contract object.
    SimpleStorage private ss;

    // The `constructor` is executed at deployment.
    constructor(SimpleStorage _ss) public {
        // Set the `SimpleStorage` contract object to the one passed in to the constructor.
        ss = _ss;
    }

    // Function to retrieve the value from the `SimpleStorage` contract.
    function getStoredData() public view returns (uint) {
        // Uses the `getData` function in the `SimpleStorage` contract object.
        return ss.getData();
    }

    // Function to set a new value in the `SimpleStorage` contract.
    function updateStoredData(uint newVal) public {
        // Uses the `setData` function in the `SimpleStorage` contract object.
        ss.setData(newVal);
    }
}