contract Token {
  bytes32 internal constant _NAME = "My Token";
  bytes32 internal constant _SYMBOL = "MT";
  uint8 internal constant _DECIMALS = 18;
  uint256 internal constant _TOTAL_SUPPLY = 1000000 * 10 ** 18;
  mapping(address => uint256) internal _balances;
  mapping(address => mapping(address => uint256)) internal _allowances;
  address public owner;

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);

  constructor() public {
    owner = msg.sender;
    _balances[owner] = _TOTAL_SUPPLY;
    emit Transfer(address(0), owner, _TOTAL_SUPPLY);
  }

  function name() public pure returns (bytes32) {
    return _NAME;
  }

  function symbol() public pure returns (bytes32) {
    return _SYMBOL;
  }

  function decimals() public pure returns (uint8) {
    return _DECIMALS;
  }

  function totalSupply() public pure returns (uint256) {
    return _TOTAL_SUPPLY;
  }

  function balanceOf(address account) public view returns (uint256) {
    return _balances[account];
  }

  function transfer(address recipient, uint256 amount) public returns (bool) {
    _transfer(msg.sender, recipient, amount);
    return true;
  }

  function approve(address spender, uint256 amount) public returns (bool) {
    _approve(msg.sender, spender, amount);
    return true;
  }

  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
    _transfer(sender, recipient, amount);
    _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
    return true;
  }

  function allowance(address owner, address spender) public view returns (uint256) {
    return _allowances[owner][spender];
  }

  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
    return true;
  }

  function _transfer(address sender, address recipient, uint256 amount) internal {
    require(sender != address(0), "Transfer from the zero address is not allowed.");
    require(recipient != address(0), "Transfer to the zero address is not allowed.");

    _balances[sender] = _balances[sender].sub(amount);
    _balances[recipient] = _balances[recipient].add(amount);
    emit Transfer(sender, recipient, amount);
  }

  function _approve(address owner, address spender, uint256 amount) internal {
    require(owner != address(0), "Cannot approve allowance from the zero address.");
    require(spender != address(0), "Cannot approve allowance for the zero address.");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }
}