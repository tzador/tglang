pragma solidity ^0.5.0;

// contract for a decentralized voting system
contract VotingSystem {
// state variables
address public owner;
uint public totalVotes;
// event fired when a new candidate is added
event NewCandidate(string name, uint voteCount);

// struct to represent a candidate
struct Candidate {
string name;
uint voteCount;
}

// array to store the candidates
Candidate[] public candidates;

// mapping to store the address of voters and their voted candidate
mapping(address => Candidate) public voters;

// constructor to set the owner of contract
constructor() public {
owner = msg.sender;
}

// function to add a new candidate to the candidates array
function addCandidate(string candidateName) public {
require(msg.sender == owner, "Only the owner can add candidates.");
candidates.push(Candidate(candidateName, 0));
// emit the NewCandidate event
emit NewCandidate(candidateName, 0);
}

// function to vote for a candidate
function voteForCandidate(string candidateName) public {
// check if the sender has already voted
require(voters[msg.sender].voteCount == 0, "Already voted for a candidate.");
// iterate through the candidates array to find the candidate
for (uint i = 0; i < candidates.length; i++) {
if (keccak256(abi.encodePacked(candidates[i].name)) == keccak256(abi.encodePacked(candidateName))) {
voters[msg.sender] = candidates[i];
// increment the vote count of the candidate
candidates[i].voteCount++;
// increment the total vote count
totalVotes++;
break;
}
}
}

// function to get the vote count for a candidate
function getVoteCount(string candidateName) public view returns (uint) {
// iterate through the candidates array to find the candidate
for (uint i = 0; i < candidates.length; i++) {
if (keccak256(abi.encodePacked(candidates[i].name)) == keccak256(abi.encodePacked(candidateName))) {
return candidates[i].voteCount;
}
}
}

// function to get the name of the winner
function getWinner() public view returns (string) {
uint maxVotes = 0;
string memory winner = "";

// iterate through the candidates array to find the winner
for (uint i = 0; i < candidates.length; i++) {
if (candidates[i].voteCount > maxVotes) {
maxVotes = candidates[i].voteCount;
winner = candidates[i].name;
}
}
return winner;
}
}