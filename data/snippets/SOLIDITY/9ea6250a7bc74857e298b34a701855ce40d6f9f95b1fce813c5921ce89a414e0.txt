/*
 * @title ERC20 Standard Token
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */

contract ERC20Interface {
    // total number of tokens in existence
    uint256 public totalSupply;

    // Returns the amount of tokens owned by `account`.
    function balanceOf(address account) public view returns (uint256);

    // Moves `amount` tokens from the caller's account to `recipient`.
    // Returns a boolean value indicating whether the operation succeeded or not.
    function transfer(address recipient, uint256 amount) public returns (bool);

    // Returns the remaining number of tokens that `spender` will be allowed
    // to spend on behalf of `owner` through `transferFrom`. This is zero by default.
    // This value changes when `approve` or `transferFrom` are called.
    function allowance(address owner, address spender) public view returns (uint256);

    // Sets `amount` as the allowance of `spender` over the caller's tokens.
    // Returns a boolean value indicating whether the operation succeeded or not.
    function approve(address spender, uint256 amount) public returns (bool);

    // Moves `amount` tokens from `sender` to `recipient` using the
    // allowance mechanism. `amount` is then deducted from the caller's
    // allowance.
    // Returns a boolean value indicating whether the operation succeeded or not.
    // Emits a `Transfer` event.
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool);

    // Emitted when `value` tokens are moved from one account (`from`) to
    // another (`to`).
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Emitted when the allowance of a `spender` for an `owner` is set by
    // a call to `approve`. `value` is the new allowance.
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract ERC20Token is ERC20Interface {
    string public name;
    string public symbol;
    uint8 public decimals;

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowances;

    constructor(string _tokenName, string _tokenSymbol, uint8 _decimals, uint256 _initialSupply) public {
        name = _tokenName;
        symbol = _tokenSymbol;
        decimals = _decimals;
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply;
    }

    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);

        // SafeMath.sub will throw if there is not enough balance.
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowances[_from][msg.sender]);

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) {
        allowances[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowances[_owner][_spender];
    }
}