// An example of a complex smart contract in Solidity

// SPDX-License-Identifier: MIT

// Contract declaration
contract MyContract {
    // State variables
    uint256 public totalSupply;
    address public owner;
    // Events
    event NewOwner(address indexed previousOwner, address indexed newOwner);
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    // Constructor
    constructor(uint256 _initialSupply) public {
        // Set totalSupply
        totalSupply = _initialSupply;
        // Set owner
        owner = msg.sender;
    }
    
    // Function to transfer tokens
    function transfer(address _to, uint256 _value) public {
        // Check for sufficient balance
        require(_value <= balances[msg.sender]);
        // Update balances
        balances[msg.sender] = balances[msg.sender] - _value;
        balances[_to] = balances[_to] + _value;
        // Emit transfer event
        emit Transfer(msg.sender, _to, _value);
    }
    
    // Function to change ownership
    function changeOwner(address _newOwner) public {
        // Check if caller is the owner
        require(msg.sender == owner);
        // Update owner address
        owner = _newOwner;
        // Emit new owner event
        emit NewOwner(msg.sender, _newOwner);
    }
    
    // Mapping to store token balances
    mapping(address => uint256) balances;
}