contract MyToken {
    // declare variables
    uint public totalSupply; // total number of tokens
    mapping(address => uint) balances; // mapping to store balances of each address
    address public owner; // address of contract owner

    // events
    event Transfer(address indexed _from, address indexed _to, uint _value); // event to track token transfers
    event Approval(address indexed _owner, address indexed _spender, uint _value); // event to track approved token transfers

    // constructor - initializing total supply and owner
    constructor(uint _initialSupply) public {
        totalSupply = _initialSupply;
        owner = msg.sender; // set contract owner as the initial creator of the contract
        balances[owner] = totalSupply; // allocation of total supply to owner's balance
    }

    // standard transfer function
    function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] >= _value); // check if sender has enough balance
        balances[msg.sender] -= _value; // reduce sender's balance
        balances[_to] += _value; // increase recipient's balance
        emit Transfer(msg.sender, _to, _value); // emit transfer event
        return true;
    }

    // approval and transferFrom function
    mapping (address => mapping (address => uint)) public allowance;
    function approve(address _spender, uint _value) public returns (bool) {
        allowance[msg.sender][_spender] = _value; // set allowance to _spender for msg.sender
        emit Approval(msg.sender, _spender, _value); // emit approval event
        return true;
    }
    function transferFrom(address _from, address _to, uint _value) public returns (bool) {
        require(balances[_from] >= _value); // check if _from has enough balance
        require(allowance[_from][msg.sender] >= _value); // check if msg.sender is approved to spend _from's tokens
        balances[_from] -= _value; // reduce _from's balance
        balances[_to] += _value; // increase _to's balance
        allowance[_from][msg.sender] -= _value; // decrease allowed amount
        emit Transfer(_from, _to, _value); // emit transfer event
        return true;
    }
}