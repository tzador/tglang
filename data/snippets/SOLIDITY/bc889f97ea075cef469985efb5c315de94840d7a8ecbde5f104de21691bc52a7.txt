//This contract represents a simple ERC20 token
contract MyToken {
    string public name; //Token name
    string public symbol; //Token symbol
    uint8 public decimals; //Number of decimal places for the token

    //Mapping to store the balance of each address
    mapping(address => uint256) public balanceOf;

    //Mapping to store the allowance given by owner to spender
    mapping(address => mapping(address => uint256)) public allowance;

    //Events that will be emitted on changes
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    //Constructor function to initialize the token details
    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) public {
        name = _name; //Set the token name
        symbol = _symbol; //Set the token symbol
        decimals = _decimals; //Set the number of decimal places

        //Assign the initial supply to the contract creator
        balanceOf[msg.sender] = _initialSupply;
    }

    //Function to transfer tokens from one address to another
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0)); //Check if the address is valid
        require(_value > 0);
        require(_value <= balanceOf[msg.sender]); //Check if the sender has enough tokens
        
        balanceOf[msg.sender] = balanceOf[msg.sender] - _value; //Update sender's balance
        balanceOf[_to] = balanceOf[_to] + _value; //Update receiver's balance
        
        emit Transfer(msg.sender, _to, _value); //Emit the transfer event
        return true;
    }

    //Function to approve the spender to transfer tokens from the owner's balance
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowance[msg.sender][_spender] = _value; //Set the allowance
        emit Approval(msg.sender, _spender, _value); //Emit the approval event
        return true;
    }

    //Function to transfer tokens from one address to another on behalf of the owner
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0)); //Check if the address is valid
        require(_value > 0);
        require(_value <= balanceOf[_from]); //Check if the sender has enough tokens
        require(_value <= allowance[_from][msg.sender]); //Check if the allowance is enough
        
        balanceOf[_from] = balanceOf[_from] - _value; //Update sender's balance
        balanceOf[_to] = balanceOf[_to] + _value; //Update receiver's balance
        allowance[_from][msg.sender] = allowance[_from][msg.sender] - _value; //Update allowance
        
        emit Transfer(_from, _to, _value); //Emit the transfer event
        return true;
    }
}