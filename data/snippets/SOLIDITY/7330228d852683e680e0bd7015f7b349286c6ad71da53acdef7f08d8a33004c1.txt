pragma solidity ^0.8.0; //Specifies compiler version

contract ExampleContract {

    //State Variables
    uint public num1; //Unsigned integer
    string public str1; //String
    address public owner; //Address

    //Constructor
    constructor() {
        owner = msg.sender; //Assigns contract deployer's address to 'owner' variable
    }

    //Modifier
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function."); //Requires the caller to be the contract owner, otherwise reverts with a custom error message
        _; //Underscore indicates the rest of the code in the function will be executed after the modifier
    }

    //Event
    event NumberUpdated(uint _newNumber); //Declares an event called 'NumberUpdated' with a parameter of unsigned integer type

    //Function
    function updateNumber(uint _newNumber) public onlyOwner { //Public function that only allows the contract owner to call it
        num1 = _newNumber; //Updates the value of 'num1' state variable with the input parameter
        emit NumberUpdated(_newNumber); //Emits the 'NumberUpdated' event with the new number as a parameter
    }

    //Fallback function
    fallback() external payable {
        //Fallback function can receive Ether without a function call
    }
}