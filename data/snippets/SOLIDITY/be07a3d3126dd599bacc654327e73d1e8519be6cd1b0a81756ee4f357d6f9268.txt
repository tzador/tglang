contract Bank {
    
    // Variables
    address public owner;
    mapping (address => uint) public balance;
    
    event Deposit(address _depositer, uint _amount);
    event Withdrawal(address _withdrawer, uint _amount);
    
    // Constructor
    constructor() public {
        owner = msg.sender;
    }
    
    // Functions
    function deposit() public payable {
        balance[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    function withdraw(uint _amount) public {
        require(_amount <= balance[msg.sender], "Not enough funds in account");
        balance[msg.sender] -= _amount;
        msg.sender.transfer(_amount);
        emit Withdrawal(msg.sender, _amount);
    }
    
    function changeOwner(address _newOwner) public {
        require(msg.sender == owner, "Only the owner can change ownership");
        require(_newOwner != address(0), "Invalid address");
        owner = _newOwner;
    }
}