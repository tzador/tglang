contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata { // creating a contract that inherits from three other contracts, ERC721, ERC721Enumerable, and ERC721Metadata

  using SafeMath for uint256; // importing a library for safe mathematical operations on uint256 data type

  string private _name; // declaring a private variable _name of data type string
  string private _symbol; // declaring a private variable _symbol of data type string

  constructor (string name, string symbol) public { // declaring a constructor with two parameters, name and symbol
    _name = name; // assigning value of name to the private variable _name
    _symbol = symbol; // assigning value of symbol to the private variable _symbol
  }

  function name() external view returns (string) { // declaring a function name, which is publicly accessible and returns a string
    return _name; // returning the value of the private variable _name
  }

  function symbol() external view returns (string) { // declaring a function symbol, which is publicly accessible and returns a string
    return _symbol; // returning the value of the private variable _symbol
  }

  function supportsInterface(bytes4 interfaceId) external view returns (bool) { // declaring a function supportsInterface, which is publicly accessible and returns a bool
    return interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f; // checking if the interfaceId is equal to the ERC721 and ERC721Enumerable interface IDs
  }

  function tokenURI(uint256 tokenId) external view returns (string) { // declaring a function tokenURI, which is publicly accessible and returns a string, with a parameter tokenId of data type uint256
    require(_exists(tokenId)); // checking if the token exists (calling the _exists function from the ERC721 contract)
    return concat("https://example.com/tokens/", uint256ToString(tokenId)); // concatenating the base URL with the tokenId (converted from uint256 to string using the uint256ToString function)
  }

  function concat(string a, string b) internal pure returns (string) { // declaring an internal pure function concat, which concatenates two strings and returns a string, with two parameters of data type string
    bytes memory bytesStr = bytes(a); // converting the string a to a bytes array
    bytes memory bytesStr2 = bytes(b); // converting the string b to a bytes array
    string memory str = new string(bytesStr.length + bytesStr2.length); // creating a new string with the length of the two strings combined
    bytes memory bytesStr3 = bytes(str); // converting the new string to a bytes array
    uint k = 0; // declaring a counter variable k
    for (uint i = 0; i < bytesStr.length; i++) { // looping through the first bytes array
      bytesStr3[k++] = bytesStr[i]; // adding each element to the new bytes array
    }
    for (i = 0; i < bytesStr2.length; i++) { // looping through the second bytes array
      bytesStr3[k++] = bytesStr2[i]; // adding each element to the new bytes array
    }
    return string(bytesStr3); // converting the bytes array back to a string and returning it
  }

  function uint256ToString(uint256 i) internal pure returns (string) { // declaring an internal pure function uint256ToString, which converts a uint256 to a string and returns a string, with a parameter i of data type uint256
    if (i == 0) return "0"; // checking if i is equal to 0
    uint j = i; // declaring a variable j and assigning the value of i to it
    uint length; // declaring a variable length
    while (j != 0) { // looping while j is not equal to 0
      length++; // incrementing the length variable
      j /= 10; // dividing j by 10
    }
    bytes memory bstr = new bytes(length); // creating a new bytes array with the length of the number converted to a string
    j = i; // assigning the value of i to j again
    while (j != 0) { // looping while j is not equal to 0
      bstr[--length] = byte(48 + j % 10); // converting each digit to its ASCII code and adding it to the bytes array
      j /= 10; // dividing j by 10
    }
    return string(bstr); // converting the bytes array back to a string and returning it
  }
}