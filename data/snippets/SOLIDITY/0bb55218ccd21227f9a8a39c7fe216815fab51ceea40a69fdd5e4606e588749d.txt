// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

// Import OpenZeppelin contracts
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";

// Contract to manage a decentralized exchange
contract DecentralizedExchange {
    
    using SafeMath for uint256;
    
    // Admin of the exchange
    address public admin;
    
    // Fee charged on trades, 0.3% by default
    uint256 public tradeFee = 30;
    
    // Balances of tokens in the exchange for each user
    mapping(address => mapping(address => uint256)) public tokenBalances;
    
    // Events to track trades and fee collection
    event Trade(address indexed fromToken, address indexed toToken, address indexed trader, uint256 fromAmount, uint256 toAmount);
    event FeeCollected(address indexed token, uint256 amount);
    
    // Constructor to set the admin of the exchange
    constructor() {
        admin = msg.sender;
    }
    
    // Function to set the trade fee, only the admin can call this
    function setTradeFee(uint256 _newFee) external {
        require(msg.sender == admin, "Only the admin can change the fee");
        require(_newFee <= 100, "Fee must be between 0 and 100");
        tradeFee = _newFee;
    }
    
    // Function to deposit tokens into the exchange
    function depositToken(address _tokenAddress, uint256 _amount) external {
        IERC20 token = IERC20(_tokenAddress);
        require(token.transferFrom(msg.sender, address(this), _amount), "Transfer failed, make sure you have approved the exchange to spend your tokens");
        tokenBalances[_tokenAddress][msg.sender] = tokenBalances[_tokenAddress][msg.sender].add(_amount);
    }
    
    // Function to withdraw tokens from the exchange
    function withdrawToken(address _tokenAddress, uint256 _amount) external {
        IERC20 token = IERC20(_tokenAddress);
        require(tokenBalances[_tokenAddress][msg.sender] >= _amount, "Not enough balance");
        require(token.transfer(msg.sender, _amount), "Transfer failed");
        tokenBalances[_tokenAddress][msg.sender] = tokenBalances[_tokenAddress][msg.sender].sub(_amount);
    }
    
    // Function to trade tokens on the exchange
    function trade(address _fromToken, address _toToken, uint256 _fromAmount) external {
        require(tokenBalances[_fromToken][msg.sender] >= _fromAmount, "Not enough balance");
        uint256 fee = _fromAmount.mul(tradeFee).div(1000);
        uint256 amountAfterFee = _fromAmount.sub(fee);
        tokenBalances[_fromToken][msg.sender] = tokenBalances[_fromToken][msg.sender].sub(_fromAmount);
        tokenBalances[_toToken][msg.sender] = tokenBalances[_toToken][msg.sender].add(amountAfterFee);
        emit Trade(_fromToken, _toToken, msg.sender, _fromAmount, amountAfterFee);
        emit FeeCollected(_fromToken, fee);
    }
    
    // Function to collect accumulated fees, only the admin can call this
    function collectFees(address _tokenAddress) external {
        require(msg.sender == admin, "Only the admin can collect fees");
        IERC20 token = IERC20(_tokenAddress);
        uint256 feeBalance = tokenBalances[_tokenAddress][address(this)];
        require(feeBalance > 0, "No fees available to collect");
        require(token.transfer(msg.sender, feeBalance), "Transfer failed");
        tokenBalances[_tokenAddress][address(this)] = 0;
    }
}