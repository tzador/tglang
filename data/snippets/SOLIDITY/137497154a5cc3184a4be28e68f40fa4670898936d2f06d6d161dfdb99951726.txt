pragma solidity ^0.4.21; //specifies the Solidity compiler version

contract Voting { //creates a contract named "Voting"

  mapping (bytes32 => uint8) public votesReceived; //declares a public mapping named "votesReceived", which maps a bytes32 key to a uint8 value
  bytes32[] public candidateList; //declares a public dynamic array of bytes32 values named "candidateList"

  function candidateExists(bytes32 candidate) public constant returns (bool) { //declares a public function named "candidateExists" that takes in a bytes32 parameter named "candidate" and returns a bool
    for(uint i = 0; i < candidateList.length; i++) { //starts a for loop that iterates through the length of the candidateList array
      if (candidateList[i] == candidate) { //checks if the current element in the array is equal to the candidate parameter
        return true; //if it is, return true
      }
    }
    return false; //if not found, return false
  }

  function voteForCandidate(bytes32 candidate) public { //declares a public function named "voteForCandidate" that takes in a bytes32 parameter named "candidate"
    require(candidateExists(candidate)); //checks if the candidate exists in the candidateList array
    votesReceived[candidate] += 1; //increments the value for the given candidate key in the votesReceived mapping by 1
  }

  function addCandidate(bytes32 candidate) public { //declares a public function named "addCandidate" that takes in a bytes32 parameter named "candidate"
    candidateList.push(candidate); //appends the candidate parameter to the end of the candidateList array
  }

  function totalVotesFor(bytes32 candidate) public constant returns (uint8) { //declares a public function named "totalVotesFor" that takes in a bytes32 parameter named "candidate" and returns a uint8
    require(candidateExists(candidate)); //checks if the candidate exists in the candidateList array
    return votesReceived[candidate]; //returns the value for the given candidate key in the votesReceived mapping
  }
}