pragma solidity ^0.8.0;                            // Solidity version specification

contract MyContract {                              // Defining a contract named MyContract

    address public owner;                          // State variable for owner address
    uint public contractValue;                      // State variable for contract value

    constructor() {                                // Constructor function for the contract
        owner = msg.sender;                         // Assigning the address of the current account as owner
        contractValue = 100;                        // Assigning initial value to the contract
    }

    modifier onlyOwner {                            // Modifier to restrict access to certain functions
        require(msg.sender == owner);
        _;                                          // Placeholder for the code of the function using this modifier
    }

    function deposit(uint _amount) public payable{  // Function to deposit funds into the contract
        require(msg.value == _amount);              // Check if the amount deposited is equal to the specified amount
        contractValue += _amount;                   // Updating the contract value
    }

    function withdraw(uint _amount) public {        // Function to withdraw funds from the contract
        require(msg.sender == owner);               // Checking if the sender is the owner
        require(_amount <= contractValue);          // Checking if the amount to be withdrawn is less than or equal to the contract value
        msg.sender.transfer(_amount);               // Transfer the specified amount to the sender's address
        contractValue -= _amount;                   // Updating the contract value
    }

    function changeOwner(address _newOwner) public onlyOwner {    // Function to change ownership of the contract
        owner = _newOwner;                          // Assigning the new owner address
    }

    function getContractValue() public view returns (uint) {  // Function to retrieve the current contract value
        return contractValue;                       // Returning the contract value
    }
}