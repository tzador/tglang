pragma solidity ^0.4.24;

/// @title A smart contract with complex functionality using Solidity's Structs, Mappings, Modifiers, and Events.

contract ComplexContract {

    // Struct to store information about a person
    struct Person {
        string name;
        uint age;
    }

    // Mapping to store a list of people
    mapping (address => Person) public people;

    // Modifier to only allow the owner of the contract to make changes
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    // Event to emit whenever a new person is added
    event NewPersonAdded(address indexed _address, string _name, uint _age);

    // Owner of the contract
    address public owner;

    // Constructor to set the owner of the contract upon deployment
    constructor() public {
        owner = msg.sender;
    }

    // Function to add a new person to the contract
    function addPerson(string _name, uint _age) public onlyOwner {
        address personAddress = msg.sender;
        Person storage person = people[personAddress];
        person.name = _name;
        person.age = _age;
        emit NewPersonAdded(personAddress, _name, _age);
    }

    // Function to retrieve the name and age of a given person
    function getPerson(address _address) public view returns (string, uint) {
        return (people[_address].name, people[_address].age);
    }
}