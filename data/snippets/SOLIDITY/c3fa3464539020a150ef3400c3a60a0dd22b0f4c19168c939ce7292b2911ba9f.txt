contract A {
    uint public num;
    address public owner;

    constructor() public {
        // initialize the owner and set the number to 0
        owner = msg.sender;
        num = 0;
    }

    function setNumber(uint _num) public {
        // function can only be called by the owner
        require(msg.sender == owner);
        // set new number
        num = _num;
    }

    function doubleNumber() public view returns (uint) {
        // returns the double of the current number
        return num * 2;
    }
}

contract B is A {
    string public name;

    constructor(string memory _name) public {
        // initialize name and call constructor of base contract
        name = _name;
        new A();
    }

    function setName(string memory _name) public {
        // function can only be called by the owner
        require(msg.sender == owner);
        // set new name
        name = _name;
    }
}

contract C {
    A public a;
    B public b;

    constructor(uint _num, string memory _name) public {
        // initialize contracts
        a = new A();
        b = new B(_name);
        // set number for a
        a.setNumber(_num);
    }

    function getTotal() public view returns (uint) {
        // returns the sum of the current numbers in A and B
        return a.num + b.doubleNumber();
    }
}