// Importing necessary libraries
import "github.com/OpenZeppelin/contracts/token/ERC721/ERC721.sol";
import "github.com/OpenZeppelin/contracts/utils/Counters.sol";

// Defining contract
contract MyNFT is ERC721 {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIds;

    // Struct for storing NFT data
    struct NFTData {
        string name;
        string metadata;
    }

    // Mapping from token ID to NFT data
    mapping(uint256 => NFTData) private _nftData;

    // Event for creating an NFT
    event NFTCreated(address indexed owner, uint256 indexed tokenId, NFTData nftData);

    // Function for creating a new NFT
    function createNFT(string calldata name, string calldata metadata) external {
        // Checks if caller is the owner of the contract
        require(_msgSender() == owner(), "Must be owner to create NFT");

        // Generates a new token ID
        _tokenIds.increment();
        uint256 newTokenId = _tokenIds.current();

        // Sets NFT data
        NFTData memory nftData = NFTData({name: name, metadata: metadata});
        _nftData[newTokenId] = nftData;

        // Creates new NFT
        _safeMint(_msgSender(), newTokenId);

        // Emits event
        emit NFTCreated(_msgSender(), newTokenId, nftData);
    }

    // Function for getting NFT data
    function getNFTData(uint256 tokenId) external view returns (NFTData memory) {
        // Checks if token exists
        require(_exists(tokenId), "Token does not exist");

        // Returns NFT data
        return _nftData[tokenId];
    }
}