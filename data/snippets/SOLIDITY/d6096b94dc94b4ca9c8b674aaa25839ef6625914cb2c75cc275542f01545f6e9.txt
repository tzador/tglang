pragma solidity ^0.8.0; // This specifies the version of Solidity to use, indicated by the caret.
// It means that any version equal or greater than 0.8.0 and less than 0.9.0 can be used.
contract MyToken { // This declares a contract called "MyToken"
    string name;
    string symbol;
    uint256 totalSupply; // This specifies the total number of tokens in circulation
    mapping(address => uint256) balances; // This creates a mapping to track the balance of each address
    address payable owner; // This declares the owner of the contract as a payable address
    uint256 constant public decimals = 18; // This specifies the decimal places for the token, in this case 18
    
    event Transfer(address indexed _from, address indexed _to, uint256 _amount); // This creates an event to notify when tokens are transferred
    
    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) { // This is the constructor function that is executed when the contract is deployed
        name = _name;
        symbol = _symbol;
        totalSupply = _initialSupply * 10 ** decimals; // This converts the initial supply into the proper format by multiplying by 10^decimals
        balances[msg.sender] = totalSupply; // This assigns the total supply to the owner's address
        owner = payable(msg.sender); // This sets the owner's address as the contract creator's address
    }
    
    function transfer(address _to, uint256 _amount) public { // This is the function to transfer tokens from one address to another
        require(balances[msg.sender] >= _amount, "Insufficient balance."); // This checks if the sender has enough balance to transfer
        require(_to != address(0), "Invalid address."); // This checks for a valid recipient address
        balances[msg.sender] -= _amount; // This deducts the transferred amount from the sender
        balances[_to] += _amount; // This adds the transferred amount to the recipient
        emit Transfer(msg.sender, _to, _amount); // This emits the transfer event
    }
    
    function balanceOf(address _owner) public view returns (uint256) { // This function returns the balance of a given address
        return balances[_owner];
    }
    
    function mint(uint256 _amount) public { // This function allows the owner to mint more tokens
        require(msg.sender == owner, "Only the owner can mint tokens."); // This ensures that only the owner can mint tokens
        totalSupply += _amount * 10 ** decimals; // This increases the total supply by the specified amount
        balances[owner] += _amount * 10 ** decimals; // This assigns the minted tokens to the owner's address
        emit Transfer(address(0), owner, _amount); // This emits the transfer event to track the minted tokens
    }
    
    function burn(uint256 _amount) public { // This function allows the owner to burn tokens
        require(msg.sender == owner, "Only the owner can burn tokens."); // This ensures that only the owner can burn tokens
        require(balances[owner] >= _amount, "Insufficient balance."); // This checks if the owner has enough balance to burn
        totalSupply -= _amount * 10 ** decimals; // This decreases the total supply by the specified amount
        balances[owner] -= _amount * 10 ** decimals; // This subtracts the burned tokens from the owner's address
        emit Transfer(owner, address(0), _amount); // This emits the transfer event to track the burned tokens
    }
    
    function transferOwnership(address payable _newOwner) public { // This function allows the current owner to transfer ownership to another address
        require(msg.sender == owner, "Only the current owner can transfer ownership."); // This ensures that only the current owner can transfer ownership
        owner = _newOwner; // This assigns the new owner's address
    }
}