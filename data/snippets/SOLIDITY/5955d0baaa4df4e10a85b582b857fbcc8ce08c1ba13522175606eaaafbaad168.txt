// Example contract showcasing the use of inheritance and modifiers

pragma solidity ^0.8.0;

// Base contract defining a basic owner functionality
contract Owned {
    address payable owner;

    constructor() {
        owner = payable(msg.sender);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }
}

// Derived contract inheriting from base contract and using modifiers
contract MyContract is Owned {
    mapping(address => bool) public whitelist;

    constructor() {
        whitelist[owner] = true;
    }

    function addToWhitelist(address _address) public onlyOwner {
        whitelist[_address] = true;
    }

    function doSomething() public {
        // Requires that the sender is on the whitelist
        require(whitelist[msg.sender], "Sender is not on the whitelist");

        // Do something here
    }
}