contract MyToken {

    // Sets the total supply of tokens to 1 million
    uint256 totalSupply = 1000000;

    // Maps addresses to their balances
    mapping(address => uint256) balances;

    // Maps addresses to a mapping of approved spender addresses and their allowed amounts
    mapping(address => mapping(address => uint256)) allowed;

    // Initializes the contract by assigning all tokens to the contract creator
    constructor() public {
        balances[msg.sender] = totalSupply;
    }

    // Returns the total supply of tokens
    function getTotalSupply() public view returns(uint256) {
        return totalSupply;
    }

    // Returns the balance of the given address
    function getBalance(address _owner) public view returns(uint256) {
        return balances[_owner];
    }

    // Transfers tokens from the sender's balance to the recipient's balance
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_value <= balances[msg.sender], "Insufficient balance.");

        // Subtract tokens from sender's balance
        balances[msg.sender] -= _value;

        // Add tokens to recipient's balance
        balances[_to] += _value;

        // Emit Transfer event
        emit Transfer(msg.sender, _to, _value);

        // Return true upon successful transfer
        return true;
    }

    // Allows a spender to transfer tokens from the owner's balance, up to the allowed amount
    function approve(address _spender, uint256 _value) public returns (bool) {
        // Update the allowed mapping, allowing _spender to spend up to _value
        allowed[msg.sender][_spender] = _value;

        // Emit Approval event
        emit Approval(msg.sender, _spender, _value);

        // Return true upon successful approval
        return true;
    }

    // Returns the allowed amount for a given spender on a given owner's account
    function getAllowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }

    // Transfers tokens from the owner's balance to the recipient's balance, as long as it's within the allowed amount set by the owner
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        // Sender must have sufficient balance
        require(_value <= balances[_from], "Insufficient balance.");

        // Sender must have allowed the spender to transfer at least the given value
        require(_value <= allowed[_from][msg.sender], "Insufficient allowance.");

        // Subtract tokens from sender's balance
        balances[_from] -= _value;

        // Add tokens to recipient's balance
        balances[_to] += _value;

        // Update the allowed amount for the spender
        allowed[_from][msg.sender] -= _value;

        // Emit Transfer event
        emit Transfer(_from, _to, _value);

        // Return true upon successful transfer
        return true;
    }

    // Events used to track token transfers and approvals
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

}