// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Importing OpenZeppelin contracts to use for our own contract
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

// Defining our contract extending ERC20 and Ownable contracts
contract MyToken is ERC20, Ownable {

    // Declaring state variables
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _totalSupply;
    uint256 private _maxSupply;
    uint256 private _blockedSupply;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    // Initializing values in constructor
    constructor(
        string memory name_,
        string memory symbol_,
        uint8 decimals_,
        uint256 totalSupply_,
        uint256 maxSupply_,
        uint256 blockedSupply_
    ) ERC20(name_, symbol_){
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
        _totalSupply = totalSupply_;
        _maxSupply = maxSupply_;
        _blockedSupply = blockedSupply_;
        _balances[msg.sender] = totalSupply_;
    }

    // Function to check if token is transferable
    function isTransferable() internal view returns(bool) {
        // Your logic for checking transferability
        return true;
    }

    // Overriding transfer function to include transferability check
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        require(isTransferable(), "Token is not transferable");
        super.transfer(recipient, amount);
        return true;
    }

    // Overriding transferFrom function to include transferability check
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        require(isTransferable(), "Token is not transferable");
        super.transferFrom(sender, recipient, amount);
        return true;
    }

    // Function to increase allowed amount for a spender
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    // Function to decrease allowed amount for a spender
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }

    // Function to mint new tokens
    function mint(address to, uint256 amount) public onlyOwner {
        require(_totalSupply + amount <= _maxSupply, "Max supply reached");
        _mint(to, amount);
    }

    // Function to burn tokens
    function burn(uint256 amount) public virtual {
        require(_balances[msg.sender] >= amount, "Insufficient balance");
        _burn(msg.sender, amount);
    }

    // Function to block tokens for a specific user
    function blockTokens(address user, uint256 amount) public onlyOwner {
        require(_balances[user] >= amount, "Insufficient balance");
        require(_blockedSupply + amount <= _totalSupply, "Blocked supply exceeds total supply");
        _blockedSupply += amount;
        _balances[user] -= amount;
    }

    // Function to unblock tokens for a specific user
    function unblockTokens(address user, uint256 amount) public onlyOwner {
        require(_blockedSupply >= amount, "Insufficient blocked supply");
        require(_balances[user] + amount <= _maxSupply, "Unblocked supply exceeds max supply");
        _blockedSupply -= amount;
        _balances[user] += amount;
    }

    // Modifying balanceOf function to exclude blocked tokens from balance
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account] - _blockedSupply;
    }

    // Function to get remaining supply that can still be minted
    function getRemainingSupply() public view returns(uint256) {
        return _maxSupply - _totalSupply;
    }

    // Function to get total supply
    function getTotalSupply() public view returns(uint256) {
        return _totalSupply;
    }

    // Function to get blocked supply
    function getBlockedSupply() public view returns(uint256) {
        return _blockedSupply;
    }

    // Function to get decimals
    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }

    // Overriding _beforeTokenTransfer function to include transferability check
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);
        require(isTransferable(), "Token is not transferable");
    }

    // Function to change name of token
    function changeName(string memory newName) public onlyOwner {
        _name = newName;
    }

    // Function to change symbol of token
    function changeSymbol(string memory newSymbol) public onlyOwner {
        _symbol = newSymbol;
    }

    // Fallback function to revert any transactions that don't match a function signature
    fallback () external payable {
        revert();
    }

}