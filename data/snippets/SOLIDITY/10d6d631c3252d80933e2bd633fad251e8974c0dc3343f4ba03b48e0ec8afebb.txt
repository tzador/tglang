pragma solidity ^0.8.0; //specifies the version of Solidity being used

contract MyContract { //defines a contract called MyContract

    //variables
    uint256 public myUint; //declares a public unsigned integer variable called myUint
    address public myAddress; //declares a public address variable called myAddress
    bool public myBool; //declares a public boolean variable called myBool
    uint128 private mySmallUint; //declares a private unsigned integer variable called mySmallUint

    //mapping
    mapping(address => uint256) public myMapping; //declares a public mapping named myMapping that maps an address to a uint256 value

    //constructor
    constructor() {
        myUint = 100; //initializes the value of myUint to 100
        myAddress = msg.sender; //initializes the value of myAddress to the address of the sender
        myBool = false; //initializes the value of myBool to false
        mySmallUint = 5; //initializes the value of mySmallUint to 5
    }

    //functions
    function setUint(uint256 _newUint) public { //defines a public function called setUint that takes in a uint256 parameter
        myUint = _newUint; //updates the value of myUint to the new uint256 value passed in
    }

    function setAddress(address _newAddress) public { //defines a public function called setAddress that takes in an address parameter
        myAddress = _newAddress; //updates the value of myAddress to the new address value passed in
    }

    function setBool(bool _newBool) public { //defines a public function called setBool that takes in a boolean parameter
        myBool = _newBool; //updates the value of myBool to the new boolean value passed in
    }

    function getSmallUint() public view returns (uint128) { //defines a public view function called getSmallUint that returns a uint128 value
        return mySmallUint; //returns the value of mySmallUint
    }
}