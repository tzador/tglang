pragma solidity ^0.8.2; // set compiler version

contract MyContract {
    
    address payable owner; // declares a variable to store an address which can receive and send ether
    
    uint public totalSupply; // creates a public uint variable named totalSupply which can be accessed by any other contract or externally
    
    mapping(address => uint) public balances; // creates a map of addresses to uints named balances, allows for easy lookup of an address's balance
    
    uint private constant balanceLimit = 1000; // creates a private uint constant named balanceLimit with a value of 1000
    
    event Transfer(address from, address to, uint value); // declares an event which can be emitted to notify other contracts or the user of a transfer
    
    constructor() { // constructor function to initialize the contract
        owner = payable(msg.sender); // sets the owner variable to the address of the contract deployer
        totalSupply = 10000; // initializes the totalSupply variable to a value of 10000
        balances[owner] = totalSupply; // sets the owner's balance to equal the total supply
    }
    
    function transfer(address _to, uint _value) public { // function to transfer funds from the sender's account to another account
        require(_value <= balances[msg.sender], "Insufficient balance"); // checks if the sender has enough funds to transfer
        require(balances[_to] + _value <= balanceLimit, "Balance limit reached"); // checks if the receiver's balance will exceed the balanceLimit after transfer
        balances[msg.sender] -= _value; // deducts the transferred amount from the sender's balance
        balances[_to] += _value; // adds the transferred amount to the receiver's balance
        emit Transfer(msg.sender, _to, _value); // emits the transfer event
    }
    
    function withdraw() public { // function to withdraw all funds from the contract
        require(msg.sender == owner, "Only owner can withdraw"); // checks if the caller is the owner of the contract
        uint amount = address(this).balance; // sets the amount variable to the current balance of the contract
        require(amount > 0, "Contract has no funds"); // checks if the contract has any funds to withdraw
        owner.transfer(amount); // transfers the funds to the owner's address
    }
}