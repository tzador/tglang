/*
 * @dev This contract implements a basic bank using Solidity.
 * The bank allows customers to deposit and withdraw funds, as well as
 * transfer funds to other customers.
 */

// import SafeMath library for secure integer operations
import "github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol";

contract Bank {
    using SafeMath for uint;

    // define a customer struct with balance and account number
    struct Customer {
        uint balance;      // the balance of the customer's account
        uint accountNum;   // the account number of the customer
    }

    // define a mapping of account numbers to customers
    mapping (uint => Customer) customers;

    // define a variable to keep track of the total funds in the bank
    uint totalFunds;

    // event for logging account balances
    event LogAccountBalance(uint accountNum, uint balance);

    // event for logging deposit and withdrawal amounts
    event LogTransaction(uint amount, uint accountNum, string msg);

    // event for logging successful transfers
    event LogTransfer(uint amount, uint fromAccount, uint toAccount);

    // function to deposit funds into an account
    function deposit(uint amount) public {
        // require the amount to be greater than 0
        require(amount > 0, "Amount must be greater than 0.");

        // update the balance of the customer's account
        customers[msg.sender].balance = customers[msg.sender].balance.add(amount);

        // update the total funds in the bank
        totalFunds = totalFunds.add(amount);

        // emit a log event with the account balance
        emit LogAccountBalance(customers[msg.sender].accountNum, customers[msg.sender].balance);

        // emit a log event for the deposit transaction
        emit LogTransaction(amount, customers[msg.sender].accountNum, "Deposit successful.");
    }

    // function to withdraw funds from an account
    function withdraw(uint amount) public {
        // require the amount to be greater than 0
        require(amount > 0, "Amount must be greater than 0.");

        // require the customer to have enough funds in their account
        require(customers[msg.sender].balance >= amount, "Insufficient funds.");

        // update the balance of the customer's account
        customers[msg.sender].balance = customers[msg.sender].balance.sub(amount);

        // update the total funds in the bank
        totalFunds = totalFunds.sub(amount);

        // emit a log event with the account balance
        emit LogAccountBalance(customers[msg.sender].accountNum, customers[msg.sender].balance);

        // emit a log event for the withdrawal transaction
        emit LogTransaction(amount, customers[msg.sender].accountNum, "Withdrawal successful.");
    }

    // function to transfer funds from one account to another
    function transfer(uint amount, address toAccount) public {
        // require the amount to be greater than 0
        require(amount > 0, "Amount must be greater than 0.");

        // require the customer to have enough funds in their account
        require(customers[msg.sender].balance >= amount, "Insufficient funds.");

        // require the recipient account to exist
        require(customers[toAccount].accountNum != 0, "Recipient account does not exist.");

        // update the balance of the sender's account
        customers[msg.sender].balance = customers[msg.sender].balance.sub(amount);

        // update the balance of the recipient's account
        customers[toAccount].balance = customers[toAccount].balance.add(amount);

        // emit a log event with the sender and recipient accounts
        emit LogTransfer(amount, customers[msg.sender].accountNum, customers[toAccount].accountNum);

        // emit a log event for the transfer transaction
        emit LogTransaction(amount, customers[msg.sender].accountNum, "Transfer successful.");
    }
}