contract MyContract {

//Variables
uint256 public length;
mapping (address => bool) public wallets;
string[] public names;

//Constructor
constructor(uint256 _length) public {
length = _length;
}

//Modifiers
modifier onlyWalletOwner(address _wallet) {
require(wallets[_wallet], "Only the owner of this wallet can use this function.");
_;
}

//Events
event PaymentMade(address _from, address _to, uint256 _amount);

//Functions
function addWallet(address _wallet) public {
wallets[_wallet] = true;
}

function addName(string memory _name) public {
names.push(_name);
}

function makePayment(address _to, uint256 _amount) public onlyWalletOwner(msg.sender) {
require(_amount <= address(this).balance, "Insufficient balance.");
_to.transfer(_amount);
emit PaymentMade(msg.sender, _to, _amount);
}

}