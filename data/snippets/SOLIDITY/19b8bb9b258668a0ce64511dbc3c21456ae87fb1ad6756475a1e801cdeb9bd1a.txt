pragma solidity ^0.8.0;

/**
* @dev Contract that allows users to buy a specific amount of tokens at a set price
*/
contract TokenSale {
    address owner; // variable to store the contract owner's address
    uint256 public tokenPrice; // variable to store the set price of the token
    uint256 public tokensSold; // variable to keep track of the number of tokens sold
    ERC20 public token; // variable to store the ERC20 token address

    /**
    * @dev Constructor function that sets the token price and token address
    * @param _tokenPrice price of each token in wei
    * @param _token address of the ERC20 token
    */
    constructor(uint256 _tokenPrice, address _token) {
        owner = msg.sender; // set the contract owner's address as the address of the sender
        tokenPrice = _tokenPrice; // set the token price
        token = ERC20(_token); // set the token address
    }

    /**
    * @dev Function to buy tokens
    * @param _numTokens number of tokens to purchase
    */
    function buyTokens(uint256 _numTokens) public payable {
        require(msg.value == _numTokens * tokenPrice); // check if the value sent is equal to the number of tokens times the token price
        require(_numTokens <= token.balanceOf(address(this))); // check if the contract has enough tokens to sell
        require(token.transfer(msg.sender, _numTokens)); // transfer the tokens to the buyer's address
        tokensSold += _numTokens; // update the number of tokens sold
    }

    /**
    * @dev Function to end the token sale
    */
    function endSale() public {
        require(msg.sender == owner); // check if the sender is the contract owner
        require(token.transfer(owner, token.balanceOf(address(this)))); // transfer remaining tokens back to the contract owner
        require(address(this).balance == 0); // check if the contract has no remaining ether
    }
}