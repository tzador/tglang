pragma solidity ^0.8.4;

// Contract to create a decentralized voting system
contract VotingSystem {

    // Owner of the contract
    address owner;

    // Array to store candidate addresses
    address[] candidates;

    // Mapping to store vote counts for each candidate address
    mapping(address => uint) voteCounts;

    // Event to emit when a new candidate is added
    event NewCandidate(address candidate);

    // Event to emit when a vote is casted
    event VoteCasted(address candidate, address voter);

    // Constructor function to set the owner to the address that deploys the contract
    constructor() {
        owner = msg.sender;
    }

    // Function to add a new candidate to the candidate array
    function addCandidate(address newCandidate) external {
        // Check if the caller is the owner of the contract
        require(msg.sender == owner, "Only owner can add candidates");

        // Check if the candidate is already added
        for(uint i = 0; i < candidates.length; i++){
            require(candidates[i] != newCandidate, "Candidate already exists");
        }

        // Add the new candidate to the array
        candidates.push(newCandidate);

        // Emit the NewCandidate event
        emit NewCandidate(newCandidate);
    }

    // Function to cast a vote to a candidate
    function castVote(address candidate) external {
        // Increment the vote count for the candidate
        voteCounts[candidate]++;

        // Emit the VoteCasted event
        emit VoteCasted(candidate, msg.sender);
    }

    // Function to get the vote count of a candidate
    function getVoteCount(address candidate) external view returns (uint) {
        return voteCounts[candidate];
    }
}