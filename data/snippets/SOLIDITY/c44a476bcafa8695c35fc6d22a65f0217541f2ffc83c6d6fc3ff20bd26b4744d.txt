// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// import required libraries and contracts
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

/**
 * @title CustomNFT
 * @dev This contract allows the creation and management of unique ERC721 tokens.
 */
contract CustomNFT is IERC721 {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    // create mapping of token ID to token owner address
    mapping(uint256 => address) private _tokenOwners;

    // event for when a new token is minted
    event TokenMinted(address indexed owner, uint256 indexed tokenId);

    /**
     * @dev Public function that mints a new token and assigns it to the specified address.
     * @param to The address that will own the newly minted token.
     * @return uint256 The ID of the newly minted token.
     */
    function mintToken(address to) public returns (uint256) {
        // increase token ID counter
        _tokenIds.increment();
        // generate a new token ID
        uint256 newTokenId = _tokenIds.current();
        // add new token to token owners mapping
        _tokenOwners[newTokenId] = to;
        // emit token minted event
        emit TokenMinted(to, newTokenId);
        // return newly minted token ID
        return newTokenId;
    }

    /**
     * @dev Public function that retrieves the owner of a specified token.
     * @param tokenId The ID of the token to retrieve the owner for.
     * @return address The address of the token owner.
     */
    function ownerOf(uint256 tokenId) public view returns (address) {
        // check if token ID exists
        require(_exists(tokenId), "Token does not exist");
        // return token owner address
        return _tokenOwners[tokenId];
    }

    /**
     * @dev Internal function to check if a specified token exists.
     * @param tokenId The ID of the token to check.
     */
    function _exists(uint256 tokenId) internal view returns (bool) {
        // check if token owner address is not 0
        return _tokenOwners[tokenId] != address(0);
    }
}