pragma solidity ^0.8.0; //Defines the version of Solidity to be used

contract MyContract { //Start of contract definition

    address public owner; //Declares a publicly accessible state variable of type address (data type for ethereum addresses)
    uint public myBalance; //Declares a publicly accessible state variable of type uint (unsigned integer)
    bool public isOwner; //Declares a publicly accessible state variable of type bool (boolean)

    constructor() { //Constructor function to initialize state variables upon contract creation
        owner = msg.sender; //Assigns the contract creator's address to the owner variable using the msg global variable
        myBalance = 0; //Initializes myBalance variable to 0
        isOwner = true; //Sets isOwner variable to true
    }

    function deposit() external payable { //Function to allow users to deposit Ether into the contract
        myBalance += msg.value; //Adds the deposited value (in wei) to the myBalance variable using the msg global variable
    }

    function withdraw(uint amount) external { //Function to allow the contract owner to withdraw funds
        require(msg.sender == owner, "Contract owner only"); //Throws an error if the caller is not the contract owner

        require(amount <= myBalance, "Insufficient balance"); //Throws an error if the specified amount is greater than the available balance

        payable(msg.sender).transfer(amount); //Sends the specified amount (in wei) to the caller's address
        myBalance -= amount; //Subtracts the withdrawn amount from the myBalance variable
    }

    function changeOwner(address newOwner) external { //Function to allow the contract owner to change ownership
        require(msg.sender == owner, "Contract owner only"); //Throws an error if the caller is not the contract owner

        owner = newOwner; //Changes the owner variable to the specified address
    }

    function toggleOwner() external { //Function to allow the contract owner to toggle the isOwner variable
        require(msg.sender == owner, "Contract owner only"); //Throws an error if the caller is not the contract owner

        isOwner = !isOwner; //Inverts the value of the isOwner variable (true becomes false and vice versa)
    }
}