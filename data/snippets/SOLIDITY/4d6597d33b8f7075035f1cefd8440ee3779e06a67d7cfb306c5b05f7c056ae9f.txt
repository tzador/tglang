// Contract to handle the creation and storage of users on the blockchain
contract UserManagement {
    // Struct to define the properties of a user
    struct User {
        string name; // user's name
        uint age; // user's age
        bool isVerified; // flag to indicate if user is verified
        address[] following; // list of addresses the user is following
        uint[] posts; // list of post IDs created by the user
    }

    // Mapping to store user addresses with their respective User struct
    mapping(address => User) public users;

    // Function to register a new user
    // Takes in name and age as arguments
    function registerUser(string memory _name, uint _age) public {
        // check if user already exists
        require(users[msg.sender].age == 0, "User already registered");

        // create a new User struct and store its address in the mapping
        User memory newUser = User(_name, _age, false, new address[](0), new uint[](0));
        users[msg.sender] = newUser;
    }

    // Function to verify a user
    function verifyUser() public {
        // check if user exists
        require(users[msg.sender].age != 0, "User not registered");
        // check if user is already verified
        require(!users[msg.sender].isVerified, "User already verified");

        // update isVerified flag to true
        users[msg.sender].isVerified = true;
    }

    // Function to follow a user
    // Takes in an address as argument for the user to be followed
    function followUser(address _userAddress) public {
        // check if user exists
        require(users[_userAddress].age != 0, "User not registered");

        // add the address of the user being followed to the following list of the current user
        users[msg.sender].following.push(_userAddress);
    }

    // Function to create a post
    // Takes in post ID as argument
    function createPost(uint _postId) public {
        // check if user exists
        require(users[msg.sender].age != 0, "User not registered");
        // check if user is verified
        require(users[msg.sender].isVerified, "User not verified");
        // check if post ID already exists
        require(!postExists(_postId), "Post already created by user");

        // add post ID to the list of posts created by the current user
        users[msg.sender].posts.push(_postId);
    }

    // Internal function to check if a post already exists
    function postExists(uint _postId) internal view returns (bool) {
        for (uint i = 0; i < users[msg.sender].posts.length; i++) {
            if (users[msg.sender].posts[i] == _postId) {
                return true;
            }
        }
        return false;
    }
}