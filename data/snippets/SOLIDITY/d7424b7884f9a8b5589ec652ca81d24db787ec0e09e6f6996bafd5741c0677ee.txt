pragma solidity ^0.8.0;

//Importing OpenZeppelin libraries for SafeMath and ERC20 token standards
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

/**
 * @title MyToken
 * @dev A contract that is compliant with ERC20 token standard and implements SafeMath
 */
contract MyToken is ERC20 {
    using SafeMath for uint256;

    //Global variables
    address public owner; //Address of the owner of the contract
    string public constant name = "MyToken"; //Name of the token
    string public constant symbol = "MTK"; //Symbol of the token
    uint8 public constant decimals = 18; //Number of decimals for token amount
    uint256 public totalSupply; //Total supply of the tokens

    //Mapping to keep track of token balances of each address
    mapping(address => uint256) public balanceOf;

    //Events to trigger when transfer, approval and minting occurs
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Mint(address indexed to, uint256 amount);

    /**
     * @dev Constructor for the token contract
     * @param _initialSupply Initial supply of tokens to be minted
     */
    constructor(uint256 _initialSupply) {
        //Set the initial supply of tokens and mint them to the contract creator
        totalSupply = _initialSupply;
        balanceOf[msg.sender] = _initialSupply;
        owner = msg.sender;
    }

    /**
     * @dev Function to transfer tokens from the sender to a specified address
     * @param _to Address to transfer tokens to
     * @param _value Amount of tokens to be transferred
     * @return True if transfer is successful, false otherwise
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0), "Cannot transfer to address zero"); //Check for valid address
        require(_value <= balanceOf[msg.sender], "Insufficient balance"); //Check if sender has enough balance

        //Update token balances for sender and receiver
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);

        //Trigger transfer event
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
     * @dev Function to approve a specified address to spend a certain amount of tokens from sender's account
     * @param _spender Address to approve
     * @param _value Amount of tokens to approve
     * @return True if approval is successful, false otherwise
     */
    function approve(address _spender, uint256 _value) public returns (bool) {
        //Update allowance mapping for sender and spender
        allowance[msg.sender][_spender] = _value;

        //Trigger approval event
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @dev Function to transfer tokens from a specified address to another address on behalf of the owner
     * @param _from Address to transfer tokens from
     * @param _to Address to transfer tokens to
     * @param _value Amount of tokens to be transferred
     * @return True if transferFrom is successful, false otherwise
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_from != address(0), "Cannot transfer from address zero"); //Check for valid address
        require(_to != address(0), "Cannot transfer to address zero"); //Check for valid address
        require(_value <= balanceOf[_from], "Insufficient balance"); //Check if sender has enough balance
        require(_value <= allowance[_from][msg.sender], "Insufficient allowance"); //Check if sender has enough allowance

        //Update token balances for sender, receiver and allowance mapping
        balanceOf[_from] = balanceOf[_from].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);
        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);

        //Trigger transfer event
        emit Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @dev Function to mint new tokens and add them to the total supply
     * @param _to Address to mint tokens to
     * @param _amount Amount of tokens to be minted
     * @return True if mint is successful, false otherwise
     */
    function mint(address _to, uint256 _amount) public returns (bool) {
        require(msg.sender == owner, "Only owner can mint tokens"); //Only the owner can mint new tokens

        //Update token balances for receiver and total supply
        balanceOf[_to] = balanceOf[_to].add(_amount);
        totalSupply = totalSupply.add(_amount);

        //Trigger mint event
        emit Mint(_to, _amount);
        return true;
    }

    /**
     * @dev Function to burn a specified amount of tokens from the sender's account
     * @param _value Amount of tokens to be burned
     * @return True if burn is successful, false otherwise
     */
    function burn(uint256 _value) public returns (bool) {
        require(_value > 0, "Token amount must be greater than zero"); //Token amount to be burned must be greater than zero
        require(_value <= balanceOf[msg.sender], "Insufficient balance"); //Check if sender has enough balance

        //Update token balances for sender and total supply
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
        totalSupply = totalSupply.sub(_value);

        //Trigger transfer event
        emit Transfer(msg.sender, address(0), _value);
        return true;
    }
}