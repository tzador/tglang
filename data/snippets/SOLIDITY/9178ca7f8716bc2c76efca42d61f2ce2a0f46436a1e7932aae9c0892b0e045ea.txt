// Contract that manages a voting system using blockchain
contract Voting {

    // store the address of the chairperson or owner of the contract
    address chairperson;

    // store the total number of votes that have been cast
    uint totalVotes;

    // store the winning candidate
    string winningCandidate;

    // store the number of votes for each candidate
    mapping(string => uint) voteCounts;

    // constructor function that executes when the contract is deployed
    constructor() public {
        chairperson = msg.sender; // assigns the contract deployer's address as the chairperson
        totalVotes = 0; // initializes totalVotes to 0
        winningCandidate = ""; // initializes winningCandidate to an empty string
    }

    // function to allow the chairperson to add a new candidate for voting
    function addCandidate(string memory candidate) public {
        require(msg.sender == chairperson, "Only the chairperson can add candidates.");
        voteCounts[candidate] = 0; // initializes the vote count for the new candidate to 0
    }

    // function to allow voters to cast their vote
    function vote(string memory candidate) public {
        require(voteCounts[candidate] != 0, "This candidate is not on the ballot.");
        voteCounts[candidate] += 1; // increments the vote count for the selected candidate
        totalVotes += 1; // increments the total vote count
    }

    // function to determine the winning candidate
    function determineWinner() public {
        require(msg.sender == chairperson, "Only the chairperson can determine the winner.");
        uint maxVotes = 0;
        // iterate through the voteCounts mapping to find the candidate with the most votes
        for (uint i = 0; i < totalVotes; i++) {
            if (voteCounts[candidate] > maxVotes) {
                maxVotes = voteCounts[candidate];
                winningCandidate = candidate;
            }
        }
    }

    // function to retrieve the winning candidate
    function getWinner() public view returns (string memory) {
        return winningCandidate;
    }
}