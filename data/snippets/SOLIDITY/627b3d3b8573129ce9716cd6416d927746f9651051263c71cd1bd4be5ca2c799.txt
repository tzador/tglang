// The code snippet below shows a smart contract that implements a basic ERC20 token with added functionality for staking and unstaking tokens
// First, we define the contract
contract ERC20Token {
    // Variables to track total supply and token balances for each address
    uint public totalSupply;
    mapping(address => uint) public balanceOf;
    
    // Events for transfers and staking/unstaking
    event Transfer(address indexed from, address indexed to, uint value);
    event Staked(address indexed staker, uint amount);
    event Unstaked(address indexed staker, uint amount);
    
    // Modifier to ensure a function is only accessible by the contract owner
    modifier onlyOwner {
        require(msg.sender == owner, "Function can only be called by the contract owner");
        _;
    }
    
    // Constructor function to set initial total supply and assign to contract owner
    constructor(uint _totalSupply) {
        totalSupply = _totalSupply;
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }
    
    // Function to transfer tokens from one address to another
    function transfer(address to, uint value) public returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance to make transfer");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    // Functions to stake and unstake tokens
    function stake(uint amount) external {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance to stake");
        balanceOf[msg.sender] -= amount;
        stakedTokens[msg.sender] += amount;
        
        emit Staked(msg.sender, amount);
    }
    
    function unstake(uint amount) external {
        require(stakedTokens[msg.sender] >= amount, "Insufficient staked balance");
        stakedTokens[msg.sender] -= amount;
        balanceOf[msg.sender] += amount;
        
        emit Unstaked(msg.sender, amount);
    }
    
    // Function to mint new tokens - only accessible by the contract owner
    function mint(uint amount) external onlyOwner {
        totalSupply += amount;
        balanceOf[owner] += amount;
    }
    
    // Function to burn tokens - only accessible by the contract owner
    function burn(uint amount) external onlyOwner {
        require(balanceOf[owner] >= amount, "Insufficient balance to burn");
        totalSupply -= amount;
        balanceOf[owner] -= amount;
    }
}