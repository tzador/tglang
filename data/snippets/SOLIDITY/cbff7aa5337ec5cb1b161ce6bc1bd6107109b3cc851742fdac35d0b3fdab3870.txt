pragma solidity ^0.8.0;
​
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
​
contract ExampleContract {
​
    using SafeERC20 for IERC20;
​
    mapping(address => uint256) public balances;
    address public owner;
    IERC20 public token;
​
    constructor(address _token) {
        token = IERC20(_token);
        owner = msg.sender;
    }
​
    function deposit(uint256 _amount) external {
        require(_amount > 0, "amount cannot be zero");
        token.safeTransferFrom(msg.sender, address(this), _amount);
        balances[msg.sender] += _amount;
    }
​
    function withdraw(uint256 _amount) external {
        require(msg.sender == owner, "only owner can withdraw");
        require(_amount <= token.balanceOf(address(this)), "insufficient balance");
        token.safeTransfer(msg.sender, _amount);
        balances[msg.sender] -= _amount;
    }
​
    function transfer(address _recipient, uint256 _amount) external {
        require(_recipient != address(0), "invalid recipient");
        require(_amount > 0, "amount cannot be zero");
        require(_amount <= balances[msg.sender], "insufficient balance");
        balances[msg.sender] -= _amount;
        balances[_recipient] += _amount;
    }
}