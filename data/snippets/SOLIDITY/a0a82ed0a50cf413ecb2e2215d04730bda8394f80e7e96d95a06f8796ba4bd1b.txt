pragma solidity ^0.8.0;

// Object containing properties and methods for a car
// This contract is an example of the Single Responsibility Principle
contract Car {
    // State variables
    uint256 public price;
    string public color;
    string public model;
    address public owner;
    mapping (string => bool) public parts;

    // Events
    event NewOwner(address indexed previousOwner, address indexed newOwner);

    // Constructor function
    // Sets the initial values for the state variables
    constructor(uint256 _price, string memory _color, string memory _model) {
        price = _price;
        color = _color;
        model = _model;
        owner = msg.sender;
    }

    // Check if a part is installed in the car
    function checkPart(string memory _part) public view returns (bool) {
        return parts[_part];
    }

    // Allow the current owner to change the color of the car
    function changeColor(string memory _newColor) public onlyOwner {
        color = _newColor;
    }

    // Allow the current owner to sell the car to a new owner
    function sellCar(address payable _newOwner) public onlyOwner {
        // Before transferring ownership, check if the new owner is not the same as the current one
        require(_newOwner != owner, "New owner is already the current owner");

        // Transfer ownership
        address previousOwner = owner;
        owner = _newOwner;

        // Emit event
        emit NewOwner(previousOwner, _newOwner);
    }

    // Modifier that restricts certain functions to only be called by the current owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }
}