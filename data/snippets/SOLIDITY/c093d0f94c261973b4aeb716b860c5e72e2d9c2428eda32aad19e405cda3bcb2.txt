pragma solidity ^0.8.0; // defining the Solidity version

contract Voting { // defining the contract name

    struct Candidate { // creating a struct for candidates
        uint id; // unique identifier for candidates
        string name; // name of the candidate
        uint voteCount; // number of votes received
    }

    address public owner; // variable to store the contract owner's address

    mapping (address => bool) public voters; // mapping to keep track of voters
    mapping (uint => Candidate) public candidates; // mapping to store candidates

    uint public candidatesCount; // variable to keep track of total candidates
    uint public constant MAX_CANDIDATES = 10; // constant to set maximum number of candidates

    event votedEvent ( // defining an event to be triggered when a vote is casted
        address indexed _voter,
        uint indexed _candidateId
    );

    modifier onlyOwner() { // modifier to restrict certain functions to the contract owner
        require(msg.sender == owner, "You do not have owner permissions.");
        _;
    }

    constructor() { // constructor function to set owner as the contract deployer
        owner = msg.sender;
    }

    function addCandidate (string memory _name) public onlyOwner { // function to add a candidate
        require(candidatesCount < MAX_CANDIDATES, "Maximum number of candidates reached.");
        candidatesCount++;
        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);
    }

    function vote (uint _candidateId) public { // function to cast a vote for a candidate
        require(!voters[msg.sender], "You have already voted.");
        require(_candidateId > 0 && _candidateId <= candidatesCount, "Invalid candidate ID.");
        voters[msg.sender] = true;
        candidates[_candidateId].voteCount++;
        emit votedEvent(msg.sender, _candidateId);
    }
}