pragma solidity ^0.8.0;

contract HelloWorld {
    
    mapping(address => uint) balances;
    address public owner;
    string public name;
    uint public totalSupply;
    
    event Transfer(address indexed from, address indexed to, uint value);

    constructor() {
        owner = msg.sender;
        name = "Hello World Token";
        totalSupply = 100000;
        balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address account) public view returns (uint) {
        return balances[account];
    }
    
    function transfer(address recipient, uint amount) public returns (bool) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        
        emit Transfer(msg.sender, recipient, amount);
        
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
        require(balances[sender] >= amount, "Insufficient balance");
        
        if (msg.sender != owner) {
            require(allowances[sender][msg.sender] >= amount, "Insufficient allowance");
            allowances[sender][msg.sender] -= amount;
        }
        
        balances[sender] -= amount;
        balances[recipient] += amount;
        
        emit Transfer(sender, recipient, amount);
        
        return true;
    }
    
    function approve(address spender, uint amount) public returns (bool) {
        allowances[msg.sender][spender] = amount;
        
        return true;
    }
    
    function allowance(address owner, address spender) public view returns (uint) {
        return allowances[owner][spender];
    }
    
    mapping(address => mapping(address => uint)) allowances;
}