/**
 * @title ExampleContract
 * @dev This contract implements a stake fund with interest withdrawal
 */

contract ExampleContract {
    // state variables
    address public owner;
    mapping (address => uint) public balances;
    uint public totalBalance;
    uint public constant INTEREST_RATE = 5; // 5% interest rate

    // constructor
    constructor() public {
        owner = msg.sender;
    }

    // events
    event Deposited(address indexed sender, uint amount);
    event Withdrawn(address indexed sender, uint amount);

    // modifiers
    modifier onlyOwner() {
        require(msg.sender == owner); // only the contract owner can execute this function
        _; // continue with function execution
    }

    // functions
    function deposit() public payable {
        require(msg.value > 0); // require value greater than 0
        totalBalance += msg.value; // update total balance
        balances[msg.sender] += msg.value; // update sender balance
        emit Deposited(msg.sender, msg.value); // emit event
    }

    function withdraw(uint amount) public {
        require(amount > 0 && amount <= balances[msg.sender]); // require amount greater than 0 and less than or equal to sender balance
        uint interest = calculateInterest(amount); // calculate interest
        msg.sender.transfer(amount + interest); // transfer amount plus interest to sender
        totalBalance -= amount; // update total balance
        balances[msg.sender] -= amount; // update sender balance
        emit Withdrawn(msg.sender, amount); // emit event
    }

    function calculateInterest(uint amount) internal pure returns (uint) {
        return (amount * INTEREST_RATE) / 100; // calculate interest amount
    }

    function updateInterestRate(uint newRate) public onlyOwner {
        require(newRate > 0); // require new rate greater than 0
        INTEREST_RATE = newRate; // update interest rate
    }
}