pragma solidity ^0.8.0; // specify compiler version

contract MyContract { // contract declaration

    string public name; // declare public string variable

    constructor (string memory _name) { // constructor function

        name = _name; // assign _name value to name variable

    }

    function changeName(string memory newName) public { // function to change name variable

        require(msg.sender == owner); // checks if sender is contract owner
        name = newName; // sets newName as new value for name variable
        
    }

    function getValueFromIndex (uint256 index) public pure returns (uint256) { // function to get value from a specific array index

        uint[] myArray = [1, 2, 3, 4, 5]; // declare array variable with initial values
        require(index < myArray.length); // checks if index is less than array length

        return myArray[index]; // returns value at specified index

    }

    function withdraw(address payable recipient, uint amount) external { // function to withdraw funds from contract

        require(msg.sender == owner); // checks if sender is contract owner
        recipient.transfer(amount); // transfers specified amount to recipient address

    }

}