// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0; // Compiler version

// Importing OpenZeppelin library containing SafeMath functions
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

// Creating contract named ExampleContract
contract ExampleContract {
    using SafeMath for uint256; // Using SafeMath library for all uint256 types in this contract

    // Declaring a state variable
    uint256 public totalNumberOfTokens;

    // Declaring a mapping to store balances of different addresses
    mapping(address => uint256) public balances;

    // Defining an event for logging token transfers
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Function to mint new tokens and update total number of tokens
    function mintTokens(uint256 _amountToMint) public {
        totalNumberOfTokens = totalNumberOfTokens.add(_amountToMint); // Using SafeMath function to avoid integer overflow
        balances[msg.sender] = balances[msg.sender].add(_amountToMint); // Updating balance of the sender
    }

    // Function to transfer tokens from one address to another
    function transferTokens(address _to, uint256 _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance"); // Checking if sender has sufficient balance
        balances[msg.sender] = balances[msg.sender].sub(_amount); // Updating sender's balance by subtracting transferred amount
        balances[_to] = balances[_to].add(_amount); // Updating recipient's balance by adding transferred amount
        emit Transfer(msg.sender, _to, _amount); // Emitting Transfer event
    }
}