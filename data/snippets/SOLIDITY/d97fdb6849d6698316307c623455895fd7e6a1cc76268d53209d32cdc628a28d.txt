pragma solidity ^0.8.0; // specifies the version of Solidity we will use

// Contract MyToken
contract MyToken {
  // declare state variables
  string private _name;
  string private _symbol;
  uint256 private _totalSupply;

  // mapping from address to balances
  mapping(address => uint256) private _balances;

  // constructor function
  constructor(string memory name_, string memory symbol_, uint256 initialSupply) {
    _name = name_;
    _symbol = symbol_;
    _totalSupply = initialSupply;
    _balances[msg.sender] = initialSupply; // assigns initial supply to contract creator
  }

  // public functions
  function name() public view returns (string memory) {
    return _name;
  }

  function symbol() public view returns (string memory) {
    return _symbol;
  }

  function totalSupply() public view returns (uint256) {
    return _totalSupply;
  }

  function balanceOf(address account) public view returns (uint256) {
    return _balances[account];
  }

  function transfer(address recipient, uint256 amount) public returns (bool) {
    require(amount <= _balances[msg.sender], "Not enough balance."); // require that sender has enough balance
    _balances[msg.sender] -= amount; // subtract amount from sender's balance
    _balances[recipient] += amount; // add amount to recipient's balance
    return true;
  }

  // private functions
  function _burn(address account, uint256 amount) private {
    require(account != address(0), "Cannot burn tokens from zero address.");
    require(amount <= _balances[account], "Not enough balance to burn.");
    _totalSupply -= amount; // subtract amount from total supply
    _balances[account] -= amount; // subtract amount from account balance
  }

  function _mint(address account, uint256 amount) private {
    require(account != address(0), "Cannot mint tokens to zero address.");
    _totalSupply += amount; // add amount to total supply
    _balances[account] += amount; // add amount to account balance
  }

  // fallback function
  fallback() external payable {
    revert("This contract does not accept payments.");
  }
}