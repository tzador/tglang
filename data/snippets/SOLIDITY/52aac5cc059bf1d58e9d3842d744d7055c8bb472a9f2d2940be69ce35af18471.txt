contract Bank {
    address owner;

    mapping (address => uint) balances;
    mapping (address => mapping (address => uint)) allowed;

    constructor() public {
        owner = msg.sender;
    }

    function deposit() public payable returns (bool) {
        require(msg.value > 0);
        balances[msg.sender] += msg.value;
        return true;
    }

    function withdraw(uint amount) public returns (bool) {
        // Checking if the sender has sufficient balance
        require(balances[msg.sender] > amount);

        // Updating the balances
        balances[msg.sender] -= amount;
        msg.sender.transfer(amount);

        // Returning true
        return true;
    }

    function transfer(address recipient, uint amount) public returns (bool) {
        // Checking if the sender has sufficient balance
        require(balances[msg.sender] > amount);

        // Updating the balances
        balances[msg.sender] -= amount;
        balances[recipient] += amount;

        // Returning true
        return true;
    }

    function approve(address spender, uint amount) public returns (bool) {
        // Setting the allowance for the spender
        allowed[msg.sender][spender] = amount;

        // Emitting the Approval event
        emit Approval(msg.sender, spender, amount);

        // Returning true
        return true;
    }

    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
        // Checking if the sender has sufficient allowance
        require(allowed[sender][msg.sender] > amount);

        // Updating the balances
        balances[sender] -= amount;
        balances[recipient] += amount;

        // Updating the allowance
        allowed[sender][msg.sender] -= amount;

        // Emitting the Transfer event
        emit Transfer(sender, recipient, amount);

        // Returning true
        return true;
    }

    // Events
    event Approval(address indexed _owner, address indexed _spender, uint _amount);

    event Transfer(address indexed _from, address indexed _to, uint _amount);

}