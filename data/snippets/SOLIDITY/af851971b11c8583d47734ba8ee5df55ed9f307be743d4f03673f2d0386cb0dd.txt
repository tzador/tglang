contract ERC20Token {

   // Private variables
   uint256 private _totalSupply;
   mapping(address => uint256) private _balances;
   mapping(address => mapping(address => uint256)) private _allowances;

    // Public variables
   string public name;
   string public symbol;
   uint8 public decimals;
   
   // Constructor
   constructor(
      uint256 initialSupply,
      string memory tokenName,
      string memory tokenSymbol,
      uint8 decimalUnits
   ) {
      _totalSupply = initialSupply * 10**uint256(decimalUnits);
      _balances[msg.sender] = _totalSupply;
      name = tokenName;
      symbol = tokenSymbol;
      decimals = decimalUnits;
   }

   // Returns the total token supply
   function totalSupply() public view returns (uint256) {
      return _totalSupply;
   }

   // Returns the account balance of another account with address _owner
   function balanceOf(address _owner) public view returns (uint256) {
      return _balances[_owner];
   }

   // Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.
   function transfer(address _to, uint256 _value) public returns (bool) {
      require(_to != address(0)); // Prevent transfer to 0x0 address.
      require(_balances[msg.sender] >= _value); // Check if the sender has enough
      require(_balances[_to] + _value > _balances[_to]); // Check for overflows
      
      _balances[msg.sender] -= _value; // Subtract from the sender
      _balances[_to] += _value; // Add the same to the recipient
      
      emit Transfer(msg.sender, _to, _value);
      return true;
   }

   // Token owner can approve for spender to transferFrom(...) tokens from the token owner's account
   function approve(address _spender, uint256 _value) public returns (bool) {
      require(_spender != address(0)); // Prevent approval to 0x0 address.

      _allowances[msg.sender][_spender] = _value;
      
      emit Approval(msg.sender, _spender, _value);
      return true;
   }

   // Returns the amount which _spender is still allowed to withdraw from _owner
   function allowance(address _owner, address _spender) public view returns (uint256) {
      return _allowances[_owner][_spender];
   }

   // Transfers _value tokens from address _from to address _to
   function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
      require(_to != address(0)); // Prevent transfer to 0x0 address.
      require(_balances[_from] >= _value); // Check if the sender has enough
      require(_balances[_to] + _value > _balances[_to]); // Check for overflows
      require(_value <= _allowances[_from][msg.sender]); // Check allowance
      
      _balances[_from] -= _value; // Subtract from the sender
      _balances[_to] += _value; // Add the same to the recipient
      
      _allowances[_from][msg.sender] -= _value; // Reduce allowance
      
      emit Transfer(_from, _to, _value);
      return true;
   }
   
   // Event that notifies when tokens are transferred
   event Transfer(address indexed from, address indexed to, uint256 value);
   
   // Event that notifies when approval is given for transfer of tokens
   event Approval(address indexed owner, address indexed spender, uint256 value);
}