//Create a contract called Auction
contract Auction {

    //Declare variables
    address public highestBidder;
    uint public highestBid;
    mapping(address => uint) public refunds;

    //Create a constructor function that sets the highest bidder and bid to 0
    constructor() public {
        highestBidder = address(0);
        highestBid = 0;
    }

    //Create a function that allows users to place a bid
    function bid() public payable {
        //Ensure that the bid is higher than the current highest bid
        require(msg.value > highestBid);

        //Check if there is already a highest bidder
        if (highestBidder != address(0)) {
            //Update the refunds for the previous highest bidder
            refunds[highestBidder] += highestBid;
        }

        //Update the highest bidder and bid amount
        highestBidder = msg.sender;
        highestBid = msg.value;
    }

    //Create a function that allows users to withdraw their refund
    function withdrawRefund() public {
        //Get the amount of refund for the caller
        uint refundAmount = refunds[msg.sender];

        //Ensure that the refund amount is greater than 0
        require(refundAmount > 0);

        //Set the refund amount to 0
        refunds[msg.sender] = 0;

        //Send the refund to the caller
        msg.sender.transfer(refundAmount);
    }

    //Create a function that allows the highest bidder to withdraw the bid amount
    function withdrawBid() public {
        //Ensure that the caller is the highest bidder
        require(msg.sender == highestBidder);

        //Get the current highest bid
        uint bidAmount = highestBid;

        //Set the highest bidder and bid to 0
        highestBidder = address(0);
        highestBid = 0;

        //Send the bid amount to the highest bidder
        msg.sender.transfer(bidAmount);
    }
}