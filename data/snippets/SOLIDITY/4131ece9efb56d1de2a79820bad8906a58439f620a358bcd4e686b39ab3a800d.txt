// Contract to store and distribute funds
contract FundDistribution {
    address public owner; // owner of the contract
    address[] public recipients; // list of recipients for funds distribution
    mapping(address => uint) public balances; // balances of each recipient

    // constructor to set owner and initial recipients
    constructor() public {
        owner = msg.sender;
        recipients = [0x2Bc413b8D0C0Aa711305E3D9DDC4D2241F5Cc239,
                      0x09E40C2d46a247C3Ea45BE0c0E95CA42Ef563FDc,
                      0x145a88B27D6cA79D7B1f565b3202CC8F3c19921F];
    }

    // function to add a new recipient
    function addRecipient(address _recipient) public {
        require(msg.sender == owner); // only the owner can add recipients
        require(_recipient != address(0)); // recipient address must be valid
        require(balances[_recipient] == 0); // recipient cannot already exist
        recipients.push(_recipient); // add recipient to recipients array
    }

    // function to remove a recipient
    function removeRecipient(address _recipient) public {
        require(msg.sender == owner); // only the owner can remove recipients
        require(_recipient != address(0)); // recipient address must be valid
        require(balances[_recipient] > 0); // recipient must have a balance
        for (uint i = 0; i < recipients.length; i++) {
            if (recipients[i] == _recipient) {
                delete recipients[i]; // delete recipient from recipients array
                break;
            }
        }
    }

    // function to deposit funds to be distributed
    function depositFunds() public payable {
        require(msg.sender == owner); // only the owner can deposit funds
    }

    // function to distribute funds among all recipients
    function distributeFunds() public {
        require(msg.sender == owner); // only the owner can distribute funds
        require(address(this).balance > 0); // contract must have a balance
        for (uint i = 0; i < recipients.length; i++) {
            balances[recipients[i]] += address(this).balance / recipients.length; // calculate and add balance for each recipient
        }
    }

    // function to withdraw funds from recipient's balance
    function withdrawFunds() public {
        require(balances[msg.sender] > 0); // sender must have a balance
        uint amount = balances[msg.sender]; // get amount to withdraw
        balances[msg.sender] = 0; // set balance to 0
        msg.sender.transfer(amount); // transfer funds to sender's address
    }

    // function to view balance of a recipient
    function viewBalance(address _recipient) public view returns (uint balance) {
        return balances[_recipient];
    }
}