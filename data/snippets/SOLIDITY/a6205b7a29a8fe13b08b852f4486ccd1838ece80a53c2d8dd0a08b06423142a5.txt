pragma solidity ^0.6.0;

contract MyContract {

    // state variables
    string private name; // private variables cannot be accessed outside the contract
    uint private age;

    address public owner; // public variables can be accessed by anyone

    // events
    event NameChanged(string _newName);
    event AgeChanged(uint _newAge);

    // constructor function - runs once when contract is deployed
    constructor() public {
        owner = msg.sender; // msg.sender is the address of the person deploying the contract
    }

    // getters and setters for state variables
    function getName() public view returns (string) {
        return name;
    }

    function getAge() public view returns (uint) {
        return age;
    }

    function setName(string _newName) public onlyOwner {
        name = _newName;
    }

    function setAge(uint _newAge) public onlyOwner {
        age = _newAge;
    }

    // modifiers - used to restrict access to certain functions or only allow certain people to call them
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }

    // fallback function - called when contract receives ether
    fallback() external payable {
        // do something with the received ether
    }

    // functions that interact with other contracts on the blockchain
    function callSomeContract(address _contractAddress) public {
        SomeContract someContract = SomeContract(_contractAddress);
        someContract.someFunction();
    }

    // selfdestruct - allows the contract to be destroyed and any remaining funds to be sent to a designated address
    function destroyContract(address payable _recipient) public onlyOwner {
        selfdestruct(_recipient);
    }
}