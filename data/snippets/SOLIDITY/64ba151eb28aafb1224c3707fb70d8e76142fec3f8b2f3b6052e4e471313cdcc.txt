// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract Token {
    // Storage variables
    address public owner;
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowed;
    uint public totalSupply;

    // Events
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);

    // Constructor
    constructor(uint _totalSupply) {
        owner = msg.sender;
        totalSupply = _totalSupply;
        balances[msg.sender] = _totalSupply;
    }

    // Functions
    function transfer(address to, uint value) public returns (bool) {
        require(balances[msg.sender] >= value, "Not enough balance.");
        require(to != address(0), "Cannot transfer to zero address.");
        
        balances[msg.sender] -= value;
        balances[to] += value;
        
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint value) public returns (bool) {
        require(spender != address(0), "Cannot approve zero address.");
        
        allowed[msg.sender][spender] = value;
        
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint value) public returns (bool) {
        require(balances[from] >= value, "Not enough balance.");
        require(allowed[from][msg.sender] >= value, "Not approved for transfer.");
        require(to != address(0), "Cannot transfer to zero address.");
        
        balances[from] -= value;
        balances[to] += value;
        allowed[from][msg.sender] -= value;
        
        emit Transfer(from, to, value);
        return true;
    }
}