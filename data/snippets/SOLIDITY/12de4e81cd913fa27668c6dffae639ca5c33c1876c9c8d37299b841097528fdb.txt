pragma solidity ^0.8.0;

// This contract allows users to store and retrieve their data
contract DataStorage {
    
    // DECLARE STATE VARIABLES
    
    address public owner; // Holds the address of the owner of the contract
    mapping (address => bytes32[]) private dataMapping; // Maps user's address to their data stored in bytes32 array
    
    // EVENTS
    
    event DataStored(address user, bytes32[] data); // Event triggered when data is stored
    event DataRetrieved(address user, bytes32[] data); // Event triggered when data is retrieved
    
    // MODIFIERS
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }
    
    // CONSTRUCTOR
    
    constructor() {
        owner = msg.sender; // Set the owner of the contract to the creator
    }
    
    // STORE FUNCTIONS
    
    // Allows user to store their data in the contract
    function storeData(bytes32[] memory data) public {
        dataMapping[msg.sender] = data; // Maps user's data to their address
        emit DataStored(msg.sender, data); // Emits DataStored event
    }
    
    // RETRIEVE FUNCTIONS
    
    // Retrieves the data stored by the user
    function retrieveData() public view returns (bytes32[] memory) {
        return dataMapping[msg.sender]; // Returns user's data
    }
    
    // OWNER FUNCTIONS
    
    // Allows the owner to transfer ownership to another address
    function transferOwnership(address _newOwner) public onlyOwner {
        owner = _newOwner; // Sets new owner address
    }
    
    // Allows the owner to destroy the contract
    function destroyContract() public onlyOwner {
        selfdestruct(payable(owner)); // Destroys the contract and sends remaining balance to owner
    }
}