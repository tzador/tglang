// Smart Contract to create a decentralized voting system using Ethereum blockchain

//Import the necessary libraries
import "github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import "github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol";

contract VotingSystem {

    using SafeMath for uint256;

    // Struct to hold information about each candidate
    struct Candidate {
        string name;
        uint256 voteCount;
    }

    // Array to store all the candidates
    Candidate[] public candidates;

    // Variable to keep track of the total votes casted
    uint256 public totalVotes;

    // Mapping to keep track of whether a particular address has voted or not
    mapping(address => bool) public hasVoted;

    // Event to emit when a vote is casted
    event VoteCasted(address voter, uint256 candidateId);

    // Constructor function to initialize the candidates list
    constructor(string[] memory _candidates) public {
        for (uint256 i = 0; i < _candidates.length; i++) {
            candidates.push(Candidate({name: _candidates[i], voteCount: 0}));
        }
    }

    // Function to cast a vote for a particular candidate
    function castVote(uint256 candidateId) public {
        require(hasVoted(msg.sender) == false, "You have already voted.");
        require(candidateId < candidates.length, "Invalid candidate id.");
        totalVotes = totalVotes.add(1);
        candidates[candidateId].voteCount = candidates[candidateId].voteCount.add(1);
        hasVoted[msg.sender] = true;
        emit VoteCasted(msg.sender, candidateId);
    }
}