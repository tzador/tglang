//Contract that manages the ownership of a car
contract CarOwnership {

  //Struct to store information about each car
  struct Car {
    string model;
    string make;
    uint256 year;
    address owner;
  }

  //Mapping to keep track of all the cars in the system
  mapping(uint256 => Car) public cars;

  //Function to add a new car to the system
  function addCar(uint256 _id, string memory _model, string memory _make, uint256 _year) public {
    //Require that the car does not already exist in the system
    require(cars[_id].owner == address(0), "Car already exists");

    //Create a new Car object and store it in the mapping
    Car memory newCar = Car(_model, _make, _year, msg.sender);
    cars[_id] = newCar;
  }

  //Function to transfer ownership of a car to a new address
  function transferOwnership(uint256 _id, address _newOwner) public {
    //Require that the caller is the current owner of the car
    require(cars[_id].owner == msg.sender, "You are not the owner of this car");

    //Update the owner of the car to the new address
    cars[_id].owner = _newOwner;
  }

  //Function to check the ownership of a car
  function checkOwnership(uint256 _id) public view returns(address) {
    //Return the current owner of the car
    return cars[_id].owner;
  }
}