pragma solidity >=0.5.0 <0.7.0; // Specifying the version of Solidity to use

contract Token {
    address public owner; // Declaring a state variable for storing the address of the contract owner
    
    uint256 public totalSupply; // Declaring a state variable for storing the total supply of tokens
    
    string public constant name = "MyToken"; // Declaring a constant state variable for the token name
    
    string public constant symbol = "MTK"; // Declaring a constant state variable for the token symbol
    
    uint8 public constant decimals = 18; // Declaring a constant state variable for the number of decimals
    
    mapping(address => uint256) balances; // Declaring a mapping to store the balance of each address
    
    /**
     * @dev Constructor function to set initial values
     * @param _initialSupply The initial supply of tokens to be assigned to the contract owner
     */
    constructor(uint256 _initialSupply) public {
        owner = msg.sender; // Setting the contract owner as the address that deployed the contract
        totalSupply = _initialSupply; // Setting the initial supply
        balances[msg.sender] = _initialSupply; // Assigning the initial supply to the contract owner's balance
    }
    
    /**
     * @dev Function to get the balance of a particular address
     * @param _owner The address whose balance is to be queried
     * @return The balance of the specified address
     */
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner]; // Returning the balance of the specified address
    }
    
    /**
     * @dev Function to transfer tokens from the sender's address to another address
     * @param _to The address to transfer tokens to
     * @param _value The amount of tokens to be transferred
     */
    function transfer(address _to, uint256 _value) public {
        require(balances[msg.sender] >= _value); // Checking if the sender has sufficient balance
        require(_to != address(0)); // Checking if the recipient is not a 0 address
        balances[msg.sender] -= _value; // Subtracting the transferred amount from the sender's balance
        balances[_to] += _value; // Adding the transferred amount to the recipient's balance
    }
    
    /**
     * @dev Function to transfer tokens from one address to another on behalf of the owner
     * @param _from The address to transfer tokens from
     * @param _to The address to transfer tokens to
     * @param _value The amount of tokens to be transferred
     */
    function transferFrom(address _from, address _to, uint256 _value) public {
        require(balances[_from] >= _value); // Checking if the sender has sufficient balance
        require(_to != address(0)); // Checking if the recipient is not a 0 address
        require(_value <= allowed[msg.sender][_from]); // Checking if the allowed amount for the sender is equal to or greater than the amount to be transferred
        balances[_from] -= _value; // Subtracting the transferred amount from the sender's balance
        balances[_to] += _value; // Adding the transferred amount to the recipient's balance
        allowed[msg.sender][_from] -= _value; // Updating the allowed amount for the sender
    }
    
    mapping(address => mapping(address => uint256)) allowed; // Declaring a mapping to store the allowed amount for each address
    
    /**
     * @dev Function to approve another address to spend a specified amount of tokens on the sender's behalf
     * @param _spender The address to approve
     * @param _value The allowed amount for the address to spend
     */
    function approve(address _spender, uint256 _value) public {
        allowed[msg.sender][_spender] = _value; // Setting the allowed amount for the specified address
    }
    
    /**
     * @dev Function to check the allowed amount for an address to spend on behalf of another address
     * @param _owner The address whose allowed amount is to be checked
     * @param _spender The address being checked
     * @return The allowed amount for the specified address
     */
    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender]; // Returning the allowed amount for the specified address
    }
}