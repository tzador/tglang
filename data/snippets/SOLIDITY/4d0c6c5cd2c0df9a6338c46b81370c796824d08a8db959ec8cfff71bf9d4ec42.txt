pragma solidity ^0.8.0;  // set solidity version

contract ERC20Token {  // declare contract
    mapping (address => uint256) balances;  // declare mapping for addresses and token balances
    string public name;  // declare public string variable for token name
    string public symbol;  // declare public string variable for token symbol
    uint8 public decimals;  // declare public uint8 variable for token decimals
    uint256 public totalSupply;  // declare public uint256 variable for total token supply

    event Transfer(address indexed from, address indexed to, uint256 value);  // declare event for token transfer

    constructor(
        string memory _name, 
        string memory _symbol, 
        uint8 _decimals, 
        uint256 _initialSupply
    ) {  // define constructor function and set initial token details and supply
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _initialSupply;
        
        balances[msg.sender] = _initialSupply;  // give all initial token supply to contract creator
    }

    function balanceOf(address _owner) public view returns (uint256) {  // define function to get token balance of specified address
        return balances[_owner];
    }
    
    function transfer(address _to, uint256 _value) public returns (bool) {  // define function to transfer tokens from sender to specified address
        require(_value <= balances[msg.sender]);  // check if sender has enough tokens
        require(_to != address(0));  // prevent transfer to zero address
        balances[msg.sender] -= _value;  // subtract tokens from sender's balance
        balances[_to] += _value;  // add tokens to recipient's balance
        emit Transfer(msg.sender, _to, _value);  // emit transfer event
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {  // define function to transfer tokens from specified address to another address
        require(_value <= balances[_from]);  // check if sender has enough tokens
        require(_value <= allowed[_from][msg.sender]);  // check if sender is allowed to transfer specified amount of tokens
        require(_to != address(0));  // prevent transfer to zero address
        balances[_from] -= _value;  // subtract tokens from sender's balance
        balances[_to] += _value;  // add tokens to recipient's balance
        allowed[_from][msg.sender] -= _value;  // subtract transferred amount from sender's allowed amount
        emit Transfer(_from, _to, _value);  // emit transfer event
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) {  // define function for sender to approve another address to spend specified amount of tokens
        allowed[msg.sender][_spender] = _value;  // set sender's approved amount for specified spender
        emit Approval(msg.sender, _spender, _value);  // emit approval event
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {  // define function to get amount of tokens spender is allowed to spend on behalf of specified owner
        return allowed[_owner][_spender];
    }

    // optional functions to implement ERC20 token standard
    // function increaseApproval(address _spender, uint _addedValue) public returns (bool) {  // define function to increase sender's approved amount for specified spender
    //     allowed[msg.sender][_spender] += _addedValue;
    //     emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    //     return true;
    // }

    // function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {  // define function to decrease sender's approved amount for specified spender
    //     uint oldValue = allowed[msg.sender][_spender];
    //     if (_subtractedValue > oldValue) {
    //         allowed[msg.sender][_spender] = 0;
    //     } else {
    //         allowed[msg.sender][_spender] = oldValue - _subtractedValue;
    //     }
    //     emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    //     return true;
    // }
}