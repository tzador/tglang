/**
 * @title Example Contract
 * @dev This contract serves as an example for the SOLIDITY language.
 */
 contract ExampleContract {
     address public owner;
     uint256 public total;

     event Add(uint256 num1, uint256 num2, uint256 result);
     event Subtract(uint256 num1, uint256 num2, uint256 result);
     event Multiply(uint256 num1, uint256 num2, uint256 result);
     event Divide(uint256 num1, uint256 num2, uint256 result);

     constructor() public {
         owner = msg.sender;
         total = 0;
     }

     function add(uint256 num1, uint256 num2) public {
         require(msg.sender == owner, "Only owner can call this function.");
         uint256 result = num1 + num2;
         total += result;
         emit Add(num1, num2, result);
     }

     function subtract(uint256 num1, uint256 num2) public {
         require(msg.sender == owner, "Only owner can call this function.");
         uint256 result = num1 - num2;
         total -= result;
         emit Subtract(num1, num2, result);
     }

     function multiply(uint256 num1, uint256 num2) public {
         require(msg.sender == owner, "Only owner can call this function.");
         uint256 result = num1 * num2;
         total *= result;
         emit Multiply(num1, num2, result);
     }

     function divide(uint256 num1, uint256 num2) public {
         require(num2 != 0, "Cannot divide by zero.");
         require(msg.sender == owner, "Only owner can call this function.");
         uint256 result = num1 / num2;
         total /= result;
         emit Divide(num1, num2, result);
     }
 }