pragma solidity ^0.7.0;

contract ComplexContract {
    // state variables
    string private _name;
    mapping(address => uint) private _balances;
    address private _owner;
    uint private _totalSupply;
    
    // events
    event NameChanged(string newName);
    event Transfer(address indexed from, address indexed to, uint value);
    
    // modifiers
    modifier onlyOwner() {
        require(msg.sender == _owner, "Sender must be the owner");
        _;
    }
    
    // constructor
    constructor(string memory name) {
        _name = name;
        _owner = msg.sender;
    }
    
    // functions
    function changeName(string memory newName) public onlyOwner {
        _name = newName;
        emit NameChanged(newName);
    }
    
    function deposit() public payable {
        _balances[msg.sender] += msg.value;
        _totalSupply += msg.value;
        emit Transfer(address(0), msg.sender, msg.value);
    }
    
    function withdraw(uint amount) public {
        require(amount <= _balances[msg.sender], "Insufficient balance");
        
        _balances[msg.sender] -= amount;
        _totalSupply -= amount;
        msg.sender.transfer(amount);
        emit Transfer(msg.sender, address(0), amount);
    }
}