pragma solidity >=0.4.22 <0.7.0;

contract Token {
    // Variables and Mappings
    address owner;
    mapping(address => uint) balances;
    
    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    
    // Constructor
    constructor() public {
        owner = msg.sender;
    }
    
    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    // Functions
    function transfer(address _to, uint256 _value) public {
        require(balances[msg.sender] >= _value);
        
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        
        emit Transfer(msg.sender, _to, _value);
    }
    
    function getBalance(address _addr) public view returns (uint) {
        return balances[_addr];
    }
    
    function withdrawBalance() public onlyOwner {
        msg.sender.transfer(address(this).balance);
    }
}