pragma solidity ^ 0.5.0;

//create a contract
contract MyContract {
  //declare state variables
  uint private myNumber;
  string public myString;
  address payable private myAddress;

  //declare events
  event LogNumberChanged(uint newNumber);
  event LogStringChanged(string newString);

  //declare constructor
  constructor(uint _number, string memory _string, address payable _address) public {
    myNumber = _number;
    myString = _string;
    myAddress = _address;
  }

  //declare fallback function
  function () external payable {
    revert("Fallback function not allowed");
  }

  //function to change the number
  function changeNumber(uint _newNumber) public {
    myNumber = _newNumber;
    emit LogNumberChanged(_newNumber);
  }

  //function to change the string
  function changeString(string memory _newString) public {
    myString = _newString;
    emit LogStringChanged(_newString);
  }

  //function to send ether to the contract
  function sendEther() public payable {
    myAddress.transfer(msg.value);
  }

  //function to get current number
  function getNumber() public view returns (uint) {
    return myNumber;
  }

  //function to get current string
  function getString() public view returns (string memory) {
    return myString;
  }
}