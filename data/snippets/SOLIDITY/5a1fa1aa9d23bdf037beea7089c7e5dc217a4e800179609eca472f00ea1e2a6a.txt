pragma solidity ^0.4.24;

contract SimpleContract {
  // This is a state variable
  uint public myNumber;
  
  // This is a constructor function
  constructor(uint _initialNumber) public {
    // Set the value of myNumber to the initial number passed in
    myNumber = _initialNumber;
  }
  
  // This is a function that allows anyone to call it and change the value of myNumber
  function changeMyNumber(uint _newNumber) public {
    // Set myNumber to the new number passed in
    myNumber = _newNumber;
  }
  
  // This is a function that allows only the owner of the contract to call it and change the value of myNumber
  function ownerChangeMyNumber(uint _newNumber) public {
    // Check if the caller is the owner of the contract
    require(msg.sender == owner);
    
    // Set myNumber to the new number passed in
    myNumber = _newNumber;
  }
  
  // This is a function that returns the current value of myNumber
  function getMyNumber() public view returns (uint) {
    // Return the value of myNumber
    return myNumber;
  }
  
  // This is a function that calculates and returns the sum of two numbers
  function getSum(uint _num1, uint _num2) public pure returns (uint) {
    // Calculate the sum of the two numbers passed in
    uint sum = _num1 + _num2;
    
    // Return the sum
    return sum;
  }
  
  // This is a fallback function that is called when someone sends ether to the contract without calling a specific function
  function() public payable {
    // Do something with the received ether
    // For example, add it to the current value of myNumber
    myNumber += msg.value;
  }
}