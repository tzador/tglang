// define a contract called "Example"
contract Example {
  // define a state variable "name" of type string
  string name;

  // define a state variable "balance" of type uint
  uint balance;

  // define an array of addresses called "participants"
  address[] participants;

  /* define a function "initialize" that takes in a string input
   * sets the "name" state variable and initializes the "balance" state variable to 0
   * only callable by the contract creator
   */
  function initialize(string memory _name) public {
    require(msg.sender == owner); // ensure only contract creator can call this function
    name = _name;
    balance = 0;
  }

  /* define a function "addParticipant" that takes in an address input
   * adds the input address to the "participants" array
   * only callable by the contract owner
   */
  function addParticipant(address _participant) public {
    require(msg.sender == owner); // ensure only contract owner can call this function
    participants.push(_participant);
  }

  /* define a function "deposit" that takes in a uint input
   * adds the input amount to the "balance" state variable
   * only callable by participants in the "participants" array
   */
  function deposit(uint _amount) public {
    require(isParticipant(msg.sender)); // ensure only participants can call this function
    balance += _amount;
  }

  /* define a function "withdraw" that takes in a uint input
   * subtracts the input amount from the "balance" state variable
   * only callable by the contract owner
  */
  function withdraw(uint _amount) public {
    require(msg.sender == owner); // ensure only contract owner can call this function
    balance -= _amount;
  }

  // helper function to check if an address is in the "participants" array
  function isParticipant(address _address) private view returns (bool) {
    for (uint i = 0; i < participants.length; i++) {
      if (participants[i] == _address) {
        return true;
      }
    }
    return false;
  }
}