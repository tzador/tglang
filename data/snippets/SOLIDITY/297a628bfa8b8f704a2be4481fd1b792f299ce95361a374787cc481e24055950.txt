// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

contract ExampleContract {
  uint256 public value;
  mapping(address => bool) public authorized;
  address public owner = msg.sender;
  address[] public authorizedUsers;

  event ValueUpdated(uint256 newValue);
  event AuthorizedUserAdded(address user);
  event AuthorizedUserRemoved(address user);

  constructor () {
    authorized[msg.sender] = true;
  }

  function updateValue(uint256 _newValue) external {
    require(authorized[msg.sender], "You are not authorized to update the value");
    value = _newValue;
    emit ValueUpdated(_newValue);
  }

  function addAuthorizedUser(address _newUser) external {
    require(msg.sender == owner, "Only the owner can add authorized users");
    require(!authorized[_newUser], "User is already authorized");
    authorized[_newUser] = true;
    authorizedUsers.push(_newUser);
    emit AuthorizedUserAdded(_newUser);
  }

  function removeAuthorizedUser(address _user) external {
    require(msg.sender == owner, "Only the owner can remove authorized users");
    require(authorized[_user], "User is not authorized");
    authorized[_user] = false;
    for (uint256 i = 0; i < authorizedUsers.length; i++) {
      if (authorizedUsers[i] == _user) {
        authorizedUsers[i] = authorizedUsers[authorizedUsers.length - 1];
        authorizedUsers.pop();
        break;
      }
    }
    emit AuthorizedUserRemoved(_user);
  }
}