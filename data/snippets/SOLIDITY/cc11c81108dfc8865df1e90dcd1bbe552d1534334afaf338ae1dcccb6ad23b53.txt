pragma solidity ^0.8.0;

// This contract is an example of a complex Solidity code

contract ComplexContract {

    // Define two different variables
    uint public variableOne;
    string public variableTwo;

    // Create an event to track variable changes
    event VariableChanged(uint oldValue, uint newValue);

    // Create a mapping to store key-value pairs
    mapping (uint => string) private keyValueMap;

    // Constructor function that sets the values of the two variables
    constructor(uint _variableOne, string memory _variableTwo) {
        variableOne = _variableOne;
        variableTwo = _variableTwo;
    }

    // Function to update the value of variableOne and emit an event
    function updateVariableOne(uint _newValue) public {
        uint oldValue = variableOne;
        variableOne = _newValue;
        emit VariableChanged(oldValue, _newValue);
    }

    // Function to add a new key-value pair to the mapping
    function addKeyValue(uint _key, string calldata _value) public {
        keyValueMap[_key] = _value;
    }

    // Function to retrieve the value of a specific key from the mapping
    function getValueForKey(uint _key) public view returns (string memory) {
        return keyValueMap[_key];
    }

    // Function to remove a key-value pair from the mapping
    function removeKeyValue(uint _key) public {
        delete keyValueMap[_key];
    }
}