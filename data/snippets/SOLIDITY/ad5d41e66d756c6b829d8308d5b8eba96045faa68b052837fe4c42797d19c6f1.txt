pragma solidity >=0.4.22 <0.9.0; /* Specifies the version of Solidity language used */

contract MyContract {
    /* State Variables, also known as storage variables, are declared first */
    uint public num; /* Public state variable of type unsigned integer with access level set to public */
    address public owner; /* Public state variable of type address with access level set to public */
    
    /* Event declaration */
    event LogNumChange(uint _oldNum, uint _newNum, address _owner);
    
    /* Constructor function to initialize state variables */
    constructor() {
        num = 0; /* Initialize num to 0 */
        owner = msg.sender; /* Set owner to the address of the account that deployed the contract */
    }
    
    /* Function to increment num, can only be called by the owner */
    function incrementNum() external {
        require(msg.sender == owner, "Only the owner can call this function"); /* Enforce access control */
        num++; /* Increment num by 1 */
        emit LogNumChange(num - 1, num, owner); /* Emit an event to notify listeners of the change */
    }
    
    /* Function to get the current value of num */
    function getNum() external view returns (uint) {
        return num; /* Returns the current value of num */
    }
}