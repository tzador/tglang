pragma solidity ^0.8.0; //declaring solidity version

/// @title Voting contract
contract Voting {
    // storing the voter count
    uint public voterCount;
    
    // mapping to store the voting status of each voter
    mapping(address => bool) public voted;
    
    // storing the total vote count for each candidate
    mapping(string => uint) public voteCount;

    // event to be emitted when a new vote is casted
    event VoteCasted(string candidateName, address voterAddress);
    
    // function to receive and record a vote from a voter
    function castVote(string memory candidate) public {
        // checking if the voter has already voted
        require(!voted[msg.sender], "You have already casted your vote.");
        
        // updating the voted map to mark the voter as voted
        voted[msg.sender] = true;
        
        // incrementing the vote count for the chosen candidate
        voteCount[candidate]++;
        
        // emitting the vote casted event
        emit VoteCasted(candidate, msg.sender);
        
        // incrementing the voter count
        voterCount++;
    }
    
    // function to get the total vote count for a candidate
    function getVoteCount(string memory candidate) public view returns(uint) {
        return voteCount[candidate];
    }
}