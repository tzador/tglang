pragma solidity ^0.8.0; // Specifying the version of Solidity to use

/**
 * @title A simple smart contract that implements a basic token
 */ 
contract Token {
    
    // Variables to track token details
    string public name; // Token name
    string public symbol; // Token symbol
    uint256 public totalSupply; // Total supply of tokens
    
    // Mapping to track token balance of each address
    mapping(address => uint256) public balanceOf; 
    
    // Mapping to track approved amounts for delegated transfers
    mapping(address => mapping(address => uint256)) public allowance; 
    
    // Event to track transfers
    event Transfer(address indexed _from, address indexed _to, uint256 _value); 
    
    // Event to track approvals
    event Approval(address indexed _owner, address indexed _spender, uint256 _value); 

    /**
     * @dev Initializes the contract with initial token distribution and token details
     */
     constructor(uint256 _initialSupply, string memory _name, string memory _symbol) {
        totalSupply = _initialSupply; // Set total supply of tokens
        balanceOf[msg.sender] = _initialSupply; // Assign initial tokens to contract creator
        name = _name; // Set token name
        symbol = _symbol; // Set token symbol
    }

    /**
     * @dev Function to transfer tokens from one address to another
     * @param _to Address to transfer tokens to
     * @param _value Amount of tokens to transfer
     */
    function transfer(address _to, uint256 _value) public returns(bool success) {
        // Ensure sender has enough balance to transfer
        require(balanceOf[msg.sender] >= _value);

        // Update sender and receiver balances
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        // Emit transfer event
        emit Transfer(msg.sender, _to, _value);
        
        return true;
    }

    /**
     * @dev Function to allow a delegated transfer from one address to another
     * @param _spender Address approved for delegated transfer
     * @param _value Amount of tokens approved for delegated transfer
     */
    function approve(address _spender, uint256 _value) public {
        // Update allowance mapping
        allowance[msg.sender][_spender] = _value;
        
        // Emit approval event
        emit Approval(msg.sender, _spender, _value);
    }

    /**
     * @dev Function to transfer tokens from one address to another on behalf of a third party
     * @param _from Address to transfer tokens from
     * @param _to Address to transfer tokens to
     * @param _value Amount of tokens to transfer
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {
        // Ensure sender has enough allowance to transfer on behalf of _from address
        require(allowance[_from][msg.sender] >= _value);
        
        // Ensure _from address has enough balance to transfer
        require(balanceOf[_from] >= _value);
        
        // Update sender and receiver balances and allowance mapping
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;

        // Emit transfer event
        emit Transfer(_from, _to, _value);
        
        return true;
    }
}