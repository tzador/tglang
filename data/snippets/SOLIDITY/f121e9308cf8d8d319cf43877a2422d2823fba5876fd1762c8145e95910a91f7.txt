pragma solidity ^0.8.0; //Specify the solidity version

contract MyToken { //Create contract named MyToken
	
	mapping(address => uint) balances; //declare a mapping named balances with addresses as keys and uint as values
	uint totalSupply; //declare a uint named totalSupply

	//Constructor to initialize totalSupply and balance of contract creator
	constructor(uint _totalSupply) {
		balances[msg.sender] = _totalSupply; //assign totalSupply to the balance of contract creator
		totalSupply = _totalSupply; //assign totalSupply to the passed in value
	}
	
	//Function to transfer tokens from sender to receiver
	function transfer(address _receiver, uint _amount) public {
		require(balances[msg.sender] >= _amount); //checks if sender has enough balance to send
		balances[msg.sender] -= _amount; //subtracts amount from sender's balance
		balances[_receiver] += _amount; //adds amount to receiver's balance
	}
	
	//Getter function to retrieve balance of a specific address
	function balanceOf(address _owner) public view returns (uint) { 
		return balances[_owner]; //returns balance of specified address
	}
	
	//Function to allow other contracts to spend tokens on behalf of the sender
	function approve(address _spender, uint _amount) public {
		allowances[msg.sender][_spender] = _amount; //assign allowance to the spender for the sender
		emit Approval(msg.sender, _spender, _amount); //trigger Approval event
	}
	
	//Function to transfer tokens from one address to another, using allowance
	function transferFrom(address _sender, address _receiver, uint _amount) public {
		require(balances[_sender] >= _amount); //checks if sender has enough balance to send
		require(allowances[_sender][msg.sender] >= _amount); //checks if sender has allowed the spender to spend enough tokens
		balances[_sender] -= _amount; //subtracts amount from sender's balance
		balances[_receiver] += _amount; //adds amount to receiver's balance
		allowances[_sender][msg.sender] -= _amount; //subtracts amount from spender's allowance
	}
	
	//Event that is triggered when a spender is allowed to spend tokens
	event Approval(address indexed _owner, address indexed _spender, uint _amount);
}