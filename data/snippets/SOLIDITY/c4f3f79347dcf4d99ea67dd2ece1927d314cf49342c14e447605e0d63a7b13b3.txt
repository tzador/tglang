pragma solidity >= 0.4.22 < 0.8.0; // Specifying the version of Solidity to be used

contract SimpleContract { // Defining a contract
    address public owner; // Creating a variable to store the address of the owner
    
    // Creating a constructor to set the initial owner when the contract is deployed
    constructor () public {
        owner = msg.sender; // Assigning the sender's address as the owner
    }
    
    // Creating a function to transfer ownership to a new address
    function transferOwnership(address _newOwner) public {
        require(msg.sender == owner); // Restricting access to the owner only
        owner = _newOwner; // Assigning the new owner's address
    }
    
    // Creating a mapping to store different owners and their corresponding balances
    mapping (address => uint256) public balanceOf;
    
    // Creating a function to deposit Ether into the contract and update the balance
    function deposit() payable public {
        balanceOf[msg.sender] += msg.value; // Adding the deposited value to the sender's balance
    }
    
    // Creating a function to withdraw Ether from the contract and update the balance
    function withdraw(uint256 _amount) public {
        require(balanceOf[msg.sender] >= _amount); // Checking if the sender has sufficient balance
        balanceOf[msg.sender] -= _amount; // Subtracting the withdrawn amount from the sender's balance
        msg.sender.transfer(_amount); // Transferring the amount to the sender's address
    }
}