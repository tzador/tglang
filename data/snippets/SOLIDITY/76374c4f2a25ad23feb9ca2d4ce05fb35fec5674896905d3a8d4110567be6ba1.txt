pragma solidity >=0.4.22 <0.7.0; //specifying the version of Solidity to be used

//creating a contract named Voting 
contract Voting{

    //creating a struct named Voter to store voter information
    struct Voter{
        bool voted; //flag to check if voter has already voted
        uint256 vote; //candidate id voted by the voter
    }

    //creating a struct named Voter to store candidate information
    struct Candidate{
        string name; //candidate name
        uint256 voteCount; //total votes received by the candidate
    }

    mapping(address => Voter) public voters; //mapping to store voter addresses and their information
    Candidate[] public candidates; //array to store candidate information
    uint256 public totalVotes; //variable to store the total number of votes casted

    //function to add a new candidate
    function addCandidate(string memory _name) public {
        //checking if the function is being called by the contract owner
        require(msg.sender == owner, "Only owner can add candidates");
        //adding the candidate to the candidates array
        candidates.push(Candidate(_name, 0));
    }

    //function to cast a vote
    function vote(uint256 _candidateId) public {
        //checking if the voter has not already voted
        require(!voters[msg.sender].voted, "You have already voted");
        //checking if the candidateId is valid
        require(_candidateId >= 0 && _candidateId < candidates.length, "Invalid candidate Id");
        //setting the voted flag to true for the voter
        voters[msg.sender].voted = true; 
        //updating the vote count for the chosen candidate
        candidates[_candidateId].voteCount++;
        //incrementing the totalVotes count
        totalVotes++;
    }
}