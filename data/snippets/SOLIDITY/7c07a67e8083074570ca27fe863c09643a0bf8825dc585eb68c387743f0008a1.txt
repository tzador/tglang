pragma solidity >=0.7.0 <0.9.0; // Version pragma 

// Contract declaration 
contract MyContract {
    
    // State variables
    uint private a; // Private unsigned integer variable
    address private owner; // Private address variable
    mapping(address => uint) private balances; // Private mapping from address to unsigned integer 
    
    // Constructor function 
    constructor() {
        owner = msg.sender; // Sets the owner of the contract to the deployer 
    }
    
    // Function modifier
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function."); // Requires that the caller is the owner of the contract 
        _; // Placeholder for the code of the function that uses this modifier 
    }
    
    // Event declaration
    event Deposit(address indexed _from, uint _value); // Event to track deposits
    
    // Function declaration
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount needs to be greater than 0."); // Requires that the deposit amount is greater than 0 
        balances[msg.sender] += msg.value; // Adds the deposit amount to the balance of the caller 
        emit Deposit(msg.sender, msg.value); // Emits the Deposit event with the caller's address and deposit amount 
    }
    
    // Function declaration with returns
    function checkBalance(address _address) public view returns (uint) {
        return balances[_address]; // Returns the balance of a given address 
    }
    
    // Function declaration with multiple parameters
    function transfer(address _to, uint _value) public onlyOwner {
        require(balances[msg.sender] >= _value, "Not enough balance to transfer."); // Requires that the transfer amount does not exceed the caller's balance 
        balances[msg.sender] -= _value; // Subtracts the transfer amount from the caller's balance 
        balances[_to] += _value; // Adds the transfer amount to the destination address's balance 
    }
    
}