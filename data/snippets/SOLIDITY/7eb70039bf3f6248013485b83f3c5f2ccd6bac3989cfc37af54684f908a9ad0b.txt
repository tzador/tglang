pragma solidity >=0.4.22 <0.6.0;

contract MyContract {
    //This is a simple storage contract
    uint8 balance; //unsigned integer for storing balance of tokens
    uint256 totalSupply; //unsigned integer for storing total supply of tokens

    //Event that is triggered when tokens are transferred
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    //Constructor to initialize the contract with an initial supply
    constructor (uint256 _initialSupply) public {
        balance = _initialSupply;
        totalSupply = _initialSupply;
    }

    /*Function to transfer tokens from one account to another
     *@param _to The address of the recipient
     *@param _value The amount of tokens to be transferred
     */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(balance >= _value); //check if the sender has enough tokens to transfer
        balance = balance - _value; //update the balance of sender
        emit Transfer(msg.sender, _to, _value); //trigger transfer event
        return true; //return true if transfer is successful
    }

    /*Function to get the balance of a particular address
     *@param _owner The address of the account to check the balance of
     */
    function balanceOf(address _owner) public view returns (uint256) {
        return balance; //return the balance of the given address
    }

    /*Function to get the total supply of tokens in the contract*/
    function getTotalSupply() public view returns (uint256) {
        return totalSupply; //return the total supply of tokens
    }
}