struct Person {  //defines a struct data type called 'Person'
    string firstName;  //declares a string variable called 'firstName'
    string lastName;  //declares a string variable called 'lastName'
    uint age;  //declares an unsigned integer variable called 'age'
    address wallet;  //declares an address variable called 'wallet'
    mapping(string => uint) allowances;  //declares a mapping data type called 'allowances' that maps string to uint
    uint[] favoriteNumbers;  //declares a dynamic array of unsigned integers called 'favoriteNumbers'
    
    constructor(string memory _firstName, string memory _lastName, uint _age, address _wallet) public { //defines a constructor function with parameters
        firstName = _firstName;  //assigns the '_firstName' parameter to the 'firstName' variable
        lastName = _lastName;  //assigns the '_lastName' parameter to the 'lastName' variable
        age = _age;  //assigns the '_age' parameter to the 'age' variable
        wallet = _wallet;  //assigns the '_wallet' parameter to the 'wallet' variable
    }
    
    function giveAllowance(string memory _reason, uint _amount) public { //defines a function to give allowance with parameters
        allowances[_reason] = _amount;  //assigns the '_amount' parameter to the 'allowances' mapping with key '_reason' 
    }
    
    function addFavoriteNumber(uint _number) public { //defines a function to add a favorite number with a parameter
        favoriteNumbers.push(_number);  //adds the '_number' parameter to the end of the 'favoriteNumbers' array
    }
    
    function getFullname() public view returns (string memory, string memory) { //defines a function to get the full name and returns a tuple
        return(firstName, lastName); //returns the values of the 'firstName' and 'lastName' variables as a tuple
    }
    
    function receivePayment() public payable { //defines a function to receive payment with no parameters
        require(msg.value > 0, "Payment amount must be greater than 0");  //requires that the payment amount is greater than 0
        wallet.transfer(msg.value);  //transfers the payment amount to the 'wallet' address
    }
    
    function checkAllowance(string memory _reason) public view returns (uint) { //defines a function to check the allowance and returns an unsigned integer
        return allowances[_reason];  //returns the value of the 'allowances' mapping with key '_reason'
    }
}