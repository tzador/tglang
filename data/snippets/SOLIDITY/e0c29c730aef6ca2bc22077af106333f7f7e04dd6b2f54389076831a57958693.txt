// Solidity code for a decentralized exchange contract with advanced features

contract DecentralizedExchange {

    // Variables for tracking the exchange's state
    address public owner;
    uint public minTradeValue;
    uint public feePercentage;

    // A mapping to keep track of user balances on the exchange
    mapping(address => mapping(address => uint)) public balances;

    // Events for tracking transactions and contract state changes
    event Buy(address indexed buyer, address token, uint amount);
    event Sell(address indexed seller, address token, uint amount);
    event SetMinTradeValue(uint minTradeValue);
    event SetFeePercentage(uint feePercentage);

    // Constructor function that sets the initial state of the contract
    // Takes in the minimum trade value and fee percentage as parameters
    constructor (uint _minTradeValue, uint _feePercentage) public {
        owner = msg.sender;
        minTradeValue = _minTradeValue;
        feePercentage = _feePercentage;
    }

    // Function to buy tokens from the exchange
    // Takes in the token address and the amount to buy as parameters
    function buy(address token, uint amount) external payable {
        require(msg.value == amount * (1 + feePercentage) / 100); // ensures correct amount of ether is sent
        balances[msg.sender][token] += amount;
        emit Buy(msg.sender, token, amount);
    }

    // Function to sell tokens on the exchange
    // Takes in the token address and the amount to sell as parameters
    function sell(address token, uint amount) external {
        require(balances[msg.sender][token] >= amount); // ensures user has enough tokens to sell
        balances[msg.sender][token] -= amount;
        msg.sender.transfer(amount * (1 - feePercentage) / 100); // transfers ether to user with fee deducted
        emit Sell(msg.sender, token, amount);
    }

    // Function to set the minimum trade value for the exchange
    // Can only be called by the owner of the contract
    function setMinTradeValue(uint _minTradeValue) external {
        require(msg.sender == owner);
        minTradeValue = _minTradeValue;
        emit SetMinTradeValue(minTradeValue);
    }

    // Function to set the fee percentage for the exchange
    // Can only be called by the owner of the contract
    function setFeePercentage(uint _feePercentage) external {
        require(msg.sender == owner);
        feePercentage = _feePercentage;
        emit SetFeePercentage(feePercentage);
    }
}