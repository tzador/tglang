// Contract to represent a basic bank account
contract Bank {
    // State variables
    address owner;
    mapping(address => uint) balances;
    uint totalBalance;

    // Constructor function to set owner
    constructor() public {
        owner = msg.sender;
    }

    // Deposit function to add funds to account
    function deposit() public payable {
        balances[msg.sender] += msg.value;
        totalBalance += msg.value;
    }

    // Withdraw function to remove funds from account
    function withdraw(uint amount) public {
        require(balances[msg.sender] >= amount, "Insufficient funds");
        balances[msg.sender] -= amount;
        totalBalance -= amount;
        msg.sender.transfer(amount);
    }

    // Transfer function to send funds from one account to another
    function transfer(address recipient, uint amount) public {
        // Check if sender has enough funds
        require(balances[msg.sender] >= amount, "Insufficient funds");
        // Check if recipient is a valid address
        require(recipient != address(0), "Invalid recipient address");
        // Update balances
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
    }

    // Get balance function to view balance of specific account
    function getBalance(address account) public view returns (uint) {
        return balances[account];
    }

    // Get total balance function to view total balance of bank
    function getTotalBalance() public view returns (uint) {
        return totalBalance;
    }
}