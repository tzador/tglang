// This code snippet demonstrates the use of the OpenZeppelin library in a Solidity contract
// It creates a basic ERC20 token with basic functionalities and security measures

pragma solidity ^0.8.0;

// Import the OpenZeppelin library for the ERC20 standard
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol";

// Create a contract for the token, inheriting from ERC20, ERC20Burnable, and Pausable contracts
contract MyToken is ERC20, ERC20Burnable, Pausable {
    // Use constructor to initialize token with a name, symbol, and initial supply
    constructor(string memory name, string memory symbol, uint256 initialSupply)
        ERC20(name, symbol)
    {
        // Use _mint function from ERC20 to assign the initial supply to the contract creator
        _mint(msg.sender, initialSupply);
    }

    // Override the _beforeTokenTransfer function from ERC20 to implement pausable functionality
    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        whenNotPaused
        override
    {
        // Make sure the transfers are not paused and the contract has enough balance for the transfer
        super._beforeTokenTransfer(from, to, amount);
    }

    // Override the _burnFrom function from ERC20Burnable to implement pausable functionality
    function _burnFrom(address account, uint256 amount)
        internal
        whenNotPaused
        override
    {
        // Make sure the transfers are not paused and the account has enough balance to burn
        super._burnFrom(account, amount);
    }
}