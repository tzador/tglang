// Example of complex contract in solidity

pragma solidity ^0.8.0; // Specifies the version of solidity being used

// Creating a contract called "ExampleContract"
contract ExampleContract {

  // Declaring state variables
  string private exampleString; // Private string variable
  address public owner; // Public address variable
  uint256 private exampleInt = 100; // Private unsigned integer variable

  // Constructor function
  constructor() {
    exampleString = "Hello World!"; // Assigns value to exampleString when contract is deployed
    owner = msg.sender; // Sets the owner variable to the address that deployed the contract
  }

  // Function to set the exampleString value
  function setExampleString(string memory _newString) public {
    require(msg.sender == owner, "Only the contract owner can call this function."); // Requires the caller to be the owner
    exampleString = _newString; // Sets the new value for exampleString
  }

  // Function that returns the value of exampleString
  function getExampleString() public view returns (string memory) {
    return exampleString; // Returns the value of exampleString
  }

  // Function to add a number to the exampleInt variable
  function addExampleInt(uint256 _num) public {
    require(msg.sender == owner, "Only the contract owner can call this function."); // Requires the caller to be the owner
    exampleInt += _num; // Adds the input number to exampleInt
  }

  // Function that returns the value of exampleInt
  function getExampleInt() public view returns (uint256) {
    return exampleInt; // Returns the value of exampleInt
  }

  // Function that checks if two addresses are equal
  function checkSameAddress(address _addr1, address _addr2) public pure returns (bool) {
    if (_addr1 == _addr2) {
      return true; // Returns true if the two addresses are equal
    } else {
      return false; // Returns false if the two addresses are not equal
    }
  }

  // Fallback function
  receive() external payable {
    revert("No fallback function allowed."); // Reverts any ether sent to the contract
  }
}