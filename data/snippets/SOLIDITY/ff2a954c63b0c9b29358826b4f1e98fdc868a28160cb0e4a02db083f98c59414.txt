// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Ownable.sol";
import "./SafeMath.sol";

contract ERC20Token {
    using SafeMath for uint256;
    
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowed;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _initialSupply
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _initialSupply;
        
        balances[msg.sender] = _initialSupply;
        emit Transfer(address(0), msg.sender, _initialSupply);
    }
    
    function balanceOf(address _owner) external view returns (uint256) {
        return balances[_owner];
    }
    
    function allowance(address _owner, address _spender) external view returns (uint256) {
        return allowed[_owner][_spender];
    }
    
    function transfer(address _to, uint256 _value) external returns (bool) {
        require(_value > 0, "Amount must be greater than 0.");
        require(_to != address(0), "Cannot transfer to the zero address.");
        require(_value <= balances[msg.sender], "Insufficient balance.");
        
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        
        return true;
    }
    
    function approve(address _spender, uint256 _value) external returns (bool) {
        require(_spender != address(0), "Cannot approve the zero address.");
        
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {
        require(_value > 0, "Amount must be greater than 0.");
        require(_to != address(0), "Cannot transfer to the zero address.");
        require(_value <= balances[_from], "Insufficient balance.");
        require(_value <= allowed[_from][msg.sender], "Transfer amount exceeds allowance.");
        
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        
        return true;
    }
}

contract ERC20Mintable is ERC20Token, Ownable {
    
    event Mint(address indexed to, uint256 value);
    event MintFinished();
    
    bool private _mintingFinished = false;
    
    modifier canMint() {
        require(!_mintingFinished, "Minting has already finished.");
        _;
    }
    
    function mint(address _to, uint256 _value) public onlyOwner canMint returns (bool) {
        require(_to != address(0), "Cannot mint to the zero address.");
        require(_value > 0, "Amount must be greater than 0.");
        
        totalSupply = totalSupply.add(_value);
        balances[_to] = balances[_to].add(_value);
        emit Mint(_to, _value);
        emit Transfer(address(0), _to, _value);
        
        return true;
    }
    
    function finishMinting() public onlyOwner canMint {
        _mintingFinished = true;
        emit MintFinished();
    }
}