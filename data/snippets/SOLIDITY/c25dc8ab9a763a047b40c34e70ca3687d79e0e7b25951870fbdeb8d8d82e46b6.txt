pragma solidity ^0.8.0;

// This contract showcases the use of modifiers and inheritance in Solidity

// Defining a parent contract with a modifier
contract Ownable {
    address public owner;

    // Modifier to restrict access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    // Constructor to assign the owners address
    constructor() {
        owner = msg.sender;
    }
}

// Inheriting the Ownable contract
contract Complex is Ownable {
    // Declaring a state variable
    uint public data;

    // Modifier to restrict access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    // Function that can only be called by the owner
    function setData(uint _data) public onlyOwner {
        data = _data;
    }

    // Function that can be called by anyone
    function getData() public view returns (uint) {
        return data;
    }
}