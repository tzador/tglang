pragma solidity ^0.8.4;

// Create a contract called "Token"
contract Token {
    // Define variables for total supply, name, symbol, and decimal places
    uint256 totalSupply;
    string name;
    string symbol;
    uint8 decimals;

    // Create mapping to keep track of balances for each address
    mapping (address => uint256) balances;

    // Create event to track transfer of tokens
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Create constructor to set initial values for token
    constructor(uint256 _initialSupply, string memory _name, string memory _symbol, uint8 _decimals) {
        // Set total supply and allocate all tokens to the contract creator
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply;

        // Set name, symbol, and decimal places of token
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }

    // Function to get total supply of tokens
    function getTotalSupply() public view returns (uint256) {
        return totalSupply;
    }

    // Function to get balance for a specific address
    function getBalance(address _address) public view returns (uint256) {
        return balances[_address];
    }

    // Function to transfer tokens from sender to recipient
    function transfer(address _to, uint256 _value) public {
        // Ensure sender has enough tokens to transfer
        require(balances[msg.sender] >= _value);

        // Update balances for sender and recipient
        balances[msg.sender] -= _value;
        balances[_to] += _value;

        // Emit transfer event
        emit Transfer(msg.sender, _to, _value);
    }
}

// Create a contract called "TokenSale" to sell tokens
contract TokenSale {
    // Define variables for token contract address, token price, and tokens sold
    Token public tokenContract;
    uint256 public tokenPrice;
    uint256 public tokensSold;

    // Create event to track token purchase
    event Sell(address buyer, uint256 amount);

    // Create constructor to set token contract and token price
    constructor(Token _tokenContract, uint256 _tokenPrice) {
        tokenContract = _tokenContract;
        tokenPrice = _tokenPrice;
    }

    // Function to buy tokens
    function buyTokens(uint256 _numberOfTokens) public payable {
        // Calculate cost of tokens
        uint256 cost = _numberOfTokens * tokenPrice;

        // Ensure buyer sends enough ether to purchase tokens
        require(msg.value >= cost);

        // Update tokens sold and transfer tokens to buyer
        tokensSold += _numberOfTokens;
        tokenContract.transfer(msg.sender, _numberOfTokens);

        // Emit sell event
        emit Sell(msg.sender, _numberOfTokens);
    }
}