pragma solidity 0.8.4;

// Creating a contract
contract MyContract {
   uint public myVariable; // Declaring a public state variable
   mapping (address => uint) balances; // Declaring a mapping
   
   // Constructor function
   constructor() {
      myVariable = 100; // Assigning a value to myVariable
   }
   
   // Function to update myVariable
   function updateVariable(uint _newValue) public {
      myVariable = _newValue; // Updating myVariable with a new value
   }
   
   // Function to transfer Ether 
   function transfer(address _to, uint _amount) payable public {
      require(balances[msg.sender] >= _amount); // Checking if the sender has enough balance
      
      // Transferring the Ether
      balances[msg.sender] -= _amount;
      balances[_to] += _amount;
      
      // Emitting the Transfer event
      emit Transfer(msg.sender, _to, _amount);
   }
    
   // Event to track transfers
   event Transfer(address indexed _from, address indexed _to, uint _amount);
}