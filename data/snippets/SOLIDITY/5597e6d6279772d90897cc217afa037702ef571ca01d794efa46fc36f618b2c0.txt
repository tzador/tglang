// Contract for managing football players
contract FootballPlayers {
    // State variables
    address public owner; // Owner of the contract
    uint256 public totalPlayers; // Total number of players
    mapping (address => bool) public players; // Mapping of player addresses to booleans for tracking existence
    address[] public playerList; // Array of player addresses for iteration

    // Events to emit
    event playerAdded(address playerAddress, uint256 playerNumber); // Event for when a player is added
    event playerRemoved(address playerAddress); // Event for when a player is removed

    // Constructor function, sets the owner as the contract deployer
    constructor() public {
        owner = msg.sender;
    }
    
    // Function for adding a player, only callable by the owner
    function addPlayer(address _playerAddress, uint256 _playerNumber) public {
        require(msg.sender == owner, "Only the owner can add players!"); // Require the caller to be the owner
        require(players[_playerAddress] == false, "Player already exists!"); // Require player address to not already exist
        players[_playerAddress] = true; // Set player boolean to true
        playerList.push(_playerAddress); // Add player address to array
        totalPlayers++; // Increment total player count
        emit playerAdded(_playerAddress, _playerNumber); // Emit playerAdded event
    }
    
    // Function for removing a player, only callable by the owner
    function removePlayer(address _playerAddress) public {
        require(msg.sender == owner, "Only the owner can remove players!"); // Require the caller to be the owner
        require(players[_playerAddress] == true, "Player does not exist!"); // Require player address to already exist
        players[_playerAddress] = false; // Set player boolean to false
        // Loop through player list to find index of player to remove
        for (uint i = 0; i < playerList.length; i++) {
            if (playerList[i] == _playerAddress) {
                // Set player at index to last player in array
                playerList[i] = playerList[playerList.length - 1];
                break;
            }
        }
        playerList.pop(); // Remove last player in array
        totalPlayers--; // Decrement total player count
        emit playerRemoved(_playerAddress); // Emit playerRemoved event
    }
    
    // Function for checking if a player exists
    function checkPlayer(address _playerAddress) public view returns (bool) {
        return players[_playerAddress]; // Return boolean value from mapping
    }
    
    // Function for getting total number of players
    function getTotalPlayers() public view returns (uint256) {
        return totalPlayers; // Return totalPlayers variable
    }
    
    // Function for getting player at a specific index in playerList array
    function getPlayerAtIndex(uint256 _index) public view returns (address) {
        require(_index < playerList.length, "Index out of range!"); // Require index to be within range of playerList array
        return playerList[_index]; // Return player address at given index
    }
}