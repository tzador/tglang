/**
 * @dev Contract for a bank allowing deposits, withdrawals, and transfers.
 */
contract Bank {
    // Variables for keeping track of balances and account information
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowed;
    uint public totalSupply;

    // Events for depositing and withdrawing funds
    event Deposit(address indexed depositor, uint amount);
    event Withdrawal(address indexed depositor, uint amount);

    /**
     * @dev Function for depositing funds into the bank.
     * @param _amount Amount of funds to deposit.
     */
    function deposit(uint _amount) public {
        // Add the deposited amount to the sender's balance
        balances[msg.sender] += _amount;
        // Increase total supply
        totalSupply += _amount;
        // Emit the deposit event
        emit Deposit(msg.sender, _amount);
    }

    /**
     * @dev Function for withdrawing funds from the bank.
     * @param _amount Amount of funds to withdraw.
     */
    function withdraw(uint _amount) public {
        // Make sure the sender has enough funds to withdraw
        require(_amount <= balances[msg.sender], "Insufficient funds.");
        // Subtract the withdrawn amount from the sender's balance
        balances[msg.sender] -= _amount;
        // Decrease total supply
        totalSupply -= _amount;
        // Emit the withdrawal event
        emit Withdrawal(msg.sender, _amount);
    }

    /**
     * @dev Function for transferring funds from one account to another.
     * @param _to Account to transfer funds to.
     * @param _amount Amount of funds to transfer.
     */
    function transfer(address _to, uint _amount) public {
        // Make sure the sender has enough funds to transfer
        require(_amount <= balances[msg.sender], "Insufficient funds.");
        // Subtract the transferred amount from the sender's balance
        balances[msg.sender] -= _amount;
        // Add the transferred amount to the recipient's balance
        balances[_to] += _amount;
        // Emit transfer events for both accounts
        emit Transfer(msg.sender, _to, _amount);
    }

    /**
     * @dev Function for allowing another account to withdraw funds on behalf of the sender.
     * @param _spender Account that is allowed to withdraw funds.
     * @param _amount Amount of funds the spender is allowed to withdraw.
     */
    function approve(address _spender, uint _amount) public {
        // Set the allowance for the spender on the sender's account
        allowed[msg.sender][_spender] = _amount;
        // Emit approval event
        emit Approval(msg.sender, _spender, _amount);
    }

    /**
     * @dev Function for transferring funds from one account to another on behalf of the sender.
     * @param _from Account to transfer funds from.
     * @param _to Account to transfer funds to.
     * @param _amount Amount of funds to transfer.
     */
    function transferFrom(address _from, address _to, uint _amount) public {
        // Make sure the sender has enough allowance to transfer funds
        require(_amount <= allowed[_from][msg.sender], "Insufficient allowance.");
        // Subtract the transferred amount from the sender's allowance
        allowed[_from][msg.sender] -= _amount;
        // Subtract the transferred amount from the sender's balance
        balances[_from] -= _amount;
        // Add the transferred amount to the recipient's balance
        balances[_to] += _amount;
        // Emit transfer events for both accounts
        emit Transfer(_from, _to, _amount);
    }

    /**
     * @dev Function for retrieving the current allowance for a spender on a specific account.
     * @param _owner Account that has approved the spender.
     * @param _spender Account that is allowed to withdraw funds.
     */
    function allowance(address _owner, address _spender) public view returns (uint) {
        // Return the allowance amount for the spender on the owner's account
        return allowed[_owner][_spender];
    }

    /**
     * @dev Function for retrieving the balance of a specific account.
     * @param _owner Account to retrieve balance for.
     */
    function balanceOf(address _owner) public view returns (uint) {
        // Return the current balance of the account
        return balances[_owner];
    }
}