contract MyContract {
    // Define variables
    uint totalDeposit;
    mapping(address => bool) hasDeposited;

    // Enum for different types of currencies
    enum Currency {ETH, BTC, USDT}

    // Constructor function
    constructor() public {
        totalDeposit = 0;
    }

    // Function to deposit funds into contract
    function deposit(uint amount, Currency currency) public {
        require(amount > 0, "Amount must be greater than 0"); // Check for valid amount
        require(!hasDeposited[msg.sender], "Already deposited"); // Check if user has already deposited
        if(currency == Currency.ETH) {
            msg.sender.transfer(amount); // Transfer ETH to contract
        }
        else if(currency == Currency.BTC) {
            // Code to transfer BTC to contract
        }
        else if(currency == Currency.USDT) {
            // Code to transfer USDT to contract
        }
        totalDeposit = totalDeposit + amount; // Update total deposit amount
        hasDeposited[msg.sender] = true; // Mark user as having deposited
    }

    // Function to withdraw funds from contract
    function withdraw(uint amount, Currency currency) public {
        require(amount > 0, "Amount must be greater than 0"); // Check for valid amount
        require(hasDeposited[msg.sender], "No deposit found"); // Check if user has a deposit
        require(totalDeposit >= amount, "Insufficient funds"); // Check if contract has enough funds
        if(currency == Currency.ETH) {
            msg.sender.transfer(amount); // Transfer ETH to user
        }
        else if(currency == Currency.BTC) {
            // Code to transfer BTC to user
        }
        else if(currency == Currency.USDT) {
            // Code to transfer USDT to user
        }
        totalDeposit = totalDeposit - amount; // Update total deposit amount
        hasDeposited[msg.sender] = false; // Remove user from deposited list
    }

    // Function to check if user has deposited
    function hasUserDeposited(address user) public view returns (bool) {
        return hasDeposited[user];
    }
}