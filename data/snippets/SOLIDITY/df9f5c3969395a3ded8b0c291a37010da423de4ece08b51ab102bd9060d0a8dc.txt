// Structure representing a book
struct Book {
    string name; // name of the book
    address author; // address of the author
    uint price; // price of the book in wei
}
// Contract to manage book purchases
contract BookPurchase {
    // List of books available for purchase
    Book[] public books;
    // Mapping of book count bought by each address
    mapping (address => uint) public booksBought;
    // Event to be emitted when a book is bought
    event BookBought(string bookName, uint price, address buyer);
    // Function to add a new book to the available list
    function addBook(string memory _name, address _author, uint _price) public {
        // Only the owner of the contract can add books
        require(msg.sender == owner);
        // Create a new book instance and add it to the list
        Book memory newBook = Book(_name, _author, _price);
        books.push(newBook);
    }
    // Function to buy a book
    function buyBook(uint _index) public payable {
        // Check if the book with given index exists
        require(_index < books.length);
        // Check if the value sent is equal to the price of the book
        require(msg.value == books[_index].price);
        // Update the number of books bought by the sender
        booksBought[msg.sender]++;
        // Emit an event for the purchase
        emit BookBought(books[_index].name, books[_index].price, msg.sender);
        // Transfer the funds to the author
        books[_index].author.transfer(msg.value);
    }
}