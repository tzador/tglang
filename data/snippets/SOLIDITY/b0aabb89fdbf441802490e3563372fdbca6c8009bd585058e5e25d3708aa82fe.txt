pragma solidity >=0.4.22 <0.8.0;

contract Voting {
    // State variables
    mapping(address => bool) public voters;
    mapping(bytes32 => uint) public votesReceived;
    uint public winningVoteCount;
    bytes32 public winningProposal;

    // Constructor
    constructor() public {
      voters[msg.sender] = true;
    }

    // Functions
    function addVoter(address _voter) public {
        require(msg.sender == address(this), "Only contract owner can add voters");
        voters[_voter] = true;
    }

    function vote(bytes32 _proposal) public {
        require(voters[msg.sender], "Only registered voters can vote");
        votesReceived[_proposal] += 1;

        if (votesReceived[_proposal] > winningVoteCount) {
            winningVoteCount = votesReceived[_proposal];
            winningProposal = _proposal;
        }
    }

    function getWinning() public view returns (bytes32, uint) {
        return (winningProposal, winningVoteCount);
    }
}