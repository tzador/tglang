// This contract represents a decentralized voting system using blockchain technology.
pragma solidity ^0.8.7;

contract VotingSystem {
    // State variables for vote counts and decisions
    bool public votingOpen;
    uint public yesVotes;
    uint public noVotes;
    mapping (address => bool) public hasVoted;
    
    // Event for vote casting
    event VoteCasted(address voter, bool vote);
    
    // Modifier to restrict voting to only registered users
    modifier onlyRegistered() {
        require(hasVoted[msg.sender] == false, "This address has already voted.");
        _;
    }
    
    // Constructor to initialize state variables
    constructor() {
        votingOpen = true;
        yesVotes = 0;
        noVotes = 0;
    }
    
    // Function to cast a vote
    function castVote(bool vote) public onlyRegistered {
        // Only allows voting if the voting period is still open
        require(votingOpen == true, "Voting period has ended.");
        
        // Records the voter as having voted
        hasVoted[msg.sender] = true;
        
        // Increments the appropriate vote count
        if (vote == true) {
            yesVotes++;
        } else {
            noVotes++;
        }
        
        // Emits the VoteCasted event
        emit VoteCasted(msg.sender, vote);
    }
    
    // Function to close the voting period and determine the winner
    function closeVoting() public {
        // Requires the voting period to be open and at least one person to have voted
        require(votingOpen == true, "Voting period has already ended.");
        require(yesVotes + noVotes > 0, "No votes casted yet.");
        
        // Sets the voting period to closed
        votingOpen = false;
        
        // Determines the winner based on the majority vote
        if (yesVotes > noVotes) {
            // TODO: Execute code for yes decision
        } else {
            // TODO: Execute code for no decision
        }
    }
}