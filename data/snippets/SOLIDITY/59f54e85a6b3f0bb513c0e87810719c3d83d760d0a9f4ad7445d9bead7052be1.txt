pragma solidity ^0.8.0;

contract MyContract {
    
    // Variables
    address private owner;
    uint256 public counter;
    mapping(address => uint256) private balances;
    
    // Events
    event Add(address indexed _address, uint256 _amount);
    event Subtract(address indexed _address, uint256 _amount);
    
    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }
    
    // Constructor
    constructor() {
        owner = msg.sender;
    }
    
    // Functions
    function add(uint256 _amount) public {
        counter += _amount;
        balances[msg.sender] += _amount;
        emit Add(msg.sender, _amount);
    }
    
    function subtract(uint256 _amount) public {
        require(counter >= _amount, "Insufficient balance.");
        counter -= _amount;
        balances[msg.sender] -= _amount;
        emit Subtract(msg.sender, _amount);
    }
    
    function transfer(address _to, uint256 _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance.");
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
    }
}