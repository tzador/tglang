// A contract that defines a voting system with multiple candidates
// Contract name: VotingSystem

pragma solidity ^0.8.0;

// Define a struct to store information about a candidate
struct Candidate {
    uint id; // ID number of the candidate
    string name; // Name of the candidate
    string party; // Political party of the candidate
    uint voteCount; // Number of votes received by the candidate
}

contract VotingSystem {
    // Define a mapping to store all the candidates 
    mapping(uint => Candidate) public candidates;

    // Define an event that will be emitted when a new candidate is added
    event NewCandidate(
        uint id,
        string name,
        string party
    );

    // Define a variable to keep track of the total number of candidates
    uint public totalCandidates;

    // Define a modifier to restrict access to the addCandidate function
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    // Define a constructor function to initialize the contract
    constructor() public {
        owner = msg.sender; // Assign the contract deployer as the owner
        totalCandidates = 0;
    }

    // Define a function to add a new candidate
    function addCandidate(string memory _name, string memory _party) public onlyOwner {
        totalCandidates++; // Increment the total number of candidates
        // Create a new candidate and add it to the candidates mapping
        candidates[totalCandidates] = Candidate(totalCandidates, _name, _party, 0);
        // Emit the NewCandidate event 
        emit NewCandidate(totalCandidates, _name, _party);
    }

    // Define a function to cast a vote for a candidate
    function vote(uint _candidateId) public {
        require(!voters[msg.sender]); // Check that the sender has not already voted
        require(_candidateId > 0 && _candidateId <= totalCandidates); // Check that the candidate exists
        candidates[_candidateId].voteCount++; // Increment the vote count for the candidate
        voters[msg.sender] = true; // Record that the sender has voted
    }

    // Define a function to get the winner of the election
    function getWinner() public view returns (string memory) {
        uint maxVotes = 0;
        uint winnerId;
        // Loop through all candidates and find the one with the highest vote count
        for (uint i = 0; i <= totalCandidates; i++) {
            if (candidates[i].voteCount > maxVotes) {
                maxVotes = candidates[i].voteCount;
                winnerId = i;
            }
        }
        return candidates[winnerId].name; // Return the name of the winning candidate
    }
}