// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

//This contract is an example of a complex voting system
contract VotingSystem {

    //Struct that defines a candidate
    struct Candidate {
        address candidateAddress; //Address of the candidate
        string name; // Name of the candidate
        uint votes; //Total number of votes received
    }

    //Array of candidates
    Candidate[] public candidates;

    //Variable to store the total number of votes
    uint public totalVotes;

    //Mapping to keep track of voters and their voted candidate
    mapping(address => address) public voters;

    //Modifier to check if the sender has not voted yet
    modifier notVoted() {
        require(voters[msg.sender] == address(0), "Already voted");
        _;
    }

    //Function to add new candidate to the election
    function addCandidate(address candidateAddress, string memory name) external {
        candidates.push(Candidate(candidateAddress, name, 0));
    }

    //Function to cast vote for a candidate
    function vote(address candidateAddress) external notVoted {
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i].candidateAddress == candidateAddress) {
                candidates[i].votes++;
                totalVotes++;
                voters[msg.sender] = candidateAddress;
            }
        }
    }

    //Function to get the winner of the election
    function getWinner() external view returns (address) {
        //Variable to store the highest number of votes
        uint highestVotes = 0;
        //Variable to store the address of the candidate with the highest number of votes
        address winner;
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i].votes > highestVotes) {
                highestVotes = candidates[i].votes;
                winner = candidates[i].candidateAddress;
            }
        }
        return winner;
    }
}