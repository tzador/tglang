contract MyToken {
    // Declare variable for total supply and assign initial value
    uint256 private totalSupply;
    // Declare mapping for balance of each address
    mapping(address => uint256) private balances;
    // Declare mapping for allowance of transfer
    mapping(address => mapping(address => uint256)) private allowed;
    
    // Declare event for transfer of tokens
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    // Declare event for approval of transfer allowance
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    // Constructor to set initial total supply and assign to contract creator
    constructor(uint256 _initialSupply) public {
        totalSupply = _initialSupply;
        // Assign initial balance to contract creator
        balances[msg.sender] = _initialSupply;
    }
    
    // Function to get total supply of tokens
    function getTotalSupply() public view returns (uint256) {
        return totalSupply;
    }
    
    // Function to get balance of tokens for an address
    function getBalance(address _address) public view returns (uint256) {
        return balances[_address];
    }
    
    // Function to transfer tokens from sender to receiver
    function transfer(address _to, uint256 _value) public returns (bool) {
        // Check if sender has enough tokens
        require(balances[msg.sender] >= _value);
        // Subtract tokens from sender's balance
        balances[msg.sender] -= _value;
        // Add tokens to receiver's balance
        balances[_to] += _value;
        // Emit event for transfer
        emit Transfer(msg.sender, _to, _value);
        // Return success
        return true;
    }
    
    // Function to approve transfer of tokens from sender to another address
    function approve(address _spender, uint256 _value) public returns (bool) {
        // Set allowance for spender from sender
        allowed[msg.sender][_spender] = _value;
        // Emit event for approval
        emit Approval(msg.sender, _spender, _value);
        // Return success
        return true;
    }
    
    // Function to transfer tokens from one address to another on behalf of sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        // Check if sender has enough tokens
        require(balances[_from] >= _value);
        // Check if sender has enough allowance to transfer
        require(allowed[_from][msg.sender] >= _value);
        // Subtract tokens from sender's balance
        balances[_from] -= _value;
        // Add tokens to receiver's balance
        balances[_to] += _value;
        // Subtract allowed amount from sender's allowance
        allowed[_from][msg.sender] -= _value;
        // Emit event for transfer
        emit Transfer(_from, _to, _value);
        // Return success
        return true;
    }
}