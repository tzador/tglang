/*
 * @title Voting
 * @dev smart contract for conducting a simple voting system
 */
contract Voting {

    // array to store the votes
    uint[] public votes;

    // mapping to track if a voter has already voted
    mapping(address => bool) public hasVoted;

    // event to emit when a new vote is casted
    event NewVote(uint vote);

    /*
     * @dev function to cast a new vote
     * @param _vote uint representing the option selected
     */
    function castVote(uint _vote) public {

        // check if the voter has already voted
        require(!hasVoted[msg.sender]);

        // add the vote to the array
        votes.push(_vote);

        // update the hasVoted mapping
        hasVoted[msg.sender] = true;

        // emit the NewVote event
        emit NewVote(_vote);
    }

    /*
     * @dev function to get the winning vote
     * @return uint representing the winning vote
     */
    function getWinningVote() public view returns (uint) {
        
        // check if there are any votes
        require(votes.length > 0);

        // mapping to track the vote counts
        mapping(uint => uint) public voteCounts;

        // loop through the votes array and increment the vote count for each option
        for (uint i = 0; i < votes.length; i++) {
            voteCounts[votes[i]]++;
        }

        // variable to track the winning vote
        uint winningVote;
        // variable to track the highest vote count
        uint highestVoteCount;

        // loop through the voteCounts mapping
        for (uint j = 0; j < votes.length; j++) {
            // check if the vote count is higher than current highest vote count
            if (voteCounts[j] > highestVoteCount) {
                // update the winning vote and highest vote count
                winningVote = j;
                highestVoteCount = voteCounts[j];
            }
        }

        // return the winning vote
        return winningVote;
    }
}
` ` `