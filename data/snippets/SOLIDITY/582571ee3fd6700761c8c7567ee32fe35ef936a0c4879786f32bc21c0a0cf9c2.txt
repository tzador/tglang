pragma solidity 0.8.6;

// This contract represents a basic bank account
contract BankAccount {
    // State variables
    address payable private owner; // Owner of the bank account
    uint private balance; // Current account balance
    uint private minBalance; // Minimum balance required for the account

    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner of this bank account.");
        _;
    }

    event Deposit(address indexed by, uint amount, uint balance);
    event Withdraw(address indexed by, uint amount, uint balance);

    // Constructor function
    constructor(uint _minBalance) {
        owner = payable(msg.sender);
        balance = 0;
        minBalance = _minBalance;
    }

    // Function to deposit money into the account
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0.");
        require(msg.sender == owner, "Only the owner can deposit money into this account.");

        balance += msg.value;
        emit Deposit(msg.sender, msg.value, balance);
    }

    // Function to withdraw money from the account
    function withdraw(uint amount) public onlyOwner {
        require(amount > 0, "Withdrawal amount must be greater than 0.");
        require(balance - amount >= minBalance, "Insufficient funds.");

        owner.transfer(amount);
        balance -= amount;
        emit Withdraw(owner, amount, balance);
    }

    // Function to check the current account balance
    function checkBalance() public view returns (uint) {
        return balance;
    }

    // Function to update the minimum balance required for the account
    function updateMinBalance(uint _minBalance) public onlyOwner {
        require(_minBalance >= 0, "Minimum balance cannot be negative.");

        minBalance = _minBalance;
    }
}