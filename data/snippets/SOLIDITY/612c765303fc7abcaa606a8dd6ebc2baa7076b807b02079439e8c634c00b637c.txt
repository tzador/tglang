pragma solidity ^0.8.0; // version declaration

contract MyContract { // contract declaration

    address owner; // variable declaration

    // event declaration
    event Deposit(address indexed _from, uint256 _value);

    // function modifier
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    // constructor function
    constructor () {
        owner = msg.sender;
    }

    // fallback function
    fallback() external payable {
        emit Deposit(msg.sender, msg.value); // emit event
    }

    // payable function
    function deposit() public payable {
        require(msg.sender == owner); // check condition
        // additional code here
        emit Deposit(msg.sender, msg.value); // emit event
    }

    // view function
    function getContractAddress() public view returns (address) {
        return address(this);
    }

    // pure function
    function addNumbers(uint256 _a, uint256 _b) public pure returns (uint256) {
        return _a + _b;
    }

    // external function
    function sendMessage(address _recipient, string memory _message) external onlyOwner {
        // additional code here
    }
}