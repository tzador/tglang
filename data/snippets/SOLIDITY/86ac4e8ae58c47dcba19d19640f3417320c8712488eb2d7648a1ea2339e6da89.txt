pragma solidity ^0.8.0;

// This contract tracks the number of employees in a company and their salaries

contract EmployeeTracker {
    
    // State variables
    address public owner;
    uint public totalEmployees;
    mapping(address => uint) public employeeSalaries;
    
    // Events
    event NewEmployee(address employee, uint salary);
    event SalaryAdjusted(address employee, uint newSalary);
    event EmployeeRemoved(address employee);
    
    // Constructor function
    constructor() {
        owner = msg.sender; // Sets the contract creator as the owner
    }
    
    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action");
        _; // Continues with the function if the modifier condition is met
    }
    
    // Functions
    
    // Adds a new employee to the mapping and updates the total employee count
    function addEmployee(address newEmployee, uint salary) public onlyOwner {
        employeeSalaries[newEmployee] = salary;
        totalEmployees++;
        emit NewEmployee(newEmployee, salary);
    }
    
    // Adjusts the salary of an employee
    function adjustSalary(address employee, uint newSalary) public onlyOwner {
        employeeSalaries[employee] = newSalary;
        emit SalaryAdjusted(employee, newSalary);
    }
    
    // Removes an employee from the mapping and updates the total employee count
    function removeEmployee(address employee) public onlyOwner {
        delete employeeSalaries[employee]; // Deletes the entry for the employee address
        totalEmployees--;
        emit EmployeeRemoved(employee);
    }
}