// This contract creates a simple decentralized voting system using the Solidity programming language

contract VotingSystem {
    // Variables to track the number of candidates and voters
    uint public totalCandidates;
    uint public totalVoters;

    // Struct to represent a candidate with their name and vote count
    struct Candidate {
        string name;
        uint voteCount;
    }

    // Mapping to store the list of candidates based on their index
    mapping(uint => Candidate) public candidates;

    // Mapping to store the list of voters and their respective votes
    // A voter can only vote once and cannot change their vote once it's casted
    mapping(address => bool) public voters;

    // Event to broadcast when a new candidate is added
    event NewCandidateAdded(string candidateName);

    // Function to add new candidate
    function addCandidate(string memory _name) public {
        require(!voters[msg.sender], "You are already a registered voter and cannot add a candidate.");
        candidates[totalCandidates] = Candidate(_name, 0);
        totalCandidates++;
        emit NewCandidateAdded(_name);
    }

    // Function to cast a vote for a candidate
    function vote(uint _candidateIndex) public {
        require(!voters[msg.sender], "You have already casted your vote.");
        require(_candidateIndex >= 0 && _candidateIndex < totalCandidates, "Candidate does not exist.");
        candidates[_candidateIndex].voteCount++;
        voters[msg.sender] = true;
        totalVoters++;
    }

    // Function to get the total number of votes for a candidate
    function getVoteCount(uint _candidateIndex) public view returns(uint) {
        require(_candidateIndex >= 0 && _candidateIndex < totalCandidates, "Candidate does not exist.");
        return candidates[_candidateIndex].voteCount;
    }
}