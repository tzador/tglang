// Contract for creating a voting system
contract VotingSystem {
    
    // State variables
    mapping(address => bool) public hasVoted;

    // Struct for storing vote details
    struct Vote {
        address voter; // Address of voter
        uint256 choice; // Index of chosen option
        uint256 timestamp; // Time of vote
    }
    
    // Array of votes
    Vote[] public votes;
    
    // Event for when a new vote is cast
    event NewVote(address indexed voter, uint256 indexed choice, uint256 indexed timestamp);

    // Modifier to ensure voter has not already voted
    modifier hasNotVoted() {
        require(!hasVoted[msg.sender], "Already voted!");
        _;
    }
    
    // Function for casting a vote
    function vote(uint256 _choice) public hasNotVoted() {
        // Add new vote to array
        votes.push(Vote({
            voter: msg.sender,
            choice: _choice,
            timestamp: block.timestamp
        }));
        
        // Update voter status
        hasVoted[msg.sender] = true;
        
        // Emit event
        emit NewVote(msg.sender, _choice, block.timestamp);
    }
    
    // Function for getting total number of votes
    function getTotalVotes() public view returns (uint256) {
        return votes.length;
    }
    
    // Function for getting a specific vote by its index in the array
    function getVote(uint256 _index) public view returns (address, uint256, uint256) {
        require(_index < votes.length, "Invalid index!");
        
        Vote memory vote = votes[_index];
        
        return (vote.voter, vote.choice, vote.timestamp);
    }
}