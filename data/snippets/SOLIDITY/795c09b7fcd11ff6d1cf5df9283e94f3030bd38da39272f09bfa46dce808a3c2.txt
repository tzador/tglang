pragma solidity ^0.5.0;  // pragma statement to specify the version of solidity used

contract MyContract {  // contract declaration
    
    uint256 public value;  // declaring state variable with public visibility
    
    constructor(uint256 _value) public {  // constructor to initialize the state variable
        value = _value;
    }
    
    function setValue(uint256 _newValue) public {  // function to set the value of the state variable
        require(_newValue > 0, "Value must be greater than 0");  // require statement to ensure valid input
        value = _newValue;  // setting the value of the state variable
    }
    
    function getValue() public view returns (uint256) {  // function to get the value of the state variable
        return value;
    }
    
    function calculateFibonacci(uint256 _n) public pure returns (uint256) {  // function to calculate the nth Fibonacci number
        uint256 a = 0;  // initializing first number
        uint256 b = 1;  // initializing second number
        
        if (_n == 0) {  // handling case for index 0
            return a;
        }
        
        for (uint256 i = 2; i <= _n; i++) {  // loop to calculate Fibonacci number
            uint256 c = a + b;  // adding previous two numbers to obtain the current one
            a = b;  // updating first number
            b = c;  // updating second number
        }
        
        return b;
    }
    
}