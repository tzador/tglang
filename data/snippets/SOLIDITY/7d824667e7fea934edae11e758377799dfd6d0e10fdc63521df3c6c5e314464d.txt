pragma solidity ^0.8.0;

contract MyContract {
    address owner;
    mapping(address => uint) balances;
    bool paused;
    
    constructor() {
        owner = msg.sender;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner);
        _; // continue executing rest of the function
    }
    
    function withdraw() public onlyOwner {
        uint amount = balances[msg.sender];
        balances[msg.sender] = 0;
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
    }
    
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
    
    function pause() public onlyOwner {
        paused = true;
    }
    
    function unpause() public onlyOwner {
        paused = false;
    }
    
    function transfer(address _to, uint _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        require(!paused, "Transfer is currently paused");
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
    }
}