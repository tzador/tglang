// Contract that implements a basic token with transfer restrictions and minting capabilities

pragma solidity ^0.8.0;

interface IERC20 {
  function totalSupply() external view returns (uint256); // Returns the total token supply
  
  function balanceOf(address account) external view returns (uint256); // Returns the balance of specific account
  
  function transfer(address recipient, uint256 amount) external returns (bool); // Transfers tokens from sender's account to recipient's account
  
  function allowance(address owner, address spender) external view returns (uint256); // Returns the amount of tokens that spender is allowed to spend on behalf of owner
  
  function approve(address spender, uint256 amount) external returns (bool); // Allows spender to spend a specific amount of tokens on behalf of the sender
  
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); // Transfers tokens from sender's account to recipient's account on behalf of spender
  
  event Transfer(address indexed from, address indexed to, uint256 value); // Triggered when tokens are transferred from one address to another
  
  event Approval(address indexed owner, address indexed spender, uint256 value); // Triggered when allowance for a spender is set by an owner
}

contract Token is IERC20 {
  string public name;
  string public symbol;
  uint8 public decimals;
  uint256 public override totalSupply;
  
  mapping(address => uint256) private balanceOf;
  mapping(address => mapping(address => uint256)) private allowance;
  
  constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {
    name = _name;
    symbol = _symbol;
    decimals = _decimals;
    totalSupply = _initialSupply;
    
    // Mint initial supply to contract creator
    balanceOf[msg.sender] = _initialSupply;
    emit Transfer(address(0), msg.sender, _initialSupply);
  }
  
  function balanceOf(address _account) public view override returns (uint256) {
    return balanceOf[_account];
  }
  
  function transfer(address _recipient, uint256 _amount) public override returns (bool) {
    require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
    require(_recipient != address(0), "Invalid recipient address");
    
    // Transfer tokens and update balances
    balanceOf[msg.sender] -= _amount;
    balanceOf[_recipient] += _amount;
    
    emit Transfer(msg.sender, _recipient, _amount);
    return true;
  }
  
  function allowance(address _owner, address _spender) public view override returns (uint256) {
    return allowance[_owner][_spender];
  }
  
  function approve(address _spender, uint256 _amount) public override returns (bool) {
    require(_spender != address(0), "Invalid spender address");
    
    // Update allowance of spender for sender's account
    allowance[msg.sender][_spender] = _amount;
    
    emit Approval(msg.sender, _spender, _amount);
    return true;
  }
  
  function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {
    require(balanceOf[_sender] >= _amount, "Insufficient balance");
    require(allowance[_sender][msg.sender] >= _amount, "Insufficient allowance");
    require(_recipient != address(0), "Invalid recipient address");
    
    // Transfer tokens, update balances and allowance
    allowance[_sender][msg.sender] -= _amount;
    balanceOf[_sender] -= _amount;
    balanceOf[_recipient] += _amount;
    
    emit Transfer(_sender, _recipient, _amount);
    return true;
  }
  
  // Function for minting new tokens, can only be called by owner
  function mint(uint256 _amount) public {
    require(msg.sender == owner, "Only owner can mint tokens");
    
    // Update total supply and account balance for owner
    totalSupply += _amount;
    balanceOf[msg.sender] += _amount;
    
    emit Transfer(address(0), msg.sender, _amount);
  }
  
  // Function for burning tokens, can only be called by owner
  function burn(uint256 _amount) public {
    require(msg.sender == owner, "Only owner can burn tokens");
    require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
    
    // Update total supply and account balance for owner
    totalSupply -= _amount;
    balanceOf[msg.sender] -= _amount;
    
    emit Transfer(msg.sender, address(0), _amount);
  }
}