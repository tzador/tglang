pragma solidity ^0.8.0;
// Contract to create a token and enable transfers
contract Token {
    // Define variables for token name, symbol, total supply
    string public name = "My Token";
    string public symbol = "MYT";
    uint256 public totalSupply = 1000000;

    // Create mapping for balances of accounts
    mapping(address => uint256) public balanceOf;

    // Create mapping for allowances of accounts
    mapping(address => mapping(address => uint256)) public allowance;

    // Create events for transfer and approval
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Set initial balance to total supply and transfer all tokens to contract creator
    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    // Function to transfer tokens to another account
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Not enough tokens!"); // Check if sender has enough tokens
        balanceOf[msg.sender] -= _value; // Subtract tokens from sender
        balanceOf[_to] += _value; // Add tokens to receiver
        emit Transfer(msg.sender, _to, _value); // Emit transfer event
        return true;
    }

    // Function to approve an allowance of tokens to spender
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value; // Set allowance for spender
        emit Approval(msg.sender, _spender, _value); // Emit approval event
        return true;
    }

    // Function to transfer tokens from one account to another
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from], "Not enough tokens!"); // Check if _from has enough tokens
        require(_value <= allowance[_from][msg.sender], "Not approved!"); // Check if sender has enough allowance
        balanceOf[_from] -= _value; // Subtract tokens from sender
        balanceOf[_to] += _value; // Add tokens to receiver
        allowance[_from][msg.sender] -= _value; // Subtract allowance from sender
        emit Transfer(_from, _to, _value); // Emit transfer event
        return true;
    }
}