pragma solidity ^0.8.0; //version declaration

//Contract defining an ERC20 token with import of relevant interfaces
contract ERC20Token {
    string public name;
    string public symbol;
    uint8 public decimals;
    
    //using SafeMath library for arithmetic operations
    using SafeMath for uint256;

    //State variables mapping
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    //Events for transfer and approval
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    //Constructor function
    constructor() public {
        name = "MyToken";
        symbol = "MTK";
        decimals = 18;
        uint256 _totalSupply = 1000000 * 10 ** uint256(decimals); //initial supply of 1000000 tokens 
        balanceOf[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    //Transfer function with input validation conditions 
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value); //sender must have enough tokens to transfer
        require(_to != address(0)); //address cannot be null
        require(balanceOf[_to] + _value >= balanceOf[_to]); //overflow protection
        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); //subtract tokens from sender's balance
        balanceOf[_to] = balanceOf[_to].add(_value); //add tokens to receiver's balance
        emit Transfer(msg.sender, _to, _value); //emit transfer event
        return true;
    }

    //Approval function for setting allowance
    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(_spender != address(0)); //address cannot be null
        allowance[msg.sender][_spender] = _value; //set allowance
        emit Approval(msg.sender, _spender, _value); //emit approval event
        return true;
    }

    //TransferFrom function for transferring from allowance
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value); //sender must have enough tokens to transfer
        require(allowance[_from][msg.sender] >= _value); //msg.sender must have enough allowance
        require(_to != address(0)); //address cannot be null
        require(balanceOf[_to] + _value >= balanceOf[_to]); //overflow protection
        balanceOf[_from] = balanceOf[_from].sub(_value); //subtract tokens from sender's balance
        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); //subtract tokens from msg.sender's allowance
        balanceOf[_to] = balanceOf[_to].add(_value); //add tokens to receiver's balance
        emit Transfer(_from, _to, _value); //emit transfer event
        return true;
    }
}

//SafeMath library for arithmetic operations with input validation conditions
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        require(c >= a); //overflow protection
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a); //must not result in negative number
        return a - b;
    }
}

//Interface for ERC20 token functions
interface ERC20Hassan {
    function transfer(address _to, uint256 _value) external returns (bool success);
    function approve(address _spender, uint256 _value) external returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);
}