// This contract creates a token called MyToken with a fixed supply

pragma solidity ^0.8.0;

contract MyToken {
    uint public totalSupply; // This variable will store the total supply of tokens
    mapping(address => uint) public balances; // This mapping will store the balances of each address

    // This event will be triggered when tokens are transferred
    event Transfer(address indexed _from, address indexed _to, uint _value);

    // This constructor will initialize the total supply and assign the entire amount to the contract creator
    constructor(uint _initialSupply) {
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply;
    }

    // This function will allow users to transfer their tokens to another address
    function transfer(address _to, uint _value) public returns (bool) {
        // Check if the sender has enough tokens to transfer
        require(balances[msg.sender] >= _value, "Insufficient balance");
        
        // Reduce the sender's balance and increase the recipient's balance
        balances[msg.sender] -= _value;
        balances[_to] += _value;

        // Trigger the transfer event
        emit Transfer(msg.sender, _to, _value);

        // Return true to indicate a successful transfer
        return true;
    }

    // This function will allow users to approve another address to spend a specific amount of their tokens
    function approve(address _spender, uint _value) public returns (bool) {
        // Set the allowance for the specified spender for the sender's tokens
        allowances[msg.sender][_spender] = _value;

        // Return true to indicate a successful approval
        return true;
    }

    // This function will allow a spender to transfer the sender's tokens on their behalf
    function transferFrom(address _from, address _to, uint _value) public returns (bool) {
        // Check if the sender has enough allowance to transfer the specified amount
        require(allowances[_from][msg.sender] >= _value, "Insufficient allowance");
        
        // Check if the sender has enough tokens
        require(balances[_from] >= _value, "Insufficient balance");

        // Reduce the sender's allowance and balance and increase the recipient's balance
        allowances[_from][msg.sender] -= _value;
        balances[_from] -= _value;
        balances[_to] += _value;

        // Trigger the transfer event
        emit Transfer(_from, _to, _value);

        // Return true to indicate a successful transfer
        return true;
    }

    // This mapping will store the allowances for each address to spend another's tokens
    mapping(address => mapping(address => uint)) public allowances;
}