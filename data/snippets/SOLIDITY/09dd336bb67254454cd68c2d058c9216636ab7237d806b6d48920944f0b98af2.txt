/**
 * @title Example Contract
 * @dev This contract is a simple example to showcase the use of Solidity.
 */
contract ExampleContract {
    
    // Variables
    uint256 public totalSupply; // This variable will hold the total supply of tokens
    address public owner; // This variable will hold the address of the contract owner
    string public constant name = "Example Token"; // This variable will hold the name of the token
    string public constant symbol = "EXT"; // This variable will hold the symbol of the token
    uint8 public constant decimals = 18; // This variable will hold the number of decimal places for the token
    
    // Events
    event Transfer(address indexed _from, address indexed _to, uint256 _value); // This event will be emitted when tokens are transferred
    event Approval(address indexed _owner, address indexed _spender, uint256 _value); // This event will be emitted when a user approves another address to spend their tokens
    
    // Mappings
    mapping(address => uint256) public balanceOf; // This mapping will hold the balances of users
    mapping(address => mapping(address => uint256)) public allowance; // This mapping will hold the allowances for users to spend tokens on behalf of other addresses
    
    // Constructor
    constructor(uint256 _initialSupply) public {
        totalSupply = _initialSupply;
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }
    
    // Getters and Setters
    
    /**
     * @dev Getter function for name variable.
     * @return string representing the name of the token.
     */
    function getName() external view returns(string) {
        return name;
    }
    
    /**
     * @dev Getter function for symbol variable.
     * @return string representing the symbol of the token.
     */
    function getSymbol() external view returns(string) {
        return symbol;
    }
    
    /**
     * @dev Getter function for decimals variable.
     * @return uint8 representing the number of decimal places for the token.
     */
    function getDecimals() external view returns(uint8) {
        return decimals;
    }
    
    // Token Functions
    
    /**
     * @dev Function to transfer tokens from one address to another.
     * @param _to address The address to transfer tokens to.
     * @param _value uint256 The amount of tokens to transfer.
     */
    function transfer(address _to, uint256 _value) external returns(bool) {
        require(_to != address(0)); // Make sure the _to address is not the null address
        require(balanceOf[msg.sender] >= _value); // Make sure the sender has enough tokens to transfer
        require(balanceOf[_to] + _value >= balanceOf[_to]); // Avoid overflow when adding tokens to _to address balance
        
        balanceOf[msg.sender] -= _value; // Subtract tokens from sender's balance
        balanceOf[_to] += _value; // Add tokens to _to address balance
        
        emit Transfer(msg.sender, _to, _value); // Emit Transfer event
        
        return true;
    }
    
    /**
     * @dev Function for a user to approve another address to spend tokens on their behalf.
     * @param _spender address The address to be approved.
     * @param _value uint256 The amount of tokens to approve.
     */
    function approve(address _spender, uint256 _value) external returns(bool) {
        allowance[msg.sender][_spender] = _value; // Set approved amount for _spender address
        
        emit Approval(msg.sender, _spender, _value); // Emit Approval event
        
        return true;
    }
    
    /**
     * @dev Function for a user to transfer tokens from another address on their behalf.
     * @param _from address The address tokens will be transferred from.
     * @param _to address The address to transfer tokens to.
     * @param _value uint256 The amount of tokens to transfer.
     */
    function transferFrom(address _from, address _to, uint256 _value) external returns(bool) {
        require(_to != address(0)); // Make sure the _to address is not the null address
        require(balanceOf[_from] >= _value); // Make sure the _from address has enough tokens to transfer
        require(allowance[_from][msg.sender] >= _value); // Make sure msg.sender is approved to spend at least _value tokens on behalf of _from
        require(balanceOf[_to] + _value >= balanceOf[_to]); // Avoid overflow when adding tokens to _to address balance
        
        balanceOf[_from] -= _value; // Subtract tokens from _from address balance
        balanceOf[_to] += _value; // Add tokens to _to address balance
        allowance[_from][msg.sender] -= _value; // Subtract approved amount from allowance for msg.sender and _from address
        
        emit Transfer(_from, _to, _value); // Emit Transfer event
        
        return true;
    }
    
}