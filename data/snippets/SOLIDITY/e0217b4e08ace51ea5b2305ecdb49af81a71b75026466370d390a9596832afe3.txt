contract ModeratorExample {
    
    address public owner; // Publicly accessible owner of the contract
    
    mapping(address => bool) public moderators; // Mapping of addresses to moderator status
    
    event ModeratorAdded(address account); // Event triggered when a new moderator is added
    event ModeratorRemoved(address account); // Event triggered when a existing moderator is removed
    
    modifier onlyOwner() { // Modifier to restrict access to only the owner
        require(msg.sender == owner);
        _;
    }
    
    modifier onlyModerators() { // Modifier to restrict access to only moderators
        require(moderators[msg.sender] == true);
        _;
    }
    
    // Constructor function to set the owner of the contract
    constructor() public {
        owner = msg.sender;
    }
    
    // Function to add a new moderator
    function addModerator(address account) public onlyOwner {
        moderators[account] = true;
        emit ModeratorAdded(account);
    }
    
    // Function to remove an existing moderator
    function removeModerator(address account) public onlyOwner {
        moderators[account] = false;
        emit ModeratorRemoved(account);
    }
    
    // Publicly accessible function that can be called by both owner and moderators
    function sendMessage(string memory message) public onlyModerators() {
        // Code to send the message goes here
    }
    
}