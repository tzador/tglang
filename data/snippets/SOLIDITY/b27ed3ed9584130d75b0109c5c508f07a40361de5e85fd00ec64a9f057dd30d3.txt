pragma solidity ^0.5.0; // Specifies the compiler version

// Contract to keep track of user balances
contract BalanceTracker {
  mapping(address => uint) public balances; // Creates a mapping of address to balance

  // Event that is emitted when a user's balance is updated
  event BalanceUpdated(address user, uint updatedBalance);

  // Function to deposit ether into the contract
  function deposit() public payable {
    require(msg.value > 0, "Must deposit a positive amount");

    // Updates the user's balance
    balances[msg.sender] += msg.value;

    // Emits the BalanceUpdated event
    emit BalanceUpdated(msg.sender, balances[msg.sender]);
  }

  // Function to withdraw ether from the contract
  function withdraw(uint amount) public {
    require(amount > 0, "Must withdraw a positive amount");
    require(amount <= balances[msg.sender], "Insufficient balance");

    // Updates the user's balance
    balances[msg.sender] -= amount;

    // Transfers the requested amount to the user's address
    msg.sender.transfer(amount);

    // Emits the BalanceUpdated event
    emit BalanceUpdated(msg.sender, balances[msg.sender]);
  }

  // Function to check a user's balance
  function getBalance(address user) public view returns (uint) {
    return balances[user];
  }
}