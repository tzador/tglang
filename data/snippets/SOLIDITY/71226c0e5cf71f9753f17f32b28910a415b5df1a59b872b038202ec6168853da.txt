// Abstract contract to handle ownership
contract Ownable {
    // Variable to store the owner's address
    address owner;

    // Event to track ownership transfer
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    // Constructor to set the owner's address
    constructor() public {
        owner = msg.sender;
    }

    // Modifier to allow only the owner to call a function
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    // Function to transfer ownership
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Invalid address.");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

// Contract that inherits from the Ownable abstract contract
contract ComplexContract is Ownable {
    // Variable to store a mapping of addresses and balances
    mapping(address => uint) balances;

    // Event to track balance updates
    event BalanceUpdated(address indexed account, uint newBalance);

    // Function to deposit funds and update the balance
    function deposit() public payable {
        require(msg.value > 0, "Must send funds to make a deposit.");
        balances[msg.sender] = balances[msg.sender] + msg.value;
        emit BalanceUpdated(msg.sender, balances[msg.sender]);
    }

    // Function to withdraw funds and update the balance
    function withdraw(uint amount) public {
        require(balances[msg.sender] >= amount, "Insufficient funds.");
        balances[msg.sender] = balances[msg.sender] - amount;
        msg.sender.transfer(amount);
        emit BalanceUpdated(msg.sender, balances[msg.sender]);
    }
}