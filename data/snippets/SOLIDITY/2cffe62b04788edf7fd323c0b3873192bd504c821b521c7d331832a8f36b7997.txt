pragma solidity ^0.8.4;

contract Voting {
    // array of candidates
    string[] public candidates;

    // mapping of candidate to their vote count
    mapping(string => uint) public votes;

    // constructor function to initialize candidates
    constructor(string[] memory _candidates) {
        candidates = _candidates;
    }

    // function to cast vote for a candidate
    function vote(string memory candidate) public {
        // check if candidate is valid
        require(validCandidate(candidate));

        // increase count of votes for candidate
        votes[candidate]++;
    }

    // function to check if candidate is valid
    function validCandidate(string memory candidate) public view returns (bool) {
        // loop through candidates to check if candidate is valid
        for (uint i = 0; i < candidates.length; i++) {
            if (keccak256(bytes(candidates[i])) == keccak256(bytes(candidate))) {
                // if candidate is valid, return true
                return true;
            }
        }

        // if candidate is invalid, return false
        return false;
    }

    // function to get total votes for a candidate
    function totalVotesFor(string memory candidate) public view returns (uint) {
        // check if candidate is valid
        require(validCandidate(candidate));

        // return their vote count
        return votes[candidate];
    }
}