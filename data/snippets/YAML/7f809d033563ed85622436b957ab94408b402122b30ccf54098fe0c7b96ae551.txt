# This is a YAML code snippet for creating a complex Kubernetes deployment configuration
# It includes multiple containers, volumes, and environment variables
# This snippet assumes a basic knowledge of Kubernetes and its configuration
apiVersion: apps/v1 # version of the Kubernetes API
kind: Deployment # type of Kubernetes resource
metadata:
  name: web-deployment # name of the deployment
  labels:
    app: web # label to identify the deployment
spec:
  replicas: 3 # number of replicas of the deployment
  selector:
    matchLabels:
      app: web # label to match with the pods
  template:
    metadata:
      labels:
        app: web # labels of the pods
    spec:
      containers:
      - name: nginx # name of the first container
        image: nginx:latest # Docker image to use
        ports:
        - containerPort: 80 # port to expose in the container
        volumeMounts:
        - name: config-vol # name of the volume
          mountPath: /etc/nginx/conf.d # path in the container to mount to
      - name: mysql # name of the second container
        image: mysql:latest # Docker image to use
        ports:
        - containerPort: 3306 # port to expose in the container
        volumeMounts:
        - name: data-vol # name of the volume
          mountPath: /var/lib/mysql # path in the container to mount to
      volumes:
      - name: config-vol # name of the volume
        configMap:
          name: nginx-config # name of the config map to use
      - name: data-vol # name of the volume
        persistentVolumeClaim:
          claimName: mysql-data # name of the persistent volume claim to use
      - name: shared-vol # name of the volume
        emptyDir: {} # creates an empty directory in the container
      containers:
      - name: web-app # name of the first container
        image: web-app:latest # Docker image to use
        ports:
        - containerPort: 8080 # port to expose in the container
        env: # environment variables for the container
        - name: DB_HOST
          value: "mysql" # connects to the MySQL container using Kubernetes DNS
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-creds # name of the secret to use
              key: username # key to retrieve value from
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-creds # name of the secret to use
              key: password # key to retrieve value from
      volumes:
      - name: shared-vol # name of the volume
        emptyDir: {} # creates an empty directory in the container to be shared between all containers