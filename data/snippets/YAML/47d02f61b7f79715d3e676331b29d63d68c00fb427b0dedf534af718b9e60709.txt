# YAML code snippet with comments and complex data structures

# Initialize a YAML document with a list of complex objects
---
- name: John Smith
  age: 35
  hobbies:
    - coding
    - hiking
  address:
    street: 123 Main St
    city: New York
    state: NY
    zipcode: 10001
  job: Software Engineer
  salary: $100,000
- name: Jane Doe
  age: 28
  hobbies:
    - painting
    - reading
  address:
    street: 456 Elm St
    city: Los Angeles
    state: CA
    zipcode: 90001
  job: Graphic Designer
  salary: $80,000

# Create a mapping of key-value pairs for a specific person's information
person: &person
  name: Michael Johnson
  age: 42
  hobbies:
    - cooking
    - golf
  address:
    street: 789 Oak St
    city: Chicago
    state: IL
    zipcode: 60007
  job: Chef
  salary: $120,000

# Use the previously defined mapping for a new person, with additional information
- <<: *person
  name: Emily Brown
  age: 32
  hobbies:
    - gardening
    - yoga
  job: Yoga Instructor
  salary: $70,000

# Define a dictionary for options related to a project
options:
  project_name: My Project
  deadline: 2022-01-01
  team_members:
    - John Smith
    - Jane Doe
  tasks:
    - name: Design
      completed: true
    - name: Development
      completed: false
    - name: Testing
      completed: false
    - name: Deployment
      completed: false

# Add conditional logic for the tasks in the options dictionary
{% if options.tasks|length > 0 %}
tasks:
{% for task in options.tasks %}
  - name: {{ task.name }}
    completed: {{ task.completed }}
{% endfor %}
{% endif %}

# Use YAML anchors and aliases to reduce repetition
team_members: &team
  - John Smith
  - Jane Doe
task_names: &task_names
  - Design
  - Development
  - Testing
  - Deployment

# Use the anchors and aliases to define tasks for the options dictionary
tasks:
{% for name in *task_names %}
  - name: {{ name }}
    assigned_to: *team
    completed: false
{% endfor %}

# Define a complex nested data structure with maps, lists, and scalars
---
project:
  name: My Project
  teams:
    - name: Design Team
      members:
        - John Smith
        - Jane Doe
      tasks:
        - name: UI Design
          deadline: 2021-01-01
          completed: true
        - name: UX Design
          deadline: 2021-02-01
          completed: false
    - name: Development Team
      members:
        - Michael Johnson
        - Emily Brown
      tasks:
        - name: Frontend Development
          deadline: 2021-03-01
          completed: true
        - name: Backend Development
          deadline: 2021-04-01
          completed: false
  options: *options

# Use a YAML tag to specify a specific data type
tag: !str 1234

# Use a YAML alias to refer to the same data in multiple places
alias: *team # will refer to the same list of team members as defined in the "team_members" mapping

# Use a block scalar to preserve new lines and special characters in a long string
description: >
  The project aims to create a user-friendly and visually appealing website for a
  company's brand. It should be responsive and accessible for all users.
  Features include a blog, contact form, and customer testimonials.

# Add a custom YAML directive to specify encoding for non-ASCII characters
%YAML 1.2
%ENCODING UTF-8

# Use a single quote to preserve literal values and prevent interpretation of special characters
message: 'The project is going well and we are on track to meet the deadline by {{ options.deadline }}. Keep up the good work!'

# Use a YAML flow sequence to define a list with specific formatting
flow_sequence: !<flow>
  [1, 2, 3, 4, 5]

# Use a YAML block mapping to define a mapping with specific formatting
block_mapping: !<block>
  key1: value1
  key2: value2
  key3: value3

# Use a YAML literal block scalar to preserve multiple lines of text without interpreting new lines
literal_block: |
  Lorem ipsum dolor sit amet,
  consectetur adipiscing elit,
  sed do eiusmod tempor incididunt
  ut labore et dolore magna aliqua.