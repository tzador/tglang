# This YAML document contains complex data structures and configurations
# The output of this code snippet is an example of how a YAML document can look like

# Set up data types
int: &integer 5
float: &floating 3.14159
string: &text "Hello World!"

# Define nested objects
nested:
  - one: &first
    name: "John"
    age: 25
  - two: &second
    name: "Jane"
    age: 30

# Define configurations for different environments
production:
  <<: *first
  server:
    host: "example.com"
    port: 8080
  database:
    name: "prod_database"
    user: "prod_user"
    password: "prod_password"

development:
  <<: *second
  server:
    host: "localhost"
    port: 3000
  database:
    name: "dev_database"
    user: "dev_user"
    password: "dev_password"
    
# Define conditional statements
can_vote: &canVote
  # Checks if the person's age is greater than or equal to 18 
  equal 18: (*first, *second)

# Define arrays with different data types
# The first and last elements are pointers to the previously defined data types
array:
  - *integer
  - *floating
  - "This YAML document has multiple data types"
  - *text
  - *canVote
  - false
  - null
  - [1, 2, 3]
  - nested: *second
  - object:
      <<: *first
      job: "Software Developer"

# Define comments within the code
# This YAML document showcases the flexibility and complexity of YAML syntax
# Comments can be added using the # symbol at the beginning of a line

# Output the YAML document as a string
yaml: |
  int: *integer
  float: *floating
  string: *text
  nested: *first
  development:
    <<: *second
  array: *canVote
  yaml: *yaml
  # Prints 'Hello World!' as the string value of the 'string' key

# End of code snippet