####
# This is a complex YAML code snippet.
# It includes multiple nested data structures and uses advanced YAML syntax.
# The output is a dictionary with multiple key-value pairs.
####

dict_example: &dict # creating anchor for dictionary

  # keys with scalar values
  key_1: "This is a scalar value"
  key_2: 123
  key_3: true
  
  # keys with lists as values
  key_4:
    - "Item 1"
    - "Item 2"
    - "Item 3"
  
  # keys with nested dictionaries as values
  key_5:
    key_5_1: "This is a nested dictionary"
    key_5_2:
      key_5_2_1: 456
      key_5_2_2:
        - "Nested list item 1"
        - "Nested list item 2"
  
  # keys with anchor references
  key_6: *dict # using anchor reference to refer to the previously defined dictionary
  
  # keys with complex expressions as values
  key_7: 
    !<tag:example.com,2019:example/complex>
    - "Expression 1"
    - 
      - "Sub-expression 1"
      - "Sub-expression 2"
    - # multiline expression
      "Expression 2"
      |
        This is a long
        multiline
        expression
  
  # keys with conditional expressions
  key_8: 
    $if: 
      condition: key_3 == true # checking if key_3 has a true value
      then: "Key 3 is true"
      else: "Key 3 is false"
  
  # keys with merge keys
  key_9: 
    <<: *dict # using merge key to merge with the previously defined dictionary
  
  # keys with complicated mappings
  key_10: 
    key_10_1: 
      $map: 
        - "Map key 1"
        - "Map value 1"
        - "Map key 2"
        - "Map value 2"
    key_10_2: 
      $merge: 
        - key_6 # using merge key to merge with previously defined dictionary
        - 
          key_10_1:
            $delete: true # deleting the key-value pair created in key_10_1
        - 
          key_5: # creating a new nested dictionary
            key_5_3: "New nested dictionary item" 
  
  # keys with reserved keywords
  yes: "This is a reserved keyword in YAML and needs to be quoted"
  null: null # null value
  key: !!int 123 # forced type conversion to integer
  
  # key-value pairs with non-string keys
  123:
    - "This is a key-value pair with a non-string key"
  
  # keys with dot notation
  parent.child: "This is a key with dot notation"
  
  # keys with bracket notation
  parent[child]: "This is a key with bracket notation"

# final dictionary output
key_1: "This is a scalar value"
key_2: 123
key_3: true
key_4:
  - "Item 1"
  - "Item 2"
  - "Item 3"
key_5:
  key_5_1: "This is a nested dictionary"
  key_5_2:
    key_5_2_1: 456
    key_5_2_2:
      - "Nested list item 1"
      - "Nested list item 2"
key_6: *dict
key_7:
  !<tag:example.com,2019:example/complex>
  - "Expression 1"
  -
    - "Sub-expression 1"
    - "Sub-expression 2"
  - # multiline expression
    "Expression 2"
    |
      This is a long
      multiline
      expression
key_8: 
  $if: 
    condition: key_3 == true # checking if key_3 has a true value
    then: "Key 3 is true"
    else: "Key 3 is false"
key_9:
  <<: *dict
key_10:
  key_10_1:
    $map:
      - "Map key 1"
      - "Map value 1"
      - "Map key 2"
      - "Map value 2"
  key_10_2:
    $merge:
      - key_6 # using merge key to merge with previously defined dictionary
      -
        key_10_1:
          $delete: true # deleting the key-value pair created in key_10_1
      - 
        key_5: # creating a new nested dictionary
          key_5_3: "New nested dictionary item"
yes: "This is a reserved keyword in YAML and needs to be quoted"
null: null # null value
key: !!int 123 # forced type conversion to integer
123:
  - "This is a key-value pair with a non-string key"
parent.child: "This is a key with dot notation"
parent[child]: "This is a key with bracket notation"