// This is a program that performs a binary search on a sorted array.

#include <iostream>
using namespace std;

/***
 * Binary Search function
 * @param arr - the sorted array
 * @param start - starting index of the array
 * @param end - ending index of the array
 * @param target - the target element to be searched for in the array
 * @return - index of the target element if found, -1 if not found
 */
int binarySearch(int arr[], int start, int end, int target) {
    // Base case
    if (end >= start) {
        // Calculate mid index of the array
        int mid = start + (end - start) / 2;

        // If target is present at mid, return mid index
        if (arr[mid] == target)
            return mid;

        // If target is smaller than mid element, it can only be present in the left subarray
        if (arr[mid] > target)
            return binarySearch(arr, start, mid - 1, target);

        // If target is greater than mid element, it can only be present in the right subarray
        return binarySearch(arr, mid + 1, end, target);
    }

    // Element is not present in the array
    return -1;
}

int main() {
    // Initialize the sorted array
    int arr[] = { 1, 3, 5, 7, 9, 11, 13, 15 };

    // Get the size of the array
    int size = sizeof(arr) / sizeof(arr[0]);

    // Target element to be searched for
    int target = 7;

    // Perform binary search on the array
    int result = binarySearch(arr, 0, size - 1, target);

    // Print result
    if (result == -1)
        cout << "Element is not present in the array." << endl;
    else
        cout << "Element is present at index " << result << "." << endl;

    return 0;
}