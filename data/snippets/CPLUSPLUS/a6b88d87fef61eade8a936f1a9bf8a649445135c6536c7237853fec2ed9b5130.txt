// This program sorts an array of integers in descending order using the quicksort algorithm

#include <iostream>
using namespace std;

// function to partition the array and return the index of the pivot element
int partition(int arr[], int low, int high) {

    int pivot = arr[high]; // pivot element is chosen as the last element
    int i = low - 1; // index of smaller element

    for (int j = low; j < high; j++) {
        // if current element is smaller than or equal to pivot element, swap it with the smaller element
        if (arr[j] <= pivot) {
            i++; // increment index of smaller element
            swap(arr[i], arr[j]);
        }
    }
    // swap the pivot element with the element at the index of the smaller element
    swap(arr[i + 1], arr[high]);
    return (i + 1); // return the index of the pivot element
}

// function to implement quicksort
void quicksort(int arr[], int low, int high) {

    if (low < high) {
        // partition the array
        int pivotIndex = partition(arr, low, high);
        // recursively call quicksort on the left and right subarrays
        quicksort(arr, low, pivotIndex - 1);
        quicksort(arr, pivotIndex + 1, high);
    }
}

int main() {

    int arr[] = { 5, 3, 2, 7, 1, 9, 4, 6, 8 }; // example array
    int n = sizeof(arr) / sizeof(arr[0]); // calculate size of array

    // call quicksort function to sort the array in descending order
    quicksort(arr, 0, n - 1);

    // print the sorted array
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }

    return 0;
}