// This code snippet generates a binary search tree and performs various operations on it
#include <iostream>
using namespace std;

// class to create a node in the binary search tree
class Node {
public:
    int data;
    Node* left;
    Node* right;
    // constructor to initialize the node with given data
    Node(int data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

// function to insert a new node into the binary search tree
void insertNode(Node* root, int data) {
    // if tree is empty, create a new node and make it the root
    if (root == NULL) {
        root = new Node(data);
        return;
    }
    // if data is less than root, insert in the left subtree
    if (data < root->data) {
        if (root->left == NULL) {
            root->left = new Node(data);
        }
        else {
            insertNode(root->left, data);
        }
    }
    // if data is greater than root, insert in the right subtree
    else if (data > root->data) {
        if (root->right == NULL) {
            root->right = new Node(data);
        }
        else {
            insertNode(root->right, data);
        }
    }
    // if data is equal to root, do nothing
    else {
        return;
    }
}

// function to find the minimum element in a binary search tree
int findMin(Node* root) {
    if (root == NULL) {
        return -1;
    }
    // the minimum element of a binary search tree will always be in the leftmost node
    while (root->left != NULL) {
        root = root->left;
    }
    return root->data;
}

// function to find the maximum element in a binary search tree
int findMax(Node* root) {
    if (root == NULL) {
        return -1;
    }
    // the maximum element of a binary search tree will always be in the rightmost node
    while (root->right != NULL) {
        root = root->right;
    }
    return root->data;
}

// function to search for a specific element in a binary search tree
bool searchNode(Node* root, int data) {
    if (root == NULL) {
        return false;
    }
    // if data is less than root, search in the left subtree
    if (data < root->data) {
        return searchNode(root->left, data);
    }
    // if data is greater than root, search in the right subtree
    else if (data > root->data) {
        return searchNode(root->right, data);
    }
    // if data is equal to root, return true
    else {
        return true;
    }
}

// function to delete a node from the binary search tree
Node* deleteNode(Node* root, int data) {
    if (root == NULL) {
        return root;
    }
    // if data is less than root, delete from the left subtree
    if (data < root->data) {
        root->left = deleteNode(root->left, data);
    }
    // if data is greater than root, delete from the right subtree
    else if (data > root->data) {
        root->right = deleteNode(root->right, data);
    }
    // if data is equal to root
    else {
        // if node has no child or only one child, replace with its child or NULL respectively
        if (root->left == NULL) {
            Node* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            Node* temp = root->left;
            free(root);
            return temp;
        }
        // if node has two children, find the minimum element in the right subtree and replace the root with it
        Node* temp = new Node(findMin(root->right));
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// function to print the binary search tree in pre-order traversal
void printPreorder(Node* root) {
    if (root == NULL) {
        return;
    }
    // print the root
    cout << root->data << " ";
    // print the left subtree
    printPreorder(root->left);
    // print the right subtree
    printPreorder(root->right);
}

// function to print the binary search tree in in-order traversal
void printInorder(Node* root) {
    if (root == NULL) {
        return;
    }
    // print the left subtree
    printInorder(root->left);
    // print the root
    cout << root->data << " ";
    // print the right subtree
    printInorder(root->right);
}

// function to print the binary search tree in post-order traversal
void printPostorder(Node* root) {
    if (root == NULL) {
        return;
    }
    // print the left subtree
    printPreorder(root->left);
    // print the right subtree
    printPreorder(root->right);
    // print the root
    cout << root->data << " ";
}

// main function to create and manipulate a binary search tree
int main() {
    // create an empty tree
    Node* root = NULL;
    // insert nodes into the tree
    insertNode(root, 50);
    insertNode(root, 30);
    insertNode(root, 70);
    insertNode(root, 90);
    insertNode(root, 20);
    insertNode(root, 40);
    insertNode(root, 60);
    insertNode(root, 80);
    // print the tree in pre-order
    cout << "Pre-order traversal:" << endl;
    printPreorder(root);
    cout << endl;
    // print the tree in in-order
    cout << "In-order traversal:" << endl;
    printInorder(root);
    cout << endl;
    // print the tree in post-order
    cout << "Post-order traversal:" << endl;
    printPostorder(root);
    cout << endl;
    // search for element 40 in the tree
    if (searchNode(root, 40)) {
        cout << "Found element 40 in the tree." << endl;
    }
    else {
        cout << "Element 40 not found in the tree." << endl;
    }
    // delete element 30 from the tree
    root = deleteNode(root, 30);
    // print the tree in in-order after deletion
    cout << "In-order traversal after deleting element 30:" << endl;
    printInorder(root);
    return 0;
}