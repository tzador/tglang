#include <iostream>
#include <vector>
using namespace std;

// This function implements the quicksort algorithm
void quicksort(vector<int> &arr, int left, int right) {

    // base case: the array is already sorted
    if (right <= left) {
        return;
    }

    // choose a pivot element
    int pivot = arr[right];

    // create two partitions: elements smaller than pivot and elements greater than pivot
    int l = left, r = right - 1;
    while (l <= r) {
        if (arr[l] > pivot && arr[r] < pivot) {
            swap(arr[l], arr[r]);
            l++;
            r--;
        }
        if (arr[l] <= pivot) {
            l++;
        }
        if (arr[r] >= pivot) {
            r--;
        }
    }

    // swap pivot element with the leftmost element in the right partition (which is now the pivot's correct position)
    swap(arr[l], arr[right]);

    // recursively call quicksort on the two partitions
    quicksort(arr, left, l - 1);
    quicksort(arr, l + 1, right);
}

int main() {

    // initialize an unsorted array
    vector<int> arr = {5, 3, 1, 4, 2};

    // call quicksort function to sort the array
    quicksort(arr, 0, arr.size() - 1);

    // print the sorted array
    for (int i = 0; i < arr.size(); i++) {
        cout << arr[i] << " ";
    }

    return 0;
}