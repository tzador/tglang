/**
 * This is a class that represents a tree in a data structure.
 * It has various functions for operations on the tree.
 */
class Tree{
private:
    int size_; // size of the tree
    Node* root_; // pointer to the root node

public:
    /**
     * Constructor function for the tree class.
     * Takes in the size of the tree and initializes it.
     * @param size The size of the tree
     */
    Tree(int size){
        size_ = size;
        root_ = nullptr;
    }

    /**
     * Function to add a node to the tree.
     * Takes in the value to be added and the parent node's value.
     * @param val The value to be added
     * @param parent The parent node's value
     */
    void addNode(int val, int parent){
        Node* newNode = new Node(val); // create a new node with given value
        Node* temp = findNode(root_, parent); // find the parent node in the tree
        if(temp != nullptr){ // if found parent node
            if(temp->left == nullptr){ // if left child of parent is null
                temp->left = newNode; // add new node as left child
            }
            else{ // if left child is not null
                temp->right = newNode; // add new node as right child
            }
            cout<<"Node successfully added"<<endl; // print success message
        }
        else{ // if parent node not found
            cout<<"Parent node not found"<<endl; // print error message
        }
    }

    /**
     * Function to search for a node in the tree.
     * Takes in the value to be searched for and the node to start from.
     * @param val The value to be searched for
     * @param startNode The node to start from
     * @return The node if found, nullptr if not found
     */
    Node* findNode(Node* startNode, int val){
        if(startNode == nullptr){ // if startNode is null, return null
            return nullptr;
        }
        else if(startNode->value == val){ // if startNode's value equals searched value, return startNode
            return startNode;
        }
        else{ // if not equal, recursively search in left and right subtree
            Node* leftNode = findNode(startNode->left, val);
            Node* rightNode = findNode(startNode->right, val);
            if(leftNode != nullptr){ // if value found in left subtree, return leftNode
                return leftNode;
            }
            else{ // else return rightNode (could be nullptr too)
                return rightNode;
            }
        }
    }

    /**
     * Function to delete a node from the tree.
     * Takes in the value to be deleted and the node to start from.
     * @param val The value to be deleted
     * @param currNode The node to start from
     * @return true if deletion is successful, false if not
     */
    bool deleteNode(int val, Node* currNode){
        if(currNode == nullptr){ // if currNode is null, return false (node not found)
            return false;
        }
        else if(currNode->value == val){ // if currNode's value equals searched value
            if(currNode->left == nullptr && currNode->right == nullptr){ // if currNode has no children
                delete currNode; // delete the node
                currNode = nullptr;
            }
            else if(currNode->left == nullptr){ // if currNode has only right child
                currNode->value = currNode->right->value; // copy right child's value to currNode
                delete currNode->right; // delete right child
                currNode->right = nullptr;
            }
            else if(currNode->right == nullptr){ // if currNode has only left child
                currNode->value = currNode->left->value; // copy left child's value to currNode
                delete currNode->left; // delete left child
                currNode->left = nullptr;
            }
            else{ // if currNode has both left and right child
                // find the minimum value in right subtree
                Node* minNode = findMin(currNode->right);
                currNode->value = minNode->value; // copy value to currNode
                deleteNode(minNode->value, currNode->right); // delete the minimum node recursively
            }
            return true; // return true (successful deletion)
        }
        else{ // if value not found, recursively search in left and right subtree
            bool deleted = deleteNode(val, currNode->left);
            if(!deleted){
                deleted = deleteNode(val, currNode->right);
            }
            return deleted; // return the result of recursive call
        }
    }

    /**
     * Helper function to find the minimum value node in a subtree.
     * Takes in the base node to start searching from.
     * @param base The base node to start from
     * @return The minimum value node found
     */
    Node* findMin(Node* base){
        if(base->left == nullptr){ // if left child is null, return current node
            return base;
        }
        else{ // else recursively search in left subtree
            return findMin(base->left);
        }
    }

    /**
     * Function to print the tree in preorder traversal.
     * Takes in the node to start printing from.
     * @param currNode The node to start from
     */
    void preOrder(Node* currNode){
        if(currNode == nullptr){ // if currNode is null, return
            return;
        }
        cout<<currNode->value<<" "; // print current node's value
        preOrder(currNode->left); // recursively traverse left subtree
        preOrder(currNode->right); // recursively traverse right subtree
    }
};

/**
 * Main function to demonstrate the use of the tree class.
 */
int main(){
    // create a tree of size 7
    Tree* tree = new Tree(7);

    // add nodes to the tree
    tree->addNode(5, 3); // successfully added
    tree->addNode(2, 5); // successfully added
    tree->addNode(7, 2); // successfully added
    tree->addNode(4, 5); // successfully added
    tree->addNode(8, 10); // parent node not found
    tree->addNode(1, 2); // successfully added

    // print the tree in preorder traversal
    tree->preOrder(tree->getRoot()); // output: 3 5 2 1 7 4

    // delete a node from the tree
    tree->deleteNode(2, tree->getRoot()); // node successfully deleted

    // print the tree in preorder traversal
    tree->preOrder(tree->getRoot()); // output: 3 5 1 7 4

    return 0;
}