#include <iostream>

struct Node {
    int data;
    Node* left;
    Node* right;
    
    //constructor
    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

//function to insert new node in binary search tree
void insertNode(Node* root, Node* newNode){
    if(root == NULL) {
        root = newNode;
    } else if(newNode->data < root->data) {
        if(root->left == NULL) {
            root->left = newNode;
        } else {
            insertNode(root->left, newNode);
        }
    } else {
        if(root->right == NULL) {
            root->right = newNode;
        } else {
            insertNode(root->right, newNode);
        }
    }
}

//function to traverse the binary search tree in inorder fashion
void inorderTraversal(Node* root) {
    if(root != NULL) {
        inorderTraversal(root->left);
        std::cout << root->data << " ";
        inorderTraversal(root->right);
    }
}

int main() {
    // creating binary search tree
    Node* root = new Node(25);
    insertNode(root, new Node(15));
    insertNode(root, new Node(35));
    insertNode(root, new Node(10));
    insertNode(root, new Node(20));
    insertNode(root, new Node(30));
    insertNode(root, new Node(40));
    insertNode(root, new Node(5));
    
    //traversing the tree
    std::cout << "Inorder traversal of the binary search tree: " << std::endl;
    inorderTraversal(root);
    
    return 0;
}