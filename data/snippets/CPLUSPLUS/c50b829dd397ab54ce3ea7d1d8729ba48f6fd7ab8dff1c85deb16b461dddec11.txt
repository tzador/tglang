#include <iostream>
using namespace std;

// Define a template class for a binary search tree
template<typename T>
class BinarySearchTree {
private:
  // Define a struct for a node in the binary search tree
  struct Node {
    T data;
    Node* left;
    Node* right;
    // Constructor for the Node struct
    Node(T val) {
      data = val;
      left = nullptr;
      right = nullptr;
    }
  };

  Node* root; // Pointer to the root of the binary search tree

public:
  // Constructor for the BinarySearchTree class
  BinarySearchTree() {
    root = nullptr;
  }

  // Function to insert a new node into the binary search tree
  void insert(T val) {
    // Check if the tree is empty
    if (root == nullptr) {
      root = new Node(val);
      return;
    }

    // Create a temporary pointer to traverse the tree
    Node* temp = root;

    // Loop until we find a suitable position to insert the new node
    while (temp) {
      // If the value is less than the data in current node, go left
      if (val < temp->data) {
        // Check if left node exists, if not create it
        if (temp->left == nullptr) {
          temp->left = new Node(val);
          return;
        }
        // If left node exists, move the temp pointer to it
        else {
          temp = temp->left;
        }
      }
      // If the value is greater than the data in current node, go right
      else if (val > temp->data) {
        // Check if right node exists, if not create it
        if (temp->right == nullptr) {
          temp->right = new Node(val);
          return;
        }
        // If right node exists, move the temp pointer to it
        else {
          temp = temp->right;
        }
      }
      // If the value is equal to the data in current node, do not insert as
      // binary search tree should not contain duplicates
      else {
        return;
      }
    }
  }

  // Function to check if a value is present in the binary search tree
  bool search(T val) {
    // Check if the tree is empty
    if (root == nullptr) {
      return false;
    }

    // Create a temporary pointer to traverse the tree
    Node* temp = root;

    // Loop until we find the value or reach a leaf node
    while (temp) {
      // If the value is less than the data in current node, go left
      if (val < temp->data) {
        // If left node exists, move the temp pointer to it
        if (temp->left) {
          temp = temp->left;
        }
        // If left node does not exist, value is not present in the tree
        else {
          return false;
        }
      }
      // If the value is greater than the data in current node, go right
      else if (val > temp->data) {
        // If right node exists, move the temp pointer to it
        if (temp->right) {
          temp = temp->right;
        }
        // If right node does not exist, value is not present in the tree
        else {
          return false;
        }
      }
      // If the value is equal to the data in current node, return true
      else {
        return true;
      }
    }

    return false; // Value not found in the tree
  }

  // Function to delete a node from the binary search tree
  void remove(T val) {
    // Check if the tree is empty
    if (root == nullptr) {
      return;
    }

    // Create a temporary pointer to traverse the tree
    Node* temp = root;
    // Create a parent pointer to keep track of the parent of the current node
    Node* parent = nullptr;

    // Loop until we find the node to be deleted or reach a leaf node
    while (temp) {
      // If the value is less than the data in current node, go left
      if (val < temp->data) {
        // If left node exists, move the temp pointer to it
        if (temp->left) {
          parent = temp;
          temp = temp->left;
        }
        // If left node does not exist, value is not present in the tree
        else {
          return;
        }
      }
      // If the value is greater than the data in current node, go right
      else if (val > temp->data) {
        // If right node exists, move the temp pointer to it
        if (temp->right) {
          parent = temp;
          temp = temp->right;
        }
        // If right node does not exist, value is not present in the tree
        else {
          return;
        }
      }
      // If the value is equal to the data in current node
      else {
        // If the node has no children, simply delete it
        if (temp->left == nullptr && temp->right == nullptr) {
          delete temp;
          // Update the parent's child pointer to null
          if (parent->left == temp) {
            parent->left = nullptr;
          }
          else {
            parent->right = nullptr;
          }
          return;
        }
        // If the node has only one child
        else if (temp->left == nullptr || temp->right == nullptr) {
          // If the node has a left child
          if (temp->left) {
            // If the current node is the root, update it to its left child
            if (parent == nullptr) {
              root = temp->left;
            }
            // Update the parent's child pointer to point to current node's left child
            else if (parent->left == temp) {
              parent->left = temp->left;
            }
            else {
              parent->right = temp->left;
            }
          }
          // If the node has a right child
          else {
            // If the current node is the root, update it to its right child
            if (parent == nullptr) {
              root = temp->right;
            }
            // Update the parent's child pointer to point to current node's right child
            else if (parent->left == temp) {
              parent->left = temp->right;
            }
            else {
              parent->right = temp->right;
            }
          }
          delete temp;
          return;
        }
        // If the node has two children
        else {
          // Find the minimum value in the right subtree
          Node* min = temp->right;
          parent = temp;
          while (min->left) {
            parent = min;
            min = min->left;
          }
          // Replace the value in current node with the minimum value
          temp->data = min->data;
          // Delete the minimum node
          if (min->right) {
            parent->left = min->right;
          }
          else {
            parent->left = nullptr;
          }
          delete min;
          return;
        }
      }
    }
  }
};

int main() {
  // Create a BinarySearchTree object of type int
  BinarySearchTree<int> bst;

  // Insert elements into the binary search tree
  bst.insert(10);
  bst.insert(5);
  bst.insert(15);
  bst.insert(3);
  bst.insert(8);
  bst.insert(17);

  // Search for an element in the binary search tree
  cout << "Element 8 is present in the tree: " << bst.search(8) << endl;

  // Delete an element from the binary search tree
  bst.remove(5);

  // Search for the deleted element
  cout << "Element 5 is present in the tree: " << bst.search(5) << endl;

  return 0;
}