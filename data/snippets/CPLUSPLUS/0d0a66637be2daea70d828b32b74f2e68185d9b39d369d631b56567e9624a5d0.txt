// This is a complex code snippet in C++

#include <iostream>  // header file for input/output operations

using namespace std;  // using standard namespace

class Stack  // defining a class named "Stack"
{
  private:  // private members of the class
    int* stackArray;  // pointer for dynamic array
    int top;  // top variable to keep track of the top element in the stack
    int capacity;  // variable for maximum capacity of the stack

  public:  // public members of the class
    // constructor to initialize the stack
    Stack(int size)
    {
        capacity = size;  // set maximum capacity to given size
        stackArray = new int[capacity];  // allocate memory for stack array
        top = -1;  // set top to -1 (empty stack)
    }

    // function to check if stack is empty
    bool isEmpty()
    {
        return (top == -1);
    }

    // function to check if stack is full
    bool isFull()
    {
        return (top + 1 == capacity);
    }

    // function to push element to top of the stack
    void push(int item)
    {
        // check if stack is full
        if (isFull())
        {
            // print error message and exit function
            cout << "Stack overflow, cannot push item." << endl;
            return;
        }

        top++;  // increment top
        stackArray[top] = item;  // add item to top of stack
    }

    // function to pop element from top of stack
    int pop()
    {
        // check if stack is empty
        if (isEmpty())
        {
            // print error message and exit function
            cout << "Stack underflow, cannot pop item." << endl;
            return -1;
        }

        int item = stackArray[top];  // temporary variable to store top element
        top--;  // decrement top
        return item;  // return popped element
    }

    // function to print elements of stack
    void printStack()
    {
        // check if stack is empty
        if (isEmpty())
        {
            // print error message and exit function
            cout << "Stack is empty." << endl;
            return;
        }

        // loop through stack from top to bottom
        for (int i = top; i >= 0; i--)
        {
            cout << stackArray[i] << " ";  // print element
        }
        cout << endl;  // print new line
    }

    // destructor to deallocate memory
    ~Stack()
    {
        delete[] stackArray;  // delete dynamically allocated array
    }
};

int main()
{
    Stack myStack(5);  // create an instance of Stack with maximum capacity of 5

    // pushing elements to stack
    myStack.push(1);
    myStack.push(2);
    myStack.push(3);

    // printing elements of stack
    cout << "Stack elements: ";
    myStack.printStack();

    // pop element from stack
    int poppedElement = myStack.pop();
    cout << "Popped element: " << poppedElement << endl;

    // printing updated stack elements
    cout << "Updated stack elements: ";
    myStack.printStack();

    return 0;
}