#include <iostream>  //header file for input/output operations
using namespace std;  //using standard namespace for convenience

class Shape { //class definition
    protected: //protected access specifier for inherited classes to access
        int width; //int variable for shape width
        int height; //int variable for shape height
    public: //public access specifier for class functions
        Shape(int a=0, int b=0) { //constructor with default parameter values of 0
            width = a; //initializes width variable with parameter value
            height = b; //initializes height variable with parameter value
        }
        virtual int area() { //virtual function for area calculation
            cout << "Parent class area :" <<endl;
            return 0; //returns 0 as all shapes have different area calculations
        }
};

class Rectangle: public Shape { //inheritance using public access specifier
    public: //public access specifier for class functions
        Rectangle( int a = 0, int b = 0):Shape(a, b) { } //constructor using base class constructor with default parameter values of 0
        int area () { //overriding virtual function from base class
            cout << "Rectangle class area :" <<endl;
            return (width * height); //returns rectangle area
        }
};

class Triangle: public Shape { //inheritance using public access specifier
    public: //public access specifier for class functions
        Triangle( int a = 0, int b = 0):Shape(a, b) { } //constructor using base class constructor with default parameter values of 0
        int area () { //overriding virtual function from base class
            cout << "Triangle class area :" <<endl;
            return (width * height / 2); //returns triangle area
        }
};

//main function
int main() {
    Shape *shape; //pointer to base class object
    Rectangle rec(10,7); //rectangle object with parameters
    Triangle tri(10,5); //triangle object with parameters
    shape = &rec; //pointer points to rectangle object
    shape->area(); //calls area function of rectangle class
    shape = &tri; //pointer points to triangle object
    shape->area(); //calls area function of triangle class
    return 0; //main function returns 0
}