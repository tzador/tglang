// This code snippet represents an example of a complex sorting algorithm, namely Bubble Sort.
// Bubble Sort is a simple sorting algorithm that repeatedly steps through the array, 
// compares adjacent elements and swaps them if they are in the wrong order.
// The pass through the array is repeated until the array is sorted.

#include <iostream>
using namespace std;

// Function to swap elements at given indices
void swap(int* a, int* b) {
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

// Function to perform Bubble Sort
void bubbleSort(int arr[], int n) {
    // Boolean variable to check if elements are already sorted
    bool sorted;
    // Loop through the array n times
    for (int i = 0; i < n; i++) {
        // Mark sorted as true at the beginning of each loop iteration
        sorted = true;
        // Iterate through the unsorted elements
        for (int j = 0; j < n - i - 1; j++) {
            // Compare adjacent elements
            if (arr[j] > arr[j + 1]) {
                // Swap the elements if they are in the wrong order
                swap(&arr[j], &arr[j+1]);
                // Mark sorted as false since a swap occurred
                sorted = false;
            }
        }
        // If no swaps occurred, break the loop as the array is already sorted
        if (sorted) {
            break;
        }
    }
}

int main() {
    // Sample array to be sorted
    int arr[] = {64, 25, 12, 22, 11};
    // Get size of array
    int n = sizeof(arr)/sizeof(arr[0]);
    // Perform Bubble Sort on the array
    bubbleSort(arr, n);
    // Print the sorted array
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}

// Output: 11 22 25 12 64