/*This is a fully functional implementation of a generic linked list data structure. It supports operations such as insertion, deletion, and traversal.*/

#include <iostream>
using namespace std;

//Node struct to represent each element of the linked list
template<typename T>
struct Node {
    T value; //Value of the node
    Node* next; //Pointer to the next node in the list
};

//Linked list class to manage the linked list
template <class T>
class LinkedList {
private:
    Node<T>* head; //Pointer to the head of the list
    int size; //Size of the list

public:
    //Constructor to initialize the list
    LinkedList() {
        head = NULL; //Initialize head to NULL
        size = 0; //Initialize size to 0
    }

    //Function to insert a new node at the beginning of the list
    void insertFirst(T data) {
        Node<T>* newNode = new Node<T>; //Create a new node
        newNode->value = data; //Assign the input data to the value of the node
        newNode->next = head; //Set the next pointer of the new node to point to the current head of the list

        head = newNode; //Set the new node as the head of the list
        size++; //Increase the size of the list
    }

    //Function to insert a new node at the end of the list
    void insertLast(T data) {
        Node<T>* newNode = new Node<T>; //Create a new node
        newNode->value = data; //Assign the input data to the value of the node
        newNode->next = NULL; //Set the next pointer of the new node to NULL, as it will be the last node in the list

        //Check if the list is empty
        if (head == NULL) {
            head = newNode; //Set the new node as the head of the list
        }
        else {
            //Traverse to the end of the list
            Node<T>* curr = head;
            while (curr->next != NULL) {
                curr = curr->next;
            }
            //Set the new node as the last node in the list
            curr->next = newNode;
        }
        size++; //Increase the size of the list
    }

    //Function to insert a new node at a given position in the list
    void insertAt(int pos, T data) {
        //Check if the position is valid
        if (pos < 0 || pos > size) {
            cout << "Invalid position!" << endl;
        }
        else if (pos == 0) { //Insert at the beginning of the list
            insertFirst(data);
        }
        else if (pos == size) { //Insert at the end of the list
            insertLast(data);
        }
        else {
            Node<T>* newNode = new Node<T>; //Create a new node
            newNode->value = data; //Assign the input data to the value of the node

            //Traverse to the node at the given position
            Node<T>* curr = head;
            for (int i = 0; i < pos - 1; i++) {
                curr = curr->next;
            }
            //Insert the new node after the current node
            newNode->next = curr->next;
            curr->next = newNode;
            size++; //Increase the size of the list
        }
    }

    //Function to delete the node at the beginning of the list
    void deleteFirst() {
        //Check if the list is empty
        if (head == NULL) {
            cout << "List is empty!" << endl;
        }
        else {
            Node<T>* temp = head; //Store the current head in a temporary variable
            head = head->next; //Set the next node as the new head
            delete temp; //Delete the old head
        }
        size--; //Decrease the size of the list
    }

    //Function to delete the node at the end of the list
    void deleteLast() {
        //Check if the list is empty
        if (head == NULL) {
            cout << "List is empty!" << endl;
        }
        else {
            //Traverse to the second last node in the list
            Node<T>* curr = head;
            while (curr->next->next != NULL) {
                curr = curr->next;
            }
            Node<T>* temp = curr->next; //Store the last node in a temporary variable
            curr->next = NULL; //Set the next pointer of the second last node to NULL, making it the last node
            delete temp; //Delete the old last node
        }
        size--; //Decrease the size of the list
    }

    //Function to delete the node at a given position in the list
    void deleteAt(int pos) {
        //Check if the position is valid
        if (pos < 0 || pos >= size) {
            cout << "Invalid position!" << endl;
        }
        else if (pos == 0) { //Delete the node at the beginning of the list
            deleteFirst();
        }
        else if (pos == size - 1) { //Delete the node at the end of the list
            deleteLast();
        }
        else {
            //Traverse to the node at the given position
            Node<T>* curr = head;
            for (int i = 0; i < pos - 1; i++) {
                curr = curr->next;
            }
            Node<T>* temp = curr->next; //Store the current node in a temporary variable
            curr->next = temp->next; //Set the next pointer of the previous node to point to the next node of the current node
            delete temp; //Delete the current node
            size--; //Decrease the size of the list
        }
    }

    //Function to print the elements of the list
    void display() {
        Node<T>* curr = head; //Start from the head of the list
        //Loop through all the nodes and print the value of each node
        while (curr != NULL) {
            cout << curr->value << " ";
            curr = curr->next;
        }
        cout << endl;
    }

    //Function to get the size of the list
    int getSize() {
        return size;
    }

    //Function to check if the list is empty
    bool isEmpty() {
        return size == 0;
    }
};

//Sample main function to demonstrate the usage of the LinkedList class
int main() {
    LinkedList<int> list; //Create an object of the LinkedList class with integer type elements

    //Insert elements in the list
    list.insertFirst(5);
    list.insertLast(10);
    list.insertAt(1, 7);

    //Print the elements of the list
    list.display(); //Output: 5 7 10

    //Delete elements from the list
    list.deleteFirst();
    list.deleteAt(1);

    list.display(); //Output: 7

    //Check the size of the list
    cout << "Size: " << list.getSize() << endl; //Output: Size: 1

    //Check if the list is empty
    cout << "Empty: " << (list.isEmpty() ? "true" : "false") << endl; //Output: Empty: false

    return 0;
}