//This code snippet is a representation of a binary search tree implementation in C++
#include <iostream>

//this class represents a node in a binary search tree
class Node {
    public:
        int key; //key value of the node
        int data; //data stored in the node
        Node *leftChild; //pointer to the left child of the node
        Node *rightChild; //pointer to the right child of the node
    
        //constructor
        Node(int key, int data) {
            this->key = key;
            this->data = data;
            this->leftChild = NULL;
            this->rightChild = NULL;
        }
};

//this class represents the binary search tree data structure
class BinarySearchTree {
    private:
        Node *root; //pointer to the root node of the tree
        
        //recursive function to insert a node into the tree
        void insertHelper(Node *node, int key, int data) {
            if (key < node->key) { //if key is less than current node's key, go left
                if (node->leftChild == NULL) { //if left child is empty, create a new node and assign it to the left child
                    node->leftChild = new Node(key, data);
                }
                else { //else, recursively call insertHelper on the left child
                    insertHelper(node->leftChild, key, data);
                }
            }
            else { //if key is greater than or equal to current node's key, go right
                if (node->rightChild == NULL) { //if right child is empty, create a new node and assign it to the right child
                    node->rightChild = new Node(key, data);
                }
                else { //else, recursively call insertHelper on the right child
                    insertHelper(node->rightChild, key, data);
                }
            }
        }
        
        //recursive function to search for a node with a given key in the tree
        Node* searchHelper(Node *node, int key) {
            if (node == NULL) { //if node is empty, return NULL
                return NULL;
            }
            else if (key == node->key) { //if given key matches current node's key, return the current node
                return node;
            }
            else if (key < node->key) { //if given key is less than current node's key, recursively search in the left subtree
                return searchHelper(node->leftChild, key);
            }
            else { //if given key is greater than current node's key, recursively search in the right subtree
                return searchHelper(node->rightChild, key);
            }
        }
        
        //recursive function to traverse the tree in-order and print its nodes
        void printInOrderHelper(Node *node) {
            if (node != NULL) { //if node is not empty
                printInOrderHelper(node->leftChild); //recursively call printInOrderHelper on the left subtree
                std::cout << node->key << " " << node->data << std::endl; //print the key and data of the current node
                printInOrderHelper(node->rightChild); //recursively call printInOrderHelper on the right subtree
            }
        }
        
        //recursive function to traverse the tree pre-order and print its nodes
        void printPreOrderHelper(Node *node) {
            if (node != NULL) { //if node is not empty
                std::cout << node->key << " " << node->data << std::endl; //print the key and data of the current node
                printPreOrderHelper(node->leftChild); //recursively call printPreOrderHelper on the left subtree
                printPreOrderHelper(node->rightChild); //recursively call printPreOrderHelper on the right subtree
            }
        }
        
        //recursive function to traverse the tree post-order and print its nodes
        void printPostOrderHelper(Node *node) {
            if (node != NULL) { //if node is not empty
                printPostOrderHelper(node->leftChild); //recursively call printPostOrderHelper on the left subtree
                printPostOrderHelper(node->rightChild); //recursively call printPostOrderHelper on the right subtree
                std::cout << node->key << " " << node->data << std::endl; //print the key and data of the current node
            }
        }
        
    public:
        
        //constructor
        BinarySearchTree() {
            root = NULL; //initialize root to NULL
        }
        
        //function to insert a node into the tree
        void insertNode(int key, int data) {
            if (root == NULL) { //if tree is empty, create a new node and assign it to the root
                root = new Node(key, data);
            }
            else { //else, call insertHelper to recursively insert the node in the tree
                insertHelper(root, key, data);
            }
        }
        
        //function to search for a node with a given key in the tree
        Node* searchNode(int key) {
            return searchHelper(root, key); //call searchHelper to recursively search for the node in the tree
        }
        
        //function to traverse the tree in-order and print its nodes
        void printInOrder() {
            printInOrderHelper(root); //call printInOrderHelper to recursively print the nodes in-order
        }
        
        //function to traverse the tree pre-order and print its nodes
        void printPreOrder() {
            printPreOrderHelper(root); //call printPreOrderHelper to recursively print the nodes pre-order
        }
        
        //function to traverse the tree post-order and print its nodes
        void printPostOrder() {
            printPostOrderHelper(root); //call printPostOrderHelper to recursively print the nodes post-order
        }
};

int main() {
    //creating a binary search tree and inserting some nodes
    BinarySearchTree bst;
    bst.insertNode(10, 100);
    bst.insertNode(5, 50);
    bst.insertNode(15, 150);
    bst.insertNode(3, 30);
    bst.insertNode(7, 70);
    
    //printing the nodes in-order
    bst.printInOrder();
    
    //printing the nodes pre-order
    bst.printPreOrder();
    
    //printing the nodes post-order
    bst.printPostOrder();
    
    return 0;
}