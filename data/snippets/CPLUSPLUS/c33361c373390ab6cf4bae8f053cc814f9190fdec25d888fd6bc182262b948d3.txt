// Declaring a class template with multiple template parameters

template <class T, class U, int N>
class MyTemplate
{
private:
  T firstItem;
  U secondItem;
  int index = N;
public:
  // Constructor with parameters
  MyTemplate(T item1, U item2)
  {
    firstItem = item1;
    secondItem = item2;
  }

  // Getters
  T getItem1() { return firstItem; }
  U getItem2() { return secondItem; }
  
  // Setters
  void setItem1(T newItem) { firstItem = newItem; }
  void setItem2(U newItem) { secondItem = newItem; }

  // Method that returns the sum of both items
  template <class X, class Y>
  int calculateSum(X item1, Y item2)
  {
    return item1 + item2;
  }

  // Method that prints the items using the index passed in the template
  void printItems()
  {
    cout << "First Item: " << firstItem << endl;
    cout << "Second Item: " << secondItem << endl;
    cout << "Index: " << index << endl;
  }
};

// Creating an instance of MyTemplate with int and double as arguments 
MyTemplate<int, double, 5> myObject(10, 3.14);

// Calling the calculateSum method with int and double arguments and printing the result
cout << "Sum: " << myObject.calculateSum(5, 2.75) << endl;

// Calling the printItems method to print the items and index
myObject.printItems();