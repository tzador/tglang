#include <iostream>

// This is a comment

using namespace std;

// Define a class named "Complex"
class Complex {
private:
    double real;
    double imag;

public:
    // Constructor using default parameters
    Complex(double r = 0.0, double i = 0.0) {
        this->real = r;
        this->imag = i;
    }

    // Overloading "+" operator to add two Complex numbers
    Complex operator+(const Complex& obj) {
        Complex res;
        res.real = this->real + obj.real;
        res.imag = this->imag + obj.imag;
        return res;
    }

    // Function to get the real part of a Complex number
    double getReal() {
        return this->real;
    }

    // Function to get the imaginary part of a Complex number
    double getImaginary() {
        return this->imag;
    }

    // Overloading "<<" operator to print Complex numbers
    friend ostream& operator<<(ostream& os, const Complex& obj) {
        os << obj.real << " + " << obj.imag << "i";
        return os;
    }
};

int main() {
    // Create two Complex objects
    Complex num1(5.5, 4.5);
    Complex num2(2.3, -1.8);

    // Add the two Complex numbers using overloaded "+" operator
    Complex sum = num1 + num2;

    // Print the result using overloaded "<<" operator
    cout << "Sum of " << num1 << " and " << num2 << " is: " << sum << endl;
    return 0;
}