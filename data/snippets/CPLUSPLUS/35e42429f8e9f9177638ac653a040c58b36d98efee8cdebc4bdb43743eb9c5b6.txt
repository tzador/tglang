// This is a complex code snippet in C++ demonstrating inheritance and polymorphism
#include <iostream> // include input/output functionality
#include <string> // include string manipulation functions
using namespace std; // use standard namespace

class Animal { // create a base class
protected:
    string name; // protected member variable
public:
    Animal(string name) { // constructor
        this->name = name;
    }
    virtual void makeSound() { // virtual function to make animal sounds
        cout << "The " << name << " makes a sound." << endl;
    }
};

class Dog : public Animal { // create a child class inheriting from Animal
public:
    Dog(string name) : Animal(name) {} // constructor that passes name argument to parent constructor
    void makeSound() { // override makeSound() function for Dog
        cout << "The " << name << " barks." << endl;
    }
};

class Cat : public Animal { // create a child class inheriting from Animal
public:
    Cat(string name) : Animal(name) {} // constructor that passes name argument to parent constructor
    void makeSound() { // override makeSound() function for Cat
        cout << "The " << name << " meows." << endl;
    }
};

int main() {
    Animal* animal[3]; // create an array of pointers to Animal class objects
    animal[0] = new Animal("animal"); // create new Animal object
    animal[1] = new Dog("dog"); // create new Dog object
    animal[2] = new Cat("cat"); // create new Cat object
    
    for (int i=0; i<3; i++) { // loop through all elements in the array
        animal[i]->makeSound(); // call makeSound() function for each object, demonstrating polymorphism
        delete animal[i]; // free the allocated memory
    }
    
	return 0;
}