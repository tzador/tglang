// This code snippet is an implementation of a binary search tree data structure in C++

#include <iostream>

using namespace std;

// Node structure for the binary tree
struct Node {
    int data;
    Node* left;
    Node* right;
    
    // Constructor for creating a new node
    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};

// Insert function to insert a new node into the binary tree
Node* insert(Node* root, int val) {
    // If the tree is empty, create a new node with given value as the root
    if (root == NULL) {
        Node* newNode = new Node(val);
        return newNode;
    }
    // If the value is less than the root node, insert it in the left subtree
    else if (root->data > val) {
        root->left = insert(root->left, val);
    }
    // If the value is greater than the root node, insert it in the right subtree
    else {
        root->right = insert(root->right, val);
    }
    return root;
}

// Function to print the tree in inorder traversal
void inorder(Node* root) {
    if (root != NULL) {
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}

// Function to search for a value in the tree using binary search
Node* search(Node* root, int val) {
    // If the tree is empty or the value is equal to the root node's value, return the root
    if (root == NULL || root->data == val) {
        return root;
    }
    // If the value is less than the root node, search in the left subtree
    else if (root->data > val) {
        return search(root->left, val);
    }
    // If the value is greater than the root node, search in the right subtree
    else {
        return search(root->right, val);
    }
}

// Driver code to test the binary tree functions
int main() {
    // Creating an empty tree
    Node* root = NULL;

    // Inserting nodes into the tree
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    // Printing the tree in inorder traversal
    cout << "Inorder traversal of the tree: ";
    inorder(root);

    // Searching for a value in the tree
    int searchVal = 40;
    Node* searchedNode = search(root, searchVal);
    // If the searchedNode is NULL, the value is not present in the tree
    if (searchedNode == NULL) {
        cout << "\n" << searchVal << " is not present in the tree.";
    }
    // Else, the value is present in the tree
    else {
        cout << "\n" << searchVal << " is present in the tree.";
    }

    return 0;
}