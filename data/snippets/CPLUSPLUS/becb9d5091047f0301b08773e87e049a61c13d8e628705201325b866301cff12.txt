// Defining a generic class template for a binary search tree
template <typename Key, typename Value>
class BinarySearchTree {
private:
    // defining a struct for the nodes in the tree
    struct Node {
        Key key;
        Value value;
        Node *left;
        Node *right;
        
        // constructor for a node
        Node(const Key& key, const Value& value) : key(key), value(value), left(nullptr), right(nullptr) {}
    };
    
    // root node for the tree
    Node *root;
    
    // helper function to insert a node into the tree
    void insertHelper(Node *current, Node *newNode) {
        // if current node is null, insert newNode into current position
        if (current == nullptr)
            current = newNode;
        // if key of newNode is less than key of current node, insert into the left subtree
        else if (newNode->key < current->key) {
            // if left child is null, insert newNode at left child
            if (current->left == nullptr)
                current->left = newNode;
            // otherwise, recursively call insertHelper on left child
            else
                insertHelper(current->left, newNode);
        }
        // if key of newNode is greater than key of current node, insert into the right subtree
        else {
            // if right child is null, insert newNode at right child
            if (current->right == nullptr)
                current->right = newNode;
            // otherwise, recursively call insertHelper on right child
            else
                insertHelper(current->right, newNode);
        }
    }
    
public:
    // constructor for binary search tree
    BinarySearchTree() : root(nullptr) {}
    
    // function to insert a node into the tree
    void insert(const Key& key, const Value& value) {
        // create a new node with given key and value
        Node *newNode = new Node(key, value);
        
        // if tree is empty, set newNode as root
        if (root == nullptr)
            root = newNode;
        else
            // otherwise, call helper function to insert newNode into correct position
            insertHelper(root, newNode);
    }
    
    // function to retrieve a value from a given key in the tree
    Value retrieve(const Key& key) {
        // start at root node
        Node *current = root;
        
        // traverse tree until key is found or end is reached
        while (current != nullptr && current->key != key) {
            // if key is less than current node's key, go left
            if (key < current->key)
                current = current->left;
            // if key is greater than current node's key, go right
            else
                current = current->right;
        }
        
        // if key was not found, return a default constructed value
        if (current == nullptr)
            return Value();
        // otherwise, return the value associated with the key
        else
            return current->value;
    }
};