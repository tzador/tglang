#include <iostream>
#include <vector>
#include <algorithm>

// This function extracts all even numbers from a given vector
// and returns a new vector containing only those numbers.
std::vector<int> extractEven(std::vector<int> numbers) {
    std::vector<int> evenNumbers; // creates a new empty vector to store even numbers
    for (int i = 0; i < numbers.size(); i++) { // loop through all elements in the given vector
        if (numbers[i] % 2 == 0) { // check if the current element is even
            evenNumbers.push_back(numbers[i]); // add the even number to the new vector
        }
    }
    return evenNumbers; // return the new vector containing only even numbers
}

// This function prints out a given vector in reverse order without modifying the original vector.
void printReverse(std::vector<int> numbers) {
    for (int i = numbers.size() - 1; i >= 0; i--) { // loop through the given vector in reverse
        std::cout << numbers[i] << " "; // print out the current element
    }
    std::cout << std::endl; // add line break
}

// Driver code
int main() {
    // create a vector with some numbers
    std::vector<int> numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    // extract all even numbers from the vector
    std::vector<int> evenNumbers = extractEven(numbers);
    // print out the even numbers
    std::cout << "Even numbers: ";
    for (int i = 0; i < evenNumbers.size(); i++) { // loop through the even numbers vector
        std::cout << evenNumbers[i] << " "; // print out the current element
    }
    std::cout << std::endl; // add line break
    // print out the original vector in reverse order
    std::cout << "Original vector in reverse order: ";
    printReverse(numbers);
    return 0;
}