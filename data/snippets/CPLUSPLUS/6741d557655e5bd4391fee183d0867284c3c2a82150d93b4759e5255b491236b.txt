//This code performs a depth-first search on a directed graph
#include <iostream>
#include <vector>
#include <stack>

using namespace std;

// Graph class to represent a directed graph
class Graph
{
    // Number of vertices
    int V; 
    // Pointer to an array containing adjacency lists
    vector<int> *adj;
public:
    // Constructor
    Graph(int V) : V(V)
    {
        // Initialize the number of vertices
        this->V = V;
        // Initialize the adjacency list for each vertex
        adj = new vector<int>[V];
    }

    // Function to add an edge to the graph
    void addEdge(int v, int w)
    {
        // Add w to v's adjacency list
        adj[v].push_back(w);
        // Since the graph is directed, add v to w's adjacency list
    }

    // Recursive function that performs the depth-first search
    void DFSUtil(int v, vector<bool> &visited)
    {
        // Mark the current vertex as visited
        visited[v] = true;
        // Print the vertex
        cout << v << " ";
        // Recursively iterate through all the adjacent vertices
        for (auto i : adj[v]) {
            // If the adjacent vertex has not been visited, call the DFSUtil function for it
            if (!visited[i])
            {
                DFSUtil(i, visited);
            }
        }
    }

    // Function to perform the depth-first search starting from a given vertex
    void DFS(int v)
    {
        // Create a vector to keep track of visited vertices, initialized to false
        vector<bool> visited(V, false);
        // Call the recursive DFSUtil function to start the search
        DFSUtil(v, visited);
    }
};

// Driver function
int main()
{
    // Create a graph with 7 vertices
    Graph g(7);
    // Add edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);
    // Perform depth-first search starting from vertex 0
    g.DFS(0);

    return 0;
}