// This is a function to check if a point lies inside a polygon 

// Defining the Point structure to store x and y coordinates 
struct Point 
{
    float x;
    float y;
};

// Defining a function to check if the point is inside the polygon 
// The function takes in input the Point p, the number of vertices of the polygon n, 
// and the array of points representing the vertices of the polygon 

bool isInside(Point p, int n, Point polygon[]) 
{ 
    // Initializing the polygon area 
    float area = 0.0; 
    
    // Iterating through all the vertices of the polygon 
    for (int i = 0; i < n; i++) 
    { 
        // Calculating the area of the triangle formed by the point, 
        // the current vertex and the next vertex 
        float triangle_area = (p.x * (polygon[i].y - polygon[i + 1].y) + polygon[i].x * (polygon[i + 1].y - p.y) + polygon[i + 1].x * (p.y - polygon[i].y)) / 2.0; 
        
        // Adding the area of the triangle to the total area 
        area += triangle_area; 
    } 
    
    // Checking if the absolute value of the polygon area is equal to the sum of the areas of all triangles 
    if (abs(area) == sum_of_triangle_areas) 
    { 
        // The point is inside the polygon 
        return true; 
    } 
    else 
    { 
        // The point is outside the polygon 
        return false; 
    } 
} 

// Main function 
int main() 
{ 
    // Declaring the number of vertices of the polygon 
    int n = 6; 
    
    // Defining an array of points representing the vertices of the polygon 
    Point polygon[n]; 
    
    // Assigning values to the vertices of the polygon 
    polygon[0].x = 1; 
    polygon[0].y = 1; 
    
    polygon[1].x = 5; 
    polygon[1].y = 1; 
    
    polygon[2].x = 5; 
    polygon[2].y = 5; 
    
    polygon[3].x = 3; 
    polygon[3].y = 6; 
    
    polygon[4].x = 1; 
    polygon[4].y = 5; 
    
    polygon[5].x = 1; 
    polygon[5].y = 1; 
    
    // Defining a point to test the function 
    Point test_point; 
    test_point.x = 3; 
    test_point.y = 3; 
    
    // Calling the isInside function and storing the result 
    bool result = isInside(test_point, n, polygon); 
    
    // Outputting the result 
    cout << "The point (" << test_point.x << ", " << test_point.y << ") is inside the polygon: " << boolalpha << result; 
    
    return 0; 
}