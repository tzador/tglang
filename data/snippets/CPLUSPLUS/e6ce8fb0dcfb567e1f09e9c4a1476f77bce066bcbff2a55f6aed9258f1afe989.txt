/*
This code snippet is a program that uses the Dijkstra's algorithm to find the shortest path in a graph.

First, we declare the necessary variables and include the required libraries.
*/

#include <iostream> // input/output stream library
#include <limits> // for 'infinity' value
#include <vector> // for using vectors
#include <algorithm> // for using std::find
using namespace std;

/*
Next, we create an adjacency matrix to represent the graph and initialize it with appropriate values.
*/

const int V = 5; // number of vertices in the graph
const int inf = numeric_limits<int>::max(); // 'infinity' value used in algorithm

int graph[V][V] = { // adjacency matrix
    { 0, 5, inf, 10, inf },
    { inf, 0, 3, inf, inf },
    { inf, inf, 0, 1, inf },
    { inf, inf, inf, 0, 6},
    { 63, inf, inf, inf, 0 }
};

/*
Then, we create a function that implements the Dijkstra's algorithm.
*/

void dijkstra(int start, int end) {
    vector<int> distance(V, inf); // vector to store the distances from the start vertex
    vector<bool> visited(V, false); // vector to keep track of visited vertices
    vector<int> path(V, -1); // vector to store the optimal path
    distance[start] = 0; // distance from start to itself is 0
    int current = start; // initialize current vertex to start

    while (!visited[end]) { // continue until the end vertex is visited
        visited[current] = true; // mark current vertex as visited

        // update the distance to all unvisited adjacent vertices
        for (int i = 0; i < V; i++) {
            if (!visited[i] && graph[current][i] != inf) { // if vertex is unvisited and there is a path
                int new_distance = distance[current] + graph[current][i]; // calculate new distance
                if (new_distance < distance[i]) { // if new distance is shorter than previously calculated distance
                    distance[i] = new_distance; // replace distance with new distance
                    path[i] = current; // update optimal path
                }
            }
        }

        // find next vertex to visit - unvisited vertex with shortest distance
        int temp = inf; // temporary variable to store shortest distance
        for (int i = 0; i < V; i++) {
            if (!visited[i] && distance[i] < temp) { // if vertex is unvisited and has shortest distance
                temp = distance[i]; // store distance
                current = i; // update current vertex
            }
        }
    }

    /*
    Finally, we print the shortest path and its distance.
    */

    // print path
    cout << "Shortest path from vertex " << start << " to vertex " << end << ": ";
    vector<int> shortest_path;
    int temp = end; // temporary variable to backtrack from end vertex to start
    shortest_path.push_back(end); // add end vertex to vector
    while (temp != start) { // continue until start vertex is reached
        shortest_path.push_back(path[temp]); // add previous vertex to vector
        temp = path[temp]; // update temporary variable to previous vertex
    }
    for (int i = shortest_path.size() - 1; i > 0; i--) { // print path in reverse order
        cout << shortest_path[i] << " -> ";
    }
    cout << shortest_path[0] << endl; // print start vertex

    // print distance
    cout << "Shortest distance: " << distance[end] << endl;

}

/*
Finally, we call the dijkstra function and pass in the start and end vertices as parameters.
*/

int main() {
    int start = 0; // start vertex
    int end = 3; // end vertex
    dijkstra(start, end); // call dijkstra function
    return 0; 
}