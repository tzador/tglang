// This code snippet creates a binary search tree data structure
// with basic operations such as insert, search, and delete
// It also includes functions for traversing the tree in different orders and finding
// the maximum and minimum elements

// Struct for each tree node
struct Node {
    int key;
    Node* left, *right;
    // Constructor to initialize node
    Node(int val) {
        key = val;
        left = right = NULL;
    }
};

// Insert function to add a new node to the tree
void insert(Node* root, int key) {
    // If the root is null, create a new node and make it the root
    if (root == NULL) {
        root = new Node(key);
    }
    else {
        // If the key is smaller than the root's key, insert it in the left subtree
        if (key < root->key) {
            if (root->left == NULL) {
                root->left = new Node(key);
            }
            else {
                // Recursively call insert function on the left subtree
                insert(root->left, key);
            }
        }
        else if (key > root->key) {
            if (root->right == NULL) {
                // If the key is larger than the root's key, insert it in the right subtree
                root->right = new Node(key);
            }
            else {
                // Recursively call insert function on the right subtree
                insert(root->right, key);
            }
        }
    }
}

// Search function to find a specific key in the tree
Node* search(Node* root, int key) {
    // If root is null or key is present at root, return root
    if (root == NULL || root->key == key) {
        return root;
    }
    // If key is smaller than root's key, search left subtree
    if (key < root->key) {
        return search(root->left, key);
    }
    // If key is larger than root's key, search right subtree
    return search(root->right, key);
}

// Function to find the maximum element in the tree
Node* findMax(Node* root) {
    // If the root is null, return null
    if (root == NULL) {
        return NULL;
    }
    // Traverse to the rightmost node
    while (root->right != NULL) {
        root = root->right;
    }
    // Return the rightmost node
    return root;
}

// Function to find the minimum element in the tree
Node* findMin(Node* root) {
    // If the root is null, return null
    if (root == NULL) {
        return NULL;
    }
    // Traverse to the leftmost node
    while (root->left != NULL) {
        root = root->left;
    }
    // Return the leftmost node
    return root;
}

// Function to perform inorder traversal on the tree
void inorder(Node* root) {
    if (root != NULL) {
        // Recursively call inorder function on left subtree
        inorder(root->left);
        // Print current node
        cout << root->key << " ";
        // Recursively call inorder function on right subtree
        inorder(root->right);
    }
}

// Function to perform preorder traversal on the tree
void preorder(Node* root) {
    if (root != NULL) {
        // Print current node
        cout << root->key << " ";
        // Recursively call preorder function on left subtree
        preorder(root->left);
        // Recursively call preorder function on right subtree
        preorder(root->right);
    }
}

// Function to perform postorder traversal on the tree
void postorder(Node* root) {
    if (root != NULL) {
        // Recursively call postorder function on left subtree
        postorder(root->left);
        // Recursively call postorder function on right subtree
        postorder(root->right);
        // Print current node
        cout << root->key << " ";
    }
}

// Main function to create and use the binary search tree
int main() {
    Node* root = NULL;
    // Insert nodes
    insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    // Print inorder traversal of the tree
    cout << "Inorder traversal of binary search tree: ";
    inorder(root);
    cout << endl;

    // Search for a key in the tree
    int key = 60;
    Node* searched = search(root, key);
    if (searched == NULL) {
        cout << key << " not found in the tree" << endl;
    }
    else {
        cout << key << " found at address " << searched << endl;
    }

    // Find maximum element in the tree
    Node* max = findMax(root);
    if (max == NULL) {
        cout << "Tree is empty" << endl;
    }
    else {
        cout << "Maximum element in the tree is " << max->key << endl;
    }

    // Find minimum element in the tree
    Node* min = findMin(root);
    if (min == NULL) {
        cout << "Tree is empty" << endl;
    }
    else {
        cout << "Minimum element in the tree is " << min->key << endl;
    }

    // Print preorder traversal of the tree
    cout << "Preorder traversal of binary search tree: ";
    preorder(root);
    cout << endl;

    // Print postorder traversal of the tree
    cout << "Postorder traversal of binary search tree: ";
    postorder(root);
    cout << endl;

    return 0;
}