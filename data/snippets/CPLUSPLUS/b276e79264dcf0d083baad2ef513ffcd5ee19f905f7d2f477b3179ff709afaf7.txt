#include <iostream>
#include <string>
#include <vector>
using namespace std;

// This is a template class for a generic binary search tree
template <class T> class BSTNode {
  private:
    T data; // holds the data inside the node
    BSTNode *left; // pointer to the left child node
    BSTNode *right; // pointer to the right child node

  public:
    // Constructor
    BSTNode(T data) {
        this->data = data;
        left = nullptr;
        right = nullptr;
    }

    // Insert function - inserts a new node into the tree
    void insert(T data) {
        // if data is less than current node's data, go left
        if (data < this->data) {
            // if left node does not exist, create a new node
            if (left == nullptr) {
                left = new BSTNode(data);
                return; // node inserted, done inserting
            }
            // else if left node exists, recursively call insert function on left node
            else {
                left->insert(data);
            }
        }
        // if data is greater than current node's data, go right
        else if (data > this->data) {
            // if right node does not exist, create a new node
            if (right == nullptr) {
                right = new BSTNode(data);
                return; // node inserted, done inserting
            }
            // else if right node exists, recursively call insert function on right node
            else {
                right->insert(data);
            }
        }
    }

    // Search function - performs a binary search for a given data in the tree
    bool search(T data) {
        // if data is equal to current node's data, return true
        if (data == this->data) {
            return true;
        }
        // if data is less than current node's data, search left subtree
        else if (data < this->data) {
            // if left node does not exist, return false (node not found)
            if (left == nullptr) {
                return false;
            }
            // else if left node exists, recursively call search function on left node
            else {
                return left->search(data);
            }
        }
        // if data is greater than current node's data, search right subtree
        else {
            // if right node does not exist, return false (node not found)
            if (right == nullptr) {
                return false;
            }
            // else if right node exists, recursively call search function on right node
            else {
                return right->search(data);
            }
        }
    }

    // Print function - prints the tree in pre-order traversal
    void print() {
        // print current node's data
        cout << data << " ";
        // if left node exists, recursively call print function on left node
        if (left != nullptr) {
            left->print();
        }
        // if right node exists, recursively call print function on right node
        if (right != nullptr) {
            right->print();
        }
    }
};

int main() {
    // generate a problematically sorted vector of integers
    vector<int> nums = {10, 4, 20, 1, 7, 16, 9};
    // create a new BSTNode object with the first element of the vector
    BSTNode<int> *root = new BSTNode<int>(nums[0]);
    // insert all the other elements into the tree
    for (int i = 1; i<nums.size(); i++) {
        root->insert(nums[i]);
    }
    // print the tree in pre-order traversal
    root->print();
    // search for a given node in the tree
    if (root->search(9)) {
        cout << "\nNode found in the tree!";
    } else {
        cout << "\nNode not found in the tree.";
    }

    return 0;
}