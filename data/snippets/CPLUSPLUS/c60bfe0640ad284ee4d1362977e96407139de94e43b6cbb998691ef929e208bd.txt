#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

// Class for creating a binary search tree
class BinarySearchTree {
private:
    // Structure for each node in the tree
    struct Node {
        int data; // Data stored in the node
        Node* left; // Pointer to the left child
        Node* right; // Pointer to the right child

        // Constructor for Node, sets default values
        Node(int data) : data(data), left(nullptr), right(nullptr) {}
    };

    Node* root; // Pointer to the root of the tree

public:
    // Constructor for BinarySearchTree, sets root to nullptr
    BinarySearchTree() : root(nullptr) {}

    // Function to check if the tree is empty
    bool isEmpty() {
        return root == nullptr;
    }

    // Function to insert a node into the tree
    void insert(int data) {
        // If tree is empty, insert the node at the root
        if (isEmpty()) {
            root = new Node(data);
            return;
        }

        // Temporary pointer to traverse the tree
        Node* temp = root;

        // Loop until we find the proper position for the new node
        while (true) {
            // If data is less than current node, go to the left subtree
            if (data < temp->data) {
                // If left child is empty, insert the node and break out of the loop
                if (temp->left == nullptr) {
                    temp->left = new Node(data);
                    break;
                }
                // Otherwise, go to the left child and continue traversal
                else {
                    temp = temp->left;
                }
            }
            // If data is greater than current node, go to the right subtree
            else if (data > temp->data) {
                // If right child is empty, insert the node and break out of the loop
                if (temp->right == nullptr) {
                    temp->right = new Node(data);
                    break;
                }
                // Otherwise, go to the right child and continue traversal
                else {
                    temp = temp->right;
                }
            }
            // If data is equal to current node, do not insert (no duplicates allowed)
            else {
                cout << "Duplicates not allowed." << endl;
                return;
            }
        }
    }

    // Function to search for a node in the tree
    bool search(int data) {
        // If tree is empty, node cannot be found
        if (isEmpty()) {
            return false;
        }

        // Temporary pointer to traverse the tree
        Node* temp = root;

        // Loop until we either find the node or reach the end
        while (temp != nullptr) {
            // If data is less than current node, go to the left subtree
            if (data < temp->data) {
                temp = temp->left;
            }
            // If data is greater than current node, go to the right subtree
            else if (data > temp->data) {
                temp = temp->right;
            }
            // If data is equal to current node, node has been found
            else {
                return true;
            }
        }

        // If we reach here, node was not found
        return false;
    }

    // Function to find the minimum value in the tree
    Node* findMin(Node* root) {
        // If tree is empty, return nullptr
        if (root == nullptr) {
            return nullptr;
        }

        // If left child is empty, we have reached the minimum value
        if (root->left == nullptr) {
            return root;
        }

        // Recursively traverse to the left subtree
        return findMin(root->left);
    }

    // Function to delete a node from the tree
    Node* remove(Node* root, int data) {
        // If tree is empty, return nullptr
        if (root == nullptr) {
            return root;
        }

        // If data is less than current node, go to the left subtree
        if (data < root->data) {
            root->left = remove(root->left, data);
        }
        // If data is greater than current node, go to the right subtree
        else if (data > root->data) {
            root->right = remove(root->right, data);
        }
        // If data is equal to current node, node has been found for deletion
        else {
            // If node has no children, simply delete it
            if (root->left == nullptr && root->right == nullptr) {
                delete root;
                root = nullptr;
            }
            // If node has one child, replace it with the child and delete the node
            else if (root->left == nullptr) {
                Node* temp = root;
                root = root->right;
                delete temp;
            }
            else if (root->right == nullptr) {
                Node* temp = root;
                root = root->left;
                delete temp;
            }
            // If node has two children, replace it with the minimum value in the right subtree
            else {
                Node* temp = findMin(root->right);
                root->data = temp->data;
                root->right = remove(root->right, temp->data);
            }
        }

        // Return the updated root after deletion
        return root;
    }
};

int main() {
    // Seed the random number generator
    srand(time(NULL));

    // Create a binary search tree
    BinarySearchTree tree;

    // Insert 10 random values into the tree
    for (int i = 0; i < 10; i++) {
        int value = rand() % 100;
        cout << "Inserting value: " << value << endl;
        tree.insert(value);
    }

    // Search for 5 random values in the tree
    for (int i = 0; i < 5; i++) {
        int value = rand() % 100;
        if (tree.search(value)) {
            cout << "Value " << value << " found in tree." << endl;
        }
        else {
            cout << "Value " << value << " not found in tree." << endl;
        }
    }

    return 0;
}