#include <iostream>

// Define a templated class named 'Container'
template <class T>
class Container{
private:
  T* myArray; // Pointer to dynamic array
  int size; // Size of array
public:
  // Constructor
  Container(int s){
    size = s;
    // Allocate memory for array
    myArray = new T[size];
  }

  // Destructor
  ~Container(){
    // Deallocate memory for array
    delete[] myArray;
  }

  // Function to insert element at given index in array
  void insert(T element, int index){
    // Check if index is within range
    if(index >= size || index < 0){
      std::cout << "Index out of bounds" << std::endl;
      return;
    }

    // Insert element at given index
    myArray[index] = element;
  }

  // Function to print elements in array
  void print(){
    // Loop through array and print each element
    for(int i = 0; i < size; i++){
      std::cout << myArray[i] << " ";
    }
    std::cout << std::endl;
  }
};

// Main function
int main(){
  // Create an instance of Container with integer values and size of 5
  Container<int> myContainer(5);

  // Insert values into the container
  myContainer.insert(1, 0);
  myContainer.insert(2, 1);
  myContainer.insert(3, 2);
  myContainer.insert(4, 3);
  myContainer.insert(5, 4);

  // Print the container
  myContainer.print();

  return 0;
}

/* Output:
1 2 3 4 5
*/