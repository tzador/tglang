// This program uses recursion to simulate a game of hangman

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

// Function to check if a character is present in a string
bool isPresent(char key, string str) {
    if (str.find(key) != string::npos) {
        return true;
    }
    return false;
}

// Function to update the display string with correctly guessed characters
void updateDisplayString(char key, string word, string& display) {
    for (int i = 0; i < word.length(); i++) {
        if (word[i] == key) {
            display[i] = key;
        }
    }
}

// Function to print the current state of the hangman game
void printGame(string display, int remainingAttempts) {
    cout << display << endl;
    cout << "Remaining attempts: " << remainingAttempts << endl;
}

// Recursive function to play the game of hangman
void playHangman(string word, int attempt, int remainingAttempts, string display, vector<char>& guessedLetters) {
    // Base case: all letters have been guessed or there are no remaining attempts
    if (display.find('_') == string::npos || remainingAttempts == 0) {
        if (display.find('_') == string::npos) {
            cout << "You guessed the word '" << word << "' correctly!" << endl;
        }
        else {
            cout << "You ran out of attempts. The word was '" << word << "'." << endl;
        }
        return;
    }

    // Prompt the user for a guess
    char guess;
    cout << "Guess a letter: ";
    cin >> guess;

    // Check if letter has already been guessed
    if (find(guessedLetters.begin(), guessedLetters.end(), guess) == guessedLetters.end()) {
        guessedLetters.push_back(guess);

        // Update display string and check if letter is in the word
        if (isPresent(guess, word)) {
            updateDisplayString(guess, word, display);
            cout << "Correct Guess!" << endl;
            printGame(display, remainingAttempts);
        }
        // Letter is not in the word
        else {
            cout << "Incorrect! Try again." << endl;
            remainingAttempts--;
            printGame(display, remainingAttempts);
        }
    }
    // Letter has already been guessed
    else {
        cout << "You already guessed that letter. Try again." << endl;
        printGame(display, remainingAttempts);
    }

    // Recursive call to continue playing the game
    playHangman(word, attempt + 1, remainingAttempts, display, guessedLetters);
}

int main() {
    // Set up game
    string word = "c++";
    string display = string(word.length(), '_');
    int remainingAttempts = 6;
    vector<char> guessedLetters;

    // Begin game
    cout << "Welcome to Hangman. The word has " << word.length() << " letters. Good luck!" << endl;
    printGame(display, remainingAttempts);
    playHangman(word, 1, remainingAttempts, display, guessedLetters);

    return 0;
}