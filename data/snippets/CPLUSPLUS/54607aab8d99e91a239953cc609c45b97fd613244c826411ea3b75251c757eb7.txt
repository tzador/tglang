// This code snippet demonstrates a complex class hierarchy in C++

#include <iostream> // Include necessary libraries
#include <string>

using namespace std;

// Base class Person
class Person {
protected:
    string name;
    int age;
public:
    Person(string n, int a) { // Constructor
        name = n;
        age = a;
    }
    virtual void introduceSelf() { // Virtual function
        cout << "Hi, my name is " << name << " and I am " << age << " years old." << endl;
    }
};

// Derived class Student from Person
class Student : public Person {
private:
    string major;
public:
    Student(string n, int a, string m) : Person(n, a) { // Constructor
        major = m;
    }
    void introduceSelf() override { // Override function
        cout << "Hello, I am " << name << " and I am " << age << " years old. I am majoring in " << major << "." << endl;
    }
};

// Derived class Teacher from Person
class Teacher : public Person {
private:
    string subject;
public:
    Teacher(string n, int a, string s) : Person(n, a) { // Constructor
        subject = s;
    }
    void introduceSelf() override { // Override function
        cout << "Greetings, my name is " << name << " and I am " << age << " years old. I teach " << subject << "." << endl;
    }
};

// Main function
int main()
{
    // Create instances of Student and Teacher
    Student stud1("John", 20, "Computer Science");
    Teacher teach1("Ms. Smith", 35, "Biology");

    // Use polymorphism to call introduceSelf()
    stud1.introduceSelf();
    teach1.introduceSelf();

    return 0;
}