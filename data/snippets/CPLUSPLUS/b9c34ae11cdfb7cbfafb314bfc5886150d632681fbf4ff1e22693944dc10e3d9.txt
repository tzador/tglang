// This program implements a sorting algorithm
#include <iostream>

// Function to perform partition step in QuickSort
int partition(int *arr, int low, int high) {
    // Select the pivot element
    int pivot = arr[high];
    int i = (low - 1);

    // Put the elements smaller than pivot on the left,
    // and greater than pivot on the right of pivot
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            // Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    // Swap arr[i + 1] and arr[high]
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return (i + 1);
}

// Function to perform QuickSort
void quickSort(int *arr, int low, int high) {
    if (low < high) {
        // Divide the array into two subarrays
        int pivot = partition(arr, low, high);
        // Recursively sort the subarrays
        quickSort(arr, low, pivot - 1);
        quickSort(arr, pivot + 1, high);
    }
}

// Function to print an array
void printArray(int *arr, int size) {
    for (int i = 0; i < size; i++) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

// Driver code
int main() {
    int arr[] = {5, 2, 8, 6, 1, 3, 9, 4, 7};
    int size = sizeof(arr) / sizeof(arr[0]);

    std::cout << "Original array:" << std::endl;
    printArray(arr, size);

    // Perform quicksort on the array
    quickSort(arr, 0, size - 1);

    std::cout << "Sorted array:" << std::endl;
    printArray(arr, size);

    return 0;
}

/* Output:
 Original array:
 5 2 8 6 1 3 9 4 7
 Sorted array:
 1 2 3 4 5 6 7 8 9
*/