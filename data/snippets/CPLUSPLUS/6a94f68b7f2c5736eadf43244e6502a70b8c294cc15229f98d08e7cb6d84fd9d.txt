/**
This program implements a binary search tree
using classes in C++

Author: John Smith
**/

#include <iostream>
#include <queue>
using namespace std;

// class representing a node in the binary search tree
class Node {
    public:
    int data; // data stored in the node
    Node* left; // pointer to the left child
    Node* right; // pointer to the right child

    // constructor for Node class
    Node(int value) {
        data = value;
        left = NULL;
        right = NULL;
    }
};

// class representing a binary search tree
class BinarySearchTree {
    private:
    Node* root; // pointer to the root of the tree

    public:
    // default constructor for BinarySearchTree class
    BinarySearchTree() {
        root = NULL;
    }

    // function to insert a new node in the tree
    void insert(Node* curr, int value) {
        if (curr == NULL) { // if tree is empty, make new node the root
            root = new Node(value);
        }
        else if (value <= curr->data) { // if value is less than current node, insert in the left subtree
            if (curr->left == NULL) { // if left child is empty, create new node and assign it as the left child
                curr->left = new Node(value);
            }
            else { // if left child is not empty, recursively call insert function with left child as the current node
                insert(curr->left, value);
            }
        }
        else { // if value is greater than current node, insert in the right subtree
            if (curr->right == NULL) { // if right child is empty, create new node and assign it as the right child
                curr->right = new Node(value);
            }
            else { // if right child is not empty, recursively call insert function with right child as the current node
                insert(curr->right, value);
            }
        }
    }

    // function to print the tree in level order traversal
    void printLevelOrder() {
        if (root == NULL) { // if tree is empty, return
            return;
        }
        queue<Node*> q; // creating a queue to store nodes
        q.push(root); // pushing root node to the queue
        while (!q.empty()) { // iterating until queue is empty
            Node* curr = q.front(); // storing the front node in a variable
            cout << curr->data << " "; // printing data of the current node
            if (curr->left != NULL) { // if left child is not empty, push it to the queue
                q.push(curr->left);
            }
            if (curr->right != NULL) { // if right child is not empty, push it to the queue
                q.push(curr->right);
            }
            q.pop(); // removing the front node from the queue
        }
    }
};

// main function
int main() {
    // creating a new binary search tree object
    BinarySearchTree bst;
    // inserting nodes in the tree
    bst.insert(bst.root, 5);
    bst.insert(bst.root, 2);
    bst.insert(bst.root, 8);
    bst.insert(bst.root, 1);
    bst.insert(bst.root, 4);
    bst.insert(bst.root, 7);
    bst.insert(bst.root, 9);
    // printing the tree in level order traversal
    bst.printLevelOrder();
    return 0;
}