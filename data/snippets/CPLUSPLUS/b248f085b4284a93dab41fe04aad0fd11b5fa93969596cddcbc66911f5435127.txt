// This code snippet demonstrates the use of classes and inheritance in C++

// Defining the base class named 'Shape'
class Shape{
    protected: // Protected Variables
        double height;
        double width;
    public: // Public Functions
        void setHeight(double h){
            height = h;
        }
        void setWidth(double w){
            width = w;
        }
        virtual double calculateArea() = 0; // Pure virtual function, making 'Shape' an abstract class
};

// Defining the derived class named 'Rectangle'
class Rectangle: public Shape{ // Inheritance
    public:
        double calculateArea() override{ // Function overloading
            return height * width;
        }
};

// Defining the derived class named 'Triangle'
class Triangle: public Shape{
    public:
        double calculateArea() override{
            return (height * width) / 2;
        }
};

// Main function
int main(){
    // Creating an object of class 'Rectangle'
    Rectangle rect;

    // Setting height and width using the functions of base class 'Shape'
    rect.setHeight(5.0);
    rect.setWidth(10.0);

    // Calculating and printing the area of rectangle
    double rect_area = rect.calculateArea();
    cout<<"Area of rectangle: "<<rect_area<<endl;

    // Creating an object of class 'Triangle'
    Triangle tri;

    // Setting height and width using the functions of base class 'Shape'
    tri.setHeight(6.0);
    tri.setWidth(8.0);

    // Calculating and printing the area of triangle
    double tri_area = tri.calculateArea();
    cout<<"Area of triangle: "<<tri_area<<endl;

    return 0;
}