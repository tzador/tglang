/*
This is a long and complex code snippet written in C++.
It calculates the sum of all prime numbers up to a given number.
*/
#include <iostream>
#include <vector>

using namespace std;

// Function to generate all prime numbers up to a given limit
vector<int> generatePrimes(int limit) {
    vector<int> primes;
    vector<bool> isPrime(limit+1, true); // Create a boolean vector to store whether a number is prime
    isPrime[0] = isPrime[1] = false; // Set 0 and 1 as not prime

    // Sieve of Eratosthenes algorithm to mark all non-prime numbers
    for (int i = 2; i*i <= limit; i++) {
        if (isPrime[i]) {
            for (int j = i*i; j <= limit; j += i) {
                isPrime[j] = false;
            }
        }
    }

    // Add all prime numbers to the primes vector
    for (int i = 2; i < limit; i++) {
        if (isPrime[i]) {
            primes.push_back(i);
        }
    }

    return primes;
}

// Function to calculate the sum of all numbers in a given vector
int calculateSum(vector<int> nums) {
    int sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    return sum;
}

int main() {
    int limit;
    cout << "Enter a number: ";
    cin >> limit;
    vector<int> primes = generatePrimes(limit); // Generate all prime numbers up to the limit
    int sum = calculateSum(primes); // Calculate the sum of all prime numbers
    cout << "Sum of all prime numbers up to " << limit << " is " << sum << endl;
    return 0;
}