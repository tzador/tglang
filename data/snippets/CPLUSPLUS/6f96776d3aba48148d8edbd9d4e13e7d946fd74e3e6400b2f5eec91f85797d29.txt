/*
This code snippet creates a binary search tree and performs various operations on it.
It uses object-oriented programming concepts such as classes and pointers.
*/

#include <iostream>

using namespace std;

// Node class to represent a node in the tree
class Node {
    public:
        int data; // data stored in the node
        Node *left, *right; // child pointers

        // constructor to initialize a node with given data
        Node(int value) {
            data = value;
            left = right = NULL;
        }
};

// Binary Search Tree class to store and manipulate the tree
class BinarySearchTree {
    private:
        Node *root; // root pointer to the tree

    public:
        // constructor to initialize an empty tree with null root
        BinarySearchTree() {
            root = NULL;
        }

        // function to insert a new node in the tree
        void insert(int value) {
            // create a new node with given data
            Node *newNode = new Node(value);

            // if tree is empty, make the new node as root
            if (root == NULL) {
                root = newNode;
            }
            else {
                Node *current = root; // current node pointer
                Node *parent = NULL; // parent node pointer

                // loop until a suitable position is found for new node
                while (true) {
                    parent = current;

                    // if data is less than current node, go to left child
                    if (value < current->data) {
                        current = current->left;

                        // if left child is null, insert at this position
                        if (current == NULL) {
                            parent->left = newNode;
                            break;
                        }
                    }
                    // if data is greater than current node, go to right child
                    else if (value > current->data) {
                        current = current->right;

                        // if right child is null, insert at this position
                        if (current == NULL) {
                            parent->right = newNode;
                            break;
                        }
                    }
                    // if data is already present in the tree, stop insertion
                    else {
                        cout << "Cannot insert duplicate value!" << endl;
                        return;
                    }
                }
            }
        }

        // function to search for a value in the tree
        bool search(int value) {
            // if tree is empty, return false
            if (root == NULL) {
                return false;
            }
            else {
                Node *current = root; // current node pointer

                // loop until data is found or all elements are searched
                while(current != NULL) {
                    // if data is found, return true
                    if (value == current->data) {
                        cout << "Found value " << value << " in the tree!" << endl;
                        return true;
                    }
                    // if value is less than current node, go to left child
                    else if (value < current->data) {
                        current = current->left;
                    }
                    // if value is greater than current node, go to right child
                    else {
                        current = current->right;
                    }
                }
                // if data is not found after searching all elements, return false
                cout << "Value " << value << " not found in the tree!" << endl;
                return false;
            }
        }

        // function to delete a node from the tree
        void remove(int value) {
            // if tree is empty, cannot delete
            if (root == NULL) {
                cout << "Tree is empty, cannot delete!" << endl;
                return;
            }
            else {
                Node *current = root; // current node pointer
                Node *parent = NULL; // parent node pointer

                // loop until data is found or all elements are searched
                while (current != NULL && current->data != value) {
                    parent = current;

                    // if value is less than current node, go to left child
                    if (value < current->data) {
                        current = current->left;
                    }
                    // if value is greater than current node, go to right child
                    else {
                        current = current->right;
                    }
                }

                // if value is not found, cannot delete
                if (current == NULL) {
                    cout << "Value " << value << " not found in the tree, cannot delete!" << endl;
                    return;
                }
                // if value is found in root, update root and free current node
                else if (current == root) {
                    root = NULL;
                    delete current;
                }
                // if value is found and it has no children, update parent pointer and delete node
                else if (current->left == NULL && current->right == NULL) {
                    // if value is less than parent node, update left child pointer
                    if (current->data < parent->data) {
                        parent->left = NULL;
                    }
                    // if value is greater than parent node, update right child pointer
                    else {
                        parent->right = NULL;
                    }
                    delete current;
                }
                // if value is found and it has one child, update parent pointer and delete node
                else if (current->left == NULL || current->right == NULL) {
                    // if value is less than parent node, update left child pointer
                    if (current->data < parent->data) {
                        // if left child exists, update parent's left child pointer
                        if (current->left != NULL) {
                            parent->left = current->left;
                        }
                        // if right child exists, update parent's left child pointer
                        else {
                            parent->left = current->right;
                        }
                    }
                    // if value is greater than parent node, update right child pointer
                    else {
                        // if left child exists, update parent's right child pointer
                        if (current->left != NULL) {
                            parent->right = current->left;
                        }
                        // if right child exists, update parent's right child pointer
                        else {
                            parent->right = current->right;
                        }
                    }
                    delete current;
                }
                // if value is found and it has two children
                else {
                    Node *successor = current->right; // successor node pointer
                    Node *successorParent = current; // parent of successor node

                    // loop until the leftmost node is found
                    while(successor->left != NULL) {
                        successorParent = successor;
                        successor = successor->left;
                    }

                    // if successor node is not the right child of current node
                    if (successorParent != current) {
                        // update successor parent's left child pointer to successor right child
                        successorParent->left = successor->right;
                    }
                    else {
                        // update current node's right child pointer to successor right child
                        current->right = successor->right;
                    }

                    // copy data from successor to current node
                    current->data = successor->data;

                    // free memory
                    delete successor;
                }
                // if deletion is successful, print success message
                cout << "Successfully deleted value " << value << " from the tree!" << endl;
            }
        }

        // function to print the tree in in-order traversal
        void printInOrder(Node *node) {
            if (node != NULL) {
                printInOrder(node->left);
                cout << node->data << " ";
                printInOrder(node->right);
            }
        }

        // function to print the tree in pre-order traversal
        void printPreOrder(Node *node) {
            if (node != NULL) {
                cout << node->data << " ";
                printPreOrder(node->left);
                printPreOrder(node->right);
            }
        }

        // function to print the tree in post-order traversal
        void printPostOrder(Node *node) {
            if (node != NULL) {
                printPostOrder(node->left);
                printPostOrder(node->right);
                cout << node->data << " ";
            }
        }

        // function to print the tree in level-order traversal
        void printLevelOrder() {
            // if tree is empty, return
            if (root == NULL) {
                cout << "Tree is empty!" << endl;
                return;
            }
            else {
                // create a temporary queue for tree nodes
                queue<Node *> tempQueue;
                // add root node to the queue
                tempQueue.push(root);

                // loop until all nodes are processed
                while (!tempQueue.empty()) {
                    // dequeue front node and print its value
                    Node *current = tempQueue.front();
                    cout << current->data << " ";
                    // enqueue left child if exists
                    if (current->left != NULL) {
                        tempQueue.push(current->left);
                    }
                    // enqueue right child if exists
                    if (current->right != NULL) {
                        tempQueue.push(current->right);
                    }
                    // remove front node from queue
                    tempQueue.pop();
                }
                cout << endl;
            }
        }
};

// main function to create and use a binary search tree
int main() {
    // create an empty binary search tree
    BinarySearchTree BST;

    // insert some nodes with random values
    BST.insert(15);
    BST.insert(12);
    BST.insert(21);
    BST.insert(17);
    BST.insert(25);
    BST.insert(19);
    BST.insert(13);

    // print the tree in in-order, pre-order, post-order and level-order traversals
    cout << "In-order traversal:" << endl;
    BST.printInOrder(BST.root);
    cout << endl;
    cout << "Pre-order traversal:" << endl;
    BST.printPreOrder(BST.root);
    cout << endl;
    cout << "Post-order traversal:" << endl;
    BST.printPostOrder(BST.root);
    cout << endl;
    cout << "Level-order traversal:" << endl;
    BST.printLevelOrder();
    cout << endl;

    // search for a value in the tree
    cout << "Searching for value 19 in the tree:" << endl;
    BST.search(19);
    // delete a value from the tree
    BST.remove(19);
    // print the tree in level-order to check if deletion successful
    cout << "Level-order traversal after deletion:" << endl;
    BST.printLevelOrder();

    return 0;
}