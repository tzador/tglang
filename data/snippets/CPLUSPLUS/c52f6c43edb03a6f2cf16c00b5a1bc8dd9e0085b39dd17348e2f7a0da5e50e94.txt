#include <iostream>
using namespace std;

//Function to split array into two parts
void splitArray(int arr[], int left, int right, int& index){
    
    //Choosing the pivot element as the middle element
    int pivot = arr[(left + right)/2];
    
    //Keeping track of left and right pointers
    int i = left;
    int j = right;
    
    //Swapping elements based on pivot element
    while(i <= j){
        
        //Finding element on left side that should be on right
        while(arr[i] < pivot){
            i++;
        }
        
        //Finding element on right side that should be on left
        while(arr[j] > pivot){
            j--;
        }
        
        //Swapping elements
        if(i <= j){
            swap(arr[i], arr[j]);
            i++;
            j--;
        }
    }
    
    //Updating index of split point
    index = i;
}

//Function to perform quicksort
void quicksort(int arr[], int left, int right){
    //Initializing index of split point
    int index;
    
    //Splitting array into two parts
    splitArray(arr, left, right, index);
    
    //Recursively sorting left and right subarrays
    if(left < index - 1){
        quicksort(arr, left, index - 1);
    }
    if(index < right){
        quicksort(arr, index, right);
    }
}

//Main function
int main() {
    
    //Input array to be sorted
    int arr[] = {5, 2, 8, 4, 1, 3, 9, 6, 7};
    int size = sizeof(arr)/sizeof(arr[0]);
    
    //Sorting the array using quicksort
    quicksort(arr, 0, size - 1);
    
    //Printing the sorted array
    for(int i = 0; i < size; i++){
        cout << arr[i] << " ";
    }
    return 0;
}