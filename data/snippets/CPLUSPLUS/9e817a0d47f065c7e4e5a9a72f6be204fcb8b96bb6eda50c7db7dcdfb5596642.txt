//Struct for nodes in a binary tree
struct TreeNode
{
    int val; //value stored in the node
    TreeNode *left; //pointer to left child
    TreeNode *right; //pointer to right child

    //constructor to initialize TreeNode
    TreeNode(int x) : val(x), left(NULL), right(NULL) {} 
};

//Function to create a binary tree
TreeNode* createBinaryTree(vector<int> arr)
{
    //check if vector is empty or null
    if (arr.empty() || arr[0] == NULL)
        return NULL;

    //create root node with first element of vector
    TreeNode* root = new TreeNode(arr[0]);

    //create a queue to store nodes
    queue<TreeNode*> q;

    //push root node to queue
    q.push(root);

    //loop through the vector
    for (int i = 1; i < arr.size(); i++)
    {
        //get current parent node from queue
        TreeNode* currParent = q.front();

        //create left child node with current element
        TreeNode* leftChild = new TreeNode(arr[i]);

        //set left child of current parent
        currParent->left = leftChild;

        //push left child to queue
        q.push(leftChild);

        //increment loop index
        i++;

        //if all elements are traversed, break from loop
        if (i >= arr.size())
            break;

        //create right child node with next element
        TreeNode* rightChild = new TreeNode(arr[i]);

        //set right child of current parent
        currParent->right = rightChild;

        //push right child to queue
        q.push(rightChild);
    }

    //return the root of the binary tree
    return root;
}

//Function to print the binary tree in level order
void printLevelOrder(TreeNode* root)
{
    //check if root is null
    if (root == NULL)
        return;

    //create a queue to store nodes
    queue<TreeNode*> q;

    //push root node to queue
    q.push(root);

    //loop until queue is empty
    while (!q.empty())
    {
        //get size of queue
        int size = q.size();

        //loop through all nodes at current level
        for (int i = 0; i < size; i++)
        {
            //get front node from queue
            TreeNode* front = q.front();

            //print value of front node
            cout << front->val << " ";

            //check if left child exists
            if (front->left != NULL)
                //push left child to queue
                q.push(front->left);

            //check if right child exists
            if (front->right != NULL)
                //push right child to queue
                q.push(front->right);

            //pop front node from queue
            q.pop();
        }

        //print new line after each level
        cout << endl;
    }
}

//Driver code to test the functions
int main()
{
    //create a vector with values to be inserted in binary tree
    vector<int> values = { 5, 3, 8, 2, 4, 6, 10 };

    //create binary tree with above vector
    TreeNode* root = createBinaryTree(values);

    //print the binary tree in level order
    printLevelOrder(root);

    //output: 5
    //        3 8
    //        2 4 6 10

    return 0;
}