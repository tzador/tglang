// C++ program to find the longest palindromic substring 
# include <bits/stdc++.h> 
using namespace std; 
  
// Function to print a substring from index start to end 
void printSubStr(char *str, int start, int end) { 
    for (int i = start; i <= end; ++i) 
        cout << str[i]; 
} 
  
// This function prints the longest palindrome substring 
void longestPalSubstr(char *str) { 
    // The total length of the string is stored in n 
    int n = strlen(str); 
  
    // All subarrays of length 1 are palindromes 
    int maxLength = 1, start = 0; 
  
    // Nested loop to cover all possible subarrays 
    for (int i = 0; i < n; i++) { 
        for (int j = i; j < n; j++) {  
            // Initializing temporary strings 
            string temp = ""; 
            for (int k = i; k <= j; k++) 
                temp.push_back(str[k]); 
  
            // Check if the temporary string is a palindrome 
            string rev = temp; 
            reverse(rev.begin(), rev.end()); 
            if (temp == rev) { 
                // Update the maximum length and starting index 
                if (j - i + 1 > maxLength) { 
                    start = i; 
                    maxLength = j - i + 1; 
                } 
            } 
        } 
    } 
  
    // Print the longest palindrome substring 
    cout << "Longest palindrome substring is: "; 
    printSubStr(str, start, start + maxLength - 1); 
} 
  
// Driver code 
int main() { 
    char str[] = "ababbabbad"; 
  
    longestPalSubstr(str); 
       
    return 0; 
}