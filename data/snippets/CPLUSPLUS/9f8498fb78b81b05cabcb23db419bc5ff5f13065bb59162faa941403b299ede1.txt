class Graph { //Creates a class for representing graphs
private:
    int numVertices; //Stores the number of vertices in the graph
    unordered_map<int, vector<int>> adjacencyList; //Creates an unordered map for storing the adjacency list of the graph
public:
    Graph(int vertices) { //Constructor function to initialize the graph with given number of vertices
        numVertices = vertices; //Sets the number of vertices in the graph
    }

    void addEdge(int source, int destination) { //Function to add an edge between two vertices in the graph
        adjacencyList[source].push_back(destination); //Adds the destination vertex to the adjacency list of the source vertex
        adjacencyList[destination].push_back(source); //Adds the source vertex to the adjacency list of the destination vertex
    }

    void printGraph() { //Function to print the graph in adjacency list form
        for (auto it = adjacencyList.begin(); it != adjacencyList.end(); it++) { //Iterates through the adjacency list
            cout << "Vertex " << it->first << " is connected to: "; //Prints the source vertex
            for (int i = 0; i < it->second.size(); i++) { //Iterates through the adjacency list of the source vertex
                cout << it->second[i] << " "; //Prints the destination vertex
            }
            cout << endl; //Prints a new line
        }
    }
};

int main() { //Main function
    Graph g(5); //Creating a graph object with 5 vertices
    g.addEdge(0, 1); //Adding an edge between vertices 0 and 1
    g.addEdge(0, 4); //Adding an edge between vertices 0 and 4
    g.addEdge(1, 2); //Adding an edge between vertices 1 and 2
    g.addEdge(1, 3); //Adding an edge between vertices 1 and 3
    g.addEdge(1, 4); //Adding an edge between vertices 1 and 4
    g.addEdge(2, 3); //Adding an edge between vertices 2 and 3
    g.addEdge(3, 4); //Adding an edge between vertices 3 and 4
    g.printGraph(); //Printing the graph in adjacency list form
    return 0; //End of program
}