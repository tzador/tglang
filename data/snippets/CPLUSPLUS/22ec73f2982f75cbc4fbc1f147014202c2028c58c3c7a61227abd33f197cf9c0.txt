#include <iostream>
#include <vector>

using namespace std;

// A function to merge two subarrays of vector arr[]
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void merge(vector<int> &arr, int l, int m, int r)
{
	// create temporary vectors to store left and right subarrays
	vector<int> temp1(m - l + 1);
	vector<int> temp2(r - m);

	// copy data from arr to temporary vectors
	for (int i = 0; i < (m - l + 1); i++)
		temp1[i] = arr[l + i];
	for (int j = 0; j < (r - m); j++)
		temp2[j] = arr[m + 1 + j];

	// initialize indices for temporary vectors
	int i = 0, j = 0;

	// initial index of merged subarray
	int k = l;

	// merge the temporary vectors back into arr
	while (i < (m - l + 1) && j < (r - m))
	{
		if (temp1[i] <= temp2[j])
		{
			arr[k] = temp1[i];
			i++;
		}
		else
		{
			arr[k] = temp2[j];
			j++;
		}
		k++;
	}

	// copy the remaining elements of temp1 if any
	while (i < (m - l + 1))
	{
		arr[k] = temp1[i];
		i++;
		k++;
	}

	// copy the remaining elements of temp2 if any
	while (j < (r - m))
	{
		arr[k] = temp2[j];
		j++;
		k++;
	}
}

// A function to perform merge sort on vector arr[]
// arr - input vector to be sorted
// l - starting index of the vector
// r - ending index of the vector
void mergeSort(vector<int> &arr, int l, int r)
{
	if (l < r)
	{
		//find the middle point
		int m = l + (r - l) / 2;

		//sort first and second halves recursively
		mergeSort(arr, l, m);
		mergeSort(arr, m + 1, r);

		//merge the sorted halves
		merge(arr, l, m, r);
	}
}

int main()
{
	// Example inputs for the vector
	vector<int> input = { 12, 11, 13, 5, 6, 7 };

	// Print unsorted vector
	cout << "Unsorted Vector: ";
	for (int i = 0; i < input.size(); i++)
		cout << input[i] << " ";

	// Call mergeSort function
	mergeSort(input, 0, input.size() - 1);

	// Print sorted vector
	cout << "\nSorted Vector: ";
	for (int i = 0; i < input.size(); i++)
		cout << input[i] << " ";

	return 0;
}