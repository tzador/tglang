// This is a complex code snippet written in C++

// Declaration of a multithreaded function that takes in a parameter
void* multithreadedFunction(void* param) 
{
    // Perform some initial setup
    int threadID = *(int*) param;
    double result = 0;
    int count = 1000;
    // Use a for loop to calculate some complex operations
    for (int i = 0; i < count; i++) {
        // Perform some complex calculation
        result += i * tan(i * threadID) - pow(i, threadID);
    }
    // Return the result
    return (void*) result;
}

// Main function
int main()
{
    // Declare a variable to store the thread IDs
    int threadIDs[100];
    // Use a for loop to create 100 threads, each with a unique ID
    for (int i = 0; i < 100; i++) {
        // Store the current thread ID in the array
        threadIDs[i] = i;
        // Create a new thread, passing in the multithreaded function and the current thread ID as parameters
        pthread_create(&threads[i], NULL, multithreadedFunction, &threadIDs[i]);
    }
    // Join all threads to ensure they finish before continuing
    for (int i = 0; i < 100; i++) {
        pthread_join(threads[i], NULL);
    }
    // Print the results
    for (int i = 0; i < 100; i++) {
        // Cast the returned result to a double and print it
        printf("Thread %d Calculated Result: %lf\n", threadIDs[i], (double) pthread_join(threads[i], NULL));
    }
    return 0;
}