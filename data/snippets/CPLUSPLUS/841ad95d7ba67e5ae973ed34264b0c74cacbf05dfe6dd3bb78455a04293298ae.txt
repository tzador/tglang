//This program implements the QuickSort algorithm in C++

#include <iostream>

using namespace std;

//Function to swap two elements in an array
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

//Function to partition the array and return the index of the pivot element
int partition(int arr[], int low, int high) {
    int pivot = arr[high]; //Select last element as pivot
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        //If current element is smaller than or equal to pivot, increment index of smaller element
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    //Swap the pivot element with the element at index (i+1)
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

//Function to perform QuickSort
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        //Find the index of pivot element
        int pi = partition(arr, low, high);

        //Recursively call quickSort on subarrays before and after pivot element
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = { 7, 3, 9, 1, 4, 6, 2, 8, 5 };
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Original Array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    //Call quickSort function
    quickSort(arr, 0, n - 1);

    cout << "Sorted Array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}

/*
Output:

Original Array: 7 3 9 1 4 6 2 8 5 
Sorted Array: 1 2 3 4 5 6 7 8 9
*/