// Header file for teleop command class
#ifndef TELEOP_COMMAND_H
#define TELEOP_COMMAND_H

#include <iostream>
#include <thread>

/*
    Class for handling teleoperation commands.
    Has functions for starting, stopping, and
    changing direction of movement.
*/
class TeleopCommand {
private:
    bool is_running; // flag for whether teleop is running or not
    int direction; // direction of movement, 1 for forward, -1 for backward
    std::thread t; // thread for running teleop in the background

public:
    TeleopCommand(); // constructor
    ~TeleopCommand(); // destructor
    void start(); // function for starting teleop
    void stop(); // function for stopping teleop
    void change_direction(int new_dir); // function for changing direction of movement
    void teleop_loop(); // function for running teleop in the background
};

/*
    Constructor for TeleopCommand class.
    Sets is_running flag to false and direction to 1.
*/
TeleopCommand::TeleopCommand() {
    is_running = false;
    direction = 1;
}

/*
    Destructor for TeleopCommand class.
    Calls the stop function to ensure teleop is stopped before destruction.
*/
TeleopCommand::~TeleopCommand() {
    stop();
}

/*
    Function for starting teleop.
    Creates a new thread and calls teleop_loop function.
*/
void TeleopCommand::start() {
    if (!is_running) { // check if teleop is already running
        t = std::thread(teleop_loop); // create new thread for teleop loop
        is_running = true; // set is_running flag to true
        std::cout << "Teleop started." << std::endl;
    }
}

/*
    Function for stopping teleop.
    Changes is_running flag to false and joins the thread if it exists.
*/
void TeleopCommand::stop() {
    if (is_running) { // check if teleop is running
        is_running = false; // set is_running flag to false
        if (t.joinable()) { // check if thread is joinable
            t.join(); // join the thread
        }
        std::cout << "Teleop stopped." << std::endl;
    }
}

/*
    Function for changing direction of movement.
    Takes in an integer as a new direction, either 1 or -1.
*/
void TeleopCommand::change_direction(int new_dir) {
    if (new_dir == 1 || new_dir == -1) { // check if input is a valid direction
        direction = new_dir; // set direction to new direction
        std::cout << "Direction changed to " << new_dir << "." << std::endl;
    }
    else {
        std::cout << "Invalid direction input." << std::endl;
    }
}

/*
    Function for running teleop in the background.
    Loops until the is_running flag is set to false.
    Prints out the current direction every second.
*/
void TeleopCommand::teleop_loop() {
    while (is_running) { // loop until teleop is stopped
        std::cout << "Moving " << direction << "." << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(1)); // sleep for 1 second
    }
}

#endif // TELEOP_COMMAND_H