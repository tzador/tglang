// This is a complex code snippet in C++
// It involves a sorting algorithm called QuickSort
// This is a function that partitions the array and returns the index of the pivot element
int partition(int arr[], int low, int high){

    // This is the pivot element
    int pivot = arr[high];

    // This variable tracks the index of the smaller elements
    int i = low - 1;

    // This loop compares all the elements in the array to the pivot
    for(int j = low; j <= high-1; j++){

        // If the current element is smaller than the pivot,
        // swap it with the element at the index i
        if(arr[j] < pivot){

            i++;

            // Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // After the loop, swap the pivot element with the element at index i+1
    int temp = arr[i+1];
    arr[i+1] = arr[high];
    arr[high] = temp;

    // Return the index of the pivot element
    return i+1;
}

// This function implements the QuickSort algorithm recursively
void quickSort(int arr[], int low, int high){
    
    // If the lower index is less than the higher index, there are still unsorted elements
    if(low < high){

        // Get the partition index through calling the partition function
        int pi = partition(arr, low, high);

        // Sort the elements before and after the partition
        quickSort(arr, low, pi-1);
        quickSort(arr, pi+1, high);
    }
}

// Now let's test our implementation
int main(){

    // Create an unsorted array
    int arr[] = {5, 1, 4, 10, 3, 8};

    // Get the size of the array
    int size = sizeof(arr) / sizeof(arr[0]);

    // Sort the array using QuickSort
    quickSort(arr, 0, size-1);

    // Print the sorted array
    for(int i = 0; i < size; i++){
        cout << arr[i] << " ";
    }

    // Output: 1 3 4 5 8 10
}