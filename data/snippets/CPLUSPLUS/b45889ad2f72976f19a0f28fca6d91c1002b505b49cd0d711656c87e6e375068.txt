#include <iostream> // include standard input/output stream library for user interactions
#include <string> // include string library for manipulating strings
#include <vector> // include vector library for creating resizable arrays

using namespace std; // use standard namespace for simpler code

class Shape { // define a class called Shape
private: // private access modifier for encapsulation
	string name; // declare a string variable called name
protected: // protected access modifier for inheritance
	int sides; // declare an integer variable called sides
public: // public access modifier for access outside the class
	Shape(string n, int s) { // constructor function with parameters name and sides
		name = n; // initialize name variable with passed parameter
		sides = s; // initialize sides variable with passed parameter
	}
	string getName() { // getter function for name variable
		return name; // return the value stored in name variable
	}
	int getSides() { // getter function for sides variable
		return sides; // return the value stored in sides variable
	}
	virtual void printInfo() { // virtual function for polymorphism
		cout << "Name: " << name << endl; // print out the name of the shape
		cout << "Number of Sides: " << sides << endl; // print out the number of sides of the shape
	}
};

class Circle : public Shape { // define a subclass called Circle that inherits from Shape class
private: // private access modifier for encapsulation
	double radius; // declare a double variable called radius
public: // public access modifier for access outside the class
	Circle(string n, int s, double r) : Shape(n, s) { // constructor function with parameters name, sides, and radius
		radius = r; // initialize radius variable with passed parameter
	}
	double getArea() { // method for calculating the area of the circle
		return 3.14 * radius * radius; // return the calculated area of the circle
	}
	void printInfo() { // overridden printInfo function for specific circle information
		cout << "---CIRCLE---" << endl; // print out shape title
		cout << "Name: " << getName() << endl; // print out the name of the circle
		cout << "Number of Sides: " << getSides() << endl; // print out the number of sides of the circle
		cout << "Radius: " << radius << endl; // print out the radius of the circle
		cout << "Area: " << getArea() << endl; // print out the area of the circle using getArea method
	}
};

class Triangle : public Shape { // define a subclass called Triangle that inherits from Shape class
private: // private access modifier for encapsulation
	double base; // declare a double variable called base
	double height; // declare a double variable called height
public: // public access modifier for access outside the class
	Triangle(string n, int s, double b, double h) : Shape(n, s) { // constructor function with parameters name, sides, base, and height
		base = b; // initialize base variable with passed parameter
		height = h; // initialize height variable with passed parameter
	}
	double getArea() { // method for calculating the area of the triangle
		return 0.5 * base * height; // return the calculated area of the triangle
	}
};

int main() { // main function
	vector<Shape*> shapes; // create a vector of Shape pointers to hold different shapes
	shapes.push_back(new Circle("Circle", 0, 5.5)); // add a circle object to the vector
	shapes.push_back(new Triangle("Triangle", 3, 4.0, 6.0)); // add a triangle object to the vector

	for (int i = 0; i < shapes.size(); i++) { // loop through the vector
		shapes[i]->printInfo(); // call the printInfo function for each shape object
	}

	for (int i = 0; i < shapes.size(); i++) { // loop through the vector again
		delete shapes[i]; // free up the memory allocated for each shape object
	}
	
	system("pause"); // keep the console window open

	return 0; // return 0 to indicate successful program execution
}