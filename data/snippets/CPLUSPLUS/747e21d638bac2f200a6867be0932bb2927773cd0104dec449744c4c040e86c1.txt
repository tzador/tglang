/*
This is a complex function that calculates the determinant of an NxN square matrix.
Input:
    - matrix: a 2D vector representing the square matrix (each row is a vector)
    - n: integer representing the size of the matrix
Output:
    - determinant: a double representing the determinant of the matrix
*/
double calcDeterminant(const vector<vector<double>>& matrix, int n) {

    // base case: if matrix size is 1x1, determinant is just the value of that element
    if (n == 1) {
        return matrix[0][0];
    }

    // create submatrix by removing first row, used for recursive calls
    vector<vector<double>> submatrix(n - 1, vector<double>(n - 1));
    double determinant = 0; // initialize determinant value

    /*
    Loop through each element in the first row of the matrix.
    At each iteration, calculate the minor matrix (without the current column and row)
    and recursively call this function using the minor matrix.
    Then, multiply the minor matrix's determinant by the element value and add it to the total determinant.
    */
    for (int j = 0; j < n; j++) {

        // calculate the minor matrix by removing first row and current column
        for (int i = 1; i < n; i++) {
            int k = 0; // used for indexing in submatrix
            for (int l = 0; l < n; l++) {
                if (l != j) {
                    submatrix[i - 1][k] = matrix[i][l];
                    k++;
                }
            }
        }

        // recursively call function to get determinant of minor matrix
        double minorDeterminant = calcDeterminant(submatrix, n - 1);

        // add the element value multiplied by the minor determinant to total determinant
        determinant += matrix[0][j] * minorDeterminant;
    }

    return determinant; // return the final determinant value
}