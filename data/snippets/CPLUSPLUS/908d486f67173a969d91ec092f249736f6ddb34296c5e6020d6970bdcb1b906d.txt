// Declaring a template class that implements a linked list data structure
template <class T>
class LinkedList {
private:
    // Node structure for a single element in the linked list
    struct Node {
        T data; // Data stored in the node
        Node* next; // Pointer to the next node
        Node* prev; // Pointer to the previous node

        // Node constructor
        Node(T val) {
            data = val;
            next = nullptr;
            prev = nullptr;
        }
    };
    Node* head; // Pointer to the head of the linked list
    Node* tail; // Pointer to the tail of the linked list
    int size; // Size of the linked list

public:
    // Constructor
    LinkedList() {
        head = nullptr;
        tail = nullptr;
        size = 0;
    }

    // Function to add a new element to the end of the linked list
    void push_back(T val) {
        Node* newNode = new Node(val);
        if (size == 0) {
            head = newNode;
            tail = newNode;
        }
        else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
        size++;
    }

    // Function to remove an element from the end of the linked list
    void pop_back() {
        if (size == 0) {
            // Linked list is empty, do nothing
        }
        else if (size == 1) {
            delete tail;
            head = nullptr;
            tail = nullptr;
            size = 0;
        }
        else {
            Node* temp = tail;
            tail = tail->prev;
            tail->next = nullptr;
            delete temp;
            size--;
        }
    }

    // Overloading the [] operator to access elements in the linked list by index
    T& operator[](int index) {
        if (index < 0 || index >= size) {
            // Index out of bounds, return first element
            return head->data;
        }
        else {
            // Traverse the linked list to the specified index
            Node* current = head;
            int count = 0;
            while (count < index) {
                current = current->next;
                count++;
            }
            return current->data;
        }
    }

    // Function to insert an element at a specific index in the linked list
    void insert(int index, T val) {
        if (index < 0 || index >= size) {
            // Index out of bounds, do nothing
            return;
        }
        else if (index == 0) {
            // Insert at the beginning of the linked list
            Node* newNode = new Node(val);
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
            size++;
        }
        else if (index == size - 1) {
            // Insert at the end of the linked list
            push_back(val);
        }
        else {
            // Traverse the linked list to the specified index
            Node* current = head;
            int count = 0;
            while (count < index) {
                current = current->next;
                count++;
            }
            // Insert the new node in between the current node and its previous node
            Node* newNode = new Node(val);
            newNode->next = current;
            newNode->prev = current->prev;
            current->prev->next = newNode;
            current->prev = newNode;
            size++;
        }
    }
};