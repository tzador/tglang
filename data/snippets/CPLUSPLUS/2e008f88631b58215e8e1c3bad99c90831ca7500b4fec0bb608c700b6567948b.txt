// This program implements a binary search tree data structure
#include <iostream>

// Define a class for the binary search tree
class BSTree {
private:
    // Define a structure for the tree nodes
    struct Node {
        int data; // Data stored in the node
        Node* left; // Pointer to the left child node
        Node* right; // Pointer to the right child node
    };

    Node* root; // Pointer to the root node of the tree

    // Recursive function to insert a new node in the tree
    Node* insertHelper(Node* current, int value) {
        // If the current node is empty, create a new node with the given value
        if (current == nullptr) {
            current = new Node;
            current->data = value;
            current->left = nullptr;
            current->right = nullptr;
        }
        // If the value is less than the current node's data, insert it in the left subtree
        else if (value < current->data) {
            current->left = insertHelper(current->left, value);
        }
        // If the value is greater than the current node's data, insert it in the right subtree
        else {
            current->right = insertHelper(current->right, value);
        }

        // Return the updated current node
        return current;
    }

    // Recursive function to search for a value in the tree
    // Returns true if the value is found, false otherwise
    bool searchHelper(Node* current, int value) {
        // If the current node is empty, the value is not found
        if (current == nullptr) {
            return false;
        }
        // If the value is equal to the current node's data, the value is found
        else if (value == current->data) {
            return true;
        }
        // If the value is less than the current node's data, search in the left subtree
        else if (value < current->data) {
            return searchHelper(current->left, value);
        }
        // If the value is greater than the current node's data, search in the right subtree
        else {
            return searchHelper(current->right, value);
        }
    }

public:
    // Constructor - sets the root node to null
    BSTree() {
        root = nullptr;
    }

    // Function to insert a new node in the tree
    void insert(int value) {
        root = insertHelper(root, value);
    }

    // Function to search for a value in the tree
    // Returns true if the value is found, false otherwise
    bool search(int value) {
        return searchHelper(root, value);
    }
};

// Main function to test the BSTree class
int main() {
    BSTree myTree; // Create an instance of the BSTree class

    // Insert some values in the tree
    myTree.insert(5);
    myTree.insert(10);
    myTree.insert(2);
    myTree.insert(8);

    // Search for a value in the tree
    if (myTree.search(2)) {
        std::cout << "Value 2 was found in the tree!" << std::endl;
    }
    else {
        std::cout << "Value 2 was not found in the tree." << std::endl;
    }

    return 0;
}