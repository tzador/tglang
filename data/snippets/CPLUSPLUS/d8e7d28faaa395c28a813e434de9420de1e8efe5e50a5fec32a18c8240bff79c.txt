/*
This is a complex code snippet in C++ that uses a variety of programming concepts
and data structures to solve a specific problem. 
It creates a class called "Book" that represents a book with various attributes
such as title, author, and pages. It also has functions for adding, removing, and
searching for books in a library using a binary search tree.*/

#include <iostream>
#include <string>
using namespace std;

// Defining the Book class
class Book {
    private:
        // Attributes of a book
        string title;
        string author;
        int pages;
    public:
        // Constructor for the Book class
        Book(string t, string a, int p) {
            title = t;
            author = a;
            pages = p;
        }

        // Getter functions for the attributes
        string getTitle() {
            return title;
        }

        string getAuthor() {
            return author;
        }

        int getPages() {
            return pages;
        }
};

// Defining the Node structure for the BST
struct Node {
    Book book;
    Node *left;
    Node *right;
};

// Function to create a new Node
Node *createNode(Book b) {
    Node *newNode = new Node;
    newNode->book = b;
    newNode->left = nullptr;
    newNode->right = nullptr;
    return newNode;
}

// Insert function for the BST
Node *insert(Book b, Node *root) {
    // If the tree is empty
    if (root == nullptr) {
        root = createNode(b);
    }
    // If the new book's title is less than the root's title
    else if (b.getTitle() < root->book.getTitle()) {
        root->left = insert(b, root->left);
    }
    // If the new book's title is greater than the root's title
    else if (b.getTitle() > root->book.getTitle()) {
        root->right = insert(b, root->right);
    }
    // If the new book's title is equal to the root's title
    else {
        cout << "Book already exists in the library" << endl;
    }
    return root;
}

// Function to search for a book in the library
void search(string title, Node *root) {
    // If the book is not found
    if (root == nullptr) {
        cout << "Book not found in the library" << endl;
    }
    // If the book's title is less than the root's title
    else if (title < root->book.getTitle()) {
        search(title, root->left);
    }
    // If the book's title is greater than the root's title
    else if (title > root->book.getTitle()) {
        search(title, root->right);
    }
    // If the book's title is equal to the root's title
    else {
        cout << "Book found in the library: " << root->book.getTitle() << endl;
    }
}

// Function to remove a book from the library
Node *remove(string title, Node *root) {
    // If the book is not found
    if (root == nullptr) {
        cout << "Book not found in the library" << endl;
    }
    // If the book's title is less than the root's title
    else if (title < root->book.getTitle()) {
        root->left = remove(title, root->left);
    }
    // If the book's title is greater than the root's title
    else if (title > root->book.getTitle()) {
        root->right = remove(title, root->right);
    }
    // If the book's title is equal to the root's title
    else {
        // If the root has no children
        if (root->left == nullptr && root->right == nullptr) {
            delete root;
            root = nullptr;
        }
        // If the root has one child
        else if (root->left == nullptr) {
            Node *temp = root->right;
            delete root;
            root = temp;
        }
        else if (root->right == nullptr) {
            Node *temp = root->left;
            delete root;
            root = temp;
        }
        // If the root has two children
        else {
            // Finding the smallest book on the right subtree
            Node *min = root->right;
            while (min->left != nullptr) {
                min = min->left;
            }

            // Replacing the root's data with the smallest book's data 
            root->book = min->book;
            // Deleting the smallest book from the right subtree 
            root->right = remove(min->book.getTitle(), root->right);
        }
    }
    return root;
}

// Function to print the books in the library using inorder traversal
void printInorder(Node *root) {
    if (root != nullptr) {
        printInorder(root->left);
        cout << "Title: " << root->book.getTitle() << " Author: " << root->book.getAuthor() << " Pages: " << root->book.getPages() << endl;
        printInorder(root->right);
    }
}

// Main function
int main() {
    // Creating a new library
    Node *library = nullptr;

    // Adding books to the library 
    library = insert(Book("To Kill a Mockingbird", "Harper Lee", 336), library);
    library = insert(Book("The Great Gatsby", "F. Scott Fitzgerald", 180), library);
    library = insert(Book("Pride and Prejudice", "Jane Austen", 279), library);
    library = insert(Book("1984", "George Orwell", 328), library);
    library = insert(Book("The Catcher in the Rye", "J.D. Salinger", 234), library);

    // Printing the books in the library
    cout << "Books in the library:" << endl;
    printInorder(library);

    // Searching for a book in the library
    cout << "Searching for '1984' in the library:" << endl;
    search("1984", library);

    // Removing a book from the library 
    cout << "Removing 'The Catcher in the Rye' from the library:" << endl;
    library = remove("The Catcher in the Rye", library);

    // Printing the updated library
    cout << "Updated library:" << endl;
    printInorder(library);

    return 0;
}