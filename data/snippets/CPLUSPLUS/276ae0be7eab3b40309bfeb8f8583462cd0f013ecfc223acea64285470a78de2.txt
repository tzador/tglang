// This code snippet takes a matrix as input and performs matrix multiplication using multi-threading

#include <iostream>
#include <vector>
#include <thread>

// Function to perform matrix multiplication
void multiply(int row, int col, std::vector<std::vector<int>> matrix1,
              std::vector<std::vector<int>> matrix2, std::vector<std::vector<int>> &result) {
  int sum = 0;
  // Loop over columns of second matrix
  for (int i = 0; i < col; i++) {
    // Multiply corresponding elements and add to sum
    sum = 0;
    for (int j = 0; j < col; j++) {
      sum += matrix1[row][j] * matrix2[j][i];
    }
    // Assign sum to corresponding position in result matrix
    result[row][i] = sum;
  }
}

int main() {
  // Input matrices
  std::vector<std::vector<int>> matrix1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  std::vector<std::vector<int>> matrix2 = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};

  // Variables for number of rows and columns
  int m1Rows = matrix1.size(), m1Cols = matrix1[0].size();
  int m2Rows = matrix2.size(), m2Cols = matrix2[0].size();

  // Result matrix with dimensions of first matrix rows and second matrix columns
  std::vector<std::vector<int>> result(m1Rows, std::vector<int>(m2Cols));

  // Vector to store threads
  std::vector<std::thread> threads;

  // Multiply matrices using threads
  for (int i = 0; i < m1Rows; i++) {
    // Create thread for each row
    threads.push_back(std::thread(multiply, i, m2Cols, matrix1, matrix2, std::ref(result)));
  }

  // Join threads
  for (auto &t : threads) {
    t.join();
  }

  // Print result matrix
  for (int i = 0; i < m1Rows; i++) {
    for (int j = 0; j < m2Cols; j++) {
      std::cout << result[i][j] << " ";
    }
    std::cout << "\n";
  }

  return 0;
}