/* This is a complex code snippet in C++ that demonstrates the use of classes,
   templates, and inheritance in object-oriented programming.*/
// Defining a class Car with two private member variables - make and model
class Car {
private:
    string make;
    string model;
public:
    // Constructor with default values for make and model
    Car(string make = "Unknown", string model = "Unknown"){
        this->make = make;
        this->model = model;
    }
    // Method for setting the make of the car
    void setMake(string make){
        this->make = make;
    }
    // Method for setting the model of the car
    void setModel(string model){
        this->model = model;
    }
    // Method for getting the make of the car
    string getMake(){
        return this->make;
    }
    // Method for getting the model of the car
    string getModel(){
        return this->model;
    }
};

// Defining a template class Pair that takes in two generic types
template <class T, class U>
class Pair {
private:
    T first;
    U second;
public:
    // Constructor with default values for first and second
    Pair(T first = T(), U second = U()){
        this->first = first;
        this->second = second;
    }
    // Method for setting the first value
    void setFirst(T first){
        this->first = first;
    }
    // Method for setting the second value
    void setSecond(U second){
        this->second = second;
    }
    // Method for getting the first value
    T getFirst(){
        return this->first;
    }
    // Method for getting the second value
    U getSecond(){
        return this->second;
    }
};

// Defining a child class LuxuryCar that inherits from the Car class
class LuxuryCar : public Car {
private:
    string color;
public:
    // Constructor with default value for color, and calling the base class constructor
    LuxuryCar(string color = "Unknown") : Car("Unknown", "Unknown"){
        this->color = color;
    }
    // Method for setting the color of the car
    void setColor(string color){
        this->color = color;
    }
    // Method for getting the color of the car
    string getColor(){
        return this->color;
    }
};

// Main function
int main(){
    // Creating an instance of Car class
    Car car("Ford", "Mustang");
    // Printing out the make and model of the car
    cout << "Car make: " << car.getMake() << endl;
    cout << "Car model: " << car.getModel() << endl;

    // Creating an instance of Pair class with int and string as the generic types
    Pair<int, string> pair(3, "Hello");
    // Printing out the first and second values of the pair
    cout << "First value: " << pair.getFirst() << endl;
    cout << "Second value: " << pair.getSecond() << endl;

    // Creating an instance of LuxuryCar class
    LuxuryCar luxCar("Black");
    // Setting the make and model of the car using methods from the parent class
    luxCar.setMake("Mercedes-Benz");
    luxCar.setModel("S-Class");
    // Printing out the make, model, and color of the car
    cout << "Car make: " << luxCar.getMake() << endl;
    cout << "Car model: " << luxCar.getModel() << endl;
    cout << "Car color: " << luxCar.getColor() << endl;

    return 0;
}