// Code snippet demonstrating a complex algorithm in C++

#include <iostream>
#include <vector>

using namespace std;

// Function to find the shortest path between two nodes in a graph
void findShortestPath(vector<vector<int>>& graph, int source, int dest, vector<int>& path, vector<bool>& visited) {
    // Base case: if source equals destination, the path has been found
    if (source == dest) {
        path.push_back(source);
        return;
    }

    // Mark the current node as visited
    visited[source] = true;
    
    // Iterate through all the adjacent nodes of the current node
    for (int i = 0; i < graph[source].size(); i++) {
        // Check if the adjacent node is unvisited and connected to the current node
        if (!visited[graph[source][i]]) {
            // Add the current node to the path
            path.push_back(source);

            // Call the function recursively on the adjacent node
            findShortestPath(graph, graph[source][i], dest, path, visited);

            // If the destination is found in the recursive call, the path has been found
            if (path.back() == dest) {
                return;
            }
            // If the destination is not found in the recursive call, remove the current node from the path
            path.pop_back();
        }
    }
}

int main() {
    // Input the number of nodes and edges in the graph
    int nodes, edges;
    cin >> nodes >> edges;

    // Initialize the graph as an adjacency list
    vector<vector<int>> graph(nodes);
    
    // Input the edges and their weights
    for (int i = 0; i < edges; i++) {
        int u, v, weight;
        cin >> u >> v >> weight;

        // Add the edge to the adjacency list
        graph[u].push_back(v);
        
        // For undirected graphs, add the reverse edge as well
        graph[v].push_back(u);
    }

    // Input the source and destination nodes for the shortest path
    int source, dest;
    cin >> source >> dest;

    // Initialize a vector to track visited nodes and a vector to store the shortest path
    vector<bool> visited(nodes, false);
    vector<int> path;

    // Find the shortest path using the algorithm
    findShortestPath(graph, source, dest, path, visited);

    // Output the shortest path
    for (int i = 0; i < path.size(); i++) {
        cout << path[i] << "->";
    }
    cout << dest << endl;

    return 0;
}