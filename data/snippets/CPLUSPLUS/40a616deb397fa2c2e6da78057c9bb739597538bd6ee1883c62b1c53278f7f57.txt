#include <iostream>
#include <vector>
using namespace std;

// This function takes in a vector of ints and a target sum
// It returns a vector containing the indices of two numbers
// in the input vector that add up to the target sum
vector<int> findTwoSum(vector<int> nums, int targetSum) {
    // Hashmap to store the values and their indices
    unordered_map<int, int> numMap;
    // Vector to store the output indices
    vector<int> output;

    // Loop through the input vector
    for (int i = 0; i < nums.size(); i++) {
        // Calculate the difference between target sum and current number
        int diff = targetSum - nums[i];
        // Check if the difference is already present in the hashmap
        if (numMap.find(diff) != numMap.end()) {
            // If present, add the current index and the index of the
            // difference in the output vector and return it
            output.push_back(i);
            output.push_back(numMap[diff]);
            return output;
        }
        // If not present, add the current number and its index to the hashmap
        numMap[nums[i]] = i;
    }
    // If no solution is found, return an empty output vector
    return output;
}

int main() {
    // Input vector of numbers
    vector<int> nums = {2, 7, 11, 15};
    // Target sum
    int targetSum = 9;
    // Call the findTwoSum function and store the output vector
    vector<int> output = findTwoSum(nums, targetSum);

    // Print the output vector
    for (int i = 0; i < output.size(); i++) {
        cout << output[i] << " ";
    }
    return 0;
}