////// Implementation of the Genetic Algorithm //////

// Including necessary libraries
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>

// Defining the population size
#define POP_SIZE 100

// Defining the number of genes per chromosome
#define NUM_GENES 10

// Setting the mutation rate
#define MUTATION_RATE 0.01

// Defining the maximum number of generations
#define MAX_GENERATIONS 100

// Defining the fitness threshold for termination
#define FITNESS_THRESHOLD 90.0

// Defining structure for chromosome
struct Chromosome{

    // Creating an array of genes
    int genes[NUM_GENES];

    // Initializing fitness score to 0
    double fitnessScore = 0.0;

};

// Functions for the Genetic Algorithm
void initializePopulation(Chromosome population[]);
void calculateFitnessScore(Chromosome &chromosome);
bool checkTermination(Chromosome population[]);
void selectParents(Chromosome population[], Chromosome &parent1, Chromosome &parent2);
void crossover(Chromosome parent1, Chromosome parent2, Chromosome &offspring);
void mutate(Chromosome &chromosome);

// Main function
int main(){

    // Setting seed for random number generation
    srand(time(NULL));

    // Creating an array for the population
    Chromosome population[POP_SIZE];

    // Initializing the population
    initializePopulation(population);

    // Start of the Genetic Algorithm
    int generation = 0;
    while(!checkTermination(population) && generation <= MAX_GENERATIONS){

        // Creating empty chromosome for offspring
        Chromosome offspring;

        // Selecting two parents from the population
        Chromosome parent1, parent2;
        selectParents(population, parent1, parent2);

        // Performing crossover and creating offspring
        crossover(parent1, parent2, offspring);

        // Mutating the offspring
        mutate(offspring);

        // Calculating the fitness score of the offspring
        calculateFitnessScore(offspring);

        // Finding the least fit individual in the population
        double leastFit = population[0].fitnessScore;
        int leastFitIndex = 0;
        for(int i = 1; i < POP_SIZE; i++){
            if(population[i].fitnessScore < leastFit){
                leastFit = population[i].fitnessScore;
                leastFitIndex = i;
            }
        }

        // Replacing least fit individual with offspring
        population[leastFitIndex] = offspring;

        // Incrementing generation counter
        generation++;

    }

    // Printing the best individual in the final generation
    double highestFitness = 0.0;
    int bestIndividual = 0;
    for(int i = 0; i < POP_SIZE; i++){
        if(population[i].fitnessScore > highestFitness){
            highestFitness = population[i].fitnessScore;
            bestIndividual = i;
        }
    }
    // Printing the genes of the best individual
    std::cout << "Genes of the best individual: ";
    for(int i = 0; i < NUM_GENES; i++){
        std::cout << population[bestIndividual].genes[i] << " ";
    }
    std::cout << "\n";

    return 0;
}

// Function to initialize the population
void initializePopulation(Chromosome population[]){

    // Looping through the population
    for(int i = 0; i < POP_SIZE; i++){

        // Looping through the genes
        for(int j = 0; j < NUM_GENES; j++){

            // Assigning a random value to each gene
            population[i].genes[j] = rand() % 2;

        }

        // Calculating the fitness score for each chromosome
        calculateFitnessScore(population[i]);

    }

}

// Function to calculate the fitness score
void calculateFitnessScore(Chromosome &chromosome){

    // Initializing a variable to store the fitness score
    double fitness = 0.0;

    // Looping through the genes
    for(int i = 0; i < NUM_GENES; i++){

        // If the gene is 1, increment fitness score
        if(chromosome.genes[i] == 1){
            fitness++;
        }

    }

    // Calculating the fitness score
    chromosome.fitnessScore = (fitness / NUM_GENES) * 100;

}

// Function to check if the algorithm has met the termination criteria
bool checkTermination(Chromosome population[]){

    // Looping through the population
    for(int i = 0; i < POP_SIZE; i++){

        // If any individual's fitness score is higher than the threshold, return true
        if(population[i].fitnessScore >= FITNESS_THRESHOLD){
            return true;
        }

    }

    // If no individual has fitness score higher than the threshold, return false
    return false;
}

// Function to select two parents from the population using tournament selection
void selectParents(Chromosome population[], Chromosome &parent1, Chromosome &parent2){

    // Setting two random indices in the population
    int index1 = rand() % POP_SIZE;
    int index2 = rand() % POP_SIZE;

    // Selecting the fitter individual as the first parent
    if(population[index1].fitnessScore > population[index2].fitnessScore){
        parent1 = population[index1];
    }else{
        parent1 = population[index2];
    }

    // Selecting the second parent from the remaining population
    // Setting two new random indices
    index1 = (rand() % (POP_SIZE - 2)) + 1;
    index2 = (rand() % (POP_SIZE - 2)) + 1;
    // Ensuring that the two indices are different
    while(index1 == index2){
        index2 = (rand() % (POP_SIZE - 2)) + 1;
    }
    // Selecting the fitter individual as the second parent
    if(population[index1].fitnessScore > population[index2].fitnessScore){
        parent2 = population[index1];
    }else{
        parent2 = population[index2];
    }

}

// Function to perform crossover between two parents to create an offspring
void crossover(Chromosome parent1, Chromosome parent2, Chromosome &offspring){

    // Selecting a random index for crossover point
    int crossoverPoint = rand() % NUM_GENES;

    // Looping through the genes
    for(int i = 0; i < NUM_GENES; i++){

        // If the index is less than the crossover point, inherit gene from parent 1
        if(i < crossoverPoint){
            offspring.genes[i] = parent1.genes[i];
        }
        // If the index is greater than or equal to the crossover point, inherit gene from parent 2
        else{
            offspring.genes[i] = parent2.genes[i];
        }

    }
}

// Function to mutate the genes of a chromosome
void mutate(Chromosome &chromosome){

    // Looping through the genes
    for(int i = 0; i < NUM_GENES; i++){

        // Generating a random number to check if mutation should occur
        double probability = ((double) rand() / RAND_MAX);
        // If random number is less than or equal to the mutation rate, mutate gene
        if(probability <= MUTATION_RATE){
            // Mutating the gene by flipping its value
            chromosome.genes[i] = abs(chromosome.genes[i] - 1);
        }
    }

}