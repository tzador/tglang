#include <iostream>

// Define a templated class named Stack
template <class T>
class Stack {
  private:
    // Define a struct for nodes in the stack
    struct Node {
        T data; // Data stored in the node
        Node* next; // Pointer to the next node in the stack
    };

    Node* top; // Pointer to the top node in the stack
    int size; // Variable for tracking the size of the stack

  public:
    // Constructor for initializing an empty stack
    Stack() : top(nullptr), size(0) {}

    // Push function to add an item to the top of the stack
    void push(T item) {
        // Create a new node with the item data
        Node* newNode = new Node;
        newNode->data = item;
        // Set the next pointer to the current top node
        newNode->next = top;
        // Set the top node to the new node
        top = newNode;
        // Increase the size variable
        size++;
    }

    // Pop function to remove and return the item at the top of the stack
    T pop() {
        // Check if the stack is empty
        if (top == nullptr) {
            // Throw an exception
            throw "Stack is empty";
        }
        // Store the top data in a variable
        T data = top->data;
        // Set the top node to the next node in the stack
        top = top->next;
        // Decrease the size variable
        size--;
        // Return the stored data
        return data;
    }

    // Peek function to return the item at the top of the stack without removing it
    T peek() {
        // Check if the stack is empty
        if (top == nullptr) {
            // Throw an exception
            throw "Stack is empty";
        }
        // Return the top data
        return top->data;
    }

    // Function to check if the stack is empty
    bool empty() {
        return size == 0;
    }

    

    ///////////////////////////////////
    // Long and complex code snippet //
    ///////////////////////////////////

    // Overload the assignment operator to copy one stack to another
    Stack& operator=(const Stack& other) {
        // Check for self-assignment
        if (this == &other) {
            return *this;
        }
        // Clear the current stack
        clear();
        // Create a temporary stack
        Stack temp;
        // Loop through the other stack and push its items onto the temporary stack
        Node* curr = other.top;
        while (curr != nullptr) {
            temp.push(curr->data);
            curr = curr->next;
        }
        // Loop through the temporary stack and push its items onto the current stack
        curr = temp.top;
        while (curr != nullptr) {
            push(curr->data);
            curr = curr->next;
        }
        // Return the current stack
        return *this;
    }

    // Overload the == operator to compare two stacks
    bool operator==(const Stack& other) {
        // If the sizes of the stacks are different, they are not equal
        if (size != other.size) {
            return false;
        }
        // Loop through both stacks and compare each item
        Node* curr1 = top;
        Node* curr2 = other.top;
        while (curr1 != nullptr && curr2 != nullptr) {
            if (curr1->data != curr2->data) {
                return false;
            }
            curr1 = curr1->next;
            curr2 = curr2->next;
        }
        // If we reach the end of both stacks without finding any differences, they are equal
        return true;
    }

    // Function to clear the stack by popping all items
    void clear() {
        // Loop until the stack is empty
        while (!empty()) {
            pop();
        }
    }

    // Destructor to deallocate the dynamically allocated nodes
    ~Stack() {
        clear();
    }
};

// Main function
int main() {
    // Create a stack of integers
    Stack<int> intStack;
    // Push some integers onto the stack
    intStack.push(5);
    intStack.push(10);
    intStack.push(7);
    // Print the top item
    std::cout << "Top item: " << intStack.peek() << std::endl;
    // Pop an item off the stack
    int item = intStack.pop();
    // Print the popped item
    std::cout << "Popped item: " << item << std::endl;
    // Create another stack and copy the first stack to it
    Stack<int> intStack2;
    intStack2 = intStack;
    // Print the top item of the second stack
    std::cout << "Top item of second stack: " << intStack2.peek() << std::endl;
    // Check if the two stacks are equal
    if (intStack == intStack2) {
        std::cout << "Stacks are equal" << std::endl;
    }
    // Clear the first stack
    intStack.clear();
    // Check if it is empty
    if (intStack.empty()) {
        std::cout << "First stack is empty" << std::endl;
    }
    // Check again if the two stacks are equal
    if (intStack == intStack2) {
        std::cout << "Stacks are still equal" << std::endl;
    }
    // Return 0 to indicate successful completion of the program
    return 0;
}