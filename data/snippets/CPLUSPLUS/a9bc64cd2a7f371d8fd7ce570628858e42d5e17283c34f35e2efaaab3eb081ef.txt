// Class for implementing a queue data structure using doubly linked list
template <class T>
class Queue {
private:
  // Node class for creating nodes of doubly linked list
  class Node {
  public:
    T data;     // data stored in the node
    Node* next; // pointer to the next node
    Node* prev; // pointer to the previous node

    // Constructor to initialize node
    Node(T item) {
      data = item;
      next = nullptr;
      prev = nullptr;
    }
  };

  Node* head;    // pointer to the first node in the queue
  Node* tail;    // pointer to the last node in the queue
  int size;      // variable to track the size of the queue

public:
  // Constructor to initialize an empty queue
  Queue() {
    head = nullptr;
    tail = nullptr;
    size = 0;
  }

  // Function to check if the queue is empty
  bool isEmpty() {
    return size == 0;
  }

  // Function to get the size of the queue
  int getSize() {
    return size;
  }

  // Function to add an item at the end of the queue
  void enqueue(T item) {
    Node* newNode = new Node(item); // create a new node
    if (isEmpty()) {
      head = tail = newNode;        // if queue is empty, make this node the first node
    }
    else {
      tail->next = newNode;         // add the node to the end of the queue
      newNode->prev = tail;         // set the new node's previous pointer to the previous tail
      tail = newNode;               // update the tail pointer to point to the new node
    }
    size++;                         // increase the size of the queue
  }

  // Function to remove and return the first item in the queue
  T dequeue() {
    if (isEmpty()) {
      cout << "Queue is empty.";
      return NULL;
    }
    else {
      T item = head->data;          // store data of first node in a temporary variable
      Node* temp = head;            // create a temporary pointer to the first node
      head = head->next;            // remove the first node by setting the head pointer to the next node
      head->prev = nullptr;         // set the previous pointer of the new first node to null
      delete temp;                  // delete the old first node
      size--;                       // decrease the size of the queue
      return item;                  // return the data of the removed node
    }
  }

  // Function to print the items in the queue from front to rear
  void print() {
    if (isEmpty()) {
      cout << "Queue is empty.";
    }
    else {
      Node* temp = head;            // create a temporary pointer to the first node
      while (temp != nullptr) {     // loop until we reach the end of the queue
        cout << temp->data << " ";  // print the data stored in the current node
        temp = temp->next;          // move to the next node
      }
    }
  }
};