// Function to implement QuickSort
/* *Parameters:
   *array: array to be sorted
   *low: starting index of the array
   *high: ending index of the array */
void quicksort(int array[], int low, int high) {
    // Base case: array is already sorted
    if (low > high) {
        return;
    }

    // Choose pivot element
    int pivot = array[low + (high - low) / 2];

    // Initialize pointers for partitioning
    int i = low;
    int j = high;

    // Partition the array
    while (i <= j) {
        // Find element on the left side that should be on the right side
        while (array[i] < pivot) {
            i++;
        }
        // Find element on the right side that should be on the left side
        while (array[j] > pivot) {
            j--;
        }
        // Swap elements if they are not already in correct partition
        if (i <= j) {
            swap(array[i], array[j]);
            i++;
            j--;
        }
    }

    // Recursively call quicksort on left and right partitions
    quicksort(array, low, j);
    quicksort(array, i, high);
}
// Example usage
int main() {
    // Create unsorted array
    int unsorted_array[] = {5, 2, 8, 10, 1, 3, 6, 4, 9, 7};
    // Sort array using quicksort
    quicksort(unsorted_array, 0, 9);
    // Output sorted array
    for (int i = 0; i < 10; i++) {
        cout << unsorted_array[i] << " ";
    }
    return 0;
}