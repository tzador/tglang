// Multi-threaded Fibonacci sequence generator
#include <iostream>
#include <thread>

// Function to generate Fibonacci sequence up to n terms
void fibonacci(int n, int* output) {
    // Initialize first two terms of sequence
    int a = 0;
    int b = 1;

    // Loop through n terms and calculate next term
    for (int i = 0; i < n; i++) {
        // Put the next term in the output array
        output[i] = a;

        // Calculate next term
        int c = a + b;

        // Swap previous two terms for next iteration
        a = b;
        b = c;
    }
}

// Main function
int main() {
    // Get user input for number of terms in sequence
    int n;
    std::cout << "Enter the number of terms in the Fibonacci sequence: ";
    std::cin >> n;

    // Initialize output array
    int output[n];

    // Create threads for parallel execution
    std::thread t1(fibonacci, n, output);
    std::thread t2(fibonacci, n, output);

    // Join threads to ensure all calculations are completed
    t1.join();
    t2.join();

    // Print the generated sequence
    std::cout << "Fibonacci sequence up to " << n << " terms:\n";
    for (int i = 0; i < n; i++) {
        std::cout << output[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}