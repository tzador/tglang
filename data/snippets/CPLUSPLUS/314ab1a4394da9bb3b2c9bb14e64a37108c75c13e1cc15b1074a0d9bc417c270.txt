// This program uses a brute force approach to solve the knapsack problem

#include <iostream>
#include <vector>

using namespace std;

// Function to calculate maximum of two numbers
int maximum(int a, int b) {
	if (a > b) {
		return a;
	}
	else {
		return b;
	}
}

// Function to solve the knapsack problem using dynamic programming
int knapsack(int W, vector<int> weight, vector<int> value, int n) {
	// Create a 2D vector to store the maximum value for each weight
	vector<vector<int>> K(n + 1, vector<int>(W + 1, 0));

	// Populate the vector using bottom-up approach
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= W; j++) {
			// If the weight of the current item is less than or equal to the current weight
			if (weight[i - 1] <= j) {
				// Find the maximum value between adding the current item or not adding the current item
				K[i][j] = maximum(value[i - 1] + K[i - 1][j - weight[i - 1]], K[i - 1][j]);
			}
			// If the weight of the current item is greater than the current weight, do not add it
			else {
				K[i][j] = K[i - 1][j];
			}
		}
	}

	// Return the maximum value
	return K[n][W];
}

// Driver code
int main() {
	// Input values and weights of items
	vector<int> value = { 60, 100, 120 };
	vector<int> weight = { 10, 20, 30 };
	// Maximum capacity of the knapsack
	int W = 50;
	// Number of items
	int n = value.size();
	// Calculate and print the maximum value
	cout << "Maximum value for capacity " << W << " is " << knapsack(W, weight, value, n) << endl;
	return 0;
}