/*
This is a complex code snippet in C++ that demonstrates a custom vector class
with overloaded operators.

Vector class allows for easy manipulation and mathematical operations on 
vectors in two or three dimensions.

Some of the features include:
- vector addition and subtraction
- scalar multiplication
- dot and cross product
- normalization
- angle calculation

*/

// include necessary libraries
#include <iostream>
#include <cmath>

// define custom vector class
class Vector {
public:
    // constructors
    Vector() {}
    Vector(double x, double y, double z);

    // member functions
    double magnitude();
    Vector normalize();
    double angle(Vector other);
    
    // overloaded operators
    Vector operator+(const Vector& other) const;
    Vector operator-(const Vector& other) const;
    Vector operator*(double scalar) const;
    Vector operator*(const Vector& other) const;
    double operator*(const Vector& other) const;

    // data members
    double x;
    double y;
    double z;
};

// constructor implementation
Vector::Vector(double x, double y, double z) {
    this->x = x;
    this->y = y;
    this->z = z;
}

// member function implementations
double Vector::magnitude() {
    return sqrt(pow(x, 2) + pow(y, 2) + pow(z, 2)); // Pythagorean theorem
}

Vector Vector::normalize() {
    double mag = magnitude();
    return Vector(x / mag, y / mag, z / mag);
}

double Vector::angle(Vector other) {
    return acos((*this * other) / (magnitude() * other.magnitude()));
}

// operator overloading implementations
Vector Vector::operator+(const Vector& other) const {
    return Vector(x + other.x, y + other.y, z + other.z);
}

Vector Vector::operator-(const Vector& other) const {
    return Vector(x - other.x, y - other.y, z - other.z);
}

Vector Vector::operator*(double scalar) const {
    return Vector(x * scalar, y * scalar, z * scalar);
}

Vector Vector::operator*(const Vector& other) const {
    return Vector(y * other.z - z * other.y, z * other.x - x * other.z, x * other.y - y * other.x); // cross product
}

double Vector::operator*(const Vector& other) const {
    return x * other.x + y * other.y + z * other.z; // dot product
}

// main function
int main() {
    // creating two vectors
    Vector v1(2, 3, 4);
    Vector v2(5, 6, 7);

    // performing calculations and printing results
    Vector sum = v1 + v2;
    std::cout << "Sum of vectors: " << sum.x << ", " << sum.y << ", " << sum.z << std::endl;

    Vector difference = v1 - v2;
    std::cout << "Difference of vectors: " << difference.x << ", " << difference.y << ", " << difference.z << std::endl;

    double scalar = 2.5;
    Vector scaled = v1 * scalar;
    std::cout << "Scaled vector: " << scaled.x << ", " << scaled.y << ", " << scaled.z << std::endl;

    Vector cross = v1 * v2;
    std::cout << "Cross product of vectors: " << cross.x << ", " << cross.y << ", " << cross.z << std::endl;

    double dot = v1 * v2;
    std::cout << "Dot product of vectors: " << dot << std::endl;

    double angle = v1.angle(v2);
    std::cout << "Angle between vectors: " << angle << " radians" << std::endl;

    return 0;
}