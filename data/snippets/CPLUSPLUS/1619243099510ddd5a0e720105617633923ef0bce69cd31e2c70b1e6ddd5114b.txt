#include <iostream> // include the standard input/output library

using namespace std; //use the standard namespace for convenience

//define a class called Shape
class Shape {
  protected: //protected access specifier for inheritance

    double width; //variable for width
    double height; //variable for height

  public: //public access specifier for accessible methods

    //constructor with parameters for width and height
    Shape(double w, double h) {
      width = w;
      height = h;
    }

    //method to calculate and return the area of the shape
    double getArea() {
      return width * height;
    }

    //method to calculate and return the perimeter of the shape
    double getPerimeter() {
      return 2 * (width + height);
    }
};

//define a class called Rectangle, which inherits from Shape
class Rectangle: public Shape {
  public: //public access specifier for accessible methods

    //constructor with parameters for width and height, which are passed to the base class Shape
    Rectangle(double w, double h): Shape(w, h) {}
};

//define a class called Triangle, which inherits from Shape
class Triangle: public Shape {
  public: //public access specifier for accessible methods

    //constructor with parameters for width and height, which are passed to the base class Shape
    Triangle(double w, double h): Shape(w, h) {}

    //override the getArea method to calculate and return the area of a triangle
    double getArea() {
      return 0.5 * width * height;
    }
};

int main() { //main function
  //create a Rectangle object with width of 5 and height of 4
  Rectangle myRectangle(5, 4);

  //create a Triangle object with width of 3 and height of 6
  Triangle myTriangle(3, 6);

  //print the area and perimeter of the rectangle
  cout << "Rectangle Area: " << myRectangle.getArea() << endl;
  cout << "Rectangle Perimeter: " << myRectangle.getPerimeter() << endl;

  //print the area and perimeter of the triangle
  cout << "Triangle Area: " << myTriangle.getArea() << endl;
  cout << "Triangle Perimeter: " << myTriangle.getPerimeter() << endl;

  return 0; //return 0 to indicate successful execution
}