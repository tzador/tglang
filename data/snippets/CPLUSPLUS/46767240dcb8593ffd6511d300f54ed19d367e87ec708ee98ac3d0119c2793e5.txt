#include <iostream>

// Define a class named "Complex"
class Complex {
    private:
        // Declare private variables "real" and "imaginary"
        int real;
        int imaginary;
        
    public:
        // Constructor function to initialize private variables
        Complex(int r, int i) {
            real = r;
            imaginary = i;
        }

        // Getter function for "real" variable
        int getReal() {
            return real;
        }

        // Getter function for "imaginary" variable
        int getImaginary() {
            return imaginary;
        }

        // Overload + operator for addition of complex numbers
        Complex operator + (Complex obj) {
            Complex temp;
            temp.real = real + obj.real;
            temp.imaginary = imaginary + obj.imaginary;
            return temp;
        }

        // Overload * operator for multiplication of complex numbers
        Complex operator * (Complex obj) {
            Complex temp;
            temp.real = (real * obj.real) - (imaginary * obj.imaginary);
            temp.imaginary = (real * obj.imaginary) + (imaginary * obj.real);
            return temp;
        }
};

// Main function
int main() {
    // Initialize two complex numbers
    Complex num1(3, 5);
    Complex num2(2, -1);

    // Add two complex numbers and store in result
    Complex result = num1 + num2;

    // Multiply two complex numbers and store in product
    Complex product = num1 * num2;

    // Print the result of addition
    std::cout << "Result of addition: " << result.getReal() << " + " << result.getImaginary() << "i" << std::endl;

    // Print the result of multiplication
    std::cout << "Result of multiplication: " << product.getReal() << " + " << product.getImaginary() << "i" << std::endl;

    return 0;
}