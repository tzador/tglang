//this is a complex code snippet that uses class and inheritance
#include <iostream> //including input, output library
using namespace std;

class Shape{ //creating a class Shape
    protected:
        int width, height; //declaring protected variables
    public:
        Shape(int a = 0, int b = 0){ //constructor with default values
            width = a;
            height = b;
        }

        //creating a pure virtual function to calculate area
        virtual int area() = 0;
};

class Rectangle: public Shape { //creating a subclass Rectangle inheriting from Shape
    public:
        Rectangle(int a = 0, int b = 0) : Shape(a, b){ } //constructor with default values
        int area (){ return (width * height); }; //implementing the area function
};

class Triangle: public Shape { //creating a subclass Triangle inheriting from Shape
    public:
        Triangle(int a = 0, int b = 0) : Shape(a, b){ } //constructor with default values
        int area (){ return (width * height / 2); }; //implementing the area function
};

int main() { //main function
    Shape *shape1; //creating a base shape pointer
    Rectangle rec(10,7); //creating a rectangle object
    Triangle tri(10,5); //creating a triangle object

    shape1 = &rec; //assigning rectangle object to base pointer
    //outputting the area of rectangle using the area function
    cout << "Area of Rectangle: " << shape1->area() << endl; 

    shape1 = &tri; //assigning triangle object to base pointer
    //outputting the area of triangle using the area function
    cout << "Area of Triangle : " << shape1->area() << endl;
    
    return 0;
}