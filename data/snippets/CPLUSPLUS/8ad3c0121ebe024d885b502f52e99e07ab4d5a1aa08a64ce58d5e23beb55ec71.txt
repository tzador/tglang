//This program calculates the determinant of a 3x3 matrix

#include<iostream> 

using namespace std; 
  

// Function to get cofactor of  
// mat[p][q] in temp[][]. n is  
// current dimension of mat[][] 
void getCofactor(int mat[3][3], int temp[3][3], int p, int q, int n) { 

    int i = 0, j = 0; 

    // Looping for each element of the matrix 
    for (int row = 0; row < n; row++) { 
        for (int col = 0; col < n; col++) { 

            //  Copying into temporary matrix only those  
            //  elements which are not in given row and column 
            if (row != p && col != q) { 
                temp[i][j++] = mat[row][col]; 

                // Row is filled, so increase  
                // row index and reset col  
                //index to 0 
                if (j == n - 1) { 
                    j = 0; 
                    i++; 
                } 
            } 
        } 
    } 
} 
  
// Function to find determinant of matrix 
int determinantOfMatrix(int mat[3][3], int n) { 

    int D = 0; // Initialize result 

    //  Base case : if matrix contains single  
    // element 
    if (n == 1) 
        return mat[0][0]; 
  
    int temp[3][3]; // To store cofactors 
  
    int sign = 1;  // To store sign multiplier 
  
    // Iterate for each element of first row 
    for (int f = 0; f < n; f++) { 
        // Getting Cofactor of mat[0][f] 
        getCofactor(mat, temp, 0, f, n); 
        D += sign * mat[0][f] * determinantOfMatrix(temp, n - 1); 
  
        // terms are to be added with alternate sign 
        sign = -sign; 
    } 
  
    return D; 
} 
  
// Driver program to test above functions 
int main() { 

    int mat[3][3] = {{1, 2, 3}, 
                    {4, 5, 6}, 
                    {7, 8, 9}}; // Input matrix 
  
    int n = 3; // Dimension of matrix 
  

    // Function call 
    cout << "Determinant of the Matrix is : " 
         << determinantOfMatrix(mat, n); 
    return 0; 
}