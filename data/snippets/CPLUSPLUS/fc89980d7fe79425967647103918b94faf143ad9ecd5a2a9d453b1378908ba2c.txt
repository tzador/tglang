#include <iostream> //Include the input and output library

using namespace std; //Use the standard namespace

//Create a template class called "LinkedList" 
template <class T> 
class LinkedList { 
    private: 
        struct Node { 
            T data; //Item stored in the node 
            Node* next; //Pointer to the next node in the list 
        };
        
        Node* head; //Pointer to the head of the list 
        int size; //Size of the list 
        
    public: 
        //Constructor 
        LinkedList() { 
            head = nullptr; //Initialize head to null 
            size = 0; //Initialize size to 0 
        } 
        
        //Insert a new node at the beginning of the list 
        void insert(T item) { 
            Node* newNode = new Node; //Create a new node 
            newNode->data = item; //Set the data in the node to the input item 
            newNode->next = head; //Set the next pointer to the current head 
            head = newNode; //Set the head to the new node 
            size++; //Increase the size of the list 
        } 
        
        //Get the size of the list 
        int getSize() { 
            return size; 
        } 
        
        //Check if the list is empty 
        bool isEmpty() { 
            return (head == nullptr); 
        } 
        
        //Search for an item in the list 
        bool search(T item) { 
            Node* temp = head; //Start at the head of the list 
            
            //Loop through the list 
            while (temp != nullptr) { 
                if (temp->data == item) { //If the item is found 
                    return true; 
                } 
                temp = temp->next; //Move to the next node 
            } 
            
            return false; //Item not found 
        } 
        
        //Remove an item from the list 
        void remove(T item) { 
            Node* temp = head; //Start at the head of the list 
            Node* prev = nullptr; //Keep track of the previous node 
            bool found = false; //Flag to indicate if the item is found 
            
            //Loop through the list 
            while (temp != nullptr) { 
                if (temp->data == item) { //If the item is found 
                    found = true; 
                    break; 
                } 
                prev = temp; //Set the previous node 
                temp = temp->next; //Move to the next node 
            } 
            
            if (found) { //If the item is found 
                if (prev == nullptr) { //If the item is the head 
                    head = temp->next; //Set the head to the next node 
                } else { 
                    prev->next = temp->next; //Set the previous node's next pointer to the next node 
                } 
                
                delete temp; //Delete the node 
                size--; //Decrease the size of the list 
            } 
        } 
        
        //Print the list 
        void display() { 
            Node* temp = head; //Start at the head of the list 
            
            //Loop through the list 
            while (temp != nullptr) { 
                cout << temp->data << " "; //Print the data in the node 
                temp = temp->next; //Move to the next node 
            } 
            
            cout << endl; //Print a new line 
        } 
}; 

//Main function 
int main() { 
    //Create a new linked list of integers 
    LinkedList<int> myLinkedList; 
    
    //Insert some items into the list 
    myLinkedList.insert(10); 
    myLinkedList.insert(5); 
    myLinkedList.insert(2); 
    
    //Print the size of the list 
    cout << "Size: " << myLinkedList.getSize() << endl; 
    
    //Check if the list is empty 
    if (myLinkedList.isEmpty()) { 
        cout << "List is empty." << endl; 
    } else { 
        cout << "List is not empty." << endl; 
    } 
    
    //Search for an item in the list 
    if (myLinkedList.search(5)) { 
        cout << "5 is in the list." << endl; 
    } else { 
        cout << "5 is not in the list." << endl; 
    } 
    
    //Remove an item from the list 
    myLinkedList.remove(5); 
    
    //Display the list 
    myLinkedList.display(); 
    
    return 0; 
}