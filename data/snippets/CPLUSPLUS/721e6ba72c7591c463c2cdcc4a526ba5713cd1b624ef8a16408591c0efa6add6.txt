#include <iostream>
using namespace std;

// Class declaration
class Shape {
   protected:
      int width;
      int height;
   public:
      // Constructor
      Shape( int a=0, int b=0)
      {
         width = a;
         height = b;
      }
      
      // Virtual function
      virtual int calculateArea()
      {
         cout << "Parent class area :" <<endl;
         return 0;
      }
      
      // Getter methods for width and height
      int getWidth()
      {
         return width;
      }
      int getHeight()
      {
         return height;
      }
      // Setter methods for width and height
      void setWidth(int w)
      {
          width = w;
      }
      void setHeight(int h)
      {
          height = h;
      }
};

// Rectangle class derived from Shape
class Rectangle: public Shape {
   public:
      // Constructor
      Rectangle( int a=0, int b=0):Shape(a, b) { }

      // Override virtual function from parent class
      int calculateArea ()
      { 
         cout << "Rectangle class area :" <<endl;
         return (width * height); 
      }
};

// Triangle class derived from Shape
class Triangle: public Shape{
   public:
      // Constructor
      Triangle( int a=0, int b=0):Shape(a, b) { }

      // Override virtual function from parent class
      int calculateArea ()
      { 
         cout << "Triangle class area :" <<endl;
         return (width * height / 2); 
      }
};

// Main function
int main( )
{
   // Create objects of Rectangle and Triangle
   Rectangle Rect(5,6);
   Triangle Tri(5,7);

   // Call virtual area function for both objects
   Rect.calculateArea();
   Tri.calculateArea();

   // Change width and height using setter methods
   Rect.setWidth(8);
   Rect.setHeight(10);

   // Call virtual area function again after changing values
   Rect.calculateArea();

   return 0;
}