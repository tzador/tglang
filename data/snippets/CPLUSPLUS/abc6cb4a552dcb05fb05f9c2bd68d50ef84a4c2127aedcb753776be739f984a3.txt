// This is a class for a binary search tree
template <class T>
class BinarySearchTree
{
private:
	// Structure for each node in the tree
	struct Node
	{
		T data;         // The data stored in the node
		Node* left;     // Pointer to the left child node
		Node* right;    // Pointer to the right child node

		// Constructor for initializing node data and child pointers
		Node(T d) : data(d), left(nullptr), right(nullptr) {}
	};

	Node* root;        // Pointer to the root node of the tree

public:
	// Constructor for creating an empty tree
	BinarySearchTree() : root(nullptr) {}

	// Function to insert a new element into the tree
	void insert(T data)
	{
		// If tree is empty, create a new root node
		if (root == nullptr)
		{
			root = new Node(data);
			return;
		}

		// Search for the correct position to insert the new data
		Node* curr = root;                // Current node being traversed
		Node* parent = nullptr;           // Parent of current node
		while (curr != nullptr)
		{
			parent = curr;
			if (data < curr->data)
				curr = curr->left;        // Move to left child if data is less than current node's data
			else
				curr = curr->right;       // Otherwise move to right child
		}

		// Insert the new data at the correct position
		if (data < parent->data)
			parent->left = new Node(data);
		else
			parent->right = new Node(data);
	}

	// Function to search for a given element in the tree
	bool search(T data)
	{
		Node* curr = root;    // Current node being traversed
		while (curr != nullptr)
		{
			if (data == curr->data)
				return true;                   // Element found
			else if (data < curr->data)
				curr = curr->left;             // Move to left child if data is less than current node's data
			else
				curr = curr->right;            // Otherwise move to right child
		}
		return false;    // Element not found
	}
};