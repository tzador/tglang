/*
This is a complex code snippet written in C++ that demonstrates how to perform binary search on a sorted array.
In this snippet, we first define the function for binary search and then use it to find the index of a target element in an array.
*/

// Define the function for binary search
int binarySearch(int arr[], int low, int high, int target) {
    //Loop until the lower and upper bounds overlap
    while (low <= high) {
        // Find the middle element
        int mid = low + (high - low) / 2;
        // Check if the middle element is equal to the target
        if (arr[mid] == target) {
            // Return the index of the target element
            return mid;
        }
        // If the middle element is greater than the target, search the left half of the array
        else if (arr[mid] > target) {
            high = mid - 1;
        }
        // If the middle element is less than the target, search the right half of the array
        else {
            low = mid + 1;
        }
    }
    // If the target element is not found, return -1
    return -1;
}

// Define the main function
int main() {
    // Initialize the array with sorted numbers
    int arr[] = { 2, 4, 6, 8, 10, 12, 14, 16 };
    // Initialize the target element
    int target = 10; 
    // Calculate the size of the array
    int size = sizeof(arr) / sizeof(arr[0]);
    // Call the binarySearch function and store the index of the target element
    int idx = binarySearch(arr, 0, size - 1, target);
    // Check if the index is valid
    if (idx != -1) {
        // Print the index of the target element
        cout << "Target element found at index " << idx << endl;
    }
    else {
        // Print a message if the target element is not found
        cout << "Target element not found in the array" << endl;
    }
    return 0;
}