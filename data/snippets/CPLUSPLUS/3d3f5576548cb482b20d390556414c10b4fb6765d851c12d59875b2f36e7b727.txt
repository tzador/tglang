// This is a complex code snippet in C++ 
// that utilizes objects and inheritance 

#include <iostream>
#include <string>
using namespace std;

// Base class for a vehicle
class Vehicle {
    protected:
        string make;
        string model;
    public:
        Vehicle(string m, string mod) {
            make = m;
            model = mod;
        }

        // Function to get information about the vehicle
        virtual void getInfo() {
            cout << "This is a " << make << " " << model << endl;
        }
};

// Derived class for a car, inherits from Vehicle
class Car : public Vehicle {
    private:
        int year;
    public:
        Car(string m, string mod, int y) : Vehicle(m, mod) {
            year = y;
        }

        // Overriding getInfo function to include year
        void getInfo() override {
            cout << "This is a " << year << " " << make << " " << model << endl;
        }
};

// Derived class for a truck, inherits from Vehicle
class Truck : public Vehicle {
    private:
        string size;
    public:
        Truck(string m, string mod, string s) : Vehicle(m, mod) {
            size = s;
        }

        // Overriding getInfo function to include size
        void getInfo() override {
            cout << "This is a " << size << " " << make << " " << model << endl;
        }
};

int main() {
    // Creating an object of type Car
    Car myCar("Ford", "Mustang", 2021);

    // Creating an object of type Truck
    Truck myTruck("Chevrolet", "Silverado", "full-size");

    // Calling getInfo function on both objects
    myCar.getInfo();
    myTruck.getInfo();

    return 0;
}