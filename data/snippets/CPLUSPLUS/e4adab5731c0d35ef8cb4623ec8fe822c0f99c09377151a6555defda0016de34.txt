/*
This code snippet demonstrates the use of templates and inheritance in C++.
It creates a generic class called "Shape" and two specific subclasses "Circle" and "Rectangle".
Shape has two virtual functions, "getArea" and "getPerimeter", which each subclass must override.
It also has two non-virtual functions, "printArea" and "printPerimeter", which call the get functions and print the result.
Circle and Rectangle have their own specific attributes, "radius" and "length, and width" respectively.
The code creates instances of each subclass and calls the get and print functions to demonstrate the inheritance and polymorphism.
*/

#include <iostream>

// Generic "Shape" class
template <typename T>
class Shape {
protected:
    T area;
    T perimeter;
public:
    // Constructor
    Shape(T a, T p) : area(a), perimeter(p) { }

    // Virtual functions - must be overridden by subclasses
    virtual T getArea() = 0;
    virtual T getPerimeter() = 0;

    // Non-virtual functions - can be called directly
    void printArea() {
        std::cout << "Area: " << getArea() << std::endl;
    }

    void printPerimeter() {
        std::cout << "Perimeter: " << getPerimeter() << std::endl;
    }
};

// Subclass "Circle"
template <typename T>
class Circle : public Shape<T> {
private:
    T radius;
public:
    // Constructor - takes in radius and calculates area and perimeter
    Circle(T r) : Shape<T>(r * r * 3.14, 2 * 3.14 * r), radius(r) { }

    // Override virtual functions
    T getArea() {
        return this->area; // "this->" is needed in order to access "area" from base class
    }

    T getPerimeter() {
        return this->perimeter;
    }

    // Additional function for specific attribute
    void printRadius() {
        std::cout << "Radius: " << radius << std::endl;
    }
};

// Subclass "Rectangle"
template <typename T>
class Rectangle : public Shape<T> {
private:
    T length;
    T width;
public:
    // Constructor - takes in length and width and calculates area and perimeter
    Rectangle(T l, T w) : Shape<T>(l * w, 2 * (l + w)), length(l), width(w) { }

    // Override virtual functions
    T getArea() {
        return this->area;
    }

    T getPerimeter() {
        return this->perimeter;
    }

    // Additional functions for specific attributes
    void printLength() {
        std::cout << "Length: " << length << std::endl;
    }

    void printWidth() {
        std::cout << "Width: " << width << std::endl;
    }
};

int main() {
    // Create instances of subclasses
    Circle<double> circle(5.5);
    Rectangle<int> rectangle(3, 4);

    // Call polymorphic functions
    circle.printRadius();
    rectangle.printLength();

    // Call non-virtual functions
    circle.printArea();
    rectangle.printPerimeter();

    return 0;
}