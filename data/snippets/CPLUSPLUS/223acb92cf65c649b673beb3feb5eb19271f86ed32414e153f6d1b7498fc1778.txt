// This is a complex code snippet in C++ that uses object-oriented programming concepts and advanced data structures

// Class for creating a binary tree node
class TreeNode{
    private:
        int data; // stores integer data in the node
        TreeNode* leftChild; // pointer to left child node
        TreeNode* rightChild; // pointer to right child node
    public:
        // Constructor to initialize node with given data
        TreeNode(int d){
            data = d; // stores data in node
            leftChild = NULL; // initializes left child pointer to NULL
            rightChild = NULL; // initializes right child pointer to NULL
        }
        
        // Destructor to delete node and its children
        ~TreeNode(){
            delete leftChild; // deletes left child recursively
            delete rightChild; // deletes right child recursively
        }
        
        // Getter and setter functions for data
        int getData(){
            return data; // returns the data stored in the node
        }
        
        void setData(int d){
            data = d; // sets the data stored in the node to given value
        }
        
        // Getter and setter functions for left child
        TreeNode* getLeftChild(){
            return leftChild; // returns the left child pointer
        }
        
        void setLeftChild(TreeNode* node){
            leftChild = node; // sets the left child pointer to given node
        }
        
        // Getter and setter functions for right child
        TreeNode* getRightChild(){
            return rightChild; // returns the right child pointer
        }
        
        void setRightChild(TreeNode* node){
            rightChild = node; // sets the right child pointer to given node
        }
};

// Class for creating a binary search tree
class BinarySearchTree{
    private:
        TreeNode* root; // pointer to root node of the tree
    public:
        // Default constructor to initialize tree with empty root
        BinarySearchTree(){
            root = NULL; // initializes root to NULL
        }
        
        // Constructor to initialize tree with root containing given data
        BinarySearchTree(int d){
            root = new TreeNode(d); // creates a new root node with given data
        }
        
        // Destructor to delete tree and all its nodes
        ~BinarySearchTree(){
            delete root; // deletes root node recursively, deleting entire tree
        }
        
        // Function to insert a new node with given data into the tree
        // Returns true if successful, false if data already exists in the tree
        bool insert(int d){
            // If tree is empty, make new root node with given data
            if(root == NULL){
                root = new TreeNode(d);
                return true;
            }
            
            // Start at root node and traverse tree to find proper location for new node
            TreeNode* current = root;
            TreeNode* parent;
            while(current != NULL){
                parent = current;
                if(d < current->getData()){
                    current = current->getLeftChild();
                } else if(d > current->getData()){
                    current = current->getRightChild();
                } else {
                    return false; // data already exists in the tree
                }
            }
            
            // Create new node with given data and link it as a child of the parent node
            if(d < parent->getData()){
                parent->setLeftChild(new TreeNode(d));
                return true;
            } else if(d > parent->getData()){
                parent->setRightChild(new TreeNode(d));
                return true;
            }
        }
        
        // Function to delete a node with given data from the tree
        // Returns true if data exists and is successfully deleted, false if data is not found in the tree
        bool remove(int d){
            // If tree is empty, return false
            if(root == NULL){
                return false;
            }
            
            // Start at root node and traverse tree to find node with given data
            TreeNode* current = root;
            TreeNode* parent = NULL;
            bool isLeftChild = true; // flag to track if current node is left child or right child of parent
            
            // Loop until data is found or until end of tree is reached
            while(current->getData() != d){
                parent = current; // set parent to current node
                if(d < current->getData()){
                    current = current->getLeftChild();
                    isLeftChild = true; // set flag to indicate current node is left child
                } else {
                    current = current->getRightChild();
                    isLeftChild = false; // set flag to indicate current node is right child
                }
                
                if(current == NULL){
                    return false; // data not found in the tree
                }
            }
            
            // If node to be deleted is a leaf node, simply delete it and update parent's child pointer
            if(current->getLeftChild() == NULL && current->getRightChild() == NULL){
                if(current == root){
                    root = NULL; // tree is empty now
                } else if(isLeftChild){
                    parent->setLeftChild(NULL); // update left child pointer of parent to NULL
                } else {
                    parent->setRightChild(NULL); // update right child pointer of parent to NULL
                }
                delete current; // delete the node
                return true;
            }
            
            // If node to be deleted has only one child, replace it with its child and update parent's child pointer
            else if(current->getRightChild() == NULL){
                if(current == root){
                    root = current->getLeftChild();
                } else if(isLeftChild){
                    parent->setLeftChild(current->getLeftChild());
                } else {
                    parent->setRightChild(current->getLeftChild());
                }
                delete current; // delete the node
                return true;
            } else if(current->getLeftChild() == NULL && current->getRightChild() != NULL){
                if(current == root){
                    root = current->getRightChild();
                } else if(isLeftChild){
                    parent->setLeftChild(current->getRightChild());
                } else {
                    parent->setRightChild(current->getRightChild());
                }
                delete current; // delete the node
                return true;
            }
            
            // If node to be deleted has two children, find successor node and replace current node with it
            else {
                TreeNode* successor = findSuccessor(current); // find successor node
                if(current == root){
                    root = successor; // set successor as new root
                } else if(isLeftChild){
                    parent->setLeftChild(successor); // replace current node with successor as parent's left child
                } else {
                    parent->setRightChild(successor); // replace current node with successor as parent's right child
                }
                delete current; // delete original node
                return true;
            }
        }
        
        // Function to find and return the node with smallest value in the tree
        TreeNode* findMin(){
            // If tree is empty, return NULL
            if(root == NULL){
                return NULL;
            }
            
            TreeNode* current = root;
            
            // Traverse tree to the left until end is reached, which is the node with smallest value
            while(current->getLeftChild() != NULL){
                current = current->getLeftChild();
            }
            
            return current;
        }
        
        // Function to find and return the node with largest value in the tree
        TreeNode* findMax(){
            // If tree is empty, return NULL
            if(root == NULL){
                return NULL;
            }
            
            TreeNode* current = root;
            
            // Traverse tree to the right until end is reached, which is the node with largest value
            while(current->getRightChild() != NULL){
                current = current->getRightChild();
            }
            
            return current;
        }
        
        // Function to find and return the successor node of a given node
        TreeNode* findSuccessor(TreeNode* node){
            if(node->getRightChild() != NULL){
                // If node has right child, then successor is the node with smallest value in its right subtree
                return findMin(node->getRightChild());
            } else {
                // Else, find the first ancestor that is a left child of its parent
                TreeNode* current = node;
                TreeNode* parent = node->getParent();
                while(parent != NULL && current == parent->getRightChild()){
                    current = parent;
                    parent = current->getParent();
                }
                return parent; // parent will be NULL if successor doesn't exist
            }
        }
        
        // Function to print the tree in-order using depth-first search recursion
        void printInorder(TreeNode* node){
            if(node != NULL){
                printInorder(node->getLeftChild()); // recursively print left subtree
                cout << node->getData() << " "; // print current node's data
                printInorder(node->getRightChild()); // recursively print right subtree
            }
        }
        
        // Function to print the tree pre-order using depth-first search recursion
        void printPreorder(TreeNode* node){
            if(node != NULL){
                cout << node->getData() << " "; // print current node's data
                printPreorder(node->getLeftChild()); // recursively print left subtree
                printPreorder(node->getRightChild()); // recursively print right subtree
            }
        }
        
        // Function to print the tree post-order using depth-first search recursion
        void printPostorder(TreeNode* node){
            if(node != NULL){
                printPostorder(node->getLeftChild()); // recursively print left subtree
                printPostorder(node->getRightChild()); // recursively print right subtree
                cout << node->getData() << " "; // print current node's data
            }
        }
        
        // Function to print the tree level-order using breadth-first search traversal
        void printLevelorder(){
            // If tree is empty, return
            if(root == NULL){
                return;
            }
            
            queue<TreeNode*> nodeQueue; // queue to store nodes in level order
            nodeQueue.push(root); // push root node into queue
            
            while(!nodeQueue.empty()){ // loop until queue is empty
                TreeNode* current = nodeQueue.front(); // get the front node in the queue
                nodeQueue.pop(); // remove front node from queue
                cout << current->getData() << " "; // print current node's data
                
                // If current node has a left child, push it into queue
                if(current->getLeftChild() != NULL){
                    nodeQueue.push(current->getLeftChild());
                }
                
                // If current node has a right child, push it into queue
                if(current->getRightChild() != NULL){
                    nodeQueue.push(current->getRightChild());
                }
            }
        }
};

// Driver code to test the binary search tree
int main(){
    // Create a new binary search tree
    BinarySearchTree* myBST = new BinarySearchTree();
    
    // Insert some data into the tree
    myBST->insert(5);
    myBST->insert(3);
    myBST->insert(8);
    myBST->insert(2);
    myBST->insert(9); 
    myBST->insert(4);
    myBST->insert(7);
    
    // Print the tree in different orders using DFS recursion
    cout << "Inorder traversal of the tree:" << endl;
    myBST->printInorder(myBST->getRoot());
    cout << endl;
    
    cout << "Preorder traversal of the tree:" << endl;
    myBST->printPreorder(myBST->getRoot());
    cout << endl;
    
    cout << "Postorder traversal of the tree:" << endl;
    myBST->printPostorder(myBST->getRoot());
    cout << endl;
    
    // Print the tree in level-order using BFS traversal
    cout << "Level-order traversal of the tree:" << endl;
    myBST->printLevelorder();
    cout << endl;
    
    // Delete a node with given data from the tree
    myBST->remove(8);
    
    // Print the tree again in different orders
    cout << "Inorder traversal of the tree after deleting 8:" << endl;
    myBST->printInorder(myBST->getRoot());
    cout << endl;
    
    cout << "Preorder traversal of the tree after deleting 8:" << endl;
    myBST->printPreorder(myBST->getRoot());
    cout << endl;
    
    cout << "Postorder traversal of the tree after deleting 8:" << endl;
    myBST->printPostorder(myBST->getRoot());
    cout << endl;
    
    cout << "Level-order traversal of the tree after deleting 8:" << endl;
    myBST->printLevelorder();
    cout << endl;
    
    // Find and print the smallest value in the tree
    TreeNode* minNode = myBST->findMin();
    if(minNode == NULL){
        cout << "Tree is empty!" << endl;
    } else {
        cout << "Smallest value in tree: " << minNode->getData() << endl;
    }
    
    // Find and print the largest value in the tree
    TreeNode* maxNode = myBST->findMax();
    if(maxNode == NULL){
        cout << "Tree is empty!" << endl;
    } else {
        cout << "Largest value in tree: " << maxNode->getData() << endl;
    }
    
    // Delete the entire tree
    delete myBST;
    
    return 0;
}