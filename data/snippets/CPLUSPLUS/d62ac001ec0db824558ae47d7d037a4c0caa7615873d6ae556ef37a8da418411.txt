// This program generates a random matrix and finds its inverse

#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

// Function to calculate determinant of a submatrix
float determinant(float **matrix, int size) {
    float determinant = 0;
    float **submatrix;     // Submatrix to store values for recursive call

    // Base cases for 1x1 and 2x2 matrices
    if (size == 1) {
        determinant = matrix[0][0];
    }
    else if (size == 2) {
        determinant = (matrix[0][0] * matrix[1][1]) - (matrix[0][1] * matrix[1][0]);
    }
    else {
        // Dynamically allocate memory for submatrix
        submatrix = new float*[size-1];
        for (int i = 0; i < size-1; i++) {
            submatrix[i] = new float[size-1];
        }

        for (int x = 0; x < size; x++) {
            int sub_i = 0;  // Index for submatrix rows
            for (int i = 1; i < size; i++) {
                int sub_j = 0;  // Index for submatrix columns
                for (int j = 0; j < size; j++) {
                    // Check if current element is not in current column
                    if (j != x) {
                        // Add element to submatrix
                        submatrix[sub_i][sub_j] = matrix[i][j];
                        sub_j++;  // Increment submatrix column index
                    }
                }
                sub_i++;    // Increment submatrix row index
            }
            // Calculate determinant by recursively calling function on submatrix
            determinant += pow(-1, x) * matrix[0][x] * determinant(submatrix, size-1);
        }
        // Deallocate memory for submatrix
        for (int i = 0; i < size-1; i++) {
            delete[] submatrix[i];
        }
        delete[] submatrix;
    }
    return determinant;
}

// Function to find inverse of a matrix
void inverse(float **matrix, int size) {
    // Calculate determinant of matrix
    float det = determinant(matrix, size);
    if (det == 0) {
        cout << "Inverse does not exist";
    }
    else {
        // Dynamically allocate memory for adjoint matrix
        float **adjoint = new float*[size];
        for (int i = 0; i < size; i++) {
            adjoint[i] = new float[size];
        }

        // Calculate cofactor matrix
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                // Create temporary matrix for submatrix values
                float **submatrix = new float*[size-1];
                for (int k = 0; k < size-1; k++) {
                    submatrix[k] = new float[size-1];
                }
                // Fill temporary submatrix values
                int sub_i = 0;  // Index for submatrix rows
                for (int row = 0; row < size; row++) {
                    if (row != i) { // Check if current row is not equal to current element row
                        int sub_j = 0; // Index for submatrix columns
                        for (int column = 0; column < size; column++) {
                            // Check if current column is not equal to current element column
                            if (column != j) {
                                // Add element to submatrix
                                submatrix[sub_i][sub_j] = matrix[row][column];
                                sub_j++;    // Increment submatrix column index
                            }
                        }
                        sub_i++;    // Increment submatrix row index
                    }
                }
                // Calculate cofactor value and insert into adjoint matrix
                adjoint[i][j] = pow(-1, i+j) * determinant(submatrix, size-1);
                // Deallocate memory for submatrix
                for (int k = 0; k < size-1; k++) {
                    delete[] submatrix[k];
                }
                delete[] submatrix;
            }
        }

        // Calculate transpose of adjoint matrix to get inverse of matrix
        for (int i = 0; i < size; i++) {
            for (int j = i; j < size; j++) {
                float temp = adjoint[i][j];
                adjoint[i][j] = adjoint[j][i];
                adjoint[j][i] = temp;
            }
        }

        // Print inverse matrix
        cout << "Inverse matrix: " << endl;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                adjoint[i][j] /= det;
                cout << adjoint[i][j] << " ";
            }
            cout << endl;
        }

        // Deallocate memory for adjoint matrix
        for (int i = 0; i < size; i++) {
            delete[] adjoint[i];
        }
        delete[] adjoint;
    }
}

int main() {
    // Get input from user for matrix size
    int size;
    cout << "Enter size of matrix: ";
    cin >> size;

    // Dynamically allocate memory for matrix
    float **matrix = new float*[size];
    for (int i = 0; i < size; i++) {
        matrix[i] = new float[size];
    }

    // Initialize random number generator
    srand(time(0));
    // Fill matrix with random values
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            // Generate random value and insert into matrix
            matrix[i][j] = rand() % 100 + 1;
        }
    }

    // Print original matrix
    cout << "Original matrix: " << endl;
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // Find inverse of matrix
    inverse(matrix, size);

    // Deallocate memory for matrix
    for (int i = 0; i < size; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;

    return 0;
}