#include <iostream>
using namespace std;

// defining a template class for a binary search tree
template <class T>
class BinarySearchTree{

    // defining the structure of a tree node
    struct Node {
        T data; // holds the value of the node
        Node* left; // pointer to the left child node
        Node* right; // pointer to the right child node
    };

    // root node of the tree
    Node* root;

    // function to insert a new node in the tree
    void insertHelper(Node* root, T data) {

        // if tree is empty, make the new node as root
        if (root == nullptr) {
            root = new Node;
            root->data = data;
            root->left = nullptr;
            root->right = nullptr;
        }
        // if value is less than root's data, insert on the left side
        else if (data < root->data) {
            // if left child node is null, insert the new node
            if (root->left == nullptr) {
                root->left = new Node;
                root->left->data = data;
                root->left->left = nullptr;
                root->left->right = nullptr;
            }
            // else recursively call insertHelper on left subtree
            else {
                insertHelper(root->left, data);
            }
        }
        // if value is greater than root's data, insert on the right side
        else if (data > root->data) {
            // if right child node is null, insert the new node
            if (root->right == nullptr) {
                root->right = new Node;
                root->right->data = data;
                root->right->left = nullptr;
                root->right->right = nullptr;
            }
            // else recursively call insertHelper on right subtree
            else {
                insertHelper(root->right, data);
            }
        }
    }

    // helper function for preorder traversal, prints root, left, right
    void preorderHelper(Node* root) {
        if (root == nullptr)
            return;

        // print root
        cout << root->data << " ";

        // recursively call preorderHelper on left subtree
        preorderHelper(root->left);

        // recursively call preorderHelper on right subtree
        preorderHelper(root->right);
    }

    // helper function for inorder traversal, prints left, root, right
    void inorderHelper(Node* root) {
        if (root == nullptr)
            return;

        // recursively call inorderHelper on left subtree
        inorderHelper(root->left);

        // print root
        cout << root->data << " ";

        // recursively call inorderHelper on right subtree
        inorderHelper(root->right);
    }

    // helper function for postorder traversal, prints left, right, root
    void postorderHelper(Node* root) {
        if (root == nullptr)
            return;

        // recursively call postorderHelper on left subtree
        postorderHelper(root->left);

        // recursively call postorderHelper on right subtree
        postorderHelper(root->right);

        // print root
        cout << root->data << " ";
    }

public :

    // default constructor
    BinarySearchTree() {
        root = nullptr;
    }

    // function to insert a new node in the tree
    void insert(T data) {
        insertHelper(root, data);
    }

    // function for preorder traversal of the tree
    void preorderTraversal() {
        preorderHelper(root);
    }

    // function for inorder traversal of the tree
    void inorderTraversal() {
        inorderHelper(root);
    }

    // function for postorder traversal of the tree
    void postorderTraversal() {
        postorderHelper(root);
    }
};

// main function
int main() 
{
    // creating an instance of BinarySearchTree for integers
    BinarySearchTree<int> intBST;

    // inserting values into the tree
    intBST.insert(50);
    intBST.insert(30);
    intBST.insert(70);
    intBST.insert(20);
    intBST.insert(40);
    intBST.insert(60);
    intBST.insert(80);

    // printing the tree using different traversal methods
    cout << "Preorder traversal: ";
    intBST.preorderTraversal();
    cout << endl << "Inorder traversal: ";
    intBST.inorderTraversal();
    cout << endl << "Postorder traversal: ";
    intBST.postorderTraversal();

    // creating an instance of BinarySearchTree for strings
    BinarySearchTree<string> strBST;

    // inserting values into the tree
    strBST.insert("Hello");
    strBST.insert("World");
    strBST.insert("Welcome");
    strBST.insert("to");
    strBST.insert("Binary");
    strBST.insert("Search");
    strBST.insert("Tree");

    // printing the tree using different traversal methods
    cout << endl << endl << "Preorder traversal: ";
    strBST.preorderTraversal();
    cout << endl << "Inorder traversal: ";
    strBST.inorderTraversal();
    cout << endl << "Postorder traversal: ";
    strBST.postorderTraversal();

    return 0;
}