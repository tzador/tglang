#include <iostream>
using namespace std;

class Shape {
    private:
        int x, y;
    public:
        Shape(int x, int y) { //constructor with parameters
            this->x = x;
            this->y = y;
        }

        Shape(const Shape& otherShape) { //copy constructor
            this->x = otherShape.x;
            this->y = otherShape.y;
        }

        int getX() {
            return x;
        }

        int getY() {
            return y;
        }

        virtual void draw() { //virtual function
            cout << "Drawing shape at (" << x << ", " << y << ")" << endl;
        }

        virtual ~Shape() { // virtual destructor
            cout << "Shape destructor called" << endl;
        }
};

class Rectangle : public Shape { // Rectangle class inherits from Shape class
    private:
        int width, height;
    public:
        Rectangle(int x, int y, int width, int height) : Shape(x,y) { //derived class constructor
            this->width = width;
            this->height = height;
        }

        void draw() override { // override base class draw function
            cout << "Drawing rectangle at (" << getX() << ", " << getY() << "), with width: " << width << " and height: " << height << endl;
        }
};

int main() {
    Shape shape(5, 10); // create instance of Shape class
    shape.draw(); // calling base class draw function

    Rectangle rectangle(2, 3, 6, 4); // create instance of Rectangle class
    rectangle.draw(); // calling derived class draw function, overridden from base class

    Shape* shapePtr = &rectangle; // upcasting; creating a pointer of base class type that points to a derived class object
    shapePtr->draw(); // calling draw function of derived class object using base class pointer

    delete shapePtr; // this will call destructor of rectangle since it is a base class pointer pointing to derived class memory location
    return 0;
}