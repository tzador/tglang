// This code snippet generates a random maze using Prim's algorithm

#include <iostream> 
#include <algorithm> 
#include <vector> 
#include <stack> 
#include <stdlib.h> 

using namespace std; 

// function to check if cell is in bounds 
bool isValid(int row, int col, int rows, int cols) 
{ 
    return (row >= 0) && (row < rows) && (col >= 0) && (col < cols); 
} 

// function to generate a random maze using Prim's algorithm 
vector<vector<int>> generateMaze(int rows, int cols) 
{ 
    // initialize maze with all walls 
    vector<vector<int>> maze(rows, vector<int>(cols, 1)); 

    // pick random starting point 
    int startRow = rand() % rows; 
    int startCol = rand() % cols; 

    // mark starting point as part of maze 
    maze[startRow][startCol] = 0; 

    // create stack for active cells to track visited cells 
    stack<pair<int, int>> activeCells; 

    // add starting point to stack 
    activeCells.push(make_pair(startRow, startCol)); 

    // while there are still active cells 
    while (!activeCells.empty()) 
    { 
        // choose random active cell 
        pair<int, int> currentCell = activeCells.top(); 
        activeCells.pop(); 

        // create vector of potential neighbor cells 
        vector<pair<int, int>> neighbors; 

        // add top neighbor 
        neighbors.push_back(make_pair(currentCell.first - 1, currentCell.second)); 
        // add bottom neighbor 
        neighbors.push_back(make_pair(currentCell.first + 1, currentCell.second)); 
        // add left neighbor 
        neighbors.push_back(make_pair(currentCell.first, currentCell.second - 1)); 
        // add right neighbor 
        neighbors.push_back(make_pair(currentCell.first, currentCell.second + 1)); 

        // shuffle neighbor cells randomly 
        random_shuffle(neighbors.begin(), neighbors.end()); 

        // for each neighbor cell 
        for (auto neighbor : neighbors) 
        { 
            // if neighbor is in bounds and has all walls 
            if (isValid(neighbor.first, neighbor.second, rows, cols) && maze[neighbor.first][neighbor.second] != 0) 
            { 
                // mark the cell as part of the maze 
                maze[neighbor.first][neighbor.second] = 0; 

                // add walls between current cell and chosen neighbor 
                if (neighbor.first < currentCell.first) // top neighbor 
                { 
                    maze[currentCell.first - 1][currentCell.second] = 1; // bottom wall of current cell 
                } 
                else if (neighbor.first > currentCell.first) // bottom neighbor 
                { 
                    maze[currentCell.first + 1][currentCell.second] = 1; // top wall of current cell 
                } 
                else if (neighbor.second < currentCell.second) // left neighbor 
                { 
                    maze[currentCell.first][currentCell.second - 1] = 1; // right wall of current cell 
                } 
                else if (neighbor.second > currentCell.second) // right neighbor 
                { 
                    maze[currentCell.first][currentCell.second + 1] = 1; // left wall of current cell 
                } 

                // add chosen neighbor to stack as active cell 
                activeCells.push(neighbor); 
            } 
        } 
    } 

    // return final generated maze 
    return maze; 
}

int main() 
{ 
    // specify number of rows and columns for maze 
    int rows = 10; 
    int cols = 10; 

    // generate random maze using Prim's algorithm 
    vector<vector<int>> maze = generateMaze(rows, cols); 

    // print out maze with walls and empty cells 
    for (int i = 0; i < rows; i++) 
    { 
        for (int j = 0; j < cols; j++) 
        { 
            if (maze[i][j] == 1) 
            { 
                cout << "###"; // wall 
            } 
            else 
            { 
                cout << " "; // empty cell 
            } 
        } 
        cout << endl; 
    } 

    return 0; 
}