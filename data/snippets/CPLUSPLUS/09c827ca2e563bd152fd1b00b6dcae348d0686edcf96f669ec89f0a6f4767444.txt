/* This code snippet is an example of a complex sorting algorithm known as quicksort. 
/* It takes an input array and sorts it in ascending order, using a recursive approach. */

/* Function to partition the array based on the pivot element */
int partition(int arr[], int low, int high)
{
    int pivot = arr[high];    // The pivot element is chosen as the last element of the array
    int i = (low - 1);    // Index of smaller element

    for (int j = low; j <= high - 1; j++)
    {
        // If current element is smaller than or equal to pivot element,
        // swap it with the element at index i and increment i
        if (arr[j] <= pivot)
        {
            i++;
            swap(arr[i], arr[j]);
        }
    }

    // Swap the pivot element with the element at index i+1, to place it at the right position in the sorted array
    swap(arr[i + 1], arr[high]);
    return (i + 1);    // Return the index of the pivot element
}

/* Function that implements the quicksort algorithm */
void quicksort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* Partition the array and get the index of the pivot element */
        int pivot_index = partition(arr, low, high);
        
        // Recursively sort the left and right subarrays
        quicksort(arr, low, pivot_index - 1);
        quicksort(arr, pivot_index + 1, high);
        
        // The array is now sorted in ascending order
    }
}

/* Driver code to test the quicksort function */
int main()
{
    int arr[] = { 5, 3, 8, 2, 9, 1, 7 };
    int n = sizeof(arr) / sizeof(arr[0]);
    
    /* Calling the quicksort function */
    quicksort(arr, 0, n - 1);

    /* Output: Sorted array: 1, 2, 3, 5, 7, 8, 9 */
}