// This code snippet finds the minimum spanning tree of a graph using Prim's algorithm

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

// Defining custom pair for graph edges
struct Edge {
    int u;
    int v;
    int weight;
};

// Defining custom comparator for priority queue
struct Compare {
    bool operator() (Edge a, Edge b) {
        return a.weight > b.weight;
    }
};

// Function to find the minimum spanning tree using Prim's algorithm
void findMST(vector<vector<pair<int,int>>> &adj_list, vector<bool> &visited, vector<Edge> &edges) {
    // Initializing priority queue and visited array
    priority_queue<Edge, vector<Edge>, Compare> pq;
    visited[1] = true; // Starting from vertex 1
    for (auto p : adj_list[1])
        pq.push({1, p.first, p.second}); // Adding all edges from vertex 1 to priority queue

    // Running the algorithm until all vertices are visited or all edges are processed
    while (!pq.empty()) {
        Edge e = pq.top();
        pq.pop();
        // Checking for cycle by checking if both vertices are already visited
        if (visited[e.u] && visited[e.v])
            continue;
        // Adding the edge to the minimum spanning tree
        edges.push_back(e);
        // Updating visited array and priority queue
        visited[e.v] = true;
        for (auto p : adj_list[e.v]) {
            // Only adding unprocessed edges to priority queue
            if (!visited[p.first]) {
                pq.push({e.v, p.first, p.second});
            }
        }
    }
}

// Driver code
int main() {
    // Initializing graph and input
    int n, m;
    cout << "Enter number of vertices: ";
    cin >> n;
    cout << "Enter number of edges: ";
    cin >> m;
    vector<vector<pair<int,int>>> adj_list(n+1);
    vector<bool> visited(n+1, false);
    vector<Edge> edges;
    cout << "Enter all edges and their weights: " << endl;
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj_list[u].push_back({v, w});
        adj_list[v].push_back({u, w});
    }

    // Finding the minimum spanning tree using Prim's algorithm
    findMST(adj_list, visited, edges);

    // Printing the minimum spanning tree and its weight
    int min_weight = 0;
    for (auto e : edges) {
        min_weight += e.weight;
        cout << e.u << " - " << e.v << " : " << e.weight << endl;
    }
    cout << "Weight of minimum spanning tree: " << min_weight << endl;
    return 0;
}