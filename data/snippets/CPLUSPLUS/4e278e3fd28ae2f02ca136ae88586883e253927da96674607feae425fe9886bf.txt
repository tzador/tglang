//! Iterative Fourier series
#include <iostream>
#include <cmath>

using namespace std;

//! This function calculates the magnitude of a complex number
double cabs(complex<double> c) {
    return sqrt(c.real() * c.real() + c.imag() * c.imag());
}

//! This function calculates the phase angle of a complex number
double phase(complex<double> c) {
    return atan(c.imag() / c.real());
}

//! This function calculates the nth Fourier coefficient of a function
//! using the formula cn = (1/T) * integral(f(x) * e^(-2*pi*i*n*x/T)) dx, where T is the period
//! and i is the imaginary unit
complex<double> fourier_coefficient(function<double(double)> f, int n, double T = 1) {
    complex<double> cn = 0.0;
    double dx = 0.0001; // Define a small value for the increment of the integral
    for (double x = 0.0; x < T; x += dx) {
        cn += f(x) * exp(-2 * M_PI * complex<double>(0, 1) * n * x / T) * dx;
    }
    cn /= T; // Divide by the period
    return cn;
}

//! Main function
int main() {
    complex<double> f(double x) {
        return complex<double>(1 / (1 + x * x), 0); // Define the function to find Fourier coefficients of
    }
    
    int N = 100; // Number of Fourier coefficients to calculate
    
    //! Create arrays to store the Fourier coefficients and corresponding frequencies
    double frequencies[N];
    complex<double> coefficients[N];
    
    //! Find the Fourier coefficients
    for (int n = -N/2; n <= N/2; ++n) {
        frequencies[n + N/2] = n;
        coefficients[n + N/2] = fourier_coefficient(f, n, M_PI);
    }
    
    //! Output the results
    for (int i = 0; i < N; ++i) {
        double freq = frequencies[i];
        complex<double> coeff = coefficients[i];
        cout << "n = " << freq << ": c" << i << " = " << coeff << " with magnitude " << cabs(coeff) << " and phase angle " << phase(coeff) << endl;
    }
    
    return 0;
}