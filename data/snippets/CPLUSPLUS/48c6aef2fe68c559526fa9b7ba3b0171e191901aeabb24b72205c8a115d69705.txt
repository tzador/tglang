#include <iostream>

// Defining a class
class Animal {
    private:
        int age;
        std::string name;
    public:
        // Constructor with parameters
        Animal(int _age, std::string _name) {
            age = _age;
            name = _name;
        }
        // Setter method for age
        void setAge(int newAge) {
            age = newAge;
        }
        // Getter method for age
        int getAge() {
            return age;
        }
        // Setter method for name
        void setName(std::string newName) {
            name = newName;
        }
        // Getter method for name
        std::string getName() {
            return name;
        }
        // Virtual method for making animal sound
        virtual void makeSound() {
            std::cout << "I am an animal making a sound" << std::endl;
        }
};

// Inheriting from the Animal class
class Dog : public Animal {
    public:
        // Constructor that calls the parent constructor
        Dog(int _age, std::string _name) : Animal(_age, _name) {}
        // Overriding the makeSound() method
        void makeSound() {
            std::cout << "Woof!" << std::endl;
        }
};

int main() {

    // Creating an instance of the Animal class
    Animal myAnimal(5, "Fido");
    // Calling the getter methods to print the properties
    std::cout << "My animal's name is " << myAnimal.getName() << " and it is " << myAnimal.getAge() << " years old." << std::endl;
    // Creating an instance of the Dog class
    Dog myDog(3, "Buddy");
    // Calling the makeSound() method to print the sound
    myDog.makeSound();

    return 0;
}