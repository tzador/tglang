#include <iostream> //Standard input/output header file

using namespace std; //Using standard namespace

class Shape //Class declaration
{
protected:
    double area; //Protected data member

public:
    virtual void calculateArea() = 0; //Virtual pure function
    virtual void displayArea() //Virtual function
    {
        cout << "The area of the shape is: " << area << " units." << endl; //Printing the area
    }
};

class Square : public Shape //Square class inherits from Shape
{
private:
    double length; //Private data member
public:
    Square(double len) //Parameterized constructor
    {
        length = len;
    }
    void calculateArea() //Defining the calculateArea function
    {
        area = length * length; //Calculating the are of a square
    }
};

class Circle : public Shape //Circle class inherits from Shape
{
private:
    double radius; //Private data member
public:
    Circle(double rad) //Parameterized constructor
    {
        radius = rad;
    }
    void calculateArea() //Defining the calculateArea function
    {
        area = 3.14 * radius * radius; //Calculating the area of a circle
    }
};

int main() //Main function
{
    //Creating objects of Square and Circle classes
    Square square(5);
    Circle circle(3);

    //Storing the objects in an array of Shape class
    Shape* shapes[2] = { &square, &circle };

    for (int i = 0; i < 2; i++) { //Looping through the array 
        shapes[i]->calculateArea(); //Calling the virtual function
        shapes[i]->displayArea(); //Calling the virtual function
    }

    return 0;
}