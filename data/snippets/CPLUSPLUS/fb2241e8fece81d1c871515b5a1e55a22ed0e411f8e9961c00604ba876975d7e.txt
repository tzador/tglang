#include <iostream>
#include <string>
#include <vector>

using namespace std;

// This is a function template
template <class T>
T multiply(T a, T b) 
{
    return a * b;
}

// This is a class template
template <class T>
class Vector 
{
private:
    vector<T> values_;

public:
    // Constructor
    Vector(vector<T> input): values_(input)
    {
        cout << "Vector initialized" << endl;
    }

    // Member function to print the vector
    void printVector()
    {
        for (auto it = values_.begin(); it != values_.end(); ++it)
        {
            cout << *it << " ";
        }
        
        cout << endl;
    }

    // Overload operator+ to add two vectors
    Vector operator+(Vector<T>& other)
    {
        vector<T> sum;

        for (unsigned int i = 0; i < values_.size(); i++)
        {
            // Push back the sum of corresponding elements
            sum.push_back(values_[i] + other.values_[i]);
        }

        // Return the result vector
        return Vector(sum);
    }
};

int main()
{
    // Create two vectors to test the class
    vector<int> v1 = {1, 2, 3, 4, 5};
    vector<int> v2 = {10, 20, 30, 40, 50};

    // Instantiate the Vector class with the two vectors as parameters
    Vector<int> v(v1);
    
    // Print the vector
    v.printVector();

    // Call the multiply function template with two integers
    cout << "Multiplication result: " << multiply<int>(5, 7) << endl;

    // Instantiate a new vector with the second vector
    Vector<int> v3(v2);

    // Add the two vectors
    Vector<int> v4 = v + v3;

    // Print the result vector
    v4.printVector();

    return 0;
}