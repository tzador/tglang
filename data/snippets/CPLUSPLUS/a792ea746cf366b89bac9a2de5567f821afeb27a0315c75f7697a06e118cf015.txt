// This code snippet creates a matrix object
// using templates and operator overloading

#include <iostream>
using namespace std;

// Class for a matrix object
template <class T>
class Matrix {
private:
	int rows, columns;
	T** matrix;
	
public:
	// Constructor
	Matrix(int r, int c) {
		rows = r;
		columns = c;
		
		// Allocate memory for matrix
		matrix = new T*[rows];
		for (int i = 0; i < rows; i++) {
			matrix[i] = new T[columns];
		}
	}
	
	// Operator overloading for addition
	Matrix<T> operator+(Matrix<T> const& obj) {
		// Create a new matrix for result
		Matrix<T> result(rows, columns);
		
		// Add corresponding elements of matrices
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < columns; j++) {
				result.matrix[i][j] = matrix[i][j] + obj.matrix[i][j];
			}
		}
		
		// Return the result
		return result;
	}
	
	// Operator overloading for subtraction
	Matrix<T> operator-(Matrix<T> const& obj) {
		// Create a new matrix for result
		Matrix<T> result(rows, columns);
		
		// Subtract corresponding elements of matrices
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < columns; j++) {
				result.matrix[i][j] = matrix[i][j] - obj.matrix[i][j];
			}
		}
		
		// Return the result
		return result;
	}
	
	// Operator overloading for multiplication
	Matrix<T> operator*(Matrix<T> const& obj) {
		// Create a new matrix for result
		Matrix<T> result(rows, obj.columns);
		
		// Multiply matrices using dot product method
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < obj.columns; j++) {
				T sum = 0;
				for (int k = 0; k < columns; k++) {
					sum += matrix[i][k] * obj.matrix[k][j];
				}
				result.matrix[i][j] = sum;
			}
		}
		
		// Return the result
		return result;
	}
	
	// Method to fill the matrix with values
	void fillMatrix() {
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < columns; j++) {
				cout << "Enter element at index [" << i << "][" << j << "]: ";
				cin >> matrix[i][j];
			}
		}
	}
	
	// Method to print the matrix
	void printMatrix() {
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < columns; j++) {
				cout << matrix[i][j] << " ";
			}
			cout << endl;
		}
		cout << endl;
	}
};

// Main function
int main() {
	// Create two matrices of type int
	Matrix<int> m1(3, 3);
	Matrix<int> m2(3, 3);
	
	cout << "Enter values for first matrix:" << endl;
	m1.fillMatrix(); // Fill the first matrix
	cout << endl;
	
	cout << "Enter values for second matrix:" << endl;
	m2.fillMatrix(); // Fill the second matrix
	cout << endl;
	
	// Perform addition, subtraction and multiplication on the matrices
	Matrix<int> addition = m1 + m2;
	Matrix<int> subtraction = m1 - m2;
	Matrix<int> multiplication = m1 * m2;
	
	// Print the results
	cout << "Addition of m1 and m2:" << endl;
	addition.printMatrix();
	
	cout << "Subtraction of m1 and m2:" << endl;
	subtraction.printMatrix();
	
	cout << "Multiplication of m1 and m2:" << endl;
	multiplication.printMatrix();
	
	return 0;
}

/*
Output:
Enter values for first matrix:
Enter element at index [0][0]: 1
Enter element at index [0][1]: 2
Enter element at index [0][2]: 3
Enter element at index [1][0]: 4
Enter element at index [1][1]: 5
Enter element at index [1][2]: 6
Enter element at index [2][0]: 7
Enter element at index [2][1]: 8
Enter element at index [2][2]: 9

Enter values for second matrix:
Enter element at index [0][0]: 9
Enter element at index [0][1]: 8
Enter element at index [0][2]: 7
Enter element at index [1][0]: 6
Enter element at index [1][1]: 5
Enter element at index [1][2]: 4
Enter element at index [2][0]: 3
Enter element at index [2][1]: 2
Enter element at index [2][2]: 1

Addition of m1 and m2:
10 10 10
10 10 10
10 10 10

Subtraction of m1 and m2:
-8 -6 -4
-2 0 2
4 6 8

Multiplication of m1 and m2:
30 24 18
84 69 54
138 114 90
*/