#include <iostream> 
using namespace std; 

// Class declaration 
class SortingAlgorithm 
{ 
    private: 
        // Function to swap two elements 
        void swapElement(int* a, int* b) 
        { 
            int temp = *a; 
            *a = *b; 
            *b = temp; 
        } 
        
        /* 
            Function to perform insertion sort on an array 
            Parameters:
                - arr: the array to be sorted
                - size: the size of the array
        */
        void insertionSort(int arr[], int size) 
        { 
            int i, j, element; 
            for (i = 1; i < size; i++) 
            { 
                element = arr[i]; 
                j = i - 1; 
        
                // Move elements of arr[0..i-1], that are 
                // greater than element, to one position ahead 
                // of their current position 
                while (j >= 0 && arr[j] > element) 
                { 
                    arr[j + 1] = arr[j]; 
                    j = j - 1; 
                } 
                arr[j + 1] = element; 
            } 
        } 
    
    public: 
        /* 
            Function to print the sorted array 
            Parameters:
                - arr: the sorted array to be printed
                - size: the size of the array
        */
        void printArray(int arr[], int size) 
        { 
            for (int i = 0; i < size; i++) 
                cout << arr[i] << " "; 
            cout << endl; 
        } 

        /* 
            Function to perform QuickSort on an array 
            Parameters:
                - arr: the array to be sorted
                - low: starting index of the subarray
                - high: ending index of the subarray
        */
        void quickSort(int arr[], int low, int high) 
        { 
            if (low < high) 
            { 
                // partition index 
                int partition = partitionArray(arr, low, high); 
        
                // recursion for left and right subarrays 
                quickSort(arr, low, partition - 1); 
                quickSort(arr, partition + 1, high); 
            } 
        } 

        /* 
            Function to partition the array using a pivot element 
            Parameters:
                - arr: the array to be sorted
                - low: starting index of the subarray
                - high: ending index of the subarray
            Returns:
                partition index
        */
        int partitionArray(int arr[], int low, int high) 
        { 
            // pivot element 
            int pivot = arr[high]; 
            int i = (low - 1); // index of smaller element 
        
            for (int j = low; j <= high - 1; j++) 
            { 
                // if current element is smaller than pivot 
                if (arr[j] < pivot) 
                { 
                    i++; // increment index of smaller element 
                    swapElement(&arr[i], &arr[j]); 
                } 
            } 
            swapElement(&arr[i + 1], &arr[high]); 
            return (i + 1); 
        } 
        
        /* 
            Function to perform Selection Sort on an array 
            Parameters:
                - arr: the array to be sorted
                - size: the size of the array
        */
        void selectionSort(int arr[], int size) 
        { 
            int i, j, minIndex; 
            for (i = 0; i < size - 1; i++) 
            { 
                // Find the minimum element in unsorted array 
                minIndex = i; 
                for (j = i + 1; j < size; j++) 
                    if (arr[j] < arr[minIndex]) 
                        minIndex = j; 
        
                // Swap the found minimum element with the first element 
                swapElement(&arr[minIndex], &arr[i]); 
            } 
        } 
}; 

// Driver code 
int main() 
{ 
    int arr[] = {12, 11, 13, 5, 6}; 
    int size = sizeof(arr) / sizeof(arr[0]); 
    
    // Create an object of class SortingAlgorithm 
    SortingAlgorithm obj; 
    
    // Unsorted array 
    cout << "Unsorted array: " << endl; 
    obj.printArray(arr, size); 
    
    // Perform Insertion Sort on the array 
    obj.insertionSort(arr, size); 
    cout << "Array sorted using Insertion Sort: " << endl; 
    obj.printArray(arr, size); 
    
    // Randomize the array 
    random_shuffle(arr, arr + size); 
    
    // Perform QuickSort on the array 
    obj.quickSort(arr, 0, size - 1); 
    cout << "Array sorted using QuickSort: " << endl; 
    obj.printArray(arr, size); 
    
    // Randomize the array 
    random_shuffle(arr, arr + size); 
    
    // Perform Selection Sort on the array 
    obj.selectionSort(arr, size); 
    cout << "Array sorted using Selection Sort: " << endl; 
    obj.printArray(arr, size); 
    
    return 0; 
}