//This is a function that performs merge sort on an array of integers
//It takes in the array, the starting index and the ending index as parameters

void mergeSort(int arr[], int start, int end)
{
    //Check if the array has more than 1 element
    if (start < end)
    {
        //Calculate the mid index
        int mid = (start + end) / 2;

        //Recursively call mergeSort on the left and right subarrays
        mergeSort(arr, start, mid);
        mergeSort(arr, mid + 1, end);

        //Merge the sorted subarrays
        //Create temporary arrays to store the left and right subarrays
        int leftArr[mid - start + 1];
        int rightArr[end - mid];

        //Copy the elements of the given array to the temporary arrays
        for (int i = 0; i < mid - start + 1; i++)
        {
            leftArr[i] = arr[start + i];
        }
        for (int j = 0; j < end - mid; j++)
        {
            rightArr[j] = arr[mid + 1 + j];
        }

        //Declare variables for merging
        int i = 0, j = 0, k = start;
        
        //Compare the elements of the left and right subarrays and merge them
        while (i < mid - start + 1 && j < end - mid)
        {
            if (leftArr[i] <= rightArr[j])
            {
                arr[k] = leftArr[i];
                i++;
            }
            else
            {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        //Copy remaining elements of left subarray
        while (i < mid - start + 1)
        {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        //Copy remaining elements of right subarray
        while (j < end - mid)
        {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }
}