#include <iostream>
using namespace std;

/*
  This is a complex code snippet written in C++.
  It involves the use of classes, inheritance, templates and multiple functions.
  It also includes error handling using exceptions.
  The code snippet creates a template class called 'Shape' which is inherited by subclasses 'Polygon' and 'Circle'.
  The subclasses override the virtual function in the base class.
  The code also includes a function to validate input data and a main function to execute the program.
*/

// Template class for Shapes
template <class T>
class Shape {
    private:
        T length; // length of the shape
        T width; // width of the shape
    
    public:
        // Constructor
        Shape(T l, T w) {
            length = l;
            width = w;
        }
        
        // Function to get the area of the shape
        T area() {
            return length * width;
        }
        
        // Function to calculate perimeter of the shape
        virtual T perimeter() {
            return (2 * length) + (2 * width);
        }
};

// Subclass of Shape for Polygons
class Polygon : public Shape<int> {
    public:
        // Constructor
        Polygon(int l, int w) : Shape<int>(l, w) {}
        
        // Override the virtual perimeter function
        int perimeter() override {
            return (2 * length) + (3 * width);
        }
};

// Subclass of Shape for Circles
class Circle : public Shape<double> {
    private:
        double radius; // radius of the circle
    
    public:
        // Constructor
        Circle(double r) : Shape<double>(r, r) {
            radius = r;
        }
        
        // Override the virtual perimeter function
        double perimeter() override {
            return 2 * 3.14 * radius;
        }
        
        // Function to get the area of the circle
        double area() {
            return 3.14 * radius * radius;
        }
};

// Function to validate input data
template <class T>
bool validate_input(T length, T width) {
    if (length < 0 || width < 0) { // Check for negative values
        throw "Invalid input. Input values must be positive.";
    } else if (length <= width) { // Check if length is smaller than width
        throw "Invalid input. Length must be greater than width.";
    }
    return true; // Input data is valid
}

// Main function
int main() {
    // Declare variables
    int length, width;
    double radius;
    
    // Get input from user
    cout << "Enter the length and width of a rectangle: ";
    cin >> length >> width;
    cout << "Enter the radius of a circle: ";
    cin >> radius;
    
    // Validate input data
    try {
        validate_input(length, width);
    } catch(const char* msg) { // Handle exceptions
        cerr << msg << endl;
        return 1; // Stop program if input is invalid
    }
    
    // Create instances of Polygon and Circle
    Polygon p(length, width);
    Circle c(radius);
    
    // Print area and perimeter of the Polygon
    cout << "Polygon area: " << p.area() << endl;
    cout << "Polygon perimeter: " << p.perimeter() << endl;
    
    // Print area and perimeter of the Circle
    cout << "Circle area: " << c.area() << endl;
    cout << "Circle perimeter: " << c.perimeter() << endl;
    
    return 0;
}