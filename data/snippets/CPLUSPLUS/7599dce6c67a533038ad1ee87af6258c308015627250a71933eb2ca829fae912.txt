/*******************************************************
* Description: This is a complex code snippet in C++ 
* that implements a binary search tree data structure.
* The binary search tree is a data structure that 
* organizes data in a hierarchical manner, with 
* efficient search and insertion operations.
*******************************************************/

#include <iostream> 

using namespace std; 

//struct to define the node of the binary search tree 
struct Node { 
    int data; 
    Node *left, *right; 
    Node(int data) { 
        this->data = data; 
        left = right = NULL; 
    } 
}; 

//function to insert a new node into the binary search tree 
Node* insert(Node* root, int data) { 
    //if root is null, create a new node and return it 
    if (root == NULL) 
        return new Node(data); 

    //if data is less than root's data, insert it into the left subtree 
    if (data < root->data) 
        root->left = insert(root->left, data); 
    //if data is greater than root's data, insert it into the right subtree 
    else if (data > root->data) 
        root->right = insert(root->right, data); 

    return root; //return the root node 
} 

//function to search for a node with a given value in the binary search tree 
bool search(Node* root, int data) { 
    //if root is null, the node is not found 
    if (root == NULL) 
        return false; 

    //if data is found at root, return true 
    if (root->data == data) 
        return true; 

    //if data is less than root's data, search in the left subtree 
    if (data < root->data) 
        return search(root->left, data); 
    //if data is greater than root's data, search in the right subtree 
    else
        return search(root->right, data); 
} 

//function to delete a node with given value in the binary search tree 
Node* deleteNode(Node* root, int data) { 
    //if root is null, return it 
    if (root == NULL) 
        return root; 

    //if data is less than root's data, delete it from the left subtree 
    if (data < root->data) 
        root->left = deleteNode(root->left, data); 
    //if data is greater than root's data, delete it from the right subtree 
    else if (data > root->data) 
        root->right = deleteNode(root->right, data); 

    //if data is equal to root's data, delete the root 
    else { 
        //if root has only one child or no child 
        if (root->left == NULL) { 
            Node* temp = root->right; 
            delete root; 
            return temp; 
        } 
        else if (root->right == NULL) { 
            Node* temp = root->left; 
            delete root; 
            return temp; 
        } 

        //if root has two children, get the minimum value node from the right subtree 
        Node* temp = root->right; 
        while (temp->left != NULL) 
            temp = temp->left; 

        //replace root's data with the minimum value 
        root->data = temp->data; 

        //delete the minimum value node from the right subtree 
        root->right = deleteNode(root->right, temp->data); 
    } 
    return root; 
} 

//main function to test the implementation 
int main() { 
    //creating a root node and inserting data into the binary search tree 
    Node* root = new Node(10); 
    insert(root, 8); 
    insert(root, 14); 
    insert(root, 3); 
    insert(root, 5); 
    insert(root, 19); 
    insert(root, 1); 

    //searching for a node with value 19, which exists in the tree 
    if (search(root, 19)) 
        cout << "Node with value 19 found in the tree." << endl; 
    else 
        cout << "Node with value 19 not found in the tree." << endl; 

    //searching for a node with value 20, which does not exist in the tree 
    if (search(root, 20)) 
        cout << "Node with value 20 found in the tree." << endl; 
    else 
        cout << "Node with value 20 not found in the tree." << endl; 

    //deleting a node with value 3 from the tree 
    root = deleteNode(root, 3); 

    //searching for a node with value 3, which should not exist in the tree anymore 
    if (search(root, 3)) 
        cout << "Node with value 3 found in the tree." << endl; 
    else 
        cout << "Node with value 3 not found in the tree." << endl; 

    //deleting the root node 
    root = deleteNode(root, 10); 

    //searching for the root node, which should not exist in the tree anymore 
    if (search(root, 10)) 
        cout << "Root node still exist in the tree." << endl; 
    else 
        cout << "Root node deleted from the tree." << endl; 

    return 0; 
}