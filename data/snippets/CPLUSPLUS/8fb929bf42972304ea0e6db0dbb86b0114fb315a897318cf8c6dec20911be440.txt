/**
* This is a program that implements the concept of binary search tree.
*
* This program is divided into four parts:
*  1) Node struct, which represents a single node in the binary search tree
*  2) Insert function, which inserts a new node into the tree
*  3) Search function, which searches for a given value in the tree
*  4) Main function, which acts as the driver function and creates the tree
*/

#include <iostream>

// Node struct to represent a single node in the binary search tree
struct Node {
    int value;
    Node* left; // pointer to left child node
    Node* right; // pointer to right child node

    // Constructor to initialize the node with a given value and null left and right pointers
    Node(int val) {
        value = val;
        left = NULL;
        right = NULL;
    }
};

// Function to insert a new node into the tree
void insert(Node*& root, int key) {
    // Create a new node with the given value
    Node* newNode = new Node(key);

    // If the tree is empty, set the new node as the root node
    if (root == NULL) {
        root = newNode;
    }
    // If the value is less than the root's value, insert it into the left subtree
    else if (key < root->value) {
        insert(root->left, key);
    }
    // If the value is greater than or equal to the root's value, insert it into the right subtree
    else {
        insert(root->right, key);
    }
}

// Function to search for a given value in the tree
bool search(Node* root, int key) {
    // If the tree is empty, return false
    if (root == NULL) {
        return false;
    }
    // If the root node has the given value, return true
    else if (key == root->value) {
        return true;
    }
    // If the value is less than the root's value, search in the left subtree
    else if (key < root->value) {
        return search(root->left, key);
    }
    // If the value is greater than the root's value, search in the right subtree
    else {
        return search(root->right, key);
    }
}

// Main function to create the tree and test the insert and search functions
int main() {
    // Initialize an empty root node
    Node* root = NULL;

    // Insert elements into the tree
    insert(root, 5);
    insert(root, 2);
    insert(root, 7);
    insert(root, 1);
    insert(root, 6);

    // Search for elements in the tree
    std::cout << "Is 1 present in the tree? " << (search(root, 1) ? "Yes" : "No") << std::endl;
    std::cout << "Is 4 present in the tree? " << (search(root, 4) ? "Yes" : "No") << std::endl;
    std::cout << "Is 6 present in the tree? " << (search(root, 6) ? "Yes" : "No") << std::endl;
    
    return 0;
}