#include <iostream>
#include <vector>

// Function to perform a binary search on a sorted vector
int binarySearch(std::vector<int> arr, int target)
{
    // Initialize start and end indices of vector
    int start = 0;
    int end = arr.size() - 1;

    // Loop until start index is less than or equal to end index
    while (start <= end)
    {
        // Calculate middle index of vector
        int mid = (start + end) / 2;

        // Check if target is at middle index
        if (arr[mid] == target)
        {
            // If found, return the index
            return mid;
        }
        // If target is less than element at middle index, search in the left half
        else if (arr[mid] > target)
        {
            // Update end index to exclude right half of vector
            end = mid - 1;
        }
        // If target is greater than element at middle index, search in the right half
        else
        {
            // Update start index to exclude left half of vector
            start = mid + 1;
        }
    }

    // If target is not present in vector, return -1
    return -1;
}

int main()
{
    // Create a sorted vector of integers
    std::vector<int> vec = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};

    // Call binary search function to search for target value of 12
    int index = binarySearch(vec, 12);

    // Print the index where target element is found
    std::cout << "Element found at index " << index << std::endl;

    return 0;
}