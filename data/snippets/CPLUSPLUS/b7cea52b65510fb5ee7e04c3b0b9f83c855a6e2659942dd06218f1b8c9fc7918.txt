// This is a complex code snippet in C++
#include<iostream>

using namespace std;

// Class declaration
class Complex{
  private:
    float real;
    float imag;

  public:

    // Default constructor
    Complex(): real(0), imag(0){}

    // Parameterized constructor
    Complex(float r, float i): real(r), imag(i){}

    // Overloading + operator
    Complex operator + (const Complex& obj){
      Complex res;
      res.real = real + obj.real;
      res.imag = imag + obj.imag;
      return res;
    }

    // Overloading - operator
    Complex operator - (const Complex& obj){
      Complex res;
      res.real = real - obj.real;
      res.imag = imag - obj.imag;
      return res;
    }

    // Overloading * operator
    Complex operator * (const Complex& obj){
      Complex res;
      res.real = (real * obj.real) - (imag * obj.imag);
      res.imag = (real * obj.imag) + (imag * obj.real);
      return res;
    }

    // Overloading == operator
    bool operator == (const Complex& obj){
      if(real == obj.real && imag == obj.imag){
        return true;
      }
      else{
        return false;
      }
    }
};

int main(){
  // Creating objects
  Complex c1(5,3);
  Complex c2(2,7);

  // Performing operations
  Complex c3 = c1 + c2;
  Complex c4 = c1 * c2;
  bool equal = c1 == c2;

  // Printing results
  cout << "The result of the addition is: ";
  cout << c3.real << " + " << c3.imag << "i";
  cout << "\nThe result of the multiplication is: ";
  cout << c4.real << " + " << c4.imag << "i";
  cout << "\nThe numbers are equal: " << equal;

  return 0;
}