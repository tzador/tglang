#include <iostream> // include input/output stream library

// define a template class named "List"
template <class T>
class List
{
private:
    int size; // size of the list
    T *elements; // array to store elements of type T
public:
    // constructor to initialize list with given size
    List(int n) 
    {
        size = n;
        elements = new T[n]; // allocate memory for elements array
    }

    // destructor to free up memory
    ~List() 
    {
        delete[] elements; // delete elements array
    }

    // function to add an element at given index
    void add(int index, T element)
    {
        // check for invalid index
        if(index < 0 || index >= size)
        {
            std::cerr << "Error: Index out of bounds\n";
            return;
        }

        elements[index] = element; // assign element at given index
    }

    // function to retrieve element at given index
    T get(int index)
    {
        // check for invalid index
        if(index < 0 || index >= size)
        {
            std::cerr << "Error: Index out of bounds\n";
            return 0; // return 0 in case of error
        }

        return elements[index]; // return element at given index
    }

    // function to print all the elements in the list
    void print()
    {
        std::cout << "List: ";
        for(int i = 0; i < size; i++)
        {
            std::cout << elements[i] << " ";
        }
        std::cout << std::endl;
    }
};

// main function
int main()
{
    // create a list of integers with size 5        
    List<int> myList(5);

    // add elements to the list
    myList.add(0, 10);
    myList.add(1, 20);
    myList.add(2, 30);
    myList.add(3, 40);
    myList.add(4, 50);

    // print the list
    myList.print();

    // get element at index 2
    int element = myList.get(2);

    // print the retrieved element
    std::cout << "Element at index 2: " << element << std::endl;

    return 0;
}