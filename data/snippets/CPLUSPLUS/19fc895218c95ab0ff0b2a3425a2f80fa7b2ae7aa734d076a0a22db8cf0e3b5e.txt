//This code creates a custom LinkedList class in C++

#include <iostream>

using namespace std;

//Custom Node class for LinkedList
class Node
{
    public:
        int data;
        Node* next;
        //Constructor
        Node(int data)
        {
            //Initialize data and next pointer
            this->data = data;
            next = NULL;
        }
};

//Custom LinkedList class
class LinkedList
{
    private:
        Node* head;
    public:
        //Constructor
        LinkedList()
        {
            //Initialize head pointer
            head = NULL;
        }
        //Function to insert a node at the beginning of the LinkedList
        void insertAtBeginning(int data)
        {
            //Create a new node with given data
            Node* newNode = new Node(data);
            //If the LinkedList is empty, make this node as head
            if(head == NULL)
            {
                head = newNode;
            }
            //Else, make this node as head and point its next to previous head
            else
            {
                newNode->next = head;
                head = newNode;
            }
        }
        //Function to insert a node at the end of the LinkedList
        void insertAtEnd(int data)
        {
            //Create a new node with given data
            Node* newNode = new Node(data);
            //If the LinkedList is empty, make this node as head
            if(head == NULL)
            {
                head = newNode;
            }
            //Else, traverse to the end of the LinkedList and insert the new node
            else
            {
                Node* current = head;
                while(current->next != NULL)
                {
                    current = current->next;
                }
                current->next = newNode;
            }
        }
        //Function to delete the first occurrence of a node with given data in the LinkedList
        void deleteNode(int data)
        {
            //If the LinkedList is empty, print error message
            if(head == NULL)
            {
                cout << "Error: LinkedList is empty";
            }
            else
            {
                Node* current = head;
                Node* previous = NULL;
                //Traverse through the LinkedList to find the node with given data
                while(current != NULL && current->data != data)
                {
                    previous = current;
                    current = current->next;
                }
                //If no node with given data is found, print error message
                if(current == NULL)
                {
                    cout << "Error: Node not found";
                }
                else
                {
                    //If the node to be deleted is the head, point head to its next
                    if(current == head)
                    {
                        head = current->next;
                    }
                    //Else, point the previous node's next to current node's next
                    else
                    {
                        previous->next = current->next;
                    }
                    //Free memory of current node
                    delete current;
                }
            }
        }
};

//Driver code to test function implementations
int main()
{
    //Create a new LinkedList object
    LinkedList list;
    //Insert nodes using insertAtBeginning and insertAtEnd function
    list.insertAtBeginning(5);
    list.insertAtBeginning(10);
    list.insertAtEnd(20);
    list.insertAtBeginning(15);
    list.insertAtEnd(25);
    //Delete a node with given data
    list.deleteNode(10);
    //Print the LinkedList
    Node* current = list.head;
    while(current != NULL)
    {
        cout << current->data << " ";
        current = current->next;
    }
    return 0;
}