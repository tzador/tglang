#include <iostream> //include the standard input/output library

using namespace std; //use the standard namespace for easier code writing

/**
 * This class represents a binary tree data structure.
 * It contains functions to insert, search, and print elements.
 */
class BinaryTree {
private: //private members cannot be accessed from outside the class
    struct Node { //a nested struct to represent each node in the tree
        int data; //data stored in the node
        Node *left; //pointer to the left child node
        Node *right; //pointer to the right child node

        /** 
         * Constructor to initialize node with given data and null pointers.
         * @param data The data to be stored in the node.
         */
        Node(int data) {
            this->data = data;
            left = right = NULL;
        }
    };
    Node *root; //pointer to the root node of the tree

    /**
     * Private function to recursively insert a new node into the tree.
     * @param root The root node of the subtree to insert into.
     * @param newData The data to be stored in the new node.
     * @return The modified root node.
     */
    Node* insertNode(Node *root, int newData) {
        if (root == NULL) { //if root is null, create a new node and set as root
            return new Node(newData);
        }
        if (newData < root->data) { //if new data is less than root data, go left
            root->left = insertNode(root->left, newData); //recursively call insertNode with left subtree
        }
        else if(newData > root->data) { //if new data is greater than root data, go right
            root->right = insertNode(root->right, newData); //recursively call insertNode with right subtree
        }
        return root; //return the modified root node
    }

public:
    /**
     * Constructor to initialize an empty binary tree.
     */
    BinaryTree() {
        root = NULL; //initialize root to null
    }

    /**
     * Public function to insert a new node into the tree.
     * @param newData The data to be stored in the new node.
     */
    void insert(int newData) {
        root = insertNode(root, newData); //call private insertNode function with root node
    }

    /**
     * Private function to recursively search for a node in the tree.
     * @param root The root node of the subtree to search in.
     * @param searchData The data to be searched for.
     * @return True if found, false if not found.
     */
    bool searchNode(Node *root, int searchData) {
        if (root == NULL) { //if root is null, return false (not found)
            return false;
        }
        if (root->data == searchData) { //if root data is equal to search data, return true (found)
            return true;
        }
        else if (searchData < root->data) { //if search data is less than root data, go left
            return searchNode(root->left, searchData); //recursively call searchNode with left subtree
        }
        else { //if search data is greater than root data, go right
            return searchNode(root->right, searchData); //recursively call searchNode with right subtree
        }
    }

    /**
     * Public function to search for a node in the tree.
     * @param searchData The data to be searched for.
     * @return True if found, false if not found.
     */
    bool search(int searchData) {
        return searchNode(root, searchData); //call private searchNode function with root node
    }

    /**
     * Private function to recursively print the nodes of the tree in order.
     * @param root The root node of the subtree to print.
     */
    void printInOrder(Node *root) {
        if (root != NULL) { //if root is not null, traverse left subtree, print root, then traverse right subtree
            printInOrder(root->left); //recursively call printInOrder with left subtree
            cout << root->data << " "; //print root data
            printInOrder(root->right); //recursively call printInOrder with right subtree
        }
    }

    /**
     * Public function to print the nodes of the tree in order.
     */
    void print() {
        printInOrder(root); //call private printInOrder function with root node
    }
};

int main() {
    BinaryTree tree; //create an empty binary tree

    //insert nodes with data 10, 7, 15, 12
    tree.insert(10);
    tree.insert(7);
    tree.insert(15);
    tree.insert(12);

    //search for data 12 (should return true)
    if (tree.search(12)) {
        cout << "Found!" << endl;
    }
    else {
        cout << "Not found..." << endl;
    }

    //search for data 20 (should return false)
    if (tree.search(20)) {
        cout << "Found!" << endl;
    }
    else {
        cout << "Not found..." << endl;
    }

    //print the tree in order (should print 7 10 12 15)
    tree.print();

    return 0;
}