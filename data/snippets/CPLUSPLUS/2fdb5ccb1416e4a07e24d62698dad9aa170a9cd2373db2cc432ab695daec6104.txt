// This is a function that takes in a string and returns a sorted version of the string using a bubble sort algorithm
// Time complexity: O(n^2)
// Space complexity: O(1)
// Inputs:
// - str: the unsorted string
// Output:
// - sortedStr: the sorted string
string bubbleSort(string str) {
    // Initialize a flag to track if a swap has occurred
    bool swapped;
    // Loop until no swaps occur
    do {
        // Set swapped to false at the beginning of each loop
        swapped = false;
        // Loop through the string, comparing adjacent characters and swapping them if necessary
        for (int i = 0; i < str.length() - 1; i++) {
            // If the current character is greater than the next character, swap them
            if (str[i] > str[i + 1]) {
                swap(str[i], str[i + 1]);
                // Set swapped to true to indicate a swap has occurred
                swapped = true;
            }
        }
    } while (swapped);
    // Return the sorted string
    return str;
}