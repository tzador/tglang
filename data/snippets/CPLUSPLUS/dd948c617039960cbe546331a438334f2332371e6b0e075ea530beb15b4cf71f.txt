#include <iostream> //this library allows input/output operations
#include <string> //this library allows manipulation of strings
#include <vector> //this library allows creation and manipulation of dynamic arrays

using namespace std; //using the standard namespace to avoid repetition of std::

/**
 * This class represents a person with their name, age, and occupation.
 */
class Person
{
private: //private access modifier for encapsulation
    string name; //private string variable for storing name
    int age; //private integer variable for storing age
    string occupation; //private string variable for storing occupation

public: //public access modifier for encapsulation
    /**
     * Constructor for Person class that takes in name, age, and occupation parameters.
     */
    Person(string name, int age, string occupation)
    {
        this->name = name; //assigning passed in name to private name variable
        this->age = age; //assigning passed in age to private age variable
        this->occupation = occupation; //assigning passed in occupation to private occupation variable
    }

    /**
     * Getter method for retrieving the name of the person.
     */
    string getName()
    {
        return this->name; //returning the private name variable
    }

    /**
     * Setter method for setting the age of the person.
     */
    void setAge(int age)
    {
        this->age = age; //assigning passed in age to private age variable
    }

    /**
     * Method for greeting the person.
     */
    void greet()
    {
        cout << "Hello! My name is " << this->name << " and I am a " << this->occupation << "." << endl; //outputting a greeting with the person's name and occupation
    }

    /**
     * Method for counting the number of vowels in the person's name.
     */
    int countVowels()
    {
        int vowels = 0; //variable for storing number of vowels, initialized to 0
        string vowelsList = "aeiouyAEIOUY"; //string containing all vowel characters
        for (int i = 0; i < this->name.length(); i++) //looping through each character in the name
        {
            if (vowelsList.find(this->name[i]) != string::npos) //checking if the current character is in the vowel string
            {
                vowels++; //if it is, increment the vowel count
            }
        }
        return vowels; //returning the total vowel count
    }
};

/**
 * Main function for executing the code.
 */
int main()
{
    vector<Person> people; //declaration of a vector containing Person objects
    people.push_back(Person("John Smith", 35, "Doctor")); //adding a new Person object to the vector
    people.push_back(Person("Jane Doe", 28, "Teacher")); //adding another Person object to the vector

    for (int i = 0; i < people.size(); i++) //looping through each Person object in the vector
    {
        people[i].greet(); //calling the greet method on each Person object
        cout << "Number of vowels in name: " << people[i].countVowels() << endl; //outputting the vowel count of each person's name
    }

    return 0; //ending the program
}