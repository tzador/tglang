#include <iostream> // include the standard input/output stream
#include <vector> // include the vector library

using namespace std;

// define a template class named LinkedList
template <class T> 
class LinkedList {
  private:
    // define a struct for a linked list node
    struct Node {
        T data; // data stored in the node
        Node* next; // pointer to the next node
    };
    Node* head; // pointer to the head node of the linked list
    int size; // variable to keep track of the number of nodes

  public:
    // constructor for the LinkedList class
    LinkedList<T>() {
      head = nullptr; // initialize the head pointer to nullptr
      size = 0; // set the size to 0 initially
    }
    // destructor for the LinkedList class
    ~LinkedList<T>() {
      Node* current = head; // create a pointer to traverse the list
      while (current != nullptr) { // traverse until the current pointer is not null
        Node* next = current->next; // store the pointer to the next node
        delete current; // delete the current node
        current = next; // move to the next node
      }
      head = nullptr; // assign the head pointer to nullptr
    }
    // function to add a new node to the front of the linked list
    void addFront(T value) {
      Node* newNode = new Node; // create a new node
      newNode->data = value; // assign the value to the new node
      newNode->next = head; // point the new node's next to the current head
      head = newNode; // assign the new node as the head
      size++; // increment the size
    }
    // function to add a new node to the back of the linked list
    void addBack(T value) {
      Node* newNode = new Node; // create a new node
      newNode->data = value; // assign the value to the new node
      newNode->next = nullptr; // set the next pointer to nullptr
      if (head == nullptr) { // check if the list is empty
        head = newNode; // assign the new node as the head
      } else { // otherwise, traverse to the end of the list
        Node* current = head; // create a pointer to traverse the list
        while (current->next != nullptr) { // traverse until the current pointer points to the last node
          current = current->next; // move to the next node
        }
        current->next = newNode; // assign the new node as the next node of the current pointer
      }
      size++; // increment the size
    }
    // function to remove the first node in the linked list
    void removeFront() {
      if (head == nullptr) { // check if the list is empty
        return; // if yes, return
      }
      Node* temp = head; // create a temporary pointer to the head node
      head = head->next; // move the head pointer to the next node
      delete temp; // delete the previous head node
      size--; // decrement the size
    }
    // function to remove the last node in the linked list
    void removeBack() {
      if (head == nullptr) { // check if the list is empty
        return; // if yes, return
      } else if (head->next == nullptr) { // check if there is only one node in the list
        delete head; // delete the head node
        head = nullptr; // assign the head pointer to nullptr
        size = 0; // set the size to 0
        return; // return
      }
      Node* current = head; // create a pointer to traverse the list
      Node* previous = nullptr; // create a pointer to keep track of the previous node
      while (current->next != nullptr) { // traverse until the current pointer points to the last node
        previous = current; // update the previous pointer
        current = current->next; // move to the next node
      }
      delete current; // delete the last node
      previous->next = nullptr; // set the previous node's next pointer to nullptr
      size--; // decrement the size
    }
    // function to print the linked list
    void printList() {
      Node* current = head; // create a pointer to traverse the list
      while (current != nullptr) { // traverse until the current pointer is not null
        cout << current->data << " "; // print the data
        current = current->next; // move to the next node
      }
      cout << endl; // print a newline after printing the list
    }
    // function to get the size of the linked list
    int getSize() {
      return size; // return the size
    }
    // function to check if the linked list contains a given value
    bool contains(T value) {
      Node* current = head; // create a pointer to traverse the list
      while (current != nullptr) { // traverse until the current pointer is not null
        if (current->data == value) { // check if the current node's value is equal to the given value
          return true; // if yes, return true
        }
        current = current->next; // move to the next node
      }
      return false; // if the value is not found, return false
    }
};

int main() {
  // create a new instance of the LinkedList class with integers as the data type
  LinkedList<int> myLinkedList;
  // add some nodes to the linked list
  myLinkedList.addFront(5);
  myLinkedList.addBack(10);
  myLinkedList.addBack(15);
  myLinkedList.addFront(3);
  // print the linked list
  myLinkedList.printList();
  // check if the linked list contains the value 10
  bool contains10 = myLinkedList.contains(10);
  if (contains10) { // if the value is found
    cout << "The linked list contains the value 10." << endl;
  }
  // remove the first node in the linked list
  myLinkedList.removeFront();
  // remove the last node in the linked list
  myLinkedList.removeBack();
  // check the size of the linked list
  int listSize = myLinkedList.getSize();
  cout << "The size of the linked list is: " << listSize << endl;

  return 0;
}