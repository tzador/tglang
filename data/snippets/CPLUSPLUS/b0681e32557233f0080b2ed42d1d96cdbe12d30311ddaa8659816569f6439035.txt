// This is a complex and advanced code snippet in C++ language
// It uses classes, inheritance, and overloading

// Base class Shape
#include <iostream>
using namespace std;

class Shape {
   protected:
      double width;
      double length;
      
   public:

      // Constructor
      Shape(double w, double l) {
         width = w;
         length = l;
      }
      
      // Function to calculate area of shape
      virtual double area() = 0;
      
      // Function to calculate perimeter of shape
      virtual double perimeter() = 0;
      
      // Function to display shape information
      void display() {
         cout << "Width: " << width << "\n";
         cout << "Length: " << length << "\n";
         cout << "Area: " << this->area() << "\n";
         cout << "Perimeter: " << this->perimeter() << "\n";
      }
};

// Derived class Triangle
class Triangle : public Shape {
   protected:
      double height;
      
   public:

      // Constructor
      Triangle(double w, double l, double h) : Shape(w, l) {
         height = h;
      }
      
      // Function to calculate area of triangle
      double area() {
         return 0.5 * width * height;
      }
      
      // Function to calculate perimeter of triangle
      double perimeter() {
         return width + length + sqrt(pow(width, 2) + pow(height, 2));
      }
};

// Derived class Rectangle
class Rectangle : public Shape {
   public:

      // Constructor
      Rectangle(double w, double l) : Shape(w, l) {}
      
      // Function to calculate area of rectangle
      double area() {
         return width * length;
      }
      
      // Function to calculate perimeter of rectangle
      double perimeter() {
         return 2 * (width + length);
      }
};

// Main function to test different shapes
int main() {
   // Create a triangle object
   Triangle tri(5, 4, 3);
   cout << "Triangle: \n";
   tri.display();
   
   // Create a rectangle object
   Rectangle rect(6, 8);
   cout << "\nRectangle: \n";
   rect.display();
   
   return 0;
}