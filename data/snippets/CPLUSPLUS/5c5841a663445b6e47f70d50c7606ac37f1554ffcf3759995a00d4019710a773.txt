// create a class definition for "Circle" with private member variables "radius" and "center"
class Circle {
    private:
        double radius;
        double center[2];
    
    public:
    // create a constructor for the class that sets radius and center values
        Circle(double r, double c[2]) {
            radius = r;
            center[0] = c[0];
            center[1] = c[1];
        }
    
    // create a function to calculate the area of the circle
        double calculate_area() {
            return 3.14 * radius * radius;
        }
    
    // create getter and setter functions for radius and center
        double get_radius() {
            return radius;
        }
    
        void set_radius(double r) {
            radius = r;
        }
    
        double* get_center() {
            return center;
        }
    
        void set_center(double c[2]) {
            center[0] = c[0];
            center[1] = c[1];
        }
    
    // create a function to check if two circles intersect
        bool intersect(Circle circle) {
            double distance = sqrt(pow(center[0]-circle.get_center()[0], 2) + pow(center[1]-circle.get_center()[1], 2));
            // if distance between the centers is less than the sum of the radii, the circles intersect
            if (distance < radius + circle.get_radius()){
                // return true if intersecting
                return true;
            }
            // return false if not intersecting
            return false;
        }
};

// create an instance of the class Circle
Circle myCircle(2.5, {0.0, 0.0});

// call the calculate_area function on the Circle instance and store the result
double area = myCircle.calculate_area();

// print the area to the console
cout << "The area of the circle is: " << area << endl;

// change the radius of the Circle instance using the setter function
myCircle.set_radius(5.0);

// create a second Circle instance
Circle secondCircle(3.0, {2.0, 4.0});

// check if the two circles intersect using the intersect function
if (myCircle.intersect(secondCircle)) {
    // if they intersect, print a message to the console
    cout << "The two circles intersect!" << endl;
} else {
    // if they don't intersect, print a different message
    cout << "The circles do not intersect." << endl;
}