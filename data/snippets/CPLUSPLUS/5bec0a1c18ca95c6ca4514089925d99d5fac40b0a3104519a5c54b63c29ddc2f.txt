/**
 * @class MyVector
 * A custom vector class that uses templates for flexible data types
 */
template<typename T>
class MyVector {
private:
    T *data; // pointer to array holding data
    int size; // current size of vector
    int capacity; // maximum size of vector

public:
    /**
     * @function MyVector
     * @param sizeInitial initial size of vector
     */
    MyVector(int sizeInitial = 10) {
        capacity = sizeInitial;
        size = 0;
        data = new T[capacity];
    }

    /**
     * @function pushBack
     * @param newValue value to insert at end of vector
     * @return true if successful, false if vector is full
     */
    bool pushBack(T newValue) {
        // if vector is at maximum capacity, resize it
        if (size == capacity) {
            int newCapacity = capacity + (capacity / 2);
            resize(newCapacity);
        }

        // add new value to end of vector and update size
        data[size] = newValue;
        size++;

        return true;
    }

    /**
     * @function resize
     * @param newCapacity new capacity for vector
     */
    void resize(int newCapacity) {
        // create new array with given capacity
        T *newData = new T[newCapacity];

        // copy elements from old array to new array
        for (int i = 0; i < size; i++) {
            newData[i] = data[i];
        }

        // delete old array and assign new array to data pointer
        delete [] data;
        data = newData;

        // update capacity
        capacity = newCapacity;
    }

    /**
     * @function operator[]
     * @param index index of element to return
     * @return reference to element at given index
     */
    T& operator[](int index) {
        return data[index];
    }
};

// sample usage

// create vector of integers with initial size of 5
MyVector<int> myIntVector(5);

// add values to vector
myIntVector.pushBack(5);
myIntVector.pushBack(10);
myIntVector.pushBack(15);
myIntVector.pushBack(20);

// print values
std::cout << myIntVector[0] << std::endl;
std::cout << myIntVector[1] << std::endl;
std::cout << myIntVector[2] << std::endl;
std::cout << myIntVector[3] << std::endl;