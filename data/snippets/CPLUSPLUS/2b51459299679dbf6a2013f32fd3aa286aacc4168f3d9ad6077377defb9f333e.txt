// Create a class for a binary search tree
// that supports insertion, deletion, and searching

// Create a node class for the tree
class Node {
private:
    int value; // the value held by the node
    Node *left; // pointer to the left child node
    Node *right; // pointer to the right child node
    Node *parent; // pointer to the parent node

public:
    // Constructor to initialize the value of the node
    Node(int v) {
        value = v;
        left = NULL;
        right = NULL;
        parent = NULL;
    }
};

// Create the BinarySearchTree class
class BinarySearchTree {
private:
    Node *root; // pointer to the root node

    // Helper function for insertion
    // Takes in the root node and the value to be inserted
    // Returns the updated root node
    Node* insertHelper(Node *node, int value) {
        // Base case: if the tree is empty, create a new node as the root
        if (node == NULL) {
            return new Node(value);
        }
        // Otherwise, recursively insert the value in the appropriate position
        else {
            if (value < node->value) { // if value is smaller, insert in the left subtree
                node->left = insertHelper(node->left, value); // update the left child
                node->left->parent = node; // update the parent of the left child
            }
            else { // if value is larger or equal, insert in the right subtree
                node->right = insertHelper(node->right, value); // update the right child
                node->right->parent = node; // update the parent of the right child
            }
        }
        return node; // return the updated root node
    }

    // Helper function for deletion
    // Takes in the root node and the value to be deleted
    // Returns the updated root node
    Node* deleteHelper(Node *node, int value) {
        // Base case: if the node is not found, return NULL
        if (node == NULL) {
            return NULL;
        }
        // If value is smaller than the current node's value,
        // recursively search in the left subtree
        if (value < node->value) {
            node->left = deleteHelper(node->left, value); // update the left child
        }
        // If value is larger than the current node's value,
        // recursively search in the right subtree
        else if (value > node->value) {
            node->right = deleteHelper(node->right, value); // update the right child
        }
        // If value is found, perform deletion
        else {
            // Case 1: node has no children
            if (node->left == NULL && node->right == NULL) {
                delete node; // free the memory
                node = NULL; // update the node to NULL
                return node; // return NULL
            }
            // Case 2: node has only one child (left)
            else if (node->right == NULL) {
                Node *temp = node->left; // store the child node
                node->left = NULL; // update the left child
                delete node; // free the memory
                return temp; // return the child node
            }
            // Case 3: node has only one child (right)
            else if (node->left == NULL) {
                Node *temp = node->right; // store the child node
                node->right = NULL; // update the right child
                delete node; // free the memory
                return temp; // return the child node
            }
            // Case 4: node has two children
            else {
                // Find the minimum value in the right subtree
                // (or the maximum value in the left subtree)
                // and replace the node's value with it
                Node *temp = findMinimum(node->right); // find the successor
                node->value = temp->value; // update the node's value
                node->right = deleteHelper(node->right, temp->value); // delete the successor
            }
        }
        return node; // return the updated root node
    }

    // Helper function for searching
    // Takes in the root node and the value to be searched
    // Returns a pointer to the node if found, otherwise NULL
    Node* searchHelper(Node *node, int value) {
        // Base case: if the tree is empty or the value is not found, return NULL
        if (node == NULL || node->value == value) {
            return node;
        }
        // If value is smaller than the current node's value,
        // recursively search in the left subtree
        if (value < node->value) {
            return searchHelper(node->left, value); // return the result of the recursive call on the left subtree
        }
        // Otherwise, recursively search in the right subtree
        else {
            return searchHelper(node->right, value); // return the result of the recursive call on the right subtree
        }
    }

    // Helper function to find the minimum value in a subtree
    // Takes in the root node of the subtree
    // Returns a pointer to the minimum node
    Node* findMinimum(Node *node) {
        // If the left child of the node is NULL,
        // then the node itself is the minimum
        if (node->left == NULL) {
            return node; // return the node
        }
        // Otherwise, recursively search for the minimum in the left subtree
        else {
            return findMinimum(node->left); // return the result of the recursive call on the left subtree
        }
    }

public:
    // Constructor to initialize an empty tree
    BinarySearchTree() {
        root = NULL;
    }

    // Function to insert a value in the tree
    void insert(int value) {
        root = insertHelper(root, value); // call the helper function on the root node
    }

    // Function to delete a value from the tree
    void deleteValue(int value) {
        root = deleteHelper(root, value); // call the helper function on the root node
    }

    // Function to search for a value in the tree
    // Returns true if value is found, false otherwise
    bool search(int value) {
        Node *result = searchHelper(root, value); // call the helper function on the root node
        return result != NULL; // return true if the result is not NULL (value found), false otherwise
    }
};

// Driver code
int main() {
    // Create a binary search tree object
    BinarySearchTree bst;

    // Insert some values
    bst.insert(5);
    bst.insert(10);
    bst.insert(3);
    bst.insert(7);
    bst.insert(12);

    // Search for a value
    int value = 12;
    if (bst.search(value)) {
        std::cout << "Value " << value << " found in the tree" << std::endl;
    }
    else {
        std::cout << "Value " << value << " not found in the tree" << std::endl;
    }

    // Delete a value
    bst.deleteValue(7);

    // Search for the deleted value
    if (bst.search(7)) {
        std::cout << "Value " << value << " found in the tree" << std::endl;
    }
    else {
        std::cout << "Value " << value << " not found in the tree" << std::endl;
    }

    // Output:
    // Value 12 found in the tree
    // Value 7 not found in the tree

    return 0;
}