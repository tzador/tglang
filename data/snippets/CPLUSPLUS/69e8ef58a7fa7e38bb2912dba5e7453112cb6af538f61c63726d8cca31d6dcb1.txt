// This code snippet demonstrates the use of templates in C++.
// It defines a templated class called 'MyClass' that takes in any data type as a template argument.

#include <iostream>

using namespace std;

// Definition of the templated class 'MyClass'.
template <typename T>
class MyClass {
private:
    T data; // A variable of generic data type 'T'.

public:
    // Constructor that takes in a value of type 'T' as an argument.
    MyClass(T value) {
        data = value;
    }

    // Getter function to return the value of 'data'.
    T getData() {
        return data;
    }
};

int main() {
    // Creating an object of type 'MyClass' with integer as the template argument.
    MyClass<int> myInteger(5); 
    
    // Printing the value of the integer stored in the object.
    cout << myInteger.getData() << endl;
    
    // Creating an object of type 'MyClass' with string as the template argument.
    MyClass<string> myString("Hello"); 
    
    // Printing the value of the string stored in the object.
    cout << myString.getData() << endl;

    return 0;
}