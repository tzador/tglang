#include <iostream> //include input/output library
#include <vector> //include vector library
#include <algorithm> //include algorithm library

using namespace std; //use standard namespace

//function to perform quicksort algorithm on a vector of integers
void quickSort(vector<int>& arr, int low, int high){ //function header
    int i = low; //initialize left pointer
    int j = high; //initialize right pointer
    int pivot = arr[(low + high)/2]; //set pivot to middle element

    //partitioning step
    while(i <= j){ //loop until left and right pointers meet
        while(arr[i] < pivot) //find element on left that is >= to pivot
            i++; 
        while(arr[j] > pivot) //find element on right that is <= to pivot
            j--;
        if (i <= j){ //swap elements if left pointer <= right pointer
            swap(arr[i], arr[j]); 
            i++; //move left pointer to next element
            j--; //move right pointer to previous element
        }
    }

    //recursive step
    if (low < j) //if there are still elements to the left of the pivot
        quickSort(arr, low, j); //recursively call quicksort on left subarray
    if (i < high) //if there are still elements to the right of the pivot
        quickSort(arr, i, high); //recursively call quicksort on right subarray 
}

int main(){ //main function
    vector<int> numbers = {7, 2, 1, 6, 8, 5, 3}; //initialize vector with unsorted integers

    quickSort(numbers, 0, numbers.size() - 1); //call quicksort function on vector

    for(auto num : numbers){ //loop through sorted vector and print elements
        cout << num << " "; //output elements separated by a space
    }

    return 0; //return 0 to indicate success
}