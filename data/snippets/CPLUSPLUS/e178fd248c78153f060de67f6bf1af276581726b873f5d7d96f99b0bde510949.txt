//This code snippet is a function that implements a recursive merge sort algorithm
//It takes in an array of integers, starting and ending indices as parameters
//and sorts the array in ascending order

void merge(int arr[], int l, int m, int r) 
{ 
    //create temporary arrays to store the left and right subarrays
    int leftArr[m - l + 1]; 
    int rightArr[r - m]; 
  
    //copy data from main array to temporary arrays
    for (int i = 0; i < m - l + 1; i++) 
        leftArr[i] = arr[l + i]; 
    for (int j = 0; j < r - m; j++) 
        rightArr[j] = arr[m + 1 + j]; 
  
    //merge the two subarrays in sorted order
    int i = 0, j = 0; //indices of temporary arrays
    int k = l; //index of main array
  
    while (i < m - l + 1 && j < r - m) { 
        if (leftArr[i] <= rightArr[j]) { 
            arr[k] = leftArr[i]; 
            i++; 
        } 
        else { 
            arr[k] = rightArr[j]; 
            j++; 
        } 
        k++; 
    } 
  
    //copy remaining elements of left array, if any
    while (i < m - l + 1) { 
        arr[k] = leftArr[i]; 
        i++; 
        k++; 
    } 
  
    //copy remaining elements of right array, if any
    while (j < r - m) { 
        arr[k] = rightArr[j]; 
        j++; 
        k++; 
    } 
} 
  
//function to implement merge sort
void mergeSort(int arr[], int l, int r) 
{ 
    
    if (l < r) { 
        //find midpoint of array
        int m = l + (r - l) / 2; 
  
        //sort left and right subarrays
        mergeSort(arr, l, m); 
        mergeSort(arr, m + 1, r); 
  
        //merge the two sorted subarrays 
        merge(arr, l, m, r); 
    } 
}