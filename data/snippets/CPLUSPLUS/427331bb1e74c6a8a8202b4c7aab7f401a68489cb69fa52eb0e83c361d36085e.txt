// This code snippet performs a quicksort algorithm
/*
 * @param arr the input array to be sorted
 * @param low the starting index for the sorting process
 * @param high the ending index for the sorting process
 */
void quicksort(int arr[], int low, int high){

    // Checks if the array is empty or only has one element
    if (low < high){

        // Picks a pivot element, in this case the middle element
        int pivot = arr[(low+high)/2];

        // Initializes two iterators, one starting from the beginning of the array
        // and one from the end of the array
        int i = low;
        int j = high;

        // Loop through the array until the iterators cross each other
        while (i <= j){

            // Finds the first element from the left side that is bigger than
            // the pivot element
            while (arr[i] < pivot){
                i++;
            }

            // Finds the first element from the right side that is smaller than
            // the pivot element
            while (arr[j] > pivot){
                j--;
            }

            // If the iterators have not crossed each other, swap the two elements
            // to sort them based on their relationship to the pivot element
            if (i <= j){
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j--;
            }
        }

        // Recursively call the quicksort function for the subarrays before and after
        // the pivot element
        quicksort(arr, low, j);
        quicksort(arr, i, high);
    }
}