/**
 * This is a class for a binary search tree
 * It contains functions for insert, search, and delete
 */
class BinarySearchTree {
private:
    // Node structure for the tree
    struct Node {
        int data;
        Node* left;
        Node* right;
        Node(int val) : data(val), left(nullptr), right(nullptr) {}
    };
    // Root node of the tree
    Node* root;

public:
    // Constructor
    BinarySearchTree() {
        root = nullptr;
    }

    // Insert function to add a new node to the tree
    void insert(int val) {
        // Create a new node with the given value
        Node* new_node = new Node(val);
        // If tree is empty, set the new node as root
        if (root == nullptr)
            root = new_node;
        else {
            // Start at the root of the tree
            Node* current = root;
            // Loop until we find the correct position for the new node
            while (true) {
                // If given value is less than current value, go to the left child
                if (val < current->data) {
                    // If left child is empty, insert new node here
                    if (current->left == nullptr) {
                        current->left = new_node;
                        break;
                    }
                    // Otherwise, continue to the left child
                    else {
                        current = current->left;
                    }
                }
                // If given value is greater than current value, go to the right child
                else if (val > current->data) {
                    // If right child is empty, insert new node here
                    if (current->right == nullptr) {
                        current->right = new_node;
                        break;
                    }
                    // Otherwise, continue to the right child
                    else {
                        current = current->right;
                    }
                }
                // If given value is equal to current value, do not insert
                else {
                    break;
                }
            }
        }
    }

    // Search function to find a node with the given value
    Node* search(int val) {
        // Start at the root of the tree
        Node* current = root;
        // Loop until we find the node or reach a leaf node
        while (current != nullptr && current->data != val) {
            // If given value is less than current value, go to the left child
            if (val < current->data) {
                current = current->left;
            }
            // If given value is greater than current value, go to the right child
            else {
                current = current->right;
            }
        }
        // If current is nullptr, value was not found in the tree
        return current;
    }

    // Helper function to find the minimum value node in a subtree
    Node* findMinNode(Node* node) {
        // Keep going left until we reach a leaf node
        while (node->left != nullptr)
            node = node->left;
        // Return the last found node
        return node;
    }

    // Delete function to remove a node with the given value from the tree
    void remove(int val) {
        // Start at the root of the tree
        Node* current = root;
        // Keep track of the parent node
        Node* parent = nullptr;
        // Loop until we find the node or reach a leaf node
        while (current != nullptr && current->data != val) {
            // If given value is less than current value, go to the left child
            if (val < current->data) {
                parent = current;
                current = current->left;
            }
            // If given value is greater than current value, go to the right child
            else {
                parent = current;
                current = current->right;
            }
        }
        // If current is nullptr, value was not found in the tree
        if (current == nullptr)
            return;
        // If node has no children, just delete it
        if (current->left == nullptr && current->right == nullptr) {
            // If current is root, set root to nullptr
            if (current == root)
                root = nullptr;
            // If current is the left child of parent, set parent's left child to nullptr
            else if (current == parent->left)
                parent->left = nullptr;
            // If current is the right child of parent, set parent's right child to nullptr
            else
                parent->right = nullptr;
            // Delete current node
            delete current;
        }
        // If node has one child, replace it with the child
        else if (current->left == nullptr) {
            // If current is root, set root to its only child
            if (current == root)
                root = current->right;
            // If current is the left child of parent, set parent's left child to current's right child
            else if (current == parent->left)
                parent->left = current->right;
            // If current is the right child of parent, set parent's right child to current's right child
            else
                parent->right = current->right;
            // Delete current node
            delete current;
        }
        else if (current->right == nullptr) {
            // If current is root, set root to its only child
            if (current == root)
                root = current->left;
            // If current is the left child of parent, set parent's left child to current's left child
            else if (current == parent->left)
                parent->left = current->left;
            // If current is the right child of parent, set parent's right child to current's left child
            else
                parent->right = current->left;
            // Delete current node
            delete current;
        }
        // If node has two children, replace it with the minimum value node in the right subtree
        // We can use either the minimum value node of the right subtree or the maximum value node of the left subtree
        // Both will maintain the binary search tree property
        else {
            // Find the minimum value node in the right subtree
            Node* minNode = findMinNode(current->right);
            // Set current node's data to the minimum value
            current->data = minNode->data;
            // Delete the minimum value node from the right subtree
            remove(minNode->data);
        }
    }
};