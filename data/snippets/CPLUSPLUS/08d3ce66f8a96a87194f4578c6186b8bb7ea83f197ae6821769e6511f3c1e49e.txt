#include <iostream>

using namespace std;

// Function to merge two sorted subarrays
void merge(int arr[], int l, int m, int r){

    // Initialize variables for subarray sizes
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temp arrays for left and right subarrays
    int L[n1], R[n2];

    // Copy data from original array to temp arrays
    for(int i = 0; i < n1; i++){
        L[i] = arr[l + i];
    }
    for(int j = 0; j < n2; j++){
        R[j] = arr[m + 1 + j];
    }

    // Initial index values for merging
    int i = 0; // Initial index of left subarray
    int j = 0; // Initial index of right subarray
    int k = l; // Initial index of merged subarray

    // Merge the temp arrays back into the original array
    while(i < n1 && j < n2){

        // Compare the elements of the temp arrays and store the smallest value in the original array
        if(L[i] <= R[j]){
            arr[k] = L[i];
            i++;
        }
        else{
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L if there are any
    while(i < n1){
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R if there are any
    while(j < n2){
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Merge sort function
void mergeSort(int arr[], int l, int r){

    // Check for base case
    if(r > l){

        // Find the middle point
        int m = l + (r - l)/2;

        // Recursively split the array into two subarrays
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);

        // Merge the sorted subarrays
        merge(arr, l, m, r);
    }
}

// Driver Code
int main(){
    // Declare and initialize array
    int arr[] = {5, 2, 8, 1, 9, 3, 7, 6, 4};

    // Calculate the size of the array
    int n = sizeof(arr)/sizeof(arr[0]);

    // Call merge sort function
    mergeSort(arr, 0, n-1);

    // Print the sorted array
    cout << "Array after sorting:" << endl;
    for(int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }

    return 0;
}