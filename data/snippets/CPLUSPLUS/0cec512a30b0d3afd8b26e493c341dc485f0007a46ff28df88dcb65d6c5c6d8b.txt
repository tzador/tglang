/*
This code snippet is an example of a binary search algorithm implemented in C++.
It takes in an array of integers and a target value, and returns the index of the target value
in the array if it exists, or -1 if it does not.
*/

// Function for binary search
int binarySearch(int arr[], int target, int low, int high){

    // Check for base case
    if (low > high){
        return -1;
    }

    // Find the middle index
    int mid = low + (high-low)/2;

    // Check if target value is at middle index
    if (arr[mid] == target){
        return mid;
    }

    // If target is less than middle element, search left half of array
    if (target < arr[mid]){
        return binarySearch(arr, target, low, mid-1);
    } 
    // If target is greater than middle element, search right half of array
    else{
        return binarySearch(arr, target, mid+1, high);
    }
}

// Driver code to test the binary search algorithm
int main(){
    // Initialize an array of integers
    int array[] = {1, 3, 5, 7, 9, 11};

    // Target value to search for
    int target = 5;

    // Calculate the size of the array
    int size = sizeof(array) / sizeof(array[0]);

    // Call the binary search function and store the returned index
    int result = binarySearch(array, target, 0, size-1);

    // Print the result
    cout << "Target value " << target << " is located at index " << result << endl;
    
    // Output: Target value 5 is located at index 2
}