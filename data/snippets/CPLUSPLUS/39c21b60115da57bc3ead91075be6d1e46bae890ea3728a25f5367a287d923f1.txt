#include <iostream> // include header file for standard input/output library
using namespace std; // use standard namespace

// define a class called Matrix with private data members and public member functions
class Matrix {
    private:
        int rows; // number of rows in the matrix
        int columns; // number of columns in the matrix
        int** data; // pointer to store 2D array data in heap memory
    public:
        // constructor to initialize matrix with given number of rows and columns
        Matrix(int r, int c) {
            rows = r;
            columns = c;
            // allocate memory for the 2D array data
            data = new int*[rows];
            for (int i = 0; i < rows; i++) {
                data[i] = new int[columns];
            }
        }

        // destructor to free memory allocated for 2D array data
        ~Matrix() {
            // loop through rows and delete allocated memory for each row
            for (int i = 0; i < rows; i++) {
                delete[] data[i];
            }
            // delete allocated memory for the pointer to the 2D array
            delete[] data;
        }

        // function to fill the matrix with user input values
        void fillMatrix() {
            // loop through rows and columns to get user input for each element
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    // use 'cout' to prompt user for input and 'cin' to get input
                    cout << "Enter value for element at row " << i << " and column " << j << ": ";
                    cin >> data[i][j];
                }
            }
        }

        // function to print the matrix
        void printMatrix() {
            // loop through rows and columns and print each element
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    cout << data[i][j] << " ";
                }
                cout << endl; // add a new line after each row has been printed
            }
        }

        // function to multiply this matrix with another matrix and return the result
        Matrix multiply(Matrix& m) {
            // create result matrix with dimensions of this and other matrix
            Matrix result(rows, m.columns);
            // loop through rows and columns to calculate each element of the result matrix
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < m.columns; j++) {
                    for (int k = 0; k < columns; k++) {
                        // use 'result.data[i][j]' to access and update the current result element
                        result.data[i][j] += (data[i][k] * m.data[k][j]);
                    }
                }
            }
            // return the result matrix
            return result;
        }
};

// main function to run the program
int main() {
    // create two matrices with specified dimensions
    Matrix m1(3, 3);
    Matrix m2(3, 2);
    // fill both matrices with user input values
    cout << "Enter values for the first matrix: " << endl;
    m1.fillMatrix();
    cout << "Enter values for the second matrix: " << endl;
    m2.fillMatrix();
    // print the matrices before multiplying them
    cout << "First Matrix: " << endl;
    m1.printMatrix();
    cout << "Second Matrix: " << endl;
    m2.printMatrix();
    // multiply the two matrices and print the result
    cout << "Result of matrix multiplication: " << endl;
    Matrix result = m1.multiply(m2);
    result.printMatrix();
    // exit the program with success
    return 0;
}