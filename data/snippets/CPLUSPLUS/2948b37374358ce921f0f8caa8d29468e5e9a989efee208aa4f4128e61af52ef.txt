/**
 * This code snippet is a function that implements the 
 * quicksort sorting algorithm in C++
 * 
 * @param arr the array to be sorted
 * @param low the lowest index of the array
 * @param high the highest index of the array
 */
void quicksort(int arr[], int low, int high) {
    // Base case: array is empty or has only one element
    if (low >= high) {
        return;
    }
    // Select a pivot element, in this implementation, we choose the last element
    int pivot = arr[high];
    // Initialize variables for left and right pointers
    int left = low;
    int right = high - 1;
    // Loop until left and right pointers meet
    while (left <= right) {
        // Move left pointer until an element greater than pivot is found
        while (left <= right && arr[left] <= pivot) {
            left++;
        }
        // Move right pointer until an element less than pivot is found
        while (left <= right && arr[right] > pivot) {
            right--;
        }
        // If left and right pointers have not crossed
        if (left < right) {
            // Swap the elements at left and right pointers
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;
        }
    }
    // Swap the pivot element with the element at the current position of left pointer
    int temp = arr[left];
    arr[left] = pivot;
    arr[high] = temp;
    // Recursively call quicksort on the left and right subarrays
    quicksort(arr, low, left - 1);
    quicksort(arr, left + 1, high);
}
// Example usage:
// int arr[] = {5, 3, 7, 2, 1};
// quicksort(arr, 0, 4);
// The array would be sorted to {1, 2, 3, 5, 7} after the function call