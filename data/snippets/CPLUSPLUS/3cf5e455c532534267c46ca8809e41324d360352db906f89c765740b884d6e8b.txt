#include <iostream>

using namespace std;

// Defining a base class named Animal
class Animal {
private:
    string name;
    int age;
public:
    // Constructor with parameters
    Animal(string n, int a) {
        name = n;
        age = a;
    }

    // Method to get name
    string get_name() {
        return name;
    }

    // Method to get age
    int get_age() {
        return age;
    }

    // Virtual method for making sound
    virtual void make_sound() = 0;
};

// Derived class Cat from base class Animal
class Cat: public Animal {
public:
    // Constructor for Cat, calling base class constructor
    Cat(string n, int a): Animal(n, a) {}

    // Implementation of virtual method
    void make_sound() {
        cout << "Meow!" << endl;
    }
};

// Derived class Dog from base class Animal
class Dog: public Animal {
public:
    // Constructor for Dog, calling base class constructor
    Dog(string n, int a): Animal(n, a) {}

    // Implementation of virtual method
    void make_sound() {
        cout << "Woof!" << endl;
    }
};

int main() {
    // Creating a Cat and a Dog object
    Cat myCat("Fluffy", 5);
    Dog myDog("Buddy", 3);

    // Calling methods on the objects
    myCat.make_sound(); // Output: Meow!
    cout << myCat.get_name() << " is " << myCat.get_age() << " years old." << endl; // Output: Fluffy is 5 years old.
    myDog.make_sound(); // Output: Woof!
    cout << myDog.get_name() << " is " << myDog.get_age() << " years old." << endl; // Output: Buddy is 3 years old.

    return 0;
}