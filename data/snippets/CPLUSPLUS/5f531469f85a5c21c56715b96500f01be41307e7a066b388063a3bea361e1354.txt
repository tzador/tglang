// This snippet implements a recursive binary search function.
// The function takes in a sorted array and the element to be searched for.

// Recursive binary search function
int binarySearch(int arr[], int low, int high, int x) {
    // Base case: if the element is not present in the array
    if (low > high)
        return -1;
    
    // Calculate the mid index
    int mid = (low + high) / 2;
    
    // If the element is present at the mid index
    if (arr[mid] == x)
        return mid;
    // If the element is smaller than the mid element, search in the left subarray
    else if (arr[mid] > x)
        return binarySearch(arr, low, mid - 1, x);
    // If the element is larger than the mid element, search in the right subarray
    else
        return binarySearch(arr, mid + 1, high, x);
}

// Sample usage
int main() {
    // Initialize array
    int arr[] = {2, 4, 6, 8 ,10};
    // Element to search for
    int x = 8;
    // Calculate array size
    int n = sizeof(arr) / sizeof(arr[0]);
    
    // Call the binarySearch function and store the result in index
    int index = binarySearch(arr, 0, n - 1, x);
    // Print the result
    cout << "Element " << x << " is found at index: " << index << endl;
    
    return 0;
}