// Defining a class that implements a binary search tree
class BinarySearchTree {
    private:
        // Struct to represent a node in the tree
        struct Node {
            int data; // data stored in the node
            Node* left; // pointer to left child node
            Node* right; // pointer to right child node

            // Constructor with data parameter
            Node(int value) {
                data = value;
                left = nullptr;
                right = nullptr;
            }
        };

        Node* root; // pointer to the root node of the tree

    public:
        // Constructor to initialize the tree with a single root node
        BinarySearchTree(int value) {
            root = new Node(value);
        }

        // Function to insert a value into the tree
        void insert(int value) {
            // Create a new node with the value
            Node* newNode = new Node(value);
            // Start at the root of the tree
            Node* current = root;
            // Boolean variable to keep track of whether the value has been inserted or not
            bool inserted = false;
            // Loop until the value is inserted
            while (!inserted) {
                // If the value is less than the current node's value, insert it in the left subtree
                if (value < current->data) {
                    // If the left child node is empty, insert the value there
                    if (current->left == nullptr) {
                        current->left = newNode;
                        inserted = true;
                    }
                    // Otherwise, continue to the left child node
                    else {
                        current = current->left;
                    }
                }
                // If the value is greater than the current node's value, insert it in the right subtree
                else if (value > current->data) {
                    // If the right child node is empty, insert the value there
                    if (current->right == nullptr) {
                        current->right = newNode;
                        inserted = true;
                    }
                    // Otherwise, continue to the right child node
                    else {
                        current = current->right;
                    }
                }
                // If the value is equal to the current node's value, do not insert it (no duplicates allowed)
                else {
                    inserted = true;
                }
            }
        }

        // Function to delete a node from the tree
        void remove(int value) {
            // Start at the root of the tree
            Node* current = root;
            // Variable to keep track of whether the value has been found or not
            bool found = false;
            // Loop until the value is found
            while (!found && current != nullptr) {
                // If the value is less than the current node's value, move to the left child node
                if (value < current->data) {
                    current = current->left;
                }
                // If the value is greater than the current node's value, move to the right child node
                else if (value > current->data) {
                    current = current->right;
                }
                // If the value is equal to the current node's value, delete the node
                else {
                    // Case 1: The node has no children
                    if (current->left == nullptr && current->right == nullptr) {
                        delete current;
                        found = true;
                    }
                    // Case 2: The node has one child
                    else if (current->left == nullptr && current->right != nullptr) {
                        Node* temp = current->right;
                        current->data = temp->data;
                        current->right = temp->right;
                        delete temp;
                        found = true;
                    }
                    else if (current->left != nullptr && current->right == nullptr) {
                        Node* temp = current->left;
                        current->data = temp->data;
                        current->left = temp->left;
                        delete temp;
                        found = true;
                    }
                    // Case 3: The node has two children
                    else {
                        // Find the successor node (minimum value in the right subtree)
                        Node* successor = current->right;
                        while (successor->left != nullptr) {
                            successor = successor->left;
                        }
                        // Replace the value of the current node with the successor node's value
                        current->data = successor->data;
                        // Delete the successor node
                        remove(successor->data);
                        found = true;
                    }
                }
            }
        }

        // Function to search for a value in the tree and return a boolean indicating whether it is found or not
        bool search(int value) {
            // Start at the root of the tree
            Node* current = root;
            // Boolean variable to keep track of whether the value has been found or not
            bool found = false;
            // Loop until the value is found or the end of the tree is reached
            while (!found && current != nullptr) {
                // If the value is less than the current node's value, move to the left child node
                if (value < current->data) {
                    current = current->left;
                }
                // If the value is greater than the current node's value, move to the right child node
                else if (value > current->data) {
                    current = current->right;
                }
                // If the value is equal to the current node's value, the value has been found
                else {
                    found = true;
                }
            }
            // Return the boolean value
            return found;
        }
};