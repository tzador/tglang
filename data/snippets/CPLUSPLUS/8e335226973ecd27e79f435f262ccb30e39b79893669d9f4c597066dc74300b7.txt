/**
 * This program finds the shortest path between two nodes
 * in a graph using Dijkstra's algorithm.
 */
 
#include <iostream>
#include <vector>
#include <climits> // for INT_MAX
 
using namespace std;
 
// a utility function to find the minimum distance vertex
// in the set of vertices that are not yet included in the path
int findMinDistance(vector<int> &distance, vector<bool> &visitedNodes) {
    // start with a very large minDistance
    int minDistance = INT_MAX;
    int minDistanceVertex;
 
    for (int i = 0; i < distance.size(); i++) {
        // if the current distance is smaller than the minDistance and the node is not yet visited
        if (distance[i] < minDistance && !visitedNodes[i]) {
            minDistance = distance[i]; // update the minDistance
            minDistanceVertex = i; // store the index of the minDistance vertex
        }
    }
 
    return minDistanceVertex;
}
 
// function to print the distances of all nodes from the source
// and the corresponding shortest path from the source to each node
void printDistancesAndPaths(vector<int> &distance, vector<int> &predecessor, int sourceNode) {
    cout << "Source Node: " << sourceNode << endl;
 
    for (int i = 0; i < distance.size(); i++) {
        cout << "Distance from source to node " << i << ": " << distance[i] << endl;
 
        // print the shortest path from the source to the current node
        cout << "Shortest path: ";
 
        // start from the current node and go back to the source node using the predecessor array
        int currentNode = i;
        vector<int> shortestPath;
 
        // add the current node to the shortest path vector
        shortestPath.push_back(currentNode); 
 
        while (currentNode != sourceNode) {
            currentNode = predecessor[currentNode]; // update the current node to its predecessor
            shortestPath.push_back(currentNode); // add the current node to the shortest path vector
        }
 
        // print the shortest path vector in reverse order
        cout << "[ ";
        for (int j = shortestPath.size() - 1; j >= 0; j--) {
            cout << shortestPath[j] << " ";
        }
        cout << "]" << endl;
    }
}
 
// function to implement Dijkstra's algorithm to find the shortest path
void dijkstra(vector<vector<int>> &graph, int sourceNode) {
    int numNodes = graph.size();
 
    // initialize distance vector to store the distance from the source node to each node
    vector<int> distance(numNodes, INT_MAX); // initialize distances to a very large value
 
    // initialize visitedNodes vector to keep track of the nodes that have been visited
    vector<bool> visitedNodes(numNodes, false);
 
    // initial distance from the source node to itself is 0
    distance[sourceNode] = 0;
 
    // find the shortest path for all vertices
    for (int i = 0; i < numNodes - 1; i++) {
        // find the minimum distance vertex from the set of unvisited nodes
        int minDistanceVertex = findMinDistance(distance, visitedNodes);
 
        // mark the current vertex as visited
        visitedNodes[minDistanceVertex] = true;
 
        // update the distances for all adjacent nodes if the path through the current vertex is shorter
        for (int j = 0; j < numNodes; j++) {
            if (!visitedNodes[j] && graph[minDistanceVertex][j] != 0 && distance[minDistanceVertex] != INT_MAX 
                && distance[minDistanceVertex] + graph[minDistanceVertex][j] < distance[j]) {
                distance[j] = distance[minDistanceVertex] + graph[minDistanceVertex][j];
            }
        }
    }
 
    // print the distances and paths from the source node
    printDistancesAndPaths(distance, visitedNodes, sourceNode);
}
 
int main() {
    // initialize the graph as an adjacency matrix (0 for no edge, non-zero for edge weight)
    vector<vector<int>> graph = {
        {0, 2, 4, 0, 0, 0},
        {2, 0, 3, 10, 0, 0},
        {4, 3, 0, 8, 0, 0},
        {0, 10, 8, 0, 5, 6},
        {0, 0, 0, 5, 0, 0},
        {0, 0, 0, 6, 0, 0}
    };
 
    int sourceNode = 0; // starting node for the path
 
    // run Dijkstra's algorithm
    dijkstra(graph, sourceNode);
 
    return 0;
}