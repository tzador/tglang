#include <iostream>

// Forward declaration of class Rectangle
class Rectangle;

// Struct that holds coordinates of a point
struct Point {
    int x, y;

    // Constructor to initialize coordinates
    Point(int x, int y) : x(x), y(y) {}
    
    // Print function to display coordinates
    void print() {
        std::cout << "(" << x << ", " << y << ")" << std::endl;
    }
};

// Class for creating and manipulating rectangles
class Rectangle {
    // Variables for storing coordinates of top-left and bottom-right corners
    Point topLeft, bottomRight;
    
public:
    // Constructor to initialize rectangle with coordinates of top-left and bottom-right corners
    Rectangle(Point topLeft, Point bottomRight) : topLeft(topLeft), bottomRight(bottomRight) {}

    // Function to calculate and return area of rectangle
    int getArea() {
        // Calculate width and height of rectangle
        int width = bottomRight.x - topLeft.x;
        int height = topLeft.y - bottomRight.y;
        
        // Calculate and return area
        return width * height;
    }

    // Function to check if a given point lies inside the rectangle
    bool containsPoint(Point point) {
        // Check if the point lies between top and bottom boundaries of the rectangle
        if (point.x > topLeft.x && point.x < bottomRight.x) {
            // Check if the point lies between left and right boundaries of the rectangle
            if (point.y > bottomRight.y && point.y < topLeft.y) {
                return true; // Point lies inside the rectangle
            }
        }
        
        return false; // Point does not lie inside the rectangle
    }
};

int main() {
    // Create a rectangle with coordinates (-2, 2) and (2, -2)
    Rectangle rectangle(Point(-2, 2), Point(2, -2));
    
    // Print the area of the rectangle
    std::cout << "The area of the rectangle is: " << rectangle.getArea() << std::endl;
    
    // Create a point with coordinates (0, 0)
    Point point(0, 0);
    
    // Check if the point lies inside the rectangle
    if (rectangle.containsPoint(point)) {
        std::cout << "The point (" << point.x << ", " << point.y << ") lies inside the rectangle." << std::endl;
    } else {
        std::cout << "The point (" << point.x << ", " << point.y << ") does not lie inside the rectangle." << std::endl;
    }
    
    return 0;
}