// This code snippet is a function that implements the quicksort algorithm.

// Function to partition the array and return the index of the pivot element
int partition(int arr[], int low, int high) {
    int pivot = arr[high];     // select the last element as the pivot
    int i = (low - 1);         // index of smaller element

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;              // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);        
    return (i + 1);           // return index of pivot element
}

// Function to implement the quicksort algorithm recursively
void quicksort(int arr[], int low, int high) {
    if (low < high) {
        // partition the array and get the pivot index
        int pivot_index = partition(arr, low, high);

        // recursively call quicksort on the subarrays left and right of the pivot
        quicksort(arr, low, pivot_index - 1);
        quicksort(arr, pivot_index + 1, high);
    }
}

// Driver code to test the quicksort algorithm
int main() {
    int arr[] = {5, 2, 7, 1, 10, 9, 8, 3, 4, 6};
    int n = sizeof(arr) / sizeof(arr[0]);

    // call quicksort function on the entire array
    quicksort(arr, 0, n - 1);

    // print the sorted array
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}