// This code snippet is a function that searches for the n-th Prime Number using the Sieve of Eratosthenes algorithm
// Input: Integer n, representing the position of the prime number to be found
// Output: The n-th prime number

#include <iostream>
#include <math.h>

using namespace std;

// Function to generate nth prime number
int nthPrime(int n)
{
    // Initializing a boolean array of size n+1
    bool prime[n+1];
    
    // Setting all elements to true
    memset(prime, true, sizeof(prime));
    
    // Running a loop from 2 to square root of n
    for(int i=2; i<=sqrt(n); i++)
    {
        // Checking if current number is prime
        if(prime[i] == true)
        {
            // Setting all multiples of i to false
            for(int j=i*i; j<=n; j+=i)
            {
                prime[j] = false;
            }
        }
    }
    
    // Initializing counter for prime numbers
    int count = 0;
    
    // Looping through the boolean array to find the n-th prime number
    for(int i=2; i<=n; i++)
    {
        // If current number is prime, increment count
        if(prime[i] == true)
        {
            count++;
            
            // If count equals n, return current number as the n-th prime number
            if(count == n)
            {
                return i;
            }
        }
    }
    
    // If n is less than or equal to 0, return -1 as error
    return -1;
}

// Main function
int main()
{
    // Input number for finding n-th prime
    int n;
    
    // Getting input from user
    cout << "Enter a positive integer: ";
    cin >> n;
    
    // Checking if input is positive
    if(n > 0)
    {
        // Calling nthPrime function and storing the result in variable result
        int result = nthPrime(n);
        
        // Outputting the result
        cout << "The " << n << "-th prime number is: " << result << endl;
    }
    else
    {
        // Outputting error message if input is not positive
        cout << "Invalid input. Please enter a positive integer." << endl;
    }
    
    return 0;
}