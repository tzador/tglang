#include <iostream>

// Class for matrix operations
class Matrix {
private:
    int rows, cols;
    double **data;
public:
    Matrix(int rows, int cols) {
        this->rows = rows;
        this->cols = cols;

        // Allocate memory for data using rows and columns
        this->data = new double* [rows];
        for (int i = 0; i < rows; i++) {
            this->data[i] = new double[cols];
        }
    }

    // Destructor to free up memory
    ~Matrix() {
        for (int i = 0; i < rows; i++) {
            delete[] data[i];
        }
        delete data;
    }

    // Overloading the addition operator
    Matrix operator+(Matrix& other) {
        Matrix result(this->rows, this->cols);
        // Perform addition on elements of both matrices and store in result
        for (int i = 0; i < this->rows; i++) {
            for (int j = 0; j < this->cols; j++) {
                result.data[i][j] = this->data[i][j] + other.data[i][j];
            }
        }

        return result;
    }

    // Function to print the contents of a matrix
    void print() {
        for (int i = 0; i < this->rows; i++) {
            for (int j = 0; j < this->cols; j++) {
                std::cout << this->data[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    // Create two matrices for addition
    Matrix m1(3, 3);
    Matrix m2(3, 3);

    // Populate matrices with values
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            m1.data[i][j] = i * j;
            m2.data[i][j] = i + j;
        }
    }

    // Add the two matrices and store in result
    Matrix result = m1 + m2;

    // Print the result
    result.print();

    return 0;
}