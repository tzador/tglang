// This code snippet is a complex implementation of a binary tree data structure
#include <iostream>
#include <queue>
#include <cmath>
using namespace std;

// definition of a node in the binary tree
template <class T>
struct BinaryTreeNode {
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;
    BinaryTreeNode(const T &val) : data(val), left(NULL), right(NULL) {} // constructor
};

// class for implementing a binary tree
template <class T>
class BinaryTree {
private:
    BinaryTreeNode<T> *root; // root node of the binary tree
public:
    BinaryTree() : root(NULL) {} // constructor
    ~BinaryTree() { // destructor to free memory
        deleteBinaryTree(this->root);
    }
    
    // function to insert new node in the binary tree
    void insert(T val) {
        BinaryTreeNode<T> *curr = this->root;
        
        // check if root node is empty
        if (!curr) {
            this->root = new BinaryTreeNode<T>(val);
            return;
        }
        
        // perform a level order traversal to find the appropriate position to insert the node
        queue<BinaryTreeNode<T>*> q;
        q.push(curr);
        
        while (!q.empty()) {
            BinaryTreeNode<T> *temp = q.front();
            q.pop();
            
            if (!temp->left) {
                temp->left = new BinaryTreeNode<T>(val);
                break;
            }
            
            q.push(temp->left);
            
            if (!temp->right) {
                temp->right = new BinaryTreeNode<T>(val);
                break;
            }
            
            q.push(temp->right);
        }
    }
    
    // function to delete the binary tree recursively
    void deleteBinaryTree(BinaryTreeNode<T> *root) {
        if (!root) {
            return;
        }
        
        // delete left subtree
        if (root->left) {
            deleteBinaryTree(root->left);
        }
        
        // delete right subtree
        if (root->right) {
            deleteBinaryTree(root->right);
        }
        
        delete root;
    }
    
    // function to calculate the height of the binary tree
    int getHeight() {
        return getHeightHelper(this->root);
    }
    
    // helper function for getHeight()
    int getHeightHelper(BinaryTreeNode<T> *root) {
        if (!root) {
            return 0;
        }
        
        int leftHeight = getHeightHelper(root->left);
        int rightHeight = getHeightHelper(root->right);
        
        return 1 + max(leftHeight, rightHeight);
    }
    
    // function to find the maximum element in the binary tree
    T findMax() {
        return findMaxHelper(this->root);
    }
    
    // helper function for findMax()
    T findMaxHelper(BinaryTreeNode<T> *root) {
        if (!root) {
            return -1;
        }
        
        T maxValue = root->data;
        T leftMax = findMaxHelper(root->left);
        T rightMax = findMaxHelper(root->right);
        
        if (leftMax > maxValue) {
            maxValue = leftMax;
        }
        
        if (rightMax > maxValue) {
            maxValue = rightMax;
        }
        
        return maxValue;
    }
    
    // function to count the number of nodes in the binary tree
    int countNodes() {
        return countNodesHelper(this->root);
    }
    
    // helper function for countNodes()
    int countNodesHelper(BinaryTreeNode<T> *root) {
        if (!root) {
            return 0;
        }
        
        return 1 + countNodesHelper(root->left) + countNodesHelper(root->right);
    }
    
    // function to check if the given value exists in the binary tree
    bool search(T val) {
        return searchHelper(this->root, val);
    }
    
    // helper function for search()
    bool searchHelper(BinaryTreeNode<T> *root, T val) {
        if (!root) {
            return false;
        }
        
        if (root->data == val) {
            return true;
        }
        
        return searchHelper(root->left, val) || searchHelper(root->right, val);
    }
    
    // function to print the binary tree in level order traversal
    void printLevelOrder() {
        printLevelOrderHelper(this->root);
    }
    
    // helper function for printLevelOrder()
    void printLevelOrderHelper(BinaryTreeNode<T> *root) {
        if (!root) {
            return; 
        }
        
        // use a queue for the level order traversal
        queue<BinaryTreeNode<T>*> q;
        q.push(root);
        
        while (!q.empty()) {
            BinaryTreeNode<T> *temp = q.front();
            q.pop();
            
            // print the data in the current node
            cout << temp->data << " ";
            
            // push the children of the current node into the queue
            if (temp->left) {
                q.push(temp->left);
            }
            
            if (temp->right) {
                q.push(temp->right);
            }
        }
    }
};

// main function
int main() {
    // create a binary tree object of integers
    BinaryTree<int> tree;
    
    // insert values in the binary tree
    tree.insert(5);
    tree.insert(2);
    tree.insert(8);
    tree.insert(12);
    tree.insert(3);
    tree.insert(6);
    
    // print the binary tree in level order traversal
    tree.printLevelOrder();
    
    // find the height of the binary tree
    cout << "Height of the binary tree: " << tree.getHeight() << endl;
    
    // find the maximum element in the binary tree
    cout << "Maximum element in the binary tree: " << tree.findMax() << endl;
    
    // count the number of nodes in the binary tree
    cout << "Number of nodes in the binary tree: " << tree.countNodes() << endl;
    
    // search for a value in the binary tree
    int value = 6;
    if (tree.search(value)) {
        cout << value << " exists in the binary tree." << endl;
    }
    else {
        cout << value << " does not exist in the binary tree." << endl;
    }
    
    return 0;
}