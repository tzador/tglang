// Function to implement the Knuth-Morris-Pratt algorithm for pattern searching
// Returns a vector containing the indices at which the pattern is found in the main string
vector<int> kmp_search(string main, string pattern)
{
    int n = main.size(); // size of main string
    int m = pattern.size(); // size of pattern string
    vector<int> lps(m); // vector for storing longest prefix suffix values of pattern

    // filling vector lps
    fill_lps(pattern, lps);

    vector<int> indices; // vector for storing indices where pattern is found
    int i = 0; // index for traversing main string
    int j = 0; // index for traversing pattern string

    while (i < n)
    {
        if (main[i] == pattern[j])
        {
            i++; // increment both indices if characters match
            j++;
        }

        // pattern found
        if (j == m)
        {
            indices.push_back(i - j); // store starting index of pattern in main string
            j = lps[j - 1]; // get next longest prefix suffix value
        }

        // mismatch after some characters match
        else if (i < n && main[i] != pattern[j])
        {
            if (j != 0)
                j = lps[j - 1]; // get previous longest prefix suffix value

            else
                i++; // increment i if j is 0
        }
    }

    return indices; // return the vector containing indices
}

// Function to fill the lps vector with longest prefix suffix values of pattern
void fill_lps(string pattern, vector<int>& lps)
{
    int m = pattern.size(); // size of pattern string
    int len = 0; // length of longest prefix suffix

    lps[0] = 0; // first element is always 0, as a string of length 1 cannot have a prefix or suffix

    int i = 1; // start at index 1
    while (i < m)
    {
        if (pattern[i] == pattern[len])
        {
            len++; // increment length if characters match
            lps[i] = len; // update lps value
            i++;
        }
        else
        {
            if (len != 0)
                len = lps[len - 1]; // get previous longest prefix suffix value

            else
            {
                lps[i] = 0; // update lps value to 0
                i++; // increment i
            }
        }
    }
}

// Example usage
int main()
{
    string main = "abababbcabababbcab"; // main string
    string pattern = "ab"; // pattern string

    vector<int> indices = kmp_search(main, pattern); // perform KMP pattern search

    // print indices where pattern is found
    for (int i = 0; i < indices.size(); i++)
        cout << indices[i] << " ";

    return 0;
}