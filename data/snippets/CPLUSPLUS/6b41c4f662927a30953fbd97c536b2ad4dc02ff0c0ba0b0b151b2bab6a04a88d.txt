// Complexity is O(n^2)
// n is the size of the input array
// Takes in an array of integers as input
// Uses bubble sort algorithm to sort the array in ascending order
void bubbleSort(int arr[], int n) 
{
    int i, j; // declare variables for loop iteration

    for (i = 0; i < n-1; i++) // loop through the entire array
    { 
        for (j = 0; j < n-i-1; j++) // loop through unsorted elements
        {
            if (arr[j] > arr[j+1]) // compare adjacent elements and swap if needed
            { 
                int temp = arr[j]; // temporary variable to hold element being swapped
                arr[j] = arr[j+1]; // swap elements
                arr[j+1] = temp; // set element in original index to temp value
            } 
        } 
    } 
} 

// Example usage of the bubbleSort function
int main()
{
    int arr[] = {5, 4, 3, 2, 1}; // input array
    int n = sizeof(arr) / sizeof(arr[0]); // calculate array size

    bubbleSort(arr, n); // call bubbleSort function to sort array

    for (int i = 0; i < n; i++) // loop through sorted array and print values
    {
        cout << arr[i] << " "; 
    }
    return 0;
}

// Output: 1 2 3 4 5 (array sorted in ascending order)