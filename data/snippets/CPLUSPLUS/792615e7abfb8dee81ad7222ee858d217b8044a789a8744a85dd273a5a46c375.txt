// This code snippet generates a random maze using the depth-first search algorithm

#include <iostream> // include necessary libraries
#include <stack>
#include <vector>
#include <algorithm>
#include <ctime>

using namespace std;

// function to generate random number
int randomGenerator(int min, int max) {
    static bool first = true;
    if (first) {
        srand(time(NULL)); // seed the random generator
        first = false;
    }

    return min + rand() % ((max + 1) - min); // generate number within given range
}

// function to check if a cell is within the bounds of the maze
bool isInRange(int x, int y, int width, int height) {
    if (x < 0 || x >= width || y < 0 || y >= height) {
        return false;
    } else {
        return true;
    }
}

// structure for cell in the maze
struct Cell {
    int x;
    int y;
    bool visited = false; // flag to check if the cell has been visited
    bool topWall = true; // flags for each wall of the cell
    bool bottomWall = true;
    bool leftWall = true;
    bool rightWall = true;
};

// function to generate the maze using depth-first search algorithm
void generateMaze(vector< vector<Cell> > &maze, stack<Cell> &cellStack, int width, int height) {
    // choose a random cell to start from
    int currentX = randomGenerator(0, width - 1);
    int currentY = randomGenerator(0, height - 1);
    Cell currentCell = maze[currentX][currentY];
    currentCell.visited = true; // mark the cell as visited
    cellStack.push(currentCell);

    while (!cellStack.empty()) { // loop until all cells have been visited
        currentCell = cellStack.top(); // get the top cell from the stack
        cellStack.pop();
        currentX = currentCell.x;
        currentY = currentCell.y;

        // array to store the neighboring cells in each cardinal direction clockwise
        int neighbors[4][2] = {{currentX, currentY - 1}, {currentX + 1, currentY}, {currentX, currentY + 1}, {currentX - 1, currentY}};

        // randomly shuffle the array
        random_shuffle(&neighbors[0][0], &neighbors[4][0]);

        // loop through the shuffled array
        for (int i = 0; i < 4; i++) {
            int neighborX = neighbors[i][0];
            int neighborY = neighbors[i][1];

            // if the neighbor is within the bounds of the maze and has not been visited yet
            if (isInRange(neighborX, neighborY, width, height) && !maze[neighborX][neighborY].visited) {
                // remove the wall between the current cell and the neighbor
                if (neighborX == currentX && neighborY == currentY - 1) {
                    currentCell.topWall = false;
                    maze[neighborX][neighborY].bottomWall = false;
                } else if (neighborX == currentX + 1 && neighborY == currentY) {
                    currentCell.rightWall = false;
                    maze[neighborX][neighborY].leftWall = false;
                } else if (neighborX == currentX && neighborY == currentY + 1) {
                    currentCell.bottomWall = false;
                    maze[neighborX][neighborY].topWall = false;
                } else if (neighborX == currentX - 1 && neighborY == currentY) {
                    currentCell.leftWall = false;
                    maze[neighborX][neighborY].rightWall = false;
                }

                // mark the neighbor cell as visited and push it onto the stack
                maze[neighborX][neighborY].visited = true;
                cellStack.push(maze[neighborX][neighborY]);
            }
        }
    }
}

int main() {
    // initialize width and height of the maze
    int width = 10;
    int height = 10;

    // create a vector of vectors to represent the maze
    vector< vector<Cell> > maze(width, vector<Cell>(height));

    // create a stack to keep track of the visited cells
    stack<Cell> cellStack;

    // generate the maze
    generateMaze(maze, cellStack, width, height);

    // print the maze
    for (int i = 0; i < height; i++) {
        // print top walls of each cell in the top row
        for (int j = 0; j < width; j++) {
            cout << "*-*";
        }
        cout << "*" << endl;

        // print side walls and cells for each row
        for (int j = 0; j < width; j++) {
            if (maze[j][i].leftWall) {
                cout << "|";
            } else {
                cout << " ";
            }
            if (maze[j][i].bottomWall) {
                cout << "_";
            } else {
                cout << " ";
            }
            if (j == width - 1) {
                if (maze[j][i].rightWall) {
                    cout << "|";
                } else {
                    cout << " ";
                }
            }
        }
        cout << endl;
    }
    // print bottom row of walls
    for (int i = 0; i < width; i++) {
        cout << "*-*";
    }
    cout << "*" << endl;

    return 0;
}