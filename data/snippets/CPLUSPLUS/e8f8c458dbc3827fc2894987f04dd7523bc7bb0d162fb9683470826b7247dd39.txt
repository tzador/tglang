// Object of this class will represent a matrix
class Matrix {
    int rows; // number of rows in the matrix
    int columns; // number of columns in the matrix
    int **data; // pointer to a 2D array to hold the actual data

public:
    // Constructor to initialize the matrix with specified size
    Matrix(int r, int c) {
        rows = r;
        columns = c;

        // Allocate memory for 2D array using new operator
        data = new int*[rows];
        for (int i = 0; i < rows; i++) {
            data[i] = new int[columns];
        }
    }

    // Destructor to free up the memory allocated by new operator
    ~Matrix() {
        // Deallocate all the rows in the 2D array
        for (int i = 0; i < rows; i++) {
            delete[] data[i];
        }

        // Deallocate the 2D array
        delete[] data;
    }

    // Function to get the value at specified row and column
    int getValue(int r, int c) {
        return data[r][c];
    }

    // Function to set the value at specified row and column
    void setValue(int r, int c, int value) {
        data[r][c] = value;
    }

    // Function to multiply this matrix with another matrix
    Matrix multiply(Matrix& other) {
        // Check if the number of columns in this matrix is equal to the number of rows in the other matrix
        if (columns != other.rows) {
            throw "Invalid dimensions for matrix multiplication";
        }

        // Create a new matrix to store the result
        Matrix result(rows, other.columns);

        // Perform matrix multiplication
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < other.columns; j++) {
                for (int k = 0; k < columns; k++) {
                    result.data[i][j] += data[i][k] * other.getValue(k, j);
                }
            }
        }

        // Return the resulting matrix
        return result;
    }
};

// Create two matrices and initialize them with values
Matrix matrix1(3, 3);
Matrix matrix2(3, 3);
matrix1.setValue(0, 0, 1);
matrix1.setValue(0, 1, 2);
matrix1.setValue(0, 2, 3);
matrix1.setValue(1, 0, 4);
matrix1.setValue(1, 1, 5);
matrix1.setValue(1, 2, 6);
matrix1.setValue(2, 0, 7);
matrix1.setValue(2, 1, 8);
matrix1.setValue(2, 2, 9);
matrix2.setValue(0, 0, 9);
matrix2.setValue(0, 1, 8);
matrix2.setValue(0, 2, 7);
matrix2.setValue(1, 0, 6);
matrix2.setValue(1, 1, 5);
matrix2.setValue(1, 2, 4);
matrix2.setValue(2, 0, 3);
matrix2.setValue(2, 1, 2);
matrix2.setValue(2, 2, 1);

// Multiply the two matrices and assign the result to a third matrix
Matrix result = matrix1.multiply(matrix2);

// Print the resulting matrix
for (int i = 0; i < result.rows; i++) {
    for (int j = 0; j < result.columns; j++) {
        std::cout << result.getValue(i, j) << " ";
    }
    std::cout << std::endl;
}