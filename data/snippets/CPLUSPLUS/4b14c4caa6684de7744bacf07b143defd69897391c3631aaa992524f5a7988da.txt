#include <iostream>
#include <vector>

// Create a class for a 2-dimensional point
class Point2D {
    // Private members
    private:
        double x; // x-coordinate
        double y; // y-coordinate
    
    // Public members
    public:
        // Constructor with default values of 0
        Point2D(double x = 0, double y = 0) {
            this->x = x;
            this->y = y;
        }

        // Getter and setter methods for x-coordinate
        double getX() {
            return x;
        }

        void setX(double x) {
            this->x = x;
        }

        // Getter and setter methods for y-coordinate
        double getY() {
            return y;
        }

        void setY(double y) {
            this->y = y;
        }

        // Method to calculate the distance between this point and another point
        double calculateDistance(Point2D otherPoint) {
            return sqrt((x - otherPoint.getX()) * (x - otherPoint.getX()) + (y - otherPoint.getY()) * (y - otherPoint.getY()));
        }
};

// Main function
int main() {
    // Create a vector to store 5 points
    std::vector<Point2D> points;

    // Add 5 points to the vector
    points.push_back(Point2D(1, 1));
    points.push_back(Point2D(2, 2));
    points.push_back(Point2D(3, 3));
    points.push_back(Point2D(4, 4));
    points.push_back(Point2D(5, 5));

    // Loop through the points and calculate the distances between them
    for (int i = 0; i < points.size(); i++) {
        // Print out the coordinates of the current point
        std::cout << "Point " << i+1 << " coordinates: (" << points[i].getX() << ", " << points[i].getY() << ")" << std::endl;
        
        // Calculate the distance from the current point to the next point
        if (i < points.size() - 1) {
            double distance = points[i].calculateDistance(points[i+1]);
            std::cout << "Distance to next point: " << distance << std::endl;
        }
    }

    return 0;
}