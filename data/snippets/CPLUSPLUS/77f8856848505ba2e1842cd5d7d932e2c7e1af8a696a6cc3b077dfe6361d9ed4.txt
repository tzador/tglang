#include <iostream>
#include <cstring>
using namespace std;

// Function template to merge two arrays
template <typename T>
T* mergeArrays(T arr1[], int s1, T arr2[], int s2)
{
    // Create a new array to store merged data
    T* result = new T[s1 + s2];

    // Initialize variables for looping through arrays
    int i = 0; // index for arr1
    int j = 0; // index for arr2
    int k = 0; // index for result array

    // Loop and compare elements in both arrays
    while (i < s1 && j < s2)
    {
        if (arr1[i] <= arr2[j])
        {
            // Append element from arr1 to result
            result[k] = arr1[i];
            i++;
        }
        else
        {
            // Append element from arr2 to result
            result[k] = arr2[j];
            j++;
        }
        k++;
    }

    // Loop through the remaining elements in arr1 and append to result
    while (i < s1)
    {
        result[k] = arr1[i];
        i++;
        k++;
    }

    // Loop through the remaining elements in arr2 and append to result
    while (j < s2)
    {
        result[k] = arr2[j];
        j++;
        k++;
    }

    // Return the merged array
    return result;
}

int main()
{
    // Initialize arrays for testing
    int arr1[] = {1, 3, 5, 7, 9};
    int size1 = sizeof(arr1) / sizeof(arr1[0]); // Calculate size of arr1
    int arr2[] = {2, 4, 6, 8, 10};
    int size2 = sizeof(arr2) / sizeof(arr2[0]); // Calculate size of arr2

    // Call function template to merge arrays
    int* result = mergeArrays(arr1, size1, arr2, size2);

    // Print merged array
    for (int i = 0; i < size1 + size2; i++)
    {
        cout << result[i] << " ";
    }

    // Deallocate memory for result array
    delete[] result;

    return 0;
}