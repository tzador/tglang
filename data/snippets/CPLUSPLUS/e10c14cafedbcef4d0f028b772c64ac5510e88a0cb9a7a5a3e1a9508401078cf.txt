#include <iostream> //include iostream library

using namespace std; //use standard namespace

const int MAX_SIZE = 100; //declare a constant integer variable with a value of 100

enum class Color { //create a custom data type 'Color' using enum
    RED, //first option with value of 0
    GREEN, //second option with value of 1
    BLUE, //third option with value of 2
    YELLOW //fourth option with value of 3
};

class Shape { //create a class called 'Shape'
private:
    int width; //private member variable for width
    int height; //private member variable for height
    static int count; //static variable to keep track of number of Shape objects created
public:
    Shape(int w, int h) { //constructor accepting width and height as parameters
        width = w; //assign input to member variable
        height = h; //assign input to member variable
        count++; //increment count for each object created
    }
    ~Shape() { //destructor to cleanup and decrement count
        count--;
    }
    void setWidth(int w) { //setter method for width
        width = w; //assign input to member variable
    }
    void setHeight(int h) { //setter method for height
        height = h; //assign input to member variable
    }
    int getWidth() { //getter method for width
        return width; //return value of width
    }
    int getHeight() { //getter method for height
        return height; //return value of height
    }
    static int getCount() { //static method to return count of objects created
        return count; //return value of count
    }
    virtual float calcArea() = 0; //pure virtual method to calculate area of a shape - to be implemented in derived classes
    virtual void printColor(Color c) { //virtual method to print the color of a shape - to be overridden in derived classes
        if (c == Color::RED) { //check the value of the input parameter
            cout << "This shape is red." << endl; //if it is equal to RED, print this statement
        }
        else if (c == Color::GREEN) { //check if the value of the input parameter is equal to GREEN
            cout << "This shape is green." << endl; //if so, print this statement
        }
        else if (c == Color::BLUE) { //check if the value of the input parameter is equal to BLUE
            cout << "This shape is blue." << endl; //if so, print this statement
        }
        else if (c == Color::YELLOW) { //check if the value of the input parameter is equal to YELLOW
            cout << "This shape is yellow." << endl; //if so, print this statement
        }
        else { //if none of the above conditions are met
            cout << "Invalid color." << endl; //print this statement
        }
    }
};

int Shape::count = 0; //initialize static variable outside of class

class Rectangle : public Shape { //create a class called 'Rectangle' which inherits from 'Shape'
public:
    Rectangle(int w, int h) : Shape(w, h) { //constructor accepts width and height as parameters and passes them onto the base class constructor
    }
    float calcArea() override { //override virtual method to calculate area of a rectangle
        float area = getWidth() * getHeight(); //access getWidth and getHeight methods from base class to calculate area
        return area; //return value of area
    }
    void printColor(Color c) override { //override virtual method to print color of a rectangle
        if (c == Color::RED) { //check if input parameter is equal to RED
            cout << "This rectangle is red." << endl; //if so, print this statement
        }
        else if (c == Color::GREEN) { //check if input parameter is equal to GREEN
            cout << "This rectangle is green." << endl; //if so, print this statement
        }
        else if (c == Color::BLUE) { //check if input parameter is equal to BLUE
            cout << "This rectangle is blue." << endl; //if so, print this statement
        }
        else if (c == Color::YELLOW) { //check if input parameter is equal to YELLOW
            cout << "This rectangle is yellow." << endl; //if so, print this statement
        }
        else { //if none of the above conditions are met
            cout << "Invalid color." << endl; //print this statement
        }
    }
};

int main() {
    Rectangle r(5, 10); //create a Rectangle object with width of 5 and height of 10
    cout << "Area of rectangle: " << r.calcArea() << endl; //call calcArea method from Rectangle class to calculate area and print it
    r.setWidth(8); //use setter method to change width to 8
    r.setHeight(12); //use setter method to change height to 12
    cout << "New area of rectangle: " << r.calcArea() << endl; //call calcArea method again to calculate new area and print it
    r.printColor(Color::BLUE); //call printColor method and pass in BLUE as the color
    cout << "Number of Shape objects created: " << Shape::getCount(); //use static method from Shape class to print number of Shape objects created
    return 0; //indicate successful program termination
}