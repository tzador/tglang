// This code snippet implements a K-Nearest Neighbors algorithm using OOP principles

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

// Define a data point class
class DataPoint {
public:
    // Constructor with values for all attributes
    DataPoint(int x, int y, int z) {
        this->x = x;
        this->y = y;
        this->z = z;
    }

    // Default constructor
    DataPoint() {
        this->x = 0;
        this->y = 0;
        this->z = 0;
    }

    // Getters and setters for attributes
    int getX() const {
        return this->x;
    }

    int getY() const {
        return this->y;
    }

    int getZ() const {
        return this->z;
    }

    void setX(int x) {
        this->x = x;
    }

    void setY(int y) {
        this->y = y;
    }

    void setZ(int z) {
        this->z = z;
    }

    // Calculate Euclidean distance between two points
    float euclideanDistance(DataPoint other) {
        int xDist = this->x - other.getX();
        int yDist = this->y - other.getY();
        int zDist = this->z - other.getZ();
        return sqrt(pow(xDist, 2) + pow(yDist, 2) + pow(zDist, 2));
    }

private:
    // Private attributes
    int x, y, z;
};

// Define a class for a K-Nearest Neighbors model
class KNN {
public:
    // Constructor takes in the training data and k value
    KNN(vector<DataPoint> trainingData, int k) {
        this->trainingData = trainingData;
        this->k = k;
    }

    // Predict the class of a given data point based on the k nearest neighbors
    int predict(DataPoint dataPoint) {
        // Create a vector to store the distances and associated classes
        vector<pair<float, int>> distances;

        // Calculate the distance from data point to each training data point
        for (int i = 0; i < this->trainingData.size(); i++) {
            float distance = dataPoint.euclideanDistance(this->trainingData[i]);

            // Add the distance and class of current training data point to vector
            distances.push_back(make_pair(distance, i));
        }

        // Sort the vector based on distances in ascending order
        sort(distances.begin(), distances.end());

        // Create a map to store the class frequencies of the k nearest neighbors
        map<int, int> classFrequencies;

        // Loop through the first k distances
        for (int i = 0; i < this->k; i++) {
            // Get the class of current nearest neighbor
            int currClass = this->trainingData[distances[i].second].getZ();

            // Increase the frequency count of current class in map
            classFrequencies[currClass]++;
        }

        // Find the class with maximum frequency
        int maxFrequency = 0;
        int maxClass = 0;
        for (auto elem : classFrequencies) {
            if (elem.second > maxFrequency) {
                maxFrequency = elem.second;
                maxClass = elem.first;
            }
        }

        // Return the predicted class
        return maxClass;
    }

private:
    // Private attributes
    vector<DataPoint> trainingData;
    int k;
};

int main() {
    // Create some sample data points
    DataPoint dp1(5, 3, 2);
    DataPoint dp2(1, 9, 6);
    DataPoint dp3(8, 4, 9);

    // Put the data points in a vector
    vector<DataPoint> trainingData;
    trainingData.push_back(dp1);
    trainingData.push_back(dp2);
    trainingData.push_back(dp3);

    // Create KNN model with k = 2
    KNN knnModel(trainingData, 2);

    // Predict the class of a new data point
    DataPoint newData(3, 6, 7);
    int predictedClass = knnModel.predict(newData);

    cout << "Predicted class: " << predictedClass << endl;

    return 0;
}