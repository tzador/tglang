#include <iostream> // include input/output library
 
using namespace std;

struct Node // declaring a structure named 'Node'
{
    int data; //declaring an integer variable 'data'
    Node* next; // declaring a pointer to another 'Node' structure
};

class LinkedList // declaring a class named 'LinkedList'
{
private:
    Node* head; // declaring a private head pointer variable
public:
    LinkedList() // constructor function
    {
        head = NULL; // initializing the head pointer to NULL
    }
    
    ~LinkedList() // destructor function
    {
        while(head != NULL) // loop until head pointer is NULL
        {
            Node* temp = head; // declaring and assigning a temporary pointer to head
            head = head->next; // updating head pointer to point to next 'Node' structure
            delete temp; // deallocating memory for temporary pointer
        }
    }
    
    void insertNode(int x) // function to insert a new 'Node' structure
    {
        Node* newNode = new Node; // declaring and allocating memory for new 'Node' structure
        newNode->data = x; // assigning value of input variable to 'data' variable in 'Node' structure
        newNode->next = head; // pointing 'next' of new 'Node' structure to current head
        head = newNode; // updating head pointer to point to new 'Node' structure
    }
    
    void printList() // function to print the linked list
    {
        Node* temp = head; // declaring and assigning a temporary pointer to head
        while(temp != NULL) // loop until temporary pointer is NULL
        {
            cout << temp->data << " "; // print the value of 'data' variable in current 'Node' structure
            temp = temp->next; // update temporary pointer to point to next 'Node' structure
        }
        cout << endl; // print new line
    }
    
    void deleteNode(int x) // function to delete a 'Node' structure with given value
    {
        Node* temp = head; // declaring and assigning a temporary pointer to head
        Node* prev = NULL; // declaring and assigning a previous pointer to NULL
        while(temp != NULL) // loop until temporary pointer is NULL
        {
            if(temp->data == x) // if value in current 'Node' structure is equal to input variable
            {
                if(prev == NULL) // if previous pointer is NULL, current 'Node' structure is the head
                {
                    head = temp->next; // update head pointer to point to next 'Node' structure
                    delete temp; // deallocate memory for current 'Node' structure
                    return; // exit function
                }
                else // if previous pointer is not NULL
                {
                    prev->next = temp->next; // update 'next' of previous 'Node' structure to point to next 'Node' structure
                    delete temp; // deallocate memory for current 'Node' structure
                    return; // exit function
                }
            }
            prev = temp; // update previous pointer to point to current 'Node' structure
            temp = temp->next; // update temporary pointer to point to next 'Node' structure
        }
    }
};

int main() // main function
{
    LinkedList myLinkedList; // declaring an instance of class 'LinkedList'
    myLinkedList.insertNode(5); // inserting 'Node' structure with value 5 in linked list
    myLinkedList.insertNode(10); // inserting 'Node' structure with value 10 in linked list
    myLinkedList.insertNode(15); // inserting 'Node' structure with value 15 in linked list
    myLinkedList.insertNode(20); // inserting 'Node' structure with value 20 in linked list
    myLinkedList.printList(); // print the linked list
    myLinkedList.deleteNode(10); // delete 'Node' structure with value 10 from linked list
    myLinkedList.printList(); // print the updated linked list
    
    return 0; // exit main function
}