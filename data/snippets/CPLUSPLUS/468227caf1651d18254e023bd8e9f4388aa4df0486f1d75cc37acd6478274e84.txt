#include <iostream>
using namespace std;

// Define a base Shape class
class Shape {
  protected:
    int width;
    int height;
  public:
    // Constructor to initialize the width and height of the shape
    Shape (int w, int h) {
      width = w;
      height = h;
    }
    // Virtual function to calculate and return the area of the shape
    virtual int getArea() = 0;
};

// Define a derived Rectangle class
class Rectangle: public Shape {
  public:
    // Constructor to initialize the width and height of the rectangle
    Rectangle(int w, int h) : Shape(w, h) { }

    // Override the getArea function to calculate and return the area of the rectangle
    int getArea() {
      return (width * height);
    }
};

// Define a derived Triangle class
class Triangle: public Shape {
  public:
    // Constructor to initialize the width and height of the triangle
    Triangle(int w, int h) : Shape(w, h) { }

    // Override the getArea function to calculate and return the area of the triangle
    int getArea() {
      return (width * height) / 2;
    }
};

// Main function
int main() {
  // Create a rectangle object with width of 5 and height of 10
  Rectangle rect(5, 10);

  // Create a triangle object with base of 3 and height of 6
  Triangle tri(3, 6);

  // Create an array of Shape pointers and point them to the rectangle and triangle objects
  Shape *shapes[] = { &rect, &tri };

  // Loop through the array and output the area of each shape
  for (int i = 0; i < 2; i++) {
    cout << "Area of shape " << i + 1 << ": " << shapes[i]->getArea() << endl;
  }

  return 0;
}