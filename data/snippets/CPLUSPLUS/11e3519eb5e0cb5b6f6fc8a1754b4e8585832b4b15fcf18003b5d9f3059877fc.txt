#include <iostream>

using namespace std;

// A class for storing complex numbers
class ComplexNumber {
    // Private variables to store the real and imaginary parts
    double real;
    double imaginary;

public:
    // Default constructor to initialize the number to 0
    ComplexNumber() {
        real = 0.0;
        imaginary = 0.0;
    }

    // Parameterized constructor to initialize the number to given real and imaginary parts
    ComplexNumber(double re, double im) {
        real = re;
        imaginary = im;
    }

    // Function to add two complex numbers and return the result as a new complex number
    ComplexNumber operator+(const ComplexNumber& other) {
        // Create a new complex number to store the result
        ComplexNumber result;

        // Add the real and imaginary parts of the two numbers
        result.real = real + other.real;
        result.imaginary = imaginary + other.imaginary;

        // Return the result
        return result;
    }

    // Function to subtract two complex numbers and return the result as a new complex number
    ComplexNumber operator-(const ComplexNumber& other) {
        // Create a new complex number to store the result
        ComplexNumber result;

        // Subtract the real and imaginary parts of the two numbers
        result.real = real - other.real;
        result.imaginary = imaginary - other.imaginary;

        // Return the result
        return result;
    }

    // Function to multiply two complex numbers and return the result as a new complex number
    ComplexNumber operator*(const ComplexNumber& other) {
        // Create a new complex number to store the result
        ComplexNumber result;

        // Multiply the real and imaginary parts of the two numbers using the formula (a + bi)*(c + di) = (ac - bd) + (ad + bc)i
        result.real = (real * other.real) - (imaginary * other.imaginary);
        result.imaginary = (real * other.imaginary) + (imaginary * other.real);

        // Return the result
        return result;
    }

    // Function to divide two complex numbers and return the result as a new complex number
    ComplexNumber operator/(const ComplexNumber& other) {
        // Create a new complex number to store the result
        ComplexNumber result;

        // Calculate the denominator using the formula (c + di)*(c - di) = (c^2 + d^2)
        double denominator = (other.real * other.real) + (other.imaginary * other.imaginary);

        // Calculate the real and imaginary parts of the result using the formula ((a + bi)*(c - di))/(c^2 + d^2) = ((ac + bd)/(c^2 + d^2)) + ((bc - ad)/(c^2 + d^2))i
        result.real = ((real * other.real) + (imaginary * other.imaginary)) / denominator;
        result.imaginary = ((imaginary * other.real) - (real * other.imaginary)) / denominator;

        // Return the result
        return result;
    }

    // A function to print the complex number in the format a + bi
    void print() {
        // Check for special cases where either the real or imaginary part is 0
        if (real == 0.0 && imaginary == 0.0) {
            cout << "0";
        }
        else if (real == 0.0) {
            cout << imaginary << "i";
        }
        else if (imaginary == 0.0) {
            cout << real;
        }
        else {
            cout << real << " + " << imaginary << "i";
        }
    }
};

// Main function
int main() {
    // Create two complex numbers
    ComplexNumber num1(2.0, 3.0);
    ComplexNumber num2(4.0, -5.0);

    // Print out the two numbers
    cout << "num1 = ";
    num1.print();
    cout << endl;
    cout << "num2 = ";
    num2.print();
    cout << endl;

    // Perform basic arithmetic operations on the two numbers and print out the results
    cout << "num1 + num2 = ";
    (num1 + num2).print();
    cout << endl;
    cout << "num1 - num2 = ";
    (num1 - num2).print();
    cout << endl;
    cout << "num1 * num2 = ";
    (num1 * num2).print();
    cout << endl;
    cout << "num1 / num2 = ";
    (num1 / num2).print();
    cout << endl;

    // End the program
    return 0;
}