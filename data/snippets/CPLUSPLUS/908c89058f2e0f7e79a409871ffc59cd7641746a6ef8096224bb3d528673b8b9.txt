#include<iostream>
#include<unordered_map>

using namespace std;

// function to find the longest common subsequence between two strings
string LCS(string str1, string str2)
{
    // create a 2D table to store the lengths of longest common subsequence at each index
    int table[str1.length() + 1][str2.length() + 1];

    // initialize table with zeros
    for(int i = 0; i <= str1.length(); i++)
    {
        for(int j = 0; j <= str2.length(); j++)
        {
            table[i][j] = 0;
        }
    }

    // populate table from bottom-up
    for(int i = 1; i <= str1.length(); i++)
    {
        for(int j = 1; j <= str2.length(); j++)
        {
            // if characters at current indexes are equal, add 1 to the diagonal cell and update the current cell
            if(str1[i-1] == str2[j-1])
            {
                table[i][j] = table[i-1][j-1] + 1;
            }

            // if characters are not equal, take the maximum of the cell above and the cell to the left
            else
            {
                table[i][j] = max(table[i-1][j], table[i][j-1]);
            }
        }
    }

    // length of longest common subsequence is stored in the last cell
    int length = table[str1.length()][str2.length()];

    // create a string to store the longest common subsequence
    string lcs;

    // starting from the bottom right cell, backtrack to find the actual subsequence
    int i = str1.length(), j = str2.length();
    while(i > 0 && j > 0)
    {
        // if characters at current indexes are equal, add the character to the lcs string and move diagonally
        if(str1[i-1] == str2[j-1])
        {
            lcs = str1[i-1] + lcs;
            i--;
            j--;
        }

        // if characters are not equal, move to the cell with the higher value
        else
        {
            if(table[i-1][j] > table[i][j-1])
            {
                i--;
            }
            else
            {
                j--;
            }
        }
    }

    // return the longest common subsequence and its length
    return "Longest Common Subsequence: " + lcs + "\nLength: " + to_string(length);
}

int main()
{
    // take two input strings from user
    string str1, str2;
    cout << "Enter the first string: " << endl;
    cin >> str1;
    cout << "Enter the second string: " << endl;
    cin >> str2;

    // call the LCS function and print the result
    cout << "\nResult: " << endl << LCS(str1, str2) << endl;

    return 0;
}