// This program sorts an array using the merge sort algorithm

#include <iostream>
using namespace std;

// Function to merge two subarrays of arr[].
void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 =  right - mid;
    
    // Create temp arrays
    int L[n1], R[n2];
    
    // Copy data to temp arrays L[] and R[]
    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1+ j];
    
    // Merge the temp arrays back into arr[l..r]
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    // Copy the remaining elements of L[], if there are any
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    // Copy the remaining elements of R[], if there are any
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Function to perform merge sort
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        // Find the middle point
        int mid = left+(right-left)/2;
        
        // Sort first and second halves
        mergeSort(arr, left, mid);
        mergeSort(arr, mid+1, right);
        
        // Merge the sorted halves
        merge(arr, left, mid, right);
    }
}

// Driver code to test the program
int main() {
    // Input array
    int arr[] = {38, 27, 43, 3, 9, 82, 10};
    
    // Size of array
    int arr_size = sizeof(arr)/sizeof(arr[0]);
    
    // Call mergeSort function
    mergeSort(arr, 0, arr_size - 1);
    
    // Print sorted array
    cout << "Sorted array: ";
    for (int i = 0; i < arr_size; i++)
        cout << arr[i] << " ";
    
    return 0;
}