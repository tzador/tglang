/* This is a program to find the shortest path using Dijkstra's algorithm */
#include <iostream> 
#include <climits> 
using namespace std; 

// Number of vertices in the graph 
#define V 9 

// Function to find the index of the vertex with the minimum distance
int minDistance(int dist[], bool visited[]) 
{ 
	// Initialize minimum value 
	int min = INT_MAX, min_index; 

	for (int i = 0; i < V; i++) 
	{
		// If current vertex is not yet visited and distance is smaller than current min value
		if (visited[i] == false && dist[i] <= min) 
		{
			min = dist[i]; // Update min value
			min_index = i; // Update index of minimum value
		}
	}

	return min_index; 
} 

// Function to print the shortest path from source to destination 
void printPath(int parent[], int j, int path[]) 
{ 
	// Base case : If j is source 
	if (parent[j] == -1) 
		return; 

	printPath(parent, parent[j], path); 

	cout << "->" << j; 
	path[j]++; // Update count of visited vertices 
} 

// Function to print the shortest path from source to destination 
// using Dijkstra's algorithm
void printSolution(int dist[], int n, int parent[], int parent[], int src) 
{ 
	int path[V] = {0}; // Array to keep track of visited vertices 

	cout << "Shortest path from source " << src << " to destination " << n << " is: "; 
	printPath(parent, n, path); // Print the path from source to destination
	cout << endl; 

	// Print the number of times each vertex was visited 
	for (int i = 0; i < V; i++) 
	{
		if (i == src)
			continue;

		cout << "Vertex " << i << " was visited " << path[i] << " time(s)." << endl;
	}
} 

// Function to implement Dijkstra's algorithm for a given graph
void dijkstra(int graph[V][V], int src) 
{ 	
	int dist[V]; // Array to store the minimum distance from source to each vertex
	bool visited[V]; // Array to keep track of visited vertices 
	int parent[V]; // Array to keep track of the parent vertex of each vertex

	// Initialize all distances as INFINITE and visited array as false 
	for (int i = 0; i < V; i++) 
	{
		dist[i] = INT_MAX; 
		visited[i] = false; 
	}

	// Distance of source vertex from itself is always 0 
	dist[src] = 0;

	// Parent of source vertex is -1
	parent[src] = -1; 

	// Find shortest path for all vertices 
	for (int count = 0; count < V - 1; count++) 
	{
		// Pick the minimum distance vertex from the set of vertices not
		// yet processed.
		// u is always equal to src in first iteration. 
		int u = minDistance(dist, visited); 

		// Mark the picked vertex as visited 
		visited[u] = true; 

		// Update dist value of the adjacent vertices of the picked vertex. 
		for (int v = 0; v < V; v++) 
		{
			// Update dist[v] only if is not visited and there is an edge 
			// from u to v , and total weight of path from src to v through u is
			// smaller than current value of dist[v] 
			if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
			{
				dist[v] = dist[u] + graph[u][v]; 
				parent[v] = u; 
			}
		}
	} 

	// Print the shortest path and number of times each vertex was visited 
	printSolution(dist, V, parent, src); 
} 

// Driver program to test above function 
int main() 
{ 
	// Graph representation using adjacency matrix 
	// 0 values represent no edge between the vertices 
	int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, 
						{ 4, 0, 8, 0, 0, 0, 0, 11, 0 }, 
						{ 0, 8, 0, 7, 0, 4, 0, 0, 2 }, 
						{ 0, 0, 7, 0, 9, 14, 0, 0, 0 }, 
						{ 0, 0, 0, 9, 0, 10, 0, 0, 0 }, 
						{ 0, 0, 4, 14, 10, 0, 2, 0, 0 }, 
						{ 0, 0, 0, 0, 0, 2, 0, 1, 6 }, 
						{ 8, 11, 0, 0, 0, 0, 1, 0, 7 }, 
						{ 0, 0, 2, 0, 0, 0, 6, 7, 0 } }; 

	dijkstra(graph, 0); // Find shortest path from vertex 0 as source to all other vertices 

	return 0; 
}