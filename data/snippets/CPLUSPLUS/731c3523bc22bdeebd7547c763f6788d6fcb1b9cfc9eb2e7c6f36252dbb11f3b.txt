#include <iostream>
using namespace std;

// A class to represent a complex number
class Complex
{
private:
    int real;
    int imag;

public:
    // Constructor to initialize the complex number
    Complex(int r, int i)
    {
        real = r;
        imag = i;
    }

    // Function to add two complex numbers
    Complex operator+(Complex &number)
    {
        return Complex(real + number.real, imag + number.imag);
    }

    // Function to subtract two complex numbers
    Complex operator-(Complex &number)
    {
        return Complex(real - number.real, imag - number.imag);
    }

    // Function to multiply two complex numbers
    // using the distributive property
    Complex operator*(Complex &number)
    {
        //(a + bi)(c + di) = (ac - bd) + (ad + bc)i
        int newReal = (real * number.real) - (imag * number.imag);
        int newImag = (real * number.imag) + (imag * number.real);
        return Complex(newReal, newImag);
    }

    // Function to print the complex number in the form "a + bi"
    void print()
    {
        cout << real << " + " << imag << "i" << endl;
    }
};

int main()
{
    // Creating two complex numbers
    Complex num1(3, 4);
    Complex num2(5, 2);

    // Adding two complex numbers
    Complex sum = num1 + num2;
    cout << "Sum: ";
    sum.print();

    // Subtracting two complex numbers
    Complex diff = num1 - num2;
    cout << "Difference: ";
    diff.print();

    // Multiplying two complex numbers
    Complex product = num1 * num2;
    cout << "Product: ";
    product.print();

    return 0;
}