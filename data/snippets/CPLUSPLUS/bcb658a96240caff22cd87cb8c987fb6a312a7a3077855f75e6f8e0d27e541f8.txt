#include <iostream>  // include iostream library for input/output

using namespace std;  // use standard namespace for simplified syntax

// create a custom data structure for a 3D vector
struct Vector3 { 
    float x;  
    float y;  
    float z; 
};

int main() {  // main function
    Vector3 vec1 = {2.5f, 1.3f, -0.9f};  // define and initialize vector1
    Vector3 vec2 = {4.8f, -2.1f, 0.6f};  // define and initialize vector2
    Vector3 vec3;  // declare a new vector3 without initialization

    // output the values of vector1 and vector2 using cout from iostream library
    cout << "Vector1: (" << vec1.x << ", " << vec1.y << ", " << vec1.z << ")" << endl;
    cout << "Vector2: (" << vec2.x << ", " << vec2.y << ", " << vec2.z << ")" << endl;

    // calculate the dot product of vector1 and vector2
    float dotProduct = vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;

    // output the dot product using cout
    cout << "Dot product of Vector1 and Vector2: " << dotProduct << endl;

    // calculate the cross product of vector1 and vector2
    Vector3 crossProduct = { vec1.y * vec2.z - vec1.z * vec2.y,  // x component
                             vec1.z * vec2.x - vec1.x * vec2.z,  // y component
                             vec1.x * vec2.y - vec1.y * vec2.x }; // z component

    // output the cross product using cout
    cout << "Cross product of Vector1 and Vector2: (" << crossProduct.x << ", " 
         << crossProduct.y << ", " << crossProduct.z << ")" << endl;

    // find the magnitude of vector1 using Pythagorean theorem
    float magnitude = sqrt(pow(vec1.x, 2) + pow(vec1.y, 2) + pow(vec1.z, 2));

    // output the magnitude of vector1 using cout
    cout << "Magnitude of Vector1: " << magnitude << endl;

    return 0; // end main function
}