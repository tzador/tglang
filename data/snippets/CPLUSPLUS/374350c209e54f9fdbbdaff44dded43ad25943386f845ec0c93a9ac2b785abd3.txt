/*
This is a complex code snippet in C++ that utilizes templates, object-oriented programming, and standard libraries.

We first define a template class 'Vector' that takes in a data type.
This class handles the creation of a vector and provides methods for mathematical operations.
*/

template <typename T>
class Vector {
private:
  T* data; // pointer to dynamic array of type T
  size_t size; // number of elements in the vector

public:
  Vector<T>(size_t n) { // constructor
    size = n;
    data = new T[n]; // allocate space for n elements of type T
  }

  Vector<T>(const Vector<T>& other) { // copy constructor
    size = other.size;
    data = new T[size];
    for (int i=0; i<size; i++) {
      data[i] = other.data[i]; // copy elements from other Vector to this Vector
    }
  }

  ~Vector<T>() { // destructor
    delete[] data; // deallocate memory for dynamic array
  }

  T& operator[](size_t i) { // subscript operator overload for accessing/assigning elements in the vector
    return data[i];
  }

  /* Mathematical operations */

  Vector<T>& operator+(const Vector<T>& other) { // addition operator overload
    for (int i=0; i<size; i++) {
      data[i] += other.data[i];
    }
    return *this;
  }

  Vector<T>& operator-(const Vector<T>& other) { // subtraction operator overload
    for (int i=0; i<size; i++) {
      data[i] -= other.data[i];
    }
    return *this;
  }

  Vector<T>& operator*(const Vector<T>& other) { // dot product operator overload
    T result = 0;
    for (int i=0; i<size; i++) {
      result += data[i] * other.data[i];
    }
    return result;
  }

  /* Other methods */

  size_t getSize() const { // getter method for size
    return size;
  }

  void print() { // method for printing vector elements
    cout << "[" << data[0];
    for (int i=1; i<size; i++) {
      cout << ", " << data[i];
    }
    cout << "]";
  }
};

/*
Now we can use our Vector class to create and perform operations on vectors of different data types.
Let's create two vectors of type double and find their dot product.
*/

int main() {
  Vector<double> v1(3); // create a vector of size 3
  v1[0] = 1.2; // assign values to elements
  v1[1] = 2.4;
  v1[2] = 3.6;

  Vector<double> v2(3);
  v2[0] = 0.8;
  v2[1] = 1.6;
  v2[2] = 2.4;

  double result = v1 * v2; // perform dot product
  cout << "The result is " << result << endl; // output the result

  return 0;
}