#include <iostream>
#include <vector>

using namespace std;

// Define a class named Graph
class Graph {
    private:
        int V; // Number of vertices in the graph
        vector<vector<int>> adj; // Adjacency list to store edges
        
    public:
        // Constructor to initialize the graph with given number of vertices
        Graph(int V) {
            this->V = V;
            // Resize the adjacency list to store V vectors (one for each vertex)
            adj.resize(V);
        }
        
        // Function to add an edge between two vertices
        void addEdge(int u, int v) {
            // Add edge from u to v
            adj[u].push_back(v);
            // Since we are dealing with an undirected graph, also add edge from v to u
            adj[v].push_back(u);
        }
        
        // Function to recursively perform Depth First Search (DFS) from a given vertex
        void DFS(int v, vector<bool>& visited) {
            // Mark current vertex as visited
            visited[v] = true;
            // Print the current vertex being visited
            cout << v << " ";
            // Recursively call DFS on all adjacent vertices, if they are not visited yet
            for (int i = 0; i < adj[v].size(); i++) {
                int adj_v = adj[v][i];
                if (!visited[adj_v]) {
                    DFS(adj_v, visited);
                }
            }
        }
        
        // Function to perform Depth First Search (DFS) starting from a given vertex
        void doDFS(int start) {
            // Initialize a vector for keeping track of visited vertices
            vector<bool> visited(V, false);
            // Perform DFS from the starting vertex
            DFS(start, visited);
        }
};

// Main function
int main() {
    // Create an instance of Graph with 6 vertices
    Graph g(6);
    // Add some edges between vertices
    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(3, 4);
    g.addEdge(4, 5);
    // Perform DFS starting from vertex 2
    g.doDFS(2);
    
    return 0;
}