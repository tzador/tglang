//This is a complex function that finds the determinant of a matrix using C++
//It takes in a 2D array of doubles and the size of the matrix as parameters
double findDeterminant(double arr[][10], int size){

    //declaring variables
    double determinant = 0; //store the determinant value
    int sign = 1; //determines the sign of the current minor matrix
    int n = size-1; //size of minor matrix
    double minor[10][10]; //store the value of minor matrix

    //base case: if size of matrix is 1, determinant is the value of the only element
    if(size == 1){
        determinant = arr[0][0];
    }
    else{
        //loop through each element in the first row of the matrix
        for(int i=0; i<size; i++){

            //getting minor matrix for each element on first row
            getCofactor(arr, minor, n, 0, i); //store minor matrix in "minor" array

            //recursive call, find determinant of minor matrix
            determinant += sign * arr[0][i] * findDeterminant(minor, n);

            //change sign for next minor matrix calculation
            sign = -sign;
        }
    }

    //return the determinant value
    return determinant;
}

//This function calculates the cofactor matrix for each element in the first row of the original matrix
//Takes in the original matrix, empty minor matrix, size of minor matrix, and the row and column of the current element being calculated
void getCofactor(double arr[][10], double minor[][10], int n, int row, int col){

    //variables to keep track of current minor matrix indices
    int minorCurrentRow = 0;
    int minorCurrentCol = 0;

    //loop through each element in the original matrix
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){

            //ignore the current element's row and column
            if(i != row && j != col){
                minor[minorCurrentRow][minorCurrentCol++] = arr[i][j]; //copy element to minor matrix
                //reset minor matrix column index if end of minor matrix row is reached
                if(minorCurrentCol == n-1){
                    minorCurrentRow++;
                    minorCurrentCol = 0;
                }
            }
        }
    }
}