/*
This program uses the Quick Sort algorithm to sort
an array of integers in ascending order.
*/

#include <iostream>

using namespace std;

// Function to partition the array 
// and return the index of the pivot element
int partition(int arr[], int low, int high) 
{ 
    // Choosing the last element as the pivot element
    int pivot = arr[high]; 
    
    // Initializing the index of smaller element
    int i = (low - 1);
    
    for (int j = low; j <= high - 1; j++) {
        // If current element is smaller than or equal to pivot 
        if (arr[j] <= pivot) {
            // Incrementing the index of smaller element 
            i++;
            // Swapping the current element with the smaller element 
            swap(arr[i], arr[j]); 
        } 
    } 
    
    // Swapping the pivot element with the element at the (i+1)th position 
    swap(arr[i + 1], arr[high]); 
    // Returning the index of the pivot element 
    return (i + 1); 
} 

// Function to implement Quick Sort algorithm 
void quickSort(int arr[], int low, int high) 
{ 
    if (low < high) {
        // Partitioning the array 
        int pivot = partition(arr, low, high); 
        
        // Sorting the left subarray 
        quickSort(arr, low, pivot - 1); 
        // Sorting the right subarray 
        quickSort(arr, pivot + 1, high); 
    } 
} 

// Function to print the array 
void printArray(int arr[], int size) 
{ 
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " "; 
    } 
    cout << endl; 
} 

// Driver code 
int main() 
{ 
    // Initializing the array 
    int arr[] = {4, 2, 1, 8, 3, 5, 9}; 
    // Calculating the size of the array 
    int size = sizeof(arr) / sizeof(arr[0]); 
    
    // Printing the unsorted array 
    cout << "Unsorted array: "; 
    printArray(arr, size); 
    
    // Calling the Quick Sort function 
    quickSort(arr, 0, size - 1); 
    
    // Printing the sorted array 
    cout << "Sorted array: "; 
    printArray(arr, size); 
    
    return 0; 
}