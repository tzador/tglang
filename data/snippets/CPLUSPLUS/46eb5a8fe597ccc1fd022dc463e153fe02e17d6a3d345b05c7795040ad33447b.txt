// This code snippet demonstrates the implementation of a binary search tree in C++

#include <iostream>

using namespace std;

// Define a structure for a node in the binary search tree
struct Node {
    int data; // Data to be stored in the node
    Node* left; // Pointer to the left child node
    Node* right; // Pointer to the right child node
};

// Function to create a new node in the binary search tree
Node* newNode(int data){
    Node* node = new Node(); // Allocate memory for the new node
    node->data = data; // Assign data to the new node
    node->left = node->right = nullptr; // Set the child pointers to null
    return node; // Return the new node
}

// Function to insert a new node in the binary search tree
Node* insertNode(Node* root, int data){
    if (root == nullptr) { // Check if the root is null
        return newNode(data); // If so, create a new node with the given data
    }

    if (data < root->data) { // If the data is less than the data in the root node
        root->left  = insertNode(root->left, data); // Recursively insert the node in the left subtree
    }
    else if (data > root->data) { // If the data is greater than the data in the root node
        root->right  = insertNode(root->right, data); // Recursively insert the node in the right subtree
    }

    return root; // Return the root node
}

// Function to search for a key in the binary search tree
Node* searchNode(Node* root, int key){
    if (root == nullptr || root->data == key) { // If the root is null or if the root node contains the key value
        return root; // Return the root node
    }

    if (key < root->data) { // If the key is less than the data in the root node
        return searchNode(root->left, key); // Recursively search in the left subtree
    }

    return searchNode(root->right, key); // Otherwise, recursively search in the right subtree
}

// Driver code to test the binary search tree implementation
int main(){
    Node* root = nullptr; // Initialize the root node to null

    // Insert nodes in the binary search tree
    root = insertNode(root, 50);
    root = insertNode(root, 30);
    root = insertNode(root, 20);
    root = insertNode(root, 40);
    root = insertNode(root, 70);
    root = insertNode(root, 60);
    root = insertNode(root, 80);

    // Search for a key in the binary search tree
    int key = 40;
    Node* resultNode = searchNode(root, key);
    if (resultNode != nullptr) {
        cout << "Node with key " << key << " is found\n";
    }
    else {
        cout << "Node with key " << key << " is not found\n";
    }

    return 0;
}