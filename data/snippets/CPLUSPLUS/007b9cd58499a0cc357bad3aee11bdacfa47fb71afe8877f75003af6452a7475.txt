// This code snippet is a function that implements the quicksort algorithm to sort an array of integers
// It takes in three parameters - the array to be sorted, the starting index, and the ending index
// Partitions the array using the last element as pivot, then recursively calls itself to sort the two partitions
// At the end, the array will be sorted in ascending order
void quicksort(int arr[], int low, int high) {

    // Base case: If the starting index is larger than the ending index, there's no need to sort
    if (low >= high) {
        return;
    }

    // Choose the last element as the pivot
    int pivot = arr[high];

    // Index to keep track of the smaller elements
    int i = low - 1; 

    // Traverse the array from low to high
    for (int j = low; j < high; j++) {

        // If current element is smaller than or equal to pivot
        if (arr[j] <= pivot) {

            // Increment i and swap the values at i and j
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // Put the pivot in its correct position by swapping with the element at i+1
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    // Recursively call quicksort on the two subarrays
    quicksort(arr, low, i);
    quicksort(arr, i + 2, high);
}