// This code snippet is a complex sorting algorithm called quicksort
// It takes in an unsorted integer array and sorts it in ascending order
// The algorithm uses a divide and conquer approach to recursively sort the array
// Time complexity: O(nlogn)

int partition(int arr[], int low, int high) 
{ 
    int pivot = arr[high]; //pivot element, can be chosen randomly
    int i = (low - 1); 
  
    for (int j = low; j <= high - 1; j++) { 
        if (arr[j] < pivot) { 
            i++; 
            // Swap arr[i] and arr[j]
            int temp = arr[i]; 
            arr[i] = arr[j]; 
            arr[j] = temp; 
        } 
    } 
    // Swap arr[i + 1] and arr[high]
    int temp = arr[i + 1]; 
    arr[i + 1] = arr[high]; 
    arr[high] = temp; 
    return (i + 1); 
} 
  
void quicksort(int arr[], int low, int high) 
{ 
    if (low < high) { 
        // partition the array 
        int pivot = partition(arr, low, high); 
  
        // recursively sort left and right subarrays 
        quicksort(arr, low, pivot - 1); 
        quicksort(arr, pivot + 1, high); 
    } 
} 

int main() 
{ 
    int arr[] = { 7, 2, 9, 5, 1, 6, 3 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    // sort the array using quicksort
    quicksort(arr, 0, n - 1); 
    
    // print the sorted array
    for (int i = 0; i < n; i++) { 
        cout << arr[i] << " "; 
    } 
    return 0; 
}