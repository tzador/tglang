#include <iostream>       //standard library for input/output
#include <vector>         //standard library for dynamic array
using namespace std;      //using standard namespace for simplification

template <class T>        //declaring a template for generic type T
int binarySearch(vector<T> array, T target) {  //function to perform binary search
    int low = 0;          //initialize lower bound
    int high = array.size() - 1;   //initialize upper bound
    int mid;            //declaring variable for middle index

    while (low <= high) {    //loop until lower bound is less than or equal to the upper bound
        mid = (low + high) / 2;    //calculate middle index
        if (array[mid] == target) {     //check if target is at middle index
            return mid;         //if yes, return middle index
        }
        else if (array[mid] < target) {   //check if target is greater than middle element
            low = mid + 1;        //update lower bound
        }
        else {            //if target is smaller than middle element
            high = mid - 1;        //update upper bound
        }
    }
    return -1;          //if target is not found, return -1
}

int main() {            //main function
    vector<int> numbers = {2, 5, 7, 10, 15, 20};    //initialize vector of integers
    int target = 15;     //initialize target element
    int result = binarySearch(numbers, target);     //call binary search function
    if (result == -1) {    //check if target was not found
        cout << "Target not found";        //print message
    }
    else {          //if target was found
        cout << "Target found at index " << result;    //print index where target was found
    }
    return 0;      //return 0 to indicate successful execution
}