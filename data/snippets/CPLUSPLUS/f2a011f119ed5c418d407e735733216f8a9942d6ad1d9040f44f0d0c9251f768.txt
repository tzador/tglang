// Code to find prime numbers using Sieve of Eratosthenes algorithm 
#include <iostream> 
#include <vector> 

using namespace std; 

// Function to generate prime numbers 
// Takes in a limit and returns a vector of primes 
vector<int> sieveOfEratosthenes(int limit) 
{ 
    // Initialize a vector to store prime numbers 
    vector<int> primes; 
    // Initialize a boolean array to store whether a number is prime or not 
    bool primeNumbers[limit + 1]; 
    // Set all values in the array to true 
    memset(primeNumbers, true, sizeof(primeNumbers)); 

    // Loop through all numbers from 2 to the limit 
    for (int i = 2; i <= limit; i++) { 
        // If the current number is still marked as prime 
        if (primeNumbers[i] == true) { 
            // Add it to the vector of primes 
            primes.push_back(i); 
            // Set all multiples of the current prime number to false 
            for (int j = i * i; j <= limit; j += i) 
                primeNumbers[j] = false; 
        } 
    } 

    // Return the vector of prime numbers 
    return primes; 
} 

int main() 
{ 
    // Get input for the limit 
    int limit; 
    cout << "Enter the limit: "; 
    cin >> limit; 

    // Generate the vector of prime numbers 
    vector<int> primes = sieveOfEratosthenes(limit); 

    // Print the prime numbers 
    cout << "The prime numbers below " << limit << " are: "; 
    for (int i = 0; i < primes.size(); i++) 
        cout << primes[i] << " "; 

    return 0; 
}