//This is a program to perform quicksort
//Function to partition the array
int partition(int arr[], int low, int high) 
{ 
    int pivot = arr[high]; //pivot element at the end
    int i = (low - 1); //Index of smaller element 

    for (int j = low; j <= high - 1; j++) 
    { 
        //If current element is smaller than or equal to pivot 
        if (arr[j] <= pivot) 
        { 
            i++; //increment index of smaller element 
            swap(arr[i], arr[j]); //swap elements at i and j 
        } 
    } 
    swap(arr[i + 1], arr[high]); //swap pivot element with element at i+1 
    return (i + 1); //return index of pivot element
} 

//Function to implement quicksort
void quickSort(int arr[], int low, int high) 
{ 
    if (low < high) 
    { 
        //pi is partitioning index, arr[p] is now at right place 
        int pi = partition(arr, low, high); 

        //Separately sort elements before partition and after partition
        quickSort(arr, low, pi - 1); 
        quickSort(arr, pi + 1, high); 
    } 
} 

//Driver code to test above functions 
int main() 
{ 
    int arr[] = {34, 68, 92, 15, 61, 31, 10}; //Input array 
    int n = sizeof(arr) / sizeof(arr[0]); //Size of array
    quickSort(arr, 0, n - 1); //Call quicksort function 
    cout << "Sorted array: "; 
    for (int i = 0; i < n; i++) 
        cout << arr[i] << " "; 
    return 0; 
}