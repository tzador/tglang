#include <iostream>  // include input/output stream library
using namespace std;  // use standard namespace

struct Node {  // define a structure to represent a node in a binary tree
    int data;  // store integer data in each node
    Node* left;  // pointer to left child node
    Node* right;  // pointer to right child node
};

class BinaryTree {  // define a class to represent a binary tree
private:
    Node* root;  // pointer to the root node of the tree
public:
    BinaryTree() {  // constructor to initialize the tree with an empty root node
        root = NULL;  // set root to NULL
    }

    void insert(int data) {  // function to insert a new node in the tree
        Node* newNode = new Node();  // dynamically allocate memory for new node
        newNode->data = data;  // assign data to new node
        newNode->left = NULL;  // set left child to NULL
        newNode->right = NULL;  // set right child to NULL

        if (root == NULL) {  // if tree is empty, set new node as root
            root = newNode;
        }
        else {  // if tree is not empty, traverse the tree to find appropriate position for node insertion
            Node* current = root;  // start from root
            while (true) {
                if (data < current->data) {  // if data is less than current node's data
                    if (current->left == NULL) {  // and current node's left child is NULL
                        current->left = newNode;  // set new node as left child
                        break;  // exit while loop
                    }
                    else {  // if current node's left child is not NULL
                        current = current->left;  // move to left child
                    }
                }
                else {  // if data is greater than or equal to current node's data
                    if (current->right == NULL) {  // and current node's right child is NULL
                        current->right = newNode;  // set new node as right child
                        break;  // exit while loop
                    }
                    else {  // if current node's right child is not NULL
                        current = current->right;  // move to right child
                    }
                }
            }
        }
    }

    void printInorder(Node* node) {  // function to print the tree in inorder traversal
        if (node != NULL) {  // if node is not NULL
            printInorder(node->left);  // recursively print left subtree
            cout << node->data << " ";  // print current node's data
            printInorder(node->right);  // recursively print right subtree
        }
    }
};

int main() {
    // create a binary tree object
    BinaryTree tree;

    // insert new nodes in the tree
    tree.insert(10);
    tree.insert(5);
    tree.insert(15);
    tree.insert(3);
    tree.insert(7);

    // print the tree in inorder traversal
    tree.printInorder(tree.getRoot());

    return 0;
}