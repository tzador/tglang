// This is a C++ code snippet for a binary search function

/*
 * function name: binarySearch
 * input: arr - the array to be searched
 *		  left - starting index of the array
 *		  right - ending index of the array
 *		  key - the element to be searched for
 * output: index of key if found, -1 if not found
 */
int binarySearch(int arr[], int left, int right, int key)
{
	// base case - if left index is greater than right index, key is not present in the array
	if (left > right) {
		return -1;
	}

	// calculate the middle index and check if key is present at that index
	int mid = left + (right - left) / 2;

	if (arr[mid] == key) {
		return mid;
	}
	// if key is smaller than the element at middle index, search in the left subarray
	else if (key < arr[mid]) {
		return binarySearch(arr, left, mid - 1, key);
	}
	// if key is greater than the element at middle index, search in the right subarray
	else {
		return binarySearch(arr, mid + 1, right, key);
	}
}

// sample array for testing
int arr[] = { 2, 5, 8, 10, 15, 20 };

// key to be searched for
int key = 10;

// calculate the size of the array
int size = sizeof(arr) / sizeof(arr[0]);

// call the binarySearch function to search for key in the array
int index = binarySearch(arr, 0, size - 1, key);

// print the result - index of key if found, -1 if not found
cout << "Index of key 10: " << index << endl;