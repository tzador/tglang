//This is a complex code snippet in C++
#include <iostream>

//Define a template function to find the maximum value
template <typename T>
T max(T a, T b){
    return (a > b) ? a : b;
}

//Create a class named "Complex" that contains two private variables
class Complex {
    double real;
    double imag;
public:
    //Default constructor
    Complex() {
        real = 0;
        imag = 0;
    }

    //Parameterized constructor
    Complex(double r, double i) {
        real = r;
        imag = i;
    }

    //Overloading "+" operator
    Complex operator+(Complex const &c) {
        Complex temp;
        temp.real = real + c.real;
        temp.imag = imag + c.imag;
        return temp;
    }

    //Overloading "-" operator
    Complex operator-(Complex const &c) {
        Complex temp;
        temp.real = real - c.real;
        temp.imag = imag - c.imag;
        return temp;
    }

    //Overloading "*" operator
    Complex operator*(Complex const &c) {
        Complex temp;
        temp.real = (real * c.real) - (imag * c.imag);
        temp.imag = (real * c.imag) + (imag * c.real);
        return temp;
    }

    //Overloading "<<" operator
    friend std::ostream& operator<<(std::ostream &out, const Complex &c) {
        out << c.real;
        if (c.imag >= 0)
            out << "+";
        out << c.imag << "i";
        return out;
    }
};

//Main function
int main()
{
    //Create two Complex objects using parameterized constructor
    Complex c1(5, 2);
    Complex c2(3, -1);

    //Print the values of c1 and c2
    std::cout << "Complex 1: " << c1 << "\n";
    std::cout << "Complex 2: " << c2 << "\n";

    //Call the max function to find the maximum value
    std::cout << "Maximum: " << max(c1, c2) << "\n";

    //Perform arithmetic operations on the Complex objects
    Complex sum = c1 + c2;
    Complex diff = c1 - c2;
    Complex prod = c1 * c2;

    //Print the results of the arithmetic operations
    std::cout << "Sum: " << sum << "\n";
    std::cout << "Difference: " << diff << "\n";
    std::cout << "Product: " << prod << "\n";

    return 0;
}