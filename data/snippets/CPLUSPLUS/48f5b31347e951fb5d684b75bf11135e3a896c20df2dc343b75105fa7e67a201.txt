#include <iostream> //include necessary libraries
using namespace std; //use the standard namespace

//create a class called Shape
class Shape {
    private:
        int length; //private attribute for length
        int width;  //private attribute for width

    public: 
        Shape(); //default constructor
        Shape(int l, int w); //parametrized constructor

        //setter method for length
        void setLength(int l) {
            length = l;
        }

        //getter method for length
        int getLength() {
            return length;
        }

        //setter method for width
        void setWidth(int w) {
            width = w;
        }

        //getter method for width
        int getWidth() {
            return width;
        }

        //defining a virtual function for calculating area
        virtual float calculateArea() {
            cout << "Calculating the area of a shape..." << endl;
            return 0; //default area for a shape
        }

        //defining a virtual function for calculating perimeter
        virtual float calculatePerimeter() {
            cout << "Calculating the perimeter of a shape..." << endl;
            return 0; //default perimeter for a shape
        }
};

//implementing default constructor
Shape::Shape() {
    length = 0;
    width = 0;
}

//implementing parametrized constructor
Shape::Shape(int l, int w) {
    length = l;
    width = w;
}

//create a class called Rectangle which inherits from Shape
class Rectangle : public Shape {
    public:
        Rectangle(int l, int w) : Shape(l, w) {}; //calling parametrized constructor of base class

        //overriding calculateArea function for rectangle
        float calculateArea() override {
            cout << "Calculating the area of a rectangle..." << endl;
            return getLength() * getWidth(); //calculate the area of a rectangle using private attributes of Shape
        }

        //overriding calculatePerimeter function for rectangle
        float calculatePerimeter() override {
            cout << "Calculating the perimeter of a rectangle..." << endl;
            return 2 * (getLength() + getWidth()); //calculate the perimeter of a rectangle using private attributes of Shape
        }
};

//create a class called Circle which inherits from Shape
class Circle : public Shape {
    private:
        float radius; //private attribute for radius
    public:
        Circle(int r) : radius(r) {}; //calling parametrized constructor of base class

        //setter method for radius
        void setRadius(int r) {
            radius = r;
        }

        //getter method for radius
        float getRadius() {
            return radius;
        }

        //overriding calculateArea function for circle
        float calculateArea() override {
            cout << "Calculating the area of a circle..." << endl;
            return 3.14 * radius * radius; //calculate the area of a circle using private attribute of Circle
        }

        //overriding calculatePerimeter function for circle
        float calculatePerimeter() override {
            cout << "Calculating the perimeter of a circle..." << endl;
            return 2 * 3.14 * radius; //calculate the perimeter of a circle using private attribute of Circle
        }
};

int main() {
    //create an instance of Rectangle
    Rectangle rect(5, 10);

    //create an instance of Circle
    Circle cir(7);

    //calculate and print the area of rectangle
    cout << "Area of rectangle: " << rect.calculateArea() << endl;

    //calculate and print the perimeter of rectangle
    cout << "Perimeter of rectangle: " << rect.calculatePerimeter() << endl;

    //calculate and print the area of circle
    cout << "Area of circle: " << cir.calculateArea() << endl;

    //calculate and print the perimeter of circle
    cout << "Perimeter of circle: " << cir.calculatePerimeter() << endl;

    return 0;
}