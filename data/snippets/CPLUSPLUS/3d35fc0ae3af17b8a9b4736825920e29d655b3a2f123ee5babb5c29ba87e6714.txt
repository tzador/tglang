// This is a complex algorithm that implements the Radix Sort method
// for sorting an array of integers in ascending order

#include <iostream>
using namespace std;

// Function to find the maximum element in the given array
int findMax(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

// Function to perform counting sort on the given array based on the
// place value represented by exp (determines the digit to be sorted)
void countSort(int arr[], int n, int exp) {
    int output[n]; // output array
    int i, count[10] = {0};

    // Store count of occurrences in count[]
    for (i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;

    // Change count[i] so that count[i] now contains actual
    // position of this digit in output[]
    for (i = 1; i < 10; i++)
        count[i] += count[i - 1];

    // Build the output array
    for (i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    // Copy the output array to the original array
    for (i = 0; i < n; i++)
        arr[i] = output[i];
}

// Function to perform radix sort on the given array
void radixSort(int arr[], int n) {
    // Find the maximum element in the given array
    int max = findMax(arr, n);

    // Perform counting sort for every digit based on its place value
    // starting from the least significant digit to the most significant digit
    for (int exp = 1; max / exp > 0; exp *= 10)
        countSort(arr, n, exp);
}

// Driver function to test the algorithm
int main() {
    int arr[] = { 170, 45, 75, 90, 802, 24, 2, 66 };
    int n = sizeof(arr) / sizeof(arr[0]);

    // Sort the given array using radix sort
    radixSort(arr, n);

    // Print the sorted array
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;

    return 0;
}