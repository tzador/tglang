message Person { //Defines the message type
  string name = 1; //Adds a field to the message with an identifier of 1
  int32 id = 2; //Adds a field to the message with an identifier of 2
  string email = 3; //Adds a field to the message with an identifier of 3

  enum PhoneType { //Defines an enum type for the phone number
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  message PhoneNumber { //Defines a nested message type for phone number
    string number = 1; //Adds a field to the nested message with an identifier of 1
    PhoneType type = 2; //Adds a field to the nested message with an identifier of 2
  }

  repeated PhoneNumber phones = 4; //Adds a repeated field to the message with an identifier of 4

  enum EmploymentStatus { //Defines an enum type for employment status
    FULL_TIME = 0;
    PART_TIME = 1;
    CONTRACTOR = 2;
  }

  message JobTitle { //Defines a nested message type for job title
    string title = 1; //Adds a field to the nested message with an identifier of 1
    EmploymentStatus status = 2; //Adds a field to the nested message with an identifier of 2
  }

  repeated JobTitle jobs = 5; //Adds a repeated field to the message with an identifier of 5
}

//Example usage:
Person person = Person { //Creates a new Person object
  name: "John Smith", //Sets the name field to "John Smith"
  id: 12345, //Sets the id field to 12345
  email: "johnsmith@example.com", //Sets the email field to "johnsmith@example.com"
  phones: [ //Sets the phones field to an array of phone numbers
    {number: "123-456-7890", type: Person.PhoneType.MOBILE}, //Adds a phone number with type MOBILE to the array
    {number: "555-555-5555", type: Person.PhoneType.HOME} //Adds a phone number with type HOME to the array
  ],
  jobs: [ //Sets the jobs field to an array of job titles
    {title: "Software Engineer", status: Person.EmploymentStatus.FULL_TIME}, //Adds a job title with status FULL_TIME to the array
    {title: "Web Developer", status: Person.EmploymentStatus.CONTRACTOR} //Adds a job title with status CONTRACTOR to the array
  ]
}

//Serializing and deserializing:
bytes serialized_person = person.SerializeAsString(); //Serializes the Person object into bytes
Person deserialized_person = Person.parseFrom(serialized_person); //Deserializes the bytes into a new Person object