// define a proto message for a person
message Person {
  string name = 1; // field for name, with tag number 1
  int32 age = 2; // field for age, with tag number 2
  repeated string hobbies = 3; // repeated field for hobbies, with tag number 3
  bool is_married = 4; //field for marital status, with tag number 4
  Address address = 5; // field for nested message Address, with tag number 5

  enum EducationLevel { // enum for education level, starts with 0
    NONE = 0; // no education
    HIGH_SCHOOL = 1; // high school education
    BACHELORS = 2; // bachelor's degree
    MASTERS = 3; // master's degree
    PHD = 4; // doctoral degree
  }

  EducationLevel education = 6; // field for education level, with tag number 6

  oneof job_info { // oneof for job information, can only have one field
    string job_title = 7; // field for job title, with tag number 7
    int32 salary = 8; // field for salary, with tag number 8
  }
}

// define a proto message for an address
message Address {
  string street = 1; // field for street, with tag number 1
  string city = 2; // field for city, with tag number 2
  string state = 3; // field for state, with tag number 3
  int32 zip_code = 4; // field for zip code, with tag number 4
}

// create an instance of the Person message
Person person = Person { 
  name: "John Doe", 
  age: 30, 
  hobbies: ["reading", "hiking", "coding"], 
  is_married: true, 
  address: Address { 
    street: "123 Main St", 
    city: "New York City", 
    state: "NY", 
    zip_code: 12345 
  }, 
  education: Person.EducationLevel.BACHELORS, 
  job_info: job_title: "Software Developer" // set job title field in oneof
};

// create a binary-encoded byte array of the Person message
bytes personBytes = person.toByteArray();

// decode the byte array back into a Person message
Person decodedPerson = Person.parseFrom(personBytes);