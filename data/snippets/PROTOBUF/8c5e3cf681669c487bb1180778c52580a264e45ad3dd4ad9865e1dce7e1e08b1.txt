syntax = "proto3";

/* This is a complex message type that represents a company's employee
information. */

message Employee {
    string first_name = 1; // The employee's first name
    string last_name = 2; // The employee's last name
    int32 employee_id = 3; // The employee's unique identifier
    string department = 4; // The department the employee works in
    repeated string phone_numbers = 5; // A list of the employee's phone numbers
    repeated string email_addresses = 6; // A list of the employee's email addresses

    /* This is a nested message type that represents a project the employee
    is assigned to. */
    message Project {
        string project_name = 1; // The name of the project
        int32 project_number = 2; // The project's unique identifier
        string project_description = 3; // A description of the project
    }

    repeated Project projects = 7; // A list of projects the employee is assigned to
    map<string, string> skills = 8; // A map of the employee's skills and their proficiency levels
    bool is_manager = 9; // Boolean value indicating if the employee is a manager or not
}

/* This is an enum type for the different departments within a company
that an employee could work in. */

enum Department {
    SALES = 0;
    MARKETING = 1;
    ENGINEERING = 2;
    FINANCE = 3;
    HR = 4;
}

/* This is a message type that represents a company's financial report. */

message FinancialReport {
    string company_name = 1; // The name of the company
    int32 year = 2; // The year the report is for
    double revenue = 3; // The company's total revenue
    double expenses = 4; // The company's total expenses
    double net_income = 5; // The company's net income
}

/* This is a service type that allows for querying employee information. */

service EmployeeService {
    /* This is a RPC method that returns a specific employee's information
    based on their employee ID. */

    rpc GetEmployee (EmployeeRequest) returns (EmployeeResponse);

    /* This is a RPC method that returns a list of all employees within a
    specified department. */

    rpc GetEmployeesByDepartment (DepartmentRequest) returns (EmployeesByDepartmentResponse);
}