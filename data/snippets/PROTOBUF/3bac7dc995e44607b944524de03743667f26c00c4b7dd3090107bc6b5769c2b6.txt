syntax = "proto3"; // specifies the syntax of the protocol buffer language being used

package team; // specifies the name of the package

import "github.com/golang/protobuf/proto"; // imports the protobuf package from the specified location

message Player { // defines a message called Player
  string name = 1; // adds a field called "name" with a field number of 1
  int32 jersey_number = 2; // adds another field for the player's jersey number
  repeated string positions = 3; // adds a repeated field for the player's positions on the field
  enum PositionType { // creates an enum for the different types of positions
    GOALKEEPER = 0;
    DEFENDER = 1;
    MIDFIELDER = 2;
    FORWARD = 3;
  }
  PositionType preferred_position = 4; // adds a field for the player's preferred position, which can only have one of the enum values
  map<string, int32> statistics = 5; // adds a map field for the player's statistics, where the key is a string and the value is an integer
}

message Team { // defines a message called Team
  string name = 1; // adds a field for the team's name
  repeated Player players = 2; // adds a repeated field for all the players on the team
  // other fields for team information can be added here
}

service TeamService { // defines a service called TeamService
  rpc AddPlayer (Player) returns (Team) {} // defines a remote procedure call (RPC) called AddPlayer which takes in a Player message and returns a Team message
  rpc GetTeamByName (string) returns (Team) {} // defines another RPC called GetTeamByName which takes in a string and returns a Team message
  // other RPCs for managing teams can be added here
}

message League {
  string name = 1;
  repeated Team teams = 2;
  bytes logo = 3;
  map<string, string> season_schedule = 4;
}

// more messages and services can be defined here for a more comprehensive use case
// including nested messages, custom options, and more complex data types