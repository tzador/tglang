syntax = "proto3";

// This is a message that represents a person.
message Person {
  // Unique identifier for the person.
  int32 id = 1;

  // Full name of the person.
  string name = 2;

  // Email address of the person.
  string email = 3;

  // Phone number of the person.
  string phone_number = 4;

  // List of addresses for the person.
  repeated Address addresses = 5;

  // A map of the person's hobbies.
  map<string, Hobby> hobbies = 6;

  // Custom options for the person.
  extensions 100 to 199;
}

// This is a sub-message that represents an address.
message Address {
  // Street number and name of the address.
  string street = 1;

  // City of the address.
  string city = 2;

  // State of the address.
  string state = 3;

  // Zip code of the address.
  int32 zip_code = 4;
}

// This is a nested message that represents a hobby.
message Hobby {
  // Name of the hobby.
  string name = 1;

  // Description of the hobby.
  string description = 2;
}

// This is an example enum that represents relationship statuses.
enum RelationshipStatus {
  UNKNOWN = 0;
  SINGLE = 1;
  MARRIED = 2;
  DIVORCED = 3;
}

// This is a service that handles CRUD operations for person data.
service PersonService {
  // Retrieves a person by their unique identifier.
  rpc GetPersonById (PersonByIdRequest) returns (Person) {}

  // Creates a new person.
  rpc CreatePerson (CreatePersonRequest) returns (CreatePersonResponse) {}

  // Updates an existing person.
  rpc UpdatePerson (UpdatePersonRequest) returns (UpdatePersonResponse) {}

  // Deletes an existing person.
  rpc DeletePerson (DeletePersonRequest) returns (DeletePersonResponse) {}
}