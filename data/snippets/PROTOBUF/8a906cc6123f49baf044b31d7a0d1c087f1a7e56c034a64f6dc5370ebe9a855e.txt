// Define a message type called Person
message Person {
  string name = 1;  // Unique field number and field type
  int32 age = 2;    // Field definition with default value
  Address address = 3;  // Field definition of type 'Address'
  repeated PhoneNumber phones = 4; // Field definition with repeated values
  enum Gender {  // Enum definition with possible values
    UNKNOWN = 0;
    MALE = 1;
    FEMALE = 2;
  }
  Gender gender = 5; // Field definition of type 'Gender'
  map<string, Hobby> hobbies = 6; // Field definition of type 'map'
}

// Define a message type called Address
message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string postal_code = 4;
}

// Define a message type called PhoneNumber
message PhoneNumber {
  string number = 1;
}

// Define a message type called Hobby
message Hobby {
  string name = 1;
}

// Define a field options for the Person message
extend Person {
  optional string occupation = 7 [default = "None"]; // Field option with default value
}

// Write a new person to a file
Person newPerson = Person {
  name: "John Smith",
  age: 25,
  address: {
    street: "123 Main St.",
    city: "New York City",
    state: "NY",
    postal_code: "10001"
  },
  phones: [
    {number: "555-5555"},
    {number: "111-1111"}
  ],
  gender: MALE,
  hobbies: {
    "reading": {
      name: "Reading"
    },
    "sports": {
      name: "Sports"
    }
  },
  occupation: "Software Engineer"
};

// Serialize the person to a byte array
bytes serializedPerson = newPerson.SerializeToString();

// Write the byte array to a file
outputFile.write(serializedPerson); // Example of using the serialized data