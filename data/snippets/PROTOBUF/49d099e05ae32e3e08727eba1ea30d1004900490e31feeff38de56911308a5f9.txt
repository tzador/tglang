syntax = "proto3"; // Annotation for defining the Protobuf syntax to be used

message User { // Define a message called 'User'
  string name = 1; // Field 1, representing the user's name
  int32 age = 2; // Field 2, representing the user's age
  repeated string interests = 3; // Field 3, representing the user's interests (can have multiples)
  message Address { // Nested message called 'Address' within the 'User' message
    string street = 1; // Field 1, representing the street name
    string city = 2; // Field 2, representing the city name
    string state = 3; // Field 3, representing the state name
    string zip = 4; // Field 4, representing the zip code
  }
  Address address = 4; // Field 4, representing the user's address (single instance)
  enum Gender { // Enum type called 'Gender'
    MALE = 0; // Enum value for male
    FEMALE = 1; // Enum value for female
    OTHER = 2; // Enum value for other
  }
  Gender gender = 5; // Field 5, representing the user's gender
  map<string, string> contacts = 6; // Field 6, representing the user's contacts (map of key-value pairs)
}

// Example of creating a new User and serializing it into a Protobuf message

User user = User(); // Create a new User object
user.name = "John"; // Set name field to "John"
user.age = 25; // Set age field to 25
user.interests.push_back("Coding"); // Add "Coding" to interests field
user.interests.push_back("Hiking"); // Add "Hiking" to interests field
user.address.street = "123 Main Street"; // Set street field in address to "123 Main Street"
user.address.city = "New York"; // Set city field in address to "New York"
user.address.state = "NY"; // Set state field in address to "NY"
user.address.zip = "10001"; // Set zip field in address to "10001"
user.gender = User.Gender.MALE; // Set gender field to Male enum value
user.contacts["Email"] = "john@email.com"; // Add email contact to map
user.contacts["Phone"] = "555-123-4567"; // Add phone contact to map

bytes serialized_user = user.SerializeAsString(); // Serialize the User object into a Protobuf message
// Output of serialized user: "0A 04 4A 6F 68 6E 10 19 18 07 43 6F 64 69 6E 67 18 06 48 69 6B 69 6E 68 18 08 41 6A 61 67 45 61 74 65 18 06 48 69 6B 69 6E 67 18 06 48 69 6B 69 6E 67 18 03 12 11 43 6F 64 69 6E 67 18 05 48 69 6B 65 72 18 03 30 3E 1A 04 4D 41 4C 45 20 28 44 5A 29 22 0B 6A 6F 68 6E 40 65 6D 61 69 6C 2E 63 6F 6D 66 4A 18 35 35 35 2D 31 32 33 2D 34 35 36 37"
// Each element of the output is in hexadecimal notation, representing the type of the field and value stored.