// Annotated markdown code snippets allow for easy documentation.
 
// This is a sample .proto file used in the Protobuf language.
 
// You can define multiple messages in this file, which will be represented as data structures.
// Each message can have multiple fields, with different data types.
 
syntax = "proto3"; // Defines the protocol version of Protobuf to be used
 
// This message defines the structure of a car and its details.
message Car {
  string make = 1; // A string field with a tag number of 1.
  string model = 2; // Another string field with a tag number of 2.
  int32 year = 3; // An integer field with a tag number of 3.
  float speed = 4; // A float field with a tag number of 4.
  bool isAutomatic = 5; // A boolean field with a tag number of 5.
  bytes vin = 6; // A bytes field with a tag number of 6.
  CarType type = 7; // A nested message field with a tag number of 7, representing the type of car.
  repeated string features = 8; // A repeated field of strings with a tag number of 8, representing the features of the car.
}
 
// This message defines the different types of cars.
message CarType {
  enum Type {
    SEDAN = 0; // Possible values for the CarType enum.
    SUV = 1;
    TRUCK = 2;
  }
}
 
// This message is annotated as a service, indicating that it defines an RPC service.
service CarService {
  // Defines the RPC method for getting a car's details.
  rpc GetCarDetails (CarDetailsRequest) returns (Car) {}
}
 
// This message defines the request for getting a car's details, specifying the fields to be included in the response.
message CarDetailsRequest {
  string make = 1; // A string field with a tag number of 1.
  string model = 2; // Another string field with a tag number of 2.
  int32 year = 3; // An integer field with a tag number of 3.
  bool includeFeatures = 4; // A boolean field with a tag number of 4, indicating whether to include the features of the car in the response.
}
 
// This message is annotated as an enumeration, indicating that it defines a set of constant values.
enum FuelType {
  GAS = 0; // Possible values for the FuelType enum.
  DIESEL = 1;
  HYBRID = 2;
  ELECTRIC = 3;
}
 
// This message defines a union field, which allows for one of multiple data types to be used.
message Engine {
  oneof type { // Specifies the name of the union field.
    int32 cylinders = 1; // An integer field for the engine's number of cylinders.
    FuelType fuel = 2; // A nested enum field for the type of fuel used.
  }
}
 
// This message is annotated as a map, indicating that it represents a key-value map.
message ColorMap {
  map<string, Color> colors = 1; // A map field with a tag number of 1, mapping strings to Color values.
}
 
// This message defines a nested message, which can be used within other messages.
message Color {
  string name = 1; // A string field with a tag number of 1, representing the name of the color.
}