syntax = "proto2";     // specify syntax version

/* import necessary packages */

import "google/protobuf/descriptor.proto";     // package for handling descriptors

/* define message type */

message Person {     // message type named Person
  required string name = 1;     // required field with name and tag number
  required int32 age = 2;     // required field with int32 type and tag number
  optional string address = 3;     // optional field with name and tag number
}

/* define enum type */

enum PhoneType {     // enum type named PhoneType
  MOBILE = 0;     // enum value with name and index
  HOME = 1;     // enum value with name and index
  WORK = 2;     // enum value with name and index
}

/* define message type with nested message */

message PhoneNumber {     // message type named PhoneNumber
  required string number = 1;     // required field with name and tag number
  optional PhoneType type = 2 [default = HOME];     // optional field with enum type and default value
}

message PhoneBook {     // message type named PhoneBook
  required Person person = 1;     // required field with message type and tag number
  repeated PhoneNumber phone = 2;     // repeated field with message type and tag number
}

/* define package and options */

package tutorial;     // specify package name

option java_package = "com.example.protobuf";     // specify package for generated Java code
option optimize_for = LITE_RUNTIME;     // specify optimization level for generated code

/* define service type */

service PhoneService {     // service type named PhoneService
  rpc GetPhoneBook(Person) returns (PhoneBook);     // rpc method with input and output types and return type
}

/* define extensions */

extend Person {     // extension for Person message type
  optional int32 id = 100;     // optional field with name and tag number
  extensions 200 to max;     // range of extensions
}

/* define group */

message SomeGroup {     // group type named SomeGroup
  optional int32 key = 1;     // optional field with name and tag number
  required string value = 2;     // required field with name and tag number
  repeated int32 numbers = 3;     // repeated field with int32 type and tag number
}

/* define nested group */

message Outer {     // outer message type
  group Inner {     // nested group type named Inner
    optional int32 a = 1;     // optional field with name and tag number
    repeated int32 b = 2;     // repeated field with int32 type and tag number
  }
  repeated Inner inners = 1;     // repeated field with nested group type and tag number
}