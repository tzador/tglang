// Creating a Custom Message
syntax = "proto3";
// Defining the message type
message Person {
  string name = 1; // unique field identifier and data type
  int32 age = 2; // field index must start from 1
  repeated string hobbies = 3; // repeated fields must have a unique index
  message Address { // defining a nested message type
    string street = 1;
    string city = 2;
    string state = 3;
    int32 zipcode = 4;
  }
  Address address = 4; // adding the nested message as a field
}

// Serializing the Message using the protobuf API
Person john;
john.name = "John Doe";
john.age = 25;
john.hobbies = ["hiking", "reading"];
john.address.street = "123 Main St";
john.address.city = "New York";
john.address.state = "NY"
john.address.zipcode = 10001;

// Writing the serialized data to a file
fstream output("person.pb", ios::out | ios::binary); // creating an output stream
if (!john.SerializeToOstream(&output)) { // using SerializeToOstream() function
  cerr << "Failed to write person to file." << endl;
  return -1;
}

// Deserializing the Message using the protobuf API
Person john2;

// Reading the serialized data from the file
fstream input("person.pb", ios::in | ios::binary); // creating an input stream
if (!john2.ParseFromIstream(&input)) { // using ParseFromIstream() function
  cerr << "Failed to read person from file." << endl;
  return -1;
}

// Accessing fields of the deserialized message
cout << "Name: " << john2.name() << endl;
cout << "Age: " << john2.age() << endl;
cout << "Hobbies: " << endl;
for (int i = 0; i < john2.hobbies_size(); i++) {
  cout << john2.hobbies(i) << endl;
}
cout << "Address: " << john2.address().street() << ", " << john2.address().city() << ", " << john2.address().state() << " " << john2.address().zipcode() << endl;