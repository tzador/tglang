// Define a message type called Person
message Person { 
    string name = 1; // Field number 1, stores the person's name
    uint32 age = 2; // Field number 2, stores the person's age
    repeated string hobbies = 3; // Field number 3, stores a list of the person's hobbies
    enum Gender { // Define an enum for the person's gender
        MALE = 0; // Field number 0 represents male gender
        FEMALE = 1; // Field number 1 represents female gender
    }
    Gender gender = 4; // Field number 4, stores the person's gender
    Address address = 5; // Field number 5, stores the person's address
}

// Define a message type called Address
message Address {
    string street = 1; // Field number 1, stores the street address
    string city = 2; // Field number 2, stores the city
    string state = 3; // Field number 3, stores the state
    uint32 zipcode = 4; // Field number 4, stores the zipcode
}

// Create an instance of a Person message
Person person = {
    name: "John Smith", // Set the name field to "John Smith"
    age: 28, // Set the age field to 28
    hobbies: ["hiking", "reading"], // Set the hobbies field to a list of strings
    gender: Gender.MALE, // Set the gender field to MALE
    address: { // Create an instance of an Address message
        street: "123 Main St", // Set the street field to "123 Main St"
        city: "New York", // Set the city field to "New York"
        state: "NY", // Set the state field to "NY"
        zipcode: 12345 // Set the zipcode field to 12345
    }
}

// Serialize the Person message and convert it to bytes
bytes serializedPerson = person.serialize();

// Deserialize the bytes back into a Person message
Person deserializedPerson = Person.deserialize(serializedPerson);