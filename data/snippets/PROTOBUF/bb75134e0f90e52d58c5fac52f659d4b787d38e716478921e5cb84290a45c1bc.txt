syntax = "proto3"; /*
This line sets the syntax to be used for the protobuf code.
In this case, we are using the newer version (proto3).
*/
package example; /*
This line defines the namespace or package for our protobuf code.
In this case, we are using the package "example".
*/
option java_multiple_files = true; /*
This line sets the option for creating multiple java files.
By default, all messages will be in a single java file, 
but setting this option to true allows for better organization.
*/

option java_package = "com.example.protobuf"; /*
This line sets the java package for our protobuf code.
In this case, all java files will be generated under
the package "com.example.protobuf".
*/

message User { /*
This line starts the definition of the "User" message.
This message will be used to represent a user in our application.
*/
    string name = 1; // The user's name.
    int32 age = 2; // The user's age.
    string email = 3; // The user's email address.
    repeated string interests = 4; // The user's list of interests.
    enum Gender { // The user's gender.
        MALE = 0;
        FEMALE = 1;
        OTHER = 2;
    }
    Gender gender = 5; // The user's gender.
    bool is_active = 6; // Indicates if the user is currently active.
    map<string, string> contacts = 7; // A map of the user's contacts.
}

message BlogPost { /*
This line starts the definition of the "BlogPost" message.
This message will be used to represent a blog post in our application.
*/
    string title = 1; // The post's title.
    string content = 2; // The post's content.
    int32 views = 3; // The number of views for the post.
    repeated User comments = 4; // A list of comments from users.
    string category = 5; // The category of the post.
    repeated string tags = 6; // A list of tags associated with the post.
    bool is_published = 7; // Indicates if the post has been published. 
}

service UserService { /*
This line starts the definition of the "UserService" service.
This service will be used to interact with user data.
*/
    rpc GetUser (UserRequest) returns (UserResponse); /*
    This line defines the rpc method "GetUser".
    It takes in a "UserRequest" message and returns a "UserResponse" message.
    */
    rpc AddUser (User) returns (UserResponse); /*
    This line defines the rpc method "AddUser".
    It takes in a "User" message and returns a "UserResponse" message.
    */
    rpc DeleteUser (UserRequest) returns (Empty); /*
    This line defines the rpc method "DeleteUser".
    It takes in a "UserRequest" message and returns an "Empty" message.
    */
}

message UserRequest { /*
This line starts the definition of the "UserRequest" message.
This message will be used to request for user data.
*/
    int32 user_id = 1; // The id of the user to retrieve.
    repeated string fields = 2; // The fields to include in the response.
    enum SortOrder { // The sorting order for the response.
        ASCENDING = 0;
        DESCENDING = 1;
    }
    SortOrder sort_order = 3; // The sorting order for the response.
}

message UserResponse { /*
This line starts the definition of the "UserResponse" message.
This message will be used to respond with user data.
*/
    User user_data = 1; // The user data requested.
    repeated BlogPost blog_posts = 2; // A list of blog posts associated with the user.
    repeated string errors = 3; // A list of errors, if any.
}

message Empty { /*
This line starts the definition of the "Empty" message.
This message will be used as a placeholder or empty response.
*/
    // No fields needed.
}