syntax = "proto3";

message Person {
  int32 id = 1; // unique identifier for the person
  string name = 2; // full name of the person
  repeated string phones = 3; // list of phone numbers for the person
  string email = 4; // email address of the person
  enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }
  map<string, PhoneType> phone_types = 5; // map of phone number to PhoneType enum
  oneof Details {
    int32 age = 6; // age of the person
    string occupation = 7; // occupation of the person
  }
}

message Address {
  string street = 1; // street address
  string city = 2; // city name
  string state = 3; // state or province
  int32 zip_code = 4; // zip code or postal code
  string country = 5; // country name
}

message Organization {
  int32 id = 1; // unique identifier for the organization
  string name = 2; // name of the organization
  repeated Address addresses = 3; // list of addresses for the organization
}

// a service for querying information about people
service PersonService {
  // returns a list of all people
  rpc GetAllPeople (Empty) returns (PersonList) {}

  // returns a specific person by their id
  rpc GetPerson (PersonId) returns (Person) {}

  // creates a new person with the given information
  rpc CreatePerson (NewPerson) returns (Person) {}
}

// an empty message used as a placeholder in rpc requests
message Empty {}

// a message containing a list of people
message PersonList {
  repeated Person people = 1; 
}

// a message containing a person's id
message PersonId {
  int32 id = 1; 
}

// a message containing information for creating a new person
message NewPerson {
  string name = 1;
  repeated string phones = 2;
  string email = 3;
  oneof Details {
    int32 age = 4;
    string occupation = 5;
  }
  Address address = 6;
}

// message for updating a person's information
message UpdatePerson {
  PersonId id = 1;
  oneof Details {
    int32 age = 2;
    string occupation = 3;
    Address address = 4;
  }
}

// a service for updating person information
service UpdatePersonService {
  // updates a person's age
  rpc UpdateAge (UpdatePerson) returns (Person) {}

  // updates a person's occupation
  rpc UpdateOccupation (UpdatePerson) returns (Person) {}

  // updates a person's address
  rpc UpdateAddress (UpdatePerson) returns (Person) {}
}