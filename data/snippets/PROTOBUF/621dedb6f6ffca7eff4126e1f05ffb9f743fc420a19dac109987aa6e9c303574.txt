message Person {
  string name = 1; //Field 1 in the message, representing a string data type for name
  int32 age = 2; //Field 2 in the message, representing an integer data type for age
  repeated string hobbies = 3; //Field 3 in the message, representing a repeated string data type for hobbies
  enum Gender { //Defining an enum data type for gender
    MALE = 0;
    FEMALE = 1;
    OTHER = 2;
  }
  Gender gender = 4; //Field 4 in the message, representing an enum data type for gender
  map<string, string> contacts = 5; //Field 5 in the message, representing a map data type for contacts (key-value pairs of strings)
  message Address { //Defining a nested message for address
    string street = 1; //Field 1 in the nested message, representing a string data type for street
    string city = 2; //Field 2 in the nested message, representing a string data type for city
    string state = 3; //Field 3 in the nested message, representing a string data type for state
    int32 zip_code = 4; //Field 4 in the nested message, representing an integer data type for zip code
  }
  Address address = 6; //Field 6 in the message, representing a nested Address message for address
  oneof phone_number { //Defining a oneof for phone number, can only have either one field of phone or email
    string phone = 7; //Field 7 in the oneof, representing a string data type for phone number
    string email = 8; //Field 8 in the oneof, representing a string data type for email
  }
  bool is_active = 9; //Field 9 in the message, representing a boolean data type for is_active
}