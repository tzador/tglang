/// These definitions are used in the 'google/protobuf/descriptor.proto' module
/// to describe a protobuf message.

// This is the protobuf message that will be described using the descriptor.
message Zoo {
    // This is the parameter of the protobuf message.
    string name = 1;
    // This is the array of animals in the zoo.
    repeated Animal animals = 2;
}

// This is the protobuf message for an animal.
message Animal {
    // The type of animal.
    enum Type {
        DOG = 0;
        CAT = 1;
    }

    // The name of the animal.
    string name = 1;
    // The type of animal.
    Type type = 2;
}

/// A `FileDescriptorProto` contains all the information necessary to
/// generate the code for a protobuf file.
message FileDescriptorProto {
    // The protobuf file name.
    string name = 1;
    // The protobuf package name.
    string package = 2;
    // The protobuf syntax, either 'proto2' or 'proto3'.
    string syntax = 3;
    // The protobuf messages defined in this file.
    repeated DescriptorProto message_type = 4;
    // The protobuf enums defined in this file.
    repeated EnumDescriptorProto enum_type = 5;
    // The protobuf services defined in this file.
    repeated ServiceDescriptorProto service = 6;
    // The protobuf extensions defined in this file.
    repeated FieldDescriptorProto extension = 7;
    // The top-level options defined in this file.
    repeated FileOptions options = 8;
    // The source code info for this file.
    SourceCodeInfo source_code_info = 9;
}

/// A `DescriptorProto` describes a nested protobuf message.
/// It's used in the `FileDescriptorProto`.
message DescriptorProto {
    // The name of the protobuf message.
    string name = 1;
    // The protobuf fields defined in this message.
    repeated FieldDescriptorProto field = 2;
    // The protobuf internal field indexes defined in this message.
    repeated FieldDescriptorProto extension = 6;
    // The nested protobuf messages defined in this message.
    repeated DescriptorProto nested_type = 3;
    // The protobuf enums defined in this message.
    repeated EnumDescriptorProto enum_type = 4;
    // The protobuf extensions defined in this message.
    repeated FieldDescriptorProto extension_range = 5;
    // The top-level options defined in this message.
    repeated MessageOptions options = 7;
    // The source code info for this message.
    SourceCodeInfo source_code_info = 8;
}

/// An `EnumDescriptorProto` describes a nested protobuf enum.
/// It's used in the `FileDescriptorProto` and `DescriptorProto`.
message EnumDescriptorProto {
    // The name of the protobuf enum.
    string name = 1;
    // The protobuf enum values defined in this enum.
    repeated EnumValueDescriptorProto value = 2;
    // The top-level options defined in this enum.
    repeated EnumOptions options = 3;
    // The source code info for this enum.
    SourceCodeInfo source_code_info = 4;
}

/// A `EnumValueDescriptorProto` describes a value in a nested protobuf enum.
message EnumValueDescriptorProto {
    // The name of the enum value.
    string name = 1;
    // The index of the enum value.
    int32 number = 2;
    // The top-level options defined for this enum value.
    repeated EnumValueOptions options = 3;
}

/// A `ServiceDescriptorProto` describes a protobuf service.
/// It's used in the `FileDescriptorProto`.
message ServiceDescriptorProto {
    // The name of the protobuf service.
    string name = 1;
    // The protobuf methods defined in this service.
    repeated MethodDescriptorProto method = 2;
    // The top-level options defined in this service.
    repeated ServiceOptions options = 3;
    // The source code info for this service.
    SourceCodeInfo source_code_info = 4;
}

/// A `MethodDescriptorProto` describes a protobuf method.
/// It's used in the `ServiceDescriptorProto`.
message MethodDescriptorProto {
    // The name of the protobuf method.
    string name = 1;
    // The input message type.
    string input_type = 2;
    // The output message type.
    string output_type = 3;
    // The top-level options defined for this method.
    repeated MethodOptions options = 4;
    // The source code info for this method.
    SourceCodeInfo source_code_info = 5;
}

/// A `FieldDescriptorProto` describes a field in a protobuf message.
/// It's used in the `DescriptorProto` and `EnumDescriptorProto`.
message FieldDescriptorProto {
    // The name of the field.
    string name = 1;
    // The index of the field.
    int32 number = 2;
    // The type of the field.
    Type type = 3;
    // The data type of the field.
    FieldType type_name = 4;
    // The label of the field.
    Label label = 5;
    // This field is deprecated.
    bool deprecated = 6;
    // The default value for this field.
    string default_value = 7;
    // The options for this field.
    FieldOptions options = 8;
}

/// `Label` is the label for a protobuf field.
enum Label {
    // The field is optional.
    OPTIONAL = 1;
    // The field is required.
    REQUIRED = 2;
    // The field is repeated.
    REPEATED = 3;
}

/// `Type` is the type of a protobuf field.
enum Type {
    // The field is a signed 32-bit integer.
    INT32 = 1;
    // The field is a signed 64-bit integer.
    INT64 = 2;
    // The field is a string.
    STRING = 3;
    // The field is a bool.
    BOOL = 4;
    // The field is a float.
    FLOAT = 5;
    // The field is a double.
    DOUBLE = 6;
    // The field is an unsigned 32-bit integer.
    UINT32 = 7;
    // The field is an unsigned 64-bit integer.
    UINT64 = 8;
    // The field is a protobuf message.
    MESSAGE = 9;
    // The field is an enum.
    ENUM = 10;
    // The field is a bytes type.
    BYTES = 11;
}

/// `FieldType` is the data type for a protobuf field.
enum FieldType {
    // The data type is a protobuf message.
    MESSAGE = 1;
    // The data type is an enum.
    ENUM = 2;
}

/// Various options for a protobuf field.
message FieldOptions {
    // The field is a packed repeated field.
    bool packed = 1;
}

/// `FileOptions` are the various options for a protobuf file.
message FileOptions {
    // The file is optimized for parsing speed.
    bool optimize_for_speed = 1;
    // The file is optimized for code size.
    bool optimize_for_code_size = 2;
    // The file is deprecated.
    bool deprecated = 3;
}

/// `MessageOptions` are the various options for a protobuf message.
message MessageOptions {
    // The message is deprecated.
    bool deprecated = 1;
}

/// `EnumOptions` are the various options for a protobuf enum.
message EnumOptions {
    // The enum is deprecated.
    bool deprecated = 1;
}

/// `MethodOptions` are the various options for a protobuf method.
message MethodOptions {
    // The method is deprecated.
    bool deprecated = 1;
}

/// Various options for a protobuf service.
message ServiceOptions {
    // The service is deprecated.
    bool deprecated = 1;
}

/// `SourceCodeInfo` contains information on the location of protobuf elements
/// in the source code.
message SourceCodeInfo {
    // The list of locations of protobuf elements.
    repeated Location location = 1;
}

/// `Location` is a location of a protobuf element in the source code.
message Location {
    // The path to the element.
    // This is an array of integers representing the serialized form of the fully
    // qualified name.
    repeated int32 path = 1;
    // The starting line number of the location.
    int32 span = 2;
    // The ending line number of the location.
    int32 end = 3;
    // The location of the leading comments of the element.
    string leading_comments = 4;
    // The location of the trailing comments of the element.
    string trailing_comments = 5;
    // The location of the trailing comments of the element.
    string leading_detached_comments = 6;
}