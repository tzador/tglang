syntax = "proto3";
// The syntax declaration defines which version of Protocol Buffers is being used.

package example;
// The package declaration is used to group related message definitions.

option java_multiple_files = true;
// The option declaration allows for customizations, in this case, we are specifying that the generated Java files should be split into multiple files for improved performance.

// Defining a message type.
message Person {
    string name = 1;
    int32 id = 2;
    string email = 3;
    // A message type can contain fields, each with a name and a unique field number.

    enum PhoneType {
        MOBILE = 0;
        HOME = 1;
        WORK = 2;
        // An enum type can be defined within a message, with each value having a name and a numeric value.
    }

    // Defining a nested message type.
    message PhoneNumber {
        string number = 1;
        PhoneType type = 2;
        // Nested message types can be used as field types, making the message structure more organized and modular.
    }

    repeated PhoneNumber phones = 4;
    // Repeated fields can hold a list of values of the same type, similar to an array.

    map<string, int32> addresses = 5;
    // Maps allow for efficient storage and retrieval of key-value pairs.

    oneof status {
        bool is_active = 6;
        bool is_deleted = 7;
        // Oneof fields allow for mutually exclusive fields, where only one can be set in a message, saving space and improving readability.
    }

    reserved 8;
    // Reserved field numbers must not be used in the message definition.

    reserved "reserved_field_name";
    // Reserved field names must not be used in the message definition, even if the field number has been reserved.
}