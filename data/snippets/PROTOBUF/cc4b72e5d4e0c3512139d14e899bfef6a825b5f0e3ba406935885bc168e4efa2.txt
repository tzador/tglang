message Person { // Defines a message type called Person
  enum Gender { // Defines an enum type called Gender
    MALE = 0; // Specifies the value of MALE as 0
    FEMALE = 1; // Specifies the value of FEMALE as 1
    OTHER = 2; // Specifies the value of OTHER as 2
  }
  required string name = 1; // Specifies required field called name of type string with field number 1
  required int32 age = 2; // Specifies required field called age of type int32 with field number 2
  optional string address = 3; // Specifies optional field called address of type string with field number 3
  repeated string hobbies = 4; // Specifies repeated field called hobbies of type string with field number 4
  extensions 100 to max; // Specifies that extensions 100 to max are allowed
  reserved 40, 50 to 60, 70 to max; // Specifies that field numbers 40, 50 to 60, and 70 to max are reserved and should not be used

  message Pet { // Defines a nested message type called Pet
    required string name = 1; // Specifies required field called name of type string with field number 1
    optional string type = 2; // Specifies optional field called type of type string with field number 2
  }

  repeated Pet pets = 5; // Specifies repeated field called pets of type Pet with field number 5
  map<string, string> contact_info = 6; // Specifies map field called contact_info with key and value of type string and field number 6
  oneof favorite { // Specifies a oneof field called favorite
    string color = 7; // Specifies oneof field called color of type string with tag number 7
    int32 number = 8; // Specifies oneof field called number of type int32 with tag number 8
  }
}