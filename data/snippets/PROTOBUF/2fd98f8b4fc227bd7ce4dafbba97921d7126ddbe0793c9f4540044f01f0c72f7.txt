syntax = "proto3"; // sets the syntax version to be used

package example; // creates a package named 'example'

option java_package = "com.example"; // sets the java package name to be used
option java_outer_classname = "ExampleProto"; // sets the java outer class name to be used

message Person { // creates a message named 'Person'
    string name = 1; // creates a field named 'name' with a tag of 1 (unique per message)
    int32 age = 2; // creates a field named 'age' with a tag of 2
    repeated string hobbies = 3; // creates a repeated field named 'hobbies' with a tag of 3
    enum Gender { // creates an enum named 'Gender'
        MALE = 0; // defines enum option MALE with a value of 0
        FEMALE = 1; // defines enum option FEMALE with a value of 1
        OTHER = 2; // defines enum option OTHER with a value of 2
    }
    Gender gender = 4; // creates a field named 'gender' of type Gender with a tag of 4
    message Address { // creates a nested message named 'Address'
        string street = 1; // creates a field named 'street' with a tag of 1
        string city = 2; // creates a field named 'city' with a tag of 2
        int32 zip_code = 3; // creates a field named 'zip_code' with a tag of 3
    }
    Address address = 5; // creates a field named 'address' of type Address with a tag of 5
}

message Pet { // creates a message named 'Pet'
    string name = 1; // creates a field named 'name' with a tag of 1
    string type = 2; // creates a field named 'type' with a tag of 2
    int32 age = 3; // creates a field named 'age' with a tag of 3
    Person owner = 4; // creates a field named 'owner' of type Person with a tag of 4
}

service ExampleService { // creates a service named 'ExampleService'
    rpc CreatePerson (Person) returns (Person); // creates a rpc method named 'CreatePerson' that takes in a Person message and returns a Person message
    rpc GetPet (Person) returns (Pet); // creates a rpc method named 'GetPet' that takes in a Person message and returns a Pet message
    rpc UpdatePerson (Person) returns (Person); // creates a rpc method named 'UpdatePerson' that takes in a Person message and returns a Person message
}