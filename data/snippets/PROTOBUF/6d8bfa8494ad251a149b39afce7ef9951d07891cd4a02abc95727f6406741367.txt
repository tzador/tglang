syntax = "proto3";

//Defines the message structure for a user
message User {
  string first_name = 1; //Field for first name with a tag number of 1
  string last_name = 2; //Field for last name with a tag number of 2
  int32 age = 3; //Field for age with a tag number of 3
  repeated string hobbies = 4; //Field for hobbies with a tag number of 4, can contain multiple values
  Address address = 5; //Field for address with a tag number of 5, nested message
  repeated Order orders = 6; //Field for orders with a tag number of 6, contains multiple nested messages
  bool is_active = 7; //Field for is_active flag with a tag number of 7
}

//Defines the message structure for an address
message Address {
  string street = 1; //Field for street with a tag number of 1
  string city = 2; //Field for city with a tag number of 2
  string state = 3; //Field for state with a tag number of 3
  string country = 4; //Field for country with a tag number of 4
  string postal_code = 5; //Field for postal code with a tag number of 5
}

//Defines the message structure for an order
message Order {
  int32 order_id = 1; //Field for order ID with a tag number of 1
  string product = 2; //Field for product name with a tag number of 2
  float price = 3; //Field for order price with a tag number of 3
  repeated string items = 4; //Field for items with a tag number of 4, can contain multiple values
  string status = 5; //Field for order status with a tag number of 5
}

//Defines the service structure for a user service
service UserService {
  rpc GetUser (GetUserRequest) returns (UserResponse) {} //RPC method for getting a user
  rpc AddUser (User) returns (AddUserResponse) {} //RPC method for adding a user
  rpc UpdateUser (UpdateUserRequest) returns (UserResponse) {} //RPC method for updating a user
}

//Defines the message structure for a get user request
message GetUserRequest {
  int32 user_id = 1; //Field for user ID with a tag number of 1
}

//Defines the message structure for a user response
message UserResponse {
  User user = 1; //Field for user with a tag number of 1
  Status status = 2; //Field for status with a tag number of 2, enum
}

//Defines the message structure for an add user response
message AddUserResponse {
  User user = 1; //Field for user with a tag number of 1
  Status status = 2; //Field for status with a tag number of 2, enum
}

//Defines the message structure for an update user request
message UpdateUserRequest {
  int32 user_id = 1; //Field for user ID with a tag number of 1
  User user = 2; //Field for updated user with a tag number of 2
}

//Enum for status
enum Status {
  OK = 0; //0 value for OK status
  ERROR = 1; //1 value for ERROR status
}