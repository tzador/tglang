syntax = "proto3"; // define the syntax version of protobuf

// create a message type with the name 'Person'
message Person {
    string name = 1; // define a field with the name 'name' and field number '1'
    int32 age = 2; // define a field with the name 'age' and field number '2'
    repeated string hobbies = 3; // define a repeated field with the name 'hobbies' and field number '3'
    
    // nested message type with the name 'Address'
    message Address {
        string street = 1; // define a field with the name 'street' and field number '1'
        string city = 2; // define a field with the name 'city' and field number '2'
        string state = 3; // define a field with the name 'state' and field number '3'
        int32 zip_code = 4; // define a field with the name 'zip_code' and field number '4'
    }
    
    Address address = 4; // define a field with the name 'address' and field number '4' of type 'Address'
    
    // create an enum type with the name 'Gender'
    enum Gender {
      UNKNOWN = 0; // enum value with the name 'UNKNOWN' and value '0'
      MALE = 1; // enum value with the name 'MALE' and value '1'
      FEMALE = 2; // enum value with the name 'FEMALE' and value '2'
    }
    
    Gender gender = 5; // define a field with the name 'gender' and field number '5' of type 'Gender'
}

// example of a message instance
Person person = {
    name: "John", // assign value "John" to the field 'name'
    age: 25, // assign value 25 to the field 'age'
    hobbies: ["Reading", "Playing soccer"], // assign a list of values to the field 'hobbies'
    address: { // assign values to the nested message type 'Address'
        street: "123 Main St.",
        city: "New York",
        state: "NY",
        zip_code: 12345
    },
    gender: Person.Gender.MALE // assign value 'MALE' from enum type 'Gender' to the field 'gender'
};

// encode the message instance to a binary format
bytes serialized_person = person.encode();