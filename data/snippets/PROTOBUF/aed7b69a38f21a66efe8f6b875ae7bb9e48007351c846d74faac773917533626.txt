syntax = "proto3"; // set the syntax to protobuf version 3

package example; // define the package name for the code

// create a message type 'Person'
message Person { 
    string name = 1; // field with name 'name' and field number 1
    int32 age = 2; // field with name 'age' and field number 2
    repeated string hobbies = 3; // repeated field with name 'hobbies' and field number 3
    Address address = 4; // nested message field with name 'address' and field number 4
    repeated Contact contacts = 5; // repeated nested message field with name 'contacts' and field number 5

    enum Gender { // define an enum for gender
        MALE = 0;
        FEMALE = 1;
        OTHER = 2;
    }

    Gender gender = 6; // field with name 'gender' and field number 6, with type set to the Gender enum
}

// create a message type 'Address'
message Address {
    string street = 1; // field with name 'street' and field number 1
    string city = 2; // field with name 'city' and field number 2
    string country = 3; // field with name 'country' and field number 3
}

// create a message type 'Contact'
message Contact {
    string phone_number = 1; // field with name 'phone_number' and field number 1
    string email = 2; // field with name 'email' and field number 2
}

// create a service for handling requests related to the Person message
service PersonService {
    rpc GetPersonById (PersonId) returns (Person); // define a rpc method 'GetPersonById' with input parameter 'PersonId' and output parameter 'Person'
    rpc AddPerson (NewPerson) returns (PersonId); // define a rpc method 'AddPerson' with input parameter 'NewPerson' and output parameter 'PersonId'
    rpc UpdatePerson (PersonUpdate) returns (Person); // define a rpc method 'UpdatePerson' with input parameter 'PersonUpdate' and output parameter 'Person'
}

// define a message type for input parameter of the 'GetPersonById' method 
message PersonId {
    string person_id = 1; // field with name 'person_id' and field number 1
}

// define a message type for input parameter of the 'AddPerson' method
message NewPerson {
    string name = 1; // field with name 'name' and field number 1
    int32 age = 2; // field with name 'age' and field number 2
    repeated string hobbies = 3; // repeated field with name 'hobbies' and field number 3
    Address address = 4; // nested message field with name 'address' and field number 4
    repeated Contact contacts = 5; // repeated nested message field with name 'contacts' and field number 5
}

// define a message type for input parameter of the 'UpdatePerson' method
message PersonUpdate {
    string person_id = 1; // field with name 'person_id' and field number 1
    string name = 2; // field with name 'name' and field number 2
    int32 age = 3; // field with name 'age' and field number 3
    repeated string hobbies = 4; // repeated field with name 'hobbies' and field number 4
    Address address = 5; // nested message field with name 'address' and field number 5
    repeated Contact contacts = 6; // repeated nested message field with name 'contacts' and field number 6
}

// define an error message for when a person is not found
message PersonNotFound {
    string error_message = 1; // field with name 'error_message' and field number 1
}

// define an error message for when a person cannot be added
message AddPersonError {
    string error_message = 1; // field with name 'error_message' and field number 1
}

// define an error message for when a person cannot be updated
message UpdatePersonError {
    string error_message = 1; // field with name 'error_message' and field number 1
}