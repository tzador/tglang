message Person {
  string name = 1; // Name field with field number 1
  int32 id = 2; // Id field with field number 2
  string email = 3; // Email field with field number 3

  // Sub-message with nested fields
  message Phone {
    string number = 1; // Number field with field number 1
    string type = 2; // Type field with field number 2
  }
  repeated Phone phones = 4; // Repeated sub-message with field number 4

  // Enum for possible phone types
  enum PhoneType {
    HOME = 0;
    WORK = 1;
    MOBILE = 2;
  }

  // Oneof group for contact information
  oneof contact {
    string address = 5; // Address field with field number 5
    Phone phone = 6; // Phone field with field number 6
    string social_media = 7; // Social media field with field number 7
  }
}

// Example person with all fields filled
Person example_person {
  name: "John Smith",
  id: 12345,
  email: "johnsmith@example.com",
  phones: [
    number: "555-1234",
    type: "HOME",
  phone: {
    number: "555-4321",
    type: "MOBILE",
  }
  ],
  contact: address: "123 Main St. Anytown, USA"
}

// Serialize the person to a byte array
byte[] serialized_person = example_person.Serialize();

// Deserialize the byte array to a new person instance
Person deserialized_person = Person.ParseFrom(serialized_person);