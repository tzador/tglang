syntax = "proto3"; // defining the syntax of the protocol buffer

package employee; // defining the package name

message Employee { // defining the message type
    string name = 1; // defining a field with field number 1
    int32 id = 2; // defining another field with field number 2
    string department = 3; // defining a third field with field number 3
    repeated string projects = 4; // defining a repeated field to store multiple projects
    
    message Address { // defining a nested message type
        string street = 1; // defining a field with field number 1
        string city = 2; // defining another field with field number 2
        string state = 3; // defining another field with field number 3
        int32 zip_code = 4; // defining another field with field number 4
    }
    
    Address address = 5; // defining a field with field number 5, of type Address
}

message Company { // defining a separate message type
    string name = 1; // defining a field with field number 1
    repeated Employee employees = 2; // defining a repeated field to store multiple employees
}

// Sample employee data

Employee fred = { // creating an Employee object named fred
    name: "Fred Smith", // assigning a value to the name field
    id: 12345, // assigning a value to the id field
    department: "Sales", // assigning a value to the department field
    projects: ["Project A", "Project B"], // assigning values to the projects field
    address: { // creating an Address object for the address field
        street: "123 Main Street", // assigning a value to the street field
        city: "New York", // assigning a value to the city field
        state: "NY", // assigning a value to the state field
        zip_code: 12345 // assigning a value to the zip_code field
    }
};

Company acme = { // creating a Company object named acme
    name: "Acme Corporation", // assigning a value to the name field
    employees: [fred] // assigning values to the employees field, with fred as the only element
};

// Serialize the data into a binary format

bytes serialized_data = fred.serialize(); // serializing the fred object into a byte array
bytes company_data = acme.serialize(); // serializing the acme object into a byte array