// Define a message named "Person"
message Person {
  string name = 1; // Unique field number
  int32 id = 2; // Unique field number
  string email = 3; // Unique field number
  repeated PhoneNumber phones = 4; // Repeated field
  enum PhoneType { // Define an enum type for phone types
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  // Define a nested message for phone numbers
  message PhoneNumber { 
    string number = 1; // Unique field number
    PhoneType type = 2; // Unique field number
  }

  optional string address = 5; // Optional field
  optional int32 age = 6; // Optional field
  map<string, string> custom_fields = 7; // Map field
}

// Encode the data into a byte array
bytes encodedData = Person.encode({
  name: "John Doe",
  id: 1234,
  email: "johndoe@example.com",
  phones: [
    { number: "555-1234", type: MOBILE },
    { number: "555-5678", type: HOME }
  ],
  address: "123 Main St.",
  age: 30,
  custom_fields: {
    "hobby": "golf",
    "favorite_food": "pizza"
  }
});

// Decode the data from the byte array
Person decodedData = Person.decode(encodedData);

// Print out the decoded data
print("Name: " + decodedData.name);
print("ID: " + decodedData.id);
print("Email: " + decodedData.email);
for (PhoneNumber phone : decodedData.phones) {
  print("Phone number: " + phone.number);
  if (phone.type == MOBILE) {
    print("Phone type: mobile");
  } else if (phone.type == HOME) {
    print("Phone type: home");
  }
}
if (decodedData.has_address) print("Address: " + decodedData.address);
if (decodedData.has_age) print("Age: " + decodedData.age);
for (string key : decodedData.custom_fields.keys) {
  print(key + ": " + decodedData.custom_fields[key]);
}