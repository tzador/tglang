syntax = "proto3";                                     //declaring the syntax of the protobuf file
package example;                                        //declaring the package name

message Book {                                           //creating a message called "Book"
  string title = 1;                                      //field number and data type of "title" field
  string author = 2;                                     //field number and data type of "author" field
  int32 pages = 3;                                       //field number and data type of "pages" field
  repeated string genres = 4;                            //field number and data type of "genres" field, repeated for multiple values
  map<string, string> metadata = 5;                      //field number and data type of "metadata" field, using map type
}

message Library {                                        //creating a message called "Library"
  repeated Book books = 1;                               //nested Book message as a repeated field
  map<string, int32> book_count = 2;                     //field number and data type of "book_count" field, using map type
  enum Status {                                          //creating an enum type called "Status"
    AVAILABLE = 0;
    CHECKED_OUT = 1;
    UNAVAILABLE = 2;
  }
  repeated Status book_statuses = 3;                     //field number and data type of "book_statuses" field, using enum type as a repeated field
  oneof library_type {                                   //declaring a oneof for "Library" message to have different types of libraries
    UniversityLibrary university = 4;                    //oneof option for "University Library" type
    PublicLibrary public_library = 5;                    //oneof option for "Public Library" type
    PrivateLibrary private_library = 6;                  //oneof option for "Private Library" type
  }
}

message UniversityLibrary {
  string university_name = 1;
  string campus_location = 2;
}

message PublicLibrary {
  string library_name = 1;
  string city = 2;
  string state = 3;
}

message PrivateLibrary {
  string owner_name = 1;
  string address = 2;
}

service LibraryService {                                //creating a service called "LibraryService" to access and manipulate library data
  rpc AddBook(Book) returns (Book) {}                    //rpc method for adding a book, takes in "Book" message and returns the same message
  rpc CheckOutBook(Book) returns (Book) {}               //rpc method for checking out a book, takes in "Book" message and returns the same message
  rpc ReturnBook(Book) returns (Book) {}                 //rpc method for returning a book, takes in "Book" message and returns the same message
  rpc GetLibrary(Library) returns (Library) {}           //rpc method for getting library data, takes in "Library" message and returns the same message
}