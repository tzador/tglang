syntax = "proto3";  // sets the syntax to Protobuf version 3, the latest version

// defines a message type called Person
message Person {
    // defines a string field called name and assigns a field number of 1
    string name = 1;

    // defines an int32 field called age and assigns a field number of 2
    int32 age = 2;

    // defines an enum called Gender with 2 options: MALE and FEMALE, and assigns a field number of 3
    enum Gender {
        MALE = 0;
        FEMALE = 1;
    }
    Gender gender = 3;  // defines a field of type Gender and assigns a field number of 3
}

/*
defines a message type called Address with nested fields
the 'required' keyword indicates that the field MUST be set when creating an instance of the message
*/
message Address {
    // defines a string field called street with a field number of 1, it is required
    required string street = 1;

    // defines a string field called city with a field number of 2, it is required
    required string city = 2;

    // defines a string field called state with a field number of 3
    string state = 3;

    // defines a string field called zip_code with a field number of 4
    string zip_code = 4;
}

/*
defines a message type called ContactInfo with nested fields
the 'repeated' keyword indicates that the field can have multiple values
*/
message ContactInfo {
    // defines an int32 field called phone_number with a field number of 1, it can have multiple values
    repeated int32 phone_number = 1;

    // defines a string field called email with a field number of 2, it can have multiple values
    repeated string email = 2;

    // defines an Address field called address with a field number of 3
    Address address = 3;
}

/*
defines a message type called Employee with nested fields
the 'map' keyword indicates that the field is a map with a key and value type
*/
message Employee {
    // defines a map field called employee_contacts with a key type of string and value type of ContactInfo
    map<string, ContactInfo> employee_contacts = 1;
}

/*
defines a message type called Company with nested fields
the 'oneof' keyword indicates that different fields can be set but only one at a time
*/
message Company {
    // defines an int32 field called company_id with a field number of 1, required
    required int32 company_id = 1;

    // defines a oneof field called contact, which can be either a Person or ContactInfo message type
    oneof contact {
        Person person = 2;
        ContactInfo contact_info = 3;
    }

    // defines a repeated Employee field called employees with a field number of 4
    repeated Employee employees = 4;
}

// end of protobuf code snippet