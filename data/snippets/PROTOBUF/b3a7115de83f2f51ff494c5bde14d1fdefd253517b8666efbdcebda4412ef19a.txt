// Define a message for a car
message Car {
  string make = 1; // The make of the car
  string model = 2; // The model of the car
  int32 year = 3; // The year the car was made
  string color = 4; // The color of the car
  repeated string features = 5; // A list of features the car has
  electronicsDriveType electricDriveType = 6; // The type of electric drive the car has
  map<string, int32> passengers = 7; // A map of passengers in the car and their age
  oneof carType { // Define a oneof field for the type of car
    Sedan sedan = 8;
    SUV suv = 9;
    SportsCar sports_car = 10;
  }
  SeatConfiguration seat_configuration = 11; // The seat configuration of the car
}

// Define a message for a sedan car type
message Sedan {
  int32 num_doors = 1; // The number of doors on the sedan
  double trunk_space = 2; // The amount of trunk space in cubic feet
}

// Define a message for an SUV car type
message SUV {
  int32 num_doors = 1; // The number of doors on the SUV
  double trunk_space = 2; // The amount of trunk space in cubic feet
}

// Define a message for a sports car type
message SportsCar {
  int32 num_doors = 1; // The number of doors on the sports car
  double top_speed = 2; // The top speed of the sports car in miles per hour
}

// Define a message for seat configuration
message SeatConfiguration {
  int32 num_seats = 1; // The number of seats in the car
  repeated SeatRow seat_rows = 2; // A list of seat rows in the car
}

// Define a message for a seat row
message SeatRow {
  int32 num_seats = 1; // The number of seats in the row
  SeatType seat_type = 2; // The type of seat (e.g. driver seat, passenger seat)
}

// Define an enum for seat type
enum SeatType {
  DRIVER = 0;
  PASSENGER = 1;
  MIDDLE = 2;
}

// Define an enum for electric drive type
enum ElectronicsDriveType {
  HYBRID = 0;
  BATTERY = 1;
  FUEL_CELL = 2;
}