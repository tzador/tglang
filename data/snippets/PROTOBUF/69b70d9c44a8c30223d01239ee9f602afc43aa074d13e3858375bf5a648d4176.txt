message Person {      // Defines a Protocol Buffer message called Person
    string name = 1;  // Defines a string field with a field number of 1
    int32 age = 2;    // Defines an integer field with a field number of 2
    repeated string hobbies = 3; // Defines a repeated string field with a field number of 3
    Address address = 4; // Defines a nested message field of type Address with a field number of 4

    message Address {   // Defines a nested message called Address
        string street = 1; // Defines a string field with a field number of 1
        string city = 2;   // Defines a string field with a field number of 2
        string state = 3;  // Defines a string field with a field number of 3
        int32 zip_code = 4; // Defines an integer field with a field number of 4
    }
}

// Example of encoding a Person message using Protocol Buffer API
Person john = Person.newBuilder()
    .setName("John")
    .setAge(25)
    .addHobbies("reading")
    .addHobbies("running")
    .setAddress(Person.Address.newBuilder()
        .setStreet("123 Main St")
        .setCity("New York")
        .setState("NY")
        .setZipCode(10001))
    .build(); // Builds the Person message

// Example of decoding a Person message using Protocol Buffer API
byte[] johnBytes = john.toByteArray(); // Converts Person message to byte array
Person decodedJohn = Person.parseFrom(johnBytes); // Decodes byte array to Person message

// Example of serializing a Person message using Protocol Buffer API
FileOutputStream output = new FileOutputStream("person.pb");
john.writeTo(output); // Writes Person message to file
output.close(); // Closes output stream

// Example of deserializing a Person message using Protocol Buffer API
FileInputStream input = new FileInputStream("person.pb");
Person deserializedJohn = Person.parseFrom(input); // Parses Person message from file
input.close(); // Closes input stream