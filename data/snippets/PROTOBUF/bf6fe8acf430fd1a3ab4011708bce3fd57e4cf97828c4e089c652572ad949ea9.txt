// Generated using protoc-gen-go
// To start, import the required packages
import (
	"google.golang.org/protobuf/proto"
	"github.com/golang/protobuf/jsonpb"
)

// Declare a struct called 'Person' that will be used for encoding and decoding data
type Person struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

// Create an instance of the 'Person' struct
p := &Person{
	Name: "John",
	Age: 25,
}

// Encode the data using the protobuf library
data, err := proto.Marshal(p)

// Handle any errors that may occur
if err != nil {
	log.Fatal("Error while encoding data:", err)
}

// Decode the data using the jsonpb library
var jm jsonpb.Marshaler
jsonStr, err := jm.MarshalToString(p)

// Handle any errors that may occur
if err != nil {
	log.Fatal("Error while decoding data:", err)
}

// Print the encoded data in JSON format
fmt.Println("Encoded data in JSON format:", jsonStr)

// Print the decoded data
decodedP := &Person{}
err = proto.Unmarshal(data, decodedP)

// Handle any errors that may occur
if err != nil {
	log.Fatal("Error while decoding data:", err)
}

// Print the decoded data in its original format
fmt.Println("Decoded data:", decodedP)