syntax = "proto3";

/* This is a comment in PROTOBUF */

message Person {
    int32 id = 1; // Unique ID assigned to each person
    string name = 2; // Name of the person
    uint32 age = 3; // Age of the person in years
    repeated string hobbies = 4; // List of hobbies of the person
    Address address = 5; // Address of the person
}

// A nested message to represent address
message Address {
    string street = 1; // Street of the address
    string city = 2; // City of the address
    uint32 zipcode = 3; // Zipcode of the address
}

// An enum to represent person's gender
enum Gender {
    MALE = 0;
    FEMALE = 1;
    OTHER = 2;
}

// A map to represent person's friends
map<int32, Person> friends = 6;

/* A service to manage and communicate with persons */
service PersonService {
    rpc GetPersonById (PersonId) returns (Person); // Returns a person with the given ID
    rpc CreateNewPerson (NewPerson) returns (Person); // Creates a new person and returns it
    rpc UpdatePerson (UpdatedPerson) returns (Person); // Updates a person and returns it
    rpc DeletePerson (PersonId) returns (DeleteStatus); // Deletes a person and returns a status
}

// A message used to represent a person's ID
message PersonId {
    int32 id = 1; // ID of the person to be used for operations
}

// A message used to represent a new person
message NewPerson {
    string name = 1; // Name of the new person to be created
    uint32 age = 2; // Age of the new person in years
    repeated string hobbies = 3; // List of hobbies of the new person
    Address address = 4; // Address of the new person
    Gender gender = 5; // Gender of the new person
}

// A message used to represent an updated person
message UpdatedPerson {
    int32 id = 1; // ID of the person to be updated
    string name = 2; // Updated name of the person
    uint32 age = 3; // Updated age of the person in years
    repeated string hobbies = 4; // Updated list of hobbies of the person
    Address address = 5; // Updated address of the person
    Gender gender = 6; // Updated gender of the person
}

// A message used to represent delete status
message DeleteStatus {
    bool success = 1; // Indicates if the delete operation was successful
}