syntax = "proto3";                                                // Sets the version of the Protobuf syntax

package example;                                                  // Specifies the package name
option java_package = "com.example.protobuf";                     // Sets the Java package for generated code

import "google/protobuf/struct.proto";                            // Imports the struct message type
import "google/protobuf/timestamp.proto";                         // Imports the timestamp message type

// Defines the message types 
message Person {                                
  string first_name = 1;                                           // Specifies the first_name field as a string with unique field number 1
  string last_name = 2;                                            // Specifies the last_name field as a string with unique field number 2
  int32 age = 3;                                                   // Specifies the age field as a 32-bit integer with unique field number 3
  repeated string hobbies = 4;                                     // Specifies the hobbies field as a repeated string with unique field number 4
  google.protobuf.Struct address = 5;                              // Specifies the address field as a Struct message type with unique field number 5
  repeated google.protobuf.Timestamp timestamps = 6;               // Specifies the timestamps field as a repeated Timestamp message type with unique field number 6
}

message Address {
  string street = 1;                                               // Specifies the street field as a string with unique field number 1
  string city = 2;                                                 // Specifies the city field as a string with unique field number 2
  string country = 3;                                              // Specifies the country field as a string with unique field number 3
  string postal_code = 4;                                          // Specifies the postal_code field as a string with unique field number 4
}

// Defines the RPC service and methods
service ExampleService {
  rpc AddPerson(Person) returns (Person);                           // Specifies a method to add a Person and return a Person
  rpc DeletePerson(Person) returns (Person);                        // Specifies a method to delete a Person and return a Person
  rpc GetPerson(Person) returns (Person);                           // Specifies a method to retrieve a Person and return a Person
  rpc UpdatePerson(Person) returns (Person);                        // Specifies a method to update a Person and return a Person
}

// Enumerations to specify the type of response for the RPC methods
enum Status {
  OK = 0;                                                          // Specifies a status of OK with value 0
  ERROR = 1;                                                       // Specifies a status of ERROR with value 1
}

enum Message {
  SUCCESS = 0;                                                     // Specifies a success message with value 0
  FAILURE = 1;                                                     // Specifies a failure message with value 1
}

// Message to be used as a standard response for RPC methods
message Result {
  Status status = 1;                                               // Specifies the status of the response as a Status enumeration with unique field number 1
  Message message = 2;                                             // Specifies the message of the response as a Message enumeration with unique field number 2
  Person person = 3;                                               // Specifies the person object of the response with unique field number 3
}

// Defines the custom options for the fields in the Person message
extend Person {
  optional bool validate_name = 60001;                             // Specifies a custom option to validate the first and last name fields
  optional bool filter_age = 60002;                                // Specifies a custom option to filter the age field
}