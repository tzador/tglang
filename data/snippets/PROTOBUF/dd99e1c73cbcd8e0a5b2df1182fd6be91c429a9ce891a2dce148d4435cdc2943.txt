//Defining a message type called 'Player' with nested fields
message Player {
  string name = 1; //Unique identifier for player
  int32 age = 2; //Age of the player
  string team = 3; //Name of the team the player belongs to
  int32 jersey_number = 4; //Player's jersey number
  repeated string positions = 5; //List of positions the player can play
  repeated GameStats game_stats = 6; //List of game stats for the player

  //Defining a nested message type 'GameStats'
  message GameStats {
    string opponent = 1; //Name of the opposing team
    int32 score = 2; //Player's score in the game
    int32 rebounds = 3; //Number of rebounds in the game
    int32 assists = 4; //Number of assists in the game
  }
}

//Encoding a Player message into a byte array
Player player = Player.newBuilder()
  .setName("LeBron James")
  .setAge(36)
  .setTeam("Los Angeles Lakers")
  .setJerseyNumber(23)
  .addPositions("Small Forward")
  .addPositions("Power Forward")
  .setGameStats(0, GameStats.newBuilder()
    .setOpponent("Golden State Warriors")
    .setScore(30)
    .setRebounds(8)
    .setAssists(10)
    .build())
  .addGameStats(GameStats.newBuilder()
    .setOpponent("Brooklyn Nets")
    .setScore(25)
    .setRebounds(6)
    .setAssists(12)
    .build())
  .build();
byte[] playerBytes = player.toByteArray();

//Decoding a byte array back into a Player message
Player player2 = Player.parseFrom(playerBytes);
cout << player2.name() << " is " << player2.age() << " years old and plays for the " << player2.team() << " wearing jersey number " << player2.jersey_number() << endl;

//Looping through the list of player's positions
for (string position : player2.positions()) {
  cout << player2.name() << " can play " << position << endl;
}

//Looping through the list of game stats
for (Player.GameStats gameStats : player2.game_stats()) {
  cout << player2.name() << " had " << gameStats.score() << " points against " << gameStats.opponent() << " with " << gameStats.rebounds() << " rebounds and " << gameStats.assists() << " assists" << endl;
}