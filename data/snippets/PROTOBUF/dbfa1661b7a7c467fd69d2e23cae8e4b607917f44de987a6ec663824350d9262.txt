syntax = "proto3"; // setting syntax to proto3

// defining the message MyMessage with fields
message MyMessage {
  int32 id = 1; // field with tag number 1 and data type int32
  string name = 2; // field with tag number 2 and data type string
  repeated int64 numbers = 3; // repeated field with tag number 3 and data type int64
  bool flag = 4; // field with tag number 4 and data type bool
  MyNestedMesasge nested_message = 5; // field with tag number 5 and data type MyNestedMessage, representing nested message
  enum Color { // defining enum named Color
    RED = 0;
    BLUE = 1;
    GREEN = 2;
  }
  Color color = 6; // field with tag number 6 and data type Color representing enum
  map<int32, string> names = 7; // field with tag number 7, data type map with key type int32 and value type string
}

// defining nested message MyNestedMessage with fields
message MyNestedMessage {
  string nested_name = 1; // field with tag number 1 and data type string
  bytes nested_bytes = 2; // field with tag number 2 and data type bytes
}

// defining message MyOtherMessage with oneof fields
message MyOtherMessage {
  oneof data { // oneof field named data
    string name = 1; // field with tag number 1 and data type string
    int32 id = 2; // field with tag number 2 and data type int32
  }
}

// defining service MyService with rpc methods
service MyService {
  rpc GetData (MyMessage) returns (MyOtherMessage); // rpc method named GetData with request message of type MyMessage and response message of type MyOtherMessage
  rpc UpdateData (stream MyMessage) returns (stream MyOtherMessage); // rpc method named UpdateData that uses streaming for both request and response messages
}