syntax = "proto3";

// Define a message called "Person"
message Person {
  string name = 1; // Field ID is 1 and field type is string
  int32 age = 2; // Field ID is 2 and field type is int32
  repeated string hobbies = 3; // Field ID is 3 and field type is repeated string (a list of strings)
  bool is_employed = 4; // Field ID is 4 and field type is bool (true or false)
  enum Gender { // Create an enum called Gender
    MALE = 0; // enum value is 0
    FEMALE = 1; // enum value is 1
    OTHER = 2; // enum value is 2
  }
  Gender gender = 5; // Field ID is 5 and field type is Gender (enum)
  Address address = 6; // Field ID is 6 and field type is Address (embedded message)
}

// Define a message called "Address"
message Address {
  string street_address = 1; // Field ID is 1 and field type is string
  string city = 2; // Field ID is 2 and field type is string
  string state = 3; // Field ID is 3 and field type is string
  string zip_code = 4; // Field ID is 4 and field type is string
}

// Create a new Person instance
Person person = {
  name: "John Doe", // Set the name field to "John Doe"
  age: 28, // Set the age field to 28
  hobbies: ["reading", "hiking", "playing guitar"], // Set the hobbies field to a list of strings
  is_employed: true, // Set the is_employed field to true
  gender: Person.Gender.MALE, // Set the gender field to MALE using the enum defined earlier
  address: { // Set the address field to a new Address message
    street_address: "123 Main Street", // Set the street_address field to "123 Main Street"
    city: "New York", // Set the city field to "New York"
    state: "NY", // Set the state field to "NY"
    zip_code: "10001" // Set the zip_code field to "10001"
  }
};

// Encode the person instance into a byte array
byte[] personBytes = person.encode();

// Decode the byte array back into a Person instance
Person decodedPerson = Person.decode(personBytes);

// Print the person's name
println("The person's name is " + decodedPerson.name);