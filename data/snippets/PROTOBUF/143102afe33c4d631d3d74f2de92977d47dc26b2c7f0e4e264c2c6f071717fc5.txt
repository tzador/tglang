message Person {
  string name = 1;  // name field with field number 1
  int32 id = 2;  // unique id field with field number 2
  repeated string phone_numbers = 3;  // repeated field for phone numbers with field number 3
  Address address = 4;  // nested message field for address with field number 4

  enum Occupation {  // enum to list possible occupation options
    ENGINEER = 0;
    DOCTOR = 1;
    TEACHER = 2;
  }

  Occupation occupation = 5;  // enum field with field number 5

  map<string, string> email_addresses = 6;  // map field for storing email addresses with field number 6
}

message Address {
  string street = 1;  // street field with field number 1
  string city = 2;  // city field with field number 2
  string state = 3;  // state field with field number 3
  int32 zip_code = 4;  // zip code field with field number 4
}

service PersonService {  // service for interacting with Person messages
  rpc GetPerson(PersonRequest) returns (PersonResponse) {}  // rpc method to get a Person message

  rpc AddPerson(Person) returns (PersonResponse) {}  // rpc method to add a Person message

  rpc UpdatePerson(UpdatePersonRequest) returns (PersonResponse) {}  // rpc method to update a Person message

  rpc DeletePerson(DeletePersonRequest) returns (DeletePersonResponse) {}  // rpc method to delete a Person message
}

message PersonRequest {
  int32 person_id = 1;  // person id field with field number 1
}

message PersonResponse {
  Person person = 1;  // person field with field number 1
  string message = 2;  // optional success message field with field number 2
}

message UpdatePersonRequest {
  int32 person_id = 1;  // person id field with field number 1
  Person updated_person = 2;  // updated person field with field number 2
}

message DeletePersonRequest {
  int32 person_id = 1;  // person id field with field number 1
}

message DeletePersonResponse {
  bool success = 1;  // boolean field to indicate success with field number 1
}