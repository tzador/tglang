message Person { // starts a new message
  required string name = 1; // this field is required and has a type of string with tag number 1
  required int32 id = 2; // this field is required and has a type of 32-bit signed integer with tag number 2
  optional string email = 3; // this field is optional and has a type of string with tag number 3
  repeated PhoneNumber phone = 4; // this field can be repeated and contains a message type PhoneNumber with tag number 4

  message PhoneNumber { // starts a new nested message
    required string number = 1; // this field is required and has a type of string with tag number 1
    optional Type type = 2; // this field is optional and has a message type Type with tag number 2

    enum Type { // defines an enum type
      HOME = 0; // enum value HOME with tag number 0
      WORK = 1; // enum value WORK with tag number 1
      MOBILE = 2; // enum value MOBILE with tag number 2
    }
  }
}

// example usage of the Person message
Person person = Person.newBuilder()
                   .setName("John")
                   .setId(123)
                   .addPhone(
                       Person.PhoneNumber.newBuilder()
                           .setNumber("555-1234")
                           .setType(Person.PhoneNumber.Type.HOME))
                   .addPhone(
                       Person.PhoneNumber.newBuilder()
                           .setNumber("555-4321")
                           .setType(Person.PhoneNumber.Type.MOBILE))
                   .build(); // builds the Person message with the given values

person.writeTo(outputStream); // serializes the Person message and writes it to the given output stream