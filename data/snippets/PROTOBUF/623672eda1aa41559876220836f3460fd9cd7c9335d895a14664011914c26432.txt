// Define a message
message Person {
  string name = 1; // Field 1, string type
  int32 id = 2; // Field 2, int type
  string email = 3; // Field 3, string type
  repeated PhoneNumber phones = 4; // Field 4, repeated type for multiple phone numbers
  enum PhoneType { // Nested enum type
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }
  message PhoneNumber { // Nested message type
    string number = 1; // Field 1, string type
    PhoneType type = 2; // Field 2, enum type
  }
}

// Serialize message to bytes
Person john;
john.name = "John Smith";
john.id = 12345;
john.email = "jsmith@example.com";

Person::PhoneNumber *phone = john.add_phones(); // Add a phone number to the repeated field
phone->set_number("555-123-4567");
phone->set_type(Person::HOME); // Set phone type to HOME

// Serialize message to bytes and send over network
// Assume send() function exists
bytes = john.SerializePartialToString();
send(bytes);

// Deserialize bytes to message
receive(bytes); // Assume receive() function exists
Person jane;
jane.ParseFromString(bytes);

cout << jane.name << endl; // Output: "John Smith"
cout << jane.id << endl; // Output: 12345
cout << jane.email << endl; // Output: "jsmith@example.com"
cout << jane.phones(0).number << endl; // Output: "555-123-4567"
cout << jane.phones(0).type << endl; // Output: 1 (corresponding to Home enum value)