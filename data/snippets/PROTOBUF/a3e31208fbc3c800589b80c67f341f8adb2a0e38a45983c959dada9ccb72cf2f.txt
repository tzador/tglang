// Define a message type
message Person {
  string name = 1; // Name of the person, field ID = 1
  int32 age = 2; // Age of the person, field ID = 2
  repeated string hobbies = 3; // List of hobbies, field ID = 3 and can have multiple values
  Address address = 4; // Nested message type to represent address, field ID = 4
}

// Define a message type for address
message Address {
  string street = 1; // Street address, field ID = 1
  string city = 2; // City, field ID = 2
  int32 zip_code = 3; // Zip code, field ID = 3
}

// Create an instance of the Person message type
Person person = Person {
  name: "John Doe",
  age: 25,
  hobbies: ["reading", "writing", "playing guitar"],
  address: Address {
    street: "123 Main St",
    city: "New York City",
    zip_code: 10001
  }
};

// Serialize the person into a byte array
byte[] serializedPerson = person.SerializeToString();

// Deserialize the byte array into a new Person instance
Person newPerson = Person();
newPerson.ParseFromString(serializedPerson);

// Access fields of the person instance
string name = newPerson.name;
int32 age = newPerson.age;
repeated string hobbies = newPerson.hobbies;
Address address = newPerson.address;