// Create a message type for Person
message Person {
  // Unique ID for each person
  string id = 1;

  // Full name of the person
  string name = 2;

  // Age of the person
  int32 age = 3;

  // List of all the person's addresses
  repeated string addresses = 4;

  // Nested message type for phone number
  message PhoneNumber {
    string number = 1;
    string type = 2 [(validate.rules) = {
      // Ensure phone number is in valid format
      regex: "[0-9]{3}-[0-9]{3}-[0-9]{4}",
      // Display error message if format is not valid
      error message: "Phone number must be in the format of xxx-xxx-xxxx"
    }];
  }

  // List of all the person's phone numbers
  repeated PhoneNumber phone_numbers = 5;
}

// Create a message type for Address
message Address {
  // Unique ID for each address
  string id = 1;

  // Street number and name
  string street = 2;

  // City
  string city = 3;

  // State
  string state = 4;

  // Zip code
  int32 zip_code = 5;
}

// Create an enum for Person's gender
enum Gender {
  FEMALE = 0;
  MALE = 1;
}

// Create a message type for Employee, inherits from Person
message Employee {
  extends Person {
    // Job title of employee
    string job_title = 1;

    // Salary of employee
    double salary = 2;

    // Employee's gender
    Gender gender = 3;
  }
}