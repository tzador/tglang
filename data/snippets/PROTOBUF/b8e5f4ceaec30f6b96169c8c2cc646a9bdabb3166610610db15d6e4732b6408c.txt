// Define the message structure
message Student {
  string name = 1; // Unique identifier for the student, assigned by server
  int32 id = 2; // Student's ID number
  string email = 3; // Email address of the student
  repeated string classes = 4; // List of classes the student is enrolled in
  map<string, int32> grades = 5; // Map of class names to corresponding grades
}

// Encode the message into a byte array
Student stu = new Student();
stu.name = "John Smith";
stu.id = 12345;
stu.email = "johnsmith@example.com";
stu.classes = ["Math", "Science", "English"];
stu.grades = {"Math": 95, "Science": 88, "English": 90};

byte[] encodedStu = stu.encode();

// Decode the message from a byte array
Student decodedStu = Student.decode(encodedStu);

// Accessing individual fields
string stuName = decodedStu.name; // "John Smith"
int32 stuID = decodedStu.id; // 12345
string stuEmail = decodedStu.email; // "johnsmith@example.com"

// Modifying individual fields
decodedStu.id = 67890;
decodedStu.email = "jsmith@example.com";

// Encoding and decoding using a stream
Student anotherStu = new Student();
anotherStu.name = "Jane Doe";
anotherStu.id = 24680;
anotherStu.email = "janedoe@example.com";
anotherStu.classes = ["History", "Art"];
anotherStu.grades = {"History": 92, "Art": 85};

// Create a byte output stream
ByteArrayOutputStream output = new ByteArrayOutputStream();

// Encode the message and write it to the output stream
anotherStu.encodeTo(output);

// Decode the message from the output stream
Student decodedAnotherStu = Student.decodeFrom(output.toByteArray());