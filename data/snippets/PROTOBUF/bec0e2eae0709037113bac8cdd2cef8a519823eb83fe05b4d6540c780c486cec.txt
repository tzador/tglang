syntax = "proto2"; //declaring the syntax version for the protocol buffer

package person; //declaring the package name

message Person { //defining the message type
  required string name = 1; //defining a required field of type string with a field number of 1
  required int32 age = 2; //defining a required field of type integer with a field number of 2
  optional string email = 3; //defining an optional field of type string with a field number of 3

  enum PhoneType { //defining an enumeration of phone types
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  message PhoneNumber { //defining a nested message type for phone numbers
    required string number = 1; //defining a required field of type string with a field number of 1
    optional PhoneType type = 2; //defining an optional field of type PhoneType with a field number of 2
  }
  repeated PhoneNumber phone = 4; //defining a repeated field of type PhoneNumber with a field number of 4
  optional bool isVerified = 5 [default = false]; //defining an optional field of type boolean with a field number of 5 and a default value of false
}

message Address { //defining another message type for addresses
  required string street = 1; //defining a required field of type string with a field number of 1
  required string city = 2; //defining a required field of type string with a field number of 2
  optional string state = 3; //defining an optional field of type string with a field number of 3
  optional string country = 4; //defining an optional field of type string with a field number of 4
}

message Employee { //defining a message type for employees
  required Person person = 1; //defining a required field of type Person with a field number of 1
  required Address address = 2; //defining a required field of type Address with a field number of 2
  repeated string position = 3; //defining a repeated field of type string with a field number of 3
  optional int32 salary = 4; //defining an optional field of type integer with a field number of 4
}

service EmployeeService { //defining a service for managing employees
  rpc GetEmployee(EmployeeRequest) returns (EmployeeResponse); //defining a remote procedure call to get employee data from a request and return an employee response
  rpc AddEmployee(Employee) returns (EmployeeResponse); //defining a remote procedure call to add a new employee and return an employee response
  rpc UpdateEmployee(Employee) returns (EmployeeResponse); //defining a remote procedure call to update an existing employee and return an employee response
}

message EmployeeRequest { //defining a message type for employee requests
  required int32 employeeID = 1; //defining a required field of type integer with a field number of 1
  required string requestType = 2; //defining a required field of type string with a field number of 2
}

message EmployeeResponse { //defining a message type for employee responses
  required bool success = 1; //defining a required field of type boolean with a field number of 1
  optional string message = 2; //defining an optional field of type string with a field number of 2
  optional Employee employee = 3; //defining an optional field of type Employee with a field number of 3
}

service AddressService { //defining a service for managing addresses
  rpc GetAddress(AddressRequest) returns (AddressResponse); //defining a remote procedure call to get address data from a request and return an address response
  rpc AddAddress(Address) returns (AddressResponse); //defining a remote procedure call to add a new address and return an address response
  rpc UpdateAddress(Address) returns (AddressResponse); //defining a remote procedure call to update an existing address and return an address response
}

message AddressRequest { //defining a message type for address requests
  required int32 employeeID = 1; //defining a required field of type integer with a field number of 1
  required string requestType = 2; //defining a required field of type string with a field number of 2
  optional int32 addressID = 3; //defining an optional field of type integer with a field number of 3
}

message AddressResponse { //defining a message type for address responses
  required bool success = 1; //defining a required field of type boolean with a field number of 1
  optional string message = 2; //defining an optional field of type string with a field number of 2
  optional Address address = 3; //defining an optional field of type Address with a field number of 3
}