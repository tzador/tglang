// Define message structure
message Person {
  string name = 1; // Unique field number, used for encoding
  int32 id = 2; // Index of field in message
  string email = 3; // Optional field, can be omitted in encoding
}

// Encode a Person message
// Takes in a Person object as input
Person.encode = function (person) {
  // Create encoder stream
  var encoder = new ProtoEncoder();

  // Encode fields in order of field number
  encoder.writeString(person.name, 1);
  encoder.writeInt32(person.id, 2);
  // Check if email field exists before encoding
  if (person.email) {
    encoder.writeString(person.email, 3);
  }

  // Return encoded message as bytes
  return encoder.finish();
}

// Decode a Person message
// Takes in bytes as input
Person.decode = function (bytes) {
  // Create decoder stream
  var decoder = new ProtoDecoder(bytes);

  // Create empty Person object
  var person = new Person();

  // Decode fields in order of field number
  // Use try-catch to handle missing fields
  try {
    person.name = decoder.readString(1);
    person.id = decoder.readInt32(2);
    person.email = decoder.readString(3);
  } catch (e) {
    // Field is missing, do nothing
  }

  // Return decoded Person object
  return person;
}

// Example usage
var person = new Person();
person.name = "John";
person.id = 1234;
person.email = "john@example.com";

// Encode Person object
var encoded = Person.encode(person);

// Print encoded bytes
console.log("Encoded message:", encoded);

// Decode bytes into Person object
var decoded = Person.decode(encoded);

// Print decoded Person object
console.log("Decoded message:", decoded);