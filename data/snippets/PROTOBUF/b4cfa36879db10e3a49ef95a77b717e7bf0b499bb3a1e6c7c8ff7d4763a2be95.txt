// Define a message with multiple fields
syntax = "proto3";
package example;

message Person {
    string name = 1; // field with type string and field number 1
    int32 age = 2; // field with type int32 and field number 2
    repeated string hobbies = 3; // repeated field with type string and field number 3
    Address address = 4; // field with type Address message and field number 4

    message Address { // nested message
        string street = 1; // field with type string and field number 1
        string city = 2; // field with type string and field number 2
        string country = 3; // field with type string and field number 3
    }
}

// Encode a Person message to bytes
Person person = new Person(); // create a new instance of Person message
person.name = "John"; // set value of field name to John
person.age = 30; // set value of field age to 30
person.hobbies.push_back("Reading"); // add value "Reading" to repeated field hobbies
person.hobbies.push_back("Coding"); // add value "Coding" to repeated field hobbies
Person.Address address = new Person.Address(); // create a new instance of nested message Address
address.street = "123 Main St"; // set value of field street to 123 Main St
address.city = "New York"; // set value of field city to New York
address.country = "USA"; // set value of field country to USA
person.address = address; // set value of field address to nested message address
byte[] bytes = person.SerializeToBytes(); // serialize Person message to bytes

// Decode bytes to a Person message
Person decodedPerson = Person.parseFrom(bytes); // parse bytes and create a new instance of Person message
string name = decodedPerson.name; // get value of field name from new instance
int32 age = decodedPerson.age; // get value of field age from new instance
repeated string hobbies = decodedPerson.hobbies; // get value of field hobbies from new instance
Person.Address address = decodedPerson.address; // get value of field address from new instance
string street = address.street; // get value of field street from nested message address
string city = address.city; // get value of field city from nested message address
string country = address.country; // get value of field country from nested message address