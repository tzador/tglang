message Person {
  string name = 1; //field 1 represents name
  int32 id = 2; //field 2 represents ID
  repeated string email = 3; //field 3 represents email, can have multiple values
  enum PhoneType { //create an enumeration for phone types
    HOME = 0; //enum value for home phone
    WORK = 1; //enum value for work phone
    MOBILE = 2; //enum value for mobile phone
  }
  message PhoneNumber { //create a nested message for phone numbers
    string number = 1; //field 1 represents phone number
    PhoneType type = 2; //field 2 represents phone type, must be one of the enum values
  }
  repeated PhoneNumber phones = 4; //field 4 represents phone numbers, can have multiple values
}
//Example of encoding a Person message
Person person = Person.newBuilder()
    .setName("John Smith")
    .setId(12345)
    .addEmail("johnsmith@example.com")
    .addEmail("smithj@example.com")
    .addPhones(Person.PhoneNumber.newBuilder()
        .setNumber("555-1234")
        .setType(Person.PhoneType.HOME))
    .addPhones(Person.PhoneNumber.newBuilder()
        .setNumber("555-4321")
        .setType(Person.PhoneType.MOBILE))
    .build();
byte[] serializedPerson = person.toByteArray(); //convert Person message to byte array for transmission/storage
//Example of decoding a Person message
Person decodedPerson = Person.parseFrom(serializedPerson); //convert byte array back to Person message
System.out.println(decodedPerson.getName()); //prints "John Smith"
System.out.println(decodedPerson.getId()); //prints "12345"
System.out.println(decodedPerson.getEmailList()); //prints "[johnsmith@example.com, smithj@example.com]"
System.out.println(decodedPerson.getPhonesList().get(0).getNumber()); //prints "555-1234"
System.out.println(decodedPerson.getPhonesList().get(0).getType()); //prints "HOME" enum value