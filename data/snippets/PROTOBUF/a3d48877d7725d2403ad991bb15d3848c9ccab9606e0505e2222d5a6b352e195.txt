// Define a message type called 'Person'
message Person {

    // Specifying the fields in the message
    // Each field has a unique numerical field number and a data type
    // The field number will be used for efficient encoding and decoding of messages
    // In this case, the field numbers are in the range of 1 to 5
    int32 id = 1; // unique numerical field number and data type of 'int32'
    string name = 2; // unique numerical field number and data type of 'string'
    string email = 3; // unique numerical field number and data type of 'string'
    repeated int32 phone_nums = 4; // repeating field for list of 'int32' values
    repeated Address addresses = 5; // repeating field for nested message type

    // Define a nested message type called 'Address'
    message Address {
        string street_address = 1; // unique numerical field number and data type of 'string'
        string city = 2; // unique numerical field number and data type of 'string'
        string state = 3; // unique numerical field number and data type of 'string'
        string country = 4; // unique numerical field number and data type of 'string'
        int32 zip_code = 5; // unique numerical field number and data type of 'int32'
    }
}

// Create an instance of the 'Person' message type
Person person = {
    id: 1234,
    name: "John Doe",
    email: "johndoe@example.com",
    phone_nums: [1234567890, 0987654321],
    addresses: [
        {
            street_address: "123 Main St",
            city: "New York City",
            state: "New York",
            country: "USA",
            zip_code: 10001
        },
        {
            street_address: "456 Park Ave",
            city: "Boston",
            state: "Massachusetts",
            country: "USA",
            zip_code: 02108
        }
    ]
}

// Serialize the 'Person' message into a byte buffer 
// so it can be transmitted over a network or saved to a file
bytes person_bytes = person.SerializeToString();

// Deserialize the byte buffer back into a 'Person' message
// This can be done on the receiving end of a network transmission or loading from a file
Person person_from_bytes = Person.ParseFromString(person_bytes);