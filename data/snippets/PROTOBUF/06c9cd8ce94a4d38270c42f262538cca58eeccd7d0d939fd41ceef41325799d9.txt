syntax = "proto3"; //setting the protobuf syntax to v3

enum Gender { //defining an enum for gender
    MALE = 0;  //assigning enum values
    FEMALE = 1;
    OTHER = 2;
}

message Person {  //defining a message type for a person
    int64 id = 1; //assigning a tag number for identification
    string name = 2; //assigning a tag number for identification
    int32 age = 3; //assigning a tag number for identification
    Gender gender = 4; //assigning a tag number for identification
}

message Address { //defining a message type for an address
    string street = 1; //assigning a tag number for identification
    string city = 2; //assigning a tag number for identification
    string state = 3; //assigning a tag number for identification
}

message Contact { //defining a message type for a contact
    Person person = 1; //assigning a tag number for identification 
    Address address = 2; //assigning a tag number for identification
    repeated string phone_number = 3; //assigning a tag number for identification and making this field repeatable
}

service ContactBook { //defining a service for contact book
    rpc AddContact (Contact) returns (bool); 
    //rpc (remote procedure call) to add a contact, takes in a Contact message and returns a boolean value
    rpc UpdateContact (Contact) returns (bool); 
    //rpc to update a contact, takes in a Contact message and returns a boolean value
    rpc DeleteContact (int64) returns (bool);
    //rpc to delete a contact, takes in an int64 value representing the contact's id and returns a boolean value
    rpc SearchContact (string) returns (Contact);
    //rpc to search for a contact, takes in a string value representing the contact's name and returns a Contact message
}

message ContactList { //defining a message type for a list of contacts
    repeated Contact contacts = 1; //making this field repeatable and assigning a tag number for identification
    int32 total_count = 2; //assigning a tag number for identification
}

//example usage of ContactBook service:
Contact new_contact = { //creating a new Contact message
    person: {
        id: 12345,
        name: "John Doe",
        age: 30,
        gender: MALE //referencing the enum value
    },
    address: {
        street: "123 Main St",
        city: "New York",
        state: "NY"
    },
    phone_number: "123-456-7890"
};

//adding a new contact using the AddContact rpc
ContactBook.AddContact(new_contact); 

//updating an existing contact using the UpdateContact rpc
new_contact.person.name = "Jane Doe";
ContactBook.UpdateContact(new_contact);

//deleting a contact using the DeleteContact rpc
ContactBook.DeleteContact(12345);

//searching for a contact using the SearchContact rpc
Contact searched_contact = ContactBook.SearchContact("John Doe");