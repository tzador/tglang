// Define a message type called Employee
message Employee {
    // Unique ID of the employee
    int32 id = 1;
    // Full name of the employee
    string name = 2;
    // Email address of the employee
    string email = 3;
    // List of phone numbers for the employee
    repeated string phone_numbers = 4;
    // Address of the employee
    Address address = 5;
}

// Define a nested message type called Address
message Address {
    // Street name
    string street = 1;
    // City name
    string city = 2;
    // State name
    string state = 3;
    // Zip code
    int32 zip_code = 4;
}

// Create an instance of the Employee message
Employee employee = Employee {
    id: 1,
    name: "John Doe",
    email: "john.doe@example.com",
    phone_numbers: ["555-555-5555", "555-123-4567"],
    address: {
        street: "123 Main St",
        city: "New York",
        state: "NY",
        zip_code: 10001
    }
};

// Serialize the employee object to a byte array
bytes serialized_employee = employee.SerializeAsString();

// Deserialize the byte array back into an Employee object
Employee deserialized_employee = Employee();
deserialized_employee.ParseFromString(serialized_employee);

// Print the deserialized employee's name and email
printf("Name: %s \nEmail: %s", deserialized_employee.name, deserialized_employee.email);