// Define a message type named "Person"
message Person {
  string name = 1; // Unique ID for the person
  int32 age = 2;   // Age in years
  string address = 3; // Address of the person
  repeated string hobbies = 4;  // List of hobbies of the person
  message Job {  // Nested message type
    string company = 1; // Company name where person works
    string position = 2; // Job position
    string location = 3; // Location of the job
  }
  repeated Job jobs = 5; // List of jobs the person has had
  enum SkillLevel { // Enum for skill level
    BEGINNER = 0;
    INTERMEDIATE = 1;
    ADVANCED = 2;
  }
  map<string, SkillLevel> skills = 6; // Map for person's skills and skill level
  oneof contact { // OneOf to represent either phone number or email for contact info
    string phone_number = 7;
    string email = 8;
  }
}

// Create a new instance of Person
Person new_person = Person();

// Set values for the person instance
new_person.name = "John Doe";
new_person.age = 25;
new_person.address = "123 Main Street";
new_person.hobbies = ["reading", "hiking"];

// Create a new job and add it to the jobs list
Person.Job new_job = Person.Job();
new_job.company = "ABC Company";
new_job.position = "Software Engineer";
new_job.location = "New York";
new_person.jobs.add(new_job);

// Add skills to the skills map
new_person.skills["coding"] = Person.SkillLevel.ADVANCED;
new_person.skills["cooking"] = Person.SkillLevel.INTERMEDIATE;

// Set the contact info using the OneOf
new_person.contact.phone_number = "555-123-4567"; // Using phone number for contact
// OR
new_person.contact.email = "johndoe@example.com"; // Using email for contact

// Serialize the person instance
bytes serialized_person = new_person.SerializeToString();