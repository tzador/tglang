syntax = "proto3";

// Imports
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto"; 

// Defines a message to hold user information
message User {
  // User ID field
  string id = 1;
  // User's first name field
  string first_name = 2;
  // User's last name field
  string last_name = 3;
  // User's email field
  string email = 4;
  // User's age field
  int32 age = 5;
  // User's birthday field
  google.protobuf.Timestamp birthday = 6;
  // User's address field
  string address = 7;
  // User's phone number field
  repeated string phone_numbers = 8;
  // User's favorite colors field
  repeated string favorite_colors = 9;
  // User's profile image field
  bytes profile_image = 10;
  // User's friend list
  repeated User friends = 11;
}

// Defines a message for creating a new user
message CreateUserRequest {
  // New user's information
  User user = 1;
  // User's password
  string password = 2;
  // User's security questions
  repeated string security_questions = 3;
  // User's security answers
  repeated string security_answers = 4;
}

// Defines a message for responding to a create user request
message CreateUserResponse {
  // Error message in case of failure
  string error_message = 1;
  // New user's information if successful
  User user = 2;
}

// Defines a service for user management
service UserService {
  // Creates a new user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  // Gets a specific user by ID
  rpc GetUserById(string) returns (User);
  // Updates a user's information
  rpc UpdateUser(User) returns (User);
  // Deletes a user
  rpc DeleteUser(string) returns (User);
}

// Defines a message for creating a new group
message CreateGroupRequest {
  // Group name
  string name = 1;
  // Group members
  repeated User members = 2;
}

// Defines a message for responding to a create group request
message CreateGroupResponse {
  // Error message in case of failure
  string error_message = 1;
  // New group's information if successful
  Group group = 2;
}

// Defines a service for group management
service GroupService {
  // Creates a new group
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
  // Gets a specific group by name
  rpc GetGroupByName(string) returns (Group);
  // Updates a group's information
  rpc UpdateGroup(Group) returns (Group);
  // Deletes a group
  rpc DeleteGroup(string) returns (Group);
}