// Person message which contains information about a person
message Person {
  string name = 1; // person's name
  int32 age = 2; // person's age
  repeated string favorite_colors = 3; // person's favorite colors
  repeated Address addresses = 4; // person's addresses, can have multiple
}

// Address message which contains information about a person's address
message Address {
  string street = 1; // street name
  string city = 2; // city name
  string state = 3; // state name
  int32 zip_code = 4; // zip code
}

// Create a new Person instance
Person person = Person {
  name: "John Doe",
  age: 25,
  favorite_colors: ["blue", "green"],
  addresses: [
    Address {
      street: "123 Main St",
      city: "New York",
      state: "NY",
      zip_code: 12345
    },
    Address {
      street: "456 Spring St",
      city: "San Francisco",
      state: "CA",
      zip_code: 67890
    }
  ]
}

// Encode the Person instance into a byte array
bytes encoded_person = person.SerializeToString();

// Decode the byte array back into a Person instance
Person decoded_person = Person();
decoded_person.ParseFromString(encoded_person);

// Print the person's name and age
std::cout << "Person's name: " << decoded_person.name << std::endl;
std::cout << "Person's age: " << decoded_person.age << std::endl;