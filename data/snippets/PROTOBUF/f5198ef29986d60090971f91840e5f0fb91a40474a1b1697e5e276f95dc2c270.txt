// Define a message Person
message Person {
  // fields
  required string name = 1;
  required int32 age = 2;
  optional string occupation = 3;
  repeated string email = 4;
}

// Define a nested message Address
message Address {
  required string street = 1;
  required string city = 2;
  required string state = 3;
  required int32 zip_code = 4;
}

// Define an enum for education level
enum EducationLevel {
  PRIMARY = 0;
  SECONDARY = 1;
  VOCATIONAL = 2;
  BACHELORS = 3;
  MASTERS = 4;
  DOCTORATE = 5;
}

// Add fields to the Person message
message Person {
  // ...
  optional Address address = 5;
  repeated EducationLevel education_level = 6;
}

// Define a service to handle querying and updating Person data
service PersonService {
  // Get a specific person by name
  rpc GetPersonByName(GetPersonByNameRequest) returns (GetPersonByNameResponse) {}
  
  // Update a person's email
  rpc UpdateEmail(UpdateEmailRequest) returns (UpdateEmailResponse) {}
}

// Define request and response messages for GetPersonByName
message GetPersonByNameRequest {
  required string name = 1;
}

message GetPersonByNameResponse {
  required Person person = 1;
}

// Define request and response messages for UpdateEmail
message UpdateEmailRequest {
  required string name = 1;
  required string new_email = 2;
}

message UpdateEmailResponse {
  required bool success = 1;
}

// Use Protobuf syntax to serialize and deserialize a Person message
syntax = "proto2";

message Person {
  // ...
}

// Create a new Person message and set values for its fields
Person new_person = Person {
  name: "John Doe";
  age: 40;
  occupation: "Software Engineer";
  email: "john.doe@example.com";
  email: "johndoe@gmail.com";
  address: {
    street: "123 Main St";
    city: "New York";
    state: "NY";
    zip_code: 10001;
  }
  education_level: [EducationLevel.PRIMARY, EducationLevel.BACHELORS, EducationLevel.DOCTORATE];
}

// Serialize the message into a byte array
byte[] serialized_person = new_person.toByteArray();

// Deserialize the byte array back into a Person message
Person deserialized_person = Person.parseFrom(serialized_person);