// Defining a message
message Person {
  string name = 1;
  int32 id = 2;
  string email = 3;
  repeated Phone phones = 4;
}

// Defining a nested message
message Phone {
  int32 number = 1;
  PhoneType type = 2;
  enum PhoneType {
    MOBILE = 1;
    HOME = 2;
    WORK = 3;
  }
}

// Defining a oneof field
message Contact {
  int32 id = 1;
  oneof contact_info {
    string email = 2;
    Phone phone = 3;
  }
}

// Defining an enum
enum WEEKDAYS {
  MONDAY = 0;
  TUESDAY = 1;
  WEDNESDAY = 2;
  THURSDAY = 3;
  FRIDAY = 4;
  SATURDAY = 5;
  SUNDAY = 6;
}

// Defining a service
service MessageService {
  rpc SendMessage(Person) returns (Contact) {}
  rpc ReceiveMessage(Contact) returns (Person) {}
  rpc DeleteMessage(Contact) returns (bool) {}
}

// Encoding and decoding a message
Person person = Person {
  name: "John Doe",
  id: 12345,
  email: "johndoe@example.com",
  phones: {
    number: 123456789,
    type: PhoneType.MOBILE
  }
};

bytes encodedPerson = person.serialize();

message DecodedPerson {
  string name = 1;
  int32 id = 2;
  string email = 3;
  repeated Phone phones = 4;
}

DecodedPerson decodedPerson = DecodedPerson.parseFrom(encodedPerson);

// Defining an extension
extend Person {
  string address = 5;
}

// Using the extension
Person personWithAddress = Person {
  name: "Jane Doe",
  id: 54321,
  email: "janedoe@example.com",
  phones: {
    number: 987654321,
    type: PhoneType.WORK
  },
  extensions 1000 to 1999 = {
    address: "123 Main St."
  }
};