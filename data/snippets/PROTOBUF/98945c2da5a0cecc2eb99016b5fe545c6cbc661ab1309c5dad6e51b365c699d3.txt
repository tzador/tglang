syntax = "proto3";

// Define a message that contains various data types
message TestDataTypes {
  string name = 1;
  int32 age = 2;
  repeated float scores = 3;
  bool is_valid = 4;
  enum color { RED = 0; GREEN = 1; BLUE = 2;} // Define an enum
  map<string, int> phone_numbers = 5; // Define a map
  oneof choice {
    int32 number = 6;
    string word = 7;
  } // Define a oneof field
}

// Define a message that contains nested messages and a reserved field
message Person {
  string name = 1;
  int32 age = 2;
  address personal_address = 3; // Define a nested message
  reserved 4; // Reserve a field for future use
}

// Define a message that uses extensions
message Employee {
  extend TestDataTypes {
    int32 id = 101;
  } // Define an extension
  string name = 1;
  int32 age = 2;
  string job_title = 3;
  int32 salary = 4;
  optional string department = 5; // Define an optional field
}

// Define a service that contains rpc methods
service EmployeeService {
  rpc GetEmployeeById (EmployeeRequest) returns (EmployeeResponse); // Define an rpc method
  rpc GetAllEmployees (AllEmployeesRequest) returns (stream Employee); // Define a streaming rpc method
  rpc SaveEmployee (stream Employee) returns (SaveEmployeeResponse); // Define a client streaming rpc method
  rpc DeleteEmployee (DeleteEmployeeRequest) returns (DeleteEmployeeResponse); // Define a server streaming rpc method
}

// Define a message to be used as request and response type in rpc methods
message EmployeeRequest {
  int32 id = 1;
}

message EmployeeResponse {
  Employee employee = 1;
}

message AllEmployeesRequest {
  int32 department_id = 1;
}

message SaveEmployeeResponse {
  bool success = 1;
}

message DeleteEmployeeRequest {
  int32 id = 1;
}

message DeleteEmployeeResponse {
  bool success = 1;
}