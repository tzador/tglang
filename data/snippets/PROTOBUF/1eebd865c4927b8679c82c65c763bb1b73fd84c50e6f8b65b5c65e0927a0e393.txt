// defining a custom message type in protobuf
message Person {
  string name = 1; // field 1 is of type string and named "name"
  int32 id = 2; // field 2 is of type int32 and named "id"
  string email = 3; // field 3 is of type string and named "email"
}

// defining a nested message in protobuf
message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string country = 4;
}

// defining a repeated field in protobuf
repeated Address addresses = 4;

// defining a oneof field in protobuf
oneof ContactDetails {
  string phone = 1;
  string email = 2;
}

// defining an enum in protobuf
enum PhoneType {
  MOBILE = 0;
  HOME = 1;
  WORK = 2;
}

// defining a message with multiple fields and types in protobuf
message Employee {
  string name = 1;
  int32 age = 2;
  string department = 3;
  repeated Address addresses = 4;
  oneof ContactDetails {
    string phone = 5;
    string email = 6;
  }
  map<string, string> skills = 7; // map field with key and value of type string
  repeated PhoneType phone_types = 8; // repeated field with enum type
}

// declaring a protobuf message instance
Person person = Person {
  name: "John Smith",
  id: 123456,
  email: "johnsmith@example.com",
  addresses: [
    Address {
      street: "123 Main Street",
      city: "New York",
      state: "NY",
      country: "USA"
    },
    Address {
      street: "456 Park Avenue",
      city: "Chicago",
      state: "IL",
      country: "USA"
    }
  ],
  phone: "(123)456-7890"
};

// serializing the message to binary format
bytes serializedPerson = person.SerializeToString();

// deserializing the binary format back into a Person message
Person deserializedPerson = Person();
deserializedPerson.ParseFromString(serializedPerson);