// Define a message to represent a person
message Person {
  int32 id = 1; // Unique identifier for the person
  string name = 2; // Name of the person
  int32 age = 3; // Age of the person
  repeated Person friends = 4; // List of friends for the person
  enum Gender { // Enum to represent the gender of the person
    MALE = 1;
    FEMALE = 2;
    OTHER = 3;
  }
  Gender gender = 5; // Gender of the person
  PersonAddress address = 6; // Nested message to represent the person's address

  // Nested message to represent the person's address
  message PersonAddress {
    string street = 1; // Street name
    string city = 2; // City name
    string state = 3; // State name
    int32 zip_code = 4; // Zip code
  }
}

// Generate a protobuf message for the person
Person person = Person {
  id: 123,
  name: "John Smith",
  age: 25,
  friends: [
    Person { // Adding a friend
      id: 456,
      name: "Jane Doe"
    }
  ],
  gender: Person.Gender.MALE, // Assigning an enum value
  address: Person.PersonAddress { // Assigning values for nested message
    street: "123 Main St",
    city: "New York",
    state: "NY",
    zip_code: 10001
  }
};

// Serialize the message to send over network
bytes serialized_person = person.SerializeAsString();

// Deserialize the received message
Person received_person = Person.ParseFromString(serialized_person);

// Accessing values from received message
int32 received_id = received_person.id; // 123
string received_name = received_person.name; // "John Smith"
int32 received_age = received_person.age; // 25
Person.Gender received_gender = received_person.gender; // Person.Gender.MALE
string received_street = received_person.address.street; // "123 Main St"
string received_city = received_person.address.city; // "New York"
string received_state = received_person.address.state; // "NY"
int32 received_zip_code = received_person.address.zip_code; // 10001