syntax = "proto3"; // sets syntax version as proto3

// creates message type Person with nested fields
message Person {
    string name = 1; // name field of type string with tag number 1
    int32 age = 2; // age field of type int32 with tag number 2
    repeated string hobbies = 3; // hobbies field of type repeated string with tag number 3
    Address address = 4; // address field of type Address with tag number 4

    // creates nested message type Address with its own fields
    message Address {
        string street = 1; // street field of type string with tag number 1
        string city = 2; // city field of type string with tag number 2
        int32 zip_code = 3; // zip_code field of type int32 with tag number 3
    }
}

// creates message type Book with nested fields
message Book {
    string title = 1; // title field of type string with tag number 1
    repeated string authors = 2; // authors field of type repeated string with tag number 2
    int32 year = 3; // year field of type int32 with tag number 3
    Publisher publisher = 4; // publisher field of type Publisher with tag number 4
    repeated Genre genres = 5; // genres field of type repeated enum (defined below) with tag number 5

    // creates nested message type Publisher with its own fields
    message Publisher {
        string name = 1; // name field of type string with tag number 1
        string location = 2; // location field of type string with tag number 2
    }

    // creates an enum type Genre with specified values
    enum Genre {
        MYSTERY = 0;
        ROMANCE = 1;
        THRILLER = 2;
        HORROR = 3;
        FANTASY = 4;
    }
}

// creates a request message type
message BookRequest {
    Book book = 1; // book field of type Book with tag number 1
}

// creates a response message type
message BookResponse {
    string message = 1; // message field of type string with tag number 1
    repeated Book books = 2; // books field of type repeated Book with tag number 2
}

// creates a service with RPC (Remote Procedure Call) methods
service BookService {
    rpc GetBook(BookRequest) returns (BookResponse); // defines RPC method GetBook with request type BookRequest and response type BookResponse
    rpc AddBook(BookRequest) returns (BookResponse); // defines RPC method AddBook with request type BookRequest and response type BookResponse
    rpc UpdateBook(BookRequest) returns (BookResponse); // defines RPC method UpdateBook with request type BookRequest and response type BookResponse
    rpc DeleteBook(BookRequest) returns (BookResponse); // defines RPC method DeleteBook with request type BookRequest and response type BookResponse
}

// creates a client-side file containing methods to communicate with the BookService
syntax = "proto2";

// imports necessary packages
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// creates message type User with nested fields
message User {
    string username = 1; // username field of type string with tag number 1
    string password = 2; // password field of type string with tag number 2
    string email = 3; // email field of type string with tag number 3
    google.protobuf.Timestamp created_at = 4; // created_at field of type Timestamp with tag number 4
    google.protobuf.Duration session_timeout = 5; // session_timeout field of type Duration with tag number 5
}

// creates message type UserRequest for user login
message UserLoginRequest {
    string username = 1; // username field of type string with tag number 1
    string password = 2; // password field of type string with tag number 2
}

// creates message type UserResponse for user login
message UserLoginResponse {
    string message = 1; // message field of type string with tag number 1
    User user = 2; // user field of type User with tag number 2
}

// creates a request message type for creating a new user
message UserCreateRequest {
    User user = 1; // user field of type User with tag number 1
}

// creates a response message type for creating a new user
message UserCreateResponse {
    string message = 1; // message field of type string with tag number 1
    User user = 2; // user field of type User with tag number 2
}

// creates a request message type for updating a user
message UserUpdateRequest {
    string username = 1; // username field of type string with tag number 1
    string password = 2; // password field of type string with tag number 2
    string new_password = 3; // new_password field of type string with tag number 3
    string new_email = 4; // new_email field of type string with tag number 4
}

// creates a response message type for updating a user
message UserUpdateResponse {
    string message = 1; // message field of type string with tag number 1
    User user = 2; // user field of type User with tag number 2
}

// creates a request message type for deleting a user
message UserDeleteRequest {
    string username = 1; // username field of type string with tag number 1
    string password = 2; // password field of type string with tag number 2
}

// creates a response message type for deleting a user
message UserDeleteResponse {
    string message = 1; // message field of type string with tag number 1
    string status_code = 2; // status_code field of type string with tag number 2
}