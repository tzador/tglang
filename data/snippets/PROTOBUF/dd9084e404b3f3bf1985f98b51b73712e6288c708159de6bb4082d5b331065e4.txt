syntax = "proto3";	// defines the version of protobuf to be used
option java_outer_classname = "PersonProto";	// specifies the outer class name for generated Java code

enum Gender {	// defines an enum for the gender field
  MALE = 0;
  FEMALE = 1;
}

message Person {	// defines the message type 'Person'
  string name = 1;	// specifies a string type field called 'name' with field number 1
  int32 age = 2;	// specifies an int type field called 'age' with field number 2
  Gender gender = 3;	// specifies a field of the 'Gender' enum type with field number 3
  repeated string hobbies = 4;	// specifies a repeated field for hobbies, allowing for multiple values with field number 4
  map<string, int32> phone_numbers = 5;	// specifies a map field for phone numbers, mapping string keys to int values with field number 5
  oneof job {	// defines a 'oneof' field, meaning it can only have one of the specified field types
    string occupation = 6;	// specifies a string type field called 'occupation' within the 'oneof job' field
    string school = 7;	// specifies a string type field called 'school' within the 'oneof job' field
  }
  message Address {	// defines a nested message type 'Address' within 'Person'
    string street = 1;	// specifies a string type field called 'street' with field number 1
    string city = 2;	// specifies a string type field called 'city' with field number 2
    string state = 3;	// specifies a string type field called 'state' with field number 3
    string country = 4;	// specifies a string type field called 'country' with field number 4
    repeated int32 zip_codes = 5;	// specifies a repeated field for zip codes within the 'Address' message
  }
  Address address = 8;	// specifies a field for the 'Address' message type with field number 8
}

service PersonService {	// defines a service called 'PersonService'
  rpc GetPerson (PersonRequest) returns (PersonResponse);	// defines a rpc method called 'GetPerson' that takes in a 'PersonRequest' message and returns a 'PersonResponse' message
}

message PersonRequest {	// defines a message type 'PersonRequest'
  int32 id = 1;	// specifies an int type field called 'id' with field number 1
}

message PersonResponse {	// defines a message type 'PersonResponse'
  Person person = 1;	// specifies a field for the 'Person' message type with field number 1
  repeated string errors = 2;	// specifies a repeated field for errors with field number 2
}