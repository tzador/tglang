syntax = "proto3"; //specify the version of protobuf to be used

message Person { //create a message called Person
  int32 id = 1; //define field with identifier 1 and type int32
  string name = 2; //define field with identifier 2 and type string
  repeated string addresses = 3; //define repeated field with identifier 3 and type string
  Pets pets = 4; //define field with identifier 4 and type Pets

  enum Pets { //create an enum for different types of pets
    DOG = 0; //assign a value of 0 to DOG
    CAT = 1; //assign a value of 1 to CAT
    FISH = 2; //assign a value of 2 to FISH
  }
}

message Phone { //create a message called Phone
  string number = 1; //define field with identifier 1 and type string
  string type = 2; //define field with identifier 2 and type string
}

message Contact { //create a message called Contact
  int32 id = 1; //define field with identifier 1 and type int32
  string name = 2; //define field with identifier 2 and type string
  repeated Phone phones = 3; //define repeated field with identifier 3 and type Phone
  Person emergency_contact = 4; //define field with identifier 4 and type Person
}

service ContactService { //create a service called ContactService
  rpc AddContact (Contact) returns (Person) {}; //define an rpc method called AddContact that takes in a Contact and returns a Person
  rpc UpdateContact (Contact) returns (Person) {}; //define an rpc method called UpdateContact that takes in a Contact and returns a Person
  rpc DeleteContact (int32) returns (bool) {}; //define an rpc method called DeleteContact that takes in an int32 and returns a boolean
}

//example of sending a request using the above defined service and messages
Contact newContact = { //create a new Contact and populate its fields
  id: 123,
  name: "John Doe",
  phones: {
    { number: "123-456-7890", type: "work" },
    { number: "555-555-5555", type: "home"}
  },
  emergency_contact: { //create a new Person for the emergency contact field
    id: 456,
    name: "Jane Doe",
    addresses: { "123 Main St", "456 Maple Ave" },
    pets: Pets.CAT //set the value of the pets field using the enum
  }
};

ContactService service = new ContactService(); //create a new instance of the ContactService

//call the AddContact method and pass in the newContact as a parameter
Person addedPerson = service.AddContact(newContact); 

//Print out the returned Person object 
print(addedPerson); //expected output: Person(id: 123, name: "John Doe", addresses: {}, pets: Pets.CAT)

//example of receiving a request using the above defined service and messages
//receive a Contact object from the client
Contact requestContact = receiveContact(); //pretend this method receives the Contact object from the client

//call the UpdateContact method and pass in the received Contact as a parameter
Person updatedPerson = service.UpdateContact(requestContact);

//Print out the returned Person object
print(updatedPerson); //expected output: Person(id: 123, name: "John Doe", addresses: { "123 Main St", "456 Maple Ave" }, pets: Pets.CAT)

//example of error handling using the above defined service and messages
//receive an int32 from the client
int32 contactId = receiveContactId(); //pretend this method receives the int32 from the client

//call the DeleteContact method and pass in the received int32 as a parameter
bool isDeleted = service.DeleteContact(contactId);

//Print out the returned boolean value, which indicates whether the contact was successfully deleted or not
if (isDeleted) { //if true, contact was successfully deleted
  print("Contact deleted successfully."); 
} else { //if false, contact was not found in the database
  print("Contact not found."); 
}