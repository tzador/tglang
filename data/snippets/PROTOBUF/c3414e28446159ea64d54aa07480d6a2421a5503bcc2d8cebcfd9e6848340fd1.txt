// Create a Person message type
message Person {
  int32 id = 1; // unique ID for each person
  string name = 2; // person's name
  int32 age = 3; // person's age
  repeated string favorite_foods = 4; // list of favorite foods
  Address address = 5; // person's address
}

// Create an Address message type
message Address {
  string street = 1; // street name
  string city = 2; // city name
  string state = 3; // state name
  int32 zip_code = 4; // zip code
}

// Define an enum for Person's gender
enum Gender {
  MALE = 0;
  FEMALE = 1;
}

// Declare a field for gender in Person message
Person.gender = 6;

// Create a Car message type
message Car {
  string make = 1; // car's make
  string model = 2; // car's model
}

// Add a field for Car in Person message
Person.car = 7;

// Create a message for a list of Persons
message PersonList {
  repeated Person persons = 1; // list of Persons
}

// Create a variable for PersonList
PersonList people = 1;

// Add a person to the PersonList
Person person = Person(id: 1, name: "John Doe", age: 30, favorite_foods: ["Pizza", "Burgers"], address: Address(street: "Main St", city: "New York", state: "NY", zip_code: 12345), gender: MALE, car: Car(make: "Toyota", model: "Camry"));
people.persons.add(person);

// Encode the PersonList into binary format
bytes data = people.SerializeToString();

// Decode binary data into a new PersonList
PersonList decodedPeople = PersonList.parseFrom(data);

// Loop through the list of Persons
for (person in decodedPeople.persons) {
  // Print out person's name
  print(person.name);
}