syntax = "proto3";

message Person {
  string name = 1;
  int32 age = 2;
  repeated string hobbies = 3;
  Address address = 4;

  enum Gender {
    MALE = 0;
    FEMALE = 1;
  }
}

message Address {
  string street = 1;
  string city = 2;
  string state = 3;
}

service PersonService {
  rpc GetPerson(Empty) returns (Person) {}
  rpc AddPerson(Person) returns (Empty) {}
}

// This message is used as the input for the AddPerson rpc
message InputPerson {
  string name = 1;
  int32 age = 2;
  repeated string hobbies = 3;
  string street = 4;
  string city = 5;
  string state = 6;
}

// This message is returned from the GetPerson rpc
message OutputPerson {
  string name = 1;
  int32 age = 2;
  repeated string hobbies = 3;
  Address address = 4;
}

/* **NOTE**: In order to use the protobuf library in your
project, you will need to import the necessary dependencies
and version in your build file.

For example, in maven you would add the following to your
pom.xml file:

<dependencies>
    <dependency>
        <groupId>com.google.protobuf</groupId>
        <artifactId>protobuf-java</artifactId>
        <version>3.11.4</version>
    </dependency>
</dependencies> */

// Create a new person
Person person = Person.newBuilder()
    .setName("John Doe")
    .setAge(25)
    .addHobbies("reading")
    .addHobbies("hiking")
    .setAddress(Address.newBuilder()
        .setStreet("123 Main St")
        .setCity("Anytown")
        .setState("CA")
        .build())
    .build();

// Serialize the person into bytes
byte[] personBytes = person.toByteArray();

// Deserialize the bytes into a Person object
Person newPerson = Person.parseFrom(personBytes);

// Print out the person's name
System.out.println(newPerson.getName()); // Output: John Doe

// Create a person service client
PersonServiceGrpc.PersonServiceBlockingStub client = PersonServiceGrpc.newBlockingStub(channel);

// Make a rpc call to get a person
Person person = client.GetPerson(Empty.getDefaultInstance());

// Print out the person's name
System.out.println(person.getName()); // Output: John Doe

// Create an input person object
InputPerson inputPerson = InputPerson.newBuilder()
    .setName("Jane Smith")
    .setAge(30)
    .addHobbies("yoga")
    .setStreet("456 Main St")
    .setCity("Othertown")
    .setState("NY")
    .build();

// Make a rpc call to add the person
Empty response = client.AddPerson(inputPerson);

// Print success message
System.out.println("Person successfully added!"); // Output: Person successfully added!