// Define a message type
message Person {
  required string name = 1; // Name field with tag number 1
  required int32 id = 2; // Id field with tag number 2
  optional string email = 3; // Email field with tag number 3
  enum PhoneType { // Enum for phone number types
    HOME = 0;
    MOBILE = 1;
    WORK = 2;
  }
  repeated PhoneType phone = 4; // Repeated field for phone numbers with tag number 4
  map<string, string> info = 5; // Map field for additional information with tag number 5
}

// Define a nested message type
message Address {
  required string street = 1; // Street field with tag number 1
  optional string city = 2; // City field with tag number 2
  optional string state = 3; // State field with tag number 3
  required string zip = 4; // Zip field with tag number 4
}

// Define a message type with nested messages
message Contact {
  required Person person = 1; // Person message field with tag number 1
  optional Address home_address = 2; // Address message field with tag number 2 for home address
  optional Address work_address = 3; // Address message field with tag number 3 for work address
}

// Define an enum for account type
enum AccountType {
  SAVINGS = 0;
  CHECKING = 1;
  CREDIT = 2;
}

// Define a message type for bank account
message BankAccount {
  required int64 account_number = 1; // Account number field with tag number 1
  required AccountType type = 2; // Account type field with tag number 2
  required double balance = 3; // Balance field with tag number 3
  optional Contact owner = 4; // Contact message field with tag number 4 for owner information
}

// Define a message type for customer
message Customer {
  required string customer_id = 1; // Customer id field with tag number 1
  required Contact contact = 2; // Contact message field with tag number 2 for customer information
  repeated BankAccount accounts = 3; // Repeated field for bank accounts with tag number 3
}

// Generate protocol buffer code using protoc
protoc --proto_path=./ proto_file.proto --python_out=./generated_code/

// Serialize a customer using the generated code
from generated_code.proto_file_pb2 import Customer

# Create a new customer
customer = Customer()

# Set customer id
customer.customer_id = "12345"

# Set customer contact information
customer.contact.person.name = "John Doe"
customer.contact.person.id = 1
customer.contact.person.email = "johndoe@example.com"
customer.contact.person.phone.extend([Person.HOME, Person.WORK])

# Set customer home address
customer.contact.home_address.street = "123 Main Street"
customer.contact.home_address.city = "New York"
customer.contact.home_address.state = "NY"
customer.contact.home_address.zip = "10001"

# Add bank accounts
account1 = customer.accounts.add()
account1.account_number = 123456789
account1.type = BankAccount.CHECKING
account1.balance = 1000
account1.owner.person.name = "Jane Smith"
account1.owner.person.id = 2
account1.owner.person.email = "janesmith@example.com"
account1.owner.person.phone.append(Person.MOBILE)
account1.owner.home_address.street = "456 Broadway"
account1.owner.home_address.city = "New York"
account1.owner.home_address.state = "NY"
account1.owner.home_address.zip = "10002"

account2 = customer.accounts.add()
account2.account_number = 987654321
account2.type = BankAccount.CREDIT
account2.balance = 5000
account2.owner.person.name = "Bob Johnson"
account2.owner.person.id = 3
account2.owner.person.email = "bobjohnson@example.com"
account2.owner.person.phone.append(Person.MOBILE)
account2.owner.home_address.street = "789 Park Ave"
account2.owner.home_address.city = "Chicago"
account2.owner.home_address.state = "IL"
account2.owner.home_address.zip = "60601"

# Serialize customer to binary format
binary_data = customer.SerializeToString()

# Deserialize customer from binary format
new_customer = Customer()
new_customer.ParseFromString(binary_data)

# Print customer information
print("Customer ID: ", new_customer.customer_id)
print("Name: ", new_customer.contact.person.name)
print("Email: ", new_customer.contact.person.email)
print("Phone numbers: ", new_customer.contact.person.phone)
print("Home address: ", new_customer.contact.home_address.street, new_customer.contact.home_address.city, new_customer.contact.home_address.state, new_customer.contact.home_address.zip)
for account in new_customer.accounts:
  print("Account number: ", account.account_number)
  print("Account type: ", account.type)
  print("Balance: ", account.balance)
  print("Owner name: ", account.owner.person.name)
  print("Owner email: ", account.owner.person.email)
  print("Owner phone numbers: ", account.owner.person.phone)
  print("Owner home address: ", account.owner.home_address.street, account.owner.home_address.city, account.owner.home_address.state, account.owner.home_address.zip)