syntax = "proto3"; // sets the syntax version

// creates a message type called 'Person'
message Person {
    string name = 1; // defines a field with name and tag number
    int32 age = 2; // defines a field with age and tag number
    repeated string hobbies = 3; // defines a repeated field for hobbies
    enum Gender { // creates an enum for gender
        MALE = 0;
        FEMALE = 1;
    }
    Gender gender = 4; // defines field for gender of type Gender
    map<string, int32> phone_numbers = 5; // creates a map for phone numbers with key and value types
}

// creates a message type called 'Address'
message Address {
    string street = 1; // defines a field for street
    string city = 2; // defines a field for city
    string state = 3; // defines a field for state
    string zipcode = 4; // defines a field for zipcode
}

// creates a message type called 'Contact'
message Contact {
    Person person = 1; // defines a field of type Person for contact's information
    Address address = 2; // defines a field of type Address for contact's address
    repeated Person emergency_contacts = 3; // defines a repeated field for emergency contacts of type Person
}

// generates code needed to serialize messages into bytes
syntax = "proto3";
option java_multiple_files = true; // generates one java file per message type
option java_package = "com.example.messages"; // sets the java package
option java_outer_classname = "ContactProto"; // sets the outer class name
option objc_class_prefix = "EXP"; // sets the Objective-C class prefix

// generates code to use for mobile apps
syntax = "proto3";
option optimize_for = LITE_RUNTIME; // generates minimal code for mobile app use

// creates service definition for RPC calls
syntax = "proto3";
service ContactService {
    rpc GetContactInfo (Contact) returns (Contact); // defines a RPC call to get contact info
    rpc SetContactInfo (Contact) returns (Contact); // defines a RPC call to set contact info
}