/* The following code snippet creates a protocol buffer message called Person, with nested message types for contact information and an optional spouse. */ 

syntax = "proto2"; // sets the syntax to protobuf version 2

package tutorial; // sets the package name

message Person { // creates the Person message
  required string name = 1; // a required field for the person's name
  required int32 id = 2; // a required field for the person's id
  optional string email = 3; // an optional field for the person's email
  
  message PhoneNumber { // creates the nested PhoneNumber message
    required string number = 1; // a required field for the phone number
    optional EnumType type = 2; // an optional field for the type of phone number
    enum EnumType { // creates the enum type for phone number types
      MOBILE = 0;
      HOME = 1;
      WORK = 2;
    }
  }
  
  repeated PhoneNumber phones = 4; // a repeated field for all of the person's phone numbers
  
  message Spouse { // creates the nested Spouse message
    required string name = 1; // a required field for the spouse's name
    optional string email = 2; // an optional field for the spouse's email
  }
  
  optional Spouse spouse = 5; // an optional field for the person's spouse
}

/* The following code snippet shows how to serialize and deserialize the Person message using the protobuf library for a specified input and output stream. */

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class PersonMainClass {

  public static void main(args[]) throws Exception {
    Person.Person.Builder personBuilder = Person.Person.newBuilder(); // initializes the Person builder
    personBuilder.setName("John Smith") // sets the name field
      .setId(12345) // sets the id field
      .setEmail("jsmith@example.com"); // sets the email field
      
    Person.Person person = personBuilder.build(); // builds the Person message
    
    // serialize the message to a file
    FileOutputStream output = new FileOutputStream("person.proto");
    person.writeTo(output);
    output.close();
    
    // deserialize the message from a file
    FileInputStream input = new FileInputStream("person.proto");
    Person.Person parsedPerson = Person.Person.parseFrom(input);
    input.close();
    
    System.out.println(parsedPerson.getName()); // prints "John Smith"
    System.out.println(parsedPerson.getId()); // prints 12345
    System.out.println(parsedPerson.hasEmail()); // prints true
    System.out.println(parsedPerson.getEmail()); // prints "jsmith@example.com"
  }
}