syntax = "proto2"; // sets the syntax for the protobuf version to be used

option java_package = "com.example.protos"; // sets the java package for generated code
option objc_class_prefix = "EXM"; // sets the objective-c class prefix for generated code

message person { // defines a message type named person
    required string name = 1; // adds a required field named 'name' of type string with a tag of 1
    required int32 age = 2; // adds a required field named 'age' of type int32 with a tag of 2
    optional bool is_active = 3; // adds an optional field named 'is_active' of type bool with a tag of 3
    repeated string friends = 4; // adds a repeated field named 'friends' of type string with a tag of 4
    required address home_address = 5; // adds a required field named 'home_address' of type address with a tag of 5

    message address { // defines a nested message type named address
        required string street = 1; // adds a required field named 'street' of type string with a tag of 1
        required string city = 2; // adds a required field named 'city' of type string with a tag of 2
        required string state = 3; // adds a required field named 'state' of type string with a tag of 3
        required string zip_code = 4; // adds a required field named 'zip_code' of type string with a tag of 4
    }
}

message car { // defines a message type named car
    required string make = 1; // adds a required field named 'make' of type string with a tag of 1
    required string model = 2; // adds a required field named 'model' of type string with a tag of 2
    optional int32 year = 3; // adds an optional field named 'year' of type int32 with a tag of 3
    optional string color = 4; // adds an optional field named 'color' of type string with a tag of 4
    repeated person owners = 5; // adds a repeated field named 'owners' of type person with a tag of 5
}

enum Gender { // defines an enum type named Gender
    MALE = 0; // sets the value of MALE to 0
    FEMALE = 1; // sets the value of FEMALE to 1
    OTHER = 2; // sets the value of OTHER to 2
}

service PersonService { // defines a service named PersonService
    rpc GetPerson (PersonRequest) returns (PersonResponse); // defines a rpc method named GetPerson with input type PersonRequest and output type PersonResponse
    rpc AddPerson (Person) returns (PersonResponse); // defines a rpc method named AddPerson with input type Person and output type PersonResponse
}

message PersonRequest { // defines a message type named PersonRequest
    required string name = 1; // adds a required field named 'name' of type string with a tag of 1
    required Gender gender = 2; // adds a required field named 'gender' of type Gender with a tag of 2
}

message PersonResponse { // defines a message type named PersonResponse
    required string message = 1; // adds a required field named 'message' of type string with a tag of 1
    optional Person person = 2; // adds an optional field named 'person' of type Person with a tag of 2
}