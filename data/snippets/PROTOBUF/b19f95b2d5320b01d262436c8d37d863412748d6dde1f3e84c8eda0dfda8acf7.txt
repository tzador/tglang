// Message definition
// Declaring a message called Person
message Person {

    // Name field
    string name = 1; // Field number and data type

    // Age field
    int32 age = 2; // Field number and data type

    // Address field
    string address = 3; // Field number and data type
}

// Repeated definition
// Declaring a repeated message called Student
message Student {

    // ID field
    int32 id = 1; // Field number and data type

    // List of person fields
    repeated Person persons = 2; // Field number and data type, repeated keyword is used to define a repeated message
}

// Enum definition
// Declaring an enum called Gender
enum Gender {

    // Enum value for Male
    MALE = 0;

    // Enum value for Female
    FEMALE = 1;
}

// Output parsing code
// Parsing the output data from a server
// Input: byte array of protobuf data
// Output: list of Students
List<Student> parseOutput(byte[] data) {

    // Initialize empty list
    List<Student> students = new ArrayList<Student>();

    // Parse data using Person and Student classes from Protobuf library
    // Iterate through each Student object in data
    for (Student student : data) {

        // Get ID field value
        int32 id = student.getId();

        // Get list of persons
        List<Person> persons = student.getPersons();

        // Initialize empty list of parsed persons for current student
        List<ParsedPerson> parsedPersons = new ArrayList<ParsedPerson>();

        // Iterate through each Person object in persons
        for (Person person : persons) {

            // Get name, age, and address fields
            string name = person.getName();
            int32 age = person.getAge();
            string address = person.getAddress();

            // Create a new ParsedPerson object using parsed fields
            ParsedPerson parsedPerson = new ParsedPerson(name, age, address);

            // Add parsed person to list
            parsedPersons.add(parsedPerson);
        }

        // Create a new Student object using parsed ID and list of parsed persons
        Student parsedStudent = new Student(id, parsedPersons);

        // Add parsed student to list
        students.add(parsedStudent);
    }

    // Return list of parsed students
    return students;
}