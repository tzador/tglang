syntax = "proto3";

package employee;

// Employee message represents an employee with their
// information and department.
message Employee {
    string name = 1;
    int32 age = 2;
    string department = 3;
    repeated string skills = 4;

    // Address sub-message contains the employee's
    // address information.
    message Address {
        string street = 1;
        string city = 2;
        string state = 3;
        int32 zip_code = 4;
    }

    // Company sub-message contains the employee's company
    // information.
    message Company {
        string name = 1;
        string position = 2;
        repeated string projects = 3;
    }

    // References sub-message contains the employee's
    // references' information.
    message References {
        string name = 1;
        string relation = 2;
        string contact_number = 3;
    }

    // Oneof allows for conditional fields in the message.
    oneof employment_info {
        Address address = 5;
        Company company = 6;
    }

    // Employee enum represents the different types of
    // employment status for an employee.
    enum EmployeeStatus {
        FULL_TIME = 0;
        PART_TIME = 1;
        CONTRACT = 2;
    }

    // Employee status field contains the employee's
    // current employment status.
    EmployeeStatus status = 7;

    // Nested enum allows for more specific status within
    // the different employment types.
    enum FullTimeStatus {
        REGULAR = 0;
        MANAGER = 1;
        EXECUTIVE = 2;
    }

    // Nested field within the status enum to specify the
    // employee's specific full time status.
    FullTimeStatus full_time_status = 8;

    // Nested enum allows for different types of contracts.
    enum ContractType {
        TEMPORARY = 0;
        FIXED_TERM = 1;
        INDEPENDENT = 2;
    }

    // Nested field within the status enum to specify the
    // employee's specific contract type.
    ContractType contract_type = 9;

    // Nested message to represent an employee's salary.
    message Salary {
        double base_pay = 1;
        double bonus = 2;
    }

    // Salary field contains the employee's current salary.
    Salary salary = 10;

    // Map allows for a key-value pair of bonuses earned
    // from specific projects.
    map<string, double> bonuses = 11;

    // Map allows for a key-value pair of employee's
    // previous work experience.
    map<string, string> previous_experience = 12;

    // Map allows for a key-value pair of languages the
    // employee knows and their proficiency level.
    map<string, string> languages = 13;

    // List of previous job titles the employee has had.
    repeated string previous_job_titles = 14;

    // Indicates if the employee is a team player.
    bool team_player = 15;
}