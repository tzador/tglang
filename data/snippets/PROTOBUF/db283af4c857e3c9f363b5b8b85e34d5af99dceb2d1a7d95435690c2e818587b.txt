syntax = "proto3";

// Creating a message type for a user
message User {
  int32 id = 1; // field number and data type
  string first_name = 2;
  string last_name = 3;
  repeated string emails = 4; // repeated field for multiple emails

  // Defining nested message type for address
  message Address {
    string street = 1;
    string city = 2;
    string state = 3;
    string country = 4;
    int32 postal_code = 5;
  }

  // Adding optional field for address
  Address address = 5;

  // Enum for user roles
  enum Role {
    ADMIN = 0;
    USER = 1;
    MODERATOR = 2;
  }
  Role role = 6; // field for user role
}

// Creating a request message for user info
message UserInfoRequest {
  User user = 1; // field for user information
}

// Creating a response message for updated user info
message UserInfoUpdateResponse {
  User updated_user = 1; // field for updated user information
  bool success = 2; // field for success status
  string message = 3; // field for success message
}

// Defining a service for user CRUD operations
service UserService {
  // RPC for creating a new user
  rpc CreateUser(User) returns (UserInfoUpdateResponse) {}

  // RPC for updating an existing user
  rpc UpdateUser(UserInfoRequest) returns (UserInfoUpdateResponse) {}

  // RPC for deleting a user
  rpc DeleteUser(UserInfoRequest) returns (UserInfoUpdateResponse) {}

  // RPC for getting a user by ID
  rpc GetUserById(UserInfoRequest) returns (UserInfoUpdateResponse) {}
}