syntax = "proto3";

message Album { // creating a message called Album
  string name = 1; // field 'name' of type string with tag number 1
  repeated Song songs = 2; // field 'songs' of type 'Song' with tag number 2
  repeated Artist artists = 3; // field 'artists' of type 'Artist' with tag number 3
  repeated string genres = 4; // field 'genres' of type string with tag number 4

  message Song { // creating a nested message called Song
    string title = 1; // field 'title' of type string with tag number 1
    int32 length = 2; // field 'length' of type int32 with tag number 2
    repeated Artist artists = 3; // field 'artists' of type 'Artist' with tag number 3

    enum Genre { // creating an enum for genre options
      UNKNOWN = 0; // genre option 0
      POP = 1; // genre option 1
      ROCK = 2; // genre option 2
      RAP = 3; // genre option 3
      COUNTRY = 4; // genre option 4
    }
    Genre genre = 4; // field 'genre' of type Genre with tag number 4
  }

  message Artist { // creating a nested message called Artist
    string name = 1; // field 'name' of type string with tag number 1
    repeated string albums = 2; // field 'albums' of type string with tag number 2
  }
}

Album album = 1; // creating an instance of the Album message with tag number 1
album.name = "Thriller"; // assigning value to the 'name' field with the name of the album
album.songs.add({ // adding a new Song object to the 'songs' field
  title: "Billie Jean", // assigning values to the fields of the Song object
  length: 294,
  artists: [{name: "Michael Jackson"}]
});
album.songs.add({
  title: "Beat It",
  length: 258,
  artists: [{name: "Michael Jackson"}]
});
album.artists.add({ // adding a new Artist object to the 'artists' field
  name: "Michael Jackson", // assigning value to the 'name' field with the name of the artist
  albums: ["Thriller"] // assigning values to the 'albums' field with the name of the albums the artist has worked on
});
album.genres.add("POP"); // adding a new genre ("POP") to the 'genres' field

// Using the 'serializeToString()' function to convert the Album message into a string of encoded bytes
// The encoded bytes can be sent over a network or stored in a file
string serializedAlbum = album.serializeToString();

// Using the 'parseFromString()' function to convert the encoded bytes back into an Album message
// This allows us to easily access and manipulate the data in the Album message
Album deserializedAlbum = parseFromString(serializedAlbum);