// Import necessary libraries
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// Define message types
message User {
    uint32 id = 1;
    string username = 2;
    repeated string hobbies = 3;
    google.protobuf.Timestamp createdAt = 4;
    map<string, string> metadata = 5;
}

message Post {
    uint32 id = 1;
    string title = 2;
    string content = 3;
    User author = 4;
    repeated Comment comments = 5;
    google.protobuf.Timestamp createdAt = 6;
}

message Comment {
    uint32 id = 1;
    string content = 2;
    User author = 3;
    google.protobuf.Timestamp createdAt = 4;
}

// Specify any extensions
extend User {
    google.protobuf.Any extended_metadata = 100;
}

// Specify service definitions
service UserService {
    rpc GetUserByID (GetUserByIDRequest) returns (GetUserByIDResponse) {}
}

// Define request and response message types
message GetUserByIDRequest {
    uint32 user_id = 1;
}

message GetUserByIDResponse {
    User user = 1;
}

// Specify enum types
enum Role {
    ADMIN = 0;
    USER = 1;
    MODERATOR = 2;
}

// Create a list of users
User user1 = {
    id: 1,
    username: "John.Doe",
    hobbies: ["hiking", "painting"],
    metadata: {
        "age": "28",
        "location": "California"
    }
};

User user2 = {
    id: 2,
    username: "Jane.Smith",
    hobbies: ["reading", "photography"],
    metadata: {
        "age": "35",
        "location": "New York"
    }
};

// Use the UserService to get user by id
GetUserByIDRequest request = {
    user_id: 2
};
GetUserByIDResponse response = UserService.GetUserByID(request);

// Output user information
print("Username: " + response.user.username);
print("Hobbies: " + response.user.hobbies.join(", "));
print("Creation Date: " + response.user.createdAt);
print("Metadata: " + response.user.metadata);

// Create a new post
Post post = {
    id: 1,
    title: "New Adventure",
    content: "Just returned from an amazing trip.",
    author: user1,
    comments: [{
        id: 1,
        content: "Sounds amazing!",
        author: user2,
        createdAt: Timestamp::now()
    }],
    createdAt: Timestamp::now()
};

// Add a new comment to the post
Comment comment = {
    id: 2,
    content: "I want to visit there too.",
    author: user2,
    createdAt: Timestamp::now()
};
post.comments.push_back(comment);

// Output post information
print("Title: " + post.title);
print("Author: " + post.author.username);
print("Comments: ");
for (Comment comment : post.comments) {
    print(comment.author.username + ": " + comment.content);
}
print("Creation Date: " + post.createdAt);