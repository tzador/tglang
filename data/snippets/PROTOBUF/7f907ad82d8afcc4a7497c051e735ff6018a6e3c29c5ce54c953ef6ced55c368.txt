syntax = "proto2"; // declaring syntax version

package example; // declaring package name

import "other_package.proto"; // importing another package

message Order { // creating a message type
    required int32 id = 1; // declaring required field of type int32 with tag number 1
    optional string customer_name = 2; // declaring optional field of type string with tag number 2
    repeated string items = 3; // declaring repeated (array) field of type string with tag number 3

    enum Status { // creating an enum type
        PENDING = 0; // assigning value 0 to enum option PENDING
        PROCESSING = 1; // assigning value 1 to enum option PROCESSING
        COMPLETED = 2; // assigning value 2 to enum option COMPLETED
    }

    required Status status = 4; // declaring required field of type Status (enum) with tag number 4

    message Address { // creating a nested message type
        required string street = 1; // declaring required field of type string with tag number 1
        required string city = 2; // declaring required field of type string with tag number 2
        optional string state = 3; // declaring optional field of type string with tag number 3
        required int32 zip_code = 4; // declaring required field of type int32 with tag number 4
    }

    optional Address shipping_address = 5; // declaring optional field of type Address (nested message) with tag number 5
    optional Address billing_address = 6; // declaring optional field of type Address (nested message) with tag number 6

    extensions 101 to max; // declaring extension range for this message type
}

// defining another message type
message Invoice {
    required int32 id = 1;
    required string customer_name = 2;
    optional string billing_address = 3;
    optional string shipping_address = 4;
    required string payment_method = 5;

    message Item {
        required string name = 1;
        required double price = 2;
        optional int32 quantity = 3;
    }

    repeated Item items = 6;
}

// defining a service
service OrderService {
    rpc GetOrders (Empty) returns (OrderList); // declaring rpc method with input type Empty and output type OrderList
    rpc CreateOrder (Order) returns (Order); // declaring rpc method with input type Order and output type Order
    rpc UpdateOrder (Order) returns (Order); // declaring rpc method with input type Order and output type Order
    rpc DeleteOrder (Order) returns (Empty); // declaring rpc method with input type Order and output type Empty
}

// defining another service
service InvoiceService {
    rpc GetInvoices (Empty) returns (InvoiceList);
    rpc CreateInvoice (Invoice) returns (Invoice);
    rpc UpdateInvoice (Invoice) returns (Invoice);
    rpc DeleteInvoice (Invoice) returns (Empty);
}