procedure QuickSort(Left, Right: Integer; var A: array of Integer);
{ Performs QuickSort algorithm on a given integer array }
var
  Pivot, LIndex, RIndex, Temp: Integer;

begin
  { Set Pivot value to middle element }
  Pivot := A[(Left + Right) div 2];
  LIndex := Left;
  RIndex := Right;
  { Loop until Left index is greater than or equal to Right index }
  while (LIndex <= RIndex) do
  begin
    { Look for elements in Left side that are greater than Pivot }
    while (A[LIndex] < Pivot) do
      LIndex := LIndex + 1;
    { Look for elements in Right side that are less than Pivot }
    while (A[RIndex] > Pivot) do
      RIndex := RIndex - 1;
    { Swap elements if needed }
    if (LIndex <= RIndex) then
    begin
      Temp := A[LIndex];
      A[LIndex] := A[RIndex];
      A[RIndex] := Temp;
      { Move both Left and Right index for next iteration }
      LIndex := LIndex + 1;
      RIndex := RIndex - 1;
    end;
  end;
  { Recurse for Left side }
  if (Left < RIndex) then
    QuickSort(Left, RIndex, A);
  { Recurse for Right side }
  if (LIndex < Right) then
    QuickSort(LIndex, Right, A);
end;