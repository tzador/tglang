function mergeSort(arr: array of integer; l, r: integer): array of integer;
var
  i, j, k, mid: integer;
  leftSub, rightSub: array of integer;
begin
  // check end of array
  if r > l then
  begin
    mid := (l+r) div 2; // calculate middle index
    setLength(leftSub, mid-l+1); // initialize left subarray
    setLength(rightSub, r-mid); // initialize right subarray
    
    // copy elements to left subarray
    for i := 0 to mid-l do
      leftSub[i] := arr[l+i];
    // copy elements to right subarray
    for j := 0 to r-mid-1 do
      rightSub[j] := arr[mid+j+1];
    
    // recursively sort left and right subarrays
    leftSub := mergeSort(leftSub, 0, mid-l);
    rightSub := mergeSort(rightSub, 0, r-mid-1);
    
    i := 0; // index for left subarray
    j := 0; // index for right subarray
    k := l; // index for final sorted array
    
    // merge left and right subarrays in sorted order
    while (i < length(leftSub)) and (j < length(rightSub)) do
    begin
      if leftSub[i] < rightSub[j] then
      begin
        arr[k] := leftSub[i];
        i := i + 1;
      end
      else
      begin
        arr[k] := rightSub[j];
        j := j + 1;
      end;
      k := k + 1; // increment final array index
    end;
    
    // copy remaining elements from left subarray
    while i < length(leftSub) do
    begin
      arr[k] := leftSub[i];
      i := i + 1;
      k := k + 1;
    end;
    
    // copy remaining elements from right subarray
    while j < length(rightSub) do
    begin
      arr[k] := rightSub[j];
      j := j + 1;
      k := k + 1;
    end;
  end;
  // return the final sorted array
  Result := arr;
end;