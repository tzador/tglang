function fibonacci(n: integer): integer; //declares a function named fibonacci that takes in an integer and returns an integer
var 
   i, term, first, second: integer; //declares four variables of type integer: i, term, first, and second 
begin 
   first := 0; //initializes variable first to 0
   second := 1; //initializes variable second to 1 
   
   if n = 0 then //checks if n is equal to 0 
      fibonacci := first //if true, returns the value of first (0) and exits the function
   else if n = 1 then //checks if n is equal to 1 
      fibonacci := second //if true, returns the value of second (1) and exits the function 
   else begin
      for i := 2 to n do //if n is greater than 1, a for loop is initiated with i starting at 2 and ending at n 
      begin 
         term := first + second; //calculates the next term in the fibonacci sequence by adding the previous two terms 
         first := second; //updates the value of first to the value of second 
         second := term; //updates the value of second to the value of term 
      end;
      fibonacci := term; //returns the value of term (which is the nth term in the fibonacci sequence)
   end; 
end; //end of function fibonacci 

//code can be called using fibonacci(n), where n is the desired index of the fibonacci sequence to be calculated