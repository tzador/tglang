{ This program generates a random array of integers and sorts it using the quicksort algorithm }
program QuickSort;

const
  MAX_SIZE = 10; // maximum size of the array

var
  arr: array[1..MAX_SIZE] of integer; // array to store integers
  i, size: integer; // counter variables

procedure swap(var a, b: integer);
var
  temp: integer; // variable to hold temporary value
begin
  temp := a; // store value of a in temp
  a := b; // assign value of b to a
  b := temp; // assign value of temp to b
end;

procedure quicksort(left, right: integer);
var
  index, pivot: integer; // variables to hold indices and pivot value
begin
  index := (left + right) div 2; // find middle index
  pivot := arr[index]; // set pivot value to middle element
  i := left; // set left index
  j := right; // set right index
  while (i <= j) do // loop until left and right indices meet
  begin
    while (arr[i] < pivot) do // find element on left that should be on right
      i := i + 1;
    while (arr[j] > pivot) do // find element on right that should be on left
      j := j - 1;
    if (i <= j) then // swap elements if left index is less than right index
    begin
      swap(arr[i], arr[j]);
      i := i + 1;
      j := j - 1;
    end;
  end;
  if (left < j) then // recursively sort left partition
    quicksort(left, j);
  if (i < right) then // recursively sort right partition
    quicksort(i, right);
end;

begin
  writeln('Generating random array of integers...');
  randomize; // initialize random number generator
  for i := 1 to MAX_SIZE do
    arr[i] := random(100); // generate random integers between 0 and 100
  writeln('Array before sorting:');
  for i := 1 to MAX_SIZE do
    write(arr[i], ' '); // print array before sorting
  writeln;
  size := MAX_SIZE; // set size of array
  quicksort(1, size); // call quicksort procedure
  writeln('Array after sorting:');
  for i := 1 to MAX_SIZE do
    write(arr[i], ' '); // print array after sorting
end.