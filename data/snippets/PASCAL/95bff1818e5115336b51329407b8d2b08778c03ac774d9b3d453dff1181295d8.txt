program QuickSort;

type
  TArray = array of Integer; // defining a dynamic array of integers

var
  arr: TArray; // creating an empty array
  i: Integer; // defining a variable for the for loop

procedure QuickSort(var arr: TArray; start, finish: Integer); // defining the QuickSort procedure with parameters
var
  pivot, i, j, tmp: Integer; // defining variables for the pivot, loop indexes, and a temporary variable
begin
  if start < finish then // checking if there are at least two elements in the subarray
  begin
    pivot := arr[Random(finish-start)+start]; // choosing a random pivot element
    i := start; // setting the initial index for the left subarray
    j := finish; // setting the initial index for the right subarray
    while i <= j do // looping until all elements are partitioned correctly
    begin
      while arr[i] < pivot do // finding the first element from the left that is larger than the pivot
        i := i + 1;
      while arr[j] > pivot do // finding the first element from the right that is smaller than the pivot
        j := j - 1;
      if i <= j then // checking if the left and right elements need to be swapped
      begin
        tmp := arr[i];
        arr[i] := arr[j];
        arr[j] := tmp;
        i := i + 1;
        j := j - 1;
      end;
    end;
    QuickSort(arr, start, j); // recursively calling the QuickSort procedure for the left subarray
    QuickSort(arr, j+1, finish); // recursively calling the QuickSort procedure for the right subarray
  end;
end;

begin
  // initializing the array with random values
  SetLength(arr, 10);
  for i := 0 to Length(arr)-1 do
    arr[i] := Random(100);
  // printing out the unsorted array
  for i := 0 to Length(arr)-1 do
    Write(arr[i], ' ');
  Writeln;
  // sorting the array using QuickSort
  QuickSort(arr, 0, Length(arr)-1);
  // printing out the sorted array
  for i := 0 to Length(arr)-1 do
    Write(arr[i], ' ');
end.