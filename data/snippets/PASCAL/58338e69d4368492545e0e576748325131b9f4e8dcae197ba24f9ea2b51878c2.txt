program ComplexCodeSnippet;

uses SysUtils, Classes, Math;

const
  MAX_ARRAY_SIZE = 1000;                   \\ constant for max array size

var
  arrayToSort: array[1..MAX_ARRAY_SIZE] of Integer;    \\ create empty array

function Partition(arrayToPartition:array of Integer; indexLeft, indexRight: integer): integer;
var
  pivot, i, j, temp: integer;
begin
  pivot := arrayToPartition[indexRight];                 \\ select pivot element

  i := indexLeft - 1;                                    \\initialize variables
  j := indexRight;

  repeat
    while arrayToPartition[i] < pivot do                  \\ find element greater than pivot on left side
      i := i + 1;
    while (arrayToPartition[j] > pivot) and (j > 0) do    \\ find element smaller than pivot on right side
      j := j - 1;
    if (i < j) then                                       \\ if elements are on opposite sides of pivot
    begin
      temp := arrayToPartition[i];                        \\ swap elements
      arrayToPartition[i] := arrayToPartition[j];
      arrayToPartition[j] := temp;
    end;
  until i >= j;                                   \\ continue until i and j cross each other

  arrayToPartition[j] := arrayToPartition[indexRight];      \\ put pivot in its correct position
  arrayToPartition[indexRight] := pivot;

  Partition := j;                                 \\ return index of pivot

end;

procedure QuickSort(arrayToSort: array of Integer; indexLeft, indexRight: integer);
var
  pivotIndex: integer;
begin
  if indexLeft < indexRight then                  \\ continue until only one element is left
  begin
    pivotIndex := Partition(arrayToSort, indexLeft, indexRight);    \\ divide array into two parts
    QuickSort(arrayToSort, indexLeft, pivotIndex-1);                \\ quicksort left side of pivot
    QuickSort(arrayToSort, pivotIndex+1, indexRight);               \\ quicksort right side of pivot
  end;
end;

begin
  Randomize;                                        
  for i := 1 to MAX_ARRAY_SIZE do
    arrayToSort[i] := Random(MAX_ARRAY_SIZE);                        \\ fill array with random numbers

  QuickSort(arrayToSort, 1, MAX_ARRAY_SIZE);                        \\ sort the array using quicksort algorithm

  writeln('Sorted Array:');
  for i := 1 to MAX_ARRAY_SIZE do
    write(arrayToSort[i], ' ');                                     \\ print sorted array

end.