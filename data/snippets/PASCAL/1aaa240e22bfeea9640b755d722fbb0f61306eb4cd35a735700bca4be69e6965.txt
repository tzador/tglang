procedure QuickSort(var list : array of Integer, left : Integer, right : Integer);
{This procedure implements the quicksort algorithm to sort the elements in the given list}
var
  pivot, lPtr, rPtr, temp : Integer;
begin
  lPtr := left;
  rPtr := right;
  pivot := list[(left + right) div 2]; // Setting pivot as the middle element

  {Partition loop}
  while lPtr <= rPtr do
  begin
    {Finding an element on the left side that should be on the right side}
    while list[lPtr] < pivot do
      lPtr := lPtr + 1;

    {Finding an element on the right side that should be on the left side}
    while list[rPtr] > pivot do
      rPtr := rPtr - 1;

    {Swapping the elements}
    if lPtr <= rPtr then
    begin
      temp := list[lPtr];
      list[lPtr] := list[rPtr];
      list[rPtr] := temp;
      lPtr := lPtr + 1;
      rPtr := rPtr - 1;
    end;
  end;

  {Sorting left side of the pivot}
  if left < rPtr then
    QuickSort(list, left, rPtr);

  {Sorting right side of the pivot}
  if lPtr < right then
    QuickSort(list, lPtr, right);
end;