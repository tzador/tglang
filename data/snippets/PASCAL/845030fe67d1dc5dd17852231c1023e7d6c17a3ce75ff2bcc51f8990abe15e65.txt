program ComplexCode;

(*This program calculates the subnet mask of an IP address*)

//Define variables
var
  ipAddress, subnetMask, addressPart, subnetPart, power, subnet, i, n, x, mask: byte;
  subnets: array[1..8] of string;

//Input IP address
write('Enter the IP address: ');
readln(ipAddress);

//Split IP address into 4 parts
i := 1;
while ipAddress <> '.' do
begin
  addressPart := StrToInt(Copy(ipAddress, 1, Pos('.', ipAddress) - 1));
  subnets[i] := '';
  
  //Convert each part to binary
  n := 7;
  while addressPart > 0 do
  begin
    x := addressPart mod 2;
    subnets[i] := IntToStr(x) + subnets[i];
    addressPart := addressPart div 2;
    n := n - 1;
  end;
  
  //Fill rest of the part with 0s
  while n >= 0 do
  begin
    subnets[i] := '0' + subnets[i];
    n := n - 1;
  end;
  
  //Move on to next part
  ipAddress := Copy(ipAddress, Pos('.', ipAddress) + 1, Length(ipAddress));
  i := i + 1;
end;

//Calculate the number of 1s in subnet mask
subnetMask := 0;
for i := 1 to 4 do
begin
  for n := 1 to 8 do
  begin
    if subnets[i][n] = '1' then
    begin
      subnetMask := subnetMask + 1;
    end;
  end;
end;

//Calculate subnet
power := 1;
subnet := 0;
i := 4;
while i > 0 do
begin
  for n := 8 downto 1 do
  begin
    if subnets[i][n] = '1' then
    begin
      subnet := subnet + power;
    end;
    power := power * 2;
  end;
  i := i - 1;
end;

//Calculate subnet mask
mask := 32 - subnetMask;

//Output subnet mask
writeln('Subnet mask is:', ' 255.255.255.', mask);

end.