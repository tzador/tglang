program complexCodeSnippet;

uses SysUtils, Math;

type
  TMyType = record
    StringField: String;
    IntegerField: Integer;
  end;
  
  TMyEnum = (Value1, Value2, Value3);
  
  TMyClass = class
    private
      FMyField: String;
    public
      constructor Create(const AField: String);
      procedure DoSomething;
      procedure DoSomethingElse(const AValue: Integer);
  end;
  
var
  MyVariable: TMyType;
  MyArray: array[1..10] of Integer = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
  MyPointer: ^TMyType;
  
procedure TMyClass.DoSomething;
begin
  WriteLn('This is a complex code snippet that showcases different data types, structures, and control flow in Pascal.');
  WriteLn('The record type TMyType is used to store a string and an integer value.');
  with MyVariable do
  begin
    StringField := 'Hello';
    IntegerField := 42;
  end;
  WriteLn('The enumerator type TMyEnum is used to define a set of possible values.');
  WriteLn('In this case, the values are Value1, Value2, and Value3.');
  for Value in TMyEnum do
  begin
    if Value = TMyEnum.Value1 then
      WriteLn('The first value is Value1.')
    else
      WriteLn('The current value is not Value1.');
  end;
  WriteLn('The class TMyClass is used to create objects with a private field and public methods.');
  WriteLn('The constructor takes a string parameter and assigns it to FMyField.');
end;

procedure TMyClass.DoSomethingElse(const AValue: Integer);
begin
  WriteLn('This is a more complex procedure that takes in an integer parameter.');
  WriteLn('It uses the Math unit to perform mathematical operations on the input value.');
  WriteLn('The result is then printed out.');
  WriteLn('The parameter value is: ' + IntToStr(AValue));
  WriteLn('The square root of ' + IntToStr(AValue) + ' is: ' + FloatToStr(Sqrt(AValue)));
  WriteLn('The sine of ' + IntToStr(AValue) + ' is: ' + FloatToStr(Sin(AValue)));
end;

constructor TMyClass.Create(const AField: String);
begin
  FMyField := AField;
end;

begin
  WriteLn('This is the entry point of the program.');
  WriteLn('A variable of type TMyType is declared and initialized with a string and integer value.');
  MyVariable.StringField := 'Goodbye';
  MyVariable.IntegerField := 13;
  WriteLn('An array of integers is declared with 10 elements and values from 1 to 10.');
  WriteLn('A pointer of type TMyType is declared and assigned to the address of MyVariable.');
  MyPointer := @MyVariable;
  WriteLn('The methods of TMyClass are called on an object with the string field "Example".');
  with TMyClass.Create('Example') do
  try
    DoSomething;
    DoSomethingElse(5);
  finally
    Free;
  end;
end.