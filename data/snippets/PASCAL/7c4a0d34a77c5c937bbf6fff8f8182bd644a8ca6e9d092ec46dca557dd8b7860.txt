program ComplexExample;

uses sysutils, math; //Importing necessary libraries

type //Defining custom data types
    Str = array of string;
    Matrix = array of array of integer;

function Sum(Arr: Str): integer; //Defining a function that takes in a string array and returns an integer
var
    i, total : integer;
begin
    total := 0;
    for i := 0 to Length(Arr)-1 do //Iterate through each string in the array
    begin
        total := total + StrToInt(Arr[i]); //Convert the string to an integer and add it to the total
    end;
    Result := total; //Set the function's return value to the total
end;

procedure Transpose(var A: Matrix); //Defining a procedure that takes in a matrix and modifies it
var
    i, j, temp : integer;
begin
    for i := 0 to Length(A)-1 do //Iterate through each row in the matrix
    begin
        for j := i+1 to Length(A)-1 do //Iterate through each column after the current row
        begin
            temp := A[i,j]; //Swap the elements at position (i,j) and (j,i)
            A[i,j] := A[j,i];
            A[j,i] := temp;
        end;
    end;
end;

var //Main program
    i, j : integer;
    input : Str;
    output : Matrix;
begin
    WriteLn('Enter 3 integers separated by spaces: '); //Prompt user for input
    ReadLn(input); //Read the input as a string

    output := Sum(input); //Call the Sum function on the input and assign the result to the output matrix

    WriteLn('Original Matrix:'); //Print the original matrix
    for i := 0 to Length(output)-1 do
    begin
        for j := 0 to Length(output[i])-1 do
        begin
            Write(output[i,j], ' ');
        end;
        WriteLn;
    end;

    Transpose(output); //Call the Transpose procedure on the output matrix

    WriteLn('Transposed Matrix:'); //Print the transposed matrix
    for i := 0 to Length(output)-1 do
    begin
        for j := 0 to Length(output[i])-1 do
        begin
            Write(output[i,j], ' ');
        end;
        WriteLn;
    end;

    ReadLn; //Pause the program before exiting
end.