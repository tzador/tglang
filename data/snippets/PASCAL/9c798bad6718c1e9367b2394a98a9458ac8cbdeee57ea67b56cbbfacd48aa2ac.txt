program ComplexCalc;

type
  // Define a complex number record
  Complex = record
    Real: Real;
    Imaginary: Real;
  end;
  
var
  // Declare and initialize two complex numbers
  ComplexNum1: Complex := (Real: 4.2; Imaginary: 2.1);
  ComplexNum2: Complex := (Real: -3.8; Imaginary: 0.7);
  
  // Declare variables for the result of various calculations
  AdditionResult: Complex;
  SubtractionResult: Complex;
  MultiplicationResult: Complex;
  DivisionResult: Complex;
  ConjugateResult: Complex;
  MagnitudeResult: Complex;
  PhaseResult: Complex;
  
  // Set the decimal separator to a dot
  DecimalSeparator := '.';
  
begin
  // Calculate the result of adding two complex numbers
  AdditionResult.Real := ComplexNum1.Real + ComplexNum2.Real;
  AdditionResult.Imaginary := ComplexNum1.Imaginary + ComplexNum2.Imaginary;
  
  // Calculate the result of subtracting two complex numbers
  SubtractionResult.Real := ComplexNum1.Real - ComplexNum2.Real;
  SubtractionResult.Imaginary := ComplexNum1.Imaginary - ComplexNum2.Imaginary;
  
  // Calculate the result of multiplying two complex numbers
  MultiplicationResult.Real := (ComplexNum1.Real * ComplexNum2.Real) - (ComplexNum1.Imaginary * ComplexNum2.Imaginary);
  MultiplicationResult.Imaginary := (ComplexNum1.Real * ComplexNum2.Imaginary) + (ComplexNum1.Imaginary * ComplexNum2.Real);
  
  // Calculate the result of dividing two complex numbers
  DivisionResult.Real := ((ComplexNum1.Real * ComplexNum2.Real) + (ComplexNum1.Imaginary * ComplexNum2.Imaginary)) / ((ComplexNum2.Real * ComplexNum2.Real) + (ComplexNum2.Imaginary * ComplexNum2.Imaginary));
  DivisionResult.Imaginary := ((ComplexNum2.Real * ComplexNum1.Imaginary) - (ComplexNum1.Real * ComplexNum2.Imaginary)) / ((ComplexNum2.Real * ComplexNum2.Real) + (ComplexNum2.Imaginary * ComplexNum2.Imaginary));
  
  // Calculate the conjugate of a complex number
  ConjugateResult.Real := ComplexNum1.Real;
  // The imaginary part of the conjugate is the opposite of the original imaginary part
  ConjugateResult.Imaginary := -ComplexNum1.Imaginary;
  
  // Calculate the magnitude of a complex number
  MagnitudeResult.Real := Sqrt((ComplexNum1.Real * ComplexNum1.Real) + (ComplexNum1.Imaginary * ComplexNum1.Imaginary));
  MagnitudeResult.Imaginary := 0;
  
  // Calculate the phase of a complex number (in degrees)
  // The arctan function returns the angle in radians, so we need to convert it to degrees
  PhaseResult.Real := ArcTan(ComplexNum1.Imaginary / ComplexNum1.Real) * (180 / Pi);
  PhaseResult.Imaginary := 0;
  
  // Print the results to the console, using the format 'Re + Imi'
  WriteLn('Addition: ', AdditionResult.Real:0:2, ' + ', AdditionResult.Imaginary:0:2, 'i');
  WriteLn('Subtraction: ', SubtractionResult.Real:0:2, ' + ', SubtractionResult.Imaginary:0:2, 'i');
  WriteLn('Multiplication: ', MultiplicationResult.Real:0:2, ' + ', MultiplicationResult.Imaginary:0:2, 'i');
  WriteLn('Division: ', DivisionResult.Real:0:2, ' + ', DivisionResult.Imaginary:0:2, 'i');
  WriteLn('Conjugate: ', ConjugateResult.Real:0:2, ' + ', ConjugateResult.Imaginary:0:2, 'i');
  WriteLn('Magnitude: ', MagnitudeResult.Real:0:2, ' + ', MagnitudeResult.Imaginary:0:2, 'i');
  WriteLn('Phase: ', PhaseResult.Real:0:2, ' + ', PhaseResult.Imaginary:0:2, 'i');
end.