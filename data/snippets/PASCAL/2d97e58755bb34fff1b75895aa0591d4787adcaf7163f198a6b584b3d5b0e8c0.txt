(* This program finds the shortest path between two nodes in a graph using Dijkstra's algorithm *)
program Dijkstra;

uses crt;

const
    MAX = 10;   (* Maximum number of vertices in the graph *)

type
    Node = record
        vertex: integer;
        weight: integer;
    end;

    NodeList = array[1..MAX] of Node;
    Path = array[1..MAX] of integer;
    Graph = array[1..MAX, 1..MAX] of integer;

var
    numVertices, source, destination, numNodes: integer;
    adjMatrix: Graph;
    distances: Path;
    paths: array[1..MAX] of NodeList;

{ Function to initialize the graph }
procedure initialize();
var
    i, j: integer;
begin
    clrscr;
    writeln('Enter number of vertices in the graph: ');
    readln(numVertices);

    { Initialize all distances to infinity }
    for i := 1 to numVertices do
        distances[i] := MAX + 1;

    writeln('Enter the adjacency matrix: ');

    { Input the adjacency matrix }
    for i := 1 to numVertices do
    begin
        paths[i][1].vertex := i;
        paths[i][1].weight := 0;

        for j := 1 to numVertices do
        begin
            read(adjMatrix[i, j]);
            if (i = j) then
                adjMatrix[i, j] := 0;
        end;
    end;
end;

{ Function to find the shortest path using Dijkstra's algorithm }
procedure dijkstra();
var
    visited: array[1..MAX] of boolean;
    pathFound: boolean;
    currentNode, currentDist, nextNode, nextDist, i, j: integer;
begin
    { Initialize the distances of source node to 0 }
    distances[source] := 0;

    { Mark all nodes as not visited }
    for i := 1 to numVertices do
        visited[i] := false;

    { Loop until path is found or all nodes are visited }
    repeat
        { Find the unvisited node with shortest distance }
        currentNode := -1;
        currentDist := MAX + 1;
        for i := 1 to numVertices do
        begin
            if (not visited[i]) and (distances[i] < currentDist) then
            begin
                currentNode := i;
                currentDist := distances[i];
            end;
        end;

        { If no unvisited node has a distance, path is not found }
        if (currentNode = -1) then
            pathFound := true
        else
        begin
            { Mark the current node as visited }
            visited[currentNode] := true;

            { Update distances of adjacent nodes }
            for i := 1 to numVertices do
            begin
                if (not visited[i]) and (adjMatrix[currentNode, i] > 0) then
                begin
                    nextNode := i;
                    nextDist := adjMatrix[currentNode, i] + currentDist;
                    if (nextDist < distances[nextNode]) then
                    begin
                        { Update the distance and path }
                        distances[nextNode] := nextDist;
                        for j := 1 to numNodes do
                        begin
                            paths[nextNode][j] := paths[currentNode][j];
                        end;
                        numNodes := numNodes + 1;
                        paths[nextNode][numNodes].vertex := i;
                        paths[nextNode][numNodes].weight := nextDist;
                    end;
                end;
            end;
        end;
    until pathFound or (numNodes = MAX);
end;

{ Main program }
begin
    initialize();
    writeln('Enter the source node: ');
    readln(source);
    writeln('Enter the destination node: ');
    readln(destination);

    { Perform Dijkstra's algorithm }
    dijkstra();

    { Print the shortest distance }
    writeln('Shortest distance from node ', source, ' to node ', destination, ' is: ', distances[destination]);

    { Print the shortest path }
    writeln('Shortest path: ');
    for i := 1 to numNodes do
        write(paths[destination][i].vertex, ' ');

    readln;
end.