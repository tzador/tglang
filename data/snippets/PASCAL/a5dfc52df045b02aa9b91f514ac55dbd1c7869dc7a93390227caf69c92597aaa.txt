{
    This is a complex code snippet in PASCAL that implements a doubly-linked list data structure.
    It allows for insertion, deletion and printing of elements within the list.
    To use, simply declare a new DoublyLinkedList and utilize the provided methods.
}

{
    The Node class represents a single element in the doubly-linked list.
    It holds a value and pointers to the previous and next nodes in the list.
}
type
    Node = record
        element: integer; {value of the node}
        previous: ^Node; {pointer to the previous node}
        next: ^Node; {pointer to the next node}
    end;

{
    The DoublyLinkedList class represents the entire list.
    It holds a count of the number of nodes in the list and pointers to the first and last nodes.
}
type
    DoublyLinkedList = class
    private
        Count: integer; {number of nodes in the list}
        head: ^Node; {pointer to the first node}
        tail: ^Node; {pointer to the last node}
    public
        {
            The Constructor method initializes a new empty list.
        }
        Constructor Create;
        {
            The Insert method adds a new element to the end of the list.
            Parameters:
                element: the value to be added
        }
        procedure Insert(element: integer);
        {
            The Delete method removes a given element from the list.
            Parameters:
                element: the value to be removed
        }
        procedure Delete(element: integer);
        {
            The PrintList method prints all the elements in the list.
        }
        procedure PrintList;
    end;

Constructor DoublyLinkedList.Create;
begin
    Count := 0; {initialize the count to 0}
    head := nil; {initialize the head pointer to nil}
    tail := nil; {initialize the tail pointer to nil}
end;

procedure DoublyLinkedList.Insert(element: integer);
var
    newNode: ^Node; {pointer to the new node}
begin
    Count := Count + 1; {increment the count by 1}
    {create a new node with the given element}
    newNode := new(Node);
    newNode^.element := element; {set the element value}
    newNode^.next := nil; {set the next pointer to nil}
    if head = nil then {if the list is empty}
    begin
        newNode^.previous := nil; {set the previous pointer to nil}
        head := newNode; {new node becomes the head}
        tail := newNode; {new node also becomes the tail}
    end
    else {if the list is not empty}
    begin
        newNode^.previous := tail; {set the previous pointer to the previous tail}
        tail^.next := newNode; {set the next pointer of the previous tail to the new node}
        tail := newNode; {new node becomes the tail}
    end;
end;

procedure DoublyLinkedList.Delete(element: integer);
var
    current: ^Node; {pointer to the current node}
begin
    current := head; {start at the head node}
    while (current <> nil) do {while there are still nodes in the list}
    begin
        if current^.element = element then {if the current node's element matches the given element}
        begin
            if current^.previous <> nil then {if the current node has a previous node}
            begin
                current^.previous^.next := current^.next; {set the next pointer of the previous node to the next node of the current node}
            end
            else {if the current node is the head}
            begin
                head := current^.next; {the next node of the current node becomes the new head}
            end;
            if current^.next <> nil then {if the current node has a next node}
            begin
                current^.next^.previous := current^.previous; {set the previous pointer of the next node to the previous node of the current node}
            end
            else {if the current node is the tail}
            begin
                tail := current^.previous; {the previous node of the current node becomes the new tail}
            end;
            Dispose(current); {free the memory allocated to the current node}
            Count := Count - 1; {decrement the count by 1}
            break; {exit the loop}
        end;
        current := current^.next; {move to the next node}
    end;
end;

procedure DoublyLinkedList.PrintList;
var
    current: ^Node; {pointer to the current node}
begin
    current := head; {start at the head node}
    while (current <> nil) do {while there are still nodes in the list}
    begin
        Write(current^.element, ' '); {print the current node's element}
        current := current^.next; {move to the next node}
    end;
    Writeln; {print an empty line}
end;

{
    Example usage:
}
Var
    list: DoublyLinkedList;
begin
    {initialize a new list}
    list := DoublyLinkedList.Create;
    {insert 3 elements}
    list.Insert(1);
    list.Insert(2);
    list.Insert(3);
    {print the list}
    list.PrintList; {outputs: 1 2 3}
    {delete the element with value 2}
    list.Delete(2);
    {print the list again}
    list.PrintList; {outputs: 1 3}
end.