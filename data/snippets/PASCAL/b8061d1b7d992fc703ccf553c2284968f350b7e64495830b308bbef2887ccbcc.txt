// This code snippet demonstrates a complex sorting algorithm using recursion
procedure quickSort(arr : array of integer; low : integer; high : integer);
var
  pivot, i, j, temp : integer;

// Partition subroutine
procedure partition(arr : array of integer; low : integer; high : integer; var i : integer; var j : integer);
var
  pivot, temp : integer;
begin
  pivot := arr[low];
  i := low;
  j := high;
  repeat
    while arr[i] < pivot do i := i + 1;
    while arr[j] > pivot do j := j - 1;
    if i <= j then
    begin
      temp := arr[i];
      arr[i] := arr[j];
      arr[j] := temp;
      i := i + 1;
      j := j - 1;
    end;
  until i > j;

// Quicksort subroutine using recursion
procedure quickSort(arr : array of integer; low : integer; high : integer);
var
  i, j : integer;
begin
  if low < high then
  begin
    partition(arr, low, high, i, j);
    if i - low < high - j then
    begin
      quickSort(arr, low, j);
      quickSort(arr, i, high);
    end
    else
    begin
      quickSort(arr, i, high);
      quickSort(arr, low, j);
    end;
  end;
end;

// Driver program
var
  arr : array[1..10] of integer;
  i : integer;
begin
  writeln('Enter 10 integers to be sorted:');
  for i := 1 to 10 do
    read(arr[i]);
  quickSort(arr, 1, 10);
  writeln('Sorted integers are:');
  for i := 1 to 10 do
    write(arr[i], ' ');
  writeln;
end.