{Declaring a function that checks if a given number is a prime number}
function isPrime(num: integer): boolean;
var
  i: integer;
begin
  isPrime := True; {Initialize the boolean variable as true}
  for i := 2 to num-1 do {Loop from 2 to one number less than the given number}
  begin
    if (num mod i) = 0 then {Check if the number is divisible by any number in the loop}
    begin
      isPrime := False; {If it is divisible, set the boolean variable as false}
      break; {Exit the loop}
    end;
  end;
end;

{Declaring a procedure that prints an inverted triangle of numbers based on the given size}
procedure invertedTriangle(size: integer);
var
  i, j: integer;
begin
  for i := size downto 1 do {Loop from the given size to 1}
  begin
    for j := 1 to i do {Loop from 1 to the current size}
    begin
      write(j); {Print the current number}
    end;
    writeln(); {Move to the next line}
  end;
end;

{Main program starts here}
begin
  writeln('Enter a number to check if it is prime: ');
  var num: integer; {Declare a variable to store the user input}
  readln(num); {Read the user input}
  if isPrime(num) then {Call the isPrime function and check if it returns true}
    writeln(num, ' is a prime number.') {If true, print that the number is a prime number}
  else
    writeln(num, ' is not a prime number.'); {If false, print that the number is not a prime number}
  
  writeln('Enter the size for the inverted triangle: ');
  var size: integer; {Declare a variable to store the user input}
  readln(size); {Read the user input}
  invertedTriangle(size); {Call the invertedTriangle procedure with the given size}
end.