procedure MergeSort(var arr: array of Integer; low, high: Integer);
//Input: array of integers, low and high index
//Output: sorted array in ascending order

var
  temp: array of Integer;
  mid, i, j, k : integer;

begin
  if high > low then
    begin
      mid := (low + high) div 2;

      //recursive calls to split the array into subarrays of size 1
      MergeSort(arr, low, mid);
      MergeSort(arr, mid + 1, high);

      //copy elements from the original array into temporary array
      for i := low to high do
        temp[i] := arr[i];

      //merge the subarrays back into the original array
      i := low; //first index of left subarray
      j := mid + 1; //first index of right subarray
      k := low; //first index of temp array

      while (i <= mid) and (j <= high) do
        begin
          if temp[i] < temp[j] then
            begin
              arr[k] := temp[i];
              i := i + 1;
            end
          else
            begin
              arr[k] := temp[j];
              j := j + 1;
            end;
          k := k + 1;
        end;

      //copy remaining elements from either subarray back into original array
      while i <= mid do
        begin
          arr[k] := temp[i];
          i := i + 1;
          k := k + 1;
        end;

      while j <= high do
        begin
          arr[k] := temp[j];
          j := j + 1;
          k := k + 1;
        end;
    end;
end;