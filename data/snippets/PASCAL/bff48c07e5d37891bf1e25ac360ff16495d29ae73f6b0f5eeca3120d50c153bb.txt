program ComplexCode;

type
  ComplexArray = array[1..10] of Integer; {create new array type}

var
  num, result: Integer; {declare two variables}
  array1, array2: ComplexArray; {declare two complex arrays}

function CalculateValue(a: Integer): Integer; {create new function with a parameter}
var
  temp: Integer; {declare temporary variable}
begin
  temp := a * 2;  {multiply parameter by 2 and assign to temporary variable}
  CalculateValue := temp + 5; {add 5 to temporary variable and return it as the function's result}
end;

procedure ComplexProcedure(var arr: ComplexArray); {create new procedure with a passing by reference parameter}
var
  i: Integer; {declare a loop variable}
begin
  for i := 1 to 10 do {loop through array elements}
  begin
    arr[i] := CalculateValue(arr[i]); {pass each element to CalculateValue function and assign result back to array}
  end;
end;

begin
  for num := 1 to 10 do {loop through numbers 1 to 10}
  begin
    result := CalculateValue(num); {call CalculateValue function with current number and assign result to variable}
    array1[num] := result; {assign result to array}
  end;

  ComplexProcedure(array1); {call ComplexProcedure passing by reference array1}
  
  for num := 1 to 10 do {loop through numbers 1 to 10}
  begin
    array2[num] := CalculateValue(array1[num]); {pass each element of array1 to CalculateValue function and assign result to array2}
  end;
end.