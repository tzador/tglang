procedure Quicksort(var arr: array of Integer; first, last: Integer);
// This procedure implements the Quicksort algorithm to sort an array of Integers
var
  i, j, pivot, temp: Integer;
begin
  // Base case: If first index equals last index, do nothing
  if first >= last then
    exit;
  
  // Choose middle element as pivot
  pivot := arr[(first + last) div 2];
  i := first;
  j := last;

  // Partition array into two subarrays
  while i <= j do
  begin
    // Find first element on left that is greater than pivot
    while arr[i] < pivot do
      i := i + 1;
      
    // Find first element on right that is less than pivot
    while arr[j] > pivot do
      j := j - 1;
      
    // Swap elements on left and right of pivot
    if i <= j then
    begin
      temp := arr[i];
      arr[i] := arr[j];
      arr[j] := temp;
      i := i + 1;
      j := j - 1;
    end;
  end;
  
  // Recursively sort subarrays on left and right of pivot
  Quicksort(arr, first, j);
  Quicksort(arr, i, last);
end;

// Example usage:

var
  myArr: array[0..4] of Integer;
  i: Integer;
begin
  // Populate array with random integers
  for i := 0 to 4 do
  begin
    myArr[i] := Random(50);
    Write(myArr[i], ' ');
  end;
  Writeln();
  
  // Sort array using Quicksort
  Quicksort(myArr, 0, 4);
  
  // Print sorted array
  for i := 0 to 4 do
    Write(myArr[i], ' ');
end.
// Output: 6 21 12 5 33 
// Sorted output: 5 6 12 21 33