function generateFibonacciSequence(number: Integer): Integer; 
{This function takes in a number and generates the corresponding number in the Fibonacci sequence.}

var 
    firstNum, secondNum, result, i: Integer;  
    
begin 
    firstNum := 0; {First number in sequence} 
    secondNum := 1; {Second number in sequence} 
    result := 0; {Variable to store result} 
    
    if (number = 0) or (number = 1) then {Special case for first and second numbers in sequence}
        result := number 
    else 
        begin
            for i := 2 to number do {Loop to generate sequence}
            begin
                result := firstNum + secondNum;  {Add previous two numbers to get next number in sequence}
                firstNum := secondNum;  {Update first number}
                secondNum := result;  {Update second number}
            end;
        end;
        
    generateFibonacciSequence := result;  {Return final result}
end;

begin 
    writeln(generateFibonacciSequence(10)); {Prints the 10th number in the Fibonacci sequence (55)}
end.