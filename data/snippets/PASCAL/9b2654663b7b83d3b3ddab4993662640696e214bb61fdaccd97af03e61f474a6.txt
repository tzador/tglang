/// Pascal code to sort an array using the quicksort algorithm

var
  array: array[1..100] of integer; // declares an array of size 100 to be sorted
  n, i: integer; // declares variables to keep track of array size and iteration count 

// procedure to swap two elements in an array
procedure swap(var a, b: integer);
var
  temp: integer;
begin
  temp := a;
  a := b;
  b := temp;
end;

// function to partition the array into two halves and return the index of the pivot element
function partition(var array: array of integer; left, right: integer): integer;
var
  pivot, i, j: integer;
begin
  pivot := array[right]; // set the pivot element to be the rightmost element in the array
  i := left - 1; // initialize a pointer to keep track of elements smaller than the pivot
  j := right; // initialize a pointer to keep track of elements larger than the pivot
  while i < j do // loop until pointers overlap
  begin
    // increment the i pointer until an element larger than the pivot is found
    repeat
      i := i + 1;
    until array[i] >= pivot;
    // decrement the j pointer until an element smaller than the pivot is found
    repeat
      j := j - 1;
    until array[j] <= pivot;
    // swap the elements at the i and j pointers
    if i < j then
      swap(array[i], array[j]);
  end;
  // put the pivot element in its correct final position
  swap(array[i], array[right]);
  // return the index of the pivot element
  partition := i;
end;

// recursive procedure to perform quicksort on the array
procedure quicksort(var array: array of integer; left, right: integer);
var
  pivotIndex: integer;
begin
  // check if there are more than one element in the array to be sorted
  if left < right then
  begin
    // partition the array into two halves and get the index of the pivot element
    pivotIndex := partition(array, left, right);
    // recursively call quicksort on the left and right halves of the array
    quicksort(array, left, pivotIndex - 1);
    quicksort(array, pivotIndex + 1, right);
  end;
end;

// main program
begin
  // input the size of the array
  write('Enter the size of the array: ');
  readln(n);
  // input the elements of the array
  writeln('Enter ', n, ' elements:');
  for i := 1 to n do
    readln(array[i]);
  // call quicksort procedure to sort the array
  quicksort(array, 1, n); 
  // display the sorted array
  writeln('The sorted array is:');
  for i := 1 to n do
    writeln(array[i]);
end.