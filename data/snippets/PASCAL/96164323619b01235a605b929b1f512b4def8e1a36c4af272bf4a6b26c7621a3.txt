{
This is a code snippet that implements a recursive binary search algorithm in PASCAL.
The algorithm takes in a sorted array of integers and a target value and returns the index of the target value in the array, or -1 if the value is not found.
}

program RecursiveBinarySearch;

// Function that implements the recursive binary search algorithm, takes in an array of integers and the target value and returns the index of the value in the array or -1 if not found
function RecursiveBinarySearch(arr: array of Integer; target: Integer; start, last: Integer): Integer;

// Base case: if starting index is greater than last index, the target value is not found in the array
if start > last then
begin
    RecursiveBinarySearch := -1;
    exit;
end;

// Calculate the middle index of the array
var middle: Integer;
middle := (start + last) div 2;

// Check if the middle value is equal to the target value
if arr[middle] = target then
begin
    RecursiveBinarySearch := middle; // Return the index of the target value
    exit;
end
else if arr[middle] < target then // If target value is greater than middle value, search in the upper half of the array
begin
    RecursiveBinarySearch := RecursiveBinarySearch(arr, target, middle + 1, last); // Recursive call with updated starting index and last index
    exit;
end
else // If target value is less than middle value, search in the lower half of the array
begin
    RecursiveBinarySearch := RecursiveBinarySearch(arr, target, start, middle - 1); // Recursive call with updated starting index and last index
    exit;
end;

end;

// Main program that creates an array of integers and calls the recursive binary search function
var
    numbers: array[1..10] of Integer = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100); // Sorted array of integers
    target: Integer = 70; // Target value to search for
    index: Integer; // Variable to store the index of the target value

begin
    index := RecursiveBinarySearch(numbers, target, 1, 10); // Call the recursive binary search function, passing in the array, target value, and starting and last indexes
    writeln("Target value ", target, " found at index ", index); // Print the result
end.