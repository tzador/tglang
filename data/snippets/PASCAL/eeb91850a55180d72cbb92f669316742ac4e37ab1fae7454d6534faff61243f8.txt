procedure TicTacToe()
var
  board: array [1..3, 1..3] of string;
  numMoves: integer; //keeps track of number of moves made
  currentPlayer: string; //keeps track of current player
  rowInput, colInput: integer; //user input for row and column
begin
  //initialize board with dashes
  for i:= 1 to 3 do
    for j:= 1 to 3 do
      board[i,j]:= '-';

  numMoves := 0; //start with zero moves
  currentPlayer:= 'X'; //player X starts first

  //game loop
  repeat
    //get user input for row and column
    writeln('Player ', currentPlayer, ', enter your move (row and column)');
    readln(rowInput, colInput);
    //check if chosen spot is empty
    if board[rowInput, colInput] = '-' then
    begin
      //update board with player's move
      board[rowInput, colInput]:= currentPlayer;
      //check for a winning combination
      if (board[1,1] = currentPlayer) and (board[1,2] = currentPlayer) and (board[1,3] = currentPlayer) then
        writeln('Player ', currentPlayer, ' wins!');
      else if (board[2,1] = currentPlayer) and (board[2,2] = currentPlayer) and (board[2,3] = currentPlayer) then
        writeln('Player ', currentPlayer, ' wins!');
      else if (board[3,1] = currentPlayer) and (board[3,2] = currentPlayer) and (board[3,3] = currentPlayer) then
        writeln('Player ', currentPlayer, ' wins!');
      else if (board[1,1] = currentPlayer) and (board[2,1] = currentPlayer) and (board[3,1] = currentPlayer) then
        writeln('Player ', currentPlayer, ' wins!');
      else if (board[1,2] = currentPlayer) and (board[2,2] = currentPlayer) and (board[3,2] = currentPlayer) then
        writeln('Player ', currentPlayer, ' wins!');
      else if (board[1,3] = currentPlayer) and (board[2,3] = currentPlayer) and (board[3,3] = currentPlayer) then
        writeln('Player ', currentPlayer, ' wins!');
      else if (board[1,1] = currentPlayer) and (board[2,2] = currentPlayer) and (board[3,3] = currentPlayer) then
        writeln('Player ', currentPlayer, ' wins!');
      else if (board[1,3] = currentPlayer) and (board[2,2] = currentPlayer) and (board[3,1] = currentPlayer) then
        writeln('Player ', currentPlayer, ' wins!');
      //switch to other player's turn
      if currentPlayer = 'X' then
        currentPlayer:= 'O'
      else currentPlayer:= 'X';
      //increment move count
      numMoves := numMoves + 1;
    end
    else writeln('That spot is already taken. Please try again.'); //if spot is not empty
  until (numMoves = 9) or (board[1,1] <> '-') or (board[1,2] <> '-') or (board[1,3] <> '-') or
    (board[2,1] <> '-') or (board[2,2] <> '-') or (board[2,3] <> '-') or
    (board[3,1] <> '-') or (board[3,2] <> '-') or (board[3,3] <> '-'); //game ends if board is full or a player wins
end.