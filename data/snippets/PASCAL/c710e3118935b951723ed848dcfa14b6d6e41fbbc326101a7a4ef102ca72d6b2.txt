{
This program implements a sorting algorithm called "Quick Sort"
which uses a divide and conquer approach to sort an array of integers.
This algorithm has an average running time of O(nlogn).
}

{Declaration section}
program QuickSort;
var
  arraySize, i: integer;
  arr: array[1..100] of integer;

{Function that partitions the array into two sub-arrays}
function partition(low, high: integer): integer;
var
  pivot, i, j, temp: integer;

begin
  pivot := arr[low];
  i := low;
  j := high;

  while i < j do
  begin
    while (arr[i] <= pivot) and (i < high) do
      i := i + 1;

    while arr[j] > pivot do
      j := j - 1;

    if i < j then
    begin
      temp := arr[i];
      arr[i] := arr[j];
      arr[j] := temp;
    end;
  end;

  temp := arr[low];
  arr[low] := arr[j];
  arr[j] := temp;

  partition := j;
end;

{Recursive function to sort the sub-arrays using partition function}
procedure quickSort(low, high: integer);
var
  j: integer;

begin
  if low < high then
  begin
    j := partition(low, high);
    quickSort(low, j - 1);
    quickSort(j + 1, high);
  end;
end;

{Main program}
begin
  {Input the size of the array and the elements}
  WriteLn('Enter the size of the array: ');
  ReadLn(arraySize);
  
  WriteLn('Enter the elements of the array: ');
  for i := 1 to arraySize do
    ReadLn(arr[i]);
  
  {Call the quickSort function with array indices}
  quickSort(1, arraySize);

  {Display the sorted array}
  WriteLn('Sorted array: ');
  for i := 1 to arraySize do
    Write(arr[i], ' ');
end.