{
This code snippet generates a database of Olympic athletes
using an array of records.
}
program OlympicsDatabase;

type
  Athlete = record
    name: string;
    country: string;
    sport: string;
    event: string;
    age: integer;
    medals: array[1..3] of string;
  end;
  
var
  athleteDb: array[1..100] of Athlete; {array of records to hold athlete information}
  numAthletes: integer; {variable to hold number of athletes}

procedure addAthlete(var athlete: Athlete); {procedure to add new athlete to database}
begin
  writeLn('Please enter athlete information:');
  write('Name: ');
  readLn(athlete.name);
  write('Country: ');
  readLn(athlete.country);
  write('Sport: ');
  readLn(athlete.sport);
  write('Event: ');
  readLn(athlete.event);
  write('Age: ');
  readLn(athlete.age);
  write('Medals (max 3): ');
  for i := 1 to 3 do {loop to read in medals}
    readLn(athlete.medals[i]);
end;

function searchAthlete(var athlete: Athlete; searchOption: integer): boolean; {function to search for athlete in database}
var
  searchInput: string;
  i: integer;
begin
  case searchOption of
    1: begin {search by name}
         write('Enter athlete name: ');
         readLn(searchInput);
         if athlete.name = searchInput then {check if names match}
           searchAthlete := true {return true if match found}
         else
           searchAthlete := false; {return false if no match found}
       end;
    2: begin {search by country}
         write('Enter country: ');
         readLn(searchInput);
         if athlete.country = searchInput then {check if countries match}
           searchAthlete := true {return true if match found}
         else
           searchAthlete := false; {return false if no match found}
       end;
    3: begin {search by sport}
         write('Enter sport: ');
         readLn(searchInput);
         if athlete.sport = searchInput then {check if sports match}
           searchAthlete := true {return true if match found}
         else
           searchAthlete := false; {return false if no match found}
       end;
    4: begin {search by event}
         write('Enter event: ');
         readLn(searchInput);
         if athlete.event = searchInput then {check if events match}
           searchAthlete := true {return true if match found}
         else
           searchAthlete := false; {return false if no match found}
       end;
    5: begin {search by medals}
         write('Enter medal: ');
         readLn(searchInput);
         for i := 1 to 3 do {loop through medals}
         begin
           if athlete.medals[i] = searchInput then {check if medals match}
             searchAthlete := true {return true if match found}
           else
             searchAthlete := false; {return false if no match found}
         end;
       end;
  end;
end;

procedure displayAthlete(var athlete: Athlete); {procedure to display athlete information}
var
  i: integer;
begin
  writeLn('-----------------------------');
  writeLn('Name: ', athlete.name);
  writeLn('Country: ', athlete.country);
  writeLn('Sport: ', athlete.sport);
  writeLn('Event: ', athlete.event);
  writeLn('Age: ', athlete.age);
  writeLn('Medals: ');
  for i := 1 to 3 do {loop to display medals}
    writeLn(athlete.medals[i]);
end;

procedure displayByCountry(country: string); {procedure to display athletes from specific country}
var
  i, count: integer;
begin
  count := 0;
  for i := 1 to numAthletes do {loop through athletes in database}
  begin
    if athleteDb[i].country = country then {check if athlete country matches input}
    begin
      displayAthlete(athleteDb[i]); {display athlete information}
      count := count + 1; {increment count}
    end;
  end;
  if count = 0 then {if no athletes found from input country}
    writeLn('No athletes from ', country, ' found in database.');
end;

procedure displayByMedal(medalType: string); {procedure to display athletes with specific medal}
var
  i, count: integer;
begin
  count := 0;
  for i := 1 to numAthletes do {loop through athletes in database}
  begin
    if athleteDb[i].medals[1] = medalType then {check if first medal matches input}
    begin
      displayAthlete(athleteDb[i]); {display athlete information}
      count := count + 1; {increment count}
    end
    else if athleteDb[i].medals[2] = medalType then {check if second medal matches input}
    begin
      displayAthlete(athleteDb[i]); {display athlete information}
      count := count + 1; {increment count}
    end
    else if athleteDb[i].medals[3] = medalType then {check if third medal matches input}
    begin
      displayAthlete(athleteDb[i]); {display athlete information}
      count := count + 1; {increment count}
    end;
  end;
  if count = 0 then {if no athletes found with input medal}
    writeLn('No athletes with a ', medalType, ' medal found in database.');
end;

procedure menu(option: integer); {procedure for menu options}
var
  athlete: Athlete; {temporary record to hold athlete information}
  searchOption: integer;  {variable to hold search option chosen by user}
  searchInput: string;  {variable to hold input for search}
  country: string;  {variable to hold input for country search}
  medalType: string;  {variable to hold input for medal search}
  i: integer;
begin
  case option of
    1: begin  {add athlete}
         addAthlete(athlete);  {call procedure to add athlete}
         athleteDb[numAthletes+1] := athlete;  {add new athlete to array}
         numAthletes := numAthletes + 1;  {increment number of athletes}
         writeLn('Athlete added successfully.');
       end;
    2: begin  {search for athlete}
         writeLn('Search by:');
         writeLn('1. Name');
         writeLn('2. Country');
         writeLn('3. Sport');
         writeLn('4. Event');
         writeLn('5. Medals');
         write('Enter option: ');
         readLn(searchOption); {read in search option}
         if searchOption = 1 then  {if searching by name}
         begin
           write('Enter athlete name: ');
           readLn(searchInput);
           for i := 1 to numAthletes do  {loop through athletes in database}
           begin
             if athleteDb[i].name = searchInput then {check if names match}
               displayAthlete(athleteDb[i]); {display athlete information}
           end;
         end
         else if (searchOption >= 2) and (searchOption <= 5) then  {if searching by country, sport, event, or medals}
         begin
           write('Enter search input: ');
           readLn(searchInput);
           for i := 1 to numAthletes do  {loop through athletes in database}
             if searchAthlete(athleteDb[i], searchOption) then {call function to search for athlete}
               displayAthlete(athleteDb[i]); {display athlete information}
         end
         else
           writeLn('Invalid option chosen.');
       end;
    3: begin  {display all athletes}
         if numAthletes = 0 then {if no athletes in database}
           writeLn('No athletes in database.')
         else
         begin
           for i := 1 to numAthletes do  {loop through athletes in database}
           begin
             displayAthlete(athleteDb[i]); {display each athlete's information}
             writeLn;
           end;
         end;
       end;
    4: begin  {display athletes by country}
         if numAthletes = 0 then {if no athletes in database}
           writeLn('No athletes in database.')
         else
         begin
           write('Enter country: ');
           readLn(country); {read in country}
           displayByCountry(country); {call procedure to display athletes from specific country}
         end;
       end;
    5: begin  {display athletes with specific medal}
         if numAthletes = 0 then {if no athletes in database}
           writeLn('No athletes in database.')
         else
         begin
           write('Enter medal: ');
           readLn(medalType); {read in medal}
           displayByMedal(medalType); {call procedure to display athletes with specific medal}
         end;
       end;
    6: begin  {exit program}
         writeLn('Exiting program.');
       end;
  end;
end;

procedure displayMenu; {procedure to display menu options}
begin
  writeLn('1. Add Athlete');
  writeLn('2. Search for Athlete');
  writeLn('3. Display All Athletes');
  writeLn('4. Display Athletes by Country');
  writeLn('5 .Display Athletes with Specific Medal');
  writeLn('6. Exit Program');
end;

procedure main; {main program}
var
  option: integer; {variable to hold user's chosen option}
begin
  numAthletes := 0; {initialize number of athletes}
  repeat
    writeLn;
    displayMenu; {call procedure to display menu options}
    write('Enter option: ');
    readLn(option); {read in user's chosen option}
    menu(option); {call procedure for menu options}
  until option = 6; {repeat until user chooses to exit}
end.

{
Example usage:

Input:
Enter option: 1
Please enter athlete information:
Name: Simone Biles
Country: United States
Sport: Gymnastics
Event: Artistic Individual All-Around
Age: 24
Medals (max 3): Gold, Gold, Bronze

Output:
Athlete added successfully.

Input:
Enter option: 1
Please enter athlete information:
Name: Usain Bolt
Country: Jamaica
Sport: Track and Field
Event: Men's 100m
Age: 35
Medals (max 3): Gold, Gold, Gold

Output:
Athlete added successfully.

Input:
Enter option: 2
Search by:
1. Name
2. Country
3. Sport
4. Event
5. Medals
Enter option: 2
Enter search input: United States

Output:
-----------------------------
Name: Simone Biles
Country: United States
Sport: Gymnastics
Event: Artistic Individual All-Around
Age: 24
Medals:
Gold
Gold
Bronze

-----------------------------
Name: Usain Bolt
Country: Jamaica
Sport: Track and Field
Event: Men's 100m
Age: 35
Medals:
Gold
Gold
Gold

Input:
Enter option: 3

Output:
-----------------------------
Name: Simone Biles
Country: United States
Sport: Gymnastics
Event: Artistic Individual All-Around
Age: 24
Medals:
Gold
Gold
Bronze

-----------------------------
Name: Usain Bolt
Country: Jamaica
Sport: Track and Field
Event: Men's 100m
Age: 35
Medals:
Gold
Gold
Gold

Input:
Enter option: 4
Enter country: Jamaica

Output:
-----------------------------
Name: Usain Bolt
Country: Jamaica
Sport: Track and Field
Event: Men's 100m
Age: 35
Medals:
Gold
Gold
Gold

Input:
Enter option: 5
Enter medal: Gold

Output:
-----------------------------
Name: Simone Biles
Country: United States
Sport: Gymnastics
Event: Artistic Individual All-Around
Age: 24
Medals:
Gold
Gold
Bronze

-----------------------------
Name: Usain Bolt
Country: Jamaica
Sport: Track and Field
Event: Men's 100m
Age: 35
Medals:
Gold
Gold
Gold

{
If no athletes from the specified country or with the specified medal are found,
the following message is displayed:

No athletes from Jamaica found in database.
OR
No athletes with a Silver medal found in database.
}