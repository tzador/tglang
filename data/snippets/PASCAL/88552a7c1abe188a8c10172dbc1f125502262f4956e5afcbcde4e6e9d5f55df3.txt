procedure QuickSort(var A: array of Integer; low, high: Integer);
var
  i, j, pivot, temp: Integer; // declare variables for sorting
begin
  if high > low then
  begin
    // initialize pivot as middle element
    pivot := A[(low + high) div 2];
    // set left and right pointers
    i := low;
    j := high;
    // perform partitioning
    repeat
      // increment left pointer until value greater than pivot is found
      while A[i] < pivot do
        i := i + 1;
      // decrement right pointer until value lesser than pivot is found
      while A[j] > pivot do
        j := j - 1;
      // swap values if pointers have not crossed
      if i <= j then
      begin
        temp := A[i];
        A[i] := A[j];
        A[j] := temp;
        // move pointers to next positions
        i := i + 1;
        j := j - 1;
      end;
    until i > j;
    // recursively sort sub-array to the left of pivot
    QuickSort(A, low, j);
    // recursively sort sub-array to the right of pivot
    QuickSort(A, i, high);
  end;
end;