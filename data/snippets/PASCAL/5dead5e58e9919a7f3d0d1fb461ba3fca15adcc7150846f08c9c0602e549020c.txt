program QuickSort(input,output);

{ This program implements the QuickSort algorithm to sort an array of integers. }

{ Declare global variables }
var A : array[1..100] of integer;
    N, i, j, pivot, temp : integer;

{ Function for partitioning the array }
function Partition(low, high: integer): integer;
begin 
    pivot := A[high];  { Choose pivot element }
    i := low - 1;      { Initialize i }

    for j := low to high-1 do
    begin
        if (A[j] < pivot) then
        begin
            i := i + 1;  { Increment i }
            
            { Swap i and j elements }
            temp := A[i]; 
            A[i] := A[j];
            A[j] := temp;
        end;
    end;
    
    { Swap pivot element with element at i+1 }
    temp := A[i+1];
    A[i+1] := A[high];
    A[high] := temp;
    
    Partition := i + 1;   { Return partition index }
end;

{ Function for QuickSort algorithm }
procedure QuickSort(low, high: integer);
var pivotIndex : integer;
begin
    if (low < high) then
    begin
        { Call Partition function to get pivot index }
        pivotIndex := Partition(low, high);
        
        { Recursively call QuickSort on sub-arrays }
        QuickSort(low, pivotIndex - 1);
        QuickSort(pivotIndex + 1, high);
    end;
end;

{ Main program }
begin
    { Get array size from user }
    write('Enter array size: ');
    readln(N);
    
    { Get array elements from user }
    for i := 1 to N do
    begin
        write('Enter element ', i, ': ');
        readln(A[i]);
    end;
    
    { Call QuickSort procedure }
    QuickSort(1, N);
    
    { Print sorted array }
    writeln('Sorted array:');
    for i := 1 to N do
    begin
        write(A[i], ' ');
    end;
end.