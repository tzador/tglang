program ComplexSnippet;
//This is a program that generates a complex data structure
//in the form of a graph

//First, we define the record for each node in the graph
type
  Node = record
    //Each node will have an integer value and a list of adjacent nodes
    value: integer;
    adjacentNodes: array of Node;
  end;

//Next, we define the graph data structure using an array of Nodes
var
  graph: array of Node;

//Now, we initialize the graph by adding nodes and connecting them
procedure InitializeGraph();
var
  root, node1, node2, node3: Node;
begin
  //Creating the root node with a value of 0
  root.value := 0;
  //Creating node1 with a value of 1
  node1.value := 1;
  //Creating node2 with a value of 2
  node2.value := 2;
  //Creating node3 with a value of 3
  node3.value := 3;

  //Adding node1 as an adjacent node to the root node
  setLength(root.adjacentNodes, 1);
  root.adjacentNodes[0] := node1;

  //Adding node2 as an adjacent node to node1
  setLength(node1.adjacentNodes, 1);
  node1.adjacentNodes[0] := node2;

  //Adding node3 as an adjacent node to node2
  setLength(node2.adjacentNodes, 1);
  node2.adjacentNodes[0] := node3;

  //Adding the root node and all its adjacent nodes to the graph
  setLength(graph, 4);
  graph[0] := root;
  graph[1] := node1;
  graph[2] := node2;
  graph[3] := node3;
end;

//Now, we can perform operations on the graph such as searching for a value
//using depth-first search algorithm
procedure DepthFirstSearch(root: Node; targetValue: integer; var found: boolean);
var
  current: Node;
begin
  //Marking the current node as visited
  root.visited := true;

  //Checking if the current node's value matches the target value
  if root.value = targetValue then
  begin
    found := true;
    exit; //Exiting the search
  end;

  //Iterating through all the adjacent nodes of the current node
  for current in root.adjacentNodes do
  begin
    //Checking if the current adjacent node has been visited
    if not current.visited then
      DepthFirstSearch(current, targetValue, found);
  end;
end;

//Finally, we call the functions to generate and search the graph
begin
  InitializeGraph(); //Generating the graph
  var found: boolean := false;
  DepthFirstSearch(graph[0], 4, found); //Searching for a node with value of 4
end.