program complexCode;

{$mode objfpc}{$H+} // sets the language mode to Object Pascal and enables "long" strings
{$define USE_STRUTILS} // enables string manipulation functions from SysUtils unit

uses
  {$ifdef USE_STRUTILS} // uses the SysUtils unit if the defined constant is true
  SysUtils;
  {$endif}

type
  ComplexNumber = record // defines a custom data type called ComplexNumber
    Real, Imaginary: Double; // has two fields, Real and Imaginary, both of type Double
  end;

  SomeObject = class // defines a custom class called SomeObject
  private
    FComplexNum: ComplexNumber; // holds a ComplexNumber object in a private field

  public
    constructor Create(AReal, AImaginary: Double); // constructor method that takes two Double parameters
    function Add(const AComplexNum: ComplexNumber): ComplexNumber; // function that returns a ComplexNumber object as a sum of two ComplexNumbers
    function ToString: AnsiString; // function that returns a string representation of the object
  end;

constructor SomeObject.Create(AReal, AImaginary: Double); // definition of the constructor method
begin
  FComplexNum.Real := AReal; // sets the value of the Real field to the first parameter
  FComplexNum.Imaginary := AImaginary; // sets the value of the Imaginary field to the second parameter
end;

function SomeObject.Add(const AComplexNum: ComplexNumber): ComplexNumber; // definition of the Add function
begin
  // creates a new ComplexNumber object and assigns the sum of the two ComplexNumbers to its fields
  Result.Real := FComplexNum.Real + AComplexNum.Real;
  Result.Imaginary := FComplexNum.Imaginary + AComplexNum.Imaginary;
end;

function SomeObject.ToString: AnsiString; // definition of the ToString function
begin
  Result := Format('%.2f + %.2fi', [FComplexNum.Real, FComplexNum.Imaginary]); // uses the Format function from SysUtils to format the string
end;

var
  complex1, complex2: ComplexNumber; // declares two ComplexNumber variables

begin
  // initializes the two ComplexNumbers with values
  complex1.Real := 1.5;
  complex1.Imaginary := 2.5;

  complex2.Real := 3.5;
  complex2.Imaginary := 4.5;

  // creates a new SomeObject using the constructor and passes in the two ComplexNumbers as parameters
  var obj := SomeObject.Create(complex1.Real, complex2.Real);

  // calls the Add function on the SomeObject and passes in complex2 as a parameter
  var result := obj.Add(complex2);

  // prints out the result using the ToString function
  WriteLn(result.ToString);
end.