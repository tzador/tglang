procedure recursiveBinarySearch(inputArray: array of integer, start: integer, stop: integer, target: integer): integer;
var
  middle: integer;
begin
  if stop < start then
  begin
    // target not in inputArray
    recursiveBinarySearch := -1;
    Exit;
  end;
  // calculate middle index
  middle := (start + stop) div 2;
  if inputArray[middle] = target then
  begin
    // target found at middle index
    recursiveBinarySearch := middle;
    Exit;
  end
  else if inputArray[middle] > target then
  begin
    // target is in the left half of inputArray
    recursiveBinarySearch := recursiveBinarySearch(inputArray, start, middle - 1, target)
  end
  else
  begin
    // target is in the right half of inputArray
    recursiveBinarySearch := recursiveBinarySearch(inputArray, middle + 1, stop, target)
  end;
end;

// Example usage:
program Main;
var
  inputArray: array[1..10] of integer;
  target: integer;
  result: integer;
begin
  inputArray := (2, 5, 8, 12, 15, 18, 22, 25, 28, 33);
  target := 18;
  // search for target in inputArray
  result := recursiveBinarySearch(inputArray, 1, Length(inputArray), target);
  if result = -1 then
  begin
    // target not found in inputArray
    WriteLn("Target not found.");
  end
  else
  begin
    // target found at index result
    WriteLn("Target found at index ", result);
  end;
end;