FUNCTION GrayscaleStretch(image: Image): Image
    // This function takes in an image and returns a grayscale-stretched version of it.
    // It works by finding the minimum and maximum pixel values in the image,
    // then mapping all pixel values between those bounds to a grayscale range.
    // This results in a higher contrast and more visually appealing grayscale image.

    VAR
        min, max, range, i, j: Integer
        tempImg: Image

    // Find the minimum and maximum pixel values in the image
    min := image[0,0].Red
    max := image[0,0].Red
    FOR i := 0 TO image.Width - 1 DO
        FOR j := 0 TO image.Height - 1 DO
            IF image[i,j].Red > max THEN // Check red channel since grayscale works with only one channel
                max := image[i,j].Red
            ENDIF
            IF image[i,j].Red < min THEN
                min := image[i,j].Red
            ENDIF
        ENDFOR
    ENDFOR

    // Calculate the range between the minimum and maximum pixel values
    range := max - min

    // Create a temporary image to store the processed pixels
    tempImg := Image.Create(image.Width, image.Height)

    // Map the image pixels to the grayscale range
    FOR i := 0 TO image.Width - 1 DO
        FOR j := 0 TO image.Height - 1 DO
            // Calculate the new pixel value based on the grayscale range and the original pixel value
            tempImg[i,j].Red := Round((image[i,j].Red - min) * (255 / range))
            tempImg[i,j].Green := Round((image[i,j].Green - min) * (255 / range))
            tempImg[i,j].Blue := Round((image[i,j].Blue - min) * (255 / range))
            // The grayscale value will be the same for all channels since it's a grayscale image
        ENDFOR
    ENDFOR

    // Return the grayscale-stretched image
    RETURN tempImg
ENDFUNCTION

// Example usage:
grayscaleImage := GrayscaleStretch(originalImage);