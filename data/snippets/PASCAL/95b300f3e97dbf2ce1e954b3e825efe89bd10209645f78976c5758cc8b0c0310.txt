program GenerateRandomMaze(output);

// Define our constants
const
  ROWS = 10; // Number of rows in the maze
  COLS = 15; // Number of columns in the maze
  WALL = #219; // Symbol for walls in the maze (block character)

// Define our variables
var
  maze: array[1..ROWS, 1..COLS] of char; // 2D array representing the maze
  visited: array[1..ROWS, 1..COLS] of boolean; // 2D array tracking visited cells
  current_row, current_col: integer; // Current location in the maze
  visited_cells: integer; // Number of cells visited
  rand_direction: integer; // Random direction to move in

// Function to set up the maze with walls
procedure setup_maze();
var
  i, j: integer; // Loop counters
begin
  for i := 1 to ROWS do // Loop through rows
    for j := 1 to COLS do // Loop through columns
      maze[i, j] := WALL; // Set each cell to be a wall
end;

// Function to print the maze
procedure print_maze();
var
  i, j: integer; // Loop counters
begin
  for i := 1 to ROWS do // Loop through rows
  begin
    for j := 1 to COLS do // Loop through columns
      write(maze[i, j]); // Print each cell
    writeln(); // Move to next line after each row
  end;
end;

// Function to check if a cell is in bounds of the maze
function in_bounds(row, col: integer): boolean;
begin
  if (row < 1) or (row > ROWS) or (col < 1) or (col > COLS) then // If row or column is outside maze dimensions
    in_bounds := false // Cell is not in bounds
  else
    in_bounds := true; // Cell is in bounds
end;

// Function to check if a cell has any unvisited neighbors
function has_unvisited_neighbors(row, col: integer): boolean;
begin
  if (visited[row-1, col] = false) or (visited[row+1, col] = false) or (visited[row, col-1] = false) or (visited[row, col+1] = false) then // If any neighboring cells are unvisited
    has_unvisited_neighbors := true // Cell has unvisited neighbors
  else
    has_unvisited_neighbors := false; // Cell does not have unvisited neighbors
end;

// Function to randomly select a direction to move in
function choose_direction(): integer;
begin
  choose_direction := random(4)+1; // Generate a random number from 1 to 4
end;

// Function to move in a random direction
function move_randomly(row, col: integer): boolean;
var
  direction: integer; // Random direction to move in
begin
  direction := choose_direction(); // Randomly select a direction
  // If the neighboring cell in the chosen direction is not in bounds or has been visited
  if (not in_bounds(row-1, col) or visited[row-1, col]) and (not in_bounds(row+1, col) or visited[row+1, col]) and (not in_bounds(row, col-1) or visited[row, col-1]) and (not in_bounds(row, col+1) or visited[row, col+1]) then
    move_randomly := false // Return false to indicate move was unsuccessful
  else
  begin
    // Move in the chosen direction, updating current location
    case direction of
      1: current_row := current_row - 1; // Move up
      2: current_row := current_row + 1; // Move down
      3: current_col := current_col - 1; // Move left
      4: current_col := current_col + 1; // Move right
    end;

    // Mark the new location as visited and set cell to be empty space
    visited[current_row, current_col] := true;
    maze[current_row, current_col] := ' ';
    visited_cells := visited_cells + 1; // Increment the number of visited cells
    move_randomly := true; // Return true to indicate move was successful
  end;
end;

// Function to generate the maze
procedure generate_maze();
begin
  // Set up maze
  setup_maze();

  // Start at top left cell of maze and mark as visited
  current_row := 1;
  current_col := 1;
  visited[current_row, current_col] := true;
  visited_cells := 1;

  // While there are still unvisited cells
  while visited_cells < ROWS * COLS do
  begin
    // If current cell has unvisited neighbors
    if has_unvisited_neighbors(current_row, current_col) then
    begin
      // Move in a random direction until a successful move is made
      repeat
        if not move_randomly(current_row, current_col) then // Repeat until move is successful
          rand_direction := choose_direction(); // Randomly choose a new direction
      until move_randomly(current_row, current_col);
    end
    else // If current cell has no unvisited neighbors
    begin
      // Move back to previously visited cell
      case rand_direction of
        1: current_row := current_row - 1; // Move up
        2: current_row := current_row + 1; // Move down
        3: current_col := current_col - 1; // Move left
        4: current_col := current_col + 1; // Move right
      end;
    end;
  end;

end;

// Main program
begin
  // Generate the maze
  generate_maze();

  // Print the maze
  print_maze();
end.