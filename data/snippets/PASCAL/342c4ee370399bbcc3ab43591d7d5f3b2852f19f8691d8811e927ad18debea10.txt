program SortingAlgorithms;
  {This is a program that implements three different sorting algorithms: bubble, selection, and insertion sort.}

  const
    MAX_SIZE = 100; {maximum size of the array}

  type
    arrayType = array[1..MAX_SIZE] of integer; {define a new array type}

  var
    arr: arrayType; {declare an array of type arrayType}
    size: integer; {variable to store the size of the array}

  {function to generate a random array}
  function generateArray(size: integer): arrayType;
  var
    i: integer;
  begin
    randomize;
    for i := 1 to size do
      generateArray[i] := random(100); {assign a random integer between 0 and 99 to each element in the array}
  end;

  {procedure to swap the values of two elements in an array}
  procedure swap(var a, b: integer);
  var
    temp: integer;
  begin
    temp := a; {store the value of a in a temporary variable}
    a := b; {assign the value of b to a}
    b := temp; {assign the value of temp (original a) to b}
  end;

  {bubble sort algorithm}
  procedure bubbleSort(var arr: arrayType);
  var
    i, j: integer;
  begin
    for i := 1 to size - 1 do {repeat the process for every element in the array}
      for j := 1 to size - i do {compare every adjacent pair of elements}
        if arr[j] > arr[j + 1] then {if the current element is greater than the next element}
          swap(arr[j], arr[j + 1]); {swap their positions}
  end;

  {selection sort algorithm}
  procedure selectionSort(var arr: arrayType);
  var
    i, j, min: integer;
  begin
    for i := 1 to size - 1 do {repeat the process for every element in the array}
    begin
      min := i; {assume the current element is the smallest}
      for j := i + 1 to size do {check the rest of the elements}
        if arr[j] < arr[min] then {if a smaller element is found}
          min := j; {update the position of the smallest element}
      swap(arr[i], arr[min]); {swap the smallest element with the current element}
    end;
  end;

  {insertion sort algorithm}
  procedure insertionSort(var arr: arrayType);
  var
    i, j, value: integer;
  begin
    for i := 2 to size do {assume the first element is sorted}
    begin
      value := arr[i]; {store the value of the current element}
      j := i - 1; {set j to the element before the current element}
      while (j > 0) and (arr[j] > value) do {compare the current element with the already sorted elements}
      begin
        arr[j + 1] := arr[j]; {shift the elements to the right}
        j := j - 1; {move j to the left}
      end;
      arr[j + 1] := value; {insert the current element in the correct position}
    end;
  end;

begin
  write('Enter the size of the array: '); {prompt the user for the size of the array}
  readln(size); {read the input}
  arr := generateArray(size); {generate a random array}
  writeln('Unsorted array: ', arr); {print the unsorted array}
  bubbleSort(arr); {sort the array using bubble sort algorithm}
  writeln('Array after bubble sort: ', arr); {print the sorted array}
  arr := generateArray(size); {generate a new random array}
  selectionSort(arr); {sort the array using selection sort algorithm}
  writeln('Array after selection sort: ', arr); {print the sorted array}
  arr := generateArray(size); {generate a new random array}
  insertionSort(arr); {sort the array using insertion sort algorithm}
  writeln('Array after insertion sort: ', arr); {print the sorted array}
end.