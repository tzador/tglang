{This code snippet is a merge sort algorithm implementation in PASCAL.}

program MergeSort;

var
  arr: array [1..10] of Integer; {Declare an array of integers}
  n, i: Integer; {Declare variables for array size and loop counter}

procedure Merge(var arr: array of Integer; l, m, r: Integer); {Merge function}
var
  i, j, k: Integer; {Declare loop counters}
  n1, n2: Integer; {Calculate sizes of two subarrays}
  L, R: array of Integer; {Declare temporary subarrays}

begin
  n1 := m - l + 1;
  n2 := r - m;

  {Fill temporary arrays}
  for i := 1 to n1 do
    L[i] := arr[l + i - 1];
  for j := 1 to n2 do
    R[j] := arr[m + j];

  i := 1; {Initialize loop counters}
  j := 1;
  k := l;

  while (i <= n1) and (j <= n2) do {Start merging from left and right subarray}
  begin
    if L[i] <= R[j] then {Compare elements and place in correct position}
    begin
      arr[k] := L[i];
      i := i + 1;
    end
    else
    begin
      arr[k] := R[j];
      j := j + 1;
    end;
    k := k + 1;
  end;

  while i <= n1 do {Copy remaining elements of left subarray}
  begin
    arr[k] := L[i];
    i := i + 1;
    k := k + 1;
  end;

  while j <= n2 do {Copy remaining elements of right subarray}
  begin
    arr[k] := R[j];
    j := j + 1;
    k := k + 1;
  end;
end;

procedure MergeSort(var arr: array of Integer; l, r: Integer); {Merge sort function}
var
  m: Integer; {Middle index for splitting array}

begin
  if l < r then {Check if array is more than one element}
  begin
    m := (l + r) div 2; {Find middle index}
    MergeSort(arr, l, m); {Sort left subarray}
    MergeSort(arr, m + 1, r); {Sort right subarray}
    Merge(arr, l, m, r); {Merge sorted subarrays}
  end;
end;

begin
  {Fill array with random integers}
  for i := 1 to 10 do
    arr[i] := Random(100);

  {Print original array}
  Writeln('Original Array: ');
  for i := 1 to 10 do
    Write(arr[i], ' ');

  MergeSort(arr, 1, 10); {Call merge sort function}

  Writeln; {Print new line}
  
  {Print sorted array}
  Writeln('Sorted Array: ');
  for i := 1 to 10 do
    Write(arr[i], ' ');
end.