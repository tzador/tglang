program ComplexCalculator; {This is a program to perform complex operations}

const
  MAX_SIZE = 100; {maximum size of input arrays}

type
  TComplexNumber = record {records the real and imaginary part of a complex number}
    realPart: real;
    imagPart: real;
    end;

  TComplexArray = array[1..MAX_SIZE] of TComplexNumber; {array of complex numbers}

var
  complexArr: TComplexArray; {input array of complex numbers}
  resultArr: TComplexArray; {array to store results}
  size: integer; {size of input arrays}
  operation: char; {character for the desired operation}

{Function to input complex numbers from the user}
procedure InputComplex(var arr: TComplexArray; size: integer);
var
  i: integer;
begin
  writeln('Enter ', size, ' complex numbers (realPart imagPart):');
  for i := 1 to size do
  begin
    readln(arr[i].realPart, arr[i].imagPart);
  end;
  writeln;
end;

{Function to perform addition of two complex numbers}
function AddComplex(c1, c2: TComplexNumber): TComplexNumber;
var
  cSum: TComplexNumber;
begin
  cSum.realPart := c1.realPart + c2.realPart;
  cSum.imagPart := c1.imagPart + c2.imagPart;
  AddComplex := cSum;
end;

{Function to perform multiplication of two complex numbers}
function MultiplyComplex(c1, c2: TComplexNumber): TComplexNumber;
var
  cProd: TComplexNumber;
begin
  cProd.realPart := (c1.realPart * c2.realPart) - (c1.imagPart * c2.imagPart);
  cProd.imagPart := (c1.realPart * c2.imagPart) + (c2.realPart * c1.imagPart);
  MultiplyComplex := cProd;
end;

{Function to perform subtraction of two complex numbers}
function SubtractComplex(c1, c2: TComplexNumber): TComplexNumber;
var
  cDiff: TComplexNumber;
begin
  cDiff.realPart := c1.realPart - c2.realPart;
  cDiff.imagPart := c1.imagPart - c2.imagPart;
  SubtractComplex := cDiff;
end;

{Function to perform division of two complex numbers}
function DivideComplex(c1, c2: TComplexNumber): TComplexNumber;
var
  cQuot: TComplexNumber;
  divisor: real;
begin
  divisor := (c2.realPart * c2.realPart) + (c2.imagPart * c2.imagPart);
  cQuot.realPart := ((c1.realPart * c2.realPart) + (c1.imagPart * c2.imagPart)) / divisor;
  cQuot.imagPart := ((c2.realPart * c1.imagPart) - (c1.realPart * c2.imagPart)) / divisor;
  DivideComplex := cQuot;
end;

{Function to perform a complex operation on the input array}
function PerformOperation(operation: char; arr: TComplexArray; size: integer): TComplexArray;
var
  i: integer;
  resultNum: TComplexNumber;
begin
  for i := 1 to size do
  begin
    case operation of
      '+': resultNum := AddComplex(resultNum, arr[i]);
      '*': resultNum := MultiplyComplex(resultNum, arr[i]);
      '-': resultNum := SubtractComplex(resultNum, arr[i]);
      '/': resultNum := DivideComplex(resultNum, arr[i]);
    end;
    resultArr[i] := resultNum;
  end;
  PerformOperation := resultArr;
end;

begin {main program}
  writeln('Enter the size of the array (1-100): ');
  readln(size);
  while (size < 1) or (size > 100) do
  begin
    writeln('Invalid size. Please try again.');
    readln(size);
  end;

  InputComplex(complexArr, size); {input the complex numbers}
  writeln('Enter the desired operation (+,-,*,/): ');
  readln(operation);

  resultArr := PerformOperation(operation, complexArr, size); {perform the desired operation}

  {print the results}
  writeln('Results: ');
  for i := 1 to size do
  begin
    writeln(resultArr[i].realPart:0:2, ' + ', resultArr[i].imagPart:0:2, 'i');
  end;
end.