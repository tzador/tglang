program complexSnippet; {program header with name}

uses sysutils, math; {importing necessary libraries}

const num = 5; {declaring a constant with value 5}

type
 Point = record {defining a record data structure} 
   x : real; {defining a field x of type real}
   y : real; {defining a field y of type real}
 end;
 
var
  array1, array2 : array[0..num-1] of integer; {declaring two arrays of size 5}
  pointList : array[0..9] of Point; {declaring an array of 10 Points}
  sum : integer; {declaring a variable of type integer}
  average : real; {declaring a variable of type real}
  
begin
  for i := 0 to num-1 do {starting a for loop}
    begin
      array1[i] := random(10); {assigning a random value to each element of array1}
      array2[i] := random(10); {assigning a random value to each element of array2}
    end;
    
  for i := 0 to 9 do {starting a for loop}
    begin
      pointList[i].x := random(100)/10; {assigning a random value to the x field of each Point}
      pointList[i].y := random(100)/10; {assigning a random value to the y field of each Point}
    end;
    
  sum := 0; {initializing the sum variable to 0}
  
  for i := 0 to num-1 do {starting a for loop}
    begin
      sum := sum + array1[i]; {adding each element of array1 to the sum}
    end;
    
  average := sum/num; {calculating the average by dividing the sum with the number of elements}
  
  writeln('The average of the values in array1 is: ', average); {printing the average}
  
  for i := 0 to 9 do {starting a for loop}
    begin
      array2[i] := round(power(array2[i], 2)); {squaring each element of array2 and rounding it}
    end;
    
  writeln('The squared values of array2 are: '); {printing a header for the output}
  
  for i := 0 to 9 do {starting a for loop}
    begin
      writeln('Array2[', i, '] = ', array2[i]); {printing the index and value of each element of array2}
    end;
    
  writeln('The first element of PointList is: (', pointList[0].x, ',', pointList[0].y, ')'); {printing the fields of the first Point}
  
end. {end of program}