{ This is a commented section in Pascal }

program QuickSortAlgorithm; { Program name }

uses crt; { Allows the use of cursor library }

const
  MAX_SIZE = 100; { Constant size for the array }

type
  Arr = array[1..MAX_SIZE] of integer; { Defining the array type }

var
  arrVals: Arr; { Array variable }
  left, right, pivot: integer; { Variables for left, right, and pivot indexes }

procedure QuickSort(var arr: Arr; left, right: integer); { Procedure for quick sort algorithm }
var
  i, j, temp: integer; { Variables for iterators and temporary storage }

begin
  if left < right then { Checks if the left index is smaller than the right index }
  begin
    pivot := arr[right]; { Assigns the pivot as the right index value }
    i := left - 1; { Assigns the iterator to the left index minus 1 }

    for j := left to right - 1 do { Loops from the left to right indexes }
    begin
      if arr[j] <= pivot then { Checks if the current value is smaller than pivot }
      begin
        i := i + 1; { Increments iterator }
        temp := arr[i]; { Swaps the current value with the iterator value }
        arr[i] := arr[j];
        arr[j] := temp;
      end;
    end;

    temp := arr[i + 1]; { Swaps the pivot value with the next value after the iterator }
    arr[i + 1] := arr[right];
    arr[right] := temp;

    QuickSort(arr, left, i); { Recursively calls quick sort on the left side of the pivot }
    QuickSort(arr, i + 2, right); { Recursively calls quick sort on the right side of the pivot }
  end;
end;

begin
  clrscr; { Clears the screen }
  
  { Output before sorting }
  writeln('Array before sorting: ');
  for i := 1 to MAX_SIZE do
    write(arrVals[i], ' ');
    
  { Input values into array }
  writeln('Enter values to sort: ');
  
  for i := 1 to MAX_SIZE do
    readln(arrVals[i]);
    
  QuickSort(arrVals, 1, MAX_SIZE); { Calls quick sort procedure on the whole array }
  
  { Output after sorting }
  writeln('Array after sorting: ');
  for i := 1 to MAX_SIZE do
    write(arrVals[i], ' ');
    
  readln; { Waits for user input before closing program }
end.