procedure quicksort(var array: array of integer; start, end: integer); {procedure for quicksort algorithm}

var
  i, j, pivot, temp: integer; {declaring variables}

begin
  if start < end then {checking if start index is less than end index}
  begin
    pivot := start; {setting pivot position as start index}
    i := start; {setting initial value of i as start index}
    j := end; {setting initial value of j as end index}

    while i < j do {looping until i and j cross}
    begin
      while (array[i] <= array[pivot]) and (i < end) do {looping until value at i is greater than value at pivot and i exceeds end index}
        i := i + 1; {incrementing value of i}

      while (array[j] > array[pivot]) do {looping until value at j is lesser than value at pivot}
        j := j - 1; {decrementing value of j}

      if i < j then {if i and j have not crossed}
      begin
        {swapping values at i and j}
        temp := array[j];
        array[j] := array[i];
        array[i] := temp;
      end;
    end;

    {swapping values at pivot and j}
    temp := array[pivot];
    array[pivot] := array[j];
    array[j] := temp;

    {recursively calling quicksort with subarrays on either side of the pivot element}
    quicksort(array, start, j - 1);
    quicksort(array, j + 1, end);
  end;
end;

{example array to be sorted}
var
  arr: array[1..10] of integer = (36, 42, 13, 25, 8, 21, 7, 16, 41, 32);

{printing unsorted array}
writeln('Unsorted array:');
for i := 1 to 10 do {looping through array}
  write(arr[i], ' '); {printing each element}
writeln;

{calling quicksort procedure to sort the array}
quicksort(arr, 1, 10);

{printing sorted array}
writeln('Sorted array:');
for i := 1 to 10 do {looping through array}
  write(arr[i], ' '); {printing each element}
writeln;