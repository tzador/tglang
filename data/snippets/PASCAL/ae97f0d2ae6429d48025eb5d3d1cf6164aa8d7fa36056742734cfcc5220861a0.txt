program ComplexCode;

uses
    StrUtils, Math; //* using the StrUtils and Math libraries

var
    num1, num2, result : Real; //* declaring variables for the input numbers and the result
    op : Char; //* declaring a variable for the operator

begin
    WriteLn('Welcome to Complex Code!'); //* welcoming the user
    WriteLn('Please enter a mathematical expression using two numbers and an operator.'); //* prompting the user for input

    Write('First Number: '); //* prompting for first number
    ReadLn(num1); //* reading in the first number

    Write('Second Number: '); //* prompting for second number
    ReadLn(num2); //* reading in the second number

    Write('Operator (+, -, *, /): '); //* prompting for operator
    ReadLn(op); //* reading in the operator

    if op = '+' then //* checking for addition
        result := num1 + num2
    else if op = '-' then //* checking for subtraction
        result := num1 - num2
    else if op = '*' then //* checking for multiplication
        result := num1 * num2
    else if op = '/' then //* checking for division
        result := num1 / num2;

    WriteLn('Result: ', result); //* displaying the result

    if (num1 = 0) and (num2 = 0) then //* checking for invalid input to avoid division by zero error
        WriteLn('Invalid Input: Cannot divide by zero.')
    else //* if input is valid, perform more complex operations
    begin
        WriteLn('Square Root of First Number: ', Sqrt(num1)); //* calculating the square root of the first number

        if num2 > 0 then //* checking if second number is positive to avoid negative exponent error
            WriteLn('First Number raised to the power of Second Number: ', Power(num1, num2))
        else //* if second number is negative, display error message
            WriteLn('Invalid Input: Negative Exponent.');

        if CompareStr(FloatToStr(num1), FloatToStr(Trunc(num1))) = 0 then //* comparing the first number to its truncation to check for whole number
            WriteLn('First Number is a Whole Number.')
        else //* if not a whole number, display error message
            WriteLn('First Number is not a Whole Number.');

        if CompareStr(FloatToStr(num2), FloatToStr(Trunc(num2))) <> 0 then //* comparing the second number to its truncation to check for decimal number
            WriteLn('Second Number is a Decimal Number.')
        else //* if not a decimal number, display error message
            WriteLn('Second Number is not a Decimal Number.');
    end;
end.