{This is a nested function that finds the minimum of a given array of integers and returns it}
function findMinimum(input: array of integer): integer;
var
  i,j: integer;
begin
  {initializes minimum with the first element of the array}
  minimum := input[0];
  {iterates through the array to check for a smaller element}
  for i := 1 to length(input) - 1 do
  begin
    {compares current element with the minimum}
    if input[i] < minimum then
    begin
      {updates minimum if current element is smaller}
      minimum := input[i];
    end;
  end;

  {A function that calculates the sum of the digits in an integer}
  function digitSum(n: integer): integer;
  var
    sum: integer;
  begin
    sum := 0;
    {loops through digits of n}
    while n > 0 do
    begin
      {adds the rightmost digit to the sum}
      sum := sum + n mod 10;
      {removes rightmost digit from n}
      n := n div 10;
    end;
    digitSum := sum;
  end;

  {Calculates the digit sum of the minimum element from the input array}
  result := digitSum(findMinimum(input));
end;