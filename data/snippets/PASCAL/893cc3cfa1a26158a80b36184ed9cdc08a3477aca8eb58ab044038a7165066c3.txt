function mergeSort(arr : array of Integer; l : Integer; r : Integer) : array of Integer;
// function to perform Merge Sort on an array of Integers
// arr : the array to be sorted
// l : left index of the subarray to be sorted
// r : right index of the subarray to be sorted
var
    m, i, j, k : Integer; // variables to be used in the merging process
    tempArr : array of Integer; // temporary array for merging
begin
    if l < r then // check if there is more than one element in the subarray
    begin
        m := (l + r) div 2; // find the middle index
        tempArr := mergeSort(arr, l, m); // recursively call mergeSort on the left subarray
        tempArr := mergeSort(arr, m + 1, r); // recursively call mergeSort on the right subarray
        i := l; // initialize i to the left index
        j := m + 1; // initialize j to the right index
        k := l; // initialize k to the starting index of the temporary array
        while (i <= m) and (j <= r) do // loop until one of the subarrays is fully processed
        begin
            if arr[i] <= arr[j] then // compare the elements of the subarrays
            begin
                tempArr[k] := arr[i]; // copy element from left subarray to temporary array
                i := i + 1; // increase the index of the left subarray
            end
            else
            begin
                tempArr[k] := arr[j]; // copy element from right subarray to temporary array
                j := j + 1; // increase the index of the right subarray
            end;
            k := k + 1; // increase the index of the temporary array
        end;
        while i <= m do // loop to copy remaining elements from left subarray
        begin
            tempArr[k] := arr[i]; // copy element from left subarray to temporary array
            i := i + 1; // increase the index of the left subarray
            k := k + 1; // increase the index of the temporary array
        end;
        while j <= r do // loop to copy remaining elements from right subarray
        begin
            tempArr[k] := arr[j]; // copy element from right subarray to temporary array
            j := j + 1; // increase the index of the right subarray
            k := k + 1; // increase the index of the temporary array
        end;
        for i := l to r do // loop to copy elements from temporary array back to original array
        begin
            arr[i] := tempArr[i]; // copy element from temporary array to original array
        end;
    end;
    mergeSort := arr; // return the sorted array
end;