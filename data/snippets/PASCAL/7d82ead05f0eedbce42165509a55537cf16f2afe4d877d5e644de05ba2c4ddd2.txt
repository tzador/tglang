procedure quicksort( var arr : array of Integer; start_index : Integer; end_index : Integer)

// Sorts a given array of Integers using quicksort algorithm

begin
    if start_index < end_index then // If there are more than 1 element in the array
    
    var pivot := arr[start_index]; // Choose the first element as the pivot
    var left_index := start_index + 1; // Initialize left index to be the element after the pivot
    var right_index := end_index; // Initialize right index to be the last element of the array
    
    while (left_index <= right_index) do // Repeat until left index surpasses right index
    begin
        while (left_index <= right_index) and (arr[left_index] <= pivot) do // Increment left index until an element greater than pivot is found
            left_index := left_index + 1;
            
        while (arr[right_index] > pivot) do // Decrement right index until an element less than or equal to pivot is found
            right_index := right_index - 1;
            
        if (left_index < right_index) then // If left and right index have not crossed each other
            Swap(arr[left_index], arr[right_index]); // Swap the elements at left and right index
    end;
    
    Swap(arr[start_index], arr[right_index]); // Swap the pivot with the element currently at right index
    
    quicksort(arr, start_index, right_index - 1); // Recursively call quicksort on the elements before the pivot
    quicksort(arr, right_index + 1, end_index); // Recursively call quicksort on the elements after the pivot
end;