program ComplexSnippet;

type
    // Define a record type to store complex numbers
    ComplexNumber = record
        real: Integer;
        imaginary: Integer;
    end;

var
    // Define two complex numbers
    num1: ComplexNumber;
    num2: ComplexNumber;

// Function to add two complex numbers
function addComplex(num1, num2: ComplexNumber): ComplexNumber;
begin
    // Add the real and imaginary parts separately
    addComplex.real := num1.real + num2.real;
    addComplex.imaginary := num1.imaginary + num2.imaginary;
end;

// Function to subtract two complex numbers
function subtractComplex(num1, num2: ComplexNumber): ComplexNumber;
begin
    // Subtract the real and imaginary parts separately
    subtractComplex.real := num1.real - num2.real;
    subtractComplex.imaginary := num1.imaginary - num2.imaginary;
end;

// Function to multiply two complex numbers
function multiplyComplex(num1, num2: ComplexNumber): ComplexNumber;
var
    // Define a temporary complex number to store the result
    temp: ComplexNumber;
begin
    // Perform complex multiplication using the FOIL method
    // (a + bi)*(c + di) = (ac - bd) + (ad + bc)i
    temp.real := (num1.real * num2.real) - (num1.imaginary * num2.imaginary);
    temp.imaginary := (num1.real * num2.imaginary) + (num1.imaginary * num2.real);
    
    // Return the result
    multiplyComplex := temp;
end;

begin
    // Ask the user to input two complex numbers
    WriteLn('Enter the real and imaginary parts of first complex number:');
    ReadLn(num1.real, num1.imaginary);
    WriteLn('Enter the real and imaginary parts of second complex number:');
    ReadLn(num2.real, num2.imaginary);
    
    // Perform the operations and store the results in a new complex number
    WriteLn('Sum: ', addComplex(num1, num2).real, ' + ', addComplex(num1, num2).imaginary, 'i');
    WriteLn('Difference: ', subtractComplex(num1, num2).real, ' + ', subtractComplex(num1, num2).imaginary, 'i');
    WriteLn('Product: ', multiplyComplex(num1, num2).real, ' + ', multiplyComplex(num1, num2).imaginary, 'i');
end.