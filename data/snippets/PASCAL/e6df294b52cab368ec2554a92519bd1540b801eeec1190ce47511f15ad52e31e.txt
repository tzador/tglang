program QuickSort(input, output);
{
    This program implements the Quick Sort algorithm in Pascal
    It takes in an unsorted array and returns the sorted array
}
var 
    arr: array[1..10] of integer; {initialize array with size of 10}
    
procedure sort(l, r: integer);
    {recursive procedure to sort the array}
var
    i, j, pivot, temp: integer; {variable to store pivot element, indices and a placeholder}

begin
    i := l; {set first index of array as left pointer}
    j := r; {set last index of array as right pointer}
    pivot := arr[(l + r) div 2]; {choose a pivot element}

    while i <= j do
    begin
        while arr[i] < pivot do {move left pointer until element is greater than pivot}
            i := i + 1;
        while arr[j] > pivot do {move right pointer until element is smaller than pivot}
            j := j - 1;
        if i <= j then {swap elements at pointers if necessary}
        begin
            temp := arr[i];
            arr[i] := arr[j];
            arr[j] := temp;
            i := i + 1;
            j := j - 1;
        end;
   end;
    
   {recursive calls on subarrays}
   if l < j then {sort left subarray}
      sort(l, j);
   if i < r then {sort right subarray}
      sort(i, r);
end;
    
begin
    write('Enter 10 numbers: ');
    for i := 1 to 10 do {input 10 numbers into array}
    begin
        read(arr[i]);
    end;

    sort(1, length(arr)); {sort the array using sort procedure}

    write('Sorted array is: ');
    for i := 1 to 10 do {print sorted array}
    begin
        write(arr[i], ' ');
    end;
end.