{This program demonstrates binary search algorithm in Pascal}
program BinarySearch;

{declaration of global variables}
var 
  arraySize, target, i, j, temp, low, high, mid: integer;
  arrayToSearch: array[1..100] of integer;

{procedure for performing the binary search algorithm}
procedure PerformBinarySearch;
begin
  low := 1; {the lower bound of the array}
  high := arraySize; {the upper bound of the array}
  mid := (low + high) div 2; {calculate the midpoint of the array}

  {while the lower bound hasn't exceeded the upper bound}
  while (low <= high) do
  begin
    {if the target value is located at the midpoint}
    if (arrayToSearch[mid] = target) then
    begin
      writeln('Target element found at index ', mid);
      exit; {exit the procedure}
    end
    else if (target < arrayToSearch[mid]) then {if the target is less than the midpoint}
    begin
      high := mid - 1; {update the upper bound to be one less than the midpoint}
      mid := (low + high) div 2; {calculate the new midpoint}
    end
    else {if the target is greater than the midpoint}
    begin
      low := mid + 1; {update the lower bound to be one greater than the midpoint}
      mid := (low + high) div 2; {calculate the new midpoint}
    end;
  end;

  {if the target value is not found in the array}
  writeln('Target element not found.');
end;

begin
  {getting user input for the array size and elements}
  writeln('Enter the size of the array (maximum 100):');
  readln(arraySize);
  writeln('Enter the elements of the array in ascending order:');
  
  {loop for getting user input and populating the array}
  for i := 1 to arraySize do
  begin
    readln(arrayToSearch[i]);
  end;

  {getting user input for the target element}
  writeln('Enter the target element to search for:');
  readln(target);
  
  {calling the binary search procedure}
  PerformBinarySearch;
end.