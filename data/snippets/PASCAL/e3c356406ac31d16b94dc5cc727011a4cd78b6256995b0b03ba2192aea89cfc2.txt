// This code snippet implements a binary search algorithm in Pascal

{
    This is a recursive function that takes in an array of integers,
    the starting index, ending index, and the value to be searched
    Returns the index of the value in the array or -1 if not found 
}

function binarySearch(arr: array of Integer; start, ending, value: Integer): Integer;
var
    mid: Integer; // Variable to store the middle index of the array
begin
    if ending >= start then
    begin
        mid := start + (ending - start) div 2; // Calculate the middle index
        if arr[mid] = value then // Check if the middle value is equal to the value being searched
            binarySearch := mid
        else if arr[mid] > value then // If middle value is greater, search the left half of the array
            binarySearch := binarySearch(arr, start, mid - 1, value)
        else
            binarySearch := binarySearch(arr, mid + 1, ending, value); // If middle value is smaller, search the right half of the array
    end
    else
        binarySearch := -1; // Value not found
end;

// Example usage
program Main;

var
    arr: array[1..10] of Integer = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10); // Sample array
    index: Integer; // Variable to store the index of the searched value

begin
    index := binarySearch(arr, 1, 10, 8); // Search for the value 8 in the array with indices 1 to 10
    if index <> -1 then // Check if the value was found
        writeln("Value found at index ", index) // Output the index
    else
        writeln("Value not found"); // Output that the value was not found
end.