type
  // create a record type for a student
  Student = record
    id: integer; // student id
    name: string; // student name
    major: string; // student's major
    grades: array[1..5] of real; // array to hold student's grades
  end;
  
var 
  studentList: array[1..10] of Student; // create an array of student records

// procedure to prompt user for student data
procedure GetStudentData(var student: Student);
begin
  // prompt user for student id
  Write('Enter student ID: ');
  ReadLn(student.id);
  
  // prompt user for student name
  Write('Enter student name: ');
  ReadLn(student.name);
  
  // prompt user for student's major
  Write('Enter student major: ');
  ReadLn(student.major);
  
  // loop through array to prompt user for grades
  for i:= 1 to 5 do
  begin
    WriteLn('Enter grade for course ', i, ': ');
    ReadLn(student.grades[i]);
  end;
end;

// function to calculate student's average grade
function CalculateAverageGrade(student: Student): real;
var
  total: real;
begin
  // loop through grades and add to total
  for i:= 1 to 5 do
  begin
    total := total + student.grades[i];
  end;
  
  // calculate average by dividing total by number of grades
  CalculateAverageGrade := total / 5;
end;

begin
  // loop through array to get data for each student
  for i:= 1 to 10 do
  begin
    // call procedure to get data for next student
    GetStudentData(studentList[i])
  end;
  
  // loop through array to print student data and average grade
  for i:= 1 to 10 do 
  begin
    // print student id, name, major and average grade
    WriteLn('Student ID: ', studentList[i].id);
    WriteLn('Student Name: ', studentList[i].name);
    WriteLn('Major: ', studentList[i].major);
    WriteLn('Average Grade: ', CalculateAverageGrade(studentList[i]):4:2); // format average to 2 decimal places
    WriteLn; // leave blank line between each student's data
  end;
end.