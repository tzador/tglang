function MergeSort(arr: array of Integer; low, high: Integer): array of Integer;
{ This function recursively divides the array into smaller subarrays }
var
    mid, i, j, k: Integer;
    temp: array of Integer;
begin
    if low >= high then // base case
    begin
        SetLength(temp, 1);
        temp[0] := arr[low];
        MergeSort := temp;
        Exit;
    end;
    // find the middle index
    mid := (low + high) div 2;
    // recursively sorting the left subarray
    temp := MergeSort(arr, low, mid);
    // recursively sorting the right subarray
    temp := MergeSort(arr, mid + 1, high);
    SetLength(MergeSort, high - low + 1);
    // merge the subarrays
    for i := 0 to (mid - low) do
        MergeSort[i] := temp[i];
    for j := (high - low + 1) downto mid + 1 do
        MergeSort[high + mid + 1 - j] := temp[j];
    i := low;
    j := high;
    for k := low to high do
    begin
        if MergeSort[i] < MergeSort[j] then
        begin
            MergeSort[k] := MergeSort[i];
            i := i + 1;
        end
        else
        begin
            MergeSort[k] := MergeSort[j];
            j := j - 1;
        end;
    end;
end;
// Example usage:
// array to be sorted
var
    arr: array[1..5] of Integer;
    i: Integer;
begin
    arr[1] := 5;
    arr[2] := 3;
    arr[3] := 9;
    arr[4] := 1;
    arr[5] := 2;
    // call MergeSort function
    arr := MergeSort(arr, 1, 5);
    // print sorted array
    for i := 1 to 5 do
        WriteLn(arr[i]);