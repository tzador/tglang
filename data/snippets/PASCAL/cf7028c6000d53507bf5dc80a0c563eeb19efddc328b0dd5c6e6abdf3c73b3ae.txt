procedure QuickSort(var arr: array of Integer; left: Integer; right: Integer);
// The QuickSort procedure takes in an array of Integers, a left and right index, and sorts the array in ascending order
var
  i, j, pivot, temp: Integer; // declaring variables i, j, pivot, and temp of type Integer
begin
  i := left; // setting i to be the left index
  j := right; // setting j to be the right index
  pivot := arr[(left + right) div 2]; // calculating the pivot by taking the middle index
  while (i <= j) do // while loop to loop through the array
  begin
    while (arr[i] < pivot) do // while loop to move the left pointer until it reaches an element greater than the pivot
      i := i + 1;
    while (arr[j] > pivot) do // while loop to move the right pointer until it reaches an element less than the pivot
      j := j - 1;
    if (i <= j) then // if statement to swap the elements at position i and j if i is less than j
    begin
      temp := arr[i]; // temporarily store the value at position i in temp
      arr[i] := arr[j]; // replace the value at position i with the value at position j
      arr[j] := temp; // replace the value at position j with the value stored in temp
      i := i + 1; // increment i
      j := j - 1; // decrement j
    end;
  end;
  // recursively call QuickSort on the left and right subarrays
  if (left < j) then QuickSort(arr, left, j);
  if (i < right) then QuickSort(arr, i, right);
end;