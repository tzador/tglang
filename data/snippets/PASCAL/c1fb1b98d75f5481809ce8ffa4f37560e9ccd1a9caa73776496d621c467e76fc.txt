program QuickSort(input, output); // Program to implement the QuickSort algorithm
var
  arr: array[1..10] of integer; // Declare an array of size 10 to be sorted
  low, high: integer; // Variables to store indexes of array elements
procedure Sort(l, h: integer); // Sort procedure, takes in lower and higher indexes
var
  i, j, pivot, temp: integer; // Declare variables for loop counters, pivot element and temporary variable
begin
  i := l; // Set the starting index as the lower index
  j := h; // Set the ending index as the higher index
  pivot := arr[(l + h) div 2]; // Select middle element as pivot
  while i <= j do // Loop until the lower and higher indexes meet
  begin
    while arr[i] < pivot do // Find an element on the left side of the pivot that is greater than the pivot
      i := i + 1; // Increase index until condition is met
    while arr[j] > pivot do // Find an element on the right side of the pivot that is smaller than the pivot
      j := j - 1; // Decrease index until condition is met
    if i <= j then // If the lower and higher indexes still haven't met,
    begin
      temp := arr[i]; // Swap the elements at the lower and higher indexes
      arr[i] := arr[j]; // using a temporary variable
      arr[j] := temp;
      i := i + 1; // Move on to the next set of elements to compare
      j := j - 1; // on either side of the pivot
    end;
  end;
  if l < j then // If there are still unsorted elements on the left side of the pivot,
    Sort(l, j); // Recursively call Sort procedure with lower and current index
  if i < h then // If there are still unsorted elements on the right side of the pivot,
    Sort(i, h); // Recursively call Sort procedure with current index and higher index
end;
begin
  writeln('Enter 10 numbers:'); // Prompt user to enter 10 numbers
  for i := 1 to 10 do // Take user input and store in the array
    read(arr[i]);
  low := 1; // Set lower index of array
  high := 10; // Set higher index of array
  Sort(low, high); // Call Sort procedure with initial indexes
  writeln('Sorted array:'); // Display sorted array to user
  for i := 1 to 10 do // Loop through array and display elements
    write(arr[i], ' ');
  readln; // Keep the console open until user presses Enter
end.