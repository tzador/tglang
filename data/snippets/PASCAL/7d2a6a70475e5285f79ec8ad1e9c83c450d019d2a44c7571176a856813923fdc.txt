procedure QuickSort (var array: array of Integer; low, high: Integer); {procedure to sort an array of integers using the QuickSort algorithm}
var
  pivot, temp: Integer; {declares variables for pivot and temporary storage}
  i, j: Integer; {declares variables for iteration}

begin
  pivot := array[(low + high) div 2]; {sets the pivot to the middle element of the array}
  i := low; {sets the lower bound of the array}
  j := high; {sets the upper bound of the array}

  while (i <= j) do {loops through the array until the lower bound and upper bound meet}
  begin
    while (array[i] < pivot) do {finds the first element from left to right that is larger than the pivot}
      i := i + 1;

    while (array[j] > pivot) do {finds the first element from right to left that is smaller than the pivot}
      j := j - 1;

    if (i <= j) then {checks if the lower bound is smaller than or equal to the upper bound}
    begin
      temp := array[i]; {swaps the two elements}
      array[i] := array[j];
      array[j] := temp;

      i := i + 1; {moves the lower bound up by one}
      j := j - 1; {moves the upper bound down by one}
    end;
  end;

  if (low < j) then {checks if there are elements on the left side of the pivot}
    QuickSort(array, low, j); {recursively calls QuickSort on the left side of the pivot}

  if (i < high) then {checks if there are elements on the right side of the pivot}
    QuickSort(array, i, high); {recursively calls QuickSort on the right side of the pivot}
end;