//The following code snippet creates a custom stack data structure with push and pop operations.

type
  TStack<T> = class(TObject) //creates a generic type class for the stack
    private
      stackArray: array of T; //create an array to store the stack elements
      topIndex: Integer; //create an index to keep track of the top element in the stack
    public
      constructor Create; //constructor 
      procedure Push(element: T); //inserts an element into the top of the stack
      function Pop: T; //removes and returns the top element in the stack
      function Peek: T; //returns the top element in the stack without removing it
  end;
  
constructor TStack<T>.Create; //constructor implementation
begin
  SetLength(stackArray, 0); //initializes the stack array with length 0
  topIndex := -1; //sets the top index to -1 since the stack is empty
end;

procedure TStack<T>.Push(element: T); //implementation of push function
begin
  //add an element to the top of the stack and increase the top index by 1
  if topIndex = Length(stackArray) then //if the stack is full, increase the array size by 1
    SetLength(stackArray, Length(stackArray) + 1);
  Inc(topIndex); //increase top index
  stackArray[topIndex] := element; //add element to top of the stack
end;

function TStack<T>.Pop: T; //pop function implementation
begin
  //remove the top element from the stack and decrease the top index by 1
  if topIndex = -1 then //if the stack is empty, raise an exception
    raise Exception.Create('Stack is empty');
  Result := stackArray[topIndex]; //store the top element in a variable to return it
  Dec(topIndex); //decrease top index
end;

function TStack<T>.Peek: T; //peek function implementation
begin
  //return the top element in the stack without removing it
  if topIndex = -1 then //if the stack is empty, raise an exception
    raise Exception.Create('Stack is empty');
  Result := stackArray[topIndex]; //store the top element in a variable to return it
end;