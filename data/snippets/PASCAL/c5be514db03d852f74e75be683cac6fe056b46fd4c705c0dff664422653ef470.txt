program MergeSort;

type
  // array of integers
  IntArray = array of Integer;
  
procedure Merge(leftArray, rightArray: IntArray; var sortedArray: IntArray);
var
  // current position of left, right, and sorted arrays
  left, right, sortedIndex: Integer;
begin
  left := 0;
  right := 0;
  sortedIndex := 0;
  
  // loop while there are elements in both left and right arrays
  while (left < Length(leftArray)) and (right < Length(rightArray)) do
  begin
    // compare elements from left and right arrays
    if leftArray[left] <= rightArray[right] then
    begin
      // add element from left array to sorted array
      sortedArray[sortedIndex] := leftArray[left];
      // move to next element in left array
      left := left + 1;
    end
    else
    begin
      // add element from right array to sorted array
      sortedArray[sortedIndex] := rightArray[right];
      // move to next element in right array
      right := right + 1;
    end;
    
    // move to next position in sorted array
    sortedIndex := sortedIndex + 1;
  end;
  
  // add any remaining elements from left array
  while left < Length(leftArray) do
  begin
    sortedArray[sortedIndex] := leftArray[left];
    left := left + 1;
    sortedIndex := sortedIndex + 1;
  end;
  
  // add any remaining elements from right array
  while right < Length(rightArray) do
  begin
    sortedArray[sortedIndex] := rightArray[right];
    right := right + 1;
    sortedIndex := sortedIndex + 1;
  end;
end;

procedure MergeSort(var arrayToSort: IntArray);
var
  // size of array to be sorted
  arraySize: Integer;
  // left and right arrays for merging
  leftArray, rightArray: IntArray;
begin
  // get size of array
  arraySize := Length(arrayToSort);
  
  // base case: if array size is 1 or less, it is already sorted
  if arraySize <= 1 then
    Exit;
  
  // divide array into two halves
  leftArray := Copy(arrayToSort, 0, arraySize div 2);
  rightArray := Copy(arrayToSort, arraySize div 2 + 1, arraySize);
  
  // recursively sort left and right arrays
  MergeSort(leftArray);
  MergeSort(rightArray);
  
  // merge sorted left and right arrays
  Merge(leftArray, rightArray, arrayToSort);
end;

begin
  // declare array to be sorted
  var arrayToSort: IntArray;
  // populate array with random integers
  for var i := 0 to 9 do
  begin
    arrayToSort[i] := Random(10);
  end;
  
  // print unsorted array
  Writeln('Unsorted Array:');
  for var i := 0 to 9 do
  begin
    Writeln(arrayToSort[i]);
  end;
  
  // sort array using Merge Sort algorithm
  MergeSort(arrayToSort);
  
  // print sorted array
  Writeln('Sorted Array:');
  for var i := 0 to 9 do
  begin
    Writeln(arrayToSort[i]);
  end;
end.