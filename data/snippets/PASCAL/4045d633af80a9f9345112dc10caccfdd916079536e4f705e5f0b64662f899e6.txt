procedure mergeSort(var arr: array of Integer; low, high: Integer);
//  This procedure uses the merge sort algorithm to sort an array of integers
begin
    if low < high then
    begin
        // recursively divide the array into subarrays until it has a single element
        mid := (low + high) div 2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid+1, high);
    
        // merge the subarrays in sorted order
        left := low; 
        right := mid + 1;
        temp := 0;
        SetLength(tempArr, (high-low)+1);
        
        while (left <= mid) and (right <= high) do
        begin
            if arr[left] <= arr[right] then
            begin
                tempArr[temp] := arr[left];
                temp := temp + 1;
                left := left + 1;
            end
            else
            begin
                tempArr[temp] := arr[right];
                temp := temp + 1;
                right := right + 1;
            end;
        end;

        // copy any remaining elements from left subarray
        while left <= mid do
        begin
            tempArr[temp] := arr[left];
            left := left + 1;
            temp := temp + 1;
        end;

        // copy any remaining elements from right subarray
        while right <= high do
        begin
            tempArr[temp] := arr[right];
            right := right + 1;
            temp := temp + 1;
        end;

        // copy the sorted elements back to the original array
        for i := low to high do
        begin
            arr[i] := tempArr[i-low];
        end;
    end;
end;