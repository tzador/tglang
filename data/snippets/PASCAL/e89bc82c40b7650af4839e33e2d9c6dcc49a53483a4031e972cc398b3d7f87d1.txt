program complexSnippet;

{this is a program that demonstrates complex mathematical calculations}

var
    a, b, c: real; {declaring variables to store numerical values}
    x, y, z: integer; {declaring variables to store integer values}

{defining a function to calculate the square root of a number}
function squareRoot(x: real): real;
begin
    if x < 0 then {checking for negative input}
        begin
            writeLn('Invalid input');
            squareRoot := -1; {returning -1 as an error code}
        end
    else
        squareRoot := sqrt(x); {using built-in sqrt function to calculate square root}
end;

{defining a procedure to solve a quadratic equation}
procedure solveQuadratic(a, b, c: real; var x, y: real);
var
    disc: real; {declaring variable to store the discriminant}
begin
    disc := b * b - 4 * a * c; {calculating the discriminant}
    if disc < 0 then {checking for negative discriminant}
        begin
            writeLn('No real solutions');
            exit; {exiting the procedure}
        end
    else if disc = 0 then {checking for only one solution}
        x := -b / (2 * a) {calculating the solution}
    else {if discriminant is positive, there are two solutions}
        begin
            x := (-b + sqrt(disc)) / (2 * a); {calculating first solution}
            y := (-b - sqrt(disc)) / (2 * a); {calculating second solution}
        end;
end;

begin
    {getting input from user}
    write('Enter value for a: ');
    readLn(a);
    write('Enter value for b: ');
    readLn(b);
    write('Enter value for c: ');
    readLn(c);

    {calling the procedure to solve the quadratic equation}
    solveQuadratic(a, b, c, x, y);

    {printing the solutions}
    writeLn('x = ', x);
    writeLn('y = ', y);

    {calling the function to calculate square root}
    writeLn('Square root of ', c, ' = ', squareRoot(c));
end.