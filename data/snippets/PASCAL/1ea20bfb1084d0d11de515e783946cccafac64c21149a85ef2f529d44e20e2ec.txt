{
This code snippet is a demonstration of a QuickSort algorithm implemented in Pascal.

The QuickSort algorithm works by partitioning the input array into two sub-arrays,
one with smaller elements and one with larger elements, and then recursively sorting each sub-array.

This implementation of QuickSort uses the first element of the array as the pivot,
which is then moved to its correct position in the sorted array.
}
procedure QuickSort(var arr: array of integer; low, high: integer);
var
  i, j, pivot, temp: integer;
begin
  if low < high then
  begin
    pivot := low;
    i := low;
    j := high;
    while i < j do
    begin
      { Move pivot to its correct position in the sorted array }
      while (arr[i] <= arr[pivot]) and (i < high) do
        i := i + 1;
      while arr[j] > arr[pivot] do
        j := j - 1;
      if i < j then
      begin
        { Swap elements on either side of pivot }
        temp := arr[i];
        arr[i] := arr[j];
        arr[j] := temp;
      end;
    end;
    { Move pivot to its correct position }
    temp := arr[pivot];
    arr[pivot] := arr[j];
    arr[j] := temp;
    { Recursively sort sub-arrays }
    QuickSort(arr, low, j - 1);
    QuickSort(arr, j + 1, high);
  end;
end;

// Example usage:
var
  nums: array[1..10] of integer = (5, 9, 3, 2, 8, 6, 1, 7, 4, 10);

// Print unsorted array
writeln('Unsorted array:');
for i := 1 to 10 do
  write(nums[i], ' ');

// Sort array using QuickSort algorithm
QuickSort(nums, 1, 10);

// Print sorted array
writeln('Sorted array:');
for i := 1 to 10 do
  write(nums[i], ' ');