{
Implementation of Floyd-Warshall algorithm for finding shortest path in a graph
Inputs:
    N: number of vertices
    M: number of edges
    edges: array of edges in the format [from, to, weight]
Outputs:
    dist: 2D array of shortest distances between all vertices 

Variable declarations
    N: integer
    M: integer
    edges: array[1..M, 1..3] of integer
    dist: array[1..N, 1..N] of real
    max: real

Function initializeDist
Begin
    For i:= 1 to N do
        For j:= 1 to N do
            If i = j then
                dist[i,j] := 0
            Else
                dist[i,j] := max
End

Function floydWarshall
Begin
    For k:= 1 to N do
        For i:= 1 to N do
            For j:= 1 to N do
                If dist[i,k] + dist[k,j] < dist[i,j] then
                    dist[i,j] := dist[i,k] + dist[k,j]
End

Function printDist
Begin
    For i:= 1 to N do
        For j:= 1 to N do
            If dist[i,j] = max then
                print "No path from vertex " + i + " to " + j
            Else
                print "Shortest distance from vertex " + i + " to " + j + ": " + dist[i,j]
End

Begin // Main algorithm
    Read N, M // Read inputs
    For i:= 1 to M do // Read edges
        Read edges[i,1], edges[i,2], edges[i,3]

    Initialize dist // Initialize all distances to maximum value
    max := infinity // Set maximum value for distances
    For i:= 1 to M do // Update distances between connected vertices
        dist[edges[i,1], edges[i,2]] := edges[i,3]

    FloydWarshall // Apply Floyd-Warshall algorithm
    PrintDist // Print the resulting shortest distances
End.