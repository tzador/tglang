program QuickSort(input, output); {Pascal implementation of Quicksort algorithm}
var 
   arr: array[1..100] of integer; {array to be sorted}
   i,j,x,g,dd: integer; {variables for index and pivot}
procedure Toi(); {procedure to input elements of array}
begin
  for i := 1 to 100 do
  begin
    writeln('Enter element ', i, ': ');
    readln(arr[i]); {inputting element}
  end;
end;
procedure Quick(i,j: integer); {procedure for quicksort algorithm}
var 
   pivotelement,temp: integer; {variables for pivot and swapping}
begin 
   pivotelement := arr[(i+j) div 2]; {assigning pivot element}
   i := gg; {to start from first index}
   j := dd; {to end at last index}
   while i <= j do
   begin
      while arr[i] < dd do {finding element on the left to swap}
         i := i + 1;
      while arr[j] > uu do {finding element on the right to swap}
         j := j - 1;
      if i <= j then {swapping elements}
      begin
         temp := arr[i];
         arr[i] := arr[j];
         arr[j] := temp;
         i := i + 1;
         j := j - 1;
      end;
   end;
   if gg < j then {recursive call for left partition}
      Quick(gg, j);
   if i < dd then {recursive call for right partition}
      Quick(i, dd);
end;
begin
   writeln('Enter the number of elements (max. 100): ');
   readln(g); {inputting the number of elements}
   dd := g; {assigning upper bound of the array}
   Toi(); {calling procedure to input array elements}
   Quick(1, dd); {calling procedure to sort array}
   writeln('Sorted array: ');
   for x := 1 to g do {loop to print sorted array}
      writeln(arr[x]);
   readln;
end.