program QuickSort;

// This is a program that implements the QuickSort algorithm.

// Define a function to swap two elements in an array
procedure swap(var a, b: integer);
var
  temp: integer;
begin
  temp := a;
  a := b;
  b := temp;
end;

// Define a function to partition the array and return the pivot index
function partition(arr: array of integer; low, high: integer): integer;
var
  pivot, i, j: integer;
begin
  pivot := arr[high];
  i := low - 1;
  for j := low to high - 1 do
  begin
    if arr[j] <= pivot then
    begin
      i := i + 1;
      swap(arr[i], arr[j]);
    end;
  end;
  swap(arr[i + 1], arr[high]);
  Result := i + 1;
end;

// Define a recursive function to implement QuickSort algorithm
procedure quickSort(var arr: array of integer; low, high: integer);
var
  pivot_index: integer;
begin
  if low < high then
  begin
    // Calculate pivot index and partition the array
    pivot_index := partition(arr, low, high);

    // Recursively sort the sub-arrays
    quickSort(arr, low, pivot_index - 1);
    quickSort(arr, pivot_index + 1, high);
  end;
end;

// Main program
var
  arr: array of integer;
  i: integer;
begin
  // Initialize the array with random elements
  SetLength(arr, 10);
  for i:= 0 to 9 do
    arr[i] := Random(100);

  // Print the unsorted array
  writeln("Unsorted array: ");
  for i := 0 to 9 do
    write(arr[i], " ");

  // Sort the array using QuickSort algorithm
  quickSort(arr, 0, 9);

  // Print the sorted array
  writeln("Sorted array: ");
  for i := 0 to 9 do
    write(arr[i], " ");
end.