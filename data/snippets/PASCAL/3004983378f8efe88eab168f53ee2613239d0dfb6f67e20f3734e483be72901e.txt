{ This program performs a quicksort on an array of integers }
program Quicksort;

var
  arr: array[1..10] of Integer; { Define array of integers }
  low, high: Integer; { Define variables for the lower and upper bounds }

{ Function to swap two elements of the array }
procedure swap(var x: Integer; var y: Integer);
var
  temp: Integer; { Temporary variable to hold the value of x }
begin
  temp := arr[x];
  arr[x] := arr[y];
  arr[y] := temp;
end;

{ Function to partition the array based on a pivot value }
function partition(low, high: Integer): Integer;
var
  pivot, i, j: Integer;
begin
  pivot := arr[high]; { Set pivot value to the last element }
  i := low - 1; { Initialize i to be one index lower than the lower bound }
  j := high; { Initialize j to be the upper bound }
  while (i < j) do { Loop until i and j cross each other }
  begin
    repeat
      i := i + 1; { Increment i until an element greater than pivot is found }
    until arr[i] >= pivot;
    repeat
      j := j - 1; { Decrement j until an element smaller than pivot is found }
    until arr[j] <= pivot;
    if (i < j) then { Check if i and j have crossed each other }
      swap(i, j); { If not, swap the two elements }
  end;
  swap(i, high); { Finally, swap pivot with the element at index (i+1) }
  Result := i; { Return the position of pivot }
end;

{ Function to perform the quicksort algorithm recursively }
procedure quicksort(low, high: Integer);
var
  pivot: Integer;
begin
  if (low < high) then { Check if there are more than one elements }
  begin
    pivot := partition(low, high); { Call partition function }
    quicksort(low, pivot - 1); { Perform quicksort on the left subarray }
    quicksort(pivot + 1, high); { Perform quicksort on the right subarray }
  end;
end;

{ Main program }
begin
  { Take input from user and store in the array }
  WriteLn('Enter 10 elements in the array:');
  for i := 1 to 10 do
    ReadLn(arr[i]);

  low := 1; { Set lower bound to 1 }
  high := 10; { Set upper bound to 10 }

  quicksort(low, high); { Call quicksort function }

  { Print sorted array }
  WriteLn('Sorted array:');
  for i := 1 to 10 do
    WriteLn(arr[i]);
end.