function mergeSort(arr: array of integer; low: integer; high: integer): array of integer;
var left, right, resultArr: array of integer;
    mid, i, j, k: integer;
begin
    if low < high then
    begin
        mid := low + (high - low) div 2;  // divide the array into two halves
        // initialize left and right arrays with appropriate size
        SetLength(left, mid + 1 - low);
        SetLength(right, high - mid);
        // copy data from the original array to left and right arrays
        for i := 0 to mid - low do
            left[i] := arr[low + i];
        for j := 0 to high - mid - 1 do
            right[j] := arr[mid + 1 + j];
        // recursively call mergeSort function on left and right subarrays 
        left := mergeSort(left, 0, mid - low);
        right := mergeSort(right, 0, high - mid - 1);
        // merge the sorted subarrays into a result array
        resultArr := merge(left, right);
        // copy the elements from result array back to the original array
        for k := 0 to high - low do
            arr[low + k] := resultArr[k];
    end;
    // return the sorted array
    mergeSort := arr;
end;

// function to merge two sorted arrays into one
function merge(arr1, arr2: array of integer): array of integer;
var resultArr: array of integer;
    i, j, k: integer;
begin
    SetLength(resultArr, Length(arr1) + Length(arr2));
    i := 0; // index for arr1
    j := 0; // index for arr2
    k := 0; // index for resultArr
    // iterate through each array and compare elements to be merged
    while (i < Length(arr1)) and (j < Length(arr2)) do
    begin
        // compare elements and add the smaller one to the result array
        if arr1[i] <= arr2[j] then
        begin
            resultArr[k] := arr1[i];
            i := i + 1;
        end
        else
        begin
            resultArr[k] := arr2[j];
            j := j + 1;
        end;
        k := k + 1;        
    end;
    // copy remaining elements from arr1 to result array
    while i < Length(arr1) do
    begin
        resultArr[k] := arr1[i];
        i := i + 1;
        k := k + 1;
    end;
    // copy remaining elements from arr2 to result array
    while j < Length(arr2) do
    begin
        resultArr[k] := arr2[j];
        j := j + 1;
        k := k + 1;
    end;
    // return the merged result array
    merge := resultArr;
end;

// example usage
var arr: array of integer;
    sortedArr: array of integer;
begin
    // initialize the array with unsorted elements
    arr := [4, 3, 7, 2, 9, 1, 6, 8, 5];
    // call mergeSort function with starting and ending indices
    sortedArr := mergeSort(arr, 0, Length(arr) - 1);
    // print the sorted array
    for i := 0 to Length(sortedArr) - 1 do
        WriteLn(sortedArr[i]);
end.