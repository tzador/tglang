{This is a program that implements the QuickSort algorithm to sort an array of integers.}

program QuickSort;

type
  {Defining a custom integer array type}
  IntArray = array of Integer;

var
  {Declaring global variables}
  arr: IntArray;

procedure Swap(var a, b: Integer);
{This procedure swaps the values of two integer variables}
var
  temp: Integer;
begin
  temp := a;
  a := b;
  b := temp;
end;

procedure QuickSort(low, high: Integer);
{This function implements the QuickSort algorithm}
var
  i, j, pivot: Integer;
begin
  {Choosing the pivot element}
  pivot := arr[(low + high) div 2];

  i := low;
  j := high;

  {Partitioning the array}
  while i <= j do
  begin
    {Finding an element on the left side that should be on the right side}
    while arr[i] < pivot do
    begin
      i := i + 1;
    end;

    {Finding an element on the right side that should be on the left side}
    while arr[j] > pivot do
    begin
      j := j - 1;
    end;

    {If the two elements are on different sides, swap them}
    if i <= j then
    begin
      Swap(arr[i], arr[j]);
      i := i + 1;
      j := j - 1;
    end;
  end;

  {Recursively calling QuickSort for the left and right partitions}
  if low < j then
    QuickSort(low, j);
  if i < high then
    QuickSort(i, high);
end;

begin
  {Initializing and filling the array}
  SetLength(arr, 10);
  arr[0] := 5;
  arr[1] := 3;
  arr[2] := 2;
  arr[3] := 9;
  arr[4] := 8;
  arr[5] := 6;
  arr[6] := 1;
  arr[7] := 4;
  arr[8] := 7;
  arr[9] := 10;

  {Calling QuickSort procedure to sort the array}
  QuickSort(0, 9);

  {Printing the sorted array}
  for i := 0 to 9 do
  begin
    WriteLn(arr[i]);
  end;
end.