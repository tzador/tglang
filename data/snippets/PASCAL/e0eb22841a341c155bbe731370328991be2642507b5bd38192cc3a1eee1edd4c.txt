procedure QuickSort(var arr: array of integer; low, high: integer);
begin
    if low < high then
    begin
        // choose a pivot element (in this case, the middle element)
        pivot := arr[(low + high) div 2];
        // create two partitions - one with elements smaller than pivot, the other with elements larger than pivot
        i := low;
        j := high;
        while i <= j do
        begin
            while arr[i] < pivot do
            begin
                i := i + 1;
            end;
            while arr[j] > pivot do
            begin
                j := j - 1;
            end;
            if i <= j then
            begin
                // swap elements
                temp := arr[i];
                arr[i] := arr[j];
                arr[j] := temp;
                // move to next elements in partitions
                i := i + 1;
                j := j - 1;
            end;
        end;
        // recursively quicksort both partitions
        QuickSort(arr, low, j);
        QuickSort(arr, i, high);
    end;
end;

// example usage
var
    arr: array of integer = [5, 2, 7, 9, 1, 3, 6, 4]; // unsorted array
begin
    QuickSort(arr, 0, length(arr) - 1); // sort the array
    // print sorted array
    for i := 0 to length(arr) - 1 do
    begin
        write(arr[i]," ");
    end;
end.