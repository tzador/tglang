###

# Class definition using CoffeeScript syntax
class Animal

  # Constructor function with two parameters
  constructor: (@name, @age) ->

  # Prototype method for getting the name of the animal
  getName: -> 
    console.log "The animal's name is #{@name}"

  # Prototype method for getting the age of the animal
  getAge: -> 
    console.log "The animal's age is #{@age}"

  # Prototype method for setting the name of the animal
  setName: (newName) ->
    @name = newName

  # Prototype method for setting the age of the animal
  setAge: (newAge) ->
    @age = newAge

  # Static method for creating a new animal with a specific name and age
  @create: (name, age) ->
    new Animal(name, age)

# Class inheritance in CoffeeScript
class Dog extends Animal

  # Constructor function with three parameters (including inherited parameters from Animal class)
  constructor: (@name, @age, @breed) ->
    super(@name, @age)

  # Prototype method for getting the breed of the dog
  getBreed: ->
    console.log "The dog's breed is #{@breed}"

  # Override the setName method from Animal class to also set the breed
  setName: (newName) ->
    @name = newName
    @setBreed()

  # Private method used only within the class to determine the breed based on the age
  setBreed: ->
    if @age < 1
      @breed = "Puppy"
    else if @age < 7
      @breed = "Adult dog"
    else
      @breed = "Senior dog"

# Creating a new dog object using the static create method from the Animal class
myDog = Animal.create("Buddy", 3)

# Output the name, age, and breed of the dog
myDog.getName()
myDog.getAge()
myDog.getBreed()

# Change the name and age of the dog using the setName and setAge methods from the Animal class
myDog.setName("Max")
myDog.setAge(6)

# Output the updated name, age, and breed of the dog
myDog.getName()
myDog.getAge()
myDog.getBreed()