# This is an example of a complex class in Coffeescript
class Order
  # Declaring constructor function with arguments
  constructor: (item, quantity) ->
    @item = item
    @quantity = quantity
    # Variable for total price
    @total = 0
    # Invoking the calculateTotal function
    @calculateTotal();

  # This function calculates the total price of the order
  calculateTotal: ->
    # Setting prices for each item
    itemPrices = {
      coffee: 2.50,
      pastry: 4.00,
      sandwich: 6.00
    }
    # Looping through the items in the order
    for item in @item
      # Adding the price of each item to the total
      @total += itemPrices[item] * @quantity[item];

  # This function adds a new item to the order
  addItem: (item, quantity) ->
    # Checking if the item already exists in the order
    if item in @item
      # If it does, update the quantity
      @quantity[item] += quantity
    else
      # If it doesn't, add the new item and quantity to the order
      @item.push(item)
      @quantity[item] = quantity
    # Recalculating the total price
    @calculateTotal()

# Creating a new order instance and passing in items and quantities
myOrder = new Order(["coffee", "pastry"], [2, 1])

# Adding a new item to the existing order
myOrder.addItem("sandwich", 2)

# Printing out the total price of the order
console.log("Total price: $" + myOrder.total)