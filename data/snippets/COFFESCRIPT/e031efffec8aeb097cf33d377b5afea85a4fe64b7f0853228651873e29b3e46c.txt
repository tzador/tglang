# Install dependencies using npm
`npm install express body-parser nodemon fs`

# Import necessary modules
app = require("express")()
bodyParser = require("body-parser")
nodemon = require("nodemon")
fs = require("fs")

# Set up port for server to listen on
port = process.env.PORT or 3000

# Define a simple logger middleware function
logger = (req, res, next) -> 
  console.log(`Received ${req.method} request to ${req.url}`)
  next()

# Set up body-parser middleware to handle incoming requests
app.use(bodyParser.urlencoded({ extended: true }))
app.use(bodyParser.json())

# Define a custom error handler middleware function
errorHandler = (err, req, res, next) -> 
  console.error(`Encountered ${err} on request to ${req.url}`)
  res.status(500).send("Internal Server Error")

# Define a simple route with a controller function
app.get("/hello", (req, res) ->
  res.send("Hello, world!")
)

# Start the server and listen for incoming requests
server = app.listen(port, () -> 
  console.log(`Server listening on port ${port}`)
)

# Use nodemon to automatically restart the server on code changes
fs.watchFile("index.js", () -> 
  console.log("Code changes detected, restarting server...")
  process.emit("SIGINT")
)
nodemon({ script: "index.js" }).on("SIGINT", () ->
  server.close() # Close the server before restarting
  nodemon.emit("quit") # Stop nodemon from continuously restarting
)