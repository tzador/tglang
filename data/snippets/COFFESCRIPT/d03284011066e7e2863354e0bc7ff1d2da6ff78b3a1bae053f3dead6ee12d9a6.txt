###
Helper function to calculate the factorial of a given number.
@param {Number} num - The number to calculate the factorial of
@return {Number} - The factorial of the given number
###
factorial = (num) ->
##if the number is 0 or 1, return 1
if num <= 1
return 1
else
##using a for loop to calculate the factorial
result = 1
for i in [2..num]
result *= i
return result

##function to find the nth fibonacci number
fibonacci = (n) ->
##if n is 0, return 0
if n == 0
return 0
##if n is 1, return 1
else if n == 1
return 1
else
##using recursion to calculate the fibonacci number
return fibonacci(n-1) + fibonacci(n-2)

##function to sort an array of numbers in ascending order
sortNumbers = (arr) ->
##if the array size is 1 or smaller, return the array
if arr.length <= 1
return arr
##split the array into 2 halves
middle = Math.floor(arr.length/2)
left = arr.slice(0, middle)
right = arr.slice(middle)
##recursively sort the 2 halves
leftSorted = sortNumbers(left)
rightSorted = sortNumbers(right)
##merge the sorted halves into a single array
return merge(leftSorted, rightSorted)

##helper function to merge 2 sorted arrays
merge = (arr1, arr2) ->
##initialize an empty array to store the sorted elements
result = []
##while both arrays are not empty, compare elements and add to result
while arr1.length > 0 and arr2.length > 0
if arr1[0] < arr2[0]
result.push(arr1.shift())
else
result.push(arr2.shift())
##add remaining elements to result
while arr1.length > 0
result.push(arr1.shift())
while arr2.length > 0
result.push(arr2.shift())
##return the sorted array
return result