// A function to sort an array of numbers in ascending order
sortArray = (array) ->
  # Base case - if array contains only one element, return array
  if array.length == 1
    return array
  # Find the middle index of the array
  midIndex = Math.floor(array.length / 2)
  # Divide the array into two halves, left and right
  left = array.slice(0, midIndex)
  right = array.slice(midIndex)
  # Recursively call the sortArray function on the left and right halves
  left = sortArray(left)
  right = sortArray(right)
  # Merge the sorted left and right halves back into a single array
  merge = (left, right) ->
    # Initialize an empty array to store the sorted elements
    sortedArray = []
    # Keep track of the current index of the left and right halves
    leftIndex = 0
    rightIndex = 0
    # Loop through both arrays and compare the elements to determine the order
    while leftIndex < left.length and rightIndex < right.length
      # If the element in the left array is smaller, add it to the sorted array
      if left[leftIndex] < right[rightIndex]
        sortedArray.push(left[leftIndex])
        # Increment the left index
        leftIndex++
      # If the element in the right array is smaller, add it to the sorted array
      else
        sortedArray.push(right[rightIndex])
        # Increment the right index
        rightIndex++
    # If there are any remaining elements in the left array, add them to the sorted array
    while leftIndex < left.length
      sortedArray.push(left[leftIndex])
      leftIndex++
    # If there are any remaining elements in the right array, add them to the sorted array
    while rightIndex < right.length
      sortedArray.push(right[rightIndex])
      rightIndex++
    # Return the sorted array
    return sortedArray
  # Call the merge function on the two sorted halves and return the result
  merge(left, right)
// Example usage
unsortedArr = [5, -10, 3, 12, 9]
sortedArr = sortArray(unsortedArr)
console.log(sortedArr)
// Output: [-10, 3, 5, 9, 12]