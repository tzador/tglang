# This code snippet uses the Coffeescript language and demonstrates some of its features:
# 1. Using fat arrow functions to preserve binding of 'this'
# 2. Creating an array using the range operator and spreading it to a function as arguments
# 3. Using string interpolation to dynamically create a string
# 4. Utilizing object destructuring and default params in function arguments
class Person
    constructor: (@name, @age) ->
        # Constructor that sets up name and age properties using the Coffeescript shorthand notation
    greet: ->
        console.log "Hello, my name is #{@name} and I am #{@age} years old."
        # Fat arrow function ensures that 'this' in the body of the function is still bound to the Person instance
        # String interpolation allows us to dynamically create a greeting message with our object's properties
        # No explicit return needed, Coffeescript returns the result of the last statement
    celebrateBirthday: (newAge = @age + 1) ->
        console.log "It's my birthday! I'm now #{newAge} years old!"
        # Function uses default params to set newAge to current age + 1 if no argument is provided
        # Implicit return as there are no curly braces around the body of the function
        # Semicolons are also not necessary in Coffeescript, they are automatically inserted where needed
# Instantiate Person objects using shorthand notation
maggie = new Person "Maggie", 24
danny = new Person "Danny", 27
# Call the greet and celebrateBirthday methods
maggie.greet()
danny.greet()
maggie.celebrateBirthday()