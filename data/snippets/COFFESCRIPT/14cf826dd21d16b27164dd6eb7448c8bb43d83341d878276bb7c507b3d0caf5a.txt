# Nearest Neighbor algorithm
class NearestNeighbor
  constructor: (@data) ->
    @distances = []
    getDistances: =>
      for i in [0...@data.length]
        distances[i] = []
        for j in [0...@data.length]
          distances[i][j] = self.distance(@data[i], @data[j])
    findNearestNeighbor: (point) =>
      minDistance = Infinity
      nearestNeighbor = null
      for i in [0...@data.length]
        if @distances[i] > 0 and @distances[i] < minDistance
          minDistance = @distances[i]
          nearestNeighbor = @data[i]
      return nearestNeighbor
    distance: (p1, p2) =>
      d = 0
      for i in [0...p1.length]
        d += (p1[i] - p2[i]) ** 2
      return Math.sqrt(d)
# Initializing the data
points = [
  [2, 3],
  [5, 2],
  [1, 1],
  [6, 7]
]
# Creating an instance of the nearest neighbor class
nn = new NearestNeighbor(points)
# Calculating the distances between all points
nn.getDistances()
# Finding the nearest neighbor to a given point
nearestNeighbor = nn.findNearestNeighbor([3, 4])
# Outputting the result
console.log(nearestNeighbor) # This should print [2, 3]