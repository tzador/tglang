# This is a function that takes in two arguments, a number and an array
# It checks if the number is in the array, and if it is, it returns the
# index of the number in the array
#
# Parameters:
# - num: the number to search for in the array
# - arr: the array to search in
#
# Output:
# - index of the number in the array, if it exists
# - -1 otherwise

binarySearch = (num, arr) ->
  # The left endpoint of the search range
  left = 0
  # The right endpoint of the search range
  right = arr.length - 1

  # loop until the left endpoint is greater than the right endpoint
  while left <= right
    # Find the mid index of the search range
    mid = Math.floor((left + right) / 2)

    # If the mid element is equal to the number, return its index
    if arr[mid] == num then return mid

    # If the mid element is less than the number,
    # update the left endpoint to the next element after the mid
    if arr[mid] < num then left = mid + 1
    # If the mid element is greater than the number,
    # update the right endpoint to the element before the mid
    else right = mid - 1

  # If the number is not found, return -1
  return -1