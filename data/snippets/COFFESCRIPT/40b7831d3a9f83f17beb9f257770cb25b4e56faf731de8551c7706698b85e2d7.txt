### This code snippet demonstrates how to implement a Binary Search Tree data structure using Coffeescript

class BinarySearchTree
  constructor: (@key, @val, @parent=null, @left=null, @right=null) ->
  add: (key, val) ->
    if key < @key
      if @left
        @left.add(key, val)
      else
        @left = new BinarySearchTree(key, val, @)
    else if key > @key
      if @right
        @right.add(key, val)
      else
        @right = new BinarySearchTree(key, val, @)
    else
      @val = val
  find: (key) ->
    if key < @key
      if @left
        @left.find(key)
      else
        throw new Error('Key not found')
    else if key > @key
      if @right
        @right.find(key)
      else
        throw new Error('Key not found')
    else
      return @val
  remove: (key) ->
    if key < @key
      if @left
        @left = @left.remove(key)
      else
        throw new Error('Key not found')
    else if key > @key
      if @right
        @right = @right.remove(key)
      else
        throw new Error('Key not found')
    else
      if @left and @right
        successor = @right.findMin()
        @key = successor.key
        @val = successor.val
        @right = @right.remove(@key)
      else if @left
        @left.parent = @parent
        return @left
      else if @right
        @right.parent = @parent
        return @right
      else
        return null
  findMin: ->
    current = @
    while current.left
      current = current.left
    return current

# Create a new BinarySearchTree instance
tree = new BinarySearchTree(10, 'A')

# Add new nodes
tree.add(5, 'B')
tree.add(15, 'C')
tree.add(3, 'D')
tree.add(8, 'E')
tree.add(12, 'F')
tree.add(16, 'G')

# Find a node with key 8
node = tree.find(8)
console.log(node) # Outputs 'E'

# Remove a node with key 15
tree.remove(15)