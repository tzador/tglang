# This function takes in a string and a number, and returns the string repeated the specified number of times.
repeatString = (str, num) ->
    result = '' # initiate empty string
    for i in [0...num] # for loop to iterate based on the specified number
        result += str # add the string to the result variable
    return result # return the result

# This function checks if a given number is prime or not.
isPrime = (num) ->
    if num <= 1 # returns false if number is less than 1
        return false
    else if num <= 3 # returns true if number is 2 or 3
        return true
    else if num % 2 == 0 or num % 3 == 0 # checks if number is divisible by 2 or 3, returns false if true
        return false
    else
        i = 5
        while i * i <= num # checks for prime numbers using the square root method
            if num % i == 0 or num % (i + 2) == 0 # checks if number is divisible by current value or current value + 2
                return false # returns false if true
            i += 6 # increments i by 6 for optimization
    return true # returns true if number is prime

# This function takes in an array of numbers, sorts them in ascending order and returns the sorted array.
sortArray = (arr) ->
    for i in [1...arr.length] # for loop to iterate through the array
        key = arr[i] # set the current element as the key value
        j = i - 1 # set j to the element before the current element
        while j >= 0 && arr[j] > key # while loop to compare the current element with the elements before it
            arr[j + 1] = arr[j] # moves the elements up if needed
            j -= 1 # decrements j for each comparison
        arr[j + 1] = key # inserts the current element in the correct position
    return arr # returns the sorted array

# This function takes in two arrays and merges them into a single sorted array.
mergeArrays = (arr1, arr2) ->
    result = [] # initiate empty array for the resulting merged array
    while arr1.length != 0 && arr2.length != 0 # while loop to check if both arrays still have elements
        if arr1[0] < arr2[0] # compares the first elements of each array
            result.push(arr1[0]) # adds the smaller element to the resulting array
            arr1.shift() # removes the added element from the original array
        else
            result.push(arr2[0]) # adds the smaller element to the resulting array
            arr2.shift() # removes the added element from the original array
    if arr1.length == 0 # checks if there are remaining elements in arr1
        result = result.concat(arr2) # concatenates the remaining elements in arr2 to the resulting array
    else
        result = result.concat(arr1) # concatenates the remaining elements in arr1 to the resulting array
    return result # returns the merged and sorted array