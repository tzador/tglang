# This function utilizes a recursive approach to finding the
# nth Fibonacci number
# @param {Int} n - The place of the Fibonacci number to be found
# @return {Int} - The nth Fibonacci number
fibonacci = (n) ->
  if n <= 1
    # Base case, returns 0 or 1 depending on n value
    n
  else
    # Recursive call, uses memoization to store previous results
    @memoize(n) ->
      # Adds previous two Fibonacci numbers
      fibonacci(n - 1) + fibonacci(n - 2)

# This function uses memoization to store previous results
# @param {Int} n - The place of the Fibonacci number to be found
# @return {Int} - The nth Fibonacci number
memoize = (n) ->
  # Checks if the Fibonacci number is already stored
  if memoize.cache[n]?
    # Returns stored Fibonacci number
    memoize.cache[n]
  else
    # Calculates Fibonacci number and stores it
    memoize.cache[n] = fibonacci(n)

# Initializes an empty object to store Fibonacci numbers
memoize.cache = {}

# Calculates the 10th Fibonacci number
fibonacci(10)