### This code snippet will create a class called "Person" with various properties and methods ###

# This is a comment in CoffeeScript, used to explain the code

class Person # Starts the class definition
  constructor: (name, age) -> # Constructor function that takes in name and age parameters
    @name = name # 'name' property assigned to class instance (@)
    @age = age # 'age' property assigned to class instance (@)

  greeting: -> # Greeting method for the person
    console.log "Hello, my name is #{@name} and I am #{@age} years old." # Logs a string with the person's name and age to the console

  # Getter and Setter methods for 'name' and 'age' properties
  getName: -> # Getter method for 'name'
    return @name # Returns the value of 'name'
  
  setName: (newName) -> # Setter method for 'name' that takes in a parameter
    @name = newName # Sets the value of 'name' to the parameter passed in
  
  getAge: -> # Getter method for 'age'
    return @age # Returns the value of 'age'
  
  setAge: (newAge) -> # Setter method for 'age' that takes in a parameter
    @age = newAge # Sets the value of 'age' to the parameter passed in

# Creating new instance of Person with name and age passed in
person = new Person("John", 25)

# Calling the greeting method for the person instance
person.greeting() # Output: Hello, my name is John and I am 25 years old.

# Using the getter and setter methods to update the name and age properties
person.setName("Jane")
person.setAge(30)

# Calling the greeting method again to see the updated name and age
person.greeting() # Output: Hello, my name is Jane and I am 30 years old.