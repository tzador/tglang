# This snippet shows how to implement a binary search algorithm in CoffeeScript
class BinarySearch

  # Constructor function
  constructor: (@list) ->

  # Method to perform the binary search
  performSearch: (item) ->
    # Set initial values for start index, end index, and middle index
    startIndex = 0
    endIndex = @list.length - 1
    middleIndex = Math.floor((startIndex + endIndex) / 2)

    # Loop until the item is found or start index is greater than end index
    while startIndex <= endIndex
      # If the middle index is the item, return the index
      if @list[middleIndex] is item
        return middleIndex
      # If the item is greater than the middle index, search the right half of the list
      else if @list[middleIndex] < item
        startIndex = middleIndex + 1
      # If the item is smaller than the middle index, search the left half of the list
      else
        endIndex = middleIndex - 1

      # Update the middle index based on the new start and end index
      middleIndex = Math.floor((startIndex + endIndex) / 2)

    # If the item is not found, return -1
    return -1

# Example usage
# Create a new instance of BinarySearch with a sorted list
binarySearch = new BinarySearch([1, 3, 5, 7, 9, 11])

# Perform a binary search for the number 9 and print the result
console.log(binarySearch.performSearch(9)) # Output: 4 (the index of '9' in the list)