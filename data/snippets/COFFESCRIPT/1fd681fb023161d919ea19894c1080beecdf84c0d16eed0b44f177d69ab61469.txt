###
  Comment block to explain the following code:

  Create a function called 'bestCoffeeShop'
  that takes in two parameters - 'coffeeShops' and 'criterias'
  and returns the best coffee shop based on the given criterias.

  The 'coffeeShops' parameter is an array of objects,
  where each object represents a coffee shop
  and contains the following properties:
  - name
  - location
  - rating
  - priceRange

  The 'criterias' parameter is an object,
  where each property represents a criteria
  and its value represents the user's preference.

  This function uses a scoring system to determine the best coffee shop:
  - The name of the coffee shop is worth 2 points if it contains the user's preferred coffee type
  - The location of the coffee shop is worth 1 point if it matches the user's preferred area
  - The rating of the coffee shop is worth 3 points if it is above the user's preferred rating
  - The price range of the coffee shop is worth 2 points if it is within the user's preferred price range

  If multiple coffee shops have the same score,
  the function will return the first coffee shop in the given array.
  If no coffee shops meet all criterias,
  the function will return null.

  Example input:
  coffeeShops = [
    {
      name: 'Coffee Corner',
      location: 'Downtown',
      rating: 4.5,
      priceRange: 'moderate'
    },
    {
      name: 'Java Junction',
      location: 'Midtown',
      rating: 3.9,
      priceRange: 'cheap'
    },
    {
      name: 'Caffeine Haven',
      location: 'Uptown',
      rating: 4.8,
      priceRange: 'expensive'
    }
  ]

  criterias = {
    coffeeType: 'latte',
    area: 'Downtown',
    rating: 4,
    priceRange: 'moderate'
  }

  Expected output:
  {
    name: 'Coffee Corner',
    location: 'Downtown',
    rating: 4.5,
    priceRange: 'moderate'
  }
###
bestCoffeeShop: (coffeeShops, criterias) ->
  # Initialize an empty array for scores
  scores = []

  # Loop through each coffee shop in the given array
  for coffeeShop in coffeeShops
    # Initialize a score counter for the current coffee shop
    score = 0

    # Check if the coffee shop's name contains the user's preferred coffee type
    if coffeeShop.name.contains(criterias.coffeeType)
      # If yes, add 2 points to the score
      score += 2

    # Check if the coffee shop's location matches the user's preferred area
    if coffeeShop.location === criterias.area
      # If yes, add 1 point to the score
      score += 1

    # Check if the coffee shop's rating is above the user's preferred rating
    if coffeeShop.rating > criterias.rating
      # If yes, add 3 points to the score
      score += 3

    # Check if the coffee shop's price range is within the user's preferred price range
    if coffeeShop.priceRange === criterias.priceRange
      # If yes, add 2 points to the score
      score += 2

    # Add the current coffee shop's score to the array of scores
    scores.push(score)

  # Find the maximum score in the array of scores
  # and get the index of that score
  maxScoreIndex = scores.indexOf(Math.max(...scores))

  # Check if the maximum score is equal to 0, meaning no coffee shops meet all criterias
  if maxScoreIndex === 0
    # If yes, return null
    return null
  else
    # Otherwise, return the first coffee shop with the maximum score
    return coffeeShops[maxScoreIndex]