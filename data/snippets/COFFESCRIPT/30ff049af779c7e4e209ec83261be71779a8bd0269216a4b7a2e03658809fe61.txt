# This function calculates the Fibonacci sequence with memoization.
# It has a runtime of O(n), making it more efficient than a recursive approach.

memoize = (func) ->
  cache = {}
  return (key) ->
    if cache[key]
      return cache[key]
    else
      cache[key] = func(key)
      return cache[key]

# We use the `memoize` function to calculate a memoized version of the Fibonacci sequence.

Fibonacci = memoize (n) ->
  if n < 2
    return n
  else
    return Fibonacci(n-1) + Fibonacci(n-2)

# We can now call the `Fibonacci` function to get the nth number in the Fibonacci sequence.

console.log(Fibonacci(10)) # Output: 55
console.log(Fibonacci(20)) # Output: 6765
console.log(Fibonacci(30)) # Output: 832040