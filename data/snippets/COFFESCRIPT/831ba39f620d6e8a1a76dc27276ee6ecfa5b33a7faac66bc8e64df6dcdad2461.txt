# function to check if number is even or odd
isEven = (num) ->
  if (num % 2) == 0 # check if remainder is equal to 0
    return true # if yes, number is even
  else
    return false # if not, number is odd

# function to calculate factorial of a number
factorial = (num) ->
  if num < 0 # check if number is negative
    print "Error: Cannot calculate factorial of a negative number."
  else
    result = 1 # initialize result variable
    while num > 0 # loop through numbers from num to 1
      result *= num # multiply result by number
      num-- # decrement number by 1
    return result # return final result

# function to reverse a string
reverseString = (str) ->
  return str.split('').reverse().join('') # split string into array, reverse array, and join back into string

# function to find the largest number in an array
findMax = (arr) ->
  max = arr[0] # initialize max variable with first element of array
  for i in [1..arr.length] # loop through array starting from 2nd element
    if arr[i] > max # check if current element is larger than max
      max = arr[i] # if yes, update max
  return max # return final max value

# function to remove duplicate elements from an array
removeDuplicates = (arr) ->
  newArr = [] # initialize new empty array
  for el in arr # loop through elements in original array
    if el not in newArr # check if element is not yet in new array
      newArr.push(el) # if yes, push element into new array
  return newArr # return final array with duplicates removed

# function to convert Fahrenheit to Celsius
fahrenheitToCelsius = (f) ->
  return ((f - 32) * 5) / 9 # formula for conversion

# function to convert Celsius to Fahrenheit
celsiusToFahrenheit = (c) ->
  return (c * 9) / 5 + 32 # formula for conversion

# function to check if string is a palindrome
checkPalindrome = (str) ->
  return str.split('').reverse().join('') == str # split string into array, reverse, and join back into string, then check if it is equal to original string

# function to find the factorial of a number using recursion
factorialRecursive = (num) ->
  if num == 0 # base case
    return 1
  else
    return num * factorialRecursive(num-1) # recursive call to multiply number with factorial of (number - 1)