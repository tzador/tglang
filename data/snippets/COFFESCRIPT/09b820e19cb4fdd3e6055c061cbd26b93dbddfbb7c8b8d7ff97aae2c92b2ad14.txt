# Function to check if a number is prime
# Takes in a number as an argument
isPrime = (num) ->
  # Base case
  return false if num <= 1
  # Check if number is divisible by any number from 2 to half the number
  # If divisible, return false (not prime)
  for i in [2..num/2]
    # If number is divisible, return false
    if num % i is 0
      return false
  # If number is not divisible, return true (prime)
  return true

# Function to generate a prime factorization of a number
# Takes in a number as an argument
primeFactorization = (num) ->
  # Initialize an empty array to store prime factors
  primeFactors = []
  # Check if number is divisible by 2
  while num % 2 is 0
    # If divisible, add 2 to primeFactors array
    primeFactors.push(2)
    # Update number to be divided by 2
    num /= 2

  # Check for remaining factors (3 and onwards)
  for i in [3..Math.sqrt(num)]
    # Check if number is divisible by current factor
    while num % i is 0
      # If divisible, add current factor to primeFactors array
      primeFactors.push(i)
      # Update number to be divided by current factor
      num /= i

  # If remaining number is greater than 2, add it as a prime factor
  if num > 2
    primeFactors.push(num)

  # Print results to console
  console.log("Prime factors of #{num} are #{primeFactors}")

# Example call to primeFactorization function
primeFactorization(42)

# Output: Prime factors of 42 are [2, 3, 7]