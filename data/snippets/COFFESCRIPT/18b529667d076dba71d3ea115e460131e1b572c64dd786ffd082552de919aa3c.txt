### Define a class for GroceryList ###

class GroceryList
  constructor: ->
    @items = []

  add: (item) ->
    @items.push(item)

  remove: (item) ->
    @items = @items.filter((i) ->
      i isnt item
    )

### Define a subclass for ShoppingList that inherits from GroceryList ###
class ShoppingList extends GroceryList
  constructor: ->
    super

  addItemWithQuantity: (item, quantity) ->
    @items.push ({item, quantity})

  removeItemWithQuantity: (item, quantity) ->
    for i in [0...@items.length]
      if @items[i].item is item
        if quantity > @items[i].quantity
          quantity -= @items[i].quantity
          @items.splice(i, 1)
        else if quantity < @items[i].quantity
          @items[i].quantity -= quantity
          break
        else
          @items.splice(i, 1)
          break
      if quantity is 0
        break

### Create new instances and use methods ###
groceries = new GroceryList()
groceries.add("milk")
groceries.add("bread")
groceries.remove("bread")

shopping = new ShoppingList()
shopping.add("toothpaste")
shopping.addItemWithQuantity("apples", 5)
shopping.removeItemWithQuantity("apples", 2)

console.log(groceries.items)  # Outputs: ["milk"]
console.log(shopping.items)   # Outputs: [{item: "apples", quantity: 3}, "toothpaste"]