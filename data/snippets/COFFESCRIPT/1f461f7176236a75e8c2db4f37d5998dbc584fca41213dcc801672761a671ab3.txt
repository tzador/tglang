# This function uses recursion to find the factorial of a given number
factorial = (num) ->
  if num == 0 #base case
    return 1
  else #recursive case
    return num * factorial(num - 1)

# This function checks if a number is prime or not
isPrime = (num) ->
  # Using the 'some' function to check if any number between 2 and the square root of the number evenly divides the number without a remainder
  checkForDivisions = (divisor) ->
    num % divisor == 0 # Returns true if there is no remainder, indicating a division without a remainder
    
  # Creating an array from 2 to the square root of the number
  arrayOfPossibleDivisors = _.range(2, Math.round(Math.sqrt(num)))

  # Checking if any number evenly divides the given number without a remainder
  # If yes, then the number is not prime
  # If no, then the number is prime
  if arrayOfPossibleDivisors.some(checkForDivisions)
    return false
  else
    return true
  # End of isPrime function
  
# Function to print the first n prime numbers
printFirstNPrimes = (n) ->
  # Initializing an empty array to store the prime numbers
  primes = []
  
  # Initializing a counter variable to check if we have enough prime numbers
  counter = 0
  
  # Starting from 2, check if each number is prime and add it to the array if it is
  currentNumber = 2
  
  # Looping until we have enough prime numbers
  until counter == n
    if isPrime(currentNumber)
      primes.push(currentNumber)
      counter++
    currentNumber++
  return primes
# End of printFirstNPrimes function
  
# Calling the function with 10 as the input
printFirstNPrimes(10)