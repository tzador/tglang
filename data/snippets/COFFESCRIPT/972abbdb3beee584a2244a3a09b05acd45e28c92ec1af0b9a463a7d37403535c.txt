### Function that sorts an array in descending order using quicksort algorithm ###
function quicksort(arr, left, right) {
    originalArr = arr
    if (left < right) {
        let pivotIndex = partition(arr, left, right); // get pivot from partition function
        // recursively call quicksort on left and right partitions
        quicksort(arr, left, pivotIndex-1);
        quicksort(arr, pivotIndex+1, right);
    }
    return arr;

    // helper function for rearranging array elements based on pivot
    function partition (arr, left, right) {
        let pivot = arr[right]; // choose rightmost element as pivot
        let i = left-1;
        for (let j = left; j < right; j++) {
            // if current element is smaller than or equal to pivot, swap it with element at i+1
            if (arr[j] <= pivot) {
                i++;
                let temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        // finally, swap pivot with element at position i+1
        let temp = arr[i+1];
        arr[i+1] = arr[right];
        arr[right] = temp;
        // return position of pivot for quicksort to use for dividing array into two
        return i+1;
    }
}

// Example usage:
let unsortedArr = [5, 3, 8, 2, 1, 4, 9, 6, 7];
let sortedArr = quicksort(unsortedArr, 0, unsortedArr.length - 1);
console.log(sortedArr); // output: [9, 8, 7, 6, 5, 4, 3, 2, 1]