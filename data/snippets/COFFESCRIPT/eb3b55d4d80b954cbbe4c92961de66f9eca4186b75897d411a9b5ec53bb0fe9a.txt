# This function takes in two arguments and returns the larger number
largerNumber = (num1, num2) ->
  if num1 > num2
    return num1
  else if num2 > num1
    return num2
  else
    return "Numbers are equal"
  
# This function takes in an array and returns the sum of all numbers within the array
arraySum = (array) ->
  sum = 0
  for num in array
    sum += num
  return sum
  
# This function takes in two strings and concatenates them together
stringConcat = (str1, str2) ->
  return str1 + str2
  
# A complex function that combines the above functions and uses recursion
complexFunction = (array1, array2, str1, str2) ->
  # Get the largest number from both arrays
  largestNumber = largerNumber(arraySum(array1), arraySum(array2))
  
  # Concatenate the two strings
  concatenatedString = stringConcat(str1, str2)
  
  # Use a recursive loop to add the largest number to the end of the concatenated string
  recursiveLoop = (result, n) ->
    if n is 0
      return result
    else
      result = stringConcat(result, largestNumber.toString())
      recursiveLoop(result, n-1)
      
  # Return the final result after the recursive loop
  return recursiveLoop(concatenatedString, largestNumber)

# Sample function call
console.log(complexFunction([1, 2, 3], [4, 5, 6], "Hello", "World"))
# Output: HelloWorld363636