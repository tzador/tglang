###

`# this function implements quicksort`
`# it takes in an array as a parameter and returns a sorted version of the array`
`# use an arrow function for better readability`
`quicksort = (arr) =>`
    `# creating base case for recursive function`
    `if arr.length <= 1 then return arr`

    `# choosing a pivot element by randomly selecting an index within the range of the array`
    `pivot_index = arr[Math.floor(Math.random() * arr.length)]`

    `# creating two empty arrays to hold elements that are less than or greater than pivot`
    `left = []`
    `right = []`

    `# loop through each element in the array and divide them into the two arrays based on their comparison to pivot`
    `for elem in arr`
        `if elem < pivot_index then left.push(elem)`
        `else if elem > pivot_index then right.push(elem)`

    `# recursively calls the function with the two arrays and combines them with the pivot element in the middle`
    `return quicksort(left).concat(pivot_index, quicksort(right))`

`# calling the function with an unsorted array`
`arr = [9, 4, 6, 1, 0, 3, 7]`
`console.log(quicksort(arr))`