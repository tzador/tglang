class Board
  constructor: (length) ->
    @length = length
    @board = []
    for i in [0...length]
      @board[i] = []
      for j in [0...length]
        @board[i][j] = "empty"
        
  # Method to place a piece on the board
  placePiece: (x, y, piece) ->
    return "Piece placement out of bounds" unless (x >= 0 and x < @length) and (y >= 0 and y < @length)
    return "Space occupied" unless @board[x][y] is "empty"
    @board[x][y] = piece

# Class to represent a player
class Player
  constructor: (name, piece) ->
    @name = name
    @piece = piece
    
# Function to check for a winning condition on the board
winCheck = (board) ->
  # Check for horizontal win condition
  for i in [0...board.length]
    row = board[i]
    if row[0] isnt "empty" and row.every (val) -> val is row[0]
      return true
  
  # Check for vertical win condition
  for j in [0...board.length]
    column = board.map (row) ->
      row[j]
    if column[0] isnt "empty" and column.every (val) -> val is column[0]
      return true
      
  # Check for diagonal win condition (top left to bottom right)
  if board[0][0] isnt "empty" and board[1][1] is board[0][0] and board[2][2] is board[0][0]
    return true
    
  # Check for diagonal win condition (top right to bottom left)
  if board[0][2] isnt "empty" and board[1][1] is board[0][2] and board[2][0] is board[0][2]
    return true
    
  # No winning conditions found, return false
  return false
  
# Initialize a game with 2 players
player1 = new Player("John", "X")
player2 = new Player("Jane", "O")

# Initialize a new board with a length of 3
myBoard = new Board(3)

# Simulate a game where players take turns placing pieces until a win is achieved or the board is filled
turn = 1
while true
  if turn % 2 is 1
    player = player1
    piece = player.piece
  else
    player = player2
    piece = player.piece
  # Get player input for piece placement
  x = prompt(player.name + " enter x coordinate")
  y = prompt(player.name + " enter y coordinate")
  # Place piece on board
  result = myBoard.placePiece(x, y, piece)
  # If piece placement is successful, check for a win
  if result is undefined
    win = winCheck(myBoard.board)
    if win
      alert(player.name + " wins!")
      break
  # If the board is filled, declare a tie
  if turn is 9
    alert("Game ends in a tie")
    break
  turn += 1