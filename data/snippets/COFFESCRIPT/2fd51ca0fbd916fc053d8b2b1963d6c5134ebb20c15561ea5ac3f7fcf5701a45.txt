# Declare a class named "Person"
class Person
  private name
  private age
  
  # Create constructor function that takes in name and age
  constructor: (name, age)->
    @name = name
    @age = age
  
  # Create a method that returns a greeting message
  say_hello: ()->
    "Hello! My name is #{@name} and I am #{@age} years old."
  
  # Create a static method that performs a calculation
  @calculate: (num1, num2)->
    num1 * num2
  
# Declare a subclass named "Employee" that inherits from "Person"
class Employee extends Person
  private salary
  
  # Create constructor function that takes in name, age, and salary
  constructor: (name, age, salary)->
    # Call parent constructor using the "super" keyword
    super name, age
    @salary = salary
  
  # Override parent method to include salary in greeting
  say_hello: ()->
    "Hello! My name is #{@name}, I am #{@age} years old, and my salary is #{@salary}."
  
  # Create a static method that performs a discount calculation
  @apply_discount: (price, percent)->
    price - (price * (percent/100))
  
# Create instances of "Person" and "Employee" classes
person = new Person("Bob", 25)
employee = new Employee("Alice", 30, 100000)

# Call methods on instances
person.say_hello() # Output: Hello! My name is Bob and I am 25 years old.
employee.say_hello() # Output: Hello! My name is Alice, I am 30 years old, and my salary is 100000.
Person.calculate(5, 10) # Output: 50
Employee.apply_discount(100, 25) # Output: 75