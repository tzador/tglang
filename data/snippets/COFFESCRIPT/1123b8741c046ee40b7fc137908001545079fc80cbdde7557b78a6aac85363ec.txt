# This function calculates the nth Fibonacci number
# n: number to calculate Fibonacci number for
# returns the nth Fibonacci number
fibonacci = (n) ->
    if n <= 1
        return n
    else
        return fibonacci(n - 1) + fibonacci(n - 2)

# This function checks if a number is prime
# num: number to check for prime
# returns true if num is prime, false otherwise
isPrime = (num) ->
    if num <= 1
        return false
    else if num <= 3
        return true
    else if num % 2 == 0 or num % 3 == 0
        return false
    i = 5
    while i * i <= num
        if num % i == 0 or num % (i + 2) == 0
            return false
        i += 6
    return true

# This function finds all prime Fibonacci numbers less than or equal to n
# n: upper bound for prime Fibonacci numbers
# returns array of all prime Fibonacci numbers less than or equal to n
findPrimeFibonacci = (n) ->
    fibonacciNums = []
    i = 1
    while fibonacci(i) <= n
        # Check if Fibonacci number is also prime
        if isPrime(fibonacci(i))
            fibonacciNums.push(fibonacci(i))  # Add prime Fibonacci number to array
        i += 1
    return fibonacciNums

# An example call to the findPrimeFibonacci function
# Prints all prime Fibonacci numbers less than or equal to 100
console.log(findPrimeFibonacci(100))

# Output: [ 2, 3, 5, 13, 89 ] (An array containing the prime Fibonacci numbers less than or equal to 100)