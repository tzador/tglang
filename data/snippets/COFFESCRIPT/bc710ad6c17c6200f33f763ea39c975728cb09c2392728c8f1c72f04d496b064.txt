# This is a complex function that takes in an object and checks for certain properties before logging a message and returning a value
myFunction = (obj) ->
  # Use the guard operator to check if the object has a property named "name", if not return null
  return null unless obj?.name

  # Use a for...in loop to iterate through the object's keys and check for a specific property called "age"
  for key, value of obj
    return null unless key is "age"

  # Use the ternary operator to check if the object's "age" property is greater than 18
  canDrink = obj.age > 18 ? false

  # Use the typeof operator to check if the object's "name" property is a string
  nameIsString = typeof obj.name is 'string'

  # Use a switch statement to check for the object's "name" property value and log a corresponding message
  switch obj.name
    when "John"
      console.log("Hello John")
    when "Jane"
      console.log("Hello Jane")
    else
      console.log("Hello stranger")

  # Use an if statement to check if the object has a property called "hobbies" and log a message if it does
  if obj.hobbies
    console.log("This person has the following hobbies:")
    # Use another for...in loop to iterate through the object's "hobbies" array and log each hobby
    for hobby in obj.hobbies
      console.log(hobby)

  # Use the fat arrow to define a method on the object that returns the value of canDrink and nameIsString
  obj.getDetails = => "#{obj.name} can drink: #{canDrink} and their name is a string: #{nameIsString}"

  # Return the object from the function
  return obj

# Call the function with an object containing the necessary properties
myObject = {
  name: "John",
  age: 25,
  hobbies: ["reading", "playing guitar"]
}
myFunction(myObject)

# Output: `myFunction(myObject) => {
  name: "John",
  age: 25,
  hobbies: ["reading", "playing guitar"],
  getDetails: () => "John can drink: true and their name is a string: true"
}`