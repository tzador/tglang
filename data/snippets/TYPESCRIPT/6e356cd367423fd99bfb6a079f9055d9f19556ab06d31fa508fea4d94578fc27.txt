// Declare class
class Person {
  // Properties
  firstName: string;
  lastName: string;
  age: number;

  // Constructor
  constructor(firstName: string, lastName: string, age: number) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
  }

  // Method to get full name
  getFullName(): string {
    return `${this.firstName} ${this.lastName}`;
  }

  // Setter method for age
  setAge(newAge: number): void {
    this.age = newAge;
  }

  // Method to greet a person
  greet(person: Person): string {
    return `Hello ${person.getFullName()}! My name is ${this.getFullName()}.`;
  }
}

// Instantiate Person class
const person1 = new Person('John', 'Smith', 30);
const person2 = new Person('Jane', 'Doe', 25);

// Call methods
console.log(person1.getFullName()); // Output: John Smith
console.log(person2.getFullName()); // Output: Jane Doe
console.log(person1.greet(person2)); // Output: Hello Jane Doe! My name is John Smith.

// Inheritance
class Employee extends Person {
  // Properties
  jobTitle: string;
  salary: number;

  // Constructor
  constructor(firstName: string, lastName: string, age: number, jobTitle: string, salary: number) {
    super(firstName, lastName, age); // Calls parent class constructor
    this.jobTitle = jobTitle;
    this.salary = salary;
  }

  // Method to get full information about employee
  getInfo(): string {
    return `${this.getFullName()} is a ${this.jobTitle} and earns $${this.salary} per year.`;
  }
}

// Instantiate Employee class
const employee1 = new Employee('John', 'Smith', 30, 'Software Engineer', 100000);

// Call methods
console.log(employee1.getFullName()); // Output: John Smith
console.log(employee1.getInfo()); // Output: John Smith is a Software Engineer and earns $100000 per year.
console.log(employee1.age); // Output: 30
employee1.setAge(35); // Setter method for age
console.log(employee1.age); // Output: 35

// Interface
interface Vehicle {
  brand: string;
  model: string;
  year: number;
  getDetails(): string;
}

// Class implementing interface
class Car implements Vehicle {
  // Properties
  brand: string;
  model: string;
  year: number;

  // Constructor
  constructor(brand: string, model: string, year: number) {
    this.brand = brand;
    this.model = model;
    this.year = year;
  }

  // Method to get vehicle details
  getDetails(): string {
    return `${this.year} ${this.brand} ${this.model}`;
  }
}

// Instantiate Car class
const car1 = new Car('Ford', 'Mustang', 2015);

// Call method
console.log(car1.getDetails()); // Output: 2015 Ford Mustang