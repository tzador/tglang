/**
 * This is a complex Typescript class with a constructor, properties, and methods.
 * It also has a static property and uses a generic type for its methods.
 */

class ExampleClass<T> {
  // A constructor that takes in 2 parameters and assigns them to properties
  constructor(private prop1: string, public prop2: number) {}

  // A private property that can only be accessed within the class
  private prop3: boolean = true;

  // A public property that can be accessed outside the class
  public prop4: T[];

  // A static property that can be accessed without creating an instance of the class
  static staticProp: string = 'Example';

  // A method that takes in a parameter of type T and returns a T[]
  public genericMethod(arg: T): T[] {
    return [arg];
  }

  // A private method that returns a string
  private privateMethod(): string {
    return `Private method called. prop3 value is ${this.prop3}`;
  }

  // A public method that returns a string
  public publicMethod(): string {
    // Accessing the private method and using its return value
    let privateMethodOutput = this.privateMethod();
    return `Public method called. ${privateMethodOutput}`;
  }
}

// Creating an instance of the class and passing in values for the constructor parameters
const example = new ExampleClass<string>('Hello', 5);

// Accessing the public property and method
console.log(example.prop2); // Output: 5
console.log(example.publicMethod()); // Output: Public method called. Private method called. prop3 value is true

// Accessing the static property without creating an instance of the class
console.log(ExampleClass.staticProp); // Output: Example

// Using the generic method with a string as the argument type
console.log(example.genericMethod('World')); // Output: ['World']