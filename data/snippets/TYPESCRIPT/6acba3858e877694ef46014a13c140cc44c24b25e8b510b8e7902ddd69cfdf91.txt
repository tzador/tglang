// Define a generic class
class Pair<T, U> {
    // Define private properties
    private first: T;
    private second: U;

    // Define a constructor that takes in two arguments, one of type T and one of type U
    constructor(first: T, second: U) {
        this.first = first;
        this.second = second;
    }

    // Define a method that returns the first property
    getFirst(): T {
        return this.first;
    }

    // Define a method that returns the second property
    getSecond(): U {
        return this.second;
    }

    // Define a method that takes in a generic type V and returns a Pair object with the same first property and the new second property
    map<V>(fn: (u: U) => V): Pair<T, V> {
        return new Pair(this.first, fn(this.second));
    }
}

// Create an instance of the Pair class with the types number and string
const pair = new Pair<number, string>(1, 'a');

// Call the getFirst method
console.log(pair.getFirst()); // Output: 1

// Use the map method to transform the second property from a string to a boolean and create a new Pair object
const newPair = pair.map((s: string) => s === 'a');

// Call the getSecond method on the newPair object
console.log(newPair.getSecond()); // Output: true