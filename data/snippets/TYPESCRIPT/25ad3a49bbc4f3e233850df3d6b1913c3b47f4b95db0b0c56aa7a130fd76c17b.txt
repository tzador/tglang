/**
 * This is a generic class that takes in a type parameter T, which extends the interface IEmployee.
 * It has a constructor that takes in an array of objects of type T as a parameter, and sets it to the class property 'employees'.
 * It also has getters and setters for this class property, and a method 'filterEmployees'
 * that takes in a function as a parameter to filter the employees based on certain conditions.
 */
class EmployeeList<T extends IEmployee> {
  private employees: T[];

  constructor(employees: T[]) {
    this.employees = employees;
  }

  getEmployees(): T[] {
    return this.employees;
  }

  setEmployees(employees: T[]): void {
    this.employees = employees;
  }

  /**
   * This method takes in a filter function as a parameter and returns an array of employees that pass the filtering condition.
   * The filter function takes in an employee of type T and returns a boolean value.
   * @param filterFn The filter function to be used for filtering employees.
   * @returns An array of employees that pass the filtering condition.
   */
  filterEmployees(filterFn: (employee: T) => boolean): T[] {
    return this.employees.filter(filterFn);
  }
}

/**
 * This interface defines the properties and methods that an employee must have.
 */
interface IEmployee {
  employeeID: number;
  firstName: string;
  lastName: string;
  department: string;
  position: string;
  salary: number;
}

/**
 * This is a class that implements the interface IEmployee.
 * It has a constructor that takes in the employeeID, firstName, lastName, department, position, and salary as parameters.
 * It also has getters and setters for these properties.
 */
class Employee implements IEmployee {
  private _employeeID: number;
  private _firstName: string;
  private _lastName: string;
  private _department: string;
  private _position: string;
  private _salary: number;

  constructor(employeeID: number, firstName: string, lastName: string, department: string, position: string, salary: number) {
    this._employeeID = employeeID;
    this._firstName = firstName;
    this._lastName = lastName;
    this._department = department;
    this._position = position;
    this._salary = salary;
  }

  get employeeID(): number {
    return this._employeeID;
  }

  set employeeID(id: number) {
    this._employeeID = id;
  }

  get firstName(): string {
    return this._firstName;
  }

  set firstName(name: string) {
    this._firstName = name;
  }

  get lastName(): string {
    return this._lastName;
  }

  set lastName(name: string) {
    this._lastName = name;
  }

  get department(): string {
    return this._department;
  }

  set department(dept: string) {
    this._department = dept;
  }

  get position(): string {
    return this._position;
  }

  set position(pos: string) {
    this._position = pos;
  }

  get salary(): number {
    return this._salary;
  }

  set salary(sal: number) {
    this._salary = sal;
  }
}

/**
 * This is an array of employees of type Employee.
 */
const employeeList: Employee[] = [
  new Employee(1, 'John', 'Doe', 'Marketing', 'Manager', 70000),
  new Employee(2, 'Jane', 'Smith', 'Sales', 'Associate', 50000),
  new Employee(3, 'Bob', 'Johnson', 'IT', 'Developer', 80000),
  new Employee(4, 'Alice', 'Williams', 'Finance', 'Analyst', 75000)
];

// Create an instance of the EmployeeList class with the employeeList array as a parameter.
const employees = new EmployeeList(employeeList);

// Filter employees based on a salary threshold of 60000.
const filteredEmployees = employees.filterEmployees((employee) => employee.salary > 60000);

// Output the filtered employees to the console.
console.log(filteredEmployees); // Output: [Employee {employeeID: 1, firstName: 'John', lastName: 'Doe', department: 'Marketing', position: 'Manager', salary: 70000}, Employee {employeeID: 1, firstName: 'Bob', lastName: 'Johnson', department: 'IT', position: 'Developer', salary: 80000}]