// Defining a generic class
class Stack<T> {
    private list: T[] = [];

    // Push an element to the top of the stack
    push = (item: T): void => {
        this.list.push(item);
    };

    // Remove and return the top element from the stack
    pop = (): T => {
        if (this.list.length > 0) {
            return this.list.pop();
        }

        throw new Error('Stack is empty');
    };

    // Return the top element in the stack
    peek = (): T => {
        return this.list[this.list.length - 1];
    };

    // Check if the stack is empty
    isEmpty = (): boolean => {
        return this.list.length === 0;
    }
}

// Creating a new instance of the Stack class with string type
const stringStack: Stack<string> = new Stack<string>();

// Pushing elements to the stack
stringStack.push('apple');
stringStack.push('banana');
stringStack.push('orange');

// Popping an element from the stack
console.log(stringStack.pop()); //output: orange

// Checking if the stack is empty
console.log(stringStack.isEmpty()); // output: false

// Creating a new instance of the Stack class with number type
const numberStack: Stack<number> = new Stack<number>();

// Pushing elements to the stack
numberStack.push(1);
numberStack.push(2);
numberStack.push(3);

// Popping an element from the stack
console.log(numberStack.pop()); // output: 3

// Peeking at the top element in the stack
console.log(numberStack.peek()); // output: 2
 
// Checking if the stack is empty
console.log(numberStack.isEmpty()); // output: false