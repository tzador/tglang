const numArr: Array<number> = [1, 2, 3, 4, 5]; // annotated variable declaration
const strArr: string[] = ["hello", "world"]; // shorthand variable declaration

function doubleArr(arr: number[]): number[] {
  return arr.map((num) => num * 2); // arrow function using map method
}

let doubledNumArr: number[] = doubleArr(numArr); // calling function and assigning result to variable
console.log(doubledNumArr); // print statement using console.log method

interface Person {
  name: string;
  age: number;
  greet: () => void; // annotated method declaration with void return type
}

class Student implements Person {
  name: string;
  age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  greet() {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`); // string interpolation in method
  }
}

let student: Person = new Student("John", 20); // creating new instance of Student class
student.greet(); // calling greet method

enum Color {
  RED = "red",
  BLUE = "blue",
  GREEN = "green",
} // enum declaration

let chosenColor: string = Color.RED; // assigning enum value to variable

const numTuple: [number, number] = [10, 20]; // annotated tuple declaration
const [firstNum, secondNum] = numTuple; // destructuring tuple

console.log(`The sum of ${firstNum} and ${secondNum} is ${firstNum + secondNum}.`); // string interpolation and arithmetic operation