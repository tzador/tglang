/*
This code snippet shows a simple implementation of a binary search algorithm in TypeScript.

First, we define a function named 'binarySearch' that takes in two parameters: an array of numbers called 'arr' and the target number we want to find called 'target'. The function returns the index of the target number in the array, or -1 if it is not found.

Next, we declare two variables, 'left' and 'right', which represent the left and right boundaries of the array that we will be searching within.

Then, we enter a while loop that will continue running as long as 'left' is less than or equal to 'right'. Inside the loop, we calculate the mid point using the formula (left + right) / 2. We then check if the target number is equal to the number at the mid point index in the array. If it is, we simply return the mid point index.

If the target number is less than the number at the mid point index, we update the 'right' variable to be one less than the mid point index. This will narrow down the search space to the left half of the array.

If the target number is greater than the number at the mid point index, we update the 'left' variable to be one more than the mid point index. This will narrow down the search space to the right half of the array.

If none of the above conditions are met, the target number is not present in the array and we return -1.

*/

const binarySearch = (arr: number[], target: number): number => {
  let left = 0;
  let right = arr.length - 1;

  while (left <= right) {
    let mid = Math.floor((left + right) / 2);

    if (target === arr[mid]) {
      return mid;
    } else if (target < arr[mid]) {
      right = mid - 1;
    } else {
      left = mid + 1;
    }
  }

  return -1;
};