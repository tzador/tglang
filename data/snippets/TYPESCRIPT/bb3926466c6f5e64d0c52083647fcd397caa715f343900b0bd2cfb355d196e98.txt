// Function declaration with return type annotation
function sum(num1: number, num2: number): number {
    return num1 + num2;
}

// Custom type declaration
type Person = {
    name: string,
    age: number,
    gender: string
}

// Class with constructor and generic type annotation
class Animal<T> {
    species: T;
    constructor(species: T) {
        this.species = species;
    }
}

// Array with type annotation
let animals: Animal<string>[] = [new Animal('dog'), new Animal('cat'), new Animal('bird')];

// Interface with optional property and function annotation
interface Car {
    brand: string,
    model: string,
    year?: number,
    getFullInfo: (year: number) => string
}

// Object with type annotation
let car: Car = {
    brand: 'Honda',
    model: 'Civic',
    getFullInfo: (year) => `This is a ${year} ${car.brand} ${car.model}.`
};

// Enum with string and numeric values
enum Fruit {
    Apple = 'apple',
    Banana = 'banana',
    Orange = 2
}

// Union type with type guard
function printFruitInfo(fruit: string | Fruit) {
    if(typeof fruit === 'string') {
        console.log(`This is a ${fruit}.`);
    } else {
        console.log(`This is a ${Fruit[fruit]}.`)
    }
}

// calling functions
console.log(sum(2, 3));
console.log(animals);
console.log(car.getFullInfo(2021));
printFruitInfo(Fruit.Banana);