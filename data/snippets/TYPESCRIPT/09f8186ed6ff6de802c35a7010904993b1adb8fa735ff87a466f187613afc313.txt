/**
* A class representing a person.
*/
class Person {
    private name: string;
    private age: number;
    
    /**
    * Constructor for the Person class.
    * @param name - The person's name.
    * @param age - The person's age.
    */
    constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
    }
    
    /**
    * Gets the person's name.
    * @returns - The person's name.
    */
    getName(): string {
        return this.name;
    }
    
    /**
    * Sets the person's name.
    * @param name - The new name for the person.
    */
    setName(name: string): void {
        this.name = name;
    }
    
    /**
    * Gets the person's age.
    * @returns - The person's age.
    */
    getAge(): number {
        return this.age;
    }
    
    /**
    * Sets the person's age.
    * @param age - The new age for the person.
    */
    setAge(age: number): void {
        this.age = age;
    }
    
    /**
    * Prints out the person's details.
    * @returns - The formatted string of the person's name and age.
    */
    printDetails(): string {
        return `${this.name} is ${this.age} years old.`;
    }
}

/**
* A class representing a student, inherits from Person class.
*/
class Student extends Person {
    private major: string;
    
    /**
    * Constructor for the Student class.
    * @param name - The student's name.
    * @param age - The student's age.
    * @param major - The student's major.
    */
    constructor(name: string, age: number, major: string) {
        super(name, age); // calls the constructor of the Person class
        this.major = major;
    }
    
    /**
    * Gets the student's major.
    * @returns - The student's major.
    */
    getMajor(): string {
        return this.major;
    }
    
    /**
    * Sets the student's major.
    * @param major - The new major for the student.
    */
    setMajor(major: string): void {
        this.major = major;
    }
    
    /**
    * Prints out the student's details.
    * @returns - The formatted string of the student's name, age, and major.
    */
    printDetails(): string {
        return `${super.getName()} is ${super.getAge()} years old and is majoring in ${this.major}.`;
    }
}

// creating instances of Person and Student classes
let person1 = new Person("John", 25);
let student1 = new Student("Jane", 20, "Computer Science");

// calling methods of Person and Student classes
console.log(person1.printDetails()); // output: John is 25 years old.
console.log(student1.printDetails()); // output: Jane is 20 years old and is majoring in Computer Science.

// changing properties of Person and Student classes
person1.setName("Jake");
student1.setAge(22);
student1.setMajor("Mathematics");

// calling methods again to see changes
console.log(person1.printDetails()); // output: Jake is 25 years old.
console.log(student1.printDetails()); // output: Jane is 22 years old and is majoring in Mathematics.