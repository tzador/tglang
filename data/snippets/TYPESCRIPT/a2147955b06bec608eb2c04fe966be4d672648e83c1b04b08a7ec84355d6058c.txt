// Defining a generic class with multiple type parameters
class DataStore<T, V> {
  private data: T[] = [];  // private property to hold data of type T

  // Constructor that takes in an initial value for data
  constructor(initialValue: T) {
    this.data.push(initialValue); // push the initial value to the data array
  }

  // Generic method that sets the value of data
  setData(value: T) {
    this.data = [value]; // Sets the data array to contain only the new value
  }

  // Generic method that returns the current data
  getData(): T[] {
    return this.data;
  }

  // Generic method that adds a new value to the data array
  addData(value: V) {
    this.data.push(value); // Pushes the new value to the data array
  }
}

// Creating a new instance of the DataStore class with string and number type parameters
const stringDataStore = new DataStore<string, number>("Hello World!");

// Setting new data values
stringDataStore.setData("Hello TypeScript");
stringDataStore.addData(123);

// Getting the current data
const currentData = stringDataStore.getData();
console.log(currentData); // Output: ["Hello TypeScript", 123]