//Example of a complex Typescript function

// Generic type annotation for the function
function mapArray<T>(arr: T[], func: (element: T) => T): T[] {

	// Variable for storing the mapped array
	let mappedArray: T[] = [];

	// Looping through the array and applying the function
	for (let i = 0; i < arr.length; i++) {

		// Applying the function on each element
		let mappedElement: T = func(arr[i]);

		// Pushing the result into the mapped array
		mappedArray.push(mappedElement);
	}

	// Returning the mapped array
	return mappedArray;
}

// Example usage
let numbers = [1, 2, 3, 4, 5];

// Mapping the array using an arrow function
let squaredNumbers = mapArray(numbers, (x) => x * x);

// Output: [1, 4, 9, 16, 25]