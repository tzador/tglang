// Create a generic class named 'Queue'
class Queue<T> { 
  private data: T[] = []; // creates an empty array

  // add a new element to the queue
  enqueue(item: T): void { 
    this.data.push(item); // add the item to the end of the queue
  }

  // remove and return the first element in the queue
  dequeue(): T | undefined { 
    if (this.data.length > 0) {
      return this.data.shift(); // remove the first item in the queue and return it
    }
    return undefined; // return undefined if queue is empty
  }

  // get the first element in the queue without removing it
  peek(): T | undefined { 
    if (this.data.length > 0) {
      return this.data[0]; // return the first item in the queue
    } 
    return undefined; // return undefined if queue is empty
  }

  // check if the queue is empty
  isEmpty(): boolean { 
    return this.data.length === 0; // return true if queue is empty, false otherwise
  }

  // get the size of the queue
  size(): number { 
    return this.data.length; // return the length of the queue
  }
}

// create a new queue
const myQueue = new Queue<number>();

// add elements to the queue
myQueue.enqueue(5);
myQueue.enqueue(10);
myQueue.enqueue(15);

// remove and print the first element in the queue
console.log(myQueue.dequeue()); // Output: 5

// print the first element in the queue without removing it
console.log(myQueue.peek()); // Output: 10

// check if the queue is empty
console.log(myQueue.isEmpty()); // Output: false

// get the size of the queue
console.log(myQueue.size()); // Output: 2