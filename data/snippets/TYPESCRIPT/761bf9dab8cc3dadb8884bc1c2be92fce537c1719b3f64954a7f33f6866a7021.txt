// Define a generic class that can accept any type
class LinkedList<T> {
  private head: LinkedListNode<T> | null; // Define a private property to store the head of the linked list
  private tail: LinkedListNode<T> | null; // Define a private property to store the tail of the linked list
  private length: number; // Define a private property to store the length of the linked list

  // Constructor to initialize the linked list with optional initial value
  constructor(initialValue?: T) {
    this.head = null; // Set the head to null
    this.tail = null; // Set the tail to null
    this.length = 0; // Set the initial length to 0

    // If an initial value is provided, add it as the first element of the linked list
    if (initialValue) {
      this.addFirst(initialValue);
    }
  }

  // Method to add a new node at the beginning of the linked list
  addFirst(value: T): void {
    const newNode = new LinkedListNode(value); // Create a new linked list node with the provided value
    newNode.next = this.head; // Set the next property of the new node to the current head
    this.head = newNode; // Set the new node as the new head of the linked list

    // If the linked list is empty, set the tail to be the new node as well
    if (!this.tail) {
      this.tail = newNode;
    }

    this.length++; // Increment the length of the linked list
  }

  // Method to add a new node at the end of the linked list
  addLast(value: T): void {
    const newNode = new LinkedListNode(value); // Create a new linked list node with the provided value

    // If the linked list is empty, set the new node as both the head and the tail
    if (!this.head) {
      this.head = newNode;
      this.tail = newNode;
    } else {
      this.tail.next = newNode; // Set the next property of the current tail to the new node
      this.tail = newNode; // Set the new node as the new tail
    }

    this.length++; // Increment the length of the linked list
  }

  // Method to remove the first node of the linked list
  removeFirst(): T | null {
    // If the linked list is empty, return null
    if (!this.head) {
      return null;
    }

    const removedValue = this.head.value; // Store the value of the current head
    this.head = this.head.next; // Set the next node as the new head

    // If the removed node was also the tail, set the tail to null as well
    if (removedValue === this.tail?.value) {
      this.tail = null;
    }

    this.length--; // Decrement the length of the linked list
    return removedValue; // Return the removed value
  }

  // Method to remove the last node of the linked list
  removeLast(): T | null {
    // If the linked list is empty, return null
    if (!this.head) {
      return null;
    }

    let removedValue;
    // If there is only one node in the linked list, remove it and set the head and tail to null
    if (this.length === 1) {
      removedValue = this.head.value; // Store the value of the current head
      this.head = null;
      this.tail = null;
    } else {
      // If there are multiple nodes, traverse the linked list to find the second to last node
      let currentNode = this.head;
      while (currentNode.next?.next) {
        currentNode = currentNode.next;
      }
      removedValue = currentNode.next?.value; // Store the value of the second to last node
      currentNode.next = null; // Set its next property to null
      this.tail = currentNode; // Set the second to last node as the new tail
    }

    this.length--; // Decrement the length of the linked list
    return removedValue; // Return the removed value
  }

  // Method to traverse the linked list and perform a callback function on each node's value
  traverse(callback: (value: T, index: number) => void): void {
    let currentNode = this.head; // Start at the head of the linked list
    let index = 0; // Initialize the index to 0
    while (currentNode) {
      callback(currentNode.value, index); // Perform the callback function on the value of the current node
      currentNode = currentNode.next; // Move to the next node
      index++; // Increment the index
    }
  }
}

// Define a generic class for the linked list nodes
class LinkedListNode<T> {
  value: T; // Define a public property to store the value of the node
  next: LinkedListNode<T> | null; // Define a public property to store a reference to the next node, or null if it is the tail

  // Constructor to initialize a node with a value and optional next node
  constructor(value: T, next?: LinkedListNode<T>) {
    this.value = value; // Set the node's value
    if (next) {
      this.next = next; // If a next node is provided, set it as the next property
    } else {
      this.next = null; // Otherwise, set the next property to null
    }
  }
}

// Example usage
const linkedList = new LinkedList<number>(1); // Create a new linked list with initial value of 1
linkedList.addLast(2); // Add a new node with value of 2 to the end of the linked list
linkedList.addLast(3); // Add a new node with value of 3 to the end of the linked list
linkedList.addFirst(0); // Add a new node with value of 0 to the beginning of the linked list
linkedList.removeFirst(); // Remove the first node with value of 0
linkedList.removeLast(); // Remove the last node with value of 3
linkedList.traverse((value, index) => { // Traverse the linked list and log each node's value and index
  console.log(`Index: ${index} | Value: ${value}`);
});
console.log(`Length: ${linkedList.length}`); // Output: Length: 2