// Generic class with two generic types
class CustomMap<K, V> {
    private map: { [key: K]: V } = {};

    // Function to add key-value pair to map
    add(key: K, value: V): void {
        this.map[key] = value;
    }

    // Function to retrieve value from map using key
    get(key: K): V | undefined {
        return this.map[key];
    }

    // Function to retrieve all key-value pairs as an array of tuples
    getAll(): [K, V][] {
        return Object.entries(this.map);
    }

    // Function to remove key-value pair from map using key
    remove(key: K): void {
        delete this.map[key];
    }
}

// Instantiate CustomMap with string keys and number values
const numberMap = new CustomMap<string, number>();
numberMap.add('one', 1);
numberMap.add('two', 2);
numberMap.add('three', 3);

// Retrieve value using key
console.log(numberMap.get('two')); // Output: 2

// Get all key-value pairs as an array of tuples
console.log(numberMap.getAll()); // Output: [['one', 1], ['two', 2], ['three', 3]]

// Remove key-value pair using key
numberMap.remove('two');
console.log(numberMap.getAll()); // Output: [['one', 1], ['three', 3]]