/**
 * Represents a generic class
 * @template T
 */
class GenericClass<T> {
    private item: T;
    /**
     * Constructor that takes in an item of type T
     * @param item The item to be stored in the class
     */
    constructor(item: T) {
        this.item = item;
    }
    /**
     * Returns the stored item of type T
     * @returns The item stored in the class
     */
    getItem(): T {
        return this.item;
    }
    /**
     * Generic function that takes in an array of type T
     * @param array The array of type T
     * @returns The first item in the array
     */
    getFirstItem<T>(array: T[]): T {
        return array[0];
    }
}

// Create an instance of the GenericClass with a string type
const stringClass = new GenericClass<string>('Hello');
// Get the stored string and print it
console.log(stringClass.getItem()); // Output: Hello

// Create an instance of the GenericClass with an array of numbers
const numbersClass = new GenericClass<number[]>([1, 2, 3, 4]);
// Get the stored array of numbers and print the first item
console.log(numbersClass.getFirstItem(numbersClass.getItem())); // Output: 1