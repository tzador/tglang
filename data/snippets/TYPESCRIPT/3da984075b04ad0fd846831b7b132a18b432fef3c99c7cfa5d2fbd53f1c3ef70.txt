// Define a function with two parameters, a generic type 'T' and a function type 'U'
// The function returns a promise that resolves to a tuple of type 'T' and 'U'
function getData<T, U extends (value: T) => U>(param1: T, func: U): Promise<[T, U]> {
  // Define a new promise that takes in a 'resolve' function as a parameter
  return new Promise<[T, U]>((resolve) => {
    // Call the 'func' function and assign its return value to a variable 'result'
    const result = func(param1);
    // Call the 'resolve' function, passing in a tuple of 'param1' and 'result'
    resolve([param1, result]);
  });
}

// Create a class 'Person' with properties 'name' and 'age'
class Person {
  name: string;
  age: number;
  // Define a constructor that takes in 'name' and 'age' as parameters and assigns them to the properties
  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }
  // Define a method 'introduce' that returns a string with the person's name and age
  introduce() {
    return `Hi, my name is ${this.name} and I am ${this.age} years old.`;
  }
}

// Create an instance of the 'Person' class and assign it to a variable 'person'
const person = new Person("John", 30);

// Create a function 'addOne' that takes in a number and adds 1 to it
function addOne(num: number): number {
  return num + 1;
}

// Call the 'getData' function with 'person' as the first parameter and 'addOne' as the second parameter
// The function returns a promise that resolves to a tuple of type 'Person' and '(num: number) => number'
getData(person, addOne).then(([person, func]) => {
  // Print out the returned tuple, using the 'introduce' method on the 'person' object
  console.log(person.introduce(), func(5));
  // Output: Hi, my name is John and I am 30 years old. 6
});