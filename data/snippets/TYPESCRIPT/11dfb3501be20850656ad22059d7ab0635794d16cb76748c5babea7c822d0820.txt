// Define a class named "Vehicle" with a constructor that takes in parameters for "make", "model", "year"
class Vehicle {
    make: string; // Create a property for "make" with type string
    model: string; // Create a property for "model" with type string
    year: number; // Create a property for "year" with type number
    constructor(make: string, model: string, year: number) {
        this.make = make; // Initialize the "make" property with the passed in parameter
        this.model = model; // Initialize the "model" property with the passed in parameter
        this.year = year; // Initialize the "year" property with the passed in parameter
    }
    // Create a method "displayDetails" that prints out the vehicle's properties
    displayDetails(): void {
        console.log(`Make: ${this.make}\nModel: ${this.model}\nYear: ${this.year}`);
    }
}

// Define a subclass of "Vehicle" named "Car" with a constructor that takes in parameters for "make", "model", "year", and "numDoors"
class Car extends Vehicle {
    numDoors: number; // Create a property for "numDoors" with type number
    constructor(make: string, model: string, year: number, numDoors: number) {
        // Call the parent class's constructor with the "make", "model", and "year" parameters
        super(make, model, year);
        this.numDoors = numDoors; // Initialize the "numDoors" property with the passed in parameter
    }
    // Override the "displayDetails" method to include the "numDoors" property
    displayDetails(): void {
        console.log(`Make: ${this.make}\nModel: ${this.model}\nYear: ${this.year}\nNumber of Doors: ${this.numDoors}`);
    }
}

// Create a new instance of "Car" with the make "Toyota", model "Camry", year 2020, and 4 doors
let myCar = new Car("Toyota", "Camry", 2020, 4);
// Call the "displayDetails" method to print out the car's properties
myCar.displayDetails();

// Output:
// Make: Toyota
// Model: Camry
// Year: 2020
// Number of Doors: 4