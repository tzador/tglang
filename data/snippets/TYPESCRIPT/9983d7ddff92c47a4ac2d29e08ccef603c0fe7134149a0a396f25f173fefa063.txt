interface Player {
   name: string; //Declares the name property of type string
   age: number; //Declares the age property of type number
   score?: number; //Declares the optional score property of type number
}

class TennisMatch {
   private player1: Player; //Declares private property player 1 of type Player
   private player2: Player; //Declares private property player 2 of type Player
   constructor(player1: Player, player2: Player) { //Declares constructor with two parameters of type Player
       this.player1 = player1; //Assigns player 1 value to property
       this.player2 = player2; //Assigns player 2 value to property
   }

   play() { //Declares play method
       if (Math.random() > 0.5) { //Generates random number and compares to 0.5
           this.player1.score++; //Increments player 1's score if random number is greater than 0.5
       } else {
           this.player2.score++; //Increments player 2's score if random number is less than or equal to 0.5
       }
   }

   getWinner(): Player { //Declares getWinner method that returns type Player
       if (this.player1.score > this.player2.score) { //Compares player scores
           return this.player1; //Returns player 1 if their score is higher
       } else {
           return this.player2; //Returns player 2 if their score is higher or equal
       }
   }
}

const player1: Player = { //Declares constant of type Player with predefined values
   name: "Michael",
   age: 32,
   score: 0
};

const player2: Player = {
   name: "Rachel",
   age: 29,
   score: 0
};

const match = new TennisMatch(player1, player2); //Creates new instance of TennisMatch class with player1 and player2 as arguments

match.play(); //Calls play method on the match instance
match.play();
match.play();
match.play(); //Plays 4 rounds

const winner = match.getWinner(); //Calls getWinner method on the match instance and assigns return value to constant winner

console.log(`${winner.name} wins with a score of ${winner.score}`); //Prints winner's name and score to the console using template literals (ES6 feature)