/**
 * A class representing a car.
 * @property {string} make - The make of the car.
 * @property {string} model - The model of the car.
 * @property {number} year - The year of the car.
 * @property {string} color - The color of the car.
 * @property {number} mileage - The mileage of the car in kilometers.
 * @property {boolean} isElectric - Whether the car is electric or not.
 */
class Car {
    make: string;
    model: string;
    year: number;
    color: string;
    mileage: number;
    isElectric: boolean;

    /**
     * Creates a new instance of the Car class.
     * @param {string} make - The make of the car.
     * @param {string} model - The model of the car.
     * @param {number} year - The year of the car.
     * @param {string} color - The color of the car.
     * @param {number} mileage - The mileage of the car in kilometers.
     * @param {boolean} isElectric - Whether the car is electric or not.
     */
    constructor(make: string, model: string, year: number, color: string, mileage: number, isElectric: boolean) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.color = color;
        this.mileage = mileage;
        this.isElectric = isElectric;
    }

    /**
     * Returns the full description of the car.
     * @returns {string} The full description of the car.
     */
    getDescription() {
        return `${this.year} ${this.make} ${this.model}, ${this.color}, ${this.mileage}km, ${this.isElectric ? "electric" : "gasoline"}`;
    }

    /**
     * Calculates the estimated selling price of the car based on its mileage and whether it is electric or gasoline.
     * @returns {number} The estimated selling price of the car.
     */
    calculateSellingPrice() {
        let sellingPrice = 20000;

        // Increase the selling price by 1000 for every 10000km of mileage
        sellingPrice += this.mileage / 10000 * 1000;

        // Increase the selling price by 10000 if the car is electric
        if (this.isElectric) {
            sellingPrice += 10000;
        }

        // Decrease the selling price by 1000 for every year of age
        let currentYear = new Date().getFullYear();
        sellingPrice -= (currentYear - this.year) * 1000;

        return sellingPrice;
    }
}

let myCar = new Car("Toyota", "Corolla", 2019, "red", 50000, false);

console.log(myCar.getDescription());

console.log(myCar.calculateSellingPrice());