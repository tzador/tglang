import { Observable } from 'rxjs';
import { map, catchError } from 'rxjs/operators';

// Create an Observable of numbers
const numbers = new Observable((observer) => {
  // Write each number to the stream
  observer.next(1);
  observer.next(2);
  observer.next(3);
});

// Map each number to their respective powers and catch any errors
const powers = numbers.pipe(
  map((item: number) => {
    // Check if number is valid
    if (item > 0) {
      // Calculate the power of the number
      return Math.pow(item, 2);
    } else {
      // Throw error if number is invalid
      throw new Error('Number must be greater than 0');
    }
  }),
  catchError((error: Error) => {
    // Handle any errors thrown
    console.log(error.message);
    // Return default value if error occurs
    return 0;
  })
);

// Subscribe to the powers Observable and print the values
powers.subscribe({
  next(x: number) {
    // Print the powers
    console.log(x);
  },
  error(error) {
    // Handle any errors thrown
    console.error(error);
  },
  complete() {
    // This block is executed when Observable completes
    console.log('Completed');
  }
})