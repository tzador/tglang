// A class that represents a person
class Person {
    private name: string; // private property for name
    private age: number; // private property for age

    // Constructor that sets the name and age of the person
    constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
    }

    // Getter method for the person's name
    get personName() {
        return this.name;
    }

    // Method that greets the person
    greet() {
        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
    }
}

// Subclass of Person, representing a student
class Student extends Person {
    private year: number; // private property for current year of study

    // Constructor that sets the name, age and current year of study
    constructor(name: string, age: number, year: number) {
        super(name, age); // Call the parent class constructor
        this.year = year;
    }

    // Override the greet method from parent class
    greet() {
        super.greet(); // Call the greet method from parent class
        console.log(`I am currently in year ${this.year} of study.`);
    }

    // Getter method for current year of study
    get studyYear() {
        return this.year;
    }
}

// Create a new instance of Person
const person = new Person("John", 25);
console.log(person.personName); // Output: John
person.greet(); // Output: Hello, my name is John and I am 25 years old.

// Create a new instance of Student
const student = new Student("Jane", 20, 3);
console.log(student.personName); // Output: Jane
console.log(student.studyYear); // Output: 3
student.greet(); // Output: Hello, my name is Jane and I am 20 years old. I am currently in year 3 of study.