// Implementing a linked list in TypeScript

// Node class for creating individual nodes
class Node<T> {
  data: T; // data stored in node
  next: Node<T> | null; // pointer to next node, null if last node

  // constructor to initialize node with data and null pointer
  constructor(data: T) {
    this.data = data;
    this.next = null;
  }
}

// Linked list class for implementing linked list functionality
class LinkedList<T> {
  head: Node<T> | null; // pointer to first node, null if list is empty
  size: number; // number of nodes currently in the list

  // constructor to initialize linked list with empty head and size of 0
  constructor() {
    this.head = null;
    this.size = 0;
  }

  // function to add node to the end of the list
  add(data: T): void {
    // create new node with given data
    const newNode: Node<T> = new Node(data);

    // if list is empty, make new node the head
    if (!this.head) {
      this.head = newNode;
    } else {
      // traverse to last node and add new node as next node
      let current: Node<T> = this.head;
      while (current.next) {
        current = current.next;
      }
      current.next = newNode;
    }

    // increment the size of the list
    this.size++;
  }

  // function to insert node at a specific index
  insert(data: T, index: number): void {
    // checking for valid index
    if (index > 0 && index <= this.size) {
      // create new node with given data
      const newNode: Node<T> = new Node(data);

      // if index is 1, make new node the head
      if (index === 1) {
        newNode.next = this.head;
        this.head = newNode;
      } else {
        // traverse to node at index - 1
        let current: Node<T> = this.head;
        let previous: Node<T> | null = null;
        let count: number = 1;
        while (count < index) {
          previous = current;
          current = current.next;
          count++;
        }

        // insert new node at correct position
        newNode.next = current;
        previous.next = newNode;
      }
      
      // increment the size of the list
      this.size++;
    } else {
      // if index is invalid, throw an error
      throw new Error("Invalid index!");
    }
  }

  // function to remove node at a specific index
  remove(index: number): void {
    // checking for valid index
    if (index > 0 && index <= this.size) {
      // if index is 1, make second node the new head
      if (index === 1) {
        this.head = this.head?.next || null;
      } else {
        // traverse to node at index - 1
        let current: Node<T> = this.head;
        let previous: Node<T> | null = null;
        let count: number = 1;
        while (count < index) {
          previous = current;
          current = current.next;
          count++;
        }

        // remove node from list
        previous.next = current.next;
      }

      // decrement the size of the list
      this.size--;
    } else {
      // if index is invalid, throw an error
      throw new Error("Invalid index!");
    }
  }
}

// creating a new linked list with number data type
const list: LinkedList<number> = new LinkedList();

// adding nodes to the list
list.add(5);
list.add(10);
list.add(15);

// inserting node at index 2
list.insert(7, 2);

// removing node at index 2
list.remove(2);