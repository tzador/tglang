// Define a class with generic type
class Stack<T> {
  private data: T[]; // private property to store stack elements

  constructor() {
    this.data = []; // initialize empty stack
  }

  // push element to stack
  push(item: T): void {
    this.data.push(item); // add element to end of stack
  }

  // pop element from stack
  pop(): T | undefined {
    return this.data.pop(); // remove and return last element of stack
  }

  // peek at top element without removing it
  peek(): T | undefined {
    return this.data[this.data.length - 1]; // return last element of stack
  }

  // check if stack is empty
  isEmpty(): boolean {
    return this.data.length === 0; // return true if stack is empty
  }

  // clear all elements from stack
  clear(): void {
    this.data = []; // reassign data as empty array
  }
}

// create new instance of stack with string type
const stringStack = new Stack<string>();

// push string values to stack
stringStack.push("Hello");
stringStack.push("World");

// pop top element from stack
const poppedString = stringStack.pop();

// create new instance of stack with number type
const numberStack = new Stack<number>();

// push number values to stack
numberStack.push(1);
numberStack.push(2);
numberStack.push(3);

// pop top element from stack
const poppedNumber = stringStack.pop();