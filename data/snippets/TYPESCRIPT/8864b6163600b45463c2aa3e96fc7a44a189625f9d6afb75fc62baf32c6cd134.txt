// Create an array of numbers
const numbers: number[] = [1, 2, 3, 4, 5];

// Create an interface for a person object
interface Person {
  name: string;
  age: number;
  occupation: string;
}

// Declare a function that takes in a string and returns a number
function convertToNumber(str: string): number {
  return Number(str);
}

// Create a class for a car object
class Car {
  brand: string;
  year: number;
  color: string;

  constructor(brand: string, year: number, color: string) {
    this.brand: brand;
    this.year: year;
    this.color: color;
  }

  // Create a method to display details of the car
  displayDetails() {
    console.log(`This car is a ${this.color} ${this.brand} made in ${this.year}.`);
  }
}

// Instantiate an instance of the Car class
const myCar = new Car("Tesla", 2020, "red");

// Create a generic class that can hold any data type
class MyGenericClass<T> {
  myGenericProperty: T;

  // Create a method that takes in a parameter of type T
  myGenericMethod(param: T) {
    console.log(`The value of my generic property is ${this.myGenericProperty}. The value of the parameter is ${param}.`);
  }
}

// Instantiate an instance of the generic class with string as the data type
const myStringGenericClass = new MyGenericClass<string>();

// Set the generic property to a string value
myStringGenericClass.myGenericProperty = "Hello world!";

// Call the method with a string parameter
myStringGenericClass.myGenericMethod("Goodbye!");