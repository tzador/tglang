/**
 * This is a generic class that represents a pair of values,
 * with the types of the two elements specified by the generic type parameters.
 */
class Pair<T, U> {
  private first: T;
  private second: U;

  /**
   * Constructor for the Pair class
   * @param first The first element of the pair
   * @param second The second element of the pair
   */
  constructor(first: T, second: U) {
    this.first = first;
    this.second = second;
  }

  /**
   * Getter for the first element of the pair
   * @returns The first element of the pair
   */
  public getFirst(): T {
    return this.first;
  }

  /**
   * Getter for the second element of the pair
   * @returns The second element of the pair
   */
  public getSecond(): U {
    return this.second;
  }

  /**
   * Setter for the first element of the pair
   * @param value The new value for the first element
   */
  public setFirst(value: T) {
    this.first = value;
  }

  /**
   * Setter for the second element of the pair
   * @param value The new value for the second element
   */
  public setSecond(value: U) {
    this.second = value;
  }

  /**
   * Maps a function to the pair and returns a new pair with the values transformed
   * @param fn The mapping function
   * @returns A new pair with the transformed values
   */
  public map<V, W>(fn: (first: T, second: U) => [V, W]) {
    const [newFirst, newSecond] = fn(this.first, this.second);
    return new Pair<V, W>(newFirst, newSecond);
  }

  /**
   * Checks if both elements of the pair are equal
   * @returns True if both elements are equal, false otherwise
   */
  public equals(): boolean {
    return this.first === this.second;
  }
}