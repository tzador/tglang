// Create a generic class that can accept any data type
class GenericClass<T> {
  private data: T; // Private property of type T

  constructor(input: T) {
    this.data = input;
  }

  // A generic method that can accept any data type and return a new object with reversed data
  public reverse<U>(input: U): { reversedData: U } {
    const reversedData: U = this.data.reverse();
    return { reversedData };
  }

  // A generic method that can accept multiple data types and return a concatenated string
  public concatenate<K, J>(input1: K, input2: J): string {
    return `${input1}${input2}`;
  }
}

// Create an instance of the generic class using a number as the input
const numberClass = new GenericClass<number>(1234);

// Call the reverse method using a string as the input
numberClass.reverse<string>('hello');

// Create another instance of the generic class using an array as the input
const arrayClass = new GenericClass<string[]>(['apple', 'banana', 'orange']);

// Call the concatenate method using a number and a boolean as the inputs
arrayClass.concatenate<number, boolean>(5, true);