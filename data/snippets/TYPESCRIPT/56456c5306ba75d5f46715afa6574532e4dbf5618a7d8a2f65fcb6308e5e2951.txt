class BinaryTree {
    root: Node | null; // variable to hold the root node of the binary tree
    
    constructor(value: number) {
        this.root = new Node(value); // instantiate the root node
    }
    
    // method to insert a new value into the binary tree
    insert(value: number): void {
        const newNode = new Node(value); // create a new node with the given value
        let currentNode = this.root; // start at the root node
        
        // loop until a proper position for the new node is found
        while (true) {
            if (value < currentNode.value) {
                // if the value is less than the current node's value, move to the left subtree
                if (currentNode.left) {
                    currentNode = currentNode.left; // move to the left child node
                } else {
                    // if the left child node does not exist, insert the new node as the left child
                    currentNode.left = newNode;
                    break;
                }
            } else {
                // if the value is greater than or equal to the current node's value, move to the right subtree
                if (currentNode.right) {
                    currentNode = currentNode.right; // move to the right child node
                } else {
                    // if the right child node does not exist, insert the new node as the right child
                    currentNode.right = newNode;
                    break;
                }
            }
        }
    }
    
    // method to check if a given value exists in the binary tree
    contains(value: number): boolean {
        let currentNode = this.root; // start at the root node
        
        while (currentNode) {
            if (value === currentNode.value) {
                // if the value is equal to the current node's value, return true
                return true;
            } else if (value < currentNode.value) {
                // if the value is less than the current node's value, move to the left subtree
                currentNode = currentNode.left;
            } else {
                // if the value is greater than the current node's value, move to the right subtree
                currentNode = currentNode.right;
            }
        }
        
        // if the value is not found, return false
        return false;
    }
}

// class to represent a single node in the binary tree
class Node {
    value: number; // value stored in the node
    left: Node | null; // left child node
    right: Node | null; // right child node
    
    constructor(value: number) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

// code to create a binary tree and insert some values
const binaryTree = new BinaryTree(10);
binaryTree.insert(5);
binaryTree.insert(15);
binaryTree.insert(3);
binaryTree.insert(7);

// code to check if a value exists in the binary tree
console.log(binaryTree.contains(7)); // outputs: true
console.log(binaryTree.contains(20)); // outputs: false