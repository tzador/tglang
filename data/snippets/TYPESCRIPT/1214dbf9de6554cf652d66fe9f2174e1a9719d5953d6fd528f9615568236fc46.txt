interface Person {
  // This is an interface for a person object
  name: string; // The name of the person, must be a string
  age: number; // The person's age, must be a number
  hobbies?: string[]; // Optional property for the person's hobbies, must be an array of strings
  sayHello: () => void; // A function that will print a greeting message
  sayAge?: (year: number) => string; // Optional function that will return the person's age in a given year
}

class Speaker implements Person {
  // This is a class that implements the Person interface
  constructor(
    public name: string, // Public property which is set in the constructor
    private age: number, // Private property that is only accessible within the class
    public hobbies: string[] = ["reading", "writing"], // Default value for the hobbies property
  ) {}

  sayHello(): void {
    // Implementation of the sayHello function
    console.log(`Hello, my name is ${this.name}`);
  }

  sayAge(year: number): string {
    // Implementation of the sayAge function
    return `In ${year}, ${this.name} will be ${this.age + (year - new Date().getFullYear())} years old`;
  }
}

const speaker = new Speaker("John", 28); // Creating a new instance of the Speaker class
speaker.sayHello(); // Output: Hello, my name is John
console.log(speaker.sayAge(2040)); // Output: In 2040, John will be 49 years old