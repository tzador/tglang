// Create a custom interface that extends the default props interface.
// The interface contains a function property and uses the 'any' type for the parameter and return value.
interface CustomProps extends React.Props<any> {
  handleCustomFunc: (arg: any) => any;
}

// Create a class component that takes in the custom props interface.
// The component has a state object with two properties of type 'string' and 'boolean'.
class CustomComponent extends React.Component<CustomProps> {
  state = {
    name: 'John',
    isVerified: false
  };

  // Create a custom function that changes the state properties when called.
  // The function takes in a parameter of type 'string' and updates the 'name' property.
  // It also changes the value of 'isVerified' to 'true'.
  handleNameChange = (newName: string) => {
    this.setState({
      name: newName,
      isVerified: true
    });
  };

  // Override the render method to display the state properties and a button that calls the custom function on click.
  render() {
    return (
      <div>
        <p>Name: {this.state.name}</p>
        <p>Is Verified: {this.state.isVerified.toString()}</p>
        <button onClick={() => this.props.handleCustomFunc("Updated Name")}>
          Call Custom Function
        </button>
      </div>
    );
  }
}

// Render the custom component and pass in a custom function as a prop.
// The function takes in a parameter of type 'string' and logs it to the console.
ReactDOM.render(
  <CustomComponent
    handleCustomFunc={(arg) => console.log(arg)}
  />,
  document.getElementById('root')
)