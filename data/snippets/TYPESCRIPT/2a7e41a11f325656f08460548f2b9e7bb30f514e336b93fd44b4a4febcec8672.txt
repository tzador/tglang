interface Animal { //defining an interface
  name: string; //property of type string
  age: number; //property of type number
  breed: string; //property of type string
  readonly popularity: number; //read-only property of type number
  speak: () => void; //method with no parameters and void return type
}

abstract class House extends Building { //defining an abstract class
  constructor(public address: string, private color: string) { //defining constructor with public and private properties
    super(); //calling parent class constructor
  }

  abstract addRoom(room: string): void; //abstract method with void return type

  getHouseInfo(): string { //defining method with string return type
    return `This is a ${this.color} house at ${this.address}.`; //template literal
  }
}

class Dog implements Animal { //defining class that implements Animal interface
  constructor(public name: string, public age: number, public breed: string, readonly popularity: number) { //defining constructor with public and readonly properties
    this.name = name;
    this.age = age;
    this.breed = breed;
    this.popularity = popularity;
  }

  speak(): void { //implementing speak method from Animal interface
    console.log("Woof!"); //printing to console
  }
}