// This is a  code snippet that implements an AVL tree data structure

class AVLTree {
    
    // AVLNode represents a single node in the AVL tree
    
    class AVLNode {
        key: number;  // holds the value of the node
        left: AVLNode | null;  // points to the left child node
        right: AVLNode | null;  // points to the right child node
        height: number;  // holds the height of the node
        
        // constructor for creating a new node with a specific key value
        constructor(key: number) {
            this.key = key;
            this.left = null;
            this.right = null;
            this.height = 1;
        }
    }
    
    // root represents the root node of the AVL tree
    private root: AVLNode | null;
    
    // constructor for creating an empty AVL tree
    constructor() {
        this.root = null;
    }
    
    // insert function inserts a new key into the AVL tree and balances it
    insert(key: number) {
        this.root = this.insertNode(this.root, key);
    }
    
    // insertNode function inserts a new node into the AVL tree and balances it
    insertNode(node: AVLNode | null, key: number) {
        
        // if the current node is null, create a new node and return it
        if (node === null) {
            return new AVLNode(key);
        }
        
        // if the key is smaller than the root key, insert it into the left subtree
        if (key < node.key) {
            node.left = this.insertNode(node.left, key);
        }
        
        // if the key is larger than the root key, insert it into the right subtree
        else if (key > node.key) {
            node.right = this.insertNode(node.right, key);
        }
        
        // update the height of the current node
        node.height = Math.max(this.getHeight(node.left), this.getHeight(node.right)) + 1;
        
        // check if the current node is balanced
        const balance = this.getBalance(node);

        // if the node is unbalanced, rotate it to balance it
        if (balance > 1 && key < node.left!.key) {
            return this.rotateRight(node);
        }
        
        else if (balance < -1 && key > node.right!.key) {
            return this.rotateLeft(node);
        }
        
        else if (balance > 1 && key > node.left!.key) {
            node.left = this.rotateLeft(node.left!);
            return this.rotateRight(node);
        }
        
        else if (balance < -1 && key < node.right!.key) {
            node.right = this.rotateRight(node.right!);
            return this.rotateLeft(node);
        }
        
        // return the node
        return node;
    }
    
    // remove function removes a key from the AVL tree and balances it
    remove(key: number) {
        this.root = this.removeNode(this.root, key);
    }
    
    // removeNode function removes a node from the AVL tree and balances it
    removeNode(node: AVLNode | null, key: number) {
        
        // if the current node is null, return null
        if (node === null) {
            return null;
        }
        
        // if the key is smaller than the root node, remove it from the left subtree
        if (key < node.key) {
            node.left = this.removeNode(node.left, key);
        }
        
        // if the key is larger than the root node, remove it from the right subtree
        else if (key > node.key) {
            node.right = this.removeNode(node.right, key);
        }
        
        // if the key is equal to the root node, remove it
        else {
            // if the node has no child or only one child
            if (node.left === null || node.right === null) {
                // store the child node
                const child = node.left ? node.left : node.right;
                
                // if there are no children, set the node to null
                if (child === null) {
                    node = null;
                }
                
                // if there is a child, replace the node with the child
                else {
                    node = child;
                }
            }
            
            // if the node has two children
            else {
                // find the successor node (smallest value in the right subtree)
                const successor = this.getSuccessor(node.right);
                
                // set the node's key to the successor's key
                node.key = successor.key;
                
                // remove the successor node from the right subtree
                node.right = this.removeNode(node.right, successor.key);
            }
        }
        
        // if the node is null, return it
        if (node === null) {
            return node;
        }
        
        // update the height of the current node
        node.height = Math.max(this.getHeight(node.left), this.getHeight(node.right)) + 1;
        
        // check if the node is unbalanced
        const balance = this.getBalance(node);

        // if the node is unbalanced, rotate it to balance it
        if (balance > 1 && this.getBalance(node.left!) >= 0) {
            return this.rotateRight(node);
        }
        
        else if (balance > 1 && this.getBalance(node.left!) < 0) {
            node.left = this.rotateLeft(node.left!);
            return this.rotateRight(node);
        }
        
        else if (balance < -1 && this.getBalance(node.right!) <= 0) {
            return this.rotateLeft(node);
        }
        
        else if (balance < -1 && this.getBalance(node.right!) > 0) {
            node.right = this.rotateRight(node.right!);
            return this.rotateLeft(node);
        }
        
        // return the node
        return node;
    }
    
    // getBalance function returns the balance factor of a node
    getBalance(node: AVLNode | null) {
        // if the node is null, return 0
        if (node === null) {
            return 0;
        }
        
        // return the height of the left subtree minus the height of the right subtree
        return this.getHeight(node.left) - this.getHeight(node.right);
    }
    
    // getHeight function returns the height of a node
    getHeight(node: AVLNode | null) {
        // if the node is null, return 0
        if (node === null) {
            return 0;
        }
        
        // return the height of the node
        return node.height;
    }
    
    // rotateRight function performs a right rotation of a node in the AVL tree
    rotateRight(node: AVLNode) {
        // store the left child of the node
        const leftChild = node.left!;
        
        // perform the rotation
        node.left = leftChild.right;
        leftChild.right = node;
        
        // update the height of the rotated nodes
        node.height = Math.max(this.getHeight(node.left), this.getHeight(node.right)) + 1;
        leftChild.height = Math.max(this.getHeight(leftChild.left), this.getHeight(leftChild.right)) + 1;
        
        // return the new root node
        return leftChild;
    }
    
    // rotateLeft function performs a left rotation of a node in the AVL tree
    rotateLeft(node: AVLNode) {
        // store the right child of the node
        const rightChild = node.right!;
        
        // perform the rotation
        node.right = rightChild.left;
        rightChild.left = node;
        
        // update the height of the rotated nodes
        node.height = Math.max(this.getHeight(node.left), this.getHeight(node.right)) + 1;
        rightChild.height = Math.max(this.getHeight(rightChild.left), this.getHeight(rightChild.right)) + 1;
        
        // return the new root node
        return rightChild;
    }
    
    // getSuccessor function finds the successor node of a given node (smallest value in the right subtree)
    getSuccessor(node: AVLNode) {
        // iterate until the leftmost child is reached
        while (node.left !== null) {
            node = node.left;
        }
        
        // return the leftmost child (successor)
        return node;
    }
}