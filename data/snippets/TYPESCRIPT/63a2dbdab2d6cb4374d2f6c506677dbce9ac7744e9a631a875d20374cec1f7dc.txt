// Using type annotations and generics to define a function that returns a sorted array of specified type

function sortArray<T>(array: T[]): T[] {
  // First we create a copy of the original array using the spread operator
  const sortedArray: T[] = [...array];
  // Then we use the sort() function to sort the array in ascending order
  sortedArray.sort();
  // Finally, we return the sorted array
  return sortedArray;
}

// Example usage: sorting an array of numbers
const unsortedNumbers: number[] = [5, 2, 7, 1, 10];
const sortedNumbers: number[] = sortArray(unsortedNumbers);
// Output: [1, 2, 5, 7, 10]

// Example usage: sorting an array of strings
const unsortedStrings: string[] = ['apple', 'banana', 'cat', 'dog'];
const sortedStrings: string[] = sortArray(unsortedStrings);
// Output: ['apple', 'banana', 'cat', 'dog']

// This function can also handle arrays of complex objects, as long as those objects have a comparison function to determine their order

// Example usage: sorting an array of objects by their age property
interface Person {
  name: string;
  age: number;
}

const unsortedPeople: Person[] = [
  { name: 'John', age: 25 },
  { name: 'Jane', age: 30 },
  { name: 'Bob', age: 20 },
  { name: 'Alice', age: 35 }
];

// Define a comparison function that compares the age property of two Person objects
const comparePeopleByAge = (person1: Person, person2: Person) => {
  if (person1.age < person2.age) {
    return -1;
  } else if (person1.age > person2.age) {
    return 1;
  } else {
    return 0;
  }
}

// Sort the array using the comparison function
const sortedPeople: Person[] = sortArray(unsortedPeople, comparePeopleByAge);
// Output: [
//   { name: 'Bob', age: 20 },
//   { name: 'John', age: 25 },
//   { name: 'Jane', age: 30 },
//   { name: 'Alice', age: 35 }
// ]