// Defining a generic class called "LinkedList"

class LinkedList<T> {
  // defining private instance variables
  private head: Node<T> | null;
  private tail: Node<T> | null;
  private length: number;

  constructor() {
    // initializing the variables
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  // defining a public method "addToTail" to add a new node to the end of the linked list
  addToTail(value: T): void {
    // creating a new node with the given value
    const newNode = new Node<T>(value);
    // checking if the linked list is empty
    if (this.head === null) {
      // if empty, assign the new node as head and tail
      this.head = newNode;
      this.tail = newNode;
    } else {
      // if not empty, assign the new node as the next node of the tail
      this.tail!.next = newNode;
      // assign the new node as the new tail
      this.tail = newNode;
    }
    // increasing the length of the linked list
    this.length++;
  }

  // defining a public method "removeFromTail" to remove the last node from the linked list
  removeFromTail(): T | null {
    // checking if the linked list is empty
    if (this.head === null) {
      // if empty, return null
      return null;
    }
    // storing the current tail
    const currentTail = this.tail;
    // checking if the linked list has only one node
    if (this.head === this.tail) {
      // if only one node, set head and tail to null
      this.head = null;
      this.tail = null;
    } else {
      // if more than one node, find the previous node of the tail
      let currentNode = this.head;
      while (currentNode!.next !== this.tail) {
        currentNode = currentNode!.next;
      }
      // set the previous node as the new tail
      this.tail = currentNode;
      // set the next node of the new tail to null
      this.tail!.next = null;
    }
    // decreasing the length of the linked list
    this.length--;
    // returning the value of the removed node
    return currentTail?.value || null;
  }

  // defining a public method "print" to print the values of the linked list
  print(): void {
    // storing the current node as the head
    let currentNode = this.head;
    // creating an empty array to store the values of the linked list
    const values: T[] = [];
    // traversing through the linked list
    while (currentNode) {
      // pushing the value of the current node into the array
      values.push(currentNode.value);
      // assigning the next node as the current node
      currentNode = currentNode.next;
    }
    // printing the array of values
    console.log(values);
  }
}

// Defining a generic class called "Node"

class Node<T> {
  value: T;
  next: Node<T> | null;

  constructor(value: T) {
    this.value = value;
    this.next = null;
  }
}

// Creating a new instance of the "LinkedList" class
const myLinkedList = new LinkedList<number>();

// Adding new nodes to the linked list
myLinkedList.addToTail(5);
myLinkedList.addToTail(10);
myLinkedList.addToTail(15);

// Printing the values of the linked list
myLinkedList.print();

// Removing the last node from the linked list
myLinkedList.removeFromTail();

// Printing the values of the linked list again
myLinkedList.print();