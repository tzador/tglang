// This is a Typescript code snippet that shows the implementation of a custom data structure called "LinkedList".
// A LinkedList is a type of data structure that consists of a series of nodes, each containing a value and a reference to the next node.
// It is commonly used to efficiently store and manipulate large amounts of data.

// First, we define the structure of our node class.
class Node<T> {
    constructor(public value: T, public next: Node<T> | null = null) {}
}

// Next, we define our LinkedList class.
class LinkedList<T> {
    private head: Node<T> | null = null; // The head of the list, initially set to null.
    private tail: Node<T> | null = null; // The tail of the list, initially set to null.
    private size: number = 0; // The size of the list, initially set to 0.

    // A function to add a new node to the end of the list.
    add(value: T): void {
        const newNode = new Node(value); // Create a new node with the specified value.
        if (this.head === null) { // If the list is empty, set the head to be the new node.
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail!.next = newNode; // Otherwise, set the next of the current tail to be the new node.
            this.tail = newNode; // Update the tail to be the new node.
        }
        this.size++; // Increment the size of the list.
    }

    // A function to insert a new node at a specified index.
    insert(index: number, value: T): void {
        if (index < 0 || index > this.size) { // Check for valid index.
            throw new Error('Index out of bounds.');
        }
        if (index === this.size) { // If inserting at the end, just call the add function.
            this.add(value);
            return;
        }
        const newNode = new Node(value); // Create a new node with the specified value.
        if (index === 0) { // If inserting at the beginning, update the head to be the new node.
            newNode.next = this.head;
            this.head = newNode;
        } else { // Otherwise, find the node at the specified index and insert the new node after it.
            let curr = this.head;
            for (let i = 0; i < index - 1; i++) {
                curr = curr!.next;
            }
            newNode.next = curr!.next;
            curr!.next = newNode;
        }
        this.size++; // Increment the size of the list.
    }

    // A function to remove a node at a specified index.
    remove(index: number): T {
        if (index < 0 || index >= this.size) { // Check for valid index.
            throw new Error('Index out of bounds.');
        }
        let removedValue: T;
        if (index === 0) { // If removing the head, update the head to be the next node.
            removedValue = this.head!.value;
            this.head = this.head!.next;
        } else if (index === this.size - 1) { // If removing the tail, update the tail to be the previous node.
            removedValue = this.tail!.value;
            let curr = this.head;
            for (let i = 0; i < index - 1; i++) {
                curr = curr!.next;
            }
            curr!.next = null;
            this.tail = curr;
        } else { // Otherwise, find the node at the specified index and remove it by updating its previous node's next.
            let curr = this.head;
            for (let i = 0; i < index - 1; i++) {
                curr = curr!.next;
            }
            removedValue = curr!.next!.value;
            curr!.next = curr!.next!.next;
        }
        this.size--; // Decrement the size of the list.
        return removedValue;
    }

    // A function to get the value at a specified index.
    get(index: number): T {
        if (index < 0 || index >= this.size) { // Check for valid index.
            throw new Error('Index out of bounds.');
        }
        let curr = this.head;
        for (let i = 0; i < index; i++) { // Loop through the list until we reach the specified index.
            curr = curr!.next;
        }
        return curr!.value; // Return the value of the node at the specified index.
    }

    // A function to check if the list contains a specified value.
    contains(value: T): boolean {
        let curr = this.head;
        while (curr !== null) { // Loop through the list until we reach the end.
            if (curr.value === value) { // If we find a node with the specified value, return true.
                return true;
            }
            curr = curr.next;
        }
        return false; // Otherwise, return false.
    }

    // A function to get the size of the list.
    getSize(): number {
        return this.size;
    }

    // A function to print all the values in the list.
    printValues(): void {
        let curr = this.head;
        while (curr !== null) { // Loop through the list until we reach the end.
            console.log(curr.value); // Output the value of the current node.
            curr = curr.next;
        }
    }
}

// Example usage:
const list = new LinkedList<number>(); // Create an instance of a LinkedList with type "number".
list.add(5); // Add the number 5 to the list.
list.add(10); // Add the number 10 to the list.
list.insert(1, 7); // Insert the number 7 at index 1.
list.remove(2); // Remove the number at index 2.
console.log(list.contains(10)); // Check if the list contains the number 10.
list.printValues(); // Print all the values in the list.