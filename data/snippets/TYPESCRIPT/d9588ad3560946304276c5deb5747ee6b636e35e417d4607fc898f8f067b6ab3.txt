// Declare interface for a car
interface Car {
  make: string;
  model: string;
  year: number;
  color: string;
  engine: {
    horsepower: number;
    fuelType: string;
    cylinders: number;
  };
  safetyFeatures: string[];
  topSpeed: number | null;
  getFullModel: (make: string, model: string) => string; // Method for getting full model name of car
}

// Create a class for a car
class SportsCar implements Car {
  // Implement the Car interface
  make: string;
  model: string;
  year: number;
  color: string;
  engine: {
    horsepower: number;
    fuelType: string;
    cylinders: number;
  };
  safetyFeatures: string[];
  topSpeed: number | null;

  constructor(make: string, model: string, year: number, color: string, engine: {horsepower: number, fuelType: string, cylinders: number}, safetyFeatures: string[], topSpeed: number | null) {
    this.make = make;
    this.model = model;
    this.year = year;
    this.color = color;
    this.engine = engine;
    this.safetyFeatures = safetyFeatures;
    this.topSpeed = topSpeed;
  }

  // Implement the getFullModel method
  getFullModel(make: string, model: string) {
    return `${this.make} ${this.model}`;
  }
}

// Create an instance of the SportsCar class
const mySportsCar = new SportsCar("Ferrari", "488 GTB", 2021, "Red", {horsepower: 661, fuelType: "Gasoline", cylinders: 8}, ["Airbags", "Anti-lock Brakes", "Backup Camera"], 210);

// Access properties and methods of the SportsCar instance
console.log(mySportsCar.make); // Output: Ferrari
console.log(mySportsCar.engine.horsepower); // Output: 661
console.log(mySportsCar.getFullModel()); // Output: Ferrari 488 GTB

// Update the top speed property of the instance
mySportsCar.topSpeed = 220;

// Add a new safety feature to the instance
mySportsCar.safetyFeatures.push("Blind Spot Monitoring");

// Check updated properties and array
console.log(mySportsCar.topSpeed); // Output: 220
console.log(mySportsCar.safetyFeatures); // Output: ["Airbags", "Anti-lock Brakes", "Backup Camera", "Blind Spot Monitoring"]