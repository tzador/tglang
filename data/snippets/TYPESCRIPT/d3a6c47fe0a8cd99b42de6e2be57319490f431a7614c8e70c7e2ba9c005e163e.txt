/**
 * Represents a user in the system.
 */
class User {
  // Private properties cannot be accessed outside the class.
  private name: string;
  private age: number;

  /**
   * Creates a new User instance with the given name and age.
   * @param {string} name The name of the user.
   * @param {number} age The age of the user.
   */
  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  /**
   * Returns the user's name.
   * @return {string} The user's name.
   */
  getName(): string {
    return this.name;
  }

  /**
   * Sets the user's name.
   * @param {string} name The user's new name.
   */
  setName(name: string): void {
    this.name = name;
  }

  /**
   * Returns the user's age.
   * @return {number} The user's age.
   */
  getAge(): number {
    return this.age;
  }

  /**
   * Sets the user's age.
   * @param {number} age The user's new age.
   */
  setAge(age: number): void {
    this.age = age;
  }
  
  /**
   * Prints a greeting with the user's name and age.
   */
  sayHello(): void {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
  }
}

// Creates a new instance of User with name "John" and age 25.
const user = new User("John", 25);

// Gets the user's name and logs it.
const name = user.getName();
console.log(`Name: ${name}`); // Outputs "Name: John"

// Sets the user's name to "Jane" and logs the new name.
user.setName("Jane");
const newName = user.getName();
console.log(`New name: ${newName}`); // Outputs "New name: Jane"

// Gets the user's age and logs it.
const age = user.getAge();
console.log(`Age: ${age}`); // Outputs "Age: 25"

// Sets the user's age to 30 and logs the new age.
user.setAge(30);
const newAge = user.getAge();
console.log(`New age: ${newAge}`); // Outputs "New age: 30"

// Prints a greeting with the user's updated information.
user.sayHello(); // Outputs "Hello, my name is Jane and I am 30 years old."