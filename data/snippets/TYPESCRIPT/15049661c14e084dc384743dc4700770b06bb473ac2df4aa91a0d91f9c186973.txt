// Defining a generic class
class Container<T> {
    // Private variable to store the contents of the container
    private contents: Array<T>;

    // Constructor to initialize the container with an array of given type
    constructor(items: Array<T>) {
        this.contents = items;
    }

    // Method to add a new item to the container
    add(item: T) {
        this.contents.push(item);
    }

    // Method to remove an item from the container
    remove(item: T) {
        this.contents = this.contents.filter(currItem => currItem !== item);
    }

    // Method to get the size of the container
    size() {
        return this.contents.length;
    }

    // Method to check if the container is empty
    isEmpty() {
        return this.contents.length === 0;
    }
}

// Creating a new instance of Container with the type 'string'
const stringContainer = new Container<string>(["hello", "world"]);

// Adding a new string to the container
stringContainer.add("goodbye");

// Removing a string from the container
stringContainer.remove("hello");

// Printing the size of the container
console.log(stringContainer.size());

// Checking if the container is empty
console.log(stringContainer.isEmpty());

// Output:
// 2
// false