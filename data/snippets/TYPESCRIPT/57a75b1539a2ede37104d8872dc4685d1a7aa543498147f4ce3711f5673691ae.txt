// This code snippet shows an example of a complex function in TypeScript

// TypeScript function that returns the sum of two numbers
function sum(num1: number, num2: number): number {
    return num1 + num2;
}

// An array of numbers
let nums: number[] = [1, 2, 3, 4, 5];

// TypeScript function that multiplies each element in the array by 2
function multiply(arr: number[]): number[] {
    // map method iterates through the array and executes the given function on each element
    return arr.map(num => num * 2);
}

// TypeScript function that finds the average of a given array of numbers
function average(arr: number[]): number {
    // Using destructuring to assign the first element of the array to a variable
    let [firstNum] = arr;
    let len = arr.length;
    // Using the spread operator to sum all the numbers in the array
    let sum = arr.reduce((total, num) => total + num);
    // Using the Math.floor() method to round down the average
    return Math.floor(sum / len);
}

// Output of the sum function
sum(5, 10); // Returns 15

// Output of the multiply function
multiply(nums) // Returns [2, 4, 6, 8, 10]

// Output of the average function
average(nums) // Returns 3