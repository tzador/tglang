// An example of a complex TypeScript code snippet

// Define a custom interface called "Person"
interface Person {
  firstName: string;
  lastName: string;
  age: number;
}

// Define a class called "Employee" that implements the "Person" interface
class Employee implements Person {
  firstName: string;
  lastName: string;
  age: number;
  role: string;

  // Constructor function for Employee class, with role as a parameter
  constructor(role: string) {
    this.role = role;
  }

  // Method to get the full name of the employee
  getFullName() {
    return `${this.firstName} ${this.lastName}`;
  }

  // Method to get the employee's role
  getRole() {
    return this.role;
  }

  // Static method to create a new employee from an existing Person interface object
  static createEmployeeFromPerson(person: Person, role: string) {
    // Create a new instance of Employee class and pass in the role
    const employee = new Employee(role);
    // Assign the properties from the Person object to the Employee object
    employee.firstName = person.firstName;
    employee.lastName = person.lastName;
    employee.age = person.age;
    // Return the new employee object
    return employee;
  }
}

// Create an instance of Employee class with a role of "Manager"
const manager = new Employee("Manager");

// Create a Person object with dummy data
const person: Person = {
  firstName: "John",
  lastName: "Doe",
  age: 30,
}

// Create a new employee using the static method and pass in the Person object and role
const employee = Employee.createEmployeeFromPerson(person, "Developer");

// Log the employee's full name and role
console.log(employee.getFullName()); // Output: John Doe
console.log(employee.getRole()); // Output: Developer