type ConvertOptions = {
  precision?: number, // optional parameter to specify precision of conversion
  roundToNearest?: number, // optional parameter to specify rounding behavior
  isExact?: boolean, // optional parameter to indicate whether exact conversion is needed
  isSigned?: boolean // optional parameter to indicate whether input is a signed number
}

/**
 * Converts a given number into a binary representation
 * @param num the number to be converted
 * @param options optional parameters for conversion
 * @returns the binary representation of the given number
 */
function toBinary(num: number, options: ConvertOptions = {}): string {
  const { precision = 8, roundToNearest, isExact = false, isSigned = false } = options;

  let binary = '';
  let remainder = Math.abs(num);
  let isNegative = false;

  // check if number is negative and update remainder accordingly
  if (num < 0) {
    remainder = 2 ** precision - remainder;
    isNegative = true;
  }

  // perform conversion
  while (remainder > 0) {
    const digit = remainder % 2;
    binary = digit + binary;
    remainder = Math.floor(remainder / 2);
  }

  // add leading zeros if needed
  while (binary.length < precision) {
    binary = '0' + binary;
  }

  // round to nearest multiple if specified
  if (roundToNearest) {
    binary = String(Math.round(parseInt(binary, 2) / roundToNearest) * roundToNearest);
  }

  // add negative sign if needed
  if (isNegative) {
    binary = '-' + binary;
  }

  // return exact or nearest binary representation
  return isExact ? binary : parseInt(binary, 2).toString();
}

// example usage
const binary = toBinary(-17, { precision: 12, roundToNearest: 5 });
console.log(binary); // output: -20 (exact representation) or -10100 (nearest multiple of 5)