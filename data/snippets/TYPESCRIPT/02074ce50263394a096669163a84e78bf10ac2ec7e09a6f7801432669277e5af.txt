/** This is a class that represents a person */
class Person {
  private firstName: string; // the person's first name
  private lastName: string; // the person's last name
  private age: number; // the person's age

  /**
   * Constructor for creating a new Person
   * @param firstName - the first name of the person
   * @param lastName - the last name of the person
   * @param age - the age of the person
   */
  constructor(firstName: string, lastName: string, age: number) {
    this.firstName = firstName; // sets the first name of the person
    this.lastName = lastName; // sets the last name of the person
    this.age = age; // sets the age of the person
  }

  /**
   * Function that returns the full name of the person
   * @returns the person's full name
   */
  getFullName(): string {
    return `${this.firstName} ${this.lastName}`; // combines the first and last name and returns as a string
  }

  /**
   * Function that returns the person's age in a specified unit
   * @param unit - the unit in which to return the person's age
   * @returns the person's age in the specified unit
   */
  getAge(unit: string): number {
    switch (unit) { // checks the specified unit
      case "years": // if the unit is years, return the age as is
        return this.age;
      case "months": // if the unit is months, convert the age to months and return
        return this.age * 12;
      default: // if the unit is not recognized, throw an error
        throw new Error("Invalid unit!");
    }
  }

  /**
   * Function that sets the person's age
   * @param newAge - the new age to set
   */
  setAge(newAge: number): void {
    this.age = newAge; // sets the age to the new age
  }
}

// Example usage:
const person = new Person("John", "Smith", 25); // creates a new person instance
console.log(person.getFullName()); // logs "John Smith"
console.log(person.getAge("months")); // logs 300 (25 * 12)
person.setAge(30); // sets the person's age to 30
console.log(person.getAge("years")); // logs 30