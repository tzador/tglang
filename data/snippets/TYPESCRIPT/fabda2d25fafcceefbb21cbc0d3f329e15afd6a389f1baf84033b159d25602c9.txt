// Declare a class named "Person" with a constructor that takes in two parameters: "name" of type string and "age" of type number
class Person {
  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }
  // Create a private variable "name" of type string
  private name: string;
  // Create a public variable "age" of type number
  public age: number;
  // Create an interface named "Job" with two properties: "company" of type string and "position" of type string
  interface Job {
    company: string;
    position: string;
  }
  // Create a public method "getInfo" with no parameters and a return type of string that returns the person's name and age
  public getInfo(): string {
    return `Name: ${this.name}, Age: ${this.age}`;
  }
  // Create a static method "getJobInfo" with one parameter "job" of type Job and a return type of string that returns the person's job company and position
  static getJobInfo(job: Job): string {
    return `Company: ${job.company}, Position: ${job.position}`;
  }
}

// Create a new instance of the Person class with a name of "John" and an age of 25
let john = new Person("John", 25);
// Call the "getInfo" method on the john instance and log the result
console.log(john.getInfo());
// Create a new variable "myJob" of type Job with a company of "XYZ Corp" and a position of "Software Engineer"
let myJob: Job = { company: "XYZ Corp", position: "Software Engineer" };
// Call the "getJobInfo" static method on the Person class and pass in the "myJob" variable, then log the result
console.log(Person.getJobInfo(myJob));