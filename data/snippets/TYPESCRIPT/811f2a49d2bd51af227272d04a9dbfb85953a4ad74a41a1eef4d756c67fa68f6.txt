// This code snippet uses Typescript to create a complex function with interfaces and generics

// Interface for a person object that includes name and age properties
interface Person {
    name: string,
    age: number
}

// Function to create a person based on name and age inputs
function createPerson<T extends Person>(name: string, age: number): T {
    let person = {} as T;
    person.name = name;
    person.age = age;
    return person;
}

// Create a new person object using the createPerson function
let newPerson = createPerson<Person>("John", 25);

// Interface for a calculator object that includes a function to add two numbers
interface Calculator {
    add(a: number, b: number): number;
}

// Generic class with type parameter T that must extend the Calculator interface
class GenericCalculator<T extends Calculator> {
    // Property to store the calculator object
    private calculator: T;

    // Constructor that takes in a calculator object
    constructor(calculator: T) {
        this.calculator = calculator;
    }

    // Function to add two numbers using the calculator object
    addNumbers(x: number, y: number): number {
        return this.calculator.add(x, y);
    }
}

// Create a new GenericCalculator object with a calculator object that implements the Calculator interface
let myCalculator = new GenericCalculator<Calculator>({
    add: function(x, y) {
        return x + y;
    }
});

// Call the addNumbers function using the myCalculator object
let sum = myCalculator.addNumbers(2, 3);

// Output the result
console.log(sum); // 5