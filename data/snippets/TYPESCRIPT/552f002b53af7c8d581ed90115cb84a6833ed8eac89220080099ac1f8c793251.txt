let array1: number[] = [1, 2, 3]; //creates an array of type 'number' with initial values
let array2: Array<string> = ['Hello', 'World']; //creates an array of type 'string' with initial values
let tuple: [number, string] = [10, 'tuple']; //creates a tuple with a 'number' and 'string' value
let x: any = 'Hello World'; //creates a variable of type 'any' that can hold any type
let y: null = null; //creates a variable of type 'null' with value 'null'
let z: undefined = undefined; //creates a variable of type 'undefined' with value 'undefined'

interface User { //creates an interface named 'User'
  name: string; //defines a property 'name' with type 'string'
  age?: number; //defines an optional property 'age' with type 'number'
  [key: string]: any; //defines an index signature for dynamic properties with type 'any'
  greet: () => void; //defines a function property 'greet' with no return value
}

class Admin implements User { //creates a class named 'Admin' that implements the 'User' interface
  constructor(public name: string, public age?: number) { //defines constructor with properties from 'User' interface (name is always required)
  }
  greet(): void { //implements the 'greet' function from 'User' interface
    console.log(`Hello, my name is ${this.name}.`); //logs a greeting with the 'name' property
  }
  addPermission(level: string): void { //creates a function that adds a permission with type 'string'
    console.log(`${this.name} has been given ${level} access.`); //logs a confirmation message with 'name' and 'access level'
  }
}

const admin1 = new Admin('John', 30); //creates an instance of the 'Admin' class with name 'John' and age '30'
admin1.addPermission('Admin'); //calls the 'addPermission' function with the custom 'level' parameter
admin1.greet(); //calls the 'greet' function to log the greeting