interface Person {
  name: string; // property for name, must be a string
  age: number; // property for age, must be a number
  greet?: (msg: string) => void; // optional function property, takes in a string parameter and has a void return type
  hobbies: string[]; // property for hobbies, must be an array of strings
}

abstract class Animal {
  name: string; // property for name, must be a string
  age: number; // property for age, must be a number
  abstract sound: string; // abstract property for sound, must be a string

  // method to make animal make a sound
  makeSound() {
    console.log(`${this.name} makes a ${this.sound} sound.`);
  }
}

class Dog extends Animal {
  sound = "bark"; // implementation of abstract property, must match type from parent class

  // constructor that takes in name and age parameters
  constructor(name: string, age: number) {
    super(); // calls constructor of parent class
    this.name = name; // assigns name parameter to class property
    this.age = age; // assigns age parameter to class property
  }

  // implementation of optional greet function from interface
  greet(msg: string) {
    console.log(`${this.name} says ${msg}.`);
  }

  // method to make dog chase its tail
  chaseTail() {
    console.log(`${this.name} is chasing its tail!`);
  }
}

const person: Person = {
  name: "John",
  age: 25,
  hobbies: ["reading", "cooking", "hiking"],
};

const dog: Dog = new Dog("Max", 2);
dog.makeSound(); // output: Max makes a bark sound.
dog.greet("Hi"); // output: Max says Hi.
dog.chaseTail(); // output: Max is chasing its tail.
console.log(person.name); // output: John