/* This TypeScript code snippet creates an interface for a user with multiple properties and methods. */

// Definition of the 'User' interface
interface User {
    // Properties
    id: number;
    username: string;
    email: string;
    password: string;

    // Methods
    login(username: string, password: string): boolean;
    logout(): void;
    sendMessage(message: string): void;
}

/* Implementation of the 'User' interface for a regular user */
class RegularUser implements User {
    // Properties
    id: number;
    username: string;
    email: string;
    password: string;

    // Constructor
    constructor(id: number, username: string, email: string, password: string) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.password = password;
    }

    // Methods
    login(username: string, password: string): boolean {
        // Perform validation and authentication logic
        if (this.username === username && this.password === password) {
            console.log("Login successful!");
            return true;
        } else {
            console.log("Invalid username or password.");
            return false;
        }
    }

    logout(): void {
        // Perform logout logic
        console.log("Logging out...");
    }

    sendMessage(message: string): void {
        // Send message to user's email
        console.log(`Sending message '${message}' to ${this.email}...`);
    }
}

/* Implementation of the 'User' interface for an admin user */
class AdminUser implements User {
    // Properties
    id: number;
    username: string;
    email: string;
    password: string;
    accessLevel: string;

    // Constructor
    constructor(id: number, username: string, email: string, password: string, accessLevel: string) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.password = password;
        this.accessLevel = accessLevel;
    }

    // Methods
    login(username: string, password: string): boolean {
        // Perform validation and authentication logic
        if (this.username === username && this.password === password) {
            console.log("Login successful!");
            return true;
        } else {
            console.log("Invalid username or password.");
            return false;
        }
    }

    logout(): void {
        // Perform logout logic
        console.log("Logging out...");
    }

    sendMessage(message: string): void {
        // Send message to user's email
        console.log(`Sending message '${message}' to ${this.email}...`);
    }

    setAccessLevel(newAccessLevel: string): void {
        // Set new access level for admin user
        this.accessLevel = newAccessLevel;
        console.log(`Access level for ${this.username} updated to ${this.accessLevel}.`)
    }
}

// Create instances of RegularUser and AdminUser
const user1 = new RegularUser(1, "jsmith", "jsmith@example.com", "secretPassword");
const admin1 = new AdminUser(1, "admin1", "admin1@example.com", "adminPassword", "super user");

// Invoke methods on user and admin instances
user1.login("jsmith", "secretPassword"); // Output: "Login successful!"
admin1.sendMessage("Hello user"); // Output: "Sending message 'Hello user' to admin1@example.com..."
admin1.setAccessLevel("moderator"); // Output: "Access level for admin1 updated to moderator."