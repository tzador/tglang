//This is a function that takes in a string and returns a number
function strToNum(str: string): number {
  //Converts string to lowercase
  str = str.toLowerCase();
  //Checks if string is a number
  if (!isNaN(Number(str))) {
    //Converts string to number and returns it
    return Number(str);
  } else {
    //If string is not a number, throw an error
    throw new Error("Invalid string input");
  }
}

//Example usage of the function
const numFromStr = strToNum("12345"); //output: 12345
console.log(numFromStr);

const numFromStr2 = strToNum("abcde"); //throws error
console.log(numFromStr2);

//Interface for a Person object
interface Person {
  name: string;
  age: number;
  gender: string;
  //Optional property for hobbies
  hobbies?: string[];
}

//Function that takes in a Person object and prints out their information
function printPersonInfo(person: Person) {
  console.log(`Name: ${person.name}`);
  console.log(`Age: ${person.age}`);
  console.log(`Gender: ${person.gender}`);
  //Checks if the person has any hobbies
  if (person.hobbies) {
    console.log(`Hobbies: ${person.hobbies.join(", ")}`);
  } else {
    console.log("No hobbies listed.");
  }
}

//Example usage of the function
const person: Person = {
  name: "John",
  age: 30,
  gender: "Male",
  hobbies: ["reading", "painting", "hiking"]
};

printPersonInfo(person);

/* Output:
Name: John
Age: 30
Gender: Male
Hobbies: reading, painting, hiking */

//Interface for a Shape object
interface Shape {
  //Function that calculates the area of the shape
  calculateArea(): number;
}

//Class for a Rectangle that implements the Shape interface
class Rectangle implements Shape {
  //Private properties for length and width
  private length: number;
  private width: number;
  //Constructor that takes in length and width
  constructor(length: number, width: number) {
    this.length = length;
    this.width = width;
  }
  //Function to calculate the area of the Rectangle
  calculateArea(): number {
    return this.length * this.width;
  }
}

//Class for a Circle that implements the Shape interface
class Circle implements Shape {
  //Private property for radius
  private radius: number;
  //Constructor that takes in radius
  constructor(radius: number) {
    this.radius = radius;
  }
  //Function to calculate the area of the Circle
  calculateArea(): number {
    return Math.PI * Math.pow(this.radius, 2);
  }
}

//Example usage of the Rectangle class
const rect = new Rectangle(5, 10);
console.log(`Area of rectangle: ${rect.calculateArea()}`); //output: 50

//Example usage of the Circle class
const circle = new Circle(10);
console.log(`Area of circle: ${circle.calculateArea()}`); //output: 314.1592653589793