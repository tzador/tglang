/**
* Generic class to represent a mathematical vector.
* @template T - The type of data stored in the vector.
*/
class Vector<T> {
  private vector: T[];

  /**
  * Constructs a new vector with the specified dimensions.
  * @param length - The length of the vector.
  */
  constructor(length: number) {
    this.vector = new Array<T>(length);
  }

  /**
  * Gets the value at the specified index in the vector.
  * @param index - The index to get the value from.
  * @returns The value at the specified index.
  */
  get(index: number): T {
    return this.vector[index];
  }

  /**
  * Sets the value at the specified index in the vector.
  * @param index - The index to set the value at.
  * @param value - The value to set.
  */
  set(index: number, value: T): void {
    this.vector[index] = value;
  }

  /**
  * Multiplies each element in the vector by the specified scalar value.
  * @param scalar - The scalar value to multiply by.
  */
  scale(scalar: number): void {
    for (let i = 0; i < this.vector.length; i++) {
      this.vector[i] *= scalar;
    }
  }

  /**
  * Calculates the length or magnitude of the vector.
  * @returns The length of the vector.
  */
  length(): number {
    let sum = 0;
    for (let i = 0; i < this.vector.length; i++) {
      sum += this.vector[i] * this.vector[i];
    }
    return Math.sqrt(sum);
  }

  /**
  * Adds another vector to this vector.
  * @param other - The vector to add.
  */
  add(other: Vector<T>): void {
    if (other.length() !== this.vector.length) {
      throw new Error('Vectors must be of the same length.');
    }
    for (let i = 0; i < this.vector.length; i++) {
      this.vector[i] += other.get(i);
    }
  }
}