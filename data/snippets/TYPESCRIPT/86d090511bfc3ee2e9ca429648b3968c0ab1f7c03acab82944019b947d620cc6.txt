/**
 * This class represents a user in the system.
 * @class User
 */
class User {
    private name: string; // private property that stores the user's name
    private email: string; // private property that stores the user's email
    private age?: number; // optional property that stores the user's age

    /**
     * Creates a new instance of User.
     * @param {string} name - The user's name.
     * @param {string} email - The user's email.
     * @param {number} [age] - The user's age. Optional.
     */
    constructor(name: string, email: string, age?: number) {
        this.name = name;
        this.email = email;
        this.age = age;
    }

    /**
     * Gets the user's name.
     * @returns {string} The user's name.
     */
    getName(): string {
        return this.name;
    }

    /**
     * Gets the user's email.
     * @returns {string} The user's email.
     */
    getEmail(): string {
        return this.email;
    }

    /**
     * Gets the user's age.
     * @returns {number | undefined} The user's age. Returns undefined if age is not set.
     */
    getAge(): number | undefined {
        return this.age;
    }

    /**
     * Sets the user's name.
     * @param {string} name - The new name for the user.
     */
    setName(name: string): void {
        this.name = name;
    }

    /**
     * Sets the user's email.
     * @param {string} email - The new email for the user.
     */
    setEmail(email: string): void {
        this.email = email;
    }

    /**
     * Sets the user's age.
     * @param {number} age - The new age for the user.
     */
    setAge(age: number): void {
        this.age = age;
    }
}
// Create new instance of User class
const user = new User('John', 'john@example.com', 25);

// Use getters and setters to access and update user's information
console.log(user.getName());
user.setAge(30);
console.log(user.getAge());