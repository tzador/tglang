// Create an interface for a Person
interface Person {
	name: string; // property for person's name
	age: number; // property for person's age
	location?: string; // optional property for person's location
	hobbies: string[]; // property for array of person's hobbies
	sayHello: (name: string) => void; // function property for person to say hello to someone
}

// Create a class called PersonClass implementing the Person interface
class PersonClass implements Person {
	name: string;
	age: number;
	hobbies: string[];

	constructor(name: string, age: number, hobbies: string[]) { // constructor to initialize properties
		this.name = name;
		this.age = age;
		this.hobbies = hobbies;
	}

	sayHello(name: string): void { // function implementation to say hello
		console.log(`Hello ${name}, my name is ${this.name} and I am ${this.age} years old.`);
	}

	addHobby(hobby: string): void { // method to add a new hobby to the hobbies array
		this.hobbies.push(hobby);
	}

	getLocation(): string { // method to get person's location
		if (this.location) {
			return this.location;
		} else {
			return "Unknown";
		}
	}
}

// Create a new instance of PersonClass
const newPerson = new PersonClass("John", 25, ["reading", "hiking"]);

// Call methods of the newPerson instance
console.log(newPerson.sayHello("Sarah")); // Output: Hello Sarah, my name is John and I am 25 years old.
newPerson.addHobby("painting"); // Add a new hobby to the person's hobbies array
console.log(newPerson.hobbies); // Output: ["reading", "hiking", "painting"]
console.log(newPerson.getLocation()); // Output: Unknown (since no location was specified)