interface Person {
    name: string,
    age: number,
    address: {
        street: string,
        city: string,
        state: string,
        country?: string,
    },
    hobbies?: string[],
    getBio: (age: number): string
}

class Employee implements Person {
    public name: string;
    public age: number;
    public salary: number;
    private address: {
        street: string,
        city: string,
        state: string,
        country?: string,
    };

    constructor(name: string, age: number, salary: number, address: {street: string, city: string, state: string, country?: string}){
        this.name = name;
        this.age = age;
        this.salary = salary;
        this.address = address;
    }

    getBio(age: number): string {
        return `My name is ${this.name} and I am ${age} years old. I live in ${this.address.city}, ${this.address.state} and I earn ${this.salary} per year.`;
    }
}

let Sarah: Person = {
    name: 'Sarah Smith',
    age: 32,
    address: {
        street: 'Main Street',
        city: 'New York',
        state: 'NY',
        country: 'USA'
    },
    hobbies: ['reading', 'hiking', 'painting'],
    getBio(age: number): string {
        return `My name is ${this.name} and I am ${age} years old. I live in ${this.address.city}, ${this.address.state}. My hobbies are ${this.hobbies.join(', ')}`;
    }
};

let employee1 = new Employee('John Doe', 28, 50000, {street: 'First Street', city: 'Los Angeles', state: 'CA'});
let employee2 = new Employee('Jane Smith', 40, 80000, {street: 'Second Street', city: 'San Francisco', state: 'CA', country: 'USA'});

console.log(employee1.getBio(28));
console.log(employee2.getBio(40));
console.log(Sarah.getBio(32));

/*
Output:

My name is John Doe and I am 28 years old. I live in Los Angeles, CA and I earn 50000 per year.
My name is Jane Smith and I am 40 years old. I live in San Francisco, CA and I earn 80000 per year.
My name is Sarah Smith and I am 32 years old. I live in New York, NY. My hobbies are reading, hiking, painting.
*/