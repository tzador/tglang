/**
 * Generic class definition for a Tree data structure
 */
class Tree<T> {
  private value: T;
  private children: Tree<T>[];

  constructor(value: T) {
    this.value = value;
    this.children = [];
  }

  /**
   * Add a child tree node to the current tree
   * @param child - the child tree node to be added
   */
  addChild(child: Tree<T>): void {
    this.children.push(child);
  }

  /**
   * Get the value of the current tree node
   * @returns the value of the current tree node
   */
  getValue(): T {
    return this.value;
  }

  /**
   * Get the children of the current tree node
   * @returns an array of the children tree nodes
   */
  getChildren(): Tree<T>[] {
    return this.children;
  }
}

/**
 * Example usage of the Tree class with string data type
 */
const tree = new Tree<string>('Root');
const childA = new Tree<string>('Child A');
tree.addChild(childA);
const childB = new Tree<string>('Child B');
tree.addChild(childB);
const childC = new Tree<string>('Child C');
childA.addChild(childC);

console.log(tree.getValue());
console.log(tree.getChildren());
console.log(childA.getValue());
console.log(childC.getChildren());