/**
 * This function performs a binary search on a sorted array
 * @param {number[]} arr - The sorted array to search 
 * @param {number} target - The target value to search for
 * @param {number} start - The starting index of the search 
 * @param {number} end - The ending index of the search 
 * @returns The index of the target value, or -1 if not found 
 */

function binarySearch(arr: number[], target: number, start: number, end: number): number {
    // initialize variables
    let mid = Math.floor((start + end) / 2);
    // check if start index is greater than end index
    if (start > end) {
        return -1; // target not found, return -1
    }
    // check if target is equal to middle element in array
    if (target === arr[mid]) {
        return mid; // target found, return index of middle element
    } else if (target < arr[mid]) { // target is less than middle element
        // perform binary search on first half of array
        return binarySearch(arr, target, start, mid-1);
    } else { // target is greater than middle element
        // perform binary search on second half of array
        return binarySearch(arr, target, mid+1, end);
    }
}

// example usage
let myArr: number[] = [1, 3, 5, 6, 8, 10, 12];
let result: number = binarySearch(myArr, 8, 0, myArr.length-1);
// output: 4 (index of target value 8 in the array)