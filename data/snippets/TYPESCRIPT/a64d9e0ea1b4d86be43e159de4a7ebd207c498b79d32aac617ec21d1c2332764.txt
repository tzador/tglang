// Define generic class
class Data<T> {
    private data: T;

    public constructor(arg: T) {
        this.data = arg;
    }

    public getData(): T {
        return this.data;
    }

    public setData(arg: T) {
        this.data = arg;
    }
}

// Create instances of the generic class
let stringData = new Data<string>("Hello");
let numberData = new Data<number>(123);

// Use the getData and setData methods
console.log(stringData.getData()); // Output: Hello
stringData.setData("World");
console.log(stringData.getData()); // Output: World
console.log(numberData.getData()); // Output: 123
numberData.setData(456);
console.log(numberData.getData()); // Output: 456

// Define interface with generic type
interface DataContainer<T> {
    data: T;
    getData(): T;
    setData(arg: T);
}

// Implement interface in generic class
class Container<T> implements DataContainer<T> {
    private data: T;

    public constructor(arg: T) {
        this.data = arg;
    }

    public getData(): T {
        return this.data;
    }

    public setData(arg: T) {
        this.data = arg;
    }
}

// Use interface implementation
let stringContainer = new Container<string>("Hello");
let numberContainer = new Container<number>(123);

console.log(stringContainer.getData()); // Output: Hello
stringContainer.setData("World");
console.log(stringContainer.getData()); // Output: World
console.log(numberContainer.getData()); // Output: 123
numberContainer.setData(456);
console.log(numberContainer.getData()); // Output: 456