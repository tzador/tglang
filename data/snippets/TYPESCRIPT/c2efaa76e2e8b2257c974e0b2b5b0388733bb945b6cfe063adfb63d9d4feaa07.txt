/*
This snippet shows how to create a complex class with different types of properties and a method that uses generics.

Let's define a class called Person with three properties: name, age, and hobbies. The name property is a string, the age property is a number, and the hobbies property is an array of strings.

We also have a method called greet which takes in a generic type T and returns a string greeting with the person's name and a message specific to the type T.

*/

class Person<T> {
  name: string;
  age: number;
  hobbies: string[];

  constructor(name: string, age: number, hobbies: string[]) {
    this.name = name;
    this.age = age;
    this.hobbies = hobbies;
  }

  greet = (): string => {
    let message: string;

    // If the generic type T is a string, use a special greeting for a person's name
    if (typeof T === "string") {
      message = `Hello ${this.name}, nice to meet you!`;
    }

    // If the generic type T is a number, use a special greeting based on the person's age
    if (typeof T === "number") {
      message = `Hello ${this.name}, you are ${this.age} years old!`;
    }

    // If the generic type T is an array, use a special greeting based on the person's hobbies
    if (Array.isArray(T)) {
      message = `Hello ${this.name}, your hobbies include ${this.hobbies.join(", ")}.`;
    }

    return message;
  };
}

/*
To create an instance of the Person class, we need to specify the generic type T.
We can then call the greet method to get a personalized greeting.
*/

const person1 = new Person<string>("John", 25, ["reading", "hiking"]);
console.log(person1.greet()); // Output: Hello John, nice to meet you!

const person2 = new Person<number>("Sarah", 30, ["painting", "cooking"]);
console.log(person2.greet()); // Output: Hello Sarah, you are 30 years old!

const person3 = new Person<string[]>("Mike", 20, ["playing basketball", "listening to music"]);
console.log(person3.greet()); // Output: Hello Mike, your hobbies include playing basketball, listening to music.