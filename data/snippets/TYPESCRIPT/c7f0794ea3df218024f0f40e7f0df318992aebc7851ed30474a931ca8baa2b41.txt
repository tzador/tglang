type Employee = {
  name: string;
  age: number;
  position: string;
  department: string;
  salary: number;
}

interface Company {
  companyName: string;
  address: string;
  employees: Employee[];
  revenue: number;
}

abstract class Organization {
  protected abstract orgName: string;
  protected abstract location: string;
  protected employees: Employee[];

  constructor() {
    this.employees = [];
  }

  addEmployee(employee: Employee): void {
    this.employees.push(employee);
  }

  abstract calculateProfit(revenue: number, expenses: number): number
}

class Corporation extends Organization implements Company {
  companyName: string;
  address: string;
  employees: Employee[];
  revenue: number;

  constructor(companyName: string, address: string, employees: Employee[], revenue: number) {
    super();
    this.companyName = companyName;
    this.address = address;
    this.employees = employees;
    this.revenue = revenue;
  }

  calculateProfit(revenue: number, expenses: number): number {
    return revenue - expenses;
  }
}

const employee1: Employee = {
  name: "John",
  age: 35,
  position: "Manager",
  department: "Sales",
  salary: 100000
}

const employee2: Employee = {
  name: "Jane",
  age: 29,
  position: "Software Developer",
  department: "IT",
  salary: 80000
}

const company: Company = {
  companyName: "ABC Corporation",
  address: "123 Main St.",
  employees: [employee1, employee2],
  revenue: 5000000
}

const corporation = new Corporation(company.companyName, company.address, company.employees, company.revenue);

console.log(`${corporation.companyName} is located at ${corporation.address} and has ${corporation.employees.length} employees.`);

const profit = corporation.calculateProfit(company.revenue, 2500000);

console.log(`The profit for ${corporation.companyName} is $${profit}.`);