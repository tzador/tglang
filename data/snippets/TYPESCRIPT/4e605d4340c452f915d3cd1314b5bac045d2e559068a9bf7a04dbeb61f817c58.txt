let number: number = 5; // declaring a variable named "number" with a value of 5 and explicitly assigning it a number type
const stringArray: string[] = ["hello", "world", "!"]; // declaring a constant variable named "stringArray" with an array of string values
class Person { // declaring a class named "Person"
    private name: string; // private property named "name" of string type
    static age: number = 25; // static property named "age" of number type with a value of 25
    constructor(name: string) { // constructor function with parameter "name" of string type
        this.name = name; // assigning the parameter value to the "name" property using "this" keyword
    }
    greet(): void { // method named "greet" with a return type of void (no return value)
        console.log(`Hello, my name is ${this.name} and I am ${Person.age} years old.`); // using template literals to print a message with values from properties
    }
}

let person = new Person("John"); // instantiating a new object of the Person class with a name of "John"
console.log(person.name); // trying to access the private property "name" will result in an error
console.log(Person.age); // accessing the static property "age" without instantiating an object
person.greet();  // calling the "greet" method on the person object will print a message with their name and age

// Output: