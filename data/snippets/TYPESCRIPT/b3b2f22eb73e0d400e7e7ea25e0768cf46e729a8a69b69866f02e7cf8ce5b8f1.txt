// Create a generic functional interface
interface MyFunc<T> {
    (val: T): T;
}

// Create a generic class
class MyGenericClass<T> {
    private value: T[];
    constructor() {
        this.value = [];
    }
    // Add an element to the class
    add(val: T) {
        this.value.push(val);
    }
    // Get the first element from the class
    getFirst(): T | undefined {
        return this.value[0];
    }
}

// Instantiate the generic class with strings
let myClass = new MyGenericClass<string>();
// Add "Hello" string to the class
myClass.add("Hello");
// Get the first element from the class
let first = myClass.getFirst();
console.log(first); // Output: "Hello"

// Instantiate the generic class with numbers
let myNumClass = new MyGenericClass<number>();
// Add 5 number to the class
myNumClass.add(5);
// Get the first element from the class
let firstNum = myNumClass.getFirst();
console.log(firstNum); // Output: 5