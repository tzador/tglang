/**
 * This is a class called "Example" with a generic type parameter "T".
 * It has a constructor that takes in an argument of type "T" and assigns it to a private field "data".
 * It also has a public method "getData" that returns the value of "data".
 */
class Example<T> {
  private data: T;

  constructor(data: T) {
    this.data = data;
  }

  /**
   * This method returns the value of "data".
   * It does not take in any arguments.
   * The return type is "T".
   */
  public getData(): T {
    return this.data;
  }
}

/**
 * This is a class called "StringExample" that extends "Example" class with a specific type of "string".
 * It has a constructor that takes in an argument of type "string" and passes it to the parent class's constructor.
 */
class StringExample extends Example<string> {
  constructor(data: string) {
    super(data);
  }
}

/**
 * This is an instance of the "Example" class with a type parameter of "number".
 * The argument passed to the constructor is of type "number".
 */
const numberExample = new Example<number>(5);

/**
 * This is an instance of the "StringExample" class.
 * The argument passed to the constructor is of type "string".
 */
const stringExample = new StringExample("Hello World!");

// This prints the value of "data" for the "numberExample" instance
console.log(numberExample.getData()); // Output: 5

// This prints the value of "data" for the "stringExample" instance
console.log(stringExample.getData()); // Output: Hello World!