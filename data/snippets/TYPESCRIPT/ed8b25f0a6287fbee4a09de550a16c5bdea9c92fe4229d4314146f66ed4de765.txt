// This is a complex function that checks if a number is prime
// It uses recursion and the 'isPrime' helper function

/**
 * Function that takes in a number and checks if it is prime
 * @param num {number} The number to check
 * @return {boolean} True if the number is prime, false if it is not
 */
function isPrime(num: number): boolean {
  // Base case, if num is less than or equal to 1, it is not prime
  if (num <= 1) {
    return false;
  }

  // Base case, if num is 2, it is prime
  if (num === 2) {
    return true;
  }
  
  // Recursive case, use helper function to check for factors
  return isPrimeHelper(num, 2);
}

/**
 * Helper function that checks for factors of a number
 * @param num {number} The number to check
 * @param factor {number} The current factor being checked
 * @return {boolean} True if no factors are found, false if a factor is found
 */
function isPrimeHelper(num: number, factor: number): boolean {
  // Base case, if the factor is equal to the number, no factors have been found
  if (num === factor) {
    return true;
  }

  // Base case, if the number is divisible by the factor, it is not prime
  if (num % factor === 0) {
    return false;
  }

  // Recursive case, increment factor and check again
  return isPrimeHelper(num, factor + 1);
}

// Example usage, calling the isPrime function and printing the result
console.log(isPrime(11)); // should print true
console.log(isPrime(15)); // should print false
console.log(isPrime(29)); // should print true