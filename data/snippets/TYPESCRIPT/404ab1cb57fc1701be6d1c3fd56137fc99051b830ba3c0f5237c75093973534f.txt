// Declaring a class with a generic data type
class Queue<T> {
    items: Array<T> = [];

    // Constructor function
    constructor(initialItems: Array<T>) {
        this.items = initialItems;
    }

    // Add item to the end of the queue
    enqueue(item: T): void {
        this.items.push(item);
        console.log(`${item} added to queue!`);
    }

    // Remove item from the front of the queue
    dequeue(): T {
        if (this.items.length == 0) {
            console.log('Queue is empty!');
            return;
        }

        let removedItem: T = this.items.shift();
        console.log(`${removedItem} removed from queue!`);
        return removedItem;
    }

    // Check if queue is empty
    isEmpty(): boolean {
        return this.items.length == 0;
    }

    // Get the length of the queue
    get size(): number {
        return this.items.length;
    }
}

// Create an instance of the Queue class with string data type
let stringQueue = new Queue<string>(['Hello', 'World']);

// Enqueue new items to the queue
stringQueue.enqueue('Goodbye');
stringQueue.enqueue('Universe');

// Dequeue items from the queue
stringQueue.dequeue();
stringQueue.dequeue();

// Check if queue is empty and get the size
console.log(stringQueue.isEmpty());
console.log(stringQueue.size);

// Create an instance of the Queue class with number data type
let numberQueue = new Queue<number>([1, 2, 3, 4, 5]);

// Enqueue new items to the queue
numberQueue.enqueue(6);
numberQueue.enqueue(7);

// Dequeue items from the queue
numberQueue.dequeue();
numberQueue.dequeue();

// Check if queue is empty and get the size
console.log(numberQueue.isEmpty());
console.log(numberQueue.size);