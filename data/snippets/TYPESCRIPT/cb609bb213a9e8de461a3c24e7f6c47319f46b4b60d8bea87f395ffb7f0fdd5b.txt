interface Employee {
    name: string; // employee name
    id: number; // employee id number
    department: string; // employee department
    position: string; // employee position
    salary: number; // employee salary
    benefits?: string[]; // optional employee benefits
    [key: string]: any; // allows for additional key-value pairs
}

class Manager implements Employee {
    name: string;
    id: number;
    department: string;
    position: string;
    salary: number;
    teamSize: number; // specific property for managers
    constructor(name: string, id: number, department: string, position: string, salary: number, teamSize: number) {
        this.name = name;
        this.id = id;
        this.department = department;
        this.position = position;
        this.salary = salary;
        this.teamSize = teamSize;
    }
}

function calculateYearlySalary(employee: Employee): number {
    return employee.salary * 12; // calculation based on monthly salary
}

const employee1: Employee = {
    name: "John Smith",
    id: 12345,
    department: "Sales",
    position: "Sales Associate",
    salary: 3000,
    benefits: ["health insurance", "401k"],
    vacationDays: 20 // additional property given due to [key: string]: any
};

const manager1: Manager = new Manager("Jane Doe", 67890, "HR", "HR Manager", 5000, 10); // creating a new manager instance with specific properties
const yearlySalary2: number = calculateYearlySalary(manager1); // using the function to calculate yearly salary for a manager

console.log(employee1.name); // output: John Smith
console.log(manager1.vacationDays); // output: undefined (since this property was not specified in the Manager class)
console.log(yearlySalary2); // output: 60000 (since managers have a higher monthly salary)