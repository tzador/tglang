// Annotated Generic Function
function map<T, U>(items: T[], func: (item: T) => U): U[] {
    let result: U[] = [];
    for (let i = 0; i < items.length; i++) {
        result.push(func(items[i]));
    }
    return result;
}
/* `function` keyword declares a generic function that has two generic types specified, `T` and `U`.
`<T, U>` after the function name indicates that these are generic types that will be used inside the function.
`items` parameter is of type `T[]`, an array of type `T`.
`func` parameter is a function that takes in a `T` type parameter and returns an `U` type.
`U[]` indicates the return type of the function, an array of type `U`.
`let` keyword declares a variable called `result` of type `U[]` and initializes it to an empty array.
`for` loop iterates through the `items` array and calls the `func` function on each item, pushing the result into the `result` array.
At the end, the `result` array is returned.
*/