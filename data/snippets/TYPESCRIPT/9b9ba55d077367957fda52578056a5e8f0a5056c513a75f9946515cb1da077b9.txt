// Define a class with a generic type
class Box<T> {
    // Private property to hold the data of the box
    private data: T;
  
    // Constructor function to initialize the box with data
    constructor(data: T) {
      this.data = data;
    }
  
    // Method to get the data from the box
    getData(): T {
      return this.data;
    }
  
    // Method to set the data in the box
    setData(data: T) {
      this.data = data;
    }
}

// Create a new instance of the Box class with a string as the generic type
const stringBox = new Box<string>("Hello World!");
console.log(stringBox.getData()); // Output: Hello World!

// Create a new instance of the Box class with a number as the generic type
const numberBox = new Box<number>(10);
console.log(numberBox.getData()); // Output: 10

// Create a new instance of the Box class with a boolean as the generic type
const booleanBox = new Box<boolean>(true);
console.log(booleanBox.getData()); // Output: true

// Create a new instance of the Box class with an array as the generic type
const arrayBox = new Box<string[]>(["one", "two", "three"]);
console.log(arrayBox.getData()); // Output: ["one", "two", "three"]

// Create a new instance of the Box class with an object as the generic type
const objectBox = new Box<object>({name: "John", age: 30});
console.log(objectBox.getData()); // Output: {name: "John", age: 30}