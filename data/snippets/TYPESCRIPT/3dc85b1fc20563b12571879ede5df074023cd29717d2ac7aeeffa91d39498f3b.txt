/**
* Represents a person.
*/
class Person {
    private name: string; // private name property
    age: number; // public age property

    /**
    * Creates a new Person with the given name and age
    * @param {string} name - the name of the person
    * @param {number} age - the age of the person
    */
    constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
    }

    /**
    * Returns the person's name.
    * @return {string} the person's name
    */
    getName(): string {
        return this.name;
    }

    /**
    * Updates the person's name.
    * @param {string} newName - the new name for the person
    */
    setName(newName: string): void {
        this.name = newName;
    }

    /**
    * Checks if the person is old enough to drive.
    * @return {boolean} true if the person is old enough to drive, false otherwise
    */
    canDrive(): boolean {
        return this.age >= 16;
    }
}

/**
* Represents a student who is a person.
*/
class Student extends Person {
    major: string; // public major property

    /**
    * Creates a new Student with the given name, age, and major.
    * @param {string} name - the name of the student
    * @param {number} age - the age of the student
    * @param {string} major - the major of the student
    */
    constructor(name: string, age: number, major: string) {
        super(name, age);
        this.major = major;
    }

    /**
    * Updates the student's major.
    * @param {string} newMajor - the new major for the student
    */
    setMajor(newMajor: string): void {
        this.major = newMajor;
    }

    /**
    * Calculates the student's maximum study load.
    * @return {number} the maximum number of classes the student can take
    */
    getMaxStudyLoad(): number {
        if (this.age < 18) {
            return 4;
        } else {
            return 5;
        }
    }
}

/**
* Creates a new Person with the given name and age.
* @param {string} name - the name of the person
* @param {number} age - the age of the person
* @return {Person} the newly created person
*/
function createPerson(name: string, age: number): Person {
    return new Person(name, age);
}

/**
* Creates a new Student with the given name, age, and major.
* @param {string} name - the name of the student
* @param {number} age - the age of the student
* @param {string} major - the major of the student
* @return {Student} the newly created student
*/
function createStudent(name: string, age: number, major: string): Student {
    return new Student(name, age, major);
}

// Create a person
let person = createPerson("John", 25);

// Create a student
let student = createStudent("Emily", 18, "Computer Science");

// Check if student can drive
console.log(student.canDrive()); // Output: true

// Update student's major
student.setMajor("Mathematics");

// Calculate student's maximum study load
let maxStudyLoad = student.getMaxStudyLoad();

// Print out student's information
console.log(`${student.getName()} is ${student.age} years old, studying ${student.major}, and can take up to ${maxStudyLoad} classes.`); // Output: Emily is 18 years old, studying Mathematics, and can take up to 5 classes.