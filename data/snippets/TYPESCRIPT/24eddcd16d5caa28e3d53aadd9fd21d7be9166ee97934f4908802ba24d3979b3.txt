// Example of a TypeScript class that implements a generic interface

// Define a generic interface with a type parameter
interface Container<T> {
  add(item: T): void;
  remove(item: T): void;
  contains(item: T): boolean;
}

// Define a class that implements the Interface
class MyContainer<T> implements Container<T> {
  private items: T[] = []; // array to hold the items of type T

  // Implementation of the add method
  add(item: T): void {
    if (!this.contains(item)) { // check if item already exists in container
      this.items.push(item);    // add item to the array
    }
  }

  // Implementation of the remove method
  remove(item: T): void {
    const index = this.items.indexOf(item); // get index of item in the array
    if (index > -1) { // check if item exists in array
      this.items.splice(index, 1); // remove item from array at specified index
    }
  }

  // Implementation of the contains method
  contains(item: T): boolean {
    return this.items.includes(item); // check if item exists in the array
  }
}

// Create an instance of the MyContainer class and specify the type parameter as string
const stringContainer: MyContainer<string> = new MyContainer();

// Use the methods of the class to add, remove, and check if a string exists in the container
stringContainer.add("Hello");
stringContainer.add("world");
console.log(stringContainer.contains("Hello")); // Output: true
console.log(stringContainer.contains("typescript")); // Output: false

// Create an instance of the MyContainer class and specify the type parameter as number
const numberContainer: MyContainer<number> = new MyContainer();
numberContainer.add(5);
numberContainer.add(10);
console.log(numberContainer.contains(5)); // Output: true
console.log(numberContainer.contains(15)); // Output: false