// Declare a class named Person
class Person {
  private name: string; // private property 'name' of type string

  constructor(name: string) { // constructor that takes 'name' as parameter
    this.name = name; // assigns parameter to 'name' property
  }

  // Function for getting full name with return type 'string'
  getFullName(): string {
    return this.name;
  }
}

// Declare an interface named Study
interface Study {
  subjects: string[]; // property 'subjects' of type array of strings
  study: (subject: string) => void; // property 'study' is a function that takes string as parameter and has no return type
}

// Create a class Student that implements Study interface
class Student implements Study {
  private name: string; // private property 'name' of type string
  subjects: string[]; // public property 'subjects' of type array of strings

  constructor(name: string, subjects: string[]) { // constructor that takes 'name' and 'subjects' as parameters
    this.name = name; // assigns 'name' parameter to 'name' property
    this.subjects = subjects; // assigns 'subjects' parameter to 'subjects' property
  }

  // Function for printing out subjects being studied
  study(subject: string): void {
    console.log(`${this.name} is studying ${subject}.`);
  }
}

// Declare a function named createStudent that creates a new instance of Student
function createStudent(name: string, subjects: string[]): Student {
  return new Student(name, subjects);
}

// Create a new student named 'John' studying 'Math', 'Science', and 'History'
let john: Student = createStudent('John', ['Math', 'Science', 'History']);

// Call the study function on 'john' to print out the subjects being studied
john.study('Physics');