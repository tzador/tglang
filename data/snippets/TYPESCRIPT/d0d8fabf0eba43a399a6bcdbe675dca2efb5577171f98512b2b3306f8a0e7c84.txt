/**
 * This is a class for creating and manipulating arrays.
 *
 * @class MyArray
 */
class MyArray {
  /**
   * The constructor method.
   *
   * @param {number[]} items - An array of numbers that will be stored in the MyArray object.
   */
  constructor(...items: number[]) {
    this.items = items;
  }

  /**
   * This is a method to add a new item to the end of the MyArray object.
   *
   * @param {number} item - The item to be added to the MyArray.
   */
  push(item: number) {
    this.items.push(item);
  }

  /**
   * This is a method to remove and return the last item of the MyArray object.
   *
   * @returns {number} The last item of the MyArray object.
   */
  pop(): number {
    return this.items.pop();
  }

  /**
   * This is a method to filter the MyArray object and return a new MyArray object with only the selected items.
   *
   * @param {number[]} items - An array of numbers to be used as filters.
   * @returns {MyArray} A new MyArray object with only the selected items.
   */
  filter(items: number[]): MyArray {
    const filteredArray: number[] = [];
    for (let i = 0; i < this.items.length; i++) {
      for (let j = 0; j < items.length; j++) {
        if (this.items[i] === items[j]) {
          filteredArray.push(this.items[i]);
        }
      }
    }
    return new MyArray(...filteredArray);
  }

  /**
   * This is a method to map the MyArray object and return a new MyArray object with the specified operation performed on each item.
   *
   * @param {Function} operation - The operation to be performed on each item in the MyArray object.
   * @returns {MyArray} A new MyArray object with the specified operation performed on each item.
   */
  map(operation: (item: number) => number): MyArray {
    const mappedArray: number[] = [];
    for (let i = 0; i < this.items.length; i++) {
      mappedArray.push(operation(this.items[i]));
    }
    return new MyArray(...mappedArray);
  }

  /**
   * This is a method to reduce the MyArray object and return a single value.
   *
   * @param {Function} operation - The operation to be performed on each item in the MyArray object.
   * @param {number} initialValue - The initial value for the operation.
   * @returns {number} The single value resulting from the reduction of the MyArray object.
   */
  reduce(operation: (accumulator: number, item: number) => number, initialValue: number): number {
    let result: number = initialValue;
    for (let i = 0; i < this.items.length; i++) {
      result = operation(result, this.items[i]);
    }
    return result;
  }
}

// Example usage:
const myArray = new MyArray(1, 2, 3, 4, 5);

myArray.push(6);
console.log(myArray); // MyArray {items: Array(6), push: ƒ, pop: ƒ, filter: ƒ, map: ƒ, …}

console.log(myArray.pop()); // 6

console.log(myArray.filter([2, 4])); // MyArray {items: Array(2), push: ƒ, pop: ƒ, filter: ƒ, map: ƒ, …}

console.log(myArray.map((item) => item * 2)); // MyArray {items: Array(4), push: ƒ, pop: ƒ, filter: ƒ, map: ƒ, …}

console.log(myArray.reduce((result, item) => result + item, 0)); // 14