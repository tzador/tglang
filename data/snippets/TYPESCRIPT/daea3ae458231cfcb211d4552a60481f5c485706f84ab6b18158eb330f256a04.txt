// Declare a class named Person
class Person {
  // Define a private property called `name` of type string
  private name: string;

  // Define a protected property called `age` of type number
  protected age: number;

  // Define a public property called `address` of type string
  public address: string;

  // Define a constructor that takes in three parameters: name, age, and address
  // Inside the constructor, set the `name`, `age`, and `address` properties based on the passed in parameters
  constructor(name: string, age: number, address: string) {
    this.name = name;
    this.age = age;
    this.address = address;
  }

  // Define a public method called `introduce` that returns a string
  // Inside the method, use template literals to interpolate the `name`, `age`, and `address` properties into a sentence
  // Return the sentence
  public introduce(): string {
    return `Hi, my name is ${this.name}. I am ${this.age} years old and I live in ${this.address}.`;
  }
}

// Declare a class named Student that extends the Person class
class Student extends Person {
  // Define a private property called `studentID` of type number
  private studentID: number;

  // Define a constructor that takes in four parameters: name, age, address, and studentID
  // Call the super() method and pass in the name, age, and address parameters
  // Set the `studentID` property based on the passed in parameter
  constructor(name: string, age: number, address: string, studentID: number) {
    super(name, age, address);
    this.studentID = studentID;
  }

  // Define a public method called `study` that returns a string
  // Inside the method, use template literals to interpolate the `name` and `studentID` properties into a sentence
  // Return the sentence
  public study(): string {
    return `My name is ${this.name} and my student ID is ${this.studentID}. I love studying!`;
  }
}