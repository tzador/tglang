/**
 * Custom error class for an API response status
 */
class ResponseStatusError extends Error {
  constructor(
      public status: string,
      public message: string,
      public endpoint: string
    ) {
        super(`Error received from API endpoint: ${endpoint} with status code: ${status}. Message: ${message}`);
        this.name = 'ResponseStatusError';
        this.stack = (new Error()).stack;
    }
}

/**
 * Custom interface for user data
 */
interface User {
    name: string;
    age?: number;
    address: {
        city: string;
        state: string;
    };
}

// Function that fetches user data from an API
async function getUserData(userId: string): Promise<User> {
    try {
        // Make API call
        const response = await fetch(`https://example.com/api/user/${userId}`);
        // Convert response to JSON
        const data = await response.json();
        // If API response is successful, return user data
        if (response.status === '200') {
            return data;
        } else {
            // If response status is not successful, throw a custom error
            throw new ResponseStatusError(response.status, data.message, response.url);
        }
    } catch (error) {
        // If an error occurs during API call, log the error and re-throw it
        console.log(`Error fetching user data: ${error}`);
        throw error;
    }
}

// Example usage of the function
const userId = '12345';
getUserData(userId)
    .then(data => {
        console.log(`Name: ${data.name}`);
        console.log(`Age: ${data.age}`);
        console.log(`City: ${data.address.city}`);
        console.log(`State: ${data.address.state}`);
    })
    .catch(error => {
        console.log(`An error occurred: ${error}`);
    });