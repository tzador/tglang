/*
* This is a complex function that takes in two arrays and returns a new array 
* with the contents of both arrays combined. 
* It also has optional parameters for the starting index and ending index of 
* the first array to be included in the new array.
*
* @param firstArray - first array to be combined
* @param secondArray - second array to be combined
* @param startIndex - optional parameter for starting index of first array
* @param endIndex - optional parameter for ending index of first array
* @returns combinedArray - array with contents of first and second array 
*/

function combineArrays<T>(firstArray: T[], secondArray: T[], startIndex: number = 0, endIndex?: number): T[] {
    //initialize result array
    let combinedArray: T[] = [];

    //check if endIndex is specified, else use length of first array as endIndex
    if (!endIndex) {
        endIndex = firstArray.length;
    }

    //loop through first array starting from startIndex up to endIndex
    for (let i = startIndex; i < endIndex; i++) {
        //push each element of first array to combined array
        combinedArray.push(firstArray[i]);
    }

    //loop through second array and push each element to combined array
    for (let i = 0; i < secondArray.length; i++) {
        combinedArray.push(secondArray[i]);
    }

    //return the combined array
    return combinedArray;
}

//example usage of function
let arr1: number[] = [1, 2, 3];
let arr2: number[] = [4, 5, 6];
let combinedArr: number[] = combineArrays(arr1, arr2, 1, 2);
console.log(combinedArr); //outputs [2, 3, 5]