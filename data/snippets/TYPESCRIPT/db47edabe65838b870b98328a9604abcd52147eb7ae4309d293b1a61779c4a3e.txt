/**
 * This generic class creates a tree node with a value of type T
 * and references to its parent and children.
 */
class TreeNode<T> {
  private value: T;
  private parent: TreeNode<T> | null;
  private children: TreeNode<T>[] = [];

  constructor(value: T, parent: TreeNode<T> | null = null) {
    this.value = value;
    this.parent = parent;
  }

  /**
   * Adds a child node to this tree node.
   * @param value The value of the child node.
   */
  addChild(value: T): void {
    const newChild = new TreeNode<T>(value, this);
    this.children.push(newChild);
  }

  /**
   * Returns the value of this tree node.
   */
  getValue(): T {
    return this.value;
  }

  /**
   * Sets the parent node of this tree node.
   * @param parent The parent node.
   */
  setParent(parent: TreeNode<T> | null): void {
    this.parent = parent;
  }

  /**
   * Returns the parent node of this tree node.
   */
  getParent(): TreeNode<T> | null {
    return this.parent;
  }

  /**
   * Returns an array of the children of this tree node.
   */
  getChildren(): TreeNode<T>[] {
    return this.children;
  }

  /**
   * Checks if this tree node is a leaf node (has no children).
   */
  isLeaf(): boolean {
    return this.children.length === 0;
  }

  /**
   * Removes a child node from this tree node.
   * @param child The child node to remove.
   */
  removeChild(child: TreeNode<T>): void {
    this.children = this.children.filter((c) => c !== child);
  }

  /**
   * Prints the tree starting from this node.
   */
  print(): void {
    let treeString = `${this.value}\n`;
    const printHelper = (node: TreeNode<T>, level: number): void => {
      for (let i = 0; i < level; i++) {
        treeString += '--';
      }
      treeString += node.getValue() + '\n';
      node.getChildren().forEach((child) => {
        printHelper(child, level + 1);
      });
    };
    printHelper(this, 0);
    console.log(treeString);
  }
}

/**
 * Creates a tree with string values.
 */
const tree: TreeNode<string> = new TreeNode('A');
tree.addChild('B');
tree.addChild('C');
const nodeD = new TreeNode('D');
tree.addChild('E');
tree.addChild('F');
tree.addChild('G');
nodeD.addChild('H');
const nodeI = new TreeNode('I');
nodeD.addChild('J');
nodeI.addChild('K');
nodeI.addChild('L');
nodeD.addChild('M');
nodeD.addChild('N');
tree.addChild(nodeD);
tree.addChild(nodeI);

// Prints the tree
tree.print();