class Animal { // Creates a class called Animal
    name: string; // Declares a property called 'name' of type string
    constructor(name: string) { // Adds a constructor that takes in a parameter of type string and assigns it to the 'name' property
        this.name = name;
    }
    makeSound(sound: string): void { // Declares a method makeSound that takes in a parameter of type string and returns void
        console.log(`${this.name} says ${sound}`); // Logs the name of the animal and the specified sound
    }
}

class Dog extends Animal { // Creates a subclass called Dog that extends the Animal class
    breed: string; // Declares a property called 'breed' of type string

    constructor(name: string, breed: string) { // Adds a constructor that takes in two parameters of type string and assigns them to the 'name' and 'breed' properties
        super(name); // Calls the super constructor of the Animal class
        this.breed = breed;
    }

    makeSound() { // Overrides the makeSound method from the Animal class
        super.makeSound("woof"); // Calls the makeSound method of the Animal class and passes in the "woof" sound as an argument
    }
}

let dog = new Dog("Max", "Labrador"); // Creates an instance of the Dog class with the name "Max" and the breed "Labrador"
dog.makeSound(); // Calls the makeSound method of the Dog class, output: "Max says woof"

interface Person { // Creates an interface called Person
    name: string; // Declares a property called 'name' of type string
    age: number; // Declares a property called 'age' of type number
    greet(): void; // Declares a method called greet that takes no parameters and returns void
}

class Student implements Person { // Creates a class called Student that implements the Person interface
    name: string; // Implements the 'name' property from the interface
    age: number; // Implements the 'age' property from the interface

    constructor(name: string, age: number) { // Adds a constructor that takes in two parameters and assigns them to the 'name' and 'age' properties
        this.name = name;
        this.age = age;
    }

    greet() { // Implements the greet method from the interface
        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old`); // Logs a greeting with the name and age
    }
}

let student = new Student("John", 20);  // Creates an instance of the Student class with the name "John" and the age 20
student.greet(); // Calls the greet method, output: "Hello, my name is John and I am 20 years old"