export default class BinaryTree<T> {
  // A class representing a binary tree data structure

  root: TreeNode<T>;
  // The root node of the binary tree

  size: number;
  // The number of nodes in the binary tree

  constructor() {
    // Initializes a new empty binary tree
    this.root = null;
    this.size = 0;
  }

  insert(value: T) {
    // Inserts a new node with the given value into the binary tree
    if (!this.root) {
      // If the tree is empty, set the root to the new node
      this.root = new TreeNode(value);
      this.size++;
      return true;
    } else {
      // Otherwise, use a recursive helper function to insert the node
      return this.insertNode(this.root, value);
    }
  }

  private insertNode(node: TreeNode<T>, value: T): boolean {
    // A recursive helper function to insert a node into the tree
    if (value < node.value) {
      // If the value is less than the current node, insert it into the left subtree
      if (!node.left) {
        // If there is no left child, create a new node and set it as the left child
        node.left = new TreeNode(value);
        this.size++;
        return true;
      } else {
        // Otherwise, recursively call insertNode on the left child
        return this.insertNode(node.left, value);
      }
    } else if (value > node.value) {
      // If the value is greater than the current node, insert it into the right subtree
      if (!node.right) {
        // If there is no right child, create a new node and set it as the right child
        node.right = new TreeNode(value);
        this.size++;
        return true;
      } else {
        // Otherwise, recursively call insertNode on the right child
        return this.insertNode(node.right, value);
      }
    } else {
      // The value already exists in the tree, return false
      return false;
    }
  }

  delete(value: T) {
    // Deletes a node with the given value from the binary tree
    if (!this.root) {
      // If the tree is empty, return false
      return false;
    } else {
      // Otherwise, use a recursive helper function to delete the node
      return this.deleteNode(this.root, value);
    }
  }

  private deleteNode(node: TreeNode<T>, value: T): boolean {
    // A recursive helper function to delete a node from the tree
    if (value < node.value) {
      // If the value is less than the current node, recursively call deleteNode on the left child
      if (!node.left) {
        // If the left child does not exist, the value is not in the tree, return false
        return false;
      } else if (node.left.value === value) {
        // If the left child's value is the one to be deleted, call deleteSingleChildNode
        // to handle the deletion of a node with only one child
        return this.deleteSingleChildNode(node, node.left, true);
      } else {
        // Otherwise, recursively call deleteNode on the left child
        return this.deleteNode(node.left, value);
      }
    } else if (value > node.value) {
      // If the value is greater than the current node, recursively call deleteNode on the right child
      if (!node.right) {
        // If the right child does not exist, the value is not in the tree, return false
        return false;
      } else if (node.right.value === value) {
        // If the right child's value is the one to be deleted, call deleteSingleChildNode
        // to handle the deletion of a node with only one child
        return this.deleteSingleChildNode(node, node.right, false);
      } else {
        // Otherwise, recursively call deleteNode on the right child
        return this.deleteNode(node.right, value);
      }
    } else {
      // The current node contains the value to be deleted, call deleteDoubleChildNode
      // to handle the deletion of a node with two children
      return this.deleteDoubleChildNode(node, value);
    }
  }

  private deleteSingleChildNode(parent: TreeNode<T>, node: TreeNode<T>, isLeftChild: boolean): boolean {
    // A helper function to handle the deletion of a node with only one child
    if (node.left) {
      // If the node has a left child, set that child as the new node at parent's left/right child position
      if (isLeftChild) {
        parent.left = node.left;
      } else {
        parent.right = node.left;
      }
    } else {
      // If the node has a right child, set that child as the new node at parent's left/right child position
      if (isLeftChild) {
        parent.left = node.right;
      } else {
        parent.right = node.right;
      }
    }
    this.size--;
    return true;
  }

  private deleteDoubleChildNode(parent: TreeNode<T>, value: T): boolean {
    // A helper function to handle the deletion of a node with two children
    let node = parent.right;
    // Set the current node to the right child of the parent
    while (node.left) {
      // Find the smallest value in the right subtree
      node = node.left;
    }
    // Replace the value of the parent node with the smallest value found in the right subtree
    parent.value = node.value;
    // Recursively call deleteNode on the node with the smallest value in the right subtree
    return this.deleteNode(parent.right, parent.value);
  }

  search(value: T) {
    // Searches the binary tree for a node with the given value
    if (!this.root) {
      // If the tree is empty, return null
      return null;
    } else {
      // Otherwise, use a recursive helper function to search for the node
      return this.searchNode(this.root, value);
    }
  }

  private searchNode(node: TreeNode<T>, value: T): TreeNode<T> {
    // A recursive helper function to search for a node with the given value
    if (value < node.value) {
      // If the value is less than the current node, recursively call searchNode on the left child
      if (!node.left) {
        // If the left child does not exist, the value is not in the tree, return null
        return null;
      } else {
        // Otherwise, recursively call searchNode on the left child
        return this.searchNode(node.left, value);
      }
    } else if (value > node.value) {
      // If the value is greater than the current node, recursively call searchNode on the right child
      if (!node.right) {
        // If the right child does not exist, the value is not in the tree, return null
        return null;
      } else {
        // Otherwise, recursively call searchNode on the right child
        return this.searchNode(node.right, value);
      }
    } else {
      // The current node contains the value, return the node
      return node;
    }
  }

  getMinValue(node: TreeNode<T>) {
    // Finds the smallest value in the binary tree starting from a given node
    let current = node;
    while (current.left) {
      // Loop through the left children until the last one is reached
      current = current.left;
    }
    return current.value;
  }

  getMaxValue(node: TreeNode<T>) {
    // Finds the largest value in the binary tree starting from a given node
    let current = node;
    while (current.right) {
      // Loop through the right children until the last one is reached
      current = current.right;
    }
    return current.value;
  }

  preorderTraversal(node: TreeNode<T>, array: T[]) {
    // Performs a preorder traversal of the binary tree starting from a given node
    array.push(node.value);
    // Push the current node's value into the array
    if (node.left) {
      // If a left child exists, recursively call preorderTraversal on the left child
      this.preorderTraversal(node.left, array);
    }
    if (node.right) {
      // If a right child exists, recursively call preorderTraversal on the right child
      this.preorderTraversal(node.right, array);
    }
  }

  inorderTraversal(node: TreeNode<T>, array: T[]) {
    // Performs an inorder traversal of the binary tree starting from a given node
    if (node.left) {
      // If a left child exists, recursively call inorderTraversal on the left child
      this.inorderTraversal(node.left, array);
    }
    array.push(node.value);
    // Push the current node's value into the array
    if (node.right) {
      // If a right child exists, recursively call inorderTraversal on the right child
      this.inorderTraversal(node.right, array);
    }
  }

  postorderTraversal(node: TreeNode<T>, array: T[]) {
    // Performs a postorder traversal of the binary tree starting from a given node
    if (node.left) {
      // If a left child exists, recursively call postorderTraversal on the left child
      this.postorderTraversal(node.left, array);
    }
    if (node.right) {
      // If a right child exists, recursively call postorderTraversal on the right child
      this.postorderTraversal(node.right, array);
    }
    array.push(node.value);
    // Push the current node's value into the array
  }
}

class TreeNode<T> {
  // A class representing a node of the binary tree

  value: T;
  // The value stored in the node

  left: TreeNode<T>;
  // The left child node

  right: TreeNode<T>;
  // The right child node

  constructor(value: T) {
    // Initializes a new node with the given value and no children
    this.value = value;
    this.left = null;
    this.right = null;
  }
}