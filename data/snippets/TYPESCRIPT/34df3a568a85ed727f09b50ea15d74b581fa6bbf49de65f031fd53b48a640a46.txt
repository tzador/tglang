/**
 * A generic class with two type parameters.
 * @template T The type of the first parameter.
 * @template U The type of the second parameter.
 * @param {T} first The first parameter.
 * @param {U} second The second parameter.
 */
class GenericClass<T, U> {
    // A private property of type T.
    private first: T;
    // A protected property of type U.
    protected second: U;

    /**
     * Constructor for the GenericClass.
     * @param {T} first The first parameter.
     * @param {U} second The second parameter.
     */
    constructor(first: T, second: U) {
        this.first = first;
        this.second = second;
    }

    /**
     * Getter for the first property.
     * @return {T} The first property.
     */
    getFirst(): T {
        return this.first;
    }

    /**
     * Getter for the second property.
     * @return {U} The second property.
     */
    getSecond(): U {
        return this.second;
    }

    /**
     * A method that takes in a parameter of type T and returns a value of type U.
     * @param {T} param A parameter of type T.
     * @return {U} A value of type U.
     */
    genericMethod(param: T): U {
        return this.second;
    }
}

// Instantiating the GenericClass with number and string as the type parameters.
let genericInstance = new GenericClass<number, string>(10, "Hello");

// Calling the genericMethod with a number as the parameter.
let result = genericInstance.genericMethod(5);

// Printing the result in the console.
console.log(result); // Output: Hello