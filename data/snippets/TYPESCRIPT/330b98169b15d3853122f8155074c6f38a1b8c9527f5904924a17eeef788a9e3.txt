type User {
  name: string; // Represents the user's name as a string value
  age: number; // Represents the user's age as a numerical value
  address: {
    street: string; // Represents the user's street address as a string value
    city: string; // Represents the user's city as a string value
    state: string; // Represents the user's state as a string value
  }
  phoneNumbers: Array<string>; // Represents the user's phone numbers as an array of string values
  active: boolean; // Represents if the user's account is active or not, with a boolean value
  greetUser: (name: string) => void; // Represents a function that takes in a name parameter and prints a greeting
}

interface Product {
  name: string; // Represents the product's name as a string value
  price: number; // Represents the product's price as a numerical value
  description?: string; // Represents the product's description as an optional string value
  inStock: boolean; // Represents if the product is currently in stock with a boolean value
  sizes: string[]; // Represents the sizes available for the product as an array of string values
  onSale?: () => boolean; // Represents an optional function that checks if the product is on sale and returns a boolean value
  calculateTax: (price: number, taxRate: number) => number; // Represents a function that calculates the tax for a given price and tax rate and returns the total price
}

class ShoppingCart {
  items: Product[]; // Represents an array of products in the shopping cart
  constructor(products: Product[]) {
    this.items = products;
  }
  addItem: (product: Product) => void; // Represents a function that adds a product to the shopping cart
  removeItem: (name: string) => void; // Represents a function that removes a product from the shopping cart based on its name
  calculateTotal: () => number; // Represents a function that calculates the total price of all items in the shopping cart and returns a numerical value
}