/**
* This is a class with a generic type
*/
class MyClass<T> {
  private value: T;

  /**
  * Constructor that sets the value of the class
  */
  constructor(value: T) {
    this.value = value;
  }

  /**
  * Method that returns the value of the class
  * @returns the value of type T
  */
  getValue(): T {
    return this.value;
  }

  /**
  * Setter method to change the value of the class
  * @param newValue - the new value to be assigned
  */
  setValue(newValue: T): void {
    this.value = newValue;
  }
}

/**
* Creating an instance of the class with a number as the generic type
*/
const myNumberClass = new MyClass<number>(5);

/**
* Creating an instance of the class with a string as the generic type
*/
const myStringClass = new MyClass<string>("Hello World");

// Accessing the value of myNumberClass
const numberValue = myNumberClass.getValue();
console.log(numberValue); // Output: 5

// Accessing the value of myStringClass
const stringValue = myStringClass.getValue();
console.log(stringValue); // Output: "Hello World"

// Using the setter method to change the value of myStringClass
myStringClass.setValue("Hello TypeScript");
console.log(myStringClass.getValue()); // Output: "Hello TypeScript"