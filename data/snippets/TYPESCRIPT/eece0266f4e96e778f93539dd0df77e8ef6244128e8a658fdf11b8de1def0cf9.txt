// Define a class named Person with a constructor that takes in a name string and age number
class Person {
  name: string;
  age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }
}

// Define an interface named Animal with a property of type string
interface Animal {
  type: string;
}

// Define a generic class named Zoo that takes in a type argument constrained to be of type Person or Animal
class Zoo<T extends Person | Animal>{
  animals: T[];

  constructor() {
    this.animals = [];
  }

  // Create a method to add animals to the Zoo
  addAnimal(animal: T) {
    this.animals.push(animal);
  }

  // Create a method to get all the animals in the Zoo
  getAllAnimals(): T[] {
    return this.animals;
  }

  // Create a method to check if the person in the Zoo is an adult (age greater than 18)
  isAdult(person: Person): boolean {
    return person.age > 18;
  }

  // Create a method to get all the animals of a specific type in the Zoo
  getAnimalsOfType(type: string): T[] {
    return this.animals.filter(animal => animal.type === type);
  }
}

// Create an instance of the Zoo class with a type argument of Person
const zoo = new Zoo<Person>();

// Create a new Person and add it to the Zoo
const anna = new Person("Anna", 21);
zoo.addAnimal(anna);

// Create a second instance of the Zoo class with a type argument of Animal
const animalZoo = new Zoo<Animal>();

// Create a new Animal and add it to the Zoo
const cat = { type: "cat" }; // cat is of type Animal
animalZoo.addAnimal(cat);