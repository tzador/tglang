// Create a variable named "num" and initialize it to the value 5
let num:number = 5;

// Create a function called "add" that takes in two parameters of type number and returns the sum
function add(x:number, y:number):number {
  return x + y;
}

// Create a variable named "result" and call the add function with arguments of num and 10
let result:number = add(num, 10);

// Create an array of numbers and add the "num" and "result" variables to it
let numbersArray:number[] = [num, result];

// Create an interface called "Person" with properties "name" and "age" of type string and number respectively
interface Person {
  name: string,
  age: number
}

// Create an object of type "Person" with name "John" and age 25
let john:Person = {
  name: "John",
  age: 25
};

// Create a class called "Animal" with properties "name" and "species" of type string
class Animal {
  name:string;
  species:string;

  // Create a constructor function that takes in name and species parameters and initializes the properties
  constructor(name:string, species:string) {
    this.name = name;
    this.species = species;
  }

  // Create a method named "move" that logs a message using the properties of the class
  move() {
    console.log(`${this.name} is a ${this.species} and it is moving!`);
  }
}

// Create an object of type "Animal" with name "Fluffy" and species "Dog"
let fluffy:Animal = new Animal("Fluffy", "Dog");

// Call the "move" method on the "Fluffy" object
fluffy.move();

// Create a generic class called "Array" that takes in a type parameter and has a property "elements" of type array
class Array<T> {
  elements:T[];

  // Create a constructor function that takes in an array of type T and initializes the elements property
  constructor(elements:T[]) {
    this.elements = elements;
  }

  // Create a method named "push" that takes in a parameter of type T and adds it to the elements array
  push(element:T) {
    this.elements.push(element);
  }

  // Create a method named "pop" that removes and returns the last element of the elements array
  pop():T {
    return this.elements.pop();
  }
}

// Create an object of type "Array" with a type parameter of string and initialize it with an array of strings
let stringArray:Array<string> = new Array(["Hello", "World", "!"]);

// Call the "push" method on the stringArray object and pass in the string "Typescript"
stringArray.push("Typescript");

// Call the "pop" method on the stringArray object and store the returned value in a variable named "lastElement"
let lastElement:string = stringArray.pop();