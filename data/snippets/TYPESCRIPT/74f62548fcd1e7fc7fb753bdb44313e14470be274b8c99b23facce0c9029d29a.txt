/**
 * Generates a random number between two given values (inclusive)
 * @param {number} min The minimum value
 * @param {number} max The maximum value
 * @returns {number} A random number between min and max
 */
function generateRandomNumber(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Declare a type alias for a function that takes in a string and returns a number
type StringToNumberFunc = (input: string) => number;

/**
 * Converts a string to its corresponding ASCII value
 * @param {string} str The input string
 * @returns {number} The ASCII value of the first character in the string
 */
const stringToAscii: StringToNumberFunc = (str: string): number => {
  return str.charCodeAt(0);
};

// Declare an interface for a shape
interface Shape {
  name: string;
  color: string;
  coordinates: {
    x: number;
    y: number;
  };
  /**
   * Calculates the area of the shape
   * @returns {number} The area of the shape
   */
  calculateArea(): number;
}

// Define a class that implements the Shape interface
class Rectangle implements Shape {
  name: string;
  color: string;
  coordinates: {
    x: number;
    y: number;
  };

  constructor(name: string, color: string, x: number, y: number) {
    this.name = name;
    this.color = color;
    this.coordinates = { x, y };
  }

  /**
   * Calculates the area of the rectangle
   * @returns {number} The area of the rectangle
   */
  calculateArea(): number {
    return this.coordinates.x * this.coordinates.y;
  }
}