type Employee {
    id: string,
    firstName: string,
    lastName: string,
    age: number,
    position: string,
    salary: number,
    department: string,
    projects: Array<string>,
    isActive: boolean,
    address?: Address
}

interface Address {
    street: string,
    city: string,
    state: string,
    country: string,
    zipCode: string
}

class EmployeeDatabase {
    private employees: Array<Employee>;

    constructor(databaseName: string) {
        console.log('Initializing database: ' + databaseName);
        this.employees = [];
    }

    addEmployee(newEmployee: Employee): void {
        this.employees.push(newEmployee);
        console.log('Added new employee: ' + newEmployee.firstName + ' ' + newEmployee.lastName);
    }

    getEmployeeById(id: string): Employee {
        return this.employees.find((employee) => employee.id === id);
    }

    updateEmployee(id: string, updatedInfo: Partial<Employee>): void {
        let employee = this.getEmployeeById(id);
        for (let key in updatedInfo) {
            employee[key] = updatedInfo[key];
        }
        console.log('Updated employee: ' + employee.firstName + ' ' + employee.lastName);
    }
}

let employee1: Employee = {
    id: '12345',
    firstName: 'John',
    lastName: 'Doe',
    age: 30,
    position: 'Manager',
    salary: 60000,
    department: 'Sales',
    projects: ['Project A', 'Project B'],
    isActive: true,
    address: {
        street: '123 Main St',
        city: 'New York',
        state: 'New York',
        country: 'USA',
        zipCode: '10001'
    }
};

let employeeDB: EmployeeDatabase = new EmployeeDatabase('Company');
employeeDB.addEmployee(employee1);
employeeDB.updateEmployee('12345', {position: 'Senior Manager', salary: 80000});
console.log(employeeDB.getEmployeeById('12345'));