//Example class with generic type
class Example<T> {
    private value: T;

    constructor(value: T) {
        this.value = value;
    }

    //Method that returns an array of generic type
    getArray(someValue: T): T[] {
        let arr: T[] = [];
        arr.push(this.value);
        arr.push(someValue);
        return arr;
    }

    //Method that takes in a generic function
    useFunction(func: (val: T) => void) {
        func(this.value);
    }

    //Method that takes in a generic class and returns an instance of it
    createInstance<U>(c: new (value: T) => U): U {
        return new c(this.value);
    }

    //Getter method that returns the value with generic type
    getValue(): T {
        return this.value;
    }
}

//Example class with extended properties and methods
class ComplexExample<T extends Example<string>> {

    //Property that is of generic type extending the example class
    example: T;

    constructor(example: T) {
        this.example = example;
    }

    //Method that uses the getArray method from the example class
    getArrayFromString(): string[] {
        let strArr: string[] = this.example.getArray("Hello");
        return strArr;
    }

    //Method that uses the useFunction method from the example class
    useFunctionWithExample() {
        this.example.useFunction((val) => {
            console.log(val);
        })
    }

    //Method that uses the createInstance method from the example class and returns the created instance
    createInstanceWithExampleClass() {
        let ex = this.example.createInstance(Example);
        return ex;
    }

    //Getter method for the example property
    getExample(): T {
        return this.example;
    }
}