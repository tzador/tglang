/**
 * This is a complex data structure called "Graph" which represents relationships between nodes.
 * It contains different methods to manipulate and interact with the graph.
 */
class Graph<T> {
	// private properties
	private nodes: Map<T, T[]>;
	private edges: [T, T][];
	private directed: boolean;

	// constructor function to create a new graph instance
	constructor(directed = false) {
		this.nodes = new Map();
		this.edges = [];
		this.directed = directed;
	}

	// method to add a new node to the graph
	addNode(node: T) {
		this.nodes.set(node, []);
	}

	// method to add a new edge to the graph between two nodes
	addEdge(source: T, target: T) {
		// check if the nodes already exist in the graph
		if (!this.nodes.has(source) || !this.nodes.has(target)) {
			throw new Error('Nodes does not exist in the graph.');
		}

		// add edge between the two nodes
		this.edges.push([source, target]);

		// if graph is undirected, add edge in the opposite direction as well
		if (!this.directed) {
			this.edges.push([target, source]);
		}

		// update the adjacency list for the nodes
		this.nodes.get(source).push(target);
		if (!this.directed) {
			this.nodes.get(target).push(source);
		}
	}

	// method to remove a node from the graph
	removeNode(node: T) {
		// check if the node exists in the graph
		if (!this.nodes.has(node)) {
			throw new Error('Node does not exist in the graph.');
		}

		// remove all edges connected to the node
		this.edges = this.edges.filter(
			([source, target]) => source !== node && target !== node
		);

		this.nodes.delete(node); // remove node from the graph
	}

	// method to remove an edge between two nodes from the graph
	removeEdge(source: T, target: T) {
		// check if the nodes exist in the graph
		if (!this.nodes.has(source) || !this.nodes.has(target)) {
			throw new Error('Nodes does not exist in the graph.');
		}

		// remove the edge between the given nodes
		this.edges = this.edges.filter(
			([node1, node2]) =>
				!(node1 === source && node2 === target) &&
				!(node1 === target && node2 === source)
		);

		// update the adjacency list for the nodes
		this.nodes.set(
			source,
			this.nodes.get(source).filter(node => node !== target)
		);
		if (!this.directed) {
			this.nodes.set(
				target,
				this.nodes.get(target).filter(node => node !== source)
			);
		}
	}

	// method to check if an edge exists between two nodes in the graph
	hasEdge(source: T, target: T): boolean {
		return this.edges.some(
			([node1, node2]) =>
				(node1 === source && node2 === target) ||
				(node1 === target && node2 === source)
		);
	}

	// method to get all the neighbors of a given node in the graph
	getNeighbors(node: T): T[] | null {
		if (!this.nodes.has(node)) {
			throw new Error('Node does not exist in the graph.');
		}
		return this.nodes.get(node);
	}
}