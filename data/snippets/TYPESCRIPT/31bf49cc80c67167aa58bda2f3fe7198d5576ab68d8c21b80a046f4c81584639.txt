/** 
 * This is a function that calculates the nth number
 * in the Fibonacci sequence
 * @param n - the index of the number in the sequence
 * @returns the nth number in the Fibonacci sequence
 */
function fib(n: number): number {
  // Base cases
  if (n <= 1) return n;
  // Recursive call
  return fib(n - 1) + fib(n - 2);
}

/** 
 * This is an interface representing a person with a name and age
 */
interface Person {
  name: string;
  age: number;
}

/** 
 * This is a class that represents a car
 */
class Car {
  // Properties
  private _make: string;
  private _model: string;
  private _year: number;

  constructor(make: string, model: string, year: number) {
    this._make = make;
    this._model = model;
    this._year = year;
  }

  // Getters and Setters
  get make(): string {
    return this._make;
  }

  set make(make: string) {
    this._make = make;
  }

  get model(): string {
    return this._model;
  }

  set model(model: string) {
    this._model = model;
  }

  get year(): number {
    return this._year;
  }

  set year(year: number) {
    this._year = year;
  }

  // Method
  /**
   * This method returns a string with the car's make, model, and year
   * @returns a string representation of the car
   */
  toString(): string {
    return `Make: ${this.make}, Model: ${this.model}, Year: ${this.year}`;
  }
}

// Create an array of Person objects
const people: Person[] = [
  {
    name: 'John',
    age: 25
  },
  {
    name: 'Jane',
    age: 30
  },
  {
    name: 'Bob',
    age: 40
  }
];

// Create a new instance of Car
const car = new Car('Toyota', 'Camry', 2020);

// Print the 7th number in the Fibonacci sequence
console.log(fib(7));

// Print the name and age of each person in the array
people.forEach(person => {
  console.log(`${person.name}: ${person.age}`);
});

// Print the string representation of the car
console.log(car.toString());