/**
 * This class represents a custom data structure called a TreeMap.
 * It contains a root node and methods for inserting, deleting, and searching for entries.
 */
class TreeMap {
    private root: Node; // the root node of the tree

    /**
     * This function inserts a new key-value pair into the tree.
     * @param {number} key - the key of the entry
     * @param {any} value - the value associated with the key
     */
    insert(key: number, value: any): void {
        // create a new node with given key and value
        const newNode = new Node(key, value);

        // if tree is empty, make new node the root
        if (!this.root) {
            this.root = newNode;
        } else {
            let current = this.root; // start from the root

            while (true) {
                // if new node's key is less than current node's key, move left
                if (newNode.key < current.key) {
                    // if current node has no left child, add new node as left child
                    if (!current.left) {
                        current.left = newNode;
                        break;
                    }

                    current = current.left; // else, continue traversing
                }
                // if new node's key is greater than current node's key, move right
                else if (newNode.key > current.key) {
                    // if current node has no right child, add new node as right child
                    if (!current.right) {
                        current.right = newNode;
                        break;
                    }

                    current = current.right; // else, continue traversing
                }
                // if new node's key is equal to current node's key, update value
                else {
                    current.value = newNode.value;
                    break;
                }
            }
        }
    }

    /**
     * This function deletes an entry with the given key from the tree.
     * @param {number} key - the key of the entry to be deleted
     */
    delete(key: number): void {
        let current = this.root; // start from the root
        let parent = null; // keep track of parent node

        // find the node with the given key
        while (current && current.key !== key) {
            parent = current;

            if (key < current.key) {
                current = current.left; // if key is less than current key, move left
            } else {
                current = current.right; // else, move right
            }
        }

        // if node with given key not found, return
        if (!current) {
            return;
        }

        // if node has no children, simply remove it
        if (!current.left && !current.right) {
            // if node to be removed is the root, set root to null
            if (current === this.root) {
                this.root = null;
            } else if (current === parent.left) {
                parent.left = null; // if node to be removed is a left child, set parent's left child to null
            } else {
                parent.right = null; // else, set parent's right child to null
            }
        }
        // if node has one child, replace it with that child
        else if (!current.left || !current.right) {
            // if node to be removed is the root, set root to its only child
            if (current === this.root) {
                this.root = current.left || current.right;
            } else if (current === parent.left) {
                // if node to be removed is a left child, set parent's left child to its only child
                parent.left = current.left || current.right;
            } else {
                // else, set parent's right child to its only child
                parent.right = current.left || current.right;
            }
        }
        // if node has two children, find the minimum node in its right subtree and replace it with that
        else {
            let successorParent = current; // parent of successor node
            let successor = current.right; // successor node

            // find minimum node in right subtree
            while (successor.left) {
                successorParent = successor;
                successor = successor.left;
            }

            // set current node's value to successor node's value
            current.key = successor.key;
            current.value = successor.value;

            // if successor node has a right child, replace it with that child
            if (successor.right) {
                successorParent.left = successor.right;
            } else {
                // else, set parent's left child to null
                successorParent.left = null;
            }
        }
    }

    /**
     * This function searches for the value associated with the given key in the tree.
     * @param {number} key - the key of the entry to search for
     * @returns {any | null} - the value associated with the given key, or null if key not found
     */
    search(key: number): any | null {
        let current = this.root; // start from the root

        // traverse the tree until key is found or we reach a node with no children
        while (current && current.key !== key) {
            if (key < current.key) {
                current = current.left; // if key is less than current key, move left
            } else {
                current = current.right; // else, move right
            }
        }

        // if key not found, return null
        if (!current) {
            return null;
        }

        return current.value; // key found, return value associated with it
    }
}

/**
 * This class represents a node in a TreeMap.
 * Each node contains a key-value pair and references to its left and right children.
 */
class Node {
    public key: number; // the key of the entry
    public value: any; // the value associated with the key
    public left: Node | null; // reference to left child
    public right: Node | null; // reference to right child

    constructor(key: number, value: any) {
        this.key = key;
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

// Example usage:

const tree = new TreeMap();

// insert entries into tree
tree.insert(5, 'apple');
tree.insert(3, 'banana');
tree.insert(8, 'orange');
tree.insert(1, 'peach');
tree.insert(6, 'grape');
tree.insert(9, 'strawberry');
tree.insert(4, 'mango');
tree.insert(2, 'kiwi');
tree.insert(7, 'pear');

// search for values associated with keys
console.log(tree.search(8)); // output: orange
console.log(tree.search(1)); // output: peach
console.log(tree.search(3)); // output: banana
console.log(tree.search(10)); // output: null

// delete entries
tree.delete(1);
tree.delete(6);

// search for values associated with keys again
console.log(tree.search(1)); // output: null
console.log(tree.search(6)); // output: null
console.log(tree.search(5)); // output: apple
console.log(tree.search(9)); // output: strawberry