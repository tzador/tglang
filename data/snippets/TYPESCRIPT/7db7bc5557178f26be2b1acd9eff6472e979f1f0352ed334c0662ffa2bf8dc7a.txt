interface Person {
	// This interface represents a Person with basic information
	firstName: string; 		// first name of the person
	lastName: string;		// last name of the person
	age: number;			// age of the person, in years
	gender: 'male' | 'female' | 'other'; 	// gender of the person, can only be 'male', 'female', or 'other'
	
	// Calculates the full name of the person by combining first and last name
	getFullName(): string;
	// Calculates the birth year of the person by subtracting their age from the current year
	getBirthYear(): number;
}

class Student implements Person {
	// This class represents a student who is also a person
	id: number;		// student ID number
	grades: number[];	// array of grades for each class, in order of course number
	major: string;		// student's major area of study

	constructor(firstName: string, lastName: string, age: number, gender: 'male' | 'female' | 'other', id: number, grades: number[], major: string) {
		// initialize properties from the Person interface
		this.firstName = firstName;
		this.lastName = lastName;
		this.age = age;
		this.gender = gender;
		// initialize custom properties for Student
		this.id = id;
		this.grades = grades;
		this.major = major;
	}

	getFullName(): string {
		// combines first and last name to create full name
		return `${this.firstName} ${this.lastName}`;
	}

	getBirthYear(): number {
		// calculates birth year by subtracting age from current year
		return (new Date()).getFullYear() - this.age;
	}
}