// Define a generic class that implements the IList interface
class List<T> implements IList<T> {
  private list: T[]; // private property to store the list of items

  // constructor to initialize the list as an empty array
  constructor() {
    this.list = [];
  }

  // function to add an item to the list
  add(item: T) {
    this.list.push(item);
  }

  // function to get an item at a specific index in the list
  get(index: number) {
    return this.list[index];
  }

  // function to remove an item from the list
  remove(index: number) {
    this.list.splice(index, 1);
  }

  // function to check if the list contains a specific item
  contains(item: T) {
    return this.list.includes(item);
  }

  // function to return the size of the list
  size() {
    return this.list.length;
  }
}

// Define an interface for generic list
interface IList<T> {
  add(item: T): void;
  get(index: number): T;
  remove(index: number): void;
  contains(item: T): boolean;
  size(): number;
}

// Create a new list of strings
const stringList: List<string> = new List<string>();

// Add items to the list
stringList.add("Hello");
stringList.add("World");
stringList.add("!");

// Print the size of the list
console.log(stringList.size()); // Output: 3

// Print the first item in the list
console.log(stringList.get(0)); // Output: Hello

// Check if the list contains a specific item
console.log(stringList.contains("World")); // Output: true

// Remove an item from the list
stringList.remove(1); // Removes "World" from the list

// Print the updated size of the list
console.log(stringList.size()); // Output: 2

// Print the first item in the list again
console.log(stringList.get(0)); // Output: Hello