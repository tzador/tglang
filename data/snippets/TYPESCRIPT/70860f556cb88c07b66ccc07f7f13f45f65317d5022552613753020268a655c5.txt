type User = {
  name: string;
  age: number;
  isAdmin: boolean;
};

interface ICar {
  make: string;
  model: string;
  year: number;
  color?: string;
  features?: string[];
  start: () => void;
  drive: (distance: number) => void;
  stop: () => void;
}

class Car implements ICar {
  make: string;
  model: string;
  year: number;
  color: string;
  features: string[];

  constructor(make: string, model: string, year: number, color: string, features: string[]) {
    this.make = make;
    this.model = model;
    this.year = year;
    this.color = color;
    this.features = features;
  }

  start() {
    console.log(`Starting ${this.make} ${this.model}`);
  }

  drive(distance: number) {
    console.log(`Driving ${distance} miles in ${this.make} ${this.model}`);
  }

  stop() {
    console.log(`Stopping ${this.make} ${this.model}`);
  }
}

const myCar = new Car("Toyota", "Camry", 2020, "red", ["backup camera", "blind spot assist"]);
myCar.start();
myCar.drive(10);
myCar.stop();

const max = (num1: number, num2: number): number => {
  if (num1 > num2) {
    return num1;
  } else {
    return num2;
  }
};

console.log(`The larger number is: ${max(5, 10)}`);