interface Person {
  name: string; // interface with a property that accepts a string value as the name of a person
  age: number; // interface with a property that accepts a number value as the age of a person
  hobbies?: string[]; // optional property that accepts an array of strings as a person's hobbies
  greet: (phrase: string) => void; // interface with a function that accepts a string as a greeting
}

class Employee implements Person {
  name: string; // property that accepts a string value as the name of an employee
  age: number; // property that accepts a number value as the age of an employee
  salary: number; // property that accepts a number value as the salary of an employee
  constructor(name: string, age: number, salary: number) { // constructor function that accepts name, age and salary as parameters
    this.name = name; // sets the value of name property to the passed in name
    this.age = age; // sets the value of age property to the passed in age
    this.salary = salary; // sets the value of salary property to the passed in salary
  }
  greet(phrase: string) { // greet function that accepts a string as a greeting
    console.log(`${phrase}, my name is ${this.name} and I am ${this.age} years old.`); // logs a greeting statement with the employee's name and age
  }
  promote(newSalary: number) { // function that accepts a number as the new salary
    this.salary = newSalary; // sets the value of salary property to the passed in new salary
  }
  addToHobbies(hobby: string) { // function that accepts a string as a new hobby
    if (!this.hobbies) { // checks if hobbies property is null or undefined
      this.hobbies = []; // initializes it as an array if it is null or undefined
    }
    this.hobbies.push(hobby); // adds the new hobby to the array
  }
}

const employee = new Employee("John", 30, 50000); // creates a new employee object with name, age and salary passed in as arguments
employee.greet("Hello"); // calls the greet function with a greeting as an argument
employee.promote(60000); // calls the promote function with a new salary as an argument
employee.addToHobbies("gaming"); // calls the addToHobbies function with a new hobby as an argument

console.log(employee.name); // logs the name property of the employee
console.log(employee.age); // logs the age property of the employee
console.log(employee.salary); // logs the salary property of the employee
console.log(employee.hobbies); // logs the hobbies property of the employee

// Output:
//
// Hello, my name is John and I am 30 years old.
// John
// 30
// 60000
// ["gaming"]