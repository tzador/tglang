/**
 * A class representing a geometric shape.
 */
class Shape {
  /**
   * The x-coordinate of the shape's center.
   */
  private _x: number;

  /**
   * The y-coordinate of the shape's center.
   */
  private _y: number;

  /**
   * Constructor for the Shape class.
   * @param {number} x The x-coordinate of the shape's center.
   * @param {number} y The y-coordinate of the shape's center.
   */
  constructor(x: number, y: number) {
    this._x = x;
    this._y = y;
  }

  /**
   * Get the x-coordinate of the shape's center.
   * @returns {number} The x-coordinate of the shape's center.
   */
  public get x(): number {
    return this._x;
  }

  /**
   * Set the x-coordinate of the shape's center.
   * @param {number} value The new x-coordinate of the shape's center.
   */
  public set x(value: number) {
    this._x = value;
  }

  /**
   * Get the y-coordinate of the shape's center.
   * @returns {number} The y-coordinate of the shape's center.
   */
  public get y(): number {
    return this._y;
  }

  /**
   * Set the y-coordinate of the shape's center.
   * @param {number} value The new y-coordinate of the shape's center.
   */
  public set y(value: number) {
    this._y = value;
  }

  /**
   * Method that calculates the area of the shape.
   * @abstract
   * @returns {number} The area of the shape.
   */
  public calculateArea(): number {
    throw new Error('Method not implemented.');
  }
}

/**
 * A class representing a rectangle shape.
 * @extends Shape
 */
class Rectangle extends Shape {
  /**
   * The width of the rectangle.
   */
  private _width: number;

  /**
   * The height of the rectangle.
   */
  private _height: number;

  /**
   * Constructor for the Rectangle class.
   *
   * @param {number} x The x-coordinate of the rectangle's center.
   * @param {number} y The y-coordinate of the rectangle's center.
   * @param {number} width The width of the rectangle.
   * @param {number} height The height of the rectangle.
   */
  constructor(x: number, y: number, width: number, height: number) {
    super(x, y);
    this._width = width;
    this._height = height;
  }

  /**
   * Get the width of the rectangle.
   * @returns {number} The width of the rectangle.
   */
  public get width(): number {
    return this._width;
  }

  /**
   * Set the width of the rectangle.
   * @param {number} value The new width of the rectangle.
   */
  public set width(value: number) {
    this._width = value;
  }

  /**
   * Get the height of the rectangle.
   * @returns {number} The height of the rectangle.
   */
  public get height(): number {
    return this._height;
  }

  /**
   * Set the height of the rectangle.
   * @param {number} value The new height of the rectangle.
   */
  public set height(value: number) {
    this._height = value;
  }

  /**
   * Calculate the area of the rectangle.
   * @returns {number} The area of the rectangle.
   */
  public calculateArea(): number {
    return this._width * this._height;
  }
}

/**
 * Create a new rectangle with a center of (0,0), width of 5, and height of 10.
 */
const rectangle = new Rectangle(0, 0, 5, 10);

/**
 * Get the area of the rectangle.
 */
const area = rectangle.calculateArea();