// Define a generic class with a constructor that takes in a value of type 'T'
class Container<T> {
  private value: T;

  constructor(value: T) {
    this.value = value;
  }

  // Define a method that returns the current value
  getValue(): T {
    return this.value;
  }

  // Define a method that takes in a value of type 'U' and sets it as the current value
  setValue<U extends T>(value: U) {
      this.value = value;
  }
}

// Create an instance of the Container class with a string as the value
const stringContainer = new Container<string>("Hello World");

// Create an instance of the Container class with a number as the value
const numberContainer = new Container<number>(10);

// Attempt to set a different type as the value (this will result in an error)
const errorContainer = new Container<number>("Hello World");

// Call the getValue method on the stringContainer and log the result to the console
console.log(stringContainer.getValue());

// Call the setValue method on the stringContainer with a new string value
stringContainer.setValue("Hello Typescript");

// Call the getValue method on the stringContainer again and log the result to the console (should now be "Hello Typescript")
console.log(stringContainer.getValue());

// Call the getValue method on the numberContainer and log the result to the console
console.log(numberContainer.getValue());

// Call the setValue method on the numberContainer with a new number value
numberContainer.setValue(25);

// Call the getValue method on the numberContainer again and log the result to the console (should now be 25)
console.log(numberContainer.getValue());