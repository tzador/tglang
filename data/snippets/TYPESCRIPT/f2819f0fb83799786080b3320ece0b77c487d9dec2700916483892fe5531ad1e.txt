/** 
 * This is a TypeScript interface for a generic class
 * that can have a type parameter T
 */
interface MyClass<T> {
  property1: string; // a property of type string
  property2?: number; // an optional property of type number
  method1: (param1: T) => void; // a method that takes in a parameter of type T and returns void
  method2: <U extends string>(param1: U) => T; // a generic method that takes in a parameter of type U which extends string and returns type T
}

/**
 * This is a TypeScript class that implements the above interface
 * with a type parameter of type number
 */
class MyNumberClass implements MyClass<number> {
  property1 = 'property1'; // assigning value to property1
  method1(param1: number) { // defining method1
    console.log(param1); // logging the value of param1 to the console
  }
  method2(param1: string) { // defining method2
    return parseInt(param1); // converting param1 to a number and returning it
  }
}