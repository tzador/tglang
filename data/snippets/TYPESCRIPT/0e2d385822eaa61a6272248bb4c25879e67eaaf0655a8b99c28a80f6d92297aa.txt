// Creating a generic class
class Queue<T> {
    private data: T[];
    private front: number;
    private back: number;

    constructor() {
        this.data = [];
        this.front = 0;
        this.back = 0;
    }

    // Adding an element to the back of the queue
    enqueue(element: T) {
        this.data[this.back] = element;
        this.back++;
    }

    // Removing an element from the front of the queue
    dequeue(): T | undefined {
        if (!this.isEmpty()) {
            const element = this.data[this.front];
            delete this.data[this.front];
            this.front++;
            return element;
        }
    }

    // Checking if the queue is empty
    isEmpty(): boolean {
        return this.front === this.back;
    }

    // Getting the size of the queue
    size(): number {
        return this.back - this.front;
    }

    // Getting the front element of the queue
    peek(): T | undefined {
        if (this.isEmpty()) {
            return undefined;
        }

        return this.data[this.front];
    }
}

// Example usage
const queue = new Queue<string>();

queue.enqueue("Hello");
queue.enqueue("World");
queue.enqueue("!");

console.log(queue.size()); // Output: 3
console.log(queue.peek()); // Output: Hello
console.log(queue.dequeue()); // Output: Hello
console.log(queue.peek()); // Output: World
console.log(queue.size()); // Output: 2