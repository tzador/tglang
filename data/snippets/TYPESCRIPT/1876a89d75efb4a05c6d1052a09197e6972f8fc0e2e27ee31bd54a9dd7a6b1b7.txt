// Type annotation for a function
function getProduct(name: string, price: number): object {
  return { name, price }
}

// Interface for a product object
interface Product {
  name: string
  price: number
}

let product: Product = {
  name: 'shirt',
  price: 25
}

// Type annotation for a variable of type any
let quantity: any = '3'
quantity = 3

// Type alias for a union type
type ID = number | string

// Generic function that takes in an array of generic type
function filterArray<T>(array: T[], filterFunction: (element: T) => boolean): T[] {
  const filteredArray: T[] = []

  for (const element of array) {
    if (filterFunction(element)) {
      filteredArray.push(element)
    }
  }

  return filteredArray
}

// Type inference for a variable
let stock = 10

// Object with union type for key-value pairs
let productOptions: { [key: string]: ID } = {
  color: 12345,
  size: 'small'
}

// Optional parameter in a function
function calculateSalePrice(basePrice: number, discount?: number): number {
  if (discount) {
    return basePrice - discount
  }
  return basePrice
}

// Type assertion with '<>' syntax
let someValue: any = 'a string'
let stringLength: number = (someValue as string).length

// Class with type annotations for properties and methods
class ShoppingCart {
  products: Product[]
  constructor() {
    this.products = []
  }

  addProduct(product: Product): void {
    this.products.push(product)
  }

  removeProduct(productName: string): void {
    this.products = this.products.filter(product => product.name !== productName)
  }
}