let firstName: string = "John"; // variable declaration with type annotation

function greet(name: string): string {
  return `Hello, ${name}!`; // returning a string with template literal
}

console.log(greet(firstName)); // calling the function and passing in the variable as an argument

class Person {
  private age: number; // private property with explicit type declaration

  constructor(age: number) { // constructor function with argument of type number
    this.age = age; // assigning the argument value to the private property
  }

  getAge(): number { // method that returns a number
    return this.age; // returning the value of the private property
  }
}

const person = new Person(25); // creating an instance of the Person class
console.log(person.getAge()); // calling the getAge method and logging the return value

interface Shape { // interface declaration for a Shape
  name: string; // property with implicit type of string
  calculateArea(): number; // method that returns a number
}

class Rectangle implements Shape { // implementing the Shape interface with the Rectangle class
  name: string; // declaring the name property

  constructor(name: string) {
    this.name = name; // assigning the argument value to the name property
  }

  calculateArea(): number { // implementing the calculateArea method
    return 10 * 5; // returning the area of the rectangle
  }
}

const rectangle = new Rectangle("Rectangle"); // creating an instance of the Rectangle class
console.log(`${rectangle.name} has an area of ${rectangle.calculateArea()}`); // logging the name and calculated area of the rectangle