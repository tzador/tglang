// Define a custom interface for a person
interface Person {
  name: string; // This property stores the person's name
  age: number; // This property stores the person's age
  gender: string; // This property stores the person's gender
  address?: string; // This property is optional and stores the person's address
  [key: string]: any; // This index signature allows for additional properties in the interface
}

// Create a class that implements the Person interface
class Employee implements Person {
  name: string; // This property stores the employee's name
  age: number; // This property stores the employee's age
  gender: string; // This property stores the employee's gender
  position: string; // This property stores the employee's position
  salary: number; // This property stores the employee's salary

  // Create a constructor that initializes the properties
  constructor(name: string, age: number, gender: string, position: string, salary: number) {
    this.name = name;
    this.age = age;
    this.gender = gender;
    this.position = position;
    this.salary = salary;
  }

  // Implement a method that returns the employee's information
  getInfo(): string {
    return `${this.name} is ${this.age} years old, identifies as ${this.gender}, and works as a ${this.position} with a salary of $${this.salary} per year.`;
  }
}

// Create an instance of the Employee class
const employee = new Employee("John", 30, "male", "software developer", 100000);

// Call the getInfo() method on the employee instance
console.log(employee.getInfo()); // Output: John is 30 years old, identifies as male, and works as a software developer with a salary of $100000 per year.