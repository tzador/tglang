/**
 * A class representing a mathematical vector
 */
class Vector {
    private x: number; // the x component of the vector
    private y: number; // the y component of the vector
    private z: number; // the z component of the vector
    private magnitude: number; // the magnitude of the vector

    /**
     * Constructs a new Vector with the given x, y, and z components
     * @param x - The x component of the vector
     * @param y - The y component of the vector
     * @param z - The z component of the vector
     */
    constructor(x: number, y: number, z: number) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.magnitude = Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2) + Math.pow(this.z, 2));
    }

    /**
     * Returns the x component of the vector
     */
    getX(): number {
        return this.x;
    }

    /**
     * Returns the y component of the vector
     */
    getY(): number {
        return this.y;
    }

    /**
     * Returns the z component of the vector
     */
    getZ(): number {
        return this.z;
    }

    /**
     * Returns the magnitude of the vector
     */
    getMagnitude(): number {
        return this.magnitude;
    }

    /**
     * Sets the x component of the vector
     * @param x - The new x component
     */
    setX(x: number): void {
        this.x = x;
        this.magnitude = Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2) + Math.pow(this.z, 2));
    }

    /**
     * Sets the y component of the vector
     * @param y - The new y component
     */
    setY(y: number): void {
        this.y = y;
        this.magnitude = Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2) + Math.pow(this.z, 2));
    }

    /**
     * Sets the z component of the vector
     * @param z - The new z component
     */
    setZ(z: number): void {
        this.z = z;
        this.magnitude = Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2) + Math.pow(this.z, 2));
    }

    /**
     * Adds another vector to this vector
     * @param vector - The vector to add
     */
    add(vector: Vector): Vector {
        let x = this.x + vector.getX();
        let y = this.y + vector.getY();
        let z = this.z + vector.getZ();
        return new Vector(x, y, z);
    }

    /**
     * Subtracts another vector from this vector
     * @param vector - The vector to subtract
     */
    subtract(vector: Vector): Vector {
        let x = this.x - vector.getX();
        let y = this.y - vector.getY();
        let z = this.z - vector.getZ();
        return new Vector(x, y, z);
    }

    /**
     * Multiplies this vector by a scalar value
     * @param scalar - The value to multiply by
     */
    multiply(scalar: number): Vector {
        let x = this.x * scalar;
        let y = this.y * scalar;
        let z = this.z * scalar;
        return new Vector(x, y, z);
    }

    /**
     * Returns a string representation of the vector
     */
    toString(): string {
        return `(${this.x}, ${this.y}, ${this.z})`;
    }
}

// Create a new vector with x = 3, y = 4, z = 5
let testVector: Vector = new Vector(3, 4, 5);
console.log(testVector.toString()); // output: (3, 4, 5)

// Add a vector with x = 1, y = 2, z = 3 to the test vector
testVector = testVector.add(new Vector(1, 2, 3));
console.log(testVector.toString()); // output: (4, 6, 8)

// Multiply the test vector by 2
testVector = testVector.multiply(2);
console.log(testVector.toString()); // output: (8, 12, 16)