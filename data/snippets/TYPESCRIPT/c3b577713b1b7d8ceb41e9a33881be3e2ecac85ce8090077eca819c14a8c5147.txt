// This is a complex function that takes in an array of numbers and a sorted array to insert the numbers into
// The function returns a sorted array after the insertion
const insertIntoSortedArray = (numArray: number[], sortedArray: number[]): number[] => {
  const newArray: number[] = [...sortedArray];
  for (let i = 0; i < numArray.length; i++) {
    // Binary search to find the correct position to insert the number into the sorted array
    let low = 0;
    let high = sortedArray.length - 1;
    let mid = 0;
    while (low <= high) {
      mid = Math.floor((low + high) / 2);
      if (numArray[i] === sortedArray[mid]) {
        // Insert the number at the current position if it is equal to the value at the mid point
        newArray.splice(mid, 0, numArray[i]);
        break;
      } else if (numArray[i] > sortedArray[mid]) {
        // If the number is greater than the value at the mid point, search the upper half of the array
        low = mid + 1;
      } else {
        // If the number is less than the value at the mid point, search the lower half of the array
        high = mid - 1;
      }
    }
    if (low > high) {
      // Insert the number at the correct position, determined by the low and high values
      newArray.splice(low, 0, numArray[i]);
    }
  }
  return newArray;
}