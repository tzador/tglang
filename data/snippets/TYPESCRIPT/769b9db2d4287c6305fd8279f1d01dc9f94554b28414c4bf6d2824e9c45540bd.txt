/**
 * This is a complex code snippet written in TypeScript
 * The code performs several operations on an array of numbers
 */

// Defining an interface for a number
interface NumberObject {
  value: number;
}

// Creating an array of number objects
const numbers: NumberObject[] = [
  { value: 5 },
  { value: 10 },
  { value: 15 },
  { value: 20 }
];

// Function to filter out even numbers and return the square of the remaining numbers
const filterAndSquare = (arr: NumberObject[]): number[] => {
  const filteredNumbers: NumberObject[] = arr.filter((obj: NumberObject) => {
    return obj.value % 2 !== 0;
  });

  const squaredNumbers: number[] = filteredNumbers.map((obj: NumberObject) => {
    return obj.value ** 2;
  });

  return squaredNumbers;
};

// Call the filterAndSquare function and store the result in a variable
const result: number[] = filterAndSquare(numbers);

// Loop through the result and log each number to the console
console.log('Squared numbers:');
for (let i = 0; i < result.length; i++) {
  console.log(result[i]);
}

// Function to find the sum of all numbers in an array
const sum = (arr: number[]): number => {
  return arr.reduce((acc: number, num: number) => acc + num, 0);
};

// Calculate the total sum of the numbers in the result array
const totalSum: number = sum(result);

// Log the total sum to the console
console.log('Total sum:');
console.log(totalSum);