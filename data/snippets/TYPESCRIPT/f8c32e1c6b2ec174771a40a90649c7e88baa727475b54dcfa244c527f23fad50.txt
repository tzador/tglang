//This is a typescript code snippet that uses a class and interfaces to create a complex data structure
//First, we declare an interface for a custom data type called 'Employee'
interface Employee {
    name: string; // name attribute of type string
    age: number; // age attribute of type number
    position: string; //position attribute of type string
    salary: number; // salary attribute of type number
}

//Next, we declare a class that implements the Employee interface
class CompanyEmployee implements Employee {
    //Class attributes of different data types
    private name: string;
    private age: number;
    private position: string;
    private salary: number;

    //Constructor to initialize the object with values
    constructor(name: string, age: number, position: string, salary: number) {
        this.name = name;
        this.age = age;
        this.position = position;
        this.salary = salary;
    }
    //Getter method for name attribute
    get employeeName(): string {
        return this.name;
    }
    //Setter method for salary attribute
    set employeeSalary(salary: number) {
        this.salary = salary;
    }
}

//An array of objects created using the CompanyEmployee class
const employees: CompanyEmployee[] = [
    new CompanyEmployee("John Smith", 32, "Manager", 5000),
    new CompanyEmployee("Jane Doe", 28, "Developer", 4000),
    new CompanyEmployee("Bob Johnson", 35, "Designer", 4500)
];

//Function that prints the details of the employees in the array
function printEmployees(employees: CompanyEmployee[]): void {
    console.log("Name \t\t Age \t\t Position \t\t Salary");
    console.log("----------------------------------------------------")
    employees.forEach((employee) => {
        console.log(`${employee.employeeName}\t\t${employee.age}\t\t${employee.position}\t\t${employee.salary}`)
    })
}

//Calling the function to print the array of employees
printEmployees(employees);