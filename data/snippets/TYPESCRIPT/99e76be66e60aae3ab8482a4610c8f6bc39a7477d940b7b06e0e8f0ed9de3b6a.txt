/*
Creating a generic class in TypeScript
*/

// defining a class with generic type <T>
class Container<T> {
  private _value: T;

  // constructor with generic type parameter
  constructor(value: T) {
    this._value = value;
  }

  // setter function to set the value of the class
  set(value: T) {
    this._value = value
  }

  // getter function to get the value of the class
  get() {
    return this._value
  }
}

// creating an instance of the Container class with string type
const stringContainer = new Container<string>("Hello World!");

// setting the value of the instance to a new string
stringContainer.set("Hello TypeScript!");

// getting the new value
console.log(stringContainer.get()); // output: Hello TypeScript!

// creating an instance of the Container class with number type
const numberContainer = new Container<number>(100);

// setting the value of the instance to a new number
numberContainer.set(200);

// getting the new value
console.log(numberContainer.get()); // output: 200