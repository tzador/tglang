interface Person {

    // Properties
    firstName: string; // Stores the person's first name
    lastName: string; // Stores the person's last name
    age?: number; // Stores the person's age (optional)

    // Methods
    sayHello(): void; // Prints a greeting with the person's name
    getFullName(): string; // Returns the person's full name

}

class Student implements Person {

    // Properties
    firstName: string;
    lastName: string;
    age: number;
    major: string; // Stores the student's major subject
    gpa: number; // Stores the student's grade point average

    constructor(firstName: string, lastName: string, age: number, major: string, gpa: number) { // Constructor that initializes the properties
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.major = major;
        this.gpa = gpa;
    }

    // Methods
    sayHello(): void { // Implementation of the sayHello() method declared in the Person interface
        console.log(`Hello, my name is ${this.getFullName()}.`);
    }

    getFullName(): string { // Implementation of the getFullName() method declared in the Person interface
        return `${this.firstName} ${this.lastName}`;
    }

    calculateGPA(): number { // Calculates the student's GPA by multiplying their grade point average by 4
        return this.gpa * 4;
    }

}

// Creating an instance of the Student class
const john: Student = new Student("John", "Smith", 20, "Computer Science", 3.8);

john.sayHello(); // Output: Hello, my name is John Smith.
console.log(john.getFullName()); // Output: John Smith
console.log(john.calculateGPA()); // Output: 15.2