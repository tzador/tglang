/**
 * This is a class decorator that logs the name of the class and its constructor arguments
 */
function logger(target: any) {
    return class extends target {
        constructor(...args: any[]) {
            console.log(`Creating instance of class ${target.name} with arguments:`, args);
            super(...args);
        }
    }
}

/**
 * This is a generic interface representing an object with a 'name' property of type string
 */
interface NamedObject<T> {
    name: T;
}

/**
 * This is a generic class that stores and retrieves values based on a key
 */
class Storage<T> {
    private storage: { [key: string]: T } = {};

    /**
     * This method adds a new key-value pair to the storage
     * @param key - the key of the value
     * @param value - the value to store
     */
    add(key: string, value: T) {
        this.storage[key] = value;
    }

    /**
     * This method retrieves the value associated with the given key
     * @param key - the key of the value to retrieve
     * @returns T - the retrieved value
     */
    get(key: string): T {
        return this.storage[key];
    }
}

/**
 * This is a decorator factory function that binds a target method to its class instance
 * @returns MethodDecorator - the decorator function to bind the method to its class instance
 */
function bindMethod(): MethodDecorator {
    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {
        let originalMethod = descriptor.value;
        descriptor.value = function(...args: any[]) {
            return originalMethod.apply(this, args);
        }
        return descriptor;
    }
}

/**
 * This is a class with a decorated method and a constructor that uses the logger decorator
 */
@logger
class MyClass implements NamedObject<string> {
    name: string;

    constructor(name: string) {
        this.name = name;
    }

    /**
     * This method uses the bindMethod decorator to bind it to its class instance
     */
    @bindMethod()
    greet(greeting: string) {
        console.log(`${greeting} ${this.name}!`);
    }
}

// Creating instance of class MyClass with arguments: ["John"]
let myObject = new MyClass("John");

// Adding key-value pair to storage
myObject.greet("Hello"); // Output: Hello John!
let myStorage = new Storage<number>();
myStorage.add("age", 26);

// Retrieving value from storage
let age = myStorage.get("age"); // age is of type number