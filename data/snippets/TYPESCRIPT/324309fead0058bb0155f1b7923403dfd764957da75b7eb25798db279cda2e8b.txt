/**
 * This is a complex class that represents a bank account.
 * It includes properties for account holder name, account number,
 * balance, and an array for storing transactions.
 */
class BankAccount {
  private accountHolderName: string; // stores name of account holder
  private accountNumber: string; // stores account number
  private balance: number; // stores current balance
  private transactions: number[]; // stores list of transactions

  constructor(accountHolderName: string, accountNumber: string, balance: number) {
    this.accountHolderName = accountHolderName;
    this.accountNumber = accountNumber;
    this.balance = balance;
    this.transactions = []; // initialize transactions array
  }

  /**
   * This method allows the user to deposit a specified amount into
   * the account and updates the balance and transaction list.
   * @param amount the amount to be deposited
   */
  public deposit(amount: number): void {
    this.balance += amount; // update balance
    this.transactions.push(amount); // add deposit transaction to list
    console.log(`Successfully deposited $${amount} into account.`); // print success message
  }

  /**
   * This method allows the user to withdraw a specified amount from
   * the account if the balance is sufficient. It also updates the
   * balance and transaction list accordingly.
   * @param amount the amount to be withdrawn
   */
  public withdraw(amount: number): void {
    // check if balance is sufficient for withdrawal
    if (amount <= this.balance) {
      this.balance -= amount; // update balance
      this.transactions.push(-amount); // add withdrawal transaction to list
      console.log(`Successfully withdrew $${amount} from account.`); // print success message
    } else {
      console.log("Insufficient funds."); // print error message if balance is insufficient
    }
  }

  /**
   * This method returns the current balance of the account.
   * @returns the current balance
   */
  public getBalance(): number {
    return this.balance; // return current balance
  }

  /**
   * This method returns the account holder's name.
   * @returns the account holder's name
   */
  public getAccountHolderName(): string {
    return this.accountHolderName; // return account holder's name
  }

  /**
   * This method returns the account number.
   * @returns the account number
   */
  public getAccountNumber(): string {
    return this.accountNumber; // return account number
  }

  /**
   * This method prints out a summary of the account information,
   * including the account holder's name, account number, and
   * current balance.
   */
  public printSummary(): void {
    console.log(`Account Holder Name: ${this.accountHolderName}`);
    console.log(`Account Number: ${this.accountNumber}`);
    console.log(`Current Balance: $${this.balance}`);
  }
}

/**
 * This is where we create an instance of the BankAccount class
 * and call its methods to demonstrate functionality.
 */
const myAccount = new BankAccount("John Doe", "1234567890", 1000); // create new instance with initial balance of $1000
myAccount.printSummary(); // print initial summary

myAccount.deposit(500); // deposit $500
myAccount.withdraw(200); // withdraw $200
myAccount.withdraw(1500); // attempt to withdraw $1500 (insufficient funds)
myAccount.printSummary(); // print updated summary