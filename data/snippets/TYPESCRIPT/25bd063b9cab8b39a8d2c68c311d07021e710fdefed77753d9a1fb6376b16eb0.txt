// Create a type alias for a function that takes in two parameters, x and y, and returns a string
type MyFunction = (x: number, y: number) => string;

// Create a class called Calculator with a constructor that takes in a number and saves it to a private property
class Calculator {
  private num: number;

  constructor(num: number) {
    this.num = num;
  }

  // Create a static method called add that takes in two numbers and returns their sum
  static add(x: number, y: number): number {
    return x + y;
  }

  // Create a method called multiply that takes in a number and multiplies it with the private property and returns the result
  multiply(x: number): number {
    return this.num * x;
  }

  // Create a generic method called map that takes in an array of type T, a function of type MyFunction and returns an array of strings
  map<T>(arr: T[], func: MyFunction): string[] {
    return arr.map((num) => func(num, this.num).toString());
  }
}

// Create an instance of the Calculator class with the number 5 passed into the constructor
let calc = new Calculator(5);

// Call the add method on the static Calculator class and pass in the numbers 3 and 4. The output should be 7.