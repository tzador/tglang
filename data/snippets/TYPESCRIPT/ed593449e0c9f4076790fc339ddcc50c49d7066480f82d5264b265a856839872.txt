type User = {
  name: string;
  age: number;
  address: string;
  phone: string;
}

interface IUserService {
  getAllUsers(): Promise<User[]>;
  getUserById(id: string): Promise<User | null>;
  addUser(user: User): Promise<User>;
  editUser(id: string, updatedUser: User): Promise<User>;
  deleteUser(id: string): Promise<void>;
}

class UserService implements IUserService {
  private users: User[];

  constructor() {
    this.users = [];
  }

  getAllUsers(): Promise<User[]> {
    return new Promise((resolve, reject) => {
      if (this.users.length > 0) {
        resolve(this.users);
      } else {
        reject('No users found');
      }
    });
  }

  getUserById(id: string): Promise<User | null> {
    return new Promise((resolve, reject) => {
      const foundUser = this.users.find((user) => user.id === id);
      if (foundUser) {
        resolve(foundUser);
      } else {
        reject(`User with id ${id} not found`);
      }
    });
  }

  addUser(user: User): Promise<User> {
    return new Promise((resolve, reject) => {
      if (this.users.find((u) => u.name === user.name)) {
        reject('User already exists');
      } else {
        this.users.push(user);
        resolve(user);
      }
    });
  }

  editUser(id: string, updatedUser: User): Promise<User> {
    return new Promise((resolve, reject) => {
      const index = this.users.findIndex((u) => u.id === id);
      if (index > -1) {
        this.users[index] = updatedUser;
        resolve(updatedUser);
      } else {
        reject(`User with id ${id} not found`);
      }
    });
  }

  deleteUser(id: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const index = this.users.findIndex((u) => u.id === id);
      if (index > -1) {
        this.users.splice(index, 1);
        resolve();
      } else {
        reject(`User with id ${id} not found`);
      }
    });
  }

  async exampleMethod(): Promise<void> {
    const allUsers = await this.getAllUsers(); // method calling another method
    const firstUser = await this.getUserById(allUsers[0].id);
    console.log(firstUser.address);
  }
}