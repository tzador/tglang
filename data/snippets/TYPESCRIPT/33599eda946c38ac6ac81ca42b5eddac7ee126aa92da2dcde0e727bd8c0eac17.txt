// Declaring a generic class with a constraint and implementing an interface

class CustomCollection <T extends Product> implements Collection {
    private items: T[];

    constructor() {
        this.items = [];
    }

    add(item: T): void {
        this.items.push(item);
    }

    remove(item: T): void {
        const index = this.items.indexOf(item);
        if (index >= 0) {
            this.items.splice(index, 1);
        }
    }

    clear(): void {
        this.items = [];
    }

    size(): number {
        return this.items.length;
    }

    getItems(): T[] {
        return this.items;
    }
}

// Creating an instance of the custom collection class
let collection = new CustomCollection<Product>();

// Adding two products to the collection
collection.add(new Product("Shirt", "Clothing", 29.99));
collection.add(new Product("Pants", "Clothing", 49.99));

// Printing the number of items in the collection
console.log("Number of items: " + collection.size());

// Removing one product from the collection
collection.remove(new Product("Shirt", "Clothing", 29.99));

// Printing the updated number of items in the collection
console.log("Number of items after removal: " + collection.size());

// Interface for a product
interface Product {
    name: string;
    category: string;
    price: number;
}