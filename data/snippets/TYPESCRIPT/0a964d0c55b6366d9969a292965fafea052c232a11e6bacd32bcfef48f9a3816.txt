/*
    This is a complex code snippet in Typescript that uses interfaces, classes,
    functions, and conditional statements to create an object, update its values,
    and return a string output. 
*/
interface Vehicle {   // Interface defining properties of a vehicle
    type: string,
    model: string,
    year: number,
    color: string
}

class Car implements Vehicle {     // Class implementing the Vehicle interface
    type: string,
    model: string,
    year: number,
    color: string,
    engine: string,
    constructor(type: string, model: string, year: number, color: string, engine: string) {    // Class constructor setting initial values
        this.type = type;
        this.model = model;
        this.year = year;
        this.color = color;
        this.engine = engine;
    }
    startEngine(): void {   // Function to start the car's engine
        console.log(`${this.model} is starting...`);
    }
}

function updateVehicleColor(vehicle: Vehicle, newColor: string): Vehicle {   // Function to update the color property of a vehicle
    vehicle.color = newColor;
    return vehicle;
}

let myCar = new Car("Sedan", "Honda Accord", 2018, "Silver", "1.5L Turbo");   // Creating a new instance of the Car class
console.log(myCar);     // Outputs the car object before updating its color

myCar = updateVehicleColor(myCar, "Black");   // Updating the car's color to "Black"

if (myCar.color === "Black") {   // Conditional statement to check if the car's color is now "Black"
    myCar.startEngine();     // If true, the car's engine starts
} else {
    console.log("Something went wrong.");   // If false, an error message is displayed
}   

// Output: