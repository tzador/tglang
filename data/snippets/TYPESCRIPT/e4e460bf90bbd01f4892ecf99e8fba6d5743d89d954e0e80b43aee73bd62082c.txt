// This is a complex TypeScript class that utilizes inheritance and interfaces
class Vehicle {
  // Properties shared by all child classes
  topSpeed: number;
  acceleration: number;
  wheels: number;

  // Constructor function to initialize properties
  constructor(topSpeed: number, acceleration: number, wheels: number) {
    this.topSpeed = topSpeed;
    this.acceleration = acceleration;
    this.wheels = wheels;
  }

  // Method that calculates the time it takes to reach top speed
  calcAccelerationTime(): number {
    return this.topSpeed / this.acceleration;
  }
}

// Car class that extends from Vehicle and implements the interface
class Car extends Vehicle implements Drivable {
  // Property unique to Cars
  model: string;

  // Constructor function utilizes same properties as Vehicle plus the new model property
  constructor(topSpeed: number, acceleration: number, wheels: number, model: string) {
    super(topSpeed, acceleration, wheels);
    this.model = model;
  }

  // Override method from Vehicle class to include the specific model in the calculation
  calcAccelerationTime(): number {
    let time = super.calcAccelerationTime();
    console.log(`The ${this.model} reaches top speed in ${time} seconds.`);
    return time;
  }
}

// Interface that defines the methods a Drivable class should have
interface Drivable {
  calcAccelerationTime(): number;
}

// Create an instance of the Car class and call the calcAccelerationTime method
let mustang = new Car(250, 10, 4, "Mustang");
mustang.calcAccelerationTime();