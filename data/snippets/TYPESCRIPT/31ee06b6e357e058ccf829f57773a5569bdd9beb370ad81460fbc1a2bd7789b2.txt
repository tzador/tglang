// Define a class with a generic type parameter
class GenericClass<T> {
  private value: T[];

  // Constructor accepts an array of type T and assigns it to value property
  constructor(array: T[]) {
    this.value = array;
  }

  // Method to remove elements from the value property based on a callback function
  remove(callback: (element: T) => boolean): void {
    this.value = this.value.filter(element => !callback(element));
  }

  // Method to add elements to the value property
  add(...elements: T[]): void {
    this.value.push(...elements);
  }

  // Getter method to return the current value property
  get getValue(): T[] {
    return this.value;
  }
}

// Instantiate GenericClass with string type and pass in an array of strings
const stringArray = ['Hello', 'World', 'From', 'TypeScript'];
const stringGeneric = new GenericClass<string>(stringArray);

// Call remove method with callback function to remove any string with less than 5 characters
stringGeneric.remove((element) => element.length < 5);

// Call add method to add a new string
stringGeneric.add('Hello, World!');

// Print the current value property
console.log(stringGeneric.getValue);