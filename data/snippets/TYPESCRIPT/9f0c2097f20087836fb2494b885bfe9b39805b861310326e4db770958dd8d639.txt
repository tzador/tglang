interface Person {
  name: string; // property with a string type
  age?: number; // optional property with a number type
  readonly gender: string; // readonly property with a string type
  [propName: string]: any; // property with a dynamic key and any type
  greet(name: string): void; // method with a string parameter and no return value
  getInfo(): { // method with an object return type
    name: string,
    age: number,
    info: string
  };
}

class Employee implements Person { // class implementing the Person interface
  name: string;
  age?: number;
  gender: string;
  department: string;

  constructor(name: string, gender: string, department: string) { // constructor with parameters
    this.name = name;
    this.gender = gender;
    this.department = department;
  }

  greet(name: string): void { // implement the interface method
    console.log(`Hello ${name}, my name is ${this.name}.`);
  }

  getInfo(): { // implement the interface method
    name: string,
    age: number,
    info: string
  } {
    return { // return object with specified interface properties
      name: this.name,
      age: this.age,
      info: `I am a ${this.gender} employee in ${this.department}.`
    };
  }

  work(hours: number): string { // method with a number parameter and string return type
    return `I worked for ${hours} hours today.`;
  }
}

const john = new Employee("John", "male", "Marketing"); // create new instance of Employee class
john.greet("Sarah"); // call class method

const employeeInfo = john.getInfo(); // call class method and store return value
console.log(employeeInfo.info); // access property from return value
console.log(john.work(8)); // call class method with parameter and print return value