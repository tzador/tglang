// Generic Queue Class
class Queue<T> {
    private queue: T[] = []; // private array property

    // enqueue method to add element to the end of the queue
    enqueue(element: T): void {
        this.queue.push(element);
    }

    // dequeue method to remove element from the front of the queue
    dequeue(): T | undefined {
        return this.queue.shift();
    }

    // peek method to return the element at the front of the queue
    peek(): T | undefined {
        return this.queue[0];
    }

    // isEmpty method to check if the queue is empty
    isEmpty(): boolean {
        return this.queue.length === 0;
    }

    // size method to return the size of the queue
    size(): number {
        return this.queue.length;
    }
}

// Creating a new queue of type string
const myQueue = new Queue<string>();

// Enqueueing elements to the queue
myQueue.enqueue("Hello");
myQueue.enqueue("World");
myQueue.enqueue("!");

// Printing the current state of the queue using template literals
console.log(`Current queue: ${myQueue}`);

// Dequeueing elements from the queue
myQueue.dequeue();
myQueue.dequeue();

// Checking if the queue is empty
console.log(`Is the queue empty? ${myQueue.isEmpty()}`);

// Printing the current state of the queue
console.log(`Current queue size: ${myQueue.size()}`);

// Peeking at the front of the queue
console.log(`Next element in the queue: ${myQueue.peek()}`);