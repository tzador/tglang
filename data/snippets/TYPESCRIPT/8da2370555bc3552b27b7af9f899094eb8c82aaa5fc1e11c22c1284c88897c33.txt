/**
 * Represents a mathematical function in the form of y = mx + b
 * @param m the slope of the function
 * @param b the y-intercept of the function
 */
class LinearFunction {
    constructor(private m: number, private b: number) {}
    /**
     * Returns the output of the function for a given input
     * @param x the input value
     * @returns the output value
     */
    evaluate(x: number): number {
        return (this.m * x) + this.b;
    }

    /**
     * Returns the integral of the function from x1 to x2
     * @param x1 the lower bound of integration
     * @param x2 the upper bound of integration
     * @returns the value of the integral
     */
    integrate(x1: number, x2: number): number {
        return (this.m / 2) * (x2 ** 2 - x1 ** 2) + (this.b * (x2 - x1));
    }

    /**
     * Returns the derivative of the function at a given input
     * @param x the input value
     * @returns the value of the derivative
     */
    differentiate(x: number): number {
        return this.m;
    }
}

// Example usage:
const myFunction = new LinearFunction(2, 5);
console.log(myFunction.evaluate(5)); // output: 15
console.log(myFunction.integrate(2, 4)); // output: 20
console.log(myFunction.differentiate(3)); // output: 2