// Defining a class
class Animal {
  private name: string;

  // Constructor with default values
  constructor(name: string = "unknown") {
    this.name = name;
  }

  // Getter method
  get getName(): string {
    return this.name;
  }

  // Setter method
  set setName(name: string) {
    this.name = name;
  }

  // Method with return type and parameter
  makeSound(sound: string): string {
    return `This animal makes a ${sound} sound`;
  }

  // Static method
  static numberOfLegs = 4;

  // Method that uses a union type
  move(direction: "left" | "right" | "up" | "down"): void {
    console.log(`${this.name} is moving ${direction}.`);
  }
}

// Inheritance
class Dog extends Animal {
  // Overriding the constructor
  constructor(name: string) {
    // Calling the superclass constructor with "super"
    super(name);
  }

  // Overriding the makeSound method
  makeSound(sound: string): string {
    // Calling the superclass method with "super"
    return `${super.makeSound(sound)}, but it also barks!`;
  }
}

// Instantiating a new Dog object with "new" keyword
const myDog = new Dog("Fido");

// Outputting the name using the getter method
console.log(myDog.getName);

// Setting a new name using the setter method
myDog.setName = "Rex";

// Outputting the name again to see the change
console.log(myDog.getName);

// Using the makeSound method with a union type
console.log(myDog.makeSound("woof"));

// Outputting the static variable from the superclass
console.log(Animal.numberOfLegs);

// Using the move method with a valid direction
myDog.move("left");

// Trying to use the move method with an invalid direction will result in an error
myDog.move("forward");