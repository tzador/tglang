// Declaring a class with a generic type
class Stack<T> {
    // Private properties
    private stack: T[];

    // Constructor that initializes an empty stack
    constructor() {
        this.stack = [];
    }

    // Method to add element to the top of the stack
    push(item: T) {
        this.stack.push(item);
    }

    // Method to remove element from the top of the stack
    pop() {
        return this.stack.pop();
    }

    // Method to check if stack is empty
    isEmpty() {
        return this.stack.length === 0;
    }
}

// Creating a new instance of Stack class with type string
const stringStack = new Stack<string>();

// Adding elements to the stack
stringStack.push("Hello");
stringStack.push("World");

// Popping elements off the stack
console.log(stringStack.pop()); // Outputs: "World"
console.log(stringStack.pop()); // Outputs: "Hello"

// Creating a new instance of Stack class with type number
const numberStack = new Stack<number>();

// Adding elements to the stack
numberStack.push(1);
numberStack.push(2);

// Popping elements off the stack
console.log(numberStack.pop()); // Outputs: 2
console.log(numberStack.pop()); // Outputs: 1