// This is a complex code snippet in Typescript

// Defining a generic interface
interface GenericInterface<T> {
  name: string;
  value: T;
}

// Creating a class that implements the generic interface
class GenericClass<T> implements GenericInterface<T> {
  private _name: string;
  private _value: T;

  constructor(name: string, value: T) {
    this._name = name;
    this._value = value;
  }

  // Getter for private _name property
  get name(): string {
    return this._name;
  }
  // Setter for private _name property
  set name(name: string) {
    this._name = name;
  }

  // Getter for private _value property
  get value(): T {
    return this._value;
  }
  // Setter for private _value property
  set value(value: T) {
    this._value = value;
  }

  // Method that returns a string with the name and value
  public summarize(): string {
    return `Name: ${this._name}, Value: ${this._value}`;
  }
}

// Creating an instance of the GenericClass with specified types
const numberObj = new GenericClass<number>("Number Object", 5);
console.log(numberObj.summarize()); // Output: Name: Number Object, Value: 5