// This is a typescript class with decorators
class Car {
  private _make: string;
  private _model: string;
  private _year: number;
  
  constructor(make: string, model: string, year: number) {
    this._make = make;
    this._model = model;
    this._year = year;
  }

  @log
  get make() {
    return this._make;
  }

  @log
  get model() {
    return this._model;
  }

  @log
  get year() {
    return this._year;
  }
}

function log(target: Object, propertyKey: string, descriptor: TypedPropertyDescriptor<any>) {
    let originalMethod = descriptor.value; // save original method
    // The descriptor.value is a function (getter here)
    descriptor.value = function (...args: any[]) {
        let returnValue = originalMethod.apply(this, args); // run and store the result
        console.log(`${propertyKey}: ${returnValue}`); // print the method call and result
        return returnValue; // return the result of the original method
    };

    return descriptor;
}

let car = new Car("Ford", "Mustang", 2021);
console.log(car.make); // Prints: make: Ford
console.log(car.model); // Prints: model: Mustang
console.log(car.year); // Prints: year: 2021