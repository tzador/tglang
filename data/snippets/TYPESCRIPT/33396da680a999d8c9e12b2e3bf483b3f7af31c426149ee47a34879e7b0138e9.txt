/**
 * This interface represents a person.
 */
interface Person {
    name: string; // Represents the person's name
    age: number; // Represents the person's age
    profession: string; // Represents the person's profession
    address?: string; // Optional attribute for the person's address
    hobbies: string[]; // Represents an array of the person's hobbies
    greet: (greeting: string) => void; // Method to greet the person
}

/**
 * This class represents a programmer.
 */
class Programmer implements Person {
    // Attributes inherited from the Person interface
    name: string = "John Smith";
    age: number = 30;
    profession: string = "Software Engineer";
    hobbies: string[] = ["Coding", "Reading", "Gaming"];

    // Method implementation for the 'greet' method
    greet(greeting: string) {
        console.log(`${greeting}, my name is ${this.name} and I am a ${this.profession}.`);
    }

    // Method for printing out the programmer's skills
    printSkills() {
        // Initializing a map to store the skills and their corresponding ratings
        let skillsMap: Map<string, number> = new Map();
        skillsMap.set("Java", 8);
        skillsMap.set("JavaScript", 9);
        skillsMap.set("HTML", 10);
        skillsMap.set("CSS", 8);
        skillsMap.set("TypeScript", 9);

        // Iterating through the map and printing out the skills and ratings
        console.log(`My programming skills and ratings are:`);
        for (let [skill, rating] of skillsMap) {
            console.log(`${skill} - ${rating}/10`);
        }
    }
}

// Creating an instance of the Programmer class
let programmer: Programmer = new Programmer();

// Greeting the programmer
programmer.greet("Hello");

// Printing out the programmer's skills
programmer.printSkills();