/**
  * Represents a user in the system
  * @param id - unique identifier for each user
  * @param name - name of the user
  * @param email - email address of the user
  * @param age - age of the user
  * @param isAdmin - indicates whether the user has admin privileges
  */
class User {
  private id: number;
  private name: string;
  private email: string;
  public age: number;
  public isAdmin: boolean;

  constructor(id: number, name: string, email: string, age: number, isAdmin: boolean) {
    this.id = id;
    this.name = name;
    this.email = email;
    this.age = age;
    this.isAdmin = isAdmin;
  }

  /**
    * Gets the user's full name
    * @returns user's name in "last, first" format
    */
  getFullName(): string {
    return `${this.name.split(" ")[1]}, ${this.name.split(" ")[0]}`;
  }

  /**
    * Checks if the user is over 18 years old
    * @returns true if user is over 18, false otherwise
    */
  isAdult(): boolean {
    return this.age >= 18;
  }

  /**
    * Updates the user's email address
    * @param newEmail - the new email address to be updated
    */
  updateEmail(newEmail: string): void {
    this.email = newEmail;
  }
}

// Example usage of the User class
const user1 = new User(1, "John Smith", "john.smith@email.com", 25, true);
console.log(user1.getFullName()); // Outputs "Smith, John"
console.log(user1.isAdult()); // Outputs "true"
user1.updateEmail("jsmith@gmail.com");
console.log(user1.email); // Outputs "jsmith@gmail"