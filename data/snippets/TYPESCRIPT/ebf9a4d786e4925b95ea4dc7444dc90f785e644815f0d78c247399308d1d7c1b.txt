// Function to calculate the factorial of a number using recursion
  const factorial = (num: number): number => {
      if (num === 0) { // Base case
          return 1;
      } else {
          return num * factorial(num - 1); // Recursive call
      }
  }

  // Function to calculate the nth Fibonacci number using dynamic programming
  const fibonacci = (num: number): number => {
      let fibArray = [0, 1]; // Initialize array with first two Fibonacci numbers

      for (let i = 2; i <= num; i++) { // Loop through to calculate each Fibonacci number
          fibArray.push(fibArray[i-1] + fibArray[i-2]); // Add the previous two numbers to get the current Fibonacci number
      }

      return fibArray[num]; // Return the nth Fibonacci number
  }

  // Class representing a shape
  class Shape {
      private name: string; // Private property to store the shape's name

      constructor(shapeName: string) {
          this.name = shapeName; // Assign the shape name upon creation
      }

      // Getter method for the shape's name
      getName() {
          return this.name;
      }

      // Abstract method to calculate the shape's area
      // To be implemented in subclasses
      calculateArea(): number {
          throw new Error("Method not implemented.");
      }
  }

  // Class representing a rectangle, inherits from Shape
  class Rectangle extends Shape {
      private width: number; // Private property to store the rectangle's width
      private height: number; // Private property to store the rectangle's height

      constructor(width: number, height: number) {
          super("Rectangle"); // Call the super constructor to set the shape name
          this.width = width;
          this.height = height;
      }

      // Getter method for the rectangle's width
      getWidth() {
          return this.width
      }

      // Getter method for the rectangle's height
      getHeight() {
          return this.height;
      }

      // Override the calculateArea method with the specific rectangle area formula
      calculateArea(): number {
          return this.width * this.height;
      }
  }

  // Class representing a circle, inherits from Shape
  class Circle extends Shape {
      private radius: number; // Private property to store the circle's radius

      constructor(radius: number) {
          super("Circle"); // Call the super constructor to set the shape name
          this.radius = radius;
      }

      // Getter method for the circle's radius
      getRadius() {
          return this.radius;
      }

      // Override the calculateArea method with the specific circle area formula
      calculateArea(): number {
          return Math.PI * this.radius ** 2;
      }
  }

  // Create a rectangle object with width 4 and height 3
  const rectangle = new Rectangle(4, 3);

  // Create a circle object with radius 5
  const circle = new Circle(5);

  // Calculate and display the areas of the rectangle and circle objects
  console.log(`Area of ${rectangle.getName()}: ${rectangle.calculateArea()}`);
  console.log(`Area of ${circle.getName()}: ${circle.calculateArea()}`);

  // Output:
  // Area of Rectangle: 12
  // Area of Circle: 78.53981633974483