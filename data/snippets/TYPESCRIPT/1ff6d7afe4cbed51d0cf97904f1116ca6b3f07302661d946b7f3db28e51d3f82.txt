interface Person {
  // Define properties
  name: string;
  age: number;
  gender: string;

  // Define methods
  introduce(): void;
  celebrateBirthday(): void;
}

class Student implements Person {
  name: string;
  age: number;
  gender: string;
  major: string;
  GPA: number;

  constructor(name: string, age: number, gender: string, major: string, GPA: number) {
    this.name = name;
    this.age = age;
    this.gender = gender;
    this.major = major;
    this.GPA = GPA;
  }

  // Implement interface methods
  introduce() {
    console.log(`Hello, my name is ${this.name} and I am a ${this.gender} student majoring in ${this.major}.`);
  }

  celebrateBirthday() {
    this.age++;
    console.log(`Today's my birthday, I am now ${this.age} years old!`);
  }

  // Additional custom method
  study(hours: number) {
    if (hours < 5) {
      console.log(`${this.name} is cramming for an exam.`);
    } else {
      console.log(`${this.name} is putting in some serious study time.`);
    }
  }
}

// Create new Student object
let john = new Student("John", 20, "male", "Computer Science", 3.8);

// Invoke methods on object
john.introduce(); // Output: Hello, my name is John and I am a male student majoring in Computer Science.
john.celebrateBirthday(); // Output: Today's my birthday, I am now 21 years old!
john.study(4); // Output: John is cramming for an exam.
john.study(8); // Output: John is putting in some serious study time.