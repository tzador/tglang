import * as fs from 'fs';

// Define a function called "readFile"
// Takes in a file name and encoding as parameters
// Uses the "promises" API to asynchronously read a file and return its contents
// Handles any errors using a try-catch block
const readFile = async (fileName: string, encoding: string): Promise<string> => {
  try {
    const fileContents = await fs.promises.readFile(fileName, encoding);
    return fileContents;
  } catch (err) {
    console.error(err);
  }
}

// Define a class called "Person"
class Person {
  // Define three private properties: "name", "age", and "gender"
  private name: string;
  private age: number;
  private gender: string;

  // Define a constructor that takes in name, age, and gender as parameters and initializes the private properties
  constructor(name: string, age: number, gender: string) {
    this.name = name;
    this.age = age;
    this.gender = gender;
  }

  // Define a public method called "greet"
  // Takes in no parameters and returns a greeting using the person's name
  public greet(): string {
    return `Hello, my name is ${this.name}!`;
  }
}

// Create a new instance of the Person class with the name "John", age 30, and gender "male"
const john = new Person("John", 30, "male");

// Define a variable called "greeting" and call the "greet" method on the "john" instance
const greeting = john.greet();

// Print the greeting to the console
console.log(greeting);

// Define a function called "multiply"
// Takes in two numbers as parameters and returns the product of the two numbers
const multiply = (num1: number, num2: number): number => {
  return num1 * num2;
}

// Define a variable called "product" and call the "multiply" function with the numbers 5 and 10 as arguments
const product = multiply(5, 10);

// Print the product to the console
console.log(product);