// Example of a class
class Car {
  // private property
  private _model: string;
  // constructor
  constructor(model:string) {
    this._model = model;
  }
  // getter method
  get model(): string {
    return this._model;
  }
  // setter method
  set model(value: string) {
    this._model = value;
  }
  // method with a parameter
  drive(speed: number) {
    console.log(`Driving at ${speed} km/h`);
  }
  // static method
  static honk() {
    console.log("Beep beep!");
  }
}

// Example of inheritance
class ElectricCar extends Car {
  private _batteryLevel: number;

  constructor(model: string, batteryLevel: number) {
    super(model);
    this._batteryLevel = batteryLevel;
  }

  // overriding method from parent class
  drive(speed: number) {
    // calling method from parent class
    super.drive(speed);
    console.log(`Battery level: ${this._batteryLevel}%`);
  }

  // method with optional parameter
  charge(batteryLevel?: number) {
    if (batteryLevel) {
      this._batteryLevel = batteryLevel;
      console.log(`Charging to ${this._batteryLevel}%`);
    } else {
      console.log("Charging to 100%");
      this._batteryLevel = 100;
    }
  }

  // method with rest parameter
  checkBatteryLevels(...models: string[]) {
    console.log(`Checking battery levels for: ${models.join(", ")}`);
  }
}

// Example of creating objects
let car1 = new Car("Toyota");
let car2 = new ElectricCar("Tesla", 75);

// calling methods and accessing properties
car1.drive(120); // output: Driving at 120 km/h
Car.honk(); // output: Beep beep!
console.log(car2.model); // output: Tesla
car2.charge(); // output: Charging to 100%
car2.drive(80); // output: Driving at 80 km/h
// output: Battery level: 75%
car2.checkBatteryLevels("Tesla", "Nissan", "Chevrolet");
// output: Checking battery levels for: Tesla, Nissan, Chevrolet