//A function that recursively finds the factorial of a number
//Param num: The number to find the factorial of
//Output num: The factorial of the given number
function factorial(num: number): number {
    if (num <= 1) {
        return 1;
    } else {
        return num * factorial(num-1);
    }
}

//An interface for a person
interface Person {
    name: string;
    age: number;
    isEmployed: boolean;
    //A function to change the person's name
    setNewName(newName: string): void;
}

//Class for a student, implementing Person interface
class Student implements Person {
    name: string;
    age: number;
    isEmployed: boolean;

    constructor(name: string, age: number, isEmployed: boolean) {
        this.name = name;
        this.age = age;
        this.isEmployed = isEmployed;
    }

    setNewName(newName: string): void {
        this.name = newName;
    }
}

//Create an array of students
const students: Student[] = [
    new Student("John", 22, false),
    new Student("Jane", 21, true),
    new Student("David", 20, false)
];

//A function to filter students based on their employment status
//Param student: The student to check the employment status of
//Output boolean: True if the student is employed, False if not
function filterEmployed(student: Student): boolean {
    if(student.isEmployed) {
        return true;
    } else {
        return false;
    }
}

//Filter the array of students by their employment status
const employedStudents: Student[] = students.filter(filterEmployed);

console.log(employedStudents);

/*
Output: [ { name: "Jane", age: 21, isEmployed: true }, 
{ name: "John", age: 22, isEmployed: true } ]
*/