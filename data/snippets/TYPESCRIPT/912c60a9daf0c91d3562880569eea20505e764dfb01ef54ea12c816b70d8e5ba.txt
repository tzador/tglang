// This is a complex code snippet that defines a class in TypeScript

/**
 * This is the Person class that has properties and methods related to a person.
 */
class Person {
  private _name: string; // private property for the person's name
  private _age: number; // private property for the person's age

  /**
   * Constructor for the Person class that takes in a name and an age.
   * @param name the name of the person
   * @param age the age of the person
   */
  constructor(name: string, age: number) {
    this._name = name;
    this._age = age;
  }

  /**
   * Getter method for the name property.
   * @returns the name of the person
   */
  get name(): string {
    return this._name;
  }

  /**
   * Setter method for the name property.
   * @param name the new name to set for the person
   */
  set name(name: string) {
    this._name = name;
  }

  /**
   * Getter method for the age property.
   * @returns the age of the person
   */
  get age(): number {
    return this._age;
  }

  /**
   * Setter method for the age property.
   * @param age the new age to set for the person
   */
  set age(age: number) {
    this._age = age;
  }

  /**
   * Method to check if the person is an adult.
   * @returns true if the person is 18 or older, false if they are younger than 18
   */
  isAdult(): boolean {
    return this._age >= 18;
  }
}

// Example usage of the Person class
const john = new Person("John", 25); // creates a new person named John who is 25 years old
console.log(`${john.name} is ${john.age} years old.`); // prints "John is 25 years old."
john.age = 30; // changes John's age to 30
console.log(`${john.name} is now ${john.age} years old.`); // prints "John is now 30 years old."
console.log(`${john.name} is an adult? ${john.isAdult()}`); // prints "John is an adult? true"