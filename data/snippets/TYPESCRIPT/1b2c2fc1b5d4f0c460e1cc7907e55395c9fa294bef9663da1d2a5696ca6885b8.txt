class Animal {

    protected name: string; //data member
    protected age: number; //data member

    constructor(name: string, age: number) { //constructor
        this.name = name;
        this.age = age;
    }

    public getName(): string { //function to get name
        return this.name;
    }

    public setName(newName: string): void { //function to set name
        this.name = newName;
    }

    public getAge(): number { //function to get age
        return this.age;
    }

    public setAge(newAge: number): void { //function to set age
        this.age = newAge;
    }

    public speak(): void { //function to make animal speak
        console.log(`${this.name} is speaking!`);
    }
}

class Cat extends Animal { //child class that inherits from Animal class

    private breed: string; //data member

    constructor(name: string, age: number, breed: string) { //constructor
        super(name, age); //calling parent class constructor
        this.breed = breed;
    }

    public getBreed(): string { //function to get breed
        return this.breed;
    }

    public setBreed(newBreed: string): void { //function to set breed
        this.breed = newBreed;
    }

    public purr(): void { //function for cat to purr
        console.log(`${this.name} is purring!`);
    }

    public speak(): void { //function to override speak function of parent class
        console.log(`${this.name} says meow!`);
    }

}

let myCat = new Cat("Fluffy", 2, "Persian"); //creating new instance of Cat class
myCat.purr(); //calling purr method
myCat.speak(); //calling speak method, which was overridden to say "meow"
myCat.setName("Mittens"); //calling setName method
console.log(`My cat's name is ${myCat.getName()}.`); //calling getName method to show updated name
console.log(`My cat is ${myCat.getAge()} years old.`); //calling getAge method to show age
myCat.setBreed("Siberian"); //calling setBreed method
console.log(`My cat's breed is ${myCat.getBreed()}.`); //calling getBreed method to show updated breed