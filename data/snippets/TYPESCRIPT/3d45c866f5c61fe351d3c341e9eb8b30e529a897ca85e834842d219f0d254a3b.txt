// An interface for a Person
interface Person {
    firstName: string,
    lastName: string,
    age: number,
    
    // Method to greet a person
    greet: (message: string) => void
}

// A class for an Employee that implements the Person interface
class Employee implements Person {
    firstName: string;
    lastName: string;
    age: number;
    id: string;

    constructor(firstName: string, lastName: string, age: number, id: string) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.id = id;
    }

    // Implement greet method from Person interface
    greet(message: string): void {
        console.log(`Hello ${this.firstName} ${this.lastName}. ${message}`);
    }

    // Method to calculate salary based on experience and position
    calculateSalary(experience: number, position: string): number {
        let baseSalary: number = 50000;

        if(position === 'manager') {
            baseSalary += 20000;
        }
        else if(position === 'senior') {
            baseSalary += 10000;
        }

        return baseSalary * experience;
    }
}

// Create a new instance of Employee class
let john: Employee = new Employee('John', 'Smith', 25, 'E123456');

// Call the greet method
john.greet('Welcome to our company!');

// Calculate salary for John with 5 years of experience as a manager
let johnSalary: number = john.calculateSalary(5, 'manager');

// Print result
console.log(`John's salary: $${johnSalary}`);

// Output:
// Hello John Smith. Welcome to our company!
// John's salary: $1500000