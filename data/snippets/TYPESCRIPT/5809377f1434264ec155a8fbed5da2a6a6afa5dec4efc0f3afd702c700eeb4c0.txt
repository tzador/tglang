type Person = { // creating a custom type called Person
  name: string; // defining name property as a string
  age: number; // defining age property as a number
  hobbies?: string[]; // defining optional hobbies property as an array of strings
  sayHello: () => void; // defining a function property called sayHello with a void return type
}

class Developer extends Person { // creating a class called Developer that extends from the Person type
  codingLanguages: string[]; // defining codingLanguages property as an array of strings

  constructor(name: string, age: number, codingLanguages: string[]) { // creating a constructor function that takes in required parameters and initializes properties
    super(name, age); // calling the super constructor to initialize the name and age properties
    this.codingLanguages = codingLanguages; // assigning the codingLanguages parameter to the codingLanguages property
  }

  // method to print out the developer's name, age, and list of coding languages
  printInfo(): void {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old. I am proficient in the following languages: ${this.codingLanguages.join(', ')}`);
  }

  // method that overrides the sayHello method from the Person type
  sayHello(): void {
    console.log(`Hello, I am ${this.name} and I am a developer. Nice to meet you!`);
  }
}

// creating an instance of the Developer class
const john = new Developer('John', 25, ['JavaScript', 'TypeScript', 'Java']);
john.printInfo(); // calling the printInfo method
john.sayHello(); // calling the overridden sayHello method