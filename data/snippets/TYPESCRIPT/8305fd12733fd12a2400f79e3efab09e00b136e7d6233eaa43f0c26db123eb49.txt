/**
 * This function takes in two numbers and returns their sum.
 * @param {number} num1 - The first number to add
 * @param {number} num2 - The second number to add
 * @returns {number} - The sum of num1 and num2
 */
function addNumbers(num1: number, num2: number): number {
    return num1 + num2;
}

/**
 * This class represents a person and their attributes.
 * @property {string} name - The name of the person
 * @property {number} age - The age of the person
 * @property {string} address - The address of the person
 */
class Person {
    name: string;
    age: number;
    address: string;

    constructor(name: string, age: number, address: string) {
        this.name = name;
        this.age = age;
        this.address = address;
    }

    /**
     * This method returns a greeting message for the person.
     * @returns {string} - The greeting message
     */
    greet(): string {
        return `Hello! My name is ${this.name} and I am ${this.age} years old. I live at ${this.address}.`;
    }
}

/**
 * This interface represents a shape with specific dimensions.
 * @property {number} width - The width of the shape
 * @property {number} height - The height of the shape
 */
interface Shape {
    width: number;
    height: number;
}

/**
 * This generic function calculates the area of a shape.
 * The shape must have a width and height property.
 * @param {Shape} shape - The shape to calculate area for
 * @returns {number} - The area of the shape
 */
function calculateArea<T extends Shape>(shape: T): number {
    return shape.width * shape.height;
}

// Example usage:
let rectangle = { width: 5, height: 10 }; // shape must have width and height properties
let rectangleArea = calculateArea(rectangle); // rectangleArea will be 50

// Example usage:
let circle = { radius: 8 }; // this shape does not have width and height properties
let circleArea = calculateArea(circle); // results in a compilation error