interface Person {
  name: string; //A string property for the person's name
  age: number; //A number property for the person's age
  occupation?: string; //An optional string property for the person's occupation
  hobbies: string[]; //An array of strings for the person's hobbies
  birthday: Date; //A Date object for the person's birthday
}

class Employee implements Person {
  name: string; //Inherited from Person interface
  age: number; //Inherited from Person interface
  occupation: string; //Inherited from Person interface
  hobbies: string[]; //Inherited from Person interface
  birthday: Date; //Inherited from Person interface
  salary: number; //A number property for the employee's salary

  constructor(name: string, age: number, occupation: string, hobbies: string[], birthday: Date, salary: number) {
    this.name = name;
    this.age = age;
    this.occupation = occupation;
    this.hobbies = hobbies;
    this.birthday = birthday;
    this.salary = salary;
  }

  //A method to print the employee's information
  printInfo(): void {
    console.log(`${this.name} is ${this.age} years old and works as a ${this.occupation}. They make $${this.salary} per year.`);
  }
}

//Creating an instance of Employee class
let employee1 = new Employee("John", 35, "Engineer", ["Hiking", "Reading", "Coding"], new Date(1986, 3, 15), 80000);

//Calling printInfo() method to print the employee's information
employee1.printInfo();

//Output: John is 35 years old and works as an Engineer. They make $80000 per year.