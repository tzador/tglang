// Declaration of a generic interface, with a type parameter 'T'
interface GenericInterface<T> {
  // A method that takes in a parameter of type 'T' and returns 'void'
  method: (param: T) => void;
  // A method that takes in a parameter of type 'K', which extends 'T', and returns 'T'
  extendedMethod: <K extends T>(param: K) => T;
}

// Implementation of the generic interface for type 'string'
// The type parameter 'T' is set to 'string'
class StringGenericInterface implements GenericInterface<string> {
  // Implementation of the 'method' method, which takes in a 'string' parameter and prints it
  method(param: string): void {
    console.log(param);
  }

  // Implementation of the 'extendedMethod' method, which takes in a 'string' parameter that extends 'string'
  // and returns the same 'string' parameter
  extendedMethod<K extends string>(param: K): string {
    return param;
  }
}

// Instantiation of the 'StringGenericInterface' class
const stringGenericInterface = new StringGenericInterface();

// Calling the 'method' method and passing in a 'string' parameter
stringGenericInterface.method('Hello World');

// Calling the 'extendedMethod' method and passing in a 'string' parameter that extends 'string'
stringGenericInterface.extendedMethod('Hello Typescript');