// Example interface for a Fruit
interface Fruit {
  name: string; // name of the fruit, must be a string
  color: string; // color of the fruit, must be a string
  weight: number; // weight of the fruit, must be a number
  isSweet: boolean; // whether the fruit is sweet or not, must be a boolean
  isRipe?: boolean; // optional parameter for whether the fruit is ripe or not, possible values are true, false, or undefined
  getInfo(): string; // function to get information about the fruit, must return a string
}

// Example class for a type of fruit, implements the Fruit interface
class Apple implements Fruit {
  // properties
  name: string;
  color: string;
  weight: number;
  isSweet: boolean;
  isRipe?: boolean;

  // constructor to initialize properties
  constructor(name: string, color: string, weight: number, isSweet: boolean) {
    this.name = name;
    this.color = color;
    this.weight = weight;
    this.isSweet = isSweet;
  }

  // function to get information about the apple
  getInfo(): string {
    return `This ${this.color} ${this.name} weighs ${this.weight} grams and is ${this.isRipe ? 'ripe' : 'not ripe'}.`;
  }
}

// create an instance of the Apple class
let goldenApple = new Apple('Golden Delicious', 'yellow', 200, true);

// call the getInfo() function on the instance and print the output
console.log(goldenApple.getInfo()); // Output: This yellow Golden Delicious weighs 200 grams and is ripe.