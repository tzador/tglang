type Tuple<[T, U, V]> = [T, U, V]; // creates a Tuple type with three elements, of type T, U, and V

const myTuple: Tuple<[string, number, boolean]> = ["hello", 5, true]; // creates a variable of type Tuple with the specified types and assigns values to its elements

function reverseTuple<T extends any[]>(tuple: T): T { // creates a function called 'reverseTuple' that takes in a Tuple of any type and returns a Tuple of the same type
  return tuple.reverse(); // reverses the order of elements in the Tuple and returns it
}

const reversedTuple = reverseTuple(myTuple); // calls the 'reverseTuple' function and passes in the 'myTuple' variable

console.log(reversedTuple); // prints the reversed Tuple to the console

interface HarryPotterCharacter { // creates an interface called 'HarryPotterCharacter' with three properties of type string
  name: string;
  house: string;
  bloodStatus: string;
}

const harry: HarryPotterCharacter = { // creates a variable of type 'HarryPotterCharacter' and assigns values to its properties
  name: 'Harry Potter',
  house: 'Gryffindor',
  bloodStatus: 'Half-blood'
};

const hermione: HarryPotterCharacter = { // creates another variable of type 'HarryPotterCharacter' and assigns values to its properties
  name: 'Hermione Granger',
  house: 'Gryffindor',
  bloodStatus: 'Muggle-born'
};

const ron: HarryPotterCharacter = { // creates yet another variable of type 'HarryPotterCharacter' and assigns values to its properties
  name: 'Ron Weasley',
  house: 'Gryffindor',
  bloodStatus: 'Pure-blood'
};

const harryPotterCharacters: Array<HarryPotterCharacter> = [harry, hermione, ron]; // creates an array of type 'HarryPotterCharacter' and assigns the three variables to its elements

for (const character of harryPotterCharacters) { // iterates through the array and prints each character's name and house
  console.log(`Name: ${character.name}, House: ${character.house}`); 
}