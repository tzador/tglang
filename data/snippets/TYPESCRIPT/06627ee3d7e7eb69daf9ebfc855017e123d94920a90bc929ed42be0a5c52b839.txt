/**
 * Generic data structure for storing key-value pairs.
 * @typeparam K Type of the keys in the data structure.
 * @typeparam V Type of the values in the data structure.
 */
class Dictionary<K, V> {
  private items: {[key: K]: V} = {};

  /**
   * Adds a key-value pair to the dictionary.
   * @param key The key for the entry to be added.
   * @param value The value for the entry to be added.
   */
  add(key: K, value: V) {
    // Make sure the key-value pair doesn't already exist in the dictionary.
    if (!this.has(key)) {
      this.items[key] = value;
    }
  }

  /**
   * Checks if the given key is in the dictionary.
   * @param key The key to check for.
   * @return True if the key is in the dictionary, false otherwise.
   */
  has(key: K): boolean {
    return key in this.items;
  }

  /**
   * Returns the value associated with the given key.
   * @param key The key to get the value for.
   * @return The value associated with the given key, or undefined if the key is not in the dictionary.
   */
  get(key: K): V | undefined {
    return this.items[key];
  }

  /**
   * Removes the entry associated with the given key from the dictionary.
   * @param key The key of the entry to remove.
   */
  remove(key: K) {
    delete this.items[key];
  }

  /**
   * Returns an array of all the keys in the dictionary.
   * @return An array containing all the keys in the dictionary.
   */
  keys(): K[] {
    return Object.keys(this.items);
  }

  /**
   * Returns an array of all the values in the dictionary.
   * @return An array containing all the values in the dictionary.
   */
  values(): V[] {
    return Object.values(this.items);
  }

  /**
   * Returns an array of all the key-value pairs in the dictionary.
   * @return An array containing all the key-value pairs in the dictionary.
   */
  entries(): [K, V][] {
    return Object.entries(this.items);
  }

  /**
   * Returns the number of key-value pairs in the dictionary.
   * @return The size of the dictionary.
   */
  size(): number {
    return Object.keys(this.items).length;
  }

  /**
   * Clears the dictionary, removing all key-value pairs.
   */
  clear() {
    this.items = {};
  }
}