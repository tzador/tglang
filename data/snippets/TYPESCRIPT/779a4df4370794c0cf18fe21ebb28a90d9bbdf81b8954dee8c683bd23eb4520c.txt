// Declaring an interface for a user
interface IUser {
    name: string;
    age: number;
    email: string;
    accountType?: 'basic' | 'premium';
    [key: string]: any;
}

// Implementing the interface
class User implements IUser {
    // Declaring properties
    name: string;
    age: number;
    email: string;
    accountType: 'basic' | 'premium' = 'basic';

    // Constructor with optional parameters
    constructor(name: string, age: number, email: string, accountType?: 'basic' | 'premium') {
        this.name = name;
        this.age = age;
        this.email = email;

        if (accountType) {
            this.accountType = accountType;
        }
    }

    // Method to get user's account info
    getAccountInfo(): string {
        return `${this.name} is ${this.age} years old and has a ${this.accountType} account.`;
    }
}

// Instantiating a new user
const user = new User('John', 25, 'john@example.com', 'premium');

// Accessing user's properties and methods
console.log(user.name);
console.log(user.email);
console.log(user.accountType);
console.log(user.getAccountInfo());

// Changing user's account type
user.accountType = 'basic';

// Calling the method again
console.log(user.getAccountInfo());

// Creating an array of users
const users: IUser[] = [];

// Adding a new user to the array
users.push(new User('Jane', 30, 'jane@example.com', 'basic'));