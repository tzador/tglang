// Annotated typescript code
class Graph<T> {
  private nodes: T[];
  private edges: { [key: string]: T[] };
  constructor() {
    this.nodes = [];
    this.edges = {};
  }

  // Method to add a node to the graph
  addNode(node: T): void {
    this.nodes.push(node);
    this.edges[node] = [];
  }

  // Method to add an edge between two nodes
  addEdge(node1: T, node2: T): void {
    if (!this.edges[node1] || !this.edges[node2]) {
      throw new Error("One or both of the nodes don't exist in the graph.");
    }
    this.edges[node1].push(node2);
    this.edges[node2].push(node1);
  }

  // Method to remove a node from the graph
  removeNode(node: T): void {
    const index = this.nodes.indexOf(node);
    if (index > -1) {
      this.nodes.splice(index, 1);
      delete this.edges[node];
      for (let key in this.edges) {
        const currEdges = this.edges[key];
        const currNodeIndex = currEdges.indexOf(node);
        if (currNodeIndex > -1) {
          currEdges.splice(currNodeIndex, 1);
        }
      }
    }
  }

  // Method to remove an edge between two nodes
  removeEdge(node1: T, node2: T): void {
    if (!this.edges[node1] || !this.edges[node2]) {
      throw new Error("One or both of the nodes don't exist in the graph.");
    }
    const node1Index = this.edges[node2].indexOf(node1);
    const node2Index = this.edges[node1].indexOf(node2);
    if (node1Index > -1 && node2Index > -1) {
      this.edges[node1].splice(node2Index, 1);
      this.edges[node2].splice(node1Index, 1);
    }
  }

  // Method to print the graph as a string
  print(): string {
    let result = "";
    this.nodes.forEach((node) => {
      result += node + " -> ";
      this.edges[node].forEach((edge) => {
        result += edge + ", ";
      });
      result = result.slice(0, -2);
      result += "\n";
    });
    return result;
  }
}

// Create a new graph with string nodes
const graph = new Graph<string>();

// Add nodes to the graph
graph.addNode("A");
graph.addNode("B");
graph.addNode("C");

// Add edges between nodes
graph.addEdge("A", "B");
graph.addEdge("A", "C");
graph.addEdge("B", "C");

// Print the graph
console.log(graph.print());

// Output:
// A -> B, C
// B -> A, C
// C -> A, B

// Remove a node and its edges from the graph
graph.removeNode("B");

// Print the updated graph
console.log(graph.print());

// Output:
// A -> C
// C -> A