/**
 * This is a class implementing a basic database interface
 * with CRUD operations and connection methods.
 */
class Database {
  private databaseName: string;
  private username: string;
  private password: string;
  private isConnected: boolean;

  /**
   * Constructor for the database class,
   * takes in the database name, username and password
   * and sets the connection status to false.
   * @param databaseName - The name of the database
   * @param username - The username for the database
   * @param password - The password for the database
   */
  constructor(databaseName: string, username: string, password: string) {
    this.databaseName = databaseName;
    this.username = username;
    this.password = password;
    this.isConnected = false;
  }

  /**
   * Method to connect to the database with
   * the provided username and password.
   * @returns a string indicating if the connection was successful
   */
  connect(): string {
    this.isConnected = true;
    return `Connected to ${this.databaseName}`;
  }

  /**
   * Method to insert new data into the database.
   * @param data - The data to be inserted
   * @returns a string indicating if the insertion was successful
   */
  insert(data: any): string {
    if (this.isConnected) {
      // code to insert data into the database
      return `Inserted data into ${this.databaseName}`;
    } else {
      return `Cannot insert data, not connected to database`;
    }
  }

  /**
   * Method to retrieve data from the database with
   * the provided query.
   * @param query - The query to retrieve data
   * @returns the retrieved data
   */
  select(query: string): any {
    if (this.isConnected) {
      // code to query database and retrieve data
      return `Retrieved data from ${this.databaseName}`;
    } else {
      return `Cannot retrieve data, not connected to database`;
    }
  }

  /**
   * Method to update existing data in the database
   * with the provided query and updated data.
   * @param query - The query used to identify the data to be updated
   * @param updatedData - The data to be updated
   * @returns a string indicating if the update was successful
   */
  update(query: string, updatedData: any): string {
    if (this.isConnected) {
      // code to update data in the database
      return `Updated data in ${this.databaseName}`;
    } else {
      return `Cannot update data, not connected to database`;
    }
  }

  /**
   * Method to delete existing data from the database
   * with the provided query.
   * @param query - The query used to identify the data to be deleted
   * @returns a string indicating if the deletion was successful
   */
  delete(query: string): string {
    if (this.isConnected) {
      // code to delete data from the database
      return `Deleted data from ${this.databaseName}`;
    } else {
      return `Cannot delete data, not connected to database`;
    }
  }
}

// Example usage of the database class
const database = new Database("myDatabase", "admin", "password");
console.log(database.connect()); // Output: Connected to myDatabase
console.log(database.insert({ name: "John Doe" })); // Output: Inserted data into myDatabase
console.log(database.select("SELECT * FROM users")); // Output: Retrieved data from myDatabase
console.log(database.update("UPDATE users SET name = 'Jane Doe' WHERE id = 1")); // Output: Updated data in myDatabase
console.log(database.delete("DELETE FROM users WHERE id = 2")); // Output: Deleted data from myDatabase