//Class definition with interface and generic type parameter

class Car<T extends string> implements Vehicle {
    private model: T;
    private year: number;
    private manufacturer: string;

    constructor(model: T, year: number, manufacturer: string) {
        this.model = model;
        this.year = year;
        this.manufacturer = manufacturer;
    }

    getDetails(): string {
        return `${this.model} from ${this.year} made by ${this.manufacturer}`;
    }
}

//Interface definition with function and property signatures

interface Vehicle {
    color: string;
    getDetails(): string;
    changeColor(newColor: string): void;
}

//Function to create a new Car instance

function createCar<T extends string>(model: T, year: number, manufacturer: string): Car<T> {
    return new Car<T>(model, year, manufacturer);
}

//Instantiating a Car object and using its methods and properties

const myCar = createCar("Mustang", 2010, "Ford");
console.log(myCar.getDetails()); // Output: Mustang from 2010 made by Ford
myCar.color = "red";
console.log(myCar.color); // Output: red
myCar.changeColor("blue");
console.log(myCar.color); // Output: blue