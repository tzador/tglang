// Type Annotation for a variable
let phoneNumber: number;

// Type Inference for variable based on initial value
let name = "John Doe";

// Interfaces for defining data structure
interface Student {
  name: string;
  age: number;
  grade: string;
}

// Classes for creating objects and methods
class Book {
  title: string;
  author: string;
  pages: number;

  constructor(title:string, author:string, pages:number) {
    this.title = title;
    this.author = author;
    this.pages = pages;
  }

  getBookInfo(): string {
    return `${this.title} by ${this.author}, ${this.pages} pages`;
  }
}

// Creating a new object using the class
let myBook = new Book("Pride and Prejudice", "Jane Austen", 432);

// Generics for creating reusable code
function printArray<T>(arr: T[]): void {
  for (let item of arr) {
    console.log(item);
  }
}

// Calling the function with different data types
printArray<number>([1, 2, 3, 4]);
printArray<string>(["apple", "banana", "orange"]);

// React JSX code with TypeScript
import React, { useState } from 'react';

interface PersonProps {
  name: string;
  age: number;
}

const Person: React.FC<PersonProps> = ({ name, age }) => {
  const [hobby, setHobby] = useState<string>("reading");

  return (
    <div>
      <h1>Hello, my name is {name}</h1>
      <p>I am {age} years old and my hobby is {hobby}.</p>
    </div>
  );
};