// Define a generic class for a linked list
class LinkedList<T> {
    private head: Node<T> | null; // Private property for the head node
    private tail: Node<T> | null; // Private property for the tail node
    private length: number; // Private property for keeping track of the length of the list

    // Constructor to initialize the class with a given head value
    constructor(data: T) {
        let node = new Node(data); // Create a new node with the given data
        this.head = node; // Set the head to be the newly created node
        this.tail = node; // Set the tail to be the newly created node
        this.length = 1; // Set the length to 1 since there is only one node
    }

    // Method for adding a new node to the end of the list
    append(data: T): void {
        let node = new Node(data); // Create a new node with the given data
        this.tail.next = node; // Set the tail's next property to be the new node
        this.tail = node; // Set the tail to be the new node
        this.length++; // Increment the length of the list
    }

    // Method for deleting a node at a given index
    deleteAtIndex(index: number): void {
        if (index < this.length && index >= 0) { // Check if the index is within the bounds of the list
            let currNode = this.head; // Start at the head of the list
            let prevNode = null; // Store the previous node, initially set to null

            // Loop through the list until the desired index
            for (let i = 0; i < index; i++) {
                prevNode = currNode; // Set the previous node to be the current node
                currNode = currNode.next; // Set the current node to be the next node
            }

            // Delete the desired node by changing the previous node's next property
            prevNode.next = currNode.next; 
            this.length--; // Decrement the length of the list
        } else {
            console.log("Index out of bounds"); // Print an error message if the index is out of bounds
        }
    }

    // Method for inserting a new node at a given index
    insertAtIndex(index: number, data: T): void {
        if (index < this.length && index >= 0) { // Check if the index is within the bounds of the list
            let node = new Node(data); // Create a new node with the given data
            let currNode = this.head; // Start at the head of the list
            let prevNode = null; // Store the previous node, initially set to null

            // Loop through the list until the desired index
            for (let i = 0; i < index; i++) {
                prevNode = currNode; // Set the previous node to be the current node
                currNode = currNode.next; // Set the current node to be the next node
            }

            // Insert the new node by changing the previous node's next property
            prevNode.next = node;
            node.next = currNode;
            this.length++; // Increment the length of the list
        } else {
            console.log("Index out of bounds"); // Print an error message if the index is out of bounds
        }
    }

    // Method for printing the elements of the list
    display(): void {
        let currNode = this.head; // Start at the head of the list
        let elements = ""; // String to store the elements of the list

        // Loop through the list and add each element to the string
        while (currNode) {
            elements += currNode.data + " ";
            currNode = currNode.next;
        }

        console.log(elements); // Print the elements of the list
    }

    // Method for checking if a given value is in the list
    contains(value: T): boolean {
        let currNode = this.head; // Start at the head of the list

        // Loop through the list and check if each node's data is equal to the given value
        while (currNode) {
            if (currNode.data === value) {
                return true;
            }
            currNode = currNode.next;
        }

        return false; // Return false if the value is not found in the list
    }
}

// Define a generic class for a node in the linked list
class Node<T> {
    private _data: T; // Private property for the data of the node
    private _next: Node<T> | null; // Private property for the next node
    
    // Constructor to initialize the class with a given data value
    constructor(data: T) {
        this._data = data; // Set the data to be the given value
        this._next = null; // Set the next node to be null
    }

    // Getters and setters for the private properties
    get data(): T {
        return this._data;
    }

    set data(newData: T) {
        this._data = newData;
    }

    get next(): Node<T> | null {
        return this._next;
    }

    set next(nextNode: Node<T> | null) {
        this._next = nextNode;
    }
}

// Example usage
let linkedList = new LinkedList<number>(10); // Create a new linked list with an initial value of 10
linkedList.append(20); // Add a node with a value of 20 to the end of the list
linkedList.insertAtIndex(1, 15); // Insert a new node with a value of 15 at index 1
linkedList.deleteAtIndex(2); // Delete the node at index 2
linkedList.display(); // Print the elements of the list (output: 10 15)