interface Employee {
  id: number; // unique identifier
  name: string; // name of the employee
  department: string; // department that the employee works in
  salary: number; // annual salary of the employee
  role?: string; // optional role if the employee has a specific position
  projects: string[]; // array of project names the employee is currently working on
  address: {
    street: string; // street name of employee's address
    city: string; // city of employee's address
    state: string; // state of employee's address
    zipCode: string; // zip code of employee's address
  };
  getSalary(): number; // method to calculate the employee's salary
  getProjects(): string[]; // method to return the list of projects the employee is working on
}

class SoftwareEngineer implements Employee {
  id: number;
  name: string;
  department: string;
  salary: number;
  role: string;
  projects: string[];
  address: {
    street: string;
    city: string;
    state: string;
    zipCode: string;
  };

  constructor(
    id: number,
    name: string,
    department: string,
    salary: number,
    role: string,
    projects: string[],
    address: {
      street: string;
      city: string;
      state: string;
      zipCode: string;
    }
  ) {
    this.id = id;
    this.name = name;
    this.department = department;
    this.salary = salary;
    this.role = role;
    this.projects = projects;
    this.address = address;
  }

  getSalary(): number {
    // method to calculate the employee's salary
    return 100000;
  }

  getProjects(): string[] {
    // method to return the list of projects the employee is working on
    return this.projects;
  }
}

const employee: Employee = new SoftwareEngineer(
  1234,
  "John Smith",
  "Engineering",
  110000,
  "Team Lead",
  ["Project A", "Project B", "Project C"],
  {
    street: "123 Main Street",
    city: "Boston",
    state: "MA",
    zipCode: "02101",
  }
);

console.log(employee);