// A complex class declaration in TypeScript
class Employee {
  // private properties
  private id: number;
  private name: string;
  private salary: number;
  // constructor with access modifiers and parameter type annotations
  constructor(id: number, name: string, salary: number) {
    // setting property values using 'this' keyword
    this.id = id;
    this.name = name;
    this.salary = salary;
  }
  // public method with return type annotation
  public displayInfo(): string {
    // using string interpolation to display property values
    return `ID: ${this.id}, Name: ${this.name}, Salary: ${this.salary}`;
  }
  // getter method for accessing private property
  get employeeId(): number {
    return this.id;
  }
  // setter method with parameter type annotation
  set employeeName(name: string) {
    this.name = name;
  }
  // static method with modifier and parameter type annotation
  static calculateYearlySalary(emp: Employee): number {
    return emp.salary * 12;
  }
}
// creating an instance of Employee class
const emp = new Employee(1, "John Doe", 5000);
// accessing public method and getting employee ID
const empInfo = emp.displayInfo();
const empId = emp.employeeId;
// setting new employee name using setter method
emp.employeeName = "Jane Smith";
// calling static method to calculate yearly salary
const yearlySalary = Employee.calculateYearlySalary(emp);