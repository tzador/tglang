// Declare a class called 'Person'
class Person {

  // Declare private properties for first name and last name
  private firstName: string;
  private lastName: string;

  // Declare constructor that takes in the first and last name
  constructor(firstName: string, lastName: string) {
    this.firstName = firstName;
    this.lastName = lastName;
  }

  // Declare a method to get the full name of the person
  getFullName() {
    // Use template literals to combine the first and last name
    return `${this.firstName} ${this.lastName}`;
  }
}

// Declare an interface called 'Employee'
interface Employee {
  // Define properties of an employee
  id: number;
  position: string;
}

// Declare a generic class that extends the 'Person' class and implements the 'Employee' interface
class EmployeeDetails<T extends Person, U extends Employee> extends Person implements Employee {
  // Declare private properties for employee id and position
  private employeeId: number;
  private employeePosition: string;

  // Declare constructor that takes in the employee id, position, and the first and last name of the employee
  constructor(id: number, position: string, firstName: string, lastName: string) {
    super(firstName, lastName);
    this.employeeId = id;
    this.employeePosition = position;
  }

  // Override the 'getFullName' method from the 'Person' class
  getFullName() {
    // Use template literals to combine the first and last name, along with the employee's position
    return `${this.firstName} ${this.lastName}, ${this.employeePosition}`;
  }
}

// Create an instance of the 'EmployeeDetails' class
const employee = new EmployeeDetails(12345, 'Software Engineer', 'John', 'Doe');

// Call the 'getFullName' method from the 'EmployeeDetails' class
employee.getFullName();

// Output: 'John Doe, Software Engineer'