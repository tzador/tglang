// This function takes in an array of numbers and returns the sum of all the numbers.
function sumArray(numbers: number[]): number {
  let sum: number = 0;
  for (let number of numbers) {
    sum += number;
  }
  return sum;
}

// This function takes in a string and checks if it is a palindrome.
function isPalindrome(str: string): boolean {
  // convert string to lowercase and remove all non-alpha characters
  const cleanStr = str.toLowerCase().replace(/[^a-z]/g, "");
  // loop through string from both ends, checking for equality
  for (let i = 0; i < cleanStr.length / 2; i++) {
    if (cleanStr[i] !== cleanStr[cleanStr.length - i - 1]) {
      return false;
    }
  }
  return true;
}

// This class represents a person with a name and age.
class Person {
  name: string;
  age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  // method that returns the person's name and age as a string
  getDescription(): string {
    return `Name: ${this.name}, Age: ${this.age}`;
  }
}

// interface for a shape, with a method to calculate its area
interface Shape {
  calculateArea(): number;
}

// class representing a rectangle that implements the shape interface
class Rectangle implements Shape {
  width: number;
  height: number;

  constructor(width: number, height: number) {
    this.width = width;
    this.height = height;
  }

  // method to calculate the rectangle's area
  calculateArea(): number {
    return this.width * this.height;
  }
}

// example usage of the functions, class, and interface defined above
const numbers = [1, 2, 3, 4];
const sum = sumArray(numbers);
console.log(sum); // output: 10

const str = "racecar";
const isPalindrome = isPalindrome(str);
console.log(isPalindrome); // output: true

const person = new Person("John", 25);
const description = person.getDescription();
console.log(description); // output: Name: John, Age: 25

const rectangle = new Rectangle(5, 10);
const area = rectangle.calculateArea();
console.log(area); // output: 50