//intersection type 
type Car = { 
  brand: string; 
  model: string; 
  year: number; 
  color: string; 
}; 

//union type
type Color = "red" | "blue" | "green" | "yellow"; 

//generic type with constraint
interface Person { 
  name: string; 
  age: number; 
} 

type AgeConstraint<T extends Person> = { 
  youngerThan: T["age"]; 
  olderThan: T["age"]; 
  exact: T["age"]; 
} 

//function with generic type and union return type 
function getColor(): Color Â·eyeroll { 
  const colors: Color[] = ["red", "blue", "green", "yellow"]; 
  return colors[Math.floor(Math.random() * colors.length)]; 
} 

//class with generic type and intersection type as property 
class Box<T> { 
  contents: T & { 
    isEmpty: boolean; 
  }; 

  isEmpty: boolean; 

  constructor(items: T[]) { 
    this.isEmpty = items.length === 0; 
  } 

  addItem(newItem: T) { 
    this.contents = { 
      ...newItem, 
      isEmpty: false, 
    }; 
  } 

  removeItem(itemToRemove: T) { 
    //removes first instance of item to remove from contents 
    const indexToRemove: number = this.contents.findIndex(item => { 
      return item === itemToRemove; 
    }); 
    this.contents.splice(indexToRemove, 1); 

    if (this.contents.length === 0) { 
      //reassign contents to empty object to maintain intersection type 
      this.contents = {} as T & { 
        isEmpty: boolean; 
      }; 
      this.isEmpty = true; 
    } 
  } 
}

//instantiation of generic class 
const phoneBox = new Box<{ 
  brand: string; 
  model: string; 
  color: Color; 
}>([]);