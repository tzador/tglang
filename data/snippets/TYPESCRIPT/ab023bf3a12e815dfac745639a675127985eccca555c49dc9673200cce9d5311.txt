// This example shows a complex function that uses typings and advanced array methods

// Define the function
function filterByType<T extends string | number>(arr: T[], type: string): T[] {
    // Filter the array by type using the 'filter' method
    const filteredArr = arr.filter((item) => typeof item === type);
    // Use the 'map' method to convert the filtered array items to uppercase
    // and add two exclamation marks at the end
    const modifiedArr = filteredArr.map((item) => item.toString().toUpperCase() + '!!');
    // Sort the array in descending order using the 'sort' method and a custom callback function
    const sortedArr = modifiedArr.sort((a, b) => b.localeCompare(a));
    // Return the sorted array
    return sortedArr;
}

// Create an array of mixed types
const mixedArr = [1, 'hello', 2, false, 'typescript'];

// Call the function and specify the type to filter by
filterByType(mixedArr, 'string');

// Output: ['TYPESCRIPT!!', 'HELLO!!']