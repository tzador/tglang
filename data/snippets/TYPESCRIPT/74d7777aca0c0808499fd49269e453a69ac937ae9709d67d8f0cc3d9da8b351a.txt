// A generic class with multiple type parameters
class Container<T, U> {
  private value1: T;
  private value2: U;

  constructor(value1: T, value2: U) {
    this.value1 = value1;
    this.value2 = value2;
  }

  // Method that takes in and returns a generic type
  getValue<T>(value: T): T {
    return value;
  }

  // Method that takes in a function that uses both type parameters
  processValues<V>(callback: (value1: T, value2: U) => V): V {
    return callback(this.value1, this.value2);
  }
}

// Using the Container class with string and number types
const stringNumberContainer = new Container<string, number>('Hello', 123);
stringNumberContainer.processValues((s: string, n: number) => s + n); // Returns Hello123

// Using the Container class with boolean and object types
const booleanObjectContainer = new Container<boolean, object>(true, { name: 'John', age: 25 });
booleanObjectContainer.getValue<{ name: string, age: number }>({ name: 'Jane', age: 30 }); // Returns { name: 'Jane', age: 30 }