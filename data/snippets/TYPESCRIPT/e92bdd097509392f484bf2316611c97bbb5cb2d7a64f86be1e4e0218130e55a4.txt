type Person = {
    name: string;
    age: number;
    birthdate?: Date;
    address?: string;
    occupation: string;
}

interface Vehicle {
    make: string;
    model: string;
    year: number;
    color: string;
    fuelType: string;
    capacity: number;
}

abstract class Employee {
    empID: string;
    companyName: string;
    startDate: Date;
    position: string;
    salary: number;
    abstract getFullName(): string;
}

class Engineer extends Employee {
    empID: string;
    companyName: string;
    startDate: Date;
    position: string;
    salary: number;
    specialty: string;
    
    constructor(empID: string, companyName: string, startDate: Date, position: string, salary: number, specialty: string) {
        super();
        this.empID = empID;
        this.companyName = companyName;
        this.startDate = startDate;
        this.position = position;
        this.salary = salary;
        this.specialty = specialty;
    }
    
    getFullName(): string {
        return "Engineer " + this.empID;
    }
}

const person: Person = {
    name: "John Doe",
    age: 30,
    birthdate: new Date(1990, 1, 1),
    address: "123 Main Street",
    occupation: "Software Developer"
};

const car: Vehicle = {
    make: "Toyota",
    model: "Camry",
    year: 2019,
    color: "Silver",
    fuelType: "Gasoline",
    capacity: 5
};

const employee: Engineer = new Engineer("1234", "ABC Company", new Date(2018, 1, 1), "Senior Engineer", 100000, "Software Development");

console.log(employee.getFullName());
console.log(person.name + " is a " + person.occupation + " who drives a " + car.color + " " + car.make + " " + car.model + ".");