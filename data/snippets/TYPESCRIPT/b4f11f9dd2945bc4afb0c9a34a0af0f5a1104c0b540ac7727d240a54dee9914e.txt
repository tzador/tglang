/**
 * This is a class representing a person
 */
class Person {
  private name: string; // private property to store the person's name
  private age: number; // private property to store the person's age
  private hobbies: string[]; // private property to store the person's hobbies

  constructor(name: string, age: number, hobbies: string[]) {
    this.name = name;
    this.age = age;
    this.hobbies = hobbies;
  }

  /**
   * A public method to get the person's name
   */
  public getName(): string {
    return this.name;
  }

  /**
   * A public method to get the person's age
   */
  public getAge(): number {
    return this.age;
  }

  /**
   * A public method to get the person's hobbies
   */
  public getHobbies(): string[] {
    return this.hobbies;
  }

  /**
   * A public method to add a hobby to the person's hobbies array
   */
  public addHobby(newHobby: string): void {
    this.hobbies.push(newHobby);
  }

  /**
   * A public method to check if the person's age is above a specified limit
   */
  public isOverAge(limit: number): boolean {
    return this.age > limit
  }

  /**
   * A public method to print the person's information
   */
  public printInfo(): void {
    console.log(`Name: ${this.name}\nAge: ${this.age}\nHobbies: ${this.hobbies.join(', ')}`);
  }
}

// Example usage:
// Creating a new person
const john = new Person('John', 25, ['reading', 'hiking', 'coding']);

// Getting John's name
const johnName = john.getName(); // returns 'John'

// Adding a new hobby
john.addHobby('painting');

// Checking if John's age is over 20
const isOver20 = john.isOverAge(20); // returns true

// Printing John's information
john.printInfo(); // logs 'Name: John\nAge: 25\nHobbies: reading, hiking, coding, painting'