// This is a class in TypeScript
class Animal {
    // Properties:
    public name: string; // public property with a string data type
    private _age: number; // private property with a number data type
    protected type: string; // protected property with a string data type

    // Constructor:
    constructor(name: string, age: number, type: string) {
        this.name = name;
        this._age = age;
        this.type = type;
    }

    // Getter and Setter methods for private property:
    get age(): number {
        return this._age;
    }

    set age(newAge: number) {
        this._age = newAge;
    }

    // Public method:
    public printInfo(): void {
        console.log(`Name: ${this.name}, Age: ${this._age}, Type: ${this.type}`);
    }
}

// Inheritance using the "extends" keyword:
class Dog extends Animal {
    // New property:
    breed: string;

    // Constructor:
    constructor(name: string, age: number, type: string, breed: string) {
        // Calling the parent constructor using the "super" keyword:
        super(name, age, type);
        this.breed = breed;
    }

    // Override parent method:
    public printInfo(): void {
        console.log(`Name: ${this.name}, Age: ${this.age}, Type: ${this.type}, Breed: ${this.breed}`);
    }
}

// Creating instances of classes:
let animal = new Animal("Lion", 10, "Mammal");
let dog = new Dog("Max", 2, "Mammal", "German Shepherd");

// Calling methods:
animal.printInfo(); // Output: Name: Lion, Age: 10, Type: Mammal
dog.printInfo(); // Output: Name: Max, Age: 2, Type: Mammal, Breed: German Shepherd