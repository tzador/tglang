/**
 * A generic class that represents a person.
 * @template T - the type of value for the "name" property
*/
class Person<T> {
  private name: T;
  private age: number;

  constructor(name: T, age: number) {
    this.name = name;
    this.age = age;
  }

  /**
   * A function that returns a greeting with the person's name and age.
   * @returns a string with the person's name and age
  */
  greet(): string {
    return `Hello, my name is ${this.name} and I am ${this.age} years old.`;
  }

  /**
   * A function that returns the person's current age after the given number of years have passed.
   * @param years - the number of years to calculate the age after
   * @returns the person's age after the given number of years have passed
  */
  calculateAgeAfterYears(years: number): number {
    return this.age + years;
  }
}

// Create a new instance of the Person class with a string for the "name" property and a number for the "age" property
const person1 = new Person<string>('John Doe', 30);

// Call the "greet" function on the person1 instance
console.log(person1.greet()); // Output: Hello, my name is John Doe and I am 30 years old.

// Call the "calculateAgeAfterYears" function on the person1 instance
console.log(person1.calculateAgeAfterYears(10)); // Output: 40