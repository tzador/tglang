// Initializing a generic class
class GenericClass<T> {
  private value: T; // private property of type T

  // constructor that takes in a value of type T
  constructor(initialValue: T) {
    this.value = initialValue;
  }

  // method that returns the value of type T 
  getValue(): T {
    return this.value;
  }

  // method that sets the value to a new value of type T 
  setValue(newValue: T) {
    this.value = newValue;
  }
}

// creating an instance of the generic class with string type
const stringInstance = new GenericClass<string>("Hello World");

// creating an instance of the generic class with number type
const numberInstance = new GenericClass<number>(100);

// creating an instance of the generic class with boolean type
const booleanInstance = new GenericClass<boolean>(true);

// calling the getValue method and printing the output to the console
console.log(stringInstance.getValue()); // Output: Hello World
console.log(numberInstance.getValue()); // Output: 100
console.log(booleanInstance.getValue()); // Output: true

// calling the setValue method to change the value
stringInstance.setValue("Hello TypeScript");

// calling the getValue method and printing the output to the console
console.log(stringInstance.getValue()); // Output: Hello TypeScript