class Animal {
  private name: string;
  private age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  public makeSound(): void {
    console.log("This animal makes a sound.");
  }

  public displayInfo(): void {
    console.log("Name: " + this.name + " | Age: " + this.age.toString());
  }
}

// An example of inheritance in TypeScript
class Cat extends Animal {
  private toy: string;

  constructor(name: string, age: number, toy: string) {
    super(name, age);
    this.toy = toy;
  }

  // Overriding the makeSound function to be more specific for the cat class
  public makeSound(): void {
    console.log("Meow! My toy is a " + this.toy + ".");
  }

  // Creating a new function that is only available for the cat class
  public play(): void {
    console.log("I'm playing with my " + this.toy + ".");
  }
}

// Creating a new instance of the Cat class
let myCat: Cat = new Cat("Fluffy", 5, "ball");

// Calling the makeSound and play functions on the cat instance
myCat.makeSound(); // Output: "Meow! My toy is a ball."
myCat.play(); // Output: "I'm playing with my ball."

// Calling the displayInfo function inherited from the Animal class
myCat.displayInfo(); // Output: "Name: Fluffy | Age: 5"