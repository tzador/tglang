// Declare a generic class with a type parameter
class DataStructure<T>{
    // Declare private variable of generic type
    private data: T[];
    
    // Declare constructor that takes in an array of type T
    constructor(data: T[]){
        this.data = data;
    }
    
    // Declare a method that adds an element of type T to the data array
    add(element: T): void {
        this.data.push(element);
    }
    
    // Declare a method that returns the first element of the data array
    getFirst(): T {
        return this.data[0];
    }
    
    // Declare a method that returns the last element of the data array
    getLast(): T {
        return this.data[this.data.length - 1];
    }
}

// Create instances of the data structure class for different types
let numberData = new DataStructure<number>([1, 2, 3, 4, 5]);
let stringData = new DataStructure<string>(['a', 'b', 'c', 'd', 'e']);

// Add elements to the data structure and retrieve the first and last elements
numberData.add(6);
console.log(numberData.getFirst()); // Output: 1
console.log(numberData.getLast()); // Output: 6

stringData.add('f');
console.log(stringData.getFirst()); // Output: a
console.log(stringData.getLast()); // Output: f