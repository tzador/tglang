class Animal {
  name: string;
  age: number;
  sound: string;

  constructor(name: string, age: number, sound: string) {
    this.name = name;
    this.age = age;
    this.sound = sound;
  }

  makeSound() {
    console.log(`${this.name} says ${this.sound}!`);
  }

  birthday() {
    this.age++;
  }

  static maxAge: number = 100;
}

class Cat extends Animal {
  breed: string;

  constructor(name: string, age: number, sound: string, breed: string) {
    super(name, age, sound);
    this.breed = breed;
  }

  //Using getters and setters
  get pet() {
    return `${this.name} the cat`;
  }

  set petName(newName: string) {
    this.name = newName;
  }

  //Function with Optional and Default parameters
  purr(mood: string = 'happy', duration?: number): void {
    console.log(`${this.name} is ${mood} and purring ${duration} times!`);
  }

  //Function with Union type and Type Aliases
  favouriteFood(food: string | string[] = ['tuna', 'salmon', 'chicken']): void {
    console.log(`${this.name} loves to eat ${food}!`);
  }
}

let fluffy = new Cat('Fluffy', 3, 'meow', 'Persian');
fluffy.makeSound(); //Output: Fluffy says meow!
fluffy.birthday();
console.log(fluffy.age); //Output: 4
console.log(Cat.maxAge); //Output: 100
console.log(fluffy.pet); //Output: Fluffy the cat
fluffy.petName = 'Mittens'; //Calling the setter
console.log(fluffy.pet); //Output: Mittens the cat
fluffy.purr(); //Output: Mittens is happy and purring undefined times!
fluffy.purr('sleepy'); //Output: Mittens is sleepy and purring undefined times!
fluffy.purr('sleepy', 5); //Output: Mittens is sleepy and purring 5 times!
fluffy.favouriteFood(); //Output: Mittens loves to eat tuna,salmon,chicken!
fluffy.favouriteFood(['shrimp', 'treats']); //Output: Mittens loves to eat shrimp,treats!