// Generic class with a constraint
class LightweightVehicle<T extends string> {
    type: T;
    weight: number;

    constructor(type: T, weight: number) {
        this.type = type;
        this.weight = weight;
    }

    getDetails(): void {
        console.log(`The ${this.type} vehicle weighs ${this.weight} kilograms.`);
    }
}

// Interface for vehicles with wheels
interface VehicleWithWheels {
    numberOfWheels: number;
}

// Subclass of LightweightVehicle with a type of string and implements VehicleWithWheels interface
class Car extends LightweightVehicle<'car'> implements VehicleWithWheels {
    numberOfWheels: number;

    constructor(type: 'car', weight: number, numberOfWheels: number) {
        super(type, weight);
        this.numberOfWheels = numberOfWheels;
    }

    drive(): void {
        console.log(`The ${this.type} is driving on ${this.numberOfWheels} wheels.`);
    }
}
// Subclass of LightweightVehicle with a type of string and implements VehicleWithWheels interface
class Motorcycle extends LightweightVehicle<'motorcycle'> implements VehicleWithWheels {
    numberOfWheels: number;

    constructor(type: 'motorcycle', weight: number, numberOfWheels: number) {
        super(type, weight);
        this.numberOfWheels = numberOfWheels;
    }

    drive(): void {
        console.log(`The ${this.type} is driving on ${this.numberOfWheels} wheels.`);
    }
}

// Create new instances of the Car and Motorcycle classes
const sportsCar = new Car('car', 1200, 4);
const dirtBike = new Motorcycle('motorcycle', 450, 2);

// Access properties and methods of the instances
console.log(sportsCar.type); // Output: 'car'
console.log(dirtBike.numberOfWheels); // Output: 2
sportsCar.drive(); // Output: 'The car is driving on 4 wheels.'
dirtBike.getDetails(); // Output: 'The motorcycle vehicle weighs 450 kilograms.'