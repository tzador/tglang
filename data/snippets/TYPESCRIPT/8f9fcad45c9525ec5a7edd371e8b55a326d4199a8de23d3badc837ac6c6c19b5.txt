/**
 Interface for a custom Button class
 Property: buttonText, type: string
 Method: displayAlert, parameters: buttonColor
 Method: updateButtonText, parameters: newText
*/
interface Button {
  buttonText: string;
  displayAlert(buttonColor: string): void;
  updateButtonText(newText: string): void;
}

/**
 Custom Button class implementing the Button interface
 Property: buttonText, type: string
 Method: constructor, parameters: textToDisplay
 Method: displayAlert, parameters: buttonColor
 Method: updateButtonText, parameters: newText
*/
class CustomButton implements Button {
  buttonText: string;

  constructor(textToDisplay: string) {
    this.buttonText = textToDisplay;
  }

  displayAlert(buttonColor: string): void {
    alert(`Clicked ${this.buttonText} button. Color: ${buttonColor}`);
  }

  updateButtonText(newText: string): void {
    this.buttonText = newText;
  }
}

/**
 Function to create and return a new CustomButton object
 Parameters: textToDisplay
 Returns: CustomButton object with initial textToDisplay value
*/
function createButton(textToDisplay: string): CustomButton {
  return new CustomButton(textToDisplay);
}

/**
 Create a new CustomButton object and display an alert when clicked
 Property: newButton, type: CustomButton
 Property: buttonColor, type: string
*/
let newButton: CustomButton = createButton("Click Me");
let buttonColor: string = "red";
newButton.displayAlert(buttonColor);