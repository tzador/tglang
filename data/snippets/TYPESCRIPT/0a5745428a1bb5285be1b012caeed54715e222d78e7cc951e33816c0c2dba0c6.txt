// Function that calculates the sum of two numbers
function sum(x: number, y: number): number {
  return x + y;
}

// Object with properties and a method
const person: {
  name: string;
  age: number;
  greet: (phrase: string) => void;
} = {
  name: 'John',
  age: 30,
  greet(phrase: string) {
    console.log(phrase + ' ' + this.name);
  }
}

// Interface for a shape
interface Shape {
  readonly name: string;
  readonly sides: number;
  area: () => number;
}

// Implementation of Shape interface
class Square implements Shape {
  name = 'square';
  sides = 4;
  constructor(private sideLength: number) {}

  area() {
    return this.sideLength * this.sideLength;
  }
}

// Generic class with multiple type parameters
class KeyValuePair<K, V extends string> {
  constructor(
    public key: K,
    public value: V
  ) {}

  print() {
    console.log(`Key: ${this.key}, Value: ${this.value}`);
  }
}

// Function that takes in a generic type
function identity<T>(arg: T): T {
  return arg;
}

// Create instance of different data types
const rect = new Square(5);
const pair = new KeyValuePair<number, string>(1, 'hello');
const value = identity<number>(5);