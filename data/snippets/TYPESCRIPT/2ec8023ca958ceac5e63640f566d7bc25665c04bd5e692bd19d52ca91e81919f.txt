type Options<Value> = {
  [K in keyof Value]: {
    required: boolean;
    type: keyof Value;
  };
};

type User = {
  name: string; // Defines type of 'name' as string
  age: number; // Defines type of 'age' as number
  email: string; // Defines type of 'email' as string
};

const validate = <T>(data: T, schema: Options<T>) => {
  const errors: string[] = [];
  for (const key in schema) {
    const { type, required } = schema[key];
    if (required && !data[key]) {
      errors.push(`${key} is required.`);
    } else if (
      type === 'string' &&
      typeof data[key] !== 'string'
    ) {
      errors.push(`${key} must be a string.`);
    } else if (
      type === 'boolean' &&
      typeof data[key] !== 'boolean'
    ) {
      errors.push(`${key} must be a boolean.`);
    } else if (
      type === 'number' &&
      typeof data[key] !== 'number'
    ) {
      errors.push(`${key} must be a number.`);
    } else if (
      type === 'object' &&
      typeof data[key] !== 'object'
    ) {
      errors.push(`${key} must be an object.`);
    }
  }

  return errors;
};

const userData: User = {
  name: 'John', // Valid
  age: '25', // Invalid, should be a number
};

const errors = validate(userData, {
  name: { required: true, type: 'string' }, // Validates that 'name' is required and must be a string
  age: { required: true, type: 'number' }, // Validates that 'age' is required and must be a number
  email: { required: true, type: 'string' }, // Validates that 'email' is required and must be a string
});