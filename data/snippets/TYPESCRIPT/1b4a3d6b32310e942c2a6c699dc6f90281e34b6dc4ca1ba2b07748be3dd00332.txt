// An example of a function with multiple parameters and conditional statements in TypeScript

// Define a function named "calculateSum" that takes in three parameters
// The first parameter is "num1" of type number
// The second parameter is "num2" of type number
// The third parameter is "operation" of type string
function calculateSum(num1:number, num2:number, operation:string) {
  
  // Create an empty variable "result" of type number
  let result:number;
  
  // Use conditional statements to check the value of "operation"
  // If "operation" is 'add', add "num1" and "num2" and assign it to "result"
  // If "operation" is 'subtract', subtract "num2" from "num1" and assign it to "result"
  // If "operation" is 'multiply', multiply "num1" and "num2" and assign it to "result"
  // If "operation" is 'divide', divide "num1" by "num2" and assign it to "result"
  if (operation === 'add') {
    result = num1 + num2;
  } else if (operation === 'subtract') {
    result = num1 - num2;
  } else if (operation === 'multiply') {
    result = num1 * num2;
  } else if (operation === 'divide') {
    result = num1 / num2;
  } else {
    // If none of the above conditions are true, throw an error
    throw new Error('Invalid operation');
  }
  
  // Return the value of "result"
  return result;
}

// Call the function "calculateSum" with different parameters and log the output
console.log(calculateSum(2, 4, 'add')); // Output: 6
console.log(calculateSum(10, 5, 'subtract')); // Output: 5
console.log(calculateSum(3, 5, 'multiply')); // Output: 15
console.log(calculateSum(10, 2, 'divide')); // Output: 5

// Try calling the function with an invalid operation
calculateSum(1, 2, 'power'); // Throws an error: Invalid operation