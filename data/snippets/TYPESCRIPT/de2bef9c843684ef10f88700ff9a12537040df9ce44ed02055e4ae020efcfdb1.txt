interface User { // interface declaration
  id: number; // id property of type number
  name: string; // name property of type string
  age?: number; // optional age property of type number
  getAddress: (street: string, city: string, country?: string) => string; //method that takes in street and city parameters and returns a string with optional country parameter 
}

class Student implements User { // class declaration implementing User interface
  id: number; // id property of type number
  name: string; // name property of type string
  age: number; // age property of type number
  grade: string; //grade property of type string
  
  constructor(id: number, name: string, age: number, grade: string) { //constructor with parameters
    this.id = id; //assigning id parameter to id property
    this.name = name; //assigning name parameter to name property
    this.age = age; //assigning age parameter to age property
    this.grade = grade; //assigning grade parameter to grade property
  }
  
  getAddress(street: string, city: string, country?: string): string { //method implementation with parameters and return type
    let address = `${street}, ${city}`; //setting address string
    if(country) { //if country parameter is provided
      address += `, ${country}`; //add country to address string
    }
    return address; //returning address string
  }
}

const student1 = new Student(1, 'John', 18, 'A'); //creating new instance of Student class
console.log(student1.getAddress('Main St', 'New York', 'USA')); //logging address using getAddress method
//output: Main St, New York, USA