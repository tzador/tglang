// Declaring an interface named 'Person'
interface Person {
  name: string; // Declaring a property 'name' of type 'string'
  age?: number; // Declaring an optional property 'age' of type 'number'
  [key: string]: any; // Declaring an index signature of type 'any' to accomodate other properties
  greet: () => void; // Declaring a method 'greet' that doesn't return anything
}

// Creating a class 'Student' that implements the 'Person' interface
class Student implements Person {
  name: string; // Implementing the 'name' property from 'Person' interface
  age?: number; // Implementing the 'age' property from 'Person' interface (as optional)
  // Declaring a private property 'studentID' of type 'string'
  private studentID: string;

  // Constructor to initialize the 'name' and 'studentID' properties
  constructor(name: string, studentID: string) {
    this.name = name; // Assigning the 'name' parameter to the 'name' property
    this.studentID = studentID; // Assigning the 'studentID' parameter to the 'studentID' property
  }

  // Implementing the 'greet' method from the 'Person' interface
  greet() {
    console.log(`Hi, my name is ${this.name} and my student ID is ${this.studentID}`);
  }

  // Defining a static method that returns a new 'Student' instance
  static createNewStudent(name: string, studentID: string) {
    return new Student(name, studentID);
  }
}

// Creating a new instance of the 'Student' class
const newStudent = Student.createNewStudent('John', 'A0012345');

// Calling the 'greet' method on the new instance
newStudent.greet();