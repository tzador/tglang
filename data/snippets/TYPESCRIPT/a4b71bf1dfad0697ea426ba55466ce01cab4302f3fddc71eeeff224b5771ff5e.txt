class LinkedList<T> {
    private head: LinkedListNode<T> | null;
    private tail: LinkedListNode<T> | null;

    constructor() {
        this.head = null;
        this.tail = null;
    }

    public addToHead(value: T): void {
        const newNode = new LinkedListNode<T>(value, this.head);
        this.head = newNode;
        if (!this.tail) {
            this.tail = newNode;
        }
    }

    public addToTail(value: T): void {
        const newNode = new LinkedListNode<T>(value, null);
        if (this.tail) {
            this.tail.next = newNode;
        }
        this.tail = newNode;
        if (!this.head) {
            this.head = newNode;
        }
    }

    public removeHead(): T {
        if (!this.head) {
            return null;
        }
        const value = this.head.value;
        this.head = this.head.next;
        if (!this.head) {
            this.tail = null;
        }
        return value;
    }

    public removeTail(): T {
        if (!this.tail) {
            return null;
        }
        const value = this.tail.value;
        let currentNode = this.head;
        while (currentNode.next && currentNode.next !== this.tail) {
            currentNode = currentNode.next;
        }
        currentNode.next = null;
        this.tail = currentNode;
        return value;
    }

    public contains(value: T): boolean {
        let currentNode = this.head;
        while (currentNode) {
            if (currentNode.value === value) {
                return true;
            }
            currentNode = currentNode.next;
        }
        return false;
    }

    public get(index: number): T {
        let count = 0;
        let currentNode = this.head;
        while (currentNode) {
            if (count === index) {
                return currentNode.value;
            }

            count++;
            currentNode = currentNode.next;
        }
        return null;
    }

    public insertAtIndex(value: T, index: number): void {
        if (index === 0) {
            this.addToHead(value);
        }
        let count = 0;
        let currentNode = this.head;
        while (currentNode) {
            if (count + 1 === index) {
                const newNode = new LinkedListNode<T>(value, currentNode.next);
                currentNode.next = newNode;
                return;
            }
            count++;
            currentNode = currentNode.next;
        }
    }

    public removeFromIndex(index: number): T {
        if (index === 0) {
            return this.removeHead();
        }
        let count = 0;
        let currentNode = this.head;
        while (currentNode) {
            if (count + 1 === index && currentNode.next) {
                const value = currentNode.next.value;
                currentNode.next = currentNode.next.next;
                return value;
            }
            count++;
            currentNode = currentNode.next;
        }
        return null;
    }

    public size(): number {
        let size = 0;
        let currentNode = this.head;
        while (currentNode) {
            size++;
            currentNode = currentNode.next;
        }
        return size;
    }
}

class LinkedListNode<T> {
    public value: T;
    public next: LinkedListNode<T> | null;

    constructor(value: T, next: LinkedListNode<T> | null) {
        this.value = value;
        this.next = next;
    }
}