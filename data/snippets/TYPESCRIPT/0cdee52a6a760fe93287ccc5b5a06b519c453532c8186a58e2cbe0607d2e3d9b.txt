/**
 * Helper class to create and manipulate a binary tree.
 */
class BinaryTree<T> {
    private _root: Node<T> | null;

    /**
     * Constructor for BinaryTree class.
     * @param rootValue - the value of the root node
     */
    constructor(rootValue: T) {
        this._root = new Node<T>(rootValue);
    }

    /**
     * Returns the root node of the binary tree.
     * @returns - the root node
     */
    getRoot(): Node<T> | null {
        return this._root;
    }

    /**
     * Inserts a new node with the given value into the binary tree.
     * @param value - the value of the new node
     */
    insert(value: T): void {
        if (!this._root) {
            this._root = new Node<T>(value);
            return;
        }

        let currentNode = this._root;
        while (currentNode !== null) {
            if (value <= currentNode.value) {
                if (currentNode.left) {
                    currentNode = currentNode.left;
                } else {
                    currentNode.left = new Node<T>(value);
                    break;
                }
            } else {
                if (currentNode.right) {
                    currentNode = currentNode.right;
                } else {
                    currentNode.right = new Node<T>(value);
                    break;
                }
            }
        }
    }

    /**
     * Traverses the binary tree in depth-first fashion and executes the given function on each node.
     * @param func - the function to be executed on each node
     * @param node - the current node (only used during recursion)
     */
    traverseDepthFirst(func: (node: Node<T>) => void, node: Node<T> | null = this._root): void {
        if (!node) {
            return;
        }

        func(node);
        if (node.left) {
            this.traverseDepthFirst(func, node.left);
        }
        if (node.right) {
            this.traverseDepthFirst(func, node.right);
        }
    }
}

/**
 * Class representing a node in a binary tree.
 */
class Node<T> {
    value: T;
    left: Node<T> | null = null;
    right: Node<T> | null = null;

    /**
     * Constructor for Node class.
     * @param value - the value of the node
     */
    constructor(value: T) {
        this.value = value;
    }
}

// Example usage:
const binaryTree = new BinaryTree<number>(5);
binaryTree.insert(2);
binaryTree.insert(7);
binaryTree.insert(1);
binaryTree.insert(10);

binaryTree.traverseDepthFirst((node) => {
    console.log(node.value); // outputs: 5, 2, 1, 7, 10
});