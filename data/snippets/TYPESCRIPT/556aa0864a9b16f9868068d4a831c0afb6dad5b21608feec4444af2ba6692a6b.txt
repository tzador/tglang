interface Person {
    name: string; // defining property name with type string
    age: number; // defining property age with type number
    address?: string; // defining optional property address with type string
    hobbies: string[]; // defining array property hobbies with type string
    greet: (name: string, age: number) => void; // defining function property greet with parameters name (type string) and age (type number)
    bio?: () => string; // defining optional function property bio with return type string
}

class Employee implements Person {
    constructor(public name: string, public age: number, public address?: string, public hobbies: string[]) {
        // assigning input parameters to class properties
    }

    greet(name: string, age: number): void {
        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`); // implementing greet function with console output
    }

    bio?(): string {
        return `My name is ${this.name}, I am ${this.age} years old, and I live at ${this.address}. My hobbies include ${this.hobbies.join(", ")}.` // implementing bio function with return statement
    }
}

const person1 = new Employee("John", 30, "123 Main Street", ["reading", "playing guitar"]); // creating new Employee object
person1.greet(person1.name, person1.age); // calling greet function on person1 object
console.log(person1.bio?.()); // calling bio function and outputting result to console