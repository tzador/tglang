interface Person { //defines a Person interface with properties and methods
  name: string; //property storing name as string
  age: number; //property storing age as number
  greet(): void; //method to greet with no return value
  addHobby(hobby: string): void; //method to add a hobby with parameter of type string and no return value
}

class Student implements Person { //implements Person interface to use its properties and methods
  name: string; //property storing name as string
  age: number; //property storing age as number
  hobbies: string[] = []; //property storing hobbies as an array of strings

  constructor(name: string, age: number) { //constructor function to initialize name and age properties
    this.name = name; //initializes name property
    this.age = age; //initializes age property
  }

  greet(): void { //implementation of greet method from Person interface
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
  }

  addHobby(hobby: string): void { //implementation of addHobby method from Person interface
    this.hobbies.push(hobby); //pushes new hobby into hobbies array
    console.log(`Added ${hobby} to my list of hobbies.`);
  }
}

const john = new Student("John", 25); //creates new instance of Student class with name and age as parameters
john.greet(); //calls greet method on john instance
john.addHobby("reading"); //calls addHobby method on john instance with "reading" as parameter
console.log(john.hobbies); //logs hobbies array from john instance

/*
Output: