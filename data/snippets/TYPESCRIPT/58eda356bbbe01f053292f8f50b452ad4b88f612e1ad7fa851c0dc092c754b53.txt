// This is a complex Typescript code snippet that declares a class, interfaces, and functional methods

// Declare an interface for a person with properties for name, age, and occupation
interface Person {
    name: string;
    age: number;
    occupation: string;
}

// Declare a class called User that implements the Person interface
class User implements Person {
    // Define properties for the user's name, age, and occupation
    name: string;
    age: number;
    occupation: string;

    // Define a constructor that sets the initial name, age, and occupation values for a new User object
    constructor(name: string, age: number, occupation: string) {
        this.name = name;
        this.age = age;
        this.occupation = occupation;
    }

    // Define a method called introduce that prints out a message with the user's name and occupation
    introduce(): void {
        console.log(`Hi, my name is ${this.name} and I am a ${this.occupation}. Nice to meet you!`);
    }

    // Define a method called celebrateBirthday that increments the age by 1 and prints out a birthday message
    celebrateBirthday(): void {
        this.age++;
        console.log(`Happy birthday to me, I am now ${this.age} years old!`);
    }
}

// Create a new User object with a name of "Jane", an age of 23, and an occupation of "Software Developer"
let jane: User = new User("Jane", 23, "Software Developer");

// Call the introduce and celebrateBirthday methods for the jane object
jane.introduce(); // Output: Hi, my name is Jane and I am a Software Developer. Nice to meet you!
jane.celebrateBirthday(); // Output: Happy birthday to me, I am now 24 years old!