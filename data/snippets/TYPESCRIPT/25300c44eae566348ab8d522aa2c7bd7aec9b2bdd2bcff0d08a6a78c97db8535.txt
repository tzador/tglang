interface Person {
  name: string; // defining property 'name' as a string
  age: number; // defining property 'age' as a number
  address?: string; // defining optional property 'address' as a string
  greet(message: string): void; // defining method 'greet' with a parameter 'message' of type string and return type void
}

class Employee implements Person {
  constructor(public name: string, public age: number, public department: string) { }
  // defining constructor with parameters to set name, age, and department properties on instantiation

  greet(message: string) {
    console.log(`Hello, my name is ${this.name} and I work in the ${this.department} department.`); // logging a greeting message using template literals and object properties
    console.log(message); // logging the message parameter passed in
  }
}

let john = new Employee("John", 25, "Sales"); // creating a new instance of the Employee class
john.greet("Welcome to our company!"); // calling the greet method and passing in a message

// Output:
class Employee has been defined with a constructor that sets the properties 'name', 'age',and 'department' on instantiation. The 'greet' method logs a greeting message and the message provided as a parameter. A new instance of Employee, named 'john', has been created and the greet method has been called.