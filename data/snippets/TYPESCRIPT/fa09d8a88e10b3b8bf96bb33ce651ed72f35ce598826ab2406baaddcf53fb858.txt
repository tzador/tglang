interface Person {
    name: string;
    age: number;
}

type Nullable<T> = T | null;

const user: Nullable<Person> = {
    name: 'John',
    age: 30
}

function fetchUser(id: string): Promise<Person> {
    return fetch(`/users/${id}`)
        .then(response => response.json())
}

async function printUserInfo(id: string) {
    const user = await fetchUser(id);
    console.log(`Name: ${user.name}, Age: ${user.age}`);
}

interface ApiResponse<T> {
    data: T;
    error: boolean;
    message: string;
}

type UserApiResponse = ApiResponse<Nullable<Person>>;

async function updateUserAge(id: string, newAge: number): Promise<UserApiResponse> {
    const response = await fetch(`/users/${id}`, {
        method: 'PUT',
        body: JSON.stringify({ age: newAge }),
        headers: { 'Content-Type': 'application/json' }
    });
    return response.json();
}

(async () => {
    const updatedUser = await updateUserAge('12345', 31);
    if (updatedUser.error) {
        console.log(updatedUser.message);
    }
})();