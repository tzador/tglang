type Class<T> = new (...args: any[]) => T;

/**
* Decorator that logs the name of the class
* and the parameters of the constructor
*/
function Logger<T extends Class<{}>>(constructor: T) {
  const original = constructor;

  // Override the constructor
  const newConstructor: any = function (...args: any[]) {
    console.log(`Creating instance of ${original.name}`);
    console.log(`Constructor parameters: ${JSON.stringify(args)}`);

    // Call the original constructor with the given arguments
    return new original(...args);
  }

  // Set the prototype equal to the original prototype
  newConstructor.prototype = original.prototype;

  // Return the new constructor
  return newConstructor;
}

/**
* Decorator that adds a property to the class
*/
function AddProperty<T extends Class<{}>>(constructor: T) {
  // Create a new property
  const newProperty = "newProperty";

  // Set the property on the prototype of the class
  Object.defineProperty(constructor.prototype, newProperty, {
    value: "added property",
    writable: true,
    configurable: true,
    enumerable: true
  });
}

/**
* A class decorated with the Logger and AddProperty decorators
*/
@Logger
@AddProperty
class ExampleClass {
  constructor(public name: string) {
    console.log(`Creating instance of ExampleClass with name: ${this.name}`);
  }

  greet() {
    console.log(`Hello, my name is ${this.name}.`);
  }
}

// Create an instance of the decorated class
const exampleInstance = new ExampleClass("John");

// Output:
// Creating instance of ExampleClass
// Constructor parameters: ["John"]
// Creating instance of ExampleClass with name: John

// Access the added property
console.log(exampleInstance.newProperty);

// Output:
// "added property"