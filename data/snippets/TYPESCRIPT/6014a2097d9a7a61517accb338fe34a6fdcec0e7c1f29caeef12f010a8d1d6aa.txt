class Animal {
    private name: string;
    private age: number;

    constructor (name: string, age: number) {
        this.name = name;
        this.age = age;
    }

    public speak(): void {
        console.log(`${this.name} says hello!`);
    }

    public getPersonality(): string {
        if (this.age > 5) {
            return 'mature';
        } else {
            return 'young';
        }
    }
}

interface Pet extends Animal {
    breed: string;
    color: string;
}

class Dog extends Animal {
    private breed: string;
    private color: string;
    private nickname: string;

    constructor (name: string, age: number, breed: string, color: string) {
        super(name, age);
        this.breed = breed;
        this.color = color;
        this.nickname = this.generateNickname();
    }

    private generateNickname(): string {
        const vowels = ['a', 'e', 'i', 'o', 'u'];
        const breedArr = this.breed.split('');
        const firstLetter = breedArr[0].toLowerCase();
        if (vowels.includes(firstLetter)) {
            return `The ${this.color} ${this.breed}`;
        } else {
            return `${this.color} ${this.breed}`;
        }
    }

    public speak(): void {
        super.speak();
        console.log(`${this.name} also barks: Woof!`);
    }

    public getPersonality(): string {
        let personality = super.getPersonality();
        if (this.breed === 'Labrador') {
            personality += ' and lovable';
        } else {
            personality += ' but feisty';
        }
        return personality;
    }

    public getBreed(): string {
        return this.breed;
    }
}

const myDog: Dog = new Dog('Rex', 4, 'Labrador', 'Golden');
myDog.speak(); // Output: "Rex says hello!"
               //         "Rex also barks: Woof!"
myDog.getPersonality(); // Output: "young and lovable"
myDog.getBreed(); // Output: "Labrador"