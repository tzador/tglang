// Define a generic class
class GenericClass<T> {
    private genericProperty: T;     // Annotated property of type T
    
    // Constructor with a parameter of type T
    constructor(val: T) {
        this.genericProperty = val;
    }
    
    // Method that takes in an array of type T and returns a string
    genericMethod(values: T[]): string {
        let concatString = "";      // Annotated empty string variable
        for (let value of values) {
            concatString += value + " ";    // Concatenate each value with a space
        }
        return concatString.trim();
    }
    
    // Static method that takes in two values of type T, concatenates them and returns a string
    static genericStaticMethod<U>(val1: T, val2: T): string {
        return val1.toString() + val2.toString();
    }
}

// Instantiate GenericClass with a string type
let stringInstance = new GenericClass<string>("Hello");

// Instantiate GenericClass with a number type
let numberInstance = new GenericClass<number>(5);

// Call genericMethod on stringInstance and pass in an array of strings
let stringOutput = stringInstance.genericMethod(["Hello", "World"]);

// Call genericMethod on numberInstance and pass in an array of numbers
let numberOutput = numberInstance.genericMethod([1, 2, 3]);

// Call genericStaticMethod and pass in two strings
let staticOutput = GenericClass.genericStaticMethod<string>("Hi", "there");

// Print output
console.log(stringOutput);   // Output: Hello World
console.log(numberOutput);   // Output: 1 2 3
console.log(staticOutput);   // Output: Hithere