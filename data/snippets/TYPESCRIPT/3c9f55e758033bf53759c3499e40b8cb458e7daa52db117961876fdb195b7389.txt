/**
 * This is a class for creating an animal object
 */
class Animal {
    name: string; //property that stores animal's name
    age: number; //property that stores animal's age
    species: string; //property that stores animal's species
    color: string; //property that stores animal's color

    /**
     * This is the constructor method for the Animal class
     * @param name - the name of the animal
     * @param age - the age of the animal
     * @param species - the species of the animal
     * @param color - the color of the animal
     */
    constructor(name: string, age: number, species: string, color: string) {
        this.name = name;
        this.age = age;
        this.species = species;
        this.color = color;
    }
    
    /**
     * This method outputs a string representation of the animal
     * @returns a string representing the animal's information
     */
    toString(): string {
        return `Name: ${this.name}\nAge: ${this.age}\nSpecies: ${this.species}\nColor: ${this.color}`;
    }

    /**
     * This method checks if the animal is of a certain species
     * @param species - the species to check against
     * @returns true if the animal is of the given species, false otherwise
     */
    isSpecies(species: string): boolean {
        return this.species === species;
    }
}

/**
 * This is a class for creating a cat object
 * Cats are a type of animal
 */
class Cat extends Animal {
    breed: string; //property that stores the cat's breed
    meow: string; //property that stores the cat's meow sound

    /**
     * This is the constructor method for the Cat class
     * @param name - the name of the cat
     * @param age - the age of the cat
     * @param breed - the breed of the cat
     * @param color - the color of the cat
     * @param meow - the meow sound of the cat
     */
    constructor(name: string, age: number, breed: string, color: string, meow: string) {
        super(name, age, "cat", color);
        this.breed = breed;
        this.meow = meow;
    }

    /**
     * This method overrides the toString method in the parent class
     * @returns a string representing the cat's information
     */
    toString(): string {
        return `Name: ${this.name}\nAge: ${this.age}\nSpecies: Cat\nBreed: ${this.breed}\nColor: ${this.color}\nMeow: ${this.meow}`;
    }

    /**
     * This method makes the cat meow
     */
    makeMeow(): void {
        console.log(this.meow);
    }
}

//create an array of cats
let cats: Cat[] = [
    new Cat("Whiskers", 2, "Persian", "white", "Meow"),
    new Cat("Boots", 5, "Siamese", "brown", "Meooooow"),
    new Cat("Fluffy", 1, "Maine Coon", "black", "Purrrr")
];

//print out the information for each cat
cats.forEach(cat => {
    console.log(cat.toString());
});