/**
 * This is a class for creating an object that represents a car.
 */
class Car {
  private make: string; // the car's make
  private model: string; // the car's model
  private year: number; // the car's year
  private color: string; // the car's color
  private speed: number; // the car's current speed in mph
  private isOn: boolean; // whether the car's engine is on or off

  /**
   *
   * @param make The car's make
   * @param model The car's model
   * @param year The car's year
   * @param color The car's color
   */
  constructor(make: string, model: string, year: number, color: string) {
    this.make = make;
    this.model = model;
    this.year = year;
    this.color = color;
    this.speed = 0;
    this.isOn = false;
  }

  /**
   * Starts the car's engine
   */
  startEngine(): void {
    if (this.isOn) {
      console.log("The engine is already on");
    } else {
      this.isOn = true;
      console.log("The engine has been turned on");
    }
  }

  /**
   * Stops the car's engine
   */
  stopEngine(): void {
    if (this.isOn) {
      this.isOn = false;
      console.log("The engine has been turned off");
    } else {
      console.log("The engine is already off");
    }
  }

  /**
   *
   * @param acceleration The amount of acceleration in mph
   * @returns The new speed of the car
   */
  accelerate(acceleration: number): number {
    if (!this.isOn) {
      console.log("The engine is not on");
      return this.speed;
    } else if (acceleration <= 0) {
      console.log("Acceleration must be a positive value");
      return this.speed;
    } else {
      this.speed += acceleration;
      return this.speed;
    }
  }

  /**
   *
   * @param deceleration The amount of deceleration in mph
   * @returns The new speed of the car
   */
  decelerate(deceleration: number): number {
    if (!this.isOn) {
      console.log("The engine is not on");
      return this.speed;
    } else if (deceleration <= 0) {
      console.log("Deceleration must be a positive value");
      return this.speed;
    } else if (deceleration > this.speed) {
      console.log("Deceleration cannot exceed current speed");
      return this.speed;
    } else {
      this.speed -= deceleration;
      return this.speed;
    }
  }

  /**
   *
   * @param newColor The new color of the car
   */
  changeColor(newColor: string): void {
    this.color = newColor;
    console.log(`The car's color has been changed to ${this.color}`);
  }

  /**
   * Displays the car's make, model, year, color, and current speed
   */
  displayInfo(): void {
    console.log(
      `Make: ${this.make}, Model: ${this.model}, Year: ${this.year}, Color: ${this.color}, Current Speed: ${this.speed} mph`
    );
  }
}

// Create a new car object
const myCar = new Car("Honda", "Civic", 2019, "Red");

// Start the car's engine
myCar.startEngine(); // Output: The engine has been turned on

// Accelerate the car by 20 mph
myCar.accelerate(20); // Output: 20

// Change the car's color to blue
myCar.changeColor("Blue"); // Output: The car's color has been changed to Blue

// Display the car's information
myCar.displayInfo(); // Output: Make: Honda, Model: Civic, Year: 2019, Color: Blue, Current Speed: 20 mph

// Stop the car's engine
myCar.stopEngine(); // Output: The engine has been turned off