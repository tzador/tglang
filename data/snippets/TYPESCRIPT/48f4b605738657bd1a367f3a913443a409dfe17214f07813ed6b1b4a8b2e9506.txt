// Defining a generic class
class GenericClass<T> {
  private _property: T; // private property of generic type 

  // generic constructor 
  constructor(property: T) {
    this._property = property; 
  }

  // getter method for private property
  get property(): T {
    return this._property; 
  }

  // generic method that takes in an array of generic type 
  // and returns the first element of the array 
  getFirstElement(arr: T[]): T {
    return arr[0]; 
  }

  // generic static method that takes in two generic types 
  // and returns a tuple of the two types 
  static createTuple<T, U>(value1: T, value2: U): [T, U] {
    return [value1, value2]; 
  }
}

// Creating an instance of GenericClass with string as the generic type 
let stringClass = new GenericClass<string>("Hello World"); 

// Accessing private property of the class 
console.log(stringClass.property); // Output: Hello World 

// Calling the generic method and passing in an array of numbers 
let numbers = [1, 2, 3, 4, 5]; 
let firstNumber = stringClass.getFirstElement(numbers); // firstNumber has type number 
console.log(firstNumber); // Output: 1 

// Calling the generic static method and storing the returned tuple 
let tuple = GenericClass.createTuple<string, number>("Hello", 1); 
// tuple has type [string, number] 
console.log(tuple); // Output: ["Hello", 1]