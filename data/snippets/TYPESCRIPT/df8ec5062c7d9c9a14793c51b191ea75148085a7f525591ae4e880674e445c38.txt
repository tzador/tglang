// Example interface with required and optional properties
interface Person {
  name: string; // Required property
  age?: number; // Optional property
  job?: {
    title: string; // Nested required property
    salary?: number; // Nested optional property
  };
  [key: string]: any; // Index signature to allow for additional properties
}

// Example function using the Person interface
function createPerson(name: string, age?: number, job?: { title: string, salary?: number }): Person {
  let person: Person = {
    name: name,
    age: age,
    job: job
  };
  return person;
}

// Example object created using the createPerson function
let john: Person = createPerson("John", 35, {title: "Manager", salary: 50000});

// Output:
/*
interface Person {
  name: string;
  age?: number;
  job?: {
    title: string;
    salary?: number;
  };
  [key: string]: any;
}

function createPerson(name: string, age?: number, job?: { title: string, salary?: number }): Person {
  let person: Person = {
    name: name,
    age: age,
    job: job
  };
  return person;
}

let john: Person = createPerson("John", 35, {title: "Manager", salary: 50000});
*/