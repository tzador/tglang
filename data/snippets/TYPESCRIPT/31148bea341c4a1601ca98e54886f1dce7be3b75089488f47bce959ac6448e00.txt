interface Animal {
  name: string; // define property "name" as type string
  age: number; // define property "age" as type number
  eat: (food: string) => void; // define method "eat" that takes in string parameter "food" and does not return anything 
  sleep?: () => void; // define optional method "sleep" that does not take in any parameters and does not return anything 
  [key: string]: any; // define an index signature to allow for any additional properties of any type to be added
}

class Dog implements Animal {
  name: string; // declare property "name" as type string
  age: number; // declare property "age" as type number

  constructor(name: string, age: number) {
    this.name = name; // set value of property "name" to provided argument
    this.age = age; // set value of property "age" to provided argument
  }

  eat(food: string): void {
    console.log(`${this.name} is eating ${food}.`); // log a statement using template literals to indicate that the dog with given name is eating the provided food
  }

  sleep(): void {
    console.log(`${this.name} is sleeping.`); // log a statement using template literals to indicate that the dog with given name is sleeping
  }
}

const myDog = new Dog("Buddy", 3); // create a new instance of the Dog class with name "Buddy" and age 3

myDog.eat("bones"); // call the eat method on the myDog instance with argument "bones"

myDog.sleep(); // call the sleep method on the myDog instance

console.log(myDog.breed); // access and log the value of the "breed" property of myDog, which is not defined in the class but can be added through the index signature in the Animal interface

// Output:
//
// Buddy is eating bones.
// Buddy is sleeping.
// undefined (or the value of the "breed" property, if it was added)