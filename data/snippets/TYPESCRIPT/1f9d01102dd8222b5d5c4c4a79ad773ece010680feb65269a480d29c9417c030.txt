// Create a generic class
class MyGenericClass<T> {
  private myGenericProperty: T;

  // Initialize the class with a value for the generic property
  constructor(private propertyValue: T) {
    this.myGenericProperty = propertyValue;
  }

  // A generic method that returns the value of the generic property
  getGenericProperty(): T {
    return this.myGenericProperty;
  }

  // A generic method that sets the value of the generic property to the provided value
  setGenericProperty(newValue: T) {
    this.myGenericProperty = newValue;
  }

  // A method that takes in a generic type and checks if it matches the type of the generic property
  checkGenericType<U extends T>(arg: U): boolean {
    return typeof arg === typeof this.myGenericProperty;
  }
}

// Create an instance of the class with the generic type set to string
const stringGenericClass = new MyGenericClass<string>("Hello");

// Call the generic method to get the value of the generic property
const stringValue = stringGenericClass.getGenericProperty();

// Check if the type of the property matches the type of the argument passed in
const bool1 = stringGenericClass.checkGenericType("Hi");  // Returns true
const bool2 = stringGenericClass.checkGenericType(3);     // Returns false

// Create an instance of the class with the generic type set to number
const numberGenericClass = new MyGenericClass<number>(10);

// Call the generic method to get the value of the generic property
const numberValue = numberGenericClass.getGenericProperty();

// Check if the type of the property matches the type of the argument passed in
const bool3 = numberGenericClass.checkGenericType(12);   // Returns true
const bool4 = numberGenericClass.checkGenericType("8");  // Returns false