/*
* This is a complex code snippet in TypeScript
*/

// Define an interface for a Person
interface Person{
    name: string;
    age: number;
    gender: string;
    location: string;
}

// Create a function that takes in a Person and prints out their information
function printPersonInfo(person: Person): void{
    // Destructure the person object
    const {name, age, gender, location} = person;

    // Print out their information
    console.log(`Name: ${name}`);
    console.log(`Age: ${age}`);
    console.log(`Gender: ${gender}`);
    console.log(`Location: ${location}`);
}

// Create an array of Person objects
const people: Person[] = [
    {
        name: "John",
        age: 26,
        gender: "male",
        location: "New York"
    },
    {
        name: "Emily",
        age: 32,
        gender: "female",
        location: "London"
    },
    {
        name: "David",
        age: 42,
        gender: "male",
        location: "Tokyo"
    }
];

// Use a for loop to print out each person's information
for(let person of people){
    printPersonInfo(person);
}

// Define a generic class
class Container<T>{
    private value: T;

    constructor(value: T){
        this.value = value;
    }

    getValue(): T{
        return this.value;
    }
}

// Create an instance of the Container class with a number type
const numberContainer = new Container<number>(5);

// Call the getValue method to retrieve the number value
const numberValue = numberContainer.getValue();

// Print out the number value
console.log(`Number value: ${numberValue}`);

// Create an instance of the Container class with a string type
const stringContainer = new Container<string>("Hello");

// Call the getValue method to retrieve the string value
const stringValue = stringContainer.getValue();

// Print out the string value
console.log(`String value: ${stringValue}`);