// Define a generic class 'LinkedList'
class LinkedList<T> {
  head: ListNode<T>;
  tail: ListNode<T>;
  // Constructor for LinkedList that initializes the head and tail to null
  constructor() {
    this.head = null;
    this.tail = null;
  }
  // Method to add a new element to the end of the linked list
  add(element: T): void {
    // Create new node with the element and set its next property to null
    const newNode = new ListNode(element);
    newNode.next = null;
    // If the linked list is empty, set the head and tail to the new node
    if (this.head === null) {
      this.head = newNode;
      this.tail = newNode;
    // If the linked list is not empty, set the current tail's next to the new node and update the tail to be the new node
    } else {
      this.tail.next = newNode;
      this.tail = newNode;
    }
  }
  // Method to remove the first occurrence of a given element in the linked list
  remove(element: T): void {
    // If the linked list is empty, return
    if (this.head === null) {
      return;
    }
    // If the element to be removed is the head, update the head to be the next node and return
    if (this.head.element === element) {
      this.head = this.head.next;
      return;
    }
    // Initialize variables for the current and previous nodes
    let current: ListNode<T> = this.head;
    let previous: ListNode<T> = null;
    // Loop through the linked list until the current node's element matches the given element
    while (current !== null) {
      // If the current node's element matches the given element, update the previous node's next to the current node's next and return
      if (current.element === element) {
        previous.next = current.next;
        return;
      }
      // Update the current and previous nodes
      previous = current;
      current = current.next;
    }
    // If the loop ends without finding the given element, it does not exist in the linked list
    console.log('Element does not exist in linked list.');
  }
}

// Define a generic class 'ListNode'
class ListNode<T> {
  element: T;
  next: ListNode<T>;
  // Constructor for ListNode that initializes the element and next properties to null
  constructor(element: T) {
    this.element = element;
    this.next = null;
  }
}

// Create an instance of the LinkedList class with elements of type number
const linkedList = new LinkedList<number>();
linkedList.add(5);
linkedList.add(10);
linkedList.add(15);

// Print the current linked list
console.log(linkedList);

// Output:
// LinkedList {
//   head: ListNode { element: 5, next: ListNode { element: 10, next: ListNode { element: 15, next: null } } },
//   tail: ListNode { element: 15, next: null }
// }