function sortByProperty<T>(array: T[], property: string, order: string): T[] {
    // Create a new array to hold sorted objects
    let sortedArray: T[] = [];
    
    // If order is 'ascending', sort the array in ascending order using property
    if (order === 'ascending') {
        sortedArray = array.sort((a, b) => a[property] > b[property] ? 1 : -1);
    }
    // If order is 'descending', sort the array in descending order using property
    else if (order === 'descending') {
        sortedArray = array.sort((a, b) => a[property] < b[property] ? 1 : -1);
    }
    // If order is neither 'ascending' nor 'descending', throw an error
    else {
        throw new Error('Invalid order parameter!');
    }
    
    // Return the sorted array
    return sortedArray;
}

// Define an interface for an object with a 'name' property of type string
interface Person {
    name: string;
}

// Define an array of Person objects
const people: Person[] = [
    { name: 'John' },
    { name: 'Mary' },
    { name: 'Bob' },
    { name: 'Alice' }
];

// Call the sortByProperty function and pass in the array of people, property to sort by, and order
const sortedPeople = sortByProperty(people, 'name', 'ascending');

// Output the sorted array
console.log(sortedPeople); // Output: [{ name: 'Alice' }, { name: 'Bob' }, { name: 'John' }, { name: 'Mary' }]