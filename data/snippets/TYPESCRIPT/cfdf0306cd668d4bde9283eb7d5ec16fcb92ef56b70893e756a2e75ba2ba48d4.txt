// Define a class called Person
class Person {
    private name: string; // private property

    // constructor function to initialize Person instance
    constructor(name: string) {
        this.name = name;
    }

    // method to greet the Person
    public greet(): void {
       console.log(`Hello! My name is ${this.name}.`);
    }
}

// Define an interface called Developer
interface Developer {
    favoriteLanguage: string;
    codingLevel: string;
    // method to display the coding level
    displayCodingLevel(): void;
}

// Define a class called Programmer which extends from Person and implements Developer interface
class Programmer extends Person implements Developer {
    public favoriteLanguage: string; // public property
    private codingLevel: string; // private property

    // constructor function to initialize Programmer instance
    constructor(name: string, favoriteLanguage: string, codingLevel: string) {
        super(name);
        this.favoriteLanguage = favoriteLanguage;
        this.codingLevel = codingLevel;
   }

   // method to display the coding level
   public displayCodingLevel(): void {
       console.log(`My coding level is ${this.codingLevel}.`);
   }

   // method to code
   public code(): void {
       console.log(`Coding in ${this.favoriteLanguage} is fun!`);
   }
}

// Create an instance of Person and call greet() method
const person = new Person('John');
person.greet();

// Create an instance of Programmer and call greet(), displayCodingLevel(), and code() methods
const programmer = new Programmer('Alice', 'TypeScript', 'Expert');
programmer.greet();
programmer.displayCodingLevel();
programmer.code();