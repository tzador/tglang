// Define a generic interface for a data structure with a key and value pair
interface DataStructure<K, V> {
  key: K;
  value: V;
}

// Define a class for a binary search tree data structure
class BinarySearchTree {
  // Property to hold the root node of the tree
  root: Node;

  // Constructor to initialize the root node
  constructor(rootValue: number) {
    this.root = new Node(rootValue);
  }

  // Function to add a new node to the tree
  add(value: number) {
    let currentNode: Node = this.root;

    // Loop until a position is found for the new node or until duplicate value is found
    while (true) {
      // Check if the new value is less than the current node's value
      if (value < currentNode.value) {
        // Check if the current node has a left child
        if (currentNode.left) {
          // Move to the left child node
          currentNode = currentNode.left;
        } else {
          // Add the new node as the left child of the current node
          currentNode.left = new Node(value);
          break;
        }
      // Check if the new value is greater than the current node's value
      } else if (value > currentNode.value) {
        // Check if current node has a right child
        if (currentNode.right) {
          // Move to the right child node
          currentNode = currentNode.right;
        } else {
          // Add the new node as the right child of the current node
          currentNode.right = new Node(value);
          break;
        }
      // If the new value is equal to the current node's value, it is a duplicate and cannot be added
      } else {
        console.log("Duplicate value found, cannot add into tree");
        break;
      }
    }
  }

  // Function to search for a node with a given value in the tree
  search(value: number) {
    let currentNode: Node = this.root;

    // Loop until the value is found or until the end of the tree is reached
    while (currentNode) {
      // Check if the current node's value is equal to the value we are searching for
      if (currentNode.value === value) {
        // Return the current node
        return currentNode;
      // Check if the value is less than the current node's value
      } else if (value < currentNode.value) {
        // Move to the left child node
        currentNode = currentNode.left;
      // Check if the value is greater than the current node's value
      } else if (value > currentNode.value) {
        // Move to the right child node
        currentNode = currentNode.right;
      }
    }

    // If the value is not found, return null
    return null;
  }
}

// Define a class for a node in the binary search tree
class Node {
  // Property to hold the node's value
  value: number;

  // Property to hold the left child node
  left: Node | null;

  // Property to hold the right child node
  right: Node | null;

  // Constructor to initialize the node's value and children to null
  constructor(value: number) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

// Create a new instance of the BinarySearchTree class
const bst = new BinarySearchTree(50);
// Add new nodes to the tree
bst.add(20);
bst.add(70);
bst.add(30);
bst.add(80);
bst.add(10);
bst.add(60);
bst.add(90);

// Search for nodes with given values in the tree
bst.search(30); // Output: Node { value: 30, left: null, right: null }
bst.search(25); // Output: null