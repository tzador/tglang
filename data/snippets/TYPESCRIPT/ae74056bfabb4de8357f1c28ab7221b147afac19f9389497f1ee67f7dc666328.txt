// This code snippet is an example of a class in TypeScript

// First, we define a class called "Car"
class Car {
    // Next, we define a constructor function that takes in two parameters, "make" and "model"
    constructor(make, model) {
        // We use the "this" keyword to refer to the current instance of the class
        this.make = make;
        this.model = model;
    }

    // We can also define methods within our class
    // This method will print out the make and model of the car
    printCarInfo() {
        console.log(`This car is a ${this.make} ${this.model}`);
    }

    // We can also define static properties and methods
    // These can be accessed without having to create an instance of the class
    static numberOfWheels = 4;

    static getNumberOfWheels() {
        console.log(`This car has ${Car.numberOfWheels} wheels`);
    }
}

// Now, we can create an instance of the Car class with the "new" keyword
const myCar = new Car("Toyota", "Camry");

// We can access the properties and methods of our instance using the dot notation
myCar.printCarInfo(); // Output: This car is a Toyota Camry
Car.getNumberOfWheels(); // Output: This car has 4 wheels

// We can also extend our class and inherit properties and methods from a parent class
class ElectricCar extends Car {
    // We can define new properties for our ElectricCar class
    batteryLife: number;

    // We can also override existing methods from the parent class
    printCarInfo() {
        // We can use the "super" keyword to access the parent class' method
        super.printCarInfo();
        console.log(`This electric car has a battery life of ${this.batteryLife} miles`);
    }
}

// Now, we can create an instance of our ElectricCar class and access properties and methods from both classes
const myElectricCar = new ElectricCar("Tesla", "Model S");
myElectricCar.batteryLife = 300;
myElectricCar.printCarInfo(); // Output: This car is a Tesla Model S, this electric car has a battery life of 300 miles