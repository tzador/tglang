/**
 * This is the first line of a multi-line comment
 * This is the second line of the same multi-line comment
*/
var myVariable: string = "This is a string";
const myConstant: number = 10;

let myArray: number[] = [1, 2, 3, 4, 5];

// This is a single line comment

/**
 * A for loop to print out the elements in the array
*/
for (let i = 0; i < myArray.length; i++) {
    console.log(`Array element at index ${i} is: ${myArray[i]}`);
}

// A function with parameters and return type
function addNumbers(a: number, b: number): number {
    return a + b;
}

// An interface with properties and method
interface Person {
    name: string;
    age: number;
    getIntroduction: () => string;
}

//A class with constructor, property, method, and static property
class Car {
    brand: string;
    constructor(brand: string) {
        this.brand = brand;
    }
    drive(): void {
        console.log(`Driving a ${this.brand} car.`);
    }
    static getWheels(): number {
        return 4;
    }
}

// An example of inheritance
class SportsCar extends Car {
    topSpeed: number;
    constructor(brand: string, topSpeed: number) {
        super(brand);
        this.topSpeed = topSpeed;
    }
    race(): void {
        console.log(`Racing in a ${this.brand} car with top speed ${this.topSpeed} mph.`);
    }
}

// An example of object creation using the new keyword
let myCar = new SportsCar("Ferrari", 200);
myCar.drive();
myCar.race();

// An example of type assertion
let someValue: any = "This is a string";
let strLength: number = (someValue as string).length;

// A try-catch block to handle errors
try {
    // Code that might throw an error
}
catch (err) {
    // Code to handle the error
    console.log(`Error message: ${err.message}`);
}