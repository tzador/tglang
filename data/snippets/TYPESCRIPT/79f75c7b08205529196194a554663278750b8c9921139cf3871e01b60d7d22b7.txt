// Interface for a generic car
interface Car {
  brand: string,
  model: string,
  year: number,
  color: string,
  engine: Engine,
  drive: () => void,
  stop: () => void,
}

// Interface for a car engine
interface Engine {
  cylinders: number,
  horsePower: number,
  type: string,
  start: () => void,
  stop: () => void,
}

// Class for a Toyota car
class Toyota implements Car {
  brand: string;
  model: string;
  year: number;
  color: string;
  engine: Engine;

  constructor(brand, model, year, color, engine) {
    this.brand = brand;
    this.model = model;
    this.year = year;
    this.color = color;
    this.engine = engine;
  }

  drive(): void {
    console.log('Driving my ' + this.color + ' ' + this.brand + ' ' + this.model);
  }

  stop(): void {
    console.log('Stopping my ' + this.color + ' ' + this.brand + ' ' + this.model);
  }
}

// Class for a V6 engine
class V6 implements Engine {
  cylinders: number;
  horsePower: number;
  type: string;

  constructor(cylinders, horsePower) {
    this.cylinders = cylinders;
    this.horsePower = horsePower;
    this.type = 'V6';
  }

  start(): void {
    console.log('Starting the ' + this.type + ' engine with ' + this.horsePower + ' horsepower');
  }

  stop(): void {
    console.log('Stopping the ' + this.type + ' engine');
  }
}

// Create a new Toyota car with a V6 engine
const myCar = new Toyota('Toyota', 'Camry', 2019, 'red', new V6(6, 268));

// Drive and stop the car
myCar.drive();
myCar.stop();

// Output:
// Driving my red Toyota Camry
// Stopping my red Toyota Camry