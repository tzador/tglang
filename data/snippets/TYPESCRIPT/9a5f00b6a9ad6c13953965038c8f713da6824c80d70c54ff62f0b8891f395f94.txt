/**
 * Represents a person.
 * @constructor
 * @param {string} name - The person's name.
 * @param {number} age - The person's age.
 */
class Person {
    // Private fields.
    private _name: string;
    private _age: number;
    /**
     * Creates a new instance of Person.
     * @param {string} name - The person's name.
     * @param {number} age - The person's age.
     */
    constructor(name: string, age: number) {
        // Initialize private fields.
        this._name = name;
        this._age = age;
    }
    /**
     * Returns the person's name.
     * @returns {string} - The person's name.
     */
    public getName(): string {
        return this._name;
    }
    /**
     * Sets the person's name.
     * @param {string} name - The person's name.
     */
    public setName(name: string): void {
        this._name = name;
    }
    /**
     * Returns the person's age.
     * @returns {number} - The person's age.
     */
    public getAge(): number {
        return this._age;
    }
    /**
     * Sets the person's age.
     * @param {number} age - The person's age.
     */
    public setAge(age: number): void {
        this._age = age;
    }
}
// Create a new instance of Person.
const person = new Person('John', 30);
// Get the person's name and age.
const name: string = person.getName();
const age: number = person.getAge();
// Print the person's name and age.
console.log(`Name: ${name}, Age: ${age}`);