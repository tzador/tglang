interface Person {
  name: string; //Declares a variable 'name' with the type 'string'
  age: number; //Declares a variable 'age' with the type 'number'
  address?: string; //Declares an optional parameter 'address' with the type 'string'
  [hobby: string]: any; //Declares an index signature with key as 'hobby' and type 'any'
  greet(person: Person): void; //Declares a function 'greet' that takes in a 'Person' parameter and returns 'void'
  addHobby(hobby: string): void; //Declares a function 'addHobby' that takes in a 'string' parameter and returns 'void'
}

class Student implements Person { //Declares a class 'Student' that implements the 'Person' interface
  constructor(public name: string, public age: number) // Creates a constructor with 'name' and 'age' parameters of type 'string' and 'number' respectively
  {
    this.name = name;
    this.age = age;
  }

  greet(person: Person): void { //Implements the 'greet' function from 'Person' interface
    console.log(`Hello ${person.name}, my name is ${this.name}`); //Prints out a greeting using 'person.name' and 'this.name' variables
  }

  addHobby(hobby: string): void { //Implements the 'addHobby' function from 'Person' interface
    this[hobby] = true; //Adds a new property with the 'hobby' name and sets its value to true
  }
}

const student = new Student("John", 20); //Creates a new instance of 'Student' with name "John" and age 20
student.greet({ name: "Jane", age: 22 }); //Calls the 'greet' function using an inline object as the parameter
student.addHobby("painting"); //Calls the 'addHobby' function with "painting" as the parameter
console.log(student.painting); //Prints out the value of the 'painting' property, which will be true