// This function uses type parameters to sort an array of objects based on a specific property
function sortArray<T>(arr: T[], prop: keyof T): T[] {
    // Create a copy of the original array
    const sortedArr = [...arr];
    // Sort the array based on the given property
    sortedArr.sort((a, b) => {
        if (a[prop] < b[prop]) {
            return -1;
        } else if (a[prop] > b[prop]) {
            return 1;
        } else {
            return 0;
        }
    });
    
    // Return the sorted array
    return sortedArr;
}

// Example usage: sorting an array of user objects by age
interface User {
    name: string;
    age: number;
}

const users: User[] = [{ name: 'John', age: 30 }, { name: 'Jane', age: 25 }, { name: 'Bob', age: 35 }];
const sortedUsers = sortArray(users, 'age');
console.log(sortedUsers); // Output: [{ name: 'Jane', age: 25 }, { name: 'John', age: 30 }, { name: 'Bob', age: 35 }]