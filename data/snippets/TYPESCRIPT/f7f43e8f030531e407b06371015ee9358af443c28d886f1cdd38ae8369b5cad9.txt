// Import interface
import { CustomInterface } from './custom-interface';

/**
 * A class representing a custom object.
 */
export class CustomObject implements CustomInterface {
  private _prop1: string;
  private _prop2: number;
  private _prop3: boolean;

  /**
   * Constructor for creating a new CustomObject.
   * @param prop1 - The first property of the object.
   * @param prop2 - The second property of the object.
   * @param prop3 - The third property of the object.
   */
  constructor(prop1: string, prop2: number, prop3: boolean) {
    this._prop1 = prop1;
    this._prop2 = prop2;
    this._prop3 = prop3;
  }

  /**
   * Getter for prop1.
   * @return - The value of prop1.
   */
  get prop1(): string {
    return this._prop1;
  }

  /**
   * Setter for prop1.
   * @param value - The new value for prop1.
   */
  set prop1(value: string) {
    this._prop1 = value;
  }

  /**
   * Getter for prop2.
   * @return - The value of prop2.
   */
  get prop2(): number {
    return this._prop2;
  }

  /**
   * Setter for prop2.
   * @param value - The new value for prop2.
   */
  set prop2(value: number) {
    this._prop2 = value;
  }

  /**
   * Getter for prop3.
   * @return - The value of prop3.
   */
  get prop3(): boolean {
    return this._prop3;
  }

  /**
   * Setter for prop3.
   * @param value - The new value for prop3.
   */
  set prop3(value: boolean) {
    this._prop3 = value;
  }

  /**
   * A method that performs a specific task using the properties of the object.
   * @param arg1 - An argument for the task.
   * @param arg2 - Another argument for the task.
   * @return - The result of the task.
   */
  performTask(arg1: string, arg2: number): string {
    return `${this._prop1} ${this._prop2} ${this._prop3}, with arguments ${arg1} and ${arg2}.`;
  }
}

// Create a new CustomObject
const customObject = new CustomObject('Hello', 5, true);

// Call the performTask method
customObject.performTask('world', 10);