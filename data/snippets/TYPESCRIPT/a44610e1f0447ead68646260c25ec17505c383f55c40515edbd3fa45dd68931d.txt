// This is a generic interface for a class called "Generator".
interface Generator<T> {
  next(): T; // Function that generates the next value of type T.
}

// This is a class called "FibonacciGenerator" that implements the Generator interface.
class FibonacciGenerator implements Generator<number> {
  private current: number = 1; // Property for the current value in the sequence.
  private previous: number = 0; // Property for the previous value in the sequence.

  // Function that generates the next number in the Fibonacci sequence.
  next(): number {
    let nextNumber: number = this.current + this.previous; // Formula for finding the next number.
    this.previous = this.current; // Set the previous value to the current value.
    this.current = nextNumber; // Set the current value to the next number.
    return nextNumber; // Return the next number in the sequence.
  }
}

// This is a class called "RandomGenerator" that implements the Generator interface.
class RandomGenerator implements Generator<number> {
  next(): number {
    // Generates a random number between 0 and 100.
    return Math.floor(Math.random() * 100); 
  }
}

// This is a function called "printSequence" that takes in a Generator instance and prints the next 10 values.
function printSequence(generator: Generator<number>): void {
  for (let i = 0; i < 10; i++) {
    console.log(generator.next()); // Call the next() function on the generator and log the value to the console.
  }
}

// Instantiate a FibonacciGenerator object and call the printSequence function on it.
const fibonacciGenerator: FibonacciGenerator = new FibonacciGenerator();
printSequence(fibonacciGenerator);

// Instantiate a RandomGenerator object and call the printSequence function on it.
const randomGenerator: RandomGenerator = new RandomGenerator();
printSequence(randomGenerator);

// Output:
// 1
// 1 
// 2
// 3
// 5
// 8
// 13
// 21
// 34
// 55
// Random numbers between 0 and 100