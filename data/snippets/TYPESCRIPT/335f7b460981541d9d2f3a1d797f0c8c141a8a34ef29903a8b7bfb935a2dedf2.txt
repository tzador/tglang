// Defining a generic class
class Box<T> {
  private _content: T;

  constructor(content: T) {
    this._content = content;
  }

  // Defining a getter function
  get content(): T {
    return this._content;
  }

  // Defining a function with generic type parameters
  map<R>(func: (arg: T) => R): Box<R> {
    return new Box(func(this._content));
  }

  // Defining a function with multiple generic type constraints
  merge<K extends number | string, V>(map: Map<K, V>, key: K): V {
    return map.get(key);
  }
}

// Instantiating a Box with a string
const stringBox = new Box<string>('Hello, world!');

// Calling the getter function
const content = stringBox.content;

// Creating a new Box with mapped content
const mappedBox = stringBox.map((str) => str.toUpperCase());

// Defining a Map variable
const numberMap = new Map<number, string>();
numberMap.set(1, 'One');
numberMap.set(2, 'Two');

// Calling the merge function
const mergedContent = mappedBox.merge(numberMap, 2);

// Output
console.log(mergedContent); // TWO