// An example class in TypeScript with generic type
class ExampleClass <T> {
    private _id: T;

    constructor(id: T) {
        this._id = id;
    }

    // A generic method that accepts a parameter of type T
    public showId(): T {
        console.log(`The id is ${this._id}`);
        return this._id;
    }

    // A method with generic return type
    public generateUniqueId(): T {
        // generate a unique id and store it in a variable
        let uniqueId: T = generateUniqueId();

        // do some operations with the unique id

        return uniqueId;
    }

    // A generic static method
    public static createInstance<T>(): ExampleClass<T> {
        return new ExampleClass<T>(generateRandomId());
    }

    // A generic getter
    public get id(): T {
        return this._id;
    }

    // A generic setter
    public set id(value: T) {
        this._id = value;
    }
}

// Creating an instance of the ExampleClass with string as the generic type
let exampleInstance = new ExampleClass<string>("abc123");

// Calling the showId method
let id = exampleInstance.showId();
// Output: The id is abc123

// Calling the generateUniqueId method
let uniqueId = exampleInstance.generateUniqueId();
// uniqueId is now a string

// Calling the static createInstance method
let newInstanceOfExampleClass = ExampleClass.createInstance<number>();
// newInstanceOfExampleClass is now an instance of ExampleClass with a number as its generic type
 
// Using the getter and setter methods
console.log(exampleInstance.id); // Output: abc123

exampleInstance.id = "xyz456";
console.log(exampleInstance.id); // Output: xyz456