interface Person {
        name: string;  // defines a property called "name" with type "string"
        age: number;  // defines a property called "age" with type "number"
        address?: string;  // "?" indicates an optional property, which may or may not be present
        getDetails(id: number): void; // defines a function called "getDetails" with a parameter "id" of type "number" and a return type of "void"
        [key: string]: any; // defines a key index signature where the key is a string and the value can be any type
    }
    
    class Employee implements Person { // declares a class "Employee" that implements the "Person" interface
        constructor(name: string, age: number) { // defines a constructor for the class with parameters "name" and "age"
            this.name = name; // "this" refers to the current instance of the class, allowing access to its properties and methods
            this.age = age;
        }
    
        name: string; // defines a property "name" with type "string"
        age: number; // defines a property "age" with type "number"
        address?: string; // defines an optional property "address" with type "string"
    
        getDetails(id: number) { // implements the "getDetails" function from the "Person" interface
            console.log(`Name: ${this.name}, Age: ${this.age}, ID: ${id}`); // uses string interpolation to log the details of the employee
        }
    
        private salary: number; // defines a private property accessible only within the class
    
        protected department: string; // defines a protected property accessible within the class and subclasses
    
        static company: string = "TechCo"; // defines a static property accessible without creating an instance of the class
    
        // define a static method that returns the company name
        static getCompanyName() {
            return this.company;
        }
    }
    
    let john: Person = new Employee("John", 30); // creates a new instance of the Employee class and assigns it to the variable "john"
    john.getDetails(123); // calls the "getDetails" function on the "john" instance, passing in an ID of 123
    
    // example of using a key index signature
    let bob: Person = {
        name: "Bob",
        age: 25,
        address: "123 Main Street",
        salary: 50000 // since the "Person" interface does not have a "salary" property, it can be added due to the key index signature
    };
    
    Employee.getCompanyName(); // calls the static method "getCompanyName" on the Employee class, which returns "TechCo"