/**
 * Creates a class for storing and manipulating data.
 *
 * @class Datahandler
 * @param {T[]} data - An array of items of type T to be stored.
 * @param {number} size - An optional number representing the size of the data.
 * @template T - A generic type parameter that represents the type of items in the data array.
 */
class Datahandler<T> {
    private data: T[]; // Array of type T to store the data.
    
    // Optional size parameter to specify the maximum size of the data array.
    private size?: number;
  
    /**
     * Constructs a new Datahandler instance.
     *
     * @param {T[]} data - An optional argument to specify the initial data array.
     * @param {number} size - An optional argument to specify the maximum size of the data array.
     */
    constructor(data?: T[], size?: number) {
        // If data is provided, initialize the data array with the provided data.
        this.data = data ? data : [];
        
        // If size is provided, set the maximum size of the data array.
        if (size) {
            this.size = size;
        }
    }
    
    /**
     * Adds an item of type T to the data array.
     *
     * @param {T} item - The item of type T to be added to the data array.
     * @returns {boolean} Returns true if the item was successfully added, false otherwise.
     */
    public add(item: T): boolean {
        // If the size is defined and the data array is already at maximum capacity, return false.
        if (this.size && this.data.length >= this.size) {
            return false;
        }
        
        // Otherwise, add the item to the data array and return true.
        this.data.push(item);
        return true;
    }
    
    /**
     * Removes an item of type T from the data array.
     *
     * @param {T} item - The item of type T to be removed from the data array.
     * @returns {boolean} Returns true if the item was successfully removed, false otherwise.
     */
    public remove(item: T): boolean {
        // Loop through the data array and check if the item exists.
        for (let i = 0; i < this.data.length; i++) {
            if (this.data[i] === item) {
                // If found, remove the item and return true.
                this.data.splice(i, 1);
                return true;
            }
        }
        
        // If not found, return false.
        return false;
    }
    
    /**
     * Returns the current size of the data array.
     *
     * @returns {number} The size of the data array.
     */
    public getSize(): number {
        return this.data.length;
    }
    
    /**
     * Returns a copy of the data array.
     *
     * @returns {T[]} A copy of the data array.
     */
    public getData(): T[] {
        return [...this.data];
    }
}

// Create a new instance of Datahandler for storing and manipulating strings.
const stringData = new Datahandler<string>(["Hello", "world"], 5);

// Add a new string to the data array.
stringData.add("This");
stringData.add("is");
stringData.add("a");
stringData.add("long");
stringData.add("and");
stringData.add("complex");
stringData.add("example");

// Remove a string from the data array.
stringData.remove("Hello");

// Get the current size of the data array.
console.log(stringData.getSize()); // Output: 6

// Get a copy of the data array.
const copyOfData = stringData.getData();
console.log(copyOfData); // Output: ["world", "This", "is", "a", "long", "and", "complex", "example"]