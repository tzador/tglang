/**
 * A generic class that accepts any type and stores it as a private property
 * The class also has a public method to retrieve the stored value
 */
class MyGenericClass<T> {
    private _value: T; //private property to store the value

    constructor(value: T) {
        this._value = value;
    }

    /**
     * A public method to return the stored value
     * @returns the stored value of type T
     */
    public getValue(): T {
        return this._value;
    }
}

//creating an instance of MyGenericClass with a string type
const stringInstance = new MyGenericClass<string>("This is a string");

//calling the getValue method to retrieve the stored value
const storedString = stringInstance.getValue();

//creating an instance of MyGenericClass with a number type
const numberInstance = new MyGenericClass<number>(10);

//calling the getValue method to retrieve the stored value
const storedNumber = numberInstance.getValue();

//creating an instance of MyGenericClass with a boolean type
const booleanInstance = new MyGenericClass<boolean>(true);

//calling the getValue method to retrieve the stored value
const storedBoolean = booleanInstance.getValue();

//printing out the stored values
console.log(storedString); //output: This is a string
console.log(storedNumber); //output: 10
console.log(storedBoolean); //output: true