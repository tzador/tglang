interface Person { //Defining an interface for a person
  name: string; //Declaring a property with its type
  age?: number; //Declaring an optional property with its type
  [key: string]: any; //Declaring an index signature for specifying any additional properties
  greet(): void; //Declaring a method with its return type
}

class Employee implements Person { //Defining a class that implements the Person interface
  constructor(public name: string, public jobTitle: string) { //Declaring constructor that assigns values to properties
    this.name = name;
    this.jobTitle = jobTitle;
  }

  greet(): void { //Implementing the greet method from the interface
    console.log(`Hello, my name is ${this.name} and I work as a ${this.jobTitle}.`); //Using string interpolation to display a greeting
  }

  work(hours: number): void { //Declaring a method with a parameter and its return type
    console.log(`I am working for ${hours} hours.`); //Using string interpolation to display number of hours worked
  }
}

const john = new Employee("John Doe", "Software Engineer"); //Creating an instance of the Employee class
john.greet(); //Calling the greet method
john.work(8); //Calling the work method with an argument

/* Output:
Hello, my name is John Doe and I work as a Software Engineer.
I am working for 8 hours.
*/