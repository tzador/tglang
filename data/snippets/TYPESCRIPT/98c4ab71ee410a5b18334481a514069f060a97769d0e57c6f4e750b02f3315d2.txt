//Create a generic class with a typed parameter
class Box<T> {
  constructor(private val: T) {}

  //Define a get method to return the stored value
  public get(): T {
    return this.val;
  }

  //Define a set method to update the stored value
  public set(val: T): void {
    this.val = val;
  }

  //Define a method that takes in an array and returns a new array with the stored value as the first element
  //and the array elements as the rest of the elements
  public pushToArray(arr: T[]): T[] {
    return [this.val, ...arr];
  }

  //Define a method to check if the stored value is of type 'number'
  public isNumber(): boolean {
    return typeof this.val === 'number';
  }
}

//Create an instance of the Box class with a number as the parameter
const myBox = new Box<number>(5);

//Call the get method to retrieve the stored value
const value = myBox.get(); //Output: 5

//Call the set method to update the stored value
myBox.set(10);
const newValue = myBox.get(); //Output: 10

//Call the pushToArray method to add the stored value to an existing array
const arr = [1, 2, 3];
const newArr = myBox.pushToArray(arr); //Output: [10, 1, 2, 3]

//Call the isNumber method to check if the stored value is a number
const isNum = myBox.isNumber(); //Output: true

//Create an instance of the Box class with a string as the parameter
const strBox = new Box<string>('Hello');

//Call the isNumber method on the string instance
const isStrNum = strBox.isNumber(); //Output: false because a string is not a number