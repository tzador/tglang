/**
 * Represents a person with a name and age.
 * The constructor takes in a name and age, and sets them as properties.
 * The class also has methods to get the name and age, as well as change them.
 */
class Person {
  /**
   * The name of the person
   */
  private name: string;
  /**
   * The age of the person
   */
  private age: number;

  /**
   * Constructor function that takes in the name and age and sets them as properties
   * @param name - The name of the person
   * @param age - The age of the person
   */
  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  /**
   * Method to get the person's name
   * @returns The person's name
   */
  getName(): string {
    return this.name;
  }

  /**
   * Method to get the person's age
   * @returns The person's age
   */
  getAge(): number {
    return this.age;
  }

  /**
   * Method to change the person's name
   * @param newName - The new name for the person
   */
  changeName(newName: string): void {
    this.name = newName;
  }

  /**
   * Method to change the person's age
   * @param newAge - The new age for the person
   */
  changeAge(newAge: number): void {
    this.age = newAge;
  }
}

// Example usage of the Person class
const person = new Person("John", 25);
console.log(`Current name: ${person.getName()}`); // Output: Current name: John
console.log(`Current age: ${person.getAge()}`); // Output: Current age: 25

person.changeName("Jane");
person.changeAge(30);

console.log(`New name: ${person.getName()}`); // Output: New name: Jane
console.log(`New age: ${person.getAge()}`); // Output: New age: 30