# This code snippet generates a random matrix of size m x n
# and performs a QR decomposition on it using the Householder algorithm
# Import necessary packages
using LinearAlgebra, Random

# Define function for Householder QR decomposition
function qr_householder(A)
    # Check if A is a square matrix
    if size(A, 1) != size(A, 2)
        error("A must be a square matrix")
    end

    # Initialize Q and R matrices
    m = size(A, 1)
    Q = Matrix(I, m, m)
    R = copy(A)

    # Perform Householder transformation on columns of R
    for i in 1:m
        v = R[i:m, i]
        v[1] += sign(v[1]) * norm(v)
        v = v / norm(v)
        R[i:m, i:end] -= 2 * v * (v' * R[i:m, i:end])
        Q[:, i:end] -= 2 * Q[:, i:m] * (v * v')
    end
    
    # Return Q and R matrices
    return Q, R
end

# Generate a random matrix of size m x n
m, n = 5, 4
A = rand(m, n)

# Perform QR decomposition on A
Q, R = qr_householder(A)

# Print Q and R
println("Q = $Q")
println("R = $R")