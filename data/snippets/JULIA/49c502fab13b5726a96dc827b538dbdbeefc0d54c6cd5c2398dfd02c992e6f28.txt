# Function to generate a random matrix of given dimensions
function generate_matrix(rows, cols)
    # Initialize empty matrix with specified dimensions
    matrix = Array{Int64}(undef, rows, cols)
    
    # Loop through each row and column, filling it with a random integer between 1 and 100
    for i in 1:rows
        for j in 1:cols
            matrix[i,j] = rand(1:100)
        end
    end
    
    # Return the generated matrix
    return matrix
end

# Function to calculate the determinant of a square matrix using recursion
function calculate_determinant(matrix)
    # Base case: if matrix is 1x1, determinant is the single element
    if size(matrix) == (1,1)
        return matrix[1,1]
    # Recursive case: calculate determinant using Laplace expansion
    else
        # Initialize determinant variable
        det = 0
        # Loop through each column in the first row of the matrix
        for j in 1:size(matrix,2)
            # Use submatrix function to get submatrix excluding the first row and jth column
            submatrix = matrix[2:size(matrix,1),1:j-1] + matrix[2:size(matrix,1),j+1:end]
            # Recursively call calculate_determinant on the submatrix and multiply by sign of the term
            det += (-1)^(1+j) * matrix[1,j] * calculate_determinant(submatrix)
        end
        # Return the final determinant
        return det
    end
end

# Generate a 3x3 random matrix
matrix = generate_matrix(3,3)

# Calculate the determinant of the generated matrix
det = calculate_determinant(matrix)

# Print the matrix and determinant
println("The generated matrix is: ")
println(matrix)
println("The determinant of the matrix is: ", det)