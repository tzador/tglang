# Import necessary libraries
using DataFrames
using JuMP
using GLPK

# Define problem variables
m = Model() # declares a new optimization model
@variable(m, x[1:5] >= 0 ) # decision variables with lower bound of 0
@variable(m, y[1:3], Bin ) # binary decision variables
@variable(m, z ) # continuous decision variable

# Set objective function
@objective(m, Max, 5x[1] + 4x[2] - 3x[3] + 2x[4] - x[5] + 10y[1] + 8y[2] + 6y[3] + 2z)

# Set constraints
@constraint(m, 5x[1] + 3x[2] + 4x[3] + x[4] + y[1] <= 10)
@constraint(m, 2x[1] + x[2] + 3x[5] + y[2] == 5)
@constraint(m, 4x[1] + x[3] + 2x[4] + 2y[3] + z <= 8)

# Solve the optimization problem
status = solve(m) # returns the solution status
println("Optimization status: ", status)
println("Objective value: ", getobjectivevalue(m)) # gets the optimal objective value
println("Decision variables: ")
for i in 1:5
    println("x[$i] = ", getvalue(x[i])) # gets the optimal value for decision variables
end
for i in 1:3
    println("y[$i] = ", getvalue(y[i])) # gets the optimal value for binary decision variables
end
println("z = ", getvalue(z)) # gets the optimal value for continuous decision variable