function quickSort(arr, left = 1, right = length(arr))
    if left >= right return end # base case
    pivot = arr[right] # choosing pivot element
    # partitioning the array into left and right subarrays
    i = left - 1 # index of smaller element
    for j = left:right-1
        if arr[j] <= pivot # checking if current element is smaller or equal to pivot
            i += 1 # increment index of smaller element
            arr[i], arr[j] = arr[j], arr[i] # swap elements
        end
    end
    arr[i+1], arr[right] = arr[right], arr[i+1] # placing pivot in correct position
    
    quickSort(arr, left, i) # recursively sorting left subarray
    quickSort(arr, i+2, right) # recursively sorting right subarray
end

# example usage:
arr = [9,5,2,7,1,3,8,4,6] # unsorted array
quickSort(arr) # calling quickSort function to sort the array
# output: [1,2,3,4,5,6,7,8,9] # sorted array