# Define a function that takes in an array and returns a sorted array using the QuickSort algorithm
# QuickSort is a popular sorting algorithm that uses a divide-and-conquer approach

# Define the function with parameters of the array and indices of the starting and ending elements
function quicksort(array, low, high)
    # Check if the array has more than one element
    if low < high
        # Get a pivot element by partitioning the array with the first element as the pivot
        pivot = partition(array, low, high)
        # Recursively call the function on the subarrays to the left and right of the pivot
        quicksort(array, low, pivot-1)
        quicksort(array, pivot+1, high)
    end
    # Return the sorted array
    return array
end

# Define the partition function with the array and indices of the starting and ending elements
function partition(array, low, high)
    # Initialize the pivot as the first element of the array
    pivot = array[low]
    # Initialize the left and right pointers
    left = low + 1
    right = high
    # Loop until the left pointer crosses the right pointer
    while left <= right
        # Find a position for the left pointer where the element is greater than the pivot
        while left <= right && array[left] <= pivot
            left += 1
        end
        # Find a position for the right pointer where the element is less than or equal to the pivot
        while left <= right && array[right] > pivot
            right -= 1
        end
        # Swap the elements at the left and right pointer positions
        if left <= right
            array[left], array[right] = array[right], array[left]
        end
    end
    # Place the pivot at the correct position between the left and right pointers
    array[low], array[right] = array[right], array[low]
    # Return the index of the pivot element
    return right
end

# Define an example array
array = [5, 2, 8, 1, 3, 9, 4, 7, 6]
# Call the quicksort function on the array with the starting and ending indices
sorted_array = quicksort(array, 1, length(array))

# Print the sorted array
println("Sorted array: ", sorted_array)