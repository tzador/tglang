#= This code snippet calculates the gradient of a function using automatic differentiation in Julia #=

#= Import the ForwardDiff package =#
using ForwardDiff 

function gradient(f,x)
    
    #= Create a vector of all the partial derivatives of the function f with respect to each input variable in vector x =#
    g = zeros(length(x))
    
    #= Loop through each input variable in x =#
    for i in 1:length(x)
        
        #= Use `ForwardDiff.jacobian()` function to calculate partial derivative of f with respect to variable at index i =#
        partial = ForwardDiff.jacobian(f, x)[i]
        
        #= Store the partial derivative in the appropriate index of g vector =#
        g[i] = partial
    end
    
    return g #= Output the gradient vector =#
end

# Example function to calculate the gradient of
f(x) = x[1]^2 + sin(x[2]^3)

# Input vector
x = [2, 3]

#= Call the `gradient()` function to calculate the gradient of f at x =#
g = gradient(f, x)

# Print out the result
println("The gradient of f at x = $x is $g")