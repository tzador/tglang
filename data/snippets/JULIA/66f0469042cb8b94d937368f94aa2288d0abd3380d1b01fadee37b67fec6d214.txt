# Multidimensional array creation and manipulation
arr = Array{Float64}(undef, 5, 4, 3)  # Creates a 5x4x3 multidimensional array of type Float64 with uninitialized values

# Assign values to elements using a for loop
for i in 1:5      # i corresponds to the first dimension
    for j in 1:4  # j corresponds to the second dimension
        for k in 1:3  # k corresponds to the third dimension
            arr[i,j,k] = i + j + k  # Assigns value to each element based on its position
        end
    end
end

# Selecting and modifying specific elements
arr[2,3,1] = 10  # Assigns value 10 to the element in the second row, third column, first layer
arr[:,2,2] = 5   # Assigns value 5 to all elements in the second column, second layer
arr[3,:,:] .= 2  # Assigns value 2 to all elements in the third row, all columns and all layers
arr[2:4,1:2,3] .= 0  # Assigns value 0 to elements in the second, third and fourth rows for the first and second columns in the third layer

# Using built-in functions to manipulate arrays
mean_arr = mean(arr, dims=2)  # Calculates the mean along the second dimension, resulting in a 5x1x3 array
max_arr = maximum(arr, dims=(1,3))  # Calculates the maximum value along the first and third dimension, resulting in a 1x4x1 array

# Reshaping arrays
reshape_arr = reshape(arr, 2, 10, 3)  # Reshapes the array into a 2x10x3 multidimensional array 
flatten_arr = flatten(arr)  # Flattens the array into a 1-dimensional array

# Transposing arrays
trans_arr = permutedims(arr, [3,2,1]) # Permutes the dimensions of the array, resulting in a 3x4x5 array

# Sorting arrays
sorted_arr = sort(arr, dims=2, rev=true) # Sorts the array along the second dimension in descending order, resulting in a 5x4x3 array

# Concatenating arrays
concat_arr = cat(arr, arr, dims=2) # Concatenates two arrays along the second dimension, resulting in a 5x8x3 array