function newton(x, tol=1e-6, maxiter=100)
    # This function implements the Newton's method for finding root of a given function
    # Input:
    # x: initial guess for the root
    # tol: tolerance for the error in the root
    # maxiter: maximum number of iterations allowed

    # Define the function to find root of
    f(x) = x^3 + 2*x^2 - 3*x + 1

    # Define the derivative of the function
    df(x) = 3*x^2 + 4*x - 3

    # Initialize variables
    root_prev = x
    root_next = x
    error = tol + 1
    iter = 0

    # Loop until the error is within the tolerance or maximum number of iterations is reached
    while error > tol && iter < maxiter
        # Update the root using Newton's method
        root_next = root_prev - (f(root_prev) / df(root_prev))

        # Calculate the error
        error = abs(root_next - root_prev)

        # Update the previous root
        root_prev = root_next

        # Increment the iteration counter
        iter += 1
    end

    # Check if the maximum number of iterations was reached
    if iter == maxiter
        println("Maximum number of iterations reached!")
    end

    # Output the root and the number of iterations taken
    println("Root: ", root_next)
    println("Number of iterations: ", iter)
end

# Call the function with initial guess as 2
newton(2)