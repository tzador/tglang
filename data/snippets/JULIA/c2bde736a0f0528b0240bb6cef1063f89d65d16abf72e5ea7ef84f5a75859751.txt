# Define a function to calculate the prime factorization of a given number
function prime_factorize(n::Int)
    # Initialize empty array to store prime factors
    factors = []
    # Initialize divisor variable to 2
    divisor = 2
    # Loop through all numbers from 2 to square root of n
    while divisor <= sqrt(n)
        # Check if n is divisible by divisor
        if n % divisor == 0
            # Append divisor to factors array
            push!(factors, divisor)
            # Update n to be n divided by divisor, continue dividing until n is no longer divisible by divisor
            n /= divisor
        else
            # If n is not divisible by divisor, increment divisor by 1
            divisor += 1
        end
    end
    # If n is not equal to 1, it is also a prime factor, so append it to factors array
    if n != 1
        push!(factors, n)
    end
    # Return array of prime factors
    return factors
end

# Call function with input of 36
prime_factorize(36)

# Output: [2, 2, 3, 3]

# Explanation: The prime factors of 36 are 2, 2, 3, and 3. The function correctly calculates and returns these factors in an array.