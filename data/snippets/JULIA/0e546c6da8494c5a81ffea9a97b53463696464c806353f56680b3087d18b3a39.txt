# Function for calculating the nth Fibonacci number using a recursive approach with memoization

# First we create an empty dictionary to store previously calculated Fibonacci numbers
fib_dict = Dict{Int, Int}()

# Define the recursive function
function fib(n::Int)
    # Base case: return 1 if n is 1 or 2
    if n == 1 || n == 2
        return 1
    end
    # Check if the Fibonacci number has already been calculated and stored in the dictionary
    if haskey(fib_dict, n)
        return fib_dict[n]
    end
    # If not, calculate the Fibonacci number and store it in the dictionary
    fib_dict[n] = fib(n-1) + fib(n-2)
    return fib_dict[n]
end

# Get user input for the nth Fibonacci number to calculate
println("Enter the value of n: ")
n = parse(Int, readline())

# Call the fib function and print the result
println("The ", n, "th Fibonacci number is: ", fib(n))

# Example output: The 10th Fibonacci number is: 55