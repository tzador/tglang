"""
This function returns a sorted array using the merge sort algorithm.
Args:
    array (Array): The array to be sorted.
Returns:
    Array: The sorted array.
"""
function mergeSort(array)
    # Base case, if array is already sorted, return it
    if length(array) <= 1
        return array
    end

    # Calculate the middle index of the array
    middle = Int(floor(length(array) / 2))

    # Divide the array into two halves
    left = mergeSort(array[1:middle])
    right = mergeSort(array[middle+1:end])

    # Merge the two sorted arrays
    result = Array(eltype(array), length(array))

    # Keep track of indices of the two sorted arrays
    indexLeft = 1
    indexRight = 1
    indexResult = 1

    # While there are elements left in both arrays, compare and merge them
    while (indexLeft <= length(left)) && (indexRight <= length(right))
        # If the element in the left array is smaller, add it to the result array
        if left[indexLeft] < right[indexRight]
            result[indexResult] = left[indexLeft]
            indexLeft += 1
        # If the element in the right array is smaller, add it to the result array
        else
            result[indexResult] = right[indexRight]
            indexRight += 1
        end
        # Move to the next index in the result array
        indexResult += 1
    end

    # Add the remaining elements from left array to the result array
    while indexLeft <= length(left)
        result[indexResult] = left[indexLeft]
        indexLeft += 1
        indexResult += 1
    end
    # Add the remaining elements from right array to the result array
    while indexRight <= length(right)
        result[indexResult] = right[indexRight]
        indexRight += 1
        indexResult += 1
    end
    # Return the sorted array
    return result
end

# Example usage
array = [5, 3, 7, 2, 8, 1, 9]
sorted_array = mergeSort(array)

# Output: [1, 2, 3, 5, 7, 8, 9]