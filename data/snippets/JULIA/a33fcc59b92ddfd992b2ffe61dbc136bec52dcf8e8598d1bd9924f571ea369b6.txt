# Import Libraries #
using DataFrames
using PyPlot

# Define functions #

## Function: quadratic equation ##
"""
    quadratic(a, b, c)

Implements the quadratic formula to solve for x in the equation ax^2 + bx + c = 0.
Returns the two solutions as a tuple.
"""
function quadratic(a, b, c)

    # Calculate discriminant #
    Δ = b^2 - 4*a*c

    # Check for complex solutions #
    if Δ < 0
        println("Error: Complex solutions not supported")
        return (NaN, NaN)
    end

    # Calculate solutions #
    x1 = (-b + sqrt(Δ)) / (2*a)
    x2 = (-b - sqrt(Δ)) / (2*a)

    # Return solutions #
    return (x1, x2)
end

## Function: plot solution points ##
"""
    plot_solution_points(a, b, c)

Plots the solutions of the quadratic equation ax^2 + bx + c = 0 as points on a graph.
If complex solutions are present, they will not be plotted.
"""
function plot_solution_points(a, b, c)
    # Solve for x1 and x2 #
    x1, x2 = quadratic(a, b, c)

    # Plot points #
    scatter(x1, 0, label="Solution 1")
    scatter(x2, 0, label="Solution 2")

    # Add labels and legend #
    xlabel("x")
    legend()

    # Set limits and show plot #
    xlim(-10, 10)
    show()
end

# Main Code #

# User input for coefficients #
println("Enter the coefficients of the quadratic equation ax^2 + bx + c = 0")
a = parse(Float64, readline())
b = parse(Float64, readline())
c = parse(Float64, readline())

# Calculate and display solutions #
println("Solutions:")
x1, x2 = quadratic(a, b, c)
println("x1 = ", x1)
println("x2 = ", x2)

# Plot solution points #
println("Plotting solutions:")
plot_solution_points(a, b, c)