# Import necessary packages
using Statistics
using Plots
using DataFrames

# Define a function to calculate the Euclidean distance between two points
function euclidean_distance(p1::Array, p2::Array)
    # Initialize the distance variable
    dist = 0.0 

    # Loop through each dimension and calculate the sum of squared differences
    for i in 1:length(p1)
        dist += (p1[i] - p2[i])^2
    end

    # Take the square root of the sum of squared differences
    dist = sqrt(dist)

    # Return the distance
    return dist
end

# Define a function to calculate the k-nearest neighbors
# Takes in a data frame, a query point, and the value of k
function knn(data::DataFrame, query_point::Array, k::Int)
    # Initialize an empty dictionary to store distances and corresponding labels
    distances = Dict()

    # Loop through each row in the data frame
    for row in eachrow(data)
        # Calculate the euclidean distance between the query point and the current row
        dist = euclidean_distance(query_point, convert(Array, row))

        # Add the distance and label to the dictionary
        distances[dist] = row[:label]
    end

    # Sort the distances in ascending order
    sorted_distances = sort(collect(distances))

    # Get the first k values from the sorted distances
    top_k = sorted_distances[1:k]

    # Initialize an empty list to store the labels of the top k nearest neighbors
    labels = []

    # Loop through the top k distances and append the corresponding label to the list
    for dist in top_k
        push!(labels, distances[dist])
    end

    # Return the most frequent label from the list
    return mode(labels)
end

# Example usage
# Create a random matrix of points with labels
points = rand(10, 2)
labels = ["a", "b", "c", "d", "a", "b", "c", "d", "a", "b"]
data = DataFrame(Points = points, Label = labels)

# Query point
x = [0.5, 0.5]

# Calculate the label of the query point using k-nearest neighbors with k = 3
label = knn(data, x, 3)