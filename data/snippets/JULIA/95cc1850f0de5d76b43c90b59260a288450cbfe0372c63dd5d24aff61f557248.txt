# This is a function that calculates the factorial of a given number
# It uses a recursive approach
function factorial(n::Int64)
    if n == 0
        return 1
    elseif n < 0
        error("Factorial cannot be calculated for negative numbers.")
    else
        return n * factorial(n-1)
    end
end

# This is a function that calculates the nth Fibonacci number
# It uses a dynamic programming approach for efficiency
function fibonacci(n::Int64)
    F = zeros(Int64, n+1)
    F[1] = 0
    F[2] = 1
    for i in 3:n+1
        F[i] = F[i-1] + F[i-2]
    end
    return F[n+1]
end

# This is a function that calculates the nth prime number
# It implements the Sieve of Eratosthenes algorithm
function prime(n::Int64)
    primes = [2]
    curr = 3
    while length(primes) < n
        isprime = true
        for p in primes
            if curr % p == 0
                isprime = false
                break
            end
        end
        if isprime
            push!(primes, curr)
        end
        curr += 1
    end
    return primes[n]
end

# This is a function that generates the Pascal's Triangle of a given size
# It uses a recursive approach to generate the triangle rows
function pascal(n::Int64)
    triangle = [1]
    for i in 1:n-1
        row = [1]
        for j in 2:length(triangle)
            push!(row, triangle[j-1] + triangle[j])
        end
        push!(row, 1)
        triangle = row
    end
    return triangle
end

# This is a function that calculates the determinant of a given matrix
# It uses a recursive approach to calculate the determinant using the Laplace expansion
function determinant(A::Array{Float64, 2})
    n = size(A, 1)
    if n == 2
        return A[1,1]*A[2,2] - A[1,2]*A[2,1]
    else
        det = 0
        for i in 1:n
            minor = A[2:n, [j for j in 1:n if j != i]]
            det += (-1)^(2+i) * A[1,i] * determinant(minor)
        end
        return det
    end
end

# Main function to call and test the above functions
function main()
    n = 10
    println("Factorial of $n is ", factorial(n))
    println("5th Fibonacci number is ", fibonacci(5))
    println("10th prime number is ", prime(10))
    println("Pascal's Triangle of size $n is ", pascal(n))
    A = [1.0 2.0 3.0; 4.0 5.0 6.0; 7.0 8.0 9.0]
    println("Determinant of A is ", determinant(A))
end

main()