# This code uses a generator to generate a list of numbers
# and then uses recursion to calculate the sum of those numbers.

# Define the function fibgen that takes in a positive integer n
function fibgen(n)
    # Initialize the generator to generate the first two numbers
    # in the Fibonacci sequence
    fs = Base.Fibonacci();

    # Define a recursive helper function that takes in a generator,
    # a counter, and the current sum
    function _fibgen(fs::Generator, counter::Integer, sum::Integer)
        # Base case when we have reached n numbers in the sequence
        if counter == n
            return sum
        # Recursive case where we generate the next number in the sequence
        else
            # Use the generator to generate the next number
            next_num = produce(fs)
            # Update the sum by adding the new number
            new_sum = sum + next_num
            # Call the helper function again with the updated generator,
            # counter, and sum
            _fibgen(fs, counter+1, new_sum)
        end
    end

    # Call the recursive helper function with the initialized generator,
    # the starting counter, and the initial sum of 0
    _fibgen(fs, 1, 0)
end

# Call the function fibgen and pass in the parameter 10
# This will generate the first 10 numbers in the Fibonacci sequence
# and then recursively calculate the sum of those numbers
fibgen(10)