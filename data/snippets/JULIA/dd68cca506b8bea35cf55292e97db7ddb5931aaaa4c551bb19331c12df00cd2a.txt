# This code snippet generates a random directed graph using the GraphRecipes.jl package
# and then performs a breadth-first search on the graph

using GraphRecipes # import the GraphRecipes.jl package

# generate random directed graph with 10 vertices and 20 edges
graph = rand_graph(10, 20, is_directed=true)
# add edge annotations to the graph with random letters
set_edge_label!(graph, [c for c in 'A':'Z'])

# define a function for breadth-first search
function bfs(graph, start)
    visited = Set{Int64}() # keep track of visited vertices
    queue = [start] # queue to store vertices to visit

    # loop until the queue is empty
    while !isempty(queue)
        current = dequeue!(queue) # dequeue a vertex
        if current âˆ‰ visited # if the vertex has not been visited
            println(current) # print the current vertex
            push!(visited, current) # mark vertex as visited
            neighbors = neighbors(graph, current) # get neighboring vertices
            enqueue!(queue, neighbors) # enqueue neighboring vertices
        end
    end
end

# run bfs on the graph starting from vertex 1
bfs(graph, 1)