# Define a function that uses recursion to calculate the nth Fibonacci number
function Fibonacci(n)
    if n == 1
        return 0
    elseif n == 2
        return 1
    else
        return Fibonacci(n-2) + Fibonacci(n-1) # Recursive call to calculate the sum of the previous two Fibonacci numbers
    end
end

# Use a for loop to iterate through the first 10 Fibonacci numbers and print the results
for i in 1:10
    println("The ${i}th Fibonacci number is ${Fibonacci(i)}")
end

# Define a dictionary to store key-value pairs of countries and their currencies
countries = Dict("United States" => "USD", "China" => "CNY", "United Kingdom" => "GBP", "Japan" => "JPY", "Germany" => "EUR", "France" => "EUR", "Canada" => "CAD", "Brazil" => "BRL", "India" => "INR", "Australia" => "AUD")

# Use a for loop to iterate through the dictionary and print out the currency for each country
for (country, currency) in countries
    println("The currency of ${country} is ${currency}")
end

# Define a matrix with random values and calculate its determinant using built-in functions
A = [3 2 7; 1 5 2; 6 9 8]
println("The determinant of A is $(det(A))")

# Use list comprehension to create a list of squares from 1 to 10
squares = [i^2 for i in 1:10]

# Reverse the list using a for loop and print the result
for i in 1:length(squares)
    println(squares[length(squares)-i+1])
end

# Define a struct to represent a student with properties for name, age, and GPA
struct Student
    name::String
    age::Int
    gpa::Float64
end

# Create an array of 5 students with different names, ages, and GPAs
students = [Student("John", 18, 3.5), Student("Sarah", 20, 4.0), Student("Mike", 19, 3.2), Student("Emily", 21, 3.8), Student("Jake", 22, 2.9)]

# Use list comprehension to create a new array with only the names of students who have a GPA above 3.5
high_gpa_students = [student.name for student in students if student.gpa > 3.5]