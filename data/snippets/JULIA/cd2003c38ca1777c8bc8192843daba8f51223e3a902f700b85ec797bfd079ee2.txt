# Define a function named 'reverse_squares' with two parameters, a vector 'vec' and an integer 'n'
function reverse_squares(vec, n)
    # Create an empty vector to store the reversed squares
    reversed = Vector{Int64}()
    # Loop through each element in 'vec'
    for i in vec
        # Check if the element is a perfect square
        if sqrt(i)^2 == i
            # Calculate the reverse of the element
            reverse = Int64(reversestring(string(i)))
            # Add the reversed element to the 'reversed' vector
            push!(reversed, reverse)
        else
            # Add the element to the 'reversed' vector without reversing it
            push!(reversed, i)
        end
    end
    
    # Sort the 'reversed' vector in descending order
    sort!(reversed, rev=true)
    
    # Print the first 'n' elements of the sorted 'reversed' vector
    println(reversed[1:n])
end

# Call the 'reverse_squares' function with the vector [1, 4, 9, 16, 25, 36] and the integer 3 as arguments
reverse_squares([1, 4, 9, 16, 25, 36], 3)