mutable struct Node{T}  #define a mutable struct with parameter T
    value::T            #create a field value of type T
    next::Union{Node{T},Nothing}   #create a field next of type Node{T} or Nothing
    previous::Union{Node{T},Nothing}   #create a field previous of type Node{T} or Nothing
end

function insert!(node::Node{T}, value::T) where T  #define a function insert! that takes in a Node{T} and value of type T
    new_node = Node(value)  #create a new Node with given value
    if node.next === Nothing   #if the next field of the given node is of type Nothing
        node.next = new_node   #set the next field of the given node to the newly created node
        new_node.previous = node    #set the previous field of the new node to the given node
    else   #if the next field is not of type Nothing
        temp = node.next   #create a temporary variable to store the current next node
        node.next = new_node   #set the next field of the given node to the newly created node
        new_node.next = temp   #set the next field of the new node to the stored next node
        new_node.previous = node   #set the previous field of the new node to the given node
        temp.previous = new_node   #set the previous field of the stored next node to the new node
    end
    node   #return the given node
end

function delete!(node::Node{T}) where T   #define a function delete! that takes in a Node{T}
    if node.previous === Nothing   #if the previous field of the given node is of type Nothing
        if node.next === Nothing   #and if the next field of the given node is also of type Nothing
            return nothing   #return nothing (since the given node is the only one in the list)
        else   #if the next field is not of type Nothing
            node.next.previous = Nothing   #set the previous field of the next node to Nothing
        end
    else   #if the previous field is not of type Nothing
        if node.next === Nothing   #and if the next field is of type Nothing
            node.previous.next = Nothing   #set the next field of the previous node to Nothing
        else   #if both next and previous fields are not of type Nothing
            node.previous.next = node.next   #set the next field of the previous node to the next node
            node.next.previous = node.previous   #set the previous field of the next node to the previous node
        end
    end
    node   #return the given node
end