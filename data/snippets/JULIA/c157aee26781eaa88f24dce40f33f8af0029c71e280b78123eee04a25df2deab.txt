function knapsack(items, total_weight)
    n_items = length(items)
    weights = [item.weight for item in items]
    values = [item.value for item in items]
    bags = zeros(n_items+1, total_weight+1)

    for i in 1:n_items
        for j in 1:total_weight
            if weights[i] <= j
                bags[i+1, j+1] = max(values[i] + bags[i, j-weights[i]+1], bags[i, j+1])
            else
                bags[i+1, j+1] = bags[i, j+1]
            end
        end
    end

    selected_items = []
    weight = total_weight

    for i in n_items:-1:1
        if bags[i+1, weight+1] != bags[i, weight+1]
            push!(selected_items, items[i])
            weight -= weights[i]
        end
    end

    return bags[n_items+1, total_weight+1], selected_items
end

struct Item
    weight::Int64
    value::Int64
end

items = [Item(1, 5), Item(2, 3), Item(4, 10), Item(3, 8)]
total_weight = 8
max_value, selected_items = knapsack(items, total_weight)

println("Maximum value: ", max_value)
println("Selected items: ", selected_items)