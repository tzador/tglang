# Define a function
function approximate_derivative(f, x)
    h = 1e-8 # Define a small value for h
    return (f(x + h) - f(x)) / h # Using the limit definition of derivative to approximate the derivative at x
end

# Define a polynomial function
f(x) = 3x^4 - 2x^3 + 5x^2 - 3x + 7

# Calculate the derivative at x = 2
d = approximate_derivative(f, 2)

# Print the result
println("The derivative at x = 2 is : ", d)

# Define a recursive function to calculate the factorial of a number
function factorial(n)
    if n == 0 # Base case
        return 1
    else
        return n * factorial(n-1) # Recursive case
    end
end

# Calculate the factorial of 6
fact = factorial(6)

# Print the result
println("The factorial of 6 is : ", fact)

# Define a custom type
mutable struct Point
    x::Float64 # Define x coordinate
    y::Float64 # Define y coordinate
end 

# Create an instance of the custom type 
p = Point(3.5, 2.0)

# Add a method to the custom type for calculating the distance between two points
function distance(p1::Point, p2::Point)
    return âˆš((p1.x - p2.x)^2 + (p1.y - p2.y)^2) # Using Pythagorean theorem to calculate distance
end

# Calculate the distance between p and the origin (0,0)
dist = distance(p, Point(0.0, 0.0))

# Print the result
println("The distance between p and the origin is : ", dist)