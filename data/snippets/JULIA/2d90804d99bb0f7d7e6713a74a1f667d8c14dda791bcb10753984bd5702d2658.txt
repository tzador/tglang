# Define a matrix of size 3x3
A = [1 2 3
    4 5 6
    7 8 9]

# Define a vector of size 3
x = [1, 2, 3]

# Multiply the matrix A and vector x
b = A * x

# Check if the matrix A is symmetric
isSymmetric(A) = isequal(A, transpose(A))

# Create a function to calculate the factorial of a number
function factorial(n)
    if n <= 1
        return 1
    else
        return n * factorial(n-1)
    end
end

# Call the factorial function with input 5
factorial(5)

# Define a while loop with a condition
i = 1
while i <= 10
    println(i) # Print the current value of i
    i += 1 # Increment i by 1
end

# Define a dictionary with key-value pairs
myDict = Dict("key1" => 1, "key2" => 2, "key3" => 3)

# Use a for loop with the dictionary
for (key, value) in myDict
    println("The value of $(key) is $(value)")
end

# Define a tuple with three elements
myTuple = (1, "hello", true)

# Access the second element of the tuple
myTuple[2] # Output: "hello"

# Define a struct with multiple fields
struct Person
    name
    age
    profession
end

# Create an instance of Person struct
person1 = Person("John", 30, "Teacher")

# Call the fields of the struct
person1.name # Output: "John"
person1.age # Output: 30
person1.profession # Output: "Teacher"

# Define a function with optional arguments
function greet(name, age=0)
    if age == 0
        println("Hello $(name)!")
    else
        println("Hello $(name), you are $(age) years old!")
    end
end

# Call the greet function with different arguments
greet("Anna") # Output: Hello Anna!
greet("Bob", 25) # Output: Hello Bob, you are 25 years old!

# Use multiple dispatch to create different methods for a function
# Define a function to check if a number is odd
function isOdd(x::Int)
    if x%2 == 1
        return true
    else
        return false
    end
end

# Define a method for Float data type
function isOdd(x::Float64)
    return isOdd(convert(Int, x)) # Call the isOdd method for Int data type
end

# Call the isOdd function with different data types
isOdd(5) # Output: true
isOdd(2.5) # Output: false