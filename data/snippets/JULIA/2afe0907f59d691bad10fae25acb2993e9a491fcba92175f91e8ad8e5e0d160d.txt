# Define a custom function that calculates the collatz sequence
function collatz(n)
    # Initialize an empty array to store the sequence
    sequence = Int[]

    # Loop until n reaches 1
    while n > 1
        # If n is even, divide it by 2 and add it to the sequence
        if n % 2 == 0
            n = n / 2
            push!(sequence, n)
        # If n is odd, multiply it by 3 and add 1, then add it to the sequence
        else
            n = 3 * n + 1
            push!(sequence, n)
        end
    end

    # Return the resulting sequence
    return sequence
end

# Define a variable n and assign it a random integer value
n = rand(1:100)

# Print the initial value of n
println("Starting value: ", n)

# Call the collatz function with n as the input and store the result in a variable sequence
sequence = collatz(n)

# Print the resulting collatz sequence
println("Collatz sequence: ", sequence)

# Define a variable max_val to keep track of the highest value in the sequence
max_val = 0

# Loop through each element in the sequence and update max_val if the current value is higher than max_val
for num in sequence
    if num > max_val
        max_val = num
    end
end

# Print the highest value in the sequence
println("Max value in sequence: ", max_val)

# Define a custom struct to store information about the collatz sequence
struct CollatzInfo
    starting_val
    sequence
    max_val
end

# Create an instance of the CollatzInfo struct with the starting value, sequence, and max value
info = CollatzInfo(n, sequence, max_val)

# Print out the information using the show function
show(info)