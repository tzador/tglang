struct BinaryTree{T}
    value::T
    left::Union{BinaryTree{T}, Nothing}
    right::Union{BinaryTree{T}, Nothing}
end

# This function inserts a new element into a binary tree, maintaining the binary tree property
# It takes in a tree and a value to be inserted
# Output is the updated binary tree
function insert!(tree::BinaryTree{T}, val::T) where T
    if val < tree.value
        tree.left == nothing ? tree.left = BinaryTree{T}(val, nothing, nothing) : insert!(tree.left, val)
    elseif val > tree.value
        tree.right == nothing ? tree.right = BinaryTree{T}(val, nothing, nothing) : insert!(tree.right, val)
    else
        # Item already in tree, do nothing
    end
    return tree
end

# This function searches for a value in a binary tree and returns a boolean indicating whether the value was found
# It takes in a tree and the value to be searched for
# Output is a boolean indicating whether the value was found
function search(tree::BinaryTree{T}, val::T) where T
    if tree.value == val
        return true
    elseif val < tree.value
        return tree.left == nothing ? false : search(tree.left, val)
    else
        return tree.right == nothing ? false : search(tree.right, val)
    end
end

# This function deletes a node with the specified value from a binary tree
# It takes in a tree and the value to be deleted
# Output is the updated binary tree
function delete!(tree::BinaryTree{T}, val::T) where T
    if val < tree.value
        if tree.left == nothing
            # Value not found in tree
            return tree
        elseif tree.left.value == val
            if tree.left.left == nothing && tree.left.right == nothing
                tree.left = nothing
            elseif tree.left.left == nothing
                tree.left = tree.left.right
            elseif tree.left.right == nothing
                tree.left = tree.left.left
            else
                # Both child nodes present
                # Find the minimum value in the right subtree and replace it with the value to be deleted
                # Then delete the node containing the minimum value recursively
                min_node = tree.left.right
                while min_node.left != nothing
                    min_node = min_node.left
                end
                tree.left.value = min_node.value
                delete!(tree.left.right, min_node.value)
            end
        else
            delete!(tree.left, val)
        end
    elseif val > tree.value
        if tree.right == nothing
            # Value not found in tree
            return tree
        elseif tree.right.value == val
            if tree.right.left == nothing && tree.right.right == nothing
                tree.right = nothing
            elseif tree.right.left == nothing
                tree.right = tree.right.right
            elseif tree.right.right == nothing
                tree.right = tree.right.left
            else
                # Both child nodes present
                # Find the minimum value in the right subtree and replace it with the value to be deleted
                # Then delete the node containing the minimum value recursively
                min_node = tree.right.right
                while min_node.left != nothing
                    min_node = min_node.left
                end
                tree.right.value = min_node.value
                delete!(tree.right.right, min_node.value)
            end
        else
            delete!(tree.right, val)
        end
    else
        # Value found at root node
        if tree.left == nothing && tree.right == nothing
            # Tree is now empty
            tree.value = nothing
        elseif tree.left == nothing
            tree.value = tree.right.value
            tree.left = tree.right.left
            tree.right = tree.right.right
        elseif tree.right == nothing
            tree.value = tree.left.value
            tree.right = tree.left.right
            tree.left = tree.left.left
        else
            # Both child nodes present
            # Find the minimum value in the right subtree and replace it with the value to be deleted
            # Then delete the node containing the minimum value recursively
            min_node = tree.right
            while min_node.left != nothing
                min_node = min_node.left
            end
            tree.value = min_node.value
            delete!(tree.right, min_node.value)
        end
    end
    return tree
end