module MyModule
    # This is a comment in Julia
    using MyPackage # importing a package
    
    # define a function that takes in two arguments
    function myfunction(arg1, arg2)
        # generate an array of random numbers 
        random_array = rand(arg1, arg2)
        
        # loop through the array and print each element
        for num in random_array
            println(num)
        end
        
        # define a nested function that calculates the mean of the array
        function calculate_mean(array)
            sum = 0
            for num in array
                sum += num
            end
            return sum/length(array)
        end
        
        # call the nested function to calculate mean
        mean = calculate_mean(random_array)
        
        # return the mean and the original array
        return mean, random_array
    end
    
    # call the function with arguments
    mean, array = myfunction(5, 10)
    
    # print the mean and the array
    println("Mean: ", mean)
    println("Array: ", array)
    
    # define a struct to represent a person
    struct Person
        name
        age
    end
    
    # create an instance of the Person struct
    person = Person("John", 25)
    
    # print the name and age of the person
    println("Name: ", person.name)
    println("Age: ", person.age)
    
    # define an abstract type
    abstract type Shape end
    
    # define a type for a circle shape
    struct Circle <: Shape
        radius
    end
    
    # define a method to calculate the area of a circle
    function calculate_area(shape::Circle)
        return Ï€ * shape.radius^2
    end
    
    # create an instance of a circle shape
    circle = Circle(5)
    
    # call the calculate_area method and print the area of the circle
    println("Area of circle: ", calculate_area(circle))

end # end of module