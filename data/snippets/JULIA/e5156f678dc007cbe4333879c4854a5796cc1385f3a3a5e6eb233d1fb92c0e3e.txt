# Define a function called `quicksort` which takes in an array `arr` as an argument
function quicksort(arr)

    # Base case: if the length of `arr` is 1 or less, return the array as is
    if length(arr) <= 1
        return arr
    end

    # Choose a pivot (in this case, the last element of the array)
    pivot = arr[end]

    # Create an empty array for the left and right partitions
    left = []
    right = []

    # Loop through the array, comparing each element to the pivot
    for i in arr
        if i < pivot
            # If the element is less than the pivot, add it to the `left` array
            push!(left, i)
        elseif i > pivot
            # If the element is greater than the pivot, add it to the `right` array
            push!(right, i)
        end
    end

    # Recursively call `quicksort` on the left and right partitions
    # Concatenate the sorted `left` array with the pivot and the sorted `right` array
    # This will give us a sorted array
    return quicksort(left) * [pivot] * quicksort(right)

end

# Call the `quicksort` function on an array of integers
quicksort([9, -2, 5, 0, 3, -7])  # Output: [-7, -2, 0, 3, 5, 9]

# Call the `quicksort` function on an array of strings
quicksort(["apple", "banana", "orange", "grape"])  # Output: ["apple", "banana", "grape", "orange"]