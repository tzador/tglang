function fibonacci(n)
    if n == 0
        return 0
    elseif n == 1
        return 1
    else
        return fibonacci(n-1) + fibonacci(n-2) # recursively calculates fibonacci sequence
    end
end

function factorial(n)
    if n == 0
        return 1
    else
        return n * factorial(n - 1) # recursively calculates factorial
    end
end

# creates a dictionary of prime numbers up to a specified limit
function primes(limit)
    primes = Dict{Int, Int}() # initializes an empty dictionary

    num = 2 # starting number for checking prime
    while length(primes) < limit
        if isprime(num) # checks if number is prime
            primes[num] = num # adds prime number to dictionary with key and value both being the number
        end
        num += 1
    end

    return primes # returns dictionary of primes
end

fib_seq = [fibonacci(x) for x in 0:10] # creates a list of the first 10 fibonacci numbers
factorials = [factorial(x) for x in 0:10] # creates a list of factorials of numbers 0 to 10
prime_dict = primes(10) # creates a dictionary of the first ten prime numbers

println("Fibonacci sequence: ", fib_seq) # prints the fibonacci sequence list
println("Factorials: ", factorials) # prints the factorial list
println("Primes dictionary: ", prime_dict) # prints the prime numbers dictionary