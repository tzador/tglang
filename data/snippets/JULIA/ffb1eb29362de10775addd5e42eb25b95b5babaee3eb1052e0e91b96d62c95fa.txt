# Initialize an array of size 10
array = Array{Any}(undef,10)

# Define a function to sort an array using bubble sort algorithm
function bubble_sort(arr::Array{T,N}) where {T,N}
    # Number of elements in the array
    n = length(arr)
    
    # Loop through the array
    for i in range(n-1, stop=1, step=-1)
        # Keep track of swaps made
        swapped = false
        for j in range(1, stop=i)
            # Check if current element is greater than next element
            if arr[j] > arr[j+1]
                # Swap elements
                arr[j], arr[j+1] = arr[j+1], arr[j]
                # Set swapped flag to true
                swapped = true
            end
        end
        # If no swaps were made, break out of loop since array is already sorted
        if !swapped
            break
        end
    end
    
    # Return sorted array
    return arr
end

# Generate a random array of integers between 1 and 100
for i in 1:length(array)
    array[i] = rand(1:100)
end

# Print unsorted array
println("Unsorted Array: ", array)

# Sort array using bubble sort function
sorted_array = bubble_sort(array)

# Print sorted array
println("Sorted Array: ", sorted_array)