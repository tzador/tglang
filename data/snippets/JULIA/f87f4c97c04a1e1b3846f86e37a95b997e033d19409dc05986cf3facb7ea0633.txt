using Distributions

# Define custom type for representing a person
struct Person
  name::String
  age::Int
  gender::Char
end

# Create an array of Person objects
people = [Person("John", 35, 'M'), Person("Jane", 29, 'F'), Person("Bob", 42, 'M'), Person("Alice", 25, 'F')]

# Calculate the mean age of all the people in the array
mean_age = mean([person.age for person in people])

# Create a normal distribution with mean age and standard deviation of 5
age_distribution = Normal(mean_age, 5)

# Sample 1000 random ages from the distribution
sampled_ages = rand(age_distribution, 1000)

# Find the number of males in the array of people
num_males = length(filter(p->p.gender=='M', people))

# Print the mean and standard deviation of the sampled ages
println("Mean age: ", mean(sampled_ages))
println("Standard deviation: ", std(sampled_ages))