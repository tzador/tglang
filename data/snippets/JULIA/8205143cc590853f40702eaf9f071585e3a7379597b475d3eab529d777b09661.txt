function mergeSort(arr)
    if length(arr) == 1
        return arr
    end

    middleIdx = div(length(arr), 2)
    
	# recursively split and merge left and right subarrays
    return merge(mergeSort(arr[1:middleIdx]), mergeSort(arr[middleIdx+1:end]))
end

function merge(arr1, arr2)
    sortedArr = []
    i = 1
    j = 1
    # while both arrays have elements left
    while i <= length(arr1) && j <= length(arr2)  
        if arr1[i] < arr2[j]
            push!(sortedArr, arr1[i])  # append element from arr1
            i += 1
        else
            push!(sortedArr, arr2[j])  # append element from arr2
            j += 1
        end
    end
    
    # append remaining elements of longer array
    # (only one of these while loops will run)
    while i <= length(arr1)
        push!(sortedArr, arr1[i])
        i += 1
    end
    
    while j <= length(arr2)
        push!(sortedArr, arr2[j])
        j += 1
    end

    return sortedArr
end

# example
arr = [5, 3, 8, 1, 9, 2, 7, 4, 6]
sorted = mergeSort(arr) # [1, 2, 3, 4, 5, 6, 7, 8, 9]