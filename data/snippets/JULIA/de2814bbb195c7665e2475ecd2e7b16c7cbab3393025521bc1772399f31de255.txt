# Define a struct named "Student" with string field for name, integer field for age, and float field for GPA
struct Student
    name::String
    age::Int
    gpa::Float64
end

# Create an empty array of type Student
students = []

# Create a for loop to add 10 randomly generated student objects to the array
for i in 1:10
    # Generate a random name, age, and GPA
    name = rand(["Alice", "Bob", "Carol", "David", "Emma"])
    age = rand(18:24)
    gpa = round(rand(2.5:4.0), digits=2)
    
    # Create a new Student object using the generated values
    student = Student(name, age, gpa)
    
    # Add the student to the array
    push!(students, student)
end

# Define a function to sort the array of students by GPA in descending order
function sort_students_by_gpa(students)
    # Loop through the array of students
    for i in 1:length(students)
        # Loop through the remaining students
        for j in i+1:length(students)
            # If the GPA of the current student is lower than the next student, swap their positions
            if students[i].gpa < students[j].gpa
                students[i], students[j] = students[j], students[i]
            end
        end
    end 
    
    # Return the sorted array of students
    return students
end

# Call the sort_students_by_gpa function on the array of students and save the sorted array in a new variable
sorted_students = sort_students_by_gpa(students)

# Print the top 3 students with the highest GPA in the sorted array
for i in 1:3
    println("Name: ", sorted_students[i].name, ", Age: ", sorted_students[i].age, ", GPA: ", sorted_students[i].gpa)
end