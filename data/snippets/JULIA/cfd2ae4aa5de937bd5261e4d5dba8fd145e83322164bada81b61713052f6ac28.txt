function newton(f::Function, x0::AbstractFloat, ϵ::AbstractFloat, n::Int64)
    # This function implements the Newton's method for finding roots of a given function,
    # starting with an initial guess x0, with a convergence criterion of ϵ and a maximum of n iterations.
    # `f` - the function for which roots are to be found
    # `x0` - initial guess for the root
    # `ϵ` - convergence criterion
    # `n` - maximum number of iterations
    
    x = x0
    x_prev = x - 2*ϵ # ensuring that loop runs at least once
    iterations = 1
    
    while (abs(x - x_prev) > ϵ) && (iterations < n)
        x_prev = x
        x = x - (f(x)/f'(x))
        iterations += 1
    end
    
    return x, iterations
end

# Example usage
# finding the root of x^2 - 2 starting with x0 = 2
result, iters = newton(x -> x^2 - 2, 2, 0.001, 100)
println("Root found after $iters iterations: $result")