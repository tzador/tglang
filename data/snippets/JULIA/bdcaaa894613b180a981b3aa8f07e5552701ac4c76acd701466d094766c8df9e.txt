# Define a function that calculates the factorial of a given integer

function factorial(n::Int)
  result = 1
  
  for i in 2:n
    result *= i
  end
  
  return result
end

# This is a recursive function to calculate the nth Fibonacci number

function fibonacci(n::Int)
    
    if n <= 1
        return n
    end
    
    return fibonacci(n-1) + fibonacci(n-2)
end

# Create a dictionary to store student grades

grades = Dict("John" => 85, "Emily" => 92, "Michael" => 78, "Sarah" => 95)

# Use list comprehension to create a list of only passing grades from the dictionary

passing_grades = [grade for (name, grade) in grades if grade >= 70]

# Create a struct to represent a 2D point
struct Point
    x::Float64
    y::Float64
end

# Define a function to calculate the distance between two points
function distance(point1::Point, point2::Point)
    return sqrt((point2.x - point1.x)^2 + (point2.y - point1.y)^2)
end

# Create an array of points
points = [Point(1,2), Point(3.5, -2), Point(0,5), Point(-2,-3.5)]

# Use map function to apply distance function to all possible combinations of points in the array
distances = map(x -> distance(x[1], x[2]), collect(combinations(points, 2)))

# Define a recursive function to calculate the nth element in the Catalan number sequence
function catalan(n::Int)
    if n == 0 || n == 1
        return 1
    end
    return sum([catalan(i) * catalan(n-i-1) for i = 0:n-1])
end