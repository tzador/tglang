# Define a struct for creating a bank account
struct BankAccount
    account_num::Int64 # stores the account number as an Int64 type
    account_name::String # stores the name of the account holder as a String type
    balance::Float64 # stores the current balance as a Float64 type
    
    # Define the constructor for the BankAccount struct
    function BankAccount(account_num::Int64, account_name::String, balance::Float64)
        if balance < 0 # check if the initial balance is negative
            error("Cannot create an account with a negative balance. Please try again.")
        else # if balance is positive, create the account
            new(account_num, account_name, balance)
        end
    end
end

# Create a new bank account instance
my_account = BankAccount(1234567890, "John Doe", 1000.00)

# Try to create an account with a negative balance
negative_account = BankAccount(0987654321, "Jane Smith", -500.00)

# Define a function for depositing money into the account
function deposit(account::BankAccount, amount::Float64)
    account.balance += amount # increase the account balance by the deposited amount
end

# Define a function for withdrawing money from the account
function withdraw(account::BankAccount, amount::Float64)
    if amount > account.balance # check if the withdrawal amount is greater than the current balance
        error("Insufficient funds in account " * string(account.account_num) * ". Please try again.")
    else # if enough funds, withdraw the amount and update the balance
        account.balance -= amount
    end
end

# Make a deposit of $500 into my account
deposit(my_account, 500.00)

# Try to withdraw $2000 from my account
withdraw(my_account, 2000.00)

# Print the updated account balance
println("My account balance is now $" * string(my_account.balance))