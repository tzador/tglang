Function merge_sort(arr)
    if length(arr) <= 1  # checks if the array has only one element
        return arr
    end
    mid = Int(length(arr) / 2)  # finds the middle index of the array
    left = merge_sort(arr[1:mid])  # recursively calls merge_sort on the left half
    right = merge_sort(arr[mid + 1:end])  # recursively calls merge_sort on the right half
    return merge(left, right)  # calls the merge function to merge the two sorted halves
end

# Function to merge two sorted arrays
Function merge(left, right)
    result = []  # creates an empty array to store the merged result
    while length(left) > 0 && length(right) > 0  # checks if both arrays still have elements
        if left[1] <= right[1]  # compares the first element of both arrays
            push!(result, left[1])  # appends the first element of left to the result array
            left = left[2:end]  # removes the first element of left array
        else
            push!(result, right[1])  # appends the first element of right to the result array
            right = right[2:end]  # removes the first element of right array
        end
    end
    append!(result, left)  # appends the remaining elements of left array to the result array
    append!(result, right)  # appends the remaining elements of right array to the result array
    return result  # returns the merged and sorted result array
end

# Example
array = [5, 2, 7, 1, 3, 9, 4]
println("Unsorted array: ", array)
sorted_array = merge_sort(array)
println("Sorted array: ", sorted_array)

# Output:
'''
Unsorted array: [5, 2, 7, 1, 3, 9, 4]
Sorted array: [1, 2, 3, 4, 5, 7, 9]
'''