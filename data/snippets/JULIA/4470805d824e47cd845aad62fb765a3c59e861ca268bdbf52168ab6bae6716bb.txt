# Define function to calculate inverse of a matrix
function inverse(A)
    m = size(A,1)
    n = size(A,2)
    # Check if matrix is square
    if m!=n
        error("Inverse does not exist for non-square matrix")
    end
    # Use LU factorization to calculate inverse
    # First calculate LU factorization of the matrix
    F = lu(A)
    # Initialize inverse matrix
    A_inverse = zeros(m,m)
    # For each column of identity matrix, solve for x in (A)x = e(j)
    for j=1:m
        e = zeros(m)
        e[j] = 1
        # Use forward substitution to solve for y in Ly = e(j)
        y = forward_substitution(F.L, e)
        # Use backward substitution to solve for x in Ux = y
        x = backward_substitution(F.U, y)
        # Set column j of inverse matrix to x
        A_inverse[:,j] = x
    end
    return A_inverse
end

# Define function for forward substitution to solve lower triangular system
function forward_substitution(L, b)
    m = size(L,1)
    n = size(L,2)
    # Check dimensions of L and b
    if m!=n || n!=size(b,1)
        error("Dimensions of L and b do not match")
    end
    # Initialize solution vector x
    x = zeros(n)
    # Solve for x_i using formula x_i = (bi - sum(Lij*xj from j=1 to i-1)) / Lii
    for i=1:n
        # Calculate sum of Lij*xj
        Lij_xj = 0
        for j=1:i-1
            Lij_xj += L[i,j]*x[j]
        end
        # Calculate x_i using formula
        x[i] = (b[i] - Lij_xj)/L[i,i]
    end
    return x
end

# Define function for backward substitution to solve upper triangular system
function backward_substitution(U, b)
    m = size(U,1)
    n = size(U,2)
    # Check dimensions of U and b
    if m!=n || n!=size(b,1)
        error("Dimensions of U and b do not match")
    end
    # Initialize solution vector x
    x = zeros(n)
    # Solve for x_i using formula x_i = (bi - sum(Uij*xj from j=i+1 to n)) / Uii
    for i=n:-1:1
        # Calculate sum of Uij*xj
        Uij_xj = 0
        for j=i+1:n
            Uij_xj += U[i,j]*x[j]
        end
        # Calculate x_i using formula
        x[i] = (b[i] - Uij_xj)/U[i,i]
    end
    return x
end

# Example: Calculate inverse of a 3x3 matrix
A = [1 2 3; 4 5 6; 7 8 10]
A_inv = inverse(A)

# Output: