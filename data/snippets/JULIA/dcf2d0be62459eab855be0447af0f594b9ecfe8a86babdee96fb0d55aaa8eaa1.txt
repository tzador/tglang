# Create a function that calculates the nth Fibonacci number
function fibonacci(n)
    if n == 1 || n == 2             # Check for base cases 1 and 2
        return 1
    else
        return fibonacci(n-1) + fibonacci(n-2)  # Recursively call the function with n-1 and n-2
    end
end

# Generate a Dictionary containing Fibonacci numbers up to n
function generate_fibonacci(n)
    fibonacci_dict = Dict(1 => 1, 2 => 1)   # Create a Dictionary with base cases
    for i in 3:n            # Loop from 3 to n
        fibonacci_dict[i] = fibonacci(i)    # Calculate and add the Fibonacci number at index i
    end
    return fibonacci_dict       # Return the completed Dictionary
end

# Calculate the 10th Fibonacci number
nth_fibonacci = fibonacci(10)
println(nth_fibonacci)      # Output: 55

# Generate a Dictionary containing the first 10 Fibonacci numbers
fibonacci_dict = generate_fibonacci(10)
println(fibonacci_dict)     # Output: Dict{Int64, Int64}(4 => 3, 7 => 13, 10 => 55, 2 => 1, 5 => 5, 8 => 21, 3 => 2, 6 => 8, 9 => 34, 1 => 1)

# Calculate the sum of all Fibonacci numbers up to n
function fibonacci_sum(n)
    fibonacci_sum = 0        # Initialize variable to store sum
    for i in 1:n             # Loop from 1 to n
        fibonacci_sum += fibonacci(i)   # Add each Fibonacci number to the sum
    end
    return fibonacci_sum     # Return the sum
end

# Calculate the sum of the first 10 Fibonacci numbers
sum_of_fibonacci = fibonacci_sum(10)
println(sum_of_fibonacci)   # Output: 143