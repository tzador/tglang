# Define a function named "multivariate_gaussian" that takes in three arguments: "mean_vector", "cov_matrix", "num_samples"
# This function calculates and returns a multivariate Gaussian distribution with mean "mean_vector" and covariance matrix "cov_matrix"
function multivariate_gaussian(mean_vector, cov_matrix, num_samples)
    # Define the number of dimensions based on the length of the mean vector
    num_dims = length(mean_vector)
    
    # Create an empty matrix for storing the samples
    sample_matrix = zeros(num_dims, num_samples)
    
    # Generate "num_samples" samples from a standard normal distribution with the same number of dimensions as the mean vector
    samples = randn(num_dims, num_samples)
    
    # Use the Cholesky decomposition to transform the samples into a multivariate Gaussian distribution
    # This ensures that the covariance matrix is positive and symmetric
    transformed_samples = chol(cov_matrix) * samples
    
    # Add the mean vector to each column of the transformed samples
    for i = 1:num_samples
        sample_matrix[:, i] = mean_vector + transformed_samples[:, i]
    end
    
    # Return the sample matrix
    return sample_matrix
end

# Define the mean vector and covariance matrix
mean = [3, 5]
covariance = [2 1; 1 3]

# Generate 10,000 samples from the multivariate Gaussian distribution
samples = multivariate_gaussian(mean, covariance, 10000)

# Print the first 5 samples
println(samples[:, 1:5])