function mergeSort(arr)
    # checks if array is of length 1 or 0 and returns it
    if length(arr) < 2
        return arr
    end

    # calculates middle index of array
    mid = length(arr) รท 2

    # splits array into two halves
    left = mergeSort(arr[1:mid])
    right = mergeSort(arr[mid+1:end])

    # initializes an empty array to store sorted elements
    sorted = []

    # runs while both halves still have elements
    while !isempty(left) && !isempty(right)
        # compares values from the beginning of both halves
        if left[1] <= right[1]
            # if left element is smaller, append it to sorted
            push!(sorted, left[1])
            # remove first element from left half
            left = left[2:end]
        else
            # otherwise, append first element from right half
            push!(sorted, right[1])
            # remove first element from right half
            right = right[2:end]
        end
    end

    # append remaining elements from either left or right half
    append!(sorted, left)
    append!(sorted, right)

    # return sorted array
    return sorted
end

# example usage of mergeSort function
array = [7, 3, 9, 1, 6, 2]
sorted_array = mergeSort(array)
# output: [1, 2, 3, 6, 7, 9]