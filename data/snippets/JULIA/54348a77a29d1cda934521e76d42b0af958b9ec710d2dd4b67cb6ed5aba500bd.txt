# Define a function that creates a random matrix of given size
function create_matrix(size)
  # Generate random numbers for each element in the matrix
  matrix = [rand() for i in 1:size, j in 1:size]
  # Return the created matrix
  return matrix
end

# Define a matrix of size 3x3 containing random numbers
random_matrix = create_matrix(3)

# Define a function that calculates the inverse of a matrix
function calculate_inverse(matrix)
  # Get the size of the matrix
  size = size(matrix, 1)
  # Initialize an identity matrix of same size as input matrix
  identity_matrix = Matrix{Float64}(I, size, size)
  # Perform Gaussian elimination to get the inverse
  for i in 1:size
    pivot = matrix[i, i]
    # Divide each element of the current row by the pivot element
    matrix[i, :] /= pivot
    identity_matrix[i, :] /= pivot
    # Subtract each row from the current row multiplied by the pivot element
    for j in 1:size
      if i != j
        multiplier = matrix[j, i]
        matrix[j, :] -= multiplier * matrix[i, :]
        identity_matrix[j, :] -= multiplier * identity_matrix[i, :]
      end
    end
  end
  # Return the inverse matrix
  return identity_matrix
end

# Calculate the inverse of the random matrix
inverse = calculate_inverse(random_matrix)

# Print the inverse matrix
println(inverse)