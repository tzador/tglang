mutable struct Particle # creates a structure type with mutable fields
    id::Int64 # defines an integer field for particle id
    position::Tuple{Float64, Float64, Float64} # defines a tuple field for position as floating point numbers
    velocity::Array{Float64, 1} # defines an array field for velocity as floating point numbers
end # end of structure declaration
function update_position!(particle::Particle, t::Float64) # defines a function with an exclamation mark to indicate that it modifies its argument
    particle.position .= particle.position .+ particle.velocity .* t # updates the position of the particle using array broadcasting and in-place modification
end # end of update_position! function
function update_velocity!(particle::Particle, accel::Tuple{Float64, Float64, Float64}, t::Float64) # defines a function to update the velocity of the particle
    particle.velocity[1] += accel[1] * t # updates the x-component of velocity
    particle.velocity[2] += accel[2] * t # updates the y-component of velocity
    particle.velocity[3] += accel[3] * t # updates the z-component of velocity
end # end of update_velocity! function
function create_particles(n::Int64) # defines a function to create an array of n particles
    particles = Array{Particle}(undef, n) # creates an array with n undefined elements
    for i in 1:n # loops over the indices of the array
        particles[i] = Particle(i, (0.0, 0.0, 0.0), [0.0, 0.0, 0.0]) # creates a new particle with given id, position and velocity
    end # end of loop
    return particles # returns the array of particles
end # end of create_particles function
const G = 6.67430e-11 # defines a constant for universal gravitational constant
const EARTH_MASS = 5.9722e24 # defines a constant for Earth's mass in kilograms
const EARTH_RADIUS = 6371000 # defines a constant for Earth's radius in meters
function calculate_acceleration(particle::Particle, t::Float64) # defines a function to calculate the acceleration of a particle
    r = particle.position[1]^2 + particle.position[2]^2 + particle.position[3]^2 # calculates the distance from the origin
    accel_x = -G * EARTH_MASS * particle.position[1] / r^(3/2) # calculates the x-component of acceleration due to Earth's gravity
    accel_y = -G * EARTH_MASS * particle.position[2] / r^(3/2) # calculates the y-component of acceleration due to Earth's gravity
    accel_z = -G * EARTH_MASS * particle.position[3] / r^(3/2) # calculates the z-component of acceleration due to Earth's gravity
    accel = (accel_x, accel_y, accel_z) # creates a tuple of acceleration components
    update_velocity!(particle, accel, t) # updates the velocity of the particle
    return accel # returns the tuple of acceleration components
end # end of calculate_acceleration function
particles = create_particles(100) # creates an array of 100 particles
t = 1.0 # sets the time step to 1 second
for p in particles # loops over the particles in the array
    update_position!(p, t) # updates the position of the particle
    a = calculate_acceleration(p, t) # calculates the acceleration on the particle
end # end of loop
println(particles) # prints the final positions and velocities of the particles