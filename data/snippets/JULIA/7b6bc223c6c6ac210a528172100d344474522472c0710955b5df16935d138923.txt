# This code snippet uses the Newton-Raphson method to find the root of a polynomial function

using Polynomials # Importing the Polynomials package for polynomial manipulation

function newton(p::Poly; start=0, tol=1e-8, maxiter=100)
    # Defining the function with keyword arguments for initial guess, tolerance and maximum iterations
    x = start # Setting the initial guess as the start value
    iter = 0 # Initializing the iteration count
    while abs(p(x)) > tol # Iterating while the absolute value of function value is greater than tolerance
        global x = x - p(x)/p'(x) # Updating the guess using the Newton-Raphson formula: x_new = x_old - f(x_old)/f'(x_old)
        iter += 1 # Incrementing the iteration count
        iter > maxiter && error("method failed to converge after $maxiter iterations") # Throwing an error if maximum iterations reached
    end
    return x, iter # Returning the final guess and the number of iterations
end

# Calling the function with a polynomial function as argument
root, iterations = newton(Poly([1, 0, -2, 1])); # Creating a polynomial with coefficients 1, 0, -2, 1 (p(x) = x^3 - 2x + 1)
println("The root of the polynomial is $root.") # Printing the root
println("The method took $iterations iterations to converge.") # Printing the number of iterations