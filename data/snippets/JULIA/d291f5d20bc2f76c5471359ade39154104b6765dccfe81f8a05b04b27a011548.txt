# This code snippet is a simple implementation of merge sort algorithm in Julia

# Merge function to merge two subarrays of arr[].
function merge(arr, l, m, r)
    # calculating sizes of two subarrays
    n1 = m - l + 1
    n2 = r - m
 
    # creating temporary arrays
    L = zeros(Int64, n1)
    R = zeros(Int64, n2)
 
    # copy data to temporary arrays
    for i = 1:n1
        L[i] = arr[l + i - 1]
    end
    for j = 1:n2
        R[j] = arr[m + j]
    end
 
    # merging the temp arrays
 
    # initial indexes of first and second subarrays
    i = 1
    j = 1
 
    # initial index of merged subarray
    k = l
 
    while i <= n1 && j <= n2
        # comparing elements from both subarrays and merging in ascending order
        if L[i] <= R[j]
            arr[k] = L[i]
            i += 1
        else
            arr[k] = R[j]
            j += 1
        end
        k += 1
    end
 
    # copying remaining elements of L if any
    while i <= n1
        arr[k] = L[i]
        i += 1
        k += 1
    end
 
    # copying remaining elements of R if any
    while j <= n2
        arr[k] = R[j]
        j += 1
        k += 1
    end
end
 
# merge sort function
function merge_sort(arr, l, r)
    if l < r
        # finding the middle point
        m = l + (r - l) / 2
 
        # sorting the first and second halves
        merge_sort(arr, l, m)
        merge_sort(arr, m + 1, r)
 
        # merging the two halves
        merge(arr, l, m, r)
    end
end
 
# creating an array for testing
arr = [38, 27, 43, 3, 9, 82, 10]
 
# calling merge sort function
merge_sort(arr, 1, length(arr))

# printing the sorted array
println("Sorted array: ", arr)