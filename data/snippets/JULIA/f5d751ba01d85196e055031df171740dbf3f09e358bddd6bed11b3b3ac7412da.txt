"""
This code snippet creates a function called `merge_sort` that implements the merge sort algorithm.

Params:
A - an Array of type T (the datatype of the elements in the array)

Returns:
A sorted Array of type T (using the merge sort algorithm)
"""
function merge_sort{T}(A::Array{T})

    # base case: if array has only 1 element, it is sorted
    if length(A) <= 1
        return A
    end
    
    # recursively split array into left and right halves
    mid = div(length(A), 2)
    left = merge_sort(A[1:mid])
    right = merge_sort(A[mid+1:end])
    
    # helper function to merge sorted arrays
    function merge(left::Array{T}, right::Array{T})
        
        # initialize pointers for left and right arrays
        i, j = 1, 1

        # initialize empty array to hold sorted elements
        sorted = Array{T}(undef, length(left) + length(right))
        
        # merges sorted elements from left and right arrays into sorted array
        for k = 1:length(sorted)
            # check if all elements from left array are already merged
            if i > length(left)
                # add remaining elements from right array to sorted array
                sorted[k:end] = right[j:end]
                break
            # check if all elements from right array are already merged
            elseif j > length(right)
                # add remaining elements from left array to sorted array
                sorted[k:end] = left[i:end]
                break
            # compare and add smallest element from left and right arrays to sorted array
            elseif left[i] < right[j]
                sorted[k] = left[i]
                i += 1
            else
                sorted[k] = right[j]
                j += 1
            end
        end
        
        return sorted
    end
    
    # call helper function to merge left and right arrays
    merge(left, right)
end