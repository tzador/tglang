# Define a function to calculate eigenvalues
function calculate_eigenvalues(A)
    # Convert input to Float64 matrix
    A = Float64.(A)
    # Get dimensions of input matrix
    m, n = size(A)
    # Initialize empty array to store eigenvalues
    eigenvalues = []
    # Initialize empty array to store eigenvectors
    eigenvectors = []
    # Check if input matrix is square
    if m != n
        println("Error: Input matrix must be square")
        return
    end
    # Calculate eigenvalues using QR decomposition
    Q, R = qr(A)
    # Loop through diagonal elements of R matrix
    for i in 1:n
        # Calculate eigenvalue by taking nth root of diagonal element
        eigenvalue = nthroot(R[i, i], n)
        # Push eigenvalue to eigenvalues array
        push!(eigenvalues, eigenvalue)
        # Calculate eigenvector by multiplying Q matrix by corresponding eigenvector
        eigenvector = Q[:, i] * eigenvalue
        # Push eigenvector to eigenvectors array
        push!(eigenvectors, eigenvector)
    end
    # Return eigenvalues and eigenvectors
    return eigenvalues, eigenvectors
end

# Define input matrix
A = [1.0 2.0 -1.0; 2.0 -2.0 4.0; -1.0 2.0 0.0]
# Calculate eigenvalues and eigenvectors
eigenvalues, eigenvectors = calculate_eigenvalues(A)
# Print results
println("Eigenvalues: ", eigenvalues)
println("Eigenvectors: ", eigenvectors)