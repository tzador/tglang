import Base: +, *

mutable struct Complex{T<:Real} <: Number
    # Complex number with real and imaginary components of type T
    re::T
    im::T
end

+(z::Complex, w::Complex) = Complex(z.re + w.re, z.im + w.im) # Addition of two complex numbers
*(z::Complex, w::Complex) = Complex(z.re*w.re - z.im*w.im, z.re*w.im + z.im*w.re) # Multiplication of two complex numbers

function mandel(z)
    c = z
    maxiter = 80
    for n in 1:maxiter
        if abs(z) > 2.0 # If the absolute value of z exceeds 2, break the loop
            break 
        end
        z = z^2 + c # Square z and add c to it
    end
    return n # Return number of iterations taken to exceed 2
end