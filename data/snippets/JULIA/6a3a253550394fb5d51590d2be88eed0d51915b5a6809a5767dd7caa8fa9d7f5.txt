using Plots#This imports the Plots library for creating visualizations
function mandelbrot(n::Int64)#Creates a function called mandelbrot that takes in an integer parameter
    range = linspace(-2, 2, n)#Creates a range variable from -2 to 2 with n steps
    output = zeros(ComplexF64, n, n)#Creates an n by n matrix of complex numbers, initialized to 0
    for x = 1:n#Start of for loop iterating over values of x from 1 to n
        for y = 1:n#Start of for loop iterating over values of y from 1 to n
            z = 0#Initializes z as 0
            c = complex(real(range[x]), imag(range[y]))#Creates a complex number c with the real and imaginary parts corresponding to the values in the range
            for i = 1:50#Start of for loop iterating over values of i from 1 to 50
                z = z^2 + c#Updates the value of z according to the Mandelbrot set equation
                if abs(z) > 2#Checks if the absolute value of z is greater than 2
                    output[x,y] = i#Sets the value of output at indices x and y to the value of i
                    break#Breaks out of the for loop
                end
            end
        end
    end
    return output#End of function, returns the matrix of complex numbers
end
mandelbrot_plot = mandelbrot(500)#Calls the mandelbrot function with n = 500 and assigns the output to a variable
heatmap(mandelbrot_plot, color=:viridis)#Plots a heatmap using the mandelbrot_plot variable, with the color scheme set to viridis