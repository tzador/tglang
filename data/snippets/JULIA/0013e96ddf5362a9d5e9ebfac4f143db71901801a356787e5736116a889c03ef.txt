const MAX_ITERATIONS = 1000                       ### Define a constant with a value of 1000
mutable struct FractalPoint                      ### Define a mutable struct called 'FractalPoint'
    x::Float64                                   ### Add a field to the struct, specifying its type as 'Float64'
    y::Float64                                   ### Add another field to the struct, also of type 'Float64'
end                                              ### End of struct definition
mag(z) = z.x^2 + z.y^2                           ### Define a function 'mag' that takes a FractalPoint as an argument and calculates the magnitude of the point
mandelbrot(c) = begin                             ### Define a new function 'mandelbrot' that takes a complex number (c) as an argument
    z = FractalPoint(0.0, 0.0)                   ### Initialize a new FractalPoint (z) at (0, 0)
    for i in 1:MAX_ITERATIONS                    ### Loop for a maximum of MAX_ITERATIONS times
        if mag(z) > 4.0                          ### If the magnitude of z is greater than 4.0
            return i                             ### Return the current iteration count
        end                                      ### End of if statement
        z = FractalPoint(z.x^2 - z.y^2 + c, 2*z.x*z.y + c)  ### Update z using the Mandelbrot formula
    end                                          ### End of for loop
    return 0                                      ### If the point is within the Mandelbrot set, return 0
end                                              ### End of function definition
function calc_mandelbrot(width::Int, height::Int)  ### Define a new function that takes in two integer arguments for the width and height of the image
    mandelbrot_set = Array{Int, 2}(undef, height, width)   ### Create a 2D array to store the Mandelbrot set values
    for y in 1:height                             ### Loop through the rows of the array
        for x in 1:width                          ### Loop through the columns of the array
            xcoord = -2 + (3*x/width)             ### Calculate the x-coordinate of the current point
            ycoord = -1 + (2*y/height)            ### Calculate the y-coordinate of the current point
            c = complex(xcoord, ycoord)           ### Create a complex number using the coordinates
            mandelbrot_set[y, x] = mandelbrot(c)  ### Calculate the mandelbrot value for the current point and store it in the array
        end                                      ### End of inner for loop
    end                                          ### End of outer for loop
    return mandelbrot_set                        ### Return the completed mandelbrot set array
end                                              ### End of function definition
width = 500                                      ### Set the width of the image to 500 pixels
height = 500                                     ### Set the height of the image to 500 pixels
mandelbrot_set = calc_mandelbrot(width, height)  ### Calculate the mandelbrot set for the given width and height
@png begin                                        ### Create a PNG image using the Plots.jl library
    plot(mandelbrot_set, color=:rainbow)          ### Use the calculated mandelbrot set as the image data, and color the points using a rainbow color scheme
end                                               ### End of @png block