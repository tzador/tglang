# Define a function named "quicksort" that takes in an array of integers and returns a sorted array
function quicksort(array::Array{Int64,1})
# Check if the input array is empty
    if length(array) == 0 
        return []
    else
# Set the first element of the array as the pivot
        pivot = array[1]
# Partition the array into two subarrays, one with values less than the pivot and one with values greater than the pivot
        left = [x for x in array[2:end] if x <= pivot]
        right = [x for x in array[2:end] if x > pivot]
# Use recursion to sort the subarrays
        return [quicksort(left)..., pivot, quicksort(right)...]
    end
end

# Create an array of integers to be sorted
unsorted_array = [5, 2, 7, 3, 1, 8, 4]

# Call the quicksort function on the unsorted array
sorted_array = quicksort(unsorted_array)

# Print the sorted array
println(sorted_array)