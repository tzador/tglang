function merge_sort(arr)
    # function for merging two sorted arrays
    function merge(left, right)
        # initialize empty arrays for merged and sorted results
        sorted_arr = Vector{Int}()
        i = 1 # index for left array
        j = 1 # index for right array
        # loop through arrays until one is exhausted
        while i <= length(left) && j <= length(right)
            # compare first elements of both arrays
            if left[i] <= right[j]
                # push smaller element into sorted array
                push!(sorted_arr, left[i])
                # update i index
                i += 1
            else
                push!(sorted_arr, right[j]) # push larger element into sorted array
                j += 1 # update j index
            end
        end
        # add remaining elements from left array (if any) to sorted array
        while i <= length(left)
            push!(sorted_arr, left[i])
            i += 1
        end
        # add remaining elements from right array (if any) to sorted array
        while j <= length(right)
            push!(sorted_arr, right[j])
            j += 1
        end
        # return sorted array
        return sorted_arr
    end

    # function for merge sort algorithm
    function mergesort(arr)
        if length(arr) <= 1 # base case
            return arr
        else
            middle = floor(length(arr)/2)
            left = mergesort(arr[1:middle]) # recursively split left array
            right = mergesort(arr[middle+1:end]) # recursively split right array
            return merge(left, right) # merge and sort split arrays
        end
    end

    # call mergesort function and store result in sorted_arr variable
    sorted_arr = mergesort(arr)
    # return sorted array
    return sorted_arr
end

# example usage
arr = [9, 3, 7, 1, 5, 4]
sorted_arr = merge_sort(arr)
println(sorted_arr) # output: [1, 3, 4, 5, 7, 9]