# Function to perform polynomial interpolation using Lagrange's method
function interpolate(x_data, y_data)
    # Get the length of the data set
    n = length(x_data)
    
    # Initialize an empty matrix to hold the coefficients
    coefficients = zeros(n, n)
    
    # Loop through each data point
    for i in 1:n
        # Initialize a temporary matrix to hold the coefficients for the current interpolation polynomial
        temp_coeffs = ones(n)
        # Loop through each data point again
        for j in 1:n
            # Skip the current data point if it is the same as the current interpolation point
            if i == j
                continue
            end
            # Calculate the denominator for the interpolation term
            denominator = x_data[i] - x_data[j]
            # Multiply the current term by the reciprocal of the denominator
            temp_coeffs = temp_coeffs .* [1, -x_data[j]] ./ denominator
        end
        
        # Multiply the temporary coefficients by the corresponding data point
        temp_coeffs = temp_coeffs .* y_data[i]
        
        # Add the temporary coefficients to the overall coefficients matrix
        coefficients[i, :] = temp_coeffs
    end
    
    # Initialize the output function as a string
    output_function = "0"
    
    # Loop through each row of coefficients
    for row in 1:n
        # Initialize the current term as a string
        current_term = "+"
        
        # Loop through each coefficient in the current row
        for (index, coefficient) in enumerate(coefficients[row, :])
            # If the coefficient is zero, skip it
            if coefficient == 0
                continue
            end
            # If the coefficient is positive, add a "+" to the term
            if coefficient > 0
                current_term *= "+"
            end
            # Convert the coefficient to a string and add it to the term
            current_term *= "$coefficient"
            # If the current index is not the first, add the x term to the term
            if index > 1
                current_term *= "*x"
            end
        end
        
        # Remove the first "+" from the term
        current_term = replace(current_term, r"^+\s*", "")
        # Add the current term to the output function
        output_function *= current_term
    end
    
    # Convert the output function to a callable function
    output_function = parse("$output_function")
    return output_function
end

# Generate random data for testing
x_data = rand(-10:10, 5)
y_data = rand(-10:10, 5)

# Perform interpolation
interpolation_function = interpolate(x_data, y_data)

# Test the interpolation function by evaluating it at a random value
random_eval = rand(-10:10)
interpolation_result = interpolation_function(random_eval)

# Print the result
println("Interpolation result for $random_eval is $interpolation_result")