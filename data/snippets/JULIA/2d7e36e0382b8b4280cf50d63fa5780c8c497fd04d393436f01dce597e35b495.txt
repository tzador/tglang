# Generate a matrix with random values
A = rand(6,6)

# Find the inverse of the matrix
A_inv = inv(A)

# Print the inverse matrix
println("Inverse matrix of A:")
println(A_inv)

# Perform matrix multiplication of A and its inverse
A_mul = A * A_inv

# Print the result
println("A * A_inv:")
println(A_mul)

# Define a function to calculate the factorial of a number
function factorial(n)
    if n == 0
        return 1
    else
        return n * factorial(n-1)
    end
end

# Calculate factorial of 6
fact_6 = factorial(6)

# Print the result
println("Factorial of 6:")
println(fact_6)

# Create a Julia array with different data types
arr = Any[1, "two", 3.14, true]

# Print the array
println("Julia array:")
println(arr)

# Define a recursive function to print the Fibonacci sequence
function fibonacci(n)
    if n == 1 || n == 2
        return 1
    else
        return fibonacci(n-1) + fibonacci(n-2)
    end
end

# Call the function to print the first 10 numbers in the sequence
for i in 1:10
    println(fibonacci(i))
end

# Create a dictionary mapping letters to their corresponding ASCII codes
dict = Dict('a'=>97, 'b'=>98, 'c'=>99, 'd'=>100)

# Print the dictionary
println("Letter to ASCII code dictionary:")
println(dict)

# Define a struct to represent a student with name and grades
struct Student
    name::String
    grades::Vector{Float64}
end

# Create an instance of the Student struct
student1 = Student("John", [78.5, 92.3, 85.0, 91.2])

# Print the student's name and average grade
println("Student name:")
println(student1.name)
println("Average grade:")
println(sum(student1.grades)/length(student1.grades))