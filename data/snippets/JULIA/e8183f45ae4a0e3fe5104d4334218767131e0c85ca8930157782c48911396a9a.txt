#generate a random matrix
using Random
matrix = rand(1:10, 5, 5)

#calculate the inverse of the matrix using LU decomposition
matrix_inverse = inv(matrix)

#check if the matrix is symmetric
is_symmetric = issymmetric(matrix)

#loop through each element in the matrix and print its absolute value
for i in 1:size(matrix, 1)
    for j in 1:size(matrix, 2)
        println("Absolute value of element at ($i, $j): ", abs(matrix[i, j]))
    end
end

#calculate the mean of each column in the matrix
column_means = mean(matrix, dims=1)

#calculate the Eigenvalues and Eigenvectors of the symmetric matrix
eigenvalues, eigenvectors = eigen(matrix)

#plot a scatter plot of the first and second column of the matrix
using Plots
scatter(matrix[:,1], matrix[:,2], xlabel = "Column 1", ylabel="Column 2", title="Scatter Plot of Matrix Columns")

#fit a linear regression model to the third column of the matrix using the first two columns as predictors
using GLM
linear_model = lm(@formula(matrix[:,3] ~ matrix[:,1] + matrix[:,2]), matrix)

#calculate the determinant of the matrix
matrix_determinant = det(matrix)

#calculate the cumulative sum of each row in the matrix
row_cumsum = cumsum(matrix, dims=2)

#calculate the cosine of each element in the matrix
cos_matrix = cos.(matrix)

#convert the matrix to a JSON string
using JSON
matrix_json = JSON.json(matrix)

#calculate the matrix norm using the Frobenius norm
matrix_norm = norm(matrix, "fro")