function mergeSort(arr::Array{T,1}) where {T <: Int}
    # if array has less than 2 elements, return it as is
    length(arr) ≤ 1 && return arr
    mid = div(length(arr),2) # index of middle element
    left = mergeSort(arr[1:mid]) # recursively sort left half
    right = mergeSort(arr[mid+1:end]) # recursively sort right half
    result = Array{T,1}(undef,length(arr)) # initialize result array
    i, j, k = 1, 1, 1 # initialize counters
    while i ≤ length(left) && j ≤ length(right)
        if left[i] ≤ right[j] # compare elements
            result[k] = left[i]
            i += 1
        else
            result[k] = right[j]
            j += 1
        end
        k += 1 # increment result counter
    end
    while i ≤ length(left) # add remaining elements from left
        result[k] = left[i]
        i += 1
        k += 1
    end
    while j ≤ length(right) # add remaining elements from right
        result[k] = right[j]
        j += 1
        k += 1
    end
    return result # return sorted array
end