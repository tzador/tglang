mutable struct Robot #create mutable struct named "Robot"
  name::String #define field "name" with type string
  height::Int64 #define field "height" with type int64
  weight::Float64 #define field "weight" with type float64
  energy::Float64 #define field "energy" with type float64
  distance::Float64 #define field "distance" with type float64
end #end struct

function initialize(robot_name) #define function named "initialize" with parameter "robot_name"
  robot = Robot(name, height, weight, energy, distance) #create object of type Robot with specified fields
  println("Initializing robot named $(robot_name) with height $(robot.height) m and weight $(robot.weight) kg...") #print message with interpolated values
  return robot #return the created object
end #end function

function walk!(robot::Robot, distance) #define function named "walk!" with parameters robot and distance
  robot.energy -= 0.1 * distance #subtract energy based on distance walked
  robot.distance += distance #update distance traveled
  println("Walking $(distance) m...") #print message with distance walked
end #end function

function recharge!(robot::Robot) #define function named "recharge!" with parameter robot
  robot.energy = 100.0 #reset energy to 100%
  println("Charging robot $(robot.name)...") #print message with robot name
end #end function

#Example usage
my_robot = initialize("Robbie") #create robot object called "my_robot" with name "Robbie"
walk!(my_robot, 10) #make my_robot walk 10 meters
recharge!(my_robot) #recharge my_robot's energy
walk!(my_robot, 5) #make my_robot walk another 5 meters