# define a function to calculate the sum of two numbers
function sum(x, y)
    return x + y  # return the sum of x and y
end

# define a function to calculate the factorial of a number
function factorial(n)
    if n == 0  # base case
        return 1
    else
        return n * factorial(n-1)  # recursive call 
    end
end

# define a struct for a car with properties brand and model
struct Car
    brand::String
    model::String
end

# create an instance of Car
my_car = Car("Tesla", "Model S")

# print out the brand and model of the car
println("My car is a $(my_car.brand) $(my_car.model)")

# create a dictionary with names as keys and ages as values
ages = Dict("John" => 30, "Jane" => 25, "Bob" => 40)

# loop through the dictionary and print out the name and age
for (name, age) in ages
    println("$(name) is $(age) years old.")
end

# define a matrix with 3 rows and 5 columns
matrix = [1 2 3 4 5; 6 7 8 9 10; 11 12 13 14 15]

# calculate the transpose of the matrix
transpose = transpose(matrix)

# print out the original and the transposed matrix
println("Original matrix:")
println(matrix)
println("Transposed matrix:")
println(transpose)