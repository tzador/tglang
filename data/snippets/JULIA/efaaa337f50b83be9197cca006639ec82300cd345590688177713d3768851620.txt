mutable struct Particle # creates a mutable struct type called Particle, allowing for change in its fields
    mass # field for mass of particle
    charge # field for charge of particle
    velocity # field for velocity of particle
    position # field for position of particle
end

function accelerate!(p::Particle, force, delta_t) # creates a function called accelerate! that takes in a Particle object, a force vector, and a time step
    p.velocity += (force / p.mass) * delta_t # updates particle's velocity using Newton's second law
    p.position += p.velocity * delta_t # updates particle's position using velocity formula
end

function electromagnetic_force(p1::Particle, p2::Particle) # creates a function that calculates the electromagnetic force between two particles
    distance = sqrt((p2.position[1] - p1.position[1])^2 + (p2.position[2] - p1.position[2])^2 + (p2.position[3] - p1.position[3])^2) # calculates the distance between the particles using their positions
    force_magnitude = (p1.charge * p2.charge) / distance^2 # calculates the magnitude of the force using Coulomb's law
    force_direction = (p2.position - p1.position) / distance # calculates the direction of the force
    return force_magnitude * force_direction # returns the force vector
end

n = 1000 # defines the number of particles in our simulation
particles = [Particle(rand(), rand(), rand(3), rand(3)) for i in 1:n] # creates a list of Particle objects with random masses, charges, velocities, and positions

for i in 1:n # loops through every pair of particles
    for j in i+1:n
        force = electromagnetic_force(particles[i], particles[j]) # calculates the force between the two particles
        accelerate!(particles[i], force, 0.01) # updates the first particle's velocity and position
        particles[j].velocity = -particles[i].velocity # sets the second particle's velocity to the opposite of the first particle's velocity (due to conservation of momentum)
        particles[j].position = particles[i].position # sets the second particle's position to be the same as the first particle's position (due to conservation of energy)
    end
end

E_pot = 0 # initializes the potential energy to be zero
E_kin = 0 # initializes the kinetic energy to be zero

for p in particles # loops through every particle in our simulation
    E_pot += p.mass * 9.8 * p.position[3] # adds potential energy due to gravity
    E_kin += 0.5 * p.mass * dot(p.velocity, p.velocity) # adds kinetic energy using the dot product of the velocity vector
end

println("The total potential energy is ", E_pot) # prints the total potential energy
println("The total kinetic energy is ", E_kin) # prints the total kinetic energy