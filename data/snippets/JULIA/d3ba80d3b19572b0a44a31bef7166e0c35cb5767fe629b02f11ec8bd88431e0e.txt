# Define a function called "permutation" that takes in two arguments
function permutation(list, num)
    # Initialize an empty array for storing the permutations
    perms = []
    # Check if the number of elements in the list is greater than the specified number
    if length(list) > num
        # Loop through the list
        for i in eachindex(list)
            # Define the current element as the first element of the list
            current = [list[i]]
            # Call the permutation function recursively on the remaining elements
            remaining = permutation(pop!(list, i), num)
            # Loop through the remaining elements
            for item in remaining
                # Append the current element to the beginning of each permutation
                push!(perms, vcat(current, item))
            end
        end
    # If the length of the list is equal to the specified number
    elseif length(list) == num
        # Append the list as a permutation to the array
        push!(perms, [list])
    end
    # Return the array of permutations
    return perms
end

# Call the permutation function on a list of numbers (1 to 4) and specify a permutation length of 3
permutation([1,2,3,4],3)