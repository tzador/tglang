function knapsack(weight::Int, values::Array{Int64}, weights::Array{Int64}, n::Int)
    #Create a 2D array of size (n+1) by (weight+1) and initialize it with 0
    dp = zeros(Int,n+1, weight+1)

    #Loop through all items
    for i in 1:n
        #Loop through all possible weights
        for w in 1:weight
            #If the current item's weight is less than or equal to the current weight
            if weights[i] <= w
                #Compute the maximum value by either taking the current item or not taking it
                dp[i+1,w+1] = max(dp[i,w], dp[i,w-weights[i]] + values[i])
            else
                #If the current weight is too small, use the previous value in the 2D array
                dp[i+1,w+1] = dp[i,w+1]
            end
        end
    end

    #Return the maximum value obtained by taking items until n and with total weight of weight
    return dp[n+1, weight+1]
end

#An example of how to use the function
weight = 10
values = [3, 7, 2, 9, 4]
weights = [4, 3, 5, 6, 7]
n = 5
max_value = knapsack(weight, values, weights, n)

#Print the result
println("The maximum value for a knapsack with a weight limit of ", weight, " is ", max_value)