# Define a function that calculates the derivative of a given function
function derivative(f, x)
    h = 1e-8 # set small step size
    return (f(x+h) - f(x-h))/(2h) # calculate derivative using the limit definition of derivative
end

# Define a function to check if a number is prime or not
# This function uses the Sieve of Eratosthenes algorithm
function prime_check(number)
    primes = trues(number) # create an array of true values, representing all numbers from 1 to number
    primes[1] = false # set 1 as false, as it is not a prime number
    for i = 2:number # loop through numbers from 2 to number
        if primes[i] # check if current number is marked as true
            for j = i*i:i:number # mark all multiples of current number as false
                primes[j] = false
            end
        end
    end
    return primes[number] # return true if the number is marked as prime, false if not
end

# Define a struct to represent a person
struct Person
    name::String # attribute for storing name
    age::Int64 # attribute for storing age
    nationality::String # attribute for storing nationality
    occupation::String # attribute for storing occupation
end

# Create an instance of Person struct
person = Person("John", 35, "American", "Software Engineer")

# Define a function to calculate the factorial of a number recursively
function factorial(n)
    if n == 0 || n == 1 # base case
        return 1
    else 
        return n * factorial(n-1) # recursively call the function with n-1
    end
end

# Create an array of integers
numbers = [1, 2, 3, 4, 5, 6, 7]

# Use list comprehension to square each element in the array
squared_nums = [num^2 for num in numbers]

# Print the squared numbers
println(squared_nums) # output: [1, 4, 9, 16, 25, 36, 49]