# Define a function that calculates the nth Fibonacci number 
function fibonacci(n)
    if n == 0 || n == 1
        return n
    else
        return fibonacci(n - 1) + fibonacci(n - 2) # Recursive call to calculate previous two numbers
    end
end

# Define a dictionary to store already calculated Fibonacci numbers
cache = Dict(0 => 0, 1 => 1)

# Create a function that uses memoization to improve performance
function improved_fibonacci(n)
    if haskey(cache, n)
        return cache[n] # Check if the Fibonacci number is already stored in the cache
    else
        result = improved_fibonacci(n - 1) + improved_fibonacci(n - 2) # Recursive call to calculate previous two numbers
        cache[n] = result # Store the result in the cache
        return result 
    end
end

# Call the improved_fibonacci function to calculate the 10th Fibonacci number
result = improved_fibonacci(10)
println("The 10th Fibonacci number is $result") # Print the result