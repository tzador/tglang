### Define a function for a Fibonacci sequence with memoization

# First, create an empty dictionary to store the previous values
fib_values = Dict{Int, Int}()

# Define the function with input parameter n
function fib(n::Int)
    # If the value is already in the dictionary, return that value
    haskey(fib_values, n) && return fib_values[n]

    # If n is equal to 1 or 2, return 1
    if (n == 1) || (n == 2)
        return 1
    end

    # Calculate the Fibonacci value recursively, using the memoized values
    fib_val = fib(n-1) + fib(n-2)

    # Store the value in the dictionary for future use
    fib_values[n] = fib_val

    # Return the calculated value
    return fib_val
end

# Call the function with input of 10, expects the output of 55
fib(10)

# Output: 55