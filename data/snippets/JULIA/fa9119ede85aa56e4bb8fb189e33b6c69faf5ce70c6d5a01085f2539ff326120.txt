# Define a function
function factorial(n)
    if n == 0 || n == 1
        # Base case
        return 1
    else
        # Recursive step
        return n * factorial(n-1)
    end
end

# Calculate the factorial of 5
factorial(5)

# Define a type
abstract type Animal end

# Add methods to the type
struct Dog <: Animal
    name::String
end

# Create an instance of the Dog type
my_dog = Dog("Max")

# Define a function to make the dog bark
function bark(animal::Dog)
    println("Woof! My name is $(animal.name).")
end

# Call the bark function on the dog instance
bark(my_dog)

# Define a matrix
A = [1 2 3; 4 5 6; 7 8 9]

# Define a function to perform matrix multiplication
function matmul(A, B)
    # Calculate the dimensions of the input matrices
    m = size(A, 1)
    n = size(B, 2)
    k = size(A, 2)

    # Create an empty matrix to store the result
    C = Array{Int64}(undef, m, n)

    # Perform the matrix multiplication
    @simd for i in 1:m
        for j in 1:n
            # Initialize the element to 0
            C[i, j] = 0

            # Loop over the elements in the ith row
            @inbounds for k in 1:k
                # Add the product of the elements to the running sum
                C[i, j] += A[i, k] * B[k, j]
            end
        end
    end
    return C
end

# Create two matrices to multiply
B = [2 0 1; 1 3 2; 0 1 2]

# Calculate the matrix multiplication of A and B
matmul(A, B)