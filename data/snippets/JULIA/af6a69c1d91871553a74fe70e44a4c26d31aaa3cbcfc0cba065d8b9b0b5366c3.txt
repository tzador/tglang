function find_prime(n)
    # This function takes in an integer 'n' and returns the nth prime number.
    # It uses the Sieve of Eratosthenes algorithm to efficiently find primes.
    # The algorithm works by eliminating multiples of previously found primes.
    
    # Create a boolean array of size n, where each element represents whether the number is prime or not
    prime_numbers = [true for i in 1:n]
    
    # Set 0 and 1 to false as they are not primes
    prime_numbers[1] = false
    prime_numbers[2] = false
    
    # Use a for loop to iterate through the numbers in the array
    for i in 2:floor(Int, sqrt(n))
        # If the current number is marked as prime, then eliminate its multiples
        if prime_numbers[i] == true
            # Use a nested loop to eliminate multiples
            for j in i^2:i:i:n
                prime_numbers[j] = false
            end
        end
    end
    
    # Create an empty array to store the prime numbers
    prime_list = []
    
    # Use a for loop to iterate through the boolean array
    for i in 1:n
        # If the current number is marked as prime, then add it to the prime_list array
        if prime_numbers[i] == true
            push!(prime_list, i)
        end
    end
    
    # Return the nth prime number
    return prime_list[n]
end

# Call the function and store the output in a variable
nth_prime = find_prime(30)

# Print the output
print(nth_prime)