# This is a function that calculates the factorial of a number
function factorial(n::Int)
    if n == 0
        return 1
    elseif n < 0
        error("Factorial is not defined for negative numbers.")
    else
        return n * factorial(n-1)
    end
end

# This is a for loop that finds all the prime numbers between 1 and 100
for i in 1:100
    isPrime = true
    for j in 2:i-1
        if i % j == 0
            isPrime = false
            break
        end
    end
    if isPrime
        println(i)
    end
end

# This is a recursive function that calculates the nth Fibonacci number
function fib(n)
    if n == 1 || n == 2
        return 1
    else
        return fib(n-1) + fib(n-2)
    end
end

# This is a dictionary that stores the names and ages of people
people = Dict("John" => 25, "Mary" => 18, "David" => 33)

# This is an example of a polymorphic function that can take in different types of input
function add(x, y)
    return x + y
end

# This is a conditional statement that checks if a number is positive, negative, or zero
if x > 0
    println("The number is positive.")
elseif x < 0
    println("The number is negative.")
else
    println("The number is zero.")
end

# This is an anonymous function that multiplies two numbers and then adds 5
multiply_and_add = (x, y) -> x * y + 5

# This is a while loop that continuously multiplies a number by 2 until it reaches a certain threshold
x = 1
while x < 100
    println(x)
    x *= 2
end

# This is a try-catch block that handles an error and prints an error message
try
    n = "Not a number"
    factorial(n)
catch
    println("Error: Input is not a valid number.")
end

# This is a string interpolation that prints a variable's value within a string
name = "Julia"
println("$name is an amazing programming language.")