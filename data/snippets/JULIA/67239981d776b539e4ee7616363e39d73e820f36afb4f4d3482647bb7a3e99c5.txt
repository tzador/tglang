function gen_sierpinski(n)
    # Function for generating a Sierpinski triangle of size n
    triangle = Array{Char}(undef, n, 2n-1)
    # Create an array of characters for representing the triangle
    for i = 1:n
        for j = 1:2n-1
            # Fill the array with spaces
            triangle[i, j] = ' '
        end
    end
    # Set the initial value of the top of the triangle to be an asterisk
    triangle[n, n] = '*'
    # Use recursion to create the triangle
    draw_sierpinski(triangle, n, n, n)
    # Return the triangle as a string
    join(triangle, "\n")
end

function draw_sierpinski(triangle, x, y, n)
    # Function for drawing the Sierpinski triangle recursively
    if n == 1
        # Base case: when the triangle has a size of 1, just return
        return
    else
        # Draw a smaller triangle in the top middle of the current triangle
        for i = 1:n-1
            for j = 1:n-i
                triangle[x-i, y+j] = '*'
            end
        end
        # Draw the left and right triangles recursively
        draw_sierpinski(triangle, x-n, y-n, n-1)
        draw_sierpinski(triangle, x-n, y+n, n-1)
        # Draw the bottom triangle recursively
        draw_sierpinski(triangle, x+n, y, n-1)
    end
end

# Call the function with a size of 32 and print the result
print(gen_sierpinski(32))