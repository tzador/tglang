# Define function that calculates the factorial of a number
function factorial(n)
    # Create a variable to store the result
    result = 1
    # Use a for loop to multiply all numbers between 2 and n
    for i in 2:n
        result *= i
    end
    # Return the factorial
    return result
end

# Define a recursive function for calculating the nth Fibonacci number
function fibonacci(n)
    # Base case: 0 and 1 are the first two Fibonacci numbers
    if n == 0 || n == 1
        return n
    end
    # Recursive case: calculate the nth Fibonacci number by adding the previous two
    return fibonacci(n-1) + fibonacci(n-2)
end

# Define a function that checks if a number is prime
function is_prime(n)
    # Handle base cases: 0 and 1 are not prime
    if n == 0 || n == 1
        return false
    end
    # Use a for loop to check if any number between 2 and the square root of n is a factor of n
    for i in 2:round(Int, âˆšn)
        if n % i == 0
            return false # If a factor is found, n is not prime
        end
    end
    return true # If no factor is found, n is prime
end

# Define a function that checks if a number is a Palindrome (reads the same forwards and backwards)
function is_palindrome(n)
    # Convert the number to a string
    n_str = string(n)
    # Create a variable to store the reversed string
    rev = ""
    # Use a for loop to go through each character in the original string and add it to the beginning of the reversed string
    for i in 1:length(n_str)
        rev = n_str[i] * rev
    end
    # Check if the reversed string is equal to the original string
    if rev == n_str
        return true # If they are equal, n is a palindrome
    else
        return false # If they are not equal, n is not a palindrome
    end
end

# Define a function that sorts a list of numbers using merge sort algorithm
function merge_sort(list)
    # Base case: if the list has 1 or 0 elements, it is already sorted
    if length(list) < 2
        return list
    end
    # Divide the list into two halves
    mid = round(Int, length(list)/2)
    left = list[1:mid]
    right = list[mid+1:end]
    # Recursively call merge_sort on each half
    left = merge_sort(left)
    right = merge_sort(right)
    # Create a new list to store the merged halves
    merged = []
    # Use a while loop to merge the halves
    while length(left) > 0 && length(right) > 0
        if left[1] < right[1]
            push!(merged, left[1]) # Add the first element of left to the merged list
            left = left[2:end] # Remove the first element of left
        else
            push!(merged, right[1]) # Add the first element of right to the merged list
            right = right[2:end] # Remove the first element of right
        end
    end
    # If there are any remaining elements in left or right, add them to the merged list
    while length(left) > 0
        push!(merged, left[1])
        left = left[2:end]
    end
    while length(right) > 0
        push!(merged, right[1])
        right = right[2:end]
    end
    # Return the sorted list
    return merged
end 

# Define a type for creating a binary tree
struct BinaryTree
    value # Node value
    left::BinaryTree # Left child
    right::BinaryTree # Right child
end

# Define a function for inserting a value into a binary tree
function insert!(root::BinaryTree, value)
    # Check if the root value is empty, if so, insert the value at the root
    if isempty(root.value)
        root.value = value
    else
        # Check if the value is less than the root value, if so, insert it into the left child
        if value < root.value
            # Check if the left child is empty, if so, create a new node with the value
            if isempty(root.left)
                root.left = BinaryTree(value, BinaryTree(), BinaryTree())
            else # If the left child is not empty, recursively call insert on the left node
                insert!(root.left, value)
            end
        # Check if the value is greater than the root value, if so, insert it into the right child
        else
            # Check if the right child is empty, if so, create a new node with the value
            if isempty(root.right)
                root.right = BinaryTree(value, BinaryTree(), BinaryTree())
            else # If the right child is not empty, recursively call insert on the right node
                insert!(root.right, value)
            end
        end
    end
end

# Define a function for traversing a binary tree in order (left, root, right)
function inorder(root::BinaryTree)
    # Check if the root value is empty, if so, return an empty list
    if isempty(root.value)
        return []
    end
    # Traverse the left child
    left = inorder(root.left)
    # Add the root value to the list
    push!(left, root.value)
    # Traverse the right child
    right = inorder(root.right)
    # Concatenate the left and right child lists and return
    return vcat(left, right)
end

# Define a function for calculating the GCD of two numbers using Euclid's algorithm
function gcd(a, b)
    if b == 0 # Base case: if b is 0, then the GCD is a
        return a
    else # Recursive case: calculate the GCD of b and the remainder of a/b using the modulo operator
        return gcd(b, a % b)
    end
end