# Define a function to check if a number is prime
function isprime(n::Int)
    # Check if the number is less than 2 (not prime)
    if n < 2
        # Return false if the number is not prime
        return false
    end

    # Check if the number is 2 or 3 (prime)
    if n == 2 || n == 3
        # Return true if the number is prime
        return true
    end

    # Check if the number is a multiple of 2 or 3 (not prime)
    if n % 2 == 0 || n % 3 == 0
        # Return false if the number is not prime
        return false
    end

    # Initialize the divisor to 5
    divisor = 5

    # Check if the number is a perfect square (not prime)
    if n % divisor^2 == 0
        # Return false if the number is not prime
        return false
    end

    # Initialize the increment to 2
    increment = 2

    # Loop while the square of the divisor is less than or equal to the number
    while divisor^2 <= n
        # Check if the number is a multiple of the divisor (not prime)
        if n % divisor == 0
            # Return false if the number is not prime
            return false
        end

        # Increment the divisor by the increment
        divisor += increment

        # Swap the increment between 2 and 4
        increment = 6 - increment
    end

    # Return true if the number is prime
    return true
end