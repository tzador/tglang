# Create function that generates the Fibonnaci sequence up to a given number
function fibonacci(n::Int64)::Vector{Int64}
    fib = [0, 1] # initialize vector starting with first two numbers in sequence
    while fib[end] < n # continue adding numbers until reaching given number
        push!(fib, fib[end]+fib[end-1]) # push sum of last two numbers onto vector
    end
    return fib # return completed sequence
end

# Call function and store output in variable
fib_seq = fibonacci(100)

# Print results
println("The Fibonnaci sequence up to 100 is:")
println(fib_seq)

# Create function to calculate the average of a given array of numbers
function average(arr::Array{Int64,1})::Float64
    total = 0.0 # initialize total variable
    for num in arr # loop through array and add each number to total
        total += num
    end
    return total/length(arr) # divide total by length to calculate average
end

# Call function with fib_seq array and print result
println("The average of the Fibonnaci sequence up to 100 is:")
println(average(fib_seq))

# Create function to check if a given number is prime
function is_prime(num::Int64)::Bool
    if num < 2 # numbers less than 2 are not prime
        return false
    elseif num == 2 # 2 is a prime number
        return true
    else
        for i in 2:num-1 # loop through numbers 2 to num-1
            if num % i == 0 # if num is divisible by any of these numbers, it is not prime
                return false
            end
        end
        return true # if num is not divisible by any numbers, it is prime
    end
end

# Create function to find all prime numbers up to a given number
function find_primes(n::Int64)::Vector{Int64}
    primes = [2] # initialize vector starting with 2, the first prime number
    for i in 3:n # loop through numbers 3 to n
        if is_prime(i) # if number is prime, push it onto vector
            push!(primes, i)
        end
    end
    return primes # return vector of prime numbers
end

# Call function and store output in variable
prime_nums = find_primes(100)

# Print results
println("The prime numbers up to 100 are:")
println(prime_nums)

# Create function to calculate the factorial of a given number
function factorial(n::Int64)::Int64
    if n == 0 # factorial of 0 is 1
        return 1
    elseif n < 0 # factorial of negative numbers is undefined
        return "Undefined"
    else
        result = 1 # initialize result variable
        for i in 1:n # loop through numbers 1 to n
            result *= i # multiply each number onto result
        end
        return result # return final result
    end
end

# Call function with number 10 and print result
println("The factorial of 10 is:")
println(factorial(10))