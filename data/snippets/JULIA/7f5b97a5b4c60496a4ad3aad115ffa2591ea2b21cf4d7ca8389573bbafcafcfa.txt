function mergeSort!(arr)
    if length(arr) > 1 #check if array is longer than 1 element
        midpoint = length(arr) รท 2 #find midpoint of array
        left = mergeSort!(arr[1:midpoint]) #recurse on left half of array
        right = mergeSort!(arr[midpoint+1:length(arr)]) #recurse on right half of array
        merge!(left, right, arr) #call merge function to merge the two halves
    end
    return arr
end

function merge!(left, right, arr)
    i = 1 #index for left half
    j = 1 #index for right half
    k = 1 #index for merged array
    while i <= length(left) && j <= length(right) #loop through left and right arrays until one is exhausted
        if left[i] <= right[j] #if element in left half is smaller than element in right half
            arr[k] = left[i] #add element from left half to merged array
            i += 1 #increment index for left half
        else
            arr[k] = right[j] #add element from right half to merged array
            j += 1 #increment index for right half
        end
        k += 1 #increment index for merged array
    end
    while i <= length(left) #if elements still remain in left half
        arr[k] = left[i] #add them to the merged array
        i += 1 #increment left index
        k += 1 #increment merged array index
    end
    while j <= length(right) #if elements still remain in right half
        arr[k] = right[j] #add them to the merged array
        j += 1 #increment right index
        k += 1 #increment merged array index
    end
end

#example usage
arr = [5, 2, 7, 1, 4]
mergeSort!(arr)
println(arr) #output: [1, 2, 4, 5, 7]