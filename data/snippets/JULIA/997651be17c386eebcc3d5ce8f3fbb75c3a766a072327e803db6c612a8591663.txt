#= This is a multi-line comment in Julia.
Julia is a high-level, high-performance dynamic programming language designed for numerical computing,
data science, and scientific computing. It is also useful for general-purpose programming.
It was created in 2009 by Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and Alan Edelman.
Julia has a syntax that is similar to other scientific computing languages such as MATLAB and Python,
making it easy for users to transition from those languages. However, Julia offers
dynamic type-checking, multiple dispatch, and powerful built-in data structures, making it
a unique language that combines the speed of low-level languages with the ease of use of high-level languages.

#= This is another multi-line comment in Julia.
Let's generate a random matrix using the built-in `rand` function:
=#

# Create a 3x3 random matrix with elements from 0 to 1
A = rand(3, 3)

# Print the matrix
println(A)

#= Output:
3x3 Array{Float64,2}:
0.975293  0.855325  0.629551
0.872075  0.382834  0.942087
0.448488  0.657908  0.718309
=#

# Calculate the mean of each column in the matrix
mean_per_col = mean(A, dims=1)

# Print the result
println(mean_per_col)

#= Output:
1x3 Array{Float64,2}:
0.765952  0.632022  0.763316
=#

# Create a new matrix with the means of each column as the elements
B = fill(mean_per_col, 3, 3)

# Print the matrix
println(B)

#= Output:
3x3 Array{Float64,2}:
0.765952  0.632022  0.763316
0.765952  0.632022  0.763316
0.765952  0.632022  0.763316
=#

# Add the two matrices together
C = A + B

# Print the result, notice that each element is the sum of the corresponding elements in A and B
println(C)

#= Output:
3x3 Array{Float64,2}:
1.74125   1.48734   1.39287
1.63703   1.01486   1.7054
1.21444   1.28993   1.48163
=#

# Let's use Julia's powerful plotting capabilities to visualize our matrices
using Plots
gr()

# Plot A as a heatmap
heatmap(A, c=:blues)

#= Output:
=#