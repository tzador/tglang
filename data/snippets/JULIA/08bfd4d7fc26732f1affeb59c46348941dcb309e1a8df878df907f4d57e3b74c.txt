function mergeSort(arr)
 # This function implements the merge sort algorithm in Julia.

  if length(arr) ≤ 1 # If the array has only 1 element, it is already sorted.
    return arr
  else
    middle = floor(Int, length(arr)/2) # Calculates the middle index of the array.
    left = mergeSort(arr[1:middle]) # Divides the array into left and right halves.
    right = mergeSort(arr[middle+1:end])
  end
  mergedArr = merge(left, right) # Merges the sorted left and right halves.
  return mergedArr # Returns the sorted merged array.
end

function merge(left, right)
  # This function merges two sorted arrays into a single sorted array.

  merged = Array{Any, 1}(undef, length(left) + length(right))
  i = j = k = 1 # Index variables for left, right and merged arrays.

  while i ≤ length(left) && j ≤ length(right)
    if left[i] ≤ right[j]
      merged[k] = left[i]
      i += 1
    else
      merged[k] = right[j]
      j += 1
    end
    k += 1
  end

  # Append the remaining elements from left and right arrays into merged array.
  while i ≤ length(left)
    merged[k] = left[i]
    i += 1
    k += 1
  end
  while j ≤ length(right)
    merged[k] = right[j]
    j += 1
    k += 1
  end
  return merged # Returns the merged sorted array.
end

# Example usage of mergeSort function.
arr = [5, 7, 1, 9, 3, 2, 6]
sortedArr = mergeSort(arr)
println(sortedArr) # Output: [1, 2, 3, 5, 6, 7, 9]