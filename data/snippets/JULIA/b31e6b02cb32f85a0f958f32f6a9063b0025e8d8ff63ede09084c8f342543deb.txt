# Define a function to calculate the area of a triangle
function area_triangle(base, height)
    return (1/2) * base * height
end

# Define a function to calculate the volume of a cube
function volume_cube(side)
    return side^3
end

# Define a function to check if a number is prime
function is_prime(n)
    # Loop through all numbers from 2 to the square root of n
    for i = 2:sqrt(n)
        # If n is divisible by any number, return false
        if n % i == 0
            return false
        end
    end
    # If no number divides n evenly, return true
    return true
end

# Define a struct to represent a person
struct Person
    name::String # A person's name
    age::Int # A person's age
end

# Create a new instance of Person
person = Person("John", 30)

# Define a function to print out a greeting message
function greet(person)
    println("Hello, my name is ", person.name, " and I am ", person.age, " years old.")
end

# Call the greet function with the person instance
greet(person)

# Create an array of numbers
numbers = [2, 5, 7, 9, 12, 16, 19]

# Use a list comprehension to square each number in the array
squares = [n^2 for n in numbers]

# Print out the squares
println(squares)

# Define a dictionary of fruits and their colors
fruits = Dict("apple" => "red", "banana" => "yellow", "grape" => "purple", "orange" => "orange")

# Use a for loop to print out each fruit and its color
for (fruit, color) in fruits
    println("The ", fruit, " is ", color)
end

# Create a string
string1 = "Hello"
# Create another string
string2 = "World"

# Concatenate the two strings
println(string1 * " " * string2 * "!")

# Define a function with optional parameters
function optional_params(a, b, c=0, d=1)
    return a + b + c + d
end

# Call the function with and without optional parameters
println(optional_params(5, 7)) # Output: 13
println(optional_params(5, 7, 2, 3)) # Output: 17

# Define a recursive factorial function
function factorial(n)
    # Base case
    if n == 0 || n == 1
        return 1
    else
        return n * factorial(n-1)
    end
end

# Calculate the factorial of 6
println(factorial(6)) # Output: 720