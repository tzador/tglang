function fibonacci(n)
    # Function to calculate the nth term in the Fibonacci sequence
    if n < 2 # Check if n is less than 2 
        return n 
    else 
        return (fibonacci(n-1) + fibonacci(n-2)) # Recursive call to calculate nth term using previous two terms
    end
end

function bubble_sort(arr)
    # Function to implement the bubble sort algorithm to sort an array in ascending order
    n = length(arr) # Store the length of the array in a variable
    for i in 1:n # Loop through each element in the array
        for j in i+1:n # Loop through each element after i in the array
            if arr[j] < arr[i] # Check if the current element is less than the next element
                arr[i], arr[j] = arr[j], arr[i] # Swap the elements if they are not in the correct order
            end
        end
    end
    return arr # Return the sorted array
end

function insertion_sort(arr)
    # Function to implement the insertion sort algorithm to sort an array in ascending order
    n = length(arr) # Store the length of the array in a variable
    for i in 1:n # Loop through each element in the array
        j = i # Set j to be equal to i
        while j > 1 && arr[j] < arr[j-1] # Check if j is greater than 1 and the current element is less than the previous element
            arr[j], arr[j-1] = arr[j-1], arr[j] # Swap the elements if they are not in the correct order
            j -= 1 # Decrease j by 1
        end
    end
    return arr # Return the sorted array
end

function merge_sort(arr)
    # Function to implement the merge sort algorithm to sort an array in ascending order
    n = length(arr) # Store the length of the array in a variable
    if n <= 1 # Check if the array only has one element or is empty
        return arr # Return the array
    else
        middle = div(n, 2) # Find the middle index of the array
        left = merge_sort(arr[1:middle]) # Recursively sort the left half of the array
        right = merge_sort(arr[middle+1:n]) # Recursively sort the right half of the array
        sorted = merge(left, right) # Call the merge function to combine the sorted left and right halves
        return sorted # Return the sorted array
    end
end

function merge(left, right)
    # Function to combine two sorted arrays into one sorted array
    result = [] # Create an empty array to store the sorted elements
    while !isempty(left) && !isempty(right) # Loop while both arrays are not empty
        if left[1] <= right[1] # Check if the first element in the left array is less than or equal to the first element in the right array
            push!(result, shift!(left)) # Add the first element of the left array to the result array and remove it from the left array
        else
            push!(result, shift!(right)) # Add the first element of the right array to the result array and remove it from the right array
        end
    end
    if !isempty(left) # If the left array is not empty, add all the remaining elements to the result array
        append!(result, left)
    end
    if !isempty(right) # If the right array is not empty, add all the remaining elements to the result array
        append!(result, right)
    end
    return result # Return the combined and sorted array
end

# Example usage:
# Calculate the 10th term in the Fibonacci sequence
println(fibonacci(10)) # Output: 55

# Sort an array using bubble sort algorithm
arr = [5, 3, 8, 1, 6]
println(bubble_sort(arr)) # Output: [1, 3, 5, 6, 8]

# Sort an array using insertion sort algorithm
arr = [5, 3, 8, 1, 6]
println(insertion_sort(arr)) # Output: [1, 3, 5, 6, 8]

# Sort an array using merge sort algorithm
arr = [5, 3, 8, 1, 6]
println(merge_sort(arr)) # Output: [1, 3, 5, 6, 8]