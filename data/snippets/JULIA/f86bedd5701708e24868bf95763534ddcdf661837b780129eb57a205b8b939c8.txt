# This function calculates the factorial of a given number using recursion

function factorial(n)
    if n <= 1
        return 1
    else
        return n * factorial(n - 1)
    end
end

# This function calculates the sum of the first n natural numbers using recursion

function sum(n)
    if n == 0
        return 0
    else
        return n + sum(n - 1)
    end
end

# This function calculates the nth term in the Fibonacci sequence using recursion

function fibonacci(n)
    if n == 0 || n == 1
        return n
    else
        return fibonacci(n - 1) + fibonacci(n - 2)
    end
end

# This function calculates the nth term in the Lucas sequence using recursion

function lucas(n)
    if n == 0
        return 2
    elseif n == 1
        return 1
    else
        return lucas(n - 1) + lucas(n - 2)
    end
end

# This function finds the maximum value in an array using recursion

function find_max(array)
    if length(array) == 1
        return array[1]
    else
        max = find_max(tail(array))
        if array[1] > max
            return array[1]
        else
            return max
        end
    end
end

# This function sorts an array in ascending order using the selection sort algorithm

function selection_sort(array)
    for i in 1:length(array)-1
        min = i
        for j in i+1:length(array)
            if array[j] < array[min]
                min = j
            end
        end
        temp = array[i]
        array[i] = array[min]
        array[min] = temp
    end
end

# This function reverses a string using recursion

function reverse_string(str)
    if length(str) <= 1
        return str
    else
        return reverse_string(tail(str)) * head(str)
    end
end

# This function calculates the power of a number using recursion

function power(base, exponent)
    if exponent == 0
        return 1
    elseif exponent == 1
        return base
    else
        return base * power(base, exponent - 1)
    end
end

# This function calculates the GCD of two numbers using the Euclidean algorithm

function gcd(a, b)
    if b == 0
        return a
    else
        return gcd(b, a % b)
    end
end

# This function flattens a nested array into a 1-D array using recursion

function flatten(array)
    if isempty(array)
        return []
    elseif typeof(array[1]) == Array
        return [flatten(array[1]); flatten(tail(array))]
    else
        return [array[1]; flatten(tail(array))]
    end
end

# Example usage

arr = [3, 5, 2, 7, 1]
println("Factorial of 5: $(factorial(5))")
println("Sum of first 5 natural numbers: $(sum(5))")
println("8th term in the Fibonacci sequence: $(fibonacci(7))")
println("5th term in the Lucas sequence: $(lucas(4))")
println("Max value in array: $(find_max(arr))")
selection_sort(arr)
println("Sorted array: $arr")
println("Reverse of 'hello': $(reverse_string("hello"))")
println("2 to the power of 5: $(power(2, 5))")
println("GCD of 24 and 36: $(gcd(24, 36))")
println("Flattened array: $(flatten([[1], [2, 3], [[4, 5], 6]]))")