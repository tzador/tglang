# This is a function that calculates the factorial of a given number
function factorial(n)
    if n == 0 || n == 1
        return 1  # Factorial of 0 and 1 is always 1
    else
        result = 1
        for i in 2:n  # Loop starts from 2 to n
            result *= i  # Result is multiplied by each number in the range
        end
        return result  # Return the final result
    end
end

# This is a function that calculates the nth element in the Fibonacci sequence
function fibonacci(n)
    if n == 0 || n == 1
        return n  # The first two elements of the sequence are 0 and 1
    else
        return fibonacci(n-1) + fibonacci(n-2)  # Recursive call for the sum of previous two elements
    end
end

# This is a function that calculates the area of a circle given the radius
function area_circle(radius)
    return π * radius^2  # The area is calculated using the formula πr^2
end

# This is a function that checks if a given number is prime or not
function is_prime(num)
    if num <= 1
        return false # Numbers below 2 are not prime
    elseif num == 2
        return true # 2 is always prime
    elseif num % 2 == 0
        return false # Any even number above 2 is not prime
    else
        for i in 3:2:num-1  # Loop starts from 3 and checks odd numbers up to the given number
            if num % i == 0
                return false # If any number divides without a remainder, it is not prime
            end
        end
        return true # If none of the above conditions are met, the number is prime
    end
end

# This is a function that calculates the square root of a given number using the Babylonian method
function square_root(n)
    # Initial guess for the square root
    x0 = n / 2
    # Perform iterations until desired accuracy is achieved
    while true
        # Estimate using the Babylonian formula: x(n+1) = (1/2)*(x(n) + (n/x(n)))
        x1 = 0.5 * (x0 + (n/x0))
        # Check if difference between two estimates is within desired accuracy (0.0001 in this case)
        if abs(x1 - x0) < 0.0001
            break # If accuracy is achieved, break out of loop
        end
        x0 = x1 # Update the estimate for the next iteration
    end
    return x0 # Return the final estimate
end

# This is a function that calculates the mean and standard deviation of an array of numbers
function mean_and_std(arr)
    # Initialize variables
    sum = 0
    sum_sq = 0
    # Loop through the array and calculate sum and sum of squares
    for i in arr
        sum += i
        sum_sq += i^2
    end
    # Calculate mean
    mean = sum / length(arr)
    # Calculate standard deviation using the formula sqrt((sum of squares)/n - mean^2)
    std = sqrt((sum_sq/length(arr)) - mean^2)
    return mean, std # Return the mean and standard deviation as a tuple
end