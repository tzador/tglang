# Create a function that computes the nth root of a number
# Inputs:
#     number (float64): the number to find the root of
#     n (int64): the root to find
# Output:
#     x (float64): the nth root of the given number
function nth_root(number, n)
    # Initialize variables
    x = 1             # Initial guess for root
    epsilon = 0.0001  # Tolerance for convergence
    iter = 0          # Number of iterations
    
    # Loop until convergence or maximum number of iterations is reached
    while abs(number - x^n) > epsilon && iter < 1000
        # Use Newton's method to update x
        x = x - (x^n - number) / (n * x^(n - 1))
        iter += 1
    end
    
    # Return x
    return x
end

# Test the function
nth_root(8, 3)   # Output should be 2
nth_root(27, 3)  # Output should be 3
nth_root(125, 3) # Output should be 5