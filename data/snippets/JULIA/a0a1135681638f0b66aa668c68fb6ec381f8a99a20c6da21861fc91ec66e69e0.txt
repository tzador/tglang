# Define a matrix with random values
A = rand(3,3)

# Define a vector with values from 1 to 10
b = collect(1:10)

# Calculate the transpose of A
A_transpose = transpose(A)

# Calculate the inverse of A
A_inverse = inv(A)

# Calculate the dot product of A and b
A_dot_b = A * b

# Define an anonymous function to calculate the square root of a number
sqrt_func = (x) -> sqrt(x)

# Use broadcasting to apply the function to each element of A
A_sqrt = sqrt_func.(A)

# Create a conditional statement to check if A is symmetric
if isequal(A_transpose, A)
    println("A is symmetric")
else
    println("A is not symmetric")
end

# Create a for loop to print the elements in b
for i = 1:length(b)
    println(b[i])
end

# Create a list comprehension to collect the elements in A that are greater than 0.5
A_greater_than_half = [A[i,j] for i = 1:size(A,1), j = 1:size(A,2) if A[i,j] > 0.5]

# Define a struct to represent a person's name, age, and gender
struct Person
    name::String
    age::Int
    gender::String
end

# Create an instance of the Person struct
john = Person("John", 25, "Male") 

# Define a function to calculate the sum of all elements in a matrix
function sum_matrix(M)
    total = 0
    for i = 1:size(M,1)
        for j = 1:size(M,2)
            total += M[i,j]
        end
    end
    return total
end

# Use the function to calculate the sum of A
A_sum = sum_matrix(A)

# Create a dictionary to store information about different cities in the world
cities = Dict("London" => "UK", "New York" => "USA", "Tokyo" => "Japan")

# Add a new key-value pair to the dictionary
cities["Paris"] = "France" 

# Print all the keys in the dictionary
println(keys(cities))

# Define a mutable struct to represent a bank account with a balance
mutable struct BankAccount
    balance::Float64
end

# Create an instance of the BankAccount struct
account = BankAccount(100.50)

# Define a function to deposit money into the account
function deposit(account, amount)
    account.balance += amount
end

# Deposit $50 into the account
deposit(account, 50.00)

# Print the updated balance
println("New balance: ", account.balance)