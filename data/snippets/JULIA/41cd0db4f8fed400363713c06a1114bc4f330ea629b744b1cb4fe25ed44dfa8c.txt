function divide_conquer(input)
    if length(input) == 1
        return input # base case, return single element
    else
        midpoint = round(Int64, length(input)/2) # find midpoint of input array
        left = divide_conquer(input[1:midpoint]) # recursively divide left half of input
        right = divide_conquer(input[midpoint+1:end]) # recursively divide right half of input
        sorted = merge(left, right) # merge sorted left and right halves
        return sorted
    end
end

function merge(left, right)
    result = [] # initialize empty array to store sorted elements
    while length(left) > 0 && length(right) > 0
        if left[1] <= right[1]
            push!(result, left[1]) # add first element of left array to result
            left = left[2:end] # remove first element from left array
        else
            push!(result, right[1]) # add first element of right array to result
            right = right[2:end] # remove first element from right array
        end
    end
    while length(left) > 0
        push!(result, left[1]) # add remaining elements of left array to result
        left = left[2:end] # remove first element from left array
    end
    while length(right) > 0
        push!(result, right[1]) # add remaining elements of right array to result
        right = right[2:end] # remove first element from right array
    end
    return result # return sorted array
end

input = [10, 7, 2, 5, 9, 4, 1, 3, 8, 6] # sample input array
output = divide_conquer(input)
println(output) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]