"""
This function performs a matrix multiplication using the Strassen's algorithm.
Input:
- A: an n x n matrix
- B: an n x n matrix
Output:
- C: the resulting n x n matrix
Algorithm complexity: O(n^2.81)
"""

function strassen(A::Array{T}, B::Array{T}) where {T}
    n = size(A, 1) # determine size of matrices
    p = Int(floor(n / 2)) # half the size of the matrices

    if n <= 128 # base case, use standard matrix multiplication
        return A * B
    end

    # partition matrices into submatrices
    A11 = A[1:p, 1:p]
    A12 = A[1:p, p+1:n]
    A21 = A[p+1:n, 1:p]
    A22 = A[p+1:n, p+1:n]

    B11 = B[1:p, 1:p]
    B12 = B[1:p, p+1:n]
    B21 = B[p+1:n, 1:p]
    B22 = B[p+1:n, p+1:n]

    # perform necessary computations
    S1 = B12 - B22
    S2 = A11 + A12
    S3 = A21 + A22
    S4 = B21 - B11
    S5 = A11 + A22
    S6 = B11 + B22
    S7 = A12 - A22
    S8 = B21 + B22

    P1 = strassen(A11, S1) # recursive call for each submatrix
    P2 = strassen(S2, B22)
    P3 = strassen(S3, B11)
    P4 = strassen(A22, S4)
    P5 = strassen(S5, S6)
    P6 = strassen(S7, S8)
    P7 = strassen(S5, S4)

    # use results to construct the resulting matrix
    C11 = P5 + P4 - P2 + P6
    C12 = P1 + P2
    C21 = P3 + P4
    C22 = P5 + P1 - P3 - P7

    # return the resulting matrix
    return [C11 C12; C21 C22]
end

# example usage
A = [1 2; 3 4]
B = [5 6; 7 8]
C = strassen(A, B)