# Define function koch_curve that takes in an n (integer) parameter
function koch_curve(n::Int64)
    # Define list of points for initial triangle 
    points = [[0,0], [1,0], [0.5, (sqrt(3)/2)]]
    # Define empty list to store points of Koch curve
    koch_points = []
    # Define recursive function inner_koch that takes in current points and n value
    function inner_koch(p::Array{Float64, 2}, n::Int64)
        # If n is 0, return current point
        if n == 0
            return p
        else
            # Define empty array to store new points
            new_points = []
            # Loop through each segment of triangle
            for i = 1:size(p, 1)-1
                # Calculate distance between current points 
                dist = p[i+1, 1] - p[i, 1]
                # Calculate angle between current points
                angle = atan(p[i+1, 2] - p[i, 2], dist)
                # Calculate length of each segment of new triangle
                seg_len = sqrt(dist^2 + (sqrt(3)/2)^2)
                # Calculate midpoint of each segment
                mid = [p[i, 1] + (dist/3), p[i, 2] + ((dist/3)*tan(angle))]
                # Calculate point where new equilateral triangle meets
                temp = [mid[1] + (seg_len/2)*cos(angle + (pi/3)), mid[2] + (seg_len/2)*sin(angle + (pi/3))]
                # Add new points to array
                append!(new_points, [[p[i, 1], p[i, 2]], mid, temp, [p[i+1, 1], p[i+1, 2]]])
            end
            # Update points with new_points
            points = new_points
            # Recursive call with n-1
            inner_koch(points, n-1)
        end
    end
    # Call inner_koch function with initial points and n value
    koch_points = inner_koch(points, n)
    # Return final set of points
    return koch_points
end

# Call function with n value of 3
koch_curve(3)