# Define a function that takes in an integer and returns its factorial.
function factorial(n::Integer)
    if n == 0 # Check if input is 0
        return 1 # If so, return 1
    else # If input is not 0
        factorial(n-1)*n # Calculate factorial by multiplying input with factorial of one less than input
    end
end

# Define a function that copies elements from one array to another, with a specified number of copies.
function copyArray(arr::Array, numCopies::Integer)
    newArr = [] # Create an empty array to store copies
    for i = 1:numCopies # Loop through specified number of copies
        for element in arr # Loop through elements in original array
            push!(newArr, element) # Copy element and append it to new array
        end
    end
    return newArr # Return new array containing copies
end

# Define a struct for a complex number with real and imaginary parts.
struct Complex{T<:Real}
    re::T # Real part
    im::T # Imaginary part
end

# Overload the multiplication operator for complex numbers.
function *(c1::Complex, c2::Complex)
    Complex(c1.re*c2.re - c1.im*c2.im, c1.re*c2.im + c1.im*c2.re) # Multiply complex numbers using FOIL method
end

# Create a random complex number
randComplex = Complex(rand(), rand())

# Calculate the square of the complex number
randComplex^2 # Output: Complex(0.4711465959793951, 0.20178685590325552)