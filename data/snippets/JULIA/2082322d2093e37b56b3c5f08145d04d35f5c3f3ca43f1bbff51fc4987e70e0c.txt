# Create a function that finds the length of the longest subarray with a given sum
function longest_subarray_sum(arr, sum)
    # Initialize variables to store the start index of the longest subarray and its length
    start_index = 0
    max_length = 0
    
    # Create a dictionary to store the sum and its corresponding index
    sum_dict = Dict(0 => 0)
    
    # Initialize a variable to store the current sum and a loop to iterate through the array
    current_sum = 0
    for i in 1:length(arr)
        # Update the current sum by adding the current element of the array
        current_sum += arr[i]
        
        # Check if the current sum minus the target sum is present in the dictionary
        # If present, it means there is a subarray with the target sum ending at the current index
        if (current_sum - sum) in keys(sum_dict)
            # If the length of this subarray is longer than the previously stored longest subarray
            # Update the start index and the max length variables
            if i - sum_dict[current_sum - sum] > max_length
                start_index = sum_dict[current_sum - sum] + 1
                max_length = i - sum_dict[current_sum - sum]
            end
        end
        
        # If the current sum is already present in the dictionary, update its index
        # Otherwise, add the current sum and its index to the dictionary
        if current_sum in keys(sum_dict)
            sum_dict[current_sum] = i
        else
            sum_dict[current_sum] = i + 1
        end
    end
    
    # Return the subarray with the longest length
    return arr[start_index:start_index+max_length-1]
end

# Example: using the function with an array and target sum values
arr = [1, -2, 6, -3, 5]
target_sum = 4
longest_subarray_sum(arr, target_sum) # Output: [6, -3, 5]