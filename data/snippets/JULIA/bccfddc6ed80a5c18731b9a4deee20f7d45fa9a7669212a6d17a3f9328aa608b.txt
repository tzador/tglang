# define a function that uses multiple dispatch
function findVolume(x::Int64, y::Int64, z::Int64)
    return x * y * z
end

function findVolume(x::Real, y::Real, z::Real)
    return x * y * z * 0.5
end

# define a type
struct Shape
    color::String
    shape::String
end

# define a custom method for the findVolume function for the Shape type
function findVolume(shape::Shape, length::Real)
    if shape.shape == "cube"
        return length^3
    elseif shape.shape == "sphere"
        return (4 / 3) * π * (length/2)^3
    elseif shape.shape == "cylinder"
        return π * shape.length * shape.radius^2
    end
end

# create an instance of the Shape struct
cube = Shape("red", "cube")

# call the findVolume function with the cube instance and a length of 5
findVolume(cube, 5)  # output: 125

# create another instance of Shape
cyl = Shape("blue", "cylinder", length=10, radius=2)

# call the findVolume function with the cylinder instance
findVolume(cyl)  # output: 125.663706