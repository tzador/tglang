# Define a function that calculates the nth term in the Fibonacci sequence
# using memoization for improved efficiency
function fib(n)
    # Create a dictionary to store already calculated values
    fib_dict = Dict{Int,Int}()
    # Base case: first two numbers in the sequence are 0 and 1
    fib_dict[0] = 0
    fib_dict[1] = 1
    # Recursive case: check if the nth term has already been calculated and return it
    # Otherwise, calculate the nth term and add it to the dictionary
    if haskey(fib_dict, n)
        return fib_dict[n]
    else
        fib_dict[n] = fib(n-1) + fib(n-2)
        return fib_dict[n]
    end
end

# Test the function on the first 10 terms
for n in 0:9
    println(fib(n))
end