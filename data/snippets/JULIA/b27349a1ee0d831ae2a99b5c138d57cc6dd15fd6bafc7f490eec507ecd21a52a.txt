function mergeSort(arr)  # function definition for merge sort algorithm
    if length(arr) > 1  # checks if array has more than one element
        middle = length(arr) รท 2  # calculates middle index of array
        # recursively calls mergeSort function for left and right subarrays
        left = mergeSort(arr[1:middle])  
        right = mergeSort(arr[middle+1:end])
        
        i = 1  # keeps track of elements in left subarray
        j = 1  # keeps track of elements in right subarray
        k = 1  # keeps track of elements in original array 
        
        # while there are still elements in both arrays
        while i <= length(left) && j <= length(right)
            if left[i] <= right[j]  # if element in left array is smaller
                arr[k] = left[i]  # overwrite element in original array
                i += 1  # increase index for left subarray
            else  # if element in right array is smaller
                arr[k] = right[j]  # overwrite element in original array
                j += 1  # increase index for right subarray
            end
            k += 1  # increase index for original array
        end
        
        # if there are still elements remaining in left subarray, add them to original array
        while i <= length(left)
            arr[k] = left[i]
            i += 1
            k += 1
        end
        
        # if there are still elements remaining in right subarray, add them to original array
        while j <= length(right)
            arr[k] = right[j]
            j += 1
            k += 1
        end
    end
    return arr  # return sorted array
end

# example usage
A = [7, 2, 5, 3, 9, 1]
sorted = mergeSort(A)
println(sorted)