module MyModule

using Pkg

struct Point{T} # define a struct `Point` with parameter `T`
    x::T # field `x` of type `T`
    y::T # field `y` of type `T`
end

function compute_distance(p1::Point, p2::Point)
    distance = sqrt((p2.x - p1.x)^2 + (p2.y - p1.y)^2) # compute distance using `sqrt` and `^` functions
    return distance # return the distance
end

function interpolate(x::AbstractVector{T}, y::AbstractVector{T}, p::T) where T # define a function `interpolate` with type parameter `T`
    interpolated = zero(T) # initialize `interpolated` with zero of type `T`
    for i in 1:length(x) # iterate through indices of `x`
        chunk = y[i] # set the chunk value to `y` at index `i`
        for j in 1:length(x) # another for loop for indices of `x`
            if j == i continue end # continue if `j` equals `i`
            chunk = chunk * (p - x[j])/(x[i] - x[j]) # update chunk value based on `x` and `p`
        end
        interpolated += chunk # update `interpolated` by adding `chunk`
    end
    return interpolated # return `interpolated`
end

Pkg.instantiate() # instantiate the package

end # end of `MyModule` module