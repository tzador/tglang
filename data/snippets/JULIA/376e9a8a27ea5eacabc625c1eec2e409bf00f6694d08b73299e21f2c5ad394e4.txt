# Define function to calculate fibonacci sequence
function fib(n)
    # Base case
    if n == 1 || n == 2
        return 1
    else
        # Recursive call to calculate fibonacci sequence
        return fib(n-1) + fib(n-2)
    end
end

# Define dictionary to store previously calculated fibonacci numbers
fib_dict = Dict(1 => 1, 2 => 1)

# Define function to calculate fibonacci sequence using memoization
function fib_memo(n)
    # Check if fibonacci number has already been calculated
    if haskey(fib_dict, n)
        return fib_dict[n]
    else
        # If number not previously calculated, use recursion to calculate and store in dictionary
        fib_dict[n] = fib_memo(n-1) + fib_memo(n-2)
        return fib_dict[n]
    end
end

# Print first 20 fibonacci numbers using the memoized function
for i in 1:20
    println("Fibonacci number ", i, ": ", fib_memo(i))
end