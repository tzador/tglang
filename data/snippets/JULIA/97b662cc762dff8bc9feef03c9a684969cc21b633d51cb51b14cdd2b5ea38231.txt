# Define a function to display a julia set
function julia(c)
    # Define a function to determine julia set when given a complex number c
    function julia_set(z)
        # Set the initial value of z to be 0
        n = 0

        # Set a maximum number of iterations to avoid infinite loop
        max_iterations = 1000

        # Iterate while the absolute value of z is less than 2 and the maximum number of iterations has not been reached
        while abs(z) < 2 && n < max_iterations
            # Update the value of z using the julia set formula
            z = z^2 + c

            # Increment n by 1
            n += 1
        end

        # Return n, the number of iterations it took to escape the julia set or reach the maximum number of iterations
        return n
    end

    # Define the grid of points on the complex plane to plot the julia set
    x_range = -2:0.01:2
    y_range = -2:0.01:2

    # Create an array to store the number of iterations it took for each point to escape the julia set
    julia_array = Array{Int64,2}(undef,length(y_range),length(x_range))

    # Loop through each point on the complex plane
    for i in 1:length(x_range)
        for j in 1:length(y_range)

            # Get the coordinate of the point as a complex number
            z = x_range[i] + y_range[j]*im

            # Calculate the julia set for that point and store it in the array
            julia_array[j,i] = julia_set(z)
        end
    end

    # Plot the julia set using PyPlot
    using PyPlot
    fig = figure(figsize=(10,10))
    imshow(julia_array, extent=[-2,2,-2,2], cmap="viridis")
    show()
end

# Call the function with a complex number c = -0.8 + 0.156im
julia(-0.8 + 0.156im)