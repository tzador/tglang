# Define a function that checks if a number is prime
function is_prime(num)
    if num < 2
        return false # Numbers less than 2 are not prime
    end
    
    # Loop from 2 to the square root of the number
    for i in 2:sqrt(num)
        if num % i == 0 # If the number is divisible by any number in the range, it's not prime
            return false
        end
    end
    
    # If none of the above is true, the number is prime
    return true
end

# Define a function that finds all prime numbers in a given range and returns an array
function find_primes(start::Int64, stop::Int64)
    primes = [] # Initialize an empty array to store prime numbers
    
    # Loop through the range of numbers
    for i in start:stop
        if is_prime(i) # Check if the number is prime
            push!(primes, i) # Add the prime number to the array
        end
    end
    
    return primes # Return the array of prime numbers
end

# Call the function to find all prime numbers between 1 and 100
find_primes(1, 100) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]