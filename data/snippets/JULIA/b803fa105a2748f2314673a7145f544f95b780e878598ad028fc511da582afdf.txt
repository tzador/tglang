using JuMP, Gurobi
# JuMP is a modeling language for mathematical optimization problems
# Gurobi is an optimization solver 

# Definition of the model
model = Model(solver=GurobiSolver())

# Variables
@variable(model, x[1:10,1:20] >= -5)
@variable(model, y[1:30,1:40] <= 5)

# Constraints
@constraint(model, sum(x[:,j]) >= 1 for j = 1:20)
@constraint(model, sum(y[:,i]) <= 2 for i = 1:30)
@constraint(model, x[j,k] + y[i,k] <= 1 for j = 1:10, i = 1:30, k = 1:20)

# Objective function
@objective(model, Max, sum(x[i,j] + y[i,j] for i = 1:10, j = 1:20))

# Solve the model
status = solve(model)

# Retrieve the optimal solution
x_opt = getvalue(x)
y_opt = getvalue(y)

# Print the optimal solution
println("Optimal solution for x: ", x_opt)
println("Optimal solution for y: ", y_opt)
:ok