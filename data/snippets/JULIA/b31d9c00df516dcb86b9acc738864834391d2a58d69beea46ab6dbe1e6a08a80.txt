function generate_complex(x::Float64, y::Float64)
    # This function takes in two float64 numbers and returns a complex number.
    
    return complex(x, y) # Creates a complex number with x as the real part and y as the imaginary part.
end

function calculate_magnitude(c::Complex{Float64})
    # This function takes in a complex number and calculates its magnitude.
    
    return sqrt(real(c)^2 + imag(c)^2) # Uses the Pythagorean theorem to calculate the magnitude of the complex number.
end

function nth_fibonacci(n::Int64)
    # This function calculates the nth Fibonacci number using recursion.
    
    if n == 1 || n == 2 # Base case: the first and second Fibonacci numbers are 1. 
        return 1
    else
        return nth_fibonacci(n-1) + nth_fibonacci(n-2) # Recursive step: adds the previous two Fibonacci numbers.
    end
end

function bubble_sort(list::Array)
    # This function takes in a list and sorts it using the bubble sort algorithm.
    
    for i in 1:length(list)-1 # Loop through the list from first element to second-to-last element.
        for j in 1:length(list)-i # Loop through the unsorted elements in the list.
            if list[j] > list[j+1] # If the current element is larger than the next element, swap them.
                list[j], list[j+1] = list[j+1], list[j]
            end
        end
    end
    
    return list # Returns the sorted list.
end

# Example usage:
x = 3.5
y = 2.9
c = generate_complex(x, y)
mag = calculate_magnitude(c)
println("The magnitude of $c is $mag")
println("The 10th Fibonacci number is $(nth_fibonacci(10))")
list = [5, 2, 7, 9, 3, 1, 6]
println("Unsorted list: $list")
sorted_list = bubble_sort(list)
println("Sorted list: $sorted_list")