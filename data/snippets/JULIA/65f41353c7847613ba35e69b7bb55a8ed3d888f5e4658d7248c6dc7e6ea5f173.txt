function mergeSort!(arr::Array{T,1}) where {T <: Real}
    if length(arr) <= 1
        return arr
    end
    mid = length(arr) รท 2
    left = mergeSort!(arr[1:mid])
    right = mergeSort!(arr[mid+1:end])
    merge!(left, right, arr)
end

function merge!(left::Array{T,1}, right::Array{T,1}, sorted::Array{T,1}) where {T <: Real}
    l, r, s = 1, 1, 1
    while l <= length(left) && r <= length(right)
        if left[l] <= right[r]
            sorted[s] = left[l]
            l += 1
        else
            sorted[s] = right[r]
            r += 1
        end
        s += 1
    end
    while l <= length(left)
        sorted[s] = left[l]
        l += 1
        s += 1
    end
    while r <= length(right)
        sorted[s] = right[r]
        r += 1
        s += 1
    end
end

arr = [10.2, 3.5, -8.9, 5.1, 0.6, 12.4]

mergeSort!(arr)

println(arr)