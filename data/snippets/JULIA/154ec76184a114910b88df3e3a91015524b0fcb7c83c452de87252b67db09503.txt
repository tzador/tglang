struct Node{T}
    value::T
    next::Node{T}
end

function reverse_list(node::Node{T}) where{T}
    prev::Node{T} = nothing  # initialize a variable to store previous node
    current::Node{T} = node  # start at the given node
    
    while(current !== nothing) # loop until reaching the end of the list
        next_node::Node{T} = current.next  # store the next node to traverse
        
        current.next = prev  # reassign the 'next' property to point to the previous node
        
        prev = current  # update the 'prev' variable to the current node
        current = next_node  # update the 'current' variable to the next node
    end
    
    return prev  # the last node will be the new head of the reversed list
end

# Example usage
# Create a list with 5 nodes
node5 = Node{Int64}(5, nothing)
node4 = Node{Int64}(4, node5)
node3 = Node{Int64}(3, node4)
node2 = Node{Int64}(2, node3) 
node1 = Node{Int64}(1, node2)

# Print the original list
println("Original list: ")
current = node1
while(current !== nothing)
    println(current.value)
    current = current.next
end

# Reverse the list and print the new head value
new_head = reverse_list(node1)
println("Reversed list head value: ")
println(new_head.value)