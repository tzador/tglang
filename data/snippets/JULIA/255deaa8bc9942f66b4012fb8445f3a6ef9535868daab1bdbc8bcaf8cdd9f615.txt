"""
A function that implements the Jacobi method for solving linear systems of equations.
Inputs:
- A (Matrix): the coefficient matrix
- b (Vector): the right-hand side vector
- x0 (Vector): the initial guess for the solution
- ε (Float64): the tolerance for the error
- max_iter (Int64): the maximum number of iterations
Returns:
- x (Vector): the solution vector
- iterations (Int64): the number of iterations required to reach the solution
"""

function jacobi_method(A::Matrix, b::Vector, x0::Vector, ε::Float64, max_iter::Int64)
    # initialize variables
    x = copy(x0)
    n = length(b)
    iterations = 0

    # main loop
    while norm(A * x - b) > ε && iterations < max_iter
        x_new = zeros(n)
        for i in 1:n
            x_new[i] = (b[i] - dot(A[i, 1:i-1], x[1:i-1]) - dot(A[i, i+1:n], x[i+1:n])) / A[i, i]
        end
        x = x_new
        iterations += 1
    end

    # print error message if maximum number of iterations is reached
    if iterations == max_iter
        println("Maximum number of iterations reached before desired tolerance was achieved.")
    end

    return x, iterations
end