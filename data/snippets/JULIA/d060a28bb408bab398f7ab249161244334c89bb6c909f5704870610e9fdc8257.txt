# Import required libraries
using DataFrames
using JuMP
using GLPK
using LinearAlgebra

# Define optimization problem
model = Model(with_optimizer(GLPK.Optimizer))

# Define decision variables
@variables(model, begin
    x[1:5] >= 0
    0 <= y <= 10
end)

# Define constraints
@constraints(model, begin
    3x[1] + 2x[2] + x[3] + 4x[4] + 5 x[5] <= 10
    y >= x[1] + x[2]
    2y >= x[4] - x[5]
end)

# Define objective function
@objective(model, Max, 3x[1] + 2x[2] + x[3] - 5x[4] + y)

# Solve the optimization problem
status = optimize!(model)

# Check if problem was successfully solved
if termination_status(model) == MOI.OPTIMAL
    println("Problem successfully solved.")
else
    println("Problem unsolved.")
end

# Print the optimal values
println("Optimal x values: ", value.(x))
println("Optimal y value: ", value(y))