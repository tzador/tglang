# Define a function called 'quicksort' which takes in an array
function quicksort(array)

    # Check if the array has more than one element
    if length(array) > 1
        
        # Initialize a pivot value as the last element of the array
        pivot = array[end]
        
        # Create an empty array for the left partition
        left = []
        
        # Create an empty array for the right partition
        right = []
        
        # Loop through all elements in the array except for the pivot
        for i in 1:(length(array) - 1)
            
            # Check if the current element is less than or equal to the pivot
            if array[i] <= pivot
                
                # Append the current element to the left partition
                push!(left, array[i])
                
            # If the current element is greater than the pivot
            else
                
                # Append the current element to the right partition
                push!(right, array[i])
            end
        end
        
        # Recursively call 'quicksort' on the left partition
        left = quicksort(left)
        
        # Recursively call 'quicksort' on the right partition
        right = quicksort(right)
        
        # Concatenate the left partition, pivot, and right partition
        return [quick(left), pivot, quick(right)]
        
    # If the array has one or fewer elements, return the array
    else
        return array
    end
end

# Call the quicksort function on an example array
quicksort([5, 2, 7, 1, 9, 3, 6])