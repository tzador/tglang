# Define a function that calculates the factorial of a number
function factorial(n)
    if n == 0
        return 1 # Return 1 for the factorial of 0
    else
        return n * factorial(n-1) # Use recursion to calculate factorial
    end
end

# Define a function that calculates the nth number in the Fibonacci sequence
function fibonacci(n)
    if n < 2
        return n # Return value for first and second number in Fibonacci sequence
    else
        return fibonacci(n-1) + fibonacci(n-2) # Use recursion to calculate the nth number in Fibonacci sequence
    end
end

# Define a function that checks if a number is prime
function is_prime(n)
    if n < 2
        return false # 1 and negative numbers are not prime
    end
    
    for i in 2:Int64(sqrt(n)) # Only need to check numbers up to the square root of n
        if n % i == 0
            return false # If n is evenly divisible by i, then it is not prime
        end
    end
    
    return true # If n is not evenly divisible by any number up to its square root, then it is prime
end

# Create an array of numbers from 1 to 10
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Use list comprehension to filter out prime numbers from the array
prime_numbers = [x for x in numbers if is_prime(x)]

# Print the factorial, Fibonacci number, and whether it is prime for each number in the prime numbers array
for prime in prime_numbers
    println("The factorial of $prime is ", factorial(prime))
    println("The $prime number in the Fibonacci sequence is ", fibonacci(prime))
    println("$prime is prime: ", is_prime(prime))
end