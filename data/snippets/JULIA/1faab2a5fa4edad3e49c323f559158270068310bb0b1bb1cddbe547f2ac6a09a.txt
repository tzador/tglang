"""
This function implements the Newton's method for finding the root of a function.
Inputs:
    f: function for which root needs to be found
    f_prime: derivative of the function
    x_0: initial guess
    tolerance: tolerance level for convergence
    max_iterations: maximum number of iterations allowed

Outputs:
    x: root of the function
    i: number of iterations taken to reach root
"""

function newton_method(f, f_prime, x_0, tolerance, max_iterations)
    # initialize x to initial guess
    x = x_0

    # iterate max_iterations times or until convergence
    for i in 1:max_iterations
        x_prev = x # save previous value for tolerance check
        x = x - f(x) / f_prime(x) # update x using Newton's formula

        # check for convergence
        if abs(x - x_prev) < tolerance
            return x, i # return root and number of iterations
        end
    end

    # if max_iterations reached without convergence, return error
    throw(error("Maximum number of iterations reached without convergence. Try a different initial guess."))
end

# example usage
f(x) = cos(x) - x # function for which root needs to be found
f_prime(x) = -sin(x) - 1 # derivative of the function
x_0 = 0.5 # initial guess
tolerance = 1e-6 # tolerance level for convergence
max_iterations = 100 # maximum number of iterations allowed

# call the function and assign returned values to variables x and i
x, i = newton_method(f, f_prime, x_0, tolerance, max_iterations)

# print results
println("The root of the function is x = ", x)
println("Number of iterations taken: ", i)