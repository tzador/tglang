# Define a function that calculates the factorial of a number
function factorial(n)
    # Initialize the result variable
    result = 1
    # Loop through numbers from 1 to n
    for i in 1:n
        # Multiply the result by the current number
        result *= i
    end
    # Return the result
    return result
    # End of function
end

# Print the factorial of 10
println(factorial(10))

# Define a function that calculates the sum of an array
function sum_arr(arr)
    # Initialize the sum variable
    sum = 0
    # Loop through each element in the array
    for i in arr
        # Add the current element to the sum
        sum += i
    end
    # Return the sum
    return sum
    # End of function
end

# Create an array of numbers
arr = [1, 2, 3, 4, 5]

# Print the sum of the array
println(sum_arr(arr))

# Define a function that checks if a number is prime
function is_prime(n)
    # Check for edge cases
    if n == 1
        return false
    elseif n == 2
        return true
    end
    # Loop through numbers from 2 to the square root of n
    for i in 2:floor(sqrt(n))
        # Check if the number is divisible by i
        if n % i == 0
            return false
        end
    end
    # If not divisible by any number, return true
    return true
    # End of function
end

# Generate an array of prime numbers up to 100
prime_arr = [i for i in 1:100 if is_prime(i)]

# Print the array of primes
println(prime_arr)

# Define a struct for a person
struct Person
    # Variables for name, age, and profession
    name::String
    age::Int64
    profession::String
    
    # Constructor function
    Person(name, age, profession) = new(name, age, profession)
end

# Create an instance of a person
person = Person("John", 25, "Engineer")

# Print the person's information
println("Name:", person.name, " Age:", person.age, " Profession:", person.profession)

# Define a function that checks if a string is a palindrome
function is_palindrome(str)
    # Remove spaces and make lowercase
    str = replace(str, " ", "")
    str = lowercase(str)
    # Create a reversed string
    rev_str = reverse(str)
    # Check if the original string and the reversed string are equal
    if str == rev_str
        return true
    else
        return false
    end
    # End of function
end

# Check if a string is a palindrome
println(is_palindrome("racecar"))
println(is_palindrome("Julia"))