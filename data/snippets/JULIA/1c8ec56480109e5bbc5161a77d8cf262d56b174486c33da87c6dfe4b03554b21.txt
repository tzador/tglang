function merge_sort(A::Array)
    # Recursive function to split and merge the array
    length_A = length(A)
    if length_A <= 1
        return A
    end

    # We get the middle index
    middle_index = div(length_A, 2)

    # We split the array in two parts
    left_part = A[1:middle_index]
    right_part = A[middle_index + 1:end]

    # We recursively sort each part
    left_part_sorted = merge_sort(left_part)
    right_part_sorted = merge_sort(right_part)

    # We merge the two sorted parts
    return merge(left_part_sorted, right_part_sorted)
end

function merge(left::Array, right::Array)
    # Function to merge two sorted arrays
    result = []

    # Keep track of both arrays' indices
    l_index = 1
    r_index = 1

    # While both arrays still have elements
    while length(left) >= l_index && length(right) >= r_index
        # Compare the current elements of both arrays
        if left[l_index] < right[r_index]
            push!(result, left[l_index])
            # Increase index of left array to compare next element
            l_index += 1
        else
            push!(result, right[r_index])
            # Increase index of right array to compare next element
            r_index += 1
        end
    end

    # Append remaining elements of left or right array, if any
    append!(result, left[l_index:end])
    append!(result, right[r_index:end])
    
    return result
end

# Example usage
A = [4, 2, 6, 1, 3, 5]
sorted_A = merge_sort(A)

println(sorted_A)