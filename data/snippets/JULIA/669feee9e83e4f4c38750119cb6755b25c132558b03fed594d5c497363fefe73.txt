# Define a function using multiple dispatch
function g(x::Int, y::Float64)
    return x * y
end

# Define a function using keyword arguments and a default value
function f(a, b, c; d = "default")
    println("a: ", a)
    println("b: ", b)
    println("c: ", c)
    println("d: ", d)
end

# Define a struct with two fields
struct Point
    x::Int
    y::Int
    name::String
end

# Instantiate the struct and access its fields
p = Point(3, 5, "A")
println(p.x)
println(p.y)
println(p.name)

# Create an array of floats
array = [1.2, 2.3, 3.4, 4.5]

# Use a for loop to iterate through the array and print each element
for element in array
    println(element)
end

# Create a dictionary
dictionary = Dict("key1" => 1, "key2" => 2, "key3" => 3)

# Use a for loop to iterate through the dictionary and print each key-value pair
for (key, value) in dictionary
    println("Key: ", key, ", Value: ", value)
end

# Define a recursive function to calculate the factorial of a number
function factorial(n)
    if n == 0
        return 1
    else
        return n * factorial(n - 1)
    end
end

# Calculate the factorial of 5
println(factorial(5))

# Define a macro that prints the type of the input
macro print_type(x)
    quote
        println(string(typeof($(esc(x)))))
    end
end

# Use the macro to print the type of an integer and a string
@print_type(5)
@print_type("Julia")

# Define a generator function using the yield keyword
function generator(n)
    for i in 1:n
        yield i
    end
end

# Use the generator function to generate the first 5 numbers
for num in generator(5)
    println(num)
end