#= This code snippet defines a function that calculates the factorial of a given number. 
It includes an inner function for recursion and also uses multiple dispatch for different data types. =#

function factorial(n::Int64) 
    #= The input n is restricted to Int64 data type =#
    if n < 0 # Negative numbers don't have factorial 
        return "Error: Negative numbers don't have factorial" 
    elseif n == 0 # Factorial of 0 is defined as 1 
        return 1 
    else 
        return n * factorial(n-1) 
    end 
end 

function factorial(n::Float64) 
    #= The input n is restricted to Float64 data type =#
    if n < 0.0 # Negative numbers don't have factorial 
        return "Error: Negative numbers don't have factorial" 
    elseif n == 0.0 # Factorial of 0 is defined as 1 
        return 1.0 
    else 
        return n * factorial(n-1) 
    end 
end 

function factorial(n::BigInt) 
    #= The input n is restricted to BigInt data type =#
    if n < 0 # Negative numbers don't have factorial 
        return "Error: Negative numbers don't have factorial" 
    elseif n == 0 
        # Factorial of 0 is defined as 1 
        return convert(BigInt,1) 
    else 
        return n * factorial(n-1) 
    end 
end

# Example usage 
factorial(5) # Output: 120
factorial(5.0) # Output: 120.0
factorial(big(5)) # Output: 120