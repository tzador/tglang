function merge_sort(arr)
    # Checks if array has more than 1 element
    if length(arr) > 1
        # Finds the middle index
        mid = length(arr) รท 2
        # Splits array into left and right subarrays
        left = merge_sort(arr[1:mid])
        right = merge_sort(arr[mid+1:end])

        # Merges the two subarrays
        merge(left, right, arr)
    end
end

function merge(left, right, arr)
    # Index for left and right subarrays
    i, j = 1, 1
    # Index for main array
    k = 1

    # Loop until either subarray is exhausted
    while i <= length(left) && j <= length(right)
        # Compares and merges elements from left and right subarrays
        if left[i] <= right[j]
            arr[k] = left[i]
            i += 1
        else
            arr[k] = right[j]
            j += 1
        end
        # Increases index for main array
        k += 1
    end

    # Adds remaining elements from left subarray
    while i <= length(left)
        arr[k] = left[i]
        i += 1
        k += 1
    end
    # Adds remaining elements from right subarray
    while j <= length(right)
        arr[k] = right[j]
        j += 1
        k += 1
    end
    # Returns sorted array
    return arr
end

# Example array to sort
arr = [5, 4, 3, 2, 1]

# Calls merge_sort function on array
sorted_arr = merge_sort(arr)

# Prints sorted array
println(sorted_arr)