# Define function for taking average of two numbers
function average(num1, num2)
    # Calculate sum of the numbers
    sum = num1 + num2
    # Divide by 2 to get average
    avg = sum / 2
    # Return the average
    return avg
end

# Create an array of numbers
numbers = [5, 7, 2, 9, 4, 6, 10]

# Use list comprehension to find average of each pair of adjacent numbers
averages = [average(numbers[i], numbers[i+1]) for i = 1:length(numbers)-1]

# Print the averages
println("The average of each pair of adjacent numbers is:")
averages

# Define a dictionary for storing names and corresponding ages
ages = Dict("John" => 25, "Sarah" => 30, "Emily" => 22, "Tom" => 27)

# Use a for loop to find the average of all ages
total = 0 # Variable to store sum
count = 0 # Variable to store number of elements
for (name, age) in ages # Loop through all key-value pairs in dictionary
    total += age # Add age to sum
    count += 1 # Increment count
end
avg_age = total / count # Calculate average
println("The average age is:", avg_age)

# Define a custom type for a student
struct Student
    name::String
    age::Int
    major::String
    gpa::Float64
end

# Create an array of students
students = [Student("John", 18, "Computer Science", 3.8), Student("Sarah", 19, "Physics", 3.9), Student("Emily", 20, "Mathematics", 4.0)]

# Use a for loop to find the average GPA of all students
total_gpa = 0.0 # Variable to store sum
for student in students # Loop through all students in array
    total_gpa += student.gpa # Add student's GPA to sum
end
avg_gpa = total_gpa / length(students) # Calculate average GPA
println("The average GPA is:", avg_gpa)

# Define a function for checking if a number is prime using the Sieve of Eratosthenes
function isprime(n)
    prime = true # Assume n is prime
    # Use a for loop to check all numbers up to the square root of n
    for i in 2:isqrt(n)
        # If i divides n evenly, n is not prime
        if n % i == 0
            prime = false # Set prime to false
            break # Stop loop
        end
    end
    return prime
end

# Create an array of numbers to check
numbers = [7, 15, 101, 143, 197]

# Use a list comprehension to check if each number is prime
is_primes = [isprime(num) for num in numbers]

# Print the results
println("The results of the prime check are:")
is_primes