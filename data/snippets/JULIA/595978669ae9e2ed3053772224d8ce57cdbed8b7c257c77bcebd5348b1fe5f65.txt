#Define a function that calculates the nth Fibonacci number using recursion
function fibonacci(n)
    if n == 1 || n == 2
        return 1
    else
        return fibonacci(n-1) + fibonacci(n-2)
    end
end

#Define a function that uses memoization to optimize the Fibonacci calculation
function fib_memo(n, cached_fibs=Dict{Int, Int}())
    if n in keys(cached_fibs)
        return cached_fibs[n] #return the cached Fibonacci number if it already exists
    elseif n == 1 || n == 2
        return 1
    else
        #calculate the Fibonacci number and add it to the cached dictionary
        fib = fib_memo(n-1, cached_fibs) + fib_memo(n-2, cached_fibs)
        cached_fibs[n] = fib
        return fib
    end
end

#generate a random integer to calculate the corresponding Fibonacci number
n = rand(1:40)
#calculate the nth Fibonacci number using recursion
println("The ${n}th Fibonacci number using recursion is: ", fibonacci(n))
#calculate the nth Fibonacci number using memoization
println("The ${n}th Fibonacci number using memoization is: ", fib_memo(n))