function mergeSort(a::Array)
	#This function uses merge sort algorithm to sort the input array in ascending order
	#Input:
	#	a - the unsorted input array
	#Output:
	#	sortedArray - the array sorted in ascending order
	
	#base case
	if length(a) <= 1
		return a
	end
	
	#split the array into two halves
	middle = Int(length(a)/2)
	left = a[1:middle]
	right = a[middle+1:end]
	
	#recursive calls on left and right halves
	left = mergeSort(left)
	right = mergeSort(right)
	
	#merge function to merge two sorted arrays into one
	function merge(a1::Array, a2::Array)
		#initialize variables
		out = Array{Int}(undef, length(a1)+length(a2))
		i = 1
		j = 1
		k = 1
		
		#loop until one of the arrays is fully traversed
		while i <= length(a1) && j <= length(a2)
			if a1[i] <= a2[j]
				out[k] = a1[i]
				i += 1
			else
				out[k] = a2[j]
				j += 1
			end
			k += 1
		end
		
		#fill in the remaining elements from left array
		while i <= length(a1)
			out[k] = a1[i]
			i += 1
			k += 1
		end
		
		#fill in the remaining elements from right array
		while j <= length(a2)
			out[k] = a2[j]
			j += 1
			k += 1
		end
		
		return out
	end
	
	#call merge function on the sorted left and right halves, and return the merged sorted array
	sortedArray = merge(left, right)
	return sortedArray
end

#Example usage
unsortedArray = [8,2,6,1,4]
sortedArray = mergeSort(unsortedArray)
println("Sorted Array: ", sortedArray) #output: Sorted Array: [1,2,4,6,8]