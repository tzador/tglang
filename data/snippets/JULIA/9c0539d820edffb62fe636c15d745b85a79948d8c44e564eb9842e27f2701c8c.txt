function merge_sort(arr)
    # This function implements the merge sort algorithm to sort an array.

    # Check for array with only one element
    if length(arr) < 2
        return arr
    end

    # Split the array into two subarrays
    mid = div(length(arr), 2)
    left = merge_sort(arr[1:mid]) # Recursively call merge_sort on left subarray
    right = merge_sort(arr[mid+1:end]) # Recursively call merge_sort on right subarray

    # Create a new empty array to store the sorted elements
    sorted = Array{eltype(arr),1}(undef, length(arr))

    # Merge the two sorted subarrays
    i, j, k = 1, 1, 1 # i for left subarray index, j for right subarray index, k for sorted array index
    while i <= length(left) && j <= length(right)
        if left[i] <= right[j]
            sorted[k] = left[i]
            i += 1
        else
            sorted[k] = right[j]
            j += 1
        end
        k += 1
    end

    # Add remaining elements from left subarray to sorted array
    while i <= length(left)
        sorted[k] = left[i]
        i += 1
        k += 1
    end

    # Add remaining elements from right subarray to sorted array
    while j <= length(right)
        sorted[k] = right[j]
        j += 1
        k += 1
    end

    return sorted # Return the sorted array
end

# Example: 
# my_array = [5, 2, 8, 4, 9]
# println(merge_sort(my_array)) # Output: [2, 4, 5, 8, 9]