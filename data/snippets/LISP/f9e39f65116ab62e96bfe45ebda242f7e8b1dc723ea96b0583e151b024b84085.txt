(defun nested-factorial (n)                         ; Define a function named nested-factorial that takes in one argument 'n'
  (if (<= n 1)                                      ; Checks if n is less than or equal to 1
      1                                              ; If true, returns 1
      (* n (nested-factorial (- n 1)))))             ; If false, multiplies n with the result of nested-factorial of (n-1)

(defun factorial-list (lst)                         ; Define a function named factorial-list that takes in one argument 'lst'
  (mapcar #'nested-factorial lst))                  ; Maps the nested-factorial function to each element of the list passed in as 'lst'

(factorial-list '(1 2 3 4 5))                       ; Calls the factorial-list function with a list of integers from 1 to 5 as argument, returns a list of their factorials. Output: (1 2 6 24 120)