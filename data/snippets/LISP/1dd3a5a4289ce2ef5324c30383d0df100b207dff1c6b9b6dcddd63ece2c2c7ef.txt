;; Define a function to calculate the square of a number
(defun square (n)
  (* n n))

;; Define a function to calculate the sum of squares of a list of numbers
(defun sum-of-squares (lst)
  (if (null lst)
      0 ; Base case: if the list is empty, return 0 as the sum
      (+ (square (car lst)) (sum-of-squares (cdr lst))) ; Recursive case: square the first element and add it to the recursive call with the rest of the list
  ))

;; Define a list of numbers
(setq lst '(1 2 3 4 5))

;; Print the sum of squares of the list
(print (sum-of-squares lst))

;; Output: 55 ; 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55