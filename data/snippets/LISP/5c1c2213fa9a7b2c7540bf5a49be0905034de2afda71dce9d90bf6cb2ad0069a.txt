;; Define a function that sums all numbers in a list
(defun sum-list (lst)
  (if (null lst)
      0
      (+ (car lst) (sum-list (cdr lst))) ; recursive call
  )
)

;; Test the function
(sum-list '(1 2 3 4 5)) ; expected output: 15
(sum-list '(-1 -2 -3 -4 -5)) ; expected output: -15

;; Create a list of lists
(defvar lst-of-lsts '((1 2 3) (4 5 6) (7 8 9)))

;; Define a function to flatten the list of lists
(defun flatten (lst)
  (if (null lst)
      nil
      (append (car lst) (flatten (cdr lst))) ; recursive call
  )
)

;; Test the function
(flatten lst-of-lsts) ; expected output: (1 2 3 4 5 6 7 8 9)