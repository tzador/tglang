;; Function to find the maximum of two numbers
(defun max (a b)
"Returns the maximum of two numbers"
(if (> a b) ; if a is greater than b
a ; then return a as the maximum
b)) ; else return b as the maximum

;; Function to find the maximum of three numbers
(defun max3 (a b c)
"Returns the maximum of three numbers"
(max (max a b) c)) ; use max function twice to find the maximum of all three numbers

;; Function to find the factorial of a number
(defun factorial (n)
"Returns the factorial of a number"
(if (<= n 1) ; recursive base case
1 ; then return 1 as the factorial of 0 or 1
(* n (factorial (- n 1))))) ; else multiply n with the factorial of n-1

;; Function to calculate the nth Fibonacci number
(defun fib (n)
"Returns the nth Fibonacci number"
(cond ; conditional statement
((= n 0) 0) ; if n is 0, return 0 as the nth Fibonacci number
((= n 1) 1) ; if n is 1, return 1 as the nth Fibonacci number
(t (+ (fib (- n 1)) (fib (- n 2)))))) ; else recursively add the previous two Fibonacci numbers

;; Function to reverse a list
(defun reverse (lst)
"Returns the reversed list"
(if (null lst) ; recursive base case
nil ; if the list is empty, return nil (empty list)
(append (reverse (cdr lst)) ; recursively reverse the rest of the list
(list (car lst))))) ; and add the first element to the end

;; Function to check if a number is prime
(defun prime (n)
"Checks if a number is prime"
(let ((i 2)) ; use let to create a local binding for i
(do ((remainder (mod n i)) ; do loop to check for prime
(loop (if (> i n) ; recursive base case
(return-from prime t))) ; if i is greater than n, return true
(if (eq i n) (return-from prime nil)) ; if i equals n, return false
(setq i (+ i 1)))))) ; else increment i and continue looping