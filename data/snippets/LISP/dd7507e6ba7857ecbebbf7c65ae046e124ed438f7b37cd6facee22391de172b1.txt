;;; A simple game of rock, paper, scissors in LISP

;; Define a list of possible moves for the game
(defparameter *moves* '(rock paper scissors))
;; Define a function to generate a random move
(defun random-move () (elt *moves* (random (length *moves*))))

;; Define a function to determine the winner of the game given two moves
(defun determine-winner (move1 move2)
    (cond
        ;; Check for a tie
        ((equal move1 move2) "It's a tie!")
        ;; Check for rock vs scissors
        ((and (equal move1 'rock) (equal move2 'scissors)) "Rock smashes scissors. You win!")
        ((and (equal move2 'rock) (equal move1 'scissors)) "Rock smashes scissors. You lose!")
        ;; Check for scissors vs paper
        ((and (equal move1 'scissors) (equal move2 'paper)) "Scissors cut paper. You win!")
        ((and (equal move2 'scissors) (equal move1 'paper)) "Scissors cut paper. You lose!")
        ;; Check for paper vs rock
        ((and (equal move1 'paper) (equal move2 'rock)) "Paper covers rock. You win!")
        ((and (equal move2 'paper) (equal move1 'rock)) "Paper covers rock. You lose!")))

;; Define a recursive function to play multiple rounds of the game
(defun play (rounds player-score computer-score)
    ;; Check if all rounds have been played
    (if (<= rounds 0)
        ;; If so, print the final scores and declare the overall winner
        (progn 
            (format t "Final score - Player: ~a, Computer: ~a~%" player-score computer-score)
            (if (> player-score computer-score) (format t "You won the game!") (format t "You lost the game!")))
        ;; If not, play another round and recursively call the function with updated scores
        (let* ((computer-move (random-move))
               (player-move (read-from-string (format nil "Choose your move ~a: " *moves*)))
               (result (determine-winner player-move computer-move)))
            ;; Print the result of the round and update scores
            (format t "~a~%" result)
            (cond
                ((equal result "Rock smashes scissors. You win!") (play (1- rounds) (1+ player-score) computer-score))
                ((equal result "Scissors cut paper. You win!") (play (1- rounds) (1+ player-score) computer-score))
                ((equal result "Paper covers rock. You win!") (play (1- rounds) (1+ player-score) computer-score))
                ((equal result "Rock smashes scissors. You lose!") (play (1- rounds) player-score (1+ computer-score)))
                ((equal result "Scissors cut paper. You lose!") (play (1- rounds) player-score (1+ computer-score)))
                ((equal result "Paper covers rock. You lose!") (play (1- rounds) player-score (1+ computer-score)))
                ((equal result "It's a tie!") (play (1- rounds) player-score computer-score))))))

;; Start the game with 5 rounds and 0 scores for both the player and computer
(play 5 0 0)