;;; This code snippet uses recursion to implement the merge sort algorithm
(defun merge (listA listB)
    "Merges two sorted lists"
    (cond ((null listA) listB)
          ((null listB) listA)
          ((<= (car listA) (car listB))
           (cons (car listA) (merge (cdr listA) listB)))
          (t (cons (car listB) (merge listA (cdr listB))))))

(defun merge-sort (list)
    "Sorts a list using the merge sort algorithm"
    (if (null (cdr list))
        list
        (let ((mid (floor (length list) 2)))
            (merge (merge-sort (subseq list 0 mid)) (merge-sort (subseq list mid))))))

;;; Example usage:
(merge-sort '(5 3 9 2 8 4 1 6 7))
;;; Output: (1 2 3 4 5 6 7 8 9)