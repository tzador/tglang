(defun recursive-fib (n) ; This function calculates the nth Fibonacci number using recursion.
  (if (<= n 1) ; Base case - if n is 0 or 1, return n
      n
      (+ (recursive-fib (- n 1)) (recursive-fib (- n 2))))) ; Recursive case - calculate the sum of the previous two Fibonacci numbers

(defun iterative-fib (n) ; This function calculates the nth Fibonacci number iteratively using a loop.
  (let ((fib-list (list 0 1))) ; Create a list to store Fibonacci numbers
    (loop for i from 2 to n do ; Loop from 2 to n
      (setf (nth i fib-list) (+ (nth (- i 1) fib-list) (nth (- i 2) fib-list)))) ; Calculate the ith Fibonacci number and add it to the list
    (nth n fib-list))) ; Return the nth Fibonacci number from the list