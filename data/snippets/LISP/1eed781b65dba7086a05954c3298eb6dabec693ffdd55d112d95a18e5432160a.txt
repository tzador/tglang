;;;;;Lists and Recursion

;; Creating a function that counts the number of items in a list recursively

;; Define the function with a parameter for the list
(defun count-items (list)
  ;; Check if the list is empty
  (if (null list)
    ;; If it is, return 0 as the count
    0
    ;; Else, recursively call the function with the rest of the list as the parameter
    (1+ (count-items (rest list)))))

;; Example usage:
(count-items '(1 2 3 4 5)) ;; Returns 5

;; Creating a function that checks if a list is sorted in ascending order

;; Define the function with parameters for the list and current value to compare against
(defun is-sorted (list curr)
  ;; Check if the list is empty
  (if (null list)
    ;; If it is, return T (true) as it is sorted
    T
    ;; Else, check if the current value is greater than or equal to the first item in the list
    (>= curr (first list))
    ;; If it is, recursively call the function with the rest of the list and the current value as the parameters
    (is-sorted (rest list) (first list))
    ;; If not, return NIL (false) as it is not sorted
    NIL))

;; Example usage:
(is-sorted '(1 2 3 4 5) 0) ;; Returns T (true)
(is-sorted '(1 3 2 4 5) 0) ;; Returns NIL (false)