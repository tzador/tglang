;; This code performs a recursive binary search on a given list.
;; It takes in the list, the element to search for, and the starting and ending indices as parameters.

(defun binary-search (list key low high)
    (if (> low high) ;; checks if low index is greater than high index
        nil ;; if yes, then key is not present in list, return nil
        (let ((mid (/ (+ low high) 2))) ;; calculates middle index
            (if (= key (nth mid list)) ;; checks if key is equal to element at middle index
                mid ;; if yes, then key is found, return middle index
                ;; else, recursively call binary-search on the appropriate half of the list
                (if (< key (nth mid list)) 
                    (binary-search list key low (1- mid)) ;; search in left half
                    (binary-search list key (1+ mid) high))))) ;; search in right half
)