;;; This is a complex function that takes in two lists and returns the cartesian product of the two lists.
;;; The function uses recursion to iterate through each element of the first list and concatenate it with each element of the second list, creating a list of pairs.
;;; The function also handles cases where one or both of the lists are empty.

(defun cartesian-product (list1 list2)
  "Takes in two lists and returns the cartesian product of the two lists."
  (if (null list1)
      nil
      (append (mapcar #'(lambda (x) (cons x (car list2))) list1)
	(cartesian-product (cdr list1) list2))))
 
; Example inputs and expected output:
(cartesian-product '(1 2 3) '(a b c)) => ((1 . a) (2 . a) (3 . a) (1 . b) (2 . b) (3 . b) (1 . c) (2 . c) (3 . c))
(cartesian-product '() '(1 2)) => NIL
(cartesian-product '(1 2) '()) => NIL