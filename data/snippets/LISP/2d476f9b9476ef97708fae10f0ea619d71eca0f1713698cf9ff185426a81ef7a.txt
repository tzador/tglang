;; This code snippet is an example of a recursive function in LISP
;; The function calculates the factorial of a positive integer n

(defun factorial (n) ;; 'defun' is used to define a function
    (if (<= n 1) ;; 'if' is used for conditional statements
        1 ;; base case, returns 1 if n is 1 or 0
        (* n (factorial (- n 1)))) ;; recursively calls itself and multiplies the result with n, until n is 1 or 0
    )

(factorial 5) ;; calling the function with n = 5, returns 120 (5*4*3*2*1)
;; output: 120

;; This code snippet showcases the use of higher-order functions and lambda expressions in LISP

(defun power (base exponent) ;; function to calculate base^exponent
    (if (= exponent 0) ;; base case, returns 1 if exponent is 0
        1
        (* base (power base (- exponent 1)))) ;; recursively calls itself and multiplies the result with base, until exponent is 0
    )

(defun apply-function (function arg) ;; function that takes in another function as argument
    (funcall function arg)) ;; 'funcall' is used to call the passed function with the given argument

(funcall (lambda (x) (+ x (power x 2))) 2) ;; passing in a lambda expression that calculates x + x^2, with x = 2
;; output: 6