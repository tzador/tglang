(defun factorial (n)                        ; define a function named "factorial" that takes in a parameter "n"
  (if (<= n 1)                              ; if "n" is less than or equal to 1
      1                                      ; then return 1
      (* n (factorial (- n 1)))))            ; else recursively call factorial with "n-1" and multiply the result with "n"

(format t "Enter a number: ")                ; prompt the user to enter a number
(let ((num (read)))                          ; read the user's input and store it in a variable "num"
  (if (>= num 0)                             ; if "num" is greater than or equal to 0
      (format t "Factorial of ~a is ~a"     ; print "Factorial of <num> is <result>"
              num (factorial num))           ; by calling the factorial function with "num" as the parameter
      (format t "Invalid input.")))          ; else print "Invalid input."