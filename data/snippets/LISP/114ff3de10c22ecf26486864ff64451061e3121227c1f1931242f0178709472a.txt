;;; This is a function that takes in a list and recursively sums all the non-negative numbers
;;; in the list. It uses tail-recursion for efficiency.

(defun sum-non-negative (lst sum)
(if (null lst) ;;; returns sum when the list is empty
sum
(if (> (car lst) 0) ;;; if the current element is a non-negative number
(sum-non-negative (cdr lst) (+ sum (car lst))) ;;; recursively call the function with the rest of the list and add current element to the sum
(sum-non-negative (cdr lst) sum) ;;; recursively call the function with the rest of the list and keep the sum unchanged
)
)
)