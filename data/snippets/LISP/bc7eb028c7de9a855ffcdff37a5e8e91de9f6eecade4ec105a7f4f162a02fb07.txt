; This is a function that takes in a list and returns a modified list
; using recursion
(defun modify-list (list)
  (cond 
    ; Base case: if the list is empty, return empty list
    ((null list) nil)
    ; Recursive case: if the first element is a list, call the function on it
    ; and add the result to the front of the new list
    ((listp (first list)) (cons (modify-list (first list)) (modify-list (rest list))))
    ; Recursive case: if the first element is not a list, add it to the front
    ; of the new list
    (t (cons (first list) (modify-list (rest list))))
  )
)

; Example usage:
(modify-list '(1 2 (3 4) 5)) ; => (1 2 (3 4) 6)
(modify-list '((a b) c)) ; => ((a b) (a b c))