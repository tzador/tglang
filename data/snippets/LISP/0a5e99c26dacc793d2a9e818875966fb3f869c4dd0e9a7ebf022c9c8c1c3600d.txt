;; This code snippet uses the LISP programming language to sort a list of numbers using the quicksort algorithm

;; define the quicksort function
(defun quicksort (list)
  (if (null list) ; if list is empty, return an empty list
      nil
      (let ((pivot (car list))) ; set the pivot as the first element of the list
        (append
          (quicksort (remove-if #'(lambda (x) (or (equal x pivot) ; recursively call quicksort on elements that are less than the pivot
                                                 (atom x))) list))
          (loop for i in list when (equal i pivot) collect i) ; add all occurrences of the pivot to the sorted list
          (quicksort (remove-if #'(lambda (x) (or (equal x pivot) ; recursively call quicksort on elements that are greater than the pivot
                                                 (atom x))) list))))))

;; define the function that checks if a list is sorted
(defun sorted (list)
  (if (or (null list) (null (cdr list))) ; if list is empty or has only one element, it is considered sorted
      T
      (and (<= (car list) (cadr list)) ; check if the first two elements in the list are in sorted order
            (sorted (cdr list))))) ; recursively check the rest of the list

;; define a list of unsorted numbers to test the quicksort function
(defvar *unsorted-numbers* '(3 7 1 5 2 9 4 8 6))

;; sort the list using quicksort and store the result in a variable
(defvar *sorted-numbers* (quicksort *unsorted-numbers*))

;; print the sorted list and check if it is sorted using the defined function
(print *sorted-numbers*)
(print (sorted *sorted-numbers*))

;; Output:
' (1 2 3 4 5 6 7 8 9)
T