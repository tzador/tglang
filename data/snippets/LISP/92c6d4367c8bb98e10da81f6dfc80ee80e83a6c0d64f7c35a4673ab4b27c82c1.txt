;; Define a factorial function with tail recursion
(defun tail-recursive-factorial (n)
  (labels ((tail-recursive-factorial-helper (n accumulator)
             (if (<= n 1)
                 accumulator
                 (tail-recursive-factorial-helper (- n 1) (* accumulator n)))))
    (tail-recursive-factorial-helper n 1)))

;; Define a lambda function to calculate the nth power of a number
(defun nth-power (n)
  (lambda (num)
    (if (= n 0)
        1
        (* num ((nth-power (- n 1)) num)))))

;; Define a list of numbers
(setq numbers '(1 2 3 4 5))

;; Map the nth-power lambda function to the list of numbers
(mapcar (nth-power 2) numbers)

;; Output: (1 4 9 16 25)