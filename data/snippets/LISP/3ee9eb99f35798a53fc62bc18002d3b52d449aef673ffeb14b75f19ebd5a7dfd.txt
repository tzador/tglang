`(defun merge-sort (list) ; Defines a function named `merge-sort` that takes in a list as a parameter

  (if (<= (length list) 1) ; Checks if the length of the list is less than or equal to 1
      list ; If true, returns the list
      (let ((left (merge-sort (first-half list))) ; Defines a variable `left` that is the result of calling `merge-sort` on the first half of the list
            (right (merge-sort (second-half list)))) ; Defines a variable `right` that is the result of calling `merge-sort` on the second half of the list
        (merge left right)))) ; Calls the function `merge` on both `left` and `right` variables and returns the result

(defun first-half (list) ; Defines a function named `first-half` that takes in a list as a parameter
  (if (<= (length list) 1) ; Checks if the length of the list is less than or equal to 1
      list ; If true, returns the list
      (subseq list 0 (/ (length list) 2)))) ; If false, returns a sublist of the first half of the list

(defun second-half (list) ; Defines a function named `second-half` that takes in a list as a parameter
  (if (<= (length list) 1) ; Checks if the length of the list is less than or equal to 1
      nil ; If true, returns nil
      (subseq list (/ (length list) 2)))) ; If false, returns a sublist of the second half of the list

(defun merge (left right) ; Defines a function named `merge` that takes in two lists as parameters
  (if (null left) ; Checks if the left list is null
      right ; If true, returns the right list
      (if (null right) ; Checks if the right list is null
          left ; If true, returns the left list
          (if (< (car left) (car right)) ; Checks if the first element of the left list is less than the first element of the right list
              (cons (car left) (merge (cdr left) right)) ; If true, creates a new list with the first element of the left list and recursively calls `merge` on the rest of the left list and the right list
              (cons (car right) (merge left (cdr right))))))) ; If false, creates a new list with the first element of the right list and recursively calls `merge` on the left list and the rest of the right list