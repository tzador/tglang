;;; Define a function that takes in a list as an argument 
;;; and recursively inserts an element at the end of the list
(defun insert-at-end (lst elem)
  "Inserts an element at the end of a list using recursion." 
  (if (null lst) ;;; Check if the list is empty
      (list elem) ;;; If it is, create a new list with the element
      (cons (car lst) ;;; Otherwise, cons the first element of the list
            (insert-at-end (cdr lst) elem)))) ;;; and recursively call the function with the rest of the list and the element

;;; Define a helper function to reverse a list
(defun reverse-list (lst)
  "Reverses a list using recursion."
  (if (null lst) ;;; Check if the list is empty
      nil ;;; If it is, return nil
      (append (reverse-list (cdr lst)) (list (car lst))))) ;;; Otherwise, append the reversed rest of the list to a list with the first element

;;; Define a function to rotate a list to the left by a given number of elements
(defun rotate-left (lst n)
  "Rotates a list to the left by n elements."
  (if (zerop n) ;;; Check if n is zero
      lst ;;; If it is, return the original list
      (rotate-left (append (cdr lst) (list (car lst))) (1- n)))) ;;; Otherwise, append the first element to the end of the list and recursively call the function with n-1

;;; Define a function to flatten a list
(defun flatten (lst)
  "Flattens a list."
  (cond ((null lst) nil) ;;; If the list is empty, return nil
        ((listp (car lst)) (append (flatten (car lst)) (flatten (cdr lst)))) ;;; If the first element is a list, recursively flatten the first and second half of the list and append them
        (t (cons (car lst) (flatten (cdr lst)))))) ;;; Otherwise, package the first element in a list and recursively flatten the rest of the list