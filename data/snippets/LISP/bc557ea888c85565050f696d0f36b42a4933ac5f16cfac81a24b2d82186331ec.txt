;; Annotated code snippet in LISP

;; Define a function called 'quicksort'
(defun quicksort (list)
  ;; Check if the list is empty or has one element
  (if (null list)
      ;; If it is, then return empty list
      nil
      ;; If not, then store the first element of the list as 'pivot'
      ;; and the rest of the list as 'rest'
      (let ((pivot (car list))
            (rest (cdr list)))
        ;; Recursively call quicksort function on 'rest'
        ;; to sort the rest of the list
        ;; and store the results in 'sorted-rest'
        (let ((sorted-rest (quicksort rest)))
          ;; Split the 'sorted-rest' into two lists:
          ;; - smaller elements than 'pivot' in 'smaller'
          ;; - larger elements than 'pivot' in 'larger'
          (let ((smaller (remove-if #'(lambda (x)
                                        (>= x pivot))
                                    sorted-rest))
                (larger (remove-if #'(lambda (x)
                                       (< x pivot))
                                   sorted-rest)))
            ;; Combine the sorted 'smaller', 'pivot' and 'larger' lists
            (append smaller (list pivot) larger))))))

;; Example usage
;; Sort a list of numbers using quicksort function
(quicksort '(3 7 2 6 1 9)) ;; Output: (1 2 3 6 7 9)

;; Sort a list of strings using quicksort function
(quicksort '("apple" "orange" "banana" "pear")) ;; Output: ("apple" "banana" "orange" "pear")