(setf counter 1)           ; sets a global variable named counter to 1
(defun fibonacci (n)       ; defines a function named fibonacci
    (if (< n 2)            ; checks if n is less than 2
        n                   ; if so, returns n
        (let ((result (- (fibonacci (- n 2))
                         (fibonacci (- n 1))))) ; takes the difference of the previous two fibonacci numbers
            (if (= counter n)                   ; checks if we are at the end of the sequence
                result                         ; if so, returns the calculated fibonacci number
                (progn                          ; if not, continues calculating by incrementing the counter
                    (incf counter)
                    result                      ; returns the calculated fibonacci number
                )
            )
        )
    )
)
(fibonacci 10)              ; calls the fibonacci function with the argument 10, returns the 10th fibonacci number