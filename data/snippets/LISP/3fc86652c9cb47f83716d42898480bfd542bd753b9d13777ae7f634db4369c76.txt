(defun merge-sort (lst) ; This function implements the merge sort algorithm
    (if (<= (length lst) 1) ; Checks if the list is of size 1 or 0, if true then it is already sorted
        lst
        (let* ((mid (/ (length lst) 2)) ; Computes the middle index of the list
            (left (subseq lst 0 mid)) ; Splits the list into two halves, left and right
            (right (subseq lst mid)))
            (merge (merge-sort left) (merge-sort right))))) ; Merges the sorted left and right halves

(defun merge (left right) ; This function merges two sorted lists into one sorted list
    (if (null left) ; Checks if left list is empty, if true then return the right list
        right
        (if (null right) ; Checks if right list is empty, if true then return the left list
            left
            (if (< (car left) (car right)) ; Compares the first elements of left and right list, if left is smaller
                (cons (car left) (merge (cdr left) right)) ; then add it to the resulting list and recursively call 
                (cons (car right) (merge left (cdr right)))))) ; merge on the remaining elements of left or right list

(merge-sort '(5 3 2 1 4)) ; Calls merge-sort on a list of numbers [5, 3, 2, 1, 4] and returns the sorted list [1, 2, 3, 4, 5]