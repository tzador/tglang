;; Function to calculate the factorial of a given number
(defun factorial (n)
  (if (<= n 1)
    1
    (* n (factorial (- n 1)))))

;; Function to calculate the sum of a list of numbers
(defun sum (lst)
  (if (null lst)
    0
    (+ (car lst) (sum (cdr lst)))))

;; Function to generate a list of all prime numbers up to given number
(defun prime-numbers (n)
  (let ((nums (make-list n :initial-element t))
        (p 2))
    (loop while p <= n do
      (if (nth p nums)
        (loop for i from (+ p p) to n by p do
          (setf (nth i nums) nil)))
      (incf p))
    (loop for i from 2 to n collect
      (if (nth i nums)
        i))))

;; Example usage
(print (factorial 5))
(print (sum (list 1 2 3 4 5)))
(print (prime-numbers 10))