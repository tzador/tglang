;; This is a function that calculates the factorial of a given number
;; It uses recursion to repeatedly multiply the number by its previous value
;; @param num the number to calculate the factorial of
;; @return the factorial of the given number 

(defun factorial (num)
    (if (= num 1)
        1
        (* num (factorial (- num 1)))
    )
)

;; This is a function that calculates the sum of all numbers in a list
;; It uses tail recursion to loop through the list and add each element to the total sum
;; @param lst the list of numbers
;; @return the sum of all numbers in the list

(defun sum-numbers (lst)
    (defun sum-helper (lst total)
        (if (null lst)
            total
            (sum-helper (cdr lst) (+ total (car lst)))))
    (sum-helper lst 0)
)

;; This is a function that checks if a given string is a palindrome 
;; It uses pattern matching to compare the first and last characters of the string 
;; and recursively checks if the remaining middle part is a palindrome
;; @param str the string to check
;; @return T if the string is a palindrome, nil otherwise

(defun is-palindrome (str)
    (if (or (null str) (= 1 (length str)))
        T
        (let ((first (string-upcase (char str 0)))
              (last (string-upcase (char str (- (length str) 1)))))
            (if (string-equal first last)
                (is-palindrome (subseq str 1 (- (length str) 1)))
                nil))))

;; This is a function that implements the bubble sort algorithm to sort a list of numbers
;; It uses nested loops to iterate through the list and compare adjacent elements
;; If the first element is greater than the second, they are swapped 
;; This process is repeated until the list is fully sorted
;; @param lst the unsorted list of numbers
;; @return the sorted list of numbers

(defun bubble-sort (lst)
    (loop for i from 0 to (1- (length lst))
        do (loop for j from 0 to (- (length lst) i 2)
            do (if (> (nth j lst) (nth (1+ j) lst))
                (let ((tmp (nth (1+ j) lst)))
                    (setf (nth (1+ j) lst) (nth j lst))
                    (setf (nth j lst) tmp)))))
    lst)