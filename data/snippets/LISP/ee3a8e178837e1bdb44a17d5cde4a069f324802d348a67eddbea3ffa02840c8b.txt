;; This function calculates the factorial of a given number using recursion
(defun factorial (num) ; define the function with one parameter
  (if (= num 0) ; check if the parameter is equal to 0
      1 ; if yes, return 1 (base case)
      (* num (factorial (- num 1))) ; if no, multiply the number with the factorial of the number-1
  )
)

;; This function calculates the nth term in the Fibonacci sequence using recursion
(defun fib (n) ; define the function with one parameter
  (if (or (= n 0) (= n 1)) ; check if the parameter is equal to 0 or 1
      1 ; if yes, return 1 (base case)
      (+ (fib (- n 1)) (fib (- n 2))) ; if no, add the previous two terms in the sequence
  )
)

;; This function calculates the sum of all digits in a given number using recursion
(defun sumDigits (num) ; define the function with one parameter
  (if (< num 10) ; check if the number is less than 10
      num ; if yes, return the number (base case)
      (+ (mod num 10) (sumDigits (floor (/ num 10)))) ; if no, add the last digit to the sum and call the function for the remaining digits
  )
)

;; This code snippet calls all three functions and prints their outputs
(print (factorial 5)) ; prints 120
(print (fib 6)) ; prints 13
(print (sumDigits 12345)) ; prints 15