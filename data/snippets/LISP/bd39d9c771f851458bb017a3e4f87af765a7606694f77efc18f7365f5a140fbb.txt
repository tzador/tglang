;;; This is a function that performs a depth-first search on a given graph
(defun dfs (graph start-node visited) ;;; defines a function named `dfs` that takes in three parameters
  (if (not (member start-node visited)) ;;; checks if the `start-node` has not already been visited
      (progn ;;; executes multiple expressions and returns the value of the last one
        (print start-node) ;;; prints the value of `start-node`
        (setq visited (cons start-node visited)) ;;; adds `start-node` to the `visited` list
        (dolist (adj-node (get-connected-nodes start-node graph)) ;;; iterates through the list of connected nodes to the `start-node`
          (dfs graph adj-node visited)) ;;; recursively calls `dfs` for each connected node
        visited))) ;;; returns the `visited` list