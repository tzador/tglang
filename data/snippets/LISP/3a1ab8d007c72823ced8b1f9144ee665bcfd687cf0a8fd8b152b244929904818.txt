;;;;; Set up a list of numbers to be sorted ;;;;;

(defvar numbers '(3 5 1 8 2 9 4))

;;;;; Define a helper function to compare two elements and swap them if necessary ;;;;;
(defun swap-elements (list-index list)

;; Base case: if the list is empty, return it
  (if (null list) list

;; Recursive case: if the list is not empty, check if the first element is greater than the next
    (if (> (nth list-index list) (nth (1+ list-index) list))

;; If it is, swap the two elements and continue sorting the rest of the list
      (cons (nth (1+ list-index) list) (swap-elements list-index (cons (nth list-index list) (nthcdr 2 list))))

;; If it is not, continue sorting the rest of the list
      (cons (nth list-index list) (swap-elements (1+ list-index) (cdr list))))))

;;;;; Define the sorting function using recursion and the helper function above ;;;;;
(defun bubble-sort (list)

;; Base case: if the list is empty, return it
  (if (null list) list

;; Recursive case: if the list is not empty, use the helper function to swap elements and continue sorting
    (swap-elements 0 (bubble-sort (cdr list)))))

;;;;; Call the sorting function on the list of numbers and print the sorted list ;;;;;
(print (bubble-sort numbers))

;;;;; OUTPUT: (1 2 3 4 5 8 9) ;;;;;