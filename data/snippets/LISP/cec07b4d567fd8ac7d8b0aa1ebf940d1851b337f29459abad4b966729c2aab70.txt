;;; This is a program that sorts a list of numbers using bubble sort
;;; Input: list of unsorted numbers
;;; Output: list of sorted numbers
;;; Algorithm:
;;; 1. Define a function bubble-sort that takes in a list of numbers as its argument
;;; 2. Set a flag variable named swapped to true
;;; 3. Create a while loop that runs until swapped is false
;;; 4. Inside the while loop:
;;;      a. Set swapped to false
;;;      b. Loop through the list and compare each number to the one after it
;;;      c. If a number is greater than the one after it, swap their positions and set swapped to true
;;; 5. Return the sorted list
;;; Example input: (9 2 8 5)
;;; Output: (2 5 8 9)

(defun bubble-sort (numbers) ; defines a function named bubble-sort that takes in a list of numbers as its argument
  (let ((swapped t)) ; sets a flag variable named swapped to true
    (while swapped ; creates a while loop that runs until swapped is false
      (setf swapped nil) ; sets swapped to false
      (loop for i from 0 to (- (length numbers) 2) ; loops through the list
        do (if (> (nth i numbers) (nth (+ i 1) numbers)) ; compares each number to the one after it
             (progn ; if a number is greater than the one after it, perform the following:
               (rotatef (nth i numbers) (nth (+ i 1) numbers)) ; swap their positions
               (setf swapped t)))) ; and set swapped to true
    numbers)) ; return the sorted list