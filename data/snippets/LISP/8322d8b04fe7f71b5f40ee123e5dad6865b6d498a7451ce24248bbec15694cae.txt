(defun knapsack (items max-weight)
  "Returns the maximum value that can be carried in a knapsack using dynamic programming"

  (let* ((n (length items))                                       ; n is the number of items
         (weights (mapcar 'first items))                           ; stores the weights of items in a list
         (values (mapcar 'second items))                           ; stores the values of items in a list
         (dynamic-table (make-array (list (+ n 1) (+ max-weight 1)) ; dynamic programming table storing optimal values
                                :initial-element 0)))             ; initialized to 0
    (dotimes (i n)                                                ; loop through the number of items
      (dotimes (j (+ max-weight 1))                                ; loop through the maximum weight
        (if (<= (nth i weights) j)                                 ; if the weight of the current item is less than or equal to current weight
          (setf (aref dynamic-table i j)                           ; set the value in the dynamic table to either:
              (max (+ (aref dynamic-table (- i 1) j)               ; the value in the previous row at the same column
                        (nth i values))                            ; plus the value of the current item
                   (aref dynamic-table (- i 1)                     ; or the value in the previous row at current weight minus the weight of current item
                        (- j (nth i weights)))))                   ; plus value of current item
          (setf (aref dynamic-table i j)                           ; otherwise set the value in the table to the value in the previous row at the same column
              (aref dynamic-table (- i 1) j))))
        )
    (aref dynamic-table n max-weight)))                             ; return value in last row, last column (maximum value)