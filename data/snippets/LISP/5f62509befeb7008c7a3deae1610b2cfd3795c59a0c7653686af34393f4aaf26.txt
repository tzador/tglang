(defstruct person        ;Defines a structure named `person`
  name                   ;Field for person's name
  age                    ;Field for person's age
  gender                 ;Field for person's gender
  occupation             ;Field for person's occupation
  (change-age (lambda (x y) (format t "Changed person's age from ~a to ~a" x y))) ;Defines a function `change-age` that takes two parameters `x` and `y`, and prints a message stating the change in person's age
)

(let ((john (make-person :name "John" :age 25 :gender 'male :occupation "Engineer"))) ;Creates a `person` named `john` with specified values for fields
  (format t "Person's name is ~a~%" (person-name john)) ;Prints person's name using accessor function `person-name`
  (setf (person-age john) 30) ;Changes person's age to 30 using accessor function `person-age`
  (format t "Person's new age: ~a~%" (person-age john)) ;Prints person's new age
  (funcall (person-change-age john) 30 40) ;Calls `change-age` function on person `john`, with parameters 30 and 40, to simulate a birthday and print a message
  (format t "Person's new age: ~a" (person-age john)) ;Prints person's updated age
)

;Output:
;Person's name is John
;Person's new age: 30
;Changed person's age from 30 to 40
;Person's new age: 40