;; Function to check if a list is a palindrome
(defun is-palindrome (xs)
  (equal xs (reverse xs)))  ;first part of function using 'equal' to check for equality between original list and reversed list
(defmacro unless (test &body body) ;definition of 'unless' macro with two parameters, namely 'test' and 'body'
  `(if ,test nil ;if 'test' is true, return nil
     (progn ,@body))) ;else, return the result of evaluating the 'body' expression(s)
(defmacro when (test &body body) ;definition of 'when' macro with two parameters, namely 'test' and 'body'
  `(unless (not ,test) ;embedded call to 'unless' macro with 'not' operator to check for false value of 'test'
     (progn ,@body))) ;if 'test' is false, return nil, else return result of evaluating 'body'
(defmacro for-each (var list &body body) ;definition of 'for-each' macro with three parameters, namely 'var', 'list', and 'body'
  `(dolist (,var ,list) ;embedded use of 'dolist' function to iterate over elements in 'list'
     ,@body)) ;evaluate 'body' expression(s) for each element in 'list'
(let* ((x 1) ;definition of 'let*' statement with local variables 'x' and 'y'
       (y 2))
  (for-each (elem '(1 2 3 4 5)) ;calling 'for-each' macro to iterate over list of numbers
    (when (= elem y) ;nested 'when' statement to check for equality between current element and local variable 'y'
      (print x)))) ;if true, print value of local variable 'x'