;;; This function checks if the given list is empty or not
(defun empty-check (list)
  (if (null list)
      (format t "List is empty.")
	(format t "List is not empty.")))

;;; This function returns the sum of all elements in a list
(defun sum-list (list)
  (if (null list)
      0
      (+ (car list) (sum-list (cdr list)))))

;;; This function reverses a list
(defun list-reverse (list)
  (if (null list)
      nil
      (append (list-reverse (cdr list)) (list (car list)))))

;;; This function sorts a list in ascending order using bubble sort algorithm
(defun bubble-sort (list)
  (let ((new-list (list-reverse list)))
    (if (null new-list)
        nil
	    (let ((sorted (bubble-helper new-list nil)))
	      (append (list-reverse sorted) nil)))))

;;; This helper function compares two adjacent elements and swaps them if necessary
(defun bubble-helper (list swapped)
  (if (null (cdr list))
      (if (null swapped)
	     list
		 (bubble-helper list nil))
	  (let ((current (car list))
		    (next (cadr list)))
		(if (> current next)
			(cons next (bubble-helper (cons current (cddr list)) t))
			(cons current (bubble-helper (cdr list) swapped))))))

;;; Example usage
(format t "Is (1 2 3 4) empty? ")
(empty-check '(1 2 3 4))
(format t "Sum of (1 2 3 4) is: ")
(sum-list '(1 2 3 4))
(format t "Reversed (1 2 3 4) is: ")
(list-reverse '(1 2 3 4))
(format t "Sorted (4 10 6 3): ")
(bubble-sort '(4 10 6 3))