(defmacro my-macro (x &body body) ;Defines a new macro named "my-macro" that takes in a parameter "x" and a body
  `(cond ((null ,x) nil) ;Checks if the parameter "x" is null, if it is, return nil
         ((atom ,x) ;Checks if the parameter "x" is an atom
          (let ((result (gensym))) ;Defines a new variable "result" with a unique name generated by the function "gensym"
            (setq ,result ,x) ;Sets the value of "result" to the value of "x"
            ,@body ;Evaluates the body passed in and returns the result
            ,result ;Returns the value of "result"
            ))
         (t ;If the parameter "x" is not null or an atom
          (let ((result (gensym))) ;Defines a new variable "result" with a unique name generated by the function "gensym"
            (setq ,result (car ,x)) ;Sets the value of "result" to the first element of "x"
            ,@body ;Evaluates the body passed in and returns the result
            ,result ;Returns the value of "result"
            ))))