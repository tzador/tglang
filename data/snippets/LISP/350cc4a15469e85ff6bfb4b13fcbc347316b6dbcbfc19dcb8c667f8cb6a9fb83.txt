;; define a function to calculate the factorial of a number
(defun factorial (n)
  (if (<= n 1) ; check if n is less than or equal to 1
    1 ; if so, return 1 as the factorial of 0 and 1 is 1
    (* n (factorial (- n 1))) ; otherwise, multiple n by the factorial of n-1 
  )
)

;; define a function to calculate the sum of a list of numbers
(defun sum-list (lst)
  (if (null lst) ; check if the list is empty
    0 ; if so, return 0 as the sum of an empty list is 0
    (+ (car lst) (sum-list (cdr lst))) ; otherwise, add the first element of the list to the sum of the rest of the list
  )
)

;; define a function to find the maximum number in a list
(defun max-list (lst)
  (if (null (cdr lst)) ; check if the list has only one element left
    (car lst) ; if so, return that element as the maximum
    (if (> (car lst) (max-list (cdr lst))) ; otherwise, compare the first element to the maximum of the rest of the list
      (car lst) ; if first element is larger, return it as the maximum
      (max-list (cdr lst)) ; otherwise, check the rest of the list for the maximum
    )
  )
)

;; define a function to reverse a list
(defun reverse-list (lst)
  (if (null lst) ; check if the list is empty
    nil ; if so, return nil as the reverse of an empty list is an empty list
    (append (reverse-list (cdr lst)) (list (car lst))) ; otherwise, recursively reverse the rest of the list and append the first element to it
  )
)