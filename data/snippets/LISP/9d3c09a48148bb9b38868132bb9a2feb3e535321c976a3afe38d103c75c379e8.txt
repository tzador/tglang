;; Function to perform matrix multiplication
(defun multiply-matrix (A B)
  "This function takes two matrices and
  performs matrix multiplication to generate a new matrix"
  (if (not (eq (length (car B)) (length A)))
    ;; If the number of columns in matrix A
    ;; is not equal to the number of rows in matrix B,
    ;; return an error
    (error "Number of columns in matrix A should be equal to number of rows in matrix B."))
  ;; Otherwise, proceed with the multiplication
  (let* ((A-rows (length A))
        (B-cols (length (car B)))
        (sum (* A-rows B-cols))
        (B (apply #'mapcar* (mapcar #'b-to-column B)))
        (result (make-array (list A-rows B-cols)
          :initial-element 0 :element-type 'number)))
    ;; Function to transpose matrix B
    (defun b-to-column (v)
      "This function transposes the passed matrix B,
      returns a list of column vectors from the original matrix"
      (if (listp v)
        (cons (car v) (b-to-column (cdr v)))
        nil))
    ;; Function to multiply each element of two lists and return the sum
    (defun dotproduct (xs ys)
      "This function takes two lists, multiplies each element
      and returns the sum of all the resulting products"
      (cond ((null xs) 0)
            (t (+ (* (car xs) (car ys)) (dotproduct (cdr xs) (cdr ys))))))
    ;; Loop through each element of matrix A row and matrix B column
    ;; to compute the dot product and store the result in the new matrix
    (dotimes (i A-rows)
      (dotimes (j B-cols)
        (setf (aref result i j) (dotproduct (nth i A) (nth j B)))))
    result))