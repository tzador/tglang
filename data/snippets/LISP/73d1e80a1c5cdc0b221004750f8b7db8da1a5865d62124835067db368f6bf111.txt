;; Define a function that checks if a number is prime
(defun is-prime (n)
  ; Set initial divisor and limit
  (let ((d 2)
        (limit (round (sqrt n))))
    ; Check all potential divisors
    (loop while (<= d limit)
      ; If divisor evenly divides n, return false
      if (zerop (mod n d)) do (return nil)
      ; Increase divisor by 1
      (incf d))
    ; Return true as default
    t))
;; Define a function that generates a list of prime numbers up to a given limit
(defun prime-numbers (limit)
  ; Set initial list with first prime number
  (let ((list (list 2)))
    ; Increment numbers to check by 2 (odd numbers only)
    (loop for n from 3 to limit by 2
      ; If number is prime, add to list
      if (is-prime n) do (push n list))
    ; Return list
    list))