;;Defining a function that checks if a number is prime or not
(defun is-prime (n)
  (cond
    ((<= n 1) nil) ;;; If n is less than or equal to 1, it is not prime
    ((= n 2) t) ;;; 2 is the only even prime number
    ((= (rem n 2) 0) nil) ;;; If n is even, it is not prime
    (t (do-prime-check n 3)) ;;; Otherwise, call the do-prime-check function to check if n is prime or not
  )
)

;; Helper function that checks if a number is divisible by any number less than or equal to its square root
(defun do-prime-check (n divisor)
  (cond
    ((= (rem n divisor) 0) nil) ;;; If n is divisible by divisor, it is not prime
    ((>= divisor (sqrt n)) t) ;;; If divisor is greater than or equal to the square root of n, n is prime
    (t (do-prime-check n (+ divisor 2))) ;;; Otherwise, increment divisor by 2 and call do-prime-check again
  )
)

;; Usage:
(is-prime 17) ;;; returns T
(is-prime 4) ;;; returns NIL
(is-prime 2) ;;; returns T
(is-prime 73) ;;; returns T