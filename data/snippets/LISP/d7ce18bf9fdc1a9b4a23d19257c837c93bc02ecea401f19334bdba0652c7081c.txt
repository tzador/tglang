;; This is a function that checks if a given number is prime or not.
(defun is-prime (n)
  (do ((i 2 (+ i 1))
       (prime t) ; initialize prime to true
       (limit (sqrt n) (sqrt n))) ; limit is the square root of n
      ((or (> i limit) (not prime)) prime) ; return prime if i > limit or if prime is false
    (when (and (= (mod n i) 0) (/= n i)) ; checks if n is divisible by i but is not equal to i
      (setf prime nil)))) ; if condition is met, set prime to false
 
;; This is a function that calculates the factorial of a given number.
(defun factorial (n)
  (if (= n 0)
      1 ; if n is equal to 0, return 1
      (* n (factorial (- n 1))))) ; else, return n multiplied by the factorial of n-1
 
;; This is a function that generates a list of prime numbers within a given range.
(defun prime-range (start end)
  (do ((n (+ start 1) (+ n 1))
       (primes (list) (list)) ; initialize primes list
       (prime t) ; initialize prime to true
       (limit (sqrt end) (sqrt end))) ; limit is the square root of end
      ((> n end) primes) ; return list of primes once n > end
    (do ((i 2 (+ i 1)))
        ((or (> i limit) (not prime))) ; break the loop once i > limit or if prime is false
      (when (and (= (mod n i) 0) (/= n i)) ; checks if n is divisible by i but is not equal to i
        (setf prime nil))) ; if condition is met, set prime to false
    (when prime
      (setf primes (append primes (list n)))) ; if prime is still true after loop, add n to primes list
    (setf prime t))) ; set prime back to true for next iteration
 
;; Usage example:
(is-prime 7) ; returns T
(factorial 5) ; returns 120
(prime-range 1 20) ; returns (2 3 5 7 11 13 17 19)