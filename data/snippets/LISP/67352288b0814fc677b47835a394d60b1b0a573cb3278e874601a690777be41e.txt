(defun iterative-merge-sort (list)
  "Sort the supplied list using an iterative merge sort algorithm."
  (labels ((pairs (list)
             (loop for i from 0 to (1- (length list)) by 2
                   collect (list (nth i list) (nth (1+ i) list)))))
    (let ((l-list list)
          (r-list (cdr list))
          (result list)
          (result-tail nil))
      (while (cdr l-list)
        (unless r-list
          (setf (cdr result-tail) l-list)
          (return-from iterative-merge-sort result))
        (cond ((< (car l-list) (car r-list))
               (setf (cdr result-tail) l-list
                     result-tail (cdr result-tail)
                     l-list (cdr l-list)))
              (t
               (setf (cdr result-tail) r-list
                     result-tail (cdr result-tail)
                     r-list (cdr r-list))))
        (setf result-tail (cdr result-tail)))
      (setf (cdr result-tail) (or l-list r-list)
            result-tail nil)
      (let ((next-r (cdr result))
            (next-next-r (cddddr result))
            (i 2)
            (n 4))
        (block comparing
          (loop while (and next-r next-next-r)
                do (let ((l next-r)
                         (r (loop repeat i
                                  appending (when next-next-r
                                              (prog1 (car next-next-r)
                                                (setq next-next-r (cdr next-next-r))))))
                         (next-r (loop repeat n
                                   appending (when next-r
                                               (prog1 (car next-r)
                                                 (setq next-r (cdr next-r)))))))
                     (setf (loop for x in (append l r)
                                 if (not (>= (car x) (cadr x)))
                                 do (return-from comparing x))
                           (and next-r next-next-r (return-from comparing nil))))
                (incf n 4)
                (incf i 2))))))