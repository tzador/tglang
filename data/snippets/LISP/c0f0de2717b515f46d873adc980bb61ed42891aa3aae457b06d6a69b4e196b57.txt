(defun merge-sort (lst)
  "This recursive function takes a list 'lst' and performs merge sort on it."
  (let ((len (length lst)))
    (if (<= len 1)
      lst
      (let* ((half (/ len 2))
             (left (subseq lst 0 half))
             (right (subseq lst half)))
      (merge (merge-sort left) (merge-sort right))))))

(defun merge (left right)
  "This function takes two lists 'left' and 'right', and merges them together in sorted order."
  (let (result)
    (loop
      while (and left right)
      do (if (<= (car left) (car right))
           (push (pop left) result)
           (push (pop right) result)))
    (when left (setq result (nconc result left)))
    (when right (setq result (nconc result right)))
    (reverse result)))