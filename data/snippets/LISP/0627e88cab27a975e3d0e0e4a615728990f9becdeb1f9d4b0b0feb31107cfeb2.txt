(defun insertionsort (lst)
  "Sorts a list using the insertion sort algorithm."
  (if (endp lst) lst                  ; base case: empty list
    (let ((first (car lst))           ; create variables for first element,
          (rest (cdr lst)))           ; and remaining elements
      (insert first                   ; insert the first element into the
        (insertionsort rest))))       ; sorted list of remaining elements

(defun insert (elem lst)
  "Inserts an element into a sorted list, maintaining the sort order."
  (cond ((endp lst) (list elem))      ; base case: empty list, insert at end
        ((< elem (car lst))           ; if element is smaller than current
          (cons elem lst))            ; list head, insert at beginning
        (t                            ; otherwise, recursively insert into
          (cons (car lst)              ; remaining list until proper position
                (insert elem (cdr lst))))))

(insertionsort '(4 2 5 1 3))          ; => (1 2 3 4 5)