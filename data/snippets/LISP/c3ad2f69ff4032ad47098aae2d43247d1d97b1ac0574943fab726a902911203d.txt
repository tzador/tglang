;; This is a function that checks if a number is prime
(defun is-prime (n)
  (cond ((<= n 1) nil)
        ((= n 2) t)
        ((= n 3) t)
        ((= 0 (mod n 2)) nil)
        ((= 0 (mod n 3)) nil)
        (t (let ((f 5)
                 (limit (floor (sqrt n))))
             (loop while (<= f limit)
                   do (if (= 0 (mod n f))
                          (return nil)
                          (setf f (+ f 2))))
             (return t)))))
             
;; This function takes in a list of numbers and filters out the prime numbers using the previously defined is-prime function
(defun filter-primes (list)
  (remove-if-not #'is-prime list))

;; Example usage
(filter-primes '(1 2 3 4 5 6 7 8 9 10))
;; Output: (2 3 5 7)