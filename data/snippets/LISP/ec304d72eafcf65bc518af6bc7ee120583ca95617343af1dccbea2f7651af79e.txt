;; Define a function that takes in a list as a parameter and returns the sum of all numbers in the list
(defun sum-list (list)
  (let ((sum 0))							; declare and initialize a variable to store the sum
    (dolist (num list)						; loop through the list
      (setq sum (+ sum num)))				; update the sum variable by adding the current number to it
    sum))									; return the final sum

;; Define a function that converts a string to uppercase
(defun to-upper (string)
  (format nil "~(~a~)" string))				; use the format function to convert the string to uppercase

;; Define a function that recursively calculates the factorial of a number
(defun factorial (n)
  (if (zerop n)								; if the number is 0
      1										; then return 1
      (* n (factorial (- n 1)))))			; otherwise, recursively call the function with n-1 and multiply it by n

;; Define a function that takes in a binary tree and returns the max element
(defun find-max (tree)
  (if (listp tree)							; check if the tree is a list (i.e. a node in the tree)
      (max (first tree)						; then compare the first element (left subtree) with the second element (right subtree)
           (find-max (second tree)))			; recursively call the function on the right subtree
      tree))								; if the tree is not a list, then it is a leaf node, so return it

;; Define a macro that swaps the values of two variables
(defmacro swap-vals (var1 var2)
  `(let ((temp ,var1))						; create a temporary variable to store the value of var1
     (setq ,var1 ,var2						; assign the value of var2 to var1
           ,var2 temp)))					; assign the value of temp (original value of var1) to var2

;; Define a function that applies a function to each element in a list
(defun map (func list)
  (if list									; if the list is not empty
      (cons (funcall func (car list))		; apply the function to the first element of the list and add it to a new list
            (map func (cdr list)))			; recursively call the function on the rest of the list
      nil))									; if the list is empty, return nil

;; Example usage of the functions/macros defined above

;; Calculate the sum of all numbers in a list
(sum-list '(1 2 3 4))						; Output: 10

;; Convert a string to uppercase
(to-upper "hello")							; Output: "HELLO"

;; Calculate the factorial of a number
(factorial 5)								; Output: 120

;; Find the max element in a binary tree
(find-max '(5 (2 (1) (4)) (7 (6) (9))))	; Output: 9

;; Swap the values of two variables
(let ((a 1)
      (b 2))
  (swap-vals a b)							; Output: a=2, b=1
  (list a b))								; Output: (2 1)

;; Apply a function to each element in a list
(map #'factorial '(1 2 3 4 5))				; Output: (1 2 6 24 120)