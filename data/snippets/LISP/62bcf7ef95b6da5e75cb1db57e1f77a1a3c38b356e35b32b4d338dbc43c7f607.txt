; This function checks if a given number is a prime number using recursion
(defun is-prime (n)
    (if (= n 1) ; Base case: 1 is not a prime number
        "False"
        (let (factor-found nil
             (i 2))
            (loop (if (<= i n) ; Loop through all numbers from 2 to n
                (if (or (= n i) (= n 0)) ; Check if number is divisible by current number
                    (if (and factor-found (not (= factor-found i))) ; A previously found factor was not equal to the current number
                        "False"
                        i) ; Return True if no previous factor was found
                    (let ((result (mod n i))) ; Check if current number is a multiple of i
                        (if (= result 0) ; If it is a multiple, update factor-found and continue loop
                            (setf factor-found i)
                            (setq i (+ i 1)))))))
    "True")
)