;;; the user-defined function "sort"
;;; parameters: list, key
;;; uses recursion to sort a list of numbers in ascending order based on a given key
(defun sort (lst key)  
  (if (null lst)  
      nil  
      (append (sort (remove (apply #'max (cdr lst)) lst) key)  
              (list (apply #'max (cdr lst))))))  
  
;;; the function "merge"
;;; takes two sorted lists and merges them into one sorted list
;;; parameters: a, b
(defun merge (a b)  
  (cond
    ((null a) b)
    ((null b) a)
    ((< (car a) (car b)) (cons (car a) (merge (cdr a) b)))
    (t (cons (car b) (merge a (cdr b))))))  
  
;;; the user-defined function "merge-sort"
;;; parameters: list, key
;;; uses recursion and the functions "merge" and "sort" to perform a merge sort on a list of numbers
(defun merge-sort (lst key)  
  (if (null lst)  
      nil  
      (if (null (cdr lst))  
          lst  
          (merge (sort (car lst) key) (merge-sort (cdr lst) key)))))  
  
;;; example usage:  
;;; (merge-sort '(5 2 8 1 4 9) <)  
;;; => (1 2 4 5 8 9)