;;; Function that calculates the nth Fibonacci number
;;; using dynamic programming
;;; @param [integer] n: the index of the desired Fibonacci number
;;; @return [integer]: the nth Fibonacci number
(defun fib (n)
  (assert (integerp n) "n must be an integer") ;;; make sure n is an integer
  (loop ;;; use loop for iteration
    with fibs = (make-array (1+ n) :initial-contents (list 0 1)) ;;; create an array to store previous values
    for i upfrom 2 ;;; start at index 2 because we already have values at 0 and 1
    do (setf (aref fibs i) (+ (aref fibs (- i 1)) (aref fibs (- i 2)))) ;;; calculate the next Fibonacci number
  (aref fibs n)) ;;; return the nth Fibonacci number