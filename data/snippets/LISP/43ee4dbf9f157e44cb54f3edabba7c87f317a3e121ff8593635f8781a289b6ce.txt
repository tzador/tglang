(defmacro sum-list (list)
  "A macro that takes in a list and returns the sum of its elements"
  `(reduce #'+ ,list))

(defun recursive-fib (n)
  "A recursive function that calculates the nth Fibonacci number"
  (if (< n 2)
      n
      (+ (recursive-fib (- n 1)) (recursive-fib (- n 2)))))

(defun iterative-fib (n)
  "An iterative function that calculates the nth Fibonacci number"
  (let ((a 0) (b 1) (sum 0))
    (dotimes (i n)
      (setf sum (+ a b))
      (setf a b)
      (setf b sum))
    a))

(defun quicksort (list)
  "A function that sorts a list using the quicksort algorithm"
  (if (null list)
      nil
      (let ((pivot (car list))
            (rest (cdr list)))
        (append (quicksort (remove-if (lambda (x) (> x pivot)) rest))
                (list pivot)
                (quicksort (remove-if (lambda (x) (<= x pivot)) rest))))))

(with-open-file (in "input.txt" :direction :input)
  "A block of code that opens a text file and counts the number of lines in it"
  (loop for line = (read-line in nil)
        while line
        count line into num-lines)
  (format t "Number of lines in file: ~d~%" num-lines)))

(mapcar 'square '(1 2 3 4 5))
; => (1 4 9 16 25)

(defclass vehicle ()
  "A base class for different types of vehicles"
  ((make :accessor make :initarg :make)
   (model :accessor model :initarg :model)
   (year :accessor year :initarg :year)
   (color :accessor color :initarg :color)
   (fuel-type :accessor fuel-type :initarg :fuel-type)))

(defparameter *car* (make-instance 'vehicle :make "Honda" :model "Civic" :year 2020 :color "Blue" :fuel-type "Gas"))
; => #<VEHICLE {10018EBE53}>