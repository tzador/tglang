;;; This code snippet is a function that takes in two lists and checks if the second list is a sublist 
;;; of the first list.

;;; Function name: check-sublist

;;; Parameters:
;;;     input-list: The list to be checked
;;;     sublist: The list to check against

;;; Returns: 
;;;     True if sublist is a sublist of input-list, False otherwise

(defun check-sublist (input-list sublist)
    (let ((input (copy-list input-list))
          (sub (copy-list sublist)))
    (do ((input-index 0 (+ 1 input-index)))
        ((> input-index (- (length input) (length sub)))
            nil)
        (when (equal (subseq input input-index (+ input-index (length sub)))
                    sub)
            (return t)))))