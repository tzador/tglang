;; Define a function 'bubble-sort' that takes in a list 'lst' as input
;; and sorts the elements in ascending order using the bubble sort algorithm

;;
;; Helper function 'swap' swaps the elements at index 'i' and 'j' in list 'lst'
;;
(defun swap (lst i j)
  (let ((temp (nth i lst)))
    (setf (nth i lst) (nth j lst))
    (setf (nth j lst) temp)))

;;
;; Main function 'bubble-sort'
;; First sorts the 'lst' in the first pass, then checks if any swap is made
;; If no swap is made, then the list is already sorted and function returns the list
;; Otherwise, the function recursively calls itself to sort the remaining unsorted elements
;;
(defun bubble-sort (lst)
  (let ((n (length lst)) (swapped nil))
    (dotimes (i n)
      (when (and (nth i lst) (nth (+ i 1) lst) (> (nth i lst) (nth (+ i 1) lst)))
        (swap lst i (+ i 1))
        (setf swapped t)))
    (if swapped (bubble-sort lst) lst)))

;; Example usage
(bubble-sort '(9 5 2 6 3)) ; returns '(2 3 5 6 9)