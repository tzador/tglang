(defparameter *pi* 3.14159265358979323846) ; initializes a global variable *pi* with the value of 3.14159265358979323846

(defun factorial (n) ; defines a function named factorial with a parameter n
  (if (zerop n) ; if statement checking if the value of n is equal to 0
      1 ; if the statement is true, return the value of 1
      (* n (factorial (1- n))))) ; if the statement is false, multiply n by the result of calling the factorial function recursively with n-1 as the parameter

(defun fibonacci (n) ; defines a function named fibonacci with a parameter n
  (if (or (= n 0) (= n 1)) ; if statement checking if the value of n is equal to 0 or 1
      n ; if the statement is true, return the value of n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; if the statement is false, return the sum of calling the fibonacci function recursively with n-1 and n-2 as the parameters

(loop for i from 0 to 10 ; for loop that iterates from 0 to 10
      do (princ (factorial i)) ; executes the factorial function and prints the result to the console
      do (print (* i i) "is the square of" i) ; prints the square of i and a string to the console
      if (evenp i) ; if statement checking if the value of i is even
          collect (* i *pi*) ; if the statement is true, collect and return the value of i multiplied by the global variable *pi*
          collect (fibonacci i))) ; if the statement is false, collect and return the value of calling the fibonacci function with i as the parameter