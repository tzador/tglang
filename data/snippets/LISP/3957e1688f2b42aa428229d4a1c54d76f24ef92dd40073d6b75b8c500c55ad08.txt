;;; Function: COMBINATION
;;;
;;; Takes a list of items and returns all unique combinations of those items in a list.
;;;
;;; Parameters:
;;; LIST - A list of items
;;;
;;; Returns:
;;; A list of lists, each containing a unique combination of items from the original list.
;;; 
;;; Example:
;;; (combination '(1 2 3)) ; returns ((1)(2)(3)(1 2)(1 3)(2 3)(1 2 3))
;;;
(defun combination (list)
  (if (null list) ;; if list is empty, return empty list
      '()
      (let (result) ;; initialize empty list to hold result
        (dolist (item list) ;; loop through each item in the list
          (let (combinations) ;; initialize empty list to hold combinations for current item
            (dolist (prev-combo result) ;; loop through each previous combination in result list
              ;; create a new combination by adding the current item to the previous combination
              (let ((new-combo (append prev-combo (list item)))) 
                (push new-combo combinations))) ;; add the new combination to the list of combinations
            ;; add the list of combinations for the current item to the result list
            (push combinations result)))
        (nreverse result)))) ;; reverse the result list so the combinations are in the correct order