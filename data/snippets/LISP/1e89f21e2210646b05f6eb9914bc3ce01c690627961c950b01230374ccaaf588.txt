;;; This function takes in a list of numbers and returns a new list
;;; with only the odd numbers from the original list
(defun filter-odd-numbers (lst)
  (if (null lst)
      '()
      (let ((head (car lst)) (tail (cdr lst)))
        (cond
          ((oddp head) (cons head (filter-odd-numbers tail)))
          (t (filter-odd-numbers tail))))))

;;; Example input: (1 2 3 4 5 6)
;;; Example output: (1 3 5)
(filter-odd-numbers (1 2 3 4 5 6))