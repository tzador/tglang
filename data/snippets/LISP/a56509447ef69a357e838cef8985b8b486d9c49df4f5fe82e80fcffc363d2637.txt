;;; The following code snippet implements a quicksort algorithm in LISP

;;; Create a function to partition the list into two sublists based on a pivot element
(defun partition (lst pivot)
  (let ((smaller (remove-if-not #'(lambda (x) (<= x pivot)) lst))
        (larger (remove-if-not #'(lambda (x) (> x pivot)) lst)))
    (append smaller (list pivot) larger)))

;;; Create a function to recursively sort the list using the quicksort algorithm
(defun quicksort (lst)
  (if (<= (length lst) 1)
      lst
      (let ((pivot (nth (random (length lst)) lst)))
        (append (quicksort (remove pivot lst)) pivot (quicksort (partition lst pivot))))))

;;; Example input list
(defvar input-list '(9 5 2 7 1 4))

;;; Print the sorted list
(format t "Sorted list: ~a" (quicksort input-list))

;;; Output:
;;; "Sorted list: (1 2 4 5 7 9)"