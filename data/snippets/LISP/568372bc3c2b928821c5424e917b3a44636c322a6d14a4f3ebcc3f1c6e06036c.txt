;This is a function that returns the factorial of a given number

(defvar *factorial-memo* (make-hash-table :test #'equal)) ;Creates a memoization hash table to store previously calculated factorials

(defun factorial (n) ;Defines a function called "factorial" that takes in a parameter "n"
  (cond ((= n 0) 1) ;If n is equal to 0, returns 1 (base case)
        ((gethash n *factorial-memo*) ;Checks if n is already in the hash table
         (gethash n *factorial-memo*)) ;If so, returns the previously calculated factorial
        (t ;If n is not in the hash table, calculates the factorial recursively
         (setf (gethash n *factorial-memo*) (* n (factorial (- n 1)))) 
	 ;Stores the result in the hash table and returns the factorial after multiplying it by n
         (gethash n *factorial-memo*)))) ;Returns the stored value (memoization)

(factorial 5) ;Calls the function with the parameter 5 and returns the factorial, which is 120