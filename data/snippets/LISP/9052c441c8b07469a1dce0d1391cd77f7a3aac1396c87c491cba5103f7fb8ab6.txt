;; Function to calculate the n-th term in the Fibonacci sequence
(defun fibonacci (n)
  (if (<= n 1) ; Base case
    n
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; Recursive case

;; Function to find the minimum value in a list
(defun find-min (list)
  (if (null (cdr list)) ; Base case, if only one element in list
    (car list)
    (let ((min (find-min (cdr list)))) ; Recursive case
      (if (< (car list) min)
        (car list)
        min))))

;; Function to implement binary search on a sorted list
(defun binary-search (list target start end)
  (if (> start end) ; Base case, target not found
    -1
    (let ((middle (/ (+ start end) 2)))
      (cond ((= (nth middle list) target) middle) ; If middle element is target, return index
            ((< (nth middle list) target) ; If middle element is less than target, search in upper half
             (binary-search list target (+ middle 1) end))
            ((> (nth middle list) target) ; If middle element is greater than target, search in lower half
             (binary-search list target start (- middle 1)))))))