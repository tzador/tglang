(defun count-inversions (list count)           ; define a function that takes in a list and a count as parameters
  (if (<= (length list) 1)                     ; if the list has a length of 1 or less
      count                                   ; return the count
      (let* ((mid (/ (length list) 2))         ; define a variable 'mid' as half of the length of the list
             (left (subseq list 0 mid))        ; define a variable 'left' as first half of the list
             (right (subseq list mid))         ; define a variable 'right' as second half of the list
             (left-count (count-inversions left 0))  ; recursively call the function on the left half of the list with 0 as the initial count
             (right-count (count-inversions right 0)) ; recursively call the function on the right half of the list with 0 as the initial count
             (merge-count (merge-and-count left right count))) ; call the 'merge-and-count' function on both halves and add the count
        (+ merge-count left-count right-count)))) ; add the merge-count to the left and right counts and return the total count

(defun merge-and-count (left right count)                 ; define a function that takes in 'left', 'right' and 'count' as parameters
  (let ((result '())                                      ; define an empty list 'result'
        (left-index 0)                                    ; define variable 'left-index' as 0
        (right-index 0)                                   ; define variable 'right-index' as 0
        (total-length (+ (length left) (length right)))   ; define variable 'total-length' as the sum of lengths of 'left' and 'right'
        (current-count count))                            ; define variable 'current-count' as the input count
    (loop while (< (+ left-index right-index) total-length)  ; loop until the sum of 'left-index' and 'right-index' is equal to 'total-length'
          do (cond                                           ; when:
               ((= left-index (length left))               ; if 'left-index' is equal to the length of 'left'
                (setq result (append result                 ; append the remaining elements of 'right' to 'result'
                                       (subseq right right-index)))
                (return result))                           ; return 'result'
               ((= right-index (length right))             ; if 'right-index' is equal to the length of 'right'
                (setq result (append result                 ; append the remaining elements of 'left' to 'result'
                                       (subseq left left-index)))
                (return result))                           ; return 'result'
               ((< (nth left-index left)                   ; if 'nth' element of 'left' is less than the 'nth' element of 'right'
                   (nth right-index right))
                (incf current-count)                        ; increment 'current-count'
                (push (nth left-index left) result)         ; push the 'nth' element of 'left' to 'result'
                (incf left-index))                          ; increment 'left-index'
               (T                                          ; otherwise (if the above conditions are not met)
                (push (nth right-index right) result)       ; push the 'nth' element of 'right' to 'result'
                (incf right-index)))                        ; increment 'right-index'
          finally (return (values result                   ; return a multiple-value with 'result' and 'current-count'
                                  current-count)))))

(defparameter *list* '(5 1 4 2 3))                                                      ; define a global variable 'list' for testing
(format T "Number of inversions: ~D" (count-inversions *list* 0))        ; print the number of inversions of 'list'