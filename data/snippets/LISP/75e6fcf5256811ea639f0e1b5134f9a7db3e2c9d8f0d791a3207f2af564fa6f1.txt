;; Define a function that calculates the factorial of a given number
(defun factorial (n)
  "Calculates the factorial of the given number n."
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

;; Define a recursive function to generate a list of fibonacci numbers up to n
(defun fibonacci (n)
  "Returns a list of fibonacci numbers up to n."
  (if (<= n 1)
      (list n)
      (concatenate 'list (list (+ (car (fibonacci (- n 1))) (car (fibonacci (- n 2)))))
                     (fibonacci (- n 1)))))

;; Define a hash table to store key-value pairs
(defparameter *hash-table* (make-hash-table))

;; Add key-value pairs to the hash table
(setf (gethash "key1" *hash-table*) "value1")
(setf (gethash "key2" *hash-table*) "value2")
(setf (gethash "key3" *hash-table*) "value3")

;; Define a function to print out the key-value pairs in the hash table
(defun print-hash-table ()
  "Prints out the key-value pairs in the hash table."
  (dolist (key (sort (hash-table-keys *hash-table*) 'string<))
    (format t "~a: ~a~%" key (gethash key *hash-table*))))

;; Define a class for a person, with attributes for name and age
(defclass person ()
  ((name :accessor name :initarg :name)
   (age :accessor age :initarg :age)))

;; Create an instance of the person class
(defparameter *person* (make-instance 'person :name "John" :age 25))

;; Define a function to print out the person's name and age
(defun print-person ()
  "Prints out the person's name and age."
  (format t "Name: ~a~%Age: ~a~%" (name *person*) (age *person*)))

;; Call the functions to calculate the factorial of 5, generate fibonacci numbers up to 10, print out the hash table, and print out the person's name and age
(factorial 5)
(fibonacci 10)
(print-hash-table)
(print-person)