;; Function to check if a given number is prime
(defun check-prime (number)
  (cond ((= number 2) t)
        ((= number 1) nil)
        ((= number 0) nil)
        ((> number 2)
          (do ((i 2 (+ i 1))
              (result t))
              (nil))
        (if(eq(mod number i) 0)
          (setq result nil)
          (setq i (- i 1))
          (cond ((< i 2) nil)
                ((> i 1) (do (print "i is: " i) (nil)))
                (nil)
                ))
          result)))
;; Explanation:
;; This code snippet defines a function named "check-prime" that checks if a given number is prime or not.
;; It takes in a parameter "number" and uses the "cond" function to check if the number is 2, 1, or 0.
;; If the number is 2, it returns "t" (true), and if the number is 1 or 0, it returns "nil" (false).
;; If the number is greater than 2, it sets up a loop using the "do" function.
;; The "do" function has three parameters: a list of variables to initialize and their initial values, a condition, and a body.
;; In this loop, the variable "i" is initialized as 2 and is incremented by 1 in each iteration.
;; The variable "result" is also set to "t" (true) initially.
;; Inside the loop, an "if" statement is used to check if the remainder of the number divided by "i" is equal to 0.
;; If it is, then the number is not prime, so the "result" variable is set to "nil" (false).
;; If not, the "i" variable is decremented by 1, and the loop continues.
;; Once the loop is completed, the "result" variable is returned as the output of the function.