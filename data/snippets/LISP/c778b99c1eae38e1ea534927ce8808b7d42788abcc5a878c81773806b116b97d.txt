;; This is a function that takes in a list and a number as arguments
;; It creates a new list by multiplying each element in the original list by the given number
(defun multiply-list (list number) 
  (if (null list) ; If the list is empty, return an empty list
      nil
  (cons ; Otherwise, cons (add) the first element of the list multiplied by the number
      (* (car list) number)
      (multiply-list (cdr list) number)))) ; And recurse, passing in the rest of the list and the number

;; Example usage: 
;; (multiply-list '(1 2 3) 5)
;; Output: (5 10 15)

;; This is a recursive function that calculates the factorial of a given number
(defun factorial (n)
  (if (zerop n) ; If n is equal to 0, return 1 (base case)
      1
  (* n (factorial (- n 1))))) ; Otherwise, multiply n by the factorial of n-1 (recursive case)

;; Example usage:
;; (factorial 5)
;; Output: 120