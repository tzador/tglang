;;; This is a function that takes in two lists and merges them into one sorted list.
;;; It uses the merge sort algorithm to combine the lists.
(defun merge (list1 list2)
  (if (null list1) ; if the first list is empty, return the second list
      list2
      (if (null list2) ; if the second list is empty, return the first list
          list1
          (if (< (car list1) (car list2)) ; if the first element of list1 is smaller than first element of list2
              (cons (car list1) (merge (cdr list1) list2)) ; add the first element of list1 to the merged list and recurse with the rest of list1 and list2
              (cons (car list2) (merge list1 (cdr list2))) ; else, add the first element of list2 to the merged list and recurse with list1 and rest of list2
          )
      )
  )
)

;;; Example usage
(merge '(1 3 5 7) '(2 4 6 8)) ;;; Output: (1 2 3 4 5 6 7 8)

;;; This is a helper function for the merge sort algorithm.
;;; It splits the list into two sublists and recursively calls merge on them.
(defun merge-sort (list)
  (if (<= (length list) 1) ; if list has 1 or less elements, it is already sorted. 
      list
      (let ((mid (floor (/ (length list) 2)))) ; get middle index of list
        (merge (merge-sort (subseq list 0 mid)) ; recursively call merge-sort on left sublist
               (merge-sort (subseq list mid (length list))) ; recursively call merge-sort on right sublist
        )
      )
  )
)

;;; Example usage
(merge-sort '(2 9 3 5 1 8 4 6 7)) ;;; Output: (1 2 3 4 5 6 7 8 9)