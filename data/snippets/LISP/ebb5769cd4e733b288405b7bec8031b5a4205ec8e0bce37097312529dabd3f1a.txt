(defun factorial (n)
  "Recursive implementation of factorial function"
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

(defun fibonacci (n)
  "Recursive implementation of fibonacci sequence"
  (if (<= n 1)
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

(defun flatten (tree)
  "Recursive implementation of flatten function for nested lists"
  (if (null tree)
      nil
      (if (atom tree)
          (list tree)
          (append (flatten (car tree)) (flatten (cdr tree))))))

(defun bubble-sort (list)
  "Recursive implementation of bubble sort algorithm"
  (if (null list)
      nil
      (let ((sorted-minus-one (bubble-sort (cdr list))))
        (if (null sorted-minus-one)
            (list (car list))
            (insert-smaller (car list) sorted-minus-one)))))

(defun insert-smaller (x list)
  "Helper function for bubble-sort, inserts element into sorted list"
  (if (null list)
      (list x)
      (if (< x (car list))
          (cons x list)
          (cons (car list) (insert-smaller x (cdr list))))))

(defun merge-sort (list)
  "Recursive implementation of merge sort algorithm"
  (if (null list)
      nil
      (if (null (cdr list))
          list
          (let ((unsorted-first-half (take (length list) (floor (/ (length list) 2)) list))
                (unsorted-second-half (drop (length list) (floor (/ (length list) 2)) list)))
            (merge (merge-sort unsorted-first-half) (merge-sort unsorted-second-half))))))

(defun merge (list1 list2)
  "Helper function for merge-sort, merges 2 sorted lists"
  (if (null list1)
      list2
      (if (null list2)
          list1
          (if (< (car list1) (car list2))
              (cons (car list1) (merge (cdr list1) list2))
              (cons (car list2) (merge list1 (cdr list2)))))))

(defun quick-sort (list)
  "Recursive implementation of quick sort algorithm"
  (if (null list)
      nil
      (if (null (cdr list))
          list
          (let ((pivot (car list)))
            (append
             (quick-sort (filter (lambda (x) (< x pivot)) list))
             (list pivot)
             (quick-sort (filter (lambda (x) (>= x pivot)) list)))))))

(defun filter (func list)
  "Helper function for quick-sort, filters list based on given function"
  (if (null list)
      nil
      (if (func (car list))
          (cons (car list) (filter func (cdr list)))
          (filter func (cdr list))))))