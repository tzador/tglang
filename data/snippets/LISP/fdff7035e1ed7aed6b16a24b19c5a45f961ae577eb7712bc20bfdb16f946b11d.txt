(letrec
    ;; Define a function that will iterate through a list and return a new list with elements doubled
    ((double-list (lambda (lst)
                    (cond
                        ;; If list is empty, return empty list
                        ((null lst) nil)
                        ;; If first element of list is a list, recursively call "double-list" on that element and add it to the front of the new list
                        ((listp (car lst)) (cons (double-list (car lst)) (double-list (cdr lst))))
                        ;; Otherwise, multiply first element by 2 and add it to the front of the new list
                        (t (cons (* 2 (car lst)) (double-list (cdr lst))))))))
    ;; Define a function that will iterate through a list and add 1 to each element
    (add-one (lambda (lst)
                (cond
                    ;; If list is empty, return empty list
                    ((null lst) nil)
                    ;; Otherwise, add 1 to first element and add it to the front of the new list
                    (t (cons (+ 1 (car lst)) (add-one (cdr lst)))))))
    ;; Define a function that will take two lists and combine them into a list of pairs
    (combine (lambda (lst1 lst2)
                (cond
                    ;; If either list is empty, return empty list
                    ((or (null lst1) (null lst2)) nil)
                    ;; Otherwise, create a new pair with the first element of each list and recursively call "combine" on the remaining elements
                    (t (cons (cons (car lst1) (car lst2)) (combine (cdr lst1) (cdr lst2)))))))
  ;; Examples of using the defined functions with sample lists
  (double-list '(1 2 3 4 5)) ;=> '(2 4 6 8 10)
  (add-one '(1 2 3 4 5)) ;=> '(2 3 4 5 6)
  (combine '(1 2 3) '(a b c)) ;=> '((1 . a) (2 . b) (3 . c)))
  )