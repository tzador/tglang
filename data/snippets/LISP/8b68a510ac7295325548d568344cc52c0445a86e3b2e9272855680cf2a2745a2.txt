;;;This is a function that calculates the factorial of a given number
(defun factorial (num)
  "Calculates the factorial of a given number"
  (if (<= num 1)
      1
      (* num (factorial (- num 1)))))

;;;Example usage:
(factorial 5) ;;;Output: 120

;;;This is a recursive function which uses tail recursion to improve performance
(defun factorial-tr (num &optional (acc 1))
  "Calculates the factorial of a given number using tail recursion"
  (if (<= num 1)
      acc
      (factorial-tr (- num 1) (* acc num))))

;;;Example usage:
(factorial-tr 5) ;;;Output: 120

;;;This is a function that returns a list of the first n numbers in the Fibonacci sequence
(defun fibonacci (n &optional (seq '(0 1)))
  "Returns a list of the first n numbers in the Fibonacci sequence"
  (if (<= n 2)
      seq
      (let ((next (+ (car (last seq)) (car (last (butlast seq))))))
        (fibonacci (- n 1) (append seq (list next))))))

;;;Example usage:
(fibonacci 6) ;;;Output: (0 1 1 2 3 5)