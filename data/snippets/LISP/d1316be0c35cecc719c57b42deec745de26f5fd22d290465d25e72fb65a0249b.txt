;;; A function that takes in a list of numbers and returns
;;; the sum of the squares of those numbers

;;; Define the function "sum-of-squares" with one parameter "numbers"
(defun sum-of-squares (numbers)
  
  ;;; Initialize the variable "sum" with value 0
  (let ((sum 0))
    
    ;;; Use a "do" loop to iterate through the list of numbers
    (do ((numlist numbers (cdr numlist)))
        
        ;;; Set the condition to exit the loop when there are no more numbers
        ((null numlist) sum)
        
        ;;; Within the loop, square each number and add it to the sum
        (incf sum (* (car numlist) (car numlist)))
      )
    )
  )
  
;;; Test the function by passing in a list of numbers
(sum-of-squares (list 1 2 3 4 5))

;;; Output: 
;;; Returns 55, the sum of the squares of the numbers in the list
;;; (1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55)