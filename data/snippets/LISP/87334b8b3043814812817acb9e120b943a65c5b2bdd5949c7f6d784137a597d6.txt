;;; This function calculates the factorial of a given number
;;; Note: recursion is used to solve this problem

(defun factorial (n) ;;; declare a function named factorial with parameter n
    (if (equal n 0) ;;; check if n is equal to 0
        1 ;;; if yes, return the base case for factorial, which is 1
        (* n (factorial (- n 1))) ;;; if no, multiply n with factorial of (n-1)
    )
)

(factorial 5) ;;; call the function with n = 5, which should return 120 as the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120

;;; Output: 120