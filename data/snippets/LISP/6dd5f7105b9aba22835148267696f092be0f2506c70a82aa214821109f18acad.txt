;; Define a function to calculate the factorial of a number
(defun factorial (n)
  (if (= n 0)  ; if n equals 0 
      1         ; then return 1
      (* n (factorial (- n 1))) ; else multiply n by the factorial of n-1
))

;; Call the factorial function with argument 5
(factorial 5) ;; Output: 120 (5*4*3*2*1)

;; Define a function to find the sum of squares of numbers in a list
(defun sum-of-squares (lst)
  (if (null lst) ; if list is empty
      0           ; then return 0
      (+ (* (car lst) (car lst)) (sum-of-squares (cdr lst))) ; else square the first element and add it to the sum of squares of the remaining elements
))

;; Call the sum-of-squares function with argument (1 2 3 4 5)
(sum-of-squares '(1 2 3 4 5)) ;; Output: 55 (1^2 + 2^2 + 3^2 + 4^2 + 5^2)

;; Define a function to check if a word is a palindrome
(defun palindrome (word)
  (if (<= (length word) 1) ; if word is 1 character or less
      t                     ; then it is a palindrome, return true
      (and (equal (first word) (last word)) (palindrome (butlast (rest word)))) ; else check if the first and last characters are equal, and recursively check the remaining characters
))

;; Call the palindrome function with argument "racecar"
(palindrome "racecar") ;; Output: T (true)