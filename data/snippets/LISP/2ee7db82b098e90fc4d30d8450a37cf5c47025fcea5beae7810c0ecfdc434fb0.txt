;; define a function for calculating the factorial of a number
(defun factorial (num)
  "Calculates the factorial of a number"
  (if (<= num 1) 
      1
      (* num (factorial (- num 1)))
  )
)

;; define a function for calculating the power of a number
(defun power (base exponent)
  "Calculates the power of a number"
  (if (<= exponent 0) 
      1
      (* base (power base (- exponent 1)))
  )
)

;; define a function for calculating the binomial coefficient of two numbers
(defun binomial-coefficient (n k)
  "Calculates the binomial coefficient of n and k"
  (/ (factorial n)
     (* (factorial k)
        (factorial (- n k))
     )
  )
)

;; define a function for calculating the sum of binomial coefficients for a given row in Pascal's triangle
(defun pascals-triangle-sum (row)
  "Calculates the sum of binomial coefficients for a given row in Pascal's triangle"
  (let ((total 0))
    ;; loop through each element in the row
    (dolist (col (reverse (range row)))
      ;; calculate the binomial coefficient for the current element
      (setq coefficient (binomial-coefficient row col))
      ;; add the coefficient to the total
      (setq total (+ total coefficient))
    )
    ;; return the total
    total
  )
)

;; example usage:
(pascals-triangle-sum 5) ;; => 32
(pascals-triangle-sum 8) ;; => 128