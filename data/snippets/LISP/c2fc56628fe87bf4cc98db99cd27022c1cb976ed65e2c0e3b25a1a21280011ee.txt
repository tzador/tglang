;;; This code snippet calculates the determinant of a square matrix using recursive function calls
(defun determinant (matrix)
    "Calculate the determinant of a square matrix using recursive function calls."
    (cond
        ((zerop (length matrix)) 0) ; if matrix has 0 rows, return 0
        ((= (length matrix) 1) (first (first matrix))) ; if matrix has 1 row, return the value of the only element
        (t
            (let ((det 0)) ; initialize determinant
                (dotimes (i (length matrix)) ; for every column in matrix
                    (let ((submatrix (remove (nth i matrix) matrix))) ; create a submatrix by removing column i from matrix
                        (if (= i 0) ; if i = 0, multiply element by -1
                            (setf (aref submatrix 0) (* -1 (aref submatrix 0)))
                            (setf (aref submatrix i) (1- (aref submatrix i))))) ; otherwise, multiply element by -1^(i+1)
                    (setf det (+ det (* (aref matrix i) (determinant submatrix))))) ; recursively call determinant function for each element and sum up the results
                det))))