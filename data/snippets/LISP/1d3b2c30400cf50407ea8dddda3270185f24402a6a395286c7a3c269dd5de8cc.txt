;;; This is a complex function that takes in two parameters and returns the maximum value
;;; It uses recursion and conditional statements
;;; Parameters:
;;;   x: an integer representing the first number
;;;   y: an integer representing the second number
(defun maximum (x y) ; define the function and its parameters
  (cond ((> x y) ; if x is greater than y
         x) ; return x
        ((< x y) ; if x is less than y
         y) ; return y
        (t x))) ; if x and y are equal, return x
  ;;; Now we define a helper function that will keep track of the maximum value
  ;;; Parameters:
  ;;;   x: an integer representing the first number
  ;;;   y: an integer representing the second number
  ;;;   curr-max: an integer representing the current maximum value 
  (defun helper (x y curr-max)
    (if (= x y) ; if x and y are equal, return curr-max
        curr-max
        (if (> x y) ; if x is greater than y
            (helper (- x 1) y x) ; recursively call helper with x decreased by 1 and update curr-max to x
            (helper x (- y 1) curr-max)))) ; recursively call helper with y decreased by 1 and curr-max remaining the same
; Example usage:
(print (maximum 5 10)) ; prints 10
(print (maximum -1 6)) ; prints 6