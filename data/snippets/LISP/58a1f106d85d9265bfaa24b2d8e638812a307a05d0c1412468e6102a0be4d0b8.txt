(defun insertion-sort (l) ; Defines a function named insertion-sort that takes in a list as argument
	(let ((n (length l))) ; Initializes a local variable n that is equal to the length of the list
		(loop for i from 1 ; Creates a loop that iterates from 1 to the length of the list
			to n
			do (loop for j from i ; Creates a nested loop that iterates from the current index i to the beginning of the list
					downto 1 ; in reverse order
					do (when (< (nth j l) (nth (1- j) l)) ; Checks if the element at index j is smaller than the element at the previous index
							(rotatef (nth j l) (nth (1- j) l)))) ; If so, swaps the elements at index j and (j-1)
				finally (return l)) ; After sorting, returns the list
		)
)