;; Function to calculate the nth power of a number
(defun power (base n)
  (if (= n 0) 1 (* base (power base (- n 1)))))

;; Function to find the factorial of a number
(defun factorial (n)
  (if (= n 0) 1 (* n (factorial (- n 1)))))

;; Loop to iterate through a list and print each element
(loop for element in '(1 2 3 4 5)
      do (print element))

;; Recursive function to find the sum of elements in a list
(defun sum (list)
  (if (null list) 0
    (+ (car list) (sum (cdr list)))))

;; Function to check if a given element is present in a list
(defun contains (list element)
  (cond ((null list) nil)
        ((= (car list) element) t)
        (t (contains (cdr list) element))))

;; Function to reverse a given list
(defun reverse (list)
  (if (null list) nil
    (append (reverse (cdr list)) (list (car list)))))

;; Conditional statement to print 'Hello World' if x is equal to 0
(when (= x 0)
  (print "Hello World"))

;; Defining a class 'Person' with attributes 'name' and 'age'
(defclass person ()
  ((name :accessor person-name)
   (age :accessor person-age)))

;; Function to create an instance of the 'Person' class
(defun create-person (name age)
  (make-instance 'person :name name :age age))

;; Function to display the details of a 'Person' instance
(defun print-person (person)
  (format t "Name: ~a~%Age: ~a" (person-name person) (person-age person)))

;; Creating an instance of 'Person' with name 'John' and age 20
(setq john (create-person "John" 20))

;; Printing the details of the 'John' instance
(print-person john)