;; This is a function that checks if a given number is prime
(defun is-prime (num) ;start of function
  (loop for i from 2 to (isqrt num) do ;start loop
    (if (zerop (mod num i)) ;checks if num is divisible by i
      (return nil))) ;if divisible, returns nil (not prime)
  (return t)) ;otherwise, returns t (prime)
 
;; This is a function that calculates the factorial of a given number
(defun factorial (num) ;start of function
  (if (<= num 1) ;checks if num is less than or equal to 1
    1 ;if so, returns 1 (base case)
    (* num (factorial (- num 1)))) ;otherwise, recursively multiplies num by factorial of num-1
 
;; This is a function that finds the sum of all odd numbers in a given list
(defun sum-odd (list) ;start of function
  (if (null list) ;checks if list is empty
    0 ;if so, returns 0 (base case)
    (if (oddp (car list)) ;checks if first element of list is odd
      (+ (car list) (sum-odd (cdr list))) ;if so, adds first element to sum of rest of list
      (sum-odd (cdr list))))) ;if not, just recurses on rest of list
 
;; This is a function that converts a binary number to decimal
(defun binary-to-decimal (bin-str) ;start of function
  (if (null bin-str) ;checks if string is empty
    0 ;if so, returns 0 (base case)
    (+ (* (expt 2 (- (length bin-str) 1)) (parse-integer (substring bin-str 0 1))) ;multiplies first character by 2 to power of current length of string - 1
      (binary-to-decimal (subseq bin-str 1))))) ;recursively calls function on rest of string