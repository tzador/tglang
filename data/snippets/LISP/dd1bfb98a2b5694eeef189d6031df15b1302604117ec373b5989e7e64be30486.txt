;;Define a function 'sum-squares' that takes in two numbers, squares them, and returns their sum.
(defun sum-squares (x y)
  "Squares two numbers and returns their sum."
  (+ (* x x) (* y y)))
  
;;Define a list 'my-list' with numbers 1 to 10 using 'loop' and 'collect' functions.
(setq my-list (loop for i from 1 to 10 collect i))

;;Define a function 'filter-even-nums' that takes in a list of numbers and filters out the even numbers.
(defun filter-even-nums (lst)
  (if (null lst) ; Base case: if list is empty, return empty list
      nil
    (if (= 0 (mod (first lst) 2)) ; If first element is even,
        (filter-even-nums (rest lst)) ; recurse for the remaining elements
      (cons (first lst) (filter-even-nums (rest lst))) ; Otherwise, add first element and recurse for remaining elements
      )
    )
  )
  
;;Print the sum of squares of even numbers in 'my-list'.
(print (apply '+ (mapcar #'sum-squares (filter-even-nums my-list))))