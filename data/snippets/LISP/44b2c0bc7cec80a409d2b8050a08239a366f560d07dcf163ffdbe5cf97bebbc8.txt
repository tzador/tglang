;;; This code snippet is a function that calculates the n-th fibonacci number
;;; using memoization for efficient performance

;;; Define a global variable to store the previously calculated fibonacci numbers
(defparameter *fibonacci-memo* (make-hash-table :test #'equal))

;;; Define the function
(defun fibonacci (n)
  ;; Check if we have already calculated the fibonacci number for n
  (cond ((eql n 0) 0)
        ((eql n 1) 1)
        ((gethash n *fibonacci-memo*) (gethash n *fibonacci-memo*))
        (t (let* ((fib1 (fibonacci (- n 1)))
                  (fib2 (fibonacci (- n 2)))
                  (result (+ fib1 fib2)))
            ;; Store the result in the hash table before returning it
            (setf (gethash n *fibonacci-memo*) result)
            result))))