;; Define a lambda expression that multiplies two numbers
(defun multiply (x y)
  (lambda (x y) (* x y)))
  
;; Define a higher-order function that takes in a function and applies it to three numbers
(defun apply-to-three (func x y z)
  (funcall func x y z))
  
;; Define a recursive function that calculates the factorial of a number
(defun factorial (n)
  (if (= n 0) 1 ; Base case: when n is 0, return 1
    (* n (factorial (- n 1))))) ; Recursive call: multiply n by the factorial of n-1
  
;; Define a list of numbers
(defvar numbers '(5 10 15 20 25))
  
;; Use mapcar to multiply each number in the list by 2
(mapcar (lambda (num) (* num 2)) numbers)