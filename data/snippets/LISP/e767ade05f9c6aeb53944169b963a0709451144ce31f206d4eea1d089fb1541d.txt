;; This function recursively calculates the factorial of a given number
(defun factorial (n)
  (if (= n 0) ; If n is equal to 0
      1 ; Then return 1
      (* n (factorial (- n 1))))) ; Otherwise multiply n with factorial of n-1 and return the result

;; This function calculates the nth number in the fibonacci sequence
(defun fibonacci (n)
  (if (< n 3) ; If n is less than 3
      1 ; Then return 1
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; Otherwise, add the previous two numbers in the fibonacci sequence

;; This function calculates the sum of a list of numbers
(defun sum (lst)
  (if (null lst) ; If the list is empty
      0 ; Then return 0
      (+ (car lst) (sum (cdr lst))))) ; Otherwise, add the first element of the list with the sum of the rest of the elements in the list

;; This function returns the nth element in a list
(defun nth (n lst)
  (if (= n 1) ; If n is equal to 1, return the first element of the list
      (car lst)
      (nth (- n 1) (cdr lst)))) ; Otherwise, recursively call the function with n-1 and the rest of the list until n becomes 1 and return the first element

;; This function checks if a number is prime
(defun is-prime (n)
  (defun check-prime (n i)
    (if (= i 1) ; If i is equal to 1, return true
        t
        (if (= (mod n i) 0) ; If n is divisible by i
            nil ; Then return false
            (check-prime n (- i 1))))) ; Otherwise, recursively call the function with i-1 until i becomes 1 or n is found to be divisible
    
  (if (= n 1) ; If n is 1, return false
      nil
      (check-prime n (- n 1)))) ; Otherwise, recursively call the inner function with n-1 until n becomes 1 or is-prime is returned