(defun merge-sort (lst) ;; function for performing merge sort
  (if (<= (length lst) 1) ;; checks if the list is of length 1 or less
  lst ;; if so, returns the list as it is
  (let ((mid (/ (length lst) 2))) ;; if the condition is not met, creates a binding for mid as the middle index of the list
    (merge ;; calls the merge function to merge the left and right sublists
      (merge-sort (subseq lst 0 mid)) ;; recursively calls the function on the left sublist
      (merge-sort (subseq lst mid)) ;; recursively calls the function on the right sublist
      #'<)))) ;; compares the elements of the sublists and returns the smaller element

(defun merge (l1 l2 cmp-fn) ;; function for merging two sublists
  (if (or (null l1) (null l2)) ;; checks if either of the lists is empty
  (catenate 'list l1 l2) ;; if so, returns the concatenation of the two lists
  (if (funcall cmp-fn (car l1) (car l2)) ;; compares the first elements of both lists using the given comparison function
    (cons (car l1) (merge (cdr l1) l2 cmp-fn)) ;; if the first element of l1 is smaller, adds it to the merged list and recursively calls the function with the rest of l1 and the same l2
    (cons (car l2) (merge l1 (cdr l2) cmp-fn))))) ;; if the first element of l2 is smaller, adds it to the merged list and recursively calls the function with the same l1 and the rest of l2