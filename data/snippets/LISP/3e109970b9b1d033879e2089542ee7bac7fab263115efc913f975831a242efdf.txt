;;; This snippet generates a list of primes using the sieve of Eratosthenes algorithm
;; n - the maximum number to generate primes up to
;; primes - the list of primes
;; composites - a list of numbers that have been checked/composite numbers
;; Initial setup
(setq n 100) ; set n to 100
(setq primes nil) ; initialize primes as empty list
(setq composites nil) ; initialize composites as empty list
;; Generating primes
(dotimes (i n) ; repeat the following n times
  (unless (member i composites) ; if i is not a composite number already
    (push i primes) ; push i to the top of primes list
    (let ((multiple (* i i))) ; calculate the first multiple of i
      (while (<= multiple n)
        (push multiple composites) ; push the multiple to the top of composites list
        (incf multiple i) ; increment the multiple by i
        )
      )
    )
  )
;; Output the list of primes
(princ primes)