;; Counts the occurrences of an element in a list

;; Define function that takes in two inputs
(defun count_occurrences (element lst)
  ;; Declare counter variable to keep track of occurrences
  (let ((counter 0))
    ;; Define recursive helper function that takes in two inputs
    (labels ((helper (element lst)
               ;; If list is empty, return counter
               (if (null lst)
                   counter
                   ;; If current element matches target element, increment counter
                   (if (equal element (car lst))
                       (progn
                         (setq counter (+ counter 1))
                         ;; Recursively call helper function on rest of list
                         (helper element (cdr lst)))
                       ;; If current element does not match target element, recursively call helper function on rest of list
                       (helper element (cdr lst))))))
      ;; Call helper function to start recursion
      (helper element lst))))