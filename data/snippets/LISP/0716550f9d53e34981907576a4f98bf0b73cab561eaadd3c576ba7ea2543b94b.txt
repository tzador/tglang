# Defines a function called 'quicksort' that takes in a list
# Uses 'if' statement to check if the list is empty
# If not empty, uses 'first' function to take the first element of the list and assigns it to 'pivot'
# Uses 'rest' function to take all elements after the first and divide them into a 'less' and 'greater' list
# Recursively calls 'quicksort' on 'less' and 'greater' list and concatenates them with 'cons' function and 'pivot' to create the final sorted list
(defun quicksort (list)
  (if (null list)                              ;; Checks if the list is empty
      nil                                       ;; If empty, returns nil
      (let ((pivot (first list)))               ;; If not empty, assigns first element to 'pivot'
        (append (quicksort (remove-if-not 'lessp (rest list)) ;; Recursively calls quicksort on list of elements < pivot
                (quicksort (remove-if-not 'greaterp (rest list))) ;; Recursively calls quicksort on list of elements > pivot
                (cons pivot nil)))))              ;; Uses 'cons' function to combine 'pivot' with the sorted lists