;; This is a function that checks if a given number is a prime number
(defun is-prime (n)
  "Function to check if a number is prime or not"
  (let ((i 2) ; start counter at 2
        (sqrt (isqrt n))) ; get square root of n
    (cond ((= n 1) nil) ; if n is 1, not prime
          ((= n 2) t) ; if n is 2, prime
          ((= 0 (mod n 2)) nil) ; if n is even, not prime
          (t (loop ; otherwise, loop through numbers from 3 to square root of n
               (if (> i sqrt) ; if i is greater than square root of n, number is prime
                   (return t) ; return true
                   (if (= 0 (mod n i)) ; if n is divisible by i, not prime
                       (return nil) ; return false
                       (incf i 2))))))) ; increment i by 2 (only need to check odd numbers) and loop again