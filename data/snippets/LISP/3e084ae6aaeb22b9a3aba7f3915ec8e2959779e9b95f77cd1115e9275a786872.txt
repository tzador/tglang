;;; This is a comment


;; Function to calculate the factorial of a number
(defun factorial (n)
	"Returns the factorial of n"
	(cond ((equal n 0) 1)
		(t (* n (factorial (- n 1))))))

;; Recursive function to calculate the nth term of the Fibonacci sequence
(defun fib (n)
	"Returns the nth term of the Fibonacci sequence"
	(cond ((<= n 1) n)
		(t (+ (fib (- n 1)) (fib (- n 2))))))

;; Function to calculate the area of a triangle using Heron's formula
(defun triangle-area (a b c)
	"Calculates the area of a triangle given its side lengths"
	(let ((s (/ (+ a b c) 2))) ; Define s as the semi-perimeter
		(sqrt (* s (- s a) (- s b) (- s c))))) ; Apply Heron's formula

;; Higher-order function to return the sum of squares of a specified range of numbers
(defun sum-of-squares (a b f)
	"Returns the sum of squares of numbers from a to b"
	(loop for i from a to b
		summing (funcall f i) into total
		finally (return total)))

;; Example usage of the functions defined above
(print (factorial 5)) ; => 120
(print (fib 6)) ; => 8
(print (triangle-area 3 4 5)) ; => 6
(print (sum-of-squares 1 5 #'(lambda (x) (* x x)))) ; => 55