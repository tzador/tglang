;;; Function to calculate the value of a mathematical expression in prefix notation

(defun calculate-prefix (expression)
  "Calculates the value of a mathematical expression in prefix notation."
  (let ((operator (pop expression)))    ; Pop out the operator from expression
    (cond ((numberp operator) operator)  ; If operator is a number, return it
          ((not (listp operator))        ; Else if operator is not a list, signal error
           (error "Invalid operator ~a in expression ~a" operator expression))
          (t (let ((operand1 (calculate-prefix expression)) ; Recursively call function for first operand
                   (operand2 (calculate-prefix expression))) ; Recursively call function for second operand
               (funcall operator operand1 operand2))))))    ; Apply operator on operands