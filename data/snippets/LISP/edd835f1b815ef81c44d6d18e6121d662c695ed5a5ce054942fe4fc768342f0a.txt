(defun bubble-sort (lst) ; defining a function called bubble-sort with one parameter, lst
  (let ((size (length lst))) ; using the let keyword to create a temporary variable, size, that holds the length of the given list
    (dotimes (i size) ; using the dotimes macro to iterate through the list n number of times, where n is the length of the list 
      (let ((swapped nil)) ; creating another temporary variable, swapped, to keep track of whether any elements have been swapped in this iteration
        (dotimes (j (- size 1 i)) ; using the dotimes macro again to iterate through the list from index 0 to index n-1-i
          (if (> (nth j lst) (nth (+ j 1) lst)) ; comparing the jth element with the j+1th element
              (progn ; using progn to evaluate multiple expressions
                (rotatef (nth j lst) (nth (+ j 1) lst)) ; swapping the elements if the jth element is greater than the j+1th element
                (setf swapped t))) ; setting swapped to true if a swap has occurred
              (setf swapped nil))) ; setting swapped to false if no swap has occurred
        (if (not swapped) ; if swapped is still false after going through the entire list, that means the list is already sorted and we can stop iterating
            (return lst)))))) ; using return to exit the function and return the sorted list