;; This is a function that calculates the sum of two numbers
(defun sum (a b)
    (if (or (not a) (not b)) ;; Checks if either inputs are nil
        (error "Missing input") ;; If so, returns an error
        (+ a b) ;; If both inputs are given, calculates the sum
    )
)

;; This is a variable that stores a list of numbers
(defvar *number-list* '(1 2 3 4 5))

;; This is a function that uses the previously declared variable
(defun sum-of-list ()
    (let ((total 0)) ;; Creates a local variable to store the total
        (dolist (num *number-list*) ;; Loops through all the numbers in the list
            (setq total (+ total num)) ;; Adds each number to the total
        )
        total ;; Returns the final total
    )
)

;; This is a function that reverses the elements in a list
(defun reverse (lst)
    (if (or (null lst) (not (listp lst))) ;; Checks if the input is a list
        (error "Invalid input") ;; If not, returns an error
        (if (null (cdr lst)) ;; Checks if the list has only one element
            lst ;; If so, returns the list (no need to reverse)
            (append (reverse (cdr lst)) (list (car lst))) ;; Otherwise, appends the first element to the end of the reversed rest of the list
        )
    )
)

;; Example usage of the functions
(sum 2 5) ;; Output: 7
(sum-of-list) ;; Output: 15 (sum of all numbers in *number-list*)
(reverse '(1 2 3)) ;; Output: (3 2 1)