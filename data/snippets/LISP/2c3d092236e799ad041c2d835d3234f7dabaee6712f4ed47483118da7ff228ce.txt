;; This is a function that takes in two parameters and returns the first parameter raised to the power of the second parameter.
(defun power (x y)
  (cond ((= y 0) 1) ; if y is 0, return 1
        ((= y 1) x) ; if y is 1, return x
        (t (* x (power x (- y 1)))))) ; otherwise, return x multiplied by the result of calling the function again with x and y-1 as parameters

;; This is a function that implements the Euclidean algorithm for finding the greatest common divisor of two positive integers.
(defun gcd (x y)
  (cond ((= x 0) y) ; if x is 0, the gcd is y
        ((= y 0) x) ; if y is 0, the gcd is x
        ((= x y) x) ; if x is equal to y, the gcd is x
        ((> x y) (gcd (- x y) y)) ; if x is greater than y, recursively call the function with x-y and y
        (t (gcd x (- y x))))) ; otherwise, recursively call the function with x and y-x

;; This is a recursive function that calculates the Fibonacci sequence up to the n-th term.
(defun fibonacci (n)
  (cond ((= n 0) 0) ; if n is 0, return 0
        ((= n 1) 1) ; if n is 1, return 1
        (t (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))) ; otherwise, return the sum of the (n-1)th and (n-2)th terms of the Fibonacci sequence