;;; This function takes in a list and outputs a new list containing
;;; the elements of the input list in reverse order
(defun reverse-list (input-list)
  "Takes in a list and outputs a new list with elements in reverse order"
  (if (null input-list) ;;; checks if input list is empty, then returns empty list
    input-list
    (append (reverse-list (rest input-list)) (list (first input-list))))) ;;; recursively calls the function on the rest of the list and appends the first element to the end

;;; Example usage:
;; (reverse-list '(1 2 3 4)) ;;; returns (4 3 2 1)