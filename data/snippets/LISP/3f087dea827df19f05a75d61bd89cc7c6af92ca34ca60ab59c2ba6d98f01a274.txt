;;; This function takes in a list of numbers and returns
;;; a new list with each number squared.
(defun square-numbers (numbers)
  "Square each number in the given list"
  (let ((squared-numbers ()))
    ;;; Loop through each number in the original list and
    ;;; square it, then add it to the new list.
    (dolist (num numbers)
      (setq squared-numbers (cons (* num num) squared-numbers)))
    squared-numbers)) ;;; Return the new list.

;;; Example usage:
(square-numbers '(2 4 6)) ;;; Output: (4 16 36)

;;; This function uses recursion to calculate the factorial
;;; of a given number.
(defun factorial (n)
  "Calculate the factorial of a given number"
  (if (<= n 1)
      1 ;;; Base case: return 1 when n is 1 or less.
      ;;; Recursive case: multiply n by the result of factorial
      ;;; of n-1 until n reaches 1.
      (* n (factorial (- n 1)))))

;;; Example usage:
(factorial 5) ;;; Output: 120