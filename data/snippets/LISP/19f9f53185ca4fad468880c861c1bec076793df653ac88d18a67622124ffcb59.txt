;;define a factorial function that takes in one parameter, n
(defun factorial (n)
  (if (or (= 1 n) (= 0 n)) ;check if n is equal to 1 or 0
    1 ;return 1 if n is equal to 1 or 0
    (* n (factorial (- n 1))))) ;otherwise, return n multiplied by the recursive call of factorial with n-1 as the parameter

;;define a fibonacci function that takes in one parameter, n
(defun fibonacci (n)
  (if (or (= 0 n) (= 1 n)) ;check if n is equal to 0 or 1
    n ;return n if n is equal to 0 or 1
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ;otherwise, return the sum of the recursive calls of fibonacci with n-1 and n-2 as the parameters

;;define a merge sort function that takes in one parameter, lst
(defun merge-sort (lst)
  (if (or (null lst) (<= (length lst) 1)) ;check if lst is null or contains only one element
    lst ;return lst as it is
    (merge ;otherwise, merge the two sorted halves of lst
      (merge-sort (subseq lst 0 (/ (length lst) 2))) ;first half of lst sorted
      (merge-sort (subseq lst (/ (length lst) 2) (length lst))) ;second half of lst sorted
    )
  )
)

;;define a function to merge two sorted lists
(defun merge (lst1 lst2)
  (cond
    ((null lst1) lst2) ;if lst1 is null, return lst2
    ((null lst2) lst1) ;if lst2 is null, return lst1
    ((<= (first lst1) (first lst2)) ;if first element of lst1 is less than or equal to first element of lst2
      (cons (first lst1) (merge (rest lst1) lst2))) ;return a list with the first element of lst1 followed by the merge of the rest of lst1 and lst2
    (t ;otherwise
      (cons (first lst2) (merge lst1 (rest lst2)))) ;return a list with the first element of lst2 followed by the merge of lst1 and the rest of lst2
)

;;define a function to calculate the nth prime number
(defun nth-prime (n)
  (if (<= n 1) ;check if n is less than or equal to 1
    2 ;if so, return 2 as the first prime number
    (loop for num from 3 ;start from 3 and iterate through numbers until n primes are found
      for i from 2 ;start from 2 and iterate through numbers until num is checked for divisibility
      while (< i num) ;check divisibility only until num itself
      do (if (= 0 (mod num i)) ;check if num is divisible by i
        (return-from nth-prime (first (last (prime-list (+ num 1))))))))) ;if so, return the next prime number by finding the prime number higher than num and taking the first element of the list

;;define a function to generate a list of prime numbers
(defun prime-list (n)
  (loop for i from 2 to n ;loop from 2 to n
    with lst = (list 2) ;initialize the list of prime numbers with 2
    with is-prime ;initialize a boolean variable to check for primality
    while (<= i n) ;check until i reaches n
    do (setf is-prime t) ;assume i is prime
    do (loop for j from 2 to (truncate (sqrt i)) ;loop from 2 to square root of i to check for divisibility
        when (= 0 (mod i j)) ;if i is divisible by j
        do (setf is-prime nil) ;set is-prime to false
        finally (when is-prime ;finally, if is-prime is still true
          (push i lst) ;push i to the list of prime numbers
          (return (reverse lst)))))) ;return the reversed list to get the primes in ascending order