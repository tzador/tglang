;; This is a function that checks if a number is even or odd.
(defun is-even (n)
  (if (evenp n)
      (format t "~a is even" n)
      (format t "~a is odd" n)))

;; This is a function that calculates the factorial of a number.
(defun factorial (n)
  (if (= n 0)
      1
      (* n (factorial (- n 1)))))

;; This is a function that calculates the Fibonacci sequence.
(defun fibonacci (n)
  (if (or (= n 0) (= n 1))
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

;; This is a function that finds the nth element in a list.
(defun get-nth (n l)
  (if (= n 0)
      (car l)
      (get-nth (- n 1) (cdr l))))

;; This is a function that reverses a list.
(defun reverse-list (l)
  (if (null l)
      ()
      (append (reverse-list (cdr l)) (list (car l)))))

;; This is a function that inserts an element into a sorted list.
(defun insert-into-sorted (x l)
  (cond
    ((null l) (list x))
    ((<= x (car l)) (cons x l))
    (t (cons (car l) (insert-into-sorted x (cdr l))))))

;; This is a function that merges two sorted lists.
(defun merge-lists (l1 l2)
  (cond
    ((null l1) l2)
    ((null l2) l1)
    ((<= (car l1) (car l2)) (cons (car l1) (merge-lists (cdr l1) l2)))
    (t (cons (car l2) (merge-lists l1 (cdr l2))))))

;; This is a function that implements quicksort.
(defun quicksort (l)
  (if (null l)
      nil
      (let ((pivot (car l)))
        (let ((smaller (remove-if '>= l pivot)))
          (let ((larger (remove-if '< l pivot)))
            (append (quicksort smaller) (list pivot) (quicksort larger)))))))

;; This is a function that calculates the sum of a list using tail recursion.
(defun tail-sum (list sum)
  (if list
      (tail-sum (cdr list) (+ sum (car list)))
     sum))


;; This is a function that creates a nested list with the specified depth.
(defun create-nested-list (n)
  (if (<= n 0)
      ()
      (cons (create-nested-list (- n 1)) (create-nested-list (- n 1)))))


;; This is a function that checks if a string is a palindrome.
(defun is-palindrome (s)
  (equal (string lx (length s))
         (string ux (length s))
         :test 'char-equal))