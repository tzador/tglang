(defun double (num)                   ; function definition
    (* num 2))                        ; multiply input by 2

(defun square (num)                   ; function definition
    (* num num))                      ; multiply input by itself

(defun power (base exponent)          ; function definition
    (if (= exponent 0)                ; check if exponent is 0
        1                              ; return 1 if true
        (* base (power base (- exponent 1))))  ; recursively multiply base by itself (exponent) times

(defun fibonacci (num)                ; function definition
    (cond
        ((= num 0) 0)                  ; return 0 if input is 0
        ((= num 1) 1)                  ; return 1 if input is 1
        (t (+ (fibonacci (- num 1)) (fibonacci (- num 2)))))) ; recursively calculate Fibonacci sequence

(defun add-numbers (list)             ; function definition
    (apply #'+ list))                 ; use built-in apply function to add all elements in the list together

(defun average-list (list)            ; function definition
    (/ (apply #'+ list) (length list)))  ; divide sum of elements by number of elements in the list to find average

(defun reverse-string (string)        ; function definition
    (loop for i from (1- (length string)) downto 0  ; loop backwards through characters in the string
          collect (char string i)))    ; collect the characters in reverse order

(defun sum-of-squares (list)          ; function definition
    (reduce #'+ (mapcar #'square list)))  ; use built-in functions to find the sum of squares of all elements in the list

(defun list-duplicates (list)         ; function definition
    (remove-duplicates list :test #'equal))  ; use built-in function to remove duplicates from the list, using equality as the test

(defun quicksort (list)               ; function definition
    (if (null list)                    ; check if list is empty
        nil                             ; return an empty list if true
        (append                          ; otherwise, append the following three lists:
            (quicksort (remove-if #'(lambda (x) (< x (car list))) (cdr list)))  ; recursively sort elements greater than the first element
            (list (car list))             ; insert the first element in between the two sorted lists
            (quicksort (remove-if #'(lambda (x) (> x (car list))) (cdr list))))))  ; recursively sort elements less than the first element

(defun frequency-count (list)         ; function definition
    (loop                                  
        for item in list                      ; loop through items in list
        with counts = (make-hash-table)       ; create an empty hash table to store item frequencies
        do (incf (gethash item counts 0))     ; increment count for the current item in the hash table
        finally (return counts)))             ; return the hash table with all item frequencies