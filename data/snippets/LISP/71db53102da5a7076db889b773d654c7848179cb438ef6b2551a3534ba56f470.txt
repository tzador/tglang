;;; Fibonacci function that takes in n and returns the nth Fibonacci number
(defun fib (n)
  (cond ((= n 0) 0)                       ; Base case for n = 0
        ((= n 1) 1)                       ; Base case for n = 1
        (t (+ (fib (- n 1)) (fib (- n 2)))))) ; Recursive call to calculate fibonacci number

(defun memoize (func)                      ; Higher order function to cache previously calculated values
  (let ((cache (make-hash-table)))         ; Initializing a hash table to store values
    (lambda (n)                            ; Inner function that takes in n as input
      (or (gethash n cache)                 ; If n is already in cache, return its value
          (setf (gethash n cache) (funcall func n)))))) ; Otherwise, calculate n and store in cache

(setq fib (memoize #'fib))                 ; Memoized version of Fibonacci function
;;; Testing our memoized function
(fib 5)                                    ; Output: 5
(fib 10)                                   ; Output: 55
(fib 15)                                   ; Output: 610
(fib 20)                                   ; Output: 6765
(fib 25)                                   ; Output: 75025