(defstruct person    ; Defines a structure called "person"
    name              ; Defines a slot called "name"
    age               ; Defines a slot called "age"
    (nickname nil))   ; Defines a slot called "nickname" with default value "nil"

(defun create-person (name age &optional nickname)  ; Defines a function called "create-person" that takes in "name" and "age" as required parameters and "nickname" as an optional parameter
    (make-person :name name :age age :nickname nickname))  ; Creates a new person using the "person" structure, filling in the appropriate slots with the given parameters

(defun get-person-name (person)  ; Defines a function called "get-person-name" that takes in a "person" as a parameter
    (person-name person))  ; Returns the value of the "name" slot of the given person

(defun get-person-age (person)  ; Defines a function called "get-person-age" that takes in a "person" as a parameter
    (person-age person))  ; Returns the value of the "age" slot of the given person

(defun get-person-nickname (person)  ; Defines a function called "get-person-nickname" that takes in a "person" as a parameter
    (person-nickname person))  ; Returns the value of the "nickname" slot of the given person

(defun change-person-nickname (person new-nickname)  ; Defines a function called "change-person-nickname" that takes in a "person" and "new-nickname" as parameters
    (setf (person-nickname person) new-nickname))  ; Sets the value of the "nickname" slot of the given person to the new value

(defun print-person-details (person)  ; Defines a function called "print-person-details" that takes in a "person" as a parameter
    (format t "Name: ~a~%Age: ~a~%Nickname: ~a" (get-person-name person) (get-person-age person) (get-person-nickname person)))  ; Prints out the details of the given person in a readable format

(let ((john (create-person "John" 25 "Johnny")))  ; Creates a new person named "John" with an age of 25 and a nickname of "Johnny" and assigns it to the variable "john"
    (change-person-nickname john "Johny")  ; Changes the nickname of "john" to "Johny"
    (print-person-details john))  ; Prints out the updated details of "john"