(defun merge-sort (list) ; defines a function 'merge-sort' with one parameter 'list'
    (let ((len (length list))) ; uses 'let' to define a new variable 'len' with the length of 'list'
        (cond ; conditional statement for different list lengths
            ((= len 0) nil) ; if the list is empty, return 'nil'
            ((= len 1) list) ; if the list only has one element, return the list
            (t 
                (let ((mid (/ len 2))) ; defines a new variable 'mid' as half the length of the list
                    (merge (merge-sort (subseq list 0 mid)) ; recursively calls 'merge-sort' on the first half of the list
                        (merge-sort (subseq list mid len)))))))) ; recursively calls 'merge-sort' on the second half of the list

(defun merge (left right) ; defines a function 'merge' with two parameters 'left' and 'right'
    (if (null left) right ; if left list is empty, return right list
        (if (null right) left ; if right list is empty, return left list
            (let ((l (car left)) (r (car right))) ; defines variables 'l' and 'r' as the first elements of left and right lists
                (if (< l r) (cons l (merge (cdr left) right)) ; if l is smaller than r, append l to the merged list and recursively call 'merge' on the rest of left list and right list
                    (cons r (merge left (cdr right)))))))) ; otherwise, append r to the merged list and recursively call 'merge' on the rest of left list and right list

(merge-sort '(4 2 6 1 3)) ; call 'merge-sort' function on a list to sort it, output will be '(1 2 3 4 6)'