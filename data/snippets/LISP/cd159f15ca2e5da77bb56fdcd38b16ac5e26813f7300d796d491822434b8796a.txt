;; This is a function that takes in two parameters
(defun add (x y)
  ;; Perform addition on the two parameters and return the result
  (+ x y))
  ;; This is a higher-order function that takes in another function as a parameter
  (defun compose (f g)
    ;; Define a new function that takes in a parameter
    (lambda (x)
      ;; Return the result of calling the two functions in sequence
      (funcall f (funcall g x)))))

;; Define a new function that squares its parameter
(defun square (x)
  ;; Multiply the parameter by itself to get the square
  (* x x))

;; Define a new function that adds one to its parameter
(defun add-one (x)
  ;; Add one to the parameter
  (+ x 1))

;; Use the compose function to create a new function that squares a number and then adds one
;; Pass the square function as the first parameter and the add-one function as the second parameter
(setq square-add-one (compose #'square #'add-one))

;; Call the composed function with the number 5
;; The result should be 26 (5 squared + 1)
(funcall square-add-one 5)