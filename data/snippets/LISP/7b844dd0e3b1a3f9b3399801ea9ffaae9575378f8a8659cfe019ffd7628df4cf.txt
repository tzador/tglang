;; This function calculates the average of a list of numbers
(defun calculate-average (list-of-numbers)
  ;; Set a counter variable to keep track of the sum of numbers
  (let ((sum 0))
    ;; Recursive helper function to calculate the sum of numbers in the list
    (labels ((sum-helper (list)
               ;; If the list is empty, return 0 as the sum
               (if (null list)
                   0
                   ;; Otherwise, add the first element to the sum and call the helper function on the remaining list
                   (+ (car list) (sum-helper (cdr list)))))
      ;; Call the helper function on the list of numbers and store the sum in the counter variable
      (setf sum (sum-helper list-of-numbers)))
    ;; Calculate the length of the list to use in finding the average
    (let ((length (length list-of-numbers)))
      ;; If the length is 0, return 0 as the average
      (if (= length 0)
          0
          ;; Otherwise, divide the sum by the length to get the average
          (/ sum length)))))