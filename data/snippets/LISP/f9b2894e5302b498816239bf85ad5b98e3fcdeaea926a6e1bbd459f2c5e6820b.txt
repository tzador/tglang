;;; Function to compute the sum of squares of all even numbers in a list
;;; Inputs:
;;; - A list of numbers
;;; Outputs:
;;; - A number representing the sum of squares of all even numbers in the list
(defun sum-of-squares (lst)
  (if (null lst)  ;;; check if list is empty
      0  ;;; base case, return 0
      (if (= (mod (car lst) 2) 0)  ;;; check if car (first element) of list is even
          (+ (* (car lst) (car lst))  ;;; if even, square car and add to recursive call
             (sum-of-squares (cdr lst)))  ;;; recursive call with cdr (rest) of list
          (sum-of-squares (cdr lst)))))  ;;; otherwise, just call recursive function with cdr

(sum-of-squares '(1 2 3 4 5 6))  ;;; should return 56
(sum-of-squares '(2 4 6 8 10))  ;;; should return 220