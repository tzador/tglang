;; This is a code snippet in LISP that calculates the factorial of a number.
;; It uses recursion and a helper function to achieve this task.

(defun factorial (n) ; Define the factorial function with one parameter, n
  (if (<= n 1) ; Check if n is less than or equal to 1
    1 ; If yes, return 1 (factorial of 1 is 1)
    (* n (factorial (- n 1))) ; If no, multiply n with the recursive call of factorial function with n-1
    ))

;; This helper function takes in 3 parameters: n - current value, acc - accumulator, and limit - ending value
(defun factorial-helper (n acc limit) ; Define helper function with 3 parameters
  (if (<= n limit) ; Check if current value, n, is less than or equal to limit
    (factorial-helper (+ n 1) (* n acc) limit) ; If yes, recursively call helper function with updated values
    acc ; If no, return the accumulator which contains the factorial value
    ))

;; This is the main function that calls the helper function and passes in the starting and ending values for the factorial calculation.
;; It returns the factorial value of the input number.
(defun factorial-main (n) ; Define main factorial function with one parameter, n
  (factorial-helper 1 1 n)) ; Call helper function with starting and ending values and return the result.

;; Example input: (factorial-main 5)
;; Output: 120 (5! = 1*2*3*4*5 = 120)