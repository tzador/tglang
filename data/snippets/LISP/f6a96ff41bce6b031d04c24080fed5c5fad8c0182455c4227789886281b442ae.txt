(defparameter *tree* '(1 (2 3 (4 5))))

;; This is a definition of a variable named *tree* which is set to a list containing numbers 1, 2, 3, 4, and 5.

(defun tree-sum (tree)
  "A recursive function that returns the sum of all the numbers in a tree"
  (if (numberp tree)
    tree
    (apply #'+ (mapcar #'tree-sum tree))))

;; This is a function named tree-sum which takes in a tree parameter and uses recursion to calculate the sum of all the numbers in the tree.
;; The function first checks if the parameter tree is a number or a list.
;; If it is a number, it simply returns the number as the sum.
;; If it is a list, it uses the mapcar function to apply tree-sum to each element in the list and then uses the apply function to add all the results together.

(defun tree-product (tree)
  "A recursive function that returns the product of all the numbers in a tree"
  (if (numberp tree)
    tree
    (apply #'* (mapcar #'tree-product tree))))

;; This is a function named tree-product which takes in a tree parameter and uses recursion to calculate the product of all the numbers in the tree.
;; The function first checks if the parameter tree is a number or a list.
;; If it is a number, it simply returns the number as the product.
;; If it is a list, it uses the mapcar function to apply tree-product to each element in the list and then uses the apply function to multiply all the results together.

(defun tree-max (tree)
  "A recursive function that returns the maximum number in a tree"
  (if (numberp tree)
    tree
    (apply #'max (mapcar #'tree-max tree))))

;; This is a function named tree-max which takes in a tree parameter and uses recursion to find the maximum number in the tree.
;; The function first checks if the parameter tree is a number or a list.
;; If it is a number, it simply returns the number as the maximum.
;; If it is a list, it uses the mapcar function to apply tree-max to each element in the list and then uses the apply function to find the maximum of all the results.

(defun tree-min (tree)
  "A recursive function that returns the minimum number in a tree"
  (if (numberp tree)
    tree
    (apply #'min (mapcar #'tree-min tree))))

;; This is a function named tree-min which takes in a tree parameter and uses recursion to find the minimum number in the tree.
;; The function first checks if the parameter tree is a number or a list.
;; If it is a number, it simply returns the number as the minimum.
;; If it is a list, it uses the mapcar function to apply tree-min to each element in the list and then uses the apply function to find the minimum of all the results.

(defun tree-avg (tree)
  "A recursive function that returns the average of all the numbers in a tree"
  (if (numberp tree)
    tree
    (/ (apply #'+ (mapcar #'tree-sum tree)) (length tree))))

;; This is a function named tree-avg which takes in a tree parameter and uses recursion to find the average of all the numbers in the tree.
;; The function first checks if the parameter tree is a number or a list.
;; If it is a number, it simply returns the number as the average.
;; If it is a list, it uses the mapcar function to apply tree-sum to each element in the list and then uses the apply function to add all the results together.
;; It then uses the length function to find the number of elements in the list and divides the sum by the length to get the average.