;;; This is a function that takes in three arguments - a list, a number, and a function.
;;; The function will then apply the function to every element in the list and return a new list.
;;; Example usage: (map-list '(1 2 3) 2 (lambda (x) (* x x)))
;;; Output: '(1 4 9)

(defun map-list (list number function) ;;; define the function with the name 'map-list'
	(let ((res '())) ;;; initialize an empty list to store the results
		(dolist (element list) ;;; loop through the elements in the input list
			(push (funcall function element) res)) ;;; apply the function to each element and add it to the result list
		(nreverse res))) ;;; reverse the result list since we added elements in reverse order
	
(map-list '(1 2 3) 2 (lambda (x) (* x x))) ;;; call the function with the given example input