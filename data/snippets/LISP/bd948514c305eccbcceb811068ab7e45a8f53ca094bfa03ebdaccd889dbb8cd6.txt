(defparameter *input-list* '(1 2 3 4 5 6)) ; This creates a list of integer values from 1 to 6
(defparameter *modified-list*
  (mapcar #'(lambda (x) (* x 2)) *input-list*)) ; This applies the lambda function to each element in the input list and stores the result in modified-list

; This function checks if a given number is prime
(defun is-prime (n)
  (do ((divisor 2 (+ divisor 1))) ; Sets up a loop that starts at divisor=2 and increments by 1 each time until it reaches n
      ((> divisor (isqrt n)) T) ; Checks if the divisor is greater than the square root of n, if true then n is prime 
      (when (zerop (mod n divisor)) ; Checks if n is divisible by the current divisor, if true then n is not prime
        (return nil))) ; Return false if n is not prime
  T) ; Return true if n is prime

; This function filters out non-prime numbers from the modified list and stores the result in filtered-list
(defparameter *filtered-list*
  (remove-if-not #'is-prime *modified-list*))

; This function sums the elements in a given list
(defun sum-list (l) 
  (cond ((null l) 0) ; If list is empty, return 0
        (T (+ (car l) (sum-list (cdr l)))))) ; Recursively sum the elements in the list

;; This line prints out the sum of all prime numbers in the filtered list
(write (sum-list *filtered-list*)) ; Output: 1 + 2 + 3 + 5 + 11 + 13 + 17 + 19 + 23 + 29 = 123