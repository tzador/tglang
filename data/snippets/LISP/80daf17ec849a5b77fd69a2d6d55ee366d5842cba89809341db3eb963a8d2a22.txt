;;; This is a function that returns the shortest path between two nodes in a graph.

;; Creating a function to check if a node is in the graph
(defun in-graph (node graph)
  (cond
    ((null graph) nil)
    ((equal node (car (car graph))) t)
    (t (in-graph node (cdr graph)))))

;; Creating a function to get the neighbors of a given node
(defun neighbors (node graph)
  (cond
    ((null graph) nil)
    ((equal node (car (car graph))) (cdr (car graph)))
    (t (neighbors node (cdr graph)))))

;; Creating a function to calculate the shortest path between two nodes
(defun shortest-path (start end graph visited)
  (let ((queue `((,start ,start))) ; Creating a queue with the start node
        (path nil)) ; Initializing path as an empty list
    (loop                                     
      while queue ; Looping until the queue is empty
      do
        (let* ((current-node (caar queue)) 
               (path-so-far (cadar queue))
               (possible-paths 
                ;; Mapping all the possible paths from the current node
                (mapcar #'(lambda (neighbor)
                            (append path-so-far (list neighbor))) 
                        (neighbors current-node graph))))
          (dolist (possible-path possible-paths) ; Looping through each possible path
            (let ((path-end (car (last possible-path)))) 
              (if (eq path-end end) ; If the end node is reached
                  (setf path (nreverse (append possible-path path))) ; Updating the final path
                  (push (list path-end possible-path) queue))))) ; Adding the new possible paths to the queue
        (pop queue)) ; Removing the current node from the queue
    path)) ; Returns the shortest path between start and end nodes