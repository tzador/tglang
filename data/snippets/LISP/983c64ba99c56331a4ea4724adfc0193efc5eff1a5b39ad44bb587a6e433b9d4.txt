;; The following function takes in a list of numbers and returns the sum of all the numbers in the list
(defun sum (lst)
  (if (null lst) ; checks if lst is empty
      0            ; returns 0 if lst is empty
      (+ (car lst) ; adds the first element of lst to the result of calling sum on the rest of the list
         (sum (cdr lst))))) ; calls sum recursively on the rest of the list and adds the result to the sum so far
         
;; Example input and output:
;; (sum '(1 2 3)) ; returns 6
;; (sum '(1 2 3 4 5)) ; returns 15