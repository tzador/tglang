(defvar *empty* '() "Empty list variable definition") ;Define a list variable *empty* with an initial value of an empty list and add a description using the defvar command

(defvar *functions* '((lambda (x) (+ x 1)) ;Define a list variable *functions* with an initial value of a list containing two functions
                       (lambda (x) (* x x))) "List of functions with descriptions") ;Use the lambda function to define the functions and add a description of the variable using the defvar command

(defun apply-functions (x) ;Define a new function called apply-functions with a parameter x
  (mapcar #'(lambda (func) (funcall func x)) *functions*)) ;Use the mapcar function to apply each function in the list *functions* to the parameter x, using the funcall function to call each function

(print "Enter a number to apply functions to: ") ;Use the print function to prompt the user to enter a number

(let ((input (read))) ;Define a local variable input and assign it the user's input using the read function
  (apply-functions input)) ;Pass the input as the parameter for the apply-functions function and print the result

;Output: Enter a number to apply functions to:
;3
;(4 9) ;Output of applying the two functions in *functions* to the input 3