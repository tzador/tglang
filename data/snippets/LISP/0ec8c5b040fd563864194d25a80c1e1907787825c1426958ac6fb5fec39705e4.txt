(defun iterative-merge-sort (list)
    "Takes a list and sorts it using the iterative merge sort algorithm.
    This algorithm is more efficient than traditional recursive merge sort,
    as it uses iteration instead of recursion."
    
    ;; Define a local function to merge two sorted lists
    (defun merge (left right)
        "Takes two sorted lists and merges them together, returning a sorted list as a result."
        ;; Initialize variables for tracking current indices and result list
        (let (result (l-index 0) (r-index 0))
            ;; Loop while both lists still have elements
            (while (and (< l-index (length left)) (< r-index (length right)))
                ;; Compare the elements at the current indices
                ;; If the left element is smaller, add it to the result
                ;; and increment the left index
                ;; Otherwise, add the right element and increment the right index
                (if (< (nth l-index left) (nth r-index right))
                    (progn (setf result (append result (list (nth l-index left))))
                                (setf l-index (1+ l-index)))
                    (progn (setf result (append result (list (nth r-index right))))
                                (setf r-index (1+ r-index)))))
            ;; Add any remaining elements from either list to the result
            (if (< l-index (length left))
                (while (< l-index (length left))
                    (setf result (append result (list (nth l-index left))))
                    (setf l-index (1+ l-index))))
            (if (< r-index (length right))
                (while (< r-index (length right))
                    (setf result (append result (list (nth r-index right))))
                    (setf r-index (1+ r-index))))
            ;; Return the result list
            result))
    
    ;; Initialize variables for tracking the list size and sublist arrays
    (let (list-size 1)
        (loop while (<= list-size (length list))
            ;; Initialize variables for tracking the current sublist positions
            (let (l-index 0)
                (loop while (<= l-index (- (length list) list-size))
                    ;; Merge the two sublists at the current positions and update the original list
                    (setf (nth l-index list) 
                            (merge (subseq list l-index (+ l-index list-size))
                                    (subseq list (+ l-index list-size) (+ l-index (* 2 list-size)))))
                ;; Update the list size and move to the next sublist
                (setf list-size (* 2 list-size)))))
    ;; Return the sorted list
    list)