;;; This is a function that takes in two parameters, "a" and "b", and returns their sum
;;; Input: a, b
;;; Output: sum of a and b

(defun add (a b) ; Define function "add" with parameters a and b
  (return (+ a b)) ; Return the sum of a and b
)

;;; This is a function that takes in an integer parameter "n" and calculates the factorial of n
;;; Input: n (integer)
;;; Output: factorial of n

(defun factorial (n) ; Define function "factorial" with parameter n
  (if (<= n 1) ; Base case: if n is less than or equal to 1
      1         ; Return 1
      (* n (factorial (- n 1))) ; Recursive call with n-1 and multiply by n
  )
)

;;; This is a function that takes in a list "lst" and returns a new list with squared elements
;;; Input: lst (list)
;;; Output: new list with squared elements

(defun square-list (lst) ; Define function "square-list" with parameter lst
  (mapcar (lambda (x) (* x x)) lst) ; Use mapcar to apply lambda function to each element in lst and return new list
)

;;; This is a function that calculates the sum of squares of integers from 1 to n
;;; Input: n (integer)
;;; Output: sum of squares of integers from 1 to n

(defun sum-of-squares (n) ; Define function "sum-of-squares" with parameter n
  (cond ((<= n 1) 1) ; Base case: if n is less than or equal to 1, return 1
        (t (+ (* n n) (sum-of-squares (- n 1)))) ; Recursive call with n-1 and add to square of n
  )
)

;;; This is a function that checks if a given string "str" is a palindrome
;;; Input: str (string)
;;; Output: boolean (true if str is a palindrome, false otherwise)

(defun palindrome (str) ; Define function "palindrome" with parameter str
  (if (or (= (length str) 0) (= (length str) 1)) ; Base case: if str is empty or has length of 1, return true
      t
      (equal (subseq str 0 1) (subseq str (- (length str) 1))) ; Check if first and last character are equal, then recursive call with string without first and last character
  )
)

;;; This is a function that calculates fibonacci sequence up to the nth number
;;; Input: n (integer)
;;; Output: list of fibonacci sequence up to the nth number

(defun fibonacci (n) ; Define function "fibonacci" with parameter n
  (cond ((= n 0) ()) ; If n is 0, return empty list
        ((= n 1) '(0)) ; If n is 1, return list with only 0
        (t (append (fibonacci (- n 1)) (list (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))) ; Recursive call with n-1 and n-2, then append the results to form new list
  )
)