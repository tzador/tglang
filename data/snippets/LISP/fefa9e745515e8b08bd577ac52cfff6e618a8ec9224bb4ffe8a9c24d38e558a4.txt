;; define a function `evaluate` that takes in a mathematical expression as a list
;; and evaluates it

(defun evaluate (expr)
  (cond ((atom expr) expr) ; if expression is an atom, return atom
        ((eq (first expr) '+) (+ (evaluate (second expr)) (evaluate (third expr)))) ; if expression is addition, recursively evaluate both sides and add
        ((eq (first expr) '*) (* (evaluate (second expr)) (evaluate (third expr)))) ; if expression is multiplication, recursively evaluate both sides and multiply
        ((eq (first expr) '-') (- (evaluate (second expr)) (evaluate (third expr)))) ; if expression is subtraction, recursively evaluate both sides and subtract
        ((eq (first expr) '/') (/ (evaluate (second expr)) (evaluate (third expr)))) ; if expression is division, recursively evaluate both sides and divide
        (t (print "Invalid Expression")) ; if expression does not match any of the above, print error message
      )
)

;; some test cases
(evaluate '(+ 2 (* 3 4))) ; ==> 14
(evaluate '(/ 10 0)) ; ==> Invalid Expression
(evaluate '(+ 2 'a)) ; ==> Invalid Expression