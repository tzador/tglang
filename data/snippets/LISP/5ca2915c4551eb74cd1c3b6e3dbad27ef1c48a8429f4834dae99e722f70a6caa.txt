;; Define a function that takes in a list and performs operations on each element
(defun perform-operations (list) 
    "Takes in a list and performs operations on each element.
    Example: (perform-operations '(1 2 3 4)) would return '(2 4 6 8)"
    
    ;; Define an accumulator variable to store results
    (let ((accumulator ()))
        ;; Loop through the list using recursion
        (cond
            ((null list) accumulator)  ;; If list is empty, return accumulator
            (t ;; Otherwise perform operations on first element and add to accumulator
                (setf accumulator (cons (* 2 (car list)) accumulator))
                (perform-operations (cdr list)))))) ;; Call function again with rest of list

;; Call the function with a list of numbers and store the result in a new variable
(let ((result (perform-operations '(1 2 3 4 5))))
    ;; Print the result to the console
    (format t "Result: ~a" result)) ;; Output: Result: (2 4 6 8 10)