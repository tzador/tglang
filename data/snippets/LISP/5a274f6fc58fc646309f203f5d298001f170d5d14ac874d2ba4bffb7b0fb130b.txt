;;--- Function to check if an element is present in a list
(defun check-element (element list)
  "This function takes in an element and a list and checks if the element is present in the list."
  (cond
    ;; If list is empty, return nil
    ((null list) nil)
    ;; If element is the first element of the list, return true
    ((eq element (car list)) t)
    ;; If element is not the first element, check the rest of the list
    (t (check-element element (cdr list))))
)

;;--- Function to find the factorial of a number
(defun factorial (num)
  "This function takes in a number and returns its factorial."
  ;; If num is 0, factorial is 1
  (if (= num 0) 1
  ;; Otherwise, multiply num by the factorial of num-1
  (* num (factorial (- num 1))))
)

;;--- Function to convert a binary number to decimal
(defun binary-to-decimal (binary-num)
  "This function takes in a binary number as a string and converts it to its decimal equivalent."
  (let ((decimal-num 0)
        (binary-list (mapcar #'string-to-number (coerce binary-num 'list))))
    ;; Loop through the binary list, starting from the last element
    (while binary-list
      ;; Multiply the decimal-num by 2 and add the current binary digit
      (setf decimal-num (+ (* decimal-num 2) (car binary-list)))
      ;; Remove the first digit from the list
      (setf binary-list (cdr binary-list)))
    ;; Return the final decimal number
    decimal-num)
)

;;--- Function to create a list of even numbers in a given range
(defun create-even-list (start end)
  "This function takes in a starting and ending number and creates a list of even numbers in that range."
  (cond
    ;; If start is greater than end, return nil
    ((>= start end) nil)
    ;; If start is an odd number, increment by 1
    ((oddp start) (create-even-list (+ start 1) end))
    ;; Otherwise, add start to the list and increment by 2
    (t (cons start (create-even-list (+ start 2) end))))
)

;;--- Function to find the nth element of the Fibonacci sequence
(defun fibonacci (n)
  "This function takes in a number n and returns the nth element of the Fibonacci sequence."
  (cond
    ;; If n is 0, return 0 (first element of the sequence)
    ((= n 0) 0)
    ;; If n is 1 or 2, return 1 (second and third elements of the sequence)
    ((<= n 2) 1)
    ;; Otherwise, add the previous two elements in the sequence
    (t (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))