(defun merge-sort (list)                             ; Define a function merge-sort with parameter list
    (if (<= list 1)                                  ; If list has <= 1 elements
        list                                         ; return list
        (let* ((left (get-sub-list 0 (/ (length list) 2) list))   ; Assign left to first half of list
               (right (get-sub-list (/ (length list) 2) (length list) list)))   ; Assign right to second half of list
            (merge (merge-sort left) (merge-sort right))            ; Call merge-sort recursively on left and right, then merge
            ))))

(defun get-sub-list (start end list)                  ; Define a function to get a sub-list from list
    (cond
        ((< start 0) nil)                              ; If start is negative, return nil
        ((null list) nil)                              ; If list is null, return nil
        ((= start end) nil)                             ; If start = end, return nil
        ((= start 0) list)                             ; If start = 0, return list
        (t (get-sub-list (- start 1) (- end 1) (cdr list)))))  ; Otherwise, recursively call get-sub-list with start-1, end-1, and cdr of list

(defun merge (left right)                            ; Define a function merge with parameters left and right
    (cond                                            ; Use conditional statements
        ((null left) right)                           ; If left is null, return right
        ((null right) left)                           ; If right is null, return left
        ((< (car left) (car right))                    ; If the first element of left is smaller than first element of right
            (cons (car left) (merge (cdr left) right)))      ; Return a cons of first element of left and recursively call merge with left-cdr and right
        (t (cons (car right) (merge left (cdr right)))) ))     ; Otherwise, return a cons of first element of right and recursively call merge with left and right-cdr)