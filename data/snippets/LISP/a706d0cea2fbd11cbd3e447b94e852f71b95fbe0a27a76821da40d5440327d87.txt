;; This is a sample function that calculates the nth prime number
;; Takes in one parameter, n, which is the number of prime numbers to be calculated
(defun nth-prime (n)
  (let ((prime-list '(2)) (i 3))
    (while (< (length prime-list) n)
      (if (is-prime i prime-list) ; checks if i is prime by calling helper function
          (push i prime-list)) ; if i is prime, add it to the list
      (setf i (+ i 2))) ; increase i by 2 to check the next odd number
    (nth (1- n) prime-list))) ; returns the nth prime number from the list

;; Helper function to check if a number is prime
;; Takes in two parameters: n, the number to be checked and prime-list, a list of prime numbers
(defun is-prime (n prime-list)
  (loop for prime in prime-list
        do (when (= (mod n prime) 0)
             (return nil))) ; if n is divisible by any of the prime numbers, return false
  (return t)) ; if n is not divisible by any prime number, return true