;;;;;; Function to calculate the factorial of a number

;;; Variable declarations

(defvar *factorial* 1) ;;; Declare variable *factorial* and initialize it to 1
(defvar *input* 5) ;;; Declare variable *input* and initialize it to 5

;;; Function to calculate the factorial of a number
(defun factorial (n) ;;; Define function named factorial which takes a parameter n
    (if (< n 1) ;;; Check if n is less than 1
        *factorial* ;;; If true, return the value of *factorial*
        (let ( ;;; else, create a let block to declare temporary variables
            (result 1) ;;; Declare variable result and initialize it to 1
            (current 1) ;;; Declare variable current and initialize it to 1
        )
            (loop ;;; Use loop construct to iterate through values from 1 to n
                for i from 1 to n ;;; Declare a loop variable i and loop from 1 to n
                do
                    (setf current (* current i)) ;;; Calculate current value by multiplying with loop variable i
                    (setf result (+ result current)) ;;; Calculate result by adding current value to result
            )
            (setf *factorial* result) ;;; Set the value of *factorial* to the final result
            *factorial* ;;; Return the value of *factorial*
        )
    )
)

;;; Call the function and print the result
(print (factorial *input*)) ;;; Call the factorial function using the value of *input* and print the result