;;; This function takes in a list of numbers and returns the sum of the squares of those numbers
;;; (defun sum-of-squares (list)
;;; 	"Returns the sum of the squares of the numbers in the given list"
;;; 	(if (null list)  ; base case - if list is empty, return 0
;;;	    0
;;;	    (+ (expt (car list) 2)             ; square the first element
;;;		(sum-of-squares (cdr list)))))  ; recursively call function on remaining elements

(sum-of-squares (list 1 2 3 4 5))   ; prints 55, which is the sum of the squares of 1, 2, 3, 4, and 5