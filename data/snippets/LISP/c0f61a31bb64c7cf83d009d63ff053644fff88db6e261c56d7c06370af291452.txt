(defun quicksort (lst)                         ; define a function named 'quicksort' with parameter 'lst'
  (if (or (null lst) (<= (length lst) 1))      ; if the list is empty or has 1 element
    lst                                        ; return the list as it is
    (let ((p (car lst)))                       ; else set the pivot as the first element of the list
      (append                                    ; concatenate
        (quicksort (remove-if-not #'>= lst p))   ; recursively call quicksort on list of elements greater than or equal to pivot
        (list p)                                 ; add pivot to the end
        (quicksort (remove-if-not #'<= lst p))))) ; recursively call quicksort on list of elements less than or equal to pivot
  )