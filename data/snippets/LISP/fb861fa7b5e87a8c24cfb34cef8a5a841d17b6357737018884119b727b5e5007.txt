(defun insertion-sort (list)
    "Performs insertion sort, taking a list as input."
    (let ((sorted (car list)) ; create new list with first element of input list as sorted
        (remaining (cdr list))) ; create new list with remaining elements of input list
        (while remaining ; iterate through remaining elements
            (let ((value (car remaining))) ; store current value
                (dotimes (i (length sorted)) ; loop through sorted list length
                    (if (>= value (nth i sorted)) ; compare current value with sorted list element
                        (let ((new-sorted (append sorted nil))) ; if value is greater, add to end of sorted list
                            (setf (nth (+ i 1) new-sorted) value) ; update sorted list with new value
                            (setf sorted new-sorted)) ; set sorted list to new list
                        (let ((new-sorted (append nil sorted))) ; if value is less, add to beginning of sorted list
                            (setf (nth i new-sorted) value) ; update sorted list with new value
                            (setf sorted new-sorted))))) ; set sorted list to new list
            (setf remaining (cdr remaining))) ; move to next element in remaining list
        sorted)) ; return sorted list