;;; The following code is an implementation of the bubble sort algorithm in LISP

;;; Function taking in a list and returning a sorted version of the list
(defun bubble-sort (list)
   (if (null list)
       nil
       (bubble-sort-iter list nil)))

;;; Helper function that performs the actual sorting
(defun bubble-sort-iter (list swapped)
   (let ((next-list (bubble-iterate list))
         (next-swapped (bubble-is-swapped list)))
     (if (not next-swapped)
         list
         (bubble-sort-iter next-list next-swapped))))

;;; Function to iterate through the list and swap unordered elements
(defun bubble-iterate (list)
   (if (null (cdr list))
       list
       (let ((next-list (cdr list))
             (current (car list))
             (next (cadr list)))
         (if (> current next)
             (cons next (bubble-iterate (cons current (cddr list))))
             (cons current (bubble-iterate next-list))))))

;;; Function to check if any elements have been swapped during iteration
(defun bubble-is-swapped (list)
   (if (null (cdr list))
       nil
       (let ((current (car list))
             (next (cadr list)))
         (or (> current next) (bubble-is-swapped (cdr list))))))

;;; Example usage with input list
(bubble-sort '(5 2 8 1 3)) ;; Output: (1 2 3 5 8)