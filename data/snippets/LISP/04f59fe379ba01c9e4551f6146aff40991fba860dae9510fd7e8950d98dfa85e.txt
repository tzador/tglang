;;;This is a function that takes in a list and checks if all elements
;;;are odd numbers. If so, it returns a list of their squares, if not,
;;;it returns an empty list.

(defun find-odd-squares (lst)
  "Takes in a list and returns a list of the squares of all odd numbers in the list"
  (if (null lst) ;;;Check if list is empty
      '() ;;;If empty, return empty list
      (let ((x (car lst))) ;;;Get the first element of list and assign to x
        (if (oddp x) ;;;Check if x is odd
            (cons (* x x) (find-odd-squares (cdr lst))) ;;;If odd, cons (multiply x with itself) to the result of recursive call with rest of list as argument
            (find-odd-squares (cdr lst)))))) ;;;If not, skip x and recursively call with rest of list

;;;Example input and output:
(find-odd-squares (list 1 2 3 4 5)) ;;;(1 9 25)
(find-odd-squares (list 2 4 6 8)) ;;;()
(find-odd-squares '()) ;;;()

;;;Explanation:
;;;The function first checks if the list is empty, if so, it returns an empty list.
;;;If the list is not empty, it checks the first element (x) to see if it is odd.
;;;If x is odd, it multiplies it with itself and cons it to the result of a recursive call
;;;with the rest of the list as argument, which essentially checks the same condition for each element in the list.
;;;If x is not odd, it skips it and continues with the recursive call.
;;;This continues until all elements in the list have been checked.
;;;The final result is a list of squares of all odd numbers in the original list.