;; Define a function to find the nth number in a Fibonacci sequence
;; Takes in a number n and returns the nth number in Fibonacci sequence
(defun fib (n)
    (if (or (equal n 0) (equal n 1))
        n
        (+ (fib (- n 1)) (fib (- n 2)))))

;; Define a function to find the factorial of a number
;; Takes in a number n and returns n!
(defun factorial (n)
    (if (equal n 0)
        1
        (* n (factorial (- n 1)))))

;; Define a function to calculate the area of a triangle
;; Takes in the base and height lengths and returns the area
(defun area-triangle (base height)
    (/ (* base height) 2))

;; Define a function to calculate the volume of a sphere
;; Takes in the radius and returns the volume
(defun volume-sphere (radius)
    (/ (* 4 pi radius radius radius) 3))

;; Define a function to sort a list of numbers in ascending order
;; Takes in a list and returns a sorted list
(defun sort-list (lst)
    (if (< (length lst) 2)
        lst
        (let ((pivot (nth (floor (/ (length lst) 2)) lst)))
            (append (sort-list (remove-if (lambda (x) (< x pivot)) lst))
                    (list pivot)
                    (sort-list (remove-if (lambda (x) (>= x pivot)) lst))))))