;;; Creates a function that sorts a list using insertion sort

(defun insertion-sort (lst)
  "Insertion sort function that takes in a list"
  
  (let ((output '())) ;; initialize an empty list
    (loop for i in lst ;; iterate through each element in the list
          do (setf output (insert-item i output)) ;; insert element into sorted list
          finally (return output)))) ;; return the sorted list at the end

(defun insert-item (item lst)
  "Insert item into a list in sorted order"
  
  (if (null lst) ;; if the list is empty, just return a list containing the item
      (list item)
      (let ((first-elem (first lst)) ;; get the first element of the list
            (remaining-elems (rest lst))) ;; get the remaining elements of the list
        (if (> item first-elem) ;; if the item is greater than the first element
            (cons first-elem (insert-item item remaining-elems)) ;; insert the item after the first element
            (cons item lst))))) ;; otherwise, insert the item at the beginning of the list

;; Example usage:
(insertion-sort '(5 2 1 4 3)) 
;; Output: (1 2 3 4 5)