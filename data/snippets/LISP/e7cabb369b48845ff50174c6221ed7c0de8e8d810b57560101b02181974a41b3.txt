;; Function to compute the factorial of a number
(defun factorial (n)
  (if (<= n 1) 1 ; Base case: if n is 0 or 1, return 1
    (* n (factorial (- n 1))) ; Recursive case: compute n times the factorial of n-1
  ))

;; Function to compute the nth Fibonacci number
(defun fibonacci (n)
  (if (or (= n 1) (= n 0)) n ; Base case: if n is 0 or 1, return n
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ; Recursive case: compute the sum of the (n-1)th and (n-2)th Fibonacci numbers
  ))

;; Function to count the number of elements in a list
(defun list-length (lst)
  (if (null lst) 0 ; Base case: if the list is empty, return 0
    (+ 1 (list-length (rest lst))) ; Recursive case: add 1 to the length of the list without the first element
  ))

;; Function to check if a given list is a palindrome
(defun is-palindrome (lst)
  (if (or (null lst) (null (rest lst))) t ; Base case: if the list is empty or has only one element, it is a palindrome
    (equal (first lst) (first (last lst)) ; Check if the first and last elements are equal
      (is-palindrome (subseq lst 1 (1- (length lst)))) ; Recursive case: check for palindrome without the first and last elements
    )
  ))
  
;; Function to test if a number is prime
(defun is-prime (n)
  (if (>= n 2) ; Check if n is greater than or equal to 2
    (loop for i from 2 to (sqrt n) ; Loop from 2 to square root of n
      if (zerop (mod n i)) return nil ; If n is divisible by i, return false
      finally (return t)) ; If no factor is found, return true
  ))