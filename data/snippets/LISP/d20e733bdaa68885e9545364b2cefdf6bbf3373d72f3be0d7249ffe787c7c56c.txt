(defparameter *list-length* 10) ; Define a global parameter *list-length* with a value of 10
(defun generate-filtered-list (lst) ; Define a function named generate-filtered-list that takes a list 'lst' as input
  (if (listp lst) ; Check if 'lst' is a list
      (loop for item in lst
            if (and (numberp item)
                    (evenp item))
            collect item into filtered-list ; Collect even numbers into a new list filtered-list
            finally (when (< (length filtered-list) *list-length*) ; Check if length of filtered-list is less than *list-length*
                      (error "Filtered list is smaller than designated length")))
      (error "Input list must be a list"))) ; Print error message if input is not a list

(defun add-one (x) ; Define a function add-one that takes a number 'x' as input
  (+ x 1)) ; Add 1 to the input number and return the result

(let ((lst (list 1 2 3 4 5 6 7 8 9 10))) ; Create a list with numbers 1 to 10 and bind it to variable 'lst'
  (generate-filtered-list lst) ; Use function 'generate-filtered-list' to generate a new list of even numbers
  (mapcar #'add-one lst)) ; Use function 'add-one' to increment every number in the original list 'lst' by 1 and return the result