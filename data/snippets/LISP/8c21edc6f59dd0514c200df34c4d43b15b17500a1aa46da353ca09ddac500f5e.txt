(defun quicksort (list)                          ; Defines a function named quicksort that takes in a list as its argument
  (if (null list) nil                            ; Checks if the list is empty and returns nil if it is
    (let ((pivot (first list)))                  ; Assuming a pivot is the first element of the list
      (append
        (quicksort (remove-if (lambda (x)        ; Calls the quicksort function recursively using the remove-if function
                                 (>= x pivot))   ; Takes in a lambda function which checks if the element is greater than the pivot
                              (rest list)))       ; Applies the function on the rest of the list after removing the pivot
        (list pivot)                             ; Appends the pivot to the result of the recursive call
        (quicksort (remove-if (lambda (x)        ; Calls the quicksort function again using the remove-if function
                                 (<= x pivot))   ; Takes in a lambda function which checks if the element is less than or equal to the pivot
                              (rest list)))))))    ; Applies the function on the rest of the list after removing the pivot
  ;; Output: The sorted list in ascending order.  ;; This annotation describes the desired output of the function.