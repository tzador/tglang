;; Define a function 'factorial' that takes in a number 'n' as input
;; and calculates the factorial of 'n' using tail recursion.

(defun factorial (n) 
  ;; Define an internal helper function 'fact-acc'
  ;; which takes in three parameters, 'n', 'acc' and 'result'
  ;; 'n' represents the current number, 'acc' represents the accumulator,
  ;; and 'result' represents the final result.
  
  (labels ((fact-acc (n acc result)
             ;; Use conditional statements to check if 'n' has reached 1,
             ;; which is the base case of the factorial function.
             (if (= n 1) 
                 ;; If true, return the 'result' as the final factorial value.
                 result 
                 ;; Otherwise, recursively call 'fact-acc' with updated parameters.
                 ;; The updated 'n' is 'n-1' and 'acc' is 'n * acc'.
                 (fact-acc (- n 1) (* n acc) result))))
    ;; Call the 'fact-acc' function with initial parameters,
    ;; 'n' as the input number, '1' as the initial accumulator
    ;; and 'n' as the initial result.
    ;; This tail recursion will continue until the base case is reached.
    (fact-acc n 1 n)))
    
;; Call the 'factorial' function with input of 5 and print the result.
(factorial 5)