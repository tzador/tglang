;;; Helper function for determining if a shape is a triangle
(defun is-triangle (a b c)
  "This function takes three sides of a shape and
  checks if they can form a triangle."
  (and (> a 0) (> b 0) (> c 0) ; check for positive numbers
       (not (or (>= (+ c b) a) (>= (+ c a) b) (>= (+ b a) c))) ; check triangle inequality
       t))

;;; Function to calculate the area of a triangle using Heron's Formula
(defun triangle-area (a b c)
 "This function calculates the area of a triangle
  using Heron's Formula which requires the three sides of the triangle."
  (let ((s (/ (+ a b c) 2))) ; calculate semi-perimeter
    (sqrt (* s (- s a) (- s b) (- s c))))) ; calculate area using Heron's Formula

;;; Function to classify a triangle based on its sides
(defun triangle-classification (a b c)
  "This function takes three sides of a triangle
   and classifies it based on its sides - equilateral, isosceles or scalene."
  (cond ((is-triangle a b c) ; check if it is a valid triangle
         (cond ((and (= a b) (= b c)) "Equilateral") ; check for equal sides
               ((or (= a b) (= b c) (= a c)) "Isosceles") ; check for two equal sides
               (t "Scalene"))) ; if none of the above, classify as scalene
        (t "Not a valid triangle"))) ; if not a valid triangle, output error message