(defclass person                     ; Defines a new class named "person"
  ((name :accessor name-of-person)   ; Defines a slot "name" with read accessor "name-of-person"
   (age :accessor age-of-person)     ; Defines a slot "age" with read accessor "age-of-person"
   (gender :accessor gender-of-person 
           :initarg :sex)            ; Defines a slot "gender" with read accessor "gender-of-person"
                                     ; and a keyword initarg ":sex"
   (date-of-birth :initform         
           (format nil "January 1, 2000"))     ; Defines a slot "date-of-birth" with a default
                                                ; value of "January 1, 2000"
                                     ; and uses the "format" function to format the value as a string
   (hobbies :accessor hobbies-of-person 
            :initarg :interests 
            :initform '("reading" "hiking" "painting"))     ; Defines a slot "hobbies" with a default
                                                             ; value of a list containing strings
                                                             ; and a keyword initarg ":interests"
   (friends :accessor friends-of-person 
            :initform nil 
            :initarg :friends)))            ; Defines a slot "friends" with a default value of nil
                                             ; and a keyword initarg ":friends" 

(defmethod introduce-yourself ((person person))                ; Defines a method "introduce-yourself" 
  (format t "Hello! My name is ~a." (name-of-person person)))  ; with a single parameter of type "person"
                                                               ; and uses the "format" function to print 
                                                               ; a greeting with the person's name
(defparameter *john*
  (make-instance 'person                       ; Creates a new instance of the "person" class
                 :name "John" 
                 :age 25 
                 :sex 'male))                   ; Uses keyword arguments to set the initial values 
                                                ; for the slots "name", "age", and "gender"
(format t "John is ~s years old." (age-of-person *john*)))     ; Uses the "format" function to print 
                                                                ; the person's age with the variable *john* as the argument 
                                                                ; Note: the output should be "John is 25 years old."