;; This code snippet demonstrates the implementation of a binary search tree in LISP.

;; Define a binary search tree node struct that holds a value and pointers to its left and right child nodes.
(defstruct bst-node
  value
  left
  right)

;; Define a function to insert a new value into a binary search tree.
(defun insert (tree value)
  ;; If the tree is empty, create a new node with the given value.
  (when (null tree)
    (make-bst-node :value value))
  ;; If the value is less than the current node's value, insert it into the left subtree.
  (if (< value (bst-node-value tree))
    (setf (bst-node-left tree) (insert (bst-node-left tree) value)))
  ;; If the value is greater than the current node's value, insert it into the right subtree.
  (if (> value (bst-node-value tree))
    (setf (bst-node-right tree) (insert (bst-node-right tree) value)))
  ;; Return the updated tree.
  tree)

;; Define a function to search for a value in a binary search tree.
(defun search (tree value)
  ;; If the tree is empty or the current node's value is equal to the given value, return the tree.
  (if (or (null tree) (= (bst-node-value tree) value))
    tree
    ;; If the value is less than the current node's value, search in the left subtree.
    (if (< value (bst-node-value tree))
      (search (bst-node-left tree) value)
      ;; If the value is greater than the current node's value, search in the right subtree.
      (search (bst-node-right tree) value))))

;; Define a function to print the values of a binary search tree in order.
(defun print-in-order (tree)
  ;; If the tree is not empty, print the left subtree, then the current node's value, then the right subtree.
  (when tree
    (print-in-order (bst-node-left tree))
    (print (bst-node-value tree))
    (print-in-order (bst-node-right tree))))

;; Create an empty binary search tree.
(defvar bst nil)

;; Insert some values into the tree.
(setf bst (insert bst 5))
(setf bst (insert bst 2))
(setf bst (insert bst 8))
(setf bst (insert bst 4))
(setf bst (insert bst 1))
(setf bst (insert bst 7))

;; Print the values of the tree in order.
(print-in-order bst)

;; Output:
;; 1
;; 2
;; 4
;; 5
;; 7
;; 8