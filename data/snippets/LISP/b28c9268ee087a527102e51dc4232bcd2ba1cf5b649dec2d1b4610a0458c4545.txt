;; Define a function to find the sum of two numbers and print the result
(defun sum (a b)
  "Returns the sum of two numbers."
  (+ a b))

;; Define a function to find the absolute value of a number
(defun abs (n)
  "Returns the absolute value of a number."
  (if (< n 0)
      (- n)
      n))

;; Define a function to find the factorial of a number
(defun factorial (n)
  "Returns the factorial of a number."
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

;; Define a function to find the n-th Fibonacci number
(defun fibonacci (n)
  "Returns the n-th Fibonacci number."
  (if (<= n 1)
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

;; Define a function to check if a number is a palindrome
(defun palindrome? (n)
  "Checks if a number is a palindrome."
  (equal (string n) (string (reverse n))))

;; Define a function to find all prime numbers up to a given number
(defun sieve-of-eratosthenes (n)
  "Returns a list of all prime numbers up to a given number."
  (let ((numbers (make-array n :initial-contents (loop for i from 2 to n collect i)))
        (limit (sqrt n)))
    (loop for i from 2 to limit do
      (when (aref numbers i)
        (loop for j from (* i i) to n by i do
          (setf (aref numbers j) nil))))
    (loop for i from 2 to n when (aref numbers i) collect i)))

;; Define a macro to time the execution of a given function
(defmacro time-function (function)
 `(let ((start-time (get-internal-run-time)))
    (prog1 (funcall ,function)
      (format t "~&Executed in ~,2F milliseconds.~&"
              (/ (float (- (get-internal-run-time) start-time)) internal-time-units-per-second)))))