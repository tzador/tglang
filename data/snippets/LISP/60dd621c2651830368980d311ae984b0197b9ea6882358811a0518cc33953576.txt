;;; An implementation of Depth-First Search


;;; Classes 

;; Node class to represent a node in the search tree
(defclass node ()
  ((state :accessor node-state :initarg :state)
   (parent :accessor node-parent :initarg :parent)
   (action :accessor node-action :initarg :action)
   (depth :accessor node-depth :initarg :depth)))

;; Stack class to represent a stack data structure for DFS
(defclass stack ()
  ((stack :accessor stack :initarg :stack)))

;;; Helper Functions 

;; Checks if a given node is a goal state
(defun goal-state-p (node goal-state)
  (equal (node-state node) goal-state))

;; Expands a given node by generating all possible child nodes
(defun expand (node problem)
  (loop for action in (problem-actions problem)
     for child-state = (problem-result problem (node-state node) action)
     for child-node = (make-instance 'node
                    :state child-state
                    :parent node
                    :action action
                    :depth (1+ (node-depth node)))
     collect child-node))

;;; Depth-First Search Algorithm 

(defun depth-first-search (problem)
  (let ((stack (make-instance 'stack :stack (list (make-instance 'node
                                                  :state (problem-initial-state problem)
                                                  :parent nil
                                                  :action nil
                                                  :depth 0)))))
    
    ;; Loop until stack is empty
    (loop while (stack)
       do (let ((node (pop (stack stack)))) ; Pop the top node from the stack
            (if (goal-state-p node (problem-goal-state problem)) ; Check if node is goal state
               (return (solution node))
               ;; Expand the node and push child nodes onto stack in reverse order to maintain LIFO 
               (setf (stack stack)
                     (append (reverse (expand node problem))
                             (stack stack))))))))