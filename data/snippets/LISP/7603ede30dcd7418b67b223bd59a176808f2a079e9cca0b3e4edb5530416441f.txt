;; This code snippet is a function called "quicksort" that takes in a list of numbers named "lst"
;; and returns a sorted list in ascending order using the quicksort algorithm.
;; This function uses recursion and the "car" and "cdr" built-in functions to split the list and
;; then combine the sorted sublists.
(defun quicksort (lst)
  (if (null lst)
    nil
    (let ((pivot (car lst))  ; define pivot as first element of list
          (tail (cdr lst)))  ; define tail as rest of list
      (append (quicksort (remove-if-not #'(lambda (x) (< x pivot)) tail))  ; recursively sort smaller elements than pivot
              (list pivot)  ; add pivot element
              (quicksort (remove-if-not #'(lambda (x) (> x pivot)) tail)))))  ; recursively sort larger elements than pivot
              
;; Example: (quicksort '(5 2 8 1 9))  ; returns (1 2 5 8 9)