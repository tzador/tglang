;; Defining a function to check for prime numbers
(defun is-prime (n)
  "Checks if number n is prime"
  (cond
    ;; If n is 0 or 1, it is not prime
    ((or (equal n 0) (equal n 1)) nil)
    ;; If n is 2, it is prime
    ((equal n 2) t)
    ;; If n is even, it is not prime
    ((equal (mod n 2) 0) nil)
    ;; If n is odd, check for factors other than 1 and itself
    (t (loop for i from 3 to (isqrt n) by 2
             when (equal (mod n i) 0) do (return nil))
       t)))
       
;; Function to calculate nth Fibonacci number using recursion
(defun fibonacci (n)
  "Returns nth Fibonacci number"
  (cond
    ;; If n is 0, return 0
    ((equal n 0) 0)
    ;; If n is 1, return 1
    ((equal n 1) 1)
    ;; For larger n, use recursion to add previous two Fibonacci numbers
    (t (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))

;; Calling the function to check if 7 is a prime number
(is-prime 7)

;; Calling the function to calculate the 10th Fibonacci number
(fibonacci 10)