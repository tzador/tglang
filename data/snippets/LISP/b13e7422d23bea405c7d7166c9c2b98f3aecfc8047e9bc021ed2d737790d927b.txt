;; This code snippet generates a list of the first 100 prime numbers
;; Define a function to check if a number is prime
(defun prime (n)
  (cond ((= n 2) t) ;Base case: check if number is 2
        ((= (mod n 2) 0) nil) ;Even numbers are not prime
        (t ;If number is not 2 or even, check if it has any factors
          (do ((i 3 (+ i 2))) ;Loop through odd numbers starting from 3
              ((> i (isqrt n)) t) ;Quit loop when we reach square root of n
            (when (= (mod n i) 0) ;Check if number is divisible by current odd number
              (return nil))))))

;; Define a function to generate a list of prime numbers up to a given limit
(defun prime-list (limit)
  (do ((i 3 (+ i 2)) ;Start at 3 and increment by 2 to only check odd numbers
       (list '(2))) ;List starts with 2, as it is the only even prime number
      ((>= i limit) (reverse list)) ;Stop when we reach our limit, then reverse the list
    (when (prime i) ;Check if current number is prime
      (push i list)))) ;If it is, add it to the list
    
(prime-list 100) ;Call the function with a limit of 100 to generate a list of the first 100 prime numbers