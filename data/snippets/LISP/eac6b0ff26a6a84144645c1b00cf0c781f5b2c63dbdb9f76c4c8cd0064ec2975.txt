(defun quicksort (lst)
    ;; This function implements the quicksort algorithm
    ;; Given a list, it returns a sorted list in ascending order
    
    (if (null lst) ; checks if list is empty
        nil ; if empty, return an empty list
        (let ((pivot (first lst))) ; sets pivot as first element of list
            (let ((smaller (remove-if #'(lambda (x) (> x pivot)) lst))) ; creates list of elements smaller than pivot
                (let ((larger (remove-if #'(lambda (x) (< x pivot)) lst))) ; creates list of elements larger than pivot
                    (append (quicksort smaller) (list pivot) (quicksort larger))))))) ; recursively calls quicksort on smaller and larger lists, and appends them together with pivot in the middle