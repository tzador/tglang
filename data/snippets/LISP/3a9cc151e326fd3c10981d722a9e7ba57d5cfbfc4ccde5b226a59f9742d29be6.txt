;;; Create a function that performs a binary search on a sorted list
;;; Input parameters: list - the sorted list to search; 
;;;                   target - the element to search for; 
;;;                   low - the lowest index of the range to search; 
;;;                   high - the highest index of the range to search
;;; Output: the index of the target element if found, or NIL if not found
(defun binary-search (list target low high)
  ;; Check for empty list or if target is not within range
  (if (null list) 
      NIL 
    ;; Calculate the middle index
    (let ((mid (/ (+ low high) 2)))
      ;; Check if target is equal to element at middle index
      (if (= (nth mid list) target) 
          mid
        ;; If not, check if target is less than element at middle index
        (if (< target (nth mid list)) 
            ;; Recursively call binary-search with new high index as middle index - 1
            (binary-search list target low (1- mid))
          ;; Else, recursively call binary-search with new low index as middle index + 1
          (binary-search list target (1+ mid) high))))))

;;; Example use:
(binary-search '(1 2 3 4 5 6 7) 5 0 6)
;; Output: 4
(binary-search '(1 2 3 4 5 6 7) 8 0 6)
;; Output: NIL