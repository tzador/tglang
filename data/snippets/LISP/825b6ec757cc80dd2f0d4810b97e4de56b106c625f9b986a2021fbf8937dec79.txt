;;; Function to compute power of a number
(defun power (base exponent)
  "Returns the power of a number"
  (cond ((= exponent 0) 1) ; if exponent is 0, return 1
        ((= exponent 1) base) ; if exponent is 1, return base
        ((< exponent 0) ; if exponent is negative, compute 1 divided by the power of base and negative exponent
         (/ 1 (power base (- exponent))))
        (t ; otherwise, multiply base by the power of base and exponent decremented by 1
         (* base (power base (- exponent 1))))))

;;; Function to compute the factorial of a number
(defun factorial (n)
  "Computes the factorial of a number"
  (cond ((= n 0) 1) ; if n is 0, return 1
        ((< n 0) nil) ; if n is negative, return nil
        (t (* n (factorial (1- n)))))) ; otherwise, multiply n by the factorial of n-1

;;; Function to check if a list is sorted in ascending order
(defun is-sorted (lst)
  "Checks if the list is sorted in ascending order"
  (cond ((null lst) t) ; if list is empty, return true
        ((null (cdr lst)) t) ; if list has only one element, return true
        ((> (car lst) (cadr lst)) nil) ; if first element is greater than second element, return false
        (t (is-sorted (cdr lst))))) ; otherwise, recurse on the rest of the list

;;; Function to find the maximum element in a list
(defun max-element (lst)
  "Finds the maximum element in a list"
  (cond ((null lst) nil) ; if list is empty, return nil
        ((null (cdr lst)) (car lst)) ; if list has only one element, return that element
        ((>= (car lst) (cadr lst)) (max-element (cons (car lst) (cddr lst)))) ; if first element is greater than or equal to second element, recurse on the rest of the list
        ((< (car lst) (cadr lst)) (max-element (cdr lst))))) ; otherwise, recurse on the rest of the list

;;; Function to perform binary search on a sorted list
(defun binary-search (lst key)
  "Performs binary search on a sorted list"
  (let ((low 0)
        (high (1- (length lst)))
        (mid))
    (loop while (<= low high)
          do (progn
               (setf mid (floor (+ low high) 2))
               (cond ((= (elt lst mid) key) (return mid)) ; if middle element is equal to key, return its index
                     ((> (elt lst mid) key) (setf high (1- mid))) ; if middle element is greater than key, set high to the previous index of mid
                     ((< (elt lst mid) key) (setf low (1+ mid)))))) ; if middle element is less than key, set low to the next index of mid
    nil)) ; if key is not found, return nil

;;; Function to perform linear interpolation
(defun linear-interpolate (x1 y1 x2 y2 x)
  "Performs linear interpolation between two points"
  (+ y1 (* (/ (- y2 y1) (- x2 x1)) (- x x1))))

;;; Driver code to test the functions
(format t "Power of 2 raised to 4 is ~a~%" (power 2 4))
(format t "Factorial of 5 is ~a~%" (factorial 5))
(format t "Is the list (1 2 3 4 5) sorted? ~a~%" (is-sorted '(1 2 3 4 5)))
(format t "Maximum element in the list (3 5 1 8 2) is ~a~%" (max-element '(3 5 1 8 2)))
(format t "Binary search for 6 in the list (1 2 3 4 5 6 7 8) returns index ~a~%" (binary-search '(1 2 3 4 5 6 7 8) 6))
(format t "Linear interpolation: (x1, y1) = (1, 5), (x2, y2) = (4, 12), x = 2 returns ~a~%" (linear-interpolate 1 5 4 12 2))