;;; Quick sort algorithm in LISP

;; Function to partition the list around the pivot element
(defun partition (list pivot)
  (let ((smaller '())
        (larger '())
        (pivot-element (car pivot))
        (rest (cdr pivot)))
    (dolist (x list)
      (if (< x pivot-element)
          (setq smaller (cons x smaller))
          (setq larger (cons x larger))))
    (append smaller (list pivot-element) larger)))

;; Quick sort function
(defun quick-sort (list)
  (if (null list)
      (list)
      (let ((pivot (list (car list))))
        (append (quick-sort (partition (cdr list) pivot)) (list (car list))
                (quick-sort (cdr (cdr list)))))))

;; Main function to test quick sort
(defun main ()
  (format t "Enter the size of the list: ")
  (let ((size (parse-integer (read-line))))
    (format t "Enter the elements of the list: ")
    (let ((list (read (read-line))))
      (format t "Unsorted list: ~a~%" list)
      (format t "Sorted list: ~a~%" (quick-sort list)))))