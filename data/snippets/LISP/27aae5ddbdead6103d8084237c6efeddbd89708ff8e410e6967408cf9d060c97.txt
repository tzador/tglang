;; This is a function that checks if a list is in ascending order
;; It takes in a list and returns a boolean value indicating if the list is in ascending order

(defun ascending (list)
  (cond ((null list) t) ; Base case: empty list is always in ascending order
        ((null (rest list)) t) ; Base case: a list with 1 element is always in ascending order
        ((> (first list) (second list)) nil) ; If the first element is larger than the second, the list is not in ascending order
        (t (ascending (rest list))) ; Recursively check the rest of the list
    )
)

(ascending '(1 3 5 8)) ; Output: T (indicating that the list is in ascending order)
(ascending '(3 2 1)) ; Output: NIL (indicating that the list is not in ascending order)

;; The function uses the conditional statement "cond" to check for each case where the list might not be in ascending order
;; If the list is empty or has only one element, it is considered to be in ascending order
;; If the first element is larger than the second, the function returns false
;; If none of the above cases are true, it recursively calls itself on the rest of the list