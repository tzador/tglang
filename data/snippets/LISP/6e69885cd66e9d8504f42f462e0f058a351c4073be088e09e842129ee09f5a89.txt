;; Define a function for calculating the factorial of a number
(defun factorial (n)
  (if (<= n 1)
    1
    (* n (factorial (- n 1)))))

;; Define a function for calculating the nth Fibonacci number
(defun fib (n)
  (if (<= n 1)
    n
    (+ (fib (- n 1)) (fib (- n 2)))))

;; Define a function for checking if a number is prime
(defun is-prime (n)
  (cond ((<= n 1) nil)                       ; Numbers less than or equal to 1 are not prime
        ((= n 2) t)                         ; 2 is the only even prime number 
        ((evenp n) nil)                     ; Other even numbers are not prime
        (t (loop for i from 3 to (isqrt n)   ; Loop through odd numbers from 3 to square root of n
           by 2                               ; Increment by 2 to skip even numbers
           when (zerop (mod n i))             ; If n is divisible by i
           return nil)))                      ; Then n is not prime, return nil
  t)

;; Define a recursive function for calculating the average of a list of numbers
(defun average (lst)
  (if (null lst)
    0
    (/ (+ (car lst) (average (cdr lst))) (length lst))))

;; Define a macro for printing "Hello, World!"
(defmacro hello ()
  `(format t "Hello, World!"))                ; Backtick allows for code interpolation with commas

;; Define a class for representing a person
(defclass person ()
  ((name :accessor get-name                   ; Define a getter method for name
         :initarg :name                        ; Define initialization argument
         :initform "John Doe"                  ; Default value if no argument given
         :type string)                         ; Specify type
   (age :accessor get-age                      ; Define a getter method for age
        :initarg :age                          ; Define initialization argument
        :initform 18                           ; Default value if no argument given
        :type integer)))                       ; Specify type

;; Define a method for checking if the person is an adult (age over 18)
(defmethod is-adult ((person person))
  (> (get-age person) 18))

;; Create an instance of the person class with name "Jane Doe" and age 25
(defparameter jane (make-instance 'person :name "Jane Doe" :age 25))

;; Print out information about Jane
(format t "Name: ~a, Age: ~a~%" (get-name jane) (get-age jane))

;; Check if Jane is an adult
(format t "Is Jane an adult? ~a~%" (is-adult jane))

;; Calculate factorial of 5 and print it out
(let ((n 5))
  (format t "Factorial of ~a is ~a~%" n (factorial n)))

;; Calculate the 10th Fibonacci number and print it out
(let ((n 10))
  (format t "The 10th Fibonacci number is ~a~%" (fib n)))

;; Create a list of numbers and calculate their average
(defparameter numbers '(1 2 3 4 5))
(format t "The average of numbers ~a is ~a~%" numbers (average numbers))

;; Print "Hello, World!"
(hello)