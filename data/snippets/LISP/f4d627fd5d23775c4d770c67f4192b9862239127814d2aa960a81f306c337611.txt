(defparameter *fib-numbers* '(1 1)) ; Define a global variable to hold the first two numbers in the Fibonacci sequence

(defun fib (n) ; Create a function that calculates the Fibonacci sequence up to the specified number
  (cond ((< n 1) nil) ; If the number is less than 1, return nil
        ((<= n (length *fib-numbers*)) (nth n *fib-numbers*)) ; If the number is within the length of the already calculated numbers, return the nth number
        (t (let* ((prev1 (nth (- n 1) *fib-numbers*)) ; Otherwise, calculate the previous two numbers in the sequence using recursion
                  (prev2 (nth (- n 2) *fib-numbers*))
                  (result (+ prev1 prev2)))
             (setf *fib-numbers* (append *fib-numbers* (list result))) ; Add the newly calculated number to the global variable
             result)))) ; Return the calculated number

(format t "Fibonacci sequence up to 10: ~{~a ~}" ; Print out the sequence up to 10 using the format function and iterating over the numbers
  (loop for i from 0 to 10 collect (fib i)))

; Output:
; Fibonacci sequence up to 10: 1 1 2 3 5 8 13 21 34 55 89