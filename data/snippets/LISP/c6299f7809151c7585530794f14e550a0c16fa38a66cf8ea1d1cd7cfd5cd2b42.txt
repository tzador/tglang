;; Define a function that takes in two parameters
(defun calculate-factorial (n iteration)
  ;; Initialize a variable to store the factorial value
  (let ((factorial 1))
    ;; Iterate through the numbers from 1 to the given iteration
    (dotimes (i iteration)
      ;; Update the factorial value by multiplying it with the current number
      (setf factorial (* factorial (1+ i))))
    ;; Return the factorial value
    factorial))

;; Define a function to compute the sum of factorials
(defun compute-sum-of-factorials (x)
  ;; Initialize an empty list to store the factorials
  (let ((factorial-list ()))
    ;; Iterate through the numbers from 1 to x
    (dotimes (i x)
      ;; Calculate the factorial of the current number
      (setf current-factorial (calculate-factorial i i))
      ;; Add the factorial value to the list
      (setf factorial-list (cons current-factorial factorial-list))))
    ;; Return the sum of the factorials
    (apply #'+ factorial-list))