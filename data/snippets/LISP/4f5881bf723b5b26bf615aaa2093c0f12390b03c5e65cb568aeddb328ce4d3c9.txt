(defun check-prime (num) ; define a function called check-prime that takes in a parameter 'num'
  (cond ((= num 2) T) ; if num is 2, return T (True)
        ((= num 1) NIL) ; if num is 1, return NIL (False)
        ((= 0 (mod num 2)) NIL) ; if num is even, return NIL
        (t (check-prime-recursion num (+ 2 (sqrt num) 1))))) ; otherwise, call check-prime-recursion function with parameters num, 2 plus the square root of num, and 1; 
                                                              ; this is done to check divisibility only with odd numbers
                                                              
(defun check-prime-recursion (num divisor) ; define a recursive function called check-prime-recursion that takes in 2 parameters, num and divisor
  (cond ((= divisor num) T) ; if divisor is equal to num, return T (True)
        ((= 0 (mod num divisor)) NIL) ; if num is divisible by divisor, return NIL (False)
        (t (check-prime-recursion num (+ divisor 2))))) ; otherwise, call check-prime-recursion function recursively with parameters num and divisor plus 2, 
                                                        ; to check divisibility only with odd numbers

(format t "Enter a number: ") ; prints "Enter a number: " to the console
(let ((num (read))) ; creates a variable called num and assigns it the value entered by the user through the console
  (if (check-prime num) ; checks if the return value of check-prime function with parameter num is True
    (princ "The number is prime") ; if yes, prints "The number is prime" to the console
    (princ "The number is not prime"))) ; if no, prints "The number is not prime" to the console