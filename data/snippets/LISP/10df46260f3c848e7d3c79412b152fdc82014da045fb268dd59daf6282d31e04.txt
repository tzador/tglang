;;; BUBBLE SORT IMPLEMENTATION

;;; Define a function for swapping elements in a list
;;; Input: two indices and a list
;;; Output: a new list with the elements at the given indices swapped
(defun swap (i j list)
  (let ((first-elem (nth i list))
        (second-elem (nth j list)))
    (setf (nth i list) second-elem)
    (setf (nth j list) first-elem)
    list))

;;; Define a function for performing a single pass of bubble sort
;;; Input: a list and an index
;;; Output: a new list with the element at the given index sorted
(defun bubble-pass (list index)
  (if (<= index 1)
      list
      (let ((current-elem (nth index list))
            (prev-elem (nth (- index 1) list)))
        (if (> current-elem prev-elem)
            (swap index (- index 1) list)
            list))))

;;; Define a function for performing bubble sort on a list
;;; Input: a list
;;; Output: an sorted list
(defun bubble-sort (list)
  (loop for i below (length list)
        do (bubble-pass list i))
  list)

;;; Example usage:
(bubble-sort '(5 2 6 3 4))
;; Output: (2 3 4 5 6)