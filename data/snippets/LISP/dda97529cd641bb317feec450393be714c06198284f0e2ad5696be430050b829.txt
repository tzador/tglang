;;; This is a complex example of using recursion in LISP
;;; defun stands for define function and it is used to create a named function in LISP
;;; This function takes in a list and returns the sum of all the numbers in the list using recursion
;;; The function first checks if the list is empty, if it is, the base case is reached and 0 is returned
;;; If the list is not empty, the first element is added to the result of calling the function on the rest of the list
;;; This continues until the base case is reached and the sum is returned

(defun sum-list (list) ;;; define function sum-list with argument list
  (if (null list) ;;; check if list is empty
      0 ;;; if list is empty, return 0 - base case
    (+ (first list) (sum-list (rest list))) ;;; if list is not empty, add first element to sum of the rest of the list
    ))

(sum-list '(1 2 3 4)) ;;; calling the function sum-list with a list of numbers as argument - output should be 10