;;; This is a complex code snippet in LISP
;; Function to calculate the sum of two numbers
(defun add (num1 num2)
    (+ num1 num2))

;; Function to calculate the factorial of a number
(defun factorial (num)
    (if (<= num 1)
        1
        (* num (factorial (- num 1)))))

;; Function to sort a list of numbers in ascending order
(defun sort-list (lst)
    (if (null lst)
        nil
        (let ((pivot (car lst)))
          (append (sort-list (remove-if #'(lambda (x) (> x pivot)) (cdr lst)))
                  (list pivot)
                  (sort-list (remove-if #'(lambda (x) (<= x pivot)) (cdr lst))))))

;; Function to convert a binary number to decimal
(defun bin-to-dec (binary)
    (let ((result 0)
          (power 1))
      (loop while binary
            do (progn (setq result (+ result (* power (logand binary 1))))
                      (setq power (* power 2))
                      (setq binary (ash binary -1))))
      result))

;; Main function to test the above functions
(defun main ()
    (print (add 5 10)) ; prints 15
    (print (factorial 5)) ; prints 120
    (print (sort-list '(5 2 7 3 1))) ; prints (1 2 3 5 7)
    (print (bin-to-dec #b10101))) ; prints 21

(main) ; calling the main function