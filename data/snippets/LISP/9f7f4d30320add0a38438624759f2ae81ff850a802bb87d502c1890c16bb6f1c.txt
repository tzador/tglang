;;; This is a closure function that returns a function that calculates the factorial of a given number
;;; The closure function takes in a variable 'n'
(defun factorial-calc (n)
  ;;; Define a local variable 'result' to store the result of the factorial calculation
  (let ((result 1))
    ;;; Define the recursive function 'factorial' that takes in a variable 'num'
    (labels ((factorial (num)
      ;;; If the input number 'num' is 0, return 1 (base case)
      (if (eq num 0)
        1
        ;;; Multiply 'num' with the result of calling the 'factorial' function with 'num-1'
        (* num (factorial (1- num))))))
      ;;; Set 'result' to the value returned by calling the 'factorial' function with the input 'n'
      (setf result (factorial n)))
    ;;; Return the 'result' variable
    result))
    
;;; Example usage:
;;; Return the factorial of 5 by calling the 'factorial-calc' function with input 5
;;; Expected output: 120
(format t "Factorial of 5 is ~a" (factorial-calc 5))