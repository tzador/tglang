;;; A function that calculates the sum of two numbers
(defun add (x y) ; Defines the function 'add' with two parameters 'x' and 'y'
  (+ x y)) ; Returns the sum of 'x' and 'y' using the '+' operator

;;; A function that calculates the factorial of a number
(defun factorial (n) ; Defines the function 'factorial' with one parameter 'n'
  (if (= n 0) ; Checks if 'n' is equal to 0
      1 ; Returns 1 if 'n' is 0, which is the base case for factorial
      (* n (factorial (- n 1))))) ; Multiplies 'n' with the factorial of 'n-1' and recursively calls the 'factorial' function

;;; A function that sorts a list of numbers in ascending order
(defun quicksort (list) ; Defines the function 'quicksort' with one parameter 'list'
  (if (or (null list) ; Checks if 'list' is empty
          (null (cdr list))) ; Checks if 'list' has only one element left
      list ; Returns 'list' if either of the above conditions are true, since it is already sorted
      (let ((pivot (car list))) ; Sets the pivot element as the first element in 'list'
        (append ; Appends the below lists together to form the sorted list
         (quicksort (remove-if-not #'(lambda (x) (< x pivot)) (cdr list))) ; Sorts the elements smaller than the pivot
         (list pivot) ; Adds the pivot element back in between the two sorted lists
         (quicksort (remove-if-not #'(lambda (x) (>= x pivot)) (cdr list))))))) ; Sorts the elements larger than or equal to the pivot

;;; Example usage
(add 3 5) ; 8
(factorial 5) ; 120
(quicksort '(4 2 6 1 9)) ; (1 2 4 6 9)