;; Define a macro to setup a simple object-oriented system

(defmacro defclass (name slots &rest body)
  `(progn
     (defstruct ,name ,@slots)
     (defmethod initialize-instance :after ((obj ,name) &rest initargs)
       (loop for (slot . value) in initargs do
             (setf (slot-value obj slot) value)))
     (defmacro new (class-name &rest initargs)
       `(let ((obj (make-instance ',class-name)))
          (setf ,@(mapcar (lambda (arg) `(',arg ',(nth 1 arg)))
                          initargs))
          obj))
     ,@body))

;; Define a class with an initial value for a slot

(defclass person ((name :initarg :name :accessor name)))