;;;This code snippet creates a function that sorts a given list in descending order using the quicksort algorithm
;;;Input parameters: myList - the list to be sorted
;;;Output: the sorted list in descending order

(defun quicksort (myList)
    ;;; check if the list is empty or only has one element
    (if (null myList)
        ;;; if so, return the empty list or the single element
        myList
        ;;; if not, set pivot element to be the first element in the list
        (let ((pivot (car myList)))
            ;;; partition the list into two sublists, one with elements larger than the pivot and one with elements smaller than the pivot
            (list-append
                ;;; recursively call quicksort on the sublist with larger elements and append it to the sublist with smaller elements
                (quicksort (remove-if-not #’(lambda (x) (> x pivot)) (cdr myList)))
                ;;; append the pivot element in between the two sublists
                (list pivot)
                ;;; recursively call quicksort on the sublist with smaller elements and append it to the sublist with larger elements
                (quicksort (remove-if-not #’(lambda (x) (< x pivot)) (cdr myList))))
                )))

;;; example usage
(quicksort '(5 3 8 2 1 7))
;; => (8 7 5 3 2 1)