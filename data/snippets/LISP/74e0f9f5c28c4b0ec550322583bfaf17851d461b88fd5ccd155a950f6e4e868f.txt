;; This is a program in LISP that implements the sieve of Eratosthenes
;; to generate prime numbers up to a given limit.

(defun sieve (limit) ;;; define a function named sieve with one parameter limit
  (let ((numbers (loop for n from 2 to limit collect n))) ;;; initialize a list of numbers from 2 to limit
    (loop for i from 2 to (isqrt limit) do ;;; loop through the numbers from 2 to the square root of limit
      (when (nth i numbers) ;;; if the number at index i in the list is not null
        (loop for j from (+ i i) to limit by i do ;;; loop through multiples of i
          (setf (nth j numbers) nil)))) ;;; set the multiples of i to null in the list
    (remove nil numbers))) ;;; remove all null values from the list, leaving only prime numbers

;; Example usage:
;; (sieve 30) ;;; returns (2 3 5 7 11 13 17 19 23 29)