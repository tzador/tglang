;; An implementation of the quicksort algorithm in LISP

(defun partition (lst first last)
  ;; Partition the list with the chosen pivot value
  (let ((pivot (nth last lst))
        (i first)
        (j first))
    ;; Loop through the list and swap elements if necessary
    (loop while (< j last)
          do (if (<= (nth j lst) pivot)
                 ;; Swap elements
                 (progn
                   (rotatef (nth i lst) (nth j lst))
                   (incf i)))
             (incf j))
    ;; Swap pivot value with the element in the middle position
    (rotatef (nth i lst) (nth last lst))
    ;; Return the index of the pivot value
    i))

(defun quicksort (lst first last)
  ;; Sort the sublists recursively
  (when (< first last)
    ;; Find the index of the pivot value
    (let ((pivot-index (partition lst first last)))
      ;; Sort left sublist
      (quicksort lst first (1- pivot-index))
      ;; Sort right sublist
      (quicksort lst (1+ pivot-index) last)))))

(defun quicksort-lst (lst)
  ;; Call the quicksort function with starting and ending indices
  (quicksort lst 0 (1- (length lst))))

;; Example usage
(quicksort-lst '(5 3 8 1 9 2))
;; Output: (1 2 3 5 8 9)