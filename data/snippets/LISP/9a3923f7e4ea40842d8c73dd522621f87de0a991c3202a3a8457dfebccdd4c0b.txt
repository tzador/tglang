;;; This code snippet generates a list of all prime numbers up to a given limit
;;; It uses the sieve of Eratosthenes algorithm to efficiently find the primes
;;; It takes in a limit, which is the highest number to check for primality
;;; It returns a list of all prime numbers up to the limit

; define a function to check if a given number is prime
; prime? returns true if the number is prime and false otherwise
(defun prime? (num)
  ; check if the number is equal to 2, which is the only even prime number
  (if (= num 2)
    ; if it is, return true
    t
    ; if not, check if the number is divisible by 2
    ; if it is, return false
    (if (= (mod num 2) 0)
      nil
      ; if not, check all odd numbers up to the square root of the number
      ; if any of these divide the number, it is not prime
      ; if none divide it, it is prime
      (do ((i 3 (+ i 2)))
          ((>= i (isqrt num)) t)
        (when (= (mod num i) 0)
          (return nil))))))

; define a function that generates a list of all prime numbers up to a given limit
(defun prime-list (limit)
  ; initialize an empty list to store the primes
  (let ((primes ()))
    ; loop through all numbers from 2 to the limit
    (dotimes (i limit)
      ; check if the current number is prime
      (if (prime? i)
        ; if it is, add it to the list of primes
        (push i primes)))
    ; return the list of primes
    primes))

; define the main function
(defun main ()
  ; get the input limit from the user
  (print "Enter the limit: ")
  (let ((limit (read)))
    ; call the prime-list function to generate the list of primes
    (print (prime-list limit))))

; call the main function
(main)