(defun mystery (x)
  (if (zerop x) 0
  (let* ((a (mod x 10))
         (b (mystery (truncate x 10))))
    (+ (* a a) b))))

;; `mystery` is a recursive function that takes in a number `x` as its argument and returns a new value based on a mathematical pattern.
;;
;; First, it checks if the input number is equal to 0. If yes, it returns 0 as the output.
;; If the input number is not 0, it proceeds to the `let*` expression where two variables `a` and `b` are defined.
;; `a` is assigned the remainder of `x` divided by 10, while `b` is assigned the return value of another call to the `mystery` function.
;; This is done by dividing `x` by 10 and discarding any decimal places using the `truncate` function.
;; The `b` variable now stores the result of the `mystery` function called on a smaller number.
;; Finally, the `+` expression multiplies `a` with itself and adds it to `b` to generate the output value.
;; This process is repeated until `x` becomes 0, resulting in the final output value.
;;
;; Example usage:
;; `(mystery 123)` will return `149`
;; `(mystery 345)` will return `100`