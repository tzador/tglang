;;;This is a complex function that checks if a given number is prime
(defun is-prime (num)
  (cond ((= num 2) t)          ;checks if the number is 2, which is always prime
        ((evenp num) nil)      ;checks if the number is even, which is never prime (excluding 2)
        ((= num 1) nil)        ;1 is not a prime number
        (t                      ;if none of the above conditions are met, start a loop to check for prime
         (let ((i 3))           ;starting from 3, the next potential prime number
          (loop while (<= i (/ num 2))       ;loop through all numbers up to half of the given number
            (cond ((= (mod num i) 0)        ;if the number is divisible by i, it is not prime
                   (return nil))
                  (t                         ;if not divisible, check for next potential prime number
                   (incf i 2))))
          t)))                   ;if loop finishes without finding a divisor, it is prime