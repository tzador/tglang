(defun quicksort (list)
  ; Define a function named quicksort that takes in a list as its argument
  (if (null list)
    ; If the list is empty, return nil
    nil
    ; Otherwise, do the following
    (let ((pivot (car list)))
      ; Set the pivot variable as the first element of the list
      (append ; Use the append function to
        (quicksort (remove-if-not #'> (cdr list)))
        ; Recursively call quicksort on a list of all elements greater than the pivot (using remove-if-not)
        (list pivot)
        ; Add the pivot to the end of the list
        (quicksort (remove-if-not #'<= (cdr list)))
        ; Recursively call quicksort on a list of all elements less than or equal to the pivot (using remove-if-not)
        )
      ; End of append function
    ) ; End of let block
  ) ; End of if block
) ; End of defun block