;; A function called "quick-sort" that takes in a list as input and sorts it using the quicksort algorithm
(defun quick-sort (lst) ;; define the function with parameter "lst"
  (if (null lst) ;; if the list is empty, return an empty list
      nil
      (let ((pivot (first lst))) ;; define "pivot" as the first element of the list
        (concatenate 'list ;; concatenate the following lists
                     (quick-sort (remove-if-not ;; recursive call to sort the list using "remove-if-not" function
                                  (lambda (x) (< x pivot)) lst)) ;; use lambda to check if elements are less than pivot
                     (list pivot) ;; add pivot to the list
                     (quick-sort (remove-if-not ;; recursive call to sort the list using "remove-if-not" function
                                  (lambda (x) (>= x pivot)) lst)) ;; use lambda to check if elements are greater than or equal to pivot
))) ;; end of function