;;; Function for calculating the factorial of a number
(defparameter *factorial-count* 0) 
	; defparameter - special form for creating global variables
	; *factorial-count* - variable for keeping count of calculations
(defun factorial (n) 
	; defun - special form for defining a function
	; factorial - name of the function, taking one argument
	(if (zerop n) 
		; if - special operator for conditional statement
		; zerop - function for checking if argument is equal to 0
		(progn 
			; progn - special operator for evaluating multiple expressions
			(setf *factorial-count* (+ *factorial-count* 1)) 
				; setf - special operator for setting values
				; *factorial-count* - adding 1 to the counter
			(return-from factorial 1)) 
				; return-from - special operator for returning from a function
				; 1 - base case for factorial
		)
	(let ((result 1)) 
		; let - special operator for creating local variables
		; ((result 1)) - result variable initialized to 1
		(dotimes (i n result) 
			; dotimes - special operator for iterating a specific number of times
			; i - index variable, used in loop
			; n - number of iterations, given as the argument to the function
			; result - variable used to store the result of the calculation
			(setf result (* result i)) 
				; setf - updating the result variable by multiplying it with i
				; * result - current value of the result variable
				; i - current index value in the loop
		)
	)
	(setf *factorial-count* (+ *factorial-count* 1)) 
		; setf - updating the count variable by adding 1
		; *factorial-count* - current value of the count variable
	(return-from factorial result) 
		; return-from - returning the final result from the function
)

;;; Output:
;;; To calculate the factorial of 4:
`(factorial 4)` 
; `24`