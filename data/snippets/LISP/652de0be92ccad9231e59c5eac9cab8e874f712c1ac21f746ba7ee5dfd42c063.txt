;;; * ENVIRONMENT MANIPULATION FUNCTIONS *

;; Define a function to create a shallow copy of an environment
(defun copy-environment (env)
  "Creates a shallow copy of an environment."
  (setf new-env (copy-list env)))

;; Define a function to extend a given environment with new bindings
(defun extend-environment (bindings env)
  "Extends a given environment with new bindings."
  (setf new-env (append bindings env)))

;; Define a function to lookup a variable in an environment
(defun lookup-variable (var env)
  "Looks up a variable in the given environment."
  (cond
   ;; If the environment is empty, return nil
   ((null env) nil)
   ;; If the first element in the environment is a list and its
   ;; first element is equal to the variable, return its second
   ;; element as the binding
   ((and (listp (car env))
         (equal (caar env) var))
    (cadar env))
   ;; Otherwise, recursively search through the remainder of the
   ;; environment
   (t (lookup-variable var (cdr env)))))

;; Define a function to bind a value to a variable in an environment
(defun bind-variable (var val env)
  "Binds the given value to the given variable in the given environment."
  (setf new-env (cons (cons var val) env)))

;;; * EVALUATION FUNCTION *

;; Define a function to evaluate an expression in an environment
(defun eval (exp env)
  "Evaluates the given expression in the given environment."
  (cond
    ;; If the given expression is a symbol, look up its value in
    ;; the given environment
    ((symbolp exp) (lookup-variable exp env))
    ;; If the given expression is a list, assume it is a procedure
    ;; call and evaluate it
    ((listp exp) (apply (eval (car exp) env) (eval-args (cdr exp) env)))
    ;; Otherwise, the expression is a literal value, so just return it
    (t exp)))

;; Define a function to evaluate the arguments of a procedure call
(defun eval-args (args env)
  "Evaluates the arguments of a procedure call in the given environment."
  (mapcar (lambda (arg) (eval arg env)) args))