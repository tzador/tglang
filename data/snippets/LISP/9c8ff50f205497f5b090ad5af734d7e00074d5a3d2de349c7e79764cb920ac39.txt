(defparameter *my-list* '(1 2 3 4 "five"))  ; define global variable *my-list* with a list of integers and a string
(defun list-compare (list-a list-b)  ; define function list-compare, takes in two lists as parameters
  (if (equal list-a list-b)  ; conditional to check if lists are equal
    (format t "Lists are equal!")  ; if equal, print message
    (let* ((is-subset? t)  ; boolean to track if list-a is a subset of list-b
           (a (copy-list list-a))  ; make a copy of list-a to manipulate without changing original
           (b (copy-list list-b)))  ; make a copy of list-b to manipulate without changing original
      (dolist (item a)  ; loop through each item in list-a
        (if (member item b)  ; conditional to check if item is in list-b
          (setf b (remove item b))  ; if item is in list-b, remove it
          (setf is-subset? nil)))  ; if item is not in list-b, set boolean to false
      (if is-subset?  ; conditional to check if list-a is a subset
        (format t "List A is a subset of List B!")  ; if list-a is a subset, print message
        (format t "List A is not a subset of List B!"))))) ; if list-a is not a subset, print message
(list-compare *my-list* '(1 3 4)) ; call list-compare function on *my-list* and a new list