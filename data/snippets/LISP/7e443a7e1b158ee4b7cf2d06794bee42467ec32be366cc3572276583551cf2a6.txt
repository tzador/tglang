(defun merge-sort (list) 	             ;Defines a function named merge-sort that takes in a list parameter
   (if (<= (list-length list) 1)         ;Checks if the length of the list is less than or equal to 1
       list 		                     ;If true, returns the list as it is already sorted
     (let ((mid (/ (list-length list) 2)) ;Creates a variable named "mid" which stores the midpoint of the list
           (left nil)                    ;Creates an empty list named "left" to store the left half of the list
           (right nil))                  ;Creates an empty list named "right" to store the right half of the list
       (dotimes (i mid) 	                 ;Executes a loop for i from 0 to mid-1
         (push (nth i list) left)) 	     ;Pushes the values from the list at index i to the left list
       (dotimes (i (- (list-length list) mid)) ;Executes a loop for i from 0 to the length of right half of list
         (push (nth (+ i mid) list) right)) 	 ;Pushes the values from the list at index mid+i to the right list
       (setq left (merge-sort left)) 	      ;Recursively calls merge-sort on the left list
       (setq right (merge-sort right))       ;Recursively calls merge-sort on the right list
       (merge left right)) 	                 ;Calls the merge function to merge the sorted left and right lists
     )
   )
 )