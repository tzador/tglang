(defun merge (l1 l2)
    ; Define a function named "merge" with parameters l1 and l2
    (cond ((null l1) l2)
    ; If l1 is empty, return l2
        ((null l2) l1)
    ; If l2 is empty, return l1
        ((< (car l1) (car l2))
    ; If the car of l1 is less than the car of l2,
    ; recursively call "merge" with the cdr of l1 and l2
            (cons (car l1) (merge (cdr l1) l2)))
    ; Otherwise, recursively call "merge" with the cdr of l2 and l1
        (t (cons (car l2) (merge (cdr l2) l1)))))
    ; Return a list with the car of l2 and the result of
    ; recursively calling "merge" with the cdr of l2 and l1