pro quicksort,arr,n
; This procedure will sort an IDL array using the quicksort algorithm
; Inputs:
;   arr: the array to be sorted
;   n: number of elements in the array
; Outputs:
;   arr: the sorted array
arr_copy = arr
; Create a copy of the input array to preserve the original
arr_new = findgen(n)
; Create a new array to store the sorted elements
; Initialize pointers
left_pointer = 0
right_pointer = n-1
pivot = arr_copy[left_pointer]
; Loop until both pointers meet in the middle
while (left_pointer < right_pointer) do begin
  while (arr_copy[left_pointer] < pivot) && (left_pointer < right_pointer) do begin
    ; Move left pointer until it reaches an element greater than the pivot
    left_pointer = left_pointer + 1
  endwhile
  while (arr_copy[right_pointer] >= pivot) && (left_pointer < right_pointer) do begin
    ; Move right pointer until it reaches an element less than or equal to the pivot
    right_pointer = right_pointer - 1
  endwhile
  if (left_pointer < right_pointer) then begin
    ; Swap the elements at the two pointers
    temp = arr_copy[left_pointer]
    arr_copy[left_pointer] = arr_copy[right_pointer]
    arr_copy[right_pointer] = temp
  endif
endforeach
; Recursive calls to quicksort for left and right subarrays
call quicksort, arr_copy[0:left_pointer-1], left_pointer
call quicksort, arr_copy[left_pointer+1:n-1], n-left_pointer-1
; Merge the sorted subarrays into the new array
arr_new[0:left_pointer-1] = arr_copy[0:left_pointer-1]
arr_new[left_pointer] = pivot
arr_new[left_pointer+1:n-1] = arr_copy[left_pointer+1:n-1]
; Copy the sorted array back into the original array
arr = arr_new
end