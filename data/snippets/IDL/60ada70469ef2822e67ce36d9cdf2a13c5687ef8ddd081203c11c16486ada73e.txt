;; Declare function that calculates the median of a given array of numbers
function calc_median(arr)
  ;; Sort the array in ascending order
  arr = sort(arr)
  ;; Calculate the size of the array
  n = size(arr)
  ;; If the size is odd, return the middle element
  if (n mod 2) eq 1 then return arr[(n + 1) / 2]
  ;; If the size is even, return the average of the two middle elements
  else return (arr[n / 2] + arr[(n / 2) + 1]) / 2.0
end

;; Declare function that calculates the mode of a given array of numbers
function calc_mode(arr)
  ;; Initialize an empty table to store the count of each element in the array
  mode_table = {}
  ;; Loop through the array and update the count for each element in the table
  for i=0, size(arr)-1 do begin
    ;; Check if the current element exists in the table
    if not (arr[i] in mode_table) then begin
      ;; If not, set its count to 1
      mode_table[arr[i]] = 1
    endif else begin
      ;; If it exists, increment its count by 1
      mode_table[arr[i]] = mode_table[arr[i]] + 1
    endelse
  endfor
  ;; Initialize variables to store the mode and its count
  mode = -1
  mode_count = -1
  ;; Loop through the mode table to find the element with the maximum count
  for key in mode_table do begin
    if mode_table[key] gt mode_count then begin
      ;; Update the mode and its count if a new maximum is found
      mode = key
      mode_count = mode_table[key]
    endif
  endfor
  ;; Return the mode
  return mode
end