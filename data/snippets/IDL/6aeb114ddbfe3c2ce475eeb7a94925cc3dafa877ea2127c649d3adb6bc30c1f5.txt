;; This program performs a polynomial fit on a set of data points
; Input data - the x and y values of the data points
xvals = [2.1, 3.2, 4.3, 5.4, 6.5, 7.6]
yvals = [5.4, 6.5, 6.3, 8.2, 9.3, 10.4]

; Degree of the polynomial
degree = 3

; Number of data points
npts = n_elements(xvals)

;; Define the polynomial fitting function
; Takes in the independent variable and the coefficients of the polynomial
function polyfit_func, x, coeffs

  ;; Initialize the value of the dependent variable
  ; Start with the first coefficient
  y = coeffs[0]

  ;; Loop over all the remaining coefficients
  ; Evaluate the polynomial equation at each point
  for i=1, degree do begin
    y = y + coeffs[i] * (x - xvals[i])^i
  endfor

  ; Return the value of the dependent variable
  return, y

end

;; Perform the polynomial fit by minimizing the residual sum of squares
; Initial guess of the coefficients
; Generate an array from 0 to the degree of the polynomial
init_coeffs = findgen(degree+1)

;; Use the built-in IDL function to perform the fit
; Returns the coefficients and the sum of squares of the residuals
fit_res = fitpoly(xvals, yvals, degree, init_coeffs, rms_sumsq=res_ssq)

;; Output the results
print, "Coefficients of the polynomial:"
print, fit_res.coeffs
print, "Sum of squares of the residuals:"
print, res_ssq

;; Plot the data points
plot, xvals, yvals, xtitle="X values", ytitle="Y values", title="Polynomial Fit"

;; Generate a finer grid of points for plotting the polynomial fit curve
xplot = findgen(min(xvals), max(xvals), 0.01)

;; Use the fitted coefficients to evaluate the polynomial function at the plot points
yplot = polyfit_func(xplot, fit_res.coeffs)

;; Overplot the polynomial fit curve on the data points
oplot, xplot, yplot, linestyle=2, color="red"

;; Add a legend to the plot
legend, "Data Points", "Polynomial Fit", /bottom_right

;; Save the plot as a PNG file
device, filename="polyfit_plot.png", /png