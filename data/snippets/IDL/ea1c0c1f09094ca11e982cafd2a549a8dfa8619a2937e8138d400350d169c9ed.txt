pro cluster_plot, data, n_clusters, max_iter, min_cutoff, max_cutoff, plot_type=plot_type

; This procedure creates and plots clusters from a given dataset using the k-means algorithm

; INPUTS:
; - data: an array of data points of shape (n_points, n_features)
; - n_clusters: the desired number of clusters
; - max_iter: the maximum number of iterations to run the algorithm
; - min_cutoff: the minimum difference in sum of distances between iterations to consider for convergence
; - max_cutoff: the maximum number of points to include in each cluster when initializing

; KEYWORDS:
; - plot_type: an optional keyword to specify the type of plot to generate (default is a scatter plot)

; OUTPUT: None
; plots the final clustering result

; Initialize clusters with random points from the dataset
clusters = replicate(0, n_clusters, n_features)
for i=0, n_clusters-1 do begin
    rand_idx = randomu(seed,1, min=n_points)
    clusters[i,*] = data[rand_idx,*]
endfor

; Run the k-means algorithm for specified number of iterations
iter = 0
while iter < max_iter and sum(MAX(abs(diff(clusters, dim=1)))) > min_cutoff do begin
    iter += 1
    ; Calculate the Euclidean distance between each data point and each cluster centroid
    dist = replicate(0.0, n_points, n_clusters)
    for i=0, n_points-1 do begin
        for j=0, n_clusters-1 do begin
            dist[i,j] = sqrt(total((data[i,*]-clusters[j,*])^2))
        endfor
    endfor
    
    ; Assign each data point to the cluster with the minimum distance
    c_idx = minloc(dist, 1)
    
    ; Update cluster centroids by taking the mean of all data points belonging to that cluster
    for i=0, n_clusters-1 do begin
        clusters[i,*] = mean(data[c_idx eq i, *], dim=1)
    endfor
endwhile

; Plot the final clustering result
if keyword_set(plot_type) then begin
    case plot_type of
    'scatter': plot, data[*,0], data[*,1], psym=3, psym=15, psiz=1.5
    'hist': histoplot, data[*,0], data[*,1]
else
    plot, data[*,0], data[*,1], psym=3, psym=15, psiz=1.5
endif

end