; This IDL code snippet creates a function that performs spectral smoothing on an input data set.

function spectral_smoothing, data, n

; Data: the input data set to be smoothed
; N: the window size for smoothing, must be an odd number

; Declare necessary variables

npoints = n_elements(data)  ; Get number of points in data
temp = fltarr(npoints) ; Create temporary array for smoothed data

; Pad the data array with zeros on either side to handle edges

m = (n-1)/2 ; "M" is the index of the middle point of the window
padded_data = replicate(0,npoints+(2*m)) ; Pad data array with zeros
for i=0,m-1 do padded_data[i] = data[0] ; Pad beginning with first value
for i=npoints+m,npoints+(2*m)-1 do padded_data[i] = data[npoints-1] ; Pad end with last value
for i=m,npoints+m-1 do padded_data[i] = data[i-m] ; Fill in middle section with original data

; Perform smoothing by looping over each point in the data array

for i=0,npoints-1 do begin
   current_window = padded_data[i:i+(n-1)] ; Get current window of data
   average = total(current_window)/n ; Calculate the average within the window
   temp[i] = average ; Store smoothed value in temp array
endfor

; Return the smoothed data array

return, temp

end