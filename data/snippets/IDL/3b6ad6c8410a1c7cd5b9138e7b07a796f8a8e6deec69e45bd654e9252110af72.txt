;; This code snippet calculates the Lyapunov exponent of a given chaotic system using the Wolf algorithm
;; Author: John Smith

;; Define constants
m = 1.0				;; Mass of system
k = 1.0				;; Spring constant
x(0) = 0.5			;; Initial position
v(0) = 0.0			;; Initial velocity
dt = 0.01			;; Time step
t_final = 1000.0		;; Final time to integrate over
nsteps = floor(t_final / dt)	;; Number of time steps to take

;; Initialize arrays
x = fltarr(nsteps + 1)		;; Array to store position values
v = fltarr(nsteps + 1)		;; Array to store velocity values
t = fltarr(nsteps + 1)		;; Array to store time values
lyapunov = fltarr(nsteps + 1)		;; Array to store Lyapunov exponent values
lyapunov(0) = 0.0			;; Set initial value to zero

;; Loop over time steps
for i=0, nsteps-1 do begin
	;; Calculate acceleration from force
	a = -k * x(i) / m
	
	;; Update velocity
	v(i+1) = v(i) + a * dt
	
	;; Update position
	x(i+1) = x(i) + v(i+1) * dt
	
	;; Calculate Lyapunov exponent using Wolf algorithm
	mu = ln(abs(x(i+1) - x(0)) / abs(x(i) - x(0))) / dt
	
	;; Add to Lyapunov array
	lyapunov(i+1) = lyapunov(i) + mu * dt
endfor

;; Plot Lyapunov exponent vs time
plot, t, lyapunov, /ylog, /xlog, title="Lyapunov Exponent vs Time", xlabel="Time", ylabel="Lyapunov Exponent", color='blue'