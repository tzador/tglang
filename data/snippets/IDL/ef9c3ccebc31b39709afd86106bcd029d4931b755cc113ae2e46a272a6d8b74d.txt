; This code snippet uses the Point class to create and manipulate 3D points

; Define the IDL class named Point
PRO Point
  STORE, _ref_type, 2

  ; Define the private member variables
  PRIVATE, x, y, z

  ; Define Class Methods
  FUNCTION Point::init, x, y, z
    ; Initialize the Point object with the given coordinates
    SELF -> x = x
    SELF -> y = y
    SELF -> z = z
  ENDCOM

  FUNCTION Point::str
    ; Return a string representation of the Point coordinates
    RETURN, '(' + STRMID(x, 0, 5) + ', ' + STRMID(y, 0, 5) + ', ' + STRMID(z, 0, 5) + ')'
  ENDCOM

  ; Define getters and setters for x, y, and z
  FUNCTION Point::getX
    RETURN, x
  ENDFUNC

  PROCEDURE Point::setX, newX
    x = newX
  ENDFUNC

  FUNCTION Point::getY
    RETURN, y
  ENDFUNC

  PROCEDURE Point::setY, newY
    y = newY
  ENDFUNC

  FUNCTION Point::getZ
    RETURN, z
  ENDFUNC

  PROCEDURE Point::setZ, newZ
    z = newZ
  ENDFUNC

  ; Override operators for addition and subtraction
  FUNCTION Point::ADD, other
    ; Add the coordinates of two Point objects and return a new Point object
    RETURN, Point(SELF->x + other->getX(), SELF->y + other->getY(), SELF->z + other->getZ())
  ENDFUNC

  FUNCTION Point::SUB, other
    ; Subtract the coordinates of two Point objects and return a new Point object
    RETURN, Point(SELF->x - other->getX(), SELF->y - other->getY(), SELF->z - other->getZ())
  ENDFUNC

  ; Define a method to calculate the distance between two Point objects
  FUNCTION Point::distance, other
    ; Use Pythagorean theorem to calculate the distance
    distance = SQRT((SELF->x - other->getX())^2 + (SELF->y - other->getY())^2 + (SELF->z - other->getZ())^2)
    RETURN, distance
  ENDFUNC

ENDPRO