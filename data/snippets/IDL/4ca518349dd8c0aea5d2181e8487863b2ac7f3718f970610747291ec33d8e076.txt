pro compute_fft, data, n_fft
;
; This procedure computes the fast Fourier transform of the given data
; and returns the result as an array.
;
; Parameters:
;   data: Input data array to be transformed
;   n_fft: Length of the FFT (should be a power of 2)
;
; Output:
;   fft_result: Array containing the computed FFT values
;
; Author: John Smith
;
; Example usage:
; fft_result = compute_fft(data, 1024)

; Declare input and output arrays
data = fltarr(n_fft)
fft_result = complexarr(n_fft)

; Calculate twiddle factors
twiddle_factor = exp(-2.0*!pi*ispan(0,n_fft-1)/n_fft)

; Perform DIT FFT algorithm
for k=0, n_fft-1 do begin
    s = 0.0
    for j=0, n_fft/2-1 do begin
        s = s + data[2*j]*exp(-2.0*!pi*j*k/n_fft)
        fft_result[k] = s + data[2*(j+0.5)]*twiddle_factor[k*j]
    endfor
endfor

; If n_fft is not a power of 2, pad data with zeros
if n_fft ne 2^fix(log((n_fft), 2)) then begin
    padded_data = fltarr(2^fix(log((n_fft),2)),2)
    padded_data[0:n_fft-1] = data
    fft_result = compute_fft(padded_data, 2^fix(log((n_fft),2)))
endif
end