pro bisection, a, b, x, f, err
;
; This program uses the Bisection Method to find a root of an equation.
; The function should be defined in the main program and passed to this
; subroutine along with initial interval.
;
; INPUTS:
;
; a,B    initial endpoints for interval [a,b]
; x      returns the computed root
; f      external function that evaluates the
;        function value at the independent variable
;        ( x = f(X) )
; err    maximum error allowed (default = 1E-6)
;        If err is negative, it will be reset to default
;
; OUTPUTS:
;
;        root   the best approximation to the root
;
pro bisection

; Set default error if none is specified
if err lt 0 then err = 1e-6

; Initialize step size and number of steps
xmax = (b + a) / 2.0
err_abs = abs(xmax - x0)
nsteps = 0

; Repeat until maximum error is reached
while err_abs ge err do begin
    xmid = (a + b) / 2.0
    fmid = f(xmid)

    ; Determine which subinterval our root is in
    if f(a) * fmid lt 0 then begin
        b = xmid
    endif else begin
        a = xmid
    endelse

    ; Update step size and number of steps
    xmax = (b + a) / 2.0
    err_abs = abs(xmax - xmid)
    nsteps ++

    ; Check for maximum number of steps
    if nsteps ge 100 then begin
        error, "Maximum number of steps reached."
        break
    endif
endwhile

; Return best approximation to the root
x = (b + a) / 2.0
end