;; Function to calculate the Jacobian matrix
FUNCTION calc_jacobian, x, y, z

; Define the variables and arrays used
DOUBLE PRECISION, DIMENSION(3) :: x, y, z, jacobi(3,3)
DOUBLE PRECISION :: x_squared, y_squared, z_squared
INTEGER :: i, j

; Calculate the derivatives of x, y, and z
x_squared = x^2 
y_squared = y^2
z_squared = z^2

; Calculate the Jacobian matrix
jacobi(1,1) = 2*x ; Partial derivative of x with respect to x
jacobi(1,2) = 0 ; Partial derivative of x with respect to y
jacobi(1,3) = 0 ; Partial derivative of x with respect to z
jacobi(2,1) = 0 ; Partial derivative of y with respect to x
jacobi(2,2) = 2*y ; Partial derivative of y with respect to y
jacobi(2,3) = 0 ; Partial derivative of y with respect to z
jacobi(3,1) = 0 ; Partial derivative of z with respect to x
jacobi(3,2) = 0 ; Partial derivative of z with respect to y
jacobi(3,3) = 2*z ; Partial derivative of z with respect to z

; Return the Jacobian matrix
RETURN, jacobi

END FUNCTION

; Example of using the function to calculate the Jacobian matrix at a point
; Define the point as an array
DOUBLE PRECISION, DIMENSION(3) :: point = [1.0, 2.0, 3.0]
; Call the function and store the Jacobian matrix in a variable
DOUBLE PRECISION, DIMENSION(3,3) :: jacobian = calc_jacobian(point(1), point(2), point(3))
; Print the Jacobian matrix
PRINT, jacobian