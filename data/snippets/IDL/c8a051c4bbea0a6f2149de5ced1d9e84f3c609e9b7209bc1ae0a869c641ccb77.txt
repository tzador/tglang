PRO newLinkedList
; This program creates a new linked list data structure
; Input: none
; Output: new linked list structure

; Define structure for linked list node
STRUCTURE LLNode
  val : INT     ; Value of the node
  next : PTR    ; Pointer to the next node
END STRUCTURE

; Create linked list structure
linked_list = obj_new("LinkedList")

; Initialize the head and tail pointers to null
linked_list.head = null
linked_list.tail = null

; Function to add a new node to the linked list
FUNCTION addNode, value
  ; Create a new node object
  node = obj_new("LLNode")

  ; Set the value of the node
  node.val = value

  ; If the linked list is empty, set head and tail pointers to the new node
  IF (linked_list.head EQ null) THEN BEGIN
    linked_list.head = node
    linked_list.tail = node
  ; Otherwise, add the node to the end of the linked list
  END ELSE BEGIN
    linked_list.tail.next = node
    linked_list.tail = node
  ENDIF
END

; Function to remove a node from the linked list
FUNCTION removeNode, value
  ; If the linked list is empty, return
  IF (linked_list.head EQ null) THEN RETURN

  ; Initialize current and previous node pointers
  current_node = linked_list.head
  previous_node = null

  ; Loop through the linked list until the node with the given value is found
  WHILE (current_node.val NE value) DO BEGIN
    ; If the end of the linked list is reached and the node is not found, return
    IF (current_node.next EQ null) THEN RETURN

    ; Move to the next node
    previous_node = current_node
    current_node = current_node.next
  ENDDO

  ; If the node to be removed is the head, set the head pointer to the next node
  IF (current_node EQ linked_list.head) THEN BEGIN
    linked_list.head = current_node.next
  ; Otherwise, remove the node and link the previous and next nodes together
  END ELSE BEGIN
    previous_node.next = current_node.next
  ENDELSE

  ; Garbage collect the removed node
  obj_destroy, current_node
END

; Function to print the linked list
PRC printList
  ; If the linked list is empty, print a message and return
  IF (linked_list.head EQ null) THEN BEGIN
    PRINT, "Linked list is empty."
    RETURN
  ENDIF

  ; Initialize current node pointer
  current_node = linked_list.head

  ; Loop through the linked list and print each node's value
  WHILE (current_node NE null) DO BEGIN
    PRINT, current_node.val
    current_node = current_node.next
  ENDDO
ENDPRC