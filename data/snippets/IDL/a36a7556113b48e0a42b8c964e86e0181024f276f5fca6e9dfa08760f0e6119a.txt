; This is a code snippet in IDL that generates a random 10x10 matrix and finds its determinant
function generate_matrix: matrix[n, n]
; This function generates a square matrix of size n x n with randomly generated values from 0 to 10
   matrix = fltarr(n, n) ; create an empty matrix
   for i=0, n-1 do begin ; loop through rows
      for j=0, n-1 do begin ; loop through columns
         matrix[i,j] = randomu(seed=0) * 10 ; generate a random value between 0 and 10
      endfor
   endfor
   return, matrix ; return the generated matrix
end

function determinant: result
; This function calculates the determinant of a square matrix using Gaussian elimination method
   result = 1 ; initialize determinant to 1
   n = n_elements(matrix) ; get the size of the matrix
   for i=0, n-1 do begin ; loop through rows
      max_row = i ; initialize the row with highest absolute value element to be the current row
      for j=i+1, n-1 do begin ; loop through rows below the current row
         if abs(matrix[j,i]) > abs(matrix[max_row,i]) then max_row = j ; check if any element below the current element has a higher absolute value
      endfor
      if max_row != i then begin ; if the row with highest absolute value is not the current row
         temp = matrix[max_row,*] ; swap the rows
         matrix[max_row,*] = matrix[i,*]
         matrix[i,*] = temp
         result = -result ; multiply the determinant by -1 as a row swap reflects on the determinant
      endif
      pivot = matrix[i,i] ; get the pivot element
      if pivot == 0.0 then return, 0 ; if pivot is 0, determinant is 0 and the function exits
      for j=i+1, n-1 do begin ; loop through rows below the current row
         multiplier = matrix[j,i] / pivot ; calculate the multiplier to be used in row subtraction
         matrix[j,*] = matrix[j,*] - multiplier * matrix[i,*] ; perform row subtraction in all columns
      endfor
   endfor
   for i=0, n-1 do result = result * matrix[i,i] ; multiply all diagonal elements to get the determinant
   return, result ; return the calculated determinant
end

matrix = generate_matrix(10) ; call the function to generate a 10x10 matrix
det = determinant(matrix) ; calculate the determinant of the generated matrix
print, det ; print the determinant