;; This code snippet performs a linear regression on a set of data
;; Input data:
x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
y = [4, 6, 7, 9, 12, 14, 15, 17, 19]
;; Define a linear function with unknown coefficients "a" and "b"
function lin_reg, x, a, b
  ;; Compute the prediction for each data point using the given coefficients
  y_pred = a * x + b
  ;; Calculate the mean squared error (MSE) for the predictions
  y_error = y_pred - y
  MSE = total(y_error^2) / n_elements(y_error)
  ;; Return the MSE as the function's output
  return, MSE
end
;; Define a function to optimize the regression coefficients
function optimize_params
  ;; Initialize the coefficients with random values
  a = randomn(seed, 1)
  b = randomn(seed, 1)
  ;; Set the convergence threshold and maximum number of iterations
  conv_threshold = 0.001
  max_iter = 1000
  ;; Initialize the iteration counter and error
  n_iter = 0
  MSE = 0
  ;; Loop until convergence is reached or maximum number of iterations is reached
  while (MSE > conv_threshold) and (n_iter < max_iter) do begin
    ;; Call the linear regression function with current coefficients
    MSE = lin_reg(x, a, b)
    ;; Update the coefficients using the closed form solution for OLS regression
    a = total(x * (y - b)) / total(x^2)
    b = mean(y - a * x)
    ;; Increment the iteration counter
    n_iter = n_iter + 1
  endwhile
  ;; Return the optimized coefficients as the function's output
  return, a, b
end
;; Call the optimize_params function to obtain the optimized coefficients
a_opt, b_opt = optimize_params()
;; Print the optimized coefficients
print, 'Optimized coefficients: a = ' + string(a_opt) + ', b = ' + string(b_opt)