; This code calculates the inverse of a matrix
;
function inverseMatrix, mat, outInverse
;
; Declare variables
matrixSize = size(mat)
m = matrixSize[0]
n = matrixSize[1]
tmp = fltarr(n,n)
detA = 1.0
matInv = fltarr(m,n)
;
for i = 0, n-1 do begin
    for j = 0, n-1 do begin
        ; Calculate minor for each element in the matrix
        submat = mat[#a[i]#a[j]]
        ;
        ; Calculate determinant of minor
        det = determinant(submat)
        ;
        ; Calculate cofactor for each element and insert into tmp matrix
        if (mod(i+j,2) eq 0) then begin
            tmp[i,j] = det
        endif else begin
            tmp[i,j] = -det
        endelse
    endfor
endfor
;
; Transpose tmp matrix
tmp = transpose(tmp)
;
; Calculate inverse matrix by dividing tmp with determinant of original matrix
matInv = tmp / detA
;
; Pass inverse matrix as output and return success
outInverse = matInv
return, 1
;
function determinant, mat
;
; Declare variables
matrixSize = size(mat)
n = matrixSize[0]
;
; Base case
if (n eq 1) then return, mat[0]
;
; Calculate determinant using Laplace expansion
det = 0.0
sign = 1.0
for i = 0, n-1 do begin
    ; Calculate minor for each element in first row
    submat = mat[1:#a[i+1:]]
    ;
    ; Calculate determinant of minor
    minorDet = determinant(submat)
    ;
    ; Add determinant of minor multiplied by sign to overall determinant
    det += sign * mat[0,i] * minorDet
    ;
    ; Update sign for next iteration
    sign = -sign
endfor
;
return, det
end