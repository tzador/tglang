; This program generates a random matrix and performs matrix multiplication on it
; to calculate the dot product of two matrices

pro random_matrix, rows, cols, matrix ; pro is short for procedure and is used to define a function in IDL
; function that generates a random matrix of specified size
  matrix = fltarr(rows, cols) ; fltarr is a function that creates an empty floating point array
  for i = 0, rows-1 do begin ; start of for loop to populate matrix with random values
    for j = 0, cols-1 do begin ; nested for loop
      matrix[i, j] = randomu(seed) ; randomu is a function that generates a random number
    endfor
  endfor
  return, matrix ; return the generated matrix
end

pro matrix_multiply, matrix1, matrix2, result
; function that multiplies two matrices and stores the result in a new matrix
  rows1 = n_elements(matrix1[*, 0]) ; calculate number of rows in matrix1
  cols1 = n_elements(matrix1[0, *]) ; calculate number of columns in matrix1
  rows2 = n_elements(matrix2[*, 0]) ; calculate number of rows in matrix2
  cols2 = n_elements(matrix2[0, *]) ; calculate number of columns in matrix2
  if (cols1 ne rows2) then begin ; check if the number of columns in matrix1 is equal to the number of rows in matrix2
    print, 'Error: Matrix dimensions do not match' ; print error message if dimensions do not match
    result = -1 ; assign -1 as the result to indicate an error
  endif else begin ; if dimensions match, perform matrix multiplication
    result = fltarr(rows1, cols2) ; create an empty floating point array to store result
    for i = 0, rows1-1 do begin ; start of for loop to perform multiplication
      for j = 0, cols2-1 do begin ; nested for loop
        for k = 0, rows2-1 do begin ; another nested for loop
          result[i, j] = result[i, j] + matrix1[i, k] * matrix2[k, j] ; calculate dot product and add to the result matrix
        endfor
      endfor
    endfor
  endelse
  return, result ; return the result matrix
end

; main program
seed = 0 ; initial seed for random number generation
matrix1 = random_matrix(3, 4) ; generate a 3x4 random matrix
matrix2 = random_matrix(4, 5) ; generate a 4x5 random matrix
print, 'Matrix 1:' ; print matrix1
print, matrix1 ; print matrix1
print, 'Matrix 2:' ; print matrix2
print, matrix2 ; print matrix2
dot_product = matrix_multiply(matrix1, matrix2) ; perform matrix multiplication
if (dot_product ne -1) then begin ; check for error
  print, 'Dot product of matrix 1 and matrix 2:' ; print result
  print, dot_product ; print result
endif else begin ; if there was an error, print error message
  print, 'Error: Matrix multiplication failed' ; print error message
endelse