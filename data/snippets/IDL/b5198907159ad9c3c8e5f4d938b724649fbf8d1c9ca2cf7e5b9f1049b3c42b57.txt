pro treeSearch, tree, nNodes, target
; This is a procedure for searching a binary tree for a target value
; Inputs:
;   tree - the binary tree to be searched
;   nNodes - the number of nodes in the tree
;   target - the target value to be searched for
; Outputs:
;   Index of the node containing the target value, or -1 if not found

; Set up variables
integer :: root, currentNode, foundNode
logical :: found
root = 1
currentNode = root
found = False
foundNode = -1

; Begin tree search
while (currentNode <= nNodes .AND. found == False) do begin
    ; Check if current node contains the target value
    if (tree(currentNode) == target) then begin
        foundNode = currentNode
        found = True
    end if
    ; If not found, move onto left child node
    if (found == False) then begin
        currentNode = currentNode * 2
    end if
end while

; If target value still not found, start over from root and move to right child node
if (found == False) then begin
    currentNode = root
    while (currentNode <= nNodes .AND. found == False) do begin
        currentNode = currentNode * 2 + 1
        ; Check if current node contains the target value
        if (tree(currentNode) == target) then begin
            foundNode = currentNode
            found = True
        end if
    end while
end if

; Return foundNode value
return, foundNode
end