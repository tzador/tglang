;; This is a comment in IDL

;; You can declare variables using the 'let' keyword
let x = 5
;; The 'let' keyword is used for declaring variables with a value

;; You can also declare constants using the 'constant' keyword
constant y = 10
;; The 'constant' keyword is used for declaring constants with a value

;; IDL supports different data types, such as integers, floats, strings, arrays, and structures
;; Integers can be declared using the 'integer' keyword
integer a = 3
;; Floats can be declared using the 'float' keyword
float b = 3.14
;; Strings can be declared using the 'string' keyword
string c = "Hello World"
;; Arrays can be declared using the 'array' keyword, followed by the data type and the number of elements
array[int, 5] d
;; Structures can be declared using the 'structure' keyword, followed by the field names and data types
structure person, age:int, name:string
;; Structures can also have sub-structures
structure address, city:string, country:string
structure employee, person, address

;; IDL also supports control structures such as if-else statements and for/while loops
;; If-else statements follow the syntax: if (condition) then statement else statement
if (x > y) then print, "x is greater than y" else print, "x is less than or equal to y"
;; For loops follow the syntax: for variable = starting value, ending value, increment
for i = 1, 10, 2 do begin
  print, i
endfor
;; While loops follow the syntax: while (condition) do statement
while (a < 10) do begin
  a = a + 1
endwhile

;; IDL also has built-in functions and procedures for different tasks
;; For example, the 'print' function is used to print data to the screen
print, "This is a print statement"
;; The 'cos' function returns the cosine value of an angle
cosine = cos(b)

;; In order to access elements in arrays and structures, you use square brackets [ ] and dot notation respectively
;; For example, to print the third element in the array d
print, d[2]
;; To print the city field in the employee structure
print, employee.address.city

;; You can also define your own functions and procedures in IDL
;; Functions return a value, while procedures do not
;; Functions follow the syntax: function function_name(input_variable1, input_variable2) 
;; output_variable: output_data_type
function multiply(x, y) integer: result
begin
  result = x * y
end
;; To call this function, you can use the 'result' keyword and provide the input variables
result = multiply(5, 10)

;; Procedures follow the syntax: procedure procedure_name(input_variable1, input_variable2) 
procedure print_sum(x, y)
begin
  print, "The sum of x and y is ", x + y
end
;; To call this procedure, you can simply provide the input variables
print_sum(20, 30)

;; IDL also has error handling capabilities with the 'on_error' statement
on_error, 1, goto print_error
;; This statement tells the program to jump to the print_error label if an error with code 1 occurs
;; You can also use 'resume' instead of 'goto' to resume execution after the error statement

;; Finally, you can end the program with the 'end' statement
end