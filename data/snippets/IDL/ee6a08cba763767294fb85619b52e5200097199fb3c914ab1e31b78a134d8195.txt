PRO efficient_sort, array
; Sorts an array in ascending order using the efficient quicksort method
; Args:
;   - array: input array to be sorted
; Returns:
;   - sorted_array: the sorted array in ascending order

; Determine the length of the input array
n_elements = N_ELEMENTS(array)

; If the array contains only one element, return it as the sorted array
IF n_elements EQ 1 THEN BEGIN
  sorted_array = array
  RETURN, sorted_array
ENDIF

; Set the first and last index of the array to be sorted
i_start = 0
i_end = n_elements - 1

; Create temporary variables for pivot value and index position
pivot = array[i_start]
i = i_start
j = i_end

; Loop until the indices cross each other
WHILE (i LT j) DO BEGIN

  ; Keep incrementing the values of the index i until an element greater than the pivot is found
  REPEAT i = i + 1 UNLESS (i EQ i_end OR array[i] GE pivot)

  ; Keep decrementing the values of the index j until an element less than the pivot is found
  REPEAT j = j - 1 UNLESS (j EQ i_start OR array[j] LE pivot)

  ; If the indices have not crossed, swap the elements at positions i and j
  ; to keep the elements greater than the pivot to the right and less than the pivot to the left
  IF (i LT j) THEN BEGIN
    temp = array[i]
    array[i] = array[j]
    array[j] = temp
  ENDIF
ENDWHILE

; Swap the pivot value with the element at index j
temp = array[i_start]
array[i_start] = array[j]
array[j] = temp

; Recursively call the efficient_sort function on the left and right sub-arrays
left_subarray = efficient_sort(array[i_start:j-1])
right_subarray = efficient_sort(array[j+1:i_end])

; Concatenate the sorted subarrays with the pivot value to get the final sorted array
sorted_array = [left_subarray, pivot, right_subarray]

RETURN, sorted_array
END