pro quicksort, arr, left, right
; recursive implementation of quicksort
; arr: array to be sorted
; left: index of left-most element (usually set as 0)
; right: index of right-most element (usually set as n_elements(arr)-1)

    ; partition step
    index = partition(arr, left, right)

    ; recursive calls
    if (left < index-1) then begin
        quicksort, arr, left, index-1
    endif

    if (index < right) then begin
        quicksort, arr, index, right
    endif

end

; helper function for partitioning
function partition, arr, left, right
; arr: array to be sorted
; left: index of left-most element
; right: index of right-most element

    ; initialization
    pivot = arr[(left+right)/2]
    i = left
    j = right

    ; main loop
    while (i <= j) do begin
        ; find element on left that should be on right
        while (arr[i] < pivot) do begin
            i = i + 1
        endwhile

        ; find element on right that should be on left
        while (arr[j] > pivot) do begin
            j = j - 1
        endwhile

        ; swap elements
        if (i <= j) then begin
            temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp
            ; move indices to next position
            i = i + 1
            j = j - 1
        endif
    endwhile

    ; return index of partition element
    return i
endfunction