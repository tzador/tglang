; This is a comment in IDL
 
pro complex_array, array, num_elements
; This is a procedure definition that takes in an array and the number of elements in the array
; INPUTS:
;     array - the array to be processed
;     num_elements - the number of elements in the array
; OUTPUTS:
;     complex - an array that stores complex numbers
complex = complexarr(num_elements)
for i=0, num_elements-1 do begin
  ; This loop iterates through the elements in the array
  if (array[i] mod 2 eq 0) then begin
    ; This if statement checks if the element is even
    complex[i] = complex(0, array[i])
    ; This line creates a new complex number with the real part as 0 and the imaginary part as the element in the array
  endif else begin
    ; If the element is odd, it will be added to the imaginary part of a previously created complex number
    complex[i] = complex(+, array[i])
  endelse
endfor
; Once the loop finishes, the complex array will hold the desired values
end
 
; This is a function definition that takes in a number and returns its factorial
function factorial, num
; INPUTS:
;     num - the number to compute the factorial of
; OUTPUTS:
;     result - the factorial of the input number
result = num
for i=num-1, 1, -1 do begin
  ; This loop iterates backwards from num-1 to 1
  result = result * i
  ; The result is multiplied by each number in the loop and stored in itself
endfor
return, result
; Once the loop finishes, the result holds the factorial of the input number
end