;/* Define a structure data type */
typedef struct {
  float x, y, z; /* Coordinates in 3D space */
  string name; /* Name of the object */
  double mass; /* Mass of the object in kilograms */
} object;

;/* Generate an array of objects */
object objects[10]; /* Array of 10 objects */

;/* Assign values to each object in the array */
objects[0].x = 1.0; /* Assign x coordinate for first object */
objects[0].y = 2.0; /* Assign y coordinate for first object */
objects[0].z = 3.0; /* Assign z coordinate for first object */
objects[0].name = "Cube"; /* Assign name for first object */
objects[0].mass = 5.0; /* Assign mass for first object */

objects[1].x = -2.5; /* Assign x coordinate for second object */
objects[1].y = -3.8; /* Assign y coordinate for second object */
objects[1].z = 2.6; /* Assign z coordinate for second object */
objects[1].name = "Sphere"; /* Assign name for second object */
objects[1].mass = 3.2; /* Assign mass for second object */

objects[2].x = 0.0; /* Assign x coordinate for third object */
objects[2].y = 0.0; /* Assign y coordinate for third object */
objects[2].z = 0.0; /* Assign z coordinate for third object */
objects[2].name = "Cylinder"; /* Assign name for third object */
objects[2].mass = 7.8; /* Assign mass for third object */

;/* Create a function to calculate the distance between two objects */
function calculateDistance(object1, object2) { /* Takes two objects as parameters */
  float distance; /* Initialize distance variable */
  distance = sqrt((object1.x - object2.x)^2 + (object1.y - object2.y)^2 + (object1.z - object2.z)^2); /* Calculate distance using 3D Euclidean distance formula */
  return distance; /* Return calculated distance */
}

;/* Print the distance between the first and second objects */
print, "The distance between", objects[0].name, "and", objects[1].name, "is", calculateDistance(objects[0], objects[1]), "meters.";