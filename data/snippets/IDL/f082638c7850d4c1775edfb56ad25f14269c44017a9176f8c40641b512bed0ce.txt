; This code snippet calculates the pixel coordinates of a circle using the Bresenham's circle algorithm in IDL

; Define the center point coordinates with variables

x0 = 50
y0 = 50

; Define the radius of the circle
radius = 25

; Define points to draw on a grid
x = 0
y = radius

; Calculate decision parameter
d = 3 - 2 * radius

; Create a new 2D array to store pixel coordinates
coordinates = bytarr(2, (2*radius + 1))

; Loop through each point and determine its position in the array
while (x <= y) do begin

	; Calculate the correct indices to store coordinates in the array
	x_index = (x + radius)
	y_index = (y + radius)

	; Store the coordinates in the array
	coordinates[0, x_index] = x + x0
	coordinates[1, x_index] = y + y0

	coordinates[0, y_index] = y + x0
	coordinates[1, y_index] = x + y0

	coordinates[0, -x_index] = -x + x0
	coordinates[1, -x_index] = y + y0

	coordinates[0, -y_index] = -y + x0
	coordinates[1, -y_index] = x + y0

	coordinates[0, -x_index] = -x + x0
	coordinates[1, -x_index] = -y + y0

	coordinates[0, -y_index] = -y + x0
	coordinates[1, -y_index] = -x + y0

	coordinates[0, x_index] = x + x0
	coordinates[1, x_index] = -y + y0

	coordinates[0, y_index] = y + x0
	coordinates[1, y_index] = -x + y0

	; Increment x and update the decision parameter
	x = x + 1
	if (d >= 0) then begin
		y = y - 1
		d = d + 4 * (x - y) + 10
	endif else d = d + 4 * x + 6
endwhile

; Print the result
print, coordinates