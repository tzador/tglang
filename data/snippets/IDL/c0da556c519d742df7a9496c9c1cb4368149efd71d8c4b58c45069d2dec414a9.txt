pro functional_composition
; This is a procedure that performs functional composition
; Inputs:
;   arg1 - a function
;   arg2 - another function
; Outputs:
;   res - the result of composing the two functions
; Example usage:
;   res = functional_composition(add, multiply)
;   ; res now contains the composition of add and multiply
 	spro compositionFunction, x, y, z
	; This is a subroutine that takes in two functions and composes them
 	result = x(y(z))
 	; The result is obtained by applying function y to z and then applying function x to the resulting value
 	end
 	
 	compile_opt strictarr
 	; This statement ensures that all variables in the code must be explicitly declared
 	
 	function add, x, y
 	; This is a function that adds two numbers together
 	; Inputs:
 	;   x - first number
 	;   y - second number
 	; Outputs:
 	;   sum - the sum of x and y
 		return, x + y
 	end
 
 	function multiply, x, y
 	; This is a function that multiplies two numbers
 	; Inputs:
 	;   x - first number
 	;   y - second number
 	; Outputs:
 	;   prod - the product of x and y
 		return, x * y
 	end
 	
 	pro main
 	; This is the main program that calls the functional composition procedure
 	a = 2
 	b = 3
 	c = 4
 	res = functional_composition(add, multiply)
 	; res now contains the composition of add and multiply
 	print, res(c, b, a)
 	; Prints out the result of (a * b) + c
 	end
 	
 end