;; This code snippet calculates the inverse of a matrix using Gauss-Jordan elimination.

;; Define a function for calculating the inverse of a matrix
FUNCTION invert_matrix, matrix

  ;; Get the size of the matrix
  n = N_ELEMENTS(matrix)

  ;; Create an identity matrix of the same size
  identity = IDENTITY(n, n)

  ;; Concatenate the identity matrix to the original matrix
  aug_matrix = CONCATENATE(matrix, identity, COLAXIS=1)

  ;; Perform Gauss-Jordan elimination
  FOR i=0, n-1 DO BEGIN
    ;; Normalize the current row
    aug_matrix[i,*] = aug_matrix[i,*] / aug_matrix[i,i]

    ;; Eliminate all other rows using the current row
    FOR j=0, n-1 DO BEGIN
      IF j EQ i THEN CONTINUE
      aug_matrix[j,*] = aug_matrix[j,*] - aug_matrix[j,i]*aug_matrix[i,*]
    ENDFOR
  ENDFOR

  ;; Extract the inverse matrix from the augmented matrix
  inverse = aug_matrix[*,n:*]

  ;; Return the inverse matrix
  RETURN, inverse

END

;; Example usage
matrix = [[1, 2], [3, 4]]
inverse = invert_matrix(matrix)
PRINT, inverse
;; Output: [[-2, 1], [1.5, -0.5]]