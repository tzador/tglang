; Initialize variables
a = 1                       ; Integer variable with value 1
b = 2.5                     ; Floating-point variable with value 2.5
c = "IDL"                   ; String variable with value "IDL"
d = !TRUE                   ; Logical variable with value TRUE
e = complex(a, b)           ; Complex variable with values a and b
f = replicate(d, 4)         ; Array of logical variables with 4 elements, all with value TRUE

; Define a function
FUNCTION sum, a, b
  result = a + b            ; Add a and b
  RETURN, result            ; Return the result
END

; Call the function and store the result in g
g = sum(a, b)

; Create a 2D array with 5 rows and 3 columns
h = findgen(5, 3)

; Loop through the array and print the values
FOR i=0, N_ELEMENTS(h)-1 DO BEGIN
  FOR j=0, N_ELEMENTS(h[i])-1 DO BEGIN
    PRINT, "Element ["+STRTRIM(i)+", "+STRTRIM(j)+"] has value "+STRTRIM(h[i, j])
  ENDFOR
ENDFOR

; Define a structure
typedef structure {
  name: "",                 ; String variable
  age: 0,                   ; Integer variable
  salary: 0.0               ; Floating-point variable
} employee

; Create an instance of the structure
john = {name: "John Doe", age: 30, salary: 50000.0}

; Create an array of structures
employees = [{name: "John Doe", age: 30, salary: 50000.0}, {name: "Jane Smith", age: 25, salary: 60000.0}]

; Print the values of the first structure in the array
PRINT, "Employee name: "+employees[0].name
PRINT, "Employee age: "+STRTRIM(employees[0].age)
PRINT, "Employee salary: "+STRTRIM(employees[0].salary)

; Define a function that operates on a structure
FUNCTION changeSalary, employee
  employee.salary = employee.salary * 1.1  ; Increase salary by 10%
END

; Call the function to update the salary of the first employee
changeSalary(employees[0])

; Print the updated salary
PRINT, "Updated salary: "+STRTRIM(employees[0].salary)

; Save the array of structures to a file
SAVE, employees, FILENAME="employees.sav"

; Read the saved file back into an array
employees_new = READ_SAV("employees.sav")

; Check if the two arrays are equal
IF EQUAL(employees, employees_new) THEN PRINT, "Arrays are equal" ELSE PRINT, "Arrays are not equal"

; Define a class
class person {
  name: "",                                 ; String variable
  age: 0,                                   ; Integer variable
  salary: 0.0                               ; Floating-point variable
  ; Constructor method
  PRO method init, new_name, new_age, new_salary
    self.name = new_name
    self.age = new_age
    self.salary = new_salary
  END
  ; Method to get information
  PRO method getInfo
    PRINT, "Name: "+self.name
    PRINT, "Age: "+STRTRIM(self.age)
    PRINT, "Salary: "+STRTRIM(self.salary)
  END
}

; Create an instance of the class
mary = obj_new("person", "Mary Jones", 35, 70000.0)

; Call the getInfo method
mary.getInfo()

; Inheritance - create a child class that inherits from the person class
class employee : person {
  department: ""                            ; String variable
  ; Method to get information including department
  PRO method getInfo
    ; Call getInfo method of parent class to print name, age, and salary
    obj_parent::getInfo()
    PRINT, "Department: "+self.department
  END
}

; Create an instance of the employee class
bob = obj_new("employee", "Bob Smith", 40, 80000.0, "Marketing")

; Call the getInfo method
bob.getInfo()