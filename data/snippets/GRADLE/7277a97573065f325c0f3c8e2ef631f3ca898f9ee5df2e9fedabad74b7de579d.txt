plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'jacoco'
}

// define plugin repositories
pluginManagement {
    repositories {
        gradlePluginPortal()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'https://maven.springframework.org/milestone'
        }
        mavenCentral()
    }
}

// declare dependencies
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'com.google.guava:guava'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

// configure Jacoco settings
jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

// configure Java compiler
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(["-Werror", "-Xlint:all", "-Xlint:-processing"])
    options.compilerArgs += ['-parameters']
}

// configure code quality checks
checkstyle {
    configFile = rootProject.file("config/checkstyle.xml")
    ignoreFailures = true
    showViolations = true
    toolVersion = '8.12'
}

pmd {
    ruleSets = ['java-basic', 'java-imports']
    ignoreFailures = true
    toolVersion = '6.28.0'
}

spotbugs {
    toolVersion = '4.1.2'
    ignoreFailures = true
}

// configure repositories
repositories {
    mavenCentral()
    maven {
        url "https://repository.jboss.org/nexus/content/repositories/releases/"
    }
    maven {
        url "http://repository.grepcode.com/java/ext"
    }
}

// configure tasks
task build(type: GradleBuild) {
    tasks = ['clean', 'build']
    gradleVersion = '6.8'
}

task publish(dependsOn: ['build', 'test']) {
    group = 'publishing'
    description = 'Builds and publishes the project.'
    doLast {
        println 'Publishing...'
        // publish code to remote server
    }
}

// configure custom source set
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/generated/java']
        }
    }
}

// configure custom task
task generateDocs(type: JavaExec) {
    main = 'com.example.DocumentGenerator'
    classpath = sourceSets.main.runtimeClasspath
}

// define custom tasks
task myCustomTask(type: Exec) {
    workingDir '/path/to/directory'
    commandLine 'cmd', 'arg1', 'arg2'
}

task anotherCustomTask(type: Exec) {
    workingDir '/path/to/directory'
    commandLine 'cmd', 'arg1', 'arg2'
}