plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a runnable application
    id 'application'

    // Apply the jacoco plugin to enable code coverage
    id 'jacoco'

    // Apply the checkstyle plugin to enable static code analysis
    id 'checkstyle'

    // Apply the findbugs plugin to enable static code analysis
    id 'findbugs'

    // Apply the pmd plugin to enable static code analysis
    id 'pmd'
}

// Define project-specific dependencies
dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // Use Mockito library
    testImplementation 'org.mockito:mockito-core:2.+'

    // Use Apache Commons library
    implementation 'org.apache.commons:commons-lang3:3.8.1'

    // Use Apache HttpComponents library
    implementation 'org.apache.httpcomponents:httpclient:4.5.9'
}

// Configure checkstyle plugin
checkstyle {
    // Define the location for the checkstyle configuration file
    config = rootProject.file('config/checkstyle/checkstyle.xml')

    // Define the location for the checkstyle suppressions file
    suppressions = rootProject.file('config/checkstyle/checkstyle-suppressions.xml')

    // Define the source sets to be checked
    sourceSets = [sourceSets.main, sourceSets.test]
}

// Configure findbugs plugin
findbugs {
    // Define the location for the findbugs configuration file
    toolVersion = '3.0.1'
    configFile = file(rootProject.projectDir.absolutePath + '/config/findbugs/findbugs.xml')

    // Exclude generated files from analysis
    excludeFilter = file('config/findbugs/findbugs-exclude.xml')

    // Define the source sets to be checked
    sourceSets = [sourceSets.main, sourceSets.test]
}

// Configure pmd plugin
pmd {
    // Define the location for the pmd configuration file
    toolVersion = '6.7.0'
    configFile = file(rootProject.projectDir.absolutePath + '/config/pmd/pmd.xml')

    // Define the source sets to be checked
    sourceSets = [sourceSets.main, sourceSets.test]
}

// Configure jacoco plugin
jacoco {
    // Define the source sets for code coverage
    toolVersion = '0.8.5'
    applyTo = [test, integrationTest]

    // Exclude generated files from code coverage
    excludes = ['**/*Test*']
}

// Configure application plugin
application {
    // Define the main class for the application
    mainClass = 'com.example.Main'

    // Define the arguments to be passed to the main class
    applicationDefaultJvmArgs = ['-Xms512m', '-Xmx1024m']
}

// Configure build tasks
tasks.withType(JacocoReport) {
    // Define the source directories for code coverage
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)

    // Define the report destination folder
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
    }
}