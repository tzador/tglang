// Define a task with a custom task type
task generatePoetry(type: PoetryTask) {
    // Set the poem file to be generated
    outputFile = file("${buildDir}/poem.txt")
    // Set the template for the poem
    template = 'roses are red, violets are blue, $noun is $adjective, and so are you.'

    // Define the properties for the template
    properties {
        // Use a list to store various nouns
        nounList = ['apple', 'banana', 'cherry']

        // Use a map to store adjectives with corresponding nouns
        adjectiveMap = [
                'apple': 'delicious',
                'banana': 'sweet',
                'cherry': 'juicy'
        ]
    }

    // Define a method to generate a random poem line
    def generateLine() {
        // Get a random noun from the list
        def randomNoun = nounList.get(Random.int(0, nounList.size()))

        // Get the corresponding adjective from the map
        def adjective = adjectiveMap.get(randomNoun)

        // Use the template to generate the poem line with the random noun and adjective
        template.replace('$noun', randomNoun).replace('$adjective', adjective)
    }

    // Define a method to build the poem from generated lines
    def buildPoem() {
        // Create a StringBuilder to store the poem text
        def poem = new StringBuilder()

        // Generate 4 lines for the poem
        for (int i = 0; i < 4; i++) {
            // Get a random poem line and append it to the poem text
            poem.append(generateLine()).append('\n')
        }

        // Convert the StringBuilder to a String and return it
        poem.toString()
    }

    // Define the task action to generate the poem file
    doLast {
        // Get the poem text from the buildPoem method
        def poemText = buildPoem()

        // Write the poem text to the output file
        outputFile.write(poemText)

        // Print a success message
        println 'Poem generated successfully!'
    }
}

// Declare a custom task type for generating poetry
class PoetryTask extends DefaultTask {
    // Define the input and output properties for the task
    @Input
    String template
    @OutputFile
    File outputFile

    // Configure the task to execute only if the output file does not exist
    onlyIf {
        !outputFile.exists()
    }
}