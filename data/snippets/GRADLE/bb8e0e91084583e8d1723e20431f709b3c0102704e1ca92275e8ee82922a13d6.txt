// Define a custom plugin
plugins {
    id 'com.example.custom-plugin' version '1.0.0'
}

// Create a task that depends on another task
task myCustomTask(dependsOn: 'cleanTask') {
    println "Running my custom task"
}

// Use a custom task type
task myFirstCustomTask(type: com.example.CustomTask) {
    taskName = 'myFirstCustomTask'
    targetDir = 'build/results'
}

// Configure a custom task
myFirstCustomTask {
    propertyOne = 'Hello'
    propertyTwo = 'World'
}

// Use a conditional statement in a task
task mySecondCustomTask(type: com.example.CustomTask) {
    if (project.hasProperty('customProperty')) {
        propertyOne = 'Hello'
        propertyTwo = 'World'
    } else {
        doLast {
            println "Custom property 'customProperty' is missing."
        }
    }
}

// Use a for loop in a task
task myThirdCustomTask(type: com.example.CustomTask) {
    fileTree(dir: 'src/main/java').each { file ->
        println "Adding file ${file.name}"
        targetDir = 'build/results'
    }
}

// Use a closure in a task
task myFourthCustomTask(type: com.example.CustomTask) {
    doFirst {
        println "Running task in 'doFirst' closure"
    }
    doLast {
        println "Running task in 'doLast' closure"
    }
}

// Create a custom source set
sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'resources'
        }
    }
}

// Configure a custom source set
sourceSets {
    main {
        java {
            srcDirs = ['src/customJava', 'src/java']
        }
        resources {
            srcDirs = 'resources'
        }
    }
}

// Use an external dependency
dependencies {
    compile 'com.example:library:1.0'
}

// Use a custom repository
repositories {
    ivy {
        url 'https://example.com/repo'
        layout 'pattern', {
            artifact '[organisation]/[module]/[revision]/[artifact]-[revision].[ext]'
        }
    }
}

// Create a custom task type
class CustomTask extends DefaultTask {
    String propertyOne
    String propertyTwo

    @TaskAction
    def run() {
        println "Running custom task: ${taskName}"
        println "Property one: ${propertyOne}"
        println "Property two: ${propertyTwo}"
    }
}