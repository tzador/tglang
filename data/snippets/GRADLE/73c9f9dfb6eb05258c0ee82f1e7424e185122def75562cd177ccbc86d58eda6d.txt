apply plugin: 'java'

// This task compiles and tests Java code
task compileAndTest(type: Test) { // Define a task of type 'Test'
    group = 'verification' // Set task group to 'verification'
    description = 'Compiles and runs all tests for Java code' // Set task description
    testClassesDirs = sourceSets.test.output.classesDirs // Set test classes directory
    classpath = sourceSets.main.runtimeClasspath // Set task classpath
    outputs.upToDateWhen {false} // Force task to run every time
}

// This task compiles and tests Kotlin code
task compileAndTestKotlin(type: CompileAndTestKotlin) { // Define a task of type 'CompileAndTestKotlin'
    group = 'verification' // Set task group to 'verification'
    description = 'Compiles and runs all tests for Kotlin code' // Set task description
    source sets.kotlin.classesDir(sourceSets.main.classesDir) // Set sourceset directory
    testClassesDirs = project.file('build/classes/kotlin/test') // Set test classes directory
    classpath = sourceSets.main.runtimeClasspath + sourceSets.kotlin.runtimeClasspath // Set task classpath
    outputs.upToDateWhen {false} // Force task to run every time
}

// This task generates a code coverage report
task generateCodeCoverageReport(type: JacocoReport) { // Define a task of type 'JacocoReport'
    group = 'reporting' // Set task group to 'reporting'
    description = 'Generates a code coverage report using Jacoco' // Set task description
    reports { // Define report configuration
        xml.enabled = true // Enable XML report format
        csv.enabled = true // Enable CSV report format
        html.enabled = true // Enable HTML report format
        html.destination = file("$buildDir/reports/coverage") // Set HTML report destination directory
    }
    classDirectories = fileTree(dir: 'build/classes/java/main', include: '**/*.class') // Set main class directory
    sourceDirectories = files(sourceSets.main.allJava.srcDirs) // Set main source directory
    executionData = files('build/jacoco/test.exec') // Set test execution data
}

// This task publishes the code coverage report
task publishCodeCoverageReport(type: PublishCodeCoverageReport) { // Define a task of type 'PublishCodeCoverageReport'
    group = 'reporting' // Set task group to 'reporting'
    description = 'Publishes the code coverage report to a designated endpoint' // Set task description
    reportFile = file("$buildDir/reports/coverage/jacoco.xml") // Set XML report file
    endpoint = 'https://example.com/code-coverage' // Set endpoint URL
}