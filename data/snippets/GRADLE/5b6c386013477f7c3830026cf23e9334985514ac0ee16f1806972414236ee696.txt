plugins {
    // This is a comment within the code. Plugins are specified at the top of a Gradle build file and define what functionality is available to the project.
    id 'java'
    id 'org.springframework.boot' version '2.2.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

apply plugin: 'application'

mainClassName = 'com.example.MyApplication' // This sets the main class for the application.

sourceCompatibility = JavaVersion.VERSION_11 // Sets the project's source compatibility level to Java 11.

repositories {
    mavenCentral() // Specifies the Maven Central repository to resolve dependencies from.
    jcenter() // Specifies the JCenter repository to resolve dependencies from.
    maven { // Creates a custom repository to resolve dependencies from.
        url 'https://example.com/repository' // Sets the URL for the repository.
        credentials { // Specifies authentication credentials for the repository.
            username 'myUsername'
            password 'myPassword'
        }
    }
}

dependencies {
    // Specifies project dependencies.
    implementation 'org.springframework.boot:spring-boot-starter-web' // Includes the Spring Boot Starter Web dependency.
    compileOnly 'org.projectlombok:lombok' // Includes the Lombok library as a compile-only dependency.
    runtimeOnly 'mysql:mysql-connector-java' // Includes the MySQL connector library as a runtime-only dependency.
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // Includes the Spring Boot Starter Test dependency for testing.
}

task generateJar(type: Jar) { // Defines a new task for generating a JAR file.
    archiveClassifier = 'test' // Sets the archive classifier for the JAR file name.
    from sourceSets.main.output // Specifies the source set to include in the JAR.
    from sourceSets.test.output // Specifies the test source set to include in the JAR.
}