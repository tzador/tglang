buildscript {
    ext { // extension object to hold global variables
        springBootVersion = '2.3.5.RELEASE'
        lombokVersion = '1.18.12'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.projectlombok:lombok:${lombokVersion}")
    }
}

plugins { // apply plugins
    id 'java'
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'io.freefair.lombok' version '4.1.6'
}

group = 'com.example' // sets project group
version = '0.0.1-SNAPSHOT' // sets project version
sourceCompatibility = '11' // sets project source compatibility
targetCompatibility = '11' // sets project target compatibility

repositories { // adds repository for dependencies
    mavenCentral()
}

dependencies { // declares project dependencies
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation('org.projectlombok:lombok') // adds lombok dependency
    runtimeOnly('com.h2database:h2') // adds H2 database as a runtime dependency
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

test { // specifies test configurations
    useJUnitPlatform() // uses JUnit5 for testing
}

ext { // extension object to hold test configurations
    set('testContainersVersion', '1.14.3') // sets version for testcontainers library
}

dependencies { // declares test dependencies
    testImplementation("org.testcontainers:jdbc:${testContainersVersion}") // adds testcontainers dependency
    testImplementation("org.testcontainers:postgresql:${testContainersVersion}")
}

test { // specifies test configurations
    def postgres = testcontainers.start("postgres").withInitScript("init.sql") // starts postgres container and runs init script
    systemProperty 'spring.datasource.url', postgres.getJdbcUrl() // sets datasource url to postgres container
    systemProperty 'spring.datasource.username', postgres.getUsername() // sets datasource username to postgres container username
    systemProperty 'spring.datasource.password', postgres.getPassword() // sets datasource password to postgres container password
    afterTest { // stops postgres container after tests
        postgres.stop()
    }
}