applyTheGradlePlugin: {
    // This is a custom Gradle task that applies the Gradle plugin based on the given input.
    doFirst {
        println "Applying the Gradle plugin..."
    }
    doLast {
        println "Gradle plugin applied successfully."
    }
}
 
task generateBuildFiles(type: org.gradle.api.DefaultTask) {
    // This is a custom Gradle task that generates the build files based on the given input.
    doFirst {
        println "Generating build files..."
    }
    doLast {
        println "Build files generated successfully."
    }
    // List of dependencies for this task.
    dependsOn tasks.withType(JavaCompile)
    // Executed after the generateBuildFiles task is performed.
    finalizedBy applyTheGradlePlugin
}
 
// Configures the build to use the Java plugin.
apply plugin: 'java'
 
// Specifies the group identification of the built project.
group = 'com.example.gradle'
 
// Specifies the version of the project.
version = '1.0'
 
// Creates the source set for the main source files.
sourceSets {
    main {
        java.srcDirs = ['src/main/java']
    }
}

// Configures the build to use the Test plugin.
apply plugin: 'java-test'
 
// Specifies the group identification of the test project.
group = 'com.example.gradle.test'
 
// Specifies the version of the test project.
version = '1.0'
 
// Creates the source set for the test source files.
sourceSets {
    test {
        java.srcDirs = ['src/test/java']
    }
}

// Configures the build to use the Dependency Management plugin.
apply plugin: 'dependency-management'
 
// Specifies the repositories for resolving dependencies.
repositories {
    mavenCentral()
}
 
// Specifies the dependencies for the project.
dependencies {
    implementation 'com.example.library:library-core:1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}