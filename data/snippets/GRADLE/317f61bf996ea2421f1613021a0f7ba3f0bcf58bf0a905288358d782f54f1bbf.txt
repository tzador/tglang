buildscript { // This is the starting point of the Gradle build script, sets configuration for the build process
    repositories { // This block declares the repositories to search for dependencies

        // The first repository checks the local Maven repository, where we can publish our own artifacts
        mavenLocal()

        // The second repository checks the Maven Central repository, which contains most open-source Java libraries
        mavenCentral()
    }

    dependencies { // This block declares the dependencies for the buildscript itself

        // The first dependency is Gradle itself, as we need it to build our project
        classpath "org.gradle:gradle:6.7"

        // The second dependency is the Spring Boot plugin, which will help us build and run our Spring Boot application
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.4.0"
    }
}

// This is the main body of the Gradle build script, where we declare our project and its dependencies
plugins { // This block declares the plugins we want to use in our project

    // The first plugin is the Spring Boot plugin, which will help us build and run our Spring Boot application
    id 'org.springframework.boot' version '2.4.0'

    // The second plugin is the War plugin, which will create a deployable WAR file from our project
    id 'war'
}

// This block declares the dependencies for our project
dependencies { 
    // The first dependency is the Spring Boot starter web dependency, which provides the necessary dependencies for creating web applications with Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web:2.4.0'

    // The second dependency is the Spring Boot starter data JPA dependency, which provides the necessary dependencies for working with databases in Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.4.0'

    // The third dependency is the H2 database dependency, which we will use as our in-memory database for development purposes
    runtimeOnly 'com.h2database:h2:1.4.200'

    // The fourth dependency is the Hibernate validator dependency, which provides validation capabilities for our application
    implementation 'org.hibernate.validator:hibernate-validator:6.1.7.Final'

    // The fifth dependency is the Thymeleaf dependency, which provides server-side rendering capabilities for our web application
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.4.0'

    // The sixth dependency is the Spring Boot starter test dependency, which provides necessary dependencies for writing tests in Spring Boot
    testImplementation('org.springframework.boot:spring-boot-starter-test:2.4.0') {
        // This block excludes certain dependencies from the test scope
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

// This block configures the tasks for our Gradle build
tasks.named("bootJar", BootJar) { // This task will create an executable JAR file for our application
    // Configures the JAR file's name and location
    archiveFileName.set("example-1.0-SNAPSHOT.jar")
    archiveVersion.set("1.0-SNAPSHOT")

    // Configures the JAR file's main class, which is the entry point for our application
    mainClassName = "com.example.Application"

    // Configures the task's classpath, which includes the necessary dependencies for our application
    classpath = configurations.bootJar
}

tasks.named("check", Check) { // This task will run all the tests in our application
    // Configures the task's dependencies, such as the task that creates the JAR file
    dependsOn(tasks.named("bootJar", BootJar))

    // Configures the task's test classes directory
    testClassesDirs = sourceSets.test.output.classesDirs

    // Disables the default JUnit platform engine, as we are using the newer JUnit Jupiter engine for our tests
    useJUnitPlatform()
}

// This block configures the Spring Boot plugin
springBoot { 
    // Configures the Spring Boot main class, which is the entry point for our application
    mainClassName = "com.example.Application"

    // Configures the Spring Boot devtools, which will automatically reload our application on code changes during development
    devtools {
        // Enables the devtools
        enabled = true
        // Configures the directories to watch for code changes
        // Refreshes the browser automatically on code changes
        livereload {
            watchPaths = ["src/main/resources/templates", "src/main/resources/static"]
        }
    }

    // Configures the logging for our application
    logging {
        // Configures the logging levels for different packages
        level {
            package "org.springframework.boot" // Sets the logging level for the Spring Boot package to DEBUG
            package "com.example" // Sets the logging level for our own application to DEBUG
        }
    }

    // Configures the JMX configuration for our application
    jmx {
        // Enables the JMX
        enabled = true
    }

    // Configures the security for our application
    security {
        // Disables the default security settings, as we will use our own custom settings
        enabled = false
    }

    // Configures the actuator endpoints for our application
    actuator {
        // Enables all actuator endpoints
        allEndpointsEnabled = true

        // Configures the different management endpoints for our application
        // For example, the health endpoint will return the health status of our application
        endpoints {
            health {
                // Enables the health endpoint
                enabled = true
            }
        }
    }
}