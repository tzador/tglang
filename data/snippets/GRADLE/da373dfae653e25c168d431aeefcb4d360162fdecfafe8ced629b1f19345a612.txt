plugins {
    id 'java'
    id 'com.github.hierynomus.license' version '0.13.1'
}

tasks.register('generateLicenseCheckReport', com.github.hierynomus.gradle.license.LicenseReportTask) { // Define a custom task to generate a report on project dependencies' licenses
    filter {
        it.component.isDirectGradleDependency() && // Only include direct dependencies, not transitive
                (it.component.isPom?.invoke() ?: !it.component.archiveExtension.equals('jar', true)) // Only include dependencies without a POM file, or which are not JAR files (e.g. AAR files in Android projects)
    }
    doLast {
        project.pluginManager.apply(LicenseReportPlugin) // Makes the project report task depend on the license plugin's tasks
        project.reportTasks.all { reportTask ->
            reportTask.group = 'Verification' // Set the group of the report task so it's shown under the Verification section in Gradle's task list
        }
    }
}

dependencies {
    implementation 'org.apache.commons:commons-io:1.3.2' // Example dependency with a permissive license
    implementation 'com.google.code.gson:gson:2.8.6' // Example dependency with a strict license
    testImplementation 'junit:junit:4.12' // Example test dependency
}

license {
    header = project.file('LICENSE_HEADER.txt') // Sets a custom header to be included in all generated license reports
    strictCheck = true // Specifies that the license check should fail if any dependency has a strict license
}

// Define a custom task to run the license check
val licenseCheck by tasks.registering {
    group = 'Verification'
    description = 'Checks all project dependencies for acceptable licenses'
    dependsOn('classes') // The license check should be done after the code has been compiled, as it needs to inspect the dependency JAR files
    doLast {
        project.pluginManager.apply(LicenseCheckPlugin) // Applies the license check plugin
        evaluateLicenses() // Calls the license check task defined by the license plugin
    }
}

// Set license check task as a prerequisite for the build task
tasks.build {
    dependsOn(licenseCheck)
}