plugins {
    // applies the 'java' plugin
    id 'java'
    // applies the 'war' plugin
    id 'war'
}

// specifies the Java version used for compilation
sourceCompatibility = '1.8'

// specifies the project dependencies
dependencies {
    // adds the 'junit' library for testing
    testImplementation 'junit:junit:4.12'
    // adds the 'javax.servlet' library for web applications
    providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
}

// specifies the task to build the project
task build (dependsOn: 'war') {
    // adds additional configuration for the task
    doLast {
        // prints a message when the task is executed
        println "Building project..."
        // copies the built war file to a specified location
        copy {
            // sets the source file to be copied
            from war.archivePath
            // sets the destination directory to copy the file to
            into file('deploy/')
        }
    }
}

// specifies the task to run the project
task run (dependsOn: 'war', type: JavaExec) {
    // sets the main class for the project
    main = 'com.example.App'
    // adds arguments to be passed to the main class
    args '--port', '8080'
    // sets the classpath for the project
    classpath = sourceSets.main.runtimeClasspath
    // sets the Stop class for the project
    systemProperties['org.gradle.daemon.stop.timeout'] = '300'
    // sets the Stop class for the project
    systemProperties['org.gradle.jvmargs'] = '-Xmx1024m'
    // sets the Java system properties for the project
    systemProperties = System.getProperties()
}

// specifies the task to deploy the project
task deploy (dependsOn: 'build') {
    // adds additional configuration for the task
    doLast {
        // runs the built project using the gradle run task
        run.execute()
        // prints a message when the task is executed
        println "Deploying project..."
    }
}

// specifies the task to test the project
task test (dependsOn: 'build') {
    // adds additional configuration for the task
    doLast {
        // runs the tests using the junit library
        test.execute()
        // prints a message when the task is executed
        println "Testing project..."
    }
}

// specifies the default task to be executed when no task is specified
defaultTasks 'deploy'