plugins {
    // Apply the Java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an executable
    id 'application'
}

repositories {
    // Use Maven Central for dependencies
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Use TestNG framework, also requires calling 'test.useTestNG()' below
    testImplementation 'org.testng:testng:7.4.0'
}

application {
    // Define the main class for the application
    mainClassName = 'com.example.gradle.GradleApplication'
}

sourceSets {
    // Define a custom development source set, 'dev'
    dev {
        // Set the Java source directory for this source set
        java.srcDir 'src/dev/java'
    }

    // Define a custom test source set, 'integration', that uses TestNG
    integration {
        // Set the Java source directory for this source set
        java.srcDir 'src/integration/java'

        // Set the TestNG XML configuration file for this source set
        resources.srcDir 'src/integration/resources'
    }
}

// Define a task called 'integrationTest' that runs the integration tests using TestNG
task integrationTest(type: Test) {
    // Set the source set to 'integration'
    testClassesDirs = sourceSets.integration.output
    // Set the classpath for the test to include the 'integration' source set and other specified dependencies
    classpath = sourceSets.integration.runtimeClasspath + configurations.testImplementation
    // Set the TestNG XML configuration file 
    useTestNG() {
        includeGroups 'integration'
    }
    // Set the test report location
    reports.html.destination = file("$buildDir/reports/integrationTest")
}

// Define a task called 'runDev' that runs the main application using the 'dev' source set
task runDev(type: JavaExec) {
    // Set the source set to 'dev'
    sourceSets.dev.java.srcDirs = ['src/dev/java']
    // Set the classpath for the task to include the 'dev' source set and other specified dependencies
    classpath = sourceSets.dev.runtimeClasspath
    // Set the main class to run
    main = application.mainClassName
}

// Define a task called 'buildDevJar' that creates a jar file for the 'dev' source set
task buildDevJar(type: Jar) {
    // Set the source set to 'dev'
    from sourceSets.dev.output
    // Set the jar file name
    archiveName = 'dev-jar.jar'
    // Set the destination directory for the jar file
    destinationDirectory = file("$buildDir/libs")
}

// Define a task called 'buildIntegrationJar' that creates a jar file for the 'integration' source set
task buildIntegrationJar(type: Jar) {
    // Set the source set to 'integration'
    from sourceSets.integration.output
    // Set the jar file name
    archiveName = 'integration-jar.jar'
    // Set the destination directory for the jar file
    destinationDirectory = file("$buildDir/libs")
}