apply plugin: 'java'
apply plugin: 'application' //applies the java and application plugins
//Java plugin adds support for compiling and running Java code
//Application plugin adds additional tasks for creating an executable distribution

repositories {
    mavenCentral() //adds the Maven central repository for dependency resolution
}

dependencies {
    implementation 'junit:junit:4.12' //specifies a dependency on JUnit 4.12
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9' //specifies a dependency on Commons Lang3 3.9
    
    //conditional dependency - only added when the specified condition is met
    if (project.hasProperty('useOldDependency')) {
        compile group: 'org.apache.commons', name: 'commons-lang', version: '2.6' //specifies a dependency on Commons Lang 2.6
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java'] //specifies the Java source directory
        }
        resources {
            srcDirs = ['src/main/resources'] //specifies the resources directory
        }
    }
    
    test {
        java {
            srcDirs = ['src/test/java'] //specifies the test source directory
        }
        resources {
            srcDirs = ['src/test/resources'] //specifies the test resources directory
        }
    }
}

mainClassName = 'com.example.main.Main' //specifies the main class for the application

task runApp(type: JavaExec) { //creates a custom task for running the application
    main = mainClassName //specifies the main class to be executed
    classpath = sourceSets.main.runtimeClasspath //sets the classpath to include the dependencies
}

task buildDist(type: Zip) { //creates a custom task for creating a distribution
    from sourceSets.main.output //includes all the contents of the main output directory
    into 'dist' //puts the contents into a "dist" folder within the project
    include 'config.properties' //includes the specified file in the distribution
    includeEmptyDirs = false //excludes any empty directories from the distribution
}

task publish(type: Publish) { //creates a custom task for publishing the project
    //configures the repository to which the project will be published to
    //in this example, publishing to a local Maven repository
    repositories {
        maven {
            url 'file://localhost/path/to/repo'
        }
    }
}