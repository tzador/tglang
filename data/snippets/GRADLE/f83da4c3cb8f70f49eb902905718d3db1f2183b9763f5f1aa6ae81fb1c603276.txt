plugins {
    id 'java'
    id 'application'
}

repositories {
    jcenter()
}

dependencies {
    implementation 'com.google.guava:guava:30.1.1-jre'
    testImplementation 'junit:junit:4.13.2'
}

application {
    // Configure the main class for the application.
    mainClassName = 'com.example.Main'
    
    // Configure the JVM arguments for the application.
    applicationDefaultJvmArgs = ['-Xms128m', '-Xmx512m']
    
    // Configure the system properties for the application.
    applicationDefaultJvmArgs = ['-Dproperty1=value1', '-Dproperty2=value2']
    
    // Configure the application's external dependencies for runtime.
    applicationDefaultJvmArgs = ['-Djava.endorsed.dirs=lib']
}

test {
    // Configure the test JVM arguments.
    jvmArgs = ['-Xms128m', '-Xmx512m']
    
    // Configure the system properties for the test environment.
    systemProperty 'property1', 'value1'
    systemProperty 'property2', 'value2'
    
    // Configure the test execution to exclude certain tests.
    exclude 'com.example.TestClass1'
    exclude 'com.example.TestClass2'
}

// Create a custom task to copy the application's dependencies to a designated folder.
task copyDependencies(type: Copy) {
    from configurations.runtime
    into "${buildDir}/dependencies/"
}

// Create a task that runs the application with the specified JVM arguments.
task runApp(type: JavaExec) {
    main = 'com.example.Main'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ['-Xms128m', '-Xmx512m']
}

// Create a task that checks for code style errors and violations.
task checkStyle(type: Checkstyle) {
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
    source = "src/main/java"
}

// Create a task to generate test coverage report using JaCoCo.
task jacocoTestReport(type: JacocoReport) {
    dependsOn('test')

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories = fileTree(
        dir: 'build/classes',
        excludes: [
            '**/helpers/**',
            '**/model/**',
            '**/integration/**'
        ]
    )

    executionData = files('build/jacoco/test.exec')
}