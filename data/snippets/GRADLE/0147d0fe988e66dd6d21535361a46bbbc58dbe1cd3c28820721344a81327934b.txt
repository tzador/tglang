// Create a task named 'build' that depends on 'compile' task.
task build(dependsOn: 'compile') {
    // Set the description for the task.
    description 'Builds the project by compiling the source code'

    // Declare a property for the output directory path.
    def outputDir = 'build'

    // Add a doFirst block to be executed before the task itself.
    doFirst {
        // Print a message to the console.
        println "Building project..."

        // Create the output directory if it does not exist.
        file(outputDir).mkdirs()
    }

    // Add a doLast block to be executed after the task itself.
    doLast {
        // Print a message to the console.
        println "Project successfully built!"

        // Copy the compiled classes into the output directory.
        copy {
            // Set the source directory of the classes.
            from sourceSets.main.output

            // Set the destination directory.
            into outputDir
        }
    }
}

// Create a task named 'compile' that depends on 'clean' task.
task compile(dependsOn: 'clean') {
    // Set the description for the task.
    description 'Compiles the java source files'

    // Configure the compile task.
    compileJava {
        // Set the target compatibility to Java 8.
        sourceCompatibility = JavaVersion.VERSION_1_8

        // Set the output directory for the compiled classes.
        destinationDir = file("${buildDir}/classes")
    }

    // Configure the processResources task.
    processResources {
        // Copy all the resources from the 'src/main/resources' directory.
        from sourceSets.main.resources.srcDirs

        // Set the destination directory.
        into 'resources'
    }
}

// Create a task named 'clean' to clean the build directory.
task clean(type: Delete) {
    // Set the description for the task.
    description 'Deletes the build directory'

    // Set the directory to be deleted.
    delete buildDir
}

// Add a custom task named 'run' to run the compiled project.
task run() {
    // Set the description for the task.
    description 'Runs the compiled project'

    // Add a dependsOn property to ensure that the project is built before running.
    dependsOn(build)

    // Set the java main class to be executed.
    mainClassName = 'com.example.Main'

    // Configure the java task.
    java {
        // Set the classpath to include the compiled classes.
        classpath = sourceSets.main.runtimeClasspath
    }
}