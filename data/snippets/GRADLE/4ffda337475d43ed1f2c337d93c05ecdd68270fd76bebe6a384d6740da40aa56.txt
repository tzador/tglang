buildscript { // This section specifies dependencies for the build script
    repositories { // Configures repository resolution with Gradle's default location, JCenter repository
        jcenter()
    }
    dependencies { // Specifies Gradle's buildscript classpath is used to find plugins
        classpath 'com.android.tools.build:gradle:3.3.0'
    }
}

// Applies the Android plugin for building the application
apply plugin: 'com.android.application'

android { // Configures the build for Android application
    compileSdkVersion 28 // Specifies the API level to compile against
    defaultConfig { // Defines application Id to uniquely identify the application on the device
        applicationId "com.example.myapp"
        minSdkVersion 19 // Specifies the minimum API level required by the application
        targetSdkVersion 28 // Specifies the API level the application targets
        versionCode 1
        versionName "1.0"
    }
    buildTypes { // Determines how the APK is packaged
        release { // Configures the release build
            minifyEnabled false // Specifies whether shrinking code and resources is enabled for this variant
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' // ProGuard rules file to use
        }
    }
}

dependencies { // Details the dependencies for the application
    implementation 'androidx.appcompat:appcompat:1.1.0' // Adds the AppCompat library to the classpath
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3' // Adds the ConstraintLayout library to the classpath
    implementation 'com.google.android.material:material:1.0.0' // Adds the Material Design library to the classpath
}

// Configures the signing options for the release build
signingConfigs {
    release {
        storeFile file("keystore.jks") // Location of the keystore file
        storePassword "password"
        keyAlias "mykey" // Alias of the key
        keyPassword "password"
    }
}

// Configures the build types
buildTypes {
    release { // Configures the release build
        signingConfig signingConfigs.release // Uses the signingConfig object for signing the APK
    }
}

// Configures how the debug version of the APK is signed
applicationVariants.all { variant ->
    variant.outputs.each { output ->
        if (output.getVariant().getBuildType().getName().equals("release")) { // Checks if the build type is release
            output.outputFile = new File(output.outputFile.parent, output.outputFile.name.replace("app", "myapp")) // Renames the APK to myapp.apk
        }
    }
}