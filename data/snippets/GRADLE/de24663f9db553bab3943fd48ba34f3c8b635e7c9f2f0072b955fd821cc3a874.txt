// Define a task to run lint checks on the project
task lint(type: Exec) {
    commandLine 'lint', 'project'
    // Set the working directory for the task
    workingDir '/path/to/project'
    // Define options for the lint check command
    args '--quiet', '--warnings-as-errors', '--xml', 'lint-results.xml'
    // Set the standard output and error streams for the task
    standardOutput = new FileOutputStream(file('/path/to/project/lint-output.txt'))
    errorOutput = new FileOutputStream(file('/path/to/project/lint-error.txt'))
    // Set the environment variables for the lint check command
    environment 'PATH', '/usr/local/bin:/usr/bin:/bin'
    // Define dependencies for the task
    dependsOn 'assembleDebug'
    // Set the task's description
    description 'Runs lint checks on the project'
}
// Configure the spotless plugin to format Java code in the project
apply plugin: 'com.diffplug.gradle.spotless'
spotless {
    java {
        // Set the path for the spotless configuration file
        target '/path/to/project/spotless.xml'
        // Set the baseline file for formatting
        baselineFile '/path/to/project/spotlessBaseline.xml'
    }
}
// Define a task to run unit tests on the project
task test(type: Test) {
    // Set the package name for the tests
    testPackages = ['com.example.project.tests']
    // Define dependencies for the task
    dependsOn 'assembleDebug'
    // Set the task's description
    description 'Runs unit tests on the project'
}
// Configure the Jacoco plugin to generate code coverage reports
apply plugin: 'jacoco'
jacoco {
    // Set the source directories for code coverage
    sourceDirectories = files('src/main/java')
    // Set the execution data file
    executionData = files('build/jacoco/testDebugUnitTest.exec')
    // Set the report destination
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
    }
}
// Define a task to run code coverage check
task codeCoverageCheck(type: JacocoReport) {
    // Set the group for the task
    group = 'Quality Assurance'
    // Set the description for the task
    description 'Generates code coverage reports and verifies the minimum coverage'
    // Set the execution data for the task
    executionData = files('build/jacoco/testDebugUnitTest.exec')
    // Set the maximum allowed coverage for the task
    checkThresholds {
        // Set the minimum coverage for instructions, branches, lines, and methods
        instruction = 80
        branch = 70
        line = 75
        method = 85
    }
    // Set the source directories for code coverage
    sourceDirectories = files('src/main/java')
    // Set the report destination
    reports {
        xml.enabled = false
        html.enabled = true
        csv.enabled = false
    }
    // Define dependencies for the task
    dependsOn 'testDebugUnitTest'
}
// Add the code coverage check task as a dependency to the build task
build.dependsOn 'codeCoverageCheck'
// Set the default tasks for the project
defaultTasks 'build'