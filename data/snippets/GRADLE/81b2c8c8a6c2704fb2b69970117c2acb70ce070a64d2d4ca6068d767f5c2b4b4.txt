{
   //Define the project name
   group 'com.mycompany'
   version '1.0-SNAPSHOT'

   //Set build script dependencies
   buildscript {
       repositories {
           mavenCentral()
       }
       dependencies {
           classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
       }
   }

   //Apply the Shadow plugin
   apply plugin: 'com.github.johnrengelman.shadow'

   //Define the main source directory and source set
   sourceSets {
       main {
           java {
               srcDirs = ['src/main/java']
           }
       }
   }

   //Define external dependencies
   repositories {
       mavenCentral()
   }

   //Define the dependencies for the project
   dependencies {
       implementation 'com.google.guava:guava:30.1.1-jre'
       testImplementation 'junit:junit:4.13.2'
   }

   //Define tasks for building and running the project
   task buildProject(type: org.gradle.api.tasks.building.JavaCompile) {
       source = sourceSets.main.java.srcDirs
       classpath = sourceSets.main.runtimeClasspath
       destinationDir = file("$buildDir/classes") 
   }

   task runProject(type: org.gradle.api.tasks.JavaExec) {
       classpath = sourceSets.main.runtimeClasspath
       main = 'com.mycompany.Main'
   }

   //Configure the shadowJar task to create a fat jar
   shadowJar {
       baseName = 'myproject'
       classifier = null
       version = null
       manifest {
           attributes 'Main-Class': 'com.mycompany.Main'
       }
       mergeServiceFiles() //merge service files found in META-INF/services
       relocate 'com.google.guava', 'myproject.com.google.guava' //relocate Guava dependencies
   }

   //Define a custom task to run tests and creating a code coverage report
   task testWithCoverage(type: org.gradle.api.tasks.testing.Test) {
       useJUnit {
           includeCategories 'com.mycompany.codecoverage.CoverageTest' //include specific JUnit categories for test coverage
       }
       testClassesDir = sourceSets.test.output.classesDirs
       include tests.projectTests //execute all tests in the projectTests package
       reports {
           junitXml.enabled = true //generate JUnit XML report
           html.enabled = true //generate HTML coverage report
           html.destination = file("$buildDir/reports/codeCoverage") //set destination for coverage report
       }
   }
}