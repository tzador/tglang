// Define the dependencies for your project.
// Multiple lines can be wrapped in square brackets.
dependencies {
    // Specify the dependencies needed for your project.
    // You can add external libraries or other sub-projects as dependencies.
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    
    // Test dependencies
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    
    // Optional dependencies, such as for Firebase or Google Play services.
    // These can be excluded if not needed for the project.
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'com.google.android.gms:play-services-maps:16.1.0'
    
    // Dependencies for Kotlin language support.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.30'
    
    // Dependencies for Retrofit network library.
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    
    // Dependencies for Room database library.
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    implementation 'android.arch.persistence.room:rxjava2:1.1.1'
    
    // Dependencies for Glide image loading library.
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'com.github.bumptech.glide:compiler:4.9.0'
}

// Add repositories for external dependencies.
repositories {
    // Use jcenter for all current libraries.
    jcenter() 
    
    // Specify additional repositories if needed.
    maven { url "https://jitpack.io" }
    
    // Add Google's Maven repository for Firebase and Google Play services.
    google()
}

// Add plugins for build customization.
plugins {
    // Plugin for Kotlin language support.
    id 'org.jetbrains.kotlin.android' version '1.3.30'
    
    // Plugin for Kotlin Kapt (annotation processing) support.
    id 'kotlin-kapt'
    
    // Plugin for Room database library.
    id 'kotlin-android-extensions'
}

// Configure build for different build types.
android {
    // Specify global build settings.
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
    
    // Configure build types. Can specify different dependencies, source folders, etc.
    buildTypes {
        // Build type for release version.
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        
        // Build type for debugging. Allows debugging features and disables code obfuscation.
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

// Specify additional libraries or configurations for different build variants.
variantFilter { variant ->
    // Filter out build variant specific tasks.
    def names = variant.flavors*.name
    if (names.contains('tablet') && names.contains('fullDebug')) {
        setIgnore(true)
    }
}

// Specify tasks to run during build process.
task customTask(type: Exec) {
    // Specify command to run during task.
    commandLine 'echo', 'Running custom task...'
}

// Specify default tasks to run when 'assemble' is called without specifying a task.
defaultTasks 'assemble'

// Specify tasks to run before or after other tasks.
preBuild {
    // Configure task to run before build process starts.
    println 'Running pre build task...'
}

postBuild {
    // Configure task to run after build process finishes.
    println 'Running post build task...'
}