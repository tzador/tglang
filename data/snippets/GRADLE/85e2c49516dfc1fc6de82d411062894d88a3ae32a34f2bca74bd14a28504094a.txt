plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group 'com.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

// These dependencies are set to be used by all modules
dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:2.5.2')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.junit.jupiter:junit-jupiter-engine'
}

// This task will be executed every time before running tests
task prepareTest(type: Exec) {
    commandLine 'mvn', 'clean', 'test' // run "mvn clean test" before running tests
}

// This task will be executed every time before building the project
task prepareBuild(type: Exec) {
    commandLine 'gradle', 'clean', 'build' // run "gradle clean build" before building the project
}

// Enable running both tests and build using a single command
task testAndBuild(dependsOn: [prepareTest, prepareBuild]) {
    group 'build'
    description 'Runs tests and builds the project.'
}

// Configure custom properties for the jar artifact
jar {
    manifest {
        attributes 'Main-Class': 'com.example.MyApplication'
    }
}

// Configure publishing the jar artifact to Maven repository
publishing {
    publications {
        gradle(MavenPublication) {
            from components.java
            groupId 'com.example'
            artifactId 'my-application'
            version '1.0-SNAPSHOT'
        }
    }
    repositories {
        maven {
            url 'https://repo.example.com'
            credentials {
                username = project.findProperty("repoUsername") ?: System.getenv('REPO_USERNAME')
                password = project.findProperty("repoPassword") ?: System.getenv('REPO_PASSWORD')
            }
        }
    }
}

// Print hello world when running the 'hello' task
task hello() {
    println 'Hello, world!'
}