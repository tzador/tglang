// Define a task to run tests
task test(type: Test) {
    // Set the classpath for running the tests
    classpath = sourceSets.test.runtimeClasspath
    // Set the destination directory for the test reports
    reports.html.destination = file("$buildDir/reports/tests")
    // Disable test caching
    outputs.upToDateWhen { false }
}

// Define a task to run the application
task runApp() {
    // Set the main class for the application
    main = 'com.example.Application'
    // Set the classpath for running the application
    classpath = sourceSets.main.runtimeClasspath
    // Set the default JVM arguments for running the application
    jvmArgs = ['-Xmx512m']
}

// Define a task to build a jar file for the application
task buildJar(type: Jar) {
    // Set the base directory for the jar file
    baseName = 'my-application'
    // Set the version for the jar file
    version = '1.0'
    // Include source files in the jar
    from sourceSets.main.allSource
    // Set the manifest file for the jar
    manifest {
        attributes 'Main-Class': 'com.example.Application'
    }
}

// Define a task to run the application as a single Jar file
task runJar(type: JavaExec) {
    // Set the jar file to run
    classpath = tasks.withType(Jar).singleFile
    // Set the main class for the jar file
    main = 'com.example.Application'
    // Add default JVM arguments
    jvmArgs = ['-Xmx512m']
    // Disable test caching
    dependsOn tasks.test
}

// Define a task to clean the project
task clean(type: Delete) {
    // Set the directories to be deleted
    delete 'build'
    // Set the directories to exclude from deletion
    exclude '**/backup'
}

// Define a task for tasks of type JavaExec to use a specific JVM
def useJVM(javaHome) {
    tasks.withType(JavaExec) {
        // Set the JVM to be used
        jvm = javaHome
    }
}