// This code snippet demonstrates a Gradle task that compiles and runs a Java program.

task compileAndRunJava(type: JavaExec) {
    // Set the main class for the Java program
    main = 'MainClass'
    // Define the classpath for the Java program
    classpath = sourceSets.main.runtimeClasspath
    // Define the source directory for the Java program
    source = 'src/main/java'
    // Define the output directory for the Java program
    workingDir = file('build')
    // Set the arguments for running the Java program
    args '-arg1', 'value1', '-arg2', 'value2'
    
    // Set the Java source and target compatibility to 1.8
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    
    // Define additional dependencies for the Java program
    dependencies {
        compile 'com.google.guava:guava:22.0'
        compile 'org.apache.commons:commons-lang3:3.6'
    }
    
    // Define any system properties for the Java program
    systemProperties['myProp'] = 'myValue'
    
    // Set any VM options for running the Java program
    jvmArgs '-Xms256m', '-Xmx512m'
    
    // Define any environment variables for the Java program
    environment 'ENV_VAR1', 'value1'
    environment 'ENV_VAR2', 'value2'
    
    // Set the logging level for the Java program
    logging.captureStandardOutput LogLevel.ERROR
    
    // Set the JVM arguments when running the Java program
    doFirst {
        jvmArgs '-XX:MaxPermSize=128m'
    }
    
    // Display a message when the task is executed
    doLast {
        println 'The Java program has been compiled and run successfully.'
    }
}

// Define a custom clean task to delete the build directory
task customClean(type: Delete) {
    delete 'build'
}

// The following tasks will be executed in order when the 'compileAndRunJava' task is executed
compileAndRunJava.dependsOn clean, customClean, compileJava, processResources, classes