plugins {
    // applying the 'java' plugin to the project
    id 'java'

    // applying the 'application' plugin to the project
    id 'application'

    // applying the 'jacoco' plugin to the project
    id 'jacoco'

    // applying the 'checkstyle' plugin to the project
    id 'checkstyle'

    // applying the 'sonarqube' plugin to the project
    id "org.sonarqube" version "3.0"
}

// setting project properties
project.ext {
    // set source compatibility to Java version 8
    sourceCompatibility = JavaVersion.VERSION_1_8

    // set target compatibility to Java version 8
    targetCompatibility = JavaVersion.VERSION_1_8

    // defining main class for application plugin
    mainClassName = 'com.example.Main'
}

// configuring build tasks
build {
    // setting up build details
    details {
        // set build directories
        buildDirs = ['build', 'target']

        // exclude certain directories from 'cleanup' task
        cleanup {
            exclude 'build'
            exclude 'target'
        }
    }

    // configuring checkstyle task
    checkstyle {
        // set source directories
        source = "src/main/java"

        // set configuration file
        configFile = file("checkstyle.xml")

        // enable console output for errors
        consoleOutput = true
    }
}

// configuring jacoco plugin
jacoco {
    // include all source files
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)

    // exclude generated sources from coverage
    excludes = ['**/generated/**']
}

// configuring sonarqube task
task sonar {
    // set the sonarqube extension as the property extension
    property "sonarqube", this

    // set configuration file
    property "sonar.projectKey", "com.example.project"

    // set sonarqube server URL
    property "sonar.host.url", "http://sonar.example.com"

    // set source directories
    property "sonar.sources", "src/main/java"

    // set test directories
    property "sonar.tests", "src/test/java"

    // set the encoding of the source files
    property "sonar.sourceEncoding", "UTF-8"
}

// creating custom task
task customTask(type: JavaExec) {
    // set classpath for task
    classpath sourceSets.main.runtimeClasspath

    // set main class for task
    main = 'com.example.CustomTask'

    // specifying command line arguments
    args = ['--option', 'value']

    // set standard output and error to system output and error
    standardOutput = System.out
    errorOutput = System.err
}

// creating custom plugin
apply plugin: CustomPlugin

// creating custom extension for plugin
ext {
    customPlugin {
        // setting default values for extension properties
        property1 = "value1"
        property2 = "value2"
    }
}

// configuring custom plugin's tasks
customTask {
    // accessing extension properties
    option = customPlugin.property1
}