plugins {
    id "org.springframework.boot" version "2.3.5.RELEASE" // Adds Spring Boot plugin
    id 'java' // Adds Java plugin
    id "com.github.johnrengelman.shadow" version "6.0.0" // Adds Shadow plugin for creating fat JAR
}

group = 'com.example' // Sets project group to 'com.example'
version = '1.0.0' // Sets project version to '1.0.0'
sourceCompatibility = '1.8' // Sets Java compatibility to 1.8

repositories { // Add repositories for dependencies
    mavenCentral()
    jcenter()
}

dependencies { // Add project dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web:2.3.5.RELEASE' // Adds Spring Boot starter for web applications
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.3.5.RELEASE' // Adds Spring Boot starter for actuator (monitoring and management)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.3.5.RELEASE' // Adds Spring Boot starter for data persistence with JPA
    implementation 'org.postgresql:postgresql:42.2.18' // Adds PostgreSQL driver for database connectivity
    implementation 'com.google.guava:guava:29.0-jre' // Adds Google Guava library for utilities and collections
}

test { // Configure test task
    useJUnitPlatform() // Uses JUnit platform for running tests
}

jar { // Configure jar task
    manifest { // Adds manifest to jar file
        attributes 'Main-Class': 'com.example.Application' // Defines main class for jar file
    }
}

bootJar { // Configure bootJar task
    mainClassName = 'com.example.Application' // Defines main class for Spring Boot jar file
}

shadowJar { // Configure shadowJar task
    classifier = 'fat' // Adds classified suffix to jar file name
    mergeServiceFiles() // Merges service provider files (such as META-INF/services)
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer) { // Adds transformer for service provider files
        path = "META-INF/spring.factories" // Sets path to specific service provider file
        include 'org.springframework.boot.autoconfigure.EnableAutoConfiguration' // Includes specific configuration classes from service provider file
    }
}

compileJava { // Configure compileJava task
    options.incremental = true // Enables incremental compilation for faster builds
}

compileTestJava { // Configure compileTestJava task
    options.incremental = true // Enables incremental compilation for faster test builds
    dependsOn javaCompile // Ensures that javaCompile task is completed before running tests
}