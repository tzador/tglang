plugins {
    // This plugin builds a web application archive (WAR) to be deployed on a web server.
    id 'war'
    // This plugin adds various tasks to handle JUnit tests.
    id 'java-test'
    // This plugin applies Java language support for Gradle.
    id 'java'
}

// The configuration block for the 'war' plugin.
war {
    // The base name of the WAR archive, without any extension.
    baseName = 'gradle-example'
    // The version of the WAR archive.
    version = '1.0'
    // The directory where the WAR archive will be created.
    destinationDir = file("$buildDir/libs")
}

// The configuration block for the 'java-test' plugin.
test {
    // Specifies the JUnit platform to use for executing tests.
    useJUnitPlatform()
}

// The configuration block for the 'java' plugin.
java {
    // Specifies the JDK version to use for compilation.
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }

    // Specifies the source and target compatibility for the Java source code.
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// Task to run unit tests.
task test(type: Test) {
    // The classpath for the tests.
    classpath += sourceSets.test.runtimeClasspath
    // The directory where the test results will be created.
    reports.junitXml.destination = file("$reportsDir/tests")
    // Specifies the JUnit platform to use for executing tests.
    useJUnitPlatform()
}

// Task to build the WAR archive.
task buildWar(type: War) {
    // The directory where the WAR archive will be created.
    destinationDir = file("$buildDir/libs")
    // The classes to include in the WAR archive.
    classpath = sourceSets.main.runtimeClasspath
    // The web.xml file to include in the WAR archive.
    webInf { from 'src/main/webapp/WEB-INF/web.xml' }
    // Task to compile the Java source code before building the WAR archive.
    dependsOn tasks.getByName('compileJava')
}