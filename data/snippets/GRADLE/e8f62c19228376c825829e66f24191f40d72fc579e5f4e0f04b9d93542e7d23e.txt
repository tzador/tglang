// Declare variables
def username = "John"
def password = "12345"

// Set up a task to echo the username and password
task printCredentials {
  doLast {
    println "Username: $username"
    println "Password: $password"
  }
}

// Set up a task to encrypt the password using AES algorithm
task encryptPassword {
  doLast {
    // First, create a new key using the password as the seed
    def key = javax.crypto.SecretKeyFactory.getInstance("AES").generateSecret(new javax.crypto.spec.SecretKeySpec(password.bytes, "AES"))
    // Then, create a new cipher to encrypt the password
    def cipher = javax.crypto.Cipher.getInstance("AES")
    cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, key)
    // Finally, encrypt the password and store the result in a variable
    def encryptedPassword = cipher.doFinal(password.bytes)
    println "Encrypted password: $encryptedPassword"
  }
}

// Set up a task to decrypt the password
task decryptPassword {
  doLast {
    // First, create a new key using the password as the seed
    def key = javax.crypto.SecretKeyFactory.getInstance("AES").generateSecret(new javax.crypto.spec.SecretKeySpec(password.bytes, "AES"))
    // Then, create a new cipher to decrypt the password
    def cipher = javax.crypto.Cipher.getInstance("AES")
    cipher.init(javax.crypto.Cipher.DECRYPT_MODE, key)
    // Finally, decrypt the password and store the result in a variable
    def decryptedPassword = cipher.doFinal(password.bytes)
    println "Decrypted password: $decryptedPassword"
  }
}

// Set up a task to check the strength of the password
task checkPasswordStrength {
  doLast {
    // Create a variable to store the strength score
    def strength = 0
    // Include a rule to check for password length
    if (password.size() > 8) {
      strength++
      println "Password length is good."
    } else {
      println "Password is too short."
    }
    // Include a rule to check for uppercase letters
    if (password.contains("[A-Z]")) {
      strength++
      println "Contains uppercase letters."
    } else {
      println "Password does not contain uppercase letters."
    }
    // Include a rule to check for lowercase letters
    if (password.contains("[a-z]")) {
      strength++
      println "Contains lowercase letters."
    } else {
      println "Password does not contain lowercase letters."
    }
    // Include a rule to check for digits
    if (password.contains("[0-9]")) {
      strength++
      println "Contains digits."
    } else {
      println "Password does not contain digits."
    }
    // Include a rule to check for symbols
    if (password.contains("[^a-zA-Z0-9]")) {
      strength++
      println "Contains symbols."
    } else {
      println "Password does not contain symbols."
    }
    println "Password strength score: $strength/5"
  }
}

// Set up a task to run all of the above tasks in succession
task allTasks(dependsOn: [printCredentials, encryptPassword, decryptPassword, checkPasswordStrength])

// Run 'allTasks' when Gradle is executed
gradle.allTasks {
  doLast {
    println "Completed all tasks."
  }
}