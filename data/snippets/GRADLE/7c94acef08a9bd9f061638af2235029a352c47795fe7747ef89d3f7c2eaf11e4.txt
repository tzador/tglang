plugins {
    id 'java' // This plugin allows for Java projects
    id 'application' // This plugin allows for creating executable applications
    id 'org.springframework.boot' // This plugin allows for using Spring Boot framework
}

apply plugin: 'eclipse' // This plugin allows for generating Eclipse project files
apply plugin: 'org.springframework.boot' // This plugin allows for using Spring Boot tasks and conventions

repositories {
    mavenCentral() // Sets up Maven Central as the default repository
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web' // Adds Spring Boot starter for web applications to the project
    implementation 'org.springframework.boot:spring-boot-starter-actuator' // Adds Spring Boot starter for monitoring and managing applications 
    compileOnly 'org.projectlombok:lombok' // Adds Lombok dependency for generating boilerplate code
    developmentOnly 'org.springframework.boot:spring-boot-devtools' // Adds Spring Boot dev tools for automatic application restarts
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // Adds Spring Boot starter for testing 
}

// Configures the Spring Boot version
ext {
    springBootVersion = '2.5.2'
}

// Configures the Java source and target versions
sourceCompatibility = java_version
targetCompatibility = java_version

// Configures the main application class
mainClassName = 'com.example.Application'

// Configures the Spring Boot tasks and properties
springBoot {
    buildInfo() // Enables the build info task
    executable() // Uses the JAR task for creating an executable JAR file
    withSources() // Includes source code in the build
    withJavadoc() // Includes Javadoc in the build
    classpath() // Configures the classpath
}

// Configures the application archive
jar {
    baseName = 'my-application' // Sets the base name of the application JAR file
    manifest {
        attributes 'Main-Class': mainClassName // Sets the main class in the application manifest
    }
}

// Configures the Spring Boot test properties
test {
    useJUnitPlatform() // Uses JUnit5 as the test engine
    outputs.upToDateWhen { false } // Forces tests to always run
    systemProperty 'junit.jupiter.execution.parallel.enabled', true // Enables parallel test execution
}

// Configures the project tasks
tasks {
    compileJava { // Configures the Java compilation task
        options.compilerArgs << '-Xlint:unchecked' // Enables unchecked warnings
    }
    compileTestJava { // Configures the test Java compilation task
        options.compilerArgs << '-Xlint:unchecked' // Enables unchecked warnings
    }
    applicationDistribution { // Creates a distribution ZIP file for the application
        from bootWar // Includes the WAR file in the distribution
        into 'dist' // Sets the distribution directory
    }
}