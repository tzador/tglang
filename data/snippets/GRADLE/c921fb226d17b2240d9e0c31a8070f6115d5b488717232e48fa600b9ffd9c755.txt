plugins {
    // Code to declare the Gradle version used
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id 'org.springframework.boot' version '2.2.6.RELEASE' apply false
}

// Code for configuring the project and its repositories
ext {
    user = System.getProperty('user.name')
    machine = InetAddress.getLocalHost().getHostName()
    appVersion = '1.0'
    kotlinVersion = '1.3.61'
    log4jVersion = '2.13.0'
    junitVersion = '5.6.2'
}
allprojects {
    group = 'com.example'
    version = appVersion
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    }
}

// Code to declare the main class for the application
mainClassName = 'com.example.Application'

// Code to configure the source sets for the application
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Code to configure the dependencies for the application
dependencies {
    implementation 'org.slf4j:slf4j-log4j12:1.7.30'
    implementation 'org.apache.logging.log4j:log4j-api:$log4jVersion'
    implementation 'org.apache.logging.log4j:log4j-core:$log4jVersion'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
}

// Code to configure the tasks for the application
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
test {
    useJUnitPlatform()
    reports {
        html.enabled = false
        junitXml.enabled = true
    }
}

// Code to configure the packaging for the application
version = appVersion
jar {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': version,
                'Built-By': user,
                'Built-Host': machine
        )
    }
}

// Code to configure the shadow plugin for creating an executable jar file
shadowJar {
    mergeServiceFiles()
    minimize()
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Version': appVersion,
                'Built-By': user,
                'Built-Host': machine
        )
    }
}