configurations {
    // configures the dependencies of the main application
    applicationDependencies
    // configures the dependencies of the test application
    testApplicationDependencies
}

dependencies {
    // adds a dependency to the main application
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.2'
    // adds a dependency to the test application
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    // adds a dependency to the main application that only applies to the runtime environment
    runtimeOnly 'io.jsonwebtoken:jjwt-api:0.11.2'
    // adds a dependency to the test application that only applies to the test runtime environment
    testRuntimeOnly 'org.postgresql:postgresql:42.2.23'
}

// configures the source sets for the main and test applications
sourceSets {
    main {
        // adds a directory for Java source files
        java {
            // specifies the source files location
            srcDirs = ['src/main/java']
        }
        // adds a directory for resources
        resources {
            // specifies the resource files location
            srcDirs = ['src/main/resources']
        }
    }
    test {
        // adds a directory for Java source files
        java {
            // specifies the source files location
            srcDirs = ['src/test/java']
        }
        // adds a directory for resources
        resources {
            // specifies the resource files location
            srcDirs = ['src/test/resources']
        }
    }
}

// configures the tasks for the main and test applications
tasks {
    // creates a build task for the main application
    build.dependsOn 'buildApplication'
    // creates a task to run the main application
    runApplication {
        // specifies the main class to run
        mainClassName = 'com.example.Application'
        // specifies the classpath for the main application
        classpath = sourceSets.main.runtimeClasspath
    }
    // creates a build task for the test application
    buildTest.dependsOn 'buildTestApplication'
    // creates a task to run the test application
    runTestApplication {
        // specifies the main class to run
        mainClassName = 'com.example.TestApplication'
        // specifies the classpath for the test application
        classpath = sourceSets.test.runtimeClasspath
    }
}

// defines a task to generate a JAR file for the main application
task createJar(type: Jar) {
    // specifies the destination for the JAR file
    destinationDirectory = file('build/libs')
    // specifies the name of the JAR file
    archiveFileName = 'application.jar'
    // specifies the files to include in the JAR file
    from sourceSets.main.output
}

// defines a task to generate a JAR file for the test application
task createTestJar(type: Jar) {
    // specifies the destination for the JAR file
    destinationDirectory = file('build/libs')
    // specifies the name of the JAR file
    archiveFileName = 'test-application.jar'
    // specifies the files to include in the JAR file
    from sourceSets.test.output
}

// creates a task to build the main application
task buildApplication() {
    // depends on the compileJava and processResources tasks
    dependsOn 'compileJava', 'processResources'
    // creates the JAR file for the main application
    dependsOn createJar
}

// creates a task to build the test application
task buildTestApplication() {
    // depends on the compileTestJava and processTestResources tasks
    dependsOn 'compileTestJava', 'processTestResources'
    // creates the JAR file for the test application
    dependsOn createTestJar
}

// creates a task to run the main application and the test application
task runAll(type: GradleBuild) {
    // specifies the tasks to run
    tasks = [':runApplication', ':runTestApplication']
    // enables parallel execution for the tasks
    gradle.buildFinished {
        settings.parallel(true)
        settings.maxParallelForks = Runtime.runtime.availableProcessors()
    }
}