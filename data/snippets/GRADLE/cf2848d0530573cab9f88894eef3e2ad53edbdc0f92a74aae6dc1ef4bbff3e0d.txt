// Define a task named 'compile' 
task compile {
    // Use gradle's JavaCompile task to compile Java source code
    def javac = tasks.javaCompile {
        // Include all .java files under the 'src' directory
        source = fileTree('src') {
            include '**/*.java'
        }
        // Set the destination directory for the compiled classes
        destinationDir = file('build/classes')
        // Add a dependency on another task, in this case 'clean'
        mustRunAfter(tasks.clean)
    }
    // Create a task dependency on the JavaCompile task
    dependsOn javac
    // Use gradle's Jar task to create a jar file from the compiled classes
    tasks.jar {
        // Set the destination directory for the jar file
        destinationDir = file('build/jars')
        // Include all the compiled classes as well as the 'META-INF' directory
        from javac.destinationDir
        from 'META-INF'
        // Set the name of the jar file
        archiveName = 'myproject.jar'
    }
    // Add a finalization task to run after the 'compile' task is completed
    doLast {
        // Display a message to indicate that the jar file has been created
        println 'Jar file created: ' + tasks.jar.archivePath
    }
}

// Define a task named 'clean' to delete the build directory
task clean {
    // Delete the build directory and its contents
    delete 'build'
}

// Define a default task to be executed when no task is specified
defaultTasks 'compile'