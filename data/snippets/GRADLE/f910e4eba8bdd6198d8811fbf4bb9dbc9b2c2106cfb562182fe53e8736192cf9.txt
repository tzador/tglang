plugins {
    //applying Java plugin
    id 'java'
    //applying Maven-publish plugin
    id 'maven-publish'
}

//defining the repositories to use
repositories {
    //using maven central repository
    mavenCentral()
}

//configuring the dependencies
dependencies {
    //using Spring Framework for dependency injection
    compile 'org.springframework:spring-context:5.2.9.RELEASE'
    //using Hibernate for database access
    compile 'org.hibernate:hibernate-core:5.4.9.Final'
    //using MySQL connector for database connection
    compile 'mysql:mysql-connector-java:8.0.21'
    //using JUnit for unit testing
    testCompile 'junit:junit:4.12'
}

//configuring the tasks for publishing the build artifacts
//and generating a Maven POM file
publishing {
    publications {
        //defining the jar artifact to be published
        maven(MavenPublication) {
            from components.java //uses the default jar task

            //setting the group ID, artifact ID, and version for the published jar
            groupId 'com.example'
            artifactId 'my-application'
            version '1.0.0'

            //attaching the sources and javadoc to the published jar
            artifact sourceJar {
                classifier 'sources'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }

    //setting the repository to publish to
    repositories {
        maven {
            //setting the URL of the publishing repository
            url 'https://maven.example.com/'

            //setting the authentication credentials for the repository
            credentials {
                //loading the credentials from the 'gradle.properties' file
                username project.getProperty('mavenUsername')
                password project.getProperty('mavenPassword')
            }
        }
    }
}

//configuring the tasks for running the application
//and generating a bash script for deployment
task runApp(type: JavaExec) {
    //setting the main class to run
    main = 'com.example.Main'

    //setting the classpath for the application
    classpath = sourceSets.main.runtimeClasspath
}

//defining custom tasks for starting and stopping the database server
task startDbServer {
    //configuring the task to be run in the background
    group = 'database'
    daemon = true

    doLast {
        //starting the MySQL server
        exec {
            workingDir 'database'
            commandLine 'sudo', 'service', 'mysql', 'start'
        }
    }
}

task stopDbServer {
    //configuring the task to be run in the background
    group = 'database'
    daemon = true

    doLast {
        //stopping the MySQL server
        exec {
            workingDir 'database'
            commandLine 'sudo', 'service', 'mysql', 'stop'
        }
    }
}