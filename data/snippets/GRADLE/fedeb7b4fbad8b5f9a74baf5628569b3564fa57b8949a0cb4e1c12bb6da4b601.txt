plugins {
    // Plugin ID for Spring Boot applications
    id 'org.springframework.boot' version '2.3.0.RELEASE'
}

// Configure repositories to search for dependencies
repositories {
    mavenCentral()
}

// Define project dependencies
dependencies {
    // Spring Boot starter web dependency
    implementation 'org.springframework.boot:spring-boot-starter-web:2.3.0.RELEASE'

    // Spring Boot starter data dependency
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.3.0.RELEASE'

    // H2 database dependency
    runtimeOnly 'com.h2database:h2:1.4.200'

    // JUnit 5 dependency for testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'

    // Spring Boot starter test dependency
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.3.0.RELEASE'
}

// Define plugins for code quality checks
plugins {
    // SpotBugs plugin for static code analysis
    id 'com.github.spotbugs' version '4.0.0'

    // Checkstyle plugin for code style checking
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'

    // Jacoco plugin for code coverage
    id 'jacoco' version '0.8.5'
}

// Configure Jacoco plugin
jacoco {
    // Exclude test source files from code coverage analysis
    toolVersion = "0.8.5"
    applyTo "test"
    excludes = ['**/examples/**']
}

// Configure SpotBugs plugin
spotbugs {
    // Exclude generated source files from static code analysis
    toolVersion = "4.0.0"
    excludeFilter = file("${project.rootDir}/config/spotbugs-exclude.xml")
}

// Configure Checkstyle plugin
checkstyle {
    // Set checkstyle version to use
    toolVersion = "8.31"

    // Exclude generated source files from code style checking
    exclude '**/generated/**'

    // Use Google code style configuration
    configDir = rootProject.file("config/checkstyle")
}

// Define tasks for running code quality checks
tasks {
    // Generate code coverage report task
    create("jacocoReport", JacocoReport) {
        // Sets output directory for the report
        destinationDirectory = file("${buildDir}/reports/jacoco")

        // Use source and class directories for report generation
        sourceDirectories = files(sourcesSets.main.allJava.sourceDirectories)
        classDirectories = files(classesDirs)
    }

    // Run all code quality checks task
    create("codeQualityCheck") {
        // Runs all code quality checks tasks in order
        group = "Verification"
        dependsOn "check", "spotbugsMain", "checkstyleMain", "jacocReport"
    }
}