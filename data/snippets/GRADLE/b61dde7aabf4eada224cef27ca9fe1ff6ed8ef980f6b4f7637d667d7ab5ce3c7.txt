// Define variables for Android SDK and build tools versions
def androidSdk = "25.0.2"
def buildTools = "25.0.2"

// Define Android plugin version
def androidPluginVersion = "3.0.1"

// Define a task to download the Android SDK
task downloadAndroidSdk {
    doLast {
        // Use Gradle's built-in Download task to get the Android SDK from the Google repository
        ant.get(
            src: "https://dl.google.com/android/repository/tools_r\$androidSdk-linux.zip",
            dest: "android-SDK.zip"
        )
        // Unzip the downloaded file
        ant.unzip(src: "android-SDK.zip",
                  dest: "android-sdk")
    }
}

// Define a task to update the Android SDK
task updateAndroidSdk(type: Exec) {
    // Set the command line arguments to the Android SDK manager
    commandLine "$rootDir/android-sdk/tools/bin/sdkmanager", "--update"

    // Add an environment variable to set the location of the Android SDK
    environment "ANDROID_HOME", "$rootDir/android-sdk"

    // Set the working directory to the root directory
    workingDir rootDir

    // Set the task to run only when the Android SDK has been downloaded
    mustRunAfter downloadAndroidSdk
}

// Define a task to create a new project
task createProject(dependsOn: updateAndroidSdk) {
    doLast {
        // Use Gradle's built-in Exec task to run the 'android create' command
        exec {
            // Set the command line arguments to create a new Android project
            commandLine "$rootDir/android-sdk/tools/android create project",
                    "--target",
                    "android-26",
                    "--name",
                    "MyNewApp",
                    "--path",
                    "$rootDir/MyNewApp",
                    "--package",
                    "com.example.mynewapp",
                    "--activity",
                    "MainActivity"
            // Set the working directory to the root directory
            workingDir rootDir
        }
    }
}

// Define a task to build the project
task buildProject(dependsOn: createProject) {
    doLast {
        // Use Gradle's built-in Exec task to run the 'ant release' command
        exec {
            // Set the command line arguments to build the project
            commandLine "$rootDir/MyNewApp/ant",
                    "release"
            // Set the working directory to the project directory
            workingDir "$rootDir/MyNewApp"
        }
    }
}

// Define a task to sign the APK
task signApk(dependsOn: buildProject) {
    doLast {
        // Use Gradle's built-in Exec task to run the 'jarsigner' command
        exec {
            // Set the command line arguments to sign the APK
            commandLine "jarsigner",
                    "-verbose",
                    "-sigalg",
                    "SHA1withRSA",
                    "-digestalg",
                    "SHA1",
                    "-keystore",
                    "my-release-key.keystore",
                    "MyNewApp-release-unsigned.apk",
                    "myAlias"
            // Set the working directory to the project directory
            workingDir "$rootDir/MyNewApp"
        }
    }
}

// Define a task to align the APK
task zipAlign(dependsOn: signApk) {
    doLast {
        // Use Gradle's built-in Exec task to run the 'zipalign' command
        exec {
            // Set the command line arguments to align the APK
            commandLine "$rootDir/android-sdk/build-tools/$buildTools/zipalign",
                    "-v",
                    "4",
                    "MyNewApp-release-unsigned.apk",
                    "MyNewApp-release.apk"
            // Set the working directory to the project directory
            workingDir "$rootDir/MyNewApp"
        }
    }
}

// Define a task to clean up
task cleanUp(dependsOn: zipAlign) {
    doLast {
        // Use Gradle's built-in Delete task to remove unnecessary files
        delete fileTree("$rootDir/MyNewApp/build")
        delete "$rootDir/MyNewApp/ant.properties"
        delete "$rootDir/MyNewApp/local.properties"
        delete "$rootDir/MyNewApp/proguard-project.txt"
        delete "$rootDir/MyNewApp/project.properties"
    }
}

// Define a task to run the entire process
task release(dependsOn: cleanUp) {
    doLast {
        println "Congratulations! Your signed and aligned APK can be found in $rootDir/MyNewApp."
    }
}

// Define a task to run the release process
task releaseProcess(dependsOn: release) << {
    println "Release process complete."
}

// Define a task to clean all the created files and directories
clean {
    // Use Gradle's built-in Delete task to remove all created files and directories
    delete fileTree(rootDir)
}