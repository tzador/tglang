// The following code snippet defines a custom task called "buildAndDeploy"
// that performs a sequence of tasks using the Gradle build tool.

// The first part of the code defines the task and sets its description.
task buildAndDeploy(type: GradleBuild, description: "Builds and deploys the project") {

    // The next section adds a dependency on the "build" task,
    // which must be executed before this task can run.
    dependsOn "build"

    // The "tasksToSkip" property lists tasks which this task will skip
    // if they have already been executed in a previous build.
    tasksToSkip = ["test", "check"]

    // The "buildFile" property specifies the build file to use for the build.
    buildFile = file("build.gradle")

    // The "ignoreFailures" property causes the task to continue even if some
    // of the tasks it depends on fail.
    ignoreFailures = true

    // The "graphSource" property specifies a directory containing additional
    // source code to be included in the build.
    graphSource = file("src/main/resources")

    // The "graphTaskPath" property specifies the task path for the Gradle task
    // that will generate the dependency graph.
    graphTaskPath = ":tasks"

    // The "buildArguments" property specifies command-line arguments
    // to be passed to the Gradle build.
    buildArguments = ["-PconfigFile=production.conf"]

    // The "buildLogging" property specifies options for logging output
    // from the Gradle build.
    buildLogging {
        // "showStacktrace" causes the task to print stack traces for
        // any exceptions encountered during the build.
        showStacktrace = true
        // "events" specifies the level of detail to include in the log output.
        events "result", "exception", "started"
        // "minLevel" specifies the minimum level of events to be included in the log.
        minLevel "DEBUG"
    }
}