plugins {
    // Plugin used for building Java applications
    id 'java'

    // Plugin used for creating executable JAR files
    id 'application'
}

// Configure the application plugin
application {
    // Main class to use for the executable JAR
    mainClassName = 'ExampleApplication'

    // Add custom JAR artifact to be included in the executable JAR
    applicationDistribution.from(configurations.runtimeClasspath.findAll { it.name.endsWith('.jar') })
}

// Configure the Java plugin
java {
    // Set JDK version
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    // Configure the main source set
    sourceSets {
        main {
            // Source directories for Java code
            java.srcDirs = ['src/main/java']
        }
    }
}

// Dependencies
dependencies {
    // Dependency used for logging
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    // Dependency used for testing
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

// Define tasks
tasks {

    // Task for creating executable JAR
    task createJar(type: Jar) {
        // Main class for the executable JAR
        manifest {
            attributes 'Main-Class': 'ExampleApplication'
        }

        // Include all dependencies in the JAR file
        from {
            configurations.runtimeClasspath.findAll { it.name.endsWith('.jar') }.collect { it.isDirectory() ? it : zipTree(it) }
        }

        // Output path for the JAR file
        destinationDir = file("$buildDir/libs")

        // Name of the JAR file
        archiveName = 'ExampleApplication.jar'
    }

    // Task for running the application
    task run(type: JavaExec) {
        // Main class to run
        main = 'ExampleApplication'

        // Classpath for the application
        classpath = sourceSets.main.runtimeClasspath

        // Arguments to pass to the application
        args 'arg1', 'arg2', 'arg3'
    }

    // Task for running tests
    task test(type: Test) {
        // Directory where test results will be generated
        reports {
            junitXml.enabled = true
            html.enabled = false
        }

        // Classes to be tested
        include 'com.example.ExampleTest'

        // Configure the classpath
        classpath = sourceSets.test.runtimeClasspath
    }
}