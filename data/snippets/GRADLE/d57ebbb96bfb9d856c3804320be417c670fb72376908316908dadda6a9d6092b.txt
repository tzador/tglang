apply plugin: 'java'

// Define dependencies
dependencies {

    // Dependency for JUnit testing
    testCompile 'junit:junit:4.12'
    
    // Dependency for Apache HttpClient
    compile 'org.apache.httpcomponents:httpclient:4.5.13'
    
    // Dependency for Log4j logging
    compile 'log4j:log4j:1.2.17'
    
    // Dependency for Apache Commons IO
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    
    // Dependency for Gson parsing
    compile 'com.google.code.gson:gson:2.8.6'
    
    // Exclude javax dependencies from Apache HttpClient
    configurations {
        all*.exclude group: 'javax.activation', module: 'activation'
        all*.exclude group: 'org.apache.geronimo.specs', module: 'geronimo-*
    }
}

// Set Java version to be used
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Define tasks
task compile(type: JavaCompile, options: ['-Xlint:unchecked']) {
    sourceSets.main.java.srcDirs = ['src/']
    sourceSets.test.java.srcDirs = ['test/']
    classpath = configurations.compile + sourceSets.main.output + sourceSets.test.output
}
jar {
    manifest {
        attributes (
                'Main-Class': 'com.example.Main'
        )
    }
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

// Define custom task to clean class files
task clean(type: Delete) {
    delete 'out/'
}

// Define task to run JUnit tests
task test(type: Test) {
    useJUnit()
}

// Define task to generate javadoc
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

// Define task to generate javadoc
task javadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath += sourceSets.main.compileClasspath
    classpath += configurations.javadoc
}

// Define task to assemble project into a fat jar
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Example',
                'Implementation-Version': '1.0',
                'Main-Class': 'com.example.Main'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Define task to upload artifacts to remote repository
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://example.repo.com")
            pom.groupId = 'com.example'
            pom.artifactId = 'gradle-example'
            pom.version = '1.0'
        }
    }
}

// Define task to clean and build project
build.dependsOn clean, compile

// Define default task to build and run tests
defaultTasks 'build', 'test'