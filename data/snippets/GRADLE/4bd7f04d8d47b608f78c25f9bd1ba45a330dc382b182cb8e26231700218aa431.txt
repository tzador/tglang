// Define a custom task that runs a shell command
task runShellCommand(type: Exec, dependsOn: build) {
    // Specify command to be executed, here we are running a 'ls' command to list files
    commandLine 'ls'
    // Set the working directory for the command to be executed
    workingDir '.'
    // Set the standard output and error streams to be redirected to a file
    standardOutput = new FileOutputStream(file('output.txt'))
    errorOutput = new FileOutputStream(file('error.txt'))
    // Set the environment variables for the shell command to run in
    environment 'PATH', System.getenv('PATH') + ':/usr/local/bin'
    environment 'JAVA_HOME', "$System.env.JAVA_HOME"
    // Set the flags for the shell command to run in
    args '-lah'
    // Set the input to be passed to the shell command
    // Here we are using a byte array to pass in the input
    // but you can also use a File or String
    input = 'Some Input'.getBytes()
    // Set the maximum heap size for the shell command to run
    // Note: This is specific to the JVM and may not be applicable for other languages
    ext.maxHeapSize = '8g'
    // Set JVM arguments for the shell command to run with
    executable = 'java'
    // Set the arguments for the JVM to run with
    args "-Xmx${maxHeapSize}", "-Dsome.property=true", "com.example.MainClass"
    // Set the exec property for the task to specify that we want to capture the output of the shell command
    // and attach it to the task's output
    // Note: This is specific to Gradle and may not be applicable for other build tools
    ext.captureOutput = true
    // Set the output property for the task to specify where we want to capture the output of the shell command
    // In this case, we are capturing it in a file called 'shellOutput.txt'
    // Note: This is specific to Gradle and may not be applicable for other build tools
    output = file('shellOutput.txt')
}