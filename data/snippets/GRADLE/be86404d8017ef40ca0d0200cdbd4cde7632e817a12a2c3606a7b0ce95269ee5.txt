plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an executable application
    id 'application'
}

// Define variables for the project
def projectName = 'gradle-sample'
def javaSourceCompatibility = '1.8'
def mainClass = 'com.example.Main'

// Configure the Java project
java {
    sourceCompatibility = "$javaSourceCompatibility"
}

// Configure the application task
application {
    // Set the main class to be executed
    mainClassName = "$mainClass"

    // Define the classpath for the application (dependencies and project output)
    classpath = sourceSets.main.runtimeClasspath
}

// Configure the tasks
tasks.named('jar', Jar) {
    // Include the main class in the manifest file
    manifest {
        attributes(
                'Main-Class': "$mainClass"
        )
    }

    // Configure the destination directory and the name of the jar file
    destinationDirectory = file("$buildDir/dist")
    archiveFileName = "$projectName.jar"
}

// Configure the task that creates a zip with the project's source code
tasks.register('createSourceZip', Zip) {
    from 'src'
    archiveFileName = "$projectName-source.zip"
    destinationDirectory = file("$buildDir/dist")
}

// Configure the task that creates a zip with the project's documentation
tasks.register('createDocZip', Zip) {
    from 'docs'
    archiveFileName = "$projectName-docs.zip"
    destinationDirectory = file("$buildDir/dist")
}

// Configure the clean task to also delete the distribution directory
clean.doFirst {
    delete "$buildDir/dist"
}

// Set tasks dependencies
tasks.createSourceZip.dependsOn('clean')
tasks.createDocZip.dependsOn('clean')
tasks.jar.dependsOn('createSourceZip', 'createDocZip')