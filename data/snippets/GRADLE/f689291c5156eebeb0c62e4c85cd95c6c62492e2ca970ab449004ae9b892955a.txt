plugins {
    id 'java'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    // Maven Central repository
    mavenCentral()
}

dependencies {
    // Kotlin standard library dependency
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    // JUnit testing dependency
    testImplementation 'junit:junit:4.13.2'
}

tasks.withType(JavaCompile) {
    // Enabling Java compilation warnings
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

// Defining a task named "customTask" that runs after the "build" task
task customTask(dependsOn: build) {
    // Setting a description for the task
    description = "This is a custom task that runs after the build task"
    // Printing a message when the task is executed
    doLast {
        println "Executing custom task after build task..."
    }
}

build.dependsOn(customTask)

// Customizing the 'run' task to use a different main class
tasks.named('run') {
    // Setting the main class to use for the 'run' task
    doFirst {
        main = 'com.example.Main'
    }
}

// Declaring a new source set named "integration" for integration tests
sourceSets {
    integration {
        // Linking the source code to the source set
        java.srcDir srcDir('src/integration')
        // Adding the integration test dependencies
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        // Setting the output directory for integration test classes
        output.dir("build/classes/integration")
    }
}

// Configuring the "test" task to run integration tests as well
tasks.named('test') {
    // Adding the integration test source set to the classpath
    classpath += sourceSets.integration.output
    // Setting the source directory for integration tests
    testSrcDirs = sourceSets.integration.java.srcDirs
}

// Defining a task named "testReport" that generates a test report
task testReport(type: TestReport) {
    // Naming the generated report
    destinationDir = file("build/reports/test")
}

// Customizing the behaviour of the "clean" task
tasks.named('clean') {
    // Deleting the integration test output directory as well
    doFirst {
        delete sourceSets.integration.output
    }
    // Printing a message when the task is executed
    doLast {
        println "Executing custom clean task..."
    }
}