apply plugin: 'java'

// Set source and target compatibility levels
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Define dependencies
dependencies {
    // Include JUnit testing framework
    testImplementation 'junit:junit:4.12'
    // Include Apache Commons Lang library
    implementation 'org.apache.commons:commons-lang3:3.9'
    // Include JDBC driver for MySQL database
    compile 'mysql:mysql-connector-java:8.0.19'
}

// Define a task to run tests
task test(type: Test) {
    // Specify test classes to run
    include 'test/**'
    // Configure test options
    testLogging {
        // Specify log level
        events 'passed', 'skipped', 'failed'
    }
}

// Configure build options
tasks.withType(JavaCompile) {
    // Specify encoding for source code
    options.encoding = 'UTF-8'
    // Configure warnings
    options.compilerArgs << '-Xlint:unchecked'
}

// Create a JAR file from project
task jar(type: Jar) {
    // Configure JAR options
    archiveName = 'my-project.jar'
    // Include only compiled classes and resources
    from(sourceSets.main.output) {
        exclude 'META-INF/**'
    }
}

// Define a custom task to generate documentation
task generateDocs(type: Javadoc) {
    // Set API documentation title
    title = 'My Project API'
    // Exclude non-public members from documentation
    exclude '**/internal/**'
    // Configure Javadoc options
    options {
        // Include descriptions from JavaDoc comments
        links += project.sourceSets.main.allJava
        // Set destination for generated documentation
        destinationDir = file("$buildDir/docs")
    }
}

// Define a task to clean project directory
task clean(type: Delete) {
    // Specify directories and files to delete
    delete 'build', 'out'
}