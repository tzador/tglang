plugins {
    id 'java'
    id 'application'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Annotation Processor
    annotationProcessor 'com.google.dagger:dagger-compiler:2.35.1'

    // Annotation Processor Path
    annotationProcessorPath('path/to/annotation/processor')

    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'

    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Testing Libraries
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:3.10.0'

    // Dependency Analyze Plugin
    classpath "com.vanniktech:gradle-dependency-graph-generator-plugin:0.9.1"
    apply plugin: 'com.vanniktech.dependency.graph.generator'

    classpath "me.tatarka:gradle-retrolambda:3.8.0"
    apply plugin: 'me.tatarka.retrolambda'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xmaxerrs" << "500"
}

task checkDependencyTree(dependsOn: ':dependencies') {
    doLast {
        println "Checking for dependency conflicts"
    }
}

task testCoverage (type:JacocoReport, dependsOn: test) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories = fileTree(
            dir: 'build/classes/java/main',
            excludes: ['**/models/*.class', '**/resources/*.class']
    )
    sourceDirectories = files('src/main/java')
}

check.dependsOn testCoverage