plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'

    // Apply the application plugin to enable building executable jars
    id 'application'
}

// Configure build artifacts
group = 'com.example'
version = '1.0'

repositories {
    // Use jcenter for resolving dependencies
    jcenter()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:25.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// Define the main class for the application
mainClassName = 'com.example.Main'

// Define tasks
task buildApp(type: Jar) {
    // Include all the runtime dependencies inside the output jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Rename the output jar file
    archiveFileName.set('my-app.jar')

    // Set the classpath for running the application
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')
        )
    }
}

task sayHello() {
    doLast {
        println 'Hello, this is a Gradle code snippet!'
    }
}

// Create a custom task that generates a report
task generateReport(type: Exec, dependsOn: sayHello) {
    // Set the command for running
    commandLine 'echo', 'Generating report...'

    // Output the report to a file named output.txt
    standardOutput = new FileOutputStream(file('output.txt'))
}

// Specify the order of task execution
// When `build` is run, `sayHello` and then `generateReport` will be executed in sequence
build.dependsOn sayHello
sayHello.dependsOn generateReport