plugins {
    // Apply the java-library plugin to add support for Java Library
    java-library

    // Apply the application plugin to allow building an executable application
    id 'application'
}

// Define main class for the application
application {
    // Set the main class for the application
    mainClassName = 'com.example.MyApplication'
}

// Configure repositories
repositories {
    // Use jcenter for Maven dependencies
    jcenter()
    // Use mavenCentral for Maven dependencies
    mavenCentral() 

    // Use custom repository
    maven {
        url "http://myrepo.com" 
        credentials {
            username 'user'
            password 'pass'
        }
    }
}

// Configure dependencies
dependencies {
    // Add a compile dependency on a library
    compile 'com.example:mylibrary:1.0'

    // Add a testCompile dependency on a testing library
    testCompile 'junit:junit:4.12'
}

// Configure tasks
tasks {
    // Custom task to print "Hello, World!"
    task hello {
        doLast {
            println 'Hello, World!'
        }
    }

    // Custom task to run the application
    task runApp(type: Exec) {
        dependsOn classes
        // Set main class to run
        main = 'com.example.MyApplication'
    }
}

// Configure build types
buildTypes {
    // Define a debug build type
    debug {
        // Enable debug mode
        debuggable true
        // Set debuggable property for the application
        applicationVariants.all { variant ->
            variant.debuggable = true
        }
    }

    // Define a release build type
    release {
        // Disable debug mode
        debuggable false
        // Set minifyEnabled property to enable code minification
        minifyEnabled true
        // Set proguardFiles property to specify ProGuard rules
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
}

// Configure signing
android {
    // Set signing information for release build type
    signingConfigs {
        release {
            keyAlias 'myKey'
            keyPassword 'myPassword'
            storeFile file('mykeystore.jks')
            storePassword 'myStorePassword'
        }
    }
    // Tell the build system which build types to sign with which configurations
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}