apply plugin: 'java'

dependencies {
    // Define external dependency
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    
    // Define internal dependency on project 'my-project'
    implementation project(':my-project')
    
    // Define runtime dependency on external library
    runtime group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    
    // Define test dependency on external library
    testCompile group: 'junit', name: 'junit', version: '4.12'
    
    // Define build-only dependency on external library
    buildOnly group: 'com.google.guava', name: 'guava', version: '30.1-jre'
    
    // Define all-encompassing dependency
    compile group: 'org.springframework', name: 'spring-web', version: '5.2.9.RELEASE'
}

task generateJar(type: Jar) {
  // Define jar name
  manifest { attributes 'Implementation-Title': 'My App', 'Implementation-Version': '1.0' }
  
  // Define source files to be included in jar
  from sourceSets.main.output
  
  // Define jar file output location
  destinationDir = file('build')
}

task copyConfig(type: Copy) {
    // Define configuration file to be copied
    from 'config.xml'
    
    // Define destination directory
    into 'build'
}

// Define custom task that depends on both generateJar and copyConfig tasks
task customTask(dependsOn: [generateJar, copyConfig]) {
    // Task logic goes here
}

// Define task that is run before every build
gradle.taskGraph.whenReady{
    tasks.configureEach{
        if(it.name.startsWith("build")){
            println "Running task \"$it.name\""
        }
    }
}

// Define task that is run after every build
gradle.buildFinished{
    // Clean up any temporary files or resources here
}

// Define custom task that downloads a file from a remote location
task downloadFile(type: Exec) {
    // Define command to download file
    commandLine 'curl', 'https://example.com/file.txt', '-o', 'build/file.txt'
    
    // Confirm successful execution of download command
    doLast{
        println "File downloaded successfully"
    }
}

// Define custom task that runs multiple tasks in parallel
task parallelTasks {
    // Define tasks to be run in parallel
    doFirst{
        gradle.startParameter.parallel = true
        tasks.register('task1')
        tasks.register('task2')
        tasks.register('task3')
        tasks.register('task4')
        
        // Run tasks in parallel
        tasks.parallelAll.execute()
    }
}

// Define custom task that executes selected tasks in a specific order
task orderedTasks {
    for (i in 1..10) {
        // Define dynamic task name
        task "task$i" {
            // Define task action
            doLast{
                println "This is task$i"
            }
        }
    }
    
    // Define order in which tasks should be run
    doFirst {
        gradle.startParameter.taskNames = ['task8', 'task3', 'task5']
    }
}