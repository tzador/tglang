// Define a task called 'compile' that is dependent on 'clean' and 'classes' tasks
task compile(dependsOn: ['clean', 'classes']) {
    // Configure the Java Plugin
    apply plugin: 'java'
    // Set the JDK version
    sourceCompatibility = 1.8
    // Set the source and output directories
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }
    }
    // Specify dependencies for the task
    dependencies {
        // Include the 'junit' library for testing
        testCompile 'junit:junit:4.12'
        // Include the 'commons-lang3' library for additional functionality
        compile 'org.apache.commons:commons-lang3:3.9'
    }
}

// Define a task called 'test' that is dependent on 'compile' task
task test(dependsOn: ['compile']) {
    // Configure the Test Plugin
    apply plugin: 'jacoco'
    // Set the JDK version
    sourceCompatibility = 1.8
    // Set the source, output, and coverage directories
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }
        test {
            java {
                srcDirs = ['src/test/java']
            }
        }
    }
    // Specify dependencies for the task
    dependencies {
        // Include the 'junit' library for testing
        testCompile 'junit:junit:4.12'
        // Include the 'mockito-core' library for mocking
        testCompile 'org.mockito:mockito-core:3.3.3'
        // Include the 'jacoco' library for code coverage
        jacocoAgent 'org.jacoco:org.jacoco.agent:0.8.6'
    }
    // Configure the jacocoTestReport task to generate coverage reports
    jacocoTestReport {
        // Set the report format
        reports {
            xml.enabled true
            html.enabled true
            csv.enabled false
        }
        // Set the report directories
        reportsDir = file("build/reports/jacoco")
        // Set the source directories
        sourceDirectories = files(['src/main/java'])
        // Set the class directories
        classDirectories = files(['build/classes'])
        // Set the execution data file
        executionData = files(['build/jacoco/test.exec'])
        // Set the maximum allowed code coverage percentage
        violationRules {
            rule {
                limit {
                    minimum = 80
                }
            }
        }
    }
}

// Define a task called 'build' that is dependent on 'test' task
task build(dependsOn: ['test']) {
    // Configure the Build Plugin
    apply plugin: 'maven'
    // Set the project group, version, and artifact id
    group = 'com.example'
    version = '1.0'
    archivesBaseName = 'myproject'
    // Set the source, output, and documentation directories
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }
        test {
            java {
                srcDirs = ['src/test/java']
            }
        }
        javadoc {
            source {
                srcDirs = ['src/main/java']
            }
        }
    }
    // Set the dependencies for the project
    dependencies {
        // Include the 'commons-io' library for file manipulation
        compile 'commons-io:commons-io:2.6'
        // Include the 'httpclient' library for making HTTP requests
        compile 'org.apache.httpcomponents:httpclient:4.5.12'
        // Include the 'jackson-databind' library for JSON parsing
        compile 'com.fasterxml.jackson.core:jackson-databind:2.11.3'
        // Include the 'javax.servlet-api' library for web development
        compile 'javax.servlet:javax.servlet-api:3.1.0'
    }
    // Configure the jar and javadoc tasks to generate artifacts
    jar {
        manifest {
            attributes 'Implementation-Title': 'My Project',
                    'Implementation-Version': version,
                    'Main-Class': 'com.example.myproject.MainClass'
        }
    }
    javadoc {
        title = 'My Project - API Documentation'
        version = '1.0'
        failOnError = false
        classpath += project.files('build/classes')
    }
}

// Define a task called 'install' that is dependent on 'build' task
task install(dependsOn: ['build']) {
    // Configure the Install Plugin
    apply plugin: 'maven-publish'
    // Configure the publication of the project artifacts
    publishing {
        repositories {
            maven {
                url "https://myproject-repo.com"
                credentials {
                    username "username"
                    password "password"
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

// Define a task called 'deploy' that is dependent on 'install' task
task deploy(dependsOn: ['install']) {
    // Configure the Remote Deployment Plugin
    apply plugin: 'maven-deploy'
    // Configure the deployment of the project artifacts
    uploadArchives {
        repositories.mavenDeployer {
            // Specify the destination repository
            repository(url: "https://myproject-deploy.com") {
                authentication(userName: "username", password: "password")
            }
            // Specify the project artifacts to be deployed
            addFilter('archives') { artifact, file ->
                artifact.name == 'myproject-' + version + '.jar'
            }
            // Specify the project documentation to be deployed
            addFilter('javadocs') { artifact, file ->
                artifact.name == 'myproject-' + version + '-javadoc.jar'
            }
            // Specify the project's POM file to be deployed
            pom {
                project {
                    groupId group
                    artifactId archivesBaseName
                    version version
                }
            }
        }
    }
}