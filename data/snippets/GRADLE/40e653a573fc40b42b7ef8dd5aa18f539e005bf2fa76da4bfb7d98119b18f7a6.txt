apply plugin: 'java' //applies Java plugin to project

plugins { //opening declaration of plugins section
    id 'java-library' //specifies Java library plugin
    id 'org.springframework.boot' version '2.6.0-SNAPSHOT' //specifies specific version of Spring Boot plugin
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' //specifies specific version of Spring Dependency Management plugin
}

group = 'com.example' //configures project's group identifier

version = '1.0-SNAPSHOT' //configures project's version

sourceCompatibility = '1.8' //configures Java compatibility level for source code

repositories { //opening declaration of repositories section
    mavenCentral() //adds Maven Central repository as source for dependencies
}

dependencies { //opening declaration of dependencies section
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.5.4' //adds Spring Boot starter web dependency to project
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.5.4' //adds Spring Boot starter data JPA dependency to project
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.23' //adds PostgreSQL database driver dependency to project
    testImplementation group: 'junit', name: 'junit', version: '4.13.2' //adds JUnit testing framework dependency to project
}

task helloWorld { //creates custom task named "helloWorld"
    doLast { //designates code to run as part of task's execution
        println 'Hello, world!' //prints "Hello, world!" to console
    }
}

configure([compileJava, compileTestJava]) { //configures tasks related to compilation
    options.compilerArgs = ["-Xlint:unchecked", "-Xlint:deprecation"] //specifies compiler arguments to enable lint warnings for unchecked and deprecated code
}

jar { //creates a JAR archive task
    manifest { //configures the manifest file for the JAR
        attributes 'Main-Class': 'com.example.MyMainClass' //specifies the main class for the JAR
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } //adds all dependencies to the JAR
}