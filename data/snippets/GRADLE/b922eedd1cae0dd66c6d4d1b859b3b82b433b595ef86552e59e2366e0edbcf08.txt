plugins {
    // Applies the java plugin to the current project
    id 'java'

    // Applies the war plugin to the current project
    id 'war'

    // Applies the jacoco plugin to the current project
    id 'jacoco'

    // Applies the sonarqube plugin to the current project
    id 'org.sonarqube' version '2.6.2'
}

// Specifies the JDK version to be used
sourceCompatibility = JavaVersion.VERSION_11

// Configures the repositories to be used for dependencies
repositories {
    // Specifies the location of the dependency jars
    mavenCentral()

    // Specifies the URL of the SonarQube server
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

// Configures the dependencies for the project
dependencies {
    // Specifies the dependencies for the 'compile' configuration
    compile group: 'org.springframework', name: 'spring-core', version: '5.2.4.RELEASE'
    compile group: 'org.springframework', name: 'spring-web', version: '5.2.4.RELEASE'

    // Specifies the dependencies for the 'testCompile' configuration
    // Inherits the dependencies specified in the 'compile' configuration
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2'
}

// Configures the test tasks for the project
test {
    // Configures the test task to use the JUnit platform
    useJUnitPlatform()
}

// Configures the code coverage settings using the jacoco plugin
jacoco {
    // Specifies the source files to be included for code coverage analysis
    sourceSets {
        // Specifies the source directories for the 'main' source set
        main {
            java {
                // Includes all Java files in the 'src/main/java' directory
                include 'src/main/java/**/*.java'
            }
        }

        // Specifies the source directories for the 'test' source set
        test {
            java {
                // Includes all Java files in the 'src/test/java' directory
                include 'src/test/java/**/*.java'
            }
        }
    }
}

// Configures the SonarQube settings
sonarqube {
    // Specifies the URL of the SonarQube server
    properties {
        // Specifies the authentication token to access the SonarQube server
        property 'sonar.login', 'my_authentication_token'

        // Specifies the location of the JaCoCo code coverage report
        property 'sonar.jacoco.reportPaths', "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"

        // Specifies the source path directories to be used for code coverage analysis
        property "sonar.sources", "src/main/java"

        // Specifies the test source path directories to be used for code coverage analysis
        property "sonar.tests", "src/test/java"

        // Specifies the encoding of the source files
        property "sonar.sourceEncoding", "UTF-8"
    }
}

// Specifies the tasks to be executed when the build is executed
build {
    // Configures the tasks to be executed in order
    dependsOn clean
    dependsOn check
    dependsOn test
    dependsOn jacocoTestReport
    dependsOn sonarqube
}

// Specifies the tasks to be executed when the build is cleaned
clean {
    // Deletes all generated files and directories
    delete rootProject.buildDir
}

// Specifies the tasks to be executed when the project is run
run {
    // Specifies the main class that will be executed
    mainClassName = 'com.example.MyApplication'

    // Specifies the arguments to be passed to the main class
    args = ['argument1', 'argument2']
}

// Specifies the tasks to be executed when the project is built as a war file
war {
    // Specifies the name of the war file
    archiveFileName = 'my-application.war'
}

// Specifies the tasks to be executed when the project is deployed to a server
tasks.named('deploy') {
    // Specifies the type of artifact to be deployed
    inputs.files project.tasks['war'].outputs

    // Specifies the location where the artifact will be deployed
    outputs.dir "/opt/my-application"
}