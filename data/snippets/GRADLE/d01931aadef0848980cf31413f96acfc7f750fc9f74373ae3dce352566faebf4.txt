plugins { // defining the plugins block
    id 'java'
    id 'application' // adding Java and application plugins
}

repositories { // defining repositories block
    mavenCentral()
}

dependencies { // defining the dependencies block
    implementation 'org.junit.jupiter:junit-jupiter:5.6.2' // adding JUnit dependency
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.2' // adding Jackson-databind dependency
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // adding Spring Boot starter test dependency, scoped for tests only
}

application { // defining application block
    mainClassName = 'com.example.Main' // setting the main class for the application
}

test { // defining test block
    useJUnitPlatform() // using JUnit platform for running tests
    testLogging { // defining testLogging block
        events 'passed', 'skipped', 'failed' // setting the events to be logged for tests
    }
}

jar { // defining jar block
    manifest { // defining manifest block
        attributes 'Main-Class': 'com.example.Main' // specifying the main class for the jar file
    }
}

task taskA(type: Exec) { // defining taskA of type Exec task
    commandLine 'mkdir', 'output' // setting command to create output directory
    workingDir '.' // setting the working directory
}

task taskB(dependsOn: taskA) << { // defining taskB which depends on taskA
    // taskB will only run if taskA is successful
    ant.mkdir(dir: 'output/subdir') // using Ant to create subdirectory in the output directory
    copy { // defining copy block
        from 'src/main/resources/test.txt' // specifying source of file to be copied
        into 'output/subdir' // specifying destination of copied file
    }
    ant.propertyfile(file: 'output/subdir/test.properties') { // using Ant to create properties file in output/subdir
        entry(key: 'key', value: 'value') // specifying key and value for properties file
    }
}