//Define a custom task
task customTask(type: MyCustomTask) {
    //Configure the task properties
    input = fileTree('src/customTask/inputDir')
    output = file('src/customTask/outputFile')
    //Add dependencies
    dependsOn tasks.named('compileJava')
    //Set description and group for task
    description = 'Runs custom task to process input files'
    group = 'Custom'
}

//Define a custom configuration
configurations {
    myCustomConfiguration {
        //Set transitive to false to only include direct dependencies
        transitive = false
    }
}

//Define a custom plugin
class MyCustomPlugin implements Plugin<Project> {
    void apply(Project project) {
        //Add custom task
        project.tasks.register('customTask', MyCustomTask)
        //Add custom configuration
        project.configurations.create('myCustomConfiguration')
    }
}

//Configure source sets for custom configuration
sourceSets {
    myCustomConfiguration {
        java.srcDirs = ['src/customConfiguration/java']
        resources.srcDirs = ['src/customConfiguration/resources']
    }
}

//Define a custom classpath
task customClasspath(type: Execute) {
    //Specify classpath
    classpath = configurations.myCustomConfiguration
    //Specify main class to run
    main = 'com.example.MainClass'
    //Set arguments
    args = ['arg1', 'arg2']
}

//Apply custom plugin
apply plugin: MyCustomPlugin

//Add custom task as a build dependency
build.dependsOn customTask

//Print project version during build
task printVersion {
    doLast {
        println "Project Version: ${project.version}"
    }
}