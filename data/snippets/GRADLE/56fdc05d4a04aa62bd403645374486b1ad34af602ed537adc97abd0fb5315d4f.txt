apply plugin: 'java' // apply the java plugin

// configure the main source set
sourceSets.main.java.srcDirs 'src/main'

// define the task to compile the code
task compile(type: JavaCompile) { // set task type to JavaCompile
    source = sourceSets.main.java // set source directory
    classpath = sourceSets.main.compileClasspath // set compile classpath
    destinationDir = file('build/classes/java/main') // set destination directory
}

// add a dependency on the compile task to the build task
build.dependsOn(compile)

// define the task to run the code
task run(type: JavaExec) { // set task type to JavaExec
    main = 'com.example.Main' // set the main class to run
    classpath = sourceSets.main.runtimeClasspath // set runtime classpath
    standardOutput = file('build/output.log') // set output file
    args = ['arg1', 'arg2'] // set command line argument
}

// add a dependency on the run task to the build task
build.dependsOn(run)

// define a task to clean the build directory
task clean(type: Delete) { // set task type to Delete
    delete 'build' // specify the directory to delete
}

// add the clean task as a dependency to the build task
build.finalizedBy(clean)

// define a custom test task
task myTest(type: Test) { // set task type to Test
    testClassesDirs = sourceSets.test.output.classesDirs // set test class directory
    classpath = sourceSets.test.runtimeClasspath // set runtime classpath
    outputs.upToDateWhen { false } // always run tests
}

// execute tests before the build task
build.dependsOn(myTest)