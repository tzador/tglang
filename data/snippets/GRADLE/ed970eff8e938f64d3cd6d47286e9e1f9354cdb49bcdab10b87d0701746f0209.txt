plugins {
    id 'java'
    id 'application'
}

// This section specifies the dependencies of the project
dependencies {
    implementation 'org.apache.commons:commons-lang3:3.6'
    testImplementation 'junit:junit:4.12'
}

// This section specifies tasks to be executed when the project is built
task run(type: JavaExec) {
    main = 'com.example.Main' // Specifies the main class of the project
    classpath = sourceSets.main.runtimeClasspath // Specifies the classpath for the project
}

// This section configures the execution of the project
run {
    systemProperty 'propertyOne', 'valueOne' // Specifies a system property to be set when executing the project
    args 'argumentOne', 'argumentTwo' // Specifies arguments to be passed when executing the project
}

// This section configures the test task
test {
    useJUnitPlatform() // Configures the test task to use the JUnit Platform
    systemProperty 'propertyOne', 'valueOne' // Specifies a system property to be set when executing tests
}

// This section specifies the packaging options for the project
jar {
    manifest {
        attributes 'Main-Class': 'com.example.Main' // Specifies the main class to be executed when running the jar
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } // Copies all necessary dependencies to the jar
    }
}

// This section specifies custom tasks to be executed before and after the build process
task preBuild {
    doLast {
        println "Executing preBuild task"
    }
}

task postBuild {
    doLast {
        println "Executing postBuild task"
    }
}

// This section specifies the task dependencies
build.dependsOn preBuild, compileJava, test, jar, postBuild