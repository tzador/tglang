// This task downloads and installs the specified file if it doesn't already exist
task downloadFile(type: HttpDownload) {
    // The url of the file to download
    src 'https://example.com/file.zip'

    // The destination directory to save the file in
    dest new File(project.buildDir, 'downloads')
}

// This task uploads the specified file to the server
task uploadFile(type: HttpUpload) {
    // The file to upload
    src file('path/to/file.zip')

    // The server url to upload to
    url 'https://example.com/upload'

    // The http method to use
    method 'POST'

    // The authentication credentials to use (optional)
    authentication {
        // The username
        username 'user'

        // The password
        password 'password'
    }
}

// This task copies all files matched by the given pattern to the specified directory
task copyFiles(type: Copy) {
    // The pattern to match the files to copy
    from('src/main/java/**/*.java')

    // The destination directory to copy files to
    into('build/java')
}

// This task runs the specified command in the project directory
task runCommand(type: Exec) {
    // The command to run
    commandLine 'node', 'index.js'

    // The directory to run the command in
    workingDir project.projectDir

    // Outputs the result of the command as info log level
    standardOutput = System.out

    // Outputs the error message of the command as error log level
    errorOutput = System.err

    // Defines the environment variables to use for the command (optional)
    environment = [PATH: System.getenv("PATH")]
}

// This task generates a JAR file from the project
task generateJar(type: Jar) {
    // The manifest file to include in the JAR (optional)
    manifest {
        // The main class for the JAR
        attributes 'Main-Class': 'com.example.Main'
    }

    // The source folder for the JAR
    from('src/main/java')

    // The output directory for the JAR
    into('build/libs')

    // The name of the JAR file
    archiveFileName = 'my-project.jar'
}