plugins {
    // Plugin to generate JavaDoc documentation
    id 'org.gradle.javadoc' version '1.0'
    // Plugin to generate code coverage report
    id 'jacoco'
    // Plugin to generate build scans which provide deep insights into the build
    id 'com.gradle.build-scan' version '2.0'
}

// Configurations for the build scan
buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishAggregationTasks 'true'
    captureTaskInputFiles 'true'
    linkBuildScanTo 'VCS'
    tags 'gradle', 'build-scan'
}

// Configuration for generating JavaDoc documentation
javadoc {
    options.docletpath = files(<doclet_jar>, ...)

    // Configure the source for the JavaDoc
    source = sourceSets.main.allSource

    // Customize the JavaDoc output by specifying options such as the doclet class
    options {
        doclet 'com.example.gradle.javadoc.CustomDoclet'
        docletpath = configurations.javadocDoclet.files
        header 'Custom JavaDoc Header'
    }
}

// Configuration for generating code coverage report
jacoco {
    // Enable code coverage for all tasks
    toolVersion = "0.8.1"
    applyTo allProjects
    applyTo subprojects
    applyTo ROOT_PROJECT
    destinationFile = file("${buildDir}/reports/jacoco/jacoco.exec")
    append = false
    // Exclude specific packages or classes from code coverage
    exclusion({"MyClass1.class", "MyClass2.class"})
}

// Add dependencies for code coverage
dependencies {
    // Dependency for Jacoco code coverage
    testImplementation 'org.jacoco:org.jacoco.agent:0.8.1'
}

// Configuration for build tasks
tasks {
    // Generate build scans after each build
    registers.buildScan

    // Run code coverage on tests
    jacocoTestReport {
        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/jacoco.xml")
            csv.enabled false
            csv.destination file("${buildDir}/reports/jacoco/jacoco.csv")
        }
    }

    // Run JavaDoc task
    javadoc {
        // Add dependencies for JavaDoc task
        dependsOn "dependencie1", "dependency2"

        // Set the destination for the generated JavaDoc files
        destinationDir = file("${buildDir}/docs/javadoc")

        // Set the title for the generated JavaDoc
        title = "My Project JavaDoc"

        // Exclude specific packages or classes from the JavaDoc
        exclude("**/MyClass.class", "**/MyPackage/**")
    }
}