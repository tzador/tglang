// Plugins declaration
plugins {
    // Apply java plugin
    id 'java'
    // Apply spring boot plugin
    id 'org.springframework.boot' version '2.4.5'
    // Apply cloud contract plugin
    id 'org.springframework.cloud.contract' version '3.0.1'
    // Apply spotless plugin
    id 'com.diffplug.gradle.spotless' version '5.12.4'
    // Apply jacoco plugin
    id 'jacoco'
}

// Build and dependency management configuration
dependencies {
    // Add spring boot starter dependency
    implementation 'org.springframework.boot:spring-boot-starter:2.4.5'
    // Add cloud starter contract dependency
    compile 'org.springframework.cloud:spring-cloud-starter-contract-verifier:3.0.1'
    // Add junit dependency for testing
    testImplementation 'junit:junit:4.12'
    // Add mockito dependency for testing
    testImplementation 'org.mockito:mockito-core:3.8.0'
}

// Java compilation configuration
compileJava {
    // Enable annotation processing
    options.annotationProcessorPath = configurations.annotationProcessor
}

// Jacoco code coverage configuration
jacoco {
    // Set code coverage report to be generated in HTML format
    toolVersion = '0.8.6'
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

// Spotless code formatting configuration
spotless {
    // Specify java file locations to be formatted
    java {
        source 'src/main/**/*.java'
        target 'build/generated-sources'
    }
    // Specify kotlin file locations to be formatted
    kotlin {
        source 'src/main/**/*.kt'
        target 'build/generated-sources'
    }
}

// Spring cloud contract configuration
contract {
    // Specify contract test base class
    baseClass = 'com.example.ContractTestBase'
    // Specify contract test source location
    testSourceDir = file('src/contracts')
    // Specify generated tests location
    generatedTestSourcesDir = file('src/test/java')
}

// Task definition to run contract tests
task runContractTests(type: Test) {
    // Specify tests to be executed
    testClassesDirs = fileTree(dir: 'build/generated-test-sources', include: '**/*Test.class')
    // Specify test classpath
    classpath = sourceSets.test.runtimeClasspath
}