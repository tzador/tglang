plugins {
    id 'java'
    id 'application'
}
// The java plugin allows this project to build and package Java code.
// The application plugin allows this project to run as a command line application.

repositories {
    jcenter()
    // This is the repository where our dependencies will be downloaded from.
}

dependencies {
    implementation 'com.google.guava:guava:29.0-jre'
    // This is a dependency on the Guava library, used for various Java utilities.

    testImplementation 'junit:junit:4.13'
    // This is a test dependency on the JUnit library, used for unit testing.
}

mainClassName = 'com.example.MyApplication'
// This sets the name of the main class for our application.

jar {
    manifest {
        attributes 'Main-Class': 'com.example.MyApplication'
    }
    // This creates a manifest for our application jar file, specifying the main class.
}

run {
    systemProperties = [myProperty: 'someValue']
    // This sets a system property for when we run our application.
}

distZip {
    into('config') {
        from { fileTree('src/main/resources') }
        // This adds our resources folder to the 'config' folder in our distribution zip file.
    }
    // This task generates a distribution zip file containing our application code and resources.
}

task customTask(type: Exec, dependsOn: 'distZip') {
    description 'A custom task that performs some action after the distZip task is done.'
    commandLine './scripts/myScript.sh', './build/distributions/myApp.zip'
    // This creates a custom task that runs a shell script after the distZip task is complete.
}