// Annotation processor defines a task for Gradle build process
task annotationProcessor(type: JavaCompile, group: 'build', description: 'Processes the annotations for a given sourceSet') {
    options.compilerArgs += ["-processor", "com.example.AnnotationProcessor"] // Specifies the class name of the annotation processor to use
    sourceSets.main.output.classesDir = file('build/annotated/classes') // Specifies the output directory for processed classes
    classpath += files('./libs/AnnotationProcessor.jar') // Adds the annotation processor jar to the classpath
    sourceSets.main.compileClasspath += files('./libs/AnnotationProcessor.jar') // Specifies the classpath for compiling the main sourceSet
    sourceSets.test.compileClasspath += files('./libs/AnnotationProcessor.jar') // Specifies the classpath for compiling the test sourceSet
    inputs.files sourceSets.main.allJava // Specifies the input files for the task, in this case all java files in the main sourceSet
    outputs.files sourceSets.main.output.classesDir // Specifies the output files for the task, in this case the processed classes directory
    options.encoding = 'UTF-8' // Specifies the encoding for the source files
    options.incremental = true // Enables incremental compilation
    options.fork = true // Enables forking a separate JVM process for the annotation processor
}

// Custom wrapper task that calls the annotation processor before other compile tasks
task annotatedCompile(dependsOn: ['annotationProcessor', 'compileJava', 'compileTestJava'], group: 'build', description: 'Compiles all source code including annotated classes') {
    description = 'Compiles all source code including annotated classes'
    inputs.files sourceSets.main.allJava // Specifies the input files for the task, in this case all java files in the main sourceSet
    outputs.files sourceSets.main.output.classesDir // Specifies the output files for the task, in this case the processed classes directory
    options.fork = true // Enables forking a separate JVM process for the annotation processor
}