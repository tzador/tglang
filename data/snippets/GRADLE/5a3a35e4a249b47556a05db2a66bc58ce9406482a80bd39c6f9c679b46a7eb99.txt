dependencies { // defining dependencies for the project
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.4'  //adding Spring Boot starter web
    testImplementation 'junit:junit:4.12' // adding JUnit testing framework
    implementation 'org.slf4j:slf4j-log4j12:1.7.25' // adding SLF4J logging library
    implementation 'org.apache.commons:commons-math3:3.6.1' //adding Apache Commons Math library
    implementation platform('org.springframework.boot:spring-boot-dependencies:2.5.4') // adding Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // adding Spring Boot starter data JPA
    runtimeOnly 'mysql:mysql-connector-java' // adding MySQL JDBC connector for database access
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // adding Spring Boot starter test
}

jar { // configuring the JAR task
    baseName = 'my-app' // setting the JAR file name
    version = '1.0' // setting the JAR version
    manifest { // setting the JAR manifest
        attributes 'Main-Class': 'com.example.MainApplication' // defining the main class for the JAR
    }
}

repositories { // configuring repositories for dependency resolution
    jcenter() // adding the JCenter repository
    mavenCentral() // adding the Maven Central repository
}

configurations { // defining configurations for the project
    developmentOnly // adding a configuration for development only dependencies
    runtimeClasspath { // defining the runtime classpath for the project
        extendsFrom developmentOnly // extending the runtime classpath to include development dependencies
    }
}

task syncApiDocs(type: JavaExec) { // defining a custom task to generate API documentation
    classpath = sourceSets.main.runtimeClasspath // setting the classpath for the task to include main sourceSet
    main = 'com.example.docs.generator.APIGenerator' // specifying the main class for the task
    args 'src/main/java', 'src/docs/api' // defining the arguments for the task
}

task test(type: Test) { // defining a task for running tests
    useJUnitPlatform() // specifying the test framework to use
    jacoco { // configuring code coverage with JaCoCo
        includeNoLocationClasses = true // including classes with no location information in code coverage report
    }
}

tasks.withType(JavaExec) { // configuring all JavaExec tasks
    systemProperties System.getProperties() // adding system properties to all JavaExec tasks
}