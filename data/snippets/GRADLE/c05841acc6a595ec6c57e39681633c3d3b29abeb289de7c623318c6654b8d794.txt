plugins {
    // Apply the Java plugin to add support for Java
    id 'java'

    // Apply the Application plugin to add support for building a CLI app
    id 'application'
}

repositories {
    // Use JCenter for resolving dependencies
    jcenter()

    // Use Maven Central for resolving dependencies
    mavenCentral()

    // Use Google Maven for resolving Android dependencies
    google()
}

dependencies {
    // Include JUnit testing framework as a dependency
    testImplementation 'junit:junit:4.+'

    // Include Google Gson as a dependency for JSON processing
    implementation 'com.google.code.gson:gson:2.8.5'
}

application {
    // Set the main class for the application
    mainClassName = 'com.example.myapp.Application'
}

// Define a task for generating a JAR file of the project
task generateJar(type: Jar) {
    // Set the base name for the JAR file
    baseName = 'myapp'

    // Set the version for the JAR file
    version = '1.0'

    // Set the manifest for the JAR file
    manifest {
        attributes 'Implementation-Title': 'MyApp',
                   'Implementation-Version': version
    }

    // Define the source files for the JAR file
    from {
        // Include all compiled Java classes
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }

        // Include any additional resource files
        include 'resources/**'
    }
}

// Define a task for running the application
task run(type: JavaExec) {
    // Set the main class for the application
    main = 'com.example.myapp.Application'

    // Use the JAR file generated by the generateJar task
    classpath = files('build/libs/myapp-1.0.jar')

    // Set the arguments for the application
    args '-arg1', 'value1',
         '-arg2', 'value2'
}

// Create a task for building and running the application
task buildAndRun(dependsOn: ['generateJar', 'run'])

// Define a task for cleaning the project directory
task clean(type: Delete) {
    // Define the directories and files to be deleted
    delete 'build',
           'out',
           'myapp.iml'
}