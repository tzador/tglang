apply plugin: 'java' // Applies the Java plugin to the project, allowing it to compile Java code

sourceCompatibility = 1.8 // Sets the source compatibility version to Java 8

// Dependencies section specifies the external libraries needed for the project
dependencies {
    // JUnit is used for testing code
    testImplementation 'junit:junit:4.12'
    // Apache Commons is used for various utility classes
    implementation 'org.apache.commons:commons-lang3:3.9'
    // Google Guava is used for functional programming and utility classes
    implementation 'com.google.guava:guava:28.1-jre'
    
    // Gradle plugin for generating code documentation
    // Used for auto-generating API documentation from code comments
    implementation 'org.gradle:gradle-docs:6.6'
}

// Tasks section defines custom tasks to be run during the build process
tasks {
    // Task for compiling and running unit tests
    test {
        useJUnit()
        testLogging {
            // Sets minimum log level for test output to INFO
            events 'passed', 'failed'
            // Specifies where test logs will be written to
            // In this case, it will be printed to the console
            exceptionFormat 'full'
        }
    }

    // Task for generating code documentation
    generateDocs {
        doFirst {
            // Runs code documentation generation as the first task during the build process
            println 'Generating code documentation...'
        }
        doLast {
            // Runs code documentation generation as the last task during the build process
            println 'Code documentation generated successfully.'
        }
    }
}

// Configuration section sets properties for the whole project
// In this case, the compile Java tasks will recursively search for Java source files in the src/main/java directory
configure(tasks.withType(JavaCompile)) {
    source = fileTree('src/main/java')
}