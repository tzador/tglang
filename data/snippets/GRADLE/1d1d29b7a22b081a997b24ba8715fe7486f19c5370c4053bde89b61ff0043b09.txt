plugins {
    // Applies the application plugin to the project.
    // This plugin provides the basic infrastructure for building
    // an application and provides a conventional layout for the project.
    application
}

// Configures the application plugin.
application {
    // Sets the main class to be the "MyApp" class.
    mainClass = 'com.example.MyApp'
    
    // Sets the application's name.
    applicationName = 'My App'

    // Declares the launch scripts to be included in the distribution.
    launchScripts {
        // Adds a script for each platform (Windows, Linux, macOS).
        windowsStartScript{ template = 'app-template.bat' }
        linuxStartScript{ template = 'app-template.sh' }
        macosStartScript{ template = 'app-template-macosx' }
    }
}

// Defines the "run" task to run the application in development mode.
task run(type: JavaExec, dependsOn: 'classes') {
    main = application.mainClassName
    // Enables running the application in the development mode,
    // allowing recompilation of source code on change.
    classpath = sourceSets.main.runtimeClasspath
}

// Adds a custom task to generate a zip file of the application.
task packageApp(type: Zip) {
    // Includes the build output directory and the launch scripts.
    // Excludes any test files.
    from(configurations.runtimeClasspath, 'build/distributions/',
            'src/*/test/*/application/*') {
        into 'app'
        exclude 'META-INF/*.SF' // Exclude signing files

        // Customize the launch scripts by adding a VM option to set the
        // initial and maximum heap size.
        expand expandTemplate('app-template.bat'), expandTemplate('app-template.sh')
    }
    archiveFileName = 'my-app.zip'
}