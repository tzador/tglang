plugins {
    // Import the Java plugin to add task for compiling Java source code
    id 'java'

    // Import the War plugin to add task for creating a WAR file
    id 'war'

    // Import the Spring Boot plugin to add task for creating an executable JAR file
    id 'org.springframework.boot' version '2.3.1.RELEASE'
}

// Define dependencies for the project
dependencies {
    // Use the Spring Boot starter dependency to import all required libraries for Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter'

    // Use the Spring Boot starter dependency for web development
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Use JUnit dependency for writing unit tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Use the H2 database for development and testing
    developmentOnly 'com.h2database:h2'

    // Use the postgresql database for production
    runtimeOnly 'org.postgresql:postgresql'
}

// Define tasks for building and running the project
task buildApp(type: Exec) {
    // Set the working directory for the task
    workingDir = projectDir

    // Set the command to run for building the project
    commandLine 'gradle', 'build'

    // Set the standard output and error streams of the task
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()

    // Define an action to be performed after the task is executed
    doLast {
        // Print the standard output and error streams of the task
        println standardOutput.toString()
        println errorOutput.toString()
    }
}

task runApp(type: Exec, dependsOn: buildApp) {
    // Set the working directory for the task
    workingDir = projectDir

    // Set the command to run for starting the application
    commandLine 'java', '-jar', "${rootProject.name}-${rootProject.version}.jar"

    // Set the standard output and error streams of the task
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()

    // Define an action to be performed after the task is executed
    doLast {
        // Print the standard output and error streams of the task
        println standardOutput.toString()
        println errorOutput.toString()
    }
}