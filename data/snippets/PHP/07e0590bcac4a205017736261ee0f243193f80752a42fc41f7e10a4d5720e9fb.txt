<?php
/**
 * This is a complex and long code snippet in PHP that performs the merge sort algorithm on an array of numbers.
 */

/**
 * Function to perform the merge sort algorithm on an array of numbers.
 *
 * @param array $arr The input array.
 * 
 * @return array The sorted array.
 */
function merge_sort(array $arr)
{
    // Check if the array is empty or has only one element.
    if(count($arr) <= 1) {
        return $arr;
    }

    // Calculate the middle index of the array.
    $mid = floor(count($arr) / 2);

    // Divide the array into two subarrays.
    $left_arr = merge_sort(array_slice($arr, 0, $mid));
    $right_arr = merge_sort(array_slice($arr, $mid));

    // Initialize the output array.
    $sorted_arr = array();

    // Merge the two subarrays.
    while(count($left_arr) > 0 && count($right_arr) > 0) {
        if($left_arr[0] < $right_arr[0]) {
            array_push($sorted_arr, array_shift($left_arr));
        } else {
            array_push($sorted_arr, array_shift($right_arr));
        }
    }

    // Add remaining elements from the left array, if any.
    while(count($left_arr) > 0) {
        array_push($sorted_arr, array_shift($left_arr));
    }

    // Add remaining elements from the right array, if any.
    while(count($right_arr) > 0) {
        array_push($sorted_arr, array_shift($right_arr));
    }

    // Return the sorted array.
    return $sorted_arr;
}

// Example array.
$numbers = [9, 5, 2, 7, 3, 1, 8, 4, 6];

// Call the merge_sort function.
$sorted_numbers = merge_sort($numbers);

// Print the sorted array.
print_r($sorted_numbers);