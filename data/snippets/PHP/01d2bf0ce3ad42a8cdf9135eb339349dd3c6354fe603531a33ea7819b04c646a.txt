<?php
// This is a complex and long code snippet in PHP

// Define a class named 'Complex' with a private property '$real' and a private property '$imaginary'
class Complex
{
    private $real;
    private $imaginary;
    
    // Create a constructor that takes in two parameters, '$real' and '$imaginary'
    public function __construct($real, $imaginary)
    {
        // Set the values of '$real' and '$imaginary' using the 'setReal' and 'setImaginary' methods
        $this->setReal($real);
        $this->setImaginary($imaginary);
    }
    
    // Create a public function named 'getReal' that returns the value of '$real'
    public function getReal()
    {
        return $this->real;
    }
    
    // Create a public function named 'setReal' that takes in one parameter, '$real'
    public function setReal($real)
    {
        // Check if '$real' is a numeric value
        if(is_numeric($real)){
            // If it is, set the value of '$real' to the private property '$real'
            $this->real = $real;
        } else {
            // If it is not, throw an InvalidArgumentException
            throw new InvalidArgumentException("Real part must be a numeric value.");
        }
    }
    
    // Create a public function named 'getImaginary' that returns the value of '$imaginary'
    public function getImaginary()
    {
        return $this->imaginary;
    }
    
    // Create a public function named 'setImaginary' that takes in one parameter, '$imaginary'
    public function setImaginary($imaginary)
    {
        // Check if '$imaginary' is a numeric value
        if(is_numeric($imaginary)){
            // If it is, set the value of '$imaginary' to the private property '$imaginary'
            $this->imaginary = $imaginary;
        } else {
            // If it is not, throw an InvalidArgumentException
            throw new InvalidArgumentException("Imaginary part must be a numeric value.");
        }
    }
    
    // Create a public function named 'conjugate' that returns a new instance of the Complex class with the same '$real' value and the opposite '$imaginary' value
    public function conjugate()
    {
        // Return a new Complex instance with the same value of '$real' and the opposite value of '$imaginary'
        return new Complex($this->real, -$this->imaginary);
    }
    
    // Create a public function named 'add' that takes in one parameter, '$complex'
    public function add($complex)
    {
        // Check if '$complex' is an instance of the Complex class
        if($complex instanceof Complex){
            // If it is, add the values of '$real' and '$imaginary' of '$complex' to the corresponding values of the current instance
            $this->real += $complex->getReal();
            $this->imaginary += $complex->getImaginary();
        } else {
            // If it is not, throw an InvalidArgumentException
            throw new InvalidArgumentException("Parameter must be an instance of 'Complex' class.");
        }
    }
    
    // Create a public function named 'subtract' that takes in one parameter, '$complex'
    public function subtract($complex)
    {
        // Check if '$complex' is an instance of the Complex class
        if($complex instanceof Complex){
            // If it is, subtract the values of '$real' and '$imaginary' of '$complex' from the corresponding values of the current instance
            $this->real -= $complex->getReal();
            $this->imaginary -= $complex->getImaginary();
        } else {
            // If it is not, throw an InvalidArgumentException
            throw new InvalidArgumentException("Parameter must be an instance of 'Complex' class.");
        }
    }
    
    // Create a public function named 'print' that prints the complex number in the format 'real + imaginaryi'
    public function print()
    {
        // Check if the value of '$imaginary' is positive or negative
        if($this->imaginary > 0){
            // If it is positive, print the complex number in the format 'real + imaginaryi'
            echo $this->real . " + " . $this->imaginary . "i";
        } else {
            // If it is negative, print the complex number in the format 'real - imaginaryi'
            echo $this->real . " - " . abs($this->imaginary) . "i";
        }
    }
}

// Create a new instance of the Complex class with values 4 and 5
$complex1 = new Complex(4, 5);

// Create another instance of the Complex class with values -2 and 3
$complex2 = new Complex(-2, 3);

// Print the complex numbers
echo "Complex number 1: ";
$complex1->print();
echo "\nComplex number 2: ";
$complex2->print();
echo "\n";

// Add the second complex number to the first one
$complex1->add($complex2);
// Print the result
echo "After addition: ";
$complex1->print();
echo "\n";

// Subtract the first complex number from the second one
$complex2->subtract($complex1);
// Print the result
echo "After subtraction: ";
$complex2->print();
echo "\n";

// Get the conjugate of the first complex number
$complex3 = $complex1->conjugate();
// Print the result
echo "Conjugate of complex number 1: ";
$complex3->print();
echo "\n";