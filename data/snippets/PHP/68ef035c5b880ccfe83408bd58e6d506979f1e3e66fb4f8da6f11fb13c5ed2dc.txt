<?php

// Define a variable to store a string
$string = "This is a long and complex code snippet in PHP";

// Create an associative array with key-value pairs
$person = array("name" => "John", "age" => 30, "city" => "London");

/*
Create a for loop that iterates through the length of the string
and outputs each character 
*/
for($i = 0; $i < strlen($string); $i++){
    echo $string[$i];
}

// Use the implode function to combine the values of the array into a string
$person_info = implode(" ", $person);

// Output the person's info
echo $person_info;

// Create a function to calculate the factorial of a number
function calculateFactorial($num){
    if($num < 0){ // Error message for negative numbers
        echo "Number must be a positive integer.";
        return;
    }
    $factorial = 1;
    for($i = 1; $i <= $num; $i++){ // Calculate the factorial
        $factorial *= $i;
    }
    return $factorial;
}

// Call the function and output the result
echo calculateFactorial(5);

// Define a class 
class Car {
    // Properties
    public $brand;
    public $color;
    
    // Constructor function
    public function __construct($brand, $color) {
        // Use $this keyword to set property values
        $this->brand = $brand;
        $this->color = $color;
    }
    
    // Method to output car information
    public function get_info(){
        echo "This car is a " . $this->color . " " . $this->brand . ".";
    }
}

// Create instances of the Car class
$car1 = new Car("Ford", "blue");
$car2 = new Car("BMW", "red");

// Output car information using the get_info method
$car1->get_info();
$car2->get_info();

// Create a try-catch block to handle exceptions
try {
    // Code that may cause an exception
    $result = 10 / 0;
} catch (Exception $e) {
    // Code to handle the exception
    die("Error: " . $e->getMessage());
}

// Output a success message if no exceptions were caught
echo "No exceptions occured.";

// Close the PHP tags
?>