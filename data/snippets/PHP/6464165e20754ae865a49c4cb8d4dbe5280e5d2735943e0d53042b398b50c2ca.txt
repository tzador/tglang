<?php

/**
 * This is a multi-line comment in PHP
 * It is used to document and describe the purpose of the code below
 * You can also use it to disable certain lines of code during debugging
 * or testing by surrounding them with the comment symbols
 */

// This is a single-line comment in PHP
// It is used to provide brief explanations or notes about specific lines of code 

// Declaring a constant 
define("MY_CONSTANT", "Hello World!");

// Defining a function that takes a parameter and returns the length of the parameter string
function getLength($str) {
    return strlen($str);
}

// Declaring a class
class Person {
    // Properties (variables) of the class
    public $name;
    private $age;
    protected $address;

    // Constructor method to initialize the object's properties
    public function __construct($name, $age, $address) {
        $this->name = $name;
        $this->age = $age;
        $this->address = $address;
    }

    // Getter method to retrieve the value of the private property $age
    public function getAge() {
        return $this->age;
    }

    // Setter method to update the value of the private property $age
    public function setAge($newAge) {
        $this->age = $newAge;
    }

    // Method to print out the person's information
    public function introduce() {
        echo "My name is " . $this->name . " and I am " . $this->age . " years old. I live in " . $this->address . ".";
    }
}

// Instantiating an object of the Person class
$person1 = new Person("John", 30, "New York");

// Calling the introduce() method on the object
$person1->introduce();

// Using a ternary operator to check if the person is an adult or not
$person1->getAge() >= 18 ? echo "I am an adult." : echo "I am not an adult.";

// Creating an array
$fruits = array("apple", "banana", "orange", "mango");

// Looping through the array and printing out each element
foreach($fruits as $fruit) {
    echo $fruit . " ";
}

// Using an if statement to check if the array contains a specific fruit
if(in_array("banana", $fruits)) {
    echo "The array contains banana.";
} else {
    echo "The array does not contain banana.";
}

// Using a try-catch block to handle exceptions
try {
    // Opening a file
    $file = fopen("myFile.txt", "r");

    // Reading the file and storing its contents in a variable
    $content = fread($file, filesize("myFile.txt"));

    // Closing the file
    fclose($file);

    // Printing out the file's contents
    echo $content;
} catch(Exception $e) {
    echo "There was an error: " . $e->getMessage();
}

// Creating a multidimensional array
$employees = array(
    array("John", "Doe", 25),
    array("Jane", "Smith", 30),
    array("Tom", "Hanks", 45)
);

// Using a for loop to access and print out the elements of the multidimensional array
for($i = 0; $i < count($employees); $i++) {
    for($j = 0; $j < count($employees[$i]); $j++) {
        echo $employees[$i][$j] . " ";
    }
}

// Using the ternary operator to check if a variable is empty or not
$myVar = "";

empty($myVar) ? echo "The variable is empty." : echo "The variable is not empty.";

// Using the isset() function to check if a variable is set or not
$myVar2;

isset($myVar2) ? echo "The variable is set." : echo "The variable is not set.";

// Adding a new element to an existing array
array_push($fruits, "grape");

// Sorting the array in alphabetical order
sort($fruits);

// Printing out the sorted array
print_r($fruits);

// Closing PHP tag
?>