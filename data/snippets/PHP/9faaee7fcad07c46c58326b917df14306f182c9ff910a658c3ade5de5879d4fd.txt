<?php

// This is a multiline comment, used to explain and document code

// This is a single-line comment
# This is also a single-line comment

// Declare a constant
define("PI", 3.14);

// Define a class
class Animal {
    
    // Class properties
    private $name;
    protected $age;
    public $species;
    
    // Constructor function
    public function __construct($name, $age, $species) {
        $this->name = $name;
        $this->age = $age;
        $this->species = $species;
    }
    
    // Class methods
    public function speak() {
        echo "Hi, my name is {$this->name} and I am a {$this->species}.";
    }
    
    public function eat($food) {
        echo "{$this->name} is eating {$food}.";
    }
}

// Inheritance
class Dog extends Animal {
    
    // Class property specific to Dog class
    private $breed;
    
    // Constructor function for Dog class
    public function __construct($name, $age, $breed) {
        parent::__construct($name, $age, "Dog"); // Inherits name and age from parent class
        $this->breed = $breed;
    }
    
    // Override parent method
    public function eat($food) {
        echo "{$this->name} the {$this->breed} is eating {$food}.";
    }
}

// Create instances of classes
$cat = new Animal("Whiskers", 5, "Cat");
$dog = new Dog("Buddy", 3, "Golden Retriever");

// Access class properties
echo $cat->name; // Will cause an error, as $name is a private property
echo $cat->age; // Will cause an error, as $age is a protected property
echo $cat->species; // Will output "Cat"

// Call class methods
$cat->speak(); // Will output "Hi, my name is Whiskers and I am a Cat."
$dog->speak(); // Will output "Hi, my name is Buddy and I am a Dog."
$cat->eat("fish"); // Will output "Whiskers is eating fish."
$dog->eat("bones"); // Will output "Buddy the Golden Retriever is eating bones."

// Try-catch block for handling exceptions
try {
    // Divide by zero to trigger an exception
    $result = 10 / 0;
    echo $result; // Will not be executed as the division by zero causes an exception
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
}

// Loop through an array
$fruits = array("apple", "orange", "banana");
foreach ($fruits as $fruit) {
    echo $fruit . " ";
}

// Output: apple orange banana

// Query a database using PDO
// PDO (PHP Data Objects) is a PHP extension that provides a database interface
// In this example, we will query a MySQL database named "fruit_shop"
// Variables to store the connection details
$dbhost = "localhost";
$dbuser = "username";
$dbpass = "password";

// Try-catch block for handling exceptions
try {
    // Create a PDO instance
    $pdo = new PDO("mysql:host={$dbhost};dbname=fruit_shop", $dbuser, $dbpass);
    
    // Prepare and execute a query
    $stmt = $pdo->prepare("SELECT * FROM fruits WHERE price < :price");
    $stmt->bindParam(":price", $price);
    $price = 5.00;
    $stmt->execute();
    
    // Get and display the results
    $result = $stmt->fetchAll();
    foreach ($result as $row) {
        echo $row['name'] . " - $" . $row['price'];
    }
} catch (PDOException $e) {
    // Display error message
    echo "Error: " . $e->getMessage();
}

// Output: Apple - $1.99 Orange - $2.50 Banana - $3.00