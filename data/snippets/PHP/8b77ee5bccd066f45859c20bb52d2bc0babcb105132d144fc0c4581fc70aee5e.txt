<?php

// Example of a complex code snippet in PHP

// Function to perform a merge sort algorithm on an array
function merge_sort($arr){

    // If array contains only one element, return it
    if (count($arr) == 1) return $arr;

    // Find the middle index of the array
    $mid = (int) count($arr)/2;

    // Divide the array into two subarrays
    $left = array_slice($arr, 0, $mid);
    $right = array_slice($arr, $mid);

    // Recursively call the merge_sort function on the subarrays
    $left = merge_sort($left);
    $right = merge_sort($right);

    // Merge the sorted subarrays back into one sorted array
    return merge($left, $right);
}

// Function to merge two sorted arrays
function merge($left, $right){
    $result = array();  // Initialize an empty array to hold the merged elements
    $i = 0;  // Index for the left array
    $j = 0;  // Index for the right array

    // Iterate through both arrays
    while ($i < count($left) && $j < count($right)){
        // Compare the elements at current index in both arrays
        // Add the smaller element to the result array
        if($left[$i] < $right[$j]){
            $result[] = $left[$i];
            $i++;
        }
        else{
            $result[] = $right[$j];
            $j++;
        }
    }

    // Add any remaining elements from the left array
    while ($i < count($left)){
        $result[] = $left[$i];
        $i++;
    }

    // Add any remaining elements from the right array
    while ($j < count($right)){
        $result[] = $right[$j];
        $j++;
    }

    // Return the sorted merged array
    return $result;
}

// Generate an array with random integers
$arr = array(9,2,5,4,1,8,3,7,10,6);

// Print the original array
echo "Original array: ";
print_r($arr);

// Call the merge_sort function on the array
$arr = merge_sort($arr);

// Print the sorted array
echo "Sorted array: ";
print_r($arr);

?>