<?php

// Define a parent class
class ParentClass {
  // Define a private property
  private $privateProperty;

  // Define a protected property
  protected $protectedProperty;

  // Define a public property
  public $publicProperty;

  // Define a constructor
  public function __construct($private, $protected, $public) {
    $this->privateProperty = $private;
    $this->protectedProperty = $protected;
    $this->publicProperty = $public;
  }

  // Define a private method
  private function privateMethod() {
    // Do something
    return "Private method called";
  }

  // Define a protected method
  protected function protectedMethod() {
    // Do something
    return "Protected method called";
  }

  // Define a public method
  public function publicMethod() {
    // Access private property
    echo $this->privateProperty . "\n";

    // Access protected property
    echo $this->protectedProperty . "\n";

    // Access public property
    echo $this->publicProperty . "\n";

    // Call private method
    echo $this->privateMethod() . "\n";

    // Call protected method
    echo $this->protectedMethod() . "\n";

    // Do something else
    return "Public method called";
  }
}

// Define a child class that inherits from ParentClass
class ChildClass extends ParentClass {
  // Override the public property
  public $publicProperty = "Overridden public property";

  // Override the protected method
  protected function protectedMethod() {
    // Do something different
    return "Overridden protected method called";
  }
}

// Create an instance of ParentClass
$parentInstance = new ParentClass('Private property', 'Protected property', 'Public property');

// Call the public method of ParentClass
echo $parentInstance->publicMethod() . "\n";

// Create an instance of ChildClass
$childInstance = new ChildClass('Private property', 'Protected property', 'Public property');

// Call the public method of ChildClass
echo $childInstance->publicMethod() . "\n";

// Check if the child instance is an instance of ParentClass
if ($childInstance instanceof ParentClass) {
  // Call the protected method of ChildClass
  echo $childInstance->protectedMethod() . "\n";
}

// Check if the parent instance is an instance of ChildClass
if ($parentInstance instanceof ChildClass) {
  // This code will not run because the parent instance is not an instance of ChildClass
  echo $parentInstance->protectedMethod() . "\n";
}