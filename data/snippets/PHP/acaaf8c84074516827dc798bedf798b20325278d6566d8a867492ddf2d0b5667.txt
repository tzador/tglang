<?php

/**
 * This is a custom function that performs a merge sort on an array
 *
 * @param array $arr The input array to be sorted
 * @return array The sorted array
 */
function custom_merge_sort(array $arr) {
    // If array only has one element, it is already sorted
    if (count($arr) == 1) {
        return $arr;
    }

    // Otherwise, split the array into two halves
    $mid = (int) count($arr) / 2;
    $left = array_slice($arr, 0, $mid);
    $right = array_slice($arr, $mid);

    // Call the function recursively on the two halves
    $left = custom_merge_sort($left);
    $right = custom_merge_sort($right);

    // Merge the two sorted halves
    $sorted = array();
    $i = 0;
    $j = 0;

    // Loop through both halves and compare values
    while ($i < count($left) && $j < count($right)) {
        // If left value is smaller, add it to the sorted array and increment the left index
        if ($left[$i] < $right[$j]) {
            $sorted[] = $left[$i];
            $i++;
        } else {
            // Otherwise, add the right value to the sorted array and increment the right index
            $sorted[] = $right[$j];
            $j++;
        }
    }

    // Add any remaining values from the left half to the sorted array
    while ($i < count($left)) {
        $sorted[] = $left[$i];
        $i++;
    }

    // Add any remaining values from the right half to the sorted array
    while ($j < count($right)) {
        $sorted[] = $right[$j];
        $j++;
    }

    // Return the sorted array
    return $sorted;
}

// Example usage
$arr = array(5, 2, 8, 4, 1, 9, 3);
$sorted_arr = custom_merge_sort($arr);
print_r($sorted_arr);