<?php

// This code snippet is a PHP class that implements a binary search algorithm.

class BinarySearch {

  /**
  * @var array $arr The sorted array to be searched.
  */
  private $arr;

  /**
  * @var int $low The lowest index to start searching from.
  */
  private $low;

  /**
  * @var int $high The highest index to search up to.
  */
  private $high;

  /**
  * @param array $arr The array to be searched.
  * @param $low The lowest index to start searching from.
  * @param $high The highest index to search up to.
  */
  public function __construct($arr, $low, $high) {
    $this->arr = $arr;
    $this->low = $low;
    $this->high = $high;
  }

  /**
  * @param int $target The value to search for.
  * @return int|bool The index of the target if found, false if not found.
  */
  public function search($target) {
    // Loop through the array while the low index is less than or equal to the high index.
    while ($this->low <= $this->high) {
      // Calculate the middle index.
      $mid = floor(($this->low + $this->high) / 2);

      // If the middle element is equal to the target, return its index.
      if ($this->arr[$mid] == $target) {
        return $mid;
      }

      // If the middle element is greater than the target, decrease the high index.
      elseif ($this->arr[$mid] > $target) {
        $this->high = $mid - 1;
      }

      // If the middle element is less than the target, increase the low index.
      else {
        $this->low = $mid + 1;
      }
    }

    // If the target is not found, return false.
    return false;
  }
}

// Sample usage:
$arr = [2, 6, 12, 23, 35, 47, 50];
$bs = new BinarySearch($arr, 0, count($arr) - 1);
echo $bs->search(35); // Output: 4