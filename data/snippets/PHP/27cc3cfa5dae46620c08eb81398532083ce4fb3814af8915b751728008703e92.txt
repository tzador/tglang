<?php
/**
 * This is a multi-line comment in PHP
 * It is used to provide a description or documentation for your code
 */

// This is a single line comment in PHP
// It is used to provide a short explanation for your code

// Variables can store data values like strings, numbers or booleans
// In PHP, variables start with a '$' sign, followed by a name of your choice
// Strings can be defined using single or double quotes
// Numbers can be integers or floats
// Booleans can only be true or false
$name = "John";
$age = 25;
$isStudent = true;

// Arrays are used to store multiple values in a single variable
// They can hold different types of data like numbers, strings, or even other arrays
// In PHP, arrays can be defined using the 'array()' function or using square brackets
$cars = array("BMW", "Mercedes", "Audi");
$fruits = ["Apple", "Banana", "Orange"];

// Functions are reusable blocks of code that perform a specific task
// They can take in parameters (inputs) and return a result (output)
// In PHP, functions are defined using the 'function' keyword followed by the function name and parameters
// The curly braces '{ }' are used to enclose the code block
function calculateSum($num1, $num2) {
    $sum = $num1 + $num2;
    return $sum;
}

// Loops are used to repeatedly execute a block of code
// There are different types of loops like for, while, and foreach loops
// In PHP, for loops have a starting point (initialization), a condition, and an increment/decrement statement
// The code block inside the curly braces is executed as long as the condition is true
for ($i = 0; $i < 5; $i++) {
    echo $i; // Outputs 0, 1, 2, 3, 4
}

// Conditional statements are used to make decisions based on different conditions
// They enable the program to execute different code blocks based on the specified condition
// In PHP, if/else statements follow the same structure as in most programming languages
if ($age > 18) {
    echo "You are an adult";
} else {
    echo "You are a minor";
}

// Classes and objects are used to create custom data types in PHP
// A class is like a blueprint for creating objects
// Objects have properties (variables) and methods (functions)
class Car {
    public $color;
    private $price;

    // The constructor method is called when an object is created from a class
    // It is used to initialize object properties
    // Properties can be accessed using the '->' operator
    public function __construct($color, $price) {
        $this->color = $color;
        $this->price = $price;
    }

    // Getter and setter methods are used to control the access to private properties
    // They can be used to validate the input before assigning a value to the property
    public function getPrice() {
        return $this->price;
    }

    public function setPrice($price) {
        if ($price > 0) {
            $this->price = $price;
        }
    }

    // Methods can also take in parameters and return a result
    // They can be accessed using the '->' operator on an object
    public function upgradeColor($newColor) {
        $this->color = $newColor;
    }
}

// An object is created from the Car class, using the 'new' keyword and passing in the required arguments to the constructor
$myCar = new Car("Red", 25000);

// The object's properties can be accessed using the '->' operator
echo $myCar->color; // Outputs "Red"

// Methods can also be called on an object using the '->' operator
// The return value can be saved in a variable or used in further calculations
$newPrice = $myCar->getPrice();
$upgrade = $myCar->upgradeColor("Blue");
?>