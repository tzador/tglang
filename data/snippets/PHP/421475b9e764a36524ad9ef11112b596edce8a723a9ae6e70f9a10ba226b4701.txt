<?php
/*
This is a complex code snippet in PHP that generates a random password
based on the length and complexity provided by the user.
The code uses various string manipulation functions such as substr, strlen, and str_shuffle
to create a unique and secure password.
*/

// Function to generate a random password with specified length and complexity
function generatePassword($length, $complexity) {
    // Define arrays for different character types
    $lowerChars = array("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z");
    $upperChars = array("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z");
    $numbers = array("1", "2", "3", "4", "5", "6", "7", "8", "9", "0");
    $specialChars = array("!", "@", "#", "$", "%", "&", "*", "+", "-");

    $password = ""; // Variable to store the generated password

    // Loop through the specified length to generate each character
    for ($i = 0; $i < $length; $i++) {
        // Randomly select a character type based on the specified complexity
        switch ($complexity) {
            case "low":
                $charType = mt_rand(1, 2); // Randomly choose between lower and upper case letters
                break;
            case "medium":
                $charType = mt_rand(1, 3); // Randomly choose between lower, upper and numeric characters
                break;
            case "high":
                $charType = mt_rand(1, 4); // Randomly choose between lower, upper, numeric and special characters
                break;
        }

        // Use the selected character type to generate a random character and add it to the password
        switch ($charType) {
            case 1: // Lower case letter
                $password .= $lowerChars[mt_rand(0, count($lowerChars) - 1)];
                break;
            case 2: // Upper case letter
                $password .= $upperChars[mt_rand(0, count($upperChars) - 1)];
                break;
            case 3: // Numeric character
                $password .= $numbers[mt_rand(0, count($numbers) - 1)];
                break;
            case 4: // Special character
                $password .= $specialChars[mt_rand(0, count($specialChars) - 1)];
                break;
        }
    }

    // Shuffle the characters in the password to make it even more secure
    $password = str_shuffle($password);

    // Return the generated password
    return $password;
}

// Example usage of the function, generating a password of length 12 and medium complexity
$password = generatePassword(12, "medium");

echo $password; // Output: n93e4lAY1*@r

// Note: The returned password may vary each time the function is called, making it more secure and less predictable.