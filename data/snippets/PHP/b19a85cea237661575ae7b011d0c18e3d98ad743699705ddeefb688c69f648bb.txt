<?php
// Define a function to check if a given number is prime, using the Sieve of Eratosthenes algorithm
// Accepts a positive integer as input
function isPrime($num) {
    // Check if input is a positive integer
    if (!is_int($num) || $num <= 0) {
        return false;
    }
    // Set up an array of bools, with each index representing a number
    // Initialize all values to true, indicating that all numbers are potentially prime
    $sieve = array_fill(0, $num + 1, true);
    // 0 and 1 are not considered prime numbers, so set their values in the array to false
    $sieve[0] = $sieve[1] = false;
    // Iterate through the array, starting at 2 (the first prime number)
    for ($i = 2; $i <= $num; $i++) {
        // If the current index is marked as true, it is a prime number
        if ($sieve[$i] === true) {
            // Mark all multiples of the current prime number as false, since they are not prime
            // Start at the square of the prime number, as all smaller multiples will have already been marked as false
            for ($j = $i * $i; $j <= $num; $j += $i) {
                $sieve[$j] = false;
            }
        }
    }
    // The input number is prime if its value in the array is still true
    return $sieve[$num];
}

// Test the function with some sample inputs
echo isPrime(13); // Output: true
echo isPrime(31); // Output: true
echo isPrime(167); // Output: true
echo isPrime(100); // Output: false