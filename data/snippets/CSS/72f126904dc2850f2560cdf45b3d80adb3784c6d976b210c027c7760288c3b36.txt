/* This is a complex code snippet in CSS that creates a responsive grid layout */
.container{
  display: grid; /* Specifies that the element is a grid container */
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); /* Creates columns with a minimum width of 300px and a maximum of 1 fraction unit, filling up the available space */
  grid-gap: 20px; /* Specifies the gap between grid items */
  padding: 20px; /* Adds padding around the grid items */
  box-sizing: border-box; /* Ensures that the padding and border are included in the total width and height of the element */
}

.item{
  grid-column: span 3; /* Specifies the number of columns the item should span */
  grid-row: span 2; /* Specifies the number of rows the item should span */
}

@media screen and (max-width: 600px){ /* Media query for screens with a maximum width of 600px */
  .container{
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); /* Reduces the column width and retains the 1fr maximum */
    grid-gap: 10px; /* Reduces the gap between items */
    padding: 10px; /* Reduces the padding around items */
  }

  .item{
    grid-column: span 2; /* Reduces the number of columns the item spans */
    grid-row: span 1; /* Reduces the number of rows the item spans */
  }
}