/* This is a complex code snippet in CSS that creates a responsive grid layout. */

/* First, we create a container for our grid using the 'grid-container' class. The 'display' property is set to 'grid' to create a grid layout.
We also specify the number of columns and their widths using the 'grid-template-columns' property. */

.grid-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

/* Next, we create a class for our grid items, specifying how many columns each item should span using the 'grid-column' property.
In this example, the first item will span all four columns, the second item will span two columns, and the third item will span one column. */

.grid-item-1 {
  grid-column: 1 / span 4;
}
.grid-item-2 {
  grid-column: 3 / span 2;
}
.grid-item-3 {
  grid-column: 4 / span 1;
}

/* To make our grid responsive, we set the 'grid-template-columns' property to automatically adjust the number and width of columns depending on the screen size.
In this example, we use the 'repeat' function with different parameters for different screen sizes. */

@media screen and (max-width: 768px) {
  .grid-container {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media screen and (max-width: 480px) {
  .grid-container {
    grid-template-columns: 1fr;
  }
}

/* Lastly, we add some styling to our grid items, including a padding and border to create clear visual separation between items. */

.grid-item {
  padding: 20px;
  border: 1px solid black;
}

/* The result is a responsive grid layout that adjusts to fit different screen sizes, making it ideal for creating responsive website designs. */