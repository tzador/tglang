/* This is a complex code snippet that creates a responsive grid layout using CSS.
It includes media queries, flexbox, and various layout styles for different screen sizes. */

/* Defining variables for grid column widths using CSS calc function */
:root {
  --col-width: 22%;
  --gutter: 6%;
}

/* Creating a series of media queries for different screen sizes */
@media screen and (max-width: 768px) {
  /* For screens smaller than 768px, set column width to 100% and remove gaps between columns */
  .grid {
    grid-template-columns: 100%;
    grid-gap: 0;
  }
}

@media screen and (min-width: 768px) and (max-width: 992px) {
  /* For screens between 768px and 992px, set column width to 66% and keep gaps between columns */
  .grid {
    grid-template-columns: repeat(3, 22%);
    grid-gap: 6%;
  }
}

@media screen and (min-width: 992px) and (max-width: 1200px) {
  /* For screens between 992px and 1200px, set column width to 50% and keep gaps between columns */
  .grid {
    grid-template-columns: repeat(4, 22%);
    grid-gap: 6%;
  }
}

@media screen and (min-width: 1200px) {
  /* For screens larger than 1200px, set column width to 25% and keep gaps between columns */
  .grid {
    grid-template-columns: repeat(6, 22%);
    grid-gap: 6%;
  }
}

/* Creating a flexbox container for the grid items */
.grid {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
}

/* Styling the grid items */
.grid-item {
  /* Setting the width of the items to the defined variable for column width */
  width: var(--col-width);
  /* Adding spacing between the items using the calc function with the defined gutter variable */
  margin: calc(var(--gutter)/2);
}

/* Add responsive behavior for grid items */
@media screen and (max-width: 550px) {
  /* For screens smaller than 550px, set column width to 90% to better fit smaller screens */
  .grid-item {
    width: 90%;
  }
}

@media screen and (max-width: 400px) {
  /* For screens smaller than 400px, set column width to 80% and align items to the left */
  .grid-item {
    width: 80%;
    align-items: start;
  }
}