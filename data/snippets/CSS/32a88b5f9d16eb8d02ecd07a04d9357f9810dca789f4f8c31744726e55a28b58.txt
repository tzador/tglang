/* This code snippet is a complex CSS grid layout
that creates a responsive grid with 3 columns and 4 rows, 
where the middle row takes up two columns and the outer 
rows each take up one column. */ 

.my-grid {
  display: grid; /* sets display property to grid */
  grid-template-columns: repeat(3, 1fr); /* creates 3 equal-sized columns */
  grid-template-rows: repeat(4, 1fr); /* creates 4 equal-sized rows */
  grid-gap: 20px; /* adds a 20px gap between grid cells */

  /* The following unique grid areas are defined 
  to specify where each grid item will be placed 
  in the grid layout. */

  grid-template-areas: 
    "header header header" /* places header in the top row, spanning all 3 columns */
    ". content ." /* places content in the middle row, spanning 2 columns */
    "footer footer footer"; /* places footer in the bottom row, spanning all 3 columns */
}

/* The grid items are selected by class and 
assigned specific grid-area values, 
which correspond to the named grid areas 
defined in the grid container. */

.header {
  grid-area: header; /* assigns header to the header grid area */
}

.content {
  grid-area: content; /* assigns content to the content grid area */
}

.footer {
  grid-area: footer; /* assigns footer to the footer grid area */
}

/* The following media query specifies a responsive 
grid layout that changes to two columns when the 
screen size is smaller than 768px. */

@media only screen and (max-width: 768px) {
  .my-grid {
    grid-template-columns: repeat(2, 1fr); /* changes to 2 equal-sized columns */
    grid-template-rows: repeat(4, 1fr); /* keeps 4 equal-sized rows */
    grid-gap: 10px; /* decreases the gap between grid cells to 10px */

    grid-template-areas: 
      "header header" /* header now spans 2 columns */
      "content content" /* content now also spans 2 columns */
      "footer footer"; /* footer still spans 2 columns */
  }
}