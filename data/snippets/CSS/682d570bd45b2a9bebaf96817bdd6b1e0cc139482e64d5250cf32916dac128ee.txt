/* This code snippet is a complex CSS grid layout with responsive design */

.container {
  display: grid; /* Defines the element as a CSS grid container */
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Sets the columns to automatically fit the available space, with a minimum of 300px and a maximum of 1fr (1 fraction of the available space) */
  grid-template-rows: 100px 300px; /* Sets the rows to be 100px and 300px in height */
  gap: 20px; /* Adds a 20px gap between grid items */
  grid-template-areas: /* Defines the grid layout by assigning grid areas to each item */
    "header header"
    "sidebar main"
    "footer footer";
}

.header {
  grid-area: header; /* Places the element in the "header" grid area */
}

.sidebar {
  grid-area: sidebar; /* Places the element in the "sidebar" grid area */
}

.main {
  grid-area: main; /* Places the element in the "main" grid area */
}

.footer {
  grid-area: footer; /* Places the element in the "footer" grid area */
}

@media screen and (max-width: 768px) { /* Media query for smaller screen sizes */
  .container {
    grid-template-columns: 1fr; /* Sets the number of columns to 1 */
    grid-template-rows: auto; /* Sets the rows to automatically adjust to the content */
    grid-template-areas: /* Redefines the grid layout for smaller screens */
      "header"
      "main"
      "sidebar"
      "footer";
  }
}