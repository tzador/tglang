/* This code snippet is a complex CSS layout using the grid template feature. 
It creates a responsive layout with multiple sections and columns. */ 

.container {
    /* Defines the grid template layout with 4 rows and 3 columns */ 
    display: grid;
    grid-template-rows: repeat(4, 1fr);
    grid-template-columns: repeat(3, 1fr);
    /* Sets the width and height of the grid to 100% of the container's size */ 
    width: 100%;
    height: 100%;
    /* Specifies the gap between grid items */ 
    grid-gap: 20px;
    /* Sets the border color and style of each grid item */ 
    border: 2px solid black;
    /* Sets the background color of odd numbered columns */ 
    background-color: #eee;
}

/* Selects the first row of the grid and sets the height to be twice the height of other rows */ 
.container > :nth-child(1) {
   grid-row: 1 / 3;
}

/* Selects the first two columns in the first row and sets the width to be twice the width of other columns */ 
.container > :nth-child(-n + 2) {
   grid-column: 1 / 3;
}

/* Selects the last item in the grid and spans it across all columns */ 
.container > :last-child {
   grid-column: 1 / -1;
}

/* Defines the media query for smaller screens, changing the layout to a single column */ 
@media only screen and (max-width: 600px) {
    .container {
       grid-template-rows: repeat(8, 1fr);
       grid-template-columns: none;
    }
}