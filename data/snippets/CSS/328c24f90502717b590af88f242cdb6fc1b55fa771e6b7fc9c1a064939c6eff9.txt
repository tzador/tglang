/* This is a complex CSS code snippet that demonstrates the use of media queries to create a responsive layout */

/* The code starts by defining the default styles for the webpage */
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  color: #333;
}

.container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 20px;
}

/* Now we define the styles for larger screens using a min-width media query */
@media only screen and (min-width: 768px) {
  body {
    font-size: 1.2em;
  }

  .container {
    max-width: 1200px;
    padding: 50px;
  }
}

/* Next, we define styles for medium screens using a max-width media query */
@media only screen and (max-width: 767px) {
  .container {
    max-width: 800px;
    padding: 30px;
  }
}

/* Finally, we define styles for small screens using both min-width and max-width media queries */
@media only screen and (min-width: 480px) and (max-width: 767px) {
  .container {
    max-width: 500px;
    padding: 10px;
  }
}

/* To make our layout truly responsive, we use a mobile-first approach by defining styles for small screens first */
/* This ensures that the layout will be correctly styled for all screen sizes */

/* Next, we define styles for medium screens using a min-width media query */
@media only screen and (min-width: 480px) {
  body {
    font-size: 1.1em;
  }

  .container {
    max-width: 800px;
    padding: 40px;
  }
}

/* Finally, we define styles for larger screens using a min-width media query */
@media only screen and (min-width: 768px) {
  body {
    font-size: 1.5em;
  }

  .container {
    max-width: 1200px;
    padding: 60px;
  }
}

/* This code snippet showcases how we can use media queries to make a webpage responsive on different devices */
/* By using different media queries, we can define specific styles for different screen sizes and create a seamless and optimized viewing experience for users */