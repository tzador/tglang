/*
This is a long and complex code snippet in CSS that uses multiple selectors and properties
to style a navigation bar. This can be used for creating a responsive and visually appealing
navigation menu on a website.
*/

/* 
First, we target the <nav> element and give it a class of "navbar"
to better control its style and functionality.
*/
.navbar {
  display: flex; /* Makes the elements inside the navbar appear in a single row */
  justify-content: space-between; /* Adds equal space between elements */
  align-items: center; /* Aligns the items vertically in the center */
  background-color: #000; /* Sets the background color to black */
  color: #fff; /* Sets the text color to white */
  padding: 1rem; /* Adds padding to the navbar */
  font-size: 1.2rem; /* Sets the font size to 1.2rem */
  font-weight: bold; /* Makes the text bold */
  position: fixed; /* Fixes the navbar at the top of the page */
  top: 0; /* Sets the top position to 0 */
  left: 0; /* Sets the left position to 0 */
  width: 100%; /* Sets the width of the navbar to 100% of the parent element */
  z-index: 999; /* Sets a high z-index to ensure the navbar appears on top of other elements */
}

/* 
Next, we target the <ul> element inside the navbar to style the list items and their responsive behavior
*/
.navbar ul {
  display: flex; /* Makes the list items appear in a single row */
  list-style: none; /* Removes the bullets from the list items */
  margin: 0; /* Removes the default margin */
}

/* 
Then, we target the <li> elements inside the <ul> to style each individual list item
*/
.navbar li {
  margin: 0 1rem; /* Adds margin on the left and right of the list items */
}

/* 
To create a responsive design, we use media queries to target specific screen sizes
and adjust the layout accordingly.
Here, we target screen sizes less than or equal to 768px in width and make the navbar stack on top
of each other instead of appearing in a single row.
*/
@media (max-width: 768px) {
  /* First, we hide the <ul> element inside the navbar */
  .navbar ul {
    display: none;
  }
  /* Then, we show the <ul> element and make it appear as a list when the mobile menu icon is clicked */
  .navbar ul.show {
    display: flex;
    flex-direction: column;
  }
  /* To create the mobile menu icon, we use a <div> element inside the navbar with a class of "icon" */
  .navbar .icon {
    display: block; /* Displays the element as a block */
    cursor: pointer; /* Changes the cursor to a pointer */
    font-size: 1.5rem; /* Sets the font size to 1.5rem */
    color: #fff; /* Sets the color to white */
    padding: 0.5rem; /* Adds padding to the icon */
  }
}

/*
To create a hover effect for the list items, we use the :hover pseudo-class
when the user hovers over a list item, the background color changes and the text becomes bold
*/
.navbar li:hover {
  background-color: #fff; /* Changes the background color to white when hovered */
  color: #000; /* Changes the text color to black when hovered */
  font-weight: bold; /* Makes the text bold when hovered */
}

/*
To make the links in the navbar stand out, we use the :visited pseudo-class to style visited links
*/
.navbar a:visited {
  color: #fff; /* Changes the text color to white for visited links */
}

/*
To make the active link in the navbar stand out, we use the :active pseudo-class to style active links
*/
.navbar a:active {
  color: #fff; /* Changes the text color to white for active links */
  font-weight: bold; /* Makes the text bold for active links */
}