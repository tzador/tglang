/* This is a complex code snippet in CSS that uses CSS Grid to create a responsive, multi-column layout */

/* Setting up the CSS Grid layout with 3 columns, each with equal widths */
.grid-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
}

/* Defining the start and end locations for each grid item in the first row */
.item1 {
  grid-column-start: 1;
  grid-column-end: 2;
}

.item2 {
  grid-column-start: 2;
  grid-column-end: 3;
}

.item3 {
  grid-column-start: 3;
  grid-column-end: 4;
}

/* Defining the start and end locations for each grid item in the second row */
.item4 {
  grid-column-start: 1;
  grid-column-end: 3;
}

.item5 {
  grid-column-start: 3;
  grid-column-end: 4;
}

/* Styling the grid items with a border, margin, and padding */
.item {
  border: 1px solid black;
  margin: 10px;
  padding: 10px;
}

/* Creating a breakpoint for smaller screen sizes where the grid layout will change to 2 columns with the first item spanning two columns */
@media only screen and (max-width: 600px) {
  /* Changing the grid template to 2 columns */
  .grid-container {
    grid-template-columns: 1fr 1fr;
  }

  /* Changing the start and end locations for the first item to span 2 columns */
  .item1 {
    grid-column-start: 1;
    grid-column-end: 3;
  }
}