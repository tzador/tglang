/* This is a complex CSS code snippet that uses flexbox properties to create a responsive grid layout */
.container {
    display: flex; /* Using flexbox to make the container a flex container */
    flex-wrap: wrap; /* Allowing items to wrap to next line when there is not enough space */
    justify-content: space-between; /* Distributing items evenly across the container with space between them */
    align-items: center; /* Aligning items vertically in the center */
    max-width: 100%; /* Setting a maximum width for the container */
}

.item {
    flex-basis: calc(25% - 20px); /* Calculating the width of each item based on the container width, with a 20px margin */
    margin: 10px; /* Setting a margin of 10px around each item */
    flex-grow: 1; /* Allowing items to grow and fill any available space */
    border: 1px solid black; /* Adding a 1px black border to each item */
}

@media (max-width: 600px) { /* Media query for screens with a maximum width of 600px */
    .item {
        flex-basis: calc(50% - 20px); /* Changing the width of each item to 50% of the container width with a margin of 20px */
    }
}

@media (max-width: 400px) { /* Media query for screens with a maximum width of 400px */
    .container {
        flex-direction: column; /* Changing the flex direction to column on smaller screens */
    }

    .item {
        flex-basis: calc(100% - 20px); /* Setting the width of each item to 100% of the container width with a margin of 20px */
    }
}