/* This is a code snippet that creates a complex grid layout using CSS */

/* Define variables for number of columns and column gap */
--numCols: 10;
--colGap: 20px;

/* Create a parent container with a fixed width and set display to grid */
.container {
  width: 800px;
  display: grid;

  /* Set grid template columns based on number of columns variable */
  grid-template-columns: repeat(var(--numCols), 1fr);

  /* Set grid gap to column gap variable */
  grid-gap: var(--colGap);
}

/* Create child elements and assign them to specific grid areas */
.child1 {
  grid-area: 1 / 1 / 3 / 4; /* starting row, starting column, ending row, ending column */
}

.child2 {
  grid-area: 2 / 4 / 4 / 7;
}

.child3 {
  grid-area: 1 / 7 / 3 / 10;
}

/* Style the child elements */
.child1 {
  background-color: red;
}

.child2 {
  background-color: blue;
}

.child3 {
  background-color: green;
}

/* Create a nested grid within the first child element */
.child1 .nested-grid {
  display: grid;

  /* Set grid template columns to 3 columns */
  grid-template-columns: repeat(3, 1fr);

  /* Set grid gap to 10 pixels */
  grid-gap: 10px;
}

/* Create nested grid items and assign them to specific grid areas */
.child1 .item1 {
  grid-area: 1 / 1 / 2 / 3;
}

.child1 .item2 {
  grid-area: 1 / 3 / 2 / 4;
}

.child1 .item3 {
  grid-area: 2 / 1 / 3 / 3;
}

.child1 .item4 {
  grid-area: 2 / 3 / 3 / 4;
}

/* Style the nested grid items */
.child1 .item1 {
  background-color: yellow;
}

.child1 .item2 {
  background-color: orange;
}

.child1 .item3 {
  background-color: purple;
}

.child1 .item4 {
  background-color: pink;
}