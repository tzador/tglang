/* This is a complex code snippet that demonstrates the use of CSS media queries and keyframes to create a responsive animation. */

/* First, we create a basic box element with a width and height, as well as some padding and a background color. */
.box {
    width: 200px;
    height: 200px;
    padding: 20px;
    background-color: #333;
}

/* Next, we use media queries to specify different styles for different screen sizes. The first query targets screens with a maximum width of 600px. */
@media only screen and (max-width: 600px) {
    /* Inside the media query, we change the box's width to 100px and its background color to red. */
    .box {
        width: 100px;
        background-color: red;
    }
}

/* The second media query targets screens with a minimum width of 601px and a maximum width of 900px. */
@media only screen and (min-width: 601px) and (max-width: 900px) {
    /* Inside the media query, we change the box's width to 300px and its background color to green. */
    .box {
        width: 300px;
        background-color: green;
    }
}

/* Lastly, we use keyframes to create an animation that will make the box rotate 360 degrees. */
@keyframes rotate {
    /* The animation starts at 0% with no rotation. */
    0% {
        transform: rotate(0deg);
    }
    /* The animation ends at 100% with a full 360 degree rotation. */
    100% {
        transform: rotate(360deg);
    }
}

/* We then use the animation property to apply the rotate keyframe to the box element and set the animation duration to 2 seconds. */
.box {
    animation: rotate 2s;
}

/* Finally, we add some animation properties to make the animation smooth and continuous. */
.box {
    animation-iteration-count: infinite;
    animation-timing-function: linear;
    animation-fill-mode: forwards;
    animation-direction: alternate;
}