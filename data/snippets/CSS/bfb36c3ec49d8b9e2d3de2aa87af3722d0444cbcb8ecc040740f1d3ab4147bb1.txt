/* This code snippet is an example of a complex CSS grid layout */

/* First, set up a CSS grid container */
.grid-container {
  display: grid; /* uses grid display property */
  grid-template-columns: repeat(3, minmax(200px, 1fr)); /* sets 3 equal columns with a minimum of 200px width and maximum of 1 fraction unit */
  grid-template-rows: 100px auto 100px; /* sets 3 rows with a fixed height of 100px for the top and bottom rows, and auto for the middle row which will adjust based on content */
  grid-gap: 10px; /* add a 10px gap between grid items */
  grid-template-areas: /* create a template for assigning grid areas */
    "header header header"
    "main sidebar sidebar"
    "footer footer footer";
}

/* Next, style the individual grid items using the grid-area property */
.header {
  grid-area: header; /* aligns item to the "header" grid area */
}
.main {
  grid-area: main; /* aligns item to the "main" grid area */
}
.sidebar {
  grid-area: sidebar; /* aligns item to the "sidebar" grid area */
}
.footer {
  grid-area: footer; /* aligns item to the "footer" grid area */
}

/* Lastly, add design elements to the grid items */
.header {
  background-color: #e4f9ee; /* adds a light green background color */
  padding: 20px; /* adds 20px of padding around the item */
}
.main {
  background-color: #f9f5e4; /* adds a light yellow background color */
  padding: 20px; /* adds 20px of padding around the item */
}
.sidebar {
  background-color: #e4f9f9; /* adds a light blue background color */
  padding: 20px; /* adds 20px of padding around the item */
}
.footer {
  background-color: #f9e4e4; /* adds a light pink background color */
  padding: 20px; /* adds 20px of padding around the item */
}