/* This code snippet demonstrates the use of CSS grids to create a responsive website layout */
.container {
  display: grid; /* Use display property with value grid to create a grid container */
  grid-template-columns: repeat(3, 1fr); /* Create 3 columns with fractional units using the repeat function */
  grid-template-rows: 100px 100px auto; /* Create 3 rows - fixed height of 100px for the first 2 rows, and auto for the third row */
  grid-gap: 20px; /* Create 20px gap between grid items */
}

.navbar {
  grid-column: 1 / 4; /* Place this element in the first column and span across all 3 columns */
  grid-row: 1; /* Place this element in the first row */
}

.sidebar {
  grid-column: 1 / 2; /* Place this element in the first column */
  grid-row: 2 / 4; /* Span across the second and third rows */
}

.main-content {
  grid-column: 2 / 4; /* Place this element in the second column and span across the last 2 columns */
  grid-row: 2 / 4; /* Span across the second and third rows */
}

.footer {
  grid-column: 2 / 4; /* Place this element in the second column and span across the last 2 columns */
  grid-row: 4; /* Place this element in the fourth row */
}

@media only screen and (max-width: 600px) {
  /* For smaller screens, change the grid template to a single column layout */
  .container {
    grid-template-columns: repeat(1, 1fr);
    grid-template-rows: auto;
  }
  
  /* Change the grid placement of elements for a more suitable layout on small screens */
  .main-content {
    grid-column: 1 / 2;
    grid-row: 2;
  }

  .footer {
    grid-column: 1 / 2;
    grid-row: 3;
  }

  .sidebar {
    grid-column: 1 / 2;
    grid-row: 4;
  }
}