/* This is a CSS grid layout with three columns and four rows
It uses a combination of grid-template-columns and grid-template-rows properties
to define the sizes of each column and row respectively */

.grid-container {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr; /* Defines three columns, with the middle one being twice the size of the others */
  grid-template-rows: 100px 200px 150px 1fr; /* Defines four rows, with the last one taking up the remaining space */
}

/* This is a grid item that will be placed in the first row and first column */
.grid-item-1 {
  grid-row: 1;
  grid-column: 1;
  /* The grid-row and grid-column properties allow you to place elements in specific cells of the grid */
}

/* This is a grid item that will span the third and fourth rows, and second and third columns */
.grid-item-2 {
  grid-row: 3 / span 2; /* The span keyword allows you to specify how many rows or columns an element should span */
  grid-column: 2 / span 2;
}

/* This is a grid item that will be placed in the last row and last column, and also be aligned to the end of the column */
.grid-item-3 {
  grid-row: 4;
  grid-column: 3;
  justify-self: end; /* The justify-self property allows you to align the element within its grid cell */
}

/* This is a grid item that will be placed in the second row and third column, and also be aligned to the center of the row */
.grid-item-4 {
  grid-row: 2;
  grid-column: 3;
  justify-self: center;
}

/* This is a grid item that will be placed in the third row and second column, and also be aligned to the start of the row */
.grid-item-5 {
  grid-row: 3;
  grid-column: 2;
  justify-self: start;
}