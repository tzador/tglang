/* This code snippet is an example of a responsive grid layout in CSS */ 

.grid-container { 
  display: grid; /* sets the display property to 'grid' */ 
  grid-template-columns: 1fr 50% 2fr; /* defines the number of columns and their relative widths */ 
  grid-template-rows: repeat(3, 100px); /* defines the number of rows and their height */ 
  grid-gap: 20px; /* sets the space between grid items */ 
  grid-template-areas: /* defines the layout of the grid items */ 
    "header header header" 
    "main main sidebar" 
    "footer footer footer"; 
} 

.header { 
  grid-area: header; /* positions the grid item in the 'header' area */ 
} 

.main { 
  grid-area: main; /* positions the grid item in the 'main' area */ 
} 

.sidebar { 
  grid-area: sidebar; /* positions the grid item in the 'sidebar' area */ 
} 

.footer { 
  grid-area: footer; /* positions the grid item in the 'footer' area */ 
} 

@media only screen and (max-width: 600px) { /* applies the following styles for screens with a maximum width of 600px */ 
  .grid-container { 
    grid-template-columns: 1fr; /* changes the number of columns to 1 */
    grid-template-rows: repeat(4, 100px); /* changes the number of rows to 4 */
    grid-gap: 10px; /* reduces the space between grid items */ 
    grid-template-areas: /* redefines the layout of the grid items */ 
      "header" 
      "main" 
      "sidebar" 
      "footer"; 
  } 

  .header, .main, .sidebar, .footer { 
    grid-area: auto; /* repositions the grid items to the default auto-placement */ 
  } 
}