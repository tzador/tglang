/* This is a complex CSS code snippet that uses multiple CSS selectors and properties */
/* It creates a multi-column layout and styles it with various effects */

/* Set the container element to be a flex container */
.container {
  display: flex;
}

/* Use the flex-wrap property to wrap the child elements into multiple rows */
.container {
  flex-wrap: wrap;
}

/* Select and style the child elements based on their position in the flex container using the :nth-child() selector */
/* In this example, the first child element will have a width of 30%, while the second and third child elements will have a width of 70% */
.container :nth-child(1) {
  width: 30%;
}

.container :nth-child(2),
.container :nth-child(3) {
  width: 70%;
}

/* Add some spacing between the child elements using the margin property */
.container div {
  margin: 10px;
}

/* Style the child elements using the box-shadow property to create a drop shadow effect */
.container div {
  box-shadow: 2px 2px 5px grey;
}

/* Use the flex-basis property to set the initial width of the child elements */
/* In this example, the first child element will have an initial width of 100px, while the second and third child elements will have an initial width of 200px */
.container :nth-child(1) {
  flex-basis: 100px;
}

.container :nth-child(2),
.container :nth-child(3) {
  flex-basis: 200px;
}

/* Style the child elements using the border property to create a border around them */
.container div {
  border: 2px solid black;
}

/* Use the justify-content property to align the child elements horizontally within the flex container */
.container {
  justify-content: center;
}

/* Use the align-items property to align the child elements vertically within the flex container */
.container {
  align-items: center;
}

/* Use the flex-grow property to allow the child elements to grow and fill any remaining space within the flex container equally */
.container :nth-child(1),
.container :nth-child(2),
.container :nth-child(3) {
  flex-grow: 1;
}