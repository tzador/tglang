/*This is a complex code snippet in CSS that creates a responsive grid layout*/

/*First, we set the parent container to display as a flex container with a column direction and wrap the items when needed
We also set the height and margin of the container*/
.container {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  height: 500px;
  margin: 20px;
}

/*We then set the child elements (the items) to take up equal space within the container
We also set a 20px margin and a 10px padding on the items*/
.item {
  flex: 1;
  margin: 20px;
  padding: 10px;
}

/*Next, we use media queries to make the grid responsive based on the screen width
When the screen width is equal to or smaller than 600px, we set the item width to 100% and remove the margin and padding
When the screen width is between 600px and 900px, we set the item width to 50%
When the screen width is greater than 900px, we set the item width to 33.33%*/
@media screen and (max-width: 600px) {
  .item {
    width: 100%;
    margin: 0;
    padding: 0;
  }
}

@media screen and (min-width: 601px) and (max-width: 900px) {
  .item {
    width: 50%;
  }
}

@media screen and (min-width: 901px) {
  .item {
    width: 33.33%;
  }
}

/*Lastly, we use the :nth-child() selector to set the background color of every second item to be different
We also add a hover effect where the background color changes to a lighter shade*/
.item:nth-child(even) {
  background-color: #ccc;
}

.item:hover {
  background-color: #e5e5e5;
}