/*
This is a complex code snippet in CSS that demonstrates the use of
flexbox to create a responsive grid layout with multiple columns and
rows.
*/

.container {
    /* Create a flex container */
    display: flex;

    /* Set the flex direction to column */
    flex-direction: column;

    /* Set the flex wrap property to wrap elements onto new lines */
    flex-wrap: wrap;

    /* Set the height of the container */
    height: 500px;

    /* Set the padding of the container */
    padding: 20px;

    /* Set the border of the container */
    border: 1px solid #000;
}

.item {
    /* Create a flex item */
    flex: 1 1 200px;

    /* Set the margin of the item */
    margin: 10px;

    /* Set the background color of the item */
    background-color: #ccc;
}

/* Responsive layout for different screen sizes */
/* For screens with a maximum width of 600px */
@media screen and (max-width: 600px) {
     /* Set the flex direction to row and wrap elements onto new lines */
    .container {
        flex-direction: row;
        flex-wrap: wrap;
    }

    /* Set the height of the items to be equal */
    .item {
        height: 100px;
    }

    /* Set the width of the items to be equal */
    .item {
        width: 50%;
    }
}

/* For screens with a maximum width of 1200px */
@media screen and (max-width: 1200px) {
    /* Set the width of the items to be equal */
    .item {
        width: 30%;
    }
}

/* For screens with a minimum width of 1200px */
@media screen and (min-width: 1200px) {
    /* Set the width of the items to be equal */
    .item {
        width: 25%;
    }
}

/* Set box-sizing property to border-box for all elements */
* {
    box-sizing: border-box;
}