/* This code snippet creates a complex grid layout with responsive design */

.grid-container {
  display: grid; /* Creates a grid container */
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Defines columns with a minimum width of 200px and a maximum width of 1 fraction of the available space, auto-fitting them into the container */
  grid-template-rows: 100px repeat(3, minmax(150px, 1fr)); /* Defines rows with a fixed height of 100px for the first row, and a minimum height of 150px for the next 3 rows, and auto-fitting the remaining rows */
  grid-gap: 20px; /* Adds a 20px gap between grid items */
}

.grid-item {
  display: flex; /* Displays items as flex items */
  flex-direction: column; /* Aligns items in a vertical column */
  justify-content: center; /* Centers items vertically */
  align-content: center; /* Centers items horizontally */
  background-color: #f2f2f2; /* Sets item background color */
}

/* Breakpoints for responsive design */

@media only screen and (max-width: 768px) { /* For screens up to 768px wide */
  .grid-container {
    grid-template-columns: repeat(2, minmax(200px, 1fr)); /* Changes grid columns to 2 columns of 200px minimum width and equal distribution of available space */
    grid-template-rows: 150px repeat(3, minmax(150px, 1fr)); /* Changes row heights to 150px for the first row and repeated minimum heights of 150px for the remaining rows */
  }
}

@media only screen and (max-width: 480px) { /* For screens up to 480px wide */
  .grid-container {
    grid-template-columns: 1fr; /* Changes grid columns to 1 column with equal distribution of available space */
    grid-template-rows: repeat(4, 150px); /* Changes row heights to a fixed height of 150px for all rows */
    grid-gap: 10px; /* Reduces the gap between grid items to 10px */
  }

  .grid-item {
    flex-direction: row; /* Aligns items in a horizontal row for smaller screens */
  }
}