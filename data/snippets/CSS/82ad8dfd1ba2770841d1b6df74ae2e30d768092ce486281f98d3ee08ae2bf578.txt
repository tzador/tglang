/* This is a CSS code snippet that creates a complex and interactive grid layout */

.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* Creates 3 columns with equal width */
  grid-template-rows: repeat(3, 1fr); /* Creates 3 rows with equal height */
  grid-gap: 10px; /* Creates a space of 10px between grid items */
  grid-auto-flow: dense; /* Allows items to automatically fill in the grid */
  grid-auto-rows: minmax(50px, auto); /* Sets the minimum and maximum height for grid items */
}

.item {
  grid-column: span 2; /* Specifies that item takes up 2 columns of the grid */
  grid-row: span 2; /* Specifies that item takes up 2 rows of the grid */
}

.item:nth-child(3) {
  grid-column: 2 / 4; /* Specifies that item starts at column 2 and ends at column 4 */
}

.item:nth-child(5) {
  grid-row: 2 / 4; /* Specifies that item starts at row 2 and ends at row 4 */
}

.item:nth-child(even) {
  background-color: blue; /* Sets background color to blue for even elements */
}

.item:nth-child(odd) {
  background-color: red; /* Sets background color to red for odd elements */
}

.item:hover {
  transform: scale(1.2); /* Increases the size of item on hover */
  cursor: pointer;
}

@media screen and (max-width: 600px) {
  .container {
    grid-template-columns: repeat(2, 1fr); /* Changes grid to 2 columns on screens smaller than 600px */
    grid-template-rows: repeat(5, 1fr); /* Changes grid to 5 rows on screens smaller than 600px */
  }

  .item {
    grid-column: auto; /* Removes the specified column span and allows item to automatically fill in */
    grid-row: auto; /* Removes the specified row span and allows item to automatically fill in */
  }

  .item:nth-child(odd) {
    background-color: green; /* Changes background color to green for odd elements on smaller screens  */
  }

  .item:nth-child(even) {
    background-color: yellow; /* Changes background color to yellow for even elements on smaller screens  */
  }
}