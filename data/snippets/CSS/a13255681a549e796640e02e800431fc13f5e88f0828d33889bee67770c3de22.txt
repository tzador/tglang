/* This is a complex CSS code snippet that creates a responsive grid layout */
.container {
  display: grid; /* Specifies that the container is a grid */
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Creates a grid with columns that automatically resize based on available space */
  grid-gap: 20px; /* Sets the gap between grid items */
  grid-auto-rows: 200px; /* Sets the default height of grid rows */
  justify-content: center; /* Horizontally centers the grid items */
  align-content: space-evenly; /* Vertically spaces out the grid items */
}

.item {
  grid-column: span 2; /* Specifies the item to take up 2 columns in the grid */
  grid-row: 1 / span 3; /* Specifies the item to take up 3 rows in the grid starting from the first row */
  background-color: #abcdef; /* Sets a background color for the grid item */
  justify-self: start; /* Aligns the grid item to the start of its grid area */
  align-self: end; /* Aligns the grid item to the end of its grid area */
}

@media only screen and (max-width: 600px) {
  .container {
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); /* Changes the grid column size to 100px for smaller screens */
    grid-auto-rows: 150px; /* Changes the grid row height to 150px for smaller screens */
    justify-content: space-between; /* Horizontally spaces out the grid items for smaller screens */
    align-content: center; /* Vertically centers the grid items for smaller screens */
  }
}