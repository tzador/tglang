/* This is a CSS code snippet that uses a combination of flexbox and responsive design to create a complex layout. */

/* First, we set the base styling for our layout container */
.container {
  display: flex; /* sets the layout mode to flexbox */
  flex-wrap: wrap; /* allows the flex items to wrap to the next line if needed */
  justify-content: space-between; /* evenly distribute the flex items along the main-axis with space in between */
  align-items: center; /* vertically align the flex items within the container */
  width: 100%; /* sets the width of the container to 100% of the viewport width */
  max-width: 1200px; /* sets a maximum width for the container to ensure it doesn't exceed the width of larger screens */
}

/* Next, we style the individual flex items within the container */
.item {
  flex: 1 1 25%; /* sets the flex-grow, flex-shrink, and flex-basis properties to create a flexible and responsive layout */
  margin: 10px; /* adds some space between each item */
  text-align: center; /* centers the content within each item */
}

/* We can also use media queries to adjust the layout for different screen sizes */
@media only screen and (max-width: 768px) {
  .container {
    flex-direction: column; /* changes the layout to a single column for smaller screens */
    align-items: stretch; /* causes the items to stretch to full width */
  }

  .item {
    flex: 1 1 100%; /* changes the flex properties to create a 100% width item */
  }
}