/* This is a complex code snippet in CSS that creates a responsive grid layout using media queries. */

/* First, we define the base styles for our grid layout */
.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: minmax(100px, auto);
    grid-gap: 20px;
}

/* Next, we use media queries to set different grid configurations at different screen sizes */
@media only screen and (max-width: 768px) {
    .container {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media only screen and (max-width: 480px) {
    .container {
        grid-template-columns: 1fr;
    }
}

/* Now, we add styles to our grid items */
.item {
    grid-column: span 1;
    grid-row: span 1;
}

/* In the first media query, we change the grid item's span and row to fit the new grid layout */
@media only screen and (max-width: 768px) {
    .item {
        grid-column: span 2;
        grid-row: span 2;
    }
}

/* In the second media query, we center the grid items since there is only one column */
@media only screen and (max-width: 480px) {
    .item {
        justify-self: center;
    }
}

/* Lastly, we can add styles to individual grid items based on their position in the grid */
.item:nth-child(3n+1) {
    background-color: red;
}

.item:nth-child(3n+2) {
    background-color: blue;
}

.item:nth-child(3n+3) {
    background-color: green;
}