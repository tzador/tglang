/* This code snippet is an example of a complex CSS layout using flexbox */

/* First, we set the container to display as a flexbox and allow its children to wrap */
.container {
  display: flex;
  flex-wrap: wrap;
}

/* Then, we define how the flex items should be arranged and aligned */
.box {
  flex: 0 0 auto; /* Shorthand for flex-grow, flex-shrink, and flex-basis */
  align-self: center; /* Align individual flex items vertically */
  margin: 10px;
  width: 200px;
  height: 200px;
  background-color: #f1f1f1;
}

/* We can use the order property to rearrange the order of flex items */
.box:nth-child(2) {
  order: 1;
}
.box:nth-child(3) {
  order: 2;
}
.box:nth-child(4) {
  order: 3;
}
.box:nth-child(5) {
  order: 4;
}

/* We can also use flex-grow to specify the amount of space an item should take up */
.box:nth-child(2) {
  flex-grow: 2; /* This box will take up twice as much space as the others */
}

/* To create a grid-like layout, we can use the flex-wrap and width properties */
/* This will create a row of three boxes and wrap the remaining items onto a new row */
.box:nth-child(3n) {
  flex-wrap: nowrap;
  width: 300px;
}