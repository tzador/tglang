/* This code snippet demonstrates a complex layout with CSS Grid */
.container {
  display: grid; /* creates a grid container */
  grid-template-columns: repeat(3, 1fr); /* defines three equal-sized columns */
  grid-template-rows: 100px 1fr 1fr; /* defines different height for each row */
  grid-template-areas:
    "header header header" /* sets the grid areas for each item */
    "sidebar main main"
    "footer footer footer";

  grid-gap: 20px; /* sets the gap between grid cells */

  /* responsive design using media query */
  @media only screen and (max-width: 600px) {
    grid-template-areas:
      "header"
      "sidebar"
      "main"
      "footer";
    grid-template-columns: 1fr; /* changes to one column layout */
    grid-template-rows: 50px 1fr 1fr 50px; /* updates row height */
  }
}

/* styling for header area */
#header {
  grid-area: header; /* assigns the header element to the header grid area */
  background-color: #ccc;
  text-align: center;
}

/* styling for sidebar area */
#sidebar {
  grid-area: sidebar; /* assigns the sidebar element to the sidebar grid area */
  background-color: #eee;
  text-align: center;
}

/* styling for main area */
#main {
  grid-area: main; /* assigns the main element to the main grid area */
  background-color: #ddd;
  text-align: center;
}

/* styling for footer area */
#footer {
  grid-area: footer; /* assigns the footer element to the footer grid area */
  background-color: #aaa;
  text-align: center;
}