/* This is a CSS code snippet that creates a complex layout using Flexbox */

/* First, we define a container element */

.my-container {
  display: flex; /* Sets the display property to Flexbox */
  flex-direction: row; /* Sets the direction of the flex items to horizontal */
  justify-content: space-between; /* Distributes items evenly along the main axis with equal space between them */
  align-items: center; /* Aligns items along the cross axis to the center */
  flex-wrap: wrap; /* Allows items to wrap to the next line if they overflow */
  min-height: 500px; /* Sets a minimum height for the container */
}

/* Next, we define the flex items inside the container */

.my-item {
  flex: 1 1 calc(33% - 10px); /* Sets the flex-grow, flex-shrink, and flex-basis properties */
  margin: 20px; /* Sets a margin around each item */
  text-align: center; /* Aligns the text in the center of each item */
}

/* We can also specify different styles for each flex item */

.my-item:nth-child(2) {
  background-color: #66CCFF; /* Sets a background color for the second item */
  color: #FFFFFF; /* Sets a text color for the second item */
}

.my-item:nth-child(3) {
  background-color: #FF66CC; /* Sets a background color for the third item */
  color: #FFFFFF; /* Sets a text color for the third item */
}

/* Finally, we can add media queries to make the layout responsive */

@media screen and (max-width: 768px) {
  .my-container {
    flex-direction: column; /* Changes the direction to vertical for smaller screens */
    align-items: flex-start; /* Aligns items to the start of the container on smaller screens */
  }

  .my-item {
    flex: 1 1 100%; /* Changes the flex-basis property to 100% for smaller screens */
    margin: 10px; /* Changes the margin for smaller screens */
  }
}