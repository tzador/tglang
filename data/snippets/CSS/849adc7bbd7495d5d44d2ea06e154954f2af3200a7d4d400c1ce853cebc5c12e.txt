/* This code snippet creates a complex and responsive layout using CSS Grid */

/* Define the grid container and set grid properties */
.grid-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /* Divide grid container into 3 equal columns */
  grid-template-rows: 150px auto 1fr; /* Set grid height for each row */
  gap: 20px; /* Add spacing between grid items */
}

/* Define the grid items and set placement */
.grid-item {
  background-color: #eee; /* Add background color to grid items */
  text-align: center; /* Align text in the middle of grid items */
  padding: 20px; /* Add padding to grid items */
}

/* Use grid area to define the placement of specific grid items */
.item1 {
  grid-area: 1 / 1 / 2 / 4; /* Place the item at row 1, column 1 and span 3 columns */
}

.item2 {
  grid-area: 2 / 1 / 3 / 3; /* Place the item at row 2, column 1 and span 2 columns */
}

.item3 {
  grid-area: 2 / 3 / 4 / 4; /* Place the item at row 2, column 3 and span 2 rows */
}

/* Use media queries to make the layout responsive on different screen sizes */
@media only screen and (max-width: 768px) {
  .grid-container {
    grid-template-columns: 1fr; /* Change grid columns to 1 column for smaller screens */
    grid-template-rows: repeat(3, auto); /* Set grid rows to equal height for better readability */
  }
  
  .item1 {
    grid-area: 1 / 1 / 2 / 2; /* Change the placement of item1 for smaller screens */
  }
  
  .item2 {
    grid-area: 2 / 1 / 3 / 2; /* Change the placement of item2 for smaller screens */
  }
  
  .item3 {
    grid-area: 3 / 1 / 4 / 2; /* Change the placement of item3 for smaller screens */
  }
}