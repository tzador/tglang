/* This code snippet is an example of a responsive grid layout using flexbox in CSS. */

.main-container {
  display: flex;
  flex-wrap: wrap;
  align-content: flex-start;
  /* This sets the main container to use flexbox and wrap its contents if there's not enough space. Content is aligned to the top. */
}

.column {
  flex: 1 1 200px;
  padding: 20px;
  /* This sets each column to have a flexible width of 1, a flexible grow factor of 1, and a fixed width of 200px. 20px of padding is added on all sides. */
}

@media (max-width: 768px) {
  .column {
    flex: 1 1 100%;
    /* This sets the columns to occupy the full width of the main container when the screen size is less than or equal to 768px. */
  }
}

@media (min-width: 768px) and (max-width: 1024px) {
  .column {
    flex: 0 0 50%;
    /* This sets the columns to have a fixed width of 50% when the screen size is greater than 768px and less than or equal to 1024px. */
  }
}

@media (min-width: 1024px) {
  .column {
    flex: 0 0 33.33%;
    /* This sets the columns to have a fixed width of 33.33% when the screen size is greater than 1024px. This creates a 3-column layout. */
  }
}