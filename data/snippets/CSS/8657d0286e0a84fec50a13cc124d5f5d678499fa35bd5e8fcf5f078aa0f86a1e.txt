/* This is a complex code snippet in CSS that will generate a responsive grid layout */
/* This first section sets up the basic styles for the grid layout */
.container {
  display: grid; /* sets the element to grid display */
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* sets the grid to automatically fit the container with a minimum column width of 300px and a maximum of 1fr */
  grid-gap: 20px; /* sets the grid gap to 20px between each cell */
  padding: 20px; /* adds 20px of padding to the container */
}

/* The next section sets the styles for the individual elements within the grid */
.item {
  background-color: lightgray; /* sets the background color of the item to light gray */
  border: 1px solid black; /* adds a 1px solid black border around the item */
  text-align: center; /* centers the text within the item */
  font-size: 16px; /* sets the font size of the text within the item to 16px */
  padding: 10px; /* adds 10px of padding to the item */
}

/* This section sets the grid layout to be responsive, adjusting the number of columns based on screen size */
/* For screens smaller than 600px, the grid will have 1 column */
@media screen and (max-width: 600px) {
  .container {
    grid-template-columns: 1fr;
  }
}

/* For screens between 601px and 900px, the grid will have 2 columns */
@media screen and (min-width: 601px) and (max-width: 900px) {
  .container {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* For screens larger than 901px, the grid will have 3 columns */
@media screen and (min-width: 901px) {
  .container {
    grid-template-columns: repeat(3, 1fr);
  }
}