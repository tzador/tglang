/*
  This is a complex and long code snippet in CSS that demonstrates 
  the creation of a responsive grid layout.
*/

.container {
  display: grid; /* Specifies that the container element is a grid container */
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Sets the columns in the grid to be fluid and responsive, with a minimum width of 200px and a maximum of 1fr (fraction unit) */
  grid-template-rows: 50vh 10vmin auto; /* Sets the rows in the grid, with the first row taking up 50% of the viewport height, the second row taking up 10% of the viewport height, and the third row adjusting automatically */
  grid-gap: 20px; /* Sets the space between each grid item */
  grid-template-areas: /* Defines the layout of the grid by assigning areas to specific grid items */
    "header header header"
    "nav main aside"
    "nav footer footer";
}

.header {
  grid-area: header; /* Specifies that this element will take up the "header" area in the grid layout */
}

.nav {
  grid-area: nav; /* Specifies that this element will take up the "nav" area in the grid layout */
}

.main {
  grid-area: main; /* Specifies that this element will take up the "main" area in the grid layout */
}

.aside {
  grid-area: aside; /* Specifies that this element will take up the "aside" area in the grid layout */
}

.footer {
  grid-area: footer; /* Specifies that this element will take up the "footer" area in the grid layout */
}

@media only screen and (max-width: 500px) {
  /* Creates a responsive design for smaller screens, with a single column layout */
  .container {
    grid-template-columns: 1fr;
    grid-template-areas:
      "header"
      "nav"
      "main"
      "aside"
      "footer";
  }
}