/* This is a complex code snippet in CSS that creates a responsive grid layout */

/* The parent container holding the grid items */
.grid-container {
  display: grid;                        /* Sets the display to grid */
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));      /* Creates columns with a minimum width of 200px and maximum of 1 fraction unit, and auto-fits the number of items */
  grid-template-rows: repeat(3, 1fr);    /* Creates 3 rows each with 1 fraction unit */
  grid-column-gap: 10px;                 /* Sets the gap between columns to 10px */
  grid-row-gap: 15px;                    /* Sets the gap between rows to 15px */
}
 
/* Each grid item */
.grid-item {
  grid-column: span 2;      /* Spans the item across 2 columns */
  grid-row: span 1;         /* Spans the item across 1 row */
  justify-self: center;     /* Centers the item horizontally within the grid */ 
  align-self: center;       /* Centers the item vertically within the grid */
}
 
/* Media query for small screens */
@media screen and (max-width: 600px) {
  .grid-container {
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));    /* Changes column width to accommodate smaller screens */
    grid-template-rows: repeat(4, 1fr);                             /* Increases number of rows to 4 */
    grid-column-gap: 5px;                                           /* Decreases column gap to 5px */
    grid-row-gap: 10px;                                             /* Decreases row gap to 10px */
  }
  .grid-item {
    grid-column: span 1;    /* Changes grid item to span 1 column, allowing for more items per row */
    grid-row: span 2;       /* Changes grid item to span 2 rows, allowing for items to stack on top of each other */
  }
}