# This code snippet calculates the eigenvalues of a matrix using the QR algorithm
# Define the input matrix
matrix <- matrix(c(3, -2, 4, -2, 0, -2, 4, -2, 3), nrow = 3, ncol = 3)
# Define a function to perform the QR iteration step
qr_iteration <- function(matrix){
  
  # Calculate the QR decomposition
  qr <- qr(matrix)
  
  # Compute the Q and R matrices
  # Q is an orthogonal matrix and R is an upper triangular matrix
  Q <- qr$qr[, 1:ncol(qr$qr)]
  R <- qr$qr[, 1:nrow(qr$qr)]
  
  # Calculate the new matrix by multiplying R and Q
  new_matrix <- R %*% Q
  
  # Return the new_matrix
  return(new_matrix)
}

# Set the initial Q matrix to be an identity matrix
Q <- diag(nrow(matrix))

# Set the tolerance level and maximum number of iterations
tol <- 1e-6
max_iter <- 100

# Perform the QR iteration until convergence or maximum number of iterations is reached
for (i in 1:max_iter){
  # Call the qr_iteration function to get the new matrix
  new_matrix <- qr_iteration(matrix)
  
  # Calculate the eigenvalues of the new matrix
  eigenvalues <- diag(new_matrix)
  
  # Calculate the sum of squared differences between the old and new eigenvalues
  diff <- sum((diag(matrix) - eigenvalues)^2)
  
  # If the difference is less than the tolerance level, break the loop
  if (diff < tol){
    break
  }
  
  # Update the matrix with the new matrix
  matrix <- new_matrix
  
  # Update the Q matrix by multiplying the new Q matrix with the old one
  Q <- Q %*% qr$qr[, 1:ncol(qr$qr)]
}

# Print the resulting eigenvalues
print(eigenvalues)