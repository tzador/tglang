# Function to find the determinant of a matrix using LU decomposition
# Takes in a square matrix as input
# Returns the determinant
determinant <- function(matrix) {
    
    # Check if matrix is square
    if (ncol(matrix) != nrow(matrix)) {
        stop("Matrix must be square!")
    }
    
    # Create an upper triangular matrix from original matrix
    # Uses Gaussian elimination
    upper <- matrix
    
    # Loop through rows
    for (i in 1:(nrow(matrix) - 1)) {
        
        # Loop through columns, starting at next row
        for (j in (i + 1):ncol(matrix)) {
            
            # Calculate pivot ratio
            ratio <- upper[j,i] / upper[i,i]
            
            # Update values in current row
            upper[j,] <- upper[j,] - ratio * upper[i,]
        }
    }
    
    # Calculate determinant as product of diagonal entries in upper triangular matrix
    det <- product(diag(upper))
    
    # Check if determinant is close to 0 (indicating singularity)
    if (abs(det) < 1e-10) {
        warning("Matrix is close to singular!")
    }
    
    # Return determinant
    return(det)
}