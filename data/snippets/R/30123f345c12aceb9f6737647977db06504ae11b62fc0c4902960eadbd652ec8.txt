#This code snippet implements the quicksort algorithm, used for sorting arrays in an efficient manner
#It takes an unsorted array as input and outputs a sorted array
#It uses the divide and conquer approach to recursively sort sub-arrays

#function to partition the array
partition <- function(arr, low, high) {
  pivot <- arr[high]
  i <- low - 1 #index of smaller element
  for(j in low:high) {
    if(arr[j] < pivot) {
      i <- i + 1
      temp <- arr[i]
      arr[i] <- arr[j]
      arr[j] <- temp
    }
  }
  #place the pivot element at its correct position
  temp <- arr[i + 1]
  arr[i + 1] <- arr[high]
  arr[high] <- temp
  return (i + 1)
}

#function to implement quicksort
quicksort <- function(arr, low, high) {
  if(low < high) {
    #partition the array and get the index of the pivot element
    index <- partition(arr, low, high)
    #recursively call quicksort on the left and right sub-arrays
    quicksort(arr, low, index - 1)
    quicksort(arr, index + 1, high)
  }
}

#example
arr <- c(5, 4, 3, 2, 1)
quicksort(arr, 1, length(arr)) #sort the entire array
#output: [1] 1 2 3 4 5