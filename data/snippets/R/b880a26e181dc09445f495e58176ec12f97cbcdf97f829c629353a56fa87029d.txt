# This is a function that calculates the inverse of a matrix using the Gauss-Jordan method
# Input:
#   - mat: a square matrix
# Output:
#   - A new matrix that is the inverse of the given matrix
inverse <- function(mat) {
  # Create an identity matrix with the same size as the given matrix
  identity <- diag(nrow = ncol(mat))
  
  # Augment the given matrix by the identity matrix to create the augmented matrix
  augmented_mat <- cbind(mat, identity)
  
  # Perform Gauss-Jordan elimination to reduce the augmented matrix to the identity matrix
  for (i in 1:ncol(mat)) {
    # Divide the current row by the current diagonal element to make it 1
    augmented_mat[i, ] <- augmented_mat[i, ] / augmented_mat[i, i]
    
    # Make all other elements in the column 0 by subtracting a multiple of the current row
    # from each subsequent row
    for (j in 1:ncol(mat)) {
      if (j != i) {
        augmented_mat[j, ] <- augmented_mat[j, ] - (augmented_mat[j, i] * augmented_mat[i, ])
      }
    }
  }
  
  # The right side of the augmented matrix should now be the inverse of the given matrix
  inverse_mat <- augmented_mat[, (ncol(mat) + 1):ncol(augmented_mat)]
  return(inverse_mat)
}

# Example usage:
# Given matrix
mat <- matrix(c(1, 2, 3, 4), ncol = 2)

# Calculate the inverse using the defined function
inverse_mat <- inverse(mat)

# Print the result
print(inverse_mat)