## Function to find the shortest path between two nodes in a graph
## Inputs:
##  graph: Adjacency matrix representing the graph
##  startNode: Node to start from
##  endNode: Node to end at
shortestPath <- function(graph, startNode, endNode) {
    # Initialize the shortestPath vector with start node
    shortestPath <- startNode
    # Initialize distance vector with infinity for all nodes except start node
    distance <- rep(Inf, nrow(graph))
    distance[startNode] <- 0
    # Run Dijkstra's algorithm to find shortest path
    for (i in 1:nrow(graph)) {
        # Find the next minimum distance node from the set of unvisited nodes
        nextNode <- which.min(distance[!shortestPath])
        # Stop if we reach the end node
        if (nextNode == endNode) break
        # Add the next node to the shortestPath vector
        shortestPath <- c(shortestPath, nextNode)
        # Update the distance vector for all unvisited nodes
        for (j in 1:nrow(graph)) {
            # Skip current node and already visited nodes
            if (j == shortestPath[length(shortestPath)] || j %in% shortestPath) next
            # Update distance if there is a shorter path
            if (graph[nextNode, j] != Inf && distance[nextNode] + graph[nextNode, j] < distance[j]) 
                distance[j] <- distance[nextNode] + graph[nextNode, j]
        }
    }
    # Add the end node to the shortestPath vector
    shortestPath <- c(shortestPath, endNode)
    # Return the shortestPath vector and distance to end node
    return(list(path = shortestPath, distance = distance[endNode]))
}