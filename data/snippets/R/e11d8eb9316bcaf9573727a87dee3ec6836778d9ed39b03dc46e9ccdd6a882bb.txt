## Defining a function to perform linear regression using gradient descent 
## Function takes in the training data, learning rate, and number of iterations
gradient_descent <- function(train_data, learning_rate, iterations) {
    
    # Initializing the coefficients to zero
    coeff <- rep(0, ncol(train_data))
    
    # Converting training data to a matrix
    train_matrix <- as.matrix(train_data)
    
    # Creating a vector of feature values and the output variable
    x <- train_matrix[,1:(ncol(train_matrix)-1)]
    y <- train_matrix[,ncol(train_matrix)]
    
    # Iterating for specified number of iterations
    for (i in 1:iterations) {
        
        # Calculating the predictions using current coefficients
        y_pred <- x %*% coeff
        
        # Calculating the error between predicted and actual values
        error <- y_pred - y
        
        # Updating the coefficients using gradient descent
        coeff <- coeff - (learning_rate * t(x) %*% error)
    }
    
    # Returning the resulting coefficients
    return(coeff)
}

## Calling the function with sample data and parameters
coefficients <- gradient_descent(train_data = data,
                                 learning_rate = 0.01,
                                 iterations = 1000)