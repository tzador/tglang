# This is a complex function that calculates the nth Fibonacci number using a memoized approach.
# The memoized approach saves previously calculated values to improve efficiency.

# First, we define a global variable to store the memoized values.
fib.memo <- c()

# Next, we create the recursive function that calculates the Fibonacci number.
# It takes in a parameter n, which is the index of the desired Fibonacci number.
fibonacci <- function(n) {
  # If the calculated value is already in the memo, we return it.
  if (n %in% names(fib.memo)) {
    fib.memo[n]
  }
  # If n is less than or equal to 2, then the Fibonacci number is 1.
  else if (n <= 2) {
    1
  }
  # Otherwise, we use the recursive formula to calculate the Fibonacci number.
  else {
    fibonacci(n-1) + fibonacci(n-2)
  }
}

# Finally, we create a function that calculates the nth Fibonacci number using the memoized function.
fibonacci_memo <- function(n) {
  # We first check to see if the value is already memoized.
  if (n %in% names(fib.memo)) {
    fib.memo[n]
  }
  # If not, we call the fibonacci function and store the calculated value in the memo.
  else {
    fib.value <- fibonacci(n)
    fib.memo[n] <- fib.value
    fib.value
  }
}