# This code snippet takes in a list of numbers and calculates
# the mean, median, and mode of the list
# Input: list of numbers
# Output: mean, median, mode

# Define function to calculate mean
calculate_mean <- function(list_of_numbers) {
  # Initialize sum
  total_sum = 0
  
  # Loop through list and add each number to sum
  for (num in list_of_numbers) {
    total_sum = total_sum + num
  }
  
  # Calculate mean by dividing total sum by number of elements in list
  mean = total_sum / length(list_of_numbers)
  
  # Return mean
  return(mean)
}

# Define function to calculate median
calculate_median <- function(list_of_numbers) {
  # Sort list in ascending order
  sorted_list = sort(list_of_numbers)
  
  # Find middle index of list
  middle_index = length(sorted_list) / 2
  
  # Check if list has an odd or even number of elements
  if (length(sorted_list) %% 2 == 0) {
    # If even number of elements, take average of middle two numbers
    median = (sorted_list[middle_index] + sorted_list[middle_index + 1]) / 2
  } else {
    # If odd number of elements, take middle number
    median = sorted_list[floor(middle_index)]
  }
  
  # Return median
  return(median)
}

# Define function to calculate mode
calculate_mode <- function(list_of_numbers) {
  # Initialize dictionary to store number frequencies
  number_freq = c()
  
  # Loop through list and update dictionary with each number's frequency
  for (num in list_of_numbers) {
    if (is.na(number_freq[num])) {
      number_freq[num] = 1
    } else {
      number_freq[num] = number_freq[num] + 1
    }
  }
  
  # Find the maximum frequency in the dictionary
  max_freq = max(number_freq)
  
  # Find all numbers with the maximum frequency
  mode = names(number_freq)[number_freq == max_freq]
  
  # If only one number has the maximum frequency, return it as mode
  # Otherwise, return all numbers with the maximum frequency as mode
  if (length(mode) == 1) {
    return(mode)
  } else {
    return(paste(mode, collapse = ", "))
  }
}

# Example input
numbers = c(1, 2, 3, 4, 5, 6, 7, 4, 9, 10, 5, 3, 2, 6, 8)

# Calculate mean, median, and mode
mean = calculate_mean(numbers)
median = calculate_median(numbers)
mode = calculate_mode(numbers)

# Output results
cat("Mean: ", mean, "\n")
cat("Median: ", median, "\n")
cat("Mode: ", mode)