# This is a function that performs k-means clustering with user-specified number of clusters
# Input: 
#   data - a data frame containing the data to be clustered
#   k - the number of clusters to be created
# Output:
#   cluster_res - a list containing the cluster assignments and centroids
k_means <- function(data, k) {

  # Randomly initialize k centroids from the data points
  centroids <- data[sample(nrow(data), k), ]
  
  # Initialize list to store cluster assignments and centroids
  cluster_res <- list()
  
  # Perform iterations until convergence
  while(TRUE) {
  
    # Step 1: Assign data points to the cluster with the nearest centroid
    distances <- sapply(seq_len(nrow(data)), function(i) {
      apply(centroids, 1, function(c) { sum((data[i,] - c)^2) })
    })
    clusters <- apply(distances, 1, which.min)
    
    # Step 2: Update centroids by taking the mean of all points in the cluster
    new_centroids <- apply(data, 2, function(x) {
      sapply(unique(clusters), function(i) { 
        mean(x[clusters == i])
      })
    })
    
    # Step 3: Check for convergence by comparing new centroids to old centroids
    if(centroids == new_centroids) {
      break
    }
    
    # Update centroids with new centroids
    centroids <- new_centroids
    
  }
  
  # Store cluster assignments and centroids in the output list
  cluster_res$clusters <- clusters
  cluster_res$centroids <- centroids
  
  # Return the output list
  return(cluster_res)
  
}