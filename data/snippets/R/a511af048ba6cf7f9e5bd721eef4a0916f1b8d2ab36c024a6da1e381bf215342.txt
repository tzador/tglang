# This is a program to solve the knapsack problem using dynamic programming in R

# Create a function for knapsack problem 
knapsack <- function(weights, profits, capacity){
  # Initialize the dynamic programming table
  dp_table <- matrix(0, nrow = length(weights) + 1, ncol = capacity + 1)
  
  # Fill the table in a bottom-up approach 
  for (i in 1:length(weights)){
    for (j in 1:capacity){
      # Check if the current item can be included in the knapsack
      if (weights[i] <= j){
        # Calculate the total profit if the current item is included
        temp_profit <- profits[i] + dp_table[i, j - weights[i]]
        
        # Select maximum profit between including current item and not including 
        dp_table[i+1, j] <- max(temp_profit, dp_table[i, j])
      } else {
        # If current item cannot be included, keep the previous profit
        dp_table[i+1, j] <- dp_table[i, j]
      }
    }
  }
  
  # Get the maximum profit from the last cell in the table
  max_profit <- dp_table[length(weights) + 1, capacity]
  
  # Create a vector to store the items included in the knapsack
  included_items <- c()
  
  # Start from the bottom-right cell
  current_row <- length(weights) + 1
  current_col <- capacity
  
  # Keep going up until the top-left cell
  while (current_row > 1 && current_col > 0){
    # Check if the current item was included
    if (dp_table[current_row, current_col] > dp_table[current_row - 1, current_col]){
      # Add the item to the vector
      included_items <- c(included_items, weights[current_row - 1])
      # Update the current column by subtracting the weight of the included item
      current_col <- current_col - weights[current_row - 1]
    }
    # Move to the previous row
    current_row = current_row - 1
  }
  
  # Return the maximum profit and the items included in the knapsack
  return(list(max_profit, included_items))
}

# Example input
weights <- c(7, 3, 4, 5)
profits <- c(10, 5, 7, 8)
capacity <- 10

# Call the function with the example input
knapsack(weights, profits, capacity)

# Output:
[[1]]
[1] 18

[[2]]
[1] 5 3 4