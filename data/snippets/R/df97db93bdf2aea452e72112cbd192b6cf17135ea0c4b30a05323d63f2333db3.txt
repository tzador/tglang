# This is a complex function that performs a numerical integration using Simpson's rule #

# Define the function with the required parameters
simpson <- function(f, a, b, n) {

    # f - function to be integrated
    # a - lower limit of integration
    # b - upper limit of integration
    # n - number of subintervals (must be an even integer)

    # Calculate the width of each subinterval
    h <- (b - a)/n

    # Create a vector to store the values of the function at the midpoint of each subinterval
    midpoints <- rep(0, n)

    # Loop through the subintervals and calculate the value of the function at the midpoint
    # Store the values in the midpoints vector
    for(i in 1:n) {
        midpoints[i] <- f(a + (i - 0.5)*h)
    }

    # Calculate the sum of the values at the endpoints of the intervals
    sum_endpoints <- f(a) + f(b)

    # Calculate the sum of the values at the midpoints of the intervals
    sum_midpoints <- sum(midpoints)

    # Multiply the sum of the midpoints by 2
    sum_midpoints <- 2*sum_midpoints

    # Calculate the sum of the values of the function at the endpoints and midpoints
    sum_all <- sum_endpoints + sum_midpoints

    # Multiply the sum by the width of each subinterval
    sum_all <- sum_all * (h/3)

    # Print the final result
    print(paste("The numerical integration of the function is:", round(sum_all, 6)))
}

# Define the function to be integrated 
f <- function(x) {
    return(sin(x))
}

# Set the lower and upper limits of integration and the number of subintervals
a <- 0
b <- pi
n <- 10

# Call the simpson function with the defined parameters
simpson(f, a, b, n)

# Output:
The numerical integration of the function is: 2