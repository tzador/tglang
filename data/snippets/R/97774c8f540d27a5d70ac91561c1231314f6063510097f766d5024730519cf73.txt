# This function performs Newton's method to find the root of a given polynomial
newtons_method <- function(polynomial, initial_guess, tolerance) {
  # Define the derivative of the polynomial as a separate function
  derivative <- function(x) {
    return(sum(polynomial * x^(0:length(polynomial) - 1) * (0:length(polynomial) - 1)))
  }

  # Initialize a counter to keep track of the number of iterations
  iterations <- 0

  # Define the previous and current root values
  prev_root <- initial_guess
  curr_root <- initial_guess + 1

  # Keep iterating until the difference between previous and current root is within tolerance
  while (abs(curr_root - prev_root) > tolerance) {
    # Update the previous root value
    prev_root <- curr_root

    # Use Newton's method to calculate the root
    curr_root <- prev_root - (evaluate_polynomial(polynomial, prev_root) / derivative(prev_root))

    # Increment the number of iterations
    iterations <- iterations + 1
  }

  # Print the final root and the number of iterations it took to find it
  cat("The root of the polynomial is:", curr_root, "\n")
  cat("Number of iterations:", iterations)

  # Return the final root value
  return(curr_root)
}

# Function to evaluate a polynomial at a given value of x
evaluate_polynomial <- function(polynomial, x) {
  return(sum(polynomial * x^(0:length(polynomial) - 1)))
}

# Example usage of the newtons_method function
polynomial <- c(2, 4, 3, 1) # 2x^3 + 4x^2 + 3x + 1
initial_guess <- 0
tolerance <- 0.0001

# Call the function and store the root value in a variable
root <- newtons_method(polynomial, initial_guess, tolerance)

# Print the root value
cat("Root of the polynomial is:", root)