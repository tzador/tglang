# This is a function that sorts a vector in descending order using merge sort algorithm

merge_sort <- function(vector) {
  # Base case
  if (length(vector) <= 1) {
    return(vector)
  }
  
  # Split vector into two subvectors
  middle <- length(vector) %/% 2
  left <- merge_sort(vector[1:middle])
  right <- merge_sort(vector[(middle+1):length(vector)])
  
  # Initialize counters for left and right subvectors
  i <- 1
  j <- 1
  
  # Initialize result vector
  result <- vector()
  
  # Loop through left and right subvectors, comparing elements and merging into result vector
  while (i <= length(left) && j <= length(right)) {
    if (left[i] > right[j]) {
      result <- c(result, left[i])
      i <- i + 1
    } else {
      result <- c(result, right[j])
      j <- j + 1
    }
  }
  
  # Append remaining elements of left subvector to result vector
  while (i <= length(left)) {
    result <- c(result, left[i])
    i <- i + 1
  }
  
  # Append remaining elements of right subvector to result vector
  while (j <= length(right)) {
    result <- c(result, right[j])
    j <- j + 1
  }
  
  # Return sorted vector
  return(result)
}

# Example usage
vector <- c(10,5,2,7,3,9,1,8)
sorted_vector <- merge_sort(vector)
print(sorted_vector) # Output: 1 2 3 5 7 8 9 10