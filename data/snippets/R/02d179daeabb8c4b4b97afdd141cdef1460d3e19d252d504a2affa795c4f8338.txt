# This is a function that calculates the inverse of a matrix
# Input parameters:
# - matrix: a square matrix to be inverted
# Return:
# - inverted matrix
inverse_matrix <- function(matrix) {
  # Check if the matrix is square
  if (nrow(matrix) != ncol(matrix)) {
    stop("The matrix must be square")
  }
  # Calculate the determinant of the matrix
  det <- 1/det(matrix)
  # Create an identity matrix of the same dimension as the input matrix
  identity <- diag(nrow(matrix))
  # Perform Gaussian elimination to find the inverse of the matrix
  for (i in 1:nrow(matrix)) {
    pivot <- matrix[i,i] # Get the pivot element
    if (pivot == 0) { # Check if the pivot is 0
      # Find a row where the pivot is not 0 and swap it with the current row
      j <- i+which(matrix[(i+1):nrow(matrix),i] != 0)[1]
      matrix[c(i,j),] <- matrix[c(j,i),]
      identity[c(i,j),] <- identity[c(j,i),]
    }
    # Scale the current row by 1/pivot
    matrix[i,] <- matrix[i,]/pivot
    identity[i,] <- identity[i,]/pivot
    # Use this row to eliminate the nonzero elements in the same column
    for (k in 1:nrow(matrix)) {
      if (k == i) {
        next
      }
      # Get the factor for elimination
      factor <- -matrix[k,i]
      # Add the scaled current row to this row
      matrix[k,] <- matrix[k,] + factor*matrix[i,]
      identity[k,] <- identity[k,] + factor*identity[i,]
    }
  }
  # Multiply the identity matrix by 1/det to get the inverse matrix
  inverse <- det*identity
  # Return the inverse matrix
  return(inverse)
}