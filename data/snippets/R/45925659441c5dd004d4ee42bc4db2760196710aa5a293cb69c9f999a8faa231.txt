# This code snippet creates a function that performs binary insertion sort.

binary_insertion_sort <- function(array) {
  # Loop through the array starting with the second element.
  for (i in 2:length(array)) {
    # Store the current element in a variable.
    key <- array[i]
    # Set the start and end indices for the sublist to be sorted.
    start <- 1
    end <- i - 1
    # Use binary search to find the correct position for the current element.
    while (start <= end) {
      middle <- floor((start + end) / 2)
      if (key < array[middle]) {
        # Adjust the end index if the key is smaller than the middle element
        end <- middle - 1
      } else {
        # Adjust the start index if the key is larger than the middle element
        start <- middle + 1
      }
    }
    # Shift all elements greater than the key one position to the right.
    for (j in i:(start + 1)) {
      array[j] <- array[j - 1]
    }
    # Insert the key in its correct position.
    array[start] <- key
  }
  # Return the sorted array.
  return (array)
}

# Example usage
array <- c(5, 2, 8, 1, 4)
sorted_array <- binary_insertion_sort(array)
print(sorted_array)

# Output: [1] 1 2 4 5 8