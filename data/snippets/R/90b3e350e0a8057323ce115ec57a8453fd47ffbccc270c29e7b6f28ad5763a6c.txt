# This program uses the Knapsack algorithm to solve a 0-1 knapsack problem
# Define the functions to calculate the maximum value and corresponding items for a given weight
# This function takes in the list of weights, values and the weight limit
max_value <- function(weights, values, weight_limit) {
  # Create a 2D matrix with dimensions (number of items) x (weight limit + 1)
  dp_mat <- matrix(0, nrow = length(weights), ncol = weight_limit + 1)
  
  # Loop through each item
  for (i in 1:length(weights)) {
    # Loop through each weight from 0 to weight limit
    for (weight in 0:weight_limit) {
      # Base case: if weight is 0, then maximum value is 0
      if (weight == 0) {
        dp_mat[i, weight] <- 0
      }
      # Current weight is less than the item's weight, so we cannot pick it
      else if (weights[i] > weight) {
        # Maximum value is the previous item's maximum value for the same weight
        dp_mat[i, weight] <- dp_mat[i-1, weight]
      }
      # Otherwise, we can either pick the item or not depending on which gives more value
      else {
        # Maximum value if we do not pick the current item
        max_without_cur <- dp_mat[i-1, weight]
        # Maximum value if we pick the current item
        max_with_cur <- values[i] + dp_mat[i-1, weight-weights[i]]
        
        # Pick the maximum of the two options
        dp_mat[i, weight] <- max(max_without_cur, max_with_cur)
      }
    }
  }
  
  # Return the maximum value at the bottom right corner of the matrix
  return(dp_mat[length(weights), weight_limit])
}

# Function to find the items that are picked for the maximum value
# This function takes in the list of weights, values and the weight limit along with the dp matrix
find_items <- function(weights, values, weight_limit, dp_mat) {
  # Initialize an empty vector to store the items
  items <- c()
  
  # Loop through the items in reverse order
  for (i in rev(1:length(weights))) {
    # If the maximum value at the current weight is not equal to the maximum value at the previous weight
    if (dp_mat[i, weight_limit] != dp_mat[i-1, weight_limit]){
      # Add the current item to the list of items
      items <- c(items, i)
      # Update the weight limit to subtract the weight of the current item
      weight_limit <- weight_limit - weights[i]
    }
  }
  
  # Reverse the order of the items to get the correct sequence
  items <- rev(items)
  
  # Return the list of items
  return(items)
}

# Main function to solve the knapsack problem
# This function takes in the list of weights and values along with the weight limit
knapsack <- function(weights, values, weight_limit) {
  # Call the max_value function to get the maximum value and dp matrix
  max_val <- max_value(weights, values, weight_limit)
  dp_mat <- matrix(0, nrow = length(weights), ncol = weight_limit + 1)
  # Check if the maximum value is 0, which means no items can be picked
  if (max_val == 0) {
    # Print an error message and return an empty list of items
    cat("No items can be picked with the given weight limit.")
    return(list())
  }
  # Otherwise, call the find_items function to get the items picked for the maximum value
  else {
    items <- find_items(weights, values, weight_limit, dp_mat)
    # Print the maximum value and the items picked
    cat("Maximum value:", max_val, "\n")
    cat("Items picked:", paste(items, collapse = ", "))
  }
}

# Example inputs
weights <- c(5, 4, 6, 3)
values <- c(10, 40, 30, 50)
weight_limit <- 10

# Call the knapsack function with the example inputs
knapsack(weights, values, weight_limit)