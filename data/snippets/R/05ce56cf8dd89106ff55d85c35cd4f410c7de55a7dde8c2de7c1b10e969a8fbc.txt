# function to find shortest path
find_shortest_path <- function(graph, start, end) {
    # list to store unvisited nodes
    unvisited <- list()
    # distances to each node
    distances <- rep(Inf, length(graph))
    # predecessors of each node
    predecessors <- rep(NA, length(graph))
    
    # function to get next unvisited node with shortest distance from start
    get_next_node <- function() {
        # initialize minimum distance and next unvisited node
        min_distance <- Inf
        next_node <- NULL
        # loop through unvisited nodes
        for (node in unvisited) {
            # check if distance to current node is shorter than current minimum
            if (distances[node] < min_distance) {
                min_distance <- distances[node]
                next_node <- node
            }
        }
        return(next_node)
    }
    
    # mark start node as visited and set distance to 0
    visited <- c(start)
    distances[start] <- 0
    
    # loop until all nodes are visited
    while (!all(nodes_visited)) {
        # get next unvisited node with shortest distance from start
        next_node <- get_next_node()
        # add next node to visited list
        visited <- c(visited, next_node)
        # loop through neighbors of next node
        for (neighbor in graph[[next_node]]) {
            # calculate new distance from start to neighbor node
            new_distance <- distances[next_node] + 1
            # check if new distance is shorter than current distance
            if (new_distance < distances[neighbor]) {
                # update distance to neighbor and set predecessor to next node
                distances[neighbor] <- new_distance
                predecessors[neighbor] <- next_node
            }
        }
    }
    
    # list to store shortest path from start to end
    shortest_path <- list()
    # start from end node and work backwards to add nodes in shortest path
    current_node <- end
    while (current_node != start) {
        # add current node to shortest path
        shortest_path <- c(shortest_path, current_node)
        # move to predecessor node
        current_node <- predecessors[current_node]
    }
    # reverse the list to get the correct order
    shortest_path <- c(rev(shortest_path), start)
    # return list of nodes in shortest path
    return(shortest_path)
}