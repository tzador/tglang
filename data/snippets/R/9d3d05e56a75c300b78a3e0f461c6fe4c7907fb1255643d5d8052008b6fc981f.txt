# Define a function to calculate the square root of a given number
square_root <- function(x) {
  # Initialize variables
  result <- NULL
  # Use a for loop to find the square root
  for (i in 1:x) {
    # Check if the current number squared is equal to the given number
    if (i^2 == x) {
      # If condition is met, assign the square root to result variable
      result <- i
      # Stop the for loop
      break
    }
  }
  # If no exact square root is found, use Newton's method to approximate it
  if (is.null(result)) {
    # Define a function to calculate the derivative of a given function
    derivative <- function(f, x, n = 1) {
      h <- 1e-6 # Define a small step size
      (f(x + h) - f(x)) / h # Calculate the derivative
    }
    # Define a function to calculate the square of a given number
    square <- function(x) {
      x^2
    }
    # Initialize variables for Newton's method
    guess <- x / 2 # Initial guess for the square root
    prev_guess <- x # Previous guess for the square root
    # Use a while loop to iteratively reduce the difference between guesses
    while (abs(guess - prev_guess) > 1e-6) {
      # Update the previous guess
      prev_guess <- guess
      # Use the derivative function to calculate the slope at the previous guess
      slope <- derivative(square, prev_guess)
      # Use the slope and previous guess to update the current guess using Newton's method
      guess <- prev_guess - slope * (prev_guess - x) / (square(prev_guess) - x)
    }
    # Assign the final guess to result variable
    result <- guess
  }
  # Return the result
  return(result)
}

# Call the function to calculate the square root of 25
square_root(25)