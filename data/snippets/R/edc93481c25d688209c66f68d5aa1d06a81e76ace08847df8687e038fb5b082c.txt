# This code snippet creates a function in R for calculating the Euclidean distance between two points in a multi-dimensional space

# Define the function with two input parameters, representing the coordinates of the two points
euclidean_distance <- function(point1, point2) {

  # Start by finding the difference between the coordinates of each point in each dimension
  dimensions <- length(point1) # number of dimensions is equal to the length of the input vector
  differences <- c() # create an empty vector to store the differences in each dimension
  for (i in 1:dimensions) { # for loop to iterate through each dimension
    differences <- c(differences, point1[i] - point2[i]) # calculate difference and add it to the vector
  }
  
  # Use the differences to calculate the square of the distance in each dimension
  distance_squared <- 0 # initialize variable to store the squared distance
  for (j in 1:length(differences)) { # for loop to iterate through each difference value
    distance_squared <- distance_squared + (differences[j] ^ 2) # square each difference and add it to the distance
  }
  
  # Finally, take the square root of the sum of squared distances to get the Euclidean distance
  euclidean_distance <- sqrt(distance_squared) # store the result in a variable
  
  # Return the calculated distance
  return(euclidean_distance)
}

# Example of using the function to find the distance between two points in 3-dimensional space
point1 <- c(4, 8, 12)
point2 <- c(10, 6, 2)
result <- euclidean_distance(point1, point2) # calling the function and storing the result
print(result) # output the calculated distance: 10.77033