# This is a function that implements the quicksort algorithm
# Parameters: arr - an array of integers, low - the starting index, high - the ending index
# Output: the sorted array in ascending order

quicksort <- function(arr, low, high) {
   # If the array is empty, return an empty array
   if (length(arr) == 0) {
      return (c())
   }
   
   # If the starting index is less than the ending index
   if (low < high) {
      # Set the pivot element as the element at the last index
      pivot <- arr[high]
      # Set the index of the smaller element
      i = low - 1
      
      # Loop through the array from low to high-1
      for (j in low:(high-1)) {
         # If the current element is smaller than the pivot
         if (arr[j] < pivot) {
            # Increment the index of the smaller element
            i = i + 1
            # Swap the current element with the smaller element
            temp <- arr[i]
            arr[i] <- arr[j]
            arr[j] <- temp
         }
      }
      
      # Swap the pivot element with the element at the index of the smaller element
      temp <- arr[i + 1]
      arr[i + 1] <- arr[high]
      arr[high] <- temp
      
      # Call quicksort recursively on the left and right partitions
      quicksort(arr, low, i)
      quicksort(arr, i + 2, high)
   }
   
   # Return the sorted array
   return (arr)
}

# Example usage:
# arr <- c(5, 3, 8, 2, 9)
# sorted_arr <- quicksort(arr, 1, length(arr))
# Output: c(2, 3, 5, 8, 9)