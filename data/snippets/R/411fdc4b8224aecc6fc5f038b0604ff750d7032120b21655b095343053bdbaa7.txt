# This code snippet generates a random matrix with specified dimensions and calculates the inverse using the Gauss-Jordan elimination method.

# Define function to generate a random matrix with specified dimensions
generate_matrix <- function(nrow, ncol) {
  # Initialize empty matrix
  matrix <- matrix(nrow = nrow, ncol = ncol)
  
  # Generate random values for each element in the matrix
  for (i in 1:nrow) {
    for (j in 1:ncol) {
      matrix[i,j] <- sample(1:10, 1)
    }
  }
  
  # Return the generated matrix
  return(matrix)
}

# Define function to perform Gauss-Jordan elimination on a matrix and calculate its inverse
gauss_jordan <- function(matrix) {
  # Get number of rows and columns in the matrix
  nrow <- nrow(matrix)
  ncol <- ncol(matrix)
  
  # Initialize identity matrix
  identity <- diag(ncol)
  
  # Augment the matrix with the identity matrix
  augmented_matrix <- cbind(matrix, identity)
  
  # Perform Gauss-Jordan elimination
  for (i in 1:nrow) {
    if (augmented_matrix[i,i] != 1) {
      # Divide the current row by its first non-zero value
      augmented_matrix[i,] <- augmented_matrix[i,] / augmented_matrix[i,i]
    }
    
    # Eliminate all non-zero values in current column except for the pivot element
    for (j in 1:nrow) {
      if (j != i) {
        multiplier <- -augmented_matrix[j,i] / augmented_matrix[i,i]
        augmented_matrix[j,] <- augmented_matrix[j,] + (multiplier * augmented_matrix[i,])
      }
    }
  }
  
  # Extract the inverse matrix from the right half of the augmented matrix
  inverse <- augmented_matrix[, (ncol + 1):ncol*2]
  
  # Return the inverse matrix
  return(inverse)
}

# Generate a 3x3 matrix and print it
matrix_3x3 <- generate_matrix(3, 3)
print(matrix_3x3)

# Calculate the inverse using the Gauss-Jordan method and print it
inverse_3x3 <- gauss_jordan(matrix_3x3)
print(inverse_3x3)