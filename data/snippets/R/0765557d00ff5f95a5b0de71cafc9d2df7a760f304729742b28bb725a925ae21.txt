# Function to generate a fibonacci series and return the nth term
fibonacci <- function(n) {
  if(n == 1 | n == 2) { # Base case
    return(1)
  } else { # Recursive call
    return(fibonacci(n - 1) + fibonacci(n - 2))
  }
}

# Function to calculate the factorial of a number
factorial <- function(n) {
  if(n == 0) { # Base case
    return(1)
  } else { # Recursive call
    return(n * factorial(n - 1))
  }
}

# Function to calculate the power of a number
power <- function(base, exponent) {
  if(exponent == 0) { # Base case
    return(1)
  } else { # Recursive call
    return(base * power(base, exponent - 1))
  }
}

# Function to calculate the prime factors of a number
prime_factors <- function(n) {
  factors <- c() # Initialize an empty vector to store factors
  divisor <- 2 # Set initial divisor as 2
  while(n > 1) { # Loop until n becomes 1
    if(n %% divisor == 0) { # Check if divisor is a factor of n
      factors <- append(factors, divisor) # Add divisor to factors vector
      n <- n / divisor # Update n by dividing with divisor
    } else { # If divisor is not a factor, increment it by 1
      divisor <- divisor + 1
    }
  }
  return(factors)
}