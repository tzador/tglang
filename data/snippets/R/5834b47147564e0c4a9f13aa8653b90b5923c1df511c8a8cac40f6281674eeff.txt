#Creating a function that performs a binary search on a sorted vector of numbers
#Parameters:
# - nums: A sorted vector of numbers to search through
# - target: The number to search for
# - low: The lower index of the vector to search in
# - high: The higher index of the vector to search in
#Returns:
# - index: The index of the target element in the vector, or -1 if not found
binary_search <- function(nums, target, low, high) {
  #Check if vector is empty
  if (length(nums) == 0) {
    return(-1)
  }

  #Check if low is higher than high, meaning the target is not in the vector
  if (low > high) {
    return(-1)
  }

  #Calculate the middle index of the vector
  mid <- floor((low + high) / 2)

  #Check if the target is equal to the middle element
  if (target == nums[mid]) {
    return(mid)
  }
  #Check if the target is less than the middle element
  else if (target < nums[mid]) {
    #Recursive call on the left half of the vector
    return(binary_search(nums, target, low, mid - 1))
  }
  #Check if the target is greater than the middle element
  else {
    #Recursive call on the right half of the vector
    return(binary_search(nums, target, mid + 1, high))
  }
}

#Example usage
values <- c(1, 3, 5, 7, 9, 11, 13, 15)
target <- 9
result <- binary_search(values, target, 1, length(values))

#Print the result
result