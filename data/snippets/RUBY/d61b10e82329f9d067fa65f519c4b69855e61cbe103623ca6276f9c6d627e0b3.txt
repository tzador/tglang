class Person
  attr_accessor :name, :age
  def initialize(name, age)
    @name = name
    @age = age
  end

  def introduce
    puts "Hello, my name is #{@name} and I am #{@age} years old."
  end

  def age_difference(other_person)
    age_difference = (@age - other_person.age).abs
    puts "The age difference between #{@name} and #{other_person.name} is #{age_difference} years."
  end
end

person1 = Person.new("John", 28)
person1.introduce

person2 = Person.new("Sarah", 32)
person2.introduce

person1.age_difference(person2)

# Output:

/*
Class: Person
  - A class that represents a person and stores their name and age.

Attributes:
  - name [String]: the person's name
  - age [Integer]: the person's age

Methods:
  - initialize(name, age)
    - Initializes a new instance of Person with the given name and age values.
  - introduce
    - Prints a greeting that includes the person's name and age.
  - age_difference(other_person)
    - Calculates the absolute difference in age between the current person and another given person and prints the result.

Example usage:
  - person1 = Person.new("John", 28)
  - person2 = Person.new("Sarah", 32)
  - person1.introduce # Hello, my name is John and I am 28 years old.
  - person2.introduce # Hello, my name is Sarah and I am 32 years old.
  - person1.age_difference(person2) # The age difference between John and Sarah is 4 years.
*/

class Person
  # Creates getter and setter methods for the name and age attributes.
  attr_accessor :name, :age

  # Initializes a new instance of Person with the given name and age values.
  def initialize(name, age)
    @name = name
    @age = age
  end

  # Prints a greeting that includes the person's name and age.
  def introduce
    puts "Hello, my name is #{@name} and I am #{@age} years old."
  end

  # Calculates the absolute difference in age between the current person and another given person and prints the result.
  def age_difference(other_person)
    age_difference = (@age - other_person.age).abs
    puts "The age difference between #{@name} and #{other_person.name} is #{age_difference} years."
  end
end # end class Person

# Create new instances of Person and call methods on them.
# Output:
# Hello, my name is John and I am 28 years old.
# Hello, my name is Sarah and I am 32 years old.
# The age difference between John and Sarah is 4 years.
person1 = Person.new("John", 28)
person1.introduce

person2 = Person.new("Sarah", 32)
person2.introduce

person1.age_difference(person2)