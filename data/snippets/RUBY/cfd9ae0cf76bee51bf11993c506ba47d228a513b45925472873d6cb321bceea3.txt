# This is a complex code snippet in RUBY that performs a recursive merge sort on an array
# The code will recursively divide the array into smaller subarrays, sort them, and then merge them back together in sorted order

# Define the recursive mergesort function
def merge_sort(array)
    # If the array only has one element, return it
    if array.length <= 1
        return array
    end

    # Calculate the middle index of the array
    mid = array.length / 2

    # Recursively sort the left half of the array
    left_half = merge_sort(array[0...mid])

    # Recursively sort the right half of the array
    right_half = merge_sort(array[mid...array.length])

    # Merge the sorted left and right halves together
    merge(left_half, right_half)
end

# Define the merge function that takes in two sorted arrays and returns a single merged sorted array
def merge(left_arr, right_arr)
    # Initialize variables to keep track of indices
    result = []
    left_index = 0
    right_index = 0

    # Loop through both arrays and compare the elements at the current indices
    while left_index < left_arr.length && right_index < right_arr.length
        # If the left element is smaller, add it to the result array and increment the left index
        if left_arr[left_index] <= right_arr[right_index]
            result << left_arr[left_index]
            left_index += 1
        # If the right element is smaller, add it to the result array and increment the right index
        else
            result << right_arr[right_index]
            right_index += 1
        end
    end

    # Add any remaining elements from either array to the result array
    result.concat(left_arr[left_index..-1]) if left_index < left_arr.length
    result.concat(right_arr[right_index..-1]) if right_index < right_arr.length

    # Return the sorted result array
    return result
end

# Create an unsorted array to test the function
array = [8, 3, 1, 7, 5, 4, 10, 2]

# Call the merge sort function on the array
sorted_array = merge_sort(array)

# Print out the sorted array
p sorted_array # Output: [1, 2, 3, 4, 5, 7, 8, 10]