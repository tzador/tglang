def quicksort(array, left = 0, right = array.length - 1)
   # Set the pivot as the right-most element
   pivot = array[right]
   # Set the pointer to track elements less than the pivot
   i = left
   # Set the pointer to track elements greater than the pivot
   j = right - 1

   # Loop until the pointers meet
   while i <= j
     # Move the left pointer until it encounters an element greater than the pivot
     i += 1 while array[i] < pivot
     # Move the right pointer until it encounters an element less then the pivot
     j -= 1 while array[j] > pivot
     # If the pointers still haven't crossed, swap the elements at their respective positions
     if i < j
       array[i], array[j] = array[j], array[i]
     end
   end

   # After the loop, swap the pivot with the element at the right pointer
   array[i], array[right] = array[right], array[i]

   # Recursively apply quicksort to the subarrays left and right of the pivot until the array is sorted
   quicksort(array, left, i - 1) if left < i - 1
   quicksort(array, i + 1, right) if i + 1 < right
 end
 
 # Example input and output
 array = [4, 2, 7, 1, 3, 5]
 quicksort(array)
 # Output: [1, 2, 3, 4, 5, 7]