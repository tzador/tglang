# This code snippet creates a Board class with methods to set up and print a grid for a tic-tac-toe game.
class Board
  # Initialize method to create a new board with empty spaces.
  def initialize
    @grid = Array.new(3) { Array.new(3, " ") }
  end

  # Method to print the board.
  def print_board
    # Print column numbers above board.
    puts "  1 2 3"
    # Loop through each row in the grid.
    @grid.each_with_index do |row, i|
      # Print row number to the left of the board.
      print "#{i+1} "
      # Loop through each element in the row.
      row.each do |ele|
        # Print element with vertical line separators.
        print "| #{ele} "
      end
      # Print closing vertical line and move to next line.
      puts "|"
      # Print horizontal line separators between rows.
      puts "  ---------" if i < 2
    end
  end

  # Method to place a marker on the board.
  def place_marker(row, col, marker)
    # Check if given coordinates are within range.
    if row.between?(1, 3) && col.between?(1, 3)
      # Check if space is already occupied.
      if @grid[row-1][col-1] == " "
        # Place the marker in the given space.
        @grid[row-1][col-1] = marker
      else
        # If space is already occupied, raise an error.
        raise "Space already occupied."
      end
    else
      # If coordinates are out of range, raise an error.
      raise "Invalid coordinates."
    end
  end

  # Method to check if the game has been won.
  def game_won?
    # Check rows for three in a row.
    for i in 0..2
      return true if @grid[i].all?(@grid[i][0]) && @grid[i][0] != " "
    end
    # Check columns for three in a row.
    for j in 0..2
      return true if @grid.transpose[j].all?(@grid.transpose[j][0]) && @grid.transpose[j][0] != " "
    end
    # Check diagonals for three in a row.
    return true if [@grid[0][0], @grid[1][1], @grid[2][2]].all?(@grid[0][0]) && @grid[0][0] != " "
    return true if [@grid[0][2], @grid[1][1], @grid[2][0]].all?(@grid[0][2]) && @grid[0][2] != " "
    # If no three in a row found, return false.
    false
  end

  # Method to check if the game is a draw.
  def game_draw?
    # Check if all spaces are filled.
    return true if @grid.flatten.none?(" ")
    # If spaces are still available, return false.
    false
  end
end