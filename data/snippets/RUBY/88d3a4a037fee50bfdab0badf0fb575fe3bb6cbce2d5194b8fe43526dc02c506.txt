#Method to generate a Fibonacci sequence of specified length
def fibonacci(length)
  sequence = [0, 1] #Initialize sequence with first two fibonacci numbers
  until sequence.length == length #Continue adding numbers until sequence is of specified length
    sequence << sequence[-1] + sequence[-2] #New number is sum of last two numbers in sequence
  end
  return sequence #Return the generated fibonacci sequence
end

#Method to check if a number is prime
def is_prime(number)
  if number <= 1 #Check for edge cases
    return false
  elsif number <= 3
    return true
  elsif number % 2 == 0 || number % 3 == 0 #Check divisibility by 2 and 3
    return false
  end
  i = 5 #Initialize counter for dividing numbers
  while i * i <= number #Loop while the square of i is less than or equal to the number
    if number % i == 0 || number % (i + 2) == 0 #Check divisibility by current number and the next consecutive number
      return false
    end
    i += 6 #Increment i by 6 after checking the above conditions
  end
  return true #Return true if none of the above conditions are met
end

#Method to generate an array of specified length containing prime numbers from fibonacci sequence
def prime_fibonacci(length)
  fibonacci_sequence = fibonacci(length) #Generate fibonacci sequence of specified length
  prime_fibonacci_array = [] #Initialize empty array to store prime numbers
  fibonacci_sequence.each do |num| #Loop through each number in fibonacci sequence
    if is_prime(num) #Check if the number is prime using above method
      prime_fibonacci_array << num #Add the prime number to the array
    end
  end
  return prime_fibonacci_array #Return the array of prime numbers from fibonacci sequence
end

#Example usage and output
prime_fibonacci(10) #Returns [2, 3, 5, 13, 89, 233, 1597, 28657, 514229, 5702887]