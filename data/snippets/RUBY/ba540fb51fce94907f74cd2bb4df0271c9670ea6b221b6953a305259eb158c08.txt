# This code snippet is a complex sorting algorithm using recursion
# It takes in an array of numbers and sorts them in ascending order using the QuickSort method

# Define the QuickSort method
def quicksort(array)
    # Base case for recursion - return the array if it only contains one element
    return array if array.length <= 1
    
    # Set the pivot point as the first element in the array
    pivot = array[0]
    
    # Define the left and right subarrays
    left = array[1..-1].select { |num| num <= pivot }
    right = array[1..-1].select { |num| num > pivot }
    
    # Use recursion to call the QuickSort method on the left and right subarrays
    sorted_left = quicksort(left)
    sorted_right = quicksort(right)
    
    # Return the sorted left and right subarrays with the pivot point in the middle
    sorted_left + [pivot] + sorted_right
end

# Example input array
input_array = [5, 2, 7, 1, 10, 4]

# Call the QuickSort method on the input array
sorted_array = quicksort(input_array)

# Print the sorted array
puts sorted_array #=> [1, 2, 4, 5, 7, 10]