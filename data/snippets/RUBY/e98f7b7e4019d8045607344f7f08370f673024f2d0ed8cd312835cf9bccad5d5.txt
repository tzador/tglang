# This code demonstrates the use of recursion and dynamic programming to solve the Knapsack problem.

# Define method to calculate maximum value with given weight limit and items
def knapsack(weight_limit, items)
    # Define a memoization hash for storing calculated values
    memo = {}

    # Define recursive function with parameters for weight limit and items to choose from
    def ks_recursive(weight_limit, items)
        # Check memoization hash for previously calculated value
        return memo[[weight_limit, items]] if memo[[weight_limit, items]]

        # Check base cases
        return 0 if weight_limit == 0 || items.size == 0

        # If item at first index is too heavy, call function again with remaining items
        if items[0][:weight] > weight_limit
            result = ks_recursive(weight_limit, items[1..-1])
        # Otherwise, calculate maximum value with and without including the item
        else
            # Maximum value without including the item
            result = ks_recursive(weight_limit, items[1..-1])
            # Maximum value with including the item
            result_with_item = items[0][:value] + ks_recursive(weight_limit - items[0][:weight], items[1..-1])
            # Choose the greater of the two values
            result = [result, result_with_item].max
        end

        # Memoize the result
        memo[[weight_limit, items]] = result

        # Return the calculated result
        return result
    end

    # Call recursive function and return the result
    return ks_recursive(weight_limit, items)
end

# Example usage
puts knapsack(10, [{weight: 5, value: 10}, {weight: 4, value: 40}, {weight: 6, value: 30}, {weight: 3, value: 50}])
=> 90 // Maximum value that can be achieved with a weight limit of 10 and the given items is 90