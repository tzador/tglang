# This is a class that represents a car
class Car
  # Define the attributes of a car, with accessors and mutators
  attr_accessor :make, :model, :year, :color

  # Define a method to initialize the car with its attributes
  def initialize(make, model, year, color)
    # Set the values of the attributes to the given parameters
    @make = make
    @model = model
    @year = year
    @color = color
  end

  # Define a method to start the car
  def start
    puts "Starting the #{@year} #{@make} #{@model}..."
    # Set a random number of miles driven for the car
    @miles_driven = rand(10000) + 5000
  end

  # Define a method to drive the car a certain number of miles
  def drive(miles)
    puts "Driving the car for #{miles} miles..."
    # Update the number of miles driven for the car
    @miles_driven += miles
  end

  # Define a method to get the current value of the car based on its attributes
  def value
    # Calculate the value of the car based on its year and miles driven
    # The newer the car and the fewer miles driven, the higher the value
    value = ((2021 - @year) * 1000) + (10000 - @miles_driven)
    # Return the value of the car
    return value
  end
end

# Create two instances of the Car class with different attributes
car1 = Car.new("Toyota", "Camry", 2015, "red")
car2 = Car.new("Honda", "Accord", 2010, "blue")

# Start the first car
car1.start
# Drive the first car for 100 miles
car1.drive(100)

# Output the current value of the first car
puts "The value of the #{car1.color} #{car1.year} #{car1.make} #{car1.model} after driving 100 miles is $#{car1.value}."

# Start the second car
car2.start
# Drive the second car for 500 miles
car2.drive(500)

# Output the current value of the second car
puts "The value of the #{car2.color} #{car2.year} #{car2.make} #{car2.model} after driving 500 miles is $#{car2.value}."