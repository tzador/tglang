# This code snippet generates a hash with nested arrays and hashes inside it
def generate_hash()
    hash = { "cars" => ["Audi", "BMW", "Tesla"], "fruits" => ["apples", "oranges", "bananas"], 
    "people" => [{"name" => "John", "age" => 30, "occupation" => "teacher"}, 
                 {"name" => "Mary", "age" => 25, "occupation" => "engineer"}, 
                 {"name" => "Mike", "age" => 40, "occupation" => "doctor"}] }
    return hash
end

# This method takes in a hash as a parameter and flattens it into a single array
def flatten_hash(hash)
    flattened_array = []
    hash.each do |key, value|
        if value.is_a?(Hash)
            flattened_array.concat(flatten_hash(value))
        else
            flattened_array << value
        end
    end
    return flattened_array
end

# This method takes in a hash as a parameter and returns the sum of values in the hash
def calculate_sum(hash)
    sum = 0
    hash.each do |key, value|
        if value.is_a?(Hash)
            sum += calculate_sum(value)
        elsif value.is_a?(Array)
            sum += value.sum
        else
            sum += value
        end
    end
    return sum
end

# Call the generate_hash() method to create a hash and store it in a variable
nested_hash = generate_hash()

# Flatten the hash into a single array and store it in a variable
flattened_array = flatten_hash(nested_hash)

# Calculate the sum of values in the hash and store it in a variable
sum = calculate_sum(nested_hash)

# Print out the original nested hash, flattened array, and sum of values in the hash
puts "Nested Hash: #{nested_hash}"
puts "Flattened Array: #{flattened_array}"
puts "Sum of Values: #{sum}"