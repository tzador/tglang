# This code snippet generates a class for creating and manipulating polynomials

# Define the Polynomial class
class Polynomial
  # Constructor to initialize the polynomial with coefficients (highest power to lowest)
  def initialize(coefficients)
    @coefficients = coefficients
  end

  # Method to return the degree of the polynomial
  def degree
    @coefficients.length - 1
  end

  # Method to evaluate the polynomial for a given value of x
  def evaluate(x)
    result = 0
    @coefficients.each_with_index do |coefficient, index|
      result += coefficient * (x ** (@coefficients.length - index - 1))
    end
    result
  end

  # Method to add two polynomials together
  def add(other)
    # Find the polynomial with the larger degree
    larger_poly = @coefficients.length > other.coefficients.length ? self : other
    # Find the polynomial with the smaller degree
    smaller_poly = @coefficients.length < other.coefficients.length ? self : other
    # Create a new coefficient array with the size of the larger polynomial
    result_coefficients = Array.new(larger_poly.coefficients.length)
    result_coefficients.map!.with_index do |_, index|
      # Add coefficients of smaller polynomial to result
      if smaller_poly.coefficients[index].nil?
        larger_poly.coefficients[index]
      # Add coefficients of both polynomials if degree is the same
      elsif larger_poly.coefficients[index] == smaller_poly.coefficients[index]
        larger_poly.coefficients[index] + smaller_poly.coefficients[index]
      # Add coefficients of larger polynomial if degrees are different
      else
        larger_poly.coefficients[index]
      end
    end
    # Create a new polynomial with the resulting coefficients
    Polynomial.new(result_coefficients)
  end

  # Method to subtract one polynomial from another
  def subtract(other)
    # Invert coefficients of other polynomial by multiplying by -1
    inverted_coefficients = other.coefficients.map { |coefficient| coefficient * -1 }
    # Create a new polynomial with the inverted coefficients
    inverted_poly = Polynomial.new(inverted_coefficients)
    # Add the inverted polynomial to the original polynomial
    self.add(inverted_poly)
  end

  # Method to multiply two polynomials together
  def multiply(other)
    # Find the total degree of the resulting polynomial
    total_degree = self.degree + other.degree
    # Create a new coefficient array with the size of the total degree
    result_coefficients = Array.new(total_degree + 1, 0)
    # Use nested loops to multiply each term of both polynomials
    @coefficients.each_with_index do |coefficient1, index1|
      other.coefficients.each_with_index do |coefficient2, index2|
        result_coefficients[index1 + index2] += coefficient1 * coefficient2
      end
    end
    # Create a new polynomial with the resulting coefficients
    Polynomial.new(result_coefficients)
  end

  # Method to raise a polynomial to a given power
  def power(power)
    # Create a new polynomial with the same coefficients
    result = Polynomial.new(@coefficients.dup)
    # Multiply the polynomial by itself power times
    (power - 1).times { result = result.multiply(self) }
    result
  end

  # Method to print the polynomial in standard notation
  def to_s
    polynomial_string = ""
    # Loop through each coefficient and degree
    @coefficients.each_with_index do |coefficient, index|
      # Skip if coefficient is 0
      next if coefficient == 0
      # Handle special cases when coefficient is 1 or -1
      if coefficient == 1 && index == @coefficients.length - 1
        polynomial_string += "x^#{index}"
      elsif coefficient == 1
        polynomial_string += " + x^#{index}"
      elsif coefficient == -1
        polynomial_string += " - x^#{index}"
      # Add coefficient and degree to string
      else
        polynomial_string += " + #{coefficient}x^#{index}"
      end
    end
    # Remove the extra "+" sign at the start of the string
    polynomial_string[0] = "" if polynomial_string[0] == "+"
    # Return the polynomial string
    polynomial_string
  end
end

# Example usage:
# Create a polynomial with coefficients 3x^3 + 5x^2 - 2x + 1
poly1 = Polynomial.new([3, 5, -2, 1])
# Create a polynomial with coefficients 4x^2 - 3x
poly2 = Polynomial.new([4, -3])
# Evaluate poly1 for x = 2
poly1.evaluate(2) #=> 31
# Add poly1 to poly2
poly1.add(poly2).to_s #=> "3x^3 + 9x^2 - 5x + 1"
# Subtract poly2 from poly1
poly1.subtract(poly2).to_s #=> "3x^3 + x^2 - 2x + 1"
# Multiply poly1 by poly2
poly1.multiply(poly2).to_s #=> "12x^5 + 7x^4 - 24x^3 + 17x^2 - 5x + 1"
# Raise poly1 to the power of 3
poly1.power(3).to_s #=> "27x^9 + 135x^8 - 252x^7 + 180x^6 - 99x^5 + 39x^4 - 14x^3 + 3x^2 + 6x + 1"