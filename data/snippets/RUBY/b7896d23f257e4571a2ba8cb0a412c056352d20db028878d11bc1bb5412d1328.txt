## Function to generate a list of Fibonacci numbers
## Input: number of elements in the list
## Output: list of Fibonacci numbers
def generate_fibonacci(num_elements)
  nums = []
  prev = 0
  curr = 1
  num_elements.times do
    temp = curr
    curr += prev
    prev = temp
    nums.push(prev)
  end
  return nums
end

## Function to calculate the factorial of a number using recursion
## Input: number to calculate factorial
## Output: factorial of the input number
def factorial(num)
  if num == 0
    return 1
  else
    return num * factorial(num-1)
  end
end

## Function to check if a number is prime
## Input: number to check
## Output: boolean value, true if prime, false otherwise
def is_prime(num)
  if num <= 1
    return false
  elsif num == 2
    return true
  else
    (2..Math.sqrt(num)).each do |i|
      if num % i == 0
        return false
      end
    end
    return true
  end
end

## Driver code to test the functions
fibonacci_list = generate_fibonacci(10)
puts "Fibonacci numbers: #{fibonacci_list}"

num_to_factorial = 5
factorial_of_num = factorial(num_to_factorial)
puts "Factorial of #{num_to_factorial}: #{factorial_of_num}"

num_to_check = 17
if is_prime(num_to_check)
  puts "#{num_to_check} is a prime number"
else
  puts "#{num_to_check} is not a prime number"
end