# This code snippet solves Sudoku puzzles using a backtracking algorithm
class SudokuSolver
  # method to check if the board is a valid Sudoku board
  def valid_sudoku?(board)
    # create hash tables to keep track of seen numbers in each row/column/subgrid
    row_hash = {}
    col_hash = {}
    subgrid_hash = {}
    
    # loop through each row of the board
    board.each_with_index do |row, row_index|
      # loop through each number in the row
      row.each_with_index do |num, col_index|
        # check if the number is already seen in the row
        if row_hash[row_index]
          return false if row_hash[row_index].include?(num)
        else
          row_hash[row_index] = [num]
        end
        
        # check if the number is already seen in the column
        if col_hash[col_index]
          return false if col_hash[col_index].include?(num)
        else
          col_hash[col_index] = [num]
        end
        
        # calculate which subgrid the current number belongs to
        subgrid_row = (row_index / 3)
        subgrid_col = (col_index / 3)
        subgrid_index = (subgrid_row * 3) + subgrid_col
        
        # check if the number is already seen in the subgrid
        if subgrid_hash[subgrid_index]
          return false if subgrid_hash[subgrid_index].include?(num)
        else
          subgrid_hash[subgrid_index] = [num]
        end
      end
    end
    
    # if all checks pass, the board is a valid Sudoku board
    return true 
  end
  
  # method to solve the Sudoku puzzle using backtracking algorithm
  def solve_sudoku(board)
    # loop through each row of the board
    board.each_with_index do |row, row_index|
      # loop through each number in the row
      row.each_with_index do |num, col_index|
        # check if the current cell is empty (represented by 0)
        if num == 0
          # loop through each possible number from 1 to 9
          (1..9).each do |possible_num|
            # check if the number is a valid choice for the current cell
            if valid_choice?(board, row_index, col_index, possible_num)
              # assign the number to the current cell
              board[row_index][col_index] = possible_num
              
              # recursively call solve_sudoku method to fill in the next empty cell
              if solve_sudoku(board)
                # if the board is solved, return true
                return true
              else
                # if the board is not solved, reset the current cell to 0 and try the next possible number
                board[row_index][col_index] = 0
              end
            end
          end
          
          # if none of the possible numbers work, the current board is unsolvable
          return false
        end
      end
    end
    
    # if all cells are filled, the Sudoku puzzle is solved
    return true
  end
  
  # method to check if a number is a valid choice for a specific cell on the board
  def valid_choice?(board, row, col, num)
    # check if the number is already seen in the same row
    return false if board[row].include?(num)
    
    # check if the number is already seen in the same column
    return false if board.transpose[col].include?(num)
    
    # calculate the subgrid the current cell belongs to
    subgrid_row = (row / 3)
    subgrid_col = (col / 3)
    subgrid_start_row = (subgrid_row * 3)
    subgrid_start_col = (subgrid_col * 3)
    
    # loop through the subgrid and check if the number is already seen
    (subgrid_start_row..subgrid_start_row + 2).each do |r|
      (subgrid_start_col..subgrid_start_col + 2).each do |c|
        return false if board[r][c] == num
      end
    end
    
    # if all checks pass, the number is a valid choice for the current cell
    return true
  end
end

# example Sudoku board for testing purposes - each row is a sub-array
board = [[5,3,0,0,7,0,0,0,0],
         [6,0,0,1,9,5,0,0,0],
         [0,9,8,0,0,0,0,6,0],
         [8,0,0,0,6,0,0,0,3],
         [4,0,0,8,0,3,0,0,1],
         [7,0,0,0,2,0,0,0,6],
         [0,6,0,0,0,0,2,8,0],
         [0,0,0,4,1,9,0,0,5],
         [0,0,0,0,8,0,0,7,9]]

# create an instance of SudokuSolver class and call the solve_sudoku method on the board
sudoku_solver = SudokuSolver.new
sudoku_solver.solve_sudoku(board)

# print the solved board
puts "Solved Sudoku board:"
board.each do |row|
  puts row.join(" ")
end