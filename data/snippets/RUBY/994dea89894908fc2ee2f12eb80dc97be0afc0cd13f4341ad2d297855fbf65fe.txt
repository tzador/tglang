# This code snippet sorts an array using the quicksort algorithm

# Method to partition the array
def partition(arr, low, high)
  # set pivot element as last element of array
  pivot = arr[high]

  # set index of smaller element to start at beginning
  i = low - 1

  # loop through the array
  for j in low..high do
    # if current element is smaller than pivot
    if arr[j] < pivot
      # increment index of smaller element 
      i += 1
      # swap elements at index i and j
      arr[i], arr[j] = arr[j], arr[i]
    end
  end
  # swap pivot element with element at index i+1
  arr[i+1], arr[high] = arr[high], arr[i+1]
  # return index i+1
  return i+1
end

# Method to perform quicksort on the array
def quicksort(arr, low, high)
  # check if low index is less than high index
  if low < high
    # call partition method and get partition index
    partition_index = partition(arr, low, high)
    # recursively call quicksort on left and right subarrays
    quicksort(arr, low, partition_index-1)
    quicksort(arr, partition_index+1, high)
  end
end

# Example array to be sorted
arr = [10, 7, 8, 9, 1, 5]

# Call quicksort method on the array
quicksort(arr, 0, arr.length-1)

# Print sorted array
puts "Sorted Array:"
puts arr

# Output:
# Sorted Array:
# [1, 5, 7, 8, 9, 10]