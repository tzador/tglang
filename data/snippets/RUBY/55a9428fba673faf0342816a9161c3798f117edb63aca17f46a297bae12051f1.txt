# This code snippet uses a class to create a sorting algorithm in Ruby.
# The algorithm implements the quicksort method to sort an array of integers.
# The partition method is used to divide the array into smaller subarrays and recursively sort them.
# The main function takes in an array and calls the quicksort method on it.

class Sort
  # Define a method to partition the array into smaller subarrays
  def partition(array, low, high)
    # Set pivot as the last element in the array
    pivot = array[high]
    # Set the starting index of the smaller subarray
    i = low - 1
    # Loop through the array from low to high-1 index
    for j in low..high-1 do
      # If the current element is less than or equal to the pivot, swap it with the element at i+1
      if array[j] <= pivot
        i += 1
        array[i], array[j] = array[j], array[i]
      end
    end
    # Swap the pivot with the element at i+1 to place it in the correct position
    array[i+1], array[high] = array[high], array[i+1]
    # Return the index of the pivot
    return i+1
  end

  # Define a method to recursively call the partition method and sort the subarrays
  def quicksort(array, low, high)
    # Check if low is less than high to make sure we still have elements to sort
    if low < high
      # Call partition to get the index of the pivot
      pivot = partition(array, low, high)
      # Recursively call quicksort on the left and right subarrays around the pivot
      quicksort(array, low, pivot-1)
      quicksort(array, pivot+1, high)
    end
  end
end

# Create an instance of the Sort class
sort = Sort.new
# Define an array to be sorted
array = [5, 2, 8, 3, 9, 1]
# Sort the array using quicksort
sort.quicksort(array, 0, array.length-1)
# Print the sorted array
puts array #=> [1, 2, 3, 5, 8, 9]