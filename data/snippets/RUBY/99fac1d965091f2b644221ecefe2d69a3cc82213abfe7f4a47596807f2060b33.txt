# This code generates a random password of specified length
# and checks for password complexity

# Method to generate random password
def generate_password(length)
  password = ''
  characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()-=_+'
  length.times { password << characters[rand(characters.size)] }
  password
end

# Prompt user for password length
print "Enter desired password length: "

# Get user input for password length
length = gets.chomp.to_i

# Check if password length is long enough for complexity
if length < 8
  puts 'Password should be at least 8 characters long.'
else
  # Generate password
  password = generate_password(length)

  # Check password complexity
  if password.match(/[a-z]/) && password.match(/[A-Z]/) && password.match(/\d/) && password.match(/[!@#$%^&*()-=_+]/)
    puts "Your new password is: #{password}"
  else
    puts 'Password should include at least one lowercase letter, one uppercase letter, one number, and one special character.'
  end
end