# This code snippet uses a class to create a sorted linked list with insertion methods

# Definition of the Node class with attributes for data and next node
class Node
  attr_accessor :data, :next

  # Initializer for the Node class
  def initialize(data)
    @data = data
    @next = nil
  end
end

# Definition of the SortedList class with attributes for head and size
class SortedList
  attr_accessor :head, :size

  # Initializer for SortedList class
  def initialize()
    @head = nil
    @size = 0
  end

  # Method to add a new node to the sorted list
  def add(new_data)
    # Create a new node with the given data
    new_node = Node.new(new_data)

    # If the list is empty, set the new node as head
    # Otherwise, iterate through the list to find the appropriate position
    if @head == nil
      @head = new_node
    else
      current = @head
      previous = nil

      while current != nil && current.data <= new_data
        previous = current
        current = current.next
      end

      # If new node needs to be inserted at the beginning,
      # set head and update next node pointers accordingly
      if previous == nil
        new_node.next = @head
        @head = new_node
      # Otherwise, insert the new node in the middle or at the end of the list
      else
        new_node.next = current
        previous.next = new_node
      end
    end

    # Increase the size of the list by 1
    @size += 1
  end

  # Method to print the elements of the list
  def print_list()
    current = @head

    # Iterate through the list and print the data
    while current != nil
      print "#{current.data} "
      current = current.next
    end
    puts
  end
end

# Create a new sorted list
list = SortedList.new()

# Add elements to the list
list.add(5)
list.add(3)
list.add(9)
list.add(1)

# Print the elements of the list
list.print_list()

# Output:
# 1 3 5 9