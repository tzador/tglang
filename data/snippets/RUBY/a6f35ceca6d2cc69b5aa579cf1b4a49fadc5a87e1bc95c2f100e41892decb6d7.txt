# Function that checks if a number is prime
def prime?(number)
  return false if number <= 1 # numbers less than or equal to 1 are not prime
  (2..Math.sqrt(number)).none? { |i| number % i == 0 } # checks if any number between 2 and the square root of the given number divides evenly into it, if none do then it is prime
end

# Method that generates an array of prime numbers up to a given limit
def generate_prime_array(limit)
  primes = [] # empty array to store prime numbers
  (2..limit).each do |i|
    if prime?(i) # checks if the current number is prime
      primes << i # if it is, add it to the primes array
    end
  end
  primes # returns the array of prime numbers
end

# Method that takes in a string and returns the length of the longest word
def longest_word_length(str)
  words = str.split(" ") # splits the string into an array of words
  longest = words[0].length # sets the initial longest word length to the first word
  words.each do |word|
    if word.length > longest # checks if the current word is longer than the current known longest word
      longest = word.length # if it is, sets the longest variable to the length of the current word
    end
  end
  longest # returns the length of the longest word
end

# Method that checks if a string is a palindrome, ignoring case and non-word characters
def palindrome?(str)
  word = str.downcase.gsub(/[^a-z]/, "") # removes all non-word characters and converts the string to lowercase
  word == word.reverse # checks if the reversed word is equal to the original word, returns true if it is a palindrome
end

# Example usage of the methods
puts prime?(17) # output: true
puts generate_prime_array(10) # output: [2, 3, 5, 7]
puts longest_word_length("The quick brown fox jumps over the lazy dog") # output: 5
puts palindrome?("Racecar") # output: true