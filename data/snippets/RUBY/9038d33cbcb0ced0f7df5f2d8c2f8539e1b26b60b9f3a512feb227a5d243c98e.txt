# This code snippet creates a custom sorting method, using the bubble sort algorithm.

# define a method called bubble_sort that takes an array as input
def bubble_sort(arr)
  # define a variable, n, equal to the length of the input array
  n = arr.length
  # create a loop that will run for the length of the input array
  loop do
    # a variable, swapped, is used to determine if any values have been swapped in the loop
    swapped = false
    # create a separate loop that will go through each element in the array
    (n-1).times do |i|
      # compare the current element to the next element in the array
      # if the current element is larger than the next element, swap their positions
      if arr[i] > arr[i+1]
        arr[i], arr[i+1] = arr[i+1], arr[i]
        # set the swapped variable to true to indicate a swap has occurred
        swapped = true
      end
    end
    # if no swaps have occurred in the loop, the array is already sorted and the loop can end
    break if not swapped
  end
  # return the sorted array
  arr
end

# example input array for testing
arr = [1, 5, 3, 2, 6, 4]

# call the bubble_sort method on the input array
sorted_array = bubble_sort(arr)

# output the sorted array
puts sorted_array #=> [1, 2, 3, 4, 5, 6]