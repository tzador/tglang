def fibonacci(n)
  if n <= 1
    return n
  else
    return (fibonacci(n-1) + fibonacci(n-2))
  end
end

# Function to generate n terms of Fibonacci sequence
# Input: n - integer representing the number of terms to generate
# Output: an array of n terms in the Fibonacci sequence
def generate_fibonacci_sequence(n)
  sequence = [0, 1] # Initialize sequence with first two terms
  for i in 2..n-1 # Loop through remaining n-2 terms
    sequence[i] = sequence[i-1] + sequence[i-2] # Add previous two terms to generate next term
  end
  return sequence
end

# Example usage:
# Generating the first 10 terms of Fibonacci sequence
puts generate_fibonacci_sequence(10) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

# Alternatively, you can also use the recursive function 'fibonacci(n)' to generate the terms individually.
puts fibonacci(5) # Output: 5 (since Fibonacci sequence starts at 0 and 1, the 5th term is the 5th number in the sequence)

# Note: The Fibonacci sequence has a golden ratio property, where the ratio of consecutive terms approaches 1.618...
# To see this property in action, let's generate the first 20 terms of the sequence and calculate the ratio for each pair of consecutive terms.
terms = generate_fibonacci_sequence(20)
ratios = [] # An array to store the ratio of consecutive terms
for i in 1..terms.length-1
  ratios[i-1] = terms[i] / float(terms[i-1]) # Calculate ratio and store in array
end
puts ratios # Output: 1.0, 2.0, 1.5, 1.6666666666666667, 1.6, 1.625, 1.6153846153846154, 1.619047619047619, 1.6176470588235294, 1.6181818181818182, 1.6179775280898876, 1.6180555555555556, 1.6180257510729614, 1.6180371352785146, 1.618032786885246, 1.618034447821682, 1.6180338134001254, 1.618034055727554, 1.6180339631667064

# As we can see, the ratios are getting closer to the golden ratio (1.618...) with each consecutive pair of terms.