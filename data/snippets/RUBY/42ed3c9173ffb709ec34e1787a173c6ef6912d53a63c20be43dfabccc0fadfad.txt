# This is a complex function that takes in two arrays and returns the intersection of the two. 
# The intersection is a new array that contains elements that are common in both input arrays.

def intersection(array1, array2)
    # Create an empty hash to store the elements and their frequencies in array1
    hash1 = Hash.new(0)
    
    # Loop through each element in array1 and add it to the hash with a frequency count of 1
    array1.each do |element|
        hash1[element] += 1
    end
    
    # Create an empty hash to store the elements and their frequencies in array2
    hash2 = Hash.new(0)
    
    # Loop through each element in array2 and add it to the hash with a frequency count of 1
    array2.each do |element|
        hash2[element] += 1
    end
    
    # Create a new array to store the intersection elements
    intersection = []
    
    # Loop through each key-value pair in hash1
    hash1.each do |key, value|
        # Check if the key exists in hash2 and has a frequency of at least 1
        if hash2.has_key?(key) && hash2[key] >= 1
            # Add the key to the intersection array the minimum frequency times
            [value, hash2[key]].min.times do
                intersection << key
            end
        end
    end
    
    # Return the intersection array
    return intersection
end

# Example inputs
array1 = [1, 2, 3, 4, 5]
array2 = [3, 4, 5, 6, 7]

# Call the intersection function with the example inputs and print the result
puts intersection(array1, array2)  # Output: [3, 4, 5] (because these are the common elements between array1 and array2)