# This method displays the sum of two given numbers using recursion
#
# Arguments:
#   - x: Integer, the first number to be added
#   - y: Integer, the second number to be added
#
# Returns:
#   Integer, the sum of the two given numbers
def add(x, y)
  return y if x.zero?
  return x if y.zero?

  # Converting the given numbers to strings in order to access individual digits
  # and then splitting the strings to get an array of digits
  x_digits = x.to_s.split('')
  y_digits = y.to_s.split('')

  # Iterating through both arrays of digits simultaneously and adding the corresponding digits
  # along with the carry over from the previous addition
  result = []
  carry = 0

  while !x_digits.empty? || !y_digits.empty? do
    # Popping the last element from both arrays if they're not empty, or assigning 0 if they are
    x_digit = x_digits.empty? ? 0 : x_digits.pop.to_i
    y_digit = y_digits.empty? ? 0 : y_digits.pop.to_i

    # Calculating the sum of the two digits and adding the carry over from the previous addition
    sum = x_digit + y_digit + carry

    # If the sum is larger than 9, then we get a carry over for the next addition
    carry = sum / 10 if sum > 9

    # Taking only the last digit of the sum, since that's what we need to add to our result
    result << sum % 10
  end

  # If the carry over is greater than zero after all additions are done,
  # we append it to the end of our result
  result << carry if carry > 0

  # Reversing the result since we added the digits from right to left
  result.reverse.join.to_i
end