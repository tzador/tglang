class BankAccount
  # Declares a class named BankAccount with 3 attributes (variables)
  attr_reader :account_number, :balance, :interest_rate

  # Initializes the class with account number, balance and interest rate
  def initialize(account_number, balance, interest_rate)
    @account_number = account_number
    @balance = balance
    @interest_rate = interest_rate
  end

  # Adds a method to deposit money into the account and updates the balance
  def deposit(amount)
    @balance += amount
    puts "#{amount} deposited into account #{account_number}."
  end

  # Adds a method to withdraw money from the account and updates the balance
  def withdraw(amount)
    if amount > @balance
      puts "Insufficient funds in account #{account_number}."
    else
      @balance -= amount
      puts "#{amount} withdrawn from account #{account_number}."
    end
  end

  # Adds a method to calculate interest and update the balance
  def add_interest
    interest = @balance * (@interest_rate / 100)
    @balance += interest
    puts "Interest of #{interest} added to account #{account_number}."
  end
end

# Creates a new instance of the BankAccount class with given attributes
account1 = BankAccount.new("123456", 1000, 1.5)

# Calls the deposit, withdraw and add_interest methods on the account1 object
account1.deposit(500)
account1.withdraw(200)
account1.add_interest()

# Prints the updated balance of the account
puts "Balance of account #{account1.account_number}: #{account1.balance}"