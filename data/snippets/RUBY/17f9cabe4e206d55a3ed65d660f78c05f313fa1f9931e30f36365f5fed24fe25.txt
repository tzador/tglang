# Generates an array of random integers
numbers = Array.new(10) { rand(1..100) }

# Uses quicksort algorithm to sort the array
def quicksort(arr)
  # The partition method assigns a pivot value and sorts the array into two halves
  def partition(arr, low, high)
    # Partition value is set as the last value in the array
    pivot = arr[high]
    # Sentinel value to mark the end of the lowest values in the array
    i = low - 1
    # Loop through the array and compare each value with the pivot
    for j in low..(high - 1)
      # If the value is smaller than the pivot, swap it with the value at the sentinel position
      if arr[j] < pivot
        i += 1
        arr[i], arr[j] = arr[j], arr[i]
      end
    end
    # Swap the pivot value with the value at the position following the sentinel
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    # Return the index of the pivot so the array can be split into two halves
    return i + 1
  end

  # Sorts the array by recursively calling the partition method on subarrays
  def qsort(arr, low, high)
    if low < high
      # Get the index of the pivot
      p = partition(arr, low, high)
      # Use the pivot index to split the array and call qsort on the subarrays
      qsort(arr, low, p - 1)
      qsort(arr, p + 1, high)
    end
  end

  # Call qsort on the entire array
  qsort(arr, 0, arr.length - 1)
end

# Print original array and sorted array
puts "Original Array: " + numbers.inspect
quicksort(numbers)
puts "Sorted Array: " + numbers.inspect