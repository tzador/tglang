# This code snippet performs a binary search algorithm on a sorted array
# using recursion

# Function to perform binary search recursively
# Takes in the sorted array, the element to be searched for, and the
# starting and ending indices of the array
def binary_search(array, element, low = 0, high = array.length - 1)
    
    # Base case: when the element is not present in the array
    return -1 if low > high
    
    # Calculate the middle index
    mid = (low + high) / 2
    
    # If the middle element is equal to the searched element,
    # return its index
    return mid if array[mid] == element
    
    # If the middle element is greater than the searched element,
    # search in the left half of the array
    if array[mid] > element
        high = mid - 1
        return binary_search(array, element, low, high)
    end
    
    # If the middle element is less than the searched element,
    # search in the right half of the array
    low = mid + 1
    return binary_search(array, element, low, high)
end

# Example usage
array = [1, 4, 7, 9, 13, 16, 19, 24, 29]
element = 9
binary_search(array, element)
# Output: 3 
# (since the index of 9 in the array is 3, counting from 0)