require 'prime'
 
# This function checks if a given number is prime
# and returns true if it is prime, false otherwise
def is_prime?(number)
  return false if number <= 1
  
  # Use Ruby's prime library to check if the number is divisible by any prime number
  # If any of the prime numbers is a divisor, return false
  Prime.each(number - 1) do |prime|
    if number % prime == 0
      return false
    end
  end
  
  # If the number is not divisible by any prime numbers, return true
  return true
end
 
# This function generates a list of first n prime numbers
def generate_prime_list(n)
  # Create an empty array to store the prime numbers
  prime_list = []
  
  # Start counting from 2, since 2 is the first prime number
  number = 2
  
  # Loop until the length of the prime list is equal to n
  while prime_list.length < n
    # Use the is_prime? function to check if the current number is prime
    if is_prime?(number)
      # If it is prime, add it to the prime list
      prime_list << number
    end
    
    # Increment number by 1 for the next iteration
    number += 1
  end
  
  # Return the generated prime list
  return prime_list
end
 
# Generate a list of first 10 prime numbers
prime_list = generate_prime_list(10)
 
# Print out the list of prime numbers
puts "The first 10 prime numbers are: #{prime_list}"
 
# Output:
# The first 10 prime numbers are: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]