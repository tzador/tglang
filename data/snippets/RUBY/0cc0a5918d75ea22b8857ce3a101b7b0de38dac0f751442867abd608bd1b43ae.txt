#This code snippet performs a merge sort algorithm on an array of numbers.
#The function takes in an array as input and sorts the array using the divide and conquer approach.
#The final sorted array is returned as output.

def merge_sort(array)
  #If the array has only one element, return it as it is already sorted
  return array if array.size <= 1

  #Define the middle index of the array
  mid = array.size / 2

  #Recursively divide the array into two parts, left and right
  left_array = merge_sort(array[0...mid])
  right_array = merge_sort(array[mid..-1])

  #Initialize an empty array to store the merged sorted arrays
  sorted_array = []

  #Loop while both left and right arrays still have elements
  while left_array.size > 0 && right_array.size > 0
    #Compare the first element of each array and push the smaller element to the sorted array
    if left_array[0] < right_array[0]
      sorted_array << left_array.shift
    else
      sorted_array << right_array.shift
    end
  end

  #Concatenate the remaining elements of the left array, if any, to the sorted array
  sorted_array.concat(left_array) if left_array.size > 0
  #Concatenate the remaining elements of the right array, if any, to the sorted array
  sorted_array.concat(right_array) if right_array.size > 0

  #Return the final sorted array
  return sorted_array
end

#Example of how to call the function and print the sorted array
unsorted_array = [5, 2, 8, 1, 3, 9, 4, 6, 7]
sorted_array = merge_sort(unsorted_array)
puts "Sorted array: #{sorted_array}"

#Output:
#Sorted array: [1, 2, 3, 4, 5, 6, 7, 8, 9]