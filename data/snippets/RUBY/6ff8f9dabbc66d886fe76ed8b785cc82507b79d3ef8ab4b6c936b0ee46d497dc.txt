# Define a method that takes in an array and a search value as arguments
def search_array(array, value)

# Initialize a starting index for the binary search method
index = 0

# Set the ending index for the binary search method
end_index = array.length - 1

# Use a while loop to continue searching until the value is found or the starting index becomes greater than the ending index
while index <= end_index

  # Calculate the middle index by adding the starting index and the ending index and then dividing by 2
  midpoint = (index + end_index) / 2

  # Compare the search value to the value at the middle index of the array
  if array[midpoint] == value

    # If the values are equal, return the middle index
    return midpoint

  # If the value at the middle index is greater than the search value,
  # set the ending index to be the middle index - 1
  elsif array[midpoint] > value
    end_index = midpoint - 1

  # If the value at the middle index is less than the search value,
  # set the starting index to be the middle index + 1
  else
    index = midpoint + 1
  end
end

# If the value is not found, return nil
return nil
end

# Test the method by creating an array and calling the search_array method on it
array = [5, 10, 15, 20, 25, 30, 35]
puts search_array(array, 25)

# Output: 4
# 4 is the index of the value 25 in the array.