# This code snippet generates a method that calculates the nth Fibonacci number recursively
# The code snippet uses memoization to improve execution time

# Define the method, fib, which takes in an integer parameter, n
def fib(n)
  # Create a hash, memo, to store calculated values for faster execution
  memo = { 0 => 0, 1 => 1 }

  # If n is 0 or 1, return n as the fibonacci number
  return n if n == 0 || n == 1

  # If n is already in the hash, return the stored value
  return memo[n] if memo[n]

  # Otherwise, recursively call fib on the previous two numbers and add them together
  memo[n] = fib(n - 1) + fib(n - 2)

  # Return the calculated fibonacci number
  memo[n]
end

# Print the 10th Fibonacci number using the fib method
puts fib(10)