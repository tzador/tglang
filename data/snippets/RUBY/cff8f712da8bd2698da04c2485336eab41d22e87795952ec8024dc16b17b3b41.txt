module Crypto
  # Generates a randomly generated string of specified length
  def self.random_string(length=8)
    valid_chars = ('a'..'z').to_a + ('A'..'Z').to_a + (0..9).to_a
    (0...length).map { valid_chars[rand(valid_chars.size)] }.join('')
  end
  
  # Encrypts a message using a substitution cipher
  def self.substitution_encrypt(msg, key)
    cipher = key.chars.uniq + (('a'..'z').to_a + ('A'..'Z').to_a)
    plain = (('!'..'?').to_a + ('@'..'Z').to_a).sample(key.size)
    subs_dict = Hash[cipher.zip(plain)]
    msg.chars.map { |c| subs_dict.fetch(c, c) }.join('')
  end
  
  # Decrypts a message encrypted using substitution cipher
  def self.substitution_decrypt(msg, key)
    cipher = key.chars.uniq + (('a'..'z').to_a + ('A'..'Z').to_a)
    plain = (('!'..'?').to_a + ('@'..'Z').to_a).sample(key.size)
    subs_dict = Hash[cipher.zip(plain)]
    msg.chars.map { |c| subs_dict.key(c) || c }.join('')
  end
  
  # Encrypts a message using a rotation cipher
  def self.rotation_encrypt(msg, shift)
    alphabet = ('A'..'Z').to_a
    rotated_alphabet = alphabet.rotate(shift)
    plain_text = (alphabet + alphabet.map(&:downcase)).join
    rotated_text = (rotated_alphabet + rotated_alphabet.map(&:downcase)).join
    msg.tr(plain_text, rotated_text)
  end
  
  # Decrypts a message encrypted using rotation cipher
  def self.rotation_decrypt(msg, shift)
    alphabet = ('A'..'Z').to_a
    rotated_alphabet = alphabet.rotate(shift)
    plain_text = (alphabet + alphabet.map(&:downcase)).join
    rotated_text = (rotated_alphabet + rotated_alphabet.map(&:downcase)).join
    msg.tr(rotated_text, plain_text)
  end
end