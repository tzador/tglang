# This is a complex code snippet in RUBY
# It shows how to define a class with instance methods, class methods, and variables

# Define a class called Person
class Person

    # Instance method to initialize a new person with a name and age
    def initialize(name, age)
        @name = name # @name is an instance variable
        @age = age # @age is an instance variable
    end

    # Class method to update the retirement age for all Person objects
    def self.update_retirement_age(new_age)
        @@retirement_age = new_age # @@retirement_age is a class variable
    end

    # Instance method to get the person's name
    def get_name
        @name
    end

    # Instance method to get the person's age
    def get_age
        @age
    end

    # Instance method to check if the person is eligible for retirement
    def is_eligible_for_retirement
        if @age >= @@retirement_age
            puts "#{@name} can now retire!"
        else
            puts "#{@name} is not yet eligible for retirement."
        end
    end

    # Private method to calculate the person's retirement age based on their current age
    private
    def calculate_retirement_age
        @age + 65 # Assuming retirement age is 65
    end

    # Protected method to get the person's retirement age
    protected
    def get_retirement_age
        calculate_retirement_age
    end

end

# Create two Person objects
person1 = Person.new("John", 45)
person2 = Person.new("Jane", 50)

# Update retirement age for all Person objects
Person.update_retirement_age(70)

# Output each person's name, age, and retirement information
puts "Person 1:"
puts "Name: #{person1.get_name}"
puts "Age: #{person1.get_age}"
person1.is_eligible_for_retirement
puts "Retirement Age: #{person1.get_retirement_age}"
puts "Person 2:"
puts "Name: #{person2.get_name}"
puts "Age: #{person2.get_age}"
person2.is_eligible_for_retirement
puts "Retirement Age: #{person2.get_retirement_age}"