def find_shortest_path(graph, start, end)
  # set distances for all vertices to infinity
  distances = {}
  graph.each { |vertex, _connections| distances[vertex] = Float::INFINITY }
  # set distance from start to start to 0
  distances[start] = 0
  # create a queue to store vertices in
  queue = [start]
  # loop while queue is not empty
  until queue.empty?
    # remove first vertex from queue
    current_vertex = queue.shift
    # loop through connections of current_vertex
    graph[current_vertex].each do |neighbor, distance|
      # calculate distance from current_vertex to neighbor
      new_distance = distances[current_vertex] + distance
      # if new distance is shorter, update distances hash and add neighbor to queue
      if new_distance < distances[neighbor]
        distances[neighbor] = new_distance
        queue << neighbor
      end
    end
  end
  # return shortest distance from start to end
  distances[end]
end