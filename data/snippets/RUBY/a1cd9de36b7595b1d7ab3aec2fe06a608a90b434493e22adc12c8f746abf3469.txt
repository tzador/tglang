# This is a complex function that takes in an array and a block as arguments
# It iterates through the array and passes each element into the block
# The block is expected to perform some transformation on the element and return a value
# The final output is an array of transformed elements from the original array
def transform_array(array, &block)
  # Initialize an empty array to store the transformed elements
  transformed = []

  # Use the 'each' method to iterate through the array
  # Pass in the block as an argument to perform the transformation
  array.each do |element|
    # Call the block and pass in the current element
    # Store the returned value in a variable
    transformed_element = block.call(element)

    # Check if the returned value is an array
    if transformed_element.is_a?(Array)
      # If it is, add all elements in the returned array to the 'transformed' array
      transformed.concat(transformed_element)
    else
      # If not, simply add the value to the 'transformed' array
      transformed << transformed_element
    end
  end

  # Return the final transformed array
  transformed
end

# Example usage of the function
numbers = [1, 2, 3, 4, 5]
# Transform each number in the 'numbers' array by multiplying it with 2
doubled = transform_array(numbers) do |number|
  number * 2
end
# Output: [2, 4, 6, 8, 10]

# Another example usage
strings = ['Hello', 'world', '!']
# Transform each string in the 'strings' array by adding a '?' at the end
question_strings = transform_array(strings) do |string|
  string + '?'
end
# Output: ['Hello?', 'world?', '!?']

# Another example with a more complex transformation
phrases = ['This is a phrase', 'that needs', 'to be transformed']
# Transform each phrase in the 'phrases' array by splitting it into individual words
# and then capitalizing the first letter of each word
transformed_phrases = transform_array(phrases) do |phrase|
  # Split the phrase by spaces (' ') into an array of words
  words = phrase.split(' ')
  # Use the 'map' method to iterate through the words array and capitalize each word
  capitalized_words = words.map do |word|
    # Call the 'capitalize' method on the word to capitalize the first letter
    word.capitalize
  end
  # Join the capitalized words back into a string with spaces (' ') in between each word
  capitalized_words.join(' ')
end
# Output: ['This Is A Phrase', 'That Needs', 'To Be Transformed']