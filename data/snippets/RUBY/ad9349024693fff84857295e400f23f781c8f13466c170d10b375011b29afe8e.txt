# This is a custom class named 'Complex' for working with complex numbers in Ruby.

class Complex
  attr_accessor :real, :imaginary                   # creating getters and setters for instance variables

  # initializes a new Complex number object with default value of 0 + 0i if no arguments are given
  def initialize(real = 0, imaginary = 0)
    @real = real
    @imaginary = imaginary
  end

  # method for adding complex numbers
  # takes in another Complex number object as an argument and returns a new Complex number object as the sum
  def +(complex)
    sum_real = @real + complex.real
    sum_imaginary = @imaginary + complex.imaginary
    Complex.new(sum_real, sum_imaginary)
  end

  # method for subtracting complex numbers
  # takes in another Complex number object as an argument and returns a new Complex number object as the difference
  def -(complex)
    diff_real = @real - complex.real
    diff_imaginary = @imaginary - complex.imaginary
    Complex.new(diff_real, diff_imaginary)
  end

  # method for multiplying complex numbers
  # takes in another Complex number object as an argument and returns a new Complex number object as the product
  def *(complex)
    product_real = (@real * complex.real) - (@imaginary * complex.imaginary)
    product_imaginary = (@real * complex.imaginary) + (@imaginary * complex.real)
    Complex.new(product_real, product_imaginary)
  end

  # method for dividing complex numbers
  # takes in another Complex number object as an argument and returns a new Complex number object as the quotient
  def /(complex)
    # calculating the denominator of the quotient
    denominator = (complex.real**2) + (complex.imaginary**2)
    # calculating the real and imaginary parts of the quotient
    quotient_real = ((@real * complex.real) + (@imaginary * complex.imaginary)) / denominator.to_f
    quotient_imaginary = ((@imaginary * complex.real) - (@real * complex.imaginary)) / denominator.to_f
    Complex.new(quotient_real, quotient_imaginary)
  end

  # method for outputting the complex number in standard form
  # takes no arguments and returns a string representing the complex number in standard form
  def to_s
    # adding a plus sign before the imaginary part if it is positive
    @imaginary >= 0 ? "#{@real} + #{@imaginary}i" : "#{@real} #{@imaginary}i"
  end
end

# creating two new Complex number objects
a = Complex.new(3, 2)   # representing 3 + 2i
b = Complex.new(1, -1)  # representing 1 - i

# adding the two complex numbers
c = a + b
puts c.to_s  # output: 4 + i

# multiplying the two complex numbers
d = a * b
puts d.to_s  # output: 5 + 5i