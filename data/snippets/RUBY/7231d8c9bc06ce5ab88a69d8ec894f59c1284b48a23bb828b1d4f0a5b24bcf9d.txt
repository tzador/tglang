require 'benchmark'

# Define a Fibonacci method that takes in a number as an argument
# and returns the fibonacci sequence up to that number using recursion

def fibonacci(n)
  #Create an array to store the fibonacci sequence
  sequence = []
  
  # Base case: If n = 0, return an empty array
  return sequence if n == 0

  # Second base case: If n = 1, return an array with 1 element
  return sequence << 1 if n == 1

  # Recursive case: Calculate the next fibonacci number by adding the previous two numbers
  # and pushing it to the sequence array
  sequence << fibonacci(n-1)[-1] + fibonacci(n-2)[-1]
  # Then call the fibonacci method again with n-1 as the argument
  # and concatenate the result to the sequence array
  sequence + fibonacci(n-1)
end

# Use the Benchmark class to measure the time it takes for the method to run
time = Benchmark.measure { fibonacci(35) }

# Print out the fibonacci sequence up to n=35 and the time it took to run
puts "Fibonacci sequence up to n=35: #{fibonacci(35)}"
puts "It took #{time.real} seconds for the method to run."