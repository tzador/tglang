# This code snippet generates a subset of all possible combinations
# of elements in an array

# function to perform the combination generation
def generate_combinations(arr)
    # initialize an empty array to store the combinations
    combinations = []

    # create a loop to iterate through each element in the array
    arr.each do |element|

        # create another loop to iterate through each element in the array
        # after the current element
        (arr.index(element) + 1...arr.length).each do |index|

            # create an array to store the current combination
            # with the current element
            current_combination = [element, arr[index]]

            # add this combination to the array of combinations
            combinations << current_combination

            # create another loop to iterate through each element in the array
            # after the current element's index
            (index + 1...arr.length).each do |sub_index|

                # create an array to store the current combination
                # with the current element and the next element at 'sub_index'
                # i.e. arr[index+1], arr[index+2], ....
                next_combination = current_combination + [arr[sub_index]]

                # add this combination to the array of combinations
                combinations << next_combination
            end
        end
    end

    # return the array of combinations
    combinations
end

# example usage
arr = [1,2,3]
p generate_combinations(arr)

# Output:
# [[1, 2], [1, 3], [1, 2, 3], [2, 3]]