class Song
  # Class attribute reader for artist
  attr_reader :artist
  # Class attribute reader for title
  attr_reader :title
  # Class attribute reader for duration
  attr_reader :duration
  # Class attribute reader and writer for lyrics
  attr_accessor :lyrics

  # Constructor method for Song class
  def initialize(artist, title, duration, lyrics)
    @artist = artist
    @title = title
    @duration = duration
    @lyrics = lyrics
  end

  # Method to print out artist, title and duration in a formatted string
  def full_song_info
    puts "Artist: #{@artist}, Title: #{@title}, Duration: #{@duration}"
  end

  # Method that returns the number of words in the lyrics
  def num_words
    num_words = @lyrics.split.length
    return num_words
  end

  # Method that checks if the lyrics contain a specific word
  def check_for_word(word)
    if @lyrics.include?(word)
      puts "The lyrics contain the word '#{word}'."
    else
      puts "The lyrics do not contain the word '#{word}'."
    end
  end

  # Method that replaces a word in the lyrics with another word
  def replace_word(old_word, new_word)
    @lyrics = @lyrics.gsub(old_word, new_word)
    return @lyrics
  end
end

# Create an instance of Song class called 'toxic'
toxic = Song.new("Britney Spears", "Toxic", "3:19", "Baby, can't you see
I'm calling
A guy like you
Should wear a warning")

# Print out artist, title and duration using the full_song_info method
toxic.full_song_info

# Print out the number of words in the lyrics using the num_words method
puts "Number of words in lyrics: #{toxic.num_words}"

# Check if the lyrics contain the word 'warning' using the check_for_word method
toxic.check_for_word("warning")

# Replace the word 'warning' with 'advice' using the replace_word method
puts toxic.replace_word("warning", "advice")