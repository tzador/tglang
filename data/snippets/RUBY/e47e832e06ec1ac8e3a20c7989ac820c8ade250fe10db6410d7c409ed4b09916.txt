#This code snippet generates a random maze using the Recursive Backtracking algorithm
class Maze
  attr_accessor :maze_grid

  def initialize(size)
    @size = size
    @maze_grid = Array.new(size) { Array.new(size, true) }
    #initialize maze with all walls
  end

  def generate(x = 0, y = 0)
    @maze_grid[x][y] = false #mark current cell as visited

    dirs = [:up, :right, :down, :left].shuffle #randomly shuffle directions

    dirs.each do |dir|
      case dir
      when :up
        next if x == 0 || !@maze_grid[x-1][y] #check if cell above is out of bounds or already visited
        @maze_grid[x-1][y] = false #knock down wall
        generate(x-1, y) #recursive call to continue maze generation
      when :right
        next if y == (@size - 1) || !@maze_grid[x][y+1] #check if cell to the right is out of bounds or already visited
        @maze_grid[x][y+1] = false #knock down wall
        generate(x, y+1) #recursive call to continue maze generation
      when :down
        next if x == (@size - 1) || !@maze_grid[x+1][y] #check if cell below is out of bounds or already visited
        @maze_grid[x+1][y] = false #knock down wall
        generate(x+1, y) #recursive call to continue maze generation
      else
        next if y == 0 || !@maze_grid[x][y-1] #check if cell to the left is out of bounds or already visited
        @maze_grid[x][y-1] = false #knock down wall
        generate(x, y-1) #recursive call to continue maze generation
      end
    end
  end
end

#generate a new maze with size of 10x10
maze = Maze.new(10)
maze.generate()

#print the resulting maze grid
puts maze.maze_grid.map { |row| row.map { |cell| cell ? 'â– ' : ' ' }.join('') }