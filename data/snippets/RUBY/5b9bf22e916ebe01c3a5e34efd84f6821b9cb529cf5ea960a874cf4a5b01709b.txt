# Define a method 'merge_sort' that takes in an array 'input'
# and returns a sorted array using the merge sort algorithm
# merge_sort will call on two helper methods: 'merge' and 'divide'

def merge_sort(input)
  return input if input.length <= 1 # return input if it only has one element

  mid = input.length / 2 # find the middle index of the array
  left = merge_sort(input[0...mid]) # recursive call on first half of input
  right = merge_sort(input[mid...input.length]) # recursive call on second half of input
  merge(left, right) # call helper method merge to combine and sort the two halves
end

def merge(left, right)
  result = [] # create an empty array to store the sorted elements
  until left.empty? || right.empty? # loop until either left or right is empty
    if left.first < right.first # compare the first elements of left and right
      result << left.shift # add the first element of left to result and remove it from left
    else
      result << right.shift # add the first element of right to result and remove it from right
    end
  end
  result + left + right # return sorted result array plus any remaining elements in left and right
end