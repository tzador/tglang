# This code snippet generates a nested array of prime numbers using the Sieve of Eratosthenes algorithm

# Set the upper limit or maximum value for prime number generation
upper_limit = 100

# Initialize an array with all numbers from 2 to upper_limit
numbers = (2..upper_limit).to_a

# Set the starting index for the loop to 0
i = 0

# Loop while i is less than the length of the array
while i < numbers.length

    # Set the current number to the value at index i
    current_num = numbers[i]

    # Starting from the next index, remove all multiples of the current number from the array
    j = i + 1
    while j < numbers.length
        if numbers[j] % current_num == 0
            numbers.delete_at(j)
        else
            j += 1
        end
    end

    # Increment i for the next iteration
    i += 1
end

# Print the final array of prime numbers
puts numbers.to_s

# Output: [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]