class Person
  attr_reader :name, :age # defines getters for name and age
 
  def initialize(name, age)
    if name.is_a?(String) && age.is_a?(Integer)
      @name = name
      @age = age
    else
      raise ArgumentError.new("Name must be a string and age must be an integer")
    end
  end
 
  def introduce
    puts "Hello, my name is #{name} and I am #{age} years old!"
  end
end
 
class Student < Person
  attr_reader :major, :gpa # defines getters for major and gpa
  attr_accessor :grad_year # defines both getter and setter for grad_year
 
  def initialize(name, age, major, gpa, grad_year)
    super(name, age) # calls the parent class' initialize method
    if major.is_a?(String) && gpa.is_a?(Float) && grad_year.is_a?(Integer)
      @major = major
      @gpa = gpa
      @grad_year = grad_year
    else
      raise ArgumentError.new("Major must be a string, gpa must be a float, and grad_year must be an integer")
    end
  end
 
  def introduce
    puts "Hello, my name is #{name}, I am #{@age} years old, and I am a student majoring in #{major}."
  end
 
  def update_gpa(new_gpa)
    @gpa = new_gpa
    puts "My new GPA is #{gpa}."
  end
end
 
person = Person.new("John", 25)
person.introduce # outputs "Hello, my name is John and I am 25 years old!"
 
student = Student.new("Jane", 20, "Computer Science", 3.7, 2023)
student.introduce # outputs "Hello, my name is Jane, I am 20 years old, and I am a student majoring in Computer Science."
 
student.update_gpa(3.9) # outputs "My new GPA is 3.9." 
puts "My major is #{student.major} and I am scheduled to graduate in #{student.grad_year}."
# outputs "My major is Computer Science and I am scheduled to graduate in 2023."