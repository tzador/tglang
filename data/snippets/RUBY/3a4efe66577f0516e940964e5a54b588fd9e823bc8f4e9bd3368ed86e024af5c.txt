def merge_sort(array)         # defines a function named `merge_sort` that takes in an array as an argument
  if array.length <= 1        # checks if the array has 1 or less elements, indicating it is already sorted
    array                    # returns the array if the above condition is true
  else
    mid = array.length / 2    # calculates the index for the midpoint of the array
    left = merge_sort(array[0..mid-1])     # recursively calls `merge_sort` on the left half of the array
    right = merge_sort(array[mid..-1])     # recursively calls `merge_sort` on the right half of the array
    merge(left, right)        # calls the `merge` function passing in the sorted left and right arrays
  end
end

def merge(left, right)      # defines a function named `merge` that takes in two sorted arrays as arguments
  result = []               # creates an empty array to store the sorted elements
  until left.empty? || right.empty?  # executes the loop until either `left` or `right` arrays are empty
    if left[0] <= right[0]           # compares the first elements in both arrays
      result << left.shift           # appends the first element of `left` to `result` and removes it from `left`
    else
      result << right.shift          # appends the first element of `right` to `result` and removes it from `right`
    end
  end
  result += left                       # adds the remaining elements of `left` to `result`
  result += right                      # adds the remaining elements of `right` to `result`
end

# Example output:
merge_sort([4, 2, 7, 1, 3, 5])        # => [1, 2, 3, 4, 5, 7]