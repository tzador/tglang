# Class to represent a tree node
class TreeNode
  # Initialize node with value and empty children array
  def initialize(value)
    @value = value
    @children = []
  end

  # Add a child node to the parent node
  def add_child(child)
    @children << child
  end

  # Method to recursively count the number of nodes in the tree
  def count_nodes
    # Initialize count with 1 for the current node
    count = 1
    # Iterate through each child node and increment count by recursively calling count_nodes
    @children.each do |child|
      count += child.count_nodes
    end
    # Return the final count
    count
  end
end

# Create a root node with value 5
root = TreeNode.new(5)
# Add three child nodes with values 3, 7 and 9
root.add_child(TreeNode.new(3))
root.add_child(TreeNode.new(7))
root.add_child(TreeNode.new(9))
# Add three child nodes to the first child with values 2, 4 and 6
root.children[0].add_child(TreeNode.new(2))
root.children[0].add_child(TreeNode.new(4))
root.children[0].add_child(TreeNode.new(6))
# Add two child nodes to the second child with values 8 and 10
root.children[1].add_child(TreeNode.new(8))
root.children[1].add_child(TreeNode.new(10))

# Print the number of nodes in the tree
print "Number of nodes: #{root.count_nodes}"