class Animal
  attr_accessor :name, :age #creates getter and setter methods for name and age

  def initialize(name, age) #constructor method
    @name = name
    @age = age
  end

  def speak #instance method that outputs animal sound based on type
    if self.is_a?(Dog)
      puts "Woof!"
    elsif self.is_a?(Cat)
      puts "Meow!"
    elsif self.is_a?(Bird)
      puts "Tweet!"
    else
      puts "Unknown animal sound."
    end
  end
end

class Dog < Animal #subclass of Animal
  attr_reader :breed #creates getter method for breed

  def initialize(name, age, breed)
    super(name, age) #calls Animal's initialize method
    @breed = breed
  end

  def wag_tail #instance method exclusive to Dog class
    puts "Wagging tail!"
  end
end

class Cat < Animal #subclass of Animal
  attr_reader :color #creates getter method for color

  def initialize(name, age, color)
    super(name, age) #calls Animal's initialize method
    @color = color
  end

  def purr #instance method exclusive to Cat class
    puts "Purring!"
  end
end

class Bird < Animal #subclass of Animal
  attr_reader :species #creates getter method for species

  def initialize(name, age, species)
    super(name, age) #calls Animal's initialize method
    @species = species
  end

  def fly #instance method exclusive to Bird class
    puts "Flying!"
  end
end

#creates an array of different Animal objects
animals = [Dog.new("Fido", 3, "Beagle"), Cat.new("Garfield", 5, "Orange"), Bird.new("Tweety", 1, "Canary")]

animals.each do |animal| #iterates through the array and calls the speak method on each object
  animal.speak
end

#output for above code:
#Woof!
#Meow!
#Tweet!