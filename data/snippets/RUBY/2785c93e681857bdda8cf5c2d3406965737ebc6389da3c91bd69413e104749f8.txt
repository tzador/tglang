def merge_sort(arr) #define merge_sort method with parameter arr
    if arr.length <= 1 #check if array length is less than or equal to 1
        return arr #return array if already sorted
    else #if array has more than one element
        middle = (arr.length / 2).floor #find the middle index of the array
        left = merge_sort(arr[0..middle-1]) #recursively call merge_sort on left half of array
        right = merge_sort(arr[middle..arr.length]) #recursively call merge_sort on right half of array

        merge(left, right) #call merge method to merge the two sorted halves
    end
end

def merge(left, right) #define merge method with two parameters, left and right
    sorted = [] #create empty array to store sorted elements
    until left.empty? || right.empty? #loop until one of the arrays is empty
        if left.first <= right.first #compare first elements of left and right array
            sorted << left.shift #add left element to sorted array and remove from left array
        else
            sorted << right.shift #add right element to sorted array and remove from right array
        end
    end
    sorted + left + right #concatenate remaining elements from left and right arrays, add to sorted array
end

arr = [5, 2, 1, 4, 3] #initialize unsorted array
puts "Unsorted array: #{arr} \n" #print unsorted array
sorted_arr = merge_sort(arr) #call merge_sort method on unsorted array
puts "Sorted array: #{sorted_arr} \n" #print sorted array