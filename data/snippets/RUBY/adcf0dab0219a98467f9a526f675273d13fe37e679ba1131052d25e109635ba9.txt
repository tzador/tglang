# This is a complex code snippet in RUBY
# It generates a random password and checks its strength
# It requires the 'securerandom' and 'io/console' libraries to run
require 'securerandom'
require 'io/console'

puts "Enter password length: "
pass_length = gets.to_i
char_pool = ""
password = ""
entropy = 0
lowercase = false
uppercase = false
digits = false
special_chars = false

# Checks if password length is at least 8 characters
if pass_length < 8
  puts "Password must be at least 8 characters long."
  exit
end

# Asks user if they want lowercase letters in password
puts "Include lowercase letters? [y/n]"
lowercase = true if gets.strip.downcase == 'y'

# Asks user if they want uppercase letters in password
puts "Include uppercase letters? [y/n]"
uppercase = true if gets.strip.downcase == 'y'

# Asks user if they want digits in password
puts "Include digits? [y/n]"
digits = true if gets.strip.downcase == 'y'

# Asks user if they want special characters in password
puts "Include special characters? [y/n]"
special_chars = true if gets.strip.downcase == 'y'

# Adds lowercase letters to character pool if selected
if lowercase == true
  char_pool += ('a'..'z').to_a.join
  entropy += Math.log2(26)
end

# Adds uppercase letters to character pool if selected
if uppercase == true
  char_pool += ('A'..'Z').to_a.join
  entropy += Math.log2(26)
end

# Adds digits to character pool if selected
if digits == true
  char_pool += ('0'..'9').to_a.join
  entropy += Math.log2(10)
end

# Adds special characters to character pool if selected
if special_chars == true
  char_pool += ('!'..')').to_a.join + ('{'..'~').to_a.join
  entropy += Math.log2(33)
end

# Generates random password from character pool
pass_length.times do
  password << char_pool[SecureRandom.random_number(char_pool.length)]
end

# Calculates password strength in bits
strength = Math.log2(char_pool.length) * pass_length

# Compares strength to recommended minimum strength
if strength > entropy
  print "Your password is: #{password}"
  print "Password strength: #{strength.round} bits\nRecommended minimum strength: #{entropy.round} bits"
else
  puts "\nError generating password. Please select more characters."
end