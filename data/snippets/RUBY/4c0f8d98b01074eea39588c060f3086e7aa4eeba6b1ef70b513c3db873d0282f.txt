# This is a complex code snippet in the RUBY programming language
# It is meant to demonstrate the use of classes and inheritance

# Parent class
class Animal
    # Class variable
    @@count = 0

    # Initializer method, takes in name and age as parameters
    def initialize(name, age)
        # Instance variables
        @name = name
        @age = age
        @@count += 1 # Increase count of animals
    end

    # Getter method
    def name
        @name
    end

    # Setter method
    def name=(new_name)
        @name = new_name
    end

    # Class method to get count of animals
    def self.count
        @@count
    end

    # Instance method, prints animal's information
    def info
        puts "Name: #{@name}, Age: #{@age}"
    end

    # Instance method overwritten in child classes
    def sound
        # To be overwritten
    end
end

# Child class
class Dog < Animal
    # Initializer method, takes in name, age, and breed as parameters
    def initialize(name, age, breed)
        # Calls parent's initializer method with name and age
        super(name, age)
        # Additional instance variable
        @breed = breed
    end

    # Overwritten instance method
    def sound
        puts "Woof!"
    end
end

# Child class
class Cat < Animal
    # Initializer method, takes in name, age, and color as parameters
    def initialize(name, age, color)
        # Calls parent's initializer method with name and age
        super(name, age)
        # Additional instance variable
        @color = color
    end

    # Overwritten instance method
    def sound
        puts "Meow!"
    end
end

# Create instances of each animal class
dog = Dog.new("Buddy", 5, "Golden Retriever")
cat = Cat.new("Fluffy", 3, "White")

# Call methods on instances
dog.info # Outputs "Name: Buddy, Age: 5"
dog.sound # Outputs "Woof!"
cat.info # Outputs "Name: Fluffy, Age: 3"
cat.sound # Outputs "Meow!"

# Output the count of animals
puts "There are #{Animal.count} animals in total." # Outputs "There are 2 animals in total."