require 'date'

class Task
  attr_accessor :title, :description, :due_date

  def initialize(title, description, due_date)
    @title = title
    @description = description
    @due_date = due_date
  end

  def overdue?
    return self.due_date < Date.today
  end

  def task_info
    puts "Title: #{self.title}\nDescription: #{self.description}\nDue Date: #{self.due_date}"
  end
end

class TodoList
  attr_accessor :tasks

  def initialize
    @tasks = []
  end

  def add_task(title, description, due_date)
    new_task = Task.new(title, description, due_date)
    @tasks << new_task
  end

  def overdue_tasks
    overdue_tasks = @tasks.select { |task| task.overdue? }
    return overdue_tasks unless overdue_tasks.empty?
    return "There are no overdue tasks."
  end
end

# Example usage:
my_todo_list = TodoList.new
my_todo_list.add_task("Homework", "Finish math assignment", Date.new(2021, 10, 15))
my_todo_list.add_task("Groceries", "Buy milk and eggs", Date.new(2021, 10, 20))
my_todo_list.add_task("Cleaning", "Vacuum living room", Date.new(2021, 10, 30))

puts my_todo_list.overdue_tasks

# Output:
There are no overdue tasks.