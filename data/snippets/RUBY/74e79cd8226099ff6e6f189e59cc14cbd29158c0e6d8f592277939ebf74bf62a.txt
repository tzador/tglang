# This is a helper method that checks if a given number is a prime number.
# It takes in an integer and returns a boolean value.
def is_prime(num)
    # Checks if the number is equal to 2, if yes then return true.
    return true if num == 2
    # If the number is less than or equal to 1 or if it is divisible by 2, return false.
    return false if num <= 1 || num % 2 == 0
    # Loop through all the odd numbers between 3 and the square root of the given number.
    (3..Math.sqrt(num)).step(2) do |i|
        # If the number is divisible by any of these odd numbers, return false.
        if num % i == 0
            return false
        end
    end
    # If none of the conditions above are met, return true.
    return true
end

# This is a method that generates a list of prime numbers up to a given number.
# It takes in an integer and returns an array containing all the prime numbers.
def generate_prime(num)
    # Initialize an empty array to store the prime numbers.
    primes = []
    # Loop through all the numbers between 2 and the given number.
    (2..num).each do |i|
        # If the number is a prime number, add it to the primes array.
        if is_prime(i)
            primes << i
        end
    end
    # Return the primes array.
    primes
end

# Example usage of the above methods:
# Generate a list of prime numbers up to 20 and save it to a variable.
my_primes = generate_prime(20)
# Print the generated list.
puts my_primes

# Output: [2, 3, 5, 7, 11, 13, 17, 19]