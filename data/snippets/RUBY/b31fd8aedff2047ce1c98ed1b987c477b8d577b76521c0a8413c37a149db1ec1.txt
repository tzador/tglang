# This code is a complex Ruby class that utilizes inheritance and modules to create a custom error handling system
class CustomError < StandardError
  def initialize(message)
    super(message)
  end
end

# This module includes methods for converting errors to JSON and creating custom error messages
module ErrorHandling
  # Converts the error to a JSON string
  def to_json
    { error: message, type: type }.to_json
  end

  # Creates a custom error message with the type and original message
  def custom_message
    "#{type} Error: #{message}"
  end
end

# This class inherits from the CustomError class and includes the ErrorHandling module
class FormatError < CustomError
  include ErrorHandling
  attr_reader :type

  # The type of error
  def initialize(message)
    @type = "Format"
    super(message)
  end
end

# This class inherits from the CustomError class and includes the ErrorHandling module
class MissingDataError < CustomError
  include ErrorHandling
  attr_reader :type

  # The type of error
  def initialize(message)
    @type = "MissingData"
    super(message)
  end
end

# Example usage of the custom error classes and modules
begin
  # Code that could potentially raise an error
  data = nil
  raise MissingDataError.new("The data is missing") if data.nil?
rescue MissingDataError => e
  # If the MissingDataError is raised, it can be handled with the custom error message or converted to JSON
  puts e.custom_message
  puts e.to_json
end

begin
  # Code that could potentially raise an error
  value = "invalid"
  raise FormatError.new("Invalid format") if value != "valid"
rescue FormatError => e
  # If the FormatError is raised, it can be handled with the custom error message or converted to JSON
  puts e.custom_message
  puts e.to_json
end