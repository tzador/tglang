# This code snippet initializes an array
# and performs a sorting algorithm on it
# to output the array in ascending order

def bubble_sort(array)
  # set variable to track number of sorting passes
  n = array.length - 1

  # loop through the array and perform sorting passes
  n.times do
    # set a variable to track if any swaps were made during the current pass
    swapped = false

    # loop through the array from index 0 to n-1
    (0...n).each do |i|
      # if the current element is greater than the next element
      if array[i] > array[i + 1]
        # swap the elements and set 'swapped' to true
        array[i], array[i + 1] = array[i + 1], array[i]
        swapped = true
      end
    end

    # if no swaps were made during the current pass, the array is already sorted
    # break out of the loop to save time
    break if swapped == false
  end

  # return the sorted array
  return array
end

# example array
unsorted_array = [5, 2, 10, 3, 8, 1]

# call the bubble_sort function and output the sorted array using 'p'
p bubble_sort(unsorted_array)

# output: [1, 2, 3, 5, 8, 10]