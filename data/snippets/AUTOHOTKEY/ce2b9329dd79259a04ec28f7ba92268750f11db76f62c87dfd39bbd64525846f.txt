; This snippet creates a function that allows for easy navigation and manipulation of a list in the program
; The function takes in two parameters, the list variable and the operation to be performed

listFunction(listVariable, operation)
{
    ; Switch statement to perform different operations based on the input
    switch operation
    {
        ; Case for adding an item to the list
        case "add":
            ; Ask for user input for the item to be added
            InputBox, itemToAdd, Enter item to add, , , 250, 100

            ; Check if the variable is empty or not
            if (listVariable = "")
            {
                ; If empty, update the list variable with the new item
                listVariable := itemToAdd
            }
            else
            {
                ; If not empty, use string concatenation to add the item to the end of the list
                listVariable := listVariable . "," . itemToAdd
            }
            break
        ; Case for deleting an item from the list
        case "delete":
            ; Ask for user input for the item to be deleted
            InputBox, itemToDelete, Enter item to delete, , , 250, 100

            ; Use string replace to remove the item from the list
            listVariable := StrReplace(listVariable, itemToDelete, "")
            ; Use string replace again to remove the extra comma if the deleted item was at the end of the list
            listVariable := StrReplace(listVariable, ",,", ",")

            break
        ; Case for printing the list
        case "print":
            ; Use a loop to go through each item in the list and print it
            Loop, Parse, listVariable, `,
            {
                ; Use the A_Index variable to keep track of the index of each item
                ; and use the A_LoopField variable to access the current item in the loop
                MsgBox % "Item " . A_Index . ": " . A_LoopField
            }
            break
        ; Case for sorting the list
        case "sort":
            ; Use the built-in Sort function to sort the list alphabetically
            Sort, listVariable
            break
        ; Default case if none of the previous cases match
        default:
            MsgBox % "Invalid operation"
    }
}

; Example usage: adding an item to a list
myList := "apples, bananas, grapes"
listFunction(myList, "add")
MsgBox % "Updated list: " . myList ; Output: Updated list: apples, bananas, grapes, cherries