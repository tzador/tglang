; This code snippet uses AutoHotkey to create a to-do list program
#SingleInstance force

; Set GUI window dimensions and title
Gui, Add, Text,, To-do List Program
Gui, Add, Edit, w200 h25 vInput
Gui, Add, Button, , Add Item
Gui, Add, ListView, r6 w250 gmyLV gchecked gcol1, Item|Due Date
Gui, Add, Button, , Mark As Completed
Gui, Add, Button, , Remove Selected
Gui, Add, Button, , Clear List
Gui, Add, Button, , Exit
Gui, show, w375 h500, To-do List Program

; Set variables
Global ListArray := []
Global SelectedIndex := ""
Global CheckedIndex := ""
Global Input := ""

; Main program loop
Loop
{
	; Label for adding an item
	AddItem:
		; Waits for user to press button or press Enter key
		GuiControl, Focus, input
		Send {Enter}
		Gosub, Add
		Goto, End
	
	; Label for marking an item as completed
	MarkCompleted:
		; Waits for user to press button or press Enter key
		GuiControl, Focus, myLV
		Send {Enter}
		Gosub, Complete
		Goto, End
	
	; Label for removing selected item
	RemoveSelected:
		; Get index of selected item
		GuiControlGet, SelectedIndex,, myLV, Selected	
		; Check if index is empty
		If (SelectedIndex = "")
		{
			; If index is empty, show error message
			MsgBox, Please select an item to remove.
		}
		Else
		{
			; If index is not empty, remove selected item from list
			GuiControl, Delete, myLV, %SelectedIndex%	
		}
		
	; Label for clearing entire list
	ClearList:
		; Clear all items from list
		Loop, %myLV%		; %myLV% represents the number of items in the list
		{
			GuiControl, Delete, myLV, %A_Index%
		}
		
	; Label for exiting program
	ExitProgram:
		; Exit program
		ExitApp
	
	; Add item subroutine
	Add:
		; Get input from Edit control
		GuiControlGet, Input,, Input
		; Check if input is empty
		If (Input = "")
		{
			; If input is empty, show error message
			MsgBox, Please enter an item to add.
		}
		Else
		{
			; If input is not empty, add input to list and clear Edit control
			GuiControl, Add, myLV, %Input%|%A_DD%-%A_MM%-%A_YYYY%
			GuiControl, , Input,
		}
		Return
	
	; Mark item as completed subroutine
	Complete:
		; Get index of checked item
		GuiControlGet, CheckedIndex,, myLV, Checked
		; Check if index is empty
		If (CheckedIndex = "")
		{
			; If index is empty, show error message
			MsgBox, Please mark an item as completed.
		}
		Else
		{
			; If index is not empty, strike through checked item
			GuiControl, Modify, myLV, %CheckedIndex%|<s>%A_LoopField%</s>
		}
		Return
	
	; Label for resetting variables
	End:
		SelectedIndex := ""
		CheckedIndex := ""
		Input := ""
}

; Gui closing label
GuiClose:
	ExitApp