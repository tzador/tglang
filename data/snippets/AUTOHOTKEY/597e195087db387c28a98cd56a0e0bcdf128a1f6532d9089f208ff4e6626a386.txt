; This code snippet demonstrates how to create a complex GUI window in AutoHotkey.

Gui := GuiCreate() ; Create the GUI object.

; Add a title label to the GUI.
Gui.AddLabel("Title", "My Complex GUI", "xCENTER w400", "FontBold CCCCCC")

; Add a group box to the GUI.
Gui.AddGroupBox("FirstGroup", "Group 1", "20 y20 w200 h300", "FontUnderline")

; Add a checkbox to the group box.
Gui.AddCheckBox("FirstCheckBox", "Option 1", "x10 y30", "FontItalic")

; Add a button to the group box.
Gui.AddButton("FirstButton", "Click Me!", "x50 y80 w100 h30", "FontBold")

; Add a second group box to the GUI.
Gui.AddGroupBox("SecondGroup", "Group 2", "240 y20 w200 h300", "FontUnderline")

; Add a dropdown list to the second group box.
Gui.AddDropdown("SecondDropdown", "Option 1`nOption 2`nOption 3", "x60 y30 w100", "FontBold")

; Add a edit control to the second group box.
Gui.AddEdit("SecondEdit", "Default text", "x30 y80 w140 h30", "FontItalic")

; Add a radio button to the second group box.
Gui.AddRadioButton("SecondRadioButton", "Option 1", "x10 y120", "FontUnderline")

; Add a checkbox array to the second group box.
Options := ["Option 1", "Option 2", "Option 3"]
Gui.AddCheckboxArray("SecondCheckboxArray", Options, "120 y120 w160", "FontBold")

; Add a list box to the second group box.
Gui.AddListBox("SecondListBox", "Option 1`nOption 2`nOption 3", "x10 y150 w180 h100", "FontItalic")

; Show the GUI.
Gui.Show()

; Define a function to handle when the button is clicked.
FirstButtonClick()
{
    MsgBox("You clicked the button!")
}

; Add the function as the button's callback.
Gui.Button("FirstButton").On("Click", "FirstButtonClick")

; Define a function to handle when the second radio button is selected.
SecondRadioButtonSelect()
{
    MsgBox("You selected the second radio button!")
}

; Add the function as the radio button's callback.
Gui.RadioButton("SecondRadioButton").On("Select", "SecondRadioButtonSelect")

; Define a function to handle when the dropdown list selection is changed.
SecondDropdownChange()
{
    MsgBox("You changed the dropdown selection!")
}

; Add the function as the dropdown's callback.
Gui.Dropdown("SecondDropdown").On("Change", "SecondDropdownChange")

; Define a function to handle when the list box selection is changed.
SecondListBoxChange()
{
    MsgBox("You changed the list box selection!")
}

; Add the function as the list box's callback.
Gui.ListBox("SecondListBox").On("Change", "SecondListBoxChange")

; Loop the GUI to keep it open.
While(!Gui.IsClosing())
{
    Sleep(100) ; Sleep to reduce CPU usage.
}

; Destroy the GUI.
Gui.Destroy()