; This code snippet uses AutoHotkey language

; Define a function that takes in two parameters
Func Encrypt(key, text)
{
    ; Initialize an empty array to store encrypted characters
    encrypted_array := []

    ; Loop through each character in the text
    loop, Parse, text
    {
        ; Get the ASCII value of the current character
        char_ascii := Asc(A_LoopField)

        ; Add the key value to the ASCII value
        new_ascii := char_ascii + key

        ; Check if the new ASCII value is greater than 126 (last printable character)
        if (new_ascii > 126)
        {
            ; Subtract 95 from the new ASCII value to stay within 32-126 range
            new_ascii := new_ascii - 95
        }

        ; Add the new ASCII value to the encrypted array
        encrypted_array.InsertAt(encrypted_array.MaxIndex() + 1, Chr(new_ascii))
    }

    ; Convert the encrypted array to a string and return it
    return encrypted_array.Join("")
}

; Define a function that takes in two parameters
Func Decrypt(key, text)
{
    ; Initialize an empty array to store decrypted characters
    decrypted_array := []

    ; Loop through each character in the text
    loop, Parse, text
    {
        ; Get the ASCII value of the current character
        char_ascii := Asc(A_LoopField)

        ; Subtract the key value from the ASCII value
        new_ascii := char_ascii - key

        ; Check if the new ASCII value is less than 32 (first printable character)
        if (new_ascii < 32)
        {
            ; Add 95 to the new ASCII value to stay within 32-126 range
            new_ascii := new_ascii + 95
        }

        ; Add the new ASCII value to the decrypted array
        decrypted_array.InsertAt(decrypted_array.MaxIndex() + 1, Chr(new_ascii))
    }

    ; Convert the decrypted array to a string and return it
    return decrypted_array.Join("")
}

; Define a key to use for encryption
encryption_key := 16

; Define a string to encrypt
text_to_encrypt := "This is a complex code snippet using the AutoHotkey programming language"

; Encrypt the string using the defined key
encrypted_text := Encrypt(encryption_key, text_to_encrypt)

; Print the encrypted string
MsgBox, %encrypted_text%

; Decrypt the string using the same key
decrypted_text := Decrypt(encryption_key, encrypted_text)

; Print the decrypted string
MsgBox, %decrypted_text%