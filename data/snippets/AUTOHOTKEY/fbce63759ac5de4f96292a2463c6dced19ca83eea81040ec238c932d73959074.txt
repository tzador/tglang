; Function to encrypt text using the AES-256 encryption algorithm.
Encrypt(text)
{
  ; Set up encryption key.
  key := "a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16"
  ; Convert text to binary using UTF-8 encoding.
  text_bin := StrPut(text, "UTF-8", 1)
  ; Pad text to be a multiple of 16 bytes.
  padded_text := PadText(text_bin)
  ; Set up cipher object using AES-256 algorithm and CBC mode.
  cipher := CryptoAPI.AES_Init(key, "CBC")
  ; Generate a random initialization vector.
  iv := CryptoAPI.Rand(16)
  ; Use cipher to encrypt the padded text.
  encrypted_text := cipher.Encrypt(padded_text, iv)
  ; Combine the encrypted text and initialization vector into one string.
  encrypted := StrPut(encrypted_text . iv, "CP0")
  ; Return the encrypted text.
  return encrypted
}

; Function to decrypt text encrypted using the AES-256 encryption algorithm.
Decrypt(text)
{
  ; Set up encryption key.
  key := "a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16"
  ; Convert text to binary using Code Page 0 (CP0) encoding.
  text_bin := StrPut(text, "CP0", 1)
  ; Separate the encrypted text and initialization vector.
  encrypted_text := SubStr(text_bin, 1, -16) ; Get all but last 16 bytes.
  iv := SubStr(text_bin, -16) ; Get last 16 bytes.
  ; Set up cipher object using AES-256 algorithm and CBC mode.
  cipher := CryptoAPI.AES_Init(key, "CBC")
  ; Use cipher to decrypt the encrypted text using the initialization vector.
  decrypted_text := cipher.Decrypt(encrypted_text, iv)
  ; Remove any padding from the decrypted text.
  final_text := RemovePadding(decrypted_text)
  ; Return the decrypted text.
  return final_text
}

; Helper function to pad text to be a multiple of 16 bytes.
PadText(text)
{
  ; Get length of text.
  text_length := StrLen(text)
  ; Calculate number of padding bytes needed.
  padding := 16 - Mod(text_length, 16)
  ; If no padding needed, add an extra block of padding.
  if (padding = 0)
    padding := 16
  ; Add padding bytes to text.
  padded_text := StrPut(text . Replicate(Chr(padding), padding), "UTF-8")
  ; Return padded text.
  return padded_text
}

; Helper function to remove padding from decrypted text.
RemovePadding(text)
{
  ; Get length of text.
  text_length := StrLen(text)
  ; Get last byte, which indicates how much padding was added.
  last_byte := SubStr(text, -1)
  ; Remove padding from text.
  final_text := SubStr(text, 1, -(last_byte))
  ; Return unpadded text.
  return final_text
}

; Main function to demonstrate encryption and decryption.
; Replace "hello world" with the text you want to encrypt.
Main()
{
  text := "hello world"
  encrypted_text := Encrypt(text)
  decrypted_text := Decrypt(encrypted_text)
}