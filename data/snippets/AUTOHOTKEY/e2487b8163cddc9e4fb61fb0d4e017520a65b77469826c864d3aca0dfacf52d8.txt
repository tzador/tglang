#Persistent  ; makes the script continue running until explicitly terminated
SetBatchLines -1  ; increases performance by running the script at its fastest rate
#SingleInstance, Force  ; ensures only one instance of the script is running

; array of numbers
numbers := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

; loop through array and print out each number multiplied by 2
for index, num in numbers  ; sets index and num as parameters for for-loop
{
    MsgBox, % num * 2  ; multiplies num by 2 and displays it in a message box
}

; function to check if a number is prime or not
IsPrime(number)
{
    if (number < 2)  ; checks if number is less than 2
        return false  ; if so, returns false
    else if (number = 2)  ; checks if number is equal to 2
        return true  ; if so, returns true
    else  ; executes for all numbers greater than 2
    {
        for (i := 2; i < number; i++)  ; loops through all numbers from 2 to (number-1)
        {
            if (number % i == 0)  ; checks if number is divisible by any number from 2 to (number-1)
                return false  ; if so, returns false as number is not prime
        }
        return true  ; if loop completes without returning false, number is prime
    }
}

; function to calculate the factorial of a number
Factorial(number)
{
    if (number = 0 or number = 1)  ; checks if number is equal to 0 or 1
        return 1  ; if so, returns 1
    else  ; executes for all numbers greater than 1
        return number * Factorial(number - 1)  ; recursively calls the function with number - 1 until number is 1, then calculates the factorial
}

; loop through array and check if each number is prime or not
for index, num in numbers  ; sets index and num as parameters for for-loop
{
    numIsPrime := IsPrime(num)  ; calls IsPrime function to check if num is prime
    if (numIsPrime)  ; checks if numIsPrime is true
        MsgBox, % num "is prime"  ; displays message saying num is prime
    else 
        MsgBox, % num "is not prime"  ; displays message saying num is not prime
}

; loop through array and calculate factorial of each number
for index, num in numbers  ; sets index and num as parameters for for-loop
{
    factorial := Factorial(num)  ; calls Factorial function to calculate factorial of num
    MsgBox, % "Factorial of" num "is" factorial  ; displays message stating factorial of num
}

ExitApp  ; terminates the script