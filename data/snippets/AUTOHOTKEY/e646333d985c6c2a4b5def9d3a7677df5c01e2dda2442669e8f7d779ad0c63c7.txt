;This is a long and complex code snippet in AutoHotkey

;Defining variables
Var := "AutoHotkey" ;String variable
Num := 123 ;Number variable
Bool := true ;Boolean variable

;Defining function
Func Complex {
    global Var, Num ;Defining global variables

    if (Bool) { ;Conditional statement
        MsgBox % "Hello " Var "! The code snippet is " Num " characters long." ;Displaying a message box
    }
    else {
        MsgBox % "The code snippet is not complex." ;Displaying a different message box
    }

    return "Finished executing the function." ;Returning a string as the function output
}

;Calling the function
Complex() ;Function call

;Looping through an array
Fruits := ["apple", "banana", "orange", "strawberry", "kiwi"]

For index, fruit in Fruits { ;Iterating through the array and storing index and element in variables
    MsgBox % "The " (index+1) "st fruit is " fruit "." ;Displaying a message box with the index and element
}

;Defining a class
class Car { ;Class name
    Constructor(make, model, year) { ;Constructor function
        this.make := make ;Assigning values to class variables
        this.model := model
        this.year := year
    }

    ;Class method
    OutputInfo() {
        MsgBox % "The car is a " this.year " " this.make " " this.model "." ;Displaying a message box with class variables
    }
}

;Creating objects of the Car class
Toyota := new Car("Toyota", "Camry", 2020)
Ford := new Car("Ford", "Mustang", 2019)

;Calling the OutputInfo method for each object
Toyota.OutputInfo()
Ford.OutputInfo()

;Creating a GUI window
Gui, Add, Text, x10 y10 w100 h30, Enter your name:
Gui, Add, Edit, x120 y10 w150 h25 ;Adding a text box
Gui, Add, Button, x140 y50 w100 h25 gSubmit, Submit ;Adding a button with a function as its action
Gui, Show, w400 h100, AutoHotkey GUI ;Displaying the GUI window

Submit: ;Function to be executed when button is clicked
Gui, Submit ;Saving the input from the text box
MsgBox % "Hello " Edit1 "!" ;Displaying a message box with the user's input

ExitApp ;Exiting the script