; This code snippet generates a random password using alphanumeric characters and
; special symbols. It also checks for password strength and saves the generated
; password in a text file.

; Declare a variable to hold the length of the password
Length := 20

; Create an array of alphanumeric and special characters to use in generating the password
Chars := ["1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "@", "#", "$", "%", "&",
          "*", "(", ")", "-", "_", "=", "+", "[", "]", "{", "}", "/", "\\", "|",
          "?", ">", "<", "~", "^"]

; Create an empty string to hold the generated password
Password := ""

; Use a loop to generate characters for the password
Loop % Length {
  ; Choose a random character from the Chars array
  Random, Index, 1, Chars.MaxIndex()
  ; Add the chosen character to the Password string
  Password := Password . Chars[Index]
}

; Check the password strength
Strength := 0

; Use regex to check for uppercase letters
if (RegExMatch(Password, "[A-Z]"))
  ; Increase strength score by 1
  Strength := Strength + 1

; Use regex to check for lowercase letters
if (RegExMatch(Password, "[a-z]"))
  ; Increase strength score by 1
  Strength := Strength + 1

; Use regex to check for numbers
if (RegExMatch(Password, "[0-9]"))
  ; Increase strength score by 1
  Strength := Strength + 1

; Use regex to check for special characters
if (RegExMatch(Password, "[!@#\$%\^&\*\(\)\-_\+=\[\]\{\}/\\\|<>\?~]"))
  ; Increase strength score by 1
  Strength := Strength + 1

; Print the generated password and its strength score
MsgBox % "Generated Password: " . Password . "`nStrength: " . Strength . "/4"

; Save the password in a text file
FileAppend, Generated Password: %Password%`nStrength: %Strength%/4, Password.txt