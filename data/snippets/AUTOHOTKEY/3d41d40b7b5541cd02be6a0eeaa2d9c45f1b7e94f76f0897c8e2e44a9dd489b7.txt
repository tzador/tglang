; This code snippet is a simple script that executes a series of keyboard shortcuts to automate tasks.

; Use #SingleInstance force to prevent multiple instances of the script running.
#SingleInstance force

; Define shortcuts using the keyboard hook.
; This allows the script to capture and process keyboard input while running.
; The following line activates the keyboard hook only when the window with specific title is active.
#IfWinActive, Microsoft Word

; Define a function that executes a series of keyboard shortcuts when called.
; This function will help us automate tasks in Microsoft Word.
SendWordShortcuts()
{
    ; Use the Send command to simulate keystrokes.
    Send, ^a ; Presses CTRL + A to select all text.
    Send, ^c ; Presses CTRL + C to copy the selected text.
    Send, ^v ; Presses CTRL + V to paste the copied text.
}

; Define a hotkey that executes the function when pressed.
; In this case, the hotkey is set to CTRL + ALT + W.
^!w::
    SendWordShortcuts()
return

; This next section of the script is used to create a menu that allows the user to enable or disable the hotkey.
; First, define a variable as false to indicate that the hotkey is disabled by default.
bToggle := "False"

; Create a loop that displays a message box with the current hotkey status.
Loop
{
    ; Define the message box text using conditional statements.
    if (bToggle = "True")
    {
        sMessage := "Hotkey is currently ENABLED."
    }
    else
    {
        sMessage := "Hotkey is currently DISABLED."
    }

    ; Display the message box and store the user's response in a variable.
    MsgBox, 4, Toggle Hotkey, %sMessage%, 3

    ; If the user clicks Yes, toggle the hotkey and update the variable.
    if ErrorLevel = 6
    {
        bToggle := "False"
    }
    ; If the user clicks No, exit the loop.
    else
    {
        break
    }
}

; Define a custom label that will be used to toggle the hotkey when called.
ToggleHotkey:
    ; Toggle the hotkey and update the variable.
    ; In this case, we use the ! symbol to represent ALT and the ^ symbol to represent CTRL.
    ; This line essentially sets the hotkey to CTRL + ALT + W (to match the hotkey defined earlier).
    bToggle := !bToggle

return