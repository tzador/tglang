; This code is part of a larger script that controls a game using
; a joystick and keyboard commands.

#SingleInstance force  ; Ensures only one instance of the script is running

; Define joystick buttons for various actions
Joy11::Send {w down}  ; Presses the "w" key when button 11 on joystick is pressed
Joy11 Up::Send {w up} ; Releases the "w" key when button 11 on joystick is released
Joy12::Send {s down} ; Presses the "s" key when button 12 on joystick is pressed
Joy12 Up::Send {s up} ; Releases the "s" key when button 12 on joystick is released
Joy1::Send {a down} ; Presses the "a" key when button 1 on joystick is pressed
Joy1 Up::Send {a up} ; Releases the "a" key when button 1 on joystick is released
Joy2::Send {d down} ; Presses the "d" key when button 2 on joystick is pressed
Joy2 Up::Send {d up} ; Releases the "d" key when button 2 on joystick is released
Joy7::Send {Space down} ; Presses the spacebar when button 7 on joystick is pressed
Joy7 Up::Send {Space up} ; Releases the spacebar when button 7 on joystick is released
Joy9::Send {Tab down} ; Presses the Tab key when button 9 on joystick is pressed
Joy9 Up::Send {Tab up} ; Releases the Tab key when button 9 on joystick is released

; Shift modifier key for precision movements
Joy8::Send {LShift up}{Blind}{w down} ; Presses & holds LShift key, sends "w" key, and releases LShift
Joy8 Up::Send, {Blind}{w up}{LShift down} ; Releases "w" key and holds LShift key when button 8 is released

; Assigning mouse movements to joystick axes
; The 3rd and 4th parameters indicate the speed and precision of the movement
JoyZ::Send {Click} ; Presses the left mouse button when z-axis of joystick is moved forward
JoyZ Up::Send {Click, up} ; Releases the left mouse button when z-axis of joystick is centered
JoyU::WheelUp ; Scrolls the mouse wheel up when u-axis of joystick is moved forward
JoyU Up::Send {Click, right} ; Right-clicks when u-axis of joystick is moved backwards
JoyR::Send {WheelDown} ; Scrolls the mouse wheel down when r-axis of joystick is moved forward

; Assigning mouse movements to buttons on the joystick
; In this case, pressing button 10 will move the mouse to a specific location and click once
Joy10::MouseMove, 100, 200 ; Moves mouse to position (100, 200) when button 10 is pressed
Joy10 Up::Send {Click} ; Clicks left mouse button when button 10 is released

; Joystick sensitivity and response rate
; The first two parameters are the joystick axis numbers, and the last two parameters are the sensitivity and response rate
; A higher sensitivity means the joystick axis needs to be pushed less to register a movement
; A higher response rate means the movement will register more quickly
SetTimer, JoystickHandler, 50 ; The joystick handler function will be called every 50 milliseconds

; Joystick handler function
JoystickHandler:
	; Retrieves the current position of the joystick axes and stores them in variables
	JoyGetPos, X, Y, z, r, u, v, w, s, a, d, q, e, c, t, b, j, Up

	; Changes the movement speed based on the joystick's current position
	; The *= operator multiplies the variable by the value after it
	x *= 2 x *= 3
	y *= 2 y *= 3
	r *= 5
	u *= 6
	v *= 5
	w *= 4
	q *= 2 q *= 3
	c *= 4

	; Sends the corresponding key when a joystick axis reaches a certain threshold
	; The first parameter is the axis variable, the second parameter is the threshold value
	; When the axis reaches this value, the corresponding key will be sent
	SendIfJoy := {Y: "down, button 1", y: "down, button 12", X: "down, button 2", x: "down, button 11",
r: "down, button 3", R: "down, button 4", u: "down, button 5", U: "down, button 6", v: "down, button 13",
s: "down, button 7", w: "down, button 8", q: "{LShift down}{Blind}{w up}", c: "{LShift down}{Blind}{s up}",
t: "Send {WheelDown 5}"
	c.
}

; Set joystick sensitivity and response rate for mouse movement
; The first two parameters are the joystick axis numbers, and the last two parameters are the sensitivity and response rate
KEY = YXzrRTFJWSBAQEDC
Loop, Parse, KEY
{
	; The first parameter is the joystick axis variable, and the second parameter is the sensitivity or response rate
	JoySetSensitivity, % A_LoopField, 52
}

; Convert joystick buttons to keyboard commands for game controls
; This allows for custom mapping of buttons to keyboard commands for different games
Joy9::Send {Tab}
Joy11::Send {Space}
Joy12::Send {LCtrl}
Joy2::Send {Enter}
Joy3::Send {LShift}
Joy4::Send {Backspace}
Joy5::Send {LAlt}
Joy6::Send {LWin}
Joy7::Send {Escape}
Joy8::Send {RAlt}
Joy9::Send {RCtrl}
Joy10::Send {Insert}
Joy11::Send {Home}
Joy12::Send {End}
Joy13::Send {Delete}
Joy14::Send {PgUp}
Joy15::Send {PgDn}

; Function that monitors joystick input and sends corresponding keyboard commands
SendIfJoy:
	; Retrieves the current position of the joystick axes and stores them in variables
	JoyGetPos, X, Y, z, r, t, b, j, Up,
	; Sends the corresponding keyboard command based on the joystick's current position
	Y = "{Blind}{w down}"
	y = "{Blind}{w up}"
	X = "{Blind}{a down}"
	x = "{Blind}{a up}"
	INI
	Check = 1
	Pos =
	GravityOff = Send {Space down}
	JoyU::Send {G {x "joyg_thresh39?" Joy1 ALIAS "Joy1" COMBO G {GAME}threshold39
	Pos++; b = j = 0
	Joy7 Up::Send {space up}
	JoyZ Up::Send {space up}
Joyo: Send {e down}
Joyu Up:: Send {e up}
RURU++%EnvirXRX.Z
	Pos = OnePosDuringDraws := XTUMBLRMT{SEND W {MOUSE}}
	a = 0
Case "press-command" ("maxmem", Joy4)
n={}  =INVISIBLEYYN
OnePosDuringDraws =
Send {Joy3 Down}
InitiateX = "OtherJoyButtonsCountdown",=
If (x = 0)
Check := 1
G = {}
CK
ini = Send {x offset10sc}
JOY.Check(x, 0)
Check =
OutFS =
retrieve = "Raster"
Send = JoystickHandler()J := 1
For ("forever")
{
	; Retrieves the current position of the joystick axes and stores them in variables
	JoyGetPos, X, Y, z, r, t, b, j, Up,

	; Sends the corresponding keyboard command based on the joystick's current position
	Y = "{Blind}{w down}"
	y = "{Blind}{w up}"
	X = "{Blind}{a down}"
	x = "{Blind}{a up}"
	INI
	Check = 1
	Pos =
	GravityOff = Send {Space down}
	JoyU::Send {G {x "joyg_thresh39?" Joy1 ALIAS "Joy1" COMBO G {GAME}threshold39
	Pos++; b = j = 0
	Joy7 Up::Send {space up}
	JoyZ Up::Send {space up}
}