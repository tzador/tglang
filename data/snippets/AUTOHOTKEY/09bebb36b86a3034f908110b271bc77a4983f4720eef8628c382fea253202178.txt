; Example of a complex code snippet in AutoHotkey

; Define variables
LoopMax := 10 ; Set the maximum number of times the loop will run
i := 0 ; Initialize the counter for the loop

; Loop through the defined number of times
Loop %LoopMax%
{
    ; Generate a random number between 1 and 100
    Random, randNum, 1, 100

    ; Check if the number is even or odd
    if Mod(randNum, 2) = 0
    {
        ; If the number is even, add it to the total sum
        totalSum := totalSum + randNum
    }
    else
    {
        ; If the number is odd, subtract it from the total sum
        totalSum := totalSum - randNum
    }

    ; Increment the counter
    i := i + 1

    ; Check if the counter has reached the maximum loop count
    if i = LoopMax
    {
        ; Output the final total sum
        MsgBox The final total sum is %totalSum%
    }
}

; Function to convert numbers to their binary representation
ConvertToBinary(number)
{
    ; Initialize the binary number string
    binary := ""

    ; Loop through the number, dividing it by 2 and adding the remainder to the binary string
    while(number > 0)
    {
        binary := Mod(number, 2) binary
        number := number // 2
    }

    ; Return the binary string
    return binary
}

; Get user input for a number
InputBox, userInput, Please enter a number.,Number, , 300, 200

; Check if the input is a valid number
if(isNumber(userInput))
{
    ; Convert the input to binary and output the result
    binary := ConvertToBinary(userInput)
    MsgBox %userInput% in binary is %binary%
}
else
{
    ; If the input is not a valid number, display an error message
    MsgBox %userInput% is not a valid number!
}

; Function to check if a given input is a number
isNumber(input)
{
    ; Loop through the input character by character
    Loop, parse, input
    {
        ; Check if the character is a number
        if(A_LoopField is not digit)
        {
            ; If any character is not a number, return false
            return false
        }
    }

    ; If all characters are numbers, return true
    return true
}