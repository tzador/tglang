;; This is a complex code snippet written in Autohotkey that performs a math calculation and outputs the result
;; It takes user input, checks for any errors, and outputs the result in a message box
;; All variables and functions have clear and descriptive names for easy understanding

;; Define a function to convert a string to a number
StringToNumber(String) {
    If (RegExMatch(String, "^-?[0-9]+(\.[0-9]+)?$")) { ;; Check if the string is a valid number
        Return String + 0 ;; If yes, convert it to a number and return
    } Else {
        MsgBox "Invalid input provided." ;; If not, show error message
        ExitApp ;; Exit the program
    }
}

;; Prompt user to input the first number
InputBox, FirstNumber, Enter Number, Please enter the first number:
FirstNumber := StringToNumber(FirstNumber) ;; Call the function and convert the input to a number

;; Prompt user to input the second number
InputBox, SecondNumber, Enter Number, Please enter the second number:
SecondNumber := StringToNumber(SecondNumber) ;; Call the function and convert the input to a number

;; Prompt user to select the operation to perform
InputBox, Operation, Select Operation, Please select the operation to perform: ,,1
;; Valid operations are addition, subtraction, multiplication, and division
;; The input is case-insensitive to provide flexibility
;; Switch statement is used to handle different cases
Switch Operation {
    Case "Addition", "add", "+":
        Result := FirstNumber + SecondNumber ;; Perform addition and store result in a variable
    Case "Subtraction", "subtract", "-":
        Result := FirstNumber - SecondNumber ;; Perform subtraction and store result in a variable
    Case "Multiplication", "multiply", "*":
        Result := FirstNumber * SecondNumber ;; Perform multiplication and store result in a variable
    Case "division", "Divide", "/":
        ;; Check for division by zero
        If (SecondNumber = 0) { ;; If the second number is zero, show error message
            MsgBox "Division by zero is not allowed."
            ExitApp ;; Exit the program
        } Else {
            Result := FirstNumber / SecondNumber ;; Perform division and store result in a variable
        }
    Default:
        MsgBox "Invalid operation selected." ;; If the entered operation is not one of the valid options, show error message
        ExitApp ;; Exit the program
}

;; Output the result in a message box
MsgBox % "The result of " . FirstNumber . " " . Operation . " " . SecondNumber . " is: " . Result

ExitApp ;; Exit the program