#targetengine "main" ; sets target engine as main

; function to create rectangular shape with given dimensions
createRect(x, y, w, h){
  Rect := {}
  Rect.Left := x ; sets left position of rectangle
  Rect.Top := y ; sets top position of rectangle
  Rect.Right := x + w ; sets right position of rectangle using width parameter
  Rect.Bottom := y + h ; sets bottom position of rectangle using height parameter
  return Rect ; returns the created rectangle
}

; function to get current cursor coordinates
getCursorCoords(){
  MouseGetPos X, Y ; gets current cursor coordinates
  return [X, Y] ; returns coordinates as an array
}

; function to check if cursor is within given rectangle area
isCursorWithinRect(rect){
  [X, Y] := getCursorCoords() ; gets current cursor coordinates
  if(X >= rect.Left && X <= rect.Right && Y >= rect.Top && Y <= rect.Bottom) ; checks if cursor is within the rectangle bounds
    return true ; returns true if cursor is within the rectangle
  return false ; returns false if cursor is not within the rectangle
}

; function to generate a random color code
generateColorCode(){
  return "#" . Format("{:06x}", Random(0, 0xFFFFFF)) ; returns a random color code in hexadecimal format, starting with a "#" symbol
}

; function to draw a colorful rectangle
drawRectRandomColor(){
  Rect := createRect(100, 100, 200, 150) ; creates a rectangle with given dimensions
  Color := generateColorCode() ; generates a random color code
  WinSet, TransColor, %Color% ; sets the rectangle to have a transparent color
  WinSet, Region, % "{RECT " . Rect.Left . " " . Rect.Top . " " . Rect.Right . " " . Rect.Bottom . "}" ; sets the rectangle as a custom window region with the specified coordinates
  WinSet, ExStyle, +0x20 ; adds WS_EX_TRANSPARENT window style to the rectangle, making it click-through
  WinSet, WindowID, % "ahk_id " . WinExist("A") ; sets the rectangle as the active window
}

; main code
^b:: ; sets hotkey as "Ctrl + B"
drawRectRandomColor() ; calls the function to draw a colorful rectangle
isCursorWithinRect(Rect) ; calls the function to check if cursor is within the rectangle
MsgBox % "Is cursor within the rectangle? " . isCursorWithinRect(Rect) ; shows a messagebox with the result