; This code snippet is a function that takes in an array of numbers and sorts them in descending order using the bubble sort algorithm.

; This function takes in a single parameter 'arr', which is the array of numbers.
BubbleSortDescending(arr) {
	; Set the 'swapped' variable to true to ensure that the loop runs at least once.
	swapped := true
	; Set the 'length' variable to the length of the input array.
	length := arr.Length()

	; Start a loop that will continue until no swaps are made.
	while swapped {
		; Set the 'swapped' variable to false, meaning no swaps have been made yet.
		swapped := false
		; Loop through the array from the first element to the second to last element.
		for i, j in 0..(length - 2) {
			; Check if the current element is less than the next element.
			if (arr[i] < arr[i+1]) {
				; Swap the elements using a temporary variable.
				temp := arr[i]
				arr[i] := arr[i+1]
				arr[i+1] := temp
				; Set 'swapped' to true, indicating that a swap has been made.
				swapped := true
			}
		}
		; Decrease the length of the loop by 1, as the last element is already in place.
		length--
	}

	; Return the sorted array.
	return arr
}

; Create an example array.
array := [5, 2, 8, 1, 3, 10, 4]
; Call the BubbleSortDescending function with the example array as the input.
sorted_array := BubbleSortDescending(array)
; Print the sorted array to the console.
MsgBox % "Sorted Array: " . sorted_array