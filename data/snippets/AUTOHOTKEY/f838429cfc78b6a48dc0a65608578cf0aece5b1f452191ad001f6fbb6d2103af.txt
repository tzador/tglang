; This code snippet is a demonstration of a complex data structure manipulation function in AutoHotkey.

; Define a class for a binary tree
class BinaryTree {
  constructor(value) {
    this._value := value
    this._left := null
    this._right := null
  }

  ; Function to insert a new node into the tree
  insert(value) {
    ; If the value is less than the current node's value, insert into the left subtree
    if (value < this._value) {
      ; If the left subtree is empty, create a node and assign it as the left child
      if (!this._left) {
        this._left := new BinaryTree(value)
      } else {
        ; Otherwise, recursively call the insert function on the left subtree
        this._left.insert(value)
      }
    } else {
      ; If the value is greater than or equal to the current node's value, insert into the right subtree
      ; If the right subtree is empty, create a node and assign it as the right child
      if (!this._right) {
        this._right := new BinaryTree(value)
      } else {
        ; Otherwise, recursively call the insert function on the right subtree
        this._right.insert(value)
      }
    }
  }

  ; Function to search for a value in the tree
  search(value) {
    ; If the current node's value is equal to the searched value, return true
    if (this._value = value) {
      return true
  }

    ; If the searched value is less than the current node's value, search the left subtree
    else if (value < this._value) {
      ; If the left subtree is not empty, recursively call the search function
      if (this._left) {
        return this._left.search(value)
      } else {
        return false
      }
    }

    ; If the searched value is greater than the current node's value, search the right subtree
    else {
      ; If the right subtree is not empty, recursively call the search function
      if (this._right) {
        return this._right.search(value)
      } else {
        return false
      }
    }
  }

  ; Function to delete a node from the tree
  delete(value) {
    ; First, search for the node with the specified value
    if (this.search(value)) {
      ; If the node to be deleted is the current node, handle it separately
      if (this._value = value) {
        ; If the node has both left and right children
        if (this._left && this._right) {
          ; Find the minimum value in the right subtree
          temp := this._right
          while (temp._left) {
            temp := temp._left
          }

          ; Copy the value of the minimum node to the current node
          this._value := temp._value
          ; Delete the minimum node from the right subtree
          this._right.delete(this._value)
        }

        ; If the node has only one child
        else if (this._left || this._right) {
          ; Assign the current node's child as the new child of its parent
          if (this._left) {
            this._left._parent := this._parent
            this._parent._right := this._left
          } else {
            this._right._parent := this._parent
            this._parent._left := this._right
          }
        }

        ; If the node has no children, simply remove it from the tree
        else {
          ; Check if the node is a left or right child of its parent
          if (this._parent._left = this) {
            this._parent._left := null
          } else {
            this._parent._right := null
          }
        }
      }

      ; If the node to be deleted is in the left subtree, recursively call the delete function on the left subtree
      else if (this._left && this._left.search(value)) {
        this._left.delete(value)
      }

      ; If the node to be deleted is in the right subtree, recursively call the delete function on the right subtree
      else if (this._right && this._right.search(value)) {
        this._right.delete(value)
      }
    }
  }
}

; Example usage of the BinaryTree class
tree := new BinaryTree(5) ; Create a new tree with the root node having value 5
tree.insert(2) ; Insert a node with value 2 into the tree
tree.insert(7) ; Insert a node with value 7 into the tree
tree.insert(1) ; Insert a node with value 1 into the tree
tree.insert(6) ; Insert a node with value 6 into the tree
tree.insert(8) ; Insert a node with value 8 into the tree
tree.search(6) ; Search for a node with value 6 in the tree, returns true
tree.delete(5) ; Delete the root node with value 5 from the tree