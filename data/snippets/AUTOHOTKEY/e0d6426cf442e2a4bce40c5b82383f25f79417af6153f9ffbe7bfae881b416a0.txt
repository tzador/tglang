#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
#Warn  ; Enable warnings to assist with detecting common errors.
#SingleInstance Force  ; Ensures only one instance of the script is running.
#MaxHotkeysPerInterval 128  ; Allows for more hotkeys and hotstrings to be used simultaneously.

; Set up input hook to capture all keyboard inputs.
; Modifier key presses will be sent to the active window, while other keys will be handled by the script.
#InstallKeybdHook

; Create a function to send modified keystrokes to the active window.
SendKeys(keys, modifiers="") {
  Send % modifiers keys
}

; Define a hotkey to trigger the function with custom parameters.
; The hotkey "Ctrl + Alt + S" will send the keys "Hello, world!" to the active window.
^!s::SendKeys("Hello, world!", "^!s")

; Create a hotstring to automatically replace "ahk" with "AutoHotkey" when typed.
:*:ahk::AutoHotkey

; Create a loop to continuously check for the active window and modify its keys.
SetTimer, ProcessHotkeys, 10

; Define a label to handle modifier key presses and store them in a variable.
ModifierLabel:
  Send %A_ThisHotkey%
  return

; Define a label to continuously check for the active window and send modified keys to it.
ProcessHotkeys:
  WinGetActiveTitle, Title
  If (Title != A_LastWindowTitle) {
    ; Store the last window title to compare and check if it has changed.
    A_LastWindowTitle := Title
    ; Check if the active window is not the script itself.
    If (Title != "ahk_class AutohotkeyGUI") {
      ; Set the variable "SendWindow" to the active window.
      SendWindow := Title
    }
    else {
      ; Set the variable "SendWindow" to an empty value if the active window is the script.
      SendWindow := ""
    }
  }

  ; If the variable "SendWindow" is not empty, set the active window and modifier keys.
  If (SendWindow != "") {
    WinActivate, %SendWindow%
    SendInput, {Blind}%A_PriorKey%
  }
  return