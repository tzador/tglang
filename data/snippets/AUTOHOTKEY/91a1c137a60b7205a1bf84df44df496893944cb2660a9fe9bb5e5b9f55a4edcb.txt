; This is a complex code snippet that involves multiple functions and loops.

; This first section defines a function that takes in two parameters, x and y, and returns their sum.
Sum(x, y)
{
    return x + y ; Returns the sum of x and y
}

; This section prompts the user to input two numbers and stores them in variables.
InputBox, x, Enter the first number, Enter the first number:
InputBox, y, Enter the second number, Enter the second number:

; This section creates an empty array and adds the two input numbers to it.
NumArray := [] ; Creates an empty array
NumArray.Insert(x) ; Adds x to the array
NumArray.Insert(y) ; Adds y to the array

; This section uses a loop to continuously ask for user input until they enter a negative number.
Loop
{
    InputBox, num, Enter a number or enter a negative number to exit, Enter a number:
    if (num < 0) ; Checks if the input is negative
    {
        break ; Exits the loop if the input is negative
    }
    else
    {
        NumArray.Insert(num) ; Adds the input to the array
    }
}

; This section uses a loop to iterate through the array and print out each number and its index.
Loop, % NumArray.MaxIndex() ; Loops through the array with the maximum index being the size of the array
{
    MsgBox, % "Index " . A_Index . ": " . NumArray[A_Index] ; Prints the index and the corresponding number in the array
}

; This section defines a function that calculates the factorial of a given number using recursion.
Factorial(num)
{
    if (num <= 1)
    {
        return 1 ; Returns 1 if the input is 0 or 1
    }
    else
    {
        return num * Factorial(num - 1) ; Calculates the factorial by recursively calling the function
    }
}

; This section prompts the user to input a number and calculates its factorial using the previously defined function.
InputBox, n, Enter a number to calculate its factorial, Enter a number:
MsgBox, % "The factorial of " . n . " is " . Factorial(n) ; Prints the result

; This section creates a hotkey that, when pressed, opens the calculator program.
^c:: ; Defines the hotkey as Ctrl+C
{
    Run, calc ; Executes the "calc" command to open the calculator
}

; This section creates a hotkey that, when pressed, saves the current date and time in a text file.
^d::
{
    FormatTime, DateTime, CurrentDateTime, yyyy/MM/dd HH:mm:ss ; Formats the current date and time
    FileAppend, % "The current date and time is " . DateTime, log.txt ; Appends the information to a text file named "log.txt"
}

; This final section defines a label that will be called from a timer every 5 seconds.
; The label displays the current date and time every time it is called.
TimerLabel:
FormatTime, Time, CurrentDateTime, yyyy/MM/dd HH:mm:ss ; Formats the current date and time
ToolTip, Current Time: % Time ; Displays the information in a tooltip
SetTimer, TimerLabel, 5000 ; Calls the label every 5 seconds
return ; Ends the program