; ### Sorts the input array using quick sort algorithm
; Parameters:
;   arr - input array to be sorted
;   low - starting index of the array
;   high - ending index of the array
qsort(arr,low,high) {
    if (low >= high) return
    pivot := partition(arr,low,high)
    qsort(arr,low,pivot-1)
    qsort(arr,pivot+1,high)
}

; ### Helper function to partition the array based on pivot
; Parameters:
;   arr - input array
;   low - starting index of the array
;   high - ending index of the array
; Returns:
;   index of the pivot element
partition(arr,low,high) {
    pivot := arr[high]
    i := low - 1

    Loop, % high {
        if (arr[A_Index-1] <= pivot) {
            i++
            ; Swap elements at indexes i and A_Index-1
            tmp := arr[i]
            arr[i] := arr[A_Index-1]
            arr[A_Index-1] := tmp
        }
    }

    ; Swap elements at indexes i+1 and high
    tmp := arr[i+1]
    arr[i+1] := arr[high]
    arr[high] := tmp

    return i+1
}