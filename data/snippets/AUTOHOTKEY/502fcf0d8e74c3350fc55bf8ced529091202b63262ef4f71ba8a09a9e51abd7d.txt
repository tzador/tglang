; This is a complex code snippet in AutoHotkey
; It performs various tasks and has multiple functions

#SingleInstance Force ; Ensures only one instance of the code is running at a time

; Define global variables
global first_name := "John"
global last_name := "Smith"
global age := 35
global is_married := true

; Define a function that calculates the sum of two numbers
sum(num1, num2) {
    return num1 + num2
}

; Define a function that checks if a person is eligible to vote
check_vote_eligibility() {
    if age >= 18 {
        return true
    } else {
        return false
    }
}

; Define a hotkey that displays a message with the person's full name and age
^+f::
    MsgBox % "Hello, my name is " first_name " " last_name " and I am " age " years old."
return

; Define a hotstring that automatically types out "Hello" whenever the user types "hl"
::hl::Hello

; Define a loop that counts from 1 to 10 and displays each number in a message box
Loop, 10 {
    MsgBox % "Current number: " A_Index
}

; Define a function that checks if a person's name starts with a vowel
check_vowel_name() {
    first_letter := StrSplit(first_name, "")
    if first_letter ~= "[aeiou]" {
        return true
    } else {
        return false
    }
}

; Define a class for a person with properties and methods
class Person {
    ; Properties
    first_name
    last_name
    age
    is_married

    ; Constructor
    __New(first, last, age, married) {
        this.first_name := first
        this.last_name := last
        this.age := age
        this.is_married := married
    }

    ; Method to update person's first name
    update_first_name(new_first) {
        this.first_name := new_first
    }

    ; Method to update person's age
    update_age(new_age) {
        this.age := new_age
    }
}

; Create an instance of the Person class with the given information
person := new Person("Sarah", "Johnson", 28, false)

; Call the update_age() method to change the person's age
person.update_age(35)

; Display the person's full name and age
MsgBox % "Name: " person.first_name " " person.last_name "`nAge: " person.age

; Check if the person's name starts with a vowel
if person.check_vowel_name() {
    MsgBox % "The person's name starts with a vowel."
} else {
    MsgBox % "The person's name does not start with a vowel."
}