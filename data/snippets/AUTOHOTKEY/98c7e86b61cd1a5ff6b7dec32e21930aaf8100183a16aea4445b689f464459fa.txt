;Function to find the maximum of two numbers
findMax(num1, num2) {

  if (num1 > num2) { ;Checking if num1 is greater than num2
    return num1 ;Returning num1 if it is greater
  }
  else { ;If num1 is not greater than num2
    return num2 ;Return num2 as the maximum
  }
}

;Function to calculate the area of a rectangle
calcRectArea(length, width) {
  return length * width ;Area formula for rectangle
}

;Creating a list of numbers
numbers := [1, 3, 5, 8, 2, 9, 4]

;Looping through the list to find the maximum
max := findMax(numbers[1], numbers[2]) ;Initializing max to the first two numbers in the list

Loop, % Numbers.Length() { ;Looping through the list
  current := numbers[A_Index] ;Current number in the list
  max := findMax(current, max) ;Updating max with the maximum of current and max
}

;Printing the maximum
MsgBox, The maximum number in the list is %max%

;Creating an object to store student information
student := {"name": "John", "age": 24, "major": "Computer Science"}

;Looping through the object to print the information
for k, v in student { ;Looping through keys and values in the object
  MsgBox, % "Student's " . k . ": " . v ;Printing the information in a message box
}

;Declaring a class for a car
class Car {
  constructor(make, model, year) { ;Constructor function that takes in make, model, and year
    this.make := make ;Assigning make to the property "make"
    this.model := model ;Assigning model to the property "model"
    this.year := year ;Assigning year to the property "year"
  }

  ;Method to print the car's information
  PrintInfo() {
    MsgBox, % "This car is a " . this.year . " " . this.make . " " . this.model
  }
}

;Creating an instance of a car
myCar := new Car("Honda", "Civic", 2010)

;Printing the car's information
myCar.PrintInfo() ;Output: This car is a 2010 Honda Civic