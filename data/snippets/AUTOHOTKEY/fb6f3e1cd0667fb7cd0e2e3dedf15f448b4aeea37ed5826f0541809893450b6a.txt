; This code snippet is a custom function for generating random passwords with specified complexity
; The password will include at least one uppercase letter, one lowercase letter, one number
; and one special character (e.g. !, @, #, etc.)
; Function usage: GeneratePassword(Length, Complexity)
; Length - the desired length of the password
; Complexity - an integer from 1 to 10 indicating the desired complexity, where 1 is the least complex
; and 10 is the most complex

GeneratePassword(Length, Complexity) {

    ; Initialize an empty password string
    Password := ""

    ; Create a list of uppercase letters, lowercase letters, numbers, and special characters
    Uppercase := "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    Lowercase := "abcdefghijklmnopqrstuvwxyz"
    Numbers := "0123456789"
    SpecialChars := "!@#$%^&*()-=_+~`[]{}|;':\"<>?,./"

    ; Create a random starting point for each type of character
    ; The starting point is based on the specified complexity
    UppercaseStart := Random(0, 26 - Complexity)
    LowercaseStart := Random(0, 26 - Complexity)
    NumbersStart := Random(0, 10 - Complexity)
    SpecialCharsStart := Random(0, 23 - Round(Complexity / 2))

    ; Loop through the specified length to generate the password
    Loop, %Length% {
        
        ; Choose a random type of character based on the complexity
        RandomType := Random(1, 10)
        if (RandomType <= Complexity) {
            ; Choose a random uppercase letter
            Password .= SubStr(Uppercase, UppercaseStart + Random(0, Complexity), 1)
        } else if (RandomType <= Complexity * 2) {
            ; Choose a random lowercase letter
            Password .= SubStr(Lowercase, LowercaseStart + Random(0, Complexity), 1)
        } else if (RandomType <= Complexity * 3) {
            ; Choose a random number
            Password .= SubStr(Numbers, NumbersStart + Random(0, Complexity), 1)
        } else {
            ; Choose a random special character
            Password .= SubStr(SpecialChars, SpecialCharsStart + Random(0, Round(Complexity / 2)), 1)
        }
    }

    ; Return the generated password
    return Password
}

; Example usage:
; Password with length 10 and complexity 5
Password := GeneratePassword(10, 5)

; Another example with length 8 and complexity 10
Password := GeneratePassword(8, 10)