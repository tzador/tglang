#SingleInstance, Force ; forces the script to only have a single instance running
SendMode Input ; changes the send mode to use raw input for greater speed and reliability
SetTitleMatchMode, 2 ; sets the window title matching mode to match any substring of the window title
SetWorkingDir %A_ScriptDir% ; sets the working directory to the same directory as the script
FileEncoding, UTF-8 ; sets the default file encoding to UTF-8

; declare variables
globalVar := "I am a global variable"
localVar := "I am a local variable"

; define a function with parameters
Func FunctionName(param1, param2)
{
    global globalVar ; declares the global variable as global within the function
    local localVar ; declares the local variable as local within the function

    ; do some calculations
    result := param1 + param2 + globalVar + localVar

    ; print the result
    MsgBox % result
}

; call the function
FunctionName(10, 20)

; create a hotkey to activate the function
^z::FunctionName(5, 5) ; this hotkey will call the function with the parameters 5 and 5 when Ctrl + z is pressed

; create a loop
Loop, 10
{
    ; do something 10 times
}

; create a conditional statement
if (param1 = param2)
{
    ; do something
}
else if (param1 > param2)
{
    ; do something else
}
else
{
    ; do something if neither condition is met
}

; create a switch statement
Switch, param
{
    case "option1": ; if param is "option1"
        ; do something
        break ; breaks out of the switch statement
    case "option2": ; if param is "option2"
        ; do something else
        break ; breaks out of the switch statement
    case "option3": ; if param is "option3"
        ; do something completely different
        break ; breaks out of the switch statement
    default: ; if none of the cases are met
        ; do something else entirely
        break ; breaks out of the switch statement
}

; create a try-catch statement
try
{
    ; code that may cause an error
}
catch
{
    ; code to handle the error
}

; define an object
myObject := {"key1": "value1", "key2": "value2"}

; access and modify object properties
myObject.key1 := "new value1" ; modifies the value of key1
myObject["key2"] := "new value2" ; also modifies the value of key2

; loop through object keys
for key, value in myObject
{
    ; do something with the key and value
}

; create a GUI with a button
Gui, Add, Button, x10 y10 w100 h50, Click Me ; creates a button at position (x,y) with width and height and text "Click Me"
Gui, Show ; displays the GUI
return ; exits the code block

; create a function to handle button clicks
Button_Click()
{
    ; do something when the button is clicked
    MsgBox You clicked the button!
}

; assign the button click function to the button
GuiControl, Add, Text, cBlue, %Button_Click% ; assigns the Button_Click function to handle button clicks
Gui, Show
return

; create a timer that repeats a function every 1 second
SetTimer, FunctionName, 1000 ; this will call the function named FunctionName every 1 second
return

; create a menu with items
Menu, MyMenu, Add, &Option1, MenuHandler ; adds a menu item named Option1 and assigns the MenuHandler function to handle its selection
Menu, MyMenu, Add, &Option2, MenuHandler ; adds another menu item named Option2
Menu, MyMenu, Add, Option3 ; adds a regular menu item without a handler function
Menu, MyMenu, Add ; adds a separator between the menu items
Menu, MyMenu, Add, E&xit, ExitApp ; adds an exit menu item that will terminate the script when selected
return

MenuHandler:
    MsgBox You selected %A_ThisMenuItem% from MyMenu ; displays a message telling the user which menu item was selected
return :ExitApp ; exits the script when the exit menu item is selected

; create a custom tooltip with a timer that updates every 500ms
myTooltip := "This is my custom tooltip!" ; define the text for the tooltip
Gui, +ToolWindow ; creates a tooltip window without a frame
Gui, Add, Text, w200 Center, %myTooltip% ; adds a text control to display the tooltip text
Gui, Show, xy ; displays the GUI at the cursor position
ToolTip, ; hides the default tooltip
SetTimer, UpdateTooltip, 500 ; calls the UpdateTooltip function every 500ms
return

UpdateTooltip:
    WinGetPos, tooltipX, tooltipY, , , % "ahk_id " Gui ; gets the position of the tooltip window
    mousex := tooltipX + 100 ; calculates the position for the cursor inside the tooltip
    mousey := tooltipY + 20 ; adds an offset to make the cursor more visible
    DllCall("SetCursorPos", "Int", mousex, "Int", mousey) ; moves the cursor to the calculated position
return