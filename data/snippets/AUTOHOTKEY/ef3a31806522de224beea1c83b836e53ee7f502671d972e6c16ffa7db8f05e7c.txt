; This code snippet generates a random password with a specified length and complexity

; Function to generate a random password
RandomPasswordGenerator(length, complexity) {
  
  ; Declare an empty variable to store the password
  password := ""

  ; Loop through the specified length to generate the password
  Loop, %length% {

    ; Generate a random number to determine which character set to use
    randomNumber := Random(1, complexity)

    ; Use a switch statement to determine which character set to use
    switch (randomNumber) {

      ; If randomNumber is 1, use lowercase letters
      case 1:
        charSet := "abcdefghijklmnopqrstuvwxyz"
        break
      
      ; If randomNumber is 2, use uppercase letters
      case 2:
        charSet := "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        break

      ; If randomNumber is 3, use numbers
      case 3:
        charSet := "0123456789"
        break
      
      ; If randomNumber is 4, use special characters
      case 4:
        charSet := "!#$%&'()*+,-./:;<=>?@[\]^_`{|}~"
        break
    }

    ; Generate a random index to select a character from the chosen character set
    randomIndex := Random(1, StrLen(charSet))

    ; Add the selected character to the password variable
    password .:= SubStr(charSet, randomIndex, 1)
  }

  ; Return the generated password
  return password
}

; Usage example:
; Generate a 10 character password with medium complexity (lowercase letters, uppercase letters, and numbers)
generatedPassword := RandomPasswordGenerator(10, 3)

; Output the generated password
MsgBox %generatedPassword%