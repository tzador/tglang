#Persistent  ; This keeps the script running even when no hotkeys are being pressed
#InstallKeybdHook  ; This is required for key remapping and prevents conflicts with other programs
#SingleInstance Force  ; Ensures that only one instance of the script is running
#NoEnv  ; Disables variable and function checks for improved performance

; Sets up a hotkey to toggle a custom function
; The function will simulate a mouse click and keystroke combination

`::
	SendInput, {Click, 50, 50}  ; Simulates a left click at the coordinates (50, 50)
	Sleep, 50  ; Waits for 50 milliseconds to allow the click to register
	SendInput, abc  ; Types the letters 'abc'
	Return  ; Ends the function
Return  ; Ends the hotkey

; Sets up a hotkey to toggle a loop
; The loop will continuously execute a series of commands until the hotkey is pressed again

`::
	Loop
	{
		SendInput, {Left}  ; Presses the left arrow key
		Sleep, 100  ; Waits for 100 milliseconds
		SendInput, {Right}  ; Presses the right arrow key
		Sleep, 100  ; Waits for 100 milliseconds
		SendInput, {Up}  ; Presses the up arrow key
		Sleep, 100  ; Waits for 100 milliseconds
		SendInput, {Down}  ; Presses the down arrow key
		Sleep, 100  ; Waits for 100 milliseconds
	}
Return  ; Ends the hotkey

; Sets up a hotkey to toggle a custom function with a parameter
; The function will type out the specified parameter
`::
	InputBox, UserInput, Enter text to type, , 280, 130  ; Opens a dialog box for the user to enter text
	if (ErrorLevel = "OK")  ; Checks if the user clicked 'OK' or 'Cancel'
		SendInput, %UserInput%  ; Types out the user's input
Return  ; Ends the hotkey