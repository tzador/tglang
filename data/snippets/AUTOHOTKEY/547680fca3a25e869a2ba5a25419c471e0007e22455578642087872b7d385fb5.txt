#InstallKeybdHook ; installs a global keyboard hook to monitor key presses
#KeyHistory ; displays a history of key presses in the past 1000ms
#MaxThreadsPerHotkey, 3 ; limits the number of simultaneous threads for each hotkey to avoid blocking
SetTitleMatchMode, 2 ; sets the title matching mode to use the entire window title
SetWinDelay, -1 ; sets the WinDelay to -1 to eliminate any delay when using the WinTitle delay option
IfWinExist, ahk_class Notepad ; condition checks if Notepad window exists
{
    WinActivate ; activates the Notepad window
    Send, This is a long and complex code snippet. ; sends text to the active window
    Sleep, 100 ; sleeps for 100 milliseconds
    Send, {Enter} ; sends an Enter key press
    SendPlay, {Space} ; sends a space key press
    Loop, 10 ; loops 10 times
    {
        Send, Text{i} ; sends the current loop count followed by the word Text
    }
    Send, {Tab} ; sends a Tab key press
    Send, %clipboard% ; sends the contents of the clipboard
    ControlSend, Edit1, ^a, Untitled - Notepad ; sends a control send to select all text in the Notepad window
    ControlSend, Edit1, ^c, Untitled - Notepad ; sends a control send to copy the selected text
    IniWrite, %clipboard%, C:\Output.ini, Section1, Key1 ; writes the clipboard contents to an ini file
    IniRead, Output, C:\Output.ini, Section1, Key1 ; reads the contents of the ini file and stores it in the Output variable
    Send, %Output% ; sends the contents of the Output variable
    Random, Var, 1, 100 ; generates a random number between 1 to 100 and stores it in the Var variable
    Send, %Var% ; sends the variable value to the active window
    ShellExecute, http://www.example.com ; opens a website in the default browser
}
return ; ends the if statement
#IfWinExist, ahk_class Chrome_WidgetWin_1 ; condition checks if Chrome window exists
{
    WinGet, ID, ID, A ; retrieves the ID of the active window
    WinActivate, ahk_id %ID% ; activates the active window using the ID
    Send, !{f4} ; sends an Alt + F4 key press to close the window
    MouseClick, right, 100, 100 ; clicks the right mouse button at coordinates (100,100)
    ControlClick, Button3, ahk_class Shell_TrayWnd ; clicks a specific button on the taskbar
    ImageSearch, FoundX, FoundY, 0, 0, 100, 100, *24 C:\image.png ; searches for an image in a specific area on the screen
    if (ErrorLevel = 0) ; checks if the image was found
    {
        MouseMove, %FoundX%, %FoundY%, 0 ; moves the mouse to the coordinates where the image was found
        MouseClick, left ; clicks the left mouse button
    }
    else
    {
        Send, Image not found. ; sends a message if the image is not found
    }
}
return ; ends the if statement