script convertTimeToDate
    property startDateTime : current date
    property endDateTime : current date
    property timeString : "12:30 PM"
    property dateString : "10/05/2021"
    
    on run
        set startDate to dateFromString(dateString)
        set endDate to dateFromString(dateString)
        tell application "System Events"
            set dateFormat to short date format of (region settings)
            set timeFormat to short time format of (region settings)
        end tell
        set timeSeparator to (the second character of the timeFormat)
        set dateString to text 1 thru 2 of dateString & timeSeparator & timeString
        set startDate to my dateFromString(dateString)
        set endDate to my dateFromString(dateString)
        if (startDate as date) is missing value then
            set startDate to startDateTime
        end if
        if (endDate as date) is missing value then
            set endDate to endDateTime
        end if
        log startDate
        log endDate
        set newStartDate to roundDate(startDate, 3, "minutes")
        set newEndDate to roundDate(endDate, 3, "minutes")
        log newStartDate
        log newEndDate
    end run
    
    on dateFromString(dateString)
        set {oldDelimiters, text item delimiters} to {text item delimiters, "/"}
        set {month, day, year} to text items of dateString
        set text item delimiters to oldDelimiters
        return (current date) + ((day * hours) + (month * days) + (year * days))
    end dateFromString
end script

--Helper function to round a date to the nearest interval of units
on roundDate(thisDate, interval, units)
    set minuteRatio to 60 / interval
    set dayRatio to 24 / interval
    set startTime to time of thisDate
    set roundedTime to (round (startTime / 60 / interval)) * 60 * interval
    if roundedTime = (dayRatio * 60) then
        set roundedTime to 0
        set newDate to thisDate + round (dayRatio * 60) * minutes
    else
        set newDate to (time string of thisDate) & roundedTime
    end if
    set newDate to newDate as string

    if units = "minutes" then
        set newDate to date string of thisDate & space & (text 1 thru text item -3 of newDate)
    else if units = "hours" then
        set newDate to (newDate / 60) as string & space & date string of thisDate
    else
        set newDate to date string of thisDate & space & time string of thisDate
    end if

    return newDate as date
end roundDate