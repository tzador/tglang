-- This code snippet creates a to-do list application in Applescript

-- Set default values
set taskList to {}
set taskNum to 0
set taskName to ""
set taskPriority to ""

-- Define function to add a task
on addTask(taskName, taskPriority)
    -- Check if task name and priority are not empty
    if taskName ≠ "" and taskPriority ≠ "" then
        -- Increment task number
        set taskNum to taskNum + 1
        -- Create record of task details
        set newTask to {name:taskName, priority:taskPriority}
        -- Add task to list
        set end of taskList to newTask
        -- Display success message
        display dialog "Task added successfully!" buttons {"OK"} default button "OK"
    else
        -- Display error message
        display dialog "Please fill in all fields." buttons {"OK"} default button "OK" with icon caution
    end if
end addTask

-- Define function to view all tasks
on viewTasks()
    -- Check if task list is not empty
    if taskList ≠ {} then
        -- Display header
        display dialog "TASK LIST" buttons {"OK"} default button "OK"
        -- Loop through task list
        repeat with i from 1 to count of taskList
            -- Get task details
            set taskName to name of item i of taskList
            set taskPriority to priority of item i of taskList
            -- Display task info
            display dialog "Task " & i & ": " & taskName & " (Priority: " & taskPriority & ")" buttons {"OK"} default button "OK"
        end repeat
    else
        -- Display error message
        display dialog "Task list is empty. Please add tasks first." buttons {"OK"} default button "OK" with icon stop
    end if
end viewTasks

-- Define function to delete a task
on deleteTask(taskNum)
    -- Check if task number is valid
    if taskNum > 0 and taskNum ≤ count of taskList then
        -- Display confirmation message
        set yesNo to button returned of (display dialog "Are you sure you want to delete task " & taskNum & "?" buttons {"Yes", "No"} default button "No")
        -- Check user's choice
        if yesNo = "Yes" then
            -- Remove task from list
            set item taskNum of taskList to {}
            -- Loop through remaining tasks and reassign task numbers
            repeat with i from taskNum + 1 to count of taskList
                if item i of taskList ≠ {} then
                    set name of item i of taskList to "Task " & (i - 1)
                end if
            end repeat
            -- Display success message
            display dialog "Task deleted successfully!" buttons {"OK"} default button "OK"
        end if
    else
        -- Display error message
        display dialog "Invalid task number." buttons {"OK"} default button "OK" with icon stop
    end if
end deleteTask

-- Display menu of options
set menuOptions to {"Add Task", "View Tasks", "Delete Task", "Exit"}
set userChoice to choose from list menuOptions with prompt "What would you like to do?" cancel button name "Exit"

-- Check user's choice and call appropriate functions
if userChoice = "Add Task" then
    display dialog "Enter task name:" default answer ""
    set taskName to text returned of result
    if taskName = "" then
        display dialog "Task name cannot be empty." buttons {"OK"} default button "OK" with icon stop
    else
        display dialog "Enter task priority:" default answer ""
        set taskPriority to text returned of result
        addTask(taskName, taskPriority)
    end if
else if userChoice = "View Tasks" then
    viewTasks()
else if userChoice = "Delete Task" then
    display dialog "Enter task number:" default answer ""
    set taskNum to text returned of result
    deleteTask(taskNum as number)
end if