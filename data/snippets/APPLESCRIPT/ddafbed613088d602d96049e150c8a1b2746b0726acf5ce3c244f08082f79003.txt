-- Setting a variable to a list of integers
set intList to {5, 10, 15, 20, 25}

-- Loop through the list and print each integer multiplied by 2
repeat with i from 1 to count of intList
    -- Multiply the current integer by 2
    set intListItem to item i of intList
    set intListItem to intListItem * 2
    
    -- Print the result
    log intListItem
    
    -- Check if the number is divisible by 3
    if intListItem mod 3 = 0 then
        -- If so, add it to a new list
        set divisibleList to (a reference to (count of divisibleList))
        set item (count of divisibleList) of divisibleList to intListItem
    end if
end repeat

-- Concatenate the two lists
set finalList to intList & divisibleList

-- Sort the list in ascending order
set finalListSorted to my quicksort(finalList)

-- Quick Sort function
on quicksort(my_list)
    set the low_list to {}
    set the high_list to {}
    
    -- Select a pivot value
    if (count my_list) > 1 then
        set pivot_value to item 1 of my_list
        
        -- Loop through the list and compare each item to the pivot value
        repeat with i from 2 to (count my_list)
            set item_value to item i of my_list
            if item_value < pivot_value then
                set the end of low_list to item_value
            else
                set the end of high_list to item_value
            end if
        end repeat
        
        -- Sort the low and high lists recursively
        set sorted_low_list to my quicksort(low_list)
        set sorted_high_list to my quicksort(high_list)
        
        -- Combine the lists and return the sorted list
        return (sorted_low_list & {pivot_value} & sorted_high_list)
    else
        return my_list
    end if
end quicksort

-- Print the final sorted list
repeat with j from 1 to count of finalListSorted
    log item j of finalListSorted
end repeat