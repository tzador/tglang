--This script randomly generates a password of specified length and complexity--

--This function generates a list of possible characters based on complexity--
on possibleCharacters(complexity)
    if complexity = "easy" then
        return {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"}
    else if complexity = "medium" then
        return {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "1", "2", "3", "4", "5"}
    else if complexity = "hard" then
        return {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "1", "2", "3", "4", "5", "!", "@", "#", "$", "%"}
    end if
end possibleCharacters

--This function generates a random index based on length of possible characters--
on generateIndex(possibleCharacters)
    return some item of possibleCharacters
end generateIndex

--This function generates a list of random indexes based on specified length--
on generateIndexes(length, possibleCharacters)
    set indexList to {}
    repeat length times
        set end of indexList to generateIndex(possibleCharacters)
    end repeat
    return indexList
end generateIndexes

--This function generates the final password based on list of indexes--
on generatePassword(indexes)
    set password to ""
    repeat with index in indexes
        set password to password & index
    end repeat
    return password
end generatePassword

--This function converts the password into an array and shuffles it--
on shufflePassword(password)
    set characterList to {}
    repeat with i from 1 to length of password
        copy character i of password to end of characterList
    end repeat
    repeat with i from length of characterList to 2 by -1
        set j to random number from 1 to i
        set item i of characterList to item j of characterList
    end repeat
    set shuffledPassword to ""
    repeat with character in characterList
        set shuffledPassword to shuffledPassword & character
    end repeat
    return shuffledPassword
end shufflePassword

--User inputs desired length and complexity of password--
set desiredLength to 10
set desiredComplexity to "hard"

--Generate list of possible characters and generate list of indexes--
set possibleChars to possibleCharacters(desiredComplexity)
set passwordIndexes to generateIndexes(desiredLength, possibleChars)

--Generate password and shuffle it--
set generatedPassword to generatePassword(passwordIndexes)
set shuffledPassword to shufflePassword(generatedPassword)

--Output the final password--
return "Your new password is " & shuffledPassword