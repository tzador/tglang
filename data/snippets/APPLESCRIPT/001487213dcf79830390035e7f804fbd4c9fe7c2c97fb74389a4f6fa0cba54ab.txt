-- This code snippet will create a to-do list using AppleScript

-- Creating a new folder to store the to-do list file
set todo_folder to POSIX path of (path to desktop) & "To-Do List"
do shell script "mkdir '" & todo_folder & "'"

-- Defining the file name and path
set todo_list_path to todo_folder & "/todo_list.txt"

-- Creating the text file for the to-do list
set todo_list_file to open for access file todo_list_path with write permission
set eof of todo_list_file to 0

-- Getting user input for the to-do list
display dialog "Enter tasks for your to-do list, separated by commas:" default answer ""
set the_input to text returned of result

-- Splitting the user input into separate tasks
set task_list to my split(the_input, ",")

-- Sorting the tasks alphabetically
set sorted_tasks to my sort(task_list)

-- Writing the sorted tasks to the text file
repeat with i from 1 to count of sorted_tasks
    set task to item i of sorted_tasks
    write task & return to todo_list_file starting at eof
end repeat

-- Closing the text file
close access todo_list_file

-- Function to split user input into a list, based on a delimiter
on split(the_string, the_delimiter)
    set old_delimiters to AppleScript's text item delimiters
    set AppleScript's text item delimiters to the_delimiter
    set the_array to every text item of the_string
    set AppleScript's text item delimiters to old_delimiters
    return the_array
end split

-- Function to sort a list alphabetically
on sort(the_list)
    tell (a reference to  the_list)
        set a to (it as list)
        set b to (it as list)
    end tell

    repeat with i from 1 to count of a
        set min_pos to i
        repeat with j from i + 1 to count of b
            if item j of b < (item min_pos of b) then
                set min_pos to j
            end if
        end repeat
        if min_pos â‰  i then
            set {item i of a, item min_pos of a} to {item min_pos of a, item i of a}
            set {item i of b, item min_pos of b} to {item min_pos of b, item i of b}
        end if
    end repeat

    return a
end sort