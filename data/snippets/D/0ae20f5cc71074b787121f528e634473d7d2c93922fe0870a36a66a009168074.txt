/// This is a sample code snippet written in D Programming Language
/// It is a numerical integration program using the adaptive Simpson's rule
module numerical_integration;

import std.math;
import std.stdio;

// Define the function to be integrated
double func(double x) {
    return x * x - 1 + sin(x);
}

// Define the adaptive Simpson's rule function
double adaptiveSimpsons(double a, double b, int maxRecursionDepth, double minInterval, double maxInterval, double minError, double prevArea) {
    // Calculate the mid-point and interval
    double middle = (a + b) / 2;
    double h = b - a;
    // calculate the two sub-intervals
    double c = (a + middle) / 2;
    double d = (middle + b) / 2;
    // Calculate area of the two sub-intervals
    double area_left = (h / 6) * (func(a) + 4 * func(c) + func(middle));
    double area_right = (h / 6) * (func(middle) + 4 * func(d) + func(b));
    // Calculate the total area
    double total_area = area_left + area_right;
    // Check for acceptable error
    if (abs(total_area - prevArea) <= 15 * minError || maxRecursionDepth <= 0) {
        return total_area + (total_area - prevArea) / 15;
    }
    // If error is not acceptable, calculate area of each sub-interval
    double left_area = adaptiveSimpsons(a, middle, maxRecursionDepth - 1, minInterval, maxInterval, minError / 2, area_left);
    double right_area = adaptiveSimpsons(middle, b, maxRecursionDepth - 1, minInterval, maxInterval, minError / 2, area_right);
    // Return the combined area
    return left_area + right_area;
}

void main() {
    // Define the limits of integration
    double lowerLimit = 0.0;
    double upperLimit = 2.0;
    // Set maximum recursion depth and error tolerance
    int maxRecursionDepth = 100;
    double minError = 0.00001;
    // Call the adaptive Simpson's rule function and print the result
    double result = adaptiveSimpsons(lowerLimit, upperLimit, maxRecursionDepth, 0.005, 0.5, minError, 0.0);
    writeln("The result of the integration is: ", result);
}