import std.stdio;

// Define a struct named "Person" with attributes "name" and "age"
struct Person {
    string name;
    int age;
}

// Create a function "printPerson" that takes in a "Person" and outputs their information
void printPerson(Person person) {
    writeln("Name: ", person.name);
    writeln("Age: ", person.age);
}

// Create a struct named "Student" that inherits from "Person" and adds attribute "studentID"
struct Student : Person {
    int studentID;
}

// Create a custom exception called "InsufficientFundsException" that inherits from "Exception"
class InsufficientFundsException : Exception {
    int amount;
    this(string message, int amount) {
        super(message);
        this.amount = amount;
    }
}

// Create a function "withdraw" that takes in an "int" for the amount and checks if it is greater than available funds
// If not enough funds, throw an "InsufficientFundsException"
// Otherwise, print "Successfully withdrew $" followed by the amount
void withdraw(int amount) {
    int availableFunds = 1000;

    if (amount > availableFunds) {
        throw new InsufficientFundsException("Not enough funds to withdraw", amount);
    }
    else {
        writeln("Successfully withdrew $", amount);
    }
}

// Create an array of "Student" objects with different names, ages, and student IDs
Student[] students = [
    Student("John", 20, 123456),
    Student("Mary", 22, 234567),
    Student("Frank", 19, 345678)
];

// Loop through the array and print each student's information using the "printPerson" function
foreach (student; students) {
    printPerson(student);
}

// Try to withdraw $1500 and catch the "InsufficientFundsException" if it is thrown
try {
    withdraw(1500);
}
catch (InsufficientFundsException e) {
    writeln("Error: ", e.msg, ". You tried to withdraw $", e.amount);
}