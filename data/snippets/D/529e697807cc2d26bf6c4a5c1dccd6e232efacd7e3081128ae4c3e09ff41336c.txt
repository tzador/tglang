// This code snippet creates a binary search tree and inserts nodes into it
// Initialization of binary search tree struct
struct BST {
    int value; // integer value of node
    BST* left; // pointer to left child node
    BST* right; // pointer to right child node
    BST(int val) { // constructor to set initial value
        value = val;
        left = null; // initialize left and right as null
        right = null;
    }
}

// Function to insert a new node into the BST
// Takes the root node and the value to insert as parameters
BST* insert(BST* root, int val) {
    if (root is null) { // if the root is null, create new node
        return new BST(val);
    }
    if (val < root.value) { // if value is less than current node, insert into left subtree
        root.left = insert(root.left, val);
    }
    else { // if value is greater than or equal to current node, insert into right subtree
        root.right = insert(root.right, val);
    }
    return root; // return the modified BST with new node inserted
}

// Create a new BST with root node value of 5
BST* bst = insert(null, 5);

// Insert additional nodes
insert(bst, 3);
insert(bst, 7);
insert(bst, 2);
insert(bst, 6);
insert(bst, 8);
insert(bst, 4);

// Output the root node value of the BST
writeln(bst.value); // Output: 5

// Output left subtree of root node (values 3, 2)
writeln(bst.left.value); // Output: 3
writeln(bst.left.left.value); // Output: 2

// Output right subtree of root node (values 7, 6, 8)
writeln(bst.right.value); // Output: 7
writeln(bst.right.left.value); // Output: 6
writeln(bst.right.right.value); // Output: 8