/* This code snippet is a D Programming Language implementation of the Knuth-Morris-Pratt algorithm for string matching.
   It takes a pattern and a string as input and returns the starting index of the first occurrence of the pattern in the string. */
   
/* First, we define a fail function that computes the longest proper prefix of the pattern that is also a proper suffix.
   This function is used in the KMP algorithm to optimize the search process. */

int[] fail(string pattern) // Takes the pattern as input
{
    int[] failArr = new int[pattern.length]; // Create an array to store the fail values
    int i = 1; // Start at the second character of the pattern
    int j = 0; // j represents the length of the longest proper prefix that is also a proper suffix

    while(i < pattern.length)
    {
        if(pattern[i] == pattern[j]) // If the current characters match
        {
            failArr[i] = j + 1; // Set the fail value for the current character to j + 1
            i++; // Move on to the next character
            j++; // Increase j by 1
        }
        else if(j > 0) // If the current characters don't match but j is not at the beginning of the pattern
        {
            j = failArr[j - 1]; // Use the fail value of the previous character to determine the new j
        }
        else // If the current characters don't match and j is at the beginning of the pattern
        {
            failArr[i] = 0; // Set the fail value for the current character to 0
            i++; // Move on to the next character
        }
    }
    return failArr; // Return the fail array
}

/* Next, we define the KMP algorithm function itself.
   It takes a pattern and a string as input and returns the starting index of the first occurrence of the pattern in the string. */

int KMP(string pattern, string stringToSearch)
{
    int[] failArr = fail(pattern); // Calculate the fail array for the given pattern
    int i = 0; // Start at the beginning of the string to search
    int j = 0; // Start at the beginning of the pattern

    while(i < stringToSearch.length)
    {
        if(stringToSearch[i] == pattern[j]) // If the current characters match
        {
            if(j == pattern.length - 1) // If j is at the end of the pattern
            {
                return i - j; // Return the index of the first occurrence of the pattern in the string
            }
            i++; // Move on to the next character in the string
            j++; // Move on to the next character in the pattern
        }
        else if(j > 0) // If the current characters don't match but j is not at the beginning of the pattern
        {
            j = failArr[j - 1]; // Use the fail value of the previous character to determine the new j
        }
        else // If the current characters don't match and j is at the beginning of the pattern
        {
            i++; // Move on to the next character in the string
        }
    }
    return -1; // If no match is found, return -1
}

/* Example usage: */
string pattern = "ababaca";
string stringToSearch = "bacbababaababaca";
int index = KMP(pattern, stringToSearch); // index should be 9, the starting index of the first occurrence of the pattern in the string