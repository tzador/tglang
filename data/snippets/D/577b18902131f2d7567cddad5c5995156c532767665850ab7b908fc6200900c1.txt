/**
 * This code snippet represents a custom implementation of the knapsack problem in D Programming Language.
 * 
 * The knapsack problem is a well known optimization problem, where we have a knapsack with a certain capacity and a list of items with their respective values and weights.
 *
 * Our goal is to maximize the total value of items that can fit into the knapsack without exceeding its capacity.
 */
import std.algorithm;
import std.array;
import std.string;
import std.math;
import std.stdio;

/**
 * Struct representing an item.
 * 
 * Each item has a name, value, and weight.
 */
struct Item {
  string name;
  int value;
  int weight;
}

/**
 * Function to generate a random list of items.
 * 
 * This function takes in the number of items to generate and returns a dynamic array of Item structs.
 * The values and weights of items are randomly generated between 1 and 100.
 */
Item[] generateItems(int numItems) {
  // Dynamic array to store the generated items.
  Item[] items;

  // Loop to generate the specified number of items.
  for (int i = 0; i < numItems; i++) {
    // Generate a random name for the item using the std.random module.
    string name = std.random.uniform!"a"();

    // Generate a random value and weight for the item using the std.math module.
    int value = std.math.rand() % 100 + 1;
    int weight = std.math.rand() % 100 + 1;

    // Create a new item struct with the generated values and append it to the items array.
    items ~= Item(name, value, weight);
  }

  // Return the generated items.
  return items;
}

/**
 * Function to solve the knapsack problem.
 * 
 * This function takes in the capacity of the knapsack and a list of items, and returns an array of items that maximize the total value within the given capacity.
 * It uses a dynamic programming approach to find the optimal solution.
 */
Item[] knapsack(int capacity, Item[] items) {
  // Dynamic array to store the maximum values for each weight.
  int[] maxValues;

  // Initialize the maxValues array with zeros.
  maxValues.length = capacity + 1;
  maxValues.fill(0);

  // Loop through each item in the list.
  foreach (Item item; items) {
    // Loop through the weights from the capacity down to the weight of the current item.
    for(int i = capacity; i >= item.weight; i--) {
      // Calculate the index and maximum value for the current weight.
      int index = i - item.weight;
      int maxValue = maxValues[index] + item.value;

      // Replace the maximum value if it is greater than the current value at the given index.
      if (maxValue > maxValues[i]) {
        maxValues[i] = maxValue;
      }
    }
  }

  // Dynamic array to store the items in the optimal solution.
  Item[] optimalSolution;

  // Loop through the maxValues array.
  foreach (int i, maxValue; maxValues) {
    // Find the index and maximum value for the final weight.
    int index = capacity - i;

    // Retrieve the corresponding item from the items list and append it to the optimal solution.
    if (maxValue > 0 && index >= 0) {
      optimalSolution ~= items[index];
    }
    else {
      break;
    }
  }

  // Return the optimal solution.
  return optimalSolution;
}

// Generate a list of 10 items.
Item[] items = generateItems(10);

// Solve the knapsack problem with a capacity of 50.
Item[] solution = knapsack(50, items);