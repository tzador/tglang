/** 
* This code snippet is a D programming language implementation of a recursive quicksort algorithm.
* It takes in an array of integers and returns a sorted array using the quicksort method. 
*/
import std.stdio; // Import standard input/output module for printing
import std.array; // Import array module for array manipulation

/** 
* Quicksort function that takes in an array of integers and returns a sorted array using the quicksort algorithm.
* Parameters:
* - arr: array of integers to be sorted
* - left: index of the first element in the array
* - right: index of the last element in the array
*/
int[] quicksort(int[] arr, int left, int right)
{
    int i = left;
    int j = right;
    int pivot = arr[(left + right) / 2]; // Choose pivot element as middle element of array

    // Partitioning step
    while(i <= j)
    {
        // Find element on left that should be on right
        while(arr[i] < pivot)
        {
            i++;
        }
        // Find element on right that should be on left
        while(arr[j] > pivot)
        {
            j--;
        }
        // Swap elements, move left and right indices
        if(i <= j)
        {
            int tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i++;
            j--;
        }
    }

    // Recursive calls, sorting the two subarrays
    if(left < j)
    {
        quicksort(arr, left, j);
    }
    if(i < right)
    {
        quicksort(arr, i, right);
    }
    return arr; // Return the sorted array
}

// Main function for testing the quicksort implementation
void main()
{
    int[] arr = [5, 2, 7, 1, 4, 9, 3]; // Initialize an array of integers
    int[] sortedArr = quicksort(arr, 0, arr.length - 1); // Sort the array using quicksort algorithm
    writeln("Sorted array:", sortedArr); // Print the sorted array
}