module main;

/*
This is a simple D programming language code snippet
that implements a quicksort algorithm.
*/

import std.stdio;
import std.algorithm;
import std.range;

// Helper function to swap elements in an array
void swap(T)(ref T a, ref T b) {
    T temp = a;
    a = b;
    b = temp;
}

// Function to recursively partition array elements
int partition(T)(T[] arr, int low, int high) {
    T pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Function to implement quicksort algorithm
void quickSort(T)(T[] arr, int low, int high) {
    if (low < high) {
        int pivot = partition(arr, low, high);
        quickSort(arr, low, pivot - 1);
        quickSort(arr, pivot + 1, high);
    }
}

// Example usage
void main() {
    // Declare and initialize array
    int[] arr = [6, 2, 8, 3, 1, 5, 7, 4];

    // Print unsorted array
    writefln("Unsorted Array: %s", arr);

    // Sort array using quicksort algorithm
    quickSort(arr, 0, arr.length - 1);

    // Print sorted array
    writefln("Sorted Array: %s", arr);
}