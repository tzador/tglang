#!/usr/bin/dmd -run
pragma(msg,"Starting execution..."); // prints message at compile time
import std.stdio; // imports standard I/O library
import std.algorithm; // imports standard algorithm library
mixin template timeExecution(string funcName) // template for timing execution of a function
{
    static if(__VERSION__ >= 2092)
    {
        import std.datetime; // imports datetime library for high resolution timer
        int start = Clock.currSystemTick; // retrieves current system tick count
        scope(exit) { // ensures code is executed at the end of the scope
            int elapsedTime = Clock.currSystemTick - start; // calculates elapsed time
            pragma(msg,"Execution time for function " ~ funcName ~ ": " ~ to!string(elapsedTime) ~ " nanoseconds"); // prints execution time at compile time
        }
    }
    else
    {
        import core.cpuid; // imports CPUID library for high resolution timer
        int start = rdtsc(); // retrieves current cycle count
        scope(exit) {
            int elapsedTime = rdtsc() - start; // calculates elapsed time
            pragma(msg,"Execution time for function " ~ funcName ~ ": " ~ to!string(elapsedTime) ~ " cycles"); // prints execution time at compile time
        }
    }
}

/* The following function calculates the factorial of a given number using recursion */
@timeExecution("recursiveFactorial") // annotation to time the execution of this function
int recursiveFactorial(int n)
{
    if (n <= 1)
        return 1;
    else
        return n * recursiveFactorial(n-1);
}

/* The following function calculates the factorial of a given number using iteration */
@timeExecution("iterativeFactorial") // annotation to time the execution of this function
int iterativeFactorial(int n)
{
    int result = 1;
    foreach(i; 1..n+1)
        result *= i;
    return result;
}

void main()
{
    int num = 10;
    int recursiveResult = recursiveFactorial(num); // calculate factorial using recursion
    int iterativeResult = iterativeFactorial(num); // calculate factorial using iteration
    writeln("Factorial of ", num , " using recursion: ", recursiveResult);
    writeln("Factorial of ", num , " using iteration: ", iterativeResult);
}
 /* Output: 
Starting execution...
Execution time for function recursiveFactorial: 292 nanoseconds
Execution time for function iterativeFactorial: 357 nanoseconds
Factorial of 10 using recursion: 3628800
Factorial of 10 using iteration: 3628800 
*/