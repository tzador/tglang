/**
 * This is a complex code snippet in D Programming Language
 * It generates a random matrix of specified size
 * and sorts the matrix using the quicksort algorithm
*/

import std.stdio;
import std.random;
import std.algorithm;

// Define a function to generate a random matrix
// Takes in the number of rows and columns as parameters
int[][] generateMatrix(size_t rows, size_t cols){
  int[][] mat; // Define an empty matrix
  // Generate random numbers and fill the matrix with them
  foreach(i; 0..rows){
    // Create a temporary row
    int[] row; 
    // Populate the row with random numbers 
    foreach(j; 0..cols){
      row ~= uniform(1, 1000);
    }
    // Append the row to the matrix
    mat ~= row;
  }
  return mat;
}

// Define a function to perform quicksort on the matrix
void quicksortMatrix(ref int[][] mat, int left, int right){
  // If the left index is less than the right index
  if(left < right){
    // Choose a pivot element
    int pivot = mat[left][left];
    int i = left;
    int j = right;
    // Loop until all elements have been compared
    while(i < j){
      // Find an element on the left of the pivot that should be on the right 
      // and an element on the right of the pivot that should be on the left
      while(mat[i][left] < pivot){ 
        i++;
      }
      while(mat[j][left] > pivot){
        j--;
      }
      // Swap the elements if they are not already in the correct position
      if(i <= j){
        swap(mat[i], mat[j]);
        i++;
        j--;
      }
    }
    // Recursively call quicksort on the left and right partitions
    quicksortMatrix(mat, left, j);
    quicksortMatrix(mat, i, right);
  }
}

void main(){
  // Generate a random matrix with 3 rows and 5 columns
  int[][] matrix = generateMatrix(3, 5);
  // Print the original matrix
  writeln("Original Matrix:");
  foreach(row; matrix){
    writeln(row);
  }

  // Sort the matrix using quicksort
  quicksortMatrix(matrix, 0, 4);
  // Print the sorted matrix
  writeln("\nSorted Matrix:");
  foreach(row; matrix){
    writeln(row);
  }
}