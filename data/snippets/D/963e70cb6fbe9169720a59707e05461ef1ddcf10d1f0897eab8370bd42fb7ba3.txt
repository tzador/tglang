/**
 * This is a program that generates a random maze using the recursive backtracker algorithm.
 * It takes in the width and height of the maze as command-line arguments.
 */

import std.random, std.stdio, std.range, std.algorithm;

// Struct that represents a cell in the maze
struct Cell
{
    int row, col; // Row and column of the cell
    bool visited; // Flag to check if the cell has been visited by the algorithm
    bool topWall, rightWall, bottomWall, leftWall; // Flags to check which walls of the cell are present
}

/**
 * Function to generate a random maze using the recursive backtracker algorithm.
 * Takes in the width and height of the maze as arguments and returns a 2D array representing the maze.
 */
Cell[][] generateMaze(int width, int height)
{
    // Initialize the maze with all cells unvisited and all walls present
    Cell[][] maze = new Cell[height][width];
    foreach (row; 0..height)
    {
        foreach (col; 0..width)
        {
            maze[row][col] = Cell(row, col, false, true, true, true, true);
        }
    }

    // Randomly select a starting cell and mark it as visited
    int startRow = uniform(0, height);
    int startCol = uniform(0, width);
    maze[startRow][startCol].visited = true;

    // Call the recursive function to build the maze starting from the starting cell
    recursiveBacktracker(maze, startRow, startCol);

    // Return the generated maze
    return maze;
}

/**
 * Recursive function that builds the maze using the recursive backtracker algorithm.
 * Takes in the maze array and the row and column of the current cell as arguments.
 */
void recursiveBacktracker(Cell[][] maze, int row, int col)
{
    // Initialize an empty list to store unvisited neighbors of the current cell
    int[][] neighbors = [];

    // Check the top cell
    if (row > 0 && !maze[row - 1][col].visited)
        neighbors ~= [row - 1, col];

    // Check the right cell
    if (col < maze[row].length - 1 && !maze[row][col + 1].visited)
        neighbors ~= [row, col + 1];

    // Check the bottom cell
    if (row < maze.length - 1 && !maze[row + 1][col].visited)
        neighbors ~= [row + 1, col];

    // Check the left cell
    if (col > 0 && !maze[row][col - 1].visited)
        neighbors ~= [row, col - 1];

    // Randomly select a neighbor from the list and mark it as visited
    if (!neighbors.empty)
    {
        int[] neighbor = neighbors[uniform(0, neighbors.length)];
        maze[neighbor[0]][neighbor[1]].visited = true;

        // Remove the walls between the current cell and the selected neighbor
        if (neighbor[0] < row)
        {
            // Remove the top wall of the current cell
            maze[row][col].topWall = false;

            // Remove the bottom wall of the selected neighbor
            maze[neighbor[0]][neighbor[1]].bottomWall = false;
        }
        else if (neighbor[0] > row)
        {
            // Remove the bottom wall of the current cell
            maze[row][col].bottomWall = false;

            // Remove the top wall of the selected neighbor
            maze[neighbor[0]][neighbor[1]].topWall = false;
        }
        else if (neighbor[1] > col)
        {
            // Remove the right wall of the current cell
            maze[row][col].rightWall = false;

            // Remove the left wall of the selected neighbor
            maze[neighbor[0]][neighbor[1]].leftWall = false;
        }
        else
        {
            // Remove the left wall of the current cell
            maze[row][col].leftWall = false;

            // Remove the right wall of the selected neighbor
            maze[neighbor[0]][neighbor[1]].rightWall = false;
        }

        // Call the recursive function again for the selected neighbor
        recursiveBacktracker(maze, neighbor[0], neighbor[1]);
    }
}

void main(string[] args)
{
    // Get the width and height of the maze from the command-line arguments
    int width = parseInt(args[1]);
    int height = parseInt(args[2]);

    // Generate and print the maze
    Cell[][] maze = generateMaze(width, height);
    foreach (row; 0..maze.length)
    {
        foreach (col; 0..maze[row].length)
        {
            Cell cell = maze[row][col];

            // Print "+" at the top-left corner
            if (row == 0 && col == 0)
                write("+");

            // Print "-" for top wall
            if (cell.topWall)
                write("----");
            else
                write("    ");

            // Print "+" at the end of the top walls
            if (col == maze[row].length - 1)
                write("+");

            write("|");

            // Print " " for right wall
            if (cell.rightWall)
                write("    ");
            else
                write("   |");

            // Print " " for bottom wall
            if (cell.bottomWall)
                write("    ");
            else
                write("----");

            // Print "+" for left wall at the start of a row
            if (col == 0)
                write("+");
        }

        // Print "|" at the end of the last cell in the row
        write("|");
        writeln();
    }

    // Print the bottom wall of the maze
    foreach (col; 0..maze[0].length + 1)
        write("----+");
}