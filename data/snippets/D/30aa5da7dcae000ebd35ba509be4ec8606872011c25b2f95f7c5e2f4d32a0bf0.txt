import std.stdio;

// Create an array with random integers
int[] array = [4, 7, 2, 9, 1, 5, 3];

// Create a function to partition the array using QuickSort algorithm
void quickSort(int low, int high)
{
    int pivot = array[(low + high) / 2]; // Select pivot element
    int i = low; // Set index for left subarray
    int j = high; // Set index for right subarray
    int temp; // Temporary variable for swapping elements

    // Divide the array into subarrays
    while(i <= j)
    {
        // Find element greater than pivot in the left subarray
        while(array[i] < pivot) 
        {
            i++;
        }

        // Find element less than pivot in the right subarray
        while(array[j] > pivot)
        {
            j--;
        }

        // Swap elements if they are in the wrong order
        if(i <= j)
        {
            temp = array[i];
            array[i] = array[j];
            array[j] = temp;
            i++;
            j--;
        }
    }

    // Recursively call quickSort on the subarrays
    if(low < j)
    {
        quickSort(low, j);
    }
    if(i < high)
    {
        quickSort(i, high);
    }
}

// Call the quickSort function with the entire array
quickSort(0, array.length - 1);

// Print the sorted array
for(int k = 0; k < array.length; k++)
{
    stdout.write(array[k]~" "); // Use "~" operator for concatenation
}

/*
Output:
1 2 3 4 5 7 9 
*/