/**
 * This is a sample program in D programming language that implements
 * a binary search algorithm to find an element in a sorted array.
 */

import std.stdio; //import for standard input/output functions

//function to perform binary search
int binarySearch(int[] arr, int target) {
    int low = 0; //low index of array
    int high = arr.length - 1; //high index of array
    int mid; //middle index of array
	
    while (low <= high) { //loop until low index becomes greater than high index
        mid = low + ((high - low) / 2); //calculate middle index
        if (arr[mid] == target) { //if target element is found at middle index
            return mid; //return middle index as the element's index
        }
        else if (arr[mid] < target) { //if target is greater than element at middle index
            low = mid + 1; //move low index to the right of middle index
        }
        else { //if target is less than element at middle index
            high = mid - 1; //move high index to the left of middle index
        }
    }
    return -1; //if target element is not found, return -1
}

void main() {
    int[] arr = [10, 27, 35, 49, 52, 61, 72, 80]; //example sorted array
    int target = 52; //target element to find
    writeln("Array: ", arr); //print the array
    writeln("Target element: ", target); //print the target element
    int index = binarySearch(arr, target); //call function to perform binary search
    if (index == -1) { //if returned index is -1, target element was not found
        writeln("Target element not found!");
    }
    else { //if returned index is not -1, target element was found
        writeln("Element found at index: ", index);
    }
}