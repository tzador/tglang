// Define a struct named "Person"
struct Person {
  string name;
  int age;
}

// Define a function named "getOldestPerson" that takes in a slice of Person structs and returns the oldest person
Person getOldestPerson(Person[] people) {
  // Initialize variables to store oldest person information
  string oldestName = "";
  int oldestAge = 0;

  // Loop through the slice of Person structs
  foreach (person; people) {
    // Check if current person's age is greater than oldest age
    if (person.age > oldestAge) {
      // Update oldest age and name with current person's information
      oldestAge = person.age;
      oldestName = person.name;
    }
  }

  // Create a new Person struct to store oldest person information
  Person oldestPerson;

  // Insert oldest person information into the new struct
  oldestPerson.name = oldestName;
  oldestPerson.age = oldestAge;

  // Return the oldest person
  return oldestPerson;
}

// Define a function named "main" to test the getOldestPerson function
void main() {
  // Create an array of Person structs
  Person[] people = [
    Person("John", 35),
    Person("Sarah", 42),
    Person("Michael", 21)
  ];

  // Call the getOldestPerson function and store the oldest person in a variable
  Person oldest = getOldestPerson(people);

  // Print the oldest person's information
  writeln("The oldest person is " ~ oldest.name ~ ", age " ~ to!string(oldest.age));
}