import std.algorithm : sort;
import std.random : uniform;
 
/*This function sorts an array using the merge sort algorithm*/
void mergeSort(T)(T[] array)
{
    //Base case
    if(array.length <= 1)
    return;
    
    //Split array in half
    auto mid = array.length/2;
    auto left = array[0..mid];
    auto right = array[mid..$];
    
    //Recursively call mergesort on left and right subarrays
    mergeSort(left);
    mergeSort(right);
    
    //Merge subarrays back into original array
    auto i = 0;
    auto j = 0;
    auto k = 0;
    while(i < left.length && j < right.length)
    {
        if(left[i] <= right[j])
        {
            array[k++] = left[i++];
        }
        else
        {
            array[k++] = right[j++];
        }
    }
    //Add any remaining elements from left subarray
    while(i < left.length)
    {
        array[k++] = left[i++];
    }
    //Add any remaining elements from right subarray
    while(j < right.length)
    {
        array[k++] = right[j++];
    }
}

/*This function generates a random array of given size filled with numbers between 1 and 1000*/
int[] generateRandomArray(size_t size)
{
    int[] arr = new int[size];
    foreach (ref item; arr)
    {
        item = uniform(1, 1000);
    }
    return arr;
}

/*Example usage*/
void main()
{
    //Generate random array
    int[] arr = generateRandomArray(10);
    //Unsorted array
    writeln("Unsorted array:");
    writeln(arr);
    //Sort array using mergesort algorithm
    mergeSort(arr);
    //Sorted array
    writeln("\nSorted array:");
    writeln(arr);
}