// This is a complex code snippet in D programming language

module mergeSort;

// Function for merging two subarrays of arr[]
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void merge(ref int[] arr, int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    // create temporary arrays
    int[] L = new int[n1];
    int[] R = new int[n2];

    /* copy data to temporary arrays L[] and R[] */
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    /* merge the temporary arrays back into arr[l..r] */
    i = 0; // initial index of first subarray
    j = 0; // initial index of second subarray
    k = l; // initial index of merged subarray
    while(i < n1 && j < n2)
    {
        if(L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    /* copy the remaining elements of L[], if any */
    while(i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }

    /* copy the remaining elements of R[], if any */
    while(j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Function that implements Merge Sort
// arr -- The array to be sorted
// l -- starting left index
// r -- ending right index
void mergeSort(ref int[] arr, int l, int r)
{
    if(l < r)
    {
        // Same as (l+r)/2, but avoids overflow for large l and h
        int m = l + (r - l) / 2;

        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        // Merge the sorted halves
        merge(arr, l, m, r);
    }
}

void main()
{
    int[] arr = [6, 5, 12, 10, 1, 8];
    int n = arr.length;

    // Print the unsorted array
    writeln("Unsorted array: ");
    foreach(int element; arr)
        write(element, " ");

    // Sort the array using Merge Sort
    mergeSort(arr, 0, n - 1);

    // Print the sorted array
    writeln("Sorted array: ");
    foreach(int element; arr)
        write(element, " ");
}