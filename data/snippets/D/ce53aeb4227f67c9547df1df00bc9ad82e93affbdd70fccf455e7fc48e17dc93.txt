// This code sample uses the 'D' programming language
// and shows a complex data structure and algorithm.

// Define a new struct type named Person
struct Person {
    string name;
    int age;
    string occupation;
}

// Define an array of Person structs
Person[] people;

// Fill the array with data
people ~= Person("John Smith", 25, "Software Engineer");
people ~= Person("Jane Doe", 32, "Graphic Designer");
people ~= Person("Bob Johnson", 44, "Project Manager");

// Define a recursive function to find the oldest person in the array
int findOldest(Person[] people, int startIndex, int endIndex) {
    // Base case
    if (startIndex == endIndex) {
        return startIndex;
    }

    // Get middle index between start and end
    int middleIndex = (startIndex + endIndex) / 2;

    // Recursively call the function on the left and right halves of the array
    int oldestIndexLeft = findOldest(people, startIndex, middleIndex);
    int oldestIndexRight = findOldest(people, middleIndex + 1, endIndex);

    // Compare the ages of the two oldest people and return the index of the older one
    if (people[oldestIndexLeft].age > people[oldestIndexRight].age) {
        return oldestIndexLeft;
    } else {
        return oldestIndexRight;
    }
}

// Find the index of the oldest person in the array
int oldestIndex = findOldest(people, 0, people.length - 1);

// Print the name and occupation of the oldest person
writeln("The oldest person is ", people[oldestIndex].name, ", who is a ", people[oldestIndex].occupation);