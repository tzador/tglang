// Define an enum type called "Direction"
enum Direction {
    NORTH = 1,
    SOUTH = -1,
    EAST = -2,
    WEST = 2
}

// Define a function called "getOppositeDirection" that takes in a Direction and returns the opposite direction
Direction getOppositeDirection(Direction direction) {
    // Use a switch statement to check the given direction
    switch (direction) {
        // If the direction is NORTH, return the opposite SOUTH
        case Direction.NORTH:
            return Direction.SOUTH;
        // If the direction is SOUTH, return the opposite NORTH
        case Direction.SOUTH:
            return Direction.NORTH;
        // If the direction is EAST, return the opposite WEST
        case Direction.EAST:
            return Direction.WEST;
        // If the direction is WEST, return the opposite EAST
        case Direction.WEST:
            return Direction.EAST;
        // If the direction is not one of the predefined directions, throw an error
        default:
            throw new Exception("Invalid direction specified");
    }
}

// Create a variable of type Direction, set it to NORTH
Direction currentDirection = Direction.NORTH;

// Print the current direction
writeln("Current direction: ", currentDirection);

// Use the getOppositeDirection function to get the opposite direction
Direction oppositeDirection = getOppositeDirection(currentDirection);

// Print the opposite direction
writeln("Opposite direction: ", oppositeDirection);