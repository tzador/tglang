// This program sorts an array of integers using the QuickSort algorithm

// Function to perform partitioning and sorting of the array
void quickSort(int[] arr, int low, int high) {
    // Base case
    if (low >= high) {
        return;
    }
    
    // Select the pivot element (last element in the array)
    int pivot = arr[high];
    // Initialize the starting index for partitioning
    int i = low - 1;
    
    // Loop through the array and swap elements accordingly
    for (int j = low; j < high; j++) {
        // If current element is smaller than or equal to pivot
        if (arr[j] <= pivot) {
            // Increment the index for smaller elements
            i++;
            // Swap the current element with the smaller element at index i
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    
    // Swap the pivot element with the element at index i + 1
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    
    // Recursively call quickSort on the left and right partitions
    quickSort(arr, low, i);
    quickSort(arr, i + 2, high);
}

// Driver code to test the quickSort function
void main() {
    // Create an array of integers to be sorted
    int[] arr = [5, 2, 8, 1, 9, 3, 10, 6, 4, 7];
    
    // Print the unsorted array
    writeln("Unsorted array:", arr);
    
    // Call the quickSort function to sort the array
    quickSort(arr, 0, arr.length - 1);
    
    // Print the sorted array
    writeln("Sorted array:", arr);
}

/* Output:
Unsorted array: [5, 2, 8, 1, 9, 3, 10, 6, 4, 7]
Sorted array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
*/