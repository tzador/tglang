/// A program that generates a random graph using the Barabasi-Albert model

module main;

import std.algorithm : randomSample;

int main(string[] args)
{
    int m; // number of edges to attach from each new node to existing nodes
    int n; // total number of nodes

    writeln("Enter the value of m: ");
    readf("%d", &m);
    writeln("Enter the value of n: ");
    readf("%d", &n);

    auto graph = generateRandomGraph(m, n); // generate graph using Barabasi-Albert model

    writeln("Generated graph with ", n, " nodes and ", m, " edges attached from each new node.");

    // print edges of the graph
    foreach (i, edges; graph)
    {
        writeln("Node ", i, " is connected to: ");
        foreach (j; edges)
        {
            writeln(j);
        }
    }

    return 0;
}

/**
 * A function that generates a random graph using the Barabasi-Albert model
 *
 * Params:
 *      m - number of edges to attach from each new node to existing nodes
 *      n - total number of nodes
 *
 * Returns:
 *      An array of arrays representing the edges of the random graph
 */
uint[][] generateRandomGraph(int m, int n)
{
    uint[][] graph; // array of arrays representing edges of the graph
    uint[] chosenNodes = [0]; // array of nodes chosen for PA model
    uint[] degrees = []; // array of degrees for each node in PA model

    // add edges to graph using PA model
    foreach (i; 1..n)
    {
        auto newEdges = randomSample(chosenNodes, m); // randomly choose m nodes from existing nodes
        graph ~= newEdges; // add new edges to the graph
        chosenNodes ~= i; // add new node to chosen nodes
        degrees ~= m; // set degree of new node to m
    } 

    // loop for remaining edges to be added
    foreach (i; n..(n*m))
    {
        auto newNode = i / m; // calculate node number for new edge
        auto chosenEdge = i % m; // calculate chosen edge number for new edge
        auto chosenNode = chosenNodes[chosenEdge]; // get chosen node for new edge
        if (degrees[chosenNode] < m) // check if chosen node can still have more edges added
        {
            graph[newNode] ~= chosenNode; // add new edge
            degrees[chosenNode]++; // increase degree of chosen node
        }
        else // randomly choose a different node and add the new edge
        {
            auto randomNode = chosenNodes[randomSample(degrees)]; // randomly choose node with higher degree
            graph[newNode] ~= randomNode; // add new edge
            degrees[randomNode]++; // increase degree of chosen node
        }
    }

    return graph;
}