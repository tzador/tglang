/**
 * This is a complex code snippet in D Programming Language,
 * demonstrating the use of various data structures and control flow.
 * Below, we create a matrix and perform some operations on it.
**/

// Create a 2 dimensional matrix of integers with 3 rows and 5 columns
// Note: The syntax of creating arrays in D is similar to C or Java
int[3][5] matrix = [
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
];

// Print the elements of the matrix using nested for loops
// Note: D allows for nested loops without any restrictions, unlike C or Java
foreach (row; matrix)
{
    foreach (element; row)
    {
        writeln(element);
    }
}

// Calculate the sum of all elements in the matrix using a foreach loop and a variable
int sum = 0; // Initialize sum variable to 0
foreach (row; matrix)
{
    foreach (element; row)
    {
        sum += element; // Add each element to the sum variable
    }
}

// Print the sum of all elements in the matrix
writeln("The sum of all elements in the matrix is: ", sum);

// Change the value of an element in the matrix
// Note: D allows for direct manipulation of individual elements of an array
matrix[1][2] = 20;

// Print the updated matrix
writeln(matrix);

// Use range-based for loop to print the elements of the matrix in a single line
// Note: Range-based for loop simplifies iteration over arrays or other data structures
// and also has the benefit of avoiding off-by-one errors
foreach (row; matrix)
{
    foreach (element; row)
    {
        write(element, " "); // Add a space between each element
    }
}

// Print a new line for readability
writeln("");