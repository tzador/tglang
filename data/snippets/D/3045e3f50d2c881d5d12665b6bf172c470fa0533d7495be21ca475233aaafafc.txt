/**
 * This is a function that takes in a list of integers and returns the average
 * @param list is the list of integers to be averaged
 * @return the average of the integers in the list
 */
double average(int[] list) {
    double sum = 0;
    foreach (int num; list) {
        sum += num;
    }
    return sum / list.length;
}

/**
 * This is a template class that represents a dynamic array data structure
 */
class DynamicArray(T) {
    private T[] array;
    private int size;
    private int capacity;

    /**
     * This is the constructor that initializes the dynamic array with a default capacity
     */
    this() {
        array = new T[16];
        size = 0;
        capacity = 16;
    }

    /**
     * This function adds an element to the end of the dynamic array
     * If the array is at capacity, it doubles the capacity
     * @param element is the element to be added to the array
     */
    void append(T element) {
        if (size >= capacity) {
            resize();
        }
        array[size++] = element;
    }

    /**
     * This function doubles the capacity of the array by creating a new array with double the capacity
     * and copying over the elements
     */
    private void resize() {
        capacity *= 2;
        T[] newArray = new T[capacity];
        foreach (i; 0..size) {
            newArray[i] = array[i];
        }
        array = newArray;
    }

    /**
     * This function removes an element at a given index from the array
     * @param index is the index of the element to be removed
     * @return the removed element
     */
    T remove(int index) {
        if (index < 0 || index >= size) {
            throw new Exception("Invalid index");
        }
        T element = array[index];
        foreach (i; index..size-1) {
            array[i] = array[i+1];
        }
        size--;
        return element;
    }
}