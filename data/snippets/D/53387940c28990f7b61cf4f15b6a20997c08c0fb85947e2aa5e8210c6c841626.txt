import std.stdio;
import std.math : pow;

/***
Calculate the generalized hypergeometric function
using the modified Lentz method.

Inputs:
a - Array of a coefficients
b - Array of b coefficients
z - Value to evaluate the function at
max_iter - Maximum number of iterations for convergence
eps - Desired precision level for convergence
***/

real hypergeometric(real[] a, real[] b, real z, uint max_iter, real eps)
{
    // Initialize variables
    real result = 1;
    real alpha;
    real beta;
    real p;
    real q;
    real c;
    real d;
    real delta;
    real chi;
    real ratio;
    real term;
    uint i = 0;

    // Begin Lentz's method
    while (i < max_iter)
    {
        alpha = 0;
        beta = 0;
        p = 1;
        q = 1;
        c = 1;
        d = 0;

        for (int j = 0; j <= i; j++)
        {
            term = pow(-1, j) * a[j] * b[j];
            alpha += term;
            term = j + 1 - b[j];
            term = term * z;
            c = 1 / (term + c);
            d = term / (term + d);
            p = p * c;
            q = q * d;
        }

        delta = p / q;
        result = result * delta;
        ratio = 1 - delta;

        // Check for convergence
        if (abs(ratio) < eps)
        {
            break;
        }

        i++;
    }

    return result;
}

// Example usage
void main()
{
    real z = 2.5; // Value to evaluate at
    uint max_iter = 100; // Maximum iterations
    real eps = 1e-6; // Precision level
    real[] a = [1, 1.5, 2.5]; // Array of a coefficients
    real[] b = [0.5, 1, 3]; // Array of b coefficients
    real result = hypergeometric(a, b, z, max_iter, eps); // Call the hypergeometric function
    writefln("Result: %f", result); // Print the result
}