// This is a function that calculates the factorial of a number using recursion
int factorial(int n)
{
  if (n == 0 || n == 1) // base case
    return 1;
  else
    return n * factorial(n - 1); // recursive case
}

// This is a struct that represents a person with a name and age
struct Person
{
  string name;
  int age;
}

Person[5] people; // creates an array of 5 Person objects

// This is a for loop that populates the array with Person objects
string[5] names = ["John", "Jane", "Mike", "Emily", "David"]; // array of names
foreach (i, ref person; people) // i is the index, person is a reference to each Person object
{
  person = Person(names[i], i); // creates a new Person object with name from names array and age based on index
}

void main()
{
  // This is a foreach loop that prints out each Person's name and age
  foreach (person; people)
  {
    writefln("Name: %s, Age: %d", person.name, person.age); // prints name and age using formatted string
  }
  
  writefln("Factorial of 5 is: %d", factorial(5)); // prints the factorial of 5 using the factorial function
  
  int x = 10;
  
  if (x > 5) // if statement
    writeln("x is greater than 5");
  else // else statement
    writeln("x is less than or equal to 5");
    
  float y = cast(float) x; // casting x to a float
  
  try
  {
    // This is a try block that attempts to divide by 0 which will throw an exception
    writeln("Dividing by 0...");
    float z = x / 0;
  }
  catch (Throwable t) // catches the exception and prints the error message
  {
    writeln("Error: ", t.msg);
  }
  
  string html = `
  <html>
    <head>
      <title>My Website</title>
    </head>
    <body>
      <h1>Hello, World!</h1>
    </body>
  </html>
  `; // multi-line string using backticks, used to represent an HTML document
}