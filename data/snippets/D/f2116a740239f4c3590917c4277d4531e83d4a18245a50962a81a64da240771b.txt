import std.stdio;

// This is a template class that implements a simple LinkedList data structure
class LinkedList(T) {
    private Node head; // Private variable to represent the first element of the linked list
    private Node tail; // Private variable to represent the last element of the linked list
    private int size; // Private variable to track the size of the linked list

    // This is a constructor function that initializes the LinkedList
    this() {
        head = null; // Set the head to null
        tail = null; // Set the tail to null
        size = 0; // Set the size to 0
    }

    // This function adds a new element to the back of the linked list
    void addBack(T element) {
        // Check if the list is empty
        if (head is null) {
            // Create a new node for the element
            Node newNode = new Node(element);
            // Set the head and tail to the new node
            head = newNode;
            tail = newNode;
        } else {
            // Create a new node for the element
            Node newNode = new Node(element);
            // Set the next node of the current tail to the new node
            tail.next = newNode;
            // Set the tail to the new node
            tail = newNode;
        }
        // Increment the size by 1
        size++;
    }

    // This function removes the element from the front of the linked list
    T removeFront() {
        // Check if the list is empty
        if (head is null) {
            writeln("Linked list is empty");
            return null;
        } else {
            // Get the element of the head node
            T element = head.data;
            // Set the head to the next node
            head = head.next;
            // Decrement the size by 1
            size--;
            // Return the removed element
            return element;
        }
    }

    // This function returns the size of the linked list
    int getSize() {
        // Return the size
        return size;
    }

    // This is a nested class representing a single node in the linked list
    private class Node {
        T data; // Variable to hold the data
        Node next; // Variable to point to the next node

        // Constructor function to initialize the node with the given data
        this(T data) {
            this.data = data;
            this.next = null;
        }
    }
}

// Create a new instance of the LinkedList class with integers as the type
LinkedList!int list = new LinkedList!int();
// Add elements to the list
list.addBack(5);
list.addBack(10);
list.addBack(15);
writeln("Current size of the list: ", list.getSize());
// Remove an element from the list and print it
writeln("Removed element: ", list.removeFront());
writeln("Current size of the list: ", list.getSize());