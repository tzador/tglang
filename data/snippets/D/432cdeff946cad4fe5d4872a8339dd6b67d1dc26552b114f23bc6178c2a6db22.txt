module complex;
// Define a class Complex with two private fields, real and imaginary
class Complex 
{
    private real;
    private imaginary;
    
    // Constructor to initialize the complex number with real and imaginary parts
    // Parameters: r - real part, i - imaginary part
    this (double r, double i) 
    {
        this.real = r;
        this.imaginary = i;
    }

    // Function to add two complex numbers 
    // Parameters: c - second complex number to be added
    // Returns: the sum of the two complex numbers
    Complex add(Complex c)
    {
        // Create a new Complex object to store the result
        Complex result = new Complex(0,0);
        
        // Add the corresponding real and imaginary parts of the two numbers
        result.real = this.real + c.real;
        result.imaginary = this.imaginary + c.imaginary;

        // Return the result
        return result;
    }

    // Function to multiply two complex numbers
    // Parameters: c - second complex number to be multiplied
    // Returns: the product of the two complex numbers
    Complex multiply(Complex c)
    {
        // Create a new Complex object to store the result
        Complex result = new Complex(0,0);

        // Multiply the real parts and subtract the product of the imaginary parts 
        // from the product of the two imaginary parts
        result.real = (this.real * c.real) - (this.imaginary * c.imaginary);
        result.imaginary = (this.real * c.imaginary) + (this.imaginary * c.real);

        // Return the result
        return result;
    }

    // Function to calculate the modulus of a complex number 
    // Returns: the modulus of the complex number
    double modulus()
    {
        // Calculate the square of the real and imaginary parts and add them
        double realSquare = this.real * this.real;
        double imaginarySquare = this.imaginary * this.imaginary;
        double sumOfSquares = realSquare + imaginarySquare;

        // Return the square root of the sum of squares, which is the modulus
        return sqrt(sumOfSquares);
    }
}