import std.stdio; // import standard I/O module

/// A function that finds the longest common subsequence of two strings.
string lcs(string str1, string str2){
	// dynamic programming table to store lengths of longest common subsequences
	int[][] dp = new int[str1.length+1][str2.length+1];

	// populate the dynamic programming table
	for(int i=1; i<=str1.length; i++){
		for(int j=1; j<=str2.length; j++){
			// if characters at the current positions match, add 1 to previous longest subsequence length
			if(str1[i-1] == str2[j-1])
				dp[i][j] = 1 + dp[i-1][j-1];
			// else take the maximum of the two possible previous longest subsequence lengths
			else
				dp[i][j] = std.math.max(dp[i-1][j], dp[i][j-1]);
		}
	}

	// backtrack through the table to find the actual longest common subsequence
	int i = str1.length, j = str2.length;
	string lcs = "";
	while(i>0 && j>0){
		// if characters at the current positions match, add the character to the lcs string
		if(str1[i-1] == str2[j-1]){
			lcs = str1[i-1] ~ lcs;
			i--;
			j--;
		}
		// else move in the direction of the longer subsequence
		else if(dp[i][j-1] > dp[i-1][j])
			j--;
		else
			i--;
	}

	// return the longest common subsequence
	return lcs;
}

void main(){
	// input strings
	string str1 = "programming";
	string str2 = "coding";

	// find the longest common subsequence
	string lcs = lcs(str1, str2);

	// print the result
	std.stdio.writefln("The longest common subsequence of %s and %s is %s.", str1, str2, lcs);
}