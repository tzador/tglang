// This code snippet creates a matrix multiplication function
// in D Programming Language
import std.stdio;

// Defining a template for a matrix multiplication function
// with two generic types, T and U, as input types
template MatrixMultiply(T, U)
{
    // The return type of the function is a matrix of type T
    alias Matrix!(T) Op;

    // Define a static function 'multiply' with parameters
    // 'a' and 'b' of types U and U respectively
    static Op multiply(U a, U b)
    {
        // The result of the multiplication will be stored
        // in a new matrix of type T
        Op result;

        // Find the number of rows and columns in the matrices 'a' and 'b'
        // by calling the 'length' method (defined in the Matrix template)
        int rowsA = a.length();
        int colsA = a[0].length();
        int rowsB = b.length();
        int colsB = b[0].length();

        // Check if the number of columns in matrix 'a' is equal
        // to the number of rows in matrix 'b'
        static assert(colsA == rowsB, "Matrices are not compatible for multiplication!");

        // Iterate over the rows in matrix 'a'
        foreach(rowA; 0 .. rowsA)
        {
            // Iterate over the columns in matrix 'b'
            foreach(colB; 0 .. colsB)
            {
                // Initialize the result cell with a value of 0
                result[rowA, colB] = 0;

                // Iterate over the columns in matrix 'a'
                foreach(colA; 0 .. colsA)
                {
                    // Perform the multiplication of the corresponding cells
                    // in row 'rowA' in matrix 'a' and column 'colB' in matrix 'b'
                    result[rowA, colB] += a[rowA, colA] * b[colA, colB];
                }
            }
        }

        // Return the resulting matrix
        return result;
    }
}

void main()
{
    // Define two matrices of type int
    Matrix!(int) a = [[1, 2], [3, 4]];
    Matrix!(int) b = [[5, 6], [7, 8]];

    // Call the matrix multiplication function passing in the two matrices
    // and store the result in a new matrix
    Matrix!(int) c = MatrixMultiply!(int, Matrix!(int)).multiply(a, b);

    // Print the result
    writeln(c);
}