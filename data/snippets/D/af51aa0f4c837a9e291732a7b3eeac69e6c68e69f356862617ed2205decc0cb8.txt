/**
* This code snippet is a simplified implementation of a binary search tree in D programming language.
* It takes in an array of integers and recursively inserts them into the tree.
* It then performs a search for a given value and returns the corresponding node, if found.
*/

struct BSTNode {
  int value; // value stored in the node
  BSTNode* left; // pointer to left child
  BSTNode* right; // pointer to right child
}

/**
* Function to insert a new node into the binary search tree
* @param root The root node of the current subtree
* @param val The value to be inserted into the tree
* @return The root node of the modified subtree
*/
BSTNode* insert(BSTNode* root, int val) {
  if (root is null) {
    // creates a new node if root is null
    BSTNode* newNode = new BSTNode(val);
    return newNode;
  }

  // recursively inserts the value into the correct position
  if (val < root.value) {
    root.left = insert(root.left, val);
  } else if (val > root.value) {
    root.right = insert(root.right, val);
  }

  return root;
}

/**
* Function to search for a value in the binary search tree
* @param root The root node of the subtree to be searched
* @param val The value to be searched for
* @return The node with the corresponding value, or null if value is not found
*/
BSTNode* search(BSTNode* root, int val) {
  if (root is null) {
    return null;
  } else if (root.value == val) {
    // returns the current node if value is found
    return root;
  } else if (val < root.value) {
    // recursively searches the left subtree
    return search(root.left, val);
  } else {
    // recursively searches the right subtree
    return search(root.right, val);
  }
}

// An example of using the binary search tree implementation
void main() {
  // array of values to be inserted into the tree
  int[] values = [5, 3, 7, 1, 9, 2, 6, 4, 8];

  // root of the binary search tree
  BSTNode* root = null;

  // inserts all the values into the tree
  foreach (val; values) {
    root = insert(root, val);
  }

  // searches for the value '6'
  BSTNode* result = search(root, 6);

  // prints the value of the searched node
  writeln("Result: " ~ result.value);
}