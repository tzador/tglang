/**
 * This is a D programming language code snippet
 * It uses struct and templates to create a complex data structure
 */

/**
 * Definition of struct Node
 */
struct Node(T) {
    T value;
    Node!(T)* next;
}

/**
 * Definition of struct Queue
 */
struct Queue(T) {
    Node!(T)* head;
    Node!(T)* tail;
    size_t size;

    /**
     * Function to add a new element to the back of the queue
     */
    void enqueue(T value) {
        //create a new node with given value
        Node!(T)* newNode = new Node!(T)(value);

        if (head is null) {
            //if queue is empty, set head and tail to new node
            head = newNode;
            tail = newNode;
        } else {
            //if queue is not empty, add new node to the end and update tail
            tail.next = newNode;
            tail = newNode;
        }

        //increment size by 1
        size++;
    }

    /**
     * Function to remove the first element in the queue
     */
    T dequeue() {
        if (head is null) {
            //if queue is empty, throw an error
            throw new Exception("Queue is empty");
        }

        //get the value of the first node
        T value = head.value;

        if (head.next is null) {
            //if queue only has one element, set head and tail to null
            head = null;
            tail = null;
        } else {
            //if queue has more than one element, remove first node and update head
            head = head.next;
        }

        //decrement size by 1
        size--;

        //return the value of the removed node
        return value;
    }
}

//create a new queue of integers
Queue!(int) myQueue = Queue!(int)();

//enqueue elements to the queue
myQueue.enqueue(5);
myQueue.enqueue(10);
myQueue.enqueue(15);

//dequeue elements from the queue and print them
writeln(myQueue.dequeue()); //output: 5
writeln(myQueue.dequeue()); //output: 10
writeln(myQueue.dequeue()); //output: 15