// This code snippet uses templates and metaprogramming to generate an n-dimensional matrix structure with operations
struct Matrix(T, int n) {
    T[n] data;

    // Template to get the value at a specified n-dimensional index
    const ref T at(S...)(S args) const {
        static if (S.length == n) {
            return data[args];
        } else {
            static if (S.length == n - 1) {
                return data[args[0]];
            } else {
                static assert(0, "Arguments do not match dimensions of matrix.");
            }
        }
    }

    // Template to set the value at a specified n-dimensional index
    void put(T value, S...)(S args) {
        static if (S.length == n) {
            data[args] = value;
        } else {
            static if (S.length == n - 1) {
                data[args[0]] = value;
            } else {
                static assert(0, "Arguments do not match dimensions of matrix.");
            }
        }
    }

    // Template to perform matrix addition with another matrix of the same dimensions
    Matrix!T opBinary(string op : "+")(Matrix!T other) {
        Matrix!T result;
        foreach (i; 0..n) {
            result.data[i] = this.data[i] + other.data[i];
        }
        return result;
    }

    // Template to perform matrix subtraction with another matrix of the same dimensions
    Matrix!T opBinary(string op : "-")(Matrix!T other) {
        Matrix!T result;
        foreach (i; 0..n) {
            result.data[i] = this.data[i] - other.data[i];
        }
        return result;
    }

    // Template to perform matrix multiplication with another matrix of appropriate dimensions
    Matrix!T opBinary(string op : "*")(Matrix!(T, m) other) if (n == m) {
        Matrix!(T, n) result;
        foreach (i; 0..n) {
            foreach (j; 0..n) {
                foreach (k; 0..n) {
                    result.data[i][j] += this.data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }
}

void main() {
    // Creating a 3-dimensional matrix of floats
    Matrix!f3 mat;

    // Setting values at different indices in the matrix
    mat.put(1.2, 0, 0, 0);
    mat.put(4.5, 2, 1, 2);
    mat.put(8.9, 1, 2, 3);
    mat.put(-3.1, 0, 2, 1);

    // Getting the value at a specified index
    float value = mat.at(1, 2, 3);

    // Performing matrix operations
    Matrix!f3 mat2;
    mat2.put(2.3, 0, 0, 0);
    Matrix!f3 mat3 = mat + mat2;
    Matrix!f3 mat4 = mat * mat3;
}