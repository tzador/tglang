/**
 * This is a complex code snippet in D Programming Language.
 * It demonstrates the use of nested structs and functions.
 * The code calculates the sum of integers in a given array.
 */

import std.stdio;

struct List {
	int[] data; // array to store integers
	int size; // size of the list
}

struct Result {
	int sum; // sum of integers in the list
}

/**
 * The `initializeList` function initializes the list with given data.
 * Params:
 *     list - the list struct
 *     arr - array of integers to store in list
 *     n - size of the list
 * Returns:
 *     void
 */
void initializeList(ref List list, int[] arr, int n) {
	list.data = arr; // assign array to `data` member
	list.size = n; // assign size to `size` member
}

/**
 * The `calculateSum` function calculates the sum of integers in the list.
 * Params:
 *     list - the list struct
 * Returns:
 *     a Result struct with `sum` member containing the calculated sum
 */
Result calculateSum(ref List list) {
	int sum = 0;
	foreach (num; list.data) {
		sum += num; // add each integer in the list to `sum`
	}
	Result result;
	result.sum = sum; // assign calculated sum to `sum` member of `result`
	return result;
}

void main() {
	int[] arr = [1, 2, 3, 4, 5]; // create array of integers
	List list; // create list struct
	initializeList(list, arr, arr.length); // initialize list with array and its size
	Result result; // create result struct
	result = calculateSum(list); // calculate sum and assign to `result`
	writeln("Sum of integers in list: ", result.sum); // print the calculated sum
}