//This code snippet implements binary search in D Programming Language
import std.array; //importing the standard array module

/**
 * Template function for binary search
 * Params:
 * 	arr 		- the array to search in, must be sorted
 * 	searchValue - the value to search for in the array
 * Returns:
 * 	The index of the first occurrence of the search value in the array, or -1 if not found
 **/
int binarySearch(T)(T[] arr, T searchValue) {
	int low = 0;
	int high = arr.length - 1; //setting the high index to be the last index in the array
	
	//looping until the low index is greater than the high index
	while (low <= high) {
		int mid = (low + high) / 2; //finding the middle index
		if (arr[mid] == searchValue) { //if the middle value is the search value, return the index
			return mid;
		} else if (arr[mid] < searchValue) { //if the middle value is less than the search value, set low to be mid + 1
			low = mid + 1;
		} else { //otherwise, set high to be mid - 1
			high = mid - 1;
		}
	}
	
	return -1; //if the search value is not found, return -1
}

//example usage of binary search
int[5] arr = [1, 2, 3, 4, 5]; //creating a sorted int array
int result = binarySearch(arr, 3); //searching for the value 3 in the array
writeln(result); //outputting the result, which should be 2 as 3 is at index 2 in the array