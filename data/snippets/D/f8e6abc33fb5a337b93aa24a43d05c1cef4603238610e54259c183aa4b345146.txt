import std.stdio; //importing the standard I/O library
import std.algorithm; //importing the standard algorithm library

int[] numbers = [1, 2, 3, 4, 5];

// Using a lazy range to filter out odd numbers and then map the even numbers to their squares
auto result = numbers.filter!(a => a % 2 == 0).map!(a => a * a);

// Printing the resulting lazy range using the std.stdio.writeln() function
foreach(number; result) {
    writeln(number);
}

// Defining a higher-order function that takes in a function as an argument
void executeFunction(void delegate(int) func, int argument) {
    func(argument);
}

// Calling the higher-order function and passing in a function as an argument
executeFunction((x) => writeln(x * x), 5);

// Defining a struct with a generic type
struct Container(T) {
    T value;
}

// Creating an instance of the Container struct with an integer value
Container!int intContainer = Container!int(10);

// Printing the value of the Container
writeln(intContainer.value);

// Defining a template function for finding the smallest element in an array
T minimum(T)(T[] array) {
    T min;
    foreach(element; array) {
        if (element < min) {
            min = element;
        }
    }
    return min;
}

// Creating an array of integers and finding the minimum using the template function
int[] numbers = [10, 5, 3, 8, 2];
int min = minimum(numbers);
writeln(min);

// Defining a mixin template to generate a class with a static variable and function
mixin template createClass(string className, int staticVariable) {
    class mixin(className) {
        static int variable = staticVariable;
        static void printVariable() {
            writeln(variable);
        }
    }
}

// Using the mixin template to create a new class with the name "Example" and a static variable "x"
createClass!("Example", 10).printVariable();

// Defining a lambda function to add two numbers
auto sum = (x, y) => x + y;

// Printing the result of the lambda function with arguments 5 and 10
writeln(sum(5, 10));