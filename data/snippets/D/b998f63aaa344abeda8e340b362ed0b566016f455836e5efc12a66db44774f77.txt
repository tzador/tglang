/**
 * This is a complex and long code snippet in D Programming Language.
 * It will showcase various features and concepts in the language.
 */

// Define a global constant
enum PI = 3.14159265359;

// Create a struct to represent a 2D point
struct Point2D {
    // x-coordinate of the point
    float x;
    // y-coordinate of the point
    float y;

    /**
     * This function calculates the euclidean distance between
     * this point and the provided point.
     *
     * Params:
     * - other: the other point to calculate distance to
     *
     * Returns:
     * - The calculated distance as a float
     */
    float distanceTo(Point2D other) {
        float xDiff = this.x - other.x;
        float yDiff = this.y - other.y;
        float distance = sqrt(xDiff * xDiff + yDiff * yDiff);

        return distance;
    }
}

// Define a function to demonstrate the use of templates in D
void templateExample(T)(T[] arr, T element) {
    foreach (index, val; arr) {
        arr[index] = element;
    }
}

// Create an array of points
Point2D[] points = [Point2D(1.0, 2.0), Point2D(3.0, 4.0), Point2D(5.0, 6.0)];

// Use the template function to set all points to a new point at (0.0, 0.0)
templateExample(points, Point2D(0.0, 0.0));

// Print out the updated points array
foreach (point; points) {
    // Use string interpolation to display the coordinates
    writefln("Point at (%.2f, %.2f)", point.x, point.y);
}

// Use a built-in function to generate a random number
import std.random;
int randomNum = uniform(1, 10);

// Use a switch statement to handle different cases
switch (randomNum) {
    case 1:
    case 3:
    case 5:
    case 7:
    case 9:
        writefln("%d is an odd number", randomNum);
        break;
    case 2:
    case 4:
    case 6:
    case 8:
        writefln("%d is an even number", randomNum);
        break;
    default:
        writefln("%d is not in the range of 1-10", randomNum);
}