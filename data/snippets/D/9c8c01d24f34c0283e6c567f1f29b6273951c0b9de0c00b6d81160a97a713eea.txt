#!/usr/bin/env rdmd

import std.algorithm;
import std.stdio;

// Creates a template function called "complexSort" that takes in a dynamic array of type T and a delegate f
// The function uses the std.algorithm's sort function to sort the array using the delegate f
template complexSort(T)(T[] array, bool delegate(const ref T, const ref T) f) {
    array.sort!f; // Uses the delegate f to sort the array
    return array; // Returns the sorted array
}

void main() {
    int[] numbers = [3, 5, 1, 2, 4]; // Creates an array of integers
    numbers = complexSort(numbers, (a, b) => a > b); // Sorts the numbers in descending order
    writeln(numbers); // Prints the sorted array
}