import std.stdio;

// Define an array of strings
string[] names = ["John", "Anna", "Peter", "Emily", "David"];

// Create a function to sort the array in alphabetical order
void sortNames(string[] names)
{
    if(names.length > 1)
    {
        // Calculate middle index of array
        auto middle = names.length / 2;

        // Define left and right sub-arrays
        string[] left = names[0..middle];
        string[] right = names[middle..$];

        // Recursively call function on left and right sub-arrays
        sortNames(left);
        sortNames(right);

        // Merge sorted sub-arrays
        mergeNames(left, right, names);
    }
}

// Merge function, combines left and right sub-arrays back into original array
void mergeNames(string[] left, string[] right, string[] names)
{
    // Initialize indexes for left and right sub-arrays
    int leftIndex = 0;
    int rightIndex = 0;

    // Initialize index for original array
    int namesIndex = 0;

    // Loop through both sub-arrays until one reaches its end
    while (leftIndex < left.length && rightIndex < right.length)
    {
        // Compare current elements of sub-arrays
        if (left[leftIndex] <= right[rightIndex])
        {
            // If left element is smaller, add it to original array
            names[namesIndex] = left[leftIndex];
            leftIndex++;
        }
        else
        {
            // If right element is smaller, add it to original array
            names[namesIndex] = right[rightIndex];
            rightIndex++;
        }

        // Increase index of original array
        namesIndex++;
    }

    // Add any leftover elements from left sub-array
    while (leftIndex < left.length)
    {
        names[namesIndex] = left[leftIndex];
        leftIndex++;
        namesIndex++;
    }

    // Add any leftover elements from right sub-array
    while (rightIndex < right.length)
    {
        names[namesIndex] = right[rightIndex];
        rightIndex++;
        namesIndex++;
    }
}

// Call sort function passing in array of names
sortNames(names);

// Print sorted array
writeln(names); // Output: ["Anna", "David", "Emily", "John", "Peter"]