// This is a function that takes in two arrays and performs a merge sort on them
void mergeSort(T)(T[] arr, T[] temp) {
    // if the array is of size 1 or less, it is already sorted
    if(arr.length <= 1) {
        return;
    }

    // calculate the middle index of the array
    int mid = arr.length / 2;

    // create two new arrays, splitting the original array in half
    T[] left = arr[0..mid];
    T[] right = arr[mid..$];

    // recursively call mergeSort on the left and right arrays
    mergeSort(left, temp);
    mergeSort(right, temp);

    // initialize variables for indexing the left,right, and temp arrays
    int i = 0;
    int j = 0;
    int k = 0;

    // sorting algorithm
    while(i < left.length && j < right.length) {
        // if the element in the left array is smaller, add it to the temp array
        if(left[i] < right[j]) {
            temp[k] = left[i];
            i++; // increment i
        } else {
            // otherwise, add the element in the right array to the temp array
            temp[k] = right[j];
            j++; // increment j
        }
        k++; // increment k
    }

    // iterate through the remaining elements in the left array, if any
    while(i < left.length) {
        temp[k] = left[i];
        i++; // increment i and k
        k++;
    }

    // iterate through the remaining elements in the right array, if any
    while(j < right.length) {
        temp[k] = right[j];
        j++; // increment j and k
        k++;
    }

    // copy the sorted elements from temp array back into the original array
    for(int l = 0; l < arr.length; l++) {
        arr[l] = temp[l];
    }
}

// example usage
void main() {
    // create a random array of integers
    int[] arr = [15, 6, 23, 9, 17, 1];
    
    // create an auxiliary array of the same size as the original array
    int[] temp = new int[arr.length];
    
    // call mergeSort on the array
    mergeSort(arr, temp);

    // print the sorted array
    foreach(element; arr) {
        writefln("%s", element);
    }
}