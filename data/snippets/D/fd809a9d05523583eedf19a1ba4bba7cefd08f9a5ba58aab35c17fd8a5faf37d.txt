pragma(msg, "Hello, world!");
/* This is a single line comment */

// D supports both single and multi-line comments

/*
  This is a multi-line comment.
  It can span across multiple lines.
  Just start and end with /*
  and everything in between will be commented out.
*/

// In D, functions can have template parameters
// The template function below takes in two parameters - a type and a value
// The return type is the same as the type of the input parameter
// The function simply returns the input value

template function identity(T)(T value) 
{
    return value;
}

// To use the template function, we just need to call it with the appropriate type and value
// Here, we call the identity function with an integer type and a value of 10
// The result is assigned to the variable "i"

int i = identity!(int)(10);

// We can also use the "auto" keyword to let the compiler infer the type
// The following line is equivalent to the one above

auto j = identity(10);

// D also supports function overloading, where multiple functions can have the same name but different parameters

void printInt(int i) 
{
    // This function prints an integer to the console
    // First, we convert the integer to a string using the to!string function
    // Then, we use the writeln function to print it to the console
    writeln(to!string(i));
}

void printInt(string s) 
{
    // This function prints a string to the console
    // In this case, we can directly use the writeln function to print the string
    writeln(s);
}

// We can now call the printInt function with both an integer and a string
printInt(10); // prints "10" to the console
printInt("Hello, world!"); // prints "Hello, world!" to the console