//This code snippet uses templates and operator overloading to create a custom Matrix class with basic linear algebra operations 

//define the Matrix class with a template for the data type
class Matrix(T) {
    private T[][] data; //stores the elements of the matrix
    private uint rows; //number of rows
    private uint columns; //number of columns

    //constructor that takes in the number of rows and columns
    this(uint numRows, uint numColumns) {
        rows = numRows;
        columns = numColumns;
        data = new T[numRows][numColumns];
    }

    //getter for the number of rows
    const size_t getNumRows() {
        return rows;
    }

    //getter for the number of columns
    const size_t getNumColumns() {
        return columns;
    }

    //overloading the '+' operator to add two matrices
    Matrix opBinary(string op)(Matrix rhs) if (op == "+") {
        //creating a new matrix to store the result
        Matrix result = new Matrix(rows, columns);

        //loop through all elements and add the corresponding elements of both matrices
        foreach(i; 0 .. rows) {
            foreach(j; 0 .. columns) {
                result.data[i][j] = this.data[i][j] + rhs.data[i][j];
            }
        }

        return result;
    }

    //overloading the '*' operator to multiply two matrices
    Matrix opBinary(string op)(Matrix rhs) if (op == "*") {
        //creating a new matrix to store the result
        Matrix result = new Matrix(rows, rhs.columns);

        //loop through all elements and calculate the dot product of the row of first matrix and column of second matrix
        foreach(i; 0 .. result.rows) {
            foreach(j; 0 .. result.columns) {
                T sum = 0; //variable to store the dot product
                foreach(k; 0 .. columns) {
                    sum += this.data[i][k] * rhs.data[k][j];
                }
                result.data[i][j] = sum;
            }
        }

        return result;
    }

    //overloading the '*' operator to multiply a matrix by a scalar
    Matrix opBinary(string op)(T scalar) if (op == "*") {
        //creating a new matrix to store the result
        Matrix result = new Matrix(rows, columns);

        //loop through all elements and multiply them by the scalar
        foreach(i; 0 .. rows) {
            foreach(j; 0 .. columns) {
                result.data[i][j] = this.data[i][j] * scalar;
            }
        }

        return result;
    }

    //overloading the '==' operator to check if two matrices are equal
    bool opEquals(Matrix rhs) {
        //check if the matrices have the same dimensions
        if (this.rows != rhs.rows || this.columns != rhs.columns) {
            return false;
        }

        //loop through all elements and check if they are equal
        foreach(i; 0 .. rows) {
            foreach(j; 0 .. columns) {
                if (this.data[i][j] != rhs.data[i][j]) {
                    return false;
                }
            }
        }

        return true;
    }
}

//create two matrices of type float and initialize them
Matrix!float mat1 = new Matrix!float(3, 3);
mat1.data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];

Matrix!float mat2 = new Matrix!float(3, 2);
mat2.data = [[10, 11], [12, 13], [14, 15]];

//add the two matrices using the '+' operator
Matrix!float result1 = mat1 + mat2;

//multiply the two matrices using the '*' operator
Matrix!float result2 = mat1 * mat2;

//multiply the first matrix by a scalar using the '*' operator
Matrix!float result3 = mat1 * 2.0;

//check if the two matrices are equal using the '==' operator
if (mat1 == mat2) {
    //code to execute if the matrices are equal
}
else {
    //code to execute if the matrices are not equal
}