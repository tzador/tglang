/**
* This is a class in the D Programming Language
*/
class Complex { // defining a class called Complex
    private double real; // private attribute for the real part of the complex number
    private double imaginary; // private attribute for the imaginary part of the complex number

    /**
    * Constructor function with parameters for real and imaginary parts
    */
    this(double real, double imaginary) { 
        this.real = real; // setting the real part
        this.imaginary = imaginary; // setting the imaginary part
    }

    /**
    * Getter function for the real part
    * Returns the real part of the complex number
    */
    double getReal() { 
        return real; // returning the real part
    }

    /**
    * Getter function for the imaginary part
    * Returns the imaginary part of the complex number
    */
    double getImaginary() { 
        return imaginary; // returning the imaginary part
    }

    /**
    * Setter function for the real part
    * Sets the new value for the real part of the complex number
    */
    void setReal(double newReal) { 
        real = newReal; // setting the new value for the real part
    }

    /**
    * Setter function for the imaginary part
    * Sets the new value for the imaginary part of the complex number
    */
    void setImaginary(double newImaginary) { 
        imaginary = newImaginary; // setting the new value for the imaginary part
    }

    /**
    * Function for addition of two complex numbers
    * Returns a new Complex Object with the addition of the two numbers
    */
    Complex add(Complex c) { 
        double newReal = real + c.getReal(); // adding the real parts
        double newImaginary = imaginary + c.getImaginary(); // adding the imaginary parts
        return new Complex(newReal, newImaginary); // creating and returning the new Complex Object
    }

    /**
    * Function for subtraction of two complex numbers
    * Returns a new Complex Object with the subtraction of the two numbers
    */
    Complex subtract(Complex c) { 
        double newReal = real - c.getReal(); // subtracting the real parts
        double newImaginary = imaginary - c.getImaginary(); // subtracting the imaginary parts
        return new Complex(newReal, newImaginary); // creating and returning the new Complex Object
    }

    /**
    * Function for multiplication of two complex numbers
    * Returns a new Complex Object with the multiplication of the two numbers
    */
    Complex multiply(Complex c) { 
        double newReal = (real * c.getReal()) - (imaginary * c.getImaginary()); // multiplying the real parts
        double newImaginary = (real * c.getImaginary()) + (imaginary * c.getReal()); // multiplying the imaginary parts
        return new Complex(newReal, newImaginary); // creating and returning the new Complex Object
    }

    /**
    * Function for division of two complex numbers
    * Returns a new Complex Object with the division of the two numbers
    */
    Complex divide(Complex c) { 
        double denominator = (c.getReal() * c.getReal()) + (c.getImaginary() * c.getImaginary()); // getting the denominator for division
        double newReal = ((real * c.getReal()) + (imaginary * c.getImaginary())) / denominator; // dividing the real parts
        double newImaginary = ((imaginary * c.getReal()) - (real * c.getImaginary())) / denominator; // dividing the imaginary parts
        return new Complex(newReal, newImaginary); // creating and returning the new Complex Object
    }

    /**
    * Function to get the magnitude of the complex number
    * Returns the magnitude of the complex number as a double
    */
    double getMagnitude() { 
        double magnitude = Math.sqrt((real * real) + (imaginary * imaginary)); // calculating the magnitude using the Pythagorean theorem
        return magnitude; // returning the magnitude
    }

    /**
    * Function to get the conjugate of the complex number
    * Returns a new Complex Object with the conjugate of the complex number
    */
    Complex getConjugate() { 
        return new Complex(real, -imaginary); // creating and returning the new Complex Object with the conjugate values
    }

    /**
    * Function to check if two complex numbers are equal
    * Returns a boolean value true if both numbers are equal and false if not
    */
    bool isEqual(Complex c) { 
        if (real == c.getReal() && imaginary == c.getImaginary()) { // checking if both real and imaginary parts are equal
            return true; // returning true if both numbers are equal
        } else { 
            return false; // returning false if both numbers are not equal
        }
    }
}