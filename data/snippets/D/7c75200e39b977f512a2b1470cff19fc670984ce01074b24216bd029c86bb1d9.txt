// This program implements Merge Sort algorithm in D programming language.

import std.stdio;

// Function to merge two subarrays of array arr[]
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void merge(ref int[] arr, int l, int m, int r) {
    auto n1 = m - l + 1;
    auto n2 = r - m;
    
    // Create temp arrays
    int[] L = new int[n1];
    int[] R = new int[n2];
    
    // Copy data to temp arrays L[] and R[]
    for (int i = 0; i < n1; i++) {
        L[i] = arr[l + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[m + 1 + j];
    }
    
    // Merge the temp arrays back into arr[l..r]
    int i = 0;
    int j = 0;
    int k = l;
    
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    
    // Copy the remaining elements of L[], if there are any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    
    // Copy the remaining elements of R[], if there are any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Function to implement Merge Sort algorithm
void mergeSort(ref int[] arr, int l, int r) {
    if (l < r) {
        // Same as (l+r)/2, but avoids overflow for large l and h
        auto m = l + (r - l) / 2;
        
        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        
        // Merge the two sorted halves
        merge(arr, l, m, r);
    }
}

// Driver function
void main() {
    int[] arr = [64, 25, 12, 22, 11];
    int n = arr.length;
    
    writeln("Given array:");
    foreach (num; arr) {
        write(num, " ");
    }
    writeln();
    
    // Call mergeSort function
    mergeSort(arr, 0, n - 1);
    
    writeln("Sorted array:");
    foreach (num; arr) {
        write(num, " ");
    }
    writeln();
}

// Output:
// Given array:
// 64 25 12 22 11
// Sorted array:
// 11 12 22 25 64