module concurrency;

// define a struct type with a shared atomic integer
struct SharedCounter {
    shared int count; // shared keyword makes this variable atomic

    // define a method to increment the counter
    void increment() {
        count++; // atomic operation
    }
}

// create an instance of the SharedCounter struct
SharedCounter counter;

// spawn 3 tasks to increment the counter concurrently
foreach (_; 0 .. 3) {
    spawn {
        // loop 10 times, each time calling the increment method
        foreach (i; 0 .. 10) {
            counter.increment();
        }
    }
}

// wait for all tasks to finish executing
Thread.sleep(500); // use Thread module to sleep for a specified time

// print the final value of the counter
writeln("Final value of the counter: ", counter.count);