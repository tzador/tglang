import std.stdio;

// define a matrix class
class Matrix(T)
{
    T[][] data; // define an array of arrays for holding data
    
    // constructor for creating an empty matrix
    public this()
    {
        data = T[][]();
    }
    
    // constructor for creating a matrix with given dimensions
    public this(uint rows, uint columns)
    {
        // create an empty array of arrays with given dimensions
        data = new T[][](rows, columns);
        
        // initialize the values to 0
        foreach (i, ref row; data)
        {
            row = new T[](columns);
        }
    }
    
    // function to access elements in the matrix
    public T opIndex(uint row, uint column)
    {
        return data[row][column];
    }
    
    // function to set elements in the matrix
    public void opIndexAssign(uint row, uint column, T value)
    {
        data[row][column] = value;
    }
    
    // function to multiply two matrices
    public static Matrix!T opBinary(string op)(Matrix!T left, Matrix!T right) if (op == "*")
    {
        assert(left.columns == right.rows, "Matrices must have valid dimensions for multiplication.");
        
        // create new matrix to hold the result
        Matrix!T result = new Matrix!T(left.rows, right.columns);
        
        // perform the multiplication
        foreach (i, ref row; result.data)
        {
            foreach (j, ref column; row)
            {
                T sum = 0;
                
                foreach (k, ref leftIndex; left.columns)
                {
                    sum += left[i][k] * right[k][j];
                }
                
                result[i][j] = sum;
            }
        }
        
        return result;
    }
    
    // function to calculate the transpose of a matrix
    public Matrix!T transpose()
    {
        // create new matrix with flipped dimensions
        Matrix!T result = new Matrix!T(columns, rows);
        
        // populate the new matrix with transposed elements
        foreach (i, ref row; result.data)
        {
            foreach (j, ref column; row)
            {
                result[i][j] = data[j][i];
            }
        }
        
        return result;
    }
    
    // function to print the matrix in a readable format
    public void print()
    {
        foreach (row; data)
        {
            foreach (element; row)
            {
                writef("%s\t", element);
            }
            writeln();
        }
    }
}

// Example usage
void main()
{
    // create a 3x3 matrix with integers
    Matrix!int mat = Matrix!int(3, 3);
    
    // set values in the matrix
    for (uint i = 0; i < 3; i++)
    {
        for (uint j = 0; j < 3; j ++)
        {
            mat[i][j] = i * j;
        }
    }
    
    // print the matrix
    mat.print();
    
    // multiply the matrix with its transpose
    Matrix!int result = mat * mat.transpose();
    
    // print the result
    result.print();
}