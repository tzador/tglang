import std.stdio;

void main() {
    // Create a 2D array with random values
    int[3][3] array;
    foreach (i; 0 .. 3)
        foreach (j; 0 .. 3)
            array[i][j] = uniform(1, 10);
    writeln("Original 2D array:", array);

    // Transpose the array
    int[3][3] transposed;
    foreach (i; 0 .. 3)
        foreach (j; 0 .. 3)
            transposed[j][i] = array[i][j];
    writeln("Transposed 2D array:", transposed);

    // Find the determinant of the original array
    int determinant = array[0][0] * (array[1][1] * array[2][2] - array[1][2] * array[2][1])
                    - array[0][1] * (array[1][0] * array[2][2] - array[1][2] * array[2][0])
                    + array[0][2] * (array[1][0] * array[2][1] - array[1][1] * array[2][0]);
    writeln("Determinant of original array:", determinant);

    // Calculate the inverse of the original array
    double[3][3] inverse;
    double determinant_inv = 1.0 / determinant;
    inverse[0][0] = determinant_inv * (array[1][1] * array[2][2] - array[1][2] * array[2][1]);
    inverse[0][1] = determinant_inv * (array[0][2] * array[2][1] - array[0][1] * array[2][2]);
    inverse[0][2] = determinant_inv * (array[0][1] * array[1][2] - array[0][2] * array[1][1]);
    inverse[1][1] = determinant_inv * (array[0][0] * array[2][2] - array[0][2] * array[2][0]);
    inverse[1][2] = determinant_inv * (array[0][2] * array[1][0] - array[0][0] * array[1][2]);
    inverse[2][2] = determinant_inv * (array[0][0] * array[1][1] - array[0][1] * array[1][0]);
    inverse[1][0] = determinant_inv * (array[1][2] * array[2][0] - array[1][0] * array[2][2]);
    inverse[2][0] = determinant_inv * (array[2][1] * array[1][0] - array[2][0] * array[1][1]);
    inverse[2][1] = determinant_inv * (array[2][0] * array[0][1] - array[2][1] * array[0][0]);
    writeln("Inverse of original array:", inverse);
}