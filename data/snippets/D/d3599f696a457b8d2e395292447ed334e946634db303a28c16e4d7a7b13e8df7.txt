/**
  This is a complex code snippet in D Programming Language.  
  It includes multiple functions, variables, classes and conditional statements.  
  The snippet takes an integer as input and prints its factorial.  
  It also checks if the input is a prime number using a recursive function.  
  The snippet uses D's built-in foreach loop and supports error handling using try-catch block.  
  Enjoy! 
*/

import std.stdio; // Importing D's standard I/O library

void main()
{
  int n;
  
  write("Enter an integer: "); // Prompt user to enter an integer
  readf("%d", &n); // Reading the integer from user input
  
  writefln("Factorial of %d is: %d", n, factorial(n)); // Calling factorial function and printing the result
  
  try
  {
    bool isPrime = primeNumber(n); // Checking if input is a prime number
    writefln("%d is%sa prime number.", n, isPrime ? " " : " not "); // Printing the result
  }
  catch(Exception e) // Catching any errors during calculation
  {
    writefln("Error: %s", e.msg); // Printing error message
  }
}

/**
  Calculates the factorial of a given integer using recursion.
  Returns the factorial as an integer.
*/
int factorial(int n)
{
  if(n == 0) // Base case: factorial of 0 is 1
    return 1;
  else
    return n * factorial(n-1); // Recursive call
}

/**
  Checks if a given integer is a prime number using recursion.
  Returns a boolean value indicating if the input is a prime number or not.
*/
bool primeNumber(int n)
{
  if(n <= 1) // 1 and below are not prime numbers
    return false;
  else if(n == 2) // 2 is a prime number
    return true;
  else
  {
    foreach(i; 2..n) // Using D's built-in foreach loop to check divisibility
    {
      if(n % i == 0) // If n is divisible by any number, it is not a prime number
        return false;
    }
    return true; // If no number divides n, it is a prime number
  }
}

// Output:
//
// Enter an integer: 5
// Factorial of 5 is: 120
// 5 is a prime number.