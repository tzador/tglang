/** A simple D program that generates a matrix with random values and performs matrix multiplication */
import std.random : uniform, randomSample;
import std.typecons : Put, Tuple;
import std.algorithm : map, reduce;
import std.range : iota, sliding;
import std.array : array;
import std.stdio : writefln, writeln;
alias Matrix(T) = Tuple!(Tuple!T[]);
alias dmatrix = Matrix!(double);

/** A function to generate a matrix of size m by n with random floating-point values between 0.0 and 1.0 */
dmatrix generateMatrix(size_t m, size_t n) {
    auto data = randomSample!double(uniform!double(0, 1), m * n);
    return Matrix!(Tuple!double[])(data.sliding(m).map!(a=>array(a)).array());
}

/** A function to perform matrix multiplication on two given matrices of sizes n by m and m by p */
dmatrix matrixMult(dmatrix A, dmatrix B, size_t m, size_t n, size_t p) {
    return Matrix!(double[])(
        iota(0, n).map!(i => iota(0, p).map!(j => 
            reduce!(a+b)(0)(zip(A[i], B[].$[j])))).array()
    );
}

void main() {
    size_t n = 3; // number of rows in matrix A
    size_t m = 4; // number of columns in matrix A, number of rows in matrix B
    size_t p = 2; // number of columns in matrix B

    writeln("Matrix A:");
    auto A = generateMatrix(n, m);
    writefln("%(%5f %)", A[].$[]);

    writeln("Matrix B:");
    auto B = generateMatrix(m, p);
    writefln("%(%5f %)", B[].$[]);

    writeln("A x B:");
    auto C = matrixMult(A, B, m, n, p);
    writefln("%(%5f %)", C[].$[]);
}