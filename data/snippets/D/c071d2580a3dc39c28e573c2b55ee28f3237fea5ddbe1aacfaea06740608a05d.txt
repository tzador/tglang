/**
 * This function implements the Quicksort algorithm.
 * @param arr - the array to be sorted
 * @param low - the starting index of the subarray
 * @param high - the ending index of the subarray
 */
void quickSort(int[] arr, int low, int high) {
    // Base case: return if the subarray has less than 2 elements
    if (low >= high) { 
        return;
    }
    
    // Select pivot element (middle of the subarray)
    int pivot = arr[low + (high - low) / 2]; 
    
    // Partition the subarray
    int i = low, j = high;
    while (i <= j) {
        // Find the first element on the left that is greater than or equal to the pivot
        while (arr[i] < pivot) {
            i++;
        }
        
        // Find the first element on the right that is less than or equal to the pivot
        while (arr[j] > pivot) {
            j--;
        }
        
        // Swap the elements if they are in the wrong partition
        if (i <= j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }
    
    // Recursively call quicksort on the left and right partitions
    quickSort(arr, low, j);
    quickSort(arr, i, high);
}

// Example usage
int[] array = [9, 2, 5, 1, 7, 3, 8, 6, 4];
quickSort(array, 0, array.length - 1);
writeln(array); // [1, 2, 3, 4, 5, 6, 7, 8, 9]