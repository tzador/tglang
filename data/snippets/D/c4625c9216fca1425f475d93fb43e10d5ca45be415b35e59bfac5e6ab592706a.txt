module main;

import std.stdio;

/**
 * A struct representing a person.
 */
struct Person {
    string name; // the person's name
    int age; // the person's age
    bool male; // boolean indicating if the person is male
}

/**
 * A class representing a bank account.
 */
class BankAccount {
    private string accountNumber; // the account's number
    private double balance; // the account's balance
    private Person owner; // the account's owner

    /**
     * Constructs a new bank account.
     * 
     * Params:
     * - acctNum: the account number
     * - initBalance: the initial balance
     * - ownerName: the name of the account owner
     * - ownerAge: the age of the account owner
     * - ownerMale: a boolean indicating if the owner is male
     * 
     * Returns:
     * The new bank account object.
     */
    this(string acctNum, double initBalance, string ownerName, int ownerAge, bool ownerMale) {
        accountNumber = acctNum;
        balance = initBalance;
        owner = Person(ownerName, ownerAge, ownerMale);
    }

    /**
     * Deposits the given amount into the account.
     * 
     * Params:
     * - amount: the amount to be deposited
     * 
     * Returns:
     * The new balance after the deposit.
     */
    double deposit(double amount) {
        balance += amount;
        return balance;
    }

    /**
     * Withdraws the given amount from the account.
     * 
     * Params:
     * - amount: the amount to be withdrawn
     * 
     * Returns:
     * The new balance after the withdrawal.
     */
    double withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
        } else {
            writefln("Insufficient funds in account %s.", accountNumber);
        }
        return balance;
    }

    /**
     * Transfers the given amount from this account to the specified account.
     * 
     * Params:
     * - amount: the amount to be transferred
     * - targetAccount: the account to transfer the amount to
     * 
     * Returns:
     * The new balance after the transfer.
     */
    double transfer(double amount, BankAccount targetAccount) {
        if (balance >= amount) {
            balance -= amount;
            targetAccount.balance += amount;
        } else {
            writefln("Insufficient funds in account %s.", accountNumber);
        }
        return balance;
    }

    /**
     * Displays the account information.
     * 
     * Params:
     * None.
     * 
     * Returns:
     * A string representing the account information.
     */
    string displayAccountInfo() {
        return "Account Number: " ~ accountNumber ~ "\n" ~
               "Balance: $" ~ to!string(balance) ~ "\n" ~
               "Owner: " ~ owner.name ~ " (Age: " ~ to!string(owner.age) ~ ", Gender: " ~
               (owner.male ? "Male" : "Female") ~ ")";
    }
}

void main() {
    // create a new bank account for John Doe
    auto johnDoeAcct = new BankAccount("123456789", 1000.00, "John Doe", 30, true);

    // display account information
    writeln(johnDoeAcct.displayAccountInfo());

    // deposit $500
    johnDoeAcct.deposit(500.00);

    // display new balance
    writeln("\nNew balance: $" ~ to!string(johnDoeAcct.balance));

    // withdraw $200
    johnDoeAcct.withdraw(200.00);

    // display new balance
    writeln("\nNew balance: $" ~ to!string(johnDoeAcct.balance));

    // create a new bank account for Jane Smith
    auto janeSmithAcct = new BankAccount("987654321", 500.00, "Jane Smith", 25, false);

    // transfer $300 from John Doe's account to Jane Smith's account
    johnDoeAcct.transfer(300.00, janeSmithAcct);

    // display new balances
    writeln("\nJohn Doe's balance: $" ~ to!string(johnDoeAcct.balance));
    writeln("Jane Smith's balance: $" ~ to!string(janeSmithAcct.balance));
}