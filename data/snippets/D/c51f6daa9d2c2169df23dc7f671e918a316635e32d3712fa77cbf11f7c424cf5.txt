// This code snippet showcases a complex function in D Programming Language
// It takes in an array of integers and returns a sorted array in ascending order

import std.algorithm;
import std.array;

// Function to sort the array in ascending order using quicksort algorithm
void quickSort(ref int[] array, int left, int right)
{
    // Setting the pivot element as the middle element
    int pivot = array[left + (right - left) / 2];
    int i = left;
    int j = right;

    // Looping through the array to rearrange elements with respect to pivot
    while (i <= j)
    {
        // Finding an element on the left side that is greater than or equal to pivot
        while (array[i] < pivot)
            i++;
        
        // Finding an element on the right side that is less than or equal to pivot
        while (array[j] > pivot)
            j--;
        
        // Swapping the elements to their correct positions
        if (i <= j)
        {
            swap(array[i], array[j]);
            i++;
            j--;
        }
    }

    // Recursively calling the function for the left and right subarrays
    if (left < j)
        quickSort(array, left, j);
    if (i < right)
        quickSort(array, i, right);
}

void main()
{
    // Initializing an array
    int[] array = [2, 8, 1, 5, 3];
    writeln("Unsorted array: ", array);

    // Calling quickSort function to sort the array
    quickSort(array, 0, array.length - 1);

    // Displaying the sorted array
    writeln("Sorted array: ", array);
}