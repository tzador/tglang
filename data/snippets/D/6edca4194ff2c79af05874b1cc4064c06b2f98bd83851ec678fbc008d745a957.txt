import std.stdio;

/*This function takes in an integer array and sorts it using the QuickSort algorithm, which has an average time complexity of O(n log n).*/

int[] quickSort(int[] array, int left, int right)
{
    int pivot = array[left + (right - left) / 2];
    int i = left;
    int j = right;

    /*partition - rearrange array elements so elements smaller than pivot come before pivot and elements greater than pivot come after it*/

    while (i <= j)
    {

        while (array[i] < pivot)
            i++;
        while (array[j] > pivot)
            j--;
        if (i <= j)
        {
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
            i++;
            j--;
        }
    }

    /*recursive calls to quickSort on the two subarrays*/

    if (left < j)
        quickSort(array, left, j);
    if (i < right)
        quickSort(array, i, right);

    /*return the sorted array*/

    return array;
}

/*example usage - sorting an array of integers*/

void main()
{
    int[] numbers = [3, 7, 1, 9, 2, 5];
    int[] sortedNumbers = quickSort(numbers, 0, numbers.length - 1);
    writeln(sortedNumbers);
}