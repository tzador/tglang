import std.stdio;

// Define a generic class named `Node` with a `T` type parameter
class Node(T) {
    T value; // A node's value
    Node!T next; // A reference to the next node (of type `T`)
    
    // Constructor that sets the node's value and the next node
    this(T val, Node!T nxt) {
        value = val;
        next = nxt;
    }
    
    // Getter method to return the node's value
    T getValue() {
        return value;
    }
    
    // Setter method to set the node's value
    void setValue(T newVal) {
        value = newVal;
    }
    
    // Method to print out the value of the node
    void printValue() {
        writefln("Value: %s", value);
    }
}

// Define a generic class named `LinkedList` with a `T` type parameter
class LinkedList(T) {
    Node!T head; // A reference to the head node (of type `T`)
    
    // Constructor that sets the head node
    this(Node!T node) {
        head = node;
    }
    
    // Method to add a new node to the end of the linked list
    void addNode(T val) {
        Node!T current = head; // Set current node to the head
        Node!T newNode = new Node!T(val, null); // Create a new node with the given value and a null next node
        
        // Traverse through the linked list until reaching the end
        while(current.next !is null) { 
            current = current.next; // Set current node to the next node
        }
        
        current.next = newNode; // Set the next node to the new node
    }
    
    // Method to print out the values of all nodes in the linked list
    void printList() {
        Node!T current = head; // Set current node to the head
        
        // Traverse through the linked list until reaching the end
        while(current !is null) {
            current.printValue(); // Call the printValue method to print out the current node's value
            current = current.next; // Set current node to the next node
        }
    }
}

// Main function
void main() {
    // Create a linked list with an integer type parameter and set the head node to a node with value 1
    LinkedList!int linkedList = new LinkedList!int(new Node!int(1, null)); 
    
    linkedList.addNode(2); // Add a node with value 2 to the end of the linked list
    linkedList.addNode(3); // Add a node with value 3 to the end of the linked list
    linkedList.addNode(4); // Add a node with value 4 to the end of the linked list
    
    linkedList.printList(); // Print out the values of all nodes in the linked list
}