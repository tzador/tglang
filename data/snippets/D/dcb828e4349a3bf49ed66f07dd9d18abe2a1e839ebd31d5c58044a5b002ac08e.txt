//This function calculates the factorial of a given number
long factorial(int num)
{
    //Base case: if the number is 0 or 1, return 1
    if (num == 0 || num == 1)
    {
        return 1;
    }

    //Recursive case: calculate factorial using recursion
    else
    {
        return num * factorial(num - 1);
    }
}

//This function calculates the nth term in the Fibonacci sequence
long fibonacci(int n)
{
    //Base case: if n is 1 or 2, return respective values
    if (n == 1)
    {
        return 0;
    }
    else if (n == 2)
    {
        return 1;
    }

    //Recursive case: calculate fibonacci using recursion
    else
    {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

//This function finds the maximum element in an array
long getMax(int[] arr)
{
    //Initialize max element as the first element in the array
    long max = arr[0];

    //Loop through array and update max if a larger element is found
    foreach (i, elem; arr)
    {
        if (elem > max)
        {
            max = elem;
        }
    }
    return max;
}

//This function reverses a given string
void reverseString(char[] str)
{
    //Initialize start and end pointers
    int start = 0;
    int end = str.length - 1;

    //Loop through string and swap characters starting from the edges towards the middle
    while (start < end)
    {
        char temp = str[start];
        str[start] = str[end];
        str[end] = temp;
        start++;
        end--;
    }
}

//This is a struct representing a student
struct Student
{
    string name;
    int age;
    float gpa;
}

//This function sorts an array of students by their grades
void sortByGPA(Student[] students)
{
    //Initialize variables for sorting
    int i, j;

    //Loop through array with first loop starting from second element
    for (i = 1; i < students.length; i++)
    {
        //Save current student in a temporary variable
        Student temp = students[i];

        //Loop through sorted subarray and shift elements if current student has higher GPA
        for (j = i - 1; j >= 0 && temp.gpa > students[j].gpa; j--)
        {
            students[j + 1] = students[j];
        }
        //Insert the current student at the appropriate position
        students[j + 1] = temp;
    }
}