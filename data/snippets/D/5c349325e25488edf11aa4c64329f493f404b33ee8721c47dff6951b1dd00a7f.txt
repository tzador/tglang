// Basic program to perform matrix multiplication
import std.stdio;
import std.algorithm;
import std.range;
import std.typecons;

// Define a matrix struct
struct Matrix(T) {
    T[][] data; // two-dimensional array to store matrix data
    int rows;
    int cols;

    // Constructor to initialize matrix with specified dimensions
    this(int rows, int cols) {
        this.rows = rows;
        this.cols = cols;
        // Allocate memory for data array
        this.data = new T[][](rows, cols);
    }

    // Override the multiplication operator to perform matrix multiplication
    Matrix opBinary(string op)(Matrix other) if (op == "*") {
        // Check if the dimensions of the matrices are compatible for multiplication
        static assert(this.cols == other.rows, "Matrices cannot be multiplied, mismatched dimensions");
        
        // Create a result matrix with appropriate dimensions
        Matrix result = new Matrix(this.rows, other.cols);
        
        // Perform matrix multiplication
        foreach (i; 0 .. result.rows) {
            foreach (j; 0 .. result.cols) {
                // Use map with lambda function to perform dot product of two rows
                result.data[i][j] = this.data[i].map!((a) => a * other.data.map!(b => b[j]).reduce!((c, d) => c + d)).sum();
            }
        }

        return result;
    }
}

void main() {
    // Create two matrices to perform multiplication
    Matrix!int mat1 = Matrix!int(2, 3); // 2x3 matrix
    Matrix!int mat2 = Matrix!int(3, 2); // 3x2 matrix
    
    // Initialize data for matrices
    mat1.data = [[1, 2, 3], [4, 5, 6]];
    mat2.data = [[7, 8], [9, 10], [11, 12]];

    // Perform matrix multiplication and store the result in a new matrix
    Matrix!int result = mat1 * mat2;

    // Output the result
    writeln("Result of matrix multiplication: ");
    foreach (i; 0 .. result.rows) {
        foreach (j; 0 .. result.cols) {
            write(result.data[i][j], " ");
        }
        writeln();
    }
}

/* Output:
Result of matrix multiplication:
58 64
139 154
*/