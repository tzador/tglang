// a function that returns the sum of two numbers
int add(int a, int b)
{
    return a + b;
}

// a function that calculates the factorial of a number
int factorial(int n)
{
    int result = 1;
    for(int i = 2; i <= n; i++)
    {
        result *= i;
    }
    return result;
}

// a function that checks if a number is prime
bool isPrime(int n)
{
    // 1 and 0 are not prime numbers
    if(n == 1 || n == 0)
    {
        return false;
    }
    // loop through all possible divisors from 2 to n/2
    // if n is divisible by any of these, it is not prime
    for(int i = 2; i <= n/2; i++)
    {
        if(n % i == 0)
        {
            return false;
        }
    }
    // if the loop completes without finding a divisor, n is prime
    return true;
}

// a function that calculates the Nth Fibonacci number
int fibonacci(int n)
{
    // the first two numbers in the sequence are always 1
    if(n == 1 || n == 2)
    {
        return 1;
    }
    // initialize variables to store the previous two fibonacci numbers
    int first = 1;
    int second = 1;
    // loop through all numbers up to the Nth number
    for(int i = 3; i <= n; i++)
    {
        // calculate the next fibonacci number by adding the previous two
        int next = first + second;
        // update the values of the previous two numbers
        first = second;
        second = next;
    }
    // the final value of second will be the Nth fibonacci number
    return second;
}

// sample function calls to test the above functions
int sum = add(5, 10);
int factorial = factorial(4);
bool prime = isPrime(17);
int fibonacciNumber = fibonacci(8);