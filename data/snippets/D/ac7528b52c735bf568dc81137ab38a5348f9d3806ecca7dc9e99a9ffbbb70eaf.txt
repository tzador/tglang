// This is a complex code snippet in D programming language for a hash table implementation

import std.stdio;
import std.containers;
import std.typecons;

void main()
{
    // Declare a hash table with a string as key and an integer as value
    HashTable!(string, int) hashTable;
    
    // Add elements to the hash table
    hashTable["apple"] = 5;
    hashTable["banana"] = 10;
    hashTable["orange"] = 15;
    
    // Print the current size of the hash table
    writeln("Current size of hash table: ", hashTable.size());
    
    // Create a new key-value pair
    auto pair = tuple("grape", 20);
    
    // Insert the new pair into the hash table
    hashTable.insert(pair);
    
    // Check if the key "orange" exists in the hash table
    if(hashTable.exists("orange"))
    {
        // Replace the value of "orange" with 25
        hashTable["orange"] = 25;
    }
    
    // Print the value of "banana"
    writeln("Value of banana: ", hashTable["banana"]);
    
    // Remove the pair with the key "apple" from the hash table
    hashTable.remove("apple");
    
    // Loop through all the key-value pairs in the hash table
    foreach(key, value; hashTable)
    {
        writeln(key, ": ", value);
    }
}