// This code snippet declares a template class that implements a
// basic doubly linked list data structure in D programming language

template LinkedList(T) {

// Variables to store the head and tail nodes of the list
Node head;
Node tail;

// Node class that stores the data and references to the previous and next nodes
class Node {
    T data;
    Node* next;
    Node* prev;
}

// Function to insert a new node at the beginning of the list
void insertFront(T data) {
    Node newNode = new Node;
    newNode.data = data;
    newNode.next = head;
    head = newNode;

    // If the list is empty, set the tail to the new node as well
    if (tail is null) {
        tail = newNode;
    }
}

// Function to insert a new node at the end of the list
void insertBack(T data) {
    // If the list is empty, call the insertFront() function
    if (head is null) {
        insertFront(data);
    }
    else {
        Node newNode = new Node;
        newNode.data = data;
        newNode.prev = tail;
        tail.next = newNode;
        tail = newNode;
    }
}

// Function to insert a new node at a specific position in the list
void insertAt(T data, int index) {
    // If index is 0, call the insertFront() function
    if (index == 0) {
        insertFront(data);
    }
    // If index is equal to size of list, call the insertBack() function
    else if (index == size()) {
        insertBack(data);
    }
    else {
        // Get the node at the specified index
        Node currentNode = getNodeAt(index);

        // Create a new node and set its data and references
        Node newNode = new Node;
        newNode.data = data;
        newNode.prev = currentNode.prev;
        newNode.next = currentNode;

        // Set the references of adjacent nodes to the new node
        currentNode.prev.next = newNode;
        currentNode.prev = newNode;
    }
}

// Function to remove the first node in the list
void removeFront() {
    head = head.next;
    head.prev = null;
}

// Function to remove the last node in the list
void removeBack() {
    tail = tail.prev;
    tail.next = null;
}

// Function to remove a node at a specific position in the list
void removeAt(int index) {
    // If index is 0, call the removeFront() function
    if (index == 0) {
        removeFront();
    }
    // If index is equal to size of list - 1, call the removeBack() function
    else if (index == size() - 1) {
        removeBack();
    }
    else {
        // Get the node at the specified index
        Node currentNode = getNodeAt(index);

        // Set the references of adjacent nodes to exclude the current node
        currentNode.prev.next = currentNode.next;
        currentNode.next.prev = currentNode.prev;
    }
}

// Function to get a node at a specific position in the list
Node getNodeAt(int index) {
    // Start from the head node and traverse to the node at the specified index
    Node currentNode = head;
    int currentIndex = 0;

    while (currentNode isnot null) {
        // If currentIndex is equal to index, return the current node
        if (currentIndex == index) {
            return currentNode;
        }

        // Move to the next node and increment the index
        currentNode = currentNode.next;
        currentIndex++;
    }

    // If the specified index is not found, return null
    return null;
}

// Function to get the size of the list
int size() {
    // Start from the head node and traverse till the end of list, counting the nodes
    Node currentNode = head;
    int size = 0;

    while (currentNode isnot null) {
        size++;
        currentNode = currentNode.next;
    }

    return size;
}

}