struct Point
{
  float x;
  float y;
  int z;
}

mixin template CustomOps(T) // Template mixin to overload operators
{
  // Overloading the == operator
  bool opEquals(T other)
  in(next_other)
  {
    if (is(T == Point))
    {
      // Check if coordinates are equal
      return (this.x == other.x && this.y == other.y && this.z == other.z);
    }
    else
    {
      // Fall back to default comparison
      return (this is other);
    }
  }

  // Overloading the + operator
  T opBinary(string op, T other)
  out(out)
  {
    if (is(T == Point))
    {
      // Add coordinates
      out = Point(this.x + other.x, this.y + other.y, this.z + other.z);
    }
    else
    {
      // Fall back to default operation
      mixin("out = this." ~ op ~ "this;");
    }
  }
}

// Mixing in the CustomOps template for Point structure
mixin(CustomOps!Point);

// Creating two points
Point p1 = Point(3.4, 5.6, -1);
Point p2 = Point(5.7, 2.3, 4);

// Checking equality of points using overloaded == operator
if (p1 == p2)
{
  // Points are equal
  writeln("The points are equal!");
}
else
{
  // Points are not equal
  writeln("The points are not equal!");
}

// Adding two points using overloaded + operator
Point p3 = p1 + p2;
writeln("The sum of the two points is: ", p3.x, ", ", p3.y, ", ", p3.z);