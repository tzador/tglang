import std.algorithm; //Importing standard algorithm module for further use

//Creating a template for a binary search function which takes in an array of integers and the element 
//to be searched as parameters
template binarySearch(T)(T[] arr, T element) {  

    //Initializing start and end variables representing the first and last index of the array respectively
    int start = 0;
    int end = arr.length - 1;

    //Initializing a while loop which runs as long as the start index is less than or equal to the end index
    while (start <= end) {

        //Calculating the mid index by adding the start and end index and dividing it by 2
        int mid = (start + end) / 2;

        //Checking if the element at the mid index is equal to the element we are searching for
        if (arr[mid] == element) {

            //If it is, return the mid index as the position of the element in the array
            return mid;

        } else if (arr[mid] < element) {

            //If it is not, check if the element at the mid index is less than the element we are searching for
            //If it is, update the start index to be one more than the mid index
            start = mid + 1;

        } else {

            //If it is not, update the end index to be one less than the mid index
            end = mid - 1;
        }
    }

    //If the element is not found, return -1 as the element does not exist in the array
    return -1;
}

//Creating an array of integers to be searched through
int[] numbers = [3, 6, 10, 15, 21, 31];

//Calling the binarySearch template function with the numbers array and the element 15
int index = binarySearch!int(numbers, 15);

//Printing out the result of the binary search function
writeln("The element is found at index ", index);