// Example of a complex code snippet in D programming language

// Importing the standard library
import std.stdio, std.algorithm, std.range;

// Defining a struct for a person
struct Person
{
    string name;
    int age;
    string occupation;
}

// Creating a list of persons
auto persons = [ 
    Person("John", 23, "Developer"),
    Person("Jane", 29, "Writer"),
    Person("Mark", 33, "Designer"),
    Person("Sarah", 27, "Teacher"),
    Person("Mike", 31, "Engineer")
];

// Filtering the list to get persons above 30 years old
auto filteredPersons = persons
    .filter!"a.age > 30"
    .map!"a.name";

// Defining a function to print the filtered persons
void printFilteredPersons(T)(T filteredPersons)
{
    foreach(person; filteredPersons)
    {
        writeln("Name: ", person);
    }
}

// Calling the printFilteredPersons function
printFilteredPersons(filteredPersons); // Output: Name: Mark, Name: Mike

// Sorting the list based on occupation in ascending order
auto sortedPersons = persons
    .sort!"a.occupation"
    .map!"a.name"
    .array
   
// Defining a function to print the sorted persons
void printSortedPersons(T)(T sortedPersons)
{
    foreach(person; sortedPersons)
    {
        writeln("Name: ", person);
    }
}

// Calling the printSortedPersons function
printSortedPersons(sortedPersons); // Output: Name: Mark, Name: Jane, Name: John, Name: Mike, Name: Sarah

// Calculating the average age of all persons
auto averageAge = persons
    .map!"a.age"
    .reduce!"a + b"
    .div(persons.length);

// Printing the average age
writeln("Average Age: ", averageAge); // Output: Average Age: 28

// Defining a function to print the attributes of a person
void printPerson(Person person)
{
    writeln("Name: ", person.name);
    writeln("Age: ", person.age);
    writeln("Occupation: ", person.occupation);
}

// Printing the attributes of the first person in the list
printPerson(persons[0]); // Output: Name: John, Age: 23, Occupation: Developer

// Reversing the list of persons
auto reversedPersons = persons
    .reverse;

// Defining a function to print the reversed list of persons
void printReversedPersons(T)(T reversedPersons)
{
    foreach(person; reversedPersons)
    {
        writeln("Name: ", person.name);
    }
}

// Calling the printReversedPersons function
printReversedPersons(reversedPersons); // Output: Name: Mike, Name: Sarah, Name: Mark, Name: Jane, Name: John