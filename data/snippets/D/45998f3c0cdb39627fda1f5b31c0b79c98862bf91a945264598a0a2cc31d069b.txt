// Define a templated function named 'quicksort' that takes in a generic array 
// of type T, along with integer parameters 'low' and 'high'
void quicksort(T)(T[] array, int low, int high) 
{
    // Check if the size of the array is greater than zero
    if (high > low)
    {
        // Choose a pivot element to partition the array
        T pivot = array[low + (high - low) / 2];
        
        // Initialize index variables
        int i = low;
        int j = high;
        
        // Continue partitioning until i and j cross each other
        while (i <= j)
        {
            // Find first element on the left side that is greater than or equal to pivot
            while (array[i] < pivot) 
                i++;
            
            // Find first element on the right side that is less than or equal to pivot
            while (array[j] > pivot) 
                j--;
            
            // Swap the elements found by i and j
            if (i <= j)
            {
                T temp = array[i];
                array[i++] = array[j];
                array[j--] = temp;
            }
        }
        
        // Use recursion to partition the left and right subarrays
        quicksort(array, low, i - 1);
        quicksort(array, i, high);
    }
}