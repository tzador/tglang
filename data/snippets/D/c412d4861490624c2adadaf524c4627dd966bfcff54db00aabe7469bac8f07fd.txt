// This is a sample code snippet in D Programming Language
// It creates a sorting function using the quicksort algorithm

// Define the quicksort function
void quicksort(T)(ref T[] array, int left, int right)
{
    // Check for empty or invalid array
    if (array.length == 0 || left >= right)
        return;

    // Define the pivot element as the middle element of the array
    auto pivot = array[(left + right) / 2];

    // Define the variables for the left and right pointers
    int i = left;
    int j = right;

    // Start the sorting loop
    while (i <= j)
    {
        // Find an element on the left side that is greater than the pivot
        while (array[i] < pivot)
            i++;

        // Find an element on the right side that is smaller than the pivot
        while (array[j] > pivot)
            j--;

        // Swap the elements if the left pointer is still to the left of the right pointer
        if (i <= j)
        {
            auto temp = array[i];
            array[i] = array[j];
            array[j] = temp;

            // Move the pointers closer to each other
            i++;
            j--;
        }
    }

    // Recursively call the quicksort function on the left and right subarrays
    if (left < j)
        quicksort(array, left, j);
    if (i < right)
        quicksort(array, i, right);
}

// Create an array to be sorted
int[] array = [7, 2, 5, 1, 9, 3];

// Print the unsorted array
writeln("Unsorted array: ", array);

// Call the quicksort function on the array
quicksort(array, 0, array.length - 1);

// Print the sorted array
writeln("Sorted array: ", array);

// Output:
// Unsorted array: [7, 2, 5, 1, 9, 3]
// Sorted array: [1, 2, 3, 5, 7, 9]