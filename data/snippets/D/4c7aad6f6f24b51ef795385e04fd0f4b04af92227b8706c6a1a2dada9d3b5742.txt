// This is a complex code snippet in D programming language

import std.stdio;
import std.algorithm;
import std.range;
import std.conv;

enum PI = 3.14159265358979323846; // defining a constant

struct Complex{ // creating a struct for complex numbers
    double real;
    double imag;

    double magnitude(){ // defining a member function to calculate magnitude
        return sqrt(real * real + imag * imag);
    }

    Complex opBinary(string op)(Complex c){ // overloading binary operators
        if(op == "*"){
            return Complex(real * c.real - imag * c.imag, real * c.imag + imag * c.real);
        }
        else if(op == "/"){
            double denom = c.real * c.real + c.imag * c.imag;
            return Complex((real * c.real + imag * c.imag) / denom, (imag * c.real - real * c.imag) / denom);
        }
        else{
            throw new Exception("Operator not supported!");
        }
    }

    Complex opUnary(string op)(){ // overloading unary operators
        if(op == "-"){
            return Complex(-real, -imag);
        }
        else{
            throw new Exception("Operator not supported!");
        }
    }

    string toString(){ // overriding toString function for printing
        return to!string(real) ~ (imag < 0 ? "-" : "+") ~ to!string(imag) ~ "i";
    }

    alias toString to!string;
}

void main(){
    writeln("This is a complex code snippet in D programming language");

    // creating two complex numbers
    Complex z1 = Complex(3.5, 4.2);
    Complex z2 = Complex(2.1, -1.3);

    // printing the two complex numbers
    writeln("z1 = ", z1.toString);
    writeln("z2 = ", z2.toString);

    // calculating and printing magnitude of z1 and z2
    writeln("Magnitude of z1 = ", z1.magnitude());
    writeln("Magnitude of z2 = ", z2.magnitude());

    // calculating and printing the result of various operations on z1 and z2
    writeln("z1 + z2 = ", (z1 + z2).toString);
    writeln("z1 - z2 = ", (z1 - z2).toString);
    writeln("z1 * z2 = ", (z1 * z2).toString);
    writeln("z1 / z2 = ", (z1 / z2).toString);
    writeln("-(z1 + z2) = ", -(z1 + z2).toString);
}