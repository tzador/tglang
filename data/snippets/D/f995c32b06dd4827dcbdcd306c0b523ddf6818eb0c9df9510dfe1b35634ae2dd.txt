import std.stdio;

enum Color {
    RED,
    GREEN,
    BLUE
}

class Shape {
    protected Color color; // protected data member of type Color

    public this(Color color) { // constructor that takes a Color parameter
        this.color = color;
    }

    public string toString() { // method that returns a string representation of the object
        return "Shape: " ~ color.toString();
    }

    public void draw() { // method that prints out the object's shape and color
        switch (color) {
            case Color.RED:
                writefln("Drawing a red shape");
                break;

            case Color.GREEN:
                writefln("Drawing a green shape");
                break;

            case Color.BLUE:
                writefln("Drawing a blue shape");
                break;
        }
    }
}

class Circle : Shape { // Circle class that inherits from Shape
    private double radius; // private data member of type double

    public this(Color color, double radius) { // constructor that takes a Color and radius parameter
        super(color); // calling the parent class constructor
        this.radius = radius;
    }

    public override string toString() { // method that overrides the Shape class's toString method
        return "Circle: Color - " ~ color.toString() ~ ", Radius - " ~ radius.to!string();
    }

    public override void draw() { // method that overrides the Shape class's draw method
        writefln("Drawing a circle with a radius of " ~ radius.to!string() ~ " and color " ~ color.toString());
    }

    public double getArea() { // method that calculates and returns the area of the circle
        return Math.PI * radius * radius;
    }
}

class Rectangle : Shape { // Rectangle class that inherits from Shape
    private double length; // private data member of type double
    private double width; // private data member of type double

    public this(Color color, double length, double width) { // constructor that takes a Color, length, and width parameter
        super(color); // calling the parent class constructor
        this.length = length;
        this.width = width;
    }

    public override string toString() { // method that overrides the Shape class's toString method
        return "Rectangle: Color - " ~ color.toString() ~ ", Length - " ~ length.to!string() ~ ", Width - " ~ width.to!string();
    }

    public override void draw() { // method that overrides the Shape class's draw method
        writefln("Drawing a rectangle with a length of " ~ length.to!string() ~ " and width of " ~ width.to!string() ~ " and color " ~ color.toString());
    }

    public double getArea() { // method that calculates and returns the area of the rectangle
        return length * width;
    }
}

void main() {
    Shape[] shapes = [ // creating an array of Shape objects
        new Circle(Color.RED, 5.0),
        new Rectangle(Color.GREEN, 10.0, 8.0),
        new Circle(Color.BLUE, 3.0),
        new Rectangle(Color.RED, 4.0, 6.0)
    ];

    for (auto shape : shapes) { // looping through the shapes array
        shape.draw(); // calling the draw method for each shape
        writefln("Area: " ~ shape.getArea()); // calling the getArea method and printing the area for each shape
    }
}

// Output:
// Drawing a red shape
// Area: 78.53981633974483
// Drawing a rectangle with a length of 10 and width of 8 and color GREEN
// Area: 80.0
// Drawing a circle with a radius of 3 and color BLUE
// Area: 28.274333882308138
// Drawing a rectangle with a length of 4 and width of 6 and color RED
// Area: 24.0