// Define a class named "Polygon"
class Polygon {
   
   // Initialize a private variable "sides" and assign it a value of 4
   private int sides = 4;

   // Define a static method "getSides" that returns the value of the "sides" variable
   static int getSides() {
      return sides;
   }

   // Define a constructor that takes in a parameter "numSides" and assigns its value to the "sides" variable
   this(int numSides) {
      sides = numSides;
   }

   // Define a method "getPerimeter" that takes the lengths of each side as input and calculates the perimeter
   int getPerimeter(int[] lengths) {
      int perimeter = 0;

      // Loop through each side and add its length to the perimeter variable
      foreach (length; lengths) {
         perimeter += length;
      }

      // Return the calculated perimeter
      return perimeter;
   }

   // Define a method "getArea" that takes the length and width as input and calculates the area
   int getArea(int length, int width) {
      // Multiply the length and width together and assign the result to the "area" variable
      int area = length * width;

      // Return the calculated area
      return area;
   }
}

// Create an instance of the "Polygon" class and assign it to the "square" variable
Polygon square = new Polygon(4);

// Print the result of the "getSides" method using the "square" instance
// Expected output: 4
writeln(square.getSides());

// Create an array of side lengths for a triangle
int[] triangleLengths = [3, 4, 5];

// Create an instance of the "Polygon" class with the "triangleLengths" array as a parameter
// This will override the default value of the "sides" variable to be 3
Polygon triangle = new Polygon(triangleLengths);

// Print the result of the "getPerimeter" method using the "triangle" instance
// Expected output: 12
writeln(triangle.getPerimeter(triangleLengths));

// Print the result of the "getArea" method using the "triangle" instance and passing in the base and height of the triangle
// Expected output: 6
writeln(triangle.getArea(triangleLengths[0], triangleLengths[1]));