//Defining a template class for a binary search tree
struct BST(T)
{
    //Defining a nested struct for creating nodes in the tree
    struct Node
    {
        T value; //The value to be stored in the node
        Node* left; //Pointer to the left child node
        Node* right; //Pointer to the right child node
    }

    Node* root; //Pointer to the root node of the tree

    //Function to insert a value into the tree
    void insert(T val)
    {
        Node* node = new Node();
        node.value = val;
        if(root is null)
        {
            root = node;
        }
        else
        {
            Node* current = root;
            Node* parent;
            while(current)
            {
                parent = current;
                if(val < current.value)
                {
                    current = current.left;
                    if(current is null)
                    {
                        parent.left = node;
                    }
                }
                else
                {
                    current = current.right;
                    if(current is null)
                    {
                        parent.right = node;
                    }
                }
            }
        }
    }

    //Function to perform a binary search for a given value
    Node* search(T val)
    {
        Node* current = root;
        while(current and val != current.value)
        {
            if(val < current.value)
                current = current.left;
            else
                current = current.right;
        }
        return current;
    }
}

//Sample usage of the binary search tree template class
void main()
{
    BST!int tree; //Defining a tree that stores integers
    tree.insert(5); //Inserting a value into the tree
    tree.insert(10); //Inserting a value into the tree
    Node* result = tree.search(10); //Performing a binary search for the value 10
    if(result)
        writefln("Found node with value %s", result.value); //Printing the value of the found node
    else
        writefln("Value not found");
}