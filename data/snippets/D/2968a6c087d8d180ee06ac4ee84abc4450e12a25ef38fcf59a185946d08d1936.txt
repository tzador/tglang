/**
 * This is a complex code snippet in D Programming Language.
 * It includes structs, templates and arrays.
 * It uses recursion to perform a quicksort algorithm.
 */

import std.stdio; //import standard IO library

//Struct representing a single student record
struct Student
{
    string name;
    int age;
    int grade;
}

//Function template to swap two elements
void swap(T)(ref T a, ref T b)
{
    T temp = a;
    a = b;
    b = temp;
}

//Function template to do a quicksort on an array of students
void quicksort(T)(ref T[] arr, int left, int right)
{
    if (left < right)
    {
        int pivot = (left + right) / 2; //selecting pivot element
        int i = left;
        int j = right;

        while (i <= j)
        {
            while (arr[i].grade < arr[pivot].grade) i++; //finding element to swap from left
            while (arr[j].grade > arr[pivot].grade) j--; //finding element to swap from right

            if (i <= j)
            {
                swap(arr[i], arr[j]);
                i++;
                j--;
            }
        }

        quicksort(arr, left, j); //recursively calling quicksort on left partition
        quicksort(arr, i, right); //recursively calling quicksort on right partition
    }
}

//Code to initialize and sort an array of Student structs
void main()
{
    Student[] students = 
    [
        Student("John", 18, 90),
        Student("Jane", 17, 85),
        Student("Bob", 19, 80),
        Student("Samantha", 18, 95)
    ];

    quicksort(students, 0, students.length - 1); //calling quicksort on the array

    //printing sorted array
    foreach (student; students)
    {
        writefln("%s is %d years old and has a grade of %d", student.name, student.age, student.grade);
    }
}