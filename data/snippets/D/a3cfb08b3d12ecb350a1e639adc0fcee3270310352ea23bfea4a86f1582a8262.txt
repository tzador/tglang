import std.stdio;

/**
  This is a complex recursive function that calculates the Fibonacci sequence up to a given number, using dynamic programming for optimization.
  Params:
  - num: the number up to which the Fibonacci sequence should be calculated
  Return:
  - an array of all the Fibonacci numbers up to num
*/
ulong[] fibonacci(ulong num) {
    // base cases
    if (num == 0) return [];
    else if (num == 1) return [1];

    // initialize array
    ulong[] fibArr = new ulong[num + 1];
    // first 2 numbers are known
    fibArr[0] = 0;
    fibArr[1] = 1;

    // iterate through remaining numbers
    for (size_t i = 2; i <= num; i++) {
        // use cache to prevent unnecessary calculations
        fibArr[i] = fibArr[i - 1] + fibArr[i - 2];
    }

    // return array of Fibonacci numbers
    return fibArr;
}

// print out the first 10 Fibonacci numbers using our function
void main() {
    writeln("The first 10 Fibonacci numbers are:");
    ulong[] fibNumbers = fibonacci(10);
    foreach (num; fibNumbers) {
        writef("%s ", num);
    }
}