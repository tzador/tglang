import std.stdio;

// This function generates a list of prime numbers using the sieve of Eratosthenes algorithm
// Input: A positive integer n
// Output: An array of prime numbers up to n

int[] findPrimes(int n) {
    bool[] primeArray = new bool[n + 1].fill(true); // initialize array of booleans with true values
    primeArray[0] = primeArray[1] = false; // 0 and 1 are not prime numbers

    // iterate through each number in the array
    for (int i = 2; i * i <= n; i++) {
        // if the number is prime, mark all its multiples as not prime
        if (primeArray[i]) {
            for (int j = i * i; j <= n; j += i) {
                primeArray[j] = false;
            }
        }
    }

    int[] primeList;
    // iterate through the primeArray, adding each index that is marked as prime to the primeList
    for (int i = 0; i <= n; i++) {
        if (primeArray[i]) {
            primeList ~= i;
        }
    }

    return primeList;
}

void main() {
    int n = 100;
    int[] primes = findPrimes(n);
    writeln("List of prime numbers up to ", n, ": ", primes);
}