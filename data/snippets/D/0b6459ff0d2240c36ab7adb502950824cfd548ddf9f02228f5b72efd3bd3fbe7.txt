module complex;

/*
This module defines a complex number type and basic operations on complex numbers.
*/

/**
 * Represents a complex number with a real and imaginary part.
 */
struct Complex {
    real re; ///< The real part of the complex number
    real im; ///< The imaginary part of the complex number

    /**
     * Constructs a complex number with the given real and imaginary parts.
     * @param re the real part
     * @param im the imaginary part
     */
    this(real re, real im) {
        this.re = re;
        this.im = im;
    }

    /**
     * Returns the string representation of the complex number.
     * @returns the string representation
     */
    override string toString() {
        if(im >= 0) {
            return re.to!string ~ "+" ~ im.to!string ~ "i";
        } else {
            return re.to!string ~ im.to!string ~ "i";
        }
    }

    /**
     * Adds two complex numbers together.
     * @param c the complex number to add to this number
     * @returns the result of the addition
     */
    Complex opBinary(string op : "+")(Complex c) {
        return Complex(re + c.re, im + c.im);
    }

    /**
     * Multiply a complex number by a scalar.
     * @param d the scalar to multiply by
     * @returns the result of the multiplication
     */
    Complex opBinary(string op : "*")(real d) {
        return Complex(re * d, im * d);
    }

    /**
     * Multiplies two complex numbers together.
     * @param c the complex number to multiply by
     * @returns the result of the multiplication
     */
    Complex opBinary(string op : "*")(Complex c) in {
        auto temp = c.re;
        c.re = -c.im;
        c.im = temp;
    } body {
        return Complex(re * c.re - im * c.im, re * c.im + im * c.re);
    }
}

/**
 * Calculates the absolute value of a complex number.
 * @param c the complex number to calculate the absolute value of
 * @returns the absolute value
 */
double abs(Complex c) {
    return sqrt(c.re * c.re + c.im * c.im);
}

/**
 * Calculates the argument of a complex number.
 * @param c the complex number to calculate the argument of
 * @returns the argument
 */
double arg(Complex c) {
    return atan2(c.im, c.re);
}