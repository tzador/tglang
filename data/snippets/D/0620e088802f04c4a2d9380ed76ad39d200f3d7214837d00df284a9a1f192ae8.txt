/* This is a complex sorting algorithm implemented in D programming language */

/* Function to swap two elements in an array */
void swap(T)(T[] arr, int i, int j) {
    T temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

/* Partition function for quicksort algorithm */
int partition(T)(T[] arr, int low, int high) {
    T pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr, i, j);
        }
    }
    swap(arr, i + 1, high);
    return i + 1;
}

/* Quicksort algorithm implementation */
void quickSort(T)(T[] arr, int low, int high) {
    if (low < high) {
        int pivot = partition(arr, low, high);
        quickSort(arr, low, pivot - 1);
        quickSort(arr, pivot + 1, high);
    }
}

/* Example usage */
int[] arr = [5, 1, 8, 2, 7, 3];
quickSort(arr, 0, arr.length - 1);
/* Output: [1, 2, 3, 5, 7, 8] */