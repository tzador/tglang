/* This code snippet generates a doubly-linked list 
 * implementation in D Programming Language.
 */

// Define a class for a single node in the list
class Node {
    Node previous; // reference to the previous node
    Node next; // reference to the next node
    T data; // data stored in the node, can be of any type

    // constructor that sets the data for the node
    this(T value) {
        this.data = value;
    }
}

// Define a class for the doubly-linked list
class DoublyLinkedList {
    private Node head; // reference to the head (first) node in the list
    private Node tail; // reference to the tail (last) node in the list
    private int size; // current size of the list

    // constructor that initializes an empty list
    this() {
        this.size = 0;
    }

    /* Method to add a new node to the end of the list
     * Params: value - the data to be stored in the new node
     */
    void insert(T value) {
        // create a new node with the given value
        Node newNode = new Node(value);

        // if list is empty, set the head and tail to the new node
        if (head is null) {
            head = newNode;
            tail = newNode;
        // else, add the new node to the end of the list 
        } else {
            // link the new node to the current tail
            newNode.previous = tail;
            // set the current tail's next node to the new node
            tail.next = newNode;
            // set the tail to the new node
            tail = newNode;
        }

        // increment the size of the list
        size++;
    }

    /* Method to delete a node from the list
     * Params: value - the data of the node to be deleted
     * Returns: true if the node is found and deleted, false if not found
     */
    bool remove(T value) {
        // start at the head of the list
        Node current = head;

        // traverse the list until the end is reached or the node is found
        while (!current is null) {
            // if the value of the current node matches the given value,
            // remove the node and update the references of surrounding nodes
            if (current.data == value) {
                // if the node to be deleted is the head, update the head reference
                if (current == head) {
                    head = current.next;
                }
                // if the node to be deleted is the tail, update the tail reference
                if (current == tail) {
                    tail = current.previous;
                }
                // update the references of the surrounding nodes
                if (current.previous) {
                    current.previous.next = current.next;
                }
                if (current.next) {
                    current.next.previous = current.previous;
                }

                // decrement the size of the list
                size--;
                
                return true;
            }

            // move to the next node
            current = current.next;
        }

        // node not found, return false
        return false;
    }

    /* Method to get the current size of the list
     * Returns: the current size of the list
     */
    int getSize() {
        return this.size;
    }
}

// Example usage:
// create a new instance of the doubly-linked list
DoublyLinkedList list = new DoublyLinkedList();

// add nodes to the list
list.insert("Apple");
list.insert("Banana");
list.insert("Cherry");

// print size of the list
println("Current size of list: " ~ list.getSize());

// remove "Banana" from the list
list.remove("Banana");

// print size of the list after removing node
println("New size of list: " ~ list.getSize());

// Output:
// Current size of list: 3
// New size of list: 2

// The list now contains "Apple" and "Cherry".