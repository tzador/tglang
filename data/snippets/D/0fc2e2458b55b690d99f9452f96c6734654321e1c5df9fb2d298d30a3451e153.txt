// Define a template function
template mergeSort(alias less, T)(ref T[] arr) {
    if(arr.length <= 1) {
        return;
    }

    auto mid = arr.length / 2;

    // Sorting the left half of the array
    mergeSort!(less)(arr[0 .. mid]);

    // Sorting the right half of the array
    mergeSort!(less)(arr[mid .. $]);

    // Merging the sorted halves
    merge!(less)(arr, mid);
}

// Define a function to merge two sorted subarrays
void merge(alias less, T)(ref T[] arr, size_t mid) {
    auto left = arr[0 .. mid]; // First subarray
    auto right = arr[mid .. $]; // Second subarray

    size_t i = 0, j = 0, k = 0;

    while(i < left.length && j < right.length) {
        // Compare and merge elements from the left and right subarrays
        if(less(left[i], right[j])) {
            arr[k++] = left[i++];
        } else {
            arr[k++] = right[j++];
        }
    }

    // Add remaining elements from the left subarray
    while(i < left.length) {
        arr[k++] = left[i++];
    }

    // Add remaining elements from the right subarray
    while(j < right.length) {
        arr[k++] = right[j++];
    }
}

// Example usage
int[] arr = [3, 2, 5, 4, 1];
mergeSort!(a, b => a < b)(arr);
/* Output: [1, 2, 3, 4, 5] */