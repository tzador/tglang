/** 
 * This is a complex and long code snippet in D programming language.
 * It defines a custom struct "Complex" that represents a complex number with real and imaginary parts.
**/

struct Complex {
    // The real and imaginary parts of the complex number
    double real;
    double imag;

    /**
     * This is the constructor for the Complex struct.
     * It initializes the real and imaginary parts of the complex number.
     * Params:
     * - r: The real part of the complex number
     * - i: The imaginary part of the complex number
     * Return:
     * - A new Complex struct with initialized real and imaginary parts
    **/
    this(double r, double i) {
        real = r;
        imag = i;
    }

    /**
     * This is a function that returns the magnitude of the complex number.
     * Return:
     * - A double representing the magnitude of the complex number
    **/
    double magnitude() {
        return sqrt(real * real + imag * imag);
    }

    /**
     * This is an operator overload for adding two complex numbers.
     * Params:
     * - other: The other Complex struct to be added
     * Return:
     * - A new Complex struct with the sum of the real and imaginary parts of the two given complex numbers
    **/
    Complex opBinary(string op)(Complex other) if (op == "+") {
        return Complex(real + other.real, imag + other.imag);
    }

    /**
     * This is an operator overload for multiplying two complex numbers.
     * Params:
     * - other: The other Complex struct to be multiplied
     * Return:
     * - A new Complex struct with the product of the real and imaginary parts of the two given complex numbers
    **/
    Complex opBinary(string op)(Complex other) if (op == "*") {
        return Complex(real * other.real - imag * other.imag, real * other.imag + imag * other.real);
    }

    /**
     * This is a function to display the complex number in a user-friendly format.
     * Return:
     * - A string representing the complex number in the form "a + bi"
    **/
    override string toString() {
        return format("%s + %si", real, imag);
    }
}

// Create two complex numbers
Complex num1 = Complex(5, 7);
Complex num2 = Complex(-2, 9);

// Add the two complex numbers and print the result
Complex sum = num1 + num2;
writeln(sum);

// Multiply the two complex numbers and print the result
Complex product = num1 * num2;
writeln(product);