//This code snippet creates a function called 'mergeSort' that takes in an array of integers and returns a sorted array using the merge sort algorithm.

//Creating the helper function, merge, that merges two subarrays together to form a sorted array
void merge(int[] arr, int low, int mid, int high) {
    //Calculating the sizes of the subarrays
    int n1 = mid - low + 1;
    int n2 = high - mid;

    //Creating two temporary arrays to store the left and right subarrays
    int[] L = new int[n1];
    int[] R = new int[n2];

    //Copying data from the original array into the temporary arrays
    foreach(int i; 0..n1)
        L[i] = arr[low + i];
    foreach(int j; 0..n2)
        R[j] = arr[mid + 1 + j];

    //Initializing variables for traversing through the temporary arrays
    int i = 0; //for L
    int j = 0; //for R

    //Initializing variable for traversing through the original array
    int k = low; 

    //Merging the two subarrays while comparing and sorting elements 
    while(i < n1 && j < n2) {
        if(L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    //Copying remaining elements from left subarray if any
    while(i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    //Copying remaining elements from right subarray if any
    while(j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

//Creating the main function for merge sort
int[] mergeSort(int[] arr, int low, int high) {
    if(low < high) {
        //Calculating the midpoint of the array
        int mid = low + (high - low) / 2;

        //Recursively calling mergeSort on the left and right subarrays
        mergeSort(arr, low, mid);
        mergeSort(arr, mid + 1, high);

        //Merging the sorted subarrays together
        merge(arr, low, mid, high);
    }
    //Returning the sorted array 
    return arr;
}

//Example Usage:
int[] arr = [5, 2, 8, 10, 3, 1];
int[] sortedArr = mergeSort(arr, 0, arr.length - 1);
/* sortedArr is now [1, 2, 3, 5, 8, 10] */