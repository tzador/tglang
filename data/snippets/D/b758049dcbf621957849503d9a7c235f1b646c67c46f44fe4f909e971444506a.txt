//Creates a function that recursively calculates the factorial of a given number
int factorial(int number)
{
    if(number == 1 || number == 0)
        return 1;
    else
        return number * factorial(number - 1);
}
//Defines a struct called "Rectangle" with two integer fields for width and height
struct Rectangle
{
    int width;
    int height;
}
//Initializes a new instance of Rectangle and assigns values to the width and height fields
Rectangle myRectangle;
myRectangle.width = 10;
myRectangle.height = 5;
//Uses a template to create a function that checks if a given type is a built-in integer
template isBuiltInInteger(T)
{
    //Checks if type T is equal to an int, long, or short
    static if(is(T == int) || is(T == long) || is(T == short))
        enum isBuiltInInteger = true;
    else
        enum isBuiltInInteger = false;
}
//Uses an alias to represent a pointer to a function that takes a float and returns an int
alias int function(float) FloatToInt;
//Defines an array with 5 elements initialized to a sequence of values
int[5] numbers = [1, 2, 3, 4, 5];
//Prints each element in the array with its index using a foreach loop
foreach(index, value; numbers)
{
    writeln("Element at index ", index, " is ", value);
}