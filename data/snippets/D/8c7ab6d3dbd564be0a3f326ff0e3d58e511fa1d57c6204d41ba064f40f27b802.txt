/**
 * This is a multi-line comment in D Programming Language.
*/

import std.stdio;

// Define a struct to represent a point in 3D space
struct Point3D {
    float x;
    float y;
    float z;
}

// A quicksort algorithm in D
void quicksort(T)(T[] array, int low, int high) {
    // Base case: array is empty or only has one element
    if (low >= high) {
        return;
    }

    // Pick pivot as the middle element
    T pivot = array[(low + high) / 2];

    // Partition the array into two halves
    int i = low;
    int j = high;

    while (i <= j) {
        // Find element on the left side that should be on the right
        while (array[i] < pivot) {
            i++;
        }

        // Find element on the right side that should be on the left
        while (array[j] > pivot) {
            j--;
        }

        // Swap the elements found in the previous steps
        if (i <= j) {
            T temp = array[i];
            array[i] = array[j];
            array[j] = temp;
            i++;
            j--;
        }
    }

    // Recursively call quicksort on the two partitions
    quicksort(array, low, j);
    quicksort(array, i, high);
}

void main() {
    // Create an array of points in 3D space
    Point3D[] points = [
        Point3D(1.5, 2.3, 0.8),
        Point3D(3.2, 1.4, 5.6),
        Point3D(0.2, 4.1, 3.2),
        Point3D(2.7, 3.9, 1.1)
    ];

    // Sort the array of points based on their x coordinate
    quicksort!(a, b => a.x < b.x)(points, 0, points.length - 1);

    // Print out the sorted array
    foreach (point; points) {
        writeln(point.x, " ", point.y, " ", point.z);
    }
}