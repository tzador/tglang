import std.stdio;
import std.conv;

// A struct representing a custom complex number type
struct Complex {
    double real;
    double imag;
}

// An alias for a 2D array of Complex numbers
alias ComplexMatrix = Complex[2][2];

// A function to multiply two matrices of Complex numbers
// and return the result as a ComplexMatrix
ComplexMatrix multiplyMatrices(ComplexMatrix a, ComplexMatrix b) {
    ComplexMatrix result;

    // Loop through each row in matrix a
    for(int rowA = 0; rowA < a.length; rowA++) {
        // Loop through each column in matrix b
        for(int colB = 0; colB < b[0].length; colB++) {
            result[rowA][colB] = 0.0;

            // Loop through each element in the current row of matrix a
            for(int i = 0; i < a[rowA].length; i++) {
                // Multiply the corresponding elements in the current row of a
                // and column of b, then add to the current result element
                result[rowA][colB] += a[rowA][i].real * b[i][colB].real - a[rowA][i].imag * b[i][colB].imag;
                result[rowA][colB].imag += a[rowA][i].real * b[i][colB].imag + a[rowA][i].imag * b[i][colB].real;
            }
        }
    }

    return result;
}

void main() {
    ComplexMatrix a = [[Complex(2,3), Complex(1,2)], [Complex(4,6), Complex(7,8)]];
    ComplexMatrix b = [[Complex(3,2), Complex(4,5)], [Complex(3,8), Complex(9,1)]];

    // Print the original matrices
    writeln("Matrix a:");
    writeln(a);
    writeln("Matrix b:");
    writeln(b);

    // Multiply the matrices
    ComplexMatrix result = multiplyMatrices(a, b);

    // Print the result
    writeln("Result:");
    writeln(result);
}