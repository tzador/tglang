enum Fibonacci(alias fib, int n)
{
    // This enum represents the first n numbers in the Fibonacci sequence,
    // where n is set by the user.
    // The alias parameter allows for choosing between the iterative or recursive
    // approach for calculating the numbers.

    static if (n < 1)
    {
        // If n is less than 1, an empty tuple is returned.
        alias Result = Tuple!();
    }
    else static if (n == 1)
    {
        // If n is 1, a tuple containing only '1' is returned.
        alias Result = Tuple!(1);
    }
    else
    {
        // Otherwise, a tuple is created with the first two numbers of the sequence
        // and recursively adds the rest of the numbers using the chosen approach.
        // The numbers are stored in the tuple as they are calculated,
        // avoiding any unnecessary calculations.
        alias Result = Tuple!(1, 1, (fib!(n-1) + fib!(n-2)));
    }

    // The enum value is used to access the tuple elements as if they were
    // regular enum members.
    // This creates a simple and flexible way to use the generated sequence.
    int values[n]()
    {
        // This function returns an array with the first n values in the sequence.
        // It uses static foreach to iterate through the tuple and fill the array.
        static foreach (i, val; Result)
        {
            values[i] = val;
        }
        return values;
    }
}

// Example usage:
// Aliasing the enum with the iterative implementation of the Fibonacci sequence,
// and requesting the first 5 values.
alias Fib = Fibonacci!(fibIterative, 5);

// Accessing the tuple elements using the enum value.
assert(Fib.values[0] == 1);
assert(Fib.values[1] == 1);
assert(Fib.values[2] == 2);
assert(Fib.values[3] == 3);
assert(Fib.values[4] == 5);