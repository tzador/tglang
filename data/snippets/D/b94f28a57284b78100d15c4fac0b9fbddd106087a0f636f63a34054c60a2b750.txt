import std.algorithm;
import std.random;

// A simple struct to represent a person
struct Person
{
    string name;
    int age;
    string address;
    int phoneNumber;
}

// A function to generate random names
string[] generateNames(int numNames)
{
    string[] names = ["John", "Mary", "Alex", "Emily", "James"];

    // Shuffle the names array
    names = names.cycle.take(numNames).array;

    // Sort the names in a random order
    randomShuffle(names);

    return names;
}

// A function to generate random addresses
string[] generateAddresses(int numAddresses)
{
    string[] addresses = ["123 Main St", "456 Park Ave", "789 Elm St", "10 Oak Ln", "11 Maple Ave"];

    // Shuffle the addresses array
    addresses = addresses.cycle.take(numAddresses).array;

    // Sort the addresses in a random order
    randomShuffle(addresses);

    return addresses;
}

// A function to generate random phone numbers
int[] generatePhoneNumbers(int numPhoneNumbers)
{
    int[] phoneNumbers = [111-111-1111, 222-222-2222, 333-333-3333, 444-444-4444, 555-555-5555];

    // Shuffle the phone numbers array
    phoneNumbers = phoneNumbers.cycle.take(numPhoneNumbers).array;

    // Sort the phone numbers in a random order
    randomShuffle(phoneNumbers);

    return phoneNumbers;
}

void main()
{
    // Generate 10 random people
    int numPeople = 10;
    Person[] people;

    // Generate random names, addresses, and phone numbers for each person
    string[] names = generateNames(numPeople);
    string[] addresses = generateAddresses(numPeople);
    int[] phoneNumbers = generatePhoneNumbers(numPeople);

    // Create and add Person structs to the people array
    for (int i = 0; i < numPeople; i++)
    {
        Person person;
        person.name = names[i];
        person.age = uniform(20, 50);
        person.address = addresses[i];
        person.phoneNumber = phoneNumbers[i];
        people ~= person;
    }

    // Sort the people by age in descending order
    people.sort!((a, b) => b.age - a.age);

    // Print out the list of people
    writeln("List of people:");
    foreach (person; people)
    {
        writeln("- Name: ", person.name);
        writeln("  Age: ", person.age);
        writeln("  Address: ", person.address);
        writeln("  Phone Number: ", person.phoneNumber, "\n");
    }
}