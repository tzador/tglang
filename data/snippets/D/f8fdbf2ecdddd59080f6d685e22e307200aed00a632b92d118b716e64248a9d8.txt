// This code snippet is a simple implementation of a priority queue using a Min Heap in D Programming Language
class MinHeap(T)
{
    // We use an array to store the elements in the heap
    T[] heap;

    // Constructor to initialize the heap
    this()
    {
        heap = new T[1];
        heap[0] = T.init;
    }

    // Helper function to compare two elements
    // Returns true if first element is smaller than the second
    bool less(T a, T b)
    {
        return a < b;
    }

    // Helper function to swap two elements in the heap
    void swap(int i, int j)
    {
        T temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    // Helper function to restore heap invariant
    // after an element is inserted or deleted
    void heapify(int i)
    {
        int smallest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        // Check if left child is smaller than the current node
        if (left < heap.length && less(heap[left], heap[smallest]))
        {
            smallest = left;
        }

        // Check if right child is smaller than the current node
        if (right < heap.length && less(heap[right], heap[smallest]))
        {
            smallest = right;
        }

        // If the smallest element is not the current node
        // then swap and recursively call heapify on the affected sub-tree
        if (smallest != i)
        {
            swap(i, smallest);
            heapify(smallest);
        }
    }

    // Function to insert an element into the heap
    void insert(T element)
    {
        // Increase the size of the heap by 1
        heap.length++;

        // Insert the element at the end of the heap
        heap[heap.length - 1] = element;

        // Restore heap invariant
        int index = heap.length - 1;
        while (index != 0 && less(heap[index], heap[(index - 1) / 2]))
        {
            swap(index, (index - 1) / 2);
            index = (index - 1) / 2;
        }
    }

    // Function to get the smallest element in the heap
    T getMin()
    {
        return heap[0];
    }

    // Function to delete the smallest element in the heap
    void deleteMin()
    {
        // If the heap is empty, do nothing
        if (heap.length == 0)
        {
            return;
        }

        // Replace the root with the last element
        swap(0, heap.length - 1);

        // Remove the last element from the heap
        heap.length--;

        // Restore heap invariant
        heapify(0);
    }
}

// Example usage:
void main()
{
    // Create a new MinHeap with type int
    MinHeap!int heap;

    // Insert elements into the heap
    heap.insert(4);
    heap.insert(9);
    heap.insert(2);
    heap.insert(7);

    // Output: 2
    writeln(heap.getMin());

    // Delete the smallest element
    heap.deleteMin();

    // Output: 4
    writeln(heap.getMin());
}