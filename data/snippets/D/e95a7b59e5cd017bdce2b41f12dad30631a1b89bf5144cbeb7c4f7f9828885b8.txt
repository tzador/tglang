/* This is a comment */

import std.stdio; // Importing the standard D input/output library

enum COLOR { // Defining an enum type for colors
    RED,
    BLUE,
    GREEN
}

class Shape { // Defining a base Shape class
    private double area; // A private member variable

    // A constructor with parameters and a body
    this(double base, double height) {
        area = base * height / 2;
    }

    // A getter function for the area member variable
    double getArea() {
        return area;
    }

    // A virtual function to calculate the perimeter, to be overridden in child classes
    virtual double calcPerimeter() {
        return 0.0;
    }

    // A static function to calculate the area of a shape with given base and height
    static double calcArea(double base, double height) {
        return base * height / 2;
    }
}

class Triangle : Shape { // Defining a child Triangle class that inherits from Shape
    private double sideA;
    private double sideB;
    private double sideC;

    // A constructor with parameters and a body
    this(double a, double b, double c) {
        sideA = a;
        sideB = b;
        sideC = c;
    }

    // Overriding the calcPerimeter function from the base class
    override double calcPerimeter() {
        return sideA + sideB + sideC;
    }
}

void main() { // Main function, the entry point of the program
    Triangle t = new Triangle(3, 4, 5); // Creating a new Triangle object with side lengths 3, 4, and 5
    writefln("The area of the triangle is %f", t.getArea()); // Printing the area of the triangle using the getter function

    // Using the static function to calculate the area of a triangle with base 6 and height 8
    writefln("The area of another triangle is %f", Shape.calcArea(6, 8));

    string color; // Declaring a string variable
    color = "RED"; // Assigning a value to the variable

    // Using a switch statement to check different color cases and print corresponding enum value
    switch(color) {
        case "RED":
            writeln(COLOR.RED);
            break;
        case "BLUE":
            writeln(COLOR.BLUE);
            break;
        case "GREEN":
            writeln(COLOR.GREEN);
            break;
        default:
            writeln("Not a valid color.");
    }
}