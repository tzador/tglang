/* This is a complex code snippet in D Programming Language that uses an array of structs and implements a sorting algorithm */

import std.stdio; // importing standard input/output library

struct Person {     // creating a struct to represent a person with name and age attributes
    string name;
    int age;
}

void swap(Person[] arr, int i, int j) { // function to swap two elements in an array
    Person temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

int partition(Person[] arr, int low, int high) { // function to partition the array for quick sort
    Person pivot = arr[low];
    int i = low - 1;
    int j = high + 1;

    while (true) {
        do {
            i++;
        } while (arr[i].age < pivot.age);

        do {
            j--;
        } while (arr[j].age > pivot.age);

        if (i >= j) {
            return j;
        }

        swap(arr, i, j);
    }
}

void quickSort(Person[] arr, int low, int high) { // function to perform quick sort on the array
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi);
        quickSort(arr, pi + 1, high);
    }
}

void main() {
    Person[] people = [Person("John", 25), Person("Alice", 30), Person("Bob", 20)]; // initializing an array of person structs

    quickSort(people, 0, people.length - 1); // calling the quickSort function on the array

    foreach (Person person; people) { // iterating through the sorted array and printing the elements
        writeln(person.name, " - ", person.age);
    }
}