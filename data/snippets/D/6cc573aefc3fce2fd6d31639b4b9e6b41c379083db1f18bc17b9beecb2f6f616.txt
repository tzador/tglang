struct Vector(T){
    T[] data;
    uint size;

    this(T[] array){
        data = array;
        size = array.length;
    }

    T opIndex(size_type index) const{
        return data[index];
    }

    Vector opSlice(size_type from, size_type to) const{
        return Vector(data[from .. to]);
    }

    auto opUnary(string op)(){ 
        // define unary operators
        if (op == "++"){ 
            return Vector(++data);
        }
        else if (op == "--"){
            return Vector(--data);
        }
    }

    auto opBinary(string op)(in Vector rhs){ 
        // define binary operators
        if (op == "[]"){ 
            return Vector(data[rhs.size]);
        }
        else if (op == "+"){
            return Vector(data + rhs.data);
        }
        else if (op == "-"){
            return Vector(data - rhs.data);
        }
    }

    void print(){
        // print the vector in a formatted way
        for (int i = 0; i < size; i++){
            writefln("Element[%d]: %s", i, data[i]);
        }
    }
}

void main(){
    // create a vector of strings
    Vector!(string) vec = ["hello", "world", "!"];

    // print the vector
    vec.print();

    // access individual elements using opIndex
    writeln(vec[0]); // output: "hello"

    // use opSlice to get a portion of the vector
    auto slicedVec = vec[1 .. 2];

    // use unary operators
    slicedVec++; // increment all elements in sliced vector
    slicedVec.print(); // output: Element[0]: world
    //                     Element[1]: !

    // use binary operators
    Vector!(string) newVec = vec + slicedVec; // combine vec and slicedVec
    newVec.print(); // output: Element[0]: hello
    //                     Element[1]: world
    //                     Element[2]: world
    //                     Element[3]: !

    // use built-in array methods with Vector type
    writeln("Vector size: ", newVec.size); // output: "Vector size: 4"
}