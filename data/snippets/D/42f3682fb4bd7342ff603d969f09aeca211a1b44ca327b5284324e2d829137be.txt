// Define template function for finding the maximum element in a given array
template max(T)(T[] arr) {
    static if (arr.length == 0) {
        return T.init;
    } else static if (arr.length == 1) {
        return arr[0];
    } else {
        T max = arr[0];
        foreach (i; 0 .. arr.length) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }
}

// Define a generic struct that can hold any type
struct Box(T) {
    // Define a member variable that can hold a value of type T
    T value;

    // Construct a new Box object with a given value
    this(T val) {
        this.value = val;
    }

    // Define a template function that returns the type of the value stored in the Box
    T returnType() {
        return T;
    }

    // Define a method that changes the value stored in the Box
    void changeValue(T newVal) {
        this.value = newVal;
    }

    // Define a template function that converts the value stored in the Box to a string
    string toString() {
        return this.value.to!string;
    }
}

// Instantiate a Box object with an int value
auto intBox = Box!int(10);

// Instantiate a Box object with a string value
auto strBox = Box!string("Hello!");

// Print the maximum value between the two Box objects using the max template function
writeln(max(intBox.value, strBox.value));