import std.stdio; //imports the standard input/output module

alias Op = int; //creates an alias for the 'Op' type, which is an integer

enum Operand : Op //defines an enum 'Operand' that inherits from 'Op'
{
    ADD = 0, //sets the value of ADD to 0
    SUB = 1, //sets the value of SUB to 1
    MUL = 2, //sets the value of MUL to 2
    DIV = 3 //sets the value of DIV to 3
};

struct Expression //defines a struct 'Expression' to represent mathematical expressions
{
    Operand op; //member variable 'op' of type 'Operand'
    Op left; //member variable 'left' of type 'Op'
    Op right; //member variable 'right' of type 'Op'

    Op evaluate() //defines a function 'evaluate' to calculate the result of the expression
    {
        switch(op) //uses a switch statement to determine the operation to perform
        {
            case Operand.ADD: return left + right; //if op is ADD, perform addition
            case Operand.SUB: return left - right; //if op is SUB, perform subtraction
            case Operand.MUL: return left * right; //if op is MUL, perform multiplication
            case Operand.DIV: return left / right; //if op is DIV, perform division
        }
    }
}

void main() //defines the main function
{
    auto expr = Expression(Operand.ADD, 5, 10); //creates an expression with ADD as the operation, and 5 and 10 as operands
    Op result = expr.evaluate(); //calls the evaluate function on expr and stores the result in 'result'
    writeln("Result of expression: ", result); //prints the result of the expression
}