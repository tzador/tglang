// This code snippet demonstrates the use of templates in D Programming Language

import std.stdio;

// Define a template function
template reverseArray(T)(T[] arr) {
    // Create a temporary array to store the reversed elements
    T[] reversedArr;
    // Loop through the input array in reverse order
    foreach (i; 0..arr.length) {
        // Append the elements to the temporary array in reverse order
        reversedArr ~= arr[arr.length - 1 - i];
    }
    // Return the reversed array
    return reversedArr;
}

// Define an array of integers
int[] numbers = [1, 2, 3, 4, 5];

// Print the input array
writeln("Input array: ", numbers);

// Call the template function with the input array
int[] reversedNumbers = reverseArray(numbers);

// Print the reversed array
writeln("Reversed array: ", reversedNumbers);

// Define an array of strings
string[] words = ["apple", "banana", "orange", "grape", "pineapple"];

// Print the input array
writeln("Input array: ", words);

// Call the template function with the input array
string[] reversedWords = reverseArray(words);

// Print the reversed array
writeln("Reversed array: ", reversedWords);

// Output:
// Input array: [1, 2, 3, 4, 5]
// Reversed array: [5, 4, 3, 2, 1]
// Input array: ["apple", "banana", "orange", "grape", "pineapple"]
// Reversed array: ["pineapple", "grape", "orange", "banana", "apple"]