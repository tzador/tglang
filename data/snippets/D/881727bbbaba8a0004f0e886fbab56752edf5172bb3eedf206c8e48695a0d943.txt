struct Complex(int T)
{
    // struct to represent complex numbers with generic data type

    T real;
    T imag;

    this(T real, T imag) // Constructor
    {
        this.real = real;
        this.imag = imag;
    }

    Complex add(Complex c)
    {
        /* adds two complex numbers and returns a new complex number object */
        return Complex(this.real + c.real, this.imag + c.imag);
    }

    Complex multiply(Complex c)
    {
        /* multiplies two complex numbers and returns a new complex number object */
        T newReal = this.real * c.real - this.imag * c.imag;
        T newImag = this.real * c.imag + this.imag * c.real;
        return Complex(newReal, newImag);
    }

    T magnitude()
    {
        /* calculates the magnitude of the complex number */
        return sqrt(this.real * this.real + this.imag * this.imag);
    }
}

// example usage:

void main()
{
    // create two complex numbers with type 'int'
    Complex!(int) c1 = Complex!(int)(2, 3);
    Complex!(int) c2 = Complex!(int)(4, -5);

    // add the two complex numbers
    Complex!(int) sum = c1.add(c2);
    // multiply the two complex numbers
    Complex!(int) product = c1.multiply(co);

    // print the magnitude of the sum
    writeln("Magnitude of the sum: ", sum.magnitude());
    // print the magnitude of the product
    writeln("Magnitude of the product: ", product.magnitude());
}