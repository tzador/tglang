/**
 * This is a complex function that takes in an array of strings
 * and outputs a tuple containing the shortest and longest string.
 * @param inputArray An array of strings to be processed.
 * @return A tuple containing the shortest and longest string.
 */
auto shortestAndLongest(string[] inputArray) {
    // Initialize variables
    string shortestString = inputArray[0];
    string longestString = inputArray[0];

    // Loop through input array, comparing strings
    foreach (string str; inputArray[1..$]) {
        // Check if current string is shorter than shortest string
        if (str.length < shortestString.length) {
            // If so, update shortest string
            shortestString = str;
        // Otherwise, check if current string is longer than longest string
        } else if (str.length > longestString.length) {
            // If so, update longest string
            longestString = str;
        }
    }

    // Return tuple with shortest and longest string
    return tuple(shortestString, longestString);
}

// Example input array
string[] input = ["apple", "banana", "carrot", "dragonfruit", "eggplant"];

// Call function and store result in tuple
auto result = shortestAndLongest(input);
// Print shortest and longest string
writeln("Shortest string: ", result[0]); // Output: Shortest string: apple
writeln("Longest string: ", result[1]); // Output: Longest string: dragonfruit