import std.stdio;

// Define a class with generic type T
class GenericClass(T) {
    // Define a private property of type T
    private T value;

    // Define a constructor that takes in a value of type T
    this(T value) {
        this.value = value;
    }

    // Define a method that returns the value of type T
    T getValue() {
        return value;
    }
}

// Define a function that takes in a generic class as a parameter
void printValue(GenericClass!T genericClass) {
    // Retrieve the value from the generic class and print it
    writeln("Value: ", genericClass.getValue());
}

// Create an instance of the GenericClass with type "string"
GenericClass!string stringClass = new GenericClass!string("Hello World");

// Call the printValue function with the stringClass as the argument
printValue(stringClass);

// Output:
// Value: Hello World