//A function that implements quicksort algorithm
void quickSort(T)(T[] arr, int low, int high) {
    //if low is less than high, continue sorting
    if (low < high) {
        //Assign the pivot as the last element in the array
        T pivot = arr[high];
        int i = (low - 1);
        //begin partitioning
        for (int j = low; j < high; j++) {
            //if current element is smaller than pivot
            if (arr[j] < pivot) {
                i++;
                //swap arr[i] with arr[j]
                T temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        //place pivot in its correct position
        T temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        //recursively call quickSort on partitions
        quickSort(arr, low, i);
        quickSort(arr, i + 2, high);
    }
}
//Example usage of quickSort function
int[] arr = [5, 1, 8, 2, 4, 6, 3];
int low = 0;
int high = arr.length - 1;
quickSort(arr, low, high);