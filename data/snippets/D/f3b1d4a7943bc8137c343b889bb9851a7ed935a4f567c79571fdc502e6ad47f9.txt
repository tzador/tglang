/**
 * This is a complex sorting algorithm in D programming language
 */

import std.algorithm.iteration; // Imports the standard algorithm iteration module

void quickSort(T)(ref T[] array)
{
    if (array.empty) return; // If the array is empty, return without sorting

    auto pivot = array[0]; // Sets the first element of the array as the pivot
    auto front = filter!((element) => element < pivot, array); // Creates a slice of elements less than the pivot
    auto middle = filter!((element) => element == pivot, array); // Creates a slice of elements equal to the pivot
    auto end = filter!((element) => element > pivot, array); // Creates a slice of elements greater than the pivot

    quickSort(front); // Recursively calls quickSort on the front slice
    quickSort(end); // Recursively calls quickSort on the end slice

    uint index = 0;

    foreach (element; front) { // Loops through all elements in the front slice
        array[index++] = element; // Assigns each element to the beginning of the array
    }
    foreach (element; middle) { // Loops through all elements in the middle slice
        array[index++] = element; // Assigns each element to the next index in the array
    }
    foreach (element; end) { // Loops through all elements in the end slice
        array[index++] = element; // Assigns each element to the end of the array
    }
}

void main()
{
    int[] numbers = [8, 4, 6, 2, 7, 9, 1, 3, 5]; // Creates an array of numbers
    quickSort(numbers); // Calls the quickSort function to sort the numbers
    writeln(numbers); // Outputs the sorted numbers
}