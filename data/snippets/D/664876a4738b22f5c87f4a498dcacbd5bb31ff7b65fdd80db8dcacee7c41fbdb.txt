/* This is a complex and long code snippet written in D programming language.
   It implements a simple sorting algorithm called bubble sort. */

import std.stdio; // Importing standard input/output library

/* Function to perform bubble sort on an array */
void bubbleSort(T)(ref T[] array) {
    int n = array.length; // Storing the length of the array
    bool swapped = true; // Flag to check if any swaps have been made
    while (swapped) { // Looping until no swaps are made
        swapped = false; // Setting the flag to false at the start of each loop
        for (int i = 1; i < n; i++) { // Looping through the array
            if (array[i - 1] > array[i]) { // Checking if current element is greater than the next element
                T temp = array[i]; // Swapping the elements using a temporary variable
                array[i] = array[i - 1]; 
                array[i - 1] = temp;
                swapped = true; // Setting the flag to true if a swap is made
            }
        }
    }
}

void main() {
    // Creating an unsorted array of integers
    int[] unsortedArray = [5, 3, 1, 4, 2];
    // Printing the unsorted array
    writeln("Unsorted array: ", unsortedArray);
    // Sorting the array using bubble sort
    bubbleSort(unsortedArray);
    // Printing the sorted array
    writeln("Sorted array: ", unsortedArray);
}

/* Output:
Unsorted array: [5, 3, 1, 4, 2]
Sorted array: [1, 2, 3, 4, 5]
*/