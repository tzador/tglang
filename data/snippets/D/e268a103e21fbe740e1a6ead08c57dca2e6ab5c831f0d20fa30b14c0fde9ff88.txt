/* This is a complex code snippet in the D Programming Language that implements a binary search tree data structure.

The code starts by defining a Node struct with a key, value, and left and right child pointers. Next, a Tree class is defined with various methods for inserting, deleting, and searching for nodes in the tree. This implementation uses recursion and a helper function to traverse the tree and perform operations.

Finally, a main function is defined to instantiate a Tree object and perform various operations on it. */

struct Node {
    int key;
    int value;
    Node* left;
    Node* right;
}

class Tree {
    private Node* root;

    this() {
        root = null;
    }

    void insert(int key, int value) {
        root = _insert(root, key, value);
    }

    Node* _insert(Node* node, int key, int value) {
        if (node == null) {
            return new Node(key, value, null, null);
        } else if (key < node.key) {
            node.left = _insert(node.left, key, value);
        } else if (key > node.key) {
            node.right = _insert(node.right, key, value);
        } else {
            node.value = value;
        }
        return node;
    }

    void remove(int key) {
        root = _remove(root, key);
    }

    Node* _remove(Node* node, int key) {
        if (node == null) {
            return null;
        } else if (key < node.key) {
            node.left = _remove(node.left, key);
        } else if (key > node.key) {
            node.right = _remove(node.right, key);
        } else {
            Node* temp;
            if (node.left == null) {
                temp = node.right;
                delete node;
                return temp;
            } else if (node.right == null) {
                temp = node.left;
                delete node;
                return temp;
            } else {
                temp = _minValueNode(node.right);
                node.key = temp.key;
                node.value = temp.value;
                node.right = _remove(node.right, temp.key);
            }
        }
        return node;
    }

    Node* _minValueNode(Node* node) {
        Node* current = node;
        while (current && current.left != null) {
            current = current.left;
        }
        return current;
    }

    int getValue(int key) {
        return _getValue(root, key);
    }

    int _getValue(Node* node, int key) {
        if (node == null) {
            return null;
        } else if (key < node.key) {
            return _getValue(node.left, key);
        } else if (key > node.key) {
            return _getValue(node.right, key);
        } else {
            return node.value;
        }
    }
}

void main() {
    Tree tree = new Tree();
    tree.insert(5, 10);
    tree.insert(3, 6);
    tree.insert(8, 15);
    tree.insert(1, 2);

    tree.remove(3);

    int value = tree.getValue(8);
    // value is now 15
}