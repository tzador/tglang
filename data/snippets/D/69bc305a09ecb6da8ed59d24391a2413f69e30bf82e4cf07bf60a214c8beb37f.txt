/* This is a D programming language code snippet that generates a Mandelbrot set */
import std.math;
import std.complex;
import std.stdio;

void main()
{
  // define the bounds of the Mandelbrot set
  complex min = complex(-2, -1);
  complex max = complex(1, 1);
  
  // define the number of iterations and the threshold for escaping
  int maxIterations = 100;
  double threshold = 2.0;
  
  // define the grid size and calculate the step size
  int gridSize = 200;
  double stepSize = (max.real - min.real) / gridSize;
  
  // iterate through each pixel and calculate the corresponding complex number
  for(int i = 0, x = 0; i < gridSize; i++, x += stepSize)
  {
    for(int j = 0, y = 0; j < gridSize; j++, y += stepSize)
    {
      // initialize the current complex number
      complex current = complex(min.real + x, min.imag + y);
      
      // initialize the previous complex number and the iteration count
      complex prev = current;
      int iteration = 0;
      
      // apply the formula z = z^2 + c until the magnitude of z exceeds the threshold
      while(iteration < maxIterations && abs(prev) < threshold)
      {
        prev = prev * prev + current;
        iteration++;
      }
      
      // calculate the color based on the iteration count
      int color = maxIterations / iteration;
      
      // print the color as a hexadecimal code
      writefln("%02x%02x%02x", color, color, color);
    }
  }
}