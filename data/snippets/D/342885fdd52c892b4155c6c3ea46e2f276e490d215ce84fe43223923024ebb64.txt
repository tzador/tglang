// This program implements a binary search tree in D programming language
module main;

// Struct represents a node in the binary search tree
struct Node {
    int key;
    Node* left;
    Node* right;
}

// Function to create a new node with the given key
Node* newNode(int key) {
    Node* node = new Node();
    node.key = key;
    node.left = null;
    node.right = null;
    return node;
}

// Function to insert a new node in the binary search tree
Node* insert(Node* root, int key) {
    // If tree is empty, create a new node
    if (root == null) {
        root = newNode(key);
    }
    // If key is smaller than root, insert in the left subtree
    else if (key < root.key) {
        root.left = insert(root.left, key);
    }
    // If key is greater than root, insert in the right subtree
    else if (key > root.key) {
        root.right = insert(root.right, key);
    }
    // Return the root of the tree after insertion
    return root;
}

// Function to print the binary search tree in pre-order traversal
void preOrder(Node* root) {
    if (root != null) {
        // Print the key of the current node
        writefln("%d", root.key);
        // Print keys of left subtree recursively
        preOrder(root.left);
        // Print keys of right subtree recursively
        preOrder(root.right);
    }
}

// Function to delete a node from the binary search tree
Node* delete(Node* root, int key) {
    // If tree is empty, return null
    if (root == null) {
        return null;
    }
    // If key is smaller than root, delete from the left subtree
    if (key < root.key) {
        root.left = delete(root.left, key);
    }
    // If key is greater than root, delete from the right subtree
    else if (key > root.key) {
        root.right = delete(root.right, key);
    }
    // If key is found in the root node
    else {
        // If node has no child
        if (root.left == null && root.right == null) {
            return null;
        }
        // If node has one child
        else if (root.left == null) {
            Node* temp = root.right;
            root = null;
            return temp;
        }
        else if (root.right == null) {
            Node* temp = root.left;
            root = null;
            return temp;
        }
        // If node has two children
        else {
            // Find the minimum key in the right subtree
            Node* temp = root.right;
            while (temp.left != null) {
                temp = temp.left;
            }
            // Replace the key of root with the minimum key
            root.key = temp.key;
            // Delete the minimum key from the right subtree
            root.right = delete(root.right, temp.key);
        }
    }
    // Return the root of the tree after deletion
    return root;
}

// Function to search for a key in the binary search tree
Node* search(Node* root, int key) {
    // If tree is empty, key is not found
    if (root == null) {
        return null;
    }
    // If key is found in the root node
    if (key == root.key) {
        return root;
    }
    // If key is smaller than root, search in the left subtree
    else if (key < root.key) {
        return search(root.left, key);
    }
    // If key is greater than root, search in the right subtree
    else {
        return search(root.right, key);
    }
}

// Sample usage of the binary search tree
void main() {
    // Create a root node with key 10
    Node* root = newNode(10);
    // Insert nodes with keys 5, 15, 3, 7, 12 and 18
    root = insert(root, 5);
    root = insert(root, 15);
    root = insert(root, 3);
    root = insert(root, 7);
    root = insert(root, 12);
    root = insert(root, 18);
    // Print the tree in pre-order traversal
    writefln("Preorder traversal:");
    preOrder(root);
    // Search for key 12 in the tree
    Node* result = search(root, 12);
    if (result == null) {
        writefln("Key 12 not found in the tree.");
    }
    else {
        writefln("Key 12 found in the tree.");
    }
    // Delete key 3 from the tree
    writefln("Deleting key 3 from the tree.");
    root = delete(root, 3);
    // Print the updated tree in pre-order traversal
    writefln("Preorder traversal after deletion:");
    preOrder(root);
}