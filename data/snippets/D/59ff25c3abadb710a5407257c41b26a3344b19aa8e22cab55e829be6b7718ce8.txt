// This code is a complex example of using templates to generate a type-safe data structure
template MyStruct(T) // a template is declared with the keyword 'template', followed by the template name and any template parameters in parentheses
{
  // the template body defines the structure of the data type that will be generated by the template
  static if(is(T == int)) // a static if statement checks at compile time if a condition is true
  {
    alias ValueType = int; // an alias is declared to create a type-safe reference to the template parameter
    static if(is(T == int && T.sizeof == 4)) // another check is performed to ensure the template parameter is an integer with a size of 4 bytes
    {
      struct MyStruct // a struct is declared within the template
      {
        ValueType value; // the ValueType alias is used to create a member variable that will only accept integers
        bool isInt = true; // a boolean variable is declared and set to true, indicating that the value type is an integer
      }
    }
    else // if the condition is not met, an error is displayed at compile time
    {
      static assert(0, "Template parameter T must be an integer with a size of 4 bytes");
    }
  }
  else // if the template parameter is not an integer, an error is displayed at compile time
  {
    static assert(0, "Template parameter T must be an integer");
  }
}

// The template can then be used to generate a new data type
// In this example, we will use an int as the template parameter, so the resulting data type will have a value type of int and a boolean value indicating that it is an integer
alias MyIntStruct = MyStruct!int; // the exclamation mark followed by the template parameter specifies that the template is to be expanded with the provided type

MyIntStruct myIntStruct; // an instance of the generated data type is created
myIntStruct.value = 10; // since the value type is int, the value can only be integers
myIntStruct.isInt = true; // the boolean value confirms that the value type is an integer

// The template can also be used with other types, such as strings
alias MyStringStruct = MyStruct!string; // the resulting data type will have a value type of string and a boolean value indicating that it is not an integer

MyStringStruct myStringStruct; // an instance of the generated data type is created
myStringStruct.value = "This is a string"; // since the value type is string, the value can only be strings
myStringStruct.isInt = false; // the boolean value confirms that the value type is not an integer