// This code snippet is a basic implementation of
// a binary search tree in D Programming Language

class Node // Node class for representing individual nodes in the tree
{
    string key;
    int value;
    Node left;
    Node right;

    this(string key, int value)
    {
        this.key = key;
        this.value = value;
    }
}

class Tree // Tree class for managing the overall tree structure
{
    Node root;

    void insert(string key, int value)
    {
        root = insertNode(root, key, value);
    }

    Node insertNode(Node node, string key, int value) // insertNode function for recursively inserting nodes
    {
        if (node is null) // check if root node is null
        {
            return new Node(key, value);
        }

        if (key < node.key) // if key is smaller than node key, insert into left subtree
        {
            node.left = insertNode(node.left, key, value);
        }
        else if (key > node.key) // if key is greater than node key, insert into right subtree
        {
            node.right = insertNode(node.right, key, value);
        }
        else // if key already exists in the tree, update the value of the node
        {
            node.value = value;
        }

        return node;
    }

    int search(string key)
    {
        return searchNode(root, key);
    }

    int searchNode(Node node, string key) // searchNode function for recursively searching for a node
    {
        if (node is null) // if node is null, key does not exist in the tree
        {
            return -1;
        }

        if (key < node.key) // if key is smaller than node key, search in left subtree
        {
            return searchNode(node.left, key);
        }
        else if (key > node.key) // if key is greater than node key, search in right subtree
        {
            return searchNode(node.right, key);
        }
        else // if key is found, return the value of the node
        {
            return node.value;
        }
    }

    void remove(string key)
    {
        root = removeNode(root, key);
    }

    Node removeNode(Node node, string key) // removeNode function for recursively removing a node
    {
        if (node is null) // if node is null, key does not exist in the tree
        {
            return null;
        }

        if (key < node.key) // if key is smaller than node key, remove from left subtree
        {
            node.left = removeNode(node.left, key);
        }
        else if (key > node.key) // if key is greater than node key, remove from right subtree
        {
            node.right = removeNode(node.right, key);
        }
        else // if node is found and is a leaf node, set node to null
        {
            if (node.left is null && node.right is null)
            {
                return null;
            }
            // if node has only one child, return the child node
            if (node.left is null)
            {
                return node.right;
            }
            if (node.right is null)
            {
                return node.left;
            }
            // if node has two children, find the minimum node in the right subtree and replace the node's key and value with it
            Node minNode = findMinNode(node.right);
            node.key = minNode.key;
            node.value = minNode.value;
            // remove the duplicate node from the right subtree
            node.right = removeNode(node.right, minNode.key);
        }

        return node;
    }

    Node findMinNode(Node node) // function to find the minimum node starting from a given node
    {
        Node current = node;
        while (current.left !is null)
        {
            current = current.left;
        }
        return current;
    }

}

void main()
{
    Tree tree = new Tree();
    tree.insert("hello", 1);
    tree.insert("world", 2);
    tree.insert("foo", 3);
    tree.insert("bar", 4);
    // search for a key
    int value = tree.search("foo");
    // remove a key
    tree.remove("bar");
}