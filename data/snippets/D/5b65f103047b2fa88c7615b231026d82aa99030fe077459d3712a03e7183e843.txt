/**
 * This code snippet uses a template to create a dynamic array in D Programming Language.
 * It takes in an initial capacity and adds elements to the array as needed.
 * The array's capacity doubles each time it reaches its current capacity.
 */

template DynamicArray(T) {

    // Private properties
    private T[] array;
    private int size;
    private int capacity;

    // Constructor
    this(int initialCapacity) {
        assert(initialCapacity > 0); // Initial capacity must be greater than 0
        this.capacity = initialCapacity; 
        array = new T[initialCapacity];
    }

    // Public functions

    /**
     * Adds a new element to the end of the dynamic array.
     * If the array is full, the capacity is doubled and the element is added.
     * @param element The element to be added
     */
    void add(T element) {
        assert(size < capacity); // Make sure the array is not already full
        if (size == capacity) {
            // Double the capacity and create a new array
            capacity *= 2;
            T[] newArray = new T[capacity];

            // Copy elements from old array into new array
            for (int i = 0; i < size; i++) {
                newArray[i] = array[i];
            }

            array = newArray; // Replace old array with new array
        }

        array[size] = element;
        size++;
    }

    /**
     * Returns the element at the given index
     * @param index The index of the element to be retrieved
     * @return The element at the given index
     */
    T get(int index) {
        assert(index >= 0 && index < size); // Make sure index is within range
        return array[index];
    }
}

// Example usage
void main() {
    // Instantiate a dynamic array with initial capacity of 5
    DynamicArray!int myArray = new DynamicArray!int(5);

    // Add elements to the array
    for (int i = 0; i < 10; i++) {
        myArray.add(i);
    }

    // Print out elements in the array
    for (int i = 0; i < myArray.size; i++) {
        writeln(myArray.get(i));
    }
}