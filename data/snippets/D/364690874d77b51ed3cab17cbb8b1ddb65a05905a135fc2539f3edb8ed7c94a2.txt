#!/usr/bin/env dub
/+ dub.sdl:
        name "ExampleProject"
        dependency "vibe-d" version="~>1.0.0"

        // Package dependencies can be configured here.

        // If you want to add global package configuration, you can do that here, too.

+/

// This is a comment in D

import vibe.d;

shared static this()
{
    // This module constructor is run once before any other code in this module.

    version (unittest)
    {
        import std.stdio;
        writeln("This is an example project using Vibe.d");
    }
}

shared bool isEven(int num)
{
    return num % 2 == 0;
}

struct Person
{
    string name;
    int age;

    string toString()
    {
        return name ~ ", age: " ~ to!string(age);
    }
}

void main()
{
    // Creating a vibe.d HTTP server
    auto settings = new HTTPServerSettings;
    settings.port = 8080;

    auto router = new URLRouter;

    router.registerPlain("/hello", "Hello World!");

    router.registerDynamic("/person/{name}/{age}", (scope params) {
        auto person = Person(params["name"].get!(string), params["age"].get!(int));
        return person.toString();
    });

    auto server = new HTTPServer(settings, router);
    server.start();

    // Printing the output of isEven function
    writeln(isEven(4)); // Output: true
    writeln(isEven(5)); // Output: false

    // Printing the output of toString function from Person object
    auto john = new Person("John", 30);
    writeln(john.toString()); // Output: John, age: 30
}