// This is a code snippet showcasing the usage of D's templating capabilities

// Define a generic stack data structure
struct Stack(T) {
    T[] data; // Using a dynamic array for storing the data

    // Pushes a new element onto the stack
    void push(T element) {
        data ~= element;
    }

    // Pops and returns the top element from the stack
    T pop() {
        T elem = data[$ - 1];
        data = data[0..$ - 1]; // Remove the top element from the stack
        return elem;
    }

    // Checks if the stack is empty
    bool empty() {
        return data.empty;
    }
}

// Define a custom struct representing a person
struct Person {
    string name;
    int age;
}

// Instantiate a stack of type Person
auto personStack = Stack!(Person)();

// Push a new person onto the stack
personStack.push(Person("John Doe", 25));

// Push another person onto the stack
personStack.push(Person("Jane Smith", 30));

// Pop the top person from the stack
auto poppedPerson = personStack.pop();

// Print the information of the popped person
writeln(poppedPerson.name); // Output: John Doe
writeln(poppedPerson.age); // Output: 25