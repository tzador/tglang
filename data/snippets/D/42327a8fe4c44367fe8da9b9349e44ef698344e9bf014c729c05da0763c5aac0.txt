// A complex algorithm to find the maximum sum of a subarray

import std.algorithm;
import std.array;
import std.stdio;

// Function to find the maximum sum of a subarray using Kadane's algorithm
int maximumSubarraySum(int[] arr) 
{ 
    // Initialize variables to store current and maximum sum
    int curr_sum = arr[0]; 
    int max_sum = arr[0]; 

    // Loop through the array, starting at index 1, to find maximum subarray sum
    foreach (i, val; arr[1 .. $]) 
    {   
        // Calculate the current sum by adding the current element to the previous sum
        curr_sum += val; 

        // Check if the current sum is greater than the maximum sum
        if (curr_sum > max_sum) 
            max_sum = curr_sum; 

        // Reset current sum to 0 if it becomes negative
        if (curr_sum < 0) 
            curr_sum = 0; 

    } 

    // Return the maximum sum
    return max_sum; 
} 

void main() 
{ 
    // Initialize an array
    int[] arr = [1, -2, 3, 4, -5, 6]; 

    // Find the maximum sum using our function
    int max_sum = maximumSubarraySum(arr); 

    // Print the result
    writeln("Maximum sum of subarray is ", max_sum); 
}