public class SalesRepHandler {
    private List<String> salesRepsNames; // List to store names of sales representatives

    /**
     * Constructor for SalesRepHandler class
     * @param repsList - List of sales representatives
     */
    public SalesRepHandler(List<SalesRep> repsList) {
        salesRepsNames = new List<String>();

        for (SalesRep rep : repsList) {
            if (!salesRepsNames.contains(rep.Name)) {
                salesRepsNames.add(rep.Name); // Add name to list if it doesn't already exist
            }
        }
    }

    /**
     * Returns the total number of sales representatives
     * @return total number of sales representatives
     */
    public Integer getTotalSalesReps() {
        return salesRepsNames.size();
    }

    /**
     * Returns the name of the sales representative at the specified index
     * @param index - Index of sales representative in the list
     * @return name of sales representative
     */
    public String getSalesRepName(Integer index) {
        return salesRepsNames.get(index);
    }

    /**
     * Updates the name of the sales representative at the specified index
     * @param index - Index of sales representative in the list
     * @param newName - New name for the sales representative
     */
    public void updateSalesRepName(Integer index, String newName) {
        salesRepsNames.set(index, newName);
    }
}

// Example usage:
List<SalesRep> repsList = [SELECT Id, Name FROM SalesRep];
SalesRepHandler handler = new SalesRepHandler(repsList); // Instantiate the class with list of sales representatives
Integer totalReps = handler.getTotalSalesReps(); // Get total number of sales representatives
String repName = handler.getSalesRepName(0); // Get name of first sales representative
handler.updateSalesRepName(0, 'John Smith'); // Update name of first sales representative