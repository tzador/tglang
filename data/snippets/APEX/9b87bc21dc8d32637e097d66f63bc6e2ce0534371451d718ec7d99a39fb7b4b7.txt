public class RecordService {
    
    // This method extracts data from a given record and returns a list of values
    public static List<Object> extractRecordData(Record record) {
        List<Object> recordData = new List<Object>();
        
        // Iterate through each field in the record
        for (SObjectField field : record.getSObjectFields()) {
            // Check if field is a picklist
            if (field.getDescribe().getType() == Schema.DisplayType.PICKLIST) {
                // Add field value to list
                recordData.add(record.get(field));
            } else {
                // Check if field is a reference
                if (field.getDescribe().isNameField()) {
                    // Add reference field value to list
                    recordData.add(record.get(field));
                } else {
                    // Get field value as string and add it to list
                    recordData.add(String.valueOf(record.get(field)));
                }
            }
        }
        
        // Return list of extracted record data
        return recordData;
    }
    
    // This method updates the record with the provided new data
    public static void updateRecord(Record record, Map<String, Object> newData) {
        // Iterate through each key-value pair in the map
        for (String field : newData.keySet()) {
            // Check if field exists in record
            if (record.getSObjectFields().containsKey(field)) {
                // Set field value to corresponding value in map
                record.put(field, newData.get(field));
            }
        }
    }
    
    // This method creates a new record using the provided data
    public static Record createRecord(String objectName, Map<String, Object> data) {
        // Create new record with specified object type
        Record newRecord = (Record) Type.forName('Schema.' + objectName).newInstance();
        
        // Iterate through each key-value pair in the data map
        for (String field : data.keySet()) {
            // Check if field exists in record schema
            if (newRecord.getSObjectFields().containsKey(field)) {
                // Set field value to corresponding value in map
                newRecord.put(field, data.get(field));
            }
        }
        
        // Return newly created record
        return newRecord;
    }
}