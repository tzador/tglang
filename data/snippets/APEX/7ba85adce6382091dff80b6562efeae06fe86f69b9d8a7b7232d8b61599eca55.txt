/*** This Apex code snippet shows an implementation of the quicksort algorithm using recursion ***/

// Define the quicksort method, which takes in an Integer list and two indices as parameters
public void quicksort(List<Integer> list, Integer startIndex, Integer endIndex) {
    
    // If the start index is less than the end index, there is more than one element in the subarray
    if(startIndex < endIndex) {
        // Call the partition method to find the correct pivot index
        Integer pivotIndex = partition(list, startIndex, endIndex);
        
        // Call the quicksort method recursively on the subarray to the left of the pivot
        quicksort(list, startIndex, pivotIndex - 1);
        
        // Call the quicksort method recursively on the subarray to the right of the pivot
        quicksort(list, pivotIndex + 1, endIndex);
    }
}

// Define the partition method, which takes in an Integer list and two indices as parameters
public Integer partition(List<Integer> list, Integer startIndex, Integer endIndex) {
    
    // Set the pivot as the first element in the subarray
    Integer pivot = list[startIndex];
    
    // Create variables to keep track of the left and right indices
    Integer leftIndex = startIndex + 1;
    Integer rightIndex = endIndex;
    
    // Continue iterating while the left index is less than or equal to the right index
    while(leftIndex <= rightIndex) {
        
        // Find the first element from the left that is greater than the pivot
        while(leftIndex <= endIndex && list[leftIndex] <= pivot) {
            leftIndex++;
        }
        
        // Find the first element from the right that is less than or equal to the pivot
        while(rightIndex > startIndex && list[rightIndex] > pivot) {
            rightIndex--;
        }
        
        // If left index is less than right index, swap the elements
        if(leftIndex < rightIndex) {
            Integer temp = list[leftIndex];
            list[leftIndex] = list[rightIndex];
            list[rightIndex] = temp;
        }
    }
    
    // Swap the pivot with the last element in the subarray that was swapped
    list[startIndex] = list[rightIndex];
    list[rightIndex] = pivot;
    
    // Return the pivot index
    return rightIndex;
}