// This code snippet demonstrates a complex sorting algorithm using recursion and dynamic programming

// Define a function to sort a given array using recursion
public static void recursiveSort(List<Integer> arr, Integer size){

    // Base case: If array is empty or has only one element, return array as it is already sorted
    if (size < 2) {
        return;
    }

    // Divide the array into two subarrays
    Integer mid = size / 2;
    List<Integer> left = new List<Integer>();
    List<Integer> right = new List<Integer>();

    // Copy elements from left half of the array to left subarray
    for (Integer i = 0; i < mid; i++) {
        left.add(arr[i]);
    }

    // Copy elements from right half of the array to right subarray
    for (Integer i = mid; i < size; i++) {
        right.add(arr[i]);
    }

    // Recursively sort both subarrays
    recursiveSort(left, mid);
    recursiveSort(right, size - mid);

    // Merge the sorted subarrays
    merge(arr, left, right, mid, size - mid);
}

// Define a function to merge two sorted subarrays
public static void merge(List<Integer> arr, List<Integer> left, List<Integer> right, Integer leftSize, Integer rightSize) {

    // Declare variables to keep track of indices for each subarray
    Integer i = 0; // Index for left subarray
    Integer j = 0; // Index for right subarray
    Integer k = 0; // Index for main array

    // Compare elements from both subarrays and merge them in sorted order
    while (i < leftSize && j < rightSize) {
        if (left[i] <= right[j]) {
            arr[k] = left[i];
            i++;
        } else {
            arr[k] = right[j];
            j++;
        }
        k++;
    }

    // Check if any elements are remaining in the left subarray and add them to the main array
    while (i < leftSize) {
        arr[k] = left[i];
        i++;
        k++;
    }

    //// Check if any elements are remaining in the right subarray and add them to the main array
    while (j < rightSize) {
        arr[k] = right[j];
        j++;
        k++;
    }
}