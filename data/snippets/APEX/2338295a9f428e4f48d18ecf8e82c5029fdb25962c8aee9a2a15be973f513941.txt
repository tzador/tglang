//Class for creating and manipulating sales data
public class SalesDataManipulation {
    //Method to retrieve total sales for a specific product
    //Parameters: productId - String that specifies the ID of the product
    //Returns: Integer that represents the total sales of the specified product
    public static Integer getTotalSales(String productId) {
        //Query to retrieve all sales records for the specified product
        List<Sales__c> salesList = [SELECT Id, Name, Product__c, Quantity__c, Value__c FROM Sales__c WHERE Product__c = :productId];

        //Variable to store the total sales
        Integer totalSales = 0;

        //Loop through each sales record and add the value to the total sales variable
        for(Sales__c sale : salesList) {
            totalSales += sale.Value__c * sale.Quantity__c;
        }

        //Return the total sales value
        return totalSales;
    }

    //Method to calculate the average sales for a specific product
    //Parameters: productId - String that specifies the ID of the product
    //Returns: Double that represents the average sales of the specified product
    public static Double getAverageSales(String productId) {
        //Variable to store the total sales
        Double totalSales = Double.valueOf(getTotalSales(productId));
        
        //Variable to store the total number of sales records
        Integer totalRecords = 0;
        
        //Query to retrieve the total number of sales records
        List<AggregateResult> results = [SELECT COUNT(Id) totalRecords FROM Sales__c WHERE Product__c = :productId];

        //Get the total number of records from the query results
        if(!results.isEmpty() && results[0].get('totalRecords') != null) {
            totalRecords = (Integer) results[0].get('totalRecords');
        }

        //Calculate and return the average sales
        return totalSales / totalRecords;
    }

    //Method to update the value of a sale record
    //Parameters: saleId - String that specifies the ID of the sale record
    //            newValue - Integer that specifies the new value of the sale
    public static void updateSaleValue(String saleId, Integer newValue) {
        //Retrieve the sale record using the provided ID
        Sales__c sale = [SELECT Id, Name, Value__c FROM Sales__c WHERE Id = :saleId];

        //Update the value field with the new value
        sale.Value__c = newValue;

        //Save the updated record
        update sale;
    }
}