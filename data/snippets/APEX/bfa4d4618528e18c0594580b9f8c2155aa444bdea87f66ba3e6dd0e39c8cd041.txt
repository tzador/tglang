Map<Id, List<String>> recordMap = new Map<Id, List<String>>(); //creates a map with an Id key and a list of strings as its value
List<Opportunity> oppsToUpdate = new List<Opportunity>(); //creates a list to store opportunities that need to be updated
for (Opportunity opp : [SELECT Id, StageName, Amount FROM Opportunity WHERE StageName = 'Closed Won' AND Amount > 100000]) { //query all closed won opportunities with amount greater than 100000
	recordMap.put(opp.Id, new List<String>()); //add the opportunity Id to the map with an empty list as its value
	if (opp.Amount > 200000) { //if the opportunity amount is greater than 200000
		recordMap.get(opp.Id).add('High Value'); //add the string 'High Value' to the list in the map
	}
	if (opp.StageName == 'Closed Won') { //if the opportunity stage is closed won
		recordMap.get(opp.Id).add('Closed Won'); //add the string 'Closed Won' to the list in the map
	}
	if (opp.Amount < 50000) { //if the opportunity amount is less than 50000
		recordMap.get(opp.Id).add('Low Value'); //add the string 'Low Value' to the list in the map
	}
}
for (Id oppId : recordMap.keySet()) { //loop through the keyset of the map
	Opportunity oppToUpdate = new Opportunity(Id = oppId); //create a new Opportunity with the corresponding Id
	List<String> values = recordMap.get(oppId); //get the list of strings for that Id from the map
	oppToUpdate.Description = 'This opportunity has multiple values: ' + String.join(values, ','); //set the description to include all the values in the list
	oppsToUpdate.add(oppToUpdate); //add the opportunity to the list of opportunities to update
}
update oppsToUpdate; //update the opportunities in the list