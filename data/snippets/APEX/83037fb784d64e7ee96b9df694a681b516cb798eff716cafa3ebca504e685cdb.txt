// Define a method to perform a binary search on a sorted list of integers
// Parameters:
//     1. list: the sorted list of integers to search through
//     2. key: the integer to search for in the list
//     3. left: the index of the leftmost element in the list to be searched
//     4. right: the index of the rightmost element in the list to be searched
// Returns:
//     The index of the element in the list that matches the key, or -1 if the key cannot be found
private static Integer binarySearch(Integer[] list, Integer key, Integer left, Integer right) {
    while (left <= right) {
        Integer mid = (left + right) / 2;
        if (list[mid] < key) {
            left = mid + 1;
        } else if (list[mid] > key) {
            right = mid - 1;
        } else {
            return mid;
        }
    }
    return -1;
}

// Example usage:
//     Integer[] list = new Integer[]{1, 3, 5, 7, 9, 11};
//     Integer key = 7;
//     Integer result = binarySearch(list, key, 0, list.length - 1);
//     System.debug(result); // Output: 3 (because 7 is located at index 3 in the list)
// Note: The list must be sorted in ascending order for the binary search to work properly.