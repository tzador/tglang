/*
This is a complex code snippet written in APEX programming language.
It is a class called 'ComplexCalculator' that performs various mathematical operations.

It has a constructor that takes in two integer parameters and assigns them to its private variables,
as well as a getter method for one of the variables.

It also has several methods for performing addition, subtraction, multiplication, and division,
each with proper exception handling and comments explaining the logic behind the operations.

Last but not least, it has a main method that creates an instance of the class and calls all the methods.

Enjoy!
*/

public class ComplexCalculator {
    // private variables to store input values
    private Integer num1;
    private Integer num2;
    
    // constructor that assigns values to variables
    public ComplexCalculator(Integer num1, Integer num2) {
        this.num1 = num1;
        this.num2 = num2;
    }
    
    // getter method for num1 variable
    public Integer getNum1() {
        return this.num1;
    }
    
    // method for addition
    public Integer add() {
        // try-catch block for handling possible null values
        try {
            // add num1 and num2 and return the result
            return num1 + num2;
        } catch (NullPointerException e) {
            // if either num1 or num2 is null, throw an exception
            throw new IllegalArgumentException("Cannot perform addition with null values.");
        }
    }
    
    // method for subtraction
    public Integer subtract() {
        // try-catch block for handling possible null values
        try {
            // subtract num2 from num1 and return the result
            return num1 - num2;
        } catch (NullPointerException e) {
            // if either num1 or num2 is null, throw an exception
            throw new IllegalArgumentException("Cannot perform subtraction with null values.");
        }
    }
    
    // method for multiplication
    public Integer multiply() {
        // try-catch block for handling possible null values
        try {
            // multiply num1 and num2 and return the result
            return num1 * num2;
        } catch (NullPointerException e) {
            // if either num1 or num2 is null, throw an exception
            throw new IllegalArgumentException("Cannot perform multiplication with null values.");
        }
    }
    
    // method for division
    public Integer divide() {
        // try-catch block for handling possible null values
        try {
            // check if num2 is 0, if yes then throw an exception
            if (num2 == 0) {
                throw new ArithmeticException("Cannot divide by 0.");
            } else {
                // divide num1 by num2 and return the result
                return num1 / num2;
            }
        } catch (NullPointerException e) {
            // if either num1 or num2 is null, throw an exception
            throw new IllegalArgumentException("Cannot perform division with null values.");
        }
    }
    
    // main method to create an instance of the class and call all the methods
    public static void main(String[] args) {
        // create an instance of the class with input values of 10 and 5
        ComplexCalculator calculator = new ComplexCalculator(10, 5);
        
        // call the getter method to retrieve num1 and print it
        System.out.println("num1: " + calculator.getNum1());
        
        // call the add method and print the result
        System.out.println("10 + 5 = " + calculator.add());
        
        // call the subtract method and print the result
        System.out.println("10 - 5 = " + calculator.subtract());
        
        // call the multiply method and print the result
        System.out.println("10 * 5 = " + calculator.multiply());
        
        // call the divide method and print the result
        System.out.println("10 / 5 = " + calculator.divide());
    }
}