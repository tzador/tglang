// This is a sample class to demonstrate complex APEX code

public class ComplexClass {

    // Declare a list to store custom object records
    List<My_Custom_Object__c> customObjects;

    // Constructor to initialize the list and fill it with records from a query
    public ComplexClass() {
        customObjects = new List<My_Custom_Object__c>();
        customObjects = [SELECT Id, Name, Description FROM My_Custom_Object__c WHERE Status__c = 'Active'];
    }

    // Method to perform calculations on the list and return a result
    public Decimal calculateTotal() {
        Decimal total = 0;

        // Loop through the records in the list
        for(My_Custom_Object__c obj : customObjects) {
            // Check if the record is eligible for calculation
            if(obj.Description != null) {
                // Split the description field value by commas and get the integer part
                Integer value = Integer.valueOf(obj.Description.split(',')[0]);
                // Add the integer value to the total
                total += Decimal.valueOf(value);
            }
        }

        return total;
    }

    // Method to update the records in the list
    public void updateRecords() {
        // Create a new list to store updated records
        List<My_Custom_Object__c> updatedObjects = new List<My_Custom_Object__c>();

        // Loop through the records in the list
        for(My_Custom_Object__c obj : customObjects) {
            // Check if the record is eligible for update
            if(obj.Name != null) {
                // Set a new status for the record
                obj.Status__c = 'Updated';
                // Add the record to the updated list
                updatedObjects.add(obj);
            }
        }

        // Update the records in the database
        update updatedObjects;
    }

    // Static method to perform calculation without instantiating the class
    public static Decimal staticCalculate(List<My_Custom_Object__c> records) {
        Decimal total = 0;

        // Loop through the records
        for(My_Custom_Object__c obj : records) {
            // Check if the record is eligible for calculation
            if(obj.Description != null) {
                // Split the description field value by commas and get the integer part
                Integer value = Integer.valueOf(obj.Description.split(',')[0]);
                // Add the integer value to the total
                total += Decimal.valueOf(value);
            }
        }

        return total;
    }
}