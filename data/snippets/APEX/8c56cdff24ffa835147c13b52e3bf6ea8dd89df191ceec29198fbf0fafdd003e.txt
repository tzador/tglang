// Define a custom exception class
public class CustomException extends Exception {}
 
// Create a method that throws the custom exception
public static void customMethod(String input) throws CustomException {
    if (!input.equals("expected value")) {
        throw new CustomException('Custom exception message');
    }
}
 
// Call the method within a try-catch block
try {
    customMethod('invalid value');
} catch (CustomException e) {
    System.debug(e.getMessage()); // Outputs 'Custom exception message'
}

// Create a complex data structure
Map<String, List<Set<Integer>>> complexMap = new Map<String, List<Set<Integer>>>();

// Add values to the map
List<Set<Integer>> numberSets = new List<Set<Integer>>();
numberSets.add(new Set<Integer>{1, 2, 3});
numberSets.add(new Set<Integer>{4, 5, 6});
numberSets.add(new Set<Integer>{7, 8, 9});
complexMap.put('Numbers', numberSets);

List<Set<Integer>> letterSets = new List<Set<Integer>>();
letterSets.add(new Set<Integer>{'a', 'b', 'c'});
letterSets.add(new Set<Integer>{'d', 'e', 'f'});
letterSets.add(new Set<Integer>{'g', 'h', 'i'});
complexMap.put('Letters', letterSets);

// Loop through the map and print the values
for (String key : complexMap.keySet()) {
    System.debug(key + ' sets:');
    for (Set<Integer> set : complexMap.get(key)) {
        System.debug(set);
    }
}

// Outputs:
/*
Numbers sets:
{1, 2, 3}
{4, 5, 6}
{7, 8, 9}
Letters sets:
{a, b, c}
{d, e, f}
{g, h, i}
*/