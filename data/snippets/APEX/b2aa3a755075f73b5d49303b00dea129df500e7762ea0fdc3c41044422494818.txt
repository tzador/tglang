// This code snippet generates a class with a custom sorting method

public with sharing class CustomSorting{
    
    // Define enum to hold sorting options
    public enum SortDirection {ASC, DESC}
    
    // Define inner class for sorting criteria
    public class SortingCriteria implements Comparable{
        public String field {get; set;}
        public SortDirection direction {get; set;}
        
        // Constructor to initialize sorting criteria
        public SortingCriteria(String field, SortDirection direction){
            this.field = field;
            this.direction = direction;
        }
        
        // Implements Comparable interface method
        public Integer compareTo(Object other){
            Contact c1 = (Contact)this;
            Contact c2 = (Contact)other;
            
            // Perform comparison based on field and direction
            if(c1.field == c2.field){
                return (c1.direction == SortDirection.ASC) ? 1 : -1;
            }else{
                return (c1.direction == SortDirection.DESC) ? -1 : 1;
            }
        }
    }
    
    // Define method to perform sorting
    public static List<Object> sortList(List<Object> sourceList, List<SortingCriteria> sortOrder){
        // Convert list of objects to list of Comparable
        List<Comparable> comparableList = new List<Comparable>();
        for(Object obj : sourceList){
            Comparable compObj = (Comparable)obj;
            comparableList.add(compObj);
        }
        
        // Perform sorting based on sorting criteria
        comparableList.sort();
        
        // Convert back to list of objects and return
        List<Object> sortedList = new List<Object>();
        for(Comparable obj : comparableList){
            sortedList.add((Object)obj);
        }
        return sortedList;
    }
}