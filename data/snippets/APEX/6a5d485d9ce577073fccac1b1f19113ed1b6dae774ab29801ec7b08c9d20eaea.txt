/* This code snippet is a simple implementation of a queue data structure in APEX */

// Define queue class
private class Queue {
    private List<Object> data; // list to store queue elements
    private Integer front; // index to the front of the queue
    private Integer rear; // index to the rear of the queue
    private Integer size; // current size of the queue

    // Constructor to initialize queue with given size
    public Queue(Integer max_size) {
        this.data = new List<Object>(max_size);
        this.front = -1;
        this.rear = -1;
        this.size = 0;
    }

    // Method to check if the queue is empty
    public Boolean isEmpty() {
        return (this.size == 0);
    }

    // Method to check if the queue is full
    public Boolean isFull() {
        return (this.size == this.data.size());
    }

    // Method to add an element to the rear of the queue
    public Boolean enqueue(Object element) {
        if (this.isFull()) {
            return false;
        }
        else {
            this.rear++;
            this.data.add(this.rear, element);
            this.size++;
            if (this.front == -1) {
                this.front = 0;
            }
            return true;
        }
    }

    // Method to remove an element from the front of the queue
    public Object dequeue() {
        if (this.isEmpty()) {
            return null;
        }
        else {
            Object removed = this.data.remove(this.front);
            this.front++;
            this.size--;
            if (this.isEmpty()) {
                this.front = -1;
                this.rear = -1;
            }
            return removed;
        }
    }

    // Method to get the element at the front of the queue
    public Object front() {
        if (this.isEmpty()) {
            return null;
        }
        else {
            return this.data.get(this.front);
        }
    }

    // Method to get the element at the rear of the queue
    public Object rear() {
        if (this.isEmpty()) {
            return null;
        }
        else {
            return this.data.get(this.rear);
        }
    }

    // Method to get the size of the queue
    public Integer size() {
        return this.size;
    }
}

// Example usage of the queue class
Queue myQueue = new Queue(5); // initialize a queue with a maximum size of 5 elements
myQueue.enqueue(1); // add element 1 to the queue
myQueue.enqueue(2); // add element 2 to the queue
myQueue.enqueue(3); // add element 3 to the queue
myQueue.enqueue(4); // add element 4 to the queue
myQueue.enqueue(5); // add element 5 to the queue - queue is now full
myQueue.enqueue(6); // returns false as the queue is full
myQueue.dequeue(); // remove element 1 from the front of the queue
myQueue.front(); // returns element 2 at the front of the queue
myQueue.rear(); // returns element 5 at the rear of the queue
myQueue.size(); // returns the current size of the queue, which is 4