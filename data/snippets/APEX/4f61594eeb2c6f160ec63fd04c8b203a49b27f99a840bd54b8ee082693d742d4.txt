// Create a map to store employee data
Map<String, Employee__c> employeeMap = new Map<String, Employee__c>();

// Create a list to hold employee IDs
List<Id> employeeIds = new List<Id>();

// Query for all employees with the "Sales" department
List<Employee__c> salesEmployees = [SELECT Id, Name, Department__c FROM Employee__c WHERE Department__c = 'Sales'];

// Loop through the sales employees
for(Employee__c employee : salesEmployees){
    // Add employee to map using their name as the key
    employeeMap.put(employee.Name, employee);

    // Add employee's ID to list
    employeeIds.add(employee.Id);
}

// Check if there are any employees in the list
if(!employeeIds.isEmpty()){
    // Query for all accounts related to the sales employees
    List<Account> salesAccounts = [SELECT Id, Name, Employee__c FROM Account WHERE Employee__c IN :employeeIds];

    // Loop through the sales accounts
    for(Account account : salesAccounts){
        // Get the employee associated with the account
        Employee__c employee = employeeMap.get(account.Employee__c);

        // Update employee's department to "Customer Success"
        employee.Department__c = 'Customer Success';

        // Add employee's updated data to the map
        employeeMap.put(employee.Name, employee);
    }

    // Update all employees in the map
    update employeeMap.values();
}

// Print success message
System.debug('All employees in the "Sales" department have been updated to "Customer Success".');