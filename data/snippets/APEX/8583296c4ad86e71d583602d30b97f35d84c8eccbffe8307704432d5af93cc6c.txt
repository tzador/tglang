/**
* This is a multifunctional class that allows for manipulation of data and objects
* within a Salesforce org.
* 
* @param org          The Salesforce org for which the data manipulation will occur
* @param credentials  The login credentials for the specified org
**/
public class DataManipulator {

    // Class variables
    private Salesforce org;
    private String credentials;

    /** 
    * Constructor method that takes in a Salesforce org and login credentials
    * and sets them to the class variables.
    *
    * @param org          The Salesforce org for which the data manipulation will occur
    * @param credentials  The login credentials for the specified org
    **/
    public DataManipulator(Salesforce org, String credentials) {
        this.org = org;
        this.credentials = credentials;
    }

    /**
    * Method that retrieves a list of records from a specified object type.
    *
    * @param objectName   The name of the object from which to retrieve records
    * @param fields       The fields to retrieve from the records
    * @return             A list of records with the specified fields
    **/
    public List<sObject> getRecords(String objectName, List<String> fields) {
        List<sObject> records = new List<sObject>();

        if (org != null &amp;&amp; credentials != null) {
            // Retrieve records using SOQL query
            String query = 'SELECT ' + String.join(fields, ',') + ' FROM ' + objectName;
            records = org.query(query);
        }

        return records;
    }

    /**
    * Method that updates a list of records with new values.
    *
    * @param records      The list of records to update
    * @param fieldValues  A map where the key is the field to update
    *                     and the value is the new value for that field
    **/
    public void updateRecords(List<sObject> records, Map<String, Object> fieldValues) {
        if (org != null &amp;&amp; credentials != null) {
            // Loop through each record and update specified fields
            for (sObject record : records) {
                for (String field : fieldValues.keySet()) {
                    record.put(field, fieldValues.get(field));
                }
            }

            // Update the records in the org
            org.update(records);
        }
    }

    /**
    * Method that deletes a list of records from the org.
    *
    * @param records      The list of records to delete
    **/
    public void deleteRecords(List<sObject> records) {
        if (org != null &amp;&amp; credentials != null) {
            // Delete the records from the org
            org.delete(records);
        }
    }

}