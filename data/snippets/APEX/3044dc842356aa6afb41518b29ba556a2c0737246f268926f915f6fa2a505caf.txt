//This is a complex code snippet in APEX

//Creating a class called ComplexClass
public class ComplexClass {

  //Declaring a private variable
  private Integer num = 5; 

  //Creating a method that takes in two numbers and returns their average
  public Double calculateAverage(Integer num1, Integer num2) {
    Double result = (num1 + num2)/2.0;
    return result;
  }

  //Creating a method that checks if a number is prime and throws an error if it is not
  public Boolean checkPrime(Integer num) {
    if (num <= 1) {
      throw new CheckPrimeException('Number must be greater than 1');
    }
    for (Integer i = 2; i < num; i++) {
      if (num % i == 0) {
        throw new CheckPrimeException('Number is not prime');
      }
    }
    return true;
  }

  //Creating a method that adds a given number to the private variable and prints the new value
  public void addToNum(Integer numToAdd) {
    num += numToAdd;
    System.debug('New value of num: ' + num);
  }
}

//Creating a custom exception class called CheckPrimeException
public class CheckPrimeException extends Exception {
  //Creating a constructor that takes in a message and calls the superclass constructor
  public CheckPrimeException(String msg) {
    super(msg);
  }
}

//Creating a trigger on the Account object that updates a custom field when a new Payment is created
trigger UpdatePaymentAmount on Account (after insert) {
  List<Account> accountsToUpdate = new List<Account>();
  //Looping through the inserted Accounts
  for (Account acc : Trigger.new) {
    //Querying for all associated Payments
    List<Payment__c> payments = [SELECT Id, Amount__c FROM Payment__c WHERE Account__c = :acc.Id];
    Decimal totalAmount = 0.0;
    //Looping through the Payments and calculating the total amount
    for (Payment__c payment : payments) {
      totalAmount += payment.Amount__c;
    }
    //Updating the custom field on the Account
    acc.Amount_Paid__c = totalAmount;
    accountsToUpdate.add(acc);
  }
  //Updating the Accounts
  update accountsToUpdate;
}