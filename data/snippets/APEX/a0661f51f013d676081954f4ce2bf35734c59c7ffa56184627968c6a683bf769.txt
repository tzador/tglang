public class MyCustomObjectTriggerHandler {
        // set up the trigger context variables
        private final MyCustomObject__c customObj;
        private final Map<Id, MyCustomObject__c> oldCustomObjMap;
        private final Map<Id, MyCustomObject__c> newCustomObjMap;
        
        // constructor to initialize the trigger context variables
        public MyCustomObjectTriggerHandler(List<MyCustomObject__c> newCustomObjList, Map<Id, MyCustomObject__c> oldCustomObjMap) {
                // set the trigger context variables
                this.customObj = (newCustomObjList != null && newCustomObjList.size() > 0) ? newCustomObjList[0] : null;
                this.oldCustomObjMap = oldCustomObjMap;
                this.newCustomObjMap = (newCustomObjList != null && newCustomObjList.size() > 0) ? new Map<Id, MyCustomObject__c>(newCustomObjList) : new Map<Id, MyCustomObject__c>();
        }
        
        // method to handle the before update event
        public void handleBeforeUpdate() {
                // loop through the new custom object records
                for (MyCustomObject__c customObj : newCustomObjMap.values()) {
                        // check if the custom object record is being updated
                        if (customObj.IsUpdate__c) {
                                // perform some logic before updating the record
                                customObj.Previous_Value__c = oldCustomObjMap.get(customObj.Id).Current_Value__c;
                        }
                }
        }
        
        // method to handle the after update event
        public void handleAfterUpdate() {
                // loop through the new custom object records
                for (MyCustomObject__c customObj : newCustomObjMap.values()) {
                        // check if the custom object record was updated
                        if (customObj.IsUpdate__c) {
                                // perform some logic after updating the record
                                customObj.New_Value__c = customObj.Current_Value__c;
                        }
                }
        }
}