// Initialize a map that will hold strings as keys and lists as values
Map<String, List<Object>> complexMap = new Map<String, List<Object>>();

// Create a new list to add to the map
List<Object> newList = new List<Object>();

// Add multiple values of different types to the list
newList.add(1);
newList.add('Hello');
newList.add(true);

// Add the list to the map with a key of "list1"
complexMap.put('list1', newList);

// Declare a new variable to store a string value
String complexString = 'This is a long and complex string';

// Convert the string into a list of characters
List<String> stringList = complexString.split('');

// Loop through the characters in the list
for(String character : stringList){
    // Add each character to the map with a key of "stringCharacter"
    complexMap.put('stringCharacter', character);
}

// Use an if statement to check if the map contains a key of "list1"
if(complexMap.containsKey('list1')){
    // Get the list associated with the key "list1" from the map
    List<Object> getList = complexMap.get('list1');

    // Loop through the list
    for(Object element : getList){
        // Use a switch statement to check the data type of each element
        switch on String.valueOf(element){
            // If the element is an integer
            when 'Integer'{
                // Convert the element to a string and add it to the map with a key of "integer"
                complexMap.put('integer', String.valueOf(element));
            }
            // If the element is a string
            when 'String'{
                // Add the element to the map with a key of "string"
                complexMap.put('string', element);
            }
            // If the element is a boolean
            when 'Boolean'{
                // Convert the element to a string and add it to the map with a key of "boolean"
                complexMap.put('boolean', String.valueOf(element));
            }
        }
    }
}

// Print out the final complex map
System.debug('Complex Map: ' + complexMap);