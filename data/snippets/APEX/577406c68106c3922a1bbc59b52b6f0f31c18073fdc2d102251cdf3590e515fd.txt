/* Create a class named EncryptedUtils that implements an encryption and decryption method using the AES algorithm */

public class EncryptedUtils {
 
    // Define variables used for encryption/decryption
    private final String TOKEN_SECRET = 'mySecretKey!';
    private final String ENCRYPT_ALG = 'AES';
    private final Integer KEY_SIZE = 128;
    private final Integer IV_SIZE = 16;
 
    /**
     * Encrypts a given string using AES algorithm and a secret key
     * @param str The string to be encrypted
     * @return Encrypted string
     */
    public String encrypt(String str) {
        // Generate a secret key using the provided token
        Blob key = Crypto.generateAesKey(KEY_SIZE, TOKEN_SECRET);
        
        // Generate a random initialization vector
        Blob iv = Crypto.generateAesIV(IV_SIZE);
        
        // Convert string to blob
        Blob data = Blob.valueOf(str);
        
        // Encrypt the data using AES algorithm
        Blob encryptedData = Crypto.encrypt(ENCRYPT_ALG, key, iv, data);
        
        // Encode the encrypted data in hexadecimal format
        return EncodingUtil.convertToHex(encryptedData);
    }
    
    /**
     * Decrypts a given string using AES algorithm and a secret key
     * @param str The encrypted string to be decrypted
     * @return Decrypted string
     */
    public String decrypt(String str) {
        // Convert the encrypted string from hexadecimal to blob
        Blob encryptedData = EncodingUtil.convertFromHex(str);
        
        // Generate a secret key using the provided token
        Blob key = Crypto.generateAesKey(KEY_SIZE, TOKEN_SECRET);
        
        // Generate a random initialization vector
        Blob iv = Crypto.generateAesIV(IV_SIZE);
        
        // Decrypt the data using AES algorithm
        Blob decryptedData = Crypto.decrypt(ENCRYPT_ALG, key, iv, encryptedData);
        
        // Convert blob to string
        return decryptedData.toString();
    }
}