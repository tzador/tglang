public class Calculator {
    
    // This method adds two numbers and returns the result
    public static Integer add(Integer num1, Integer num2) {
        return num1 + num2;
    }
    
    // This method subtracts two numbers and returns the result
    public static Integer subtract(Integer num1, Integer num2) {
        return num1 - num2;
    }
    
    // This method multiplies two numbers and returns the result
    public static Integer multiply(Integer num1, Integer num2) {
        return num1 * num2;
    }
    
    // This method divides two numbers and returns the result
    public static Decimal divide(Integer num1, Integer num2) {
        if (num2 == 0) {
            throw new DivideByZeroException('Cannot divide by zero.');
        }
        return (Decimal)num1 / num2;
    }
    
    // This method calculates the factorial of a number and returns the result
    public static Integer factorial(Integer num) {
        Integer result = 1;
        
        // Loop through all numbers from 1 to num and multiply them with the result
        for (Integer i = 1; i <= num; i++) {
            result *= i;
        }
        
        return result;
    }
    
    // This method checks if a number is prime and returns a boolean value
    public static Boolean isPrime(Integer num) {
        if (num <= 1) {
            return false;
        } else if (num == 2) {
            return true;
        } else {
            // Loop through all numbers from 2 to the square root of num
            for (Integer i = 2; i <= Math.sqrt(num); i++) {
                // If any number divides num without a remainder, it is not prime
                if (num % i == 0) {
                    return false;
                }
            }
        }
        
        return true;
    }
    
    // This method calculates the power of a number and returns the result
    public static Integer power(Integer base, Integer exponent) {
        Integer result = 1;
        
        // Multiply the base with itself exponent number of times
        for (Integer i = 0; i < exponent; i++) {
            result *= base;
        }
        
        return result;
    }
}