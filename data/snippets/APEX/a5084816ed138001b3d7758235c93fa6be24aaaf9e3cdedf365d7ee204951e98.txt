// This snippet creates a custom object 'Contact_Visit' with various fields and a custom lookup relationship to the standard Contact object
// with additional annotations to explain each line of code
Schema.DescribeSObjectResult contactVisitSchema = Contact_Visit__c.sObjectType.getDescribe();
// describes the 'Contact_Visit' custom object and stores the metadata in the 'contactVisitSchema' variable

// create fields of the custom object
List<Schema.SObjectField> fieldList = new List<Schema.SObjectField>();
// creates a list to store the custom fields
fieldList.add(contactVisitSchema.fields.getMap().get('FirstName__c'));
// adds the 'FirstName__c' field to the list
fieldList.add(contactVisitSchema.fields.getMap().get('LastName__c'));
// adds the 'LastName__c' field to the list
fieldList.add(contactVisitSchema.fields.getMap().get('Email__c'));
// adds the 'Email__c' field to the list
fieldList.add(contactVisitSchema.fields.getMap().get('Phone__c'));
// adds the 'Phone__c' field to the list
fieldList.add(contactVisitSchema.fields.getMap().get('Date__c'));
// adds the 'Date__c' field to the list
fieldList.add(contactVisitSchema.fields.getMap().get('Purpose__c'));
// adds the 'Purpose__c' field to the list

// create a lookup relationship to the standard Contact object
Schema.SObjectField contact = contactVisitSchema.fields.getMap().get('Contact__c');
// retrieves the 'Contact__c' field from the custom object
Schema.DescribeFieldResult contactField = contact.getDescribe();
// describes the 'Contact__c' field and stores the metadata in 'contactField'
Schema.SObjectType contactType = contactField.getReferenceTo()[0];
// retrieves the standard Contact object and stores it in 'contactType'
Schema.DescribeSObjectResult contactSchema = contactType.getDescribe();
// describes the Contact object and stores the metadata in 'contactSchema'
Schema.SObjectField contactId = contactSchema.fields.getMap().get('Id');
// retrieves the standard Contact object's Id field and stores it in 'contactId'
Schema.SObjectField contactName = contactSchema.fields.getMap().get('Name');
// retrieves the standard Contact object's Name field and stores it in 'contactName'

// create a custom lookup relationship field to the standard Contact object with an additional annotation
Schema.SObjectField contactVisitContact = new Schema.FieldSetMember(contactId, false, true, false, false);
// creates a custom lookup relationship field named 'Contact_Visit_Contact' using the 'contactId' field as the relationship
Schema.FieldSetMember contactNameField = new Schema.FieldSetMember(contactName, true, false, false, false);
// creates an annotation for the 'Name' field of the related Contact record with the 'contactName' field

contactVisitContact.setInlineHelpText('Specify the related Contact for this Contact Visit record.');
// adds a helper text for the custom lookup field
contactVisitContact.addAnnotation(contactNameField);
// associates the annotation with the custom lookup field