/* 
  This code snippet is an example of a custom iterator in APEX.
  It creates a class that implements the Iterable interface
  to generate a sequence of numbers with a specified step size.
*/
class CustomIterator implements Iterable<Integer> {
    // variables to store the starting value, ending value, and step size for the iterator
    private Integer start;
    private Integer end;
    private Integer step;
    
    // constructor to initialize the variables
    public CustomIterator(Integer startValue, Integer endValue, Integer stepSize) {
        this.start = startValue;
        this.end = endValue;
        this.step = stepSize;
    }
    
    // method to return an instance of the iterator class
    public Iterator<Integer> iterator() {
        // return an anonymous inner class that implements the Iterator interface
        return new Iterator<Integer>() {
            // variable to keep track of the current value
            private Integer current = start;
            
            // method to check if the iterator has a next value
            public Boolean hasNext() {
                // check if the current value is within the specified range
                return current <= end;
            }
            
            // method to retrieve the next value from the iterator
            public Integer next() {
                // store the current value to be returned
                Integer value = current;
                // update the current value by adding the step size
                current += step;
                // return the stored value
                return value;
            }
        };
    }
}

// example usage of the custom iterator
// create an instance of the iterator class with a starting value of 1, ending value of 10, and step size of 2
CustomIterator customIterator = new CustomIterator(1, 10, 2);

// iterate through the values using a for-each loop
for (Integer i : customIterator) {
    // print each value to the console
    System.out.println(i);
}