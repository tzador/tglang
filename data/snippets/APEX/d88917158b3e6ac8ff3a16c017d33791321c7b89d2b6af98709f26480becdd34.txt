Public class AccountTriggerHelper {
    
    //Method to update related contacts
    public static void updateContacts(List<Account> accounts) {
        //Create a set to hold the unique account IDs
        Set<Id> accountIds = new Set<Id>();
        
        //Loop through the list of accounts
        for (Account acc : accounts) {
            //Add account Id to the set
            accountIds.add(acc.Id);
        }
        
        //Query for related contacts
        List<Contact> contactsToUpdate = [SELECT Id, AccountId, LastName FROM Contact WHERE AccountId IN: accountIds];
        
        //Loop through the related contacts
        for (Contact con : contactsToUpdate) {
            //Update the contacts' last name to match the account name
            con.LastName = acc.Name;
        }
        
        //Update the contacts
        update contactsToUpdate;
    }
    
    //Method to check for duplicate accounts
    public static void checkForDuplicateAccounts(List<Account> newAccounts, List<Account> existingAccounts) {
        //Create a map to hold the existing account names and IDs
        Map<String, Id> accountMap = new Map<String, Id>();
        
        //Loop through the existing accounts
        for (Account acc : existingAccounts) {
            //Add account name and Id to map
            accountMap.put(acc.Name, acc.Id);
        }
        
        //Loop through the new accounts
        for (Account newAcc : newAccounts) {
            //Check if new account name already exists in map
            if (accountMap.containsKey(newAcc.Name)) {
                //Set error message
                newAcc.addError('Duplicate account found.');
            }
        }
    }
    
    //Method to update account's owner's email
    public static void updateAccountOwnerEmail(List<Account> accounts) {
        //Create a set to hold the unique owner Ids
        Set<Id> ownerIds = new Set<Id>();
        
        //Loop through the accounts
        for (Account acc : accounts) {
            //Add owner Id to set
            ownerIds.add(acc.OwnerId);
        }
        
        //Query for owners' emails
        Map<Id, User> ownerEmails = new Map<Id, User>([SELECT Id, Email FROM User WHERE Id IN: ownerIds]);
        
        //Loop through the accounts
        for (Account acc : accounts) {
            //Get the owner's email from the map
            String ownerEmail = ownerEmails.get(acc.OwnerId).Email;
            
            //Update the account's owner's email
            acc.Owner_Email__c = ownerEmail;
        }
    }
}