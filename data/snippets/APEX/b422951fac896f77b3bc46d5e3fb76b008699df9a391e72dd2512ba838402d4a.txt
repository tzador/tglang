//This code snippet demonstrates a recursive binary search function
/*@
 * Function: recursiveBinarySearch
 * Description: This function performs a binary search on a given array using recursion
 * Input:
 *      arr - A sorted array of elements
 *      key - The element to be searched for
 * Output:
 *      index - The index where the element is found, -1 if not found
 */
public static Integer recursiveBinarySearch(Integer[] arr, Integer key){
    return recursiveBinarySearchHelper(arr, key, 0, arr.size() - 1);
}

private static Integer recursiveBinarySearchHelper(Integer[] arr, Integer key, Integer low, Integer high){
    if (low > high){
        return -1; //key is not found
    }
    //calculate the mid of the array
    Integer mid = (low + high) / 2;
    //check if the key is present at mid
    if (arr[mid] == key){
        return mid;
    }
    //if key is smaller than mid, search in the left half of the array
    if (key < arr[mid]){
        return recursiveBinarySearchHelper(arr, key, low, mid - 1);
    }
    //if key is larger than mid, search in the right half of the array
    return recursiveBinarySearchHelper(arr, key, mid + 1, high);
}

//Example usage of the recursiveBinarySearch function
Integer[] arr = new Integer[]{1, 3, 5, 7, 9};
Integer key = 5;
Integer index = recursiveBinarySearch(arr, key); //index = 2 (index of element 5 in the array)