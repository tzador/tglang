// This code snippet generates a random password of specified length with a specified combination of characters

// Define function to generate random password
public String generatePassword(Integer length, Boolean hasNumbers, Boolean hasSymbols) {
    // Define list of characters to choose from
    List<String> letters = 'abcdefghijklmnopqrstuvwxyz'.split('');
    List<String> numbers = '0123456789'.split('');
    List<String> symbols = '!@#$%^&*()_+~`|}{[]:;?,./<>'.split('');

    // Initialize variables to hold chosen characters and final password
    List<String> chosenChars = new List<String>();
    String password = '';

    // Add letters to chosenChars
    for (Integer i = 0; i < length; i++) {
        Integer randomIndex = Math.mod(Math.abs(Crypto.getRandomInteger()), letters.size());
        chosenChars.add(letters[randomIndex]);
    }

    // Add numbers to chosenChars if specified
    if (hasNumbers) {
        for (Integer i = 0; i < length/2; i++) {
            Integer randomIndex = Math.mod(Math.abs(Crypto.getRandomInteger()), numbers.size());
            chosenChars.add(numbers[randomIndex]);
        }
    }

    // Add symbols to chosenChars if specified
    if (hasSymbols) {
        for (Integer i = 0; i < length/2; i++) {
            Integer randomIndex = Math.mod(Math.abs(Crypto.getRandomInteger()), symbols.size());
            chosenChars.add(symbols[randomIndex]);
        }
    }

    // Shuffle the chosenChars list
    chosenChars.shuffle();

    // Build the password string
    for (String character : chosenChars) {
        password += character;
    }

    // Return the generated password
    return password;
}

// Call the generatePassword function with a length of 12, including numbers and symbols
generatePassword(12, true, true);