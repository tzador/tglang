// This code snippet generates a random number between 1 and 100, and checks if it is a prime number
// It also utilizes recursion to check if the number is a prime factor of itself

// First, we declare and initialize a variable to store the random number
Integer randomNumber = Math.floor(Math.random()*100) + 1;

// Next, we create a function to check if the number is a prime factor of itself
// The function takes in a single parameter, the number to be checked
public static Boolean isPrimeFactor(Integer num){
    // Base case: if the number is 2, return true
    if (num == 2) {
        return true;
    }
    // Recursive case: check if the number is divisible by any number between 2 and itself - 1
    for (Integer i = 2; i < num; i++) {
        // If the number is divisible by any number between 2 and itself - 1, it is not a prime factor
        if (num % i == 0) {
            return false;
        }
    }
    // If the number is not divisible by any number between 2 and itself - 1, it is a prime factor
    return true;
}

// Now, we call the function to check if the random number generated is a prime factor
Boolean isPrime = isPrimeFactor(randomNumber);
// If the number is a prime factor, we print a success message
if (isPrime) {
    System.debug('The number ' + randomNumber + ' is a prime factor of itself!');
} else {
    // If the number is not a prime factor, we print an error message
    System.debug('The number ' + randomNumber + ' is not a prime factor of itself.');
}