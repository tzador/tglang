public class ShoppingCart {
    
    // Private variables
    private String[] items = new String[10];
    private Integer totalPrice = 0;
    private Integer itemCount = 0;
     
    /** 
     * This method adds a new item to the shopping cart and updates the total price and item count.
     * @param newItem The item to be added to the cart
     */
    public void addItem(String newItem) {
        // Check for empty spaces in the array
        if (itemCount >= items.length) {
            System.debug('No space left in cart');
        } else {
            // Add item to cart and update total price and item count
            items[itemCount] = newItem;
            totalPrice += 10; // Default item price
            itemCount++;
        }
    }
    
    /** 
     * This method removes the specified item from the shopping cart and updates the total price and item count.
     * @param itemToRemove The item to be removed from the cart
     */
    public void removeItem(String itemToRemove) {
        // Check if item exists in cart
        Boolean itemFound = false;
        for (Integer i = 0; i < items.length; i++) {
            if (items[i] == itemToRemove) {
                itemFound = true;
                // Shift items down in array to fill empty space
                for (Integer j = i; j < items.length - 1; j++) {
                    items[j] = items[j+1];
                }
                // Update total price and item count
                totalPrice -= 10; // Default item price
                itemCount--;
                break;
            }
        }
        // If item not found, print error message
        if (!itemFound) {
            System.debug('Item not found in cart');
        }
    }
    
    /**
     * This method calculates the total price of all items in the shopping cart.
     * @return The total price of all items in the cart
     */
    public Integer calculateTotalPrice() {
        // Check if there are items in the cart
        Integer totalPrice = 0;
        if (itemCount > 0) {
            // Calculate total price by adding price of each item
            for (Integer i = 0; i < itemCount; i++) {
                totalPrice += 10; // Default item price
            }
        }
        return totalPrice;
    }
    
    /**
     * This method prints the items in the shopping cart.
     */
    public void printCartItems() {
        // Check if there are items in the cart
        if (itemCount > 0) {
            // Loop through items in cart and print them
            for (Integer i = 0; i < itemCount; i++) {
                System.debug(items[i]);
            }
        } else {
            System.debug('Cart is empty');
        }
    }
}