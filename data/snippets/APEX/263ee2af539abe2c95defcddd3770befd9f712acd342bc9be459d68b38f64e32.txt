/**
 * This is a custom class that implements a sorting algorithm for a given list of numbers
 * using the QuickSort approach
 */
public class QuickSort {

    /**
     * This method executes the quick sort algorithm on a given list of numbers
     *
     * @param nums {List<Integer>} The list of numbers to be sorted
     * @param low {Integer} The starting index of the subarray to be sorted
     * @param high {Integer} The ending index of the subarray to be sorted
     */
    public void sort(List<Integer> nums, Integer low, Integer high) {
        if (low < high) {
            Integer pivot = partition(nums, low, high);

            // recursively sort the left and right subarrays
            sort(nums, low, pivot - 1);
            sort(nums, pivot + 1, high);
        }
    }

    /**
     * This method partitions the values in the list around a pivot element
     *
     * @param nums {List<Integer>} The list of numbers to be sorted
     * @param low {Integer} The starting index of the subarray to be partitioned
     * @param high {Integer} The ending index of the subarray to be partitioned
     * @return Integer The index of the pivot element
     */
    private Integer partition(List<Integer> nums, Integer low, Integer high) {
        Integer pivot = nums.get(high);
        Integer i = low - 1;

        for (Integer j = low; j < high; j++) {
            if (nums[j] <= pivot) {
                i++;
                swap(nums, i, j);
            }
        }
        swap(nums, i + 1, high);
        return i + 1;
    }

    /**
     * This method swaps two elements in a given list
     *
     * @param nums {List<Integer>} The list in which the elements are to be swapped
     * @param i {Integer} The index of the first element
     * @param j {Integer} The index of the second element
     */
    private void swap(List<Integer> nums, Integer i, Integer j) {
        Integer temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}