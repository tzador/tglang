public with sharing class AccountHandler {
    private List<Account> accounts;
    private Map<String, Account> accountMap;
    private List<Contact> contacts;
    
    // Constructor
    public AccountHandler(List<Account> accounts, List<Contact> contacts) {
        this.accounts = accounts;
        this.contacts = contacts;
        this.accountMap = new Map<String, Account>();
    }
    
    // Method to create new accounts and add them to the account list
    public void createNewAccounts(List<String> accountNames) {
        for(String name : accountNames) {
            // Check if the account with the same name already exists
            if(accountMap.containsKey(name)) {
                continue;
            }
            // Create a new account
            Account newAccount = new Account(Name = name);
            
            // Add the account to the account list
            accounts.add(newAccount);
            
            // Add the account to the account map
            accountMap.put(name, newAccount);
        }
    }
    
    // Method to update the account owner based on the corresponding contact's ID
    public void updateAccountOwner(String contactId, String accountName) {
        // Get the account from the account map
        Account acc = accountMap.get(accountName);
        
        // Get the corresponding contact from the contact list
        Contact con = contacts.stream()
            .filter(c -> c.Id == contactId)
            .findFirst()
            .orElse(null);
        
        // Update the account owner with the contact's ID
        if(con != null) {
            acc.OwnerId = con.Id;
        }
    }
    
    // Method to return the list of accounts
    public List<Account> getAccounts() {
        return accounts;
    }
    
    // Method to return the account map
    public Map<String, Account> getAccountMap() {
        return accountMap;
    }
}