// This code snippet implements a sorting algorithm called insertion sort
// It takes in an array of numbers and sorts them in ascending order
// This algorithm works by dividing the array into a sorted and unsorted portion
// The sorted portion starts with the first element and gradually expands till it encompasses the entire array
// The code snippet uses a for loop to iterate through the unsorted portion of the array and a while loop to shift the elements in the sorted portion
// It compares each element in the unsorted portion to the elements in the sorted portion and inserts it in the correct position
// The end result is a sorted array in ascending order

// Define a method that takes in an array of numbers and returns the sorted array
public Integer[] insertionSort(Integer[] array){
    // Define variables for the length of the array and a temporary variable to hold the current element being sorted
    Integer arrayLength = array.length;
    Integer temp;

    // Use a for loop to iterate through the unsorted portion of the array
    for(Integer i=1; i<arrayLength; i++){
        // Set the temporary variable to the current element being sorted
        temp = array[i];
        // Use a while loop to shift the elements in the sorted portion to make space for the element being inserted
        Integer j = i-1;
        while(j>=0 && array[j]>temp){
            array[j+1] = array[j];
            j--;
        }
        // Insert the element into the correct position in the sorted portion
        array[j+1] = temp;
    }
    // Return the sorted array
    return array;
}

// Example array to test the insertionSort method
Integer[] exampleArray = {5, 2, 7, 1, 3};
// Call the insertionSort method and pass in the example array
Integer[] sortedArray = insertionSort(exampleArray);
// Output the sorted array
System.debug(sortedArray);