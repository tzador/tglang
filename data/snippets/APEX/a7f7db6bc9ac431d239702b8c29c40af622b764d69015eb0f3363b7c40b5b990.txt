public class ComplexCalculation {

    // Method to calculate factorial of a number
    public Integer factorial(Integer num) {
        Integer result = 1;
        while(num > 0) {
            result *= num--;
        }
        return result;
    }

    // Method to find the nth term in the Fibonacci sequence
    public Integer fibonacci(Integer n) {
        if(n < 3) {
            return 1;
        }
        else {
            Integer fib1 = 1;
            Integer fib2 = 1;
            Integer fib = 0;
            for(Integer i=2; i<n; i++) {
                fib = fib1 + fib2;
                fib1 = fib2;
                fib2 = fib;
            }
            return fib;
        }
    }

    //Method to find the LCM of two numbers
    public Integer LCM(Integer num1, Integer num2) {
        Integer max = (num1 > num2) ? num1 : num2;
        Integer lcm = max;

        while(true) {
            if(lcm % num1 == 0 && lcm % num2 == 0) {
                return lcm;
            }
            lcm++;
        }
    }

    // Method to find the GCD of two numbers
    public Integer GCD(Integer num1, Integer num2) {
        while(num1 != num2) {
            if(num1 > num2) {
                num1 -= num2;
            }
            else {
                num2 -= num1;
            }
        }
        return num1;
    }

    // Method to check if a number is prime
    public Boolean isPrime(Integer num) {
        if(num == 2 || num == 3) {
            return true;
        }
        else if(num < 2 || num % 2 == 0) {
            return false;
        }
        else {
            for(Integer i=3; i<=Math.sqrt(num); i+=2) {
                if(num % i == 0) {
                    return false;
                }
            }
            return true;
        }
    }

}