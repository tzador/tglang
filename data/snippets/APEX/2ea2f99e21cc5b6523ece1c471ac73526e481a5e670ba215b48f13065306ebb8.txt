/**
* This is a class named 'OrderProcessing' that handles order processing logic
*/
public class OrderProcessing {
    
    /**
    * This is a public method to process an order
    * @param orderId - the unique id of the order
    * @param orderItems - the list of items in the order
    * @param paymentMethod - the chosen payment method for the order
    * @return confirmationMessage - a message confirming the successful processing of the order
    */
    public static String processOrder(String orderId, List<String> orderItems, String paymentMethod) {
        
        // Initialize a new instance of the Order class
        Order thisOrder = new Order(orderId, orderItems, paymentMethod);
        
        // Create an instance of the PaymentGateway class for payment processing
        PaymentGateway pg = new PaymentGateway();
        
        // Check if payment method is valid 
        if (pg.isValid(paymentMethod)) {
            
            // Charge the customer's credit card 
            pg.charge(thisOrder.getTotalPrice(), paymentMethod);
            
            // Calculate the estimated delivery date
            Date estimatedDelivery = thisOrder.getEstimatedDelivery();
            
            // Construct the confirmation message
            String confirmationMessage = 'Order ' + thisOrder.getId() + ' successfully processed. Estimated delivery date: ' + estimatedDelivery;
            
            // Return the confirmation message
            return confirmationMessage;
        }
        else {
            // Payment method is not valid, throw an exception
            throw new InvalidPaymentMethodException('Invalid payment method selected.');
        }
    }
    
    /**
    * This is a inner class for the order information
    * @param id - the unique id of the order
    * @param items - the list of items in the order
    * @param paymentMethod - the chosen payment method for the order
    */
    private class Order {
        private String id;
        private List<String> items;
        private String paymentMethod;
        
        // Constructor for the Order class
        public Order(String id, List<String> items, String paymentMethod) {
            this.id = id;
            this.items = items;
            this.paymentMethod = paymentMethod;
        }
        
        // Getter method for id
        public String getId() {
            return this.id;
        }
        
        // Getter method for items
        public List<String> getItems() {
            return this.items;
        }
        
        // Getter method for payment method
        public String getPaymentMethod() {
            return this.paymentMethod;
        }
        
        // Calculate the total price of the order
        public Double getTotalPrice() {
            Double totalPrice = 0.0;
            for (String item : items) {
                // Get the price of each item from the database
                Double itemPrice = getItemPrice(item);
                // Add the price of the item to the total price
                totalPrice += itemPrice;
            }
            return totalPrice;
        }
        
        // Calculate the estimated delivery date based on the current date
        public Date getEstimatedDelivery() {
            // Get current date
            Date currentDate = Date.today();
            
            // Calculate the estimated delivery date
            Integer deliveryDays = items.size() * 2; // Each item takes 2 days to deliver
            Date estimatedDelivery = currentDate.addDays(deliveryDays);
            
            return estimatedDelivery;
        }
    }
    
    /**
    * This is a inner class for the payment gateway
    */
    private class PaymentGateway {
        
        /**
        * This method checks if the payment method is valid
        * @param paymentMethod - the chosen payment method for the order
        * @return boolean - true if payment method is valid, false otherwise
        */
        public boolean isValid(String paymentMethod) {
            // Check if payment method is credit card or PayPal
            if (paymentMethod == 'credit card' || paymentMethod == 'PayPal') {
                return true;
            }
            else {
                return false;
            }
        }
        
        /**
        * This method charges the customer's credit card for the given amount
        * @param amount - the total price of the order
        * @param paymentMethod - the chosen payment method for the order
        */
        public void charge(Double amount, String paymentMethod) {
            // Logic to charge the credit card for the given amount
            // This is just a placeholder, no actual logic implemented
            System.debug('Charging ' + amount + ' to the customer\'s ' + paymentMethod + ' account.');
        }
    }
    
    /**
    * This is a custom exception for an invalid payment method
    */
    public class InvalidPaymentMethodException extends Exception {}
}