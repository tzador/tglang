// This code snippet is generating a Trailhead Playground Data 
// generator class that will create mock data for testing purposes.
// The class will include complicated logic and annotations for 
// tracking the data created.

public class TrailheadDataGenerator {

    // Define variables for various data types and annotations

    @isTest
    private static List<Contact> testContacts;
    private static Integer testContactCount = 10;
    private static String[] firstNames = {'John', 'Mary', 'Adam', 'Emily'};
    private static String[] lastNames = {'Smith', 'Johnson', 'Brown', 'Jones'};
    private static String[] phoneTypes = {'Mobile', 'Home', 'Work'};
    private static Integer maxPhoneCount = 3;
    private static Date startDate = Date.today().addMonths(-6);
    private static Date endDate = Date.today();

    // Generate random data for each defined variable using for loop
    // and Math.random() function

    for (Integer i = 0; i < testContactCount; i++) {
        Contact testContact = new Contact();
        testContact.FirstName = firstNames[Math.floor(Math.random() * firstNames.size())];
        testContact.LastName = lastNames[Math.floor(Math.random() * lastNames.size())];
        testContact.Phone = new List<Phone>();
        Integer phoneCount = (Integer)(Math.random() * maxPhoneCount);
        for (Integer j = 0; j < phoneCount; j++) {
            Phone newPhone = new Phone();
            newPhone.PhoneType = phoneTypes[Math.floor(Math.random() * phoneTypes.size())];
            newPhone.PhoneNumber = Math.floor(Math.random() * 1000000000) + 1000000000;
            testContact.Phone.add(newPhone);
        }
        testContact.Birthdate = startDate + (Integer)(Math.random() * (endDate - startDate));
        testContacts.add(testContact);
    }

    // Insert the generated data into the Trailhead Playground

    if (testContacts.size() > 0) {
        insert testContacts;
    }
}