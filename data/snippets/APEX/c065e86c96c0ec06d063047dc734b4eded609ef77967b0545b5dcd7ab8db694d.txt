/*
 * This class represents a shopping cart in an online store.
 * It includes methods to add items, remove items, and calculate total cost.
 */
public class ShoppingCart {
    
    // private properties for the shopping cart
    private List<OrderItem> items;
    private Double totalCost;
    private Double discount;
    
    // constructor to initialize the shopping cart
    public ShoppingCart() {
        items = new List<OrderItem>();
        totalCost = 0.00;
        discount = 0.00;
    }
    
    // method to add an item to the shopping cart
    public void addItem(Product product, Integer quantity) {
        
        // create a new order item with the given product and quantity
        OrderItem item = new OrderItem(product, quantity);
        
        // add the item to the list of items in the shopping cart
        items.add(item);
        
        // update the total cost with the price of the added item
        totalCost += product.price * quantity;
    }
    
    // method to remove an item from the shopping cart
    public void removeItem(Product product) {
        
        // loop through the items in the shopping cart
        for(OrderItem item : items) {
            
            // check if the product matches the item in the shopping cart
            if(item.product == product) {
                // remove the item from the list of items
                items.remove(item);
                
                // update the total cost by subtracting the price of the removed item
                totalCost -= item.product.price * item.quantity;
                
                // exit the loop since the item has been removed
                break;
            }
        }
    }
    
    // method to calculate the total cost of the shopping cart with discount
    public Double calcTotalCost() {
        
        // calculate the total cost with discount
        totalCost -= totalCost * discount;
        
        // return the total cost rounded to two decimal places
        return Math.round(totalCost * 100.00) / 100.00;
    }
}