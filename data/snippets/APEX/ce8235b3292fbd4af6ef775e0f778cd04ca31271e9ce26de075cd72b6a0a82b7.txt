List<Account> accounts = [SELECT Id, Name FROM Account WHERE Name LIKE 'Acme%'];
Map<Id, Contact> contactsMap = new Map<Id, Contact>([SELECT Id, AccountId, LastName FROM Contact WHERE AccountId IN :accounts.keySet()]);
Set<Id> accountIds = new Set<Id>();
for(Account acc : accounts){
    accountIds.add(acc.Id);
}
List<Contact> contactsList = [SELECT Id, AccountId, LastName FROM Contact WHERE AccountId NOT IN :accountIds];
for(Contact con : contactsList){
    if(!contactsMap.containsKey(con.AccountId)){
        contactsMap.put(con.AccountId, con);
    }
}

// This code snippet retrieves all Accounts with a name starting with "Acme" and their corresponding Contacts, then checks for any Contacts that do not have an associated Account and adds them to the Map.
// Output:
List<Account> accounts = [SELECT Id, Name FROM Account WHERE Name LIKE 'Acme%']; // Retrieves all Accounts with a name starting with "Acme"
Map<Id, Contact> contactsMap = new Map<Id, Contact>([SELECT Id, AccountId, LastName FROM Contact WHERE AccountId IN :accounts.keySet()]); // Retrieves Contacts corresponding to the Accounts in the 'accounts' list and stores them in a Map with the key as the AccountId
Set<Id> accountIds = new Set<Id>(); // Sets up a Set to store the AccountIds
for(Account acc : accounts){ // Loops through the Accounts
    accountIds.add(acc.Id); // Adds the Account Id to the Set
}
List<Contact> contactsList = [SELECT Id, AccountId, LastName FROM Contact WHERE AccountId NOT IN :accountIds]; // Retrieves all Contacts that do not have an associated Account in the Set
for(Contact con : contactsList){ // Loops through the Contacts
    if(!contactsMap.containsKey(con.AccountId)){ // Checks if the Contact's AccountId is already in the Map
        contactsMap.put(con.AccountId, con); // If not, adds the Contact to the Map with the key as the AccountId
    }
}