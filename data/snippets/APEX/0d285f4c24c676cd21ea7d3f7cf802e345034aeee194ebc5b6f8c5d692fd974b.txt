// A class for sorting numbers using merge sort algorithm
public class MergeSort {
	/**
	* Recursive method to split the array into smaller subarrays
	* @param arr The array to be sorted
	* @param l The starting index of the subarray
	* @param r The ending index of the subarray
	*/
	public static void mergeSort(int arr[], int l, int r) {
		if (l < r) { 
			int m = (l + r)/2; 
			// Sort the first and second halves recursively
			mergeSort(arr, l, m); 
			mergeSort(arr , m + 1, r);
			// Merge the sorted subarrays
			merge(arr, l, m, r); 
		}
	}
	
	/**
	* Merges two subarrays of arr[].
	* First subarray is arr[l..m]
	* Second subarray is arr[m+1..r]
	* @param arr The array to be sorted
	* @param l The starting index of the first subarray
	* @param m The ending index of the first subarray
	* @param r The ending index of the second subarray
	*/
	public static void merge(int arr[], int l, int m, int r) {
		// Find sizes of two subarrays to be merged
		int n1 = m - l + 1; 
		int n2 = r - m;
		// Create temporary arrays
		int L[] = new int[n1];
		int R[] = new int[n2];
		// Copy data into temporary arrays
		for (int i=0; i<n1; ++i) 
			L[i] = arr[l + i]; 
		for (int j=0; j<n2; ++j) 
			R[j] = arr[m + 1+ j];
		// Merge the temporary arrays
		int i = 0, j = 0;
		// Initial index of merged subarray
		int k = l; 
		while (i < n1 && j < n2) { 
			if (L[i] <= R[j]) { 
				arr[k] = L[i]; 
				i++; 
			} 
			else { 
				arr[k] = R[j]; 
				j++; 
			} 
			k++; 
		}
		// Copy remaining elements of L[] if any
		while (i < n1) { 
			arr[k] = L[i]; 
			i++; 
			k++; 
		}
		// Copy remaining elements of R[] if any
		while (j < n2) { 
			arr[k] = R[j]; 
			j++; 
			k++; 
		}
	}
}