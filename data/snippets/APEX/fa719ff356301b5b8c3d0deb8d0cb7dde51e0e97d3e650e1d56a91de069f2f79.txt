// Declare and initialize a list of strings
// This list will contain names of employees
List<String> employeeNames = new List<String>{'John Smith','Jane Doe','Bob Johnson'};

// Loop through the list and print out each name
for(String name : employeeNames) {
    System.debug(name);
}

// Create a new map to store employee names and their corresponding job titles
Map<String, String> employeeJobTitles = new Map<String, String>();

// Add employees and their job titles to the map
// An alternative approach would be to use a for loop to add multiple employees at once
employeeJobTitles.put('John Smith', 'Software Engineer');
employeeJobTitles.put('Jane Doe', 'Marketing Specialist');
employeeJobTitles.put('Bob Johnson', 'Sales Manager');

// Loop through the map and print out each employee and their job title
for (String name : employeeJobTitles.keySet()) {
    System.debug(name + ' - ' + employeeJobTitles.get(name));
}

// Create a new class called Employee
public class Employee {
    private String name;
    private String jobTitle;

    // Constructor method to set the name and job title of an employee
    public Employee(String n, String j) {
        name = n;
        jobTitle = j;
    }

    // Method to get the name of an employee
    public String getName() {
        return name;
    }

    // Method to get the job title of an employee
    public String getJobTitle() {
        return jobTitle;
    }
}

// Create a list of Employee objects
List<Employee> employees = new List<Employee>();

// Add Employee objects to the list
employees.add(new Employee('John Smith', 'Software Engineer'));
employees.add(new Employee('Jane Doe', 'Marketing Specialist'));
employees.add(new Employee('Bob Johnson', 'Sales Manager'));

// Loop through the list and print out each employee's name and job title using the Employee class methods
for (Employee emp : employees) {
    System.debug(emp.getName() + ' - ' + emp.getJobTitle());
}