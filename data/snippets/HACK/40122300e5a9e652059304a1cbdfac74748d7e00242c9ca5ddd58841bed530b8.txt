// Function to check if a string is a palindrome
Function palindrome(str) {
    // Remove non-alphanumeric characters and convert to lowercase
    str = str.replace(/[^A-Za-z0-9]/g, '').toLowerCase();
    
    // Loop through the string and compare first and last characters
    // Increase start index and decrease end index until middle is reached
    for (let i = 0; i < str.length / 2; i++) {
        if (str[i] !== str[str.length - 1 - i]) {
            return false;
        }
    }
    
    return true;
}

// Function to generate all possible permutations of a string
Function permutations(str) {
    let result = [];
    
    // Base case: string length is 1
    if (str.length === 1) {
        return [str];
    }
    
    // Loop through characters in string
    for (let i = 0; i < str.length; i++) {
        // Get current character
        let char = str[i];
        
        // Get all permutations of remaining string (excluding current character)
        let subPerms = permutations(str.slice(0, i) + str.slice(i+1));
        
        // Concatenate current character with each permutation of remaining string
        for (let j = 0; j < subPerms.length; j++) {
            result.push(char + subPerms[j]);
        }
    }
    
    return result;
}
    
// Function to calculate the nth Fibonacci number
Function fibonacci(n) {
    // Base case for 0 and 1
    if (n === 0) {
        return 0;
    }
    
    if (n === 1) {
        return 1;
    }
    
    // Initialize array to store Fibonacci sequence
    let fibonacci = [0, 1];
    
    // Loop from 2 to n and calculate Fibonacci numbers
    for (let i = 2; i <= n; i++) {
        fibonacci.push(fibonacci[i-1] + fibonacci[i-2]);
    }
    
    // Return nth Fibonacci number
    return fibonacci[n];
}

// Class to create and manipulate a binary tree data structure
Class BinaryTree {
    // Constructor to initialize root node and size
    constructor() {
        this.root = null;
        this.size = 0;
    }
    
    // Function to insert a new node into the tree
    insert(value) {
        // Create new node with given value
        let newNode = new Node(value);
        
        // Check if root is null, if so set as root
        if (this.root === null) {
            this.root = newNode;
        } else {
            // Else, start at root and loop until insertion point is found
            let currentNode = this.root;
            
            while (true) {
                // If value is less than current node, go left
                if (value < currentNode.value) {
                    // If left child is null, insert node as left child
                    if (currentNode.left === null) {
                        currentNode.left = newNode;
                        break;
                    } else {
                        // Else, move to left child and continue loop
                        currentNode = currentNode.left;
                    }
                } else {
                    // If value is greater than or equal to current node, go right
                    // If right child is null, insert node as right child
                    if (currentNode.right === null) {
                        currentNode.right = newNode;
                        break;
                    } else {
                        // Else, move to right child and continue loop
                        currentNode = currentNode.right;
                    }
                }
            }
        }
        
        // Increase size of tree
        this.size++;
    }
    
    // Function to search for a value in the tree
    search(value) {
        // Start at root and loop until value is found or end of tree is reached
        let currentNode = this.root;
        
        while (currentNode) {
            // If value is equal to current node, return true
            if (value === currentNode.value) {
                return true;
            } else {
                if (value < currentNode.value) {
                    // If value is less than current node, go left
                    currentNode = currentNode.left;
                } else {
                    // If value is greater than current node, go right
                    currentNode = currentNode.right;
                }
            }
        }
        
        // Return false if value is not found
        return false;
    }
    
    // Function to pre-order traverse the tree and return an array of values
    preOrder() {
        let result = [];
        
        // Recursive helper function to traverse the tree
        function traverse(node) {
            // Push current node value to result array
            result.push(node.value);
            
            // If left child exists, traverse left subtree
            if (node.left) {
                traverse(node.left);
            }
            
            // If right child exists, traverse right subtree
            if (node.right) {
                traverse(node.right);
            }
        }
        
        // Start recursive traversal at root
        traverse(this.root);
        
        // Return result array
        return result;
    }
}

// Class to create and manipulate a priority queue data structure
Class PriorityQueue {
    // Constructor to initialize queue using binary heap data structure
    constructor() {
        this.heap = [];
    }
    
    // Function to enqueue an item into the queue
    enqueue(item, priority) {
        // Create new node with item and priority values
        let newNode = new Node(item, priority);
        
        // Push new node to end of heap array
        this.heap.push(newNode);
        
        // Get index of newly added node
        let childIndex = this.heap.length - 1;
        
        // Loop until child node is at correct position in heap
        while (childIndex > 0) {
            // Get parent index using heap index formula
            let parentIndex = Math.floor((childIndex - 1) / 2);
            
            // Stop if child priority is greater than parent priority
            if (this.heap[childIndex].priority >= this.heap[parentIndex].priority) {
                break;
            } else {
                // Otherwise, swap child and parent nodes and update child index
                let temp = this.heap[childIndex];
                this.heap[childIndex] = this.heap[parentIndex];
                this.heap[parentIndex] = temp;
                childIndex = parentIndex;
            }
        }
    }
    
    // Function to dequeue item with highest priority from queue and return it
    dequeue() {
        // Return null if queue is empty
        if (this.heap.length === 0) {
            return null;
        }
        
        // Store first node (highest priority) to return later
        let result = this.heap[0];
        
        // Move last node to first position and remove last node (highest priority)
        this.heap[0] = this.heap[this.heap.length - 1];
        this.heap.pop();
        
        // Get index of current node (first position)
        let current = 0;
        
        // Loop until node is at correct position in heap
        while (true) {
            // Get index of child nodes using heap index formula
            let leftChild = current * 2 + 1;
            let rightChild = current * 2 + 2;
            
            // Initialize variable to store index of node to be swapped with current node
            let toSwap = null;
            
            // If left child exists, compare priorities and update toSwap index if necessary
            if (leftChild < this.heap.length) {
                if (this.heap[current].priority > this.heap[leftChild].priority) {
                    toSwap = leftChild;
                }
            }
            
            // If right child exists, compare priorities and update toSwap index if necessary
            if (rightChild < this.heap.length) {
                if (this.heap[current].priority > this.heap[rightChild].priority) {
                    // If left child doesn't exist, update toSwap index to right child
                    // Else, compare priorities and update toSwap index if necessary
                    if (toSwap === null) {
                        toSwap = rightChild;
                    } else if (this.heap[rightChild].priority < this.heap[leftChild].priority) {
                        toSwap = rightChild;
                    }
                }
            }
            
            // Stop if neither child node has a lower priority
            if (toSwap === null) {
                break;
            } else {
                // Swap current node with toSwap node and update current index
                let temp = this.heap[toSwap];
                this.heap[toSwap] = this.heap[current];
                this.heap[current] = temp;
                current = toSwap;
            }
            
        }
        
        // Return node with highest priority
        return result;
    }
}