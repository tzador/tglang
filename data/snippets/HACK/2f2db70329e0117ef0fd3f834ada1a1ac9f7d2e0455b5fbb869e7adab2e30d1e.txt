// Define a function to reverse a string
function reverseString(string) {
  // Initialize an empty string to store the reversed string
  let reversedString = "";
  // Loop through each character in the string starting from the last character
  for (let i = string.length - 1; i >= 0; i--) {
    // Add the current character to the reversed string
    reversedString += string[i];
  }
  // Return the reversed string
  return reversedString;
}

// Define a function to generate a random number between two given numbers
function generateRandomNumber(min, max) {
  // Calculate the difference between the maximum and minimum numbers
  let difference = max - min;
  // Generate a random decimal number between 0 and the difference
  let randomNumber = Math.random() * difference;
  // Round the decimal number to an integer
  randomNumber = Math.round(randomNumber);
  // Add the minimum number to the random number to get a number between the given range
  randomNumber += min;
  // Return the random number
  return randomNumber;
}

// Define a function to check if a given number is prime
function isPrime(number) {
  // If the number is less than 2, it is not prime
  if (number < 2) {
    return false;
  }
  // Loop through all numbers from 2 to the given number, checking for evenly divisible numbers
  for (let i = 2; i < number; i++) {
    // If the number is evenly divisible, it is not prime
    if (number % i === 0) {
      return false;
    }
  }
  // If the loop finishes without finding any evenly divisible numbers, the number is prime
  return true;
}

// Define a function to encrypt a string using a Caesar cipher
function caesarCipher(string, key) {
  // Initialize an empty string to store the encrypted string
  let encryptedString = "";
  // Loop through each character in the string
  for (let i = 0; i < string.length; i++) {
    // Get the character code for the current character
    let charCode = string.charCodeAt(i);
    // Check if the character is a letter
    if (charCode >= 65 && charCode <= 90) {
      // Convert the character code to a number between 0 and 25
      charCode = (charCode - 65 + key) % 26;
      // Convert the number back to a character code
      charCode += 65;
    } else if (charCode >= 97 && charCode <= 122) {
      // Convert the character code to a number between 0 and 25
      charCode = (charCode - 97 + key) % 26;
      // Convert the number back to a character code
      charCode += 97;
    }
    // Add the encrypted character to the encrypted string
    encryptedString += String.fromCharCode(charCode);
  }
  // Return the encrypted string
  return encryptedString;
}

// Define a function to sort an array of numbers using the bubble sort algorithm
function bubbleSort(array) {
  // Loop through the array n - i times, where n is the number of elements in the array and i is the current loop index
  for (let i = 0; i < array.length; i++) {
    // Loop through the first n - 1 elements in the array
    for (let j = 0; j < (array.length - i - 1); j++) {
      // If the current element is larger than the next element, swap them
      if (array[j + 1] < array[j]) {
        let temp = array[j + 1];
        array[j + 1] = array[j];
        array[j] = temp;
      }
    }
  }
  // Return the sorted array
  return array;
}

// Define a function to calculate the factorial of a given number
function factorial(number) {
  // If the number is 0 or 1, the factorial is 1
  if (number === 0 || number === 1) {
    return 1;
  }
  // Loop through all numbers from 2 to the given number, multiplying each number by the previous result
  for (let i = 2; i <= number; i++) {
    number *= i;
  }
  // Return the factorial
  return number;
}