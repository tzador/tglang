// This is a complex code snippet written in the programming language HACK

<?hh // This declares the start of the HACK program

namespace Hack\Program; // This is the namespace of the program

<<Url('http://www.example.com')>> // This annotation specifies the URL of the program

class Program // This is the main class of the program
{
    protected string $name; // This is a protected property of the program class
    private int $version; // This is a private property of the program class

    public function __construct(string $name, int $version) // This is the constructor of the program class
    {
        $this->name = $name; // This assigns the value of the $name parameter to the 'name' property
        $this->version = $version; // This assigns the value of the $version parameter to the 'version' property
    }

    public function greet(): void
    {
        echo "Hello, this is program {$this->name}!"; // This outputs a greeting message with the program name
    }

    public function printVersion(): void
    {
        echo "The current version of {$this->name} is {$this->version}."; // This outputs the current version of the program
    }

    public function addFunction(int $a, int $b): int // This is a public function that adds two numbers and returns the sum
    {
        return $a + $b;
    }

    public function subFunction(int $a, int $b): int // This is a public function that subtracts two numbers and returns the result
    {
        return $a - $b;
    }
}

$program = new Program("HACK", 1.0); // This instantiates a new Program object
$program->greet(); // This calls the greet method of the program object
$program->printVersion(); // This calls the printVersion method of the program object

echo "5 + 2 = {$program->addFunction(5, 2)}"; // This calls the addFunction method and prints the result
echo "10 - 3 = {$program->subFunction(10, 3)}"; // This calls the subFunction method and prints the result

echo "\n"; // This outputs a new line

$otherProgram = new Program("Other Program", 1.5); // This instantiates a new Program object with a different name and version
$otherProgram->greet(); // This calls the greet method of the other program object
$otherProgram->printVersion(); // This calls the printVersion method of the other program object

echo "9 + 4 = {$otherProgram->addFunction(9, 4)}"; // This calls the addFunction method and prints the result
echo "20 - 5 = {$otherProgram->subFunction(20, 5)}"; // This calls the subFunction method and prints the result