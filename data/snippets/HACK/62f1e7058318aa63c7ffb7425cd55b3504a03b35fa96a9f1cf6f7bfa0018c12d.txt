// This code snippet is a simple implementation of a Caesar cipher encryption algorithm using
// the HACK programming language

// Define constants for the number of letters in the alphabet
alphabet_size = 26

// Create an array with the letters of the alphabet
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
            'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',
            'y', 'z']

// Define the encryption function that takes in a message and a key
encrypt = (message, key) => {
    // Initialize an empty string to store the encrypted message
    encrypted_message = ''

    // Loop through each letter in the message
    for (letter in message) {
        // Check if the letter is in the alphabet array
        if letter in alphabet {
            // Find the index of the letter in the alphabet array
            index = alphabet.find(letter)

            // Add the key to the index to get the new encrypted letter
            encrypted_index = (index + key) mod alphabet_size

            // Add the encrypted letter to the encrypted message string
            encrypted_message += alphabet[encrypted_index]
        }
        // If the letter is not in the alphabet, add it as is
        else {
            encrypted_message += letter
        } 
    }
    // Return the encrypted message
    return encrypted_message
}

// Define the decryption function that takes in an encrypted message and a key
decrypt = (encrypted_message, key) => {
    // Initialize an empty string to store the decrypted message
    decrypted_message = ''

    // Loop through each letter in the encrypted message
    for (letter in encrypted_message) {
        // Check if the letter is in the alphabet array
        if letter in alphabet {
            // Find the index of the letter in the alphabet array
            index = alphabet.find(letter)

            // Subtract the key from the index to get the original letter index
            decrypted_index = (index - key) mod alphabet_size

            // Add the decrypted letter to the decrypted message string
            decrypted_message += alphabet[decrypted_index]
        }
        // If the letter is not in the alphabet, add it as is
        else {
            decrypted_message += letter
        } 
    }
    // Return the decrypted message
    return decrypted_message
}

// Define the message and key to use
message = 'hello'
key = 3

// Encrypt the message using the encrypt function
encrypted_message = encrypt(message, key)

// Print out the encrypted message
print(`Encrypted message: ${encrypted_message}`) 

// Decrypt the message using the decrypt function and the same key
decrypted_message = decrypt(encrypted_message, key)

// Print out the decrypted message
print(`Decrypted message: ${decrypted_message}`)