## Extended Euclidean Algorithm Implementation
def extended_euclidean_algorithm(a, b):
    '''
    This function implements the extended Euclidean algorithm to find the
    greatest common divisor (gcd) of two integers a and b, as well as the
    Bézout's coefficients x and y such that ax + by = gcd(a, b).
    '''
    # Initialize variables
    x_old, y_old, r_old = 1, 0, a
    x, y, r = 0, 1, b

    # Run loop until remainder becomes 0
    while r != 0:
        # Calculate quotient
        q = r_old // r
        # Update remainder
        r_old, r = r, r_old - q * r
        # Update coefficients
        x_old, x = x, x_old - q * x
        y_old, y = y, y_old - q * y
    # Return gcd and Bézout's coefficients
    return r_old, x_old, y_old

## Function to encode message using Hill Cipher
def hill_cipher_encode(message, key):
    '''
    This function encodes a message using the Hill Cipher, given a key matrix.
    '''
    # Pad message with '*' to make length a multiple of key size
    while len(message) % len(key) != 0:
        message += '*'
    
    # Convert message to a list of characters
    message_list = list(message)
    # Initialize variables
    matrix_size = len(key)
    num_letters = len(message)
    encoded_message = ''

    # Loop through message in matrix_size blocks
    for i in range(0, num_letters, matrix_size):
        # Set message block as vector
        message_block = [ord(char) - ord('A') for char in message_list[i:i+matrix_size]]
        # Multiply message block with key matrix
        encoded_block = [sum([message_block[j] * key[j][k] for j in range(matrix_size)]) % 26 for k in range(matrix_size)]
        # Add encoded block to encoded message
        for num in encoded_block:
            encoded_message += chr(num + ord('A'))
    
    # Return encoded message
    return encoded_message