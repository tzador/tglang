!#### COMMENT SECTION ####

### VARIABLES ###
# Declaration of variables v1 and v2
:var v1
:var v2

:print "Enter a value for v1: "

# User input for v1 variable
:read v1

:print "Enter a value for v2: "

# User input for v2 variable
:read v2

### CONDITIONAL STATEMENTS ###
# If else statement to check if v1 is equal to v2
:if v1 = v2
    # Print message if v1 and v2 are equal
    :print "v1 is equal to v2"

:else
    # Calculate the sum of v1 and v2
    :sum v1 v2
    # Print the sum
    :print "The sum of v1 and v2 is " 
    :print $sum

### LOOPS ###
# Initialize a counter variable
:var count = 1

# While loop to print numbers from 1 to 5
:while count <= 5
    :print count
    # Increment the counter variable by 1
    :set count += 1

### FUNCTIONS ###
# A function to square a number
# Parameters: num - number to be squared
# Returns: result - the squared value of num
:function square(num)
    # Initialize a variable to store the squared value
    :var result
    # Calculate the square
    :assign result = num * num
    # Return the result
    :return result

# Call the square function with v1 as input
:square v1
# Store the result in a variable
:var squared = $return
# Print the result
:print "The square of v1 is " 
:print squared

### ARRAYS AND DICTIONARIES ###
# Declare an array
:array fruits = ["apple", "banana", "orange"]

# Print the first element of the array
:print "The first fruit is " 
:print $fruits[0]

# Declare a dictionary
:dict info = {"name": "John", "age": 25, "gender": "male"}

# Print the value for the "age" key
:print "John's age is " 
:print $info["age"]

### FILE HANDLING ###
# Open a file for writing
:open file.txt :write
# Write a line to the file
:write "This is a line in the file"
# Close the file
:close file.txt

# Open the file for reading
:open file.txt :read
# Read the first line and store it in a variable
:readline line1
# Print the line
:print line1
# Close the file
:close file.txt

### OBJECT ORIENTED PROGRAMMING ###
# Create a class called Person
:class Person
    # Attributes of the class
    :attributes name, age, gender
    # Constructor to initialize the attributes
    :set_constructor(name, age, gender)
        :assign self.name = name
        :assign self.age = age
        :assign self.gender = gender
    # Method to print the person's name
    :method print_name()
        :print "Person's name is " 
        :print self.name

# Create an object of the Person class
:object john
# Call the constructor and pass in the values
:call john.set_constructor("John", 25, "male")
# Call the print_name method
:call john.print_name()    

### MULTITHREADING ###
# Create a thread to print a message
:thread print_message("Hello from a thread!")
# Start the thread
:start_thread print_message 

# Create another thread to print another message
:thread print_another_message("Hello again from another thread!")
:start_thread print_another_message

# Print a message from the main thread
:print "Hello from the main thread"

# Output:
# Enter a value for v1: 5
# Enter a value for v2: 5
# v1 is equal to v2
# The sum of v1 and v2 is 10
# 1
# 2
# 3
# 4
# 5
# The square of v1 is 25
# The first fruit is apple
# John's age is 25
# This is a line in the file
# Person's name is John
# Hello from the main thread
# Hello from a thread!
# Hello again from another thread!