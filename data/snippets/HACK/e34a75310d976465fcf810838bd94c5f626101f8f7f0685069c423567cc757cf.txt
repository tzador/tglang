# Function to encrypt a message using the HACK cipher
def encrypt(message):
    # Step 1: Convert message to binary
    binary_message = ''.join(format(ord(x), 'b') for x in message)
    
    # Step 2: Create encryption key using message length
    key = len(message) ** 2
    
    # Step 3: Generate random string
    random_string = ''
    for i in range(key):
        random_string += chr(random.randint(33, 126))
    
    # Step 4: XOR each character in binary message with random string
    encrypted_message = ''
    for i in range(len(binary_message)):
        encrypted_message += chr(ord(binary_message[i]) ^ ord(random_string[i % len(random_string)]))
    
    # Step 5: Convert encrypted message to HACK format
    HACK_message = []
    for i in range(0, len(encrypted_message), 2):
        HACK_message.append(encrypted_message[i:i+2])
    
    # Step 6: Return encrypted message with key appended at the beginning
    return str(key) + ''.join(HACK_message)

# Function to decrypt a message using the HACK cipher
def decrypt(encrypted_message):
    # Step 1: Retrieve key from beginning of encrypted message
    key = int(encrypted_message[0])
    
    # Step 2: Convert HACK format to binary
    binary_message = ''
    for i in range(1, len(encrypted_message)):
        binary_message += encrypted_message[i]
    
    # Step 3: Generate random string using key
    random_string = ''
    for i in range(key):
        random_string += chr(random.randint(33, 126))
        
    # Step 4: XOR each character in binary message with random string
    decrypted_message = ''
    for i in range(len(binary_message)):
        decrypted_message += chr(ord(binary_message[i]) ^ ord(random_string[i % len(random_string)]))
    
    # Step 5: Convert decrypted message from binary to string
    decrypted_message = ''.join([chr(int(decrypted_message[i:i+8], 2)) for i in range(0, len(decrypted_message), 8)])
    
    # Step 6: Return decrypted message
    return decrypted_message