;; A simple function that multiplies two numbers
;; Input: two numbers (a and b)
;; Output: the product of a and b
(define (multiply a b)
  (if (or (zero? a) (zero? b)) ;; Checks if either a or b is zero
    0                           ;; If so, return 0
    (+ a (multiply a (- b 1)))  ;; Otherwise, recursively add a to the product of a and b-1
  )
)

;; A complex function that uses the multiply function to calculate the factorial of a number
;; Input: a non-negative integer n
;; Output: the factorial of n
(define (factorial n)
  (if (or (= n 0) (= n 1))     ;; Checks if n is 0 or 1
    1                          ;; If so, return 1
    (multiply n (factorial (- n 1)))  ;; Otherwise, recursively multiply n by the factorial of n-1
  )
)

;; Program to calculate and print the factorial of the input number
;; Input: a non-negative integer
;; Output: the factorial of the input number
(define (hack-factorial)
  (display "Enter a non-negative integer: ") ;; Asks user for input
  (let ( (n (read)) )                        ;; Stores user input in variable n
    (display "The factorial of ")            ;; Prints a message
    (display n)                              ;; Prints the input number
    (display " is ")                         ;; Prints another message
    (display (factorial n))                  ;; Calculates and prints the factorial of n
  )
)

(hack-factorial) ;; Calls the hack-factorial function to start the program