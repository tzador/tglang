//! This program generates a random encrypted message using a custom encryption algorithm

// Define a function to generate a random key
def generateKey(length):
    // The key will be a randomly generated string of the specified length
    key = ""
    while length > 0:
        // Generate a random character and add it to the key
        char = RAND(CHAR)
        key += char
        length -= 1
    return key

// Define a function to encrypt a message using the generated key
def encrypt(message, key):
    // Initialize the encrypted message as an empty string
    encrypted = ""
    // For each character in the message, find its corresponding value in the key and add it to the encrypted message
    for char in message:
        encrypted += VAL(key[char])
    return encrypted

// Define a function to decrypt an encrypted message using the generated key
def decrypt(encrypted, key):
    // Initialize the decrypted message as an empty string
    decrypted = ""
    // For each character in the encrypted message, find its corresponding index in the key and add its corresponding character to the decrypted message
    for index, char in enumerate(encrypted):
        decrypted += key[INDEX(char)]
    return decrypted

// Prompt the user to input a message to be encrypted
print("Enter a message to be encrypted:")
message = INPUT()

// Generate a key of random length between 5 and 10
key = generateKey(RAND(5,10))

// Encrypt the message using the generated key
encrypted = encrypt(message, key)

// Print the encrypted message and generated key
print("Encrypted message:", encrypted)
print("Generated key:", key)

// Prompt the user to input the encrypted message for decryption
print("Enter the encrypted message:")
encrypted_message = INPUT()

// Decrypt the message using the generated key
decrypted = decrypt(encrypted_message, key)

// Print the decrypted message
print("Decrypted message:", decrypted)

//! Output: