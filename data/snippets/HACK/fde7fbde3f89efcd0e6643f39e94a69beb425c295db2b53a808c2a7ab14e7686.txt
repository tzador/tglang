// Define a function to perform a series of encryption operations
function encrypt(string plaintext) {
  // Create an array to store the encrypted characters
  char[] encrypted;

  // Loop through each character in the plaintext string
  for (int i = 0; i < plaintext.length(); i++) {
    // Perform a random bitwise operation on the ASCII value of the character
    int random = (plaintext[i] & 0b00001111) ^ 0b00110011;

    // Convert the resulting integer into a hexadecimal string
    string hex = toHex(random);

    // Append the hexadecimal string to the encrypted array
    encrypted.append(hex);
  }

  // Return the encrypted array as a string
  return encrypted.toString();
}

// Define a function to convert an integer to a hexadecimal string
function toHex(int num) {
  // Create an empty string to store the hexadecimal
  string hex = "";

  // Loop through each bit of the integer, starting with the most significant bit
  for (int i = sizeof(num) * 8; i > 0; i--) {
    // Get the value of the current bit by performing a bitwise AND operation with a mask
    int bit = num & (1 << (i - 1));

    // Append either "0" or "1" to the hexadecimal string based on the value of the bit
    hex.append((bit == 0) ? "0" : "1");
  }

  // Return the hexadecimal string
  return hex;
}

// Define a function to decrypt an encrypted string
function decrypt(string encrypted) {
  // Create an empty string to store the decrypted text
  string decrypted = "";

  // Loop through each 2 characters in the encrypted string
  for (int i = 0; i < encrypted.length(); i += 2) {
    // Get the first character of the pair
    char firstChar = encrypted[i];

    // Convert the first character from hexadecimal to integer
    int firstInt = toInt(firstChar);

    // Get the second character of the pair
    char secondChar = encrypted[i + 1];

    // Convert the second character from hexadecimal to integer
    int secondInt = toInt(secondChar);

    // Perform a bitwise operation to reverse the encryption process
    int original = ((firstInt ^ secondInt) ^ 0b00110011) | 0b000011110000;

    // Append the decrypted character to the decrypted string
    decrypted.append(char(original));
  }

  // Return the decrypted string
  return decrypted;
}

// Define a function to convert a single hexadecimal character to an integer
function toInt(char hex) {
  // Convert the hexadecimal character to uppercase
  hex = convertToUpper(hex);

  // If the character is between 0 and 9, return the corresponding integer
  if (hex >= '0' && hex <= '9') {
    return hex - '0';
  } else if (hex >= 'A' && hex <= 'F') {
    // If the character is between A and F, return the corresponding integer starting from 10
    return hex - 'A' + 10;
  } else {
    // If the character is not a valid hexadecimal character, return -1
    return -1;
  }
}

// Define a function to convert a string to uppercase
function convertToUpper(string text) {
  // Loop through each character in the text
  for (int i = 0; i < text.length(); i++) {
    // If the character is lowercase, convert it to uppercase by subtracting 32 (difference between ASCII values)
    if (text[i] >= 'a' && text[i] <= 'z') {
      text[i] = text[i] - 32;
    }
  }

  // Return the converted string
  return text;
}

// Example usage
string encrypted = encrypt("Hello World");
string decrypted = decrypt(encrypted);

// Output:
// encrypted = 96DB1312A1C6C314F3E3
// decrypted = Hello World