/**
 * This code snippet creates a custom data structure in HACK.
 * The custom data structure is a circular doubly linked list.
 */

class DoublyLinkedList {
    public $head; // points to the first node in the list
    public $tail; // points to the last node in the list
    public $size; // indicates the size of the list

    /**
     * Constructor function to initialize the list with head and tail set to null and size set to 0.
     */
    public function __construct() {
        $this->head = null;
        $this->tail = null;
        $this->size = 0;
    }

    /**
     * Function to add a node to the beginning of the list.
     * @param $data - the data to be stored in the node
     */
    public function pushFront($data) {
        $newNode = new Node($data); // create a new node
        if ($this->head == null) { // if list is empty, set new node as head and tail
            $this->head = $newNode;
            $this->tail = $newNode;
            $newNode->next = $this->head; // point new node's next to itself
            $newNode->prev = $this->tail; // point new node's prev to itself
        } else { // if list is not empty
            $this->head->prev = $newNode; // point current head's prev to new node
            $newNode->next = $this->head; // point new node's next to current head
            $newNode->prev = $this->tail; // point new node's prev to current tail
            $this->tail->next = $newNode; // point current tail's next to new node
            $this->head = $newNode; // set new node as head
        }
        $this->size++; // increase size by 1
    }

    /**
     * Function to add a node to the end of the list.
     * @param $data - the data to be stored in the node
     */
    public function pushBack($data) {
        $newNode = new Node($data); // create a new node
        if ($this->head == null) { // if list is empty, set new node as head and tail
            $this->head = $newNode;
            $this->tail = $newNode;
            $newNode->next = $this->head; // point new node's next to itself
            $newNode->prev = $this->tail; // point new node's prev to itself
        } else { // if list is not empty
            $this->tail->next = $newNode; // point current tail's next to new node
            $newNode->prev = $this->tail; // point new node's prev to current tail
            $newNode->next = $this->head; // point new node's next to current head
            $this->head->prev = $newNode; // point current head's prev to new node
            $this->tail = $newNode; // set new node as tail
        }
        $this->size++; // increase size by 1
    }

    /**
     * Function to remove a node from the beginning of the list.
     */
    public function popFront() {
        if ($this->isEmpty()) { // if list is empty, cannot remove
            throw new Exception('List is empty');
        } elseif ($this->size == 1) { // if list has only 1 node, set head and tail to null
            $this->head = null;
            $this->tail = null;
        } else { // if list has more than 1 node
            $this->head = $this->head->next; // set head as the current head's next node
            $this->tail->next = $this->head; // point current tail's next to new head
            $this->head->prev = $this->tail; // point new head's prev to current tail
        }
        $this->size--; // decrease size by 1
    }

    /**
     * Function to remove a node from the end of the list.
     */
    public function popBack() {
        if ($this->isEmpty()) { // if list is empty, cannot remove
            throw new Exception('List is empty');
        } elseif ($this->size == 1) { // if list has only 1 node, set head and tail to null
            $this->head = null;
            $this->tail = null;
        } else { // if list has more than 1 node
            $this->tail = $this->tail->prev; // set tail as the current tail's prev node
            $this->head->prev = $this->tail; // point current head's prev to new tail
            $this->tail->next = $this->head; // point new tail's next to current head
        }
        $this->size--; // decrease size by 1
    }

    /**
     * Function to check if the list is empty.
     * @return bool - true if list is empty, false otherwise
     */
    public function isEmpty() {
        return ($this->size == 0);
    }

    /**
     * Function to print the list in forward traversal.
     */
    public function printList() {
        $current = $this->head;
        for ($i = 0; $i < $this->size; $i++) {
            echo $current->data.' ';
            $current = $current->next;
        }
    }

    /**
     * Function to print the list in backward traversal.
     */
    public function printBackList() {
        $current = $this->tail;
        for ($i = 0; $i < $this->size; $i++) {
            echo $current->data.' ';
            $current = $current->prev;
        }
    }
}

/**
 * Class to represent a node in the circular doubly linked list.
 */
class Node {
    public $data; // the data stored in the node
    public $next; // pointer to the next node
    public $prev; // pointer to the previous node

    /**
     * Constructor function to initialize the node with given data.
     * @param $data - the data to be stored in the node
     */
    public function __construct($data) {
        $this->data = $data; // store data in node
        $this->next = null; // set next pointer to null
        $this->prev = null; // set prev pointer to null
    }
}

$list = new DoublyLinkedList(); // create a new list
$list->pushFront(5); // add nodes to the list
$list->pushFront(4);
$list->pushBack(6);
$list->printList(); // print the list
$list->popFront(); // remove node from beginning
$list->popBack(); // remove node from end
$list->printList(); // print the updated list