# This code snippet generates a random maze using depth-first search algorithm

# Import libraries
!PUSH "lib/std.h" 
!PUSH "lib/random.h"

# Define global variables
*RANDOM_SEED = 1337
*RANDOM_INDEX = 0
*MAZE_SIZE = 10
*VISITED = false

# Define functions
FUNC randomize() {
    RANDOM_INDEX = RAND(RANDOM_SEED)
}

FUNC createMaze() {

    # Initialize maze grid
    *maze = new Array[*MAZE_SIZE][*MAZE_SIZE]

    # Mark all cells as unvisited
    for *x from 0 to *MAZE_SIZE {
        for *y from 0 to *MAZE_SIZE {
            maze[*x][*y] = UNVISITED
        }
    }

    # Create stack to keep track of visited cells
    STACK *stack = new STACK[*MAZE_SIZE^2]

    # Choose random starting position
    *x = RANDOM_INDEX % *MAZE_SIZE
    *y = RANDOM_INDEX / *MAZE_SIZE

    # Mark starting position as visited
    maze[*x][*y] = *VISITED

    # Push starting position onto stack
    stack.push(*x, *y)

    # Loop until all cells are visited
    while (stack.isEmpty() != true) {

        # Get current cell
        *x, *y = stack.top()

        # Create array to store unvisited neighbouring cells
        ARRAY *unvisited = new ARRAY()

        # Check neighbouring cells for unvisited cells
        # Top
        if *x > 0 and maze[*x-1][*y] == !VISITED) {
            unvisited.push(*x-1, *y)
        }
        # Right
        if *y < *MAZE_SIZE-1 and maze[*x][*y+1] == !VISITED) {
            unvisited.push(*x, *y+1)
        }
        # Bottom
        if *x < *MAZE_SIZE-1 and maze[*x+1][*y] == !VISITED) {
            unvisited.push(*x+1, *y)
        }
        # Left
        if *y > 0 and maze[*x][*y-1] == !VISITED) {
            unvisited.push(*x, *y-1)
        }

        # Choose random unvisited neighbour
        randomize()
        *nextCell = unvisited[RANDOM_INDEX % unvisited.length()]

        # Remove walls between current and next cell
        *nextX, *nextY = *nextCell
        if (*nextX == *x - 1) {
            maze[*x][*y].walls[TOP] = false
            maze[*nextX][*nextY].walls[BOTTOM] = false
        } else if (*nextX == *x + 1) {
            maze[*x][*y].walls[BOTTOM] = false
            maze[*nextX][*nextY].walls[TOP] = false
        } else if (*nextY == *y - 1) {
            maze[*x][*y].walls[LEFT] = false
            maze[*nextX][*nextY].walls[RIGHT] = false
        } else if (*nextY == *y + 1) {
            maze[*x][*y].walls[RIGHT] = false
            maze[*nextX][*nextY].walls[LEFT] = false
        }

        # Mark next cell as visited and push onto stack
        maze[*nextX][*nextY] = *VISITED
        stack.push(*nextX, *nextY)
    }

    # Print maze
    for *x from 0 to *MAZE_SIZE {
        for *y from 0 to *MAZE_SIZE {
            # If cell is visited, print a space
            if maze[*x][*y] == *VISITED {
                print(" ")
            # If cell is unvisited, print a wall
            } else {
                print("#")
            }
        }
        # Print new line
        print("\n")
    }
}

# Call function to create maze
createMaze()