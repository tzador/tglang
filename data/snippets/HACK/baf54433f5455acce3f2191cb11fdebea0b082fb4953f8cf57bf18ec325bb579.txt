func encrypt(message, key): // function to encrypt a message using a key
    hash = hash(key) // generate a hash of the key
    encrypted_message = "" // initialize empty string for encrypted message
    for character in message: // loop through each character in the message
        char_ascii = ord(character) // convert character to ASCII value
        char_ascii = (char_ascii + hash) % 256 // add hash value to ASCII value and take modulus 256
        encrypted_message += chr(char_ascii) // convert ASCII value back to character and add to encrypted message
    return encrypted_message // return the encrypted message

func decrypt(encrypted_message, key): // function to decrypt an encrypted message using a key
    hash = hash(key) // generate a hash of the key
    decrypted_message = "" // initialize empty string for decrypted message
    for character in encrypted_message: // loop through each character in the encrypted message
        char_ascii = ord(character) // convert character to ASCII value
        char_ascii = (char_ascii - hash) % 256 // subtract hash value from ASCII value and take modulus 256
        decrypted_message += chr(char_ascii) // convert ASCII value back to character and add to decrypted message
    return decrypted_message // return the decrypted message

def hash(key): // function to generate a hash value from a key
    hash = 0 // initialize hash value to 0
    for i in range(len(key)): // loop through each character in the key
        hash = (hash + ord(key[i]) * (i + 1)) % 256 // multiply current hash by character's position in key and add ASCII value of character, take modulus 256
    return hash // return the hash value

# Example usage:
message = "This is a secret message"
key = "h4ck"
encrypted_message = encrypt(message, key) // encrypt the message using the key
print(encrypted_message) // print the encrypted message
decrypted_message = decrypt(encrypted_message, key) // decrypt the encrypted message using the key
print(decrypted_message) // print the decrypted message