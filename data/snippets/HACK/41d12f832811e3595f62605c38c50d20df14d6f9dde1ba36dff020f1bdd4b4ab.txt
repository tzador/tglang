// The following code implements a simple Linked List data structure in HACK programming language

// Define a class for the Linked List
class LinkedList {
  Node head; // The head (first node) of the Linked List
  int size; // The size of the Linked List

  // Constructor function for the Linked List class
  constructor() {
    head = null; // Initialize the head to null (empty)
    size = 0; // Initialize the size to 0
  }

  // Function to check if the Linked List is empty
  function isEmpty() {
    if (head == null) { // If the head is null, the Linked List is empty
      return true;
    } else {
      return false;
    }
  }

  // Function to add a new node to the Linked List
  function add(element) {
    Node newNode = new Node(element); // Create a new node with the given element
    if (isEmpty()) { // If the Linked List is empty, the new node becomes the head
      head = newNode;
    } else { // If the Linked List is not empty, add the new node to the end
      Node currentNode = head;
      while (currentNode.next != null) { // Loop until the end of the Linked List is reached
        currentNode = currentNode.next;
      }
      currentNode.next = newNode; // Add the new node to the end
    }
    size++; // Increment the size of the Linked List
  }

  // Function to remove a node from the Linked List
  function remove(element) {
    if (!isEmpty()) { // If the Linked List is not empty
      if (head.element == element) { // If the first node is the one to be removed
        head = head.next; // Set the head to the next node
        size--; // Decrement the size of the Linked List
      } else { // If the node to be removed is not the first one
        Node currentNode = head;
        while (currentNode.next != null && currentNode.next.element != element) { // Loop until the node to be removed is found
          currentNode = currentNode.next;
        }
        if (currentNode.next != null) { // If the node to be removed is found
          currentNode.next = currentNode.next.next; // Skip over the node to be removed
          size--; // Decrement the size of the Linked List
        }
      }
    }
  }

  // Function to get the size of the Linked List
  function getSize() {
    return size; // Return the size of the Linked List
  }

  // Function to print the Linked List
  function printList() {
    Node currentNode = head;
    string output = ""; // Empty string to store the elements of the Linked List
    while (currentNode != null) { // Loop through each node in the Linked List
      output = output + currentNode.element + " "; // Add the element to the string
      currentNode = currentNode.next; // Move to the next node
    }
    return output; // Return the string of elements
  }
}

// Define a class for the nodes of the Linked List
class Node {
  int element; // The value stored in the node
  Node next; // Pointer to the next node

  // Constructor function for the Node class
  constructor(element) {
    this.element = element; // Set the element of the node to the given value
    next = null; // Initialize the next pointer to null (empty)
  }
}

// Create a new Linked List
LinkedList list = new LinkedList();

// Add elements to the Linked List
list.add(5);
list.add(2);
list.add(7);
list.add(4);

// Print the Linked List
print(list.printList()); // Output: 5 2 7 4

// Remove an element from the Linked List
list.remove(2); // Removes the element 2

// Print the Linked List again
print(list.printList()); // Output: 5 7 4

// Get the size of the Linked List
print(list.getSize()); // Output: 3