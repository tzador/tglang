def generate_key(plaintext, key_length):
    """
    Function to generate encryption key using given plaintext and key length.
    :param plaintext: The string that will be encrypted.
    :param key_length: The desired length of the encryption key.
    :return: The encryption key as a string.
    """
    
    key = ""
    index = 0
    
    # Loop until the key is the desired length
    while len(key) < key_length:
        
        # Get the next character in the plaintext
        char = plaintext[index]
        
        # Convert the character to its ASCII code
        ascii_code = ord(char)
        
        # Get the next character in the key
        key_char = key[index] if index < len(key) else key[0]
        
        # Convert the character to its ASCII code
        key_ascii = ord(key_char)
        
        # Perform bitwise XOR on the plaintext and key ASCII codes
        xor = ascii_code ^ key_ascii
        
        # Convert the result back to a character
        xor_char = chr(xor)
        
        # Append the character to the key
        key += xor_char
        
        # Increment the index
        index += 1
    
    return key
    

def encrypt(plaintext, key):
    """
    Function to encrypt a given plaintext using a given encryption key.
    :param plaintext: The string that will be encrypted.
    :param key: The encryption key as a string.
    :return: The encrypted message as a string.
    """
    
    # Initialize an empty string to store the encrypted message
    encrypted = ""
    
    # Loop through each character in the plaintext
    for char in plaintext:
        
        # Convert the character to its ASCII code
        ascii_code = ord(char)
        
        # Get the next character in the key
        key_char = key[index] if index < len(key) else key[0]
        
        # Convert the character to its ASCII code
        key_ascii = ord(key_char)
        
        # Perform bitwise XOR on the plaintext and key ASCII codes
        xor = ascii_code ^ key_ascii
        
        # Convert the result back to a character
        xor_char = chr(xor)
        
        # Append the encrypted character to the result string
        encrypted += xor_char
        
    return encrypted