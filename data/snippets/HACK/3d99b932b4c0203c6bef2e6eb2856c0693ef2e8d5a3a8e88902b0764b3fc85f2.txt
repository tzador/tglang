// Generate a random prime number with at least 15 digits
// This function uses a probabilistic algorithm to generate the prime number
// with an accuracy of 1 - (1/2)^probability iterations

// Define the probability constant
CONST PROBABILITY = 1000

// Initialize variables
var prime = 0
var iterations = 0
var isPrime = true

// Function to check if a number is prime
FUNC checkPrime(num):
    // Base case: 2 is the smallest prime number
    IF num == 2:
        RETURN true

    // Check if number is even
    IF num % 2 == 0:
        RETURN false

    // Initialize divisor
    var divisor = 3

    // Loop while divisor is less than square root of number
    WHILE divisor * divisor <= num:
        // Check if number is divisible by divisor
        IF num % divisor == 0:
            RETURN false

        // Increment divisor by 2 (odd numbers only)
        divisor += 2

    // Number is prime
    RETURN true

// Loop until a prime number with at least 15 digits is generated
WHILE prime < 1e14:
    // Generate a random number between 1e14 and 1e15
    prime = RANDOM(1e14, 1e15)

    // Reset number of iterations for each number
    iterations = 0

    // Loop until desired accuracy is achieved or too many iterations
    WHILE iterations < PROBABILITY AND isPrime:
        // Check if number is prime
        isPrime = checkPrime(prime)

        // If number is not prime, generate a new random number
        IF !isPrime:
            prime = RANDOM(1e14, 1e15)

        // Increment iterations
        iterations += 1

    // If the number is still not prime after desired iterations,
    // generate a new random number
    IF !isPrime:
        prime = 0

// Print the generated prime number
PRINT "Random prime number with at least 15 digits: " + prime