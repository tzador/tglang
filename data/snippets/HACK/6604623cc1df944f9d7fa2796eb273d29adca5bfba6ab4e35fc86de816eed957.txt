/*
  Function: getLargestPrimeFactor
  Parameters:
    - n: Integer value
  Description:
    - This function calculates and returns the largest prime factor of a given integer value.
    - It uses a brute force approach by checking all possible factors starting from the square root of the given integer.
  Returns:
    - largestPrime: Integer value representing the largest prime factor of the given integer.
*/
function getLargestPrimeFactor(n) {
  let largestPrime = 0;

  // loop through all possible factors starting from the square root of the given integer
  for (let i = Math.floor(Math.sqrt(n)); i > 1; i--) {
    // check if current factor is a prime number
    if (isPrime(i)) {
      // check if current factor is also a factor of the given integer
      if (n % i === 0) {
        largestPrime = i;
        break; // break out of the loop if largest prime factor is found
      }
    }
  }

  return largestPrime;
}

/*
  Function: isPrime
  Parameters:
    - n: Integer value
  Description:
    - This function checks if a given integer value is a prime number.
  Returns:
    - boolean: True if the given integer is prime, False otherwise.
*/
function isPrime(n) {
  // 1 is not a prime number
  if (n === 1) return false;

  // 2 is the only even prime number
  if (n === 2) return true;

  // check if n is a multiple of 2 (which means it is not prime)
  if (n % 2 === 0) return false;

  // loop through all odd numbers starting from 3 until the square root of n
  // we can skip even numbers since they are not prime
  for (let i = 3; i <= Math.sqrt(n); i += 2) {
    // check if n is a multiple of the current number (which means it is not prime)
    if (n % i === 0) return false;
  }

  return true;
}