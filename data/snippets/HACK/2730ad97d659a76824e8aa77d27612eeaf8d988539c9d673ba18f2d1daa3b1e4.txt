# This code snippet implements a quicksort algorithm in HACK language 

DEFINE QUICKSORT(array, low, high)
{
    IF low < high //checks if there are more than one element in the array
        pivot_index = PARTITION(array, low, high) //calls the partition function to find the pivot element
        QUICKSORT(array, low, pivot_index - 1) //recursive call to sort the elements smaller than the pivot
        QUICKSORT(array, pivot_index + 1, high) //recursive call to sort the elements greater than the pivot
}

DEFINE PARTITION(array, low, high)
{
    pivot = array[high] //sets the pivot element to the last element in the array
    i = low - 1 //keeps track of the index of the smaller element
    FOR j = low TO high-1 //loops through the array
    {
        IF array[j] < pivot //compares each element to the pivot
            i = i + 1 //increase the index of the smaller element
            SWAP(array, i, j) //swaps the element at i with the element at j
    }
    SWAP(array, i + 1, high) //places the pivot element in its correct position
    RETURN i + 1 //returns the index of the pivot element
}

DEFINE SWAP(array, index1, index2)
{
    temp = array[index1] //stores the value of array[index1] in a temp variable
    array[index1] = array[index2] //replaces the value at index1 with the value at index2
    array[index2] = temp //places the value of temp at index2
}

SET array = [5,2,7,1,3] //array to be sorted
QUICKSORT(array, 0, 4) //calls the QUICKSORT function with the initial parameters
PRINT array //prints the sorted array [1,2,3,5,7]