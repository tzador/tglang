# Define a function to generate a random string
def generate_string(length):
    '''
    `generate_string()` function takes in a length parameter to determine the length of the string to be generated.
    It utilizes the `random` module to pick characters randomly from the given characters list,
    which consists of alphanumeric and special characters.
    Returns a randomly generated string of the given length. 
    '''
    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()-_=+[]{|}\':;"/?.>,<`~'
    string = ''
    for i in range(length):
        index = random.randint(0, len(characters)-1)
        string += characters[index]
    return string

# Define a class to store and manipulate encrypted data
class EncryptedData:
    '''
    `EncryptedData` class represents encrypted data and methods to manipulate it.
    This class uses the `base64` module to encode and decode data.
    '''
    def __init__(self, data):
        '''
        `__init__()` method takes in `data` as a parameter and encodes it using `base64` before storing it in the `data` attribute
        '''
        self.data = base64.b64encode(data.encode('utf-8'))
    
    def get_data(self):
        '''
        `get_data()` method decodes the data attribute using `base64` and returns the original data
        '''
        return base64.b64decode(self.data).decode('utf-8')
    
    def reverse_data(self):
        '''
        `reverse_data()` method reverses the data attribute using built-in `reversed()` function and returns the reversed string
        '''
        return ''.join(reversed(self.data.decode('utf-8')))
    
# Generate a random string to use as data
data = generate_string(10)

# Create an instance of EncryptedData with the generated string
encrypted_data = EncryptedData(data)

# Print the encoded and decoded data
print(encrypted_data.data)
print(encrypted_data.get_data())

# Reverse the data and print it
reversed_data = encrypted_data.reverse_data()
print(reversed_data)