/*
 * Program: Password_Cracker
 * Description: This program attempts to crack a given password using a brute-force method.
 * Author: Hacker123
 */
 
#include <stdio.h>
#include <stdlib.h>
#include #<string.h>

#define MAX_PASSWORD_LENGTH 10 // maximum length of password
#define MAX_CHAR 126 // maximum ASCII character

char possibleChars[MAX_CHAR]; // stores all possible ASCII characters
int attemptLength; // current length of password attempted
 
//Function to generate all possible ASCII characters
void generatePossibleChars(){
   int i, j = 0;
   for (i = 33; i <= MAX_CHAR; i++){
      if ( (i >= 48 && i <= 57) || (i >= 65 && i <= 90) || (i >= 97 && i <= 122) || i == 95){
         possibleChars[j++] = i;
      }
   }
}
 
//Function to check if generated password matches the given password
int checkPassword(char *attempt, char *password){
   for(int i=0; i<attemptLength; i++){
      if(attempt[i] != password[i]){
         return 0;
      }
   }
   return 1;
}

//Function to generate all possible combinations of passwords
void generatePasswords(char *attempt, int index, char *password){
   if(index == attemptLength){
      if(checkPassword(attempt, password)){
         printf("Password Cracked: %s", attempt);
         exit(0);
      }
      return;
   }
   
   for(int i=0; i<MAX_CHAR; i++){
      attempt[index] = possibleChars[i];
      generatePasswords(attempt, index+1, password);
   }
}
 
int main(){
   char password[MAX_PASSWORD_LENGTH];
   char attempt[MAX_PASSWORD_LENGTH];
   
   printf("Enter Password to Crack: ");
   scanf("%s", password);
   
   generatePossibleChars();
   
   for(attemptLength=1; attemptLength <= MAX_PASSWORD_LENGTH; attemptLength++){
      generatePasswords(attempt, 0, password);
   }
   
   printf("Password not cracked.");
   return 0;
}