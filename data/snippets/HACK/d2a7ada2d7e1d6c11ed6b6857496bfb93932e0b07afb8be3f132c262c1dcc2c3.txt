/*
  This code snippet is written in HACK, a programming language developed by Facebook for their Hack language runtime environment.
  It is a statically-typed language that is compiled into PHP and runs on a modified version of the HHVM virtual machine.

  In this snippet, we define a class called "Calculator" that has two private properties, "a" and "b", and four public methods for basic arithmetic operations.
  This snippet also showcases the use of control flow structures and exception handling.

  To run this code, the HHVM virtual machine must be installed and the code must be saved with the .hack extension. Then, it can be executed using the "hack" command followed by the filename.

  Author: John Smith
*/

/*
  This is a multi-line comment in HACK, denoted by the forward-slash asterisk combination.
*/

/*
  Declares a new class called "Calculator" using the "class" keyword.
  Classes in HACK are defined using the same syntax as in PHP.
*/
class Calculator {

  /*
    Defines two private properties, "a" and "b", using the "private" keyword.
    Private properties can only be accessed within the class and not from outside.
  */
  private int $a;
  private int $b;

  /*
    Defines a constructor for the class that takes in two parameters and assigns them to the private properties.
    The "public" keyword denotes that this method can be accessed from outside the class.
  */
  public function __construct(int $a, int $b) {
    $this->a = $a;
    $this->b = $b;
  }

  /*
    Defines a public method called "add" that takes in no parameters and returns the sum of the private properties.
    The "int" keyword denotes the return type of the method.
  */
  public function add(): int {
    // Uses the "+" operator to add the private properties and returns the result.
    return $this->a + $this->b;
  }

  /*
    Defines a public method called "subtract" that takes in no parameters and returns the difference of the private properties.
    The "int" keyword denotes the return type of the method.
  */
  public function subtract(): int {
    // Uses the "-" operator to subtract the private properties and returns the result.
    return $this->a - $this->b;
  }

  /*
    Defines a public method called "multiply" that takes in no parameters and returns the product of the private properties.
    The "int" keyword denotes the return type of the method.
  */
  public function multiply(): int {
    // Uses the "*" operator to multiply the private properties and returns the result.
    return $this->a * $this->b;
  }

  /*
    Defines a public method called "divide" that takes in no parameters and returns the division of the private properties.
    The "int" keyword denotes the return type of the method.
    If the second private property is 0, an exception is thrown.
  */
  public function divide(): int {
    // Uses the "/" operator to divide the private properties and returns the result.
    // The "if" statement checks if the second private property is equal to 0. If so, an exception is thrown.
    if ($this->b === 0) {
      throw new Exception("Cannot divide by zero.");
    } else {
      return $this->a / $this->b;
    }
  }
}

/*
  Creates a new instance of the "Calculator" class and passes in two integers as constructor parameters.
*/
$calculator = new Calculator(10, 5);

/*
  Uses the "add" method to add the two integers.
  The result is then printed using the "var_dump" function, which displays the data type and value of a variable.
*/
var_dump($calculator->add());

/*
  Uses the "subtract" method to subtract the two integers.
  The result is then printed using the "var_dump" function.
*/
var_dump($calculator->subtract());

/*
  Uses the "multiply" method to multiply the two integers.
  The result is then printed using the "var_dump" function.
*/
var_dump($calculator->multiply());

/*
  Uses the "divide" method to divide the two integers.
  The result is then printed using the "var_dump" function.
  Since the second private property is not 0, the result is a valid division.
*/
var_dump($calculator->divide());

/*
  Tries to divide the two integers again, but this time the second private property is set to 0.
  An exception is thrown and the error message is printed using the "echo" statement.
*/
$calculator->b = 0;
try {
  $calculator->divide();
} catch (Exception $error) {
  echo $error->getMessage();
}

/*
  This is a single-line comment in HACK, denoted by the two forward-slashes.
*/

/*
  This code snippet showcases the use of control flow structures and exception handling in HACK.
  It can be modified for other arithmetic operations or for handling different types of errors.
*/