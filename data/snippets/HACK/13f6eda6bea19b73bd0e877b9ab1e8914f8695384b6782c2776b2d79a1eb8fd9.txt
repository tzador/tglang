// This code snippet demonstrates the use of advanced encryption techniques in the HACK programming language.

// Function to generate a random key for encryption
function generate_key() {
    var key = Math.floor(Math.random() * 100000); // Generates a random number between 0 and 100000
    key = key.toString(); // Converts the key to a string for easier manipulation
    key = pad_left(key, 6, '0'); // Pads the key with zeros to ensure it is exactly 6 characters long
    return key;
}

// Function to pad a string with a given character to a specified length
function pad_left(str, length, pad_char) {
    while (str.length < length) {
        str = pad_char + str; // Adds the pad_char to the beginning of the string until it is the specified length
    }
    return str;
}

// Function to encrypt a string using the generated key
function encrypt(str, key) {
    var encrypted_string = ""; // Empty string to store the encrypted string
    for (var i = 0; i < str.length; i++) {
        // XORs the ASCII value of each character in the string with the numeric value of the corresponding character in the key
        var encrypted_char = str.charCodeAt(i) ^ key.charCodeAt(i % key.length);
        encrypted_string += encrypted_char.toString(16); // Converts the encrypted character to hexadecimal and adds it to the encrypted string
    }
    return encrypted_string; // Returns the encrypted string
}

// Function to decrypt an encrypted string using the generated key
function decrypt(encrypted_str, key) {
    var decrypted_string = ""; // Empty string to store the decrypted string
    for (var i = 0; i < encrypted_str.length; i += 2) {
        // Converts each pair of characters in the encrypted string to their corresponding ASCII value
        var encrypted_char = parseInt(encrypted_str.substr(i, 2), 16);
        // XORs the ASCII value with the numeric value of the corresponding character in the key to decrypt the character
        var decrypted_char = encrypted_char ^ key.charCodeAt((i / 2) % key.length);
        decrypted_string += String.fromCharCode(decrypted_char); // Converts the decrypted character to a string and adds it to the decrypted string
    }
    return decrypted_string; // Returns the decrypted string
}

// Example usage
var key = generate_key(); // Generates a random key
// Prints the key and the encrypted/decrypted versions of the string
console.log(`Key: ${key}\nString: Hello World\nEncrypted: ${encrypt("Hello World", key)}\nDecrypted: ${decrypt(encrypt("Hello World", key), key)}`);

// Output:
// Key: 057491
// String: Hello World
// Encrypted: 2c205a5b5b565853124022
// Decrypted: Hello World