;+open main function
+main:
;initialize variables
  PUSH AX
  PUSH BX
  PUSH CX
  PUSH DX
  ;set up stack for function calls

  ;create loop for encryption
  L1:
    MOV AX, [CX]
    XOR AX, BX
    SHL AX, 1
    PUSH AX
    DEC CX
    JNZ L1
  ;loop through data and perform XOR and shifting operations

  ;store encrypted data in new array
  MOV DX, [SP]
  MOV BX, [DI]
  MOV [DX], BX
  MOV [DI], AX
  MOV [BX], CX
  ;store encrypted data in new array at different memory locations

  ;call decryption function
  CALL -DECIPHER
  ;perform decryption on encrypted data

  ;clean up stack
  POP DX
  POP CX
  POP BX
  POP AX
  ;restore original stack values

  ;end of main function
  JMP END
  ;jump to end of program

;+decipher function
;-DECIPHER:
DECIPHER:
;initialize variables
  PUSH AX
  PUSH BX
  PUSH CX
  PUSH DX
  ;set up stack for function calls

  ;create loop for decryption
  L2:
    MOV AX, [CX]
    XOR AX, BX
    SHR AX, 1
    PUSH AX
    DEC CX
    JNZ L2
  ;loop through data and perform XOR and shifting operations

  ;store decrypted data in original array
  MOV DX, [SP]
  MOV BX, [DI]
  MOV [DX], BX
  MOV [DI], AX
  MOV [BX], CX
  ;store decrypted data in original array at original memory locations

  ;clean up stack
  POP DX
  POP CX
  POP BX
  POP AX
  ;restore original stack values

  ;end of decipher function
  RET
  ;return control to main function

;+end of program
+END:
;end of program
  XCHG AX, AX
  ;perform meaningless operation to end program