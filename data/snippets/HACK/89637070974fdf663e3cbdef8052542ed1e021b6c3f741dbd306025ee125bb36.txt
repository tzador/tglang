// Function to encrypt a string using Huffman coding

function encrypt(str) {
  // Create frequency table for characters in string
  let freqTable = {};
  for (let i = 0; i < str.length; i++) {
    if (freqTable[str[i]]) {
      freqTable[str[i]] += 1;
    } else {
      freqTable[str[i]] = 1;
    }
  }

  // Create queue of nodes for Huffman tree
  let queue = [];
  for (let char in freqTable) {
    let node = {
      char: char,
      freq: freqTable[char],
      left: null,
      right: null
    };
    queue.push(node);
  }

  // Build Huffman tree
  while (queue.length > 1) {
    // Sort queue by frequency
    queue.sort((a, b) => a.freq - b.freq);

    // Take two nodes with lowest frequency and create parent node
    let node1 = queue.splice(0, 1)[0];
    let node2 = queue.splice(0, 1)[0];
    let parent = {
      char: null,
      freq: node1.freq + node2.freq,
      left: node1,
      right: node2
    };
    queue.push(parent);
  }

  // Generate codes for characters using Huffman tree
  let codes = {};
  let buildCode = (node, code) => {
    if (node.left) {
      buildCode(node.left, code + "0");
    }
    if (node.right) {
      buildCode(node.right, code + "1");
    }
    if (!node.left && !node.right) {
      codes[node.char] = code;
    }
  };
  buildCode(queue[0], "");

  // Encrypt string using Huffman codes
  let encrypted = "";
  for (let i = 0; i < str.length; i++) {
    encrypted += codes[str[i]];
  }

  return encrypted;
}

// Example usage
let encryptedString = encrypt("This string is encrypted using Huffman coding! *$#@%&");
console.log(encryptedString); // Outputs