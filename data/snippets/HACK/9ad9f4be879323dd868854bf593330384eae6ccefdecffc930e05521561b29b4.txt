// Define a function to reverse a given string
func reverseString(str) {
    let revString = "" // Initialize an empty string to store the reversed string
    for (let i = str.length - 1; i >= 0; i--) { // Loop through the string in reverse order
        revString += str[i] // Add each character to the reversed string
    }
    return revString // Return the reversed string
}

// Define a function to check if a given string is a palindrome
func isPalindrome(str) {
    if (str === reverseString(str)) { // Check if the reversed string is equal to the original string
        return true // If they are equal, the string is a palindrome
    } else {
        return false // Otherwise, the string is not a palindrome
    }
}

// Define a function to generate a random number between two given numbers
func generateRandomNumber(min, max) {
    let randomNumber = Math.floor(Math.random() * (max - min + 1)) + min // Calculate a random number between min and max
    return randomNumber // Return the random number
}

// Define a function to convert a given string to camel case
func toCamelCase(str) {
    let words = str.split(" ") // Split the string into an array of words
    for (let i = 0; i < words.length; i++) { // Loop through the array
        words[i] = words[i][0].toUpperCase() + words[i].substr(1).toLowerCase() // Capitalize the first letter of each word and convert the rest to lowercase
    }
    return words.join("") // Join the array back into a string
}

// Define a function to reverse the order of words in a given string
func reverseWords(str) {
    let words = str.split(" ") // Split the string into an array of words
    words.reverse() // Reverse the order of the array
    return words.join(" ") // Join the array back into a string
}

// Define a function to remove all whitespace from a given string
func removeWhitespace(str) {
    let noWhitespace = "" // Initialize an empty string to store the string without whitespace
    for (let i = 0; i < str.length; i++) { // Loop through the string
        if (str[i] !== " ") { // Check if the current character is not a whitespace
            noWhitespace += str[i] // If it is not a whitespace, add it to the new string
        }
    }
    return noWhitespace // Return the string without whitespace
}

// Define a function to encrypt a given string using a Caesar cipher
func caesarCipher(str, key) {
    let encryptedString = "" // Initialize an empty string to store the encrypted string
    for (let i = 0; i < str.length; i++) { // Loop through the string
        let charCode = str.charCodeAt(i) // Get the character code of the current character
        if (charCode >= 65 && charCode <= 90) { // Check if the character is uppercase
            encryptedString += String.fromCharCode((charCode - 65 + key) % 26 + 65) // Encrypt the character using the Caesar cipher algorithm
        } else if (charCode >= 97 && charCode <= 122) { // Check if the character is lowercase
            encryptedString += String.fromCharCode((charCode - 97 + key) % 26 + 97) // Encrypt the character using the Caesar cipher algorithm
        } else {
            encryptedString += str[i] // If the character is not a letter, add it to the encrypted string without encrypting
        }
    }
    return encryptedString // Return the encrypted string
}

// Define a function to calculate the factorial of a given number
func factorial(num) {
    let result = 1 // Initialize the result to 1
    for (let i = 1; i <= num; i++) { // Loop through numbers from 1 to the given number
        result *= i // Multiply the result by each number in the range
    }
    return result // Return the factorial of the given number
}

// Define a function to convert a given number to its binary representation
func toBinary(num) {
    let binary = "" // Initialize an empty string to store the binary representation
    while (num > 0) { // Loop until the number is 0
        binary = (num % 2) + binary // Add the remainder of the number divided by 2 to the beginning of the binary representation
        num = Math.floor(num / 2) // Divide the number by 2 and round down
    }
    return binary // Return the binary representation
}

// Define a function to find the second largest number in a given array
func secondLargest(arr) {
    let largest = arr[0] // Initialize the largest number to the first element in the array
    let secondLargest = arr[1] // Initialize the second largest number to the second element in the array
    for (let i = 2; i < arr.length; i++) { // Loop through the array starting from the third element
        if (arr[i] > largest) { // Check if the current element is larger than the largest number
            secondLargest = largest // If it is, the largest number becomes the second largest number
            largest = arr[i] // The current element becomes the largest number
        } else if (arr[i] > secondLargest && arr[i] < largest) { // Check if the current element is larger than the second largest number but smaller than the largest number
            secondLargest = arr[i] // If it is, the current element becomes the second largest number
        }
    }
    return secondLargest // Return the second largest number
}

// Define a function to sort a given array in ascending order using the bubble sort algorithm
func bubbleSort(arr) {
    for (let i = arr.length - 1; i > 0; i--) { // Loop through the array, starting from the last element
        for (let j = 0; j < i; j++) { // Loop through the unsorted elements
            if (arr[j] > arr[j + 1]) { // Check if the current element is larger than the next element
                let temp = arr[j] // Swap the elements if they are not in the correct order
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
            }
        }
    }
    return arr // Return the sorted array
}

// Define a function to convert a given number to its Roman numeral representation
func toRoman(num) {
    let roman = "" // Initialize an empty string to store the Roman numeral representation
    let romanNums = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"] // Define an array of Roman numerals
    let decimals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1] // Define an array of corresponding values for the Roman numerals
    for (let i = 0; i < decimals.length; i++) { // Loop through the decimal values
        while (num >= decimals[i]) { // Loop until the given number is smaller than the current decimal value
            roman += romanNums[i] // Add the corresponding Roman numeral to the representation
            num -= decimals[i] // Subtract the decimal value from the given number
        }
    }
    return roman // Return the Roman numeral representation
}

// Define a class to perform mathematical operations on a given number
class MathOperations {
    constructor(num) { // Define a constructor to initialize the number as a property of the class
        this.num = num
    }

    // Define a method to check if the given number is prime
    isPrime() {
        if (this.num < 2) { // Check if the number is less than 2
            return false // If it is, it is not a prime number
        }
        for (let i = 2; i <= Math.sqrt(this.num); i++) { // Loop through numbers from 2 to the square root of the number
            if (this.num % i === 0) { // Check if the number is divisible by the current number in the loop
                return false // If it is, it is not a prime number
            }
        }
        return true // If it is not divisible by any number in the loop, it is a prime number
    }

    // Define a method to calculate the sum of all prime numbers from 2 to the given number
    sumOfPrimes() {
        let sum = 0 // Initialize the sum to 0
        for (let i = 2; i <= this.num; i++) { // Loop through numbers from 2 to the given number
            if (i === 2 || i === 3 || i === 5 || i === 7) { // Check if the number is 2, 3, 5, or 7 (to speed up the process, as these are small prime numbers)
                sum += i // If it is, add it to the sum
            } else if (i % 2 !== 0 && i % 3 !== 0 && i % 5 !== 0 && i % 7 !== 0 && this.isPrime(i)) { // If the number is not divisible by 2, 3, 5, or 7, and it is prime, add it to the sum
                sum += i
            }
        }
        return sum // Return the sum of prime numbers
    }

    // Define a method to calculate the nth Fibonacci number
    fibonacci(n) {
        let fib = [0, 1] // Initialize an array to store the first two Fibonacci numbers
        for (let i = 2; i <= n; i++) { // Loop from 2 to n
            fib[i] = fib[i-1] + fib[i-2] // Calculate the next Fibonacci number and add it to the array
        }
        return fib[n] // Return the nth Fibonacci number
    }
}

// Test the functions and classes with some sample inputs
console.log(reverseString("HACK")) // Output: KCAH
console.log(isPalindrome("hannah")) // Output: true
console.log(generateRandomNumber(1, 100)) // Output: a random number between 1 and 100
console.log(toCamelCase("hack the world")) // Output: HackTheWorld
console.log(reverseWords("code snippet in hack")) // Output: hack in snippet code
console.log(removeWhitespace("  H  A    C  K ")) // Output: HACK
console.log(caesarCipher("Hello, world!", 3)) // Output: Khoor, zruog@
console.log(factorial(4)) // Output: 24
console.log(toBinary(15)) // Output: 1111
console.log(secondLargest([5, 2, 8, 19, 6, 3])) // Output: 8
console.log(bubbleSort([5, 2, 8, 19, 6, 3])) // Output: [2, 3, 5, 6, 8, 19]
console.log(toRoman(1997)) // Output: MCMXCVII
let math = new MathOperations(7)
console.log(math.isPrime()) // Output: true
console.log(math.sumOfPrimes()) // Output: 17 (2 + 3 + 5 + 7)
console.log(math.fibonacci(12)) // Output: 89 (0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89)