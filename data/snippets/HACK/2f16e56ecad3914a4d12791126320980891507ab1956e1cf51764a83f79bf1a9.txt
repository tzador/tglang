# This code snippet is a basic implementation of a Caesar cipher encryption algorithm in the programming language 'HACK'.

# Function to encrypt a given string with a given key
def encrypt(string, key):
    # Initialize empty string to store the encrypted text
    encrypted = ''
    # Loop through each character in the input string
    for char in string:
        # Check if the character is a lowercase letter
        if char.islower():
            # Convert the character to its ASCII value
            ascii = ord(char)
            # Add the key to the ASCII value and get the remainder when divided by 26
            encrypted_char = (ascii + key) % 26
            # Convert the remainder back to a character
            encrypted_char = chr(encrypted_char)
            # Append the encrypted character to the encrypted string
            encrypted += encrypted_char
        # Check if the character is an uppercase letter
        elif char.isupper():
            # Convert the character to its ASCII value
            ascii = ord(char)
            # Add the key to the ASCII value and get the remainder when divided by 26
            encrypted_char = (ascii + key) % 26
            # Convert the remainder back to a character, taking into account uppercase letters
            encrypted_char = chr(encrypted_char + 65)
            # Append the encrypted character to the encrypted string
            encrypted += encrypted_char
        # If the character is not a letter, simply append it to the encrypted string
        else:
            encrypted += char
    # Return the encrypted string
    return encrypted

# Function to decrypt a given string with a given key
def decrypt(string, key):
    # Initialize empty string to store the decrypted text
    decrypted = ''
    # Loop through each character in the input string
    for char in string:
        # Check if the character is a lowercase letter
        if char.islower():
            # Convert the character to its ASCII value
            ascii = ord(char)
            # Subtract the key from the ASCII value and get the remainder when divided by 26
            decrypted_char = (ascii - key) % 26
            # Convert the remainder back to a character
            decrypted_char = chr(decrypted_char)
            # Append the decrypted character to the decrypted string
            decrypted += decrypted_char
        # Check if the character is an uppercase letter
        elif char.isupper():
            # Convert the character to its ASCII value
            ascii = ord(char)
            # Subtract the key from the ASCII value and get the remainder when divided by 26
            decrypted_char = (ascii - key) % 26
            # Convert the remainder back to a character, taking into account uppercase letters
            decrypted_char = chr(decrypted_char + 65)
            # Append the decrypted character to the decrypted string
            decrypted += decrypted_char
        # If the character is not a letter, simply append it to the decrypted string
        else:
            decrypted += char
    # Return the decrypted string
    return decrypted

# User input for the string to encrypt
string = input("Enter a message to encrypt: ")

# User input for the key (must be an integer)
key = int(input("Enter the encryption key: "))

# Encrypt the given string using the given key
encrypted = encrypt(string, key)

# Print the encrypted string
print("Encrypted message:", encrypted)

# Decrypt the encrypted string using the given key
decrypted = decrypt(encrypted, key)

# Print the decrypted string
print("Decrypted message:", decrypted)