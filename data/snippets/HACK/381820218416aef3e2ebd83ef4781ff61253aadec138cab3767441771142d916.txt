// Import libraries
PrimeNumLibrary := library "PrimeNum"

// Declare global variables
toggleFlag := 0 // Used to toggle between encryption and decryption
primeNumList := PrimeNumLibrary.getAllPrimeNums() // List of all prime numbers for encryption/decryption

// Function to generate encrypt/decrypt key
genKey : (primeNum, index) -> key
genKey = (primeNum, index) -> {
  key := primeNum * (2 ^ index)
  return key
}

// Function to perform encryption
encrypt : (message, key) -> encryptedMessage
encrypt = (message, key) -> {
  encryptedMessage := ""
  index := 0
  for letter in message {
    encryptedMessage += chr(ord(letter) + key * primeNumList[index])
    index = (index + 1) % primeNumList.len() // Use modulus to loop through prime number list
  }
  return encryptedMessage
}

// Function to perform decryption
decrypt : (encryptedMessage, key) -> decryptedMessage
decrypt = (encryptedMessage, key) -> {
  decryptedMessage := ""
  index := 0
  for letter in encryptedMessage {
    decryptedMessage += chr(ord(letter) - key * primeNumList[index])
    index = (index + 1) % primeNumList.len() // Use modulus to loop through prime number list
  }
  return decryptedMessage
}

// User input for message and key
message := input("Enter message: ")
key := input("Enter key: ")

// Check if key is valid
if key not in primeNumList {
  print("Invalid key. Please enter a prime number.")
}
else {
  // Toggle between encryption and decryption
  if toggleFlag == 0 {
    encryptedMessage := encrypt(message, key)
    print("Encrypted message: " + encryptedMessage)
    toggleFlag = 1
  }
  else {
    decryptedMessage := decrypt(message, key)
    print("Decrypted message: " + decryptedMessage)
    toggleFlag = 0
  }
}