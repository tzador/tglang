// This code snippet performs a bubble sort algorithm in HACK programming language

/*
    This section declares all the variables and initializes them with random numbers.
    In HACK, variables are declared using the 'hacklet' keyword followed by the variable name.
    All variables are integers and are declared in a specific memory location indicated by the 'withAddress' keyword.
    The 'initialize' function assigns a random value to each variable.
*/
hacklet withAddress var1;
hacklet withAddress var2;
hacklet withAddress var3;
hacklet withAddress var4;
hacklet withAddress var5;
hacklet withAddress var6;

initialize var1;
initialize var2;
initialize var3;
initialize var4;
initialize var5;
initialize var6;

// This section implements the bubble sort algorithm
/*
    The loop will run for the length of the array - 1 as the last element will be sorted in the previous iteration.
    The inner loop compares each element with the next one and swaps them if necessary.
    The 'get' keyword is used to access the value from a specific memory address.
    The 'set' keyword is used to overwrite the value at a specific memory address.
*/
for (i = 1; i < 6; i = i + 1) { // `i` represents the current iteration
    for (j = 1; j < 6 - i; j = j + 1) { // `j` represents the index of the element being compared
        if (get varj > get var(j+1)) { // Compare `j` element with the next element
            temp = get varj; // Store `j` element in a temporary variable
            set varj = get var(j+1); // Overwrite `j` element with the value of the next element
            set var(j+1) = temp; // Overwrite the next element with the stored value of `j` element
        }
    }
}

// This section prints the sorted array
/*
    The 'print' keyword is used to display the value at a specific memory address.
*/
print var1; 
print var2;
print var3;
print var4;
print var5;
print var6;