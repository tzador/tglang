/**
 * This is a complex code snippet in the HACK programming language.
 * It contains multiple functions and data structures to demonstrate
 * the capabilities of this language.
 */

function reverseString(str) {
  /**
   * This function takes in a string as input and returns the reverse of the string.
   * It first converts the string to an array and then uses the built-in `rev` function
   * to reverse the array. Finally, it joins the array elements back to form a string
   * and returns it.
   * @param {string} str the string to be reversed
   * @returns {string} the reversed string
   */

  // Convert string to array using the `chars` function
  $arr = str.chars();
  // Reverse the array using the built-in `rev` function
  $revArr = $arr.rev();
  // Join the array elements back to form a string
  $revStr = $revArr.join();
  // Return the reversed string
  return $revStr;
}

function encodeBase64(str) {
  /**
   * This function takes in a string as input and returns the Base64 encoding of the string.
   * First, it checks if the string contains only ASCII characters using the `is_ascii` function.
   * If the string is ASCII, it uses the built-in `base64_encode` function to encode the string to Base64.
   * If the string is not ASCII, it converts it to a byte array and then uses a custom algorithm
   * to encode the bytes to Base64.
   * @param {string} str the string to be encoded
   * @returns {string} the encoded string
   */

  // Check if string is ASCII using the `is_ascii` function
  if(str.is_ascii()) {
    // Use built-in `base64_encode` function to encode string to Base64
    return $str.base64_encode();
  } else {
    // Convert string to byte array
    $bytes = str.bytes();
    // Initialize an empty string for the encoded bytes
    $encodedStr = "";
    // Loop through each byte in the array
    for($byte in $bytes) {
      // Get the binary representation of the byte
      $binary = $byte.to_bin();
      // Split the binary into 6-bit chunks (since Base64 uses 6-bit chunks)
      $chunks = $binary.split_chunks(6);
      // Convert each 6-bit chunk to its corresponding Base64 character
      // and append it to the encoded string
      for($chunk in $chunks) {
        $encodedStr = $encodedStr + $chunk.to_base64();
      }
    }
    // Return the encoded string
    return $encodedStr;
  }
}

class BST {
  /**
   * This is an implementation of a Binary Search Tree class in HACK.
   * It allows for insertion, deletion, and searching of nodes in the tree.
   */
  
  // Define a constructor for the BST class
  function __construct() {
    // Initialize the root node to null
    $this->root = null;
  }

  function insertNode(val) {
    /**
     * This function inserts a new node with the given value in the BST.
     * If the tree is empty, the new node becomes the root.
     * If the value is less than the root node, it is inserted in the left subtree.
     * If the value is greater than the root node, it is inserted in the right subtree.
     * @param {*} val the value to be inserted
     */

    // Create a new node with the given value
    $newNode = new Node(val);
    // If tree is empty, make the new node the root
    if(this->root == null) {
      $this->root = $newNode;
    } else {
      // Define a current node variable and set it to the root
      $current = $this->root;
      // Loop through the tree until a suitable spot for insertion is found
      while(true) {
        // If value is less than current node, go left
        if(val < $current->value) {
          // If left child is null, insert new node as left child of current node
          if($current->left == null) {
            $current->left = $newNode;
            break;
          } else {
            // If left child exists, set current node to the left child and continue loop
            $current = $current->left;
          }
        } else { // If value is greater than current node, go right
          // If right child is null, insert new node as right child of current node
          if($current->right == null) {
            $current->right = $newNode;
            break;
          } else {
            // If right child exists, set current node to the right child and continue loop
            $current = $current->right;
          }
        }
      }
    }
  }

  function searchNode(val) {
    /**
     * This function searches for a node with the given value in the BST.
     * If the value is found, it returns the node. Otherwise, it returns null.
     * @param {*} val the value to search for
     * @returns {Node} the node with the given value or null if not found
     */

    // If tree is empty, return null
    if(this->root == null) {
      return null;
    } else {
      // Define a current node variable and set it to the root
      $current = $this->root;
      // Loop through the tree until the value is found or all nodes have been checked
      while($current != null) {
        // If value is found, return the current node
        if($current->value == val) {
          return $current;
        } else if(val < $current->value) { // If value is less than current node, go left
          $current = $current->left;
        } else { // If value is greater than current node, go right
          $current = $current->right;
        }
      }
      // If value is not found, return null
      return null;
    }
  }

  function deleteNode(val) {
    /**
     * This function deletes a node with the given value from the BST.
     * If the node has no children, it is simply removed from the tree.
     * If the node has one child, the child takes its place.
     * If the node has two children, the successor replaces the node and is then deleted.
     * @param {*} val the value of the node to be deleted
     */

    // Find the node with the given value
    $nodeToDelete = this->searchNode(val);
    // If node is not found, return
    if($nodeToDelete == null) {
      return;
    }
    // If node has no children, simply remove it from the tree
    if($nodeToDelete->left == null && $nodeToDelete->right == null) {
      // Find the parent of the node to delete
      $parent = this->findParent(val);
      // If tree has only one node (root), set root to null
      if($parent == null) {
        this->root = null;
      } else {
        // If node is the left child, set its parent's left child to null
        if ($parent->left == $nodeToDelete) {
          $parent->left = null;
        } else { // If node is the right child, set its parent's right child to null
          $parent->right = null;
        }
      }
    } else if($nodeToDelete->left != null && $nodeToDelete->right == null) { // If node has one left child
      // Set the child as the successor
      $successor = $nodeToDelete->left;
      // Find the parent of the node to delete
      $parent = this->findParent(val);
      // If node to delete is the root, set successor as root
      if($parent == null) {
        this->root = $successor;
      } else {
        // If node to delete is the left child, set successor as its parent's left child
        if($parent->left == $nodeToDelete) {
          $parent->left = $successor;
        } else { // If node to delete is the right child, set successor as its parent's right child
          $parent->right = $successor;
        }
      }
    } else if($nodeToDelete->left == null && $nodeToDelete->right != null) { // If node has one right child
      // Set the child as the successor
      $successor = $nodeToDelete->right;
      // Find the parent of the node to delete
      $parent = this->findParent(val);
      // If node to delete is the root, set successor as root
      if($parent == null) {
        this->root = $successor;
      } else {
        // If node to delete is the left child, set successor as its parent's left child
        if($parent->left == $nodeToDelete) {
          $parent->left = $successor;
        } else { // If node to delete is the right child, set successor as its parent's right child
          $parent->right = $successor;
        }
      }
    } else { // If node has two children
      // Find the successor of the node to delete
      $successor = this->findSuccessor(val);
      // Delete the successor node from the tree
      this->deleteNode($successor->value);
      // Set successor as the new child of the node to delete
      $successor->left = $nodeToDelete->left;
      $successor->right = $nodeToDelete->right;
      // Find the parent of the node to delete
      $parent = this->findParent(val);
      // If node to delete is the root, set successor as root
      if($parent == null) {
        this->root = $successor;
      } else {
        // If node to delete is the left child, set successor as its parent's left child
        if($parent->left == $nodeToDelete) {
          $parent->left = $successor;
        } else { // If node to delete is the right child, set successor as its parent's right child
          $parent->right = $successor;
        }
      }
    }
  }

  function findParent(val) {
    /**
     * This function finds the parent of the node with the given value in the BST.
     * If the value is found in the root, null is returned.
     * If the value is not found, null is returned.
     * @param {*} val the value of the node whose parent is to be found
     * @returns {Node} the parent of the node with the given value or null if not found
     */

    // If tree has only one node (root), return null
    if(this->root != null && this->root->value == val) {
      return null;
    } else {
      // Define a current node variable and set it to the root
      $current = $this->root;
      // Loop through the tree until the value is found or all nodes have been checked
      while($current != null) {
        // Check if current node is parent of node with given value
        if(($current->left != null && $current->left->value == val) ||
           ($current->right != null && $current->right->value == val)) {
          // Return the current node if it is the parent
          return $current;
        } else if(val < $current->value) { // If value is less than current node, go left
          $current = $current->left;
        } else { // If value is greater than current node, go right
          $current = $current->right;
        }
      }
      // If value is not found, return null
      return null;
    }
  }

  function findSuccessor(val) {
    /**
     * This function finds the successor of the node with the given value in the BST.
     * The successor is the smallest value in the right subtree of the node.
     * If the value is not found or the node has no right subtree, null is returned.
     * @param {*} val the value of the node whose successor is to be found
     * @returns {Node} the successor of the node with the given value or null if not found
     */

    // Find the node with the given value
    $node = this->searchNode(val);
    // If node is not found, return null
    if($node == null) {
      return null;
    }
    // If node has no right subtree, return null
    if($node->right == null) {
      return null;
    } else {
      // Define a current node variable and set it to the right subtree of the node
      $current = $node->right;
      // Find the smallest value in the subtree (i.e. leftmost node)
      while($current->left != null) {
        $current = $current->left;
      }
      // Return the successor node
      return $current;
    }
  }
}

class Node {
  /**
   * This class represents a node in the BST.
   * Each node has a value and a left and right child.
   */
  function __construct(val) {
    // Set the value of the node to the given value
    $this->value = val;
    // Set the left child to null
    $this->left = null;
    // Set the right child to null
    $this->right = null;
  }
}

// Create a new Binary Search Tree
$bst = new BST();

// Insert nodes into the tree
$bst->insertNode(5);
$bst->insertNode(2);
$bst->insertNode(7);
$bst->insertNode(1);
$bst->insertNode(3);
$bst->insertNode(6);
$bst->insertNode(8);

// Search for a node with value 6
$node = $bst->searchNode(6);

// Delete the node with value 6