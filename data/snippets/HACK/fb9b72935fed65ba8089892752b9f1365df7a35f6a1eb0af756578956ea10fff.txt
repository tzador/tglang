// Function to generate a random string
function randomString() {

    // Available characters for the string
    const characters = 'abcdefghijklmnopqrstuvwxyz';

    // Length of the string
    const len = 10;

    // An empty string to store the generated string
    let str = '';

    for (let i = 0; i < len; i++) {
        // Generate a random index to get a character from the available characters
        let randomIndex = Math.floor(Math.random() * characters.length);

        // Add the randomly selected character to the string
        str += characters.charAt(randomIndex);
    }

    // Return the generated string
    return str;
}

// Function to encrypt the string using a shift cipher
function encryptString(str) {

    // A randomly generated key for the shift cipher
    const key = randomString();

    // Convert the key to an array of characters
    const keyArray = key.split('');

    // An empty string to store the encrypted string
    let encryptedStr = '';

    // Loop through each character in the string
    for (let i = 0; i < str.length; i++) {

        // Get the ASCII code for the current character
        let charCode = str.charCodeAt(i);

        // Add the ASCII code with the corresponding index of the key array
        // and apply the modulo operator to handle overflow
        charCode = (charCode + keyArray[i % keyArray.length].charCodeAt(0)) % 256;

        // Convert the ASCII code back to a character and add it to the encrypted string
        encryptedStr += String.fromCharCode(charCode);
    }

    // Return the encrypted string and the key
    return { encryptedStr, key };
}

// Store the string to be encrypted
const strToEncrypt = 'This is a long and complex string. It has numbers 123456789, special characters like !@#$%^&*(), and even spaces for added complexity.'

// Encrypt the string using the above function
const { encryptedStr, key } = encryptString(strToEncrypt);

// Print the encrypted string and the key
console.log(`Encrypted string: ${encryptedStr}`);
console.log(`Key: ${key}`);

// Function to decrypt the encrypted string using the same key
function decryptString(encryptedStr, key) {
    // Convert the key to an array of characters
    const keyArray = key.split('');

    // An empty string to store the decrypted string
    let decryptedStr = '';

    // Loop through each character in the string
    for (let i = 0; i < encryptedStr.length; i++) {
        // Get the ASCII code for the current character
        let charCode = encryptedStr.charCodeAt(i);

        // Subtract the ASCII code with the corresponding index of the key array
        // and apply the modulo operator to handle underflow
        charCode = (charCode - keyArray[i % keyArray.length].charCodeAt(0) + 256) % 256;

        // Convert the ASCII code back to a character and add it to the decrypted string
        decryptedStr += String.fromCharCode(charCode);
    }

    // Return the decrypted string
    return decryptedStr;
}

// Decrypt the encrypted string using the same key
const decryptedStr = decryptString(encryptedStr, key);

// Print the decrypted string
console.log(`Decrypted string: ${decryptedStr}`);