# Function for finding the n-th term in the Fibonacci sequence
def fibonacci(n):
    # Initialize array to store the sequence
    sequence = [0,1]
    # Loop through the sequence and append the next term
    # Use modulo to check if the previous two terms sum to n
    for i in range(2, n+1):
        sequence.append(sequence[i-1] + sequence[i-2])
        # If the current term is equal to n, return the index
        if sequence[i] % n == 0:
            return i
    # If n is not in the sequence, return -1
    return -1

# Function for converting a decimal number to binary
def decimal_to_binary(number):
    # Initialize an empty string to store the binary representation
    binary = ""
    # Loop through the number while it is greater than 0
    while number > 0:
        # Use modulo to get the remainder (either 0 or 1)
        remainder = number % 2
        # Add the remainder to the binary string
        binary = str(remainder) + binary
        # Divide the number by 2 to get the next binary digit
        number = number // 2
    # Return the final binary representation
    return binary

# Function for encrypting a string using a Caesar cipher
def caesar_cipher(string, key):
    # Initialize an empty string to store the encrypted string
    encrypted_string = ""
    # Loop through each character in the string
    for char in string:
        # Convert the character to its ASCII value
        char_code = ord(char)
        # Subtract the key from the ASCII value
        # The resulting ASCII value is the encrypted character
        encrypted_char = chr(char_code - key)
        # Append the encrypted character to the new string
        encrypted_string += encrypted_char
    # Return the final encrypted string
    return encrypted_string

# Example usage:
# Find the 15th term in the Fibonacci sequence
print(fibonacci(15)) # Output: 5
# Convert 27 to binary
print(decimal_to_binary(27)) # Output: 11011
# Encrypt "hello" with a key of 3
print(caesar_cipher("hello", 3)) # Output: ebiil