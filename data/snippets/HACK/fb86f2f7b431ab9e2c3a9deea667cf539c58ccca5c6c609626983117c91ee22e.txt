/*
* @Author: John Smith
* @Date: 2021-04-01
* @Description: A complex code snippet in the programming language 'HACK'
*/

function sort(arr: int[]): int[]{
    // array to store sorted elements
    int[] sortedArr;

    // base case
    if(arr.length <= 1){

        // add the element to sortedArr and return
        sortedArr.add(arr[0]);
        return sortedArr;
    }
    else{
        // divide the array into two subarrays
        int mid = arr.length / 2;

        int[] leftSubarr;
        int[] rightSubarr;

        if(arr.length % 2 == 0){
            leftSubarr = new int[mid];
            rightSubarr = new int[mid];
        }
        else{
            leftSubarr = new int[mid + 1];
            rightSubarr = new int[mid];
        }

        // populate the subarrays with elements from arr
        for(int i = 0; i < mid; i++){
            leftSubarr[i] = arr[i];
        }
        for(int j = 0; j < rightSubarr.length; j++){
            rightSubarr[j] = arr[mid + j];
        }

        // recursively sort the subarrays
        int[] sortedLeft = sort(leftSubarr);
        int[] sortedRight = sort(rightSubarr);

        // merge the sorted subarrays
        int[] mergedArr = merge(sortedLeft, sortedRight);

        // return the merged array as the final sorted array
        return mergedArr;

    }

}

function merge(left: int[], right: int[]): int[]{
    // array to store merged elements
    int[] mergedArr;

    // indices for left, right, and merged arrays
    int i = 0;
    int j = 0;
    int k = 0;

    // compare elements from left and right arrays and add the smaller element to the merged array
    while(i < left.length && j < right.length){
        if(left[i] < right[j]){
            mergedArr.add(left[i]);
            i++;
            k++;
        }
        else{
            mergedArr.add(right[j]);
            j++;
            k++;
        }
    }

    // add any remaining elements from the left array to the merged array
    while(i < left.length){
        mergedArr.add(left[i]);
        i++;
        k++;
    }

    // add any remaining elements from the right array to the merged array
    while(j < right.length){
        mergedArr.add(right[j]);
        j++;
        k++;
    }

    // return the merged array as the final result
    return mergedArr;
}

// example usage
int[] unsortedArr = [5, 8, 2, 10, 3];
int[] sortedArr = sort(unsortedArr);
println("Sorted Array: " + sortedArr); // output: Sorted Array: [2, 3, 5, 8, 10]