/* 
*This is a code snippet written in the programming language HACK.
*It demonstrates a complex algorithm for sorting a list of numbers using the Merge Sort technique.
*/

/* 
*Function to recursively divide the list into smaller sublists.
*@param {list} arr - The list to be sorted.
*@param {number} low - The lower index of the sublist.
*@param {number} high - The higher index of the sublist.
*@return {list} A sorted list.
*/
function mergeSort(arr, low, high) {

    //Check if the sublist has more than one element.
    if (low < high) {

        //Find the middle index of the sublist.
        var mid = Math.floor((low + high) / 2);

        //Recursively call mergeSort on the left sublist.
        mergeSort(arr, low, mid);

        //Recursively call mergeSort on the right sublist.
        mergeSort(arr, mid + 1, high);

        //Merge the two sorted sublists.
        merge(arr, low, mid, high);
    }
}

/* 
*Function to merge two sorted sublists into one sorted list.
*@param {list} arr - The list to be sorted.
*@param {number} low - The lower index of the first sublist.
*@param {number} mid - The middle index of the first sublist.
*@param {number} high - The higher index of the second sublist.
*/
function merge(arr, low, mid, high) {

    //Create temporary arrays for the left and right sublists.
    var leftArr = [], rightArr = [];

    //Copy the left sublist into the temporary array.
    for (var i = low; i <= mid; i++) {
        leftArr.push(arr[i]);
    }

    //Copy the right sublist into the temporary array.
    for (var j = mid + 1; j <= high; j++) {
        rightArr.push(arr[j]);
    }

    //Set the initial index for the temporary arrays.
    var leftIndex = 0, rightIndex = 0;
    //Set the initial index for the merged list.
    var mergedIndex = low;

    //While both sublists have elements to compare.
    while (leftIndex < leftArr.length && rightIndex < rightArr.length) {

        //If the element from the left sublist is smaller, add it to the merged list.
        if (leftArr[leftIndex] <= rightArr[rightIndex]) {
            arr[mergedIndex] = leftArr[leftIndex];
            leftIndex++;
        }
        //If the element from the right sublist is smaller, add it to the merged list.
        else {
            arr[mergedIndex] = rightArr[rightIndex];
            rightIndex++;
        }
        mergedIndex++;
    }

    //Add remaining elements from the left sublist to the merged list.
    while (leftIndex < leftArr.length) {
        arr[mergedIndex] = leftArr[leftIndex];
        leftIndex++;
        mergedIndex++;
    }

    //Add remaining elements from the right sublist to the merged list.
    while (rightIndex < rightArr.length) {
        arr[mergedIndex] = rightArr[rightIndex];
        rightIndex++;
        mergedIndex++;
    }
}


//Sample input list.
var arr = [5, 8, 1, 3, 9];

//Call mergeSort function on the input list.
mergeSort(arr, 0, arr.length - 1);

//Print the sorted list.
console.log("Sorted List:", arr); //Output: [1, 3, 5, 8, 9]