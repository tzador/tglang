// This is a function to generate a random integer
function genRandomInt(lowerBound=1, upperBound=100) # Function declaration
{
    int lower = lowerBound; # Initializing lower bound variable
    int upper = upperBound; # Initializing upper bound variable

    # Calculating the range
    int range = upper - lower;

    # Using the built-in `srand` function to get a random seed
    srand(time());

    # Using the built-in `rand` function to generate a random number within the range
    int randomNum = rand() % range + lower;

    # Returning the result
    return randomNum;
}

// This is a function to encrypt a string using a given key
function encryptString(string plaintext, string key) # Function declaration
{
    # Initializing the encrypted string variable
    string encryptedStr = "";

    # Looping through each character in the plaintext string
    for (int i = 0; i < plaintext.length(); i++)
    {
        # Encrypting each character using the key
        char encryptedChar = (char)(((int)plaintext[i] + (int)key[i % key.length()) % 256);

        # Appending the encrypted character to the encrypted string
        encryptedStr += encryptedChar;
    }

    # Returning the encrypted string
    return encryptedStr;
}

// This is a function to decrypt a string using a given key
function decryptString(string encryptedStr, string key) # Function declaration
{
    # Initializing the decrypted string variable
    string decryptedStr = "";

    # Looping through each character in the encrypted string
    for (int i = 0; i < encryptedStr.length(); i++)
    {
        # Decrypting each character using the key
        char decryptedChar = (char)(((int)encryptedStr[i] - (int)key[i % key.length()) + 256) % 256);

        # Appending the decrypted character to the decrypted string
        decryptedStr += decryptedChar;
    }

    # Returning the decrypted string
    return decryptedStr;
}

// Example usage of the functions
int randomNum = genRandomInt(1, 100); # Generating a random integer between 1 and 100
string plaintext = "This is a secret message."; # Initializing the plaintext message
string key = "mysecretkey"; # Initializing the encryption key
string encryptedStr = encryptString(plaintext, key); # Encrypting the plaintext message
string decryptedStr = decryptString(encryptedStr, key); # Decrypting the encrypted string

# Outputting the results
printf("Random number: %d\n", randomNum); # Printing the random integer
printf("Plaintext message: %s\n", plaintext); # Printing the plaintext message
printf("Encryption key: %s\n", key); # Printing the encryption key
printf("Encrypted string: %s\n", encryptedStr); # Printing the encrypted string
printf("Decrypted string: %s\n", decryptedStr); # Printing the decrypted string