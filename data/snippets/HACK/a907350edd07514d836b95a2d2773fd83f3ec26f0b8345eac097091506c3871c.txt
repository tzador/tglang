# This program implements a basic brute force algorithm
# to crack a password
#
# Author: John Smith
#
# VARIABLES:
# password - the password to be cracked
# chars - a list of all possible characters used in the password
# guessed_pass - the current guess for the password
# is_cracked - boolean variable to check if password is cracked
# attempts - number of attempted guesses
# max_attempts - maximum number of allowed attempts
#
# FUNCTIONS:
# generate_guess() - generates a new random guess for the password
# check_guess(password, guess) - checks if the guessed password matches the actual password
# print_progress(guess, attempts, max_attempts) - prints progress of password cracking
#
# MAIN FUNCTION:
# Generate list of possible characters (A-Z, a-z, 0-9)
chars = list("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")

# Get password to be cracked from user
password = input("Enter password to be cracked: ")

# Initialize guessed password to an empty string
guessed_pass = ""

# Set maximum number of attempts allowed
max_attempts = 1000000

# Variable to keep track of number of attempts
attempts = 0

# Boolean variable to check if password is cracked
is_cracked = False

# Loop until password is cracked or maximum attempts have been reached
while not is_cracked and attempts < max_attempts:

    # Generate a new random guess
    guessed_pass = generate_guess()

    # Check if guess matches actual password
    is_cracked = check_guess(password, guessed_pass)

    # Print progress of password cracking
    print_progress(guessed_pass, attempts, max_attempts)

    # Increment attempts counter
    attempts += 1

# Check if password was successfully cracked
if is_cracked:
    print("Password successfully cracked! It was " + guessed_pass)
else:
    print("Maximum attempts reached. Password could not be cracked.")

# FUNCTION TO GENERATE A RANDOM GUESS
def generate_guess():

    # Initialize empty string
    guess = ""

    # Loop through password length and add random character from chars list to guess
    for i in range(len(password)):
        guess += random.choice(chars)

    return guess

# FUNCTION TO CHECK IF GUESS MATCHES ACTUAL PASSWORD
def check_guess(password, guess):

    # Compare lengths of password and guess
    if len(password) != len(guess):
        return False

    # Loop through each character in password and check if it matches corresponding
    # character in guess
    for i in range(len(password)):
        if password[i] != guess[i]:
            return False

    # If all characters match, return True
    return True

# FUNCTION TO PRINT PROGRESS OF PASSWORD CRACKING
def print_progress(guess, attempts, max_attempts):

    # Calculate percentage of attempts completed
    progress = (attempts / max_attempts) * 100

    # Print progress in a formatted string
    print("Guess #" + str(attempts) + ": " + guess + " | " + str(progress) + "% completed")