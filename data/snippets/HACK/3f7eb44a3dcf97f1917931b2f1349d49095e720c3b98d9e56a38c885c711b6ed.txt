\\ The following code snippet is written in the programming language HACK
\\ It generates a mersenne prime number using the Lucas-Lehmer test

\\ Define function for modulo exponentiation
function mod_pow(base, exp, mod):
  result := 1
  while exp > 0:
    if exp % 2 == 1:
      result := (result * base) % mod
    exp := exp / 2
    base := (base * base) % mod
  return result

\\ Define function for checking if a number is prime using the Lucas-Lehmer test
function is_prime(num):
  if num == 2: \\ 2 is the only even prime number, return true
    return true
  if num % 2 == 0: \\if number is even, return false
    return false

  p := 1 \\ initial value of p in the Lucas-Lehmer test
  for i := 0 to num - 2:
    p := (p * p - 2) % num \\ calculate value of p for each iteration
  if p == 0: \\ if p is equal to 0, then num is prime
    return true
  else: \\ otherwise, num is not prime
    return false

\\ Define function for finding the next mersenne prime number
function next_mersenne_prime():
  num := 3 \\ start with the first odd prime number
  while true:
    if is_prime(num): \\ check if number is prime
      if is_prime(mod_pow(2, num, num-1)): \\ check if number is a mersenne prime using the Lucas-Lehmer test
        return num \\ if number is a mersenne prime, return it
    num := num + 2 \\ increment by 2 since we only need to check odd numbers

\\ Call function to print next mersenne prime number
print(next_mersenne_prime())