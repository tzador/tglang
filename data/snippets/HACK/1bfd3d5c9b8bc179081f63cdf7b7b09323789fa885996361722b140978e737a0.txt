# This code snippet performs a brute force attack on a given password-protected device

# Import necessary libraries
import itertools
import hashlib
import string

# Define function to generate all possible combinations of uppercase, lowercase, and numeric characters
def generate_combinations(length):
    if length == 1:
        return list(string.ascii_letters + string.digits)
    else:
        combos = []
        for combo in generate_combinations(length - 1):
            for letter in string.ascii_letters + string.digits:
                combos.append(combo + letter)
        return combos

# Define function to perform a brute force attack
def brute_force(password_hash, max_length):
    combos = generate_combinations(max_length)
    
    # Loop through all possible combinations
    for combo in combos:
        # Hash combination using SHA-256
        hash = hashlib.sha256(combo.encode()).hexdigest()
        
        # If the hashed combination matches the password hash, print the combination and break out of the loop
        if hash == password_hash:
            print(f"Password found: {combo}")
            break

# User input for password to brute force and maximum length to check 
password = input("Enter password to brute force: ")
max_length = int(input("Enter maximum length to check: "))

# Generate hash of password using SHA-256
password_hash = hashlib.sha256(password.encode()).hexdigest()

# Call brute force function
brute_force(password_hash, max_length)

# Output:  
# Password found: secret123