//Function to check if a number is prime
def isPrime(number):
    //Initialize flag to track if number is prime
    flag = 1
    //Loop through divisors
    for divisor in range(2, number):
        //Check if number is divisible by divisor
        if number % divisor == 0:
            //Number is not prime, set flag to 0 and break loop
            flag = 0
            break
    //Check flag and print appropriate message
    if flag == 0:
        print(number, "is not a prime number")
    else:
        print(number, "is a prime number")

//Function to generate fibonacci sequence
def fibonacci(limit):
    //First two numbers in the sequence
    num1 = 0
    num2 = 1
    //Initialize list to store sequence
    sequence = []
    //Loop through numbers until limit is reached
    while num1 < limit:
        //Append current number to sequence list
        sequence.append(num1)
        //Calculate next number in sequence
        next_num = num1 + num2
        //Update num1 and num2
        num1 = num2
        num2 = next_num
    //Print sequence
    print("Fibonacci sequence up to", limit)
    print(sequence)

//Function to implement bubble sort algorithm
def bubbleSort(array):
    //Initialize n to length of array
    n = len(array)
    //Loop through array elements
    for i in range(n):
        //Loop through remaining elements
        for j in range(0, n-i-1):
            //Swap elements if they are in wrong order
            if array[j] > array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
    //Print sorted array
    print("Sorted array:")
    print(array)
    
//Function to implement binary search algorithm
def binarySearch(array, target):
    //Initialize start and end indices
    start = 0
    end = len(array) - 1
    //Loop until start index is less than or equal to end index
    while start <= end:
        //Calculate middle index
        mid = (start + end) // 2
        //Check if target is equal to middle element
        if array[mid] == target:
            //Target found, return index
            return mid
        //If target is greater than middle element, discard left half of array
        elif target > array[mid]:
            start = mid + 1
        //If target is less than middle element, discard right half of array
        else:
            end = mid - 1
    //Target not found, return -1
    return -1