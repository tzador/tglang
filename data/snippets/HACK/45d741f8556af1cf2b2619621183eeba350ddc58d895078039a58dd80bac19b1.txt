\# DEFINE FUNCTION STARTING AT ADDRESS 0xABCDEF:
0xABCDEF:         \# Address of start of function
    LD r1, 0xAB   \# Load value from memory address 0xAB into register r1
    LD r2, 0xCD   \# Load value from memory address 0xCD into register r2
    XOR r3, r1, r2   \# Bitwise exclusive OR of values in registers r1 and r2, result stored in register r3
    OUT r3        \# Output value in register r3
    ADDI r1, 0x01   \# Add value 0x01 to value in register r1
    SUBI r2, 0x02   \# Subtract value 0x02 from value in register r2
    JMPNZ 0xABCDEF   \# Jump to address 0xABCDEF if value in register r3 is not equal to zero
    RDI          \# Return from function

\# Main program:
LD r4, 0x02      \# Load value 0x02 into register r4
LD r5, 0x04       \# Load value 0x04 into register r5
CALL 0xABCDEF      \# Call function starting at address 0xABCDEF
HLT           \# Halt program execution