;;; ////////////////////////////// HACK PROGRAMMING LANGUAGE ////////////////////////////
;; Syntax:
;; The syntax of HACK is similar to that of Lisp, with prefix notation and parentheses to
;; group expressions.
;; Comments are indicated by semicolon (;) and can span multiple lines.
;; Examples of valid expressions are:
;; (+ (* 2 3) (- 5 2)) ; arithmetic expression with nested expressions
;; (define x 10) ; define a variable
;; (print (* x 2)) ; print the result of an expression

;;; ////////////////////////////// KEYWORDS ///////////////////////
;; Keywords are special symbols used to indicate specific language constructs.
;; The keywords in HACK are:
;; * define - used to define variables and functions
;; * if - conditional statement that executes code if a condition is met
;; * while - loop that executes code while a condition is true
;; * set! - used to reassign values to existing variables
;; * print - prints the result of an expression to the console
;; * defun - used to define a function
;; * let - creates a local scope and binds variables to values within that scope

;;; ////////////////////////////// EXAMPLE PROGRAM ///////////////////////
;; This is a simple program that calculates the fibonacci sequence and prints the result.
(define fib
  (defun (n)
    (if (= n 0)
      0
      (if (= n 1)
        1
        (+ (fib (- n 1)) (fib (- n 2)))))))
(print (fib 10))

;;; ////////////////////////////// BUILT-IN FUNCTIONS ///////////////////////
;; HACK has several built-in functions that can be used in expressions.
;; Some examples are:
;; * (+ x y) - adds x and y
;; * (- x y) - subtracts y from x
;; * (* x y) - multiplies x and y
;; * (= x y) - compares x and y for equality
;; * (< x y) - checks if x is less than y
;; * (<= x y) - checks if x is less than or equal to y
;; * (> x y) - checks if x is greater than y
;; * (>= x y) - checks if x is greater than or equal to y

;;; ////////////////////////////// ADVANCED FEATURES ///////////////////////
;; HACK also has some advanced features such as:
;; * Tail-call optimization - to optimize recursive functions and avoid stack overflow
;; * Closures - functions that can be passed as arguments and passed around in the code
;; * Macros - code transformations that are executed at compile time to manipulate code
;; * Garbage collection - to automatically free up memory used by unused variables and objects

;;; ////////////////////////////// CONCLUSION ///////////////////////
;; HACK is a powerful programming language that combines the simplicity of Lisp syntax
;; with advanced features that make it suitable for a wide range of applications.