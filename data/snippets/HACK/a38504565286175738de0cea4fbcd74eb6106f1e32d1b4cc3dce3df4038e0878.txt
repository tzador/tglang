>> pointer to int : memory ; //pointer to integer representing memory

>> read : addr , val ; // function to read value from address
>>     memory[addr] := val ; //set memory value at address to given input value

>> write : addr ; //function to write value to address
>>     return memory[addr] ; //return value stored in memory at given address

>> getLength : ptr ; //function to get length of given string
>>     return ( /\ = ) . //return length of string

>> encode : str ; //function to encrypt given string
>>     index = getLength(str) ; //get length of string as starting point for encryption
>>     while (index > 1) do //begin loop to traverse through string characters
>>         if index mod 2 = 0 then //if index is even
>>             index := index / 2 ; //divide index by 2
>>         else //if index is odd
>>             index := (index+1) / 2 ; //add 1 to index and divide by 2
>>         str = str . index . //append index to string
>>     return str ; //return encrypted string

>> decode : str ; //function to decrypt given string
>>     index = getLength(str) ; //get length of string as starting point for decryption
>>     while (index > 1) do //begin loop to traverse through string characters
>>         if index mod 2 = 0 then //if index is even
>>             index := index / 2 ; //divide index by 2
>>         else //if index is odd
>>             index := (index-1) / 2 ; //subtract 1 from index and divide by 2
>>         str = str \ index \ //remove index from string
>>     return str ; //return decrypted string

>> encrypted_msg := encode("Hello, world!") ; //encrypt given string
>> decrypted_msg := decode(encrypted_msg) ; //decrypt encrypted string
>> write(0, decrypted_msg) ; //write decrypted string to memory address 0 (starting point)