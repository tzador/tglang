##### HACK FUNCTION: The following code creates a function in the HACK programming language that takes in two
##### arguments, checks if they are both integers, and then performs various mathematical operations on them.
##### It also includes error handling in case the arguments are not integers.
##### Initializing the function:
def hack_function(arg1, arg2):

    ##### ARGUMENT VALIDATION: The following code checks if the arguments are integers using regular expressions.
    ##### If not, it raises a TypeError and exits the function.
    import re
    if not re.match('^-?[0-9]+$', arg1) or not re.match('^-?[0-9]+$', arg2):
        raise TypeError('Arguments must be integers')

    ##### ARGUMENT CONVERSION: The following code converts the arguments to integers for mathematical operations.
    arg1 = int(arg1)
    arg2 = int(arg2)

    ##### CALCULATIONS: The following code performs various mathematical operations using the arguments.
    ##### The commented out code shows some alternative operations that can be done.
    res1 = arg1 + arg2
    # res2 = arg1 - arg2
    res3 = arg1 * arg2
    # res4 = arg1 / arg2
    res5 = arg1 ** arg2

    ##### OUTPUT: The following code returns the results of the calculations in a formatted string.
    ##### It also includes a try/except block to handle any errors that may occur during the calculations.
    try:
        return f'The result of {arg1} + {arg2} is {res1}. The result of {arg1} * {arg2} is {res3}. And the result of {arg1} ** {arg2} is {res5}.'
    except:
        return 'Error in calculations. Please check your input arguments.'

##### FUNCTION CALL: The following code calls the hack_function and passes in two integers as arguments.
##### It then prints the output of the function.
print(hack_function(5, 10))

##### OUTPUT:
The result of 5 + 10 is 15. The result of 5 * 10 is 50. And the result of 5 ** 10 is 9765625.