# This code is written in HACK programming language
# It generates a random maze using depth-first search algorithm

let rows: int = 15     // number of rows in the maze
let cols: int = 15     // number of columns in the maze

// define a cell class to represent each cell in the maze
class Cell:
    let row: int       // row index of the cell
    let col: int       // column index of the cell
    var walls: bool[4] // array to track which walls are present - left, right, top, bottom
    var visited: bool  // flag to indicate if the cell has been visited

    // constructor to initialize the cell
    funct init(row: int, col: int):
        this.row = row
        this.col = col
        this.walls = new bool[4]
        this.walls.fill(true)  // all walls are initially present
        this.visited = false

// create a 2D array to represent the maze
var maze: Cell[][]

// function to initialize the maze
funct initMaze():
    // initialize each cell in the maze
    for i in 0..rows:
        maze[i] = new Cell[cols]
        for j in 0..cols:
            maze[i][j] = new Cell(i, j)

// function to check if a cell has any unvisited neighbors
funct hasUnvisitedNeighbors(cell: Cell):
    // get coordinates of current cell
    let row: int = cell.row
    let col: int = cell.col

    // check if left cell exists and is unvisited
    if col > 0 and not maze[row][col-1].visited:
        return true
    // check if right cell exists and is unvisited
    if col < cols-1 and not maze[row][col+1].visited:
        return true
    // check if top cell exists and is unvisited
    if row > 0 and not maze[row-1][col].visited:
        return true
    // check if bottom cell exists and is unvisited
    if row < rows-1 and not maze[row+1][col].visited:
        return true
    return false

// function to generate the maze using depth-first search algorithm
funct generateMaze():
    let stack: Cell[] = []     // stack to track visited cells
    let currentCell: Cell = maze[0][0]  // start generating maze from top left cell
    currentCell.visited = true

    // loop until all cells are visited
    while len(stack) > 0 or hasUnvisitedNeighbors(currentCell):
        // add current cell to stack
        stack.append(currentCell)

        // pick a random unvisited neighbor
        let unvisitedNeighbors: Cell[] = []
        if currentCell.col > 0 and not maze[currentCell.row][currentCell.col-1].visited:
            unvisitedNeighbors.append(maze[currentCell.row][currentCell.col-1])
        if currentCell.col < cols-1 and not maze[currentCell.row][currentCell.col+1].visited:
            unvisitedNeighbors.append(maze[currentCell.row][currentCell.col+1])
        if currentCell.row > 0 and not maze[currentCell.row-1][currentCell.col].visited:
            unvisitedNeighbors.append(maze[currentCell.row-1][currentCell.col])
        if currentCell.row < rows-1 and not maze[currentCell.row+1][currentCell.col].visited:
            unvisitedNeighbors.append(maze[currentCell.row+1][currentCell.col])
        let neighbor: Cell = unvisitedNeighbors[rand(len(unvisitedNeighbors))]

        // remove walls between current cell and neighbor
        let diffx: int = currentCell.col - neighbor.col
        let diffy: int = currentCell.row - neighbor.row
        if diffx == 1:  // neighbor is to the left
            currentCell.walls[0] = false  // remove current cell's left wall
            neighbor.walls[1] = false    // remove neighbor's right wall
        else if diffx == -1:  // neighbor is to the right
            currentCell.walls[1] = false  // remove current cell's right wall
            neighbor.walls[0] = false    // remove neighbor's left wall
        else if diffy == 1:  // neighbor is above
            currentCell.walls[2] = false  // remove current cell's top wall
            neighbor.walls[3] = false    // remove neighbor's bottom wall
        else if diffy == -1: // neighbor is below
            currentCell.walls[3] = false  // remove current cell's bottom wall
            neighbor.walls[2] = false    // remove neighbor's top wall

        // make neighbor the current cell
        currentCell = neighbor
        currentCell.visited = true

// function to print the maze
funct printMaze():
    // print the top border
    print("#"*(2*cols+1))
    // loop through each row
    for i in 0..rows:
        // print left border
        print("#")
        // loop through each cell in the row
        for j in 0..cols:
            // print bottom wall if present
            if maze[i][j].walls[3]:
                print("##")
            else:
                print("# ")
        // print right border
        print("#\n")
        // loop through each cell again to print right walls
        for j in 0..cols:
            // print right wall if present
            if maze[i][j].walls[1]:
                print("# ")
            else:
                print("  ")
        // print bottom right corner
        print("#\n")
    // print bottom border
    print("#"*(2*cols+1))

// main program
initMaze()
generateMaze()
printMaze()