//Hack Program for Complex Calculation
/**
 * Function to perform exponentiation
 * @param x base number
 * @param y exponent
 * @return value of x raised to the power of y
 */
function power(x, y)
{
    if (y == 0)
        return 1;
    else if (y % 2 == 0)
    {
        //recursive call
        return power(x, y/2) * power(x, y/2);
    }
    else
    {
        //recursive call
        return x * power(x, y/2) * power(x, y/2);
    }
}

//Hack Program for Complex Encryption Algorithm
/**
 * Function to perform encryption using Caesar Cipher
 * @param message the plain text to be encrypted
 * @param key the key used for encryption
 * @return encrypted text 
 */
function caesarCipher(message, key)
{
    //converts message to uppercase
    let uppercaseMessage = message.toUpperCase();
    //initialize encrypted text
    let encryptedText = "";

    //loop through each character in message
    for (let i = 0; i < uppercaseMessage.length; i++) {
        let c = uppercaseMessage.charCodeAt(i);
        //encrypt only alphabetic characters
        if (c >= 65 && c <= 90) {
            //encrypt character using Caesar Cipher
            let encryptedChar = String.fromCharCode((c - 65 + key) % 26 + 65);
            encryptedText += encryptedChar;
        } else {
            //keep character as is
            encryptedText += uppercaseMessage.charAt(i);
        }
    }

    return encryptedText;
}

//Hack Program for Complex Sorting Algorithm
/**
 * Function to perform Quick Sort
 * @param arr array of elements to be sorted
 * @param low low index of current partition
 * @param high high index of current partition
 */
function quickSort(arr, low, high)
{
    if (low < high)
    {
        //partition the array and get pivot index
        let pivotIndex = partition(arr, low, high);
        //recursively call quicksort on left partition
        quickSort(arr, low, pivotIndex - 1);
        //recursively call quicksort on right partition
        quickSort(arr, pivotIndex + 1, high);
    }
}

//function to partition the array using pivot element
function partition(arr, low, high)
{
    //select pivot element
    let pivot = arr[high];

    //initialize index for smaller element
    let i = low - 1;

    //loop through array elements
    for (let j = low; j <= high - 1; j++)
    {
        //if current element is smaller than or equal to pivot
        if (arr[j] <= pivot)
        {
            //increase index of smaller element
            i++;
            //swap the elements at i and j
            let temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    //swap pivot with element at index i+1
    let temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    //return pivot index
    return (i + 1);
}

//Sample usage of the functions with proper inputs
let base = 5;
let exponent = 3;
let result = power(base, exponent);
console.log(`The value of ${base} raised to the power of ${exponent} is ${result}`);

let message = "Hello World";
let key = 3;
let encryptedText = caesarCipher(message, key);
console.log(`The encrypted message is: ${encryptedText}`);

let arr = [9, 3, 5, 1, 2, 7, 4];
quickSort(arr, 0, arr.length-1);
console.log(`The sorted array is: ${arr}`);