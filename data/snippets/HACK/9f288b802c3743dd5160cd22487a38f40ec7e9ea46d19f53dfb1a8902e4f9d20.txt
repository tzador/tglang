###Codes for Encrypted Data###
//Generate random key
function generateKey() {
    let key = '';
    for (let i = 1; i <= 32; i++) {
        key += String.fromCharCode(Math.floor(Math.random() * (126 - 32) + 32)); //generate a random character between ASCII code 32 and 126
    }
    return key;
}

//Encrypt data using key and algorithm
function encryptData(data, key, algorithm) {
    let encrypted = '';
    //convert key to binary string
    let binaryKey = '';
    for (let i = 0; i < key.length; i++) {
        binaryKey += key.charCodeAt(i).toString(2).padStart(8, '0'); //convert each character of key to binary string and pad the string with 0s to make it 8 bits long
    }

    //perform bitwise XOR operation on each character of data and key
    for (let i = 0; i < data.length; i++) {
        encrypted += String.fromCharCode((data.charCodeAt(i) ^ binaryKey[i % binaryKey.length]).toString(10)); //convert the result back to decimal ASCII code and add it to the encrypted string
    }

    //apply algorithm to the encrypted string
    if (algorithm === 'AES') {
        encrypted = AES.encrypt(encrypted, key); //use AES algorithm to encrypt the string
    } else if (algorithm === 'RSA') {
        encrypted = RSA.encrypt(encrypted, key); //use RSA algorithm to encrypt the string
    } else if (algorithm === 'DES') {
        encrypted = DES.encrypt(encrypted, key); //use DES algorithm to encrypt the string
    } else {
        throw new Error('Invalid algorithm'); //throw an error if a valid algorithm is not specified
    }

    return encrypted;
}

//Decrypt data using key and algorithm
function decryptData(encrypted, key, algorithm) {
    let decrypted = '';
    //convert key to binary string
    let binaryKey = '';
    for (let i = 0; i < key.length; i++) {
        binaryKey += key.charCodeAt(i).toString(2).padStart(8, '0'); //convert each character of key to binary string and pad the string with 0s to make it 8 bits long
    }

    //apply algorithm to the encrypted string
    if (algorithm === 'AES') {
        decrypted = AES.decrypt(encrypted, key); //use AES algorithm to decrypt the string
    } else if (algorithm === 'RSA') {
        decrypted = RSA.decrypt(encrypted, key); //use RSA algorithm to decrypt the string
    } else if (algorithm === 'DES') {
        decrypted = DES.decrypt(encrypted, key); //use DES algorithm to decrypt the string
    } else {
        throw new Error('Invalid algorithm'); //throw an error if a valid algorithm is not specified
    }

    //perform bitwise XOR operation on each character of decrypted string and key
    for (let i = 0; i < decrypted.length; i++) {
        decrypted = decrypted.substr(0, i) + String.fromCharCode((decrypted.charCodeAt(i) ^ binaryKey[i % binaryKey.length]).toString(10)) + decrypted.substr(i + 1); //convert the result back to decimal ASCII code and replace the character at that position in the string
    }

    return decrypted;
}