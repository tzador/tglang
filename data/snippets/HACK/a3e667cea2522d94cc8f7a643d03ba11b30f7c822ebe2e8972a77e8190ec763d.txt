<?hh // Opening tag for Hack language

// Define an abstract class with some properties
abstract class Animal {
  private string $name;
  protected int $age;
  public static bool $isAlive = true;

  // Constructor
  public function __construct(string $name, int $age) {
    $this->name = $name;
    $this->age = $age;
  }

  // Abstract method for making a sound
  abstract protected function makeSound(): string;

  // Public method to check if animal is alive
  public function isAlive(): bool {
    return self::$isAlive;
  }

  // Protected method to change the animal's name
  protected function changeName(string $newName): void {
    $this->name = $newName;
  }

}

// Define a subclass of Animal, Cat
class Cat extends Animal {

  // Constructor
  public function __construct(string $name, int $age) {
    // Call parent constructor
    parent::__construct($name, $age);
  }

  // Implementation of makeSound method
  protected function makeSound(): string {
    return "Meow";
  }

  // Public static method to create a new cat
  public static function create(string $name, int $age): Cat {
    return new self($name, $age);
  }

}

// Instantiate a Cat object
$cat = Cat::create("Fluffy", 4);

// Prints out the cat's name and age
echo "Name: ".$cat->name." Age: ".$cat->age;

// Changes the cat's name
$cat->changeName("Mittens");

// Prints out the updated name
echo "New name: ".$cat->name;

// Calls the makeSound method
echo $cat->makeSound();

// Checks if the cat is alive
if ($cat->isAlive()) {
  echo "Cat is alive.";
}

?> // Closing tag for Hack language