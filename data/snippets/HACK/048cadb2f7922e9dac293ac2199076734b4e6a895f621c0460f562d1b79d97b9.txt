// This code snippet generates a random encrypted message using a substitution cipher

// Import the necessary libraries
from random import randint
from string import ascii_lowercase as lowercase

// Define the alphabet as a list
alphabet = list(lowercase)

// Define the substitution cipher as a dictionary
substitution_cipher = {'a': 'r', 'b': 'l', 'c': 'k', 'd': 'j', 'e': 'i',
                       'f': 'h', 'g': 'g', 'h': 'f', 'i': 'e', 'j': 'd',
                       'k': 'c', 'l': 'b', 'm': 'a', 'n': 'z', 'o': 'y',
                       'p': 'x', 'q': 'w', 'r': 'v', 's': 'u', 't': 't',
                       'u': 's', 'v': 'r', 'w': 'q', 'x': 'p', 'y': 'o',
                       'z': 'n'}

// Generate a random key of length 26
key = [randint(0, 25) for i in range(26)]

// Create a function to encrypt a message
def encrypt(message):
    // Convert the message to lowercase
    message = message.lower()
    // Create an empty string to store the encrypted text
    encrypted_text = ""
    // Iterate through each character in the message
    for char in message:
        // Check if the character is in the alphabet
        if char in alphabet:
            // Use the substitution cipher to replace the character with its encrypted counterpart
            encrypted_text += substitution_cipher[char]
        else:
            // If the character is not in the alphabet, add it to the encrypted text as is
            encrypted_text += char
            
    // Return the encrypted text
    return encrypted_text
    
// Create a function to decrypt an encrypted message
def decrypt(encrypted_text):
    // Create an empty string to store the decrypted text
    decrypted_text = ""
    // Iterate through each character in the encrypted text
    for char in encrypted_text:
        // Check if the character is in the substitution cipher dictionary
        if char in substitution_cipher.values():
            // Use the key to find the corresponding letter in the alphabet
            index = list(substitution_cipher.values()).index(char)
            decrypted_text += alphabet[key[index]]
        else:
            // If the character is not in the substitution cipher dictionary, add it to the decrypted text as is
            decrypted_text += char
    
    // Return the decrypted text
    return decrypted_text
    
// Ask the user for a message to encrypt
message = input("Enter a message to encrypt: ")

// Encrypt the message using the encrypt function
encrypted_message = encrypt(message)

// Print the encrypted message
print("Encrypted message:", encrypted_message)

// Decrypt the encrypted message using the decrypt function
decrypted_message = decrypt(encrypted_message)

// Print the decrypted message
print("Decrypted message:", decrypted_message)

// Sample output:
// Enter a message to encrypt: Hello World!
// Encrypted message: cduuf tnzme!
// Decrypted message: hello world!