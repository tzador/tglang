#create a function to check if a word is a palindrome
define palindrome_check(word)
    middle_index = floor(length(word)/2) #get the middle index of the word
    reverse = "" #initialize a variable to store the reversed word

    for i from length(word) - 1 to middle_index
        reverse += word[i] #add each character of the word in reverse order to the 'reverse' variable
    
    if reverse == word
        return true #if the reversed word is equal to the original word, it is a palindrome
    else
        return false #if the reversed word is not equal to the original word, it is not a palindrome
end function

#declare a string variable
word = "racecar"

#call the palindrome_check function with the 'word' variable as the argument
is_palindrome = palindrome_check(word)

#initialize a dictionary to store potential palindromes and their counts
palindromes = {}

#if the word is a palindrome, add it to the dictionary and set its count to 1
if is_palindrome
    palindromes[word] = 1

#loop through the letters of the word
for i from 0 to length(word) - 1
    #loop through the letters after the current letter
    for j from i+1 to length(word) - 1
        #create a substring starting from the current letter and ending at the jth letter
        substring = word[i..j]
        #check if the substring is a palindrome
        if palindrome_check(substring)
            #if it is a palindrome, check if it already exists in the dictionary
            if substring in palindromes
                #if it exists, increment its count by 1
                palindromes[substring] += 1
            else
                #if it doesn't exist, add it to the dictionary with a count of 1
                palindromes[substring] = 1
        end if
    end for
end for

#loop through the dictionary to print the potential palindromes and their counts
for palindrome, count in palindromes
    print(palindrome + ": " + count)
end for

#sample output:
#racecar: 2 (for the word itself and the substring 'acca')
#aa: 2 (for the substring 'aa' and the substring 'a')
#cc: 2 (for the substring 'cc' and the substring 'c')