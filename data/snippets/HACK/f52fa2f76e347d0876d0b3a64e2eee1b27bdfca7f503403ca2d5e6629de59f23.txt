;;; This is a code snippet written in the programming language HACK
;;;
;;; Hack is a programming language developed by Facebook specifically for 
;;; the HHVM (HipHop Virtual Machine) platform. It's intended to be used for 
;;; developing high-performance web applications that are written in Hack and 
;;; run on HHVM.
;;;
;;; This code snippet is a simple function that generates a special string 
;;; based on an input number.
;;;
;;; The code starts with the `hhvm` directive, which indicates that the code 
;;; should be run on the HHVM platform.
hhvm

;;; The `function` keyword is used to declare a new function named `generate_string`.
;;; It takes in one parameter, `num`, which is of type `int`.
;;; The `:` symbol is used to indicate the return type of the function, which is `string`.
;;; The function body is enclosed in curly braces.
function generate_string(int num): string {
    ;;; The `%` symbol is used for modulo division, which finds the remainder of `num` divided by 3.
    ;;; If the remainder is 0, the code between the curly braces will be executed.
    ;;; Otherwise, the next `elseif` statement will be evaluated.
    if (num % 3 === 0) {
        ;;; The `str` variable is declared and initialized with the string "Fizz".
        ;;; The `.` symbol is used for string concatenation.
        ;;; `str` is concatenated with the return value of the `generate_special()` function.
        str := "Fizz" . generate_special(num)
        ;;; The `return` keyword is used to return the value of `str`.
        return str
    } elseif (num % 5 === 0) {
        ;;; Similar to the first `if` statement, if the remainder is 0, the code between the curly braces will be executed.
        ;;; The `str` variable is declared and initialized with the string "Buzz".
        ;;; The `.` symbol is used for string concatenation.
        ;;; `str` is concatenated with the return value of the `generate_special()` function.
        str := "Buzz" . generate_special(num)
        ;;; The `return` keyword is used to return the value of `str`.
        return str
    } else {
        ;;; If none of the previous `if` statements are true, the code between the curly braces will be executed.
        ;;; The `str` variable is declared and initialized with the return value of the `generate_special()` function.
        str := generate_special(num)
        ;;; The `return` keyword is used to return the value of `str`.
        return str
    }
}

;;; This function is used to generate a special string based on the input number.
;;; It takes in one parameter, `num`, which is of type `int`.
function generate_special(int num): string {
    ;;; The `str` variable is declared and initialized with an empty string.
    str := ""
    ;;; A `for` loop is used to iterate `num` number of times.
    ;;; On each iteration, the `i` variable is incremented by 1 and `str` is concatenated with the value of `i`.
    ;;; The `.` symbol is used for string concatenation.
    for i := 0; i < num; i++ {
        str := str . i
    }
    ;;; The `return` keyword is used to return the value of `str`.
    ;;; The returned string will contain numbers from 0 to `num`, separated by a space.
    return str
}

;;; The `echo` keyword is used to output the result of the `generate_string()` function 
;;; when it's called with an input of 15.
;;; The result will be "FizzBuzz 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14".
echo generate_string(15)