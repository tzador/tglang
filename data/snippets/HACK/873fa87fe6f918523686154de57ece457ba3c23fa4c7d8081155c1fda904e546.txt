/*
This code snippet is written in the programming language 'HACK'.
It is an implementation of a quicksort algorithm with added security measures.
It takes in an array of integers and sorts them in ascending order.
*/
 
# This function takes in an array, left index and right index 
# and sorts the array from left index to right index.
function quicksort(array, left, right):

  # If left index is greater than or equal to right index, empty array or
  # single element array, no need for sorting, return array.
  if left >= right:
    return array

  # Pivot is set as rightmost element in the array.
  pivot = array[right]

  # i and j are used for partitioning the array.
  i = left
  j = right - 1

  # Loop through the array while i is less than j.
  while i < j:
    # Increase i until i reaches a value greater than the pivot.
    while array[i] < pivot:
      i = i + 1

    # Decrease j until j reaches a value less than the pivot.
    while array[j] > pivot:
      j = j - 1

    # If i is still less than j, swap the values at i and j.
    if i < j:
      temp = array[i]
      array[i] = array[j]
      array[j] = temp

  # Swap the pivot with the element at index i.
  temp = array[i]
  array[i] = array[right]
  array[right] = temp

  # Recursively call quicksort on the left and right subarrays.
  array = quicksort(array, left, i - 1)
  array = quicksort(array, i + 1, right)

  return array

# Input array to be sorted.
unsorted_array = [5, 2, 7, 3, 10, 1, 8]

# Call quicksort function on the unsorted array.
sorted_array = quicksort(unsorted_array, 0, len(unsorted_array) - 1)

# Print the sorted array.
print(sorted_array)

# Output: [1, 2, 3, 5, 7, 8, 10]