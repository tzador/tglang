# This is a sample code snippet in the programming language HACK
# It generates a list of prime numbers using the Sieve of Eratosthenes algorithm

# Define a function that takes in a number n and returns a list of prime numbers up to n
def get_primes(n):
    # Initialize a list of booleans where the indices represent numbers from 0 to n
    # and the values represent whether the number is prime or not
    primes = [True] * (n + 1)
    # 0 and 1 are not prime, so set their respective indices to False
    primes[0] = primes[1] = False
    # Loop through all numbers from 2 up to n
    for i in range(2, n + 1):
        # If the current number is marked as prime (True), then it is a prime number
        if primes[i]:
            # Loop through all multiples of the current number starting from its square
            # (all smaller multiples would have been marked as non-prime in previous iterations)
            for j in range(i * i, n + 1, i):
                # Mark the current multiple as non-prime (False)
                primes[j] = False
    # Create a list of all indices (numbers) that are marked as prime (True)
    prime_numbers = [i for i, prime in enumerate(primes) if prime]
    # Return the list of prime numbers
    return prime_numbers

# Call the function with n = 100 and print the result
print(get_primes(100))