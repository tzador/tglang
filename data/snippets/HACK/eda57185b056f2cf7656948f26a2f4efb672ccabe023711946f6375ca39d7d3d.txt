// Declaring variables for keys and ciphertext
var key1 = "h7s4g5j2";
var key2 = "b8n3m6l9";

// Encrypting the message
var plaintext = "This is a secret message.";
// Converting the message to binary
var binary = textToBinary(plaintext);

// Performing bitwise XOR operation on the binary message using the keys
var ciphertext = binaryXOR(binary, key1, key2);

// Function to convert text to binary
function textToBinary(text) {
  var binary = "";
  for (var i = 0; i < text.length; i++) {
    // Converting each character to binary using charCodeAt() method
    var charCode = text.charCodeAt(i);
    var binaryChar = charCode.toString(2);
    binary += binaryChar;
  }
  return binary;
}

// Function to perform bitwise XOR operation on two binary numbers using the keys
function binaryXOR(binary1, binary2, key1, key2) {
  var result = "";
  // Matching the length of the longer binary number
  var maxLength = Math.max(binary1.length, binary2.length);
  binary1 = padLeft(binary1, maxLength);
  binary2 = padLeft(binary2, maxLength);
  key1 = padLeft(key1, maxLength);
  key2 = padLeft(key2, maxLength);

  // Performing XOR operation on each bit
  for (var i = 0; i < maxLength; i++) {
    var bit1 = binary1.charAt(i);
    var bit2 = binary2.charAt(i);
    var keyBit1 = key1.charAt(i);
    var keyBit2 = key2.charAt(i);
    // XOR operation using logical AND and NOT operators
    var xor = ((bit1 && !bit2) || (!bit1 && bit2)) && ((keyBit1 && !keyBit2) || (!keyBit1 && keyBit2));
    // Appending the result to ciphertext
    result += xor ? "1" : "0";
  }
  return result;
}

// Function to pad a binary number with leading zeros to match a specified length
function padLeft(binary, desiredLength) {
  // Calculating the number of leading zeros to add
  var padLength = desiredLength - binary.length;
  if (padLength > 0) {
    // Adding leading zeros using repeat() method
    binary = "0".repeat(padLength) + binary;
  }
  return binary;
}

// Printing the ciphertext
console.log(ciphertext);