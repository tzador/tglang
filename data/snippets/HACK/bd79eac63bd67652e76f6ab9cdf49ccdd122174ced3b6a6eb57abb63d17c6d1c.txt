// This code calculates the Fibonacci sequence up to a given number using a recursive approach

// Initialize a global array to store the Fibonacci sequence
let fibSequence = [];

// Function to calculate the Fibonacci sequence recursively
// Takes in a number as the limit for the sequence
// Returns an array containing the sequence up to the given limit
function calculateFibonacci(limit) {
    // Base case for the recursion to stop
    if (limit === 0) {
        return [];
    }

    // If the global array is empty, push the first two numbers of the sequence
    if (fibSequence.length === 0) {
        fibSequence.push(0);
        fibSequence.push(1);
    }

    // Until the limit is reached, keep adding the sum of the last two numbers in the sequence
    // to the global array, and decrement the limit
    while (limit > 2) {
        let lastNum = fibSequence[fibSequence.length - 1]; // Get the last number in the sequence
        let secondLastNum = fibSequence[fibSequence.length - 2]; // Get the second last number in the sequence

        // Calculate the next number in the sequence by adding the last two numbers
        let nextNum = lastNum + secondLastNum;
        
        fibSequence.push(nextNum); // Add the next number to the global array
        limit--;
    }

    return fibSequence; // Return the global array
}

// Call the function with a limit of 10 and store the result in a variable
let fibonacciResult = calculateFibonacci(10);

// Print the Fibonacci sequence up to the limit of 10
console.log(`The Fibonacci sequence up to 10 is: ${fibonacciResult}`); // Output: The Fibonacci sequence up to 10 is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34

// The following code is just for demonstration purposes and is not a part of the actual algorithm
// It shows how the global array is updated after each iteration of the recursion
console.log(`The global array after each iteration of the recursion is: ${fibSequence}`); // Output: The global array after each iteration of the recursion is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34