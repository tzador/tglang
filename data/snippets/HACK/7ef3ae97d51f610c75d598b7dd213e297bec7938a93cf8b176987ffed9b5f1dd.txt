# --- Markov Chain Text Generator ---
# Creates a text generator using a Markov Chain algorithm
# Author: John Smith

# --- Import Libraries ---
# Import NumPy for random number generation
import numpy as np

# --- Input Text ---
text = "This is a sample text for testing the Markov Chain text generator."

# --- Pre-process Text ---
# Split the text into individual words
words = text.split()
# Create a dictionary to store transition probabilities
probabilities = {}

# --- Generate Transition Probabilities ---
# Loop through all words in the text
for i in range(len(words)):
    # Check if the current word is already in the dictionary
    if words[i] in probabilities:
        # If so, increment the count for the next word
        probabilities[words[i]][words[i+1]] += 1
    else:
        # If not, create a new entry in the dictionary
        probabilities[words[i]] = {words[i+1]: 1}

# --- Normalize Probabilities ---
# Loop through each word in the dictionary
for word, transitions in probabilities.items():
    # Calculate the total count of transitions for each word
    total_count = sum(transitions.values())
    # Loop through each transition for the current word
    for next_word, count in transitions.items():
        # Normalize the transition probability by dividing by the total count
        probabilities[word][next_word] = count / total_count

# --- Generate Text ---
# Initialize an empty list to store the generated words
generated_text = []
# Select a random starting word from the text
current_word = np.random.choice(words)
# Append the current word to the generated text
generated_text.append(current_word)

# Set the number of words to be generated
NUM_WORDS = 10

# Loop through the specified number of words
for i in range(NUM_WORDS):
    # Select the next word based on the transition probabilities of the current word
    next_word = np.random.choice(list(probabilities[current_word].keys()), p=list(probabilities[current_word].values()))
    # Append the next word to the generated text
    generated_text.append(next_word)
    # Set the next word as the current word for the next iteration
    current_word = next_word

# --- Print Generated Text ---
# Convert the list of generated words into a single string
generated_text = ' '.join(generated_text)
# Print the final generated text
print(generated_text)