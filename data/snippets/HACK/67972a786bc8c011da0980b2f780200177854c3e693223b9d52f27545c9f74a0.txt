### General purpose register #1
global GPR1;

### General purpose register #2
global GPR2;

### Add instruction
instruction add {
    # get values from GPR1 and GPR2
    load GPR1, val1;
    load GPR2, val2;
    
    # add values and store in GPR1
    val1 = val1 + val2;
    store GPR1, val1;
}

### Subtract instruction
instruction sub {
    # get values from GPR1 and GPR2
    load GPR1, val1;
    load GPR2, val2;
    
    # subtract values and store in GPR1
    val1 = val1 - val2;
    store GPR1, val1;
}

### Stack pointer register
global SP;

### Push instruction
instruction push {
    # decrement SP by 1
    SP = SP - 1;
    # store value from GPR1 in stack address pointed to by SP
    store SP, GPR1;
}

### Pop instruction
instruction pop {
    # load value from stack address pointed to by SP into GPR1
    load SP, GPR1;
    # increment SP by 1
    SP = SP + 1;
}

### Memory address register
global MAR;

### Memory data register
global MDR;

### Move instruction
instruction move {
    # get value from GPR1
    load GPR1, val1;
    # set MAR to memory address
    MAR = 0x1000;
    # store value in MDR
    MDR = val1;
    # write value from MDR to memory address pointed to by MAR
    write MAR, MDR;
}