/**
 * The following code snippet is an implementation of the 
 * Quick Sort algorithm in the HACK programming language. 
 * It takes in an array that needs to be sorted and 
 * recursively partitions it and swaps elements to 
 * achieve the correct order.
 */

//Function to perform Quick Sort
func quickSort(arr, low, high){
    //Base case: checks if low index is less than high index
    if(low < high){
        
        //Partition the array and obtain the pivot index
        pivot_index = partition(arr, low, high);
        
        //Sort the left subarray
        quickSort(arr, low, pivot_index-1);
        
        //Sort the right subarray
        quickSort(arr, pivot_index+1, high);
    }
}

//Function to partition the array
func partition(arr, low, high){
    //Select the pivot element as the last element in the array
    pivot = arr[high];

    //Initialize the left and right pointers
    left = low;
    right = high - 1;

    //Loop until left pointer crosses right pointer
    while(left < right){
        
        //Move left pointer until an element greater than pivot is found
        while(arr[left] <= pivot){
            left++;
        }
        
        //Move right pointer until an element less than pivot is found
        while(arr[right] > pivot){
            right--;
        }
        
        //If left pointer is still smaller than right pointer, swap the elements
        if(left < right){
            swap(arr[left], arr[right]);
        }
    }
    
    //Swap the pivot element with the element at the right pointer position
    swap(arr[high], arr[right]);
    
    //Return the pivot index
    return right;
}

//Function to swap two elements in an array
func swap(first, second){
    temp = first;
    first = second;
    second = temp;
}
 
//Example usage
arr = [5, 8, 1, 3, 4, 6];
quickSort(arr, 0, length(arr)-1);

//Output: [1, 3, 4, 5, 6, 8]