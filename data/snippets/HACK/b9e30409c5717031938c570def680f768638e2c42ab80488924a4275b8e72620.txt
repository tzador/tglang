function encrypt(input) {
    let chunked = chunk(input);
    let encrypted = '';
    for (let i = 0; i < chunked.length; i++) {
        let num = chunked[i];
        let s = num_to_str(num);
        let bin = to_binary(s);
        let shifted = shift(bin);
        let hex = to_hex(shifted);
        encrypted += hex;
    }
    return encrypted;
}

function decrypt(encrypted) {
    let chunked = chunk(encrypted);
    let decrypted = '';
    for (let i = 0; i < chunked.length; i++) {
        let hex = chunked[i];
        let shifted = to_binary(hex);
        let bin = reverse_shift(shifted);
        let s = str_to_num(bin);
        let num = reverse_binary_to_number(s);
        decrypted += String.fromCharCode(num);
    }
    return decrypted;
}

function chunk(input) {
    let chunked = [];
    let chunk_size = Math.floor(input.length / 5);
    for (let i = 0; i < input.length; i += chunk_size) {
        chunked.push(input.substring(i, i + chunk_size));
    }
    return chunked;
}

function num_to_str(num) {
    let str = num.toString();
    return str;
}

function to_binary(str) {
    let bin = '';
    for (let i = 0; i < str.length; i++) {
        bin += str[i].charCodeAt(0).toString(2) + ' ';
    }
    return bin;
}

function shift(bin) {
    //complex shifting algorithm goes here
    return bin;
}

function to_hex(bin) {
    //complex hex conversion algorithm goes here
    return bin;
}

function reverse_shift(bin) {
    //complex reverse shifting algorithm goes here
    return bin;
}

function str_to_num(str) {
    let num = parseInt(str);
    return num;
}

function reverse_binary_to_number(bin) {
    let num = parseInt(bin, 2);
    return num;
}