; Set up initial variables
let planetList = // Planet names in an array
let roverName = // Name of our rover
let roverPos = // Current position of rover, [x, y]
let roverDir = // Current direction rover is facing, N/S/E/W
let roverMoves = // List of moves to execute, represented by L/R/F (Left/Right/Forward)

; Set up initial functions
(forward rover
  if roverDir == "N":
    roverPos[1] += 1
  else if roverDir == "S":
(roverPos[1] -= 1
  else if roverDir == "E":
roverPos[0] += 1
  else
(roverPos[0] -= 1)

; Execute moves from roverMoves list
(forEach move in roverMoves
  if move == "L":
turnLeft(roverDir)
  else if move == "R":
turnRight(roverDir)
  else
moveForward(roverPos, roverDir)

; Turn rover left based on current direction
(turnLeft dir
  if dir == "N":
roverDir = "W"
  else if dir == "S":
roverDir = "E"
  else if dir == "E":
roverDir = "N"
  else
roverDir = "S")

; Turn rover right based on current direction
(turnRight dir
  if dir == "N":
roverDir = "E"
  else if dir == "S":
roverDir = "W"
  else if dir == "E":
roverDir = "S"
  else
roverDir = "N")

; Main code
(forEach planet in planetList
  if planet == "Mars"
  ; Set initial values for Mars
roverName = "Opportunity"
    roverPos = [10, 10]
    roverDir = "N"
    roverMoves = ["F", "R", "F", "F", "L", "F"]

    ; Print initial rover status
    console.log("Rover " + roverName + " is on Mars at position " + roverPos + " facing " + roverDir + ".")

    ; Execute moves for Mars
    forEach move in roverMoves
      if move == "L"
        turnLeft(roverDir)
      else if move == "R"
        turnRight(roverDir)
      else
        moveForward(roverPos, roverDir)

    ; Print final rover status
    console.log("Rover " + roverName + " ended at position " + roverPos + " facing " + roverDir + ".")
)