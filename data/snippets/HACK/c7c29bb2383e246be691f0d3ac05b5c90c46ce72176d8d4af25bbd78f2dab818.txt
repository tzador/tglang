//This code snippet takes a string as input and returns a list of all possible combinations of the string's characters.

const combinations = (string) => {
  //initialize a results array
  const results = [];
  
  //helper function to generate all combinations
  const generateCombinations = (str, start, end) => {
    //if start and end are equal, add current combination to results array
    if (start === end) {
      results.push(str);
    } else {
      //loop through all characters at current position
      for (let i = start; i <= end; i++) {
        //swap current character with first character
        const swappedStr = swap(str, start, i);
        
        //call helper function with start incremented by 1
        generateCombinations(swappedStr, start + 1, end);
      }
    }
  }
  
  //helper function to swap characters at given indices
  const swap = (str, i, j) => {
    const chars = str.split('');
    const temp = chars[i];
    chars[i] = chars[j];
    chars[j] = temp;
    return chars.join('');
  }
  
  //call helper function with initial string, start index as 0, and end index as string length - 1
  generateCombinations(string, 0, string.length - 1);
  
  //return results array
  return results;
}

//sample usage
console.log(combinations('abc'));

/* 
Output:
[
  'abc',
  'acb',
  'bac',
  'bca',
  'cab',
  'cba'
]
*/