* Initialising encryption algorithm *
> // Generate random key
> key = generate_random_key()
>
> // Generate random initialization vector
> iv = generate_random_iv()
>
> // Pad message to be a multiple of key size
> padded_message = pad_message(message)
>
> // Initialise AES encryption
> aes = initialise_aes(key, iv)
>
> // Encrypt padded message
> encrypted_message = encrypt(aes, padded_message)
>
> * Sending encrypted message to server *
> // Convert encrypted message to base64 string
> base64_message = convert_to_base64(encrypted_message)
>
> // Generate random server key
> server_key = generate_random_key()
>
> // Generate random server initialization vector
> server_iv = generate_random_iv()
>
> // Initialise AES encryption with server key and iv
> server_aes = initialise_aes(server_key, server_iv)
>
> // Encrypt server key with main key
> encrypted_server_key = encrypt(server_aes, server_key)
>
> // Encrypt server iv with main key
> encrypted_server_iv = encrypt(server_aes, server_iv)
>
> * Sending encrypted server key and iv to client *
> // Convert encrypted server key and iv to base64 strings
> base64_server_key = convert_to_base64(encrypted_server_key)
> base64_server_iv = convert_to_base64(encrypted_server_iv)
>
> // Send base64 server key and iv to client
> send(base64_server_key, base64_server_iv)
                                           
> * Receiving encrypted message and decrypting * 
> // Receive base64 encrypted message from client
> base64_encrypted_message = receive()
>
> // Decode base64 message and convert back to bytes
> encrypted_message = decode_base64(base64_encrypted_message)
>
> // Decrypt encrypted message with main key
> decrypted_message = decrypt(aes, encrypted_message)
>
> // Unpad decrypted message
> message = unpad_message(decrypted_message)
>
> * Client-side encryption verification *
> // Re-initialise AES encryption with server key and iv
> server_side_aes = initialise_aes(server_key, server_iv)
>
> // Decrypt received server key with main key
> decrypted_server_key = decrypt(aes, encrypted_server_key)
>
> // Decrypt received server iv with main key
> decrypted_server_iv = decrypt(aes, encrypted_server_iv)
>
> // Compare server key and iv with decrypted versions
> if server_key == decrypted_server_key && server_iv == decrypted_server_iv:
>     // Encryption successful
>     print("Message successfully encrypted and decrypted.")
> else:
>     // Encryption failed
>     print("Failed to encrypt or decrypt message.")