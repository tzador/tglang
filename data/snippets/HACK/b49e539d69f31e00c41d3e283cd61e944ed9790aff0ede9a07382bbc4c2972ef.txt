## This code snippet solves the Maze of Secrets in HACK programming language

let grid = [
  [1, 0, 0, 0, 0, 0, 0, 1, 1, 1],
  [0, 1, 0, 1, 0, 1, 1, 1, 0, 0],
  [0, 0, 1, 0, 0, 0, 1, 1, 1, 0],
  [1, 1, 1, 0, 1, 1, 1, 1, 1, 0],
  [0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
  [1, 1, 1, 0, 1, 0, 1, 0, 0, 0],
  [0, 0, 0, 1, 1, 0, 0, 0, 1, 1],
  [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
  [0, 0, 0, 1, 1, 0, 1, 0, 0, 0],
  [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]
]

let visited = new Set(); // stores visited nodes

const solveMaze = (row, col, currentPath) => {
  // base cases
  if (!grid[row] || !grid[row][col]) return false; // if out of bounds or obstacle
  if (visited.has(`${row}-${col}`)) return false; // if already visited

  // update current path
  currentPath.push([row, col]); // add current node to path
  visited.add(`${row}-${col}`); // mark current node as visited

  // check for solution
  if (row === 9 && col === 9) {
    return currentPath; // return current path if solution is found
  }

  // try moving to different directions
  let newPath = solveMaze(row - 1, col, [...currentPath]); // move up
  if (!newPath) {
    newPath = solveMaze(row, col + 1, [...currentPath]); // move right
  }
  if (!newPath) {
    newPath = solveMaze(row + 1, col, [...currentPath]); // move down
  }
  if (!newPath) {
    newPath = solveMaze(row, col - 1, [...currentPath]); // move left
  }

  return newPath; // return the final path
}

const solution = solveMaze(0,0, []); // solve the maze starting from top left
console.log(solution); // print the final path to the console