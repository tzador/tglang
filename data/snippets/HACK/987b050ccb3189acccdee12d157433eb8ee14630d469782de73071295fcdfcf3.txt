***BANK ACCOUNT CIPHER***

// This program creates a cipher to encode and decode bank account numbers

// Import the necessary libraries
import java.util.*;
import java.io.*;

// Define the Cipher class
public class Cipher {
    
    // Store the alphabet in an array
    private static final String ALPHABET = "abcdefghijklmnopqrstuvwxyz";
    
    // Method to convert a character to its corresponding index in the alphabet
    private static int getLetterIndex(char letter) {
        return ALPHABET.indexOf(Character.toLowerCase(letter));
    }
    
    // Method to convert an index to its corresponding character in the alphabet
    private static char getLetter(int index) {
        return ALPHABET.charAt(index);
    }
    
    // Method to generate a random permutation of the alphabet
    private static String generateRandomKey() {
        // Convert the alphabet to a list
        List<Character> letters = new ArrayList<Character>();
        for (char letter : ALPHABET.toCharArray()) {
            letters.add(letter);
        }
        
        // Shuffle the list
        Collections.shuffle(letters);
        
        // Convert the shuffled list back to a string
        StringBuilder keyBuilder = new StringBuilder();
        for (Character letter : letters) {
            keyBuilder.append(letter);
        }
        
        return keyBuilder.toString();
    }
    
    // Method to apply the cipher to a given message and key
    public static String applyCipher(String message, String key, boolean encrypt) {
        // Convert the message and key to char arrays
        char[] messageArray = message.toCharArray();
        char[] keyArray = key.toCharArray();
        
        // Create a StringBuilder to store the ciphered message
        StringBuilder ciphered = new StringBuilder();
        
        // Loop through each character in the message
        for (int i = 0; i < messageArray.length; i++) {
            // Get the index of the current letter in the alphabet
            int index = getLetterIndex(messageArray[i]);
            
            // If the current character is a letter, apply the cipher
            if (index >= 0) {
                // Get the corresponding index in the key
                int keyIndex = getLetterIndex(keyArray[i % keyArray.length]);
                
                // Calculate the new index based on encryption or decryption
                if (encrypt) {
                    index = (index + keyIndex) % 26;
                } else {
                    index = (index - keyIndex + 26) % 26;
                }
                
                // Get the new ciphered letter and append it to the StringBuilder
                char cipheredLetter = getLetter(index);
                ciphered.append(cipheredLetter);
            } else {
                // If the current character is not a letter, just add it to the StringBuilder
                ciphered.append(messageArray[i]);
            }
        }
        
        // Return the final ciphered message
        return ciphered.toString();
    }
    
    // Main method to test the cipher
    public static void main(String[] args) {
        // Generate a random key
        String key = generateRandomKey();
        System.out.println("Generated key: " + key);
        
        // Get input from user
        Scanner input = new Scanner(System.in);
        System.out.print("Enter bank account number: ");
        String accountNumber = input.nextLine();
        
        // Encrypt the account number with the generated key
        String encryptedNumber = applyCipher(accountNumber, key, true);
        System.out.println("Encrypted account number: " + encryptedNumber);
        
        // Decrypt the encrypted account number with the generated key
        String decryptedNumber = applyCipher(encryptedNumber, key, false);
        System.out.println("Decrypted account number: " + decryptedNumber);
    }
}