## This is a code snippet in the HACK programming language ##
#### This is a multi-line comment in HACK ####
#####
HACK is a machine language that takes in binary input and produces binary output.
## This is a subroutine that checks if a binary string contains equal numbers of 1s and 0s ##
check_bits:
    ## Sets initial values for counts of 1s and 0s ##
    move #0, %r1  ## %r1 will store number of 1s %%
    move #0, %r2  ## %r2 will store number of 0s %% 
    
    ## Loops through each bit and increments count based on its value ##
    for %r3 = 0 to input_length - 1:
        ## Gets the current bit and stores it in %r4 ##
        get_bit %r3, input_string, %r4
        
        ## Compares %r4 to 1 and increments %r1 if true, otherwise increments %r2 ##
        jz %r4, 1, %r1
        jz %r4, 0, %r2
    
    ## Checks if the counts of 1s and 0s are equal ##
    cmp %r1, %r2
    jne not_equal  ## Jumps to not_equal subroutine if counts are not equal
    
    ## Returns 1 (true) if counts are equal, 0 (false) otherwise ##
    move #1, %r0
    ret
    
not_equal:
    ## Returns 0 (false) if counts are not equal ##
    move #0, %r0
    ret
#####
To use this subroutine, simply input the string to be checked and the length of the string as parameters, and store the output in a register or variable.
Example usage:
move input_string, %r5  ## Stores the binary string in %r5
move input_length, %r6  ## Stores the length of the string in %r6
call check_bits  ## Calls the subroutine
move %r0, output  ## Stores the output in the "output" variable, which will be 1 or 0 depending on if the string has equal 1s and 0s.