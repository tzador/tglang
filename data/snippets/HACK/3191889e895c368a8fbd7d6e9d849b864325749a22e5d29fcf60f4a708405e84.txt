# Declares a function named "factorial" which takes an integer n as input
DEF factorial(n):
  # If n is less than or equal to 1, return 1
  IF n <= 1:
    RETURN 1
  # Otherwise, recursively call "factorial" function on n-1 and multiply it by n
  ELSE:
    RETURN factorial(n-1) * n

# Declares a function named "fibonacci" which takes an integer n as input
DEF fibonacci(n):
  # If n is less than or equal to 1, return n
  IF n <= 1:
    RETURN n
  # Otherwise, recursively call "fibonacci" function on n-1 and n-2 and add the results
  ELSE:
    RETURN fibonacci(n-1) + fibonacci(n-2)

# Declares an array named "numbers" with a list of integers
SET numbers = [1, 5, 9, 13, 17, 21]

# Initializes an empty array named "factorial_numbers"
SET factorial_numbers = []

# Loops through each number in the array "numbers"
FOR number IN numbers:
  # Calls "factorial" function on the number and adds the result to "factorial_numbers"
  SET result = factorial(number)
  PUSH factorial_numbers, result

# Prints out the contents of "factorial_numbers"
PRINT factorial_numbers

# Initializes an empty array named "fibonacci_numbers"
SET fibonacci_numbers = []

# Loops through each number in the array "numbers"
FOR number IN numbers:
  # Calls "fibonacci" function on the number and adds the result to "fibonacci_numbers"
  SET result = fibonacci(number)
  PUSH fibonacci_numbers, result

# Prints out the contents of "fibonacci_numbers"
PRINT fibonacci_numbers