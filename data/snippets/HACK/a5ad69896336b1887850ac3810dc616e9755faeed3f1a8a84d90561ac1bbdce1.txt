// The following is a complex sorting algorithm in HACK
// It uses a modified version of quicksort with additional 
// optimizations and checks for edge cases

// Function to swap two elements in an array
swap: 
    (a,b) => 
        [b,a] = [a,b]

// Function to find the pivot point in an array
partition:
    (arr, low, high) =>
        pivot = arr[high]
        i = low
        index = low
        while i < high:
            if arr[i] < pivot:
                swap(arr[i], arr[index])
                index++
            i++
        swap(arr[index], arr[high])
        return index

// Function to recursively sort the array using quicksort
quickSort:
    (arr, low, high) =>
        if low < high:
            pivot = partition(arr, low, high)
            quickSort(arr, low, pivot - 1)
            quickSort(arr, pivot + 1, high)

// Function to check if array is already sorted
isSorted:
    (arr) =>
        i = 1
        while i < arr.length:
            if arr[i - 1] > arr[i]:
                return false
            i++
        return true

// Function to check for edge cases and optimize sorting
optimizedSort:
    (arr) =>
        size = arr.length
        if size < 2:
            return arr
        else if isSorted(arr):
            return arr
        else:
            quickSort(arr, 0, size - 1)
            return arr

// Example usage:
array = [5, 2, 7, 1, 10]
optimizedSort(array) // returns [1, 2, 5, 7, 10]