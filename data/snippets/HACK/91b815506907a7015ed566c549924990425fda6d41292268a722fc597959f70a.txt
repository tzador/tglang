<start> -> <stmt_list> | <func_def_list> | <class_def_list> | <import_list>

<stmt_list> -> <stmt> | <stmt>; <stmt_list>

<stmt> -> <var_decl> | <func_call> | <assign_stmt> | <return_stmt> | <loop_stmt> | <cond_stmt> | <print_stmt>

<var_decl> -> <type> <var_list>

<func_call> -> <func_name> (<func_args>)

<assign_stmt> -> <var_name> = <expr>

<return_stmt> -> return <expr>

<loop_stmt> -> for (<init_expr>; <cond_expr>; <update_expr>) { <stmt_list> }

<cond_stmt> -> if (<cond_expr>) { <stmt_list> } [else if (<cond_expr>) { <stmt_list> }]+ [else { <stmt_list> }]

<print_stmt> -> print <print_list>

<print_list> -> <print_item> | <print_item>, <print_list>

<print_item> -> <str_expr> | <expr>

<func_def_list> -> <func_def> | <func_def> <func_def_list>

<func_def> -> <func_name> (<param_list>) { <stmt_list> }

<class_def_list> -> <class_def> | <class_def> <class_def_list>

<class_def> -> class <class_name> { <var_decl_list> <func_def_list> }

<import_list> -> <import> | <import> <import_list>

<import> -> import <module_name>

<type> -> int | float | bool | string | list

<var_name> -> [a-zA-Z]+[_0-9a-zA-Z]*

<var_list> -> <var_name> | <var_name>, <var_list>

<func_name> -> [a-zA-Z]+[_0-9a-zA-Z]*

<param_list> -> <param> | <param>, <param_list>

<param> -> <type> <var_name>

<class_name> -> [A-Z]+[_0-9a-zA-Z]*

<var_decl_list> -> <var_decl> | <var_decl> <var_decl_list>

<str_expr> -> "[^"]*"

<func_args> -> <func_arg_item> | <func_arg_item>, <func_args>

<func_arg_item> -> <str_expr> | <expr>

<expr> -> <var_name> | <literal> | <unary_expr> | <binary_expr> | ( <expr> )

<literal> -> <int_literal> | <float_literal> | <bool_literal> | <str_literal> | <list_literal>

<int_literal> -> [1-9][0-9]*

<float_literal> -> [0-9]+\.[0-9]+

<bool_literal> -> true | false

<str_literal> -> '.*'

<list_literal> -> [ <list_literal_items> ]

<list_literal_items> -> <literal> | <literal>, <list_literal_items>

<unary_expr> -> ! <expr> | - <expr>

<binary_expr> -> <expr> <binary_op> <expr>

<binary_op> -> + | - | * | / | % | && | || | == | != | > | < | >= | <=

<init_expr> -> <expr>

<cond_expr> -> <expr>

<update_expr> -> <expr>