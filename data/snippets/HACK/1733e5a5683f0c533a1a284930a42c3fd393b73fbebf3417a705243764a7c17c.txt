/* This code snippet generates a rock-paper-scissors game using an object-oriented approach. */

class Player {
  constructor(name) {                    // create Player class
    this.name = name;                     // and assign name property
  }
  
  generateMove() {                        // create method to generate move
    const moves = ['rock', 'paper', 'scissors'];  // array of move options
    const randomNum = Math.floor(Math.random() * 3);  // generate random number from 0-2
    return moves[randomNum];                      // return move from array at index of random number
  }
}

class Game {
  constructor(player1, player2) {           // create Game class with two player arguments
    this.player1 = player1;                  // and assign player1 property
    this.player2 = player2;                  // and assign player2 property
    this.player1score = 0;                   // initial player1 score of 0
    this.player2score = 0;                   // initial player2 score of 0
  }
  
  playRound() {                             // create method for playing a round
    const p1move = this.player1.generateMove();   // generate player1 move using generateMove method
    const p2move = this.player2.generateMove();   // generate player2 move using generateMove method
    
    if (p1move === 'rock' && p2move === 'scissors') {   // check for rock and scissors combination
      this.player1score += 1;                         // award point to player1
      console.log(`${this.player1.name} wins!`);     // output winner
    } else if (p1move === 'scissors' && p2move === 'paper') {   // check for scissors and paper combination
      this.player1score += 1;                         // award point to player1
      console.log(`${this.player1.name} wins!`);     // output winner
    } else if (p1move === 'paper' && p2move === 'rock') {   // check for paper and rock combination
      this.player1score += 1;                         // award point to player1
      console.log(`${this.player1.name} wins!`);     // output winner
    } else if (p1move === p2move) {   // check for tie
      console.log("It's a tie!");     // output tie
    } else {                          // all other combinations result in player2 winning
      this.player2score += 1;         // award point to player2
      console.log(`${this.player2.name} wins!`);   // output winner
    }
  }
}

// create two player instances with names
const player1 = new Player("Bob");
const player2 = new Player("Sally");

// create game instance with player instances
const game = new Game(player1, player2);

// play 5 rounds
game.playRound();
game.playRound();
game.playRound();
game.playRound();
game.playRound();

// output final scores
console.log(`${player1.name} score: ${game.player1score}`);
console.log(`${player2.name} score: ${game.player2score}`);