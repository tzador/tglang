# Generate a random key
key = random.randint(1000,9999)

# Take user input for password
password = input("Enter your password: ")

# Store password in a dictionary with key as the encrypted password
password_dict = {encrypt(password, key): password}

# Function to encrypt password
def encrypt(password, key):
    encrypted = ""
    for char in password:
        encrypted += chr(ord(char) + key)  # Shifts each character in password by key number of positions in ASCII table
    return encrypted

# Function to decrypt password
def decrypt(encrypted, key):
    decrypted = ""
    for char in encrypted:
        decrypted += chr(ord(char) - key)  # Reverts the encryption by shifting each character back
    return decrypted

# Take user input for password to be checked
check_password = input("Enter your password to check if it's correct: ")

# Encrypt the user inputted password to compare with stored encrypted password
encrypted_check = encrypt(check_password, key)

# Check if the encrypted_check matches the key in the dictionary
if encrypted_check == list(password_dict.keys())[0]:
  print("Password is correct!")
else:
  print("Password is incorrect.") # Indicate wrong password if encrypted_check doesn't match

# Function to generate a random salt
def generate_salt():
    salt = ""
    for i in range(10):
        salt += chr(random.randint(33, 126)) # Generates 10 random characters in ASCII table
    return salt

# Store salt in dictionary with key as encrypted salt
salt_dict = {encrypt(generate_salt(), key): generate_salt()}

# Take user input for password to be salted and hashed
salted_password = input("Enter password to be salted and hashed: ")

# Generate a random salt and append it to the password before hashing
salt = generate_salt()
salted_password += salt

# Function to hash password using MD5
def hash_password(password):
    hash_object = hashlib.md5(password.encode())  # Encodes string to bytes and hashes using MD5
    return hash_object.hexdigest()  # Returns hexadecimal digest of hashed password

# Compare salted and hashed password with stored salt and hashed password
if hash_password(salted_password) == hash_password(salted_password + list(salt_dict.values())[0]):
    print("Password matched!")
else:
    print("Password mismatch.")  # Indicate mismatch if hashed passwords don't match