<?hh // Preprocessor directive indicating Hack code

namespace App;

class Calculator {
  protected int $num1; // Declaring a property $num1

  protected int $num2; // Declaring a property $num2

  public function __construct(int $num1, int $num2) {
    $this->num1 = $num1; // Assigning value to property $num1
    $this->num2 = $num2; // Assigning value to property $num2
  }

  public function add(int $num): int {
    // Hint annotation indicating that $num parameter should be an integer
    // Return type annotation indicating that the add method will return an integer
    return $this->num1 + $this->num2 + $num;
  }

  public function subtract(): int {
    // Type checking using is_int function to ensure both properties are integers
    if (is_int($this->num1) && is_int($this->num2)) {
      return $this->num1 - $this->num2;
    }
    // Throw an exception if properties are not integers
    throw \Exception("Can't perform subtraction. Both operands must be integers.");
  }
}

// Creating instance of Calculator class with values 5 and 10
$calc = new App\Calculator(5, 10);

// Calling add method and passing argument
$result = $calc->add(20); // $result will equal 35

// Calling subtract method
$subtraction = $calc->subtract(); // $subtraction will equal -5