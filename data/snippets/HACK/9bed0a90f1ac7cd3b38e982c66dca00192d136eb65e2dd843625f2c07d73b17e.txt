/**
 * This is a function that utilizes a recursive approach to calculate
 * the nth Fibonacci number.
 * @param {number} n - The index of the desired Fibonacci number
 * @return {number} - The nth Fibonacci number
**/
function fibonacci(n) {
  // Base cases
  if (n <= 1) return n;

  // Recursive calls
  return fibonacci(n-1) + fibonacci(n-2);
}

/**
 * This is a class that represents a person, with their name and age
 * being stored as properties.
**/
class Person {
  name;
  age;

  /**
   * This is a constructor function that creates a new Person object.
   * @param {string} name - The person's name
   * @param {number} age - The person's age
  **/
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  /**
   * This is a method that prints out the person's name and age.
   * @return {string} - A formatted string displaying the person's name and age
  **/
  printInfo() {
    return `${this.name} is ${this.age} years old.`;
  }
}

// Main function
function main() {
  let n = 10; // Setting the value of n
  let result = fibonacci(n); // Calling the fibonacci function
  let person = new Person("John", 30); // Creating a new person object
  let info = person.printInfo(); // Calling the printInfo method
  console.log(`The ${n}th Fibonacci number is ${result}. ${info}`);
}

// Calling the main function
main();