/*-------------------------**
| Crypto Analysis Function |
**-------------------------*/

// This function takes in an encrypted message as a string and returns the most likely key used for encryption
function cryptoAnalysis(message) {
  let key = "";

  // Convert the message into an array of characters
  let encryptedMessage = message.split("");

  // Create an array to store the frequency of each character in the encrypted message
  let frequencyArray = [];

  // Loop through the encrypted message to count the frequency of each character
  for (let i = 0; i < encryptedMessage.length; i++) {
    // Initialize the frequency of the character to 0
    let frequency = 0;

    // Check if the character is already counted in the frequency array
    if (!frequencyArray.includes(encryptedMessage[i])) {
      // Loop through the encrypted message again to count the frequency of the character
      for (let j = i; j < encryptedMessage.length; j++) {
        if (encryptedMessage[i] === encryptedMessage[j]) {
          // Increase the frequency by 1 if the character is found in the message
          frequency++;
        }
      }

      // Add the character and its frequency to the frequency array
      frequencyArray.push({ character: encryptedMessage[i], frequency: frequency });
    }
  }

  // Sort the frequency array in descending order based on the frequency of each character
  frequencyArray.sort((a, b) => b.frequency - a.frequency);

  // The first element of the sorted array would be the most frequent character in the encrypted message
  // Assuming this character represents the letter 'e' in the original message (most common letter in English)
  // We can calculate the key by finding the difference between the ASCII values of 'e' and the most frequent character
  let mostFrequentChar = frequencyArray[0].character;
  let keyAsInt = mostFrequentChar.charCodeAt() - 101;

  // Convert the key back to a string and add it to the key variable
  key += String.fromCharCode(keyAsInt);

  // Now we can decrypt the message using the key
  let decryptedMessage = "";

  // Loop through the encrypted message to decrypt it using the key
  for (let i = 0; i < encryptedMessage.length; i++) {
    // Convert the character to its ASCII value
    let charAsInt = encryptedMessage[i].charCodeAt();

    // Subtract the key value from the ASCII value of the character
    let decryptedCharAsInt = charAsInt - keyAsInt;

    // Ensure that the decrypted character is within the range of ASCII values for letters (between 65 and 122)
    while (decryptedCharAsInt < 65 || decryptedCharAsInt > 122) {
      // If the character falls below 65, add 26 to bring it back into the range
      // If the character goes above 122, subtract 26 to bring it back into the range
      if (decryptedCharAsInt < 65) {
        decryptedCharAsInt += 26;
      } else {
        decryptedCharAsInt -= 26;
      }
    }

    // Convert the decrypted character back to a string and add it to the decrypted message
    decryptedMessage += String.fromCharCode(decryptedCharAsInt);
  }

  // Print the decrypted message along with the key used for encryption
  console.log(`Decrypted message: ${decryptedMessage}`);
  console.log(`Key: ${key}`);
}