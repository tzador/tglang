function recursiveFunction(array) { // A recursive function that takes in an array as parameter
    if (array.length <= 1) { // Checks if the array only has one element
        return array; // Returns the array
    }
    else {
        let result = []; // Creates an empty array to store the sorted elements
        let pivot = array.pop(); // Removes the last element of the array and assigns it as the pivot
        let less = []; // Creates an empty array to store elements less than the pivot
        let greater = []; // Creates an empty array to store elements greater than the pivot
        for (let i = 0; i < array.length; i++) { // Loop through the array
            if (array[i] <= pivot) { // If the current element is less than or equal to the pivot
                less.push(array[i]); // Push the element into the 'less' array
            }
            else { // If the current element is greater than the pivot
                greater.push(array[i]); // Push the element into the 'greater' array
            }
        }
        return recursiveFunction(less).concat(pivot, recursiveFunction(greater)); // Calls the function recursively on the 'less' and 'greater' arrays and concatenates them with the pivot
    }
}

let myArray = [5, 2, 8, 1, 3, 9, 4]; // Array to be sorted
let sortedArray = recursiveFunction(myArray); // Calls the recursive function on the array
console.log(sortedArray); // Prints the sorted array to the console