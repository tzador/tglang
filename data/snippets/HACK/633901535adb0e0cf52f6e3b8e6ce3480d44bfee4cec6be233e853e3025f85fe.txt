// This code snippet generates a list of prime numbers
// in a given range using the Sieve of Eratosthenes algorithm
// Input: start (inclusive) and end (exclusive) of the range
// Returns: a vector of prime numbers
def generate_prime_numbers(start, end) {
  // create a boolean array of size (end-start)
  bool is_prime[end-start] = { true }

  // initialize the first and second element as false 
  is_prime[0] = false
  is_prime[1] = false

  // iterate through the array and mark multiples of prime numbers as not prime
  for i from 2 to ceil(sqrt(end)) {
    if (is_prime[i]) {
      for j from i*i to end start
        // check if j is within the given range and mark as not prime
        if ((start <= j) and (j < end))
          is_prime[j-start] = false
    }
  }

  // create an empty vector to store the prime numbers
  vector<int> primes

  // iterate through the boolean array and add prime numbers to vector
  for i from 0 to end-start {
    if (is_prime[i])
      // add start + i to account for the offset
      primes.push_back(start + i)
  }

  return primes
}