/*
    This is a complex code snippet in HACK, a programming language specifically designed for hackers.
    It includes various encryption and decryption techniques to secure data and bypass security.
*/

// Import necessary libraries and modules
include <stdio>
include <stdlib>
include <math>

// Function to encrypt data using Caesar cipher
function encrypt_caesar(string, key) {
    encrypted_data = ""
    for (i = 0; i < strlen(string); i++) {
        char = string[i]

        // Shift each character based on the key
        // by adding the ASCII value of the key to the ASCII value of the character
        // Modulus operator is used to prevent characters from going beyond the ASCII range
        encrypted_char = char + (key % 128)

        // Append the encrypted character to the encrypted data
        encrypted_data += encrypted_char
    }

    // Return the encrypted data
    return encrypted_data
}

// Function to decrypt data using Caesar cipher
function decrypt_caesar(string, key) {
    decrypted_data = ""
    for (i = 0; i < strlen(string); i++) {
        char = string[i]

        // Shift each character based on the key
        // by subtracting the ASCII value of the key from the ASCII value of the character
        // Modulus operator is used to prevent characters from going beyond the ASCII range
        decrypted_char = char - (key % 128)

        // Append the decrypted character to the decrypted data
        decrypted_data += decrypted_char
    }

    // Return the decrypted data
    return decrypted_data
}

// Function to generate a random key for encryption
function generate_key() {
    // Generate a random number between 1 and 255
    key = random(1, 255)

    // Return the key
    return key
}

// Function to encode data using Base64 encoding technique
function encode_base64(string) {
    base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

    encoded_data = ""

    // Convert each character in the string to its binary representation
    for (i = 0; i < strlen(string); i++) {
        char = string[i]
        binary = int_to_binary(char)

        // Pad the binary representation with zeros to make it a multiple of 6 bits
        while (strlen(binary) % 6 != 0) {
            binary = "0" + binary
        }

        // Group the binary representation into 6-bit chunks
        for (j = 0; j < strlen(binary); j+=6) {
            chunk = binary[j:j+6]

            // Convert the 6-bit chunk to its decimal equivalent
            decimal = binary_to_int(chunk)

            // Use the decimal value as an index to retrieve the corresponding base64 character
            encoded_char = base64_chars[decimal]

            // Append the encoded character to the encoded data
            encoded_data += encoded_char
        }
    }

    // Pad the encoded data with = symbols to make it divisible by 4 characters
    while (strlen(encoded_data) % 4 != 0) {
        encoded_data += "="
    }

    // Return the encoded data
    return encoded_data
}

// Function to decode data using Base64 encoding technique
function decode_base64(string) {
    base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

    decoded_data = ""

    // Convert each character in the string to its base64 decimal equivalent
    for (i = 0; i < strlen(string); i++) {
        char = string[i]

        // Use the base64 character as an index to retrieve its decimal representation
        decimal = base64_chars.index(char)

        // Convert the decimal value to its binary representation
        binary = int_to_binary(decimal)

        // Pad the binary representation with zeros to make it a multiple of 8 bits
        while (strlen(binary) % 8 != 0) {
            binary = "0" + binary
        }

        // Append the binary representation to the decoded data
        decoded_data += binary
    }

    // Convert the decoded data from binary to ASCII characters
    // by grouping each 8 bits and converting them to their decimal representations
    for (j = 0; j < strlen(decoded_data); j+=8) {
        byte = decoded_data[j:j+8]
        decimal = binary_to_int(byte)

        // Convert the decimal value to its ASCII character
        char = int_to_char(decimal)

        // Append the ASCII character to the decoded data
        decoded_data += char
    }

    // Return the decoded data
    return decoded_data
}


// Main function
function main() {
    // Get input data from user and store it in a variable
    data = input("Enter data to be encrypted: ")

    // Generate a random key
    key = generate_key()

    // Encrypt the data using the Caesar cipher with the generated key
    encrypted_data = encrypt_caesar(data, key)

    // Encode the encrypted data using Base64 encoding technique
    encoded_data = encode_base64(encrypted_data)

    // Print the encrypted and encoded data
    print("Encrypted and encoded data: " + encoded_data)

    // Decode the encoded data using Base64 encoding technique
    decoded_data = decode_base64(encoded_data)

    // Decrypt the decoded data using the Caesar cipher with the generated key
    decrypted_data = decrypt_caesar(decoded_data, key)

    // Print the decrypted data
    print("Decrypted data: " + decrypted_data)
}

// Call the main function to execute the code
main()