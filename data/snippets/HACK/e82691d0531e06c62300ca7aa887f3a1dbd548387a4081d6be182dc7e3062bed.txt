// This function generates a binary tree with random values
void generateRandomBinaryTree() {
    int numberOfNodes = getRandomNumber(); // get a random number of nodes for the tree
    Node rootNode = new Node(getRandomNumber()); // create a root node with a random value

    // loop through all the nodes to be created
    for(int i = 0; i < numberOfNodes; i++) {
        Node currentNode = rootNode; // start from the root node
        int nodeValue = getRandomNumber(); // get a random value for the node
        boolean placed = false; // flag to check if the node has been placed in the tree

        // keep traversing until a spot is found for the new node
        while(!placed) {
            // generate a random number to determine the direction to place the node
            int direction = getRandomNumber();

            // if the direction is 0, place the node to the left
            if(direction == 0) {
                // check if the left child of the current node is empty
                if(currentNode.left == null) {
                    // if empty, place the new node here and set placed flag to true
                    currentNode.left = new Node(nodeValue);
                    placed = true;
                } else {
                    // if not empty, set the current node to its left child for next iteration
                    currentNode = currentNode.left;
                }
            } else { // if the direction is 1, place the node to the right
                // check if the right child of the current node is empty
                if(currentNode.right == null) {
                    // if empty, place the new node here and set placed flag to true
                    currentNode.right = new Node(nodeValue);
                    placed = true;
                } else {
                    // if not empty, set the current node to its right child for next iteration
                    currentNode = currentNode.right;
                }
            }
        }
    }

    // output the generated binary tree
    printBinaryTree(rootNode);
}

// This function prints a binary tree in level order
void printBinaryTree(Node rootNode) {
    Queue<Node> queue = new Queue<>(); // use a queue to perform level order traversal
    queue.enqueue(rootNode); // enqueue the root node as the starting point

    // loop until all nodes have been printed
    while(!queue.isEmpty()) {
        // dequeue the first node in the queue
        Node currentNode = queue.dequeue();

        // print the value of the current node
        print(currentNode.value);

        // enqueue the left child of the current node if it exists
        if(currentNode.left != null) {
            queue.enqueue(currentNode.left);
        }

        // enqueue the right child of the current node if it exists
        if(currentNode.right != null) {
            queue.enqueue(currentNode.right);
        }
    }
}

// This class represents a node in a binary tree
class Node {
    int value;
    Node left;
    Node right;

    // constructor to create a node with a given value
    Node(int value) {
        this.value = value;
        left = null;
        right = null;
    }
}

// This function generates a random number
int getRandomNumber() {
    return (int)(Math.random() * 100);
}