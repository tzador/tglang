/**
 * This function takes in a string and reverses its contents
 * @param {string} str - The string to be reversed
 * @returns {string} - The reversed string
 */
function reverseString(str) {
    let result = ""; // create an empty string to store the result
    for (let i = str.length - 1; i >= 0; i--) { // loop through the string in reverse order
        result += str[i]; // add each character to the result string
    }
    return result; // return the reversed string
}

/**
 * This function checks whether a given number is prime
 * @param {number} num - The number to be checked
 * @returns {boolean} - Returns true if the number is prime, false if it is not
 */
function isPrime(num) {
    if (num < 2) {
        return false; // numbers less than 2 are considered not prime
    }
    for (let i = 2; i < num; i++) { // check if the number is divisible by any number between 2 and itself
        if (num % i === 0) {
            return false; // if it is divisible, then it is not prime
        }
    }
    return true; // if the number is not divisible by any number between 2 and itself, then it is prime
}

/**
 * This function generates the Nth Fibonacci number
 * @param {number} n - The position of the Fibonacci number to be generated
 * @returns {number} - The Nth Fibonacci number
 */
function fibonacci(n) {
    let a = 0;
    let b = 1;
    for (let i = 2; i <= n; i++) {
        let c = a + b; // calculate the next number in the sequence
        a = b; // update the first number
        b = c; // update the second number
    }
    return b; // return the Nth Fibonacci number
}

/**
 * This function sorts an array of numbers in ascending order using bubble sort algorithm
 * @param {array} arr - The array of numbers to be sorted
 * @returns {array} - The sorted array
 */
function bubbleSort(arr) {
    let len = arr.length;
    for (let i = 0; i < len - 1; i++) {
        for (let j = 0; j < len - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) { // if the current number is greater than the next number
                let temp = arr[j]; // swap the two numbers
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr; // return the sorted array
}

/**
 * This function finds the factorial of a given number
 * @param {number} n - The number for which factorial is to be calculated
 * @returns {number} - The factorial of the given number
 */
function factorial(n) {
    if (n === 0 || n === 1) {
        return 1; // factorial of 0 and 1 is 1
    } else {
        return n * factorial(n - 1); // recursively call the function to calculate factorial
    }
}

/**
 * This function converts a number from binary to decimal
 * @param {string} str - The binary number to be converted
 * @returns {number} - The decimal equivalent of the binary number
 */
function binaryToDecimal(str) {
    let len = str.length;
    let result = 0;
    for (let i = len - 1; i >= 0; i--) {
        if (str[i] === "1") { // to convert from binary to decimal, we just need to multiply each digit with its corresponding power of 2
            result += 2 ** (len - 1 - i);
        }
    }
    return result; // return the decimal equivalent
}

/**
 * This function checks whether a given string is a palindrome
 * @param {string} str - The string to be checked
 * @returns {boolean} - Returns true if the string is a palindrome, false if it is not
 */
function isPalindrome(str) {
    let len = str.length;
    for (let i = 0; i < len / 2; i++) { // loop through the string until the middle
        if (str[i] !== str[len - 1 - i]) { // if the character at the current index is not equal to the character at the opposite index, it is not a palindrome
            return false;
        }
    }
    return true; // if the loop completes, then the string is a palindrome
}

/**
 * This function converts a string to camel case
 * @param {string} str - The string to be converted
 * @returns {string} - The camel cased string
 */
function toCamelCase(str) {
    let result = ""; // create an empty string to store the result
    let capitalize = false; // variable used to indicate whether the next character should be capitalized
    for (let i = 0; i < str.length; i++) {
        if (str[i] === "_" || str[i] === "-") { // if the current character is an underscore or hyphen
            capitalize = true; // set the variable to true to capitalize the next character
        } else {
            if (capitalize) { // if capitalize is true
                result += str[i].toUpperCase(); // capitalize the character and add it to the result string
                capitalize = false; // reset the variable to false
            } else {
                result += str[i]; // otherwise, just add the character to the result string
            }
        }
    }
    return result; // return the camel cased string
}

/**
 * This function removes repeated elements from an array
 * @param {array} arr - The array from which repeated elements should be removed
 * @returns {array} - The array with repeated elements removed
 */
function removeDuplicates(arr) {
    let result = []; // create an empty array to store the result
    for (let i = 0; i < arr.length; i++) {
        if (!result.includes(arr[i])) { // only add the element to the result array if it does not already exist in the array
            result.push(arr[i]);
        }
    }
    return result; // return the array with duplicates removed
}

/**
 * This function checks whether a given string is an anagram
 * @param {string} str1 - The first string to be checked
 * @param {string} str2 - The second string to be checked
 * @returns {boolean} - Returns true if the strings are anagrams, false if they are not
 */
function isAnagram(str1, str2) {
    if (str1.length !== str2.length) { // if the strings have different lengths, they cannot be anagrams
        return false;
    }
    let map1 = buildCharMap(str1); // build a character map for the first string
    let map2 = buildCharMap(str2); // build a character map for the second string
    for (let char in map1) { // loop through the characters in the first string's map
        if (map1[char] !== map2[char]) { // if the character appears a different number of times in the two strings, they are not anagrams
            return false;
        }
    }
    return true; // if the loop completes, the strings are anagrams
}

/**
 * This function removes all white space characters from a string
 * @param {string} str - The string from which white space characters should be removed
 * @returns {string} - The string with white space characters removed
 */
function removeWhiteSpace(str) {
    let result = "";
    for (let i = 0; i < str.length; i++) {
        if (str[i] !== " " && str[i] !== "\t" && str[i] !== "\n" && str[i] !== "\r") { // only add the character if it is not a white space character
            result += str[i];
        }
    }
    return result; // return the string with all whitespace characters removed
}

/**
 * This function builds a character map for a given string
 * @param {string} str - The string to build the character map from
 * @returns {object} - The character map with characters as keys and their occurrences as values
 */
function buildCharMap(str) {
    let charMap = {}; // create an empty object to store the character map
    for (let char of str) { // loop through the characters in the string
        if (charMap[char]) { // if the character already appears in the map
            charMap[char]++; // increment its occurrence count
        } else {
            charMap[char] = 1; // otherwise, add it to the map with an initial count of 1
        }
    }
    return charMap; // return the character map
}

/**
 * This function calculates the area of a rectangle
 * @param {number} length - The length of the rectangle
 * @param {number} width - The width of the rectangle
 * @returns {number} - The area of the rectangle
 */
function rectangleArea(length, width) {
    return length * width; // return the area of the rectangle
}

/**
 * This function generates a random color code
 * @returns {string} - The generated color code
 */
function randomColor() {
    let color = "#";
    for (let i = 0; i < 6; i++) { // generate 6 random hexadecimal characters
        let rand = Math.floor(Math.random() * 16); // generate a random number between 0 and 15
        color += rand.toString(16); // convert the number to its hexadecimal equivalent and add it to the color code
    }
    return color; // return the generated color code
}

/**
 * This function calculates the average of an array of numbers
 * @param {array} arr - The array of numbers to be averaged
 * @returns {number} - The average of the numbers in the array
 */
function average(arr) {
    let sum = 0;
    for (let i = 0; i < arr.length; i++) {
        sum += arr[i]; // add each number in the array to the sum
    }
    return sum / arr.length; // return the average of the numbers
}

/**
 * This function converts a number to its Roman numeral equivalent
 * @param {number} num - The number to be converted
 * @returns {string} - The Roman numeral equivalent of the number
 */
function toRomanNumeral(num) {
    let romanNumeral = ""; // create an empty string to store the Roman numeral
    const romanSymbols = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]; // array of the Roman numeral symbols in descending order
    const numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]; // array of the corresponding numbers
    for (let i = 0; i < numbers.length; i++) {
        while (num >= numbers[i]) { // repeatedly subtract the largest possible number from the given number
            romanNumeral += romanSymbols[i]; // append the corresponding Roman numeral symbol
            num -= numbers[i]; // update the number
        }
    }
    return romanNumeral; // return the Roman numeral of the given number
}

/**
 * This function checks whether a given string is a valid email address. Valid email addresses should contain an '@' symbol and a top-level domain
 * @param {string} str - The string to be checked
 * @returns {boolean} - Returns true if the string is a valid email address, false if it is not
 */
function isValidEmail(str) {
    if (!str.includes("@")) { // check if the string contains an @ symbol
        return false;
    }
    let arr = str.split("@"); // split the string at @ symbol
    if (arr.length !== 2) { // if there are not exactly two parts, it is not a valid email address
        return false;
    }
    let domain = arr[1].split("."); // split the second part at the period symbol
    if (domain.length !== 2 || domain[0].length === 0 || domain[1].length === 0) { // if there are not two parts or either part is empty, it is not a valid email address
        return false;
    }
    return true; // if the checks pass, it is a valid email address
}

/**
 * This function calculates the sum of all numbers below a given number that are multiples of 3 or 5
 * @param {number} n - The number below which the multiples should be calculated
 * @returns {number} - The sum of all multiples of 3 or 5 below the given number
 */
function multiplesOf3And5(n) {
    let sum = 0;
    for (let i = 1; i < n; i++) {
        if (i % 3 === 0 || i % 5 === 0) { // if the current number is divisible by 3 or 5
            sum += i; // add it to the sum
        }
    }
    return sum; // return the sum of multiples of 3 or 5 below the given number
}

/**
 * This function calculates the largest product of N adjacent numbers in a given array of numbers
 * @param {array} arr - The array of numbers
 * @param {number} n - The number of adjacent numbers used to calculate the product
 * @returns {number} - The largest product of N adjacent numbers in the array
 */
function largestProduct(arr, n) {
    let max = 0; // variable to store the maximum product
    for