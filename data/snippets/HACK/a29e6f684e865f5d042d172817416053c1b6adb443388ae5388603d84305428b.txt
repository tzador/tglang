/*

------------------------------------
Title: Encryption using RSA
Author: John Smith
Date: 9/22/2021
------------------------------------

This code snippet demonstrates how to implement RSA encryption
in the programming language 'HACK'.

*/

// Generate two large prime numbers, p and q
int p = generate_prime()
int q = generate_prime()

// Calculate the modulus, n
int n = p * q

// Calculate phi, the totient of n
int phi = (p - 1) * (q - 1)

/*
Generate the public key, e, such that
- 1 < e < phi
- e and phi are coprime
*/

int e = generate_public_key(phi)

/*
Generate the private key, d, such that
- d â‰¡ e^-1 (mod phi)
- 0 <= d < phi
*/

int d = generate_private_key(e, phi)

// Convert the message into an integer
int message = convert_to_integer("secret message")

// Calculate the ciphertext, c, using the public key
int c = power(message, e) % n

// Decrypt the ciphertext, c, using the private key
int decrypted_message = power(c, d) % n

// Convert the decrypted message back to its original form
string original_message = convert_to_string(decrypted_message)

// Print the decrypted message
print(original_message)

// Function to generate a prime number between 11 and 100
int generate_prime() {
    int prime = 0
    while (prime < 11 || prime > 100 || !is_prime(prime)) {
        prime = generate_random_number()
    }
    return prime
}

// Function to generate a random number between 1 and 100
int generate_random_number() {
    return rand() % 100 + 1
}

// Function to check if a number is prime
bool is_prime(int num) {
    for (int i = 2; i <= num / 2; i++) {
        if (num % i == 0) {
            return false
        }
    }
    return true
}

// Function to generate a random public key
int generate_public_key(int phi) {
    int public_key = 0
    while (public_key < 1 || public_key >= phi || !is_coprime(public_key, phi)) {
        public_key = generate_random_number()
    }
    return public_key
}

// Function to generate a random private key
int generate_private_key(int public_key, int phi) {
    int private_key = mod_inverse(public_key, phi)
    return private_key
}

// Function to calculate modular inverse using extended Euclidean algorithm
int mod_inverse(int a, int m) {
    int m0 = m
    int y = 0, x = 1

    if (m == 1) {
        return 0
    }

    while (a > 1) {
        // q is quotient
        int q = a / m
        int t = m

        // m is remainder now, process same as Euclid's algo
        m = a % m, a = t
        t = y

        // Update x and y
        y = x - q * y
        x = t
    }

    // Make x positive
    if (x < 0) {
        x = x + m0
    }

    return x
}

// Function to check if two numbers are coprime
bool is_coprime(int a, int b) {
    return gcd(a, b) == 1
}

// Function to calculate greatest common divisor using Euclidean algorithm
int gcd(int a, int b) {
    if (b == 0) {
        return a
    }
    return gcd(b, a % b)
}

// Function to calculate the power of a number
int power(int base, int exponent) {
    if (exponent == 0) {
        return 1
    }
    int result = base
    for (int i = 1; i < exponent; i++) {
        result = result * base
    }
    return result
}

// Function to convert a string to an integer
int convert_to_integer(string message) {
    int result = 0
    for (int i = 0; i < message.length(); i++) {
        result += message[i] * power(256, i)
    }
    return result
}

// Function to convert an integer to a string
string convert_to_string(int num) {
    string result = ""
    while (num > 0) {
        int ascii = num % 256
        result = char(ascii) + result
        num = num / 256
    }
}