//Declaring a variable with a complex data type
:@var Sheild = {     // '@' symbol indicates object type
    :name "Dragon's Scale", // ':' symbol indicates key-value pair
    :element "Fire",
    :enchants [       // declaring an array for enchanted properties
        {
            :type "Protection",      // first enchanted property
            :level 10
        },
        {
            :type "Flame Resistance", // second enchanted property
            :level 5
        },
        {
            :type "Damage Reflection", // third enchanted property
            :level 7
        }
    ],
    :durability 50
}

// Creating a function to use the item
:@func useShield =! { // '!' symbol indicates function type, '=' symbol indicates assignment
    // Retrieving the name of the shield
    :var name = Sheild.name; // assigning the value of name key from Shield object
    :print "You equip the " + name + "!" // printing a message with the variable value

    // Updating durability of the shield
    :var durability = Sheild.durability; // assigning the value of durability key from Shield object
    :print "Your " + name + "'s durability is " + durability + "." // printing a message with the variable value

    // Checking for enchanted properties
    :var enchants = Sheild.enchants; // assigning the value of enchants key from Shield object
    :for (i = 0; i < enchants.length; i++) { // iterating through the array
        :var type = enchants[i].type; // accessing the type key from the current array element
        :var level = enchants[i].level; // accessing the level key from the current array element
        :print "It has the " + type + " enchantment at level " + level + "." // printing a message with the variable values
    }
}

// Calling the function to use the shield
useShield(); // invoking useShield function to use the shield