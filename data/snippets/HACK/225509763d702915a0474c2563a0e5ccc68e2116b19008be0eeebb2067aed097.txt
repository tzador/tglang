### Genetic Algorithm for Finding Optimal Solution
Input: Binary string
Output: Optimal solution
Population size = 10
Population = Random sequence of binary strings
Fitness function = Number of 1s in binary string

while Population is not empty:
    # Selection
    Parent 1 = Select random binary string from population based on fitness
    Parent 2 = Select random binary string from population based on fitness
    # Crossover
    Child 1 = Parent 1[0:4] + Parent 2[4:]
    Child 2 = Parent 2[0:4] + Parent 1[4:]
    # Mutation
    Randomly select bit in Child 1 and flip it
    Randomly select bit in Child 2 and flip it
    # Fitness Evaluation
    Child 1_fitness = Number of 1s in Child 1
    Child 2_fitness = Number of 1s in Child 2
    # Selection
    if Child 1_fitness > Child 2_fitness:
        Optimal Solution = Child 1
    else:
        Optimal Solution = Child 2

    # Update Population
    Population = Population - least fit binary string
    Population = Population + Optimal Solution

print("Optimal Solution: ", Optimal Solution)