/* This code snippet demonstrates how to encrypt data using the HACK programming language. */
`EncryptData()` {
    _key = "secretKey1234"; //our secret key used for encryption
    _plaintext = "Hello world"; //data to be encrypted
    _ciphertext = ""; //initialized empty string for the encrypted data

    //Encrypt each character in the plaintext using the secret key
    for i in range(0, length(_plaintext)){
        _ciphertext += charToHex(_plaintext[i]) ^ charToHex(_key[i % length(_key)]);
    }

    //Convert the encrypted data to binary and return it
    return stringToBinary(_ciphertext);
}

//Function to convert a character to its hexadecimal representation
`charToHex()` {
    _char = input; //character to be converted
    _hex = ""; //initialized empty string to store the hexadecimal representation

    //Loop through each character in the input string and convert it to its hexadecimal value
    for i in range(0, length(_char)){
        _hex += decimalToHex(asciiToDecimal(_char[i]));
    }

    //Return the final hexadecimal representation
    return _hex;
}

//Function to convert a decimal number to its hexadecimal representation
`decimalToHex()` {
    _decimal = input; //decimal number to be converted
    _hex = ""; //initialized empty string to store the hexadecimal representation

    //Loop through each digit in the decimal number and convert it to its hexadecimal value
    while(_decimal > 0){
        _remainder = _decimal % 16;
        _hex += mapToHex(_remainder);
        _decimal = floor(_decimal / 16);
    }

    //Reverse the hexadecimal representation to get the correct order
    _hex = reverseString(_hex);

    //Return the final hexadecimal representation
    return _hex;
}

//Function to convert an ASCII character to its decimal value
`asciiToDecimal()` {
    _ascii = input; //ASCII character to be converted
    _decimal = 0; //initialize decimal variable to store the converted value

    //Convert the ASCII character to its decimal equivalent using ASCII table
    if(_ascii =~ s/[0-9]+/[0-9]+/){
        _decimal = _ascii - 48;
    } else if(_ascii =~ s/[A-F]+/[A-F]+/){
        _decimal = _ascii - 55;
    } else if(_ascii =~ s/[a-f]+/[a-f]+/){
        _decimal = _ascii - 87;
    }

    //Return the final decimal value
    return _decimal;
}

//Function to map a number to its hexadecimal equivalent
`mapToHex()` {
    _num = input; //number to be mapped
    _hex = ""; //initialized empty string to store the hexadecimal representation

    //Map the input number to its hexadecimal value using a switch statement
    switch(_num){
        case 0:
            _hex = "0";
            break;
        case 1:
            _hex = "1";
            break;
        case 2:
            _hex = "2";
            break;
        case 3:
            _hex = "3";
            break;
        case 4:
            _hex = "4";
            break;
        case 5:
            _hex = "5";
            break;
        case 6:
            _hex = "6";
            break;
        case 7:
            _hex = "7";
            break;
        case 8:
            _hex = "8";
            break;
        case 9:
            _hex = "9";
            break;
        case 10:
            _hex = "A";
            break;
        case 11:
            _hex = "B";
            break;
        case 12:
            _hex = "C";
            break;
        case 13:
            _hex = "D";
            break;
        case 14:
            _hex = "E";
            break;
        case 15:
            _hex = "F";
            break;
    }

    //Return the final hexadecimal value
    return _hex;
}

//Function to convert a string to its binary representation
`stringToBinary()` {
    _str = input; //string to be converted
    _binary = ""; //initialized empty string to store the binary representation

    //Convert each character in the string to its binary value and concatenate them together
    for i in range(0, length(_str)){
        _binary += charToBinary(_str[i]);
    }

    //Return the final binary representation
    return _binary;
}

//Function to convert a character to its binary representation
`charToBinary()` {
    _char = input; //character to be converted
    _binary = ""; //initialized empty string to store the binary representation

    //Convert the character to its ASCII value and then to binary using a loop
    for i in range(7, -1, -1){
        _binary += ((_char >> i) & 1);
    }

    //Return the final binary representation
    return _binary;
}

//Function to reverse a string
`reverseString()` {
    _str = input; //string to be reversed
    _revStr = ""; //initialized empty string to store the reversed string

    //Loop through each character in the input string in reverse order and append it to the reversed string
    for i in range(length(_str) - 1, -1, -1){
        _revStr += _str[i];
    }

    //Return the final reversed string
    return _revStr;
}