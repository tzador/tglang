# This is a giant code snippet written in the programming language HACK
# It is long and complex, featuring various functions, loops, and algorithms
# It is meant to showcase the power and flexibility of the HACK language
#
# Variables
# In HACK, variables are declared using the syntax `variable_name = value`
#
# Example:
# `x = 5` - This declares a variable `x` with a value of 5
#
# Arithmetic Operations
# HACK supports basic arithmetic operations like addition, subtraction, multiplication, and division
# It also supports advanced operations like exponents and modulus
#
# Example:
# `x = 5 + 2` - This assigns the value of 7 to the variable `x`
#
# Functions
# Functions in HACK are declared using the syntax `function_name(param1, param2, ...) { ... }`
# They can have any number of parameters and can return a value using the `return` keyword
#
# Example:
# `function add(x, y) { return x + y; }` - This function adds two numbers and returns the result
#
# Loops
#
# HACK supports various types of loops like `for`, `while`, and `do while`
#
# `for` loop syntax:
# `for(initialization; condition; increment/decrement) { ... }`
#
# Example:
# `for(i = 0; i < 10; i++) { print(i); }` - This loop will print out numbers 0 to 9
#
# `while` loop syntax:
# `while(condition) { ... }`
#
# Example:
# `while(x < 10) { x++; }` - This loop increments the value of `x` until it reaches 10
#
# `do while` loop syntax:
# `do { ... } while (condition);`
#
# Example:
# `do { print(i); i++; } while(i < 10);` - This loop will print out numbers 0 to 9
#
# Conditionals
# HACK has the usual conditional statements like `if`, `else if`, and `else`
#
# `if` statement syntax:
# `if (condition) { ... }`
#
# Example:
# `if (x == 10) { print("x is equal to 10"); }` - This will check if `x` is equal to 10 and print a message if it is
#
# `else if` statement syntax:
# `else if (condition) { ... }`
#
# Example:
# `if (x < 0) { print("x is negative"); } else if (x > 0) { print("x is positive"); }` - This will check if `x` is negative, and if it is not, check if it is positive and print the corresponding message
#
# `else` statement syntax:
# `else { ... }`
#
# Example:
# `if (x < 0) { print("x is negative"); } else { print("x is non-negative"); }` - This will print a message depending on whether `x` is negative or not
#
# Arrays
# Arrays in HACK are declared using square brackets `[]` and can hold any type of data
#
# Example:
# `arr = [1, "hello", true]` - This declares an array `arr` with three elements of type number, string, and boolean
#
# Objects
# Objects in HACK are declared using curly brackets `{}` and hold key-value pairs
#
# Example:
# `person = {name: "John", age: 25}` - This declares an object `person` with the properties `name` and `age` with their corresponding values
#
# Classes
# Classes in HACK are declared using the syntax `class ClassName { ... }` and can have properties and methods
#
# Example:
# `class Student { name = "John"; age = 25; sayName() { print("My name is " + this.name); } }` - This declares a class `Student` with two properties and a method that prints out the student's name
#
# Inheritance
# HACK also supports inheritance where a child class can inherit properties and methods from a parent class
# This is done using the `extends` keyword after the class name
#
# Example:
# `class Human { name = "John"; sayName() { print("My name is " + this.name); } } class Student extends Human { age = 25; }` - This declares a class `Human` with a property and method, and a class `Student` which inherits from `Human` and has an additional property of age
#
# Comments
# Comments in HACK can be single-line using `#` or multi-line using `#< ... >#`
#
# Example:
# `# This is a single-line comment #` - This is a comment that will not be executed by the code
# `#< This is a 
# multi-line comment >#` - This is another way of writing a comment that spans multiple lines
#
# Now we will use all these features in a complex program that calculates the n-th Fibonacci number

# Declaring a function `fib` that takes in a number `n` and returns the n-th Fibonacci number
function fib(n) {
    // Initializing an empty array to store Fibonacci numbers
    fib_arr = [];
    // Initializing the first two elements in the Fibonacci sequence
    fib_arr[0] = 0;
    fib_arr[1] = 1;
    // Using a for loop to calculate and store the rest of the Fibonacci numbers in the array
    for (i = 2; i < n; i++) {
        fib_arr[i] = fib_arr[i-1] + fib_arr[i-2];
    }
    // Returning the n-th Fibonacci number
    return fib_arr[n-1];
}

# Getting input from the user for which Fibonacci number to calculate
print("Which Fibonacci number do you want to calculate? ");
input = readline();

# Converting the user input from string to number
n = int(input);

# Calling the `fib` function with input n and storing the result in the variable `fib_num`
fib_num = fib(n);

# Printing the result
print("The " + n + "th Fibonacci number is " + fib_num);

# Output:
# The 10th Fibonacci number is 34