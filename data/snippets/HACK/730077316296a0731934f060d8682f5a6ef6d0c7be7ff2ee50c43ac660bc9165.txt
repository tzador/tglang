/* Annotated Markdown HACK Code Snippet */

// Importing necessary libraries and modules
USE LIBRARY system.io
USE LIBRARY graphics

// Defining global variables
GLOBAL VAR playerScore AS INTEGER // variable to store player's score
GLOBAL VAR enemyScore AS INTEGER // variable to store enemy's score
GLOBAL VAR playerChar AS CHARACTER // variable to store player's character
GLOBAL VAR enemyChar AS CHARACTER // variable to store enemy's character

// Function to initialize game settings and variables
FUNCTION initGame
    playerScore = 0 // initialize player's score as 0
    enemyScore = 0 // initialize enemy's score as 0
    playerChar = "X" // set player's character as "X"
    enemyChar = "O" // set enemy's character as "O"
END FUNCTION

// Function to display game board
FUNCTION displayBoard
    FOR i FROM 1 TO 3 // loop to print 3 rows of the game board
        FOR j FROM 1 TO 3 // loop to print 3 columns of the game board
            PRINT "|\t_" // print divider and empty space
            PRINT "|\t_" // print divider and empty space
            PRINT "|\t_" // print divider and empty space
            IF j < 3 // check if last column is reached
                PRINT "|\n" // print end of row if not last column
            END IF
        END FOR
        IF i < 3 // check if last row is reached
            PRINT "\n------------------------" // print horizontal line between rows
        END IF
    END FOR
END FUNCTION

// Function to update game board with player's move
FUNCTION updateBoardPlayer (row, column)
    SET board[row][column] = playerChar // update game board with player's character at specified location
END FUNCTION

// Function to update game board with enemy's move
FUNCTION updateBoardEnemy (row, column)
    SET board[row][column] = enemyChar // update game board with enemy's character at specified location
END FUNCTION

// Function to check if there is a winner
FUNCTION checkWinner
    SET winner AS CHARACTER // variable to store the winner
    // Check rows for winner
    IF(board[1][1] = board[1][2] AND board[1][1] = board[1][3]) // check first row for matching characters
        SET winner = board[1][1] // store winner's character
    ELSE IF(board[2][1] = board[2][2] AND board[2][1] = board[2][3]) // check second row for matching characters
        SET winner = board[2][1] // store winner's character
    ELSE IF(board[3][1] = board[3][2] AND board[3][1] = board[3][3]) // check third row for matching characters
        SET winner = board[3][1] // store winner's character
    // Check columns for winner
    ELSE IF(board[1][1] = board[2][1] AND board[1][1] = board[3][1]) // check first column for matching characters
        SET winner = board[1][1] // store winner's character
    ELSE IF(board[1][2] = board[2][2] AND board[1][2] = board[3][2]) // check second column for matching characters
        SET winner = board[1][2] // store winner's character
    ELSE IF(board[1][3] = board[2][3] AND board[1][3] = board[3][3]) // check third column for matching characters
        SET winner = board[1][3] // store winner's character
    // Check diagonals for winner
    ELSE IF(board[1][1] = board[2][2] AND board[1][1] = board[3][3]) // check left diagonal for matching characters
        SET winner = board[1][1] // store winner's character
    ELSE IF(board[1][3] = board[2][2] AND board[1][3] = board[3][1]) // check right diagonal for matching characters
        SET winner = board[1][3] // store winner's character
    END IF

    IF winner = playerChar // check if player is the winner
        PRINT "Congratulations! You win!" // print winner message
        playerScore = playerScore + 1 // increment player's score
    ELSE IF winner = enemyChar // check if enemy is the winner
        PRINT "Uh oh! You lose!" // print loser message
        enemyScore = enemyScore + 1 // increment enemy's score
    ELSE // if no winner is found
        PRINT "It's a tie! Try again!" // print tie message
    END IF
END FUNCTION

// Main function to run the game
FUNCTION main
    initGame() // initialize game settings and variables
    displayBoard() // display the game board

    FOR i FROM 1 TO 9 // loop for 9 moves (maximum possible)
        IF i % 2 = 0 // check if it's player's turn
            PRINT "Player's turn. Enter row (1-3):\t" // prompt player for row
            GET playerRow // get player's row choice from user
            PRINT "Player's turn. Enter column (1-3):\t" // prompt player for column
            GET playerColumn // get player's column choice from user
            updateBoardPlayer(playerRow, playerColumn) // update game board with player's move
        ELSE // if it's enemy's turn
            PRINT "Enemy's turn. Enter row (1-3):\t" // prompt enemy for row
            GET enemyRow // get enemy's row choice from user
            PRINT "Enemy's turn. Enter column (1-3):\t" // prompt enemy for column
            GET enemyColumn // get enemy's column choice from user
            updateBoardEnemy(enemyRow, enemyColumn) // update game board with enemy's move
        END IF

        displayBoard() // display the updated game board
        checkWinner() // check if there is a winner
    END FOR

    // Print final scores
    PRINT "Final Scores:"
    PRINT "Player:\t" + playerScore
    PRINT "Enemy:\t" + enemyScore
END FUNCTION

// Execute the main function
main()