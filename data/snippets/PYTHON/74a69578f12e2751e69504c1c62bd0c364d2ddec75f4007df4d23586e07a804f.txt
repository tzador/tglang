# Import necessary libraries
import math
import numpy as np

# Create a class named Shape
class Shape:
    def __init__(self, color, shape_type):
        self.color = color
        self.shape_type = shape_type
    
    # Define a method to calculate area
    def calculate_area(self):
        pass
    
    # Define a method to calculate perimeter
    def calculate_perimeter(self):
        pass

# Create a subclass of Shape called Circle
class Circle(Shape):
    def __init__(self, color, radius):
        super().__init__(color, "circle")
        self.radius = radius
    
    # Override calculate_area method for circles
    def calculate_area(self):
        return math.pi * self.radius**2
    
    # Override calculate_perimeter method for circles
    def calculate_perimeter(self):
        return 2 * math.pi * self.radius

# Create a subclass of Shape called Rectangle
class Rectangle(Shape):
    def __init__(self, color, length, width):
        super().__init__(color, "rectangle")
        self.length = length
        self.width = width
    
    # Override calculate_area method for rectangles
    def calculate_area(self):
        return self.length * self.width
    
    # Override calculate_perimeter method for rectangles
    def calculate_perimeter(self):
        return 2 * (self.length + self.width)

# Create an instance of Circle
circle = Circle("red", 5)
print("Area of the circle:", circle.calculate_area())
print("Perimeter of the circle:", circle.calculate_perimeter())

# Create an instance of Rectangle
rectangle = Rectangle("blue", 4, 6)
print("Area of the rectangle:", rectangle.calculate_area())
print("Perimeter of the rectangle:", rectangle.calculate_perimeter())

# Convert the Circle object to a numpy array
circle_array = np.array([circle])

# Concatenate the rectangle array and circle array
shape_array = np.concatenate((np.array([rectangle]), circle_array))