# Import necessary libraries 
import numpy as np
from scipy.optimize import minimize
import matplotlib.pyplot as plt

# Define function to be optimized
def rosenbrock(x):
    """Rosenbrock function: f(x,y)=(1-x)^2 + 100(y-x^2)^2
    Input: x (np.array): point coordinates
    Output: f (float): function value at point x
    """
    return (1-x[0])**2 + 100*(x[1]-x[0]**2)**2

# Define constraints
cons = [{'type': 'ineq', 'fun': lambda x: x[0] + x[1] - 3},
        {'type': 'ineq', 'fun': lambda x: x[0] - x[1] - 1}]

# Specify initial guess
x0 = np.array([0, 0])

# Minimize the function
res = minimize(rosenbrock, x0, method='SLSQP', constraints=cons)

# Print the results
print('Minimum function value:', res.fun)
print('Optimal values for x and y:', res.x)

# Plot the function
x = np.linspace(-1, 3, 100)
y = np.linspace(-1, 3, 100)
X, Y = np.meshgrid(x, y)
Z = rosenbrock([X, Y])
plt.contour(X, Y, Z, 50)
plt.plot(res.x[0], res.x[1], 'ro')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Rosenbrock Function')
plt.show()