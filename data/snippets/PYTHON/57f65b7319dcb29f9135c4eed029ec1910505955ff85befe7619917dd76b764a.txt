# This is a function that calculates the factorial of a given number
def factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result
# This is a function that checks if a number is prime
def check_prime(n):
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
# This is a function that finds the next prime number after a given number
def next_prime(n):
    current = n + 1
    while not check_prime(current):
        current += 1
    return current

# This is a class for storing and manipulating a list of prime numbers
class PrimeList:
    def __init__(self, limit):
        self.limit = limit
        self.primes = [2]
    
    # Method to generate the list of prime numbers using the Sieve of Eratosthenes algorithm
    def generate_primes(self):
        sieve = [True] * (self.limit + 1)
        for i in range(3, int(self.limit ** 0.5) + 1, 2):
            if sieve[i]:
                for j in range(i*i, self.limit + 1, 2*i):
                    sieve[j] = False
        for i in range(3, self.limit + 1, 2):
            if sieve[i]:
                self.primes.append(i)
    
    # Method to check if a given number is in the list of prime numbers
    def is_prime(self, n):
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        for prime in self.primes:
            if n % prime == 0:
                return False
        return True
    
    # Method to find the xth prime number in the list
    def find_xth_prime(self, x):
        if x < len(self.primes):
            return self.primes[x-1]
        else:
            current = self.primes[-1] + 2
            while len(self.primes) < x:
                if self.is_prime(current):
                    self.primes.append(current)
                current += 2
            return self.primes[x-1]
    
    # Method to print the list of prime numbers
    def print_primes(self):
        print(self.primes)

# Initializing an instance of the PrimeList class with a limit of 100
prime_list = PrimeList(100)

# Generating the list of primes
prime_list.generate_primes()

# Finding the 10th prime number in the list
tenth_prime = prime_list.find_xth_prime(10)

# Finding the next prime number after the 10th prime
next_tenth_prime = next_prime(tenth_prime)

# Printing the list of prime numbers
prime_list.print_primes()

# Output: