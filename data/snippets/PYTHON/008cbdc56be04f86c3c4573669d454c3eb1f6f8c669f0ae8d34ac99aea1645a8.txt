# This is a complex function that calculates the nth Fibonacci number
def fib(n):
    if n == 1 or n == 2:
        return 1  // base case
    return fib(n-1) + fib(n-2)  // recursive case

# This is a dynamic programming approach that uses memoization to optimize the function
def fib_memo(n, memo={}):
    if n in memo:
        return memo[n]
    if n == 1 or n == 2:
        return 1
    memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo)
    return memo[n]

print(fib(10))  // output: 55
print(fib_memo(10))  // output: 55