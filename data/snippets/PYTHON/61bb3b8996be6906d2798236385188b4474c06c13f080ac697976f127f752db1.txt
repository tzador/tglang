# This code snippet generates all subsets of a given list using recursion and bitwise operators

def subsets(nums):
    """Function to generate all subsets of a given list using recursion and bitwise operators

    Args:
        nums (list): List of numbers to generate subsets from

    Returns:
        list: List of all subsets of the given list
    """
    # Base case, if there are no elements in the list, return an empty list
    if len(nums) == 0:
        return [[]]
    else:
        # Get the first element in the list
        num = nums[0]
        # Generate all subsets of the remaining list (recursive call)
        remaining_subsets = subsets(nums[1:])
        # Initialize an empty list to store all subsets
        current_subsets = []
        # For each subset in the remaining subsets list,
        # append the current number to it and add it to the current subsets list
        for subset in remaining_subsets:
            current_subsets.append([num] + subset)
        # Return the current subsets list and the remaining subsets list
        return current_subsets + remaining_subsets

# Input list
my_list = [1, 2, 3]

# Call the subsets function and store the output in a variable
output = subsets(my_list)

# Print the output
print(output)