# This code snippet demonstrates the implementation of a binary search tree in Python

class Node: # Class representing a node in the tree
    def __init__(self, value): # Constructor for the Node class
        self.value = value # Value stored in the node
        self.left = None # Pointer to the left child
        self.right = None # Pointer to the right child
    
class BinarySearchTree: # Class representing the binary search tree
    def __init__(self): # Constructor for the BinarySearchTree class
        self.root = None # Pointer to the root node
        
    def insert(self, value): # Method to insert a node in the tree
        if self.root is None: # If the tree is empty
            self.root = Node(value) # Create a new node as the root
        else: # If the tree is not empty
            self._insert_value(self.root, value) # Call the private helper function to insert the node
        
    def _insert_value(self, curr_node, value): # Private helper function to insert a node
        if value < curr_node.value: # If the value is less than the current node
            if curr_node.left is None: # If there is no left child
                curr_node.left = Node(value) # Create a new node as the left child
            else: # If there is a left child
                self._insert_value(curr_node.left, value) # Recursively call the function on the left child
        else: # If the value is greater than or equal to the current node
            if curr_node.right is None: # If there is no right child
                curr_node.right = Node(value) # Create a new node as the right child
            else: # If there is a right child
                self._insert_value(curr_node.right, value) # Recursively call the function on the right child
    
    def search(self, value): # Method to search for a node in the tree
        return self._search_value(self.root, value) # Call the private helper function to search for the node
    
    def _search_value(self, curr_node, value): # Private helper function to search for a node
        if curr_node is None: # If the current node is None (reached the end of the tree)
            return False # Return False as the node does not exist
        elif curr_node.value == value: # If the current node has the value we are searching for
            return True # Return True as the node exists
        elif value < curr_node.value: # If the value is less than the current node
            return self._search_value(curr_node.left, value) # Recursively call the function on the left child
        else: # If the value is greater than the current node
            return self._search_value(curr_node.right, value) # Recursively call the function on the right child

# Example of using the binary search tree

# Create a new binary search tree
bst = BinarySearchTree()

# Insert nodes with values 5, 2, 7, 1, 3
bst.insert(5)
bst.insert(2)
bst.insert(7)
bst.insert(1)
bst.insert(3)

# Search for nodes with values 5, 7, 4
print(bst.search(5)) # Output: True
print(bst.search(7)) # Output: True
print(bst.search(4)) # Output: False