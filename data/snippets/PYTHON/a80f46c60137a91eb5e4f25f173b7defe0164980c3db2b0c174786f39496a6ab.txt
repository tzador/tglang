# This is a code snippet that demonstrates a complex sorting algorithm using nested if statements

# Input data to be sorted
unsorted_data = [4, 2, 6, 9, 1, 5, 8, 3, 7]

# Initialize an empty list to store sorted data
sorted_data = []

# Loop through each element in the unsorted list
for element in unsorted_data:

    # Check if the sorted list is empty
    if len(sorted_data) == 0:
        # If it is, add the first element to the sorted list
        sorted_data.append(element)
    else:
        # If the sorted list is not empty, loop through each element in the sorted list
        for index, sorted_element in enumerate(sorted_data):
            # Compare the current element with each element in the sorted list
            if element < sorted_element:
                # If the current element is smaller, insert it at the current position in the sorted list
                sorted_data.insert(index, element)
                # Break out of the loop to avoid comparing with the remaining elements
                break
            elif index == len(sorted_data) - 1:
                # If the current element is larger than all elements in the sorted list, append it to the end
                sorted_data.append(element)

# Print the sorted list
print(sorted_data)