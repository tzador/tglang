#This code snippet is a simple sorting algorithm using recursion
def bubble_sort(arr):                                       #Defines a function named bubble_sort that takes in a list as an argument
    n = len(arr)                                            #Assigns the length of the list to the variable n
    for i in range(n-1):                                    #Loops through the list
        for j in range(0, n-i-1):                           #Loops through the unsorted portion of the list
            if arr[j] > arr[j+1]:                           #Compares two elements and swaps them if necessary
                arr[j], arr[j+1] = arr[j+1], arr[j]         
    return arr                                              #Returns the sorted list

def merge(arr, left, mid, right):                           #Defines a function named merge that takes in a list, the start of the left array, mid point and end point as arguments
    n1 = mid - left + 1                                     #Calculates the length of the left array
    n2 = right - mid                                        #Calculates the length of the right array
    L = [0] * n1                                            #Creates a temporary array for the left half of the list
    R = [0] * n2                                            #Creates a temporary array for the right half of the list
    for i in range(0, n1):                                  #Copies the elements from the original list into the left array
        L[i] = arr[left + i]
    for j in range(0, n2):                                  #Copies the elements from the original list into the right array
        R[j] = arr[mid + 1 + j]
    i = 0                                                   #Initializes a variable to keep track of the index of the left array
    j = 0                                                   #Initializes a variable to keep track of the index of the right array
    k = left                                                #Initializes a variable to keep track of the index of the original array
    while i < n1 and j < n2:                                #Loop while both arrays still have elements that have not been compared
        if L[i] <= R[j]:                                    #Compares the elements of the left and right arrays and assigns the smaller value to the original array
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1                                              #Increments the index of the original array
    while i < n1:                                           #Loops through remaining elements in the left array
        arr[k] = L[i]
        i += 1
        k += 1
    while j < n2:                                           #Loops through remaining elements in the right array
        arr[k] = R[j]
        j += 1
        k += 1

def merge_sort(arr, left, right):                           #Defines a function named merge_sort that takes in a list, the start and end points of the unsorted portion as arguments
    if left < right:                                        #Checks if there is more than 1 element in the unsorted portion
        mid = (left + (right - 1)) // 2                     #Calculates the midpoint of the unsorted portion
        merge_sort(arr, left, mid)                          #Recursively calls merge_sort on the left half of the list
        merge_sort(arr, mid + 1, right)                     #Recursively calls merge_sort on the right half of the list
        merge(arr, left, mid, right)                        #Merges the two sorted halves of the list
    

arr = [2, 5, 1, 9, 3, 7]                                    #Sample input list
bubble_sort(arr)                                            #Calls the bubble_sort function to sort the list
print(arr)                                                  #Prints the sorted list
arr = [4, 8, 2, 1, 6, 3]                                    #Sample input list
merge_sort(arr, 0, len(arr)-1)                              #Calls the merge_sort function to sort the list
print(arr)                                                  #Prints the sorted list