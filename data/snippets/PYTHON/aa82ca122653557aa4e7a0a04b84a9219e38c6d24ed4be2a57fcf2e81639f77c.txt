"""
This code snippet builds a multilayer perceptron neural network using the Keras library.
It trains the network on the MNIST dataset and calculates accuracy on the test set.
"""

# import necessary libraries
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# load the MNIST dataset from Keras
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

# preprocess the data by reshaping it and converting it to float32
x_train = x_train.reshape(x_train.shape[0], x_train.shape[1]*x_train.shape[2]).astype('float32')/255
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1]*x_test.shape[2]).astype('float32')/255

# convert the labels to categorical variables
y_train = keras.utils.to_categorical(y_train)
y_test = keras.utils.to_categorical(y_test)

# define the model architecture
model = Sequential()
model.add(Dense(512, activation='relu', input_shape=(784,)))
model.add(Dropout(0.2))
model.add(Dense(10, activation='softmax'))

# compile the model with crossentropy loss and adam optimizer
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# train the model on the training data for 20 epochs with batch size of 128
model.fit(x_train, y_train, epochs=20, batch_size=128, validation_data=(x_test, y_test))

# evaluate the model on the test data and print the accuracy
test_loss, test_acc = model.evaluate(x_test, y_test)
print('Test accuracy:', test_acc)