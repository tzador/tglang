# This code snippet demonstrates how to perform a binary search on a sorted list in Python.

# Initialize a sorted list with numeric values
my_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

# Function for binary search
def binary_search(lst, target):
    
    # Initialize the starting index and ending index
    start = 0
    end = len(lst) - 1
    
    # Loop until the start index is equal to or greater than the end index
    while start <= end:
        
        # Find the middle index
        mid = (start + end) // 2
        
        # Check if the middle element is the target
        if lst[mid] == target:
            return mid  # Return the index of the target element
        
        # If the target is smaller than the middle element, search the left half of the list
        elif target < lst[mid]:
            end = mid - 1  # Update the end index
        
        # If the target is larger than the middle element, search the right half of the list
        else:
            start = mid + 1  # Update the start index
    
    # If the target is not found, return -1
    return -1        

# Test the function with a target value of 10
print(binary_search(my_list, 10))

# Test the function with a target value that is not in the list
print(binary_search(my_list, 5))