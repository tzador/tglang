# This is a code snippet demonstrating the use of a neural network in Python
# Importing necessary libraries
import numpy as np
import tensorflow as tf

# Setting up the model
model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(input_shape=(100,)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compiling the model
model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])

# Generating random input data
X_train = np.random.rand(1000, 100)
y_train = np.random.randint(0, 10, size=(1000,))

# Training the model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Evaluating the model on test data
X_test = np.random.rand(100, 100)
y_test = np.random.randint(0, 10, size=(100,))

test_loss, test_acc = model.evaluate(X_test, y_test)

# Printing the test accuracy
print("Test accuracy:", test_acc)

# Saving the model
model.save('my_model.h5')

# Loading the saved model
loaded_model = tf.keras.models.load_model('my_model.h5')