class Node:
    # This is a class representing a node in a binary tree

    def __init__(self, value):
        # This is a constructor method that initializes the node with a value

        self.value = value  # Assigns the value to the node
        self.left = None  # Initializes the left child of the node as None
        self.right = None  # Initializes the right child of the node as None

    def insert(self, value):
        # This method inserts a new node into the binary tree according to its value

        if value < self.value:  # Checks if the new node's value is smaller than the current node's value
            if self.left is None:  # Checks if the left child of the current node is None
                self.left = Node(value)  # If so, creates a new node and sets it as the current node's left child
            else:
                self.left.insert(value)  # If not, recursively calls this method on the current node's left child
        else:
            if self.right is None:  # Checks if the right child of the current node is None
                self.right = Node(value)  # If so, creates a new node and sets it as the current node's right child
            else:
                self.right.insert(value)  # If not, recursively calls this method on the current node's right child

    def print_tree(self):
        # This method prints the entire binary tree

        if self.left:  # Checks if the current node has a left child
            self.left.print_tree()  # If so, recursively calls this method on the current node's left child
        print(self.value)  # Prints the value of the current node
        if self.right:  # Checks if the current node has a right child
            self.right.print_tree()  # If so, recursively calls this method on the current node's right child

# Example usage:
# Create a root node with a value of 5
root = Node(5)

# Insert nodes with values of 2, 6, 8, 3, and 1 into the binary tree
root.insert(2)
root.insert(6)
root.insert(8)
root.insert(3)
root.insert(1)

# Print the binary tree
root.print_tree()