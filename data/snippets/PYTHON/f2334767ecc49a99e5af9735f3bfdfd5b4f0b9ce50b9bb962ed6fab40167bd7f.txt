#@Title: Recursive Backtracking Maze Generator
#@Author: John Smith
#@Date: 05/10/2021

#Import necessary libraries
import random
import sys

#Define global variables
sys.setrecursionlimit(100000)
#This sets the recursion limit to a higher value for bigger mazes

#Define function to initialize the maze
def initialize_maze(rows, cols):
    #Create a list of rows with each row containing a list of cells
    maze = [[Cell(row, col) for col in range(cols)] for row in range(rows)]
    return maze

#Define function to generate random maze using recursive backtracking algorithm
def generate_maze(maze, current_cell):
    #Mark current cell as visited
    current_cell.visited = True
    #Get list of unvisited neighbors
    unvisited_neighbors = [neighbor for neighbor in current_cell.get_neighbors(maze) if not neighbor.visited]
    #If all neighbors have been visited, return
    if not unvisited_neighbors:
        return
    #Choose a random neighbor
    neighbor = random.choice(unvisited_neighbors)
    #Remove wall between current cell and chosen neighbor
    current_cell.remove_wall(neighbor)
    #Recursively call function on chosen neighbor
    generate_maze(maze, neighbor)
    #Recursively call function on current cell to create new paths
    generate_maze(maze, current_cell)

#Define class for each cell in the maze
class Cell:
    def __init__(self, row, col):
        #Mark cell as unvisited and walls on all sides
        self.visited = False
        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}
        self.row = row
        self.col = col
    #Define function to get list of neighboring cells
    def get_neighbors(self, maze):
        #Get neighboring cells above, right, below, and left of current cell
        neighbors = []
        if self.row > 0:
            neighbors.append(maze[self.row - 1][self.col]) #above
        if self.col < len(maze[self.row]) - 1:
            neighbors.append(maze[self.row][self.col + 1]) #right
        if self.row < len(maze) - 1:
            neighbors.append(maze[self.row + 1][self.col]) #below
        if self.col > 0:
            neighbors.append(maze[self.row][self.col - 1]) #left
        return neighbors
    #Define function to remove walls between current cell and a chosen neighbor
    def remove_wall(self, neighbor):
        #If chosen neighbor is above of current cell, remove bottom wall of neighbor and top wall of current cell
        if neighbor.row == self.row - 1:
            self.walls['top'] = False
            neighbor.walls['bottom'] = False
        #If chosen neighbor is to the right of current cell, remove left wall of neighbor and right wall of current cell
        elif neighbor.col == self.col + 1:
            self.walls['right'] = False
            neighbor.walls['left'] = False
        #If chosen neighbor is below of current cell, remove top wall of neighbor and bottom wall of current cell
        elif neighbor.row == self.row + 1:
            self.walls['bottom'] = False
            neighbor.walls['top'] = False
        #If chosen neighbor is to the left of current cell, remove right wall of neighbor and left wall of current cell
        elif neighbor.col == self.col - 1:
            self.walls['left'] = False
            neighbor.walls['right'] = False
        #Return updated walls of current cell and chosen neighbor
        return self.walls, neighbor.walls

#Main function
if __name__ == '__main__':
    #Define size of maze (odd numbers only to create a perfect maze)
    rows = 31
    cols = 31
    #Initialize maze
    maze = initialize_maze(rows, cols)
    #Generate maze from top left corner
    generate_maze(maze, maze[0][0])
    #Print maze as a grid of walls and paths
    for row in maze:
        for cell in row:
            print('x' if cell.walls['top'] else ' ', end='')
        print()
        for cell in row:
            print('x' if cell.walls['left'] else ' ', end='')
            print('x' if cell.walls['right'] else ' ', end='')
        print()
        for cell in row:
            print('x' if cell.walls['bottom'] else ' ', end='')
        print()