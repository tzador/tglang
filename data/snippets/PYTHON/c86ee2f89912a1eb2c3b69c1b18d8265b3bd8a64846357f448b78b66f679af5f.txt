# This is a function to calculate the nth Fibonacci number in an efficient manner using memoization
def fibonacci(n, cache={}):
    # check if the value for nth Fibonacci number has already been calculated and saved in cache
    if n in cache:
        # if so, return the stored value
        return cache[n]
    # if n is 0, the corresponding Fibonacci number is 0
    if n == 0:
        # add 0 to the cache
        cache[n] = 0
        # return 0
        return 0
    # if n is 1 or 2, the corresponding Fibonacci number is 1
    if n == 1 or n == 2:
        # add 1 to the cache
        cache[n] = 1
        # return 1
        return 1
    # if n is greater than 2, recursively call the fibonacci function on n-1 and n-2
    # and add the results together to get the nth Fibonacci number
    else:
        # add the result of recursively calling fibonacci on n-1 and n-2 to the cache
        cache[n] = fibonacci(n-1, cache) + fibonacci(n-2, cache)
        # return the sum of the two fibonacci numbers
        return cache[n]
# example usage: calculating the 15th Fibonacci number by calling the fibonacci function
print(fibonacci(15))