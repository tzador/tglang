import tensorflow as tf # importing tensorflow library

# creating a class named Neural Network
class NeuralNetwork:
    def __init__(self, n_inputs, n_hidden, n_outputs):
        # initializing the weights of the neural network
        self.weights = {
            'hidden': tf.Variable(tf.random.normal([n_inputs, n_hidden])), # randomly initializing weight for hidden layer
            'output': tf.Variable(tf.random.normal([n_hidden, n_outputs])) # randomly initializing weight for output layer
        }

        # initializing the biases of the neural network
        self.biases = {
            'hidden': tf.Variable(tf.random.normal([n_hidden])), # randomly initializing bias for hidden layer
            'output': tf.Variable(tf.random.normal([n_outputs])) # randomly initializing bias for output layer
        }

    # creating the forward propagation function
    def forward_prop(self, x):
        # performing matrix multiplication between input and hidden layer weights
        hidden_layer = tf.matmul(x, self.weights['hidden'])
        # adding the bias to the hidden layer output
        hidden_layer = tf.add(hidden_layer, self.biases['hidden'])
        # applying an activation function to hidden layer output
        hidden_layer = tf.nn.relu(hidden_layer)

        # performing matrix multiplication between hidden and output layer weights
        output_layer = tf.matmul(hidden_layer, self.weights['output'])
        # adding the bias to the output layer output
        output_layer = tf.add(output_layer, self.biases['output'])
        # applying a softmax activation function to output layer output
        output_layer = tf.nn.softmax(output_layer)

        # returning the output layer
        return output_layer

# creating an instance of the NeuralNetwork class
network = NeuralNetwork(n_inputs=784, n_hidden=128, n_outputs=10)

# creating a list of dummy inputs
inputs = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]

# converting the list to a tensor
tensor_inputs = tf.convert_to_tensor(inputs)

# calling the forward propagation function
output = network.forward_prop(tensor_inputs)

# printing the output
print(output)