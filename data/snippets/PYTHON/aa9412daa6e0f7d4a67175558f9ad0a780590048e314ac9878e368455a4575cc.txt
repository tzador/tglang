# This is a complex piece of code that calculates the proper order of tasks and their associated cost
def calculate_order(tasks, costs):
    # Create a memoization dictionary to store previously calculated results
    memo = {}

    # Helper function to find the minimum cost of tasks
    def find_min_cost(curr_tasks):
        # Base case: if there are no tasks, return 0
        if not curr_tasks:
            return 0
        
        # Check if the current combination of tasks has been calculated before, if so, return the memoized result
        curr_tasks_tuple = tuple(curr_tasks)
        if curr_tasks_tuple in memo:
            return memo[curr_tasks_tuple]
        
        # Initialize a list to store the costs of all possible combinations of tasks
        costs_list = []

        # Loop through each task and add its cost to the list, while also removing it from the list of remaining tasks
        for i in range(len(curr_tasks)):
            curr_task = curr_tasks[i]
            remaining_tasks = curr_tasks[:i] + curr_tasks[i+1:]
            costs_list.append(costs[curr_task] + find_min_cost(remaining_tasks))
        
        # Find the minimum cost from the costs list and store it in the memo dictionary for future use
        min_cost = min(costs_list)
        memo[curr_tasks_tuple] = min_cost

        return min_cost
    
    # Call the helper function with the given tasks
    return find_min_cost(tasks)