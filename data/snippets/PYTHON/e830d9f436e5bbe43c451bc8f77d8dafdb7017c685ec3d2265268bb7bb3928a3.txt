###Import required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder, MinMaxScaler

###Load the data
data = pd.read_csv('dataset.csv')

###Pre-processing the data
data = data.drop_duplicates() #remove duplicate rows
data = data.fillna(data.mean()) #replace missing values with mean
X = data.iloc[:, :-1] #select all columns except last one as features
y = data.iloc[:, -1] #select last column as target variable

###Encoding categorical variables
ohe = OneHotEncoder(sparse=False, drop='first') #initialize OneHotEncoder
cat_columns = ['gender', 'occupation', 'education'] #list of categorical columns
ohe_features = pd.DataFrame(ohe.fit_transform(X[cat_columns])) #fit and transform categorical features
X = pd.concat([X, ohe_features], axis=1).drop(cat_columns, axis=1) #combine encoded features with original data, drop old categorical columns

###Feature scaling
scaler = MinMaxScaler() #initialize MinMaxScaler
scaler.fit(X) #fit scaler to data
X_scaled = scaler.transform(X) #transform data using scaler

###Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42) #split data into training and testing sets, using 30% for testing and setting a random state for reproducibility

###Training the model
lr = LinearRegression() #initialize LinearRegression model
lr.fit(X_train, y_train) #fit model on training data

###Making predictions
y_pred = lr.predict(X_test) #make predictions on testing data

###Evaluating the model
accuracy = accuracy_score(y_test, y_pred) #calculate accuracy of predictions
print("The accuracy of the model is:", accuracy) #print accuracy