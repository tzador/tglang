class Node:                       # defining a Node class
    def __init__(self, data):     # constructor method with data parameter
        self.data = data          # setting object data equal to passed in data
        self.next = None          # setting next node to none

class LinkedList:                 # defining a LinkedList class
    def __init__(self):           # constructor method without parameters
        self.head = None          # setting head pointer equal to none
        self.tail = None          # setting tail pointer equal to none

    def add(self, data):          # method to add a new node to the end of the linked list
        new_node = Node(data)     # creating a new instance of Node class with passed in data
        if self.head == None:     # if the linked list is empty,
	        self.head = new_node # set the head pointer to the new node
	        self.tail = new_node # also set the tail pointer to the new node since there is only one node
        else:                     # if the linked list is not empty,
            self.tail.next = new_node # set the next pointer of the current tail node to the new node
            self.tail = new_node      # update the tail pointer to point to the new node

    def traverse(self):           # method to traverse the linked list and print the node data
        curr = self.head          # start at the head node
        while curr != None:       # while the current node is not None,
            print(curr.data)      # print the data of the current node
            curr = curr.next      # move to the next node

llist = LinkedList()              # creating an instance of the LinkedList class
llist.add(1)                      # adding nodes to the linked list
llist.add(2)
llist.add(3)
llist.traverse()                  # printing the data in the linked list