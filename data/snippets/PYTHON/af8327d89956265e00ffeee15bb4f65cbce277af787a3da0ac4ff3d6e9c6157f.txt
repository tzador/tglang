# This code snippet is an implementation of the quicksort algorithm
# Quicksort is a popular sorting algorithm that uses the "divide and conquer" strategy

# Define the quicksort function
def quicksort(array):
    # Create a base case if the array has one or less elements
    if len(array) <= 1:
        return array
    # Set the pivot as the last element in the array
    pivot = array[-1]
    # Create two subarrays for values less than the pivot and values greater than the pivot
    less_than_pivot = [x for x in array[:-1] if x <= pivot]
    greater_than_pivot = [x for x in array[:-1] if x > pivot]
    # Recursively call the quicksort function on the two subarrays and merge them together with the pivot in between
    return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)

# Test case
unsorted_array = [7, 3, 9, 2, 5, 8]
sorted_array = quicksort(unsorted_array)
# Output: [2, 3, 5, 7, 8, 9]