class Graph:
    """This is a class for creating a directed graph data structure."""
    
    def __init__(self):
        """The constructor method takes no inputs and initializes the graph as an empty dictionary."""
        self.nodes = {}
    
    def add_node(self, value):
        """This method adds a new node to the graph with the given value as its key."""
        self.nodes[value] = []
    
    def add_edge(self, source, destination):
        """This method adds a directed edge from the source node to the destination node."""
        if source in self.nodes and destination in self.nodes:
            self.nodes[source].append(destination)
        else:
            raise ValueError("One or both of the nodes does not exist in the graph.")
    
    def remove_edge(self, source, destination):
        """This method removes the directed edge from the source node to the destination node."""
        if source in self.nodes and destination in self.nodes:
            self.nodes[source].remove(destination)
        else:
            raise ValueError("One or both of the nodes does not exist in the graph.")
    
    def remove_node(self, value):
        """This method removes the node and all its edges from the graph."""
        if value in self.nodes:
            for node in self.nodes:
                if value in self.nodes[node]:
                    self.nodes[node].remove(value)
            del self.nodes[value]
        else:
            raise KeyError("Node does not exist in the graph.")
    
    def has_node(self, value):
        """This method returns a boolean value indicating if the given node is present in the graph."""
        return value in self.nodes
    
    def get_nodes(self):
        """This method returns a list of all the nodes in the graph."""
        return list(self.nodes.keys())
    
    def get_neighbors(self, value):
        """This method returns a list of all the neighbors of the given node."""
        if value in self.nodes:
            return self.nodes[value]
        else:
            raise KeyError("Node does not exist in the graph.")
        
    def __str__(self):
        """This method returns a string representation of the graph in the form of a dictionary."""
        return str(self.nodes)
        
# Example usage:
my_graph = Graph()
my_graph.add_node(1)
my_graph.add_node(2)
my_graph.add_node(3)
my_graph.add_edge(1, 2)
my_graph.add_edge(2, 3)
print(my_graph.get_nodes()) # Output: [1, 2, 3]
print(my_graph.get_neighbors(2)) # Output: [3]
my_graph.remove_edge(1, 2)
print(my_graph.get_neighbors(1)) # Output: []
my_graph.remove_node(2)
print(my_graph.get_nodes()) # Output: [1, 3]
print(my_graph) # Output: {1: [], 3: []}