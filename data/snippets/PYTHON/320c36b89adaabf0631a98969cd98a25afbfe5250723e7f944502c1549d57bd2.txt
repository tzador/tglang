# This is a code snippet in Python which performs linear regression on a dataset
# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

# Load the dataset
df = pd.read_csv("dataset.csv")

# Split the dataset into train and test sets
train = df[:80]
test = df[80:]

# Separate features and target variables
train_features = train.drop('target', axis=1)
test_features = test.drop('target', axis=1)
train_target = train['target']
test_target = test['target']

# Normalize the features
train_features_norm = (train_features - train_features.mean()) / train_features.std()
test_features_norm = (test_features - test_features.mean()) / test_features.std()

# Create and train the linear regression model
lr = LinearRegression()
lr.fit(train_features_norm, train_target)

# Make predictions on test set
predictions = lr.predict(test_features_norm)

# Evaluate the model performance
mse = np.mean((predictions - test_target)**2)
print("Mean Squared Error:", mse)

# Plot the actual and predicted target values
import matplotlib.pyplot as plt
plt.scatter(test_target, predictions)
plt.xlabel('Actual Target Values')
plt.ylabel('Predicted Target Values')
plt.title('Linear Regression Results')
plt.show()

# Save the model for future use
import joblib
joblib.dump(lr, 'linear_regression_model.pkl')