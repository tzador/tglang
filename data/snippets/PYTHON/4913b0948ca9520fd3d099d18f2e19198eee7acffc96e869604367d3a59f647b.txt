# This is a class for creating a maze game
class MazeGame:
    # Constructor function for initializing the game
    def __init__(self, rows, columns):
        self.rows = rows
        self.columns = columns
        self.maze = [[None] * columns for row in range(rows)]

    # Function for generating the maze based on the given dimensions
    def generate_maze(self):
        # First create a grid of rooms
        for row in range(self.rows):
            for column in range(self.columns):
                self.maze[row][column] = Room(row, column)

        # Recursive function for creating the maze
        def create_maze(current_room):
            current_room.visited = True  # Mark current room as visited
            unvisited_neighbors = []  # List to keep track of unvisited neighbors

            # Check for unvisited neighbor rooms
            if current_room.row != 0 and not self.maze[current_room.row - 1][current_room.column].visited:
                unvisited_neighbors.append(self.maze[current_room.row - 1][current_room.column])  # Append top neighbor
            if current_room.column != self.columns - 1 and not self.maze[current_room.row][current_room.column + 1].visited:
                unvisited_neighbors.append(self.maze[current_room.row][current_room.column + 1])  # Append right neighbor
            if current_room.row != self.rows - 1 and not self.maze[current_room.row + 1][current_room.column].visited:
                unvisited_neighbors.append(self.maze[current_room.row + 1][current_room.column])  # Append bottom neighbor
            if current_room.column != 0 and not self.maze[current_room.row][current_room.column - 1].visited:
                unvisited_neighbors.append(self.maze[current_room.row][current_room.column - 1])  # Append left neighbor

            # Randomly select one unvisited neighbor
            if unvisited_neighbors:
                next_room = random.choice(unvisited_neighbors)
                # Remove walls between current room and selected neighbor
                if current_room.row > next_room.row:
                    current_room.top_wall = False
                    next_room.bottom_wall = False
                elif current_room.column < next_room.column:
                    current_room.right_wall = False
                    next_room.left_wall = False
                elif current_room.row < next_room.row:
                    current_room.bottom_wall = False
                    next_room.top_wall = False
                elif current_room.column > next_room.column:
                    current_room.left_wall = False
                    next_room.right_wall = False

                create_maze(next_room)  # Repeat for next room
            else:
                return

        # Call recursive function starting at top left room
        create_maze(self.maze[0][0])


# This is a class for creating rooms within the maze
class Room:
    # Constructor function for initializing a room
    def __init__(self, row, column):
        self.row = row
        self.column = column
        self.visited = False
        self.top_wall = True
        self.right_wall = True
        self.bottom_wall = True
        self.left_wall = True