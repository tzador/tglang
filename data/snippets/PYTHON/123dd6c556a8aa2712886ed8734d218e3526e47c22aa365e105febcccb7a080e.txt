#creating a function with recursive algorithm to perform merge sort
def merge_sort(arr):
    #checking if the array has more than one element
    if len(arr) > 1:
        #finding the middle index of the array
        mid = len(arr) // 2

        #dividing the array into two halves
        left = arr[:mid]
        right = arr[mid:]

        #calling the merge sort function recursively on the two halves
        merge_sort(left)
        merge_sort(right)

        #initializing temporary variables
        i = j = k = 0

        #sorting and merging the two halves
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        #checking if there are any remaining elements in the left half
        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        #checking if there are any remaining elements in the right half
        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

#defining an array with unsorted elements
arr = [4, 2, 6, 1, 8, 3, 9, 5, 7]

#printing the unsorted array
print("Unsorted array:")
print(arr)

#calling the merge sort function on the array
merge_sort(arr)

#printing the sorted array
print("Sorted array:")
print(arr)

#output:
â€‹