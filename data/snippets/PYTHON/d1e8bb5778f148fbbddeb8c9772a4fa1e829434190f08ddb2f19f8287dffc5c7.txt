# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn import preprocessing
from sklearn.ensemble import RandomForestRegressor

# Load data
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

# Data preprocessing
train = train.fillna(-999)
test = test.fillna(-999)

# Feature engineering
train['family_size'] = train['SibSp'] + train['Parch'] + 1
test['family_size'] = test['SibSp'] + test['Parch'] + 1
train['is_alone'] = np.where(train['family_size']==1, 1, 0)
test['is_alone'] = np.where(test['family_size']==1, 1, 0)
train['title'] = train['Name'].str.split(',').str[1].str.split('.').str[0].str.strip()
test['title'] = test['Name'].str.split(',').str[1].str.split('.').str[0].str.strip()
train['cabin_letter'] = train['Cabin'].str[0]
test['cabin_letter'] = test['Cabin'].str[0]

# One-hot encoding for categorical features
le = preprocessing.LabelEncoder()
for column in ['Sex', 'Embarked', 'title', 'cabin_letter']:
    le.fit(train[column].append(test[column]))
    train[column] = le.transform(train[column])
    test[column] = le.transform(test[column])

# Split features and target
X = train.drop('Survived', axis=1).values
y = train['Survived'].values

# Train model and make predictions
rf = RandomForestRegressor()
rf.fit(X, y)
predictions = rf.predict(test)

# Output predictions
print(predictions)