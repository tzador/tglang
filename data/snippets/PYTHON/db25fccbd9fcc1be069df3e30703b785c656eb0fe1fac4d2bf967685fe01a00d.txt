# This code snippet demonstrates the implementation of a Binary Search Tree in Python
# Binary Search Tree - A binary tree where the left subtree of a node contains only values less than the node, and the right subtree contains only values greater than the node

# Node class to represent each node in a Binary Search Tree
class Node:
    
    def __init__(self, value):
        self.value = value  # value of the node
        self.left = None   # pointer to the left subtree
        self.right = None  # pointer to the right subtree
        
# BST class to handle all operations on a Binary Search Tree
class BST:
    
    def __init__(self):
        self.root = None  # pointer to the root node of BST
        
    # insert method to add a new node in the BST
    def insert(self, value):
        
        # if BST is empty, set the root node to the new node
        if self.root is None:
            self.root = Node(value)
        else:
            current = self.root  # pointer to traverse through the BST
            
            # loop to find the correct position to insert the new node
            while True:
                
                # if new value is less than the current node value, go to the left subtree
                if value < current.value:
                    
                    # if left subtree is empty, insert the new node as the left child of the current node
                    if current.left is None:
                        current.left = Node(value)
                        break
                        
                    # if left subtree is not empty, continue traversing through the left subtree
                    else:
                        current = current.left
                
                # if new value is greater than the current node value, go to the right subtree
                else:
                    
                    # if right subtree is empty, insert the new node as the right child of the current node
                    if current.right is None:
                        current.right = Node(value)
                        break
                        
                    # if right subtree is not empty, continue traversing through the right subtree
                    else:
                        current = current.right
           
    # search method to check if a given value exists in the BST
    def search(self, value):
        
        # if BST is empty, value does not exist
        if self.root is None:
            return False
        
        else:
            current = self.root  # pointer to traverse through the BST
            
            # loop to find the given value in the BST
            while current is not None:
                
                # if given value matches the current node value, return True
                if value == current.value:
                    return True
                
                # if given value is less than the current node value, go to the left subtree
                elif value < current.value:
                    current = current.left
                    
                # if given value is greater than the current node value, go to the right subtree
                else:
                    current = current.right
                    
            # if value is not found after traversing through the entire BST, return False
            return False
            
# example code to demonstrate the usage of the BST class and its methods
my_bst = BST()  # create an empty BST

# insert nodes with values 5, 10, 3, 1, 7, 13, 9, 12
my_bst.insert(5)
my_bst.insert(10)
my_bst.insert(3)
my_bst.insert(1)
my_bst.insert(7)
my_bst.insert(13)
my_bst.insert(9)
my_bst.insert(12)

# search for values 7, 14 which exist and do not exist in the BST respectively
print(my_bst.search(7))
print(my_bst.search(14))