# Import necessary libraries
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split, GridSearchCV

# Load dataset
dataset = np.loadtxt("diabetes.csv", delimiter=",")

# Separate features and target variable
X = dataset[:, 0:8]
y = dataset[:, 8]

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create logistic regression model
lr_model = LogisticRegression()

# Set hyperparameters to tune
parameters = {'C': np.logspace(-4, 4, 20), 'penalty': ['l1', 'l2'], 'solver': ['liblinear', 'saga']}

# Perform grid search to find best hyperparameter values
grid_lr = GridSearchCV(lr_model, parameters, cv=5)
grid_lr.fit(X_train, y_train)

# View best hyperparameter values and corresponding model performance
print(f"Best C value: {grid_lr.best_params_['C']}")
print(f"Best penalty: {grid_lr.best_params_['penalty']}")
print(f"Best solver: {grid_lr.best_params_['solver']}")
print(f"Training set accuracy: {grid_lr.best_score_}")

# Evaluate model on test set
lr_model.fit(X_train, y_train)
test_acc = lr_model.score(X_test, y_test)
print(f"Test set accuracy: {test_acc}")