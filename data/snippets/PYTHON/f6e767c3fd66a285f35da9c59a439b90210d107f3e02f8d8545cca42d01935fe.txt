# Import necessary libraries
import pandas as pd
import numpy as np
%matplotlib inline

# Define a class for linear regression
class LinearRegression():
    def __init__(self, lr=0.001, n_iter=1000):
        self.lr = lr
        self.n_iter = n_iter
        self.weights = None
        self.bias = None

    # Function for fitting the model
    def fit(self, X, y):
        n_samples, n_features = X.shape

        # Initialize weights and bias
        self.weights = np.zeros(n_features)
        self.bias = 0

        # Gradient descent
        for _ in range(self.n_iter):
            # Predict y
            y_pred = np.dot(X, self.weights) + self.bias

            # Calculate cost
            cost = (1/n_samples) * sum((y - y_pred)**2)

            # Calculate gradients
            dw = (1/n_samples) * np.dot(X.T, (y_pred - y))
            db = (1/n_samples) * sum(y_pred - y)

            # Update weights and bias
            self.weights -= self.lr * dw
            self.bias -= self.lr * db

    # Function for making predictions
    def predict(self, X):
        y_pred = np.dot(X, self.weights) + self.bias
        return y_pred

# Load dataset
df = pd.read_csv('dataset.csv')

# Split dataset into training and testing sets
X_train = df[['feature_1', 'feature_2', 'feature_3']]
y_train = df['target']

# Instantiate and fit model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
X_test = df[['feature_1', 'feature_2', 'feature_3']]
y_pred = model.predict(X_test)

# Print predictions
print(y_pred)