# This code snippet is a recursive binary search algorithm that searches for a target element in a given list.

def binary_search(arr, target, low, high): # defining the function with parameters arr (list), target (element being searched for), low (lower bound of the search interval), high (upper bound of search interval)
    if high >= low: # checking if the upper bound is still greater than or equal to the lower bound
        mid = (high + low) // 2 # finding the median index by dividing the sum of high and low by 2 and flooring it
        if arr[mid] == target: # checking if the element at the median index is equal to the target element
            return mid # if it is, return the index of the target element
        elif arr[mid] < target: # if the element at the median index is less than the target element
            return binary_search(arr, target, mid + 1, high) # recursive call to search in the right half of the list
        else: # if the element at the median index is greater than the target element
            return binary_search(arr, target, low, mid - 1) # recursive call to search in the left half of the list
    else: # if the upper bound is no longer greater than or equal to the lower bound
        return -1 # return -1 to indicate that the target element is not found in the list

# sample list and target element
arr = [1, 2, 3, 4, 5]
target = 3

result = binary_search(arr, target, 0, len(arr) - 1) # calling the binary search function and storing the result in a variable

if result != -1: # if the result is not -1 (meaning element is found in the list)
    print("Element is present at index", result) # print the index of the element
else: # if the result is -1 (meaning element is not found in the list)
    print("Element is not present in array") # print a message stating that the element is not in the list