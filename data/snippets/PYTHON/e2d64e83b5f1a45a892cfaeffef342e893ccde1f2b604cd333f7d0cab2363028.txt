# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

# Define a function to calculate the Euclidean distance between two points
def euclidean_distance(point1, point2):
    return math.sqrt(sum([(a - b) ** 2 for a, b in zip(point1, point2)]))

# Define a class for a k-nearest neighbor (k-NN) classifier
class KNNClassifier:

    # Initialize the KNN classifier with k value
    def __init__(self, k):
        self.k = k

    # Function to fit the training data to the classifier
    def fit(self, X_train, y_train):
        self.X_train = X_train
        self.y_train = y_train

    # Function to make predictions for test data
    def predict(self, X_test):

        # List to store predicted labels
        predictions = []

        # Loop through each test data point
        for test_data in X_test:

            # List to store distances from all training data points
            distances = []

            # Loop through each training data point
            for train_data in self.X_train:

                # Calculate the Euclidean distance between test data and training data point
                distance = euclidean_distance(test_data, train_data)

                # Append the distance to distances list
                distances.append(distance)

            # Get the indices of k-nearest neighbors using numpy argsort function
            indices = np.argsort(distances)[:self.k]

            # List to store labels of k-nearest neighbors
            neighbors = []

            # Loop through each index
            for index in indices:

                # Get the label associated with the index
                neighbor = self.y_train[index]

                # Append the label to neighbors list
                neighbors.append(neighbor)

            # Get the most frequent label among the neighbors using pandas mode function
            predicted_label = pd.Series(neighbors).mode()[0]

            # Add the predicted label to predictions list
            predictions.append(predicted_label)

        # Return the final predictions
        return predictions

# Create an instance of KNN classifier with k value of 3
knn = KNNClassifier(3)

# Fit the training data to the classifier
knn.fit(X_train, y_train)

# Make predictions for test data
predictions = knn.predict(X_test)

# Print the final predictions
print(predictions)