# This function takes in two strings and returns the longest common subsequence
def longest_common_subsequence(string1, string2):
    # Create a 2-dimensional array to store the results of the subproblems
    dp = [[0 for i in range(len(string2) + 1)] for j in range(len(string1) + 1)]

    # Loop through the strings and fill in the array based on matching characters
    for i in range(len(string1) + 1):
        for j in range(len(string2) + 1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif string1[i-1] == string2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])

    # Get the length of the longest common subsequence
    length = dp[len(string1)][len(string2)]

    # Create an array to store the characters of the longest common subsequence
    lcs = [""] * (length + 1)

    # Start from the bottom right corner of the array and backtrack to find the subsequence
    i = len(string1)
    j = len(string2)
    while i > 0 and j > 0:
        if string1[i-1] == string2[j-1]:
            lcs[length-1] = string1[i-1]
            i -= 1
            j -= 1
            length -= 1
        elif dp[i-1][j] > dp[i][j-1]:
            i -= 1
        else:
            j -= 1

    # Return the longest common subsequence as a string
    return "".join(lcs)

# Example usage:
print(longest_common_subsequence("programming", "language")) # output: 'garm'