# This is a function that checks if a given number is prime using the Sieve of Eratosthenes
def is_prime(n):
    # Create a list from 2 to n
    numbers = [i for i in range(2, n+1)]

    # Set initial pointer to the first number in list
    ptr = 0

    # Loop through the entire list and remove composites
    while ptr < len(numbers):
        # Set the current number as prime
        prime = numbers[ptr]

        # Skip over numbers that are already marked as composites
        if prime is None:
            ptr += 1
            continue
        
        # Set pointer to the next multiple of the current prime number
        j = ptr + prime

        # Mark all multiples of the current prime number as composites
        while j < len(numbers):
            numbers[j] = None
            j += prime

        # Move pointer to the next number
        ptr += 1

    # Check if the given number is in the list of primes
    if n in numbers:
        return True
    else:
        return False

# Testing the function
print(is_prime(17)) # Output: True
print(is_prime(21)) # Output: False