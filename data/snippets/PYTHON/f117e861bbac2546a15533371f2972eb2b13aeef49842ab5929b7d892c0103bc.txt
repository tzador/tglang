def merge_sort(array): # function definition
    if len(array) > 1: # base case - checks if array is longer than 1 element
        middle = len(array) // 2 # finds middle index of array
        left = array[:middle] # splits array into left and right halves
        right = array[middle:]

        merge_sort(left) # recursive call on left half
        merge_sort(right) # recursive call on right half

        i = 0 # left half index
        j = 0 # right half index
        k = 0 # sorted array index

        # comparing elements from both halves and putting them in sorted order
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                array[k] = left[i]
                i += 1
            else:
                array[k] = right[j]
                j += 1
            k += 1 # move to next element in sorted array

        # checking if any elements are leftover in left or right halves
        while i < len(left):
            array[k] = left[i] # insert leftover left element at sorted array index
            i += 1
            k += 1

        while j < len(right):
            array[k] = right[j] # insert leftover right element at sorted array index
            j += 1
            k += 1

array = [5, 2, 7, 3, 9, 1] # example input array
print("Original array:", array) # prints original array
merge_sort(array) # calls merge sort function
print("Sorted array:", array) # prints sorted array