# import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# define class for machine learning model
class LinearRegression:
    
    # constructor method
    def __init__(self, learning_rate=0.01, iterations=100):
        self.learning_rate = learning_rate
        self.iterations = iterations
        self.weights = None
        self.bias = None
        
    # method to fit the training data
    def fit(self, X, y):
        
        # initialize weights and bias with random values
        self.weights = np.random.randn(X.shape[1], 1)
        self.bias = np.random.randn()
        
        # perform gradient descent for specified number of iterations
        for i in range(self.iterations):
            
            # calculate predicted y values
            y_pred = np.dot(X, self.weights) + self.bias
            
            # calculate error between predicted and actual y values
            error = y_pred - y
            
            # adjust weights and bias using gradient descent equation
            self.weights -= self.learning_rate * np.dot(X.T, error)
            self.bias -= self.learning_rate * np.sum(error)
        
    # method to make predictions on new data
    def predict(self, X):
        
        # calculate predicted y values
        y_pred = np.dot(X, self.weights) + self.bias
        
        # return predicted y values
        return y_pred

# create instance of LinearRegression class
lr = LinearRegression(learning_rate=0.01, iterations=100)

# fit model on training data
lr.fit(X_train, y_train)

# make predictions on test data
predictions = lr.predict(X_test)