# This is a comment
# Importing necessary packages
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Defining a function to preprocess data
def preprocess_data(data):
    # Removing null values
    cleaned_data = data.dropna()

    # Splitting data into features and target
    X = cleaned_data.drop('target', axis=1)
    y = cleaned_data['target']

    # Splitting data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

    # Standardizing data using numpy
    X_train = (X_train - np.mean(X_train)) / np.std(X_train)
    X_test = (X_test - np.mean(X_test)) / np.std(X_test)

    # Fitting a linear regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Evaluating the model
    score = model.score(X_test, y_test)
    
    # Returning the trained model and evaluation score
    return model, score

# Preprocessing data and storing the returned values
trained_model, evaluation_score = preprocess_data(df)

# Printing the evaluation score
print(f"Evaluation score of the trained model: {evaluation_score}")