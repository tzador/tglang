def merge_sort(arr):

    if len(arr) > 1:
        # split the array into two halves
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        # recursively sort each half
        merge_sort(left_half)
        merge_sort(right_half)

        # merge the sorted halves
        i = 0
        j = 0
        k = 0

        # copy elements from the left and right half into a temporary array
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        # copy remaining elements from the left half into the temporary array
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        # copy remaining elements from the right half into the temporary array
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

        # copy elements from the temporary array back into the original array
        for i in range(len(temp_arr)):
            arr[i] = temp_arr[i]

# create a list to be sorted
values = [9, 5, 8, 3, 6, 1, 0, 2, 4, 7]

# sort the list using merge sort
merge_sort(values)

# print the sorted list
print(values)