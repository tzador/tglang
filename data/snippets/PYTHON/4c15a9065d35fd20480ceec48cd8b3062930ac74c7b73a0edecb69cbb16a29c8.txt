# This is a code snippet that showcases the use of classes and inheritance in Python

# Define a parent class called Vehicle, which has attributes model, color, and year
class Vehicle:
    def __init__(self, model, color, year):
        self.model = model
        self.color = color
        self.year = year
    
    # Create a function to print out the vehicle's information
    def print_info(self):
        print("Model:", self.model)
        print("Color:", self.color)
        print("Year:", self.year)

# Create a child class called Car, which inherits from the Vehicle class
class Car(Vehicle):
    # Add a new attribute called mileage
    def __init__(self, model, color, year, mileage):
        super().__init__(model, color, year)
        self.mileage = mileage
        
    # Override the parent class's print_info function to include mileage
    def print_info(self):
        print("Model:", self.model)
        print("Color:", self.color)
        print("Year:", self.year)
        print("Mileage:", self.mileage)

# Create a child class called Motorcycle, which also inherits from the Vehicle class
class Motorcycle(Vehicle):
    # Add a new attribute called engine size
    def __init__(self, model, color, year, engine_size):
        super().__init__(model, color, year)
        self.engine_size = engine_size

    # Override the parent class's print_info function to include engine size
    def print_info(self):
        print("Model:", self.model)
        print("Color:", self.color)
        print("Year:", self.year)
        print("Engine Size:", self.engine_size)

# Create instances of the Car and Motorcycle classes
car = Car("Toyota", "Blue", 2018, 50000)
motorcycle = Motorcycle("Harley Davidson", "Black", 2020, "1000cc")

# Call the print_info function on the instances to see the output
car.print_info()
motorcycle.print_info()

# Output:
# Model: Toyota
# Color: Blue
# Year: 2018
# Mileage: 50000

# Model: Harley Davidson
# Color: Black
# Year: 2020
# Engine Size: 1000cc