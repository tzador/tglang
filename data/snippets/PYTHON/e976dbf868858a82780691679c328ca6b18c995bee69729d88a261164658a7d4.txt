# This program solves the shortest path problem using Dijkstra's algorithm

# Import necessary libraries
import sys
import heapq

# Create class for graph representation
class Graph:
    # Initialize an empty graph with a given number of nodes
    def __init__(self, V):
        self.V = V
        self.graph = [[] for i in range(V)]

    # Function to add a new edge to the graph
    def add_edge(self, u, v, w):
        self.graph[u].append((v, w))

    # Function to implement Dijkstra's algorithm
    def dijkstra(self, source):
        # Create a priority queue to store vertices
        pq = [(0, source)]
        # Initialize distances to all nodes as infinite
        dist = [sys.maxsize] * self.V
        # Set distance of source node to 0
        dist[source] = 0
        # Loop until all nodes are visited
        while pq:
            # Get vertex with minimum distance from pq
            u = heapq.heappop(pq)[1]
            # Traverse all adjacent nodes of u
            for v, w in self.graph[u]:
                # Update distance if smaller distance is found
                if dist[v] > dist[u] + w:
                    dist[v] = dist[u] + w
                    heapq.heappush(pq, (dist[v], v))
        # Print distance of all nodes from source
        print("Vertex \t Distance from Source")
        for i in range(self.V):
            print("{} \t\t {}".format(i, dist[i]))

# Main function
if __name__ == "__main__":
    # Initialize a directed graph with 5 nodes
    g = Graph(5)
    # Add edges to the graph
    g.add_edge(0, 1, 2)
    g.add_edge(0, 2, 5)
    g.add_edge(1, 2, 3)
    g.add_edge(1, 3, 7)
    g.add_edge(2, 3, 1)
    g.add_edge(2, 4, 4)
    g.add_edge(3, 4, 6)
    # Find shortest paths from all nodes using Dijkstra's algorithm
    g.dijkstra(0)