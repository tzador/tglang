def merge_sort(array):
    """
    This function implements the merge sort algorithm to sort an array of integers in ascending order.
    Input:
        array - the array to be sorted
    Output:
        sorted_array - the sorted array in ascending order
    """

    # Base case: if the array has only one element, it is already sorted
    if len(array) == 1:
        return array

    # Find the middle index of the array
    middle = len(array) // 2

    # Split the array into two subarrays, left and right
    left = array[:middle]
    right = array[middle:]

    # Recursively call merge_sort function on the left and right subarrays
    sorted_left = merge_sort(left)
    sorted_right = merge_sort(right)

    # Initialize a result array to store the sorted elements
    sorted_array = []

    # Merge the sorted left and right subarrays into the result array
    while len(sorted_left) > 0 and len(sorted_right) > 0:
        if sorted_left[0] < sorted_right[0]:
            sorted_array.append(sorted_left.pop(0))
        else:
            sorted_array.append(sorted_right.pop(0))

    # Add any remaining elements from the left or right subarrays to the result array
    sorted_array.extend(sorted_left)
    sorted_array.extend(sorted_right)

    # Return the sorted array
    return sorted_array

# Example usage
array = [3, 7, 1, 9, 5, 2]
print(merge_sort(array))  # Output: [1, 2, 3, 5, 7, 9]