#!/usr/bin/python3
''' This program performs the merge sort algorithm on a given list of numbers '''

def merge_sort(nums):
    ''' Recursive function to divide the list into smaller sublists '''
    
    if len(nums) > 1:
        mid = len(nums)//2
        left_half = nums[:mid]
        right_half = nums[mid:]

        # Recursive calls on each sublist
        merge_sort(left_half)
        merge_sort(right_half)

        # Pointers for each sublist
        i = 0
        j = 0
        # Pointer for main list
        k = 0

        # Merge the two sublists back into one
        while i < len(left_half) and j < len(right_half):
            # If element in left half is smaller, add to main list
            if left_half[i] < right_half[j]:
                nums[k] = left_half[i]
                i += 1
            # If element in right half is smaller, add to main list
            else:
                nums[k] = right_half[j]
                j += 1
            k += 1

        # Add remaining elements from left half
        while i < len(left_half):
            nums[k] = left_half[i]
            i += 1
            k += 1

        # Add remaining elements from right half
        while j < len(right_half):
            nums[k] = right_half[j]
            j += 1
            k += 1

# Function to print the list
def print_list(nums):
    for num in nums:
        print(num, end=' ')
    print()

# Sample list to be sorted
numbers = [5, 2, 7, 1, 3, 9, 4, 6, 8]

# Print unsorted list
print("Unsorted list:")
print_list(numbers)

# Call merge sort function
merge_sort(numbers)

# Print sorted list
print("Sorted list:")
print_list(numbers)