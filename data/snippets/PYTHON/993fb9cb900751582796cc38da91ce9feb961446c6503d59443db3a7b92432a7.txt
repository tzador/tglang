def merge_sort(arr): # define the merge sort function with parameter arr
    if len(arr) > 1: # if the length of arr is greater than 1
        mid = len(arr)//2 # mid is the integer division of the length of arr by 2
        left_half = arr[:mid] # left_half is the first half of arr
        right_half = arr[mid:] # right_half is the second half of arr

        merge_sort(left_half) # recursively call merge_sort on left_half
        merge_sort(right_half) # recursively call merge_sort on right_half

        i = 0 # initialize i to 0
        j = 0 # initialize j to 0
        k = 0 # initialize k to 0

        while i < len(left_half) and j < len(right_half): # while i is less than the length of left_half and j is less than the length of right_half
            if left_half[i] < right_half[j]: # if the element at index i in left_half is less than the element at index j in right_half
                arr[k] = left_half[i] # set the element at index k in arr to the element at index i in left_half
                i += 1 # increment i by 1
            else: # if the element at index i in left_half is greater than or equal to the element at index j in right_half
                arr[k] = right_half[j] # set the element at index k in arr to the element at index j in right_half
                j += 1 # increment j by 1
            k += 1 # increment k by 1

        while i < len(left_half): # while i is less than the length of left_half
            arr[k] = left_half[i] # set the element at index k in arr to the element at index i in left_half
            i += 1 # increment i by 1
            k += 1 # increment k by 1

        while j < len(right_half): # while j is less than the length of right_half
            arr[k] = right_half[j] # set the element at index k in arr to the element at index j in right_half
            j += 1 # increment j by 1
            k += 1 # increment k by 1