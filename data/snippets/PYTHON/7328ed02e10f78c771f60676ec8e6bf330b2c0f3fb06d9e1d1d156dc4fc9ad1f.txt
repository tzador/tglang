# declare a function that takes in two parameters
def merge_sort(arr, ascending=True):
  # if the array is empty, return an empty array
  if len(arr) == 0:
      return []
  
  # if the array has only one element, return the array
  if len(arr) == 1:
      return arr
  
  # find the middle index of the array
  mid = len(arr) // 2
  
  # split the array into two halves
  left_half = arr[:mid]
  right_half = arr[mid:]
  
  # recursively call the function on each half to keep splitting
  left_half = merge_sort(left_half, ascending)
  right_half = merge_sort(right_half, ascending)
  
  # merge the two sorted halves
  sorted_arr = []
  while len(left_half) > 0 and len(right_half) > 0:
      if (ascending and left_half[0] < right_half[0]) or (not ascending and left_half[0] > right_half[0]):
          sorted_arr.append(left_half.pop(0))
      else:
          sorted_arr.append(right_half.pop(0))
          
  # add any remaining elements from the left half
  sorted_arr += left_half
  
  # add any remaining elements from the right half
  sorted_arr += right_half
  
  # return the sorted array
  return sorted_arr