import numpy as np    # import numpy library for scientific computing
from sklearn.model_selection import train_test_split    # import train test split function from sklearn library
from sklearn.linear_model import LinearRegression    # import Linear Regression model from sklearn library
from sklearn.metrics import mean_squared_error    # import mean squared error function from sklearn library

# create dataset with 1000 points
X = np.random.rand(1000, 10)    # generate 1000 random points with 10 features
y = np.random.rand(1000, 1)     # generate random target values for each data point

# split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)    # use train test split function to split data with 80% for training and 20% for testing

# initialize Linear Regression model with default parameters
model = LinearRegression()

# train the model on the training data
model.fit(X_train, y_train)

# make predictions on the testing data
y_pred = model.predict(X_test)

# calculate mean squared error to evaluate the model's performance
mse = mean_squared_error(y_test, y_pred)

# print the model's mean squared error
print(f"Mean Squared Error: {mse:.2f}")