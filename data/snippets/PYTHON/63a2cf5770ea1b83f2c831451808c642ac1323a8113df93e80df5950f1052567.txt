# This code snippet generates a list of prime numbers using the Sieve of Eratosthenes algorithm.

# Function to generate a list of prime numbers up to a given limit
def generate_primes(limit):
    
    # Initialize a list to hold the prime numbers
    primes = []

    # Initialize a boolean list to keep track of composite numbers
    # Indices in this list correspond to numbers from 0 to limit
    # A value of True at a certain index indicates that the corresponding number is composite
    # A value of False indicates that the number is prime
    is_composite = [False] * (limit + 1)

    # Loop from 2 to the limit (since 0 and 1 are not prime numbers)
    for i in range(2, limit + 1):

        # Check if the current number is marked as composite
        if not is_composite[i]:

            # If not, it is a prime number, so add it to the list
            primes.append(i)

            # Mark all multiples of the current number as composite
            # Starting from i squared (since all smaller multiples will have been marked by now)
            # Up to the limit, with a step size of i (to reach all multiples)
            for j in range(i * i, limit + 1, i):
                is_composite[j] = True

    # Return the list of prime numbers
    return primes


# Input the limit from the user
limit = int(input("Enter the limit to generate prime numbers: "))

# Call the generate_primes function and store the returned list of prime numbers in a variable
prime_numbers = generate_primes(limit)

# Print the list of prime numbers
print("The prime numbers up to", limit, "are:", prime_numbers)