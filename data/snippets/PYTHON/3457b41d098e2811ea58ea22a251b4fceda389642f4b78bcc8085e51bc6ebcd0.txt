#This code snippet sorts a list of integers using the merge sort algorithm

def mergeSort(arr):
    #checks if the array has more than one element
    if len(arr) > 1:
        #finds the middle index to split the array into two subarrays
        mid = len(arr) // 2
        
        #splits the array into two subarrays
        left = arr[:mid]
        right = arr[mid:]
        
        #recursively calls the mergeSort function on the left and right subarrays
        mergeSort(left)
        mergeSort(right)
        
        #initializes temporary variables to keep track of indices
        i = j = k = 0
        
        #merges the two subarrays in a sorted order
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1
        
        #checks if any elements are remaining in the left subarray and adds them to the main array
        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1
        
        #checks if any elements are remaining in the right subarray and adds them to the main array
        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

#example input
arr = [5, 2, 7, 1, 8, 3]

#calling the mergeSort function on the input array
mergeSort(arr)

#prints the sorted array
print("Sorted array:", arr)

#output: Sorted array: [1, 2, 3, 5, 7, 8]