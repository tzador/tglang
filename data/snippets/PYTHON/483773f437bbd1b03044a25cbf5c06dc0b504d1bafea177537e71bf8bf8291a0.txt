# This code snippet is a function that calculates the shortest path between two nodes in a graph.
# It uses Dijkstra's algorithm to find the shortest path.

# Import necessary libraries
import heapq
from collections import defaultdict

# Define function for finding shortest path
def dijkstra(graph, start, end):
    
    # Initialize distance dictionary with all nodes having a distance of infinity from the start node
    # except for the start node itself which has a distance of 0
    distances = {vertex: float('inf') for vertex in graph}
    distances[start] = 0
    
    # Initialize a priority queue to keep track of the closest nodes to the start node
    queue = [(0, start)]
    
    # Initialize a dictionary to keep track of the previous nodes in the shortest path for each node
    previous = {vertex: None for vertex in graph}
    
    # Loop while the priority queue is not empty
    while queue:
        
        # Pop the closest node to the start node from the priority queue
        current_distance, current_vertex = heapq.heappop(queue)
        
        # Check if the current vertex has already been visited
        if current_distance > distances[current_vertex]:
            continue
        
        # Loop through the neighboring nodes of the current vertex
        for neighbor, weight in graph[current_vertex].items():
            
            # Calculate the new distance to the neighbor node from the start node
            distance = current_distance + weight
            
            # If the new distance is smaller than the previously recorded distance,
            # update the distance and the previous node for the neighbor node
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous[neighbor] = current_vertex
                
                # Push the new distance and neighbor node into the priority queue
                heapq.heappush(queue, (distance, neighbor))
    
    # Initialize a list to store the shortest path
    shortest_path = []
    
    # Start from the end node and trace back to the start node using the previous node dictionary
    current_vertex = end
    while current_vertex is not None:
        
        # Add the current vertex to the beginning of the shortest path list
        shortest_path.insert(0, current_vertex)
        
        # Move to the previous node in the shortest path
        current_vertex = previous[current_vertex]
    
    # Return the shortest path and the distance from the start node to the end node
    return shortest_path, distances[end]

# Example graph
graph = {
    'A': {'B': 5, 'C': 1},
    'B': {'A': 5, 'C': 2, 'D': 1},
    'C': {'A': 1, 'B': 2, 'D': 4},
    'D': {'B': 1, 'C': 4, 'E': 3},
    'E': {'D': 3, 'F': 2},
    'F': {'E': 2}
}

# Find shortest path from node 'A' to 'F'
shortest_path, distance = dijkstra(graph, 'A', 'F')

# Print shortest path and distance from the start node to the end node
print("Shortest path:", shortest_path)
print("Distance:", distance)