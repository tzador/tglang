class FibonacciHeap:
    ## This class represents a Fibonacci heap data structure
    ## A Fibonacci heap is a collection of trees. Each tree satisfies the minimum heap property,

    ## Initialize the Fibonacci Heap
    def __init__(self):
        ## root - pointer to the root node of the heap
        self.root = None
        ## size - number of nodes in the heap
        self.size = 0

    ## Insert a new key into the heap
    def insert(self, key):
        ## Create new tree with single node
        tree = Node(key)
        ## If heap is empty, set root to the new tree
        if self.isEmpty():
            self.root = tree
        ## If heap is not empty, insert new tree at the root level
        else:
            self.root = self.mergeTrees(tree, self.root)
        ## Increase size by 1
        self.size = self.size + 1

    ## Merge two trees into one
    def mergeTrees(self, tree1, tree2):
        ## If either tree is empty, return the other tree
        if tree1 is None:
            return tree2
        if tree2 is None:
            return tree1
        ## If tree1 has a smaller root, add tree2 as a child of tree1 and return tree1
        if tree1.key < tree2.key:
            tree1.addChild(tree2)
            return tree1
        ## If tree2 has a smaller root, add tree1 as a child of tree2 and return tree2
        else:
            tree2.addChild(tree1)
            return tree2

    ## Find the minimum key in the heap
    def findMin(self):
        ## If heap is empty, return None
        if self.isEmpty():
            return None
        ## Otherwise, return the root node's key
        return self.root.key

    ## Remove the minimum key from the heap
    def removeMin(self):
        ## If heap is empty, return None
        if self.isEmpty():
            return None
        ## Get the root node of the heap
        minNode = self.root
        ## If root has no children, set root to None
        if self.root.child is None:
            self.root = None
        ## Otherwise, remove the root and merge its children into the heap
        else:
            child = self.root.child
            while child.right is not None:
                child = child.right
            child.right = self.root.left
            self.root = self.root.child
            self.mergeTrees(minNode.child, self.root)
        ## Decrease size by 1
        self.size = self.size - 1
        ## Return the minimum key
        return minNode.key

    ## Check if heap is empty
    def isEmpty(self):
        return self.size == 0

    ## Class for each node in the heap
    class Node:
        ## Initialize a node with a key
        def __init__(self, key):
            ## key - value stored in the node
            self.key = key
            ## child - leftmost child of the node
            self.child = None
            ## left - left sibling of the node
            self.left = None
            ## right - right sibling of the node
            self.right = None

        ## Add a child to the node
        def addChild(self, child):
            ## If node has no child, set given child as the child
            if self.child is None:
                self.child = child
                child.left = child
                child.right = child
            ## Otherwise, add given child as the right sibling of the current child
            else:
                child.right = self.child.right
                child.left = self.child
                self.child.right.left = child
                self.child.right = child

        ## Remove the node from its siblings
        def remove(self):
            self.right.left = self.left
            self.left.right = self.right