# This code snippet is for creating a binary search tree using recursion
# Define a class for the binary tree nodes
class Node:
    # Constructor for initializing the node parameters
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# Function to create a binary search tree recursively
def insert(root, data):
    # If the root is None, create a new node with the given data
    if root is None:
        return Node(data)
    # If the data is less than root, insert it in the left subtree
    elif data < root.data:
        root.left = insert(root.left, data)
    # If the data is greater than root, insert it in the right subtree
    else:
        root.right = insert(root.right, data)
    return root

# Function to print the binary tree in inorder traversal
def inorderTraversal(node):
    if node:
        # Print the left subtree
        inorderTraversal(node.left)
        # Print the root node
        print(node.data)
        # Print the right subtree
        inorderTraversal(node.right)

# Driver code to test the functionality
# Create an empty tree
tree = None
# Insert nodes into the tree
tree = insert(tree, 10)
tree = insert(tree, 5)
tree = insert(tree, 15)
tree = insert(tree, 7)
tree = insert(tree, 3)
tree = insert(tree, 12)
tree = insert(tree, 20)
# Print the tree in inorder traversal
inorderTraversal(tree)