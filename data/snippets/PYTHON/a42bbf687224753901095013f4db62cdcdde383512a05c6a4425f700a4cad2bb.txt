# This code snippet generates the Mandelbrot Set fractal in Python

# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from numba import jit

# Create a function for calculating the Mandelbrot set
@jit(nopython=True)  # use numba for faster calculation
def calculate_mandelbrot(real, imaginary, max_iter):
    # Initialize z and c
    c = complex(real, imaginary)
    z = 0+0j
    # Loop through iterations
    for i in range(max_iter):
        # Calculate z^2 + c
        z = z*z + c
        # Check for escape condition
        if abs(z) > 2:
            return i
    # If the point is in the set, return the maximum number of iterations
    return max_iter

# Set the size and resolution of the image
W, H = 800, 600  # width, height
x_left, x_right = -2.5, 1.5  # x range
y_left, y_right = -1.5, 1.5  # y range
max_iter = 1000  # maximum number of iterations

# Create an array of complex numbers based on the image size and resolution
x = np.linspace(x_left, x_right, W)
y = np.linspace(y_left, y_right, H)
complex_grid = x[:,np.newaxis] + y[np.newaxis,:]*1j

# Calculate the Mandelbrot set for each point in the complex grid
mandelbrot_set = np.frompyfunc(calculate_mandelbrot, 3, 1)(complex_grid.real, complex_grid.imag, max_iter)

# Plot the fractal
fig = plt.figure(figsize=(20, 15))
ax = fig.add_subplot(111)
ax.imshow(mandelbrot_set, cmap='hot')
ax.set_axis_off()
plt.show()