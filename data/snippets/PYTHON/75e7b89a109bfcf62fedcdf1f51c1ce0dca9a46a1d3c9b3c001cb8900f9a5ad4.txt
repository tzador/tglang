# This is a complex code snippet in Python that uses decorators and handles exceptions

# Importing necessary modules
import functools
import logging

# Creating a decorator to handle exceptions
def exception_handler(function):
  # Using functools.wraps to preserve the name and docstring of original function
  @functools.wraps(function)
  def inner(*args, **kwargs):
    try:
      # Calling the original function
      return function(*args, **kwargs)
    except Exception as e:
      # Logging the exception
      logging.exception(f"Exception occured in function: {function.__name__}")
      # Raising the exception again
      raise e
  return inner

# Using the decorator to decorate a function
@exception_handler
def divide(a, b):
  # Checking for zero division
  if b == 0:
    raise ZeroDivisionError("Cannot divide by zero!")
  else:
    return a / b

# Calling the decorated function
result = divide(10, 0)
print(result)