# Sequential implementation of merge sort
def mergeSort(arr):
    # Base case - checks if array is of length 1 or less
    if len(arr) <= 1:
        return arr

    # Find middle index
    mid = len(arr) // 2

    # Divide array into left and right halves
    left = arr[:mid]
    right = arr[mid:]

    # Recursive calls to mergeSort function on both halves
    left = mergeSort(left)
    right = mergeSort(right)

    # Merge the two sorted halves
    return merge(left, right)

# Merge function to merge two sorted arrays
def merge(left, right):
    # Initialize empty array to store merged result
    result = []

    # Initialize index variables for left and right arrays
    i = 0
    j = 0

    # Loop through both arrays and compare elements
    while i < len(left) and j < len(right):
        # If element in left array is smaller, add it to result array
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        # If element in right array is smaller, add it to result array
        else:
            result.append(right[j])
            j += 1

    # Add remaining elements from left array, if any
    while i < len(left):
        result.append(left[i])
        i += 1

    # Add remaining elements from right array, if any
    while j < len(right):
        result.append(right[j])
        j += 1

    # Return merged and sorted array
    return result

# Example input array for testing
arr = [9, 2, 7, 3, 5, 1, 4, 6, 8]

# Print sorted array using merge sort
print(mergeSort(arr))

# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]