# This is a complex code snippet in PYTHON
# The snippet calculates the euclidean distance between two points in 3D space

# Importing necessary libraries
import math
from itertools import combinations

# Define a function to calculate distance between two points
def euclidean_distance(p1, p2):
    distance = 0
    # Iterate through all dimensions
    for dim in range(len(p1)):
        # Calculate squared difference between corresponding dimensions of two points
        diff = (p2[dim] - p1[dim])**2
        # Add the squared difference to running total
        distance += diff
    # Take the square root of the running total to get the final distance
    distance = math.sqrt(distance)
    # Return the calculated distance
    return distance

# Define a function to generate all possible combinations of two points from a list of points
def generate_combinations(points):
    # Use itertools.combinations function to generate combinations
    combinations_list = combinations(points, 2)
    # Convert the combinations into a list
    combinations_list = list(combinations_list)
    # Return the combinations list
    return combinations_list

# Define a list of 3D points
points = [(1,2,3), (4,5,6), (7,8,9), (10,11,12)]

# Generate all possible combinations of two points from the list
combinations_list = generate_combinations(points)

# Iterate through the combinations and calculate the euclidean distance between them
for combination in combinations_list:
    # Store the two points in separate variables
    p1 = combination[0]
    p2 = combination[1]
    # Calculate the distance between the two points using the euclidean_distance function
    distance = euclidean_distance(p1, p2)
    # Print the result in a user-friendly manner
    print(f"The distance between points {p1} and {p2} is: {distance}")