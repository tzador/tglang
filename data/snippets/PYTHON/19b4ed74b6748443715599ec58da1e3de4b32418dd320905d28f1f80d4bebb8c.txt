# This code snippet generates a fractal using the Sierpinski Triangle algorithm
# Import necessary modules
import turtle
import math

# Define a function to draw an equilateral triangle
def draw_triangle(side_length, orientation):
    turtle.down()
    # Rotate turtle to specified orientation
    turtle.left(orientation)

    # Iterate through 3 sides to draw the triangle
    for i in range(3):
        # Move turtle forward by specified side length
        turtle.forward(side_length)
        # Rotate turtle by 120 degrees
        turtle.left(120)

# Define a recursive function to draw the fractal
def draw_fractal(level, side_length, orientation):
    # Check if level is equal to 1
    if level == 1:
        # Draw a single triangle using the draw_triangle function
        draw_triangle(side_length, orientation)

    else:
        # Calculate the length of each side for the smaller triangles
        smaller_side_length = side_length / 2
        # Call draw_fractal recursively for the top triangle
        draw_fractal(level - 1, smaller_side_length, orientation)
        # Call draw_fractal recursively for the bottom left triangle
        draw_fractal(level - 1, smaller_side_length, orientation + 120)
        # Call draw_fractal recursively for the bottom right triangle
        draw_fractal(level - 1, smaller_side_length, orientation - 120)

# Set the starting position and orientation of the turtle
turtle.penup()
turtle.goto(0, 200)
turtle.setheading(180)

# Calculate the number of levels for the fractal to have a desired size
num_levels = math.floor(math.log(150 / math.sqrt(3), 2))

# Call the draw_fractal function with the calculated number of levels
draw_fractal(num_levels, 200, 0)

# Keep turtle window open until user clicks on it
turtle.exitonclick()