# Importing necessary libraries
import pandas as pd # for data manipulation and analysis
import numpy as np # for scientific computing
import matplotlib.pyplot as plt # for data visualization
from sklearn.linear_model import LinearRegression # for linear regression model
from sklearn.model_selection import train_test_split # for splitting data into train and test sets

# Loading dataset
data = pd.read_csv('dataset.csv') # replace dataset.csv with the actual file name

# Data preprocessing
data.dropna(inplace=True) # drop rows with missing values
X = data[['feature1', 'feature2', 'feature3']] # select features for prediction
y = data['target'] # select target variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # split data into train and test sets

# Creating and training the model
model = LinearRegression() # initializing linear regression model
model.fit(X_train, y_train) # training the model on the training data

# Evaluating the model
r_squared = model.score(X_test, y_test) # calculate R-squared value on test set
print('R-squared value:', r_squared) # print R-squared value

# Making predictions
prediction = model.predict(X_test) # make predictions on the test set
print('Predicted values:', prediction) # print predicted values

# Visualizing the data and model
plt.scatter(X_test['feature1'], y_test) # plot scatter plot of feature1 and target variable
plt.plot(X_test['feature1'], prediction, color='red') # plot predicted values for feature1 in red
plt.xlabel('Feature 1') # add x label
plt.ylabel('Target') # add y label
plt.title('Linear Regression') # add title
plt.show() # show the plot