def iterative_merge_sort(array):  # defines the function
    current_size = 1  # initializes current_size variable to 1
    while current_size < len(array) - 1:  # checks if current_size is less than length of array
        left = 0  # initializes left variable to 0
        while left < len(array) - 1:  # checks if left is less than length of array
            mid = min((left + current_size - 1), (len(array) - 1))  # calculates mid index using current_size
            right = ((2 * current_size + left - 1, len(array) - 1)[2 * current_size + left - 1 > len(array) - 1])  # calculates end index using current_size and left
            merge(array, left, mid, right)  # calls the merge function with the specified indexes
            left = left + current_size * 2  # increments left by current_size multiplied by 2
        current_size = 2 * current_size  # increments current_size by 2 multiplied by current_size


def merge(arr, l, m, r):  # defines the merge function
    n1 = m - l + 1  # calculates size of first subarray
    n2 = r - m  # calculates size of second subarray
    # create temp arrays
    L = [0] * n1  
    R = [0] * n2
    # Copy data to temp arrays L[] and R[]
    for i in range(n1):  
        L[i] = arr[l + i]  
    for j in range(n2):  
        R[j] = arr[m + 1 + j]
    # Merge the temp arrays back into arr[l..r]
    i = 0  # initial index of first subarray
    j = 0  # initial index of second subarray
    k = l  # initial index of merged subarray
    while i < n1 and j < n2:
        if L[i] <= R[j]:  # compares elements from left and right subarrays
            arr[k] = L[i]  # swaps the element at k with the element at i
            i += 1  # increments i by 1
        else:  
            arr[k] = R[j]  # swaps the element at k with the element at j
            j += 1  # increments j by 1
        k += 1  # increments k by 1
    # Copy the remaining elements of L[], if there are any 
    while i < n1:
        arr[k] = L[i]  
        i += 1  
        k += 1
    # Copy the remaining elements of R[], if there are any 
    while j < n2:
        arr[k] = R[j]  
        j += 1  
        k += 1