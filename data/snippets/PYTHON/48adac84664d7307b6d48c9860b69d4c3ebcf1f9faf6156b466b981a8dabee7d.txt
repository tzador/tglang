# Import necessary libraries
import numpy as np
import pandas as pd

# Create a class for a neural network
class NeuralNetwork:
    # Initializer
    def __init__(self, input_nodes, hidden_nodes, output_nodes):
        # Set number of nodes in each layer
        self.input_nodes = input_nodes
        self.hidden_nodes = hidden_nodes
        self.output_nodes = output_nodes
        
        # Initialize weights between input and hidden layers with random values from a normal distribution
        self.weights_input_hidden = np.random.normal(0.0, self.input_nodes**-0.5, (self.input_nodes, self.hidden_nodes))
        
        # Initialize weights between hidden and output layers with random values from a normal distribution
        self.weights_hidden_output = np.random.normal(0.0, self.hidden_nodes**-0.5, (self.hidden_nodes, self.output_nodes))
        
        # Define sigmoid function for activation
        self.activation_function = lambda x: 1 / (1 + np.exp(-x))
    
    # Define forward pass method to make predictions
    def forward_pass(self, inputs):
        # Convert input list into a 2D array
        inputs = np.array(inputs).reshape(1, self.input_nodes)
        
        # Calculate dot product between input layer and hidden layer weights
        hidden_inputs = np.dot(inputs, self.weights_input_hidden)
        
        # Calculate activations of hidden layer nodes by performing sigmoid function on hidden_inputs
        hidden_outputs = self.activation_function(hidden_inputs)
        
        # Calculate dot product between hidden layer and output layer weights
        final_inputs = np.dot(hidden_outputs, self.weights_hidden_output)
        
        # Calculate output predictions by performing sigmoid function on final_inputs
        final_outputs = self.activation_function(final_inputs)
        
        # Return final output predictions
        return final_outputs
      
# Initialize a neural network with 3 input nodes, 2 hidden nodes, and 1 output node
nn = NeuralNetwork(3, 2, 1)

# Generate random input data
inputs = np.random.rand(3)

# Make a forward pass through the neural network and get output predictions
predictions = nn.forward_pass(inputs)

# Print output predictions
print("Output Predictions:", predictions)