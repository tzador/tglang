class Graph:
    """
    This class represents a directed graph.
    """

    def __init__(self):
        self.adjacency_list = {}

    def add_vertex(self, vertex):
        """
        Adds a new vertex to the graph.
        Time complexity: O(1)
        Space complexity: O(1)
        
        Parameters:
        vertex (any): vertex to be added to the graph

        Returns:
        None
        """

        if vertex not in self.adjacency_list:
            self.adjacency_list[vertex] = []

    def add_edge(self, vertex1, vertex2):
        """
        Adds an edge between two vertices in the graph.
        Time complexity: O(1)
        Space complexity: O(1)

        Parameters:
        vertex1 (any): first vertex of the edge
        vertex2 (any): second vertex of the edge

        Returns:
        None
        """

        if vertex1 not in self.adjacency_list:
            self.add_vertex(vertex1)
        if vertex2 not in self.adjacency_list:
            self.add_vertex(vertex2)

        self.adjacency_list[vertex1].append(vertex2)

    def remove_vertex(self, vertex):
        """
        Removes a vertex from the graph.
        Time complexity: O(V + E)
        Space complexity: O(V)

        Parameters:
        vertex (any): vertex to be removed from the graph

        Returns:
        None
        """

        for v in self.adjacency_list:
            if vertex in self.adjacency_list[v]:
                self.adjacency_list[v].remove(vertex)
        self.adjacency_list.pop(vertex)

    def remove_edge(self, vertex1, vertex2):
        """
        Removes an edge between two vertices in the graph.
        Time complexity: O(V)
        Space complexity: O(1)

        Parameters:
        vertex1 (any): first vertex of the edge
        vertex2 (any): second vertex of the edge

        Returns:
        None
        """

        self.adjacency_list[vertex1].remove(vertex2)

    def dfs_recursive(self, start):
        """
        Performs depth-first search recursively on the graph.
        Time complexity: O(V + E)
        Space complexity: O(V)

        Parameters:
        start (any): starting vertex for the search

        Returns:
        order (list): list of visited vertices in order
        """

        order = []
        visited = {}

        def dfs(vertex):
            nonlocal order

            if not vertex:
                return

            order.append(vertex)
            visited[vertex] = True

            for v in self.adjacency_list[vertex]:
                if v not in visited:
                    dfs(v)

        dfs(start)

        return order