import math

# Define a function that finds the root of a given polynomial using the secant method
def secant_method(coefficients, initial_guesses, max_iterations=100, tolerance=1e-6):
    # coefficients: list of coefficients of the polynomial (from highest degree to lowest degree)
    # initial_guesses: list of two initial guesses for the root
    # max_iterations: maximum number of iterations to perform
    # tolerance: maximum value of difference between two consecutive guesses for the root

    # Initialize variables
    x0 = initial_guesses[0]  # First initial guess
    x1 = initial_guesses[1]  # Second initial guess
    x2 = 0  # Temporary variable for storing the next root approximation
    iterations = 0  # Counter for number of iterations
    error = 1  # Variable for tracking error between consecutive root approximations

    # Main loop
    while error > tolerance and iterations < max_iterations:
        y0 = 0  # Temporary variable for storing the value of polynomial at x0
        y1 = 0  # Temporary variable for storing the value of polynomial at x1
        for i, coeff in enumerate(coefficients):
            y0 += coeff * x0 ** (len(coefficients) - i - 1)  # Evaluate the polynomial at x0
            y1 += coeff * x1 ** (len(coefficients) - i - 1)  # Evaluate the polynomial at x1

        # Calculate the next root approximation using the secant formula
        x2 = x1 - y1 * (x1 - x0) / (y1 - y0)

        # Calculate the error between the current and the next root approximation
        error = abs(x2 - x1)

        # Update variables for the next iteration
        x0 = x1
        x1 = x2
        iterations += 1

    # Return the final root approximation
    return x2

# Example usage
coefficients = [1, -2, -3]  # Polynomial: x^2 - 2x - 3
initial_guesses = [3, 4]  # Initial guesses: 3, 4
root = secant_method(coefficients, initial_guesses)  # Find the root
print("The root is:", root)  # Output the root