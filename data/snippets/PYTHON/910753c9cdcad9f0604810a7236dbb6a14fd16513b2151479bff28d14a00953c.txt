class Node:
    """
    A node class for a singly linked list.
    """
    def __init__(self, data=None, next=None):
        """
        Constructor for the Node class.
        Parameters:
        data (any): the data to be stored in the node
        next (Node): pointer to the next node in the list
        """
        self.data = data
        self.next = next
    
    def get_data(self):
        """
        Returns the data stored in the node.
        """
        return self.data
    
    def set_data(self, data):
        """
        Sets the data stored in the node.
        Parameters:
        data (any): the data to be stored in the node
        """
        self.data = data
    
    def get_next(self):
        """
        Returns the next node in the list.
        """
        return self.next
    
    def set_next(self, next):
        """
        Sets the next node in the list.
        Parameters:
        next (Node): the new next node in the list
        """
        self.next = next

class SinglyLinkedList:
    """
    A class representing a singly linked list.
    """
    def __init__(self):
        """
        Constructor for the SinglyLinkedList class.
        """
        self.head = None
        self.size = 0
    
    def add(self, data):
        """
        Adds a new node at the beginning of the list.
        Parameters:
        data (any): the data to be stored in the new node
        """
        new_node = Node(data, self.head)
        self.head = new_node
        self.size += 1
    
    def size(self):
        """
        Returns the size of the list.
        """
        return self.size
    
    def search(self, data):
        """
        Searches for a node with the given data in the list.
        Parameters:
        data (any): the data to be searched for
        Returns:
        Node or None: the node with the given data or None if not found
        """
        current = self.head
        while current:
            if current.get_data() == data:
                return current
            current = current.get_next()
        return None
    
    def remove(self, data):
        """
        Removes a node with the given data from the list.
        Parameters:
        data (any): the data to be removed
        Returns:
        boolean: True if the node is found and removed, False otherwise
        """
        previous = None
        current = self.head
        while current:
            if current.get_data() == data:
                if previous:
                    previous.set_next(current.get_next())
                else:
                    self.head = current.get_next()
                self.size -= 1
                return True
            previous = current
            current = current.get_next()
        return False