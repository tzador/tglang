"""
A dynamic programming solution for the longest common substring problem

def find_longest_common_substring(s1, s2):
    """
    Finds the longest common substring between two strings using dynamic programming.

    Args:
        s1 (str): The first string
        s2 (str): The second string

    Returns:
        str: The longest common substring
    """
    # initialize a table to store the lengths of longest common substrings
    # for subproblems
    dp = [[0 for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]

    # variables to track the end index of the longest common substring
    end_idx = 0
    max_len = 0

    # loop through each character in s1
    for i in range(1, len(s1) + 1):
        # loop through each character in s2
        for j in range(1, len(s2) + 1):
            # if the characters match, increase the length of the longest common substring
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
                # update the end index and maximum length if a longer substring is found
                if dp[i][j] > max_len:
                    max_len = dp[i][j]
                    end_idx = i

    # return the longest common substring by slicing s1 from the end index
    return s1[end_idx - max_len: end_idx]

# Example
s1 = "programminglanguage"
s2 = "grammarsnippet"
print(find_longest_common_substring(s1, s2))

# Output: gram