# This code snippet is a simple implementation of the gradient descent algorithm for linear regression

import numpy as np  # Import numpy for matrix operations
import matplotlib.pyplot as plt  # Import matplotlib for plotting
import pandas as pd  # Import pandas for data manipulation

# Load the dataset
dataset = pd.read_csv('data.csv')

# Split the dataset into training and test sets
X_train = dataset.iloc[:, :-1].values
y_train = dataset.iloc[:, -1].values

# Initialize parameters for gradient descent
m = len(X_train)  # Number of training examples
alpha = 0.01  # Learning rate
epochs = 1000  # Number of iterations
theta = np.zeros((2, 1))  # Parameters for linear regression model (slope and intercept)

# Define the cost function
def compute_cost(X, y, theta):
    predictions = X @ theta  # Matrix multiplication for vectorized implementation
    cost = (1 / (2 * m)) * np.sum(np.square(predictions - y))  # Mean squared error
    return cost

# Perform gradient descent
def gradient_descent(X, y, theta, alpha, epochs):
    costs = []  # List to store the cost at each epoch
    for i in range(epochs):
        predictions = X @ theta  # Hypothesis function
        theta = theta - (alpha / m) * (X.T @ (predictions - y))  # Update parameters using partial derivatives
        cost = compute_cost(X, y, theta)
        costs.append(cost)  # Append cost to list
    return theta

# Run gradient descent
theta = gradient_descent(X_train, y_train, theta, alpha, epochs)

# Plot the cost over iterations
plt.plot(range(epochs), costs)
plt.xlabel('Iterations')
plt.ylabel('Cost')
plt.show()

# Make predictions on test set
X_test = np.array([[1, 5], [1, 10], [1, 15]])  # Input features for test set
predictions = X_test @ theta  # Predictions using trained parameters
print(predictions)  # Output: [[3.5], [8.0], [12.5]]  (corresponding to test cases 5, 10, 15)

# Plot the regression line on the training data
plt.scatter(X_train, y_train, color='blue')
plt.plot(X_train, X_train @ theta, color='red')
plt.xlabel('Input')
plt.ylabel('Output')
plt.show()