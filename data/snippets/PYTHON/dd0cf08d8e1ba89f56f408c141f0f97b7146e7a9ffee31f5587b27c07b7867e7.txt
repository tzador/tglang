# Defining a function named 'merge_sort' which takes in a list as its parameter
def merge_sort(input_list):
    
    # Checking if the length of the input list is greater than 1
    if len(input_list) > 1:
        
        # Finding the midpoint of the list
        mid = len(input_list) // 2
        
        # Dividing the list into two sublists
        left_half = input_list[:mid]
        right_half = input_list[mid:]
        
        # Recursively calling 'merge_sort' function on the two sublists
        merge_sort(left_half)
        merge_sort(right_half)
        
        # Initializing variables i, j, and k for indexing purposes
        i = 0 # for left_half
        j = 0 # for right_half
        k = 0 # for input_list
        
        # Merging the sublists while sorting the elements
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                input_list[k] = left_half[i]
                i += 1
            else:
                input_list[k] = right_half[j]
                j += 1
            k += 1
        
        # Checking if there are any remaining elements in the left_half
        while i < len(left_half):
            input_list[k] = left_half[i]
            i += 1
            k += 1
        
        # Checking if there are any remaining elements in the right_half
        while j < len(right_half):
            input_list[k] = right_half[j]
            j += 1
            k += 1

# Declaring a list of numbers to be sorted
numbers = [5, 2, 8, 4, 10, 3, 1, 6]

# Calling the 'merge_sort' function on the list
merge_sort(numbers)

# Printing the sorted list
print(numbers)