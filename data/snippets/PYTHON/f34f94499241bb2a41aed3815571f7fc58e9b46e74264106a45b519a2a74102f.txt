# This is a code snippet that generates a list of prime numbers using the Sieve of Eratosthenes algorithm
# This algorithm works by eliminating all multiples of each prime number starting from 2
# and iterating through all numbers up to a given limit
# The remaining numbers in the list will be prime numbers

# Function to generate a list of prime numbers up to a given limit
def sieve_of_eratosthenes(limit):
    # Create a list of boolean values for all numbers up to the limit
    is_prime = [True for i in range(limit + 1)]
    # Set the first two values (0 and 1) to False as they are not prime numbers
    is_prime[0] = False
    is_prime[1] = False

    # Set the prime number counter to 2, as it is the first prime number
    prime_num = 2

    # While the squared value of the current prime number is less than or equal to the limit
    while (prime_num * prime_num) <= limit:
        # If the current number is prime (True)
        if is_prime[prime_num]:
            # Update all multiples of the current prime number to False
            for i in range(prime_num * prime_num, limit + 1, prime_num):
                is_prime[i] = False
        # Increase the prime number counter
        prime_num += 1

    # Create an empty list to store the prime numbers
    primes = []

    # Loop through all numbers up to the limit
    for i in range(limit + 1):
        # If the current number is prime (True), add it to the list of primes
        if is_prime[i]:
            primes.append(i)

    # Return the list of prime numbers
    return primes

# Call the function and print the result
print(sieve_of_eratosthenes(100))
# Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]