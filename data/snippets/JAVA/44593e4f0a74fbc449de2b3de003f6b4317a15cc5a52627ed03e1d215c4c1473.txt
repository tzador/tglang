/**
 * This is a multithreaded Java program that performs merge sort on an array of integers.
 */

public class MergeSort {

    /**
     * The main method creates an instance of MergeSort and calls the sort method.
     */
    public static void main(String[] args) {
        int[] arr = {5, 3, 6, 2, 1, 8, 4, 7}; //array to be sorted
        MergeSort ms = new MergeSort(); //creating instance of MergeSort class
        ms.sort(arr, 0, arr.length - 1); //calling sort method
    }

    /**
     * The sort method recursively divides the array and merges them in sorted order.
     *
     * @param arr   the array to be sorted
     * @param start the starting index of the array
     * @param end   the ending index of the array
     */
    public void sort(int[] arr, int start, int end) {
        if (start < end) {
            int mid = (start + end) / 2; //finding the mid index of the array
            sort(arr, start, mid); //recursively sorting first half of array
            sort(arr, mid + 1, end); //recursively sorting second half of array
            merge(arr, start, mid, end); //merging the two sorted halves
        }
    }

    /**
     * The merge method merges the two sorted halves of the array in sorted order.
     *
     * @param arr   the array to be merged
     * @param start the starting index of the array
     * @param mid   the mid index of the array
     * @param end   the ending index of the array
     */
    public void merge(int[] arr, int start, int mid, int end) {
        int n1 = mid - start + 1; //length of first half of the array
        int n2 = end - mid; //length of second half of the array

        //creating temporary arrays to store the two halves
        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];

        //copying elements from original array to temporary arrays
        for (int i = 0; i < n1; i++) {
            leftArr[i] = arr[start + i];
        }
        for (int i = 0; i < n2; i++) {
            rightArr[i] = arr[mid + 1 + i];
        }

        int i = 0; //index for first half of array
        int j = 0; //index for second half of array
        int k = start; //index for original array

        //comparing elements from both halves and placing them in original array in sorted order
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        //copying remaining elements from first half, if any
        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        //copying remaining elements from second half, if any
        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }
}