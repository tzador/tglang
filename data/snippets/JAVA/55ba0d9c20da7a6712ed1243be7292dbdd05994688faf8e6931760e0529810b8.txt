/**
 * This class represents a Binary Search Tree data structure.
 * It contains methods for insertion, deletion, search and traversal of the tree.
 */
public class BinarySearchTree {

    /**
     * This inner class represents a node in the Binary Search Tree.
     * It contains a value, and references to its left and right child nodes.
     */
    private class Node {
        private int value;
        private Node leftChild;
        private Node rightChild;

        /**
         * Constructor to create a new Node with the given value.
         * @param value The value to be stored in this node.
         */
        public Node(int value) {
            this.value = value;
            leftChild = null;
            rightChild = null;
        }
    }

    private Node root;

    /**
     * Constructor to create an empty Binary Search Tree.
     */
    public BinarySearchTree() {
        root = null;
    }

    /**
     * Method to insert a new value into the Binary Search Tree.
     * @param value The value to be inserted.
     */
    public void insert(int value) {
        // If the tree is empty, create a root node with the given value.
        if (root == null) {
            root = new Node(value);
            return;
        }

        // Otherwise, find the suitable position for the new value in the tree.
        Node current = root;
        while (true) {
            if (value < current.value) {
                // If the new value is less than the current node's value, go to its left child.
                if (current.leftChild == null) {
                    // If the left child is null, create a new node with the given value.
                    current.leftChild = new Node(value);
                    return;
                } else {
                    // If the left child is not null, move to it and continue searching.
                    current = current.leftChild;
                }
            } else if (value > current.value) {
                // If the new value is greater than the current node's value, go to its right child.
                if (current.rightChild == null) {
                    // If the right child is null, create a new node with the given value.
                    current.rightChild = new Node(value);
                    return;
                } else {
                    // If the right child is not null, move to it and continue searching.
                    current = current.rightChild;
                }
            } else {
                // If the new value is equal to the current node's value, do nothing.
                return;
            }
        }
    }

    /**
     * Method to delete a given value from the Binary Search Tree.
     * @param value The value to be deleted.
     */
    public void delete(int value) {
        // If the tree is empty, return.
        if (root == null) {
            return;
        }

        // Otherwise, find the node containing the given value.
        Node current = root;
        Node parent = null;
        while (true) {
            if (value == current.value) {
                // If the current node contains the given value, break out of the loop.
                break;
            } else if (value < current.value) {
                // If the given value is less than the current node's value, go to its left child.
                if (current.leftChild == null) {
                    // If the left child is null, the given value does not exist in the tree.
                    return;
                } else {
                    // If the left child is not null, move to it and continue searching.
                    parent = current;
                    current = current.leftChild;
                }
            } else {
                // If the given value is greater than the current node's value, go to its right child.
                if (current.rightChild == null) {
                    // If the right child is null, the given value does not exist in the tree.
                    return;
                } else {
                    // If the right child is not null, move to it and continue searching.
                    parent = current;
                    current = current.rightChild;
                }
            }
        }

        // After finding the node containing the given value, perform the deletion.
        if (current.leftChild == null && current.rightChild == null) {
            // If the node has no children, simply set its parent's reference to it to null.
            if (parent == null) {
                // If the node is the root node, set the root reference to null.
                root = null;
            } else if (current == parent.leftChild) {
                // If the node is its parent's left child, set the parent's left child reference to null.
                parent.leftChild = null;
            } else {
                // If the node is its parent's right child, set the parent's right child reference to null.
                parent.rightChild = null;
            }
        } else if (current.leftChild == null) {
            // If the node has only a right child, set its parent's reference to it to the right child.
            if (parent == null) {
                // If the node is the root node, set the root reference to its right child.
                root = current.rightChild;
            } else if (current == parent.leftChild) {
                // If the node is its parent's left child, set the parent's left child reference to its right child.
                parent.leftChild = current.rightChild;
            } else {
                // If the node is its parent's right child, set the parent's right child reference to its right child.
                parent.rightChild = current.rightChild;
            }
        } else if (current.rightChild == null) {
            // If the node has only a left child, set its parent's reference to it to the left child.
            if (parent == null) {
                // If the node is the root node, set the root reference to its left child.
                root = current.leftChild;
            } else if (current == parent.leftChild) {
                // If the node is its parent's left child, set the parent's left child reference to its left child.
                parent.leftChild = current.leftChild;
            } else {
                // If the node is its parent's right child, set the parent's right child reference to its left child.
                parent.rightChild = current.leftChild;
            }
        } else {
            // If the node has both left and right child, we need to find the successor node.
            // The successor node is the node with the smallest value in the right subtree of the current node.
            Node successor = current.rightChild;
            Node successorParent = successor;

            // Keep moving to the left child until we reach the successor node.
            while (successor.leftChild != null) {
                successorParent = successor;
                successor = successor.leftChild;
            }

            // Replace the current node's value with the successor node's value.
            // Note that the successor node can't have a left child, since it is the node in the leftmost position of the right subtree.
            current.value = successor.value;

            // Now we need to delete the successor node.
            if (successor == successorParent.leftChild) {
                // If the successor node is the left child of its parent,
                // set the parent's left child reference to null.
                successorParent.leftChild = null;
            } else {
                // If the successor node is the right child of its parent,
                // set the parent's right child reference to null.
                successorParent.rightChild = null;
            }
        }
    }

    /**
     * Method to search for a given value in the Binary Search Tree.
     * @param value The value to search for.
     * @return True if the value exists in the tree, false otherwise.
     */
    public boolean search(int value) {
        // If the tree is empty, return false.
        if (root == null) {
            return false;
        }

        // Otherwise, find the node containing the given value.
        Node current = root;
        while (true) {
            if (value == current.value) {
                // If the current node contains the given value, return true.
                return true;
            } else if (value < current.value) {
                // If the given value is less than the current node's value, go to its left child.
                if (current.leftChild == null) {
                    // If the left child is null, the given value does not exist in the tree.
                    return false;
                } else {
                    // If the left child is not null, move to it and continue searching.
                    current = current.leftChild;
                }
            } else {
                // If the given value is greater than the current node's value, go to its right child.
                if (current.rightChild == null) {
                    // If the right child is null, the given value does not exist in the tree.
                    return false;
                } else {
                    // If the right child is not null, move to it and continue searching.
                    current = current.rightChild;
                }
            }
        }
    }

    /**
     * Method to print the values of the Binary Search Tree using the in-order traversal.
     * @param node The root node of the subtree to be traversed.
     */
    public void printInOrder(Node node) {
        // Perform the in-order traversal recursively.
        if (node != null) {
            // First, print the values of the left subtree.
            printInOrder(node.leftChild);
            
            // Then, print the value of the current node.
            System.out.print(node.value + " ");
            
            // Finally, print the values of the right subtree.
            printInOrder(node.rightChild);
        }
    }

    /**
     * Main method to test the BinarySearchTree class.
     */
    public static void main(String[] args) {
        // Create a new Binary Search Tree.
        BinarySearchTree tree = new BinarySearchTree();

        // Insert some values into the tree.
        tree.insert(5);
        tree.insert(2);
        tree.insert(8);
        tree.insert(1);
        tree.insert(3);
        tree.insert(7);
        tree.insert(9);

        // Print the values of the tree using in-order traversal.
        System.out.println("In-order traversal:");
        tree.printInOrder(tree.root);

        // Delete a value from the tree.
        tree.delete(5);

        // Print the values of the tree again using in-order traversal.
        System.out.println("\nIn-order traversal after deletion:");
        tree.printInOrder(tree.root);

        // Search for a value in the tree.
        System.out.println("\nSearching for value 3: " + tree.search(3));
        System.out.println("Searching for value 6: " + tree.search(6));
    }
}