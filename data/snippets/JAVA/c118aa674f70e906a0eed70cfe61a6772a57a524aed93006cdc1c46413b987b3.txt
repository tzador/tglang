/*
This is a complex code snippet in JAVA
It performs basic matrix operations on a 2D array
*/

//Initialize the matrix
int[][] matrix = {{1,2,3}, {4,5,6}, {7,8,9}};

//Print the original matrix
System.out.println("Original Matrix:");
for(int i=0; i<matrix.length; i++){
    for(int j=0; j<matrix[0].length; j++){
        System.out.print(matrix[i][j] + " ");
    }
    System.out.println();
}

//Calculate and print the transpose of the matrix
int[][] transpose = new int[matrix[0].length][matrix.length];
System.out.println("Transpose Matrix:");
for(int i=0; i<matrix[0].length; i++){
    for(int j=0; j<matrix.length; j++){
        transpose[i][j] = matrix[j][i];
        System.out.print(transpose[i][j] + " ");
    }
    System.out.println();
}

//Calculate and print the inverse of the matrix
int det = matrix[0][0] * ((matrix[1][1] * matrix[2][2]) - (matrix[1][2] * matrix[2][1])) - matrix[0][1] * ((matrix[1][0] * matrix[2][2]) - (matrix[1][2] * matrix[2][0])) + matrix[0][2] * ((matrix[1][0] * matrix[2][1]) - (matrix[1][1] * matrix[2][0]));

if(det == 0){
    System.out.println("The matrix is not invertible");
}
else{
    int[][] inverse = new int[3][3];
    int a = matrix[0][0];
    int b = matrix[0][1] * -1;
    int c = matrix[0][2];
    int d = matrix[1][0] * -1;
    int e = matrix[1][1];
    int f = matrix[1][2] * -1;
    int g = matrix[2][0];
    int h = matrix[2][1] * -1;
    int i = matrix[2][2];
    
    inverse[0][0] = (e * i) - (f * h);
    inverse[0][1] = (d * i) - (f * g);
    inverse[0][2] = (d * h) - (e * g);
    inverse[1][0] = (b * i) - (c * h);
    inverse[1][1] = (a * i) - (c * g);
    inverse[1][2] = (a * h) - (b * g);
    inverse[2][0] = (b * f) - (c * e);
    inverse[2][1] = (a * f) - (c * d);
    inverse[2][2] = (a * e) - (b * d);
    
    System.out.println("Inverse Matrix:");
    for(int i=0; i<inverse.length; i++){
        for(int j=0; j<inverse[0].length; j++){
            System.out.print((double) inverse[i][j] / det + " ");
        }
        System.out.println();
    }
}