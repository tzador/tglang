import java.util.*;

/**
 * This class represents a generic Binary Tree data structure.
 * It contains methods for constructing, traversing and modifying the tree.
 * @param <T> the data type of the nodes in the tree
 */
public class BinaryTree<T> {

    // Inner class representing a single node in the tree
    private static class Node<T> {
        T data;
        Node<T> leftChild;
        Node<T> rightChild;

        public Node(T data) {
            this.data = data;
            this.leftChild = null;
            this.rightChild = null;
        }
    }

    // Root of the tree
    Node<T> root;

    /**
     * Constructs an empty Binary Tree
     */
    public BinaryTree() {
        this.root = null;
    }

    /**
     * Constructs a Binary Tree with the given data as the root node
     * @param data the data to be stored in the root node
     */
    public BinaryTree(T data) {
        this.root = new Node<T>(data);
    }

    /**
     * Inserts a new node with the given data as the left child of a given parent node
     * @param parent the parent node to which the new node will be added as the left child
     * @param data the data to be stored in the new node
     */
    public void insertLeft(Node<T> parent, T data) {
        if (parent.leftChild == null) {
            parent.leftChild = new Node<T>(data);
        } else {
            System.out.println("Node already has a left child.");
        }
    }

    /**
     * Inserts a new node with the given data as the right child of a given parent node
     * @param parent the parent node to which the new node will be added as the right child
     * @param data the data to be stored in the new node
     */
    public void insertRight(Node<T> parent, T data) {
        if (parent.rightChild == null) {
            parent.rightChild = new Node<T>(data);
        } else {
            System.out.println("Node already has a right child.");
        }
    }

    /**
     * Returns the height of the tree starting from the root node
     * @return the height of the tree
     */
    public int getHeight() {
        if (this.root == null) {
            return 0;
        }
        return this.getHeightHelper(this.root);
    }

    /**
     * Helper method for finding the height of the tree
     * @param currentNode the current node being visited
     * @return the height of the tree starting from the current node
     */
    private int getHeightHelper(Node<T> currentNode) {
        if (currentNode == null) {
            return 0;
        }
        int leftSubtreeHeight = this.getHeightHelper(currentNode.leftChild);
        int rightSubtreeHeight = this.getHeightHelper(currentNode.rightChild);
        return 1 + Math.max(leftSubtreeHeight, rightSubtreeHeight);
    }

    /**
     * Performs an inorder traversal of the tree from the root node and prints the data in each node
     */
    public void inorderTraversal() {
        if (this.root == null) {
            System.out.println("Tree is empty.");
        } else {
            this.inorderHelper(this.root);
        }
    }

    /**
     * Helper method for performing the inorder traversal
     * @param currentNode the current node being visited
     */
    private void inorderHelper(Node<T> currentNode) {
        if (currentNode == null) {
            return;
        }

        this.inorderHelper(currentNode.leftChild);
        System.out.println(currentNode.data);
        this.inorderHelper(currentNode.rightChild);
    }

    /**
     * Performs a preorder traversal of the tree from the root node and prints the data in each node
     */
    public void preorderTraversal() {
        if (this.root == null) {
            System.out.println("Tree is empty.");
        } else {
            this.preorderHelper(this.root);
        }
    }

    /**
     * Helper method for performing the preorder traversal
     * @param currentNode the current node being visited
     */
    private void preorderHelper(Node<T> currentNode) {
        if (currentNode == null) {
            return;
        }

        System.out.println(currentNode.data);
        this.preorderHelper(currentNode.leftChild);
        this.preorderHelper(currentNode.rightChild);
    }

    /**
     * Performs a postorder traversal of the tree from the root node and prints the data in each node
     */
    public void postorderTraversal() {
        if (this.root == null) {
            System.out.println("Tree is empty.");
        } else {
            this.postorderHelper(this.root);
        }
    }

    /**
     * Helper method for performing the postorder traversal
     * @param currentNode the current node being visited
     */
    private void postorderHelper(Node<T> currentNode) {
        if (currentNode == null) {
            return;
        }

        this.postorderHelper(currentNode.leftChild);
        this.postorderHelper(currentNode.rightChild);
        System.out.println(currentNode.data);
    }
}