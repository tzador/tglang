public class MyLinkedList<T> {

    private Node<T> head, tail; // declare variables for head and tail of linked list
    private int size; // declare variable for size of linked list

    // Node class to represent each element in a linked list
    private class Node<T> {
        private T data; // data held by the node
        private Node<T> next; // pointer to the next node

        // constructor to initialize node with given data
        public Node(T data) {
            this.data = data;
        }
    }

    // method to add a new element at the beginning of the linked list
    public void addFirst(T data) {
        Node<T> newNode = new Node<>(data); // create a new node with given data
        if (isEmpty()) { // if linked list is empty, set head and tail to the new node
            head = tail = newNode;
        } else { // otherwise, set newNode as the new head and point it to the old head
            newNode.next = head;
            head = newNode;
        }
        size++; // increase size of linked list
    }

    // method to add a new element at the end of the linked list
    public void addLast(T data) {
        Node<T> newNode = new Node<>(data); // create a new node with given data
        if (isEmpty()) { // if linked list is empty, set head and tail to the new node
            head = tail = newNode;
        } else { // otherwise, set newNode as the new tail and point the old tail to it
            tail.next = newNode;
            tail = newNode;
        }
        size++; // increase size of linked list
    }

    // method to remove the first element from the linked list
    public T removeFirst() {
        if (isEmpty()) { // if linked list is empty, return null
            return null;
        } else {
            T data = head.data; // store the data of the first element
            if (head == tail) { // if there is only one element, set head and tail to null
                head = tail = null;
            } else { // otherwise, set the second element as the new head
                head = head.next;
            }
            size--; // decrease size of linked list
            return data; // return the data of the removed element
        }
    }

    // method to remove the first occurrence of a given element from the linked list
    public boolean remove(T data) {
        Node<T> current = head; // start from the head of the linked list
        Node<T> previous = null; // keep track of the previous node
        while (current != null) { // loop until the end of the linked list
            if (current.data.equals(data)) { // if the data is found, remove the node
                if (current == head) { // if the node to be removed is the head, set the next node as the new head
                    head = head.next;
                } else if (current == tail) { // if the node to be removed is the tail, set the previous node as the new tail
                    tail = previous;
                    tail.next = null;
                } else { // otherwise, set the next node of the previous node to the next node of the current node
                    previous.next = current.next;
                }
                size--; // decrease size of linked list
                return true; // return true as data is successfully removed
            }
            previous = current; // update previous node
            current = current.next; // move to the next node
        }
        return false; // return false if data is not found in the linked list
    }

    // method to check if the linked list is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // method to get the size of the linked list
    public int size() {
        return size;
    }

    // method to print the elements of the linked list
    public void printList() {
        Node<T> current = head; // start from the head of the linked list
        while (current != null) { // loop until the end of the linked list
            System.out.print(current.data + " "); // print the data of the current node
            current = current.next; // move to the next node
        }
        System.out.println(); // print a new line after all elements are printed
    }
}