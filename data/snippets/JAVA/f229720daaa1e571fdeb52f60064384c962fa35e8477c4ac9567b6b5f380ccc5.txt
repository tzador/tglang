/**
 * This class represents a binary search tree data structure.
 * It allows for insertion, deletion, and searching of elements.
 * @param <T> the class of elements stored in the tree
 */
public class BinarySearchTree<T extends Comparable<T>> {
    
    /* The root node of the tree */
    private Node<T> root;
    
    /**
     * Inserts a new element into the tree
     * @param element the element to be inserted
     */
    public void insert(T element) {
        root = insert(root, element);
    }
    
    /**
     * Helper method for insertion, recursively searches for the correct location to insert the element
     * @param root the root node of the tree
     * @param element the element to be inserted
     * @return the modified root node of the tree
     */
    private Node<T> insert(Node<T> root, T element) {
        if (root == null) {
            root = new Node<>(element);
            return root;
        }
        
        if (element.compareTo(root.data) <= 0) {
            root.left = insert(root.left, element);
        } else {
            root.right = insert(root.right, element);
        }
        
        root.height = 1 + Math.max(height(root.left), height(root.right));
        
        // Perform a rotation to maintain balance
        int balance = balanceFactor(root);
        
        // Left Right Case
        if (balance < -1 && element.compareTo(root.right.data) < 0) {
            root.right = rotateRight(root.right);
            return rotateLeft(root);
        }
        
        // Right Left Case
        if (balance > 1 && element.compareTo(root.left.data) > 0) {
            root.left = rotateLeft(root.left);
            return rotateRight(root);
        }
        
        // Left Left Case
        if (balance > 1 && element.compareTo(root.left.data) < 0) {
            return rotateRight(root);
        }
        
        // Right Right Case
        if (balance < -1 && element.compareTo(root.right.data) > 0) {
            return rotateLeft(root);
        }
        
        return root;
    }
    
    /**
     * Deletes an element from the tree
     * @param element the element to be deleted
     */
    public void delete(T element) {
        root = delete(root, element);
    }
    
    /**
     * Helper method for deletion, recursively searches for the element to be deleted
     * @param root the root node of the tree
     * @param element the element to be deleted
     * @return the modified root node of the tree
     */
    private Node<T> delete(Node<T> root, T element) {
        if (root == null) {
            return root;
        }
        
        if (element.compareTo(root.data) < 0) {
            root.left = delete(root.left, element);
        } else if (element.compareTo(root.data) > 0) {
            root.right = delete(root.right, element);
        } else {
            // Node to be deleted has 0 or 1 child
            if (root.left == null || root.right == null) {
                Node<T> temp = null;
                
                if (temp == root.left) {
                    temp = root.right;
                } else {
                    temp = root.left;
                }
                
                if (temp == null) {
                    temp = root;
                    root = null;
                } else {
                    root = temp;
                }
            } else { // Node to be deleted has 2 children
                Node<T> temp = smallest(root.right);
                
                root.data = temp.data;
                root.right = delete(root.right, temp.data);
            }
        }
        
        if (root == null) {
            return root;
        }
        
        root.height = Math.max(height(root.left), height(root.right)) + 1;
        
        // Perform a rotation to maintain balance
        int balance = balanceFactor(root);
        
        // Left Right Case
        if (balance < -1 && balanceFactor(root.right) > 0) {
            root.right = rotateRight(root.right);
            return rotateLeft(root);
        }
        
        // Right Left Case
        if (balance > 1 && balanceFactor(root.left) < 0) {
            root.left = rotateLeft(root.left);
            return rotateRight(root);
        }
        
        // Left Left Case
        if (balance > 1 && balanceFactor(root.left) >= 0) {
            return rotateRight(root);
        }
        
        // Right Right Case
        if (balance < -1 && balanceFactor(root.right) <= 0) {
            return rotateLeft(root);
        }
        
        return root;
    }
    
    /**
     * Searches for an element in the tree
     * @param element the element to be searched
     * @return true if the element is found, false otherwise
     */
    public boolean search(T element) {
        return search(root, element);
    }
    
    /**
     * Helper method for search, recursively searches for the element in the tree
     * @param root the root node of the tree
     * @param element the element to be searched
     * @return true if the element is found, false otherwise
     */
    private boolean search(Node<T> root, T element) {
        if (root == null) {
            return false;
        }
        
        if (root.data == element) {
            return true;
        } else if (element.compareTo(root.data) < 0) {
            return search(root.left, element);
        } else {
            return search(root.right, element);
        }
    }
    
    /**
     * Performs a right rotation on a given subtree to maintain balance
     * @param root the root node of the subtree to be rotated
     * @return the modified root node of the rotated subtree
     */
    private Node<T> rotateRight(Node<T> root) {
        Node<T> newRoot = root.left;
        Node<T> temp = newRoot.right;
        
        newRoot.right = root;
        root.left = temp;
        
        root.height = Math.max(height(root.left), height(root.right)) + 1;
        newRoot.height = Math.max(height(newRoot.left), height(newRoot.right)) + 1;
        
        return newRoot;
    }
    
    /**
     * Performs a left rotation on a given subtree to maintain balance
     * @param root the root node of the subtree to be rotated
     * @return the modified root node of the rotated subtree
     */
    private Node<T> rotateLeft(Node<T> root) {
        Node<T> newRoot = root.right;
        Node<T> temp = newRoot.left;
        
        newRoot.left = root;
        root.right = temp;
        
        root.height = Math.max(height(root.left), height(root.right)) + 1;
        newRoot.height = Math.max(height(newRoot.left), height(newRoot.right)) + 1;
        
        return newRoot;
    }
    
    /**
     * Calculates the balance factor of a given node
     * @param node the node to calculate the balance factor for
     * @return the balance factor of the given node
     */
    private int balanceFactor(Node<T> node) {
        if (node == null) {
            return 0;
        }
        return height(node.left) - height(node.right);
    }
    
    /**
     * Calculates the height of a given node
     * @param node the node to calculate the height for
     * @return the height of the given node
     */
    private int height(Node<T> node) {
        if (node == null) {
            return 0;
        }
        return node.height;
    }
    
    /**
     * Finds the smallest node starting from a given node
     * @param node the node to start the search from
     * @return the smallest node found
     */
    private Node<T> smallest(Node<T> node) {
        Node<T> current = node;
        while (current.left != null) {
            current = current.left;
        }
        return current;
    }
    
    /**
     * This class represents a single node in the binary search tree.
     * It stores the data element and references to its left and right child nodes.
     * @param <T> the class of elements stored in the node
     */
    private class Node<T> {
        /* The data element stored in the node */
        T data;
        
        /* The left child node of this node */
        Node<T> left;
        
        /* The right child node of this node */
        Node<T> right;
        
        /* The height of this node */
        int height;
        
        /**
         * Constructs a new node with the given data element
         * @param data the data element to be stored in the node
         */
        Node(T data) {
            this.data = data;
            this.height = 1;
            this.left = null;
            this.right = null;
        }
    }
}