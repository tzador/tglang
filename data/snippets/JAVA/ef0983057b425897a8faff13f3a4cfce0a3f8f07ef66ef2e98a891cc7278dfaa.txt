/**
* This class represents a student with a name, age, and grade
*/
public class Student {

    private String name; //name of the student
    private int age; //age of the student
    private double grade; //grade of the student

    /**
    * Constructor for the Student class
    * @param name the name of the student
    * @param age the age of the student
    * @param grade the grade of the student
    */
    public Student(String name, int age, double grade) { 
        this.name = name;
        this.age = age;
        this.grade = grade;
    }

    /**
    * Getter method for the name
    * @return the name of the student
    */
    public String getName() { 
        return name;
    }

    /**
    * Getter method for the age
    * @return the age of the student
    */
    public int getAge() { 
        return age;
    }

    /**
    * Getter method for the grade
    * @return the grade of the student
    */
    public double getGrade() { 
        return grade;
    }

    /**
    * Setter method for the name
    * @param name the new name to set for the student
    */
    public void setName(String name) { 
        this.name = name;
    }

    /**
    * Setter method for the age
    * @param age the new age to set for the student
    */
    public void setAge(int age) { 
        this.age = age;
    }

    /**
    * Setter method for the grade
    * @param grade the new grade to set for the student
    */
    public void setGrade(double grade) { 
        this.grade = grade;
    }

    /**
    * Method to calculate the letter grade for the student based on their numerical grade
    * @return the letter grade as a char
    */
    public char calculateLetterGrade() { 
        if (grade >= 90) {
            return 'A';
        } else if (grade >= 80) {
            return 'B';
        } else if (grade >= 70) {
            return 'C';
        } else if (grade >= 60) {
            return 'D';
        } else {
            return 'F';
        }
    }

    /**
    * Method to check if the student is above a certain age
    * @param age the age to compare against
    * @return true if the student's age is above the given age, false otherwise
    */
    public boolean isAboveAge(int age) { 
        if (this.age > age) {
            return true;
        } else {
            return false;
        }
    }

    /**
    * Override of the default toString() method
    * @return a string representation of the student object with their name, age, and grade
    */
    @Override
    public String toString() { 
        return "Name: " + name + ", Age: " + age + ", Grade: " + grade;
    }
}

//Example usage
Student student1 = new Student("John Smith", 16, 85.5);
System.out.println(student1); //Output: Name: John Smith, Age: 16, Grade: 85.5
student1.setGrade(92.0);
System.out.println(student1.calculateLetterGrade()); //Output: A
System.out.println(student1.isAboveAge(18)); //Output: false