/**
 * This class represents a binary search tree data structure.
 * It supports operations such as insertion, deletion, and search.
 */
public class BinarySearchTree<T extends Comparable<T>> {
    
    // The root node of the binary search tree
    private Node<T> root;
    
    /**
     * Inserts a new node with the given value into the binary search tree.
     *
     * @param value the value to be inserted
     */
    public void insert(T value) {
        Node<T> newNode = new Node<>(value); // create a new node with the given value
        
        if (root == null) { // if the tree is empty, set the new node as the root
            root = newNode;
            return;
        }
        
        Node<T> current = root; // start search from the root
        Node<T> parent; // keep track of the parent node
        
        while (true) {
            parent = current;
            
            // if the given value is less than the current node's value, go to the left subtree
            if (value.compareTo(current.value) < 0) {
                current = current.left;
                
                // if the current node does not have a left child, set the new node as the left child
                if (current == null) {
                    parent.left = newNode;
                    return;
                }
            }
            // if the given value is greater than the current node's value, go to the right subtree
            else {
                current = current.right;
                
                // if the current node does not have a right child, set the new node as the right child
                if (current == null) {
                    parent.right = newNode;
                    return;
                }
            }
        }
    }
    
    /**
     * Deletes the node with the given value from the binary search tree.
     *
     * @param value the value to be deleted
     */
    public void delete(T value) {
        root = deleteNode(root, value); // recursively search for the node to be deleted starting from the root
    }
    
    /**
     * Helper method for the delete operation.
     * 
     * @param root the root of the current subtree
     * @param value the value of the node to be deleted
     * @return the root of the updated subtree
     */
    private Node<T> deleteNode(Node<T> root, T value) {
        if (root == null) { // if the root is null, the node to be deleted does not exist
            return null;
        }
        
        // if the value is less than the root's value, go to the left subtree
        if (value.compareTo(root.value) < 0) {
            root.left = deleteNode(root.left, value);
        }
        // if the value is greater than the root's value, go to the right subtree
        else if (value.compareTo(root.value) > 0) {
            root.right = deleteNode(root.right, value);
        }
        // if the value matches the root's value, this is the node to be deleted
        else {
            // if the node to be deleted has only one child or no children
            if (root.left == null) {
                return root.right;
            }
            else if (root.right == null) {
                return root.left;
            }
            
            // if the node to be deleted has two children
            // find the minimum value in the right subtree
            T minValue = findMin(root.right);
            
            // replace the value of the current root with the minimum value
            root.value = minValue;
            
            // recursively delete the node with the minimum value from the right subtree
            root.right = deleteNode(root.right, minValue);
        }
        
        return root;
    }
    
    /**
     * Helper method to find the minimum value in a subtree.
     *
     * @param root the root of the subtree
     * @return the minimum value in the subtree
     */
    private T findMin(Node<T> root) {
        T min = root.value; // the minimum value is initially the root's value
        
        // keep going left until there are no more left children
        while (root.left != null) {
            min = root.left.value;
            root = root.left;
        }
        
        return min;
    }
    
    /**
     * Searches for the node with the given value in the binary search tree.
     *
     * @param value the value to be searched for
     * @return true if the value is found, false otherwise
     */
    public boolean search(T value) {
        Node<T> current = root; // start search from the root
        
        while (current != null) {
            // if the given value matches the current node's value, return true
            if (value.compareTo(current.value) == 0) {
                return true;
            }
            // if the given value is less than the current node's value, go to the left subtree
            else if (value.compareTo(current.value) < 0) {
                current = current.left;
            }
            // if the given value is greater than the current node's value, go to the right subtree
            else {
                current = current.right;
            }
        }
        
        return false; // value is not found
    }
    
    /**
     * This class represents a node in the binary search tree.
     */
    private class Node<T> {
        
        // The value stored in the node
        private T value;
        
        // The left child of the node
        private Node<T> left;
        
        // The right child of the node
        private Node<T> right;
        
        /**
         * Constructs a new node with the given value.
         *
         * @param value the value to be stored in the node
         */
        public Node(T value) {
            this.value = value;
        }
    }
}