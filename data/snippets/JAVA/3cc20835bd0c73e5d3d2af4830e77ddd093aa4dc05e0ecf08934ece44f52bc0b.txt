// This is a class used to create a binary search tree
class BinarySearchTree<T extends Comparable<T>> {

    private Node<T> root; // The root node of the tree

    /**
     * This method inserts a new node in the tree
     *
     * @param value the value of the node to be inserted
     */
    public void insert(T value) {
        if (root == null) { // If tree is empty, set new node as root
            root = new Node<>(value);
        } else { // If tree is not empty, traverse the tree to find the correct position for the new node
            Node<T> curr = root; // Start at the root node
            Node<T> parent; // The parent node of the current node
            while (true) {
                parent = curr; // Set parent node
                if (value.compareTo(curr.data) < 0) { // If value is less than current node, go to left subtree
                    curr = curr.leftChild; // Go to left child
                    if (curr == null) { // If left child is null, set new node as left child of parent
                        parent.leftChild = new Node<>(value);
                        return;
                    }
                } else { // If value is greater than or equal to current node, go to right subtree
                    curr = curr.rightChild; // Go to right child
                    if (curr == null) { // If right child is null, set new node as right child of parent
                        parent.rightChild = new Node<>(value);
                        return;
                    }
                }
            }
        }
    }

    /**
     * This method searches for a given value in the tree
     *
     * @param value the value to be searched for
     * @return true if value is found, false if not found
     */
    public boolean search(T value) {
        if (root == null) { // If tree is empty, return false
            return false;
        } else { // If tree is not empty, traverse the tree to find the value
            Node<T> curr = root; // Start at the root node
            while (curr != null) { // Loop until we reach a leaf node
                if (curr.data == value) { // If current node has the same value as the one we are searching for, return true
                    return true;
                } else if (value.compareTo(curr.data) < 0) { // If value is less than current node, go to left subtree
                    curr = curr.leftChild; // Go to left child
                } else { // If value is greater than current node, go to right subtree
                    curr = curr.rightChild; // Go to right child
                }
            }
            return false; // Value not found, return false
        }
    }
    
    /**
     * This method deletes a node with the given value from the tree
     * @param value the value of the node to be deleted
     * @return true if node is deleted, false if node is not found
     */
    public boolean delete(T value) {
        Node<T> curr = root; // Start at the root node
        Node<T> parent = root; // Start at the root node
        boolean isLeftChild = true; // A flag to indicate if the current node is a left child or right child of its parent
        while (curr.data != value) { // Loop until we find the node with the given value
            parent = curr; // Set parent node
            if (value.compareTo(curr.data) < 0) { // If value is less than current node, go to left subtree
                isLeftChild = true; // Set flag to true
                curr = curr.leftChild; // Go to left child
            } else { // If value is greater than current node, go to right subtree
                isLeftChild = false; // Set flag to false
                curr = curr.rightChild; // Go to right child
            }
            if (curr == null) { // If we reach a null node, the value is not in the tree, return false
                return false;
            }
        }
        // At this point, we have found the node with the given value
        if (curr.leftChild == null && curr.rightChild == null) { // If node has no children
            if (curr == root && curr.data == value) { // If node is the root
                root = null; // Set root to null
            } else if (isLeftChild) { // If node is a left child
                parent.leftChild = null; // Set parent's left child to null
            } else { // If node is a right child
                parent.rightChild = null; // Set parent's right child to null
            }
        } else if (curr.rightChild == null) { // If node has only a left child
            if (curr == root) { // If node is the root
                root = curr.leftChild; // Set root to node's left child
            } else if (isLeftChild) { // If node is a left child
                parent.leftChild = curr.leftChild; // Set parent's left child to node's left child
            } else { // If node is a right child
                parent.rightChild = curr.leftChild; // Set parent's right child to node's left child
            }
        } else if (curr.leftChild == null) { // If node has only a right child
            if (curr == root) { // If node is the root
                root = curr.rightChild; // Set root to node's right child
            } else if (isLeftChild) { // If node is a left child
                parent.leftChild = curr.rightChild; // Set parent's left child to node's right child
            } else { // If node is a right child
                parent.rightChild = curr.rightChild; // Set parent's right child to node's right child
            }
        } else { // If node has both left and right children
            Node<T> successor = getSuccessor(curr); // Get the successor of the node
            if (curr == root) { // If node is the root
                root = successor; // Set root to successor
            } else if (isLeftChild) { // If node is a left child
                parent.leftChild = successor; // Set parent's left child to successor
            } else { // If node is a right child
                parent.rightChild = successor; // Set parent's right child to successor
            }
            successor.leftChild = curr.leftChild; // Set successor's left child to node's left child
        }
        return true; // Node deleted, return true
    }
    
    /**
     * This method finds the successor of a given node
     * @param node the node for which the successor is to be found
     * @return the successor node 
     */
    private Node<T> getSuccessor(Node<T> node) {
        Node<T> successorParent = node; // Start at the given node
        Node<T> successor = node; // Start at the given node
        Node<T> curr = node.rightChild; // Start at the given node's right child
        while (curr != null) { // Loop until we reach a leaf node
            successorParent = successor; // Set successor parent node
            successor = curr; // Set successor node
            curr = curr.leftChild; // Go to left child
        }
        if (successor != node.rightChild) { // If successor is not the given node's right child
            successorParent.leftChild = successor.rightChild; // Set successor parent's left child to successor's right child
            successor.rightChild = node.rightChild; // Set successor's right child to given node's right child
        }
        return successor; // Return successor node
    }
    
    /**
     * This class represents a node in the tree
     */
    private class Node<T> {

        private T data; // Data of the node
        private Node<T> leftChild; // Left child
        private Node<T> rightChild; // Right child

        // Constructor
        public Node(T data) {
            this.data = data;
            this.leftChild = null;
            this.rightChild = null;
        }
    }
}