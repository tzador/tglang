public class BinaryTree<E extends Comparable<E>> {

    // inner class for tree node
    private class Node {
        E data;
        Node left;
        Node right;

        // constructor
        public Node(E data) {
            this.data = data;
        }
    }

    // root node of the tree
    private Node root;

    // constructor
    public BinaryTree() {
        root = null;
    }

    // method to add a node to the tree
    public void insert(E data) {
        insertHelper(root, data);
    }

    // helper method to recursively insert nodes
    private void insertHelper(Node curr, E data) {
        // if tree is empty
        if (curr == null) {
            root = new Node(data);
        }
        // if data to be inserted is smaller than current node
        else if (data.compareTo(curr.data) < 0) {
            // if left child of current node is null, insert new node
            if (curr.left == null) {
                curr.left = new Node(data);
            }
            // if left child of current node is not null, recursively call insertHelper
            else {
                insertHelper(curr.left, data);
            }
        }
        // if data to be inserted is greater than current node
        else if (data.compareTo(curr.data) > 0) {
            // if right child of current node is null, insert new node
            if (curr.right == null) {
                curr.right = new Node(data);
            }
            // if right child of current node is not null, recursively call insertHelper
            else {
                insertHelper(curr.right, data);
            }
        }
        // if data to be inserted already exists in the tree, do nothing
    }

    // method to check if a node exists in the tree
    public boolean contains(E data) {
        return containsHelper(root, data);
    }

    // helper method to recursively check if a node exists in the tree
    private boolean containsHelper(Node curr, E data) {
        // if tree is empty or current node is null, return false
        if (curr == null) {
            return false;
        }
        // if current node's data matches the data we are looking for, return true
        if (curr.data.equals(data)) {
            return true;
        }
        // if data is smaller than current node, recursively call containsHelper on the left subtree
        else if (data.compareTo(curr.data) < 0) {
            return containsHelper(curr.left, data);
        }
        // if data is greater than current node, recursively call containsHelper on the right subtree
        else if (data.compareTo(curr.data) > 0) {
            return containsHelper(curr.right, data);
        }
        // if data is not found in the tree, return false
        return false;
    }

    // method to delete a node from the tree
    public void delete(E data) {
        root = deleteHelper(root, data);
    }

    // helper method to recursively delete a node from the tree
    private Node deleteHelper(Node curr, E data) {
        // if tree is empty or current node is null, return null
        if (curr == null) {
            return null;
        }
        // if data to be deleted is smaller than current node, recursively call deleteHelper on the left subtree
        if (data.compareTo(curr.data) < 0) {
            curr.left = deleteHelper(curr.left, data);
        }
        // if data to be deleted is greater than current node, recursively call deleteHelper on the right subtree
        else if (data.compareTo(curr.data) > 0) {
            curr.right = deleteHelper(curr.right, data);
        }
        // if current node's data matches the data to be deleted
        else {
            // if current node has no left child, return its right child (or null) to replace it
            if (curr.left == null) {
                return curr.right;
            }
            // if current node has no right child, return its left child to replace it
            else if (curr.right == null) {
                return curr.left;
            }
            // if current node has two children
            else {
                // find the minimum value in the right subtree, which will replace the current node
                Node minimum = findMinimum(curr.right);
                // set current node's data to the minimum value
                curr.data = minimum.data;
                // delete the minimum node from the right subtree
                curr.right = deleteHelper(curr.right, minimum.data);
            }
        }
        // return the updated current node
        return curr;
    }

    // method to find the minimum value in a subtree
    private Node findMinimum(Node curr) {
        // keep going to the left until the left child is null
        while (curr.left != null) {
            curr = curr.left;
        }
        // return the current node, which is the minimum value
        return curr;
    }

    // method to print the tree in preorder traversal
    public void printPreorder() {
        preorderHelper(root);
    }

    // helper method to recursively print the tree in preorder traversal
    private void preorderHelper(Node curr) {
        // if tree is empty or current node is null, return
        if (curr == null) {
            return;
        }
        // print current node's data first
        System.out.print(curr.data + " ");
        // recursively call preorderHelper on left and right subtrees
        preorderHelper(curr.left);
        preorderHelper(curr.right);
    }

    // method to print the tree in inorder traversal
    public void printInorder() {
        inorderHelper(root);
    }

    // helper method to recursively print the tree in inorder traversal
    private void inorderHelper(Node curr) {
        // if tree is empty or current node is null, return
        if (curr == null) {
            return;
        }
        // recursively call inorderHelper on left subtree
        inorderHelper(curr.left);
        // print current node's data in the middle
        System.out.print(curr.data + " ");
        // recursively call inorderHelper on right subtree
        inorderHelper(curr.right);
    }

    // method to print the tree in postorder traversal
    public void printPostorder() {
        postorderHelper(root);
    }

    // helper method to recursively print the tree in postorder traversal
    private void postorderHelper(Node curr) {
        // if tree is empty or current node is null, return
        if (curr == null) {
            return;
        }
        // recursively call postorderHelper on left and right subtrees
        postorderHelper(curr.left);
        postorderHelper(curr.right);
        // print current node's data last
        System.out.print(curr.data + " ");
    }

    // method to calculate the size of the tree
    public int size() {
        return sizeHelper(root);
    }

    // helper method to recursively calculate the size of the tree
    private int sizeHelper(Node curr) {
        // if tree is empty or current node is null, return 0
        if (curr == null) {
            return 0;
        }
        // recursively call sizeHelper on left and right subtrees
        return 1 + sizeHelper(curr.left) + sizeHelper(curr.right);
    }

    // method to find the maximum depth of the tree
    public int maxDepth() {
        return maxDepthHelper(root);
    }

    // helper method to recursively find the maximum depth of the tree
    private int maxDepthHelper(Node curr) {
        // if tree is empty or current node is null, return 0
        if (curr == null) {
            return 0;
        }
        // recursively find the maximum depth of the left and right subtrees
        int leftDepth = maxDepthHelper(curr.left);
        int rightDepth = maxDepthHelper(curr.right);
        // return the maximum depth + 1, since we are counting nodes and not edges
        return Math.max(leftDepth, rightDepth) + 1; // add 1 for the current node
    }
}