/**
 * This class represents a binary search tree data structure.
 * It supports insertion, deletion, and search operations.
 * The tree is implemented using nodes and pointers.
 */
public class BinarySearchTree {

    /**
     * This inner class represents a node in the binary search tree.
     * It stores a value, a reference to its left child, and a reference to its right child.
     */
    private class Node {
        int value;
        Node left;
        Node right;

        /**
         * Constructor for creating a new Node with the given value.
         */
        public Node(int value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }

        /**
         * Inserts a new Node with the given value as a child of this Node.
         * If the value is smaller than this Node's value, it is inserted as the left child.
         * If the value is larger than this Node's value, it is inserted as the right child.
         * If the value is equal to this Node's value, it is not inserted.
         * 
         * @param value The value to insert in the tree
         */
        public void insert(int value) {
            if (value < this.value) {
                if (left == null) {
                    left = new Node(value);
                } else {
                    left.insert(value);
                }
            } else if (value > this.value) {
                if (right == null) {
                    right = new Node(value);
                } else {
                    right.insert(value);
                }
            }
            // if the value is equal to this Node's value, do nothing
        }

        /**
         * Searches for a Node with the given value in the tree starting from this Node.
         * If the value is equal to this Node's value, it returns this Node.
         * If the value is smaller than this Node's value, it searches in the left subtree.
         * If the value is larger than this Node's value, it searches in the right subtree.
         * If the value is not found, it returns null.
         * 
         * @param value The value to search for in the tree
         * @return The Node with the given value or null if not found
         */
        public Node search(int value) {
            if (value == this.value) {
                return this;
            } else if (value < this.value) {
                if (left != null) {
                    return left.search(value);
                } else {
                    return null;
                }
            } else { // value > this.value
                if (right != null) {
                    return right.search(value);
                } else {
                    return null;
                }
            }
        }

        /**
         * Deletes the Node with the given value from the tree starting at this Node.
         * If the value is equal to this Node's value, it is deleted and the tree is adjusted.
         * If the value is smaller than this Node's value, it is deleted from the left subtree.
         * If the value is larger than this Node's value, it is deleted from the right subtree.
         * If the value is not found, the tree remains unchanged.
         * 
         * @param value The value to delete from the tree
         * @param parent The parent Node of this Node
         */
        public void delete(int value, Node parent) {
            if (value == this.value) { // found the Node to be deleted
                // case 1: the Node has no children
                if (left == null && right == null) {
                    // set the reference of the parent to this Node to null
                    if (parent.left == this) {
                        parent.left = null;
                    } else {
                        parent.right = null;
                    }
                }
                // case 2: the Node has one child
                else if (left != null && right == null) {
                    // set the reference of the parent to this Node to the left child
                    if (parent.left == this) {
                        parent.left = left;
                    } else {
                        parent.right = left;
                    }
                } else if (left == null && right != null) {
                    // set the reference of the parent to this Node to the right child
                    if (parent.left == this) {
                        parent.left = right;
                    } else {
                        parent.right = right;
                    }
                }
                // case 3: the Node has two children
                else {
                    // find the successor Node (the smallest Node in the right subtree)
                    Node successor = right;
                    while (successor.left != null) {
                        successor = successor.left;
                    }
                    // set this Node's value to the successor's value
                    this.value = successor.value;
                    // delete the successor Node from the right subtree
                    right.delete(successor.value, this);
                }
            }
            // if the value is smaller than this Node's value, delete from the left subtree
            else if (value < this.value) {
                if (left != null) {
                    left.delete(value, this);
                }
            }
            // if the value is larger than this Node's value, delete from the right subtree
            else if (value > this.value) {
                if (right != null) {
                    right.delete(value, this);
                }
            }
        }

        /**
         * Prints the tree in sorted order starting from this Node.
         * The left subtree is printed first, then the value of this Node, then the right subtree.
         */
        public void printInOrder() {
            if (left != null) {
                left.printInOrder();
            }
            System.out.print(this.value + " ");
            if (right != null) {
                right.printInOrder();
            }
        }
    }

    // reference to the root Node of the tree
    private Node root;

    /**
     * Constructor for creating an empty binary search tree.
     */
    public BinarySearchTree() {
        this.root = null;
    }

    /**
     * Inserts a new Node with the given value in the tree.
     * Inserts at the root if the tree is empty, or calls the insert method of the root Node.
     * 
     * @param value The value to insert in the tree
     */
    public void insert(int value) {
        if (root == null) {
            root = new Node(value);
        } else {
            root.insert(value);
        }
    }

    /**
     * Searches for a Node with the given value in the tree.
     * Calls the search method of the root Node.
     * 
     * @param value The value to search for in the tree
     * @return The Node with the given value or null if not found
     */
    public Node search(int value) {
        if (root == null) {
            return null;
        } else {
            return root.search(value);
        }
    }

    /**
     * Deletes the Node with the given value from the tree.
     * Calls the delete method of the root Node.
     * 
     * @param value The value to delete from the tree
     */
    public void delete(int value) {
        if (root == null) {
            return;
        } else {
            root.delete(value, null);
        }
    }

    /**
     * Prints the tree in sorted order starting from the root Node.
     * The left subtree is printed first, then the value of the root Node, then the right subtree.
     */
    public void printInOrder() {
        if (root == null) {
            return;
        } else {
            root.printInOrder();
        }
    }

    /**
    * Main method for testing the functionality of the binary search tree.
    */
    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();

        // insert values in the tree
        tree.insert(8);
        tree.insert(10);
        tree.insert(5);
        tree.insert(3);
        tree.insert(12);
        tree.insert(2);
        tree.insert(6);
        tree.insert(4);
        tree.insert(11);
        tree.insert(9);
        tree.insert(7);

        // print the tree in sorted order
        tree.printInOrder();

        // search for a value in the tree
        BinarySearchTree.Node found = tree.search(9);
        if (found != null) {
            System.out.println("\nNode with value 9 found!");
        }

        // delete a value from the tree
        tree.delete(11);
        // print the tree again to see the changes
        tree.printInOrder();
    }

}