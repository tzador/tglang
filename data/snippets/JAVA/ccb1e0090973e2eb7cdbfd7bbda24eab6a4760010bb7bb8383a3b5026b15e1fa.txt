// This code snippet is a complex searching algorithm that uses recursive backtracking

/**
 * This method searches for a given pattern in a 2D grid
 * @param grid The 2D grid to be searched
 * @param pattern The pattern to be searched for
 * @return A list of indices for the start positions of the pattern in the grid
 */
public List<List<Integer>> searchPattern(char[][] grid, String pattern) {
    List<List<Integer>> result = new ArrayList<List<Integer>>();
    if (grid == null || grid.length == 0 || grid[0].length == 0 || pattern == null) {
        return result;
    }
    // Initialize boolean matrix to track visited cells
    boolean[][] visited = new boolean[grid.length][grid[0].length];
    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[0].length; j++) {
            // Call helper method for each cell in grid
            search(grid, pattern, visited, i, j, result);
        }
    }
    return result;
}

/**
 * Helper method to search for pattern recursively starting from given cell
 * @param grid The 2D grid to be searched
 * @param pattern The pattern to be searched for
 * @param visited The boolean matrix to track visited cells
 * @param row The row index of the current cell
 * @param col The column index of the current cell
 * @param result The list of indices for the start positions of the pattern in the grid
 */
private void search(char[][] grid, String pattern, boolean[][] visited, int row, int col, List<List<Integer>> result) {
    // If pattern is empty, add current cell to result
    if (pattern.isEmpty()) {
        // Convert indices to list and add to result 
        List<Integer> indices = new ArrayList<Integer>();
        indices.add(row);
        indices.add(col);
        result.add(indices);
        return;
    }
    // If indices are out of bounds or current cell has been visited, return
    if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || visited[row][col]) {
        return;
    }
    // If current cell matches first character of pattern, continue searching in all 8 directions
    if (grid[row][col] == pattern.charAt(0)) {
        visited[row][col] = true;
        // Update pattern to exclude first character
        String reducedPattern = pattern.substring(1);

        // Call helper method recursively in all 8 directions 
        search(grid, reducedPattern, visited, row - 1, col - 1, result); // top left
        search(grid, reducedPattern, visited, row - 1, col, result); // top
        search(grid, reducedPattern, visited, row - 1, col + 1, result); // top right
        search(grid, reducedPattern, visited, row, col - 1, result); // left
        search(grid, reducedPattern, visited, row, col + 1, result); // right
        search(grid, reducedPattern, visited, row + 1, col - 1, result); // bottom left
        search(grid, reducedPattern, visited, row + 1, col, result); // bottom
        search(grid, reducedPattern, visited, row + 1, col + 1, result); // bottom right

        visited[row][col] = false;
    }
}

// Example usage:
// char[][] grid = {{'A','B','C','D'},
//                  {'E','F','G','H'},
//                  {'I','J','K','L'},
//                  {'M','N','O','P'}};
// String pattern = "ABCFGPO";
// List<List<Integer>> result = searchPattern(grid, pattern);
// System.out.println(result); // Output: [[0,0], [0,1], [0,2], [1,3], [2,3], [3,3]]