/**
 * This class represents a matrix data structure.
 */
public class Matrix {
    private int numRows;
    private int numColumns;
    private int[][] matrix;
    
    /**
     * Constructor for creating a new matrix with specified dimensions.
     * @param numRows The number of rows in the matrix.
     * @param numColumns The number of columns in the matrix.
     */
    public Matrix(int numRows, int numColumns) {
        this.numRows = numRows;
        this.numColumns = numColumns;
        matrix = new int[numRows][numColumns];
    }
    
    /**
     * Fills the matrix with random integer values between specified min and max.
     * @param min The minimum value of the random numbers.
     * @param max The maximum value of the random numbers.
     */
    public void fillMatrix(int min, int max) {
        Random random = new Random();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numColumns; j++) {
                matrix[i][j] = random.nextInt(max - min) + min;
            }
        }
    }
    
    /**
     * Prints the matrix in a nice format with rows and columns labeled.
     */
    public void printMatrix() {
        // Print column labels
        for (int i = 0; i <= numColumns; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
        
        for (int i = 0; i < numRows; i++) {
            System.out.print((i+1) + " "); // Print row label
            for (int j = 0; j < numColumns; j++) {
                System.out.print(matrix[i][j] + " "); // Print value
            }
            System.out.println();
        }
    }
    
    /**
     * Adds two matrices together.
     * @param other The matrix to be added to this matrix.
     * @return A new matrix with the sum of the two matrices.
     * @throws IllegalArgumentException if the matrices are not the same dimensions.
     */
    public Matrix add(Matrix other) {
        if (other.numRows != numRows || other.numColumns != numColumns) {
            throw new IllegalArgumentException("Matrices must have the same dimensions.");
        }
        Matrix result = new Matrix(numRows, numColumns);
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numColumns; j++) {
                result.matrix[i][j] = matrix[i][j] + other.matrix[i][j];
            }
        }
        return result;
    }
    
    /**
     * Multiplies two matrices using standard matrix multiplication.
     * @param other The matrix to be multiplied by this matrix.
     * @return A new matrix with the product of the two matrices.
     * @throws IllegalArgumentException if the number of columns of this matrix does not match the number of rows of the other matrix.
     */
    public Matrix multiply(Matrix other) {
        if (other.numRows != numColumns) {
            throw new IllegalArgumentException("Number of columns of first matrix must match number of rows of second matrix.");
        }
        Matrix result = new Matrix(numRows, other.numColumns);
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < other.numColumns; j++) {
                // Multiply and sum up products for each element in resulting matrix
                for (int k = 0; k < numColumns; k++) {
                    result.matrix[i][j] += matrix[i][k] * other.matrix[k][j];
                }
            }
        }
        return result;
    }
    
    /**
     * Checks if two matrices are equal.
     * @param other The matrix to be compared to this matrix.
     * @return True if the matrices have the same dimensions and all corresponding elements are equal, false otherwise.
     */
    public boolean equals(Matrix other) {
        if (other.numRows != numRows || other.numColumns != numColumns) {
            return false;
        }
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numColumns; j++) {
                if (matrix[i][j] != other.matrix[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }
}