/**
 * This class represents a generic linked list data structure.
 * It supports adding, removing, and searching for elements.
 */
public class LinkedList<E> {
    private Node<E> head;
    private int size;

    /**
     * This method adds a new element to the end of the linked list.
     * @param element the element to be added.
     */
    public void add(E element) {
        Node<E> newNode = new Node<>(element, null);
        
        if (head == null) {
            head = newNode;
        } else {
            Node<E> current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        size++;
    }

    /**
     * This method removes an element from the linked list.
     * @param element the element to be removed.
     * @return true if the element was successfully removed, otherwise false.
     */
    public boolean remove(E element) {
        Node<E> current = head;
        if (current == null) {
            return false;
        } else if (current.element.equals(element)) {
            head = current.next;
            size--;
            return true;
        } else {
            while (current.next != null) {
                if (current.next.element.equals(element)) {
                    current.next = current.next.next;
                    size--;
                    return true;
                }
                current = current.next;
            }
            return false;
        }
    }

    /**
     * This method searches for an element in the linked list.
     * @param element the element to search for.
     * @return true if the element is found, otherwise false.
     */
    public boolean contains(E element) {
        Node<E> current = head;
        while (current != null) {
            if (current.element.equals(element)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    /**
     * This method returns the current size of the linked list.
     * @return the size of the linked list.
     */
    public int getSize() {
        return size;
    }

    /**
     * This class represents a node in the linked list.
     */
    private static class Node<E> {
        private E element;
        private Node<E> next;

        /**
         * This constructor creates a new node with the given element and next node.
         * @param element the element to be stored in the node.
         * @param next the next node in the linked list.
         */
        public Node(E element, Node<E> next) {
            this.element = element;
            this.next = next;
        }
    }
}