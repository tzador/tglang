/**
This class represents a library management system 
that stores information about books and library members.
*/

// Imports the ArrayList class from the java.util package
import java.util.ArrayList;

// Class declaration
public class LibraryManagementSystem {

    /**
    This private nested class represents a book that is stored in the library management system.
    */
    private class Book {

        // Instance variables
        private String title;
        private String author;
        private int yearPublished;
        
        // Constructor
        public Book(String title, String author, int yearPublished) {
            this.title = title;
            this.author = author;
            this.yearPublished = yearPublished;
        }

        /**
        This method returns the title of the book.
        @return title of the book
        */
        public String getTitle() {
            return this.title;
        }
        
        /**
        This method returns the author of the book.
        @return author of the book
        */
        public String getAuthor() {
            return this.author;
        }

        /**
        This method returns the year the book was published.
        @return year published
        */
        public int getYearPublished() {
            return this.yearPublished;
        }
    }

    // Instance variables
    private ArrayList<Book> books = new ArrayList<>();
    private ArrayList<String> members = new ArrayList<>();

    /**
    This method adds a book to the library management system.
    @param title the title of the book
    @param author the author of the book
    @param yearPublished the year the book was published
    */
    public void addBook(String title, String author, int yearPublished) {
        books.add(new Book(title, author, yearPublished));
    }

    /**
    This method removes a book from the library management system.
    @param title the title of the book to be removed
    */
    public void removeBook(String title) {
        for (Book b : books) {
            if (b.getTitle().equals(title)) {
                books.remove(b);
                break;
            }
        }
    }

    /**
    This method adds a member to the library management system.
    @param name the name of the member
    */
    public void addMember(String name) {
        members.add(name);
    }

    /**
    This method removes a member from the library management system.
    @param name the name of the member to be removed
    */
    public void removeMember(String name) {
        members.remove(name);
    }

    /**
    This method allows a member to borrow a book from the library management system.
    @param title the title of the book to be borrowed
    @param memberName the name of the member borrowing the book
    */
    public void borrowBook(String title, String memberName) {
        // Check if the book is available
        boolean bookAvailable = false;
        for (Book b : books) {
            if (b.getTitle().equals(title)) {
                bookAvailable = true;
                break;
            }
        }
        // If the book is available, add it to the member's borrowing history
        if (bookAvailable) {
            for (String member : members) {
                if (member.equals(memberName)) {
                    // In real-life scenario, this method would also 
                    // update the database by decreasing the book's quantity
                    System.out.println(memberName + " has borrowed " + title);
                    break;
                }
            }
        // If the book is not available, display an error message
        } else {
            System.out.println("Book not available to borrow.");
        }
    }

    /**
    This method allows a member to return a book to the library management system.
    @param title the title of the book to be returned
    @param memberName the name of the member returning the book
    */
    public void returnBook(String title, String memberName) {
        // Check if the member has borrowed the book
        boolean borrowedByMember = false;
        for (String member : members) {
            if (member.equals(memberName)) {
                borrowedByMember = true;
                break;
            }
        }
        // If the member has borrowed the book, remove it from their borrowing history
        if (borrowedByMember) {
            for (Book b : books) {
                if (b.getTitle().equals(title)) {
                    // In real-life scenario, this method would also 
                    // update the database by increasing the book's quantity
                    System.out.println(memberName + " has returned " + title);
                    break;
                }
            }
        // If the member has not borrowed the book, display an error message
        } else {
            System.out.println("Member has not borrowed this book.");
        }
    }

    /**
    This method displays a list of available books in the library management system.
    */
    public void displayAvailableBooks() {
        System.out.println("Available books:");
        for (Book b : books) {
            System.out.println(b.getTitle() + " - " + b.getAuthor() + " (" + b.getYearPublished() + ")");
        }
    }

    /**
    This method displays a list of members of the library management system.
    */
    public void displayMembers() {
        System.out.println("Members:");
        for (String member : members) {
            System.out.println(member);
        }
    }

}