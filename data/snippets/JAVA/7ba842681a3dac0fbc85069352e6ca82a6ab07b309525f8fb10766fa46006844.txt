/**
 * This class represents a generic datastructure
 * with the ability to add and remove elements,
 * as well as search for specific elements.
 */
public class DataStructure<T> {

    // Array to store elements
    private T[] elements;
    // Current number of elements
    private int size;

    /**
     * Constructor for DataStructure
     * Initializes the array with a given capacity
     * @param capacity The initial capacity of the array
     */
    public DataStructure(int capacity) {
        // Initialize array with given capacity
        this.elements = (T[]) new Object[capacity];
        // Set size to 0
        this.size = 0;
    }

    /**
     * Adds a new element to the datastructure
     * @param element The element to be added
     */
    public void add(T element) {
        // Check if the array is already full
        if (this.size == this.elements.length) {
            // Double the capacity of the array
            this.resize();
        }
        // Add the new element to the end of the array
        this.elements[size] = element;
        // Increment the size counter
        this.size++;
    }

    /**
     * Removes an element from the datastructure
     * @param element The element to be removed
     */
    public void remove(T element) {
        // Loop through the array to find the index of the element
        for (int i = 0; i < this.size; i++) {
            if (this.elements[i].equals(element)) {
                // Shift all elements after the removed element to the left
                for (int j = i; j < this.size - 1; j++) {
                    this.elements[j] = this.elements[j + 1];
                }
                // Set the last element to null
                this.elements[this.size - 1] = null;
                // Decrement the size counter
                this.size--;
                // Exit the loop
                break;
            }
        }
    }

    /**
     * Searches for a specific element in the datastructure
     * @param target The element to search for
     * @return True if the element is found, false if not
     */
    public boolean contains(T target) {
        // Loop through the array and compare elements to the target
        for (int i = 0; i < this.size; i++) {
            if (this.elements[i].equals(target)) {
                // Return true if the element is found
                return true;
            }
        }
        // Return false if the element is not found
        return false;
    }

    /**
     * Doubles the capacity of the array
     */
    private void resize() {
        // Double the current capacity
        int newCapacity = this.elements.length * 2;
        // Create a new array with the new capacity
        T[] newElements = (T[]) new Object[newCapacity];
        // Copy all elements from the old array to the new array
        for (int i = 0; i < this.elements.length; i++) {
            newElements[i] = this.elements[i];
        }
        // Replace the old array with the new one
        this.elements = newElements;
    }
}