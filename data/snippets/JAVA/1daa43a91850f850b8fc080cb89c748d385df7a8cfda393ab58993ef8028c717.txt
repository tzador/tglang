/**
 * This class represents a binary search tree data structure.
 * It contains methods for adding, removing, and searching for nodes in the tree.
 */
public class BinarySearchTree {

    private Node root; // The root node of the tree

    /**
     * Represents a node in the tree, containing a value and references to its left and right children.
     */
    public class Node {

        private int value; // The value of the node
        private Node left; // Reference to the left child node
        private Node right; // Reference to the right child node

        /**
         * Constructor for a new node with a given value.
         * @param value The value of the node.
         */
        public Node(int value) {
            this.value = value;
            left = null;
            right = null;
        }
    }

    /**
     * Adds a new node with the given value to the tree.
     * @param value The value of the node to be added.
     */
    public void add(int value) {
        if (root == null) { // If the tree is empty, set the new node as the root
            root = new Node(value);
        } else { // Otherwise, search for the correct position in the tree to insert the new node
            Node parent = findParentFor(value, root);
            if (value < parent.value) { // If the value is less than the parent's value, add the new node to its left child
                parent.left = new Node(value);
            } else { // Otherwise, add the new node to its right child
                parent.right = new Node(value);
            }
        }
    }

    /**
     * Searches for a node with the given value in the tree.
     * @param value The value to search for.
     * @return The node with the given value, or null if it is not found.
     */
    public Node search(int value) {
        return findNodeWith(value, root);
    }

    /**
     * Removes a node with the given value from the tree, if it exists.
     * @param value The value of the node to be removed.
     */
    public void remove(int value) {
        root = removeNodeWith(value, root);
    }

    /**
     * Finds the parent node for a new node with the given value, starting from the given root node.
     * @param value The value of the new node.
     * @param root The root node to start the search from.
     * @return The parent node where the new node should be inserted.
     */
    private Node findParentFor(int value, Node root) {
        if (value < root.value && root.left == null) { // If the value is less than the current node's value and the left child is null, this is the parent node
            return root;
        } else if (value < root.value) { // If the value is less than the current node's value, continue searching in the left subtree
            return findParentFor(value, root.left);
        } else if (value > root.value && root.right == null) { // If the value is greater than the current node's value and the right child is null, this is the parent node
            return root;
        } else { // If the value is greater than the current node's value, continue searching in the right subtree
            return findParentFor(value, root.right);
        }
    }

    /**
     * Finds the node with the given value in the tree, starting from the given root node.
     * @param value The value to search for.
     * @param root The root node to start the search from.
     * @return The node with the given value, or null if it is not found.
     */
    private Node findNodeWith(int value, Node root) {
        if (root == null) { // If the root is null, the value is not in the tree
            return null;
        } else if (value == root.value) { // If the value matches the current node's value, return the current node
            return root;
        } else if (value < root.value) { // If the value is less than the current node's value, continue searching in the left subtree
            return findNodeWith(value, root.left);
        } else { // If the value is greater than the current node's value, continue searching in the right subtree
            return findNodeWith(value, root.right);
        }
    }

    /**
     * Removes a node with the given value from the tree, starting from the given root node.
     * @param value The value of the node to be removed.
     * @param root The root node of the tree.
     * @return The root node of the resulting tree after the node is removed.
     */
    private Node removeNodeWith(int value, Node root) {
        if (root == null) { // If the root is null, the value is not in the tree
            return null;
        } else if (value == root.value) { // If the value matches the current node's value, remove the node
            return removeNode(root);
        } else if (value < root.value) { // If the value is less than the current node's value, continue searching in the left subtree
            root.left = removeNodeWith(value, root.left);
        } else { // If the value is greater than the current node's value, continue searching in the right subtree
            root.right = removeNodeWith(value, root.right);
        }
        return root;
    }

    /**
     * Removes a node from the tree.
     * @param nodeToBeRemoved The node to be removed.
     * @return The replacement node for the removed node, or null if the node being removed has no children.
     */
    private Node removeNode(Node nodeToBeRemoved) {
        if (nodeToBeRemoved.left == null && nodeToBeRemoved.right == null) { // If the node has no children, return null as the replacement node
            return null;
        } else if (nodeToBeRemoved.left == null) { // If the node has only a right child, return the right child as the replacement node
            return nodeToBeRemoved.right;
        } else if (nodeToBeRemoved.right == null) { // If the node has only a left child, return the left child as the replacement node
            return nodeToBeRemoved.left;
        } else { // If the node has two children, use the inorder predecessor as the replacement node
            Node inorderPredecessor = findInorderPredecessor(nodeToBeRemoved.left);
            removeNode(inorderPredecessor);
            inorderPredecessor.left = nodeToBeRemoved.left;
            inorderPredecessor.right = nodeToBeRemoved.right;
            return inorderPredecessor;
        }
    }

    /**
     * Finds the inorder predecessor of a given node.
     * @param node The node to find the predecessor of.
     * @return The inorder predecessor of the given node.
     */
    private Node findInorderPredecessor(Node node) {
        while (node.right != null) { // The inorder predecessor will be the rightmost node in the left subtree
            node = node.right;
        }
        return node;
    }
}