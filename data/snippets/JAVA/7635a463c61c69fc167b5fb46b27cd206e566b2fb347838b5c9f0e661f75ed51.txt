public class Sorting {
    // Declaring a static method for quicksort algorithm
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Partitioning the array and getting the pivot
            int pivot = partition(arr, low, high);

            // Recursively calling quicksort on left and right partitions
            quickSort(arr, low, pivot - 1);
            quickSort(arr, pivot + 1, high);
        }
    }

    // Helper method for partitioning the array
    public static int partition(int[] arr, int low, int high) {
        // Choosing the last element as the pivot
        int pivot = arr[high];
        int i = low - 1;

        // Iterating through all elements and rearranging them around the pivot
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                // Swapping arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        // Swapping arr[i+1] and arr[high]
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        // Return the index of the pivot
        return i + 1;
    }

    // Main method to test quicksort algorithm
    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 2, 9, 1};
        System.out.println("Array before sorting: " + Arrays.toString(arr));
        quickSort(arr, 0, arr.length - 1);
        System.out.println("Array after sorting: " + Arrays.toString(arr));
    }
}