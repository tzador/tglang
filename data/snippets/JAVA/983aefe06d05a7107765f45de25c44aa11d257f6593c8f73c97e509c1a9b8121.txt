/**
 * This class represents a linked list data structure
 * with methods for adding, removing, and searching elements.
 */
public class LinkedList<T> {

    private Node head; //points to first element in list
    private int size; //keeps track of number of elements in list
   
    /**
     * This method adds a new element to the end of the linked list.
     * @param element the data value of the new element
     */
    public void add(T element) {
        Node newNode = new Node(element, null);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.getNext() != null) {
                current = current.getNext();
            }
            current.setNext(newNode);
        }
        size++;
    }
    
    
    /**
     * This method removes the first occurrence of the specified element
     * from the linked list, if it exists.
     * @param element the data value of the element to be removed
     * @return true if the element is found and removed, false if not found
     */
    public boolean remove(T element) {
        if (head == null) {
            return false;
        }
        
        if (head.getData().equals(element)) {
            head = head.getNext();
            size--;
            return true;
        }
        
        Node current = head;
        while (current.getNext() != null) {
            Node next = current.getNext();
            if (next.getData().equals(element)) {
                current.setNext(next.getNext());
                size--;
                return true;
            }
            current = next;
        }
        return false;
    }
    
    
    /**
     * This method searches the linked list for the first occurrence
     * of the specified element and returns its index.
     * @param element the data value of the element to be searched for
     * @return the index of the element, -1 if not found
     */
    public int search(T element) {
        Node current = head;
        int index = 0;
        while (current != null) {
            if (current.getData().equals(element)) {
                return index;
            }
            current = current.getNext();
            index++;
        }
        return -1;
    }
    
    
    /**
     * Inner class for holding data and reference to next node.
     */
    private class Node {

        private T data;
        private Node next;

        public Node(T data, Node next) {
            this.data = data;
            this.next = next;
        }

        public T getData() {
            return data;
        }

        public Node getNext() {
            return next;
        }

        public void setNext(Node next) {
            this.next = next;
        }
    }
    
}