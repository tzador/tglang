public class Encryption {
    // Class for encryption methods
    private String key;

    // Constructor for Encryption
    public Encryption(String key) {
        this.key = key;
    }

    /* Method for Caesar cipher encryption
     * Takes in a string to be encrypted and returns the encrypted string
     */
    public String caesarEncrypt(String message) {
        char[] charArray = message.toCharArray(); // Convert string to char array
        int keyLength = this.key.length(); // Get length of key
        int counter = 0; // Counter for key characters
        for (int i = 0; i < charArray.length; i++) {
            charArray[i] += this.key.charAt(counter++); // XOR each character with key character
            counter %= keyLength; // Reset counter when it reaches the end of key
        }
        return new String(charArray); // Convert char array back to string
    }

    /* Method for AES encryption
     * Takes in a string to be encrypted and returns the encrypted string
     */
    public String aesEncrypt(String message) {
        byte[] encrypted = null;
        try {
            SecretKey secretKey = new SecretKeySpec(this.key.getBytes(), "AES"); // Create secret key
            Cipher cipher = Cipher.getInstance("AES"); // Get AES cipher instance
            cipher.init(Cipher.ENCRYPT_MODE, secretKey); // Initialize cipher for encryption
            encrypted = cipher.doFinal(message.getBytes()); // Perform encryption
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            e.printStackTrace();
        }
        return new String(encrypted); // Convert byte array to string
    }
}