/**
 * This is a class representing a student.
 * It contains information about the student's name, age, and grade level.
 */
public class Student {
    private String name; // holds the student's name
    private int age; // holds the student's age
    private int gradeLevel; // holds the student's grade level

    /**
     * Constructor for the Student class.
     * @param name the name of the student
     * @param age the age of the student
     * @param gradeLevel the grade level of the student
     */
    public Student(String name, int age, int gradeLevel) {
        this.name = name;
        this.age = age;
        this.gradeLevel = gradeLevel;
    }

    /**
     * Getter method for the student's name.
     * @return the student's name
     */
    public String getName() {
        return name;
    }

    /**
     * Getter method for the student's age.
     * @return the student's age
     */
    public int getAge() {
        return age;
    }

    /**
     * Getter method for the student's grade level.
     * @return the student's grade level
     */
    public int getGradeLevel() {
        return gradeLevel;
    }

    /**
     * Setter method for the student's name.
     * @param name the student's new name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Setter method for the student's age.
     * @param age the student's new age
     */
    public void setAge(int age) {
        this.age = age;
    }

    /**
     * Setter method for the student's grade level.
     * @param gradeLevel the student's new grade level
     */
    public void setGradeLevel(int gradeLevel) {
        this.gradeLevel = gradeLevel;
    }

    /**
     * Method for displaying the student's information.
     */
    public void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Grade Level: " + gradeLevel);
    }
}

/**
 * This is a class representing a classroom.
 * It contains information about the classroom's capacity and students enrolled.
 */
public class Classroom {
    private int capacity; // holds the classroom's capacity
    private List<Student> studentList; // holds a list of students enrolled in the classroom

    /**
     * Constructor for the Classroom class.
     * @param capacity the capacity of the classroom
     */
    public Classroom(int capacity) {
        this. capacity = capacity;
        studentList = new ArrayList<Student>(); // initializes the list of students
    }

    /**
     * Method for adding a new student to the classroom.
     * @param student the student to be added
     */
    public void addStudent(Student student) {
        if (studentList.size() < capacity) { // checks if the classroom is already at full capacity
            studentList.add(student);
            System.out.println(student.getName() + " has been enrolled in the classroom.");
        } else {
            System.out.println("The classroom is already at full capacity.");
        }
    }

    /**
     * Method for displaying the list of students enrolled in the classroom.
     */
    public void displayStudentList() {
        System.out.println("List of Enrolled Students:");
        for (Student student : studentList) { // loops through the list of students
            System.out.println(student.getName() + " - Age: " + student.getAge() + ", Grade Level: " + student.getGradeLevel());
        }
    }
}

// Example usage of the classes
public static void main(String[] args) {
    // Create a new student
    Student student1 = new Student("John Doe", 16, 10);

    // Create a new classroom
    Classroom classroom1 = new Classroom(20);

    // Add the student to the classroom
    classroom1.addStudent(student1);

    // Display the student list in the classroom
    classroom1.displayStudentList();
}