/**
 * Class to represent a binary search tree
 */
public class BinarySearchTree {

    /**
     * Node class to represent a single node in the tree
     */
    private class Node {
        int data;
        Node left;
        Node right;

        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    // Root node of the tree
    private Node root;

    /**
     * Constructor to initialize the tree with a root node
     */
    public BinarySearchTree() {
        this.root = null;
    }

    /**
     * Method to insert a new value into the tree
     * @param value - the value to be inserted
     */
    public void insert(int value) {
        // If tree is empty, set the root node as the new value
        if (this.root == null) {
            this.root = new Node(value);
        } else {
            // Else, find the appropriate location for the new value
            insertNode(this.root, value);
        }
    }

    /**
     * Recursive helper function for insert method
     * @param currentNode - current node being checked
     * @param value - the value to be inserted
     */
    private void insertNode(Node currentNode, int value) {
        // If the new value is less than the current node's data, go to the left subtree
        if (value < currentNode.data) {
            // If the left child is null, insert the new value as the left child of the current node
            if (currentNode.left == null) {
                currentNode.left = new Node(value);
            } else {
                // Else, call the function again with the left child as the current node
                insertNode(currentNode.left, value);
            }
        } else {
            // Else, go to the right subtree
            // If the right child is null, insert the new value as the right child of the current node
            if (currentNode.right == null) {
                currentNode.right = new Node(value);
            } else {
                // Else, call the function again with the right child as the current node
                insertNode(currentNode.right, value);
            }
        }
    }

    /**
     * Method to search for a given value in the tree
     * @param value - the value to be searched for
     * @return true if the value is found, false if not
     */
    public boolean search(int value) {
        // If tree is empty, return false
        if (this.root == null) {
            return false;
        } else {
            // Else, call the recursive helper function with the root node as the current node
            return searchNode(this.root, value);
        }
    }

    /**
     * Recursive helper function for search method
     * @param currentNode - current node being checked
     * @param value - the value to be searched for
     * @return true if the value is found, false if not
     */
    private boolean searchNode(Node currentNode, int value) {
        // If the current node's data matches the value, return true
        if (currentNode.data == value) {
            return true;
        } else {
            // If the value is less than the current node's data, go to the left subtree
            if (value < currentNode.data) {
                // If the left child is not null, call the function again with the left child as the current node
                if (currentNode.left != null) {
                    return searchNode(currentNode.left, value);
                } else {
                    // Else, return false as the value is not present in the tree
                    return false;
                }
            } else {
                // Else, go to the right subtree
                // If the right child is not null, call the function again with the right child as the current node
                if (currentNode.right != null) {
                    return searchNode(currentNode.right, value);
                } else {
                    // Else, return false as the value is not present in the tree
                    return false;
                }
            }
        }
    }

    /**
     * Method to delete a given value from the tree
     * @param value - the value to be deleted
     */
    public void delete(int value) {
        // If tree is empty, return
        if (this.root == null) {
            return;
        } else {
            // Else, call the recursive helper function with the root node as the current node
            deleteNode(this.root, value);
        }
    }

    /**
     * Recursive helper function for delete method
     * @param currentNode - current node being checked
     * @param value - the value to be deleted
     * @return the new subtree after deletion
     */
    private Node deleteNode(Node currentNode, int value) {
        // If the current node is null, return it
        if (currentNode == null) {
            return currentNode;
        }
        // If the value is less than the current node's data, go to the left subtree
        if (value < currentNode.data) {
            // Set the current node's left child as the result of recursive call with the value to be deleted
            currentNode.left = deleteNode(currentNode.left, value);
        } else if (value > currentNode.data) {
            // Else, go to the right subtree
            // Set the current node's right child as the result of recursive call with the value to be deleted
            currentNode.right = deleteNode(currentNode.right, value);
        } else {
            // Else, the current node's data matches the value to be deleted
            // If the current node has only one child, return that child as the new subtree
            if (currentNode.left == null) {
                return currentNode.right;
            } else if (currentNode.right == null) {
                return currentNode.left;
            }
            // Else, the current node has both children
            // Get the smallest node in the right subtree and replace the current node's data with it
            currentNode.data = minValue(currentNode.right);
            // Delete the smallest node from the right subtree
            currentNode.right = deleteNode(currentNode.right, currentNode.data);
        }
        // Return the modified current node
        return currentNode;
    }

    /**
     * Method to find the smallest value in a given subtree
     * @param root - the root node of the subtree
     * @return the smallest value in the subtree
     */
    private int minValue(Node root) {
        // Initialize a variable to store the smallest value
        int minValue = root.data;
        // Loop through the tree until the end of the left subtree is reached
        while (root.left != null) {
            // Update the smallest value if a smaller value is found
            minValue = root.left.data;
            // Go to the left child
            root = root.left;
        }
        // Return the smallest value
        return minValue;
    }
}