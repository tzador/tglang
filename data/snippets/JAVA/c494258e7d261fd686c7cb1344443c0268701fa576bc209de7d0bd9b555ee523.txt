/**
 * This class represents a binary search tree data structure.
 */
public class BinarySearchTree {
    
    /**
     * Inner class representing a node in the tree.
     */
    private class Node {
        int data;
        Node left;
        Node right;
        
        /**
         * Constructor for node with given data.
         */
        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }
    
    Node root;
    
    /**
     * Constructor for initializing an empty tree.
     */
    public BinarySearchTree() {
        this.root = null;
    }
    
    /**
     * Method for inserting a new node into the tree.
     * @param data The data to be inserted into the tree.
     */
    public void insert(int data) {
        this.root = insertRecursive(this.root, data);
    }
    
    /**
     * Recursive method for inserting a new node into the tree.
     * @param current The current node being checked.
     * @param data The data to be inserted into the tree.
     * @return The updated node after insertion.
     */
    private Node insertRecursive(Node current, int data) {
        if (current == null) {
            return new Node(data);
        }
        
        if (data < current.data) {
            current.left = insertRecursive(current.left, data);
        } else if (data > current.data) {
            current.right = insertRecursive(current.right, data);
        } else {
            // Duplicate values are not allowed in a binary search tree.
            throw new IllegalArgumentException("Duplicate values are not allowed.");
        }
        
        return current;
    }
    
    /**
     * Method for checking if the tree contains a given value.
     * @param data The value to search for.
     * @return True if the tree contains the given value, false otherwise.
     */
    public boolean contains(int data) {
        return containsRecursive(this.root, data);
    }
    
    /**
     * Recursive method for checking if the tree contains a given value.
     * @param current The current node being checked.
     * @param data The value to search for.
     * @return True if the tree contains the given value, false otherwise.
     */
    private boolean containsRecursive(Node current, int data) {
        if (current == null) {
            return false;
        }
        
        if (data == current.data) {
            return true;
        } else if (data < current.data) {
            return containsRecursive(current.left, data);
        } else {
            return containsRecursive(current.right, data);
        }
    }
}