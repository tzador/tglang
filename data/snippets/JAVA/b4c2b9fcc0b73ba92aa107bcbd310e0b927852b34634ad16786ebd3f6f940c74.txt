public class BinaryTree {
    /* This class represents a binary tree data structure.
    It contains methods for insertion, deletion, searching, and traversal. */
    
    private Node root; // The root node of the binary tree
    
    /* This nested class represents a node in the binary tree.
    Each node contains a key (value), a left child, and a right child. */
    private class Node {
        int key;
        Node left;
        Node right;
        
        Node(int key) { // Constructor for creating a new node with given key
            this.key = key;
            left = null;
            right = null;
        }
    }
    
    /* Inserts a new node with the given key into the binary tree.
    If the tree is empty, the new node becomes the root.
    Otherwise, the method traverses the tree recursively until
    it finds the correct position for insertion. */
    public void insert(int key) {
        root = insert(root, key);
    }
    
    /* Helper method for insert() which recursively traverses
    the tree to find the correct position for insertion.
    If the given key is smaller than the current node's key,
    it is inserted as the left child. Otherwise, it is inserted
    as the right child. */
    private Node insert(Node node, int key) {
        if (node == null) { // Base case: reached an empty subtree
            node = new Node(key);
        }
        else if (key < node.key) {
            node.left = insert(node.left, key); // Recursively insert into left subtree
        }
        else if (key > node.key) {
            node.right = insert(node.right, key); // Recursively insert into right subtree
        }
        // If key is equal to current node's key, do nothing (duplicate keys not allowed)
        return node;
    }
    
    /* Deletes the node with the given key from the tree.
    If the node has no children (leaf), it is deleted directly.
    If the node has one child, it is replaced by its child.
    If the node has two children, its successor (smallest key
    in its right subtree) is moved to its position, and then
    the successor node is deleted. */
    public void delete(int key) {
        root = delete(root, key);
    }
    
    /* Helper method for delete() which recursively traverses
    the tree to find the node with the given key.
    If the key is smaller than the current node's key, it is
    searched in the left subtree. If the key is larger, it is
    searched in the right subtree. If the key is equal to the
    current node's key, the deleteNode method is called to
    delete the node. */
    private Node delete(Node node, int key) {
        if (node == null) { // Base case: reached an empty subtree
            return node;
        }
        
        if (key < node.key) {
            node.left = delete(node.left, key); // Recursively search in left subtree
        }
        else if (key > node.key) {
            node.right = delete(node.right, key); // Recursively search in right subtree
        }
        else { // Node with given key is found
            if (node.left == null) { // If node has no left child
                return node.right; // Replace with its right child
            }
            else if (node.right == null) { // If node has no right child
                return node.left; // Replace with its left child
            }
            // If node has two children, find successor and replace with it
            node.key = findSuccessor(node.right); // Replace key with successor
            node.right = delete(node.right, node.key); // Delete successor node
        }
        return node; // Return modified node
    }
    
    /* Finds the successor of the given node (smallest key
    in its right subtree) by going left until a leaf is reached.
    We know that the successor is always the leftmost child
    in the right subtree. */
    private int findSuccessor(Node node) {
        int successor = node.key;
        while (node.left != null) { // Go left until we reach a leaf
            successor = node.left.key;
            node = node.left;
        }
        return successor;
    }
    
    /* Searches for a node with the given key in the tree.
    If found, the method returns true. Otherwise, it returns false. */
    public boolean search(int key) {
        return search(root, key);
    }
    
    /* Helper method for search() which recursively traverses
    the tree to find a node with the given key. */
    private boolean search(Node node, int key) {
        if (node == null) { // Base case: reached an empty subtree
            return false;
        }
        
        if (key < node.key) {
            return search(node.left, key); // Recursively search in left subtree
        }
        else if (key > node.key) {
            return search(node.right, key); // Recursively search in right subtree
        }
        else { // Node with given key is found
            return true;
        }
    }
    
    /* Prints the tree using inorder traversal (left-root-right). 
    This prints the nodes in sorted order. */
    public void printInorder() {
        printInorder(root);
    }
    
    /* Helper method for printInorder() which recursively traverses
    the tree in inorder and prints the nodes. */
    private void printInorder(Node node) {
        if (node != null) {
            // Go left
            printInorder(node.left);
            
            // Visit current node
            System.out.print(node.key + " ");
            
            // Go right
            printInorder(node.right);
        }
    }
    
    /* Prints the tree using preorder traversal (root-left-right). */
    public void printPreorder() {
        printPreorder(root);
    }
    
    /* Helper method for printPreorder() which recursively traverses
    the tree in preorder and prints the nodes. */
    private void printPreorder(Node node) {
        if (node != null) {
            // Visit current node
            System.out.print(node.key + " ");
            
            // Go left
            printPreorder(node.left);
            
            // Go right
            printPreorder(node.right);
        }
    }
    
    /* Prints the tree using postorder traversal (left-right-root). */
    public void printPostorder() {
        printPostorder(root);
    }
    
    /* Helper method for printPostorder() which recursively traverses
    the tree in postorder and prints the nodes. */
    private void printPostorder(Node node) {
        if (node != null) {
            // Go left
            printPostorder(node.left);
            
            // Go right
            printPostorder(node.right);
            
            // Visit current node
            System.out.print(node.key + " ");
        }
    }
    
    /* Prints the tree using level order traversal (breadth-first search). */
    public void printLevelOrder() {
        printLevelOrder(root);
    }
    
    /* Helper method for printLevelOrder() which uses a Queue
    to store the nodes on the current level and their children.
    This method prints the nodes in level order, from top to bottom,
    left to right. */
    private void printLevelOrder(Node node) {
        if (node == null) { // Base case: reached an empty tree
            return;
        }
        
        // Create a Queue to store the nodes on the current level
        Queue<Node> queue = new LinkedList<>();
        
        // Add root node to the queue
        queue.add(node);
        
        while (!queue.isEmpty()) {
            // Get and remove the node at the front of the queue
            Node currNode = queue.poll();
            
            // Visit current node
            System.out.print(currNode.key + " ");
            
            // Add left child to the queue
            if (currNode.left != null) {
                queue.add(currNode.left);
            }
            
            // Add right child to the queue
            if (currNode.right != null) {
                queue.add(currNode.right);
            }
        }
    }
}