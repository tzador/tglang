/**
* This class represents a binary search tree
*/
public class BinarySearchTree {
  private Node root; // root of the tree

  /**
  * Node class to store each element in the tree
  */
  private class Node {
    private int value; // value of the node
    private Node left; // reference to the left child
    private Node right; // reference to the right child

    /**
    * Constructor to create a Node with given value
    * @param val The value to be stored in the node
    */
    public Node(int val) {
      value = val;
      left = null;
      right = null;
    }

    /**
    * Method to insert a given value into the tree
    * @param val The value to be inserted
    */
    public void insert(int val) {
      // if given value is less than current node's value, go to left subtree
      if (val < value) {
        // if node has no left child, create a new Node with given value
        if (left == null) {
          left = new Node(val);
        }
        // else recursively insert into left subtree
        else {
          left.insert(val);
        }
      }
      // if given value is greater than current node's value, go to right subtree
      else if (val > value) {
        // if node has no right child, create a new Node with given value
        if (right == null) {
          right = new Node(val);
        }
        // else recursively insert into right subtree
        else {
          right.insert(val);
        }
      }
      // if value already exists in the tree, do nothing
      else {
        return;
      }
    }

    /**
    * Method to search for a given value in the tree
    * @param val The value to be searched for
    * @return True if value is found, False if not found
    */
    public boolean search(int val) {
      // if given value is equal to current node's value, return true
      if (val == value) {
        return true;
      }
      // if given value is less than current node's value, search in left subtree
      else if (val < value && left != null) {
        return left.search(val);
      }
      // if given value is greater than current node's value, search in right subtree
      else if (val > value && right != null) {
        return right.search(val);
      }
      // if value not found in tree, return false
      else {
        return false;
      }
    }

    /**
    * Method to delete a given value from the tree
    * @param val The value to be deleted
    * @param parent The parent node of the current node
    */
    public void delete(int val, Node parent) {
      // if given value is less than current node's value, go to left subtree
      if (val < value) {
        // if node has left child, recursively delete from left subtree
        if (left != null) {
          left.delete(val, this); // pass current node as parent
        }
      }
      // if given value is greater than current node's value, go to right subtree
      else if (val > value) {
        // if node has right child, recursively delete from right subtree
        if (right != null) {
          right.delete(val, this); // pass current node as parent
        }
      }
      // if value to be deleted is equal to current node's value
      else {
        // if node has two children, replace with the smallest node in the right subtree
        if (left != null && right != null) {
          value = right.getLeftmostValue(); // get the smallest value in the right subtree
          right.delete(value, this); // recursively delete the smallest value from the right subtree
        }
        // if node has no children, set parent's reference to null
        else if (parent == null) {
          root = null;
        }
        // if node has only one child, set parent's reference to child node
        else if (parent.left == this) {
          parent.left = (left != null) ? left : right; // if left child is not null, set it as parent's left child, else set right child
        }
        else if (parent.right == this) {
          parent.right = (left != null) ? left : right; // if right child is not null, set it as parent's right child, else set left child
        }
      }
    }

    /**
    * Method to get the smallest value in the tree
    * @return The smallest value in the tree
    */
    private int getLeftmostValue() {
      // if node has no left child, it is the smallest value
      if (left == null) {
        return value;
      }
      // else recursively get the smallest value in the left subtree
      else {
        return left.getLeftmostValue();
      }
    }

    /**
    * Method to get the successor of the current node
    * @return The successor of the current node
    */
    private Node getSuccessor() {
      // if node has a right child, successor is the smallest value in the right subtree
      if (right != null) {
        return right.getLeftmostNode();
      }
      // if node has no right child, successor is the parent node
      else {
        Node curr = this;
        Node parent = curr.parent;

        // while current node is the right child of its parent
        while (parent != null && curr == parent.right) {
          curr = parent;
          parent = curr.parent;
        }

        // if current node has no parent or is not the right child of its parent, there is no successor
        return (parent == null) ? null : parent;
      }
    }

    /**
    * Method to get the smallest node in the tree
    * @return The smallest node in the tree
    */
    private Node getLeftmostNode() {
      // if node has no left child, it is the smallest node
      if (left == null) {
        return this;
      }
      // else recursively get the smallest node in the left subtree
      else {
        return left.getLeftmostNode();
      }
    }

    /**
    * Method to print the tree in order
    */
    public void printInOrder() {
      // print the left subtree in order
      if (left != null) {
        left.printInOrder();
      }
      // print the current node's value
      System.out.print(value + " ");
      // print the right subtree in order
      if (right != null) {
        right.printInOrder();
      }
    }

    /**
    * Method to print the tree in postorder
    */
    public void printPostOrder() {
      // print the left subtree in postorder
      if (left != null) {
        left.printPostOrder();
      }
      // print the right subtree in postorder
      if (right != null) {
        right.printPostOrder();
      }
      // print the current node's value
      System.out.print(value + " ");
    }

    /**
    * Method to print the tree in preorder
    */
    public void printPreOrder() {
      // print the current node's value
      System.out.print(value + " ");
      // print the left subtree in preorder
      if (left != null) {
        left.printPreOrder();
      }
      // print the right subtree in preorder
      if (right != null) {
        right.printPreOrder();
      }
    }

  } // end of Node class

  /**
  * Constructor to create an empty tree
  */
  public BinarySearchTree() {
    root = null;
  }

  /**
  * Method to insert a value into the tree
  * @param val The value to be inserted
  */
  public void insert(int val) {
    // if tree is empty, create a new Node with given value as the root
    if (root == null) {
      root = new Node(val);
    }
    // else call insert method of Node class
    else {
      root.insert(val);
    }
  }

  /**
  * Method to search for a value in the tree
  * @param val The value to be searched for
  * @return True if value is found, False if not found
  */
  public boolean search(int val) {
    // if tree is empty, value cannot be found
    if (root == null) {
      return false;
    }
    // else call search method of Node class
    else {
      return root.search(val);
    }
  }

  /**
  * Method to delete a value from the tree
  * @param val The value to be deleted
  */
  public void delete(int val) {
    // if tree is empty, value cannot be deleted
    if (root == null) {
      return;
    }
    // else call delete method of Node class
    else {
      root.delete(val, null); // pass null as parent node
    }
  }

  /**
  * Method to print the tree in order
  */
  public void printInOrder() {
    // if tree is empty, there is nothing to print
    if (root == null) {
      return;
    }
    // else call printInOrder method of Node class
    else {
      root.printInOrder();
    }
  }

  /**
  * Method to print the tree in postorder
  */
  public void printPostOrder() {
    // if tree is empty, there is nothing to print
    if (root == null) {
      return;
    }
    // else call printPostOrder method of Node class
    else {
      root.printPostOrder();
    }
  }

  /**
  * Method to print the tree in preorder
  */
  public void printPreOrder() {
    // if tree is empty, there is nothing to print
    if (root == null) {
      return;
    }
    // else call printPreOrder method of Node class
    else {
      root.printPreOrder();
    }
  }

} // end of BinarySearchTree class