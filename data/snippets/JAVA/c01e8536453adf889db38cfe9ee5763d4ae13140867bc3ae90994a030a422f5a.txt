public class ComplexAlgorithm {

    /**
     * Calculates the nth Fibonacci number using a complex algorithm.
     *
     * @param n The index of the desired Fibonacci number.
     * @return The nth Fibonacci number.
     */
    public static int fibonacci(int n) {
        if (n < 2) {
            return n;
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    /**
     * Calculates the average of two numbers using a complex algorithm.
     *
     * @param a The first number.
     * @param b The second number.
     * @return The average of the two numbers.
     */
    public static double average(double a, double b) {
        double sum = a + b;
        double average = sum / 2;
        return average;
    }

    /**
     * Performs a linear search on an array of integers using a complex algorithm.
     *
     * @param arr The array to be searched.
     * @param target The target integer to be found.
     * @return True if the target integer is found, false otherwise.
     */
    public static boolean linearSearch(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return true;
            }
        }
        return false;
    }

    /**
     * Checks if a given number is a prime number using a complex algorithm.
     *
     * @param n The number to be checked.
     * @return True if the number is prime, false otherwise.
     */
    public static boolean isPrime(int n) {
        if (n < 2) {
            return false;
        }
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}