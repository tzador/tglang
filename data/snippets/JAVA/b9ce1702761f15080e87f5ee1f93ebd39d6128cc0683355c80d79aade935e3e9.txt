// This code snippet generates an AVL Tree with a search function and balances the tree if necessary
class AVLTree {
     Node root;

     // Node class to represent nodes in the tree
     class Node {
          int key, height;
          Node left, right;

          // Constructor for creating a new node
          Node (int key) {
               this.key = key;
               this.height = 1;
          }
     }

     // Search function to find a given key in the tree
     public boolean search (int key) {
          Node current = root;

          while (current != null) {
               // If key is found, return true
               if (current.key == key)
                    return true;

               // If key is greater than current node's key, search right subtree
               if (key > current.key)
                    current = current.right;
               // If key is less than current node's key, search left subtree
               else
                    current = current.left;
          }
          // If key is not found, return false
          return false;
     }

     // Function to update the height of a given node
     int updateHeight (Node node) {
          // If node is null, return 0
          if (node == null)
               return 0;

          // Recursively check height of left and right subtrees
          int leftHeight = updateHeight(node.left);
          int rightHeight = updateHeight(node.right);

          // Return the maximum of left and right subtree heights and add 1 for current node
          return Math.max(leftHeight, rightHeight) + 1;
     }

     // Function to get the balance factor of a node
     int getBalance (Node node) {
          // If node is null, return 0
          if (node == null)
               return 0;

          // Calculate the difference between left and right subtree heights
          int balance = updateHeight(node.left) - updateHeight(node.right);
          return balance;
     }

     // Function to rotate a subtree rooted with given node towards the left
     Node leftRotate (Node node) {
          // Store node's right child
          Node rightChild = node.right;
          
          // Perform rotation
          node.right = rightChild.left;
          rightChild.left = node;

          // Update heights of nodes
          node.height = updateHeight(node);
          rightChild.height = updateHeight(rightChild);

          // Return the new root of the subtree
          return rightChild;
     }

     // Function to rotate a subtree rooted with given node towards the right
     Node rightRotate (Node node) {
          // Store node's left child
          Node leftChild = node.left;
          
          // Perform rotation
          node.left = leftChild.right;
          leftChild.right = node;

          // Update heights of nodes
          node.height = updateHeight(node);
          leftChild.height = updateHeight(leftChild);

          // Return the new root of the subtree
          return leftChild;
     }

     // Function to insert a new key into the tree
     public void insert (int key) {
          root = insertHelper(root, key);
     }

     // Helper function for insertion
     Node insertHelper (Node node, int key) {
          // If node is null, create a new node and return it
          if (node == null)
               return new Node(key);

          // If key is less than current node's key, insert in left subtree
          if (key < node.key)
               node.left = insertHelper(node.left, key);
          // If key is greater than current node's key, insert in right subtree
          else if (key > node.key)
               node.right = insertHelper(node.right, key);
          // If key already exists, do nothing
          else
               return node;

          // Update the height of current node
          node.height = updateHeight(node);

          // Calculate balance of current node
          int balance = getBalance(node);

          // Left Left case - perform right rotation
          if (balance > 1 && key < node.left.key)
               return rightRotate(node);

          // Right Right case - perform left rotation
          if (balance < -1 && key > node.right.key)
               return leftRotate(node);

          // Left Right case - perform left and then right rotation
          if (balance > 1 && key > node.left.key) {
               node.left = leftRotate(node.left);
               return rightRotate(node);
          }

          // Right Left case - perform right and then left rotation
          if (balance < -1 && key < node.right.key) {
               node.right = rightRotate(node.right);
               return leftRotate(node);
          }

          // Return the unchanged node
          return node;
     }
}