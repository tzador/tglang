/**
 * This class represents a generic tree data structure.
 * It contains methods for adding and removing nodes, as well as traversing and searching the tree.
 * @param <T> the type of data stored in the tree
 */
public class Tree<T> {

    private Node<T> root; // the root node of the tree

    /**
     * Inserts a new node with the given data into the tree.
     * The new node is inserted as a child of the specified parent node.
     * @param data the data to be stored in the new node
     * @param parent the parent node
     */
    public void insert(T data, Node<T> parent) {
        if (root == null) { // if the tree is empty, set the new node as the root
            root = new Node<>(data);
        } else {
            parent.addChild(new Node<>(data)); // add the new node as a child of the parent node
        }
    }

    /**
     * Removes the specified node and all of its children from the tree.
     * @param node the node to be removed
     */
    public void remove(Node<T> node) {
        // recursively remove all children of the specified node
        for (Node<T> child : node.getChildren()) {
            remove(child);
        }
        // remove the specified node from its parent's list of children
        node.getParent().removeChild(node);
    }

    /**
     * Traverses the tree using depth-first search and prints the data of each node visited.
     * @param start the starting node for the traversal
     */
    public void depthFirstSearch(Node<T> start) {
        // use a stack to keep track of visited nodes
        Stack<Node<T>> stack = new Stack<>();
        stack.push(start); // add the starting node to the stack
        while (!stack.isEmpty()) {
            Node<T> current = stack.pop(); // pop the top node from the stack
            System.out.println(current.getData()); // print the data of the current node
            // add all of the current node's children to the stack
            for (Node<T> child : current.getChildren()) {
                stack.push(child);
            }
        }
    }

    /**
     * Traverses the tree using breadth-first search and prints the data of each node visited.
     * @param start the starting node for the traversal
     */
    public void breadthFirstSearch(Node<T> start) {
        // use a queue to keep track of visited nodes
        Queue<Node<T>> queue = new LinkedList<>();
        queue.add(start); // add the starting node to the queue
        while (!queue.isEmpty()) {
            Node<T> current = queue.poll(); // remove the first node from the queue
            System.out.println(current.getData()); // print the data of the current node
            // add all of the current node's children to the queue
            for (Node<T> child : current.getChildren()) {
                queue.add(child);
            }
        }
    }

    /**
     * Searches the tree for a node with the specified data using breadth-first search.
     * @param data the data to search for
     * @param start the starting node for the search
     * @return the first node with the specified data, or null if no node is found
     */
    public Node<T> breadthFirstSearch(T data, Node<T> start) {
        // use a queue to keep track of visited nodes
        Queue<Node<T>> queue = new LinkedList<>();
        queue.add(start); // add the starting node to the queue
        while (!queue.isEmpty()) {
            Node<T> current = queue.poll(); // remove the first node from the queue
            // if the current node's data matches the search data, return the node
            if (current.getData().equals(data)) {
                return current;
            }
            // add all of the current node's children to the queue
            for (Node<T> child : current.getChildren()) {
                queue.add(child);
            }
        }
        return null; // return null if no node is found
    }

    /**
     * Represents a node in the tree data structure.
     * @param <T> the type of data stored in the node
     */
    private static class Node<T> {

        private T data; // the data stored in the node
        private Node<T> parent; // the parent node
        private List<Node<T>> children; // a list of child nodes

        /**
         * Constructs a new node with the given data, parent node, and list of children.
         * @param data the data to be stored in the node
         * @param parent the parent node
         * @param children the list of child nodes
         */
        public Node(T data, Node<T> parent, List<Node<T>> children) {
            this.data = data;
            this.parent = parent;
            this.children = children;
        }

        /**
         * Constructs a new node with the given data and no parent or children.
         * @param data the data to be stored in the node
         */
        public Node(T data) {
            this(data, null, new ArrayList<>()); // call the other constructor with default values
        }

        /**
         * Adds a child node to this node's list of children.
         * @param child the child node to be added
         */
        public void addChild(Node<T> child) {
            children.add(child);
            child.setParent(this); // set this node as the parent of the new child node
        }

        /**
         * Removes a child node from this node's list of children.
         * @param child the child node to be removed
         */
        public void removeChild(Node<T> child) {
            children.remove(child);
            child.setParent(null); // set the child's parent node to null
        }

        // getters and setters for the data, parent node, and list of children

        public T getData() {
            return data;
        }

        public Node<T> getParent() {
            return parent;
        }

        public void setParent(Node<T> parent) {
            this.parent = parent;
        }

        public List<Node<T>> getChildren() {
            return children;
        }

        public void setData(T data) {
            this.data = data;
        }

        public void setChildren(List<Node<T>> children) {
            this.children = children;
        }
    }
}