/**
* This class represents a complex polynomial equation.
*/
public class Polynomial {
   private int[] coefficients; // Array of coefficients for each term
   private int degree; // degree of polynomial
   
   /**
   * Parameterized constructor that takes in an array of coefficients and sets the degree of polynomial accordingly.
   * @param coeffs array of coefficients
   */
   public Polynomial(int[] coeffs) {
      this.coefficients = coeffs;
      this.degree = coeffs.length - 1;
   }
   
   /**
   * Method that evaluates the polynomial for a given value of x.
   * @param x value of x
   * @return result of polynomial evaluation
   */
   public int evaluate(int x) {
       int result = 0;
       for (int i = 0; i <= degree; i++) {
           result += coefficients[i] * Math.pow(x, i);
       }
       return result;
   }
   
   /**
   * Method that adds two polynomials together and returns the result.
   * @param p polynomial to be added
   * @return sum of the two polynomials
   */
   public Polynomial add(Polynomial p) {
       int[] coeffs = new int[Math.max(this.degree, p.getDegree()) + 1]; // array for storing the coefficients of the sum
       for (int i = 0; i <= this.degree; i++) {
           coeffs[i] += this.coefficients[i];
       }
       for (int i = 0; i <= p.getDegree(); i++) {
           coeffs[i] += p.getCoefficients()[i];
       }
       return new Polynomial(coeffs);
   }
   
   /**
   * Method that multiplies two polynomials together and returns the result.
   * @param p polynomial to be multiplied
   * @return product of the two polynomials
   */
    public Polynomial multiply(Polynomial p) {
       int[] coeffs = new int[this.degree + p.getDegree() + 1]; // array for storing the coefficients of the product
       for (int i = 0; i <= this.degree; i++) {
           for(int j = 0; j <= p.getDegree(); j++) {
               coeffs[i+j] += this.coefficients[i] * p.getCoefficients()[j];
           }
       }
       return new Polynomial(coeffs);
   }
   
   /**
   * Method that returns the string representation of the polynomial in standard form.
   * @return string representation of the polynomial
   */
   @Override
   public String toString() {
       String result = "";
       for (int i = this.degree; i >= 0; i--) {
           if (coefficients[i] != 0) {
               result += "(" + coefficients[i] + ")x^" + i + " + ";
           }
       }
       return result.substring(0, result.length() - 3);
   }
}