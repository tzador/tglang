// This code snippet creates a nested class with inheritance and generics

public class OuterClass<T> {
    
    private T genericField;
    
    // Constructor that sets the generic field
    public OuterClass(T field) {
        this.genericField = field;
    }
    
    // Method that returns the generic field
    public T getGenericField() {
        return this.genericField;
    }
    
    // Inner class that extends the generic type T
    private class InnerClass extends T {
        private String nestedField;
        
        // Constructor that sets the nested field
        public InnerClass(T field, String nestedField) {
            super(genericField);
            this.nestedField = nestedField;
        }
        
        // Method that returns the nested field
        public String getNestedField() {
            return this.nestedField;
        }
    }
} // end of OuterClass

// Create an instance of the OuterClass with a String as the generic type
OuterClass<String> outerClass = new OuterClass<>("Hello World");

// Create an instance of the InnerClass and pass in the generic field and a string as the nested field
OuterClass.InnerClass innerClass = outerClass.new InnerClass(outerClass.getGenericField(), "nested");

// Print out the values of the generic field and the nested field
System.out.println(outerClass.getGenericField()); // Output: Hello World
System.out.println(innerClass.getNestedField()); // Output: nested