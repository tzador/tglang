public class BinaryTree { //declaring a class named BinaryTree

    Node root; //declaring a Node variable named root

    //Node class to represent nodes in the binary tree
    class Node {
        int data;
        Node left, right;
        
        //constructor to create a new node
        Node(int data) {
            this.data = data;
            left = right = null;
        }
    }

    //insert method to add new nodes to the binary tree
    public void insert(int data) {
        root = insertNode(root, data); 
    }

    //helper method to recursively insert nodes
    public Node insertNode(Node root, int data) {
        //if root is null, create a new node and assign it as root
        if (root == null) {
            root = new Node(data);
            return root;
        }

        //otherwise, insert the new node in the correct position 
        if (data < root.data)
            root.left = insertNode(root.left, data);
        else if (data > root.data)
            root.right = insertNode(root.right, data);

        //return the updated root node
        return root;
    }

    //method to print the nodes of the binary tree in inorder traversal
    public void inorder() {
        inorderTraversal(root);
    }

    //helper method to recursively traverse the nodes in inorder manner
    public void inorderTraversal(Node root) {
        if (root != null) {
            //traverse the left subtree
            inorderTraversal(root.left);

            //print the root node
            System.out.print(root.data + " ");

            //traverse the right subtree
            inorderTraversal(root.right);
        }
    }
    
    //main method to create a binary tree and test the functionality
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        //inserting nodes into the binary tree
        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);

        //print the nodes of the binary tree in inorder traversal
        tree.inorder(); //output: 20 30 40 50 60 70 80
    }
}