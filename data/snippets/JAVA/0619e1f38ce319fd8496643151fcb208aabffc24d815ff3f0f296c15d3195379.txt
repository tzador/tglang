/**
 * This class represents a node in a binary search tree.
 */
  public class BSTNode<T extends Comparable<T>> {
    // instance variables
    private T data;
    private BSTNode<T> leftChild;
    private BSTNode<T> rightChild;
    
    /**
     * Constructor for a BSTNode with given data.
     * @param data data to be stored in the node
     */
    public BSTNode(T data) {
        this.data = data;
        this.leftChild = null;
        this.rightChild = null;
    }
    
    /**
     * Getter method for the node's data.
     * @return data stored in the node
     */
    public T getData() {
        return this.data;
    }
    
    /**
     * Setter method for the node's left child.
     * @param leftChild the left child node to be set
     */
    public void setLeftChild(BSTNode<T> leftChild) {
        this.leftChild = leftChild;
    }
    
    /**
     * Setter method for the node's right child.
     * @param rightChild the right child node to be set
     */
    public void setRightChild(BSTNode<T> rightChild) {
        this.rightChild = rightChild;
    }
    
    /**
     * Getter method for the node's left child.
     * @return the left child node
     */
    public BSTNode<T> getLeftChild() {
        return this.leftChild;
    }
    
    /**
     * Getter method for the node's right child.
     * @return the right child node
     */
    public BSTNode<T> getRightChild() {
        return this.rightChild;
    }
    
    /**
     * Method to check if the node has a left child.
     * @return true if the node has a left child, false otherwise
     */
    public boolean hasLeftChild() {
        return this.leftChild != null;
    }
    
    /**
     * Method to check if the node has a right child.
     * @return true if the node has a right child, false otherwise
     */
    public boolean hasRightChild() {
        return this.rightChild != null;
    }
    
    /**
     * Method to check if the node is a leaf node.
     * @return true if the node is a leaf node, false otherwise
     */
    public boolean isLeafNode() {
        return !this.hasLeftChild() && !this.hasRightChild();
    }
    
    /**
     * Method to insert a new node with given data into the binary search tree.
     * @param newData data for the new node to be inserted
     */
    public void insert(T newData) {
        // if the newData is less than the current node's data
        if (newData.compareTo(this.data) < 0) {
            // if the current node has a left child
            if (this.hasLeftChild()) {
                // recursively call insert on the left child
                this.leftChild.insert(newData);
            } else { // otherwise
                // create a new node with the new data
                BSTNode<T> newNode = new BSTNode<T>(newData);
                // set the current node's left child to the new node
                this.setLeftChild(newNode);
            }
        } else { // otherwise
            // if the current node has a right child
            if (this.hasRightChild()) {
                // recursively call insert on the right child
                this.rightChild.insert(newData);
            } else { // otherwise
                // create a new node with the new data
                BSTNode<T> newNode = new BSTNode<T>(newData);
                // set the current node's right child to the new node
                this.setRightChild(newNode);
            }
        }
    }
    
    /**
     * Method to search for a node with given data in the binary search tree.
     * @param data the data to search for
     * @return the node with the given data if found, null otherwise
     */
    public BSTNode<T> search(T data) {
        // if the data is equal to the current node's data, return the current node
        if (data.compareTo(this.data) == 0) {
            return this;
        } else if (data.compareTo(this.data) < 0) { // if the data is less than the current node's data
            // if the current node has a left child
            if (this.hasLeftChild()) {
                // recursively call search on the left child
                return this.leftChild.search(data);
            } else {
                // if there is no left child, the data does not exist in the tree
                return null;
            }
        } else { // if the data is greater than the current node's data
            // if the current node has a right child
            if (this.hasRightChild()) {
                // recursively call search on the right child
                return this.rightChild.search(data);
            } else {
                // if there is no right child, the data does not exist in the tree
                return null;
            }
        }
    }
    
    /**
     * Method to delete a node with given data from the binary search tree.
     * @param data the data of the node to be deleted
     * @param parent the parent node of the node to be deleted
     * @return true if the node was successfully deleted, false otherwise
     */
    public boolean delete(T data, BSTNode<T> parent) {
        // if the data is less than the current node's data
        if (data.compareTo(this.data) < 0) {
            // if the current node has a left child
            if (this.hasLeftChild()) {
                // recursively call delete on the left child
                return this.leftChild.delete(data, this);
            } else {
                // if there is no left child, the data does not exist in the tree
                return false;
            }
        } else if (data.compareTo(this.data) > 0) { // if the data is greater than the current node's data
            // if the current node has a right child
            if (this.hasRightChild()) {
                // recursively call delete on the right child
                return this.rightChild.delete(data, this);
            } else {
                // if there is no right child, the data does not exist in the tree
                return false;
            }
        } else { // if the data is equal to the current node's data
            // if the current node is a leaf node
            if (this.isLeafNode()) {
                // if the current node is the root node
                if (this.equals(parent)) {
                    // set the root node to null and return true
                    this.data = null;
                    return true;
                } else { // otherwise, set the appropriate child of the parent node to null and return true
                    if (parent.hasLeftChild() && parent.getLeftChild().equals(this)) {
                        parent.setLeftChild(null);
                    } else {
                        parent.setRightChild(null);
                    }
                    return true;
                }
            } else if (!this.hasLeftChild() && this.hasRightChild()) { // if the current node only has a right child
                 // if the current node is the root node
                 if (this.equals(parent)) {
                     // set the root node to the current node's right child and return true
                     this.data = this.rightChild.getData();
                     this.setRightChild(null);
                     return true;
                 } else { // otherwise, set the appropriate child of the parent node to the current node's right child and return true
                     if (parent.hasLeftChild() && parent.getLeftChild().equals(this)) {
                         parent.setLeftChild(this.rightChild);
                     } else {
                         parent.setRightChild(this.rightChild);
                     }
                     return true;
                 }
            } else if (this.hasLeftChild() && !this.hasRightChild()) { // if the current node only has a left child
                // if the current node is the root node
                if (this.equals(parent)) {
                    // set the root node to the current node's left child and return true
                    this.data = this.leftChild.getData();
                    this.setLeftChild(null);
                    return true;
                } else { // otherwise, set the appropriate child of the parent node to the current node's left child and return true
                    if (parent.hasLeftChild() && parent.getLeftChild().equals(this)) {
                        parent.setLeftChild(this.leftChild);
                    } else {
                        parent.setRightChild(this.leftChild);
                    }
                    return true;
                }
            } else { // if the current node has 2 children
                // find the minimum value in the right subtree
                T minValue = findMinValue(this.rightChild);
                // set the current node's data to the minimum value
                this.data = minValue;
                // recursively call delete on the right subtree with the minimum value to delete it
                return this.rightChild.delete(minValue, this);
            }
        }
    }
    
    /**
     * Method to find the minimum value in a given subtree.
     * @param subtree the subtree to find the minimum value in
     * @return the minimum value in the subtree
     */
    private T findMinValue(BSTNode<T> subtree) {
        // if the subtree has no left child, the root node is the minimum value
        if (!subtree.hasLeftChild()) {
            return subtree.getData();
        } else { // otherwise, recursively call findMinValue on the left subtree
            return findMinValue(subtree.getLeftChild());
        }
    }
}