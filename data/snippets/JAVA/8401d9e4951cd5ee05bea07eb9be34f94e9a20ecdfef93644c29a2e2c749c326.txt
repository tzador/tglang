// This code snippet is a demonstration of creating a binary search tree in JAVA
public class BinarySearchTree<T extends Comparable<T>> {

    // Defining the node for the binary search tree
    private class Node {
        private T data;
        private Node left;
        private Node right;

        // Constructor for the node class
        public Node(T data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    private Node root; // The root of the binary search tree

    // Constructor for the binary search tree
    public BinarySearchTree() {
        this.root = null;
    }

    // Method to insert a new node in the binary search tree
    public void insert(T data) {
        root = insertNode(root, data);
    }

    // Helper method to insert a new node recursively
    private Node insertNode(Node root, T data) {
        if (root == null) {
            root = new Node(data);
            return root;
        }

        if (data.compareTo(root.data) < 0) {
            root.left = insertNode(root.left, data);
        } else {
            root.right = insertNode(root.right, data);
        }

        return root;
    }

    // Method to search for a specific element in the binary search tree
    public boolean search(T data) {
        return searchNode(root, data);
    }

    // Helper method to search for a specific element recursively
    private boolean searchNode(Node root, T data) {
        if (root == null) {
            return false;
        }

        if (data.compareTo(root.data) == 0) {
            return true;
        } else if (data.compareTo(root.data) < 0) {
            return searchNode(root.left, data);
        } else {
            return searchNode(root.right, data);
        }
    }

    // Method to delete a specific element from the binary search tree
    public void delete(T data) {
        root = deleteNode(root, data);
    }

    // Helper method to delete a specific element recursively
    private Node deleteNode(Node root, T data) {
        if (root == null) {
            return root;
        }

        if (data.compareTo(root.data) < 0) {
            root.left = deleteNode(root.left, data);
        } else if (data.compareTo(root.data) > 0) {
            root.right = deleteNode(root.right, data);
        } else {
            // Case 1: Node has no children
            if (root.left == null && root.right == null) {
                root = null;
            }
            // Case 2: Node has one child
            else if (root.left == null) {
                root = root.right;
            } else if (root.right == null) {
                root = root.left;
            }
            // Case 3: Node has two children
            else {
                // Find the minimum value in the right subtree
                T minData = minValue(root.right);
                // Set the current node's data to the minimum value
                root.data = minData;
                // Delete the minimum value from the right subtree
                root.right = deleteNode(root.right, minData);
            }
        }
        return root;
    }

    // Helper method to find the minimum value in a binary search tree
    private T minValue(Node root) {
        T min = root.data;
        while (root.left != null) {
            min = root.left.data;
            root = root.left;
        }
        return min;
    }

    // Method to print the contents of the binary search tree in order
    public void printInOrder() {
        printInOrderHelper(root);
    }

    // Helper method to print the contents of the binary search tree in order
    private void printInOrderHelper(Node root) {
        if (root == null) {
            return;
        }
        printInOrderHelper(root.left);
        System.out.print(root.data + " ");
        printInOrderHelper(root.right);
    }
}