/**
 * This class represents a binary search tree data structure.
 * It contains methods for insertion, deletion, searching, and traversing the tree.
 */
public class BinarySearchTree {

    /**
     * This inner class represents a node in the binary search tree.
     * It contains fields for the data of the node, as well as its left and right child nodes.
     */
    private class Node {
        int data;
        Node left;
        Node right;

        /**
         * Constructor for the Node class.
         * Sets the data of the node to the given value.
         *
         * @param data the value to be stored in the node
         */
        public Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }

    // Root node of the tree
    private Node root;

    /**
     * Constructor for the BinarySearchTree class.
     * Initializes the root node to null.
     */
    public BinarySearchTree() {
        root = null;
    }

    /**
     * Method to insert a given value into the binary search tree.
     * If the tree is empty, the value will be inserted as the root node.
     * Otherwise, it will be inserted at the appropriate position based on its value.
     *
     * @param value the value to be inserted
     */
    public void insert(int value) {
        root = insertNode(root, value);
    }

    /**
     * Recursive helper method to insert a given value into the binary search tree.
     * Checks if the tree is empty, if so, creates a new node and sets it as the root.
     * Otherwise, recursively traverses the tree until the appropriate position is found
     * and inserts the value as a new node.
     *
     * @param node the current node being checked
     * @param value the value to be inserted
     * @return the updated tree with the new node inserted
     */
    private Node insertNode(Node node, int value) {
        if (node == null) {
            node = new Node(value);
        } else if (value < node.data) {
            node.left = insertNode(node.left, value);
        } else {
            node.right = insertNode(node.right, value);
        }
        return node;
    }

    /**
     * Method to delete a given value from the binary search tree.
     * If the tree is empty, nothing will be deleted.
     * Otherwise, it will recursively traverse the tree and delete the value if found.
     *
     * @param value the value to be deleted
     */
    public void delete(int value) {
        root = deleteNode(root, value);
    }

    /**
     * Recursive helper method to delete a given value from the binary search tree.
     * Checks if the tree is empty or if the value is not present in the tree.
     * If the value is smaller than the node, recursively calls itself on the left subtree.
     * If the value is larger than the node, recursively calls itself on the right subtree.
     * If the value is found, deletes the node and rearranges the tree accordingly.
     *
     * @param node the current node being checked
     * @param value the value to be deleted
     * @return the updated tree with the selected node deleted
     */
    private Node deleteNode(Node node, int value) {
        if (node == null) {
            System.out.println("Value not found in tree!");
        } else if (value < node.data) {
            node.left = deleteNode(node.left, value);
        } else if (value > node.data) {
            node.right = deleteNode(node.right, value);
        } else {
            if (isLeaf(node)) {
                node = null;
            } else if (node.left == null) {
                node = node.right;
            } else if (node.right == null) {
                node = node.left;
            } else {
                Node temp = findMinimumNode(node.right);
                node.data = temp.data;
                node.right = deleteNode(node.right, temp.data);
            }
        }
        return node;
    }

    /**
     * Method to search for a given value in the binary search tree.
     * If the tree is empty, returns false.
     * Otherwise, traverses the tree recursively and returns true if the value is found.
     *
     * @param value the value to be searched for
     * @return true if the value is found in the tree, false otherwise
     */
    public boolean search(int value) {
        return searchTree(root, value);
    }

    /**
     * Recursive helper method to search for a given value in the binary search tree.
     * Checks if the tree is empty or if the value is not present in the tree.
     * If the value is smaller than the node, recursively calls itself on the left subtree.
     * If the value is larger than the node, recursively calls itself on the right subtree.
     * If the value is found, returns true.
     *
     * @param node the current node being checked
     * @param value the value to be searched for
     * @return true if the value is found in the tree, false otherwise
     */
    private boolean searchTree(Node node, int value) {
        if (node == null) {
            return false;
        } else if (value == node.data) {
            return true;
        } else if (value < node.data) {
            return searchTree(node.left, value);
        } else {
            return searchTree(node.right, value);
        }
    }

    /**
     * Method to perform an inorder traversal of the binary search tree.
     * Prints out the values of the nodes in ascending order.
     */
    public void inorderTraversal() {
        inorder(root);
    }

    /**
     * Recursive helper method for the inorder traversal of the binary search tree.
     * Traverses the left subtree, visits the current node, and then traverses the right subtree.
     *
     * @param node the current node being visited
     */
    private void inorder(Node node) {
        if (node == null) {
            return;
        }
        inorder(node.left);
        System.out.print(node.data + " ");
        inorder(node.right);
    }

    /**
     * Method to check if a given node is a leaf (i.e. has no children).
     *
     * @param node the node to be checked
     * @return true if the node is a leaf, false otherwise
     */
    private boolean isLeaf(Node node) {
        return (node.left == null && node.right == null);
    }

    /**
     * Method to find the minimum node in a given subtree.
     * Used during the deletion of a node with two children.
     *
     * @param node the root of the given subtree
     * @return the minimum node in the subtree
     */
    private Node findMinimumNode(Node node) {
        if (node.left == null) {
            return node;
        } else {
            return findMinimumNode(node.left);
        }
    }
}