// This code snippet creates a sorting algorithm using merge sort technique
public static void mergeSort(int[] arr, int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2; //calculating the middle index
        mergeSort(arr, low, mid);   //recursive call for left subarray
        mergeSort(arr, mid + 1, high);  //recursive call for right subarray
        merge(arr, low, mid, high); //merge the two sorted subarrays
    }
}

//This function merges two subarrays of arr[]
public static void merge(int[] arr, int low, int mid, int high) {
    int n1 = mid - low + 1; //size of left subarray
    int n2 = high - mid;    //size of right subarray

    //create temporary arrays for left and right subarrays
    int[] left = new int[n1];
    int[] right = new int[n2];

    //copy data to temporary arrays
    for (int i = 0; i < n1; i++) {
        left[i] = arr[low + i];
    }
    for (int j = 0; j < n2; j++) {
        right[j] = arr[mid + 1 + j];
    }

    //merge the two temporary arrays
    int i = 0, j = 0;
    int k = low;
    while (i < n1 && j < n2) {
        if (left[i] <= right[j]) {
            arr[k] = left[i];
            i++;
        } else {
            arr[k] = right[j];
            j++;
        }
        k++;
    }

    //copy remaining elements from left subarray
    while (i < n1) {
        arr[k] = left[i];
        i++;
        k++;
    }

    //copy remaining elements from right subarray
    while (j < n2) {
        arr[k] = right[j];
        j++;
        k++;
    }
}

//example usage of the mergeSort function
int[] arr = {5, 2, 7, 4, 9, 1, 6};
mergeSort(arr, 0, arr.length - 1);
System.out.println(Arrays.toString(arr)); //Output: [1, 2, 4, 5, 6, 7, 9] (sorted array)