/**
 * This class represents a library that contains a list of books.
 */
public class Library {
    private List<Book> books;

    /**
     * Constructor for Library class that initializes the list of books.
     */
    public Library() {
        this.books = new ArrayList<>();
    }

    /**
     * Adds a new book to the library's list of books.
     * @param book the book to be added
     * @return true if the book was successfully added, false if the book already exists in the library
     */
    public boolean addBook(Book book) {
        if (books.contains(book)) {
            return false;
        } else {
            books.add(book);
            return true;
        }
    }

    /**
     * Removes a book from the library's list of books.
     * @param book the book to be removed
     * @return true if the book was successfully removed, false if the book does not exist in the library
     */
    public boolean removeBook(Book book) {
        if (books.contains(book)) {
            books.remove(book);
            return true;
        } else {
            return false;
        }
    }

    /**
     * Updates the information of a book in the library's list of books.
     * @param book the book to be updated
     * @param newTitle the new title of the book
     * @param newAuthor the new author of the book
     * @param newGenre the new genre of the book
     * @param newYear the new publication year of the book
     * @return true if the book was successfully updated, false if the book does not exist in the library
     */
    public boolean updateBook(Book book, String newTitle, String newAuthor, String newGenre, int newYear) {
        if (books.contains(book)) {
            book.setTitle(newTitle);
            book.setAuthor(newAuthor);
            book.setGenre(newGenre);
            book.setYear(newYear);
            return true;
        } else {
            return false;
        }
    }

    /**
     * Searches for a book in the library's list of books based on a keyword.
     * @param keyword the keyword to be searched for in the book title or author
     * @return a list of books that match the given keyword
     */
    public List<Book> searchBooks(String keyword) {
        List<Book> matchingBooks = new ArrayList<>();
        for (Book book : books) {
            if (book.getTitle().toLowerCase().contains(keyword.toLowerCase()) || book.getAuthor().toLowerCase().contains(keyword.toLowerCase())) {
                matchingBooks.add(book);
            }
        }
        return matchingBooks;
    }
}