import java.util.*;

/**
 * This class represents a Deck of Cards.
 */
public class Deck {

    private List<Card> cards;
    private int numDecks;

    /**
     * Constructs a Deck of Cards with the specified number of decks.
     * @param numDecks the number of decks to be included in the deck
     */
    public Deck(int numDecks) {
        this.numDecks = numDecks;
        this.cards = new ArrayList<>();

        // Initialize the deck with the specified number of decks
        for (int i = 0; i < numDecks; i++) {
            // Iterate through each suit and rank to create a full deck
            for (Suit suit : Suit.values()) {
                for (Rank rank : Rank.values()) {
                    Card card = new Card(rank, suit);
                    cards.add(card);
                }
            }
        }
    }

    /**
     * Shuffles the deck, randomly reordering the cards.
     */
    public void shuffle() {
        // Use Collections.shuffle() to randomly re-order the cards
        Collections.shuffle(cards);
    }

    /**
     * Deals a card from the deck by removing and returning the top card.
     * @return the top card from the deck
     * @throws NoSuchElementException if the deck is empty
     */
    public Card dealCard() {
        // Check if the deck is empty
        if (cards.isEmpty()) {
            throw new NoSuchElementException("Deck is empty");
        }

        // Remove and return the top card from the deck
        return cards.remove(0);
    }

    /**
     * Sorts the deck in ascending order based on card rank and suit.
     */
    public void sort() {
        // Use Collections.sort() and pass in a custom Comparator to sort the cards
        Collections.sort(cards, new Comparator<Card>() {
            @Override
            public int compare(Card card1, Card card2) {
                // First compare the ranks
                int rankComparison = card1.getRank().compareTo(card2.getRank());

                // If ranks are equal, compare the suits
                if (rankComparison == 0) {
                    return card1.getSuit().compareTo(card2.getSuit());
                }

                return rankComparison;
            }
        });
    }
}