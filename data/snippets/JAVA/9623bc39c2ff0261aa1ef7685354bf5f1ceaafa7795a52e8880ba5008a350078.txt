// This code snippet creates a class called "LinkedList" which implements the LinkedList interface
import java.util.*;
class LinkedList<E> implements LinkedList
{
    // The size of the linked list
    private int size;
    
    // The head node of the linked list
    private Node<E> head;
    
    // Constructor to initialize the linked list
    public LinkedList()
    {
        this.head = null;
        this.size = 0;
    }
    
    // Method to add a new node at the beginning of the linked list
    public void addFirst(E element)
    {
        // Create a new node with the given element
        Node<E> newNode = new Node<>(element);
        
        // Point the head node to the new node
        newNode.setNext(head);
        
        // Set the new node as the head node
        head = newNode;
        
        // Increase the size of the linked list by 1
        size++;
    }
    
    // Method to add a new node at the end of the linked list
    public void addLast(E element)
    {
        // If the linked list is empty, add the new node as the head node
        if (head == null) {
            head = new Node<>(element);
        } else {
            // Else, traverse the list to the end and add the new node
            Node<E> currentNode = head;
            while (currentNode.getNext() != null) {
                currentNode = currentNode.getNext();
            }
            currentNode.setNext(new Node<>(element));
        }
        
        // Increase the size of the linked list by 1
        size++;
    }
    
    // Method to add a new node at a specified index in the linked list
    public void add(int index, E element)
    {
        // If the specified index is negative or greater than the size of the list, throw an exception
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException();
        } else if (index == 0) { // If the specified index is 0, add the node at the beginning of the list
            addFirst(element);
        } else if (index == size) { // If the specified index is the size of the list, add the node at the end of the list
            addLast(element);
        } else {
            // Else, traverse the list to the specified index and insert the node
            Node<E> currentNode = head;
            for (int i = 0; i < index - 1; i++) {
                currentNode = currentNode.getNext();
            }
            currentNode.setNext(new Node<>(element, currentNode.getNext()));
            
            // Increase the size of the linked list by 1
            size++;
        }
    }
    
    // Method to remove the first node in the linked list
    public void removeFirst()
    {
        // If the linked list is empty, throw an exception
        if (head == null) {
            throw new NoSuchElementException();
        }
        
        // Else, set the head node to its next node
        head = head.getNext();
        
        // Decrease the size of the linked list by 1
        size--;
    }
    
    // Method to remove the last node in the linked list
    public void removeLast()
    {
        // If the linked list is empty, throw an exception
        if (head == null) {
            throw new NoSuchElementException();
        }
        
        // If the linked list contains only one node, set the head node to null
        if (head.getNext() == null) {
            head = null;
        } else {
            // Else, traverse the list to the second last node and set its next node to null
            Node<E> currentNode = head;
            while (currentNode.getNext().getNext() != null) {
                currentNode = currentNode.getNext();
            }
            currentNode.setNext(null);
        }
        
        // Decrease the size of the linked list by 1
        size--;
    }
    
    // Method to remove a node at a specified index in the linked list
    public void remove(int index)
    {
        // If the specified index is negative or greater than the size of the list, throw an exception
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        } else if (index == 0) { // If the specified index is 0, remove the first node
            removeFirst();
        } else if (index == size - 1) { // If the specified index is the last index, remove the last node
            removeLast();
        } else {
            // Else, traverse the list to the specified index and remove the node
            Node<E> currentNode = head;
            for (int i = 0; i < index - 1; i++) {
                currentNode = currentNode.getNext();
            }
            currentNode.setNext(currentNode.getNext().getNext());
            
            // Decrease the size of the linked list by 1
            size--;
        }
    }
    
    // Method to get the size of the linked list
    public int getSize()
    {
        return size;
    }
    
    // Method to print all the elements in the linked list
    public void printList()
    {
        // If the linked list is empty, print an empty message
        if (head == null) {
            System.out.println("List is empty");
        } else {
            Node<E> currentNode = head;
            while (currentNode != null) {
                System.out.print(currentNode.getElement() + " ");
                currentNode = currentNode.getNext();
            }
            System.out.println();
        }
    }
    
    // Main method to test the LinkedList class
    public static void main(String[] args)
    {
        LinkedList<String> list = new LinkedList<>();
        
        // Add some elements to the linked list
        list.addFirst("Hello");
        list.addLast("World");
        list.add(1, "from");
        list.add(2, "my");
        list.add(3, "linkedlist");
        
        // Print the initial linked list
        System.out.println("Initial list:");
        list.printList();
        
        // Remove some elements from the linked list
        list.removeLast();
        list.remove(2);
        list.removeFirst();
        
        // Print the updated linked list
        System.out.println("Updated list:");
        list.printList();
    }
}

// Class to represent a node in the linked list
class Node<E>
{
    // The element stored in the node
    private E element;
    
    // The next node in the linked list
    private Node<E> next;
    
    // Constructor to initialize the node with an element and null as next node
    public Node(E element)
    {
        this.element = element;
        this.next = null;
    }
    
    // Constructor to initialize the node with an element and a next node
    public Node(E element, Node<E> next)
    {
        this.element = element;
        this.next = next;
    }
    
    // Method to get the element stored in the node
    public E getElement()
    {
        return element;
    }
    
    // Method to set the next node
    public void setNext(Node<E> next)
    {
        this.next = next;
    }
    
    // Method to get the next node
    public Node<E> getNext()
    {
        return next;
    }
}