/* This code snippet implements a sorting algorithm
   called QuickSort in Java language */

// QuickSort function 
public void quicksort(int[] array, int low, int high) {

    if (low < high) {
        
        // Partition the array based on a pivot
        int pivotIndex = partition(array, low, high);
        
        // Recursive call to sort elements before pivot
        quicksort(array, low, pivotIndex - 1);
        
        // Recursive call to sort elements after pivot
        quicksort(array, pivotIndex + 1, high);
    }
}

// Partition function to find the pivot and rearrange the array
public int partition(int[] array, int low, int high) {

    // Choose pivot as the last element in the array
    int pivot = array[high];
    
    // Initialize the index for smaller element
    int i = low - 1;
    
    // Loop through the array to rearrange elements
    for (int j = low; j < high; j++) {
    
        // If current element is smaller than pivot, 
        // increment the index of smaller element 
        if (array[j] < pivot) {
            i++;
            
            // Swap the smaller element with current element
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }
    
    // Swap the pivot with the element next to the smaller element
    int temp = array[i + 1];
    array[i + 1] = array[high];
    array[high] = temp;
    
    // Return the index of the pivot
    return i + 1;
}
 
// Main function to call QuickSort
public static void main(String[] args) {

    // Create an array to be sorted
    int[] array = {5, 2, 6, 8, 3, 9, 1, 0, 4, 7};
    
    // Call QuickSort function
    quicksort(array, 0, array.length - 1);
    
    // Print the sorted array
    for (int i = 0; i < array.length; i++) {
        System.out.print(array[i] + " ");
    }
}

/* Output:
0 1 2 3 4 5 6 7 8 9 */