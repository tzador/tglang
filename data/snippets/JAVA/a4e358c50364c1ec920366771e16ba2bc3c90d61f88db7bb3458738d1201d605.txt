/** 
 * This class represents a binary tree data structure. 
 * It supports methods for adding nodes, searching for a particular value, and traversing the tree.
 * @param <E> the generic type of the elements in the tree
 */ 
public class BinaryTree<E> {
    
    // inner class for node
    private class Node<E> {
        private E value;
        private Node<E> left;
        private Node<E> right;

        // constructor for node with given value
        public Node(E value){
            this.value = value;
            left = null;
            right = null;
        }

        // getters and setters for node fields
        public E getValue(){
            return value;
        }

        public Node<E> getLeft(){
            return left;
        }

        public Node<E> getRight(){
            return right;
        }

        public void setValue(E value){
            this.value = value;
        }

        public void setLeft(Node<E> left){
            this.left = left;
        }

        public void setRight(Node<E> right){
            this.right = right;
        }
    }

    // root node of the tree
    private Node<E> root;

    // constructor for binary tree
    public BinaryTree(){
        root = null;
    }

    // method to add a node to the tree
    public void add(E value){
        root = addRecursive(root, value);
    }

    // helper method for recursive adding of node
    private Node<E> addRecursive(Node<E> current, E value){
        // if current node is null, create a new one with given value
        if(current == null){
            return new Node<>(value);
        }

        // if value to be added is less than current node's value, add it to the left subtree
        if(current.getValue().compareTo(value) > 0){
            current.setLeft(addRecursive(current.getLeft(), value));
        }
        // if value to be added is greater than current node's value, add it to the right subtree
        else if(current.getValue().compareTo(value) < 0){
            current.setRight(addRecursive(current.getRight(), value));
        }

        // return the updated current node
        return current;
    }

    // method to search for a value in the tree
    public boolean search(E value){
        return searchRecursive(root, value);
    }

    // helper method for recursive searching of a value
    private boolean searchRecursive(Node<E> current, E value){
        // if current node is null, value doesn't exist in the tree
        if(current == null){
            return false;
        }

        // if current node's value is equal to searched value, return true
        if(current.getValue().equals(value)){
            return true;
        }

        // if value is less than current node's value, search in the left subtree
        if(current.getValue().compareTo(value) > 0){
            return searchRecursive(current.getLeft(), value);
        }
        // if value is greater than current node's value, search in the right subtree
        else if(current.getValue().compareTo(value) < 0){
            return searchRecursive(current.getRight(), value);
        }

        // return false if value is not found in the tree
        return false;
    }

    // method to traverse the tree in-order
    public void traverseInOrder(){
        traverseInOrderRecursive(root);
    }

    // helper method for recursive in-order traversal
    private void traverseInOrderRecursive(Node<E> current){
        // if current node is null, return
        if(current == null){
            return;
        }

        // traverse left subtree first
        traverseInOrderRecursive(current.getLeft());

        // print current node's value
        System.out.println(current.getValue());

        // traverse right subtree
        traverseInOrderRecursive(current.getRight());
    }
    
    // code snippet ends here
}