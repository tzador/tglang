// This code snippet creates a generic binary tree and performs a pre-order traversal
public class BinaryTree<T> {
   private BinaryNode<T> root;

   // Constructor 
   public BinaryTree(T rootValue) {
       root = new BinaryNode<>(rootValue);
   }

   // Class for the node in the tree
   public class BinaryNode<T> {
       private T data;
       private BinaryNode<T> leftChild;
       private BinaryNode<T> rightChild;

       // Constructor
       public BinaryNode(T data) {
           this.data = data;
       }

       // Setters and getters for data and children
       public T getData() {
           return data;
       }

       public void setData(T data) {
           this.data = data;
       }

       public BinaryNode<T> getLeftChild() {
           return leftChild;
       }

       public void setLeftChild(BinaryNode<T> leftChild) {
           this.leftChild = leftChild;
       }

       public BinaryNode<T> getRightChild() {
           return rightChild;
       }

       public void setRightChild(BinaryNode<T> rightChild) {
           this.rightChild = rightChild;
       }
   }

   // Method for pre-order traversal
   public void preOrderTraversal(BinaryNode<T> node) {
       if (node != null) {
           // Print the data of the current node
           System.out.print(node.getData() + " ");
           // Traverse left subtree
           preOrderTraversal(node.getLeftChild());
           // Traverse right subtree
           preOrderTraversal(node.getRightChild());
       }
   }

   // Method to test the code
   public static void main(String[] args) {
       // Create a binary tree with root node value as "1"
       BinaryTree<Integer> binaryTree = new BinaryTree<>(1);
       // Set left and right child for the root node
       binaryTree.root.setLeftChild(binaryTree.new BinaryNode<>(2));
       binaryTree.root.setRightChild(binaryTree.new BinaryNode<>(3));
       // Print the pre-order traversal of the binary tree
       binaryTree.preOrderTraversal(binaryTree.root);
       // Output: 1 2 3
   }
}