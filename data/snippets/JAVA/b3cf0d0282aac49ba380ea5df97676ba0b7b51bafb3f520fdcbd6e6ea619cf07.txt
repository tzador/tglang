/* This program uses a pathfinding algorithm
 * to find the shortest path between two nodes in a graph.
 */

// Graph class to represent the graph structure and store nodes
public class Graph {

    private int size; // number of nodes in the graph
    private ArrayList<Node> nodes; // list of nodes in the graph

    // Constructor to initialize the graph with given size
    public Graph(int size) {
        this.size = size;
        this.nodes = new ArrayList<Node>(size);
    }

    // Method to add a new node to the graph
    public void addNode(Node node) {
        nodes.add(node);
    }

    // Method to calculate the shortest path between two nodes using Djikstra's algorithm
    public ArrayList<Node> shortestPath(Node source, Node destination) {

        // A PriorityQueue is used to store the unvisited nodes in the graph
        PriorityQueue<Node> queue = new PriorityQueue<Node>();

        // Set the source node's distance to 0 and add it to the queue
        source.setDistance(0);
        queue.add(source);

        while (!queue.isEmpty()) {
            Node current = queue.poll(); // remove the top node from the queue
            current.setVisited(); // mark it as visited

            // Check all of its neighboring nodes
            for (Node neighbor : current.getNeighbors()) {
                // If the neighbor is not visited and its distance can be shortened,
                // update its distance and add it to the queue
                if (!neighbor.isVisited() && current.getDistance() + 1 < neighbor.getDistance()) {
                    neighbor.setDistance(current.getDistance() + 1);
                    neighbor.setPrevious(current);
                    queue.add(neighbor);
                }
            }
        }

        // Backtrack from the destination node to the source to find the shortest path
        ArrayList<Node> shortestPath = new ArrayList<Node>();
        Node current = destination;
        while (current.getPrevious() != null) {
            shortestPath.add(current);
            current = current.getPrevious();
        }

        // Reverse the list since the path was found in reverse order
        Collections.reverse(shortestPath);
        return shortestPath;
    }
}

// Node class to represent each node in the graph
public class Node {

    private int id; // unique identifier for the node
    private ArrayList<Node> neighbors; // list of neighboring nodes
    private boolean visited; // flag to determine if node has been visited during pathfinding
    private int distance; // distance from source node
    private Node previous; // previous node on the shortest path

    // Constructor to initialize node with given id
    public Node(int id) {
        this.id = id;
        this.neighbors = new ArrayList<Node>();
        this.visited = false;
        this.distance = Integer.MAX_VALUE;
        this.previous = null;
    }

    // Method to add a neighboring node
    public void addNeighbor(Node neighbor) {
        neighbors.add(neighbor);
    }

    // Getter and setter methods for node properties
    public int getID() {
        return id;
    }

    public ArrayList<Node> getNeighbors() {
        return neighbors;
    }

    public boolean isVisited() {
        return visited;
    }

    public void setVisited() {
        this.visited = true;
    }

    public int getDistance() {
        return distance;
    }

    public void setDistance(int distance) {
        this.distance = distance;
    }

    public Node getPrevious() {
        return previous;
    }

    public void setPrevious(Node previous) {
        this.previous = previous;
    }
}

// Main class to run the program
public class Main {

    // Sample graph with 7 nodes and edges connecting them
    public static void main(String[] args) {
        Graph graph = new Graph(7);
        Node node0 = new Node(0);
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(5);
        Node node6 = new Node(6);

        node0.addNeighbor(node1);
        node0.addNeighbor(node2);
        node0.addNeighbor(node3);
        node1.addNeighbor(node4);
        node2.addNeighbor(node3);
        node2.addNeighbor(node6);
        node3.addNeighbor(node4);
        node3.addNeighbor(node5);
        node4.addNeighbor(node5);
        node5.addNeighbor(node6);

        graph.addNode(node0);
        graph.addNode(node1);
        graph.addNode(node2);
        graph.addNode(node3);
        graph.addNode(node4);
        graph.addNode(node5);
        graph.addNode(node6);

        // Find the shortest path between node 0 and 6
        ArrayList<Node> shortestPath = graph.shortestPath(node0, node6);

        // Print the path
        for (Node node : shortestPath) {
            System.out.print(node.getID() + " ");
        }
        // Output: 0 2 6
    }
}