/**
 * This class represents a binary search tree data structure, 
 * where nodes have a left and right child node and are 
 * organized such that all nodes in the left subtree are less 
 * than or equal to the parent node, and all nodes in the
 * right subtree are greater than the parent node.
 *
 * The class includes methods for insertion and deletion of nodes, 
 * as well as methods for searching and traversing the tree.
 */
public class BinarySearchTree {

    /**
     * This inner class represents a node in the binary search tree.
     * Each node has a key value and references to its left and right
     * child nodes.
     */
    private class Node {
        private int key;
        private Node leftChild;
        private Node rightChild;

        /**
         * Constructor for a node with a given key value.
         * @param key the key value of the node.
         */
        public Node(int key) {
            this.key = key;
        }
    }

    // Root node of the tree
    private Node root;

    /**
     * Constructs an empty binary search tree.
     */
    public BinarySearchTree() {
        this.root = null;
    }

    /**
     * Inserts a new node with the given key value into the tree.
     * @param key the key value of the new node.
     */
    public void insert(int key) {
        // If tree is empty, make new node the root node
        if (root == null) {
            root = new Node(key);
            return;
        }

        // Start at root node and traverse until we find the appropriate location to insert the new node
        Node currentNode = root;
        Node parentNode = null;
        while (currentNode != null) {
            parentNode = currentNode;
            if (key <= currentNode.key) { // New node belongs in the left subtree
                currentNode = currentNode.leftChild;
            } else { // New node belongs in the right subtree
                currentNode = currentNode.rightChild;
            }
        }

        // Insert new node in correct location based on key value
        if (key <= parentNode.key) {
            parentNode.leftChild = new Node(key);
        } else {
            parentNode.rightChild = new Node(key);
        }
    }

    /**
     * Deletes a node with the given key value from the tree.
     * @param key the key value of the node to be deleted.
     * @return true if node is successfully deleted, false if node is not found.
     */
    public boolean delete(int key) {
        // Start at root node and keep track of current and parent nodes
        Node currentNode = root;
        Node parentNode = null;
        while (currentNode != null && currentNode.key != key) {
            parentNode = currentNode;
            if (key <= currentNode.key) { // Key value is in left subtree
                currentNode = currentNode.leftChild;
            } else { // Key value is in right subtree
                currentNode = currentNode.rightChild;
            }
        }

        // If node is not found, return false
        if (currentNode == null) {
            return false;
        }

        // If node to be deleted has no children, simply remove it and update parent reference
        if (currentNode.leftChild == null && currentNode.rightChild == null) {
            if (currentNode == root) { // If node to be deleted is the root node
                root = null;
            } else { // If node to be deleted is a child node, update parent reference
                if (currentNode == parentNode.leftChild) {
                    parentNode.leftChild = null;
                } else {
                    parentNode.rightChild = null;
                }
            }
        }

        // If node to be deleted has only one child, replace it with its child node
        else if (currentNode.leftChild == null) { // Only has a right child
            if (currentNode == root) { // If node to be deleted is the root node
                root = currentNode.rightChild;
            } else { // If node to be deleted is a child node, update parent reference
                if (currentNode == parentNode.leftChild) {
                    parentNode.leftChild = currentNode.rightChild;
                } else {
                    parentNode.rightChild = currentNode.rightChild;
                }
            }
        } else if (currentNode.rightChild == null) { // Only has a left child
            if (currentNode == root) { // If node to be deleted is the root node
                root = currentNode.leftChild;
            } else { // If node to be deleted is a child node, update parent reference
                if (currentNode == parentNode.leftChild) {
                    parentNode.leftChild = currentNode.leftChild;
                } else {
                    parentNode.rightChild = currentNode.leftChild;
                }
            }
        }

        // If node to be deleted has two children, find the successor node and replace it
        else {
            // Find successor node by going right and then left until we reach a leaf node
            Node successorNode = currentNode.rightChild;
            Node parentSuccessorNode = currentNode;
            while (successorNode.leftChild != null) {
                parentSuccessorNode = successorNode;
                successorNode = successorNode.leftChild;
            }

            // Update key value of node to be deleted with the key value of the successor node
            currentNode.key = successorNode.key;

            // Remove successor node from tree by updating parent reference
            if (parentSuccessorNode == currentNode) { // Successor node is directly to the right of node to be deleted
                parentSuccessorNode.rightChild = successorNode.rightChild;
            } else { // Successor node is in the left subtree of the right child of node to be deleted
                parentSuccessorNode.leftChild = successorNode.rightChild;
            }
        }

        return true;
    }

    /**
     * Searches for a node in the tree with the given key value.
     * @param key the key value to be searched for.
     * @return true if node with key value is found, false if not.
     */
    public boolean contains(int key) {
        // Start at root node and traverse until we find the node with the given key value, or reach the end of the tree
        Node currentNode = root;
        while (currentNode != null && currentNode.key != key) {
            if (key <= currentNode.key) { // Key value is in left subtree
                currentNode = currentNode.leftChild;
            } else { // Key value is in right subtree
                currentNode = currentNode.rightChild;
            }
        }

        if (currentNode == null) { // Node with key value not found
            return false;
        } else { // Node with key value found
            return true;
        }
    }

    /**
     * Performs an in-order traversal of the tree, printing out the key values of each node in sorted order.
     * In-order traversal visits the left subtree, then prints the current node, and then visits the right subtree.
     * @param node the starting node for the traversal.
     */
    private void traverseInOrder(Node node) {
        if (node != null) {
            traverseInOrder(node.leftChild);
            System.out.print(node.key + " ");
            traverseInOrder(node.rightChild);
        }
    }

    /**
     * Performs a pre-order traversal of the tree, printing out the key values of each node in pre-order.
     * Pre-order traversal prints the current node, then visits the left subtree, and then visits the right subtree.
     * @param node the starting node for the traversal.
     */
    private void traversePreOrder(Node node) {
        if (node != null) {
            System.out.print(node.key + " ");
            traversePreOrder(node.leftChild);
            traversePreOrder(node.rightChild);
        }
    }

    /**
     * Performs a post-order traversal of the tree, printing out the key values of each node in post-order.
     * Post-order traversal visits the left subtree, then visits the right subtree, and then prints the current node.
     * @param node the starting node for the traversal.
     */
    private void traversePostOrder(Node node) {
        if (node != null) {
            traversePostOrder(node.leftChild);
            traversePostOrder(node.rightChild);
            System.out.print(node.key + " ");
        }
    }

    /**
     * Prints out debugging information about the tree, including its structure
     * and the key values of each node in sorted order.
     */
    public void debugPrint() {
        System.out.println("Structure of binary search tree:");
        printTreeStructure(root, "", false);

        System.out.println("\nIn-order traversal (sorted order):");
        traverseInOrder(root);
        
        System.out.println("\nPre-order traversal:");
        traversePreOrder(root);

        System.out.println("\nPost-order traversal:");
        traversePostOrder(root);
    }

    /**
     * Helper method to print out the structure of a binary tree, with highlighting of current node.
     * @param node the starting node.
     * @param indent the current level of indentation.
     * @param highlight true if this is the current node, false if not.
     */
    private void printTreeStructure(Node node, String indent, boolean highlight) {
        if (node != null) {
            // Print out indentation and check if node is the current node to highlight
            if (highlight) {
                System.out.print(indent + " |-->" + "(" + node.key + ")");
            } else {
                System.out.print(indent + " |   " + "(" + node.key + ")");
            }

            // Recursive call to print out left and right subtrees
            if (node.leftChild != null || node.rightChild != null) {
                System.out.print(" --");
                if (node.leftChild != null) {
                    printTreeStructure(node.leftChild, indent + " |", highlight);
                } else {
                    System.out.print("--");
                }
                if (node.rightChild != null) {
                    printTreeStructure(node.rightChild, indent + "  ", highlight);
                } else {
                    System.out.print("--");
                }
                System.out.println();
            }
        }
    }
}

// Example usage:
BinarySearchTree bst = new BinarySearchTree();
bst.insert(5);
bst.insert(2);
bst.insert(7);
bst.delete(2);
bst.contains(7);
bst.debugPrint();