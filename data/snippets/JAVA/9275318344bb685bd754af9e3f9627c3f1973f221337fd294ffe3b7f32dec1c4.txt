public class BinaryTree { // defining a class called BinaryTree
    
        private Node root; // declaring a private variable of type Node called root
        
        // defining a constructor for the class
        public BinaryTree(int value) {
            root = new Node(value); // initializing the root node with given value
        }
        
        // defining a method to insert a node into the binary tree
        public void insert(int value) {
            Node current = root; // assigning current variable to root node
            Node parent = null; // declaring parent variable as null
            
            // creating a loop to traverse through the tree
            while (true) {
                parent = current; // assigning parent variable to current node
                
                // if the value to be inserted is less than the current node's value
                if (value < current.value) {
                    current = current.left; // assigning current to its left child
                    
                    // if current is null, it means we have reached a leaf node
                    if (current == null) {
                        parent.left = new Node(value); // creating a new node and assigning it to current's left child
                        break; // breaking out of the loop
                    }
                }
                // if the value to be inserted is greater than or equal to the current node's value
                else {
                    current = current.right; // assigning current to its right child
                    
                    // if current is null, it means we have reached a leaf node
                    if (current == null) {
                        parent.right = new Node(value); // creating a new node and assigning it to current's right child
                        break; // breaking out of the loop
                    }
                }
            }
        }
        
        // defining a method to search for a value in the binary tree
        public boolean search(int value) {
            Node current = root; // assigning current variable to root node
            
            // creating a loop to traverse through the tree
            while (current.value != value) {
                
                // if the value to be searched is less than the current node's value
                if (value < current.value) {
                    current = current.left; // assigning current to its left child
                }
                // if the value to be searched is greater than the current node's value
                else {
                    current = current.right; // assigning current to its right child
                }
                
                // if current is null, it means we have reached a leaf node and the value is not present
                if (current == null) {
                    return false; // returning false as value is not present
                }
            }
            
            return true; // returning true as value is present
        }
        
        // defining a method to delete a node from the binary tree
        public boolean delete(int value) {
            Node current = root; // assigning current variable to root node
            Node parent = root; // assigning parent variable to root node
            boolean isLeftChild = true; // declaring and initializing a boolean variable to track if current node is a left child
            
            // creating a loop to search for the node to be deleted 
            while (current.value != value) {
                parent = current; // assigning parent variable to current node
                
                // if the value to be deleted is less than the current node's value
                if (value < current.value) {
                    current = current.left; // assigning current to its left child
                    isLeftChild = true; // updating isLeftChild variable to true
                }
                // if the value to be deleted is greater than the current node's value
                else {
                    current = current.right; // assigning current to its right child
                    isLeftChild = false; // updating isLeftChild variable to false
                }
                
                // if current is null, it means we have reached a leaf node and the value is not present
                if (current == null) {
                    return false; // returning false as value is not present
                }
            }
            
            // if current node to be deleted has no children
            if (current.left == null && current.right == null) {
                
                // if current node is the root node
                if (current == root) {
                    root = null; // setting root to null
                }
                // if current node is a left child
                else if (isLeftChild) {
                    parent.left = null; // setting parent's left child to null
                }
                // if current node is a right child
                else {
                    parent.right = null; // setting parent's right child to null
                }
            }
            // if current node to be deleted has only one child
            else if (current.right == null) { 
                
                // if current node is the root node
                if (current == root) {
                    root = current.left; // assigning root to current's left child
                }
                // if current node is a left child
                else if (isLeftChild) {
                    parent.left = current.left; // assigning parent's left child to current's left child
                }
                // if current node is a right child
                else {
                    parent.right = current.left; // assigning parent's right child to current's left child
                }
            }
            // if current node to be deleted has only one child
            else if (current.left == null) { 
                
                // if current node is the root node
                if (current == root) {
                    root = current.right; // assigning root to current's right child
                }
                // if current node is a left child
                else if (isLeftChild) {
                    parent.left = current.right; // assigning parent's left child to current's right child
                }
                // if current node is a right child
                else {
                    parent.right = current.right; // assigning parent's right child to current's right child
                }
            }
            // if current node to be deleted has two children
            else {
                Node successor = getSuccessor(current); // calling helper method to get the successor node
                // if the current node is the root node
                if (current == root) {
                    root = successor; // assigning root to the successor node
                }
                // if current node is a left child
                else if (isLeftChild) {
                    parent.left = successor; // assigning parent's left child to successor node
                }
                // if current node is a right child
                else {
                    parent.right = successor; // assigning parent's right child to successor node
                }
                successor.left = current.left; // assigning successor node's left child to current's left child
            }
            
            return true; // returning true as the node has been successfully deleted
        }
        
        // helper method to find the successor node of the current node
        private Node getSuccessor(Node node) {
            Node parentOfSuccessor = node; // assigning parentOfSuccessor variable to the given node
            Node successor = node; // assigning successor variable to the given node
            Node current = node.right; // assigning current variable to the given node's right child
            
            // creating a loop to find the leftmost child of the given node's right child
            while (current != null) {
                parentOfSuccessor = successor; // assigning parentOfSuccessor variable to successor node
                successor = current; // assigning successor variable to current node
                current = current.left; // assigning current to its left child
            }
            
            // if the successor node is not the immediate right child of the given node
            if (successor != node.right) {
                parentOfSuccessor.left = successor.right; // assigning parent of successor's left child to successor's right child
                successor.right = node.right; // assigning successor's right child to given node's right child
            }
            
            return successor; // returning successor node
        }
        
        // defining a method to traverse the binary tree in-order and print the nodes in ascending order
        public void inOrderTraversal(Node node) {
            if (node != null) { // checking if the node is not null
                inOrderTraversal(node.left); // recursively calling the method on left child
                System.out.println(node.value); // printing the node's value
                inOrderTraversal(node.right); // recursively calling the method on right child
            }
        }
        
        // defining a method to traverse the binary tree pre-order and print the nodes
        public void preOrderTraversal(Node node) {
            if (node != null) { // checking if the node is not null
                System.out.println(node.value); // printing the node's value
                preOrderTraversal(node.left); // recursively calling the method on left child
                preOrderTraversal(node.right); // recursively calling the method on right child
            }
        }
        
        // defining a method to traverse the binary tree post-order and print the nodes
        public void postOrderTraversal(Node node) {
            if (node != null) { // checking if the node is not null
                postOrderTraversal(node.left); // recursively calling the method on left child
                postOrderTraversal(node.right); // recursively calling the method on right child
                System.out.println(node.value); // printing the node's value
            }
        }
        
        // defining a method to get the height of the binary tree
        public int getHeight(Node node) {
            if (node == null) { // checking if the node is null
                return 0; // returning a height of 0 as the tree is empty
            }
            
            int leftHeight = getHeight(node.left); // recursively calling the method on left child
            int rightHeight = getHeight(node.right); // recursively calling the method on right child
            
            // returning the maximum height between left and right subtree + 1 (for the current node)
            return Math.max(leftHeight, rightHeight) + 1;
        }
        
        // defining a method to get the size of the binary tree
        public int getSize(Node node) {
            if (node == null) { // checking if the node is null
                return 0; // returning a size of 0 as the tree is empty
            }
            
            // recursively calling the method and adding the size of left and right subtree + 1 (for the current node)
            return getSize(node.left) + getSize(node.right) + 1;
        }
        
        // defining a method to check if the binary tree is a valid binary search tree
        public boolean isValidBST(Node node) {
            return isValidBSTHelper(node, null, null); // calling a helper method with null values for min and max
        }
        
        // helper method to check if the binary tree is a valid binary search tree
        private boolean isValidBSTHelper(Node node, Integer min, Integer max) {
            if (node == null) { // checking if the node is null
                return true; // returning true as an empty tree is valid
            }
            
            // checking if the current node's value is within the range of min and max (inclusive)
            if ((min != null && node.value <= min) || (max != null && node.value > max)) {
                return false; // returning false as the tree is not valid
            }
            
            // recursively calling the method for left and right subtree with updated min or max values
            return isValidBSTHelper(node.left, min, node.item) && isValidBSTHelper(node.right, node.item, max);
        }
    }
    
    // defining a class called Node to represent a node in the binary tree
    class Node {
        int value; // declaring a variable of type int to store the value of the node
        Node left; // declaring a variable of type Node to store the left child
        Node right; // declaring a variable of type Node to store the right child
        
        // defining a constructor for the class
        public Node(int value) {
            this.value = value; // assigning the value of the node
            left = null; // initializing left child to null
            right = null; // initializing right child to null
        }
    }