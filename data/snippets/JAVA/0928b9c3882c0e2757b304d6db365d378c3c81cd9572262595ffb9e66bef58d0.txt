/**
 * This class represents a custom data structure called a Binary Tree.
 * It has methods for adding, removing, and searching for nodes within the tree.
 */
class BinaryTree {
    private Node root; // the root node of the tree
    private int size; // the number of nodes in the tree

    /**
     * Constructor for the BinaryTree class.
     * Sets the root node to null and the size to 0.
     */
    public BinaryTree() {
        this.root = null;
        this.size = 0;
    }

    /**
     * Method for adding a new node to the tree.
     * @param data the data to be stored in the new node
     */
    public void add(int data) {
        // if the tree is empty, set the new node as the root
        // otherwise, traverse the tree to find where to add the new node
        if (this.root == null) {
            this.root = new Node(data);
        } else {
            addHelper(this.root, data);
        }
        this.size++;
    }

    /**
     * Helper method for add() that recursively traverses the tree to find where to add the new node.
     * @param node the current node being checked
     * @param data the data to be stored in the new node
     */
    private void addHelper(Node node, int data) {
        // if the new data is smaller than the current node's data, go to the left child
        // if the new data is larger than or equal to the current node's data, go to the right child
        if (data < node.getData()) {
            if (node.getLeftChild() == null) {
                node.setLeftChild(new Node(data));
            } else {
                addHelper(node.getLeftChild(), data);
            }
        } else {
            if (node.getRightChild() == null) {
                node.setRightChild(new Node(data));
            } else {
                addHelper(node.getRightChild(), data);
            }
        }
    }

    /**
     * Method for removing a node from the tree.
     * @param data the data to be removed
     * @return true if the node was found and removed, false if the node was not found in the tree
     */
    public boolean remove(int data) {
        // if the tree is empty, return false
        if (this.root == null) {
            return false;
        }
        // otherwise, check if the node to be removed is the root node
        if (this.root.getData() == data) {
            // if the root has no children, set the root to null
            if (this.root.getLeftChild() == null && this.root.getRightChild() == null) {
                this.root = null;
                this.size--;
                return true;
            } else {
                // if the root only has one child, set the root to that child
                if (this.root.getLeftChild() == null) {
                    this.root = this.root.getRightChild();
                    this.size--;
                    return true;
                } else if (this.root.getRightChild() == null) {
                    this.root = this.root.getLeftChild();
                    this.size--;
                    return true;
                } else { // if the root has two children, find the smallest value in the right subtree to replace the root
                    Node smallestNode = findSmallestNode(this.root.getRightChild());
                    this.root.setData(smallestNode.getData());
                    deleteHelper(this.root.getRightChild(), smallestNode.getData());
                    this.size--;
                    return true;
                }
            }
        } else {
            // if the node to be removed is not the root, use the deleteHelper method to find and remove the node
            return deleteHelper(this.root, data);
        }
    }

    /**
     * Helper method for remove() that recursively traverses the tree to find and remove the node.
     * @param node the current node being checked
     * @param data the data to be removed
     * @return true if the node was found and removed, false if the node was not found in the tree
     */
    private boolean deleteHelper(Node node, int data) {
        // if the node to be checked is null, the node was not found in the tree, return false
        if (node == null) {
            return false;
        }
        // if the data to be removed is smaller than the current node's data, go to the left child
        // if the data to be removed is larger than the current node's data, go to the right child
        // if the data to be removed is equal to the current node's data, check if the node has any children
        // if not, set the node to null and return true
        // if it has one child, set the child to that node's position and return true
        // if it has two children, find the smallest value in the right subtree to replace that node's data
        if (data < node.getData()) {
            if (node.getLeftChild() == null) {
                return false;
            } else if (node.getLeftChild().getData() == data) {
                if (node.getLeftChild().getLeftChild() == null && node.getLeftChild().getRightChild() == null) {
                    node.setLeftChild(null);
                    this.size--;
                    return true;
                } else if (node.getLeftChild().getLeftChild() == null) {
                    node.setLeftChild(node.getLeftChild().getRightChild());
                    this.size--;
                    return true;
                } else if (node.getLeftChild().getRightChild() == null) {
                    node.setLeftChild(node.getLeftChild().getLeftChild());
                    this.size--;
                    return true;
                } else {
                    Node smallestNode = findSmallestNode(node.getLeftChild().getRightChild());
                    node.getLeftChild().setData(smallestNode.getData());
                    deleteHelper(node.getLeftChild().getRightChild(), smallestNode.getData());
                    this.size--;
                    return true;
                }
            } else {
                return deleteHelper(node.getLeftChild(), data);
            }
        } else {
            if (node.getRightChild() == null) {
                return false;
            } else if (node.getRightChild().getData() == data) {
                if (node.getRightChild().getLeftChild() == null && node.getRightChild().getRightChild() == null) {
                    node.setRightChild(null);
                    this.size--;
                    return true;
                } else if (node.getRightChild().getLeftChild() == null) {
                    node.setRightChild(node.getRightChild().getRightChild());
                    this.size--;
                    return true;
                } else if (node.getRightChild().getRightChild() == null) {
                    node.setRightChild(node.getRightChild().getLeftChild());
                    this.size--;
                    return true;
                } else {
                    Node smallestNode = findSmallestNode(node.getRightChild().getRightChild());
                    node.getRightChild().setData(smallestNode.getData());
                    deleteHelper(node.getRightChild().getRightChild(), smallestNode.getData());
                    this.size--;
                    return true;
                }
            } else {
                return deleteHelper(node.getRightChild(), data);
            }
        }
    }

    /**
     * Method for searching for a node in the tree.
     * @param data the data to be searched for
     * @return true if the node with the given data is found, false if the node is not found in the tree
     */
    public boolean contains(int data) {
        // if the tree is empty, return false
        if (this.root == null) {
            return false;
        }
        // otherwise, use the containsHelper method to recursively search the tree for the node with the given data
        return containsHelper(this.root, data);
    }

    /**
     * Helper method for contains() that recursively searches the tree for the node with the given data.
     * @param node the current node being checked
     * @param data the data to be searched for
     * @return true if the node with the given data is found, false if the node is not found in the tree
     */
    private boolean containsHelper(Node node, int data) {
        // if the node to be checked is null, the node was not found in the tree, return false
        if (node == null) {
            return false;
        }
        // if the data to be searched for is smaller than the current node's data, go to the left child
        // if the data to be searched for is larger than the current node's data, go to the right child
        // if the data to be searched for is equal to the current node's data, return true
        if (data < node.getData()) {
            return containsHelper(node.getLeftChild(), data);
        } else if (data > node.getData()) {
            return containsHelper(node.getRightChild(), data);
        } else {
            return true;
        }
    }

    /**
     * Method for finding the smallest node in a subtree.
     * @param root the root node of the subtree
     * @return the smallest node in the subtree
     */
    private Node findSmallestNode(Node root) {
        // if the subtree is empty, return null
        if (root == null) {
            return null;
        }
        // if the subtree has no left child, the root is the smallest node
        if (root.getLeftChild() == null) {
            return root;
        }
        // otherwise, keep going left until the smallest node is found
        return findSmallestNode(root.getLeftChild());
    }
}

/**
 * This class represents a node in the Binary Tree data structure.
 * It stores data and references to its left and right children.
 */
class Node {
    private int data; // the data stored in the node
    private Node leftChild; // the left child of the node
    private Node rightChild; // the right child of the node

    /**
     * Constructor for the Node class.
     * @param data the data to be stored in the node
     */
    public Node(int data) {
        this.data = data;
        this.leftChild = null;
        this.rightChild = null;
    }

    /**
     * Getter method for the data stored in the node.
     * @return the data stored in the node
     */
    public int getData() {
        return this.data;
    }

    /**
     * Getter method for the left child of the node.
     * @return the left child of the node
     */
    public Node getLeftChild() {
        return this.leftChild;
    }

    /**
     * Getter method for the right child of the node.
     * @return the right child of the node
     */
    public Node getRightChild() {
        return this.rightChild;
    }

    /**
     * Setter method for the data stored in the node.
     * @param data the new data to be stored in the node
     */
    public void setData(int data) {
        this.data = data;
    }

    /**
     * Setter method for the left child of the node.
     * @param leftChild the new left child of the node
     */
    public void setLeftChild(Node leftChild) {
        this.leftChild = leftChild;
    }

    /**
     * Setter method for the right child of the node.
     * @param rightChild the new right child of the node
     */
    public void setRightChild(Node rightChild) {
        this.rightChild = rightChild;
    }
}

// Example usage:

public static void main(String[] args) {
    // create a new binary tree
    BinaryTree tree = new BinaryTree();

    // add nodes to the tree
    tree.add(10);
    tree.add(5);
    tree.add(15);
    tree.add(2);
    tree.add(7);
    tree.add(12);
    tree.add(18);
    tree.add(1);
    tree.add(3);
    tree.add(6);
    tree.add(8);
    tree.add(11);
    tree.add(13);
    tree.add(16);
    tree.add(20);

    // print out the current size of the tree
    System.out.println("Current size: " + tree.size);

    // check if the tree contains a certain node
    System.out.println("Tree contains 3: " + tree.contains(3));
    System.out.println("Tree contains 9: " + tree.contains(9));

    // remove a node from the tree
    tree.remove(12);

    // print out the new size of the tree
    System.out.println("New size: " + tree.size);
}