/**
 * This is a complex Java code snippet that implements a merge sort algorithm
 * It takes in an array of integers as input and sorts them in ascending order
 */

public class MergeSort {

    /**
     * This method divides the given array into two subarrays, sorts them,
     * and then merges them into one sorted array
     *
     * @param arr The array of integers to be sorted
     * @param left The left index of the array
     * @param right The right index of the array
     */
    public void merge(int[] arr, int left, int right) {
        if (left < right) {
            // Calculate the middle index
            int mid = (left + right) / 2;
            // Sort the left subarray recursively
            merge(arr, left, mid);
            // Sort the right subarray recursively
            merge(arr, mid + 1, right);
            // Merge the two sorted subarrays
            mergeArrays(arr, left, mid, right);
        }
    }

    /**
     * This method merges two subarrays into one sorted array
     *
     * @param arr The array of integers
     * @param left The left index of the array
     * @param mid The middle index of the array
     * @param right The right index of the array
     */
    public void mergeArrays(int[] arr, int left, int mid, int right) {
        // Calculate the lengths of the two subarrays
        int n1 = mid - left + 1;
        int n2 = right - mid;

        // Create new temporary arrays to hold the values of the left and right subarrays
        int[] tempLeft = new int[n1];
        int[] tempRight = new int[n2];

        // Copy values from original array to temporary arrays
        for (int i = 0; i < n1; i++) {
            tempLeft[i] = arr[left + i];
        }
        for (int j = 0; j < n2; j++) {
            tempRight[j] = arr[mid + 1 + j];
        }

        // Initialize indices for the temporary arrays and the original array
        int i = 0, j = 0;
        int index = left;

        // Compare the values in the temporary arrays and add them to the original array in sorted order
        while (i < n1 && j < n2) {
            if (tempLeft[i] < tempRight[j]) {
                arr[index] = tempLeft[i];
                i++;
            } else {
                arr[index] = tempRight[j];
                j++;
            }

            index++;
        }

        // Add remaining elements from tempLeft array, if any
        while (i < n1) {
            arr[index] = tempLeft[i];
            i++;
            index++;
        }

        // Add remaining elements from tempRight array, if any
        while (j < n2) {
            arr[index] = tempRight[j];
            j++;
            index++;
        }
    }

    /**
     * This method prints the sorted array
     *
     * @param arr The array of integers
     */
    public void printArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {

        // Create an unsorted array
        int[] arr = {5, 8, 3, 2, 7, 4, 1, 9, 6};

        System.out.println("Unsorted Array:");
        MergeSort ms = new MergeSort();
        // Print the unsorted array
        ms.printArray(arr);

        // Sort the array using merge sort
        ms.merge(arr, 0, arr.length - 1);

        System.out.println("Sorted Array:");
        // Print the sorted array
        ms.printArray(arr);
    }

}