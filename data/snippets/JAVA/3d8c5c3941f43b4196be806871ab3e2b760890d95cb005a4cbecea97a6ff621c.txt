/**
 * This class represents a custom HashMap implementation
 * that uses chaining for handling collisions.
 */
public class MyHashMap<K, V> {
    
    /**
     * The size (number of key-value pairs) of the map.
     */
    private int size;
    
    /**
     * The array of linked lists to store the key-value pairs.
     */
    private LinkedList<Entry<K, V>>[] buckets;
    
    /**
     * The default initial capacity of the map.
     */
    private static final int DEFAULT_CAPACITY = 16;
    
    /**
     * Constructs a new empty map with the default initial capacity.
     */
    public MyHashMap() {
        buckets = new LinkedList[DEFAULT_CAPACITY];
        size = 0;
    }
    
    /**
     * Constructs a new empty map with the given initial capacity.
     * @param initialCapacity the initial capacity for the map
     */
    public MyHashMap(int initialCapacity) {
        buckets = new LinkedList[initialCapacity];
        size = 0;
    }
    
    /**
     * Hashes the given key to an index in the array of buckets.
     * @param key the key to hash
     * @return the index in the array of buckets
     */
    private int hash(K key) {
        return Math.abs(key.hashCode() % buckets.length);
    }
    
    /**
     * Adds the given key-value pair to the map.
     * If the key already exists, the current value will be replaced.
     * @param key the key to add
     * @param value the value to add
     */
    public void put(K key, V value) {
        int index = hash(key);
        
        // Check if there is already a LinkedList at the given index
        if (buckets[index] == null) {
            // If not, create a new LinkedList and add the key-value pair
            buckets[index] = new LinkedList<>();
            buckets[index].add(new Entry<>(key, value));
            size++;
        } else {
            // Otherwise, iterate through the LinkedList to check for an existing key
            for (Entry<K, V> entry : buckets[index]) {
                // If the key exists, replace its value and exit the loop
                if (entry.getKey().equals(key)) {
                    entry.setValue(value);
                    return;
                }
            }
            // If the key does not exist, add the key-value pair to the end of the LinkedList
            buckets[index].add(new Entry<>(key, value));
            size++;
        }
    }
    
    /**
     * Retrieves the value associated with the given key from the map.
     * If the key does not exist in the map, null will be returned.
     * @param key the key to search for
     * @return the value associated with the key, or null if the key does not exist
     */
    public V get(K key) {
        int index = hash(key);
        
        // Check if there is a LinkedList at the given index
        if (buckets[index] != null) {
            // Iterate through the LinkedList to search for the key
            for (Entry<K, V> entry : buckets[index]) {
                // If the key is found, return its value
                if (entry.getKey().equals(key)) {
                    return entry.getValue();
                }
            }
        }
        // If the key is not found, return null
        return null;
    }
    
    /**
     * Removes the key-value pair associated with the given key from the map.
     * If the key does not exist in the map, nothing will be removed.
     * @param key the key to remove
     */
    public void remove(K key) {
        int index = hash(key);
        
        // Check if there is a LinkedList at the given index
        if (buckets[index] != null) {
            // Iterate through the LinkedList to search for the key
            for (Entry<K, V> entry : buckets[index]) {
                // If the key is found, remove the key-value pair and decrease the size
                if (entry.getKey().equals(key)) {
                    buckets[index].remove(entry);
                    size--;
                    return;
                }
            }
        }
    }
    
    /**
     * Returns the number of key-value pairs in the map.
     * @return the size of the map
     */
    public int size() {
        return size;
    }
    
    /**
     * Checks whether the given key exists in the map.
     * @param key the key to check
     * @return true if the key exists, false otherwise
     */
    public boolean containsKey(K key) {
        int index = hash(key);
        
        // Check if there is a LinkedList at the given index
        if (buckets[index] != null) {
            // Iterate through the LinkedList to check for the key
            for (Entry<K, V> entry : buckets[index]) {
                // If the key is found, return true
                if (entry.getKey().equals(key)) {
                    return true;
                }
            }
        }
        // If the key is not found, return false
        return false;
    }
    
    /**
     * Checks whether the given value exists in the map.
     * @param value the value to check
     * @return true if the value exists, false otherwise
     */
    public boolean containsValue(V value) {
        // Iterate through each bucket
        for (LinkedList<Entry<K, V>> bucket : buckets) {
            // If the bucket is not null, iterate through the linked list to check for the value
            if (bucket != null) {
                for (Entry<K, V> entry : bucket) {
                    // If the value is found, return true
                    if (entry.getValue() == null && value == null) {
                        return true;
                    } else if (entry.getValue() != null && entry.getValue().equals(value)) {
                        return true;
                    }
                }
            }
        }
        // If the value is not found, return false
        return false;
    }
    
    /**
     * A helper class to store the key-value pairs in the map.
     */
    private static class Entry<K, V> {
        private final K key;
        private V value;
        
        public Entry(K key, V value) {
            this.key = key;
            this.value = value;
        }
        
        public K getKey() {
            return key;
        }
        
        public V getValue() {
            return value;
        }
        
        public void setValue(V value) {
            this.value = value;
        }
        
        @Override
        public String toString() {
            return key + "=" + value;
        }
    }
}