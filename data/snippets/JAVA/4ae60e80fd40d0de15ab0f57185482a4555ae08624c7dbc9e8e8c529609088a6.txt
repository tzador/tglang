/**
 * Class representing a binary tree data structure
 */
public class BinaryTree {

    /**
     * Class representing a node in the binary tree
     */
    private static class Node {

        /**
         * Value stored in the node
         */
        private int data;
        /**
         * Left child node
         */
        private Node left;
        /**
         * Right child node
         */
        private Node right;

        /**
         * Constructor for the node
         * @param data value to be stored in the node
         */
        public Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }

    /**
     * Root node of the binary tree
     */
    private Node root;

    /**
     * Constructor for the binary tree
     */
    public BinaryTree() {
        root = null;
    }

    /**
     * Method to insert a node into the binary tree
     * @param data value to be inserted
     */
    public void insert(int data) {
        if (root == null) { // if tree is empty, insert at root
            root = new Node(data);
        } else {
            Node current = root; // start at the root
            while (true) {
                if (data < current.data) { // if value to be inserted is less than current node, go left
                    if (current.left == null) { // if left child is null, insert new node here
                        current.left = new Node(data);
                        break;
                    } else {
                        current = current.left; // continue traversing left subtree
                    }
                } else { // if value to be inserted is greater than or equal to current node, go right
                    if (current.right == null) { // if right child is null, insert new node here
                        current.right = new Node(data);
                        break;
                    } else {
                        current = current.right; // continue traversing right subtree
                    }
                }
            }
        }
    }

    /**
     * Method to check if a value is present in the binary tree
     * @param data value to search for
     * @return true if value is found, false if not found
     */
    public boolean contains(int data) {
        return contains(root, data); // call overloaded contains method
    }

    /**
     * Overloaded contains method that takes in a starting node
     * @param node starting node to search from
     * @param data value to search for
     * @return true if value is found, false if not found
     */
    private boolean contains(Node node, int data) {
        if (node == null) { // if reached end of subtree without finding value, return false
            return false;
        } else if (data == node.data) { // if value is found, return true
            return true;
        } else if (data < node.data) { // if value is less than current node, search left subtree
            return contains(node.left, data);
        } else { // if value is greater than current node, search right subtree
            return contains(node.right, data);
        }
    }

    /**
     * Method to delete a node from the binary tree
     * @param data value to be deleted
     */
    public void delete(int data) {
        root = delete(root, data); // call overloaded delete method
    }

    /**
     * Overloaded delete method that takes in a starting node
     * This method uses recursion to find the node to be deleted
     * @param node starting node to search from
     * @param data value to be deleted
     * @return updated root node
     */
    private Node delete(Node node, int data) {
        if (node == null) { // if reached end of subtree without finding value, return null
            return null;
        } else if (data == node.data) { // if value is found, delete this node
            if (node.left == null && node.right == null) { // if node has no children, just delete the node
                return null;
            } else if (node.left == null) { // if node has only right child, replace node with right child
                return node.right;
            } else if (node.right == null) { // if node has only left child, replace node with left child
                return node.left;
            } else { // if node has two children
                node.data = findMin(node.right).data; // replace node's data with smallest value in right subtree
                node.right = delete(node.right, node.data); // delete smallest value from right subtree
                return node;
            }
        } else if (data < node.data) { // if value is less than current node, search left subtree
            node.left = delete(node.left, data);
            return node;
        } else { // if value is greater than current node, search right subtree
            node.right = delete(node.right, data);
            return node;
        }
    }

    /**
     * Method to find the smallest value in a subtree
     * @param node starting node of the subtree
     * @return node containing the smallest value
     */
    private Node findMin(Node node) {
        if (node.left == null) { // if reached end of left subtree, this is the smallest value
            return node;
        }
        return findMin(node.left); // continue traversing left subtree
    }
}