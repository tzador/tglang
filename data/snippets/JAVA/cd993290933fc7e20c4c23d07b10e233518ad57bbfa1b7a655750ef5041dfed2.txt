/** 
 * This class represents a user in a system. The user has a name, age
 * and a list of permissions. 
 */
public class User {
    // declare private variables for name and age
    private String name;
    private int age;
    // declare a private list of permissions
    private List<String> permissions;

    /**
     * This method is the constructor for the User class. It takes in
     * the user's name and age as parameters and initializes the
     * permissions list to an empty ArrayList.
     *
     * @param name the user's name
     * @param age the user's age
     */
    public User(String name, int age) {
        this.name = name;
        this.age = age;
        this.permissions = new ArrayList<>();
    }

    /**
     * This method adds a permission to the user's list of permissions.
     * If the permission already exists in the list, it will not be added again.
     *
     * @param permission the permission to be added
     */
    public void addPermission(String permission) {
        // check if the permission already exists in the list
        if (!permissions.contains(permission)) {
            // add the permission to the list if it doesn't exist
            permissions.add(permission);
        }
    }

    /**
     * This method removes a permission from the user's list of permissions.
     *
     * @param permission the permission to be removed
     */
    public void removePermission(String permission) {
        // check if the permission exists in the list
        if (permissions.contains(permission)) {
            // remove the permission from the list
            permissions.remove(permission);
        }
    }

    /**
     * This method checks if the user has a specified permission. If the
     * permission exists in the list, it will return true. Otherwise, it
     * will return false.
     *
     * @param permission the permission to be checked
     * @return true if the user has the permission, false otherwise
     */
    public boolean hasPermission(String permission) {
        // check if the permission exists in the list
        if (permissions.contains(permission)) {
            // return true if it exists
            return true;
        } else {
            // otherwise, return false
            return false;
        }
    }

    /**
     * This method returns the user's name.
     *
     * @return the user's name
     */
    public String getName() {
        return name;
    }

    /**
     * This method sets the user's name.
     *
     * @param name the new name for the user
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * This method returns the user's age.
     *
     * @return the user's age
     */
    public int getAge() {
        return age;
    }

    /**
     * This method sets the user's age.
     *
     * @param age the new age for the user
     */
    public void setAge(int age) {
        this.age = age;
    }

    /**
     * This method prints out the user's information in a formatted string.
     */
    public void printUserInfo() {
        // use string formatting to print the user's info
        System.out.println("Name: %s, Age: %d, Permissions: %s", name, age, permissions.toString());
    }
}

// create a new user object with name "John" and age 30
User user1 = new User("John", 30);
// add the "create" permission to the user's list
user1.addPermission("create");
// remove the "edit" permission from the user's list
user1.removePermission("edit");
// check if the user has the "create" permission
boolean hasPermission = user1.hasPermission("create");
// print the user's information
user1.printUserInfo();