// This program sorts an array of integers using the quicksort algorithm

// Function to partition the array
public int partition(int[] arr, int low, int high) {
    // Select pivot element as first element in the array
    int pivot = arr[low];
    // Initialize left and right pointers
    int i = low + 1;
    int j = high;
    // Loop until left and right pointers cross each other
    while (i <= j) {
        // Move left pointer until element larger than pivot is found
        while (i <= j && arr[i] <= pivot) {
            i++;
        }
        // Move right pointer until element smaller than pivot is found
        while (i <= j && arr[j] > pivot) {
            j--;
        }
        // Swap elements at left and right pointers
        if (i < j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    // Swap pivot with element at right pointer
    int temp = arr[low];
    arr[low] = arr[j];
    arr[j] = temp;
    // Return index of pivot element
    return j;
}

// Function to perform quicksort on an array
public void quicksort(int[] arr, int low, int high) {
    // Base case: array has only one element or is empty
    if (low >= high) {
        return;
    }
    // Partition array and get pivot index
    int pivotIndex = partition(arr, low, high);
    // Recursively call quicksort on left and right subarrays
    quicksort(arr, low, pivotIndex - 1);
    quicksort(arr, pivotIndex + 1, high);
}

// Example usage
int[] arr = {5, 2, 8, 3, 9, 1};
quicksort(arr, 0, arr.length - 1); // arr will be sorted in ascending order