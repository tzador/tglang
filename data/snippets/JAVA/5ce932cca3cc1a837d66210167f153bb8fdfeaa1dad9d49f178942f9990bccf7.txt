/**
 * Represents a binary tree with various methods for traversal and manipulation.
 */

public class BinaryTree {

 /**
 * Represents a node in the binary tree.
 */
    private class Node {
        private int data; //node data
        private Node left; //left child
        private Node right; //right child

        /**
        * Constructor for Node class.
        * @param data the data to be stored in the node.
        */
        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    private Node root; //root node of the tree

    /**
    * Constructor for BinaryTree class.
    */
    public BinaryTree() {
        this.root = null;
    }

    /**
    * Inserts a node with the given data into the binary tree.
    * @param data the data to be inserted.
    */
    public void insert(int data) {
        if (root == null) { //if tree is empty, set root to new node
            root = new Node(data);
        } else {
            Node current = root; //start at root node
            while (true) {
                if (data < current.data) { //if data is smaller, go left
                    if (current.left == null) { //if left child is null, insert node
                        current.left = new Node(data);
                        break;
                    } else { //if left child exists, go to left child
                        current = current.left;
                    }
                } else { //if data is larger, go right
                    if (current.right == null) { //if right child is null, insert node
                        current.right = new Node(data);
                        break;
                    } else { //if right child exists, go to right child
                        current = current.right;
                    }
                }
            }
        }
    }

    /**
    * Traverses the binary tree in pre-order and prints the node values.
    * @param current the node to start traversing from.
    */
    public void preOrderTraversal(Node current) {
        if (current != null) { //print node value, then go left, then go right
            System.out.print(current.data + " ");
            preOrderTraversal(current.left);
            preOrderTraversal(current.right);
        }
    }

    /**
    * Traverses the binary tree in in-order and prints the node values.
    * @param current the node to start traversing from.
    */
    public void inOrderTraversal(Node current) {
        if (current != null) { //go left, print node value, then go right
            inOrderTraversal(current.left);
            System.out.print(current.data + " ");
            inOrderTraversal(current.right);
        }
    }

    /**
    * Traverses the binary tree in post-order and prints the node values.
    * @param current the node to start traversing from.
    */
    public void postOrderTraversal(Node current) {
        if (current != null) { //go left, then go right, print node value
            postOrderTraversal(current.left);
            postOrderTraversal(current.right);
            System.out.print(current.data + " ");
        }
    }

    /**
    * Returns the height of the binary tree.
    * @return the height of the tree.
    */
    public int treeHeight(){
        return calculateTreeHeight(root);
    } 

    /**
    * Calculates the height of the binary tree using recursion.
    * @param current the node to start calculating from.
    * @return the height of the tree.
    */
    private int calculateTreeHeight(Node current){
        if(current == null){ //if node is null, return 0
            return 0;
        }else{
            //calculate the height of the left and right subtree recursively
            int leftHeight = calculateTreeHeight(current.left);
            int rightHeight = calculateTreeHeight(current.right);

            //return the longer subtree + 1
            return Math.max(leftHeight, rightHeight) + 1;
        }
    }

    /**
    * Searches for a node with the given data in the binary tree.
    * @param data the data to search for.
    * @return the node if found, null otherwise.
    */
    public Node search(int data) {
        Node current = root; //start at root node

        while (current != null) {
            if (data == current.data) { //if data is found, return node
                return current;
            } else if (data < current.data) { //if data is smaller, go left
                current = current.left;
            } else { //if data is larger, go right
                current = current.right;
            }
        }

        return null; //data not found, return null
    }

    /**
    * Removes a node with the given data from the binary tree.
    * @param data the data to be removed.
    * @return true if node is successfully removed, false otherwise.
    */
    public boolean remove(int data){
        Node parent = root; //node's parent
        Node current = root; //node to be removed
        boolean isLeftChild = false; //whether node is left child or not

        while(current.data != data){ //search for node with given data
            parent = current;
            if(data < current.data){ //if data is smaller, go left
                current = current.left;
                isLeftChild = true;
            }else{ //if data is larger, go right
                current = current.right;
                isLeftChild = false;
            }
            if(current == null){ //if node is not found, return false
                return false;
            }
        }

        //if node to be removed has no children
        if(current.left == null && current.right == null){
            if(current == root){ //if node is root, set root to null
                root = null;
            }
            if(isLeftChild){ //if node is left child, set parent's left child to null
                parent.left = null;
            }else{ //if node is right child, set parent's right child to null
                parent.right = null;
            }
        }
        //if node to be removed has only left child
        else if(current.right == null){
            if(current == root){ //if node is root, set root to left child
                root = current.left;
            }
            if(isLeftChild){ //if node is left child, set parent's left child to left child of removed node
                parent.left = current.left;
            }else{ //if node is right child, set parent's right child to left child of removed node
                parent.right = current.left;
            }
        }
        //if node to be removed has only right child
        else if(current.left == null){
            if(current == root){ //if node is root, set root to right child
                root = current.right;
            }
            if(isLeftChild){ //if node is left child, set parent's left child to right child of removed node
                parent.left = current.right;
            }else{ //if node is right child, set parent's right child to right child of removed node
                parent.right = current.right;
            }
        }
        //if node to be removed has two children
        else{
            //find successor node
            Node successor = getSuccessor(current);

            if(current == root){ //if node to be removed is root, set root to successor
                root = successor;
            }
            if(isLeftChild){ //if node is left child, set parent's left child to successor
                parent.left = successor;
            }else{ //if node is right child, set parent's right child to successor
                parent.right = successor;
            }
            //set successor's left child to removed node's left child
            successor.left = current.left;
        }

        return true; //node successfully removed
    }

    /**
    * Helper method to find the successor node of a given node.
    * @param node the node for which the successor needs to be found.
    * @return the successor node.
    */
    private Node getSuccessor(Node node){
        Node successorParent = node;
        Node successor = node;
        //start at right child
        Node current = node.right;

        while(current != null){ //find leftmost node in right subtree
            successorParent = successor;
            successor = current;
            current = current.left;
        }

        //if successor is not the right child of node to be removed
        if(successor != node.right){
            //set successor's right child to removed node's right child
            successorParent.left = successor.right;
            //set successor's right child to removed node's right child
            successor.right = node.right;
        }

        return successor;
    }

    /**
    * Prints the binary tree in a vertical format.
    * @param node the root node of the binary tree.
    * @param space the space to be added between each node's data when printing.
    */
    public void printTree(Node node, int space) {
        //base case
        if (node == null) {
            return;
        }

        //increase distance between levels
        space += 8;

        //process right child first
        printTree(node.right, space);

        //print current node after space
        for (int i = 8; i < space; i++) {
            System.out.print(" ");
        }
        System.out.print(node.data + "\n");

        //process left child
        printTree(node.left, space);
    }
}