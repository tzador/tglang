/**
 * This class represents a generic Tree data structure.
 * It is implemented using an array representation of the tree.
 * This allows for efficient access to child nodes and constant insertion time.
 */
public class Tree<T> {

    private T[] nodes;
    private int size;

    /**
     * Constructor for the Tree class. Initializes an empty tree with a given capacity.
     *
     * @param capacity The maximum number of nodes that the tree can hold.
     */
    public Tree(int capacity) {
        this.nodes = (T[]) new Object[capacity];
        this.size = 0;
    }

    /**
     * Returns the value of the node at the given index.
     *
     * @param index The index of the node to retrieve a value from.
     * @return The value stored in the node at the given index.
     */
    public T get(int index) {
        if (index >= this.size || index < 0) {
            throw new IndexOutOfBoundsException("Index is out of bounds.");
        }
        return this.nodes[index];
    }

    /**
     * Adds a new node with the given value as a child of the node at the specified parent index.
     *
     * @param parentIndex The index of the parent node to add a child to.
     * @param value The value to be stored in the new node.
     */
    public void add(int parentIndex, T value) {
        if (this.size == this.nodes.length) {
            throw new IndexOutOfBoundsException("Tree is at maximum capacity.");
        }
        if (parentIndex >= this.size || parentIndex < 0) {
            throw new IndexOutOfBoundsException("Parent node index is out of bounds.");
        }
        this.nodes[this.size] = value;
        this.nodes[parentIndex] = this.nodes[this.size];
        this.size++;
    }
}