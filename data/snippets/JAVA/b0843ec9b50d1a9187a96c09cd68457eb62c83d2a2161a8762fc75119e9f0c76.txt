/**
 * This class represents a binary tree data structure.
 * It contains methods for insertion, deletion, and search operations.
 * @param <T> the type of data stored in the tree.
 */
public class BinaryTree<T> {
    
    // class variables
    private Node<T> root; // the root node of the tree
    private int size; // the size of the tree
    
    // constructor
    public BinaryTree() {
        root = null; // initialize root to null
        size = 0; // initialize size to 0
    }
    
    /**
     * Insert a new node into the tree.
     * @param data the data to be inserted.
     */
    public void insert(T data) {
        // check if tree is empty
        if (root == null) {
            root = new Node<>(data); // create a new root node
            size++; // increment tree size
        } else {
            // recursive helper method
            insertHelper(data, root); 
        }
    }
    
    /**
     * Helper method for insert operation.
     * @param data the data to be inserted.
     * @param node the current node being checked.
     */
    private void insertHelper(T data, Node<T> node) {
        // check if data is less than current node
        if (((Comparable<T>)data).compareTo(node.getData()) < 0) {
            if (node.getLeft() == null) { // check if left child is null
                node.setLeft(new Node<>(data)); // insert new node as left child
                size++; // increment tree size
            } else {
                // recursive call with left child of current node
                insertHelper(data, node.getLeft()); 
            }
        } else { // data is greater than or equal to current node
            if (node.getRight() == null) { // check if right child is null
                node.setRight(new Node<>(data)); // insert new node as right child
                size++; // increment tree size
            } else {
                // recursive call with right child of current node
                insertHelper(data, node.getRight()); 
            }
        }
    }
    
    /**
     * Delete a node from the tree.
     * @param data the data to be deleted.
     */
    public void delete(T data) {
        // check if tree is empty
        if (root == null) {
            return; // do nothing
        }
        
        // find the node to be deleted and its parent node
        // using the recursive helper method
        Node<T> deleteNode = deleteHelper(data, root, root); 
        if (deleteNode == null) { 
            // node to be deleted is not found
            return; // do nothing 
        }
        
        // check if node to be deleted is root
        if (deleteNode == root) {
            // check if it has left child
            if (deleteNode.getLeft() == null) {
                root = deleteNode.getRight(); // replace root with right child
            } else { // left child is not null
                // find the predecessor node
                Node<T> predecessor = findPredecessor(deleteNode);
                // replace root with predecessor
                predecessor.setLeft(root.getLeft());
                predecessor.setRight(root.getRight());
                root = predecessor; // make predecessor the new root
            }
        } else { // node to be deleted is not root
            // check if node to be deleted is left or right child of its parent
            if (deleteNode == deleteNode.getParent().getLeft()) { // left child
                // check if node to be deleted has no children
                if (deleteNode.getRight() == null && deleteNode.getLeft() == null) {
                    // simply set left child of parent to null
                    deleteNode.getParent().setLeft(null);
                } else { // node to be deleted has at least one child
                    // check if node to be deleted has left child
                    if (deleteNode.getLeft() != null) {
                        // replace node to be deleted with its left child
                        deleteNode.getParent().setLeft(deleteNode.getLeft());
                    } else { // right child is not null
                        // replace node to be deleted with its right child
                        deleteNode.getParent().setLeft(deleteNode.getRight());
                    }
                }
            } else { // right child
                // check if node to be deleted has no children
                if (deleteNode.getRight() == null && deleteNode.getLeft() == null) {
                    // simply set right child of parent to null
                    deleteNode.getParent().setRight(null);
                } else { // node to be deleted has at least one child
                    // check if node to be deleted has left child
                    if (deleteNode.getLeft() != null) {
                        // replace node to be deleted with its left child
                        deleteNode.getParent().setRight(deleteNode.getLeft());
                    } else { // right child is not null
                        // replace node to be deleted with its right child
                        deleteNode.getParent().setRight(deleteNode.getRight());
                    }
                }
            }
        }
        size--; // decrement tree size
    }
    
    /**
     * Helper method for delete operation.
     * Finds the node to be deleted and its parent node.
     * @param data the data to be deleted.
     * @param node the current node being checked.
     * @param parent the parent node of the current node.
     * @return the node to be deleted or null if not found.
     */
    private Node<T> deleteHelper(T data, Node<T> node, Node<T> parent) {
        // check if current node is null
        if (node == null) {
            return null; // node to be deleted is not found
        }
        
        // check if data is less than current node
        if (((Comparable<T>)data).compareTo(node.getData()) < 0) {
            // recursive call with left child of current node
            return deleteHelper(data, node.getLeft(), node); 
        } else { // data is greater than or equal to current node
            // check if data is equal to current node
            if (((Comparable<T>)data).equals(node.getData())) {
                return node; // node to be deleted is found
            }
            // recursive call with right child of current node
            return deleteHelper(data, node.getRight(), node); 
        }
    }
    
    /**
     * Find the predecessor node.
     * @param node the node whose predecessor is to be found.
     * @return the predecessor node.
     */
    private Node<T> findPredecessor(Node<T> node) {
        Node<T> current = node.getLeft(); // start at left child
        while (current.getRight() != null) { // loop until no right child
            current = current.getRight(); // update current to right child
        }
        return current; // return predecessor
    }
    
    /**
     * Search for a given data in the tree.
     * @param data the data to be searched for.
     * @return true if found, false otherwise.
     */
    public boolean search(T data) {
        // check if tree is empty
        if (root == null) {
            return false; // data not found
        }
        
        // recursive helper method
        return searchHelper(data, root); 
    }
    
    /**
     * Helper method for search operation.
     * @param data the data to be searched for.
     * @param node the current node being checked.
     * @return true if data is found, false otherwise.
     */
    private boolean searchHelper(T data, Node<T> node) {
        // check if current node is null
        if (node == null) {
            return false; // data not found
        }
        
        // check if data is less than current node
        if (((Comparable<T>)data).compareTo(node.getData()) < 0) {
            // recursive call with left child of current node
            return searchHelper(data, node.getLeft()); 
        } else if (((Comparable<T>)data).compareTo(node.getData()) > 0) {
            // recursive call with right child of current node
            return searchHelper(data, node.getRight()); 
        }
        return true; // data found
    }
    
    /**
     * Get the size (number of nodes) of the tree.
     * @return the size of the tree.
     */
    public int getSize() {
        return size;
    }
    
    /**
     * This class represents a single node in a binary tree.
     * @param <T> the type of data stored in the node.
     */
    private class Node<T> {
        
        // instance variables
        private T data; // the data stored in the node
        private Node<T> parent; // the parent node
        private Node<T> left; // the left child node
        private Node<T> right; // the right child node
        
        /**
         * Constructor for creating a node with given data.
         * Parent and children nodes are set to null.
         * @param data the data to be stored in the node.
         */
        public Node(T data) {
            this.data = data; // set data
            parent = null; // set parent to null
            left = null; // set left child to null
            right = null; // set right child to null
        }
        
        // getters and setters
        public T getData() {
            return data;
        }

        public void setData(T data) {
            this.data = data;
        }

        public Node<T> getParent() {
            return parent;
        }

        public void setParent(Node<T> parent) {
            this.parent = parent;
        }

        public Node<T> getLeft() {
            return left;
        }

        public void setLeft(Node<T> left) {
            this.left = left;
        }

        public Node<T> getRight() {
            return right;
        }

        public void setRight(Node<T> right) {
            this.right = right;
        }
    }
}