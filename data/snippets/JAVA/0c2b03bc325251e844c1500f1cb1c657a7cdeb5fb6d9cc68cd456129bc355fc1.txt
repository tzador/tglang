/* This program demonstrates the implementation of a hash table using separate chaining */

import java.util.LinkedList;

public class HashTable<K, V> {

    // Array to hold the linked lists
    private LinkedList<Pair<K, V>>[] table;

    // Constructor to initialize the table with a given capacity
    public HashTable(int capacity) {
        table = new LinkedList[capacity];
    }

    // Method to insert a key-value pair into the hash table
    public void put(K key, V value) {
        // Compute the hash code
        int hashCode = key.hashCode();

        // Get the index into the array
        int index = hashCode % table.length;

        // If the list at the index is null, initialize it
        if (table[index] == null) {
            table[index] = new LinkedList<Pair<K, V>>();
        }

        // Check if the key already exists in the list
        for (Pair<K, V> pair : table[index]) {
            if (pair.getKey().equals(key)) {
                // If key already exists, update the value
                pair.setValue(value);
                return;
            }
        }

        // If key doesn't exist, add a new pair to the list
        table[index].add(new Pair<K, V>(key, value));
    }

    // Method to get the value associated with a given key
    public V get(K key) {
        // Compute the hash code
        int hashCode = key.hashCode();

        // Get the index into the array
        int index = hashCode % table.length;

        // Check if the list at the index is null
        if (table[index] == null) {
            return null;
        }

        // Loop through the list and find the pair with the given key
        for (Pair<K, V> pair : table[index]) {
            if (pair.getKey().equals(key)) {
                // If key is found, return the corresponding value
                return pair.getValue();
            }
        }

        // If key is not found, return null
        return null;
    }

    // Private inner class to store key-value pairs
    private class Pair<K, V> {
        private K key;
        private V value;

        // Constructor to create a new pair
        public Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }

        // Getters for the key and value
        public K getKey() {
            return key;
        }

        public V getValue() {
            return value;
        }

        // Setter for the value
        public void setValue(V value) {
            this.value = value;
        }
    }
}