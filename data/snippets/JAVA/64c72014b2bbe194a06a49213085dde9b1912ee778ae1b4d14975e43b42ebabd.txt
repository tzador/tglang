//This code snippet is a sorting algorithm called quicksort

/*
Algorithm:
QuickSort(arr[], low, high)
 if low < high {
  pivot_index = partition(arr, low, high)
  QuickSort(arr, low, pivot_index - 1)
  QuickSort(arr, pivot_index + 1, high)
 }
*/

public static void QuickSort(int[] arr, int low, int high){
    if (low < high ){
        int pivot_index = partition(arr, low, high);
        //sort arr from low to the pivot index
        QuickSort(arr, low, pivot_index - 1);
        //sort arr from pivot index to high
        QuickSort(arr, pivot_index + 1, high);
    }
}

private static int partition(int[] arr, int low, int high){
    //choose a pivot element
    int pivot = arr[high];
    //smaller_index keeps track of where to insert pivot
    //initially set to one index before the first element
    int smaller_index = low - 1;
    //loop through elements from low to high-1
    for (int i = low; i < high; i++){
        //if current element is smaller than pivot
        if (arr[i] < pivot){
            //increment smaller_index
            smaller_index++;
            //swap current element with element at smaller_index
            int temp = arr[smaller_index];
            arr[smaller_index] = arr[i];
            arr[i] = temp;
        }
    }
    //swap pivot with element at smaller_index + 1
    int temp = arr[smaller_index+1];
    arr[smaller_index+1] = arr[high];
    arr[high] = temp;
    //return index of pivot
    return smaller_index + 1;
}
//Example usage:
int[] nums = {5, 2, 8, 4, 1};
QuickSort(nums, 0, nums.length - 1);
//nums will now be sorted in ascending order: [1, 2, 4, 5, 8]