class ComplexNumber {
    private double real; // real part of the complex number
    private double imaginary; // imaginary part of the complex number

    public ComplexNumber(double real, double imaginary) {
        this.real = real;
        this.imaginary = imaginary;
    }

    public double getReal() {
        return real;
    }

    public double getImaginary() {
        return imaginary;
    }

    public void setReal(double real) {
        this.real = real;
    }

    public void setImaginary(double imaginary) {
        this.imaginary = imaginary;
    }

    // add a complex number with this complex number
    public void add(ComplexNumber c) {
        this.real += c.getReal();
        this.imaginary += c.getImaginary();
    }

    // subtract a complex number from this complex number
    public void subtract(ComplexNumber c) {
        this.real -= c.getReal();
        this.imaginary -= c.getImaginary();
    }

    // multiply this complex number with another complex number
    public void multiply(ComplexNumber c) {
        double tempReal = this.real * c.getReal() - this.imaginary * c.getImaginary();
        double tempImaginary = this.real * c.getImaginary() + this.imaginary * c.getReal();
        this.real = tempReal;
        this.imaginary = tempImaginary;
    }

    // divide this complex number by another complex number
    public void divide(ComplexNumber c) {
        double tempReal = (this.real * c.getReal() + this.imaginary * c.getImaginary()) / (Math.pow(c.getReal(), 2) + Math.pow(c.getImaginary(), 2));
        double tempImaginary = (this.imaginary * c.getReal() - this.real * c.getImaginary()) / (Math.pow(c.getReal(), 2) + Math.pow(c.getImaginary(), 2));
        this.real = tempReal;
        this.imaginary = tempImaginary;
    }

    // return the magnitude (absolute value) of this complex number
    public double getMagnitude() {
        return Math.sqrt(Math.pow(this.real, 2) + Math.pow(this.imaginary, 2));
    }

    // return the phase (arg) of this complex number
    public double getPhase() {
        return Math.atan2(this.imaginary, this.real);
    }

    // convert this complex number to its conjugate
    public void toConjugate() {
        this.imaginary *= -1;
    }

    // check if this complex number is equal to another complex number
    public boolean isEqualTo(ComplexNumber c) {
        return this.real == c.getReal() && this.imaginary == c.getImaginary();
    }

    // convert this complex number to a string representation
    @Override
    public String toString() {
        if (this.imaginary < 0) {
            return this.real + " - " + Math.abs(this.imaginary) + "i";
        } else {
            return this.real + " + " + this.imaginary + "i";
        }
    }
}