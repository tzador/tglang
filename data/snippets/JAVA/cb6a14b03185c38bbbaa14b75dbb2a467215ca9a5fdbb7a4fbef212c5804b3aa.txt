class BinaryTree { //defining a class named BinaryTree
    Node root; //declaring a Node object named root
    
    class Node { //creating a nested class named Node
        int data; //declaring an integer variable named data 
        Node leftChild; //declaring a Node object named leftChild
        Node rightChild; //declaring a Node object named rightChild
        
        public Node(int data) { //constructor with integer argument for data
            this.data = data; //setting the value of data using the this keyword
            leftChild = null; //initializing leftChild to null
            rightChild = null; //initializing rightChild to null
        }
    }

    //method for inserting new nodes into the binary tree
    public void insert(int data) {
        root = insertNode(root, data); //calling the insertNode method to insert new node
    }

    //recursive method for inserting a new Node
    private Node insertNode(Node node, int data) {
        if (node == null) { //checking if the current node is null
            node = new Node(data); //creating a new Node with the given data
        } else { //if the current node is not null
            if (data <= node.data) { //checking if the given data is less than or equal to current node's data
                node.leftChild = insertNode(node.leftChild, data); //recursively calling insertNode to insert node to the left subtree
            } else { //if the given data is greater than current node's data
                node.rightChild = insertNode(node.rightChild, data); //recursively calling insertNode to insert node to the right subtree
            }
        }
        return node; //returning the newly inserted node
    }
}