// This is a code snippet that creates a custom linked list class in JAVA

// Class for the Node object
class Node {
  int data; //data being stored in the node
  Node next; //reference to the next node in the linked list

  //constructor
  public Node(int data){
    this.data = data; //assigning passed value to data variable
    this.next = null; //initializing next node as null
  }
}

// Class for the Linked List object
class LinkedList {
  Node head; //reference to first node in the linked list

  //constructor
  public LinkedList(){
    this.head = null; //initializing to null if no nodes exist yet
  }

  //method to add a node to the end of the linked list
  public void append(int data){
    Node newNode = new Node(data); //creating a new node with passed data
    if(this.head == null){ //if linked list is empty, make new node the head
      this.head = newNode; 
      return; //exit method
    }
    Node last = this.head; //temporary variable to traverse the linked list
    while(last.next != null){ //loop until last node is reached
      last = last.next; //move to next node
    }
    last.next = newNode; //add new node to end of linked list
  }

  //method to add a node to the beginning of the linked list
  public void prepend(int data){
    Node newNode = new Node(data); //creating a new node with passed data
    newNode.next = this.head; //new node's next points to current head
    this.head = newNode; //new node becomes the head
  }

  //method to insert a node at a given position in the linked list
  public void insert(int data, int position){
    if(position == 0){ //if position is 0, use prepend method
      this.prepend(data);
    }
    else{
      Node newNode = new Node(data); //creating a new node with passed data
      Node current = this.head; //temporary variable to traverse the linked list
      for(int i = 0; i < position-1; i++){ //loop until position-1 is reached
        current = current.next; //move to next node
      }
      //inserting the new node and reassigning referring nodes
      newNode.next = current.next;
      current.next = newNode;
    }
  }

  //method to remove a node from a given position in the linked list
  public void remove(int position){
    if(this.head == null){ //if linked list is empty, exit method
      return;
    }
    Node current = this.head; //temporary variable to traverse the linked list
    if(position == 0){ //if position is 0, set head to next node
      this.head = current.next;
      return; //exit method
    }
    for(int i = 0; current != null && i < position-1; i++){ //loop until position-1 is reached or the end of linked list is reached
      current = current.next; //move to next node
    }
    if(current == null || current.next == null){ //if end of linked list is reached, or position is greater than linked list length, exit method
      return;
    }
    current.next = current.next.next; //removing the node and reassigning referring nodes
  }
}