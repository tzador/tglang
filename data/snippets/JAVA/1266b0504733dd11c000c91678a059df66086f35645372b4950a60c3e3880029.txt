import java.util.*;

/**
 * This class represents a binary search tree data structure.
 * It supports insertion, deletion, and search operations.
 */
public class BinarySearchTree {
    
    // Root node of the tree
    private Node root;
    
    /**
     * This class represents a single node in the binary search tree.
     * Each node has a key, a left child, and a right child.
     */
    private class Node {
        // Key of the node
        private int key;
        
        // Left child of the node
        private Node left;
        
        // Right child of the node
        private Node right;
        
        /**
         * Constructor for creating a new node with the given key.
         * @param key the key of the new node
         */
        public Node(int key) {
            this.key = key;
        }
    }
    
    /**
     * Inserts a new node with the given key into the binary search tree.
     * If the given key already exists in the tree, it is not inserted.
     * @param key the key to be inserted
     */
    public void insert(int key) {
        root = insertRec(root, key);
    }
    
    /**
     * A recursive method to insert a new node with the given key
     * into the binary search tree.
     * @param root the root node of the tree
     * @param key the key to be inserted
     * @return the modified root node
     */
    private Node insertRec(Node root, int key) {
        // If the root is null, create a new node with the given key
        if (root == null) {
            root = new Node(key);
            return root;
        }
        
        // If the key is already present in the tree, do not insert
        if (key == root.key) {
            return root;
        }
        
        // If the key is smaller than the root, insert it into the left subtree
        if (key < root.key) {
            root.left = insertRec(root.left, key);
        }
        
        // If the key is larger than the root, insert it into the right subtree
        else {
            root.right = insertRec(root.right, key);
        }
        
        return root;
    }
    
    /**
     * Deletes the node with the given key from the binary search tree.
     * If the node does not exist, the tree remains unchanged.
     * @param key the key of the node to be deleted
     */
    public void delete(int key) {
        root = deleteRec(root, key);
    }
    
    /**
     * A recursive method to delete the node with the given key
     * from the binary search tree.
     * @param root the root node of the tree
     * @param key the key of the node to be deleted
     * @return the modified root node
     */
    private Node deleteRec(Node root, int key) {
        // If the root is null, the node does not exist in the tree
        if (root == null) {
            return null;
        }
        
        // If the key is smaller than the root, traverse the left subtree
        if (key < root.key) {
            root.left = deleteRec(root.left, key);
        }
        
        // If the key is larger than the root, traverse the right subtree
        else if (key > root.key) {
            root.right = deleteRec(root.right, key);
        }
        
        // If the key is equal to the root, delete the root node
        else {
            // If the root node has only one child, set the child as the new root
            if (root.left == null) {
                return root.right;
            }
            else if (root.right == null) {
                return root.left;
            }
            
            // If the root node has two children, find the successor
            // and replace the root node with the successor
            root.key = findSuccessor(root.right);
            
            // Delete the successor node from the right subtree
            root.right = deleteRec(root.right, root.key);
        }
        
        return root;
    }
    
    /**
     * Finds the successor of the given node in the binary search tree.
     * @param root the root node of the tree
     * @return the successor key
     */
    private int findSuccessor(Node root) {
        int successor = root.key;
        
        // The successor is the leftmost node in the right subtree
        while (root.left != null) {
            successor = root.left.key;
            root = root.left;
        }
        
        return successor;
    }
    
    /**
     * Searches the binary search tree for the given key.
     * @param key the key to search for
     * @return true if the key is found, false if not
     */
    public boolean search(int key) {
        return searchRec(root, key);
    }
    
    /**
     * A recursive method to search for the given key in the binary search tree.
     * @param root the root node of the tree
     * @param key the key to search for
     * @return true if the key is found, false if not
     */
    private boolean searchRec(Node root, int key) {
        // If the root is null, the key is not present
        if (root == null) {
            return false;
        }
        
        // If the key is equal to the root, the key is found
        if (key == root.key) {
            return true;
        }
        
        // If the key is smaller than the root, search the left subtree
        if (key < root.key) {
            return searchRec(root.left, key);
        }
        
        // If the key is larger than the root, search the right subtree
        else {
            return searchRec(root.right, key);
        }
    }
}