/**
 * This class represents a library that tracks book availability and borrowing.
 */
public class Library {
    // define instance variables
    private String name; // name of the library
    private int capacity; // maximum number of books
    private ArrayList<Book> collection; // list of books in the library
    private HashMap<Book, Boolean> availability; // map of book availability
    private HashMap<String, ArrayList<Book>> borrowedBooks; // map of books borrowed by student ID

    /**
     * Constructor for the Library class.
     * @param name the name of the library
     * @param capacity the maximum number of books the library can hold
     */
    public Library(String name, int capacity) {
        this.name = name;
        this.capacity = capacity;
        this.collection = new ArrayList<Book>();
        // initialize map of book availability
        this.availability = new HashMap<Book, Boolean>();
        for (Book book : collection) {
            availability.put(book, true); // set all books to available
        }
        // initialize map of borrowed books
        this.borrowedBooks = new HashMap<String, ArrayList<Book>>();
    }

    /**
     * Adds a new book to the library's collection.
     * @param book the book to add to the collection
     */
    public void addBook(Book book) {
        if (collection.size() < capacity) { // check if library is at capacity
            collection.add(book); // add book to collection
            availability.put(book, true); // set book availability to true
        }
    }

    /**
     * Removes a book from the library's collection.
     * @param book the book to remove from the collection
     */
    public void removeBook(Book book) {
        if (collection.contains(book)) { // check if book exists in collection
            collection.remove(book); // remove book from collection
            availability.remove(book); // remove book from availability map
            // check if book is borrowed and remove from borrowed books map
            for (String studentID : borrowedBooks.keySet()) {
                ArrayList<Book> borrowed = borrowedBooks.get(studentID);
                if (borrowed.contains(book)) {
                    borrowed.remove(book);
                    borrowedBooks.put(studentID, borrowed);
                }
            }
        }
    }

    /**
     * Checks if a book is available to borrow.
     * @param book the book to check availability for
     * @return true if book is available, false otherwise
     */
    public boolean checkAvailability(Book book) {
        return availability.get(book);
    }

    /**
     * Borrows a book from the library.
     * @param book the book to borrow
     * @param studentID the ID of the student borrowing the book
     */
    public void borrowBook(Book book, String studentID) {
        if (checkAvailability(book)) { // check if book is available
            if (borrowedBooks.containsKey(studentID)) { // check if student has already borrowed books
                ArrayList<Book> borrowed = borrowedBooks.get(studentID);
                if (borrowed.size() < 3) { // check if student has reached their borrowing limit
                    borrowed.add(book); // add book to student's borrowed list
                    borrowedBooks.put(studentID, borrowed); // update map
                    availability.put(book, false); // set book availability to false
                } else {
                    System.out.println("Student has reached their borrowing limit.");
                }
            } else {
                ArrayList<Book> borrowed = new ArrayList<Book>();
                borrowed.add(book); // add book to student's borrowed list
                borrowedBooks.put(studentID, borrowed); // create new map entry for student
                availability.put(book, false); // set book availability to false
            }
        } else {
            System.out.println("Book is not available to borrow.");
        }
    }

    /**
     * Returns a book to the library.
     * @param book the book to return
     * @param studentID the ID of the student returning the book
     */
    public void returnBook(Book book, String studentID) {
        // check if student has borrowed book
        if (borrowedBooks.containsKey(studentID) && borrowedBooks.get(studentID).contains(book)) {
            // remove book from student's borrowed list
            ArrayList<Book> borrowed = borrowedBooks.get(studentID);
            borrowed.remove(book);
            borrowedBooks.put(studentID, borrowed); // update map
            // set book availability to true
            availability.put(book, true);
        } else {
            System.out.println("Student has not borrowed this book.");
        }
    }

    /**
     * Gets the list of books currently borrowed by a student.
     * @param studentID the ID of the student to get the list for
     * @return ArrayList of books currently borrowed by the student
     */
    public ArrayList<Book> getBorrowedBooks(String studentID) {
        if (borrowedBooks.containsKey(studentID)) { // check if student has borrowed books
            return borrowedBooks.get(studentID);
        }
        return null;
    }
}