/**
 * This class represents a binary tree data structure
 */
public class BinaryTree {

    // Private variables for root node and tree size
    private TreeNode root;
    private int size;

    /**
     * This method inserts a new node into the binary tree
     * @param val the value to be inserted into the tree
     */
    public void insert(int val) {

        // If root is null, create a new root node with the given value
        if (root == null) {
            root = new TreeNode(val);
            size++;
            return;
        }

        // Start at the root node
        TreeNode current = root;

        // Keep traversing the tree until a leaf node is reached
        while (current != null) {

            // If the value is less than the current node's value, traverse left
            if (val < current.val) {
                // If the left child is null, create a new node and insert it as the left child
                if (current.left == null) {
                    current.left = new TreeNode(val);
                    size++;
                    return;
                } else {
                    // If the left child is not null, move to the left child and continue traversing
                    current = current.left;
                }
            }
            // If the value is greater than the current node's value, traverse right
            else if (val > current.val) {
                // If the right child is null, create a new node and insert it as the right child
                if (current.right == null) {
                    current.right = new TreeNode(val);
                    size++;
                    return;
                } else {
                    // If the right child is not null, move to the right child and continue traversing
                    current = current.right;
                }
            }
            // If the value is equal to the current node's value, it is already present in the tree
            else {
                System.out.println("Value " + val + " is already present in the tree.");
                return;
            }
        }
    }

    /**
     * This method searches for a given value in the binary tree
     * @param val the value to be searched for
     * @return true if the value is present in the tree, false otherwise
     */
    public boolean search(int val) {

        // Start at the root node
        TreeNode current = root;

        // Keep traversing the tree until the value is found or a leaf node is reached
        while (current != null) {

            // If the value is less than the current node's value, traverse left
            if (val < current.val) {
                // If the left child is null, the value is not present in the tree
                if (current.left == null) {
                    return false;
                } else {
                    // If the left child is not null, move to the left child and continue traversing
                    current = current.left;
                }
            }
            // If the value is greater than the current node's value, traverse right
            else if (val > current.val) {
                // If the right child is null, the value is not present in the tree
                if (current.right == null) {
                    return false;
                } else {
                    // If the right child is not null, move to the right child and continue traversing
                    current = current.right;
                }
            }
            // If the value is equal to the current node's value, it is present in the tree
            else {
                return true;
            }
        }
        // If the value is not found, return false
        return false;
    }

    /**
     * This method deletes a given value from the binary tree
     * @param val the value to be deleted from the tree
     * @return true if the value is deleted successfully, false otherwise
     */
    public boolean delete(int val) {

        // Start at the root node
        TreeNode current = root;

        // Keep track of the parent node and the direction (left or right) of the current node
        TreeNode parent = null;
        String direction = "";

        // Keep traversing the tree until the value is found or a leaf node is reached
        while (current != null) {

            // If the value is less than the current node's value, traverse left
            if (val < current.val) {
                // If the left child is null, the value is not present in the tree
                if (current.left == null) {
                    return false;
                } else {
                    // If the left child is not null, move to the left child and continue traversing
                    parent = current;
                    current = current.left;
                    direction = "left";
                }
            }
            // If the value is greater than the current node's value, traverse right
            else if (val > current.val) {
                // If the right child is null, the value is not present in the tree
                if (current.right == null) {
                    return false;
                } else {
                    // If the right child is not null, move to the right child and continue traversing
                    parent = current;
                    current = current.right;
                    direction = "right";
                }
            }
            // If the value is equal to the current node's value, it is found
            else {
                // If the node to be deleted has no children, simply remove it from the tree
                if (current.left == null && current.right == null) {
                    // If it is the root node, set root to null
                    if (current == root) {
                        root = null;
                    } else {
                        // If it is a child node, set its parent's appropriate child to null
                        if (direction.equals("left")) {
                            parent.left = null;
                        } else {
                            parent.right = null;
                        }
                    }
                }
                // If the node to be deleted has one child, replace it with its child node
                else if (current.left == null || current.right == null) {
                    // If it is the root node, set root to its child node
                    if (current == root) {
                        root = (current.left != null) ? current.left : current.right;
                    } else {
                        // If it is a child node, set its parent's appropriate child to its child node
                        if (direction.equals("left")) {
                            parent.left = (current.left != null) ? current.left : current.right;
                        } else {
                            parent.right = (current.left != null) ? current.left : current.right;
                        }
                    }
                }
                // If the node to be deleted has two children, find the min value in its right subtree and replace it
                // with that value, and then delete the min node
                else {
                    // Find the min value in the right subtree
                    TreeNode min = findMin(current.right);

                    // Replace the value to be deleted with the min value
                    current.val = min.val;

                    // Delete the min node, which will either be a leaf node or a node with only a right child
                    // (because it is the min node in the subtree)
                    return delete(current.right, current, "right");
                }
                // Decrement the size of the tree and return true (value is deleted successfully)
                size--;
                return true;
            }
        }
        // If the value is not found, return false
        return false;
    }

    /**
     * This method recursively finds the min node in a subtree, starting from the given root
     * @param root the root of the subtree
     * @return the min node in the subtree
     */
    private TreeNode findMin(TreeNode root) {

        // If root is null, return null
        if (root == null) {
            return null;
        }
        // If the root has no left child, it is the min node in the subtree
        if (root.left == null) {
            return root;
        }
        // If the root has a left child, recursively find the min node in its left subtree
        return findMin(root.left);
    }

    /**
     * This method recursively deletes a given value from a subtree, starting from the given root
     * @param root the root of the subtree
     * @param parent the parent of the current node
     * @param direction the direction (left or right) of the current node
     * @param val the value to be deleted
     * @return true if the value is deleted successfully, false otherwise
     */
    private boolean delete(TreeNode root, TreeNode parent, String direction, int val) {

        // If root is null, there is no value to delete
        if (root == null) {
            return false;
        }

        // If the value is less than the root's value, the value is in the left subtree
        if (val < root.val) {
            // Recursively search for the value in the left subtree
            return delete(root.left, root, "left", val);
        }
        // If the value is greater than the root's value, the value is in the right subtree
        if (val > root.val) {
            // Recursively search for the value in the right subtree
            return delete(root.right, root, "right", val);
        }
        // If the value is equal to the root's value, we have found the correct node to delete
        if (val == root.val) {
            // If the node to be deleted has no children, simply remove it from the tree
            if (root.left == null && root.right == null) {
                // Set the appropriate child of the parent to null
                if (direction.equals("left")) {
                    parent.left = null;
                } else {
                    parent.right = null;
                }
            }
            // If the node to be deleted has one child, replace it with its child node
            else if (root.left == null || root.right == null) {
                // Set the appropriate child of the parent to its child node
                if (direction.equals("left")) {
                    parent.left = (root.left != null) ? root.left : root.right;
                } else {
                    parent.right = (root.left != null) ? root.left : root.right;
                }
            }
            // If the node to be deleted has two children, find the min value in its right subtree and replace it
            // with that value, and then delete the min node
            else {
                // Find the min value in the right subtree
                TreeNode min = findMin(root.right);

                // Replace the value to be deleted with the min value
                root.val = min.val;

                // Delete the min node, which will either be a leaf node or a node with only a right child
                // (because it is the min node in the subtree)
                return delete(root.right, root, "right", min.val);
            }
            // Return true (value is deleted successfully)
            return true;
        }
        // If the value is not found, return false
        return false;
    }

    /**
     * This method calculates the size (number of nodes) of the binary tree
     * @return the size of the tree
     */
    public int getSize() {
        return size;
    }

    /**
     * This class represents a node in a binary tree, with a left child, right child and a value
     */
    private class TreeNode {

        // Private variables for left and right children and the value of the node
        private TreeNode left;
        private TreeNode right;
        private int val;

        /**
         * Constructor to create a new node with the given value
         * @param val the value of the node
         */
        public TreeNode(int val) {
            this.val = val;
            left = null;
            right = null;
        }
    }
}