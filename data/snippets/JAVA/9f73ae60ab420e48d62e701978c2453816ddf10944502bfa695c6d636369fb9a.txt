// This is a complex code snippet that generates a Pascal's Triangle
// It uses recursion and loops to generate the triangle
// The input is the number of rows in the triangle
// The output is a 2D array containing the triangle

/**
 * A helper function that calculates the value at a specific row and column in the triangle.
 * Uses recursion to calculate the values of the previous rows.
 * @param row The row of the desired value
 * @param col The column of the desired value
 * @return The calculated value at the given row and column
 */
public static int calculateValue(int row, int col) {
    if (col == 0 || col == row) {
        return 1;
    } else {
        return calculateValue(row - 1, col - 1) + calculateValue(row - 1, col);
    }
}

// Number of rows in the triangle
int numRows = 5;

// Create a 2D array to store the triangle
int[][] pascalTriangle = new int[numRows][numRows];

// Loop through each row
for (int i = 0; i < numRows; i++) {
    // Loop through each column in the row
    for (int j = 0; j <= i; j++) {
        // Calculate the value for the current row and column
        pascalTriangle[i][j] = calculateValue(i, j);
    }
}

// Print the triangle
for (int i = 0; i < numRows; i++) {
    // Create a string to store the row
    String row = "";
    // Loop through each column in the row
    for (int j = 0; j <= i; j++) {
        // Add the value to the row string with a space between each value
        row += pascalTriangle[i][j] + " ";
    }
    // Print the row
    System.out.println(row);
}