// This code snippet is a complex and lengthy implementation of a binary search tree with various methods for inserting, removing, and searching for values in the tree.

class BinarySearchTree {

    // Root node of the tree
    Node root;

    // Constructor to initialize the tree
    public BinarySearchTree() {
        this.root = null;
    }

    // Node class to represent a single node in the tree
    class Node {
        int value;
        Node left, right;

        // Constructor to initialize a node with given value
        public Node(int value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }
    }

    // Method to insert a new value into the tree
    public void insert(int value) {
        root = insertHelper(root, value);
    }

    // Helper method to recursively insert node into the tree
    private Node insertHelper(Node root, int value) {

        // If root is null, create a new node with given value
        if (root == null) {
            root = new Node(value);
            return root;
        }

        // If value is less than root's value, insert it into the left subtree
        if (value < root.value) {
            root.left = insertHelper(root.left, value);
        }
        // If value is greater than root's value, insert it into the right subtree
        else if (value > root.value) {
            root.right = insertHelper(root.right, value);
        }

        // Return the root node
        return root;
    }

    // Method to delete a node from the tree
    public void delete(int value) {
        root = deleteHelper(root, value);
    }

    // Helper method to recursively delete a node from the tree
    private Node deleteHelper(Node root, int value) {

        // If root is null, the tree or subtree is empty
        if (root == null) {
            return root;
        }

        // If value to be deleted is less than root's value, delete from left subtree
        if (value < root.value) {
            root.left = deleteHelper(root.left, value);
        }
        // If value to be deleted is greater than root's value, delete from right subtree
        else if (value > root.value) {
            root.right = deleteHelper(root.right, value);
        }
        // If value is equal to root's value, delete the root
        else {

            // If root has only one child or no child
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }

            // If root has two children
            // Get the inorder successor (smallest value in the right subtree)
            Node temp = minValueNode(root.right);

            // Copy the inorder successor's value to the root
            root.value = temp.value;

            // Delete the inorder successor
            root.right = deleteHelper(root.right, temp.value);
        }

        // Return the updated root node
        return root;
    }

    // Method to find the smallest value in a subtree
    private Node minValueNode(Node root) {
        Node current = root;
        while (current.left != null) {
            current = current.left;
        }
        return current;
    }

    // Method to search for a value in the tree
    public boolean search(int value) {
        return searchHelper(root, value);
    }

    // Helper method to recursively search for a value in the tree
    private boolean searchHelper(Node root, int value) {

        // If root is null, the tree or subtree is empty
        if (root == null) {
            return false;
        }

        // If value is found at the root
        if (root.value == value) {
            return true;
        }

        // If value is less than root's value, search in the left subtree
        if (value < root.value) {
            return searchHelper(root.left, value);
        }
        // If value is greater than root's value, search in the right subtree
        else {
            return searchHelper(root.right, value);
        }
    }
}