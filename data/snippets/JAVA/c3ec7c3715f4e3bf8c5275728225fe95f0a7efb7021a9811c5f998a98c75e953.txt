/** 
 * This is a complex code snippet in JAVA that implements a binary search tree data structure 
 * with the ability to store and access key-value pairs.
 * Author: Your Name
 */

// Class representing a node in the binary search tree
class Node<K, V> {
    K key;
    V value;
    Node<K, V> left, right;

    // Constructor for the Node class
    Node(K key, V value) {
        this.key = key;
        this.value = value;
        this.left = this.right = null;
    }
}

// Class representing the binary search tree data structure
class BinarySearchTree<K extends Comparable<K>, V> {
    Node root;

    // Constructor for the BinarySearchTree class
    BinarySearchTree() {
        root = null;
    }

    // Method to insert a new key-value pair into the tree
    void insert(K key, V value) {
        root = insertRecursive(root, key, value);
    }

    // Helper method for insert()
    Node insertRecursive(Node root, K key, V value) {
        // If the tree is empty, create a new root node
        if (root == null) {
            root = new Node(key, value);
            return root;
        }

        // If the key to be inserted is less than the root's key,
        // insert into the left subtree
        if (key.compareTo(root.key) < 0)
            root.left = insertRecursive(root.left, key, value);

        // If the key to be inserted is greater than the root's key,
        // insert into the right subtree
        else if (key.compareTo(root.key) > 0)
            root.right = insertRecursive(root.right, key, value);

        // If the key already exists in the tree, update the value
        else
            root.value = value;

        return root;
    }

    // Method to search for a key in the tree and return its value
    V get(K key) {
        Node node = search(root, key);
        if (node != null)
            return (V) node.value;
        else
            throw new IllegalArgumentException("Key not found");
    }

    // Helper method for get()
    Node search(Node root, K key) {
        // If the tree is empty or the key doesn't exist, return null
        if (root == null || root.key.compareTo(key) != 0)
            return null;

        // If the key is found, return the node
        if (root.key.compareTo(key) == 0)
            return root;

        // Search in the left subtree if the key is less than the root's key
        if (key.compareTo(root.key) < 0)
            return search(root.left, key);

        // Search in the right subtree if the key is greater than the root's key
        else
            return search(root.right, key);
    }

    // Method to print all key-value pairs in the tree in sorted order
    void printInOrder() {
        printInOrderRecursive(root);
    }

    // Helper method for printInOrder()
    void printInOrderRecursive(Node root) {
        if (root != null) {
            printInOrderRecursive(root.left);
            System.out.println(root.key + " : " + root.value);
            printInOrderRecursive(root.right);
        }
    }
}

// Driver code to test the binary search tree
public class Main {
    public static void main(String[] args) {
        // Create a new tree
        BinarySearchTree<Integer, String> tree = new BinarySearchTree<>();

        // Insert key-value pairs
        tree.insert(5, "apple");
        tree.insert(2, "orange");
        tree.insert(7, "banana");
        tree.insert(4, "grape");
        tree.insert(9, "kiwi");
        tree.insert(1, "pear");

        // Print all key-value pairs
        tree.printInOrder();

        // Search for a key and print its value
        System.out.println("Value for key 7: " + tree.get(7));
    }
}