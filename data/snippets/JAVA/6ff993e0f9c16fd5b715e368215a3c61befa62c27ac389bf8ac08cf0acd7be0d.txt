public class QuickSort { //create class for QuickSort algorithm

    public void sort(int[] array, int low, int high) { //create method to perform sorting
        if (low < high) { //check if array has more than one element
            int partitionIndex = partition(array, low, high); //call partition method to get partition index

            //recursively call sort on sub-arrays
            sort(array, low, partitionIndex - 1);
            sort(array, partitionIndex + 1, high);
        }
    }

    private int partition(int[] array, int low, int high) { //create method to partition array
        int pivot = array[high]; //set pivot element as last element
        int i = (low - 1); //set index of smaller element

        for (int j = low; j < high; j++) { //loop through array
            //if current element is smaller than pivot, increment index of smaller element and swap elements
            if (array[j] < pivot) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        //swap pivot element with index of smaller element
        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;

        return i + 1; //return index of pivot element
    }

    public static void main(String args[]) { //main method to test QuickSort
        int array[] = {6, 3, 8, 4, 1, 9, 2};
        int n = array.length;

        QuickSort qs = new QuickSort(); //create object of QuickSort class
        qs.sort(array, 0, n - 1); //call sort method to perform QuickSort

        //print sorted array
        for (int i = 0; i < n; i++) {
            System.out.print(array[i] + " ");
        }
    }
}