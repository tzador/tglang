/**
 * This class represents a Binary Search Tree data structure.
 * It contains methods for inserting and searching for nodes,
 * as well as deleting a specified node.
 */
public class BinarySearchTree {
    Node root;

    /**
     * Constructor for creating a Binary Search Tree with a root node
     * @param value The value of the root node
     */
    public BinarySearchTree(int value) {
        root = new Node(value);
    }

    /**
     * Method to insert a new node into the Binary Search Tree
     * @param value The value of the node to be inserted
     */
    public void insert(int value) {
        Node current = root;
        while (true) {
            // If value is less than the current node, move to the left child
            if (value < current.value) {
                if (current.left != null) {
                    current = current.left;
                } else {
                    current.left = new Node(value);
                    break;
                }
            }
            // If value is greater than or equal to current node, move to right child
            else {
                if (current.right != null) {
                    current = current.right;
                } else {
                    current.right = new Node(value);
                    break;
                }
            }
        }
    }

    /**
     * Method to search for a specified value within the Binary Search Tree
     * @param value The value to search for
     * @return True if the value is found, false otherwise
     */
    public boolean search(int value) {
        Node current = root;
        while (current != null) {
            // If the value is found, return true
            if (value == current.value) {
                return true;
            } 
            // If value is less than current node, move to the left child
            else if (value < current.value) {
                current = current.left;
            }
            // If value is greater than current node, move to the right child
            else {
                current = current.right;
            }
        }
        // Value not found
        return false;
    }

    /**
     * Method to delete a specified node from the Binary Search Tree
     * @param value The value of the node to be deleted
     * @return True if the node is deleted, false otherwise
     */
    public boolean delete(int value) {
        // Search for the node to be deleted
        Node current = root;
        Node parent = null;
        while (current != null) {
            if (value == current.value) {
                break;
            } else if (value < current.value) {
                parent = current;
                current = current.left;
            } else {
                parent = current;
                current = current.right;
            }
        }
        // If node is not found, return false
        if (current == null) {
            return false;
        }
        // If node to be deleted has no children
        if (current.left == null && current.right == null) {
            // If the node is the root, set root to null
            if (current == root) {
                root = null;
            } else {
                // Set parent's appropriate child to null
                if (parent.left == current) {
                    parent.left = null;
                } else {
                    parent.right = null;
                }
            }
        }
        // If the node to be deleted has one child
        else if (current.right == null) {
            // If the node is the root, set root to the left child
            if (current == root) {
                root = current.left;
            } else {
                // Set parent's appropriate child to the current node's left child
                if (parent.left == current) {
                    parent.left = current.left;
                } else {
                    parent.right = current.left;
                }
            }
        }
        // If the node to be deleted has two children
        else {
            // Find the successor of the current node
            Node successor = current.right;
            Node successorParent = current;
            while (successor.left != null) {
                successorParent = successor;
                successor = successor.left;
            }
            // Set the value of the current node to the value of the successor
            current.value = successor.value;
            // If the successor node has no right child, set its parent's left child to null
            if (successor.right == null) {
                successorParent.left = null;
            } else {
                // Set the successor's parent's appropriate child to the successor's right child
                successorParent.left = successor.right;
            }
        }
        // Node deleted successfully
        return true;
    }
    
    /**
     * Inner class representing a node in the Binary Search Tree
     */
    class Node {
        int value;
        Node left;
        Node right;

        /**
         * Constructor for creating a node with a specified value
         * @param value The value of the node
         */
        public Node(int value) {
            this.value = value;
        }
    }
}