/**
 * Class for implementing a binary tree data structure
 */
public class BinaryTree {

    /**
     * Inner class representing a single node in the tree
     */
    private class Node {
        int data;
        Node left;
        Node right;

        /**
         * Constructor for Node class
         */
        public Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }

    private Node root;

    /**
     * Constructor for BinaryTree class
     */
    public BinaryTree() {
        root = null;
    }

    /**
     * Method for adding a new node to the tree
     */
    public void add(int data) {
        if (root == null) {
            root = new Node(data);
        } else {
            addRecursive(data, root);
        }
    }

    /*
     * Helper method for add() to recursively traverse the tree and find the correct position for the new node
     */
    private void addRecursive(int data, Node current) {
        if (data < current.data) {
            if (current.left == null) {
                current.left = new Node(data);
            } else {
                addRecursive(data, current.left);
            }
        } else if (data > current.data) {
            if (current.right == null) {
                current.right = new Node(data);
            } else {
                addRecursive(data, current.right);
            }
        } else {
            // Data is already present in the tree, do nothing
        }
    }

    /**
     * Method for searching for a specific value in the tree
     */
    public boolean search(int data) {
        return searchRecursive(data, root);
    }

    /*
     * Helper method for search() to recursively traverse the tree and check if the value is present
     */
    private boolean searchRecursive(int data, Node current) {
        if (current == null) {
            return false;
        } else if (data == current.data) {
            return true;
        } else if (data < current.data) {
            return searchRecursive(data, current.left);
        } else {
            return searchRecursive(data, current.right);
        }
    }

    /**
     * Method for deleting a node from the tree
     */
    public void delete(int data) {
        root = deleteRecursive(data, root);
    }

    /*
     * Helper method for delete() to recursively traverse the tree and delete the node if found
     */
    private Node deleteRecursive(int data, Node current) {
        if (current == null) {
            return null;
        } else if (data == current.data) {
            if (current.left == null && current.right == null) {
                return null;
            } else if (current.left == null) {
                return current.right;
            } else if (current.right == null) {
                return current.left;
            } else {
                current.data = findMin(current.right);
                current.right = deleteRecursive(current.data, current.right);
                return current;
            }
        } else if (data < current.data) {
            current.left = deleteRecursive(data, current.left);
        } else {
            current.right = deleteRecursive(data, current.right);
        }
        return current;
    }

    /*
     * Helper method for finding the minimum value in a tree (used during deletion)
     */
    private int findMin(Node current) {
        if (current.left == null) {
            return current.data;
        } else {
            return findMin(current.left);
        }
    }

    /**
     * Method for traversing the tree in pre-order
     */
    public void preOrderTraversal() {
        preOrderRecursive(root);
    }

    /*
     * Helper method for preOrderTraversal() to recursively traverse the tree in pre-order
     */
    private void preOrderRecursive(Node current) {
        if (current != null) {
            System.out.print(current.data + " ");
            preOrderRecursive(current.left);
            preOrderRecursive(current.right);
        }
    }

    /**
     * Method for traversing the tree in in-order
     */
    public void inOrderTraversal() {
        inOrderRecursive(root);
    }

    /*
     * Helper method for inOrderTraversal() to recursively traverse the tree in in-order
     */
    private void inOrderRecursive(Node current) {
        if (current != null) {
            inOrderRecursive(current.left);
            System.out.print(current.data + " ");
            inOrderRecursive(current.right);
        }
    }

    /**
     * Method for traversing the tree in post-order
     */
    public void postOrderTraversal() {
        postOrderRecursive(root);
    }

    /*
     * Helper method for postOrderTraversal() to recursively traverse the tree in post-order
     */
    private void postOrderRecursive(Node current) {
        if (current != null) {
            postOrderRecursive(current.left);
            postOrderRecursive(current.right);
            System.out.print(current.data + " ");
        }
    }
}