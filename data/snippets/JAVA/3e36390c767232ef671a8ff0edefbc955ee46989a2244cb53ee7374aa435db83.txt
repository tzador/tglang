import java.util.*;

/**
 * This class represents a graph data structure using adjacency lists.
 * It allows for adding/removing vertices and edges, as well as traversing the graph.
 */
public class Graph {
    private HashMap<Integer, ArrayList<Integer>> adjLists;
    private int numOfVertices;

    /**
     * Constructor for the Graph class, initializes the adjacency lists and sets the number of vertices to 0.
     */
    public Graph() {
        this.adjLists = new HashMap<>();
        this.numOfVertices = 0;
    }

    /**
     * Adds a new vertex to the graph.
     * @param vertex the value of the new vertex
     */
    public void addVertex(int vertex) {
        //Check if vertex already exists in the graph
        if (!adjLists.containsKey(vertex)) {
            //Create a new list to store the adjacent vertices
            ArrayList<Integer> list = new ArrayList<>();
            //Add vertex to the list
            list.add(vertex);
            //Add this list as the corresponding value for the vertex key in the adjacency list map
            adjLists.put(vertex, list);
            //Increment the number of vertices
            numOfVertices++;
        }
    }

    /**
     * Removes a vertex from the graph.
     * @param vertex the value of the vertex to be removed
     */
    public void removeVertex(int vertex) {
        //Check if vertex exists in the graph
        if (adjLists.containsKey(vertex)) {
            //Remove the list of adjacent vertices for the given vertex
            adjLists.remove(vertex);
            //Loop through all other vertices in the adjacency list map
            for (Integer key : adjLists.keySet()) {
                //Get the list of adjacent vertices for each key 
                ArrayList<Integer> list = adjLists.get(key);
                //Remove vertex from each list
                list.remove((Object) vertex);
            }
            //Decrement the number of vertices
            numOfVertices--;
        }
    }

    /**
     * Adds an edge between two vertices in the graph.
     * @param vertex1 the value of the first vertex
     * @param vertex2 the value of the second vertex
     */
    public void addEdge(int vertex1, int vertex2) {
        //Check if both vertices exist in the graph
        if (adjLists.containsKey(vertex1) && adjLists.containsKey(vertex2)) {
            //Get the list of adjacent vertices for vertex1
            ArrayList<Integer> list1 = adjLists.get(vertex1);
            //Get the list of adjacent vertices for vertex2
            ArrayList<Integer> list2 = adjLists.get(vertex2);
            //Check if vertices are not already adjacent
            if (!list1.contains(vertex2)) {
                //Add vertex2 to list1
                list1.add(vertex2);
            }
            //Check if vertices are not already adjacent
            if (!list2.contains(vertex1)) {
                //Add vertex1 to list2
                list2.add(vertex1);
            }
        }
    }

    /**
     * Removes an edge between two vertices in the graph.
     * @param vertex1 the value of the first vertex
     * @param vertex2 the value of the second vertex
     */
    public void removeEdge(int vertex1, int vertex2) {
        //Check if both vertices exist in the graph
        if (adjLists.containsKey(vertex1) && adjLists.containsKey(vertex2)) {
            //Get the list of adjacent vertices for vertex1
            ArrayList<Integer> list1 = adjLists.get(vertex1);
            //Get the list of adjacent vertices for vertex2
            ArrayList<Integer> list2 = adjLists.get(vertex2);
            //Check if vertices are adjacent
            if (list1.contains(vertex2) && list2.contains(vertex1)) {
                //Remove vertex2 from list1
                list1.remove((Object) vertex2);
                //Remove vertex1 from list2
                list2.remove((Object) vertex1);
            }
        }
    }

    /**
     * Performs a depth-first traversal on the graph starting from a given vertex.
     * @param startVertex the value of the starting vertex
     * @return a list of the visited vertices in the order they were visited
     */
    public ArrayList<Integer> depthFirstTraversal(int startVertex) {
        //Initialize a stack for storing the visited vertices
        Stack<Integer> stack = new Stack<>();
        //Initialize a list for storing the visited vertices in order
        ArrayList<Integer> visited = new ArrayList<>();
        //Push the starting vertex to the stack
        stack.push(startVertex);
        //Mark the starting vertex as visited
        visited.add(startVertex);
        //Loop while there are still vertices to visit
        while(!stack.isEmpty()) {
            //Get the top vertex from the stack
            int current = stack.pop();
            //Get the list of adjacent vertices for the current vertex
            ArrayList<Integer> neighbors = adjLists.get(current);
            //Loop through the list of adjacent vertices
            for (Integer vertex : neighbors) {
                //Check if the vertex has not been visited before
                if (!visited.contains(vertex)) {
                    //Push the vertex to the stack
                    stack.push(vertex);
                    //Mark the vertex as visited
                    visited.add(vertex);
                }
            }
        }
        //Return the list of visited vertices
        return visited;
    }

    /**
     * Performs a breadth-first traversal on the graph starting from a given vertex.
     * @param startVertex the value of the starting vertex
     * @return a list of the visited vertices in the order they were visited
     */
    public ArrayList<Integer> breadthFirstTraversal(int startVertex) {
        //Initialize a queue for storing the visited vertices
        Queue<Integer> queue = new LinkedList<>();
        //Initialize a list for storing the visited vertices in order
        ArrayList<Integer> visited = new ArrayList<>();
        //Add the starting vertex to the queue
        queue.add(startVertex);
        //Mark the starting vertex as visited
        visited.add(startVertex);
        //Loop while there are still vertices to visit
        while(!queue.isEmpty()) {
            //Get the next vertex from the queue
            int current = queue.remove();
            //Get the list of adjacent vertices for the current vertex
            ArrayList<Integer> neighbors = adjLists.get(current);
            //Loop through the list of adjacent vertices
            for (Integer vertex : neighbors) {
                //Check if the vertex has not been visited before
                if (!visited.contains(vertex)) {
                    //Add the vertex to the queue
                    queue.add(vertex);
                    //Mark the vertex as visited
                    visited.add(vertex);
                }
            }
        }
        //Return the list of visited vertices
        return visited;
    }

    /**
     * Prints the graph in an adjacency list format.
     */
    public void printGraph() {
        //Loop through all vertices in the adjacency list map
        for (Integer key : adjLists.keySet()) {
            //Print the key followed by a colon
            System.out.print(key + ": ");
            //Get the list of adjacent vertices for the key
            ArrayList<Integer> list = adjLists.get(key);
            //Loop through the list, printing each vertex
            for (Integer vertex : list) {
                System.out.print(vertex + " ");
            }
            //Print a new line
            System.out.println();
        }
    }
}