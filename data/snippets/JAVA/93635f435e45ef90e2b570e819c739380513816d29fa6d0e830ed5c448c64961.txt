/*
* This is a class for a binary tree
* @param <T> the type of elements in the binary tree
*/
public class BinaryTree<T> {

    private Node<T> root; //the root node of the binary tree

    //constructor for the binary tree
    public BinaryTree(Node<T> root) {
        this.root = root;
    }

    /*
    * This method inserts an element into the binary tree
    * @param data the data of the element to be inserted
    * @param current the current node being evaluated
    */
    public void insert(T data, Node<T> current) {
        //if current node is null, insert element as root
        if (current == null) {
            current = new Node<>(data);
        } 
        //if data is less than current node's data, insert into left subtree
        else if (data.compareTo(current.getData()) < 0) {
            //if left node is empty, insert element as left node
            if (current.getLeft() == null) {
                current.setLeft(new Node<>(data));
            } 
            //else recursively call insert on left subtree
            else {
                insert(data, current.getLeft());
            }
        } 
        //if data is greater than current node's data, insert into right subtree
        else if (data.compareTo(current.getData()) > 0) {
            //if right node is empty, insert element as right node
            if (current.getRight() == null) {
                current.setRight(new Node<>(data));
            } 
            //else recursively call insert on right subtree
            else {
                insert(data, current.getRight());
            }
        }
    }

    /*
    * This method searches for a node with the given data in the binary tree
    * @param data the data to be searched for
    * @param current the current node being evaluated
    * @return the node containing the data, null if not found
    */
    public Node<T> search(T data, Node<T> current) {
        //if current node is null, data does not exist in tree
        if (current == null) {
            return null;
        } 
        //if data is found in current node, return current node
        else if (data.equals(current.getData())) {
            return current;
        } 
        //if data is less than current node's data, search in left subtree
        else if (data.compareTo(current.getData()) < 0) {
            return search(data, current.getLeft());
        } 
        //if data is greater than current node's data, search in right subtree
        else {
            return search(data, current.getRight());
        }
    }

    /*
    * This method deletes a node with the given data from the binary tree
    * @param data the data of the node to be deleted
    * @param current the current node being evaluated
    * @return the root node of the updated binary tree
    */
    public Node<T> delete(T data, Node<T> current) {
        //if current node is null, data does not exist in tree
        if (current == null) {
            return null;
        } 
        //if data is less than current node's data, delete from left subtree
        else if (data.compareTo(current.getData()) < 0) {
            current.setLeft(delete(data, current.getLeft()));
        } 
        //if data is greater than current node's data, delete from right subtree
        else if (data.compareTo(current.getData()) > 0) {
            current.setRight(delete(data, current.getRight()));
        } 
        //if data is equal to current node's data, delete current node
        else {
            //if current node has no children, set current to null 
            if (current.getLeft() == null && current.getRight() == null) {
                current = null;
            } 
            //if current node has only one child, replace current with its child
            else if (current.getLeft() == null) {
                current = current.getRight();
            } else if (current.getRight() == null) {
                current = current.getLeft();
            } 
            //if current node has two children, replace current with successor
            else {
                Node<T> successor = getSuccessor(current.getRight());
                current.setData(successor.getData());
                current.setRight(delete(successor.getData(), current.getRight()));
            }
        }
        return current;
    }

    /*
    * This method finds the successor of the given node in the binary tree
    * @param current the current node being evaluated
    * @return the successor node
    */
    private Node<T> getSuccessor(Node<T> current) {
        Node<T> successor = current;
        //find the leftmost node in the right subtree
        while (successor.getLeft() != null) {
            successor = successor.getLeft();
        }
        return successor;
    }
}