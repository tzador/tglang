import java.util.*;
/**
 * This class represents a binary search tree data structure.
 * It contains various methods for adding, removing, and searching for elements.
 * @param <T> the generic type of elements stored in the tree
 */
public class BinarySearchTree<T extends Comparable<T>> {
    
    //class variables
    private Node root; //the root node of the tree
    
    /**
     * This inner class represents a node in the binary search tree.
     * A node contains a value and references to its left and right subtrees.
     */
    private class Node {
        //instance variables
        private T value; //the value stored in the node
        private Node left; //reference to the left subtree
        private Node right; //reference to the right subtree
        
        /**
         * Constructor method for creating a new node with a given value.
         * @param value the value to be stored in the node
         */
        public Node(T value) {
            this.value = value;
        }
    }
    
    /**
     * Adds a new element to the binary search tree.
     * @param element the element to be added to the tree
     */
    public void addElement(T element) {
        //create a new node with the given element
        Node newNode = new Node(element);
        
        //if tree is empty, set the new node as the root
        if (root == null) {
            root = newNode;
            return;
        }
        
        //otherwise, start from the root and traverse the tree to find the correct position for the new node
        Node current = root;
        while (true) {
            //if element is less than current node, go left
            if (element.compareTo(current.value) < 0) {
                //if left subtree is empty, insert new node here
                if (current.left == null) {
                    current.left = newNode;
                    return;
                } 
                //if left subtree is not empty, move to the next node on the left
                else {
                    current = current.left;
                }
            } 
            //if element is greater than current node, go right
            else if (element.compareTo(current.value) > 0) {
                //if right subtree is empty, insert new node here
                if (current.right == null) {
                    current.right = newNode;
                    return;
                } 
                //if right subtree is not empty, move to the next node on the right
                else {
                    current = current.right;
                }
            } 
            //if element is equal to current node, do not add it (avoid duplicates)
            else {
                return;
            }
        }
    }
    
    /**
     * Removes an element from the binary search tree.
     * @param element the element to be removed
     */
    public void removeElement(T element) {
        //check if tree is empty
        if (root == null) {
            return;
        }
        
        //start from the root and keep track of the current and parent nodes
        Node current = root;
        Node parent = null;
        
        //keep traversing the tree until we find the node with the given element
        while (current != null) {
            //if element is less than current node, go left
            if (element.compareTo(current.value) < 0) {
                parent = current;
                current = current.left;
            } 
            //if element is greater than current node, go right
            else if (element.compareTo(current.value) > 0) {
                parent = current;
                current = current.right;
            } 
            //if element is equal to current node, we have found the node to be removed
            else {
                break;
            }
        }
        
        //if current is null, element does not exist in the tree
        if (current == null) {
            return;
        }
        
        //if the node has no children, simply remove it by setting the parent's appropriate reference to null
        if (current.left == null && current.right == null) {
            //if current is the root, set root to null
            if (current == root) {
                root = null;
            } 
            //if current is the left child of the parent, set parent's left reference to null
            else if (parent.left == current) {
                parent.left = null;
            } 
            //if current is the right child of the parent, set parent's right reference to null
            else {
                parent.right = null;
            }
        } 
        //if the node has one child, remove it by setting the parent's appropriate reference to the child
        else if (current.left == null || current.right == null) {
            //if current is the root, set root to the child
            if (current == root) {
                //if current has a right child, set root to the right child
                if (current.right != null) {
                    root = current.right;
                } 
                //if current has a left child, set root to the left child
                else {
                    root = current.left;
                }
            } 
            //if current is the left child of the parent
            else if (parent.left == current) {
                //if current has a right child, set parent's left reference to the right child
                if (current.right != null) {
                    parent.left = current.right;
                } 
                //if current has a left child, set parent's left reference to the left child
                else {
                    parent.left = current.left;
                }
            } 
            //if current is the right child of the parent
            else {
                //if current has a right child, set parent's right reference to the right child
                if (current.right != null) {
                    parent.right = current.right;
                } 
                //if current has a left child, set parent's right reference to the left child
                else {
                    parent.right = current.left;
                }
            }
        } 
        //if the node has two children, find its successor and replace its value with the successor's value
        else {
            //get the successor node by finding the leftmost node in the right subtree
            Node successor = current.right;
            while (successor.left != null) {
                successor = successor.left;
            }
            
            //replace current node's value with the successor's value
            current.value = successor.value;
            
            //remove the successor node by calling the removeElement method recursively with the successor's value
            removeElement(successor.value);
        }
    }
    
    /**
     * Searches for an element in the binary search tree.
     * @param element the element to search for
     * @return true if the element is found, false otherwise
     */
    public boolean searchElement(T element) {
        //if tree is empty, element does not exist
        if (root == null) {
            return false;
        }
        
        //start from the root and keep track of the current node
        Node current = root;
        
        //keep traversing the tree until we find the element or reach the end
        while (current != null) {
            //if element is less than current node, go left
            if (element.compareTo(current.value) < 0) {
                current = current.left;
            } 
            //if element is greater than current node, go right
            else if (element.compareTo(current.value) > 0) {
                current = current.right;
            } 
            //if element is equal to current node, we have found the element
            else {
                return true;
            }
        }
        
        //if we reach the end without finding the element, it does not exist in the tree
        return false;
    }
    
    /**
     * Prints the binary search tree in preorder traversal.
     * @param node the node to start the traversal from
     */
    public void printPreorder(Node node) {
        //base case
        if (node == null) {
            return;
        }
        
        //print the current node's value
        System.out.print(node.value + " ");
        
        //recursively print the left subtree
        printPreorder(node.left);
        
        //recursively print the right subtree
        printPreorder(node.right);
    }
    
    /**
     * Prints the binary search tree in inorder traversal.
     * @param node the node to start the traversal from
     */
    public void printInorder(Node node) {
        //base case
        if (node == null) {
            return;
        }
        
        //recursively print the left subtree
        printInorder(node.left);
        
        //print the current node's value
        System.out.print(node.value + " ");
        
        //recursively print the right subtree
        printInorder(node.right);
    }
    
    /**
     * Prints the binary search tree in postorder traversal.
     * @param node the node to start the traversal from
     */
    public void printPostorder(Node node) {
        //base case
        if (node == null) {
            return;
        }
        
        //recursively print the left subtree
        printPostorder(node.left);
        
        //recursively print the right subtree
        printPostorder(node.right);
        
        //print the current node's value
        System.out.print(node.value + " ");
    }
}