//Define an abstract class Animal
abstract class Animal {
    String name;
    int age;
    boolean isMammal;

    //Constructor for Animal class
    public Animal(String name, int age, boolean isMammal) {
        this.name = name;
        this.age = age;
        this.isMammal = isMammal;
    }

    //Abstract method to get animal sound
    public abstract String getSound();

    //Method to print animal's information
    public void showInfo() {
        System.out.println("Name: " + this.name);
        System.out.println("Age: " + this.age);
        System.out.println("Is mammal: " + this.isMammal);
        System.out.println("Sound: " + this.getSound());
    }
}

//Define a class Dog that extends Animal
class Dog extends Animal {

    //Constructor for Dog class
    public Dog(String name, int age) {
        super(name, age, true);
    }

    //Implementation of abstract getSound method
    public String getSound() {
        return "Woof!";
    }
}

//Define a class Cat that extends Animal
class Cat extends Animal {

    //Constructor for Cat class
    public Cat(String name, int age) {
        super(name, age, true);
    }

    //Implementation of abstract getSound method
    public String getSound() {
        return "Meow!";
    }
}

//Define a class Bird that extends Animal
class Bird extends Animal {

    //Constructor for Bird class
    public Bird(String name, int age) {
        super(name, age, false);
    }

    //Implementation of abstract getSound method
    public String getSound() {
        return "Chirp!";
    }
}

//Create instances of each Animal class
Dog dog = new Dog("Fido", 4);
Cat cat = new Cat("Whiskers", 2);
Bird bird = new Bird("Tweety", 1);

//Call showInfo method for each Animal instance
dog.showInfo();
cat.showInfo();
bird.showInfo();

/* Output:
Name: Fido
Age: 4
Is mammal: true
Sound: Woof!

Name: Whiskers
Age: 2
Is mammal: true
Sound: Meow!

Name: Tweety
Age: 1
Is mammal: false
Sound: Chirp!
 */