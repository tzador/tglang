/**
 * This class represents a linked list node in a simple implementation of a linked list.
 * It has a generic data field and a pointer to the next node in the list.
 */
class Node<T> {
    private T data;
    private Node<T> next;

    /**
     * Constructor for creating a new node with given data and pointing to null.
     *
     * @param data the data to be stored in the node.
     */
    public Node(T data) {
        this.data = data;
        this.next = null;
    }

    /**
     * Gets the data stored in the node.
     *
     * @return the data stored in the node.
     */
    public T getData() {
        return data;
    }

    /**
     * Sets the data of the node.
     *
     * @param data the data to be set in the node.
     */
    public void setData(T data) {
        this.data = data;
    }

    /**
     * Gets the next node in the list.
     *
     * @return the next node in the list.
     */
    public Node<T> getNext() {
        return next;
    }

    /**
     * Sets the next node in the list.
     *
     * @param next the next node to be set.
     */
    public void setNext(Node<T> next) {
        this.next = next;
    }
}

/**
 * This class represents a simple linked list.
 * It has a head node and methods for adding, removing, and traversing the list.
 */
class LinkedList<T> {
    private Node<T> head;

    /**
     * Constructor for creating an empty linked list.
     */
    public LinkedList() {
        this.head = null;
    }

    /**
     * Adds a new node with the given data to the front of the list.
     *
     * @param data the data to be added at the front of the list.
     */
    public void addFirst(T data) {
        Node<T> newNode = new Node<T>(data);
        newNode.setNext(this.head);
        this.head = newNode;
    }

    /**
     * Removes and returns the first node in the list.
     *
     * @return the first node in the list.
     */
    public Node<T> removeFirst() {
        if (this.head == null) {
            return null;
        } else {
            Node<T> removedNode = this.head;
            this.head = this.head.getNext();
            return removedNode;
        }
    }

    /**
     * Traverses the list and prints the data in each node.
     */
    public void printList() {
        Node<T> currentNode = this.head;
        while (currentNode != null) {
            System.out.println(currentNode.getData());
            currentNode = currentNode.getNext();
        }
    }
}

// An example of using the LinkedList class with Integers as the data type:

public static void main(String[] args) {
    LinkedList<Integer> list = new LinkedList<>();

    list.addFirst(3); // adding 3 to the front of the list
    list.addFirst(7); // adding 7 to the front of the list
    list.addFirst(9); // adding 9 to the front of the list

    list.printList(); // printing the list, output: 9, 7, 3

    list.removeFirst(); // removing the first node (9)
    list.printList(); // printing the updated list, output: 7, 3
}