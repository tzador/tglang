class LinkedList<T> {
    //Create a new node class to be used in the linked list
    private class Node<T> {
        T value;
        Node<T> next;

        //Constructor for the Node class
        public Node(T value, Node<T> next) {
            this.value = value;
            this.next = next;
        }

        //Getter method for the value of a node
        public T getValue() {
            return value;
        }

        //Setter method for the value of a node
        public void setValue(T value) {
            this.value = value;
        }

        //Getter method for the next node in the list
        public Node<T> getNext() {
            return next;
        }

        //Setter method for the next node in the list
        public void setNext(Node<T> next) {
            this.next = next;
        }
    }

    private Node<T> head;
    private int size;

    //Constructor for the LinkedList class
    public LinkedList() {
        head = null;
        size = 0;
    }

    //Method to add a new node to the end of the list
    public void add(T value) {
        Node<T> newNode = new Node<T>(value, null);
        if (head == null) {
            head = newNode;
        } else {
            //Traverse through the list to find the last node
            Node<T> current = head;
            while (current.getNext() != null) {
                current = current.getNext();
            }
            //Set the last node's next to the new node
            current.setNext(newNode);
        }
        size++;
    }

    //Method to add a new node at a specified index
    public void add(int index, T value) {
        //Check if index is within bounds
        if (index < 0 || index > size) {
            System.out.println("Invalid index");
            return;
        }
        if (index == 0) {
            //Create a new node and set it as the new head
            head = new Node<T>(value, head);
        } else {
            //Traverse through the list to find the node at the specified index
            Node<T> current = head;
            for (int i = 0; i < index - 1; i++) {
                current = current.getNext();
            }
            //Create a new node and insert it at the specified index
            Node<T> newNode = new Node<T>(value, current.getNext());
            current.setNext(newNode);
        }
        size++;
    }

    //Method to remove a node at a specified index
    public void remove(int index) {
        //Check if index is within bounds
        if (index < 0 || index >= size) {
            System.out.println("Invalid index");
            return;
        }
        if (index == 0) {
            //Set head to the next node, effectively removing the first node
            head = head.getNext();
        } else {
            //Traverse through the list to find the node at the specified index 
            Node<T> current = head;
            for (int i = 0; i < index - 1; i++) {
                current = current.getNext();
            }
            //Update the next node to skip over the removed node
            current.setNext(current.getNext().getNext());
        }
        size--;
    }

    //Method to get the value at a specified index
    public T get(int index) {
        //Check if index is within bounds
        if (index < 0 || index >= size) {
            System.out.println("Invalid index");
            return null;
        }
        //Traverse through the list to find the node at the specified index
        Node<T> current = head;
        for (int i = 0; i < index; i++) {
            current = current.getNext();
        }
        return current.getValue();
    }

    //Method to print the list
    public void printList() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        //Traverse through the list and print each value
        Node<T> current = head;
        while (current != null) {
            System.out.print(current.getValue() + " ");
            current = current.getNext();
        }
        System.out.println();
    }
}