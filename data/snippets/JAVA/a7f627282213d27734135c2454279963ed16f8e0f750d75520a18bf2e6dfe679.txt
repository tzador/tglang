/**
 * This class represents a Binary Search Tree data structure.
 */
public class BinarySearchTree<T extends Comparable<T>> {
    
    /**
     * This inner class represents a Node in the Binary Search Tree.
     */
    class Node {
        
        public T data; // data stored in the node
        public Node left; // left child node
        public Node right; // right child node
        
        /**
         * Constructor for creating a Node with given data.
         * @param data the data to be stored in the node
         */
        public Node(T data) {
            this.data = data;
            left = null;
            right = null;
        }
    }
    
    private Node root; // root node of the tree
    
    /**
     * Constructor for creating an empty Binary Search Tree.
     */
    public BinarySearchTree() {
        root = null;
    }
    
    /**
     * Method to insert a new node with given data into the Binary Search Tree.
     * @param data the data to be inserted
     */
    public void insert(T data) {
        root = insert(root, data);
    }
    
    /**
     * Private helper method for inserting a new node into the tree.
     * @param current the current node being examined
     * @param data the data to be inserted
     * @return the updated node after insertion
     */
    private Node insert(Node current, T data) {
        if (current == null) {
            return new Node(data);
        }
        
        if (data.compareTo(current.data) < 0) {
            current.left = insert(current.left, data);
        } else if (data.compareTo(current.data) > 0) {
            current.right = insert(current.right, data);
        } else {
            // do nothing, duplicate data not allowed in BST
        }
        return current;
    }
    
    /**
     * Method to check if the Binary Search Tree contains the given data.
     * @param data the data to be checked
     * @return true if the tree contains the data, false otherwise
     */
    public boolean contains(T data) {
        return contains(root, data);
    }
    
    /**
     * Private helper method for checking if the tree contains the given data.
     * @param current the current node being examined
     * @param data the data to be checked
     * @return true if the node is found, false otherwise
     */
    private boolean contains(Node current, T data) {
        if (current == null) {
            return false;
        } else if (data == current.data) {
            return true;
        } else if (data.compareTo(current.data) < 0) {
            return contains(current.left, data);
        } else {
            return contains(current.right, data);
        }
    }
    
    /**
     * Method to remove a node with the given data from the Binary Search Tree.
     * @param data the data to be removed
     */
    public void remove(T data) {
        root = remove(root, data);
    }
    
    /**
     * Private helper method for removing a node from the tree.
     * @param current the current node being examined
     * @param data the data to be removed
     * @return the updated node after removal
     */
    private Node remove(Node current, T data) {
        if (current == null) {
            return null;
        }
        
        if (data.compareTo(current.data) < 0) {
            current.left = remove(current.left, data);
        } else if (data.compareTo(current.data) > 0) {
            current.right = remove(current.right, data);
        } else {
            // found the node to be removed
            if (current.left == null) {
                // if node has no left child
                return current.right;
            } else if (current.right == null) {
                // if node has no right child
                return current.left;
            } else {
                // if node has both left and right children
                current.data = findMin(current.right).data; // replaces current node's data with the smallest data from the right subtree
                current.right = remove(current.right, current.data); // recursively remove the node with the smallest data from the right subtree
            }
        }
        return current;
    }
    
    /**
     * Method to find the smallest node in a given subtree.
     * @param current the root of the subtree
     * @return the smallest node in the subtree
     */
    private Node findMin(Node current) {
        while (current.left != null) {
            current = current.left;
        }
        return current;
    }
    
    /**
     * Method to print the Binary Search Tree in sorted order (left subtree, then current node, then right subtree).
     */
    public void printInOrder() {
        printInOrder(root);
    }
    
    /**
     * Private helper method for printing the tree in sorted order.
     * @param current the current node being examined
     */
    private void printInOrder(Node current) {
        if (current != null) {
            printInOrder(current.left);
            System.out.print(current.data + " ");
            printInOrder(current.right);
        }
    }

}