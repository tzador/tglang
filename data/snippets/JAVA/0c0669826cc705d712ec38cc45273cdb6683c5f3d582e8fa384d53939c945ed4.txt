public class BinaryTree {

// This class represents a node in the binary tree
class Node {
    int data;
    Node left;
    Node right;

    // Constructor to initialize a node with given data
    Node(int value) {
        data = value;
        left = null;
        right = null;
    }
}

// Root of the binary tree
Node root;

// Constructor to initialize an empty binary tree
BinaryTree() {
    root = null;
}

// Method to insert a new node into the binary tree
public void insert(int value) {
    root = insertRec(root, value);
}

/* A recursive utility function to insert a new node
   with given data in the binary tree */
Node insertRec(Node root, int value) {
    // If the tree is empty, create a new node and return it
    if (root == null) {
        root = new Node(value);
        return root;
    }

    // Otherwise, recur down the tree
    if (value < root.data) {
        root.left = insertRec(root.left, value);
    } else if (value > root.data) {
        root.right = insertRec(root.right, value);
    }

    // Return the unchanged node pointer
    return root;
}

// Method to print the binary tree in inOrder traversal
public void printInOrder() {
    printInOrderRec(root);
}

/* Recursive function to print the binary tree in inOrder traversal */
void printInOrderRec(Node root) {
    if (root != null) {
        // First recursively print the left subtree
        printInOrderRec(root.left);

        // Then print the data of the node
        System.out.println(root.data);

        // Finally recursively print the right subtree
        printInOrderRec(root.right);
    }
}

// Method to print the binary tree in preOrder traversal
public void printPreOrder() {
    printPreOrderRec(root);
}

/* Recursive function to print the binary tree in preOrder traversal */
void printPreOrderRec(Node root) {
    if (root != null) {
        // First print the data of the node
        System.out.println(root.data);

        // Then recursively print the left subtree
        printInOrderRec(root.left);

        // Finally recursively print the right subtree
        printInOrderRec(root.right);
    }
}

// Method to print the binary tree in postOrder traversal
public void printPostOrder() {
    printPostOrderRec(root);
}

/* Recursive function to print the binary tree in postOrder traversal */
void printPostOrderRec(Node root) {
    if (root != null) {
        // First recursively print the left subtree
        printInOrderRec(root.left);

        // Then recursively print the right subtree
        printInOrderRec(root.right);

        // Finally print the data of the node
        System.out.println(root.data);
    }
}

public static void main(String[] args) {
    BinaryTree binaryTree = new BinaryTree();

    // Insert nodes into the binary tree
    binaryTree.insert(6);
    binaryTree.insert(3);
    binaryTree.insert(9);
    binaryTree.insert(7);
    binaryTree.insert(5);
    binaryTree.insert(1);
    binaryTree.insert(2);

    // Print the binary tree in inOrder traversal
    System.out.println("Printing binary tree in inOrder traversal:");
    binaryTree.printInOrder();

    // Print the binary tree in preOrder traversal
    System.out.println("Printing binary tree in preOrder traversal:");
    binaryTree.printPreOrder();

    // Print the binary tree in postOrder traversal
    System.out.println("Printing binary tree in postOrder traversal:");
    binaryTree.printPostOrder();
}
}