/**
 * This is a comment block explaining the purpose of the code snippet
 * and its input/output.
 *
 * The code below is an example of implementing a binary search tree
 * in Java, which is a data structure that allows for efficient
 * searching, insertion, and deletion of elements in logarithmic time.
 *
 * The input is a list of integer values to be inserted into the tree
 * and the output is the tree itself.
 */

class Node {
    int value;
    Node left, right;

    Node(int value) {
        this.value = value;
    }
}

class BinarySearchTree {
    Node root;

    /**
     * A function to insert a new value into the tree.
     * @param value the value to be inserted
     */
    public void insert(int value) {
        root = insertNode(root, value);
    }

    /**
     * A helper function to recursively insert a new value into the tree.
     * @param node the current node being compared
     * @param value the value to be inserted
     * @return the updated node
     */
    private Node insertNode(Node node, int value) {
        // If the current node is null, create a new node with the given value.
        if (node == null) {
            node = new Node(value);
        } else {
            // If the value is less than the current node's value,
            // insert it to the left subtree.
            if (value < node.value) {
                node.left = insertNode(node.left, value);
            }
            // If the value is greater than the current node's value,
            // insert it to the right subtree.
            else {
                node.right = insertNode(node.right, value);
            }
        }
        return node;
    }

    /**
     * A function to print the tree in in-order traversal.
     * @param node the current node being traversed
     */
    public void printInOrder(Node node) {
        if (node != null) {
            printInOrder(node.left);       // Recursively traverse the left subtree.
            System.out.print(node.value + " "); // Print the current node's value.
            printInOrder(node.right);      // Recursively traverse the right subtree.
        }
    }

    public static void main(String[] args) {
        // Create a new binary search tree.
        BinarySearchTree tree = new BinarySearchTree();

        // Insert values into the tree.
        tree.insert(3);
        tree.insert(7);
        tree.insert(2);
        tree.insert(9);
        tree.insert(4);
        tree.insert(1);

        // Print the tree in in-order traversal.
        System.out.print("Tree in in-order traversal: ");
        tree.printInOrder(tree.root);
    }
}