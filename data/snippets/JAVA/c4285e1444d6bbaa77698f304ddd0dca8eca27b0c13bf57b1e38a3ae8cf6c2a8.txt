/**
 * This class represents a game of tic-tac-toe
 * Inherits from the abstract Game class
 */
public class TicTacToe extends Game {

    /**
     * Constant representing the size of the tic-tac-toe board
     */
    private static final int BOARD_SIZE = 3;

    /**
     * Array representing the tic-tac-toe board
     */
    private char[][] board;

    /**
     * Constructor for TicTacToe class
     * Initializes the board with empty spaces
     */
    public TicTacToe() {
        board = new char[BOARD_SIZE][BOARD_SIZE];
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = ' ';
            }
        }
    }

    /**
     * Method to check if a player has won the game
     *
     * @param player - char representing the player's symbol
     * @return true if the player has won, false otherwise
     */
    @Override
    public boolean checkWin(char player) {
        // check for horizontal win
        for (int i = 0; i < BOARD_SIZE; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true;
            }
        }

        // check for vertical win
        for (int i = 0; i < BOARD_SIZE; i++) {
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
                return true;
            }
        }

        // check for diagonal win
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true;
        }
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
            return true;
        }

        // no win
        return false;
    }

    /**
     * Method to check if the game is a tie
     *
     * @return true if the board is full and there is no winner, false otherwise
     */
    @Override
    public boolean checkTie() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to make a move in the game
     *
     * @param player - char representing the player's symbol
     * @param row - row index of the move
     * @param col - column index of the move
     * @return true if the move was successful, false otherwise
     */
    public boolean makeMove(char player, int row, int col) {
        // check if move is within board bounds
        if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE) {
            return false;
        }

        // check if space is already occupied
        if (board[row][col] != ' ') {
            return false;
        }

        // make the move and return true
        board[row][col] = player;
        return true;
    }

    /**
     * Method to reset the game
     */
    public void resetGame() {
        board = new char[BOARD_SIZE][BOARD_SIZE];
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = ' ';
            }
        }
    }

    /**
     * Method to print the current board state
     */
    public void printBoard() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
}

// create a new instance of the TicTacToe game
TicTacToe game = new TicTacToe();

// Player 1's turn
game.makeMove('X', 1, 1);

// Print the new board state
game.printBoard();

// check for win
if (game.checkWin('X')) {
    System.out.println("Player 1 wins!");
}

// Player 2's turn
game.makeMove('O', 0, 2);

// check for tie
if (game.checkTie()) {
    System.out.println("It's a tie!");
}

// reset the game
game.resetGame();