import java.util.*;

// This class represents a graph data structure
// with methods for adding and removing nodes and edges,
// finding the shortest path between two nodes, and checking if the graph is connected.

class Graph {
    private HashMap<Integer, HashSet<Integer>> adjacencyMap;
    private HashMap<Integer, Integer> distances;

    public Graph() {
        this.adjacencyMap = new HashMap<>();
        this.distances = new HashMap<>();
    }

    // method for adding new node to the graph
    public void addNode(int node) {
        if (!this.adjacencyMap.containsKey(node)) {
            this.adjacencyMap.put(node, new HashSet<>());
            this.distances.put(node, 0);
        }
    }

    // method for removing node from the graph
    public void removeNode(int node) {
        if (this.adjacencyMap.containsKey(node)) {
            this.adjacencyMap.remove(node);
            this.distances.remove(node);
        }
    }

    // method for adding edges between two nodes in the graph
    public void addEdge(int node1, int node2) {
        if (this.adjacencyMap.containsKey(node1) && this.adjacencyMap.containsKey(node2)) {
            this.adjacencyMap.get(node1).add(node2);
            this.adjacencyMap.get(node2).add(node1);

            // update distances after adding new edge
            this.updateDistances();
        }
    }

    // method for removing edge between two nodes in the graph
    public void removeEdge(int node1, int node2) {
        if (this.adjacencyMap.containsKey(node1) && this.adjacencyMap.containsKey(node2)) {
            // remove both edges since graph is undirected
            this.adjacencyMap.get(node1).remove(node2);
            this.adjacencyMap.get(node2).remove(node1);

            // update distances after removing edge
            this.updateDistances();
        }
    }

    // method for updating distances between nodes when new edges are added or removed
    private void updateDistances() {
        // create queue to store nodes to visit
        Queue<Integer> queue = new LinkedList<>();
        // create set to store visited nodes
        HashSet<Integer> visited = new HashSet<>();

        // add nodes with distance 0 to queue and mark them as visited
        for (int node : this.distances.keySet()) {
            if (this.distances.get(node) == 0) {
                queue.add(node);
                visited.add(node);
            }
        }

        // iterate through queue until all nodes are visited
        while (!queue.isEmpty()) {
            // remove first node in queue
            int currentNode = queue.poll();

            // iterate through neighbors of current node
            for (int neighbor : this.adjacencyMap.get(currentNode)) {
                // if neighbor has not been visited, update its distance and add it to queue and visited set
                if (!visited.contains(neighbor)) {
                    this.distances.put(neighbor, this.distances.get(currentNode) + 1);
                    queue.add(neighbor);
                    visited.add(neighbor);
                }
            }
        }
    }

    // method for finding the shortest path between two nodes using BFS
    public ArrayList<Integer> shortestPath(int start, int end) {
        // create queue to store nodes to visit
        Queue<Integer> queue = new LinkedList<>();
        // create set to store visited nodes
        HashSet<Integer> visited = new HashSet<>();
        // create hashmap to track the previous node in the path
        HashMap<Integer, Integer> previous = new HashMap<>();

        // add start node to queue and mark it as visited
        queue.add(start);
        visited.add(start);

        // iterate through queue until end node is reached or all nodes are visited
        while (!queue.isEmpty()) {
            // remove first node in queue
            int currentNode = queue.poll();

            // if end node is reached, backtrack through previous nodes to find the shortest path
            if (currentNode == end) {
                ArrayList<Integer> path = new ArrayList<>();
                path.add(end);

                int prev = previous.get(end);

                while (prev != start) {
                    path.add(0, prev);
                    prev = previous.get(prev);
                }

                path.add(0, start);
                return path;
            }

            // iterate through neighbors of current node
            for (int neighbor : this.adjacencyMap.get(currentNode)) {
                // if neighbor has not been visited, add it to queue and mark it as visited
                // also store its previous node in the path
                if (!visited.contains(neighbor)) {
                    queue.add(neighbor);
                    visited.add(neighbor);
                    previous.put(neighbor, currentNode);
                }
            }
        }

        // if end node could not be reached, return empty list to indicate no path exists
        return new ArrayList<>();
    }

    // method for checking if the graph is connected by checking if the distances hashmap
    // contains any nodes with a distance of 0, which indicates that not all nodes are reachable
    public boolean isConnected() {
        for (int distance : this.distances.values()) {
            if (distance == 0) {
                return false;
            }
        }

        return true;
    }
}