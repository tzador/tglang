/**
 * This class represents a graph data structure
 * with nodes and edges.
 */
public class Graph {

    private int numNodes; // number of nodes in the graph
    private LinkedList<Integer>[] adjacentNodes; // array of linked lists to represent adjacent nodes for each node

    /**
     * Constructor that takes in the number of nodes
     * and initializes the adjacentNodes array.
     * @param numNodes
     */
    public Graph(int numNodes) {
        this.numNodes = numNodes;
        this.adjacentNodes = new LinkedList[numNodes];
        for (int i = 0; i < numNodes; i++) {
            this.adjacentNodes[i] = new LinkedList<Integer>();
        }
    }

    /**
     * This method adds an edge between two given nodes.
     * @param node1
     * @param node2
     */
    public void addEdge(int node1, int node2) {
        this.adjacentNodes[node1].add(node2);
        this.adjacentNodes[node2].add(node1);
    }

    /**
     * This method performs a breadth-first search on the graph,
     * starting from a given node.
     * @param startNode
     * @return A string representing the order in which nodes were visited in the search.
     */
    public String breathFirstSearch(int startNode) {
        // create a queue to store visited nodes
        Queue<Integer> visited = new LinkedList<>();
        // create a queue to store nodes to visit
        Queue<Integer> toVisit = new LinkedList<>();
        // enqueue the start node
        toVisit.add(startNode);
        // store visited nodes in a string
        String result = "";

        while (!toVisit.isEmpty()) {
            // dequeue the next node to visit
            int current = toVisit.poll();
            // check if current node has not been visited before
            if (!visited.contains(current)) {
                // visit the current node
                visited.add(current);
                result += current + " ";
                // enqueue all adjacent nodes of current node
                for (int node : this.adjacentNodes[current]) {
                    toVisit.add(node);
                }
            }
        }
        return result;
    }

    /**
     * This method performs a depth-first search on the graph,
     * starting from a given node.
     * @param startNode
     * @return A string representing the order in which nodes were visited in the search.
     */
    public String depthFirstSearch(int startNode) {
        // create a stack to store visited nodes
        Stack<Integer> visited = new Stack<>();
        // create a stack to store nodes to visit
        Stack<Integer> toVisit = new Stack<>();
        // push the start node onto the stack
        toVisit.push(startNode);
        // store visited nodes in a string
        String result = "";

        while (!toVisit.isEmpty()) {
            // pop the next node to visit
            int current = toVisit.pop();
            // check if current node has not been visited before
            if (!visited.contains(current)) {
                // visit the current node
                visited.push(current);
                result += current + " ";
                // push all adjacent nodes of current node onto the stack
                for (int node : this.adjacentNodes[current]) {
                    toVisit.push(node);
                }
            }
        }
        return result;
    }
}