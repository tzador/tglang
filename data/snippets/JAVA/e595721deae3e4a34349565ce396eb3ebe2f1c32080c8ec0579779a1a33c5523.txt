/*
This is a Java program to find the shortest path between two nodes in a graph using Dijkstra's algorithm
*/
import java.util.*;

public class Dijkstra {
    public static void main(String[] args) {
        //create an adjacency matrix representation of the graph
        int[][] graph = {{0, 4, 2, 0, 0}, 
                         {4, 0, 1, 5, 0}, 
                         {2, 1, 0, 8, 10}, 
                         {0, 5, 8, 0, 2}, 
                         {0, 0, 10, 2, 0}};

        //create a set to store visited nodes
        Set<Integer> visited = new HashSet<>();

        //create priority queue to store unvisited nodes with shortest distance from source
        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> a.distance - b.distance);

        //initialize start and end nodes, distance and parent arrays
        int source = 0;
        int target = 4;
        int[] distances = new int[graph.length];
        Arrays.fill(distances, Integer.MAX_VALUE);
        distances[source] = 0;
        int[] parents = new int[graph.length];
        Arrays.fill(parents, -1);

        //add source node to priority queue
        pq.add(new Node(source, 0));

        //loop until all nodes have been visited
        while (!pq.isEmpty()) {
            //get node with shortest distance from priority queue
            Node curr = pq.remove();

            //check if node has already been visited
            if (!visited.contains(curr.vertex)) {
                //add current node to visited set
                visited.add(curr.vertex);

                //check if current node is the target node
                if (curr.vertex == target) {
                    //print shortest distance and path
                    System.out.println("Shortest distance from source to target: " + curr.distance);
                    System.out.println("Shortest path from source to target: " + getPath(parents, target));
                    break;
                }

                //iterate through all adjacent nodes of current node
                for (int i = 0; i < graph[curr.vertex].length; i++) {
                    //check if node is adjacent and has not been visited
                    if (graph[curr.vertex][i] != 0 && !visited.contains(i)) {
                        //calculate distance to adjacent node
                        int distance = curr.distance + graph[curr.vertex][i];

                        //check if current distance is shorter than previously calculated distance
                        if (distance < distances[i]) {
                            //update distance and parent for adjacent node
                            distances[i] = distance;
                            parents[i] = curr.vertex;
                            //add adjacent node to priority queue
                            pq.add(new Node(i, distance));
                        }
                    }
                }
            }
        }
    }

    //method to get path from source to target
    private static String getPath(int[] parents, int target) {
        //create a stack to store path
        Stack<Integer> path = new Stack<>();
        //add target node to stack
        path.push(target);

        //loop until source node is reached
        while (parents[target] != -1) {
            //add parent of target node to stack
            path.push(parents[target]);
            //set target node to next parent
            target = parents[target];
        }

        //create string to store path
        String pathString = "";

        //loop until stack is empty
        while (!path.isEmpty()) {
            //add node from stack to path string
            pathString += path.pop() + " ";
        }

        return pathString;
    }

    //class to represent a Node with vertex and distance
    private static class Node {
        private int vertex;
        private int distance;

        //constructor
        private Node(int vertex, int distance) {
            this.vertex = vertex;
            this.distance = distance;
        }
    }
}