/**
 * This class represents a binary tree data structure.
 * It has functions for inserting and deleting nodes, as well as traversing and searching the tree.
 */
public class BinaryTree {
    /**
     * The root node of the tree.
     */
    private Node root;

    /**
     * Constructor for the BinaryTree class.
     * Initializes the root node to null.
     */
    public BinaryTree() {
        this.root = null;
    }

    /**
     * Inserts a new node into the tree.
     * @param data The data to be stored in the new node.
     */
    public void insert(int data) {
        Node newNode = new Node(data);

        // if tree is empty, set new node as root node
        if (this.root == null) {
            this.root = newNode;
        } else {
            // recursively find the correct position to insert the new node
            insertNode(this.root, newNode);
        }
    }

    /**
     * Recursive function to traverse the tree and insert the new node in the correct position.
     * @param currentNode The current node being compared to determine the correct position.
     * @param newNode The new node to be inserted into the tree.
     */
    private void insertNode(Node currentNode, Node newNode) {
        // if new node data is less than current node data, search left subtree
        if (newNode.getData() < currentNode.getData()) {
            // if left child is null, set new node as left child
            if (currentNode.getLeftChild() == null) {
                currentNode.setLeftChild(newNode);
            } else {
                // else, recursively search left subtree
                insertNode(currentNode.getLeftChild(), newNode);
            }
        }
        // if new node data is greater than current node data, search right subtree
        else if (newNode.getData() > currentNode.getData()) {
            // if right child is null, set new node as right child
            if (currentNode.getRightChild() == null) {
                currentNode.setRightChild(newNode);
            } else {
                // else, recursively search right subtree
                insertNode(currentNode.getRightChild(), newNode);
            }
        }
        // if new node data is equal to current node data, do not add duplicate node
        else {
            System.out.println("Duplicate nodes not allowed in binary tree.");
        }
    }

    /**
     * Deletes a node from the tree.
     * @param data The data of the node to be deleted.
     */
    public void delete(int data) {
        // call recursive function to search for the node to be deleted
        this.root = deleteNode(this.root, data);
    }

    /**
     * Recursive function to search for the node to be deleted and rearrange the tree accordingly.
     * @param currentNode The current node being compared to determine the correct position.
     * @param data The data of the node to be deleted.
     * @return The new root node after rearranging the tree.
     */
    private Node deleteNode(Node currentNode, int data) {
        // if tree is empty or node was not found, return null
        if (currentNode == null) {
            return null;
        }
        // if data is smaller than current node data, search left subtree recursively
        if (data < currentNode.getData()) {
            currentNode.setLeftChild(deleteNode(currentNode.getLeftChild(), data));
        }
        // if data is larger than current node data, search right subtree recursively
        else if (data > currentNode.getData()) {
            currentNode.setRightChild(deleteNode(currentNode.getRightChild(), data));
        }
        // when the node is found
        else {
            // if node has no children, simply remove it by returning null
            if (currentNode.getLeftChild() == null && currentNode.getRightChild() == null) {
                return null;
            }
            // if node has only one child, return that child to maintain tree structure
            else if (currentNode.getLeftChild() == null) {
                return currentNode.getRightChild();
            } else if (currentNode.getRightChild() == null) {
                return currentNode.getLeftChild();
            }
            // if node has two children, find the minimum value in right subtree
            int minValue = findMinValue(currentNode.getRightChild());
            // set current node data to minimum value found in right subtree
            currentNode.setData(minValue);
            // recursively delete the node with minimum value from right subtree
            currentNode.setRightChild(deleteNode(currentNode.getRightChild(), minValue));
        }
        return currentNode;
    }

    /**
     * Finds the minimum value in a given subtree.
     * @param currentNode The root node of the subtree.
     * @return The minimum value found in the subtree.
     */
    private int findMinValue(Node currentNode) {
        // loop until the leftmost leaf node is reached
        while (currentNode.getLeftChild() != null) {
            currentNode = currentNode.getLeftChild();
        }
        // return the data of the leftmost leaf node
        return currentNode.getData();
    }

    /**
     * Traverses the tree in 'inorder' order and prints the nodes.
     * @param currentNode The current node being visited.
     */
    public void inorderTraversal(Node currentNode) {
        // base case: if current node is null, return
        if (currentNode == null) {
            return;
        }
        // recursively call the function for the left subtree
        inorderTraversal(currentNode.getLeftChild());
        // print current node data
        System.out.println(currentNode.getData());
        // recursively call the function for the right subtree
        inorderTraversal(currentNode.getRightChild());
    }

    /**
     * Searches the tree for a given value.
     * @param data The value to be searched for.
     * @return True if value is found, false if value is not found.
     */
    public boolean search(int data) {
        // create a queue to store nodes for BFS
        Queue<Node> queue = new LinkedList<>();

        // add the root node to the queue
        queue.add(this.root);

        // loop through the queue until it is empty
        while (!queue.isEmpty()) {
            // remove the first node from the queue
            Node currentNode = queue.remove();
            // if the node's data is equal to the searched value, return true
            if (currentNode.getData() == data) {
                return true;
            }
            // if the node has a left child, add it to the queue
            if (currentNode.getLeftChild() != null) {
                queue.add(currentNode.getLeftChild());
            }
            // if the node has a right child, add it to the queue
            if (currentNode.getRightChild() != null) {
                queue.add(currentNode.getRightChild());
            }
        }
        // if value is not found, return false
        return false;
    }
}

/**
 * This class represents a node in the binary tree data structure.
 * It has a left child and a right child, as well as a data field for storing information.
 */
class Node {
    /**
     * The data stored in the node.
     */
    private int data;

    /**
     * The left child of the node.
     */
    private Node leftChild;

    /**
     * The right child of the node.
     */
    private Node rightChild;

    /**
     * Constructor for the Node class.
     * @param data The data to be stored in the node.
     */
    public Node(int data) {
        this.data = data;
    }

    /**
     * Getter method for the node's data.
     * @return The node's data.
     */
    public int getData() {
        return data;
    }

    /**
     * Setter method for the node's data.
     * @param data The data to be set in the node.
     */
    public void setData(int data) {
        this.data = data;
    }

    /**
     * Getter method for the node's left child.
     * @return The left child node.
     */
    public Node getLeftChild() {
        return leftChild;
    }

    /**
     * Setter method for the node's left child.
     * @param leftChild The node to be set as the left child.
     */
    public void setLeftChild(Node leftChild) {
        this.leftChild = leftChild;
    }

    /**
     * Getter method for the node's right child.
     * @return The right child node.
     */
    public Node getRightChild() {
        return rightChild;
    }

    /**
     * Setter method for the node's right child.
     * @param rightChild The node to be set as the right child.
     */
    public void setRightChild(Node rightChild) {
        this.rightChild = rightChild;
    }
}