// This program simulates a game of blackjack

import java.util.*;

public class BlackjackGame {
    // Create a deck of cards
    private static List<String> deck = new ArrayList<>(Arrays.asList(
            "Ace", "King", "Queen", "Jack",
            "Two", "Three", "Four", "Five", "Six", "Seven",
            "Eight", "Nine", "Ten"));

    // Store the values of each card in a HashMap
    private static Map<String, Integer> cardValues = new HashMap<>();

    // Store the players and their hands in a HashMap
    private static Map<String, List<String>> players = new HashMap<>();

    // Initialize the player and dealer
    private static final String player = "Player";
    private static final String dealer = "Dealer";

    // Set the minimum value for a winning hand
    private static final int winningHand = 21;

    public static void main(String[] args) {
        // Shuffle the deck by using Collections.shuffle()
        Collections.shuffle(deck);

        // Assign values to the cards
        cardValues.put("Ace", 1);
        cardValues.put("King", 10);
        cardValues.put("Queen", 10);
        cardValues.put("Jack", 10);
        cardValues.put("Two", 2);
        cardValues.put("Three", 3);
        cardValues.put("Four", 4);
        cardValues.put("Five", 5);
        cardValues.put("Six", 6);
        cardValues.put("Seven", 7);
        cardValues.put("Eight", 8);
        cardValues.put("Nine", 9);
        cardValues.put("Ten", 10);

        // Initialize the player and dealer's hands to empty lists
        players.put(player, new ArrayList<>());
        players.put(dealer, new ArrayList<>());

        // Deal the initial cards to each player
        dealInitialCards();

        // Check for a natural 21 in the initial hands
        checkNaturalTwentyOne();

        // Keep playing until there is a winner or bust
        while(!isWinner() && !isBust()) {
            // Player's turn
            playerTurn();

            // Dealer's turn
            dealerTurn();
        }

        // Determine the winner based on the values of each hand
        determineWinner();

    }

    // Method to deal the initial two cards to each player
    private static void dealInitialCards() {
        // Deal two cards to the player and dealer
        for (int i=0; i<2; i++) {
            // Deal a card to the player
            String playerCard = deck.remove(0);
            players.get(player).add(playerCard);

            // Deal a card to the dealer
            String dealerCard = deck.remove(0);
            players.get(dealer).add(dealerCard);
        }
    }

    // Method to check if there is a natural 21 in the initial hands
    private static void checkNaturalTwentyOne() {
        // Get the value of the cards in each hand
        int playerHandValue = getHandValue(players.get(player));
        int dealerHandValue = getHandValue(players.get(dealer));

        // Check if player's hand value is 21
        if (playerHandValue == winningHand) {
            // Player wins with a natural 21
            System.out.println("Player wins with a natural 21!");
            System.exit(0);
        }

        // Check if dealer's hand value is 21
        if (dealerHandValue == winningHand) {
            // Dealer wins with a natural 21
            System.out.println("Dealer wins with a natural 21!");
            System.exit(0);
        }
    }

    // Method to get the value of a given hand
    private static int getHandValue(List<String> hand) {
        int handValue = 0;

        // Iterate through the cards in the hand
        for (String card : hand) {
            // Add the value of each card to the handValue
            handValue += cardValues.get(card);
        }

        return handValue;
    }

    // Method to check if there is a winner
    private static boolean isWinner() {
        // Get the value of the cards in each hand
        int playerHandValue = getHandValue(players.get(player));
        int dealerHandValue = getHandValue(players.get(dealer));

        // Check if player's hand value is higher than dealer's hand value
        if (playerHandValue > dealerHandValue) {
            // Player wins
            System.out.println("Player wins!");
            return true;
        }
        // Check if dealer's hand value is higher than player's hand value
        else if (dealerHandValue > playerHandValue) {
            // Dealer wins
            System.out.println("Dealer wins!");
            return true;
        }
        // Check if both hands have the same value
        else if (playerHandValue == dealerHandValue) {
            // It's a tie
            System.out.println("It's a tie!");
            return true;
        }

        // No winner yet
        return false;
    }

    // Method to check if someone has busted
    private static boolean isBust() {
        // Check if player's hand value exceeds 21
        if (getHandValue(players.get(player)) > winningHand) {
            // Dealer wins
            System.out.println("Player busts, dealer wins!");
            return true;
        }
        // Check if dealer's hand value exceeds 21
        else if (getHandValue(players.get(dealer)) > winningHand) {
            // Player wins
            System.out.println("Dealer busts, player wins!");
            return true;
        }

        // No bust yet
        return false;
    }

    // Method for the player's turn
    private static void playerTurn() {
        // Print the player's hand
        System.out.println("Player's hand: " + players.get(player));

        // Ask the player if they want to hit or stay
        System.out.println("Hit or stay? (h/s)");
        Scanner scanner = new Scanner(System.in);
        String input = scanner.next();

        // Check the player's input
        if (input.equalsIgnoreCase("h")) {
            // Player chooses to hit
            String playerCard = deck.remove(0);
            players.get(player).add(playerCard);

            // Check for a natural 21
            if (getHandValue(players.get(player)) == winningHand) {
                System.out.println("Player wins with a natural 21!");
                System.exit(0);
            }
        }
        else if (input.equalsIgnoreCase("s")) {
            // Player chooses to stay
            System.out.println("Player chooses to stay");
        }
    }

    // Method for the dealer's turn
    private static void dealerTurn() {
        // Print the dealer's hand
        System.out.println("Dealer's hand: " + players.get(dealer));

        // Dealer hits if hand value is less than 17
        while (getHandValue(players.get(dealer)) < 17) {
            String dealerCard = deck.remove(0);
            players.get(dealer).add(dealerCard);

            // Check for a natural 21
            if (getHandValue(players.get(dealer)) == winningHand) {
                System.out.println("Dealer wins with a natural 21!");
                System.exit(0);
            }
        }

        // Show the final hand of the dealer
        System.out.println("Dealer's final hand: " + players.get(dealer));
    }

    // Method to determine the winner
    private static void determineWinner() {
        // Get the value of the cards in each hand
        int playerHandValue = getHandValue(players.get(player));
        int dealerHandValue = getHandValue(players.get(dealer));

        // Check for a winner or a tie
        if (playerHandValue > dealerHandValue) {
            System.out.println("Player wins!");
        } else if (dealerHandValue > playerHandValue) {
            System.out.println("Dealer wins!");
        } else {
            System.out.println("It's a tie!");
        }
    }
}