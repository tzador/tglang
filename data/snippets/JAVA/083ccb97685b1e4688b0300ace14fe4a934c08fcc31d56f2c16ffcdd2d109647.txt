/**
 * This class represents a mathematical vector in 3D space.
 */
class Vector {
    private double x; // x component
    private double y; // y component
    private double z; // z component

    // default constructor with all components set to 0
    public Vector() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
    }

    // constructor with specified components
    public Vector(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    // method to calculate the magnitude of the vector
    public double magnitude() {
        return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
    }

    // method to calculate the dot product of two vectors
    public double dotProduct(Vector v) {
        return (this.x * v.x) + (this.y * v.y) + (this.z * v.z);
    }

    // method to calculate the cross product of two vectors
    public Vector crossProduct(Vector v) {
        double cx = (this.y * v.z) - (this.z * v.y);
        double cy = (this.z * v.x) - (this.x * v.z);
        double cz = (this.x * v.y) - (this.y * v.x);
        return new Vector(cx, cy, cz);
    }

    // method to normalize the vector
    public Vector normalize() {
        double mag = this.magnitude();
        return new Vector(this.x / mag, this.y / mag, this.z / mag);
    }

    // method to calculate the angle between two vectors (in degrees)
    public double angleBetween(Vector v) {
        double dotProduct = this.dotProduct(v);
        double mag1 = this.magnitude();
        double mag2 = v.magnitude();
        return Math.acos(dotProduct / (mag1 * mag2)) * (180 / Math.PI); // converting from radians to degrees
    }
}