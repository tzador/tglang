// This code snippet creates a binary search tree class and includes functions for insertion, deletion, and traversal
// Node class definition
class Node {
    int key;
    Node left, right;
    public Node(int item) {
        key = item;
        left = right = null;
    }
}
// Binary Search Tree class definition
class BinarySearchTree {
    Node root;
    // Constructor
    BinarySearchTree() {
        root = null;
    }
    // Insertion function
    void insert(int key) {
        root = insertRecursive(root, key);
    }
    // Recursive insertion helper function
    Node insertRecursive(Node root, int key) {
        if (root == null) {
            root = new Node(key);
            return root;
        }
        if (key < root.key)
            root.left = insertRecursive(root.left, key);
        else if (key > root.key)
            root.right = insertRecursive(root.right, key);
        return root;
    }
    // Deletion function
    void delete(int key) {
        root = deleteRecursive(root, key);
    }
    // Recursive deletion helper function
    Node deleteRecursive(Node root, int key) {
        if (root == null)
            return root;
        if (key < root.key)
            root.left = deleteRecursive(root.left, key);
        else if (key > root.key)
            root.right = deleteRecursive(root.right, key);
        else {
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;
            root.key = minValue(root.right);
            root.right = deleteRecursive(root.right, root.key);
        }
        return root;
    }
    // Function to find minimum value in a subtree
    int minValue(Node root) {
        int minVal = root.key;
        while (root.left != null) {
            minVal = root.left.key;
            root = root.left;
        }
        return minVal;
    }
    // Function to print the tree in order
    void printInOrder() {
        printInOrderRecursive(root);
    }
    // Recursive function to print in order
    void printInOrderRecursive(Node root) {
        if (root != null) {
            printInOrderRecursive(root.left);
            System.out.print(root.key + " ");
            printInOrderRecursive(root.right);
        }
    }
    // Function to print the tree in preorder
    void printPreOrder() {
        printPreOrderRecursive(root);
    }
    // Recursive function to print pre order
    void printPreOrderRecursive(Node root) {
        if (root != null) {
            System.out.print(root.key + " ");
            printPreOrderRecursive(root.left);
            printPreOrderRecursive(root.right);
        }
    }
    // Function to print the tree in postorder
    void printPostOrder() {
        printPostOrderRecursive(root);
    }
    // Recursive function to print postorder
    void printPostOrderRecursive(Node root) {
        if (root != null) {
            printPostOrderRecursive(root.left);
            printPostOrderRecursive(root.right);
            System.out.print(root.key + " ");
        }
    }

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();
        bst.insert(5);
        bst.insert(3);
        bst.insert(8);
        bst.insert(2);
        bst.insert(4);
        bst.insert(7);
        bst.insert(9);
        System.out.println("Print In Order: ");
        bst.printInOrder();
        System.out.println("\nPrint Pre Order: ");
        bst.printPreOrder();
        System.out.println("\nPrint Post Order: ");
        bst.printPostOrder();
        System.out.println("\nDelete 2: ");
        bst.delete(2);
        System.out.println("Print In Order: ");
        bst.printInOrder();
        System.out.println("\nPrint Pre Order: ");
        bst.printPreOrder();
        System.out.println("\nPrint Post Order: ");
        bst.printPostOrder();
    }
}