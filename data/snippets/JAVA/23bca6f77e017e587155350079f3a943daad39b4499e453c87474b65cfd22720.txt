/**
* This is a complex code snippet in JAVA.
* It is a class that implements the Comparable interface.
*/

public class ComplexCodeSnippet implements Comparable<ComplexCodeSnippet> {

    private int id;
    private String name;
    private double price;

    // Constructor
    public ComplexCodeSnippet(int id, String name, double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }

    // Getters and setters
    // Id
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    // Name
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // Price
    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    /**
    * This method compares two ComplexCodeSnippet objects based on their price.
    * @param otherObject - the ComplexCodeSnippet object to be compared
    * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
    */
    @Override
    public int compareTo(ComplexCodeSnippet otherObject) {
        if(this.price < otherObject.price) {
            return -1;
        }
        else if(this.price > otherObject.price) {
            return 1;
        }
        else {
            return 0;
        }
    }

    /**
    * This method calls the compareTo() method to compare two ComplexCodeSnippet objects.
    * @param args - array of command-line arguments
    */
    public static void main(String[] args) {

        // Creating ComplexCodeSnippet objects
        ComplexCodeSnippet obj1 = new ComplexCodeSnippet(1, "Object 1", 10.5);
        ComplexCodeSnippet obj2 = new ComplexCodeSnippet(2, "Object 2", 5.75);
        ComplexCodeSnippet obj3 = new ComplexCodeSnippet(3, "Object 3", 15.0);

        // Printing the objects in their original order
        System.out.println("Before comparison:");
        System.out.println("Object 1: " + obj1.getName() + " Price: " + obj1.getPrice());
        System.out.println("Object 2: " + obj2.getName() + " Price: " + obj2.getPrice());
        System.out.println("Object 3: " + obj3.getName() + " Price: " + obj3.getPrice());

        // Comparing the objects
        System.out.println("\nComparing Object 1 and Object 2:");
        int result = obj1.compareTo(obj2);

        // Printing the result of the comparison
        String comparison;
        if(result < 0) {
            comparison = " is less than ";
        }
        else if(result > 0) {
            comparison = " is greater than ";
        }
        else {
            comparison = " is equal to ";
        }

        // Printing the result of the comparison
        System.out.println("Object 1" + comparison + "Object 2");

        // Sorting the objects in ascending order based on price
        ComplexCodeSnippet[] objects = {obj1, obj2, obj3};
        Arrays.sort(objects);

        // Printing the objects in their sorted order
        System.out.println("\nAfter sorting:");
        for(ComplexCodeSnippet object : objects) {
            System.out.println("Object " + object.getId() + ": " + object.getName() + " Price: " + object.getPrice());
        }
    }
}