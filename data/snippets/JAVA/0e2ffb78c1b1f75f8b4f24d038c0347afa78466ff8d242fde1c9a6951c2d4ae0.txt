public class BinaryTree<T extends Comparable<T>> {

    private Node root;

    private class Node {
        private T data;
        private Node left;
        private Node right;

        public Node(T data) {
            this.data = data;
        }
    }

    public void add(T data) {
        root = addRecursive(root, data);
    }

    private Node addRecursive(Node current, T data) {
        if (current == null) {
            return new Node(data);
        }

        if (data.compareTo(current.data) < 0) {
            current.left = addRecursive(current.left, data);
        } else if (data.compareTo(current.data) > 0) {
            current.right = addRecursive(current.right, data);
        }

        return current;
    }

    public boolean contains(T data) {
        return containsRecursive(root, data);
    }

    private boolean containsRecursive(Node node, T data) {
        if (node == null) {
            return false;
        } else if (data.equals(node.data)) {
            return true;
        }

        return data.compareTo(node.data) < 0
                ? containsRecursive(node.left, data)
                : containsRecursive(node.right, data);
    }

    public void delete(T data) {
        root = deleteRecursive(root, data);
    }

    private Node deleteRecursive(Node current, T data) {
        if (current == null) {
            return null;
        }

        if (data.equals(current.data)) {
            if (current.left == null && current.right == null) {
                return null;
            }

            if (current.right == null) {
                return current.left;
            }

            if (current.left == null) {
                return current.right;
            }

            T smallestValue = findSmallestValue(current.right);
            current.data = smallestValue;
            current.right = deleteRecursive(current.right, smallestValue);
            return current;
        }

        if (data.compareTo(current.data) < 0) {
            current.left = deleteRecursive(current.left, data);
        } else {
            current.right = deleteRecursive(current.right, data);
        }

        return current;
    }

    private T findSmallestValue(Node root) {
        return root.left == null ? root.data : findSmallestValue(root.left);
    }
}