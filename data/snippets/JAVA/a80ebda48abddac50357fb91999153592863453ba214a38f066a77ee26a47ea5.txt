/**
 * This is a complex code snippet in JAVA.
 * It creates a multi-threaded program that implements the Runnable interface.
 * It creates a class that generates random numbers and prints them.
 *
 * This class also has a synchronized method to ensure thread-safe execution.
 * Additionally, it includes try-catch blocks for exception handling.
 *
 * Then, it creates multiple threads and starts their execution to demonstrate parallelism.
 */

import java.util.Random; //importing Random class for generating random numbers

public class MultiThread implements Runnable { //creating class that implements the Runnable interface

    private String threadName; //declaring private instance variable

    MultiThread(String name) { //constructor to initialize threadName variable
        threadName = name;
    }

    public void run() { //overriding the run() method of Runnable interface
        System.out.println("Thread " + threadName + " is running");

        Random rand = new Random(); //creating an instance of Random class
        int num = rand.nextInt(100); //generating a random number between 0 and 100

        printNumber(num); //calling the synchronized method to print the number
    }

    public synchronized void printNumber(int num) { //synchronized method to ensure thread-safe execution
        System.out.println("Random number generated by " + threadName + ": " + num);
    }

    public static void main(String[] args) { //main method to start program execution
        System.out.println("Starting multi-threaded program");

        MultiThread thread1 = new MultiThread("Thread 1"); //creating first thread
        MultiThread thread2 = new MultiThread("Thread 2"); //creating second thread

        try {
            thread1.start(); //starting thread 1
            thread2.start(); //starting thread 2
        } catch (Exception e) { //catching any exceptions that may occur
            System.out.println("Exception caught: " + e);
        }

        System.out.println("Program execution completed"); //printing message to show program execution has finished
    }
}