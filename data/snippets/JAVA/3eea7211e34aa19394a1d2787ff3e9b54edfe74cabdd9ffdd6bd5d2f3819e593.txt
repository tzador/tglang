/**
* This method checks if a string is a valid email address.
* @param email The string to be checked.
* @return True if the string is a valid email address, false otherwise.
*/
public boolean isValidEmail(String email) {
    // Check for null or empty string
    if (email == null || email.equals("")) {
        return false;
    }
    
    // Check for correct format
    if (!email.contains("@") || !email.contains(".")) {
        return false;
    }
    
    // Get index of '@' and '.'
    int atIndex = email.indexOf("@");
    int dotIndex = email.lastIndexOf(".");
    
    // Check if '@' and '.' are in correct positions
    if (atIndex < 1 || dotIndex < atIndex + 2 || dotIndex + 2 >= email.length()) {
        return false;
    }
    
    // Check for consecutive '.' after '@'
    if (email.substring(atIndex).contains("..")) {
        return false;
    }
    
    // Check for consecutive '@'
    if (email.substring(0, atIndex).contains("@")) {
        return false;
    }
    
    // Check for illegal characters before '@'
    String beforeAt = email.substring(0, atIndex);
    for (int i = 0; i < beforeAt.length(); i++) {
        char c = beforeAt.charAt(i);
        if (c == '.' || c == '_' || c == '-' || c == '+') {
            continue;
        } else if (!Character.isLetterOrDigit(c)) {
            return false;
        }
    }
    
    // Check for illegal characters after '@'
    String afterAt = email.substring(atIndex + 1);
    for (int i = 0; i < afterAt.length(); i++) {
        char c = afterAt.charAt(i);
        if (c == '.' || c == '_' || c == '-' || c == '+') {
            continue;
        } else if (!Character.isLetterOrDigit(c) && c != '.') {
            return false;
        }
    }
    
    return true;
}