public class BinaryTree<E extends Comparable<? super E>> implements Tree<E> {
 
// Nested classes
 
/** A node of the tree */
static class Node<E> {
// Data fields
   private E item;
   private Node<E> left;
   private Node<E> right;
 
// Constructors
   /** 
   * Fully specified constructor 
   * @param leftPerson 	The item to be inserted left
   * @param rightPerson The item to be inserted right
   */
   public Node(E leftPerson, E rightPerson) {
      left = new Node<>(leftPerson);
      right = new Node<>(rightPerson);
   }
 
   /** 
   * Partially specified constructor 
   * @param value The item to be inserted
   */
   public Node(E value) {
      item = value;
      left = null;
      right = null;
   }
}
 
// Data fields
/** The root of the binary tree */
private Node<E> root;
 
// Constructor
/** 
* Constructor to initialize BinaryTree 
* @param data 	The data for the root
* @param left 	The left subtree
* @param right The right subtree 
*/
public BinaryTree(E data, BinaryTree<E> left, BinaryTree<E> right) {
   root = new Node<>(data);
   root.left = left.root;
   root.right = right.root;
}

// Methods
/**
* Add an item to the binary tree
* @param item The new item to add
* @return true if the item is inserted, false if the item is already in the tree
*/
public boolean add(E item) {
   if (root == null) {
      root = new Node<>(item);
      return true;
   }
   else {
      Node<E> temp = find(root, item);
      int compareResult = item.compareTo(temp.item);
      if (compareResult == 0) {
         return false;
      }
      else if (compareResult < 0) {
         temp.left = new Node<>(item);
         return true;
      }
      else {
         temp.right = new Node<>(item);
         return true;
      }
   }
}

/**
* Recursive helper method to find the correct position to insert the item
* @param localRoot The root of the tree/subtree
* @param key The item to be inserted
* @return The node with item that is greater than or equal to key, or the leaf where the item should be inserted
*/
private Node<E> find(Node<E> localRoot, E key) {
   if (localRoot.left == null && key.compareTo(localRoot.item) < 0) {
      return localRoot;
   }
   else if (localRoot.right == null && key.compareTo(localRoot.item) >= 0) {
      return localRoot;
   }
   else if (key.compareTo(localRoot.item) < 0) {
      return find(localRoot.left, key);
   }
   else {
      return find(localRoot.right, key);
   }
}

/**
* Recursive helper method to determine if the given item is in the tree
* @param localRoot The root of the tree/subtree
* @param key The item to search for
* @return true if the item is found, false if the item is not in the tree
*/
private boolean contains(Node<E> localRoot, E key) {
   if (localRoot == null) {
      return false;
   }
   else {
      int compareResult = key.compareTo(localRoot.item);
      if (compareResult == 0) {
         return true;
      }
      else if (compareResult < 0) {
         return contains(localRoot.left, key);
      }
      else {
         return contains(localRoot.right, key);
      }
   }
}

/**
* Determine if the tree contains the given item
* @param item The item to search for
* @return true if the item is found, false if the item is not in the tree
*/
public boolean contains(E item) {
   return contains(root, item);
}

/**
* Recursive helper method to print the items in the tree in preorder traversal
* @param localRoot The root of the tree/subtree
*/
private void preorder(Node<E> localRoot) {
   if (localRoot != null) {
      System.out.print(localRoot.item + " ");
      preorder(localRoot.left);
      preorder(localRoot.right);
   }
}

/**
* Print the items in the tree in preorder traversal
*/
public void preorder() {
   preorder(root);
   System.out.println();
}

/**
* Recursive helper method to print the items in the tree in inorder traversal
* @param localRoot The root of the tree/subtree
*/
private void inorder(Node<E> localRoot) {
   if (localRoot != null) {
      inorder(localRoot.left);
      System.out.print(localRoot.item + " ");
      inorder(localRoot.right);
   }
}

/**
* Print the items in the tree in inorder traversal
*/
public void inorder() {
   inorder(root);
   System.out.println();
}

/**
* Recursive helper method to print the items in the tree in postorder traversal
* @param localRoot The root of the tree/subtree
*/
private void postorder(Node<E> localRoot) {
   if (localRoot != null) {
      postorder(localRoot.left);
      postorder(localRoot.right);
      System.out.print(localRoot.item + " ");
   }
}

/**
* Print the items in the tree in postorder traversal
*/
public void postorder() {
   postorder(root);
   System.out.println();
}

/**
* Get the size of the tree (number of nodes)
* @return The number of nodes in the tree
*/
public int size() {
   return size(root);
}

/**
* Recursive helper method to count the number of nodes in the tree
* @param localRoot The root of the tree/subtree
* @return The number of nodes in the tree/subtree
*/
private int size(Node<E> localRoot) {
   if (localRoot == null) {
      return 0;
   }
   else {
      return 1 + size(localRoot.left) + size(localRoot.right);
   }
}

/**
* Get the height of the tree
* @return The height of the tree
*/
public int height() {
   return height(root);
}

/**
* Recursive helper method to find the height of the tree
* @param localRoot The root of the tree/subtree
* @return The height of the tree
*/
private int height(Node<E> localRoot) {
   if (localRoot == null) {
      return 0;
   }
   else {
      // Find the height of the left subtree and the right subtree
      int leftHeight = height(localRoot.left);
      int rightHeight = height(localRoot.right);

      // Return the height of the larger subtree plus 1 for the root node
      return Math.max(leftHeight, rightHeight) + 1;
   }
}

/**
* Get the minimum element in the tree
* @return The minimum element in the tree
*/
public E findMin() {
   return findMin(root);
}

/**
* Recursive helper method to find the minimum element in the tree
* @param localRoot The root of the tree/subtree
* @return The minimum element in the tree
*/
private E findMin(Node<E> localRoot) {
   if (localRoot.left == null) {
      return localRoot.item;
   }
   else {
      return findMin(localRoot.left);
   }
}

/**
* Remove the root (tree must have at least one node for this method to work)
*/
public void removeRoot() {
   Node<E> parentNode = null;
   Node<E> currentNode = root;

   // Find the node with minimum item in the right subtree
   Node<E> minNode = findMin(currentNode.right);
   E minItem = minNode.item;

   // Delete the node with minimum item in the right subtree
   remove(minItem);

   // Replace the root node's item with the minimum item found in the right subtree
   root.item = minItem;
}

/**
* Remove the specified item from the tree
* @param item The item to be removed from the tree
* @return true if the item is removed, false if the item does not exist or tree is empty
*/
public boolean remove(E item) {
   if (isEmpty()) {
      return false;
   }
   else {
      // Find the node that contains the item to be removed using a helper method
      Node<E> target = findNode(root, item);

      // If the target node is not found, return false
      if (target == null) {
         return false;
      }

      // If the target node is the root node and the tree only has one node, set the root to null
      if (target == root && root.left == null && root.right == null) {
         root = null;
      }
      else {
         // Otherwise, remove the target node using another helper method
         remove(root, target);
      }
      return true;
   }
}

/**
* Helper method to find a node in the tree that contains the specified item
* @param localRoot The root of the tree/subtree
* @param item The item to be found
* @return The node that contains the item, or null if the item is not in the tree/subtree
*/
private Node<E> findNode(Node<E> localRoot, E item) {
   if (localRoot == null) {
      return null;
   }
   int compareResult = item.compareTo(localRoot.item);
   if (compareResult < 0) {
      return findNode(localRoot.left, item);
   }
   else if (compareResult > 0) {
      return findNode(localRoot.right, item);
   }
   else {
      return localRoot;
   }
}

/**
* Private helper method to remove the specified item from the tree
* @param localRoot The root of the tree/subtree
* @param target The node to be removed
*/
private void remove(Node<E> localRoot, Node<E> target) {
   int compareResult = target.item.compareTo(localRoot.item);
   // If the target node's item is less than the current node's item, move to the left subtree
   if (compareResult < 0) {
      // If the left child is the target, remove it directly
      if (target == localRoot.left) {
         localRoot.left = target.right;
         localRoot.left.left = target.left;
      }
      // Otherwise, recursively remove the target from the left subtree
      else {
         remove(localRoot.left, target);
      }
   }
   // If the target node's item is greater than the current node's item, move to the right subtree
   else if (compareResult > 0) {
      // If the right child is the target, remove it directly
      if (target == localRoot.right) {
         localRoot.right = target.right;
         localRoot.right.right = target.left;
      }
      // Otherwise, recursively remove the target from the right subtree
      else {
         remove(localRoot.right, target);
      }
   }
   // If the target node's item is equal to the current node's item, remove the current node
   else {
      if (localRoot.left == target) {
         localRoot.left = target.left;
      }
      else {
         localRoot.right = target.right;
      }
   }
}
}