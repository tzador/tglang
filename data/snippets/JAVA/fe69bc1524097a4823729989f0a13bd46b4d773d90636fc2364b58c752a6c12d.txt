/**
 * This class represents a binary search tree data structure.
 * It has methods for inserting, searching, and deleting nodes,
 * as well as traversing the tree in both preorder and inorder.
 */
public class BinarySearchTree<T extends Comparable<T>> {
    
    // inner class representing a node in the tree
    private class Node<T> {
        private T data;
        private Node<T> left;
        private Node<T> right;
        
        public Node(T data) {
            this.data = data;
            left = null;
            right = null;
        }
    }
    
    // root of the tree
    private Node<T> root;
    
    /**
     * Inserts a node with the specified data into the tree.
     *
     * @param data the data to be inserted into the tree
     */
    public void insert(T data) {
        this.root = insertNode(this.root, data);
    }
    
    /**
     * Recursive helper method for insert.
     *
     * @param node the node being checked
     * @param data the data to be inserted
     * @return the new root of the subtree after insertion
     */
    private Node<T> insertNode(Node<T> node, T data) {
        // if the node is null, insert the new data as a leaf node
        if (node == null) {
            return new Node<>(data);
        }
        
        // if the data is less than the data in the current node, go left
        if (data.compareTo(node.data) < 0) {
            node.left = insertNode(node.left, data);
        }
        // otherwise, go right
        else {
            node.right = insertNode(node.right, data);
        }
        
        return node;
    }
    
    /**
     * Searches for a node with the specified data in the tree.
     *
     * @param data the data to be searched for
     * @return true if the data is found, false otherwise
     */
    public boolean search(T data) {
        return searchNode(this.root, data);
    }
    
    /**
     * Recursive helper method for search.
     *
     * @param node the node being checked
     * @param data the data to be searched for
     * @return true if the data is found, false otherwise
     */
    private boolean searchNode(Node<T> node, T data) {
        // if the node is null, the data is not present
        if (node == null) {
            return false;
        }
        
        // if the data is equal to the data in the current node, return true
        if (data.equals(node.data)) {
            return true;
        }
        
        // if the data is less than the data in the current node, look left
        if (data.compareTo(node.data) < 0) {
            return searchNode(node.left, data);
        }
        // otherwise, look right
        else {
            return searchNode(node.right, data);
        }
    }
    
    /**
     * Deletes a node with the specified data from the tree.
     *
     * @param data the data to be deleted
     */
    public void delete(T data) {
        this.root = deleteNode(this.root, data);
    }
    
    /**
     * Recursive helper method for delete.
     *
     * @param node the node being checked
     * @param data the data to be deleted
     * @return the new root of the subtree after deletion
     */
    private Node<T> deleteNode(Node<T> node, T data) {
        // if the node is null, the data is not present
        if (node == null) {
            return null;
        }
        
        // if the data is less than the data in the current node, go left
        if (data.compareTo(node.data) < 0) {
            node.left = deleteNode(node.left, data);
        }
        // if the data is greater than the data in the current node, go right
        else if (data.compareTo(node.data) > 0) {
            node.right = deleteNode(node.right, data);
        }
        // if the data is equal to the data in the current node, delete the node
        else {
            // if the node has no children, simply remove it
            if (node.left == null && node.right == null) {
                return null;
            }
            // if the node has one child, replace it with the child
            else if (node.left == null) {
                return node.right;
            }
            else if (node.right == null) {
                return node.left;
            }
            // if the node has two children, replace it with the inorder successor
            else {
                Node<T> successor = getMinValue(node.right);
                node.data = successor.data;
                node.right = deleteNode(node.right, successor.data);
            }
        }
        
        return node;
    }
    
    /**
     * Helper method for finding the inorder successor of a node.
     *
     * @param node the node whose successor is being found
     * @return the node with the minimum value in the subtree
     */
    private Node<T> getMinValue(Node<T> node) {
        Node<T> current = node;
        
        // loop down to find the leftmost leaf
        while (current.left != null) {
            current = current.left;
        }
        
        return current;
    }
    
    /**
     * Traverses the tree in preorder and prints the data of each node.
     *
     * @param node the root of the subtree to be traversed
     */
    private void preorder(Node<T> node) {
        if (node != null) {
            // print the current node
            System.out.println(node.data);
            // recursively traverse the left subtree
            preorder(node.left);
            // recursively traverse the right subtree
            preorder(node.right);
        }
    }
    
    /**
     * Method for traversing the tree in preorder.
     */
    public void preorder() {
        preorder(this.root);
    }
    
    /**
     * Traverses the tree in inorder and prints the data of each node.
     *
     * @param node the root of the subtree to be traversed
     */
    private void inorder(Node<T> node) {
        if (node != null) {
            // recursively traverse the left subtree
            inorder(node.left);
            // print the current node
            System.out.println(node.data);
            // recursively traverse the right subtree
            inorder(node.right);
        }
    }
    
    /**
     * Method for traversing the tree in inorder.
     */
    public void inorder() {
        inorder(this.root);
    }
}