// This code snippet is an example of a doubly linked list implementation in Java
class DNode<T> { // Create a class for each node in the linked list
    T data; // Create a data variable to store the data of the node
    DNode<T> prev; // Create a previous variable to store the reference to the previous node
    DNode<T> next; // Create a next variable to store the reference to the next node
 
    public DNode(T data, DNode<T> prev, DNode<T> next) { // Constructor to initialize the node
        this.data = data;
        this.prev = prev;
        this.next = next;
    }
}
 
class DoublyLinkedList<T> {
 
    DNode<T> head; // Create a head variable to store the reference to the first node of the linked list
 
    void add(T data) { // Method to add a node to the end of the linked list
        DNode<T> newNode = new DNode<>(data, null, null); // Create a new node with the given data, prev and next as null
 
        if (head == null) { // Check if the linked list is empty
            head = newNode; // If yes, make the new node as the head of the linked list
        } else { // If not empty
            DNode<T> node = head; // Create a temporary node variable to traverse through the linked list
            while (node.next != null) { // Loop until the last node is reached
                node = node.next; // Move to the next node
            }
            node.next = newNode; // Add the new node at the end of the linked list
            newNode.prev = node; // Set the previous node of the new node as the current last node
        }
    }
 
    void remove(T data) { // Method to remove a node from the linked list
        DNode<T> node = head; // Temporary node variable to traverse through the linked list
 
        while (node != null) { // Loop until the end of the linked list
            if (node.data.equals(data)) { // Check if the data of the current node is equal to the data to be removed
                if (node.prev == null) { // If the node to be removed is the head
                    head = node.next; // Make the next node as the head
                } else { // If the node to be removed is not the head
                    node.prev.next = node.next; // Set the next node of the previous node as the next node of the current node
                    if (node.next != null) { // If the current node is not the last node
                        node.next.prev = node.prev; // Set the previous node of the next node as the previous node of the current node 
                    }
                }
                break; // Exit the loop
            }
            node = node.next; // Move to the next node
        }
    }
 
    void print() { // Method to print the linked list
        DNode<T> node = head; // Temporary node variable to traverse through the linked list
 
        while (node != null) { // Loop until the end of the linked list
            System.out.println(node.data); // Print the data of the current node
            node = node.next; // Move to the next node
        }
    }
}

// Example usage of the DoublyLinkedList class
public static void main(String[] args) {
    DoublyLinkedList<String> linkedList = new DoublyLinkedList<>(); // Create an instance of the DoublyLinkedList class
    linkedList.add("hello"); // Add a node to the end of the linked list
    linkedList.add("world"); // Add another node to the end of the linked list
    linkedList.print(); // Prints "hello" and "world" in separate lines
    linkedList.remove("hello"); // Removes the node with data "hello" from the linked list
    linkedList.print(); // Prints "world"
}