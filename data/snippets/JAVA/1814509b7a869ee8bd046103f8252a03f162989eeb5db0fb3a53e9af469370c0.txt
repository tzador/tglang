/**
 * This class represents a complex number with real and imaginary parts.
 */
public class ComplexNumber {
    
    private double real; // the real part of the complex number
    private double imaginary; // the imaginary part of the complex number
    
    /**
     * Constructor with two parameters for the real and imaginary parts.
     * @param real the real part of the complex number
     * @param imaginary the imaginary part of the complex number
     */
    public ComplexNumber(double real, double imaginary) {
        this.real = real;
        this.imaginary = imaginary;
    }
    
    /**
     * Returns the sum of this complex number and another complex number.
     * @param num the complex number to be added
     * @return the sum of the two complex numbers
     */
    public ComplexNumber add(ComplexNumber num) {
        return new ComplexNumber(this.real + num.real, this.imaginary + num.imaginary);
    }
    
    /**
     * Returns the difference of this complex number and another complex number.
     * @param num the complex number to be subtracted
     * @return the difference of the two complex numbers
     */
    public ComplexNumber subtract(ComplexNumber num) {
        return new ComplexNumber(this.real - num.real, this.imaginary - num.imaginary);
    }
    
    /**
     * Returns the product of this complex number and another complex number.
     * @param num the complex number to be multiplied
     * @return the product of the two complex numbers
     */
    public ComplexNumber multiply(ComplexNumber num) {
        double real = (this.real * num.real) - (this.imaginary * num.imaginary);
        double imaginary = (this.real * num.imaginary) + (this.imaginary * num.real);
        return new ComplexNumber(real, imaginary);
    }
    
    /**
     * Returns the quotient of this complex number and another complex number.
     * @param num the complex number to be divided
     * @return the quotient of the two complex numbers
     */
    public ComplexNumber divide(ComplexNumber num) {
        double denominator = Math.pow(num.real, 2) + Math.pow(num.imaginary, 2);
        if (denominator == 0) {
            throw new IllegalArgumentException("Cannot divide by zero.");
        }
        double real = ((this.real * num.real) + (this.imaginary * num.imaginary)) / denominator;
        double imaginary = ((this.imaginary * num.real) - (this.real * num.imaginary)) / denominator;
        return new ComplexNumber(real, imaginary);
    }
    
    /**
     * Returns the absolute value of this complex number.
     * @return the absolute value of this complex number
     */
    public double abs() {
        return Math.sqrt(Math.pow(this.real, 2) + Math.pow(this.imaginary, 2));
    }
    
    /**
     * Returns the string representation of this complex number in the form "real + imaginary*i".
     * @return the string representation of this complex number
     */
    @Override
    public String toString() {
        return this.real + " + " + this.imaginary + "i";
    }
}