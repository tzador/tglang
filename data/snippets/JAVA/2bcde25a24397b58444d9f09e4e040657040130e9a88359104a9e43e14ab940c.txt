import java.util.*;

// This class represents a weighted directed graph using adjacency matrix representation
class Graph {
    private int V; // number of vertices in the graph
    private int[][] adjacencyMatrix;

    // Constructor to initialize the graph with given number of vertices
    public Graph(int V) {
        this.V = V;
        this.adjacencyMatrix = new int[V][V];
    }

    // Function to add an edge between two vertices in the graph
    public void addEdge(int u, int v, int weight) {
        this.adjacencyMatrix[u][v] = weight;
    }

    // Function to find the shortest path between given source and destination vertices using Dijkstra's algorithm
    public void dijkstraShortestPath(int source, int dest) {
        int[] distances = new int[V]; // array to store shortest distances from source to each vertex
        boolean[] visited = new boolean[V]; // array to keep track of visited vertices
        int[] path = new int[V]; // array to store the shortest path from source to destination
        Arrays.fill(distances, Integer.MAX_VALUE); // initializing all distances to infinity
        Arrays.fill(path, -1); // initializing all paths to -1

        distances[source] = 0; // distance from source to itself is 0

        // loop through all vertices
        for (int i = 0; i < V; i++) {
            // find the vertex with minimum distance from source
            int min = Integer.MAX_VALUE;
            int minIndex = -1;
            for (int j = 0; j < V; j++) {
                if (!visited[j] && distances[j] < min) {
                    min = distances[j];
                    minIndex = j;
                }
            }

            // mark the minIndex vertex as visited
            visited[minIndex] = true;

            // update distances of adjacent vertices
            for (int j = 0; j < V; j++) {
                if (!visited[j] && adjacencyMatrix[minIndex][j] != 0 && distances[minIndex] + adjacencyMatrix[minIndex][j] < distances[j]) {
                    distances[j] = distances[minIndex] + adjacencyMatrix[minIndex][j];
                    path[j] = minIndex;
                }
            }
        }

        // print the shortest path and its distance
        System.out.println("Shortest path from " + source + " to " + dest + ": " + distances[dest]);

        // add the destination vertex to the path array
        Stack<Integer> shortestPath = new Stack<Integer>();
        shortestPath.push(dest);

        // backtrack through path array to find the shortest path from source to destination
        int current = dest;
        while (path[current] != -1) {
            shortestPath.push(path[current]);
            current = path[current];
        }

        // print the path in reverse order
        System.out.print("Path: ");
        while (!shortestPath.isEmpty()) {
            System.out.print(shortestPath.pop() + " ");
        }
    }

    // Driver code to test the graph class
    public static void main(String[] args) {
        // create a graph with 7 vertices
        Graph g = new Graph(7);

        // add edges between vertices with corresponding weights
        g.addEdge(0, 1, 7);
        g.addEdge(0, 2, 9);
        g.addEdge(0, 5, 14);
        g.addEdge(1, 2, 10);
        g.addEdge(1, 3, 15);
        g.addEdge(2, 3, 11);
        g.addEdge(2, 5, 2);
        g.addEdge(3, 4, 6);
        g.addEdge(4, 5, 9);
        g.addEdge(4, 6, 13);
        g.addEdge(5, 6, 5);

        // find the shortest path from vertex 0 to 6 using Dijkstra's algorithm
        g.dijkstraShortestPath(0, 6);
    }
}