// This program implements a Binary Search Tree data structure
public class BinarySearchTree {
    private Node root;
    
    // Node class to represent individual nodes in the tree
    public class Node {
        private int data;
        private Node left;
        private Node right;
        
        // Constructor that initializes the data and left/right pointers
        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }
    
    // Function to insert a new node into the tree
    public void insert(int data) {
        if (root == null) {
            root = new Node(data);
        }
        else {
            Node current = root;
            while (true) {
                if (data < current.data) {
                    if (current.left == null) {
                        current.left = new Node(data);
                        break;
                    }
                    else {
                        current = current.left;
                    }
                }
                else {
                    if (current.right == null) {
                        current.right = new Node(data);
                        break;
                    }
                    else {
                        current = current.right;
                    }
                }
            }
        }
    }
    
    // Function to search for a node in the tree and return its value
    public int search(int data) {
        Node current = root;
        while (current != null) {
            if (data == current.data) {
                return current.data;
            }
            else if (data < current.data) {
                current = current.left;
            }
            else {
                current = current.right;
            }
        }
        return -1; // if node is not found, return -1
    }
    
    // Function to delete a node from the tree
    public void delete(int data) {
        deleteNode(root, data);
    }
    
    // Helper function to delete a node from the tree
    private Node deleteNode(Node root, int data) {
        Node temp;
        
        // Base case
        if (root == null) {
            return null;
        }
        // If node is found
        if (data == root.data) {
            // Node has one or no child
            if (root.left == null) {
                return root.right;
            }
            else if (root.right == null) {
                return root.left;
            }
            // Node has two children
            else {
                // Get the smallest node in the right sub tree 
                temp = findMin(root.right);
                // Replace current node's data with smallest node's data
                root.data = temp.data;
                // Delete the smallest node
                root.right = deleteNode(root.right, temp.data);
            }
        }
        // If node is not found, traverse through the tree
        else if (data < root.data) {
            root.left = deleteNode(root.left, data);
        }
        else {
            root.right = deleteNode(root.right, data);
        }
        return root;
    }
    
    // Helper function to find the smallest node in a sub tree
    private Node findMin(Node root) {
        while (root.left != null) {
            root = root.left;
        }
        return root;
    }
    
    // Function to print the tree in preorder traversal
    public void printTree() {
        printPreorder(root);
    }
    
    // Helper function to print the tree in preorder traversal
    private void printPreorder(Node root) {
        if (root != null) {
            System.out.println(root.data); // Print current node's data
            printPreorder(root.left); // Recursively print left sub tree
            printPreorder(root.right); // Recursively print right sub tree
        }
    }
}