/**
 * This class represents a person with a name and age.
 */
public class Person {

    private String name;
    private int age;

    /**
     * Constructs a person object with the given name and age.
     *
     * @param name the name of the person
     * @param age the age of the person
     */
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    /**
     * Returns the person's name.
     *
     * @return the person's name
     */
    public String getName() {
        return name;
    }

    /**
     * Returns the person's age.
     *
     * @return the person's age
     */
    public int getAge() {
        return age;
    }

    /**
     * Sets the person's name.
     *
     * @param name the new name for the person
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Sets the person's age.
     *
     * @param age the new age for the person
     */
    public void setAge(int age) {
        this.age = age;
    }

    /**
     * Prints a greeting with the person's name and age.
     *
     * @return a greeting with the person's name and age
     */
    public String greet() {
        return "Hello, my name is " + name + " and I am " + age + " years old.";
    }

    /**
     * Checks if two person objects are equal by comparing their name and age.
     *
     * @param obj the other object to compare with
     * @return true if the objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Person other = (Person) obj;
        if (age != other.age) {
            return false;
        }
        if (name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!name.equals(other.name)) {
            return false;
        }
        return true;
    }

    /**
     * Returns the hash code value for this person object.
     *
     * @return the hash code value for this person object
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + age;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    /**
     * Returns the string representation of this person object.
     *
     * @return the string representation of this person object
     */
    @Override
    public String toString() {
        return "Person [name=" + name + ", age=" + age + "]";
    }

}

``