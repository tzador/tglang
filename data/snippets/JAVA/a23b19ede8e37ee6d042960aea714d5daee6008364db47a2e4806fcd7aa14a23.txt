/**
 * This class represents a linked list data structure
 */
class LinkedList {
    private Node head;

    /**
     * A Node class that represents an individual node in the linked list
     */
    private class Node {
        private int data;   // data stored in the node
        private Node next;  // pointer to the next node in the linked list

        /**
         * Constructor for creating a new node with specified data
         * @param data integer value to be stored in the node
         */
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    /**
     * Method to add a new node at the beginning of the linked list
     * @param data integer value to be stored in the new node
     */
    public void addNode(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
    }

    /**
     * Method to insert a new node at a specified index in the linked list
     * @param data integer value to be stored in the new node
     * @param index position in the linked list where the new node should be inserted
     */
    public void insertNode(int data, int index) {
        Node newNode = new Node(data);
        if (index == 0) {
            newNode.next = head;
            head = newNode;
        } else {
            Node currentNode = head;
            for (int i = 0; i < index - 1; i++) {
                currentNode = currentNode.next;
            }
            newNode.next = currentNode.next;
            currentNode.next = newNode;
        }
    }

    /**
     * Method to delete a node at a specified index in the linked list
     * @param index position in the linked list of the node to be deleted
     */
    public void deleteNode(int index) {
        if (head == null) {
            System.out.println("Linked list is empty.");
        } else if (index == 0) {
            head = head.next;
        } else {
            Node currentNode = head;
            for (int i = 0; i < index - 1; i++) {
                currentNode = currentNode.next;
            }
            currentNode.next = currentNode.next.next;
        }
    }

    /**
     * Method to search for a node with the specified data value in the linked list
     * @param data value to be searched for in the linked list
     * @return index of the found node, -1 if node is not found
     */
    public int searchNode(int data) {
        int index = -1;
        Node currentNode = head;
        while (currentNode != null) {
            index++;
            if (currentNode.data == data) {
                return index;
            }
            currentNode = currentNode.next;
        }
        return -1;
    }

    /**
     * Method to print out the elements in the linked list
     */
    public void printList() {
        Node currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.data + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }
}

/**
 * Example usage of the LinkedList class
 */
class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        list.addNode(5);
        list.addNode(7);
        list.addNode(10);

        System.out.println("Initial list:");
        list.printList();

        list.insertNode(8, 1);

        System.out.println("List after inserting 8 at index 1:");
        list.printList();

        list.deleteNode(2);

        System.out.println("List after deleting node at index 2:");
        list.printList();

        int index = list.searchNode(7);
        System.out.println("Index of node with value 7 is: " + index);
    }
}