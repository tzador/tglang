import java.util.*;

/**
 * This class represents a library and its collection of books.
 */
public class Library {
    //member variables
    private String libraryName;  //name of the library
    private ArrayList<Book> bookCollection; //list of books in the library
    private HashMap<String, Integer> bookCatalogue; //catalogue of book titles and quantities
    
    /**
     * Constructor for the Library class. Initializes the library name and creates an empty book collection and book catalogue.
     * @param name The name of the library.
     */
    public Library(String name) {
        this.libraryName = name;
        this.bookCollection = new ArrayList<Book>();
        this.bookCatalogue = new HashMap<String, Integer>();
    }
    
    /**
     * Adds a book to the library's collection.
     * @param book The book to be added.
     */
    public void addBook(Book book) {
        this.bookCollection.add(book);
        
        //add the book to the catalogue if it doesn't already exist
        if (!this.bookCatalogue.containsKey(book.getTitle())) {
            this.bookCatalogue.put(book.getTitle(), 1);
        }
        //if the book already exists in the catalogue, increment its quantity
        else {
            this.bookCatalogue.put(book.getTitle(), this.bookCatalogue.get(book.getTitle()) + 1);
        }
    }
    
    /**
     * Removes a book from the library's collection.
     * @param book The book to be removed.
     */
    public void removeBook(Book book) {
        //check if the book exists in the collection
        if (this.bookCollection.contains(book)) {
            this.bookCollection.remove(book);
            
            //decrease the quantity of the book in the catalogue
            if (this.bookCatalogue.get(book.getTitle()) > 1) {
                this.bookCatalogue.put(book.getTitle(), this.bookCatalogue.get(book.getTitle()) - 1);
            }
            //if the quantity is 1, remove the book from the catalogue
            else {
                this.bookCatalogue.remove(book.getTitle());
            }
        }
    }
    
    /**
     * Returns a list of all the books in the library's collection.
     * @return ArrayList<Book> The list of books.
     */
    public ArrayList<Book> getAllBooks() {
        return this.bookCollection;
    }
    
    /**
     * Returns the quantity of a specific book in the library's collection.
     * @param title The title of the book.
     * @return int The quantity of the book.
     */
    public int getBookQuantity(String title) {
        //check if the book exists in the catalogue
        if (this.bookCatalogue.containsKey(title)) {
            return this.bookCatalogue.get(title);
        }
        return 0; //if the book is not in the catalogue, return 0
    }
    
    /**
     * Returns a list of all the book titles in the library's collection.
     * @return ArrayList<String> The list of book titles.
     */
    public ArrayList<String> getAllBookTitles() {
        ArrayList<String> titles = new ArrayList<String>();
        
        //loop through the catalogue to get all the book titles and add them to the list
        for (String title : this.bookCatalogue.keySet()) {
            titles.add(title);
        }
        return titles;
    }
    
    //getter and setter methods for the library name
    public String getLibraryName() {
        return this.libraryName;
    }
    
    public void setLibraryName(String name) {
        this.libraryName = name;
    }
    
    //toString method for printing the library's information
    public String toString() {
        return "Library Name: " + this.libraryName + "\nCollection Size: " + this.bookCollection.size() + "\nCatalogue: " + this.bookCatalogue.toString();
    }
}

/**
 * This class represents a book with a title, author, genre, and publication year.
 */
public class Book {
    //member variables
    private String title; //title of the book
    private String author; //author of the book
    private String genre; //genre of the book
    private int publicationYear; //publication year of the book
    
    /**
     * Constructor for the Book class. Initializes the book's information.
     * @param title The title of the book.
     * @param author The author of the book.
     * @param genre The genre of the book.
     * @param publicationYear The publication year of the book.
     */
    public Book(String title, String author, String genre, int publicationYear) {
        this.title = title;
        this.author = author;
        this.genre = genre;
        this.publicationYear = publicationYear;
    }
    
    //getter and setter methods for the book's information
    public String getTitle() {
        return this.title;
    }
    
    public void setTitle(String title) {
        this.title = title;
    }
    
    public String getAuthor() {
        return this.author;
    }
    
    public void setAuthor(String author) {
        this.author = author;
    }
    
    public String getGenre() {
        return this.genre;
    }
    
    public void setGenre(String genre) {
        this.genre = genre;
    }
    
    public int getPublicationYear() {
        return this.publicationYear;
    }
    
    public void setPublicationYear(int year) {
        this.publicationYear = year;
    }
    
    //toString method for printing the book's information
    public String toString() {
        return "Title: " + this.title + "\nAuthor: " + this.author + "\nGenre: " + this.genre + "\nPublication Year: " + this.publicationYear;
    }
}

//Example of using the Library and Book classes
public class Main {
    public static void main(String[] args) {
        //create a new library object
        Library library = new Library("Public Library");
        
        //create some book objects and add them to the library
        Book book1 = new Book("To Kill a Mockingbird", "Harper Lee", "Fiction", 1960);
        Book book2 = new Book("The Great Gatsby", "F. Scott Fitzgerald", "Fiction", 1925);
        Book book3 = new Book("1984", "George Orwell", "Dystopia", 1949);
        
        library.addBook(book1);
        library.addBook(book2);
        library.addBook(book3);
        
        //print out all the books in the library
        System.out.println("All Books in Library: ");
        for (Book book : library.getAllBooks()) {
            System.out.println(book.getTitle());
        }
        
        //print out the quantity of a specific book and all the book titles in the library
        System.out.println("\nQuantity of 1984 in Library: " + library.getBookQuantity("1984"));
        System.out.println("All Book Titles in Library: " + library.getAllBookTitles());
        
        //remove a book from the library and print the updated book collection and catalogue
        library.removeBook(book1);
        System.out.println("\nUpdated Book Collection: " + library.getAllBooks());
        System.out.println("Updated Catalogue: " + library.toString());
    }
}