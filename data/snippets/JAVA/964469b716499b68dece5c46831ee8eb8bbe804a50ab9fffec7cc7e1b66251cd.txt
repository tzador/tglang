/**
 * This class represents a generic Tree data structure.
 * It supports operations such as inserting, deleting, and searching nodes in the tree.
 * @param <T> the type of data stored in each node
 */
public class Tree<T> {

    /**
     * A node in the tree.
     */
    private class Node {
        T data;                         // data stored in the node
        Node leftNode;                  // reference to the left child node
        Node rightNode;                 // reference to the right child node

        // constructor
        Node(T data) {
            this.data = data;
            leftNode = null;
            rightNode = null;
        }
    }

    private Node root;                  // root node of the tree
    int size;                           // number of nodes in the tree

    /**
     * Constructor for creating an empty tree.
     */
    public Tree() {
        root = null;
        size = 0;
    }

    /**
     * Inserts the given data in the tree.
     * @param data the data to be inserted
     */
    public void insert(T data) {
        root = insertNode(root, data);
        size++;
    }

    /**
     * Recursive helper function for inserting a node in the tree.
     * @param root the root node of the tree
     * @param data the data to be inserted
     * @return the reference to the inserted node
     */
    private Node insertNode(Node root, T data) {
        // base case: if root is null, create a new node and return it
        if (root == null) {
            return new Node(data);
        }

        // if data is less than or equal to root data, insert it in the left subtree
        if (data.compareTo(root.data) <= 0) {
            root.leftNode = insertNode(root.leftNode, data);
        }

        // if data is greater than root data, insert it in the right subtree
        else {
            root.rightNode = insertNode(root.rightNode, data);
        }

        return root;    // return the updated root node
    }

    /**
     * Searches for the given data in the tree.
     * @param data the data to be searched
     * @return true if the data is found, false otherwise
     */
    public boolean contains(T data) {
        return search(root, data);
    }

    /**
     * Recursive helper function for searching a node in the tree.
     * @param root the root node of the tree
     * @param data the data to be searched
     * @return true if the data is found, false otherwise
     */
    private boolean search(Node root, T data) {
        // base case: if root is null, the data doesn't exist in the tree
        if (root == null) {
            return false;
        }

        // if data is found in the current node, return true
        if (root.data.equals(data)) {
            return true;
        }

        // if data is less than root data, search in the left subtree
        if (data.compareTo(root.data) < 0) {
            return search(root.leftNode, data);
        }

        // if data is greater than root data, search in the right subtree
        else {
            return search(root.rightNode, data);
        }
    }

    /**
     * Deletes the given data from the tree.
     * @param data the data to be deleted
     */
    public void delete(T data) {
        root = deleteNode(root, data);
        size--;
    }

    /**
     * Recursive helper function for deleting a node from the tree.
     * @param root the root node of the tree
     * @param data the data to be deleted
     * @return the reference to the updated root node
     */
    private Node deleteNode(Node root, T data) {
        // base case: if root is null, the data doesn't exist in the tree
        if (root == null) {
            return null;
        }

        // if data is less than root data, delete from the left subtree
        if (data.compareTo(root.data) < 0) {
            root.leftNode = deleteNode(root.leftNode, data);
        }

        // if data is greater than root data, delete from the right subtree
        else if (data.compareTo(root.data) > 0) {
            root.rightNode = deleteNode(root.rightNode, data);
        }

        // if root node is the one to be deleted
        else {
            // if root has no child or only one child, replace it with its child
            if (root.leftNode == null) {
                return root.rightNode;
            } else if (root.rightNode == null) {
                return root.leftNode;
            }

            // if root has two children, replace it with its in-order successor
            Node inOrderSuccessor = findInOrderSuccessor(root.rightNode);
            root.data = inOrderSuccessor.data;
            root.rightNode = deleteNode(root.rightNode, inOrderSuccessor.data);
        }

        return root;    // return the updated root node
    }

    /**
     * Finds the in-order successor of the given node.
     * @param node the node to find the in-order successor of
     * @return the in-order successor node
     */
    private Node findInOrderSuccessor(Node node) {
        Node current = node;
        // find the leftmost node from the given node
        while (current.leftNode != null) {
            current = current.leftNode;
        }

        return current;
    }
}