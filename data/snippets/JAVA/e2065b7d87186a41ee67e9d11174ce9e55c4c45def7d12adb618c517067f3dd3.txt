/**
* This class represents a complex number 
* and provides various methods for performing arithmetic operations on it.
*/
public class ComplexNumber {
    private double realPart; // holds the real part of the complex number
    private double imaginaryPart; // holds the imaginary part of the complex number
    
    /**
    * Constructor to initialize the complex number with given real and imaginary parts.
    * @param realPart the real part of the complex number
    * @param imaginaryPart the imaginary part of the complex number
    */
    public ComplexNumber(double realPart, double imaginaryPart) {
        this.realPart = realPart;
        this.imaginaryPart = imaginaryPart;
    }
    
    /**
    * Returns the real part of the complex number.
    * @return the real part of the complex number
    */
    public double getRealPart() {
        return this.realPart;
    }
    
    /**
    * Returns the imaginary part of the complex number.
    * @return the imaginary part of the complex number
    */
    public double getImaginaryPart() {
        return this.imaginaryPart;
    }
    
    /**
    * Adds the given complex number to this complex number.
    * @param num the complex number to be added
    * @return the resulting complex number after addition
    */
    public ComplexNumber add(ComplexNumber num) {
        double real = this.realPart + num.getRealPart();
        double imag = this.imaginaryPart + num.getImaginaryPart();
        return new ComplexNumber(real, imag);
    }
    
    /**
    * Subtracts the given complex number from this complex number.
    * @param num the complex number to be subtracted
    * @return the resulting complex number after subtraction
    */
    public ComplexNumber subtract(ComplexNumber num) {
        double real = this.realPart - num.getRealPart();
        double imag = this.imaginaryPart - num.getImaginaryPart();
        return new ComplexNumber(real, imag);
    }
    
    /**
    * Multiplies this complex number by the given complex number.
    * @param num the complex number to be multiplied with
    * @return the resulting complex number after multiplication
    */
    public ComplexNumber multiply(ComplexNumber num) {
        double real = (this.realPart * num.getRealPart()) - (this.imaginaryPart * num.getImaginaryPart());
        double imag = (this.realPart * num.getImaginaryPart()) + (this.imaginaryPart * num.getRealPart());
        return new ComplexNumber(real, imag);
    }
    
    /**
    * Divides this complex number by the given complex number.
    * @param num the complex number to be divided by
    * @return the resulting complex number after division
    */
    public ComplexNumber divide(ComplexNumber num) {
        double real = ((this.realPart * num.getRealPart()) + (this.imaginaryPart * num.getImaginaryPart()))
            / (Math.pow(num.getRealPart(), 2) + Math.pow(num.getImaginaryPart(), 2));
        double imag = ((this.imaginaryPart * num.getRealPart()) - (this.realPart * num.getImaginaryPart()))
            / (Math.pow(num.getRealPart(), 2) + Math.pow(num.getImaginaryPart(), 2));
        return new ComplexNumber(real, imag);
    }
    
    /**
    * Returns the absolute value (magnitude) of this complex number.
    * @return the absolute value (magnitude) of this complex number
    */
    public double abs() {
        double square = Math.pow(this.realPart, 2) + Math.pow(this.imaginaryPart, 2);
        return Math.sqrt(square);
    }
    
    /**
    * Returns the angle (in radians) of this complex number.
    * @return the angle (in radians) of this complex number
    */
    public double angle() {
        return Math.atan2(this.imaginaryPart, this.realPart);
    }
    
    /**
    * Returns a string representation of this complex number.
    * @return a string representation of this complex number
    */
    @Override
    public String toString() {
        return this.realPart + " + " + this.imaginaryPart + "i";
    }
    
    /**
    * Checks if the given object is equal to this complex number.
    * @param obj the object to be compared with
    * @return true if the given object is equal to this complex number, false otherwise
    */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        
        if (!(obj instanceof ComplexNumber)) {
            return false;
        }
        
        ComplexNumber other = (ComplexNumber) obj;
        
        return this.realPart == other.getRealPart() && this.imaginaryPart == other.getImaginaryPart();
    }
}