/**
 * Represents a custom data structure that stores a list of objects with unique ids.
 */
public class IdList<T> {
    private ArrayList<T> list; // stores the objects
    private HashMap<Integer, T> idMap; // maps id to object

    /**
     * Constructor for IdList class.
     */
    public IdList() {
        list = new ArrayList<>();
        idMap = new HashMap<>();
    }

    /**
     * Adds an object to the list and assigns a unique id to it.
     * @param object the object to be added
     * @return the assigned id
     */
    public int add(T object) {
        int id = idMap.size(); // get the next available id
        list.add(object); // add object to list
        idMap.put(id, object); // map id to object
        return id;
    }

    /**
     * Removes an object from the list based on its id.
     * @param id the id of the object to be removed
     * @return the removed object, or null if no object was removed
     */
    public T remove(int id) {
        T removedObject = idMap.remove(id); // remove object from map
        if (removedObject != null) {
            list.remove(removedObject); // remove object from list
            return removedObject;
        }
        return null;
    }

    /**
     * Returns the object with the given id.
     * @param id the id of the object to be retrieved
     * @return the object with the given id, or null if no object with that id exists
     */
    public T get(int id) {
        return idMap.get(id); // get object from map based on id
    }

    /**
     * Returns a list of all the objects stored in this IdList.
     * @return the list of objects
     */
    public ArrayList<T> getAll() {
        return list; // return the list of objects
    }

}