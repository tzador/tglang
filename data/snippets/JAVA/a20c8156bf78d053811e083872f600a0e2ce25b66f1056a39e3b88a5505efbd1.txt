/**
 * This is a complex method that takes in an array of integers and sorts it in ascending order using QuickSort.
 * @param arr the integer array to be sorted
 * @param start the starting index of the array
 * @param end the ending index of the array
 */
public static void quickSort(int arr[], int start, int end) {
    // Check if the start index is less than the end index
    if (start < end) {
        // Partition the array and find the pivot element
        int pivot = partition(arr, start, end);
        // Recursively call quickSort on the left and right subarrays
        quickSort(arr, start, pivot - 1);
        quickSort(arr, pivot + 1, end);
    }
}

/**
 * This method takes in an array and partitions it around a pivot element
 * @param arr the integer array to be partitioned
 * @param start the starting index of the array
 * @param end the ending index of the array
 * @return the index of the pivot element
 */
private static int partition(int arr[], int start, int end) {
    // Set the pivot element as the last element of the array
    int pivot = arr[end];
    // Set the partition index as the starting index
    int partitionIndex = start;
    // Loop through the array and compare each element to the pivot
    for (int i = start; i < end; i++) {
        // If the element is less than the pivot, swap it with the element at the partition index
        if (arr[i] < pivot) {
            int temp = arr[i];
            arr[i] = arr[partitionIndex];
            arr[partitionIndex] = temp;
            // Increment the partition index by 1
            partitionIndex++;
        }
    }
    // Swap the pivot element with the element at the partition index
    int temp = arr[partitionIndex];
    arr[partitionIndex] = arr[end];
    arr[end] = temp;
    // Return the partition index
    return partitionIndex;
}

// Example usage and output:
int arr[] = {5, 2, 7, 1, 9, 3};
System.out.println("Before sorting: " + Arrays.toString(arr)); // [5, 2, 7, 1, 9, 3]
quickSort(arr, 0, arr.length - 1);
System.out.println("After sorting: " + Arrays.toString(arr)); // [1, 2, 3, 5, 7, 9]