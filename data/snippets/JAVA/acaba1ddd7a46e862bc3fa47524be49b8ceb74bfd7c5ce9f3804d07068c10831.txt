public class BinaryTree<T>{
    // class for binary tree implementation
 
    // node class for creating nodes of the binary tree
    private class Node{
        T data;
        Node left;
        Node right;
 
        // constructor for creating a node with given data
        public Node(T data){
            this.data = data;
            left = null;
            right = null;
        }
    }
 
    // root node of the binary tree
    Node root;
 
    // constructor for creating an empty binary tree
    public BinaryTree(){
        root = null;
    }
 
    // function to insert a new node in the binary tree
    public void insert(T data){
        // if tree is empty, create a new root node
        if(root == null){
            root = new Node(data);
            return;
        }
 
        // creating a queue to store nodes for level order traversal
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
 
        // loop until an empty position is found for insertion
        while(!queue.isEmpty()){
            // dequeue a node from the queue
            Node current = queue.remove();
 
            // check if left child of current node is empty
            if(current.left == null){
                // insert new node as left child
                current.left = new Node(data);
                break;
            }
            else{ // if left child is non-empty, add to queue for further traversal
                queue.add(current.left);
            }
 
            // check if right child of current node is empty
            if(current.right == null){
                // insert new node as right child
                current.right = new Node(data);
                break;
            }
            else{ // if right child is non-empty, add to queue for further traversal
                queue.add(current.right);
            }
        }
    }
 
    // function to print the binary tree in level order
    public void levelOrder(){
        // if tree is empty, return
        if(root == null){
            System.out.println("Empty tree");
            return;
        }
 
        // creating a queue to store nodes for level order traversal
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
 
        while(!queue.isEmpty()){
            // dequeue a node from the queue and print its data
            Node current = queue.remove();
            System.out.print(current.data + " ");
 
            // add left and right children of current node to the queue if not null
            if(current.left != null){
                queue.add(current.left);
            }
            if(current.right != null){
                queue.add(current.right);
            }
        }
    }
 
    // function to delete a node from the binary tree
    public void delete(T data){
        // if tree is empty, return
        if(root == null){
            System.out.println("Tree is empty");
            return;
        }
 
        // creating a queue to store nodes for level order traversal
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
 
        // variables to store the parent of the node to be deleted and the node itself
        Node parent = null;
        Node current = null;
 
        // loop until the node to be deleted is found
        while(!queue.isEmpty()){
            // dequeue a node from the queue
            current = queue.remove();
 
            // check if current node is the node to be deleted
            if(current.data == data){
                break;
            }
            else{ // if not, add its children to the queue for further traversal
                parent = current;
                if(current.left != null){
                    queue.add(current.left);
                }
                if(current.right != null){
                    queue.add(current.right);
                }
            }
        }
 
        // if node to be deleted is not found, return
        if(current.data != data){
            System.out.println("Node not found");
            return;
        }
 
        // if node to be deleted is the root node, set root to null
        if(current == root){
            root = null;
            return;
        }
 
        // if node to be deleted is a leaf node, simply delete it
        if(current.left == null && current.right == null){
            if(parent.left == current){
                parent.left = null;
            }
            else{
                parent.right = null;
            }
            return;
        }
 
        // if node to be deleted has only one child, set its parent's pointer to that child
        if(current.left == null){
            if(parent.left == current){
                parent.left = current.right;
            }
            else{
                parent.right = current.right;
            }
            return;
        }
        if(current.right == null){
            if(parent.left == current){
                parent.left = current.left;
            }
            else{
                parent.right = current.left;
            }
            return;
        }
 
        // if node to be deleted has two children, find the inorder successor and replace its data with the node to be deleted
        Node inorderSuccessor = getInorderSuccessor(current.right);
        current.data = inorderSuccessor.data;
 
        // recursively delete the inorder successor
        delete(inorderSuccessor.data);
    }
 
    // function to find the inorder successor in subtree of given root node
    private Node getInorderSuccessor(Node root){
        // find the leftmost node in the subtree
        while(root.left != null){
            root = root.left;
        }
        // return the root node which will be the minimum value in the subtree
        return root;
    }
}