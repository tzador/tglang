/**
 * This code snippet is a basic implementation of a binary search algorithm.
 * It takes in a sorted array of integers and a key value to search for.
 * The algorithm starts at the middle of the array, checks if the key is equal
 * to the middle element. If not, it recursively calls itself, dividing the
 * array into two halves and searching the appropriate half based on the key
 * value and the middle element.
 * @param arr The sorted array of integers to search through
 * @param key The value to search for in the array
 * @return The index of the key in the array, or -1 if it is not found
 */
public int binarySearch(int[] arr, int key) {
    // Initializing variables for indexes of the first and last elements
    int low = 0;
    int high = arr.length - 1;

    // Loop until low index is equal or greater than the high index
    while (low <= high) {
        // Calculating the middle index
        int mid = (low + high) / 2;

        // If the key is equal to the middle element, return the index
        if (key == arr[mid]) {
            return mid;
        }
        // If key is less than the middle element, search the left half of the
        // array by updating the high index to the left of the middle
        else if (key < arr[mid]) {
            high = mid - 1;
        }
        // If key is greater than the middle element, search the right half of
        // the array by updating the low index to the right of the middle
        else {
            low = mid + 1;
        }
    }

    // If the key is not found, return -1
    return -1;
}

// Example usage
int[] arr = { 2, 5, 7, 10, 14, 17, 20, 23, 30 };
int key = 17;
System.out.println(binarySearch(arr, key)); // Output: 5 (index of the key)