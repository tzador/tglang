/**
 * This is a class that implements a queue data structure using a linked list.
 * A queue follows the first-in-first-out (FIFO) principle, where the first element inserted is the first one to be removed.
 */
public class LinkedQueue<T> {
    private Node<T> front;
    private Node<T> back;
    private int size;

    /**
     * This nested private class represents a node in the linked list with
     * data of type T and a reference to the next node.
     */
    private static class Node<T> {
        private T data;
        private Node<T> next;

        Node(T data, Node<T> next) {
            this.data = data;
            this.next = next;
        }
    }

    /**
     * This method adds an element to the back of the queue.
     * @param element the element to be added to the queue
     */
    public void enqueue(T element) {
        Node<T> newNode = new Node<>(element, null);
        if (isEmpty()) {
            front = newNode;
        } else {
            back.next = newNode;
        }
        back = newNode;
        size++;
    }

    /**
     * This method removes the element at the front of the queue and returns it.
     * @return the element at the front of the queue
     * @throws NoSuchElementException if the queue is empty
     */
    public T dequeue() throws NoSuchElementException {
        if (isEmpty()) {
            throw new NoSuchElementException("The queue is empty.");
        }
        T removed = front.data;
        front = front.next;
        size--;
        return removed;
    }

    /**
     * This method returns the element at the front of the queue without removing it.
     * @return the element at the front of the queue
     * @throws NoSuchElementException if the queue is empty
     */
    public T peek() throws NoSuchElementException {
        if (isEmpty()) {
            throw new NoSuchElementException("The queue is empty.");
        }
        return front.data;
    }

    /**
     * This method checks if the queue is empty.
     * @return true if the queue is empty, otherwise false
     */
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * This method returns the size of the queue.
     * @return the size of the queue
     */
    public int size() {
        return size;
    }

    // Code for testing the implementation
    public static void main(String[] args) {
        // Create a queue of strings
        LinkedQueue<String> queue = new LinkedQueue<>();

        // Add elements to the queue
        queue.enqueue("Hello");
        queue.enqueue("World");

        // Print the queue size
        System.out.println("Queue size: " + queue.size());

        // Remove an element from the queue
        String removed = queue.dequeue();
        // Print the removed element
        System.out.println("Removed element: " + removed);

        // Peek at the front element of the queue
        String peeked = queue.peek();
        // Print the peeked element
        System.out.println("Peeked element: " + peeked);

        // Print the queue size
        System.out.println("Queue size: " + queue.size());
    }
}