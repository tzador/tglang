/**
 * This class represents a binary search tree data structure.
 * It contains methods for insertion, deletion, searching
 * and printing the tree in order.
 */
public class BinarySearchTree {
    private Node root;

    /**
     * Constructor for BinarySearchTree class that initializes
     * the root node to null.
     */
    public BinarySearchTree() {
        this.root = null;
    }

    /**
     * Represents a node in the binary search tree.
     * Contains a key value and the left and right child nodes.
     */
    private class Node {
        int key;
        Node left, right;

        /**
         * Constructor for Node class that initializes the
         * key value and sets the left and right child nodes
         * to null.
         *
         * @param item The key value of the node.
         */
        public Node(int item) {
            this.key = item;
            this.left = null;
            this.right = null;
        }
    }

    /**
     * Inserts a new node with the given key into the binary search tree.
     *
     * @param key The key value of the new node.
     */
    public void insert(int key) {
        this.root = insertRec(this.root, key);
    }

    /**
     * Recursive method to insert a new node with the given key into the binary search tree.
     *
     * @param current The current node being checked in the tree.
     * @param key     The key value of the new node.
     * @return The current node being checked or the newly inserted node.
     */
    private Node insertRec(Node current, int key) {
        if (current == null) {
            return new Node(key);
        }
        if (key < current.key) {
            current.left = insertRec(current.left, key);
        } else {
            current.right = insertRec(current.right, key);
        }
        return current;
    }

    /**
     * Deletes a node with the given key from the binary search tree.
     *
     * @param key The key value of the node to be deleted.
     */
    public void delete(int key) {
        this.root = deleteRec(this.root, key);
    }

    /**
     * Recursive method to delete a node with the given key from the binary search tree.
     *
     * @param current The current node being checked in the tree.
     * @param key     The key value of the node to be deleted.
     * @return The current node being checked or the newly adjusted node.
     */
    private Node deleteRec(Node current, int key) {
        if (current == null) return current;

        if (key < current.key) {
            current.left = deleteRec(current.left, key);
        } else if (key > current.key) {
            current.right = deleteRec(current.right, key);
        } else {
            // node with only one child or no child
            if (current.left == null) {
                return current.right;
            } else if (current.right == null) {
                return current.left;
            }

            // node with two children
            // get the inorder successor
            current.key = minValue(current.right);

            // delete the inorder successor
            current.right = deleteRec(current.right, current.key);
        }

        return current;
    }

    /**
     * Helper method to find the minimum value in a given tree.
     *
     * @param root The root node of the tree to be checked.
     * @return The minimum value found in the tree.
     */
    private int minValue(Node root) {
        int min = root.key;
        while (root.left != null) {
            min = root.left.key;
            root = root.left;
        }
        return min;
    }

    /**
     * Searches for a node with the given key in the binary search tree.
     *
     * @param key The key value to be searched for.
     * @return true if the node with the given key is found, false if not.
     */
    public boolean search(int key) {
        return searchRec(this.root, key);
    }

    /**
     * Recursive method to search for a node with the given key in the binary search tree.
     *
     * @param current The current node being checked in the tree.
     * @param key     The key value to be searched for.
     * @return true if the node with the given key is found, false if not.
     */
    private boolean searchRec(Node current, int key) {
        if (current == null) return false;

        if (key < current.key) {
            return searchRec(current.left, key);
        } else if (key > current.key) {
            return searchRec(current.right, key);
        } else {
            return true;
        }
    }

    /**
     * Prints the binary search tree in order (left, root, right).
     */
    public void printInOrder() {
        printInOrderRec(this.root);
    }

    /**
     * Recursive method to print the binary search tree in order (left, root, right).
     *
     * @param current The current node being printed.
     */
    private void printInOrderRec(Node current) {
        if (current != null) {
            printInOrderRec(current.left);
            System.out.print(current.key + " ");
            printInOrderRec(current.right);
        }
    }
}