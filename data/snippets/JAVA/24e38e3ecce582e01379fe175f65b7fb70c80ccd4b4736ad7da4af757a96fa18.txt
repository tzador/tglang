/**
 * This class represents a binary search tree
 */
public class BinarySearchTree {

    /**
     * Inner class representing a tree node
     */
    private class TreeNode {
        private int key;
        private TreeNode left;
        private TreeNode right;

        /**
         * Constructor for TreeNode class
         * @param key the value of the node
         */
        public TreeNode(int key) {
            this.key = key;
            left = null;
            right = null;
        }
    }

    private TreeNode root;

    /**
     * Default constructor for BinarySearchTree class
     */
    public BinarySearchTree() {
        root = null;
    }

    /**
     * Method to insert a new node into the tree
     * @param key the key of the new node
     */
    public void insert(int key) {
        root = insertNode(root, key);
    }

    /**
     * Method to recursively insert a new node into the tree
     * @param node the current node being evaluated
     * @param key the key of the new node
     * @return the newly inserted node
     */
    private TreeNode insertNode(TreeNode node, int key) {
        // if node is null, create a new TreeNode and return it
        if (node == null) {
            return new TreeNode(key);
        }

        // if key is less than current node's key, insert into left subtree
        if (key < node.key) {
            node.left = insertNode(node.left, key);
        }
        // otherwise insert into right subtree
        else {
            node.right = insertNode(node.right, key);
        }

        return node;
    }

    /**
     * Method to search for a node in the tree
     * @param key the value of the node to search for
     * @return true if node is found, false otherwise
     */
    public boolean search(int key) {
        return searchNode(root, key);
    }

    /**
     * Method to recursively search for a node in the tree
     * @param node the current node being evaluated
     * @param key the value of the node to search for
     * @return true if node is found, false otherwise
     */
    private boolean searchNode(TreeNode node, int key) {
        // if node is null, return false
        if (node == null) {
            return false;
        }

        // if key matches node's key, return true
        if (node.key == key) {
            return true;
        }

        // if key is less than current node's key, search in left subtree
        if (key < node.key) {
            return searchNode(node.left, key);
        }
        // otherwise search in right subtree
        else {
            return searchNode(node.right, key);
        }
    }

    /**
     * Method to delete a node from the tree
     * @param key the value of the node to be deleted
     */
    public void delete(int key) {
        root = deleteNode(root, key);
    }

    /**
     * Method to recursively delete a node from the tree
     * @param node the current node being evaluated
     * @param key the value of the node to be deleted
     * @return the updated root after deletion
     */
    private TreeNode deleteNode(TreeNode node, int key) {
        // if node is null, return null
        if (node == null) {
            return null;
        }

        // if key is less than current node's key, delete node from left subtree
       if (key < node.key) {
            node.left = deleteNode(node.left, key);
        }
        // if key is greater than current node's key, delete node from right subtree
        else if (key > node.key) {
            node.right = deleteNode(node.right, key);
        }
        // otherwise, we have found the node to delete
        else {
            // if node has no children, simply delete it
            if (node.left == null && node.right == null) {
                return null;
            }
            // if node has only one child, make that child the new root
            else if (node.left == null) {
                return node.right;
            }
            else if (node.right == null) {
                return node.left;
            }
            // if node has two children, find the minimum value in the right subtree
            // and replace the current node with it
            else {
                TreeNode min = findMin(node.right);
                node.key = min.key;
                // recursively delete the minimum node from the right subtree
                node.right = deleteNode(node.right, min.key);
            }
        }

        return node;
    }

    /**
     * Helper method to find the minimum value in a subtree
     * @param node the root of the subtree to search in
     * @return the minimum value in the subtree
     */
    private TreeNode findMin(TreeNode node) {
        // minimum value will always be the leftmost node in a subtree
        // so keep traversing left until you reach a leaf
        while (node.left != null) {
            node = node.left;
        }

        return node;
    }
}