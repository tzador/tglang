// This code snippet uses recursion to find all possible permutations of a given string

/**
 * Recursive helper method to generate permutations of a string
 *
 * @param str the string whose permutations are being generated
 * @param index the current index of the string being used
 * @param permutations a list to store all the permutations
 */
private static void generatePermutationsHelper(String str, int index, List<String> permutations) {
    if (index >= str.length() - 1) { // base case - reached end of string
        permutations.add(str); // add permutation to list
    } else {
        for (int i = index; i < str.length(); i++) { // loop through remaining characters
            // swap character at current index with character at i
            str = swapCharacters(str, index, i);

            // recursively call method to generate permutations for remaining characters
            generatePermutationsHelper(str, index + 1, permutations);

            // swap characters back to original positions for next iteration
            str = swapCharacters(str, index, i);
        }
    }
}

/**
 * Method to swap two characters in a string
 *
 * @param str the string whose characters are being swapped
 * @param i the index of the first character to be swapped
 * @param j the index of the second character to be swapped
 * @return the string with swapped characters
 */
private static String swapCharacters(String str, int i, int j) {
    char[] charArray = str.toCharArray(); // convert string to char array
    char temp = charArray[i]; // store character at index i
    charArray[i] = charArray[j]; // replace character at index i with character at index j
    charArray[j] = temp; // replace character at index j with stored character
    return String.valueOf(charArray); // convert char array back to string and return
}

/**
 * Method to generate all possible permutations of a string
 *
 * @param str the string whose permutations are being generated
 * @return a list of all permutations
 */
public static List<String> generatePermutations(String str) {
    List<String> permutations = new ArrayList<>(); // initialize list to store permutations
    generatePermutationsHelper(str, 0, permutations); // call helper method
    return permutations; // return list of permutations
}