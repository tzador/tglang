/**
 * This is a class that represents a complex number with real and imaginary components.
 * It includes methods for basic arithmetic operations and comparison.
 */
public class ComplexNumber {
    private double real; // real component
    private double imaginary; // imaginary component

    /**
     * Constructor to initialize a complex number with given real and imaginary components.
     *
     * @param real      the real component
     * @param imaginary the imaginary component
     */
    public ComplexNumber(double real, double imaginary) {
        this.real = real;
        this.imaginary = imaginary;
    }

    /**
     * Returns the negation of this complex number.
     *
     * @return the negation of this complex number
     */
    public ComplexNumber negate() {
        return new ComplexNumber(-real, -imaginary);
    }

    /**
     * Adds the given complex number to this complex number and returns the result.
     *
     * @param other the other complex number to be added
     * @return the sum of this complex number and the given complex number
     */
    public ComplexNumber add(ComplexNumber other) {
        double realPart = real + other.real;
        double imaginaryPart = imaginary + other.imaginary;
        return new ComplexNumber(realPart, imaginaryPart);
    }

    /**
     * Subtracts the given complex number from this complex number and returns the result.
     *
     * @param other the other complex number to be subtracted
     * @return the difference between this complex number and the given complex number
     */
    public ComplexNumber subtract(ComplexNumber other) {
        double realPart = real - other.real;
        double imaginaryPart = imaginary - other.imaginary;
        return new ComplexNumber(realPart, imaginaryPart);
    }

    /**
     * Multiplies this complex number by the given complex number and returns the result.
     *
     * @param other the other complex number to be multiplied
     * @return the product of this complex number and the given complex number
     */
    public ComplexNumber multiply(ComplexNumber other) {
        double realPart = (real * other.real) - (imaginary * other.imaginary);
        double imaginaryPart = (real * other.imaginary) + (imaginary * other.real);
        return new ComplexNumber(realPart, imaginaryPart);
    }

    /**
     * Divides this complex number by the given complex number and returns the result.
     *
     * @param other the other complex number to be divided by
     * @return the quotient of this complex number and the given complex number
     */
    public ComplexNumber divide(ComplexNumber other) {
        double denominator = (other.real * other.real) + (other.imaginary * other.imaginary);
        double realPart = ((real * other.real) + (imaginary * other.imaginary)) / denominator;
        double imaginaryPart = ((imaginary * other.real) - (real * other.imaginary)) / denominator;
        return new ComplexNumber(realPart, imaginaryPart);
    }

    /**
     * Returns true if this complex number is equal to the given complex number.
     *
     * @param other the other complex number to be compared
     * @return true if both complex numbers have the same real and imaginary components, false otherwise
     */
    public boolean equals(ComplexNumber other) {
        return (real == other.real) && (imaginary == other.imaginary);
    }

    /**
     * Returns a string representation of this complex number.
     *
     * @return the string representation of this complex number in the form a + bi, where a is the real component
     * and b is the imaginary component
     */
    @Override
    public String toString() {
        if (imaginary == 0) {
            return real + "";
        }
        if (real == 0) {
            return imaginary + "i";
        }
        if (imaginary < 0) {
            return real + " - " + (-imaginary) + "i";
        }
        return real + " + " + imaginary + "i";
    }
}