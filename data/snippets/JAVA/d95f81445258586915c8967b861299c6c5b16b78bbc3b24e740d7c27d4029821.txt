/**
 * This class represents a doubly linked list data structure.
 * The list maintains a reference to both its head and tail nodes.
 */
public class DoublyLinkedList<T> {
    /**
     * This inner class represents a node in the doubly linked list.
     * Each node contains data and references to its previous and next nodes.
     */
    private class Node {
        private T data;
        private Node prev;
        private Node next;

        // Constructor to create a new node
        public Node(T data) {
            this.data = data;
            this.prev = null;
            this.next = null;
        }
    }

    private Node head; // reference to the first node in the list
    private Node tail; // reference to the last node in the list
    private int size; // holds the size of the list

    // Constructor to create an empty list
    public DoublyLinkedList() {
        this.head = null;
        this.tail = null;
        this.size = 0;
    }

    /**
     * Adds a new node containing the given data to the end of the list.
     */
    public void addToTail(T data) {
        Node newNode = new Node(data);

        // If the list is empty, make the new node the head and tail
        if (isEmpty()) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            // Make the current tail's next reference point to the new node
            this.tail.next = newNode;
            // Make the new node's previous reference point to the current tail
            newNode.prev = this.tail;
            // Make the new node the new tail
            this.tail = newNode;
        }

        // Increment the size of the list
        this.size++;
    }

    /**
     * Removes the last node in the list and returns its data.
     * If the list is empty, returns null.
     */
    public T removeFromTail() {
        // If the list is empty, return null
        if (isEmpty()) {
            return null;
        }

        // Get the data from the current tail
        T data = this.tail.data;

        // If the list only has one node, set the head and tail to null
        if (this.head == this.tail) {
            this.head = null;
            this.tail = null;
        } else {
            // Set the current tail's previous node as the new tail
            this.tail = this.tail.prev;
            // Remove the reference to the old tail's next node
            this.tail.next = null;
        }

        // Decrement the size of the list
        this.size--;

        return data;
    }

    /**
     * Checks if the list is empty.
     */
    public boolean isEmpty() {
        return this.size == 0;
    }

    /**
     * Returns the size of the list.
     */
    public int getSize() {
        return this.size;
    }
}

// Example usage
// Create a new doubly linked list of integers
DoublyLinkedList<Integer> list = new DoublyLinkedList<>();

// Add some elements to the list
list.addToTail(5);
list.addToTail(10);
list.addToTail(15);

// Check the size of the list
System.out.println("Size of list: " + list.getSize()); // Output: Size of list: 3

// Remove an element from the end of the list
System.out.println(list.removeFromTail()); // Output: 15

// Check the size of the list
System.out.println("Size of list: " + list.getSize()); // Output: Size of list: 2