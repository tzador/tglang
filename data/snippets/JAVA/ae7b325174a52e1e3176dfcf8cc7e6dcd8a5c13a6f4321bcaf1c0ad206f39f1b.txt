// This code snippet generates a custom linked list class

public class LinkedList {
  
  // Define a Node class for the linked list
  private class Node {
    private int data; // Data stored in the node
    private Node next; // Pointer to the next node in the list
    
    // Constructor
    public Node(int data) {
      this.data = data;
      this.next = null;
    }
    
    // Getter and setter for data
    public int getData() {
      return this.data;
    }
    
    public void setData(int data) {
      this.data = data;
    }
    
    // Getter and setter for next
    public Node getNext() {
      return this.next;
    }
    
    public void setNext(Node next) {
      this.next = next;
    }
    
  }
  
  // Head node of the list
  private Node head;
  
  // Size of the list
  private int size;
  
  // Constructor
  public LinkedList() {
    this.head = null;
    this.size = 0;
  }
  
  // Method to add a new node to the front of the list
  public void addFront(int data) {
    Node newNode = new Node(data); // Create a new node with the given data
    newNode.setNext(this.head); // Set the new node's next pointer to the current head
    this.head = newNode; // Set the new node as the head
    this.size++; // Increment the size of the list
  }
  
  // Method to add a new node to the end of the list
  public void addEnd(int data) {
    Node newNode = new Node(data); // Create a new node with the given data
    if (this.head == null) { // If the list is empty, set the new node as the head
      this.head = newNode;
    } else {
      Node curr = this.head; // Start at the head of the list
      while (curr.getNext() != null) { // Traverse the list until the last node is reached
        curr = curr.getNext();
      }
      curr.setNext(newNode); // Set the next pointer of the last node to the new node
    }
    this.size++; // Increment the size of the list
  }
  
  // Method to add a new node at a specific index
  public void addAtIndex(int data, int index) {
    if (index < 0 || index > this.size) { // Check if index is out of bounds
      System.out.println("Invalid index!");
      return;
    }
    if (index == 0) { // If index is 0, add to front of list
      this.addFront(data);
    } else if (index == this.size) { // If index is at the end, add at the end
      this.addEnd(data);
    } else {
      Node newNode = new Node(data); // Create a new node with the given data
      Node curr = this.head;
      // Traverse the list until the node at the previous index is reached
      for (int i = 0; i < index - 1; i++) {
        curr = curr.getNext();
      }
      newNode.setNext(curr.getNext()); // Set the new node's next pointer to the original node at the given index
      curr.setNext(newNode); // Set the previous node's next pointer to the new node
      this.size++; // Increment the size of the list
    }
  }
  
  // Method to remove the first node in the list
  public void removeFront() {
    if (this.head == null) { // Check if list is empty
      System.out.println("List is already empty!");
      return;
    }
    this.head = this.head.getNext(); // Set the head to the next node
    this.size--; // Decrement the size of the list
  }
  
  // Method to remove the last node in the list
  public void removeEnd() {
    if (this.head == null) { // Check if list is empty
      System.out.println("List is already empty!");
      return;
    }
    if (this.head.getNext() == null) { // Check if list has only one node
      this.head = null; // Set head to null
    } else {
      Node curr = this.head; // Start at the head of the list
      // Traverse the list until the second last node is reached
      while (curr.getNext().getNext() != null) {
        curr = curr.getNext();
      }
      curr.setNext(null); // Set the next pointer of the second last node to null
    }
    this.size--; // Decrement the size of the list
  }
  
  // Method to remove a node at a specific index
  public void removeAtIndex(int index) {
    if (this.head == null) { // Check if list is empty
      System.out.println("List is already empty!");
      return;
    }
    if (index < 0 || index >= this.size) { // Check if index is out of bounds
      System.out.println("Invalid index!");
      return;
    }
    if (index == 0) { // If index is 0, remove the first node
      this.removeFront();
    } else if (index == this.size - 1) { // If index is at the end, remove the last node
      this.removeEnd();
    } else {
      Node curr = this.head;
      // Traverse the list until the node at the previous index is reached
      for (int i = 0; i < index - 1; i++) {
        curr = curr.getNext();
      }
      curr.setNext(curr.getNext().getNext()); // Set the previous node's next pointer to the next node at the given index
      this.size--; // Decrement the size of the list
    }
  }
  
  // Method to print the list to the console
  public void printList() {
    if (this.head == null) { // Check if list is empty
      System.out.println("List is empty!");
      return;
    }
    Node curr = this.head;
    while (curr != null) { // Print each node's data until the end of the list is reached
      System.out.print(curr.getData() + " ");
      curr = curr.getNext();
    }
    System.out.println(); // Print new line
  }
  
}