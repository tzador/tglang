/**
 * This is a complex code snippet in JAVA that implements a binary search algorithm.
 * It takes in an integer array and a target value to find. 
 * If the target value is present in the array, it will return the index of the value, 
 * else it will return -1.
 */

// Binary search function with input parameters of an integer array and a target value
static int binarySearch(int[] array, int target) {
    
    // Set start and end index values to use as boundaries for search
    int start = 0;
    int end = array.length - 1;
    
    // Run loop while start index is less than or equal to end index
    while (start <= end) {
        
        // Find the middle index of the array using start and end values
        int mid = start + ((end - start) / 2);
        
        // If the target value is equal to the value at the middle index
        if (target == array[mid]) {
            
            // Return the index of the value
            return mid;
        
        // If the target value is less than value at middle index
        } else if (target < array[mid]) {
            
            // Set new end index to be one less than middle index
            end = mid - 1;
        
        // If the target value is greater than value at middle index
        } else {
            
            // Set new start index to be one more than middle index
            start = mid + 1;
        }
    }
    
    // If target value not found, return -1
    return -1;
}

// Example usage of binary search function
public static void main(String[] args) {
    
    // Initialize an integer array
    int[] array = { 5, 7, 10, 14, 16, 20 };
    
    // Call binary search function and pass in array and target value of 10
    int index = binarySearch(array, 10);
    
    // Print output
    System.out.println("Target value found at index: " + index);
    
    // Output: Target value found at index: 2 (since array[2] = 10)
}