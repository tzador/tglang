/**
 * This is a custom class that represents a complex number.
 */
public class ComplexNumber {
    private double real;
    private double imag;

    /**
     * Constructor for creating a new complex number with real and imaginary parts.
     * @param real The real part of the number
     * @param imag The imaginary part of the number
     */
    public ComplexNumber(double real, double imag) {
        this.real = real;
        this.imag = imag;
    }

    /**
     * Adds two complex numbers and returns the result.
     * @param num The complex number to be added to this number
     * @return The sum of the two complex numbers
     */
    public ComplexNumber add(ComplexNumber num) {
        double realSum = this.real + num.real;
        double imagSum = this.imag + num.imag;
        return new ComplexNumber(realSum, imagSum);
    }

    /**
     * Subtracts a complex number from this number and returns the result.
     * @param num The complex number to be subtracted from this number
     * @return The difference between this number and the given complex number
     */
    public ComplexNumber subtract(ComplexNumber num) {
        double realDiff = this.real - num.real;
        double imagDiff = this.imag - num.imag;
        return new ComplexNumber(realDiff, imagDiff);
    }

    /**
     * Multiplies two complex numbers and returns the result.
     * @param num The complex number to be multiplied with this number
     * @return The product of the two complex numbers
     */
    public ComplexNumber multiply(ComplexNumber num) {
        double realProd = (this.real * num.real) - (this.imag * num.imag);
        double imagProd = (this.real * num.imag) + (this.imag * num.real);
        return new ComplexNumber(realProd, imagProd);
    }

    /**
     * Divides this number by a complex number and returns the result.
     * @param num The complex number to divide this number by
     * @return The quotient of this number and the given complex number
     */
    public ComplexNumber divide(ComplexNumber num) {
        double realDiv = ((this.real * num.real) + (this.imag * num.imag)) / (num.real * num.real + num.imag * num.imag);
        double imagDiv = ((this.imag * num.real) - (this.real * num.imag)) / (num.real * num.real + num.imag * num.imag);
        return new ComplexNumber(realDiv, imagDiv);
    }

    /**
     * Calculates the absolute value (magnitude) of this complex number.
     * @return The absolute value of this complex number
     */
    public double abs() {
        return Math.sqrt(this.real * this.real + this.imag * this.imag);
    }

    /**
     * Returns a string representation of this complex number.
     * @return A string representation of this complex number in the form "a + bi"
     */
    @Override
    public String toString() {
        if (this.imag < 0) {
            return this.real + " - " + Math.abs(this.imag) + "i";
        } else {
            return this.real + " + " + this.imag + "i";
        }
    }
}