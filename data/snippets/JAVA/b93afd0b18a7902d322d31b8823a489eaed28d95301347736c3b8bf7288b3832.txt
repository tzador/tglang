/**
 * This method sorts an array of integers using the quicksort algorithm.
 * @param arr the array to be sorted
 * @param low the starting index of the array
 * @param high the ending index of the array
 * @return the sorted array
 */
private static int[] quicksort(int[] arr, int low, int high) {
    //base case: if the array size is 0 or 1, return the array as it is already sorted
    if (low >= high) {
        return arr;
    }
    
    //choose a pivot element (in this case, the middle element)
    int pivot = arr[(low + high) / 2];
    
    //create left and right index variables
    int i = low;
    int j = high;
    
    //loop until the left and right index meet
    while (i <= j) {
        //increment i until an element greater than the pivot is found
        while (arr[i] < pivot) {
            i++;
        }
        
        //decrement j until an element less than the pivot is found
        while (arr[j] > pivot) {
            j--;
        }
        
        //if i and j have not crossed each other, swap the elements at indices i and j
        if (i <= j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            
            //increment i and decrement j so that the loop can continue
            i++;
            j--;
        }
    }
    
    //call quicksort again recursively for the left and right subarrays
    quicksort(arr, low, j);
    quicksort(arr, i, high);
    
    //return the sorted array
    return arr;
}