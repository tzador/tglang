/**
* This is a complex code snippet in JAVA that uses
* recursion and dynamic programming to find the maximum
* subarray in a given array of integers.
*
* Input:
* arr - an array of integers
*
* Output:
* maxSum - the maximum sum of a subarray within the given array
**/

public class MaximumSubarray {

    // function to calculate the maximum sum of a subarray using recursion
    static int maxSubarraySum(int arr[], int start, int end) {
        // base case - if the subarray has only one element, its sum is the element itself
        if (start == end) {
            return arr[start];
        }

        // calculate the midpoint of the subarray
        int mid = (start + end) / 2;

        // recursively find the maximum subarray sum in the left and right subarrays
        int maxLeft = maxSubarraySum(arr, start, mid);
        int maxRight = maxSubarraySum(arr, mid+1, end);

        // calculate the maximum subarray sum crossing the midpoint
        // this is done by starting from the midpoint and expanding outwards to the left and right
        // and keeping track of the maximum sum as we go
        int maxCross = Integer.MIN_VALUE;
        int sum = 0;
        for (int i = mid; i >= start; i--) {
            sum += arr[i];
            if (sum > maxCross) {
                maxCross = sum;
            }
        }
        sum = 0;
        for (int i = mid+1; i <= end; i++) {
            sum += arr[i];
            if (sum > maxCross) {
                maxCross = sum;
            }
        }

        // return the maximum of the three subarray sums calculated
        return Math.max(maxLeft, Math.max(maxRight, maxCross));
    }

    // function to calculate the maximum subarray sum using dynamic programming
    static int maxSubarraySumDP(int arr[], int n) {
        // initialize variables to store the maximum sum so far and the maximum sum ending at a particular index
        int maxSoFar = arr[0];
        int maxEndingHere = arr[0];

        // loop through the array starting at the second element
        for (int i = 1; i < n; i++) {
            // update the maximum sum ending at index i by taking the maximum of (array[i], array[i] + maximum sum ending at i-1)
            maxEndingHere = Math.max(arr[i], arr[i] + maxEndingHere);

            // update the maximum sum so far by taking the maximum of (maximum sum so far, maximum sum ending at index i)
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }

        // return the final maximum sum
        return maxSoFar;
    }

    public static void main(String args[]) {
        int arr[] = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
        
        // find the maximum subarray sum using recursion
        int maxSum = maxSubarraySum(arr, 0, arr.length-1);
        System.out.println("Maximum sum of a subarray (using recursion) = " + maxSum);

        // find the maximum subarray sum using dynamic programming
        maxSum = maxSubarraySumDP(arr, arr.length);
        System.out.println("Maximum sum of a subarray (using dynamic programming) = " + maxSum);
    }
}