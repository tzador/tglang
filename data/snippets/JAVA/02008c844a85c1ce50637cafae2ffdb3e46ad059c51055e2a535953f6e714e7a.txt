public class Matrix {
    private final int ROWS;
    private final int COLS;
    private int[][] matrix;

    // Constructor
    public Matrix(int rows, int cols) {
        this.ROWS = rows;
        this.COLS = cols;
        this.matrix = new int[rows][cols];
    }

    // Method for getting matrix dimensions
    public int getRows() {
        return ROWS;
    }

    public int getCols() {
        return COLS;
    }

    // Method for setting a value at a specific index
    public void setValue(int row, int col, int value) {
        this.matrix[row][col] = value;
    }

    // Method for getting a value at a specific index
    public int getValue(int row, int col) {
        return this.matrix[row][col];
    }

    // Method for adding two matrices
    public Matrix add(Matrix other) {
        // Check if matrices have the same dimensions
        if (this.ROWS != other.ROWS || this.COLS != other.COLS) {
            System.out.println("Matrices have different dimensions, cannot add.");
            return null;
        }

        Matrix result = new Matrix(this.ROWS, this.COLS);

        // Loop through each element in the matrices and add their values
        for (int i = 0; i < this.ROWS; i++) {
            for (int j = 0; j < this.COLS; j++) {
                result.matrix[i][j] = this.matrix[i][j] + other.matrix[i][j];
            }
        }

        return result;
    }

    // Method for multiplying two matrices
    public Matrix multiply(Matrix other) {
        // Check if the number of columns in first matrix matches the number of rows in second matrix
        if (this.COLS != other.ROWS) {
            System.out.println("Matrices cannot be multiplied. Invalid dimensions.");
            return null;
        }

        Matrix result = new Matrix(this.ROWS, other.COLS);

        // Loop through each element in the resulting matrix and compute the dot product of the corresponding rows and columns of both matrices
        for (int i = 0; i < this.ROWS; i++) {
            for (int j = 0; j < other.COLS; j++) {
                for (int k = 0; k < this.COLS; k++) {
                    result.matrix[i][j] += this.matrix[i][k] * other.matrix[k][j];
                }
            }
        }

        return result;
    }

    // Method for transposing the matrix
    public Matrix transpose() {
        Matrix result = new Matrix(this.COLS, this.ROWS);

        // Loop through each element in the result matrix and switch the rows and columns
        for (int i = 0; i < this.ROWS; i++) {
            for (int j = 0; j < this.COLS; j++) {
                result.matrix[j][i] = this.matrix[i][j];
            }
        }

        return result;
    }

    // Method for printing the matrix
    public void printMatrix() {
        // Loop through each element in the matrix and print its value
        for (int i = 0; i < this.ROWS; i++) {
            for (int j = 0; j < this.COLS; j++) {
                System.out.print(this.matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}