// This code performs a breadth-first search on a graph represented as an adjacency matrix

// Initialize the queue for BFS
Queue<Integer> queue = new LinkedList<>();

// Keep track of visited vertices
boolean[] visited = new boolean[adjMatrix.length];

// Add starting vertex to the queue
queue.add(start);

// Mark it as visited
visited[start] = true;

// Loop until queue is empty
while (!queue.isEmpty()) {
    // Get vertex at front of queue
    int currVertex = queue.poll();

    // Print the current vertex
    System.out.println("Current Vertex: " + currVertex);

    // Get list of adjacent vertices
    int[] adjVertices = adjMatrix[currVertex];

    // Loop through adjacent vertices
    for (int i = 0; i < adjVertices.length; i++) {
        // Check if vertex has been visited
        if (!visited[i]) {
            // Add to queue and mark as visited
            queue.add(i);
            visited[i] = true;
        }
    }
}