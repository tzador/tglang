/**
 * This class represents a binary search tree data structure.
 */
public class BinarySearchTree<T extends Comparable<T>> {

    /**
     * This inner class represents a single node in the tree.
     */
    private class Node {
        T data;
        Node left;
        Node right;

        public Node(T data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    private Node root; // the root node of the tree

    /**
     * This method inserts a new node with the given data into the tree.
     * If the data already exists in the tree, it will not be inserted.
     *
     * @param data the data to be inserted
     * @return true if the data was inserted, false otherwise
     */
    public boolean insert(T data) {
        if (root == null) { // if tree is empty, make the new node the root
            root = new Node(data);
            return true;
        }

        // otherwise, traverse the tree until an appropriate spot for the new node is found
        Node current = root;

        while (true) {
            // check if data is already in the tree
            if (data.equals(current.data)) {
                return false;
            }

            // check if data is less than current node's data
            if (data.compareTo(current.data) < 0) {
                // if left child is null, insert new node as left child
                if (current.left == null) {
                    current.left = new Node(data);
                    return true;
                }
                // otherwise, update current to left child and continue traversal
                else {
                    current = current.left;
                }
            }
            // otherwise, data must be greater than current node's data
            else {
                // if right child is null, insert new node as right child
                if (current.right == null) {
                    current.right = new Node(data);
                    return true;
                }
                // otherwise, update current to right child and continue traversal
                else {
                    current = current.right;
                }
            }
        }
    }

    /**
     * This method searches the tree for a node with the given data and returns true if found, false otherwise.
     *
     * @param data the data to search for
     * @return true if data exists in the tree, false otherwise
     */
    public boolean search(T data) {
        if (root == null) { // if tree is empty, return false
            return false;
        }

        // otherwise, traverse the tree until the data is found or all nodes have been checked
        Node current = root;

        while (current != null) {
            if (data.equals(current.data)) { // data found
                return true;
            } else if (data.compareTo(current.data) < 0) { // data is less than current node's data
                current = current.left; // update current to left child and continue traversal
            } else { // data is greater than current node's data
                current = current.right; // update current to right child and continue traversal
            }
        }

        return false; // data not found in tree, return false
    }

    /**
     * This method deletes a node with the given data from the tree.
     * If the data does not exist in the tree, nothing happens.
     *
     * @param data the data to be deleted
     * @return true if data was successfully deleted, false otherwise
     */
    public boolean delete(T data) {
        if (root == null) { // if tree is empty, data does not exist in the tree
            return false;
        }

        Node current = root; // node to be deleted
        Node parent = null; // parent of the node to be deleted
        boolean isLeftChild = false; // flag to keep track of whether node to be deleted is a left child or not

        // traverse the tree until data is found or all nodes have been checked
        while (!data.equals(current.data)) {
            parent = current;

            if (data.compareTo(current.data) < 0) {
                isLeftChild = true;
                current = current.left;
            } else {
                isLeftChild = false;
                current = current.right;
            }

            if (current == null) { // data does not exist in the tree
                return false;
            }
        }

        // case 1: node to be deleted has no children
        if (current.left == null && current.right == null) {
            if (current == root) { // if node to be deleted is the root, set root to null
                root = null;
            } else if (isLeftChild) { // if node to be deleted is a left child, set parent's left child to null
                parent.left = null;
            } else { // node to be deleted is a right child, set parent's right child to null
                parent.right = null;
            }
        }
        // case 2: node to be deleted has only one child
        else if (current.right == null) { // if node to be deleted has no right child
            if (current == root) { // if node to be deleted is the root, set root to its left child
                root = current.left;
            } else if (isLeftChild) { // if node to be deleted is a left child, set parent's left child to its left child
                parent.left = current.left;
            } else { // node to be deleted is a right child, set parent's right child to its left child
                parent.right = current.left;
            }
        } else if (current.left == null) { // if node to be deleted has no left child
            if (current == root) { // if node to be deleted is the root, set root to its right child
                root = current.right;
            } else if (isLeftChild) { // if node to be deleted is a left child, set parent's left child to its right child
                parent.left = current.right;
            } else { // node to be deleted is a right child, set parent's right child to its right child
                parent.right = current.right;
            }
        }
        // case 3: node to be deleted has two children
        else {
            // find minimum value in right subtree
            Node successor = getSuccessor(current);

            if (current == root) { // if node to be deleted is the root, set root to its successor
                root = successor;
            } else if (isLeftChild) { // if node to be deleted is a left child, set parent's left child to its successor
                parent.left = successor;
            } else { // node to be deleted is a right child, set parent's right child to its successor
                parent.right = successor;
            }

            // set successor's left child to node's left child
            successor.left = current.left;
        }

        return true; // node successfully deleted
    }

    /**
     * This method finds and returns the minimum value in the right subtree of a given node.
     *
     * @param node the node whose right subtree's minimum value is to be found
     * @return the node containing the minimum value in the right subtree
     */
    private Node getSuccessor(Node node) {
        Node successor = null;
        Node successorParent = null;
        Node current = node.right; // start at node's right child

        while (current != null) {
            // update successor and successor's parent while traversing towards the left
            successorParent = successor;
            successor = current;
            current = current.left;
        }

        // check if successor is not the right child of the node to be deleted
        if (successor != node.right) {
            // set successor's parent's left child to successor's right child
            successorParent.left = successor.right;
            // set successor's right child to node's right child
            successor.right = node.right;
        }

        return successor;
    }

    /**
     * This method recursively prints the structure and contents of the tree, starting from the root.
     */
    public void printTree() {
        printTree(root);
    }

    /**
     * This method recursively prints the structure and contents of a subtree, starting from a given node.
     *
     * @param node the starting node
     */
    private void printTree(Node node) {
        if (node == null) { // if node is null, return
            return;
        }

        // print left subtree
        printTree(node.left);

        // print current node's data
        System.out.println(node.data);

        // print right subtree
        printTree(node.right);
    }
}