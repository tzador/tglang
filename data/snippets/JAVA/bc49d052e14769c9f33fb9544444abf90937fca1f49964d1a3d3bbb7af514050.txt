/**
 * This class represents a custom HashMap implementation in Java.
 * It uses an array of linked lists for collision handling and implements
 * the hashCode() and equals() methods for proper key-value mapping.
 */
public class CustomHashMap<K, V> {
    // The underlying array of linked lists
    private LinkedList<Entry>[] buckets;

    // The current number of key-value pairs in the map
    private int size;

    /**
     * An Entry class representing a key-value pair in the map.
     * Contains the key, value, and a reference to the next entry in the linked list.
     */
    private static class Entry<K, V> {
        private K key;
        private V value;
        private Entry<K, V> next;

        /**
         * Constructor for creating a new Entry object.
         * @param key the key of the entry
         * @param value the value of the entry
         * @param next the next entry in the linked list
         */
        public Entry(K key, V value, Entry<K, V> next) {
            this.key = key;
            this.value = value;
            this.next = next;
        }

        /**
         * Returns the key of the entry.
         * @return the key
         */
        public K getKey() {
            return this.key;
        }

        /**
         * Returns the value of the entry.
         * @return the value
         */
        public V getValue() {
            return this.value;
        }

        /**
         * Sets the value of the entry.
         * @param value the new value to be set
         */
        public void setValue(V value) {
            this.value = value;
        }

        /**
         * Checks if two entries are equal by comparing their keys and values.
         * @param obj the object to be compared with
         * @return true if the entries are equal, false otherwise
         */
        @Override
        public boolean equals(Object obj) {
            if (obj instanceof Entry) {
                Entry<K, V> other = (Entry<K, V>) obj;
                if (this.key.equals(other.getKey()) && this.value.equals(other.getValue())) {
                    return true;
                }
                return false;
            }
            return false;
        }

        /**
         * Returns the hashCode of the entry by using the key's hashCode.
         * @return the hashCode
         */
        @Override
        public int hashCode() {
            int result = 17;
            result = 31 * result + key.hashCode();
            result = 31 * result + value.hashCode();
            return result;
        }
    }

    /**
     * Constructor for creating a new CustomHashMap with a given capacity.
     * @param capacity the initial capacity of the map
     */
    public CustomHashMap(int capacity) {
        this.buckets = new LinkedList[capacity];
        this.size = 0;
    }

    /**
     * Inserts a new key-value pair into the map.
     * @param key the key of the new entry
     * @param value the value of the new entry
     */
    public void put(K key, V value) {
        int index = Math.abs(key.hashCode() % this.buckets.length);
        if (this.buckets[index] == null) {
            this.buckets[index] = new LinkedList<>();
        }
        for (Entry<K, V> entry : this.buckets[index]) {
            if (entry.getKey().equals(key)) {
                entry.setValue(value);
                return;
            }
        }
        this.buckets[index].add(new Entry<>(key, value, null));
        this.size++;
    }

    /**
     * Retrieves the value associated with a given key from the map.
     * @param key the key to search for
     * @return the value associated with the key, or null if no such key exists
     */
    public V get(K key) {
        int index = Math.abs(key.hashCode() % this.buckets.length);
        if (this.buckets[index] != null) {
            for (Entry<K, V> entry : this.buckets[index]) {
                if (entry.getKey().equals(key)) {
                    return entry.getValue();
                }
            }
        }
        return null;
    }

    /**
     * Removes a key-value pair from the map.
     * @param key the key of the entry to be removed
     * @return the value associated with the removed key, or null if no such key exists
     */
    public V remove(K key) {
        int index = Math.abs(key.hashCode() % this.buckets.length);
        if (this.buckets[index] != null) {
            for (Entry<K, V> entry : this.buckets[index]) {
                if (entry.getKey().equals(key)) {
                    V value = entry.getValue();
                    this.buckets[index].remove(entry);
                    this.size--;
                    return value;
                }
            }
        }
        return null;
    }

    /**
     * Checks if the map contains a given key.
     * @param key the key to be checked
     * @return true if the map contains the key, false otherwise
     */
    public boolean containsKey(K key) {
        int index = Math.abs(key.hashCode() % this.buckets.length);
        if (this.buckets[index] != null) {
            for (Entry<K, V> entry : this.buckets[index]) {
                if (entry.getKey().equals(key)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Checks if the map contains a given value.
     * @param value the value to be checked
     * @return true if the map contains the value, false otherwise
     */
    public boolean containsValue(V value) {
        for (LinkedList<Entry> bucket : this.buckets) {
            if (bucket != null) {
                for (Entry<K, V> entry : bucket) {
                    if (entry.getValue().equals(value)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * Returns the size of the map.
     * @return the size
     */
    public int size() {
        return this.size;
    }
}

// Example usage:
CustomHashMap<String, Integer> map = new CustomHashMap<>(10);
map.put("apple", 5);
map.put("banana", 7);
map.put("orange", 9);
map.put("cherry", 2);
map.put("grape", 4);

System.out.println(map.containsKey("orange")); // true
System.out.println(map.get("cherry")); // 2
System.out.println(map.size()); // 5