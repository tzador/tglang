/**
* This is a complex code snippet written in JAVA that demonstrates finding the shortest path in a graph using Dijkstra's algorithm.
*/

// Defining a class to represent a vertex in a graph
class Vertex {
    private int key; // key represents the unique identifier for a vertex
    private List<Edge> edges; // List of edges connected to this vertex
    private int distance; // Distance from the source vertex to this vertex
    private Vertex previous; // Previous vertex in the shortest path

    // Constructor for the Vertex class
    Vertex(int key) {
        this.key = key;
        this.edges = new ArrayList<>();
        this.distance = Integer.MAX_VALUE; // Initialize distance as maximum possible value
        this.previous = null;
    }

    // Adding an edge to the list of edges connected to this vertex
    public void addEdge(Edge edge) {
        this.edges.add(edge);
    }

    // Getters and setters for the private variables
    public int getKey() {
        return this.key;
    }

    public List<Edge> getEdges() {
        return this.edges;
    }

    public int getDistance() {
        return this.distance;
    }

    public Vertex getPrevious() {
        return this.previous;
    }

    public void setDistance(int distance) {
        this.distance = distance;
    }

    public void setPrevious(Vertex previous) {
        this.previous = previous;
    }
}

// Defining a class to represent an edge between two vertices in a graph
class Edge {
    private int weight; // Weight of the edge
    private Vertex start; // Starting vertex of the edge
    private Vertex end; // Ending vertex of the edge

    // Constructor for the Edge class
    Edge(int weight, Vertex start, Vertex end) {
        this.weight = weight;
        this.start = start;
        this.end = end;
    }

    // Getters for the private variables
    public int getWeight() {
        return this.weight;
    }

    public Vertex getStart() {
        return this.start;
    }

    public Vertex getEnd() {
        return this.end;
    }
}

// Defining a class to represent a graph
class Graph {
    private List<Vertex> vertices; // List of vertices in the graph
    private List<Edge> edges; // List of edges in the graph

    // Constructor for the Graph class
    Graph() {
        this.vertices = new ArrayList<>();
        this.edges = new ArrayList<>();
    }

    // Adding a vertex to the list of vertices in the graph
    public void addVertex(Vertex vertex) {
        this.vertices.add(vertex);
    }

    // Adding an edge to the list of edges in the graph
    public void addEdge(Edge edge) {
        this.edges.add(edge);
    }

    // Implementation of Dijkstra's algorithm to find the shortest path in a graph from a source vertex
    public void dijkstrasAlgorithm(Vertex source) {
        source.setDistance(0); // Distance from source to source vertex is 0
        PriorityQueue<Vertex> queue = new PriorityQueue<>((v1, v2) -> v1.getDistance() - v2.getDistance()); // Priority queue to store the vertices based on their distance from the source
        queue.add(source); // Adding the source vertex to the priority queue

        while (!queue.isEmpty()) {
            Vertex current = queue.poll(); // Removing the vertex with the shortest distance from the queue

            // Looping through all the edges connected to the current vertex
            for (Edge edge : current.getEdges()) {
                Vertex neighbor = edge.getEnd(); // Getting the neighbor vertex of the current vertex through the edge
                int distanceFromCurrent = current.getDistance() + edge.getWeight(); // Calculating the distance of the neighbor vertex from the source vertex through the current vertex

                // If the calculated distance is smaller than the neighbor's current distance, update the neighbor's distance and previous vertex
                if (distanceFromCurrent < neighbor.getDistance()) {
                    queue.remove(neighbor); // Removing the neighbor from the queue to update its distance
                    neighbor.setDistance(distanceFromCurrent); // Updating the neighbor's distance
                    neighbor.setPrevious(current); // Updating the neighbor's previous vertex
                    queue.add(neighbor); // Adding the updated neighbor back to the queue
                }
            }
        }
    }

    // Method to print the shortest path from the source vertex to a given vertex
    public void printShortestPath(Vertex destination) {
        if (destination.getDistance() == Integer.MAX_VALUE) { // If the distance of the given vertex is still at its initial value, no path exists
            System.out.println("No path exists between the source and the given destination vertex.");
        } else {
            System.out.println("Shortest path from source to destination: ");

            // Storing the vertices in the shortest path from source to destination in a stack
            Stack<Vertex> stack = new Stack<>();
            Vertex current = destination;
            while (current != null) {
                stack.push(current);
                current = current.getPrevious();
            }

            // Printing the vertices in the stack in the correct order
            while (!stack.isEmpty()) {
                System.out.print(stack.pop().getKey() + " ");
            }
        }
    }
}

// Initializing a graph
Graph graph = new Graph();

// Adding the vertices to the graph
Vertex a = new Vertex(1);
Vertex b = new Vertex(2);
Vertex c = new Vertex(3);
Vertex d = new Vertex(4);
Vertex e = new Vertex(5);

// Adding the edges to the graph
graph.addEdge(new Edge(10, a, b));
graph.addEdge(new Edge(5, a, c));
graph.addEdge(new Edge(3, b, d));
graph.addEdge(new Edge(1, c, d));
graph.addEdge(new Edge(2, c, e));
graph.addEdge(new Edge(4, d, e));

// Running Dijkstra's algorithm on the graph with source vertex 'a'
graph.dijkstrasAlgorithm(a);

// Printing the shortest path from source vertex 'a' to destination vertex 'e'
graph.printShortestPath(e);