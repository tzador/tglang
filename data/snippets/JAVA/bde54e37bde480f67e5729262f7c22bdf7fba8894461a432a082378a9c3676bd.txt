public class MyClass<T extends Number> { // declares a generic class with a type parameter T that must extend Number
    private T value; // declares a private member variable of type T
    
    public MyClass(T value) { // constructor that takes in an argument of type T
        this.value = value; // assigns the argument value to the private member variable
    }
    
    public T getValue() { // getter method for the private member variable
        return this.value; // returns the value of the private member variable
    }
    
    public <E> void printValue(E value) { // declares a method with a type parameter E
        System.out.println(value); // prints the argument value
    }
    
    public static void main(String[] args) { // main method
        MyClass<Integer> myClass = new MyClass<>(5); // creates an instance of MyClass with a type argument of Integer
        System.out.println(myClass.getValue()); // calls the getValue method to print the value, which is 5
        
        MyClass<String> myOtherClass = new MyClass<>("Hello"); // creates an instance of MyClass with a type argument of String
        myOtherClass.printValue("World"); // calls the printValue method and passes in the argument "World"
    }
}