/**
 * This is a complex class that implements multiple interfaces and uses various
 * Java features such as generics, lambda expressions, and exception handling.
 */
public class ComplexClass<T> implements InterfaceA, InterfaceB {
    // Class variables
    private T data;
    private int counter;

    /**
     * Default constructor that initializes the class variables
     */
    public ComplexClass() {
        data = null;
        counter = 0;
    }

    /**
     * Constructor that takes in a parameter and sets it as the value for the
     * class variable 'data'
     * 
     * @param data the value to be assigned to the class variable 'data'
     */
    public ComplexClass(T data) {
        this.data = data;
        counter = 0;
    }

    /**
     * Method that demonstrates the usage of lambda expressions to perform a
     * specific operation on the class variable 'data'
     * 
     * @param operation takes in a lambda expression that performs the desired
     *                  operation on the class variable 'data'
     */
    public void performOperation(Consumer<T> operation) {
        operation.accept(data);
        counter++;
    }

    /**
     * Method that demonstrates the usage of generics to return a value of any
     * type based on the type of the class variable 'data'
     * 
     * @return the value of the class variable 'data'
     */
    public T getData() {
        return data;
    }

    /**
     * Method that handles errors by wrapping them in a custom exception and
     * throwing it
     * 
     * @throws CustomException if there is an error while performing the
     *                         operation specified by the given lambda expression
     */
    public void handleErrors() throws CustomException {
        try {
            // Some operation that may throw an error
        } catch (Exception e) {
            throw new CustomException("An error occured while performing the operation.");
        }
    }

    // Below are the methods implemented from the interfaces

    @Override
    public void methodA() {
        // Implementation of methodA
    }

    @Override
    public void methodB() {
        // Implementation of methodB
    }

    // Helper methods that are only accessible within the class

    /**
     * Method that increments the counter variable by the given value
     * 
     * @param value the value to increment the counter variable by
     */
    private void incrementCounter(int value) {
        counter += value;
    }

    /**
     * Method that decrements the counter variable by the given value
     * 
     * @param value the value to decrement the counter variable by
     */
    private void decrementCounter(int value) {
        counter -= value;
    }
}