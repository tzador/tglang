/**
 * This is a complex code snippet in JAVA that showcases various data structures and algorithms.
 * It creates a graph data structure and performs a breadth-first search traversal to find the shortest path between two nodes.
 * The graph is represented as an adjacency list and the search is implemented using a queue.
 */

import java.util.*; // Importing java utility library for data structures and input/output handling.

public class Graph {
    private HashMap<String, ArrayList<String>> adjList; // Initializing an adjacency list to store the graph.
    
    public Graph() { // Constructor to initialize the graph.
        this.adjList = new HashMap<>();
    }
    
    public void addNode(String node) { // Method to add a node to the graph.
        if (!this.adjList.containsKey(node)) { // Check if the node already exists.
            this.adjList.put(node, new ArrayList<>()); // Add node to the adjacency list.
        }
    }
    
    public void addEdge(String node1, String node2) { // Method to add an edge between two nodes.
        if (!this.adjList.containsKey(node1) || !this.adjList.containsKey(node2)) { // Check if the nodes exist in the graph.
            throw new NoSuchElementException();
        }
        ArrayList<String> neighbors1 = this.adjList.get(node1); // Get list of neighbors of node1.
        ArrayList<String> neighbors2 = this.adjList.get(node2); // Get list of neighbors of node2.
        if (!neighbors1.contains(node2)) { // Check if edge already exists.
            neighbors1.add(node2); // Add node2 to the list of neighbors of node1.
        }
        if (!neighbors2.contains(node1)) { // Check if edge already exists.
            neighbors2.add(node1); // Add node1 to the list of neighbors of node2.
        }
    }
    
    public void breadthFirstSearch(String startNode, String endNode) { // Method to perform BFS on the graph.
        if (!this.adjList.containsKey(startNode) || !this.adjList.containsKey(endNode)) { // Check if start and end node exist.
            throw new NoSuchElementException();
        }
        Queue<String> queue = new LinkedList<>(); // Create a queue to store the nodes to be visited.
        HashMap<String, String> parentMap = new HashMap<>(); // Create a map to track the parent of each node.
        HashSet<String> visited = new HashSet<>(); // Create a set to track visited nodes.
        queue.add(startNode); // Add the start node to the queue.
        visited.add(startNode); // Mark the start node as visited.
        parentMap.put(startNode, null); // Set the parent of the start node to be null.
        
        while (!queue.isEmpty()) { // Loop until all nodes are visited.
            String current = queue.remove(); // Get the current node to be visited.
            System.out.println("Visiting node: " + current); // Print statement to show current node being visited.
            if (current.equals(endNode)) { // Check if we have reached the end node.
                break; // End the loop if we have reached the end node.
            }
            for (String neighbor : this.adjList.get(current)) { // Loop through the neighbors of the current node.
                if (!visited.contains(neighbor)) { // Check if the neighbor has not been visited.
                    visited.add(neighbor); // Mark the neighbor as visited.
                    queue.add(neighbor); // Add the neighbor to the queue.
                    parentMap.put(neighbor, current); // Set the parent of the neighbor to be the current node.
                }
            }
        }
        
        // Trace back the path from end node to start node using the parent map.
        String node = endNode;
        ArrayList<String> path = new ArrayList<>();
        while (node != null) {
            path.add(node);
            node = parentMap.get(node);
        }
        Collections.reverse(path); // Reverse the path to print from start node to end node.
        System.out.println("Shortest path from " + startNode + " to " + endNode + ": " + path.toString());
    }
    
    public static void main(String[] args) { // Main method to run the program.
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
        graph.addNode("E");
        graph.addEdge("A", "B");
        graph.addEdge("A", "C");
        graph.addEdge("B", "D");
        graph.addEdge("C", "E");
        graph.addEdge("D", "E");
        
        System.out.println("Graph created successfully!");
        System.out.println("Performing BFS from A to E...");
        graph.breadthFirstSearch("A", "E");
    }
}