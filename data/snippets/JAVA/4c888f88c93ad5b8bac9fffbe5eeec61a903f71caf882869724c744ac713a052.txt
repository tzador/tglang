/**
 * This class represents a generic Tree data structure.
 * It contains a root node and methods for adding, removing and searching for nodes.
 */
public class Tree<T> {

    /**
     * The root node of the tree.
     */
    private Node<T> root;

    /**
     * Constructs an empty tree.
     */
    public Tree() {
        this.root = null;
    }

    /**
     * Adds a new node with the given value to the tree.
     * If the value already exists in the tree, it will not be added.
     *
     * @param value the value to be added
     */
    public void add(T value) {
        // if the tree is empty, set value as root node
        if (this.root == null) {
            this.root = new Node<>(value);
        } else {
            // call recursive add method starting at the root node
            this.add(this.root, value);
        }
    }

    /**
     * Recursive helper method for add.
     * Traverses through the tree to find the correct location to add the new node.
     *
     * @param current the current node being checked
     * @param value   the value to be added
     * @return true if value was added, false if it already exists in the tree
     */
    private boolean add(Node<T> current, T value) {
        // if the value already exists in the tree, return false
        if (current.getData().equals(value)) {
            return false;
        }
        // find the correct location to add the new node
        int comparison = value.compareTo(current.getData());
        // if value is less than current node, add to left subtree
        if (comparison < 0) {
            if (current.getLeft() == null) {
                // if left subtree is empty, add new node
                current.setLeft(new Node<>(value));
                return true;
            } else {
                // else recursively call add on left subtree
                return this.add(current.getLeft(), value);
            }
        } else {
            // if value is greater than current node, add to right subtree
            if (current.getRight() == null) {
                // if right subtree is empty, add new node
                current.setRight(new Node<>(value));
                return true;
            } else {
                // else recursively call add on right subtree
                return this.add(current.getRight(), value);
            }
        }
    }

    /**
     * Removes the node with the given value from the tree.
     *
     * @param value the value to be removed
     * @return true if the value was removed, false if it does not exist in the tree
     */
    public boolean remove(T value) {
        // if tree is empty, value does not exist in tree
        if (this.root == null) {
            return false;
        } else {
            return this.remove(this.root, null, value);
        }
    }

    /**
     * Recursive helper method for remove.
     * Traverses through the tree to find the node with the given value and removes it.
     *
     * @param current  the current node being checked
     * @param parent   the parent of the current node
     * @param value    the value to be removed
     * @return true if the value was removed, false if it does not exist in the tree
     */
    private boolean remove(Node<T> current, Node<T> parent, T value) {
        // if value is less than current node, search left subtree
        if (value.compareTo(current.getData()) < 0) {
            if (current.getLeft() != null) {
                // recursively call remove on left subtree
                return this.remove(current.getLeft(), current, value);
            } else {
                // value does not exist in tree
                return false;
            }
        } else if (value.compareTo(current.getData()) > 0) {
            // if value is greater than current node, search right subtree
            if (current.getRight() != null) {
                // recursively call remove on right subtree
                return this.remove(current.getRight(), current, value);
            } else {
                // value does not exist in tree
                return false;
            }
        } else {
            // value has been found, remove the node
            if (current.getLeft() != null && current.getRight() != null) {
                // if the node has two children, replace it with the rightmost node's value
                Node<T> rightmost = current.getRight();
                while (rightmost.getLeft() != null) {
                    rightmost = rightmost.getLeft();
                }
                current.setData(rightmost.getData());
                // recursively call remove on rightmost node's subtree to remove the duplicate value
                return this.remove(rightmost, current, rightmost.getData());
            } else if (parent.getLeft() == current) {
                // if the node has one child, replace it with its child node
                parent.setLeft(current.getLeft() != null ? current.getLeft() : current.getRight());
                return true;
            } else if (parent.getRight() == current) {
                parent.setRight(current.getLeft() != null ? current.getLeft() : current.getRight());
                return true;
            }
        }
        return false;
    }

    /**
     * Search for a node with the given value in the tree.
     *
     * @param value the value to be searched for
     * @return true if the value exists in the tree, false if it does not exist
     */
    public boolean search(T value) {
        // if tree is empty, value does not exist in tree
        if (this.root == null) {
            return false;
        }
        // call recursive search method starting at the root node
        return this.search(this.root, value);
    }

    /**
     * Recursive helper method for search.
     * Traverses through the tree to find the node with the given value.
     *
     * @param current the current node being checked
     * @param value   the value to be searched for
     * @return true if the value exists in the tree, false if it does not exist
     */
    private boolean search(Node<T> current, T value) {
        // if value is found, return true
        if (current.getData().equals(value)) {
            return true;
        }
        // find the correct location to search for the value
        int comparison = value.compareTo(current.getData());
        // if value is less than current node, search left subtree
        if (comparison < 0) {
            if (current.getLeft() == null) {
                // value does not exist in tree
                return false;
            } else {
                // recursively call search on left subtree
                return this.search(current.getLeft(), value);
            }
        } else {
            // if value is greater than current node, search right subtree
            if (current.getRight() == null) {
                // value does not exist in tree
                return false;
            } else {
                // recursively call search on right subtree
                return this.search(current.getRight(), value);
            }
        }
    }
    
    /**
     * Node class for the tree.
     * Contains the data and references to its left and right children.
     * @param <T> the type of data stored in the node
     */
    private static class Node<T> {

        /**
         * The data stored in the node.
         */
        private T data;

        /**
         * The left child of the node.
         */
        private Node<T> left;

        /**
         * The right child of the node.
         */
        private Node<T> right;

        /**
         * Constructs a node with the given data.
         * @param data the data to be stored in the node
         */
        public Node(T data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }

        /**
         * Getter method for the data of the node.
         * @return the data of the node
         */
        public T getData() {
            return data;
        }

        /**
         * Setter method for the data of the node.
         * @param data the data to be set
         */
        public void setData(T data) {
            this.data = data;
        }

        /**
         * Getter method for the left child of the node.
         * @return the left child of the node
         */
        public Node<T> getLeft() {
            return left;
        }

        /**
         * Setter method for the left child of the node.
         * @param left the left child to be set
         */
        public void setLeft(Node<T> left) {
            this.left = left;
        }

        /**
         * Getter method for the right child of the node.
         * @return the right child of the node
         */
        public Node<T> getRight() {
            return right;
        }

        /**
         * Setter method for the right child of the node.
         * @param right the right child to be set
         */
        public void setRight(Node<T> right) {
            this.right = right;
        }
    }
}