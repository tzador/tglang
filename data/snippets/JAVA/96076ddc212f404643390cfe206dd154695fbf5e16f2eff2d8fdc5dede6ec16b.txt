// This is a Java program to find the longest common subsequence of two arrays

import java.util.*;

public class LongestCommonSubsequence {

    public static void main(String[] args) {
        // Define two arrays as input
        int[] array1 = {3, 6, 7, 9, 11, 13, 14};
        int[] array2 = {1, 4, 6, 7, 10, 11, 15};

        // Define an empty 2D array to store the lengths of common subsequences
        int[][] lcs = new int[array1.length + 1][array2.length + 1];

        // Loop through the arrays to find the length of the longest common subsequence
        for (int i = 0; i <= array1.length; i++) {
            for (int j = 0; j <= array2.length; j++) {

                // If either array is empty, common subsequence length is 0
                if (i == 0 || j == 0) {
                    lcs[i][j] = 0;
                }

                // If the current element from both arrays match, add 1 to the previous common subsequence length
                else if (array1[i - 1] == array2[j - 1]) {
                    lcs[i][j] = lcs[i - 1][j - 1] + 1;
                }

                // If the current element from both arrays do not match, take the maximum of previous common subsequence lengths
                else {
                    lcs[i][j] = Math.max(lcs[i - 1][j], lcs[i][j - 1]);
                }
            }
        }

        // Store the longest common subsequence length in a variable
        int longestCommonSubsequenceLength = lcs[array1.length][array2.length];

        // Define an empty array to store the longest common subsequence
        int[] longestCommonSubsequence = new int[longestCommonSubsequenceLength];

        // Start from the last element in the 2D array and backtrack to find the longest common subsequence
        int i = array1.length, j = array2.length;
        while (i > 0 && j > 0) {
            // If the current elements from both arrays match, add it to the longest common subsequence array
            if (array1[i - 1] == array2[j - 1]) {
                longestCommonSubsequence[longestCommonSubsequenceLength - 1] = array1[i - 1];
                longestCommonSubsequenceLength--;
                i--;
                j--;
            }
            // If the current elements from both arrays do not match, move in the direction of the larger subsequence
            else if (lcs[i - 1][j] > lcs[i][j - 1]) {
                i--;
            } else {
                j--;
            }
        }

        // Print the longest common subsequence
        System.out.println("The longest common subsequence is: ");
        for (int k = 0; k < longestCommonSubsequence.length; k++) {
            System.out.print(longestCommonSubsequence[k] + " ");
        }
    }
}