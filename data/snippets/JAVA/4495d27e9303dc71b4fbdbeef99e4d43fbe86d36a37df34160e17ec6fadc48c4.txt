/**
 * This is a complex Java code snippet.
 * It contains several complex algorithms and data structures.
 * The purpose of this code is to showcase the power and complexity of Java.
 */

// Import libraries for data structures and algorithms
import java.util.*;
import java.math.*;

// Declare class
public class ComplexJavaSnippet {

    // Declare main method
    public static void main(String[] args) {

        // Initialize HashMap
        HashMap<String, Integer> map = new HashMap<>();

        // Add key-value pairs to HashMap
        map.put("apple", 5);
        map.put("banana", 12);
        map.put("orange", 8);
        map.put("grapes", 20);

        // Sort HashMap by values in descending order
        LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
        
        // Create list of entries from HashMap
        List<Map.Entry<String, Integer>> list = new LinkedList<>(map.entrySet());

        // Sort list by values in descending order
        Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                return (o2.getValue()).compareTo(o1.getValue());
            }
        });

        // Add sorted entries to new LinkedHashMap
        for (Map.Entry<String, Integer> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }

        // Print HashMap in sorted order
        System.out.println("Sorted HashMap:");
        for (String key : sortedMap.keySet()) {
            System.out.println(key + ": " + sortedMap.get(key));
        }

        // Declare and initialize array of strings
        String[] words = {"tree", "house", "apple", "pizza", "book", "cat"};

        // Sort array using Arrays.sort() method
        Arrays.sort(words);

        // Print sorted array
        System.out.println("\nSorted Array:");
        for (String word : words) {
            System.out.println(word);
        }

        // Declare and initialize array of integers
        int[] numbers = {10, 25, 7, 45, 64, 1};

        // Use quicksort algorithm to sort array
        quicksort(numbers, 0, numbers.length-1);

        // Print sorted array
        System.out.println("\nSorted Array:");
        for (int number : numbers) {
            System.out.println(number);
        }

        // Declare and initialize BigInteger values
        BigInteger num1 = BigInteger.valueOf(123456789);
        BigInteger num2 = BigInteger.valueOf(987654321);

        // Calculate sum of two BigInteger values
        BigInteger sum = num1.add(num2);

        // Print sum
        System.out.println("\nSum of two BigInteger values:");
        System.out.println(sum);

    }

    // Quicksort algorithm for integers
    public static void quicksort(int[] arr, int low, int high) {
        if (low < high) {
            int pivot = partition(arr, low, high);
            quicksort(arr, low, pivot-1);
            quicksort(arr, pivot+1, high);
        }
    }

    // Partition method for quicksort algorithm
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;
        return i+1;
    }
}