/**
 * This class represents a binary search tree.
 * It supports insertion, deletion, and search operations.
 * 
 * @param <T> the type of values stored in the tree
 */
public class BinarySearchTree<T extends Comparable<T>> {

    /**
     * This class represents a node in the binary search tree.
     */
    private class Node {
        T value;
        Node left;
        Node right;

        /**
         * Constructs a node with the given value.
         *
         * @param value the value of the node
         */
        Node(T value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }
    }

    private Node root; // the root of the tree

    /**
     * Constructs an empty binary search tree.
     */
    public BinarySearchTree() {
        this.root = null;
    }

    /**
     * Inserts a value into the binary search tree.
     *
     * @param value the value to be inserted
     */
    public void insert(T value) {
        this.root = insertRec(this.root, value);
    }

    /**
     * Helper method for insert method.
     * Recursively inserts the value into the tree.
     * 
     * @param node the current node being checked
     * @param value the value to be inserted
     * @return the updated node
     */
    private Node insertRec(Node node, T value) {
        if (node == null) {
            node = new Node(value);
        } else if (value.compareTo(node.value) < 0) {
            node.left = insertRec(node.left, value);
        } else {
            node.right = insertRec(node.right, value);
        }
        return node;
    }

    /**
     * Deletes a value from the binary search tree.
     *
     * @param value the value to be deleted
     */
    public void delete(T value) {
        this.root = deleteRec(this.root, value);
    }

    /**
     * Helper method for delete method.
     * Recursively deletes the value from the tree.
     * 
     * @param node the current node being checked
     * @param value the value to be deleted
     * @return the updated node
     */
    private Node deleteRec(Node node, T value) {
        if (node == null) {
            return null;
        } else if (value.compareTo(node.value) < 0) {
            node.left = deleteRec(node.left, value);
        } else if (value.compareTo(node.value) > 0) {
            node.right = deleteRec(node.right, value);
        } else {
            if (node.left == null && node.right == null) {
                node = null;
            } else if (node.left == null) {
                node = node.right;
            } else if (node.right == null) {
                node = node.left;
            } else {
                // find the minimum value in the right subtree
                Node minNode = findMinNode(node.right);
                // set the value of the current node to the minimum value
                node.value = minNode.value;
                // delete the minimum node from the tree
                node.right = deleteRec(node.right, minNode.value);
            }
        }
        return node;
    }

    /**
     * Searches for a value in the binary search tree.
     *
     * @param value the value to be searched for
     * @return true if the value is found, false otherwise
     */
    public boolean search(T value) {
        return searchRec(this.root, value);
    }

    /**
     * Recursively searches for a value in the tree.
     * 
     * @param node the current node being checked
     * @param value the value to be searched for
     * @return true if the value is found, false otherwise
     */
    private boolean searchRec(Node node, T value) {
        if (node == null) {
            return false;
        } else if (value.compareTo(node.value) < 0) {
            return searchRec(node.left, value);
        } else if (value.compareTo(node.value) > 0) {
            return searchRec(node.right, value);
        } else {
            return true;
        }
    }

    /**
     * Finds the minimum node in the given subtree.
     * @param node the root of the subtree
     * @return the minimum node
     */
    private Node findMinNode(Node node) {
        if (node.left == null) {
            return node;
        } else {
            return findMinNode(node.left);
        }
    }
}