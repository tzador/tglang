/**
 * The following code is an example of a binary search algorithm implementation in Java.
 * 
 * Binary search is a commonly used search algorithm that finds the position of a target value within a sorted array.
 * The algorithm compares the target value to the middle element of the array. If they are equal, the position is returned.
 * If the target value is greater than the middle element, it is searched in the upper half of the array.
 * If the target value is less than the middle element, it is searched in the lower half of the array.
 * This process continues until the target value is found or the entire array has been searched.
 * If the target value is not found, -1 is returned.
 */

// Binary search algorithm function
public int binarySearch(int[] arr, int target) {

    // Set initial values for starting and ending indices
    int start = 0;
    int end = arr.length - 1;

    // Loop until start index becomes greater than end index
    while (start <= end) {

        // Calculate the middle index
        int mid = start + (end - start) / 2;

        // If the target value is found at the middle index, return the position
        if (arr[mid] == target) {
            return mid;
        }

        // If the target value is greater than the middle element, search in the upper half of the array
        else if (arr[mid] < target) {
            start = mid + 1;
        }
        // If the target value is less than the middle element, search in the lower half of the array
        else {
            end = mid - 1;
        }
    }

    // If the target value is not found, return -1
    return -1;
}

// Sample usage of the algorithm
int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};
int target = 5;
int position = binarySearch(arr, target); // Returns 4