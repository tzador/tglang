// This Java program implements quicksort algorithm
// for sorting an array of integers

public class Quicksort {

    // Function to partition the array,
    // takes the rightmost element as pivot
    int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; // Pivot element
        int i = (low - 1); // Index of smaller element

        for (int j = low; j < high; j++) {

            // If current element is smaller than or
            // equal to pivot
            if (arr[j] <= pivot) {

                i++; // increment index of smaller element
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        // Swap arr[i + 1] and arr[high]
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }

    // Function to implement quicksort
    void quicksort(int[] arr, int low, int high) {
        if (low < high) {
            // pi is partitioning index, arr[pi] is now
            // at right place
            int pi = partition(arr, low, high);

            // Recursively sort elements before
            // partition and after partition
            quicksort(arr, low, pi - 1);
            quicksort(arr, pi + 1, high);
        }
    }

    // Driver code to test above
    public static void main(String[] args) {
        int[] arr = { 10, 7, 8, 9, 1, 5 };
        int n = arr.length;

        Quicksort ob = new Quicksort();
        ob.quicksort(arr, 0, n - 1);

        System.out.println("Sorted array:");
        for (int i = 0; i < n; ++i) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}