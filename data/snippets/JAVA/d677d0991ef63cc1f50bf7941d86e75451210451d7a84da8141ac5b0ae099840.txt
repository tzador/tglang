// This custom class defines a generic data structure for a binary tree
public class BinaryTree<T> {
    private BinaryTreeNode<T> root; // root node of the tree
    
    // inner class representing a node in the tree
    private static class BinaryTreeNode<T> {
        public T value; // value stored in the node
        public BinaryTreeNode<T> left; // left child node
        public BinaryTreeNode<T> right; // right child node
        
        // constructor for creating a new node
        public BinaryTreeNode(T value, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
            this.value = value;
            this.left = left;
            this.right = right;
        }
    }
    
    // constructor for creating a new tree with a given root node
    public BinaryTree(BinaryTreeNode<T> root) {
        this.root = root;
    }
    
    // method to insert a new node into the tree
    public void insert(T value) {
        // if tree is empty, create a new root node
        if (root == null) {
            root = new BinaryTreeNode<T>(value, null, null);
            return;
        }
        
        // start from the root node and traverse through the tree to find the correct position for insertion
        BinaryTreeNode<T> current = root;
        while (true) {
            // if value is less than current node's value, go to left child node
            if (value.compareTo(current.value) < 0) {
                // if left child node is null, create a new node and return
                if (current.left == null) {
                    current.left = new BinaryTreeNode<T>(value, null, null);
                    return;
                }
                // otherwise, move to the left child node
                current = current.left;
            }
            // if value is greater than current node's value, go to right child node
            else if (value.compareTo(current.value) > 0) {
                // if right child node is null, create a new node and return
                if (current.right == null) {
                    current.right = new BinaryTreeNode<T>(value, null, null);
                    return;
                }
                // otherwise, move to the right child node
                current = current.right;
            }
            // if value is equal to current node's value, do not insert (as binary trees do not allow duplicates)
            else {
                return;
            }
        }
    }
    
    // method to perform an inorder traversal of the tree and print out the values in order
    public void inorderTraversal(BinaryTreeNode<T> node) {
        if (node != null) {
            inorderTraversal(node.left);
            System.out.print(node.value + " ");
            inorderTraversal(node.right);
        }
    }
    
    // main method to create a new binary tree and insert nodes into it
    public static void main(String[] args) {
        // create a new tree with a root node containing the value 5
        BinaryTree<Integer> tree = new BinaryTree<Integer>(new BinaryTreeNode<Integer>(5, null, null));
        
        // insert more values into the tree
        tree.insert(3);
        tree.insert(7);
        tree.insert(4);
        tree.insert(9);
        tree.insert(1);
        
        // perform an inorder traversal of the tree and print out the values in order
        System.out.println("Inorder Traversal:");
        tree.inorderTraversal(tree.root);
        // Output: Inorder Traversal: 1 3 4 5 7 9
    }
}