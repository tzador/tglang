public class MazeSolver {

    // recursive function to find the path through the maze
    public static boolean solveMaze(int[][] maze, int currentRow, int currentCol, int endRow, int endCol, int[][] solution) {
        // check if current position is the end of the maze
        if (currentRow == endRow && currentCol == endCol) {
            return true;
        }

        // check if the current position is a valid spot in the maze
        if (currentRow < 0 || currentRow >= maze.length || currentCol < 0 || currentCol >= maze[0].length) {
            return false;
        }

        // check if the current position is a wall or has already been visited
        if (maze[currentRow][currentCol] == 1 || solution[currentRow][currentCol] == 1) {
            return false;
        }

        // mark current position as part of solution path
        solution[currentRow][currentCol] = 1;

        // check for path in all four directions (up, down, left, right)
        if (solveMaze(maze, currentRow - 1, currentCol, endRow, endCol, solution)  // up
                || solveMaze(maze, currentRow + 1, currentCol, endRow, endCol, solution)  // down
                || solveMaze(maze, currentRow, currentCol - 1, endRow, endCol, solution)  // left
                || solveMaze(maze, currentRow, currentCol + 1, endRow, endCol, solution)) {  // right
            return true;
        }

        // if no solution found, backtrack and mark current position as visited
        solution[currentRow][currentCol] = 0;
        return false;
    }

    public static void main(String[] args) {
        // the maze is represented by a 2D array, with 0 representing an open space and 1 representing a wall
        int[][] maze = {{0, 0, 1, 0, 0, 0},
                        {0, 0, 1, 1, 0, 1},
                        {0, 0, 0, 1, 1, 0},
                        {1, 1, 0, 0, 0, 0},
                        {1, 1, 0, 1, 1, 0},
                        {0, 0, 0, 0, 0, 0}};

        // the solution for the maze will be stored in a separate 2D array
        int[][] solution = new int[maze.length][maze[0].length];

        // set starting and ending positions
        int startRow = 0;
        int startCol = 0;
        int endRow = maze.length - 1;
        int endCol = maze[0].length - 1;

        // solve the maze using the recursive function
        if (solveMaze(maze, startRow, startCol, endRow, endCol, solution)) {
            // print the solution path
            System.out.println("Solution found:");
            for (int i=0; i<solution.length; i++) {
                for (int j=0; j<solution[0].length; j++) {
                    System.out.print(solution[i][j] + " ");
                }
                System.out.println();
            }
        } else {
            System.out.println("No solution found.");
        }
    }
}