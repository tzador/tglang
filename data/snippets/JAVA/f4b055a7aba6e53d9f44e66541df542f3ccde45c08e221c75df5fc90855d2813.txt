/**
 * This is a Java program that implements a queue data structure using a linked list.
 */
public class Queue {

    /**
     * This inner class represents a node in the linked list.
     */
    private class Node {
        private int data;
        private Node next;

        /**
         * Constructor for Node class
         * @param data data to be stored in the node
         */
        public Node(int data){
            this.data = data;
            this.next = null;
        }
    }

    private Node front; // front of the queue
    private Node rear; // rear of the queue
    private int size; // size of the queue

    /**
     * Constructor for Queue class
     * Initializes front, rear and size
     */
    public Queue(){
        this.front = null;
        this.rear = null;
        this.size = 0;
    }

    /**
     * Method to add an element to the rear of the queue
     * @param data the data to be added to the queue
     */
    public void enqueue(int data){

        Node node = new Node(data); // create new node
        if(rear == null){ // if queue is empty
            front = rear = node; // set both front and rear to new node
        }
        else{
            rear.next = node; // add new node to the end of the list
            rear = node; // update rear to point to the new node
        }
        size++; // increment size
    }

    /**
     * Method to remove an element from the front of the queue and return it
     * @return the removed element from the front of the queue
     */
    public int dequeue(){
        if(front == null){ // if queue is empty
            throw new NoSuchElementException("Queue is empty");
        }
        int element = front.data; // save front element
        front = front.next; // update front to point to the next element
        if(front == null){ // if there are no more elements in the queue
            rear = null; // update rear to be null as well
        }
        size--; // decrement size
        return element; // return removed element
    }

    /**
     * Method to check if the queue is empty
     * @return true if queue is empty, false otherwise
     */
    public boolean isEmpty(){
        return front == null;
    }

    /**
     * Method to get the size of the queue
     * @return size of the queue
     */
    public int getSize(){
        return size;
    }

    /**
     * Method to print the elements of the queue in order
     */
    public void print(){
        if(front == null){ // if queue is empty
            System.out.println("Queue is empty");
        }
        else{
            Node current = front;
            while(current != null){ // traverse through the queue
                System.out.print(current.data + " "); // print current element
                current = current.next; // move to the next element
            }
        }
    }
}

// Example usage:
// Queue queue = new Queue();
// queue.enqueue(5); // add element 5
// queue.enqueue(10); // add element 10
// queue.enqueue(15); // add element 15
// queue.print(); // prints 5 10 15
// queue.dequeue(); // removes and returns 5
// queue.print(); // prints 10 15
// queue.getSize(); // returns 2