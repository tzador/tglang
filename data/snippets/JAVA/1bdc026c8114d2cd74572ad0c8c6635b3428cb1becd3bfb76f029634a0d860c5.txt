/**
 * This class represents a binary tree data structure.
 * It has methods for creating, searching, and traversing the tree.
 */
public class BinaryTree {
    
    private Node root; // stores the root node of the tree
    
    public BinaryTree(Node root) {
        this.root = root;
    }
    
    /**
     * This method adds a new node to the tree at the specified position.
     * If the position is already occupied, it will replace the existing node.
     * @param value the value to be stored in the new node
     * @param position the position of the new node in the tree
     */
    public void addNode(int value, String position) {
        Node newNode = new Node(value);
        if (position.equals("left")) {
            root.setLeft(newNode);
        } else if (position.equals("right")) {
            root.setRight(newNode);
        }
    }
    
    /**
     * This method searches the tree for a given value.
     * If the value is found, it will return the node containing that value.
     * If the value is not found, it will return null.
     * @param value the value to be searched for
     * @return the node containing the value, or null if not found
     */
    public Node search(int value) {
        return searchHelper(root, value);
    }
    
    /**
     * Helper method for the search method.
     * @param current the current node being checked
     * @param value the value being searched for
     * @return the node containing the value, or null if not found
     */
    private Node searchHelper(Node current, int value) {
        if (current == null) {
            return null;
        }
        if (current.getValue() == value) {
            return current;
        }
        Node left = searchHelper(current.getLeft(), value);
        Node right = searchHelper(current.getRight(), value);
        if (left != null) {
            return left;
        } else if (right != null) {
            return right;
        } else {
            return null;
        }
    }
    
    /**
     * This method performs an in-order traversal of the tree.
     * This means it will start at the left child, then the parent, then the right child.
     */
    public void inOrderTraversal() {
        inOrderTraversalHelper(root);
    }
    
    /**
     * Helper method for the inOrderTraversal method.
     * @param current the current node being visited
     */
    private void inOrderTraversalHelper(Node current) {
        if (current != null) {
            inOrderTraversalHelper(current.getLeft());
            System.out.println(current.getValue());
            inOrderTraversalHelper(current.getRight());
        }
    }
    
    /**
     * This method performs a pre-order traversal of the tree.
     * This means it will start at the parent, then the left child, then the right child.
     */
    public void preOrderTraversal() {
        preOrderTraversalHelper(root);
    }
    
    /**
     * Helper method for the preOrderTraversal method.
     * @param current the current node being visited
     */
    private void preOrderTraversalHelper(Node current) {
        if (current != null) {
            System.out.println(current.getValue());
            preOrderTraversalHelper(current.getLeft());
            preOrderTraversalHelper(current.getRight());
        }
    }
    
    /**
     * This method performs a post-order traversal of the tree.
     * This means it will start at the left child, then the right child, then the parent.
     */
    public void postOrderTraversal() {
        postOrderTraversalHelper(root);
    }
    
    /**
     * Helper method for the postOrderTraversal method.
     * @param current the current node being visited
     */
    private void postOrderTraversalHelper(Node current) {
        if (current != null) {
            postOrderTraversalHelper(current.getLeft());
            postOrderTraversalHelper(current.getRight());
            System.out.println(current.getValue());
        }
    }
    
    /**
     * This class represents a node in the binary tree.
     * It stores an integer value and references to its left and right child nodes.
     */
    public class Node {
        
        private int value; // stores the value of the node
        private Node left; // stores a reference to the left child node
        private Node right; // stores a reference to the right child node
        
        public Node(int value) {
            this.value = value;
            left = null;
            right = null;
        }
        
        /**
         * Getter method for the value of the node.
         * @return the value of the node
         */
        public int getValue() {
            return value;
        }
        
        /**
         * Setter method for the value of the node.
         * @param value the value to be set for the node
         */
        public void setValue(int value) {
            this.value = value;
        }
        
        /**
         * Getter method for the left child node.
         * @return the left child node
         */
        public Node getLeft() {
            return left;
        }
        
        /**
         * Setter method for the left child node.
         * @param left the node to be set as the left child
         */
        public void setLeft(Node left) {
            this.left = left;
        }
        
        /**
         * Getter method for the right child node.
         * @return the right child node
         */
        public Node getRight() {
            return right;
        }
        
        /**
         * Setter method for the right child node.
         * @param right the node to be set as the right child
         */
        public void setRight(Node right) {
            this.right = right;
        }
    }
}