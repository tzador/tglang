/**
 * This class represents a graph data structure using an adjacency list representation.
 * It supports various operations such as adding, removing, and searching for vertices and edges.
 */
public class Graph {

    // the adjacency list of the graph
    private HashMap<Integer, LinkedList<Integer>> adjacencyList;

    // the total number of vertices in the graph
    private int numVertices;

    /**
     * This method creates a new empty graph with no vertices or edges.
     */
    public Graph() {
        adjacencyList = new HashMap<>();
        numVertices = 0;
    }

    /**
     * This method adds a vertex to the graph with the given value.
     * @param value the value of the vertex to be added
     */
    public void addVertex(int value) {
        // create a new linked list to represent the edges of the new vertex
        LinkedList<Integer> edges = new LinkedList<>();

        // add the new vertex and its corresponding edges to the adjacency list
        adjacencyList.put(value, edges);

        // increase the total number of vertices
        numVertices++;
    }

    /**
     * This method adds an edge between two vertices in the graph.
     * @param vertex1 the starting vertex of the edge
     * @param vertex2 the ending vertex of the edge
     */
    public void addEdge(int vertex1, int vertex2) {
        // check if both vertices exist in the graph
        if (adjacencyList.containsKey(vertex1) && adjacencyList.containsKey(vertex2)) {
            // add the edge from vertex1 to vertex2
            LinkedList<Integer> edges1 = adjacencyList.get(vertex1);
            edges1.add(vertex2);

            // add the edge from vertex2 to vertex1 (considering the graph to be undirected)
            LinkedList<Integer> edges2 = adjacencyList.get(vertex2);
            edges2.add(vertex1);
        } else {
            System.out.println("One or more of the given vertices do not exist in the graph.");
        }
    }

    /**
     * This method removes a vertex from the graph with the given value.
     * @param value the value of the vertex to be removed
     */
    public void removeVertex(int value) {
        // check if the vertex exists in the graph
        if (adjacencyList.containsKey(value)) {
            // remove the vertex and its corresponding edges from the adjacency list
            adjacencyList.remove(value);

            // remove any edges from other vertices that point to this vertex
            for (LinkedList<Integer> edges: adjacencyList.values()) {
                edges.removeFirstOccurrence(value);
            }

            // decrease the total number of vertices
            numVertices--;
        } else {
            System.out.println("The given vertex does not exist in the graph.");
        }
    }

    /**
     * This method removes an edge between two vertices in the graph.
     * @param vertex1 the starting vertex of the edge
     * @param vertex2 the ending vertex of the edge
     */
    public void removeEdge(int vertex1, int vertex2) {
        // check if both vertices exist in the graph
        if (adjacencyList.containsKey(vertex1) && adjacencyList.containsKey(vertex2)) {
            // remove the edge from vertex1 to vertex2
            LinkedList<Integer> edges1 = adjacencyList.get(vertex1);
            edges1.removeFirstOccurrence(vertex2);

            // remove the edge from vertex2 to vertex1 (considering the graph to be undirected)
            LinkedList<Integer> edges2 = adjacencyList.get(vertex2);
            edges2.removeFirstOccurrence(vertex1);
        } else {
            System.out.println("One or more of the given vertices do not exist in the graph.");
        }
    }

    /**
     * This method checks if the given vertex is present in the graph.
     * @param value the value of the vertex to be checked
     * @return true if the vertex exists in the graph, false otherwise
     */
    public boolean containsVertex(int value) {
        return adjacencyList.containsKey(value);
    }

    /**
     * This method checks if an edge exists between two vertices in the graph.
     * @param vertex1 the starting vertex of the edge
     * @param vertex2 the ending vertex of the edge
     * @return true if an edge exists between the two vertices, false otherwise
     */
    public boolean containsEdge(int vertex1, int vertex2) {
        // check if both vertices exist in the graph
        if (adjacencyList.containsKey(vertex1) && adjacencyList.containsKey(vertex2)) {
            // check if the edge exists from vertex1 to vertex2
            LinkedList<Integer> edges1 = adjacencyList.get(vertex1);
            if (edges1.contains(vertex2)) {
                return true;
            }

            // check if the edge exists from vertex2 to vertex1 (considering the graph to be undirected)
            LinkedList<Integer> edges2 = adjacencyList.get(vertex2);
            if (edges2.contains(vertex1)) {
                return true;
            }
        }
        return false;
    }
}