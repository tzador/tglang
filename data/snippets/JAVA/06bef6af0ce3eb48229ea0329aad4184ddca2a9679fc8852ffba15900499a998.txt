/**
 * This class represents a binary search tree data structure.
 * It supports insertion, deletion, and search operations.
 * The nodes in the tree are sorted in ascending order,
 * with the left child being smaller than the parent,
 * and the right child being larger than the parent.
 */
public class BinarySearchTree {

    // Define the root node of the tree
    private TreeNode root;

    /**
     * This method inserts a new node into the binary search tree,
     * maintaining the sorted order of the tree.
     * @param key The value of the new node to be inserted
     */
    public void insert(int key) {
        // If tree is empty, set the new node as the root
        if (root == null) {
            root = new TreeNode(key);
            return;
        }

        // Traverse the tree to find the appropriate location for insertion
        TreeNode current = root;
        while (true) {
            // If the key is smaller than the current node,
            // go to the left child if available, or insert the new node there
            if (key < current.getValue()) {
                if (current.getLeftChild() == null) {
                    current.setLeftChild(new TreeNode(key));
                    return;
                } else {
                    current = current.getLeftChild();
                }
            }
            // If the key is larger than the current node,
            // go to the right child if available, or insert the new node there
            else if (key > current.getValue()) {
                if (current.getRightChild() == null) {
                    current.setRightChild(new TreeNode(key));
                    return;
                } else {
                    current = current.getRightChild();
                }
            }
            // If the key is already present, do not insert and break out of the loop
            else {
                break;
            }
        }
    }

    /**
     * This method deletes a specified node from the binary search tree.
     * @param key The value of the node to be deleted
     */
    public void delete(int key) {
        // If tree is empty, do nothing
        if (root == null) {
            return;
        }

        // Find the node to be deleted
        TreeNode current = root;
        TreeNode parent = null;
        boolean isLeftChild = false;
        while (current != null) {
            // If the key is smaller than the current node,
            // go to the left child if available, or break if not found
            if (key < current.getValue()) {
                parent = current;
                current = current.getLeftChild();
                isLeftChild = true;
            }
            // If the key is larger than the current node,
            // go to the right child if available, or break if not found
            else if (key > current.getValue()) {
                parent = current;
                current = current.getRightChild();
                isLeftChild = false;
            }
            // If the key is found, break out of the loop
            else {
                break;
            }
        }

        // If the key is not found, do nothing
        if (current == null) {
            return;
        }

        // If the node to be deleted has no children, simply delete it and update the parent node's child reference
        if (current.getLeftChild() == null && current.getRightChild() == null) {
            if (current == root) {
                root = null;
            } else if (isLeftChild) {
                parent.setLeftChild(null);
            } else {
                parent.setRightChild(null);
            }
        }
        // If the node to be deleted has only one child, replace it with its child and update parent node's child reference
        else if (current.getLeftChild() == null) {
            if (current == root) {
                root = current.getRightChild();
            } else if (isLeftChild) {
                parent.setLeftChild(current.getRightChild());
            } else {
                parent.setRightChild(current.getRightChild());
            }
        } else if (current.getRightChild() == null) {
            if (current == root) {
                root = current.getLeftChild();
            } else if (isLeftChild) {
                parent.setLeftChild(current.getLeftChild());
            } else {
                parent.setRightChild(current.getLeftChild());
            }
        }
        // If the node to be deleted has two children, replace it with its successor (smallest node in its right subtree)
        // and delete the successor
        else {
            TreeNode successor = findSuccessor(current);
            successor.setLeftChild(current.getLeftChild());
            if (current == root) {
                root = successor;
            } else if (isLeftChild) {
                parent.setLeftChild(successor);
            } else {
                parent.setRightChild(successor);
            }
        }
    }

    /**
     * This method searches for a node with the specified value in the binary search tree.
     * @param key The value to search for
     * @return The node with the specified value, or null if not found
     */
    public TreeNode search(int key) {
        // If tree is empty, return null
        if (root == null) {
            return null;
        }

        // Traverse the tree to find the specified value
        TreeNode current = root;
        while (current != null) {
            // If value is smaller than the current node's value,
            // go to the left child if available, or break if not found
            if (key < current.getValue()) {
                current = current.getLeftChild();
            }
            // If value is larger than the current node's value,
            // go to the right child if available, or break if not found
            else if (key > current.getValue()) {
                current = current.getRightChild();
            }
            // If value is found, return the node
            else {
                return current;
            }
        }
        // If value not found, return null
        return null;
    }

    /**
     * This method finds the successor of a given node.
     * @param current The node whose successor needs to be found
     * @return The successor of the node
     */
    private TreeNode findSuccessor(TreeNode current) {
        // Initialize a temp node as the current node's right child
        TreeNode temp = current.getRightChild();
        // Initialize a parent node to track the parent of the temp node
        TreeNode parent = current;

        // Loop until we reach the smallest node in the subtree (which will be the successor)
        while (temp.getLeftChild() != null) {
            parent = temp;
            temp = temp.getLeftChild();
        }

        // If the successor is not the current node's right child,
        // update the references to remove the successor from its current position
        if (temp != current.getRightChild()) {
            parent.setLeftChild(temp.getRightChild());
            temp.setRightChild(current.getRightChild());
        }
        return temp;
    }
}