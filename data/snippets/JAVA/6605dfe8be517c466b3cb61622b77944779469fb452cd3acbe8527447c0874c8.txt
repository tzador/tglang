// A class representing a binary search tree
class BinarySearchTree {
    // A private inner class representing a node in the tree
    private class Node {
        int value; // value held by the node
        Node left; // left child of the node
        Node right; // right child of the node

        // Constructor to initialize a node with a given value
        Node(int value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }
    }

    private Node root; // root node of the tree

    // Method to insert a new value into the tree
    public void insert(int value) {
        // If the tree is empty, set the new value as the root
        if (root == null) {
            root = new Node(value);
        } else {
            // Recursive method to find and insert the value at the correct position
            insertNode(root, value);
        }
    }

    // Helper method to recursively insert a new value at the correct position
    private void insertNode(Node current, int value) {
        // If the value is smaller than the current node's value, go left
        if (value < current.value) {
            // If the current left child is null, insert the new node
            if (current.left == null) {
                current.left = new Node(value);
            } else {
                // Otherwise, continue traversing down the left subtree
                insertNode(current.left, value);
            }
        }
        // If the value is larger than the current node's value, go right
        else if (value > current.value) {
            // If the current right child is null, insert the new node
            if (current.right == null) {
                current.right = new Node(value);
            } else {
                // Otherwise, continue traversing down the right subtree
                insertNode(current.right, value);
            }
        }
        // If the value is already present in the tree, do not insert again
    }

    // Method to check if a value is present in the tree
    public boolean contains(int value) {
        // If the tree is empty, return false
        if (root == null) {
            return false;
        }
        // Recursive method to find the value in the tree
        return containsNode(root, value);
    }

    // Helper method to recursively check if a value is present in the tree
    private boolean containsNode(Node current, int value) {
        // If the current node's value is equal to the target value, return true
        if (current.value == value) {
            return true;
        }
        // If the value is smaller than the current node's value, go left
        if (value < current.value) {
            // If the current left child is null, return false
            if (current.left == null) {
                return false;
            } else {
                // Otherwise, continue traversing down the left subtree
                return containsNode(current.left, value);
            }
        }
        // If the value is larger than the current node's value, go right
        if (value > current.value) {
            // If the current right child is null, return false
            if (current.right == null) {
                return false;
            } else {
                // Otherwise, continue traversing down the right subtree
                return containsNode(current.right, value);
            }
        }
        // If the value is not present in the tree, return false
        return false;
    }

    // Method to delete a value from the tree
    public void delete(int value) {
        // If the tree is empty, do nothing
        if (root == null) {
            return;
        } else {
            // Recursive method to find and delete the node with the given value
            root = deleteNode(root, value);
        }
    }

    // Helper method to recursively find and delete a node with the given value
    private Node deleteNode(Node current, int value) {
        // If the value is smaller than the current node's value, go left
        if (value < current.value) {
            // If the current left child is null, the value is not present in the tree
            if (current.left == null) {
                System.out.println("Value not found in the tree.");
                return current;
            } else {
                // Otherwise, continue traversing down the left subtree
                current.left = deleteNode(current.left, value);
            }
        }
        // If the value is larger than the current node's value, go right
        else if (value > current.value) {
            // If the current right child is null, the value is not present in the tree
            if (current.right == null) {
                System.out.println("Value not found in the tree.");
                return current;
            } else {
                // Otherwise, continue traversing down the right subtree
                current.right = deleteNode(current.right, value);
            }
        }
        // If the node to be deleted is found
        else {
            // Case 1: If the node has no children, simply delete it
            if (current.left == null && current.right == null) {
                current = null;
            }
            // Case 2: If the node has only one child, replace the current node with its child
            else if (current.left == null) {
                current = current.right;
            }
            // Case 3: If the node has only one child, replace the current node with its child
            else if (current.right == null) {
                current = current.left;
            }
            // Case 4: If the node has two children, find the next smallest node in the right subtree
            // Replace the current node's value with that node's value and delete that node
            // to ensure the tree remains a binary search tree
            else {
                Node smallest = findSmallestNode(current.right);
                current.value = smallest.value;
                current.right = deleteNode(current.right, smallest.value);
            }
        }
        return current;
    }

    // Method to find the smallest node in a subtree
    private Node findSmallestNode(Node node) {
        // The smallest node will always be the leftmost node in the subtree
        while (node.left != null) {
            node = node.left;
        }
        return node;
    }
}

// Driver code to create and use a binary search tree
public class Main {
    public static void main(String[] args) {
        // Create a new binary search tree
        BinarySearchTree bst = new BinarySearchTree();

        // Insert values into the tree
        bst.insert(10);
        bst.insert(5);
        bst.insert(15);
        bst.insert(2);
        bst.insert(7);
        bst.insert(12);

        // Check if a value is present in the tree
        System.out.println("Tree contains value 15: " + bst.contains(15)); // output: Tree contains value 15: true

        // Delete a value from the tree
        bst.delete(15);

        // Check if the value was successfully deleted
        System.out.println("Tree contains value 15 after deletion: " + bst.contains(15)); // output: Tree contains value 15 after deletion: false
    }
}