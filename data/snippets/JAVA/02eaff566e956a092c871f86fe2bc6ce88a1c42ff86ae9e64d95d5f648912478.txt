/**
 * This class represents a binary search tree data structure.
 */
public class BinarySearchTree<T extends Comparable<T>> {
    
    /**
     * This class represents a node in the binary search tree.
     */
    private class Node {
        private T data;
        private Node leftChild;
        private Node rightChild;
        
        public Node(T data) {
            this.data = data;
            leftChild = null;
            rightChild = null;
        }
    }
    
    private Node root;
    
    /**
     * This method inserts a new element into the binary search tree.
     * @param element The element to be inserted.
     */
    public void insert(T element) {
        root = insertHelper(root, element);
    }
    
    /**
     * This helper method recursively inserts a new element into the binary search tree.
     * @param node The current node being checked.
     * @param element The element to be inserted.
     * @return The updated node with the new element inserted.
     */
    private Node insertHelper(Node node, T element) {
        if (node == null) {
            return new Node(element);
        } else if (node.data.compareTo(element) > 0) {
            node.leftChild = insertHelper(node.leftChild, element);
        } else if (node.data.compareTo(element) < 0) {
            node.rightChild = insertHelper(node.rightChild, element);
        }
        return node;
    }
    
    /**
     * This method searches for a specific element in the binary search tree.
     * @param element The element to be searched for.
     * @return True if the element is found, false if it is not.
     */
    public boolean search(T element) {
        return searchHelper(root, element);
    }
    
    /**
     * This helper method recursively searches for a specific element in the binary search tree.
     * @param node The current node being checked.
     * @param element The element to be searched for.
     * @return True if the element is found, false if it is not.
     */
    private boolean searchHelper(Node node, T element) {
        if (node == null) {
            return false;
        } else if (node.data.compareTo(element) == 0) {
            return true;
        } else if (node.data.compareTo(element) > 0) {
            return searchHelper(node.leftChild, element);
        } else {
            return searchHelper(node.rightChild, element);
        }
    }
    
    /**
     * This method prints the elements of the binary search tree in sorted order (in-order traversal).
     */
    public void printInOrder() {
        inOrderTraversal(root);
    }
    
    /**
     * This helper method recursively traverses the binary search tree in sorted order.
     * @param node The current node being checked.
     */
    private void inOrderTraversal(Node node) {
        if (node != null) {
            inOrderTraversal(node.leftChild);
            System.out.println(node.data);
            inOrderTraversal(node.rightChild);
        }
    }
}