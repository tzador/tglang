/**
 * This class represents a Node in a Binary Search Tree
 */
public class Node<T> {
    private T data; // data stored in this Node
    private Node<T> leftChild; // reference to left child Node
    private Node<T> rightChild; // reference to right child Node

    /**
     * Constructor for creating a Node with given data
     * @param data the data to be stored in the Node
     */
    public Node(T data) {
        this.data = data;
        leftChild = null;
        rightChild = null;
    }

    /**
     * Getter method for retrieving the data stored in the Node
     * @return the data stored in the Node
     */
    public T getData() {
        return data;
    }

    /**
     * Setter method for setting the data to be stored in the Node
     * @param data the data to be stored in the Node
     */
    public void setData(T data) {
        this.data = data;
    }

    /**
     * Getter method for retrieving the reference to the left child Node
     * @return the reference to the left child Node
     */
    public Node<T> getLeftChild() {
        return leftChild;
    }

    /**
     * Setter method for setting the left child Node
     * @param leftChild the left child Node to be set
     */
    public void setLeftChild(Node<T> leftChild) {
        this.leftChild = leftChild;
    }

    /**
     * Getter method for retrieving the reference to the right child Node
     * @return the reference to the right child Node
     */
    public Node<T> getRightChild() {
        return rightChild;
    }

    /**
     * Setter method for setting the right child Node
     * @param rightChild the right child Node to be set
     */
    public void setRightChild(Node<T> rightChild) {
        this.rightChild = rightChild;
    }

    /**
     * Method for inserting a new Node as a child of this Node,
     * based on the given data and the rules of a Binary Search Tree
     * @param newData the data to be inserted in the new Node
     */
    public void insert(T newData) {
        // if newData is less than current node's data, insert in left subtree
        if (newData.compareTo(this.data) < 0) { 
            if (leftChild == null) { // if left child is null, insert as new left child
                leftChild = new Node<T>(newData);
            } else { // if left child is not null, recursively call insert on left child
                leftChild.insert(newData);
            }
        } else { // if newData is greater than or equal to current node's data, insert in right subtree
            if (rightChild == null) { // if right child is null, insert as new right child
                rightChild = new Node<T>(newData);
            } else { // if left child is not null, recursively call insert on right child
                rightChild.insert(newData);
            }
        }
    }

    /**
     * Method for checking if this Node contains the given data,
     * based on the rules of a Binary Search Tree
     * @param data the data to be checked for in this Node
     * @return true if the data is found, false otherwise
     */
    public boolean contains(T data) {
        // if given data is equal to current node's data, return true
        if (data.equals(this.data)) {
            return true;
        } else if (data.compareTo(this.data) < 0) { // if given data is less than current node's data, check left subtree
            if (leftChild != null) { // if left child is not null, recursively call contains on left child
                return leftChild.contains(data);
            } else { // if left child is null, given data cannot be found
                return false;
            }
        } else { // if given data is greater than current node's data, check right subtree
            if (rightChild != null) { // if right child is not null, recursively call contains on right child
                return rightChild.contains(data);
            } else { // if right child is null, given data cannot be found
                return false;
            }
        }
    }

    /**
     * Method for traversing this Node and its children in pre-order,
     * and adding the data in each Node to a list
     * @param list the list to store the data in
     */
    public void preOrderTraversal(List<T> list) {
        // add current node's data to list
        list.add(data);
        // recursively call preOrderTraversal on left child if not null
        if (leftChild != null) {
            leftChild.preOrderTraversal(list);
        }
        // recursively call preOrderTraversal on right child if not null
        if (rightChild != null) {
            rightChild.preOrderTraversal(list);
        }
    }

    /**
     * Method for traversing this Node and its children in in-order,
     * and adding the data in each Node to a list
     * @param list the list to store the data in
     */
    public void inOrderTraversal(List<T> list) {
        // recursively call inOrderTraversal on left child if not null
        if (leftChild != null) {
            leftChild.inOrderTraversal(list);
        }
        // add current node's data to list
        list.add(data);
        // recursively call inOrderTraversal on right child if not null
        if (rightChild != null) {
            rightChild.inOrderTraversal(list);
        }
    }

    /**
     * Method for traversing this Node and its children in post-order,
     * and adding the data in each Node to a list
     * @param list the list to store the data in
     */
    public void postOrderTraversal(List<T> list) {
        // recursively call postOrderTraversal on left child if not null
        if (leftChild != null) {
            leftChild.postOrderTraversal(list);
        }
        // recursively call postOrderTraversal on right child if not null
        if (rightChild != null) {
            rightChild.postOrderTraversal(list);
        }
        // add current node's data to list
        list.add(data);
    }
}