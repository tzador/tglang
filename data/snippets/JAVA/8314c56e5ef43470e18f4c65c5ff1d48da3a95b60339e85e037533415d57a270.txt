/**
* This class represents a restaurant
* and its methods for managing reservations
*/
public class Restaurant {

    private String name;
    private int capacity;
    private ArrayList<Reservation> reservations;

    /**
    * Constructor for creating a new Restaurant instance
    * @param name the name of the restaurant
    * @param capacity the maximum number of people the restaurant can hold
    */
    public Restaurant(String name, int capacity) {
        this.name = name;
        this.capacity = capacity;
        this.reservations = new ArrayList<Reservation>();
    }

    /**
    * Method for adding a new reservation to the list of reservations
    * Checks if the restaurant is already at capacity before adding the reservation
    * @param reservation the reservation to be added
    * @return returns true if the reservation was successfully added, false if the restaurant is at capacity
    */
    public boolean addReservation(Reservation reservation) {
        // check if restaurant is at capacity
        if (this.reservations.size() < this.capacity) {
            // add reservation to list of reservations
            this.reservations.add(reservation);
            return true;
        } else {
            return false;
        }
    }

    /**
    * Method for removing a reservation from the list of reservations
    * @param reservation the reservation to be removed
    * @return returns true if the reservation was successfully removed, false if it doesn't exist in the list
    */
    public boolean removeReservation(Reservation reservation) {
        // check if reservation exists in list of reservations
        if (this.reservations.contains(reservation)) {
            // remove reservation from list
            this.reservations.remove(reservation);
            return true;
        } else {
            return false;
        }
    }

    /**
    * Method for checking if a given time slot is available for reservation
    * @param time the specified time for the reservation
    * @return returns true if the time slot is available, false if it is already reserved
    */
    public boolean checkAvailability(String time) {
        // loop through list of reservations
        for (Reservation reservation : this.reservations) {
            // check if reservation time matches specified time
            if (reservation.getTime().equals(time)) {
                // time slot is not available
                return false;
            }
        }
        // time slot is available
        return true;
    }

    /**
    * Method for getting the list of reservations for a particular day
    * @param day the specified day for the reservations
    * @return returns a list of reservations for the given day
    */
    public ArrayList<Reservation> getReservationsByDay(String day) {
        ArrayList<Reservation> reservationsByDay = new ArrayList<Reservation>();
        // loop through list of reservations
        for (Reservation reservation : this.reservations) {
            // check if reservation day matches specified day
            if (reservation.getDay().equals(day)) {
                // add reservation to list
                reservationsByDay.add(reservation);
            }
        }
        // return list of reservations for specified day
        return reservationsByDay;
    }
}