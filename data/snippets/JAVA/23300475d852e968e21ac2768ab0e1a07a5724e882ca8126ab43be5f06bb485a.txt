/**
 * This is a program that calculates the fibonacci sequence up to a specified number.
 * The fibonacci sequence is a sequence where each number is the sum of the two preceding ones, starting with 0 and 1.
 * This implementation uses recursion to efficiently compute the sequence.
 */

/**
 * Function to recursively calculate the fibonacci sequence
 * @param n the number up to which the sequence should be calculated
 * @return the fibonacci sequence up to n
 */
public int[] fibonacciSequence(int n) {
    // Base case: if n is less than or equal to 0, return an empty array
    if(n <= 0) {
        return new int[0];
    }
    
    // Base case: if n is 1, return an array containing just 0
    if(n == 1) {
        return new int[]{0};
    }
    
    // Recursively call the function to calculate the fibonacci sequence up to n-1 and n-2
    int[] sequence = fibonacciSequence(n-1);
    int[] updatedSequence = new int[n];
    
    // Iterate through the sequence and add the last two numbers to compute the new number
    for(int i=0; i < n-2; i++) {
        updatedSequence[i] = sequence[i];
    }
    updatedSequence[n-2] = sequence[n-2] + sequence[n-3];
    updatedSequence[n-1] = sequence[n-2] + sequence[n-1];
    
    // Return the updated sequence
    return updatedSequence;
}

// Example usage: calculating the fibonacci sequence up to 10
int[] sequence = fibonacciSequence(10);
// Output: [0,1,1,2,3,5,8,13,21,34]