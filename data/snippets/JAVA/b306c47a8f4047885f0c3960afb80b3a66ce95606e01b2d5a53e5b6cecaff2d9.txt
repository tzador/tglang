public class BinaryTree<T extends Comparable<T>> {

    // define class variables
    private BinaryNode<T> root;
    private int size;
    
    // constructor
    public BinaryTree() {
        root = null;
        size = 0;
    }
    
    // method to insert new node in the binary tree
    public void insert(T data){
        root = insert(root, data);
        size++;
    }

    // private recursive method to insert a new node
    private BinaryNode<T> insert(BinaryNode<T> currentNode, T data) {

        // if the current node is null, insert data as a new node
        if (currentNode == null)
            return new BinaryNode<>(data);
        
        // if data is less than or equal to current node's data, assign to left child node
        if (data.compareTo(currentNode.getData()) <= 0)
            currentNode.setLeft(insert(currentNode.getLeft(), data));
        
        // if data is greater than current node's data, assign to right child node
        else
            currentNode.setRight(insert(currentNode.getRight(), data));
        
        return currentNode;
    }

    // method to search for a node in the binary tree
    public BinaryNode<T> search(T data) {
        return search(root, data);
    }
    
    // private recursive method to search for a node
    private BinaryNode<T> search(BinaryNode<T> currentNode, T data) {
        
        // base case: if current node is null or if data is found
        if (currentNode == null || data.equals(currentNode.getData()))
            return currentNode;
        
        // if data is less than current node's data, search in left subtree
        if (data.compareTo(currentNode.getData()) < 0)
            return search(currentNode.getLeft(), data);
        
        // if data is greater than current node's data, search in right subtree
        else
            return search(currentNode.getRight(), data);
    }
    
    // method to delete a node from the binary tree
    public boolean delete(T data) {
        BinaryNode<T> parent = root;
        BinaryNode<T> current = root;
        
        // boolean variable to keep track of whether the node is a left child or right child
        boolean isLeftChild = false;
        
        // while loop to search for the node to be deleted
        while (!current.getData().equals(data)) {
            
            // update parent node
            parent = current;
            
            // if data is less than current node's data, search in left subtree
            if (data.compareTo(current.getData()) < 0) {
                current = current.getLeft();
                isLeftChild = true;
            }
            
            // if data is greater than current node's data, search in right subtree
            else {
                current = current.getRight();
                isLeftChild = false;
            }
            
            // if node is not found, return false
            if (current == null)
                return false;
        }
        
        // case 1: if node to be deleted has no children
        if (current.getLeft() == null && current.getRight() == null) {
            
            // if node is root, set root to null
            if (current == root)
                root = null;
            
            // if node is a left child, set parent's left child to null
            else if (isLeftChild)
                parent.setLeft(null);
            
            // if node is a right child, set parent's right child to null
            else
                parent.setRight(null);
        }
        
        // case 2: if node to be deleted has one child (left child)
        else if (current.getRight() == null) {
            
            // if node is root, set root to left child
            if (current == root)
                root = current.getLeft();
            
            // if node is a left child, set parent's left child to current's left child
            else if (isLeftChild)
                parent.setLeft(current.getLeft());
            
            // if node is a right child, set parent's right child to current's left child
            else
                parent.setRight(current.getLeft());
        }
        
        // case 3: if node to be deleted has one child (right child)
        else if (current.getLeft() == null) {
            
            // if node is root, set root to right child
            if (current == root)
                root = current.getRight();
            
            // if node is a left child, set parent's left child to current's right child
            else if (isLeftChild)
                parent.setLeft(current.getRight());
            
            // if node is a right child, set parent's right child to current's right child
            else
                parent.setRight(current.getRight());
        }
        
        // case 4: if node to be deleted has two children
        else {
            
            // find successor (left-most child of right subtree)
            BinaryNode<T> successor = findSuccessor(current);
            
            // set current node's data to successor's data
            current.setData(successor.getData());
            
            // recursively delete successor node
            delete(successor.getData());
        }
        
        // update size and return true
        size--;
        return true;
    }
    
    // private method to find successor of a given node
    private BinaryNode<T> findSuccessor(BinaryNode<T> currentNode) {
        
        // define variables to keep track of successor and its parent
        BinaryNode<T> successor = null;
        BinaryNode<T> successorParent = null;
        
        // start at right child of current node
        BinaryNode<T> current = currentNode.getRight();
        
        // while loop to find left-most child of right subtree (successor)
        while (current != null) {
            successorParent = successor;
            successor = current;
            current = current.getLeft();
        }
        
        // if successor is not right child of current node, update successor's parent's left child
        if (successor != currentNode.getRight())
            successorParent.setLeft(successor.getRight());
        
        // return successor
        return successor;
    }
    
    // method to check if binary tree is empty
    public boolean isEmpty() {
        return size == 0;
    }
    
    // method to get size of binary tree
    public int getSize() {
        return size;
    }
    
    // method to get root node
    public BinaryNode<T> getRoot() {
        return root;
    }
}

// class for creating binary tree nodes
class BinaryNode<T> {

    // define class variables
    private T data;
    private BinaryNode<T> left;
    private BinaryNode<T> right;
    
    // constructor
    public BinaryNode(T data) {
        this.data = data;
        left = null;
        right = null;
    }
    
    // method to get node's data
    public T getData() {
        return data;
    }
    
    // method to set node's data
    public void setData(T data) {
        this.data = data;
    }
    
    // method to get node's left child
    public BinaryNode<T> getLeft() {
        return left;
    }
    
    // method to set node's left child
    public void setLeft(BinaryNode<T> left) {
        this.left = left;
    }
    
    // method to get node's right child
    public BinaryNode<T> getRight() {
        return right;
    }
    
    // method to set node's right child
    public void setRight(BinaryNode<T> right) {
        this.right = right;
    }
}