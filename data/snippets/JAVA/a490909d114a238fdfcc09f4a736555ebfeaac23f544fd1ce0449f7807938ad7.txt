// This code snippet shows a class for implementing a binary search tree
class BinarySearchTree<T extends Comparable<T>> {

    /* Inner class for defining the nodes of the tree */
    private class Node {
        T data; // data stored in the node
        Node left; // left child
        Node right; // right child

        // constructor to create a new node with given data and null children
        Node(T data) {
            this.data = data;
            left = null;
            right = null;
        }
    }

    private Node root; // root of the binary search tree

    // constructor to create an empty tree
    BinarySearchTree() {
        root = null;
    }

    // method to insert a new element into the tree
    public void insert(T data) {
        root = insertData(root, data);
    }

    // helper method to recursively insert new data into the tree
    private Node insertData(Node root, T data) {
        // if tree is empty, create a new root node
        if (root == null) {
            root = new Node(data);
        } else {
            // if new data is less than current node, insert into left subtree
            if (data.compareTo(root.data) < 0) {
                root.left = insertData(root.left, data);
            }
            // if new data is greater than current node, insert into right subtree
            else if (data.compareTo(root.data) > 0) {
                root.right = insertData(root.right, data);
            }
        }
        return root;
    }

    // method to search for an element in the tree
    public boolean search(T data) {
        return searchData(root, data);
    }

    // helper method to recursively search for an element in the tree
    private boolean searchData(Node root, T data) {
        // if tree is empty, element is not present
        if (root == null) {
            return false;
        }
        // if element matches current node, element is present
        if (data.compareTo(root.data) == 0) {
            return true;
        }
        // if element is less than current node, search in left subtree
        else if (data.compareTo(root.data) < 0) {
            return searchData(root.left, data);
        }
        // if element is greater than current node, search in right subtree
        else {
            return searchData(root.right, data);
        }
    }
}