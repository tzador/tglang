/** 
 * This is a program that implements the Caesar Cipher 
 * for encrypting and decrypting a given message 
 */

import java.util.*;

// Define class CaesarCipher
public class CaesarCipher {
    // Define constant for the alphabet
    private static final String ALPHABET = "abcdefghijklmnopqrstuvwxyz";
    
    // Method for encrypting a given message with a given shift value
    public static String encrypt(String message, int shift) {
        // Declare and initialize variables
        String encrypted = ""; // to store the encrypted message
        String lowerCaseMessage = message.toLowerCase(); // convert message to lowercase
        
        // Loop through each character in the message
        for(int i = 0; i < lowerCaseMessage.length(); i++) {
            char currChar = lowerCaseMessage.charAt(i); // get current character
            
            // Check if the current character is a letter
            if(Character.isLetter(currChar)) {
                int index = ALPHABET.indexOf(currChar); // get index of current character in alphabet
                
                // Shift the index by the given shift value
                int newIndex = (index + shift) % 26;
                
                // Get the encrypted character from the shifted index
                char encryptedChar = ALPHABET.charAt(newIndex);
                
                // Append the encrypted character to the encrypted message
                encrypted += encryptedChar;
            }
            else {
                // If the current character is not a letter, append it to the encrypted message as is
                encrypted += currChar;
            }
        }
        
        // Return the encrypted message
        return encrypted;
    }
    
    // Method for decrypting a given message with a given shift value
    public static String decrypt(String message, int shift) {
        // Declare and initialize variables
        String decrypted = ""; // to store the decrypted message
        String lowerCaseMessage = message.toLowerCase(); // convert message to lowercase
        
        // Loop through each character in the message
        for(int i = 0; i < lowerCaseMessage.length(); i++) {
            char currChar = lowerCaseMessage.charAt(i); // get current character
            
            // Check if the current character is a letter
            if(Character.isLetter(currChar)) {
                int index = ALPHABET.indexOf(currChar); // get index of current character in alphabet
                
                // Shift the index backwards by the given shift value
                int newIndex = (index - shift) % 26;
                
                // Handle negative indexes
                if(newIndex < 0) {
                    newIndex = ALPHABET.length() + newIndex;
                }
                
                // Get the decrypted character from the shifted index
                char decryptedChar = ALPHABET.charAt(newIndex);
                
                // Append the decrypted character to the decrypted message
                decrypted += decryptedChar;
            }
            else {
                // If the current character is not a letter, append it to the decrypted message as is
                decrypted += currChar;
            }
        }
        
        // Return the decrypted message
        return decrypted;
    }
    
    // Main method
    public static void main(String[] args) {
        // Create a Scanner object to get user input from the console
        Scanner sc = new Scanner(System.in);
        
        // Prompt the user to enter a message to encrypt
        System.out.println("Enter a message to encrypt: ");
        
        // Get user input and store it in a variable
        String message = sc.nextLine();
        
        // Prompt the user to enter a shift value
        System.out.println("Enter a shift value: ");
        
        // Get user input and store it in a variable
        int shift = sc.nextInt();
        
        // Encrypt the message using the given shift value
        String encryptedMessage = encrypt(message, shift);
        
        // Print the encrypted message
        System.out.println("Encrypted message: " + encryptedMessage);
        
        // Decrypt the encrypted message using the given shift value
        String decryptedMessage = decrypt(encryptedMessage, shift);
        
        // Print the decrypted message
        System.out.println("Decrypted message: " + decryptedMessage);
    }
}