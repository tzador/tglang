/** 
* This class represents a customer.
*/
public class Customer {
    private String name;
    private int age;
    private String address;
    
    /**
    * Constructor for Customer class.
    * @param name The name of the customer.
    * @param age The age of the customer.
    * @param address The address of the customer.
    */
    public Customer(String name, int age, String address) {
        this.name = name;
        this.age = age;
        this.address = address;
    }
    
    /**
    * Gets the name of the customer.
    * @return The name of the customer.
    */
    public String getName() {
        return this.name;
    }
    
    /**
    * Sets the name of the customer.
    * @param name The new name of the customer.
    */
    public void setName(String name) {
        this.name = name;
    }
    
    /**
    * Gets the age of the customer.
    * @return The age of the customer.
    */
    public int getAge() {
        return this.age;
    }
    
    /**
    * Sets the age of the customer.
    * @param age The new age of the customer.
    */
    public void setAge(int age) {
        this.age = age;
    }
    
    /**
    * Gets the address of the customer.
    * @return The address of the customer.
    */
    public String getAddress() {
        return this.address;
    }
    
    /**
    * Sets the address of the customer.
    * @param address The new address of the customer.
    */
    public void setAddress(String address) {
        this.address = address;
    }
    
    /**
    * Prints the details of the customer.
    */
    public void printDetails() {
        System.out.println("Name: " + this.name);
        System.out.println("Age: " + this.age);
        System.out.println("Address: " + this.address);
    }
}

/**
* This class represents a bank account.
*/
public class BankAccount {
    private String accountNumber;
    private double balance;
    private Customer customer;
    
    /**
    * Constructor for BankAccount class.
    * @param accountNumber The account number of the bank account.
    * @param balance The balance of the bank account.
    * @param customer The customer associated with the bank account.
    */
    public BankAccount(String accountNumber, double balance, Customer customer) {
        this.accountNumber = accountNumber;
        this.balance = balance;
        this.customer = customer;
    }
    
    /**
    * Gets the account number of the bank account.
    * @return The account number of the bank account.
    */
    public String getAccountNumber() {
        return this.accountNumber;
    }
    
    /**
    * Sets the account number of the bank account.
    * @param accountNumber The new account number of the bank account.
    */
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }
    
    /**
    * Gets the balance of the bank account.
    * @return The balance of the bank account.
    */
    public double getBalance() {
        return this.balance;
    }
    
    /**
    * Sets the balance of the bank account.
    * @param balance The new balance of the bank account.
    */
    public void setBalance(double balance) {
        this.balance = balance;
    }
    
    /**
    * Gets the customer associated with the bank account.
    * @return The customer associated with the bank account.
    */
    public Customer getCustomer() {
        return this.customer;
    }
    
    /**
    * Sets the customer associated with the bank account.
    * @param customer The new customer associated with the bank account.
    */
    public void setCustomer(Customer customer) {
        this.customer = customer;
    }
    
    /**
    * Deposits a certain amount to the bank account.
    * @param amount The amount to be deposited.
    */
    public void deposit(double amount) {
        this.balance += amount;
    }
    
    /**
    * Withdraws a certain amount from the bank account.
    * @param amount The amount to be withdrawn.
    */
    public void withdraw(double amount) {
        if (this.balance - amount >= 0) {
            this.balance -= amount;
        }
        else {
            System.out.println("Insufficient funds.");
        }
    }
}

/**
* This class represents a savings account which is a type of bank account.
*/
public class SavingsAccount extends BankAccount {
    /**
    * Constructor for SavingsAccount class.
    * @param accountNumber The account number of the savings account.
    * @param balance The balance of the savings account.
    * @param customer The customer associated with the savings account.
    */
    public SavingsAccount(String accountNumber, double balance, Customer customer) {
        super(accountNumber, balance, customer);
    }
    
    /**
    * Adds an interest amount to the balance of the savings account.
    * @param rate The interest rate.
    */
    public void addInterest(double rate) {
        double interest = super.getBalance() * rate / 100;
        super.setBalance(super.getBalance() + interest);
    }
}

/**
* This is the main class which contains the main method.
*/
public class Main {
    /**
    * The main method which creates customers and bank accounts then performs transactions.
    */
    public static void main(String[] args) {
        // Create new customer
        Customer john = new Customer("John", 35, "123 Main Street");
        
        // Create new bank account for John
        BankAccount johnAccount = new BankAccount("123456789", 1000.00, john);
        
        // Print customer and bank account details
        john.printDetails();
        johnAccount.getCustomer().printDetails();
        System.out.println("Bank Account Number: " + johnAccount.getAccountNumber());
        System.out.println("Balance: " + johnAccount.getBalance());
        
        // Deposit $500 into John's bank account
        johnAccount.deposit(500.00);
        System.out.println("New Balance: " + johnAccount.getBalance());
        
        // Create new savings account for John
        SavingsAccount johnSavings = new SavingsAccount("987654321", 5000.00, john);
        
        // Add interest to John's savings account
        johnSavings.addInterest(5.0);
        System.out.println("New Savings Account Balance: " + johnSavings.getBalance());
        
        // Withdraw $200 from John's bank account
        johnAccount.withdraw(200.00);
        System.out.println("New Balance: " + johnAccount.getBalance());
    }
}