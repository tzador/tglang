public class BinarySearchTree {
    private Node root;

    private class Node {
        private int key;
        private String value;
        private Node left, right;

        public Node(int key, String value) {
            this.key = key;
            this.value = value;
        }
    }

    // insert method to add a new node
    public void insert(int key, String value) {
        root = insertNode(root, key, value);
    }

    private Node insertNode(Node node, int key, String value) {
        if (node == null) {
            // if the node is null, create a new node with given key and value
            return new Node(key, value);
        }
        // if the key is less than the node's key, insert it in the left subtree
        if (key < node.key) {
            node.left = insertNode(node.left, key, value);
        }
        // if the key is greater than the node's key, insert it in the right subtree
        else if (key > node.key) {
            node.right = insertNode(node.right, key, value);
        }
        // if the key already exists, replace the value
        else {
            node.value = value;
        }
        return node;
    }

    // search method to find a node based on key
    public String search(int key) {
        Node current = root;
        // traverse through the tree until we find the matching key
        while (current != null) {
            if (key == current.key) {
                return current.value;
            } else if (key < current.key) {
                current = current.left;
            } else if (key > current.key) {
                current = current.right;
            }
        }
        // if key is not found, return null
        return null;
    }

    // method to print the tree in order
    public void printInOrder() {
        // call the recursive method to print the nodes
        inOrderTraversal(root);
    }

    // recursive method to print the nodes in order
    private void inOrderTraversal(Node node) {
        if (node != null) {
            // print the nodes in the left subtree
            inOrderTraversal(node.left);
            // print the current node
            System.out.print(node.value + " ");
            // print the nodes in the right subtree
            inOrderTraversal(node.right);
        }
    }
}