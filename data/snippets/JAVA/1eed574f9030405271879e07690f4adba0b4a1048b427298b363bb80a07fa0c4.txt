import java.util.*;

public class CodeSnippet {

    /*
     * This method takes in an array of integers and sorts them in ascending order
     * using the selection sort algorithm.
     * @param arr The array to be sorted.
     * @return The sorted array.
     */
    public static int[] selectionSort(int[] arr) {
        int n = arr.length;

        // One by one move boundary of unsorted subarray
        for (int i = 0; i < n-1; i++) {

            // Find the minimum element in unsorted array
            int min_idx = i;
            for (int j = i+1; j < n; j++)
                if (arr[j] < arr[min_idx])
                    min_idx = j;

            // Swap the found minimum element with the first element
            int temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
        return arr;
    }

    /*
     * This method takes in String and checks if it is a palindrome by using
     * two pointers, one starting from the left side and another starting
     * from the right side, and comparing the characters until they meet.
     * @param str The String to be checked.
     * @return true if String is a palindrome, false otherwise.
     */
    public static boolean isPalindrome(String str) {
        // Convert String to lowercase to handle case sensitivity
        str = str.toLowerCase();

        // Initialize left and right pointers
        int left = 0;
        int right = str.length() - 1;

        // Keep comparing characters until they meet
        while (left < right) {
            // Ignore non-alphanumeric characters on the left side
            while (left < right && !Character.isLetterOrDigit(str.charAt(left)))
                left++;

            // Ignore non-alphanumeric characters on the right side
            while (left < right && !Character.isLetterOrDigit(str.charAt(right)))
                right--;

            // If characters don't match, return false
            if (str.charAt(left) != str.charAt(right))
                return false;

            left++;
            right--;
        }
        return true;
    }

    /*
     * This method takes in an integer and calculates its factorial
     * using recursion.
     * @param num The integer to find the factorial of.
     * @return The factorial of the given integer.
     */
    public static int factorial(int num) {
        // Base case: factorial of 0 is 1
        if (num == 0)
            return 1;

        // Recursive case: call the factorial method with (num-1) as parameter
        return num * factorial(num-1);
    }

    public static void main(String[] args) {
        // Initialize an unsorted array
        int[] arr = { 14, 7, 2, 46, 10, 17 };

        // Sort the array using selection sort algorithm
        arr = selectionSort(arr);

        // Print the sorted array
        System.out.println(Arrays.toString(arr));

        // Check if a String is a palindrome
        String str = "Racecar";
        if (isPalindrome(str))
            System.out.println(str + " is a palindrome.");
        else
            System.out.println(str + " is not a palindrome.");

        // Calculate the factorial of 5 using recursion
        int num = 5;
        int factorial = factorial(num);
        System.out.println("Factorial of " + num + " is: " + factorial);
    }
}