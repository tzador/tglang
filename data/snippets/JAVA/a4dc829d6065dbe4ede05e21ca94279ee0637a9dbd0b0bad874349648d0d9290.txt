/**
 * This class represents a binary search tree data structure
 * with nodes containing Integer values
 */

public class BinarySearchTree {
    //Class variables
    private Node root; //the root node of the binary search tree

    //Constructor
    public BinarySearchTree() {
        this.root = null; //initialize root as null
    }

    /**
     * Adds a new node containing the given value to the binary search tree
     * @param value the value to be added to the tree
     */
    public void add(int value) {
        //create a new node with the given value
        Node newNode = new Node(value);

        //if the tree is empty, set the new node as the root
        if (this.root == null) {
            this.root = newNode;
        } else {
            //call the helper method to recursively add the node
            addHelper(this.root, newNode);
        }
    }

    /**
     * Helper method to recursively add a node to the binary search tree
     * @param currentNode the current node being checked
     * @param newNode the new node to be added
     */
    private void addHelper(Node currentNode, Node newNode) {
        //if the value of the new node is less than the value of the current node
        if (newNode.getValue() < currentNode.getValue()) {
            //if there is no left child, set the new node as the left child
            if (currentNode.getLeft() == null) {
                currentNode.setLeft(newNode);
            } else {
                //otherwise, recursively call addHelper on the left child
                addHelper(currentNode.getLeft(), newNode);
            }
        } else {
            //if the value of the new node is greater than or equal to the value of the current node
            //if there is no right child, set the new node as the right child
            if (currentNode.getRight() == null) {
                currentNode.setRight(newNode);
            } else {
                //otherwise, recursively call addHelper on the right child
                addHelper(currentNode.getRight(), newNode);
            }
        }
    }

    /**
     * Searches for the given value in the binary search tree
     * @param value the value to search for
     * @return true if the value is found, false otherwise
     */
    public boolean contains(int value) {
        //call the helper method to recursively search for the value
        return containsHelper(this.root, value);
    }

    /**
     * Helper method to recursively search for a value in the binary search tree
     * @param currentNode the current node being checked
     * @param value the value to search for
     * @return true if the value is found, false otherwise
     */
    private boolean containsHelper(Node currentNode, int value) {
        //if the current node is null, the value is not found
        if (currentNode == null) {
            return false;
        }
        //if the value is equal to the value of the current node, the value is found
        if (value == currentNode.getValue()) {
            return true;
        } else if (value < currentNode.getValue()) {
            //if the value is less than the value of the current node
            //recursively call containsHelper on the left child
            return containsHelper(currentNode.getLeft(), value);
        } else {
            //otherwise, if the value is greater than the value of the current node
            //recursively call containsHelper on the right child
            return containsHelper(currentNode.getRight(), value);
        }
    }

    /**
     * Prints the values of the binary search tree in ascending order
     */
    public void printInOrder() {
        //call the helper method to recursively print the values in ascending order
        inOrderHelper(this.root);
    }

    /**
     * Helper method to recursively print the values of the binary search tree in ascending order
     * @param currentNode the current node being checked
     */
    private void inOrderHelper(Node currentNode) {
        //if the current node is not null
        if (currentNode != null) {
            //print the values in the left subtree
            inOrderHelper(currentNode.getLeft());
            //print the value of the current node
            System.out.print(currentNode.getValue() + " ");
            //print the values in the right subtree
            inOrderHelper(currentNode.getRight());
        }
    }

    /**
     * Inner Node class representing a node in the binary search tree
     */
    private static class Node {
        //Instance variables
        private int value; //the value stored in the node
        private Node left; //reference to the left child node
        private Node right; //reference to the right child node

        //Constructor
        public Node(int value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }

        //Getter methods
        public int getValue() {
            return this.value;
        }

        public Node getLeft() {
            return this.left;
        }

        public Node getRight() {
            return this.right;
        }

        //Setter methods
        public void setValue(int value) {
            this.value = value;
        }

        public void setLeft(Node left) {
            this.left = left;
        }

        public void setRight(Node right) {
            this.right = right;
        }
    }
}