public class BinarySearchTree<T extends Comparable<T>> { \\ A generic class for implementing Binary Search Tree
    private Node<T> root; \\ A private variable for the root of the tree

    private class Node<T> { \\ A private class for creating a node in the tree
        private T data; \\ A private variable for storing the data in the node
        private Node<T> left; \\ A private variable for storing the left child of the node
        private Node<T> right; \\ A private variable for storing the right child of the node

        public Node(T data) { \\ A constructor for creating a node with given data
            this.data = data;
            left = null;
            right = null;
        }

        public boolean isLeaf() { \\ A method to check if the node is a leaf (has no children)
            return (left == null) && (right == null);
        }

        public boolean hasLeftChild() { \\ A method to check if the node has a left child
            return left != null;
        }

        public boolean hasRightChild() { \\ A method to check if the node has a right child
            return right != null;
        }

        public T getData() { \\ A method to get the data stored in the node
            return data;
        }
    }

    public void insert(T data) { \\ A method to insert a new node in the tree
        root = insert(root, data);
    }

    private Node<T> insert(Node<T> node, T data) { \\ A private method to insert a new node recursively
        if (node == null) { \\ If the node is null, create a new node with the data and make it the root of the tree
            node = new Node<T>(data);
            return node;
        }
        if (data.compareTo(node.data) < 0) { \\ If the data is smaller than the data in the current node, insert it in the left subtree
            node.left = insert(node.left, data);
        } else { \\ If the data is larger than the data in the current node, insert it in the right subtree
            node.right = insert(node.right, data);
        }
        return node;
    }

    public boolean contains(T data) { \\ A method to check if the tree contains a specific data
        return contains(root, data);
    }

    private boolean contains(Node<T> node, T data) { \\ An private method to check if a specific data is present in the tree recursively
        if (node == null) { \\ If the node is null, the data is not present in the tree
            return false;
        }
        if (data.compareTo(node.data) == 0) { \\ If the data is equal to the data in the current node, the data is present in the tree
            return true;
        }
        if (data.compareTo(node.data) < 0) { \\ If the data is smaller than the data in the current node, search in the left subtree
            return contains(node.left, data);
        } else { \\ If the data is larger than the data in the current node, search in the right subtree
            return contains(node.right, data);
        }
    }

    public void remove(T data) { \\ A method to remove a node from the tree
        root = remove(root, data);
    }

    private Node<T> remove(Node<T> node, T data) { \\ A private method to remove a node from the tree recursively
        if (node == null) { \\ If the node is null, the data is not present in the tree
            return null;
        }
        if (data.compareTo(node.data) < 0) { \\ If the data is smaller than the data in the current node, search in the left subtree
            node.left = remove(node.left, data);
        } else if (data.compareTo(node.data) > 0) { \\ If the data is larger than the data in the current node, search in the right subtree
            node.right = remove(node.right, data);
        } else { \\ If the data is equal to the data in the current node, remove the node from the tree
            if (node.isLeaf()) { \\ If the node is a leaf, simply remove it from the tree
                return null;
            } else if (node.hasLeftChild()) { \\ If the node has a left child, replace the node with its left child
                return node.left;
            } else if (node.hasRightChild()) { \\ If the node has a right child, replace the node with its right child
                return node.right;
            } else { \\ If the node has both left and right children, replace the node with the smallest value in the right subtree
                Node<T> temp = findMin(node.right);
                node.right = remove(node.right, temp.data);
                node.data = temp.data;
            }
        }
        return node;
    }

    private Node<T> findMin(Node<T> node) { \\ A private method to find the smallest value in a subtree recursively
        if (node == null) { \\ If the node is null, the subtree is empty
            return null;
        } else if (node.left == null) { \\ If the node does not have a left child, it is the smallest value in the subtree
            return node;
        } else { \\ Otherwise, recurse on the left subtree
            return findMin(node.left);
        }
    }
}