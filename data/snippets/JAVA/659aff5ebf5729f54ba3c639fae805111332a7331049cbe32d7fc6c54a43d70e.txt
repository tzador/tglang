/**
 * This class represents a linked list data structure
 */
public class LinkedList {

    /**
     * This inner class represents a single node in the linked list
     */
    private class Node {
        private int data;
        private Node next;

        /**
         * Constructor for Node class
         * @param data the data to be stored in the node
         */
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    private Node head; // Represents the head of the linked list

    /**
     * Constructor for LinkedList class
     */
    public LinkedList() {
        this.head = null;
    }

    /**
     * Adds a new node with the given data to the end of the linked list
     * @param data the data to be inserted into the linked list
     */
    public void add(int data) {
        Node newNode = new Node(data);

        // If head is null, set head to new node
        if (head == null) {
            head = newNode;
        } else {
            // Find the last node in the linked list
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            // Set the last node's next pointer to the new node
            current.next = newNode;
        }
    }

    /**
     * Removes the first occurrence of the given data from the linked list
     * @param data the data to be removed from the linked list
     */
    public void remove(int data) {
        // Check if head is null
        if (head == null) {
            return;
        }

        // If head is the node to be removed
        if (head.data == data) {
            head = head.next;
            return;
        }

        // Find node before the one to be removed
        Node current = head;
        while (current.next != null) {
            if (current.next.data == data) {
                // Set the next pointer of the previous node to the next node of the one to be removed
                current.next = current.next.next;
                return;
            }
            current = current.next;
        }
    }

    /**
     * Prints out the linked list in a readable format
     */
    public void printList() {
        Node current = head;
        System.out.print("Head -> ");
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("Null");
    }
}

// Create a new linked list instance
LinkedList linkedList = new LinkedList();

// Add nodes to the linked list
linkedList.add(5);
linkedList.add(10);
linkedList.add(15);
linkedList.add(20);

// Print out the linked list
linkedList.printList();

// Remove the node with a value of 10
linkedList.remove(10);

// Print out the updated linked list
linkedList.printList();