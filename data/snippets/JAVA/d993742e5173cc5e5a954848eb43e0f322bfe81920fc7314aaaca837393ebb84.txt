/**
 * This class represents a car in a dealership.
 */
public class Car {
    private String make; //the make of the car
    private String model; //the model of the car
    private int year; //the year the car was made
    private double price; //the price of the car
    
    /**
     * Constructor for the Car class.
     * @param make the make of the car
     * @param model the model of the car
     * @param year the year the car was made
     * @param price the price of the car
     */
    public Car(String make, String model, int year, double price) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.price = price;
    }

    /**
     * Gets the make of the car.
     * @return the make of the car
     */
    public String getMake() {
        return make;
    }

    /**
     * Gets the model of the car.
     * @return the model of the car
     */
    public String getModel() {
        return model;
    }

    /**
     * Gets the year the car was made.
     * @return the year the car was made
     */
    public int getYear() {
        return year;
    }

    /**
     * Gets the price of the car.
     * @return the price of the car
     */
    public double getPrice() {
        return price;
    }

    /**
     * Sets the make of the car.
     * @param make the make of the car
     */
    public void setMake(String make) {
        this.make = make;
    }

    /**
     * Sets the model of the car.
     * @param model the model of the car
     */
    public void setModel(String model) {
        this.model = model;
    }

    /**
     * Sets the year the car was made.
     * @param year the year the car was made
     */
    public void setYear(int year) {
        this.year = year;
    }

    /**
     * Sets the price of the car.
     * @param price the price of the car
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /**
     * Calculates the sales tax for the car.
     * @param taxRate the tax rate for the car
     * @return the sales tax for the car
     */
    public double calculateSalesTax(double taxRate) {
        return price * taxRate;
    }

    /**
     * Prints out the car's information.
     */
    public void printCarInfo() {
        System.out.println("Make: " + make);
        System.out.println("Model: " + model);
        System.out.println("Year: " + year);
        System.out.println("Price: " + price);
    }
}

/**
 * This class represents a dealership.
 */
public class Dealership {
    private ArrayList<Car> cars; //list of cars in the dealership
    private double taxRate; //the tax rate for the dealership's location

    /**
     * Constructor for the Dealership class.
     * @param taxRate the tax rate for the dealership's location
     */
    public Dealership(double taxRate) {
        this.taxRate = taxRate;
        cars = new ArrayList<>();
    }

    /**
     * Adds a car to the dealership's inventory.
     * @param car the car to be added
     */
    public void addCar(Car car) {
        cars.add(car);
    }

    /**
     * Removes a car from the dealership's inventory.
     * @param car the car to be removed
     */
    public void removeCar(Car car) {
        cars.remove(car);
    }

    /**
     * Gets a list of all the cars in the dealership's inventory.
     * @return list of cars in inventory
     */
    public ArrayList<Car> getCars() {
        return cars;
    }

    /**
     * Calculates the total sales tax for all the cars in the dealership.
     * @return the total sales tax
     */
    public double calculateTotalSalesTax() {
        double totalSalesTax = 0.0;
        for (Car car : cars) {
            totalSalesTax += car.calculateSalesTax(taxRate);
        }
        return totalSalesTax;
    }
}