// This program uses dynamic programming to find the longest common subsequence
// Given two strings s1 and s2, the program will return the length of the longest common subsequence
public class LongestCommonSubsequence {
    // Function to find the length of longest common subsequence
    public static int findLCSLength(String s1, String s2) {
        int[][] dp = new int[s1.length() + 1][s2.length() + 1];  // Create a 2D array to store subproblem results

        // Fill the dp array with subproblem results
        for(int i=1; i <= s1.length(); i++) {
            for(int j=1; j <= s2.length(); j++) {
                // If the characters match, increment the length of LCS
                if(s1.charAt(i-1) == s2.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];
                // If there is no match, take the maximum length from previous subproblems
                else
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }

        return dp[s1.length()][s2.length()]; // The bottom-right cell of dp array will contain the length of LCS
    }

    // Main method
    public static void main(String[] args) {
        String s1 = "ABCDGH";
        String s2 = "AEDFHR";
        System.out.println("Length of longest common subsequence: " + findLCSLength(s1, s2));
    }
}