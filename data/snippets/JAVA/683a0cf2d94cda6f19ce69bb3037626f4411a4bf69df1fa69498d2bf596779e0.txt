/**
 * This class represents a data structure for a binary search tree
 */
public class BinarySearchTree<T extends Comparable<T>> {

    private TreeNode<T> root;   // the root node of the tree

    /**
     * Constructor for the binary search tree
     */
    public BinarySearchTree() {
        this.root = null;
    }

    /**
     * Helper method to insert a new element into the tree
     * @param value the value to be inserted
     */
    public void insert(T value) {

        // create a new node with the given value
        TreeNode<T> newNode = new TreeNode<>(value);

        // if the root is null, set the new node as the root
        if (root == null) {
            root = newNode;
        }
        else {
            // start at the root and insert the new node in the correct position
            TreeNode<T> currentNode = root;

            while (true) {
                // if the value is less than the current node, go to the left subtree
                if (value.compareTo(currentNode.getValue()) < 0) {
                    // if the left child is null, set the new node as the left child and break out of the loop
                    if (currentNode.getLeftChild() == null) {
                        currentNode.setLeftChild(newNode);
                        break;
                    }
                    // otherwise, continue traversing the left subtree
                    else {
                        currentNode = currentNode.getLeftChild();
                    }
                }
                // if the value is greater than the current node, go to the right subtree
                else if (value.compareTo(currentNode.getValue()) > 0) {
                    // if the right child is null, set the new node as the right child and break out of the loop
                    if (currentNode.getRightChild() == null) {
                        currentNode.setRightChild(newNode);
                        break;
                    }
                    // otherwise, continue traversing the right subtree
                    else {
                        currentNode = currentNode.getRightChild();
                    }
                }
                // if the value is equal to the current node, throw an exception
                else {
                    throw new IllegalArgumentException("Duplicate values are not allowed in a binary search tree.");
                }
            }
        }
    }

    /**
     * Helper method to remove an element from the tree
     * @param value the value to be removed
     */
    public void remove(T value) {
        // check if the tree is empty
        if (root == null) {
            throw new NoSuchElementException("The tree is empty. Cannot remove element.");
        }
        else {
            // start at the root and keep track of the parent node
            TreeNode<T> currentNode = root;
            TreeNode<T> parentOfCurrentNode = null;

            // loop until either the value is found or the entire tree has been traversed
            while (currentNode != null && !currentNode.getValue().equals(value)) {
                // keep track of the parent node to make removal easier
                parentOfCurrentNode = currentNode;

                // if the value is less than the current node, go to the left subtree
                if (value.compareTo(currentNode.getValue()) < 0) {
                    currentNode = currentNode.getLeftChild();
                }
                // if the value is greater than the current node, go to the right subtree
                else if (value.compareTo(currentNode.getValue()) > 0) {
                    currentNode = currentNode.getRightChild();
                }
            }

            // if the value was not found, throw an exception
            if (currentNode == null) {
                throw new NoSuchElementException("The given value is not present in the binary search tree.");
            }
            else {
                // if the current node is a leaf (has no children), just remove it
                if (currentNode.isLeaf()) {
                    // check if it is the root node
                    if (currentNode == root) {
                        root = null;
                    }
                    // otherwise, just set the appropriate child of the parent node to null
                    else {
                        if (currentNode == parentOfCurrentNode.getLeftChild()) {
                            parentOfCurrentNode.setLeftChild(null);
                        }
                        else {
                            parentOfCurrentNode.setRightChild(null);
                        }
                    }
                }
                // if the current node has only one child, replace it with the child node
                else if (currentNode.getLeftChild() == null) {
                    // if the current node is the root node, update the root
                    if (currentNode == root) {
                        root = currentNode.getRightChild();
                    }
                    // otherwise, update the appropriate child of the parent node
                    else {
                        if (currentNode == parentOfCurrentNode.getLeftChild()) {
                            parentOfCurrentNode.setLeftChild(currentNode.getRightChild());
                        }
                        else {
                            parentOfCurrentNode.setRightChild(currentNode.getRightChild());
                        }
                    }
                }
                else if (currentNode.getRightChild() == null) {
                    // if the current node is the root node, update the root
                    if (currentNode == root) {
                        root = currentNode.getLeftChild();
                    }
                    // otherwise, update the appropriate child of the parent node
                    else {
                        if (currentNode == parentOfCurrentNode.getLeftChild()) {
                            parentOfCurrentNode.setLeftChild(currentNode.getLeftChild());
                        }
                        else {
                            parentOfCurrentNode.setRightChild(currentNode.getLeftChild());
                        }
                    }
                }
                // if the current node has two children, replace it with the successor
                else {
                    // find the successor of the current node and keep track of its parent
                    TreeNode<T> successor = currentNode.getRightChild();
                    TreeNode<T> parentOfSuccessor = currentNode;

                    while (successor.getLeftChild() != null) {
                        parentOfSuccessor = successor;
                        successor = successor.getLeftChild();
                    }

                    // if the successor is the right child of the current node, simply replace the current node with it
                    if (currentNode.getRightChild() == successor) {
                        successor.setLeftChild(currentNode.getLeftChild());

                        if (currentNode == root) {
                            root = successor;
                        }
                        else {
                            if (currentNode == parentOfCurrentNode.getLeftChild()) {
                                parentOfCurrentNode.setLeftChild(successor);
                            }
                            else {
                                parentOfCurrentNode.setRightChild(successor);
                            }
                        }
                    }
                    // otherwise, replace the successor with its right child and then replace the current node with the successor
                    else {
                        parentOfSuccessor.setLeftChild(successor.getRightChild());
                        successor.setRightChild(currentNode.getRightChild());
                        successor.setLeftChild(currentNode.getLeftChild());

                        if (currentNode == root) {
                            root = successor;
                        }
                        else {
                            if (currentNode == parentOfCurrentNode.getLeftChild()) {
                                parentOfCurrentNode.setLeftChild(successor);
                            }
                            else {
                                parentOfCurrentNode.setRightChild(successor);
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Helper method to search for an element in the tree
     * @param value the value to search for
     * @return true if the value is present in the tree, false otherwise
     */
    public boolean search(T value) {
        // start at the root
        TreeNode<T> currentNode = root;

        // loop until either the value is found or the entire tree has been traversed
        while (currentNode != null && !currentNode.getValue().equals(value)) {
            // if the value is less than the current node, go to the left subtree
            if (value.compareTo(currentNode.getValue()) < 0) {
                currentNode = currentNode.getLeftChild();
            }
            // if the value is greater than the current node, go to the right subtree
            else if (value.compareTo(currentNode.getValue()) > 0) {
                currentNode = currentNode.getRightChild();
            }
        }

        // if the value was found, return true, otherwise return false
        return currentNode != null;
    }

    /**
     * Helper method to get the size of the tree
     * @return the number of elements in the tree
     */
    public int size() {
        return getSize(root);
    }

    /**
     * Recursive helper method to get the size of the tree
     * @param currentNode the current node being counted
     * @return the number of elements in the subtree
     */
    private int getSize(TreeNode<T> currentNode) {
        // base case - return 0 for a leaf node
        if (currentNode == null) {
            return 0;
        }
        // sum the nodes in the left and right subtrees plus the current node
        else {
            return 1 + getSize(currentNode.getLeftChild()) + getSize(currentNode.getRightChild());
        }
    }

    /**
     * Helper method to get the height of the tree
     * @return the height of the tree
     */
    public int height() {
        return getHeight(root);
    }

    /**
     * Recursive helper method to get the height of the tree
     * @param currentNode the current node being checked
     * @return the height of the subtree rooted at the current node
     */
    private int getHeight(TreeNode<T> currentNode) {
        // base case - return -1 for a null node
        if (currentNode == null) {
            return -1;
        }
        // recursively find the greater of the heights of the left and right subtrees and add 1 for the current node
        else {
            return Math.max(getHeight(currentNode.getLeftChild()), getHeight(currentNode.getRightChild())) + 1;
        }
    }

    /**
     * Helper method to perform a preorder traversal of the tree
     * @param currentNode the current node being visited
     */
    public void preorder(TreeNode<T> currentNode) {
        // base case - return for a null node
        if (currentNode == null) {
            return;
        }

        // visit the current node first
        System.out.println(currentNode.getValue());

        // recursively visit the left subtree
        preorder(currentNode.getLeftChild());

        // recursively visit the right subtree
        preorder(currentNode.getRightChild());
    }

    /**
     * Helper method to perform an inorder traversal of the tree
     * @param currentNode the current node being visited
     */
    public void inorder(TreeNode<T> currentNode) {
        // base case - return for a null node
        if (currentNode == null) {
            return;
        }

        // recursively visit the left subtree
        inorder(currentNode.getLeftChild());

        // visit the current node
        System.out.println(currentNode.getValue());

        // recursively visit the right subtree
        inorder(currentNode.getRightChild());
    }

    /**
     * Helper method to perform a postorder traversal of the tree
     * @param currentNode the current node being visited
     */
    public void postorder(TreeNode<T> currentNode) {
        // base case - return for a null node
        if (currentNode == null) {
            return;
        }

        // recursively visit the left subtree
        postorder(currentNode.getLeftChild());

        // recursively visit the right subtree
        postorder(currentNode.getRightChild());

        // visit the current node
        System.out.println(currentNode.getValue());
    }

    /**
     * Helper method to perform a level-order traversal of the tree
     * @return a list of the values in the tree in level-order
     */
    public List<T> levelorder() {
        // create an empty list to store the values
        List<T> values = new ArrayList<>();

        // create a queue to process the nodes in level-order
        Queue<TreeNode<T>> queue = new LinkedList<>();

        // add the root node to the queue
        queue.add(root);

        // while the queue is not empty, remove the first node, add its value to the list, and add its children to the queue
        while (!queue.isEmpty()) {
            TreeNode<T> currentNode = queue.remove();
            values.add(currentNode.getValue());

            if (currentNode.getLeftChild() != null) {
                queue.add(currentNode.getLeftChild());
            }
            if (currentNode.getRightChild() != null) {
                queue.add(currentNode.getRightChild());
            }
        }

        // return the list of values
        return values;
    }

    /**
     * Helper method to check if the tree is empty
     * @return true if the tree is empty, false otherwise
     */
    public boolean isEmpty() {
        return root == null;
    }
}

/**
 * This class represents a node in a binary tree
 * @param <T> the type of the value stored in the node
 */
class TreeNode<T> {

    private T value;    // the value stored in the node
    private TreeNode<T> leftChild;   // the left child of the node
    private TreeNode<T> rightChild;  // the right child of the node

    /**
     * Constructor for a tree node
     * @param value the value to be stored in the node
     */
    public TreeNode(T value) {
        this.value = value;
        this.leftChild = null;
        this.rightChild = null;
    }

    /**
     * Getter method for the value of the node
     * @return the value of the node
     */
    public T getValue() {
        return value;
    }

    /**
     * Getter method for the left child of the node
     * @return the left child of the node
     */
    public TreeNode<T> getLeftChild() {
        return leftChild;
    }

    /**
     * Setter method for the left child of the node
     * @param leftChild the left child of the node to be set
     */
    public void setLeftChild(TreeNode<T> leftChild) {
        this.leftChild = leftChild;
    }

    /**
     * Getter method for the right child of the node
     * @return the right child of the node
     */
    public TreeNode<T> getRightChild() {
        return rightChild;
    }

    /**
     * Setter method for the right child of the node
     * @param rightChild the right child of the node to be set
     */
    public void setRightChild(TreeNode<T> rightChild) {
        this.rightChild = rightChild;
    }

    /**
     * Helper method to check if the node is a leaf
     * @return true if the node has no children, false otherwise
     */
    public boolean isLeaf() {
        return leftChild == null && rightChild == null;
    }
}