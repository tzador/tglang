/* This code snippet is a complex algorithm that takes in an array of integers and sorts them in descending order using the quicksort method. */

/* The partition function takes in the array, the starting and ending indices, and the pivot element as parameters. It rearranges elements such that all elements smaller than the pivot are on the left, and all elements larger are on the right. It returns the index of the pivot element after partitioning. */
int partition(int[] arr, int low, int high, int pivot) {

    int i = low; // initialize left pointer
    int j = high; // initialize right pointer
    int temp;

    while (i <= j) {
        /* Move the left pointer until an element greater than the pivot is found */
        while (arr[i] > pivot) {
            i++;
        }

        /* Move the right pointer until an element smaller than the pivot is found */
        while (arr[j] < pivot) {
            j--;
        }

        /* If the left pointer is still smaller than the right pointer, swap the elements */
        if (i <= j) {
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;

            /* Move the pointers to the next elements */
            i++;
            j--;
        }
    }

    return i; // index of pivot after partition
}

/* The quicksort function takes in the array, the starting and ending indices as parameters. It recursively partitions the array and calls itself on the left and right subarrays until the entire array is sorted. */
void quicksort(int[] arr, int low, int high) {

    /* Base case: array has 0 or 1 element */
    if (low >= high) {
        return;
    }

    /* Choose a pivot element */
    int pivot = arr[(low + high) / 2];

    /* Partition the array and get the index of the pivot */
    int index = partition(arr, low, high, pivot);

    /* Call quicksort on the left and right subarrays */
    quicksort(arr, low, index - 1); // left subarray
    quicksort(arr, index, high); // right subarray
}

/* Example usage */
int[] arr = {5, 2, 8, 1, 3};
quicksort(arr, 0, arr.length - 1);
System.out.println(Arrays.toString(arr)); // prints [8, 5, 3, 2, 1] as the array is now sorted in descending order