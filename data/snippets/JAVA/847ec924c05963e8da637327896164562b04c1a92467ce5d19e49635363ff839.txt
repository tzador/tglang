/**
 * This class represents a binary search tree data structure.
 */
public class BinarySearchTree {

    /**
     * This inner class represents a node in the binary tree.
     * It has a left child, right child, and a data value.
     */
    private static class Node {
        private Node left;
        private Node right;
        private int data;

        /**
         * Constructor for creating a new node with given data.
         * @param data The data to be stored in the node.
         */
        public Node(int data) {
            this.data = data;
        }
    }

    private Node root;

    /**
     * Method to insert a new value into the binary tree.
     * @param data The data to be inserted.
     */
    public void insert(int data) {
        root = insertHelper(root, data);
    }

    /**
     * Private helper method for insert method.
     * Recursively searches for the appropriate location to insert the data.
     * @param root The root node of the current subtree.
     * @param data The data to be inserted.
     * @return The updated root node.
     */
    private Node insertHelper(Node root, int data) {
        if (root == null) { // Base case: Reached the appropriate null child to insert at.
            return new Node(data); // Create a new node with the data and return it.
        }

        if (data < root.data) { // Recursive case: Go down the left subtree.
            root.left = insertHelper(root.left, data);
        } else { // Recursive case: Go down the right subtree.
            root.right = insertHelper(root.right, data);
        }

        return root; // Return the updated root node of the current subtree.
    }

    /**
     * Method to delete a value from the binary tree.
     * @param data The data to be deleted.
     */
    public void delete(int data) {
        root = deleteHelper(root, data);
    }

    /**
     * Private helper method for delete method.
     * Recursively searches for the node to be deleted and adjusts the tree accordingly.
     * @param root The root node of the current subtree.
     * @param data The data to be deleted.
     * @return The updated root node.
     */
    private Node deleteHelper(Node root, int data) {
        if (root == null) { // Base case: Reached a null child, value not found.
            return null;
        }

        if (data == root.data) { // Base case: Found the node to be deleted.
            // Case 1: No child nodes; simply remove the node.
            if (root.left == null && root.right == null) {
                return null;
            }
            // Case 2: One child node; replace the node with its child.
            if (root.left == null) {
                return root.right;
            }
            if (root.right == null) {
                return root.left;
            }
            // Case 3: Two child nodes; replace the node with its successor node.
            // Successor is the leftmost node in the subtree to the right.
            root.data = findSuccessor(root.right).data;
            root.right = deleteHelper(root.right, root.data);
            return root;
        }

        if (data < root.data) { // Recursive case: Go down the left subtree.
            root.left = deleteHelper(root.left, data);
        } else { // Recursive case: Go down the right subtree.
            root.right = deleteHelper(root.right, data);
        }

        return root; // Return the updated root node of the current subtree.
    }

    /**
     * Method to find the successor node.
     * @param root The root node of the current subtree.
     * @return The successor node.
     */
    private Node findSuccessor(Node root) {
        Node current = root;
        while (current.left != null) { // Loop until the leftmost node is reached.
            current = current.left; // Go down the left subtree.
        }
        return current;
    }

    /**
     * Method to search for a value in the binary tree.
     * @param target The value to be searched.
     * @return True if the value is found, false otherwise.
     */
    public boolean search(int target) {
        return searchHelper(root, target);
    }

    /**
     * Private helper method for search method.
     * Recursively searches for the target value.
     * @param root The root node of the current subtree.
     * @param target The value to be searched.
     * @return True if the value is found, false otherwise.
     */
    private boolean searchHelper(Node root, int target) {
        if (root == null) { // Base case: Reached a null child, value not found.
            return false;
        }
        if (target == root.data) { // Base case: Found the target value.
            return true;
        }

        // Recursive case: Search either in the left or right subtree.
        if (target < root.data) {
            return searchHelper(root.left, target);
        } else {
            return searchHelper(root.right, target);
        }
    }
}