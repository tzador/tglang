/**
 * This class represents a linked list data structure.
 */
public class LinkedList<E> {
    // Private variables for the head and tail of the list
    private Node<E> head;
    private Node<E> tail;

    /**
     * This method adds a new element to the end of the list.
     * @param data The data of the new node to be added
     */
    public void add(E data) {
        // Create a new node with the given data
        Node<E> newNode = new Node<>(data);

        if (head == null) {
            // If the list is empty, set head and tail to the new node
            head = newNode;
            tail = newNode;
        } else {
            // Otherwise, add the new node after the tail and update the tail
            tail.next = newNode;
            tail = newNode;
        }
    }

    /**
     * This method removes an element from the list at the given index.
     * @param index The index of the element to be removed
     * @return The data of the removed node
     */
    public E remove(int index) {
        // Check if index is out of bounds
        if (index < 0 || index > size() - 1) {
            throw new IndexOutOfBoundsException();
        }

        // If removing the head
        if (index == 0) {
            // Save the data and update the head
            E removedData = head.data;
            head = head.next;
            return removedData;
        }

        // Otherwise, find the previous node of the node at the given index
        Node<E> prev = head;
        for (int i = 0; i < index - 1; i++) {
            prev = prev.next;
        }

        // Save the data of the node at the given index and remove it
        E removedData = prev.next.data;
        prev.next = prev.next.next;

        // If removing the tail, update the tail
        if (index == size() - 1) {
            tail = prev;
        }

        return removedData;
    }

    /**
     * This method retrieves the data of the node at the given index.
     * @param index The index of the node to retrieve data from
     * @return The data of the node at the given index
     */
    public E get(int index) {
        // Check if index is out of bounds
        if (index < 0 || index > size() - 1) {
            throw new IndexOutOfBoundsException();
        }

        // Traverse the list to the node at the given index
        Node<E> current = head;
        for (int i = 0; i < index; i++) {
            current = current.next;
        }

        // Return the data of the node at the given index
        return current.data;
    }

    /**
     * This method checks if the list is empty.
     * @return True if the list is empty, false otherwise
     */
    public boolean isEmpty() {
        return head == null;
    }

    /**
     * This method returns the size of the list.
     * @return The size of the list
     */
    public int size() {
        // Variable to keep track of the size
        int count = 0;
        
        // Traverse the list and count all the nodes
        Node<E> current = head;
        while (current != null) {
            count++;
            current = current.next;
        }

        return count;
    }

    /**
     * This class represents a node in the linked list.
     */
    private static class Node<E> {
        // Private variables for the data and the next node
        private E data;
        private Node<E> next;

        /**
         * Constructor for creating a new node.
         * @param data The data of the new node
         */
        public Node(E data) {
            this.data = data;
            next = null;
        }
    }
}