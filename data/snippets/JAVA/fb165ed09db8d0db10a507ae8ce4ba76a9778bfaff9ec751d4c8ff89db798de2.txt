/**
 * This class represents a node in a binary tree
 */
class BinaryTreeNode<T> {
    private T value; //value stored in the node
    private BinaryTreeNode<T> left; //left child of the node
    private BinaryTreeNode<T> right; //right child of the node

    /**
     * Constructor for the BinaryTreeNode class
     * @param value - value to be stored in the node
     */
    public BinaryTreeNode(T value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }

    /**
     * Getter method for the value stored in the node
     * @return - value stored in the node
     */
    public T getValue() {
        return this.value;
    }

    /**
     * Setter method for the value stored in the node
     * @param value - value to be stored in the node
     */
    public void setValue(T value) {
        this.value = value;
    }

    /**
     * Getter method for the left child of the node
     * @return - left child of the node
     */
    public BinaryTreeNode<T> getLeft() {
        return this.left;
    }

    /**
     * Setter method for the left child of the node
     * @param left - left child to be set
     */
    public void setLeft(BinaryTreeNode<T> left) {
        this.left = left;
    }

    /**
     * Getter method for the right child of the node
     * @return - right child of the node
     */
    public BinaryTreeNode<T> getRight() {
        return this.right;
    }

    /**
     * Setter method for the right child of the node
     * @param right - right child to be set
     */
    public void setRight(BinaryTreeNode<T> right) {
        this.right = right;
    }

    /**
     * Method to check if the node has a left child
     * @return - boolean value true if left child exists, false otherwise
     */
    public boolean hasLeft() {
        return this.left != null;
    }

    /**
     * Method to check if the node has a right child
     * @return - boolean value true if right child exists, false otherwise
     */
    public boolean hasRight() {
        return this.right != null;
    }
}