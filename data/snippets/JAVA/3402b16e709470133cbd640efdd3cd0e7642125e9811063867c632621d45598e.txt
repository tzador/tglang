/**
 * This class represents a Library system that keeps track of books and patrons.
 */
public class Library {
    private List<Book> books; // list of books in the library
    private List<Patron> patrons; // list of patrons registered at the library
    
    /**
     * Creates a new Library object with empty book and patron lists.
     */
    public Library() {
        this.books = new ArrayList<Book>();
        this.patrons = new ArrayList<Patron>();
    }

    /**
     * Adds a book to the library's book list.
     *
     * @param book the book to be added
     */
    public void addBook(Book book) {
        this.books.add(book);
    }

    /**
     * Removes a book from the library's book list.
     *
     * @param book the book to be removed
     */
    public void removeBook(Book book) {
        this.books.remove(book);
    }

    /**
     * Adds a patron to the library's patron list.
     *
     * @param patron the patron to be added
     */
    public void addPatron(Patron patron) {
        this.patrons.add(patron);
    }

    /**
     * Removes a patron from the library's patron list.
     *
     * @param patron the patron to be removed
     */
    public void removePatron(Patron patron) {
        this.patrons.remove(patron);
    }

    /**
     * Checks out a book to a patron and updates the book's availability status.
     *
     * @param book the book to be checked out
     * @param patron the patron checking out the book
     * @return true if the checkout is successful, false if the book is unavailable or the patron has reached their maximum borrowing limit
     */
    public boolean checkoutBook(Book book, Patron patron) {
        if (book.isAvailable() && patron.getNumBooksBorrowed() < patron.getMaxBooks()) {
            book.setAvailable(false);
            patron.addBook(book);
            return true;
        } else {
            return false;
        }
    }

    /**
     * Returns a book that was checked out by a patron and updates the book's availability status.
     *
     * @param book the book to be returned
     * @param patron the patron returning the book
     * @return true if the return is successful, false if the book was not checked out by the given patron
     */
    public boolean returnBook(Book book, Patron patron) {
        if (patron.hasBook(book)) {
            book.setAvailable(true);
            patron.removeBook(book);
            return true;
        } else {
            return false;
        }
    }

    /**
     * Retrieves a list of all books in the library.
     *
     * @return the list of books in the library
     */
    public List<Book> getAllBooks() {
        return this.books;
    }

    /**
     * Retrieves a list of all patrons registered at the library.
     *
     * @return the list of patrons registered at the library
     */
    public List<Patron> getAllPatrons() {
        return this.patrons;
    }
}