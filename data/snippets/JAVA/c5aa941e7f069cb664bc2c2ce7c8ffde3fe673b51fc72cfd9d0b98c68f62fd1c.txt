public class BinaryTree {
    Node root; //a node class that stores the root element
    
    //constructor to initialize an empty binary tree
    public BinaryTree() {
        root = null;
    }
    
    //method to insert a new node into the binary tree
    public void insert(int key) {
        Node newNode = new Node(key); //create a new node with the given key
        if (root == null) { //if the tree is empty, the new node becomes the root
            root = newNode;
        } else {
            Node current = root; //start at the root
            Node parent; //variable to store the parent of the current node
            while(true) {
                parent = current;
                if (key < current.key) { //go to the left child
                    current = current.leftChild;
                    if (current == null) { //if the left child is null, insert the new node
                        parent.leftChild = newNode;
                        return;
                    }
                } else { //go to the right child
                    current = current.rightChild;
                    if (current == null) { //if the right child is null, insert the new node
                        parent.rightChild = newNode;
                        return;
                    }
                }
            }
        }
    }
    
    //method to search for a key in the binary tree
    public Node search(int key) {
        Node current = root; //start at the root
        while(current.key != key) { //while the current node's key is not the one we're looking for
            if (key < current.key) { //search in the left subtree
                current = current.leftChild;
            } else { //search in the right subtree
                current = current.rightChild;
            }
            if (current == null) { //if the current node is null, the key does not exist in the tree
                return null;
            }
        }
        return current; //return the node with the matching key
    }
    
    //method to delete a node from the binary tree
    public boolean delete(int key) {
        Node current = root; //start at the root
        Node parent = root; //keep track of the parent of the current node
        boolean isLeftChild = true; //variable to determine if the current node is the left child of its parent
        
        //find the node to delete, while also keeping track of its parent and whether it's the left or right child
        while(current.key != key) {
            parent = current;
            if (key < current.key) { //go to the left child
                isLeftChild = true;
                current = current.leftChild;
            } else { //go to the right child
                isLeftChild = false;
                current = current.rightChild;
            }
            if (current == null) { //if the current node is null, the key does not exist in the tree
                return false;
            }
        }
        
        //case 1: node to delete has no children
        if (current.leftChild == null && current.rightChild == null) {
            if (current == root) { //if the node to delete is the root, set it to null
                root = null;
            } else if (isLeftChild) { //if the node to delete is the left child of its parent, set the parent's left child to null
                parent.leftChild = null;
            } else { //if the node to delete is the right child of its parent, set the parent's right child to null
                parent.rightChild = null;
            }
        }
        
        //case 2: node to delete has one child
        else if (current.rightChild == null) { //if the node only has a left child
            if (current == root) { //if the node to delete is the root, set its left child as the new root
                root = current.leftChild;
            } else if (isLeftChild) { //if the node to delete is the left child of its parent, set the parent's left child to the current node's left child
                parent.leftChild = current.leftChild;
            } else { //if the node to delete is the right child of its parent, set the parent's right child to the current node's left child
                parent.rightChild = current.leftChild;
            }
        }
        else if (current.leftChild == null) { //if the node only has a right child
            if (current == root) { //if the node to delete is the root, set its right child as the new root
                root = current.rightChild;
            } else if (isLeftChild) { //if the node to delete is the left child of its parent, set the parent's left child to the current node's right child
                parent.leftChild = current.rightChild;
            } else { //if the node to delete is the right child of its parent, set the parent's right child to the current node's right child
                parent.rightChild = current.rightChild;
            }
        }
        
        //case 3: node to delete has two children
        else {
            Node successor = getSuccessor(current); //find the successor of the node to delete
            if (current == root) { //if the node to delete is the root
                root = successor; //make the successor the new root
            } else if (isLeftChild) { //if the node to delete is the left child of its parent
                parent.leftChild = successor; //set the parent's left child to the successor
            } else { //if the node to delete is the right child of its parent
                parent.rightChild = successor; //set the parent's right child to the successor
            }
            successor.leftChild = current.leftChild; //set the successor's left child to the current node's left child
        }
        return true; //node successfully deleted
    }
    
    //method to find the successor of a node
    public Node getSuccessor(Node node) {
        Node successorParent = node; //variable to store the parent of the successor
        Node successor = node; //variable to store the successor
        Node current = node.rightChild; //start at the right child of the node
        
        //find the leftmost node in the right subtree, which will be the successor
        while(current != null) {
            successorParent = successor; //update the successor parent
            successor = current; //update the successor
            current = current.leftChild; //go to the left child
        }
        
        if (successor != node.rightChild) { //if the successor is not the node's immediate right child, we need to adjust the tree
            successorParent.leftChild = successor.rightChild; //set the successor's parent's left child to the successor's right child
            successor.rightChild = node.rightChild; //set the successor's right child to the node's right child
        }
        return successor;
    }
}
    
//node class that represents a single node in the binary tree
class Node {
    int key; //the value of the node
    Node leftChild; //the left child of the node
    Node rightChild; //the right child of the node
    
    //constructor to create a new node with a given key
    public Node(int key) {
        this.key = key;
        leftChild = null;
        rightChild = null;
    }
}