/**
 * This is a class representing a library.
 * It contains methods and fields for managing books and library patrons.
 * The class also implements the Comparable interface to allow for comparison between libraries based on their number of books.
 */
public class Library implements Comparable<Library> {

    private String name; // the name of the library
    private int numBooks; // the number of books in the library
    private List<Book> bookCollection; // a list of all the books in the library

    /**
     * Constructor for the Library class.
     * Initializes the name, numBooks, and bookCollection fields.
     * @param name the name of the library
     * @param numBooks the initial number of books in the library
     * @param bookCollection a list of all the books in the library
     */
    public Library(String name, int numBooks, List<Book> bookCollection) {
        this.name = name;
        this.numBooks = numBooks;
        this.bookCollection = bookCollection;
    }

    /**
     * Getter method for the name field.
     * @return the name of the library
     */
    public String getName() {
        return this.name;
    }

    /**
     * Setter method for the name field.
     * @param name the new name for the library
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Method for adding a book to the library's collection.
     * Takes in a Book object and adds it to the bookCollection list.
     * Also increments the numBooks field by 1.
     * @param book the book to be added
     */
    public void addBook(Book book) {
        this.bookCollection.add(book);
        this.numBooks++;
    }

    /**
     * Method for removing a book from the library's collection.
     * Takes in a Book object and removes it from the bookCollection list.
     * Also decrements the numBooks field by 1.
     * @param book the book to be removed
     */
    public void removeBook(Book book) {
        this.bookCollection.remove(book);
        this.numBooks--;
    }

    /**
     * Method for checking out a book from the library to a patron.
     * Takes in a Book object and a Patron object.
     * Removes the book from the bookCollection list and adds it to the patron's checked out books list.
     * @param book the book to be checked out
     * @param patron the patron checking out the book
     */
    public void checkOutBook(Book book, Patron patron) {
        this.bookCollection.remove(book);
        patron.addCheckedOutBook(book);
    }

    /**
     * Method for checking in a book from a patron to the library.
     * Takes in a Book object and a Patron object.
     * Adds the book to the bookCollection list and removes it from the patron's checked out books list.
     * @param book the book to be checked in
     * @param patron the patron returning the book
     */
    public void checkInBook(Book book, Patron patron) {
        this.bookCollection.add(book);
        patron.removeCheckedOutBook(book);
    }

    /**
     * Method for comparing this Library to another Library based on their number of books.
     * Used for sorting libraries in ascending order based on the number of books they have.
     * @param otherLibrary the other Library object to be compared to
     * @return a positive number if this library has more books, a negative number if the other library has more books, or 0 if they have the same number of books
     */
    @Override
    public int compareTo(Library otherLibrary) {
        return this.numBooks - otherLibrary.numBooks;
    }
}