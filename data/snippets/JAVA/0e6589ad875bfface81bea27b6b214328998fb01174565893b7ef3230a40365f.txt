// This program finds the shortest path between two nodes in a graph using the Dijkstra algorithm

import java.util.PriorityQueue;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Dijkstra {

    // Inner class for graph nodes
    class Node implements Comparable<Node> {
        public final String name;
        public Edge[] edges;
        public double distance = Double.POSITIVE_INFINITY;
        public Node previous;

        public Node(String name) {
            this.name = name;
        }

        public String toString() {
            return name;
        }

        public int compareTo(Node other) {
            return Double.compare(distance, other.distance);
        }
    }

    // Inner class for graph edges
    class Edge {
        public final Node target;
        public final double weight;

        public Edge(Node target, double weight) {
            this.target = target;
            this.weight = weight;
        }
    }

    // Method to find shortest path between two nodes in a graph
    public void dijkstra(Node source) {
        PriorityQueue<Node> queue = new PriorityQueue<>();
        source.distance = 0;
        queue.add(source);

        while (!queue.isEmpty()) {
            Node current = queue.poll();

            for (Edge e : current.edges) {
                Node next = e.target;
                double newDistance = current.distance + e.weight;

                if (newDistance < next.distance) {
                    queue.remove(next);
                    next.distance = newDistance;
                    next.previous = current;
                    queue.add(next);
                }
            }
        }
    }

    // Method to retrieve the shortest path from the source to the target node
    public List<Node> getShortestPathTo(Node target) {
        List<Node> path = new ArrayList<>();
        for (Node node = target; node != null; node = node.previous) {
            path.add(node);
        }
        Collections.reverse(path);
        return path;
    }

    // Main method for testing
    public static void main(String[] args) {
        // Initialize the graph
        Node nodeA = new Node("A");
        Node nodeB = new Node("B");
        Node nodeC = new Node("C");
        Node nodeD = new Node("D");
        Node nodeE = new Node("E");
        Node nodeF = new Node("F");
        Node nodeG = new Node("G");

        // Add edges between nodes
        nodeA.edges = new Edge[]{new Edge(nodeB, 3), new Edge(nodeC, 4), new Edge(nodeD, 6)};
        nodeB.edges = new Edge[]{new Edge(nodeE, 1)};
        nodeC.edges = new Edge[]{new Edge(nodeD, 2), new Edge(nodeF, 4)};
        nodeD.edges = new Edge[]{new Edge(nodeE, 6), new Edge(nodeF, 5)};
        nodeE.edges = new Edge[]{new Edge(nodeG, 2)};
        nodeF.edges = new Edge[]{new Edge(nodeG, 3)};

        Dijkstra dijkstra = new Dijkstra();

        // Run algorithm from nodeA
        dijkstra.dijkstra(nodeA);

        // Retrieve shortest path from nodeA to nodeG
        List<Node> path = dijkstra.getShortestPathTo(nodeG);

        // Print out the shortest path and its total distance
        System.out.println("Shortest path from nodeA to nodeG is: " + path);
        System.out.println("Total distance: " + nodeG.distance);
    }
}