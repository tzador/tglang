// This code snippet creates a custom LinkedList class in Java
// with methods for adding, removing, and searching for elements

public class LinkedList<T> {

    // Declaring private variables for the list head and size
    private Node head;
    private int size;

    // Creating a private inner class for the list nodes
    private class Node {
        T data;
        Node next;

        // Constructor for the Node class
        public Node(T data) {
            this.data = data;
            this.next = null;
        }
    }

    // Method for adding an element at the beginning of the list
    public void addFirst(T data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
        size++;
    }

    // Method for adding an element at the end of the list
    public void addLast(T data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        size++;
    }

    // Method for removing an element from the list
    public void remove(T data) {
        Node current = head;
        Node previous = null;
        while (current != null) {
            if (current.data.equals(data)) {
                if (previous == null) {
                    head = current.next;
                } else {
                    previous.next = current.next;
                }
                size--;
                break;
            }
            previous = current;
            current = current.next;
        }
    }

    // Method for searching for an element in the list
    public boolean contains(T data) {
        Node current = head;
        while (current != null) {
            if (current.data.equals(data)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    // Method for getting the size of the list
    public int size() {
        return size;
    }
}