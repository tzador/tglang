/**
* This is a class that represents a deck of playing cards
**/
public class Deck {
    
    /**
    * This is a static variable that represents the number of cards in a deck
    **/
    private static final int NUM_CARDS = 52;
    
    /**
    * This is a private array of type Card that represents the deck of cards
    **/
    private Card[] deck;
    
    /**
    * This is a constructor method that initializes a new deck with all the cards in order
    **/
    public Deck() {
        // creating the deck array
        this.deck = new Card[NUM_CARDS];
        // creating and adding each card to the deck
        int index = 0;
        for (int suit = 0; suit < 4; suit++) {
            for (int rank = 0; rank < 13; rank++) {
                deck[index] = new Card(suit, rank);
                index++;
            }
        }
    }
    
    /**
    * This is a method that shuffles the deck of cards
    **/
    public void shuffle() {
        // creating a temporary deck to hold the shuffled cards
        Card[] temp = new Card[NUM_CARDS];
        // creating a random number generator
        Random rand = new Random();
        // using rand to select a random index to place a card in our temp deck
        for (int i = 0; i < NUM_CARDS; i++) {
            int randIndex = rand.nextInt(NUM_CARDS);
            // checking if the chosen index in our temp deck is empty
            while (temp[randIndex] != null) {
                randIndex = rand.nextInt(NUM_CARDS);
            }
            // adding the card at our current index in the original deck to the chosen index in our temp deck
            temp[randIndex] = deck[i];
        }
        // replacing the original deck with the shuffled deck
        deck = temp;
    }
    
    /**
    * This is a method that deals a card from the top of the deck
    * @return a Card object representing the top card of the deck
    **/
    public Card dealCard() {
        // removing the top card from the deck and saving it in a variable
        Card topCard = this.deck[0];
        // shifting all the other cards to the left to fill the gap
        for (int i = 1; i < NUM_CARDS; i++) {
            deck[i-1] = deck[i];
        }
        // setting the last card in the deck to null
        deck[NUM_CARDS-1] = null;
        // returning the top card that was removed
        return topCard;
    }
}