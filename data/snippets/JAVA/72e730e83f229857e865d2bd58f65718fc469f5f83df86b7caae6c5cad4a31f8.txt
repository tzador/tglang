// This program generates a random array of integers and sorts it using QuickSort

// Function to randomly generate an array of size n
public static int[] generateArray(int size) {
    int[] arr = new int[size];
    Random random = new Random();

    // Fills array with random integers
    for (int i = 0; i < size; i++) {
        arr[i] = random.nextInt(1000);
    }

    return arr;
}

// Function to partition array for QuickSort
public static int partition(int[] arr, int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j < high; j++) {

        // If current element is smaller than or equal to pivot
        if (arr[j] <= pivot) {
            i++;

            // Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // Swap arr[i + 1] and arr[high]
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    return i + 1;
}

// Function to implement QuickSort algorithm
public static void quickSort(int[] arr, int low, int high) {
    if (low < high) {

        // pi is partitioning index
        int pi = partition(arr, low, high);

        // Recursively sort elements before partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Main method to test and print sorted array
public static void main(String[] args) {
    int size = 10;
    int[] arr = generateArray(size);
    System.out.println("Unsorted array: " + Arrays.toString(arr));
    
    quickSort(arr, 0, size - 1);
    System.out.println("Sorted array: " + Arrays.toString(arr));
}