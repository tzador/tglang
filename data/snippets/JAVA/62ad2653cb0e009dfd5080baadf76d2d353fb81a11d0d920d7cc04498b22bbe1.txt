/**
 * This class represents a linked list data structure.
 * It has methods for adding, removing and searching for elements in the list.
 */
public class LinkedList<T> {

    /**
     * This inner class represents a node in the linked list, storing a value and a reference to the next node.
     * @param <T> The type of value stored in the node.
     */
    private class Node<T> {
        T value;
        Node<T> next;

        public Node(T value) {
            this.value = value;
        }
    }

    private Node<T> head;

    /**
     * Adds a new element to the front of the linked list.
     * @param element The element to be added.
     */
    public void add(T element) {
        Node<T> newNode = new Node<>(element);
        newNode.next = head;
        head = newNode;
    }

    /**
     * Removes the first occurrence of a given element from the linked list.
     * @param element The element to be removed.
     * @return True if the element was found and removed, false otherwise.
     */
    public boolean remove(T element) {
        Node<T> current = head;
        Node<T> previous = null;

        while(current != null) {
            if (current.value == element) {
                if (previous == null) {
                    head = head.next;
                } else {
                    previous.next = current.next;
                }

                return true;
            }

            previous = current;
            current = current.next;
        }

        return false;
    }

    /**
     * Searches for a given element in the linked list.
     * @param element The element to be searched for.
     * @return True if the element was found, false otherwise.
     */
    public boolean contains(T element) {
        Node<T> current = head;

        while(current != null) {
            if (current.value == element) {
                return true;
            }
            current = current.next;
        }

        return false;
    }

    /**
     * Returns the length (number of elements) of the linked list.
     * @return The length of the linked list.
     */
    public int size() {
        Node<T> current = head;
        int count = 0;

        while(current != null) {
            count++;
            current = current.next;
        }

        return count;
    }
}