import java.util.*;

/**
 * This is a class for creating a randomly generated maze using Prim's algorithm
 */
public class RandomMazeGenerator {
    
    // class variables to store maze dimensions and walls
    private int maze_width; 
    private int maze_height;
    private ArrayList<Wall> walls;
    
    /**
     * Constructor for the RandomMazeGenerator class
     * @param width the width of the maze
     * @param height the height of the maze
     */
    public RandomMazeGenerator(int width, int height) {
        this.maze_width = width;
        this.maze_height = height;
        walls = new ArrayList<Wall>();
    }
    
    /**
     * Inner class to represent a wall between two cells in the maze
     */
    private class Wall {
        
        // class variables to store the two cells and whether the wall is included in the maze
        private int cell_1;
        private int cell_2;
        private boolean included;
        
        /**
         * Constructor for the Wall class
         * @param cell1 first cell adjacent to the wall
         * @param cell2 second cell adjacent to the wall
         */
        public Wall(int cell1, int cell2) {
            this.cell_1 = cell1;
            this.cell_2 = cell2;
            this.included = false;
        }
        
        /**
         * Getters and setters for the included variable
         */
        public boolean isIncluded() {
            return this.included;
        }
        
        public void setIncluded(boolean included) {
            this.included = included;
        }
        
        /**
         * Getters for the two cells adjacent to the wall
         */
        public int getCell1() {
            return this.cell_1;
        }
        
        public int getCell2() {
            return this.cell_2;
        }
    }
    
    /**
     * Method to generate the maze using Prim's algorithm
     * @return a 2D array representing the maze 
     */
    public int[][] generateMaze() {
        
        // create a 2D array representing the maze with all walls initially included
        int[][] maze = new int[maze_height][maze_width];
        
        // add all walls to the wall list
        for (int i = 0; i < maze_height-1; i++) {
            for (int j = 0; j < maze_width; j++) {
                walls.add(new Wall(i*maze_width+j, (i+1)*maze_width+j));
            }
        }
        for (int i = 0; i < maze_height; i++) {
            for (int j = 0; j < maze_width-1; j++) {
                walls.add(new Wall(i*maze_width+j, i*maze_width+j+1));
            }
        }
        
        // initialize the starting cell and mark it as included
        Random rand = new Random();
        int current_cell = rand.nextInt(maze_height*maze_width);
        maze[current_cell/maze_width][current_cell%maze_width] = 1;
        
        // loop while there are still walls in the list
        while (!walls.isEmpty()) {
            
            // select a random wall from the list
            Wall selected_wall = walls.get(rand.nextInt(walls.size()));
            
            // get the cells adjacent to the wall
            int cell1 = selected_wall.getCell1();
            int cell2 = selected_wall.getCell2();
            
            // check if both cells are already included in the maze
            if (maze[cell1/maze_width][cell1%maze_width] == 1 && maze[cell2/maze_width][cell2%maze_width] == 1) {
                // remove the wall from the list
                walls.remove(selected_wall);
                continue;
            }
            
            // check if only one of the cells is included in the maze
            if (maze[cell1/maze_width][cell1%maze_width] == 1 || maze[cell2/maze_width][cell2%maze_width] == 1) {
                // mark both cells as included and remove the wall from the list
                maze[cell1/maze_width][cell1%maze_width] = 1;
                maze[cell2/maze_width][cell2%maze_width] = 1;
                selected_wall.setIncluded(true);
                walls.remove(selected_wall);
                continue;
            }
            
            // if neither cell is included, mark both as included and remove the wall from the list
            maze[cell1/maze_width][cell1%maze_width] = 1;
            maze[cell2/maze_width][cell2%maze_width] = 1;
            selected_wall.setIncluded(true);
            walls.remove(selected_wall);
        }
        
        // return the generated maze
        return maze;
    }
}