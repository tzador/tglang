public class QuickSort {

    // Method to partition the array
    static int partition(int[] arr, int low, int high) {

        // Choose the pivot element
        int pivot = arr[high];

        // Index of smaller element
        int i = (low - 1);

        for (int j = low; j < high; j++) {

            // If the current element is smaller than or equal to the pivot
            if (arr[j] <= pivot) {

                // Increment the index of smaller element
                i++;

                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i + 1] and arr[high]
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        // Return the index of pivot element
        return i + 1;
    }

    /* The main function that implements QuickSort
    arr[] --> Array to be sorted,
    low  --> Starting index,
    high  --> Ending index */
    static void quickSort(int[] arr, int low, int high) {
        if (low < high) {

            // Index of the pivot element
            int pi = partition(arr, low, high);

            // Sort the elements before and after the pivot element
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    // Driver code to test above functions
    public static void main(String args[]) {
        int[] arr = {10, 7, 8, 9, 1, 5};
        int n = arr.length;

        // Call the sorting method
        quickSort(arr, 0, n - 1);

        // Print the sorted array
        System.out.println("Sorted array: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}