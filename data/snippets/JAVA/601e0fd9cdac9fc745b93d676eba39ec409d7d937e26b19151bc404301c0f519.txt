/* This code snippet generates a random maze using the depth-first search algorithm. */

import java.util.*;

public class RandomMazeGenerator {
    private final int row = 20; // number of rows in the maze
    private final int col = 20; // number of columns in the maze
    private final int startX = 1; // starting x position of the maze
    private final int startY = 1; // starting y position of the maze
    private final int endX = row - 2; // ending x position of the maze
    private final int endY = col - 2; // ending y position of the maze

    private final int[][] maze; // 2D array to store the maze
    private final Random random; // random object for generating random numbers

    public RandomMazeGenerator() {
        maze = new int[row][col];
        random = new Random();
    }

    public void generateMaze() {
        // initialize all cells as walls
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                maze[i][j] = 1;
            }
        }

        // mark starting and ending points as empty
        maze[startX][startY] = 0;
        maze[endX][endY] = 0;

        // use depth-first search to generate the maze
        dfs(startX, startY);

        // print out the maze
        printMaze();
    }

    private void dfs(int currX, int currY) {
        maze[currX][currY] = 0; // mark current cell as empty

        // create a list of neighbors in random order
        List<int[]> neighbors = generateNeighbors(currX, currY);

        // iterate through the list of neighbors
        for (int[] neighbor : neighbors) {
            // if the neighbor is a wall
            if (maze[neighbor[0]][neighbor[1]] == 1) {
                // mark the neighbor as empty
                maze[neighbor[0]][neighbor[1]] = 0;

                // remove the wall between current cell and neighbor cell
                removeWall(currX, currY, neighbor[0], neighbor[1]);

                // recursively call dfs on the neighbor cell
                dfs(neighbor[0], neighbor[1]);
            }
        }
    }

    private List<int[]> generateNeighbors(int currX, int currY) {
        // create a list of all the possible neighbors
        List<int[]> allNeighbors = new ArrayList<>();
        allNeighbors.add(new int[]{currX - 2, currY}); // top neighbor
        allNeighbors.add(new int[]{currX, currY + 2}); // right neighbor
        allNeighbors.add(new int[]{currX + 2, currY}); // bottom neighbor
        allNeighbors.add(new int[]{currX, currY - 2}); // left neighbor

        // shuffle the list of neighbors
        Collections.shuffle(allNeighbors);

        // create a list for the final neighbors
        List<int[]> finalNeighbors = new ArrayList<>();

        // add only the valid neighbors to the final list
        for (int[] neighbor : allNeighbors) {
            if (isValid(neighbor[0], neighbor[1])) {
                finalNeighbors.add(neighbor);
            }
        }

        return finalNeighbors;
    }

    private boolean isValid(int x, int y) {
        // make sure the neighbor is within the boundaries of the maze
        if (x < 0 || x >= row || y < 0 || y >= col) {
            return false;
        }
        // make sure the neighbor is not already empty
        if (maze[x][y] == 0) {
            return false;
        }

        return true;
    }

    private void removeWall(int currX, int currY, int neighborX, int neighborY) {
        // remove the wall between the current cell and the neighbor cell
        int wallX = (int) Math.floor((currX + neighborX) / 2);
        int wallY = (int) Math.floor((currY + neighborY) / 2);
        maze[wallX][wallY] = 0;
    }

    private void printMaze() {
        // print out the maze
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                // if the cell is a wall
                if (maze[i][j] == 1) {
                    System.out.print("â–ˆ");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}