/**
 * This is a complex code snippet in JAVA that uses object-oriented programming concepts.
 * It creates a class called Employee and defines its attributes, methods, and constructors.
 * It also implements an interface and overrides its methods.
 * Finally, it creates an object of the Employee class and calls its methods.
 */

// Creating the interface Department with a method getDepartmentName
interface Department {
    public String getDepartmentName();
}

// Creating class Employee and implementing the Department interface
public class Employee implements Department {
    // Defining private attributes for the class
    private String name;
    private int age;
    private int salary;
    private String department;

    // Creating a constructor that takes in the name, age, and salary of the employee
    public Employee(String name, int age, int salary) {
        // Initializing the attributes using the constructor parameter
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    // Creating a method to set the department of the employee
    public void setDepartment(String department) {
        this.department = department;
    }

    // Creating a method to get the name of the employee
    public String getName() {
        return name;
    }

    // Creating a method to get the age of the employee
    public int getAge() {
        return age;
    }

    // Creating a method to get the salary of the employee
    public int getSalary() {
        return salary;
    }

    @Override
    // Implementing the overridden method from the Department interface
    public String getDepartmentName() {
        return department;
    }

    // Main method to create an object of the Employee class and call its methods
    public static void main(String[] args) {

        // Creating a new instance of the Employee class with name, age, and salary
        Employee employee1 = new Employee("John Smith", 25, 50000);

        // Calling the setDepartment method to set the employee's department
        employee1.setDepartment("Sales");

        // Printing out the employee's name, age, and salary
        System.out.println("Employee Name: " + employee1.getName());
        System.out.println("Employee Age: " + employee1.getAge());
        System.out.println("Employee Salary: " + employee1.getSalary());

        // Calling the overridden method from the Department interface and printing the department name
        System.out.println("Employee Department: " + employee1.getDepartmentName());
    }
}