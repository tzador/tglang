//This code uses the QuickSort algorithm to sort an array of integers in ascending order

//Function to partition the array
public static int partition(int[] arr, int low, int high) {   
    int pivot = arr[high]; //Select the last element as the pivot
    int i = (low - 1); //Index of smaller element
    for (int j = low; j < high; j++) {
        //If current element is smaller than or equal to pivot
        if (arr[j] <= pivot) {
            i++; //Increment index of smaller element
            //Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    //Swap arr[i+1] and arr[high]
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;
}

//Function to perform QuickSort
public static void quickSort(int[] arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high); //Get the partition index
        //Recursive calls to sort the subarrays
        quickSort(arr, low, pi - 1); //Sort elements before partition index
        quickSort(arr, pi + 1, high); //Sort elements after partition index
    }
}

//Example usage
int[] arr = {5, 2, 8, 1, 9};
quickSort(arr, 0, arr.length - 1);
//Output: 1, 2, 5, 8, 9