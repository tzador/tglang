/**
 * This class represents a bank account entity.
 */
public class BankAccount {

    private String accountNumber; // Stores the account number
    private double balance; // Stores the current balance
    private String customerName; // Stores the customer's name
    private String email; // Stores the customer's email
    private long phoneNumber; // Stores the customer's phone number

    /**
     * Constructor for BankAccount class.
     * @param accountNumber the account number to be assigned.
     * @param customerName the name of the customer.
     * @param email the email of the customer.
     * @param phoneNumber the phone number of the customer.
     */
    public BankAccount(String accountNumber, String customerName, String email, long phoneNumber) {
        this.accountNumber = accountNumber;
        this.balance = 0.0;
        this.customerName = customerName;
        this.email = email;
        this.phoneNumber = phoneNumber;
    }

    /**
     * Getter method for account number.
     * @return the account number.
     */
    public String getAccountNumber() {
        return accountNumber;
    }

    /**
     * Getter method for balance.
     * @return the current balance.
     */
    public double getBalance() {
        return balance;
    }

    /**
     * Getter method for customer's name.
     * @return the customer's name.
     */
    public String getCustomerName() {
        return customerName;
    }

    /**
     * Getter method for customer's email.
     * @return the customer's email.
     */
    public String getEmail() {
        return email;
    }

    /**
     * Getter method for customer's phone number.
     * @return the customer's phone number.
     */
    public long getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * Method to deposit money into the account.
     * @param amount the amount to be deposited.
     */
    public void deposit(double amount) {
        this.balance += amount;
        System.out.println("Deposit of " + amount + " successful. New balance is " + balance);
    }

    /**
     * Method to withdraw money from the account.
     * @param amount the amount to be withdrawn.
     */
    public void withdraw(double amount) {
        if (balance - amount < 0) {
            System.out.println("Insufficient funds. Current balance is " + balance);
        } else {
            this.balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful. New balance is " + balance);
        }
    }

    /**
     * Method to update customer's details.
     * @param customerName the new name of the customer.
     * @param email the new email of the customer.
     * @param phoneNumber the new phone number of the customer.
     */
    public void updateCustomerDetails(String customerName, String email, long phoneNumber) {
        this.customerName = customerName;
        this.email = email;
        this.phoneNumber = phoneNumber;
        System.out.println("Customer details updated. New details: Name - " + customerName +
                ", Email - " + email + ", Phone Number - " + phoneNumber);
    }
}