/**
 * This class represents a binary tree data structure.
 *
 * @param <T> the type of elements stored in the tree
 */
class BinaryTree<T> {
    
    // Node class representing the individual nodes in the tree
    class Node {
        T data; // data stored in the node
        Node parent; // parent node
        Node left; // left child node
        Node right; // right child node
        
        //Constructor for the Node class
        Node(T data, Node parent, Node left, Node right) {
            this.data = data;
            this.parent = parent;
            this.left = left;
            this.right = right;
        }
    }
    
    // root node of the tree
    Node root;
    
    // Constructor for the Binary Tree class
    public BinaryTree() {
        this.root = null;
    }
    
    /**
     * Inserts a new node with the given data into the tree.
     *
     * @param data the data to be inserted into the tree
     */
    public void insert(T data) {
        
        // if the tree is empty, create a new root node
        if (this.root == null) {
            this.root = new Node(data, null, null, null);
        } 
        // if the tree is not empty, recursively find the correct position to insert the new node
        else {
            insertHelper(this.root, data);
        }       
    }
    
    /**
     * Recursive helper method for inserting a new node into the tree.
     *
     * @param current the current node being checked
     * @param data the data to be inserted into the tree
     */
    private void insertHelper(Node current, T data) {
        
        // if the data is less than the current node's data, go left
        if (data.compareTo(current.data) < 0) {
            // if there is no left child, insert the new node as the left child
            if (current.left == null) {
                current.left = new Node(data, current, null, null);
            }
            // if there is a left child, recursively find the correct position to insert the new node
            else {
                insertHelper(current.left, data);
            }
        } 
        // if the data is greater than the current node's data, go right
        else {
            // if there is no right child, insert the new node as the right child
            if (current.right == null) {
                current.right = new Node(data, current, null, null);
            }
            // if there is a right child, recursively find the correct position to insert the new node
            else {
                insertHelper(current.right, data);
            }
        }       
    }
    
    /**
     * Checks if the given data is present in the tree.
     *
     * @param data the data to be checked
     * @return true if the data is present, false otherwise
     */
    public boolean contains(T data) {
        
        // if the tree is empty, return false
        if (this.root == null) {
            return false;
        }
        // if the tree is not empty, recursively check if the data is present
        else {
            return containsHelper(this.root, data);
        }
    }
    
    /**
     * Recursive helper method for checking if the given data is present in the tree.
     *
     * @param current the current node being checked
     * @param data the data to be checked
     * @return true if the data is present, false otherwise
     */
    private boolean containsHelper(Node current, T data) {
        
        // if the current node is null, the data is not present in the tree
        if (current == null) {
            return false;
        }
        // if the data is equal to the data stored in the current node, the data is present in the tree
        else if (data.compareTo(current.data) == 0) {
            return true;
        }
        // if the data is less than the data stored in the current node, go left
        else if (data.compareTo(current.data) < 0) {
            return containsHelper(current.left, data);
        }
        // if the data is greater than the data stored in the current node, go right
        else {
            return containsHelper(current.right, data);
        }
    }
}