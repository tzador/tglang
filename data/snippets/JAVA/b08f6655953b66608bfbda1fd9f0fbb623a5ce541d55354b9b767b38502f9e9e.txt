/**
 * This is a complex code snippet in JAVA.
 *
 * It provides a way to sort a list of objects based on a specific property.
 *
 * @param list The list of objects to be sorted
 * @param property The property of the objects to sort by
 * @param ascending Boolean value indicating whether to sort in ascending order
 * @return The sorted list of objects
 */
public List<Object> sortObjects(List<Object> list, String property, boolean ascending) {
  // Create a custom comparator to compare objects based on the given property
  Comparator<Object> comparator = new Comparator<Object>() {
    @Override
    public int compare(Object obj1, Object obj2) {
      // Get the property value of each object using reflection
      Object propertyValue1 = getPropertyValue(obj1, property);
      Object propertyValue2 = getPropertyValue(obj2, property);

      // Compare the property values
      if (propertyValue1 instanceof Comparable && propertyValue2 instanceof Comparable) {
        if (ascending) {
          return ((Comparable) propertyValue1).compareTo((Comparable) propertyValue2);
        } else {
          return ((Comparable) propertyValue2).compareTo((Comparable) propertyValue1);
        }
      } else {
        // Objects cannot be compared using compareTo, so use toString method
        if (ascending) {
          return propertyValue1.toString().compareTo(propertyValue2.toString());
        } else {
          return propertyValue2.toString().compareTo(propertyValue1.toString());
        }
      }
    }
  };

  // Sort the list using the custom comparator
  Collections.sort(list, comparator);

  return list;
}

/**
 * Helper method to get the value of a specific property using reflection.
 *
 * @param object The object to get the property value from
 * @param property The name of the property
 * @return The value of the specified property
 */
private Object getPropertyValue(Object object, String property) {
  try {
    // Get the getter method for the property
    Method method = object.getClass().getMethod("get" + property.substring(0, 1).toUpperCase() + property.substring(1));

    // Invoke the getter method to get the property value
    return method.invoke(object);
  } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
    e.printStackTrace();
  }

  return null;
}

// Example usage:

// Create a list of Person objects
List<Person> personList = new ArrayList<>();
Person person1 = new Person("John", "Doe");
Person person2 = new Person("Jane", "Doe");
Person person3 = new Person("Adam", "Smith");
personList.add(person1);
personList.add(person2);
personList.add(person3);

// Sort the list by first name in ascending order
List<Person> sortedList = sortObjects(personList, "firstName", true);

// Print the sorted list
for (Person person : sortedList) {
  System.out.println(person.getFirstName() + " " + person.getLastName());
}
/** Output:
 * Adam Smith
 * Jane Doe
 * John Doe
 */