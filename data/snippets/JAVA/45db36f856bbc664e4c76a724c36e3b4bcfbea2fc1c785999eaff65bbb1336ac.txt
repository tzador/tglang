/**
 * This class represents a binary search tree data structure.
 * It contains methods for inserting, deleting, and searching for nodes in the tree.
 */
public class BinarySearchTree {

    //Class variables
    private Node root; //Root node of the tree
    private int size; //Number of nodes in the tree

    //Constructors
    public BinarySearchTree() { //Default constructor, creates an empty tree
        root = null;
        size = 0;
    }

    public BinarySearchTree(int data) { //Constructor with initial root node
        root = new Node(data);
        size = 1;
    }

    /**
     * This method inserts a new node with the given data into the tree.
     * @param data The data to be inserted into the tree
     */
    public void insert(int data) {
        if (root == null) { //If tree is empty, make new node the root node
            root = new Node(data);
            size++;
        } else { //Else, find the correct position for the new node and insert it
            Node currentNode = root;
            while (currentNode != null) { //Loop until a leaf node is reached
                if (data < currentNode.getData()) { //If data is less than current node's data, go left
                    if (currentNode.getLeft() == null) { //If left child does not exist, insert new node as left child
                        currentNode.setLeft(new Node(data));
                        size++;
                        return; //Exit method
                    } else { //Else, continue traversing left subtree
                        currentNode = currentNode.getLeft();
                    }
                } else if (data > currentNode.getData()) { //If data is greater than current node's data, go right
                    if (currentNode.getRight() == null) { //If right child does not exist, insert new node as right child
                        currentNode.setRight(new Node(data));
                        size++;
                        return; //Exit method
                    } else { //Else, continue traversing right subtree
                        currentNode = currentNode.getRight();
                    }
                } else { //If data is equal to current node's data, do not insert (no duplicates allowed)
                    return; //Exit method
                }
            }
        }
    }

    /**
     * This method deletes a node with the given data from the tree.
     * @param data The data of the node to be deleted
     */
    public void delete(int data) {
        if (root == null) { //If tree is empty, do nothing
            return;
        } else { //Else, find the node to be deleted and delete it
            Node currentNode = root;
            Node parent = null; //Parent node of current node
            boolean isLeftChild = false; //Boolean to indicate if current node is left child of parent
            //Search for the node to be deleted
            while (currentNode != null) {
                if (data < currentNode.getData()) { //If data is less than current node's data, go left
                    parent = currentNode;
                    currentNode = currentNode.getLeft();
                    isLeftChild = true;
                } else if (data > currentNode.getData()) { //If data is greater than current node's data, go right
                    parent = currentNode;
                    currentNode = currentNode.getRight();
                    isLeftChild = false;
                } else { //Node found
                    break;
                }
            }
            if (currentNode != null) { //If node to be deleted was found
                if (currentNode.getLeft() == null && currentNode.getRight() == null) { //If node is a leaf node
                    if (parent == null) { //If node is root node, set root to null
                        root = null;
                    } else { //Else, set parent's child node to null
                        if (isLeftChild) {
                            parent.setLeft(null);
                        } else {
                            parent.setRight(null);
                        }
                    }
                } else if (currentNode.getLeft() == null || currentNode.getRight() == null) { //If node has only one child
                    Node child = currentNode.getLeft() != null ? currentNode.getLeft() : currentNode.getRight();
                    if (parent == null) { //If node is root node, set root to child
                        root = child;
                    } else { //Else, set parent's child node to child
                        if (isLeftChild) {
                            parent.setLeft(child);
                        } else {
                            parent.setRight(child);
                        }
                    }
                } else { //If node has two children, find successor and replace node with its successor
                    Node successor = getSuccessor(currentNode);
                    if (parent == null) { //If node is root node, set root to successor
                        root = successor;
                    } else { //Else, set parent's child node to successor
                        if (isLeftChild) {
                            parent.setLeft(successor);
                        } else {
                            parent.setRight(successor);
                        }
                    }
                    successor.setLeft(currentNode.getLeft()); //Set successor's left child to node's left child
                }
                size--;
            }
        }
    }

    /**
     * This method searches for a node with the given data in the tree.
     * @param data The data to be searched for
     * @return true if the node is found, false if not
     */
    public boolean search(int data) {
        Node currentNode = root;
        while (currentNode != null) { //Loop until a leaf node is reached
            if (data < currentNode.getData()) { //If data is less than current node's data, go left
                currentNode = currentNode.getLeft();
            } else if (data > currentNode.getData()) { //If data is greater than current node's data, go right
                currentNode = currentNode.getRight();
            } else { //Node found
                return true;
            }
        }
        return false; //Node not found
    }

    /**
     * This method finds the successor of a given node in the tree.
     * Successor is the node with the minimum value in the right subtree of the given node.
     * @param node The given node
     * @return The successor node
     */
    private Node getSuccessor(Node node) {
        Node successor = node.getRight(); //Set successor to right child of given node
        Node parent = node; //Parent of successor node
        while (successor.getLeft() != null) { //Loop until minimum node is found
            parent = successor;
            successor = successor.getLeft();
        }
        parent.setLeft(successor.getRight()); //Set parent's left child to successor's right child
        successor.setRight(node.getRight()); //Set successor's right child to given node's right child
        return successor;
    }

    //Getters and setters
    public int getSize() {
        return size;
    }

    public void setRoot(Node root) {
        this.root = root;
    }

    public Node getRoot() {
        return root;
    }
}

/**
 * This class represents a node in a binary search tree data structure.
 * It contains data and references to left and right child nodes.
 */
class Node {
    private int data; //Data stored in the node
    private Node left; //Reference to left child node
    private Node right; //Reference to right child node

    //Constructors
    public Node() { //Default constructor, creates a node with no data and no child nodes
        data = 0;
        left = null;
        right = null;
    }

    public Node(int data) { //Constructor with given data, creates a node with no child nodes
        this.data = data;
        left = null;
        right = null;
    }

    //Getters and setters
    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public Node getLeft() {
        return left;
    }

    public void setLeft(Node left) {
        this.left = left;
    }

    public Node getRight() {
        return right;
    }

    public void setRight(Node right) {
        this.right = right;
    }
}