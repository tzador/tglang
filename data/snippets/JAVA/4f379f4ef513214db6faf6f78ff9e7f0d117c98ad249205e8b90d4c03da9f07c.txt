/**
 * This is a Java class that implements a binary search tree data structure.
 */
public class BinarySearchTree<T extends Comparable<T>> {
    /**
     * This class represents a node in the binary search tree.
     */
    private class Node {
        T data; // data stored in the node
        Node left; // left child node
        Node right; // right child node

        /**
         * Constructor for creating a new node with given data.
         * @param data the data to be stored in the node
         */
        public Node(T data) {
            this.data = data;
            left = null;
            right = null;
        }
    }

    private Node root; // root node of the binary search tree

    /**
     * Inserts a new element into the binary search tree.
     * @param data the element to be inserted
     */
    public void insert(T data) {
        root = insert(root, data);
    }

    /**
     * Helper method for inserting a new element into the binary search tree.
     * @param node the current node being checked
     * @param data the element to be inserted
     * @return the updated node
     */
    private Node insert(Node node, T data) {
        if (node == null) {
            // base case: reached the position for inserting the new node
            node = new Node(data);
        } else if (data.compareTo(node.data) < 0) {
            // element is less than current node's data, insert into left subtree
            node.left = insert(node.left, data);
        } else if (data.compareTo(node.data) > 0) {
            // element is greater than current node's data, insert into right subtree
            node.right = insert(node.right, data);
        }
        return node;
    }

    /**
     * Searches for an element in the binary search tree.
     * @param key the element to be searched for
     * @return true if the element is found, false otherwise
     */
    public boolean search(T key) {
        return search(root, key);
    }

    /**
     * Helper method for searching for an element in the binary search tree.
     * @param node the current node being checked
     * @param key the element to be searched for
     * @return true if the element is found, false otherwise
     */
    private boolean search(Node node, T key) {
        if (node == null) {
            // base case: reached the end of tree without finding the element
            return false;
        } else if (key.compareTo(node.data) == 0) {
            // element is equal to current node's data, found it
            return true;
        } else if (key.compareTo(node.data) < 0) {
            // element is less than current node's data, search left subtree
            return search(node.left, key);
        } else {
            // element is greater than current node's data, search right subtree
            return search(node.right, key);
        }
    }

    /**
     * Deletes an element from the binary search tree.
     * @param key the element to be deleted
     */
    public void delete(T key) {
        root = delete(root, key);
    }

    /**
     * Helper method for deleting an element from the binary search tree.
     * @param node the current node being checked
     * @param key the element to be deleted
     * @return the updated node
     */
    private Node delete(Node node, T key) {
        if (node == null) {
            // base case: reached the end of tree without finding the element
            return node;
        } else if (key.compareTo(node.data) < 0) {
            // element is less than current node's data, delete from left subtree
            node.left = delete(node.left, key);
        } else if (key.compareTo(node.data) > 0) {
            // element is greater than current node's data, delete from right subtree
            node.right = delete(node.right, key);
        } else {
            // element is equal to current node's data, found it
            // case 1: no children, simply delete the node
            if (node.left == null && node.right == null) {
                node = null;
            }
            // case 2: one child, replace node with its child
            else if (node.left == null) {
                node = node.right;
            } else if (node.right == null) {
                node = node.left;
            }
            // case 3: two children, find replacement node (leftmost child of right subtree) and delete it recursively
            else {
                Node replacement = findMin(node.right);
                node.data = replacement.data;
                node.right = delete(node.right, replacement.data);
            }
        }
        return node;
    }

    /**
     * Finds the minimum element in the given binary search tree.
     * @param node the root node of the tree to be searched
     * @return the minimum element in the tree
     */
    private Node findMin(Node node) {
        if (node.left == null) {
            // base case: found the leftmost child of the tree
            return node;
        }
        return findMin(node.left);
    }
}