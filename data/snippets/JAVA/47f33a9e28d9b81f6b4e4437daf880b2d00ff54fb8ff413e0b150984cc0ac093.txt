/**
 * This is a complex code snippet in JAVA.
 * It demonstrates how to implement a priority queue using a binary heap.
 * The priority queue is generic and can hold any type of data.
 */

// class for priority queue
class PriorityQueue<T> {
    private int size;   // current size of the priority queue
    private T[] arr;    // array to store the elements of priority queue
    private int capacity;   // maximum size of the priority queue

    //constructor to initialize the priority queue
    PriorityQueue(int capacity) {
        this.size = 0;
        this.capacity = capacity;
        this.arr = (T[]) new Object[capacity];
    }

    // method to check if the priority queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // method to check if the priority queue is full
    public boolean isFull() {
        return size == capacity;
    }

    // method to return the size of the priority queue
    public int size() {
        return size;
    }

    // method to insert an element into the priority queue
    public void insert(T element) {
        if (size == capacity) {
            System.out.println("Priority queue is full.");
            return;
        }
        arr[size] = element;
        size++;
        heapifyUp(size - 1);
    }

    // method to remove and return the element with highest priority from the priority queue
    public T extractHighestPriority() {
        if (size == 0) {
            return null;
        }
        T result = arr[0];
        arr[0] = arr[size - 1];
        size--;
        heapifyDown(0);
        return result;
    }

    // method to maintain the heap property by moving the element up in the heap
    private void heapifyUp(int index) {
        while (index > 0 && ((Comparable<T>) arr[index]).compareTo(arr[parent(index)]) > 0) {
            swapElements(index, parent(index));
            index = parent(index);
        }
    }

    // method to maintain the heap property by moving the element down in the heap
    private void heapifyDown(int index) {
        while (leftChild(index) < size) {
            int childIndex = leftChild(index);
            if (childIndex + 1 < size && ((Comparable<T>) arr[childIndex + 1]).compareTo(arr[childIndex]) > 0) {
                childIndex++;
            }
            if (((Comparable<T>) arr[index]).compareTo(arr[childIndex]) < 0) {
                swapElements(index, childIndex);
                index = childIndex;
            } else {
                break;
            }
        }
    }

    // method to swap two elements in the priority queue
    private void swapElements(int a, int b) {
        T temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    // method to find the parent index of a given index
    private int parent(int index) {
        return (index - 1) / 2;
    }

    // method to find the left child index of a given index
    private int leftChild(int index) {
        return (2 * index) + 1;
    }

    // method to find the right child index of a given index
    private int rightChild(int index) {
        return (2 * index) + 2;
    }
}