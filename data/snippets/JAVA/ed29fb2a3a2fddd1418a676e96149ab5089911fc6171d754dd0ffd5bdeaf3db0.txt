/*
This code snippet shows an example of a binary search algorithm.
It takes in a sorted array and a key to search for.
If the key is found, it returns the index at which it is located in the array.
If the key is not found, it returns -1.
*/

// Define a function for binary search
public static int binarySearch (int[] arr, int key) {         
   int low = 0, high = arr.length - 1; // initialize low and high indices

   // Loop until low index is less than or equal to high index
   while (low <= high) { 
       int mid = (low + high) / 2; // calculate mid index

       // Check if key is present at mid index
       if (arr[mid] == key) { 
           return mid; // return mid index
       } 
       
       // If key is greater than element at mid index, search in right half of array
       else if (arr[mid] < key) { 
           low = mid + 1; // update low index
       } 
       
       // If key is less than element at mid index, search in left half of array
       else { 
           high = mid - 1; // update high index
       } 
   } 

   return -1; // return -1 if key is not found
} 

// Example usage of the binarySearch function
int[] arr = {4, 8, 12, 16, 20, 24};
int key = 12;
int result = binarySearch(arr, key); // returns 2, as 12 is located at index 2 in the array