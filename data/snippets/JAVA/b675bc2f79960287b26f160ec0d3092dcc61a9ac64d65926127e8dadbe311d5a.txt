public class QuickSort {
    // Initialize array of integers to be sorted
    static int[] arr = { 9, 5, 8, 3, 2, 1, 4, 6, 7, 0 };

    // Define a method to perform quick sort
    public static void quickSort(int low, int high) {
        // Check base case
        if (low < high) {
            // Select a pivot element
            int pivot = arr[(low + high) / 2];
            // Initialize pointers
            int left = low;
            int right = high;
            // Perform partitioning
            while (left <= right) {
                // Find an element on the left that should be on the right
                while (arr[left] < pivot) {
                    left++;
                }
                // Find an element on the right that should be on the left
                while (arr[right] > pivot) {
                    right--;
                }
                // Swap elements at left and right pointers
                if (left <= right) {
                    int temp = arr[left];
                    arr[left] = arr[right];
                    arr[right] = temp;
                    // Move pointers to next element
                    left++;
                    right--;
                }
            }
            // Recursively call quickSort on partitions
            quickSort(low, right);
            quickSort(left, high);
        }
    }

    // Main method to test quicksort
    public static void main(String[] args) {
        // Print unsorted array
        System.out.println("Unsorted array:");
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
        // Sort array using quicksort
        quickSort(0, arr.length - 1);
        // Print sorted array
        System.out.println("Sorted array:");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}