//This code snippet is a sorting algorithm called Merge Sort
//It uses divide and conquer strategy to sort an array of integers
class MergeSort
{
    //Function that merges two subarrays of arr[]
    void merge(int arr[], int l, int m, int r)
    {
        //Length of two subarrays
        int n1 = m - l + 1;
        int n2 = r - m;

        //Create temporary arrays for left and right subarrays
        int left[] = new int[n1];
        int right[] = new int[n2];

        //Copy elements of arr[] to left and right subarrays
        for (int i = 0; i < n1; ++i)
            left[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            right[j] = arr[m + 1 + j];

        //Initialize indices of temporary arrays
        int i = 0, j = 0;

        //Initial index of merged subarray
        int k = l;
        
        //Merge the temporary arrays back into arr[]
        while (i < n1 && j < n2)
        {
            if (left[i] <= right[j])
            {
                arr[k] = left[i];
                i++;
            }
            else
            {
                arr[k] = right[j];
                j++;
            }
            k++;
        }

        //Copy remaining elements of left subarray
        while (i < n1)
        {
            arr[k] = left[i];
            i++;
            k++;
        }

        //Copy remaining elements of right subarray
        while (j < n2)
        {
            arr[k] = right[j];
            j++;
            k++;
        }
    }

    //Main function that sorts arr[l..r] using merge()
    void sort(int arr[], int l, int r)
    {
        if (l < r)
        {
            //Find the middle point
            int m = (l + r) / 2;

            //Sort first and second halves
            sort(arr, l, m);
            sort(arr, m + 1, r);

            //Merge the sorted halves
            merge(arr, l, m, r);
        }
    }

    //Utility function to print the array
    void printArray(int arr[])
    {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    //Driver method to test above algorithm
    public static void main(String args[])
    {
        int arr[] = { 12, 11, 13, 5, 6, 7 };

        System.out.println("Original array:");
        MergeSort obj = new MergeSort();
        obj.printArray(arr);

        //Perform merge sort
        obj.sort(arr, 0, arr.length - 1);

        //Output sorted array
        System.out.println("Sorted array:");
        obj.printArray(arr);
    }
}