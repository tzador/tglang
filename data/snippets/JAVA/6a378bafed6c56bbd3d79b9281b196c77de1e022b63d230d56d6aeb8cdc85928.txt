/**
 * This class represents a customized HashMap implementation.
 * It uses an underlying array to store key-value pairs.
 * Uses open addressing and linear probing for collision resolution.
 */
public class CustomHashMap<K, V> {
    
    // Define capacity and load factor
    private int capacity;
    private float loadFactor;
    
    // Define array for storing key-value pairs
    private Pair<K, V>[] array;
    
    /**
     * Constructor to initialize the CustomHashMap with given capacity and load factor.
     * @param initialCapacity The initial capacity of the CustomHashMap.
     * @param initialLoadFactor The initial load factor of the CustomHashMap.
     */
    public CustomHashMap(int initialCapacity, float initialLoadFactor) {
        
        // Check for valid initialCapacity and initialLoadFactor
        if (initialCapacity <= 0) throw new IllegalArgumentException("Initial capacity must be a positive integer.");
        if (initialLoadFactor <= 0 || initialLoadFactor > 1.0) throw new IllegalArgumentException("Initial load factor must be between 0 and 1.");
        
        // Initialize capacity and load factor
        this.capacity = initialCapacity;
        this.loadFactor = initialLoadFactor;
        
        // Initialize array
        this.array = new Pair[capacity];
    }
    
    /**
     * Internal class to represent a key-value pair in the CustomHashMap.
     * @param <K> The type of the key.
     * @param <V> The type of the value.
     */
    private static class Pair<K, V> {
        
        private final K key;
        private V value;
        
        // Constructor to create a pair with given key and value.
        public Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }
        
        // Getters and setters for key and value
        public K getKey() {
            return key;
        }
        
        public V getValue() {
            return value;
        }
        
        public void setValue(V value) {
            this.value = value;
        }
        
    }
    
    /**
     * Method to insert a key-value pair into the CustomHashMap.
     * @param key The key of the pair.
     * @param value The value of the pair.
     */
    public void put(K key, V value) {
        
        // Calculate the index for the key in the array
        int index = key.hashCode() % capacity;
        
        // Check if the slot is already occupied
        while (array[index] != null) {
            // If the key already exists, update the value
            if (array[index].getKey().equals(key)) {
                array[index].setValue(value);
                return;
            }
            // Increment the index using linear probing
            index = (index + 1) % capacity;
        }
        
        // If the slot is empty, add the new key-value pair
        array[index] = new Pair<>(key, value);
    }
    
    /**
     * Method to get the value corresponding to a key in the CustomHashMap.
     * @param key The key whose value is to be retrieved.
     * @return The value corresponding to the key if it exists, otherwise null.
     */
    public V get(K key) {
        
        // Calculate the index for the key in the array
        int index = key.hashCode() % capacity;
        
        // Check if the slot is already occupied
        while (array[index] != null) {
            // If the key is found, return the value
            if (array[index].getKey().equals(key)) {
                return array[index].getValue();
            }
            // Increment the index using linear probing
            index = (index + 1) % capacity;
        }
        
        // If the key is not found, return null
        return null;
    }
    
    /**
     * Method to remove a key-value pair from the CustomHashMap.
     * @param key The key to be removed.
     * @return The value corresponding to the key if it exists, otherwise null.
     */
    public V remove(K key) {
        
        // Calculate the index for the key in the array
        int index = key.hashCode() % capacity;
        
        // Check if the slot is already occupied
        while (array[index] != null) {
            // If the key is found, remove the key-value pair and return the value
            if (array[index].getKey().equals(key)) {
                V value = array[index].getValue();
                array[index] = null;
                return value;
            }
            // Increment the index using linear probing
            index = (index + 1) % capacity;
        }
        
        // If the key is not found, return null
        return null;
    }
    
    /**
     * Method to check if the CustomHashMap contains a specific key.
     * @param key The key to be checked.
     * @return true if the key exists, false otherwise.
     */
    public boolean containsKey(K key) {
        
        // Calculate the index for the key in the array
        int index = key.hashCode() % capacity;
        
        // Check if the slot is already occupied
        while (array[index] != null) {
            // If the key is found, return true
            if (array[index].getKey().equals(key)) {
                return true;
            }
            // Increment the index using linear probing
            index = (index + 1) % capacity;
        }
        
        // If the key is not found, return false
        return false;
    }
    
    /**
     * Method to check if the CustomHashMap contains a specific value.
     * @param value The value to be checked.
     * @return true if the value exists, false otherwise.
     */
    public boolean containsValue(V value) {
        
        // Loop through all the key-value pairs in the array
        for (Pair<K, V> pair : array) {
            // If the current pair is not null and the value matches, return true
            if (pair != null && pair.getValue().equals(value)) {
                return true;
            }
        }
        
        // If the value is not found, return false
        return false;
    }
    
    /**
     * Method to resize the CustomHashMap when the load factor is exceeded.
     */
    private void resize() {
        
        // Create a temporary array to store the old key-value pairs
        Pair<K, V>[] temp = array;
        
        // Double the capacity of the CustomHashMap
        capacity = capacity * 2;
        
        // Re-initialize the array with new capacity
        array = new Pair[capacity];
        
        // Loop through all the key-value pairs in the temp array
        for (Pair<K, V> pair : temp) {
            // If the current pair is not null, reinsert it into the resized CustomHashMap
            if (pair != null) {
                put(pair.getKey(), pair.getValue());
            }
        }
        
    }
    
    /**
     * Method to get the size of the CustomHashMap.
     * @return The number of key-value pairs in the CustomHashMap.
     */
    public int size() {
        
        // Initialize count to 0
        int count = 0;
        
        // Loop through all the key-value pairs in the array
        for (Pair<K, V> pair : array) {
            // If the current pair is not null, increment the count
            if (pair != null) {
                count++;
            }
        }
        
        // Return the final count
        return count;
    }
    
    /**
     * Method to check if the CustomHashMap is empty or not.
     * @return true if the CustomHashMap is empty, false otherwise.
     */
    public boolean isEmpty() {
        
        // If the size of the CustomHashMap is 0, return true
        if (size() == 0) return true;
        
        // If the size of the CustomHashMap is greater than 0, return false
        return false;
    }
}