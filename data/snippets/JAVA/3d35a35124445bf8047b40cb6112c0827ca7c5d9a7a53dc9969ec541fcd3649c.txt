/**
 * This class represents a binary search tree node.
 */
public class BinarySearchTreeNode {
    
    private int key;
    private BinarySearchTreeNode leftChild;
    private BinarySearchTreeNode rightChild;
    
    /**
     * Constructor for the BinarySearchTreeNode class.
     * @param key the value of the node
     */
    public BinarySearchTreeNode(int key) {
        this.key = key;
        this.leftChild = null;
        this.rightChild = null;
    }
    
    /**
     * Method to insert a new node into the binary search tree.
     * @param key the value of the new node
     */
    public void insert(int key) {
        if (key < this.key) { // if key is less than current node, check left subtree
            if (leftChild == null) { // if left child is null, create new node
                leftChild = new BinarySearchTreeNode(key);
            } else { // else recursively call insert on left child
                leftChild.insert(key);
            }
        } else if (key > this.key) { // if key is greater than current node, check right subtree
            if (rightChild == null) { // if right child is null, create new node
                rightChild = new BinarySearchTreeNode(key);
            } else { // else recursively call insert on right child
                rightChild.insert(key);
            }
        } else { // key already exists, do nothing
            return;
        }
    }
    
    /**
     * Method to search for a value in the binary search tree.
     * @param key the value to search for
     * @return true if the value is found, false otherwise
     */
    public boolean search(int key) {
        if (key == this.key) { // if key is equal to current node, return true
            return true;
        } else if (key < this.key && leftChild != null) { // if key is less than current node and left child is not null, recursively call search on left subtree
            return leftChild.search(key);
        } else if (key > this.key && rightChild != null) { // if key is greater than current node and right child is not null, recursively call search on right subtree
            return rightChild.search(key);
        } else { // key not found, return false
            return false;
        }
    }
    
    /**
     * Method to delete a value from the binary search tree.
     * @param key the value to be deleted
     * @return true if the value is successfully deleted, false otherwise
     */
    public boolean delete(int key) {
        // Search for the node to be deleted
        BinarySearchTreeNode nodeToDelete = findNode(key);
        
        // If node is not found, return false
        if (nodeToDelete == null) {
            return false;
        }
        
        // If node has no children (leaf node), just set the parent's child to null
        if (nodeToDelete.leftChild == null && nodeToDelete.rightChild == null) {
            setChildToNull(nodeToDelete);
        }
        // If node has only one child, set the parent's child to the child of the node to be deleted
        else if (nodeToDelete.leftChild == null) {
            setChildToParent(nodeToDelete, nodeToDelete.rightChild);
        } else if (nodeToDelete.rightChild == null) {
            setChildToParent(nodeToDelete, nodeToDelete.leftChild);
        }
        // If node has two children, find the smallest node in the right subtree and replace the current node with it
        else {
            BinarySearchTreeNode smallestNode = nodeToDelete.rightChild;
            while (smallestNode.leftChild != null) {
                smallestNode = smallestNode.leftChild;
            }
            int smallestKey = smallestNode.key;
            delete(smallestKey);
            nodeToDelete.key = smallestKey;
        }
        
        return true;
    }
    
    /**
     * Method to set the parent's child to null when deleting a leaf node.
     * @param nodeToDelete the node to be deleted
     */
    private void setChildToNull(BinarySearchTreeNode nodeToDelete) {
        if (nodeToDelete == nodeToDelete.parent.leftChild) {
            nodeToDelete.parent.leftChild = null;
        } else {
            nodeToDelete.parent.rightChild = null;
        }
    }
    
    /**
     * Method to set the parent's child to the child of the node to be deleted.
     * @param nodeToDelete the node to be deleted
     * @param child the child of the node to be deleted
     */
    private void setChildToParent(BinarySearchTreeNode nodeToDelete, BinarySearchTreeNode child) {
        if (nodeToDelete == nodeToDelete.parent.leftChild) {
            nodeToDelete.parent.leftChild = child;
        } else {
            nodeToDelete.parent.rightChild = child;
        }
    }
    
    /**
     * Method to find the node with the specified value.
     * @param key the value of the node to find
     * @return the node if found, null otherwise
     */
    private BinarySearchTreeNode findNode(int key) {
        BinarySearchTreeNode current = this;
        while (current != null) {
            if (current.key == key) {
                return current;
            }
            else if (current.key > key) {
                current = current.leftChild;
            } else {
                current = current.rightChild;
            }
        }
        return null;
    }
}