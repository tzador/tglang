/* This is a snippet of Java code that creates a custom LinkedList class with methods for
 * adding, removing, searching, and printing the elements in the list. */

public class LinkedList<E> {

    /* Node class to hold the data and reference to the next node in the list */
    private class Node {

        private E data;
        private Node next;

        /* Constructor for creating a new node with given data */
        private Node(E data) {
            this.data = data;
            this.next = null;
        }
    }

    private int size;
    private Node head;
    private Node tail;

    /* Constructor for creating an empty LinkedList with default values */
    public LinkedList() {
        this.size = 0;
        this.head = null;
        this.tail = null;
    }

    /* Method to add a new node with given data to the end of the list */
    public void add(E data) {
        Node newNode = new Node(data);

        /* If list is empty, set head and tail to new node */
        if (head == null) {
            head = newNode;
            tail = newNode;
        }
        /* If list is not empty, add new node after tail and update tail */
        else {
            tail.next = newNode;
            tail = newNode;
        }
        size++; // Increment list size
    }

    /* Method to remove the first occurrence of a given data from the list */
    public void remove(E data) {
        Node current = head;
        Node previous = null;

        /* Iterate through the list until data is found or end of list is reached */
        while (current != null) {
            if (current.data == data) {
                /* If data is found at first node, update head */
                if (previous == null) {
                    head = current.next;
                }
                /* If data is found at last node, update tail */
                if (current.next == null) {
                    tail = previous;
                }
                /* Remove current node by updating previous' next reference */
                previous.next = current.next;
                size--; // Decrement list size
                return; // Exit method after first occurrence is removed
            }
            previous = current;
            current = current.next;
        }
    }

    /* Method to search for a given data in the list and return its index */
    public int search(E data) {
        Node current = head;
        int index = 0;

        /* Iterate through the list until data is found or end of list is reached */
        while (current != null) {
            if (current.data == data) {
                return index; // Return index of first occurrence
            }
            index++;
            current = current.next;
        }
        return -1; // Return -1 if data is not found
    }

    /* Method to print all the elements in the list */
    public void printList() {
        Node current = head;

        /* Iterate through the list and print each element */
        while (current != null) {
            System.out.println(current.data);
            current = current.next;
        }
    }
}