/**
* This is a complex example of a generic class in Java.
* It implements Comparable interface and has constructors, methods, and a nested class.
*/

/* Generic class with type parameter T, which extends Comparable interface */

class ComplexExample<T extends Comparable<T>> {

    /* Nested class with private instance variable */

    private class NestedClass {

        private T value;

        /* Constructor with parameter */

        public NestedClass(T value) {
            this.value = value;
        }

        /* Getter method */

        public T getValue() {
            return this.value;
        }
    }

    /* Private instance variables */

    private T firstValue;
    private T secondValue;

    /* Constructor with parameters */

    public ComplexExample(T firstValue, T secondValue) {
        this.firstValue = firstValue;
        this.secondValue = secondValue;
    }

    /* Method that returns the maximum value between two values */

    public T getMax() {
        if (this.firstValue.compareTo(this.secondValue) > 0) {
            return this.firstValue;
        } else {
            return this.secondValue;
        }
    }

    /* Method that returns the minimum value between two values */

    public T getMin() {
        if (this.firstValue.compareTo(this.secondValue) < 0) {
            return this.firstValue;
        } else {
            return this.secondValue;
        }
    }

    /* Method that returns the sum of two values */

    public T getSum() {
        return (T) (Integer) (this.firstValue.intValue() + this.secondValue.intValue());
    }

    /* Method that returns a NestedClass object with a given parameter */

    public NestedClass getNestedClass(T value) {
        return new NestedClass(value);
    }
}

/* Code snippet to test the ComplexExample class */

public class Main {
    public static void main(String[] args) {

        /* Creating an instance of ComplexExample class with Integer type parameter */

        ComplexExample<Integer> numExample = new ComplexExample(10, 5);

        /* Using getMax, getMin, and getSum methods and printing the results */

        System.out.println("Max value is: " + numExample.getMax());
        System.out.println("Min value is: " + numExample.getMin());
        System.out.println("Sum is: " + numExample.getSum());

        /* Creating an instance of NestedClass and calling the getValue method */

        ComplexExample<Integer>.NestedClass nestedClass = numExample.getNestedClass(7);
        System.out.println("Value from NestedClass is: " + nestedClass.getValue());
    }
}