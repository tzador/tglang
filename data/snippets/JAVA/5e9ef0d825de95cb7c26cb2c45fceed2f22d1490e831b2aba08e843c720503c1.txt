/**
 * This class represents a binary search tree data structure.
 */
public class BinarySearchTree {

    /**
     * This inner class represents a single node in the binary search tree.
     */
    private class Node {
        int value;
        Node left;
        Node right;

        public Node(int val) {
            this.value = val;
            this.left = null;
            this.right = null;
        }
    }

    private Node root;

    /**
     * This method inserts a new value into the binary search tree.
     * 
     * @param val The value to be inserted.
     */
    public void insert(int val) {
        this.root = insertHelper(this.root, val);
    }

    /**
     * This helper method recursively inserts a new value into the binary search tree.
     * 
     * @param root The root node of the current subtree.
     * @param val The value to be inserted.
     * @return The root node of the updated subtree.
     */
    private Node insertHelper(Node root, int val) {
        if (root == null) {
            return new Node(val);
        }

        if (val < root.value) {
            root.left = insertHelper(root.left, val);
        } else if (val > root.value) {
            root.right = insertHelper(root.right, val);
        }

        return root;
    }

    /**
     * This method searches for a given value in the binary search tree and returns true if found, false if not found.
     * 
     * @param val The value to be searched for.
     * @return True if the value is found, false otherwise.
     */
    public boolean search(int val) {
        return searchHelper(this.root, val);
    }

    /**
     * This helper method recursively searches for a given value in the binary search tree.
     * 
     * @param root The root node of the current subtree.
     * @param val The value to be searched for.
     * @return True if the value is found, false otherwise.
     */
    private boolean searchHelper(Node root, int val) {
        if (root == null) {
            return false;
        }

        if (val == root.value) {
            return true;
        } else if (val < root.value) {
            return searchHelper(root.left, val);
        } else {
            return searchHelper(root.right, val);
        }
    }

    /**
     * This method deletes a given value from the binary search tree.
     * 
     * @param val The value to be deleted.
     * @return True if the value is successfully deleted, false if not found.
     */
    public boolean delete(int val) {
        return deleteHelper(this.root, val);
    }

    /**
     * This helper method recursively deletes a given value from the binary search tree.
     * 
     * @param root The root node of the current subtree.
     * @param val The value to be deleted.
     * @return True if the value is successfully deleted, false if not found.
     */
    private boolean deleteHelper(Node root, int val) {
        // Search for the node to be deleted
        if (root == null) {
            return false;
        } else if (val < root.value) {
            root.left = deleteHelper(root.left, val);
        } else if (val > root.value) {
            root.right = deleteHelper(root.right, val);
        } else {
            // Found the node to be deleted
            if (root.left == null) {
                // If the node to be deleted has no left child, replace it with its right child
                return root.right;
            } else if (root.right == null) {
                // If the node to be deleted has no right child, replace it with its left child
                return root.left;
            } else {
                // If the node to be deleted has two children, replace it with the smallest value in its right subtree
                root.value = minValue(root.right);

                // Delete the smallest value in the right subtree
                root.right = deleteHelper(root.right, root.value);
            }
        }

        return root;
    }

    /**
     * This method finds the smallest value in a binary search tree.
     * 
     * @param root The root node of the binary search tree.
     * @return The smallest value in the tree.
     */
    private int minValue(Node root) {
        int min = root.value;
        while (root.left != null) {
            min = root.left.value;
            root = root.left;
        }

        return min;
    }
}