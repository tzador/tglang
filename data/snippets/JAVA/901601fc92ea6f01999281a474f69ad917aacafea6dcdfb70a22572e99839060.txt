/**
 * This is a Java program that demonstrates the use of classes and objects.
 * It creates a class TicTacToe which represents the tic-tac-toe game and
 * has methods to display the game board, make a move, check for a winner,
 * and reset the game.
 */

//Defining the TicTacToe class
public class TicTacToe {

    //Declaring the game board as a 2D char array
    char[][] gameBoard;

    //Constructor to initialize and display the empty game board
    public TicTacToe() {
        gameBoard = new char[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                gameBoard[i][j] = '-';
            }
        }
        displayBoard();
    }

    //Method to display the game board with labels for rows and columns
    public void displayBoard() {
        System.out.println("  1   2   3 ");
        System.out.println("    |   |   ");
        System.out.println("a " + gameBoard[0][0] + " | " + gameBoard[0][1] + " | " + gameBoard[0][2] + " ");
        System.out.println("   -----------");
        System.out.println("b " + gameBoard[1][0] + " | " + gameBoard[1][1] + " | " + gameBoard[1][2] + " ");
        System.out.println("   -----------");
        System.out.println("c " + gameBoard[2][0] + " | " + gameBoard[2][1] + " | " + gameBoard[2][2] + " ");
    }

    //Method to make a move by placing a player's symbol on the game board
    public void makeMove(int row, int col, char symbol) {
        if (gameBoard[row][col] == '-') {
            gameBoard[row][col] = symbol;
        } else {
            System.out.println("Invalid move! Please try again.");
        }
    }

    //Method to check if there is a winning combination on the game board
    //and return the symbol of the winning player, or '-' if there is no winner
    public char checkWinner() {
        //Check rows for a winning combination
        if (checkRows()) {
            return gameBoard[0][0];
        } else if (checkRows()) {
            return gameBoard[1][0];
        } else if (checkRows()) {
            return gameBoard[2][0];
        }

        //Check columns for a winning combination
        if (checkColumns()) {
            return gameBoard[0][0];
        } else if (checkColumns()) {
            return gameBoard[0][1];
        } else if (checkColumns()) {
            return gameBoard[0][2];
        }

        //Check diagonals for a winning combination
        if (checkDiagonals()) {
            return gameBoard[0][0];
        } else if (checkDiagonals()) {
            return gameBoard[1][1];
        } else if (checkDiagonals()) {
            return gameBoard[2][2];
        }

        //If there is no winning combination, return '-'
        return '-';
    }

    //Helper method to check rows for a winning combination
    private boolean checkRows() {
        if (gameBoard[0][0] != '-') {
            return gameBoard[0][0] == gameBoard[0][1] && gameBoard[0][1] == gameBoard[0][2];
        }
        return false;
    }

    //Helper method to check columns for a winning combination
    private boolean checkColumns() {
        if (gameBoard[0][0] != '-') {
            return gameBoard[0][0] == gameBoard[1][0] && gameBoard[1][0] == gameBoard[2][0];
        }
        return false;
    }

    //Helper method to check diagonals for a winning combination
    private boolean checkDiagonals() {
        if (gameBoard[1][1] != '-') {
            return gameBoard[0][0] == gameBoard[1][1] && gameBoard[1][1] == gameBoard[2][2] ||
                gameBoard[0][2] == gameBoard[1][1] && gameBoard[1][1] == gameBoard[2][0];
        }
        return false;
    }

    //Method to reset the game board to its initial state with all '-' symbols
    public void resetGame() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                gameBoard[i][j] = '-';
            }
        }
    }

    //Main method to run the tic-tac-toe game
    public static void main(String[] args) {
        //Create new instance of TicTacToe
        TicTacToe game = new TicTacToe();

        //Variable to keep track of current player's turn
        int player = 1;
        //Variable to store the symbol of the current player
        char symbol = 'X';

        //Loop through the game until a winner is determined or the game is reset
        while (game.checkWinner() == '-' && player < 10) {
            //Determine the player's move based on player number
            if (player % 2 == 1) {
                symbol = 'X';
            } else {
                symbol = 'O';
            }
            //Prompt the player to make a move
            System.out.println("Player " + symbol + "'s turn. Please choose a row (a, b, c) and column (1, 2, 3) to make your move.");
            //Get user input for row and column
            Scanner scanner = new Scanner(System.in);
            String rowInput = scanner.next();
            int columnInput = scanner.nextInt();
            //Convert row input to integer index
            int rowIndex = 0;
            switch (rowInput) {
                case "a":
                    rowIndex = 0;
                    break;
                case "b":
                    rowIndex = 1;
                    break;
                case "c":
                    rowIndex = 2;
                    break;
                default:
                    System.out.println("Invalid input. Please try again.");
                    continue;
            }
            //Convert column input to integer index
            int colIndex = columnInput - 1;
            //Make the move on the game board
            game.makeMove(rowIndex, colIndex, symbol);
            //Display the updated game board
            game.displayBoard();
            //Increment player number
            player++;
        }

        //Check for a winner or a tie and display the result
        if (game.checkWinner() == '-') {
            System.out.println("It's a tie!");
        } else {
            System.out.println("Player " + game.checkWinner() + " wins!");
        }
    }
}