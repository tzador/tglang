/**
 * This class represents a binary search tree data structure.
 * It stores a unique root node and methods for insertion, deletion, and traversal.
 */
public class BinarySearchTree {
    
    /**
     * Inner class for representing a single node in the tree.
     */
    class Node {
        int data;
        Node left;
        Node right;

        /**
         * Constructor for creating a new node with the given data.
         * @param data the data to be stored in the node
         */
        Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }

    // Root node of the tree
    Node root;

    /**
     * Method for inserting a new node into the tree.
     * If the node to be inserted already exists, it is not added again.
     * @param data the data to be inserted into the tree
     */
    public void insert(int data) {
        root = insertRecursive(root, data);
    }

    /**
     * Helper method for recursively inserting a new node into the tree.
     * Compares the data of the new node to the existing node's data.
     * If the data is less than the existing node's data, the new node
     * is inserted to the left, otherwise it is inserted to the right.
     * If the new node already exists, it is not added again.
     * @param node the current node being compared
     * @param data the data to be inserted into the tree
     * @return the updated node
     */
    private Node insertRecursive(Node node, int data) {
        if (node == null) {
            node = new Node(data);
            return node;
        } else if (data < node.data) {
            node.left = insertRecursive(node.left, data);
        } else if (data > node.data) {
            node.right = insertRecursive(node.right, data);
        }
        return node;
    }

    /**
     * Method for deleting a node from the tree.
     * If the node to be deleted does not exist, the tree remains unchanged.
     * @param data the data to be deleted from the tree
     */
    public void delete(int data) {
        root = deleteRecursive(root, data);
    }

    /**
     * Helper method for recursively deleting a node from the tree.
     * Compares the data of the node to be deleted to the existing node's data.
     * If the data is found, the node is deleted and the appropriate child node
     * is moved into its place.
     * @param node the current node being compared
     * @param data the data to be deleted from the tree
     * @return the updated node
     */
    private Node deleteRecursive(Node node, int data) {
        if (node == null) {
            return node;
        } else if (data < node.data) {
            node.left = deleteRecursive(node.left, data);
        } else if (data > node.data) {
            node.right = deleteRecursive(node.right, data);
        } else {
            // Node to be deleted has been found
            // Cases:
            // 1. Node has no children
            // 2. Node has one child
            // 3. Node has two children
            if (node.left == null) {
                return node.right;
            } else if (node.right == null) {
                return node.left;
            } else {
                // Handle case where node has two children
                // Find the smallest value in the right subtree
                Node min = minValue(node.right);
                // Replace the data of the current node with the smallest value
                node.data = min.data;
                // Delete the duplicate node in the right subtree
                node.right = deleteRecursive(node.right, min.data);
            }
        }
        return node;
    }

    /**
     * Method for finding the smallest value in a subtree.
     * Used when deleting a node with two children.
     * @param node the root node of the subtree
     * @return the smallest value in the subtree
     */
    private Node minValue(Node node) {
        int min = node.data;
        while (node.left != null) {
            min = node.left.data;
            node = node.left;
        }
        return node;
    }

    /**
     * Method for performing an inorder traversal of the tree.
     * Prints the data of each node in sorted order.
     * @param node the root node of the subtree to be traversed
     */
    public void inorderTraversal(Node node) {
        if (node == null) {
            return;
        } else {
            inorderTraversal(node.left);
            System.out.print(node.data + " ");
            inorderTraversal(node.right);
        }
    }

    /**
     * Main method for testing the binary search tree.
     */
    public static void main(String[] args) {
        // Create a new binary search tree
        BinarySearchTree bst = new BinarySearchTree();

        // Insert some nodes
        bst.insert(5);
        bst.insert(3);
        bst.insert(7);
        bst.insert(4);
        bst.insert(1);
        bst.insert(9);

        // Print the inorder traversal of the tree
        System.out.println("Inorder traversal of the tree:");
        bst.inorderTraversal(bst.root);

        // Delete a node and print the updated tree
        bst.delete(3);
        System.out.println("\nAfter deleting 3:");
        bst.inorderTraversal(bst.root);
    }
}