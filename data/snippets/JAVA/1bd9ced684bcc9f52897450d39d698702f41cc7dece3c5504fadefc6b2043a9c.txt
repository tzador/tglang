//This code snippet generates a binary search tree in Java with various methods

class BinarySearchTree {
	
	//node class for each element in the tree
	class Node {
		
		int key;
		Node left, right;
		
		//constructor to initialize a new node
		public Node(int item) {
			key = item;
			left = right = null;
		}
	}
	
	//root node of the tree
	Node root;
	
	//constructor to initialize an empty tree
	public BinarySearchTree() {
		root = null;
	}
	
	//method to insert new node in the tree
	public void insert(int key) {
		root = insertRec(root, key);
	}
	
	//recursive method to insert new node, checks for appropriate position
	Node insertRec(Node root, int key) {
		
		//if tree is empty, create new node for root
		if (root == null) {
			root = new Node(key);
			return root;
		}
		
		//if key is less than root, insert in left subtree
		if (key < root.key) {
			root.left = insertRec(root.left, key);
		}
		
		//if key is greater than root, insert in right subtree
		else if (key > root.key) {
			root.right = insertRec(root.right, key);
		}
		
		//return the final tree after insertion
		return root;
	}
	
	//method to delete node from tree
	public void delete(int key) {
        root = deleteRec(root, key);
    }
	
	//recursive method to delete node, checks for appropriate position
	Node deleteRec(Node root, int key) {
		
		//if tree is empty, return null
        if (root == null) {
        	return root;
        }
        
        //if key is less than root, node is in left subtree
        if (key < root.key) {
        	root.left = deleteRec(root.left, key);
        }
        
        //if key is greater than root, node is in right subtree
        else if (key > root.key) {
        	root.right = deleteRec(root.right, key);
        }
        
        //if key is equal to root, node is found
        else {
        	
        	//node with only one child or no child
            if (root.left == null) {
            	return root.right;
            }
            else if (root.right == null) {
            	return root.left;
            }
            
            //node with two children: get inorder successor (smallest in right subtree)
            root.key = minValue(root.right);
            
            //delete the inorder successor
            root.right = deleteRec(root.right, root.key);
        }
 
        return root;
    }
	
	//method to find the minimum value in a tree (used to get inorder successor)
	int minValue(Node root) {
		
		//initialize minimum value with root's value
	    int minv = root.key;
	    
	    //traverse to left 

	    //when minimum value is found, return it
	    return minv;
	}
	
	//method to print the tree in inorder traversal
	public void printTree() {
		inorderPrint(root);
	}
	
	//recursive method to print the tree in inorder traversal
	public void inorderPrint(Node root) {
		if (root != null) {
			
			//traverse left subtree
			inorderPrint(root.left);
			
			//print root node's key
			System.out.print(root.key + " ");
			
			//traverse right subtree
			inorderPrint(root.right);
		}
	}

	//main method to test the BST
	public static void main(String[] args) {
		
		//create a new BST
		BinarySearchTree tree = new BinarySearchTree();
		
		//insert nodes
		tree.insert(50);
		tree.insert(30);
		tree.insert(20);
		tree.insert(40);
		tree.insert(70);
		tree.insert(60);
		tree.insert(80);
		
		//print the tree
		tree.printTree();
		
		//delete a node
		tree.delete(20);
		
		//print the updated tree
		tree.printTree();
	}
}