/**
* This is a complex code snippet in Java.
* It generates a linked list and performs various operations on it.
* @param args the command line arguments
*/
public class LinkedList {

    // Node class to store data and link to next node
    class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Head and tail nodes of the linked list
    Node head = null;
    Node tail = null;

    // Method to add a new node to the end of the linked list
    public void addNode(int data) {
        Node newNode = new Node(data);

        // If list is empty, set new node as head and tail
        if (head == null) {
            head = newNode;
            tail = newNode;
        }
        // Else, add new node after the tail and set it as new tail
        else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    // Method to insert a new node at a given position in the linked list
    public void insertNode(int data, int position) {
        Node newNode = new Node(data);

        // If position is 1, set new node as head and shift old head to next
        if (position == 1) {
            newNode.next = head;
            head = newNode;
        }
        // Else, traverse to the given position and insert new node
        else {
            Node current = head;
            for (int i = 1; i < position - 1; i++) {
                if (current.next != null) {
                    current = current.next;
                }
            }
            newNode.next = current.next;
            current.next = newNode;
        }
    }

    // Method to remove a node at a given position from the linked list
    public void removeNode(int position) {
        // If list is empty, return
        if (head == null) {
            return;
        }
        // If position is 1, set head to next node
        if (position == 1) {
            head = head.next;
        }
        // Else, traverse to the given position and remove the node
        else {
            Node current = head;
            for (int i = 1; i < position - 1; i++) {
                if (current.next != null) {
                    current = current.next;
                }
            }
            // If end of list is reached before position, return
            if (current.next == null) {
                return;
            }
            // Set current node to point to node after the removed node
            current.next = current.next.next;
        }
    }

    // Method to print the linked list
    public void printList() {
        // If list is empty, return
        if (head == null) {
            return;
        }
        // Else, traverse the list and print the data of each node
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    // Main method to create and manipulate a linked list
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.addNode(1);
        list.addNode(2);
        list.addNode(3);
        list.printList(); // Output: 1 2 3
        list.insertNode(4, 2);
        list.printList(); // Output: 1 4 2 3
        list.removeNode(3);
        list.printList(); // Output: 1 4 3
    }
}