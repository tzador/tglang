/**
 * This class represents a stack data structure.
 * It implements the universally used LIFO (Last-In-First-Out)
 * principle.
 */
public class Stack<T> {
    private ArrayList<T> stack; // private instance variable using ArrayList

    /**
     * Constructor method for creating a new empty stack.
     */
    public Stack() {
        stack = new ArrayList<T>();
    }

    /**
     * Add a new element to the top of the stack.
     *
     * @param item the element to be added to the stack.
     */
    public void push(T item) {
        stack.add(item);
    }

    /**
     * Remove and return the element at the top of the stack.
     *
     * @return the element at the top of the stack.
     */
    public T pop() {
        if (!isEmpty()) { // check if stack is empty
            return stack.remove(stack.size() - 1);
        }
        return null;
    }

    /**
     * Return the element at the top of the stack without removing it.
     *
     * @return the element at the top of the stack.
     */
    public T peek() {
        if (!isEmpty()) { // check if stack is empty
            return stack.get(stack.size() - 1);
        }
        return null;
    }

    /**
     * Check if the stack is empty.
     *
     * @return true if stack is empty, false otherwise.
     */
    public boolean isEmpty() {
        return stack.isEmpty();
    }

    /**
     * Return the number of elements in the stack.
     *
     * @return the size of the stack.
     */
    public int size() {
        return stack.size();
    }

    /**
     * Clear the stack by removing all elements.
     */
    public void clear() {
        stack.clear();
    }
}