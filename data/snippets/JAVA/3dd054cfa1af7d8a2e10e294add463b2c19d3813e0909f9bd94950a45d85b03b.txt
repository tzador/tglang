/**
 * This class represents a queue data structure.
 * It uses a linked list as its underlying data structure.
 */
public class Queue<T> {
    
    // Represents the first element in the queue
    private Node<T> first;
    
    // Represents the last element in the queue
    private Node<T> last;
    
    // Represents the size of the queue
    private int size;
    
    /**
     * This method adds a new element to the back of the queue.
     * It takes in a generic value and returns void.
     */
    public void enqueue(T value) {
        Node<T> newNode = new Node<>(value);
        
        // If the queue is empty, set both first and last to the new node
        if(empty()) {
            first = newNode;
            last = newNode;
        } else {
            // Otherwise, add the new node to the end of the queue
            last.next = newNode;
            last = newNode;
        }
        
        // Increase the size of the queue by 1
        size++;
    }
    
    /**
     * This method removes the element at the front of the queue.
     * It returns the removed element's value.
     */
    public T dequeue() {
        // Check if the queue is empty
        if(empty()) {
            throw new NoSuchElementException("Queue is empty.");
        }
        
        // Get the first element in the queue
        Node<T> temp = first;
        
        // If there is only one element in the queue, set both first and last to null
        if(first == last) {
            first = null;
            last = null;
        } else {
            // Otherwise, set the first element to the next element in the queue
            first = first.next;
        }
        
        // Decrease the size of the queue by 1
        size--;
        
        // Return the removed element's value
        return temp.value;
    }
    
    /**
     * This method returns the value at the front of the queue without removing it.
     */
    public T peek() {
        // Check if the queue is empty
        if(empty()) {
            throw new NoSuchElementException("Queue is empty.");
        }
        
        // Return the value at the front of the queue
        return first.value;
    }
    
    /**
     * This method checks if the queue is empty.
     */
    public boolean empty() {
        // If size is 0, queue is empty
        return size == 0;
    }
    
    /**
     * This class represents a node in the linked list used by the queue.
     */
    private class Node<T> {
        
        // Represents the value of the node
        private T value;
        
        // Represents the next node in the list
        private Node<T> next;
        
        /**
         * Constructor for Node class.
         * Takes in a value and sets it as the value of the node.
         */
        public Node(T value) {
            this.value = value;
        }
        
    }
}