public class BinarySearchTree<T extends Comparable<T>> {
    // define class for Node
    private class Node {
        private final T data;
        private Node leftChild;
        private Node rightChild;

        // constructor
        public Node(T data) {
            this.data = data;
            leftChild = rightChild = null;
        }
    }

    // root node
    private Node root;

    // constructor
    public BinarySearchTree() {
        root = null;
    }

    // recursive method to insert new data
    public void insert(T data) {
        root = insertRecursively(root, data);
    }

    // helper method for recursive insertion
    private Node insertRecursively(Node current, T data) {
        // base case
        if (current == null) {
            return new Node(data);
        }

        // if data is greater than current node, insert in right subtree
        if (data.compareTo(current.data) > 0) {
            current.rightChild = insertRecursively(current.rightChild, data);
        }
        // if data is less than current node, insert in left subtree
        else if (data.compareTo(current.data) < 0) {
            current.leftChild = insertRecursively(current.leftChild, data);
        }
        // if data already exists, do not insert
        else {
            return current;
        }
        return current;
    }

    // method to search for data in the tree
    public boolean search(T data) {
        return searchRecursively(root, data);
    }

    // helper method for recursive search
    private boolean searchRecursively(Node current, T data) {
        // base case
        if (current == null) {
            return false;
        }
        // if data is equal to current node, return true
        if (current.data == data) {
            return true;
        }
        // if data is greater than current node, search in right subtree
        if (data.compareTo(current.data) > 0) {
            return searchRecursively(current.rightChild, data);
        }
        // if data is less than current node, search in left subtree
        else if (data.compareTo(current.data) < 0) {
            return searchRecursively(current.leftChild, data);
        }
        return false;
    }

    // method to delete data from the tree
    public void delete(T data) {
        root = deleteRecursively(root, data);
    }

    // helper method for recursive deletion
    private Node deleteRecursively(Node current, T data) {
        // base case
        if (current == null) {
            return null;
        }
        // if data is greater than current node, search in right subtree
        if (data.compareTo(current.data) > 0) {
            current.rightChild = deleteRecursively(current.rightChild, data);
        }
        // if data is less than current node, search in left subtree
        else if (data.compareTo(current.data) < 0) {
            current.leftChild = deleteRecursively(current.leftChild, data);
        }
        // if data is equal to current node, perform deletion
        else {
            // if current node has no child
            if (current.leftChild == null && current.rightChild == null) {
                current = null;
            }
            // if current node has only one child
            else if (current.leftChild == null) {
                current = current.rightChild;
            }
            else if (current.rightChild == null) {
                current = current.leftChild;
            }
            // if current node has two children
            else {
                // find the minimum value in right subtree
                T min = findMin(current.rightChild);
                // set current node's data to minimum value
                current.data = min;
                // delete the minimum node from right subtree
                current.rightChild = deleteRecursively(current.rightChild, min);
            }
        }
        return current;
    }

    // method to find the minimum value in a subtree
    private T findMin(Node node) {
        T min = node.data;
        while (node.leftChild != null) {
            min = node.leftChild.data;
            node = node.leftChild;
        }
        return min;
    }

    // method to get the height of the tree
    public int height() {
        if (root == null) {
            return -1;
        }
        return heightUtil(root);
    }

    // helper method for height calculation
    private int heightUtil(Node node) {
        if (node == null) {
            return -1;
        }
        // calculate height of left subtree and right subtree, return the maximum + 1
        int leftHeight = heightUtil(node.leftChild);
        int rightHeight = heightUtil(node.rightChild);
        return Math.max(leftHeight, rightHeight) + 1;
    }
}