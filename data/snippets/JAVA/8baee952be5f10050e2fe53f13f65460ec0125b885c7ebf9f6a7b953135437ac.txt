/**
 * This class represents a binary search tree data structure.
 * It can store any type of data that implements the Comparable interface.
 */
public class BinarySearchTree<T extends Comparable<T>> {

    /**
     * The root node of the tree.
     */
    private Node<T> root;

    /**
     * Inserts a new element into the tree.
     *
     * @param data The data to be inserted.
     */
    public void insert(T data) {
        // Create a new node with the given data.
        Node<T> newNode = new Node<>(data);

        // If the tree is currently empty, the new node becomes the root.
        if (root == null) {
            root = newNode;
        } else {
            // Otherwise, start at the root and traverse down the tree.
            Node<T> currentNode = root;
            while (true) {
                // If data is less than the current node's data, go to the left child.
                if (data.compareTo(currentNode.getData()) < 0) {
                    // If the left child is null, insert the new node here.
                    if (currentNode.getLeftChild() == null) {
                        currentNode.setLeftChild(newNode);
                        return;
                    }

                    // Otherwise, continue traversing left.
                    currentNode = currentNode.getLeftChild();
                } else {
                    // If data is greater than or equal to the current node's data, go to the right child.
                    // If the right child is null, insert the new node here.
                    if (currentNode.getRightChild() == null) {
                        currentNode.setRightChild(newNode);
                        return;
                    }

                    // Otherwise, continue traversing right.
                    currentNode = currentNode.getRightChild();
                }
            }
        }
    }

    /**
     * Searches for an element in the tree.
     *
     * @param data The data to be searched for.
     * @return True if the element is found, false otherwise.
     */
    public boolean search(T data) {
        // If the tree is empty, the element cannot be found.
        if (root == null) {
            return false;
        }

        // Start at the root and traverse down the tree.
        Node<T> currentNode = root;
        while (currentNode != null) {
            // If the data is equal to the current node's data, return true.
            if (data.compareTo(currentNode.getData()) == 0) {
                return true;
            }

            // If data is less than the current node's data, go to the left child.
            // If the left child is null, the element cannot be in the tree.
            if (data.compareTo(currentNode.getData()) < 0) {
                currentNode = currentNode.getLeftChild();
            } else {
                // Otherwise, go to the right child.
                // If the right child is null, the element cannot be in the tree.
                currentNode = currentNode.getRightChild();
            }
        }

        // If the element has not been found after traversing the entire tree, return false.
        return false;
    }

    /**
     * Represents a single node in the tree.
     */
    private class Node<T extends Comparable<T>> {
        private T data;
        private Node<T> leftChild;
        private Node<T> rightChild;

        /**
         * Constructor for a node with given data.
         *
         * @param data The data to be stored in the node.
         */
        public Node(T data) {
            this.data = data;
        }

        /**
         * Getter for the stored data.
         *
         * @return The data stored in the node.
         */
        public T getData() {
            return data;
        }

        /**
         * Setter for the left child.
         *
         * @param leftChild The left child to be set.
         */
        public void setLeftChild(Node<T> leftChild) {
            this.leftChild = leftChild;
        }

        /**
         * Getter for the left child.
         *
         * @return The left child.
         */
        public Node<T> getLeftChild() {
            return leftChild;
        }

        /**
         * Setter for the right child.
         *
         * @param rightChild The right child to be set.
         */
        public void setRightChild(Node<T> rightChild) {
            this.rightChild = rightChild;
        }

        /**
         * Getter for the right child.
         *
         * @return The right child.
         */
        public Node<T> getRightChild() {
            return rightChild;
        }
    }
}