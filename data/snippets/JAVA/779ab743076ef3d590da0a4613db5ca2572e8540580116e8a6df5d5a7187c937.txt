/***
* This is a generic class that implements a linked list using Java generics.
* It supports basic operations such as adding, removing, and checking for the existence of elements in the list.
***/
public class LinkedList<T> {
	private Node<T> head; //reference to the first node in the list
	private int size; //size of the list
	
	//Constructor
	public LinkedList() {
		head = null;
		size = 0;
	}
	
	//Inner class for defining nodes
	private class Node<T> {
		private T data;
		private Node<T> next;
		
		//Constructor
		public Node(T data) {
			this.data = data;
			next = null;
		}
	}
	
	/***
	* Adds a new element at the end of the list.
	***/
	public void add(T data) {
		Node<T> newNode = new Node<T>(data); //create new node with given data
		if(head == null) { //if list is empty, set new node as head
			head = newNode;
		} else {
			Node<T> current = head;
			while(current.next != null) { //traverse the list to find the last node
				current = current.next;
			}
			current.next = newNode; //insert new node at the end
		}
		size++; //increment list size
	}
	
	/***
	* Removes the first occurrence of the given element in the list.
	***/
	public void remove(T data) {
		if(head == null) { //if list is empty, exit method
			return;
		} else if(head.data == data) { //if removed element is at head, set head to next node
			head = head.next;
		} else {
			Node<T> current = head;
			Node<T> prev = head;
			while(current != null) { //traverse the list to find the node with given data
				if(current.data == data) {
					prev.next = current.next; //set previous node's next pointer to current node's next pointer
					size--; //decrement list size
					break;
				}
				prev = current;
				current = current.next;
			}
		}
	}
	
	/***
	* Checks if the given element is present in the list.
	***/
	public boolean contains(T data) {
		if(head == null) { //if list is empty, exit method
			return false;
		} else {
			Node<T> current = head;
			while(current != null) { //traverse the list to find the node with given data
				if(current.data == data) {
					return true; //element found
				}
				current = current.next;
			}
		}
		return false; //element not found
	}
}