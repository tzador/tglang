# Create a library
add_library(hello STATIC ${SOURCES})

# Set the include directories
target_include_directories(hello PUBLIC 
    "${PROJECT_SOURCE_DIR}/include"
    "${PROJECT_BINARY_DIR}"
)

# Add compiler options
target_compile_options(hello PRIVATE 
    "-Wall" 
    "-pedantic"
)

# Set linker options
target_link_options(hello PRIVATE 
    "-L/my/custom/library/path" 
    "-lcustom_lib"
)

# Add conditional compilation based on CMake variables
if (SOME_VARIABLE)
    target_compile_definitions(hello PRIVATE SOME_VARIABLE)
endif (SOME_VARIABLE)

# Set preprocessor definitions for conditional compilation
add_definitions(-DSOME_DEFINE)

# Set C++ standard and additional flags
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Link external libraries
find_package(Boost REQUIRED)
target_include_directories(hello PRIVATE ${Boost_INCLUDE_DIRS})
target_link_libraries(hello PRIVATE ${Boost_LIBRARIES})

# Create an executable
add_executable(my_program ${SOURCES})

# Link the library with the executable
target_link_libraries(my_program hello)

# Add a custom command to generate a file
add_custom_command(OUTPUT myfile.txt
    COMMAND ${CMAKE_COMMAND} -E touch myfile.txt
)

# Add dependencies to the custom command
add_custom_target(my_target 
    DEPENDS some_other_file.txt
)
add_dependencies(my_target hello)

# Set installation rules
install(TARGETS hello DESTINATION /usr/local/lib)
install(FILES my_header.h DESTINATION /usr/local/include)