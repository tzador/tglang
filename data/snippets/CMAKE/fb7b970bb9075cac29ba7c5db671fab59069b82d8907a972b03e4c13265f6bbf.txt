cmake_minimum_required(VERSION 3.10) #specify minimum required version of CMake

project(MyProject LANGUAGES CXX) #create project named MyProject with C++ as its language

set(CMAKE_CXX_STANDARD 17) #set C++ version to 17

#set source files for executable
set(SRC main.cpp function1.cpp function2.cpp)

#set library
add_library(MyLibrary SHARED library.cpp)

#find and include necessary packages and libraries
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})

#add executable target
add_executable(MyExecutable ${SRC})

#link libraries to executable
target_link_libraries(MyExecutable PRIVATE MyLibrary ${OpenCV_LIBS})

#set output directory for executable
set_target_properties(MyExecutable PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

#add custom command to generate documentation
add_custom_command(
    TARGET MyExecutable POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo "Generating documentation..."
    COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_BINARY_DIR}/bin/documentation.txt
)

#set compiler flags for debug and release builds
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -g")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")

#set different configurations for different operating systems
if(WIN32)
    set(MY_CONFIG "Windows")
elseif(APPLE)
    set(MY_CONFIG "MacOS")
else()
    set(MY_CONFIG "Linux")
endif()