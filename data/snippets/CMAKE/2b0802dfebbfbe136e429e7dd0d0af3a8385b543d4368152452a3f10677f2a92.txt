# Set the minimum required version of CMake
cmake_minimum_required(VERSION 3.1)

# Specify the project name
project(MyProject)

# Add a subdirectory for external dependencies
add_subdirectory(external)

# Set compiler flags
set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -Wall -Werror)

# Set source files for the project
set(SOURCE_FILES 
    src/main.cpp
    src/foo.cpp
    src/bar.cpp
)

# Add an executable target
add_executable(MyApp ${SOURCE_FILES})

# Link external libraries to the project
target_link_libraries(MyApp ExternalLibrary1 ExternalLibrary2)

# Set the include directories for the project
target_include_directories(MyApp 
    PUBLIC 
        ${CMAKE_CURRENT_SOURCE_DIR}/include 
    PRIVATE 
        ${CMAKE_CURRENT_SOURCE_DIR}/src
        external/ExternalLibrary1/include
        external/ExternalLibrary2/include
)

# Set the output directory for the project
set_target_properties(MyApp PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)

# Create a test executable target
add_executable(MyTests ${SOURCE_FILES})

# Link testing libraries to the test executable
target_link_libraries(MyTests TestingLibrary1 TestingLibrary2)

# Add a command to run tests automatically as part of the build process
add_custom_command(TARGET MyTests POST_BUILD
    COMMAND MyTests
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
)

# Add unit tests for the project
enable_testing()
add_test(NAME MyTests COMMAND MyTests WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

# Create a custom target to clean the project
add_custom_target(clean-all
    COMMAND ${CMAKE_BUILD_TOOL} clean
    COMMAND rm -rf ${CMAKE_CURRENT_SOURCE_DIR}/bin/*
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
)

# Set the C++ standard to use for the project
set(CMAKE_CXX_STANDARD 11)

# Set the build type to Debug by default
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()