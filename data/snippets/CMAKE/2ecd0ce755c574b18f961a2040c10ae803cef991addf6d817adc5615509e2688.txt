cmake_minimum_required(VERSION 3.10) #specifying minimum required version
project(my_project LANGUAGES CXX) #declaring project and programming language

set(SOURCES #defining list of source files
    "main.cpp"
    "helper.h"
    "helper.cpp"
)

include_directories(inc) #including directory for header files

add_executable(my_executable ${SOURCES}) #creating executable file for project using source files

target_link_libraries(my_executable #linking necessary libraries
    PUBLIC
    mylibrary1
    mylibrary2
    PRIVATE
    mylibrary3
)

add_subdirectory(libs/mylibrary1) #adding subdirectory for first external library
add_subdirectory(libs/mylibrary2) #adding subdirectory for second external library

target_include_directories(mylibrary3 #including directory for third external library
    PUBLIC
    "${PROJECT_SOURCE_DIR}/libs/mylibrary3/inc"
)

set_target_properties(my_executable PROPERTIES #setting properties for executable file
    CXX_STANDARD 17 #using C++ standard version 17
    CXX_STANDARD_REQUIRED ON #requiring C++ standard
)

option(USE_OPTIMIZED "Use optimized build" ON) #declaring option for optimized build

if(USE_OPTIMIZED) #checking if option is enabled
    target_compile_definitions(my_executable PUBLIC USE_OPTIMIZED) #passing option to compiler
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2") #setting compiler flags for optimized build
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g") #setting compiler flags for non-optimized build
endif()

install(TARGETS my_executable DESTINATION bin) #installing executable file in specified directory