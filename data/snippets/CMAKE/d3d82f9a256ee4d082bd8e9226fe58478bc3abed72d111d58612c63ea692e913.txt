# Declare a cmake minimum version
cmake_minimum_required(VERSION 3.12)

# Create a project
project(my_project)

# Set C++ standard to C++17
set(CMAKE_CXX_STANDARD 17)

# Add a source file to the project
add_executable(my_project main.cpp)

# Set the include directories for the project
include_directories(include)

# Add a library to the project
add_library(my_library library.cpp)

# Link the library to the executable
target_link_libraries(my_project my_library)

# Set compiler flags
set(CMAKE_CXX_FLAGS "-Wall -O3")

# Set build type to Release
set(CMAKE_BUILD_TYPE Release)

# Set output directories for different builds
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Configure and install a header file
configure_file(config.h.in config.h)
install(FILES ${CMAKE_BINARY_DIR}/config.h DESTINATION include)

# Add a custom command to be executed on building
add_custom_command(TARGET my_project POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo "Finished building project")

# Add a custom target
add_custom_target(my_target
    COMMAND echo "This is a custom target")

# Set properties for a target
set_target_properties(my_project PROPERTIES
    LINK_FLAGS "-L/some/directory")

# Define a macro
macro(MY_MACRO arg1 arg2)
    # perform some actions
endmacro()

# Use the macro inside the cmake code
MY_MACRO(argument1 argument2)