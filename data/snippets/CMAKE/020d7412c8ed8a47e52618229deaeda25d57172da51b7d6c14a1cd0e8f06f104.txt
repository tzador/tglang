# Sets the minimum version of CMake required to build the project.
cmake_minimum_required(VERSION 3.12)

# Set project name and version.
project(MyProject VERSION 1.0.0)

# Add a custom target "clean" to remove build files.
add_custom_target(clean
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/build
)

# Include directories to be searched for header files.
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/libs/include
)

# Set the list of sources for the project.
set(SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/helper.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/solver.cpp
)

# Build an executable from the sources.
add_executable(MyProject ${SOURCES})

# Add a custom command to copy a file during build.
add_custom_command(TARGET MyProject PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    ${CMAKE_CURRENT_SOURCE_DIR}/config.ini $<TARGET_FILE_DIR:MyProject>/config.ini
    COMMENT "Copying config file to build directory"
)

# Set compiler flags.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Werror -pedantic-errors")

# Set libraries to link against.
target_link_libraries(MyProject
    LIB1
    LIB2
)

# Install the executable and config file to bin directory.
install(TARGETS MyProject DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/config.ini DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)

# Set CPack to create a compressed archive for distribution.
set(CPACK_GENERATOR "ZIP")
include(CPack)