cmake_minimum_required(VERSION 3.8 FATAL_ERROR) # Sets minimum version requirement for CMake
project(MyProject LANGUAGES CXX) # Sets project name and desired language

# Sets compiler flags and options
set(CMAKE_CXX_FLAGS "-Wall -Werror")
set(CMAKE_CXX_STANDARD 11)

# Sets include directories
include_directories(
	${CMAKE_SOURCE_DIR}/include # Add 'include' folder as include directory
	${CMAKE_BINARY_DIR}/generated # Add 'generated' folder as include directory
)

# Sets source files
file(
	GLOB_RECURSE # Search recursively in all subdirectories for specified extensions
	SOURCES # Sets variable name to store found files
	"${CMAKE_SOURCE_DIR}/src/*.cpp" # Search for all files with '.cpp' extension in 'src' folder
)

# Sets executable target
add_executable(my_executable "${SOURCES}") # Create target named 'my_executable' using source files specified

# Sets installation location
install(
	TARGETS # Indicates that target is being installed
	my_executable # Specifies which target to install
	RUNTIME DESTINATION bin # Sets installation location to 'bin' directory
)

# Sets tests target using Catch2 testing library
enable_testing() # Enables testing for project
add_executable(my_tests "tests/test_main.cpp" "${SOURCES}") # Create target named 'my_tests' with main test file and source files
target_link_libraries(my_tests Catch2::Catch2) # Links Catch2 testing library to target
add_test(NAME my_tests COMMAND my_tests) # Adds test named 'my_tests' with command to run target

# Sets coverage target using gcov and lcov
if(COVERAGE)
	include(CodeCoverage) # Includes CodeCoverage.cmake file to use gcov and lcov
	setup_target_for_coverage(coverage my_tests coverage) # Sets coverage target to run after target 'coverage' with test target 'my_tests'
endif()