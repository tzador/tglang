# Define minimum required CMake version
cmake_minimum_required(VERSION 2.8.12.2)

# Define project name
project(ExampleProject)

# Add source files
set(SRC_FILES main.cpp helper.cpp)

# Set compiler flags
set(CMAKE_CXX_FLAGS "-std=c++11 -Wall")

# Set additional build options based on build type
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
endif()

# Create executable target
add_executable(example ${SRC_FILES})

# Set include directories
target_include_directories(example PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)

# Set linking libraries
target_link_libraries(example PUBLIC mathLib)

# Include external dependencies
include(ExternalProject)

# Add external library for math functions
ExternalProject_Add(mathLib
  GIT_REPOSITORY https://github.com/mathLib
  CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
  STEP_TARGETS install
)

# Set compiler options for generated files
set_property(SOURCE ${SRC_FILES} PROPERTY COMPILE_FLAGS "-Wno-unused-result")

# Install project
install(TARGETS example DESTINATION bin)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include DESTINATION include)

# Create test target
enable_testing()
add_test(NAME example_test COMMAND example)