##
# Set up platform and compiler-specific options
##


##
# Set up platform-specific options
##
if (WIN32)
    # Define WIN32 macro for conditional compilation
    add_definitions(-DWIN32)
endif()


##
# Set up compiler-specific options
##
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # Enable multiple core compilation
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # Enable all warnings
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
else ()
    message(WARNING "Unsupported compiler detected.")
endif ()

# Enable C++11
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set up compiler flags based on build mode
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    # Add debug symbols and disable optimization
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -O0")
elseif (CMAKE_BUILD_TYPE STREQUAL "Release")
    # Enable optimization
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
else ()
    message(WARNING "Unsupported build mode specified. Using default flags.")
endif ()

# Include source files
include_directories(src)

##
# Define executable target and link libraries
##
add_executable(my_program src/main.cpp src/utilities.hpp)

# Link external libraries
target_link_libraries(my_program my_library)