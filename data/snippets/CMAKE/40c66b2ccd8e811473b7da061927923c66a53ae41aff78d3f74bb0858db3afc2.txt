### Define source files ###

# Create a variable to hold all source files
set(SOURCE_FILES
    src/main.c
    src/functions.c
    src/helpers.c
    src/utils.c
)

# Create a variable to hold all header files
set(HEADER_FILES
    include/functions.h
    include/helpers.h
    include/utils.h
)

# Add all the source files to the project
add_executable(my_project ${SOURCE_FILES})

# Specify include directories for header files
target_include_directories(my_project PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)

### Define library ###

# Create a shared library with all source files
# Note: can also use STATIC for a static library
add_library(my_library SHARED ${SOURCE_FILES})

# Link the library to the project
target_link_libraries(my_project PRIVATE my_library)

# Install the library to the designated location
install(TARGETS my_library DESTINATION lib)

# Specify headers to be installed with the library
install(FILES ${HEADER_FILES} DESTINATION include)

### Set compiler flags ###

# Enable C99 standard
set(CMAKE_C_STANDARD 99)

# Enable all warnings
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")

# Enable debugging symbols
set(CMAKE_BUILD_TYPE Debug)

# Enable optimizations for release builds
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3")

### Define external dependencies ###

# Find and include external libraries
find_library(LIBRARY_NAME REQUIRED)

target_link_libraries(my_project PRIVATE ${LIBRARY_NAME})