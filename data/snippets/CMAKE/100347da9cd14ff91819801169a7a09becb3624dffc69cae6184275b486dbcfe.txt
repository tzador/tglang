# Set minimum required version of CMake
cmake_minimum_required(VERSION 3.16)

# Set project name and version
project(MyProject VERSION 1.0.0)

# Set C++ language standard
set(CMAKE_CXX_STANDARD 17)

# Set source files directory
set(SRC_DIR src)

# Create a list of all source files
file(GLOB SRC_FILES ${SRC_DIR}/*.cpp)

# Create target executable
add_executable(${PROJECT_NAME} ${SRC_FILES})

# Set output directory for generated binaries
set(BIN_DIR ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BIN_DIR})

# Add include directories
target_include_directories(${PROJECT_NAME} PUBLIC ${SRC_DIR}/include)

# Link target with external libraries
target_link_libraries(${PROJECT_NAME} PUBLIC pthread boost_system)

# Set compiler flags for different build types
set(CMAKE_CXX_FLAGS "-Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

# Create installation rules
install(TARGETS ${PROJECT_NAME}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

# Create uninstall target
add_custom_target(uninstall
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/${PROJECT_NAME}
)

# Generate configuration file
configure_file(config.h.in config.h)

# Add build directory as an include directory for the configuration file
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_BINARY_DIR})

# Add tests directory
add_subdirectory(tests)