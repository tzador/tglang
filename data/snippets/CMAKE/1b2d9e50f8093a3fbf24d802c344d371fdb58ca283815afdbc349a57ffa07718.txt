cmake_minimum_required(VERSION 3.12) # Specify the minimum version of CMake required
project(MyProject LANGUAGES CXX) # Specify the project name and language

set(CMAKE_CXX_STANDARD 11) # Set C++ standard to C++11
set(CMAKE_CXX_STANDARD_REQUIRED ON) # Require C++11 standard
set(CMAKE_CXX_FLAGS "-Wall -Wextra") # Set compiler flags to enable more warnings

# Create a library called "myLibrary" with the sources listed below
add_library(myLibrary
    source/file1.cpp
    source/file2.cpp
    include/myLibrary/header1.h
    include/myLibrary/header2.h
)

target_include_directories(myLibrary PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include) # Add the "include" directory to the library's include paths

# Add a subdirectory for a dependency library called "externalLibrary"
add_subdirectory(dependencies/externalLibrary)

# Create an executable called "myExecutable" from the sources listed below
add_executable(myExecutable
    source/main.cpp
)

target_link_libraries(myExecutable PRIVATE myLibrary externalLibrary) # Link "myLibrary" and "externalLibrary" to "myExecutable"

# Set output directory for built binaries to "bin"
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# Create a custom target to build and run "myExecutable"
add_custom_target(run
    ALL
    COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/myExecutable
    DEPENDS myExecutable
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT "Building and running myExecutable"
)