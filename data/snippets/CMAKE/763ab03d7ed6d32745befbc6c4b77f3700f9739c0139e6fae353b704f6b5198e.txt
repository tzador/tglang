# This is a comment in CMAKE
cmake_minimum_required(VERSION 3.10) # Sets the minimum required version of CMake

# Set project name
project(my_project) # Sets the name of the project

# Add sources
set(SOURCES main.cpp other.cpp) # Creates a variable "SOURCES" and sets it to a list of source files

# Set include directories
include_directories(include) # Sets the include directories to be searched for header files

# Create executable
add_executable(my_executable ${SOURCES}) # Creates an executable called "my_executable" using the source files from the "SOURCES" variable

# Add library
add_library(my_library STATIC lib.cpp) # Creates a static library called "my_library" using the source file "lib.cpp"

# Set library dependencies
target_link_libraries(my_executable my_library) # Sets the dependencies for the "my_executable" to include "my_library"

# Set compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++11") # Sets the compiler flags to include warnings and use C++11 standard

# Set output directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin) # Sets the output directory for the executable to be in the "bin" folder in the current build directory

# Set build type
set(CMAKE_BUILD_TYPE Release) # Sets the build type to "Release"

# Set additional libraries
find_package(Boost COMPONENTS system filesystem REQUIRED) # Finds and includes the Boost libraries for "system" and "filesystem"

# Add header files
file(GLOB_RECURSE HEADERS include/*.h) # Creates a variable "HEADERS" and sets it to a list of all header files in the "include" directory and its sub-directories

# Set source groups
source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}/include" PREFIX "Header Files" FILES ${HEADERS}) # Groups all header files under the "Header Files" category in the project tree

# Set build dependencies
set_target_properties(my_executable PROPERTIES # Sets properties of the "my_executable" target
    INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIRS} # Specifies the directories to be included in the target
    LINK_LIBRARIES ${Boost_LIBRARIES} # Specifies the libraries to be linked with the target
)