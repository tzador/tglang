cmake_minimum_required(VERSION 3.10.2)

# Set the project name
project(ExampleProject)

# Add a library with the given name and sources
add_library(MyLibrary
    src/foo.cpp
    src/bar.cpp
)

# Specify all the include directories for the library
target_include_directories(MyLibrary PUBLIC
    include
)

# Enable C++11 standard for all targets
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Set compiler flags for debug and release builds
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    # Set compiler flags for debug mode
    target_compile_options(MyLibrary PRIVATE
        -Wall
        -Wextra
        -pedantic
    )
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    # Set compiler flags for release mode
    target_compile_options(MyLibrary PRIVATE
        -O3
    )
endif()

# Add executable target using the library as a dependency
add_executable(MyExecutable
    src/main.cpp
)

# Link the library to the executable target
target_link_libraries(MyExecutable PRIVATE
    MyLibrary
)

# Add a custom command to run after the build is finished
add_custom_command(TARGET MyExecutable POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
        $<TARGET_FILE:MyExecutable>
        ${CMAKE_CURRENT_BINARY_DIR}/bin/
    COMMENT "Copying executable to build directory"
)

# Set custom install directory for the executable
install(TARGETS MyExecutable
    DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
)