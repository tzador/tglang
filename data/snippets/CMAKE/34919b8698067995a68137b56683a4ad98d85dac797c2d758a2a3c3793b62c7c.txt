# CMake minimum version requirement
cmake_minimum_version(VERSION 3.12.4 FATAL_ERROR)

# Set project name and version
project(MyProject VERSION 1.0.0)

# Set C++ standard version to use
set(CMAKE_CXX_STANDARD 17)

# Set additional compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic")

# Set output directory for executables
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Add subdirectory for external dependencies
add_subdirectory(lib)

# Set include directories
include_directories(
  ${PROJECT_SOURCE_DIR}/include
  ${PROJECT_BINARY_DIR}/include
  ${LIBRARY_INCLUDE_DIR}
)

# Set source files for project
set(SOURCE_FILES
  src/main.cpp
  src/Helper.cpp
  src/Calculator.cpp
)

# Create executable
add_executable(MyProject ${SOURCE_FILES})

# Link external libraries
target_link_libraries(MyProject PRIVATE
  ExternalLib1
  ExternalLib2
)

# Set install targets
install(TARGETS MyProject DESTINATION bin)

# Add custom target to run unit tests
add_custom_target(tests COMMAND ${CMAKE_BINARY_DIR}/bin/MyProject --gtest_color=yes)

# Set test dependencies
add_dependencies(tests googletest)

# Set test data directory
set(TEST_DATA_DIR ${PROJECT_SOURCE_DIR}/test/data)

# Set test source files
set(TEST_SOURCE_FILES
  test/main.cpp
  test/HelperTest.cpp
  test/CalculatorTest.cpp
)

# Create unit test executable
add_executable(unit_test ${TEST_SOURCE_FILES})

# Set include directories for tests
target_include_directories(unit_test PRIVATE
  ${PROJECT_SOURCE_DIR}/include
  ${PROJECT_BINARY_DIR}/include
)

# Link external libraries for tests
target_link_libraries(unit_test PRIVATE
  gtest
  gtest_main
  ExternalLib1
  ExternalLib2
)

# Add test target
add_test(MyProjectTest unit_test)

# Set test properties
set_tests_properties(MyProjectTest PROPERTIES
  WORKING_DIRECTORY ${TEST_DATA_DIR}
  TIMEOUT 10
  ENVIRONMENT "TEST_SOURCE=${PROJECT_SOURCE_DIR}"
)