# This is a comment in CMAKE
# Set the minimum version required
cmake_minimum_required(VERSION 3.5)

# Define a project
project(my_project)

# Add a library target
# Includes the files in the 'src' folder
add_library(my_library
  src/file1.cpp
  src/file2.cpp
)

# Add an executable target
add_executable(my_executable
  main.cpp
)

# Link the library target to the executable target
target_link_libraries(my_executable PRIVATE my_library)

# Set compile options for the library target
target_compile_options(my_library PRIVATE
  -Wall
  -Wextra
  -Werror
)

# Specify the include directories for the library target
target_include_directories(my_library PRIVATE
  ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Add a custom command
# Generates a header file based on the input file using a command line tool
add_custom_command(
  OUTPUT generated_header.h # The output file
  COMMAND generate_header_tool input_file.txt # The command to execute
  DEPENDS input_file.txt # The input file(s) required to run the command
)

# Add a dependency for the executable on the generated header file
add_dependencies(my_executable generated_header.h)

# Specify the target sources as a variable for convenience
set(TARGET_SOURCES
  main.cpp
  file1.cpp
  file2.cpp
  generated_header.h
)

# Use the variable to set the target sources
target_sources(my_executable PRIVATE ${TARGET_SOURCES})

# Set target properties
set_target_properties(my_library PROPERTIES
  CXX_STANDARD 11 # Use C++11 standard
  ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib # Set the output directory for the library target
)