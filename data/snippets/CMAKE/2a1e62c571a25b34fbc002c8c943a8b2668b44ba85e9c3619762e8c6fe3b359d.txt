# Set the minimum required version of CMake 
cmake_minimum_required(VERSION 3.19)

# Set the project name and specify the languages used
project(MyProject LANGUAGES CXX CUDA)

# Set the build type to release
set(CMAKE_BUILD_TYPE Release)

# Set the output directory for the binaries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Set the source code files for the project
set(SOURCES src/main.cpp src/gpu.cu)

# Create an executable target for the project
add_executable(MyProject ${SOURCES})

# Set the C++ standard to use and enable warnings
target_compile_features(MyProject PRIVATE cxx_std_17)
target_compile_options(MyProject PRIVATE -Wall -Wextra -Wpedantic)

# Find and link the required libraries 
find_package(OpenCV REQUIRED)
target_link_libraries(MyProject PRIVATE ${OpenCV_LIBS})
find_package(Boost REQUIRED COMPONENTS serialization)
target_link_libraries(MyProject PRIVATE ${Boost_LIBRARIES})

# Set the CUDA compilation flags
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --compiler-options -Wall,-Wextra")

# Create a custom target to run a command after building
add_custom_target(RunMyProject
    COMMAND MyProject
    DEPENDS MyProject
    WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
)

# Add a test target using CTest
enable_testing()
add_test(NAME MyProject_test COMMAND MyProject)

# Set the install directory for the executable
install(TARGETS MyProject DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)