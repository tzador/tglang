# Define a variable named PROJECT_NAME with the value "MyProject"
set(PROJECT_NAME MyProject)

# Specify the minimum cmake version required
cmake_minimum_required(VERSION 3.10)

# Set project name and version
project(${PROJECT_NAME} VERSION 1.0.0)

# Create target executable
add_executable(${PROJECT_NAME} main.cpp)

# Add custom include directory
target_include_directories(${PROJECT_NAME} PRIVATE include)

# Add source files
target_sources(${PROJECT_NAME}
	PRIVATE
		src/source1.cpp
		src/source2.cpp
		src/source3.cpp
)

# Add custom compiler flags
target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra)

# Set the output directory for the executables and libraries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)

# Set the suffix for the output library
set(CMAKE_SHARED_LIBRARY_SUFFIX ".dll")

# Add a custom build type "Release"
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

# Set dependencies
target_link_libraries(${PROJECT_NAME} PUBLIC some_library)

# Add subdirectory for additional projects
add_subdirectory(dependencies/some_project)

# Set a custom install directory
set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/install)

# Install the executable
install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)

# Install the library
install(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

# Install the header files
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include DESTINATION ${CMAKE_INSTALL_PREFIX})

# Create a custom target to generate documentation
add_custom_target(documentation
	COMMAND doxygen Doxyfile
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

# Add tests for the project
enable_testing()
add_subdirectory(tests)