# set minimum required version of cmake
cmake_minimum_required(VERSION 3.10.2)

# set project name
project(MyProject)

# add source files to target
add_executable(MyProject src/main.cpp src/helper_functions.cpp)

# set compile options for target
target_compile_options(MyProject PRIVATE -Wall -Wextra -pedantic -Werror)

# set additional include directories
target_include_directories(MyProject PRIVATE include)

# set compile definitions for target
target_compile_definitions(MyProject PRIVATE MY_DEFINE_1 MY_DEFINE_2)

# set library dependencies for target
target_link_libraries(MyProject PRIVATE my_lib1 my_lib2)

# set compiler feature checks for target
target_compile_features(MyProject PRIVATE cxx_std_17)

# set custom build type
set(CMAKE_BUILD_TYPE "Debug")

# set output directory for binaries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# enable testing
enable_testing()

# add test target
add_test(
	# set test name
	NAME unit_tests
	# set command to run tests
	COMMAND ${CMAKE_BINARY_DIR}/bin/MyProjectTests
	# set working directory for tests
	WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# add unit test source files
add_executable(MyProjectTests test/test_main.cpp test/hello_test.cpp test/math_test.cpp)

# link test target to tested library
target_link_libraries(MyProjectTests PRIVATE my_lib1 my_lib2)

# add coverage flags for test target
target_compile_options(MyProjectTests PRIVATE --coverage)
target_link_libraries(MyProjectTests PRIVATE --coverage)

# check if gcovr is installed for code coverage reporting
find_program(GCOVR_PATH gcovr)
if(GCOVR_PATH)
	# create code coverage report target
	add_custom_target(coverage
		# execute gcovr command
		COMMAND ${GCOVR_PATH} --root ${CMAKE_SOURCE_DIR} --exclude "${CMAKE_SOURCE_DIR}/test" --exclude "${CMAKE_SOURCE_DIR}/CMakeFiles" --xml --output coverage.xml
		# display success message
		COMMENT "Created code coverage report: ${CMAKE_BINARY_DIR}/coverage.xml"
	)
endif()