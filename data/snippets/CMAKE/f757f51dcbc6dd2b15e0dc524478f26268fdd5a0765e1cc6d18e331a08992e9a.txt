# Configure build settings
cmake_minimum_required(VERSION 3.14) # Set minimum required version of CMake
project(my_project VERSION 1.0.0) # Set project name and version number

# Configure compiler
set(CMAKE_CXX_STANDARD 11) # Set C++ standard to use
set(CMAKE_CXX_EXTENSIONS OFF) # Disable compiler extensions
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra") # Add compiler flags

# Set source files
set(SRC_FILES 
    src/main.cpp 
    src/utilities.cpp 
    src/math_functions.cpp
    include/utilities.h 
    include/math_functions.h
)

# Set include directories
include_directories(include)

# Set library dependencies
find_package(OpenCV REQUIRED) # Find and configure OpenCV library
include_directories(${OpenCV_INCLUDE_DIRS}) # Add OpenCV include directories
set(LIBS ${LIBS} ${OpenCV_LIBS}) # Add OpenCV libraries to list of libraries to link

# Configure executable
add_executable(my_project ${SRC_FILES}) # Create executable with specified source files
target_link_libraries(my_project ${LIBS}) # Link the executable with the specified libraries

# Set installation folder
install(TARGETS my_project DESTINATION bin) # Install executable in bin directory

# Create make target for cleaning build files
add_custom_target(clean_build # Set target name
    COMMAND ${CMAKE_COMMAND} -E remove_directory build) # Define command to remove build directory

# Create make target for running tests
add_custom_target(tests # Set target name
    COMMAND ${CMAKE_COMMAND} -E make_directory build # Create build directory
    COMMAND ${CMAKE_COMMAND} -E chdir build # Change directory to build
    COMMAND ${CMAKE_COMMAND} .. # Run CMake in parent directory to generate build files
    COMMAND make # Build executable
    COMMAND ./my_project # Run executable
)