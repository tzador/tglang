# Set the minimum version of CMake required
cmake_minimum_required(VERSION 3.0)

# Create a project
project(my_project)

# Set C++ standard to C++14
set(CMAKE_CXX_STANDARD 14)

# Add source files to be compiled
set(SOURCES
        main.cpp 
        utils.cpp 
        input.cpp 
        output.cpp
    )

# Add header files to be included
set(HEADERS
        utils.h
        input.h
        output.h
    )

# Create an executable target
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})

# Add compiler flags
target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -pedantic)

# Add include directories
target_include_directories(${PROJECT_NAME} PRIVATE ${PROJECT_SOURCE_DIR})

# Link external libraries
target_link_libraries(${PROJECT_NAME} external_library)

# Add custom command for post-build step
add_custom_command(TARGET ${PROJECT_NAME}
                   POST_BUILD
                   COMMAND ${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/resources
                   COMMENT "Copying resources to build directory")

# Install the compiled binary to a specified directory
install(TARGETS ${PROJECT_NAME} DESTINATION bin)

# Set the installation location for the header files
install(FILES ${HEADERS} DESTINATION include)

# Create a configuration file for accessing project variables from outside
configure_file(${PROJECT_SOURCE_DIR}/config.h.in ${PROJECT_BINARY_DIR}/config.h)

# Create an installation script to run after installation completion
install(CODE "MESSAGE(\"Running post-installation script...\")"
        CODE "MESSAGE(\"Installation successful!\")")