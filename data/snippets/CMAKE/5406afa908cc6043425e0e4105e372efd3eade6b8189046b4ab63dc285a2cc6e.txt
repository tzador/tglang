# Set the path to the project
set(PROJ_PATH "C:/Users/User/Documents/my_project")

# Define the project name
project(my_project)

# Set the minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Create a list of source files
set(SOURCES
    ${PROJ_PATH}/main.cpp
    ${PROJ_PATH}/src/utils.cpp
    ${PROJ_PATH}/include/utils.hpp
)

# Create an executable target 
add_executable(my_project ${SOURCES})

# Set the include directories for the project
target_include_directories(my_project 
    PUBLIC
    ${PROJ_PATH}/include
)

# Set the compile options for the project
target_compile_options(my_project 
    PRIVATE 
    -Wall 
    -Werror 
    -pedantic 
    -std=c++11
)

# Find and link libraries 
find_library(LIB1 lib1.a PATHS ${PROJ_PATH}/lib)
target_link_libraries(my_project PRIVATE ${LIB1})

# Set the output directory for the executable
set_target_properties(my_project PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${PROJ_PATH}/bin
)

# Set compiler flags for a specific source file
set_source_files_properties(${PROJ_PATH}/main.cpp PROPERTIES
    COMPILE_FLAGS -O3
)

# Set custom target for clean build
add_custom_target(clean_all)
add_custom_command(
    TARGET clean_all PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E remove ${PROJ_PATH}/bin/my_project
    COMMAND ${CMAKE_COMMAND} -E remove ${PROJ_PATH}/obj/*
)

# Set post-build commands
add_custom_command(
    TARGET my_project POST_BUILD
    COMMAND echo "Building completed!"
    COMMAND echo "Executable file located in: ${PROJ_PATH}/bin"
)