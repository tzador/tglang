# Set minimum required version of CMake
cmake_minimum_required(VERSION 3.15)

# Set project name
project(MyProject)

# Set C++ standard to use
set(CMAKE_CXX_STANDARD 17)

# Set additional compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror")

# Set source files
set(SOURCES 
    main.cpp 
    src/Utilities.cpp 
    include/Utilities.h
)

# Create executable 
add_executable(MyProject ${SOURCES})

# Specify include directories
target_include_directories(MyProject PUBLIC 
    ${PROJECT_SOURCE_DIR}/include
)

# Specify link libraries
target_link_libraries(MyProject PUBLIC 
    ThirdPartyLibrary
)

# Specify output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Generate additional files using a custom command
add_custom_command(
    # Add target for the custom command
    TARGET MyProject POST_BUILD
    # Specify the command to execute
    COMMAND python ${PROJECT_SOURCE_DIR}/scripts/custom_command.py
    # Specify the output path for the generated file
    OUTPUT ${CMAKE_BINARY_DIR}/generated_file.txt
    # Specify the input files to use 
    DEPENDS main.cpp Utilities.cpp Utilities.h
)

# Add test directory
add_subdirectory(tests)

# Include test files
include(CTest)
include(GoogleTest)

# Add executable for tests
add_executable(tests
    test_main.cpp
    test/UtilitiesTest.cpp
)

# Link with GoogleTest and project libraries
target_link_libraries(tests 
    GoogleTest::GTest 
    GoogleTest::Main 
    MyProject
)

# Add tests as a CTest test
gtest_discover_tests(tests)