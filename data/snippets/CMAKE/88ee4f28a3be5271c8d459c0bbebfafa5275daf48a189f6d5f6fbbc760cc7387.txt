cmake_minimum_required(VERSION 3.10) # Specifies the minimum version of CMake required

project(MyProject LANGUAGES CXX) # Creates a new project named 'MyProject' using C++

set(CMAKE_CXX_STANDARD 11) # Sets the C++ standard to use for compiling

# Adds all the source files in the current directory to the list 'SRC'
file(GLOB SRC *.cpp *.h)

# Specifies the files to be compiled and linked into the final executable
add_executable(MyExecutable ${SRC})

# Specifies the libraries to be linked against, in this case 'pthread'
target_link_libraries(MyExecutable PUBLIC pthread)

# Specifies the include directories for the compiler to search for header files
target_include_directories(MyExecutable PUBLIC include)

# Specifies the compile options for the C++ compiler
target_compile_options(MyExecutable PRIVATE -Wall -Wextra -Werror)

# Specifies the linker options for the linker
target_link_options(MyExecutable PRIVATE -Wl,-rpath,$ORIGIN/lib)

# Sets the output directory for the final executable
set_target_properties(MyExecutable PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)

# Adds a custom command to execute after the 'build' target is complete
add_custom_command(TARGET MyExecutable POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_SOURCE_DIR}/data/data_file.txt ${CMAKE_CURRENT_BINARY_DIR}/data_file.txt)

# Includes the external library 'lib1' for the project
add_subdirectory(lib1)

# Sets the C flags to use for compiling
set(CMAKE_C_FLAGS "-std=c99")

# Adds the subdirectory for the 'test' target
add_subdirectory(test)

# Sets the tests to be run as part of the 'test' target using CTest
add_test(NAME MyTests COMMAND TestExecutable)