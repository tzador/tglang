# Define a variable named MY_VAR, with a default value of "default value"
set(MY_VAR "default value")

# Print out a message
message(STATUS "MY_VAR is set to ${MY_VAR}")

# Add an executable called "my_executable" with source files "file1.cpp" and "file2.cpp"
add_executable(my_executable file1.cpp file2.cpp)

# Set the properties of "my_executable"
# Build the executable in the same directory as the CMakeLists.txt file
set_target_properties(my_executable PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}")
# Make the executable executable by setting its permissions
set_target_properties(my_executable PROPERTIES PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ)

# Add an include directory and link a library for "my_executable" to use
target_include_directories(my_executable PUBLIC my_library/include)
target_link_libraries(my_executable my_library)

# Set a compile flag for the project
add_compile_options(-Wall)

# Add a custom command to generate a file "output.txt" using "my_executable" as the command
add_custom_command(OUTPUT output.txt COMMAND my_executable)

# Add a custom target to generate "output.txt" whenever "my_executable" is built
add_custom_target(generate_output DEPENDS output.txt)

# Add a macro to easily generate a message with a given prefix
macro(print_message prefix message)
    message(STATUS "${prefix}: ${message}")
endmacro()

# Invoke the macro to print a message with prefix "INFO"
print_message(INFO "This is an informational message")