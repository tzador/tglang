# Define a function called "add_library" that takes in multiple arguments
function(add_library)
  # Set the "target_name" argument as required and store it in the "target" variable 
  set(target ${ARGV0})
  # Check if the target name is set or not, if not, display an error
  if(NOT target)
    message(ERROR "add_library: No target name specified")
    return()
  endif()
  # Remove the "target_name" argument and store all other arguments in "sources" variable
  list(REMOVE_AT ARGV 0)
  set(sources ${ARGV})
  
  # Create a library target with the specified name and sources
  add_library(${target} ${sources})

  # Set additional options for the library target
  target_include_directories(${target} # Specify the target to be set
    PUBLIC  # Set the scope of the include directories to public
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> # Include directories for build-time
      $<INSTALL_INTERFACE:include> # Include directories for install-time
  )
  target_compile_features(${target} PUBLIC cxx_std_11) # Set the C++ standard to be supported by the target
  target_compile_options(${target} PRIVATE -Wall -Wextra) # Set additional compilation options for the target
  target_link_libraries(${target} PRIVATE # Specify the target to be set and add a private library
    ${Boost_LIBRARIES} # Dynamic link library for Boost libraries
    Threads::Threads # Dynamic link library for Threads libraries
  )
  
  # Install the library target
  install(TARGETS ${target} EXPORT ${target}_export
    ARCHIVE  DESTINATION lib
    LIBRARY  DESTINATION lib
    INCLUDES DESTINATION include
  )
  # Install the header files for the library
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/ DESTINATION include) 
endfunction()