# Define a target
add_executable(myTarget
    main.c
    helper.c
)

# Set properties for the target
target_include_directories(myTarget PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Add libraries to link against
target_link_libraries(myTarget
    PRIVATE library1 library2
    PUBLIC library3
    INTERFACE library4
)

# Define a macro
macro(add_custom_args targetName)
    # Use target name as prefix
    string(TOLOWER ${targetName} _prefix)
    # Add arguments to target
    target_compile_options(${targetName}
        PRIVATE -${_prefix}_option1
        PUBLIC -${_prefix}_option2
        INTERFACE -${_prefix}_option3
    )
endmacro()

# Use macro for multiple targets
add_custom_args(myTarget)
add_custom_args(otherTarget)

# Add custom commands to target
add_custom_command(TARGET myTarget
    POST_BUILD # Run after the target is built
    COMMAND ${CMAKE_COMMAND}
        -E copy $<TARGET_FILE:myTarget> ${CMAKE_CURRENT_BINARY_DIR}/bin
)

# Generate a header file with compile-time macro
configure_file(config.h.in config.h)
# Add the header file to the target's include directories
target_include_directories(myTarget PRIVATE ${CMAKE_CURRENT_BINARY_DIR})