# Set minimum version of CMake required
cmake_minimum_required(VERSION 3.10 FATAL_ERROR)

# Create a new project
project(MyProject LANGUAGES C CXX)

# Set sources for the project
set(SOURCES
    src/main.cpp
    src/file1.cpp
    src/file2.cpp
    include/file1.h
    include/file2.h
)

# Create an executable target
add_executable(${PROJECT_NAME} ${SOURCES})

# Set the include directories
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)

# Set C++ standard to C++17
set_target_properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD 17)

# Add compiler flags
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    target_compile_options(${PROJECT_NAME} PRIVATE -Wextra -Wall -Werror)
elseif(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4 /WX)
endif()

# Add CMake modules directory to search path
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

# Find required packages
find_package(Boost 1.65 REQUIRED COMPONENTS system thread)
find_package(OpenSSL REQUIRED)

# Link libraries to the executable target
target_link_libraries(${PROJECT_NAME} PRIVATE Boost::system Boost::thread OpenSSL::SSL OpenSSL::Crypto)

# Set output directory for built targets 
set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")