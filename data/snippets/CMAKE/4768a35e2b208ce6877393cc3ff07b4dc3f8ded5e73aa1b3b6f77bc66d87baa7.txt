# Declare a C++ project named "MyProject"
project(MyProject
  VERSION 1.0.0
  DESCRIPTION "A sample C++ project"
  LANGUAGES CXX
)

# Set minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Define the variables for project sources and includes
set(PROJECT_SOURCES
  src/main.cpp
  src/helper.cpp
)
set(PROJECT_INCLUDES
  include/helper.h
  include/archiver.h
)

# Add executable target for project
add_executable(${PROJECT_NAME})

# Set compiler flags for the project
target_compile_options(${PROJECT_NAME}
  PRIVATE
    -Wall
    -Wextra
    -pedantic
)

# Add sources and includes to the executable target
target_sources(${PROJECT_NAME}
  PRIVATE
    ${PROJECT_SOURCES}
    ${PROJECT_INCLUDES}
)

# Set include directories for the project
target_include_directories(${PROJECT_NAME}
  PRIVATE
    include
)

# Set dependencies for the project (optional)
target_link_libraries(${PROJECT_NAME}
  PUBLIC
    Libraries::MyLibrary
)

# Install the project
install(TARGETS ${PROJECT_NAME}
  DESTINATION bin
)

# Create a configuration file for the project
configure_file(config.h.in config.h)

# Define a custom target for generating documentation (optional)
add_custom_target(docs
  COMMAND ${DOXYGEN_EXECUTABLE} Doxyfile
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  COMMENT "Generating documentation using Doxygen"
  VERBATIM
)

# Define a custom target for building a package (optional)
add_custom_target(package
  COMMAND make package
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
  COMMENT "Building package"
  VERBATIM
)

# Define a custom target for clean (optional)
add_custom_target(clean
  COMMAND ${CMAKE_MAKE_PROGRAM} clean
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
  COMMENT "Cleaning project"
  VERBATIM
)

# Set build type to be Release by default
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
endif()

# Enable testing for the project
enable_testing()

# Define unit tests for the project (optional)
find_package(GTest REQUIRED)
add_executable(tests)
target_sources(tests
  PRIVATE
    tests/test_main.cpp
    tests/test_helper.cpp
)
target_link_libraries(tests
  PRIVATE
    GTest::GTest
    GTest::Main
    Libraries::MyLibrary
)
gtest_discover_tests(tests)