# Sets the minimum required CMake version
cmake_minimum_required(VERSION 3.10)

# Sets the project name
project(my_project)

# Sets the target name
set(TARGET_NAME my_project_executable)

# Adds a target executable
add_executable(${TARGET_NAME})

# Sets source files
set(SOURCE_FILES main.cpp another_file.cpp)

# Adds source files to executable target
target_sources(${TARGET_NAME} PRIVATE ${SOURCE_FILES})

# Sets compiler flags
set(CMAKE_CXX_FLAGS "-Wall -Wextra")

# Sets linker flags
set(CMAKE_EXE_LINKER_FLAGS "-pthread")

# Sets required libraries
set(REQUIRED_LIBRARIES lib1 lib2 lib3)

# Finds required libraries
find_packages(REQUIRED ${REQUIRED_LIBRARIES})

# Links required libraries to executable target
target_link_libraries(${TARGET_NAME} ${REQUIRED_LIBRARIES})

# Sets output directory for executable
set_target_properties(${TARGET_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

# Sets include directory
set(INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR}/include)

# Adds include directory to project
target_include_directories(${TARGET_NAME} PUBLIC ${INCLUDE_DIR})

# Sets C++ standard
set(CMAKE_CXX_STANDARD 17)

# Adds additional compiler flags
target_compile_options(${TARGET_NAME} PRIVATE -Werror)

# Sets output name for executable target
set_target_properties(${TARGET_NAME} PROPERTIES OUTPUT_NAME "${PROJECT_NAME}")

# Sets installation directory for executable
install(TARGETS ${TARGET_NAME} DESTINATION bin)

# Sets installation directory for header files
install(DIRECTORY ${INCLUDE_DIR} DESTINATION ${CMAKE_INSTALL_PREFIX}/include)

# Adds subdirectory for additional CMake files
add_subdirectory(some_other_dir)