# Set source files variable 
set(SOURCE_FILES 
    src/main.cpp
    src/helper.cpp
    include/helper.h)

# Define executable target
add_executable(MyApp ${SOURCE_FILES})

# Set the include directories
target_include_directories(MyApp PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include)

# Set the libraries to link against
target_link_libraries(MyApp 
    lib1
    lib2)

# Add compiler flags
target_compile_options(MyApp PRIVATE
    -Wall
    -Werror
    -pedantic)

# Add a custom command to generate a new source file
add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/src/new_file.cpp
    COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_CURRENT_SOURCE_DIR}/src/new_file.cpp)

# Add a custom target that depends on the new source file
add_custom_target(NewFile DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/src/new_file.cpp)

# Add a pre-build step to run a script 
add_custom_command(TARGET MyApp PRE_BUILD
    COMMAND ./scripts/generate_files.sh)

# Add a post-build step to print a message 
add_custom_command(TARGET MyApp POST_BUILD
    COMMAND echo "MyApp has been successfully compiled.")