# Define a macro for finding and including external libraries
macro(find_and_include_library LIBRARY_NAME)
    # First, search for the library using CMake's find_package command
    find_package(${LIBRARY_NAME} REQUIRED)
    # If the library is found, set the include directory and link the library
    if (${LIBRARY_NAME}_FOUND)
        include_directories(${${LIBRARY_NAME}_INCLUDE_DIRS})
        target_link_libraries(my_app ${${LIBRARY_NAME}_LIBRARIES})
    else()
    # If the library is not found, print an error message
        message(FATAL_ERROR "Library ${LIBRARY_NAME} not found. Please make sure it is installed on your system.")
    endif()
endmacro()

# Use the macro to find and include the Boost library
find_and_include_library(Boost)

# Create a CMake executable target for my_app
add_executable(my_app main.cpp)

# Set the C++ standard to be used with the target
target_compile_features(my_app PUBLIC cxx_std_11)

# Link the target with the Boost library
target_link_libraries(my_app Boost)

# Set the output directory for the executable
set_target_properties(my_app PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

# Add a custom command to copy a file from the source directory to the build directory
add_custom_command(TARGET my_app POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/config.xml ${CMAKE_BINARY_DIR}/bin/config.xml)