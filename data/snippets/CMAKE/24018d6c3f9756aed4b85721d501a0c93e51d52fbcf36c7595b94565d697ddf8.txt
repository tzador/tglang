#########################################################################
#                CMAKE SCRIPT FOR BUILDING MY PROJECT                  #
#########################################################################

# Specify the minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Set the project name and version
project(My_Project VERSION 1.0.0)

# Set the output directory for the build
set(CMAKE_BUILD_DIR ${CMAKE_SOURCE_DIR}/build)

# Set the source files for the project
set(SOURCES
    src/main.cpp
    src/utilities.cpp
)

# Set the header files for the project
set(HEADERS
    include/utilities.h
)

# Add a custom target for cleaning the build
add_custom_target(clean_build
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BUILD_DIR}
)

# Add a custom target for generating documentation
add_custom_target(generate_docs
    COMMAND doxygen ${CMAKE_SOURCE_DIR}/doxygen.conf
)

# Set compiler flags
set(CMAKE_CXX_FLAGS "-Wall -Wextra -Werror -pedantic")

# Create the executable target
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})

# Set the include directories
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)

# Set the target properties
set_target_properties(${PROJECT_NAME} PROPERTIES
    VERSION ${PROJECT_VERSION}
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BUILD_DIR}
)

# Link external libraries
target_link_libraries(${PROJECT_NAME} pthread)

# Install the executable
install(TARGETS ${PROJECT_NAME}
    COMPONENT my_project
    EXPORT ${PROJECT_NAME}-targets
    RUNTIME DESTINATION bin COMPONENT my_project
)

# Add the export to the build tree
export(EXPORT ${PROJECT_NAME}-targets FILE "${CMAKE_BINARY_DIR}/${PROJECT_NAME}-targets.cmake")

# Register the install location of the project with user-specified location
if(NOT DEFINED MY_PROJECT_INSTALL_DIR)
    set(MY_PROJECT_INSTALL_DIR cmake)
endif()

# Install the export
install(EXPORT ${PROJECT_NAME}-targets
    NAMESPACE My_Project::
    DESTINATION ${MY_PROJECT_INSTALL_DIR}
)