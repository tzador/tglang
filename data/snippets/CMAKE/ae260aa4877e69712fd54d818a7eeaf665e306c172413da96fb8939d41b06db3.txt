#[[ This is a CMakeLists file which is used to define and configure build processes for a software project. It is commonly used in C++ projects. ]]

# Define the minimum required version of CMake for this project
cmake_minimum_required(VERSION 3.0)

# Declare the name of the project
project(MyProject)

# Set the C++ compiler to use for building the project
set(CMAKE_CXX_COMPILER g++)

# Set the build type to Release
set(CMAKE_BUILD_TYPE Release)

# Set the output directory for compiled binaries
set(CMAKE_BINARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/build)

# Set the source files for the project
set(SOURCES
    main.cpp
    functions.cpp
    classes.cpp
    utilities.cpp
)

# Set the header files for the project
set(HEADERS
    functions.h
    classes.h
    utilities.h
)

# Tell CMake where to find the source files and header files
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# Create an executable for the project, using the source and header files
add_executable(MyProject ${SOURCES} ${HEADERS})

# Set any necessary compiler flags
target_compile_options(MyProject PRIVATE -std=c++11 -Wall)

# Link any necessary libraries
target_link_libraries(MyProject PRIVATE pthread)

# Add a custom target to clean the project build directory
add_custom_target(clean_all
    COMMAND rm -rf ${CMAKE_CURRENT_SOURCE_DIR}/build
)

 #[[ With this CMakeLists file, we have defined the project, specified the required dependencies and compiler flags, as well as set up a custom target for cleaning the build directory. Now we can simply run 'cmake .' in the project directory to generate the necessary build files and then use 'make' to compile our project. ]]