# Define a project called "MyProject"

project(MyProject)

# Set the minimum required version of CMAKE

cmake_minimum_required(VERSION 3.0)

# Include the necessary modules for the project

include(CTest)
include(ExternalProject)

# Set the compiler to use for the project

set(CMAKE_CXX_COMPILER g++)

# Add source files and header files to a list

set(SOURCE_FILES main.cpp helper.cpp)
set(HEADER_FILES helper.h)

# Add libraries to be linked with the project

set(LIBRARIES pthread)

# Create an executable with the specified source and header files

add_executable(MyExecutable ${SOURCE_FILES} ${HEADER_FILES})

# Link the libraries with the executable

target_link_libraries(MyExecutable ${LIBRARIES})

# Set the output directory for the executable

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)

# Set the target properties

set_target_properties(MyExecutable PROPERTIES 
    CXX_STANDARD 11
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS OFF
)

# Add a custom command to be executed before building the executable

add_custom_command(TARGET MyExecutable PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/resources $<TARGET_FILE_DIR:MyExecutable>/resources)

# Define a macro for building an external library
macro(build_library subdir)
    # Create a subdirectory for the external library
    file(MAKE_DIRECTORY ${CMAKE_SOURCE_DIR}/libs/${subdir})

    # Build the external project
    ExternalProject_Add(
        ${subdir}
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/${subdir}
        BINARY_DIR ${CMAKE_SOURCE_DIR}/libs/${subdir}
        INSTALL_COMMAND ""
        CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_SOURCE_DIR}/libs/${subdir}
    )

    # Add the include and library directories of the external library to the project
    include_directories(${CMAKE_SOURCE_DIR}/libs/${subdir}/include)
    link_directories(${CMAKE_SOURCE_DIR}/libs/${subdir}/lib)

endmacro()

# Build the external library "MyLibrary"

build_library(MyLibrary)