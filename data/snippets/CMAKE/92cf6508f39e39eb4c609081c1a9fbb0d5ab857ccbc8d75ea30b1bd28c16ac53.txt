# Generated CMakeList file
cmake_minimum_required(VERSION "3.12")  # Sets minimum required version for cmake

# Project name and version
project(MyProject VERSION "1.0.0")

# Set output directory for build
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)  # Output directory for executables
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)  # Output directory for libraries

# Set compiler options
set(CMAKE_CXX_STANDARD 17)  # Set C++ standard to use
set(CMAKE_CXX_STANDARD_REQUIRED ON)  # Enable required standard
set(CMAKE_CXX_EXTENSIONS OFF)  # Disable compiler-specific extensions

# Include directories for dependencies
include_directories(
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/external_lib/include
)

# Add source files
set(SOURCES
    src/main.cpp
    src/helper_functions.cpp
    src/class.cpp
)

# Create library from source files
add_library(MyLibrary SHARED ${SOURCES})

# Set linker options
set(LINKER_OPTIONS -pthread)  # Option for multi-threaded linking on UNIX systems
target_link_libraries(MyLibrary PUBLIC ${LINKER_OPTIONS})

# Specify executable target and link it with library
add_executable(MyApp src/main_app.cpp)
target_link_libraries(MyApp PRIVATE MyLibrary)

# Installation instructions
install(
    TARGETS MyLibrary
    EXPORT MyLibraryConfig
    LIBRARY DESTINATION ${CMAKE_BINARY_DIR}/install/lib
    ARCHIVE DESTINATION ${CMAKE_BINARY_DIR}/install/lib
)

# Generate and install MyLibraryConfig.cmake file
install(EXPORT MyLibraryConfig DESTINATION ${CMAKE_BINARY_DIR}/install)

# Add test target and specify test source file
enable_testing()
add_test(NAME MyTest COMMAND $<TARGET_FILE:MyApp>)

# Print success message
message(STATUS "Successfully generated and configured CMake files for MyProject")