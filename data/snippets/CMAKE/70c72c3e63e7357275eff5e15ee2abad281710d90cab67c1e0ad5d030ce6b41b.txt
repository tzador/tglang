# Set the minimum required version of CMake
cmake_minimum_required(VERSION 3.15)

# Set the project name to be used
project(MyProject)

# Define a variable for the source files of the project
set(SOURCES
    src/main.cpp
    src/utils.cpp
    src/some_class.cpp
)

# Add an include directory for header files
include_directories(include)

# Add libraries to link to the project
find_library(FOO_LIB foo)
find_library(BAR_LIB bar)

# Specify the executable target for the project
add_executable(${PROJECT_NAME} ${SOURCES})

# Link libraries to the project
target_link_libraries(${PROJECT_NAME} ${FOO_LIB} ${BAR_LIB})

# Set compiler flags for the project
set(CMAKE_CXX_FLAGS "-std=c++11 -Wall")

# Set installation directory for the project
set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/bin)

# Create a build type for optimized build
set(CMAKE_BUILD_TYPE Release)

# Define a macro to set custom compiler flags
macro(set_compiler_flag flag)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}")
endmacro()

# Set custom flags for release build
set_compiler_flag("-O3")

# Create a target for running unit tests
add_custom_target(unit_tests
    COMMAND ${PROJECT_NAME} --test
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/test
)

# Specify the installation rules for the project
install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}
)

# Add a custom target for cleaning the project
add_custom_target(clean-all
    COMMAND ${CMAKE_BUILD_TOOL} clean
    COMMAND rm -rf ${CMAKE_SOURCE_DIR}/bin
)