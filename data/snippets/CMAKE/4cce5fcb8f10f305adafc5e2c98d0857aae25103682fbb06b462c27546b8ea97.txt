# Define a variable called "SOURCES" and assign it a list of source files
set(SOURCES
    src/main.cpp
    src/foo.cpp
    src/bar.cpp
)

# Define a library called "my_library" with the source files from the "SOURCES" variable
add_library(my_library ${SOURCES})

# Set compiler flags for the library target
target_compile_options(my_library PRIVATE
    -Wall           # enable all compiler warnings
    -Werror         # treat compiler warnings as errors
    $<$<CONFIG:Debug>:-Og>      # enable optimized debugging flags in Debug mode
    $<$<CONFIG:Release>:-O3>    # enable maximum optimization in Release mode
)

# Add include directories for the library target
target_include_directories(my_library PUBLIC
    include         # add the "include" directory to the public include directories
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/external>  # add the "external" directory to the public include directories during build
    $<INSTALL_INTERFACE:include>    # add the "include" directory to the public include directories during installation
)

# Define a variable called "LIBS" and assign it a list of libraries to link against
set(LIBS
    pthread     # link against pthread library
    dl          # link against dl library
)

# Link the "my_library" target with the "LIBS" variable
target_link_libraries(my_library PRIVATE ${LIBS})

# Set the output directory for the library target
set_target_properties(my_library PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib     # output libraries to the "lib" directory in the project binary directory
    LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib     # output shared libraries to the "lib" directory in the project binary directory
    RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin     # output executables to the "bin" directory in the project binary directory
)