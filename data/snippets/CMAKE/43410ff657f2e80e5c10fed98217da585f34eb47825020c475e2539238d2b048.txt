# Set the minimum required version of CMAKE
cmake_minimum_required(VERSION 3.0.0)

# Define a variable for the project name
set(PROJECT_NAME "MyProject")

# Set the project name and version
project(${PROJECT_NAME} VERSION 1.0.0)

# Set the source files for the project
set(SOURCES src/main.cpp src/utils.cpp)

# Add executable target for the project
add_executable(${PROJECT_NAME} ${SOURCES})

# Set compiler flags for the project
target_compile_options(${PROJECT_NAME} PUBLIC -Wall -Wextra -pedantic)

# Set include directories for the project
target_include_directories(${PROJECT_NAME} PUBLIC include)

# Set library directories for the project
target_link_directories(${PROJECT_NAME} PUBLIC libs)

# Link external libraries for the project
target_link_libraries(${PROJECT_NAME} PUBLIC lib1 lib2)

# Set install destination for the executable
install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin)

# Set custom command to run before build
add_custom_command(
    TARGET ${PROJECT_NAME} PRE_BUILD
    COMMAND echo "Building ${PROJECT_NAME}"
)

# Set custom command to run after build
add_custom_command(
    TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND echo "Build completed"
)

# Set custom target to generate documentation
add_custom_target(doc COMMAND doxygen ${PROJECT_SOURCE_DIR}/Doxyfile)

# Add a test for the project
enable_testing()

add_test(NAME MyTest
         COMMAND ${PROJECT_NAME}
         WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/test)
         
# Add a macro to simplify adding a new test
macro(add_testcase TEST_NAME TEST_SOURCE)
    add_executable(${TEST_NAME} ${TEST_SOURCE})
    target_link_libraries(${TEST_NAME} PRIVATE lib1 lib2)
    add_test(NAME ${TEST_NAME} COMMAND ${TEST_NAME} WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/test)
endmacro()

# Add multiple tests using the macro
add_testcase(Test1 test1.cpp)
add_testcase(Test2 test2.cpp)