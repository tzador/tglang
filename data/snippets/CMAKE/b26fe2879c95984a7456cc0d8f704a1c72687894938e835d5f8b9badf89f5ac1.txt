cmake_minimum_required(VERSION 3.10)  # set minimum required version of CMake
project(myProject)  # set project name

# set variables for source files and include directory
set(SOURCE_FILES main.cpp myClass.cpp)
set(INCLUDE_DIR include)

# add an executable target for the project
add_executable(${PROJECT_NAME} ${SOURCE_FILES})

# set the include directories for the project
target_include_directories(${PROJECT_NAME} PUBLIC ${INCLUDE_DIR})

# set compiler flags for different build configurations
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_options(${PROJECT_NAME} PUBLIC -g)
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_options(${PROJECT_NAME} PUBLIC -O3)
endif()

# link libraries to the executable target
target_link_libraries(${PROJECT_NAME} PUBLIC myLibrary)

# specify installation path for executable and libraries
install(TARGETS ${PROJECT_NAME} DESTINATION bin)
install(FILES myLibrary.h DESTINATION include)

# create tests for project
enable_testing()  # enable testing functionality
add_test(NAME MyTest COMMAND ${PROJECT_NAME} --arg1 --arg2)  # add a test with name and command

# set custom command to run before compiling target
add_custom_command(TARGET ${PROJECT_NAME} PRE_BUILD COMMAND make clean -C ${SOURCE_DIR})

# add a preprocessor definition for the target
target_compile_definitions(${PROJECT_NAME} PUBLIC DEBUG_MODE)

# set a build output folder for different build configurations
set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/build/debug)
set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/build/release)

# enable automatic compiler and linker language detection
enable_language(CXX)

# set the C++ standard for the project
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# add a subdirectory containing a CMakeLists.txt for a sub-project
add_subdirectory(mySubProject)