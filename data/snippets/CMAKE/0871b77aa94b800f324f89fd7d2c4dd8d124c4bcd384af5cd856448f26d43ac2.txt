# First, we set the minimum required version of CMake
cmake_minimum_required(VERSION 3.0)

# Next, we set the project name
project(my_project)

# Create a source variable with all source files
set(SOURCES
    main.cpp
    utils.cpp
    helper.cpp
)

# Create a header variable with all header files
set(HEADERS
    utils.hpp
    helper.hpp
)

# Define a variable for the include directories
set(INCLUDE_DIRS
    include
    lib/external
)

# Add the source and header files to the project
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})

# Add the include directories to the project
target_include_directories(${PROJECT_NAME} PUBLIC ${INCLUDE_DIRS})

# Set compiler flags for the target
target_compile_options(${PROJECT_NAME} PRIVATE -std=c++11 -Wall -Wextra)

# Set linker flags for the target
target_link_options(${PROJECT_NAME} PRIVATE -lstdc++)

# Create a build directory and change to it
if(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/build)
    execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/build)
endif()
execute_process(COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR}/build ${CMAKE_COMMAND} ${CMAKE_SOURCE_DIR} -G "Unix Makefiles")

# Specify the output directory for the executable
set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)