cmake_minimum_required(VERSION 3.10.0 FATAL_ERROR) #sets minimum required version of cmake
project(MyProject LANGUAGES CXX) #sets project name and language
set(CMAKE_CXX_STANDARD 11) #sets C++ standard to use
set(CMAKE_CXX_STANDARD_REQUIRED ON) #ensures C++ standard is required
set(CMAKE_CXX_EXTENSIONS OFF) #disables any C++ extensions
set(CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic") #sets compiler flags for C++
set(CMAKE_C_FLAGS "-Wall -Wextra -pedantic") #sets compiler flags for C
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0") #sets debug build flags for C++
set(CMAKE_C_FLAGS_DEBUG "-g -O0") #sets debug build flags for C
set(CMAKE_CXX_FLAGS_RELEASE "-O3") #sets release build flags for C++
set(CMAKE_C_FLAGS_RELEASE "-O3") #sets release build flags for C
add_executable(my_app main.cpp functions.cpp) #creates executable target named "my_app" with source files
target_link_libraries(my_app PUBLIC my_library) #links the target with a library named "my_library"
target_compile_definitions(my_app PUBLIC MY_DEFINITIONS) #adds preprocessor definitions for the target
target_include_directories(my_app PUBLIC inc) #adds include directories for the target
install(TARGETS my_app DESTINATION bin) #installs the executable in the designated location