# Set the minimum version of CMake required to build the project
cmake_minimum_required(VERSION 3.10)

# Define a variable called "project_name" with the value "MyProject"
set(project_name "MyProject")

# Create a project using the previously defined project name
project(${project_name})

# Set the C++ standard to C++11
set(CMAKE_CXX_STANDARD 11)

# Add a subdirectory called "src" to the project
add_subdirectory(src)

# Add a subdirectory called "tests" to the project
add_subdirectory(tests)

# Create a variable called "sources" with a list of source files
set(sources
    src/main.cpp
    src/utils.cpp
    src/helper.cpp
)

# Create an executable target called "my_executable" using the previously defined sources
add_executable(my_executable ${sources})

# Add a custom target called "generate_docs" which generates documentation using Doxygen
add_custom_target(generate_docs 
    COMMAND doxygen Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/docs
    COMMENT "Generating documentation using Doxygen"
)

# Set the output directory for the executable target and the Doxygen documentation
set_target_properties(my_executable PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin
)

set_target_properties(generate_docs PROPERTIES
    OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/docs
)

# Include the "include" directory as a search path for header files
include_directories(include)

# Link the "my_executable" target with the "helper" library
target_link_libraries(my_executable helper)

# Add a test target called "my_test" which runs the tests located in the "tests" directory
add_test(my_test ${CMAKE_CURRENT_BINARY_DIR}/Tests)

# Add a custom target called "run_tests" which runs all the tests
add_custom_target(run_tests 
    COMMAND ${CMAKE_CTEST_COMMAND} --verbose
    DEPENDS my_test
)

# If the system is Linux, link the "my_executable" with the "pthread" library
if(UNIX AND NOT APPLE)
    target_link_libraries(my_executable pthread)
endif()