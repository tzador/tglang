# Define minimum required CMake version
CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

# Set project name
PROJECT(my_project)

# Set C++ standard to use
set(CMAKE_CXX_STANDARD 17)

# Add a subdirectory for 'library' target
ADD_SUBDIRECTORY(library)

# Add a subdirectory for 'executable' target
ADD_SUBDIRECTORY(executable)

# Define sources for the 'library' target
SET(library_sources library.cpp)

# Create the 'library' target
ADD_LIBRARY(library ${library_sources})

# Keep 'library' target as the active target
SET_TARGET_PROPERTIES(library PROPERTIES LINKER_LANGUAGE CXX)

# Define sources for the 'executable' target
SET(executable_sources main.cpp)

# Create the 'executable' target
ADD_EXECUTABLE(executable ${executable_sources})

# Link 'executable' target with 'library' target
TARGET_LINK_LIBRARIES(executable library)

# Add custom compiler flags
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic")

# Set the output directory for 'executable' target
SET_TARGET_PROPERTIES(executable PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Set the output directory for 'library' target
SET_TARGET_PROPERTIES(library PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Generate install rule for 'executable' target
INSTALL(TARGETS executable
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

# Generate install rule for 'library' target
INSTALL(TARGETS library
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

# Generate config file for 'library' target
CONFIGURE_FILE(library_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/library_config.h)

# Include binary directory for library_config.h file
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})