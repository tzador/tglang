# Set minimum required version
cmake_minimum_required(VERSION 3.5)

# Set project name
project(exampleProject)

# Set variable for source files
set(SOURCES
    src/main.cpp
    src/helper.cpp
    include/helper.h)

# Set variable for library files
set(LIBRARIES
    lib/lib1.a
    lib/lib2.dylib
    lib/lib3.so)

# Set include directories
include_directories(
    include
    lib/include)

# Add executable target
add_executable(example ${SOURCES})

# Link libraries to executable target
target_link_libraries(example ${LIBRARIES})

# Set compiler options
set(ICPC_FLAGS "-Wall -Werror -O3")

# Set compiler flags for specific build configurations
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(ICPC_FLAGS "${ICPC_FLAGS} -g")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    set(ICPC_FLAGS "${ICPC_FLAGS} -DNDEBUG")
endif()

# Set compiler flags for Linux platform
if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(ICPC_FLAGS "${ICPC_FLAGS} -std=c++11 -pthread")
endif()

# Set compiler flags for MacOS platform
if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(ICPC_FLAGS "${ICPC_FLAGS} -std=c++11 -stdlib=libc++")
endif()

# Set compiler flags and language for executable target
set_target_properties(example PROPERTIES 
    COMPILE_FLAGS ${ICPC_FLAGS}
    LINKER_LANGUAGE CXX)

# Create installation rules
install(TARGETS example
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib/static)

# Create packaging rules
set(CPACK_PACKAGE_NAME "ExampleProject")
set(CPACK_PACKAGE_VERSION "1.0")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
set(CPACK_GENERATOR "ZIP")
include(CPack)