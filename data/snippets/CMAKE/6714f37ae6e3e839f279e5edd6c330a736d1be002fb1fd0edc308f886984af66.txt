# Set up variables for project name and version
set(PROJECT_NAME "example_project")
set(PROJECT_VERSION 1.0)

# Declare the project and set its name and version
project(${PROJECT_NAME} VERSION ${PROJECT_VERSION})

# Set the minimum required CMake version
cmake_minimum_required(VERSION 3.10)

# Set up a library target
add_library(${PROJECT_NAME}_lib
    src/foo.cpp
    src/bar.cpp
)

# Set up an executable target that links to the library
add_executable(${PROJECT_NAME}
    src/main.cpp
)
target_link_libraries(${PROJECT_NAME} PUBLIC ${PROJECT_NAME}_lib)

# Add a custom command to generate a header file during build
add_custom_command(OUTPUT include/config.h
    COMMAND ${CMAKE_COMMAND} -DPROJECT_VERSION=${PROJECT_VERSION} -P generate_header.cmake
    DEPENDS generate_header.cmake
)
add_custom_target(${PROJECT_NAME}_generate_header DEPENDS include/config.h)

# Add a custom target that builds both the library and the executable
add_custom_target(${PROJECT_NAME}_build
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target ${PROJECT_NAME} --target ${PROJECT_NAME}_lib
    DEPENDS ${PROJECT_NAME}_lib ${PROJECT_NAME})

# Add a custom target that cleans up the build directory
add_custom_target(${PROJECT_NAME}_clean
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}
)