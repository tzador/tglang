# Description: This is a complex CMake code snippet for compiling a C++ project
cmake_minimum_required(VERSION 3.18)  # Specify minimum required CMake version
project(my_project)  # Specify project name

# Set compiler and version
set(CMAKE_CXX_COMPILER "g++")
set(CMAKE_CXX_COMPILER_VERSION "11")

# Set include paths
include_directories(include)  # Add 'include' directory to include search path

# Set compiler options
add_compile_options(-Wall -Werror -Wextra)

# Set source files
set(SOURCE_FILES src/main.cpp src/utils.cpp)

# Add executable target
add_executable(my_project ${SOURCE_FILES})

# Set library options
set(LINK_LIBS)  # Initialize empty list for libraries
if (UNIX)
    list(APPEND LINK_LIBS pthread)  # Add 'pthread' library for Linux-based systems
elseif (WIN32)
    list(APPEND LINK_LIBS winsock2 ws2_32)  # Add 'winsock2' and 'ws2_32' libraries for Windows
endif()

# Add libraries to link against
target_link_libraries(my_project ${LINK_LIBS})

# Add custom commands
add_custom_target(my_custom_target DEPENDS my_project)
add_custom_command(TARGET my_custom_target POST_BUILD COMMAND ./my_project)  # Run executable after build
add_custom_command(TARGET my_custom_target POST_BUILD COMMAND ./my_project ARGS "arg1" "arg2")  # Run executable with arguments

# Set installation instructions
install(TARGETS my_project DESTINATION bin)  # Install executable to 'bin' directory
install(FILES README.md DESTINATION share/my_project)  # Install README file to 'share/my_project' directory