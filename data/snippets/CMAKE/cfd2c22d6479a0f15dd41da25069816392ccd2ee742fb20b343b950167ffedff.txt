# Define a function with input parameters
function(add_custom_command TARGET_NAME SOURCES)
  # Create a variable to hold the list of output files
  set(OUTPUT_FILES)

  # Loop through each source file in the list
  foreach(SOURCE_FILE ${SOURCES})
    # Generate a unique output file name using the source file name
    set(OUTPUT_FILE "${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}/${SOURCE_FILE}.o")

    # Add the compiled output file to the list of output files
    list(APPEND OUTPUT_FILES "${OUTPUT_FILE}")

    # Add a custom command to compile the source file and output to the generated output file
    add_custom_command(OUTPUT "${OUTPUT_FILE}"
                       COMMAND ${CMAKE_CXX_COMPILER} -c "${CMAKE_CURRENT_SOURCE_DIR}/${SOURCE_FILE}"
                       COMMENT "Compiling ${SOURCE_FILE}..."
                       DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${SOURCE_FILE}")

  endforeach()

  # Set the output files as dependencies for the target
  add_custom_target(${TARGET_NAME} DEPENDS ${OUTPUT_FILES})

  # Add the source files and generated output files to the target
  add_executable(${TARGET_NAME} ${SOURCES} ${OUTPUT_FILES})

  # Set the target properties such as include directories and compile options
  target_include_directories(${TARGET_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}")
  target_compile_options(${TARGET_NAME} PRIVATE -Wall -Wextra -Werror)
endfunction()

# Create a list of source files for the target
set(SOURCES main.cpp utility.cpp)

# Add the target using the defined function
add_custom_command(target_name "${SOURCES}")