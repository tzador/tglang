# Define a CMake project
cmake_minimum_required(VERSION 3.10)

# Set project name and version
project(My_Project VERSION 1.0.0)

# Set C++ standard to use
set(CMAKE_CXX_STANDARD 11)

# Set additional compile flags
set(CMAKE_CXX_FLAGS "-Wall -Wextra -Werror")

# Set build type to Debug or Release (default is Debug)
set(default_build_type "Debug")
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE STRING "Build type (default ${default_build_type})" FORCE)
endif()

# Set path for executable output
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Set path for library output
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Add header files to include directories
include_directories(${PROJECT_SOURCE_DIR}/include)

# Define source files
set(SOURCES src/main.cpp src/helper_functions.cpp src/classA.cpp)

# Create executable target
add_executable(my_executable ${SOURCES})

# Create library target
add_library(my_library SHARED ${SOURCES})

# Set target properties (for both executable and library)
set_target_properties(my_executable my_library PROPERTIES
    CXX_STANDARD ${CMAKE_CXX_STANDARD}
    CXX_EXTENSIONS OFF
    CXX_STANDARD_REQUIRED ON
    OUTPUT_NAME "my_project"
    VERSION ${PROJECT_VERSION}
    SOVERSION 1
    PUBLIC_HEADER "include/classA.h"
)

# Set install targets
install(TARGETS my_executable my_library
    DESTINATION ${CMAKE_INSTALL_PREFIX}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    PUBLIC_HEADER DESTINATION include
)

# Set unit test target and dependencies
enable_testing()
add_subdirectory(test)
add_test(NAME MyTest COMMAND MyProjectTest)
set_tests_properties(MyProjectTest PROPERTIES
    PASS_REGULAR_EXPRESSION "PASSED"
)
set_tests_properties(MyProjectTest PROPERTIES
    RUN_SERIAL ON
)