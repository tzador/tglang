cmake_minimum_required(VERSION 2.8.12) #specifies the minimum required version of CMAKE

project(SampleProject) #creates a project named SampleProject

set(SRCS #sets the SRCS variable to store source files
    src/main.cpp #adds main.cpp file to SRCS variable
    src/utils.cpp #adds utils.cpp file to SRCS variable
    src/class1.cpp #adds class1.cpp file to SRCS variable
    src/class2.cpp #adds class2.cpp file to SRCS variable
)

set(HEADERS #sets the HEADERS variable to store header files
    src/utils.h #adds utils.h file to HEADERS variable
    src/class1.h #adds class1.h file to HEADERS variable
    src/class2.h #adds class2.h file to HEADERS variable
)

add_executable(${PROJECT_NAME} ${SRCS} ${HEADERS}) #creates an executable named SampleProject with the given source and header files

set(CMAKE_CXX_STANDARD 11) #sets the C++ standard to C++11

target_include_directories(${PROJECT_NAME} PUBLIC include) #adds the include directory to the project's include directories

find_package(OpenGL REQUIRED) #finds and includes the OpenGL library

target_link_libraries(${PROJECT_NAME} PUBLIC ${OPENGL_LIBRARIES}) #links the OpenGL library to the project

find_package(glfw3 REQUIRED) #finds and includes the glfw3 library

target_include_directories(${PROJECT_NAME} PUBLIC ${GLFW3_INCLUDE_DIRS}) #adds the glfw3 include directory to the project's include directories

target_link_libraries(${PROJECT_NAME} PUBLIC ${GLFW3_LIBRARIES}) #links the glfw3 library to the project

find_package(GLEW REQUIRED) #finds and includes the GLEW library

target_include_directories(${PROJECT_NAME} PUBLIC ${GLEW_INCLUDE_DIRS}) #adds the GLEW include directory to the project's include directories

target_link_libraries(${PROJECT_NAME} PUBLIC ${GLEW_LIBRARIES}) #links the GLEW library to the project

if(MSVC) #checks if the platform is Microsoft Visual Studio
    target_compile_options(${PROJECT_NAME} PUBLIC /W3 /WX) #sets compile options for the project in MSVC
else() #otherwise
    target_compile_options(${PROJECT_NAME} PUBLIC -Wall -Wextra -pedantic -Werror) #sets compile options for the project in other platforms
endif()