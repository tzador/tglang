# Set the minimum required version of CMake
cmake_minimum_required(VERSION 3.0)

# Define a project name and specify languages used
project(MyProject LANGUAGES CXX)

# Create a variable for adding source files
set(SOURCES
    src/main.cpp
    src/addition.cpp
    src/multiplication.cpp
)

# Create an executable target and link the source files
add_executable(MyExecutable ${SOURCES})

# Set variables for include directories and compiler flags
set(INCLUDE_DIRS "include/"
    CACHE INTERNAL "Local include directories")
set(COMPILE_FLAGS "-std=c++11 -Wall"
    CACHE INTERNAL "Compiler flags")

# Set the include directories and compiler flags for the target
target_include_directories(MyExecutable PUBLIC
    ${INCLUDE_DIRS}
)
target_compile_options(MyExecutable PUBLIC
    ${COMPILE_FLAGS}
)

# Set up testing for the project
enable_testing()

# Create a testing executable target and link the source files
add_executable(TestExecutable ${SOURCES})

# Set variables for include directories and compiler flags for tests
set(TEST_INCLUDE_DIRS "tests/"
    CACHE INTERNAL "Local include directories for tests")
set(TEST_COMPILE_FLAGS "-std=c++11 -Wall"
    CACHE INTERNAL "Compiler flags for tests")

# Set the include directories and compiler flags for the testing target
target_include_directories(TestExecutable PUBLIC
    ${INCLUDE_DIRS}
    ${TEST_INCLUDE_DIRS}
)
target_compile_options(TestExecutable PUBLIC
    ${COMPILE_FLAGS}
    ${TEST_COMPILE_FLAGS}
)

# Add a custom test for the addition function
add_test(NAME AdditionTest 
    COMMAND TestExecutable 1 2
)

# Add a custom test for the multiplication function
add_test(NAME MultiplicationTest 
    COMMAND TestExecutable 3 4
)

# Set the output directory for the build
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)

# Create a custom target for building and running tests with a single command
add_custom_target(Test 
    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure
    DEPENDS TestExecutable
)