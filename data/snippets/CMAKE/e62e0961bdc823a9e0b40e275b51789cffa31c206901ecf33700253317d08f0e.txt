# Sample CMakeLists.txt file 

# Set the required minimum version of CMake
cmake_minimum_required(VERSION 3.10)

# Set the project name and language
project(MyProject CXX)

# Set compiler options
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O2") # add warning flags and highest optimization level
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static") # link statically
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /Ox") # add warning flags and highest optimization level
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /INCREMENTAL:NO") # disable incremental linking
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Weverything -fstrict-aliasing") # add warning flags and strict aliasing
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++") # use the libc++ standard library
else ()
  message(FATAL_ERROR "Unsupported compiler")
endif()

# Set source files
set(SOURCES
  src/main.cpp
  src/my_class.cpp)

# Add executable target
add_executable(MyProject ${SOURCES})

# Set includes
target_include_directories(MyProject PRIVATE include)

# Set link libraries
target_link_libraries(MyProject PRIVATE MyLib)

# Set install targets
install(TARGETS MyProject DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_PREFIX}/include)

# Set additional install files
set(OTHER_INSTALL_FILES
  README.md
  LICENSE
  config.json)

foreach(file ${OTHER_INSTALL_FILES})
  install(FILES ${file} DESTINATION ${CMAKE_INSTALL_PREFIX})
endforeach()

# Set install targets for external libraries
add_subdirectory(third_party)