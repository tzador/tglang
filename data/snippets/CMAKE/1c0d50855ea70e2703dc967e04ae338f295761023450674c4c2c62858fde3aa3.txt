cmake_minimum_required(VERSION 3.10) # Sets minimum version required to run cmake
project(myProject) # Names the project

# Set variables for different build types
set(CMAKE_CXX_FLAGS_RELEASE "-O2") # Optimization flag for release build
set(CMAKE_CXX_FLAGS_DEBUG "-g") # Debug flags for debug build
set(CMAKE_CXX_STANDARD 11) # Sets C++ standard to use

# Define source files for the project
set(SOURCES 
    src/main.cpp 
    src/helper_functions.cpp 
    src/classA.cpp 
    src/classB.cpp
)

# Define include directories for the project
include_directories(include 
    src
)

# Create executable from sources
add_executable(${PROJECT_NAME} ${SOURCES})

# Add libraries to link to the executable
target_link_libraries(${PROJECT_NAME} 
    lib1 
    lib2 
    lib3
)

# Set output directory for the executable
set_target_properties(${PROJECT_NAME} PROPERTIES 
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)

# Specify installation location for the executable
install(TARGETS ${PROJECT_NAME} 
    DESTINATION bin
)

# Specify installation location for header files
install(DIRECTORY include/ 
    DESTINATION include
)

# Specify installation location for libraries 
install(FILES 
    lib1.so 
    lib2.so 
    lib3.so
    DESTINATION lib
)

# Generate a CMake file for exporting project
export(
    TARGETS ${PROJECT_NAME} 
    FILE "${CMAKE_BINARY_DIR}/myProjectTargets.cmake"
)

# Include external dependencies 
find_package(OpenCV REQUIRED) # Find and include OpenCV library
find_package(Boost REQUIRED) # Find and include Boost library

# Follow dependencies for inclusion
include_directories(${OpenCV_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBS})

include_directories(${Boost_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})