# Define a variable named "FOO" and set its value to "bar"
set(FOO "bar" )

# Define a function to print a message
function(print_message)
    # Print a message to the console
    message("Hello from CMake!")
endfunction()

# Define a macro to print a message
macro(print_message_macro)
    # Print a message to the console
    message("Hello from CMake (macro)!")
endmacro()

# Loop through a list of numbers
foreach(num RANGE 1 5)
    # Print the current number to the console
    message("Current number: ${num}")
endforeach()

# Define a custom target
add_custom_target(foo_target
    COMMAND ${CMAKE_COMMAND} -E touch ${PROJECT_BINARY_DIR}/foo.txt
    COMMENT "Creating foo.txt"
    DEPENDS ${PROJECT_BINARY_DIR}/foo.txt
)

# Set compiler flags
set(CMAKE_CXX_FLAGS "-Wall -std=c++11")

# Add an external library
add_library(my_lib SHARED IMPORTED)

# Set the path to the library
set_target_properties(my_lib PROPERTIES
    IMPORTED_LOCATION "${LIB_PATH}/libmy_lib.so"
    INTERFACE_INCLUDE_DIRECTORIES "${LIB_PATH}/include"
)

# Link the library to a target
target_link_libraries(my_target my_lib)

# Define an executable target
add_executable(my_target main.cpp)

# Link the executable to a target
target_link_libraries(my_target my_lib)

# Add source files to a target
target_sources(my_target
    PRIVATE
        foo.cpp
        bar.cpp
)

# Set include directories for a target
target_include_directories(my_target
    PRIVATE
        "${CMAKE_SOURCE_DIR}/include"
)

# Custom function to generate a file
function(generate_file generated_file source_file)
    # Create the generated file
    file(WRITE ${generated_file}
        "// This file was generated from ${source_file}"
    )
endfunction()

# Define a source file for the generated file
set(template_file "${CMAKE_SOURCE_DIR}/templates/template.cpp.in")

# Generate a file using the custom function
generate_file("${CMAKE_BINARY_DIR}/generated.cpp" ${template_file})