# Declare minimum required CMake version
cmake_minimum_required(VERSION 3.14)

# Define project name
project(example_project)

# Set compiler flags
set(CMAKE_CXX_FLAGS "-std=c++11")

# Add include directories
include_directories(include)

# Add source files
add_executable(example_app src/main.cpp src/utils.cpp)

# Set output directory
set_target_properties(example_app PROPERTIES RUNTIME_OUTPUT_DIRECTORY
    ${PROJECT_SOURCE_DIR}/bin)

# Find external library
find_package(OpenGL REQUIRED)

# Create library target
add_library(my_library STATIC IMPORTED)

# Set path to library
set_property(TARGET my_library PROPERTY
    IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/lib/libmylib.a)

# Link library
target_link_libraries(example_app my_library)

# Set compiler specific flags
if (CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "-Wall -Wextra -Wno-unused-parameter ${CMAKE_CXX_FLAGS}")
endif()

# Set install directory
set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install)

# Set install targets
install(TARGETS example_app DESTINATION ${CMAKE_INSTALL_PREFIX})
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/lib/libmylib.a DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

# Generate documentation target
find_package(Doxygen REQUIRED)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_BINARY_DIR}/Doxyfile @ONLY)
add_custom_target(docs Doxygen ${CMAKE_BINARY_DIR}/Doxyfile COMMAND ${DOXYGEN_EXECUTABLE} 
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMENT "Generating Doxygen documentation")