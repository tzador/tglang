# Set the minimum required CMake version
cmake_minimum_required(VERSION 3.14)

# Define a project name
project(my_project)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 17)

# Add a library target
add_library(my_library)

# Specify the source files for the library target
# Note: The following command uses a glob expression to include all source files in the "src" directory
file(GLOB SOURCES "src/*.cpp")
target_sources(my_library PRIVATE ${SOURCES})

# Add a executable target
add_executable(my_executable)

# Specify the source files for the executable target
# Note: The following command uses a glob expression to include all source files in the "src" directory
file(GLOB SOURCES "src/*.cpp")
target_sources(my_executable PRIVATE ${SOURCES})

# Link the library target to the executable target
target_link_libraries(my_executable PRIVATE my_library)

# Set the output path for the executable binary
set_target_properties(my_executable PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)

# Set the include directories for the library target
target_include_directories(my_library PUBLIC include)

# Set the compiler flags for debug and release builds
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_options(my_library PRIVATE -g -Wall -Werror)
    target_compile_options(my_executable PRIVATE -g -Wall -Werror)
else()
    target_compile_options(my_library PRIVATE -O3)
    target_compile_options(my_executable PRIVATE -O3)
endif()

# Add a custom command to build a header-only library
add_custom_target(some_library
    DEPENDS some_header.hpp
    COMMAND "cp" "${CMAKE_SOURCE_DIR}/include/some_header.hpp" "${CMAKE_BINARY_DIR}/include/"
)

# Create an install target to copy the executable and library to the "bin" and "lib" directories
install(TARGETS my_executable my_library
    DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
)