# Create a CMake executable
add_executable(my_executable main.cpp)

# Create a library target in CMake
add_library(my_library SHARED
    my_class.cpp
    my_functions.cpp)

# Set a compiler flag
target_compile_options(my_executable PRIVATE
    -Wall)

# Set linker flags
target_link_libraries(my_executable PRIVATE
    my_library)

# Add a subdirectory to the build
add_subdirectory(tests)

# Define a custom target
add_custom_target(my_target
    COMMAND echo "Custom target executed.")

# Create an install target for the executable
install(TARGETS my_executable DESTINATION bin)

# Set properties for the library target
set_target_properties(my_library PROPERTIES
    VERSION 1.0
    SOVERSION 1)

# Include directories for the library target
target_include_directories(my_library PUBLIC
    ${PROJECT_SOURCE_DIR}/include)

# Automatically generate source code from a template
configure_file(my_template.cpp.in my_generated_file.cpp)

# Add a preprocessor definition
target_compile_definitions(my_library PRIVATE
    DEBUG)

# Set the output directory for the executable
set_target_properties(my_executable PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

# Link external library to the executable
target_link_libraries(my_executable PRIVATE
    ${EXTERNAL_LIBRARIES})

# Use a custom command to generate a file
add_custom_command(
    OUTPUT my_generated_file.cpp
    COMMAND generate_file
    COMMENT "Generating file..."
)

# Set a custom command as a dependency for a target
add_dependencies(my_executable my_target)

# Create a test target in CMake
add_test(NAME my_test
    COMMAND my_executable)

# Specify properties for a test
set_tests_properties(my_test PROPERTIES
    PASS_REGULAR_EXPRESSION "Test passed.")