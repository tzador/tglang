# Set minimum required version of CMake
cmake_minimum_required(VERSION 3.0)

# Define a project with name
project(MyProject)

# Set definitions for project
# 'DEBUG' definition will only be applied during debugging build
# 'MY_VAR' definition will be set to value '123'
add_definitions(-DDEBUG -DMY_VAR=123)

# Set compiler flags for specific build type (debug/release)
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    # Debug flags
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall")
else()
    # Release flags
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
endif()

# Include a directory for header files
include_directories(include)

# Set source files for project
set(SOURCES src/main.cpp src/utils.cpp)

# Create an executable target with specified sources
add_executable(MyApp ${SOURCES})

# Set properties for target (e.g. output directory)
set_target_properties(MyApp PROPERTIES
                       RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
                       ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib
                       LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Link libraries to target
target_link_libraries(MyApp PRIVATE mylib1 mylib2)

# Set install targets
install(TARGETS MyApp
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)

# Add test executable with unit tests
add_executable(tests tests/test_main.cpp tests/test_utils.cpp)

# Link testing library and target dependencies
target_link_libraries(tests PRIVATE gtest gtest_main MyApp)

# Add test target to CMake test environment
add_test(NAME unit_tests COMMAND tests)