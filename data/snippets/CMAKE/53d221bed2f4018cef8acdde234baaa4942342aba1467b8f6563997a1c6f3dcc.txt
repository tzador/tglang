# Set the minimum required version of CMake
cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

# Set the project name
project(my_cmake_project VERSION 1.0.0 LANGUAGES CXX)

# Specify the sources for the project
set(SOURCES src/main.cpp)
set(HEADERS include/my_class.hpp include/my_functions.hpp)

# Add an executable target
add_executable(my_executable ${SOURCES} ${HEADERS})

# Set the include directories
target_include_directories(my_executable PRIVATE include)

# Set the compile options
target_compile_options(my_executable PRIVATE -Wall -Wextra -Werror)

# Set the linker flags
target_link_libraries(my_executable PRIVATE -static-libstdc++)

# Add a custom command to generate a header file
add_custom_command(
  OUTPUT "${CMAKE_BINARY_DIR}/include/generated_enum.hpp"
  COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/scripts/gen_header.py"
    "${CMAKE_BINARY_DIR}/include/generated_enum.hpp"
  DEPENDS "${CMAKE_SOURCE_DIR}/scripts/gen_header.py"
  WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
)

# Add the generated header file as a dependency for the target
target_sources(my_executable PRIVATE "${CMAKE_BINARY_DIR}/include/generated_enum.hpp")

# Set the output directory for the executable
set_target_properties(my_executable PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)

# Set the install targets and directories
install(TARGETS my_executable
        DESTINATION ${CMAKE_INSTALL_BINDIR}/my_project)

install(DIRECTORY ${CMAKE_BINARY_DIR}/bin/
        DESTINATION ${CMAKE_INSTALL_BINDIR}/my_project)

install(DIRECTORY ${CMAKE_SOURCE_DIR}/include/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/my_project)