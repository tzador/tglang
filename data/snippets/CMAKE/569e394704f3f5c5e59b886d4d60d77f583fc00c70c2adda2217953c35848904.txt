# Define function to find and link libraries
function(find_and_link LIBNAME)
  # Search for the library
  find_library(${LIBNAME}_LIBRARY ${LIBNAME})

  # Check if library was found
  if(NOT ${LIBNAME}_LIBRARY)
    message(FATAL_ERROR "Could not find ${LIBNAME} library!")
  endif()

  # Add library to project
  target_link_libraries(${PROJECT_NAME} ${${LIBNAME}_LIBRARY})

  # Add include directory for found library
  find_path(${LIBNAME}_INCLUDE_DIR NAMES ${LIBNAME}.h)
  target_include_directories(${PROJECT_NAME} PUBLIC ${${LIBNAME}_INCLUDE_DIR})
endfunction()

# Define C++ project
project(CMAKE_PROJECT_NAME LANGUAGES CXX)

# Set required C++ standard
set(CMAKE_CXX_STANDARD 11)

# Create C++ executable
add_executable(${PROJECT_NAME} main.cpp)

# Link libraries to project
find_and_link(OpenCV)
find_and_link(Boost)
find_and_link(Eigen)
find_and_link(OpenGL)

# Add C++ compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic")

# Set build type to release
set(CMAKE_BUILD_TYPE Release)

# Set install directory
set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/install)

# Install executable to install directory
install(TARGETS ${PROJECT_NAME}
        DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)