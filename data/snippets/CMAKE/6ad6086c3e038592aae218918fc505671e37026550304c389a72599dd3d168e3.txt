# Declare a variable named "NAME"
set(NAME "John Doe")

# Create a custom command to run a shell script
add_custom_command(
    OUTPUT custom_output.txt     # Output file after running the command
    COMMAND sh custom_script.sh  # Actual command to be run
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/custom_script.sh # Dependencies for the command
)

# Set up a target and its properties
add_executable(my_target
    main.cpp    # Source code file
)

# Add custom compiler flags
target_compile_options(my_target PRIVATE
    -Wall   # Turns on all compiler warnings
    -O2     # Optimization level 2
)

# Set the output directory for compiled binaries
set_target_properties(my_target PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin"
)

# Define a macro
macro(my_macro ARG1 ARG2)
    message("My macro has been called with arguments: ${ARG1}, ${ARG2}")
endmacro()

# Use the macro
my_macro("Hello" "World")

# Create a library target and link it to the target
add_library(my_library
    math.cpp    # Library source code
)

# Link the library to the target
target_link_libraries(my_target PRIVATE
    my_library
)

# Add include directories for the target
target_include_directories(my_target PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Define a function
function(my_function ARG)
    message("My function has been called with argument: ${ARG}")
endfunction()

# Call the function
my_function("Hello")

# Set C++11 as the standard for compiling
target_compile_features(my_target PRIVATE cxx_std_11)