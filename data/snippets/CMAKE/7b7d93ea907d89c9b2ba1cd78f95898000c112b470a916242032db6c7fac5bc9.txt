# Setting the project name
project(ExampleProject)

# Setting the minimum required CMake version
cmake_minimum_required(VERSION 3.12)

# Add an executable target called "example" with source files
add_executable(example main.cpp main.hpp)

# Set the C++ standard to C++17
set(CMAKE_CXX_STANDARD 17)

# Add a library target called "example_lib" with source files
add_library(example_lib STATIC utils.cpp utils.hpp)

# Include the "include" directory in the project
include_directories(include)

# Link the "example" executable target to the "example_lib" library target
target_link_libraries(example PRIVATE example_lib)

# Set a custom build type called "debug", with debugging symbols enabled
set(CMAKE_BUILD_TYPE Debug)

# Set compiler flags for the "example" target
target_compile_options(example PRIVATE -Wall -Wextra)

# Add conditional compilation for a specific platform
if (APPLE)
    target_compile_definitions(example PRIVATE PLATFORM_MACOS=1)
elseif (UNIX)
    target_compile_definitions(example PRIVATE PLATFORM_UNIX=1)
endif()

# Add a custom command to copy a file after the "example" target is built
add_custom_command(TARGET example POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/resources/data.txt ${CMAKE_CURRENT_BINARY_DIR}/data.txt)

# Set the output directory for the "example" target to the "bin" directory
set_target_properties(example PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)