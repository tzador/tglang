# Define a CMake project
project(my_project)

# Set minimum version required
cmake_minimum_required(VERSION 3.10)

# Add a variable with a list of files to be compiled
set(SOURCE_FILES
    main.cpp
    utils.cpp
    math.c
)

# Create a library for the source files
add_library(my_lib ${SOURCE_FILES})

# Set compiler options
target_compile_options(my_lib PRIVATE
    -Wall
    -Wextra
    -pedantic
)

# Include header files
target_include_directories(my_lib PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Create an executable from main.cpp
add_executable(my_exe main.cpp)

# Link the library to the executable
target_link_libraries(my_exe PRIVATE
    my_lib
)

# Include external library
add_subdirectory(external_lib)

# Link external library to the main project
target_link_libraries(my_exe PRIVATE
    ext_lib
)

# Set build type to Release
set(CMAKE_BUILD_TYPE Release)

# Set build directory
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)

# Set output directory for the executable
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})

# Set output directory for the library
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

# Compile in parallel
if (MSVC)
    add_definitions(/MP)
endif()

# Add compiler flag for profiling
if (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    add_compile_options(--coverage)
    target_link_libraries(my_lib PRIVATE gcov)
endif()