# Define a variable for the project name
set(PROJECT_NAME "MyProject")

# Specify the minimum version of CMake required
cmake_minimum_required(VERSION 3.10)

# Set the project name and version
project(${PROJECT_NAME} VERSION 1.0.0)

# Set the source files for the project
set(SOURCES src/main.cpp src/utils.cpp src/helpers.cpp)

# Set the header files for the project
set(HEADERS include/utils.h include/helpers.h)

# Add an executable target for the project
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})

# Set the include directories for the target
target_include_directories(${PROJECT_NAME} 
PUBLIC
$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)

# Set the libraries to link to the target
target_link_libraries(${PROJECT_NAME} 
PRIVATE 
foo_lib 
bar_lib
)

# Add custom compiler flags
target_compile_options(${PROJECT_NAME}
PRIVATE
-Wall
-Werror
)

# Add custom preprocessor definitions
target_compile_definitions(${PROJECT_NAME}
PRIVATE
-DDEBUG_MODE
)

# Set the install path for the project
set(INSTALL_PATH "/usr/local/bin")

# Specify the files to be installed
install(TARGETS ${PROJECT_NAME}
RUNTIME DESTINATION ${INSTALL_PATH}
LIBRARY DESTINATION ${INSTALL_PATH}
)

# set variables for test files
set(TEST_FILES test/test_helpers.cpp test/test_utils.cpp)

# Add a test executable target for the project
add_executable(tests ${TEST_FILES})

# Set the libraries to link to the tests target
target_link_libraries(tests 
PRIVATE 
gtest 
foo_lib 
bar_lib
)

# Set the target as a test
add_test(tests tests)

# Set the C++ standard to use
set(CMAKE_CXX_STANDARD 11)

# Configure a file with project information
configure_file(
${CMAKE_CURRENT_SOURCE_DIR}/config.h.in
${CMAKE_CURRENT_BINARY_DIR}/config.h
)

# Add the binary directory to the includes
include_directories(${CMAKE_CURRENT_BINARY_DIR})