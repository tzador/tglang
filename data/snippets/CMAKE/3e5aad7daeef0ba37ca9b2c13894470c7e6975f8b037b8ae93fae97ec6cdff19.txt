# Define a variable
set(VAR_NAME some value)

# Create a function
function(my_func)
  # Perform some action
  message("This is my function")

  # Use the previously defined variable
  message("My variable: ${VAR_NAME}")
endfunction(my_func)

# Create a macro
macro(my_macro param1 param2)
  # Perform some action using the parameters
  add_custom_command(
    OUTPUT ${param2}
    COMMAND echo ${param1} > ${param2}
  )

  # Use the previously defined function
  my_func()

  # Add a dependency
  add_dependencies(my_target ${param2})

  # Add a source file
  add_source_file("my_file.cpp")

  # Set compiler flags
  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-Wall -Werror")

  # Create a library
  add_library(my_lib ${param2})

  # Link the library
  target_link_libraries(my_target my_lib)

  # Create an executable
  add_executable(my_exe ${param2})

  # Link the executable
  target_link_libraries(my_exe my_lib)
endmacro(my_macro)

# Create a target
add_library(my_target)

# Create a source group
source_group("Sources" FILES "my_file.cpp")

# Set properties for the target
set_target_properties(my_target
  PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
)

# Add a subdirectory
add_subdirectory("my_subdir")

# Set include directories
include_directories("include")

# Set link directories
link_directories("lib")

# Set preprocessor definitions
add_definitions(-DCONFIG_VALUE=1)

# Link libraries to target
target_link_libraries(my_target
  PUBLIC
    "lib1"
    "lib2"
  PRIVATE
    "lib3"
)

# Add compiler flags
target_compile_options(my_target PRIVATE -O3)

# Set runtime library directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

# Create a test
add_test(NAME my_test COMMAND my_exe)

# Specify source files for test
set(TEST_SRCS "my_test.cpp")

# Create test executable
add_executable(my_test_exe ${TEST_SRCS})
# Link libraries to test executable
target_link_libraries(my_test_exe my_lib)