# Define a variable to hold a list of source files
set(SOURCE_FILES 
    main.cpp 
    utils.cpp 
    data_structures.cpp
)

# Define an executable target and link the source files
add_executable(my_app ${SOURCE_FILES})

# Include a header-only library as a dependency
target_include_directories(my_app PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include")

# Set compiler requirements and flags
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")

# Define a macro for creating a custom target
macro(add_print_target TARGET_NAME)
    # Create a target with the specified name and an empty list of source files
    add_executable(${TARGET_NAME})
    # Add a compile definition to set the target name as a string
    target_compile_definitions(${TARGET_NAME} PUBLIC "-DTARGET_NAME='\"${TARGET_NAME}\"'")
    # Add a custom command to run a print command before building the target
    add_custom_command(TARGET ${TARGET_NAME} PRE_BUILD COMMAND echo "Building ${TARGET_NAME}...")
    # Add a custom command to print a message after building the target
    add_custom_command(TARGET ${TARGET_NAME} POST_BUILD COMMAND echo "Finished building ${TARGET_NAME}")
endmacro()

# Create a custom target named "hello" using the add_print_target macro
add_print_target(hello)

# Create a custom target named "world" using the add_print_target macro
add_print_target(world)

# Set a dependency between "hello" and "world"
add_dependencies(hello world)

# Set additional properties for the "hello" target
set_target_properties(hello PROPERTIES 
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin"
    INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib"
    INSTALL_RPATH_USE_LINK_PATH TRUE
    VERSION 1.0.0
)