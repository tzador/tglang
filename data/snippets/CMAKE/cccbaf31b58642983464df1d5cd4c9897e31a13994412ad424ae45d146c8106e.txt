# this is a comment
# set the minimum version of CMake required
cmake_minimum_required(VERSION 3.0) 

# create a project with a given name
project(my_project) 

# set the output directory for build binaries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin) 

# set the output directory for build libraries
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) 

# set the output directory for build archives
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) 

# set the source files for the project
set(SOURCES 
    main.cpp 
    helper.cpp 
    utils.cpp
) 

# add an executable target for the project using the source files
add_executable(my_project ${SOURCES}) 

# add a library target for the project using the source files
add_library(my_project_lib ${SOURCES})


# set the include directories for the project
target_include_directories(my_project PUBLIC 
    include 
    ${CMAKE_CURRENT_SOURCE_DIR}/external/dependencies/include 
) 

# link the library dependency to the executable target
target_link_libraries(my_project PUBLIC my_project_lib) 

# set the compilation options for the project
target_compile_options(my_project PUBLIC -Wall -Werror -std=c++11) 

# add a custom compile target for the project using a specific compiler
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set_property(TARGET my_project PROPERTY COMPILE_FLAGS "-march=native")
endif() 

# add a custom link target for the project using a specific linker
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    set_property(TARGET my_project PROPERTY LINK_FLAGS "-static")
endif() 

# add a custom pre-build target to copy necessary files to build directories
add_custom_target(copy_files ALL
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_CURRENT_SOURCE_DIR}/assets ${CMAKE_BINARY_DIR}/assets
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_CURRENT_SOURCE_DIR}/config ${CMAKE_BINARY_DIR}/config
) 

# add post-build command to run a specific script
add_custom_command(TARGET my_project POST_BUILD 
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_SOURCE_DIR}/scripts/post_build.cmake
) 

# set the compiler options for the C++ language
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -g -Wall -Wextra")