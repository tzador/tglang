# Set up a configure_file command to copy a config file to the build directory
CONFIGURE_FILE(
  ${CMAKE_CURRENT_SOURCE_DIR}/config.ini
  ${CMAKE_CURRENT_BINARY_DIR}/config.ini
  @ONLY)

# Set a variable with some compiler flags
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")

# Define a macro to link a library to a target
MACRO(LINK_LIBRARIES target lib)
  target_link_libraries(${target} ${lib})
  target_include_directories(${target} PRIVATE ${lib})
ENDMACRO()

# Define a function to set up a subdirectory in the project
# This function can take optional arguments
FUNCTION(SETUP_SUBDIRECTORY subdirectory)
  # Add the subdirectory to the build
  ADD_SUBDIRECTORY(${subdirectory})
  
  # Set variables for the subdirectory
  SET(SUBDIRECTORY_INCLUDE ${subdirectory}/include)
  SET(SUBDIRECTORY_SOURCES ${subdirectory}/src)
  
  # Add the subdirectory's include directory to the project's include directories
  INCLUDE_DIRECTORIES(${SUBDIRECTORY_INCLUDE})
  
  # Add the subdirectory's source files to the project's sources
  SET(SOURCES ${SOURCES} ${SUBDIRECTORY_SOURCES})
  
  # Set the subdirectory's compile flags
  SET(SUBDIRECTORY_CXX_FLAGS "-std=c++17")
  
  # Set the subdirectory's sources to be compiled with the subdirectory's compile flags
  SET_SOURCE_FILES_PROPERTIES(${SUBDIRECTORY_SOURCES} PROPERTIES COMPILE_FLAGS ${SUBDIRECTORY_CXX_FLAGS})
  
  # Set the target's sources to be compiled with the subdirectory's sources
  SET(SOURCES ${SOURCES} ${SUBDIRECTORY_SOURCES})
  
  # Set the target's include directories to include the subdirectory's include
  SET(INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES} ${SUBDIRECTORY_INCLUDE})
  
  # Set the target's libraries to include the subdirectory's libraries
  SET(LINK_LIBRARIES ${LINK_LIBRARIES} ${SUBDIRECTORY_LIBRARIES})
  
  # Set the target's link libraries with the LINK_LIBRARIES macro
  LINK_LIBRARIES(myTarget subdirectoryLib)
ENDFUNCTION()