# Set minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Set project name and optional description
project(my_project
    DESCRIPTION "This is my project"
)

# Add custom macro
macro(my_macro argument)
    message("Argument value is ${argument}")
endmacro()

# Set build type to Release
set(CMAKE_BUILD_TYPE Release)

# Add source files to be compiled
set(SRCS
    src/main.cpp
    src/utility.cpp
)

# Add header files for the project
set(INCS
    include/utility.h
)

# Create library target
add_library(my_lib STATIC ${SRCS} ${INCS})

# Set the output directory for built executables
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Create executable target
add_executable(my_executable src/main.cpp)

# Link executable target to library target
target_link_libraries(my_executable my_lib)

# Add compiler flags for the library target
target_compile_options(my_lib PRIVATE 
    -Wall
    -Wextra
    -Werror
)

# Add a specific preprocessor definition
target_compile_definitions(my_lib PRIVATE 
    DEBUG
)

# Add include directories for the library target
target_include_directories(my_lib PUBLIC 
    include
)

# Set the version of the library
set_target_properties(my_lib PROPERTIES 
    VERSION 1.0.0
    SOVERSION 1
)

# Add a custom command to be executed during build
add_custom_command(
    TARGET my_lib
    POST_BUILD 
    COMMAND echo "Build complete!"
)

# Install the executable target and library target
install(TARGETS 
    my_executable 
    LIBRARY DESTINATION lib 
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

# Install header files for the project
install(FILES 
    ${INCS}
    DESTINATION include
)