# Comment
# Sets the minimum required version of CMake
cmake_minimum_required(VERSION 3.14 FATAL_ERROR)

# Creates new project
project(MyProject VERSION 1.0)

# Creates a library target with sources in a 'src' directory and 'include' directory
add_library(MyLibrary
    src/myfile1.cpp
    src/myfile2.cpp
    include/myheader1.h
    include/myheader2.h)

# Sets the compiler to use C++17
target_compile_features(MyLibrary PUBLIC cxx_std_17)

# Sets the include directories for the library and the project
target_include_directories(MyLibrary
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
    PRIVATE
        src)

# Creates an executable target for the main application
add_executable(MyApplication src/main.cpp)

# Links the application with the library
target_link_libraries(MyApplication PRIVATE MyLibrary)

# Adds a custom command to be executed before building the application
add_custom_command(TARGET MyApplication PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/resources $<TARGET_FILE_DIR:MyApplication>/resources)
    
# Sets the output directory for the executable
set_target_properties(MyApplication PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

# Adds installation rules for the library and application
install(TARGETS MyLibrary MyApplication
    DESTINATION lib)

# Adds installation rules for the headers
install(DIRECTORY include/
    DESTINATION include)

# Generates a package configuration file to be used by other projects
configure_file(config.cmake.in MyProjectConfig.cmake @ONLY)

# Installs the package configuration file
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/MyProjectConfig.cmake
    DESTINATION lib/cmake/MyProject)