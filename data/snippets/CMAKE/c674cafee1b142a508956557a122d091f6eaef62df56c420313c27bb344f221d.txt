# Sets up the project name and version
project(MyProject VERSION 1.0.0)

# Sets the minimum required CMAKE version
cmake_minimum_required(VERSION 3.12)

# Sets compiler flags and options
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra")

# Sets the source files for the project
set(SOURCES main.cpp file1.cpp file2.cpp)

# Creates an executable for the project
add_executable(${PROJECT_NAME} ${SOURCES})

# Set include directories
target_include_directories(${PROJECT_NAME} PUBLIC 
                            ${PROJECT_SOURCE_DIR}/include)

# Sets the library directories
link_directories(${PROJECT_NAME} PUBLIC 
                ${PROJECT_SOURCE_DIR}/lib)

# Sets the libraries to be linked
target_link_libraries(${PROJECT_NAME} PUBLIC 
                        library1 library2)

# Adds a custom command to execute before building
add_custom_command(TARGET ${PROJECT_NAME} PRE_BUILD
                    COMMAND ${CMAKE_COMMAND} -E copy 
                    ${PROJECT_SOURCE_DIR}/config.txt 
                    ${CMAKE_CURRENT_BINARY_DIR}/config.txt)

# Adds a custom command to execute after building
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -E copy_directory 
                    ${PROJECT_SOURCE_DIR}/assets 
                    ${CMAKE_CURRENT_BINARY_DIR}/assets)

# Creates a symbol link in the build directory
file(CREATE_LINK ${PROJECT_SOURCE_DIR}/scripts
                ${CMAKE_CURRENT_BINARY_DIR}/scripts
                symbolic)

# Sets the output directory for the built binaries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Sets the output directory for the built libraries
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Sets the output directory for the built archives
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)