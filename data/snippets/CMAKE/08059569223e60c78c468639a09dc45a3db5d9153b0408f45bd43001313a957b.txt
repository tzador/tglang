# Declare a variable and set its value
set(OUTPUT_DIR ${CMAKE_BINARY_DIR}/output)

# Create a library target
add_library(MyLibrary SHARED 
    src/MyClass.cpp
    src/MyOtherClass.cpp)

# Specify include directories for the target
target_include_directories(MyLibrary PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src)

# Set compile options for the target
target_compile_options(MyLibrary PRIVATE
    -Wall
    -Wextra
    -Wpedantic)

# Link the target to external libraries
target_link_libraries(MyLibrary PRIVATE
    ${EXTERNAL_LIBRARIES})

# Define a custom target
add_custom_target(MyTarget
    COMMAND echo "This is a custom target"
    DEPENDS MyLibrary)

# Create an executable target that depends on the custom target
add_executable(MyExecutable main.cpp)
add_dependencies(MyExecutable MyTarget)
target_link_libraries(MyExecutable PUBLIC
    MyLibrary)

# Specify C++11 as the required standard
set_target_properties(MyLibrary MyExecutable PROPERTIES
    CXX_STANDARD 11
    CXX_STANDARD_REQUIRED YES
    CXX_EXTENSIONS NO)

# Install the library and exeutable targets
install(TARGETS MyLibrary MyExecutable
    ARCHIVE DESTINATION ${OUTPUT_DIR}/lib
    RUNTIME DESTINATION ${OUTPUT_DIR}/bin
    LIBRARY DESTINATION ${OUTPUT_DIR}/lib)

# Install header files for the library
install(DIRECTORY include/ DESTINATION ${OUTPUT_DIR}/include)

# Create a CPack package
set(CPACK_PACKAGE_NAME "MyProject")
set(CPACK_PACKAGE_VERSION "1.0.0")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
set(CPACK_OUTPUT_FILE_PREFIX ${OUTPUT_DIR})
include(CPack)