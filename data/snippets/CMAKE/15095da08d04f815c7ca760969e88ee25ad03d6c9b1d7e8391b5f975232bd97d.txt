# Set project name
project(ExampleProject)

# Specify minimum required version of CMake
cmake_minimum_required(VERSION 3.0)

# Add executable target
add_executable(example main.cpp)

# Define a macro to set compiler flags
macro(set_compiler_flags target)
    # Check if compiler is GCC
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        # Set flags for optimization and debugging for GCC
        target_compile_options(${target} PRIVATE -Wall -Wextra -O2 -g)
    # Check if compiler is Clang
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        # Set flags for optimization and debugging for Clang
        target_compile_options(${target} PRIVATE -Wall -Wextra -O2 -g)
    # Check if compiler is MSVC (Microsoft Visual C++)
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        # Set flags for optimization and debugging for MSVC
        target_compile_options(${target} PRIVATE /W4 /Oi /Oy- /Od /Zi)
    endif()
endmacro()

# Call the macro to set compiler flags for the executable target
set_compiler_flags(example) 

# Add a custom command to run a script before building the executable target
add_custom_command(
    TARGET example PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy
        ${CMAKE_SOURCE_DIR}/config.ini $<TARGET_FILE_DIR:example>/config.ini
)

# Add a custom target to generate documentation using Doxygen
find_package(Doxygen)
if(DOXYGEN_FOUND)
    # Set configuration file for Doxygen
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
    # Add target to generate documentation
    add_custom_target(docs ALL
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM
    )
endif()

# Add subdirectory for tests
add_subdirectory(tests)