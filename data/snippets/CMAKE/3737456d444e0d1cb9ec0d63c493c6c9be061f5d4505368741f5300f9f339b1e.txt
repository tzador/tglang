# Declare a variable called 'SOURCES' containing a list of source files
# that we want to include in our project
set(SOURCES 
    src/main.cpp
    src/utils.cpp
    src/greet.cpp
)

# Create a target called 'my_project' with type 'executable'
# and link it to the 'SOURCES' variable
add_executable(my_project ${SOURCES})

# Set compiler options
target_compile_options(my_project PUBLIC 
    -Wall
    -Wextra
    -Werror
)

# Add include directories
target_include_directories(my_project PUBLIC 
    include
)

# Link the project to some external libraries
target_link_libraries(my_project PUBLIC 
    pthread
    math
)

# Specify the minimum version of CMake required to build the project
cmake_minimum_required(VERSION 3.10)

# Set the project name to 'my_project'
project(my_project)

# Set the language standard to C++11
set(CMAKE_CXX_STANDARD 11)

# Set the output directory for the compiled executable
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# Specify a custom build type called 'debug' with additional compiler flags
# and a custom 'build' directory to store the compiled object files
set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_CXX_FLAGS_DEBUG "-g -DDEBUG")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/build)

# Specify a custom build type called 'release' with additional compiler flags
# and a custom 'build' directory to store the compiled object files
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/build)