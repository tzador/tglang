# This is a CMakeLists file for a project
cmake_minimum_required(VERSION 3.10)  # Set minimum required version of CMake

# Define project name
project(MyProject  # Name of the project
    VERSION 1.0.0  # Version number
    DESCRIPTION "A project for generating code snippets in CMake"  # Description of the project
    LANGUAGES CXX)  # Language used for the project

# Set C++ compiler and flags
set(CMAKE_CXX_COMPILER g++)  # Set compiler to g++
set(CMAKE_CXX_FLAGS "-Wall -Werror")  # Set compiler flags to enable all warnings and treat warnings as errors

# Include directories
include_directories(${PROJECT_SOURCE_DIR}/include)  # Add the "include" directory to the project source directory
get_property(CMAKE_INCLUDE_DIRECTORIES DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)  # Retrieve all include directories of the current source directory
list(APPEND INCLUDE_DIRS ${CMAKE_INCLUDE_DIRECTORIES})  # Append the retrieved include directories to a list

# Create a library target
add_library(my_lib  # Name of the library target
    STATIC  # Type of library (static in this case)
    src/my_class.cpp  # Source file(s) for the library
    ${INCLUDE_DIRS})  # Include directories to be used in the library

# Add an executable target
add_executable(my_executable  # Name of the executable target
    src/main.cpp)  # Source file(s) for the executable

# Link the executable target with the library target
target_link_libraries(my_executable my_lib)  # Link the executable with the library

# Set installation paths for the library and executable
install(TARGETS my_lib  # Install the library target
    ARCHIVE DESTINATION lib  # Install the library in the "lib" directory
    LIBRARY DESTINATION lib  # Install the shared library in the "lib" directory
    RUNTIME DESTINATION bin)  # Install the executables in the "bin" directory

install(TARGETS my_executable  # Install the executable target
    RUNTIME DESTINATION bin)  # Install the executables in the "bin" directory

# Set installation paths for the header files
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/  # Install all files in the "include" directory
    DESTINATION include  # Install in the "include" directory
    FILES_MATCHING  # Install only files that match the patterns
    PATTERN "*.h")  # Install only header files with the ".h" extension

# Add a custom command to copy a file to a specific location during build
add_custom_command(TARGET my_executable PRE_BUILD  # Specify when the command will be executed, in this case before building the executable
    COMMAND ${CMAKE_COMMAND} -E copy  # Use the CMake "copy" command
    ${PROJECT_SOURCE_DIR}/assets/assets.txt  # File to be copied
    ${CMAKE_BINARY_DIR}/assets.txt)  # Destination directory for the copied file

# Add a custom target to test the executable
add_custom_target(tests  # Set name of the custom target
    COMMAND ${CMAKE_BINARY_DIR}/my_executable)  # Command to be executed when running "make tests"

# Set build type to Debug
set(CMAKE_BUILD_TYPE Debug)  # Set the build type to Debug

# Print out the installation paths during build
message(STATUS "Installing library to ${CMAKE_INSTALL_PREFIX}/lib")
message(STATUS "Installing executables to ${CMAKE_INSTALL_PREFIX}/bin")
message(STATUS "Installing headers to ${CMAKE_INSTALL_PREFIX}/include")