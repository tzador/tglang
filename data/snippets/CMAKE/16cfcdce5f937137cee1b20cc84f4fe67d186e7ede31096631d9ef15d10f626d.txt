[cmake_minimum_required(VERSION 3.10) #specifies minimum version required to run cmake
project(my_project VERSION 1.0.0) #sets project name and version
set(CMAKE_CXX_STANDARD 17) #sets C++ standard to use
set(CMAKE_CXX_STANDARD_REQUIRED ON) #flags that the chosen C++ standard is required
set(CMAKE_CXX_EXTENSIONS OFF) #disables compiler-specific extensions
set(CMAKE_EXPORT_COMPILE_COMMANDS ON) #generates JSON file with compilation commands
set(CMAKE_BUILD_TYPE Release) #sets the build type to Release
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra") #adds extra compiler flags 
set(SOURCES main.cpp other.cpp) #list of source files for compilation
add_executable(my_program ${SOURCES}) #creates an executable using source files
set_target_properties(my_program PROPERTIES #set target properties
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin" #sets binary output directory
)
target_include_directories(my_program PRIVATE include) #adds include directory for target
target_compile_definitions(my_program PRIVATE MY_DEFINITION) #defines custom compile definition
target_compile_options(my_program PRIVATE -O3 -pthread) #custom compiler options
target_link_libraries(my_program PUBLIC my_library) #link against public library