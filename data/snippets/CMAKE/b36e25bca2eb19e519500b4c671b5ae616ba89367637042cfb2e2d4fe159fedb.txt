# This CMake snippet shows a typical C++ project structure with library and executable targets
# and uses variables for conditional compilation and installation paths

# Define the minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Set project name and version
project(MyProject VERSION 1.0)

# Set C++ standard and required extensions
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)

# Set installation path for libraries and executables
set(LIB_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/lib")
set(BIN_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/bin")

# Add library target, using headers and sources from src/ directory
add_library(MyLibrary STATIC
    src/MyClass1.h
    src/MyClass2.h
    src/MyClass1.cpp
    src/MyClass2.cpp
)

# Set include directories for library
target_include_directories(MyLibrary PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src)

# Add executable target, using main.cpp file in main/ directory
add_executable(MyExecutable main/main.cpp)

# Link MyLibrary with MyExecutable
target_link_libraries(MyExecutable MyLibrary)

# Set compile definitions for conditional compilation
target_compile_definitions(MyLibrary PRIVATE 
    $<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:_DEBUG>
    $<$<OR:$<CONFIG:Release>,$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:MY_DEFINITION>
)

# Set installation rules for library and executable
install(TARGETS MyLibrary DESTINATION ${LIB_INSTALL_DIR})
install(TARGETS MyExecutable DESTINATION ${BIN_INSTALL_DIR})