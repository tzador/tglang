# This is a CMakeLists.txt file which is used to configure and build a CMake project.

# Specify the minimum required version of CMake
cmake_minimum_required(VERSION 3.12)

# Create a project with a given name
project(ExampleProject)

# Set the C++ standard version to be used
set(CMAKE_CXX_STANDARD 11)

# Add an executable target called "app" and specify the source files needed to build it
add_executable(app main.cpp helper.cpp)

# Add a subdirectory to the project, where additional CMakeLists.txt files can be found
add_subdirectory(some_lib)

# Link the "app" target with the "some_lib" library
target_link_libraries(app some_lib)

# Specify the installation directory for the built targets
install(TARGETS app DESTINATION bin)

# Enable testing for this project
enable_testing()

# Add a test called "test_app" and specify the executable to be tested
add_test(NAME test_app COMMAND app)

# Add a custom target called "clean" to clean up the build directory
add_custom_target(clean COMMAND rm -rf "${CMAKE_BINARY_DIR}"/*)

# Define a macro to simplify the creation of CMake targets
macro(add_example_target TARGET_NAME TARGET_SOURCES)
    # Add the target with the given name
    add_executable(${TARGET_NAME} ${TARGET_SOURCES})

    # Set the target properties (e.g. include directories, preprocessor definitions)
    target_include_directories(${TARGET_NAME} PRIVATE include)
    target_compile_definitions(${TARGET_NAME} PRIVATE -DDEBUG)

    # Install the target to the specified directory
    install(TARGETS ${TARGET_NAME} DESTINATION bin)

    # Append the target to a variable so it can be referenced later
    list(APPEND EXAMPLE_TARGETS ${TARGET_NAME})
endmacro()

# Create a CMake target called "example" with two source files
add_example_target(example example.cpp example_helper.cpp)

# Display a message when CMake configuration is completed
message(STATUS "CMake configuration completed!")