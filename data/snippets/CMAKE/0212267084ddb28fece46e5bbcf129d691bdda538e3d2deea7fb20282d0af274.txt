# Define the minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Set the project name
project(MyProject)

# Add source files to the project
file(GLOB SOURCES "src/*.cpp")

# Set the include directories
include_directories(
    "include"
    "external/lib1/include"
    "external/lib2/include"
)

# Set the libraries to link
set(LIBRARIES lib1 lib2)

# Create an executable target
add_executable(MyApp ${SOURCES})

# Link the libraries to the executable target
target_link_libraries(MyApp ${LIBRARIES})

# Set the compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra")

# Add a custom command to generate a file during build
add_custom_command(
    OUTPUT ${CMAKE_BINARY_DIR}/GeneratedFile.h
    COMMAND GenerateFileCommand
    COMMENT "Generating file..."
)

# Set dependencies for custom command
add_dependencies(MyApp GenerateFileCommand)

# Add GeneratedFile.h to the include directories
include_directories(${CMAKE_BINARY_DIR})

# Add a target to install the executable
install(TARGETS MyApp DESTINATION bin)

# Add a target to install the include files
install(DIRECTORY include/ DESTINATION include)

# Add a target to create a package
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)