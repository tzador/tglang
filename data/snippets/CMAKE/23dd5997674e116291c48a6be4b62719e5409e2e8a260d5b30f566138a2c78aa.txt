cmake_minimum_required(VERSION 3.15) #Require minimum CMake version
project(example_project) #Create project named "example_project"

set(CMAKE_CXX_STANDARD 11) #Set C++ standard to 11

#Add source files to the project
set(SOURCES main.cpp utility.cpp)

#Create an executable from the source files
add_executable(example ${SOURCES})

#Set include directories for the project
include_directories("include")

#Find and link necessary libraries for the project
find_library(LIB_1 lib1) 
find_library(LIB_2 lib2)
target_link_libraries(example ${LIB_1} ${LIB_2})

#Specify build options for the project
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -O3")

#Create a test for the project
enable_testing()
add_test(NAME example_test COMMAND example) #Create a test called "example_test" that runs the "example" executable

#Create a custom target
add_custom_target(my_target COMMAND echo "Custom target created.")

#Set compile definitions for the project
add_compile_definitions(DEF_1 DEF_2)

#Add a subdirectory to the project
add_subdirectory(subdir) #Include the "subdir" directory in the build
 
#Set variables for the project
set(NUMBERS 1 2 3)

#Generate a message during configuration
message(STATUS "Project configured!")

#Install the executable and other necessary files
install(TARGETS example DESTINATION bin)
install(DIRECTORY include/ DESTINATION include)

#Set required dependencies for the project
set(REQUIRED_PACKAGES lib1 lib2)

#Create a package for the project
include(CPack)