# setting up a CMake project for a library
# with multiple source files and dependencies

# set the minimum required version of CMake
cmake_minimum_required(VERSION 3.14)

# set the project name and version
project(MyLibrary VERSION 1.0)

# set the output directory for the build
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# configure the library targets
add_library(${PROJECT_NAME} SHARED)

# set the sources for the library
set(SOURCES my_lib.cpp
            helper_functions.cpp
            utility.cpp)

# add the sources to the library target
target_sources(${PROJECT_NAME} PRIVATE ${SOURCES})

# include header files from included directories
target_include_directories(${PROJECT_NAME} PRIVATE include)

# set dependencies for the library
# these could be other libraries or external packages
target_link_libraries(${PROJECT_NAME} PUBLIC pthread)

# set compiler flags for the library
target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra)

# add any additional compilation commands here if needed
target_compile_command(${PROJECT_NAME} PRIVATE "-std=c++11")

# install the library and header files to the system
install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin)

install(DIRECTORY include/ DESTINATION include)

# generate a configuration file for the library
configure_file(${PROJECT_NAME}Config.cmake.in ${PROJECT_NAME}Config.cmake @ONLY)

# export the targets and the configuration file
# this allows other projects to use this library
export(EXPORT ${PROJECT_NAME}
       NAMESPACE ${PROJECT_NAME}::
       FILE ${CMAKE_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)

export(PACKAGE ${PROJECT_NAME})