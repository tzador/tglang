cmake_minimum_required(VERSION 3.3) # specify the minimum version of CMake required

project(MyProject) # specify the name of the project

set(CMAKE_CXX_STANDARD 11) # specify the C++ standard to be used

set(SOURCE_FILES main.cpp) # specify the source files for the project

add_executable(MyProject ${SOURCE_FILES}) # create an executable for the project, using the specified source files

# specify the include directories for the project
include_directories(include 
                    libs/boost/include 
                    libs/glm)

# specify the libraries to be linked
target_link_libraries(MyProject 
                      boost_system 
                      glm)

# enable testing for the project
enable_testing()

# add a test for the project
add_test(NAME MyProjectTest 
         COMMAND MyProject)

# specify the directory for the build artifacts
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)

# specify the directory to install the project
set(CMAKE_INSTALL_PREFIX /usr/local)

# specify the installation rules for the project
install(TARGETS MyProject DESTINATION bin) # install the executable to the bin directory
install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/README.md" DESTINATION share/doc/MyProject) # install the readme file to the share/doc directory
install(DIRECTORY include DESTINATION include/MyProject) # install the include directory to the include/MyProject directory
install(FILES "${CMAKE_SOURCE_DIR}/LICENSE" DESTINATION share/license/MyProject) # install the license file to the share/license/MyProject directory

# generate a package for the project
set(CPACK_PACKAGE_NAME "MyProject")
set(CPACK_PACKAGE_VERSION "1.0.0")
set(CPACK_PACKAGE_VENDOR "MyCompany")
set(CPACK_PACKAGE_DESCRIPTION "MyProject is a sample project using CMake.")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
set(CPACK_GENERATOR "ZIP;TGZ;STGZ")
set(CPACK_SOURCE_GENERATOR "ZIP;TGZ")
include(CPack)

# specify a custom command to run before building the project
add_custom_command(TARGET MyProject PRE_BUILD
                   COMMAND ${CMAKE_COMMAND} -E remove_directory "${CMAKE_BINARY_DIR}/tmp")

# specify a custom command to run after building the project
add_custom_command(TARGET MyProject POST_BUILD
                   COMMAND ${CMAKE_COMMAND} -E copy_directory "${CMAKE_SOURCE_DIR}/data" "${CMAKE_BINARY_DIR}/data")