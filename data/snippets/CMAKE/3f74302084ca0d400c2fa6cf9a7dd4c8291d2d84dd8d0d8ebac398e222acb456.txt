# Set minimum version of CMake required to configure project
cmake_minimum_required(VERSION 3.12)

# Set C++ standard used for the project
set(CMAKE_CXX_STANDARD 17)

# Define project name and language
project(MyProject CXX)

# Enable testing for project
enable_testing()

# Set source files for the project
set(SOURCES
    src/main.cpp
    src/function1.cpp
    src/function2.cpp
)

# Create executable for project using source files
add_executable(MyProject ${SOURCES})

# Include directories for project
# The source directory is automatically included
include_directories(
    include
    libs/library1/include
    libs/library2/include
)

# Set compiler flags for project
# Enable all warnings and compile with C++17 standard
target_compile_options(MyProject PRIVATE
    -Wall
    -Wextra
    -pedantic
    -std=c++17
)

# Link libraries to project
target_link_libraries(MyProject
    library1
    library2
)

# Add tests to project using CTest framework
add_test(
    NAME UnitTests
    COMMAND ${CMAKE_BINARY_DIR}/test/UnitTests
)

# Set variables for test files
set(TEST_SOURCES
    test/test1.cpp
    test/test2.cpp
)

# Define executable for tests and link with project and Catch2 testing framework
add_executable(UnitTests ${TEST_SOURCES})
target_link_libraries(UnitTests
    PRIVATE
    MyProject
    Catch2::Catch2
)

# Add custom build target for generating code coverage report
add_custom_target(coverage
    COMMAND ${CMAKE_CTEST_COMMAND} -R UnitTests -C Debug --verbose
    COMMAND gcovr -r . --html --html-details -o coverage.html
)

# Add custom build target for generating documentation using Doxygen
find_package(Doxygen REQUIRED)
add_custom_target(docs
    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Generating API documentation with Doxygen"
)