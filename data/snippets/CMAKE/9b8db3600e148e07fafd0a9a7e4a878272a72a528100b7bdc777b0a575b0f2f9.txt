cmake_minimum_required(VERSION 3.13)  # Set the minimum required version of CMake

project(my_project)  # Create a new project named "my_project"

# Set the output directory for built libraries and executables
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)  # Set the directory for static libraries
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)  # Set the directory for shared libraries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)  # Set the directory for executables

# Add a subdirectory containing the source files
add_subdirectory(src)

# Define a variable containing the list of source files in the src directory
set(SOURCES
    src/main.cpp
    src/my_class.cpp
    src/my_other_class.cpp
)

# Create an executable target using the defined source files
add_executable(my_project ${SOURCES})

# Add include directories for header files
target_include_directories(my_project PUBLIC include)  # Add the "include" directory to the list of public directories

# Set compiler flags
target_compile_options(my_project PRIVATE -Wall -Wextra)  # Enable all warnings for the target

# Link libraries to the target
target_link_libraries(my_project my_library)  # Link the "my_library" target to the "my_project" target

# Add a custom target to run a specific command
add_custom_target(my_target DEPENDS my_project  # Define the target with a dependency on "my_project"
                   COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/bin/my_project ${CMAKE_SOURCE_DIR}/bin)  # Define the command to copy the built executable to the source directory

# Create a configuration file to store project settings
configure_file(config.h.in ${CMAKE_SOURCE_DIR}/include/config.h)  # Copy the "config.h.in" file to the "include" directory and substitute variables

# Define a function for generating a list of source files from a directory
function(generate_sources dir sources)
    file(GLOB_RECURSE ${sources} "${dir}/*.cpp")  # Create a list of all ".cpp" files in the given directory and its subdirectories
    set(${sources} ${${sources}} PARENT_SCOPE)  # Update the list of source files in the parent scope
endfunction()

# Call the defined function to generate the source files list for the "src" directory
generate_sources(src SOURCES)

# Create a target using the generated source files list
add_executable(my_project ${SOURCES})