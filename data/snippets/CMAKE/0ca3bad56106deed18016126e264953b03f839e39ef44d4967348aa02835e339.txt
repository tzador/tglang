# Set minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Create a project and set its name
project(MyProject)

# Add a subdirectory for additional source files
add_subdirectory(src)

# Specify the source files for the project
set(SRCS main.cpp 
         utils.cpp 
         class1.cpp 
         class2.cpp)

# Add an executable target for the project
add_executable(MyProject ${SRCS})

# Set compiler options for the project
target_compile_options(MyProject PRIVATE -Wall -Wextra)

# Add an external library to the project
add_library(MyLibrary SHARED IMPORTED)
set_property(TARGET MyLibrary PROPERTY 
             IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/lib/libMyLibrary.so)

# Link the external library to the project
target_link_libraries(MyProject MyLibrary)

# Add an installation target for the project
install(TARGETS MyProject DESTINATION bin)

# Add a custom target for generating documentation
add_custom_target(documentation COMMAND 
                  doxygen ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile)

# Add a test target for the project
enable_testing()
add_test(NAME MyProjectTest COMMAND MyProject_test)

# Set variables for test files
set(TEST_SRCS test.cpp 
              test_utils.cpp 
              test_class1.cpp 
              test_class2.cpp)

# Create a shared library for testing
add_library(TestLib SHARED ${TEST_SRCS})

# Link the test library to the project
target_link_libraries(MyProject TestLib)

# Set compiler options for the test library
target_compile_options(TestLib PRIVATE -Wall -Wextra -coverage)

# Add a custom target for running test coverage
add_custom_target(coverage COMMAND 
                  gcov -r ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)

# Set variables for installation directories
set(INCLUDE_DIR include)
set(LIB_DIR lib)
set(DATA_DIR data)

# Set installation paths for project files
install(FILES ${SRCS} DESTINATION src)
install(FILES ${INCLUDE_DIR}/*.h DESTINATION include)
install(FILES ${LIB_DIR}/*.so DESTINATION lib)
install(FILES ${DATA_DIR}/*.txt DESTINATION data)