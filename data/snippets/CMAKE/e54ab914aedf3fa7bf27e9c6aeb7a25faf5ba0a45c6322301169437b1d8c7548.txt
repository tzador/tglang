# First, set the minimum required version of CMake
cmake_minimum_required(VERSION 3.12)

# Set the project name and version
project(MyProject VERSION 1.0)

# Set the output directory for built files
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${MyProject_SOURCE_DIR}/bin)

# Add source files
add_executable(MyProject main.cpp helper_functions.cpp)

# Set compiler flags
target_compile_options(MyProject PRIVATE -Wall -Wextra -pedantic)

# Set preprocessor macro
target_compile_definitions(MyProject PRIVATE MY_MACRO)

# Set include directories
target_include_directories(MyProject PRIVATE ${MyProject_SOURCE_DIR}/include)

# Set link libraries
target_link_libraries(MyProject PRIVATE library1 library2)

# Set compiler specific options for specific source files
set_source_files_properties(main.cpp PROPERTIES COMPILE_FLAGS -Wno-conversion)

# Set compiler specific link options for specific source files
set_source_files_properties(helper_functions.cpp PROPERTIES LINK_FLAGS -L/usr/local/lib)

# Set post-build actions
add_custom_command(TARGET MyProject POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:MyProject> ${MyProject_SOURCE_DIR}/bin)

# Create install target
install(TARGETS MyProject DESTINATION /usr/local/bin)

# Create custom test target
add_custom_target(test COMMAND ctest -V)

# Enable testing and add test cases
enable_testing()
add_test(NAME MyProjectTest1 COMMAND MyProject --arg1 test1.txt --arg2 test2.txt)
add_test(NAME MyProjectTest2 COMMAND MyProject --arg3 test3.txt --arg4 test4.txt)

# Set custom command for code coverage analysis
add_custom_target(coverage COMMAND gcovr -b --xml -o coverage.xml)

# Generate documentation target with Doxygen
find_package(Doxygen REQUIRED)
add_custom_target(doc COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile)