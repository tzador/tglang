# This is a comment in the CMake language

# Set minimum version of CMake required
cmake_minimum_required(VERSION 3.12)

# Create a project with name 'my_project'
project(my_project)

# Set sources variable to include all .cpp files in the source directory
set(sources 
    ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/data.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/helper_functions.cpp
)

# Create an executable target called 'my_executable' using the sources variable
add_executable(my_executable ${sources})

# Set include directories for header files
include_directories(    ${CMAKE_CURRENT_SOURCE_DIR}/include
                        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/include
)

# Link the executable target to the necessary libraries
target_link_libraries(my_executable 
                        my_library 
                        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/lib/libexample.so
)

# Set compiler options
target_compile_options(my_executable PUBLIC -Wall -Werror -Wextra)

# Set linker options
target_link_options(my_executable PUBLIC -static-libstdc++)

# Add custom target called 'run' which runs the executable
add_custom_target(run 
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/my_executable 
    DEPENDS my_executable
)

# Add custom target called 'clean' which removes all generated files
add_custom_target(clean 
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_BINARY_DIR}/
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_SOURCE_DIR}/third_party/lib/
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_SOURCE_DIR}/third_party/include/
)