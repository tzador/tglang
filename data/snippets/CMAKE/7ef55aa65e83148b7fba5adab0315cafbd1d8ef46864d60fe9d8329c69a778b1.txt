# Sets the minimum required version of CMake for the project
cmake_minimum_required(VERSION 3.10)

# Sets the project name and version
project(my_project VERSION 1.0)

# Adds a library named "my_library" with the given source files
add_library(my_library
  src/file1.cpp
  src/file2.cpp
  src/file3.cpp
)

# Sets the include directories for the project
target_include_directories(my_library
  PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Sets the compiler flags for the project (outputs a warning if flag is not supported)
target_compile_options(my_library
  PRIVATE
    -Wall
    -Wextra
)

# Generates a list of source files using a glob pattern
file(GLOB SOURCES "src/*.cpp")

# Creates an executable target named "my_app" using the generated source file list
add_executable(my_app ${SOURCES})

# Links "my_app" with "my_library"
target_link_libraries(my_app my_library)

# Sets the install destination for the executable
install(TARGETS my_app DESTINATION bin)

# Adds a custom command that copies a file from one directory to another
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/file.txt
  COMMAND ${CMAKE_COMMAND} -E copy
  ${CMAKE_SOURCE_DIR}/file.txt ${CMAKE_CURRENT_BINARY_DIR}/file.txt
)

# Creates a custom target called "copy_file" which depends on the custom command above
add_custom_target(copy_file DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/file.txt)

# Adds a dependency on "copy_file" to "my_app"
add_dependencies(my_app copy_file)

# Creates a test target named "my_test" using the given source file
add_executable(my_test test/test.cpp)

# Adds a test with the given name and executable target
add_test(NAME my_test COMMAND my_test)

# Enables testing for the project
enable_testing()