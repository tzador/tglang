# This CMakeLists.txt file is used to build a sample project

# Specify the minimum version of CMake required
cmake_minimum_required(VERSION 3.10.2)

# Set the project name and version
project(sample_project VERSION 1.0)

# Specify the source files for the project
set(SOURCES src/main.cpp src/helper.cpp src/algorithm.cpp)

# Specify the header files for the project
set(HEADERS include/helper.h include/algorithm.h)

# Add an executable target for the project
add_executable(sample_project ${SOURCES} ${HEADERS})

# Set the include directories for the project
target_include_directories(sample_project PRIVATE include)

# Set the compiler flags for the project
target_compile_options(sample_project PRIVATE -Wall -Wextra -pedantic)

# Set the linker flags for the project
target_link_libraries(sample_project PRIVATE ${CMAKE_DL_LIBS})

# Set the install location for the project
install(TARGETS sample_project DESTINATION bin)

# Create a configuration file for the project
configure_file(config/config.h.in config/config.h)

# Add a custom target for generating documentation
add_custom_target(docs COMMAND doxygen Doxyfile WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

# Add a custom command for generating a zip file of source code
add_custom_command(TARGET sample_project POST_BUILD COMMAND ${CMAKE_COMMAND} -E tar "cfv" "${CMAKE_CURRENT_BINARY_DIR}/sample_project_source.zip" "${CMAKE_SOURCE_DIR}")

# Enable testing for the project
enable_testing()

# Add a test target for the project
add_test(NAME test_project COMMAND sample_project)

# Add a coverage target for the project
add_custom_target(coverage COMMAND ${CMAKE_COMMAND} -E env "GCOV=${CMAKE_SOURCE_DIR}/utils/gcov.sh" ${CMAKE_CTEST_COMMAND} -C $<CONFIGURATION> WORKING_DIRECTORY ${CMAKE_BINARY_DIR})

# Configure the compiler for code coverage analysis
set(CMAKE_CXX_FLAGS "-fprofile-arcs -ftest-coverage")