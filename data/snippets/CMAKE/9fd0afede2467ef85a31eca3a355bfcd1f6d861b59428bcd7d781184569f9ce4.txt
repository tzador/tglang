# CMake minimum version required
cmake_minimum_required(VERSION 3.10)

# Set project name
project(my_project)

# Set compiler flags
set(CMAKE_CXX_FLAGS "-Wall -Wextra -Werror")

# Set source files
set(SOURCES
    main.cpp
    helper.cpp
)

# Add executable target
add_executable(my_project ${SOURCES})

# Set include directories
target_include_directories(my_project
    PUBLIC ${PROJECT_SOURCE_DIR}/include
)

# Set library dependencies
target_link_libraries(my_project
    PUBLIC my_library
    PRIVATE another_library
)

# Set preprocessor definitions
target_compile_definitions(my_project
    PUBLIC "-DENABLE_DEBUG"
    PRIVATE "-DMY_CONFIG=0"
)

# Set compiler features
target_compile_features(my_project
    PUBLIC cxx_std_11
    PRIVATE cxx_std_17
)

# Configure installation target
install(TARGETS my_project DESTINATION bin)

# Include third-party dependencies
include(ExternalProject)

# Download and build third-party library
ExternalProject_Add(my_library
    PREFIX ${CMAKE_BINARY_DIR}/third-party/my_library
    URL https://example.com/my_library.tar.gz
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
)

# Create custom build type for static analysis
set(CMAKE_CXXSTATIC_ANALYSIS "STATIC_ANALYSIS"
    CACHE
    STRING "Perform static analysis on code"
    FORCE
)

# Set compiler flags for static analysis build type
set(CMAKE_CXX_FLAGS_${CMAKE_CXXSTATIC_ANALYSIS} "-Wall -pedantic -Werror")

# Set build type-specific options
set(CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE})
case(${CMAKE_BUILD_TYPE})
    Debug)
        set(CMAKE_CXX_FLAGS_DEBUG "-g")
        break()
    Release)
        set(CMAKE_CXX_FLAGS_RELEASE "-O3")
        break()
    STATIC_ANALYSIS)
        set(CMAKE_CXX_FLAGS_STATIC_ANALYSIS "-Wunused -Wuninitialized")
        break()
    )