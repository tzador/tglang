# Include necessary libraries and configurations
cmake_minimum_required(VERSION 3.12 FATAL_ERROR)
project(MyProject)

# Set compiler flags
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")

# Set source files
set(SOURCES
    main.cpp
    utils.cpp
)

# Create an executable with the sources
add_executable(MyProject ${SOURCES})

# Set include directories for external libraries
target_include_directories(MyProject PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/external/include
    ${CMAKE_CURRENT_SOURCE_DIR}/external/include2
)

# Add a custom post-build command
add_custom_command(TARGET MyProject POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_CURRENT_SOURCE_DIR}/resources ${CMAKE_CURRENT_BINARY_DIR}/resources
)

# Find and link necessary libraries
find_library(LIB1 lib1)
target_link_libraries(MyProject PRIVATE ${LIB1})

# Add a custom target
add_custom_target(ConvertResources ALL
    COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/convert.py ${CMAKE_CURRENT_SOURCE_DIR}
    BYPRODUCTS ${CMAKE_CURRENT_SOURCE_DIR}/converted_resources
)

# Set install directory
install(TARGETS MyProject DESTINATION bin)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/resources DESTINATION resources)

# Create a test for the project
enable_testing()
add_test(NAME MyProjectTest COMMAND MyProject)