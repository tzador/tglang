# Set required CMake version
cmake_minimum_required (VERSION 3.10)

# Define project
project (MyProject VERSION 1.0.0 DESCRIPTION "A complex project in CMake")

# Set output directories for binaries and libraries
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Compile with C++17 standard
set (CMAKE_CXX_STANDARD 17)

# Include directories for third-party libraries
include_directories (SYSTEM ${CMAKE_SOURCE_DIR}/third_party/include)

# Add source files to the project 
add_library (mylib STATIC
    ${CMAKE_SOURCE_DIR}/src/foo.cpp
    ${CMAKE_SOURCE_DIR}/src/bar.cpp
)

# Define link libraries for the project 
target_link_libraries (mylib 
    PUBLIC somelib
    PRIVATE anotherlib
)

# Add compiler flags to target
target_compile_options (mylib 
    PRIVATE -Wall
    PUBLIC -O3
)

# Define the main executable 
add_executable (myexecutable 
    ${CMAKE_SOURCE_DIR}/src/main.cpp
)

# Link the executable with the libraries 
target_link_libraries (myexecutable 
    mylib
    PUBLIC thirdpartylib
)

# Set properties for the executable 
set_target_properties(myexecutable PROPERTIES 
    OUTPUT_NAME "myapp"
    VERSION ${PROJECT_VERSION} 
    SOVERSION 1 
    PUBLIC_HEADER myheader.h
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# Install targets 
install (TARGETS myexecutable mylib
    COMPONENT myproject
    EXPORT MyProjectTargets
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin
    PUBLIC_HEADER DESTINATION include
)

# Generate and install CMake Config file
include (CMakePackageConfigHelpers)
configure_package_config_file (
  "cmake/MyProjectConfig.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake/MyProjectConfig.cmake"
  INSTALL_DESTINATION lib/cmake/MyProject
)
install (FILES "${CMAKE_CURRENT_BINARY_DIR}/cmake/MyProjectConfig.cmake"
    DESTINATION lib/cmake/MyProject
)

# Export targets 
export (EXPORT MyProjectTargets
    FILE "${CMAKE_CURRENT_BINARY_DIR}/cmake/MyProjectTargets.cmake"
)

# Provide package information 
include (CMakePackageConfigHelpers)
write_basic_package_version_file (
    "${CMAKE_CURRENT_BINARY_DIR}/cmake/MyProjectConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

# Install package information 
install (FILES "${CMAKE_CURRENT_BINARY_DIR}/cmake/MyProjectConfigVersion.cmake"
    DESTINATION lib/cmake/MyProject
)