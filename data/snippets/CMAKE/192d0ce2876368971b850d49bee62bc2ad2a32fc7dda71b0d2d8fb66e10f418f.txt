# Set minimum CMake version required for the project
cmake_minimum_required(VERSION 3.14)

# Name the project
project(MyProject VERSION 1.0.0 LANGUAGES CXX)

# Add all source files to a variable
set(SOURCES
    src/main.cpp
    src/functions.cpp
    src/classes.cpp)

# Add a library target
add_library(MyLib ${SOURCES})

# Specify public include directories for the library
target_include_directories(MyLib PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/externalLib/include)

# Specify private compile options for the library
target_compile_definitions(MyLib PRIVATE
    -DDEBUG
    -DOPTIMIZE)

# Specify the installation directory for the library
install(TARGETS MyLib
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin)

# Add an executable target for the project
add_executable(MyExecutable src/main.cpp)

# Link the library target to the executable
target_link_libraries(MyExecutable PRIVATE MyLib)

# Set compiler flags for the executable
target_compile_options(MyExecutable PRIVATE
    -Wall
    -Wextra
    -pedantic)

# Specify the installation directory for the executable
install(TARGETS MyExecutable
    RUNTIME DESTINATION bin)

# Set C++ standard used for compilation
set(CMAKE_CXX_STANDARD 11)

# Configure a file with version information for the project
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/version.h.in
    ${CMAKE_CURRENT_BINARY_DIR}/version.h
    @ONLY)

# Add a custom target to run a command after the build is complete
add_custom_target(
    run
    COMMAND MyExecutable
    DEPENDS MyExecutable)

# Add a custom command to generate documentation using Doxygen
find_package(Doxygen)
if(DOXYGEN_FOUND)
    add_custom_target(
        doc
        COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM)
endif()