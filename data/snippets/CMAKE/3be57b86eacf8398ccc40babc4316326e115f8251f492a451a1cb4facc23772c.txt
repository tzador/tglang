# Set variables

set(SOURCE_FILES src/main.cpp src/utils.cpp)

# Include directories

include_directories(
    ${CMAKE_SOURCE_DIR}/include
)

# Create executable target

add_executable(my_app ${SOURCE_FILES})

# Set compiler options

target_compile_options(my_app PRIVATE
    -Wall
    -std=c++17
)

# Find necessary packages

find_package(Boost REQUIRED COMPONENTS
    filesystem
    system
)

find_package(PkgConfig REQUIRED)
pkg_check_modules(JSONCPP REQUIRED jsoncpp)

# Link necessary libraries

target_link_libraries(my_app
    Boost::boost
    Boost::filesystem
    Boost::system
    ${JSONCPP_LIBRARIES}
)

# Set installation destination

install(TARGETS my_app RUNTIME DESTINATION bin)

# Create tests

enable_testing()

# Add testing executable target

add_executable(my_app_test test/test_main.cpp ${SOURCE_FILES})

# Link necessary libraries for tests

target_link_libraries(my_app_test
    Boost::boost
    Boost::filesystem
    Boost::system
    ${JSONCPP_LIBRARIES}
)

# Add test to CTest suite

add_test(my_app_test my_app_test)

# Set custom build type

set(CMAKE_BUILD_TYPE Release)

# Set custom compiler flags for specific build types

set(CMAKE_CXX_FLAGS_RELEASE "-O3")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")

# Generate a configuration file

configure_file(config.h.in config.h)

# Add include directory for generated config file

target_include_directories(my_app PRIVATE ${CMAKE_CURRENT_BINARY_DIR})

# Specify minimum required CMake version

cmake_minimum_required(VERSION 3.10.2)