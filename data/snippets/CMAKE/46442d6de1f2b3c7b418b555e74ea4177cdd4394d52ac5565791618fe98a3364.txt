cmake_minimum_required(VERSION 3.10 FATAL_ERROR)
# Sets the minimum version of CMake required to run this project, and throws an error if the minimum version is not met.
project(MyProject VERSION 1.0.0 LANGUAGES CXX)
# Sets the project name and version, and specifies that it will be written in C++.
include(GNUInstallDirs)
# Includes the GNUInstallDirs module to get installation directories for the project.
set(CMAKE_CXX_STANDARD 17)
# Sets the C++ standard to use for compiling.
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# Specifies that the chosen C++ standard must be used for compilation, otherwise an error will be thrown.
set(CMAKE_CXX_EXTENSIONS OFF)
# Turns off compiler extensions for C++.
option(BUILD_SHARED_LIBS "Build shared libraries" ON)
# Allows the build to create shared libraries, which can be used by multiple programs.
option(ENABLE_TESTING "Enable testing for this project" ON)
# Adds an option to enable testing for the project during the build process.
add_subdirectory(library)
# Adds a subdirectory to the project, where a separate CMakeLists.txt file can be found for building a library.
add_executable(MyProject main.cpp)
# Creates an executable target called "MyProject" from the main.cpp file in the project root directory.
set_target_properties(MyProject PROPERTIES
    VERSION ${PROJECT_VERSION}
    SOVERSION 1
)
# Sets properties for the "MyProject" target, including the version number and shared object version.
target_include_directories(MyProject PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)
# Sets the include directories for the "MyProject" target to include both the current source directory and the installation directory.
target_link_libraries(MyProject PRIVATE library)
# Links the "MyProject" target to the "library" target for linking dependencies.
if(ENABLE_TESTING)
    add_subdirectory(tests)
    # Adds a subdirectory for building tests.
endif()
install(TARGETS MyProject
    EXPORT MyProjectTargets
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)
# Installs the "MyProject" target to the specified destination directories during the installation process.
install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
# Installs the include directory for the project during the installation process.
install(EXPORT MyProjectTargets FILE
    MyProjectTargets.cmake
    NAMESPACE MyProject::
    DESTINATION ${CMAKE_INSTALL_DATADIR}/MyProject
)
# Exports the targets of the project to a CMake file for future use by other projects.
include(CMakePackageConfigHelpers)
# Includes the CMakePackageConfigHelpers module for generating package configuration files.
configure_package_config_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/MyProjectConfig.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/MyProjectConfig.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_DATADIR}/MyProject
)
# Configures the package configuration file using the provided template and installs it to the installation directory.
write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/MyProjectConfigVersion.cmake
    COMPATIBILITY SameMajorVersion
)
# Generates the package version file for the project.
install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/MyProjectConfig.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/MyProjectConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_DATADIR}/MyProject
)
# Installs the package configuration and version files to the installation directory.