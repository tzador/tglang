# Define variables
set(SOURCES
    source1.cpp
    source2.cpp
)

# Create executable
add_executable(myApp ${SOURCES})

# Set compiler flags
target_compile_options(myApp PRIVATE
    -Wall
    -Wextra
)

# Add include directories
target_include_directories(myApp PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/lib
)

# Link libraries
target_link_libraries(myApp PRIVATE
    lib1
    lib2
)

# Set build type based on user input
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    # Add debug-specific flags
    target_compile_options(myApp PRIVATE
        -g -O0
    )
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    # Add release-specific flags
    target_compile_options(myApp PRIVATE
        -O3
    )
endif()

# Add custom command to generate documentation
add_custom_command(TARGET myApp
    POST_BUILD
    COMMAND doxygen ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile
)

# Install executable to specified directory
install(TARGETS myApp
    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
)

# Generate mailing list configuration
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/mailing_list_config.txt.in
    ${CMAKE_CURRENT_BINARY_DIR}/mailing_list_config.txt
)

# Output information about the current build configuration
message(STATUS "Current build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Install location: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Sources: ${SOURCES}")
message(STATUS "Include directories: ${CMAKE_CURRENT_SOURCE_DIR}/include, ${CMAKE_CURRENT_SOURCE_DIR}/lib")
message(STATUS "Libraries: lib1, lib2")