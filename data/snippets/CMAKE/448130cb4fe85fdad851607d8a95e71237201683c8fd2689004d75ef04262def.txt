# Define a function
function(foo ARG1 ARG2)
    # Set a variable
    set(FOO_VAR "Hello World")

    # Conditional statement
    if(ARG1 EQUAL "bar")
        # Print a message
        message(STATUS "ARG1 is equal to bar")
    else()
        # Print a warning message
        message(WARNING "ARG1 is not equal to bar")
        # Exit the function
        return()
    endif()

    # Iterate over a list
    foreach(ITEM ${ARG2})
        # Print the current item
        message(STATUS "Current item: ${ITEM}")
        # Add the item to a list
        list(APPEND NEW_LIST ${ITEM})
    endforeach()

    # Create a custom target
    add_custom_target(my_target)

    # Add a dependency on the custom target
    add_dependencies(my_target ${NEW_LIST})

    # Set properties for the custom target
    set_target_properties(my_target PROPERTIES 
        # Set the target output name
        OUTPUT_NAME "my_exe"
        # Set the target output directory
        RUNTIME_OUTPUT_DIRECTORY "bin"
     )

    # Add compile options for the target
    target_compile_options(my_target PUBLIC 
        # Enable all warnings
        -Wall
        # Add additional include directories
        ${CMAKE_SOURCE_DIR}/include
     )

    # Link libraries to the target
    target_link_libraries(my_target 
        # Link with libfoo library
        libfoo
        # Link with libbar library
        libbar
     )

    # Install the target
    install(TARGETS my_target DESTINATION bin)
    
    # Define a custom function
    function(bar ARG1)
        # Print a message
        message(STATUS "BAR: ${ARG1}")
    endfunction()

    # Call the custom function
    bar("Hello")

    # Define a variable with a list of strings
    set(STRINGS "a;b;c;d;e;f;g")

    # Use a string command to split the list into multiple variables
    string(REPLACE ";" " " VAR1_VAR2_VAR3_VAR4 "${STRINGS}")
    # Print the variables
    message(STATUS "VAR1: ${VAR1}, VAR2: ${VAR2}, VAR3: ${VAR3}, VAR4: ${VAR4}")

    # Use parameters to add compile options for the target
    target_compile_options(my_target PRIVATE 
        # Add an optimizer flag
        -O2
        # Add a defined macro
        -DMY_MACRO
     )

    # Enable code coverage
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage")

    # Specify the source files for the target
    set(SOURCES
        src/main.cpp
        src/util.cpp
        src/helper.cpp
     )
    
    # Create a library target
    add_library(my_lib STATIC ${SOURCES})

    # Set properties for the library target
    set_target_properties(my_lib PROPERTIES 
        # Specify the library output name
        OUTPUT_NAME "my_lib"
        # Set the library output directory
        ARCHIVE_OUTPUT_DIRECTORY "lib"
     )

    # Install the library target
    install(TARGETS my_lib DESTINATION lib)

    # Define a macro
    macro(greet NAME)
        # Print a greeting message
        message(STATUS "Hello ${NAME}!")
    endmacro()

    # Use the macro
    greet("John")

    # Generate a build configuration file
    configure_file(config.h.in config.h)
    
    # Locate the Python package
    find_package(Python REQUIRED)

    # Add a target for generating a Python package
    add_custom_target(python_package
        COMMAND ${CMAKE_COMMAND} -E make_directory build
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/setup.py build/
        COMMAND ${PYTHON_EXECUTABLE} setup.py bdist_wheel
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    )
    
    # Set install rules for the Python package
    install(CODE "execute_process(COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/build/dist/MyPackage-0.1.0-py3-none-any.whl ${CMAKE_INSTALL_PREFIX}/MyPackage.wheels)")
    
    # Set environment variables using a bash command
    set(ENV{PATH} "$ENV{PATH}:${CMAKE_SOURCE_DIR}/bin")
    
    # Run a bash command
    execute_process(COMMAND bash -c "pip install -r requirements.txt")
    
    # Define a function to compile a target using a specific toolchain file
    function(my_compile TARGET_NAME TOOLCHAIN_FILE)
        message("> Compiling ${TARGET_NAME} using ${TOOLCHAIN_FILE} toolchain")
        set(CMAKE_TOOLCHAIN_FILE ${TOOLCHAIN_FILE})
        add_executable(${TARGET_NAME} src/main.cpp)
        target_link_libraries(${TARGET_NAME} PRIVATE pthread)
        set_target_properties(${TARGET_NAME} PROPERTIES
            CXX_STANDARD 17
            CXX_STANDARD_REQUIRED ON
            CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
    endfunction()

    # Use the function for different targets and toolchain files
    my_compile(my_program linux_g++_x64.toolchain)
    my_compile(my_application arm_g++_arm.toolchain)