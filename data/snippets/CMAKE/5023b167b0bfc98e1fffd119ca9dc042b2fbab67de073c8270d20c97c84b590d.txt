# Define CMake minimum version required
cmake_minimum_required(VERSION 3.0)

# Create a project named "myProject"
project(myProject)

# Set compiler to use
set(CMAKE_C_COMPILER "gcc")

# Set compiler flags
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11 -Wall")

# Set source files for the project
set(SOURCES src/main.c src/functions.c)

# Create an executable target named "myProject" from the sources
add_executable(myProject ${SOURCES})

# Link external libraries if needed
target_link_libraries(myProject library1 library2)

# Set output directory for compiled binaray
set_target_properties(myProject PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)

# Add include directories for the project
target_include_directories(myProject PUBLIC include)

# Add definitions for the project
target_compile_definitions(myProject PUBLIC DEBUG=1)

# Set preprocessor definitions for specific configurations
target_compile_definitions(myProject PRIVATE "$<$<CONFIG:Debug>:DEBUG_CONFIG>")

# Set install directory for built files
install(TARGETS myProject DESTINATION bin)

# Add custom command to run before building project
add_custom_command(TARGET myProject PRE_BUILD
    COMMAND echo Preparing to build...
)

# Add custom command to run after building project
add_custom_command(TARGET myProject POST_BUILD
    COMMAND echo Build successful!
)