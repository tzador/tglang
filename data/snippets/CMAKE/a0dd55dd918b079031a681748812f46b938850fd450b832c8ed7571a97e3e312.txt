cmake_minimum_required(VERSION 3.10) # Sets the minimum required version of CMake

# Specify project name and version
project(ExampleProject VERSION 1.0)

# Specify source files to be compiled
set(SOURCES 
    src/main.cpp
    src/utils.cpp
    src/math.cpp
)

# Specify include directories
include_directories(include)

# Add a library target
add_library(ExampleLibrary SHARED ${SOURCES})

# Set compiler flags for the library target
target_compile_options(ExampleLibrary PUBLIC -Wall -Wextra -pedantic)

# Specify a prefix for the installed library files
set_target_properties(ExampleLibrary PROPERTIES PREFIX "lib")

# Specify install directory for library files
install(TARGETS ExampleLibrary LIBRARY DESTINATION lib)

# Specify executable target
add_executable(ExampleExecutable src/main.cpp)

# Link the executable target to the library target
target_link_libraries(ExampleExecutable PUBLIC ExampleLibrary)

# Install executable to bin directory
install(TARGETS ExampleExecutable RUNTIME DESTINATION bin)

# Define a custom function to display a message
function(display_message)
  message("Hello, this is a custom function!")
endfunction()

# Call the custom function
display_message()

# Define a custom macro to set compiler flags based on OS
macro(set_os_flags)
  if (WIN32)
    target_compile_options(ExampleExecutable PUBLIC /EHsc)
  elseif (APPLE)
    target_compile_options(ExampleExecutable PUBLIC -stdlib=libc++)
  elseif (UNIX)
    target_compile_options(ExampleExecutable PUBLIC -pthread)
  endif()
endmacro()

# Call the custom macro
set_os_flags()

# Display a message with information about current CMake version
message("Using CMake version ${CMAKE_VERSION}")
# Output: Using CMake version 3.10.0