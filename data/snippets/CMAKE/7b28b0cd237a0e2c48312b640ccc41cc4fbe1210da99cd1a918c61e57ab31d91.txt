cmake_minimum_required(VERSION 3.10)

# Declare project name and version
project(MyProject VERSION 1.0)

# Set C++ standard to use
set(CMAKE_CXX_STANDARD 17)

# Set default build type to Release
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

# Add all source files to a variable
set(SRC_FILES
  src/main.cpp
  src/foo.cpp
  src/bar.cpp
)

# Add all header files to a variable
set(HEADER_FILES
  include/foo.h
  include/bar.h
)

# Add executable target to project using the source and header files
add_executable(MyApp ${SRC_FILES} ${HEADER_FILES})

# Set output directory for binary executable
set_target_properties(MyApp PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
)

# Include header files
target_include_directories(MyApp
  PUBLIC
    # Include the project root directory for finding header files
    "${PROJECT_SOURCE_DIR}/include"
)

# Link libraries
target_link_libraries(MyApp
  PRIVATE
    # Link to external library
    MyLib
)

# Set compiler flags for Release build
if(CMAKE_BUILD_TYPE STREQUAL "Release")
  message(STATUS "Setting compiler flags for Release build")
  target_compile_options(MyApp
    PRIVATE
      "-O3"
  )
endif()

# Install target
install(TARGETS MyApp
  RUNTIME
    # Install executable to local bin folder
    DESTINATION bin
)

# Add tests
enable_testing()
find_package(GTest REQUIRED)
if(GTEST_FOUND)
  add_executable(Tests
    src/test.cpp
  )
  target_link_libraries(Tests
    PRIVATE
      # Link to Google Test library
      GTest::GTest
      GTest::Main
  )
  # Add test to CTest
  add_test(NAME MyAppTests COMMAND Tests)
endif()