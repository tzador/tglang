cmake_minimum_required(VERSION 3.10.2) #Minimum version required for compatibility

project(my_project) #Project name

set(MY_VARIABLE "Hello") #Assigning a value to a variable
message(STATUS "My variable is: ${MY_VARIABLE}") #Printing the value of the variable as a message

find_package(OpenCV REQUIRED) #Finding the OpenCV package
if(OpenCV_FOUND)
    include_directories(${OpenCV_INCLUDE_DIRS}) #Including the headers of the OpenCV package
    add_executable(my_executable my_file.cpp) #Creating an executable file from a source file
    target_link_libraries(my_executable ${OpenCV_LIBRARIES}) #Linking the executable file with the OpenCV libraries
else()
    message(FATAL_ERROR "OpenCV package not found") #If OpenCV package is not found, display an error message and exit program
endif()

set(SOURCE_FILES my_file.cpp) #Defining the source files to be compiled
add_library(my_library ${SOURCE_FILES}) #Creating a library from the source files

install(TARGETS my_executable DESTINATION bin) #Installing the executable file to the designated bin directory
install(TARGETS my_library DESTINATION lib) #Installing the library to the designated lib directory

set(CMAKE_CXX_STANDARD 11) #Setting the C++ standard to 11
set(CMAKE_CXX_STANDARD_REQUIRED ON) #Enabling the requirement for the specified C++ standard

set_property(TARGET my_executable PROPERTY CXX_STANDARD 11) #Setting the C++ standard for the executable
set_property(TARGET my_library PROPERTY CXX_STANDARD 11) #Setting the C++ standard for the library
set_property(TARGET my_executable PROPERTY CXX_STANDARD_REQUIRED ON) #Enabling the requirement for the specified C++ standard for the executable
set_property(TARGET my_library PROPERTY CXX_STANDARD_REQUIRED ON) #Enabling the requirement for the specified C++ standard for the library

set(CMAKE_BUILD_TYPE Release) #Setting the build type to Release
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall") #Adding the -Wall flag for warnings in the Release build

option(USE_MY_OPTION "Use my option" OFF) #Defining an option for the user, default set to OFF
if(USE_MY_OPTION)
    add_definitions(-DUSE_OPTION) #Adding a definition if the option is enabled
    message(STATUS "My option is enabled") #Displaying a message if the option is enabled
else()
    message(STATUS "My option is disabled") #Displaying a message if the option is disabled
endif()