# Define a function
function(add_to_list TARGET_NAME)
    # Add a check for Windows operating system
    if(WIN32)
        # Set a variable to the Windows OS path
        set(PATH "C:\\Users\\John\\Documents")
    else()
        # Set a variable to the Linux OS path
        set(PATH "/home/john/documents")
    endif()

    # Specify sources and include directories
    set(SOURCES src/file1.cpp src/file2.cpp)
    set(INCLUDE_DIRS include)

    # Create a library with given target name and sources
    add_library(${TARGET_NAME} ${SOURCES})

    # Link the library to dependencies and include directories
    target_link_libraries(${TARGET_NAME} PRIVATE ${DEPENDENCIES})
    target_include_directories(${TARGET_NAME} PUBLIC ${INCLUDE_DIRS})

    # Add a custom command to copy files after building the target
    add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
                       COMMAND ${CMAKE_COMMAND} -E copy
                       ${CMAKE_SOURCE_DIR}/resources/config.ini $<TARGET_FILE_DIR:${TARGET_NAME}>)

    # Set a compile definition for the library
    target_compile_definitions(${TARGET_NAME} PUBLIC MY_DEFINITION)

    # Set compile flags for different build configurations
    if(CMAKE_BUILD_TYPE MATCHES Debug)
        # Add debug specific flags
        target_compile_options(${TARGET_NAME} PRIVATE -DDEBUG)
    elseif(CMAKE_BUILD_TYPE MATCHES Release)
        # Add release specific flags
        target_compile_options(${TARGET_NAME} PRIVATE -O3)
    elseif(CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
        # Add release with debug information specific flags
        target_compile_options(${TARGET_NAME} PRIVATE -O2 -g)
    endif()
endfunction()