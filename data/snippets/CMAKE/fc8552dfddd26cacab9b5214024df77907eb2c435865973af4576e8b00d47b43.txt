# Set the minimum required CMake version
cmake_minimum_required(VERSION 3.0)

# Specify project name and version
project(MyProject VERSION 1.0)

# Set variables for source files and include directories
set(SOURCES main.cpp utils.cpp)
set(INCLUDES include)

# Create a library from the source files
# with the header files from the include directories
add_library(mylib ${SOURCES})
target_include_directories(mylib PUBLIC ${INCLUDES})

# Create an executable target from the main.cpp file
add_executable(myapp main.cpp)

# Link the library to the executable target
target_link_libraries(myapp mylib)

# Add compiler flags for different build types
# This will enable debug symbols and optimization for release builds
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

# Specify installation directory for the executable
install(TARGETS myapp DESTINATION bin)

# Generate a configuration file with the project name and version
configure_file(config.h.in config.h)

# Add the include directory to the search path for the configuration file
target_include_directories(myapp PUBLIC "${CMAKE_BINARY_DIR}")

# Set additional compiler flags for specific files
set_source_files_properties(main.cpp PROPERTIES COMPILE_FLAGS "-std=c++11")

# Specify additional directories to search for libraries during linking
# This will add the "lib" directory to the search path
link_directories(lib)

# Add a custom target for generating documentation for the project
add_custom_target(doc COMMAND make -C ${CMAKE_CURRENT_SOURCE_DIR}/docs)

# Set the install location for the documentation
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/docs DESTINATION share/doc/myproject)