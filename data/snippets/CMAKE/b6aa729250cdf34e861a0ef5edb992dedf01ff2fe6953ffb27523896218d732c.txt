cmake_minimum_required(VERSION 3.16.3) # This line sets the minimum required version of CMake

project(MyProject LANGUAGES C CXX) # This line sets the project name and specifies the languages it will use

set(SOURCES
    src/main.cpp
    src/utils.cpp
    include/utils.h
)

set(HEADERS
    include/main.h
    include/other.h
)

add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS}) # This line creates an executable using the sources and headers

set_target_properties(${PROJECT_NAME} PROPERTIES # This line sets custom properties for the executable
    CXX_STANDARD 17 # Use C++17 standard
    CXX_STANDARD_REQUIRED ON # Require the C++17 standard
    CXX_EXTENSIONS OFF # Do not enable compiler-specific extensions
)

target_include_directories(${PROJECT_NAME} PUBLIC include) # This line adds the 'include' directory to the include paths for the project

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic") # This line adds the specified flags to the compiler command line for all targets in the current directory

find_package(OpenMP REQUIRED) # This line finds the OpenMP package and sets required variables for using it

if(OpenMP_FOUND) # Check if OpenMP was found
    target_link_libraries(${PROJECT_NAME} PUBLIC OpenMP::OpenMP_CXX) # If so, link the executable with the OpenMP::OpenMP_CXX library
endif()

find_package(Threads REQUIRED) # This line finds the threads package and sets required variables for using it

if(Threads_FOUND) # Check if threads were found
    target_link_libraries(${PROJECT_NAME} PRIVATE Threads::Threads) # If so, link the executable with the Threads::Threads library
endif()

target_compile_options(${PROJECT_NAME} PRIVATE -O3 -march=native) # This line adds optimization options to the compiler command line for the executable