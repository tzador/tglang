# CMakeLists.txt file
# This is the main configuration file for a CMake project
# CMake is a cross-platform build system generator
# This snippet of code shows how to set up a C++ project with CMake

# Specify the minimum version of CMake required
cmake_minimum_required(VERSION 3.10)

# Set the project name and specify the languages used
project(MyProject LANGUAGES CXX)

# Set the source files for the project
set(SOURCES
    src/main.cpp
    src/func1.cpp
    src/func2.cpp
)

# Create an executable target using the project name and the list of source files
add_executable(${PROJECT_NAME} ${SOURCES})

# Set the include directories for the project
target_include_directories(${PROJECT_NAME} PUBLIC
    ${PROJECT_SOURCE_DIR}/include
)

# Set compiler-specific options
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_options(${PROJECT_NAME} PRIVATE /W3)
endif()

# Set compiler-specific optimization flags
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_link_options(${PROJECT_NAME} PRIVATE -s)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_link_options(${PROJECT_NAME} PRIVATE /INCREMENTAL:NO)
endif()

# Set the output directory for built binaries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

# Set the C++ standard to use
set_target_properties(${PROJECT_NAME} PROPERTIES
    CXX_STANDARD 11
    CXX_STANDARD_REQUIRED ON
)

# Specify any additional libraries to link
# In this example, we are linking the Boost library
target_link_libraries(${PROJECT_NAME} PUBLIC boost)

# Add any custom compile definitions if needed
target_compile_definitions(${PROJECT_NAME} PUBLIC DEBUG)