# This is a CMakeLists file, used for configuring and generating a build system
cmake_minimum_required(VERSION 3.10)  # Specifying the minimum required version of CMake

# Setting the project name and language
project(myProject LANGUAGES CXX)

# Setting the build type to Release, can also be set to Debug or other options
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_CXX_STANDARD 11)  # Specifying the C++ standard version to be used

# Setting the build options 
# Here, we are adding the flag '-Wall' which enables all compiler warnings
# We can also add other flags like '-Werror', which treats warnings as errors
# and can help in catching coding mistakes
add_compile_options(-Wall)

# Adding a custom library
add_library(myLibrary STATIC lib.cpp)  # Name of the library and the files it includes

# Adding a custom executable
add_executable(myExecutable main.cpp)  # Name of the executable and the main file

# Linking the library to the executable
target_link_libraries(myExecutable myLibrary)

# Defining custom install targets
# This will create a custom install rule to install the executable and the library to a specified location
install(TARGETS myExecutable myLibrary
        RUNTIME DESTINATION bin  # Where to install the executable
        LIBRARY DESTINATION lib  # Where to install the library
        ARCHIVE DESTINATION lib/static)  # Where to install the library in static form

# Customizing the install process
# This will add a custom command to be executed during the install process
install(CODE "message(\"Installing myProject...\")")  # Message to be displayed during install

# Generating a configuration file
# This will create a configuration file that can be used for other projects to find and use the library 
# Here, we are specifying the path where the configuration file will be generated
# and the variables that will be included in the file
configure_file(config/myconfig.h.in config/myconfig.h)