# Set minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Create a project with given name
project(MyProject)

# Add a header file to be used for compilation
include_directories(includes/my_header.h)

# Create a variable for the source files
set(SOURCES src/main.cpp src/utils.cpp)

# Create an executable using the specified source files
add_executable(MyExecutable ${SOURCES})

# Define a custom macro that sets a compile option for a given target
macro(set_target_compile_option target_name compile_option)
    target_compile_options(${target_name} PRIVATE ${compile_option})
endmacro()

# Set specific compile options for MyExecutable target
set_target_compile_option(MyExecutable -Wall)
set_target_compile_option(MyExecutable -Werror)

# Find and link external libraries
find_package(OpenCV REQUIRED)
target_link_libraries(MyExecutable PRIVATE ${OpenCV_LIBS})

# Set compiler flag for DEBUG mode
if(CMAKE_BUILD_TYPE MATCHES Debug)
    set_target_compile_option(MyExecutable -g)
endif()

# Set compiler flag for RELEASE mode
if(CMAKE_BUILD_TYPE MATCHES Release)
    set_target_compile_option(MyExecutable -O2)
endif()

# Set additional compiler options based on platform
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set_target_compile_option(MyExecutable -stdlib=libc++)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    set_target_compile_option(MyExecutable -mfpu=neon -march=native)
endif()