# This is a comment in CMAKE
cmake_minimum_required(VERSION 3.10) # Set minimum version required for cmake

project(MyProject) # Set project name

# Set project variables
set(MYVAR "Hello World") # Define variable with string value
set(MYNUM 10) # Define variable with integer value
set(MYLIST 1 2 3 "Four" Five) # Define variable with list of values
set(MY_OPTION OFF) # Define variable for option

# Check if MY_OPTION is ON 
if(MY_OPTION)
  message("Option is ON")
else()
  message("Option is OFF")
endif()

# Define a function that prints out a given string
function(print_string STR)
  message(${STR})
endfunction()

# Call the function and pass in the MYVAR variable
print_string("${MYVAR}")

# Create a library called mylib with the given source files
add_library(mylib src/file1.cxx src/file2.cxx src/file3.cxx)

# Specify include directories for mylib
target_include_directories(mylib PUBLIC include)

# Link mylib to a target called myexecutable and add the source file main.cxx
add_executable(myexecutable src/main.cxx)

# Link myexecutable to mylib 
target_link_libraries(myexecutable mylib)

# Set compiler flags for myexecutable
target_compile_options(myexecutable PRIVATE -Wall -Wextra)

# Create a testing target
enable_testing()

# Add a test case that runs the myexecutable target with arguments and checks the output
add_test(NAME MyTest COMMAND myexecutable arg1 arg2 arg3)
set_tests_properties(MyTest PROPERTIES PASS_REGULAR_EXPRESSION "Expected Output")

# Install the myexecutable target to the bin directory
install(TARGETS myexecutable DESTINATION bin)

# Create a configuration file for mylib and install it to the include directory
configure_file(
  "${CMAKE_CURRENT_SOURCE_DIR}/config.h.in"
  "${CMAKE_CURRENT_BINARY_DIR}/config.h"
)
install (
  FILES ${CMAKE_CURRENT_BINARY_DIR}/config.h
  DESTINATION include
)