# creates an executable from source files
add_executable(my_exe file1.cpp file2.cpp file3.cpp)

# sets compiler flags for the executable
target_compile_options(my_exe PRIVATE -Wall -Werror -O3)

# links to libraries required by the executable
target_link_libraries(my_exe lib1 lib2 lib3)

# specifies custom build steps for the executable
add_custom_command(
    TARGET my_exe POST_BUILD
    COMMAND make -j8
    COMMAND sudo ./my_exe
    COMMENT "Building and running executable"
)

# sets compile definitions for the executable
target_compile_definitions(my_exe PRIVATE DEBUG_OPTION)

# creates a library from source files
add_library(my_lib SHARED file1.cpp file2.cpp file3.cpp)

# sets include directories for the library
target_include_directories(my_lib PUBLIC include)

# links to libraries required by the library
target_link_libraries(my_lib lib1 lib2 lib3)

# adds a custom command to be executed before building the library
add_custom_command(
    TARGET my_lib PRE_BUILD
    COMMAND echo "Generating source files"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMAND python generate_files.py
    COMMENT "Generating source files"
)

# specifies custom install rules for the library
install(TARGETS my_lib
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        RUNTIME DESTINATION bin
)

# defines a custom CMake function
function(my_function arg1 arg2 arg3)
    message("Executing my_function with arguments: ${arg1} ${arg2} ${arg3}")
endfunction()

# calls the custom function
my_function("input1" "input2" "input3")