# Define a function
function(find_package)
  # Input parameters
  set(FIND_PACKAGE_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
  set(FIND_PACKAGE_NAME "")
  set(FIND_PACKAGE_REQUIRED "")
  set(FIND_PACKAGE_QUIET FALSE)

  # Check if the package is already found
  if(FIND_PACKAGE_NAME IN_LIST CMAKE_FIND_PACKAGE_NAMES)
    message(STATUS "Package '${FIND_PACKAGE_NAME}' already found")
    return()
  endif()

  # Search the package
  set(FIND_PACKAGE_FOUND FALSE)
  foreach(FIND_PACKAGE_MODULE_PATH IN LISTS CMAKE_FIND_PACKAGE_MODULE_PATHS)
    # Set the path to the package
    set(FIND_PACKAGE_PATH "${FIND_PACKAGE_MODULE_PATH}/${FIND_PACKAGE_NAME}")

    # Check if the package exists
    if(EXISTS "${FIND_PACKAGE_PATH}")
      message(STATUS "Found package '${FIND_PACKAGE_NAME}' at '${FIND_PACKAGE_PATH}'")
      set(FIND_PACKAGE_FOUND TRUE)
      break()
    endif()
  endforeach()

  # If package is not found, return an error or warning
  if(NOT FIND_PACKAGE_FOUND)
    if(FIND_PACKAGE_REQUIRED)
      message(FATAL_ERROR "Could not find required package '${FIND_PACKAGE_NAME}'")
    else()
      message(WARNING "Could not find package '${FIND_PACKAGE_NAME}'")
    endif()
  endif()

endfunction()