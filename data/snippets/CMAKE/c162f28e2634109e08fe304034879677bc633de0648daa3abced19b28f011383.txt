## Declare a variable of type integer
set(var 10)

## Define a function that prints the value of the variable
function(print_value)
    message(STATUS "Value of var is: ${var}")
endfunction()

## Add a conditional check to the function
if(var STREQUAL "10")
    message(STATUS "Var is equal to string 10")
else()
    message(STATUS "Var is not equal to string 10")
endif()

## Generate a library with the variable as source file
add_library(my_lib ${var})

## Add an alias to the library
add_library(my_lib::lib ALIAS my_lib)

## Set properties for the library
set_target_properties(my_lib PROPERTIES
    POSITION_INDEPENDENT_CODE ON
    VERSION 1.0
    SOVERSION 1)

## Create an executable using the library
add_executable(my_exe ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)
target_link_libraries(my_exe PRIVATE my_lib)

## Set compiler flags for different build types
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -O0")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")

## Display all variables in the console
get_cmake_property(_variableNames VARIABLES)
foreach (_variableName ${_variableNames})
    message(STATUS "${_variableName}=${${_variableName}}")
endforeach()

## Define a macro
macro(add_executable_with_flags exe file flags)
    add_executable(${exe} ${CMAKE_CURRENT_SOURCE_DIR}/${file})
    set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/${file} PROPERTIES COMPILE_FLAGS ${flags})
endmacro()

## Use the macro to generate an executable with custom flags
add_executable_with_flags(my_exe_with_flags main.cpp "-O2 -DNDEBUG")

## Conditionally include a subdirectory
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_subdirectory(tests)
endif()