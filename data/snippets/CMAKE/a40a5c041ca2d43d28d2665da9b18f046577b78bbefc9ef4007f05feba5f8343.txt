#Set minimum version required for CMake
cmake_minimum_required(VERSION 3.10 FATAL_ERROR)

#Set project name
project(MyProject VERSION 1.0 LANGUAGES CXX)

#Set project source files
set(SOURCES 
    src/main.cpp
    src/utils.cpp
)

#Set project header files
set(HEADERS
    include/utils.h
)

#Add executable target
add_executable(myApp ${SOURCES} ${HEADERS})

#Set C++ standard to C++11
target_compile_features(myApp PUBLIC cxx_std_11)

#Set include directories
target_include_directories(myApp PUBLIC "${PROJECT_SOURCE_DIR}/include")

#Set link libraries
target_link_libraries(myApp PRIVATE myLibrary)

#Set build output directory
set_target_properties(myApp PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin")

#Add custom compile options for debug mode
target_compile_options(myApp PRIVATE $<$<CONFIG:Debug>:-DDEBUG -Wall -Wextra -pedantic>)

#Add custom compile options for release mode
target_compile_options(myApp PRIVATE $<$<CONFIG:Release>:-O3>)

#Set install rules
install(TARGETS myApp DESTINATION bin)
install(FILES "${PROJECT_SOURCE_DIR}/bin/myApp" DESTINATION "/opt/bin/myApp")

#Set CPack configuration
set(CPACK_GENERATOR "DEB")
set(CPACK_PACKAGE_NAME "myApp")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "John Doe")
include(CPack)