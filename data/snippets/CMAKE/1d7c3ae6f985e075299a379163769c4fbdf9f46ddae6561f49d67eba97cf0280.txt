# Define a variable
set(SOURCES main.cpp)

# Create an executable from the sources
add_executable(my_executable ${SOURCES})

# Link libraries to the executable
target_link_libraries(my_executable library1 library2)

# Set include directories
target_include_directories(my_executable PUBLIC include/)

# Set C++ standard
set(CMAKE_CXX_STANDARD 11)

# Add compiler flags
target_compile_options(my_executable PRIVATE -Wall -Wextra -Werror)

# Set compile definitions
target_compile_definitions(my_executable PRIVATE DEBUG=1)

# Set output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

# Set project name
project(My_Project)

# Add subdirectory for nested CMake files
add_subdirectory(library1)

# Add preprocessor definitions
target_compile_definitions(my_executable PUBLIC DEBUG=1)

# Set library version
set(VERSION_MAJOR 1)
set(VERSION_MINOR 0)
set(VERSION_PATCH 0)

# Configure a header file with project information
configure_file (
  "${PROJECT_SOURCE_DIR}/config.h.in"
  "${PROJECT_BINARY_DIR}/config.h"
)

# Add a custom command to run during build
add_custom_command(
  OUTPUT index.html
  COMMAND python "${PROJECT_SOURCE_DIR}/generate_html.py"
  DEPENDS "${PROJECT_SOURCE_DIR}/template.html" "${PROJECT_SOURCE_DIR}/data.csv"
)

# Add dependencies between targets
add_dependencies(my_executable library1)

# Set compiler for specific source files
set_source_files_properties(file1.cpp PROPERTIES COMPILE_FLAGS "-std=c++11")

# Set linker flags
set(CMAKE_EXE_LINKER_FLAGS "-stdlib=libc++ -lc++abi")

# Set build type
set(CMAKE_BUILD_TYPE Release)

# Specify which files to install
install(
  TARGETS my_executable
  RUNTIME DESTINATION bin/
)

# Display status message during build
message(STATUS "Building project: ${CMAKE_PROJECT_NAME}")