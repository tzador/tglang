# Define a function to search for all source files within a given directory and its subdirectories
function(find_source_files DIRECTORY SOURCE_FILES)
    # Create a list variable to hold the found source files
    set(ALL_SOURCE_FILES "")

    # Set the current search directory to the given directory
    set(CURRENT_DIR ${DIRECTORY})

    # Create a variable for storing the subdirectories to be searched
    set(SUB_DIRECTORIES "")

    # Loop through the contents of the search directory
    file(GLOB CONTENTS ${CURRENT_DIR}/*)

    # Add any subdirectories to the list of directories to be searched
    foreach(CONTENT ${CONTENTS})
        if(IS_DIRECTORY ${CONTENT})
            list(APPEND SUB_DIRECTORIES ${CONTENT})
        endif()
    endforeach()

    # Recursively search through all subdirectories
    if(SUB_DIRECTORIES)
        find_source_files(${SUB_DIRECTORIES} SOURCE_FILES)
    endif()

    # Process all source files in the current search directory
    file(GLOB CUR_SOURCE_FILES ${CURRENT_DIR}/*.cpp ${CURRENT_DIR}/*.h)

    # Add the found source files to the overall list
    list(APPEND ALL_SOURCE_FILES ${CUR_SOURCE_FILES})

    # Set the output parameter to the full list of source files
    set(${SOURCE_FILES} ${ALL_SOURCE_FILES} PARENT_SCOPE)
endfunction()

# Use the function to search for all source files within the current directory and its subdirectories
find_source_files(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_FILES)

# Create a library target using the found source files
add_library(MyLibrary ${SOURCE_FILES})

# Specify any necessary include directories for the library
target_include_directories(MyLibrary PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

# Add compiler flags for the library
target_compile_options(MyLibrary PUBLIC -std=c++11 -Wall)