#
# Project settings
#
cmake_minimum_required(VERSION 3.12) # Specify the minimum version of CMake required
project(MyProject LANGUAGES CXX) # Specify the name and programming language of the project

#
# Compiler settings
#
set(CMAKE_CXX_STANDARD 11) # Set the C++ version to be used
set(CMAKE_CXX_STANDARD_REQUIRED True) # Specify that the chosen C++ version must be strictly adhered to
set(CMAKE_CXX_EXTENSIONS OFF) # Turn off any compiler-specific extensions

#
# Source files
#
set(SRCS # Set the source files to be included in the project
    src/main.cpp
    src/myClass.cpp
    )

#
# Add executable target
#
add_executable(${PROJECT_NAME} ${SRCS}) # Specify the target executable and the source files used to build it

target_include_directories(${PROJECT_NAME} # Specify the directories containing necessary header files
    PRIVATE 
        ${PROJECT_SOURCE_DIR}/include
)

#
# External libraries
#
set(EXT_LIBS # Set the external libraries to be used
    libboost_system.so
    )

target_link_libraries(${PROJECT_NAME} # Link the target executable to the external libraries
    PRIVATE 
        ${EXT_LIBS}
)

#
# Install target
#
install(TARGETS ${PROJECT_NAME} DESTINATION bin) # Specify the target to be installed in the 'bin' directory

#
# Additional features
#
enable_testing() # Enable testing for the project

# Add a test executable
add_executable(test_${PROJECT_NAME} # Specify the test executable name and the source files used to build it
    test/main.cpp
)

target_include_directories(test_${PROJECT_NAME} # Specify the directories containing necessary header files
    PRIVATE 
        ${PROJECT_SOURCE_DIR}/include
)

# Add a test case
add_test(NAME MyTest # Specify the name of the test
    COMMAND test_${PROJECT_NAME} # Specify the command to run the test
)

#
# Custom commands
#
add_custom_target(run # Specify a custom target called "run" 
    COMMAND ${PROJECT_NAME} # Specify the command to run the project
    DEPENDS ${PROJECT_NAME} # Specify that this target depends on the executable target
)

add_custom_target(clean # Specify a custom target called "clean"
    COMMAND rm -rf build # Specify the command to clean up the build directory
)

add_custom_target(purge # Specify a custom target called "purge"
    COMMAND rm -rf build bin # Specify the command to clean up both the build and install directories
)