# This is a CMakeLists file for a project
# First, we set the minimum required CMake version
cmake_minimum_required(VERSION 3.10)

# Give the project a name
project(MyProject)

# Set the source files for the project
set(SOURCE_FILES
  src/main.cpp
  src/utils.cpp
  include/utils.h
)

# Add an executable target for the project
add_executable(${PROJECT_NAME} ${SOURCE_FILES})

# Specify the include directories for the project
target_include_directories(${PROJECT_NAME} PUBLIC include)

# Set compiler flags for the project
target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -Werror)

# Find and include necessary libraries
find_library(LIBRARY1 NAMES lib1 PATHS /usr/lib)
find_library(LIBRARY2 NAMES lib2 PATHS /usr/lib)
target_link_libraries(${PROJECT_NAME} PRIVATE ${LIBRARY1} ${LIBRARY2})

# Set the build type to Release
set(CMAKE_BUILD_TYPE Release)

# Set the build directory
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)

# Set the output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Add a custom target for generating documentation
add_custom_target(docs
  COMMAND doxygen config.doxyfile
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  COMMENT "Generating project documentation"
)

# Set up the installation for the project
install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

# Enable testing for the project
enable_testing()

# Add a test executable and specify its source files
add_executable(Test ${SOURCE_FILES} test/test_utils.cpp)

# Specify the include directories for the test executable
target_include_directories(Test PUBLIC include)

# Link the executable with necessary libraries
target_link_libraries(Test PRIVATE ${LIBRARY1} ${LIBRARY2} gtest_main)

# Add a test
add_test(NAME Test COMMAND Test)