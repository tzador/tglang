# This is a CMakeLists.txt file
# It is used to configure and generate build files for a CMake project

# Set the minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Specify the project name
project(my_project)

# Add a subdirectory for other CMakeLists.txt files
add_subdirectory(subdir)

# Set the location for the output executable
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

# Specify the source files for the project
set(SRC_FILES main.cpp helper.cpp)

# Set any compiler flags
set(CMAKE_CXX_FLAGS "-Wall -std=c++11")

# Set any include directories
include_directories(include)

# Create an executable target and link it to the source files
add_executable(my_executable ${SRC_FILES})

# Create a library target
add_library(my_library SHARED ${SRC_FILES})

# Set the link libraries for the executable
target_link_libraries(my_executable my_library)

# Set the link directories for the executable
target_link_directories(my_executable my_library)

# Add a custom command to copy input files to output directory
add_custom_command(TARGET my_executable POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/input_files ${EXECUTABLE_OUTPUT_PATH}/input_files)

# Specify build targets for different configurations
set(BUILD_TARGETS my_executable my_library)

# Specify build configurations and their respective targets
set(BUILD_CONFIGURATIONS
    Debug my_executable my_library
    Release my_executable my_library)

# Create build targets for different configurations
foreach(build_target ${BUILD_TARGETS})
    foreach(build_configuration ${BUILD_CONFIGURATIONS})
        if (build_target STREQUAL ${build_configuration})
            add_custom_target(${build_target}_${build_configuration}
                COMMAND ${CMAKE_COMMAND} --build . --target ${build_target} --config ${build_configuration})
        endif()
    endforeach()
endforeach()