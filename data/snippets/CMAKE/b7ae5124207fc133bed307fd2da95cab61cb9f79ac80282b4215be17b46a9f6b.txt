# This is a complex CMake snippet for creating a project and setting up its dependencies

# Set the minimum CMake version required
cmake_minimum_required(VERSION 3.12)

# Define project name
project(MyProject)

# Include external libraries
# Here we are adding an external library from a different CMake file
add_subdirectory(external_library)

# Create executable target for our project's main code
add_executable(MyProject main.cpp)

# Specify include directories for our project
# These include directories will be used when compiling our code
target_include_directories(MyProject PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_include_directories(MyProject PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/external_library/include)

# Link our project to the external library
target_link_libraries(MyProject PRIVATE ExternalLibrary)

# Add a custom command for generating code with a specific tool
# Here we are using a custom command to generate a header file from a data file
# The generated header file will be needed for compiling our project
add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/include/generated_header.h
                   COMMAND generate_header ${CMAKE_CURRENT_SOURCE_DIR}/data_file.dat > ${CMAKE_CURRENT_SOURCE_DIR}/include/generated_header.h
                   MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/data_file.dat)

# Add a dependency for our project to the generated header file
# This ensures that the custom command runs before building our project
add_dependencies(MyProject generated_header)

# Set compiler options for our project
# Here we are allowing the use of C++11 features
target_compile_options(MyProject PRIVATE -std=c++11)