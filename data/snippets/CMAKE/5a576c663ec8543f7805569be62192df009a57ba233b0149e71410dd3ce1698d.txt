# CMakeLists.txt
cmake_minimum_required(VERSION 3.10) # Minimum version required to run this cmake file
project(my_project) # Name of the project

# Add subdirectories to the project
add_subdirectory(libs/my_lib) # Add the 'my_lib' directory as a subdirectory

# Set compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -Werror") # Set c++11 standard, and enable compiler flags for all targets

# Set include directories
include_directories("${PROJECT_SOURCE_DIR}/libs/my_lib/include") # Include the 'libs/my_lib/include' directory for all targets in this project

# Add executables and link libraries
add_executable(my_executable src/main.cpp) # Add main.cpp as an executable
target_link_libraries(my_executable my_lib) # Link my_lib library to my_executable

# Set output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin") # Set the output directory to 'bin' inside the build directory

# Install files
install(TARGETS my_executable DESTINATION bin) # Install my_executable to the 'bin' directory
install(DIRECTORY "${PROJECT_SOURCE_DIR}/libs/my_lib/include/" DESTINATION include) # Install my_lib's include directory to the 'include' directory

# Configure packages
find_package(Boost REQUIRED COMPONENTS program_options system date_time) # Find the Boost library and its required components
include_directories(${Boost_INCLUDE_DIRS}) # Include Boost's include directories
target_link_libraries(my_executable ${Boost_LIBRARIES}) # Link Boost libraries to my_executable

# Add tests (optional)
enable_testing() # Enable testing for this project
add_test(NAME my_test COMMAND my_executable 5) # Add a test named 'my_test' that runs my_executable with an argument of '5'
set_tests_properties(my_test PROPERTIES PASS_REGULAR_EXPRESSION "Result: 5") # Set the expected output of the test to be 'Result: 5'