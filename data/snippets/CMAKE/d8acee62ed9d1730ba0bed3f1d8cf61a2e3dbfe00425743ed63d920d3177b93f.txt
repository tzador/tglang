# Set minimum version of CMake required
cmake_minimum_required(VERSION 3.10)

# Create a project
project(MyProject)

# Set sources variable with a list of source files
set(sources 
    src/main.cpp 
    src/utils.cpp 
    include/utils.h
)

# Create an executable target
add_executable(MyProject ${sources})

# Set include directories 
include_directories(
    include 
    test
)

# Set link directories
link_directories(
    ${PROJECT_SOURCE_DIR}/lib
)

# Add a custom command to build external libraries
add_custom_command(TARGET MyProject POST_BUILD 
    COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/ext_libs/libexternal.so ${PROJECT_SOURCE_DIR}/lib
    COMMENT "Building external libraries"
)

# Add C++11 standard
set(CMAKE_CXX_STANDARD 11)

# Set compiler flags
add_compile_options(-Wall -Wextra -pedantic)

# Add a custom target to run unit tests
add_custom_target(UnitTests COMMAND ${PROJECT_NAME} -test)

# Add a test for MyProject
add_test(NAME MyProjectTests COMMAND UnitTests)

# Add a pre-build action to generate documentation
add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/docs COMMAND doxygen ${PROJECT_SOURCE_DIR}/docs/Doxyfile)

# Add a post-build action to copy documentation to build directory
add_custom_command(TARGET MyProject POST_BUILD 
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${PROJECT_SOURCE_DIR}/docs/html ${CMAKE_BINARY_DIR}/docs
    COMMENT "Copying documentation to build directory"
)