# Specify minimum required CMake version
cmake_minimum_required(VERSION 3.10)  

# Set project name and version
project(example_project VERSION 1.0.0)  

# Set C++ standard to C++ 14
set(CMAKE_CXX_STANDARD 14)  

# Set flags for compiler optimizations
if (CMAKE_BUILD_TYPE STREQUAL "Release")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
endif()  

# Find external libraries using PkgConfig module
find_package(PkgConfig REQUIRED)    

# Add include directories for needed headers
include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/includes)     

# Set sources files to compile
set(SOURCE_FILES main.cpp utils.cpp)    

# Create executable from source files
add_executable(${PROJECT_NAME} ${SOURCE_FILES})     

# Add linking for external libraries
target_link_libraries(${PROJECT_NAME} PUBLIC PkgConfig::lib1 PkgConfig::lib2)  

# Set installation target directories
install(TARGETS ${PROJECT_NAME} DESTINATION bin) 
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION include)

# Add custom target to run tests
add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND})  

# Add test executable and define tests
add_executable(tests tests.cpp utils.cpp)
add_test(NAME my_test COMMAND tests)

# Add test to custom target
add_dependencies(check tests)  

# Specify libraries to link with test executable
target_link_libraries(tests PRIVATE PkgConfig::lib1 PkgConfig::lib2)

# Add subdirectory for additional sources
add_subdirectory(utils)     

# Specify libraries to link with main executable
target_link_libraries(${PROJECT_NAME} PUBLIC utils)