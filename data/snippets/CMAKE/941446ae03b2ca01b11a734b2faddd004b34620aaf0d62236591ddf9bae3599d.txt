# Define a variable
# This variable will be used to store the message to be printed out
set(message "Hello World!")

# Create an executable file
# Set the name of the executable to be generated
# Specify a list of source files to be compiled
# Add the variable 'message' to be used in the executable
add_executable(my_app main.c helper.c ${message})

# Add a custom command to run before the executable is built
# This command will create a text file called 'notes.txt'
# with the contents of the 'message' variable
add_custom_command(TARGET my_app PRE_BUILD
    COMMAND echo ${message} > notes.txt)

# Specify the build type for the project
# This can be either Debug or Release
# The default build type is Debug if not specified
set(CMAKE_BUILD_TYPE Release)

# Add compiler flags for the Release build type
set(CMAKE_C_FLAGS_RELEASE "-O2")

# Add compiler flags for the Debug build type
set(CMAKE_C_FLAGS_DEBUG "-g -O0")

# Specify the output directory for the built files
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

# Set the version number of the project
set(my_app_VERSION_MAJOR 1)
set(my_app_VERSION_MINOR 0)

# Create a configure file to pass the version number to the source code
# This will generate a header file with the name 'config.h' in the binary directory
configure_file(
    "${PROJECT_SOURCE_DIR}/config.h.in"
    "${PROJECT_BINARY_DIR}/bin/config.h"
)

# Add a header file search path
# This will tell the compiler where to look for header files
include_directories("${PROJECT_BINARY_DIR}/bin")

# Specify libraries to link with the executable
target_link_libraries(my_app m)

# Specify additional libraries to link with the executable
target_link_libraries(my_app pthread)

# Install the executable to the designated directory
install(TARGETS my_app DESTINATION bin)

# Set variables for the installation of the header files
set(INCLUDE_DIRECTORIES "${PROJECT_SOURCE_DIR}/include")
set(HEADER_FILES "${PROJECT_SOURCE_DIR}/include/helper.h")

# Install header files to the designated directory
install(DIRECTORY ${INCLUDE_DIRECTORIES} DESTINATION include)
install(FILES ${HEADER_FILES} DESTINATION include)