# Set minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Set project name with version
project(MyProject VERSION 1.0)

# Set variables for source files and executable name
set(SOURCES 
    src/main.cpp
    src/utils.cpp)

set(EXECUTABLE_NAME MyExecutable)

# Add executable target with given sources
add_executable(${EXECUTABLE_NAME} ${SOURCES})

# Add C++11 standard
target_compile_features(${EXECUTABLE_NAME} PRIVATE cxx_std_11)

# Set variables for include directories and library link directories
set(INCLUDE_DIRS 
    include
    external/include)

set(LIBRARY_DIRS 
    external/lib)

# Add include directories to the target
target_include_directories(${EXECUTABLE_NAME} PRIVATE ${INCLUDE_DIRS})

# Add link directories to the target
target_link_directories(${EXECUTABLE_NAME} PRIVATE ${LIBRARY_DIRS})

# Set variables for libraries to link
set(LIBRARIES 
    library1 
    library2)

# Link libraries to the target
target_link_libraries(${EXECUTABLE_NAME} PRIVATE ${LIBRARIES})

# Set build type to Release or Debug
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif()

# Enable compiler optimizations for Release build
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

# Enable debugging symbols for Debug build
set(CMAKE_CXX_FLAGS_DEBUG "-g")

# Set output directory for built executable
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# Add custom target to clean build files
add_custom_target(clean-all
    COMMAND ${CMAKE_BUILD_TOOL} clean
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
)