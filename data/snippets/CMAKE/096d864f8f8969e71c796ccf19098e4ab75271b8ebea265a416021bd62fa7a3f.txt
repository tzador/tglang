#This is a CMake file for building a project called Example
cmake_minimum_required(VERSION 3.12)

#Define project name
project(Example)

#Set output directory for compiled binaries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

#Include folders for source code
include_directories(${PROJECT_SOURCE_DIR}/include)

#Add source files to the project
set(SOURCES src/main.cpp src/functions.cpp)

#Create an executable target using the source files
add_executable(Example ${SOURCES})

#Add a custom command that will run before building the executable
#This command will generate a header file containing project version information
add_custom_command(TARGET Example PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_SOURCE_DIR}/include/version.h
    DEPENDS ${CMAKE_SOURCE_DIR}/include/version.h.in)

#Set version number for the project
set(VERSION_MAJOR 1)
set(VERSION_MINOR 0)
set(VERSION_PATCH 0)

#Install the executable into the bin directory
install(TARGETS Example
    RUNTIME DESTINATION bin)

#Create a package for the project
set(CPACK_PACKAGE_NAME "Example")
set(CPACK_PACKAGE_VERSION_MAJOR ${VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${VERSION_PATCH})

#Generate package installer for Windows
if (WIN32)
    set(CPACK_GENERATOR NSIS)
endif()

#Generate package installer for macOS
if (APPLE)
    set(CPACK_GENERATOR DragNDrop)
endif()

#Include dependencies in the package
include(InstallRequiredSystemLibraries)

#Set install destination for dependencies
set(CPACK_WIN32_INSTALL_PREFIX ${PROJECT_SOURCE_DIR}/bin)

#Create package and set install location
set(CPACK_PACKAGE_INSTALL_DIRECTORY "Example")
set(CPACK_TOPLEVEL_TAG "Example")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
set(CPACK_INSTALL_CMAKE_PROJECTS "${CMAKE_BINARY_DIR};Example;ALL;/")
include(CPack)