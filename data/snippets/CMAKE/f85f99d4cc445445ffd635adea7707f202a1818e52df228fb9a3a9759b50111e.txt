# Define the minimum required version of CMake
cmake_minimum_required(VERSION 3.10)

# Define the project name and specify its language
project(MyProject LANGUAGES CXX)

# Set compiler options
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Set output directory for compiled binaries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)

# Specify the source files for the project
set(SOURCES
   main.cpp
   utils.cpp
   helper.cpp
)

# Define the target executable and link its dependencies
add_executable(MyProject ${SOURCES})
target_link_libraries(MyProject PUBLIC ${LIBRARIES})

# Define custom compiler flags
target_compile_options(MyProject PRIVATE
   -Werror
   -Wall
   -Wextra
   -pedantic
)

# Specify include directories
target_include_directories(MyProject PUBLIC
   ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Specify additional libraries to link against
target_link_libraries(MyProject PUBLIC
   Threads::Threads
   OpenSSL::Crypto
   OpenSSL::SSL
   Boost::system
)

# Install the executable to the system
install(TARGETS MyProject RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)

# Specify custom compile definitions
target_compile_definitions(MyProject PRIVATE LOG_LEVEL=3)

# Set the build type
set(CMAKE_BUILD_TYPE Release)

# Add a custom target
add_custom_target(GenerateMyConfig
   COMMAND ${CMAKE_COMMAND} -D CMAKE_CXX_COMPILER="${CMAKE_CXX_COMPILER}" -D CMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}" -P ${PROJECT_SOURCE_DIR}/config.cmake.in
   COMMENT "Generating config file for MyProject"
)