# Create a CMake project
cmake_minimum_required(VERSION 3.15)
project(MyProject)

# Set the compiling flags for the project
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall")

# Set the build type to Release
set(CMAKE_BUILD_TYPE Release)

# Add a library target using the source files
add_library(MyLibrary 
    src/first_file.cpp
    src/second_file.cpp
    src/third_file.cpp
)

# Set the include directories for the library target
target_include_directories(MyLibrary PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Set the linker flags for the library target
target_link_libraries(MyLibrary
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/static_lib.a
)

# Add an executable target using the source file
add_executable(MyExecutable 
    src/main.cpp
)

# Link the executable target with the library target
target_link_libraries(MyExecutable
    MyLibrary
)

# Specify the installation locations
install(TARGETS MyLibrary
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# Add a custom command to generate a header file during build
add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/include/my_header.h
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/include/input.h ${CMAKE_CURRENT_SOURCE_DIR}/include/my_header.h
    COMMENT "Generating my_header.h"
)

# Add a dependency on the custom command for the library target
add_dependencies(MyLibrary ${CMAKE_CURRENT_SOURCE_DIR}/include/my_header.h)

# Specify the installation locations for the header file
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/my_header.h
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)