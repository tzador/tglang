# Define a variable for the project name
set(PROJECT_NAME "my_project")

# Define a variable for the source files of the project
set(SOURCE_FILES 
    src/main.cpp
    src/helper_functions.cpp
)

# Define a variable for header files of the project
set(HEADER_FILES
    include/helper_functions.h
)

# Specify the minimum version of CMake required
cmake_minimum_required(VERSION 3.10)

# Name the project and set the language to C++
project(${PROJECT_NAME} LANGUAGES CXX)

# Add the source and header files to the project
add_executable(${PROJECT_NAME} ${SOURCE_FILES} ${HEADER_FILES})

# Set the output directory for the compiled files
set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# Add include directories for project headers
target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)

# Set the C++ standard to C++11
set_target_properties(${PROJECT_NAME} PROPERTIES 
    CXX_STANDARD 11
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS NO
)

# Specify libraries to link against
target_link_libraries(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/lib/libfoo.a)

# Specify additional compiler flags
target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Werror -fPIC)

# Define a macro for enabling debugging mode
macro(set_debug_mode)
    set(CMAKE_BUILD_TYPE "Debug")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -ggdb3 -O0")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -ggdb3 -O0")
endmacro(set_debug_mode)

# Enable debugging mode for the project
set_debug_mode()