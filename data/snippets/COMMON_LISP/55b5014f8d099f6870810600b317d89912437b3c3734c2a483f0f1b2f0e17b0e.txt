;; Define a function to calculate the factorial of a number
 (defun factorial (n)
   "Returns the factorial of n."
   (if (<= n 1)
     1
     (* n (factorial (- n 1)))))

 ;; Define a function to calculate the n-th fibonacci number
 (defun fibonacci (n)
   "Returns the n-th Fibonacci number."
   (cond
     ((<= n 0)
       0)
     ((= n 1)
       1)
     (t
       (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))

 ;; Define a function that checks if a number is prime
 (defun is-prime (n)
   "Checks if n is a prime number."
   (cond
     ((<= n 1)
       nil)
     ((= n 2)
       t)
     ((= n 3)
       t)
     ((= (mod n 2) 0)
       nil)
     ((= (mod n 3) 0)
       nil)
     (t
       (let ((i 5))
         (loop while (<= (* i i) n)
           do (if (and (= (mod n i) 0) (= (mod n (+ i 2)) 0))
                (return nil)
                (setq i (+ i 6)))))
       t)))

 ;; Define a function that calculates the area of a triangle
 (defun triangle-area (base height)
   "Returns the area of a triangle with given base and height."
   (/ (* base height) 2))

 ;; Define a function to calculate the volume of a cylinder
 (defun cylinder-volume (radius height)
   "Returns the volume of a cylinder with given radius and height."
   (* pi (* radius radius) height))

 ;; Define a macro to print "Hello World" n times
 (defmacro hello-world (n)
   "Prints 'Hello World' n times."
   `(dotimes (i ,n)
      (format t "Hello World~%")))

 ;; Define a class for a student with name and age properties
 (defclass student ()
   ((name :initarg :name :accessor name)
    (age :initarg :age :accessor age)))

 ;; Define a function to add two matrices
 (defun add-matrices (m1 m2)
   "Adds two matrices and returns the result."
   (loop for row1 in m1
         for row2 in m2
         collect (loop for elem1 in row1
                       for elem2 in row2
                       collect (+ elem1 elem2)))))