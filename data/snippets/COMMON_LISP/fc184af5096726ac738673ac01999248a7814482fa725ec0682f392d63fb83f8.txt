(defun find-lisp-tree (node)
  "A function that takes a binary tree node and returns a list of all nodes in the tree."
  (let ((result '())) ; create an empty list to store the nodes
    (if (null node) ; check if the current node is null
        (return-from find-lisp-tree result) ; if null, return the empty list
        (progn ; if not null, add the current node to the result list
          (setf result (cons node result))
          (if (null (left node)) ; check if the current node has a left child
              (find-lisp-tree (right node)) ; if not, recursively call function on right child
              (progn ; if yes, recursively call function on left and right child
                (find-lisp-tree (left node))
                (find-lisp-tree (right node))
              )
          )
        )
      )
    )
  result ; return the final result list
)