;;; A simple function that takes in two numbers and adds them together
(defun add-numbers (num1 num2)
  "This function takes in two numbers and returns their sum."
  (+ num1 num2))

;;; A recursive function that calculates the factorial of a given number
(defun factorial (n)
  "This function takes in a number n and returns the factorial of n."
  (if (= n 0)
      1
      (* n (factorial (- n 1)))))

;;; A function that counts the number of occurrences of a given element in a list
(defun count-occurrences (element list)
  "This function takes in an element and a list and returns the number of times that element appears in the list."
  (cond ((null list) 0)
        ((eql element (car list)) (+ 1 (count-occurrences element (rest list))))
        (t (count-occurrences element (rest list)))))

;;; An example of using the functions defined above
(format t "The sum of 3 and 5 is ~d~%" (add-numbers 3 5))
(format t "The factorial of 5 is ~d~%" (factorial 5))
(let ((my-list '(1 2 3 2 2 4 5 2 8)))
  (format t "The number of occurrences of 2 in the list ~a is ~d~%" my-list (count-occurrences 2 my-list)))