(defparameter *list* (list 1 2 3 4 5 6 7 8 9 10))
; This code snippet defines a global variable named *list* and assigns it a list of numbers from 1 to 10.

(defun filter (predicate sequence)
  "Applies a predicate function to each element in a sequence and returns a list of elements that fullfill the predicate."
  (if sequence
      (let ((first-element (first sequence))
            (rest-elements (rest sequence)))
        (if (funcall predicate first-element)
            (cons first-element (filter predicate rest-elements))
            (filter predicate rest-elements)))
      nil))
; This code snippet defines a function named filter that takes in two parameters: a predicate function and a sequence.
; It uses recursion to apply the predicate function to each element in the sequence and returns a list of elements that fulfill the predicate function.
; If the sequence is empty, it returns nil.

(defun square (n)
  "Calculates the square of a number."
  (* n n))
; This code snippet defines a function named square that takes in one parameter: a number.
; It uses the built-in multiplication function * to calculate the square of the number and returns it.

(defun map (function sequence)
  "Applies a function to each element in a sequence and returns a list of the results."
  (if sequence
      (cons (funcall function (first sequence))
            (map function (rest sequence)))
      nil))
; This code snippet defines a function named map that takes in two parameters: a function and a sequence.
; It uses recursion to apply the function to each element in the sequence and returns a list of the results.
; If the sequence is empty, it returns nil.

(defun reduce (function sequence &optional initial-value)
  "Applies a function to each element in a sequence and accumulates the results using the specified initial value."
  (if sequence
      (if initial-value
          (funcall function (reduce function (rest sequence) initial-value) (first sequence))
          (reduce function (rest sequence) (first sequence)))
      initial-value))
; This code snippet defines a function named reduce that takes in three parameters: a function, a sequence, and an optional initial value.
; It uses recursion to apply the function to each element in the sequence and accumulates the results using the specified initial value.
; If the sequence is empty, it returns the initial value.
; If no initial value is provided, it uses the first element of the sequence as the initial value.

(defun map-filter (predicate function sequence)
  "Applies a function to each element in a sequence that fulfills the predicate and returns a list of the results."
  (map function (filter predicate sequence)))
; This code snippet defines a function named map-filter that takes in three parameters: a predicate function, a function, and a sequence.
; It uses the previously defined functions map and filter to apply the function to each element in the sequence that fulfills the predicate and returns a list of the results.