;; This function recursively calculates the factorial of a given number
;; Input: num - the number whose factorial is being calculated
;; Output: factorial - the factorial of the input number
(defun factorial (num)
    (if (= num 0)
        1
        (* num (factorial (- num 1)))))

;; This function checks if a number is prime or not
;; Input: num - the number to be checked
;; Output: True if number is prime, False if non-prime
(defun is-prime (num)
    (let ((prime t))
        (declare (fixnum num))
        (loop for i from 2 to (sqrt num) do
            (when (zerop (mod num i))
                (setq prime nil)))
        prime))

;; This function returns a list of prime numbers within a given range
;; Input: start - the lower bound of the range
;;        end - the upper bound of the range
;; Output: primes - a list of prime numbers within the given range
(defun prime-range (start end)
    (loop for i from start to end do
        (if (is-prime i)
            (push i primes))
        (setf primes (sort primes #'<)))) ;; sort the list in ascending order

;; example usage:
;; (prime-range 1 20) ;; => (2 3 5 7 11 13 17 19)