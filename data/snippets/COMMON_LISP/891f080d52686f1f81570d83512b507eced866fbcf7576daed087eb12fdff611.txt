(defvar *square*)
(setq *square* '((defun square (x) "Calculates the square of a number"
                        (* x x))))

(defvar *fib*)
(setq *fib* '((defun fib (n) "Calculates the Fibonacci sequence up to given number"
                        (if (<= n 1)
                            n
                            (+ (fib (1- n)) (fib (1- (1- n))))))))

(defvar *sum*)
(setq *sum* '((defun sum (x) "Calculates the sum of a list of numbers"
                        (if (null x)
                            0
                            (+ (car x) (sum (cdr x)))))))

(defvar *gcd*)
(setq *gcd* '((defun gcd (a b) "Calculates the greatest common divisor of two numbers"
                        (if (= b 0)
                            a
                            (gcd b (mod a b))))))

(defvar *power*)
(setq *power* '((defun power (base exp) "Calculates the power of a given base to a given exponent"
                        (if (= exp 0)
                            1
                            (* base (power base (1- exp))))))))

(defvar *quick-sort*)
(setq *quick-sort* '((defun quick-sort (lst)
                             "Sorts a list of numbers using quicksort algorithm"
                             (if (null lst)
                                 nil
                                 (let ((pivot (car lst))
                                       (smaller nil)
                                       (larger nil))
                                     (dolist (elem (cdr lst))
                                       (if (<= elem pivot)
                                           (push elem smaller)
                                           (push elem larger)))
                                     (append (quick-sort smaller)
                                             (list pivot)
                                             (quick-sort larger)))))))

(defvar *binary-search*)
(setq *binary-search* '((defun binary-search (lst target)
                                         "Searches for a target element in a sorted list using binary search algorithm"
                                         (let ((low 0)
                                               (high (1- (length lst))))
                                           (do ((mid (floor (+ low high) 2) (floor (+ low high) 2)))
                                               ((>= low high) nil)
                                             (if (= (nth mid lst) target)
                                                 mid
                                                 (if (< (nth mid lst) target)
                                                     (setq low (1+ mid))
                                                     (setq high (1- mid)))))))))