(defun bubble-sort (lst) ; Define a function named bubble-sort that takes in a list as input
	(let ((sorted (copy-list lst)) ; Use let to create a local variable named 'sorted', which is a copy of the input list
		  (size (length lst))) ; Create a local variable named 'size' that stores the length of the input list
		(do ((pass 0 (1+ pass))) ; Use do loop to iterate through the list until it is sorted
			((= pass size) sorted)
			(let ((swapped nil)) ; Create a local variable named 'swapped' and initialize it to nil
				(do ((i 0 (1+ i))) ; Use do loop to iterate through the list
					((= i (- size 1)))
					(when (> (nth i sorted) (nth (+ i 1) sorted)) ; Compare two elements in the list and swap them if necessary
						(setq swapped t) ; If elements are swapped, set 'swapped' to true
						(setf (nth i sorted) (nth (+ i 1) sorted))
						(setf (nth (+ i 1) sorted) (nth i sorted)))) ; Swap elements in the list
				(when (not swapped) ; If no elements were swapped, list is sorted and loop is exited
					(return sorted)))))) ; Return the sorted list.