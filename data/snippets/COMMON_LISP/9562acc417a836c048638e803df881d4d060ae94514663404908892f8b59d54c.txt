;;; The following code snippet demonstrates the use of conditionals and recursion in COMMON_LISP.

(defun factorial (num)
  "Function that calculates the factorial of a given number using recursion."
  (if (<= num 1)
      1
      (* num (factorial (- num 1)))
  )
)

(defun fibonacci (num)
  "Function that calculates the fibonacci sequence up to the given number using iteration."
  (if (<= num 1)
      1
      (+ (fibonacci (- num 1)) (fibonacci (- num 2)))
  )
)

(defun fizzbuzz (num)
  "Function that prints 'Fizz' when a number is divisible by 3, 'Buzz' when divisible by 5, and 'FizzBuzz' when divisible by both."
  (progn
    (print (if (and (= (mod num 3) 0) (= (mod num 5) 0))
               "FizzBuzz"
               (if (= (mod num 3) 0)
                   "Fizz"
                   (if (= (mod num 5) 0)
                       "Buzz"
                   )
               )
           )
         )
    (if (> num 1)
        (fizzbuzz (- num 1))
    )
  )
)

;;; Example calls to the functions defined above:

(print (factorial 5))

(print (fibonacci 10))

(fizzbuzz 20)