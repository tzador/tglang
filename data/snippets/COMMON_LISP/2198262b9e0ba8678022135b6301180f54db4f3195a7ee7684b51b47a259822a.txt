(defvar *list* '(1 2 3 4 5 6 7 "a" "b" "c")) ; Defines a list variable with integer and string elements 

(defun list-length (list) ; Defines a function to calculate the length of a list
  "Returns the length of a list"
  (if (null list) 0 ; Checks if the list is null, if yes then return 0
      (+ 1 (list-length (cdr list)))) ; Recursively calculates the length of the list by adding 1 and then calling the function again on the rest of the list (cdr)

(defun list-print (list) ; Defines a function to print all the elements of a list
  "Prints all the elements of a list"
  (if (null list) nil ; Checks if the list is null, if yes then return nil
      (progn (print (car list)) ; Prints the first element of the list (car)
      (list-print (cdr list))))) ; Recursively calls the function on the rest of the list (cdr) to print all the elements
 
(defun list-reverse (list) ; Defines a function to reverse the elements of a list
  "Reverses the elements of a list"
  (if (null list) nil ; Checks if the list is null, if yes then return nil
      (append (list-reverse (cdr list)) (list (car list))))) ; Recursively calls the function on the rest of the list (cdr) and appends the first element (car) to the end of the reversed list

(defun list-remove-duplicates (list) ; Defines a function to remove duplicate elements from a list
  "Removes duplicate elements from a list"
  (if (null list) nil ; Checks if the list is null, if yes then return nil
      (append ; Uses the append function to concatenate lists
      (list (car list)) ; Appends the first element (car) to the result list
      (list-remove-duplicates (remove (car list) (cdr list)))))) ; Recursively calls the function on the rest of the list (cdr) after removing the first element (car) from the list 

(format t "List: ~a~%" *list*) ; Prints the original list
(format t "Length: ~a~%" (list-length *list*)) ; Calls the function to calculate the length of the list and prints it
(format t "Reversed List: ~a~%" (list-reverse *list*)) ; Calls the function to reverse the list and prints it
(format t "List without Duplicates: ~a~%" (list-remove-duplicates *list*)) ; Calls the function to remove duplicates and prints the result list