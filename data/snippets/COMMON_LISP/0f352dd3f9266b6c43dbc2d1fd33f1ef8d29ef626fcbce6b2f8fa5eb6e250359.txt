;;; An implementation of the quicksort algorithm in Common Lisp
(defparameter *data* '(5 3 2 4 1))     ;;; create sample data to sort
;;; function to partition the data into two sub-lists based on a chosen pivot value
;;; returns index of pivot value
(defun partition (data low high)
  (let ((pivot-value (nth high data)))
    (let ((pivot-index low)
          (left-list (subseq data low high))
          (right-list (subseq data high)))
      (loop for item in left-list
            do (when (<= item pivot-value)
                 (setf (nth pivot-index data) item)
                 (incf pivot-index)))
      (setf (nth pivot-index data) pivot-value)
      pivot-index)))
;;; recursive implementation of the quicksort algorithm
;;; sorts data in place
(defun quicksort (data low high)
  (when (<= low high)
    (let ((pivot-index (partition data low high)))
      (quicksort data low (1- pivot-index))
      (quicksort data (1+ pivot-index) high))))
;;; execute the quicksort function on *data*
(quicksort *data* 0 (1- (length *data*)))
;;; output the sorted data
(print *data*)