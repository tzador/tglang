;; Define a function that takes in a list
(defun nested-list-function (nested-list) ;; `(nested-list)' indicates the parameter
  ;; Use recursion to iterate through each element of the list
  (if (null nested-list) ;; Base case -> if the list is empty, return nil
    nil
    (if (listp (car nested-list)) ;; If the first element is itself a list
      (loop for x in nested-list do ;; Use loop to iterate through the nested list
         (print (car x)) ;; Print the first element of each sublist
         (nested-list-function (cdr x))) ;; Use recursion to go through each element of the sublist
      (print (car nested-list)) ;; Print the first element of the current list
      (nested-list-function (cdr nested-list))))) ;; Use recursion to go through the rest of the list

;; Example function call with a nested list as the argument
(nested-list-function '((1 2) 3 (4 (5)))) ;; Output: 1, 2, 3, 4, 5