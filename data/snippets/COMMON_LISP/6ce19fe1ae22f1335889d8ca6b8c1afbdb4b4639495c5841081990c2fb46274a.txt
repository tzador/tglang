(defun make-accumulator (n) "Makes an accumulator function that takes in a number and returns a function to add n to itself"
  (let ((count n)) ; Bind the value of n to count variable
    #'(lambda (x) "Inner function that takes a number and adds it to the count variable"
        (incf count x)))) ; Increment the count variable by x and return the new value

(setf acc-5 (make-accumulator 5)) ; Create an accumulator function that adds 5 to a given number
; Value of acc-5 is now a function that takes a number and adds 5 to it
; Example: (funcall acc-5 10) -> Output: 15

(setf acc-10 (make-accumulator 10)) ; Create an accumulator function that adds 10 to a given number
; Value of acc-10 is now a function that takes a number and adds 10 to it
; Example: (funcall acc-10 20) -> Output: 30

(funcall acc-5 2) ; Output: 7 (2 + 5)
(funcall acc-5 4) ; Output: 11 (4 + 7)
(funcall acc-10 5) ; Output: 15 (5 + 10)
(funcall acc-10 7) ; Output: 22 (7 + 15)