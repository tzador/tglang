;;; This code snippet creates a function that sorts a list using the quicksort algorithm

(defun quicksort (list) ;;; Defines the quicksort function that takes in a list parameter
  (if (null list) ;;; Checks if the list is empty
      nil ;;; If it is empty, returns nil
      (let* ((pivot (car list)) ;;; Sets the pivot to the first element of the list
             (smaller (remove-if-not #'(lambda (x) (<= x pivot)) (cdr list))) ;;; Uses remove-if-not to find all elements smaller than or equal to the pivot
             (larger (remove-if-not #'(lambda (x) (> x pivot)) (cdr list)))) ;;; Uses remove-if-not to find all elements larger than the pivot
        (append (quicksort smaller) (list pivot) (quicksort larger))))) ;;; Recursively calls quicksort on the smaller and larger lists, and appends them together with the pivot element to create the sorted list.