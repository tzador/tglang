;; Define a function that takes in two integers and returns the product
(defun multiply (x y)
  (* x y))

;; Define a list of numbers
(defvar numbers '(1 2 3 4 5))

;; Create a new list by applying the multiply function to each element in the number list
(mapcar #'(lambda (x) (multiply x 2)) numbers)

;; Output: (2 4 6 8 10)

;; Create another function that takes in a list and returns the sum of all the elements
(defun sum (list)
  (if (null list)
      0
      (+ (car list) (sum (cdr list)))))

;; Apply the sum function to the list of numbers
(sum numbers)

;; Output: 15

;; Define a recursive function that calculates the factorial of a number
(defun factorial (n)
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

;; Calculate the factorial of 5
(factorial 5)

;; Output: 120