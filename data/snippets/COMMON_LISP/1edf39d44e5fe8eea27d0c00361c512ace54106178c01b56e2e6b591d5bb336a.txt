;; This is a function that will calculate the nth Fibonacci number using a recursive approach

(defun fibonacci (n)
  "This function takes a number n and returns the nth Fibonacci number."
  (if (or (zerop n) (= n 1))
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))
      )
)

;; This is a function that will take in a list and return the list in reverse order

(defun reverse (lst)
  "This function takes in a list and returns the list in reverse order."
  (if (null lst)
      nil
      (append (reverse (cdr lst)) (list (car lst)))
      )
)

;; This is a function that will check if a given number is prime or not

(defun prime-check (n)
  "This function takes in a number n and checks if it is a prime number."
  (labels 
    ((is-divisible (x y)
       (if (equal x y)
           nil
           (or (zerop (mod x y)) (is-divisible x (+ y 1)))
           )))
    (if (<= n 1)
        nil
        (not (is-divisible n 2)))
    )
)

;; Usage:

(fibonacci 10) ;; Output: 55
(reverse '(1 2 3 4 5)) ;; Output: (5 4 3 2 1)
(prime-check 17) ;; Output: T (17 is a prime number)