;;; Example code snippet in Common Lisp

(defstruct (person (:type list))
  "A structure representing a person"
  name
  age
  gender)

(defun make-person (name age gender)
  "Create a new person with the given attributes"
  (make-person :name name :age age :gender gender))

(defun get-name (person)
  "Get the name of the person"
  (person-name person))

(defun set-name (person name)
  "Set the name of the person"
  (setf (person-name person) name))

(defun get-age (person)
  "Get the age of the person"
  (person-age person))

(defun set-age (person age)
  "Set the age of the person"
  (setf (person-age person) age))

(defun get-gender (person)
  "Get the gender of the person"
  (person-gender person))

(defun set-gender (person gender)
  "Set the gender of the person"
  (setf (person-gender person) gender))

;;; An example of using the person structure and functions

(let ((john (make-person "John" 25 :male)))
  (set-name john "John Doe")
  (set-age john 30)
  (set-gender john :other)
  (format t "Hello, my name is ~A and I am ~A years old. I identify as ~A."
          (get-name john) (get-age john) (get-gender john)))