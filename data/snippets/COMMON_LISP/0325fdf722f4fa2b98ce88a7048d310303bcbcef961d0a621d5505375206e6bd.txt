(defun iterative-quick-sort (list)
  "This function implements an iterative version of the quick sort algorithm for sorting a list of integers.
  
  **Input:**
  - `list`: a list of integers to be sorted
  
  **Output:**
  - a sorted list in ascending order
  
  **Assumptions:**
  - The input list contains only integers
  
  **Example:**
  - Input: (3 7 2 1 4)
  - Output: (1 2 3 4 7)"
  (let ((stack (list list))
        (sorted '())
        (pivot-function (lambda (list)
                          (list (first list))
                          (setf (rest list) (remove-if (lambda (x) (>= x (first list))) (rest list))))))
    (loop until (null stack)
          do
          (setf x (first stack)
                stack (rest stack))
          (cond
            ((null x) nil)
            ((null (rest x)) (push (first x) sorted))
            (t
             (push (funcall pivot-function x) stack)
             (push (funcall pivot-function x) stack))))
    sorted))