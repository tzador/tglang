;; Function to calculate the factorial of a number
(defun factorial (n)
  (if (= n 0) 1 ; if n is 0, return 1 
    (* n (factorial (- n 1))) ; else calculate the factorial using recursion
  )
)

;; Define a list of numbers
(setq numbers (list 1 2 3 4 5))

;; Apply the factorial function to each number in the list using the mapcar function
(mapcar #'factorial numbers) ; => (1 2 6 24 120)

;; Function to concatenate two strings using recursion
(defun string-concat (str1 str2)
  (if (string= str1 "") ; base case, if str1 is empty, return str2
    str2
    (string-append (string_sub str1 0 1) (string-concat (string_sub str1 1) str2)) ; else concatenate first character of str1 with recursive call on remaining string and str2
  )
)

;; Define two strings
(setq str1 "Hello")
(setq str2 "World")

;; Call string-concat function
(string-concat str1 str2) ; => "HelloWorld"