;; Define a function that takes in two parameters
(defun concatenate (list1 list2)
  ;; Initialize an empty list to store the concatenated list
  (let ((concatenated-list '())
	;; Define a recursive helper function to iterate through list2
	(defun helper (list1 list2)
	  ;; Base case: if list1 is empty, append list2 to the concatenated list
	  (when (null list1)
	    (setf concatenated-list (append concatenated-list list2)))
	  ;; Recursive case: append the first element of list1 to the concatenated list and call helper on the rest of list1 and list2
	  (setf concatenated-list (append concatenated-list (list (first list1))))
	  (helper (rest list1) list2))
	;; Call the helper function
	(helper list1 list2)
	;; Return the concatenated list
	(concatenated-list)))) ; Output: '(1 2 3 4 5)