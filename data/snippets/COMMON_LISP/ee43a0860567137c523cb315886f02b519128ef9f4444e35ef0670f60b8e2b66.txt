(defstruct person                       ; Defines a structure for a person
  name                                  ; Field: name
  age)                                  ; Field: age

(defun get-person-info (person)         ; Function to get information about a person
  "Returns a string with the person's name and age"  ; Documentation string
  (format nil "Name: ~a, Age: ~a" (name person) (age person)))  ; Format string to display information

(setf person1 (make-person :name "John" :age 25))   ; Creates a person named John who is 25 years old
(setf person2 (make-person :name "Jane" :age 30))   ; Creates a person named Jane who is 30 years old

(with-open-file (file "person_info.txt" :direction :output :if-exists :supersede)  ; Opens a file for writing
  (format file "~a~%~a" (get-person-info person1) (get-person-info person2)))      ; Writes the person information to the file, each on a new line

(with-open-file (file "person_info.txt" :direction :input)          ; Opens the file for reading
  (loop for line = (read-line file nil nil) while line             ; Reads each line in the file
    collect (list (parse-characters (first line)) (second line)))) ; Converts the string to a list of characters and prints it

; Output:
; ((#\N #a #m #e #\Space #\Colon #\Space #\J #o #h #n) "Age: 25")
; ((#\N #a #m #e #\Space #\Colon #\Space #\J #a #n #e) "Age: 30")