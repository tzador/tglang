(defstruct person         ; Define a structure named 'person'
  (name "")              ; With a field 'name' set to an empty string
  (age 0)                ; And a field 'age' set to 0
  (likes '()))            ; And a field 'likes' set to an empty list
  
;;; Function to add a like to a person's 'likes' field
(defun add-like (person like)
  (cond ((null person) '())                      ; If the person does not exist, return an empty list
        ((null (person-likes person))             ; If person's 'likes' field is empty
         (setf (person-likes person) (list like))) ; Set it to be a list with 'like'
        (t (push like (person-likes person)))     ; Otherwise, push 'like' to the front of the list
        person))                                  ; Return the updated person structure

;;; Function to remove a like from a person's 'likes' field
(defun remove-like (person like)
  (setf (person-likes person) (remove like (person-likes person))) ; Use 'remove' to remove 'like' from the list
  person)                                                          ; Return the updated person structure

;;; Example usage of the 'add-like' and 'remove-like' functions
(let ((person (make-person :name "Jane" :age 25)))  ; Create a person with name "Jane" and age 25
  (print person)                                    ; Print the person object
  (setf person (add-like person "hiking"))           ; Add "hiking" to the person's 'likes' field
  (print person)                                    ; Print the updated person object
  (setf person (add-like person "coffee"))           ; Add "coffee" to the person's 'likes' field
  (print person)                                    ; Print the updated person object
  (setf person (remove-like person "hiking"))        ; Remove "hiking" from the person's 'likes' field
  (print person))                                   ; Print the updated person object
  
;;; Output:
#S(PERSON :NAME "Jane" :AGE 25 :LIKES NIL)
#S(PERSON :NAME "Jane" :AGE 25 :LIKES ("hiking"))
#S(PERSON :NAME "Jane" :AGE 25 :LIKES ("coffee" "hiking"))
#S(PERSON :NAME "Jane" :AGE 25 :LIKES ("coffee"))