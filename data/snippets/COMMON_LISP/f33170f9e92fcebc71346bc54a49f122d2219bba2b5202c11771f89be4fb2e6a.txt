(defun bubble-sort (input-list) ; Define a function called "bubble-sort" that takes in a list as its input
  (let ((n (length input-list))) ; Create a variable "n" to store the length of the input list
    (do ((i 0 (+ i 1))) ; Start a do-loop, with the variable "i" initialized to 0 and incremented by 1 in each iteration
        ((>= i (- n 1))) ; Set the condition for the loop to end, when "i" reaches the length of the list minus 1
      (do ((j 0 (+ j 1))) ; Start a nested do-loop, with the variable "j" initialized to 0 and incremented by 1 in each iteration
          ((>= j (- n i 1))) ; Set the condition for the nested loop to end, when "j" reaches the length of the unsorted portion of the list minus 1
        (if (> (nth j input-list) (nth (+ j 1) input-list)) ; Check if the value at index "j" in the list is greater than the value at the next index in the list
          (rotatef (nth j input-list) (nth (+ j 1) input-list)) ; If true, swap the two values using "rotatef"
          (progn nil))))) ; If false, do nothing and continue with the loop
  input-list) ; Return the sorted list