(defun merge-sort (list)
  "Sorts the list in ascending order using the merge sort algorithm."
  (if (<= (length list) 1)
      list
      (progn
        (let ((mid (ceiling (length list) 2))) ; divides the list into two parts
          (merge (merge-sort (subseq list 0 mid)) ; sorts the first half
                 (merge-sort (subseq list mid)) ; sorts the second half
                )))))

(defun merge (left right)
  (if (not (listp left))
      (cons left right) ; handles case when left is a single element
      (if (not (listp right))
          (cons right left) ; handles case when right is a single element
          (let ((result '())
                (current t))
            (loop ; iterates through both lists until one is exhausted
               while (and left right)
               do (if (> (car left) (car right)) ; compare first element of each list
                      (progn
                        (push (car right) result) ; pushes the smaller element onto the result list
                        (setq right (cdr right)))  ; moves to next element in right list
                      (progn
                        (push (car left) result) ; pushes the smaller element onto the result list
                        (setq left (cdr left))))) ; moves to next element in left list
          (if left ; checks if there are any remaining elements in left list
              (nconc left result) ; appends them to the result list
              (if right ; checks if there are any remaining elements in right list
                  (nconc right result)))))) ; appends them to the result list