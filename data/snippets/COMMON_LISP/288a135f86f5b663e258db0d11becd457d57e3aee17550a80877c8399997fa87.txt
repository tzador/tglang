;; Define a class called "Animal"
(defclass Animal ()
  ;; Define two slots for the animal's name and sound
  (name :accessor name
        :initarg :name
        :initform nil)
  (sound :accessor sound
         :initarg :sound
         :initform nil)
  
  ;; Define a constructor function for the class
  (let ((animal-name (make-instance 'Animal :name "Bob" :sound "Meow")))
    (print (format nil "My name is ~a and I say ~a." (name animal-name) (sound animal-name)))
  ; Output: My name is Bob and I say Meow.
  
  ;; Define a method for the animal to make a sound
  (defmethod make-sound ((animal Animal))
    (format t "~a says ~a.~%" (name animal) (sound animal)))
  
  ;; Create a new instance of an animal and assign it a name and sound
  (defparameter *lion* (make-instance 'Animal :name "Leo" :sound "Roar"))
  
  ;; Call the make-sound method on the lion instance
  (make-sound *lion*)
  ; Output: Leo says Roar.
  
  ;; Inheritance: define a subclass "Cat" which inherits from "Animal"
  (defclass Cat (Animal)
    ;; Add an additional slot for the cat's color
    (color :accessor color
           :initarg :color
           :initform nil)
    ;; Override the make-sound method for cats
    (defmethod make-sound ((cat Cat))
      (format t "The ~a cat ~a says ~a.~%" (color cat) (name cat) (sound cat)))
  )
  
  ;; Create a new instance of cat and assign it a name, sound, and color
  (defparameter *jellybean* (make-instance 'Cat :name "Jellybean" :sound "Purr" :color "black"))
  
  ;; Call the make-sound method on the jellybean instance
  (make-sound *jellybean*)
  ; Output: The black cat Jellybean says Purr.
  
) ; End of class definition