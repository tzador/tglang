; Define a function that returns the nth Fibonacci number
(defun fib (n)
  (if (or (= n 1) (= n 2)) ; Base cases
      1
      (+ (fib (- n 1)) (fib (- n 2))))) ; Recursive calls
  
; Define a list of Fibonacci numbers up to the nth term
(defun fibonacci-list (n)
  (let ((fib-list '(1 1))) ; Create a list with first two terms
    (dotimes (i (- n 2)) ; Loop n-2 times to add remaining terms
      (setq fib-list (append fib-list (list (+ (car (last fib-list)) ; Add new term to list
                                               (cadr (last fib-list))))))
      (incf i)) ; Increment i to keep track of iterations
    fib-list)) ; Return the list of Fibonacci numbers
    
; Define a function that checks if a number is prime
(defun prime? (n)
  (cond
   ((or (= n 1) (= n 2)) t) ; 1 and 2 are special cases, always prime
   ((and (eql n 0) (eql n 1)) nil) ; 0 and 1 are not prime
   ((evenp n) nil) ; Even numbers (except 2) are not prime
   (t ; Loop through odd numbers up to sqrt(n)
    (dotimes (i (floor (sqrt n)) 2)
      (when (eql (mod n i) 0)
        (return nil))) ; Return nil if n is divisible by any number
    t))) ; Otherwise, return true (n is prime)
    
; Generate a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm
(defun sieve (limit)
  (let ((nums (loop for i from 2 to limit collect i))) ; Create a list of numbers up to limit
    (dolist (n nums)
      (when (prime? n) ; Check if number is prime
        (dolist (m nums)
          (when (and (/= m n) (eql (mod m n) 0))
            (setq nums (delete m nums))))) ; Delete multiples of prime number from list
        (incf i))) ; Increment i to keep track of iterations
    nums)) ; Return list of remaining numbers (prime numbers)

; Test the function by printing the first 20 Fibonacci numbers and prime numbers up to 50
(print (fibonacci-list 20))
(print (sieve 50))