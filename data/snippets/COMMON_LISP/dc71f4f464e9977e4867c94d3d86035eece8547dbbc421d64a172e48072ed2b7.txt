;; This code snippet implements quick-sort algorithm in Common Lisp
(defun quick-sort (list)
  "Function to sort a given list using quick-sort algorithm"
  (if (null list) list ;; if the list is empty, return it
    ;; Else, create the recursive calls to divide the list into smaller parts
    (let ((pivot (first list))) ;; set the pivot to the first element in the list
      (append ;; concatenate the results of the following expressions
        (quick-sort (remove-if #'(lambda (x) (>= x pivot)) ;; sort all the elements that are less than the pivot
                                (rest list))) ;; rest of the original list
        (list pivot) ;; append the pivot to separate the two partitions
        (quick-sort (remove-if #'(lambda (x) (< x pivot)) ;; sort all the elements that are greater than the pivot
                                (rest list))))))) ;; rest of the original list