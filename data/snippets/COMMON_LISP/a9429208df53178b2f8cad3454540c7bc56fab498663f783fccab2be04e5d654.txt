;; Define a function to calculate the factorial of a number
(defun factorial (n)
  (if (= n 0)             ; If n is 0, return 1
      1
      (* n (factorial (- n 1))))) ; Otherwise, multiply n with factorial of n-1

;; Define a function to find the nth Fibonacci number
(defun nth-fib (n)
  (if (or (= n 1) (= n 2)) ; If n is 1 or 2, return n
      n
      (+ (nth-fib (- n 1)) (nth-fib (- n 2))))) ; Otherwise, return sum of (n-1)th and (n-2)th Fibonacci number

;; Define a function to find the first n palindrome numbers
(defun palindrome-numbers (n)
  (labels ((is-palindrome (x) ; Inner function to check if a number is a palindrome
             (equal (string x) (string (reverse x)))))
    (loop for i from 1 to n do ; Loop from 1 to n
          (if (is-palindrome i) ; If i is a palindrome, print it
              (print i)))))

;; Define a list of numbers
(setq num-list '(5 6 7 8 9 10))

;; Define a function to find the sum of all even numbers in a list
(defun sum-of-even (lst)
  (reduce #'+
          (remove-if-not #'evenp lst))) ; Remove all odd numbers, and sum the remaining even numbers

;; Define a hash table with names and ages
(setq hash (make-hash-table :test #'equal))
;; Add values to the hash table
(setf (gethash "John" hash) 25)
(setf (gethash "Jane" hash) 30)

;; Define a function to find the average age of all the individuals in the hash table
(defun average-age (hash)
  (let* ((values (hash-table-values hash))
         (sum (reduce #'+ values)) ; Find the sum of all ages
         (count (hash-table-count hash))) ; Count the number of individuals
    (/ sum count))) ; Divide the sum by the count to find the average age