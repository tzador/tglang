;; Define a function that calculates the square of a number
   (defun square (x)
      (* x x)
   )

   ;; Call the function and store the result in a variable
   (let ((num 5))
     (setf result (square num))
   )

   ;; Print the result
   (print result)

   ;; Define a list of numbers
   (defparameter numbers '(1 2 3 4 5))

   ;; Map the function to the list of numbers
   (mapcar #'square numbers)

   ;; Print the updated list
   (print numbers)

   ;; Use recursion to calculate the factorial of a number
   (defun factorial (n)
      (if (<= n 1)
         1
         (* n (factorial (- n 1)))
      )
   )

   ;; Call the function and store the result in a variable
   (let ((num 4))
     (setf result (factorial num))
   )

   ;; Print the result
   (print result)

   ;; Define a lambda function that adds two numbers
   (lambda (x y)
      (+ x y)
   )

   ;; Call the lambda function with arguments
   (funcall (lambda (x y) (+ x y)) 3 2)

   ;; Create a function that takes in a string and returns a reversed version
   (defun reverse-string (str)
      (loop for i from (1- (length str)) downto 0 collecting (elt str i))
   )

   ;; Call the function and store the result in a variable
   (let ((str "hello"))
     (setf result (reverse-string str))
   )

   ;; Print the result
   (print result)