;;; This function takes in a list of numbers and returns the product of all the elements in the list.
 
(defun product-of-list (list) ;;; Defining the function with one parameter, list
    (if (null list) ;;; Checks if the list is empty
        1 ;;; Base case, returns 1 if the list is empty
        (* (car list) (product-of-list (cdr list))))) ;;; Recursive case, multiplies the first element of the list with the product of the rest of the list
 
(print (product-of-list '(5 2 3 4))) ;;; Function call with a sample list and prints the result
 
; Output: 120
 
;;; This function checks if a given number is prime or not.
 
(defun is-prime (n) ;;; Defining the function with one parameter, n
    (cond ;;; Using conditional statements
        ((<= n 1) nil) ;;; Base case, returns false if n is less than or equal to 1
        ((= n 2) t) ;;; Base case, returns true if n is 2
        ((evenp n) nil) ;;; Checks if n is an even number, returns false if it is
        (t ;;; If none of the above conditions are met, then check for divisibility by odd numbers from 3 to the square root of n
            (do ((i 3 (+ i 2))) ((> i (sqrt n)) t)
                (if (= (mod n i) 0) (return-from is-prime nil)))))) ;;; Returns false if n is divisible by any odd number
 
(print (is-prime 17)) ;;; Function call with a sample number and prints the result
 
; Output: T