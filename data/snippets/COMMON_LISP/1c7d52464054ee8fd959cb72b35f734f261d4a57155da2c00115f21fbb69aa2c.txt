;; Define a factorial function using recursion
(defun factorial (n)
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

;; Define a function to find the sum of squares of a list of numbers
(defun sum-of-squares (list)
  (if (null list)
      0
      (+ (* (car list) (car list)) (sum-of-squares (cdr list)))))

;; Define a function to check if a number is prime
(defun is-prime (n)
  (labels ((is-divisible-by (x)
             (if (< x 2)
                 nil
                 (or (= (mod n x) 0) (is-divisible-by (- x 1)))))) ; Using labels to define a helper function
    (and (< n 2) t)) ; All numbers less than 2 are not prime, so we return false
  (not (is-divisible-by (- n 1)))) ; Otherwise, check if n is divisible by any number less than n-1

;; Define a function to find the nth Fibonacci number
(defun fibonacci (n)
  (labels ((fib-helper (n prev curr)
             (if (= n 0)
                 curr
                 (fib-helper (- n 1) curr (+ prev curr))))) ; Using labels to define a helper function
    (fib-helper n 0 1))) ; Starting with 0 and 1 as the first two Fibonacci numbers, recursively find the nth number

;; Define a function to reverse a string using recursion
(defun reverse-string (str)
  (if (<= (length str) 1)
      str
      (concatenate 'string (reverse-string (substring str 1)) (substring str 0 1))))) ; Recursively concatenate the reverse of the substring starting at index 1 with the first character of the string

;; Define a function to sort a list of numbers using mergesort
(defun mergesort (list)
  (if (null list)
      ()
      (if (null (cdr list))
          list
          (let ((mid (floor (/ (length list) 2)))) ; Find the midpoint of the list
            (merge (mergesort (subseq list 0 mid)) (mergesort (subseq list mid))) ; Merge the sorted left and right halves of the list
            ))))