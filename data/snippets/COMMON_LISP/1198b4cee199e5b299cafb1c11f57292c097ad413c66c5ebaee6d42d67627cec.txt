(let ((x 5)       ; declaring and initializing a variable 'x' with value 5
      (y 10))     ; declaring and initializing another variable 'y' with value 10
  (when (> x y)   ; using the 'when' conditional to check if 'x' is greater than 'y'
    (when (< x 15) ; nested 'when' conditional to check if 'x' is less than 15
      (format t "x is greater than y and less than 15") ; if both conditions are met, print the message
      (setf y 20)) ; set the value of 'y' to 20
  (unless (> x y) ; using the 'unless' conditional to check if 'x' is not greater than 'y'
    (format t "x is either smaller than or equal to y") ; if condition is not met, print the message
    (setf y (- x 2)))) ; set the value of 'y' to the difference of 'x' and 2.