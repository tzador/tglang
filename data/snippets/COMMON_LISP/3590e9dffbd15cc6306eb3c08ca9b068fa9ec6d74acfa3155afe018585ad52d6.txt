(defun quicksort (list &optional (predicate #'<))   ; An optional predicate argument for sorting different data types
  (if (null list)                                  ; If the list is empty, return an empty list
      nil
      (let* ((pivot (car list))                     ; Set the pivot value to be the first element of the list
             (rest  (cdr list))                     ; Set the rest of the list as the remaining elements
             (less  (remove-if-not #'(lambda (x) (funcall predicate x pivot)) rest)) ; Create a new list of elements less than the pivot
             (more  (remove-if #'(lambda (x) (funcall predicate pivot x)) rest))) ; Create a new list of elements greater than the pivot
        (append (quicksort less predicate)         ; Recursively call quicksort on the less list
                (list pivot)                       ; Add the pivot to the end of the sorted less list
                (quicksort more predicate)))))     ; Recursively call quicksort on the more list and append it to the sorted list