;; Define a function that calculates the factorial of a number
(defun factorial (n)
  "Calculates the factorial of the given number n."
  (if (= n 0)
      1
    (* n (factorial (- n 1)))))
    
;; Define a function that finds the nth Fibonacci number
(defun fibonacci (n)
  "Finds the nth Fibonacci number."
  (if (or (= n 1) (= n 2)) ;; Fibonacci numbers start with 1 and 1
      1
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ;; Recursively add previous two Fibonacci numbers

;; Define a list of numbers
(setq numbers '(1 2 3 4 5 6 7 8 9))

;; Define a function that multiplies each element in the list by 2
(defun multiply-by-two (lst)
  "Multiplies each element in the given list by 2."
  (mapcar #'(lambda (x) (* x 2)) lst)) ;; mapcar applies the function to each element in the list and returns a new list with the results

;; Call the factorial function with the number 5 and print the result
(format t "Factorial of 5: ~a" (factorial 5))

;; Call the fibonacci function with the number 10 and print the result
(format t "Fibonacci number at position 10: ~a" (fibonacci 10))

;; Call the multiply-by-two function on the list of numbers and print the result
(format t "List multiplied by two: ~a" (multiply-by-two numbers))