(defun factorial (x) ; Defines a function called 'factorial' with a single parameter 'x'
  (if (= x 0) ; If 'x' is equal to 0, return 1
    1
    (* x (factorial (- x 1))) ; Else recursively call 'factorial' on 'x - 1' and multiply with 'x'
  )
)

(format t "Enter a number: ") ; Outputs a string asking for user input
(let ((input (read))) ; Defines a local variable 'input' and sets its value to user input
  (let ((result (factorial input))) ; Defines another local variable 'result' and calls 'factorial' on 'input'
    (format t "Factorial of ~A is ~A~%" input result) ; Outputs a string with calculated factorial value
  )
)