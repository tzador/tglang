(defun merge-sort (list)   ;; Define a function called `merge-sort` that takes a list as input
  "Sorts a list of numbers in ascending order using the merge sort algorithm."
  (if (null list)         ;; If the list is empty, return the empty list
      list)
  (let ((length (length list))       ;; Define a variable `length` that stores the length of the list
        (middle (/ length 2)))       ;; Define a variable `middle` that stores the middle index of the list
    (if (eq 0 middle)             ;; If the middle index is 0, return the list
        list)
    (let ((left (subseq list 0 middle))     ;; Define a variable `left` that stores the first half of the list
          (right (subseq list middle)))     ;; Define a variable `right` that stores the second half of the list
      (merge (merge-sort left) (merge-sort right))))))   ;; Recursively call `merge-sort` on `left` and `right` and merge the results

(defun merge (a b)        ;; Define a function `merge` that takes two lists `a` and `b` as input
  "Merges two sorted lists into a single sorted list."
  (if (null a)       
      b)                  ;; If `a` is empty, return `b`
  (if (null b)
      a)                  ;; If `b` is empty, return `a`
  (let ((result nil)      ;; Define a variable `result` that will store the merged list
        (i 0)             ;; Define a counter `i` initialized to 0
        (j 0))            ;; Define a counter `j` initialized to 0
    (loop while (< i (length a))             ;; Loop through `a` until `i` reaches the end of the list
      for x = (nth i a)   ;; Define `x` as the current element at index `i` in `a`
      do (loop while (and (< j (length b)) (<= x (nth j b)))            ;; Loop through `b` while `j` is less than the length of `b` and `x` is less than the current element at index `j` in `b`
           do (setf result (append result (list (nth j b))))           ;; Append the current element at index `j` in `b` to `result`
           do (incf j))     ;; Increment `j`
      do (setf result (append result (list x)))     ;; After looping through `b`, append `x` to `result`
      do (incf i)))        ;; Increment `i`
    (append result (subseq b j))))     ;; Append the remaining elements in `b` from index `j` to the end of `b` to `result`