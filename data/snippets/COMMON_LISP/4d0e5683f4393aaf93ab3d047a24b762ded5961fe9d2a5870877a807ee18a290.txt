;; Define the function 'multiply_matrix' that takes two matrices as arguments
(defun multiply_matrix (matrix1 matrix2)
  ;; Declare variables for the number of rows and columns in the first matrix
  (let ((row1 (length matrix1))
        (col1 (length (first matrix1))))
    ;; Declare variables for the number of rows and columns in the second matrix
    (let ((row2 (length matrix2))
          (col2 (length (first matrix2))))
      ;; Check if the number of columns in the first matrix is equal to the number of rows in the second matrix
      ;; If not, return an error
      (if (not (= col1 row2))
          (error "Cannot multiply matrices, incorrect dimensions"))
      ;; Initialize a new empty matrix to store the result
      (let ((result (make-array (list row1 col2) :initial-element 0)))
        ;; Iterate through the rows of the first matrix
        (dotimes (i row1)
          ;; Iterate through the columns of the second matrix
          (dotimes (j col2)
            ;; Initialize a variable to store the sum of the products of elements in each position
            (let ((sum 0))
              ;; Iterate through the elements in the row of the first matrix
              (dotimes (k col1)
                ;; Multiply the element in the first matrix with the element in the corresponding column of the second matrix
                ;; And add it to the sum
                (setf sum (+ sum (* (aref matrix1 i k) (aref matrix2 k j)))))
              ;; Set the value of the corresponding element in the result matrix to the calculated sum
              (setf (aref result i j) sum))))
        ;; Return the resulting matrix
        result))))