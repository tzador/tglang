;; Function to calculate the n-th term of the Fibonacci sequence
(defun nth-fibonacci (n)
  (if (< n 2)          ; if n is less than 2
      1                ; return 1
      (+ (nth-fibonacci (- n 1))  ; else, return the sum of the n-1th and n-2th term
         (nth-fibonacci (- n 2)))))

;; Function to calculate the factorial of a number
(defun factorial (n)
  (if (= n 0)    ; if n is equal to 0
      1          ; return 1
      (* n (factorial (- n 1)))))  ; else, return the product of n and the factorial of n-1

;; Define a list of numbers
(defvar numbers '(1 2 3 4 5))

;; Function to square a number
(defun square (n)
  (* n n))

;; Function to filter only even numbers in a list
(defun filter-even (lst)
  (cond ((null lst) nil)         ; if list is empty, return nil
        ((evenp (car lst))       ; else if head of list is even
         (cons (car lst) (filter-even (cdr lst))))    ; add head to filtered list
        (t (filter-even (cdr lst)))))  ; else, continue recursively with the rest of the list

;; Map the square function to the filtered list of even numbers
(mapcar #'square (filter-even numbers))