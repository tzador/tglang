(defun quicksort (list)
  "A recursive quicksort function to sort a list of integers in ascending order."
  (if (<= (length list) 1)
      list
      (let ((pivot (car list)))
        (append (quicksort (remove-if #'(lambda (x) (<= x pivot)) (cdr list)))
                (list pivot)
                (quicksort (remove-if #'(lambda (x) (> x pivot)) (cdr list)))
        )
      )
  )
)

; Code Explanation:
;
; In this snippet, we define a function called quicksort which takes in a list of integers as its parameter.
; The first line in the function's body is a condition statement, which checks if the length of the list is less than or equal to 1.
; If it is, then the list is returned as it is already sorted.
; If the length is greater than 1, then we move on to the next line.
; Here, we use the let keyword to bind the variable pivot to the first element in the list.
; Next, we use the append function to merge three lists together:
; 1. The result of quicksort on the elements in the original list that are less than or equal to the pivot.
; 2. The pivot itself.
; 3. The result of quicksort on the elements in the original list that are greater than the pivot.
; This effectively partitions the list based on the pivot and then merges them back together in a sorted fashion.
; The functions remove-if and lambda are used to filter out elements based on a given condition, which is specified in the lambda function.
; Finally, the result of quicksort is returned.
; This code snippet showcases the use of recursion and higher-order functions in Common Lisp to implement a common sorting algorithm.