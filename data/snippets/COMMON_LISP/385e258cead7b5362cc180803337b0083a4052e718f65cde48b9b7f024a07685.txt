(defstruct PERSON                   ; Define a structure named 'PERSON'
  (name "John")                     ; Initialize 'name' slot with default value "John"
  (age 30)                          ; Initialize 'age' slot with default value 30
  (address "123 Maple Street")      ; Initialize 'address' slot with default value "123 Maple Street"
  (occupation "Software Developer") ; Initialize 'occupation' slot with default value "Software Developer"
  (has_car nil))                    ; Initialize 'has_car' slot with default value nil

(defun get-age (person)                         ; Define a function named 'get-age' that takes a 'person' as a parameter
  "Returns the age of the given person."         ; Documentation string for the function
  (age person))                                  ; Return the value of the 'age' slot of the given 'person' 

(defparameter *my-person* (make-PERSON           ; Define a global variable named '*my-person*' and initialize it with a newly created 'PERSON' structure
                          :name "Jane"           ; Override the default value for 'name' slot with "Jane"
                          :age 25                ; Override the default value for 'age' slot with 25
                          :address "456 Main St" ; Override the default value for 'address' slot with "456 Main St"
                          :has_car t))           ; Override the default value for 'has_car' slot with t (true)

(format t "My name is ~A and I am ~A years old.~%"     ; Print to the standard output with a format string that includes placeholders for the values of our variables
        (name *my-person*)                             ; Retrieve the value of 'name' slot from the '*my-person*' structure and pass it to the format string
        (get-age *my-person*))                         ; Call the 'get-age' function with '*my-person*' as the argument and pass the return value to the format string