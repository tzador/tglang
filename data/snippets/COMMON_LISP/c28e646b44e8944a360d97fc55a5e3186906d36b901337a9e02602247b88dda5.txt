(defun filter (pred lst &key (true 'remove))
  "Returns a list of all items from lst that evaluate to true under pred."
  (cond
    ((null lst) nil)
    ((apply pred (list (first lst))) ; apply pred on first item of list
      (if (eq true 'remove) ; check if true is set to 'remove
      (filter ; recursively call filter on rest of list
        pred
        (rest lst)
        :true true)
      (cons (first lst) ; add first item to list and
        (filter ; recursively call filter on rest of list
          pred
          (rest lst)
          :true true))))
    (t (if (eq true 'remove) ; if true is set to 'remove
          (filter ; recursively call filter on rest of list
            pred
            (rest lst)
            :true true)
          (cons (first lst) ; add first item to list and
            (filter ; recursively call filter on rest of list
              pred
              (rest lst)
              :true true))))))