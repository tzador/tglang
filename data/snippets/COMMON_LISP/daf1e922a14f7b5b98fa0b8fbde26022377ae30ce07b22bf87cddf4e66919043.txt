;; This is a function that performs a binary search on a sorted list
(defun binary-search (list item)
       (let ((length (length list))
             (low 0)
             (high (- length 1))
             (mid 0))
         ;; If the list is empty, return NIL
         (if (= length 0)
             (return-from binary-search nil))
         ;; If the list has only one element, check if it is the item
         (if (= length 1)
             (if (= item (nth 0 list))
                 ;; Return the index of the element if it is found
                 (return-from binary-search 0)
                 ;; Otherwise, return NIL
                 (return-from binary-search nil)))
         ;; While the low index is less than or equal to the high index
         (while (<= low high)
                ;; Calculate the mid index
                (setf mid (truncate (+ low high) 2))
                ;; If the middle element is equal to the item, return the index
                (if (= item (nth mid list))
                    (return-from binary-search mid)
                    ;; If the item is less than the middle element, search the left half
                    (if (< item (nth mid list))
                        (setf high (1- mid))
                        ;; If the item is greater than the middle element, search the right half
                        (setf low (1+ mid)))))
        ;; If the item is not found, return NIL
        (return-from binary-search nil)))