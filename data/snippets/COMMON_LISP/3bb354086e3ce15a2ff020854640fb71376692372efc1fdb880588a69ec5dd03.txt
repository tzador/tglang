(defun power-set (set)
 "This function takes a set as an argument and generates its power set."
  (if (null set) 
      (list nil)
    (let ((rest (power-set (cdr set))))
      (append rest (loop for s in rest collect (cons (car set) s))))))
    
(defun print-string (string)
 "This function takes in a string as an argument and prints it."
  (format t "~a~%" string))
  
(defun sum-list (list)
 "This function takes in a list of numbers and returns the sum of the elements."
  (reduce #'+ list))

(defun fibonacci (n)
 "This function takes in a number n and returns the nth term in the Fibonacci sequence."
  (if (or (= n 1) (= n 2))
      1
    (+ (fibonacci (- n 2)) (fibonacci (- n 1)))))

(defun merge-sort (list)
 "This function takes in a list of integers and sorts them using the merge sort algorithm."
  (if (<= (length list) 1)
      list
    (let ((middle (/ (length list) 2)))
      (merge (merge-sort (subseq list 0 middle))
             (merge-sort (subseq list middle))))))

(defun factorial (n)
 "This function takes in a number n and returns its factorial."
  (if (<= n 1)
      1
    (* n (factorial (- n 1)))))