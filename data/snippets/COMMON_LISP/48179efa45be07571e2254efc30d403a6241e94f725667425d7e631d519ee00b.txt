;;; This function recursively finds the nth number in the Fibonacci sequence, starting from 0
(defun fibonacci (n)
  (cond ((= n 0) 0)                       ;if n is 0, then return 0
        ((= n 1) 1)                       ;if n is 1, then return 1
        (t (+ (fibonacci (- n 1))         ;otherwise, calculate the sum of 
              (fibonacci (- n 2))))))     ;the previous two numbers in the sequence

;;; This function calculates the factorial of a given number
(defun factorial (n)
  (if (= n 0)                            ;if n is equal to 0
      1                                   ;then return 1
      (* n (factorial (- n 1)))))         ;otherwise, calculate n multiplied by 
                                          ;the factorial of (n-1)

;;; This function implements a simple bubble sort algorithm on a given list of numbers
(defun bubble-sort (lst)
  (let ((len (length lst))
        (sorted '()))                     ;initialize an empty list to hold sorted elements
    (loop for i from 0 to (- len 1)       ;repeat the steps below for each element in the list
          do (loop for j from 0 to (- len i 2) ;loop through the unsorted elements from the beginning
                   do (if (> (nth (+ j 1) lst) (nth j lst)) ;if the next element is larger than 
                                                            ;the current one, swap them
                             (rotatef (nth j lst) (nth (+ j 1) lst))))
             finally (push (nth i lst) sorted))  ;once an element is in its correct sorted position, 
                                                ;add it to the sorted list
    (reverse sorted)))                          ;reverse the sorted list to get it in ascending order