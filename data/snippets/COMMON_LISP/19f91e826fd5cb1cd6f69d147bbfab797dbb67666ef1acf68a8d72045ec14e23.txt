(defparameter *list* '(1 "two" 3.0))  ; defining a global variable with a list of data types
(defun calculate-sum (list)   ; defining a function that takes in a list parameter
  (let ((sum 0))   ; using a local variable to keep track of the sum
    (dolist (x list sum)   ; iterating through the list using a head pointer
      (cond   ; conditional branching based on data type
        ((numberp x) (incf sum x))   ; if element is a number, increment sum by its value
        ((stringp x) (incf sum (parse-integer x)))   ; if element is a string, parse it as an integer and add to sum
        (t (print "Invalid list type."))))))   ; if element is not a number or string, print error message
(calculate-sum *list*)   ; calling the function with the global variable as argument and printing the result