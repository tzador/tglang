;; We begin by defining a function that takes in two parameters and outputs their sum.
(defun add (num1 num2)  ; Defines a function called "add" that takes in two parameters, "num1" and "num2".
  (+ num1 num2))        ; Uses the "+" operator to add the two parameters together and return the result.

;; Next, we call the function and store the result in a variable.
(let ((sum (add 5 10))) ; Defines a local variable "sum" and calls the "add" function with parameters 5 and 10.
  (format t "The sum is ~d" sum)) ; Prints the result using the "format" function and the "~d" format directive.

;; We can also create a recursive function that calculates the factorial of a given number.
(defun factorial (n) ; Defines a function called "factorial" that takes in one parameter, "n".
  (if (= n 0)        ; Checks if n equals 0. If it does, return 1.
      1
      (* n (factorial (- n 1))))) ; Recursively multiplies n with the factorial of n-1.

;; Finally, we call the factorial function with a number and print the result.
(let ((result (factorial 6))) ; Defines a local variable "result" and calls the "factorial" function with parameter 6.
  (format t "The factorial of 6 is ~d" result)) ; Prints the result using the "format" function and the "~d" format directive.