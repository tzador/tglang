;; This is a comment
(setf input-list '(3 7 9 2 6)) ;; Input list of numbers
(defun quicksort (list) ;; Function to perform quicksort
  (if (eql (length list) 0) ;; If the list is empty
      nil ;; Return nil
      (let ((pivot (car list)) ;; Set pivot to first element
            (smaller) ;; Initialize empty list for smaller elements
            (larger)) ;; Initialize empty list for larger elements
        (dolist (elem (cdr list)) ;; Loop through the rest of the list
          (if (<= elem pivot) ;; If element is less than or equal to pivot
              (setq smaller (cons elem smaller)) ;; Add to smaller list
              (setq larger (cons elem larger)))) ;; Otherwise, add to larger list
        (append (quicksort smaller) ;; Recursively call quicksort on smaller list
                (list pivot) ;; Append pivot to sorted list
                (quicksort larger))))) ;; Recursively call quicksort on larger list
(quicksort input-list) ;; Call quicksort function on input list, returns sorted list