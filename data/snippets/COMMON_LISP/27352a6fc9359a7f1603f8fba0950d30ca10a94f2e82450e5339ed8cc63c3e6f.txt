(defun fib (n)                      ; define a function named fib
  (labels ((fib-aux (n a b)          ; define a local function named fib-aux
             (if (= n 0)             ; check if n equals zero
                 a                    ; if yes, return a
                 (fib-aux (- n 1) b (+ a b)))))
                                     ; otherwise, call fib-aux recursively with n-1 and the sum of a and b
    (fib-aux n 0 1)))                ; call fib-aux with initial values of n, a, and b


(defun pow (x n)                     ; define a function named pow
  (if (= n 0)                        ; check if n equals zero
      1                               ; if yes, return 1
      (* x (pow x (- n 1)))))         ; otherwise, return x times the result of calling pow recursively with x and n-1


(defun factorial (n)                 ; define a function named factorial
  (if (= n 0)                        ; check if n equals zero
      1                               ; if yes, return 1
      (* n (factorial (- n 1)))))     ; otherwise, return n times the result of calling factorial recursively with n-1


(format t "Enter a number: ")        ; prompt the user for input
(let ((num (read)))                  ; read the user's input and store it in a local variable num
  (format t "Fibonacci of ~a: ~a~%"   ; print a formatted string to the console
          num (fib num)))             ; with num and the result of calling the fib function passing in num as the argument

(format t "Enter a base: ")          ; prompt the user for input
(let ((base (read)))                  ; read the user's input and store it in a local variable base
  (format t "Enter an exponent: ")    ; prompt the user for input
  (let ((exp (read)))                 ; read the user's input and store it in a local variable exp
    (format t "Power of ~a raised to ~a: ~a~%"  ; print a formatted string to the console
            base exp (pow base exp)))))         ; with base, exp, and the result of calling pow with base and exp as the arguments


(format t "Enter a number: ")        ; prompt the user for input
(let ((num (read)))                  ; read the user's input and store it in a local variable num
  (format t "Factorial of ~a: ~a~%"   ; print a formatted string to the console
          num (factorial num))))      ; with num and the result of calling the factorial function passing in num as the argument