;;;; Defining a class with slots and methods
(defclass automobile ()                           ; Defines the class 'automobile'
  ((make :initarg :make                            ; Defines the slot 'make' with the initarg ':make'
         :accessor auto-make)                      ; Defines the accessor 'auto-make' for the 'make' slot
   (model :initarg :model                          ; Defines the slot 'model' with the initarg ':model'
          :accessor auto-model)                    ; Defines the accessor 'auto-model' for the 'model' slot
   (year :initarg :year                            ; Defines the slot 'year' with the initarg ':year'
         :accessor auto-year))                     ; Defines the accessor 'auto-year' for the 'year' slot

;;;; Defining a method for the class
(defmethod show-details ((auto automobile))              ; Defines a method 'show-details' that takes an 'automobile' object as a parameter
  (format t "Make: ~a~%Model: ~a~%Year: ~a"             ; Formats and prints the details of the automobile object
          (auto-make auto) (auto-model auto) (auto-year auto)))

;;;; Creating an instance of the class and calling the method
(defvar my-car (make-instance 'automobile :make "Toyota" :model "Corolla" :year "2020"))     ; Creates an instance 'my-car' of the class 'automobile'
(show-details my-car)                                                                         ; Calls the method 'show-details' using the 'my-car' instance