(defun build-tree (value &optional lft nil rght) ;define a function with one required parameter and two optional parameters
  (list value lft nil rght)) ;create a list with four elements, the first is the value and the last three are set to nil

(defun insert-node (value tree) ;define a function with two required parameters
  (cond ;begin a conditional statement
    ((null tree) (list value nil nil)) ;if the tree is null, create a new tree with the inserted value and two nil values for child nodes
    ((< value (car tree)) (cons (car tree) (cons (insert-node value (cadr tree)) (cddr tree)))) ;if the value is less than the value of the current node, recursively insert the value in the left subtree
    (t (cons (car tree) (cons (cadr tree) (insert-node value (cddr tree))))))) ;if the value is greater than or equal to the value of the current node, insert the value in the right subtree