;;;;;;;;;;;
;;; Sets ;;;
;;;;;;;;;;;

;;;;;
;;;; Define a set datatype
;;;;;

; Creates a new table with a list of elements as its contents
(defstruct set
  elements)


;;;;;
;;;; Add elements to a set
;;;;;

; Takes in a set and any number of elements, and returns a new set with the added elements
(defun add-elements (set &rest elements)
  (set-elements set
    (append (set-elements set) elements)))


;;;;;
;;;; Remove elements from a set
;;;;;

; Takes in a set and any number of elements, and returns a new set with the elements removed
(defun remove-elements (set &rest elements)
  (set-elements set (set-difference (set-elements set) elements)))


;;;;;
;;;; Check if set contains element
;;;;;

; Takes in a set and an element, and returns T if the element is in the set, NIL otherwise
(defun contains-element? (set element)
  (member element (set-elements set) :test #'equal))


;;;;;
;;;; Set operations - union
;;;;;

; Takes in multiple sets and returns a new set with all the elements from all the sets
; The resulting set will not contain duplicate elements
(defun union-sets (&rest sets)
  (apply #'add-elements (make-set) (mapcan #'set-elements sets)))


;;;;;
;;;; Set operations - intersection
;;;;;

; Takes in multiple sets and returns a new set with only the elements that are in all of the sets
(defun intersection-sets (&rest sets)
  (apply #'remove-elements (make-set) (mapcar #'set-complement (apply #'union-sets sets))))


;;;;;
;;;; Set operations - difference
;;;;;

; Takes in two sets and returns a new set with elements from the first set that are not in the second set
(defun difference-sets (set1 set2)
  (remove-elements set1 (set-elements set2)))


;;;;;
;;;; Set operations - complement
;;;;;

; Takes in a set and returns a new set with all the elements that are not in the original set
(defun set-complement (set)
  (difference-sets (make-set) set))


;;;;;
;;;; Set operations - subset
;;;;;

; Takes in two sets and returns T if all the elements from the first set are also in the second set, NIL otherwise
(defun is-subset? (set1 set2)
  (subsetp (set-elements set1) (set-elements set2)))


;;;;;
;;;; Set operations - superset
;;;;;

; Takes in two sets and returns T if all the elements from the second set are also in the first set, NIL otherwise
(defun is-superset? (set1 set2)
  (is-subset? set2 set1))


;;;;;
;;;; Set operations - equal
;;;;;

; Takes in two sets and returns T if they contain the same elements, regardless of order, NIL otherwise
(defun are-equal? (set1 set2)
  (and (is-subset? set1 set2) (is-superset? set1 set2)))


;;;;;;;;;;;;
;;; Lists ;;;
;;;;;;;;;;;;

;;;;;
;;;; List to set
;;;;;

; Takes in a list and returns a set with the same elements
(defun list->set (list)
  (apply #'add-elements (make-set) list))


;;;;;
;;;; Set to list
;;;;;

; Takes in a set and returns a list with the same elements
(defun set->list (set)
  (set-elements set))


;;;;;
;;;; Remove duplicates
;;;;;

; Takes in a list and returns a list with duplicate elements removed
(defun remove-duplicates (list)
  (set->list (list->set list)))


;;;;;
;;;; Check if list contains element
;;;;;

; Takes in a list and an element, and returns T if the element is in the list, NIL otherwise
(defun list-contains-element? (list element)
  (member element list :test #'equal))