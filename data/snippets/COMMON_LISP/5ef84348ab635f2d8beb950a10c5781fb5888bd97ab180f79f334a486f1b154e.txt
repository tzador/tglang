;;; Function that recursively computes the nth Fibonacci number
;;; Takes in an integer n as input and returns the nth Fibonacci number
;;; Uses memoization to optimize for efficiency

(in-package :CL-USER) ; set the current package to CL-USER

;;; Define a global variable *FIB-MEMO* to store previously calculated Fibonacci numbers
(defparameter *FIB-MEMO* (list 0 1)) ; initialize with base cases for n=0 and n=1

;;; Define a function to calculate the nth Fibonacci number
(defun fib (n)
  (if (< n (length *FIB-MEMO*)) ; if the nth Fibonacci number has already been calculated
      (nth n *FIB-MEMO*) ; retrieve it from *FIB-MEMO*
      (let ((res (+ (fib (- n 1)) (fib (- n 2))))) ; otherwise, recursively calculate the nth Fibonacci number
        (when (< n (length *FIB-MEMO*)) ; if *FIB-MEMO* has been updated while recursively computing the nth Fibonacci number
          (setf (nth n *FIB-MEMO*) res)) ; update *FIB-MEMO* to avoid duplicate calculations
        res)))

;;; Example usage
(fib 6) ; expected output: 8 (0, 1, 1, 2, 3, 5, 8)