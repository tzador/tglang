;; This is a function that takes in two lists as parameters and returns the sorted merged list
(defun merge-sort (list1 list2)
  (cond ((null list1) list2)
        ((null list2) list1)
        ((<= (car list1) (car list2))
         (cons (car list1) (merge-sort (cdr list1) list2)))
        (t (cons (car list2) (merge-sort list1 (cdr list2)))) )


;; This is a helper function that splits a list into two sub-lists
(defun split-list (list &optional (size (/ (length list) 2)))
  (cond ((<= size 1) (values list nil))
        (t (multiple-value-bind (first second) (split-list (cdr list) (- size 1))
             (values (cons (car list) first) second)))))

;; Example usage of merge-sort function
(merge-sort '(5 3 7 1 2) '(6 4 8))
;; Output: (1 2 3 4 5 6 7 8)