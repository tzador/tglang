(defun accumulate (sequence function &key (initial-value nil) (from-end nil) (start 0) (end (length sequence)))
  "Returns the result of successively applying the binary function to the accumulated result so far and next item in the sequence.
  Key arguments include:
  - INITIAL-VALUE    : (Optional) The initial value to start the accumulation with. Default is nil.
  - FROM-END        : (Optional) If set to true, the accumulation will start from the end of the sequence. Default is false.
  - START            : (Optional) The index of the sequence to start the accumulation at. Default is 0.
  - END              : (Optional) The index of the sequence to end the accumulation at. Default is the length of the sequence.
  "
  (let ((result initial-value) (index start))
    (if from-end 
        (decf index (length sequence)))
    (loop while (< index end)
          do (setf result (funcall function result (nth index sequence)))
          if from-end 
          do (decf index)
          else 
          do (incf index))
    result))