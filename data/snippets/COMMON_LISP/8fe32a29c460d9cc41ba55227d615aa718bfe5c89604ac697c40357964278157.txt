;; Function to filter a list using a binary predicate
(defun filter (predicate list)
  (cond
    ;; Check if list is empty
    ((null list) nil)
    
    ;; If predicate evaluates to true for the current element
    ;; add it to the filtered list and continue recursive call
    ((funcall predicate (first list))
      (cons (first list) (filter predicate (rest list))))
    
    ;; Otherwise, continue recursive call without adding element
    (t (filter predicate (rest list)))))
    
;; Example usage
;; Filter even numbers out of a list
(filter #'evenp '(1 2 3 4 5)) ;; => (2 4)