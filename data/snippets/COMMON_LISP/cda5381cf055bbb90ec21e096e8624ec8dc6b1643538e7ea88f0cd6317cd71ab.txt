;;; Defining a class Employee and its subclasses

(defclass Employee ()
  ((name :accessor name :initarg :name)
   (salary :accessor salary :initarg :salary)
   (birthdate :accessor birthdate :initarg :birthdate)))

(defclass Engineer (employee)
  ((supervisor :accessor supervisor :initarg :supervisor)
   (projects :accessor projects :initarg :projects)
   (programming-languages :accessor programming-languages :initform '(:java :python :c++))
   (certifications :accessor certifications :initform nil)))

(defclass Manager (employee)
  ((subordinates :accessor subordinates :initarg :subordinates)
   (bonus :accessor bonus :initform 0)))

(defmethod print-employee (employee)
  (format t "Name: ~a~%Salary: ~a~%Birthdate: ~a"
          (name employee)
          (salary employee)
          (birthdate employee)))

(defmethod print-engineer ((engineer engineer))
  (format t "Name: ~a~%Salary: ~a~%Birthdate: ~a~%Supervisor: ~a~%Projects: ~a~%Programming Languages: ~a~%Certifications: ~a"
          (name engineer)
          (salary engineer)
          (birthdate engineer)
          (supervisor engineer)
          (projects engineer)
          (programming-languages engineer)
          (certifications engineer)))

(defmethod print-manager ((manager manager))
  (format t "Name: ~a~%Salary: ~a~%Birthdate: ~a~%Subordinates: ~a~%Bonus: ~a"
          (name manager)
          (salary manager)
          (birthdate manager)
          (subordinates manager)
          (bonus manager)))

;;; Creating instances of Engineer and Manager classes and printing their information

(let ((engineer (make-instance 'engineer :name "John Doe" :salary 80000 :birthdate "01/01/1985" :supervisor "Jane Smith" :projects '("Project A" "Project B") :certifications '("Java Certified" "Python Certified")))
      (manager (make-instance 'manager :name "Jane Smith" :salary 100000 :birthdate "01/01/1975" :subordinates '("John Doe" "Mary Williams") :bonus 5000)))
  (print-engineer engineer)
  (print-manager manager))