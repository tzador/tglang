;; Define a function that checks if a given number is a perfect number.
(defun is-perfect (n)
  "Checks if a number is a perfect number by finding all its factors and
  summing them up. Returns a boolean value."
  (if (< n 1)
      (error "Invalid number: must be greater than 0.")
      (let ((factors (list 1))) ;initialize list with 1 (all numbers are divisible by 1)
        (loop for i from 2 to (floor (sqrt n)) do ;loop through all numbers between 2 and square root of n
          (if (= (mod n i) 0) ;if n is divisible by the current number
              (progn ;add both the number and its quotient to the factors list
                (push i factors)
                (push (/ n i) factors)))
          (if (= (- i 1) (floor (sqrt n))) ;check if n is a perfect square
              (push (floor (sqrt n)) factors))) 
        (= (reduce #'+ factors) n)))) ;if the sum of all factors is equal to n, return true, else return false

;; Usage:
(is-perfect 28) ;returns true because 1 + 2 + 4 + 7 + 14 = 28, and 28 is a perfect number

;; Output: