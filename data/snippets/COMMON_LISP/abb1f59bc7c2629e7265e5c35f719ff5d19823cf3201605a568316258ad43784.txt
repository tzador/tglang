;; Define a function to calculate the factorial of a number
(defun factorial (n)
  "Calculates the factorial of n"
  (if (= n 0) 1 (* n (factorial (- n 1)))))

;; Define a function to calculate the nth prime number
(defun prime (n)
  "Calculates the nth prime number"
  (let ((primes '(2))) ;; List of known primes, starting with 2
    (dotimes (i n) ;; Loop n times
      (let ((candidate (+ (car (last primes)) 1))) ;; Next number to check for primality
        (loop ;; Check if candidate is prime
          for prime in primes ;; Loop through known primes
          unless (zerop (mod candidate prime)) ;; If candidate is divisible by prime, skip to next prime
          do (push candidate primes) ;; If not divisible, add candidate to list of primes
          and do (return))
        (setf primes (reverse primes))))) ;; Reverse list of primes to get in ascending order
  (car (last primes))) ;; Return the last prime number in the list

;; Define a function to calculate the product of a list of numbers
(defun list-product (list)
  "Calculates the product of a list of numbers"
  (reduce #'* list))

;; Define a function to calculate the sum of the squares of a list of numbers
(defun sum-of-squares (list)
  "Calculates the sum of the squares of a list of numbers"
  (reduce #'+ (mapcar (lambda (x) (* x x)) list)))

;; Define a function to calculate the difference between two sets
(defun set-difference (set1 set2)
  "Calculates the difference between two sets"
  (remove-if #'(lambda (x) (member x set2)) set1))

;; Example usage
(print (factorial 5)) ;; Output: 120
(print (prime 100)) ;; Output: 541
(print (list-product '(1 2 3 4 5))) ;; Output: 120
(print (sum-of-squares '(1 2 3 4 5))) ;; Output: 55
(print (set-difference '(1 2 3 4) '(2 3 5))) ;; Output: (1 4)