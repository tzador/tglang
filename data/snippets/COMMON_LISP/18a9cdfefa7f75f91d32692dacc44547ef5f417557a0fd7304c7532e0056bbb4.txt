;; This code snippet is a function that finds the nth prime number using the Sieve of Eratosthenes algorithm
;; It takes in a positive integer n as the input and returns the nth prime number as the output
(defun nth-prime (n)
  "Returns the nth prime number"
  (let ((sieve (make-array n :initial-element t))) ; creates a new array with n elements, all initialized to true
    (loop for i from 2 to (sqrt n) do ; loop from 2 to the square root of n
      (when (aref sieve i)  ; if the element at index i is true
        (dotimes (j (/ (- n i 2) i)) ; loop through indexes at multiples of i, starting at i+2 and going up to n-1
          (setf (aref sieve (+ i (* j i))) nil)))) ; set those indexes to false
    (let ((count 0)) ; initialize count variable to 0
      (loop for i from 2 below n do ; loop through all elements in sieve except the first element (index 0)
        (when (aref sieve i)  ; if the element at index i is true
          (incf count)) ; increment count by 1
        (when (= count n) ; when count reaches n
          (return i)))))) ; return the prime number at index i