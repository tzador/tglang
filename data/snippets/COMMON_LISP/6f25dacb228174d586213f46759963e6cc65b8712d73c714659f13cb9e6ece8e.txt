;;;; Sorting Algorithms in Common Lisp

;; Function to swap two elements in a list
(defun swap (x y arr)             ; an additional parameter arr is used to mutate the list in-place
  (let ((temp (nth x arr)))        ; store the value of element x in temp variable
    (setf (nth x arr) (nth y arr)) ; replace value of x with value of y
    (setf (nth y arr) temp)))      ; replace value of y with value of temp

;; Bubble Sort Algorithm
(defun bubble-sort (arr)
  (dolist (i (butlast arr))                         ; loop over the list, ignoring the last element (already sorted)
    (dolist (j (butlast arr i))                     ; loop over the sublist, ignoring the last i elements (already sorted)
      (when (> (nth j arr) (nth (1+ j) arr))        ; if the current element is bigger than the next one
        (swap j (1+ j) arr))))                      ; swap the elements

;; Insertion Sort Algorithm
(defun insertion-sort (arr)
  (loop for i from 1                              ; start from the second element 
        for j = i then (1- j)
        while (> (nth j arr) (nth (1- j) arr))    ; compare the element to the one before it
        do (swap j (1- j) arr)))                  ; swap the two elements if necessary
  nil)                                            ; return nil since insertion sort is in-place and does not create a new list

;; Merge Sort Algorithm
(defun merge (l1 l2)
  (if (endp l1) l2               ; if l1 is empty return l2
    (if (endp l2) l1             ; if l2 is empty return l1
      (if (< (first l1) (first l2))        ; if the first element of l1 is smaller
        (cons (pop l1) (merge l1 l2))      ; add it to the merged list and call the merge function recursively on the rest of l1 and l2
        (cons (pop l2) (merge l1 l2))))))  ; otherwise, do the same for l2 and l1

(defun merge-sort (arr)
  (let ((l1 (butlast arr)))
    (let ((l2 (last arr)))
      (if (or (endp l1) (endp l2))     ; if the list has 1 or 0 elements
        arr
        (let ((half (floor (/ (length arr) 2)))) ; find the halfway point
          (merge (merge-sort (subseq arr 0 half)) ; call merge-sort recursively on the first half of the list
                 (merge-sort (subseq arr half)))))))) ; call merge-sort recursively on the second half of the list