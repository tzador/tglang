; This is a comment
(setf initial-value 10) ; Assigns the value 10 to the variable 'initial-value'
(equal initial-value 10) ; Checks if 'initial-value' is equal to 10 (returns true)
(if (equal initial-value 10) ; If the condition is true, prints 'Equal to 10'
(print "Equal to 10")
(print "Not equal to 10")) ; If the condition is false, prints 'Not equal to 10'
(loop for x from 1 to 10 ; Loops from 1 to 10, printing the value of x each time
do (print x))
(defun factorial(n) ; Defines a function called 'factorial' that takes a parameter 'n'
(if (<= n 1) ; Checks if 'n' is less than or equal to 1
1 ; If true, returns 1 (base case)
(* n (factorial (- n 1)))) ; If false, recursively calls 'factorial' with 'n-1'
(factorial 5) ; Calls the function with the value 5 (returns 120, the factorial of 5)