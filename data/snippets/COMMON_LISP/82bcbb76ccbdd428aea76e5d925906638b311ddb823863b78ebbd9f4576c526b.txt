;;; Functions for computing the nth Fibonacci number
(defun fib-iter (n)
  "Iterative implementation of calculating the nth Fibonacci number"
  (let ((a 0) (b 1) (i 0))
    (loop while (< i n) do
      (setq i (+ i 1))
      (setq a b)
      (setq b (+ a b)))
    a))

(defun fib-rec (n)
  "Recursive implementation of calculating the nth Fibonacci number"
  (if (or (= n 0) (= n 1)) 
    n
    (+ (fib-rec (- n 1)) (fib-rec (- n 2)))))

(defun fib-memo (n)
  "Memoized implementation of calculating the nth Fibonacci number"
  (let ((cache (make-hash-table)))
    (labels ((memo (n)
               (or (gethash n cache)
                   (let ((result (if (or (= n 0) (= n 1)) n
                                 (+ (memo (- n 1)) (memo (- n 2))))))
                     (setf (gethash n cache) result)
                     result))))
      (memo n))))

;; Example usage:
(fib-iter 10) ; Computes the 10th Fibonacci number using iterative method
(fib-rec 10) ; Computes the 10th Fibonacci number using recursive method
(fib-memo 10) ; Computes the 10th Fibonacci number using memoization