;;; An implementation of the quicksort algorithm in Common Lisp

;; Define a function to partition a list
(defun partition (list left right)
    ;; Set the pivot as the first element of the list
    (let ((pivot (first list)))
        ;; Loop over the list and compare each element to the pivot
        (loop for i from left to right
              ;; If the current element is less than the pivot, swap it with the element on the left
              when (<= (nth i list) pivot)
              do (setf (nth i list) (nth (1+ left) list)
                       (nth (1+ left) list) (nth i list)
                       left (1+ left))
              finally
                ;; When the loop is finished, swap the pivot with the element on the left
                (setf (nth left list) pivot))
        ;; Return the index of the pivot
        left))

;; Define a function to perform the quicksort algorithm
(defun quicksort (list start end)
    ;; If the list has more than one element
    (when (< start end)
        ;; Partition the list and get the index of the pivot
        (multiple-value-bind (pivot-index) (partition list start end)
            ;; Sort the elements to the left of the pivot
            (quicksort list start (- pivot-index 1))
            ;; Sort the elements to the right of the pivot
            (quicksort list (+ pivot-index 1) end)))
    ;; Return the sorted list
    list)

;; Test the quicksort function
(quicksort '(5 2 9 7 3 1 8 4 6) 0 8) ;=> (1 2 3 4 5 6 7 8 9)