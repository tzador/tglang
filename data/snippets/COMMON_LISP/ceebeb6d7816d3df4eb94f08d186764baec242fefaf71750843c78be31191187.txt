(defmacro if-let (var then &optional else-expr) ; Define a macro function called `if-let` that takes in a variable, the "then" expression, and an optional "else" expression.
  (let ((tmp (gensym)))  ; In the `let` block, generate a symbol using the `gensym` function and bind it to a variable called `tmp`.
    `(let ((,tmp ,var)) ; Use the backquote syntax to evaluate the expression within the parentheses. In this case, create a `let` block, binding `tmp` to the value of the given variable.
       (if ,tmp ; Use the `if` conditional statement, evaluating `tmp` as the condition.
           ,then ; If the condition evaluates to true, return the "then" expression.
           ,else-expr)))) ; If the condition evaluates to false, return the "else" expression (or `nil` if no "else" expression was provided).