(defun levenshtein-distance (string1 string2)
  "Function to calculate the Levenshtein distance between two strings"

  (let ((m (length string1)) (n (length string2))) ; set m as length of string1 and n as length of string2
    (if (zerop m) n) ; if string1 is empty, return length of string2
    (if (zerop n) m) ; if string2 is empty, return length of string1
    (let ((distance-matrix (make-array (list (1+ m) (1+ n)) :initial-element 0))) ; create a distance matrix with size (m+1)x(n+1) and initial value of 0
      ;; fill the first row and column of distance matrix with increasing numbers starting from 0
      (dotimes (i m)
        (setf (aref distance-matrix i 0) i))
      (dotimes (j n)
        (setf (aref distance-matrix 0 j) j))
	  ;; loop through each character of string1 and string2
      (dotimes (i m)
        (dotimes (j n)
          (let ((cost (if (char= (char string1 i) (char string2 j)) 0 1))) ; set cost to 0 if characters at i-th position of string1 and j-th position of string2 are the same, otherwise set cost to 1
            ;; get the minimum of the three values: top-left, top, and left
            (setf (aref distance-matrix (1+ i) (1+ j)) (min (+ (aref distance-matrix i j) cost) ; top-left value + cost
                                                           (+ (aref distance-matrix i (1+ j)) 1) ; top value + 1
                                                           (+ (aref distance-matrix (1+ i) j) 1))))))) ;left value + 1
      (aref distance-matrix m n)))) ; return the value at the bottom-right corner of distance matrix, which is the Levenshtein distance between string1 and string2

;; Example usage:
(levenshtein-distance "kitten" "sitting") ; returns 3