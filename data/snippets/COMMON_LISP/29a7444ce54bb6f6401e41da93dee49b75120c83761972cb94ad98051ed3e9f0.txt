;; Define a function that takes in a list and a function as parameters
(defun map-function (list function)

    ;; Create an empty list to store output
    (let ((result '()))

        ;; Loop through the input list
        (dolist (x list)

            ;; Apply the given function to each element
            (setf result (cons (funcall function x) result))))

        ;; Reverse the result list to match the original input list
        (reverse result)))

;; Define a list of numbers 
(defvar numbers '(1 2 3 4 5))

;; Define a function to add 1 to a given number
(defun add-one (x)
    (+ x 1))

;; Call the map-function with the list and add-one function as arguments
(map-function numbers #'add-one)

;; Output: (2 3 4 5 6)