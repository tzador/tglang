;; Define a function that takes in two parameters and returns their product
(defun multiply (a b)
  (* a b))
  
;; Define a function that takes in a list and returns the sum of all the numbers in the list
(defun sum-list (list)
  (if (null list) ; check if list is empty
      0  ; if empty, return 0
      (+ (car list) ; otherwise, add the first element of the list to the sum 
         (sum-list (cdr list))))) ; and recursively call the function with the rest of the list
         
;; Define a lambda function that takes in a number and returns its square
(lambda (x) (* x x))

;; Create a vector of numbers
#+BEGIN_SRC common-lisp
#(1 2 3 4 5)
#+END_SRC

;; Define a macro that takes in a list of expressions and prints them in reverse order
(defmacro print-reverse (&rest exprs)
  `(progn
     ,(reverse (reverse (quote exprs))) ; capture and reverse the expressions list
     (dolist (x (reverse (quote exprs))) ; loop through the expressions in reverse order
       (print x)))) ; print each expression