;;===== Sorting Algorithm =====

(defun merge (left right)
  "Merge function
  Takes two lists, left and right
  Returns a single sorted list"
  (if (not left)
      right
      (if (not right)
          left
          (if (< (car left) (car right))
              (cons (car left) (merge (cdr left) right))
              (cons (car right) (merge left (cdr right))))))

(defun mergesort (lst)
  "Merge sort algorithm
  Takes a list, lst
  Returns a sorted list"
  (if (<= (length lst) 1)
      lst
      (let ((left ()))
        (let ((right ()))
          (dotimes (i (truncate (length lst) 2))
            (setq left (append left (list (nth i lst)))))
          (dotimes (i (- (length lst) (truncate (length lst) 2)))
            (setq right (append right (list (nth (+ i (truncate (length lst) 2)) lst)))))
          (merge (mergesort left) (mergesort right))))))