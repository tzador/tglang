;; Define a function to generate a list of Fibonacci numbers
(defun fibonacci (n)  ;; Function name is fibonacci, takes in one argument n
    (if (<= n 1)  ;; Check if n is less than or equal to 1
        (list 0 1)  ;; If yes, return a list containing 0 and 1
        (progn  ;; If no, enter progn block to evaluate multiple expressions
            (let ((a 0)  ;; Create local variable a and assign it to 0
                  (b 1)  ;; Create local variable b and assign it to 1
                  (result nil))  ;; Create local variable result and assign it to nil
                (dotimes (i (- n 1))  ;; Loop n-1 times
                    (setf result (cons (+ a b) result))  ;; Add the sum of a and b to the start of the list result
                    (setf b a)  ;; Update variable b to be equal to a
                    (setf a (car result)))  ;; Update variable a to be equal to the first element of result
                (reverse (cons 0 (cons 1 result))))))  ;; Add 0 and 1 to the start of the list result and reverse it
;; Example usage: (fibonacci 5) => (0 1 1 2 3)