;;; This is a function that calculates the factorial of a given number
;;; Factorial is the product of all numbers from 1 up to n
(defun factorial (n)
  "Calculates the factorial of a number using recursion"
  (if (= n 1)
      1
    (* n (factorial (- n 1)))))

;;; This is a helper function that calculates the power of a number
(defun power (base exp)
  "Calculates the power of a number using recursion"
  (if (= exp 0)
      1
    (* base (power base (- exp 1)))))

;;; This is a function that checks if a given number is prime
(defun is-prime (n)
  "Checks if a given number is prime"
  (cond ((= n 2) t)
        ((<= n 1) nil)
        ((evenp n) nil)
        (t (loop for i from 3 by 2 to (isqrt n)
                 never (zerop (mod n i))))))

;;; This is a function that generates a list of prime numbers up to a given number
;; (Note: requires the 'loop' and 'isqrt' functions from the 'cl' package)
(defun primes-up-to (n)
  "Generates a list of prime numbers up to a given number"
  (remove-if-not #'is-prime (loop for i from 2 to n)))

;;; This is a function that generates a list of all possible subsets of a given list
(defun subsets (lst)
  "Generates a list of all possible subsets of a given list"
  (if (null lst)
      '(())
    (let ((rest (subsets (cdr lst))))
      (append rest (mapcar #'(lambda (x) (cons (car lst) x)) rest)))))

;;; This is a function that calculates the n-th Fibonacci number using memoization
(defvar *fibonacci-table* (vector 0 1))
(defun fibonacci (n)
  "Calculates the n-th Fibonacci number using memoization"
  (if (>= n (length *fibonacci-table*))
      (let ((val (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))
        (setf (aref *fibonacci-table* n) val)
        val)
    (aref *fibonacci-table* n)))

;;; This is a function that checks if a given string is a palindrome
(defun is-palindrome (str)
  "Checks if a given string is a palindrome"
  (equal str (reverse str)))

;;; This is a function that converts a list of numbers to a binary number
(defun list-to-binary (lst)
  "Converts a list of numbers to a binary number"
  (if (null lst)
      0
    (+ (expt 2 (- (length lst) 1)) (* (car lst) (list-to-binary (cdr lst))))))

;;; This is a function that calculates the mean of a list of numbers
(defun mean (lst)
  "Calculates the mean of a list of numbers"
  (/ (reduce #'+ lst) (length lst)))

;;; This is a function that sorts a list of numbers using the quicksort algorithm
(defun quicksort (lst)
  "Sorts a list of numbers using the quicksort algorithm"
  (if (null lst)
      lst
    (let ((pivot (car lst))
          (rest (cdr lst)))
      (append (quicksort (remove-if-not #'(lambda (x) (< x pivot)) rest))
              (list pivot)
              (quicksort (remove-if-not #'(lambda (x) (>= x pivot)) rest))))))

;;; This is a function that formats a string with specified parameters
(defun format-string (str &rest params)
  "Formats a string with specified parameters"
  (apply #'format str params))

;;; This is a function that returns the character frequency of a given string
(defun char-frequency (str)
  "Returns the character frequency of a given string"
  (loop for c across str
        collect (cons c (count c str))))

;;; This is a function that calculates the binomial coefficient of two numbers
(defun binomial-coefficient (n k)
  "Calculates the binomial coefficient of two numbers"
  (cond ((= k 0) 1)
        ((= k n) 1)
        (t (* (/ (factorial n) (factorial k) (factorial (- n k)))))))