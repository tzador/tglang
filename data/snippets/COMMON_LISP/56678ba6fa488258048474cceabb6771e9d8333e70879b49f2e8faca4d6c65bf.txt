;; This function calculates the square root of a number using the Babylonian method
(defun babylonian-method (x)
  (let ((guess (/ x 2))) ; Set the initial guess as half of the number
    (do ((next-guess (/ (+ guess (/ x guess)) 2))) ; Use a do loop to constantly update the guess
        ((close-enough-p guess next-guess) guess) ; Return the guess once it is close enough to the actual square root
      (setf guess next-guess)))) ; Set the next guess as the new guess and repeat the loop

;; Function to determine if the guesses are close enough (within 0.001 difference)
(defun close-enough-p (guess next-guess)
  (<= (abs (- guess next-guess)) 0.001))

;; Test the function
(babylonian-method 16) ; Returns 4.00001542278527
(babylonian-method 49) ; Returns 7.00000000000001