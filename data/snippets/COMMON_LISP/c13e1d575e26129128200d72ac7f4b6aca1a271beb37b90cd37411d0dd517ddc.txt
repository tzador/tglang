;;; Basic functions and macros for manipulating lists

;;; Function to reverse a list
(defun my-reverse (lst)
  "Reverse the order of elements in LST."
  (if (null lst)
      lst
      (append (my-reverse (cdr lst)) (list (car lst)))))
  
;;; Macro to map a function onto a list
(defmacro my-map (fn lst)
  "Map function FN onto list LST."
  `(mapcar ,fn ,lst))

;;; Function to return a list of positive elements
(defun positive-elements (lst)
  "Return a list of positive elements in LST."
  (if (null lst)
      nil
      (if (> (first lst) 0)
          (cons (first lst) (positive-elements (rest lst)))
          (positive-elements (rest lst)))))
          
;;; Macro to implement a do-while loop
(defmacro my-dowhile (condition &body body)
  "Execute BODY while CONDITION is true."
  (let ((loop-var (gensym)))
    `(block nil
       (let (,loop-var)
         (setf ,loop-var t)
         (loop while ,loop-var
               do (progn ,@body)
               while ,condition
               finally (return))))))