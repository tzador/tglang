(defparameter *example-list* '(a b c "hello" (1 2 3)))

;; This is a sample list in Common Lisp, declared as a special variable using `defparameter`.

(defvar *example-hash-table* (make-hash-table :test 'eql :size 50))

;; This is a sample hash table in Common Lisp, declared as a global variable using `defvar`.
;; It is initialized using the `make-hash-table` function, with the arguments `:test 'eql` and `:size 50`.
;; These arguments specify that the hash table should use `eql` as the test function for key equality,
;; and that it should be initially allocated with a size of 50 entries.

(defun example-function (x y)
  (+ x y))

;; This is a sample function in Common Lisp, defined using `defun`.
;; It is called "example-function" and takes two arguments, `x` and `y`.
;; Inside the function body, it adds `x` and `y` together using the `+` function and returns the result.

(let ((sum (example-function 1 2)))
  (format t "The sum of 1 and 2 is ~a" sum))

;; This is an example of using the `let` special form in Common Lisp.
;; It creates a local variable `sum` and initializes it with the result of calling the `example-function` with the arguments 1 and 2.
;; Inside the `format` function, the `t` argument specifies that the output should be sent to the standard output,
;; and the `~a` specifier inserts the value of `sum` into the string for printing.

(defun recursive-function (n)
  (if (zerop n)
      0
      (+ n (recursive-function (1- n)))))

;; This is an example of a recursive function in Common Lisp.
;; It is called "recursive-function" and takes one argument `n`.
;; First, it checks if `n` is equal to 0 using the `zerop` function.
;; If it is, it returns 0.
;; If not, it calls itself with the `n` decreased by 1 and adds the result to `n`.
;; This process continues until `n` reaches 0, recursively adding each number from `n` down to 1.

(loop for i from 1 to 10
  for j from 1 to 10
  collect (* i j))

;; This is an example of using the `loop` macro in Common Lisp.
;; It creates a loop that iterates from 1 to 10 for variables `i` and `j`.
;; Inside the loop, it collects the product of `i` and `j` using the `collect` clause.
;; After the loop finishes, the `collect` clause returns a list containing the products of all the iterations.