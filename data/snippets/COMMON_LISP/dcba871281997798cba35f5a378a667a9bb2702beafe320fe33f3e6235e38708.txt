(defvar *all-people* '()) ; Defines a global variable to hold a list of all individual objects.
 
(defclass person () ; Defines a class called 'person'.
  ((name :initarg :name ; Defines a slot called 'name' with an associated initialization argument.
         :accessor person-name ; Defines an accessor function called 'person-name' to retrieve the value of the slot.
         :initform "John Doe") ; Provides a default value of "John Doe" if no value is given during initialization.
   (age :initarg :age ; Defines a slot called 'age' with an associated initialization argument.
        :accessor person-age ; Defines an accessor function called 'person-age' to retrieve the value of the slot.
        :initform 30) ; Provides a default value of 30 if no value is given during initialization.
   (address :initarg :address ; Defines a slot called 'address' with an associated initialization argument.
                :accessor person-address) ; Defines an accessor function called 'person-address' to retrieve the value of the slot.
   (phone-number :accessor person-phone-number))) ; Defines an accessor function called 'person-phone-number' to retrieve the value of the slot, but no initialization argument is provided.
 
(defmethod print-info ((person person)) ; Defines a method called 'print-info' which takes in a person object as a parameter.
  (format t "Name: ~a~%Age: ~a~%Address: ~a~%Phone Number: ~a~%" ; Prints out the information of the person object in a formatted string.
          (person-name person) (person-age person) (person-address person) (person-phone-number person)))
 
(defun add-person (name age address phone-number) ; Defines a function called 'add-person' which takes in the required information as parameters.
  (let ((new-person (make-instance 'person :name name :age age :address address :phone-number phone-number))) ; Creates a new instance of the 'person' class with the given information.
    (push new-person *all-people*))) ; Adds the new-person instance to the global list of all people.
 
(defmethod delete-person ((person person)) ; Defines a method called 'delete-person' which takes in a person object as a parameter.
  (setf *all-people* (remove person *all-people*))) ; Removes the given person object from the global list of all people.
 
;; Usage:
(add-person "Jane Smith" 25 "123 Main St" "555-1234") ; Adds a new person with the given information.
(add-person "Bob Johnson" 40 "456 Avenue St" "555-4321")
 
(print-info (first *all-people*)) ; Prints out the information of the first person in the global list of all people.
 
(delete-person (first *all-people*)) ; Deletes the first person in the global list of all people.
 
(print-info (first *all-people*)) ; Prints out the information of the new first person in the global list of all people.