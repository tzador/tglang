(defclass person	; Defines a class named "person".
  ()
  (:accessor-modifier :public)	; Sets the accessor modifier to public.
  (:documentation "A class representing a person."))	; Adds documentation for the class.

(defmethod introduce ((p person))	; Defines a method for introducing a person.
  (format t "Hello, my name is ~a." (slot-value p 'name)))	; Prints out the person's name.

(defclass employee	; Defines a subclass of person called "employee".
  (person)	; Inherits from the "person" class.
  ((id :initarg :id	; Creates an initarg for the employee's id.
       :accessor id)	; Sets an accessor for the id.
   (salary :accessor salary)	; Creates an accessor for the employee's salary.
   (manager :accessor manager))	; Sets an accessor for the employee's manager.

(defmethod promote ((e employee) new_salary)	; Defines a method for promoting an employee.
  (setf (slot-value e 'salary) new_salary)	; Sets the employee's salary to the new salary.
  (if (< new_salary 50000)	; Checks if the new salary is less than 50000.
      (setf (slot-value e 'manager) nil)	; Sets the employee's manager to nil.
      (setf (slot-value e 'manager) (input-manager))))	; Sets the employee's manager to the user's input.

(defvar *employees* nil)	; Creates a global variable *employees* to store a list of employees.

(defun add-employee (employee)	; Defines a function for adding an employee to the list.
  (push employee *employees*))	; Pushes the employee into the *employees* list.

(defun list-employees ()	; Defines a function for listing all employees in the list.
  (dolist (e *employees*)	; Loops through each employee in the list.
    (format t "~a~%" e)))	; Prints out the details of each employee.

(let ((bob (make-instance 'employee	; Creates an instance of the employee class.
                    :name "Bob"	; Sets Bob's name.
                    :id 123	; Sets Bob's id.
                    :salary 50000)))	; Sets Bob's salary.
  (add-employee bob)	; Adds Bob to the list of employees.
  (promote bob 60000))	; Promotes Bob to a new salary of 60000.

(list-employees))	; Prints out the list of employees with their updated information.