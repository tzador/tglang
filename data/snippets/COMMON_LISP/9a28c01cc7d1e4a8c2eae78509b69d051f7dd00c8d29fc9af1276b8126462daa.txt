;; Define a function to convert a list of numbers into binary representation
(defun binary-converter (list)
  "Converts a list of numbers to binary representation."
  (if (null list) ; If the list is empty
      nil ; Return nil
      (cons ;; Else, add the first element of the list
       (if (zerop (car list)) ;; If the first element is 0
           0 ;; Add 0 to the result
           1) ;; Otherwise, add 1
       (binary-converter (cdr list))))) ;; Recursively call the function on the rest of the list

;; Define a function to recursively multiply each element of a list by 2
(defun multiply-by-2 (list)
  "Recursively multiplies each element of a list by 2."
  (if (null list) ; If the list is empty
      nil ; Return nil
      (cons ;; Else, add the result of multiplying the first element by 2 to the
       (* 2 (car list)) ;; Recursive call on the rest of the list
       (multiply-by-2 (cdr list))))) ;;

;; Define a function to convert binary representation to decimal
(defun binary-to-decimal (num)
  "Converts binary representation to decimal."
  (if (null num) ; If the binary representation is empty
      0 ; Return 0
      (+ ;; Else, add the result of multiplying the first element by 2 to the
       (car num) ;; Recursive call on the rest of the binary representation
       (binary-to-decimal (cdr num))))) ;;

;; Create a list of numbers to test the functions
(setf num-list '(4 8 2 1))

;; Convert each number in the list to binary representation
(setf binary-list (binary-converter num-list))
(format t "Binary representation of ~A is: ~A~%" num-list binary-list)

;; Multiply each element of the binary list by 2
(setf doubled-list (multiply-by-2 binary-list))
(format t "Double of ~A is: ~A~%" binary-list doubled-list)

;; Convert the binary list back to decimal
(setf decimal (binary-to-decimal doubled-list))
(format t "Decimal representation of ~A binary is: ~A" doubled-list decimal)