(defmacro square (x)
  "A common lisp macro that calculates the square of a given number"
  `(* ,x ,x))    ; backquote operator is used to generate the code instead of evaluating it
  
(defun factorial (n)
  "A common lisp function that calculates the factorial of a given number"
  (cond ((<= n 1) 1)    ; conditional control for base case
        (t (* n (factorial (- n 1))))))    ; recursive call to factorial function
          
(defun multiply (x y)
  "A common lisp function that multiplies two given numbers"
  ;; This is a single line comment in common lisp
  (if (or (zerop x) (zerop y))    ; conditional control for zero input
      0
      (+ x (multiply x (- y 1)))))    ; recursive call to multiply function

(loop for i from 1 to 10    ; loop from 1 to 10
      if (evenp i) collect (* i i)    ; if statement to check if i is even and collect the square of i
      else collect (+ i 1))    ; else statement to collect the next odd number 
                                  
(lambda (x)
  "A common lisp anonymous function that doubles a given number"
  (* x 2))    ; the function body