(defmacro defmemo (func &body body)
  "Memoization of a function by wrapping its call and storing the result in a hash table"
  (let ((table (make-hash-table :test 'equal)))
    (lambda (&rest args)
      (let ((result (gethash args table)))
        (or result
            (setf (gethash args table)
                  (apply func args)))))))
      
(defun fibonacci (n)
  "Function to find the n'th number in the Fibonacci sequence using memoization."
  (let ((memo (defmemo (lambda (n)
                          (cond ((< n 2) n)
                                (t (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))))
    (gethash n memo)))

(fibonacci 5)