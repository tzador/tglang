(defun bubble-sort (list) ; define a function named 'bubble-sort' that takes in a list as a parameter
  (let ((sorted list)) ; create a temporary variable 'sorted' and assign it to the value of 'list'
    (do ((swapped t)) ; do a loop while 'swapped' is true
        ((not swapped) sorted)) ; when 'swapped' becomes false, return the 'sorted' list
      (setf swapped nil) ; set 'swapped' to false
      (mapcon (lambda (x y) ; concatenate the result of applying lambda function to each consecutive element of the list
                (if (> x y) ; if the first element is greater than the second element
                    (progn (setf swapped t) ; set 'swapped' to true
                           (rotatef x y))) ; swap the elements
              sorted (cdr sorted))) ; apply the lambda function to 'sorted' and its rest (2nd to last) element
    sorted)) ; return the final sorted list