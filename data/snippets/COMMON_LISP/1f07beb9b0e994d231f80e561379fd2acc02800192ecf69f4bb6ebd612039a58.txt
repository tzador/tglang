(defun is-prime (n) ; define a function called "is-prime" that takes in an argument "n"
  (labels ((helper (k) ; define a helper function that takes argument "k"
             (cond ((< k 2) (not (zerop n))) ; if k is less than 2 then return true if n is not equal to 0, otherwise return false
                   ((= (rem n k) 0) nil) ; if k divides n with no remainder then return false
                   (t (helper (- k 1)))))) ; otherwise call helper function recursively with k-1
    (helper (- n 1)))) ; call helper function with n-1