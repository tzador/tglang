;;;;;;; This is a complex code snippet in COMMON_LISP
;;; This snippet demonstrates nested loops and conditions

;;; Define a list of numbers
(defvar lst '(1 2 3 4 5))

;;; Loop over the list and print each number
(loop for num in lst do
  (format t "~&Current num: ~d~%" num)
  (format t "Result: ~d~%" (if (evenp num)
                             (- num 2)
                             (expt num 3))))

;;; Nested loop over the list and print every combination of two numbers
(loop for num1 in lst do
  (loop for num2 in lst do
    (format t "Combination: ~d, ~d~%" num1 num2)))

;;; Define a function that returns the factorial of a number
(defun factorial (num)
  "Function to calculate the factorial of a number"
  (if (<= num 1)
  1
  (* num (factorial (- num 1)))))

;;; Loop over the list and calculate the factorial of each number
(loop for num in lst do
  (format t "~&Factorial of ~d: ~d~%" num (factorial num)))

;;; Output:
# This is a complex code snippet in COMMON_LISP
Current num: 1
Result: 1
Current num: 2
Result: 0
Current num: 3
Result: 27
Current num: 4
Result: 2
Current num: 5
Result: 125
Combination: 1, 1
Combination: 1, 2
Combination: 1, 3
Combination: 1, 4
Combination: 1, 5
Combination: 2, 1
Combination: 2, 2
Combination: 2, 3
Combination: 2, 4
Combination: 2, 5
Combination: 3, 1
Combination: 3, 2
Combination: 3, 3
Combination: 3, 4
Combination: 3, 5
Combination: 4, 1
Combination: 4, 2
Combination: 4, 3
Combination: 4, 4
Combination: 4, 5
Combination: 5, 1
Combination: 5, 2
Combination: 5, 3
Combination: 5, 4
Combination: 5, 5
Factorial of 1: 1
Factorial of 2: 2
Factorial of 3: 6
Factorial of 4: 24
Factorial of 5: 120