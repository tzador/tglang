(defun merge-sort (lst compare-fn)
  "Merge sort implementation in common lisp with custom compare function.
   Takes in a list and a comparison function and returns a sorted list."
  (labels ((split (lst)
             "Split a list into two halves."
             (let ((mid (/ (length lst) 2)))
               (values (subseq lst 0 mid)
                       (subseq lst mid)))))
    (if (<= (length lst) 1)
        lst
        (multiple-value-bind (left right) (split lst)
          (merge (merge-sort left compare-fn)
                 (merge-sort right compare-fn)
                 compare-fn)))))

(defun merge (left right compare-fn)
  "Merge two lists in sorted order based on the comparison function."
  (if (null left)
      right
      (if (null right)
          left
          (if (funcall compare-fn (car left) (car right))
              (cons (car left) (merge (cdr left) right compare-fn))
              (cons (car right) (merge left (cdr right) compare-fn))))))