;;;; Function for calculating the factorial of a given number
    (defun factorial (n)                 ;;; Define function 'factorial' with parameter 'n'
      (if (<= n 1)                        ;;; Base case: If n is less than or equal to 1
        1                                 ;;; Return 1
        (* n (factorial (- n 1)))))       ;;; Recursive case: Multiply n with factorial of n-1

;;; Testing the function
    (factorial 5)                        ;;; Returns 120 (5! = 5 * 4 * 3 * 2 * 1 = 120)
    (factorial 10)                       ;;; Returns 3628800 (10! = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 3628800)

;;;; Function for finding the nth element in a list
    (defun nth-element (lst n)            ;;; Define function 'nth-element' with parameters 'lst' and 'n'
      (if (= n 0)                         ;;; Base case: If n is 0, return the first element of the list
        (car lst)                         ;;; Uses 'car' function to retrieve first element
        (nth-element (cdr lst) (- n 1)))) ;;; Recursive case: Calls the function with the rest of the list and n-1

;;; Testing the function
    (nth-element '(1 2 3 4 5) 2)          ;;; Returns 3 (2nd element in the list is 3)
    (nth-element '(2 4 6 8 10) 4)         ;;; Returns 10 (4th element in the list is 10)