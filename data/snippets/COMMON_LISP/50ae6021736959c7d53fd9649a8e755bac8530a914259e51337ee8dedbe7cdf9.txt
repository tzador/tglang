;; This is a code snippet in COMMON_LISP with a complex function that calculates the nth root of a number

(defun nth-root (num n) ; define a function with parameters 'num' and 'n'
  (if (and (numberp num) (numberp n)) ; check if both parameters are numbers
      (if (zerop n) ; check if n is equal to 0
          (return-from nth-root 1) ; if so, return 1 as the result
          (if (minusp num) ; check if num is negative
              (if (oddp n) ; check if n is odd
                  (- (nth-root (- num) n) :complex) ; recursively call the function with absolute value of num and n, and return a complex number
                  :error) ; if n is even, return an error
              (expt num (/ 1 n)))) ; if num is positive, use the expt built-in function to calculate the nth root
      :error)) ; if either parameter is not a number, return an error