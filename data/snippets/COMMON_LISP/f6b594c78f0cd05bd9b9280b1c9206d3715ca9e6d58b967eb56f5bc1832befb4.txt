(defmacro do-twice (func)
  "Macro to execute a function twice"
  `(progn ,func ,func))

(defmacro do-n-times (num func &rest args)
  "Macro to execute a function a specified number of times"
  `(progn
     ,(loop for i from 0 below num collect `(,func ,@args))))

(defun factorial (n)
  "Function to calculate the factorial of a given number"
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

(defun factorial-tail (n &optional (acc 1))
  "Function to calculate the factorial of a given number using tail recursion"
  (if (<= n 1)
      acc
      (factorial-tail (- n 1) (* acc n))))

(defstruct student
  "Structure for a student with first name, last name, and grade"
  first-name
  last-name
  grade)

(defvar *student-list* (list
                        (make-student :first-name "Jane" :last-name "Smith" :grade 9)
                        (make-student :first-name "John" :last-name "Doe" :grade 10)))

(defun find-student (fname lname)
  "Function to find a student in the list by first and last name"
  (find-if (lambda (student)
             (and (string= (student-first-name student) fname)
                  (string= (student-last-name student) lname)))
           *student-list*))

(defun sum-to-n (n)
  "Function to calculate the sum of all numbers from 1 to n"
  (loop for i from 1 to n sum i))