(defun merge-sort (list)
  "Performs a merge sort on the given list."
  (if (null list)
      list
      (merge (merge-sort (first-half list))
        (merge-sort (second-half list)))))

(defun first-half (list)
  "Returns the first half of the given list."
  (if (>= (length list) 2)
      (subseq list 0 (/ (length list) 2))
      list))

(defun second-half (list)
  "Returns the second half of the given list."
  (if (>= (length list) 2)
      (subseq list (/ (length list) 2))
      nil))

(defun merge (list1 list2)
  "Merges two lists in sorted order."
  (setf result '())
  (do ((temp1 list1 (rest temp1))
       (temp2 list2 (rest temp2)))
      ((endp temp1)
        (nconc temp2 result))
      ((endp temp2)
        (nconc temp1 result))
      ((<= (first temp1) (first temp2))
        (push (first temp1) result))
      (t (push (first temp2) result)))
  (reverse result))