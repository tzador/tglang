;;; This is a function that calculates the factorial of a number
;;; Parameter: num - an integer
;;; Output: The factorial of the input number
(defun factorial (num)
  (if (<= num 1)
      1
      (* num (factorial (- num 1)))))
 
;;; This is a function that calculates the nth Fibonacci number
;;; Parameter: n - an integer
;;; Output: The nth Fibonacci number
(defun fibonacci (n)
  (if (or (zerop n)
          (= n 1))
      n
      (+ (fibonacci (- n 1))
         (fibonacci (- n 2)))))
 
;;; This is a recursive function that counts the number of even numbers in a list
;;; Parameter: lst - a list of integers
;;; Output: The number of even numbers in the input list
(defun count-even (lst)
  (if (null lst)
      0
      (if (evenp (first lst))
          (+ 1 (count-even (rest lst)))
          (count-even (rest lst)))))
 
;;; This is a function that checks if a number is prime
;;; Parameter: num - an integer
;;; Output: T if the number is prime, nil otherwise
(defun prime-p (num)
  (if (< num 2)
      nil
      (if (= num 2)
          t
          (do ((i 2 (+ i 1)) (is-prime t))
              ((or (= i num) (not is-prime)) is-prime)
            (setf is-prime (not (zerop (mod num i))))))))