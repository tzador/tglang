;; This is a function that calculates the highest common factor
;; using the Euclidean algorithm
(defun highest-common-factor (a b)
  (let ((remainder (mod a b)))
    (if (zerop remainder)
        b
        (highest-common-factor b  remainder))))

;; This is a recursive function that calculates the nth term
;; in the Fibonacci sequence
(defun fibonacci (n)
  (if (or (zerop n) (= n 1))
      1
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

;; This is a higher-order function that takes in a function and a list
;; and applies the function to each element in the list, returning a new list
(defun map (func lst)
  (if (null lst)
      '()
      (cons (funcall func (car lst)) (map func (cdr lst)))))

;; This function checks if a given number is prime
(defun is-prime (n)
  (or (= n 2)
      (and (> n 1)
           (loop for i from 3 to (isqrt n) by 2
                 never (zerop (mod n i))))))

;; This is a function that implements the bubble sort algorithm
(defun bubble-sort (lst)
  (let ((n (length lst)))
    (loop repeat n
          do (loop for i from 0 to (- n 2)
                   do (when (> (nth i lst) (nth (+ i 1) lst))
                        (rotatef (nth i lst) (nth (+ i 1) lst))))))
  lst)

;; This is a macro that implements a simple if-else statement
(defmacro myif (condition true-expr false-expr)
  `(if ,condition
       ,true-expr
       ,false-expr))

;; This is a structure that defines a car object
(defstruct car
  make
  model
  color
  year)

;; This is a function that creates a new car object
(defun create-car (make model color year)
  (make-car :make make
            :model model
            :color color
            :year year))

;; This is an example of using higher-order functions and structures together
(let ((cars (list (create-car "Toyota" "Corolla" "Red" 2015)
                  (create-car "Honda" "Civic" "Blue" 2018)
                  (create-car "Ford" "Mustang" "Yellow" 2020))))
  (mapcar #'(lambda (car) (format "I drive a ~A ~A ~A made in ~A." (car-make car) (car-model car) (car-color car) (car-year car))) cars)) ;; => ("I drive a Toyota Corolla Red made in 2015." "I drive a Honda Civic Blue made in 2018." "I drive a Ford Mustang Yellow made in 2020.")