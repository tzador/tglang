;; This is a comment.
(defparameter *lucky-numbers* '(7 13 21 42))

(defun get-sum (list)
  "This function takes in a list of numbers and returns the sum."
  (let ((sum 0))
    (loop for num in list do
      (incf sum num))
    sum))

(register-integer 'sum (get-sum *lucky-numbers*))

;; Register-integer function:
;; This function takes in a name and a value and registers it as an integer.
(defun register-integer (name value)
  (register name 'integer)
  (setf (get name) value))

;; Register function:
;; This function takes in a name and type and registers it in the global environment.
(defun register (name type)
  (setf (get name) (make-mystery-object type)))

;; Get function:
;; This function takes in a name and returns the corresponding object from the global environment.
(defun get (name)
  (gethash name *global-env*))

;; Make-mystery-object function:
;; This function takes in a type and returns an object with the given type.
(defun make-mystery-object (type)
  (case type
    ((integer) (eton-integer :value 0))))

;; Eton-integer class:
;; This is a class that represents an integer with an associated value.
(defclass eton-integer ()
  ((value :initarg :value :initform 0 :accessor integer-value)))

;; Loop function:
;; This is a macro that provides looping constructs.
(loop for i from 1 to 5 do
  (format t "~d " i))
;; Output: 1 2 3 4 5

;; Format function:
;; This function takes in a string and prints it to the output stream.
(format t "Hello, world!")
;; Output: Hello, world!