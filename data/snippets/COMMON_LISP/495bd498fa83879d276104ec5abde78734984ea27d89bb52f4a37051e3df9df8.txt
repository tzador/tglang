;;; Definition of a class for a shopping cart
(defclass shopping-cart ()
  ((items :initarg :items
          :type list
          :accessor items)
   (subtotal :initarg :subtotal
             :type number
             :initform 0
             :accessor subtotal)
   (tax-rate :initarg :tax-rate
             :type number
             :initform 0.08
             :reader tax-rate)
   (total :accessor total)))

;;; Method for adding items to the shopping cart
(defmethod add-item ((cart shopping-cart) item)
  (let ((current-items (items cart)))
    (setf (items cart) (cons item current-items))))

;;; Method for removing items from the shopping cart
(defmethod remove-item ((cart shopping-cart) item)
  (setf (items cart) (remove item (items cart))))

;;; Method for calculating the subtotal of the shopping cart
(defmethod calculate-subtotal ((cart shopping-cart))
  (reduce #'+ (items cart) :key #'price))

;;; Method for calculating the total with tax included
(defmethod calculate-total ((cart shopping-cart))
  (* (+ (calculate-subtotal cart) (* (tax-rate cart) (calculate-subtotal cart))) 1.08))

;;; Creating a new shopping cart instance
(defparameter *cart* (make-instance 'shopping-cart
                 :items (list (make-instance 'item :name "Shirt" :price 20)
                              (make-instance 'item :name "Jeans" :price 40)
                              (make-instance 'item :name "Shoes" :price 60))
                 :subtotal 120))

;;; Adding a new item to the shopping cart
(add-item *cart* (make-instance 'item :name "Hoodie" :price 50))

;;; Removing an item from the shopping cart
(remove-item *cart* (make-instance 'item :name "Jeans" :price 40))

;;; Calculating the subtotal of the shopping cart
(calculate-subtotal *cart*)

;;; Calculating the total with tax included
(calculate-total *cart*)