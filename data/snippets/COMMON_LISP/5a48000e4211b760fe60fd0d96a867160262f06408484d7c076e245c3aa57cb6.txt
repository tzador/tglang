(defun merge-sort (lst)                       ; Define function named "merge-sort" with parameter 'lst'
  (if (<= (length lst) 1) lst                  ; If 'lst' only contains 1 element or less, return 'lst' as is
    (let ((mid (floor (/ (length lst) 2))))    ; Create local variable 'mid' containing the midpoint index
      (let ((left (subseq lst 0 mid))          ; Create local variable 'left' containing first half of 'lst'
            (right (subseq lst mid)))         ; Create local variable 'right' containing second half of 'lst'
        (merge (merge-sort left) (merge-sort right))))))    ; Recursively call 'merge-sort' on 'left' and 'right' and pass them to 'merge' function

(defun merge (list1 list2)                     ; Define function named "merge" with parameters 'list1' and 'list2'
  (cond ((null list1) list2)                   ; If 'list1' is empty, return 'list2'
        ((null list2) list1)                   ; If 'list2' is empty, return 'list1'
        ((<= (car list1) (car list2))          ; If the first element of 'list1' is less than or equal to the first element of 'list2'
          (cons (car list1) (merge (cdr list1) list2)))      ; Create a new list with the first element of 'list1' and recursively call 'merge' on the remaining elements and 'list2'
        (t (cons (car list2) (merge list1 (cdr list2))))))   ; Otherwise, create a new list with the first element of 'list2' and recursively call 'merge' on 'list1' and the remaining elements of 'list2'

(merge-sort '(5 2 3 1 4))           ; Example function call with an unsorted list as parameter