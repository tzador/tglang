;; Define a recursive function to calculate the factorial of a number.
(defun factorial (n)
  "This function calculates the factorial of the given number using recursion."
  ;; Base case: when n is 0, return 1
  (if (= n 0) 
    1 
    ;; Recursive case: multiply n with the factorial of (n-1)
    (* n (factorial (- n 1)))))

;; Use the function to calculate the factorial of 5
(factorial 5) ;; Output: 120

;; Define a function to print a list of numbers from 1 to n
(defun print_numbers (n)
  "This function prints the numbers from 1 to the given number."
  ;; Define a helper function to print a list of numbers
  (defun print_list (lst)
    "This helper function prints the elements of a list."
    ;; Base case: when the list is empty, return nil
    (if (null lst) 
      nil 
      ;; Recursive case: print the first element and call the helper function with the rest of the list
      (progn (print (car lst))
             (print_list (cdr lst)))))
  ;; Call the helper function with a list of numbers from 1 to n
  (print_list (loop for i from 1 to n collect i)))

;; Use the function to print a list of numbers from 1 to 10
(print_numbers 10) ;; Output:
;; 1
;; 2
;; 3
;; 4
;; 5
;; 6
;; 7
;; 8
;; 9
;; 10