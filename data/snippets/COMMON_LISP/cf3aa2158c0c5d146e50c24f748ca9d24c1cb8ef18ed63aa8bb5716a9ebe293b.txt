;; define a function that calculates the factorial of a number
(defun factorial (n)
  "Returns the factorial of a given number n"
  (if (<= n 1)
      1 ; base case, factorial of 0 and 1 is 1
    (* n (factorial (- n 1))) ; recursive case
  )
)

;; define a function that calculates the nth term of the Fibonacci sequence
(defun fibonacci (n)
  "Returns the nth term of the Fibonacci sequence"
  (if (< n 2)
      n ; base case, first two terms are 0 and 1
    (+ (fibonacci (- n 1)) (fibonacci (- n 2))) ; recursive case
  )
)

;; define a function that checks if a number is prime
(defun is-prime (n)
  "Returns t if a given number n is prime, otherwise returns nil"
  (when (<= n 3)
    (= n 2))
  (when (and (evenp n) (not (= n 2)))
    nil)
  (let ((i 3)
        (limit (sqrt n)))
    (loop while (<= i limit)
          do (when (= (mod n i) 0)
               (return nil)))
    t)
)