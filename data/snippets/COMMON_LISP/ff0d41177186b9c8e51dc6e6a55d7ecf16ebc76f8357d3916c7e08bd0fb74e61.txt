(defun bubble-sort (list) ; Define a function called "bubble-sort" that takes in a list as an argument
  (let ((sorted (copy-list list)) ; Define a new variable "sorted" and set it equal to a copy of the original list
        (done nil)) ; Define a new variable "done" and set it initially to nil
    (do () ; Create a loop that will continue until the condition is met
        ((not done)) ; Check if "done" is true (i.e. list is sorted)
      (setq done t) ; If not, set "done" to true as a default value
      (dolist (val sorted) ; Loop through the elements in the "sorted" list
        (let ((next (cadr val))) ; Define a new variable "next" and set it equal to the second element in the current pair
          (if (and val next (>= (car val) next)) ; Check if the first element in the pair is larger than or equal to the second element
              (setq (car val) next ; If true, swap the two elements
                    (cadr val) (car val)
                    done nil)))) ; Set "done" to nil to indicate that the list is not yet sorted
    sorted)) ; Return the sorted list