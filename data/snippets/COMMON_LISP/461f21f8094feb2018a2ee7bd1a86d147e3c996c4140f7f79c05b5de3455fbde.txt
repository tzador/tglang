;;; This function takes in a list of numbers and returns the sum using tail recursion
;;; @param lst the list of numbers
;;; @param acc the accumulating variable, initially set to 0
;;; @return the sum of the numbers in the list
(defun sum-tail-recursion (lst acc)
  (if (zerop (length lst)) ; check if the list is empty
      acc ; if empty, return accumulated variable
      (sum-tail-recursion ; else, call function recursively
       (rest lst) ; pass in the rest of the list
       (+ acc (first lst))))) ; add the first element of the list to the accumulating variable and pass it in
       
;;; Example usage
(sum-tail-recursion '(1 2 3 4 5) 0) ; Output: 15 (1+2+3+4+5)
(sum-tail-recursion '(-1 -2 -3 -4 -5) 0) ; Output: -15 (-1-2-3-4-5)