;; An implementation of the QuickSelect algorithm in Common Lisp
(defun partition (arr left right)
  (let ((pivot (nth right arr))
        (i left))
    (loop for j from left to (- right 1) do
          (when (<= (nth j arr) pivot)
            (rotatef (nth i arr) (nth j arr))
            (incf i)))
    (rotatef (nth i arr) (nth right arr))
    i))

(defun quickselect (k arr left right)
  (let ((p (partition arr left right)))
    (cond
      ((<= k p) (quickselect k arr left (- p 1)))
      ((> k p) (quickselect k arr (+ p 1) right))
      ((= k p) (nth p arr)))))

;; Example usage
(let ((arr '(4 3 2 5 1)))
  (quickselect 2 arr 0 (- (length arr) 1))) ;; returns the 3rd smallest element in arr (2)