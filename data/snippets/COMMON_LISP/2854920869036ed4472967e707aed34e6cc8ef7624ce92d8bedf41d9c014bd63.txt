;;; Example code for a function to find the closest pair of points in a 2D plane
;; Function to calculate the distance between two points
(defun distance (point1 point2)
    (let ((x1 (car point1)) ; Get x coordinate of first point
          (y1 (cadr point1)) ; Get y coordinate of first point
          (x2 (car point2)) ; Get x coordinate of second point
          (y2 (cadr point2))) ; Get y coordinate of second point
        (sqrt (+ (expt (- x1 x2) 2) (expt (- y1 y2) 2))))) ; Calculate distance using Pythagorean theorem

;; Function to find the closest pair of points
(defun closest-pair (points)
    (let ((closest nil) ; Initialize closest pair variable
          (min-distance nil)) ; Initialize minimum distance variable
        (do* ((i 0 (1+ i))) ; Loop through all points
             ((>= i (length points))) ; Stop when reached end of list
            (do* ((j (1+ i) (1+ j))) ; Loop through remaining points
                 ((>= j (length points))) ; Stop when reached end of list
                (let ((dist (distance (nth i points) (nth j points)))) ; Calculate distance between two points
                    (when (or (null min-distance) (< dist min-distance)) ; Update closest pair if distance is smaller
                        (setf min-distance dist)
                        (setf closest (list (nth i points) (nth j points)))))))
        closest)) ; Return closest pair of points

;; Function to print out the closest pair of points
(defun print-closest (points)
    (let ((closest (closest-pair points))) ; Get closest pair of points
        (format t "The closest pair of points is (~a, ~a) and (~a, ~a) with a distance of ~a.~%" ; Print out result
            (car closest) (cadr closest) (caddr closest) (cadddr closest) (distance (car closest) (caddr closest)))))


;; Example usage:
(print-closest '((1 2) (5 6) (3 7) (9 4) (2 9) (8 1)))
;; Output:
;; The closest pair of points is (1 2) and (2 9) with a distance of 7.280109.