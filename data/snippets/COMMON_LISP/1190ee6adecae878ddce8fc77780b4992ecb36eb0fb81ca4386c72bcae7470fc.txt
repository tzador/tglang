;; Define a class named 'Person' with properties 'name' and 'age'
(defclass Person ()
  ((name :accessor name :initarg :name)
   (age :accessor age :initarg :age)))

;; Define a generic function named 'introduce' 
;; which takes an instance of 'Person' as an argument
(defgeneric introduce (person)

;; Define methods for the 'introduce' function 
;; for different types of people
(defmethod introduce ((person Person))
  (format t "My name is ~a and I am ~a years old." (name person) (age person)))

(defclass Student (Person)
  ((major :accessor major :initarg :major)))

(defmethod introduce ((student Student))
  (format t "Hello, my name is ~a and I am a student studying ~a." (name student) (major student)))

(defclass Teacher (Person)
  ((teaching_years :accessor teaching-years :initarg :years)))

(defmethod introduce ((teacher Teacher))
  (format t "Greetings, I am ~a and I have been teaching for ~a years." (name teacher) (teaching-years teacher)))

;; Create instances of the 'Person', 'Student', and 'Teacher' classes
(defparameter p1 (make-instance 'Person :name "John" :age 35))
(defparameter s1 (make-instance 'Student :name "Lisa" :age 20 :major "Computer Science"))
(defparameter t1 (make-instance 'Teacher :name "Mr. Smith" :age 50 :teaching-years 25))

;; Call the 'introduce' function on each instance
(introduce p1)
(introduce s1)
(introduce t1)