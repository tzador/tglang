;; defined a function called "factorial" that takes in one parameter "n" and assigns it a default value of 1
(defun factorial (n &optional (n 1))
  (if (= n 0) ; check if n is equal to 0
      1 ; if so, return 1 as the base case for factorial
      (* n (factorial (- n 1))) ; otherwise, multiply n by the factorial of n-1
))

;; defined a function called "find-max" that takes in a list as an argument
(defun find-max (lst)
  (cond ((null lst) nil) ; if the list is empty, return nil
        ((null (cdr lst)) (car lst)) ; if the list only has one element, return that element
        (t (max (car lst) (find-max (cdr lst)))) ; otherwise, recursively call find-max on the rest of the list and compare the first element with the maximum of the rest of the list. The larger value is returned.
))

;; defined a function called "print-greeting" that takes in two parameters "name" and "age"
(defun print-greeting (name age)
  (format t "Hello, ~a! You are ~d years old." name age) ; prints a formatted string to the console using the values of name and age
)

;; recursive function to calculate the nth Fibonacci number
(defun fibonacci (n)
  (if (= n 0) ; base case for Fibonacci: if n is 0, return 0
      0
      (if (= n 1) ; if n is 1, return 1 as the second base case
          1
          (+ (fibonacci (- n 1)) (fibonacci (- n 2)))) ; otherwise, add the two previous Fibonacci numbers to get the nth number
))

;; macro that takes in any number of arguments and applies the function "print-greeting" to each argument
(defmacro print-greetings (&rest names)
  `(progn ,@(mapcar (lambda (name) `(print-greeting ,name 25)) names))) ; uses a lambda function to map over the list of names and apply the function "print-greeting", with a default age of 25, to each name. The results are wrapped in a `progn` form to execute each call in sequence.