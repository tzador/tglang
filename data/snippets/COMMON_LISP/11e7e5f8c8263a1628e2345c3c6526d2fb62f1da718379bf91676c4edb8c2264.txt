(defun merge-sort (list)
  (if (or (null list) (null (rest list)))  ;; check if list is empty or only has one element
      list                                 ;; if so, return the list as it is already sorted
      (merge (merge-sort (get-first-half list)) ;; else, split the list into two halves and merge them recursively
	     (merge-sort (get-second-half list))))) ;; until the list is sorted
 
(defun merge (list1 list2)
  "Merges two sorted lists into one sorted list"
  (cond ((null list1) list2)                       ;; if first list is empty, return second list
	((null list2) list1)                       ;; if second list is empty, return first list
	(t (if (> (first list1) (first list2))    ;; compare first elements of both lists
	       (cons (first list2)                 ;; if first element of second list is smaller,
		     (merge list1 (rest list2)))  ;; add it to the merged list and merge the rest of the lists
	       (cons (first list1)                 ;; if first element of first list is smaller,
		     (merge (rest list1) list2)))))) ;; add it to the merged list and merge the rest of the lists