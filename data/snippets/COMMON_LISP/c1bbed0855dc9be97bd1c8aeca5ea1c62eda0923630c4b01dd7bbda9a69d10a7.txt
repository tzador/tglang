(defun find-largest-prime-factors (n) ; defun creates a function definition
  (let ((factors '()) ; let creates a lexical variable binding
        (d 2)) ; initialize variable d to represent smallest prime factor
    (while (<= d n) ; while loop to iterate through possible factors
      (if (zerop (mod n d)) ; if statement to check if d is a factor of n
          (progn ; progn allows for multiple expressions in a single if statement
            (push d factors) ; push d to the front of the list factors
            (setf n (/ n d))) ; set n to be the quotient of n divided by d
        (incf d))) ; incf increments d by 1
    (reverse factors))) ; reverse the list factors to get the prime factors in ascending order