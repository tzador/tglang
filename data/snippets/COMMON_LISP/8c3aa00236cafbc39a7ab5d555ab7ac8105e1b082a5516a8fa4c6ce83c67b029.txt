(defun bubble-sort (lst)                             ; this function uses the bubble sort algorithm to sort a list
    (let ((sorted lst)                               ; store the list in a variable for iteration
          (len (length lst))                         ; store the length of the list for comparison
          (swapped t))                               ; variable for tracking whether swaps have been made
        (while swapped                               ; loop until no more swaps are made
            (setq swapped nil)                       ; reset the variable
            (dotimes (i (1- len))                    ; loop through the list, stopping 1 before the end
                (when (> (nth i sorted)              ; if the current element is greater than the next element
                           (nth (1+ i) sorted))      ; then swap them
                    (setq swapped t)                 ; indicate that a swap has been made
                    (rotatef (nth i sorted)          ; rotate the elements to swap them
                             (nth (1+ i) sorted))))
            (decf len))                               ; decrease the length for each iteration
        sorted))                                      ; return the sorted list