(defclass person ()                         ; Define a class called "person"
  ((name :accessor name                      ; Create a slot for the person's name
         :initarg :name                      ; Specify the initialization argument
         :type string                        ; Specify the type as "string"
         :initform nil)                      ; Default value for the slot is "nil"
   (age :accessor age                        ; Create a slot for the person's age
        :initarg :age                        ; Specify the initialization argument
        :type integer                        ; Specify the type as "integer"
        :initform 0)))                       ; Default value for the slot is "0"
        
(defmethod introduce (person)                ; Define a method called "introduce" for instances of "person" class
    (format t "Hello, my name is ~a!~%"      ; Output a greeting and the person's name
      (slot-value person 'name)))            ; Get the value of the "name" slot for the current instance

(defmethod say_age (person)                  ; Define a method called "say_age" for instances of "person" class
    (format t "I am ~a years old.~%"         ; Output the person's age
      (slot-value person 'age)))             ; Get the value of the "age" slot for the current instance

(let ((john (make-instance 'person           ; Create a new instance of "person" class named "john"
              :name "John"                   ; Pass in the values for the "name" and "age" slots
              :age 25)))
  (introduce john)                           ; Call the "introduce" method on the "john" instance
  (say-age john))                            ; Call the "say_age" method on the "john" instance
; Output:
; Hello, my name is John!
; I am 25 years old.