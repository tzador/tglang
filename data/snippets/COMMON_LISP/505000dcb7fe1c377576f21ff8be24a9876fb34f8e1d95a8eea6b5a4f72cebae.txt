(defun recursive-fact (n)
       "This function calculates the factorial of a given number using recursion."
       (if (<= n 1) ; checks if n is less than or equal to 1
         1 ; returns 1 if n is less than or equal to 1
         (* n (recursive-fact (- n 1))))) ; multiplies n with the factorial of n-1

(defun iterative-fact (n)
       "This function calculates the factorial of a given number using iteration."
       (let ((result 1)) ; sets the initial value of result to 1
         (dotimes (i n) ; loops n times
           (setf result (* result (1+ i)))) ; multiplies result with the value of i+1
         result))) ; returns the final result

(format t "The factorial of ~a calculated using recursion is ~a~%" 5 (recursive-fact 5))
(format t "The factorial of ~a calculated using iteration is ~a" 5 (iterative-fact 5))