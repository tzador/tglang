(defparameter *iterator* (make-iterator (list 1 2 3 4 5))) ; Creates an iterator that can iterate over a list of numbers
(defun next (iterator) ; Function that returns the next element in the iterator
  (if (null iterator)
      (error "Iterator is empty") ; If iterator is empty, throw an error
      (let ((head (car iterator))) ; Get the first element from the iterator
        (setf iterator (cdr iterator)) ; Update iterator to point to the next element
        head))) ; Return the first element
(defun reset (iterator) ; Function that resets the iterator to the beginning
  (setf iterator (make-iterator (list 1 2 3 4 5)))) ; Creates a new iterator with the same list
(format t "First element: ~a~%" (next *iterator*)) ; Prints the first element
(format t "Second element: ~a~%" (next *iterator*)) ; Prints the second element
(reset *iterator*) ; Resets the iterator
(format t "Third element: ~a~%" (next *iterator*)) ; Prints the third element
;; Output:
;; First element: 1
;; Second element: 2
;; Third element: 1