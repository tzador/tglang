;;; Function to check if a number is a perfect square
(defun is-perfect-square (num)
  "Function to check if a number is a perfect square
  Input: num, an integer
  Output: true if num is a perfect square, false otherwise"
  (when (or (zerop num) (eql num 1)) ; handle edge cases
    (return-from is-perfect-square t)) ; zero and one are perfect squares
  (let ((mid (floor (+ 1 (sqrt num)) 2))) ; find the middle number
    (labels ((check-squares (start end) ; helper function to check squares
               (let ((m (+ start end)))
                (if (= m num) ; check if the sum of start and end squares is equals to num
                  (return-from check-squares t)
                  (if (< m num) ; if sum is less, increase start
                    (check-squares (+ start 1) end)
                    (check-squares start (- end 1)))))))
          (check-squares 0 mid)))) ; recursively check squares from 0 to mid