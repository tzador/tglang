;; This code snippet creates a function that adds 2 to a given number and checks if the result is prime
(defun add-2-check-prime (n) ;; create a function named 'add-2-check-prime' that takes in a variable 'n'
  (cond ((not (numberp n)) ;; checks if 'n' is not a number
         (error "Input is not a number"))
        ((= n 0) ;; checks if 'n' is equal to 0
         (error "Input is 0, cannot add 2"))
        ((= n -1) ;; checks if 'n' is equal to -1
         (error "Input is -1, cannot add 2"))
        (t ;; default case
         (setq n (+ n 2)) ;; adds 2 to 'n'
         (do ((i 2 (+ i 1))) ;; starts a do loop with 'i' initialized as 2 and increments by 1 each time
             ((or (> i n) (= (mod n i) 0)) ;; loop ends if 'i' is greater than 'n' or if 'n' is divisible by 'i'
              (if (= i n) ;; checks if 'i' is equal to 'n'
                  (format t "Result: ~a is prime!" n) ;; prints message stating 'n' is prime
                  (format t "Result: ~a is not prime." n))))))) ;; prints message stating 'n' is not prime

(add-2-check-prime 10) ;; call the function with input 10
(add-2-check-prime 7) ;; call the function with input 7