(defun quicksort (list) ; Defines a function named quicksort that takes a list as its parameter.
    (if (null list) ; Checks if the list is empty.
        nil ; If list is empty, returns 'nil'.
        (let ((pivot (car list))) ; Otherwise, sets the pivot as the first element of the list and creates a new scope for it.
        (append ; Appends the following lists together.
            (quicksort ; Recursively calls the quicksort function on a sub-list.
                (remove-if-not ; Removes elements from the list based on the following condition.
                    #'(lambda (x) (<= x pivot)) ; Checks if the current element is less than or equal to the pivot.
                    (cdr list))) ; Applies the above function to the rest of the elements in the list.
            (list pivot) ; Adds the pivot to the end of the sorted list.
            (quicksort ; Recursively calls the quicksort function on a sub-list.
                (remove-if-not ; Removes elements from the list based on the following condition.
                    #'(lambda (x) (> x pivot)) ; Checks if the current element is greater than the pivot.
                    (cdr list))))))) ; Applies the above function to the rest of the elements in the list. This effectively splits the list into two sub-lists and sorts them separately before appending them together.