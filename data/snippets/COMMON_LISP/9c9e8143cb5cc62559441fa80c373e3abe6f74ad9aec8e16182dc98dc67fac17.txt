;;; Definition of a Fibonacci sequence function
(defparameter *fibs* nil)  ;;; Define a global variable *fibs* and set its value to null

(defun fibonacci (n)  ;;; Define a function called fibonacci that takes in a parameter n
  (if (<= n 1)  ;;; Check if n is less than or equal to 1 (first two numbers in Fibonacci sequence)
      (setf *fibs* (append *fibs* (list 1)))  ;;; If true, append the value 1 to the global variable *fibs*
      (setf *fibs* (append *fibs* (list (+  ;;; If false, append the value of n to the global variable *fibs*
                                         (nth (- n 1) *fibs*)  ;;; Get the value at index n-1 in *fibs* and add it to
                                         (nth (- n 2) *fibs*)  ;;; the value at index n-2 in *fibs* to get
                                         )))
            )
    )
  (nth n *fibs*) ;;; Return the nth value in *fibs*
)

;;; Print the first 10 numbers in the Fibonacci sequence
(dotimes (i 10) ;;; Loop 10 times, keeping track of index in variable i
  (format t "~A " (fibonacci i))  ;;; Format and print the returned value from calling fibonacci function with argument i
)

; Output: 1 1 2 3 5 8 13 21 34 55