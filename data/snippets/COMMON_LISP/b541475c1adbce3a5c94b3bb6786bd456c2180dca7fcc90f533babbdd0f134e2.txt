;; Function for calculating the nth Fibonacci number
(defun fib (n)
  (if (<= n 1) n  ;; if n is 0 or 1, return n
    (+ (fib (- n 1))  ;; recursively calculate fib(n-1)
       (fib (- n 2)))))  ;; recursively calculate fib(n-2)

;; Function for calculating the sum of a list of numbers
(defun sum (lst)
  (if (null lst) 0  ;; if list is empty, return 0
    (+ (car lst)  ;; add the first element of the list
       (sum (cdr lst)))))  ;; recursively call sum on the rest of the list

;; Function for finding the factorial of a number
(defun factorial (n)
  (if (= n 0) 1  ;; if n is 0, return 1
    (* n (factorial (- n 1)))))  ;; multiply n by the factorial of n-1

;; Function for checking if a number is prime
(defun is-prime (n)
  (loop for i from 2 to (sqrt n) do  ;; iterate through numbers from 2 to sqrt(n)
        (if (= 0 (mod n i)) (return nil)))  ;; if n is divisible by i, it is not prime
  t) ;; if no number divides n, it is prime