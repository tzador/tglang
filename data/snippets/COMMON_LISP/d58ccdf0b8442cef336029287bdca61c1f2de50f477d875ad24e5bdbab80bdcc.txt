;; Define a function that returns the first n prime numbers
(defun first-n-prime (n)
  (let ((primes '()) ; create an empty list to store primes
        (count 1)) ; initialize count to 1
    (do ((num 2 (+ num 1))) ; loop through numbers starting at 2
        ((= count n) (reverse primes)) ; stop when we have n primes, reverse list for correct order
      (if (is-prime num) ; check if current number is prime
          (progn ; if it is, add it to the list and increment count
            (setf primes (cons num primes))
            (incf count))))))

;; Helper function to check if a number is prime
(defun is-prime (n)
  (loop for i from 2 to (isqrt n) ; loop through all numbers between 2 and square root of n
        when (= 0 (mod n i)) ; check if n is divisible by i
        do (return nil) ; if it is, it's not prime, return false
        finally (return t))) ; if all numbers checked, n is prime, return true

;; Example usage:
(first-n-prime 5) ; returns (2 3 5 7 11)