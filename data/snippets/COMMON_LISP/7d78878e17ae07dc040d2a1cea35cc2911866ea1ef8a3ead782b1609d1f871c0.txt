;; Define a function that calculates the Fibonacci sequence
(defun fibonacci (n)
  "Calculates the nth number in the Fibonacci sequence."
  (if (or (= n 0) (= n 1)) 
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))) 

;; Define a function that finds the factorial of a number
(defun factorial (n)
  "Calculates the factorial of n."
  (if (= n 0) 
      1 
      (* n (factorial (- n 1)))))

;; Create a list of numbers
(setq numbers '(1 2 3 4 5))

;; Use mapcar function to apply the factorial function to each number in the list
(mapcar #'factorial numbers)

;; Output: (1 2 6 24 120)

;; Create a lambda function that multiplies a number by itself
(defun multiply-by-itself (x)
  "Multiplies a number by itself."
  (lambda (x) (* x x)))

;; Create a list of numbers
(setq numbers '(1 2 3 4 5))

;; Use mapcar function to apply the lambda function to each number in the list
(mapcar (multiply-by-itself 2) numbers)

;; Output: (1 4 9 16 25)