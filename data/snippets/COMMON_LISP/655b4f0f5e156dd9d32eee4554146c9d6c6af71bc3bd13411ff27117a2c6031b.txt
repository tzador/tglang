(defclass person                      ; Defines a class called 'person'
  ((first-name :initarg :first-name)  ; Declares a slot for first name and list it as an initarg
   (last-name :initarg :last-name)    ; Declares a slot for last name and list it as an initarg
   (age :initarg :age                  ; Declares a slot for age and list it as an initarg
         :initform 18)                 ; Sets a default value of 18 for age slot
   (address :accessor address)))       ; Declares a slot for address and creates an accessor function
 ;end of class definition
 
 (defmethod print-person ((person person)) ; Creates a method for the print-person generic function to handle person objects
   (format t "Name: ~a ~a~%Age: ~a~%Address: ~a"   ; Prints out the person's name, age, and address
           (slot-value person 'first-name)          ; Retrieves the value of the first-name slot from the person object
           (slot-value person 'last-name)           ; Retrieves the value of the last-name slot from the person object
           (slot-value person 'age)                 ; Retrieves the value of the age slot from the person object
           (slot-value person 'address)))           ; Retrieves the value of the address slot from the person object
 
 (let ((john (make-instance 'person           ; Creates a new person object named 'john'
                            :first-name "John" ; Sets the value of the first-name slot to "John"
                            :last-name "Doe"   ; Sets the value of the last-name slot to "Doe"
                            :age 25            ; Overrides the default value of 18 for age slot to 25
                            :address "123 Main Street"))) ; Sets the value of the address slot to "123 Main Street"
   (print-person john))   ; Calls the print-person function passing in the 'john' object to print out his information