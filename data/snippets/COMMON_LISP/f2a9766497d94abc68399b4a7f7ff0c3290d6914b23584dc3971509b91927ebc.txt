(in-package :cl-user) ;; sets the current package to be used for evaluation

(declaim (optimize (speed 3) (safety 0))) ;; sets compiler optimization settings

(defparameter *random* (lambda (n) (1+ (random n)))) ;; creates a function that returns a random number from 1 to n

(defclass array-example () ;; defines a class named "array-example"
  ((data ;; defines a slot named "data" with default value of nil
    :accessor data) 
   (size ;; defines a slot named "size" with default value of 0
    :accessor size
    :initform 0) 
   (capacity ;; defines a slot named "capacity" with default value of 10
    :accessor capacity
    :initform 10) 
   (count ;; defines a slot named "count" with default value of 0
    :accessor count
    :initform 0) 
   (array ;; defines a slot named "array" with length equal to "capacity"
    :accessor array
    :initform (make-array capacity)))) 

(defmethod add-element ((instance array-example) element) ;; defines a method "add-element" for the class "array-example"
  (if (< (slot-value instance 'count) (slot-value instance 'capacity)) ;; checks if "count" is less than "capacity"
      (progn (setf (aref (slot-value instance 'array) (slot-value instance 'count)) element) ;; sets "element" at the end of "array"
             (setf (slot-value instance 'count) (1+ (slot-value instance 'count))) ;; increments "count" by 1
             t) 
      (error "Array is full."))) 

(defmethod get-element ((instance array-example) index) ;; defines a method "get-element" for the class "array-example"
  (if (and (>= index 0) (< index (slot-value instance 'count))) ;; checks if "index" is within bounds of "array"
      (aref (slot-value instance 'array) index) ;; returns element at "index" of "array"
      (error "Index out of bounds."))) 

(let ((test-array (make-instance 'array-example))) ;; creates an instance of the class "array-example" and binds it to "test-array"
  (loop repeat 10 ;; loops 10 times
        do (add-element test-array (funcall *random* 100))) ;; adds a random number from 1 to 100 to "test-array"
  (print (array test-array)) ;; prints the current state of "test-array"
  (print (get-element test-array 5))) ;; prints the element at index 5 in "test-array"