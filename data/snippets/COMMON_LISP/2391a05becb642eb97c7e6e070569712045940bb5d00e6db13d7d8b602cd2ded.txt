;;; Define a function 'lisp-triangles' that takes in a list of numbers 'l'
;;; and returns a list of lists representing rows of a triangle.
(defun lisp-triangles (l)
  ;; If the list is empty, return an empty list
  (if (null l)
      l
      ;; Otherwise, define a helper function 'triangle-helper'
      (let ((triangle-helper (lambda (row n)
                               ;; Define a helper function 'inner-helper'
                               (labels ((inner-helper (inner-row)
                                          ;; If the inner row is empty, return it
                                          (if (null inner-row)
                                              inner-row
                                              ;; Otherwise, create a new row by appending
                                              ;; the sum of the first two elements of
                                              ;; the inner row to the current row
                                              (cons (+ (car inner-row) (cadr inner-row))
                                                    (inner-helper (cdr inner-row))))))
                                 ;; Create the current row by taking the first n
                                 ;; elements of the input list 'l'
                                 (setq current-row (subseq l 0 n))
                                 ;; Recursively call 'inner-helper' to create
                                 ;; the remaining rows of the triangle
                                 (setq remaining-rows (inner-helper (cdr current-row)))
                                 ;; Combine the current row with the remaining rows
                                 (cons current-row remaining-rows)))))
        ;; Call 'triangle-helper' with the input list 'l' and the length of the input list
        (triangle-helper l (length l)))))