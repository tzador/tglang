;;; This is a function that recursively calculates the Fibonacci sequence
;;; Inputs:
;;;     n: the number of elements in the sequence to be calculated
;;;     result: the final result
;;; Output:
;;;     The nth element of the Fibonacci sequence
(defun fibonacci (n &optional (result 0))
  ;; If n is 0, return 0
  (if (equal n 0)
      0
    ;; If n is 1, return 1
    (if (equal n 1)
        1
      ;; Otherwise, return the sum of the previous two elements in the sequence
      (+ (fibonacci (- n 1) 1)
         (fibonacci (- n 2) 1))
      )))
      
;;; This is a helper function that creates a list of Fibonacci sequence elements
;;; Inputs:
;;;     n: the number of elements in the sequence to be calculated
;;;     result: the current element being calculated
;;; Output:
;;;     A list of Fibonacci sequence elements
(defun fibonacci-list (n &optional (result 0))
  ;; If n is 0, return an empty list
  (if (equal n 0)
      '()
    ;; Otherwise, create a list starting with the current element
    (cons result
          ;; Recursively add to the list with the next element
          (fibonacci-list (- n 1) (+ result 1)))))
          
;;; This is a function that calculates the sum of a list of numbers
;;; Inputs:
;;;     lst: the list of numbers to be summed
;;;     result: the final result
;;; Output:
;;;     The sum of the numbers in the list
(defun sum-list (lst &optional (result 0))
  ;; If lst is empty, return 0
  (if (null lst)
      0
    ;; Otherwise, add the first element of lst to the sum and recursively call the function on the rest of the list
    (+ (car lst)
       (sum-list (cdr lst)
                 (+ result 1)))))
                 
;;; This is a function that uses the fibonacci and sum-list functions to calculate the sum of the first n elements of the Fibonacci sequence
;;; Inputs:
;;;     n: the number of elements in the sequence to be summed
;;; Output:
;;;     The sum of the first n elements of the Fibonacci sequence
(defun fibonacci-sum (n)
  ;; Get the list of Fibonacci sequence elements
  (let ((fib-list (fibonacci-list n)))
    ;; Calculate the sum of the list elements
    (sum-list fib-list)))
    
;;; EXAMPLE: Calculate the sum of the first 10 elements of the Fibonacci sequence
(fibonacci-sum 10)
;; Output: 133