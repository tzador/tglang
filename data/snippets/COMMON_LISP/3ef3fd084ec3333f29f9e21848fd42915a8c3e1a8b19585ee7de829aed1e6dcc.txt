;; Define a function to check if a given number is prime

(defun is-prime (n)  ;; Define a function called is-prime with parameter n
  (cond 
    ((= n 1) nil) ;; If n is equal to 1, return nil since 1 is not a prime number
    ((= n 2) t) ;; If n is equal to 2, return t since 2 is a prime number
    ((evenp n) nil) ;; If n is an even number (using the built-in function evenp), return nil since all even numbers except 2 are not prime
    (t ;; If n is an odd number
      (let ((limit (isqrt n)) ;; Create a local variable limit and set it to the square root of n (using the built-in function isqrt)
            (i 3)) ;; Create a local variable i and set it to 3, used for looping
            (loop for num from 3 to limit by 2 do ;; Loop from 3 to limit, incrementing by 2 (since all even numbers have been checked)
                  (when (= 0 (mod n num)) ;; If n is divisible by num, return nil since n is not a prime number
                    (return-from is-prime nil))
                  (setf i (+ i 2))) ;; Increment i by 2 to check the next odd number
            t))) ;; If no divisors are found, return t since the number is prime 
                 

(is-prime 17) ;; Call the function passing in the number 17 and it will return t, since 17 is a prime number