;; This code snippet solves the famous "Tower of Hanoi" puzzle.
;;
;; In this puzzle, there are three pegs and a set of discs of different sizes.
;; The goal is to move all the discs from the first peg to the third peg, while
;; following the rules:
;;
;; 1. Only one disc can be moved at a time
;; 2. A disc can only be placed on top of a larger disc or an empty peg
;; 3. The puzzle must be solved in the minimal number of moves
;;

;; Define a function named "hanoi" that takes in three parameters:
;; - 'n' representing the number of discs
;; - 'start' representing the starting peg
;; - 'aux' representing the auxiliary peg
;; - 'end' representing the ending peg
(defun hanoi (n start aux end)
  (if (= n 1)
    ;; if 'n' is 1, simply move the disc from 'start' to 'end'
    (progn
      (format t "Move disc from ~a to ~a~%" start end)
      (values))
    ;; otherwise, move 'n-1' discs from 'start' to 'aux' (using 'end' as the auxiliary peg)
    ;; then move the largest disc from 'start' to 'end'
    ;; finally, move the remaining 'n-1' discs from 'aux' to 'end' (using 'start' as the auxiliary peg)
    (progn
      (hanoi (- n 1) start end aux)
      (format t "Move disc from ~a to ~a~%" start end)
      (hanoi (- n 1) aux start end))))

;; call the 'hanoi' function with 'n' = 3, 'start' = 'A', 'aux' = 'B', and 'end' = 'C'
(hanoi 3 'A' 'B' 'C')

;; Output:
;;
;; Move disc from A to B
;; Move disc from A to C
;; Move disc from B to C
;; Move disc from A to B
;; Move disc from C to A
;; Move disc from C to B
;; Move disc from A to B