(defparameter *alphabet* '(#\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z)) ;defines a list of alphabets

(defun generate-alphabet (n)
  (flet ((get-random-letter (x)
           (elt x (random (length x))))) ;function to get a random letter from list
    (loop for i below n
          for char1 = (get-random-letter *alphabet*)
          for char2 = (remove char1 *alphabet*)
          and j = (random n)
          for sequence = (1+ (random 5))
          for string = (loop for k below sequence
                             collect (get-random-letter char2))
          collect (list char1 (coerce string 'string))
          into result
          finally (return (mapcar (lambda (x) (list (car x) (apply #'concatenate 'string (cdr x)))) result))))) ;generates a list of pairs of letters from alphabet with string sequences of random length

(defparameter *matrix-size* 10) ;defines the size of the matrix
(defparameter *matrix-alphabet* (subseq *alphabet* 0 *matrix-size*)) ;extracts the letters from alphabet for the matrix

(defun generate-matrix ()
  (let ((matrix (make-array (list *matrix-size* *matrix-size*)))) ;creates a matrix of size matrix-size x matrix-size
    (loop for i below *matrix-size*
          for row = (loop for j below *matrix-size*
                          collect (generate-alphabet *matrix-size*))
          do (setf (aref matrix i) (apply #'vconcat row))) ;fills the matrix with randomly generated sequences of letters
    matrix))

(format t "The alphabet matrix with random string sequences:~%") ;prints a message to the console
(dotimes (i *matrix-size*)
  (format t "===~%")
  (loop for j below *matrix-size*
        for char = (aref (generate-matrix) i j)
        do (format t "~a " char))) ;prints the alphabet matrix with string sequences row by row