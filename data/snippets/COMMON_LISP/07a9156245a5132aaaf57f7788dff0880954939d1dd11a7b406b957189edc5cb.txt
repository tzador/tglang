(defun merge-sort (list)
  "Sorts a list using the merge sort algorithm."
  (if (null list)
      list
      (merge
        (merge-sort (first-half list))
        (merge-sort (second-half list)))))

(defun first-half (list)
  "Returns the first half of a list."
  (let ((mid (floor (length list) 2)))
    (subseq list 0 mid)))

(defun second-half (list)
  "Returns the second half of a list."
  (let ((mid (floor (length list) 2)))
    (subseq list mid)))

(defun merge (list1 list2)
  "Merges two lists in ascending order."
  (if (null list1)
      list2
      (if (null list2)
          list1
          (if (> (car list1) (car list2))
              (cons (car list2) (merge list1 (cdr list2)))
              (cons (car list1) (merge (cdr list1) list2))))))

(merge-sort '(4 9 2 3 7 5)) ;; => (2 3 4 5 7 9)