(defparameter *days* '((:name "Monday" :abbreviation "Mon" :number 1)
                        (:name "Tuesday" :abbreviation "Tue" :number 2)
                        (:name "Wednesday" :abbreviation "Wed" :number 3)
                        (:name "Thursday" :abbreviation "Thu" :number 4)
                        (:name "Friday" :abbreviation "Fri" :number 5)
                        (:name "Saturday" :abbreviation "Sat" :number 6)
                        (:name "Sunday" :abbreviation "Sun" :number 7)))

(defparameter *months* '((:name "January" :abbreviation "Jan" :number 1 :days 31)
                          (:name "February" :abbreviation "Feb" :number 2 :days 28)
                          (:name "March" :abbreviation "Mar" :number 3 :days 31)
                          (:name "April" :abbreviation "Apr" :number 4 :days 30)
                          (:name "May" :abbreviation "May" :number 5 :days 31)
                          (:name "June" :abbreviation "Jun" :number 6 :days 30)
                          (:name "July" :abbreviation "Jul" :number 7 :days 31)
                          (:name "August" :abbreviation "Aug" :number 8 :days 31)
                          (:name "September" :abbreviation "Sep" :number 9 :days 30)
                          (:name "October" :abbreviation "Oct" :number 10 :days 31)
                          (:name "November" :abbreviation "Nov" :number 11 :days 30)
                          (:name "December" :abbreviation "Dec" :number 12 :days 31)))

(defun get-day-of-week (date)
  "Function to get the day of the week given a date in the format dd mm yyyy.
   Returns an integer from 0-6, where 0 is Sunday, 1 is Monday, etc."
  (let* ((day (parse-integer (nth 0 date)))
         (month (parse-integer (nth 1 date)))
         (year (parse-integer (nth 2 date))))
    (let ((a (- month 2))
          (b (- (mod (+ year (/ year 4)) 7) 6)))
      (if (>= a 0)
          (mod (+ a b day (* (/ (* 2 a) 3) (+ 1 (/ a 5))) 7) 7)
          (mod (+ a b day (* (/ (* 2 (+ a 13)) 3) (- (+ 1 (/ (+ a 9) 5))))) 7)
          ))))

(defun is-leap-year (year)
  "Function to check if a given year is a leap year.
   Returns true or false."
  (if (or (and (zerop (mod year 4))
               (not (zerop (mod year 100))))
          (zerop (mod year 400)))
      t
      nil))

(defun get-days-in-year (year)
  "Function to get the total number of days in given year.
   Takes a year as input and returns an integer."
  (if (is-leap-year year)
      366
      365))

(defun get-days-in-month (month year)
  "Function to get the total number of days in given month of a given year.
   Takes the month and year as input and returns an integer."
  (let ((days (cadr (nth (1- month) *months*))))
    (if (and (= month 2) (is-leap-year year))
        (1+ days)
        days)))

(defun get-ordinal-number (num)
  "Function to get the ordinal number for a given integer.
   Returns the integer and its corresponding ordinal suffix as a string."
  (unless (member num '(11 12 13))
    (let ((suffix
           (cdr (assoc (mod num 10)
                       '((1 . "st")
                         (2 . "nd")
                         (3 . "rd")
                         (otherwise . "th"))))))
      (return-from get-ordinal-number
        (format nil "~d~a" num suffix))))
  (format nil "~dth" num))

(defun get-date-string (date)
  "Function to get a formatted date string for a given date in the format dd mm yyyy.
   Returns a string in the format Month dd yyyy."
  (let* ((day (parse-integer (nth 0 date)))
         (month (parse-integer (nth 1 date)))
         (year (parse-integer (nth 2 date)))
         (month-name (cadr (nth (1- month) *months*))))
    (format nil "~a ~a, ~d"
            month-name
            (get-ordinal-number day)
            year)))

(defun get-day-of-week-string (day)
  "Function to get the day of the week in string format.
   Takes an integer from 0-6 and returns the corresponding day of week as a string."
  (cadr (nth day *days*)))