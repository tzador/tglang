(defmacro my-fib (x) ; Defines a macro called 'my-fib' that takes a single argument 'x'
  (if (zerop x) x ; Checks if x is equal to zero, if yes returns x as the result 
      `0
      (if (= x 1) 1 ; Checks if x is equal to 1, if yes returns 1 as the result
          `1
          `(+ (my-fib (- x 1)) (my-fib (- x 2))) ; If x is not 0 or 1, returns the sum of previous two results 
      )
  )
)

(format t "Enter a number: ") ; Prints "Enter a number: " in the output
(let ((input (parse-integer (read-line)))) ; Reads the input from the user and converts it into an integer
  (let ((result (my-fib input))) ; Stores the result of the macro 'my-fib' with the user input as an argument
    (format t "The fibonacci number at position ~a is ~a" input result)) ; Prints the result in the output with proper annotation
)