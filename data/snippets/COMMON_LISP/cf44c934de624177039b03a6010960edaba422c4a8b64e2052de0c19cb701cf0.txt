(defparameter *numbers* '(1 4 2 8 5 3)) ; define a global variable to hold a list of numbers

(defun quicksort (list) ; define a function called quicksort that takes in a list as parameter
  (if (null list) ; if the list is empty, return an empty list
      nil
      (let ((pivot (car list))) ; else, set the pivot element as the first element of the list
        (append ; append the results of these three operations
         (quicksort (remove-if (lambda (x) (< x pivot)) (cdr list))) ; quicksort the list of elements greater than the pivot
         (list pivot) ; add the pivot element to the middle
         (quicksort (remove-if (lambda (x) (>= x pivot)) (cdr list))) ; and quicksort the list of elements less than or equal to the pivot
         ))))

(print (quicksort *numbers*)) ; print out the sorted list by passing in *numbers* to the quicksort function as an argument