(defun merge-sort (list &optional predicate)
  "Merge-Sort is a divide and conquer sorting algorithm
   that recursively splits the input list into smaller sub-lists,
   sorts them, and then merges them back together.

   Input:
      list: The list to be sorted
      predicate: Optional comparison function

   Output:
      Sorted list
  "
  (labels ((merge (list1 list2 result)
             ;; Helper function to merge two lists
             (cond ((null list1) (append result list2))
                   ((null list2) (append result list1))
                   ((funcall predicate (car list1) (car list2))
                    (merge (cdr list1) list2 (append result (list (car list1)))))
                   (t (merge list1 (cdr list2) (append result (list (car list2)))))))
    ;; Main merge-sort function
    (lambda (list)
      ;; Handle base case
      (if (null (cdr list))
          list
          (let* ((size (floor (length list) 2))
                 (list1 (subseq list 0 size))
                 (list2 (subseq list size)))
            (merge (merge-sort list1) (merge-sort list2) nil))))))