(defun bubble-sort (list)                      ; Define a function called "bubble-sort" with parameter "list"
  (let ((sorted-list (copy-seq list)))         ; Create a new list called "sorted-list" as a copy of "list"
    (loop                                      ; Start a loop
      (let ((swapped nil))                     ; Create a variable "swapped" and set it to false
        (loop for i from 0 below                ; Start a loop from 0 to the length of the list - 2
          (- (length sorted-list) 1)            ; Minus 1 to the length of the list
          when (string-lessp (                   ; Compare the current element with the next one, ignore case
            aref sorted-list i)                  ; Get the current element in the list using "aref"
            (aref sorted-list (+ i 1)))          ; Get the next element in the list using "aref" and add 1 to i
          do                                    ; If the current element is less than the next one
            (setf (elt sorted-list i)           ; Set the current element to a higher index
              (aref sorted-list (+ i 1)))        ; Replace the current element with the next one
            (setf (elt sorted-list (+ i 1))      ; Set the next element to a lower index
              (aref sorted-list i))              ; Swap the elements
            (setf swapped t))                    ; Set the flag to true
          when (not swapped)                    ; If the flag is still false, stop the loop
          return sorted-list))                   ; Otherwise, return the sorted list
      finally (return sorted-list))))            ; When the outer loop is finished, return the sorted list