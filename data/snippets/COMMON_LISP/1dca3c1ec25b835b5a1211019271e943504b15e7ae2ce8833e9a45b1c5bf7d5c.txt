;; Define function to calculate factorial
(defun factorial (n)
  "Computes the factorial of a given number."
  (if (<= n 1) 1 (* n (factorial (- n 1)))))

;; Define recursive function to calculate Fibonacci sequence
(defun fibonacci (n)
  "Generates the nth Fibonacci number."
  (if (<= n 1) n (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

;; Define function to reverse a list
(defun reverse-list (lst)
  "Reverses the elements of a list."
  (if (null lst)
      nil
      (append (reverse-list (rest lst)) (cons (first lst) nil))))

;; Define function to check if two lists are equal
(defun equal-lists (lst1 lst2)
  "Checks if two lists have the same elements."
  (if (and (null lst1) (null lst2))
      t
      (and (equal (first lst1) (first lst2))
           (equal-lists (rest lst1) (rest lst2)))))

;; Define function to calculate the GCD of two numbers
(defun gcd (a b)
  "Calculates the greatest common divisor of two numbers."
  (if (= b 0)
      a
      (gcd b (mod a b))))

;; Define function to convert a binary string to decimal
(defun binary-to-decimal (bin)
  "Converts a binary string to decimal."
  (reduce #'+
          (loop for i in (reverse bin)
                for j from 1
                collect (* (char-int i) (expt 2 j)))))

;; Define function to check if a string is a palindrome
(defun palindrome (str)
  "Checks if a string is a palindrome."
  (let ((reversed-str (reverse str)))
    (equal str reversed-str)))

;; Define function to calculate the area of a triangle
(defun triangle-area (base height)
  "Calculates the area of a triangle."
  (/ (* base height) 2))

;; Define function to find the length of the longest string in a list
(defun longest-string-in-list (lst)
  "Finds the length of the longest string in a list."
  (reduce #'max (mapcar #'length lst)))

;; Define function to print all elements of a list in a new line
(defun print-list-elements (lst)
  "Prints all elements of a list in a new line."
  (format t "~{~&~a~}" lst))

;; Define function to find the sum of all even numbers in a list
(defun sum-even-numbers (lst)
  "Finds the sum of all even numbers in a list."
  (reduce #'+
          (remove-if-not #'evenp lst)))

;; Define function to generate a list of random numbers between 1 and 10
(defun random-numbers ()
  "Generates a list of 10 random numbers between 1 and 10."
  (loop for i from 0 to 9
        collect (random 10 + 1)))