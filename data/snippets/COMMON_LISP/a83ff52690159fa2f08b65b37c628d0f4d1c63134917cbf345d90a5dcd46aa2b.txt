(defun merge-sort (list)
  "A function to recursively divide and merge a list using the merge sort algorithm."
  (if (<= (length list) 1)
      ;; base case
      list
      ;; recursive case
      (let* ((n (floor (length list) 2))  ;; calculate midpoint
             (left (merge-sort (subseq list 0 n)))  ;; sort left half
             (right (merge-sort (subseq list n)))  ;; sort right half
             (sorted '()))  ;; start with empty sorted list
        ;; merge the sorted halves
        (loop while (and left right) do
             (if (< (car left) (car right))
                 ;; if left element is smaller, add it to sorted list
                 (progn
                   (push (car left) sorted)
                   (setq left (cdr left)))
                 ;; if right element is smaller, add it to sorted list
                 (progn
                   (push (car right) sorted)
                   (setq right (cdr right)))))
        ;; add any remaining elements from left or right list
        (nconc
         (if left left '())
         (if right right '())
         sorted))))