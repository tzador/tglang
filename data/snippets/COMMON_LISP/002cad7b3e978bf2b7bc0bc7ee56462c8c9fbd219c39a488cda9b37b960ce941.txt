(defun generate-permutations (list) "This function takes in a list as input and generates all possible permutations of the elements in the list."
    (if (null list) "If the list is empty, return a list containing an empty list."
        (list list))
    (do ((permutations '() (append permutations (list (car list))))
         (remaining-list (cdr list) (cdr remaining-list)))
        ((null remaining-list))
        (let ((new-permutations (generate-permutations (append (subseq list 0 i)
                                                              (subseq list (+ i 1)))))
            (do ((sub-permutations new-permutations (cdr sub-permutations)))
                ((null sub-permutations))
                (setf permutations (append permutations (list (cons (car list) (car sub-permutations))))))))
    "At the end, return all the generated permutations."
    permutations)