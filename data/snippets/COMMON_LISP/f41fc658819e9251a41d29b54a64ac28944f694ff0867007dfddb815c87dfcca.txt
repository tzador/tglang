;;; This is a code snippet in COMMON_LISP that creates a function to calculate the nth Fibonacci number.
;;; {% comment %} 
This function uses recursion to calculate the nth Fibonacci number, taking advantage of tail recursion optimization in COMMON_LISP. 
 
Input: n - the index of the desired Fibonacci number 
Output: the nth Fibonacci number 
 
Note: this function uses the common convention that the 0th and 1st Fibonacci numbers are both 1.
 
If you are unfamiliar with COMMON_LISP syntax, here are some explanations for the operators used: 

- defun: defines a function and its parameters 
- when: executes code when a condition is true 
- cond: evaluates a series of conditional statements 
- eql: compares two values for equality 
- otherwise: defines an action for when none of the previous conditions are met 
- 1+ : increments a number by 1 
- 1- : decreases a number by 1 
- t: is the boolean value for true 
- nil: is the boolean value for false 
{% endcomment %} 
(defun fibonacci (n)
  "Calculates the nth Fibonacci number using recursion and tail recursion optimization."
  (labels ((fib-rec (n prev1 prev2)
             (cond ((eql n 0) prev1)
                   ((eql n 1) prev2)
                   (t (fib-rec (1- n) (+ prev1 prev2) prev1)))))
    (when (>= n 0)
      (fib-rec n 1 1))))