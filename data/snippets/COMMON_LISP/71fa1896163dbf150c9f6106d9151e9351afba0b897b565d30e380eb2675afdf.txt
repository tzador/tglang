(defun prime-p (num) ;--; defines a function that checks if a number is prime
  (if (<= num 1) ;--; if the number is less than or equal to 1, it is not prime
      nil ;--; return false
      (loop for i from 2 to (isqrt num) ;--; loop through numbers from 2 to the square root of the number
            when (zerop (mod num i)) ;--; if the number is divisible by any number less than the square root of it
            do (return nil)) ;--; return false
      t)) ;--; return true

(defun prime-factors (num) ;--; defines a function that finds all prime factors of a number
  (labels ((recurse (cur-factor cur-value) ;--; defines a recursive helper function that takes in the current factor and the current remaining value to be factored
             (if (prime-p cur-value) ;--; if the current value is prime
                 (list cur-factor) ;--; add it to the list of factors
                 (multiple-value-setq (cur-quotient remainder) ;--; get the quotient and remainder when dividing the current value by the current factor
                                      (truncate cur-value cur-factor))
                 (cons cur-factor (recurse (- cur-factor 1) cur-quotient)))) ;--; continue recursively with the current factor decreased by 1 and the value to be factored equal to the quotient
          (recurse (isqrt num) num))) ;--; call the helper function starting with the square root of the number and the number itself as the value to be factored

(prime-factors 126) ;--; call the function with the number 126 as the argument, should return (2 3 3 7) since 126 = 2 * 3 * 3 * 7