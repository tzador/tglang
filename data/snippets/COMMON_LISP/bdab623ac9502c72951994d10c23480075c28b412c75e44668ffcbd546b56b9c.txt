(defvar *random-string*
  (let ((chars '("a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z")))
    (loop for i from 0 to 20
          collect (elt chars (random (length chars))))))
;; Creates a list of random letters from "a" to "z" with a length of 20.

(defun string-to-number (string)
  (loop for char across string
        sum (- (char-code char) 96)))
;; Converts each letter in the random string to a number by subtracting the ASCII value of "a" (97) and summing them up.

(setf *random-number* (string-to-number *random-string*))
;; Sets the previously generated random string to a global variable and converts it to a number.

(defun power-of-two (num)
  (expt 2 num))
;; Calculates the power of two of the given number.

(defun reverse-number (num)
  (loop while (> num 0)
        do (setf *random-string* (cons (modulo num 10) *random-string*))
        do (setf num (floor num 10))))
;; Reverses the order of the digits in the random number.

(setf *random-number* (reverse-number *random-number*))
;; Sets the previously calculated random number to a global variable and reverses its order.

(defmacro split-list (list)
  (if (oddp (length list))
      (append (list (nth (floor (/ (length list) 2)) list))
              (list (reverse (cdr (nthcdr (floor (/ (length list) 2)) list)))))
  (append (list (reverse (cdr (nthcdr (- (floor (/ (length list) 2)) 1) list))))
          (list (nth (- (floor (/ (length list) 2)) 1) list))))
;; Divides the list into two sublists and rearranges them in a specific order based on the length of the list.

(defun binary-to-decimal (binary)
  (let ((result 0))
    (loop for i from 0 to (1- (length binary))
          do (setf result (+ result (expt 2 i) (car (nthcdr i binary)))))
    result))
;; Converts the binary number to decimal by using a loop and the power of two function.

(defun encode-string (string)
  (let ((binary-list (maplist #'char-int string)))
    (loop for char across string
          for bit-list = (string-to-list (format nil "~B" (char-int char)))
          collect (cons (binary-to-decimal (split-list bit-list)) *random-string*))))
;; Encodes the original random string using the split-list and binary-to-decimal functions.

(format nil "The encoded string is: ~{~A~}" (encode-string *random-string*))
;; Prints the encoded string by using the format function to concatenate all elements in the encoded string list.