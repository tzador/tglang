;; Define a function that calculates the nth Fibonacci number using memoization
(defun fibonacci (n &optional (cache (make-hash-table))) ;; Define function name, input parameter n, and optional cache using make-hash-table function
	(if (or (= n 0) (= n 1)) ;; If input parameter n is equal to 0 or 1
		n ;; Then return n
		(let ((value (gethash n cache))) ;; Else, create a let-bind for value and set it to the value mapped to n in the cache
			(if value ;; If a mapping exists for n in the cache
				value ;; Then return the mapped value
				(let* ((result (+ (fibonacci (- n 1) cache) (fibonacci (- n 2) cache)))) ;; Else, create a let-bind for result and set it to the sum of calling fibonacci recursively for n-1 and n-2
					(puthash n result cache) ;; Add the result to the cache with n as the key
					result))))) ;; Return the result