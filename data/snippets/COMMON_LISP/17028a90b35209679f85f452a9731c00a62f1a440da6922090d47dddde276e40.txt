; This is a function that calculates the factorial of a given number
(defun factorial (number)
  "Calculates the factorial of a given number.
   Returns the result as an integer."
  (if (<= number 1)
      1
      (* number (factorial (- number 1)))))
      
; This is a function that calculates the nth Fibonacci number using recursion
(defun fibonacci (n)
  "Calculates the nth Fibonacci number using recursion.
   Returns the result as an integer."
  (if (< n 2)
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

; This is a loop that iteratively calculates the sum of numbers from 1 to 10
(loop for i from 1 to 10
      sum i)
      
; This is a lambda expression that checks if a number is prime
(lambda (n)
  "Checks if the given number is prime.
   Returns true if the number is prime, false otherwise."
  (cond ((< n 2) nil)
        ((= n 2) t)
        ((evenp n) nil)
        (t (loop for i from 3 to (sqrt n) by 2
                 never (zerop (mod n i)))))))
                 
; This is a macro that multiplies two numbers and prints the result
(defmacro multiply-and-print (x y)
  "Multiplies two numbers and prints the result."
  `(print (* ,x ,y)))

; This is a function that sorts a list of numbers in ascending order using insertion sort
(defun insertion-sort (lst)
  "Sorts a list of numbers in ascending order using insertion sort.
   Returns the sorted list."
  (do ((sorted lst (cdr sorted))
       (unsorted lst (cdr unsorted)))
      ((endp unsorted) sorted)
    (let ((cur (car unsorted)))
      (setf (cdr unsorted) (remove cur (cdr unsorted)))
      (let ((sorted-cur sorted))
        (do ((last-sorted cons (cdr last-sorted)))
            ((or (endp last-sorted) (<= cur (car last-sorted)))
             (setf (cdr last-sorted) (cons cur (cdr last-sorted))))))
      (setf sorted (cons cur sorted)))))