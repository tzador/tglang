;; This code takes in a nested list of integers and returns the sum of all the elements
(defun sum-nested-list (lst) ; Define a function with parameter "lst"
    (cond ((atom lst) lst) ; If the parameter is an atom (integer), return it
          ((consp lst) ; If the parameter is a list
           (+ (sum-nested-list (car lst)) ; Recursively call the function on the first element of the list
              (sum-nested-list (cdr lst)))) ; Recursively call the function on the rest of the list
          (t 0))) ; Return 0 for any other data type
          
;; Example usage
(sum-nested-list '(1 (2 3) (4 (5 6)))) ; Output: 21