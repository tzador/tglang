(defun route-planner (initial-city final-city distance)
  "Calculates the shortest route based on distance between two cities"
  (let ((current-city initial-city)
        (current-distance distance) 
        (route '())) ; empty list to store the route
    (loop while current-city
          do (setf route (push current-city route))
             (if (string= current-city final-city) ; check if final city reached
                 (progn (format t "~&Calculating shortest route for ~a to ~a..." initial-city final-city)
                        (return))
                 (loop for city in (connected-cities current-city) ; iterate through connected cities
                       do (if (and (not (member city route)) (<= (get-distance city) current-distance))
                              (progn (setf current-city city) ; update current city if shorter distance found
                                     (setf current-distance (get-distance city)))
                              (return))
                       finally (format t "~&Moving to next connected city...")
                       continue))
    (reverse route))) ; reverse the list to get final route in correct order