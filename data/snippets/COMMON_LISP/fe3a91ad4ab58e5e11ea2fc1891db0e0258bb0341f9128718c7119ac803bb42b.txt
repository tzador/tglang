;;; Define a function to return the sum of two numbers
(defun sum (x y) 
  "Function to return the sum of two numbers"
  (+ x y)) 

;;; Define a function that checks if a number is prime 
(defun primep (x)
  "Checks if a number is prime or not"
  (cond 
    ((< x 2) t)
    ((= x 2) t)
    ((evenp x) nil) ;;; If number is even, it cannot be prime
    (t 
     (let ((sqrtx (sqrt x)))
       (do ((i 3 (+ i 2))) ;;; increment by 2 to check only odd numbers
           ((> i sqrtx) t)
         (when (zerop (mod x i))
           (return nil)))))) ;;; If a number divides x without remainder, it is not prime

;;; Define a function that calculates the factorial of a number
(defun factorial (n)
  "Calculates the factorial of a number"
  (if (<= n 1)
      1 
      (* n (factorial (- n 1))))) ;;; Use recursion to calculate factorial

;;; Define a function that returns the first n prime numbers
(defun n-prime-numbers (n)
  "Returns the first n prime numbers as a list"
  (do ((numbers (list 2) (cons (+ (car numbers) 1) numbers))
       (count 1 (+ count 1))
       (primes nil))
      ((= n count) (reverse primes)) ;;; return reversed list of n primes
    (when (primep (car numbers))
      (push (car numbers) primes)))) ;;; add prime numbers to list

;;; Define a function that counts the number of words in a sentence
(defun word-count (sentence)
  "Counts the number of words in a sentence"
  (length (split-sequence #\Space sentence))) ;;; use split-sequence to split sentence into words and return the length of the resulting list

;;; Define a function that finds the element with the maximum value in a list
(defun max-element (list)
  "Finds the element with the maximum value in a list"
  (if (= 1 (length list)) ;;; if the list only has one element, that is the maximum
      (car list)
      (let ((rest (max-element (cdr list)))) ;;; recursively find maximum of remaining elements
        (if (> (car list) rest) 
            (car list)
            rest))))