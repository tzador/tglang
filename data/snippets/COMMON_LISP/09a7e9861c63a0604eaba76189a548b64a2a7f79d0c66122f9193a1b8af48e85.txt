(defun quicksort (list) ;; define a function called quicksort that takes in a list as a parameter
  (if (null list) ;; if the list is empty, return an empty list
      list
      (let ((pivot (car list))) ;; set the pivot as the first element of the list
        (append ;; append the results of the following operations:
         (quicksort (remove-if-not ;; recursively call quicksort on a new list created by removing elements that do not satisfy the following predicate:
                      (lambda (x) (< x pivot)) ;; a function that returns true if x is less than the pivot
                      (cdr list))) ;; the rest of the elements of the list
         (list pivot) ;; append the pivot to the end
         (quicksort (remove-if-not ;; recursively call quicksort on a new list created by removing elements that do not satisfy the following predicate:
                      (lambda (x) (= x pivot)) ;; a function that returns true if x is equal to the pivot
                      list)))))) ;; the original list unmodified