(defun merge-sort (list)
  "This function implements the merge sort algorithm in Common Lisp. It takes in a list as input and returns a sorted list as output."
  (if (<= (length list) 1)
      list                                 ; If list length <= 1, it is already sorted
    (let ((mid (/ (length list) 2))         ; Get the mid index of the list
          (left (merge-sort (subseq list 0 mid)))    ; Recursively sort the left half
          (right (merge-sort (subseq list mid))))    ; Recursively sort the right half
      (merge left right)                   ; Merge the sorted halves using merge helper function
      )))

(defun merge (a b)
  "This helper function merges two sorted lists a and b and returns the merged list as output."
  (cond ((null a) b)                       ; If a is empty, return b
        ((null b) a)                       ; If b is empty, return a
        ((<= (car a) (car b))              ; If first element of a <= first element of b
          (cons (car a) (merge (cdr a) b))) ; Add first element of a to merged list and recursively merge the rest of a and b
        (t                                  ; Otherwise
          (cons (car b) (merge a (cdr b)))) ; Add first element of b to merged list and recursively merge a and the rest of b
        ))