(defun bubble-sort (lst)
  "This function performs bubble sort on a list recursively."
  (if (null lst)                       ; check if list is empty
      nil                              ; if yes, return nil
      (let ((sorted (bubble lst nil))) ; otherwise, call the helper function
        (if (null sorted)              ; if the helper function returns nil
            lst                        ; return the original list (already sorted)
            (bubble-sort sorted)))))   ; otherwise, call the function again with the sorted list

(defun bubble (lst result)
  "This helper function does one pass of bubble sort on the given list and returns the sorted list."
  (if (null (cdr lst))                 ; if only one element left in the list
      (if result                        ; if the result is nil (i.e. no swaps were made)
          nil                           ; return nil
          (nreverse result))            ; otherwise, reverse the result and return
      (if (> (car lst) (cadr lst))      ; compare first two elements and swap if necessary
          (bubble (cons (cadr lst) (cddr lst)) (cons (car lst) result))
          (bubble (cdr lst) (cons (car lst) result))))) ; otherwise, call function again with next element in list and current result

;; example of usage
(bubble-sort '(5 2 3 1 4)) ; returns (1 2 3 4 5)