;; Defining a function called add
(defun add (x y)
  "This function takes in two numbers and returns their sum"
  (+ x y))

;; Using the add function to sum two numbers
(add 2 3) ; Output: 5

;; Defining a recursive function to find the factorial of a number
(defun factorial (n)
  "This function uses recursion to find the factorial of a number"
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

;; Using the factorial function to find the factorial of 5
(factorial 5) ; Output: 120

;; Defining a list of numbers
(defparameter numbers '(1 2 3 4 5))

;; Using the map function to add 10 to each number in the list
(map 'list #'(lambda (x) (+ x 10)) numbers) ; Output: (11 12 13 14 15)

;; Defining a class called "Person" with name and age attributes
(defclass Person ()
  ((name :initarg :name
         :accessor name)
   (age :initarg :age
        :accessor age)))

;; Creating an instance of the Person class
(defparameter person (make-instance 'Person :name "John" :age 25))

;; Accessing the name attribute of the person
(person-name person) ; Output: "John"