(let ((x 5))        ; set variable x to 5
   (labels ((pow (n) ; define a function that takes in a number
                (if (= n 0) // if the number is 0
                    1       ; return 1
                    (* x (pow (1- n)))) ; else, multiply x by pow with n-1
            (fac (n) ; define a function to calculate factorial
                (if (= n 0)     ; if n is 0
                    1             ; return 1
                    (* n (fac (- n 1)))) ; else, return factorial of n-1
            (sum (n) ; define a function to calculate the sum of numbers
                (if (= n 0) ; if n is 0
                    0       ; return 0
                    (+ n (sum (1- n)))) ; else, add n to sum of n-1
         (cond (x=5   ; check if x equals to 5
                (format t "The factorial of ~d = ~d~%" x (fac x)) ; if yes, print factorial
                (format t "The sum of ~d = ~d~%" x (sum x)) ; if yes, print sum
                (format t "The power of ~d with ~d = ~d~%" x x (pow x))) ; if yes, print power
         (t ; else
            (format t "x is not 5")))) ; print x is not 5