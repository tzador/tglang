(defun quicksort (seq) ; defining a function called quicksort with parameter 'seq'
  (if (null seq) seq ; if sequence is empty, return the same sequence
    (let ((pivot (first seq))) ; defining a local variable 'pivot' that is the first element of the sequence
      (append (quicksort (remove-if-not #'(lambda (x) (<= x pivot)) (rest seq))) ; recursively call quicksort on the sequence with all elements less than or equal to pivot
              (list pivot) ; add pivot at the end of the sequence
              (quicksort (remove-if-not #'(lambda (x) (> x pivot)) (rest seq)))))) ; recursively call quicksort on the sequence with all elements greater than pivot