;; This is a code snippet in Common Lisp that implements a function for finding a
;; specific pair of numbers in an input list whose sum is equal to a given value.
;; The function takes in two arguments - the input list and the target sum.
;; It uses a helper function to keep track of previously seen numbers in a hashtable,
;; and iterates through the list to find the complement of the current number.
;; If the complement exists in the hashtable, then the pair is found and returned.
;; Otherwise, the current number is added to the hashtable for future comparisons.

(defun find-sum-pair (list target-sum)
  "Returns the pair of numbers in LIST whose sum is TARGET-SUM, or NIL if no such pair exists."

  (let ((nums-table (make-hash-table))) ; create a hashtable to store previously seen numbers
    (dolist (num list)                  ; iterate through the list
      (let ((complement (- target-sum num))) ; calculate the complement of the current number
        (if (gethash complement nums-table)   ; check if the complement exists in the hashtable
            (return (list num complement))    ; if so, return the pair of numbers
            (setf (gethash num nums-table) t)) ; otherwise, add the current number to the hashtable
        ))
    nil)) ; return NIL if no pair is found