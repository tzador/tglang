(let ((num 10)) ; create a variable 'num' with value 10
  (when (> num 5) ; use 'when' to check if num is greater than 5
    (print "The number is greater than 5."))) ; print the message if condition is satisfied

(loop for i from 0 to 5 do ; create a loop from 0 to 5 with variable 'i'
  (write-line (princ-to-string i))) ; convert the number to a string and print it on a new line

(defclass shape () ; create a class named 'shape'
  ((width :accessor width :initarg :width) ; create an accessor method for width
   (height :accessor height :initarg :height))) ; create an accessor method for height

(defmethod area ((shape shape)) ; create a method named 'area' that takes in an object of 'shape' class
  (* (width shape) (height shape))) ; multiply the width and height using accessor methods of the object

(defparameter *point* #S(point :x 3 :y 4)) ; create a global variable '*point*' that is an instance of 'point' structure

(defun distance (point) ; create a function named 'distance' that takes in a point
  (sqrt (+ (expt (slot-value point 'x) 2) ; calculate distance using pythagorean theorem
           (expt (slot-value point 'y) 2))))

(setf *print-readably* nil) ; set the global variable to print without quoting strings

(format t "The value of num is ~A.~%" num) ; print the value of num on the screen using format

(with-open-file (stream "example.txt" :direction :output) ; create a file named 'example.txt' for writing
  (format stream "This is an example.")) ; write the message to the file

(with-open-file (stream "example.txt" :direction :input) ; open the file for reading
  (let ((contents (read-line stream))) ; read the first line of the file and store it in a variable 'contents'
    (print contents))) ; print the contents of the file on the screen

(defun factorial (num) ; create a function named 'factorial' that takes in a number
  (if (<= num 1) ; base case
      1 ; return 1 if num is 0 or 1
      (* num (factorial (- num 1))))) ; recursively multiply the number with all the numbers below it