(defun fibonacci (n) ; define a function to calculate the nth number in the Fibonacci sequence
  (if (<= n 1) ; check if n is less than or equal to 1 (base case)
      n ; return n if it is
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))) ; otherwise, recursively call the function with n-1 and n-2 and add the results

(defun factorial (n) ; define a function to calculate the factorial of n
  (if (= n 0) ; check if n is equal to 0 (base case)
      1 ; return 1 if it is
      (* n (factorial (- n 1))))) ; otherwise, recursively call the function with n-1 and multiply the results

(defun sum-of-squares (n) ; define a function to calculate the sum of the squares from 1 to n
  (if (<= n 1) ; check if n is less than or equal to 1 (base case)
      1 ; return 1 if it is
      (+ (* n n) (sum-of-squares (- n 1))))) ; otherwise, recursively call the function with n-1 and add the squares of n and the result

(format t "Please enter a number: ") ; print a message asking for user input
(let ((input (read))) ; store the user's input in a variable
  (format t "The nth number in the Fibonacci sequence is ~a~%" (fibonacci input)) ; call the fibonacci function with the user's input and print the result
  (format t "The factorial of ~a is ~a~%" input (factorial input)) ; call the factorial function with the user's input and print the result
  (format t "The sum of the squares from 1 to ~a is ~a~%" input (sum-of-squares input))) ; call the sum-of-squares function with the user's input and print the result