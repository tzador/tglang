(defvar *database-info* '("Bob" 22 "Male") "Stores information about a person in a database [Name, Age, Gender]")

(defun get-age (person)
  "Get the age of a person in the database"
  (car (rest person))) ; get second element of list, which is the age

(defun update-age (person new-age)
  "Update the age of a person in the database"
  (setf (second person) new-age)) ; set the second element of list to new age value

(defun add-person (name age gender)
  "Add a person to the database"
  (push (list name age gender) *database-info*))

(defun remove-person (name)
  "Remove a person from the database"
  (setf *database-info* (remove name *database-info* :key #'first))) ;remove all elements with the given name as the first element

(defun get-gender (person)
  "Get the gender of a person in the database"
  (third person)) ; get the third element of list, which is the gender

(defun get-oldest-person ()
  "Get the oldest person in the database"
  (car (sort *database-info* #'> :key #'second))) ;sort the database by age in descending order and get the first element

(defun get-average-age ()
  "Get the average age of all people in the database"
  (/ (reduce #'+ (mapcar #'get-age *database-info*)) (length *database-info*))) ; map over database getting age of each person, reduce the list using addition and divide by number of people

(add-person "Alice" 30 "Female") ; add Alice to database
(add-person "Tim" 45 "Male") ; add Tim to database

(remove-person "Bob") ; remove Bob from database

(update-age (get-oldest-person) 50) ; update the oldest person's age to 50

(get-gender (get-oldest-person)) ; get the gender of the oldest person in the database

(get-average-age) ; get the average age of all people in the database