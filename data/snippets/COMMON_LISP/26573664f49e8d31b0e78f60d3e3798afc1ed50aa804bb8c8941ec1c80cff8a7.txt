(defun merge-sort (lst)                                   ; Defining a function called 'merge-sort' that takes in a list as a parameter
  (when (<= (length lst) 1) LST)                          ; If the length of the list is less than or equal to 1, return the list
  (let ((midpoint (floor (length lst) 2)))                ; Create a variable 'midpoint' that stores the result of dividing the length of the list by 2 rounded down
    (let ((left (merge-sort (subseq lst 0 midpoint))))    ; Create a variable 'left' that stores the result of calling 'merge-sort' on the first half of the list
      (let ((right (merge-sort (subseq lst midpoint))))   ; Create a variable 'right' that stores the result of calling 'merge-sort' on the second half of the list
        (merge left right))))                            ; Merges the two halves of the list and returns the sorted list

(merge-sort '(9 6 3 2 5 1 4 7 8))                         ; Calls the 'merge-sort' function on the list (9 6 3 2 5 1 4 7 8) and returns the sorted list (1 2 3 4 5 6 7 8 9)