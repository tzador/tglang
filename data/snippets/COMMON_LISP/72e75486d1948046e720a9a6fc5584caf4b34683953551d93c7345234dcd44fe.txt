(defun quicksort (list)

  "This function implements the quicksort algorithm which sorts a list of numbers in ascending order.

  Input:
  list - the list of numbers to be sorted.

  Output:
  sorted_list - the sorted list of numbers in ascending order."

  ;; Base case: empty list
  if (list = nil)
      then (return-from quicksort nil)

  ;; Partition the list based on the first element as the pivot
  let ((pivot (first list))
       (less ()))
       (equal ()))
       (greater ()))

    ;; Loop through the list and partition elements into less, equal, and greater lists
    dolist (number list)
      if (number < pivot)
          then (setf less (cons number less))
      elseif (number = pivot)
          then (setf equal (cons number equal))
      else
          (setf greater (cons number greater)))

  ;; Recursively sort less and greater lists and combine them with equal list
  append (quicksort less) equal (quicksort greater)))