(defvar *data*  ; defining global variable 
  '((1 2 3) (4 5 6) (7 8 9)))  ; setting initial value
  
(defun print-data (data) ; defining function that takes in a parameter 'data'
  (format t "Data: ~a~%" data))  ; print statement

(defun sum-list (data) ; defining function to find sum of all elements in nested list
  (let ((sum 0))  ; initializing sum variable
    (dolist (list data) ; loop through each list
      (dolist (num list) ; loop through each number in list
        (setf sum (+ sum num)))) ; add num to sum
    sum)) ; return sum
    
(defun mean-list (data) ; defining function to find mean of all elements in nested list
  (let ((sum (sum-list data)) ; using sum-list function to get total sum
        (count 0)) ; initializing count variable
    (dolist (list data) ; loop through each list
      (dolist (num list) ; loop through each number in list
        (setq count (+ count 1)))) ; increment count by 1
    (/ sum count))) ; divide sum by count to get mean
    
(print-data *data*) ; print initial data
; Output: Data: ((1 2 3) (4 5 6) (7 8 9))
(format t "Sum of all elements: ~a~%" (sum-list *data*)) ; print sum of all elements
; Output: Sum of all elements: 45
(format t "Mean of all elements: ~a~%" (mean-list *data*)) ; print mean of all elements
; Output: Mean of all elements: 5