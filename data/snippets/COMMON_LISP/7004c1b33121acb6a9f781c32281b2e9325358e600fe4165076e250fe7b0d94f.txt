(defun recursive-divide (list element)
  (let ((result (list))
        (index 0))
    ;; loop through each element in the list
    (dolist (e list)
      ;; add element to result list
      (push e result)
      ;; increment index
      (incf index)
      ;; if index is equal to the element, divide each element by the index
      (when (= index element)
        (setf result (mapcar #'(lambda (x) (/ x index)) result))
        ;; reset index
        (setf index 0)))
    ;; return result list
    result))