(defclass employee                   ; defines a class named 'employee'
   ((name                            ; defines a slot named 'name' of type 'string'
     :type string)
    (age                             ; defines a slot named 'age' of type 'integer'
     :type integer)
    (salary                          ; defines a slot named 'salary' of type 'float'
     :type float)
    (department                      ; defines a slot named 'department' of type 'string'
     :type string)
    (projects                        ; defines a slot named 'projects' of type 'list'
     :type list
     :initform ())                   ; initializes the slot to an empty list
    (address                         ; defines a slot named 'address' of type 'string'
     :type string
     :initarg :address)))            ; allows the slot to be set using the keyword argument ':address'

(defgeneric get-salary               ; defines a generic function named 'get-salary'
  (employee)                         ; the parameter 'employee' is the object it will operate on
  (:documentation "Returns the salary of the given employee")) ; adds documentation

(defmethod get-salary ((employee employee)) ; defines a method for the generic function 'get-salary' that operates on objects of type 'employee'
  (slot-value employee 'salary))       ; retrieves the value of the slot 'salary' from the employee object

(defmethod give-bonus ((employee employee) bonus) ; defines a method for the generic function 'give-bonus' that takes an additional parameter 'bonus'
  (incf (slot-value employee 'salary) bonus))     ; increases the value of the slot 'salary' from the employee object by the value of 'bonus'

(defparameter *employees*              ; defines a global variable '*employees*'
  (list (make-instance 'employee :name "John Smith" :age 30 :salary 50000 :department "Sales" :address "123 Main St")
        (make-instance 'employee :name "Jane Doe" :age 35 :salary 60000 :department "Marketing" :address "456 Maple St")))
                                        ; initializes the variable with a list of employee objects

(defun get-total-salary (employees)     ; defines a function named 'get-total-salary' that takes a list of employee objects as a parameter
  (loop for employee in employees       ; loops through each employee in the list
        summing (get-salary employee))) ; calls the method 'get-salary' on each employee and sums the results

(setf (getf (nth 1 *employees*)        ; sets the value of the slot 'address' for the second employee in the list
             :address) "789 Oak St")

(print (get-total-salary *employees*)) ; prints the total salary of all employees in the list