(format t "Enter a number of rows: ") ;Prompts user to enter number of rows
(setq rows (read)) ;Stores user input in variable 'rows'
(labels ((initialize (row col) ;Defines a function to initialize the matrix with random numbers
           (if (= col 0) ;Base case: when column equals 0, stop recursion
               nil
               (progn (setf (aref matrix row col) (random 10)) ;Sets current element in matrix to random number between 0 and 10
                      (initialize row (- col 1)))) ;Recursively calls functions to initialize remaining rows
         (generate (row col) ;Defines a function to generate the matrix
           (if (= row 0) ;Base case: when number of rows equals 0, stop recursion
               (initialize 0 col) ;Calls initialize function with current row and column values
               (progn (initialize (- row 1) col) ;Recursively calls initialize function with decremented row
                      (initialize row col)))) ;Recursively calls initialize function with current row and column values
  (setq matrix (make-array (list rows rows) :initial-element 0)) ;Creates a matrix with specified number of rows and columns
  (format t "Enter number of columns: ") ;Prompts user to enter number of cols
  (setq cols (read)) ;Stores user input in variable 'cols'
  (generate rows cols) ;Calls generate function with number of rows and columns
  (format t "Generated matrix:~%") ;Outputs text
  (print matrix))) ;Prints the generated matrix