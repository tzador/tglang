// Define a complex data type
ComplexDataType MyComplexType;

// Add properties to the complex data type
MyComplexType.StringProperty = "Hello 1C_ENTERPRISE!";
MyComplexType.IntegerProperty = 5;
MyComplexType.BooleanProperty = True;

// Define a record set
RecordSet MyRecordSet;
// Add fields to the record set
MyRecordSet.AddField("Name", FieldType.String);
MyRecordSet.AddField("Age", FieldType.Integer);
MyRecordSet.AddField("IsMarried", FieldType.Boolean);

// Add records to the record set
MyRecordSet.AddRecord("John", 25, True);
MyRecordSet.AddRecord("Mary", 30, False);

// Create a variable of type Integer
Integer MyInteger;

// Use conditional statement to check if the StringProperty of MyComplexType is equal to "Hello 1C_ENTERPRISE!"
If MyComplexType.StringProperty = "Hello 1C_ENTERPRISE!" Then
    // Assign a value to MyInteger
    MyInteger = 1;
Else
    // Assign a different value to MyInteger
    MyInteger = 2;
EndIf

// Create a string variable
String MyString;

// Use a loop to iterate through each record in MyRecordSet
For Each Record In MyRecordSet Do
    // Concatenate the Name and Age fields into MyString
    MyString = Record.Name + " is " + Record.Age + " years old";

    // Use a conditional statement to check if the IsMarried field is True
    If Record.IsMarried Then
        // Concatenate "and is married" to MyString
        MyString = MyString + " and is married";
    EndIf

    // Print MyString to the console
    Console.Print(MyString);
EndDo

// Define a function that calculates the factorial of a given number
Function Factorial(Number)
    // Create a variable to store the result
    Integer Result = 1;

    // Use a loop to calculate the factorial
    for i = 1 To Number Do
        Result = Result * i;
    EndDo

    // Return the result
    Return Result;
EndFunction

// Call the Factorial function with MyComplexType.IntegerProperty as the input
Integer MyResult = Factorial(MyComplexType.IntegerProperty);

// Print the result to the console
Console.Print("The factorial of " + MyComplexType.IntegerProperty + " is: " + MyResult);