/*
* This code snippet is a recursive function that performs binary search on an array of integers
* Parameters:
*   - arr: the array of integers to be searched
*   - low: the index of the first element in the array
*   - high: the index of the last element in the array
*   - target: the integer being searched for
* Returns:
*   - The index of the target integer if found, otherwise -1
*/

Function RecursiveBinarySearch(arr, low, high, target) {
    
    If (low > high) { // Base case, the target integer was not found
        Return -1;
    }
    
    // Calculate the middle index
    Let mid = RoundUp((low + high) / 2);
    
    If (target == arr[mid]) { // Check if the target integer is at the middle index
        Return mid;
    } Else If (target < arr[mid]) { // Check if the target integer is in the first half of the array
        Return RecursiveBinarySearch(arr, low, mid - 1, target);
    } Else { // Check if the target integer is in the second half of the array
        Return RecursiveBinarySearch(arr, mid + 1, high, target);
    }
}

/* Sample call of the function */
Let arr = [1, 3, 5, 7, 9, 11];
Let target = 9;
Let result = RecursiveBinarySearch(arr, 0, arr.Length - 1, target);
Print(result); // Output: 4