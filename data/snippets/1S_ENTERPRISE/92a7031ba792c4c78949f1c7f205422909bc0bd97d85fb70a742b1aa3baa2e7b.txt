// This snippet creates a SalesOrder class and adds functionality for calculating tax and total.

Class SalesOrder
{
    Properties
        orderDate Date; // Order date
        customerName String; // Name of the customer
        orderItems Array; // Array of order items
        subTotal Number; // Subtotal of the order
        tax Number; // Tax amount
        total Number = 0; // Total order amount

    Methods
        // Method to calculate tax based on order items' subtotal
        Procedure CalculateTax()
        {
            For Each orderItem in orderItems Do
                tax = tax + (orderItem.price * orderItem.quantity * 0.18);
        }

        // Method to calculate total order amount
        Procedure CalculateTotal()
        {
            total = subTotal + tax;
        }

        // Method to add an order item to the order
        Procedure AddOrderItem(item)
        {
            orderItems.Add(item);
        }

        // Method to remove an order item
        Procedure RemoveOrderItem(index)
        {
            orderItems.RemoveAt(index);
        }
}

// Example usage
// Create a new SalesOrder object
SalesOrder myOrder = New SalesOrder;

// Set properties
myOrder.orderDate = Date("2020/01/01");
myOrder.customerName = "John Doe";

// Add order items
myOrder.AddOrderItem({name = "Product 1", price = 100, quantity = 1});
myOrder.AddOrderItem({name = "Product 2", price = 200, quantity = 2});

// Calculate tax and total
myOrder.CalculateTax();
myOrder.CalculateTotal();

// Print results
Message($"Order date: {myOrder.orderDate}");
Message($"Customer name: {myOrder.customerName}");
Message($"Subtotal: {myOrder.subTotal}");
Message($"Tax: {myOrder.tax}");
Message($"Total: {myOrder.total}");

// Output:
//
// Order date: 2020/01/01
// Customer name: John Doe
// Subtotal: 600
// Tax: 108
// Total: 708