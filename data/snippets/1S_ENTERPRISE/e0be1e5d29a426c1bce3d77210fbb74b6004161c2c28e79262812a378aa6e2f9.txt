/*
This code snippet is written in 1C_ENTERPRISE, a programming language created by 1C Company.
It is primarily used for developing enterprise-level business applications.
The following code snippet is an example of a complex function that calculates the factorial of a number using recursion. 
*/

Function CalculateFactorial(Number)
						
	// The function takes in a parameter 'Number' which is the number whose factorial is to be calculated.
	// It also has a return value 'Factorial' which stores the result of the calculation.

	Return Factorial; // Declaring the return variable.
	
	If Number < 0 Then // Checks if the number is negative, if yes, then displays an error message.
		Message("Number cannot be negative!");
	ElseIf Number = 0 Then // If the number is 0, then the factorial is 1.
		Factorial = 1;
	Else  // If the number is positive, then it calculates the factorial recursively.
		Factorial = Number * CalculateFactorial(Number - 1); //(Number-1) is passed as a parameter to call the function again.
	EndIf
	
	Return Factorial; // Returns the calculated factorial.
	
EndFunction // End of function definition.

// Calling the function with a parameter 5 to calculate the factorial of 5.
Message("Factorial of 5 is: " + CalculateFactorial(5)); // Prints the result "Factorial of 5 is: 120"