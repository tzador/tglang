// This code snippet creates a new object called "invoice" with properties and methods for managing invoices in a 1C Enterprise application.

// Define a class for the invoice object
Class Invoice
	Begin

	// Declare the properties of the invoice object
	Property InvoiceNumber As String;
	Property CustomerName As String;
	Property BillingAddress As String;
	Property TotalAmount As Number;
	Property DueDate As Date;
	Property PaymentStatus As Enum(Paid, Unpaid, PartiallyPaid);

	// Define the method for creating a new invoice
	Procedure Create()
		Begin

		// Prompt the user to enter the invoice details
		Write("Enter invoice number:");
		Read(InvoiceNumber);
		Write("Enter customer name:");
		Read(CustomerName);
		Write("Enter billing address:");
		Read(BillingAddress);
		Write("Enter total amount:");
		Read(TotalAmount);
		Write("Enter due date:");
		Read(DueDate);
		Write("Enter payment status (Paid, Unpaid, or Partially Paid):");
		Read(PaymentStatus);

		// Validate the input and set default values
		If InvoiceNumber = "" Then InvoiceNumber = "NO_NUMBER";
		If CustomerName = "" Then CustomerName = "NO_NAME";
		If BillingAddress = "" Then BillingAddress = "NO_ADDRESS";
		If TotalAmount < 0 Then TotalAmount = 0;
		If DueDate = "" Then DueDate = Today();
		If PaymentStatus = "" Then PaymentStatus = Paid;

		// Display a message with the newly created invoice details
		Write("Invoice created successfully with the following details:");
		Write("Invoice Number: " + InvoiceNumber + "; Customer Name: " + CustomerName + "; Billing Address: " + BillingAddress + "; Total Amount: " + TotalAmount + "; Due Date: " + DueDate + "; Payment Status: " + PaymentStatus);

		EndProcedure;

	// Define the method for updating the invoice details
	Procedure Update()
		Begin

		// Prompt the user to select which details to update
		Write("Select which detail to update (1) Invoice Number; (2) Customer Name; (3) Billing Address; (4) Total Amount; (5) Due Date; (6) Payment Status");
		Read(UpdateChoice);

		// Based on the user's choice, update the corresponding property
		If UpdateChoice = 1 Then
			Write("Enter new invoice number:");
			Read(InvoiceNumber);
		ElIf UpdateChoice = 2 Then
			Write("Enter new customer name:");
			Read(CustomerName);
		ElIf UpdateChoice = 3 Then
			Write("Enter new billing address:");
			Read(BillingAddress);
		ElIf UpdateChoice = 4 Then
			Write("Enter new total amount:");
			Read(TotalAmount);
		ElIf UpdateChoice = 5 Then
			Write("Enter new due date:");
			Read(DueDate);
		ElIf UpdateChoice = 6 Then
			Write("Enter new payment status (Paid, Unpaid, or Partially Paid):");
			Read(PaymentStatus);

		// Display a message with the updated invoice details
		Write("Invoice updated successfully with the following details:");
		Write("Invoice Number: " + InvoiceNumber + "; Customer Name: " + CustomerName + "; Billing Address: " + BillingAddress + "; Total Amount: " + TotalAmount + "; Due Date: " + DueDate + "; Payment Status: " + PaymentStatus);

		EndProcedure;

	// Define the method for deleting the invoice
	Procedure Delete()
		Begin
		Write("Are you sure you want to delete this invoice? (Yes or No)");
		Read(Confirmation);
		If Confirmation = "Yes" Then
			Clear(InvoiceNumber);
			Clear(CustomerName);
			Clear(BillingAddress);
			Clear(TotalAmount);
			Clear(DueDate);
			Clear(PaymentStatus);
			Write("Invoice deleted successfully.");
		Else
			Write("Action cancelled.");
		EndIf;
		EndProcedure;

	// Define the method for printing the invoice
	Procedure Print()
		Begin
		Write("Printing invoice with the following details:");
		Write("Invoice Number: " + InvoiceNumber + "; Customer Name: " + CustomerName + "; Billing Address: " + BillingAddress + "; Total Amount: " + TotalAmount + "; Due Date: " + DueDate + "; Payment Status: " + PaymentStatus);
		EndProcedure;

EndClass

// Create a new invoice object and call the Create, Update, Delete, and Print methods
NewInvoice = New Invoice;
NewInvoice.Create();
NewInvoice.Update();
NewInvoice.Delete();
NewInvoice.Print();