//Declaring a complex data type
ComplexDataType cdt;
cdt.Name = "Customer"; //Setting the name of the complex data type
cdt.Attributes.Add("CustomerID", "Integer"); //Adding an attribute to the complex data type with its data type
cdt.Attributes.Add("Name", "String(50)"); //Adding another attribute with its data type
cdt.Attributes.Add("Address", "String(100)");
cdt.Attributes.Add("City", "String(50)");
cdt.Attributes.Add("CountryCode", "String(3)");

//Defining a new catalog based on the complex data type
Catalog Customers = new Catalog("Customers", cdt);

//Adding a new record to the catalog
Customers.AddRecord("1234", "John Doe", "123 Main Street", "New York", "USA");

//Accessing the attributes of the record
Customers.Record(0).Attribues["Name"]; //Returns "John Doe"
Customers.Record(0).Attrbiutes["CountryCode"] = "CAN"; //Changes the value of "CountryCode" attribute to "CAN"
Customers.Record(0).Attributes.Count; //Returns the number of attributes in the record

//Creating a new object from the catalog record
CustomerObj = Customers.GetObject("1234");

//Accessing the object's attributes
CustomerObj.Name; //Returns "John Doe"
CustomerObj.City; //Returns "New York"
CustomerObj.CountryCode = "CAN"; //Changes the value of "CountryCode" attribute to "CAN" for the object

//Saving changes to the catalog
Customers.Save();

//Deleting a record from the catalog
Customers.RemoveRecord("1234");

//Managing transactions
Transaction transaction = new Transaction();
transaction.Begin(); //Starts the transaction
Customers.AddRecord("5678", "Jane Smith", "456 Maple Avenue", "Los Angeles", "USA"); //Adding a new record
transaction.Commit(); // Commits the transaction

transaction.Begin(); //Starts a new transaction
Customers.RemoveRecord("5678"); //Removing the record added in the previous transaction
transaction.Rollback(); //Rolls back the transaction, the record will not be deleted

//Creating a business process
BusinessProcess MyProcess = new BusinessProcess("MyProcess");

//Defining input parameters
MyProcess.InputParameters.Add("ID", "String(10)");
MyProcess.InputParameters.Add("Name", "String");

//Defining output parameters
MyProcess.OutputParameters.Add("IsRegistered", "Boolean");

//Defining algorithm steps
Step1 = MyProcess.NewStep("Step1");
Step1.Code = "If ID = '1234' Then IsRegistered = True; Else IsRegistered = False;";

Step2 = MyProcess.NewStep("Step2");
Step2.Code = "If Name = 'John' Then IsRegistered = True; Else IsRegistered = False;";

//Running the business process
InputData = new Structure("ID", "1234", "Name", "John"); //Creating input structure
OutputData = MyProcess.Execute(InputData); //Executing the business process
Print(OutputData["IsRegistered"]); //Prints "True" as output