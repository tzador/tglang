// This code snippet is an example of a complex function in 1C_ENTERPRISE.
// It takes in two arrays and performs a custom sorting algorithm.

// Declare the function with two parameters, both of type Array.
Function CustomSortingAlgorithm(array1, array2)
	
	// Initialize a counter variable to keep track of the number of swaps made.
	var counter = 0
	
	// Use a for loop to iterate through the first array.
	for i = 0 to array1.Count() - 1 Do
			
		// Use a nested for loop to compare each element in the first array to the elements in the second array.
		for j = 0 to array2.Count() - 1 Do
			
			// If the element from the first array is larger than the element from the second array, swap them.
			if array1[i] > array2[j]
				
				// Use the SwapElements method to swap the elements.
				SwapElements(array1, i, array2, j)
				
				// Increment the counter variable.
				counter = counter + 1
			EndIf
		EndDo
	EndDo
	
	// Use a while loop to continue sorting until no more swaps are made.
	while counter > 0 Do
		
		// Reset the counter variable.
		counter = 0
		
		// Use a nested for loop to compare each element in the first array to the elements in the second array.
		for k = 0 to array1.Count() - 1 Do
			
			// Use a nested for loop to compare each element in the second array to the elements in the first array.
			for l = 0 to array2.Count() - 1 Do
				
				// If the element from the first array is larger than the element from the second array, swap them.
				if array1[k] > array2[l]
				
					// Use the SwapElements method to swap the elements.
					SwapElements(array1, k, array2, l)
					
					// Increment the counter variable.
					counter = counter + 1
				EndIf
			EndDo
		EndDo
	EndDo
	
	// Return the sorted arrays.
	Return array1, array2
EndFunction

// Call the CustomSortingAlgorithm function with two example arrays.
CustomSortingAlgorithm([5, 3, 9, 2], [7, 4, 1, 8])

// Expected output:
// [2, 3, 5, 9], [1, 4, 7, 8]