// This function generates an array of random integers
// with the specified length
Function GenerateRandomArray(Length)
    Array = New Array;
    For i = 0 To Length - 1 Do
        Array.Add(Random(100));
    EndDo;
    Return Array;
EndFunction;

// This function sorts the given array in ascending order
Function SortArrayAscending(Array)
    Length = Array.Count();
    For i = 0 To Length - 1 Do
        MinIndex = i;
        For j = i + 1 To Length - 1 Do
            If Array[j] < Array[MinIndex] Then
                MinIndex = j;
            EndIf;
        EndDo;
        Temp = Array[i];
        Array[i] = Array[MinIndex];
        Array[MinIndex] = Temp;
    EndDo;
    Return Array;
EndFunction;

// This function merges two sorted arrays into one sorted array
Function MergeSortedArrays(Array1, Array2)
    Array = New Array;
    i = 0;
    j = 0;
    While i < Array1.Count() And j < Array2.Count() Do
        If Array1[i] < Array2[j] Then
            Array.Add(Array1[i]);
            i = i + 1;
        Else
            Array.Add(Array2[j]);
            j = j + 1;
        EndIf;
    EndWhile;
    // Check if any elements are left in the first array
    While i < Array1.Count() Do
        Array.Add(Array1[i]);
        i = i + 1;
    EndWhile;
    // Check if any elements are left in the second array
    While j < Array2.Count() Do
        Array.Add(Array2[j]);
        j = j + 1;
    EndWhile;
    Return Array;
EndFunction;

// This function performs merge sort on an array
// by recursively splitting it into smaller arrays
// and merging them back in ascending order
Function MergeSort(Array)
    Length = Array.Count();
    // Base case, return the array if it only has one element
    If Length = 1 Then
        Return Array;
    EndIf;
    // Calculate the middle index to split the array
    Mid = Length / 2;
    // Get the left and right halves of the array
    Left = Array.SubArray(0, Mid);
    Right = Array.SubArray(Mid, Length - Mid);
    // Recursively sort the left and right halves
    Left = MergeSort(Left);
    Right = MergeSort(Right);
    // Merge the sorted halves
    SortedArray = MergeSortedArrays(Left, Right);
    Return SortedArray;
EndFunction;

// Main program
Arr = GenerateRandomArray(10); // Generate an array of 10 random numbers
Print("Before sorting:", Arr); // Print the array before sorting
Arr = SortArrayAscending(Arr); // Sort the array in ascending order
Print("After sorting:", Arr); // Print the array after sorting
Print("Using merge sort:", MergeSort(Arr)); // Print the array after performing merge sort