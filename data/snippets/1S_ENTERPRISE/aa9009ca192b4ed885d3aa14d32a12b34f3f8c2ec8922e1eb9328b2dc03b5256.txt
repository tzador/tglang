// Declare a class named "Employee" with private attributes
Class Employee
    Private name As String; // Represents employee's name
    Private position As Enum("Manager", "Assistant"); // Represents employee's position
    Private salary As Double; // Represents employee's salary

    // Constructor method with parameters for name, position, and salary
    Procedure Employee(Name, Position, Salary)
        Me.name = Name;
        Me.position = Position;
        Me.salary = Salary;
    EndProcedure

    // Getter method to retrieve employee's name
    Function GetName() As String
        Return Me.name;
    EndFunction

    // Setter method to update employee's position
    Procedure SetPosition(Position)
        Me.position = Position;
    EndProcedure

    // Method to calculate employee's total earnings for a given month
    Procedure CalculateEarnings(Month)
        // Define a variable to hold the total earnings
        Var totalEarnings As Double = 0;

        // Check if employee is a Manager or Assistant
        If Me.position = "Manager" Then
            // Calculate earnings for a Manager
            totalEarnings = Me.salary * 1.2; // 20% bonus for Managers
        Else
            // Calculate earnings for an Assistant
            totalEarnings = Me.salary * 1.15; // 15% bonus for Assistants
        EndIf

        // Print the earnings for the given month
        Message("Employee " + Me.name + " earned " + TotalEarnings.ToString() + " in " + Month);
    EndProcedure
EndClass

// Create a new instance of the "Employee" class named "John" with position "Manager" and salary 5000
Var John As Employee = New Employee("John", "Manager", 5000);

// Get John's name and print it
Var JohnName As String = John.GetName();
Message("Employee name: " + JohnName);

// Set John's position to "Assistant"
John.SetPosition("Assistant");

// Calculate John's earnings for the month of July
John.CalculateEarnings("July");