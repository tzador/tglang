// This code is for creating a binary tree data structure
// The binary tree will store integer values and can have any number of children per node
// Each node will have a left and right child, as well as a parent pointer
// The root node will have a parent pointer of null

//#Region creating the class for the binary tree
Class BinaryTree
    // declare private variables
    Private RootNode As Node;
    Private CurrentNode As Node;
    Private ChildNumber As Number;

    // declare public functions
    // function to add new node to the tree
    Public Function AddNode(Value As Number) As Node
        // create a new node with given value
        Node NewNode = New Node(Value);

        // check if root node is null, if so, make this new node the root node
        If RootNode = Null Then
            RootNode = NewNode;
            Return NewNode;
        EndIf

        // if root node is not null, traverse the tree to find the proper parent node
        CurrentNode = RootNode;
        While True Do
            // set ChildNumber variable to either 1 or 2 based on value comparison
            // 1 indicates value is less than current node's value, 2 indicates value is greater
            ChildNumber = IIF(Value < CurrentNode.Value, 1, 2);

            // check if current node has a child in the ChildNumber position
            If CurrentNode.childNodes[ChildNumber] = Null Then
                // if child does not exist, set the current node's child to the new node
                CurrentNode.childNodes[ChildNumber] = NewNode;
                
                // set the new node's parent to the current node
                NewNode.Parent = CurrentNode;

                // exit while loop
                Break;
            Else
                // if child does exist, update current node to be the child
                CurrentNode = CurrentNode.childNodes[ChildNumber];
            EndIf
        EndWhile

        // return the new node
        Return NewNode;
    EndFunction

    // function to remove a node from the tree
    Public Sub RemoveNode(Value As Number)
        // check if root node is null, if so, tree is empty so cannot remove any nodes
        If RootNode = Null Then
            Return;
        EndIf

        // if root node is not null, traverse the tree to find the node that needs to be removed
        CurrentNode = RootNode;
        While True Do
            // set ChildNumber variable to either 1 or 2 based on value comparison
            // 1 indicates value is less than current node's value, 2 indicates value is greater
            ChildNumber = IIF(Value < CurrentNode.Value, 1, 2);

            // check if current node's child in the ChildNumber position has the value we are looking for
            If CurrentNode.childNodes[ChildNumber].Value = Value Then
                // store the child node in a temporary variable for reassignment later
                Node TempNode = CurrentNode.childNodes[ChildNumber];
                
                // check if child node has any children
                If TempNode.childNodes[1] = Null And TempNode.childNodes[2] = Null Then
                    // if child node has no children, set its parent's child to null (remove the node)
                    TempNode.Parent.childNodes[ChildNumber] = Null;
                ElseIf TempNode.childNodes[1] = Null Or TempNode.childNodes[2] = Null Then
                    // if child node only has one child, set its parent's child to the existing child
                    TempNode.Parent.childNodes[ChildNumber] = TempNode.childNodes[1] ?? TempNode.childNodes[2];
                Else
                    // if child node has two children, find the successor node (smallest value in right subtree)
                    Node Successor = TempNode.childNodes[2];
                    While Successor.childNodes[1] <> Null Do
                        Successor = Successor.childNodes[1];
                    EndWhile

                    // reassign parent's child pointer to the successor node
                    TempNode.Parent.childNodes[ChildNumber] = Successor;

                    // remove the successor node from its current location by setting its parent's proper child pointer to null
                    Successor.Parent.childNodes[1] = Null;
                EndIf

                // exit while loop
                Break;
            Else
                // if child does not match the value, update current node to the child
                CurrentNode = CurrentNode.childNodes[ChildNumber];
            EndIf
        EndWhile
    EndSub

    // function to search for a node with given value in the tree
    // returns the node if found, or null if not found
    Public Function SearchNode(Value As Number) As Node
        // check if root node is null, if so, tree is empty so cannot search for any nodes
        If RootNode = Null Then
            Return Null;
        EndIf

        // if root node is not null, traverse the tree to find the node with the given value
        CurrentNode = RootNode;
        While True Do
            // set ChildNumber variable to either 1 or 2 based on value comparison
            // 1 indicates value is less than current node's value, 2 indicates value is greater
            ChildNumber = IIF(Value < CurrentNode.Value, 1, 2);

            // check if current node's child in the ChildNumber position has the value we are looking for
            If CurrentNode.childNodes[ChildNumber].Value = Value Then
                // return the child node
                Return CurrentNode.childNodes[ChildNumber];
            Else
                // if child does not match the value, update current node to the child
                CurrentNode = CurrentNode.childNodes[ChildNumber];
            EndIf
        EndWhile

        // if while loop exits without finding the node, return null
        Return Null;
    EndFunction
EndClass

//#Region creating the class for the nodes in the binary tree
Class Node
    // declare public variables
    Public Value As Number;
    Public Parent As Node;
    Public ChildNodes As Array(Node);

    // constructor function to initialize node with given value
    constructor(Value As Number)
        // set the value
        this.Value = Value;

        // initialize the child nodes array with two null values
        this.ChildNodes = New Array(Node);
        this.ChildNodes[1] = Null;
        this.ChildNodes[2] = Null;
    endConstructor
EndClass

//#Region initializing a sample binary tree and performing various operations
// create a new binary tree
BinaryTree MyTree = New BinaryTree();

// add nodes to the tree and store references to them
Node Node1 = MyTree.AddNode(50);
Node Node2 = MyTree.AddNode(25);
Node Node3 = MyTree.AddNode(75);
Node Node4 = MyTree.AddNode(15);
Node Node5 = MyTree.AddNode(30);
Node Node6 = MyTree.AddNode(60);
Node Node7 = MyTree.AddNode(90);
Node Node8 = MyTree.AddNode(10);

// remove a node from the tree
MyTree.RemoveNode(75);

// search for a node in the tree
Node SearchedNode = MyTree.SearchNode(60);