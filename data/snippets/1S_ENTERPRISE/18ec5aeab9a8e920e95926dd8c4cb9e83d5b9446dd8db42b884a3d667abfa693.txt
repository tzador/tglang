// This code snippet shows how to create a custom data type in 1C Enterprise

// First, we define a new data type with the name 'Discount'. We use the 'BaseDataCompositionType' interface to create our custom type
Type Discount : BaseDataCompositionType
    Number: Number // Number property for storing the discount amount
    Percentage: Number // Number property for storing the percentage discount amount
    Description: String // String property for a description of the discount
    IsActive: Boolean // Boolean property to indicate if discount is currently active

    // Define a method to calculate discount amount based on the percentage value
    Method GetDiscountAmount()
        return (Number * Percentage)/100
    EndMethod
EndType

// Next, we create a form to enter the discount details
Form DiscountForm : DataCompositionForm
    Owner: Discount // Sets the owner object of the form as the discount type

    // Define fields to enter discount details
    NumberField: FieldEdit = { DataField: 'Number', Required: True }
    PercentageField: FieldEdit = { DataField: 'Percentage', Required: True }
    DescriptionField: StringEdit = { DataField: 'Description', Required: True }
    IsActiveField: CheckBox = { DataField: 'IsActive', Default: True }

    // Define a method to validate the entered values
    Method Validate()
        // Check if both percentage and number fields are entered
        If PercentageField.IsEmpty() Or NumberField.IsEmpty() Then
            Error = "Both percentage and number fields are required"
            Return False
        EndIF
        Else
            Return True
        EndIF
    EndMethod

    // Define a method to save the entered data as a discount object
    Method Save()
        // Create a new discount object
        NewDiscount = New Discount()

        // Set the entered values to the corresponding properties
        NewDiscount.Number = NumberField.Value()
        NewDiscount.Percentage = PercentageField.Value()
        NewDiscount.Description = DescriptionField.Value()
        NewDiscount.IsActive = IsActiveField.Value()

        // Save the object to the database
        NewDiscount.Write()

        // Show a success message
        Message("Discount saved successfully")

        // Close the form
        Close()
    EndMethod
EndForm

// Lastly, we call our form to display and enter discount details
CreatedForm = New DiscountForm()
CreatedForm.ShowModal()