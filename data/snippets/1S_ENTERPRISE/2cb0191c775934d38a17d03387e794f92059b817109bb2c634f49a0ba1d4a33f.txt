/////////////////////////////////////////////////////////////////////////////////////////////////////
// This code snippet shows a complex sorting algorithm using the 1C_ENTERPRISE language.
// It uses a recursive function to sort data in ascending order.
// The data is input as an array of integers.
// The output is also an array of integers in ascending order.
// Author: John Smith
////////////////////////////////////////////////////////////////////////////////////////////////////

// Declare variables and arrays
DIM data AS IntegerArray;
DIM temp AS Integer;

// Populate the data array with unsorted integers
data = {5, 2, 9, 1, 10, 3, 6, 8, 7, 4};

// Call the sorting function
SORTING_FUNCTION(data);

// Print the sorted array to the console
Message("Sorted Array: " + data.ToString());

// Define the sorting function
PROCEDURE SORTING_FUNCTION(my_array AS IntegerArray)
BEGIN
    // Set the base case for recursion
    IF my_array.Count < 2 THEN
        RETURN;
    ENDIF
        
    // Divide the array into two subarrays
    DIM left_array AS IntegerArray;
    DIM right_array AS IntegerArray;
    DIM pivot AS Integer;

    // Set the pivot element as the middle value of the array
    pivot = my_array[my_array.Count / 2];

    // Loop through the array and compare each element to the pivot
    FOR i = 1 TO my_array.Count DO
        IF my_array[i] < pivot THEN
            // Add the element to the left subarray
            left_array.Add(my_array[i]);
        ELSE
            // Add the element to the right subarray
            right_array.Add(my_array[i]);
        ENDIF
    ENDFOR
        
    // Sort the left and right subarrays recursively
    SORTING_FUNCTION(left_array);
    SORTING_FUNCTION(right_array);
        
    // Merge the sorted subarrays into the original array
    my_array.Clear();
    my_array.AddArray(left_array);
    my_array.Add(pivot);
    my_array.AddArray(right_array);
ENDPROCEDURE