// Declaring a variable of type "CatalogObjectType" with the name "catalogType"
CatalogObjectType catalogType;

// Initializing the catalogType variable with the value "SalePrices" from the predefined system enumeration "CatalogObjectTypeEnum"
catalogType = CatalogObjectTypeEnum.SalePrices;

// Declaring and initializing a variable of type "CatalogObject" with the name "catalogObject" 
// Call the CreateEmptyObject method of the "CatalogObjectFactory" class, passing the catalogType variable as a parameter
CatalogObject catalogObject = CatalogObjectFactory.CreateEmptyObject(catalogType);

// Setting the value of the "Name" attribute of the catalogObject to "SALE_PRICES_CATALOG"
catalogObject.Name = "SALE_PRICES_CATALOG";

// Declaring and initializing a variable of type "CatalogObjectPrices" with the name "catalogObjectPrices"
// Call the GetCatalogObjectPrices method of the catalogObject, passing the catalogType as a parameter
CatalogObjectPrices catalogObjectPrices = catalogObject.GetCatalogObjectPrices(catalogType);

// Declaring and initializing a variable of type "CatalogPriceType" with the name "catalogPriceType"
// Getting the predefined system enumeration "CatalogPriceTypeEnum" by calling the GetCatalogPriceTypeEnum method, passing the string value "Price" as a parameter
CatalogPriceType catalogPriceType = CatalogObjectPrices.GetCatalogPriceTypeEnum("Price");

// Declaring and initializing a variable of type "Property" with the name "property"
// Call the GetObjectProperty method of the "PropertyFactory" class, passing the string value "Value" as a parameter
Property property = PropertyFactory.GetObjectProperty("Value");

// Setting the value of the "Description" attribute of the property variable to "Price"
property.Description = "Price";

// Declaring and initializing a variable of type "Array" with the name "arrayOfValues"
// Call the CreateArrayOf method of the "ValueFactory" class, passing the "catalogPriceType" and "property" variables as parameters
Array arrayOfValues = ValueFactory.CreateArrayOf(catalogPriceType, property);

// Declaring and initializing a variable of type "Value" with the name "value"
// Call the CreateStringValue method of the "ValueFactory" class, passing the string value "150" as a parameter
Value value = ValueFactory.CreateStringValue("150");

// Call the SetValue method of the "Array" class, passing the value variable as a parameter
arrayOfValues.SetValue(value);

// Setting the "Prices" attribute of the catalogObjectPrices variable to the arrayOfValues variable
catalogObjectPrices.Prices = arrayOfValues;

// Saving changes to the catalogObject
catalogObject.Write();

// Outputting the catalogObject to the console
Console.WriteLine(catalogObject.ToString());