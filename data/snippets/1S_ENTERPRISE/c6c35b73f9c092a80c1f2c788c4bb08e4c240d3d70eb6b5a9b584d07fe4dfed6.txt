// This is a complex function that calculates the factorial of a given integer
Function CalcFactorial(Number)
{
    // If the number is 0, then the factorial is 1
    If Number = 0 Then
        Return 1;

    // If the number is 1, then the factorial is also 1
    If Number = 1 Then
        Return 1;

    // Otherwise, use recursion to calculate the factorial
    Return Number * CalcFactorial(Number - 1);
}

// This is a complex procedure that checks if a number is a prime
Procedure CheckPrime(Number)
{
    // Set a variable to indicate if the number is prime
    Bool IsPrime = True;

    // Loop through all numbers from 2 to the square root of the given number
    For i = 2 To Sqrt(Number) Do
    {
        // If the given number is divisible by the current number in the loop, then it is not prime
        If Number % i = 0 Then
        {
            // Change the IsPrime variable to false
            IsPrime = False;

            // Break out of the loop
            Break;
        }
    }

    // If the IsPrime variable is still true, then the number is prime
    If IsPrime Then
        // Output a message stating that the number is prime
        Message("The number is prime");
    Else
        // Output a message stating that the number is not prime
        Message("The number is not prime");
}

// Main program
Procedure Main()
{
    // Get input from the user
    Input("Enter a number", Number);

    // Calculate the factorial of the given number
    Factorial = CalcFactorial(Number);

    // Output the factorial
    Message("The factorial of " + Number + " is " + Factorial);

    // Check if the given number is prime
    CheckPrime(Number);
}

// Output:
// The factorial of 6 is 720
// The number is not prime

// Calling the main program
Main();