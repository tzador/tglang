// This is a multiline comment
// Below is a function that calculates the nth value in the Fibonacci sequence
// Input: n - the index of the desired Fibonacci number
// Output: the nth Fibonacci number
Function Fibonacci(n)
    if n <= 1 then return n  // base case
    return Fibonacci(n-1) + Fibonacci(n-2) // recursive call
EndFunction

// This is a single line comment
// Below is a class definition for a student
// Attributes: name, age, major
Class Student
    name = ""   // attribute for student's name
    age = 0     // attribute for student's age
    major = ""  // attribute for student's major

    // method to print student's information
    Method Print()
        Print(name + " is " + age + " years old and is majoring in " + major + ".")
    EndMethod
EndClass

// Below is an array of student objects
Array students = [Student("John", 18, "Computer Science"), Student("Sarah", 20, "Mathematics"), Student("Emily", 19, "Physics")]

// for loop to print student information
for each student in students do
    student.Print()
enddo

// Below is a function that checks if a number is prime
// Input: num - the number to check
// Output: true if num is prime, false if not
Function IsPrime(num)
    check = true    // flag variable for prime checking
    // loop to check all numbers up to sqrt(num)
    for i = 2 to sqrt(num) do
        if num % i == 0 then   // if num is divisible by any number, it is not prime
            check = false
            break
        endif
    enddo
    return check
EndFunction

// Below is a method to sort an array in ascending order using bubble sort
// Input: arr - the array to be sorted
Method BubbleSort(arr)
    n = arr.Length  // get length of array
    // nested for loops to iterate through each element and compare adjacent elements
    for i = 0 to n-1 do
        for j = 0 to n-i-1 do
            // compare adjacent elements and swap if necessary
            if arr[j] > arr[j+1] then
                temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
            endif
        enddo
    enddo
EndMethod

// Below is a recursive function to calculate the factorial of a number
// Input: n - the number to calculate the factorial of
// Output: the factorial of n
Function Factorial(n)
    if n == 1 then  // base case
        return 1
    else
        return n * Factorial(n-1) // recursive call
    endif
EndFunction

// example usage of functions and methods
// calculate 10th Fibonacci number
Print("10th Fibonacci number: " + Fibonacci(10))

// print if 17 is prime or not
if IsPrime(17) then
    Print("17 is prime.")
else
    Print("17 is not prime.")
endif

// calculate factorial of 5 and print it
fact = Factorial(5)
Print("Factorial of 5: " + fact)

// sort array of numbers using BubbleSort and print it
nums = [5, 2, 8, 1, 9, 4]
Print("Unsorted array: " + nums)
BubbleSort(nums)
Print("Sorted array: " + nums)