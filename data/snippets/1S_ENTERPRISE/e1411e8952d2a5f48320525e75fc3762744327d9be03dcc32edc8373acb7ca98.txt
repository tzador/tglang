//This is a code snippet in 1C_ENTERPRISE, a programming language used for business software development. 
//The following code snippet creates a custom linked list data structure with methods for adding, removing, and searching for nodes.

//Create a class for the linked list
Class LinkedList
    Private _head As Node; //private variable to keep track of the head node
    Private _count As Int; //private variable to store the number of nodes in the list

    //Method to add a new node to the end of the linked list
    Procedure Append(Value As Variant)
        Var NewNode = New Node(Value); //create a new node with the given value

        //check if the list is empty
        If _head = Undefined Then 
            _head = NewNode; //if empty, set the new node as the head
        Else //if not empty
            Var CurrentNode = _head; //start at the head node
            While CurrentNode.Next <> Undefined Do //loop until we reach the last node
                CurrentNode = CurrentNode.Next; //move to the next node
            EndDo;

            CurrentNode.Next = NewNode; //set the next node of the last node to the new node
        EndIf;

        _count += 1; //increment the node count
    EndProcedure;

    //Method to insert a new node at a specified index in the linked list
    Procedure InsertAt(Index As Int, Value As Variant)
        Var NewNode = New Node(Value); //create a new node with the given value

        //check if index is within bounds
        If Index >= 0 And Index <= _count Then 
            //check if index is 0, meaning the new node should be the head
            If Index = 0 Then 
                NewNode.Next = _head; //set the next node of the new node to the current head
                _head = NewNode; //set the new node as the head
            Else
                Var CurrentNode = _head; //start at the head node
                Var PrevNode; //variable to keep track of the previous node

                //loop until we reach the specified index
                For i = 0 To Index - 1 Do
                    PrevNode = CurrentNode;
                    CurrentNode = CurrentNode.Next;
                EndDo;

                PrevNode.Next = NewNode; //set the next node of the previous node to the new node
                NewNode.Next = CurrentNode; //set the next node of the new node to the current node at the specified index
            EndIf;

            _count += 1; //increment the node count
        EndIf;
    EndProcedure;

    //Method to remove a node from the linked list
    Procedure Remove(Value As Variant) 
        Var CurrentNode = _head; //start at the head node
        Var PrevNode; //variable to keep track of the previous node

        //loop until we find the node with the given value
        While CurrentNode <> Undefined Do 
            If CurrentNode.Value = Value Then //if found
                If PrevNode <> Undefined Then //check if previous node is defined, meaning the current node is not the head
                    PrevNode.Next = CurrentNode.Next; //set the next node of the previous node to the next node of the current node
                Else
                    _head = CurrentNode.Next; //if current node is the head, set the next node as the new head
                EndIf;

                _count -= 1; //decrement the node count
                Break; //exit the loop
            Else
                PrevNode = CurrentNode; //move to the next node
                CurrentNode = CurrentNode.Next;
            EndIf;
        EndDo;
    EndProcedure;

    //Method to search for a node with a given value in the linked list
    Function Find(Value As Variant) As Node
        Var CurrentNode = _head; //start at the head node

        //loop until we find the node with the given value
        While CurrentNode <> Undefined Do 
            If CurrentNode.Value = Value Then //if found, return the node
                Return CurrentNode;
            Else
                CurrentNode = CurrentNode.Next; //move to the next node
            EndIf;
        EndDo;

        Return Undefined; //if not found, return undefined
    EndFunction;

EndClass;

//Create a class for the node in the linked list
Class Node
    Public Value As Variant; //public variable to store the value of the node
    Public Next As Node; //public variable to keep track of the next node

    Procedure New(Value As Variant)
        Self.Value = Value; //set the value of the node
        Self.Next = Undefined; //set the next node as undefined
    EndProcedure;
EndClass;

//Example usage of the linked list class
Var List = New LinkedList; //create a new instance of the linked list

List.Append("Apple"); //add "Apple" to the end of the list
List.Append("Banana"); //add "Banana" to the end of the list
List.InsertAt(1, "Orange"); //insert "Orange" at index 1, shifting "Banana" to index 2
List.Remove("Banana"); //remove "Banana" from the list
Var Node = List.Find("Apple"); //search for the node with value "Apple" in the list