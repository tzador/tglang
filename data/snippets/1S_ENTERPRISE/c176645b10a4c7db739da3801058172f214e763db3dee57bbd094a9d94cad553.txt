// OpenSalesDocuments
// Function to open sales documents based on customer and document type

Procedure OpenSalesDocuments(CustomerCode, DocumentType)
	WriteDocumentLog("Opening sales document for" + CustomerCode + "with type" + DocumentType)
	// Retrieve customer information
	CheckCustomerInfo(CustomerCode)

	// Get customer's open sales orders
	SalesOrders = GetCustomerSalesOrders(CustomerCode)

	// Filter sales orders by document type
	FilterSalesOrders(SalesOrders, DocumentType)

	// Open sales orders in new window
	For each SalesOrder in SalesOrders
		OpenSalesOrderWindow(SalesOrder)
	EndFor
EndProcedure

// CheckCustomerInfo
// Function to check customer information and display any relevant messages

Procedure CheckCustomerInfo(CustomerCode)
	// Retrieve customer's credit limit
	CreditLimit = GetCustomerCreditLimit(CustomerCode)

	If CreditLimit < 0 Then
		Message("Warning: Customer" + CustomerCode + "has a negative credit limit.")
	EndIf

	// Retrieve customer's payment terms
	PaymentTerms = GetCustomerPaymentTerms(CustomerCode)

	If PaymentTerms = "COD" Then
		Message("Information: Customer" + CustomerCode + "has a cash on delivery payment terms.")
	EndIf

	// Check if customer has any overdue payments
	OverduePayments = GetCustomerOverduePayments(CustomerCode)

	If OverduePayments > 0 Then
		Message("Warning: Customer" + CustomerCode + "has" + OverduePayments + "overdue payments.")
	EndIf
EndProcedure

// GetCustomerSalesOrders
// Function to retrieve customer's open sales orders

Function GetCustomerSalesOrders(CustomerCode)
	// Retrieve sales orders from database
	SalesOrders = SelectFromSalesOrders(CustomerCode)

	// Return sales orders as a collection
	Return SalesOrders
EndFunction

// FilterSalesOrders
// Function to filter sales orders by document type

Procedure FilterSalesOrders(SalesOrders, DocumentType)
	// Loop through sales orders
	For each SalesOrder in SalesOrders
		// Check if sales order type matches document type
		If SalesOrder.DocumentType = DocumentType Then
			// Keep sales order in collection
			SalesOrders.Add(SalesOrder)
		EndIf
	EndFor
EndProcedure

// OpenSalesOrderWindow
// Function to open sales order in a new window for editing

Procedure OpenSalesOrderWindow(SalesOrder)
	// Create new window
	SalesOrderWindow = New SalesOrderWindow()

	// Set sales order as active document in window
	SalesOrderWindow.ActiveDocument = SalesOrder

	// Open window for editing
	SalesOrderWindow.Show()
EndProcedure

// GetCustomerCreditLimit
// Function to retrieve customer's credit limit from database

Function GetCustomerCreditLimit(CustomerCode)
	// Retrieve credit limit from database using customer code
	CreditLimit = SelectCreditLimitFromCustomers(CustomerCode)

	// Return credit limit as integer
	Return CreditLimit
EndFunction

// GetCustomerPaymentTerms
// Function to retrieve customer's payment terms from database

Function GetCustomerPaymentTerms(CustomerCode)
	// Retrieve payment terms from database using customer code
	PaymentTerms = SelectPaymentTermsFromCustomers(CustomerCode)

	// Return payment terms as string
	Return PaymentTerms
EndFunction

// GetCustomerOverduePayments
// Function to retrieve customer's overdue payments from database

Function GetCustomerOverduePayments(CustomerCode)
	// Retrieve overdue payments from database using customer code
	OverduePayments = SelectOverduePaymentsFromCustomers(CustomerCode)

	// Return overdue payments as integer
	Return OverduePayments
EndFunction