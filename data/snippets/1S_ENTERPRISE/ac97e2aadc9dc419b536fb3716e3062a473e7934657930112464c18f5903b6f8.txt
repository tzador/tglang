//This code snippet creates a module to manage inventory in 1C:Enterprise.

//Define module name
&AtClient
ModuleName = "InventoryManagement";

//Define metadata objects
&AtServer
Objects
    Catalogs
        InventoryManagement:
		//Create Catalog tab
		Attributes
			Code: String; //Defines the code of the inventory item
			Name: String; //Defines the name of the inventory item
			Unit: String; //Defines the unit of measurement for the inventory item
			Price: Number; //Defines the price of the inventory item
			Quantity: Number; //Defines the quantity in stock for the inventory item
		Forms
			ItemList:
			//Create list form for inventory items
				UseStandardCommands = True; //Uses standard commands for form buttons
				HasPicture = False; //Does not have a picture field
				DataExchange = ExchangeType.Normal; //Defines normal data exchange with the form
				OrderedLayout = True; //Uses an ordered layout for form elements
				Controls
					Code: Edit; //Defines an edit field for the inventory item code
					Name: Edit; //Defines an edit field for the inventory item name
					Unit: Edit; //Defines an edit field for the inventory item unit
					Price: Edit; //Defines an edit field for the inventory item price
					Quantity: Edit; //Defines an edit field for the inventory item quantity
				Presentation
					PreferredSize = {Width = 1000, Height = 600}; //Defines the preferred size of the form window

			ItemForm:
			//Create form for individual inventory item
				UseStandardCommands = True; //Uses standard commands for form buttons
				HasPicture = False; //Does not have a picture field
				DataExchange = ExchangeType.Normal; //Defines normal data exchange with the form
				OrderedLayout = True; //Uses an ordered layout for form elements
				Controls
					Code: Edit; //Defines an edit field for the inventory item code
					Name: Edit; //Defines an edit field for the inventory item name
					Unit: Edit; //Defines an edit field for the inventory item unit
					Price: Edit; //Defines an edit field for the inventory item price
					Quantity: Edit; //Defines an edit field for the inventory item quantity
				SubordinateTo = ItemList; //Defines that this form is subordinate to the ItemList form
				Presentation
					PreferredSize = {Width = 800, Height = 600}; //Defines the preferred size of the form window

			ItemEntryForm:
			//Create form for entering new inventory item
				UseStandardCommands = True; //Uses standard commands for form buttons
				HasPicture = False; //Does not have a picture field
				DataExchange = ExchangeType.Normal; //Defines normal data exchange with the form
				OrderedLayout = True; //Uses an ordered layout for form elements
				Controls
					Code: Edit; //Defines an edit field for the inventory item code
					Name: Edit; //Defines an edit field for the inventory item name
					Unit: Edit; //Defines an edit field for the inventory item unit
					Price: Edit; //Defines an edit field for the inventory item price
					Quantity: Edit; //Defines an edit field for the inventory item quantity
				Singleton = True; //Defines that only one instance of the form can be open at a time
				Presentation
					PreferredSize = {Width = 500, Height = 500}; //Defines the preferred size of the form window
	
//Define business process
	BusinessProcess
		InventoryManagement:
		//Create business process for managing inventory
			Timeout = 0; //Disables timeout for the process
			Attributes
				SelectedItem: InventoryManagement.SelectionVariant; //Defines an attribute for the selected inventory item
				SelectedItemCode: String; //Defines an attribute for the code of the selected inventory item
				SelectedItemName: String; //Defines an attribute for the name of the selected inventory item
				SelectedItemUnit: String; //Defines an attribute for the unit of the selected inventory item
				SelectedItemPrice: Number; //Defines an attribute for the price of the selected inventory item
				SelectedItemQuantity: Number; //Defines an attribute for the quantity of the selected inventory item
			Stages
				StageTabItem:
				//Create stage for selecting an item from the catalog tab
					Attributes
						FormParameter: CatalogRef.InventoryManagement; //Defines the form parameter for the catalog tab form
					Forms
						Main
						//Create main form for selecting an item
							UseStandardCommands = True; //Uses standard commands for form buttons
							HasPicture = False; //Does not have a picture field
							DataExchange = ExchangeType.ByFormParameter; //Defines data exchange using the form parameter
							Modal = True; //Defines that the form is modal and must be closed to continue the process
							OrderedLayout = True; //Uses ordered layout for form elements
							Controls
								ItemList: CatalogSelection; //Defines catalog selection control for the catalog tab
							Presentation
								PreferredSize = {Width = 1000, Height = 600}; //Defines the preferred size of the form window
								Title = "Select Item"; //Defines the title of the form window
						SubordinateTo = StageStart; //Defines that this form is subordinate to the starting stage
				StageTabList:
				//Create stage for selecting an item from the list form
					Attributes
						FormParameter: CatalogRef.InventoryManagement; //Defines the form parameter for the list form
					Forms
						Main
						//Create main form for selecting an item
							UseStandardCommands = True; //Uses standard commands for form buttons
							HasPicture = False; //Does not have a picture field
							DataExchange = ExchangeType.ByFormParameter; //Defines data exchange using the form parameter
							Modal = True; //Defines that the form is modal and must be closed to continue the process
							OrderedLayout = True; //Uses ordered layout for form elements
							Controls
								ItemList: ListFormInventoryManagement; //Defines list form for the list tab
							Presentation
								PreferredSize = {Width = 1000, Height =600}; //Defines the preferred size of the form window
								Title = "Select Item"; //Defines the title of the form window
						SubordinateTo = StageStart; //Defines that this form is subordinate to the starting stage
				StageConfirm:
				//Create stage for confirming the selected item
					Attributes
						ConfirmParameter: CatalogRef.InventoryManagement; //Defines the confirm parameter for the confirmation form
						IterationParameter: String; //Defines the iteration parameter for the confirmation form
					Forms
						Main
						//Create main form for confirming the item selection
							UseStandardCommands = True; //Uses standard commands for form buttons
							HasPicture = False; //Does not have a picture field
							DataExchange = ExchangeType.Forced; //Defines forced data exchange with the form
							Modal = True; //Defines that the form is modal and must be closed to continue the process
							OrderedLayout = True; //Uses ordered layout for form elements
							Controls
								Code: StaticCaption; //Defines a static caption for the code of the selected item
								Name: StaticCaption; //Defines a static caption for the name of the selected item
								Unit: StaticCaption; //Defines a static caption for the unit of the selected item
								Price: StaticCaption; //Defines a static caption for the price of the selected item
								Quantity: Edit; //Defines an edit field for the quantity of the selected item
							Presentation
								PreferredSize = {Width = 800, Height = 600}; //Defines the preferred size of the form window
								Title = "Confirm Selection"; //Defines the title of the form window
							SubordinateTo = StageStart; //Defines that this form is subordinate to the starting stage
			Transitions
				ToTabItem:
				//Transition from starting stage to stage for selecting from the catalog tab
					Stage1 = StageStart; //Defines starting stage
					Stage2 = StageTabItem; //Defines target stage
					OnBeforeActivity = "ClearActivityList();"; //Defines action to clear activity list before transition
				ToTabList:
				//Transition from starting stage to stage for selecting from the list form
					Stage1 = StageStart; //Defines starting stage
					Stage2 = StageTabList; //Defines target stage
					OnBeforeActivity = "ClearActivityList();"; //Defines action to clear activity list before transition
				ToConfirm:
				//Transition from stage for selecting an item to stage for confirming selection
					Stage1 = StageTabItem; //Defines starting stage
					Stage2 = StageConfirm; //Defines target stage
					Exclusive = True; //Defines that this transition is exclusive and cannot be chosen again
					OnAfterActivity = 
						"SelectedItemCode = ItemList.Selected.Code; //Assigns selected code to attribute
						 SelectedItemName = ItemList.Selected.Name; //Assigns selected name to attribute
						 SelectedItemUnit = ItemList.Selected.Unit; //Assigns selected unit to attribute
						 SelectedItemPrice = ItemList.Selected.Price; //Assigns selected price to attribute"; //Defines action to assign selected item attributes
				ToConfirm:
				//Transition from stage for selecting an item to stage for confirming selection
					Stage1 = StageTabList; //Defines starting stage
					Stage2 = StageConfirm; //Defines target stage
					Exclusive = True; //Defines that this transition is exclusive and cannot be chosen again
					OnAfterActivity = 
						"SelectedItemCode = ItemList.Selected.Code; //Assigns selected code to attribute
						 SelectedItemName = ItemList.Selected.Name; //Assigns selected name to attribute
						 SelectedItemUnit = ItemList.Selected.Unit; //Assigns selected unit to attribute
						 SelectedItemPrice = ItemList.Selected.Price; //Assigns selected price to attribute"; //Defines action to assign selected item attributes
				ToProcess:
				//Transition from stage for confirming selection to the main process
					Stage1 = StageConfirm; //Converts this stage to the main starting stage of the process
					Stage2 = StageTabItem; //Defines target stage
					Initial = True; //Sets this transition as initial
					AfterConfirmTabItem(); //Defines action to execute after confirmation from catalog tab form
					AfterConfirmTabList(); //Defines action to execute after confirmation from list form
			Methods
				AfterConfirmTabItem():
				//Defines method to execute after confirmation from catalog tab form
					Structure
						Data
							Code: String; //Defines a field for the code of the selected item
							Name: String; //Defines a field for the name of the selected item
							Unit: String; //Defines a field for the unit of the selected item
							Price: Number; //Defines a field for the price of the selected item
							Quantity: Number; //Defines a field for the quantity of the selected item
					Code = SelectedItemCode; //Assigns attribute to code field
					Name = SelectedItemName; //Assigns attribute to name field
					Unit = SelectedItemUnit; //Assigns attribute to unit field
					Price = SelectedItemPrice; //Assigns attribute to price field
					Quantity = SelectedItemQuantity; //Assigns attribute to quantity field
					AddActivity(Data); //Creates an activity for the selected item
					OpenActivitySelectionView(); //Displays the activity selection view
					SelectedItem = SelectionVariant.Create(Data); //Assigns selection variant with selected data
				AfterConfirmTabList():
				//Defines method to execute after confirmation from list form
					Structure
						Data
							Code: String; //Defines a field for the code of the selected item
							Name: String; //Defines a field for the name of the selected item
							Unit: String; //Defines a field for the unit of the selected item
							Price: Number; //Defines a field for the price of the selected item
							Quantity: Number; //Defines a field for the quantity of the selected item
					Code = SelectedItemCode; //Assigns attribute to code field
					Name = SelectedItemName; //Assigns attribute to name field
					Unit = SelectedItemUnit; //Assigns attribute to unit field
					Price = SelectedItemPrice; //Assigns attribute to price field
					Quantity = SelectedItemQuantity; //Assigns attribute to quantity field
					AddActivity(Data); //Creates an activity for the selected item
					OpenActivitySelectionView(); //Displays the activity selection view
					SelectedItem = SelectionVariant.Create(Data); //Assigns selection variant with selected data