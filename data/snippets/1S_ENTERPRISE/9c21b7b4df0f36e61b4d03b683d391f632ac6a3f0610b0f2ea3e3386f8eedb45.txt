// This code is an example of a complex algorithm for calculating
// the optimal pricing for a product based on its production cost,
// market demand and competitor prices in the 1C_ENTERPRISE programming language.

Function CalculateOptimalProductPrice(ProductionCost, MarketDemand, CompetitorPrices)
    // Calculate the average of the competitor prices
    AverageCompetitorPrice = 0
    For Each CompetitorPrice in CompetitorPrices
        AverageCompetitorPrice = AverageCompetitorPrice + CompetitorPrice
    EndFor
    AverageCompetitorPrice = AverageCompetitorPrice / CompetitorPrices.Length

    // Calculate pricing factor based on market demand
    If MarketDemand > 0.5 Then
        PricingFactor = 1 + ((MarketDemand - 0.5) / 0.5)
    Else
        PricingFactor = 1 - ((0.5 - MarketDemand) / 0.5)
    EndIf

    // Calculate the optimal selling price
    OptimalSellingPrice = (ProductionCost + (AverageCompetitorPrice * 1.2)) * PricingFactor

    // Round the optimal selling price to the nearest integer
    Return Round(OptimalSellingPrice)
EndFunction

// Example usage of the function
ProductProductionCost = 1000 // in currency units
ProductMarketDemand = 0.6 // scale from 0 to 1
ProductCompetitorPrices = [950, 1050, 1200, 1150] // competitor prices in currency units

// Calculate the optimal price for the product
OptimalProductPrice = CalculateOptimalProductPrice(ProductProductionCost, ProductMarketDemand, ProductCompetitorPrices)

// Output the optimal price
Message("The optimal selling price for this product is " + OptimalProductPrice)