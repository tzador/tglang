//This code snippet generates a random password for a user
//Input parameters: length of password, character types to include
//Output: randomly generated password

//Initialize character arrays for each type of character to include in password
char[] lowercase = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
                    'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
char[] uppercase = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 
                    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
char[] numerals = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
char[] symbols = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '-', '=', '+', '{', '}', 
                  '[', ']', '|', '\\', ':', ';', '"', '\'', '<', '>', ',', '.', '/', '?'};

//Get input from user for desired password length and character types to include
int length;
char lowercaseFlag, uppercaseFlag, numeralsFlag, symbolsFlag;
Length = Input("Enter password length: ");
lowercaseFlag = Input("Include lowercase letters? (Y/N): ");
uppercaseFlag = Input("Include uppercase letters? (Y/N): ");
numeralsFlag = Input("Include numbers? (Y/N): ");
symbolsFlag = Input("Include symbols? (Y/N): ");

//Initialize empty string for password
char[] password;

//Loop through desired password length
for (int i = 0; i < length; i++) {

    //Generate random number to choose character type
    int randomType = Random(0, 3);
    
    //Generate random number to choose character from chosen character type
    int randomIndex;
    
    //Choose character from selected character type and add to password string
    if (randomType == 0 && lowercaseFlag == 'Y') {
        randomIndex = Random(0, lowercase.Length);
        password += lowercase[randomIndex];
    }
    else if (randomType == 1 && uppercaseFlag == 'Y') {
        randomIndex = Random(0, uppercase.Length);
        password += uppercase[randomIndex];
    }
    else if (randomType == 2 && numeralsFlag == 'Y') {
        randomIndex = Random(0, numerals.Length);
        password += numerals[randomIndex];
    }
    else if (randomType == 3 && symbolsFlag == 'Y') {
        randomIndex = Random(0, symbols.Length);
        password += symbols[randomIndex];
    }
    else {
        //If chosen character type not included, choose again
        i--;
    }
}

//Output generated password
Output("Generated password: " + password);

//Function to generate random number within specific range
int Random(int min, int max) {
    Random rnd = new Random();
    return rnd.Next(min, max);
}

//Function to get user input
char Input(string prompt) {
    char input;
    Output(prompt);
    Input(input);
    //Convert input to uppercase for consistency
    input = input.ToUpper();
    return input;
}