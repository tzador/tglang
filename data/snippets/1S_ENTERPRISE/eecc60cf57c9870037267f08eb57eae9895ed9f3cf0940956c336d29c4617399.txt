// This code snippet contains a class declaration and method implementation in 1C_ENTERPRISE language

//--------------------------------------
// Class: Order
// Description: Represents an order in an e-commerce system
//--------------------------------------
Class Order
    // Attribute declarations
    Attribute Number As String;  // uniquely identifies the order
    Attribute Customer As Reference To Class Customer;  // holds information about the customer

    // Method declarations
    Method Constructor(Number, Customer)
        // This method assigns values to the attributes of the Order class
        This.Number = Number;
        This.Customer = Customer;
    EndMethod

    Method AddProduct(Product, Quantity)
        // This method adds a product to the order with a specified quantity
        // It also updates the total cost and quantity of products in the order
        This.Products = New Structure;
        This.Products.Product.Append(Product);
        This.Products.Quantity.Append(Quantity);
        This.TotalCost = This.TotalCost + Product.Price * Quantity;
        This.TotalQuantity = This.TotalQuantity + Quantity;
    EndMethod

    Method RemoveProduct(Product, Quantity)
        // This method removes a product from the order with a specified quantity
        // It also updates the total cost and quantity of products in the order
        Index = This.Products.Product.Find(Product);
        If Index > 0 Then
            This.Products.Quantity.Delete(Index);
            This.Products.Product.Delete(Index);
            This.TotalCost = This.TotalCost - Product.Price * Quantity;
            This.TotalQuantity = This.TotalQuantity - Quantity;
        EndIf
    EndMethod

    Method CalculateShipping()
        // This method calculates the shipping cost for the order based on customer location and products in the order
        // The shipping cost is determined by a set of predefined rules
        // It returns a numeric value representing the shipping cost
        ShippingCost = 0;
        If This.Customer.Location = "Local" Then
            // For local customers, shipping is free if the total cost of the order is above 500
            If This.TotalCost > 500 Then
                ShippingCost = 0;
            Else
                ShippingCost = 50;
            EndIf
        ElseIf This.Customer.Location = "National" Then
            // For national customers, shipping is free if the total cost of the order is above 1000
            If This.TotalCost > 1000 Then
                ShippingCost = 0;
            Else
                ShippingCost = 100;
            EndIf
        Else
            // For international customers, shipping is calculated based on the number of products in the order
            // Each product has a shipping cost of 5
            // The total shipping cost is the number of products multiplied by 5
            ShippingCost = This.TotalQuantity * 5;
        EndIf
        Return ShippingCost;
    EndMethod

    Method ProcessPayment(PaymentMethod)
        // This method handles the payment for the order
        // It updates the order status and makes necessary changes to the customer's balance or credit card
        If PaymentMethod = "Credit Card" Then
            // For credit card payments, the customer's credit limit is checked and updated
            // If the credit limit is exceeded, the payment is rejected
            if This.Customer.CreditLimit > This.TotalCost Then
                This.Customer.CreditLimit = This.Customer.CreditLimit - This.TotalCost;
                This.Customer.UpdateBalance(This.TotalCost);
                This.Status = "Payment Successful";
            Else
                This.Status = "Payment Rejected";
            EndIf
        Else If PaymentMethod = "Cash On Delivery" Then
            // For cash on delivery, the customer's balance is updated and the order is marked as unpaid
            This.Customer.UpdateBalance(This.TotalCost);
            This.Status = "Unpaid";
        EndIf
    EndMethod

EndClass