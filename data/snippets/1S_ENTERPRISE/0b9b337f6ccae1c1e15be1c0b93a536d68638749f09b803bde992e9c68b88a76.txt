//This code snippet creates a class with various properties and methods in 1C_ENTERPRISE language

//Create a class with name "Person"
Class Person
  //Define properties for the class
  Property FirstName As String; //"As" indicates the data type of the property
  Property LastName As String;
  Property Age As Integer;
  Property Address As String;
  Property Occupation As String;

  //Define methods for the class
  Method GetFullName() Returns String
    //Set a local variable to store the full name
    Variable FullName As String;
    //Concatenate the first name and last name properties
    FullName = FirstName + " " + LastName;
    //Return the full name
    Return FullName;
  EndMethod

  Method MoveTo(newAddress As String)
    //Update the Address property with the new address
    Address = newAddress;
  EndMethod

  Method ChangeOccupation(newOccupation As String)
    //Update the Occupation property with the new occupation
    Occupation = newOccupation;
  EndMethod

  Method CelebrateBirthday()
    //Increment the Age property by 1
    Age = Age + 1;
  EndMethod

  //This is a static method, meaning it can be called without creating an instance of the class
  //It calculates the average age of a group of Person objects
  Static Method CalculateAverageAge(personList As Array) Returns Integer
    //Set a local variable to store the sum of ages
    Variable sumOfAges As Integer;
    //Iterate through the array and add each Person's age to the sum
    For each Person in personList
      sumOfAges = sumOfAges + Person.Age;
    EndFor
    //Calculate and return the average age
    Return sumOfAges / personList.Length;
  EndMethod
EndClass

//Create an instance of the Person class
Person1 = New Person;
//Set the properties for Person1
Person1.FirstName = "John";
Person1.LastName = "Smith";
Person1.Age = 35;
Person1.Address = "123 Main St.";
Person1.Occupation = "Software Engineer";

//Call the GetFullName method and print the result
FullName = Person1.GetFullName();
Print FullName; //"John Smith"

//Call the MoveTo method to update the Address property
Person1.MoveTo("456 Oak Ave.");
Print Person1.Address; //"456 Oak Ave."

//Call the ChangeOccupation method to update the Occupation property
Person1.ChangeOccupation("Data Analyst");
Print Person1.Occupation; //"Data Analyst"

//Call the CelebrateBirthday method to increment the Age property
Person1.CelebrateBirthday();
Print Person1.Age; //36

//Create an array of Person objects
PersonList = New Array;
//Add Person1 to the array
PersonList.Add(Person1);
//Create and add another Person object to the array
Person2 = New Person;
Person2.FirstName = "Emily";
Person2.LastName = "Johnson";
Person2.Age = 29;
PersonList.Add(Person2);

//Call the CalculateAverageAge method and print the result
AverageAge = Person.CalculateAverageAge(PersonList);
Print AverageAge; //32