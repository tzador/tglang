#Define Variable
Var custOrder As Orders; // Defining a variable named 'custOrder' as an object of type 'Orders' which is a custom class
custOrder = Orders.New(); // Assigning the variable 'custOrder' a new instance of the class 'Orders'

#Region "Order Processing"
// A region is used to group related code for better organization and readability

#If custOrder.IsCompleted Then // If-else statement to check if the order is completed
    Message("This order has already been processed."); // Output a message if the order is already completed
#Else // If the order is not completed
    custOrder.ProcessOrder(); // Call the 'ProcessOrder' method from the 'custOrder' object
#EndIf

#Do While custOrder.HasItems() // Do-while loop to check if there are still items in the order
    Var item As Item = custOrder.GetNextItem(); // Defining a variable 'item' and assigning it the value of the next item in the order
    item.ProcessItem(); // Call the 'ProcessItem' method from the 'item' object
    If item.NeedsUpdate Then // If statement to check if the item needs to be updated
        UpdateItem(item); // Call the 'UpdateItem' function to update the item's information
    EndIf
    custOrder.MarkItemAsProcessed(item.Id); // Calls the 'MarkItemAsProcessed' method to update the status of the item as 'processed'
Loop // End of do-while loop

cutOrder.CompleteOrder(); // Call the 'CompleteOrder' method to mark the order as completed
#EndRegion // End of 'Order Processing' region

#Function UpdateItem(item As Item) // Defining a function named 'UpdateItem' which takes in an 'item' object as a parameter
    item.Price = item.GetNewPrice(); // Assigning the item's price by calling the 'GetNewPrice' method
    item.LastUpdate = DateTime.Now; // Updating the item's 'LastUpdate' property to the current date and time
    Return item; // Returns the updated 'item' object
#EndFunction // End of 'UpdateItem' function