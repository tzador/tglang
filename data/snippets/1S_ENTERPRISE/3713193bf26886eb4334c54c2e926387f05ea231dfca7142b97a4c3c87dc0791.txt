#Description: This code snippet creates an extensive report for accounting documents

Procedure GenerateReport()
	Var AccountsList = RegisterAccumulationPosting.List; //Get list of all accumulated postings
	Var DocList = DocumentPosting.List; //Get list of all document postings
	Var Report = New Report; //Create new report object
	ReportCaption = "Accounting Document Report"; //Set report caption

	//Loop through all accumulated postings
	For Each Accounts In AccountsList
		ReportPages = New ReportPage; //Create new report page object
		ReportPages.Caption = "Accounts Posting " + Accounts.ID.ToString(); //Set report page caption
		ReportPages.AddHeader("Account | Debit | Credit | Total"); //Add header to report page

		//Loop through all document postings
		For Each Doc In DocList
			If Doc.AccumulationPosting = Accounts Then //Check if document posting matches accumulated posting
				//Add data to report page
				ReportPages.AddDataLine(Accounts.Account.ToString() + " | " + Doc.Debit.ToString() + " | " + Doc.Credit.ToString() + " | " + (Doc.Debit - Doc.Credit).ToString());
			EndIf

		EndFor

		//Add totals to report page
		ReportPages.AddTotals("Total: " + Accounts.Account.ToString() + " | " + Sum(DocList.Where(x => x.AccumulationPosting = Accounts).Debit) + " | " + Sum(DocList.Where(x => x.AccumulationPosting = Accounts).Credit) + " | " + (Sum(DocList.Where(x => x.AccumulationPosting = Accounts).Debit) - Sum(DocList.Where(x => x.AccumulationPosting = Accounts).Credit)));

		//Add report page to report
		Report.AddPage(ReportPages);
	EndFor

	//Print report
	Report.Print();

EndProcedure