Событие ПрименитьПредопределенныеНастройки(Знач НЕОбновляемыеНастройкиБазыДанных, Знач НеОбновляемыеНастройкиИнтерфейса)
	Процедура ОперацияСинхронизацииБазыДанных(Знач ИмяТекущейБазыДанных)
		Перем ПродолжитьСинхронизацию, Знач Да; // переменная продолжить синхронизацию
		Если ИмяТекущейБазыДанных = "БД123" Тогда // если имя текущей базы данных равно "БД123"
			Выполнить("РаботаСБД123.СинхронизацияДанных()"); // выполняем синхронизацию данных в базе данных "БД123"
		Иначе // иначе
			ПродолжитьСинхронизацию = Ложь; // присваиваем переменной продолжить синхронизацию значение "Ложь"
		КонецЕсли; // завершаем условие
		Если ПродолжитьСинхронизацию Тогда // если переменная продолжить синхронизацию равна "Истина"
			Выполнить("Справочник.СинхронизироватьДанные()"); // выполняем синхронизацию данных справочника
		Иначе // иначе
			ПродолжитьСинхронизацию = Ложь; // присваиваем переменной продолжить синхронизацию значение "Ложь"
		КонецЕсли; // завершаем условие
		Если ПродолжитьСинхронизацию Тогда // если переменная продолжить синхронизацию равна "Истина"
			Выполнить("Константы.ОбновитьКонстанты()"); // обновляем константы
		КонецЕсли; // завершаем условие
	КонецПроцедуры; // завершаем процедуру
	
	Для Каждого БазаДанных Из НЕОбновляемыеНастройкиБазыДанных Цикл // для каждой базы данных в списке необновляемых настроек базы данных
		ОперацияСинхронизацииБазыДанных(БазаДанных.Имя); // вызываем процедуру операция синхронизации базы данных, передавая имя текущей базы данных
	КонецЦикла; // завершаем цикл
	
	Для Каждого НастройкаИнтерфейса Из НеОбновляемыеНастройкиИнтерфейса Цикл // для каждой настройки интерфейса в списке необновляемых настроек интерфейса
		Выполнить("Интерфейс.СоздатьНастройки("+НастройкаИнтерфейса.Имя+")"); // создаем настройку интерфейса, используя ее имя
	КонецЦикла; // завершаем цикл
КонецСобытия; // завершаем событие

Процедура СоздатьНовуюБазуДанных()
	Перем ТекстЗапроса;
	ТекстЗапроса = "СоздатьБазуДанных";
	Выполнить(ТекстЗапроса);
КонецПроцедуры; // завершаем процедуру

Функция Авторизоваться(Знач Пользователь, Знач Пароль)
	Перем ТекстЗапроса;
	ТекстЗапроса = "Авторизация Вход 'Пользователь'"+Пользователь+"', 'Пароль'"+Пароль; // формируем текст запроса на авторизацию с переданными параметрами пользователя и пароля
	Выполнить(ТекстЗапроса); // выполняем запрос на авторизацию
	Если Не Соединение.Авторизовано Тогда // если соединение не авторизовано
		Возврат Константы.НеУспешнаяАвторизация; // возвращаем константу неуспешной авторизации
	Иначе // иначе
		Возврат Константы.УспешнаяАвторизация; // возвращаем константу успешной авторизации
	КонецЕсли; // завершаем условие
КонецФункции; // завершаем функцию

Процедура ВыполнитьЗапрос(Знач Запрос)
	Перем ТекстЗапроса;
	ТекстЗапроса = "ПолучитьДанные 'Запрос'"+Запрос; // формируем текст запроса на получение данных с переданным параметром запроса
	Выполнить(ТекстЗапроса); // выполняем запрос на получение данных
КонецПроцедуры; // завершаем процедуру

Процедура ОтправитьЗапрос(Знач Запрос)
	Перем ТекстЗапроса;
	ТекстЗапроса = "ОтправитьДанные 'Запрос'"+Запрос; // формируем текст запроса на отправку данных с переданным параметром запроса
	Выполнить(ТекстЗапроса); // выполняем запрос на отправку данных
КонецПроцедуры; // завершаем процедуру

Функция РазрешитьДоступ(Знач ИмяПравила, Знач ИмяПользователя)
	Перем ТекстЗапроса;
	ТекстЗапроса = "Права Добавить Правило="+ИмяПравила+", Пользователь="+ИмяПользователя; // формируем текст запроса на добавление правила с переданными параметрами имени правила и имени пользователя
	Выполнить(ТекстЗапроса); // выполняем запрос на добавление правила
КонецФункции; // завершаем функцию