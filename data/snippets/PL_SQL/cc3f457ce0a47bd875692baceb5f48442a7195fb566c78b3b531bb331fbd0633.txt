CREATE TABLE orders (
  order_id NUMBER(10) NOT NULL PRIMARY KEY,  -- Creates a table named 'orders' with the columns 'order_id', 'product_name', 'quantity', and 'customer_id'
  product_name VARCHAR2(50) NOT NULL,
  quantity NUMBER(5),
  customer_id NUMBER(10) NOT NULL,
  CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES customers (customer_id),  -- Adds a foreign key constraint linking the 'customer_id' column to the 'customer_id' column in the 'customers' table
  CONSTRAINT check_quantity CHECK (quantity > 0),  -- Adds a check constraint to ensure that the 'quantity' value is always positive
  CONSTRAINT unique_order UNIQUE (order_id, product_name)  -- Adds a unique constraint to ensure that the combination of 'order_id' and 'product_name' is always unique in the table
);

CREATE SEQUENCE order_id_seq START WITH 1 INCREMENT BY 1;  -- Creates a sequence to automatically generate a unique value for the 'order_id' column in the 'orders' table

CREATE OR REPLACE TRIGGER trg_orders_bef_ins  -- Creates a trigger to be executed BEFORE INSERT on the 'orders' table
BEFORE INSERT ON orders
FOR EACH ROW  -- Specifies that the trigger should be executed for each row being inserted
BEGIN
  :new.order_id := order_id_seq.nextval;  -- Assigns the next value from the 'order_id_seq' sequence to the 'new' row being inserted in the 'order_id' column
END;