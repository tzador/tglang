SET SERVEROUTPUT ON;
 
DECLARE
    -- Declare variables
    v_order_id      orders.order_id%TYPE;
    v_customer_id   orders.customer_id%TYPE;
    v_product_id    order_details.product_id%TYPE;
    v_quantity      INTEGER := 0;
    v_price         order_details.unit_price%TYPE;
    v_total_price   order_details.total_price%TYPE;
BEGIN
    -- Retrieve order ID from user input
    v_order_id := &order_id;
    
    -- Retrieve customer ID and product ID from orders table
    SELECT customer_id, product_id INTO v_customer_id, v_product_id 
        FROM orders 
        WHERE order_id = v_order_id;
    
    -- Retrieve quantity and unit price from order details table
    SELECT quantity, unit_price INTO v_quantity, v_price 
        FROM order_details 
        WHERE order_id = v_order_id AND product_id = v_product_id;
    
    -- Calculate total price
    v_total_price := v_quantity * v_price;
    
    -- Print order details and total price
    DBMS_OUTPUT.PUT_LINE('Order ID: ' || v_order_id);
    DBMS_OUTPUT.PUT_LINE('Customer ID: ' || v_customer_id);
    DBMS_OUTPUT.PUT_LINE('Product ID: ' || v_product_id);
    DBMS_OUTPUT.PUT_LINE('Quantity: ' || v_quantity);
    DBMS_OUTPUT.PUT_LINE('Unit Price: ' || v_price);
    DBMS_OUTPUT.PUT_LINE('Total Price: ' || v_total_price);
    
    -- Update order status to shipped
    UPDATE orders SET status = 'Shipped' 
        WHERE order_id = v_order_id;
    
    -- Print confirmation message
    DBMS_OUTPUT.PUT_LINE('Order status updated to Shipped.');
EXCEPTION
    -- Handle errors
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Invalid order ID.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/