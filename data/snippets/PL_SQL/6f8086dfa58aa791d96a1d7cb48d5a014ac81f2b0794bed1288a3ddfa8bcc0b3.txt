DECLARE 
   -- Declare variables 
   num1 NUMBER := 10; 
   num2 NUMBER; 
   result NUMBER; 
   myVar VARCHAR2(20) := 'Hello World'; 

BEGIN 
   -- Add value to num2 
   num2 := 20; 

   -- Multiply the two values 
   result := num1 * num2; 

   -- Print the result 
   DBMS_OUTPUT.PUT_LINE('The result is: ' || result); 

   -- Using IF statement to check value 
   IF result > 100 THEN 
      DBMS_OUTPUT.PUT_LINE(num1 || ' multiplied by ' || num2 || ' is greater than 100'); 
   ELSE
      DBMS_OUTPUT.PUT_LINE(num1 || ' multiplied by ' || num2 || ' is less than 100'); 
   END IF; 

   -- Using CASE statement to check value 
   CASE 
      WHEN result > 200 THEN 
         DBMS_OUTPUT.PUT_LINE('The result is greater than 200'); 
      WHEN result < 200 THEN 
         DBMS_OUTPUT.PUT_LINE('The result is less than 200'); 
      ELSE 
         DBMS_OUTPUT.PUT_LINE('The result is equal to 200'); 
   END CASE; 

   -- Using FOR loop to print numbers 
   FOR i IN 1..10 LOOP 
      DBMS_OUTPUT.PUT_LINE('The value of i is: ' || i); 
   END LOOP; 

   -- Using WHILE loop to print numbers 
   WHILE num1 < num2 LOOP 
      DBMS_OUTPUT.PUT_LINE(num1); 
      num1 := num1 + 1; 
   END LOOP; 

   -- Using CONTINUE to skip specific iteration 
   FOR j IN 1..5 LOOP 
      IF j = 3 THEN 
         CONTINUE; 
      END IF; 
      DBMS_OUTPUT.PUT_LINE('The value of j is: ' || j); 
   END LOOP; 

   -- Using EXIT to break out of loop 
   FOR k IN 1..5 LOOP 
      IF k = 3 THEN 
         EXIT; 
      END IF; 
      DBMS_OUTPUT.PUT_LINE('The value of k is: ' || k); 
   END LOOP; 

   -- Using GOTO to jump to a specific label 
   FOR l IN 1..5 LOOP 
      IF l = 3 THEN 
         GOTO end_loop; 
      END IF; 
      DBMS_OUTPUT.PUT_LINE('The value of l is: ' || l); 
   END LOOP; 

   <<end_loop>> 

   DBMS_OUTPUT.PUT_LINE('The loop has ended'); 

   -- Using EXCEPTION handling to catch errors 
   BEGIN 
      result := num1 / 0; 
   EXCEPTION 
      WHEN ZERO_DIVIDE THEN 
         DBMS_OUTPUT.PUT_LINE('Cannot divide by zero'); 
   END; 

   -- Using RAISE to throw custom exception 
   BEGIN 
      IF num2 = 0 THEN 
         RAISE VALUE_ERROR; 
      END IF; 
   EXCEPTION 
      WHEN VALUE_ERROR THEN 
         DBMS_OUTPUT.PUT_LINE('The value of num2 is invalid'); 
   END; 

   -- Using RAISE_APPLICATION_ERROR to throw custom user-defined error 
   BEGIN 
      IF myVar != 'Goodbye World' THEN 
         RAISE_APPLICATION_ERROR(-20101, 'Invalid greeting'); 
      END IF; 
   EXCEPTION 
      WHEN OTHERS THEN 
         DBMS_OUTPUT.PUT_LINE('Error code: ' || SQLCODE || ', Error message: ' || SQLERRM); 
   END; 

END;