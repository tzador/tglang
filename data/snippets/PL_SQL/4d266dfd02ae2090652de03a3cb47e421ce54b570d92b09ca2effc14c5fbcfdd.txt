CREATE OR REPLACE PROCEDURE update_salary (p_employee_id IN NUMBER, p_new_salary IN NUMBER)
IS
    -- This procedure takes in an employee ID and new salary and updates the employee's salary in the database

    -- Declare variables
    v_current_salary NUMBER;
BEGIN
    -- Retrieve current salary of employee
    SELECT salary INTO v_current_salary
    FROM employees
    WHERE employee_id = p_employee_id;

    -- If current salary is equal to new salary, do nothing
    IF v_current_salary = p_new_salary THEN
        DBMS_OUTPUT.PUT_LINE('Employee ' || p_employee_id || ' already has a salary of ' || v_current_salary);
    
    -- If new salary is less than current salary, decrease by 10%
    ELSIF p_new_salary < v_current_salary THEN
        UPDATE employees SET salary = p_new_salary
        WHERE employee_id = p_employee_id;
        
        -- Calculate and log the salary decrease
        DBMS_OUTPUT.PUT_LINE('Salary for Employee ' || p_employee_id || ' has been decreased from ' || v_current_salary || ' to ' || p_new_salary);
        INSERT INTO salary_adjustment_logs (employee_id, adjustment_type, old_salary, new_salary)
        VALUES (p_employee_id, 'Decrease By 10%', v_current_salary, p_new_salary);
        
    -- If new salary is greater than current salary, increase by 5%
    ELSE
        UPDATE employees SET salary = p_new_salary
        WHERE employee_id = p_employee_id;
        
        -- Calculate and log the salary increase
        DBMS_OUTPUT.PUT_LINE('Salary for Employee ' || p_employee_id || ' has been increased from ' || v_current_salary || ' to ' || p_new_salary);
        INSERT INTO salary_adjustment_logs (employee_id, adjustment_type, old_salary, new_salary)
        VALUES (p_employee_id, 'Increase By 5%', v_current_salary, p_new_salary);
    END IF;
    
    -- Commit changes to the database
    COMMIT;
    
    -- Display confirmation message to user
    DBMS_OUTPUT.PUT_LINE('Salary for Employee ' || p_employee_id || ' has been updated to ' || p_new_salary);
END;
/