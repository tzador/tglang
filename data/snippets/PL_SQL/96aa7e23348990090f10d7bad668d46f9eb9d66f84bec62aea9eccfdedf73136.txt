-- Create an employees table
CREATE TABLE employees (
  employee_id NUMBER(6) PRIMARY KEY,
  first_name VARCHAR2(50) NOT NULL,
  last_name VARCHAR2(50) NOT NULL,
  email VARCHAR2(100) UNIQUE NOT NULL,
  phone_number VARCHAR2(20),
  hire_date DATE NOT NULL,
  job_id VARCHAR2(35) NOT NULL,
  salary NUMBER(8,2),
  commission_pct NUMBER(2,2),
  manager_id NUMBER(6),
  department_id NUMBER(4) NOT NULL
);

-- Create a function to calculate employee salary
CREATE OR REPLACE FUNCTION calculate_salary
  (p_employee_id IN NUMBER)
  RETURN NUMBER
  IS
    v_employee_salary NUMBER(8,2);
    v_employee_bonus NUMBER(8,2);
BEGIN
  SELECT salary, commission_pct
  INTO v_employee_salary, v_employee_bonus
  FROM employees
  WHERE employee_id = p_employee_id;
  RETURN (v_employee_salary * 12) + (v_employee_salary * v_employee_bonus);
END;

-- Create a procedure to update employee salary
CREATE OR REPLACE PROCEDURE update_salary
  (p_employee_id IN NUMBER, p_new_salary IN NUMBER)
IS
BEGIN
  UPDATE employees
  SET salary = p_new_salary
  WHERE employee_id = p_employee_id;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Salary updated successfully!');
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Employee does not exist.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in updating employee salary.');
END;

-- Create a trigger to update employee salary after insert or update of commission
CREATE OR REPLACE TRIGGER update_salary_trigger
AFTER INSERT OR UPDATE OF commission_pct ON employees
FOR EACH ROW
BEGIN
  UPDATE employees
  SET salary = salary + (salary * :NEW.commission_pct)
  WHERE employee_id = :NEW.employee_id;
END;