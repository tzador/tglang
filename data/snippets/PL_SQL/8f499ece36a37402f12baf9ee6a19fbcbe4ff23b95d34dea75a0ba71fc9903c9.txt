DECLARE
    my_variable VARCHAR2(20) := 'Hello, PL/SQL!';  -- declaring a variable and assigning a string value
    num INTEGER := 10;  -- declaring an integer variable and assigning a value
    total_sum INTEGER;  -- declaring a variable without initializing it
    
BEGIN
    -- performing arithmetic operations on the variables
    total_sum := num + 20;
    
    -- creating a cursor to retrieve data from a table
    CURSOR my_cursor IS
    SELECT employee_name, salary, department
    FROM employees
    WHERE department = 'IT';
    
    -- opening the cursor and looping through the results
    OPEN my_cursor;
    LOOP
        -- fetching data from the cursor into variables
        FETCH my_cursor INTO emp_name, emp_salary, emp_department;
        
        -- check if there are any more rows to fetch
        EXIT WHEN my_cursor%NOTFOUND;
        
        -- printing the data retrieved from the cursor
        DBMS_OUTPUT.PUT_LINE('Employee Name: ' || emp_name);
        DBMS_OUTPUT.PUT_LINE('Employee Salary: ' || emp_salary);
        DBMS_OUTPUT.PUT_LINE('Employee Department: ' || emp_department);
        
        -- performing additional logic based on the data retrieved
        IF emp_salary > 5000 THEN
            DBMS_OUTPUT.PUT_LINE('This employee is part of the "overpaid" department!');
        END IF;
    END LOOP;
    
    -- closing the cursor after looping through all the results
    CLOSE my_cursor;
    
    -- using a condition to perform different tasks based on the value of a variable
    IF my_variable = 'Hello, PL/SQL!' THEN
        DBMS_OUTPUT.PUT_LINE('The variable has the expected value!');
    ELSE
        DBMS_OUTPUT.PUT_LINE('The variable has a different value!');
    END IF;
    
    -- using a loop to perform a task a certain number of times
    FOR i IN 1..10 LOOP
        -- printing out the value of the loop variable
        DBMS_OUTPUT.PUT_LINE('Current loop number: ' || i);
    END LOOP;
    
    -- using a SELECT INTO statement to retrieve data into a variable
    SELECT COUNT(*) INTO num_employees
    FROM employees;
    
    -- printing out the value of the variable
    DBMS_OUTPUT.PUT_LINE('Number of employees in the table: ' || num_employees);
    
    -- using a CASE statement to perform different tasks based on the value of a variable
    CASE my_variable
        WHEN 'Hello, PL/SQL!' THEN
            DBMS_OUTPUT.PUT_LINE('The variable has the expected value!');
        WHEN 'Goodbye, PL/SQL!' THEN
            DBMS_OUTPUT.PUT_LINE('The variable has a different value!');
        ELSE
            DBMS_OUTPUT.PUT_LINE('The variable has an unknown value!');
    END CASE;
    
    -- using a RAISE APPLICATION ERROR statement to throw an error
    RAISE_APPLICATION_ERROR(-20001, 'Something went wrong in the code!');
    
    -- handling the error with an exception block
EXCEPTION
    WHEN OTHERS THEN  -- catching any type of error
        DBMS_OUTPUT.PUT_LINE(SQLERRM);  -- printing out the error message
END;
/