DECLARE
    -- This is a block declaration in PL/SQL
    v_date DATE; -- variable to store date
    v_name VARCHAR2(50); -- variable to store name

BEGIN
    -- This is the beginning of the block
    SELECT SYSDATE INTO v_date FROM dual; -- selecting current date and storing in the variable
    
    -- This is a conditional statement 
    IF v_date = TRUNC(SYSDATE) THEN -- checking if current date is equal to today's date
        v_name := 'John'; -- assigning name to variable
    ELSE
        v_name := 'Jane';
    END IF; -- this ends the if statement block
    
    -- This is a loop statement
    FOR i IN 1..10 LOOP -- loop from 1 to 10
        -- This is a nested block 
        BEGIN
            -- This is a cursor declaration
            CURSOR c1 IS
                SELECT last_name, first_name FROM employees; -- selecting names from employees table
            v_full_name VARCHAR2(100); -- variable to store full name
        END;

        -- This is an exception handler
        EXCEPTION
            WHEN OTHERS THEN -- catching any other errors
                v_full_name := 'Error: Unknown Name'; 
    END LOOP; -- this ends the loop statement block
    
    -- This is a cursor loop statement
    FOR employee IN c1 LOOP -- loop through the cursor
        IF employee.last_name <> 'Doe' THEN -- checking if last name is not Doe
            -- Using CONCAT function to concatenate first and last names
            v_full_name := CONCAT(v_full_name, employee.first_name || ' ' || employee.last_name || ', '); 
        END IF;
    END LOOP;
    
    -- This is a database procedure call
    INSERT INTO employees VALUES (v_name, v_full_name); -- inserting new employee with name and full name
    
    -- This is a database function call
    v_salary := get_employee_salary(v_name); -- getting salary of employee
    
    -- This is a database query
    SELECT employee_id, salary FROM employees WHERE name = v_name; -- selecting employee id and salary for given name
END; -- this ends the block

-- This is a database trigger
CREATE OR REPLACE TRIGGER update_salary
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    -- This is a conditional statement within a trigger
    IF :OLD.salary < :NEW.salary THEN -- checking if old salary is less than new salary
        -- Using UPDATE statement to update employee salary
        UPDATE employees SET salary = (:OLD.salary + :NEW.salary) / 2 WHERE employee_id = :OLD.employee_id; 
    END IF;
END;