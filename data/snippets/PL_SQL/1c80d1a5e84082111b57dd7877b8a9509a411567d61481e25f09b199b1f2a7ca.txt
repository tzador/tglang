--Create a table to hold employee information
CREATE TABLE employees (
  id NUMBER PRIMARY KEY,
  first_name VARCHAR2(50),
  last_name VARCHAR2(50),
  department VARCHAR2(50),
  salary NUMBER
);

--Create a sequence to generate unique ID for employees
CREATE SEQUENCE emp_id_seq;

--Create a trigger to automatically assign ID from sequence to new employees
CREATE OR REPLACE TRIGGER emp_id_trigger
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
  SELECT emp_id_seq.NEXTVAL
  INTO :new.id
  FROM dual;
END;
/

--Insert data into the employees table
INSERT INTO employees (id, first_name, last_name, department, salary)
VALUES (NULL, 'John', 'Doe', 'Marketing', 50000);
INSERT INTO employees (id, first_name, last_name, department, salary)
VALUES (NULL, 'Jane', 'Smith', 'Human Resources', 60000);

--Create a procedure to update employee salaries based on a given department
CREATE OR REPLACE PROCEDURE update_salary (dept IN employees.department%TYPE, salary IN NUMBER)
IS
BEGIN
  UPDATE employees
  SET salary = salary
  WHERE department = dept;
END;
/

--Call the procedure to update the salaries for the Marketing department
BEGIN
  update_salary('Marketing', 55000);
END;
/

--Query and display the updated employee salaries
SELECT first_name, last_name, salary
FROM employees
WHERE department = 'Marketing';