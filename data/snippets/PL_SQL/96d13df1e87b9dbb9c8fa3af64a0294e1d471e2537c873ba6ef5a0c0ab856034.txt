DECLARE -- declares variables or constants
    emp_name VARCHAR(50); -- variable for employee name
    emp_id NUMBER(5); -- variable for employee ID
    emp_sal NUMBER(12,2) := 5000.00; -- variable for employee salary, with initial value set
    hire_date DATE := TO_DATE('01-JAN-2020', 'DD-MON-YYYY'); -- variable for hire date, with initial value set using conversion function
    emp_dept_id NUMBER(3) := 101; -- variable for employee department ID, with initial value set
BEGIN -- begins the PL/SQL block
    SELECT employee_name, employee_id INTO emp_name, emp_id -- selects data from table and assigns to variables
    FROM employees
    WHERE employee_id = emp_id; -- filters by employee ID variable
    IF emp_name IS NOT NULL THEN -- checks if employee name variable is not null
        DBMS_OUTPUT.PUT_LINE(emp_name || ' has an employee ID of ' || emp_id); -- prints formatted output using concatenation of variables
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee ID ' || emp_id || ' does not exist.'); -- prints error message if employee does not exist
    END IF; -- ends the if condition
    FOR i in 1..emp_dept_id LOOP -- loops through employee department ID variable
        DBMS_OUTPUT.PUT_LINE(i || ': Employee ' || emp_name || ' was hired on ' || hire_date); -- prints formatted output with variables
    END LOOP; -- ends the for loop
    UPDATE employees SET salary = emp_sal WHERE employee_id = emp_id; -- updates the salary column for the employee with the matching ID
    COMMIT; -- commits the changes to the database
EXCEPTION -- handles any errors that may occur during runtime
    WHEN NO_DATA_FOUND THEN -- exception for when no data is found
        DBMS_OUTPUT.PUT_LINE('Employee ID ' || emp_id || ' does not exist.'); -- prints error message
    WHEN OTHERS THEN -- exception for any other errors
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLCODE || ' - ' || SQLERRM); -- prints error code and message
END; -- ends the PL/SQL block