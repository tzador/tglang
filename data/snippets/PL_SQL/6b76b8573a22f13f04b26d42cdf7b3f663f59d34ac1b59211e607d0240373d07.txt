-- This is a code snippet in PL/SQL
DECLARE
  v_employee_id INTEGER := 101;  -- Declaring a variable
  v_salary NUMBER(10,2);  -- Declaring a variable with data type and size
  v_dept_id INTEGER;  -- Declaring a variable

BEGIN

  SELECT dept_id INTO v_dept_id FROM employees WHERE employee_id = v_employee_id;  -- Retrieving a value from table and storing it in a variable

  SELECT salary INTO v_salary FROM salaries WHERE employee_id = v_employee_id;  -- Retrieving another value and storing it in a variable

  IF v_salary > 10000 THEN
    dbms_output.put_line('Employee is earning a high salary');  -- Printing a message to console
  ELSE
    dbms_output.put_line('Employee is earning a normal salary');
  END IF;

  CASE v_dept_id  -- Starting a CASE statement
    WHEN 10 THEN
      dbms_output.put_line('Employee belongs to Human Resources department');
    WHEN 20 THEN
      dbms_output.put_line('Employee belongs to Marketing department');
    ELSE
      dbms_output.put_line('Employee belongs to an unknown department');
  END CASE;

  FOR i IN 1..v_dept_id LOOP  -- Starting a FOR loop
    dbms_output.put_line('Value of v_dept_id is ' || v_dept_id);  -- Concatenating strings
    EXIT WHEN i = 3;  -- Exiting the loop after 3 iterations
  END LOOP;  -- Ending the loop

  WHILE v_employee_id < 110 LOOP  -- Starting a WHILE loop
    dbms_output.put_line('Employee ID: ' || v_employee_id);
    v_employee_id := v_employee_id + 1;  -- Incrementing the variable
  END LOOP;  -- Ending the loop

  EXCEPTION  -- Handling exceptions
    WHEN NO_DATA_FOUND THEN
      dbms_output.put_line('No data found for employee ' || v_employee_id);
    WHEN OTHERS THEN
      dbms_output.put_line('An error has occurred');
END;
/