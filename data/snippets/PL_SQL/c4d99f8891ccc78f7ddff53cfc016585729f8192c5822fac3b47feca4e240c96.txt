DECLARE  --This is used to declare variables and data types
  v_product_id   NUMBER(10);
  v_product_name VARCHAR2(100);
  v_quantity     INTEGER;
  v_price        FLOAT;
  v_total        FLOAT;
BEGIN
  
  SELECT product_id, product_name, quantity, price  --Using SELECT statement to retrieve data
  INTO   v_product_id, v_product_name, v_quantity, v_price
  FROM   products
  WHERE  product_id = 1; --Adding condition to the SELECT statement
                          --to retrieve data only for product with id = 1
  
  IF v_quantity > 0 THEN --Using IF statement to check condition of quantity being greater than 0
    v_total := v_quantity * v_price; --Performing calculation to get total price
    
    INSERT INTO orders (product_id, product_name, quantity, price, total) --Using INSERT statement to insert data into orders table
    VALUES (v_product_id, v_product_name, v_quantity, v_price, v_total);  --Passing in variables as values for the columns
    
  ELSE
    DBMS_OUTPUT.PUT_LINE('Cannot place order for product with id = 1 due to insufficient quantity.') --Using DBMS_OUTPUT to display message if quantity is not sufficient
  END IF;
  
  COMMIT; --Committing the changes performed in the INSERT statement
EXCEPTION --Handling any exceptions that may occur
  WHEN NO_DATA_FOUND THEN --If no data is found in the SELECT statement
    DBMS_OUTPUT.PUT_LINE('Product with id = 1 not found.'); --Displaying message
    
  WHEN OTHERS THEN --If any other exceptions occur
    DBMS_OUTPUT.PUT_LINE('An error has occurred. Please try again later.'); --Displaying generic error message
    ROLLBACK; --Rolling back any changes made in the transaction
END;