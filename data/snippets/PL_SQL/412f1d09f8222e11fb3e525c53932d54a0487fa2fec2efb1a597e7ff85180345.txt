CREATE TYPE nested_table_type AS TABLE OF VARCHAR2(20); --This creates a nested table type with elements of type VARCHAR2 with a maximum length of 20
CREATE TABLE books ( --This creates a table named "books" with columns for book titles, authors, and genres
    title VARCHAR2(30), 
    author VARCHAR2(30), 
    genre VARCHAR2(20)
);

ALTER TABLE books ADD CONSTRAINT books_pk PRIMARY KEY (title); --This adds a primary key constraint on the "title" column in the "books" table

CREATE OR REPLACE PROCEDURE add_book( --This creates a procedure named "add_book" with input parameters for title, author, and genre
    p_title IN VARCHAR2, 
    p_author IN VARCHAR2, 
    p_genre IN VARCHAR2
) AS
BEGIN
    INSERT INTO books (title, author, genre) VALUES (p_title, p_author, p_genre); --This inserts a new row into the "books" table with the input parameters
END add_book;

CREATE OR REPLACE FUNCTION find_books_by_genre( --This creates a function named "find_books_by_genre" with a return type of nested_table_type
    p_genre IN VARCHAR2
) RETURN nested_table_type AS
    nested_table nested_table_type := nested_table_type(); --This initializes an empty nested table
BEGIN
    FOR book IN (SELECT title FROM books WHERE genre = p_genre) LOOP --This loops through all books in the "books" table with the specified genre
        nested_table.EXTEND; --This extends the nested table to hold another element
        nested_table(nested_table.COUNT) := book.title; --This adds the book title to the nested table
    END LOOP;
    
    RETURN nested_table; --This returns the nested table with all book titles matching the specified genre
END find_books_by_genre;