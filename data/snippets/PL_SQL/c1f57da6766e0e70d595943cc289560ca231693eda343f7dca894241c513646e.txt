DECLARE
    -- Define variables
    v_first_name VARCHAR2(50);
    v_last_name VARCHAR2(50);
    v_full_name VARCHAR2(100);

BEGIN
    -- Initialize variables
    v_first_name := 'John';
    v_last_name := 'Doe';
    
    -- Concatenate first and last name
    v_full_name := v_first_name || ' ' || v_last_name;
    
    -- Print full name
    dbms_output.put_line('Full Name: ' || v_full_name);
    
    -- Check if full name exceeds character limit
    IF length(v_full_name) > 100 THEN
        dbms_output.put_line('Full name exceeds character limit');
    END IF;
    
    -- Check if first name is longer than last name
    IF length(v_first_name) > length(v_last_name) THEN
        dbms_output.put_line('First name is longer than last name');
    ELSIF length(v_first_name) < length(v_last_name) THEN
        dbms_output.put_line('Last name is longer than first name');
    ELSE
        dbms_output.put_line('First and last name have the same length');
    END IF;
    
    -- Check if first name starts with J
    IF substr(v_first_name, 1, 1) = 'J' THEN
        dbms_output.put_line('First name starts with J');
    ELSE
        dbms_output.put_line('First name does not start with J');
    END IF;
    
    -- Check if last name ends with e
    IF substr(v_last_name, -1) = 'e' THEN
        dbms_output.put_line('Last name ends with e');
    ELSE
        dbms_output.put_line('Last name does not end with e');
    END IF;
    
    -- Define exception for invalid last name
    invalid_last_name EXCEPTION;
    
    -- Check if last name contains numeric characters
    -- If yes, raise exception
    IF regexp_like(v_last_name, '[[:digit:]]') THEN
        raise invalid_last_name;
    END IF;
    
EXCEPTION
    -- Handle invalid last name exception
    WHEN invalid_last_name THEN
        dbms_output.put_line('Last name contains invalid characters');
END;