DECLARE
  -- This block defines a cursor, which is used to iterate through a data set.
  CURSOR employees_cur IS SELECT employee_id, first_name, last_name FROM employees;

  -- This variable will be used to store the employee's full name.
  employee_name employees.first_name%TYPE || ' ' || employees.last_name%TYPE;

  -- Variable used to store the number of employees processed.
  num_processed NUMBER := 0;

  -- Exception that will be thrown when the cursor reaches the end of the data set.
  END_OF_DATA EXCEPTION;

  -- This block defines the procedure that will be executed for each row in the cursor.
  PROCEDURE process_row(employee_id IN employees.employee_id%TYPE,
                        first_name IN employees.first_name%TYPE,
                        last_name IN employees.last_name%TYPE)
  AS
  BEGIN
    -- Increment the number of employees processed.
    num_processed := num_processed + 1;
  
    -- Construct the employee's full name.
    employee_name := first_name || ' ' || last_name;
    
    -- Print the employee's information to the screen.
    DBMS_OUTPUT.PUT_LINE('Employee ID: ' || employee_id || ', Name: ' || employee_name);
  END;
BEGIN
  -- Open the cursor.
  OPEN employees_cur;
  
  -- Loop through each row in the cursor.
  LOOP
    -- Fetch the next row from the cursor.
    FETCH employees_cur INTO employee_id, first_name, last_name;
    
    -- If there are no more rows, raise the END_OF_DATA exception.
    IF employees_cur%NOTFOUND THEN
      RAISE END_OF_DATA;
    END IF;
    
    -- Process the row using the procedure defined above.
    process_row(employee_id, first_name, last_name);
  END LOOP;
EXCEPTION
  -- Handle the END_OF_DATA exception by closing the cursor.
  WHEN END_OF_DATA THEN
    CLOSE employees_cur;
    
    -- Print the total number of employees processed.
    DBMS_OUTPUT.PUT_LINE('Total employees processed: ' || num_processed);
END;