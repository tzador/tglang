class WeaponPickup extends Actor
/**This class represents a pickup that spawns a weapon when collided with by a player. It includes a randomized inventory class to generate a random weapon for the player.
*Note: This is just the basic structure of the class, actual functionality will depend on game implementation.
*/
placeable
notplaceable

defaultproperties
{
    Begin Object Class = SpriteComponent Name = Sprite
        Sprite = Material'Pickups.SPR_Pickup_Lightning'; //specifies the material of the sprite
        Scale=1.5; //sets the scale of the sprite
        CollisionRadius=10.0; //sets the collision radius of the sprite
        CollisionHeight=10.0; //sets the collision height of the sprite
    End Object
    bShouldVestored=False //indicates whether the pickup should be saved or not
    sprite=SpriteComponent'Sprite'; //assigns the sprite component to the variable "sprite"
    Components.Add(Sprite); //adds the sprite component to the actor
    Begin Object Class = KarmaSphereComponent Name=CollisionCylinder
        SphereRadius = 20.0; //specifies the radius of the collision sphere
    End Object
    bCollideActors=True //indicates whether the pickup should collide with other actors or not
    CollisionComponent=CollisionSphereComponent'CollisionCylinder'; //assigns the collision component to the variable "CollisionComponent"
    Components.Add(CollisionComponent); //adds the collision component to the actor
    Begin Object Class=Inventory Name=WeaponInventory
        bRandomizeInventory=True; //indicates whether the inventory should be randomized or not
        MinWeapons=1; //specifies the minimum number of weapons to be generated
        MaxWeapons=3; //specifies the maximum number of weapons to be generated
        bIncludeAllWeapons=False; //indicates whether all weapons should be included in the inventory or not
        Weapons.ClassArray[0]=class'RocketLauncher'; //specifies the first weapon in the inventory
        Weapons.ClassArray[1]=class'FlakCannon'; //specifies the second weapon in the inventory
        Weapons.ClassArray[2]=class'SniperRifle'; //specifies the third weapon in the inventory
        weapons.ClassArray[3]=class'Enforcer'; //specifies the fourth weapon in the inventory
    End Object
    Inventory=Inventory'WeaponInventory'; //assigns the inventory to the variable "Inventory"
    Components.Add(Inventory); //adds the inventory component to the actor
    Begin Object Class=DynamicLightEnvironment Name=LightEnvironment
        bCastShadows=False; //indicates whether the light should cast shadows or not
        bUnlit=False; //indicates whether the light should be unlit or not
        bNoDelete=True; //indicates whether the light should be deleted or not
        bCastDynamicShadow=False; //indicates whether the light should cast dynamic shadows or not
        bInheritPitch=True; //indicates whether the light should inherit pitch or not
        bInheritRoll=True; //indicates whether the light should inherit roll or not
        bInheritYaw=True; //indicates whether the light should inherit yaw or not
        LightBrightness=200; //specifies the brightness of the light
        LightRadius=200; //specifies the radius of the light
        bOnlyAffectsDynamicLights=False; //indicates whether the light should only affect dynamic lights or not
        LightAffectsWorld=True; //indicates whether the light should affect the world or not
        bOnlyAffectsBSP=False; //indicates whether the light should only affect BSP or not
    End Object
    LightEnvironment=DynamicLightEnvironment'LightEnvironment'; //assigns the light environment to the variable "LightEnvironment"
    Components.Add(LightEnvironment); //adds the light environment component to the actor
}