class Bot extends GameAIBase;
//This is a subclass of the GameAIBase class, which is used for creating artificial intelligence in games.

var(Game) int Wins;
//This variable is declared with a Game attribute, indicating that it can be modified from within the game.

var bool bIsIdle;
//This variable is a boolean (true/false) and is used to determine if the bot is currently idle.

var array<Vector> Waypoints;
//This variable is declared as an array of Vector values, which will be used to store the location of the bot's waypoints.

var Actor Target;
//This variable is declared as an Actor, which will be used to store the bot's current target.

exec function MoveToWaypoint(int WaypointIndex);
//This is an executable function that takes an integer as a parameter, which will be used to determine the index of the waypoint to move to.

event PostBeginPlay()
{
    //This event is called after the actor has been spawned and initialized in the game world.
    
    local int RandomIndex;
    //A local variable is declared to hold a random index value.
    
    RandomIndex = RandRange(0, Waypoints.Length-1);
    //A random index is generated using the RandRange function, using the length of the Waypoints array as the maximum value.
    
    MoveToWaypoint(RandomIndex);
    //The bot is instructed to move to the randomly generated waypoint.
}

simulated event SeePlayer(Actor SeenPlayer)
{
    //This simulated event is called when the bot sees a player in the game world.
    
    if(!bIsIdle)
    {
        //If the bot is not idle, it will set the SeenPlayer as its target and move towards them.
        
        Target = SeenPlayer;
        MoveToActor(Target, 500);
        //The bot will move towards the target with a maximum distance of 500 units.
    }
}

function FindClosestWaypoint() returns Vector
{
    //This function will return the vector location of the closest waypoint.
    
    local Vector ClosestWaypoint;
    local float ClosestDistance;
    local float CurrentDistance;
    
    foreach Waypoints(Waypoint)
    {
        //Iterate through each waypoint in the Waypoints array.
        
        CurrentDistance = VSize(Waypoint.Location - Location);
        //Calculate the distance between the bot and the current waypoint.
        
        if(CurrentDistance < ClosestDistance || ClosestDistance == 0)
        {
            //If the current distance is less than the closest distance or the closest distance is 0, update the closest waypoint and distance.
            
            ClosestDistance = CurrentDistance;
            ClosestWaypoint = Waypoint.Location;
        }
    }
    
    return ClosestWaypoint;
    //Return the vector location of the closest waypoint.
}