//A complex code snippet in UNREALSCRIPT which creates a custom character class

/*
Creates a class that defines a custom character with its attributes and functions
*/
class MyCustomCharacter extends Actor
    //Defining attributes
	abstract
    //Abstract means that this class cannot be instantiated, but can only be inherited from
	placeable
    //Defines that objects of this class can be placed in the game world
	Auto state
    //The character's initial state when spawned in the game

	//Defining variables
	var float movementSpeed
    //Stores the character's movement speed
	var int health
    //Stores the character's health points
	var int attackDamage
    //Stores the character's attack damage

	//Defining functions
	/*
	Constructor function to initialize the character's attributes
	@param moveSpeed - the character's movement speed
	@param charHealth - the character's health points
	@param attkDamage - the character's attack damage
	*/
	function Initialize(float moveSpeed, int charHealth, int attkDamage)
    	movementSpeed = moveSpeed
    	health = charHealth
    	attackDamage = attkDamage

    /*
    Function to handle the character's movement
    @param direction - the direction in which the character should move
    */
	function Move(vector direction)
    	//Some code to handle movement based on the given direction
    	//For example, changing the character's location based on the movement speed

    /*
    Function to handle the character's attack
    @param target - the target that the character is attacking
    */
	function Attack(Actor target)
    	//Some code to handle attacking the target
    	//For example, reducing the target's health based on the attack damage

    /*
    Function to handle the character's death
    */
	function Death()
    	//Some code to handle the character's death, such as playing death animation, respawning, etc.

//Defining a child class of MyCustomCharacter called MyEnemyCharacter
class MyEnemyCharacter extends MyCustomCharacter
    //Defining variables
    var float detectionRadius
    //Stores the radius in which the enemy can detect the player
    var Actor target
    //Stores the current target that the enemy is chasing or attacking

    //Defining functions
    /*
    Function to handle the enemy's movement
    @param direction - the direction in which the enemy should move
    */
	function Move(vector direction)
    	//Some code to handle movement based on the given direction and current target
    	//For example, chasing and following the player within the detection radius

    /*
    Function to handle the enemy's attack
    */
	function Attack()
    	if (target != None)
        	super.Attack(target)
        	//Calls the Attack function from the parent class with the current target as the parameter
        	//This way, the enemy inherits the same attack behavior as the parent class, but with custom variables

    /*
    Function to handle the enemy's detection of the player
    @param player - the player character that may be within the detection radius
    */
	function DetectPlayer(Actor player)
    	if (VSize(self.Location - player.Location) <= detectionRadius)
        	target = player
        	//Sets the player character as the current target if they are within the detection radius
        	//This way, the enemy can chase and attack the player

    /*
    Function to handle the enemy's death
    */
	function Death()
    	if (target != None)
        	target = None
        	//Resets the target if the enemy dies so it does not continue attacking the dead player
    	super.Death()
    	//Calls the Death function from the parent class to handle the common death behavior