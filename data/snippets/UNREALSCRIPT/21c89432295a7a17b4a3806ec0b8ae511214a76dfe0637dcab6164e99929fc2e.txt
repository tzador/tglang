class ExampleClass extends Actor;

var() Const int MAX_HEALTH;

// Custom struct for storing player data
struct PlayerData
{
    var int score;
    var() bool isAlive;
    var() Vector location;
}

// Declaration of the main function
function main() 
{
    local ExampleClass myActor; // Declaration of a local object variable
    local PlayerData player; // Creation of a new PlayerData struct
    
    player.score = 0; // Initializing the score to 0
    player.isAlive = true; // Setting the isAlive flag to true
    player.location = GetLocation(); // Calling the GetLocation() function to get current player location
    
    // Looping through multiple objects
    foreach AllActors(class'ExampleClass', myActor)
    {
        // Checking if the actor is alive and is not the current player
        if (myActor.IsAlive() && myActor != self)
        {
            // Calculating the distance between the current player and the actor
            local int distance = VSize(myActor.location - player.location);
            
            if (distance < 100) // Checking if the distance is less than 100 units
            {
                // Calling the DamageActor() function on the current actor
                myActor.DamageActor(10);
            }
        }
    }
    
    // Updating the current player's score based on a custom function
    player.score = UpdateScore(player.score); 
    
    // Printing the player's score to the screen
    `log("Player score: " $ string(player.score));
}

// Custom function for updating the player's score
function int UpdateScore(int currentScore)
{
    local int newScore = currentScore; // Creating a new variable to hold the updated score
    
    // Checking if the player has reached a certain score threshold
    if (newScore > 100)
    {
        newScore += 50; // Increasing the score by 50
    }
    
    return newScore; // Returning the updated score
}

defaultproperties
{
    // Setting the default value for MAX_HEALTH
    MAX_HEALTH=100;
}