/**
* This is a class for a weapon in a game, written in UnrealScript.
* This weapon has a primary fire mode and a secondary fire mode, both of which can be upgraded by the player.
* This class also includes functions for reloading, zooming, and dealing damage to enemies.
*/

class Weapon extends Actor
    placeable;

// Variables for the weapon's stats and upgrades
var int primaryDamage;
var int primaryUpgradeLevel;
var int secondaryDamage;
var int secondaryUpgradeLevel;
var float reloadTime;

// Variables for the weapon's current state
var float currentAmmo;
var bool readyToFire;
var bool isReloading;
var bool isZoomed;

// Function for firing the weapon's primary fire mode
function FirePrimary()
{
    // Check if the weapon is ready to fire and has enough ammo
    if (readyToFire && currentAmmo > 0)
    {
        // Apply any upgrades to the damage value
        var int damage = primaryDamage + primaryUpgradeLevel;

        // Spawn a projectile and apply the damage to any enemies hit
        var Projectile proj;
        proj = Spawn(class'Projectile', self);
        proj.SetProjectileDamage(damage);
        proj.SetVelocity(RotationToVector(Rotation) * 1000);
        proj.DestroyAfter(5);

        // Decrease the weapon's current ammo and set a delay before it can be fired again
        currentAmmo--;
        SetTimer(reloadTime, readyToFire, true);
    }
}

// Function for firing the weapon's secondary fire mode
function FireSecondary()
{
    // Check if the weapon is ready to fire and has enough ammo
    if (readyToFire && currentAmmo > 0)
    {
        // Apply any upgrades to the damage value
        var int damage = secondaryDamage + secondaryUpgradeLevel;

        // Spawn a projectile and apply the damage to any enemies hit
        var Projectile proj;
        proj = Spawn(class'Projectile', self);
        proj.SetProjectileDamage(damage);
        proj.SetVelocity(RotationToVector(Rotation) * 500);
        proj.DestroyAfter(2);

        // Decrease the weapon's current ammo and set a delay before it can be fired again
        currentAmmo--;
        SetTimer(reloadTime, readyToFire, true);
    }
}

// Function for reloading the weapon
function Reload()
{
    // Only allow reloading if the weapon is not currently reloading and there is not full ammo
    if (!isReloading && currentAmmo < maxAmmo)
    {
        isReloading = true;

        // Set a timer for the reload time and then reset the current ammo
        SetTimer(reloadTime, ResetAmmo, true);
    }
}

// Function for resetting the weapon's ammo after reloading
function ResetAmmo()
{
    currentAmmo = maxAmmo;
    isReloading = false;
}

// Function for zooming the weapon in/out
function Zoom(bool isZoomed)
{
    // Check if the player wants to zoom in or out
    if (isZoomed)
    {
        // Set the player's camera to a zoomed in FOV and decrease accuracy
        SetFOV(40);
        SetWeaponSpread(10);
    }
    else
    {
        // Set the player's camera to a zoomed out FOV and increase accuracy
        SetFOV(90);
        SetWeaponSpread(2);
    }
}

// Function for dealing damage to enemies
function DealDamage(int damageAmount)
{
    // Apply the damage amount to the enemy's health
    Health -= damageAmount;

    // Check if the enemy's health has reached 0
    if (Health <= 0)
    {
        // Destroy the enemy and award the player with points
        SetTimer(0.5, Destory, true);
        player.UpdateScore(100);
    }
}

/**
* This function is called when the weapon is first spawned in the game world.
* It sets default values for the weapon's stats and current state.
*/
defaultproperties
{
    PrimaryDamage=10
    PrimaryUpgradeLevel=0
    SecondaryDamage=20
    SecondaryUpgradeLevel=0
    ReloadTime=2.0
    CurrentAmmo=100
    ReadyToFire=true
    IsReloading=false
    IsZoomed=false
}