/**
*This is a complex code snippet in UNREALSCRIPT that demonstrates advanced functionality.
*@param strInput The input string to be processed.
*@param intVal The integer value that determines the algorithm's behavior.
*@return Returns a modified string based on the algorithm's behavior.
*/
simulated function string ComplexFunction(string strInput, int intVal)
{
local bool bIsEven;
local bool bIsVowel;
//Determine if the integer value is even or not
if (intVal % 2 == 0)
{
bIsEven = true; //set bIsEven to true
}
else
{
bIsEven = false; //set bIsEven to false
}
//Loop through the input string and determine if each character is a vowel
for (int i = 0; i < strInput.Length; i++)
{
switch (strInput[i])
{
case 'a': //if the character is 'a'
case 'e': //or 'e'
case 'i': //or 'i'
case 'o': //or 'o'
case 'u': //or 'u'
bIsVowel = true; //set bIsVowel to true
break;
default:
bIsVowel = false; //set bIsVowel to false
break;
}
//If the integer value is even and the character is a vowel, replace it with 'X'
if (bIsEven && bIsVowel)
{
strInput = strInput.Mid(0, i) @ "X" @ strInput.Mid(i + 1, strInput.Length - i - 1);
}
//If the integer value is odd and the character is not a vowel, replace it with 'Y'
else if (!bIsEven && !bIsVowel)
{
strInput = strInput.Mid(0, i) @ "Y" @ strInput.Mid(i + 1, strInput.Length - i - 1);
}
}
//Add the integer value to the end of the modified string
strInput = strInput $ " - " $ intVal;
//Return the modified string
return strInput;
}