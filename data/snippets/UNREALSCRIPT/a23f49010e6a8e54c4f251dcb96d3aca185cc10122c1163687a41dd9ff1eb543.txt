/*This class represents a player controller in the game.*/
class PlayerController extends Controller;

/** The player's current health*/
var int Health;

/*Function called when the player takes damage.*/
simulated function TakeDamage(int Damage, Pawn InstigatedBy, vector HitLocation, vector Momentum, class<DamageType> DamageType)
{
    Super.TakeDamage(Damage,InstigatedBy,HitLocation,Momentum,DamageType);
    
    /*Reduce the player's health by the amount of damage taken.*/
    Health -= Damage;
    
    /*Check if the player's health has reached 0.*/
    if(Health <= 0)
    {
        /*Call the player's death function.*/
        OnDeath();
    }
}

/*Function called when the player dies.*/
simulated function OnDeath()
{
    /*Perform any necessary death logic, such as respawning or ending the game.*/
    
    /*Reset the player's health to full.*/
    Health = 100;
    
    /*Respawn the player at a predetermined location.*/
    DefaultProperties.PlayerCamera.Pawn = Spawn(DefaultPlayerClass,,Location,Rotation);
}

/*Function called to handle input from the player.*/
event InputCallback(name InputEvent, float* InputScale, float* InputDelta)
{
    /*Check if the input event is a movement key.*/
    if(InputEvent == "MoveForward" || InputEvent == "MoveRight")
    {
        /*Apply the input scale to the player's movement.*/
        Velocity = Rotation * Rotator(0,InputScale[1],InputScale[0]) * 500;
    }
    
    /*Check if the input event is a jump key.*/
    else if(InputEvent == "Jump")
    {
        /*Make the player jump.*/
        Jump();
    }
    
    /*Check if the input event is a fire key.*/
    else if(InputEvent == "Fire")
    {
        /*Call the player's fire function to shoot a weapon.*/
        Fire();
    }
    
    /*Check if the input event is a crouch key.*/
    else if(InputEvent == "Crouch")
    {
        /*Toggle the player's crouching state.*/
        bCrouched = !bCrouched;
    }
    
    /*Check if the input event is a menu button.*/
    else if(InputEvent == "Menu")
    {
        /*Open the game's menu.*/
        OpenMenu();
    }
}

/*Function called when a level is loaded or restarted.*/
event PostBeginPlay()
{
    Super.PostBeginPlay();
    
    /*Set the player's health to full.*/
    Health = 100;
}

/*Function called when the player enters a trigger volume.*/
event Trigger(Actor Other, Pawn EventInstigator)
{
    /*Check if the trigger volume is a health pickup.*/
    if(Level.IsA("HealthPickup"))
    {
        /*Increase the player's health by the amount specified by the health pickup.*/
        Health += Level.HealthAmount;
    }
    
    /*Check if the trigger volume is a weapon pickup.*/
    else if(Level.IsA("WeaponPickup"))
    {
        /*Give the player the specified weapon.*/
        GiveWeapon(Level.WeaponType);
    }
}