class MyCustomActor extends Actor; // defining a new class named MyCustomActor that inherits from the Actor class

var() int MyIntVariable; // defining a public integer variable

const float MyConstant = 3.14159; // defining a constant float variable

var() string MyStringVariable; // defining a public string variable

state MyCustomState; // defining a new state

event Destroyed() // defining an event function
{
    Super.Destroyed(); // calling the parent class's Destroyed function
    
    `log("My actor was destroyed.");` // printing a log message
}

defaultproperties // defining default properties for the class
{
    MyIntVariable = 5; // setting the default value for MyIntVariable to 5
    MyStringVariable = "Hello World"; // setting the default value for MyStringVariable to "Hello World"
}

function void MyCustomFunction() // defining a function
{
   `log("My custom function was called.");` // printing a log message
   
   if (MyIntVariable > 10) // checking if MyIntVariable is greater than 10
   {
       MyStringVariable = "Greater than 10"; // setting the value of MyStringVariable to "Greater than 10"
       `log("MyIntVariable is greater than 10.");` // printing a log message
   }
   else // if MyIntVariable is not greater than 10
   {
       MyStringVariable = "Less than or equal to 10"; // setting the value of MyStringVariable to "Less than or equal to 10"
       `log("MyIntVariable is less than or equal to 10.");` // printing a log message
   }
}

function MyCustomState Tick(float DeltaTime) // defining a state function
{
    `log("Tick function called.");` // printing a log message
    
    if (DeltaTime > 0.1) // checking if DeltaTime is greater than 0.1
    {
        `log("DeltaTime is greater than 0.1.");` // printing a log message
        MyIntVariable = MyIntVariable + 1; // incrementing the value of MyIntVariable by 1
    }
    
    return Super.Tick(DeltaTime); // returning the result of the parent class's Tick function
}