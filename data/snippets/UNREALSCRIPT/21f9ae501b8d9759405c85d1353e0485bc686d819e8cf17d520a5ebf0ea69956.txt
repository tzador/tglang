/**
 * A custom class to represent a tree object in a game.
 */

class Tree extends Actor;

  /** The health of the tree */
  var int Health;
  
  /** The mesh of the tree */
  var const MeshComponent TreeMesh;
  
  /** The maximum amount of health the tree can have */
  const int MaxHealth = 100;
  
  /**
   * Initializes the Tree class with a default mesh and maximum health value.
   * @param InitialHealth The initial health of the tree.
   */
  function Initialize(int InitialHealth)
  {
    // Set initial values for health and mesh
    Health = InitialHealth;
    TreeMesh = spawn(class'MeshComponent');
    
    // Set default properties for the mesh
    TreeMesh.SetStaticMesh(SkeletalMesh'DefaultMesh');
    TreeMesh.SetCollisionType(CollisionType_Tree);
    TreeMesh.SetOwner(self);
  }
  
  /**
   * Called when the tree is hit by an object.
   * @param Damage The amount of damage done to the tree.
   * @param DamageType The type of damage.
   */
  function OnDamage(int Damage, DamageType DamageType)
  {
    // Reduce health by the damage amount
    Health -= Damage;
    
    // If health reaches 0, destroy the tree
    if (Health <= 0)
    {
      Destroy();
    }
  }
  
  /**
   * Spawns a new tree in a random location.
   * @return The newly spawned Tree object.
   */
  static function SpawnRandomTree()
  {
    // Get a random location within the game world
    local Vector RandomLocation = GetRandomLocation();
    
    // Spawn a new instance of the Tree class
    local Tree NewTree = spawn(class'Tree', none, '', RandomLocation, ,, false);
    
    // Initialize the new tree with a random initial health value
    NewTree.Initialize(GetRandomHealth());
    
    // Return the new tree object
    return NewTree;
  }
  
  /**
   * Gets a random location within the game world.
   * @return The random location.
   */
  static function GetRandomLocation()
  {
    // Get the bounding box of the game world
    local Vector WorldMin, WorldMax;
    if (GetWorldBoundingBox(default.Level, /*out*/WorldMin, /*out*/WorldMax))
    {
      // Generate random X and Y coordinates within the bounding box
      local float RandomX = rand(WorldMin.X, WorldMax.X);
      local float RandomY = rand(WorldMin.Y, WorldMax.Y);
      
      // Set the Z coordinate to 0 (on the ground)
      local float Z = 0;
      
      // Return the random location
      return vect(RandomX, RandomY, Z);
    }
    
    // If unable to get the bounding box, return default location
    return vect(0, 0, 0);
  }
  
  /**
   * Gets a random health value for a new tree.
   * @return The random health value.
   */
  static function GetRandomHealth()
  {
    // Generate a random health value between 0 and the maximum allowed value
    return rand(0, MaxHealth);
  }
  
defaultproperties
{
  // Set default values for properties
  Health=MaxHealth
  bCollideActors=False
  bCollideWorld=False
  bBlockActors=False
  bBlockPlayers=False
  bAlwaysRelevant=True
  bNetLoadOnClient=False
  bNetLoadOnServer=False
  bNoDelete=False
  
  // Set default values for mesh collision and socket
  CollisionType=COLLIDE_CustomDefault
  Vector CollisionExtent=(X=150,Y=150,Z=300)
  Vector LocationOffset
 
  Begin Object Class=StaticMeshComponent Name=TreeMesh
    TransientAttach=True
    StaticMesh=StaticMesh'Skins.FloorMesh'
    Scale=0.5
    CollisionRadius=150
    AlwaysLoadOnClient=False
    AlwaysLoadOnServer=False
    IgnoreOwnerRotation=True
    LocationOffset=(X=0.0,Y=0.0)
    RemoteRole=ROLE_None
    OwnerNoSee=False
    LightEnvironment=LE_None
    bCollideActors=False
    bBlockActors=False
    bBlockPlayers=False
    bCollideWorld=False
    bCollideComplex=False
    bOverrideLightMesh=True
    CastShadow=True
    LightingChannels=(Dynamic=True,Translucency=True)
    bNotifyRigidBodyCollision=False
    bHighQualityMovement=True
    bAttachToOwner=True
    bCanTeleport=True
    bPathColliding=False
    bStatic=False
    Physics=PHYS_RigidBody
    LODInfo(0)=(LODHierarchyIndex=0)
    bMovable=False
    bEditable=True
  End Object
  Components.Add(TreeMesh)
}