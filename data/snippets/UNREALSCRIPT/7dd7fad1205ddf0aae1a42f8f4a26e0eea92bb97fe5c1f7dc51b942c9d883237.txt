/**
 * @brief A custom weapon class that inherits from the base weapon class
 *
 * This class creates a custom weapon with additional properties and functions
 * that can be used by the player.
 */

class CustomWeapon extends Weapon;

// Properties
var(name = "ClipSize", tooltip = "Number of bullets per clip") int ClipSize; // specifies the number of bullets per clip
var(name = "ClipAmmo", tooltip = "Number of bullets remaining in clip")
int ClipAmmo; // specifies the number of bullets remaining in the current clip
var(package, name = "ReloadTime", tooltip = "Time it takes to reload the weapon")
int ReloadTime; // specifies the time it takes to reload the weapon
var replicate boolean bRequiresReload; // specifies whether the weapon requires reloading or not

// Functions

/**
 * @brief Called when the player pulls the trigger
 *
 * This function performs the desired action when the player pulls the trigger,
 * such as shooting projectiles or playing sound effects.
 */
private function OnTriggerPressed()
{

	if (ClipAmmo > 0) // checks if there are still bullets remaining in the current clip
	{
		PlayFireSound(); // plays the sound effect for firing the weapon
		SpawnProjectile(); // spawns a projectile from the weapon
		ClipAmmo--; // decreases the number of bullets in the current clip by 1
		// note: spawning projectiles and playing sound effects may be done in separate functions
	}
	else if (bRequiresReload) // checks if the weapon requires reloading
	{
		ReloadWeapon(); // calls the ReloadWeapon function
	}
	else
	{
		PlayEmptyFireSound(); // plays the sound effect for trying to fire an empty clip
	}

}

/**
 * @brief Called when the player presses the reload button
 *
 * This function reloads the weapon by setting the number of bullets in the
 * current clip to the maximum capacity and setting the reloading timer.
 */
private function ReloadWeapon()
{
	if (ClipAmmo == ClipSize) // checks if the clip is already full
	{
		Log("Clip is already full"); // prints a message to the log
		return; // exits the function
	}
	ClipAmmo = ClipSize; // sets the number of bullets in the current clip to the maximum capacity
	// note: the timer may be set to the value of ReloadTime or a custom value can be used
	SetTimer(ReloadTime, false, 'ReloadComplete'); // sets the reloading timer and calls the ReloadComplete function after the specified time
}

/**
 * @brief Called when the reloading timer is complete
 *
 * This function is called when the reloading timer set in the ReloadWeapon
 * function is complete and sets the bRequiresReload property back to false.
 */
private function ReloadComplete()
{
	bRequiresReload = false; // sets bRequiresReload back to false
}

// Event called when the player picks up the weapon
event Activate(Actor Other, Pawn Activator)
{
	Super.Activate(Other, Activator); // calls the Super class's Activate function
	bRequiresReload = true; // sets bRequiresReload to true, indicating the weapon needs to be reloaded
}

// Event called when the player drops the weapon
event Deactivate(Actor Other, Pawn Activator)
{
	Super.Deactivate(Other, Activator); // calls the Super class's Deactivate function
	bRequiresReload = false; // sets bRequiresReload back to false
}