class APawn extends AActor;

/**
 * This is a class that represents a pawn in the game.
 * It inherits from the AActor class.
 */
 
#ifdef DOXYGEN
/**
 * The default properties of the pawn.
 * These can be overridden in child classes.
 */
#endif
properties
(
    /** The maximum health of the pawn. */
    var int MaxHealth;
    
    /** The current health of the pawn. */
    var int CurrentHealth;
    
    /** The movement speed of the pawn in units per second. */
    var float MoveSpeed;
    
    /** The rotation speed of the pawn in degrees per second. */
    var float RotationSpeed;
    
    /** The current weapon equipped by the pawn. */
    var class<AWeaponBase> CurrentWeapon;
    
    /** The location where the pawn will spawn in the game. */
    var vector SpawnLocation;
)

/**
 * Function called when the pawn takes damage.
 * Takes in the amount of damage and the instigator of the damage.
 */
function TakeDamage(int Amount, AActor InstigatedBy)
{
    // Subtract amount from current health
    CurrentHealth -= Amount;
    
    // Check if pawn has died
    if(CurrentHealth <= 0)
    {
        // Call the OnDeath function
        OnDeath();
    }
}

/**
 * Function called when the pawn dies.
 * This function can be overridden in child classes.
 */
function OnDeath()
{
    // Destroy the pawn
    Destroy();
}

/**
 * Function called to equip a weapon.
 * Takes in the weapon class and spawns it attached to the pawn.
 */
function EquipWeapon(class<AWeaponBase> WeaponClass)
{
    // Destroy the current weapon if it exists
    if(CurrentWeapon != None)
    {
        CurrentWeapon.Destroy();
    }
    
    // Spawn the new weapon attached to the pawn's mesh
    CurrentWeapon = Spawn(WeaponClass,, self, '', SpawnLocation);
}

/**
 * Function called to move the pawn.
 * Takes in the direction to move in and the delta time since last tick.
 */
function Move(vector Direction, float DeltaTime)
{
    // Calculate the movement vector
    local vector MovementVector;
    MovementVector = Direction * MoveSpeed * DeltaTime;
    
    // Move the pawn in the calculated direction
    SetLocation(self.Location + MovementVector);
}

/**
 * Function called to rotate the pawn.
 * Takes in the rotation amount in degrees and the delta time since last tick.
 */
function Rotate(float RotationAmount, float DeltaTime)
{
    // Calculate the rotation vector
    local rotator RotationVector;
    RotationVector.Yaw = RotationAmount * RotationSpeed * DeltaTime;
    
    // Rotate the pawn in the calculated direction
    SetRotation(self.Rotation + RotationVector);
}