// This is a code snippet that creates a basic vehicle class in the UnrealScript programming language

class BasicVehicle extends Actor // This declares the class BasicVehicle and states that it extends the Actor class
    placeable; // This means that an instance of this class can be placed in the game world

var int currentSpeed; // This declares a variable of type integer named currentSpeed

var float maxSpeed; // This declares a variable of type float named maxSpeed

var vector velocity; // This declares a variable of type vector named velocity

var Actor driver; // This declares a variable of type Actor named driver, which will be used to store the driver of the vehicle

var float accelerationRate; // This declares a variable of type float named accelerationRate, which will determine how quickly the vehicle accelerates

var float decelerationRate; // This declares a variable of type float named decelerationRate, which will determine how quickly the vehicle decelerates

// This function sets the initial values for the vehicle's variables
function InitVehicle()
{
    Super.Init();
    currentSpeed = 0;
    velocity = vect(0,0,0);
    accelerationRate = 10.0;
    decelerationRate = 5.0;
    maxSpeed = 1000.0;
}

// This function is called when the player enters the vehicle
// It assigns the driver variable to the actor that just entered the vehicle
function OnDriverEnter(Actor newDriver)
{
    driver = newDriver;
}

// This function is called when the player exits the vehicle
// It sets the driver variable to none, indicating that there is no longer a driver
function OnDriverExit()
{
    driver = none;
}

// This function handles the movement of the vehicle
function HandleMovement(float deltaTime)
{
    if(driver != none) // If there is a driver, calculate the new velocity based on the driver's input
    {
        local vector driverInput = driver.GetInputVector(); // Get the driver's input from the game controller
        velocity += driverInput * accelerationRate * deltaTime; // Update the velocity based on the driver's input and the set acceleration rate
    }
    else // If there is no driver, gradually slow down the vehicle
    {
        // Decelerate the vehicle by subtracting the deceleration rate from the current speed
        currentSpeed = max(currentSpeed - (decelerationRate * deltaTime), 0);
    }

    // Clamp the velocity to the maximum speed
    velocity = velocity.Clamp(maxSpeed);

    // Move the vehicle based on the calculated velocity
    Move(velocity * deltaTime);
}

// This function is called every frame to update the vehicle's movement
event Tick(float deltaTime)
{
    HandleMovement(deltaTime);
}