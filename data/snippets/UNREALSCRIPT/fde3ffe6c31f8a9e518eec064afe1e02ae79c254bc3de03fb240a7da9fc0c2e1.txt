/**
 * This code snippet showcases a custom inventory system for a multiplayer game.
 * It includes functionality for adding, removing, and swapping items in the inventory.
 * Written in UnrealScript for use in the Unreal Engine.
 */

// Base class for all items that can be stored in the inventory
class Item extends Actor;

/**
 * The Inventory class represents the player's inventory and handles all interactions with it.
 * It keeps track of the items in the inventory and their quantities.
 */
class Inventory extends Object
  extends BaseInventory;

// Variables
var config array<Item> Items; // Array of all possible items that can be stored in the inventory
var array<Item> InventoryItems; // Array of items currently in the inventory
var array<int> ItemQuantities; // Array of quantities for each item in the inventory

/**
 * Adds the specified item to the inventory with the given quantity.
 * If the item already exists in the inventory, its quantity will be increased.
 * If the item does not exist in the inventory, it will be added and its quantity will be set.
 *
 * @param InItem - The item to add.
 * @param InQuantity - The quantity of the item to add.
 */
function AddItem(Item InItem, int InQuantity)
{
  local int MaxQuantity;

  // Check if the item is already in the inventory
  MaxQuantity = InItem.MaxStackSize;
  if (InventoryItems.Find(InItem) != INDEX_NONE)
  {
    // Item already exists, increase quantity if possible
    if (ItemQuantities[InItem] < MaxQuantity)
    {
      ItemQuantities[InItem] = Clamp(ItemQuantities[InItem] + InQuantity, 0, MaxQuantity);
    }
    else
    {
      // Quantity is already at maximum, can't add more
      `log("Item inventory is already full.");
    }

    `log("Added " $ InQuantity $ " of " $ Item.Name $ " to inventory.");
  }
  else
  {
    // Item does not exist, add it to the inventory
    InventoryItems.AddItem(InItem);
    ItemQuantities.AddItem(InQuantity);

    `log("Added " $ InQuantity $ " of " $ Item.Name $ " to inventory.");
  }
}

/**
 * Removes the specified item from the inventory.
 * If the item's quantity in the inventory is greater than the specified quantity, it will be decreased.
 * If the item's quantity in the inventory is equal to or less than the specified quantity, it will be removed.
 *
 * @param InItem - The item to remove.
 * @param InQuantity - The quantity of the item to remove.
 */
function RemoveItem(Item InItem, int InQuantity)
{
  local int Index;

  // Check if the item is in the inventory
  Index = InventoryItems.Find(InItem);
  if (Index != INDEX_NONE)
  {
    // Item found, remove specified quantity or remove completely if quantity is less than or equal to
    if (ItemQuantities[Index] <= InQuantity)
    {
      InventoryItems.RemoveAt(Index);
      ItemQuantities.RemoveAt(Index);

      `log("Removed " $ InQuantity $ " of " $ Item.Name $ " from inventory.");
    }
    else
    {
      ItemQuantities[Index] = Clamp(ItemQuantities[Index] - InQuantity, 0, Item.MaxStackSize);

      `log("Removed " $ InQuantity $ " of " $ Item.Name $ " from inventory.");
    }
  }
  else
  {
    `log("Item not found in inventory.");
  }
}

/**
 * Swaps the position of two items in the inventory.
 * If either item is not found in the inventory, the swap will not occur.
 *
 * @param InItem1 - The first item to swap.
 * @param InItem2 - The second item to swap.
 */
function SwapItems(Item InItem1, Item InItem2)
{
  local int Index1, Index2;

  // Get the indexes of the items in the inventory
  Index1 = InventoryItems.Find(InItem1);
  Index2 = InventoryItems.Find(InItem2);

  // Check if both items are in the inventory
  if (Index1 != INDEX_NONE && Index2 != INDEX_NONE)
  {
    // Swap the positions of the items
    InventoryItems.Swap(Index1, Index2);
    ItemQuantities.Swap(Index1, Index2);

    `log("Swapped " $ Item.Name $ " with " $ Item2.Name);
  }
  else
  {
    `log("One or both items not found in inventory.");
  }
}