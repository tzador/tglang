/*
This is a complex code snippet in UnrealScript.
It includes multiple classes, functions, and control flow statements.
*/

class MyGame extends Game; //Defining a class that extends the built-in Game class
    var int Score; //Defining a variable to store the player's score

    /* Constructor for the MyGame class, setting the initial score to 0 */
    function MyGame()
    {
        Score = 0;
    }

    /*
    Function that adds a given amount to the player's score.
    Parameters:
        amount (int): the amount to be added to the score
    */
    function AddScore(int amount)
    {
        Score += amount; //Incrementing the score by the given amount
    }

class Player extends Pawn; //Defining a class that extends the built-in Pawn class
    var int Health; //Defining a variable to store the player's health

    /* Constructor for the Player class, setting the initial health to 100 */
    function Player()
    {
        Health = 100;
    }

    /*
    Function that decreases the player's health by a given amount.
    Parameters:
        amount (int): the amount to be subtracted from the health
    */
    function TakeDamage(int amount)
    {
        Health -= amount; //Decreasing the health by the given amount
    }

    /*
    Function that checks if the player's health is equal to or below 0.
    Returns:
        True (bool): if the player is dead
        False (bool): if the player is still alive
    */
    function IsDead()
    {
        if (Health <= 0) //Checking if the player's health is equal to or below 0
        {
            return True; //Player is dead
        }
        else
        {
            return False; //Player is still alive
        }
    }

function main(ScriptArray<string> args)
{
    var MyGame NewGame; //Creating an instance of the MyGame class
    var Player Player1; //Creating an instance of the Player class

    NewGame.AddScore(10); //Adding 10 to the player's score
    Player1.TakeDamage(50); //Subtracting 50 from the player's health

    //Checking if the player is dead
    if(Player1.IsDead())
    {
        NewGame.AddScore(-5); //Subtracting 5 from the player's score if they are dead
    }

    /*
    Looping through all the command-line arguments and printing them.
    Uses a for loop and the string.Format function.
    */
    for (local int i = 0; i < args.Length; i++)
    {
        local string arg = args[i]; //Assigning the current argument to a variable
        `log(string.Format("Argument {0}: {1}", i, arg)); //Printing the argument index and value
    }
}