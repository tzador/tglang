//=============================================================================
// The following class represents a weapon in an Unreal Engine game
// with advanced features and functionality.
//=============================================================================

class AdvancedWeapon extends Weapon
    config (AdvancedWeapon);

//-------------------------
// Variables
//-------------------------

var Inventory Item PrimaryAmmoType;

var Inventory Item AlternateAmmoType;

var float TimeBetweenShots;

var float TimeLeftInShot;

var int MaxAmmo;

var int CurrentAmmo;

var float ShotCooldown;

var WeaponFireMode FireMode;

var WeaponFireMode[] AvailableFireModes;

var float RecoilMultiplier;

var SoundCue FireSound;

//-------------------------
// Functions
//-------------------------

/**
 * Function responsible for setting the current fire mode of the weapon.
 *
 * @param WeaponFireMode   NewFireMode      The fire mode to switch to.
 */
protected function SetFireMode(WeaponFireMode NewFireMode)
{
    FireMode = NewFireMode;
}

/**
 * Function that determines whether the weapon can fire based on its ammo count and shot cooldown.
 *
 * @return bool     True if the weapon can fire, false otherwise.
 */
protected function bool CanFire()
{
    // Check if the weapon has any ammo left
    if (CurrentAmmo <= 0)
    {
        return false;
    }

    // Check if the weapon is still on cooldown
    if (TimeLeftInShot > 0)
    {
        return false;
    }

    return true;
}

/**
 * Function that handles the firing behavior of the weapon.
 */
public function Fire()
{
    // Check if the weapon can fire
    if (!CanFire())
    {
        return;
    }

    // Reduce current ammo count
    CurrentAmmo--;

    // Play the fire sound
    PlaySound(FireSound);

    // Perform the appropriate firing logic based on the current fire mode
    switch (FireMode)
    {
        case WeaponFireMode.Single:
            SingleFire();
            break;

        case WeaponFireMode.Burst:
            BurstFire();
            break;

        case WeaponFireMode.Automatic:
            AutomaticFire();
            break;
    }
}

/**
 * Function that handles the logic for firing a single shot.
 */
protected function SingleFire()
{
    // Perform the necessary actions for firing a single shot
}

/**
 * Function that handles the logic for firing a burst of shots.
 */
protected function BurstFire()
{
    // Perform the necessary actions for firing a burst of shots
}

/**
 * Function that handles the logic for automatic fire.
 */
protected function AutomaticFire()
{
    // Perform the necessary actions for automatic fire
}

/**
 * Function called when the character picks up ammo for this weapon.
 *
 * @param InventoryItem     Item    The ammo item that was picked up.
 * @param int               Amount  The amount of ammo that was picked up.
 * @return int                      The amount of ammo remaining after picking up the item.
 */
public function int PickupAmmo(InventoryItem Item, int Amount)
{
    // Check if the ammo type matches the primary or alternate type of this weapon
    if (Item == PrimaryAmmoType || Item == AlternateAmmoType)
    {
        // Check if the weapon is already at max ammo capacity
        if (CurrentAmmo == MaxAmmo)
        {
            // Do not pick up any ammo
            return Amount;
        }

        // Calculate the amount of ammo that can be picked up without exceeding the max
        int MaxAmount = MaxAmmo - CurrentAmmo;
        int PickedUpAmount = Min(MaxAmount, Amount);

        // Increase current ammo count
        CurrentAmmo += PickedUpAmount;

        // Return the amount of ammo remaining after the pickup
        return Amount - PickedUpAmount;
    }

    return Amount;
}

/**
 * Function called when the weapon is equipped by a player character.
 */
event Equip()
{
    // Call the base implementation
    super.Equip();

    // Set the initial fire mode to single
    SetFireMode(AvailableFireModes[0]);
}

/**
 * Function called when the weapon is unequipped by a player character.
 */
event UnEquip()
{
    // Call the base implementation
    super.UnEquip();
}

/**
 * Tick function that handles the shot cooldown and reload timer.
 */
event Tick(float DeltaTime)
{
    // Check if there is a shot cooldown active and subtract the delta time
    if (TimeLeftInShot > 0)
    {
        TimeLeftInShot = Max(0, TimeLeftInShot - DeltaTime);
    }

    // Check if the weapon is reloading and decrease the reload timer
    if (ReloadTimer > 0)
    {
        ReloadTimer = Max(0, ReloadTimer - DeltaTime);
    }
}

/**
 * Function called when the character initiates a reload for this weapon.
 */
public function Reload()
{
    // Check if the weapon is already at max ammo
    if (CurrentAmmo == MaxAmmo)
    {
        return;
    }

    // Check if the weapon is already reloading
    if (ReloadTimer > 0)
    {
        return;
    }

    // Start the reload timer
    ReloadTimer = ReloadTime;

    // Play the reload animation

    // Wait for the reload timer to complete
    `wait(ReloadTime);

    // Set current ammo to max
    CurrentAmmo = MaxAmmo;
}