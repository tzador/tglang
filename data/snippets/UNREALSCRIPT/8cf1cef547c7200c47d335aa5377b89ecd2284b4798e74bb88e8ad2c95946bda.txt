class MyCustomActor extends Actor
	// Creates a new class MyCustomActor that inherits from the Actor class.

	config(UserDefined)
	// Optional config() function specifying the configuration of the class. In this case, it is set to UserDefined.

	hidewith(NoCollision | Zone)
	// Optional hidewith() function specifying which collision responses should be hidden. Here, it is set to NoCollision and Zone.

	// Declare some variables for the class.
	var float Health;
	var int Ammo;
	var float Speed;
	var bool isDead;
	var PlayerController MyController;
	var Array<Vector> PathPoints;

	// Use the constructor to initialize variable values.
	MyCustomActor()
	{
		Health = 100.0;
		Ammo = 50;
		Speed = 5.0;
		isDead = false;
	}

	// Optional simulated() function specifying that this actor should be updated in the world.
	simulated()
	{
		super.simulated();

		// Check if the player is within a certain distance to the actor.
		if (VSize(MyController.Pawn.Location - Location) <= 500.0)
		{
			// Move towards the player's location at a set speed.
			VInterpTo(Location, MyController.Pawn.Location, Speed * GetActorDeltaSeconds(), Location);
		}
	}

	// Optional event function called when this actor takes damage.
	Event TakeDamage(int Damage, Controller instigatedBy, Vector hitLocation, Vector momentum, class<DamageType> damageType)
	{
		super.TakeDamage(Damage, instigatedBy, hitLocation, momentum, damageType);

		// Subtract the damage from the actor's health.
		Health -= Damage;

		// Check if the actor's health is less than or equal to 0.
		if (Health <= 0)
		{
			// Set the actor's isDead variable to true.
			isDead = true;
		}

		// Return true to indicate that the damage was applied.
		return true;
	}

	// Optional function called when another actor overlaps with this one.
	// In this example, it is used to check if the overlapping actor is a player character and, if so, apply damage to it.
	Event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
	{
		// Check if the overlapping actor is a player character.
		if (Other.IsA('Pawn'))
		{
			// Use the ApplyDamage() function to apply damage to the overlapping actor.
			Other.ActorTakeDamage(25, MyController, Location, Vector(1,1,1), class'DamageType');
		}
	}

	// Optional function called when this actor is destroyed.
	Destroyed()
	{
		super.Destroyed();

		// Print a message to the console indicating that this actor was destroyed.
		`Log("The actor " $ GetName() $ " was destroyed!");
	}
}