Class MyActor extends Actor
   // The main body of the class
   // First we declare some variables
   Var bool bIsInitialized;
   Var int Health;
   Var float Speed;
   
   // Then we add some default values to the variables. These values can be changed in the editor or in code.
   DefaultProperties
   {
      bIsInitialized = False;
      Health = 100;
      Speed = 500.0;
   }
   
   // Here we define a function that initializes the actor when it is first spawned into the world.
   // The keyword 'Event' means that the function can be called from outside the class.
   Event InitializeActor()
   {
      bIsInitialized = True;
      // We can also print a message to the log to confirm that the actor has been initialized.
      `log("Actor initialized successfully.")`;
   }
   
   // We can also add a function that modifies the health variable.
   // The keyword 'Simulated' means that this function is only executed on the server side.
   // This is useful for multiplayer games where each player has their own copy of the actor.
   Simulated function ModifyHealth(int Damage)
   {
      Health -= Damage;
      // We can check if the actor's health has dropped below 0 and destroy it if true.
      if (Health <= 0)
      {
         Destroy();
         // We can also print a message to the log to confirm that the actor has been destroyed.
         `log("Actor destroyed.")`;
      }
   }
   
   // In addition to functions, we can also define states within our class.
   // States are used to control the flow of execution within the class.
   // Here we define a state called 'Moving' which will be triggered when the actor's speed is greater than 0.
   state Moving
   {
      // First we define an event which is triggered when the state is entered.
      event BeginState()
      {
         // We can print a message to the log to confirm the state has been entered.
         `log("Actor is now moving.")`;
      }
      
      // Then we define a function that constantly updates the actor's position while the state is active.
      simulated function Tick(float DeltaTime)
      {
         // We can use the 'Velocity' property to move the actor.
         Velocity = Normal(Velocity) * Speed;
         
         // We can also check if the actor has collided with another actor by using the 'Touching' property.
         if (Touching == Level) 
         {
            // If so, we can change to a different state, such as 'Idle'.
            GotoState('Idle');
         }
      }
      
      // Finally, we define an event that is triggered when the state is exited.
      event EndState()
      {
         // We can print a message to the log to confirm the state has been exited.
         `log("Actor has stopped moving.")`;
      }
   }
   
   // We can also define a state for when the actor is idle.
   state Idle
   {
      // Functions and events within this state can be defined in a similar manner as the 'Moving' state.
      event BeginState()
      {
         `log("Actor is idle.")`;
      }
      
      simulated function Tick(float DeltaTime)
      {
         // Here we can also add code to rotate the actor towards the player, for example.
      }
      
      event EndState()
      {
         `log("Actor is no longer idle.")`;
      }
   }
   
   // We can also add a function that allows other actors to interact with this actor.
   function Interact()
   {
      // We can trigger this function by using the 'Intereact' key in game, for example.
      // Code for the interaction can be added here.
   }
   
   // We can also define a function that is executed when the actor is damaged.
   function TakeDamage(int DamageAmount, class<DamageType> DamageType, Controller InstigatedBy, Vector HitLocation, vector Momentum, Actor DamageCauser)
   {
      // Here we can add code to handle the damage, such as reducing the actor's health or calling the 'ModifyHealth' function.
   }
}