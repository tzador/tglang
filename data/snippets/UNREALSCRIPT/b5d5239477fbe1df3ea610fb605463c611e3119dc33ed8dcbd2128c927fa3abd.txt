/**
* @brief Interface for objects that can be activated by players.
*/
interface IActivator
{
  /**
  * @brief Function to trigger activation of the object.
  *
  * @param TriggeringPlayer The player who triggered the activation.
  */
  simulated function Activate(Pawn TriggeringPlayer);

  /**
  * @brief Event called when the object is successfully activated.
  *
  * @param ActivatingPlayer The player who triggered the activation.
  */
  event Activated(PlayerController ActivatingPlayer);
}

/**
* @brief Represents a door that can be opened and closed.
*/
class Door extends Actor implements IActivator
{
  /**
  * @brief Whether the door is currently open or closed.
  */
  var bool bOpen;

  /**
  * @brief Function that handles opening and closing the door.
  *
  * @param TriggeringPlayer The player who triggered the opening or closing.
  */
  simulated function Activate(Pawn TriggeringPlayer)
  {
    if(bOpen)
    {
      // Close the door
      SetActorLocation(InitialLocation);
      bOpen = False;
    }
    else
    {
      // Open the door
      SetActorLocation(FinalLocation);
      bOpen = True;
    }
    // Raise the Activated event
    Activated(GetPlayerPawn(TriggeringPlayer.Controller));
  }

  /**
  * @brief Event called when the door is successfully activated.
  *
  * @param ActivatingPlayer The player who triggered the activation.
  */
  event Activated(PlayerController ActivatingPlayer)
  {
    // Send a message to the player
    ActivatingPlayer.ClientMessage("The door has been activated!");
  }
}