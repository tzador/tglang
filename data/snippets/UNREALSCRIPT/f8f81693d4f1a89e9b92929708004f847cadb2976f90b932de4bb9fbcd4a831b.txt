/**
 * This is a complex class that represents a character in a game
 */

class MyCharacter extends Character;

/**
 * This function handles the character's movement based on input
 * @param InputEvent Represents a physical input event from the player
 */
function MoveCharacter(InputEvent)
{
    // Calculate the desired movement direction from the input
    local vector moveDirection = InputEvent.Direction * Rotation;

    // Apply the desired movement direction to the character
    Velocity = moveDirection * MoveSpeed;

    // Set the character's rotation based on the input
    local rotator desiredRotation = Rotator(0, InputEvent.Rotation.Yaw, 0);
    SetRotation(desiredRotation);
}

/**
 * This function handles the character's attack based on input
 * @param InputEvent Represents a physical input event from the player
 */
function Attack(InputEvent)
{
    // Spawn a projectile with a random offset from the character's location
    local actor Projectile = Spawn(class'Projectile', Location + vect(RangedRand(-100, 100), RangedRand(-100, 100), RangedRand(-100, 100)), Rotation);

    // Set the projectile's velocity based on the character's rotation
    local vector projectileVelocity = Rotation.Vector() * Projectile.MoveSpeed;
    Projectile.SetVelocity(projectileVelocity);

    // Play an attack animation if specified
    if (InputEvent.bIsPressed && AnimationSet.AttackAnim != None)
    {
        PlayAnim(AnimationSet.AttackAnim, 0.1, 0.1, true, false);
    }
}

/**
 * This function handles the character's death
 */
function Death()
{
    // Play a death animation if specified
    if (AnimationSet.DeathAnim != None)
    {
        PlayAnim(AnimationSet.DeathAnim, 0.1, 0.1, false, true);
    }

    // Destroy the character
    Destroy();
}

/**
 * This function handles the character's respawn
 */
function Respawn()
{
    // Reset the character's health
    Health = MaxHealth;

    // Reset the character's location and rotation
    SetLocation(InitialLocation);
    SetRotation(InitialRotation);
}