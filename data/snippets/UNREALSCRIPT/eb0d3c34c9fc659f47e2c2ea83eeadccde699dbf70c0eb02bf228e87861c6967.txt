/*
This is a long and complex code snippet written in UNREALSCRIPT.
It creates a basic inventory system for a game.
*/

class Inventory extends Actor; //creates a class for the inventory system

var array<Item> Items; //creates an array to hold different items

enum EItemTypes
{
    ITEMTYPE_Weapon, //enumerates the different types of items
    ITEMTYPE_Armor,
    ITEMTYPE_Potion
}

struct Item
{
    var() EItemTypes ItemType; //creates a variable to store the item type
    var() int Quantity; //creates a variable to store the quantity of the item
}

function DisplayInventory() //function to display the contents of the inventory
{
    local int i;

    for(i = 0; i < Items.Length; i++) //loops through the array of items
    {
        switch(Items[i].ItemType) //switch statement to display the correct item type
        {
            case ITEMTYPE_Weapon: //if item type is weapon
                `Weapon: ` @ Items[i].Quantity @ " in inventory"; //displays the quantity of the weapon
                break;

            case ITEMTYPE_Armor: //if item type is armor
                `Armor: ` @ Items[i].Quantity @ " in inventory"; //displays the quantity of the armor
                break;

            case ITEMTYPE_Potion: //if item type is potion
                `Potion: ` @ Items[i].Quantity @ " in inventory"; //displays the quantity of the potion
                break;
        }
    }
}

function AddItem(Item newItem) //function to add an item to the inventory
{
    local int foundIndex;

    foundIndex = FindItem(newItem); //calls the FindItem function to check if the item is already in the inventory

    if(foundIndex >= 0) //if item is found in inventory
    {
        Items[foundIndex].Quantity += newItem.Quantity; //increase the quantity of the existing item
    }
    else //if item is new to inventory
    {
        Items.AddItem(newItem); //add the new item to the array
    }
}

function FindItem(Item itemToFind) //function to find an item in the inventory
{
    local int i;

    for(i = 0; i < Items.Length; i++) //loops through the array of items
    {
        if(Items[i].ItemType == itemToFind.ItemType) //checks if the item type is the same
        {
            return i; //returns the index of the item in the array
        }
    }

    return -1; //returns -1 if item is not found
}

function RemoveItem(Item itemToRemove) //function to remove an item from the inventory
{
    local int foundIndex;

    foundIndex = FindItem(itemToRemove); //calls the FindItem function to check if the item is in the inventory

    if(foundIndex >= 0) //if item is found in the inventory
    {
        Items[foundIndex].Quantity -= itemToRemove.Quantity; //decreases the quantity of the item
    }

    if(Items[foundIndex].Quantity < 0) //if item quantity is less than 0
    {
        Items.RemoveAt(foundIndex); //removes the item from the array
    }
}

defaultproperties
{
    Begin Object Class=DefaultInventoryActor Name=Inventory //creates an instance of the inventory system
    End Object

    HitscanOwner=Inventory //sets the owner of the inventory system to be the player character
}