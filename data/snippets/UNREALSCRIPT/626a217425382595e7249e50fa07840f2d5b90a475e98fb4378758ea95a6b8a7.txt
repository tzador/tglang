class MyClass extends Actor implements Interactable, Projectile
    placeable within TestMap;

/// This is a comment explaining the purpose of the class

/// Declare variables
var() int Health;
protected var() bool bIsAlive;
var() float Speed;

/// Set default values for variables
/// Note: Health has a property specifer for easy access in editor
defaultproperties
{
    Health = 100
    bIsAlive = true
    Speed = 500
}

/// Event called when the actor is spawned
function PostBeginPlay()
{
    // Call parent function
    super.PostBeginPlay();
    
    // Print message indicating actor has spawned
    `log("Actor spawned and ready to interact!")`;
    
    // Set collision responses for Projectile interface
    `Projectile.InstigatorType = COLLIDE_ProjectileChannel`;
    `Projectile.TargetType = COLLIDE_None`;
}

/// Function that takes in a damage value and reduces health
function TakeDamage(int Damage)
{
    `log("Taking" @ Damage @ "damage!")`;
    
    // Subtract damage from health variable
    Health -= Damage;
    
    /// Check if health is below 0 and call OnDeath function if true
    if(Health <= 0)
    {
        `self.OnDeath()`;
    }
}

/// Implementation of Interactable interface's interact function
/// This function is called when another actor interacts with this one
auto state Interact()
{
    // Check if actor is alive before allowing interaction
    if(bIsAlive)
    {
        // Print message indicating successful interaction
        `log("Interacting with actor!")`;
        
        // Set actor's speed to 0 to simulate being interacted with
        Speed = 0;
        
        // Call OnDestroy function after a delay of 3 seconds
        `self.Destroy(3.0)`;
    }
    
    /// Return to main state after interaction is complete
    `return MainState`;
}

/// State that handles actor's death
state OnDeath
{
    // Print death message and set alive variable to false
    `log("Actor has died!")`;
    bIsAlive = false;
    
    /// Return to main state after a 2 second delay
    `return MainState after 2.0`;
}

/// Main state of the actor, handles movement and any other functions
auto state MainState
{
    // Constantly move actor forward at set speed
    `Move(FORWARD_VECTOR * Speed * DeltaTime)`;
    
    /// Return to this state after a delay of 0.5 seconds
    `return MainState after 0.5`;
}