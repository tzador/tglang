/**
*Struct
*/
struct MyStruct
{
    var int MyInt; //<-- variable of type int
    var string MyString; //<-- variable of type string
};

/**
*Class
*/
class MyClass extends Object
    implements Interface1, Interface2
{
    config (MyStruct) MyStructVariable; //<-- configuration variable of type MyStruct
    var float MyFloat; //<-- variable of type float
    const int MyConstant = 100; //<-- constant variable of type int
    
    defaultproperties //<-- default values for variables
    {
        MyFloat = 3.14159;
        MyStructVariable.MyInt = 10;
        MyStructVariable.MyString = "Hello World!";
    }
    
    /**
    *Function
    */
    function MyFunction(int Param1, MyStruct Param2) -> bool //<-- function with return type bool
    {
        local int TempInt; //<-- local variable of type int
        local string TempString; //<-- local variable of type string
        
        if(Param1 > MyConstant) //<-- if statement using constant variable
        {
            TempInt = Param2.MyInt + MyStructVariable.MyInt; //<-- addition of two variables
            TempString = Param2.MyString $ " " $ MyStructVariable.MyString; //<-- concatenation of two variables
            
            `Log("TempInt: " @ TempInt); //<-- log statement using local variable
            `Log("TempString: " @ TempString);
            
            return true; //<-- return statement
        }
        else
        {
            `Log("Param1 is not greater than MyConstant!"); //<-- else statement using string literal
            return false;
        }
    }
}