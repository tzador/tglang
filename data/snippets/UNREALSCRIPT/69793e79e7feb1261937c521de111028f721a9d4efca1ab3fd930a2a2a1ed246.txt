class MyClass extends Actor
	// this class represents a basic game object
	// with various properties and functions
	// and can be used as a base class for other objects

	// define properties for the class
    var int MyProperty;
    simulated var bool MyBoolProperty;
    var float MyFloatProperty;

    // constructor function
    function MyClass()
    {
        // set default values for properties
        MyProperty = 50;
        MyBoolProperty = true;
        MyFloatProperty = 0.5;

        // call initialization function
        Init();
    }

    // initialization function
    function Init()
    {
		// do some initialization tasks
        // for example, add components to the object
        AddComponent(class'Component', name'Comp1');
        AddComponent(class'Component', name'Comp2');

        // register for events
        `OnBeginState`(comp1, 'EventName', Self, 'EventFunction');
        `OnTakeDamage`(self, 25);
    }

    // event function that is triggered when a certain event occurs
    // in this case, when the object takes damage
    event OnTakeDamage(Actor DamageCauser, int Damage)
    {
        // perform some actions based on the damage taken
        if (Damage > 50)
        {
            // destroy the object if the damage is greater than 50
            Destroy();
        }
        else
        {
            // modify properties based on the damage
            MyProperty = MyProperty - Damage;
            MyFloatProperty = Damage * 2;
        }
    }

    // function that returns a formatted string with information about the object
    function string GetInfo()
    {
        local string Info;

        // add basic information
        Info = "Object Name: " $ GetObjectName();
        Info = Info @ "\nMyProperty: " @ MyProperty;
        Info = Info @ "\nMyBoolProperty: " @ bToString(MyBoolProperty);
        Info = Info @ "\nMyFloatProperty: " @ FString(MyFloatProperty);

        // add information about components attached to the object
        Info = Info @ "\nComponents:";
        foreach AllComponents(class'Component', Comp)
        {
            Info = Info @ "\n" @ Comp.class@":"@Comp.getName();
        }

        return Info;
    }

    // state machine for the object
    state MyState
    {
        // state entry function
        function BeginState()
        {
            // perform some actions when entering this state
            SetTimer(5.0, false, name'TimerFunc');
        }

        // function called by the timer
        // used for changing properties or states
        // based on a timer
        function TimerFunc()
        {
            MyProperty = MyProperty + 5;
            SetState('NextState');
        }

        // state exit function
        function EndState()
        {
            // perform some actions when exiting this state
            ClearTimer(name'TimerFunc');
        }
    }