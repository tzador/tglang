/*
This code snippet is a simple inventory system implemented in UNREALSCRIPT. 
It contains classes for items, inventory, and a character.
*/

//ITEM CLASS
class Item extends Object;

//properties of item
var const string NAME; //name of item
var const string DESCRIPTION; //description of item
var const int STACKLIMIT; //maximum number of items that can be stacked
var const int WEIGHT; //weight of item in inventory

//constructor
function Item(string name, string description, int stackLimit, int weight)
{
	NAME = name;
	DESCRIPTION = description;
	STACKLIMIT = stackLimit;
	WEIGHT = weight;
}

//INVENTORY CLASS
class Inventory extends Object;

//properties of inventory
var array<Item> Items; //array of items in inventory
var weightLimit; //maximum weight capacity of inventory

//constructor
function Inventory(float weightLimit)
{
	weightLimit = weightLimit;
}

//function to add item to inventory
function AddItem(Item newItem)
{
	//check if item is already in inventory and if not, add it
	if (!Items.Contains(newItem))
	{
		Items.AddItem(newItem);
		Log("Added " $ newItem.NAME $ " to inventory.");
	}
	else
	{
		Log("Inventory already contains " $ newItem.NAME $".");
	}
}

//function to remove item from inventory
function RemoveItem(Item itemToRemove)
{
	//check if item is in inventory and if so, remove it
	if (Items.Contains(itemToRemove))
	{
		Items.RemoveItem(itemToRemove);
		Log("Removed " $ itemToRemove.NAME $ " from inventory.");
	}
	else
	{
		Log("Inventory does not contain " $ itemToRemove.NAME $".");
	}
}

//CHARACTER CLASS
class Character extends Object;

//properties of character
var Inventory CharacterInventory; //inventory of character

//constructor
function Character()
{
	//create new inventory with weight limit of 100
	characterInventory = new Inventory(100);
}

//function to pick up item and add it to inventory
function PickUp(Item item)
{
	CharacterInventory.AddItem(item);
	//check if item is within weight limit of inventory
	if (GetWeight() > CharacterInventory.weightLimit)
	{
		CharacterInventory.RemoveItem(item);
		Log("Item is too heavy to be picked up.");
	}
}

//function to drop item and remove it from inventory
function Drop(Item item)
{
	CharacterInventory.RemoveItem(item);
}

//function to get total weight of items in inventory
function GetWeight()
{
	local int weight = 0;
	foreach (Item i in CharacterInventory.Items)
	{
		weight += i.WEIGHT;
	}
	return weight;
}

//END OF CODE SNIPPET