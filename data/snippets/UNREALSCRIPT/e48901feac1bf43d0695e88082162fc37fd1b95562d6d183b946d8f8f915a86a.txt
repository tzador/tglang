/***
* This is a complex and long code snippet written in UNREALSCRIPT, a programming language used for creating games in Unreal Engine.
*/

/**
* Here we define a class called WeaponManager, which will be responsible for handling all the weapons in our game.
*/
class WeaponManager extends Actor
	placeable;

/**
* Here we declare a variable "WeaponSlots" to store the weapons that can be equipped by the player.
* It is an array of Weapon classes, which will be filled with instances of different weapons.
*/
var Weapon WeaponSlots[5];

/**
* This function is used to add a weapon to a specific slot in the WeaponSlots array.
* It takes in a Weapon class instance and an index, and assigns the weapon to that index in the array.
*/
function AddWeapon(Weapon NewWeapon, int SlotIndex)
{
	WeaponSlots[SlotIndex] = NewWeapon;
}

/**
* This function is used to equip a weapon from the WeaponSlots array.
* It takes in an index and sets the currently equipped weapon to that index in the array.
*/
function EquipWeapon(int SlotIndex)
{
	WeaponSlots[SlotIndex].Equip();
}

/**
* This function is used to fire the currently equipped weapon.
* It first checks if there is a weapon equipped, and then calls the Fire() function on it.
*/
function FireCurrentWeapon()
{
	if (WeaponSlots[SlotIndex] != none)
	{
		WeaponSlots[SlotIndex].Fire();
	}
}

/**
* This function is used to reload the currently equipped weapon.
* It first checks if there is a weapon equipped, and then calls the Reload() function on it.
*/
function ReloadCurrentWeapon()
{
	if (WeaponSlots[SlotIndex] != none)
	{
		WeaponSlots[SlotIndex].Reload();
	}
}

/**
* This function is used to switch to the next weapon in the WeaponSlots array.
* It checks if there is a weapon equipped, and then loops through the array to find the next available weapon.
* Once found, it equips that weapon.
*/
function SwitchToNextWeapon()
{
	if (WeaponSlots[SlotIndex] != none)
	{
		local int NextIndex;

		// Loop through the array from the current index to find the next available weapon.
		for (local int i = SlotIndex + 1; i < WeaponSlots.Length; i++)
		{
			if (WeaponSlots[i] != none)
			{
				NextIndex = i;
				break;
			}
		}

		// If no available weapon is found, loop again from index 0.
		if (NextIndex == none)
		{
			for (local int j = 0; j < SlotIndex; j++)
			{
				if (WeaponSlots[j] != none)
				{
					NextIndex = j;
					break;
				}
			}
		}

		// Equip the next available weapon.
		EquipWeapon(NextIndex);
	}
}

/**
* This function is used to switch to the previous weapon in the WeaponSlots array.
* It checks if there is a weapon equipped, and then loops through the array to find the previous available weapon.
* Once found, it equips that weapon.
*/
function SwitchToPreviousWeapon()
{
	if (WeaponSlots[SlotIndex] != none)
	{
		local int PreviousIndex;

		// Loop through the array from the current index to find the previous available weapon.
		for (local int i = SlotIndex - 1; i >= 0; i--)
		{
			if (WeaponSlots[i] != none)
			{
				PreviousIndex = i;
				break;
			}
		}

		// If no available weapon is found, loop again from the end of the array.
		if (PreviousIndex == none)
		{
			for (local int j = WeaponSlots.Length - 1; j > SlotIndex; j--)
			{
				if (WeaponSlots[j] != none)
				{
					PreviousIndex = j;
					break;
				}
			}
		}

		// Equip the previous available weapon.
		EquipWeapon(PreviousIndex);
	}
}

/**
* This is the base class for all weapons.
* It contains common functions and variables that will be inherited by specific weapon classes.
*/
class Weapon extends Actor
{
	/**
	* The name of the weapon.
	*/
	var const string Name;

	/**
	* The amount of ammunition the weapon currently has.
	*/
	var int AmmoCount;

	/**
	* The maximum amount of ammunition the weapon can hold.
	*/
	var int MaxAmmo;

	/**
	* The rate at which the weapon fires.
	*/
	var const float FireRate;

	/**
	* The damage the weapon deals.
	*/
	var const float Damage;

	/**
	* The range at which the weapon can deal damage.
	*/
	var const float Range;

	/**
	* The sound that plays when the weapon fires.
	*/
	var Sound FireSound;

	/**
	* The mesh of the weapon.
	*/
	var mesh WeaponMesh;

	/**
	* The animation played when the weapon is equipped.
	*/
	var animation EquipAnimation;

	/**
	* True if the weapon is fully automatic, false if it is semi-automatic.
	*/
	var const bool IsAutomatic;

	/**
	* True if the weapon is currently equipped, false if it is not.
	*/
	var bool bIsEquipped;

	/**
	* This function is called when the weapon is equipped.
	* It sets the bIsEquipped variable to true and plays the equip animation.
	* It can be overriden by specific weapon classes.
	*/
	function Equip()
	{
		bIsEquipped = true;
		PlayAnim(EquipAnimation);
	}

	/**
	* This function is called when the weapon is fired.
	* It can be overriden by specific weapon classes.
	*/
	function Fire()
	{
		// Code for firing the weapon.
	}

	/**
	* This function is called when the weapon needs to be reloaded.
	* It can be overriden by specific weapon classes.
	*/
	function Reload()
	{
		// Code for reloading the weapon.
	}
}

/**
* This is the base class for all melee weapons.
* It inherits from the Weapon class and contains functions and variables specific to melee weapons.
*/
class MeleeWeapon extends Weapon
{
	/**
	* The range at which the weapon can attack.
	*/
	var const float AttackRange;

	/**
	* The animation played when the weapon is swung.
	*/
	var animation SwingAnimation;

	/**
	* This function is called when the weapon is swung.
	* It plays the SwingAnimation and checks for any Actors within the AttackRange.
	* If an Actor is found, it takes damage.
	*/
	function Swing()
	{
		PlayAnim(SwingAnimation);

		// Check for any Actors within the AttackRange
		foreach (AllActors(class 'Actor', Touching(GameObject))) 
		{
			if ((VSize(Other.Location - Owner.Location) < AttackRange) && VDot(Other.Location - Owner.Location, Owner.Rotation) > 0) 
			{
				// Take damage from the attack.
				Other.TakeDamage(Damage, Owner,, Other.Location,, SwingDamageType);

				// Play a hit animation on the affected Actor.
				PlayHit(Other.Location,Normal(Other.Location - Owner.Location));
			}
		}
	}
}

/**
* This is the base class for all ranged weapons.
* It inherits from the Weapon class and contains functions and variables specific to ranged weapons.
*/
class RangedWeapon extends Weapon
{
	/**
	* The projectile class that will be spawned when the weapon is fired.
	*/
	var class<Projectile> ProjectileClass;

	/**
	* This function is called when the weapon is fired.
	* It spawns a projectile and sets its properties, such as the damage and speed.
	*/
	function Fire()
	{
		local Projectile NewProjectile;

		// Get the owner's position and rotation.
		local vector SpawnLoc = Owner.Location + 80 * Owner.Rotation;

		// Spawn a projectile at the spawn location.
		NewProjectile = spawn(ProjectileClass, self, '', SpawnLoc, Owner.Rotation);

		if (NewProjectile != none)
		{
			// Set the projectile's damage and speed.
			NewProjectile.Damage = Damage;
			NewProjectile.Velocity = Range * Normal(Vector(Projectile->Location - Owner.Location)) * Projectile->GetPhysics().MaxSpeed;

			// Play the firing sound.
			FireSound.Play(SpawnLoc);
		}
	}
}