/**
 * This class represents a player character in the game
 * It contains properties and functions for managing player actions and attributes
 * Inherits from the base class Actor
 */
class PlayerCharacter extends Actor
    placeable;

// Properties
var float Speed;
var float Health;
var int AmmoCount;
var bool IsAlive;
var array<Item> Inventory;

// Events
event TakeDamage(int DamageAmount, Object DamageCauser);
event PickupItem(Item ItemPickedUp);

/**
 * Called each frame to update the player's actions and attributes
 */
simulated function Tick(float DeltaTime)
{
    // Check if the player is alive
    if(IsAlive)
    {
        // Move the player based on input
        MovePlayer();

        // Check if the player's health has reached 0
        if(Health == 0)
        {
            // Call the player's death function
            Die();
        }
    }
}

/**
 * Handles player movement based on input
 */
function MovePlayer()
{
    // Get input from the player's keyboard or controller
    local float ForwardInput;
    local float RightInput;
    ForwardInput = GetInputAxis('MoveForward');
    RightInput = GetInputAxis('MoveRight');

    // Calculate and set player velocity based on input and speed property
    local vector NewVelocity;
    NewVelocity.X = ForwardInput * Speed;
    NewVelocity.Y = RightInput * Speed;
    SetVelocity(NewVelocity);
}

/**
 * Called when the player takes damage
 * Updates player's health property and checks if player is still alive
 * @param DamageAmount - The amount of damage received
 * @param DamageCauser - The object or actor that caused the damage
 */
function TakeDamage(int DamageAmount, Object DamageCauser)
{
    // Subtract damage amount from health
    Health -= DamageAmount;

    // Check if player is still alive
    if(Health <= 0)
    {
        // Call player's death function
        Die();
    }
}

/**
 * Called when the player picks up an item
 * Adds the item to the player's inventory
 * @param ItemPickedUp - The item object that was picked up
 */
function PickupItem(Item ItemPickedUp)
{
    // Add the picked up item to the inventory array
    Inventory.AddItem(ItemPickedUp);
}

/**
 * Called when the player dies
 * Stops player movement and sets the IsAlive property to false
 */
function Die()
{
    // Stop player movement
    SetVelocity(vector(0,0,0));

    // Set player's IsAlive property to false
    IsAlive = false;
}