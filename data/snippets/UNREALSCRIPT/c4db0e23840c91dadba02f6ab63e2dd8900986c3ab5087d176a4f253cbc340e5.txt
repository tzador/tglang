//Create a new struct for holding information about a player's inventory
struct InventoryInfo extends Object
{
    var const name //name of the item
    var const quantity //quantity of the item
    
    //initialize the struct with the given name and quantity
    function InitItem(name, quantity)
    {
        self.name = name;
        self.quantity = quantity;
    }
    
    //function to add more items to the inventory
    function AddItems(newQuantity)
    {
        self.quantity += newQuantity;
    }
    
    //function to remove items from the inventory
    function RemoveItems(removedQuantity)
    {
        if (self.quantity > removedQuantity)
        {
            self.quantity -= removedQuantity;
        }
    }
}

//create an array of InventoryInfo objects to store player's inventory
var array<InventoryInfo> PlayerInventory;

//function to add items to the player's inventory
function AddInventoryItem(name, quantity)
{
    //create a new InventoryInfo object and add it to the player's inventory array
    local InventoryInfo NewItem;
    NewItem.InitItem(name, quantity);
    PlayerInventory.AddItem(NewItem);
}

//function to remove items from the player's inventory
function RemoveInventoryItem(name, removedQuantity)
{
    //loop through the player's inventory to find the item to be removed
    for (local int i = 0; i < PlayerInventory.Length; i++)
    {
        //check if the item name matches the one given
        if (PlayerInventory[i].name == name)
        {
            //call the RemoveItems function to remove the specified quantity
            PlayerInventory[i].RemoveItems(removedQuantity);
            break;
        }
    }
}

//function to print out the player's inventory
function PrintInventory()
{
    //loop through the player's inventory and print out each item's name and quantity
    for (local int i = 0; i < PlayerInventory.Length; i++)
    {
        `Log(PlayerInventory[i].name @ ": " @ PlayerInventory[i].quantity);
    }
}