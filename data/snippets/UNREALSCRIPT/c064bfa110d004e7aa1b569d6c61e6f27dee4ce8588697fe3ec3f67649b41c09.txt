/*
This is a long and complex code snippet in UnrealScript, used for creating a player-controlled character with multiple abilities.
*/

class PlayerCharacter extends Pawn;

//Define movement variables
var float speed; //Movement speed
var float jumpHeight; //Jump height
var Vector moveDirection; //Direction of movement
var bool isGrounded; //Flag for determining if character is on the ground

//Define ability variables
var int currentAbility; //Index of current ability
var array<Ability> abilities; //Array of available abilities

//Event called when character is spawned in
event Initialize()
{
	//Set initial movement and ability values
	speed = 500.f; //Movement speed of 500 units per second
	jumpHeight = 1000.f; //Jump height of 1000 units
	currentAbility = 0; //First ability in array will be the default
	abilities = new class'Ability'[3]; //Create an array of 3 abilities

	//Create and add abilities to array
	abilities[0] = Spawn(class'Ability1'); //Spawn and add first ability to array
	abilities[1] = Spawn(class'Ability2'); //Spawn and add second ability to array
	abilities[2] = Spawn(class'Ability3'); //Spawn and add third ability to array
}

//Event called every frame
event Tick(float deltaTime)
{
	//Check for movement input
	moveDirection = Vector(0,0,0); //Reset move direction
	if(InputKeyIsPressed('W'))
		moveDirection.Y += 1; //Move forward
	if(InputKeyIsPressed('S'))
		moveDirection.Y -= 1; //Move backward
	if(InputKeyIsPressed('D'))
		moveDirection.X += 1; //Move right
	if(InputKeyIsPressed('A'))
		moveDirection.X -= 1; //Move left

	//Normalize move direction and multiply by speed
	moveDirection = Normal(moveDirection) * speed;

	//Check for jump input
	if(InputKeyIsPressed('Space') && isGrounded)
		Velocity.Z = jumpHeight; //Set Z velocity to jump height

	//Apply movement to character
	Acceleration = moveDirection;

	//Check for ability input
	if(InputKeySinglePressed('LeftMouseButton'))
		UseCurrentAbility(); //Use current ability
	if(InputKeySinglePressed('1'))
		SetCurrentAbility(0); //Switch to first ability in array
	if(InputKeySinglePressed('2'))
		SetCurrentAbility(1); //Switch to second ability in array
	if(InputKeySinglePressed('3'))
		SetCurrentAbility(2); //Switch to third ability in array
}

//Function for using current ability
function UseCurrentAbility()
{
	//Check if current ability is available and has enough energy
	if(abilities[currentAbility] != None && abilities[currentAbility].HasEnoughEnergy())
		abilities[currentAbility].Use(); //Use current ability
}

//Function for setting current ability
function SetCurrentAbility(int index)
{
	//Check if index is valid and ability at index exists
	if(index >= 0 && index < abilities.length && abilities[index] != None)
		currentAbility = index; //Set current ability to index
}

//Event called when character collides with another actor
event Bump(Actor Other, PrimitiveComponent ImpactedComponent, Vector HitNormal)
{
	//Check if collision is with the ground
	if(HitNormal.Z > 0.7)
		isGrounded = true; //Character is on the ground
	else
		isGrounded = false; //Character is not on the ground
}

//Structure used for holding ability data
struct Ability extends Object
{
	var float energyCost; //Energy cost of ability
	var float damage; //Damage of ability
	var float cooldown; //Cooldown time of ability
	var float timer; //Current timer for ability cooldown

	//Function for checking if ability has enough energy to use
	function bool HasEnoughEnergy()
	{
		return energyCost <= GetEnergy(); //Check if energy cost is less than or equal to current energy value
	}

	//Function for using ability
	function Use()
	{
		//Do ability actions
		DealDamage(damage); //Deal damage to target
		SubtractEnergy(energyCost); //Subtract energy cost from current energy value
		timer = cooldown; //Set timer to cooldown value
	}

	//Function for updating ability cooldown
	function UpdateCooldown(float deltaTime)
	{
		//Check if timer is greater than 0 (ability is on cooldown)
		if(timer > 0)
			timer -= deltaTime; //Subtract time from timer
	}
}

//Class used for first ability
class Ability1 extends Ability;

//Class used for second ability
class Ability2 extends Ability;

//Class used for third ability
class Ability3 extends Ability;