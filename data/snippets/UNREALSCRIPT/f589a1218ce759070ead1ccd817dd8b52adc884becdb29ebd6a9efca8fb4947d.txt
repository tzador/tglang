/**
 * This is a complex code snippet in UNREALSCRIPT that uses arrays and loops.
 * It generates a grid of spheres in a 3D space.
 */
class SphereGenerator extends Actor; //'SphereGenerator' inherits from 'Actor' class
var int Rows; //'Rows' variable to hold number of rows
var int Cols; //'Cols' variable to hold number of columns
var float Spacing; //'Spacing' variable to hold distance between spheres
var Array<MeshComponent> Spheres; //'Spheres' array to hold sphere mesh components
var Array<Vector> SpherePositions; //'SpherePositions' array to hold sphere positions

/**
 * Initialization function, called when the actor is spawned.
 */
function Initialize()
{
    //initialize 'Spheres' array with 'Rows*Cols' elements
    Spheres.length = Rows * Cols;
    
    //'CurrentIndex' variable to keep track of current index in 'Spheres' array
    local int CurrentIndex;
    CurrentIndex = 0;
    
    //loop through rows
    for (local int i=0; i<Rows; i++)
    {
        //loop through columns
        for (local int j=0; j<Cols; j++)
        {
            //create a new sphere component and add it to 'Spheres' array
            local MeshComponent NewSphere;
            NewSphere = Spawn(class'MeshComponent', self);
            Spheres[CurrentIndex] = NewSphere;
            
            //calculate sphere position based on 'Spacing' and current row/col
            local Vector SpherePos;
            SpherePos.X = i * Spacing;
            SpherePos.Y = j * Spacing;
            SpherePos.Z = 0;
            
            //add sphere position to 'SpherePositions' array
            SpherePositions[CurrentIndex] = SpherePos;
            
            //increment 'CurrentIndex'
            CurrentIndex++;
        }
    }
    
    //set sphere mesh and position using values from 'Spheres' and 'SpherePositions' arrays
    for (CurrentIndex=0; CurrentIndex<Spheres.length; CurrentIndex++)
    {
        Spheres[CurrentIndex].SetStaticMeshReference(Mesh'Meshes.Sphere'); //use a predetermined mesh
        Spheres[CurrentIndex].SetWorldLocation(SpherePositions[CurrentIndex]);
    }
}