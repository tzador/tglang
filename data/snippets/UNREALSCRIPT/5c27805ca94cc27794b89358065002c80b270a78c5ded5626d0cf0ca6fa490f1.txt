/**
 * This is a class that represents a player character in a game.
 */
class PlayerCharacter extends Actor
    placeable;

var int PlayerScore; // stores the player's score
var int PlayerLevel; // stores the player's level

/**
 * Function called when the player dies.
 * @param instigator The actor that caused the player's death.
 */
function OnDeath(Actor instigator)
{
    `log( "The player character has died!" );`
    `PlayerScore -= 100; // reduce the player's score by 100`
    // TODO: Implement other death-related actions
}

/**
 * Function called when the player collects an item.
 * @param item The item being collected.
 */
function OnItemCollected(Item item)
{
    if (item.Name == "Gold") // check if the collected item is Gold
    {
        `log( "The player has collected gold!" );`
        `PlayerScore += 50; // increase the player's score by 50`
        // TODO: Implement other item-related actions
    }
}

/**
 * Function called when the player levels up.
 * @param level The player's new level.
 */
function OnLevelUp(int level)
{
    `log( "The player has reached level " $level );`
    `PlayerLevel = level; // set the player's level to the new level`
    // TODO: Implement other level-related actions
}

/**
 * Function called when a game event is triggered.
 * @param eventName The name of the event.
 * @param eventData The data associated with the event.
 */
function OnGameEvent(string eventName, string eventData)
{
    switch(eventName)
    {
        case "GameStart":
            `log( "The game has started!" );`
            break;
        case "GameOver":
            `log( "Game over!" );`
            break;
        // Add more cases for other game events
    }
}

/**
 * Function called when the game is paused or unpaused.
 * @param isPaused Whether the game is paused or unpaused.
 */
function OnPause(bool isPaused)
{
    if (isPaused)
    {
        `log( "The game is now paused!" );`
    }
    else
    {
        `log( "The game has been unpaused!" );`
    }
}

defaultproperties
{
    PlayerScore = 0; // initialize player's score to 0
    PlayerLevel = 1; // initialize player's level to 1
}