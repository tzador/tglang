/**
    This is a multi-line comment in UnrealScript code.
    It is used to add descriptions or documentation to the code.
    These comments are ignored by the compiler.
*/

/** 
    Imports are used to include external classes or objects in this code.
    In this case, we are importing the class 'PlayerController'.
*/
`import class PlayerController`

/** 
    The 'class' keyword is used to define a new class.
    In this case, we are defining a new class called 'MyGame'.
    Classes can inherit properties and functions from other classes.
    The 'extends' keyword indicates which class this class is inheriting from.
*/
class MyGame extends Game;

/**
    The 'event' keyword is used to define an event within a class.
    Events can be triggered by other parts of the code or by player actions.
    In this case, we are defining a 'StartGame' event that has no input parameters.
*/
event StartGame();

/**
    The 'var' keyword is used to define variables within a class.
    Variables can hold values or references to other objects.
    In this case, we are defining two variables: 'player' and 'score'.
    Both variables will be used later in the code.
*/
var PlayerController player;
var int score;

/** 
    The '::' operator is used to access functions or variables within a class.
    In this case, we are accessing the 'Pawn' variable within the 'player' object.
    The 'Pawn' variable holds a reference to the player's character in the game.
*/
`player.Pawn`

/**
    The '=' operator is used to assign a value to a variable.
    In this case, we are assigning the value of 'player.Pawn' to another variable called 'character'.
*/
character = player.Pawn;

/** 
    UnrealScript supports a wide variety of data types, including integers, floats, strings, and booleans.
    In this case, we are declaring a variable called 'health' and giving it an initial value of 100.
    The 'int' keyword indicates that this variable will hold an integer value.
*/
var int health = 100;

/**
    Functions in UnrealScript are defined using the 'function' keyword.
    Functions can have parameters and return values.
*/
`function CalculateScore(int numEnemiesKilled, int timeLeft)`

/**
    Function names can be any combination of letters, numbers, and underscores.
    The 'int' keyword before the function name indicates that this function will return an integer value.
    In this case, we are calculating the player's score based on the number of enemies killed and time remaining.
*/
int CalculateScore(int numEnemiesKilled, int timeLeft)
{
    /** 
        Local variables are declared within functions and can only be accessed within that function.
        In this case, we are declaring a variable called 'bonusPoints' and giving it an initial value of 0.
    */
    local int bonusPoints = 0;

    /**
        UnrealScript supports conditional statements, such as 'if' and 'else'.
        This allows us to execute certain code based on certain conditions.
        In this case, we are checking if the player has killed at least 10 enemies.
        If this condition is true, we add 50 bonus points to the total score.
    */
    if (numEnemiesKilled >= 10)
    {
        bonusPoints += 50;
    }

    /**
        The 'for' loop is another common control structure in programming.
        It allows us to execute a block of code multiple times.
        In this case, we are running a loop for every second left on the timer.
        Each second remaining gives the player 10 bonus points.
    */
    for (local int i = 0; i < timeLeft; i++)
    {
        bonusPoints += 10;
    }

    /**
        The 'return' keyword is used to specify the value that the function will return.
        In this case, we are returning the calculated score by adding the number of enemies killed, time remaining, and bonus points.
    */
    return numEnemiesKilled + timeLeft + bonusPoints;
}

/**
    The 'defaultproperties' keyword is used to specify the default properties of a class.
    These properties will be automatically assigned to instances of the class.
    In this case, we are setting the default value of the 'score' variable to 0.
*/
defaultproperties
{
    score = 0;
}