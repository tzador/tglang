/**
 * Name: EnemyCharacter
 * Description: Class for enemy characters in game.
 * Parent Class: Actor
 */
class EnemyCharacter extends Actor;

/**
 * Name: HealthComponent
 * Description: Component responsible for enemy health and damage.
 * Parent Class: Component
 */
class HealthComponent extends Component
	/* Properties */
    private int MaxHealth; // Max health limit for enemy
    public float CurrentHealth; // Current health of enemy
    public float DamageResistance; // Damage resistance of enemy
    public float DamageMultiplier; // Damage received multiplier

    // default values for properties
    defaultproperties
    {
        MaxHealth=100
        CurrentHealth=100
        DamageResistance=0.5
        DamageMultiplier=1.0
    }

    /** 
     * Name: TakeDamage
     * Description: Calculates damage taken by enemy
     * Parameters:
     *	1. Damage - amount of damage taken
     *	2. DamageType - type of damage received
     */
    function TakeDamage(int Damage, DamageType)
    {
        // calculate damage taken based on damage resistance and multiplier
        local float DamageTaken = Damage * (1-DamageResistance) * DamageMultiplier;
        // update current health
        CurrentHealth -= DamageTaken;
        // check if enemy is still alive
        if (CurrentHealth <= 0)
        {
            // call Death function
            Death();
        }
    }

    /**
     * Name: Death
     * Description: Handles enemy death
     */
    function Death()
    {
        // play death animation and sound
        PlayDeathAnimation();
        PlayDeathSound();
        // destroy actor after animation and sound finishes playing
        Destroy();
    }
}

/**
 * Name: EnemyAI
 * Description: AI Controller for enemy characters
 * Parent Class: AIController
 */
class EnemyAI extends AIController
{
    // reference to enemy character
    EnemyCharacter Enemy;
    
    /**
     * Function called when controller is possessed by a pawn.
     * @param aPawn Actor that is posing this controller.
     * @return bool Returns true if controller successfully possesed pawn
     */
    event bool Possess(APawn aPawn)
    {
        // call super class event
        local bool bSuccess;
        bSuccess = super.Possess(aPawn);
        // check if pawn is an enemy character
        local EnemyCharacter Pawn = EnemyCharacter(aPawn);
        if (Pawn != None)
        {
            // set reference to enemy character
            Enemy = Pawn;
            // register function to handle actor take damage event
            Enemy.OnTakeDamage.Add(self, TakeDamage);
        }
        return bSuccess;
    }

    /**
     * Name: TakeDamage
     * Description: Handles enemy taking damage and updates AI behavior
     * Parameters:
     *	1. Damage - amount of damage taken
     *	2. DamageType - type of damage received
     */
    function TakeDamage(int Damage, DamageType Actor)
    {
        // do something with the damage taken, such as updating enemy's aggression level
        // for now, we'll just print a message
        log("Enemy took damage of" $ Damage @ "points");
    }

    // other AI functions and behaviors for the enemy character goes here
}

/**
 * Name: EnemyController
 * Description: Controller for enemy characters, extended from Controller class
 * Parent Class: Controller
 */
class EnemyController extends Controller;
	// variables and functions specific to controlling enemy characters
}