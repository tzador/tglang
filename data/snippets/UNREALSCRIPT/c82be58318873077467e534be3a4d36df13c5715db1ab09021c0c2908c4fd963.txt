class PlayerController extends Controller; //defining class PlayerController that extends from Controller class

var() config bool bUseMouseAsStick; //declaring a public boolean variable with config attribute

exec function StartEvent() //defining an execution function called StartEvent
{
   local float EventStartTime; //declaring a local float variable  
   
   Log("Event started! Setting up initial variables."); //printing a log message
   
   EventStartTime = Level.TimeSeconds; //assigning the current level time to the EventStartTime variable
   
   //calling other functions within this StartEvent function
   SetupVariables();
   SetupHUD();
   SetupInput();
   StartRound();
}

//this function sets up the variables for the game
function SetupVariables()
{
   local int NumPlayers; //declaring a local integer variable
   
   NumPlayers = Level.NetPlayers.Count; //assigning the number of players in the game to the NumPlayers variable
   
   if (NumPlayers < 2) //checking if the number of players is less than 2
   {
      Log("Not enough players to start the game!");
      return; //exiting the function if there are not enough players
   }
   else
   {
      bUseMouseAsStick = true; //setting the bUseMouseAsStick variable to true
   }
}

//this function sets up the HUD for the game
function SetupHUD()
{
   local Hud CurrentHud; //declaring a local Hud variable
   
   CurrentHud = Hud(Level.PlayerHUD); //assigning the player's HUD to the CurrentHud variable
   
   CurrentHud.DisplayMessage("Get ready for the round!"); //displaying a message on the HUD
}

//this function sets up the input for the game
function SetupInput()
{
   local int PlayerIndex; //declaring a local integer variable
   
   //looping through all of the players in the game and setting their input to use the player's input
   foreach Level.NetPlayers(Player) 
   {
      PlayerIndex = int(Player.PlayerReplicationInfo.PlayerID);
      PlayerNum = Player.PlayerReplicationInfo.PlayerNum;
      
      //setting input mode to use the player's input and binding keys for movement
      SetInputMode(PlayerIndex, true, false, true);
      BindKey(PlayerIndex, "W", "", "MoveForward");
      BindKey(PlayerIndex, "A", "", "MoveLeft");
      BindKey(PlayerIndex, "S", "", "MoveBackward");
      BindKey(PlayerIndex, "D", "", "MoveRight");
   }
}

//this function starts the round for the game
function StartRound()
{
   Log("Round has started!");
   
   //checking if the mouse is being used as a stick, if so, print a message and enable mouse input
   if (bUseMouseAsStick)
   {
      Log("Mouse is being used as a stick!");
      EnableMouse(true);
   }
}

defaultproperties //defining the default properties for this class
{
   bUseMouseAsStick = false //setting the default value for bUseMouseAsStick to false
}