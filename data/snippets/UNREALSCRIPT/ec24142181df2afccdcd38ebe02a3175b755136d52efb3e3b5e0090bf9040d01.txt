class MyActor extends Actor //declaring a new class named MyActor that extends the built-in class Actor
    placeable; //making the class placeable in the levels

    var() bool bIsMoving; //declaring a variable with a boolean data type, using the var keyword indicates it is a class property and can be accessed in other parts of the class
    
    enum Direction //declaring an enum named Direction
    { 
        FORWARD, //adding enum values FORWARD, BACKWARD, LEFT, RIGHT
        BACKWARD,
        LEFT,
        RIGHT
    };
    
    replicate //setting up replication for the class
    event PostNetReceive() //declaring an event that will be called when the actor receives an update from the server
    {
        if (bIsMoving) //checking if the actor is currently moving
        {
            clientUpdate(); //calling the clientUpdate function to update the client's movement 
        }
    }
    
    function clientUpdate() //declaring the clientUpdate function
    {
        if (Role == ROLE_Authority) //checking if the actor is the server
        {
            if (bIsMoving) //checking if the actor is currently moving
            {
                switch (Direction) //using switch statement to check the current direction the actor is moving in
                {
                    case (Direction.FORWARD): //if the direction is FORWARD
                        SetActorLocation(ForwardVector); //setting the actor's location to the forward vector of the current location
                        break;
                    case (Direction.BACKWARD): //if the direction is BACKWARD
                        SetActorLocation(BackwardVector); //setting the actor's location to the backward vector of the current location
                        break;
                    case (Direction.LEFT): //if the direction is LEFT
                        SetActorLocation(LeftVector); //setting the actor's location to the left vector of the current location
                        break;
                    case (Direction.RIGHT): //if the direction is RIGHT
                        SetActorLocation(RightVector); //setting the actor's location to the right vector of the current location
                        break;
                    default: //if none of the above cases are met
                        break;
                }
            }
        }
    }
    
    simulated function Move(Direction NewDirection) //declaring a simulated function named Move that takes in a Direction as an argument
    {
        SetDirection(NewDirection); //setting the direction of the actor to the passed in NewDirection
        bIsMoving = true; //setting the bIsMoving variable to true to indicate the actor is currently moving
        if (Role == ROLE_Authority) //checking if the actor is the server
        {
            if (Pawn) //checking if the actor is a pawn
            {
                Pawn.FixedMovement = true; //setting the pawn's fixed movement to true, to prevent the client from controlling the movement
            }
        }
    }
    
    function SetDirection(Direction NewDirection) //declaring a function named SetDirection that takes in a Direction as an argument
    {
        Direction = NewDirection; //setting the current direction to the passed in NewDirection
    }
    
    defaultproperties //setting the default properties for the class
    {
        bBlockZeroExtent = true; //setting the block zero extent property to true, used for collision detection
    }