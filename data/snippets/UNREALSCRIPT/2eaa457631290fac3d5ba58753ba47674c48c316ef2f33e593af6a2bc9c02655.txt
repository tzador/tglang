class MyActor extends Actor // Creating a class called MyActor that extends Actor class
    placeable; // Allowing this class to be placed in the game world
    
    var int MyInt; // Declaring a variable of type integer called MyInt
    var int MyInt2; // Declaring another variable of type integer called MyInt2
    
    function SetMyInt(int NewValue) // Creating a function called SetMyInt that takes in an integer value
    {
        MyInt = NewValue; // Assigning the input value to MyInt variable
        log("MyInt has been set to:" $ MyInt); // Printing out the value of MyInt to the log
    }
    
    event TakeDamage(int DamageAmount, Controller EventInstigator, Actor DamageCauser) // Creating an event that triggers when the actor takes damage
    {
        super.TakeDamage(DamageAmount, EventInstigator, DamageCauser); // Calling the parent function to handle the damage
        
        if (DamageAmount > 10) // Checking if the damage amount is greater than 10
        {
            GotoState('Damaged'); // If it is, go to the 'Damaged' state
        }
    }
    
    state Damaged // Creating a state called 'Damaged'
    {
        ///////////////////////////////
        
        /// There can be multiple actions and events within a state ///
        
        ///////////////////////////////
        
        function BeginState() // Creating a function called BeginState which triggers when the actor enters this state
        {
            log("Actor has been damaged!"); // Printing out a log message
        }
        
        function EndState() // Creating a function called EndState which triggers when the actor exits this state
        {
            log("Actor has recovered from damage!"); // Printing out a log message
        }
        
        event Tick(float DeltaTime) // Creating an event that triggers every frame while in this state
        {
            MyInt2 = MyInt * 2; // Multiplying the value of MyInt by 2 and assigning it to MyInt2
            
            log("MyInt2 is now:" $ MyInt2); // Printing out the value of MyInt2 to the log
        }
    }
    
    defaultproperties // Setting default properties for the class
    {
        Begin Object Class=StaticMeshComponent Name=MyMesh // Creating a static mesh component and naming it MyMesh
            StaticMesh=StaticMesh'Package.Path.To.My.Mesh' // Assigning a static mesh to the component
        End Object
        Components.Add(MyMesh); // Adding the component to the actor's components list
    }