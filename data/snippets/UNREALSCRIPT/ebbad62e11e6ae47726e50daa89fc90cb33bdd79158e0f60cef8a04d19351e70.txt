// This code snippet is a custom implementation of a dynamic dictionary data structure in 'UNREALSCRIPT'.
class UDictionary<K, V> extends UObject // Defining a class called UDictionary which inherits from the UObject class.
	// K represents the key type and V represents the value type.
	
	struct DictionaryPair<K, V> // Creating a struct to store key-value pairs. 
		K key;
		V value;
	}
	
	var array<DictionaryPair<K, V>> DictionaryArray; // Initializing an array of DictionaryPairs to store the data.
	
	function Add(K key, V value) { // Adding a new key-value pair to the dictionary.
		local DictionaryPair<K, V> NewPair; // Creating a local DictionaryPair to store the new data.
		NewPair.key = key; // Assigning the key.
		NewPair.value = value; // Assigning the value.
		DictionaryArray.AddItem(NewPair); // Adding the new pair to the array.
	}
	
	function Get(K key) { // Retrieving the value associated with a given key.
		local V value; // Creating a local variable to store the value.
		foreach (DictionaryPair<K, V> Pair in DictionaryArray) { // Looping through each pair in the array.
			if (Pair.key == key) { // Checking if the current pair's key matches the given key.
				value = Pair.value; // Assigning the pair's value to the local variable.
				break; // Exiting the loop.
			}
		}
		return value; // Returning the value associated with the key, or null if no match was found.
	}
	
	function Remove(K key) { // Removing a key-value pair from the dictionary.
		local int IndexToRemove; // Creating a local variable to store the index of the pair to remove.
		for (IndexToRemove = 0; IndexToRemove < DictionaryArray.Length; IndexToRemove++) { // Looping through the array.
			if (DictionaryArray[IndexToRemove].key == key) { // Checking if the current pair's key matches the given key.
				DictionaryArray.RemoveAt(IndexToRemove); // Removing the pair from the array at the given index.
				break; // Exiting the loop.
			}
		}
	}
	
	function Clear() { // Clearing the dictionary.
		DictionaryArray.Empty(); // Emptying the array.
	}
	
	function Contains(K key) { // Checking if a key exists in the dictionary.
		foreach (DictionaryPair<K, V> Pair in DictionaryArray) { // Looping through each pair in the array.
			if (Pair.key == key) { // Checking if the current pair's key matches the given key.
				return true; // Key exists, returning true.
			}
		}
		return false; // Key does not exist, returning false.
	}
	
	function Size() { // Returning the size of the dictionary.
		return DictionaryArray.Length; // Returning the length of the array.
	}