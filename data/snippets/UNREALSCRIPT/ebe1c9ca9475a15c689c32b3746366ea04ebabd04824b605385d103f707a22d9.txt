class SomeClass extends Object
    //This is a custom class that extends the base Object class
    //It will contain various properties and functions for specific use cases

    //Properties
    var int MyIntProperty; //A variable of type int to hold integer values
    var bool MyBoolProperty; //A variable of type bool to hold boolean values
    var Vector MyVectorProperty; //A variable of type Vector to hold vector values
    var Actor MyActorProperty; //A variable of type Actor to hold references to other actors

    //Functions
    //A function to initialize the object and set default values for properties
    function InitObject()
    {
        //Set default values for properties
        MyIntProperty = 10;
        MyBoolProperty = true; 
        MyVectorProperty = Vector(0, 0, 0); 
        MyActorProperty = None; 
    }

    //A function to perform a complex operation using the properties of the object
    function ComplexOperation()
    {
        //Check if MyActorProperty is valid and do something with it
        if (MyActorProperty != None)
        {
            //Get the current location of MyActorProperty
            local Vector ActorLocation;
            ActorLocation = MyActorProperty.Location;

            //Add MyIntProperty to the x-coordinate of ActorLocation and store it in a new variable
            local float NewX;
            NewX = ActorLocation.X + MyIntProperty;

            //Update MyVectorProperty with the new values
            MyVectorProperty = Vector(NewX, ActorLocation.Y, ActorLocation.Z);

            //Check if MyBoolProperty is true and perform another operation
            if (MyBoolProperty)
            {
                //Multiply MyVectorProperty by 2 and store the result in a new variable
                local Vector MultipliedVector;
                MultipliedVector = MyVectorProperty * 2;

                //Print the final result to the screen using DebugMessage function
                DebugMessage("The final result is: " $ MultipliedVector);
            }
        }
    }

    //Function to be called on tick (every frame)
    function Tick(float DeltaTime)
    {
        //Call ComplexOperation function
        ComplexOperation();

        //Print the current values of properties to the screen using DebugMessage function
        //This will be called every frame and show the updated values of properties
        DebugMessage("MyIntProperty: " $ MyIntProperty);
        DebugMessage("MyBoolProperty: " $ MyBoolProperty);
        DebugMessage("MyVectorProperty: " $ MyVectorProperty);
        DebugMessage("MyActorProperty: " $ MyActorProperty);
    }
    
defaultProperties
{
    //Set the class as a Default and not Camera-visible
    bStatic = true;
    bNoDelete = true;
    bPlaceable = false;
    bCamDistanceMultiplier = false;
}