/*
This code snippet creates a custom weapon class named MyCustomWeapon that extends from the Weapon class.
It has various properties and functions that make it a complex and versatile weapon.
*/

class MyCustomWeapon extends Weapon
    placeable;
    within MyCustomWeapon;

//properties
var() int TargetID; //ID of current target
var() float AimRange; //range at which the weapon can aim
var() float FireRate; //rate at which the weapon can fire
var() bool IsAutomatic; //determines if the weapon is automatic or requires manual firing
var() float Damage; //damage inflicted by the weapon
var() float ReloadTime; //time it takes to reload the weapon
var() float Recoil; //amount of recoil the weapon has
var() float Accuracy; //accuracy of the weapon
var() float AmmoCapacity; //maximum ammo capacity of the weapon
var() float CurrentAmmo; //current amount of ammo in the weapon

//functions

//function to handle aiming at a specific target
function Aim(Target)
{
    if(Target && DistanceFrom(Self.Location, Target.Location) < AimRange)
        TargetID = Target.ID;
}

//function to handle firing the weapon
function Fire()
{
    if(IsAutomatic)
    {
        if(CurrentAmmo > 0)
            SpawnProjectile();
    
        //create timer to continuously fire at the designated rate
        SetTimer(FireRate);
    }
    else
    {
        if(CurrentAmmo > 0)
            SpawnProjectile();
        else
            Reload();
    }
}

//function to handle reloading the weapon
function Reload()
{
    if(CurrentAmmo < AmmoCapacity)
    {
        //create timer to delay reloading
        SetTimer(ReloadTime);
        CurrentAmmo = AmmoCapacity;
    }
}

//function to handle spawning projectiles
function SpawnProjectile()
{
    local Projectile ProjectileClass;
    ProjectileClass = Spawn(class'Projectile',none, Location);
    
    //apply damage and force to target based on weapon properties
    if(ProjectileClass && TargetID)
    {
        ProjectileClass.FireToActor(TargetID, Damage, Vector(Z, 0, 0) * Recoil);
        ProjectileClass.Accuracize(Accuracy);
    }
}

//function to handle taking damage
function TakeDamage(float DamageAmount, Controller EventInstigator, optional Vector HitLocation, optional Vector Momentum, optional class<DamageType> DamageType)
{
    //reduce current ammo based on damage taken
    CurrentAmmo -= DamageAmount;
}

//function to determine if weapon has ammo
function bool HasAmmo()
{
    if(CurrentAmmo <= 0)
        return false;
    
    return true;
}