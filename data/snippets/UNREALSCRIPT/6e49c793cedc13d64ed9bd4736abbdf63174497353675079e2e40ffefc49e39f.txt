// This is a complex code snippet in UNREALSCRIPT
class Projectile extends Actor
                                //Creating a new class called Projectile that extends the Actor class
        native;                 //Declaring this class as a native class, meaning it will be executed on the engine level and not in script
state Exploded
    event TakeDamage
                    (int Damage, Pawn EventInstigator,
                    vector HitLocation, vector Momentum,
                    class<DamageType> DamageType)
        super.TakeDamage(Damage, EventInstigator,
                        HitLocation, Momentum, DamageType);
                                                //Defining a state called 'Exploded' and an event 'TakeDamage' with certain parameters
        if(Health <= 0)
            Destroy();                      //If the health of the projectile is equal to or less than 0, call the Destroy function
endspace
event Touch(Actor Other, PrimitiveComponent OtherComp,
            vector HitLocation, vector HitNormal)
{
    local Pawn P;
    local Controller C;
                //Declaring local variables of type Pawn and Controller
    P = Other;
    if (P != None)     //If the Other actor is not None
        if (P.Controller != None)   //If the pawn has a controller
            C = Controller(P.Controller);  //Cast the controller to type Controller
    if(C != None)       //If there is a controller
        C.ChangeState('Exploded');      //Change the state of the controller to 'Exploded'
    super.Touch(Other, OtherComp, HitLocation, HitNormal);
                                    //Call the Touch function of the Actor class
}
function StartProjectile() {
    SetTimer(5.0, true);        //Create a timer that will call the OnTimer function after 5 seconds
    SetBaseSize(5.0, 5.0);      //Set the size of the projectile
    ?SetTimer(1.0, false);      //If the timer is still valid, call the OnTimer function every 1 second
}
function OnTimer() {
    DetachFlag(FALSE);          //Detaches any flag or powerup from the projectile
    ?SetTimer(0.2, false);      //If the timer is still valid, call the OnTimer function every 0.2 seconds
}
defaultproperties
{
    Begin Object Class=DynamicLightEnvironmentComponent Name=LightEnvironment0
        bEnabled=TRUE
        bCastShadows=TRUE
        MinShadowResolution=16.000000
        MinVisibility=0.100000
        BlendOutTime=0.200000
    End Object
    Components.Add(LightEnvironment0)
        //Creating a dynamic light environment that casts shadows and has certain properties
    LightEnvironment = LightEnvironment0
        //Assigning this light environment to the projectile
    LightEnvironment.RecalculateBrightness();      //Recalculating the brightness of the light environment
    Begin Object Class=DynamicLightEnvironmentComponent Name=DynamicLightEnvironment0
        bEnabled=TRUE
        bCastShadows=TRUE
        MinShadowResolution=16.000000
        MinVisibility=0.100000
        BlendOutTime=0.200000
    End Object
    Components.Add(DynamicLightEnvironment0)
        //Creating another dynamic light environment with the same properties and adding it to the components array
}