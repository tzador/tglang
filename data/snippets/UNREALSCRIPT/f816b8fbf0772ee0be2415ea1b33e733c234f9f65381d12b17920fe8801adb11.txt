/** 
 * This is a comment that will be ignored by the compiler 
 */

class MyClass extends AnotherClass; /** Defining a new class that inherits from another class */

var(MyVar) int myInteger; /** A variable declaration with a variable tag */

var() const float myConst; /** A constant variable declaration */

var string myStringArray<[10]>; /** An array declaration with a fixed size */

config defaultproperties { /** Defining default properties for the class */
    myInteger = 5; /** Assigning a value to the variable */
    myConst = 3.14; /** Assigning a value to the constant variable */
    myStringArray[0] = "Hello"; /** Assigning a value to the first element in the array */

    function MyFunction(string myStringParameter, optional int myOptionalParameter) 
    /** Defining a function with a string parameter and an optional integer parameter */
    {
        local int myLocalVariable; /** Declaring a local variable */

        if (myOptionalParameter != none) /** Checking if the optional parameter was passed */
        {
            myLocalVariable = myInteger + myOptionalParameter; /** Performing a calculation with the passed parameter */
        }
        else
        {
            myLocalVariable = myInteger; /** If no parameter was passed, use the default value */
        }

        myStringParameter$ = myStringParameter $ string(myLocalVariable); 
        /** Concatenating the string parameter and the local variable as a string */

        log(myStringParameter$); /** Logging the final string to the console */
    }
}