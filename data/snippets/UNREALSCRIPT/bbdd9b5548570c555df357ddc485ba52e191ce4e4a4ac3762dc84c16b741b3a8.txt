class MyActor extends Actor;
var() const int health;
var() rotator rotation;
var array<int> numbers;
var float time;
var bool isDead;
 
function Start()
{
    `This function initializes the actor`
    super.Start();
    `Randomly assigns a health value between 50 and 100`
    health = 50 + Rand(51);
    `Sets the initial rotation to the actor's current rotation`
    self.rotation = self.Rotation;
    `Adds 5 numbers to the array, starting with 0`
    for (local int i = 0; i < 5; i++)
    {
        numbers.AddItem(i);
    }
    `Sets the actor's initial time value to 0`
    time = 0.f;
}
 
function Tick(float DeltaTime)
{
    `This function is called every frame`
    super.Tick(DeltaTime);
    `Increments the time value by DeltaTime`
    time += DeltaTime;
    `If the actor's health is less than or equal to 0 and isDead is false, set isDead to true`
    if (health <= 0 && !isDead)
    {
        isDead = true;
        `Prints a message indicating the actor is dead`
        `WorldInfo.Game.Broadcast(self @ " has died!");
    }
}
 
`This function is called when the actor takes damage`
function TakeDamage(int damageAmount)
{
    `Subtracts the damage amount from the actor's health`
    health -= damageAmount;
    `Prints a message indicating the actor has taken damage`
    `WorldInfo.Game.Broadcast(self @ " has taken " @ damageAmount @ " damage!");
}