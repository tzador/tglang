class GameWeapon extends Weapon;

/// This class represents a weapon in the game.
/// It inherits from the Weapon class.

var () bool bCanBeHolstered;

/// This variable indicates whether the weapon can be holstered by the player.

function Fire()
{
    /// This function performs the actual firing of the weapon.

    local Vector FireDir;

    /// This local variable stores the direction in which the weapon is fired.

    FireDir = Instigator.Rotation * vect(100, 0, 0);

    /// The fire direction is set based on the rotation of the player character and a constant value.

    if (Trace(FireDir, FireHitLocation) == Instant)
    {
        /// If the trace is instant, meaning it hits something immediately, apply damage to the object it hits.

        ApplyCustomDamage(10, DefenseType, FireHitLocation)
    }

    /// Otherwise, the weapon just makes a shooting sound without causing any damage.
}

function Tick(float DeltaTime)
{
    /// This function is called every frame to update the state of the weapon.

    if (bCanBeHolstered && Instigator != None)
    {
        /// If the weapon can be holstered and the player character is not None, check if the weapon should be holstered.

        if (Instigator.Health < 50 && !Instigator.bIsFiring)
        {
            /// If the player's health is below 50 and they are not firing, holster the weapon.

            PerformHolster();
        }
    }
}

function PerformHolster()
{
    /// This function performs the actual holstering of the weapon.

    bCanBeHolstered = false;

    /// Set the bCanBeHolstered variable to false to prevent the weapon from being holstered again.

    Instigator.PlayerController.bShowWeaponSelectionMenu = true;

    /// Set the bShowWeaponSelectionMenu variable in the player controller to true to display the weapon selection menu.

    if (WeaponSlot != None)
    {
        /// If the weapon has a WeaponSlot, deselect it.

        Instigator.WeaponSelect(WeaponSlot, false);
    }

    FinishHolster();
}

function FinishHolster()
{
    /// This function is called when the weapon has finished holstering.

    Instigator.PlayerController.bShowWeaponSelectionMenu = false;

    /// Set the bShowWeaponSelectionMenu variable in the player controller to false to hide the weapon selection menu.

    Destroy();
}