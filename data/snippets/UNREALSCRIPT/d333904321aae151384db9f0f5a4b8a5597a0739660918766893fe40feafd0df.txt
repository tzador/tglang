/** 
* This class represents a weapon used by player characters in a video game.
* It contains variables for the weapon's name, damage, fire rate, and ammunition count.
*/

class Weapon extends Actor;

var() const name WeaponName; // name of the weapon
var(int) const damage; // amount of damage the weapon inflicts
var(float) const fireRate; // rate at which the weapon can fire
var(int) const ammoCount; // current amount of ammo for the weapon

var() bool isReloading; // indicates if the weapon is currently being reloaded
var(float) reloadTime; // time it takes to reload the weapon
var(float) currentReloadTime; // current reload time left, used for animation calculations

var() Actor owner; // actor that owns the weapon

function FireWeapon() {
    // logic for firing the weapon
}

function Reload() {
    // logic for reloading the weapon, updating ammo count and setting isReloading to true
}

/** 
* This event is called when the weapon is equipped by a character.
* It updates the owner variable and initiates the HUD for the weapon.
*
* @param EquippedByActor the character that equipped this weapon
*/
event Equip(Actor EquippedByActor) {
    owner = EquippedByActor; // update owner variable
    // initiate HUD for the weapon
}

/** 
* This event is called when the weapon is unequipped by a character.
* It resets the owner variable and removes the HUD for the weapon.
*/
event UnEquip() {
    owner = None; // reset owner variable
    // remove HUD for the weapon
}

/** 
* This function calculates and returns the amount of time it takes to fire one shot.
*
* @return the time it takes to fire one shot based on the weapon's fire rate
*/
function GetTimePerShot() {
    local float TimePerShot; // variable to store the calculated time per shot
    TimePerShot = 1/fireRate; // calculate time per shot using the weapon's fire rate
    return TimePerShot;
}

/** 
* This function updates the current reload time left based on the elapsed time since it was last called.
*
* @param DeltaTime the amount of time that has passed since this function was last called
*/
function Tick(float DeltaTime) {
    if (isReloading) { // check if the weapon is currently being reloaded
        currentReloadTime += DeltaTime; // increase the current reload time by the amount of time that has passed
        if (currentReloadTime >= reloadTime) { // check if reloading is complete
            ammoCount = maxAmmoCount; // update the ammo count to maximum capacity
            isReloading = false; // set isReloading to false
        }
    }
}