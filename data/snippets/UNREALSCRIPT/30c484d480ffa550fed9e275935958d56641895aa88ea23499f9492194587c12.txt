class Matrix extends Object
    // This class represents a 4x4 matrix

    // Properties
    var float M[4][4]; // The matrix elements in row-major order

    // Constructors
    function Matrix(Matrix Other)
    {
        // Copy constructor
        local int i, j
        for (i = 0; i < 4; i++)
        {
            for (j = 0; j < 4; j++)
            {
                M[i][j] = Other.M[i][j];
            }
        }
    }

    function Matrix(float M00, float M01, float M02, float M03, float M10, float M11, float M12, float M13, float M20, float M21, float M22, float M23, float M30, float M31, float M32, float M33)
    {
        // Component-wise constructor
        M[0][0] = M00; M[0][1] = M01; M[0][2] = M02; M[0][3] = M03;
        M[1][0] = M10; M[1][1] = M11; M[1][2] = M12; M[1][3] = M13;
        M[2][0] = M20; M[2][1] = M21; M[2][2] = M22; M[2][3] = M23;
        M[3][0] = M30; M[3][1] = M31; M[3][2] = M32; M[3][3] = M33;
    }

    // Methods
    function Transpose()
    {
        // Transpose the matrix in-place
        local int i, j
        local float temp

        for (i = 0; i < 4; i++)
        {
            for (j = i+1; j < 4; j++)
            {
                temp = M[i][j];
                M[i][j] = M[j][i];
                M[j][i] = temp;
            }
        }
    }

    function Matrix operator *(Matrix A, Matrix B)
    {
        // Matrix multiplication operator
        local int i, j, k
        local Matrix AB

        for (i = 0; i < 4; i++)
        {
            for (j = 0; j < 4; j++)
            {
                AB.M[i][j] = 0;
                for (k = 0; k < 4; k++)
                {
                    AB.M[i][j] += A.M[i][k] * B.M[k][j];
                }
            }
        }

        return AB;
    }