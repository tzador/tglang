class PointLight extends Object
    placeable;

var float Radius;
var Object.TForm Component;

// Tick function to update light
event Tick(float DeltaTime)
{
    // Check if actor is visible
    if (IsVisible())
    {
        // Get world and actor rotation
        local Vector ActorRotation;
        local Vector WorldRotation;
        ActorRotation = GetRotation();
        WorldRotation = Component.GetRotation();

        // Calculate rotation difference
        local Vector RotationDifference;
        RotationDifference.X = ActorRotation.X - WorldRotation.X;
        RotationDifference.Y = ActorRotation.Y - WorldRotation.Y;
        RotationDifference.Z = ActorRotation.Z - WorldRotation.Z;

        // Check if rotation difference is within acceptable range
        if (Abs(RotationDifference.X) < 5 && Abs(RotationDifference.Y) < 5 && Abs(RotationDifference.Z) < 5)
        {
            // Update rendering of light
            UpdateLight();
        }
    }
}

// Update function to change light parameters
function UpdateLight()
{
    // Get current brightness of light
    local float CurrentBrightness;
    CurrentBrightness = Component.LightBrightness;

    // Calculate new brightness based on distance from player
    local float NewBrightness;
    NewBrightness = (Radius - VSize(GetLocation() - Component.GetLocation())) / Radius;

    // Apply new brightness to light
    Component.LightBrightness = NewBrightness;
}

// Event function to handle player entering light radius
event BeganOverlap(Actor OtherActor)
{
    // Check if player actor
    if (OtherActor.IsA(PlayerPawn))
    {
        // Set light color to red
        Component.SetLightColor(255, 0, 0);

        // Update light rendering
        UpdateLight();
    }
}

// Event function to handle player leaving light radius
event EndOverlap(Actor OtherActor)
{
    // Check if player actor
    if (OtherActor.IsA(PlayerPawn))
    {
        // Set light color to white
        Component.SetLightColor(255, 255, 255);

        // Update light rendering
        UpdateLight();
    }
}