/** 
 * This is a custom class for a weapon in the game.
 */

class MyCustomWeapon extends Weapon;

var bool bIsFiring; // boolean variable for storing if the weapon is currently firing

var float DamageMultiplier; // floating point variable for adjusting the damage dealt by the weapon

// Event when the weapon is equipped by the player
event OnEquip()
{
    // Call the parent OnEquip event
    Super.OnEquip();
    
    // Set the default damage multiplier
    DamageMultiplier = 1.0;
    
    // Set the default firing state to false
    bIsFiring = false;
}

// Event when the weapon is fired by the player
event Fire()
{
    // Check if the player is currently firing the weapon
    if(bIsFiring)
    {
        // Calculate the final damage based on the damage multiplier
        local int finalDamage = BaseDamage * DamageMultiplier;
        
        // Spawn a projectile with the calculated damage
        ProjectileManager.SpawnProjectile(finalDamage);
    }
}

// Method for setting the firing state of the weapon (true for firing, false for not firing)
function SetFiring(bool NewState)
{
    bIsFiring = NewState;
}

// Method for changing the damage multiplier of the weapon
function SetDamageMultiplier(float NewMultiplier)
{
    DamageMultiplier = NewMultiplier;
}

/** 
 * This is a custom class for a projectile in the game.
 */

class MyCustomProjectile extends Projectile;

var int Damage; // integer variable for storing the damage dealt by the projectile

// Method for setting the initial damage of the projectile
function SetDamage(int NewDamage)
{
    Damage = NewDamage;
}

// Event when the projectile hits an object
event HitObject(Actor Other, Vector HitLocation)
{
    // Check if the object is a player character
    if(Other.IsA(PlayerCharacter))
    {
        // Call the TakeDamage method on the player character actor with the projectile's damage as parameter
        Other.TakeDamage(Damage);
    }
}