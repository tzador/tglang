/* This is a code snippet that creates a class called "MyCharacter" which is a subclass of the "Pawn" class */

` class MyCharacter extends Pawn; `

// This section defines the variables and their types in the class
var() int Health; // Integer variable to store health value
var() string Name; // String variable to store character name
var() float Speed; // Float variable to store movement speed

// This section defines the functions that can be called in the MyCharacter class
function SetHealth(int NewHealth)
{
    Health = NewHealth;
}

function GetName() : string
{
    return Name;
}

function IncreaseSpeed(float Amount)
{
    Speed = Speed + Amount;
}

// This is the default constructor for the MyCharacter class
function MyCharacter()
{
    Super(); // Calls the parent class constructor
    SetHealth(100); // Sets the starting health to 100
    Name = "Player1"; // Sets the default name to be "Player1"
    Speed = 500.0; // Sets the default movement speed to be 500.0
}

// This function is called when the character takes damage
function TakeDamage(int DamageAmount)
{
    SetHealth(Health - DamageAmount); // Decreases the health by the damage amount
    if (Health <= 0) // Checks if health is less than or equal to 0
    {
        Super.Killed(); // Calls the parent class Killed function
        ` ` `log "Character has been killed"` ` ` // Logs a message to the console
    }
}

// This function is called when the character begins play in the game
function BeginPlay()
{
    Super.BeginPlay(); // Calls the parent class BeginPlay function
    ` ` `log "Character has entered the game"` ` ` // Logs a message to the console
    // Other code can be added here to initialize the character's starting position and other variables
}

// This section overrides the "Use" function from the "Pawn" class to activate the character's special ability
function Use()    
{    
    if (Speed > 500.0) // Checks if the character's speed is greater than the default value
    {
        ` ` `log "Character has activated their special ability"` ` ` // Logs a message to the console      
    }
    Super.Use(); // Calls the parent class Use function 
}

// This section adds optional functionality to the "OnTimer" event from the "Pawn" class
event OnTimer()
{
    Super.OnTimer(); // Calls the parent class OnTimer event
    // Additional code can be added here to perform actions every time the timer ticks for this character
}