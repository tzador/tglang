/**
* This is a class that represents a player character in a game.
* It has properties and functions for movement, health, and abilities.
*/
class PlayerCharacter extends Actor
  // Properties
  placeable;

  var float Health;

  var SkeletalMeshComponent Mesh;

  var Vector ForwardDirection;

  var float MovementSpeed;

  // Functions
  /**
  * This function handles player movement.
  * @param Direction The direction the player wants to move in.
  */
  function Move(Vector Direction)
  {
    ForwardDirection = normalize(Direction); // Normalizes the direction vector
    SetPhysics(Direction); // Sets the physics based on the direction
    UpdateMovementSpeed(); // Updates the player's movement speed
  }

  /**
  * This function updates the player's movement speed based on their health.
  */
  function UpdateMovementSpeed()
  {
    // If health is above 50%, movement speed is normal
    if (Health > 50)
    {
      MovementSpeed = 500;
    }
    // If health is between 25% and 50%, movement speed is reduced
    else if (Health > 25 && Health <= 50)
    {
      MovementSpeed = 250;
    }
    // If health is below 25%, movement speed is greatly reduced
    else
    {
      MovementSpeed = 100;
    }
  }

  /**
  * This function handles the player taking damage.
  * @param Damage The amount of damage the player is taking.
  * @return float The remaining health of the player after taking damage.
  */
  function TakeDamage(float Damage)
  {
    Health -= Damage; // Subtracts damage from health
    return Health; // Returns remaining health
  }

  /**
  * This function handles the player using an ability.
  * @param AbilityName The name of the ability being used.
  */
  function UseAbility(string AbilityName)
  {
    switch(AbilityName)
    {
      case "Jump":
        Jump(); // Calls the Jump function
        break;
      case "Shield":
        ApplyShield(); // Calls the ApplyShield function
        break;
      case "Fireball":
        LaunchFireball(); // Calls the LaunchFireball function
        break;
      default:
        log("Invalid ability!"); // Prints a log message if unknown ability is used
    }
  }
endscript