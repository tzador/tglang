/**
* This is a complex code snippet in the UnrealScript programming language.
* It creates a custom weapon class with multiple functions and variables.
*/
class MyCustomWeapon extends Weapon;

var int AmmoReserved;
var int AmmoInClip;

// Here, we declare the default properties for our weapon
defaultproperties
{
    Mesh = StaticMesh'WeaponMesh'
    AmmoClass = class'AmmoType'
    FireSound = Sound'WeaponFireSound'
    FireAnim = AnimTree'WeaponFireAnim'
    AmmoCost = 2
    MaxAmmo = 100
    AmmoPerClip = 10
    Damage = 50
    FireRate = 0.1
    Recoil = 0

    // Function that is called when the weapon is first equipped
    simulated function BeginFire(byte FireModeNum)
    {
        // If the weapon has enough ammo to fire
        if(AmmoInClip >= AmmoCost)
        {
            // Play the fire sound
            PlaySound(FireSound);

            // Subtract the ammo cost from the clip
            AmmoInClip -= AmmoCost;

            // Spawn the projectile
            SpawnProjectile();

            // Set the recoil
            AddCameraNoise(Recoil);

            // Start the recoil recovery timer
            SetTimer(FireRate, false);
        }
    }

    // Function called every tick while the weapon is firing
    simulated function Tick(float DeltaTime)
    {
        // If the recoil timer is still active
        if(IsTimerActive)
        {
            // Calculate the new recoil value
            Recoil = InterpTo(Recoil, 0, DeltaTime, 3);

            // If the recoil has reached zero, stop the timer
            if(Recoil <= 0)
            {
                StopTimer();
            }
        }
    }

    // Function that spawns the projectile
    simulated function SpawnProjectile()
    {
        // Calculate the spawn location and rotation
        local Vector StartLoc;
        local Rotator FireRotation;
        CalcStartLocationAndRotation(StartLoc, FireRotation);

        // Spawn the projectile at the calculated location and rotation
        local Projectile NewProjectile;
        NewProjectile = Spawn(class'AmmoClass',,, StartLoc, FireRotation);

        // Set the owner of the projectile to the player
        NewProjectile.SetOwner(PlayerOwner);

        // Set the damage value of the projectile
        NewProjectile.SetDamage(Damage);
    }

    // Function that calculates the spawn location and rotation for the projectile
    function CalcStartLocationAndRotation(out Vector out_StartLoc, out Rotator out_FireRotation)
    {
        // Get the player's view rotation
        local Rotator ViewRotation;
        PlayerOwner.GetPlayerViewPoint(out_StartLoc, ViewRotation);

        // Set the fire rotation to the player's view rotation
        out_FireRotation = ViewRotation;
    }
}