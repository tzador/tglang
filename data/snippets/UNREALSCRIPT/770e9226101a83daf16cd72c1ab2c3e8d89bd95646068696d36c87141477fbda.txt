class DynamicPlayerController extends PlayerController
# This class represents a player controller that can move dynamically
# Inherits from the base PlayerController class

#---------------------------------------------
# Variables
#---------------------------------------------
# Movement variables
var float WalkSpeed;
var float RunSpeed;
var float JumpHeight;

# Input variables
var bool bIsRunning;
var bool bIsJumping;
var float MoveForwardAxis;
var float MoveRightAxis;

# Physics variables
var Vector Velocity;
var Vector Acceleration;

#---------------------------------------------
# Functions
#---------------------------------------------

# Handles player input for movement speed and direction
simulated function HandleMovementInput (float MoveForward, float MoveRight)
{
    # Update movement axes
    MoveForwardAxis = MoveForward;
    MoveRightAxis = MoveRight;

    # Update movement speed based on input
    if (bIsRunning)
        WalkSpeed = RunSpeed;
    else
        WalkSpeed = Default.WalkSpeed;

    # Update player movement
    Move(MoveForward, MoveRight);
}

# Handles player input for jumping
simulated function HandleJumpInput()
{
    # Check if player is already jumping
    if (!bIsJumping)
    {
        # Set jumping status and update velocity
        bIsJumping = true;
        Velocity.Z = JumpHeight;
    }
}

# Simulates player movement
simulated function SimulateMovement(float DeltaTime)
{
    # Calculate acceleration based on movement input
    Acceleration.X = WalkSpeed * MoveForwardAxis;
    Acceleration.Y = WalkSpeed * MoveRightAxis;
    Acceleration.Z = Default.Gravity * DeltaTime;

    # Update velocity and move player
    Velocity += Acceleration * DeltaTime;
    Move(Velocity * DeltaTime);
}

# Handles player's logic and movement
event Tick(float DeltaTime)
{
    # Call parent's Tick event
    Super.Tick(DeltaTime);

    # Handle player's movement input
    HandleMovementInput(MoveForwardAxis, MoveRightAxis);

    # Simulate player's movement
    SimulateMovement(DeltaTime);
}

# Handles player's landing after jumping
event Landed(Vector HitNormal)
{
    # Reset jumping status and update velocity
    bIsJumping = false;
    Velocity.Z = 0;

    # Call parent's Landed event
    Super.Landed(HitNormal);
}