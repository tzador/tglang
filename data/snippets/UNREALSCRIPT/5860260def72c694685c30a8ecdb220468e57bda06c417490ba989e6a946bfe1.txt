// Declares the parent class of the vehicle
class UTV extends Vehicle;

/*
* Function to calculate the velocity of the vehicle
* @param Force - the force applied to the vehicle
* @param Mass - the mass of the vehicle
* @return Velocity - the calculated velocity of the vehicle
*/
function float CalculateVelocity(float Force, float Mass)
{
    return Force / Mass;
}

/*
* Function to update the rotation of the vehicle based on its velocity
* @param DeltaTime - the time interval for updating the rotation
*/
function UpdateRotation(float DeltaTime)
{
    // Calculate the angular velocity based on current velocity and rotation rate
    local float AngularVelocity;
    AngularVelocity = self.Velocity * self.RotationRate;
    
    // Rotate the vehicle based on the angular velocity
    self.Rotation += AngularVelocity * DeltaTime;
}

/*
* Function to check for collisions with other vehicles
* @param OtherVehicle - the other vehicle in the world
* @return true if there is a collision, false if there is not
*/
function bool CheckCollision(Vehicle OtherVehicle)
{
    // Get the position of both vehicles
    local Vector SelfPosition;
    local Vector OtherPosition;
    SelfPosition = self.Location;
    OtherPosition = OtherVehicle.Location;
    
    // Compare the positions to see if there is a collision
    if (abs(SelfPosition.X - OtherPosition.X) < CollisonDistance &&
      abs(SelfPosition.Y - OtherPosition.Y) < CollisonDistance &&
      abs(SelfPosition.Z - OtherPosition.Z) < CollisonDistance)
    {
        // Collision detected
        return true;
    }
    else
    {
        // No collision
        return false;
    }
}

// Replicated variables for networked gameplay
var() replicated float RotationRate;
var() replicated float Velocity;
var() replicated vector Location;

// Sets default values for the vehicle
defaultproperties
{
    CollisionDistance = 100; // Set the distance for collision detection
    RotationRate = 2.5; // Set the rotation rate for the vehicle
    Velocity = 0; // Start with 0 velocity
    Location = vect(0,0,0); // Start at the origin
}

// End of code snippet