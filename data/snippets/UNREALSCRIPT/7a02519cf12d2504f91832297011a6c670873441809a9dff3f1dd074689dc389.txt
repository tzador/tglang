/** 
* SpawnDestructibleActor is a function that spawns a custom actor with destructible components at a given location 
* @param Location The location at which the actor will be spawned
* @param Rotation The rotation of the actor when spawned
* @param ActorClass The class of the actor to be spawned
* @return The spawned actor
*/
function SpawnDestructibleActor(Vector Location, Rotator Rotation, class<Actor> ActorClass)
{
    local Actor SpawnedActor; //declares a local variable of type Actor called SpawnedActor
    SpawnedActor = Spawn(class'DestructibleActor', None, 'None', Location, Rotation); //spawns the actor with destructible components
    if (SpawnedActor != None) //checks if the spawned actor is not null
    {
        //sets the actor's scale to a random value between 0.5 and 1.5
        SpawnedActor.SetActorScale3D(FVector(RandRange(0.5,1.5), RandRange(0.5,1.5), RandRange(0.5,1.5)));
        SpawnedActor.SetPhysics(PHYS_Rotating); //enables physics for the actor
        foreach SpawnedActor.AllComponents(class'DestructibleComponent', DestructibleComp) //loops through all destructive components in the actor
        {
            DestructibleComp.ApplyRandomDamage(0.5, 1.0); //applies a random amount of damage to each component
        }
        foreach SpawnedActor.AllActors(class'ParticleSystemComponent', ParticleComp) //loops through all particle system components in the actor
        {
            ParticleComp.ActivateSystem(); //activates the particle system for each component
        }
        return SpawnedActor; //returns the spawned actor
    }
    else
    {
        //failed to spawn actor, return null
        return None;
    }
}