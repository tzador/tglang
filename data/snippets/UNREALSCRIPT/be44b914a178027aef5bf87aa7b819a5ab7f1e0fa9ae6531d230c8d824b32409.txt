//=======================================================
// Script Name: Projectile
// Description: Class used for creating projectile objects
//=======================================================

class Projectile extends Actor;

// Projectile variables
var int speed;
var int damage;
var bool bExplosive;
var float explosionRadius;
var ParticleSystem explosionEffect;
var int ricochetCount;

// Projectile functions
function InitialiseProjectile(int InitialSpeed, int InitialDamage, bool isExplosive, float ExplosionRadius, ParticleSystem ExplosionEffect, optional int RicochetCount)
{
	// Set projectile variables
	speed = InitialSpeed;
	damage = InitialDamage;
	bExplosive = isExplosive;
	explosionRadius = ExplosionRadius;
	explosionEffect = ExplosionEffect;
	
	// Check for optional ricochet count
	if (RicochetCount == None)
	{
		ricochetCount = 0;
	}
	else
	{
		ricochetCount = RicochetCount;
	}
}

function GetDamage()
{
	return damage;
}

function CheckForCollision()
{
	// Code to check for collision with actors or world
}

function CheckIfExplosive()
{
	if (bExplosive)
	{
		// Code for explosion effect
		explosionEffect.Play();
		
		// Code to damage actors in explosion radius
		// Code to damage world geometry in explosion radius
	}
}

function HandleRicochet()
{
	if (ricochetCount > 0)
	{
		// Code to handle ricochet
		// Decrease ricochet count
		ricochetCount--;
	}
	else
	{
		Destroy(); // Destroy projectile if no more ricochets
	}
}

function Tick(float DeltaTime)
{
	MoveProjectile(DeltaTime); // Code to move projectile
	CheckForCollision();
	CheckIfExplosive();
	HandleRicochet();
}

function MoveProjectile(float DeltaTime)
{
	// Code to move projectile in direction and speed
}

defaultproperties
{
	Begin Object Class=ParticleSystemComponent Name=ExplosionEffect
		End Object
	Components.Add(ExplosionEffect) // Add explosion effect to components
	ExplosionEffect.Template = ParticleSystem'PathToParticleSystem' // Template for explosion effect
}