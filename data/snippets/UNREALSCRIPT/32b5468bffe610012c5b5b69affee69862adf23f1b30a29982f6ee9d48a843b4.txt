// defining a class
class MyClass extends Object
    dependson(MyOtherClass); // declaring dependency on another class

    // declaring class variables
    var int MyInt; //declaring an integer variable
    var MyOtherClass MyOtherClassInstance; //declaring a variable of type MyOtherClass

    //declaring event
    event SomeEvent;

    // constructor function
    function MyClass() 
    {
        // initializing variables
        MyInt = 0;
        MyOtherClassInstance = new MyOtherClass();

        // calling a function
        CallSomeFunction();
    }

    // declaring function that takes in a parameter
    function SomeFunction(int SomeInt)
    {
        // using the parameter
        MyInt = SomeInt;
    }

    // declaring a function with default parameters
    function SomeOtherFunction(int SomeInt = 5)
    {
        // using the default parameter if none is given
        MyInt = SomeInt;
    }

    // declaring a function with a return type
    function int ReturnSomeInt()
    {
        //returning a value
        return 5;
    }

    // declaring a function with multiple return values
    function MultipleReturn() return (int, string)
    {
        //returning multiple values
        return (5, "Hello");
    }
    
    // declaring a function with local variables
    function LocalVars()
    {
        //declaring local variables
        local bool bIsTrue;
        local float MyFloat;
        
        //using the local variables
        bIsTrue = true;
        MyFloat = 5.0;
    }

    // declaring a function with foreach loop
    function ForEachLoop()
    {
        //declaring an array
        local array<int> IntArray;
        
        //adding values to array
        IntArray.AddItem(1);
        IntArray.AddItem(2);
        IntArray.AddItem(3);
        
        //iterating through array using foreach loop
        foreach IntArray(MyInt)
        {
            //printing out each value
            `Log("Value: " $ MyInt);
        }
    }

    // declaring an enum
    enum EMyEnumName
    {
        Value1,
        Value2,
        Value3
    }
}