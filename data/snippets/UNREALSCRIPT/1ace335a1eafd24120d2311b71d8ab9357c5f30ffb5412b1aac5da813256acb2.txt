/*
A class representing a player in the game
*/
class Player extends Object 
    with DamageClass, InventoryClass, ExperienceClass
    placeable within Gameplay;

/*
Represents a player's health attribute
*/
var int HealthAttribute;

/*
Initializes the player's starting health
*/
function Init()
{
    // Sets the starting health to 100
    HealthAttribute = 100;

    // Calls the super function for further initialization
    Super.Init();
}

/*
Calculates the damage taken by the player
@param damage - the amount of damage taken
@return the remaining health after taking damage
*/
function int TakeDamage(int Damage)
{
    // Subtracts the damage from the player's current health
    HealthAttribute -= Damage;

    // If the player has no more health, call the Die function
    if(HealthAttribute <= 0)
    {
        Die();
    }

    // Returns the remaining health
    return HealthAttribute;
}

/*
Function called when the player dies
*/
function Die()
{
    // Shows a death message to the player
    WorldInfo.Game.BroadcastDeathMessage(,, None,, None, None);

    // Removes the player from the game
    Pawn.SetPhysics(PHYS_None);

    // Destroys the player's inventory
    ClearInventory();

    // Calls the super function for further processing
    Super.Die();
}