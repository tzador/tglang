class myClass extends Object;

/*
This is a custom class called "myClass" that extends the built-in Object class in the UnrealScript programming language.
*/

/** This is a comment used for documentation. It will appear in the native class viewer as a tool tip for the class. */

var() EditFixedSize Native readonly int Health;

/*
This variable is marked as editable, has a fixed size, and is read-only. It is of type 'int' and is used to store the current health of an object.
*/

var() EditFixedSize float DamageMultiplier;

/*
This variable is similar to the previous one, but it is of type 'float' and is used to store the damage multiplier for the object.
*/

var() int[] AmmoArray;

/*
This variable is marked as editable and is an array of integers used to store the amount of ammo for each type of weapon available to the object.
*/

var() EditInline config SoundCue ReloadSound;

/*
This variable is marked as editable and is an inline configuration variable. It is used to store a sound cue that will play when the object needs to reload.
*/

var const float SPEED_LIMIT = 200.0;

/*
This variable is a constant, meaning its value cannot be changed. It is of type 'float' and is used to set the speed limit for the object.
*/

function BeginPlay()
{
    super.BeginPlay();

    /*
    This function overrides the default BeginPlay function from the parent class. It is called when the game begins, and it calls the parent class' BeginPlay function before executing any additional code.
    */

    if (Health <= 0)
       Destroy();
    /*

    This conditional statement checks if the object's current health is equal to or less than 0. If it is, the Destroy() function will be called on the object, effectively removing it from the game.

    */
}

function FireProjectile(Vector FireDirection)
{
    /*
    This function takes in a 'Vector' parameter called FireDirection, and it is used to launch a projectile in the specified direction.
    */

    if (FireDirection != vect(0, 0, 0))
    {
        /*
        This conditional statement checks if the passed in 'FireDirection' parameter is not equal to the zero vector. If it is not equal, the code inside the if-statement will be executed.
        */

        Projectile projectile = Spawn(class'Projectile', self,, Location + FireDirection * 100, Rotation);
        /*
        This line of code uses the Spawn function to create a new instance of a class called 'Projectile'. It passes in the current object's location and the calculated location of the projectile, which is 100 units away from the current location in the specified direction. The rotation of the object is also taken into account when spawning the projectile.
        */
    }
}

defaultproperties
{
    Begin Object Class=DynamicLightEnvironmentComponent Name=LightEnvComp
    /*
    This property section defines the default values for the object's properties.
    */

    End Object
    LightEnvComp=bIsActive=True
    /*
    This line of code sets the value of the 'bIsActive' property of the 'LightEnvComp' component to True.
    */

    Health=100
    DamageMultiplier=1.5
    AmmoArray[0]=10
    AmmoArray[1]=20
    ReloadSound=MovingSound'SFX.Weapon.Reload'
    /*
    These lines of code set the default values for the variables and components of the object.
    */

    Begin Object Class=StaticMeshComponent Name=Mesh
    /*
    This property section defines the default values for the 'Mesh' component, which is of type 'StaticMeshComponent'.
    */

    End Object
    Mesh=StaticMesh'Content.Meshes.MyMesh'
    /*
    This line of code sets the value of the 'Mesh' property of the object to a specific static mesh asset.
    */

    Begin Object Class=SkeletalMeshComponent Name=SkeletalMesh
    /*
    This property section defines the default values for the 'SkeletalMesh' component, which is of type 'SkeletalMeshComponent'.
    */

    End Object
    SkeletalMesh=SkeletalMesh'Content.Meshes.MySkeletalMesh'
    /*
    This line of code sets the value of the 'SkeletalMesh' property of the object to a specific skeletal mesh asset.
    */

    Components.Add(LightEnvComp)
    Components.Add(Mesh)
    Components.Add(SkeletalMesh)
    /*
    These lines of code add the previously defined components to the object.
    */

    Begin Object Class=Player Start Name=PlayerStart
    /*
    This property section defines the default values for the 'PlayerStart' component, which is of type 'PlayerStart'.
    */

    End Object
    PlayerStart=Actors.PlayerStart'PlayerStart0'
    /*
    This line of code sets the value of the 'PlayerStart' property of the object to a specific player start actor in the level.
    */
}