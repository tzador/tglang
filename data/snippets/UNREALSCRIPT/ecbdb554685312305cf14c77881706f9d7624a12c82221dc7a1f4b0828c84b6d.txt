/* Finds the midpoint between two vectors */
function vector GetMidpoint(vector V1, vector V2)
{
    // Calculate midpoint by averaging the two vectors
    return (V1 + V2) / 2;
}

/* Rotates an actor in the world */
function RotateTo(actor other, float RotationRate)
{
    // Calculate the new rotation by adding the rotation rate
    rotator NewRotation;
    NewRotation.Yaw = Self.Rotation.Yaw + RotationRate;
    
    // Set the new rotation on the actor
    other.SetRotation(NewRotation);
}

/* Handles the input for movement */
function Move(float X, float Y, float Z)
{
    // Create a new vector from the input values
    vector MovementVector(X, Y, Z);

    // Get the current location of the actor
    vector CurrentLocation = Self.Location;

    // Calculate the new location by adding the movement vector to the current location
    vector NewLocation = CurrentLocation + MovementVector;
    
    // Set the new location on the actor
    Self.SetLocation(NewLocation);
}