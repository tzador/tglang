class MyActor extends Actor
    // Declaring variables
    var() float Speed;
    var() int Health;
    var name Name;
    var(Weapon) Weapon activeWeapon;

    // Creating states with labels and functions
    defaultproperties
    {
        Begin Object Class = SkeletalMeshComponent Name = MeshComponent
        End Object
        Begin Object Class = PawnMovementComponent Name = MovementComponent
        End Object
        Begin Object Class = StaticMeshComponent Name = GunComponent
        End Object

        // Creating a new state
        Begin State name Running
        Label = "Running"
        Begin Object Class = InterpTrackSound Name = FootstepSoundTrack
        End Object
        Begin Object Class = InterpTrackFaceFX Name = MouthAnimationTrack
        End Object

        // Defining functions within the state
        function BeginState()
        {
            // Setting up animation variables
            SetAnimation(MeshComponent.AnimationTree, RunningAnimTree);
            SetSound(MeshComponent.SoundNodeWave, FootstepsSound);
            SetFaceFX(MeshComponent.FaceFXAudioTrack, RunningFaceFX);

            // Setting up weapon variables
            activeWeapon = new (self, Weapon);
            activeWeapon.SetPosition(GunComponent.Location);
            activeWeapon.SetRotation(GunComponent.Rotation);
        }

        function EndState()
        {
            // Deactivating weapon
            activeWeapon.SetActive(false);

            // Clearing animation variables
            ClearAnimation(MeshComponent.AnimationTree);
            ClearSound(MeshComponent.SoundNodeWave);
            ClearFaceFX(MeshComponent.FaceFXAudioTrack);
        }

        event Hit (Actor Other, Vector HitLocation, Vector HitNormal)
        {
            // Checking if the hit was fatal
            if (Health < Other.Damage)
            {
                // Jumping to the death state
                GotoState('Death');
            }
        }

        event Touch (Actor Other, PrimitiveComponent OtherComp, Vector HitNormal, Vector TouchLocation)
        {
            // Checking if the actor touched a health pack
            if (Other.IsA('HealthPack') && Other.HealthValue > 0)
            {
                // Adding health
                Health = Min(Health + Other.HealthValue, Health);
                // Making the health pack disappear
                Other.Destroy();
            }
        }

        // Defining another function within the state
        function GotoState(name stateName)
        {
            Super.GotoState(stateName);
        }

        // Defining variables within the state
        var bool bHidden;

        // Defining functions outside of the state
        function MyFunction()
        {
            // Code goes here
        }

    }