class MyActor extends Actor
//Creates a custom actor class
    config (MyConfigObject, myConfig)
    //Creates a config object for customization

    defaultproperties
    //Start of defaultproperties block

    {
    Begin Object Name=CollisionCylinder
    //Defines a collision cylinder for the actor
        CollisionRadius = 300.0
        CollisionHeight = 500.0
        CollisionType = COLLIDE_Custom
        //Sets the collision type to custom
        BlockActors = true
        BlockZeroExtent = true
        AlwaysCheckCollision = true
        //Ensures collision is always checked for this actor
        BlockRigidBody = true
        //Prevents physics simulation on this actor
    End Object

    Begin Object Name=SpriteComponent
    //Defines the sprite component for the actor
        Sprite=Material'Engine.DefaultMaterial'
        //Sets the default material for the sprite
        DrawScale = 1.5
        //Sets the draw scale for the sprite
    End Object

    Begin Object Name=MeshComponent
    //Defines the mesh component for the actor
        Mesh=StaticMesh'Engine.DefaultMesh'
        //Sets the default static mesh for the mesh component
    End Object

    Begin Object Class=CameraComponent Name=CameraComp
    //Defines the camera component for the actor
        RelativeLocation = (X=0.0, Y=0.0, Z=1000.0)
        //Sets the relative location of the camera component
    End Object

    Begin Object Class=ParticleSystemComponent Name=ParticleComp
    //Defines the particle system component for the actor
        Template=ParticleSystem'Particles.Water.Splash'
        //Sets the particle system template
        RelativeLocation = (X=0.0, Y=0.0, Z=1500.0)
        //Sets the relative location of the particle component
    End Object

    Begin Object Class=AudioComponent Name=AudioComp
    //Defines the audio component for the actor
        Sound=SoundCue'A_Base_Class_Library.BassDrum1'
        //Sets the sound cue for the audio component
        RelativeLocation = (X=0.0, Y=0.0, Z=2000.0)
        //Sets the relative location of the audio component
    End Object

    Begin Object Class=InterpTrackSound Name=SoundTrack
    //Defines the sound track for the actor
        bForNostalgiaTour = false
        //Turns off nostalgia tour
        bPlayOnReverse = false
        //Turns off playback during reverse
        SoundTrack=(ActorList=("TestActor"), TimeTrack=((Key=0.0, Value=(InterpValue=(Linear=false, Time=(X=0))),ArriveTangent=0))),InitPosition=Vector(120,0,0),SoundTrackTaper="TaperTypeTaperTypeEaseIn",DialogueTrack=(TheOtherDay2=none))
        //Sets the sound track for the actor, with keyframes, tapering, and dialogue track
    End Object

    Begin Object Class=LensFlareComponent Name=FlareComp
    //Defines the lens flare component for the actor
        Flare = Texture2D'Engine.LensFlareResource.DistantStarWithRays'
        //Sets the lens flare texture
        Size = (X=8.0, Y=8.0)
        //Sets the size of the flare component
        DisplayBrightness = 1.0
        //Sets the display brightness of the flare
        Offset = (X=0.0, Y=0.0)
        //Sets the offset of the lens flare
    End Object

    Begin Object Name=PointLightComponent
    //Defines the point light component for the actor
        Radius = 1000
        //Sets the radius of the point light
        LightType = POINT
        //Sets the light type to point
        CastShadows = true
        //Enables shadow casting for the light
        bAllowMovingLit = true
        //Allows light to update if the actor moves
        LightColor=(R=255, G=255, B=255)
        //Sets the light color to white
    End Object

    Begin Object Name=SpotLightComponent
    //Defines the spotlight component for the actor
        Radius = 500
        //Sets the radius of the spotlight
        LightType = SPOT
        //Sets the light type to spotlight
        OuterConeAngle = 60
        InnerConeAngle = 30
        //Sets the outer and inner cone angles for the spotlight
        OuterConeAngleShadow = 0
        InnerConeAngleShadow = 0
        //Sets the outer and inner cone angles for the spotlight shadows
    End Object

    function GetRandomNumber()
    //Defines a function to generate a random number
    {
        local int RandomNum;
        //Defines a local integer to store the random number
        RandomNum = Rand(100);
        //Uses the built-in Rand function to get a random number between 0 and 100
        return RandomNum;
        //Returns the random number
    }
}