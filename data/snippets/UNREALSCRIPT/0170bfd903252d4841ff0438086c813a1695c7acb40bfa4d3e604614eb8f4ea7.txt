/**
 * This class represents a player pawn in a third person action game.
 * It handles movement, collisions, and input from the player
 */
class PlayerPawn extends Pawn
    placeable;

/**
 * The current state of the player
 */
var state PlayerState CurrentPlayerState;

/**
 * The camera attached to the player pawn
 */
var Camera PlayerCamera;

/**
 * The default movement speed of the player
 */
const float DefaultMovementSpeed = 300;

/**
 * The current movement speed of the player
 */
var float CurrentMovementSpeed;

/**
 * The input axis for movement
 */
var Joystick MovementInput;

/**
 * The input axis for turning
 */
var Joystick TurnInput;

/**
 * Determines if the player is currently moving
 */
var bool bIsMoving;

/**
 * Event called when the player starts moving
 */
event StartedMoving();

/**
 * Event called when the player stops moving
 */
event StoppedMoving();

/**
 * Gets called every tick of the game
 */
event Tick(float DeltaTime)
{
    // Handle input from the player
    HandleInput();

    // Move the player based on current input and movement speed
    Move(MovementInput * CurrentMovementSpeed * DeltaTime);

    // Rotate the player based on turn input
    Rotate(TurnInput * DeltaTime);

    // Check if the player is currently moving
    if (MovementInput.Size() > 0)
    {
        // If the player wasn't moving before, call the StartedMoving event
        if (!bIsMoving)
        {
            StartedMoving();
        }

        // Set bIsMoving to true
        bIsMoving = true;
    }
    else
    {
        // If the player was moving before, call the StoppedMoving event
        if (bIsMoving)
        {
            StoppedMoving();
        }

        // Set bIsMoving to false
        bIsMoving = false;
    }
}

/**
 * Handles input from the player
 */
function HandleInput()
{
    // Get input from the player's joystick
    MovementInput = GetJoystickInput();

    // Get input from the player's turn axis
    TurnInput = GetTurnInput();
}

/**
 * Moves the player based on a given vector
 * 
 * @param MoveDirection: The direction to move in
 */
function Move(Vector MoveDirection)
{
    // Calculate the new position for the player
    Vector NewPosition = Location + MoveDirection;

    // Check for collisions with the environment
    if (!CollisionCheck(Location, NewPosition, 50))
    {
        // If there are no collisions, update the player's location
        Location = NewPosition;
    }
}

/**
 * Rotates the player based on a given amount
 * 
 * @param TurnAmount: The amount to rotate by
 */
function Rotate(float TurnAmount)
{
    // Calculate the new rotation for the player
    Rotator NewRotation = Rotation + Rotator(0,TurnAmount,0);

    // Update the player's rotation
    Rotation = NewRotation;
}

/**
 * Gets input from the player's joystick
 */
function GetJoystickInput()
{
    // Check for input from the joystick
    if (JoystickAxes[1].GetValue() != 0)
    {
        // Return the input as a vector
        return Vector(0,0,JoystickAxes[1].GetValue());
    }
    else
    {
        // If there is no input, return a zero vector
        return vect(0,0,0);
    }
}

/**
 * Gets input from the player's turn axis
 */
function GetTurnInput()
{
    // Check for input from the turn axis
    if (JoystickAxes[0].GetValue() != 0)
    {
        // Return the input as a float
        return JoystickAxes[0].GetValue();
    }
    else
    {
        // If there is no input, return zero
        return 0;
    }
}