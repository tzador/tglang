class MyActor extends Actor
    abstract const numOfVerts = 4; //creates an abstract constant for the number of vertices

    // Replication
    replication
    {
        reliable if(Role == ROLE_Authority);
        unreliable if(Role == ROLE_Authority);
    }

    // Event declaration
    event MyActor EventA(int paramA, out int outParamA);

    /* Struct containing two properties:
         - PropertyA of type float
         - PropertyB of type string */
    struct StructWithProperties
    {
        var float PropertyA;
        var string PropertyB;
    }

    /* Function with reference parameters:
        - paramA of type array of integers
        - paramB of type string */
    function DoSomethingWithParams(out int& paramA, in string paramB)
    {
        // For loop iteration
        for (local int i = 0; i < arrayOfInts.Length; i++)
        {
            // Condition
            if (arrayOfInts[i] > paramA[i])
            {
                // Log message
                `Log("Value at index " $ i $ " is greater than paramA value.");
            }
        }
        // Event call with output parameter
        EventA(paramA, paramA);
    }

    // Overridden event
    event MyActor EventB()
    {
        super.EventB(); // Calls the EventB function in the parent class first
        DoSomethingWithParams(numOfVerts, "Hello World"); // Calls the function with parameters
    }

    // Default property for this class
    defaultproperties
    {
        Name="MyActor"
        Description="This is a default MyActor class"
        CollisionComponent=(CollisionComponent=(PrimitiveComponent=PrimitiveComponent(Object=StaticMesh'Engine.Default__MyActor_C:MyMeshComponent')))
        // Sets PropertyA to 10 and PropertyB to "Default Property"
        DataObj=StructWithProperties(PropertyA=10,PropertyB="Default Property")
        // Sets a keybind to call the EventB function
        +Bindings=(Key=A,EventName=EventB)
    }