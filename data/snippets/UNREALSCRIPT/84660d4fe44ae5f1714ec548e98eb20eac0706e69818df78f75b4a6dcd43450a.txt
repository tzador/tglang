// This is a code snippet in UNREALSCRIPT that defines a custom weapon class
class MyWeapon extends Weapon;

// Declare a variable for the damage this weapon does
var int Damage;

// Declare an enum for the different firing modes of the weapon
enum OwnedFiringMode
{
    SingleShot,
    BurstFire,
    FullAuto
}

// Declare a property for the current firing mode of the weapon
var config OwnedFiringMode CurrentFiringMode;

// Override the Fire() function to allow different behavior based on firing mode
event Fire(float F)
{
    // Check which firing mode is currently selected
    switch(CurrentFiringMode)
    {
        // If in single shot mode, call the single shot fire function
        case SingleShot:
            SingleShotFire(F);
            break;
        
        // If in burst fire mode, call the burst fire function
        case BurstFire:
            BurstFire(F);
            break;
        
        // If in full auto mode, call the full auto fire function
        case FullAuto:
            FullAutoFire(F);
            break;
    }
}

// Define the single shot fire function
function SingleShotFire(float F)
{
    // Calculate the damage dealt based on charge level
    // In this case, higher charge level = higher damage
    Damage = F * 100;
    
    // Use the damage to inflict damage on the target
    InflictDamage(Damage);
}

// Define the burst fire function
function BurstFire(float F)
{
    // Set a variable for the number of shots in a burst
    var int NumShots = 3;
    
    // Loop through the number of shots in the burst
    for(int i=0; i < NumShots; i++)
    {
        // Calculate the damage dealt based on charge level
        // In this case, each shot in the burst does less damage than the previous one
        Damage = (F * 100) - (i * 20);
        
        // Use the damage to inflict damage on the target
        InflictDamage(Damage);
    }
}

// Define the full auto fire function
function FullAutoFire(float F)
{
    // Set a variable for the rate of fire, in shots per second
    var float FireRate = 5.0;
    
    // Calculate the time between shots based on the fire rate
    var float TimeBetweenShots = 1.0 / FireRate;
    
    // Set a variable for the total number of shots fired
    var int TotalShots = 0;
    
    // Continue firing until the total number of shots fired equals the charge level
    while(TotalShots < F)
    {
        // Calculate the damage dealt based on charge level
        // In this case, higher charge level = higher damage
        Damage = F * 100;
        
        // Use the damage to inflict damage on the target
        InflictDamage(Damage);
        
        // Increase the total number of shots fired
        TotalShots++;
        
        // Wait for the time between shots before firing again
        Sleep(TimeBetweenShots);
    }
}