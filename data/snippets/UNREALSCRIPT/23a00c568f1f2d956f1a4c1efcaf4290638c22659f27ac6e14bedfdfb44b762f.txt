/** This is a complex function that finds the shortest path between two nodes in a graph
 * @param StartNode the starting node in the graph
 * @param EndNode the ending node in the graph
 * @return an array of nodes representing the shortest path from StartNode to EndNode
 */
function array<Node> FindShortestPath(Node StartNode, Node EndNode)
{
    // array of nodes to hold the shortest path
    local array<Node> ShortestPath;
    
    // array of booleans to keep track of which nodes have been visited
    local array<bool> VisitedNodes;
    
    // array of distances to keep track of the shortest distance from StartNode to each node
    local array<float> Distances;
    
    // priority queue to store the nodes to be visited in order of shortest distance
    local Priority_Queue<Node> ToBeVisited;
    
    // initialize VisitedNodes array to all false
    for (local int i = 0; i < Graph.Nodes.length; i++)
    {
        VisitedNodes[i] = false;
    }
    
    // set the distance to each node to infinity, except for StartNode
    for (i = 0; i < Graph.Nodes.length; i++)
    {
        if (Graph.Nodes[i] == StartNode)
            Distances[i] = 0;
        else
            Distances[i] = INFINITY;
    }
    
    // add StartNode to the queue
    ToBeVisited.Add(StartNode, 0);
    
    // while there are still nodes to be visited
    while (!ToBeVisited.IsEmpty())
    {
        // get the node with the shortest distance from the queue
        local Node CurrentNode;
        local float CurrentDistance;
        ToBeVisited.GetMin(CurrentNode, CurrentDistance);
        
        // mark the current node as visited
        VisitedNodes[CurrentNode] = true;
        
        // if the current node is the EndNode, we have found the shortest path
        if (CurrentNode == EndNode)
        {
            // add EndNode to the shortest path array
            ShortestPath.AddItem(EndNode);
            
            // backtrack through the VisitedNodes array to find the shortest path
            local Node PreviousNode = EndNode;
            while (PreviousNode != StartNode)
            {
                // find the previous node in the shortest path
                for (i = 0; i < Graph.Nodes.length; i++)
                {
                    // if the current node is adjacent to PreviousNode and it has the shortest
                    // distance from StartNode, then it is part of the shortest path
                    if (Graph.Nodes[i].IsAdjacentTo(PreviousNode) && Distances[i] + 1 == Distances[PreviousNode])
                    {
                        // add the previous node to the beginning of the shortest path array
                        ShortestPath.Insert(0, PreviousNode);
                        
                        // update the previous node to continue backtracking
                        PreviousNode = Graph.Nodes[i];
                        
                        // break out of the loop
                        break;
                    }
                }
            }
            
            // return the shortest path array
            return ShortestPath;
        }
        
        // for all adjacent nodes to the current node
        foreach (Node NextNode in CurrentNode.AdjacentNodes)
        {
            // if the next node has not been visited yet
            if (!VisitedNodes[NextNode])
            {
                // calculate the new distance from StartNode to the next node
                local float NewDistance = CurrentDistance + 1;
                
                // if this distance is shorter than the current distance, update the distance
                if (NewDistance < Distances[NextNode])
                {
                    // update the distance
                    Distances[NextNode] = NewDistance;
                    
                    // add the next node to the queue with its new distance as priority
                    ToBeVisited.Add(NextNode, NewDistance);
                }
            }   
        }
    }
    
    // if we reach this point, it means there is no path from StartNode to EndNode
    // return an empty array
    return array<Node>;
}