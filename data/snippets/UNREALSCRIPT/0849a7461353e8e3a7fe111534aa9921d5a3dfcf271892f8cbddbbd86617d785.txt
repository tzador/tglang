class Spawner extends Actor
    /**
    * This class represents a spawner object that generates enemies.
    * It inherits from the Actor class.
    */

    /**
    * Properties
    */
    var() const int MaxSpawnCount; // The maximum number of enemies to spawn.
    var() int CurrentSpawnCount; // The current number of enemies spawned.
    var() const float SpawnDelay; // The delay between enemy spawns.
    var() const float SpawnRadius; // The radius within which enemies can spawn.
    var() class EnemyAIController AIController; // The AI controller to assign to spawned enemies.
    var() int[] EnemyClasses; // Array of enemy classes that can be spawned.

    /**
    * Functions
    */

    // Constructor, initializes properties.
    function Spawner()
    {
        MaxSpawnCount = 5;
        CurrentSpawnCount = 0;
        SpawnDelay = 5.0;
        SpawnRadius = 100.0;
        AIController = class'EnemyAIController';
        EnemyClasses = new int[5];

        // Assign enemy classes to array.
        EnemyClasses[0] = class'SoldierEnemy';
        EnemyClasses[1] = class'TankEnemy';
        EnemyClasses[2] = class'SniperEnemy';
        EnemyClasses[3] = class'SuicideBomberEnemy';
        EnemyClasses[4] = class'ChargerEnemy';
    }

    // Function to start spawning enemies.
    function SpawnEnemies()
    {
        // Check if maximum spawn count has been reached.
        if (CurrentSpawnCount < MaxSpawnCount)
        {
            // Select random enemy class from array.
            local int RandomIndex = Rand(EnemyClasses.Length);
            local int EnemyClass = EnemyClasses[RandomIndex];

            // Randomly generate spawn location within radius.
            local vector SpawnLocation = location + RandVector() * SpawnRadius;

            // Spawn enemy and assign AI controller.
            local actor SpawnedEnemy;
            SpawnedEnemy = Spawn(EnemyClass,,SpawnLocation);
            SpawnedEnemy.SetAI(AIController);

            // Increase current spawn count.
            CurrentSpawnCount++;

            // Repeat after spawn delay.
            SetTimer(SpawnDelay, false, 'SpawnEnemies');
        }
    }
defaultproperties
{
    bNoDelete = true // Prevents the spawner from being deleted by the player.
    bAlwaysRelevant = true // Makes the spawner always relevant to all players.

    // Set collision to only BlockAll, to prevent players from walking through spawner.
    CollisionComponent = new class'BlockAll';

    // Set size of spawner to 50 x 50 x 50.
    DrawScale = vector(50, 50, 50);
}