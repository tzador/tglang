// Set up custom event that takes in an array of integers and sorts them using insertion sort
event SortArray(int[] unsortedArray) 
{
    // Create a local variable to store the size of the input array
    local int arraySize;
    
    // Initialize the size variable to the length of the unsorted array
    arraySize = unsortedArray.Length;
    
    // Loop through each element in the input array
    for (local int i = 1; i < arraySize; i++)
    {
        // Store the current value at the current index in a local variable
        local int currentValue = unsortedArray[i];
        
        // Create a variable to hold the index of the element to compare against
        local int j = i;
        
        // Compare the current value to the element before it in the array
        // If the current value is smaller, shift the element to the right
        while (j > 0 && unsortedArray[j-1] > currentValue)
        {
            // Move the element to the right by overwriting it with the previous element
            unsortedArray[j] = unsortedArray[j-1];
            
            // Decrement the comparison index
            j--;
        }
        
        // Once the correct index is found, insert the current value at that index
        unsortedArray[j] = currentValue;
    }
    
    // Print out the sorted array for debugging
    `Log("Sorted Array: " $ unsortedArray);
}

// Example usage: Sort an array of integers with the values 7, 3, 9, 1, 5
SortArray({7, 3, 9, 1, 5});