/**
* This is a complex code snippet written in UNREASLSCRIPT.
* It demonstrates the use of arrays, conditional statements, and for loops.
* The code creates a 2D grid of actors in a game.
*/

class GridActor extends Actor;

var array<array<Actor>> Grid; // 2D array of actors to represent the grid
var float CellSize;  // size of each cell in the grid
var int GridRows;    // number of rows in the grid
var int GridColumns;// number of columns in the grid

// function to initialize the grid, takes in the number of rows and columns
function InitGrid(int Rows, int Columns)
{
    GridRows = Rows;
    GridColumns = Columns;

    // loop through each row and create an array for that row
    for (local int i = 0; i < Rows; i++)
    {
        Grid[i] = new array<Actor>;
        
        // loop through each column and create an actor for that cell
        for (local int j = 0; j < Columns; j++)
        {
            local Vector Location = Vector(i * CellSize, 0, j * CellSize); // calculate the location of the actor
            Grid[i].Add(Spawn(class 'CellActor',, None, Location)); // spawn the actor and add it to the array
        }
    }
}

// function to update the grid, takes in a boolean value to determine if the grid should be randomized or not
function UpdateGrid(bool bRandomize)
{
    // loop through each row in the grid
    for (local int i = 0; i < GridRows; i++)
    {
        // loop through each column in the row
        for (local int j = 0; j < GridColumns; j++)
        {
            local Actor CurrentCell = Grid[i][j]; // get the actor at the current location
            
            if (bRandomize) // if bRandomize is true, randomly change the actor's properties
            {
                // randomly select color and scale for the actor
                local Color RandomColor = RandomColor();
                local float RandomScale = RandRange(0.5, 1.5);
                CurrentCell.SetActorColor(RandomColor); // change the actor's color
                CurrentCell.SetActorScale3D(RandomScale, RandomScale, RandomScale); // change the actor's scale
            }
            else // if bRandomize is false, reset the actor's properties to default values
            {
                CurrentCell.SetActorColor(255, 255, 255); // reset color to white
                CurrentCell.SetActorScale3D(1, 1, 1); // reset scale to 1
            }
        }
    }
}