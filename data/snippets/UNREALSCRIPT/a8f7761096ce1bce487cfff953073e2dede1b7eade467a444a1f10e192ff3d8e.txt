/**
 * This is a complex function that takes in an array of integers, sorts them in ascending order,
 * and then returns the sorted array.
 */

function Array<int> SortArray(Array<int> InputArray)
{
	//Loop through the array to compare each element with the rest of the array
	for (int i = 0; i < InputArray.Length; i++)
	{
		//Set the current element as the minimum value
		int Min = InputArray[i];
		//Set the index of the minimum value
		int MinIndex = i;

		//Loop through the rest of the array to find the minimum value
		for (int j = i; j < InputArray.Length; j++)
		{
			//If the current value is smaller than the minimum value, update the minimum value and index
			if (InputArray[j] < Min)
			{
				Min = InputArray[j];
				MinIndex = j;
			}
		}

		//Swap the minimum value with the current element
		InputArray[MinIndex] = InputArray[i];
		InputArray[i] = Min;
	}

	//Return the sorted array
	return InputArray;
}

//Example usage:
//Declare an input array
Array<int> InputArray;
//Add integers to the array
InputArray.AddItem(5);
InputArray.AddItem(3);
InputArray.AddItem(8);
InputArray.AddItem(1);

//Call the SortArray function and store the sorted array in a new array
Array<int> SortedArray = SortArray(InputArray);

//Print out the sorted array
for (int k = 0; k < SortedArray.Length; k++)
{
	` ` `
	//Output: 1, 3, 5, 8
	` ` `	
}