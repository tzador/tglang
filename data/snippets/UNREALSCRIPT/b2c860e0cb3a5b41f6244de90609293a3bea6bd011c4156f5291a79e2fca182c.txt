/*
This is a complex code snippet written in UNREALSCRIPT for a custom enemy AI class
*/

class EnemyAI extends Pawn;

/*
Class representing the enemy AI and inheriting from the Pawn class
*/

defaultproperties
{
    bStatic: False //Enemy AI can move

    PerceivedTeam: 0// AI belongs to opposing team

    target: None // No initial target

    triggerNotifyType: CLASS'Struct' // Defines the type of trigger notifications

    function Running() // Function for the AI's behavior while running
    {
        PerformAction();// Performs pre-defined actions for the AI
        // Add additional logic and actions here
    }

    function Attacking() // Function for the AI's behavior while attacking
    {
        PerformAction();// Performs pre-defined actions for the AI
        // Add additional logic and actions here
        if (target != None && target.Health > 0) // If there is a valid target and it is alive
        {
            if (VSize(target.Location - Location) <= 1000) // If the target is within 1000 units from the AI
            {
                FireProjectile(Class'ShockProjectile', AIController(target)); // AI will fire a shock projectile at the designated target with a specialized AI controller 
                // Add additional actions here
            }
            else // If the target is further than 1000 units from the AI
            {
                MoveTo(target.Location); // AI will move towards the target's location
                // Add additional actions here
            }
        }
    }

    function Die() // Function for the AI's behavior when it dies
    {
        SetVelocity(0,0,0);// Stops all movement
        SetPhysics(PHYS_None); // Switches to a non-physical state
        GotoState('Dead');// AI switches to the Dead state
        // Add additional logic and actions here
    }

    function NotifyTrigger(Actor Other, Pawn EventInstigator) // Function for handling trigger notifications
    {
        if (Other.IsA(triggerNotifyType) && Pawn(EventInstigator).Health > 0) // If the triggering actor is of the designated type and the event instigator is alive
        {
            target = EventInstigator; // Set the target to the event instigator
            // Add additional actions here
        }
    }

    state Dead
    {
        function BeginState() // Function for when the AI enters the Dead state
        {
            Super.BeginState();
            // Add additional logic and actions here
        }
    }
}