// Here we declare a custom struct type called Point with two floating point variables x and y
struct Point
{
    var float x;
    var float y;
}

// Here we declare a new array based on our Point struct type
var Point[4] Points; 

// Here we loop through the Points array and initialize each element with random x and y values
for (int i = 0; i < 4; ++i)
{
    Points[i].x = Random(10);
    Points[i].y = Random(10);
}

// Here we define a dynamic array of integers
var array<int> Numbers;  

// Here we add elements to the dynamic array using the 'Add' function
Numbers.Add(4);
Numbers.Add(6);
Numbers.Add(2);
Numbers.Add(7);

// Here we iterate through the Numbers array and print each element
foreach(int Number in Numbers)
{
    log("Number: " $ string(Number));
}

// Here we define a new class called Player that extends from the Actor class
class Player extends Actor
{
    var bool bIsAlive;
    var string Name;

    // Here we define a function with two parameters, one integer and one string
    function ChangeName(int NewNumber, string NewName)
    {
        Name = NewName;
        log("Player " $ Name $ " changed their name to " $ NewName);
    }
}

//In the game code, we can now create new instances of this Player class
var Player Player1;
var Player Player2;

// We can call functions and access variables from instances of the Player class
Player1.bIsAlive = true;
Player2.ChangeName(2, "John");

// Here we define a new enum called Direction with four possible values
enum Direction
{
    North,
    South,
    East,
    West
}

// Here we create a variable of type Direction and assign it a value
var Direction MyDirection = Direction.East;

// Here we use a switch statement to perform different actions based on the value of MyDirection
switch (MyDirection)
{
    case Direction.North:
        // Do something if MyDirection is set to North
        log("Heading North");
        break;
    case Direction.South:
        // Do something if MyDirection is set to South
        log("Heading South");
        break;
    case Direction.East:
        // Do something if MyDirection is set to East
        log("Heading East");
        break;
    case Direction.West:
        // Do something if MyDirection is set to West
        log("Heading West");
        break;
}