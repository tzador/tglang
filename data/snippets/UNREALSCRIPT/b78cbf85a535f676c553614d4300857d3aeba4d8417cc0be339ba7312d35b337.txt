class Pawn extends Actor
    var PlayerController Controller;
    var Controller LastAttackedBy;
    var int Score;
    var bool bCanJump;
    var int JumpCount;
    var int MaxWalkSpeed;
    
    defaultproperties
    {
            Score = 0
            bCanJump = true
            JumpCount = 0
            MaxWalkSpeed = 500
            
            Begin Object name(TScriptArray<Actor>, DetectedActors)
            End Object
    }
    
    function PostBeginPlay()
    {
            Super.PostBeginPlay();
    }
    
    event Tick(float DeltaTime)
    {
            if (bCanJump && JumpCount < 2)
            {
                    if (Controller.Input.bHoldJump)
                    {
                            Jump();
                            JumpCount++;
                    }
            }
    }
    
    simulated function Jump()
    {
            if (!bCanJump)
                    return;
                    
            bCanJump = false;
            JumpCount++;
            
            SetPhysics(PHYS_Falling);
            
            //Play Jump Animation
    }
    
    function SetPhysics(int newPhysics)
    {
            Super.SetPhysics(newPhysics);
            
            switch (newPhysics)
            {
                    case PHYS_Walking:
                            bCanJump = true;
                            JumpCount = 0;
                            break;
                    case PHYS_Falling:
                            bCanJump = false;
                    default:
                            break;
            }
    }
    
    function HitWall(vector HitNormal, actor Wall, bounce Hit)
    {
            // Reverse direction on X and Y planes
            Velocity = Vector(-Velocity.X, -Velocity.Y, Velocity.Z);
    }
    
    function TakeDamage(int Damage, Controller EventInstigator, vector HitLocation, vector Momentum, class DamageType)
    {
            // Do something with Damage
            if (Damage == 50)
            {
                    // Set last attacked by
                    LastAttackedBy = EventInstigator;
            }
    }