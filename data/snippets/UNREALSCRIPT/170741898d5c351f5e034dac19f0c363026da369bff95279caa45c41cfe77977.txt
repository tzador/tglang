class MyClass extends Object
    /* This is a class declaration for a custom class called "MyClass" that extends the base class "Object". */
    config(Mode)
        /* This is a configuration block that takes in a parameter called "Mode". */
        beginsim local player_controller PlayerController
            /* This is a local variable declaration for a player controller. */
            PlayerController = GetPlayerController();
            /* This calls the GetPlayerController() function to get the current player controller and assigns it to the PlayerController variable. */
            log("Mode is set to :" $ Mode);
            /* This line logs the message "Mode is set to :" followed by the value of the Mode parameter. */
            if(Mode == "SinglePlayer")
                /* This line starts an if statement and checks if the Mode parameter is equal to "SinglePlayer". */
                PlayerController.StartSinglePlayerGame();
                /* This line calls the StartSinglePlayerGame() function on the PlayerController variable if the if statement condition is met. */
            else
                /* This starts an else statement if the Mode parameter is not equal to "SinglePlayer". */
                log("Invalid mode selected!");
                /* This line logs the message "Invalid mode selected!" if the else statement is reached. */
        endsim
        /* This ends the beginsim block. */

    /* This is the constructor function for the MyClass class. */
    function MyClass(Mode)
        /* This is a parameterized constructor that takes in a parameter called "Mode". */
        super(Mode);
        /* This calls the super() function of the parent class with the Mode parameter passed in. */
        config(Mode);
        /* This calls the config() function with the Mode parameter passed in. */
    /* This ends the constructor function. */
    
    /* This is a function declaration for a function called "MyFunction". */
    function MyFunction(int Param1, bool Param2)
        local int MyInt;
        /* This is a local variable declaration for an integer variable called "MyInt". */
        MyInt = Param1 + 10;
        /* This line assigns the value of Param1 + 10 to the MyInt variable. */
        log("MyInt is now set to:" $ MyInt);
        /* This line logs the message "MyInt is now set to:" followed by the value of the MyInt variable. */
        if(Param2)
            /* This line starts an if statement and checks if the Param2 parameter is true. */
            log("Param2 is true!");
            /* This line logs the message "Param2 is true!" if the if statement condition is met. */
        else
            /* This starts an else statement if the Param2 parameter is not true. */
            log("Param2 is false!");
            /* This line logs the message "Param2 is false!" if the else statement is reached. */
        return MyInt;
        /* This line returns the value of the MyInt variable. */
    /* This ends the MyFunction function. */
    
    /* This is a function declaration for a function called "MyOtherFunction". */
    function MyOtherFunction(vector ParamVector, rotator ParamRot)
        local float MyFloat;
        /* This is a local variable declaration for a float variable called "MyFloat". */
        MyFloat = ParamVector.Z * 0.5;
        /* This line assigns the value of the Z component of the ParamVector parameter multiplied by 0.5 to the MyFloat variable. */
        log("MyFloat is now set to:" $ MyFloat);
        /* This line logs the message "MyFloat is now set to:" followed by the value of the MyFloat variable. */
        ParamRot.Yaw += MyFloat;
        /* This line adds the value of MyFloat to the Yaw component of the ParamRot parameter. */
        return ParamRot;
        /* This line returns the updated ParamRot parameter. */
    /* This ends the MyOtherFunction function. */

/* This marks the end of the MyClass class. */