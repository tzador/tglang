class WeaponProjectile extends Actor
    placeable;

/////////////////////////////////////////////////////////////////////////////
// This is a complex and long code snippet for creating a weapon projectile
// in the programming language UNREALSCRIPT. It is a subclass of the Actor 
// class and has the placeable property.
/////////////////////////////////////////////////////////////////////////////

var Sound FireSound;
var Texture MuzzleFlash;
var float FireRate;
var bool bLoopMuzzleFlash;
var float RadiusDamage;
var float ExplosionRadius;
var Material ExplosionDecal;

var ParticleSystem ExplosionTemplate;

struct MyStruct
{
    var Vector Location;
    var Unit VectorForward;
};

// Spawns the weapon projectile and initializes its properties
function SpawnProjectile()
{
    local ParticleSystemComponent ParticleComponent;
    local MyStruct OffsetStruct;

    // Spawn the projectile and attach it to the owner actor
    ProjectilePawn = Spawn(class'Projectile',, SpawnLocation, Rot, ProjectileOwner,,,None,,);
   SetOwner(Base.Turret.AttachedTo());

    // Set the location of the projectile based on the missile barrel
    OffsetStruct.Location = MissileBarrelInfo.MissilePos;
    OffsetStruct.VectorForward = Base.Turret.Mesh.PlayerViewpoint;

    // Attach the projectile to the missile barrel
    SetLocation(MissileBarrelInfo.MissilePos);
    SetRotation(MissileBarrelInfo.MissileRot);
    AttachTo(Base.Turret, 'MissileBarrel');
    SetScale(MissileBarrelInfo.Scale);

    // Set the muzzle effect
    SetMuzzleEffect();
    if (!IsSameArsenal(Projectile))    // for weapons that aren't missiles
    {
        // offset to the start ypos
        OffsetStruct.Location.Z = MissileBarrelInfo.MuzzleOffset;
        GotoState('Firing');
        GotoState('Default');
    }

    if (bLoopMuzzleFlash)
    {
        MuzzleFlashTimer = MuzzleFlashTimer +0.01;
        if (MuzzleFlashTimer >= MuzzleFlashStatus)
        {
            if (ProjectilePawn != none && ProjectilePawn.TheWeapon != none && !Woig)
            {
                ProjectilePawn.MeshInstance.SetTopMaterial(0, ProjectilePawn.OriginalMat);
            }
        }
    }
}

// Sets the muzzle effect for the projectile
function SetMuzzleEffect()
{
    if (MuzzleFlash != none && MuzzleFlash != MuzzleFlash2)
    {
        if (!IsNetMode()) //non net physics based particle sys
        {
            if (MuzzleFlash2 != none)
            {
                oldffm_opmat = MeshInstance.GetTopMaterial(0);
                MuzzleFlash2Timer = MuzzleFlash2Status;
                bQuakeWeaponFlash = ProjectilePawn.bStateChange;
                if (Guce.indexOf(MuzzleFlash) != -1)
                {
                    GreDelete(MuzzleFlash,MuzzleFlash2);
                }
                if (MuzzleFlash != none)
                {
                    MeshInstance.SetTopMaterial(0, MuzzleFlash2);
                }
            }

            if (TrailLightningIndex != none)
            {
                projectilePostLipPostex.TexCoords0 = TrailLightningDistanceMuzzleOffset;
            }
        }
    }
}