class AttackComponent extends ActorComponent
// This class represents a component that allows an actor to attack enemies.
    placeable editinlinenew
    // This makes the component placeable and editable in the editor.

    var() vector targetLocation
    // This variable holds the current target location for the attack.
    
    struct AttackEffect
    // This struct represents an attack effect.
        var name attackName
        // This variable holds the name of the attack.
        var float damage
        // This variable holds the amount of damage the attack does.
    
    var array<AttackEffect> attacks
    // This variable holds a list of possible attacks.
    
    simulated function ExecuteAttack(name attackName)
    // This function is responsible for executing an attack.
        local array<AttackEffect> relevantAttacks
        // This array stores the relevant attacks based on the given attackName.
        for(attacks.length, i)
        // This loop goes through all the attacks.
            if(attackName == attacks[i].attackName)
            // This checks if the attack name matches the name of the current attack.
                relevantAttacks.add(attacks[i])
                // This adds the current attack to the list of relevant attacks.
            
        local vector impactLocation
        // This vector stores the location where the attack will hit.
        impactLocation = TraceImpact(targetLocation)
        // This calls the TraceImpact function to determine the impact location.
        
        local Actor attackTarget
        // This variable stores the target of the attack.
        attackTarget = GetAttackTarget(impactLocation)
        // This calls the GetAttackTarget function to determine the target.
        
        if(attackTarget != None)
        // This checks if the attack has a valid target.
            for(relevantAttacks.length, i)
            // This loop goes through all the relevant attacks.
                ApplyDamage(attackTarget, relevantAttacks[i].damage)
                // This calls the ApplyDamage function to apply damage to the target.
            
    simulated function vector TraceImpact(vector target)
    // This function determines the location where the attack will hit.
        local trace impactTrace
        // This trace stores information about the impact.
        local vector impactLocation
        // This vector stores the impact location.
        
        impactTrace = world.Trace(targetLocation, target)
        // This calls the Trace function to determine the impact information.
        
        if(impactTrace == none || impactTrace.OutObject != none)
        // This checks if there is an obstacle in between the target location and the actual impact.
            impactLocation = impactTrace.HitLocation
            // If there is an obstacle, the impact location is set to the location where the obstacle is hit.
        else
            impactLocation = impactTrace.End
            // If there is no obstacle, the impact location is set to the end location of the trace.
        
        return impactLocation
        // The impact location is returned.
    
    simulated function Actor GetAttackTarget(vector impactLocation)
    // This function determines the target of the attack.
        local Actor attackTarget
        // This variable stores the target of the attack.
        attackTarget = world.FindActor(impactLocation)
        // This calls the FindActor function to find the actor at the impact location.
        
        return attackTarget
        // The attack target is returned.
    
    simulated function ApplyDamage(Actor target, float damage)
    // This function applies damage to the given target.
        local DamageType damageType
        // This variable stores the type of damage to be applied.
        damageType = new(class'DamageType_Physical')
        // This creates a new instance of the physical damage type.
        
        target.TakeDamage(damage, none, targetLocation, damageType)
        // This calls the TakeDamage function to apply damage to the target.
        
class DamageType_Physical extends DamageType
// This class represents the physical damage type.
    placeable
 
defaultproperties
    {
        DamageType = DMG_Physical
        // This sets the type of damage this class represents.
        FriendlyName = "Physical Damage"
        // This sets the friendly name of this damage type.
    }