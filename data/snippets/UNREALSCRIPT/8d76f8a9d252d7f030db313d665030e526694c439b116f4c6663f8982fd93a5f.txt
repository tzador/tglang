//This code snippet generates a custom player controller class with various functions and variables
class CustomPlayerController extends PlayerController;      //Declaring class and inheritance
  config(string CoopDesc, AutoDuck, CachedMaxDist);        //Declaring config variables

  var() interchangeable const playerLevel;       //Declaring constant level variable for player
  var() transient array<CustomPlayerInput> inputs;       //Declaring transient input array for custom player input

  #pragma export CoopEndgameMap(string inMap);       //Declaring pragma function to export endgame map

  function SetPlayerLevel(int newLevel)            //Declaring function to set player's level
  {
    playerLevel = newLevel;
    DisplayDebug("Player level set to: $newLevel",, COOP);
  }
  function ExecuteCommand(string cmd, string params)           //Declaring function to execute custom command with optional parameters
  {
    if(cmd == "respawn")
      Unpause();
    if(cmd == "setlevel" && params != "")
      SetPlayerLevel(params);
  }

  simulated event PostMasterMapChange()             //Declaring simulated event to revert to default player level upon map change
  {
    SetPlayerLevel(1);
  }

  auto plainlock(parent)              //Declaring auto function to change player's lock-on system to a plain version
  {
    local PlayerController PC;
    PC.PlainLock(parent);
  }

  defaultproperties            //Declaring default properties for the class
  {
    CoopDesc="Custom Co-op Controller Class";
    AutoDuck=True;
    CachedMaxDist=20000;

    playerLevel=1;
    inputs(0)=ConstRot(ReferenceFrame,0,0);
    inputs(1)=ConstRot(StanceAwareness,0,0);
  }