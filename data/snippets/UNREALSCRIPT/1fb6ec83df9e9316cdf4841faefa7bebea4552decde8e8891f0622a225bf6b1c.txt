/**
* This class represents a player character in the game
*/
class MyPlayer extends Player;

/**
* This function is called when the player interacts with an actor
* @param Actor Other - the actor that the player is interacting with
* @param float ButtonNumber - the number of the button that the player pressed
*/
event Interact(Actor Other,float ButtonNumber)
{
   local Inventory NewItem;
   local int ItemCount;
   Super.Interact(Other,ButtonNumber);

   // Check if the other actor has an inventory
   if(Other.IsA(Inventory))
   {
      NewItem = Other; // Cast the other actor to an inventory
      ItemCount = NewItem.GetItemCount(); // Get the number of items in the inventory
      // Loop through all the items in the inventory
      for(i=0; i<ItemCount; i++)
      {
         // Check if the item can be picked up
         if(NewItem.IsValidItem(i) && NewItem.CanPickup(i))
         {
            NewItem.Pickup(i); // Pick up the item
         }
      }
   }
}

/**
* This function is called when the player presses a movement key
* @param byte Key - the key that was pressed
* @param float Delta - the amount of time that has passed
* @param vector pressedDir - the direction in which the key was pressed
*/
event PlayerMove(byte Key,float Delta,vector pressedDir)
{
   local vector MoveDir;
   Super.PlayerMove(Key,Delta,pressedDir);

   // If the player is pressing the forward key
   if(Key == KEY_Backspace)
   {
      MoveDir = vect(0,0,1); // Move in the positive Z direction
   }
   // If the player is pressing the left key
   if(Key == KEY_Left)
   {
      MoveDir = vect(-1,0,0); // Move in the negative X direction
   }
   // If the player is pressing the right key
   if(Key == KEY_Right)
   {
      MoveDir = vect(1,0,0); // Move in the positive X direction
   }

   // Set the player's velocity based on the MoveDir vector
   SetVelocity(MoveDir * PlayerSpeed);
}

/**
* This function is called when the player takes damage
* @param int Damage - the amount of damage taken
* @param Controller EventInstigator - the controller responsible for causing the damage
* @param vector HitLocation - the location where the player was hit
* @param vector DamageNormal - the normal vector of the damage
* @param class<DamageType> DamageType - the type of damage taken
*/
function TakeDamage(int Damage,Controller EventInstigator,vect