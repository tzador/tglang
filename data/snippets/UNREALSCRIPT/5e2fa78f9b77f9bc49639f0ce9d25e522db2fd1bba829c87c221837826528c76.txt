//
// This is a complex code snippet written in UnrealScript
//

// Declaring and defining a class called 'Character'
class Character extends Actor
	// Defining a property for the character's name
	protected var() const name as string;

	// Defining a property for the character's health
	protected var() const health as int;

	// Defining a property for the character's mana
	protected var() const mana as float;

	// Defining a property for the character's experience points
	protected var() const experiencePoints as int;

	// Defining a property for the character's current weapon
	protected var() const currentWeapon as Weapon;

	// Defining a property for the character's inventory
	protected var() const inventory as array<Item>;

	// Constructor for the Character class
	function Character()
		// Setting the default values for the properties
		name = "John Doe";
		health = 100;
		mana = 50.0;
		experiencePoints = 0;
		currentWeapon = none;
		inventory = new array<Item>;

	// Function to equip a weapon for the character
	function EquipWeapon(Weapon equipedWeapon)
		// Checking if the character already has a weapon equipped
		if (currentWeapon != none)
			// Adding the current weapon to the inventory
			inventory.Add(currentWeapon);
		// Equipping the new weapon
		currentWeapon = equipedWeapon;

	// Function to use the character's currently equipped weapon
	function UseWeapon()
		// Checking if the character has a weapon equipped
		if (currentWeapon != none)
			// Using the weapon
			currentWeapon.Use();

	// Function to add experience points to the character
	function AddExperience(int experience)
		// Incrementing the experience points
		experiencePoints += experience;
		// Checking if the character has leveled up
		if (experiencePoints > 100)
			// Leveling up the character
			LevelUp();

	// Function to level up the character
	function LevelUp()
		// Adding a random amount to the character's health and mana
		health += RandomInt(10,20);
		mana += RandomFloat(5.0,10.0);
		// Doubling the character's experience points required for the next level
		experiencePoints *= 2;

// Declaring and defining a subclass of Character called 'PlayerCharacter'
class PlayerCharacter extends Character
	// Defining a property for the player's current score
	protected var() const currentScore as int;
	// Defining a property for the player's current location
	protected var() const currentLocation as Vector;

	// Constructor for the PlayerCharacter subclass
	function PlayerCharacter()
		// Calling the constructor of the super class
		super.Character();

	// Function to move the player to a new location
	function MoveTo(Vector newLocation)
		// Setting the player's current location to the new location
		currentLocation = newLocation;
		// Adding 10 points for moving to a new location
		currentScore += 10;
		// Checking if the player has reached a new high score
		if (currentScore > HighScore)
			// Updating the high score
			HighScore = currentScore;

// Declaring and defining a subclass of Character called 'EnemyCharacter'
class EnemyCharacter extends Character
	// Defining a property for the enemy's attack power
	protected var() const attackPower as int;
	// Defining a property for the enemy's defense power
	protected var() const defensePower as int;

	// Constructor for the EnemyCharacter subclass
	function EnemyCharacter()
		// Calling the constructor of the super class
		super.Character();

	// Function to attack the player
	function Attack(PlayerCharacter target)
		// Calculating the damage by subtracting the enemy's attack power from the player's health
		int damage = attackPower - target.health;
		// Checking if the damage is greater than or equal to 0
		if (damage >= 0)
			// Updating the player's health
			target.health -= damage;
		// If the damage is less than 0, it means the player has successfully defended
		else
			// Adding 20 points for successfully defending against the enemy's attack
			target.currentScore += 20;