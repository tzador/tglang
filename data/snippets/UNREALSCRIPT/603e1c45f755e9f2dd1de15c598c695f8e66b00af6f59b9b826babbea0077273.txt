class NewActor expands Actor;
/*
    This is a base class for a new actor
    It inherits from the built-in Actor class
*/

var float Health;
// Variable that stores the health of the actor

var() int Damage;
/*
    Variable that represents how much damage the actor can inflict
    The 'var()' tag specifies that this variable can be modified in the editor
*/

var bool bIsDead;
// Boolean variable to track if the actor is dead or alive

const int MAX_HEALTH = 100;
// Constant that defines the maximum health for the actor

event TakeDamage(int DamageAmount, Actor InstigatedBy)
{
    if (DamageAmount > 0)
    {
        Health -= DamageAmount;
        // Reduce health based on the amount of damage taken
    }

    if (Health <= 0)
    {
        bIsDead = true;
        // If health reaches 0, set the 'bIsDead' variable to true
    }
}

function bool CanBeDamaged(Actor Other)
{
    if (Other.PlayerReplicationInfo != None)
    {
        return true;
        // Actors with a valid 'PlayerReplicationInfo' can be damaged
    }
    else
    {
        return false;
        // Actors without a 'PlayerReplicationInfo' cannot be damaged
    }
}

defaultproperties
{
    Health=MAX_HEALTH
    // Set the default value for the 'Health' variable to the maximum value

    Damage=20
    // Set the default value for the 'Damage' variable to 20
}