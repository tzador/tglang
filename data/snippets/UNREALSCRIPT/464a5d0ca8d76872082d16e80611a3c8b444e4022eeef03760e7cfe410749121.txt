// This code snippet is a class declaration for a player character in a game

class PlayerCharacter extends Actor // Declares a class named PlayerCharacter that extends the Actor class
	placeable; // Allows the player character to be placed in a level

var() int Health; // Declares an integer variable named Health that can be accessed by other classes

var float Speed default 500; // Declares a float variable named Speed with a default value of 500

event PreBeginPlay() // Declares an event that is called before the player character begins play
{
	Health = 100; // Sets the initial value of Health to 100
}

state Alive // Declares a state named Alive
{
	begin: // Marks the beginning of the state

	// Code for controlling player movement
	local Vector Movement; // Declares a local variable named Movement of type Vector
	
	if (Pawn(Controller.Pawn) != None) // Checks if the player has a controller
	{
		Movement = GetMovementInput(); // Gets the player's movement input
		Movement += Vector(0, 0, 1) * Speed * WorldInfo.TimeSeconds; // Applies the input to the player's movement
	}

	Pawn(Controller.Pawn).SetLocation(Pawn(Controller.Pawn).Location + Movement); // Sets the player's location based on the movement

	// Code for taking damage and dying
	takeDamage(int DamageAmount, Controller EventInstigator, vector HitLocation, vector Momentum, class<class DamageType> DamageType)
	{
		Health -= DamageAmount; // Decreases the player's health by the damage amount
		
		if (Health <= 0) // Checks if the player's health reaches 0 or below
		{
			goto 'Dead'; // Jumps to the 'Dead' state
		}
	}

}

state Dead // Declares a state named Dead
{
	begin: // Marks the beginning of the state

	Pawn(Controller.Pawn).SetLocation(99999, 99999, 99999); // Sets the player's location to a faraway place, effectively killing them

	// Code for respawning the player
	event PostEditChangeProperty(struct PropertyInfo StructProperty)
	{
		if (StructProperty.PropertyName == 'PlayerStart') // Checks if the player has been placed on a PlayerStart object
		{
			goto 'Alive'; // Jumps to the 'Alive' state
		}
	}
}

defaultproperties // Declares the default properties of the class
{
	Begin Object Name=CollisionCylinder // Specifies the name and type of a collision cylinder component
		CollisionRadius=32.0 // Sets the collision radius
		CollisionHeight=72.0 // Sets the collision height
	End Object // Closes the object declaration

	Components.Add(CollisionCylinder); // Adds the collision cylinder component to the player character

	Begin Object Name=MeshComponent // Specifies the name and type of a mesh component
		StaticMesh=StaticMesh'Engine.Default__Pawn:Mesh' // Sets the static mesh of the component
		ReplacementPrimitive=None // Disables a primitive used for collision detection
	End Object // Closes the object declaration

	// SetMesh() function is called in defaultproperties to set the mesh to a static mesh generated by the engine

	Begin Object Name=PlayerController // Specifies the name and type of a player controller
		PlayerCamera=Class'Engine.Camera' // Sets the player camera to the default camera class
	End Object // Closes the object declaration

	bCanCrouch=True // Allows the player to crouch
	bCanFly=True // Allows the player to fly
	bCanJump=True // Allows the player to jump

	bFindGroundPlane=True // Enables finding a suitable ground for the player to stand on
	bMaintainBottomOfCollision=True // Enables maintaining the bottom of the player's collision cylinder when standing on a slope
	bCrouchMovesModifyCollision=True // Enables modifying the collision cylinder when crouching to fit in tight spaces

	Begin Object Name=CylinderComponent // Specifies the name and type of a collision cylinder component attached to the player
		CollisionRadius=32.0 // Sets the collision radius
		CollisionHeight=72.0 // Sets the collision height
	End Object // Closes the object declaration
}