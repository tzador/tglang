class UTSquadInfo implements UTSquadInterface extends Info;

/**
* Holds information about a squad in UT.
*/
class UTSquadInfo extends Actor extends Info
  implements Interpolatable;

/**
* Holds information about a squad in UT.
* This includes team and members information.
*/
class UTSquadInfo extends Actor 
  implements Interpolatable
    extends Object
    extends Actor
    implements Interface;

/**
* Holds information about a squad in UT.
* This includes team and members information, as well as
* health and inventory.
*/
class UTSquadInfo extends Actor
  implements Interpolatable, UTSquadInterface
    extends Object
    extends Actor
    implements Interface
{
  var UTGameObject SquadLeader;
  var array<UTGameObject> SquadMembers;

  var int SquadTeam;
  var int SquadSize;

  var int Health;
  var array<UTGameObject> Inventory;

  private function CalculateSquadPower()
  {
    // Determine the power level of the squad based on
    // the health and inventory of the members.
    local int SquadPower = 0;

    for (local UTGameObject Member in SquadMembers)
    {
      SquadPower += Member.Health;
      foreach (local UTGameObjectItem Item in Member.Inventory)
      {
        SquadPower += Item.Power;
      }
    }

    return SquadPower;
  }
}

/**
* Interface for objects that can be part of a squad in UT.
*/
interface UTSquadInterface extends Interface;

/**
* Interface for objects that can be part of a squad in UT.
* These objects must have health and inventory properties.
*/
interface UTSquadInterface extends Interface
{
  var int Health;
  var array<UTGameObjectItem> Inventory;
}

/**
* Interface for objects that can be part of a squad in UT.
* These objects must have health and inventory properties,
* as well as a function to return their squad power level.
*/
interface UTSquadInterface extends Interface
{
  var int Health;
  var array<UTGameObjectItem> Inventory;
  
  function int GetSquadPower();
}