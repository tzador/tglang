#=============================================================================
# CubeActor
#
# This is an example class that represents a cube object in the game.
# The cube can be moved and rotated by the player in the game.
#=============================================================================

class CubeActor extends Actor;

/** The size of the cube */
var float CubeSize;

/** The color of the cube */
var Color CubeColor;

/** The position of the cube in the game world */
var Vector CubePosition;

/** The rotation of the cube in the game world */
var Rotator CubeRotation;

/**
 * Function that initializes the cube by setting its size and color, and placing it at a given position.
 *
 * @param size  The size of the cube
 * @param color The color of the cube
 * @param position The position of the cube in the game world
 */
function InitializeCube(float size, Color color, Vector position)
{
    CubeSize = size; // set the cube's size
    CubeColor = color; // set the cube's color
    CubePosition = position; // set the cube's position

    // Create a new static mesh component for the cube
    local StaticMeshComponent CubeMesh;
    CubeMesh = Spawn(class'StaticMeshComponent',self);
    
    // Set the static mesh for the cube
    CubeMesh.SetStaticMesh(StaticMesh'CubeMesh'); // assuming there is a static mesh named CubeMesh
    
    // Scale the cube's mesh to the given size
    CubeMesh.SetRelativeScale3D(Vector(size, size, size)); 
}

/**
 * Function that rotates the cube by a given angle around the X-axis.
 *
 * @param angle The angle in degrees to rotate the cube by
 */
function RotateCubeByAngleX(float angle)
{
    // Calculate the new rotation for the cube
    local Rotator newRot;
    newRot = rot(CubeRotation.Pitch + angle, CubeRotation.Yaw, CubeRotation.Roll);
    
    // Set the new rotation for the cube
    CubeRotation = newRot;
}

/**
 * Function that moves the cube to a given position by lerping its current position.
 *
 * @param targetPosition The target position to move the cube to
 * @param speed The speed at which to move the cube
 */
function MoveCubeToPosition(Vector targetPosition, float speed)
{
    // Lerp the cube's current position to the target position
    CubePosition = Lerp(CubePosition, targetPosition, speed);
}

/**
 * Event called when the cube overlaps with another actor.
 * This can happen when the player collides with the cube.
 *
 * @param otherActor  The other actor that the cube is overlapping with
 */
function OverlappingCube(Actor otherActor)
{
    // Do something when the cube overlaps with another actor
    // For example, play a sound or trigger an event
    otherActor.PlaySound(sound'CubeCollisionSound'); // assuming there is a sound named CubeCollisionSound
}