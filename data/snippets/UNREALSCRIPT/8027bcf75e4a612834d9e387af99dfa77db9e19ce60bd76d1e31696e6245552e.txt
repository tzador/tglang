/**
* This is a complex code snippet in UNREALSCRIPT that creates a character class with various attributes and functions
*/
class MyCharacter extends UDKPawn;

/* Attributes */
var bool bIsInCombat; // Indicate whether the character is in combat
var int Health; // Stores the current health of the character
var float WalkSpeed; // Determines the character's walking speed
var float RunSpeed; // Determines the character's running speed

/* Functions */



/**
* Event called when the character takes damage
*
* @param Int Damage - Amount of damage taken
* @param Controller EventInstigator - Controller that caused the damage
* @param Vector HitLocation - Location where the damage occurred
* @param Vector Momentum - Amount of force applied from the hit
* @param class<DamageType> DamageType - Type of damage taken
* @param Actor DamageCauser - Actor that caused the damage
*
* @return None
*/
event TakeDamage(int Damage, Controller EventInstigator, optional Vector HitLocation, optional Vector Momentum, optional class<DamageType> DamageType, optional Actor DamageCauser)
{
    Super.TakeDamage(Damage, EventInstigator, HitLocation, Momentum, DamageType, DamageCauser);

    // Reduce health by the damage amount
    Health -= Damage;

    // Check if health is below 0 and set bIsInCombat to true if so
    if(Health < 0)
    {
        bIsInCombat = true;
    }
}

/**
* Function that sets the character's walk and run speeds
*
* @param Float NewWalkSpeed - New walking speed
* @param Float NewRunSpeed - New running speed
*
* @return None
*/
function SetSpeeds(float NewWalkSpeed, float NewRunSpeed)
{
    // Set the new walk and run speeds
    WalkSpeed = NewWalkSpeed;
    RunSpeed = NewRunSpeed;
}

/**
* Function that makes the character start running
*
* @param Float SA_RunRate - Rate of acceleration while running
*
* @return None
*/
function Run(float SA_RunRate)
{
    // Multiply the character's movement speed by the SA_RunRate
    Velocity *= SA_RunRate;
}

/**
* Function that makes the character stop running
*
* @param Float SA_SlowDown - Rate of deceleration while stopping
*
* @return None
*/
function StopRunning(float SA_SlowDown)
{
    // Divide the character's movement speed by the SA_SlowDown
    Velocity /= SA_SlowDown;
}

/**
* Function that makes the character jump
*
* @param Float JumpHeight - Height of the jump
*
* @return None
*/
function Jump(float JumpHeight)
{
    // Set the character's Z-axis velocity to the JumpHeight
    Velocity.Z = JumpHeight;
}