# Sets the default viewport size for the game
var const int DEFAULT_VIEWPORT_SIZE=1024;

# Struct definition for character stats
struct CharacterStats
{
	var const int Health;
	var const int Stamina;
	var const int AttackPower;
	var const int Defense;
	var const int Speed;

	# Constructor function for struct
	function CharacterStats(int inHealth, int inStamina, int inAttackPower, int inDefense, int inSpeed)
	{
		Health = inHealth;
		Stamina = inStamina;
		AttackPower = inAttackPower;
		Defense = inDefense;
		Speed = inSpeed;
	}
}

# Base class for all characters in the game
class Character extends Object
{
	# Variables for character's name and current stats
	var const string Name;
	var CharacterStats Stats;

	# Constructor function for character
	function Character(string inName, int inHealth, int inStamina, int inAttackPower, int inDefense, int inSpeed)
	{
		Name = inName;
		Stats = CharacterStats(inHealth, inStamina, inAttackPower, inDefense, inSpeed);
	}

	# Function to check if the character is alive
	function bool IsAlive() const
	{
		# If character's health is greater than 0, they are alive
		return Stats.Health > 0;
	}

	# Function to attack another character
	function Attack(Character Other)
	{
		if (IsAlive())
		{
			# The attack power of the attacking character decreases the health of the target character
			Other.Stats.Health -= Stats.AttackPower;
		}
	}
}

# Subclass for a player-controlled character
class PlayerCharacter extends Character
{
	# Additional variable for player's level
	var const int Level;

	# Constructor function for player character
	function PlayerCharacter(string inName, int inHealth, int inStamina, int inAttackPower, int inDefense, int inSpeed, int inLevel)
	{
		super(inName, inHealth, inStamina, inAttackPower, inDefense, inSpeed);
		Level = inLevel;
	}

	# Function to level up the player character
	function LevelUp()
	{
		# Increase all stats by 5 and level by 1
		Stats.Health += 5;
		Stats.Stamina += 5;
		Stats.AttackPower += 5;
		Stats.Defense += 5;
		Stats.Speed += 5;
		Level += 1;
	}
}

# Subclass for an enemy character
class EnemyCharacter extends Character
{
	# Additional variable for enemy's loot drops
	var const string LootDrops[5];

	# Constructor function for enemy character
	function EnemyCharacter(string inName, int inHealth, int inStamina, int inAttackPower, int inDefense, int inSpeed, string inLootDrop1, string inLootDrop2, string inLootDrop3, string inLootDrop4, string inLootDrop5)
	{
		super(inName, inHealth, inStamina, inAttackPower, inDefense, inSpeed);
		LootDrops[0] = inLootDrop1;
		LootDrops[1] = inLootDrop2;
		LootDrops[2] = inLootDrop3;
		LootDrops[3] = inLootDrop4;
		LootDrops[4] = inLootDrop5;
	}

	# Function to drop loot when defeated
	function DropLoot()
	{
		# Returns a randomly chosen loot drop from the loot array
		return LootDrops[Rand(LootDrops.Length)];
	}
}

# Creating a player character and an enemy character
var Player = PlayerCharacter("John", 100, 50, 20, 10, 15, 1);
var Enemy = EnemyCharacter("Skeleton", 50, 0, 10, 5, 20, "Gold", "Sword", "Shield", "Potion", "Coin");

# Player attacks the enemy
Player.Attack(Enemy);

# Checks if enemy is still alive
if (Enemy.IsAlive())
{
	# Enemy attacks back
	Enemy.Attack(Player);

	# Checks if player is still alive
	if (Player.IsAlive())
	{
		# Outputs the name and health of both characters
		`Name: {Player.Name} | Health: {Player.Stats.Health} | {Enemy.Name} | Health: {Enemy.Stats.Health}`

		# Player levels up
		Player.LevelUp();

		# Outputs the level of the player
		`Level: {Player.Level}`
	}
}