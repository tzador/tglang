//Declaring a class for a player character
class MyCharacter extends Info;

//Pre-Cache the animations used by the character
function PreCacheAnimations()
{
    super.PreCacheAnimations();

    `Begin Object Class=SkeletalMeshComponent Name=SkeletalMeshComponent0
        SkeletalMesh=SkeletalMesh'PlayerMesh_Pacific.PlayerMesh_Pacific'
        AnimSets(0)=AnimSet'PlayerAnims_Pacific.PlayerAnims_Pacific'
        AnimTreeTemplate=AnimTree'PlayerAnims_Pacific.AnimTree'
    End Object`

    `Components.Add(SkeletalMeshComponent0)`
}

//Define the behavior tree for the character's AI
static function `Begin Object Class=BehaviorTree Name=AIControllerBehaviorTree`
    `Begin Object Class=BTCompositeNode Name="RootNode"`
        mName="Root"
        `Begin Object Class=BTComposite_NodeSequence Name="BT_Sequence0"`
            `mName="SomeBehaviorSequence"`
            `Begin Object Class=BTTask_SpawnActor Name="BTTask_SpawnActor"`
                `ActorClass="Player_SpawnActor"`
                `Execute=true`
            `End Object`
        `End Object`
    `End Object`
End Object`

//Method for handling player input
function ProcessMove(float DeltaTime, vector NewAccel, eDoubleClickDir DoubleClickMove, rotator NewRotation, eControlMask ControlMask)
{
    MyController(Controller).GetAimNewRotation(Rotation);
    Super.ProcessMove(DeltaTime, NewAccel, DoubleClickMove, Rotation, ControlMask);
}

//Function for handling player input keys
event `bool ProcessPlayerInput(input Event, float DeltaTime, PlayerInput Input)
{
    local Vector Look;
    local Rotation MyRotation;
    local Rotation BaseEyeRotation;

    if(bReadyToMove && Pawn.bCollideWorld)
    {
        GetAxes();
    }

    Super.ProcessPlayerInput(Event, DeltaTime, Input);
    return true;
}`