class UTRS : UActorComponent
/*This code snippet is a class declaration for a new UnrealScript component called UTRS.
It inherits from the UActorComponent class.*/
  native function float GetHealth();
  /*This line declares a native function called GetHealth, which will return a float value.
  Native functions are defined by the engine and can be accessed from within the class.*/
  var() float MaxHealth;
  /*This line declares a variable called MaxHealth, which is accessible from outside the class
  and is of type float.*/
  var() float CurrentHealth;
  /*This line declares a variable called CurrentHealth, which is accessible from outside the class
  and is of type float.*/
defaultproperties
/*This block is used to define default values for the class's properties.*/
{
  MaxHealth=100.0
  /*Sets the default value for MaxHealth to be 100.0.*/
  CurrentHealth=MaxHealth
  /*Sets the default value for CurrentHealth to be equal to MaxHealth.
  This will be useful for initializing the component's health at the start of each game.*/
}

/**
* @desc This function will be called to slowly decrease the health of the component.
* @return The new, updated health value.
* @param Damage The amount of damage to be taken.
*/
native function Damage(float Damage) return float;
/*This line declares another native function called Damage, which takes in a float value for damage
and will return a float value for the updated health.*/
class TRSActor extends UActor
/*This line declares a new class called TRSActor, which inherits from the UActor class.*/
  var() UTRS MyTRSComponent;
  /*This line declares a variable called MyTRSComponent, which will hold an instance of the UTRS component.*/
  event TakeDamage(int Damage, Pawn instigatedBy, Vector HitLocation, Vector Momentum, class<DamageType> DamageType)
  /*This line declares an event function called TakeDamage, which will be triggered when the actor is damaged.
  It takes in several parameters, including the amount of damage, the pawn who caused the damage, and more.*/
  {
    local float NewHealth;
    /*This line declares a local variable called NewHealth, which will hold the updated health value.*/
    NewHealth = MyTRSComponent.Damage(Damage);
    /*This line calls the Damage function on the MyTRSComponent variable, passing in the damage amount as a parameter.
    The returned value is then stored in the NewHealth variable.*/
    if(NewHealth <= 0)
    /*This line checks if the NewHealth variable is less than or equal to 0, indicating that the component's health is depleted.*/
    {
      Destroy();
      /*If the health is depleted, this line calls the Destroy function on the actor, causing it to be removed from the game.*/
    }
  }
defaultproperties
/*This block is used to define default values for the class's properties.*/
{
  Begin Object Class=DynamicLightEnvironmentComponent Name=MyLight
    /*This block begins the definition of a new object of class DynamicLightEnvironmentComponent, called MyLight.*/
    Type=0
    /*This line sets the Type property of the MyLight object to 0, indicating that it is a stationary light.*/
  End Object
  /*This line ends the object definition.*/
  MyTRSComponent=class 'UTRS'
  /*This line sets the MyTRSComponent variable to be an instance of the UTRS class.*/
}