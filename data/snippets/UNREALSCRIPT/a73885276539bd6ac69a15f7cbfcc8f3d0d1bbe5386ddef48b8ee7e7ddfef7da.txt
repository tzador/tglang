/// Holds information about a weapon in the game
class WeaponInfo extends Actor;

/// The name of the weapon
var(name="WeaponName", editconst) const string WeaponName;

/// The damage that this weapon deals
var(name="Damage", editinline) float Damage;

/// The rate of fire of the weapon
var(name="RateOfFire", editinline) float RateOfFire;

/// Indicates if the weapon is currently reloading
var bool bReloading;

/// Indicates if the weapon is currently equipped
var bool bEquipped;

/// The mesh component of the weapon
var mesh MeshComponent;

/// Constructor
function WeaponInfo() {}

/// Called when the weapon is equipped by a player
/// @param instigator  The pawn that equipped the weapon
simulated event OnEquip(Pawn Instigator);

/// Called when the weapon is unequipped by a player
/// @param instigator  The pawn that unequipped the weapon
simulated event OnUnEquip(Pawn Instigator);

/// Called when the weapon is fired
/// @param instigator  The pawn that fired the weapon
simulated event OnFire(Pawn Instigator);

/// Called when the weapon is reloaded
/// @param instigator  The pawn that reloaded the weapon
simulated event OnReload(Pawn Instigator);

/// Sets the weapon's mesh component
/// @param meshComponent  The mesh component to assign
function SetMeshComponent(mesh MeshComponent)
{
    MeshComponent = mesh;
}

/// Gets the weapon's mesh component
/// @return The mesh component
function GetMeshComponent() return MeshComponent;

/// Function that handles reloading logic
/// @param instigator  The pawn that reloaded the weapon
function Reload(Pawn Instigator)
{
    /// Check if weapon is already reloading
    if (bReloading)
    {
        /// If yes, display an error message and return
        log("Weapon is already reloading.");
        return;
    }

    /// Check if weapon is currently equipped
    if (bEquipped)
    {
        /// If yes, start reloading
        bReloading = true;
        log("Reloading weapon...");
        Delay(RateOfFire);
        /// After delay, set damage back to full and indicate that reloading is complete
        Damage = 100.0f;
        bReloading = false;
        log("Weapon reloaded.");
    }
    else
    {
        /// If not equipped, display an error message
        log("Weapon is not equipped.");
    }
}

/// A function that is called when the player presses the fire button
/// @param instigator  The pawn that fired the weapon
function Fire(Pawn Instigator)
{
    /// Check if weapon is currently equipped and not reloading
    if (bEquipped && !bReloading)
    {
        /// If yes, fire the weapon
        log(WeaponName @ " fires and deals " @ Damage @ " damage.");
        /// Decrease damage after each shot
        Damage -= 10.0f;
        /// If damage reaches 0, start reloading
        if (Damage <= 0.0f)
        {
            Reload(Instigator);
        }
    }
    else
    {
        /// If not equipped, display an error message
        log("Cannot fire, weapon is not equipped or is reloading.");
    }
}

/// A function that is called when the player presses the equip button
/// @param instigator  The pawn that equipped the weapon
function Equip(Pawn Instigator)
{
    /// Check if weapon is currently equipped
    if (!bEquipped)
    {
        /// If not, equip the weapon and display a message
        bEquipped = true;
        log(WeaponName @ " equipped.");
        OnEquip(Instigator);
    }
}

/// A function that is called when the player presses the unequip button
/// @param instigator  The pawn that unequipped the weapon
function UnEquip(Pawn Instigator)
{
    /// Check if weapon is currently equipped
    if (bEquipped)
    {
        /// If yes, unequip the weapon and display a message
        bEquipped = false;
        log(WeaponName @ " unequipped.");
        OnUnEquip(Instigator);
    }
}

/// A function that is called when the player presses the reload button
/// @param instigator  The pawn that reloaded the weapon
function PlayerReload(Pawn Instigator)
{
    /// Check if weapon is currently equipped and not reloading
    if (bEquipped && !bReloading)
    {
        /// If yes, call the Reload function
        Reload(Instigator);
    }
}