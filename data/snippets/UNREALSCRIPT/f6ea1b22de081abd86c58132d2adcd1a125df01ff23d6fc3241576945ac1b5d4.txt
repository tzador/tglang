/*
This is a complex code snippet in UNREALSCRIPT
It creates a new actor class that inherits from the base class 'Actor' and adds functionality for moving and rotating the actor
*/
class MyActor extends Actor
            placeable
            Components(StaticMeshComponent) //inherits component for attaching a static mesh to the actor
            /*Compiles the component and sets the default mesh and scale*/
            defaultproperties
            {
              Begin Object Name=StaticMeshComponent0
                   StaticMesh=StaticMesh'Table_SM.Mesh.Table_SM'
                   Scale3D=(X=0.8,Y=0.8,Z=0.8)
              End Object

              /*Adds a physics volume and sets properties */
              Components.Add(StaticMeshComponent0)
              Begin Object Class=SphereComponent Name=CollisionComponent
                        CollisionRadius=40.0;
              End Object
              Components.Add(CollisionComponent)
             
              /*Sets defaults for movement and rotation*/
              RotationRate=(Pitch=0,Yaw=100,Roll=200)
              bCollideActors=true
              Physics=bounce
             
              /*Defines function for moving the actor forward or backward based on input */
              function Move(float DeltaTime)
                        {
                              local vector ForwardVector;
                              local vector RightVector;
                              /*Converts rotation to a forward facing vector and accounts for pitch and roll*/
                              self.Rotation=(Pitch=(X=0,Y=0,Z=0));
                              ForwardVector = Self.Rotation.VectorY * -1;
                              /*Multiplies forward vector by input value to determine movement speed*/
                              ForwardVector = ForwardVector * 1000 * DeltaTime;
                              /*Moves the actor by adding velocity to its current location*/
                              self.Velocity = ForwardVector + self.Velocity;
                        }
             
              /*Defines function for rotating the actor based on input */
              function Rotate(float DeltaTime)
                        {
                              local vector RightVector;
                              /*Converts rotation to a right facing vector and accounts for pitch and roll*/
                              self.Rotation=(Pitch=(X=0,Y=0,Z=0));
                              RightVector = Self.Rotation.VectorX;
                              /*Multiplies right vector by input value to determine rotation speed*/
                              RightVector = RightVector * 1000 * DeltaTime;
                              /*Rotates the actor by adding rotation to its current rotation*/
                              self.Rotation = self.Rotation + Rotator(RightVector.Z * 3, 0, 0);
                        }
             
              /*Adds input bindings for moving and rotating */
              event PostBeginPlay()
                        {
                              CheckActorCollisionActors(bCollideActors);
                              Input.Key.BindAxis(click_MoveForward, Move);
                              Input.Key.BindAxis(click_MoveRight, Rotate);
                        }

              /*Resets the actor's location and rotation when the level restarts */
              event Reset()
                        {
                              /*Sets actor location to default spawn location*/
                              self.Location=Vector(0,0,0);
                              /*Sets actor rotation to default rotation*/
                              self.Rotation=bGameMapInfo.UnitFacing;
                        }
            }