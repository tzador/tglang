// This is a code snippet that creates a custom class in UnrealScript
// which inherits from the built-in 'Actor' class and contains various functions and properties

class CustomActor extends Actor
	// Storing an instance of the 'Engine' class for accessing engine functions
	Engine engine;
	// Storing default values for properties
	var const bool bIsDefault = true;
	// Storing private properties
	var private int PrivateInt = 5;
	// Storing public properties
	var public float PublicFloat;
	// Initializing the class
	function Initialize()
	{
		// Setting default value for public property
		PublicFloat = 10.0;
		// Initializing the 'Engine' instance
		engine = Engine(WorldInfo.Game);
	}
	// A function that adds two integers and returns the result
	function int Add(int A, int B)
	{
		local int Result;
		Result = A + B;
		return Result;
	}
	// A function that prints out a message to the console
	function PrintMessage()
	{
		Super.Print("Hello world!");
	}
	// A function that checks if a given actor is within a certain distance
	function bool CheckDistance(Actor OtherActor, float Distance)
	{
		local bool IsWithinDistance;
		// Calculating the distance between the two actors
		local float Dist = VSize(OtherActor.Location - Location);
		// Checking if the distance is within the specified distance
		if(Dist < Distance)
			IsWithinDistance = true;
		else
			IsWithinDistance = false;
		return IsWithinDistance;
	}
	// A function that destroys the actor after a certain amount of time
	function DestroyAfterTime(float Time)
	{
		// Creating a timer to call the 'Destroy' function after the specified time has passed
		SetTimer(Time, false, 'Destroy');
	}
	// A function that is called when the actor is destroyed
	function Destroyed()
	{
		// Printing a message to the console
		Super.Print("Actor has been destroyed!");
	}
}

// Creating an instance of the custom class
var CustomActor ActorInstance;
// Initializing the actor instance
ActorInstance.Initialize();
// Calling the 'PrintMessage' function
ActorInstance.PrintMessage();
// Adding two integers and storing the result
var int Sum = ActorInstance.Add(5, 10);
// Checking if another actor is within a certain distance
var bool IsInRange = ActorInstance.CheckDistance(OtherActor, 100.0);
// Setting a timer to destroy the actor after 10 seconds
ActorInstance.DestroyAfterTime(10.0);