/*
    This is a complex code snippet in the programming language UNREALSCRIPT.
    It defines a class 'CustomPlayerController' and its functions.
    The class extends the built-in 'PlayerController' class.
*/

class CustomPlayerController extends PlayerController
    placeable
    AbstractPerObject Config,Game
    AbstractGameData(G);
    
    /*
        This function is used to register custom console commands.
        It takes in two parameters: a string which will act as the command
        and an instance of the console command class.
    */
    function RegisterCommand(string CommandName, ConsoleCommand Command)
    {
        if (IsGameSession(NetworkingServer(Game).Session.Game)
            && GamingLicenseCheck(CommandName))
        {
            if (!CommandNames.Length || !CommandNames.FindString(CommandName))
            {
                CommandNames.Insert(CommandName, 0);
                ConsoleCommands.Insert(Command, 0);
            }
            else
                warn("RegisterCommand: " $ CommandName @ " already registered.");
        }
    }
    
    /*
        This function is used to initialize the player controller.
        It sets the player's team and game data and calls the parent's 'PostBeginPlay'.
    */
    function PostBeginPlay()
    {
        super.PostBeginPlay();
        
        SetTeam(G.GameInfo().TeamsByCount[rand() % G.GameInfo().TeamsByCount.Length]);
        Game = G;
        Config = Game.Settings;
    }
    
    /*
        This function is used to handle player death.
        It calls the parent's 'DoRestart' and sets the player's location to the spectator camera.
    */
    function OnPlayerDeath()
    {
        super.DoRestart();
        Player.Pawn.SetActorLocation(Level.SpectatorCamera.Location);
    }
    
    /*
        This function is used to handle player respawn.
        It calls the parent's 'FinishAnimatingRespawn' and sets the player's team.
    */
    function FinishAnimatingRespawn()
    {
        super.FinishAnimatingRespawn();
        
        if (Player.Dead)
            OnPlayerDeath();
        else
            SetTeam(Game.Info().TeamsByCount[rand() % Game.Info().TeamsByCount.Length]);
    }
    
    /*
        This function is used to toggle anti-aliasing in the game.
        It takes in no parameters and uses 'Execute' to run the console command 'r.postprocessAA 0'.
    */
    function ToggleAntiAliasing()
    {
        Execute("r.postprocessAA 0", none);
    }
    
    /*
        This function is used to toggle motion blur in the game.
        It takes in no parameters and uses 'Execute' to run the console command 'r.postprocessMotionBlur 0'.
    */
    function ToggleMotionBlur()
    {
        Execute("r.postprocessMotionBlur 0", none);
    }
    
    /*
        This function is used to toggle depth of field in the game.
        It takes in no parameters and uses 'Execute' to run the console command 'r.postprocessDOF 0'.
    */
    function ToggleDepthOfField()
    {
        Execute("r.postprocessDOF 0", none);
    }
}