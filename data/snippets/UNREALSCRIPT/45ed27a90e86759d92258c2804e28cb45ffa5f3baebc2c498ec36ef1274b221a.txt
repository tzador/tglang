// This code snippet creates a custom weapon class with various properties and functions.

class MyWeapon extends UTWeapon;

// Custom variable to keep track of ammo in clip
var int AmmoInClip;
// Custom variable to track the time until next fire
var float FireCooldown;
// Custom variable to store the maximum ammo capacity per clip
var int MaxClipCapacity;
// Custom variable to store the damage dealt by each shot
var int DamagePerShot;

// Override the defaults and set custom properties for the weapon
function SetDefaults()
{
    // Call the parent function to inherit the default properties
    Super.SetDefaults();

    // Set the max ammo in clip and damage per shot
    MaxClipCapacity = 30;
    DamagePerShot = 20;
}

// Override the ReadyWeapon function to set up the weapon when it's ready to be used
function ReadyWeapon()
{
    // Call the parent function first to make sure everything is set up correctly
    Super.ReadyWeapon();

    // Set the ammo in clip to max capacity
    AmmoInClip = MaxClipCapacity;
}

// Override the Fire function to handle shooting and ammo management
function Fire()
{
    // Check if there's enough ammo in clip to fire
    if(AmmoInClip >= 1)
    {
        // If the fire cooldown is over, fire the weapon
        if(FireCooldown <= 0)
        {
            // Spawn a projectile at the weapon's muzzle socket
            local Projectile Projectile;
            Projectile = Spawn(class'Projectile', ProjectileStart(), Rotation);
            
            // Set the damage for the projectile
            Projectile.SetDamage(DamagePerShot);
            
            // Play a firing sound
            PlaySound(FiringSound,, 10.0);
            
            // Decrement the ammo in clip
            AmmoInClip--;
            
            // Set the cooldown so the weapon cannot fire again immediately
            FireCooldown = 0.2;
        }
    }
    else
    {
        // If there's no ammo in clip, play a dry fire sound
        PlaySound(DryFireSound,, 10.0);
    }
}

// Override the Tick function to handle timing and cooldowns
function Tick(float DeltaTime)
{
    // Call the parent function first to handle any default functionality
    Super.Tick(DeltaTime);

    // Update the fire cooldown timer
    FireCooldown -= DeltaTime;
    
    // Check for reloading
    if(bPendingReload || FireCooldown > 0)
    {
        return;
    }
    
    // Check if there's not enough ammo in clip to fire
    if(AmmoInClip < 1)
    {
        // Start reloading the weapon
        BeginReload();
        
        // Set the fire cooldown to 2 seconds
        FireCooldown = 2.0;
        
        // Play a reload sound
        PlaySound(ReloadSound,, 10.0);
    }
}

DefaultProperties
{
    // Set the custom weapon class name
    FriendlyName = "My Weapon";

    // Set the custom mesh for the weapon
    Mesh = Mesh'MyPackage.WeaponMesh';
    // Set the custom fire sound for the weapon
    FiringSound = Sound'MyPackage.FireSound';
    // Set the custom dry fire sound for the weapon
    DryFireSound = Sound'MyPackage.DryFireSound';
    // Set the custom reload sound for the weapon
    ReloadSound = Sound'MyPackage.ReloadSound';
}