// Custom pawn class with movement and health functionality
class CustomPawn extends Pawn
    // Movement properties
    var(Replicated)
    float MaxWalkSpeed;
    var(Replicated)
    float MaxAcceleration;
    var(Replicated)
    float MaxStepHeight;

    // Health properties
    var()
    float Health;
    var()
    float MaxHealth;
    var()
    float HealthRegenRate;
    var()
    float HealthRegenDelay;

    // Event called when pawn is damaged
    event PawnDamaged(float Damage, Controller InstigatedBy, vector HitLocation, vector Momentum, class<DamageType> DamageType, optional name HitBoneName, optional vector EffectOrigin)
    {
        // Reduce health by damage amount
        Health -= Damage;

        // Check if pawn is dead
        if(Health <= 0)
        {
            // Destroy pawn
            Destroy();
        }
    }

    // Timer function for health regeneration
    simulated function RegenHealth()
    {
        // Check if pawn is alive and if health is not at maximum
        if(Health > 0 && Health < MaxHealth)
        {
            // Increase health by regen rate
            Health += HealthRegenRate;

            // Set timer for next regen
            SetTimer(HealthRegenDelay, false, 'RegenHealth');
        }
    }

    // Event called when pawn is spawned
    event Spawned()
    {
        Super.Spawned();

        // Set initial health to maximum
        Health = MaxHealth;

        // Start health regeneration timer
        SetTimer(HealthRegenDelay, false, 'RegenHealth');
    }

    // Function for moving the pawn
    simulated function Move(float DeltaTime)
    {
        // Calculate movement direction
        local vector MoveDirection = Normal(Rotation) * MaxWalkSpeed;

        // Apply movement to pawn
        Velocity = MoveDirection * DeltaTime;
    }

    // Function for jumping
    simulated function Jump()
    {
        // Set Z velocity to jump velocity
        Velocity.Z = JumpZ;

        // Play jump animation
        PlayAnim(PrevAnim, JumpAnim);
    }