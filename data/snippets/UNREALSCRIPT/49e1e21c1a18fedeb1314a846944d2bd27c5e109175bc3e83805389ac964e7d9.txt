// Define a custom struct to represent a player's inventory
struct PlayerInventory
{
    int NumKeys; // Number of keys collected
    float Health; // Player's current health
    string[] Weapons; // Array of weapons collected
    Vector2D[] Positions; // Array of positions of collected items
    
    // Constructor for the inventory struct
    function PlayerInventory(int Keys, float InitialHealth)
    {
        NumKeys = Keys;
        Health = InitialHealth;
        Weapons = new string[3]; // Create an array of size 3 for weapons
        Positions = new Vector2D[5]; // Create an array of size 5 for positions
    }
    
    // Function to add a weapon to the inventory
    function void AddWeapon(string Weapon)
    {
        if (Weapons.Length < 3) // Check if there is space in the weapons array
        {
            Weapons[Weapons.Length] = Weapon; // Add the weapon to the next available position
        }
    }
    
    // Function to add an item position to the inventory
    function void AddPosition(Vector2D Position)
    {
        if (Positions.Length < 5) // Check if there is space in the positions array
        {
            Positions[Positions.Length] = Position; // Add the position to the next available position
        }
    }
    
    // Function to use a key from the inventory
    function bool UseKey()
    {
        if (NumKeys > 0)
        {
            NumKeys--; // Decrease the number of keys
            return true; // Key was successfully used
        }
        
        return false; // No keys left to use
    }
}

// Create a new player inventory with 2 keys and 100 initial health
PlayerInventory MyInventory(2, 100);

// Add a weapon to the inventory
MyInventory.AddWeapon("Rifle");

// Add a position to the inventory
MyInventory.AddPosition(Vector2D(10, 5));

// Use a key from the inventory
bool KeyUsed = MyInventory.UseKey();

// Print the current health of the player
`Log("Current health: " $ MyInventory.Health);`