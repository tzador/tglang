/*
    This is a complex code snippet in UNREALSCRIPT, used for creating a custom player controller.
    It includes object initialization, player input, and custom functions.
*/

// Initialize the player controller object
class MyPlayerController extends PlayerController;

// Define the input keys for movement and actions
var config input float MoveForwardSpeed;
var config input float MoveRightSpeed;
var config input float LookUpSpeed;
var config input float TurnSpeed;
var config input name JumpAction;
var config input name FireAction;

// Override the default player input function
function ProcessInput(float DeltaTime, bool bGamePaused)
{
    // Call the parent function to handle any default input
    PlayerInput(DeltaTime, bGamePaused);

    // Update movement speed based on input
    var vector moveDir;

    moveDir.X = ClampAxis(PlayerInput.ThumbstickInput(IE_YAxis));
    moveDir.Y = ClampAxis(PlayerInput.ThumbstickInput(IE_XAxis));

    moveDir = moveDir.Normalized();
    moveDir = rot(moveDir);

    // Move the player forward and to the side at the same time
    moveDir *= DeltaTime * Speed * (MoveForwardSpeed, MoveRightSpeed);
    moveDir.Z = 0;
    Move(moveDir);

    // Update camera rotation based on input
    var rot newRot;

    newRot.Pitch = ClampAxis(PlayerInput.ThumbstickInput(IE_YAxis));
    newRot.Yaw = ClampAxis(PlayerInput.ThumbstickInput(IE_XAxis)) * TurnSpeed * DeltaTime;

    // Rotate camera up/down
    newRot.Pitch = newRot.Pitch * DeltaTime * LookUpSpeed;

    // Update camera rotation
    UpdateRotation(Rotation, newRot);

    // Check for jump input
    if (PlayerInput.ActionPressed(JumpAction))
    {
        // Call a custom function to handle jumping
        Jump();
    }

    // Check for fire input
    if (PlayerInput.ActionPressed(FireAction))
    {
        // Call a custom function to handle firing
        Fire();
    }
}