class ShipController extends Actor
# This class represents a controller for a ship object

# Variables
var float MaxSpeed; # the maximum speed the ship can reach
var float Acceleration; # the rate at which the ship accelerates
var float TurnSpeed; # the speed at which the ship can turn
var bool isThrusting; # flag for whether the ship is currently thrusting
var bool isTurning; # flag for whether the ship is currently turning
var float CurrentSpeed; # the current speed of the ship
var float CurrentRotation; # the current rotation of the ship
var Vector ThrustDirection; # the direction in which the ship is thrusting
var Vector TurnDirection; # the direction in which the ship is turning

# Functions
# A function to handle thrusting the ship forward
function ThrustForward(bool StartThrust)
{
    isThrusting = StartThrust;
    
    if (isThrusting)
    {
        ThrustDirection = Rotation.Vector; # set thrust direction to be forward (based on current rotation)
    }
}

# A function to handle turning the ship
function Turn(float Value)
{
    isTurning = Value != 0; # set turning flag to true if value is not 0
    
    if (isTurning)
    {
        TurnDirection = Vector(0, Value, 0); # set turn direction based on input value (left or right)
    }
}

# A function to update the ship's movement and rotation
function UpdateMovement(float DeltaTime)
{
    # calculate current speed based on acceleration and delta time
    if (isThrusting)
    {
        CurrentSpeed = Clamp(CurrentSpeed + (Acceleration * DeltaTime), 0, MaxSpeed);
    }
    else
    {
        CurrentSpeed = Clamp(CurrentSpeed - (Acceleration * DeltaTime), 0, MaxSpeed);
    }
    
    # update the ship's location based on current speed and thrust direction
    Location += (ThrustDirection * CurrentSpeed);
    
    # calculate current rotation based on turn speed and delta time
    if (isTurning)
    {
        CurrentRotation = CurrentRotation + (TurnSpeed * DeltaTime * TurnDirection.Y);
    }
    
    # set the ship's rotation based on current rotation
    Rotation = Rotator(0, CurrentRotation, 0);
}

# A function to handle collision events
function OnCollision()
{
    # TODO: add collision logic
}

# Event called every frame
event Tick(float DeltaTime)
{
    Super.Tick(DeltaTime);
    
    # update ship movement and rotation
    UpdateMovement(DeltaTime);
}

# Event called when the ship overlaps with another actor
event Bump(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
{
    OnCollision();
}

# Event called when the ship collides with another actor
event Hit(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal, vector NormalImpulse, Material HitMaterial)
{
    OnCollision();
}