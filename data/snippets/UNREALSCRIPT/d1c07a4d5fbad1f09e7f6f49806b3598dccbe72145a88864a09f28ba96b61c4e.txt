// A complex snippet in UnrealScript

class Inventory extends Object
// Declares a class 'Inventory' that extends the base class 'Object'
within Game
// Specifies that this class is part of the 'Game' package
config(UI)
// Specifies that this class is a configuration class and can be accessed from the Unreal Editor's settings

var float Health;
// Declares a variable 'Health' of type 'float'

var InventoryItem[] InventoryItems;
// Declares a variable 'InventoryItems' of type 'InventoryItem' array

var InventoryItem ActiveItem;
// Declares a variable 'ActiveItem' of type 'InventoryItem'

var bool bCanPickup;
// Declares a variable 'bCanPickup' of type 'bool'

// Event that is called when the player uses the currently active item
event UsedActiveItem();
// 'event' keyword signifies that this is an event, and the event is named 'UsedActiveItem'

// Function that calculates the player's health based on current inventory items
function UpdateHealth()
{
    local float TempHealth;
    // Declaring a variable 'TempHealth' of type 'float' that is only accessible within the function
	
    for (InventoryItem Item in InventoryItems)
    // Iterates through each item in the 'InventoryItems' array
    {
        TempHealth += Item.HealthModifier;
        // Adds the 'HealthModifier' value of the current item to the TempHealth variable
    }
	
    Health = TempHealth;
    // Sets the player's health to the calculated TempHealth value
}

// Function that allows the player to pickup an item
function PickupItem(InventoryItem NewItem)
{
    if(bCanPickup)
    // Checks if the player is able to pickup items
    {
        InventoryItems.AddItem(NewItem);
        // Adds the new item to the 'InventoryItems' array
    }
}

defaultproperties
{
    Begin Object Name=InventoryMeshComponent
    // Declares a default property for an object 'InventoryMeshComponent'
    // Object represents the visual representation of the player's inventory
    // Properties within this block are specific to the Unreal Engine's rendering system
    
        StaticMesh='InventoryMesh'
        // Sets the static mesh used for the inventory to 'InventoryMesh'
        
        LightEnvironment = DynamicLightEnvironment
        // Sets the light environment for the inventory to 'DynamicLightEnvironment'
        
        CastShadow=false
        // Sets whether the inventory should cast shadows or not
        
    End Object 
    
    bNetNotify=false
    // Sets whether to notify the network about this object or not
    
    bIgnoreCollision=true
    // Sets whether to ignore collision with this object or not
}