class ComplexObject extends Object;

// Struct representing the data of the complex object
struct ComplexObjectData
{
    var name; // name of the object
    array<int> values; // array of integer values
    bool isInitialized; // boolean indicating if the object has been initialized
}

// Function that creates a new complex object with the given data and returns it
function ComplexObject CreateComplexObject(ComplexObjectData data)
{
    local ComplexObject newComplexObject; // create a new local object
    
    newComplexObject.name = data.name; // set the name of the object to the data's name
    newComplexObject.isInitialized = true; // set isInitialized to true since we are creating a new object
    foreach (int val in data.values)
    {
        newComplexObject.values.AddItem(val); // add each integer value from data's array to the object
    }
    
    return newComplexObject; // return the newly created object
}

// Function that prints out the values of the given complex object
function PrintComplexObject(ComplexObject object)
{
    ` log("--------Printing Complex Object--------");
    ` log("Object Name: $" + object.name);
    foreach (int val in object.values)
    {
        ` log("Value: $" + val);
    }
    ` log("Is Initialized: $" + object.isInitialized);
    ` log("--------End of Complex Object--------");
}

// Main function to demonstrate the usage of the above functions
function main()
{
    ` log("-------Complex Object Demo-------");
    
    // Create a new data object
    local ComplexObjectData data;
    data.name = "Test Object";
    data.values = new array<int>;
    data.values.AddItem(5);
    data.values.AddItem(10);
    
    // Create a complex object using the data and print its values
    local ComplexObject newObj;
    newObj = CreateComplexObject(data);
    PrintComplexObject(newObj);
    
    ` log("-------End of Demo-------");
}