class MyComplexClass extends SomeParentClass // Declares a class that inherits from a parent class
  implements IMyInterface // Implements a custom interface

  // Constants
  const float PI = 3.14; // Declares a constant variable with a value of 3.14
  const string MY_NAME = "John Doe"; // Declares a constant string variable with a value of "John Doe"

  // Member variables
  var int MyInt; // Declares an integer variable
  var string MyString; // Declares a string variable
  var Object Obj; // Declares an object variable

  // Enums
  enum EColor // Declares an enum type
  {
    RED,
    BLUE,
    GREEN,
  };

  // Structs
  struct MyStruct // Declares a struct type
  {
    var int MyInt; // Member variable
    var string MyString; // Member variable
  };

  // Functions
  function MyFunction(int Param1, string Param2)
  {
    // Code block
    if(bSomeCondition) // If statement
    {
      for(int i = 0; i < 10; i++) // For loop
      {
        Obj.DoSomething(); // Function call on an object variable
      }
    }
    else // Else statement
    {
      Obj.DoSomethingElse(); // Function call on an object variable
    }

    while(bSomeOtherCondition) // While loop
    {
      Obj.DoAnotherThing(); // Function call on an object variable
    }

    return Param1 * Param2.Length; // Returns an integer value
  }

  // Events
  event MyEvent(MyStruct StructParam) // Declares an event with a struct parameter
  {
    // Code block
    Obj.DoSomething(); // Function call on an object variable
  }

  // Operator overloading
  operator+(MyStruct A, MyStruct B) // Overloads the + operator for the MyStruct type
  {
    return MyStruct(A.MyInt + B.MyInt, A.MyString $ B.MyString); // Returns a MyStruct value with the sum of the member variables and the concatenated strings
  }

  // Default properties
  defaultproperties
  {
    MyInt = 5; // Sets the default value of MyInt to 5
    MyString = "Hello"; // Sets the default value of MyString to "Hello"
    Obj = new Object(); // Initializes the Obj variable with a new Object instance
  }
}