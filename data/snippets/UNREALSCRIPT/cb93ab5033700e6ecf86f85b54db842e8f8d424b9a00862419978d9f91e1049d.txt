class CustomPlayerController expands PlayerController;

/**
 * This class represents a custom player controller
 * that allows for advanced movement and controls.
 */

/** Constants for movement parameters*/
const int MAX_SPEED = 1000;
const float ACCELERATION = 2000.0f;

/** Variables for movement */
var Vector desiredMovement; // Desired movement direction
var float currentSpeed; // Current speed of player
var float accelerationMultiplier; // Multiplier for acceleration based on input

/** Event for player movement */
event Tick(float DeltaTime)
{
    Super.Tick(DeltaTime);

    // Determine desired movement direction from input
    desiredMovement = Vector(Input.DesiredInput.X, Input.DesiredInput.Y, 0);

    // Normalize desired movement direction
    desiredMovement.Normalize();

    // Calculate acceleration multiplier based on input
    accelerationMultiplier = desiredMovement.Size * ACCELERATION;

    // Calculate current speed based on acceleration and delta time
    currentSpeed = accelerationMultiplier * DeltaTime;

    // Limit max speed to prevent unrealistic movement
    if (currentSpeed > MAX_SPEED)
        currentSpeed = MAX_SPEED;

    // Move player based on input and current speed
    SetLocationAndRotation(GetLocation() + desiredMovement * currentSpeed, Rotation);

    // Update camera based on player movement
    if (IsLocalPlayerController())
        UpdateCamera();
}

/** Update camera based on player movement */
protected function UpdateCamera()
{
    // Get camera rotation from input
    local Rotator cameraRotation = Rotator(0, Input.DesiredInput.X * 5.0f, 0);

    // Rotate camera
    SetControlRotation(cameraRotation);
}