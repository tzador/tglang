// This is a complex code snippet in UNREALSCRIPT.

class MyCustomPawn extends Pawn;

// Create a new custom pawn class that extends the built-in Pawn class.

var() int CustomHealth;

// Create a variable to hold the custom health value for the pawn.

event bool ModifyDamage(int DamageAmount, Actor DamageDealer, Object.Vector HitLocation, Object.Vector Momentum, Class<DamageType> DamageType);

// Create an event to handle modifying damage for the pawn.
// This event takes in parameters for the amount of damage, the actor causing the damage, the location of the hit, the momentum of the hit, and the type of damage.

function TakeDamage(int Damage, Pawn EventInstigator, Object.Vector HitLocation, Object.Vector Momentum, Class<DamageType> DamageType) 
{
    // Override the built-in TakeDamage function to use our custom damage event.
    
    local bool bModifiedDamage;
    // Create a local variable to track if damage has been modified.
    
    Super.TakeDamage(Damage, EventInstigator, HitLocation, Momentum, DamageType);
    // Call the parent function first to apply any base damage calculations.
    
    bModifiedDamage = ModifyDamage(Damage, EventInstigator, HitLocation, Momentum, DamageType);
    // Call our custom ModifyDamage event and store the resulting boolean value.
    
    if (bModifiedDamage)
    {
    // If the damage was modified in our custom event,
    
        Health -= CustomHealth;
        // Subtract the custom health value from the pawn's health.
        
        if (Health <= 0)
        {
            // If the pawn's health falls below or equal to 0,
            
            SetLifeSpan(1.0);
            // Set its life span to 1 second to destroy it.
        }
        
        return;
        // End the function here.
    }
}

defaultproperties
{
    // Set default values for variables and properties.
    
    CustomHealth=100;
    // Set the default custom health value to 100.
}