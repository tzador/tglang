/** This is a multiline comment in UNREALSCRIPT that explains the purpose of the code below. */

// This is a single-line comment

/** 
 * This is a class named "MyClass" that inherits from the "Object" class.
 * The "simulated" keyword means this class can only be used in simulation mode.
 * The "Transient" keyword means this class is not saved or loaded when an object is saved or loaded.
 * The "placeable" keyword means this class can be placed in the level editor.
 */
class MyClass extends Object simulated Transient placeable within MyModule
	config superior
	defaultproperties
{
   // This is a variable declared as an integer type.
   // The "config" keyword means it can be set in the game's configuration files.
   config integer MyIntVar;
   
   // This is a function declared as a static function (can be called without an instance of the class).
   // The "exec" keyword means it can be called from console commands.
   exec static function MyFunction()
   {
      // This is a loop that repeats 10 times.
      // The loop index variable is "i".
      for (local int i = 0; i < 10; i++)
      {
         // This is a conditional statement that checks if "i" is less than 5.
         if (i < 5)
         {
            // This is a log statement that prints the value of "i" to the console.
            log("i is less than 5");
         }
         else
         {
            // This is a log statement that prints the value of "i" to the console.
            log("i is greater than or equal to 5");
         }
      }
   }
   
   // This is a function declared as a simulated function (can only be called on an instance of the class).
   simulated function MySimulatedFunction()
   {
      // This is a local variable declared as a name type.
      local name MyName;
      
      // This is a conditional statement that checks the value of "MyIntVar".
      if (MyIntVar == 0)
      {
         // This is a log statement that prints a message to the console.
         log("MyIntVar is equal to 0");
      }
      
      // This is a loop that iterates through all actors in the level.
      foreach AllActors(class 'Actor', MyActor)
      {
         // This is a conditional statement that checks the class of "MyActor".
         if (MyActor.IsA('MyClass') == true)
         {
            // This is a log statement that prints the name of "MyActor".
            log("Found an actor of class " @ MyActor.GetName());
         }
      }
      
      // This is a switch statement based on the value of "MyIntVar".
      switch (MyIntVar)
      {
         case 1:
            // This is a log statement that prints a message to the console.
            log("MyIntVar is equal to 1");
            break;
            
         case 2:
            // This is a log statement that prints a message to the console.
            log("MyIntVar is equal to 2");
            break;
            
         // Default case if none of the above cases match.
         default:
            // This is a log statement that prints a message to the console.
            log("MyIntVar is not equal to 1 or 2");
            break;
      }
   }
}