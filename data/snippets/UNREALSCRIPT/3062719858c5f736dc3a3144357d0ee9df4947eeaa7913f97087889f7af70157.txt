// Comment: This class represents a weapon
class Weapon extends Item
    config(WeaponStat, WeaponEffect) // Configurable parameters for the weapon
    defaultproperties // Default properties for weapon objects
    {
        default name						Weapon_Name
        default Description					Weapon_Description
        default Icon						Weapon_Icon
        const default CollisionRadius			50.0
        const default CollisionHeight			75.0
    }
    defaultcomponents // Default components for weapon objects
    {
        WeaponMeshComponent					// Visualization of the weapon
        {
            SkeletalMesh 					Weapon_Mesh
            SkeletalMeshAnimSeqs 				Weapon_Animation
            BlockWeapons					true // Prevents collision with other weapons
        }
        WeaponFXComponent					// Special effects for the weapon
        {
            default WeaponEffectClass 			WeaponEffect
        }
        WeaponStatComponent					// Keeps track of weapon stats
        {
            default WeaponStatClass 			WeaponStat
        }			
    }
    // Event: When the weapon is activated
    simulated event Activate(Actor Other, Actor OtherComp)
    {
        local Item WeaponItem;
        local WeaponFXComponent FX;
        WeaponItem = Weapon(OtherComp); // Cast the weapon item to a Weapon class
        FX = Spawn(class'WeapFXComponent',,, WeaponItem, WeaponItem); // Spawn the weapon effect component
        FX.SetOwner(Owner); // Set the owner of the effect to the weapon's owner
        FX.Play(); // Play the weapon effect
    }
    
    // Function: Adjust the weapon's stats based on the player's level
    simfunction void AdjustStats(int PlayerLevel)
    {
        local WeaponStatComponent WeaponStat;
        WeaponStat = WeaponStatComponent(self.CollisionComp.Owner); // Get the weapon's stat component
        WeaponStat.AttackDamage *= PlayerLevel; // Increase attack damage based on player's level
        WeaponStat.AttackSpeed *= PlayerLevel; // Increase attack speed based on player's level
        WeaponStat.AmmoType *= PlayerLevel; // Increase ammo count based on player's level
    }
    // Function: Check if the weapon is eligible for upgrade based on player's level
    function bool IsEligibleForUpgrade(int PlayerLevel)
    {
        return PlayerLevel > WeaponStatComponent(self.CollisionComp.Owner).UpgradeLevel; // Return true if player's level is greater than weapon's upgrade level
    }
}