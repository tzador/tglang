class MyActor extends Actor
    extends Object
    collapsetoggle Hidden
within(LevelInfo)
    placeable;

// Annotations can be used to document the purpose of variables, functions, or classes

// Variable to store the current health of the actor
var int health
    annotation(ToolTip="The current health of the actor");

// Function to decrease the health of the actor by a specified amount
function ReduceHealth(int amount)
{
    health -= amount;
    if (health <= 0)
    {
        // If health reaches 0, destroy the actor
        Destroy();
    }
}

// Event called when the actor takes damage
event TakeDamage(int damageAmount, Pawn instigatedBy, vector hitLocation, vector momentum, class<DamageType> damageType)
{
    // Call the ReduceHealth function to update the actor's health
    ReduceHealth(damageAmount);
    // Spawn a particle effect at the hit location
    Spawn(ParticleSystem'MyParticleEffect', hitLocation);
}

// Function to teleport the actor to a specified location
function Teleport(vector newLocation)
{
    // Set the actor's absolute location to the new location
    SetLocation(newLocation);
}

// Event called when the level starts
event PostBeginPlay()
{
    // Set the initial value of the health variable
    health = 100;
    // Teleport the actor to a random location within the level
    Teleport(LevelInfo.RandomPointInVolume());
}

// Function to rotate the actor by a specified amount
function Rotate(float amount)
{
    // Set the actor's rotation using the specified amount
    SetRotation(Rotator(0, amount, 0));
}

// Event called every frame
event Tick(float deltaTime)
{
    // Rotate the actor by 1 degree every frame
    Rotate(1);
}