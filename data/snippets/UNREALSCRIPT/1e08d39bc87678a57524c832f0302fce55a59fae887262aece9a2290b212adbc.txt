/* This is a complex code snippet in UNREALSCRIPT, used for creating a weapon pickup in a video game. It includes various functions and variables to create an interactive and customizable weapon pickup. */

class MyWeaponPickup extends WeaponPickup expands BasePickup;

/* Define variables for each weapon property */
var int Damage; // The amount of damage the weapon deals
var float FireRate; // The rate at which the weapon can fire
var int AmmoCapacity; // The maximum amount of ammo the weapon can hold
var float ReloadTime; // The time it takes for the weapon to reload

var Object Owner; // The Pawn that owns this weapon

/* Default constructor, sets default values for the variables */
function MyWeaponPickup()
{
  Damage = 50;
  FireRate = 0.5;
  AmmoCapacity = 30;
  ReloadTime = 2.0;
}

/* Function to set the owner of the weapon */
function SetOwner(Object NewOwner)
{
  Owner = NewOwner;
}

/* Function to handle when the weapon is picked up by a Pawn */
function PickupObject(Pawn Other)
{
  Super.PickupObject(Other);

  if (Owner == None) // Check if the weapon has an owner
  {
    SetOwner(Other); // Set the current Pawn as the owner
    // Update the Pawn's weapon properties with this weapon's properties
    Other.WeaponDamage = Damage;
    Other.WeaponFireRate = FireRate;
    Other.MaxAmmo = AmmoCapacity;
    Other.ReloadTime = ReloadTime;
  }
  else // If the weapon already has an owner
  {
    if (Other != Owner) // Check if the Pawn picking up the weapon is not the owner
    {
      OnWeaponSwap(); // Call a function to handle swapping weapons for the owner Pawn
      SetOwner(Other); // Set the current Pawn as the new owner
      // Update the Pawn's weapon properties with this weapon's properties
      Other.WeaponDamage = Damage;
      Other.WeaponFireRate = FireRate;
      Other.MaxAmmo = AmmoCapacity;
      Other.ReloadTime = ReloadTime;
    }
  }
}

/* Function to handle when the weapon is dropped by the owner Pawn */
function DropObject(Pawn Other)
{
  Super.DropObject(Other);

  if (Other == Owner) // Check if the Pawn dropping the weapon is the owner
  {
    SetOwner(None); // Reset the owner variable to None
    // Reset the owner Pawn's weapon properties to default values
    Other.WeaponDamage = 20;
    Other.WeaponFireRate = 1.0;
    Other.MaxAmmo = 100;
    Other.ReloadTime = 3.0;
  }
}

/* Function to handle when the weapon is used by the owner Pawn */
function UseWeapon()
{
  // Function body to handle firing the weapon
  Spawn(ProjectileClass, Owner.Location, Owner.Rotation); // Spawn a projectile from the owner Pawn's location and rotation
  Owner.PlayWeaponFireEffects(); // Play visual effects for firing the weapon
  Owner.DeductAmmo(1); // Deduct one ammo from the owner Pawn's ammo count
}

/* Function to handle when the owner Pawn's ammo runs out */
function OnAmmoEmpty()
{
  // Function body to handle informing the owner Pawn of the empty ammo
  Owner.DisplayMessage("Your weapon is out of ammo!"); // Display a message on the screen for the owner Pawn
  Owner.Reload(); // Call the owner Pawn's Reload() function
}

/* Function to handle when the owner Pawn swaps to a different weapon */
function OnWeaponSwap()
{
  // Function body to handle informing the owner Pawn of the swap
  Owner.DisplayMessage("You have swapped weapons!"); // Display a message on the screen for the owner Pawn
  Owner.Reload(); // Call the owner Pawn's Reload() function
}