/** 
 * This is a complex UNREALSCRIPT code snippet 
 * that creates a fully functioning inventory system 
 * for a game. 
 * 
 * Features include: 
 * 1. Adding and removing items 
 * 2. Sorting items 
 * 3. Managing inventory weight limit 
 * 4. Displaying inventory GUI 
 */

class Inventory extends Actor;

/** 
 * This is the base class for all items in the game. 
 * It contains the variables for weight and display name. 
 */

class Item extends Object
    abstract;

/** 
 * This class represents a weapon item in the game. 
 * It inherits from the Item class and adds damage variable. 
 */

class WeaponItem extends Item
    placeable;

var int Damage;

/** 
 * This class represents a consumable item in the game. 
 * It inherits from the Item class and adds health restoration variable. 
 */

class ConsumableItem extends Item
    placeable;

var int HealthRestoration;

/** 
 * This class represents a key item in the game. 
 * It inherits from the Item class and adds key ID variable. 
 */

class KeyItem extends Item
    placeable;

var int KeyID;

/** 
 * This is the main inventory class that holds all items. 
 * It has functions for adding and removing items, 
 * sorting items, and displaying the inventory GUI. 
 */

class MainInventory extends Inventory;

var array<Item> Items;
var int CurrentWeight;
var int MaxWeight = 100;

/**
 * This function adds an item to the inventory. 
 * It checks if the item weight will exceed the max weight 
 * and displays an error message if so. 
 * If the weight limit is not exceeded, 
 * the item will be added to the inventory and the current weight will be updated. 
 * @param ItemToAdd the item to be added to the inventory 
 */
function AddItem(Item ItemToAdd)
{
    if(CurrentWeight + ItemToAdd.Weight > MaxWeight)
    {
        `**Error**: Cannot add item, inventory weight limit exceeded.`;
    }
    else
    {
        Items.AddItem(ItemToAdd);
        CurrentWeight += ItemToAdd.Weight;
    }
}

/**
 * This function removes an item from the inventory. 
 * It checks if the item exists in the inventory 
 * and displays an error message if not. 
 * If the item is found, it will be removed from the inventory 
 * and the current weight will be updated. 
 * @param ItemToRemove the item to be removed from the inventory 
 */
function RemoveItem(Item ItemToRemove)
{
    local int Index;
    Index = Items.Find(ItemToRemove);
    if(Index != -1)
    {
        Items.Remove(Index);
        CurrentWeight -= ItemToRemove.Weight;
    }
    else
    {
        `**Error**: Cannot remove item, item not found in inventory.`;
    }
}

/**
 * This function sorts the inventory items alphabetically 
 * and displays them in the inventory GUI. 
 */
function SortItems()
{
    Items.Sort();
    `Inventory GUI:`;
    for(Item item in Items)
    {
        `Item Name: ` + item.DisplayName + ` | Item Weight: ` + item.Weight;
    }
}

/**
 * This function displays the inventory GUI, 
 * showing all items currently in the inventory 
 * and their respective weight. 
 */
function DisplayInventory()
{
    `Inventory GUI:`;
    for(Item item in Items)
    {
        `Item Name: ` + item.DisplayName + ` | Item Weight: ` + item.Weight;
    }
}