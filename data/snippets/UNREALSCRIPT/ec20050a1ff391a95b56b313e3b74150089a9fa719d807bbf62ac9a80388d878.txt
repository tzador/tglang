// This code snippet is a complex class that represents a guillotine in a game.

class Guillotine extends Actor

// Properties

// Primary weapon variable, specifies which weapon will be used for the actual chopping
var() weapon PrimaryWeapon;

// Sound effect for when the blade drops
var() sound BladeSound;

// Effects used when the blade drops
var() customfont Effect WaveEffect;

// Static mesh representing the base of the guillotine
var() staticmesh BaseMesh;

// Whether or not the guillotine is currently active and ready to chop
var(bool) Active;

// Functions

// Function to initialize the guillotine
simulated function InitGuillotine()
{
    // Attach the base mesh to the actor
    AttachMesh(BaseMesh, 'Base');
    
    // Set the primary weapon as the initial weapon
    PrimaryWeapon = WeaponData.Instance;
    
    // Set the blade sound effect
    BladeSound = SoundData.BladeSound;
    
    // Set the wave effect
    WaveEffect = EffectsData.WaveEffect;
    
    // Set the initial active state to false
    Active = false;
}

// Function to activate the guillotine and begin chopping
simulated function Activate()
{
    // Play the blade sound effect
    PlaySound(BladeSound);
    
    // Spawn the wave effect
    SpawnWaveEffect();
    
    // Get a reference to the primary weapon
    local weapon PrimaryWeaponRef;
    PrimaryWeaponRef = PrimaryWeapon.GetDefaultObject();
    
    // Call the primary weapon's chop function
    PrimaryWeaponRef.BeginChop();
    
    // Set the guillotine as active
    Active = true;
}

// Function to spawn the wave effect when the blade drops
simulated function SpawnWaveEffect()
{
    // Spawn the wave effect at the guillotine's location
    local customfont WaveEffectRef;
    WaveEffectRef = Spawn(WaveEffect, Location);
    
    // Set the wave effect's rotation to match the guillotine's rotation
    WaveEffectRef.SetRotation(Rotation);
    
    // Set the wave effect's size
    WaveEffectRef.SetSize(200, 200, 200);
}

// Event functions

// Event called when the guillotine is destroyed
event Destroyed()
{
    // Deactivate the guillotine
    Active = false;
}

// Event called when the guillotine is interacted with
simulated event InteractWith(Character Interactor)
{
    // Check if the guillotine is active
    if (Active)
    {
        // If so, call the activate function again to toggle it off
        Deactivate();
    }
    else
    {
        // Otherwise, call the activate function to activate the guillotine
        Activate();
    }
}