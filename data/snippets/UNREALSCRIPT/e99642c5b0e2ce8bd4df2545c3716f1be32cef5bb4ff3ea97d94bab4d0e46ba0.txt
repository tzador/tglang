// Declare a custom struct for a character with multiple properties
struct Character {
    var int Level;
    var float Health;
    var string Name;
    var bool IsAlive;
    var Vector Location;
    var Rotator Rotation;
    var class Abilities[4];
};

// Declare a new instance of the character struct
var Character NewCharacter;

// Initialize the properties of the new character using a constructor
NewCharacter.Level = 1;
NewCharacter.Health = 100.0;
NewCharacter.Name = "John Smith";
NewCharacter.IsAlive = true;
NewCharacter.Location = Vector(0, 0, 0);
NewCharacter.Rotation = Rotator(0, 0, 0);

// Create an object of a class that represents an ability
var class JumpAbility;

// Create an object of a class that represents an ability
var class AttackAbility;

// Add both abilities to the character's abilities array
NewCharacter.Abilities[0] = JumpAbility;
NewCharacter.Abilities[1] = AttackAbility;

// Define a function that takes in a Character struct as a parameter
// and performs an action based on the character's properties
function void PerformAction(Character Char) {
    // Check if the character is alive
    if (Char.IsAlive) {
        // Print out the character's name and level
        log("Performing action for character " $ Char.Name $ " at level " $ Char.Level);

        // Check if the character has any abilities
        if (Char.Abilities.Length > 0) {
            // Loop through all the abilities and call their Execute function
            for (i = 0; i < Char.Abilities.Length; i++) {
                Char.Abilities[i].Execute();
            }
        }
    } else {
        // Print out that the character is dead
        log("Cannot perform action for character " $ Char.Name $ " because they are dead.");
    }
}

// Call the PerformAction function passing in the new character as a parameter
PerformAction(NewCharacter);