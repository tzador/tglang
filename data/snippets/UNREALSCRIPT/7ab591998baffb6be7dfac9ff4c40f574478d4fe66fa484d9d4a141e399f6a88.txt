// This code creates a custom weapon class that inherits from the base weapon class

class CustomWeapon extends Weapon;

var() int AmmoCostPerShot; // The amount of ammo used per shot
var() Vector ProjectileSpawnOffset; // The offset from the weapon's location where the projectile will be spawned
var() class<DamageType> CustomDamageType; // The damage type for this weapon

var float CurrentCooldownTime; // The current remaining cooldown time before the weapon can fire again
var Timer CooldownTimer; // Timer used for cooldown between shots

var() EffectsComponent Effects; // The effects component that handles muzzle flashes, sounds, etc.

// Function called when weapon is equipped by a player
function EquipWeapon()
{
    Effects.InitializeEffects(); // Initialize the effects component

    SetTimer(); // Set the timer for cooldown between shots
}

// Function called when weapon is unequipped by a player
function UnEquipWeapon()
{
    Effects.StopEffects(); // Stop any ongoing effects
    ClearTimer(); // Clear the cooldown timer
}

// Function used for handling the actual firing of the weapon
function FireWeapon()
{
    if(CurrentCooldownTime <= 0) // If the weapon is not on cooldown
    {
        if(Ammo > 0) // If there is still ammo remaining
        {
            // Spawn a projectile at the specified offset from the weapon's location
            local Projectile ProjectileInstance;
            ProjectileInstance = Spawn(class'CustomProjectile', self,, location + Rotation * ProjectileSpawnOffset); 

            // Set the custom damage type for the projectile
            ProjectileInstance.DamageType = CustomDamageType; 

            // Play the weapon's firing sound and muzzle flash
            Effects.PlayFiringSound(); 
            Effects.PlayMuzzleFlash(); 

            // Subtract the ammo cost from the weapon's ammo
            Ammo -= AmmoCostPerShot; 

            // Reset the cooldown timer
            CurrentCooldownTime = CooldownTime; 
        }
    }
}

// Function called every tick for handling cooldown between shots
function Tick(float DeltaTime)
{
    if(CurrentCooldownTime > 0) // If the weapon is on cooldown
    {
        // Decrease the remaining cooldown time by the delta time
        CurrentCooldownTime -= DeltaTime; 
    }
}