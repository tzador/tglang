class TestPawn extends Pawn;
// This is a comment in UNREALSCRIPT

// Variables
var() int Health; // Health value for the pawn
var() float Speed; // Speed value for the pawn
var() bool IsDead; // Boolean variable to check if the pawn is dead

// Sets initial values for variables
event PreBeginPlay()
{
    Health = 100;
    Speed = 500.0;
    IsDead = false;
}

// Move function that takes in a vector and moves the pawn in that direction
function Move(Vector Direction)
{
    SetPhysics(PHYS_Running); // Sets the pawn to running state
    Velocity = Direction * Speed; // Sets the pawn's velocity using the given direction and speed values
}

// Checks if the pawn has taken damage and updates the health value accordingly
function ReceiveDamage(int DamageAmount, Pawn InstigatedBy, Vector HitLocation)
{
    Health -= DamageAmount; // Subtracts damage amount from health value
    if(Health <= 0) // Checks if health is equal to or below 0
    {
        SetPhysics(PHYS_Dead); // Sets the pawn to dead state
        IsDead = true; // Sets the IsDead variable to true
    }
}

// Rotates the pawn based on the given rotation values
function Rotate(float Yaw, float Pitch)
{
    local Rotator Rotation = Rotator(Yaw, Pitch, 0); // Creates a rotator using the given values
    SetRotation(Rotation); // Sets the pawn's rotation
}

// Overrides the default Pawn's Tick function to handle movement and rotation every frame
event Tick(float DeltaTime)
{
    Super.Tick(DeltaTime);
    if(not IsDead) // If pawn is not dead, check for player input and move or rotate accordingly
    {
        local Vector MoveDirection = vect(0,0,0); // Creates a vector for movement direction
        if(Input.KeyState(K_Left)) MoveDirection.X = -1; // If "Left" key is pressed, set X value to -1 for left movement
        if(Input.KeyState(K_Right)) MoveDirection.X = 1; // If "Right" key is pressed, set X value to 1 for right movement
        if(Input.KeyState(K_Up)) MoveDirection.Y = 1; // If "Up" key is pressed, set Y value to -1 for forward movement
        if(Input.KeyState(K_Down)) MoveDirection.Y = -1; // If "Down" key is pressed, set Y value to 1 for backward movement
        Move(MoveDirection); // Calls the Move function with the calculated direction
        float RotYaw = Input.AxisValue(AIM_Yaw); // Gets the Yaw axis value from the input for rotation
        float RotPitch = Input.AxisValue(AIM_Pitch); // Gets the Pitch axis value from the input for rotation
        Rotate(RotYaw, RotPitch); // Calls the Rotate function with the calculated rotation values;
    }
}