// This is a complex code snippet in UNREALSCRIPT

class ExampleClass extends Object;
  // Declares a new class named ExampleClass, which extends the Object class

  var int MaxHealth;
  // Declares a variable named MaxHealth of type int

  state Begin;
  // Declares a new state named Begin, which will be the initial state of the class

  simulation function BeginState();
    // Declares a function that will be called when the state Begin is entered
    // simulation keyword indicates this function will run on both client and server
    
    MaxHealth = 100;
    // Sets the value of MaxHealth variable to 100
    
    local ExampleClass other;
    // Declares a local variable of type ExampleClass
    
    for(local int i=0; i<10; i++);
    // Starts a for loop that will run 10 times
    
    Begin:
    // Label for the beginning of the for loop
    
    other = new(class'ExampleClass');
    // Creates a new instance of ExampleClass and assigns it to the local variable other
    
    if(other != None && other.MaxHealth > 50)
    {
      // Checks if other is not null and if its MaxHealth is greater than 50
      MaxHealth = other.MaxHealth / 2;
      // Sets the value of MaxHealth to half of the other's MaxHealth
    }
    else 
    {
      MaxHealth = 25;
      // Sets the value of MaxHealth to 25 if the conditions are not met
    }
    
    PerformSomeTask();
    // Calls a function named PerformSomeTask
    
    GotoState('SecondState');
    // Changes the current state to SecondState
    
    `log("MaxHealth is currently: $MaxHealth")`;
    // Logs the value of MaxHealth to the console using string interpolation
    
    if(InEditMode())
    {
      // Checks if the game is currently in editor mode
      `log("In editor mode!")`;
      // Logs a message to the console
    }
  }
  
  state SecondState;
  // Declares a new state named SecondState
  
  simulated function Tick(float DeltaTime);
  // Declares a function that will be called every frame
  // simulated keyword indicates this function will only run on the client
  
  if(!IsLocallyControlled())
  {
    // Checks if the player is not currently controlling this actor
    // Code for AI logic goes here
  }
  
  DefaultProperties
  {
    // Used for setting default values for properties (variables) of the class
    
    bStatic = true;
    // Sets the value of bStatic (a boolean property) to true
    
    CollisionComponent = none;
    // Sets the value of CollisionComponent to null
    
    MeshComponent = none;
    // Sets the value of MeshComponent to null
  }
  
  function PerformSomeTask()
  {
    // Declares a new function called PerformSomeTask
    
    `log("Performing some task...")`;
    // Logs a message to the console
  }
  
  defaultproperties
  {
    // Used for setting default values for properties (variables) of the class
    // These are the default values that will be used if the object is spawned without specifying any properties
    
    MaxHealth = 100;
    // Sets the default value of MaxHealth to 100
  }
endscene
// Ends the class definition