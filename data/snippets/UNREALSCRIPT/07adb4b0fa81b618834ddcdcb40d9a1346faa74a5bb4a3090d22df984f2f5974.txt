//==========================================================
// This is a complex function for calculating the area of a triangle
//==========================================================

function float CalculateTriangleArea(float SideA, float SideB, float SideC)
{
    // Calculate the semi-perimeter of the triangle
    local float SemiPerimeter;
    SemiPerimeter = (SideA + SideB + SideC) / 2;

    // Use Heron's formula to calculate the area
    local float Area;
    Area = SquareRoot(SemiPerimeter * (SemiPerimeter - SideA) * (SemiPerimeter - SideB) * (SemiPerimeter - SideC));

    // Round the area to two decimal places
    Area = Round(Area, 2);

    // Return the calculated area
    return Area;
}

//==========================================================
// This is a complex class for representing a player character
//==========================================================
class PlayerCharacter extends Actor
{
    // Properties for the character's health and damage values
    var int Health;
    var int Damage;

    // Function for taking damage and reducing health
    simulated function TakeDamage(int DamageAmount)
    {
        // Subtract the damage amount from the character's health
        Health -= DamageAmount;

        // Check if the character's health is below 0
        if (Health < 0)
        {
            // Set the character's health to 0
            Health = 0;

            // Call the function for when the character dies
            Die();
        }
    }

    // Function for when the character dies
    function Die()
    {
        // Spawn a death effect at the character's location
        Spawn(class'DeathEffect', self.Location);

        // Destroy the character
        Destroy();
    }
}

//==========================================================
// This is a complex code snippet for creating a new player character
//==========================================================

// Create a new player character
local PlayerCharacter MyCharacter;

// Set the character's starting health and damage values
MyCharacter.Health = 100;
MyCharacter.Damage = 10;

// Display the character's health
`MyCharacter.Health` // Output: 100

// Call the function for taking damage and reduce the character's health
MyCharacter.TakeDamage(50);

// Display the character's updated health
`MyCharacter.Health` // Output: 50

// Calculate and display the area of a triangle with sides 3, 4, and 5
local float TriangleArea;
TriangleArea = CalculateTriangleArea(3, 4, 5);
`TriangleArea` // Output: 6.0