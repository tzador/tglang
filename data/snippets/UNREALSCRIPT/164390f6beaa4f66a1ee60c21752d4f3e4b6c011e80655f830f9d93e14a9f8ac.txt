class CustomProjectile extends Projectile expands UTProjectile;
/*!
 * This class defines a custom projectile that inherits from the UTProjectile class.
 */

var float Speed;
// Declares a `float` variable named `Speed` that will store the projectile's speed.

var float DamageMultiplier;
// Declares a `float` variable named `DamageMultiplier` that will store the projectile's damage multiplier value.

var Sound HitSound;
// Declares a `Sound` variable named `HitSound` that will store the sound effect played upon impact.

var ParticleSystem ImpactEffect;
// Declares a `ParticleSystem` variable named `ImpactEffect` that will store the particle effect played upon impact.

function HandleImpact(Vector HitLocation, Object.Vector HitNormal);
// Defines a custom function `HandleImpact` that takes in `HitLocation` and `HitNormal` parameters.

if (DamageMultiplier > 1.0f) 
{
// Checks if the `DamageMultiplier` variable is greater than the default value of `1.0f`.

local UTGibSkeletalMesh Gib;
// Declares a `UTGibSkeletalMesh` object named `Gib`.

if (DamageMultiplier > 3.0f)
{
// Checks if the `DamageMultiplier` variable is greater than the value of `3.0f`.

Gib = Spawn(class'UTGibSkeletalMesh',,,
Location, RotX, RotY, RotZ, true);
// Creates a new instance of the `UTGibSkeletalMesh` class at the `Location` with rotations `RotX`, `RotY`, and `RotZ` and sets it to be non-colliding.

if (HitSound != None) // Checks if the `HitSound` variable has been set.
{
PlaySound(HitSound,, HitLocation);
// Plays the `HitSound` at the `HitLocation`.
}

if (ImpactEffect != None) // Checks if the `ImpactEffect` variable has been set.
{
Spawn(class'Emitter', class'ParticleSystem',,, HitLocation);
// Creates a new instance of the `ParticleSystem` class at the `HitLocation`.
}
}

else // If the `DamageMultiplier` is not greater than `3.0f`.
{
if (HitSound != None) // Checks if the `HitSound` variable has been set.
{
PlaySound(HitSound,, HitLocation);
// Plays the `HitSound` at the `HitLocation`.
}

if (ImpactEffect != None) // Checks if the `ImpactEffect` variable has been set.
{
Spawn(class'Emitter', class'ParticleSystem',,, HitLocation);
// Creates a new instance of the `ParticleSystem` class at the `HitLocation`.
}
}

Super.HandleImpact(HitLocation, HitNormal);
/*!
 * Calls the parent class's `HandleImpact` function with `HitLocation` and `HitNormal` parameters. 
 * This will handle any additional default behavior for projectile impact.
 */

if (ProjectileSpawned == None) 
{
// Checks if the `ProjectileSpawned` variable is not already set.

ProjectileSpawned = Spawn(class'UTProjectile',
,, HitLocation - HitNormal * Speed,
Rotator(HitNormal) - FRand() * 2 * RandVect(),,,
,,);
// Creates a new instance of the `UTProjectile` class at the `HitLocation` offset by `HitNormal * Speed` and with a random slight rotation.
}
}