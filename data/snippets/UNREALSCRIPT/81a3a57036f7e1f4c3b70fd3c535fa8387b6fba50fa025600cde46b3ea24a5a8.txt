class MyController extends AiController
//Creates a new class called MyController, extending the AiController class.

var int MaxSpeed
//Creates a public integer variable called MaxSpeed, which will be accessed and modified by other classes.

var RemoteRole CurrentRole
//Creates a public variable of type RemoteRole called CurrentRole, used to determine the current role of the controller.

var bool bRotateToTarget
//Creates a public boolean variable called bRotateToTarget, used to determine if the controller should rotate towards the target.

replication
//Replicates all public variables and functions within this class, allowing them to be accessed by other players in multiplayer games.

defaultproperties
{
	MaxSpeed=500
	//Sets the default value of MaxSpeed to 500.
	
	bRotateToTarget=true
	//Sets the default value of bRotateToTarget to true.
	
	CurrentRole=ROLE_None
	//Sets the default value of CurrentRole to ROLE_None.
	
	bNetTemporary=false
	//Allows the controller to persist through level changes.
}

simulated function Tick(float Delta)
//Creates a public simulated function called Tick, used to update the controller's behavior every frame.

local Vector MoveVector
//Creates a local variable of type Vector called MoveVector, used to determine the direction and magnitude of movement.

if (GetPawn() != None)
//Checks if the controlled pawn exists.

{
    MoveVector = GetFocalPoint() - GetPawn().Location;
    //Calculates the vector from the pawn's current location to the current focal point.
    
    MoveVector.Z = 0.0; 
    //Sets the z value of MoveVector to 0, ensuring the controller only moves along the x and y axes.
    
    if (MoveVector != vect(0, 0, 0).Normal())
    //Checks if the MoveVector is not equal to a normalized zero vector.
    
    {
        MoveToward(MoveVector, Delta);
        //Moves the pawn towards the target, using the MoveVector and Delta as parameters.
    }
}