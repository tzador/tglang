/** 
 * This is a complex code snippet demonstrating the use of iteration and conditional statements in UNREALSCRIPT.
 * This code creates an inventory system for a game, allowing the player to store items and manage them.
 */

class Inventory extends Object;

/** 
 * This is the Item class, which represents a single item in the inventory. It has properties for the name, description, and quantity of the item.
 */
class Item extends Object;

var(name="Name", editinline) const byte NameIndex;
var(name="Description", editinline) const string Description;
var(name="Quantity", editinline) int Quantity;

/** 
 * This is the main Inventory class. It contains an array of Items to store the items and various functions to manipulate the inventory.
 */
class Inventory extends Object;

/** 
 * This function will add an item to the inventory. It takes in an Item object as a parameter and adds it to the array of items.
 * It first checks if the item already exists in the inventory, if it does then it will increase the quantity of the existing item instead of adding a new one.
 * If the item doesn't exist, it will add it to the array and set the quantity to 1.
 */
function AddItem(Item newItem) 
{
    local int index;
    local bool found;

    // Check if the item already exists in the inventory
    for (index = 0; index < Items.Length; index++)
    {
        if (Items[index].NameIndex == newItem.NameIndex)
        {
            // Item already exists, increase quantity instead of adding a new one
            found = true;
            Items[index].Quantity += newItem.Quantity;
            break;
        }
    }

    // Item doesn't exist, add it to the array
    if (!found)
    {
        Items.AddItem(newItem);
    }
}

/** 
 * This function will remove an item from the inventory. It takes in an Item object as a parameter and checks if it exists in the inventory.
 * If it does, it will decrease the quantity of the existing item. If the quantity reaches 0, the item will be removed from the array.
 */
function RemoveItem(Item itemToRemove) 
{
    local int index;

    // Check if the item exists in the inventory
    for (index = 0; index < Items.Length; index++)
    {
        if (Items[index].NameIndex == itemToRemove.NameIndex)
        {
            // Item exists, decrease quantity
            Items[index].Quantity -= itemToRemove.Quantity;

            // If quantity reaches 0, remove item from array
            if (Items[index].Quantity <= 0)
            {
                Items.Remove(index);
            }
            break;
        }
    }
}

/** 
 * This function will check the quantity of a specific item in the inventory. It takes in an Item object as a parameter and returns the quantity.
 */
function GetItemQuantity(Item item) 
{
    local int index;

    // Check if the item exists in the inventory
    for (index = 0; index < Items.Length; index++)
    {
        if (Items[index].NameIndex == item.NameIndex)
        {
            // Item exists, return quantity
            return Items[index].Quantity;
        }
    }

    // Item doesn't exist, return 0
    return 0;
}

/** 
 * This function will check if the inventory contains a specific item. It takes in an Item object as a parameter and returns a boolean.
 */
function HasItem(Item item) 
{
    local int index;

    // Check if the item exists in the inventory
    for (index = 0; index < Items.Length; index++)
    {
        if (Items[index].NameIndex == item.NameIndex)
        {
            // Item exists, return true
            return true;
        }
    }

    // Item doesn't exist, return false
    return false;
}

/** 
 * This function will sort the items in the inventory based on their name in alphabetical order.
 */
function SortItemsByName() 
{
    // Use Bubble Sort algorithm to sort the items array
    local int i, j;

    for (i = 0; i < Items.Length - 1; i++)
    {
        for (j = 0; j < Items.Length - i - 1; j++)
        {
            // Swap items if they are in the wrong order
            if (Items[j].Name > Items[j + 1].Name)
            {
                Items.Swap(j, j + 1);
            }
        }
    }
}

/** 
 * This function will remove all items in the inventory that have a quantity of 0 or less.
 * It iterates through the array of items, and if the quantity is 0 or less, it will remove the item from the array.
 */
function ClearEmptyItems() 
{
    local int index;

    // Iterate through items and remove those with quantity 0 or less
    for (index = Items.Length - 1; index >= 0; index--)
    {
        if (Items[index].Quantity <= 0)
        {
            Items.Remove(index);
        }
    }
}

/** 
 * This function will print out all the items in the inventory with their name, description, and quantity.
 */
function PrintInventory() 
{
    local int index;

    // Iterate through items and print out their details
    for (index = 0; index < Items.Length; index++)
    {
        log("Name: " $ Items[index].Name);
        log("Description: " $ Items[index].Description);
        log("Quantity: " $ Items[index].Quantity);
    }
}