/** 
* Struct to hold information about a character's stats 
*/ 
struct CharacterStats 
{ 
    var() int Health; // The character's current health 
    var() float Mana; // The character's current mana 
    var() int Stamina; // The character's current stamina 
    var() int AttackPower; // The character's attack power 
    var() float Armor; // The character's armor rating 
    var() float MagicResistance; // The character's magic resistance 
} 

/** 
* Base class for all characters in the game 
*/ 
class Character extends Actor 
{ 
    var CharacterStats Stats; // The character's stats 
    var() float StatXMultiplier; // Multiplier for calculating stat X 
    var() float StatYMultiplier; // Multiplier for calculating stat Y 
    
    /** 
    * Function to update the character's stats 
    * @param Stats New stats to set 
    */ 
    simulated function UpdateStats(CharacterStats NewStats) 
    { 
        Stats = NewStats; 
    } 
    
    /** 
    * Function to get the character's current health 
    * @return Current health 
    */ 
    function int GetHealth() 
    { 
        return Stats.Health; 
    } 
    
    /** 
    * Function to get the character's current mana 
    * @return Current mana 
    */ 
    function float GetMana() 
    { 
        return Stats.Mana; 
    } 
    
    /** 
    * Function to get the character's current stamina 
    * @return Current stamina 
    */ 
    function int GetStamina() 
    { 
        return Stats.Stamina; 
    } 
    
    /** 
    * Function to calculate and return the character's attack damage 
    * @param BaseDamage The base damage of the attack 
    * @param ArmorPen The amount of armor penetration the attack has 
    * @return Calculated attack damage 
    */ 
    function float CalculateAttackDamage(float BaseDamage, float ArmorPen) 
    { 
        return Stats.AttackPower * BaseDamage * (1 - (Stats.Armor * ArmorPen)); 
    } 
    
    /** 
    * Function to calculate and return the character's magic damage 
    * @param BaseDamage The base damage of the spell 
    * @param MagicPen The amount of magic resistance penetration the spell has 
    * @return Calculated magic damage 
    */ 
    function float CalculateMagicDamage(float BaseDamage, float MagicPen) 
    { 
        return BaseDamage * (1 - (Stats.MagicResistance * MagicPen)); 
    } 
    
    /** 
    * Function to apply damage to the character 
    * @param Damage The amount of damage to apply 
    * @param DamageType The type of damage to apply 
    * @param DamageCauser The actor causing the damage 
    */ 
    simulated function TakeDamage(float Damage, class<DamageType> DamageType, Actor DamageCauser) 
    { 
        if (DamageType == class'MyGameTypes.DamageTypes.PhysicalDamageType') // If the damage type is physical
        { 
            float DamageReduction = 1 - (Stats.Armor * DamageType.ArmorPen); // Calculate damage reduction based on armor 
            Damage *= DamageReduction; // Apply damage reduction 
        } 
        else if (DamageType == class'MyGameTypes.DamageTypes.MagicDamageType') // If the damage type is magic 
        { 
            float DamageReduction = 1 - (Stats.MagicResistance * DamageType.MagicPen); // Calculate damage reduction based on magic resistance 
            Damage *= DamageReduction; // Apply damage reduction 
        } 
        Super.TakeDamage(Damage, DamageType, DamageCauser); // Call the parent class's TakeDamage function 
    } 
}