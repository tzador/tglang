/**
 * This is a class that represents a player character in a game.
 * It contains properties and methods for controlling the player's actions and interactions in the game world.
 */
class GamePlayer extends PlayerPawn;

/**
 * The name of the player character.
 * Defaults to "Player" if no name is provided.
 */
var() const name;

/**
 * The current health of the player character.
 * Starts at 100 and decreases when the character is damaged.
 * If health reaches 0, the player loses the game.
 */
var() protected int health;

/**
 * The jumping strength of the player character.
 * Determines how high the character can jump in the game world.
 * Defaults to 500.
 * Can be modified by game modes or power-ups.
 */
var() int jumpStrength;

/**
 * The amount of ammo the player character currently has.
 * Starts at 100 and decreases when the character uses a weapon.
 * If ammo reaches 0, the player is unable to use weapons until they find more ammo.
 */
var() protected int ammo;

/**
 * The amount of currency the player has collected.
 * Can be used to purchase items or upgrades in the game.
 * Defaults to 0 and can be increased by completing objectives or finding collectibles.
 */
var() protected int currency;

/**
 * The current location of the player character in the game world.
 * Can be used for navigation and determining the character's position relative to other objects.
 * Defaults to the starting position of the level.
 */
var() protected Vector location;

/**
 * The current rotation of the player character in the game world.
 * Used for rotating the character and determining the direction they are facing.
 * Defaults to the starting rotation of the level.
 */
var() protected Rotator rotation;

/**
 * The current velocity of the player character in the game world.
 * Determines how fast the character is moving and in which direction.
 * Defaults to (0, 0, 0).
 */
var() protected Vector velocity;

/**
 * A list of weapons that the player character currently has equipped.
 * Can be modified and accessed through various methods.
 * Defaults to an empty array.
 */
var() protected array<Weapon> equippedWeapons;

/**
 * A reference to the camera attached to the player character.
 * Used for determining the player's view and interacting with objects in the game world.
 * Defaults to the first person camera attached to the character's head.
 */
var() protected Camera camera;

/**
 * The number of lives the player character has remaining.
 * Starts at 3 and decreases when the character dies.
 * If lives reach 0, the game ends.
 */
var() protected int lives;

/**
 * Called when the character takes damage.
 * Decreases the health and plays a damage animation.
 * If health reaches 0, calls the EndGame() function.
 *
 * @param DamageAmount The amount of damage the character takes.
 */
function TakeDamage(int DamageAmount)
{
    Super.TakeDamage(DamageAmount);

    health -= DamageAmount;

    if (health <= 0)
    {
        EndGame();
    }
}

/**
 * Called when the player character picks up a weapon.
 * Adds the weapon to the equippedWeapons array and sets it as the active weapon.
 *
 * @param NewWeapon The weapon to be added to the character's inventory.
 */
function PickUpWeapon(Weapon NewWeapon)
{
    equippedWeapons.AddItem(NewWeapon);
    equippedWeapons[0].SetActive(true);
}

/**
 * Changes the player character's jump strength to the given value.
 *
 * @param NewJumpStrength The new value for the character's jump strength.
 */
function ChangeJumpStrength(int NewJumpStrength)
{
    jumpStrength = NewJumpStrength;
}

/**
 * Fires the currently active weapon.
 * Uses the ammo and plays a firing animation.
 * If no ammo is available, calls the Reload() function.
 */
function FireWeapon()
{
    if (equippedWeapons[0].GetAmmo() > 0)
    {
        equippedWeapons[0].Fire();
        equippedWeapons[0].PlayFiringAnimation();
        ammo -= 1;
    }
    else
    {
        Reload();
    }
}

/**
 * Reloads the currently active weapon.
 * Sets the ammo to its max capacity and plays a reloading animation.
 */
function Reload()
{
    equippedWeapons[0].Reload();
    ammo = equippedWeapons[0].GetMaxAmmo();
    equippedWeapons[0].PlayReloadingAnimation();
}

/**
 * Called when the character collects currency.
 * Increases the currency by the specified value.
 *
 * @param Amount The amount of currency to be collected.
 */
function CollectCurrency(int Amount)
{
    currency += Amount;
}

/**
 * Called when the character completes an objective.
 * Increases the currency and calls the SpawnPowerUp() function.
 * Can be overridden by game modes to provide different rewards for completing objectives.
 */
function ObjectiveCompleted()
{
    currency += 50;
    SpawnPowerUp();
}

/**
 * Spawns a power-up in the game world.
 * Can be called by other functions to add variety and challenge to the game.
 */
function SpawnPowerUp()
{
    // spawn a random power-up in a random location
    local Vector SpawnLocation = GetRandomSpawnPoint();
    local PowerUp SpawnedPowerUp = Spawn(PowerUpClass, self,, SpawnLocation);
}

/**
 * Ends the game and displays a game over screen.
 * Can be called when the player character dies or a lose condition is met.
 */
function EndGame()
{
    // show game over screen
    GEngine.ShowDeathScreen();
}