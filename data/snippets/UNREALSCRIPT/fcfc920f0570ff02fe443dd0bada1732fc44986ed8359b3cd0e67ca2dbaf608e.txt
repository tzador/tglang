/** 
* This is a complex class named 'MyClass' that extends from the 'Actor' class in UDK.
* It contains multiple functions and variables. 
*/
class MyClass extends Actor 
    placeable; // Allows it to be placed in the game world

/**
* A default property that sets the mesh for the class.
*/
defaultproperties 
{
    Begin Object Class=StaticMeshComponent Name=StaticMeshComponent0
        StaticMesh=StaticMesh'Path.to.static.mesh'
    End Object
    Components.Add(StaticMeshComponent0)
}

/**
* A function that starts the class, called when placement in the level begins.
*/
simulated function StartUp()
{
    // Sets the class's location and rotation in the game world
    SetLocationAndRotation(Location, Rotation);
    
    // Calls the 'InitializeVariable' function to set the default values for class's variables
    InitializeVariable();
    
    // Prints a message to the console to indicate that the class has been started up
    `log("MyClass has been initialized.");
}

/**
* A function that initializes the class's variables to their default values.
*/
function InitializeVariable()
{
    // Sets the default value for the 'Health' variable
    Health = 100; 
    
    // Sets the default value for the 'MaxSpeed' variable
    MaxSpeed = 500; 
    
    // Sets the default value for the 'Damage' variable
    Damage = 10; 
}

/**
* A function that calculates and returns the current damage based on the class's variables.
*
* @return The calculated damage value.
*/
function GetDamage() returns(int)
{
    // Calculates the damage based on the current 'Health' and 'MaxSpeed' values
    local int CalcDamage;
    CalcDamage = Damage * (MaxSpeed / Health);
    
    return CalcDamage;
}

/**
* A function that takes in a location and moves the class to that location.
*
* @param NewLocation - The new location to move the class to.
*/
function MoveToLocation(Vector NewLocation)
{
    // Calls the 'SetLocationAndRotation' function to set the new location for the class
    SetLocationAndRotation(NewLocation, Rotation);
    
    // Prints a message to the console to indicate that the class has been moved to the new location
    `log("MyClass has been moved to" @ NewLocation);
}

/**
* A function that causes damage to the class based on the given amount.
*
* @param Amount - The amount of damage to cause.
*/
function TakeDamage(int Amount)
{
    // Subtracts the given amount from the 'Health' variable
    Health -= Amount;
    
    // Prints a message to the console to indicate that the class has taken damage
    `log("MyClass has taken" @ Amount @ "damage!");
}

/**
* A function that destroys the class and removes it from the game world.
*/
function Destroy()
{
    // Calls the 'Killed' function to indicate that the class has been destroyed
    Killed();
    
    // Removes the class from the game world
    Destroy();
}

/** 
* A function that handles what happens when the class is killed or destroyed.
*/
event Killed()
{
    // Prints a message to the console to indicate that the class has been destroyed
    `log("MyClass has been destroyed!");
    
    // Calls the default 'Killed' function from the 'Actor' class
    Super.Killed();
}

/**
* A function that handles what happens when the class takes damage.
*
* @param DamageCauser - The actor that caused the damage.
* @param DamageAmount - The amount of damage taken.
* @param DamageType - The type of damage taken.
* @param HitInfo - A structure with information about the hit.
*/
event TakeDamage(Actor DamageCauser, int DamageAmount, class<DamageType> DamageType, vector HitInfo)
{
    // Prints a message to the console to indicate that the class has taken damage
    `log("MyClass has taken damage!");
    
    // Calls the default 'TakeDamage' function from the 'Actor' class
    Super.TakeDamage(DamageCauser, DamageAmount, DamageType, HitInfo);
}