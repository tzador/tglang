/**
 * This is a complex code block in the UNREALSCRIPT language.
 * It includes multiple variables and functions to demonstrate the syntax.
 */

// Variable declarations
var const int ConstantIntVariable = 5; // Declaration of a constant integer variable
var float FloatVariable; // Declaration of a float variable
var string StringVariable = "Hello World"; // Declaration of a string variable

// Function declarations
function int MyFunction(int ParamInt, float ParamFloat) // Function with integer and float parameters
{
    local int ResultInt; // Declaration of a local integer variable
    ResultInt = ParamInt * ConstantIntVariable; // Multiplying the passed integer parameter with the constant variable
    FloatVariable *= ParamFloat; // Multiplying the passed float parameter with the float variable
    `log("ResultInt: " $ ResultInt); // Printing the value of the local integer variable using the `log` keyword
    `log("FloatVariable: " $ FloatVariable); // Printing the value of the float variable
    return ResultInt; // Returning the result of the function as an integer
}

// Event declaration
event bool MyEvent(float ParamFloat)
{
    if (ParamFloat < ConstantIntVariable)
    {
        MyFunction(ConstantIntVariable, ParamFloat); // Calling the previously declared function with the constant variable and passed float parameter
        return true; // Returning a boolean value
    }
    else
    {
        `warning("ParamFloat is greater than or equal to ConstantIntVariable"); // Printing a warning message using the `warning` keyword
        return false; // Returning a boolean value
    }
}

// Class declaration
class MyComplexClass extends Object; // Creating a class that extends the base Object class
defaultproperties // Default properties declaration
{
    MyVariable = MyFunction(ConstantIntVariable, FloatVariable); // Setting the value of a variable by calling the previously declared function
    MySize = 10 * Random(5, 10); // Setting the value of a variable using the `Random` function
    MyEvent1 = MyEvent(FloatVariable); // Calling the previously declared event with the float variable as a parameter
    MyEvent2 = MyEvent(ConstantIntVariable); // Calling the previously declared event with the constant variable as a parameter
}