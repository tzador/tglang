class MyActor extends Actor
    placeable;

/***
* This is a complex and long code snippet in UNREALSCRIPT.
* It extends the Actor class and is placeable in the level.
***/
    
var() int myInt;

/// This variable is an integer and can be accessed from the variable browser, but not modified in the level editor.

var() const rotator myRot;

/// This variable is a const rotator and can be accessed and modified in the level editor.
  
var localized int myLocalizedInt;

/// This variable is a localized integer and can only be accessed in the editor when the localization feature is enabled.

var() string myString;

/// This variable is a string and can be accessed and modified in the level editor.

var bool myBool;

/// This variable is a boolean and can be accessed and modified in the level editor.

var const dynamicArray<int> myIntArray;

/// This variable is a constant dynamic array of integers and can be accessed and modified in the level editor.

/// These are the different types of variables that can be used in UNREALSCRIPT.
      
/***
* This function updates the actor's location based on the given input coordinates.
*
* @param NewX - The new X-coordinate for the actor.
* @param NewY - The new Y-coordinate for the actor.
* @param NewZ - The new Z-coordinate for the actor.
***/
      
simulated event UpdateLocation(float NewX, float NewY, float NewZ)
{
    Location = vect(NewX, NewY, NewZ);
}

/***
* This function displays the current values of the variables in a message.
***/
      
simulated function DisplayVariables()
{
    `This actor has the following variables:
    `myInt = $myInt
    `myRot = $myRot
    `myLocalizedInt = $myLocalizedInt
    `myString = $myString
    `myBool = $myBool
    `myIntArray = $myIntArray
}

/***
* This is the default behavior when the actor is spawned in the level.
***/
exec function BeginPlay()
{
    Super.BeginPlay();
    DisplayVariables();
    // Call UpdateLocation function to set the initial location.
    UpdateLocation(50, -50, 0);
}

/***
* This function handles when the actor takes damage.
*
* @param HitInfo - Structure containing information about the hit.
* @param Damage - Amount of damage taken.
* @param Event - Event type.
* @param CausesHit - Whether the damage is caused by a hit.
***/
simulated event TakeDamage(out HitInfo, int Damage, vector Event, vector CausesHit)
{
    Super.TakeDamage(HitInfo, Damage, Event, CausesHit);
    // Show a message with the damages taken.
    `This actor has taken $Damage damages!
}