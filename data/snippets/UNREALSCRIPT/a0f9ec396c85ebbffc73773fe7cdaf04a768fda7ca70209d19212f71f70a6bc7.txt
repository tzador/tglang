/**
 * This is a class that represents a player in a game.
 * It contains properties and functions related to the player's behavior.
 */
class Player extends Actor
    placeable;

var PlayerController PlayerController;

var() name playerName;

var vector cameraOffset;

var bool isAlive;

var int moneyAmount;

/**
 * This function is called when the player is spawned into the game world.
 * It sets initial values for the player and initializes the player controller.
 */
function BeginPlay()
{
    Super.BeginPlay();
    
    // Set initial values for player properties
    playerName = "John Doe";
    cameraOffset = vect(0, 0, 50);
    isAlive = true;
    moneyAmount = 0;
    
    // Initialize the player controller
    PlayerController = Spawn(class'PlayerController');
    PlayerController.InitPlayer(this);
}

/**
 * This function is called when the player's health reaches 0.
 * It checks if the player has any remaining money and respawns them if they do.
 * If the player has no money left, the game is ended.
 */
function OnDeath()
{
    // Check if player has any remaining money
    if (moneyAmount > 0)
    {
        // Respawn player with initial values
        playerName = "John Doe";
        cameraOffset = vect(0, 0, 50);
        isAlive = true;
        
        // Substract a portion of the player's money
        moneyAmount -= 100;
        
        // Update player controller with new values
        PlayerController.SetPlayerName(playerName);
        PlayerController.SetCameraOffset(cameraOffset);
        PlayerController.SetAlive(isAlive);
        PlayerController.SetMoneyAmount(moneyAmount);
    }
    else
    {
        // End the game
        WorldInfo.Game.Broadcast(self, "Game Over");
        WorldInfo.Game.GameOver();
    }
}

/**
 * This function is called every frame to update the player's behavior.
 * It checks for player input and moves the player accordingly.
 */
function Tick(float DeltaTime)
{
    Super.Tick(DeltaTime);
    
    // Get player input
    local PlayerInput playerInput;
    PlayerController.GetInput(&playerInput);
    
    // Move player based on input
    if (playerInput.MoveForward > 0)
    {
        Move(vect(1, 0, 0));
    }
    else if (playerInput.MoveForward < 0)
    {
        Move(vect(-1, 0, 0));
    }
    else if (playerInput.MoveRight > 0)
    {
        Move(vect(0, 1, 0));
    }
    else if (playerInput.MoveRight < 0)
    {
        Move(vect(0, -1, 0));
    }
}