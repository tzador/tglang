class UDamageType;

/*
Define custom damage type inherited from UDamageType
*/
class UMyDamageType extends UDamageType
	/*
	Define property for the type of damage this is
	Defaults to PHYSICAL
	*/
	defaultproperties
	{
		DamageType="PHYSICAL"
	}

	/*
	Define function to get the damage type
	*/
	function GetDamageType() return DamageType;

	/*
	Define function to set the damage type
	*/
	function SetDamageType(DamageType NewType)
	{
		DamageType = NewType;
	}
}

/*
Define a custom weapon class for a rocket launcher
Inherits from UTWeapon
*/
class UMyRocketLauncher extends UTWeapon;

	/*
	Define property for the type of projectile this weapon shoots
	Defaults to RocketProjectile
	*/
	defaultproperties
	{
		ShootsProjectile(class'RocketProjectile')
	}

	/*
	Define function to calculate damage for a hit
	*/
	function CalculateDamage(controller Player, out float Damage, vector HitLocation, rotator HitRotation, optional trace HitInfo, optional Actor DamageCauser) 
	{
		local UMyDamageType MyDamageType;
		MyDamageType = UMyDamageType(class'DamageType:UMyDamageType', DamageCauser.DamageType);
		
		// Update the damage based on the damage type
		if(MyDamageType != None)
		{
			Damage *= MyDamageType.GetDamageTypeMultiplier(class <UMyDamageType>);
		}
	}
}