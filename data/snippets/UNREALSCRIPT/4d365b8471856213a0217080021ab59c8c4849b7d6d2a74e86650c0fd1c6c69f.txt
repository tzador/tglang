class Vehicle extends Actor
    native(Engine)
    abstract
    defaultproperties
    {
        Mesh=StaticMesh'VehicleMesh'
        SkeletalMesh=SkeletalMesh'VehicleSkelMesh'
        //These are the default properties of the Vehicle class. They specify that the actor will have both a static and skeletal mesh.

        Begin Object PhysicsVolume=PV
        Vehicle=PV.JeepPV
        FluidFriction=0.7
        ZoneGravityFactor=5.0
        //This specifies the physics volume for the vehicle, and sets the fluid friction and gravity factor for the zone.

        End Object
        Physics=PHYS_Flying
        //This specifies that the vehicle will use the flying physics model.

        CullDistance=30
        GotoState('Driving')
    }

state Driving
    extends VehicleState;

    function InitVehicleState()
    {
        Super.InitVehicleState();
        //This calls the parent function to initialize the vehicle state.

        Mesh.SetAllCollisionSize(Vehicle.StaticMesh.CollisionRadius, Vehicle.StaticMesh.CollisionHeight);
        //This sets the collision size of the vehicle to match the static mesh.

        StartVehicleEngine();
        //This calls the function to start the engine.
    }

    function SetupVehicleInput()
    {
        Super.SetupVehicleInput();
        //This calls the parent function to setup the vehicle input.

        SetVehicleControls(Controller);
        //This sets the vehicle controls based on input from the controller.
    }

    simulated event Tick(float DeltaTime)
    {
        Super.Tick(DeltaTime);
        //This calls the parent function to update the vehicle's state.

        //Custom code for vehicle physics and movement goes here.
    }