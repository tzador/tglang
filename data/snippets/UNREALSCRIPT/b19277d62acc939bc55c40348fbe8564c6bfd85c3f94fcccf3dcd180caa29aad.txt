//==============================================================
// Start Class
//==============================================================
class MyActor extends Actor
    // A comment
    // This variable stores the speed of the actor
    var float Speed;
    // This variable stores the rotation rate of the actor
    var Rotator RotationRate;
    
    // This function is called when the actor is spawned
    function BeginPlay()
    {
        // Call the parent BeginPlay function
        Super.BeginPlay();
        // Set the actor's tick interval to 0.1 seconds
        SetActorTickInterval(0.1);
    }
    
    // This function is called every tick
    function Tick(float DeltaTime)
    {
        // Call the parent Tick function
        Super.Tick(DeltaTime);
        // Rotate the actor according to the rotation rate 
        // and the delta time
        RotationRate *= DeltaTime;
        Rotate(RotationRate.Yaw, RotationRate.Pitch, RotationRate.Roll);
    }
    
    // This function is called when the actor is destroyed
    function Destroyed()
    {
        // Print a message
        `Log("Actor has been destroyed!");
        // Call the parent Destroyed function
        Super.Destroyed();
    }
    
    // This function is called to set the actor's speed
    function SetSpeed(float NewSpeed)
    {
        // Set the speed variable
        Speed = NewSpeed;
        // Print a message
        `Log("Actor speed set to " @(Speed));
    }
    
    // This function is called when the actor begins overlapping
    // another actor
    simulated function BeginOverlap(Actor OtherActor)
    {
        // Call the parent BeginOverlap function
        Super.BeginOverlap(OtherActor);
        // Check if the other actor is an instance of MyActor class
        if (OtherActor.IsA(MyActor))
        {
            // Print a message
            `Log("Actor has overlapped with another MyActor!");
        }
    }
    
    // This function is called when the actor takes damage
    event TakeDamage(int Damage, Controller instigatedBy, vector HitLocation, vector Momentum, class<DamageType> DamageType)
    {
        // Call the parent TakeDamage function
        Super.TakeDamage(Damage, instigatedBy, HitLocation, Momentum, DamageType);
        // Print a message
        `Log("Actor has taken damage!");
    }
}
//==============================================================
// End Class
//==============================================================