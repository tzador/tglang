class MyCharacter extends Actor       // Creates a new class named MyCharacter that extends the Actor class.
    native(Engine) class AController GetController();     // Declares a native function that returns an AController class object.

    var const Name NextLevel;        // Declares a const variable of type Name.
    var bool bIsSprinting;           // Declares a boolean variable named bIsSprinting.
    var array<MyItem> Inventory;     // Declares an array variable of type MyItem class.

    enum MovementStates{Walking, Running, Crouching};     // Declares an enum with three states for movement.

    function CheckHealth(int CurrentHealth) {     // Creates a function with an integer parameter.
        if(CurrentHealth <= 0) {            // Checks if the current health is less than or equal to 0.
            KillCharacter();                    // Calls the KillCharacter() function.
        }
        else {                          // If the health is not 0, the function continues.
            Log("Health is still above 0");     // Logs a message to the screen.
        }
    }
    
    simulated function Tick(float DeltaTime) {        // Creates a simulated function with a float parameter.
        Super.Tick(DeltaTime);                  // Calls the parent class's Tick function.
        MoveCharacter();                    // Calls the MoveCharacter() function.
    }
    
    state PickupState {                     // Creates a new state named PickupState.
        function BeginState() {           // Creates a function that runs when this state is entered.
            bIsSprinting = false;                   // Sets bIsSprinting to false.
            GotoState('WalkingState');         // Goes to the WalkingState.
        }
    }
    
    state WalkingState {
        function BeginState() {
            bIsSprinting = false;
        }

        function EndState() {
            Log("Leaving walking state");
        }
    }
    
    state RunningState {
        function BeginState() {
            bIsSprinting = true;
        }

        function EndState() {
            Log("Leaving running state");
        }
    }
    
    state CrouchState {
        function BeginState() {
            bIsSprinting = false;
        }

        function EndState() {
            Log("Leaving crouch state");
        }
    }

    state PostGraduation {           // Creates a new state named PostGraduation.
        Begin:                             // Begins the state.
        if(Inventory[0].IsGraduated) {  // Checks if the first item in the Inventory array has a variable called IsGraduated that is true.
            GotoState('GraduatedState');     // Goes to the GraduatedState.
        }
        else {
            GotoState('NotGraduatedState');  // Goes to the NotGraduatedState.
        }
    }
    
    state GraduatedState {
        function BeginState() {
            Log("Graduation achieved!");
        }
    }
    
    state NotGraduatedState {
        function BeginState() {
            Log("Keep studying!");
        }
    }