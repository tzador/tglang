/** 
 * Example code snippet in UnrealScript // 
 */
class PlayerController extends Object;
 
/** 
 * Sets the default camera for the player at begin play 
 */
event BeginPlay()
{
    local CameraManager camManager;
    local CameraViewpoint camViewpoint;
    
    // Spawn a camera manager subclass
    camManager = Spawn(class'MyCameraManager', self);
    
    // Create a new viewpoint
    camViewpoint = new(class'CameraViewpoint', self);
    
    // Set the camera view
    camViewpoint.ViewTarget.Actor = self;
    camViewpoint.ViewTargetActor = self;
    
    // Attach the camera to the player
    camManager.NextViewpoint = camViewpoint;
    camManager.SetCamera(camViewpoint);
    
    // Set camera as default for player controller
    SetCamera(camManager);
}
 
/**
 * Handles player input for movement and actions
 */
event PlayerInput(float DeltaTime)
{
    // Get movement inputs
    local float moveForward;
    local float moveRight;
    moveForward = GetInputAxisRaw('MoveForward');
    moveRight = GetInputAxisRaw('MoveRight');
    
    // Move player
    if (moveForward != 0 || moveRight != 0)
    {
        local Vector moveDirection;
        moveDirection = Normal(Vector(moveForward, moveRight, 0));
        SetActorRotation(Rotator(0, moveDirection, 0));
        Move(moveDirection * 500 * DeltaTime);
    }
    
    // Handle action inputs
    if (GetInput('Jump') == Pressed)
    {
        // Jump logic
    }
    if (GetInput('Fire') == Pressed)
    {
        // Fire logic
    }
}
 
/**
 * Returns the current camera manager for the player controller
 * @return CameraManager - The current camera manager attached to the player
 */
function CameraManager GetCurrentCameraManager()
{
    local CameraManager camManager;
    
    // Get the current camera manager
    camManager = GetLevelInfo().GetCameraManager(GetPlayerView().CameraStyles[0]);
    
    // If no camera manager is found, return the default camera manager
    if (camManager == none)
    {
        camManager = DefaultCameraManager();
    }
    
    return camManager;
}