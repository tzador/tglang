class WebberNPC expands NPC;

var bool bRoaming
var float RoamRange

/**
 * Function to handle NPC's movement
 */
function MoveNPC()
{
    local Vector NewLocation;
    
    // If NPC is not roaming, don't move
    if(!bRoaming)
        return;
    
    // Calculate random location within roam range
    local float RandX = Rand(RoamRange) * (Rnd() < 0.5 ? 1 : -1);
    local float RandY = Rand(RoamRange) * (Rnd() < 0.5 ? 1 : -1);
    
    // Set new location for NPC to move to
    NewLocation = Self.Location + vect(RandX, RandY, 0);

    // Move NPC to new location
    Self.MoveTo(NewLocation);
    
    // Delay movement by a random amount of time
    local float Delay = Rand(5) + 1;
    SetTimer('MoveNPC', Delay, false);
}

/**
 * Function to start NPC's roaming behavior
 */
function StartRoaming()
{
    // Set roaming to true and move NPC
    bRoaming = true;
    MoveNPC();
}

/**
 * Function to stop NPC's roaming behavior
 */
function StopRoaming()
{
    // Set roaming to false
    bRoaming = false;
    
    // Clear all timers
    ClearAllTimers();
}

/**
 * Function to initialize NPC's behavior
 */
function InitBehavior()
{
    // Spawn NPC and set its initial location
    Self.SpawnDefaultController();
    Self.SetBaseEyeheight();
    Self.SetRelativeLocation(Transform);
    
    // Give NPC behavior a delay before starting roaming
    local float Delay = Rand(10) + 5;
    SetTimer('StartRoaming', Delay, false);
}

// Tell the game that this actor can be deleted
DefaultProperties
{
    bStatic=false
    bNoSmooth=false
    bCollideActors=true
    bAutoActivate=true
    Begin Object Class=DynamicLightEnvironmentComponent Name=MyLightEnvironment
	End Object
	Components.Add(MyLightEnvironment)
}