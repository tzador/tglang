// This block of code handles a character's health and damage calculations
=event AnyDamaged(Actor tag OtherActor, float Damage, Object.Color TakeHitInfo, Vector HitLocation, Vector Momentum, class<DamageType> DamageType)

if(IsInState('SomeState')) // Checks if the character is currently in a certain state
{
    CharacterDamage += Damage; // Adds the incoming damage to the character's total damage taken

    local GiveDamageDamageType GiveDamageDamageType; // Creates a new instance of the GiveDamageDamageType class
    GiveDamageDamageType = new class'GiveDamageDamageType'; // Assigns the new instance to the variable

    local DamageTypeManager DamageTypeManager; // Creates a new instance of the DamageTypeManager class
    DamageTypeManager = DamageManager(Character.GetDamageTypeManager()); // Gets the character's damage type manager and assigns it to the variable

    local Character Character; // Creates a new instance of the Character class
    Character = character(OtherActor); // Casts the OtherActor to a Character class and assigns it to the variable

    Character.TakeDamage(Damage, HitLocation, Momentum, CharacterController(Object), DamageTypeManager, GiveDamageDamageType, TakeHitInfo); // Calls the TakeDamage function with the given parameters

    if(Character.CharacterHealth <= 0) // Checks if the character's health has reached 0 or below
    {
        SetState('Death'); // Sets the character's state to 'Death'
    }
}