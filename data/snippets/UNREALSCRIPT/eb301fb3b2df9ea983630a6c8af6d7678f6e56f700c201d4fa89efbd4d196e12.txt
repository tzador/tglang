class GameInfo extends Info
  /**
  * The main class for handling the game's settings and functions.
  * Contains various functions for controlling the game state and rules.
  * Inherits from the Info class.
  */

  // Variables
  var bool bAllowFriendlyFire;
  var int bDamageToSelfScale;
  var int bDamageToTeamScale;

  // Functions
  function SetFriendlyFire(bool bEnable)
    /**
    * Enables or disables friendly fire in the game.
    * @param bEnable Whether or not to allow friendly fire.
    */
  {
    bAllowFriendlyFire = bEnable;
  }

  function SetDamageScale(int SelfScale, int TeamScale)
    /**
    * Sets the damage scales for the self and team.
    * @param SelfScale The percentage of damage to inflict on self.
    * @param TeamScale The percentage of damage to inflict on team.
    */
  {
    bDamageToSelfScale = SelfScale;
    bDamageToTeamScale = TeamScale;
  }

  function ModifyHealth(int Amount, optional Controller EventInstigator, optional Object.DamType DamageType, optional Vector HitLocation, optional Vector Momentum)
    /**
    * Modifies the health of an actor.
    * @param Amount The amount to modify health by.
    * @param EventInstigator The player who caused the damage.
    * @param DamageType The type of damage being inflicted.
    * @param HitLocation The location where the damage was inflicted.
    * @param Momentum The direction and force of the damage.
    */
  {
    Super.ModifyHealth(Amount, EventInstigator, DamageType, HitLocation, Momentum);

    // Check if friendly fire is allowed and adjust damage based on team
    if (bAllowFriendlyFire && EventInstigator != None && EventInstigator.PlayerReplicationInfo.Team != None && Controller != None && EventInstigator.PlayerReplicationInfo.Team == Controller.PlayerReplicationInfo.Team) 
    {
      if (Controller == EventInstigator)
      {
        // Damage to self
        Amount = Amount * bDamageToSelfScale;
      }
      else
      {
        // Damage to team
        Amount = Amount * bDamageToTeamScale;
      }
    }

    // Apply the modified amount of damage
    Super.ModifyHealth(Amount, EventInstigator, DamageType, HitLocation, Momentum);
  }
endclass