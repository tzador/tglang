/**
* Function that checks if a character is within an accepted range
* @param Character The character to be checked
* @param Min The minimum accepted value
* @param Max The maximum accepted value
* @return Whether the character is within the range or not
*/
private function bool CheckCharacterInRange(Character CheckChar, int Min, int Max)
{
    if (CheckChar <= Max && CheckChar >= Min) //if the character is greater than or equal to the minimum and less than or equal to the maximum
    {
        return true; //return true
    }
    else //if the character is not within the range
    {
        return false; //return false
    }
}

/**
* Function that calculates the factorial of a given number
* @param Num The number to calculate the factorial of
* @return The factorial of the given number
*/
private function int CalculateFactorial(int Num)
{
    local int Factorial; //declare a local integer variable to store the factorial
    if (Num == 0) //if the number is 0
    {
        return 1; //return 1 as the factorial of 0 is 1
    }
    else //if the number is not 0
    {
        Factorial = 1; //initialize the factorial variable to 1
        for (local int i = 1; i <= Num; i++) //loop through all numbers from 1 to the given number
        {
            Factorial *= i; //multiply the factorial by the current number
        }
    }
    return Factorial; //return the calculated factorial
}

/**
* Class that represents a bank account
*/
class BankAccount extends Object 
{
    //member variables
    var private int AccountNumber;
    var private int Balance;
    var private bool IsActive;
    var private int Transactions;
    
    /**
    * Function that deposits money into the account
    * @param Amount The amount to be deposited
    */
    function DepositMoney(int Amount)
    {
        Balance += Amount; //add the deposit amount to the current balance
        Transactions++; //increment the number of transactions
    }

    /**
    * Function that withdraws money from the account
    * @param Amount The amount to be withdrawn
    */
    function WithdrawMoney(int Amount)
    {
        if (Balance >= Amount) //if the current balance is greater than or equal to the withdrawal amount
        {
            Balance -= Amount; //decrease the balance by the withdrawal amount
            Transactions++; //increment the number of transactions
        }
        else //if the balance is not enough for the withdrawal
        {
            Warn("Not enough funds in account to withdraw!"); //display a warning message
        }
    }

    /**
    * Function that gets the current balance of the account
    * @return The current balance
    */
    function GetBalance()
    {
        return Balance; //return the current balance
    }

    /**
    * Function that checks if the account is active or not
    * @return Whether the account is active or not
    */
    function IsAccountActive()
    {
        return IsActive; //return the value of the IsActive variable
    }
    
    /**
    * Function that gets the number of transactions made on the account
    * @return The number of transactions
    */
    function GetTransactionCount()
    {
        return Transactions; //return the number of transactions
    }
}