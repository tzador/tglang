class Shark extends Fish extends Animal
/**
 This code creates a new class called Shark that inherits from the Fish class, which in turn inherits from the Animal class in the UNREALSCRIPT programming language.
 **/
    const var MAX_SPEED = 20;
    const var ATTACK_DAMAGE = 50;
    
    simulated function BeginState(Name PreviousStateName)
    /**
     This code defines a function that will be executed when an instance of the Shark class is created and enters its initial state.
     Parameters:
     * Name PreviousStateName - the name of the state that was previously active, if any.
     **/
        Super.BeginState(PreviousStateName);
        MoveToRandomLocation();
        // Call to a custom function that moves the shark to a random location on the map.
        
        SetTimer(2.0, true, class'WorldInfo'.default, 'PlaySound', 'Assets.Sounds.SharkRoar');
        // Call to a built-in function that sets a repeating timer and calls a function on the WorldInfo class to play a sound.
        
        GotoState('Hunting');
        // Call to a built-in function that transitions the shark to the Hunting state.
        
    state Hunting extends Fish.HuntingState
    /**
     This code defines a state within the Shark class, which inherits from the HuntingState state within the Fish class.
     **/
        simulated function Tick(float DeltaTime)
        /**
         This code defines a function that will be called every frame while the Shark is in the Hunting state.
         Parameters:
         * float DeltaTime - the amount of time that has passed since the last frame.
         **/
            Super.Tick(DeltaTime);
            // Call to the Tick function in the parent HuntingState.
            
            local Actor Target;
            // Local variable to store the target actor.
            
            foreach VisibleCollidingActors(class'Animal' Other)
            // Loop through all visible animals on the map.
            {
                if (Other != self && Other.bCanBeDamaged)
                // Exclude the shark itself and any animals that cannot be damaged.
                {
                    Target = Other;
                    break;
                    // Set the first visible and damageable animal as the target.
                }
            }
            
            if (Target != none)
            // If a target was found, attack it.
            {
                CauseDamage(AttackDamage, Target, Target.Location, vect(1, 0, 0), class'SharkAttackDamageType');
                // Call to the built-in CauseDamage function, passing in the target's location and a custom damage type.
            }
        }
    }