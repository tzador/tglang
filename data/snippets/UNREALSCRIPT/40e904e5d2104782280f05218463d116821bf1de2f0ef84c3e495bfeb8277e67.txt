/**This class represents a player character in a video game
*@param PlayerName - The name of the player
*@param StartingHealth - The starting health of the player
*@param CurrentHealth - The current health of the player
*@param MaxHealth - The maximum health of the player
*/
class PlayerCharacter extends Actor
config(PlayerName, StartingHealth, CurrentHealth, MaxHealth)
placeable;

/**Defines the base stat attributes of the player character
*@param Strength - The strength attribute of the player character
*@param Dexterity - The dexterity attribute of the player character
*@param Intelligence - The intelligence attribute of the player character
*@param Charisma - The charisma attribute of the player character
*/
struct Stats
{
    var Int Strength;
    var Int Dexterity;
    var Int Intelligence;
    var Int Charisma;
};

/**Represents a weapon that can be equipped by the player character
*@param WeaponName - The name of the weapon
*@param Damage - The base damage of the weapon
*@param Accuracy - The accuracy of the weapon
*@param AmmoType - The type of ammunition used by the weapon
*/
class Weapon extends Object
placeable;

/**Function that handles equipping a weapon for the player
*@param NewWeapon - The weapon that is being equipped
*@param PlayerStats - The current stats of the player character
*/
function EquipWeapon(Weapon NewWeapon, Stats PlayerStats)
{
    //TODO: Implement logic for equipping weapons and adjusting player stats accordingly
}

/**Function that calculates the amount of damage dealt by a weapon attack
*@param WeaponUsed - The weapon used for the attack
*@param PlayerStats - The current stats of the player character
*@param EnemyStats - The stats of the enemy being attacked
*@returns - The calculated damage value
*/
function CalculateDamage(Weapon WeaponUsed, Stats PlayerStats, Stats EnemyStats)
{
    local float Damage;

    //Calculate damage based on player and enemy stats
    Damage = WeaponUsed.Damage + (PlayerStats.Strength * 2) - (EnemyStats.Dexterity * 0.5) + (PlayerStats.Intelligence * 0.3) + (PlayerStats.Charisma * 0.2);

    return Damage;
}