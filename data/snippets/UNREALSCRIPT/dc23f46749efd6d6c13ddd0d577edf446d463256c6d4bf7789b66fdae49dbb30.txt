// This code snippet creates a custom weapon with different firing modes and damage calculations

class CustomWeapon extends Weapon;

var() int NormalDamage;
var() int HeadshotDamage;
var() int AoeDamage;
var() float AoeRadius;

// Array of different firing modes for the weapon
var array<name> FiringModes;

exec function SetDamage(int Mode, int Damage)
{
    // Sets the damage for a specific firing mode
    switch (Mode)
    {
        case 0:
        {
            NormalDamage = Damage;
            break;
        }
        case 1:
        {
            HeadshotDamage = Damage;
            break;
        }
        case 2:
        {
            AoeDamage = Damage;
            break;
        }
    }
}

exec function SetAoeRadius(float Radius)
{
    // Sets the area of effect radius for the weapon
    AoeRadius = Radius;
}

exec function AddFiringMode(name ModeName)
{
    // Adds a new firing mode to the array of modes
    FiringModes.AddItem(ModeName);
}

exec function FireWeapon(int Mode, vector FireDirection)
{
    // Fires the weapon in the specified mode and direction
    switch (Mode)
    {
        case 0:
        {
            // Normal firing mode
            CauseDamage(NormalDamage, FireDirection);
            break;
        }
        case 1:
        {
            // Headshot firing mode
            CauseDamage(HeadshotDamage, FireDirection);
            break;
        }
        case 2:
        {
            // Area of effect firing mode
            foreach TouchingActors(class<BaseCharacter> TouchingActor)
            {
                // Calculate distance from weapon to actor
                local float Distance;
                Distance = VSize(TouchingActor.Location - Location);

                // If actor is within the aoe radius, apply damage
                if (Distance <= AoeRadius)
                {
                    CauseDamage(AoeDamage, TouchingActor.Location - Location);
                }
            }
            break;
        }
    }
}