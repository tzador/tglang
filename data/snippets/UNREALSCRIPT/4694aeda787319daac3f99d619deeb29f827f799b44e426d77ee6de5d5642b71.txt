/*
 * This is a complex code snippet written in UnrealScript
 * It showcases different syntax and functionalities in the language
 */

class MyCustomClass extends Object
    // Declaration of a custom class 'MyCustomClass' which inherits from the base class 'Object'
    // In UnrealScript, all objects inherit from 'Object' class
    // 'extends' keyword is used for inheritance
        
    const float MY_CUSTOM_CONSTANT = 25.0
    // Declaration of a constant variable 'MY_CUSTOM_CONSTANT' with value 25.0
    // 'const' keyword is used to declare a constant variable
        
    var bool bIsInitialized
    // Declaration of a boolean variable 'bIsInitialized'
    // 'var' keyword is used to declare variables
        
    protected function Initialize()
    // Declaration of a function 'Initialize' with 'protected' access modifier
    // 'protected' keyword is used to specify that the function can only be accessed by this class and its subclasses
        
        super.Initialize()
        // 'super' keyword is used to call the parent class function with the same name
        
        // Performing some operations to initialize the object
        bIsInitialized = true
        
    defaultproperties
    // 'defaultproperties' is a special function used to specify default values for class properties
        
        bIsInitialized = false
	    // Setting the default value for the variable 'bIsInitialized'
	    
    simulated function int CalculateSomething(int Param1, int Param2)
    // Declaration of a simulated function 'CalculateSomething' which returns an integer
    // 'simulated' keyword is used to specify that the function will be run on the client and server to replicate its behavior
    // 'function' keyword is used to define a function
    // 'int' is the return type of the function
    // 'CalculateSomething' is the name of the function
    // '(int Param1, int Param2)' are the parameters passed to the function
        
        local int Result
        // Declaration of a local variable 'Result', which can only be accessed within this function
        
        // Performing some calculations and assigning the result to the 'Result' variable
        Result = Param1 * Param2
        
        return Result
        // Returning the result of the calculation
        
    simulated event OnCustomEvent(int Param1, int Param2) 
    // Declaration of a simulated event 'OnCustomEvent' which takes two integer parameters
    // 'event' keyword is used to define an event
    // 'int Param1, int Param2' are the parameters for the event
        
        // Responding to the event by calling a function and passing the parameters
        CallSomeFunction(Param1, Param2)
        
    function BeginState()
    // Declaration of a function 'BeginState' which is called when the object enters a new state
    // 'function' keyword is used to define a function
    // 'BeginState' is the name of the function
        
        // Calling the parent class function
        super.BeginState()
        
        // Performing some initialization operations
        bIsInitialized = true
        
        local MyCustomClass OtherObject
        // Declaration of a local variable 'OtherObject' of type 'MyCustomClass'
        
        // Assigning value to the variable by creating a new instance of the class
        OtherObject = new MyCustomClass()
        
        // Calling a simulated function on the newly created object and storing the result in a variable
        local int SomeValue = OtherObject.CalculateSomething(20, 10)
        
        // Checking the value of the variable and performing different operations based on the value
        if (SomeValue == 200)
        {
            // If the value is 200, call an event on the current object and pass the SomeValue variable as a parameter
            self.OnCustomEvent(SomeValue, 300)
            
            // Print a message to the log
            `Log("SomeValue is equal to 200")`
        }
        else
        {
            // If the value is not 200, call a function on the current object and pass the SomeValue variable as a parameter
            self.CallSomeFunction(SomeValue)
            
            // Print a message to the log
            `Log("SomeValue is not equal to 200")`
        }
        
        // Creating an array and adding some values
        local array<int> Numbers
        Numbers.AddItem(5)
        Numbers.AddItem(10)
        
        // Using a for loop to iterate through the array and print the values to the log
        for (local int i = 0; i < Numbers.Length; i++)
        {
            `Log("Value at index " $ i $ " is " $ Numbers[i])`
        }
                
        // Using a foreach loop to iterate through the array and print the values to the log
        foreach Numbers(num)
        {
            `Log("Value is " $ num)`
        }
        
    defaultproperties
    // 'defaultproperties' is used to specify default values for properties in a state
        
        // Assigning default values for properties in the state
        bIsInitialized = false
        MY_CUSTOM_CONSTANT = 50.0
        // Notice that we can change the value of a constant variable in a state, even though it was declared as 'const' in the class declaration
        // This is possible because constants can have different values in different states
EndState
// End of the class declaration