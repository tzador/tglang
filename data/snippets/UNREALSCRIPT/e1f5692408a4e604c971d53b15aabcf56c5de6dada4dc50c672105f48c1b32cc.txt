// This is a struct that represents a player in a multiplayer game
struct MultiplayerPlayer extends Object 
    placeable
    config(Spawnable)

    // Player's name
    var string Name;

    // Player's health
    var int Health;

    // Player's current location
    var vector Location;

    // Player's inventory
    var array<Item> Inventory;

    // Function to take damage
    simulated function TakeDamage(int damageAmount)
    {
        Health -= damageAmount;
        
        // Check if player is still alive
        if (Health <= 0)
        {
            Die();
        }
    }

    // Function to add item to inventory
    function AddToInventory(Item newItem)
    {
        Inventory.AddItem(newItem);
    }

    // Function to remove item from inventory
    function RemoveFromInventory(Item oldItem)
    {
        Inventory.RemoveItem(oldItem);
    }

    // Function to respawn player at a new location
    function Respawn(vector newLocation)
    {
        Health = 100;
        Location = newLocation;
    }

    // Function to handle player death
    function Die()
    {
        // Display message to player
        `Log("You have died.");

        // Remove player from game
        `Destroy();

        // Respawn player after a set amount of time
        `SetTimer(10.0, false, `Respawn(getRandomRespawnLocation()));
    }

    // Function to get a random respawn location
    function getRandomRespawnLocation()
    {
        // Generate random coordinates
        local int randomX;
        local int randomY;
        randomX = RandRange(-1000, 1000);
        randomY = RandRange(-1000, 1000);

        // Return a vector with the random coordinates
        return vector(randomX, randomY, 0);
    }

    // Function to handle player movement
    simulated function Move(vector direction)
    {
        // Calculate new location
        local vector newLocation;
        newLocation = Location + direction * 10;

        // Check if new location is within bounds
        if (newLocation.X > 0 && newLocation.X < 1000 && newLocation.Y > 0 && newLocation.Y < 1000)
        {
            Location = newLocation;
        }
    }
}