&&
/**
 * This class represents a player character in the game.
 */
class PlayerPawn extends Pawn
    hidden const int MAX_SPEED = 500; // Maximum movement speed of the player
    protected const int MAX_HEALTH = 100; // Maximum health of the player
    protected var int currentSpeed; // Current movement speed of the player
    protected var int health; // Current health of the player

    /**
     * Called when the player takes damage.
     * @param damage The amount of damage to be taken.
     * @param instigatedBy The object that caused the damage.
     * @param damageType The type of damage being taken.
     * @param hitLocation The location where the player was hit.
     */
    simulated function TakeDamage(int damage, Controller instigatedBy, optional out vector hitLocation, optional name damageType) {
        super.TakeDamage(damage, instigatedBy, hitLocation, damageType); // Calls the parent function

        health -= damage; // Subtract damage from current health
        if (health <= 0) {
            health = 0; // If current health is zero or less, player has died
            // Perform death actions
        }
    }

    /**
     * Called when the player presses the jump button.
     * Performs a jump action based on the current movement speed.
     */
    function Jump() {
        if (currentSpeed >= MAX_SPEED / 2) {
            // Perform high jump action
        } else {
            // Perform normal jump action
        }
    }

    /**
     * Called every frame to update the player's movement.
     * @param delta The amount of time that has passed since the last frame.
     */
    protected function Tick(float delta) {
        local vector moveDirection = GetBaseAimRotation(); // Gets the direction that the player is facing
        moveDirection *= currentSpeed * delta; // Multiplies the direction by the current movement speed and delta time for smooth movement
        SetActorLocation(moveDirection, true); // Moves the player to the new location

        if (currentSpeed >= MAX_SPEED) {
            currentSpeed = MAX_SPEED; // Cap movement speed at maximum value
        }
    }

    /**
     * Increases the player's movement speed by a specified amount.
     * @param delta The amount to increase the speed by.
     */
    public function IncreaseSpeed(float delta) {
        currentSpeed += delta; // Add delta to current speed
    }
    
    defaultproperties
    {
        health = MAX_HEALTH; // Sets default health to maximum value
    }
&&