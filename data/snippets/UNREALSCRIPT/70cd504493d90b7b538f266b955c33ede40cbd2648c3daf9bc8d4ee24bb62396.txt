class MyActor extends Actor
    placeable;
var() float MyFloat;
var() int MyInt;
var() string MyString;
var() bool MyBool;
var() vector MyVector;
var() rotator MyRotator;
var() name MyName;
var() struct MyStruct;

function bool UpdateLogic()
{
    if(MyBool) // checks if MyBool is true
    {
        MyFloat = UpdateFloat(); // calls UpdateFloat function and stores return value in MyFloat
        switch(MyName) // checks value of MyName
        {
            case 'Option 1': // if MyName is 'Option1'
                MyInt = 1;
            case 'Option 2': // if MyName is 'Option2'
                MyInt = 2;
        }
    }
    else
    {
        if(MyInt == 3) // checks if MyInt is equal to 3
        {
            MyInt = UpdateInt(); // calls UpdateInt function and stores return value in MyInt
            for(int i = 0; i < 10; i++) // loops 10 times
            {
                MyVector[i] = UpdateVector(i); // calls UpdateVector function with current loop index as argument and stores return value in MyVector array at current index
            }
        }
        else
        {
            MyString = UpdateString(MyStruct); // calls UpdateString function with MyStruct as argument and stores return value in MyString
            while(MyInt < 100) // loops while MyInt is less than 100
            {
                MyRotator = UpdateRotator(MyInt); // calls UpdateRotator function with current value of MyInt as argument and stores return value in MyRotator
                MyInt += 10; // increments MyInt by 10
            }
        }
    }
    
    if(MyBool && MyInt > 50) // checks if both conditions are true
    {
        MyStruct.bIsValid = true; // sets bIsValid property of MyStruct to true
    }
    
    return true; // returns true as the output of the function
}

function float UpdateFloat()
{
    return (MyFloat + 2) * 3; // returns a modified value of MyFloat
}

function int UpdateInt()
{
    int Result;
    Result = MyInt * 10; // multiplies MyInt by 10 and stores the result in Result
    return Result; // returns Result as the output of the function
}

function vector UpdateVector(int index)
{
    vector Result;
    Result.X = index * 2; // sets X component of Result to double the value of index
    Result.Y = MyInt; // sets Y component of Result to the current value of MyInt
    Result.Z = MyFloat; // sets Z component of Result to the current value of MyFloat
    return Result; // returns Result as the output of the function
}

function string UpdateString(struct InStruct)
{
    string Result;
    Result = "This is a" $ InStruct.Name $ "with a value of" $ string(InStruct.Value); // concatenates strings and values and stores the result in Result
    return Result; // returns Result as the output of the function
}

function rotator UpdateRotator(int value)
{
    return rotator(value, value + 90, value - 90); // returns an updated rotator with modified values based on the input argument
}