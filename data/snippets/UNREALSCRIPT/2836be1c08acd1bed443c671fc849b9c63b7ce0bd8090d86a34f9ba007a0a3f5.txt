/**
 * This is a class that represents a player character in a game.
 */
class PlayerCharacter extends Pawn
    abstract
    notplaceable
    noteditinline
    hidecategories (Input, Actor, Collision)
/**
 * The name of the player.
 */
var(SaveGame)
    string PlayerName
/**
 * The total score of the player.
 */
var(SaveGame)
    int Score
/**
 * A boolean value indicating if the player is alive.
 */
var(bool) bIsAlive
/**
 * Constructor function for the player character.
 *
 * @param StartLoc  The starting location of the player.
 * @param StartRot  The starting rotation of the player.
 */
function InitPlayer( vector StartLoc, rotator StartRot )
    super.InitStartSpot( StartLoc, StartRot )
    SetCollisionSize( 40, 88, 62)
    SetPhysics( PHYS_Falling )
/**
 * Function for handling player input.
 * Moves the player based on input from keyboard or gamepad.
 *
 * @param MoveForwardValue   The value for moving forward.
 * @param MoveRightValue     The value for moving right.
 * @param bPressedJump       A boolean indicating if the jump button is pressed.
 * @param AimUpValue         The value for aiming up.
 * @param AimRightValue      The value for aiming right.
 */
function HandleMovement( float MoveForwardValue, float MoveRightValue, bool bPressedJump, float AimUpValue, float AimRightValue )
    local vector MovementDir
    if ( AimUpValue != 0 )
        MovementDir = GetAimVector() * AimUpValue
    else
        MovementDir = forward * MoveForwardValue + right * MoveRightValue
    Velocity = vector( 0, 0, 0)
    AddMovementInput( MovementDir, delta )
    if ( bPressedJump )
        Jump()
    if ( AimRightValue != 0 )
        AddYawInput( AimRightValue )