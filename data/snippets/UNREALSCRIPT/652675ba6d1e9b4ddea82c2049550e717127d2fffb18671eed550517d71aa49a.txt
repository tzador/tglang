//Declare custom weapon class
class CustomWeapon extends Weapon;

//Set properties for custom weapon
var(SKCustomWeapon) int CustomDamage;
var(SKCustomWeapon) float CustomFireRate;

//Initialize custom weapon
function InitCustomWeapon()
{
    CustomDamage = 50;
    CustomFireRate = 0.5;
    WeaponType = "Assault Rifle";
    AmmoType = "AR Ammo";
    MaxAmmo = 100;
    CurrentAmmo = MaxAmmo;
    bUnlimitedAmmo = false;
    bInfiniteClip = false;
}

//Shooting function
function Shoot()
{
    //Check for available ammo
    if(CurrentAmmo > 0)
    {
        //Decrease ammo
        CurrentAmmo--;
        //Calculate spread
        #[delta]meta.SpawnSpreadRadians = CustomSpread;
        //Fire weapon
        super.Shoot();
        }
}

//Reload function
function Reload()
{
    //Check if weapon is already reloading
    if(bReloading)
    {
        //Log message
        `Log("Weapon is already reloading.");
    }
    //If weapon is not already reloading and has less than max ammo
    else if(CurrentAmmo < MaxAmmo)
    {
        //Calculate reload time
        local ReloadTime;
        ReloadTime = MaxAmmo - CurrentAmmo;
        //Start reloading
        #[delta]SetTimer(ReloadTime, false, 'CompleteReload');
        //Set reloading flag
        bReloading = true;
        //Log message
        `Log("Reloading weapon.");
    }
    //If weapon has max ammo
    else
    {
        //Log message
        `Log("Weapon is already fully loaded.");
    }
}

//Reload complete function
function CompleteReload()
{
    //Set current ammo to max
    CurrentAmmo = MaxAmmo;
    //Reset reloading flag
    bReloading = false;
    //Log message
    `Log("Weapon reloaded.");
}

//Utility function to check available ammo
function bool HasAmmo()
{
    if(CurrentAmmo > 0)
    {
        return true;
    }
    else
    {
        return false;
    }
}

//Override default fire rate
function GetFireRate()
{
    return CustomFireRate;
}

//Override default damage
function GetDamage()
{
    return CustomDamage;
}