/*
This code snippet is a custom actor class in UnrealScript.
It is used for creating an interactive object in the game.
*/
class MyCustomActor extends Actor;

/*
Properties:
- Health: indicates the health of the actor
- ObjectName: name of the object
- bIsInteractable: determines whether the object can be interacted with
*/
var int Health;
var editconst Name ObjectName;
var bool bIsInteractable;

/*
PostBeginPlay() function, called when the actor begins gameplay.
It initializes the object's properties, prints the object's name, and checks if it is interactable.
*/
simulated function PostBeginPlay() 
{
    super.PostBeginPlay();

    //initialize properties
    Health = 100; 
    ObjectName = "MyCustomActor";
    bIsInteractable = true;

    //print name and check if interactable
    log("Object name: " $ ObjectName);
    if(bIsInteractable)
    {
        log("Object is interactable");
    }
}

/*
TakeDamage() function, called when the actor takes damage.
It deducts the damage from the actor's health and prints the new health.
*/
function TakeDamage(int InDamage, Pawn EventInstigator, Object.Vector HitLocation, Object.Vector Momentum, name DamageType)
{
    Health -= InDamage;
    log("Object took " $ InDamage $ " damage. Health remaining: " $ Health);
}

/*
Interact() function, called when the player interacts with the object.
It prints a message and updates the interactable status.
*/
function Interact()
{
    log("Player interacted with object.");
    bIsInteractable = false;
}

/*
IsInteractable() function, returns the interactable status of the object.
@return - bool: interactable status
*/
function bool IsInteractable()
{
    return bIsInteractable;
}

/*
IsAlive() function, returns whether the object is alive (health > 0).
@return - bool: alive status
*/
function bool IsAlive()
{
    return Health > 0;
}