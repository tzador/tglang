//This code snippet implements a basic inventory system in UnrealScript.

class Inventory extends Object
  //An inventory is a collection of items that a player character can carry.

  //The variables and functions in this class will be inherited by all subclasses.

  var(Saved) itemDataMap<String, ItemData> itemDataMap;
  //A map that stores the item data for every item in the inventory.

  var private const MAX_ITEMS = 10;
  //The maximum number of items the inventory can hold.

  var private local array<Item> inventoryArray;
  //An array to store the actual items in the inventory.

  //Function for adding an item to the inventory.
  function AddItem(Item newItem)
  {
    //Check if the inventory is already full.
    if (inventoryArray.Length == MAX_ITEMS)
    {
      return false;
    }
    //Check if the item is already in the inventory.
    if (inventoryArray.Contains(newItem))
    {
      return false;
    }
    //Add the item to the item data map.
    itemDataMap[newItem.GetName()] = newItem.GetItemData();

    //Add the item to the inventory array.
    inventoryArray.AddItem(newItem);

    //Return true to indicate that the item was successfully added.
    return true;
  }

  //Function for removing an item from the inventory.
  function RemoveItem(Item itemToRemove)
  {
    //Check if the item is present in the inventory.
    if (!inventoryArray.Contains(itemToRemove))
    {
      return false;
    }

    //Remove the item from the item data map.
    itemDataMap.Remove(itemToRemove.GetName());

    //Remove the item from the inventory array.
    inventoryArray.RemoveItem(itemToRemove);

    //Return true to indicate that the item was successfully removed.
    return true;
  }

  //Function for getting the total weight of all items in the inventory.
  function GetTotalWeight() out float totalWeight
  {
    totalWeight = 0.0;

    //Loop through all items in the inventory and add their weights.
    foreach (Item item in inventoryArray)
    {
      totalWeight += item.GetWeight();
    }

    //Return the total weight.
    return totalWeight;
  }

  //Function for checking if the inventory is full.
  function IsFull() out bool bIsFull
  {
    bIsFull = (inventoryArray.Length == MAX_ITEMS);
    return bIsFull;
  }

  //Function for checking if a particular item is present in the inventory.
  function HasItem(Item itemToCheck) out bool bHasItem
  {
    bHasItem = inventoryArray.Contains(itemToCheck);
    return bHasItem;
  }

  //Function for getting the item data for a particular item in the inventory.
  function GetItemData(Item itemToGet) out ItemData itemData
  {
    if (!itemDataMap.Contains(itemToGet.GetName()))
    {
      //Return a default item data if the item is not in the inventory.
      itemData = new ItemData();
    }
    else
    {
      //Return the item data from the map.
      itemData = itemDataMap[itemToGet.GetName()];
    }
  }

//Subclass of Inventory that adds specific functionality for a player character inventory.

class PlayerInventory extends Inventory
{
  //The player's level.
  var private int playerLevel;

  //Function for increasing the player's level.
  function IncreaseLevel(int amount)
  {
    playerLevel += amount;
  }
}