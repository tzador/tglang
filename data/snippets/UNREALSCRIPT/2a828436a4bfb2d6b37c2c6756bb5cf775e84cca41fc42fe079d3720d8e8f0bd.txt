class WeaponInventory extends Actor
    placeable; /// Annotation

    /// Variables
    var() private int MaxSlots; // private integer value
    var() private int CurrentSlot; // private integer value
    var inventoryStruct SlotArray; // variable declaration of struct type

    /// Function that adds slots to the inventory
    private function AddSlots(int NumSlotsToAdd)
    {
        if (NumSlotsToAdd <= 0) // checks if the number of slots to add is less than or equal to 0
        {
            `log("\"Cannot add negative slots to inventory\"");` // logs an error message
            return; // exits the function
        }

        if (CurrentSlot + NumSlotsToAdd > MaxSlots) // checks if adding the specified number of slots will exceed maximum capacity
        {
            `log("\"Inventory is already full, cannot add more slots\"");` // logs an error message
            return; // exits the function
        }

        for (local int i = 0; i < NumSlotsToAdd; i++) // loop to add the specified number of slots
        {
            SlotArray.AddItem(new instigator); // calls the AddItem function of the struct to add an item to the inventory
            CurrentSlot++; // increments the current slot number
        }
    }

    /// Function that removes slots from the inventory
    private function RemoveSlots(int NumSlotsToRemove)
    {
        if (NumSlotsToRemove <= 0) // checks if the number of slots to remove is less than or equal to 0
        {
            `log("\"Cannot remove negative slots from inventory\"");` // logs an error message
            return; // exits the function
        }

        if (CurrentSlot - NumSlotsToRemove < 0) // checks if removing the specified number of slots will result in a negative slot number
        {
            `log("\"Inventory does not have enough slots, cannot remove\"");` // logs an error message
            return; // exits the function
        }

        for (local int i = 0; i < NumSlotsToRemove; i++) // loop to remove the specified number of slots
        {
            SlotArray.RemoveItem(new instigator); // calls the RemoveItem function of the struct to remove an item from the inventory
            CurrentSlot--; // decrements the current slot number
        }
    }

    /// Function that uses an item from the inventory
    private function UseItem(string ItemName)
    {

        for (local int i = 0; i < SlotArray.NumItems; i++) // loop through the inventory to find the specified item
        {
            if (SlotArray.Items[i].Name == ItemName) // checks if the item name matches the specified item
            {
                SlotArray.Items[i].Use(); // calls the Use function of the item to use it
                return; // exits the function
            }
        }

        `log("\"Item not found in inventory\"");` // logs an error message if the item is not found
    }
defaultproperties
{
    MaxSlots = 10; // sets the default maximum number of slots to 10
    CurrentSlot = 0; // sets the default current slot number to 0
    SlotArray = inventoryStruct(); // initializes the inventory struct
}