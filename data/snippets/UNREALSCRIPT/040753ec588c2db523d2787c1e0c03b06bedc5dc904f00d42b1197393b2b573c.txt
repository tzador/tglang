/**
 * This is a code snippet in UNREALSCRIPT
 * It defines a class called 'PlayerController' that extends the built-in 'Actor' class
 * The class has a few variables and functions that control the player's movement and interactions
**/

class PlayerController extends Actor;

var float MaxWalkSpeed;
var Vector Forward;
var Vector Right;

/**
 * This function checks for user input and moves the PlayerController accordingly
 * It takes in a float 'Time' as a parameter
**/
exec function UpdateMovement(float Time)
{
    local Vector MoveDirection;
    
    if(Input.KeyState(Key.W) == 1)
    {
        MoveDirection = Forward;
    }
    
    if(Input.KeyState(Key.S) == 1)
    {
        MoveDirection = MoveDirection - Forward;
    }
    
    if(Input.KeyState(Key.A) == 1)
    {
        MoveDirection = MoveDirection + Right;
    }
    
    if(Input.KeyState(Key.D) == 1)
    {
        MoveDirection = MoveDirection - Right;
    }
    
    if(VSize(MoveDirection) != 0.0)
    {
        MoveDirection = Normal(MoveDirection);
        SetMovementSpeed(MoveDirection * MaxWalkSpeed * Time);
    }
}

/**
 * This function calculates and sets the new location of the PlayerController
 * It takes in a vector 'NewLoc' as a parameter
**/
exec function SetMovementSpeed(Vector NewLoc)
{
    local Vector Delta; 
    
    Delta.X = (NewLoc.X - Location.X) * AbsRotation.Axis.X + (NewLoc.Y - Location.Y) * AbsRotation.Axis.Y + (NewLoc.Z - Location.Z) * AbsRotation.Axis.Z; 
    Delta.Y = (NewLoc.X - Location.X) * AbsRotation.Normal.X + (NewLoc.Y - Location.Y) * AbsRotation.Normal.Y + (NewLoc.Z - Location.Z) * AbsRotation.Normal.Z;
    Delta.Z = (NewLoc.X - Location.X) * AbsRotation.Tangent.X + (NewLoc.Y - Location.Y) * AbsRotation.Tangent.Y + (NewLoc.Z - Location.Z) * AbsRotation.Tangent.Z; 
     
    Location.X += Delta.X;
    Location.Y += Delta.Y;
    Location.Z += Delta.Z;
    RotationMatrix = Inverse(Rotation); 
}

/**
 * This function is called when the player interacts with an object in the game world
 * It takes in an 'Actor' object as a parameter and checks if it has an interactable component
 * If it does, it calls the 'OnInteract' function on that component
**/
exec function Interact(Actor Other)
{
    local InteractableComponent InteractableComp;
    InteractableComp = InteractableComponent(Other.GetComponentByClass(class'InteractableComponent'));
    
    if(InteractableComp != None)
    {
        InteractableComp.OnInteract();
    }
}

/**
 * This function is called when the player is within range of a pickup object
 * It takes in a 'Pickup' object as a parameter and adds it to the player's inventory
**/
exec function Pickup(Pickup Pick)
{
    local Inventory InventoryComp;
    InventoryComp = Inventory(MyGameObject.GetComponentByClass(class'Inventory'));
    
    if(InventoryComp != None)
    {
        InventoryComp.AddItem(Pick);
    }
}

/**
 * This function is called when the player presses the fire button
 * It checks if the player has a weapon equipped and calls the 'Fire' function on that weapon
**/
exec function Fire()
{
    local Weapon EquippedWeapon;
    EquippedWeapon = myActor.Weapons[myActor.CurrentWeaponIndex];
    
    if(EquippedWeapon != None)
    {
        EquippedWeapon.Fire();
    }
}