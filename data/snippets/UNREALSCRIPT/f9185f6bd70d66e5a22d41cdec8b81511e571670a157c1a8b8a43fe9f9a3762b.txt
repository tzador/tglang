//==============================================================
// Class declaration for the 'PlayerController' class
// Inherited from the 'Actor' class
//==============================================================
class PlayerController extends Actor
// 'implements' keyword is used to define what interfaces this class implements
// In this case, we are implementing the 'PlayerInputInterface'
implements PlayerInputInterface
// 'multi extends' keyword is used to define subclasses this class inherits from
// In this case, we are inheriting from the 'HUD' class
multi extends HUD
// 'replication' keyword is used to define if this class is replicated or not
// In this case, the class is set to 'replicated' meaning it can be simulated on both the server and client
replication(replicated)
// 'config' keyword is used to specify if this class should inherit its default properties from the specified config class
// In this case, the configured properties will be inherited from the 'PlayerControllerConfig' class
config(PlayerControllerConfig)

//==============================================================
// State Definitions
//==============================================================
// 'state' keyword is used to define states within the class
// States are used to control the flow of execution within the class
// In this case, we have defined two states: 'Idle' and 'Walking'
state Idle
state Walking

//==============================================================
// Properties
//==============================================================
// 'var' keyword is used to define member variables
// In this case, we have defined a string variable 'PlayerName' with a default value of "New Player"
var const string PlayerName = "New Player"
// 'config' keyword is used to specify if this property should be inherited from the configured class
// In this case, the property will be inherited from the 'PlayerControllerConfig' class
// The variable 'PlayerHealth' is set as a 'config' property which means it can be modified from outside the class
config(PlayerHealth)
// 'editconst' keyword is used to specify that this property can only be edited in the UnrealEd tool and not in-game
editconst
var int PlayerHealth
// 'editinline' keyword is used to specify that this property can be edited in the Class Viewer of the UnrealEd tool
editinline
var Weapon PlayerWeapon
// 'replicated' keyword is used to specify if this property is replicated or not
// In this case, the property is set to 'replicated' meaning it can be simulated on both the server and client
replicated
var bool bIsPlaying
// 'advanced' keyword is used to specify that this property should only be visible in 'Advanced' mode of the UnrealEd tool
// The variable 'Score' is set as an 'advanced' property which means it will only be visible when 'Advanced' mode is enabled
// Additionally, the variable is also marked as 'config' which means it can be modified from outside the class
advanced(config)
var int Score

//==============================================================
// Functions
//==============================================================
// 'function' keyword is used to define a function within the class
// In this case, we have defined a 'PlaySound' function which takes in a 'Sound' actor as a parameter
// The function is set to 'server' which means it can only be called on the server
// The function also has a 'net' qualifier which means it is automatically called on the client when replicated from the server
function server PlaySound(net Actor Sound)
{
    // 'if' statement is used to only execute the code within if the condition is met
    if(GameInfo(Game).MapName == "DM-Tutorial")
    {
        // 'log' keyword is used to log a message to the console
        log("Playing sound on server...")
    }
    // 'foreach' loop is used to iterate through a collection of objects
    // In this case, we are iterating through all players in the game and playing the sound on each player's client
    foreach GameReplicationInfo(Player).AllPlayers(Player)
    {
        // 'client' qualifier means this code will only be executed on the clients
        client PlaySound(Sound);
    }
}

//==============================================================
// Interfaces
//==============================================================
interface PlayerInputInterface
{
    // 'exec' qualifier means that this function can be invoked through console commands
    exec function LookUp(float Value)
    exec function Turn(float Value)
}