class MyPlayer extends player;

/**
 * Derived class for controlling the player in-game.
 */
class MyPlayer extends player;

/*
This is a basic class that extends the built-in UnrealScript 'player' class.
The purpose of this class is to add additional functionality to the player object.
The object will inherit all properties and functions from the 'player' class and can then be further extended.
*/

var() int health;

/**
 * Variable for storing player's health.
 * This variable is set to be editable in the editor and is of type 'int' (integer).
 * It will be used to keep track of the player's health and will be updated throughout the game.
 */

defaultproperties
{
   health=100;
   /**
    * Default value for the 'health' variable.
    * When an instance of this object is created, the 'health' variable will be initialized to 100.
    */
}

/**
 * Function called when the player takes damage.
 * @param int Damage - The amount of damage taken by the player.
 * @returns Whether the player is still alive or not.
 */
function bool TakeDamage(int Damage)
{
   health -= Damage;
   //Subtract the damage taken from the player's current health.
   
   if(health <= 0)
   {
      return false;
      //If the player's health drops to 0 or below, they are considered to be dead.
      //Return false to indicate that the player is no longer alive.
   }
   else
   {
      return true;
      //If the player's health is still above 0, they are still alive.
      //Return true to indicate that the player is still alive.
   }
}

/**
 * Function called when the player picks up an object.
 * @param Object PickupObject - The object that the player picks up.
 */
function PickupObject(Object PickupObject)
{
   if(PickupObject.IsA("Weapon"))
   {
      local Weapon W;
      W = Weapon(PickupObject);
      //Cast the picked up object to a 'Weapon' type.
      
      switch(W.WeaponType)
      {
         case 0:
            //If the picked up weapon is a pistol, add 10 ammo to the player's pistol ammo count.
            PistolAmmo += 10;
            break;
         case 1:
            //If the picked up weapon is a rifle, add 5 ammo to the player's rifle ammo count.
            RifleAmmo += 5;
            break;
         default:
            break;    
      }
   }
   else if(PickupObject.IsA("HealthPack"))
   {
      local HealthPack HP;
      HP = HealthPack(PickupObject);
      //Cast the picked up object to a 'HealthPack' type.
      
      if(health < 100)
      {
         health += HP.HealthToAdd;
         //Add the health specified by the health pack to the player's current health.
         
         if(health > 100)
         {
            health = 100;
            //Limit the player's health to a maximum of 100.
         }
         
         HP.Destroy();
         //Destroy the health pack object after it has been used.
      }
   }
}

/**
 * Event called when the player's health changes.
 * @param int NewHealth - The new value of the player's health.
 */
event HealthChanged(int NewHealth)
{
   //Code to handle any necessary actions when the player's health changes.
}

/**
 * Event called when the player dies.
 */
event Died()
{
   //Code to handle any necessary actions when the player dies, such as respawning or game over.
}