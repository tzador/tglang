class Weapon extends Actor;

/* This class represents a weapon in the game. */

// Declare member variables
var() int Ammo;
var() float FireRate;
var() int Damage;

/* 
Initialize the weapon with the given ammo, fire rate and damage.
@param Ammo - the maximum amount of ammo for the weapon
@param FireRate - the rate at which the weapon fires, in seconds
@param Damage - the amount of damage the weapon inflicts
*/
function Initialize(int Ammo, float FireRate, int Damage)
{
    // Set the values for our member variables
    this.Ammo = Ammo;
    this.FireRate = FireRate;
    this.Damage = Damage;
}

/*
Fire the weapon. 
@return the amount of damage inflicted by the weapon
*/
function Fire() int
{
    // Check if there is any ammo left
    if (Ammo > 0)
    {
        // Reduce ammo by 1 and return the damage value
        Ammo--;
        return Damage;
    }
    else
    {
        // If no ammo, return 0 damage
        return 0;
    }
}

/*
Reload the weapon to full ammo.
*/
function Reload()
{
    // Set ammo back to maximum amount
    Ammo = MaxAmmo;
}

/* 
Override default behavior for taking damage.
@param DamageAmount - the amount of damage taken
@param DamageEvent - information about the damage event
@param EventInstigator - the actor responsible for the damage
*/
function TakeDamage(int DamageAmount, Controller DamageEvent, Pawn EventInstigator)
{
    // Call the parent function first
    Super.TakeDamage(DamageAmount, DamageEvent, EventInstigator);
    
    // Only take damage if not invincible
    if (bInvincible == false)
    {
        // Reduce ammo by the damage amount
        Ammo -= DamageAmount;
        
        // Destroy the weapon if ammo reaches 0
        if (Ammo <= 0)
        {
            Destroy();
        }
    }
}

// Override default behavior for destroying the weapon
function Destroyed()
{
    // Trigger explosion effect and play sound
    ExplosionEffect();
    PlaySound(ExplosionSound);
    
    // Call the parent function last
    Super.Destroyed();
}

/* 
Override default behavior for picking up the weapon.
@param Other - the actor who picked up the weapon
*/
function Pawn OnPickup(Pawn Other)
{
    // Verify that the actor is a pawn
    if (Other.IsA('Pawn'))
    {
        // Cast to pawn and store reference
        local Pawn OtherPawn;
        OtherPawn = Pawn(Other);

        // Attach the weapon to the pawn's hand socket
        AttachTo(OtherPawn, 'hand_r');
        // Set the weapon as the active weapon for the pawn
        OtherPawn.ActivateInventory(This);
    }
    
    // Call the parent function last
    Super.OnPickup(Other);
}