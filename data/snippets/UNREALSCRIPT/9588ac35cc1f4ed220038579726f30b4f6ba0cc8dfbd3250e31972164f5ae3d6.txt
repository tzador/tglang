class MyActor extends Actor; // creates a new class MyActor that inherits from the Actor class

var() bool bIsActive; // creates a boolean variable with the default property specifier

simulated event PostBeginPlay() // creates a simulated event that is called after the actor is spawned
{
    Super.PostBeginPlay(); // calls the parent class's PostBeginPlay function

    if (bIsActive) // checks if the bIsActive variable is true
    {
        `BeginRotation(FRotator(-90, 0, 0), 2, EInterpMethod.IM_Linear, 
        ECR_Collision)`; // rotates the actor by -90 degrees around the x-axis in 2 seconds using linear interpolation and enabling collision response
        `SetTimer(5.0, true, 'ChangeMaterial', ECR_Overlap)`; // sets a timer that calls the ChangeMaterial function after 5 seconds and allows overlapping
    }
}

function ChangeMaterial() // creates a new function
{
    `DynamicMaterialProperty MaterialProperty = GetInstancedDynamicMaterialProperty(0)`; // creates a reference to the first instanced dynamic material property
    `if (MaterialProperty != none)` // checks if the material property is not null
    {
        `MaterialProperty.SetScalarParameterValue('Opacity', 0.5)`; // sets the scalar parameter value 'Opacity' to 0.5, making the actor partially transparent
        `MaterialProperty.SetVectorParameterValue('Color', RGB(255, 0, 0))`; // sets the vector parameter value 'Color' to red
    }
}

defaultproperties // sets the default properties for the class
{
    bIsActive = true // sets the default value for the bIsActive variable
    Begin Object Class = StaticMeshComponent // begins a new object and specifies the class as StaticMeshComponent
    StaticMesh = StaticMesh'PillarMesh' // sets the StaticMesh property to the PillarMesh asset
    End Object // ends the object
    Mesh = StaticMeshComponent'MyMesh' // sets the Mesh property to the StaticMeshComponent named MyMesh
    Begin Object Class = BoxComponent // begins a new object and specifies the class as BoxComponent
    End Object // ends the object
    CollisionComponent = BoxComponent'MyCollision' // sets the CollisionComponent property to the BoxComponent named MyCollision
}