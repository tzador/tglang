/** 
* This class represents a player in the game. 
* It handles player input, movement, and health.
*/
class MyPlayer extends Actor
    config (Game);

/**
* Properties
*/
var vector MoveDirection; // Stores the direction the player is moving in
var float Health; // Stores the player's health
var float Speed; // Stores the player's movement speed

/**
* Functions
*/

/**
* This function handles the player's input and updates the MoveDirection variable.
*/
function HandleInput()
{
    // Get the player's input and store it in a vector
    local vector Inputs;
    Input.GetKeyAxes(Inputs);

    // Update the MoveDirection based on the player's input
    MoveDirection = vect(Inputs[Y], Inputs[X], 0);
}

/**
* This function handles the player's movement.
*/
function Move()
{
    // Calculate the player's movement based on the MoveDirection and Speed
    local vector PlayerMovement = MoveDirection * Speed * DeltaTime;

    // Move the player by the calculated amount
    SetLocation(Location + PlayerMovement);
}

/**
* This function handles the player's health.
*/
function UpdateHealth(float Delta)
{
    // Update the player's health by the given amount
    Health += Delta;
}

/**
* Event called when the player takes damage.
* @param Damager - The actor who caused the damage
* @param DamageAmount - The amount of damage taken
*/
event TakeDamage(Actor Damager, float DamageAmount)
{
    // Update the player's health based on the damage taken
    UpdateHealth(-DamageAmount);

    // If the player's health reaches 0, call the Die function
    if (Health <= 0)
        Die();
}

/**
* This function handles the player's death.
*/
function Die()
{
    // Destroy the player actor
    Destroy();
}

defaultproperties
{
    // Set default values for properties
    Health = 100; 
    Speed = 500;
    CollisionType = COLLIDE_CustomDefault;
}