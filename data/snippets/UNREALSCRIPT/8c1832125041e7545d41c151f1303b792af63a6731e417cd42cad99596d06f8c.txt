// This code is responsible for creating a new instance of the PlayerController class.
class MyPlayerController extends PlayerController
    placeable;

// Declaration of variables for controlling the movement of the character.
var Vector MoveDirection;

// Declaration of the function for handling player input.
event PlayerInput(double DeltaTime)
{
    ` ` `
    // Checks for movement input and stores it to the MoveDirection variable.
    SetMovementInput(InputVector(moveX, moveY), 0);

    // Checks for jump input and executes if triggered.
    if (Pressed(InputKey.Key_Jump))
    {
        PerformJump();
    }

    // Checks for crouch input and executes if triggered.
    if (Pressed(InputKey.Key_Crouch))
    {
        PerformCrouch();
    }

    // Checks for fire input and executes if triggered.
    if (Pressed(InputKey.Key_Fire))
    {
        FireWeapon();
    }
    ` ` `
}

// Declaration of function for handling character movement.
function SetMovementInput(Vector Input, float DeltaTime)
{
    ` ` `
    // Calculates the movement direction using the input vector and the current rotation of the character.
    MoveDirection = RotationToVector(GetControlRotation()) * Input;

    // Normalizes the movement direction to prevent faster movement when moving diagonally.
    MoveDirection = Normal(MoveDirection);

    // Multiplies the movement direction by the character's movement speed and delta time.
    MoveDirection *= MoveSpeed * DeltaTime;

    // Makes sure the character is not trying to move into a solid object.
    if (MoveDirection.z > 0 && Pawn.Trace(MoveDirection) != None)
    {
        MoveDirection.z = 0;
    }
    ` ` `
}

// Declaration of function for handling character jumping.
function PerformJump(float DeltaTime)
{
    ` ` `
    // Applies upward impulse force to the character.
    Pawn.SetPhysics(PHYS_Falling);
    Pawn.Acceleration.z = JumpForce * DeltaTime;
    ` ` `
}

// Declaration of function for handling character crouching.
function PerformCrouch()
{
    ` ` `
    // Applies crouching settings to the character.
    Pawn.CollisionRadius = CrouchRadius;
    Pawn.CollisionHeight = CrouchHeight;
    Pawn.SetPhysics(PHYS_Walking);
    ` ` `
}

// Declaration of function for handling character weapon firing.
function FireWeapon()
{
    ` ` `
    // Spawns a projectile at the weapon's location and rotation.
    local Projectile Projectile;

    Projectile = Spawn(class'Projectile', self, 'None', Vector(GetLocation()), Rotator(GetRotation()));
    ` ` `
}