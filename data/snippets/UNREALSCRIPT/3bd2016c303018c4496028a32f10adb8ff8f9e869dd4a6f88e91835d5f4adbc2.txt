/*
This is a complex code snippet in UNREALSCRIPT
It creates a simple moving platform in a game level.
*/

class MovingPlatform extends Actor;
/* This defines the MovingPlatform class as a subclass of the Actor class in UNREALSCRIPT */

var Vector StartingLocation;
/* This variable stores the starting location of the platform */

var int MaxDistance;
/* This variable stores the maximum distance the platform can move */

var float Speed;
/* This variable stores the speed at which the platform moves */

var float WaitTime;
/* This variable stores the amount of time the platform waits before returning to its starting position */

var bool bMovingForward;
/* This boolean variable keeps track of the platform's movement direction */

var float CurrentDistance;
/* This variable keeps track of the current distance the platform has moved */

var Vector InitialLocation;
/* This variable stores the initial location of the platform before it starts moving */

var float Timer;
/* This variable keeps track of the time elapsed */

function InitPlatform()
{
	/* This function sets the initial values for variables and registers the platform for event updates */
	
	StartingLocation = Location;
	InitialLocation = Location;
	bMovingForward = true;
	CurrentDistance = 0;
	Timer = 0;
	RegisterForEvents(Level);
}

event Timer()
{
	/* This event is called every frame and moves the platform based on its speed and direction */
	
	if(bMovingForward)
	{
		CurrentDistance += Speed * DeltaTime;
		SetPhysics(Physics_None);
	}
	else
	{
		CurrentDistance -= Speed * DeltaTime;
	}
	
	/* This checks if the platform has reached its maximum distance and changes its direction accordingly */
	if(CurrentDistance >= MaxDistance)
	{
		bMovingForward = false;
		SetPhysics(Physics_Vehicle);
	}
	
	if(CurrentDistance <= 0)
	{
		bMovingForward = true;
	}
	
	/* This moves the platform based on the current distance and direction */
	if(bMovingForward)
	{
		Location = InitialLocation + CurrentDistance;
	}
	else
	{
		Location = InitialLocation - CurrentDistance;
	}
}

function Touch(Actor Other)
{
	/* This function is called whenever an actor touches the platform and makes it move */
	Timer = WaitTime;
}

event Timer()
{
	/* This event is called every frame and reduces the wait time, making the platform return to its starting position */
	Timer -= DeltaTime;
	if(Timer <= 0)
	{
		bMovingForward = true;
		SetPhysics(Physics_Vehicle);
	}
}