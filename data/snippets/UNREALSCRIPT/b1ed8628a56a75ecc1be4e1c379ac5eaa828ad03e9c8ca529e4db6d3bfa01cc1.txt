// This is a basic class declaration in UnrealScript
class MyActor extends Actor
    native // Specify that this class will have code written in UnrealScript

    config // Specify that this class will have a configuration file associated with it

    transient // Specify that this class will not be saved during level save operations
    // The above modifier is useful when a class has properties that should not be saved or need to be re-initialized on level load

    // Declare a property named MyInt of type int
    var int MyInt;

    // Declare a property named MyFloat of type float
    var float MyFloat;

    // Declare a function named DoSomething that takes in two parameters, a string and an Actor
    // The function does not return any value (void)
    // The function is marked as static, meaning it can be called directly from the class
    // The function is set to be limited to the owner of the class
    static native function DoSomething(string SomeString, actor SomeActor) limited;

    // Declare a default constructor for the class
    // This will be called whenever an instance of the class is created
    protected native function Construct();

    // Declare a function called BeginPlay
    // This will be called when the actor is spawned or when gameplay begins
    event BeginPlay()
    {
        // Set the value of MyInt to 5
        MyInt = 5;

        // Set the value of MyFloat to the result of a function call that takes in the current time as a parameter
        // The function is a built-in function that returns a float value
        MyFloat = WorldInfo.GetTimeSeconds();

        // Call the DoSomething function with "Hello" as the string parameter and the owner of the class as the Actor parameter
        DoSomething("Hello", Owner);
    }

    // Declare a function called Tick
    // This will be called every frame
    event Tick(float DeltaTime)
    {
        // Print a message to the log
        `Log("MyInt: " @ MyInt @ " MyFloat: " @ MyFloat);

        // Increment the value of MyInt by 1
        MyInt++;
    }
    
    // This event is called when the actor is destroyed
    event Destroyed()
    {
        // Print a message to the log
        `Log("MyActor has been destroyed!");
        
        // Remove the actor from the level
        Level.GetLevelInfo().Actors.Remove(self);
    }