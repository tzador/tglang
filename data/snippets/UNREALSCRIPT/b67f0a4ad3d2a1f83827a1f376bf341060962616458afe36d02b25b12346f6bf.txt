// This is a simple code snippet in UnrealScript
class MyActor extends Actor // Defining a new class named MyActor, which extends the Actor class
  within(GameInfo) // Indicating that this class can only exist within the GameInfo class
    // Variables
    var const int MAX_HEALTH; // Declaring a constant integer variable named MAX_HEALTH
    var() int CurrentHealth; // Declaring a variable named CurrentHealth, which can be accessed publicly

    // Functions
    function bool TakeDamage(int DamageAmount) // Declaring a function named TakeDamage, which takes in an integer parameter named DamageAmount
      if (CurrentHealth - DamageAmount <= 0) // Checking if the actor's health will go below 0 after taking damage
        Destroy(); // Calling the built-in Destroy() function to destroy the actor
        return True; // Returning true to indicate that the actor has been destroyed
      else // If the actor's health will not go below 0
        CurrentHealth -= DamageAmount; // Subtracting the damage amount from the actor's current health
        return False; // Returning false to indicate that the actor is still alive
      endif // Ending the if statement
    endfunction // Ending the function

    ///
    ///  Native function declared with preceding three forward slashes
    ///
    ///  This function can only be called from within UnrealScript
    ///
    ///  This means that it cannot be overridden or called from other programming languages
    ///
    native(202) final protected function SetActorLocation(Object.Vector NewLocation) // Declaring a native function named SetActorLocation, which takes in a Vector parameter named NewLocation and can only be called from within UnrealScript
      if (// Some condition checking logic) // Checking some conditions before setting the actor's location
        Super.SetActorLocation(NewLocation); // Calling the parent class's SetActorLocation function to set the actor's location
      endif
    endfunction // Ending the function
endclass // Ending the class