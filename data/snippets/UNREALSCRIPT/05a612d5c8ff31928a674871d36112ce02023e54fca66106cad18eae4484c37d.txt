var() editinline const Texture myTexture; // creates a variable 'myTexture' with an editable and constant specifier and a 'Texture' data type, allowing a texture to be assigned to it
var() float myFloat; // creates a variable 'myFloat' with an editable specifier and a 'float' data type, allowing for a decimal number to be assigned to it
var() class<Actor> myActorClass; // creates a variable 'myActorClass' with an editable specifier and a 'class<Actor>' data type, allowing for an Actor class to be assigned to it
var() editconst string myString = "Hello World!"; // creates a variable 'myString' with both editable and constant specifiers, a 'string' data type, and initializes it with the value "Hello World!"
var() int myInt; // creates a variable 'myInt' with an editable specifier and an 'int' data type, allowing for a whole number to be assigned to it
const int MAX_NUM = 10; // creates a constant 'MAX_NUM' with a value of 10, cannot be changed later
enum(EnemyType) // creates an enumerator 'EnemyType'
{
    ET_Grunt, // first enumerator with a value of 0
    ET_Boss, // second enumerator with a value of 1
    ET_BossElite, // third enumerator with a value of 2
}
var() EnemyType myEnemyType; // creates a variable 'myEnemyType' with an editable specifier and an 'EnemyType' data type, allowing for one of the enumerator values to be assigned to it
struct WeaponInfo // creates a structure 'WeaponInfo'
{
    var string weaponName; // adds a variable 'weaponName' of type 'string' to the structure
    var float weaponDamage; // adds a variable 'weaponDamage' of type 'float' to the structure
    WeaponInfo(string name, float damage) // creates a constructor for the structure, allowing for the variables to be initialized when creating a new instance of the structure
    {
        weaponName = name; // sets the value of 'weaponName' to the passed in 'name' parameter
        weaponDamage = damage; // sets the value of 'weaponDamage' to the passed in 'damage' parameter
    }
}
var() WeaponInfo myWeapon; // creates a variable 'myWeapon' with an editable specifier and a 'WeaponInfo' data type, allowing for a new instance of the structure to be assigned to it
myWeapon = WeaponInfo("Sword", 10.5); // creates a new instance of the structure and assigns it to 'myWeapon', passing in the weapon name and damage values as parameters
foreach AllActors(class'PlayerController',PC) // loops through all the PlayerController classes in the level and assigns it to 'PC'
{
    PC.ClientMessage("You have defeated the boss!"); // calls the 'ClientMessage' function on each PlayerController class, displaying the message "You have defeated the boss!"
}
event CalledFunction(int parameter) // creates an event function called 'CalledFunction' with an integer parameter
{
    local int result = parameter * 2; // creates a local variable 'result' and assigns it the value of the passed in 'parameter' multiplied by 2
    if (result > 10) // checks if 'result' is greater than 10
    {
        `Log("Result is greater than 10!"); // logs the message "Result is greater than 10!"
    }
    else // if 'result' is not greater than 10
    {
        `Log("Result is less than or equal to 10."); // logs the message "Result is less than or equal to 10."
    }
}
CalledFunction(5); // calls the 'CalledFunction' event with the value of 5 as the parameter
defaultproperties // specifies default values for the class
{
    myTexture = Texture'Interface/Background'; // sets the default value for 'myTexture' to the specified texture asset
    myFloat = 3.14; // sets the default value for 'myFloat' to 3.14
    myActorClass = class'Player'; // sets the default value for 'myActorClass' to the 'Player' class
    myInt = 0; // sets the default value for 'myInt' to 0
    myEnemyType = ET_Grunt; // sets the default value for 'myEnemyType' to the 'ET_Grunt' enumerator
}