//======================================================== ClassicButtonMenu

//========================================================================
// Base class for standard menu widgets, like the
// in-game notifications menu. This menu is placed on the HUD.
//========================================================================
class ClassicButtonMenu extends GFxUIScene;

/**
 * Event called when the menu widget has been initialized.
 */
event Init();

/**
 * Event called when the user presses the confirm button
 * on the controller or on the keyboard.
 */
event OnPressConfirm();

/**
 * Event called when the user selects an item in the menu.
 *
 * @param Index - The index of the selected item.
 */
event OnItemSelect(int Index);

/**
 * Creates a button widget and adds it to the menu.
 *
 * @param ButtonLabel - The text to be displayed on the button.
 * @param ButtonIndex - The index of the button in the menu.
 * @param bIsSelected - Whether or not the button should be selected.
 */
function AddButton(string ButtonLabel, int ButtonIndex, bool bIsSelected)
{
    local GFxObject ButtonMC;
    local GFxObject ButtonTextMC;

    // Create the button and set its position and size.
    ButtonMC = CreateObject("Button", "ButtonMC", MenuMovie.MenuMC);
    ButtonMC.SetPosition(10, 10 + 20 * ButtonIndex);
    ButtonMC.SetSize(250, 20);

    // Set the label for the button.
    ButtonTextMC = ButtonMC.CreateObject("TextField", "ButtonTextMC", ButtonMC);
    ButtonTextMC.SetText(ButtonLabel);
    ButtonTextMC.SetTextAlign("center");

    // Set the button's index and selection state.
    ButtonMC.Set("ButtonIndex", ButtonIndex);
    ButtonMC.Set("IsSelected", bIsSelected);

    // Add the button to the menu's array of buttons.
    Buttons[ButtonIndex] = ButtonMC;
}

/**
 * Clears the selection from all the buttons in the menu.
 */
function ClearSelection()
{
    local int ButtonIndex;
    for(ButtonIndex = 0; ButtonIndex < Buttons.Length; ButtonIndex++)
    {
        Buttons[ButtonIndex].Set("IsSelected", false);
    }
}

/**
 * Sets the selection on the specified button.
 *
 * @param ButtonIndex - The index of the button to set as selected.
 */
function SetSelection(int ButtonIndex)
{
    // Clear selection from all buttons.
    ClearSelection();

    // Set selection on specified button.
    Buttons[ButtonIndex].Set("IsSelected", true);
}

//========================================================================
// Main menu object.
//========================================================================
class MainMenu extends ClassicButtonMenu;

// Menu buttons.
var Buttons[5];

/**
 * Initializes the main menu.
 */
event Init()
{
    // Add buttons to the menu.
    AddButton("New Game", 0, false);
    AddButton("Load Game", 1, false);
    AddButton("Options", 2, false);
    AddButton("Credits", 3, false);
    AddButton("Exit Game", 4, false);
}

/**
 * Event called when the user presses the confirm button on the controller
 * or on the keyboard.
 */
event OnPressConfirm()
{
    local int SelectedIndex = 0;

    // Get the selected button's index.
    for (SelectedIndex = 0; SelectedIndex < Buttons.Length; SelectedIndex++)
    {
        if (Buttons[SelectedIndex].Get("IsSelected"))
        {
            break;
        }
    }

    // Switch to different game states based on the selected button.
    switch (SelectedIndex)
    {
        case 0: // New Game
        {
            GotoState("NewGameState");
            break;
        }
        case 1:  // Load Game
        {
            GotoState("LoadGameState");
            break;
        }
        case 2:  // Options
        {
            GotoState("OptionsMenuState");
            break;
        }
        case 3: //Credits
        {
            GotoState("CreditsMenuState");
            break;
        }
        case 4: //Exit Game
        {
            Level.Game.Exit();
            break;
        }
    }
}

/**
 * Event called when the user selects an item in the menu.
 *
 * @param Index - The index of the selected item.
 */
event OnItemSelect(int Index)
{
    // Set selection on the specified button.
    SetSelection(Index);
}