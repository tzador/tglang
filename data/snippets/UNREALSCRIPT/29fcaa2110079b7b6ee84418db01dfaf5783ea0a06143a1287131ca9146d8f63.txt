// This code snippet shows how to create a custom character class in UnrealScript

class MyCustomCharacter extends Actor;
// The 'class' keyword creates a new class in UnrealScript
// 'MyCustomCharacter' is the name of our class that inherits from the built-in class 'Actor'

properties
(
    name MyCharacterName;
    // This creates a new property called 'MyCharacterName' of type 'name'
    // 'name' is a built-in UnrealScript type that stores a string
    // Properties are variables that can be accessed by other classes and objects
    
    bool bIsAlive;
    // This creates a new property called 'bIsAlive' of type 'bool'
    // 'bool' is a built-in UnrealScript type that stores a boolean value (true or false)
    
    skeletalmesh MyCharacterMesh;
    // This creates a new property called 'MyCharacterMesh' of type 'skeletonmesh'
    // 'skeletalmesh' is an UnrealScript type that stores a skeletal mesh component for our character
)

defaultproperties
{
    Begin Object Class=SkeletalMeshComponent Name=MyCharacterMeshComp
    // Here we create a new object of the built-in class 'SkeletalMeshComponent'
    // We set the object's name to 'MyCharacterMeshComp'
    // This object will be responsible for rendering our character's skeletal mesh
    // The 'Begin Object' and 'End Object' keywords wrap around the object's properties
    
    SkeletalMesh=SkeletalMesh'PathToMyCharacterMesh'
    // Next, we specify the skeletal mesh to be used for our character
    // We do this by assigning the 'SkeletalMesh' property of our object to a specific skeletal mesh
    // 'SkeletalMesh' is a property of the 'SkeletalMeshComponent' class
    
    End Object
    // We end our 'Begin Object' block here
    
    MyCharacterMesh=MyCharacterMeshComp
    // This sets our custom property 'MyCharacterMesh' to be equal to our newly created object 'MyCharacterMeshComp'
    // This allows us to access and manipulate our character's skeletal mesh component
}

// Next, we define any necessary functions for our class
// Functions are blocks of code that can be called by other classes and objects

function SetCharacterName(name NewName)
// 'function' keyword is used to define a function
// 'SetCharacterName' is the name of our function, followed by any parameters it takes in (in this case, a 'name' type variable called 'NewName')
{
    MyCharacterName = NewName;
    // This line sets our custom property 'MyCharacterName' to the value of the parameter 'NewName'
}

function KillCharacter()
{
    bIsAlive = false;
    // This function sets our property 'bIsAlive' to 'false', indicating the character is no longer alive
    // We can call this function to "kill" our character during gameplay
}

function MoveCharacter()
{
    // This function would include code for moving our character, such as changing its position or rotation
}

// We can also define event handlers for our class, which are functions that are automatically called when a specific event occurs

event Damage(int DamageAmount, Pawn InstigatedBy, Vector HitLocation, Vector Momentum, class<DamageType> DamageType)
// 'event' keyword is used to define an event handler
// 'Damage' is the name of the event, followed by any parameters it takes in
// This particular event is automatically called when our character receives damage
{
    // Here we can add code to handle what happens when our character receives damage
}

// Finally, we can add any other functions or event handlers as needed for our custom character class
// This is just a basic example and the code can be expanded upon to add more features and functionality