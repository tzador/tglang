// Creates a class that acts as a parent to other classes
class Pawn extends Actor;
 
/**
* Sets the default properties of the pawn 
*
* @param Owner The owner of the pawn
* @param StartLoc The starting location of the pawn
* @param StartRot The starting rotation of the pawn
* @param TimerRate The rate at which the pawn's timer will tick
**/
 
simulated function SetDefaultProperties(Actor Owner, out vector StartLoc, out rotator StartRot, int TimerRate)
{
    Super.SetDefaultProperties();
 
    Owner = None; // Set owner to none
    StartLoc = vect(0,0,0); // Set starting location to origin
    StartRot = rot(0,0,0); // Set starting rotation to zero
    TimerRate = 1; // Set timer rate to 1
 
    // set static mesh properties
    if (StaticMesh != None)
    {
        Mesh = Spawn(class'StaticMeshActor', self);
        Mesh.StaticMeshComponent.StaticMesh = StaticMesh;
        Mesh.bCollideActors = false;
    }
}
 
/**
* Moves the pawn to a specified location
*
* @param TargetLoc The location to move to
**/
exec function MoveToTarget(vector TargetLoc)
{
    // check if target location is valid
    if (TargetLoc != vect(0,0,0))
    {
        SetLocation(TargetLoc); // set pawn location to target location
    }
}
 
/**
* Rotates the pawn to a specified rotation
*
* @param TargetRot The rotation to rotate to
**/
exec function RotateToTarget(rotator TargetRot)
{
    // check if target rotation is valid
    if (TargetRot != rot(0,0,0))
    {
        SetRotation(TargetRot); // set pawn rotation to target rotation
    }
}
 
/**
* Runs a timer based on the set TimerRate
**/
simulated function Timer()
{
    // increment timer based on TimerRate
    Timer += TimerRate;
 
    // call MoveToTarget and RotateToTarget every 2 seconds
    if (Timer % 2 == 0)
    {
        MoveToTarget(vect(500, 0, 0));
        RotateToTarget(rot(0, 90, 0));
    }
}
 
/**
* Event called when the pawn takes damage
*
* @param DamageAmount The amount of damage taken
* @param Event The damage event
* @param HitLocation The location where the damage occurred
* @param Momentum The amount of force to apply from the damage
* @param HitInfo Information about the hit that caused the damage
**/
event TakeDamage(int DamageAmount, Controller Event, vector HitLocation, vector Momentum, class DamageType HitInfo)
{
    Super.TakeDamage(DamageAmount, Event, HitLocation, Momentum, HitInfo);
 
    Health -= DamageAmount; // decrease health by the amount of damage taken
     
    if (Health <= 0)
    {
        // if health reaches 0, destroy the pawn and print a message
        Destroy();
        `LOG("Pawn destroyed!");
    }
}
 
/**
* Event called when the pawn successfully completes a navigation path
*
* @param Path The navigation path that was completed
* @param Success Whether or not the path was completed successfully
**/
event PostSuccessPathNavigation(NavigationHandle Path, bool Success)
{
    Super.PostSuccessPathNavigation(Path, Success);
 
    if (Success)
    {
        `LOG("Path successfully navigated!");
    }
}
 
/**
* Event called when a new pawn is spawned
*
**/
event PostBeginPlay()
{
    Super.PostBeginPlay();
 
    `LOG("Pawn spawned!"); // print a message on spawn
}