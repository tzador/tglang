class Weapon extends Actor

/**
* This is a class for weapons in the game. 
* It contains various variables and functions that are necessary for a weapon to function within the game.
*/

const int MAX_AMMO = 100
var int currentAmmo
var() name weaponName
var float damage
var bool bIsEquipped
var bool bCanFire

/**
* The above variables are used to store information about the weapon such as the maximum ammo, current ammo,
* weapon name, damage, and whether or not the weapon is equipped and can fire.
*/

// Default values for variables
defaultproperties
{
    currentAmmo=MAX_AMMO
    weaponName="Shotgun"
    damage=50
    bIsEquipped=false
    bCanFire=true
}

/**
* The defaultproperties section sets the default values for the variables when the weapon is spawned in the game world.
*/

// Functions for equipping and using the weapon
function Equip()
{
    bIsEquipped=true
}

function Use()
{
    if(bIsEquipped && currentAmmo > 0)
    {
        // Code for firing the weapon
        currentAmmo--
    }
}

/**
* The Equip function sets the bIsEquipped variable to true when the weapon is equipped by the player. 
* The Use function checks if the weapon is equipped and has enough ammo before firing it.
* It also decreases the currentAmmo variable by 1 after firing.
*/

// Event for when the weapon runs out of ammo
event AmmoDepleted()
{
    bCanFire=false
    // Code for displaying a message to the player or switching to another weapon
}

/**
* The AmmoDepleted event is triggered when the currentAmmo reaches 0. 
* It sets the bCanFire variable to false and can contain code for displaying a message to the player or switching to another weapon.
*/

// Functions for reloading ammo and picking up ammo items
function Reload(int AmmoAmount)
{
    // Code for reloading the weapon
    currentAmmo += AmmoAmount
    if(currentAmmo > MAX_AMMO)
        currentAmmo = MAX_AMMO
}

function PickUpAmmo(AmmoAmount)
{
    currentAmmo += AmmoAmount
    if(currentAmmo > MAX_AMMO)
        currentAmmo = MAX_AMMO
}

/**
* The Reload function takes in an AmmoAmount and adds it to the currentAmmo variable.
* It also checks if the currentAmmo exceeds the MAX_AMMO and caps it if necessary.
* The PickUpAmmo function is similar to Reload but is used when the player picks up an ammo item in the game world.
*/

// Event for when the weapon is dropped by the player
event Dropped(controller instigatedBy)
{
    bIsEquipped=false
    bCanFire=false
    // Code for dropping the weapon from the player's inventory
}

/**
* The Dropped event is triggered when the player drops the weapon from their inventory.
* It sets both the bIsEquipped and bCanFire variables to false and can contain code for removing the weapon from the player's inventory.
*/