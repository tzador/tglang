class MyCustomPawn extends Pawn; //creates a new class named "MyCustomPawn" that extends the built-in "Pawn" class

var() bool bIsAlive; //creates a publicly editable boolean variable to determine if the pawn is alive

var() int Health; //creates a publicly editable integer variable to track the pawn's health

event TakeDamage(int DamageAmount, Pawn InstigatedBy, vector HitLocation, vector Momentum, class<DamageType> DamageType); //creates an event that handles damage being dealt to the pawn

simulated event Dying(); //creates a simulated event that is called when the pawn is dying

simulated event Tick(float DeltaTime); //creates a simulated event that is called every game tick

defaultproperties //contains default values for all the variables in the class
{
    bIsAlive=true //sets the default value for bIsAlive to true
    Health=100 //sets the default value for Health to 100
}

state Alive //creates a new state named "Alive"
{
    begin: //marks the beginning of the state
    setTimer(1.0, false, 'Tick'); //calls the Tick event every second
    event TakeDamage(int DamageAmount, Pawn InstigatedBy, vector HitLocation, vector Momentum, class<DamageType> DamageType) //overwrites the TakeDamage event in this state
    {
        Health -= DamageAmount; //subtracts the DamageAmount from the pawn's health
        if(Health <= 0) //checks if the pawn's health is equal to or below 0
        {
            GotoState('Dying'); //switches the state to "Dying"
        }
    }
}

state Dying //creates a new state named "Dying"
{
    begin: 
    GotoState('Dead'); //switches the state to "Dead"
}

state Dead //creates a new state named "Dead"
{
    begin:
    bIsAlive = false; //sets bIsAlive to false
    event Tick(float DeltaTime) //overwrites the Tick event in this state
    {
        //do nothing, pawn is dead
    }
}