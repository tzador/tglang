/** 
* This is a multiline comment in the UNREALSCRIPT programming language
* It is used to provide information and explanations about the code
*/

class GenericBot extends AIController;

/**
* This class is used to represent a generic bot in the game 
* It inherits the properties and functions of the AIController class
*/

// Defines the default behavior of the bot 
var() enum EBotBehaviorType DefaultBehavior;

/**
* The var() keyword defines a variable, in this case of type enum 
* The enum type is used to create a list of options, in this case representing different behaviors for the bot
* The EBotBehaviorType is the name of the enum, which will be used in our code to refer to its values
* The DefaultBehavior variable is declared and assigned as the default behavior for the bot 
*/

// Sets the perception mechanism for the bot
simulated function SetPerception();
{
	/** 
	* The simulated keyword indicates that this is a simulated function, which means it can be called from other simulated functions and events 
	* The function name is SetPerception, which will be used to call this function in our code 
	* The opening and closing curly braces enclose the function body 
	*/
	
	// Gets the player pawn 
	local PlayerPawn PlayerPawn;
	PlayerPawn = GetPawn();
	
	/**
	* The local keyword is used to denote variables that are only accessible within the current scope, in this case the function body 
	* The variable type is PlayerPawn, which is a predefined class in UNREALSCRIPT representing a player character 
	* The variable name is PlayerPawn 
	* The assignment operator (=) assigns the value of GetPawn() to the PlayerPawn variable 
	* GetPawn() is a predefined function that returns the pawn controlling the AIController 
	*/
	
	// Initializes the SenseConfig_Perception component 
	local SenseConfig_Perception PerceptionComponent;
	if(SenseConfig_Perception == None)
	{
		/**
		* The if statement checks if the SenseConfig_Perception variable is equal to None, which indicates it has not been initialized 
		* If the condition is met, the code within the if block will be executed 
		* The opening and closing curly braces enclose the code within the if block 
		* The logical operator (==) is used to compare the two values 
		*/
		
		// Creates a new instance of the SenseConfig_Perception component 
		PerceptionComponent = new class'BotSenseConfig_Perception';
		
		/** 
		* The new keyword creates a new instance of the specified class 
		* In this case, a new instance of the BotSenseConfig_Perception class is created and assigned to the PerceptionComponent variable 
		* The class keyword is used to indicate that we are referring to a class, rather than an instance of a class 
		*/
		
		// Sets the sight radius for the PerceptionComponent 
		PerceptionComponent.SenseRange = 3000;
		
		/**
		* The dot operator (.) is used to access a variable or function within a class 
		* In this case, the SenseRange variable within the PerceptionComponent class is accessed and set to a value of 3000 
		*/
		
		// Sets the peripheral vision angle for the PerceptionComponent 
		PerceptionComponent.SightLimit = FRandRange(100, 120);
		
		/**
		* The FRandRange() function is a predefined function in UNREALSCRIPT that returns a random float value between the two specified values 
		* In this case, a random value between 100 and 120 is assigned to the SightLimit variable within the PerceptionComponent class 
		*/
		
		// Adds the PerceptionComponent to the SenseConfig array 
		SenseConfig.Add(PerceptionComponent);
		
		/**
		* The dot operator (.) is used to access a variable or function within a class 
		* In this case, the Add() function within the SenseConfig array is used to add the PerceptionComponent to the array 
		*/
	}
}