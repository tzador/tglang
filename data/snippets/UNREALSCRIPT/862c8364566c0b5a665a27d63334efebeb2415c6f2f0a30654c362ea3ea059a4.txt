class MyCustomActor extends Actor
    abstract config property bool bIsPaused;

    var() config int32 MaxHealth; // configureable max health for our actor

    // set our initial health to the max health value
    var() int32 Health = MaxHealth;

    defaultproperties
    {
        Begin Object Class=SpriteComponent Name=Sprite
            Sprite=Texture2D'PlayerTexture'
        End Object
        Components.Add(Sprite);

        Begin Object Class=CubeComponent Name=Collision
            RelativeScale= (X=0.5,Y=0.5,Z=1.0)
        End Object
        Components.Add(Collision);

        // add a dynamic material instance to the sprite component
        Begin Object Class=DynamicMaterialInstance Name=MyDynamicMaterial
            Parent=Sprite.Material
        End Object
        Sprite.SetMaterial(0, MyDynamicMaterial);

        // set the starting location and rotation of the actor
        Location= (X=1000, Y=2000, Z=3000)
        Rotation= (Roll=0, Pitch=0, Yaw=0)

        // set a collision response for the actor
        CollisionComponent= Collision
        bBlockActors= true
        bBlockPlayers= true

        // set default values for configurable properties
        bIsPaused= false
        MaxHealth= 100
    }

    function Tick(float DeltaTime)
    {
        // check if the actor is paused
        if(bIsPaused)
        {
            // do nothing
            return;
        }

        // otherwise, update the actor's health
        if(Health > 0)
        {
            // decrease health by 1 every second
            Health = Health - 1 * DeltaTime;
        }
        else
        {
            // if health reaches 0, destroy the actor
            Destroy();
        }
    }

    function TakeDamage(int DamageAmount)
    {
        // subtract damage amount from current health
        Health = Health - DamageAmount;
        // log the damage taken
        log(DamageAmount @ " damage taken, current health: " @ Health);
    }