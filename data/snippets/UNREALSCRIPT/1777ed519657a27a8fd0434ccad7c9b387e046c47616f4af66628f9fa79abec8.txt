#This is a complex code snippet in UNREALSCRIPT

#Defines a new class called "Weapon" which extends from the default class "Inventory".
#The class has a "Pickup()" function which prints "Weapon Picked Up!".
class Weapon extends Inventory;

    #Defines a variable "ammo" of type integer, with protected access so only this class and its subclasses can access it.
    protected var int ammo;

    #Defines a function called "AddAmmo()" which takes an integer as parameter and adds it to the "ammo" variable.
    #It also prints the amount of ammo added.
    function AddAmmo(int amount)
    {
        ammo += amount;
        `Log("Added "+amount+" ammo! Current ammo: "+ammo);
    }

    #Defines a function called "Fire()" which checks if the "ammo" variable is greater than 0.
    #If yes, it prints "Firing Weapon!" and decreases the "ammo" variable by 1.
    #If no, it prints "No ammo left!".
    function Fire()
    {
        if(ammo > 0)
        {
            `Log("Firing Weapon!");
            ammo--;
        }
        else
        {
            `Log("No ammo left!");
        }
    }

    #Defines a function called "Reload()" which checks if the "ammo" variable is less than 10 (maximum ammo).
    #If yes, it adds 10 to the "ammo" variable and prints "Reloading weapon!".
    #If no, it prints "Weapon already fully loaded!".
    function Reload()
    {
        if(ammo < 10)
        {
            AddAmmo(10);
            `Log("Reloading weapon!");
        }
        else
        {
            `Log("Weapon already fully loaded!");
        }
    }

    #Defines a function called "Pickup()" which overrides the function in the default "Inventory" class.
    #It prints "Weapon Picked Up!" and calls the "Reload()" function to fully load the weapon.
    simulated function Pickup(Pawn other)
    {
        super.Pickup(other);
        `Log("Weapon Picked Up!");
        Reload();
    }
#End of Weapon class definition.

#Defines a new class called "RocketLauncher" which extends from the "Weapon" class.
#The class has a "RocketLauncher()" function which sets the "ammo" variable to 5.
class RocketLauncher extends Weapon;

    #Defines a function called "Fire()" which checks if the "ammo" variable is greater than 0.
    #If yes, it prints "Firing Rockets!" and decreases the "ammo" variable by 1.
    #If no, it calls the "Reload()" function and then prints "Firing Rockets!".
    function Fire()
    {
        if(ammo > 0)
        {
            `Log("Firing Rockets!");
            ammo--;
        }
        else
        {
            Reload();
            `Log("Firing Rockets!");
        }
    }

    #Overrides the "Pickup()" function and calls the "Fire()" function instead of "Reload()".
    simulated function Pickup(Pawn other)
    {
        super.Pickup(other);
        `Log("RocketLauncher Picked Up!");
        Fire();
    }
#End of RocketLauncher class definition.

#Main function called "StartGame" which creates an instance of "RocketLauncher" called "rocketLauncher".
#Then, it calls the "Pickup()" and "Fire()" functions to test the code.
function StartGame()
{
    local RocketLauncher rocketLauncher;
    `Log("Creating RocketLauncher instance!");
    rocketLauncher = new(class'RocketLauncher');
    rocketLauncher.Pickup(none);
    rocketLauncher.Fire();
}