// This code snippet adds a custom weapon class to a game in UnrealScript

class CustomWeapon extends Weapon expands UTWeapon;

var() float DamagePerSecond;
var() float FireRate;

// Called when the weapon is equipped by a player
function WeaponEquipped()
{
Super.WeaponEquipped(); // call parent function to ensure proper initialization
if (Owner != None) // make sure we have an owner
{
Owner.bCanDoubleJump = false; // disable double jumping for the player
}
}

// Calculates the amount of damage to be applied per shot based on damage per second and fire rate
function GetDamagePerShot()
{
local float DamagePerShot = DamagePerSecond / FireRate;
return DamagePerShot;
}

// Called when the player attempts to fire the weapon
function FireWeapon()
{
local Actor SpawnedProjectile; // stores the spawned projectile for future reference
local Vector FireDir; // stores the direction to fire the projectile

Super.FireWeapon(); // call parent function to handle ammo and timer checks

if (Ammo > 0) // make sure we have ammo
{
FireDir = Vector(VR__Camera.GetBaseCamera(User).ActorMerLeftFOV, VR__Camera.GetBaseCamera(User).ActorMerUpFOV, VR__Camera.GetBaseCamera(User).ActorMerRightFOV);

// Spawn projectile at the muzzle of the weapon and store a reference to it
SpawnedProjectile = Spawn(class'CustomProjectile',,, Location + Rotation.RotateVector(MuzzleOffset), FireDir);

// Apply damage to the hit actor if the projectile hits something
if (SpawnedProjectile != None)
{
if (SpawnedProjectile.bCollideActors && SpawnedProjectile.HitCount > 0)
{
local Actor HitActor;
HitActor = SpawnedProjectile.GetHitActor();
HitActor.TakeDamage(GetDamagePerShot(), Owner, Location, SpawnedProjectile.Velocity, class'CustomDamageType');
}
}
}
}

// Called when the player attempts to reload the weapon
function ReloadWeapon()
{
Super.ReloadWeapon(); // call parent function to handle ammo checks
Log("Reloading weapon");
}

// Called when the player attempts to switch weapons
function SwitchToNextWeapon()
{
Super.SwitchToNextWeapon(); // call parent function to handle weapon switching
Log("Switching to next weapon");
}

// Called when the player attempts to drop the weapon
function DropWeapon()
{
Super.DropWeapon(); // call parent function to handle weapon drop
Log("Dropping weapon");
}