// Declares a struct with the name 'PlayerStats'
struct PlayerStats
{
    // Public variables for character health, stamina, and score
    var int Health;
    var float Stamina;
    var int Score;
}

// Defines a class called 'PlayerCharacter' which extends the base 'Actor' class
class PlayerCharacter extends Actor
{
    // Protected variables for player movement speed and jump height
    protected var float MoveSpeed;
    protected var float JumpHeight;
    
    // Creates an instance of the struct 'PlayerStats' called 'Stats'
    PlayerStats Stats;
    
    // Sets default values for the player's movement speed and jump height
    defaultproperties
    {
        MoveSpeed = 300.0;
        JumpHeight = 600.0;
    }
    
    // Function that is called when the player takes damage, updates the health value in 'Stats'
    function TakeDamage(int Amount)
    {
        Stats.Health -= Amount;
        
        // Checks if the player's health has reached 0, if so, calls the 'Die' function
        if(Stats.Health <= 0)
        {
            Die();
        }
    }
    
    // Function that is called when the player dies
    function Die()
    {
        // Resets the player's health and stamina values
        Stats.Health = 100;
        Stats.Stamina = 100.0;
        
        // Prints a message to the console
        `log("Player has died!");
        
        // Calls the 'EndGame' function
        EndGame();
    }
    
    // Function that is called when the player reaches the end of the level, calculates the final score
    function EndGame()
    {
        // Multiplies the player's remaining health and stamina by 10 to get the score
        Stats.Score = Stats.Health*10 + Stats.Stamina*10;
        
        // Prints the final score to the console
        `log("Final score: " $ Stats.Score);
    }
}

// Creates an instance of the 'PlayerCharacter' class called 'MyPlayer'
var PlayerCharacter MyPlayer;

// Sets the 'MyPlayer' instance as the game's default player character
defaultproperties
{
    PlayerControllerClass=class'Engine.PlayerController'
    DefaultPawnClass=class'MyPlayer'
}

// Calls the 'TakeDamage' function with a damage amount of 20
MyPlayer.TakeDamage(20);
// Output: This code snippet defines a struct called 'PlayerStats' to store public variables such as health, stamina, and score. It also creates a class called 'PlayerCharacter' that extends from the base 'Actor' class. The class has protected variables for player movement speed and jump height, and an instance of the 'PlayerStats' struct called 'Stats'. Default values for movement speed and jump height are set in the 'defaultproperties' section. 

// The 'TakeDamage' function updates the health value in 'Stats' when the player takes damage, and checks if the player's health has reached 0, calling the 'Die' function if so. The 'Die' function resets the player's health and stamina values, prints a message to the console, and calls the 'EndGame' function. 

// The 'EndGame' function calculates the final score by multiplying the remaining health and stamina values by 10, and prints it to the console. 

// An instance of the 'PlayerCharacter' class is created and named 'MyPlayer', and set as the game's default character. The 'TakeDamage' function is then called with a damage amount of 20.