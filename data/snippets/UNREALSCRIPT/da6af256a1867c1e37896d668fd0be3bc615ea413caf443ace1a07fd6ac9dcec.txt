class Pawn extends Actor
    // `class` keyword defines a new class called `Pawn` that extends from the `Actor` class in the `UNREALSCRIPT` language.
{
    var const BaseCharacterInfo Info // `var` keyword defines a variable called `Info` that holds a constant `BaseCharacterInfo` object.

    var TeamInfo Team // `var` keyword defines a variable called `Team` that holds a `TeamInfo` object.

    var bool bIsJumping // `var` keyword defines a boolean variable called `bIsJumping` that will be used to track whether the pawn is currently jumping.

    var rotator DesiredRotation // `var` keyword defines a variable called `DesiredRotation` that holds a rotator (a type of variable used to store rotation information) value.

    simulated function DisplayDebug(class<WorldInfo> aWorldInfo, Canvas Canvas, out float YL, out float YPos)
    // `simulated` keyword defines a function that will run in a simulated environment, which is useful for debugging purposes.
    // `function` keyword defines a new function called `DisplayDebug` that takes in three parameters: a `WorldInfo` class, a `Canvas` object, and two `float` values.
    {
        Super.DisplayDebug(aWorldInfo, Canvas, YL, YPos) // `Super` keyword calls the function in the parent class, which in this case is the `Actor` class.

        if (Info != None && Canvas != None) // checks if the `Info` and `Canvas` objects are not empty.
        {
            if (Info.CurrentWeapon != None) // checks if the `CurrentWeapon` in the `Info` object is not empty.
            {
                // `DrawText` function draws text on the `Canvas` object at the specified coordinates, with the specified font and color.
                Canvas.DrawText("Weapon: " $ Info.CurrentWeapon.GetHumanReadableName(), YPos, YL);
                YL += Canvas.DrawText("Ammo: " $ Info.CurrentWeapon.Ammo, YPos, YL + 12);
            }

            // `DrawText` function also supports formatting and variables, allowing for dynamic text to be displayed.
            Canvas.DrawText("Team: " $ Team.TeamName.String(), YPos, YL);
            YL += Canvas.DrawText("Health: " @ Info.Health, YPos, YL + 12);

            // `DrawRotationIndicator` function draws a visual representation of the `DesiredRotation` value on the `Canvas` object.
            Canvas.DrawRotationIndicator(YPos + 150, YL + 16, DesiredRotation);

            YL += 26; // `YL` value is updated to change the vertical position of the next text to be displayed.
        }
    }

    // `Tick` function is called every frame and is used to update the state of the pawn.
    function Tick(float DeltaTime) 
    {
        Super.Tick(DeltaTime) // `Super` keyword calls the function in the parent class, which in this case is the `Actor` class.

        if (bIsJumping) // checks if the pawn is currently jumping.
        {
            // `LerpRotator` function smoothly interpolates between two rotator values, which is useful for creating smooth animations.
            DesiredRotation = Rotator(LerpRotator(DesiredRotation, Rotation, 0.25));
        }
        else
        {
            DesiredRotation = Rotation; // if the pawn is not jumping, the `DesiredRotation` value is set to be the same as the current `Rotation`.
        }
    }

    // `StartJump` function is called when the pawn starts jumping.
    function StartJump()
    {
        bIsJumping = true; // sets the `bIsJumping` variable to `true`.
    }

    // `StopJump` function is called when the pawn stops jumping.
    function StopJump()
    {
        bIsJumping = false; // sets the `bIsJumping` variable to `false`.
    }

    defaultproperties // `defaultproperties` keyword sets the default values for the properties of the class.
    {
        RemoteRole = SimulatedProxy; // `RemoteRole` property defines how the pawn will behave in a networked environment, in this case it is set to be a simulated proxy.
        bCanBeDamaged = true; // `bCanBeDamaged` property determines whether the pawn can take damage or not.
    }
}