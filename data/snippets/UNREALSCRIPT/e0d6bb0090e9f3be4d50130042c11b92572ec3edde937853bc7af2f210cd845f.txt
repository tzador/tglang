class DerivedClass extends BaseClass; //// Creates a new class that inherits from the BaseClass

/// ====================================================================================================
/// Class members and properties
/// ====================================================================================================
var(Object) float Health; //// Public property that represents the health of the actor

var protected float Armor; //// Protected property that represents the armor of the actor

var() const GameAIController AIController; //// Constant property that represents the AI controller for this actor

/// ====================================================================================================
/// Class functions
/// ====================================================================================================
event TakeDamage(float Damage, Controller EventInstigator, Vector HitLocation, Vector Momentum, 
    class<DamageType> DamageType, optional TraceHitInfo HitInfo, optional Actor DamageCauser); //// Event that gets called when the actor takes damage

function bool IsAlive() //// Function that checks if the actor is still alive and returns a boolean value
{
    return Health > 0; //// Checks if the health is greater than 0 and returns true if it is, false otherwise
}

simulated event BeginPlay() //// Event that gets called when the actor is spawned in the world
{
    Super.BeginPlay(); //// Calls the parent class's BeginPlay event

    Health = 100; //// Sets the initial health of the actor to 100
    Armor = 50; //// Sets the initial armor of the actor to 50
}

function void UpdateHealth(float NewHealth) //// Function that updates the health of the actor
{
    Health = NewHealth; //// Assigns the new health value to the Health property
}

/// ====================================================================================================
/// Class enums
/// ====================================================================================================
enum EWeaponType //// Enumeration that represents different types of weapons 
{
    WEAPONTYPE_AssaultRifle,
    WEAPONTYPE_Shotgun,
    WEAPONTYPE_SniperRifle
}

/// ====================================================================================================
/// Class states and states functions
/// ====================================================================================================
state Idle //// State that represents the idle behavior of the actor 
{
    event Tick(float DeltaTime) //// Event that gets called every frame while in this state
    {
        // Do nothing in idle state
    }
}

state Shooting extends Idle //// State that represents the shooting behavior of the actor, which inherits from the Idle state
{
    event Tick(float DeltaTime) //// Event that gets called every frame while in this state
    {
        // Shoot at target using AIController
    }
}

/// ====================================================================================================
/// Class default properties and configuration
/// ====================================================================================================
DefaultProperties
{
    Health = 100; //// Default value for the Health property
    Armor = 50; //// Default value for the Armor property
    AIController = class'GameAIController'; //// Default value for the AIController property
}