/**
 * This code snippet is an example of a complex class in UnrealScript.
 * It includes several properties, functions, and events.
 */
class MyComplexClass extends Object
    placeable;

/* Properties */

var int currentHealth; // Stores the current health value of the object

var() bool isInvincible; // Indicates whether the object is invincible or not

var() bool isDead; // Indicates whether the object is dead or not

var() float maxSpeed; // Determines the maximum speed of the object

var string playerName; // Stores the name of the player controlling the object

/* Functions */

/**
 * This function takes in a damage value and subtracts it from the current health of the object.
 * If the object's health reaches 0, it will trigger the OnDeath event.
 *
 * @param damage The amount of health to remove from the object.
 */
function TakeDamage(int damage)
{
    if (isInvincible)
    {
        // Do nothing if object is invincible
        return;
    }

    // Subtract damage from current health
    currentHealth -= damage;

    // Check if object is dead
    if (currentHealth <= 0)
    {
        isDead = true;

        // Trigger OnDeath event
        OnDeath();
    }
}

/**
 * This function decreases the current speed of the object by a specified percentage.
 *
 * @param percentage The percentage to decrease the object's speed by.
 */
function DecreaseSpeed(float percentage)
{
    // Calculate new speed
    maxSpeed *= (1 - percentage);

    // Update object's speed
    Move(maxSpeed);
}

/**
 * This function checks if the object is currently moving at its maximum speed.
 *
 * @return Whether the object is at its max speed or not.
 */
function bool IsMaxSpeed() const
{
    // Compare current speed to max speed
    return (maxSpeed == GetSpeed());
}

/* Events */

/**
 * This event is triggered when the object's health reaches 0.
 * It will trigger an animation or particle effect to indicate the object's death.
 */
event OnDeath()
{
    // Play death animation
    PlayAnimation('death');

    // Spawn death particles
    SpawnParticles('death');
}

/**
 * This event is triggered every time the object's speed changes.
 * It can be used to update a HUD element or other visual indicator.
 *
 * @param newSpeed The new speed value of the object.
 */
event OnSpeedChanged(float newSpeed)
{
    // Update HUD element
    UpdateSpeedHUD(newSpeed);
}