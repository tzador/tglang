`--------------------------------------------------------------------------------------
class NameOfMyClass extends Actor
/*
This is a basic UNREALSCRIPT class that extends the Actor class as its parent.
It will have several properties and functions that demonstrate the use of this language.
The class structure is used to create new objects within the game world.
*/
    native code;

    var const int MAX_HEALTH; /* Class property that holds the maximum health value for objects */

    defaultproperties
    {
        bCollideActors=true /* Default property that allows actors to collide with each other */

        Begin Object Name=CollisionCylinder /* Begin a new object within the class, in this case a collision cylinder */
            CollisionRadius=32.0 /* Sets the radius of the collision cylinder */
            CollisionHeight=64.0 /* Sets the height of the collision cylinder */
        End Object

        Begin Object Name=Mesh /* Begin a new object within the class, in this case a mesh */
            StaticMesh=StaticMesh'Package.MyMesh' /* Sets the static mesh for the object, in this case a mesh from MyMesh package */
        End Object

        Begin Object Name=Material /* Begin a new object within the class, in this case a material */
            Material=Material'Package.MyMaterial' /* Sets the material for the object, in this case a material from MyMaterial package */
        End Object
    }

    function BeginPlay()
    /*
    This function is called when the object is first spawned into the game world.
    It is used to initialize any variables or settings for the object.
    */
    {
        SetHealth(MAX_HEALTH); /* Sets the health of the object to the maximum value */
    }

    function TakeDamage(int DamageAmount)
    /*
    This function is used to apply damage to the object.
    It takes in a DamageAmount parameter that determines how much damage is applied.
    */
    {
        Super.TakeDamage(DamageAmount); /* Calls the parent function to handle the damage application */
        if (Health <= 0) /* Checks if the object's health has reached 0 or below */
        {
            Kill(); /* Calls the Kill function to destroy the object */
        }
    }

    function Kill()
    /*
    This function is used to destroy the object from the game world.
    It can be called when the object's health reaches 0 or in any other situation.
    */
    {
        Destroy(); /* Destroys the object */
    }

    simulated function SetHealth(int NewHealth)
    /*
    This function is used to set the health of the object.
    It takes in a NewHealth parameter that sets the new health value for the object.
    */
    {
        Health = NewHealth; /* Sets the health of the object to the new value */
    }
    
    replication
    {
        reliable if (Role == ROLE_Authority) /* Specifies that the following variables and functions will be replicated only if the object is the authority */
        Health; /* Specifies that the Health variable will be replicated */
    }
    
    event Destroy()
    /*
    This event is called when the object is destroyed.
    It can be used to perform any last-minute actions before the object is removed from the game world.
    */
    {
        Super.Destroy(); /* Calls the parent function to handle the destroy event */
        // Add any additional actions or custom code here.
    }
    
    defaultproperties
    {
        Health=100 /* Sets the default health value for the object */
    }
    
    state Alive /* Begin a new state for the object, in this case the Alive state */
    {
        Begin:
        /* The Begin label is the entry point for the state, any code written here will be executed when the state is entered */
        `log("Entering Alive state"); /* Logs a message to the console */

        Tick(PlayerController PC, float Dt)
        /* This function is used to handle the state's ticking, where the code is executed every frame */
        {
            // Add any custom code here.
        }

        function TakeDamage(int DamageAmount)
        /*
        Overrides the TakeDamage function from the parent class in this state.
        This will be called instead of the default TakeDamage function for this object in the Alive state.
        */
        {
            `if (DamageAmount &lt; 10) /* Checks if the damage amount is less than 10 */
            {
                `log("Damage below 10, ignoring"); /* Logs a message to the console */
            }
            else /* If the damage is equal to or greater than 10 */
            {
                `super.TakeDamage(DamageAmount); /* Calls the parent function to handle the damage application */
                if (Health <= 0) /* Checks if the object's health has reached 0 or below */
                {
                    GotoState(BringMeToLife); /* Changes the current state to BringMeToLife state */
                }
            }
        }

        state BringMeToLife /* Begin a new sub-state for the Alive state, in this case the BringMeToLife state */
        {
            Begin:
            `log("Moving to BringMeToLife state"); /* Logs a message to the console */

            function Tick(PlayerController PC, float Dt)
            /* Overrides the Tick function from the parent state */
            {
                `if (Health > 0) /* Checks if the object's health is above 0 */
                {
                    `GotoState('Alive', BringMeToLife_End); /* Changes the current state back to Alive state, ending the BringMeToLife state */
                }
            }

            state BringMeToLife_End /* Begin a new sub-state for the BringMeToLife state, in this case the BringMeToLife_End state */
            {
                Begin:
                `log("Ending BringMeToLife state"); /* Logs a message to the console */
            }
        }
    }
`
--------------------------------------------------------------------------------------`