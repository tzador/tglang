// Initialize a new class called 'Player'
class Player extends Actor
        // Declare variables to hold player name, health, and current weapon
        var string Name;
        var int Health;
        var Weapon CurrentWeapon;
    
        // Create an event to handle when the player takes damage
        event TakeDamage(int Damage, Actor Inflictor, Object.Vector HitLocation, Object.Vector Momentum, class<DamageType> DamageType, optional Actor InstigatedBy, optional Vector DamageCauser)
        {
            // If the damage is greater than 0, subtract it from the player's current health
            if (Damage > 0)
            {
                Health -= Damage;
                
                // Print out a message to the player
                `Log("Player" $ Name $ "took" $ Damage $ "damage!");
                
                // Check if the player's health is now less than or equal to 0
                if (Health <= 0)
                {
                    // Call the player's 'Death' function
                    Death();
                }
            }
        }
        
        // Create a function to handle the player's death
        function Death()
        {
            // Print out a message to the player
            `Log("Player" $ Name $ "died!");
            
            // Destroy the player's current weapon
            CurrentWeapon.Destroy();
            
            // Destroy the player
            Destroy();
        }
        
        // Create a function to handle the player switching weapons
        function SwitchWeapon(Weapon NewWeapon)
        {
            // Destroy the player's current weapon
            CurrentWeapon.Destroy();
            
            // Set the player's current weapon to the new weapon
            CurrentWeapon = NewWeapon;
            
            // Attach the new weapon to the player
            NewWeapon.AttachTo(self);
        }
};