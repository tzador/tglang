/*
This is a long and complex code snippet in the UNREALSCRIPT programming language. 
It contains a function and multiple variables with various data types and values.
*/

// Define a function called "CalculateDamage" that takes in two parameters - damageAmount of type Integer and damageType of type String.
function bool CalculateDamage(int damageAmount, string damageType)
{
    // Assign a value of 50 to the "maxHealth" variable of type Integer.
    local int maxHealth;
    maxHealth = 50;

    // Create an array of strings called "validDamageTypes" and assign a list of damage types to it.
    local array<string> validDamageTypes;
    validDamageTypes.AddItem("Blunt");
    validDamageTypes.AddItem("Sharp");
    validDamageTypes.AddItem("Fire");
    validDamageTypes.AddItem("Explosive");

    // Check if the "damageType" parameter is a valid type by looping through the "validDamageTypes" array.
    for ( local int i = 0; i < validDamageTypes.Length; ++i )
    {
        // If the damage type is valid, calculate the new health amount by subtracting the "damageAmount" parameter.
        if ( validDamageTypes[i] == damageType )
        {
            // Subtract the damage amount from the "maxHealth" variable and assign it to a new variable called "newHealth".
            local int newHealth;
            newHealth = maxHealth - damageAmount;

            // Print a message to the screen with the new health amount.
            `Log("Your new health is" $ newHealth);

            // Return true to indicate that the function was successful.
            return true;
        }
    }

    // If the damage type is not valid, print an error message to the screen.
    `Log("Invalid damage type");

    // Return false to indicate that the function was not successful.
    return false;
}

// Call the "CalculateDamage" function and pass in a damage amount of 20 and a damage type of "Fire".
CalculateDamage(20, "Fire");