class CustomGameplayEffectContainer extends GameplayEffectContainer implements IGameplayEffectContainerInterface;
/* This is a custom class that extends the existing GameplayEffectContainer class in UNREALSCRIPT. It also implements the IGameplayEffectContainerInterface to allow for easier communication between different objects in the game. */

/* Declaring variables to store information about the gameplay effect. */
var const GameplayEffect GameplayEffect; /* Specifies the actual gameplay effect that will be applied. */
var const GameplayEffect ContextSourceEffect; /* Specifies the context/source of the gameplay effect. */
var const target Character Target; /* Specifies the character that will be affected by the gameplay effect. */
var bool bApplied; /* Stores whether or not the gameplay effect has been applied. */

/* Function used to apply the gameplay effect to the target character. */
function ApplyGameplayEffect()
{
    /* Check if the gameplay effect has already been applied. If not, continue with the application process. */
    if(!bApplied)
    {
        /* Create a new instance of the GameplayEffectContext to hold information about the gameplay effect application. */
        local GameplayEffectContext MyEffectContext;
        /* Set the target character as the target in the gameplay effect context. */
        MyEffectContext.SetTarget(Target);
        /* Set the source and actual gameplay effect in the gameplay effect context. */
        MyEffectContext.SetSourceEffect(ContextSourceEffect, GameplayEffect);
        /* Call the ApplyGameplayEffectToTarget function inherited from the GameplayEffectContainer class, passing in the gameplay effect context. */
        GameplayEffect.ApplyGameplayEffectToTarget(MyEffectContext);
        /* Set bApplied to true to indicate that the gameplay effect has been applied. */
        bApplied = true;
    }
}
/**/  /* This is a commented out line. It can be used to add notes or explanation to the code. It will not be read by the compiler. */