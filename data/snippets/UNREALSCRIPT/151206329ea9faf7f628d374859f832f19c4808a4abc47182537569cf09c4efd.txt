// This is a class called "Enemy"
class Enemy extends Object;

// This function takes in a damage value and decrement the enemy's health
function TakeDamage(int Damage)
{
    // Decrement the health of the enemy by the damage value
    Health -= Damage;

    // If the enemy's health drops below 0, destroy the enemy
    if (Health <= 0)
    {
        Destroy();
    }
}

// This is a class called "Boss", which inherits from the "Enemy" class
class Boss extends Enemy;

// This function overrides the TakeDamage function from the "Enemy" class
function TakeDamage(int Damage)
{
    // Increment the damage by 50% for the boss
    int ModifiedDamage = Damage * 1.5;

    // Call the TakeDamage function from the "Enemy" class with the modified damage value
    Super.TakeDamage(ModifiedDamage);
}

// This is a class called "Player"
class Player extends Object;

// This function calculates and returns the damage dealt to the player based on weapon damage and armor
function DamageTaken(int WeaponDamage, int Armor)
{
    // Calculate the damage taken by subtracting the armor value from the weapon damage
    int DamageTaken = WeaponDamage - Armor;

    // If the damage taken is greater than 0, return it
    if (DamageTaken > 0)
    {
        return DamageTaken;
    }

    // Otherwise, return 0 to indicate no damage was taken
    else
    {
        return 0;
    }
}

// This is a new instance of the "Boss" class
Boss MyBoss;

// Call the TakeDamage function from the "Boss" class, passing in a damage value of 10
MyBoss.TakeDamage(10);

// This is a new instance of the "Player" class
Player MyPlayer;

// Call the DamageTaken function from the "Player" class, passing in a weapon damage of 20 and an armor value of 5
MyPlayer.DamageTaken(20, 5);