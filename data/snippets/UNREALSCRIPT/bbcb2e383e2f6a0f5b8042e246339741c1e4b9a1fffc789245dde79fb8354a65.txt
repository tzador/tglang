class MyController extends Controller;
/**
 * This class represents a controller in the game.
 * It controls the input and movement of a character.
 * It is a child class of the base Controller class.
*/
var() bool bCanShoot;
var bool bIsAiming;
var float AimPitch;
var float AimYaw;

/**
 * This function is executed when the controller is initialized.
 * It sets the default values for the variables.
*/
function InitController()
{
    bCanShoot = true;
    bIsAiming = false;
    AimPitch = 0.0;
    AimYaw = 0.0;
}

/**
 * This function handles the input of the player.
 * It checks for keyboard and mouse input, and updates the variables accordingly.
 * @param Input input - The input object containing the keyboard and mouse input.
*/
function ProcessInput(Input input)
{
    local int AimInputPitch;
    local int AimInputYaw;

    if (input.KeyPressed(A) && bCanShoot)
    {
        // If the A key is pressed and we can shoot, fire the weapon.
        Fire();
    }

    // Get the values of the mouse movement and update the aim variables.
    AimInputPitch = input.GetAimPitch();
    AimInputYaw = input.GetAimYaw();
    AimPitch += AimInputPitch;
    AimYaw -= AimInputYaw;

    // Clamp the aim variables to a certain range.
    if (AimPitch > 90.0)
    {
        AimPitch = 90.0;
    }
    else if (AimPitch < -90.0)
    {
        AimPitch = -90.0;
    }

    // Yaw wraps around at 360 degrees.
    AimYaw = fmod(AimYaw, 360.0);

    // If the player is aiming, set bIsAiming to true.
    if (abs(AimInputPitch) > 0.0 || abs(AimInputYaw) > 0.0)
    {
        bIsAiming = true;
    }
    else
    {
        bIsAiming = false;
    }
}

/**
 * This function fires the weapon.
 * It creates a projectile and launches it in the direction of the aim variables.
*/
function Fire()
{
    local Projectile proj;
    local Vector FireDir;

    // Create a projectile at the location and rotation of the controller's owner (the character).
    proj = Spawn(class'Projectile', None, Owner.Location, Owner.Rotation);
    // Get the direction to fire in, based on the aim variables.
    FireDir = Vector(AimPitch, AimYaw, 0.0);
    FireDir = FireDir.Normalized();
    // Launch the projectile in the direction of the aim.
    proj.Launch(FireDir);
}

defaultproperties
{
    // The controller's class (used for debugging purposes).
    ObjectArchetype=class'MyController'

    // We want the controller to tick every frame to handle input and update variables.
    bTickIsDisabled=false
}