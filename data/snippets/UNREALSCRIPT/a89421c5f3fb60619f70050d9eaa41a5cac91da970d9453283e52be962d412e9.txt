class MyActor extends Actor //Declares a new class MyActor that extends the Actor class

const int MAX_HEALTH = 100; //Defines a constant integer variable MAX_HEALTH with a value of 100

//Uses a default parameter to specify an initial value for the variable
var (MyActor) int Health = MAX_HEALTH; 

//Defines an event called OnTakeDamage that takes in a float parameter for the amount of damage
event OnTakeDamage(float Damage) 
{
    if (Health > 0) //Checks if the actor's health is above 0
    {
        Health = Health - Damage; //Subtracts the damage amount from the actor's health
        if (Health <= 0) //Checks if the actor's health is now 0 or below
        {
            GotoState('Dead'); //Calls the Dead state
        }
    }
}

//Defines a state called Dead
state Dead
{
    //Executes code when the state is entered
    Begin:
    {
        //Prints a message to the log
        `Log("Actor is dead!"); 
    }

    //Executes code every tick while in this state
    Tick(float DeltaTime):
    {
        //Destroys the actor after a certain amount of time has passed, indicated by the DeltaTime parameter
        Destroy(DeltaTime);
    }
}

//Declare a new actor called MyActor
var MyActor MyActor;

MyActor = Spawn(class'MyActor'); //Spawns an instance of the MyActor class and assigns it to the MyActor variable

//Calls the OnTakeDamage event with a damage value of 50
MyActor.OnTakeDamage(50); 

//Calls the Tick function in the Dead state on the MyActor instance
MyActor.Tick(0.5);