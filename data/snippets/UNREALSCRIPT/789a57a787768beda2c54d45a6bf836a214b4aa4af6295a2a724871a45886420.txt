/**
 * This is a complex code snippet in UNREALSCRIPT, it creates a custom camera
 * for a first-person shooter game.
 */

class FirstPersonCamera extends Camera
		/**
		 * Use the default camera location and rotation settings when created
		 */
		placeable;

	var rotSpeedFactor; // Defines rotation speed
	var maxPitch; // Defines maximum angle of pitch

	event PostBeginPlay() // Event that executes at the beginning of the game
	{
		SetViewRotation(PlayerOwner.GetBaseAimRotation()); // Sets camera rotation to match player's aim
		
		rotSpeedFactor = 300.0; // Set rotation speed factor
		maxPitch = 88.0; // Set max pitch angle
	}

	// Overridden function that is called every frame to update the camera's position
	protected event Tick(float DeltaTime)
	{
		// Get input from player controller and multiply by rotation speed factor
		local float rotDirX = PlayerOwner.Rotation.Roll * rotSpeedFactor * DeltaTime;
		local float rotDirY = PlayerOwner.Rotation.Pitch * rotSpeedFactor * DeltaTime;

		// Calculate new rotation based on input and current rotation
		local Rotator newRot = Rotation + Rotator(-rotDirY, rotDirX, 0);

		// Ensure that pitch does not exceed max pitch angle
		if (newRot.Pitch < -maxPitch)
		{
			newRot.Pitch = -maxPitch;
		}
		else if (newRot.Pitch > maxPitch)
		{
			newRot.Pitch = maxPitch;
		}

		// Set camera's new rotation
		SetRotation(newRot);
	}
endclass