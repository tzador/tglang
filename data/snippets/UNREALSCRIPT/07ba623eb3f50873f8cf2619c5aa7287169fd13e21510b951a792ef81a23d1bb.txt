//@INPUT
var float health; //floating point variable for health
var float damage; //floating point variable for damage

function Heal() { //function to heal the character
  health += 10; //increase health by 10
}

function TakeDamage() { //function to take damage
  health -= damage; //decrease health by the damage variable
}

class Character extends Actor; //create a class for the character that inherits from the Actor class
var const Player inputPlayer; //constant variable for the player

function BeginPlay() { //function called at the start of the game
  super.BeginPlay(); //call the BeginPlay function from the Actor class

  for (local PlayerController iter = Level.GetPlayerList(); iter != None; iter = PlayerController(iter.Next)) { //loop through all player controllers
    if (iter.Player == inputPlayer) { //check if the current player controller is the input player
      iter.DisplayDebug("Hello, " $ inputPlayer.Name); //display a debug message with the input player's name
      iter.Possess(Character); //possess the character with the input player controller
    }
  }
}

defaultproperties { //default properties for the character
  Begin Object class=ParticleSystemComponent Name=FeetParticleSystem silent=true //create a particle system component for the character's feet
    Template=ParticleSystem'Particles.FootstepController.FootstepController' //set the particle system template to the FootstepController
    End Object

    Begin Object Name=SpriteComponent0 ObjName=Sprite0 Archetype=SpriteComponent'Engine.Default__Character:Sprite0' //create a sprite component for the character's body
    End Object
}