/*
This is a complex code snippet written in the programming language UNREALSCRIPT.
It contains different types of variables, function calls, and loops.
*/

//Defining a struct called "PlayerInfo"
struct PlayerInfo
{
    var string name; //variable to store player's name
    var int health; //variable to store player's current health
    var int experience; //variable to store player's current experience level
};

//Creating an array to store multiple instances of PlayerInfo
var array<PlayerInfo> players;

//Initializing a for loop to add player information to the array
for (i = 0; i < 5; i++)
{
    local PlayerInfo newPlayer; //creating a new instance of PlayerInfo
    newPlayer.name = "Player " $ string(i+1); //assigning a name to the player using the loop counter
    newPlayer.health = 100; //setting the player's health to 100
    newPlayer.experience = i * 10; //setting the player's experience level based on the loop counter
    
    players.AddItem(newPlayer); //adding the new player to the array
}

//Defining a function to print out player information
function PrintPlayerInfo(PlayerInfo player)
{
    `Log(player.name $ " has " $ string(player.health) $ " health and " $ string(player.experience) $ " experience.");
    //printing out the player's name, health, and experience level
}

//Calling the PrintPlayerInfo function for each player in the array
foreach(players, PrintPlayerInfo);

//Initializing a while loop to simulate a game
while (players.Num() > 1)
{
    foreach(players, PrintPlayerInfo); //printing out player info at the beginning of each game round
    
    `Log("Starting new round...");
    
    //Simulating actions for each player
    foreach(players, SimulatePlayer);
    
    `Log("Round ended.");
    
    //Removing any players with health below 0
    players.RemoveAll(FindPlayerWithNegativeHealth);
}

//Defining a function to simulate actions for a player
function SimulatePlayer(PlayerInfo player)
{
    if (GetRandom(0, 1) == 0) //randomly choosing to heal or attack
    {
        `Log(player.name $ " is attacking!");
        //decreasing the player's health by a random amount between 1 and 10
        player.health = Max(player.health - GetRandom(1, 10), 0);
    }
    else
    {
        `Log(player.name $ " is healing!");
        //increasing the player's health by a random amount between 5 and 15
        player.health = Min(player.health + GetRandom(5, 15), 100);
    }
    
    `Log(player.name $ " now has " $ string(player.health) $ " health.");
    
    if (player.experience == 100) //checking if player's experience level is at max
    {
        //printing out a congratulatory message and removing the player from the array
        `Log(player.name $ " has reached max experience level and is eliminated from the game!");
        players.RemoveItem(player);
    }
    else
    {
        `Log(player.name $ " gained 10 experience points!");
        //increasing the player's experience level by 10
        player.experience = Min(player.experience + 10, 100);
    }
}

//Defining a function to find a player with negative health
function bool FindPlayerWithNegativeHealth(PlayerInfo player)
{
    return player.health < 0; //returning true if the player's health is below 0
}