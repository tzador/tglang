/** This is a complex class that combines different data types and functions within UNREALSCRIPT.
 * Integers and strings are used for basic data storage and manipulation.
 * Arrays and maps are used for more advanced data organization.
 * Functions are used for controlling the behavior of the code.
 */

// Declaration of the class, named "MyClass"
class MyClass extends Object;

// Integer variable for counting
var int Counter;

// String variables for storing name and description
var string Name;
var string Description;

// Array for storing a list of items
var array<int> ItemsArray;

// Map for associating names with quantities
var map<string, int> NameToQuantity;

// Function for displaying the name and description
native function DisplayInfo();

// Function for adding items to the array
function AddItem(int Item)
{
    // Add item to the array
    ItemsArray.AddItem(Item);

    // Check if the item already exists in the map
    if (NameToQuantity.ItemExists(Item))
    {
        // Increase the quantity for that item by 1
        NameToQuantity.AddItem(Item, NameToQuantity[Item] + 1);
    }
    else
    {
        // Add the item to the map with a quantity of 1
        NameToQuantity.AddItem(Item, 1);
    }
}

// Function for removing items from the array
function RemoveItem(int Item)
{
    // Remove item from the array
    ItemsArray.RemoveItem(Item);

    // Check if the item exists in the map
    if (NameToQuantity.ItemExists(Item))
    {
        // Decrease the quantity for that item by 1
        NameToQuantity.AddItem(Item, NameToQuantity[Item] - 1);

        // Check if the quantity has reached 0
        if (NameToQuantity[Item] == 0)
        {
            // Remove the item from the map
            NameToQuantity.RemoveItem(Item);
        }
    }
}

// Function for displaying the items in the array and their quantities
function DisplayItems()
{
    // Loop through the items in the array
    for (local int i = 0; i < ItemsArray.Length; i++)
    {
        // Print the name and quantity of the item
        `Log("Item: " $ ItemsArray[i] $ " Quantity: " $ NameToQuantity[ItemsArray[i]]);
    }
}

// Function for counting the number of items in the array
function CountItems() return ItemsArray.Length;

// Function for resetting the array and map
function Reset()
{
    // Empty the array
    ItemsArray.Empty();

    // Empty the map
    NameToQuantity.Empty();

    // Reset the counter
    Counter = 0;
}

// Final DisplayInfo function for displaying the name, description, and number of items in the array
function DisplayInfo()
{
    `Log("Name: " $ Name);
    `Log("Description: " $ Description);
    `Log("Number of Items: " $ CountItems());
}

/** This is a sample code snippet using the MyClass class created above. */

// Create a new instance of the MyClass class
var MyClass MyObject;

// Set the name, description, and initial item
MyObject.Name = "My Object";
MyObject.Description = "This is my object.";
MyObject.AddItem(123);

// Display the information of the object
MyObject.DisplayInfo();

// Add more items
MyObject.AddItem(456);
MyObject.AddItem(789);

// Display the updated number of items
MyObject.DisplayInfo();

// Remove an item
MyObject.RemoveItem(456);

// Display the updated number of items
MyObject.DisplayInfo();

// Reset the object
MyObject.Reset();

// Display the reset information
MyObject.DisplayInfo();

// Output:
/*
Name: My Object
Description: This is my object.
Number of Items: 1

Name: My Object
Description: This is my object.
Number of Items: 3

Name: My Object
Description: This is my object.
Number of Items: 2

Name: My Object
Description: This is my object.
Number of Items: 0
*/