class MyComplexActor extends Actor
  #attributes
  var() float FloatAttribute, transFloatAttribute;
  var() rotator RotatorAttribute;
  var() string StringAttribute, transStringAttribute;
  var() bool BoolAttribute;
  const float CONSTANT = 5.0; //constant attribute
  enum EMyEnum {
    ItemOne,
    ItemTwo,
    ItemThree
  };

  #constructors
  function PostBeginPlay() {
    Super.PostBeginPlay();
    //custom code for PostBeginPlay
    LockRotToActor();
    SetActorLinearDamping(CONSTANT);
  }

  #functions
  function LockRotToActor() {
    SetActorRotation(RotatorAttribute);
    SetActorRotation(RotatorAttribute, false, true, true);
  }

  function SpawnRandomActors(int numActors) {
    for(int i=0; i<numActors; i++) {
      local Actor newActor;
      newActor = Spawn(class'NewActorClass', self, '', Location, Rotation, false);
      newActor.SetCollisionSize(10, 10, 10, false);
      newActor.SetAbsolute(false, true, false);
      #additional code for new actor
    }
  }

  #events
  event Touch(Actor Other, PrimitiveComponent OtherComp, vector HitLoc, vector HitNorm) {
    //code for touch event
    if(Other.IsA(class'MyOtherActor')) {
      //do something
    }
  }

  #states
  state MovingState {
    Begin:
      SetPhysics(PHYS_Falling);
    Timer:
      MoveTo(FVector(0, 0, 50), 1.0, false);
    End:
      SetPhysics(PHYS_None);
  }

}