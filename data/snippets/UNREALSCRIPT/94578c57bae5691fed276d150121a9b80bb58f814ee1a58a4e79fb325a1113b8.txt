//This code snippet creates a dynamic array to store coordinates and then iterates through it to perform calculations

class CoordinateManager extends Object;

var array<actor> CoordArray; //create dynamic array to store actors that will store coordinates

/** Function to add an actor to CoordArray and store its coordinates */
function AddCoordinate(actor NewCoordActor)
{
    //use Vector class to get actor's current location and store it in an array
    local Vector CoordVector;
    CoordVector = NewCoordActor.Location;
    CoordArray.AddItem(NewCoordActor); //add actor to CoordArray
}

/** Function to perform calculations on coordinates in CoordArray */
function CalculateCoordinates()
{
    local Vector CurrentLocation; //variable to store current location
    local Vector PrevLocation; //variable to store previous location
    local float Distance; //variable to store distance between current and previous locations
    
    //loop through CoordArray to perform calculations for each actor
    foreach(CoordArray, CurrentActor)
    {
        CurrentLocation = CurrentActor.Location; //get current location of actor
        
        //if current location is not the first in the array, perform calculations
        if (CoordArray.IndexOf(CurrentActor) != 0)
        {
            PrevLocation = CoordArray[CoordArray.IndexOf(CurrentActor)-1].Location; //get previous location from the array
            Distance = VSize(CurrentLocation - PrevLocation); //calculate distance using Vector's VSize function
            //perform any other necessary calculations using CurrentLocation, PrevLocation, and Distance
        }
    }
}

/** Function to reset CoordArray */
function ResetCoordinates()
{
    CoordArray.Empty(); //remove all elements from the array, essentially resetting it
}