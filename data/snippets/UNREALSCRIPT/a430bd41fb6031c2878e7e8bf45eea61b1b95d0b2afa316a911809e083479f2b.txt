/*
    This is a comment explaining the purpose of this code snippet.
    The following code snippet is used to create a custom class in UnrealScript.
*/

class CustomVehicle extends Vehicle;

/*
    This is a multi-line comment, used to provide detailed information 
    about the methods and properties of the CustomVehicle class.
*/

// Properties

var int MaxSpeed;
    /*
        This property stores the maximum speed of the vehicle.
        It can be set and retrieved by any script accessing this class.
    */

var() rotation BodyRotation;
    /*
        This property stores the current rotation of the vehicle's body.
        It can be accessed and modified by other scripts using the vehicle.
    */

var safeDist;
    /*
        This property stores the safe distance the vehicle should maintain 
        from other vehicles or objects in the environment.
        It is set automatically based on the size of the vehicle.
    */

var() customData;

/*
    This property is declared as \external, meaning it can only be accessed 
    by scripts within the same package.
    It allows for additional custom data to be stored and retrieved by the 
    CustomVehicle class.
*/

// Events

event OnSpawnedVehicle();

/*
    This event is triggered when an instance of the CustomVehicle class 
    is spawned in the game world.
    It can be used to initialize the vehicle's properties and start its 
    simulation.
*/

event Simulate(float DeltaTime);

/*
    This event is called every frame to update the vehicle's simulation.
    It takes in the delta time between frames as a parameter, 
    allowing for accurate movement and actions.
*/

// Methods

function SetBodyRotation(rotation NewRotation)
{
    BodyRotation = NewRotation;
    /*
        This function updates the BodyRotation property with the given rotation.
        It is used to rotate the vehicle's body based on user input or AI instructions.
    */
}

function Accelerate(float Amount)
{
    if (MaxSpeed > 0 && (VSize(GetMovementDir()) * MaxSpeed) > MaxSpeed)
    {
        Velocity = Velocity + Normalize(GetMovementDir()) * MaxSpeed;
        /*
            This function handles the acceleration of the vehicle.
            It checks if the current speed is below the maximum speed, 
            and if so, increases the velocity in the direction of movement.
        */
    }
}

function Move(float DeltaTime)
{
    Velocity = Velocity + GetMovementDir() * MaxSpeed;
    Location = Location + GetMovementDir() * (Velocity * DeltaTime);
    /*
        This function handles the movement of the vehicle.
        It updates the vehicle's velocity and location based on the 
        current movement direction and delta time.
    */
}