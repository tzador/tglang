/**
 * Example class for a vehicle in a racing game
 * Contains properties and functions related to vehicle movement
 */

class RacingVehicle extends Vehicle
    placeable; //< Allows the class to be placed in the level as an object

var() float SteeringSensitivity; //< The sensitivity of the steering controls
var() float AccelerationRate; //< The rate at which the vehicle accelerates

var float CurrentSpeed; //< The current speed of the vehicle
var float CurrentSteeringInput; //< The current steering input from the player
var bool bIsAccelerating; //< Whether the vehicle is currently accelerating or not

simulated function Tick(float DeltaTime)
{
    super.Tick(DeltaTime);

    // Apply acceleration to the vehicle based on player input
    if (bIsAccelerating)
    {
        CurrentSpeed += DeltaTime * AccelerationRate;
    }

    // Calculate the new rotation of the vehicle based on steering input
    local Vector NewRotation = Rotation.Vector() + (Rotation.Yaw * CurrentSteeringInput * SteeringSensitivity);

    // Apply the new rotation to the vehicle
    Rotation = new Object.Rotator(newRotation).GetRotator();
}

/**
 * Sets the steering control input for the vehicle
 * 
 * @param SteeringInput - The input value for steering, between -1 and 1
 */
function SetSteeringInput(float SteeringInput)
{
    CurrentSteeringInput = Clamp(SteeringInput, -1, 1);
}

/**
 * Sets whether the vehicle is accelerating or not
 * 
 * @param bNewAccelerating - Whether the vehicle is accelerating or not
 */
function SetAccelerating(bool bNewAccelerating)
{
    bIsAccelerating = bNewAccelerating;
}