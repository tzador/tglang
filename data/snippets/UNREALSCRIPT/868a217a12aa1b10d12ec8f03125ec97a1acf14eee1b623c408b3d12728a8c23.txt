class MyPlayerPawn expands xPawn
    placeable;

// This class represents the player character in the game

auto state Default
{
    // This is the default state of the player character

    var int health; // The player's current health value
    var int ammo; // The player's current ammo count

    event TakeDamage(int DamageAmount)
    {
        // This event is triggered when the player takes damage

        health -= DamageAmount; // Reduce the player's health by the amount of damage taken
        if (health <= 0)
        {
            // Check if the player's health has reached 0 or below
            GotoState('Dead'); // If so, switch to the 'Dead' state
        }
    }

    event FireProjectile()
    {
        // This event is triggered when the player fires a projectile

        ammo--; // Reduce the player's ammo count by 1
        if (ammo <= 0)
        {
            // Check if the player is out of ammo
            GotoState('OutOfAmmo'); // If so, switch to the 'OutOfAmmo' state
        }
        else
        {
            Spawn(class'MyProjectile', Rotation, Location + 50 * Vector(VSize, 0, 0)); // Spawn a 'MyProjectile' at the player's location
        }
    }
}

state Dead
{
    // This state is triggered when the player's health reaches 0 or below

    event BeginState()
    {
        // This event is triggered when the state is entered

        SetActorTimer(5.0, true, 'Respawn'); // Set a timer for 5 seconds to trigger the 'Respawn' event
    }

    event Respawn()
    {
        // This event is triggered when the timer for respawning ends

        GotoState('Default'); // Switch back to the default state
        health = 100; // Reset the player's health to 100
    }
}

state OutOfAmmo
{
    // This state is triggered when the player runs out of ammo

    event FireProjectile()
    {
        // This event is triggered when the player tries to fire a projectile

        // Play a negative sound to indicate that the player is out of ammo
        PlaySound(Sound'Neg_Sound');

        // Display a message on the screen informing the player that they are out of ammo
        `Log("Out of ammo, cannot fire projectile")`;
    }

    event PickupAmmo()
    {
        // This event is triggered when the player picks up ammo

        GotoState('Default'); // Switch back to the default state
        ammo = 100; // Reset the player's ammo count to 100
    }
}