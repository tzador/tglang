// Variable Declaration
var int PlayerScore;
var float PlayerHealth;
var bool IsAlive;

// Function Declaration
function CalculateScore(int Kills, int Deaths)
{
    PlayerScore = (Kills * 10) - (Deaths * 5);
    `This function calculates the player's score based on their kills and deaths.`
}

// Class Declaration
class Player extends Actor
    `This is the player class which inherits from the Actor class.`
    config(PlayerName, PlayerSpeed);
    `This is a configuration which takes in the player's name and speed.`

    // Event Handler
    event Tick(float DeltaTime)
    {
        Super.Tick(DeltaTime);

        // Update Player Health
        PlayerHealth = PlayerHealth - (DeltaTime * 10);
        `This event handler updates the player's health every tick.`

        // Check if player is still alive
        if(PlayerHealth <= 0)
        {
            IsAlive = false;
            `If the player's health reaches 0, they are no longer alive.`
        }
    }

    // Final Score function
    function FinalScore()
    {
        if(IsAlive)
        {
            `If the player is still alive, their score is displayed.`
            `This function can be called at the end of the game.`
            `It can also be customized to display other statistics such as kills and deaths.`
            `This allows for flexibility in displaying the final score to the player.`
            `It could also be used to save the player's score to a leaderboard.`

            `Example of a simple final score message:`
            log("Congrats " @ PlayerName @ "! Your final score is: " @ PlayerScore);
        }
        else
        {
            `If the player is not alive, a message is displayed indicating that the game is over.`
            `This function can be called at the end of the game or whenever the player dies.`

            `Example of a game over message:`
            log("Game over! " @ PlayerName @ " scored " @ PlayerScore @ " before dying.");
        }
    }
}

// Player instance creation
var Player NewPlayer;
`This creates a new instance of the player class.`

// Initialize player
NewPlayer = new class'Player';
NewPlayer.PlayerName = "John Doe";
NewPlayer.PlayerSpeed = 100;
NewPlayer.PlayerHealth = 100;

// Call CalculateScore function
NewPlayer.CalculateScore(5, 2);

// Update Player Health
NewPlayer.PlayerHealth = NewPlayer.PlayerHealth - 20;

// Call FinalScore function
NewPlayer.FinalScore();

/* Output:
Game over! John Doe scored 15 before dying.
*/