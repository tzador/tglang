//=============================================================================
// Name: MyCustomActor.uc
// Author: John Doe
// Created: 01/01/2021
// Description: This is a custom actor class that inherits from the base Actor
// class and implements various custom functions and properties.
//=============================================================================

class MyCustomActor extends Actor;

#exec ClassEditor
    Name="CustomActor"
    ParentClass=Class'Class'

var() int MaxHealth;    // Maximum health for the actor
var() string Name;      // Name of the actor
var private float Speed;    // Private variable for actor's movement speed

//=============================================================================
// Function: SetName
// Description: Sets the name of the actor.
// Parameters:
//      newName - The name to set for the actor.
//=============================================================================
function SetName(string newName)
{
    Name = newName;
}

//=============================================================================
// Function: GetSpeed
// Description: Returns the actor's movement speed.
//=============================================================================
function GetSpeed() float
{
    return Speed;
}

//=============================================================================
// Event: Tick
// Description: Called every frame to update the actor's movement and behavior.
//=============================================================================
event Tick(float DeltaTime)
{
    // Code for updating actor's movement
}

//=============================================================================
// Event: TakeDamage
// Description: Called when the actor receives damage.
// Parameters:
//      DamageAmount - The amount of damage received.
//      DamageInstigator - The actor responsible for the damage.
//=============================================================================
event TakeDamage(int DamageAmount, Actor DamageInstigator)
{
    MaxHealth -= DamageAmount;

    if (MaxHealth <= 0) {
        // Actor is destroyed
        Destroy();
    }
}

//=============================================================================
// Function: SpawnProjectile
// Description: Spawns a projectile at the specified location.
// Parameters:
//      SpawnLocation - The location to spawn the projectile at.
// Returns:
//      The spawned projectile actor.
//=============================================================================
function Actor SpawnProjectile(Vector SpawnLocation) returns(Actor)
{
    local Actor Projectile;
    Projectile = Spawn(class'Projectile', self, '', SpawnLocation, rot(0, 0, 0));
    return (Projectile);
}