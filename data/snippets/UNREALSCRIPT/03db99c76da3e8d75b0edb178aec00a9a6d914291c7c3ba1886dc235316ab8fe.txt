// This code creates a custom weapon class
class CustomWeapon extends UTWeapon; // Inherits from base weapon class
var int ClipSize; // Variable for clip size of weapon
var int AmmoCost; // Variable for ammo cost of weapon
var int Damage; // Variable for damage of weapon

// Function to initialize weapon
function InitWeapon()
{
    // Set default values for variables
    ClipSize = 50;
    AmmoCost = 5;
    Damage = 25;
    
    // Set display properties
    bDisplayOnHud = true; // Show weapon on HUD
    Icon = WeaponIcon; // Set icon for weapon
    
    // Set default ammo amount and max clip size
    Ammo.AmmoAmount = ClipSize; // Set starting ammo amount to full clip
    Ammo.MaxAmmoAmount = ClipSize; // Set max amount of ammo to full clip
}

// Function to fire weapon
function Fire()
{
    // Check if there is enough ammo to fire
    if(Ammo.AmmoAmount >= AmmoCost)
    {
        // Call base weapon's fire function
        Super.Fire();
        
        // Decrease ammo amount by ammo cost
        Ammo.AmmoAmount -= AmmoCost;
        
        // Play weapon fire sound and particle effect
        PlaySound(FireSound);
        Spawn(WeaponFireEffect, Location, Rotation);
        
        // Trace a line from weapon's muzzle to end point
        local Vector EndTrace = Location + Rotation.Vector() * 5000;
        local Vector HitLocation; // Variable to store hit location
        local Actor HitActor; // Variable to store actor hit
        local Vector HitNormal; // Variable to store hit surface normal
        local WeaponTraceFlags = TraceFlags(Untouched);
        if(Trace(HitLocation, HitNormal, EndTrace, Location, false, vect(0,0,-10),true,MakeColor(240,240,120),WeaponTraceFlags) != HitActors[0])
        {
            // Check if the hit actor is valid
            if(HitActor != none)
            {
                // Check if the hit actor is an enemy
                if(HitActor.IsA('UTPawn') && HitActor.Team != Instigator.Team)
                {
                    // Deal damage to enemy
                    HitActor.TakeDamage(Damage, Instigator.Controller, Location, HitNormal, Vect(0,0,-20), class<ActionResult>);
                }
            }
        }
    }
}

// Function to add ammo to weapon
function AddAmmo(int Amount)
{
    // Check if adding ammo will exceed max clip size
    if(Ammo.AmmoAmount + Amount > ClipSize)
    {
        // Set ammo amount to max clip size
        Ammo.AmmoAmount = ClipSize;
    }
    else
    {
        // Add ammo to current amount
        Ammo.AmmoAmount += Amount;
    }
}