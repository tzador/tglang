/* This code snippet is a class declaration for a player character.
It includes properties, functions, and events common to player characters in a game.*/
class PlayerCharacter extends Actor
    // Properties
    config(PlayerInput, Input);
    hidden const float MAX_HEALTH = 100.0;
    event Hit(float Damage, out HitInfo DamageInfo);
    
    // Functions
    function TakeDamage(int Amount, Controller EventInstigator, Actor DamageCauser)
    {
        super.TakeDamage(Amount, EventInstigator, DamageCauser);

        if (Health <= 0)
        {
            // Trigger death event
            event PlayerDeath();
        }
    }
    
    function MoveForward(float Value)
    {
        // Move player forward based on input value
        if (Value != 0)
        {
            SVelocity = Normal(Value) * XAxis;
        }
        else
        {
            SVelocity = vect(0,0,0);
        }
    }

    function MoveRight(float Value)
    {
        // Move player right based on input value
        if (Value != 0)
        {
            SVelocity = Normal(Value) * YAxis;
        }
        else
        {
            SVelocity = vect(0,0,0);
        }
    }
    
    // Events
    event PlayerMoveForward();
    event PlayerMoveRight();
    event PlayerDeath();

defaultproperties
{
    // Set initial health value
    Health = MAX_HEALTH;

    // Set movement input bindings
    Input.KeyMappings[0].Name="MoveForward";
    Input.KeyMappings[0].Key=IK_W;
    Input.KeyMappings[1].Name="MoveBackward";
    Input.KeyMappings[1].Key=IK_S;
    Input.KeyMappings[2].Name="MoveLeft";
    Input.KeyMappings[2].Key=IK_A;
    Input.KeyMappings[3].Name="MoveRight";
    Input.KeyMappings[3].Key=IK_D;
}