class MyPlayerController extends PlayerController
{
    Var PlayerHealth : int;
    Var PlayerName : string;

    function EventPossess( Pawn NewPawn, bool bVehicleTransition )
    {
        Super.EventPossess( NewPawn, bVehicleTransition );
        GEngine.GamePlayers[ControllerIndex].ResetControllerId();
    }

    function UpdateControls(out float DeltaTime)
    {
        local vector AngVel;
        local rotator NewViewRotation, ViewRotationDelta;
        local int MyButtonFlags,OthersButtonFlags;
        local float TiltForward;

        if(CountRot)
        {
            AngVel = RotationRate-MomentumInertia*RotationAxis;
            RotationAxisLength = Normal(AngVel);
            DesiredRotation = Rotator(AngVel,RotationAxisLength);
            RotationAxis = Normal(DesiredRotation.Vector());
            if (RotationAxisLength > MaxRotSpeed)
            {
                // turn down ARP rot speed
                MaxRotationSpeed=(RotationRate*RotationAxis)/RotationAxisLength;
            }
        }

        OldRotation = Rotation;
        Rotation += DeltaRot;
        DeltaRot.Yaw = 0;
        DeltaRot.Pitch = 0;
        AddInputToRot(DeltaRot);
    }

    state Playing
    {
        Begin:
            do {ShowCursor(self!GameConfig.ShowFlags & GAMECURSOR != 0);
                cursor.Rates(self);}

            Auto:
                State = PlaySound( BulletHitSound,TRG_LocalOnly,False,.5);
    }
}