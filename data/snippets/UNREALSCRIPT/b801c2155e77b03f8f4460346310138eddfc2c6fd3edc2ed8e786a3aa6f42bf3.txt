// This is a comment in the UnrealScript programming language

class MyActor extends Object // This creates a class named MyActor that extends from the Object class

// Declaration of default properties
// This is where we define all the properties that are available to our actors
defaultproperties
{
    Begin Object Class=StaticMeshComponent Name=MeshComponent // This creates a new StaticMeshComponent named MeshComponent
        StaticMesh = StaticMesh'PackageName.MeshName' // This loads the static mesh from the specified package and assigns it to the component
        RelativeLocation= (X=0,Y=0,Z=0) // This defines the starting location of the component on our actor
    End Object
    RootComponent = MeshComponent // This sets our MeshComponent as the root component of our actor
}
 
// Override function to be called when the actor is spawned
event PostBeginPlay()
{
    Super.PostBeginPlay(); // This calls the PostBeginPlay function from the parent class
    // Code to be executed when the actor is spawned goes here
    // For example, we can add some rotation to our mesh component
    MeshComponent.SetActorRotation(Rotator(0, 90, 0)); // This rotates the mesh component by 90 degrees along the Y axis
         
    local PlayerController PC; // This declares a local variable of type PlayerController to be used later
    PC = Level.GetPlayerController(0); // This gets the PlayerController of the first player in the game
    PC.SetViewTarget(self); // This sets the player's view to be controlled by our actor
         
    `log("Actor spawned successfully!"); // This logs a message to the console
}
 
simulated event Tick(float DeltaTime) // This creates a simulated event called Tick that will be called every frame
{
    Super.Tick(DeltaTime); // This calls the Tick function from the parent class
    // Code to be executed every frame goes here
}
 
// Function to be called when the actor takes damage
function TakeDamage(int DamageAmount, Pawn InstigatedBy, Vector HitLocation, vector Momentum, Name damageType)
{
    Super.TakeDamage(DamageAmount, InstigatedBy, HitLocation, Momentum, DamageType); // This calls the TakeDamage function from the parent class
    // Code to be executed when the actor takes damage goes here
}