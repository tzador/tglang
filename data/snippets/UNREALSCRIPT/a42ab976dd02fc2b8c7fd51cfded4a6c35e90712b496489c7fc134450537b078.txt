class MyActor extends Actor;^M
^M
/**
* Variables
*/
var bool bIsInteractable;^M
var int Health;^M
var string Name;^M
var StaticMesh Mesh;^M
var MaterialInstanceConstant MeshMaterial;^M
var int Score;^M
var Actor Target;^M
var array<Vector> SpawnLocations;^M
var GameInstance MyGameInstance;^M
^M
/**
* Functions
*/
function DisplayHealth()^M
{^M
// Display the actor's current health^M
local string HealthMessage;^M
HealthMessage = "Current Health: " $ Health;^M
`Log(HealthMessage);`^M
}^M
^M
function TakeDamage(int Amount, Controller EventInstigator, Vector HitLocation)^M
{^M
// Subtract damage from current health^M
Health -= Amount;^M
^M
// Check if actor has died^M
if (Health <= 0)^M
{^M
Die();^M
}^M
}^M
^M
function Die()^M
{^M
// Play death animation^M
`PlayAnimation("Death");`^M
^M
// Remove actor from level^M
`DetachFromPawn();`^M
`Destroy();`^M
}^M
^M
function Interact()^M
{^M
// Check if actor is currently interactable^M
if (bIsInteractable)^M
{^M
`DoInteractableAction();`^M
}^M
}^M
^M
defaultproperties^M
{^M
// Set default values for variables^M
bIsInteractable=false;^M
Health=100;^M
Name="My Actor";^M
Mesh=StaticMesh'ActorFactoryCube.StaticMeshComponent0';^M
MeshMaterial=MaterialInstanceConstant'MaterialInstanceConstant_0';^M
Score=0;^M
Target=Actor'GamePlayerController_0';^M
MyGameInstance=GameInstance'GameInstance_0';^M
SpawnLocations[0]=Vector(100,50,0);^M
SpawnLocations[1]=Vector(-100,50,0);^M
SpawnLocations[2]=Vector(0,-100,0);^M
}