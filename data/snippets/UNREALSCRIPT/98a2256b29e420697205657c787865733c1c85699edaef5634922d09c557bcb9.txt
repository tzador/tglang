class MyActor extends Actor
    // This is a comment
    /*
    This is a multiline comment
    */
    
    var int health; // variable declaration
    var float damage;
    var string name;
    var int[] inventory; // array declaration
    
    simulated function BeginPlay()
    {
        Super.BeginPlay();
        
        // spawn a particle effect at current location
        `SpawnEmitter(class'ParticleEmitter',,, Self.Location);
        
        // set rotation to look at player
        Rotator lookAtRot = Rotator(Self.Location, GetPlayerController(0).Pawn.Location);
        Self.SetRotation(lookAtRot);
        
        // set initial health and damage values
        health = 100;
        damage = 20.0;
        
        // initialize inventory with starting items
        for (int i = 0; i < inventory.Length; i++)
        {
            inventory[i] = i + 1;
        }
    }
    
    function TakeDamage(int damageAmount)
    {
        health -= damageAmount;
        
        // check if health is below 0
        if (health <= 0)
        {
            Destroy(); // destroy the actor
        }
    }
    
    simulated function Tick(float DeltaTime)
    {
        Super.Tick(DeltaTime);
        
        // constantly check if player is in reach for attacking
        if (GetDistanceTo(GetPlayerController(0).Pawn) < 100)
        {
            // attack player
            GetPlayerController(0).Pawn.TakeDamage(damage);
        }
    }
    
    // example of a function with return value
    function int GetNameLength()
    {
        return name.Length;
    }
    
    defaultproperties
    {
        name = "MyActor";
        inventory[0] = 12;
        inventory[1] = 34;
        inventory[2] = 56;
    }
    
endclass