class TestEnemy extends Actor
    // Define private variables
    var float Health;
    var int Damage;
    var JanitorClass JanitorClass;
    var Sound MisteriousSound;
    var float MoveSpeed;
    var int Stamina;

    // Define default properties
    defaultproperties
    {
        bCollideActors=true // Makes the enemy collide with other actors
        Begin Object Class=DynamicLightEnvironmentComponent Name=DynamicLightEnvironmentComponent0
            // Define light properties for the enemy
            bEnabled=True
            bAutoFind=True
            bConstantBrightness=True
            bForceDynamicLight=True
            bCastDynamicShadow=True
            bStoreLightmapInTexture=False
            bAllowPrecomputedLighting=True
            LightmassSettings=(bUseVertexNormalAsOcclusion=true, IndirectLightingSaturation=1.0, EnvIntensity=1.0)
            MaxDistance=2000
            IESTexture = Texture'EngineMaterials.M_default_shadowTexture'
            BlendMode = BLEND_Masked
            Priority = 1
            bAffectTranslucentLighting=False
            LightingChannels=(bInitialized=True,Dynamic=True,Shadow=False)
            Name="DynamicLightEnvironmentComponent0"
            ObjectArchetype=DynamicLightEnvironmentComponent'Engine.Default__TestEnemy:DynamicLightEnvironmentComponent0'
        End Object
        LightEnvironment=DynamicLightEnvironmentComponent'DynamicLightEnvironmentComponent0'
    }

    // Constructor function
    function TestEnemy Spawn(string name, vector SpawnLocation, rotator SpawnRotation)    
    {
        TestEnemy enemy;
        if (Spawn(SpawnLocation, SpawnRotation))
        {
            SetCollision(false, false, false); // Disable collision for the enemy
            Health = 100;
            Damage = 10;
            JanitorClass= Misc.LoadClass(class 'GameContent.JanitorClass', DynamicClass); // Load janitor class for enemy
            SetTimer(0.5, true, 'TakeDamage'); // Set timer for enemy's damage
            MisteriousSound = AudioComponent(PlaySound(DynamicClass'Enemies.MisteriousSound')); // Play sound for enemy
            MoveSpeed = 500;
            Stamia = 50;
        }
        return enemy;
    }

    // Function to handle enemy's health
    function TakeDamage()
    {
        if (Health > 0)
        {
            // If enemy's health is above 0, take damage and play sound
            PlaySound(DynamicClass'Weapons.BulletHit');
            MisteriousSound.Stop();
            Health -= Damage;
        }
        else
        {
            // If enemy's health is 0, destroy the enemy
            MisteriousSound.Sound = DynamicClass'Enemies.DeathSound';
            MisteriousSound.Play(0.7);
            Destroy();
        }
    }

    // Function to handle the enemy's movement
    function MoveEnemy()
    {
        if (Stamina > 0)
        {
            // If enemy has stamina, move at a set speed
            Velocity = Normal(SpawnRotation);
            Velocity *= MoveSpeed * DeltaTime;
            SetLocation(Location+Velocity);
            Stamina -= 1;
        }
        else
        {
            // If enemy is out of stamina, stop moving
            Velocity = vector(0,0,0);
        }
    }
endclass