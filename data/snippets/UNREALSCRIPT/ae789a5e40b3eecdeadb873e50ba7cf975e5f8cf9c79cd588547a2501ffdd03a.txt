// This is a comment in UNREALSCRIPT
class Weapon extends Actor
    // Defining a new class named Weapon that inherits from the Actor class

    // Class variables or properties
    var Vector MuzzleFlashLocation;// Variable of type Vector representing the location of the muzzle flash
    var Actor WeaponOwner;// Variable of type Actor representing the owner of the weapon
    var int AmmoCount;// Variable of type int representing the current ammo count

    // Class functions or methods
    function Fire()
        // Method to handle the firing logic of the weapon
        local Vector CameraLocation, CameraDirection;// Local variables of type Vector representing the camera location and direction

        // Get the camera location and direction from the player controller
        WeaponOwner.GetPlayerController().GetPlayerViewPoint(CameraLocation, CameraDirection);

        // Spawn a projectile at the muzzle flash location with the calculated direction
        Spawn(class 'Projectile', MuzzleFlashLocation, CameraDirection);

        // Reduce the ammo count by 1
        AmmoCount--;

        // Play a sound effect
        WeaponOwner.PlaySound(ExplosionSound);

        // Display a message on the screen
        WeaponOwner.ClientMessage("Firing Weapon!");

        // Call a custom event on the weapon owner
        WeaponOwner.FireEvent();

        // Log a message to the console
        `Log("Weapon fired successfully. Ammo count now: " $ AmmoCount);`
    endfunction

    event TakeDamage(int DamageAmount, Pawn EventInstigator)
        // Event triggered when the weapon receives damage
        Super.TakeDamage(DamageAmount, EventInstigator);// Call the base class TakeDamage event
        AmmoCount -= DamageAmount;// Reduce the ammo count by the damage amount
        `Log("Weapon took damage. Ammo count now: " $ AmmoCount);`// Log a message to the console
    endevent
endclass