/* This code snippet creates a custom weapon class and its functionalities */

class MyCustomWeapon extends Weapon;   //declaring the class which extends the base Weapon class

//Declaring variables to store weapon attributes such as fire rate, damage, and ammo count
var() protected float WeaponFireRate;
var() protected float WeaponDamage;
var() protected float WeaponAmmoCount;

//Declaring a function to initialize the weapon with default attributes
function InitWeapon()
{
    WeaponFireRate = 0.5f;   //setting the fire rate to 0.5 seconds
    WeaponDamage = 50.0f;     //setting the damage to 50 health points
    WeaponAmmoCount = 100;    //setting the initial ammo count to 100
    
    Super.InitWeapon();   //calling the base Weapon class's InitWeapon function
}

//Declaring a function to shoot the weapon
function FireWeapon()
{
    //check if there is enough ammo to fire
    if(WeaponAmmoCount > 0)
    {
        //create a trace from the weapon's barrel to get the hit location and normal of the surface hit
        local Vector HitLocation;
        local Vector HitNormal;
        WeaponFireTrace(HitLocation, HitNormal);
        
        //calculate the actual damage to be done based on the surface hit's normal and the weapon's damage
        local float Damage = WeaponDamage * Abs(HitNormal.z);
        
        //spawn a projectile at the hit location and set its damage
        local Projectile ProjectileFired;
        ProjectileFired = Spawn(class'MyProjectile',,HitLocation);
        ProjectileFired.SetDamage(Damage);
        
        WeaponAmmoCount--;   //decrease the ammo count by 1
        
        //call the base weapon class's FireWeapon function to play the weapon's firing animation and sound
        Super.FireWeapon();
    }
}

//Declaring a function to reload the weapon
function ReloadWeapon()
{
    WeaponAmmoCount = 100;   //reset the ammo count to 100
    
    //call the base weapon class's ReloadWeapon function to play the weapon's reload animation and sound
    Super.ReloadWeapon();
}