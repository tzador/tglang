class MyActor extends Actor
		annotations
			customEditor
				"DynamicActorEditor.EditorClasses.MyActorEditor"
		placeable;

    var() float ActorHealth;

    event TakeDamage(int DamageAmount, Pawn instigatedBy, vector hitLocation, vector momentum, class <DamageType> damageType) {
        if (ActorHealth < 0) //check if health is below 0
            return; //exit function if health is less than 0

        ActorHealth -= DamageAmount; //subtract damage amount from health
        if (ActorHealth < 0) //check if health is below 0 after taking damage
            ActorHealth = 0; //if so, set health to 0
    }

    defaultproperties {
        bCollideActors = true //enable collision with other actors
        CollisionRadius = 42 //set collision radius to 42 units

        Begin Object class=StaticMeshComponent Name=MyMesh //create a static mesh component
            StaticMesh=StaticMesh'Engine.Sphere' //set the static mesh to a predefined sphere from the engine
        End Object
        Components.Add(MyMesh) //add the static mesh component to the actor

        ActorHealth = 100 //set default health to 100
        bBlockWater = true //block water collision
        bBlockZeroExtent = true //block zero extent collision
        bDeleteMe = false //do not delete actor when destroyed
        bEdShouldSnap = true //enable snapping to grid in the editor
        bHidden = false //not hidden in game
        bNetUseOwnerRelevancy = true //use owner's relevancy in network update
        bSelectable = true //can be selected in the editor
        bWorldGeometry = false //not considered as world geometry
    }