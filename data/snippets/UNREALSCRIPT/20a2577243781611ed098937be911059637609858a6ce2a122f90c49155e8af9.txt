//This is a complex code snippet in UNREALSCRIPT language. It contains multiple data types, structures, and functions.

//Define a structure named "Player" with variables for name, health, and score.
struct Player
{
    var() const name; //string data type, const variable with no default value
    var int health; //integer data type, variable with default value of 0
    var int score; //integer data type, variable with default value of 0
}

//Create a global array of type Player named "PlayerList", with a default size of 10.
const int MAX_PLAYERS = 10; //constant integer to define the size of the array
Player[MAX_PLAYERS] PlayerList; //array declaration with custom size and default values for each element

//Define a function to add a new player to the PlayerList array.
function AddPlayer(string NewName, int NewHealth, int NewScore)
{
    //Create a new instance of the Player structure and assign values to its variables.
    local Player NewPlayer; //local variable of type Player
    NewPlayer.name = NewName;
    NewPlayer.health = NewHealth;
    NewPlayer.score = NewScore;

    //Loop through the PlayerList array to find an empty slot.
    for(int i=0; i<MAX_PLAYERS; i++)
    {
        if(PlayerList[i].name == "") //if the current element has an empty name
        {
            PlayerList[i] = NewPlayer; //add the new player to that element
            break; //break out of the loop
        }
    }
}

//Define a function to calculate the average score of all players in the PlayerList array.
function float GetAverageScore()
{
    local int TotalScore = 0; //local variable to store the sum of all scores
    local int TotalPlayers = 0; //local variable to store the number of players in the array

    //Loop through the PlayerList array to calculate the sum of all scores and count the number of players.
    for(int i=0; i<MAX_PLAYERS; i++)
    {
        if(PlayerList[i].name != "") //if the current element has a non-empty name
        {
            TotalScore += PlayerList[i].score; //add the score of that player to the total score
            TotalPlayers++; //increment the total players count
        }
    }

    //Calculate and return the average score.
    return TotalScore / TotalPlayers;
}

//Define a class named "GameManager" with functions to initialize, update, and end the game.
class GameManager extends Object
{
    //Declaration of a static variable to keep track of the game's current state.
    static var(GameState) ECurrentState;

    //Enumeration to specify the possible states of the game.
    enum GameState
    {
        Waiting, //waiting for players to join
        Playing, //game is in progress
        Ending //end of game
    }

    //Function to initialize the game.
    function Init()
    {
        //Set the initial state of the game to Waiting.
        ECurrentState = GameState.Waiting;
    }

    //Function to update the game.
    function Update()
    {
        if(ECurrentState == GameState.Waiting) //if game state is Waiting
        {
            //Loop through the PlayerList array to check if there are enough players to start the game.
            local int TotalPlayers = 0; //local variable to store the number of players in the array
            for(int i=0; i<MAX_PLAYERS; i++)
            {
                if(PlayerList[i].name != "") //if the current element has a non-empty name
                {
                    TotalPlayers++; //increment the total players count
                }
            }

            //If there are at least 2 players, start the game by changing the game state to Playing.
            if(TotalPlayers >= 2)
            {
                ECurrentState = GameState.Playing;
            }
        }
        else if(ECurrentState == GameState.Playing) //if game state is Playing
        {
            //Update the game logic here.
            //...
        }
        else if(ECurrentState == GameState.Ending) //if game state is Ending
        {
            //End the game and print the final scores of all players.
            for(int i=0; i<MAX_PLAYERS; i++)
            {
                log(PlayerList[i].name @ "'s final score: " @ PlayerList[i].score);
            }
        }
    }

    //Function to end the game.
    function EndGame()
    {
        //Change the game state to Ending.
        ECurrentState = GameState.Ending;
    }
}

//Create an instance of the GameManager class.
local GameManager MyGameManager;

//Initialize the game.
MyGameManager.Init();

//Add some players to the game.
MyGameManager.AddPlayer("John", 100, 0);
MyGameManager.AddPlayer("Sarah", 75, 0);
MyGameManager.AddPlayer("Michael", 50, 0);

//Update the game.
MyGameManager.Update();

//Calculate and print the average score of all players.
log("Average score of all players: " @ MyGameManager.GetAverageScore());

//End the game.
MyGameManager.EndGame();

//Update the game again to print the final scores of all players.
MyGameManager.Update(); //prints: John's final score: 100, Sarah's final score: 75, Michael's final score: 50