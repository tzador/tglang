/**
 * The PlayerPawn class is the base class for the player's character.
 * This class handles the player's input and movement in the game world.
 */
class PlayerPawn extends Pawn config(Engine);

/**
 * The BeginState() function is called when the player pawn is first spawned into the game world.
 * It sets up the player's input and camera settings.
 */
simulated function BeginState() {
    // Call the parent's BeginState() function first
    Super.BeginState();

    // Set up the input bindings for movement and actions
    BindKey(Key_W, '', 'MoveForward');
    BindKey(Key_S, '', 'MoveBackward');
    BindKey(Key_A, '', 'MoveLeft');
    BindKey(Key_D, '', 'MoveRight');
    BindKey(Key_Space, '', 'Jump');

    // Set up the input bindings for camera rotation
    BindKey(Key_MouseX, '', 'Yaw');
    BindKey(Key_MouseY, '', 'Pitch');

    // Set the camera settings
    SetViewOffset(0.0, 0.0, 0.0);
    SetViewRotation(0.0, 0.0, 0.0);
    SetViewPitchMin(0.0);
    SetViewPitchMax(0.0);
    SetViewYawMin(0.0);
    SetViewYawMax(0.0);
    SetViewRollMin(0.0);
    SetViewRollMax(0.0);
}

/**
 * The Tick() function is called every frame and updates the player's movement based on their input.
 * It also updates the player's camera rotation.
 */
simulated function Tick(float DeltaTime) {
    // Call the parent's Tick() function first
    Super.Tick(DeltaTime);

    // Get the player's input
    local Vector MoveInput;
    MoveInput.X = GetInputAxis('MoveForward') - GetInputAxis('MoveBackward');
    MoveInput.Y = GetInputAxis('MoveRight') - GetInputAxis('MoveLeft');
    MoveInput.Z = GetInputAxis('Jump');

    // Move the player based on their input and current rotation
    Velocity = Velocity + Rotator(MoveInput) * DeltaTime * 500.0;
    Location = Location + Velocity * DeltaTime;

    // Get the camera rotation input
    local Rotator CameraInput;
    CameraInput.Yaw = GetInputAxis('Yaw');
    CameraInput.Pitch = GetInputAxis('Pitch');

    // Rotate the camera based on input and current rotation
    SetViewRotation(GetViewRotation() + CameraInput * DeltaTime * 200.0);
}