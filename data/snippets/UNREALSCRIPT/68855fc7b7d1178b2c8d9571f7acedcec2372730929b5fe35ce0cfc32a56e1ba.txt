// Comment block

/*
This is a comment block in UNREALSCRIPT,
used to provide multi-line comments and descriptions of code.
*/

class MyActor extends Actor; // Class declaration

var() int MyIntProperty; // Variable declaration

simulated protected function MyFunction(vector OtherVector, out int OtherInt) // Function declaration with parameters
{
    `log("MyVector is " $ OtherVector @ " and OtherInt is " $ OtherInt);` // Logging function with concatenated strings and parameters
    
    if(MyIntProperty == OtherInt) // Conditional statement
    {
        `log("Integers are equal!");` // Logging function within conditional statement
    }
    else if(MyIntProperty > OtherInt) // Another conditional statement
    {
        `log("MyIntProperty is greater than OtherInt!");` // Logging function within conditional statement
    }
    else // Default statement if none of the conditions are met
    {
        `log("MyIntProperty is less than OtherInt!");` // Logging function within default statement
    }
    
    local vector NewVector = vector(100, 50, 0); // Local variable declaration and assignment
    
    for(local int i = 0; i < MyIntProperty; i++) // For loop with local counter variable
    {
        NewVector.z = NewVector.z + i; // Incrementing z value in each iteration
        
        if(NewVector.z > 100) // Nested conditional statement
        {
            `log("NewVector.z has exceeded 100!");` // Logging function within nested conditional statement
            return; // Exit function if condition is met
        }
        
        if(i == 10) // Conditional statement with logical operator
        {
            `log("i is equal to 10!");` // Logging function within conditional statement
        }
    }
    
    `playSound(SoundCue'ExampleSoundCue');` // Function call with parameter
    
    `setActorLocation(NewVector);` // Function call
    
    `super.MyFunction(OtherVector, OtherInt);` // Calling parent class's function with parameters
}

defaultproperties // Default property block
{
    MyIntProperty = 5 // Default value for variable
}