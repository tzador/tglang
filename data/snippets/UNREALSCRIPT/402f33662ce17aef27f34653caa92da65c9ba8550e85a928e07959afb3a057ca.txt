class MyPlayer extends Pawn;
  /*
    This class represents the player character in a game.
    It inherits from the Pawn class and adds additional functionality.
  */
  
  var WorldInfo World;
  // Variable that stores a reference to the game world
  
  var bool bIsJumping;
  // Flag that indicates whether the player is jumping or not
  
  var int Health;
  // Variable to keep track of the player's health
  
  event PostBeginPlay()
  {
    Super.PostBeginPlay();
    // Call the parent function to initialize the pawn
    
    World = WorldInfo.GetWorldInfo();
    // Get a reference to the game world
    
    bIsJumping = false;
    // Initialize the jumping flag to false
    
    Health = 100;
    // Set the player's health to 100 at the start of the game
  }
  
  event Jump()
  {
    Super.Jump();
    // Call the parent function to perform the default jumping behavior
    
    bIsJumping = true;
    // Set the jumping flag to true
    
    // Add custom logic to modify the player's jump height or speed
  }
  
  event Landed(vector HitNormal)
  {
    Super.Landed(HitNormal);
    // Call the parent function to handle the landing behavior
    
    bIsJumping = false;
    // Set the jumping flag to false since the player has landed
  }
  
  function TakeDamage(int DamageAmount)
  {
    Super.TakeDamage(DamageAmount);
    // Call the parent function to handle taking damage
    
    Health -= DamageAmount;
    // Reduce the player's health based on the damage amount
    
    if (Health <= 0)
    {
      // If the player's health reaches 0 or below, call the Death function
      Death();
    }
  }
  
  function Death()
  {
    // Custom function to handle the player's death
    
    WorldInfo.Game.Broadcast("Player has died!");
    // Broadcast a message to all players in the game
    
    PlayerReplicationInfo.bIsSpectator = true;
    // Set the player to spectator mode
    
    // Additional logic to handle respawning or ending the game
  }