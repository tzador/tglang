class Weapon extends Inventory
/*
This class defines a weapon that can be picked up and used by a player.
Extends base class Inventory.
*/
    config(Weapon);
    /*
    Declare the config variables for the weapon.
    These include default values for weapon properties such as fire rate, damage, etc.
    */
    replicate;
    /*
    Allows the weapon instance to be replicated across the network.
    This is necessary for multiplayer games.
    */
    var() private int AmmoCount;
    /*
    Private variable to store current ammo count for the weapon.
    */
    var() private int AmmoMax;
    /*
    Private variable to store maximum ammo count for the weapon.
    */
    var() private float FireRate;
    /*
    Private variable to store the fire rate of the weapon.
    This determines how quickly the weapon can fire.
    */
    var() private int Damage;
    /*
    Private variable to store the damage of the weapon.
    This determines how much damage each shot will do to a target.
    */
    var() private bool bUnlimitedAmmo;
    /*
    Private variable to indicate if the weapon has unlimited ammo.
    If set to true, the weapon will never run out of ammo.
    */
    var() private bool bAutomaticFire;
    /*
    Private variable to indicate if the weapon can fire automatically.
    If set to true, the weapon can fire continuously as long as the fire button is held down.
    */
    
    simulated event FireShot()
    /*
    Simulated event that fires a single shot from the weapon.
    */
    {
        if (AmmoCount > 0 || bUnlimitedAmmo)
        /*
        Check if the weapon has enough ammo to fire or if unlimited ammo is enabled.
        */
        {
            // Code to spawn projectile and apply damage to target goes here
            if (!bUnlimitedAmmo)
                AmmoCount--;
                /*
                If unlimited ammo is not enabled, decrease ammo count by 1.
                */
        }
    }
    
    simulated event FireContinuous()
    /*
    Simulated event that fires continuously as long as the fire button is held down.
    */
    {
        if (AmmoCount > 0 || bUnlimitedAmmo)
        /*
        Check if the weapon has enough ammo to fire or if unlimited ammo is enabled.
        */
        {
            // Code to spawn projectile and apply damage to target goes here
            if (!bUnlimitedAmmo)
                AmmoCount--;
                /*
                If unlimited ammo is not enabled, decrease ammo count by 1.
                */
            Wait(FireRate);
            /*
            Wait for the specified fire rate before firing again.
            This ensures that the weapon fires at the correct rate.
            */
            FireContinuous();
            /*
            Call this event again to continue firing.
            */
        }
    }
    
    function int GetCurrentAmmo()
    /*
    Function to get the current ammo count for the weapon.
    Returns the value of the AmmoCount variable.
    */
    {
        return AmmoCount;
    }
    
    function int GetMaxAmmo()
    /*
    Function to get the maximum ammo count for the weapon.
    Returns the value of the AmmoMax variable.
    */
    {
        return AmmoMax;
    }
    
    function int GetDamage()
    /*
    Function to get the damage of the weapon.
    Returns the value of the Damage variable.
    */
    {
        return Damage;
    }
    
    function bool IsUnlimitedAmmo()
    /*
    Function to check if the weapon has unlimited ammo.
    Returns the value of the bUnlimitedAmmo variable.
    */
    {
        return bUnlimitedAmmo;
    }
    
defaultproperties
/*
Declare the default properties for the weapon.
These are used when spawning an instance of the weapon.
*/
{
    AmmoCount=10;
    /*
    Default ammo count for the weapon.
    */
    AmmoMax=10;
    /*
    Default maximum ammo count for the weapon.
    */
    FireRate=0.2;
    /*
    Default fire rate for the weapon.
    */
    Damage=20;
    /*
    Default damage for the weapon.
    */
    bUnlimitedAmmo=false;
    /*
    Default setting for unlimited ammo.
    */
    bAutomaticFire=true;
    /*
    Default setting for automatic fire.
    */
}