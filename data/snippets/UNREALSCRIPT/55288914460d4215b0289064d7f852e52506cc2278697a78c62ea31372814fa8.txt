/** 
Players Controller class, used to manage player input and movement. 
*/

class PlayersController extends Actor;

/** 
The player's movement speed. 
EditConst make the variable editable in the editor and constant in game code.
*/
var const float WalkSpeed;

/** 
The maximum amount the player can jump. 
*/
var const float JumpHeight;

/** 
Holds the horizontal and vertical input values. 
*/
var float HorizontalInput, VerticalInput;

/** 
Holds the movement vector.
*/
var vector MovementVector;

/** 
Holds a reference to the player character.
*/
var PlayerCharacter PlayerChar;

/**
Executed when the controller is spawned.
*/
event PostBeginPlay()
{
    //Cast the owner of the controller to the player character class
    PlayerChar = PlayerCharacter(Owner);
}

/**
Executed every frame.
*/
event Tick(float DeltaTime)
{
    //Get the input values from the player
    HorizontalInput = GetInputAxis("MoveForward");
    VerticalInput = GetInputAxis("MoveRight");

    //Get the forward and right vectors of the player's rotation
    local vector ForwardVector, RightVector;
    PlayerChar.GetAxes(ForwardVector, RightVector);

    //Calculate the movement vector using the input values and vectors
    MovementVector = (ForwardVector * VerticalInput) + (RightVector * HorizontalInput);

    //Normalize the vector to restrict diagonal movement from being faster
    MovementVector = Normal(MovementVector);

    //Multiply the vector by the walk speed variable
    MovementVector *= WalkSpeed;

    //Set the movement input for the player character
    PlayerChar.SetMovementInput(MovementVector);

    //Check if the player is pressing the jump key
    if (GetInput(KeyPressed) == "Jump")
    {
        //Calculate the jump vector using the player's up vector and jump height variable
        local vector JumpVector = PlayerChar.UpVector * JumpHeight;

        //Apply the jump input for the player character
        PlayerChar.SetJumpInput(JumpVector);
    }
}