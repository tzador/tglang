/* This is a complex code snippet written in UNREALSCRIPT */

class AdvancedWeapon extends Weapon
    /* This class extends the basic Weapon class and adds advanced features */

    /* Variables */
    var int AmmoCount; // Used to keep track of how much ammo the weapon currently has
    var bool bIsAutomatic; // Indicates whether the weapon fires in full auto or not
    var bool bScopedFire; // Activates scoped firing mode when aiming down sights
    var float ZoomRate; // Adjusts the speed of the zoom when aiming down sights
    
    /* Functions */
    simulated function FireShot()
    {
        /* Fires a single shot from the weapon */
        if(AmmoCount > 0)
        {
            /* Check if there is still ammo left */
            
            /* Create a trace to determine what the shot will hit */
            local Vector StartTrace;
            local Vector EndTrace;
            local Vector EndPoint;
            local Actor HitActor;
            local Vector HitLocation;
            
            /* Set the start and end locations of the trace based on the direction the weapon is facing */
            StartTrace = Location;
            EndTrace = vect(StartTrace + Rotation.Vector * 10000);
            
            /* Perform the actual trace and store the results */
            HitActor = Trace(HitLocation, StartTrace, EndTrace, vect(0, 0, 0));
            
            /* If there was a hit, call the TakeDamage function on the hit actor to deal damage */
            if(HitActor != none)
            {
                HitActor.TakeDamage(Damage, InstigatorController, Location, HitLocation, vect(0, 0, 0), class'DamageType');
            }
            
            /* Decrease the ammo count by 1 after firing */
            AmmoCount--;
        }
    }
    
    simulated function ZoomIn()
    {
        /* Activates the zoom when aiming down sights */
        if(bScopedFire)
        {
            /* If the weapon has scoped fire enabled, call the SetFOV function to zoom in */
            PlayerOwner.SetFOV(ZoomRate, 0.25);
        }
    }
    
    simulated function ZoomOut()
    {
        /* Deactivates the zoom when no longer aiming down sights */
        if(bScopedFire)
        {
            /* If the weapon has scoped fire enabled, reset the player's FOV to the default */
            PlayerOwner.SetFOV(90, 0.25);
        }
    }
    
    function AttachWeapon(PlayerController PC)
    {
        /* Attaches the weapon to the specified player controller */
        super.AttachWeapon(PC);
        /* Set the ammo count to the maximum value */
        AmmoCount = MaxAmmo;
    }
    
    function DetachWeapon()
    {
        /* Detaches the weapon from the player controller */
        super.DetachWeapon();
        /* Reset the ammo count to 0 */
        AmmoCount = 0;
    }

defaultproperties
{
    AmmoCount=0
    bIsAutomatic=false
    bScopedFire=false
    ZoomRate=0.5
    Damage=50
    MaxAmmo=100
    classDamageType=class 'UTDamageType'
}