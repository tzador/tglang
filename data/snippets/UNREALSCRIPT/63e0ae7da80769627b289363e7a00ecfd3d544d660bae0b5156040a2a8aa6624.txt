/** 
 * Simple function to add two integers
 * @param A First integer
 * @param B Second integer
 * @returns Sum of A and B
 */
 
function int Add(int A, int B)
{
    return A + B;
}

/** 
 * Class representing a player character
 */
 
class MyCharacter extends Actor
    implements IPawn, IGameplayAffectedActor
{
    // Properties of MyCharacter
    
    var float Health;
    var PlayerController MyController;   
    
    // Functions of MyCharacter
    
    /**
     * Function to initialize the character
     */
    function Initialize()
    {
        Super();
        
        // Initialize Health property
        Health = 100;
        
        // Find and assign the player controller
        MyController = Owner.PlayerController;
    }
    
    /**
     * Function to take damage from an attack
     * @param Damage Amount of damage to take
     * @param DamageEvent Type of damage being dealt
     * @param DamageCauser Actor causing the damage
     */
    function ReceiveDeath(float Damage, out byte DamageEvent, Actor DamageCauser)
    {
        if (Damage > 0)
        {
            // Subtract damage from health
            Health -= Damage;
            
            // Handle death if health is zero or below
            if (Health <= 0)
            {
                HandleDeath();
            }
        }
    }
    
    /**
     * Function to handle the character's death
     */
    function HandleDeath()
    {
        // Reset health
        Health = 100;
        
        // Play death animation
        PlayAnimation('Death');
        
        // Inform the player controller of death
        MyController.NotifyOfDeath();
    }
}