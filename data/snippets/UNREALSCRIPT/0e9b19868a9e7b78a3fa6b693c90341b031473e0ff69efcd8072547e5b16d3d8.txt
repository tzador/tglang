class CustomActor extends Actor;

/// This custom actor has two base properties
/// and two functions

/// The first base property is an int
/// which determines the width of the actor
var() int Width;

/// The second base property is an int
/// which determines the height of the actor
var() int Height;

/// This function sets the size of the actor
/// based on the width and height properties
function SetSize()
{
    /// First check if the width and height are valid values
    if (Width > 0 && Height > 0)
    {
        /// Use a loop to create a grid of static mesh components
        for (int i=0; i<Width; i++)
        {
            for (int j=0; j<Height; j++)
            {
                /// Create a new static mesh component for each grid space
                local StaticMeshComponent MeshComponent;
                MeshComponent = StaticMeshComponent(MakeComponent(StaticMeshComponent::StaticClass()));

                /// Set the location and rotation of the component
                MeshComponent.SetLocation(Vector(i*100, j*100, 0));
                MeshComponent.SetRotation(Rotator(0, 0, 0));

                /// Attach the component to the actor
                MeshComponent.AttachTo(self);
            }
        }
    }
}

/// This function changes the color of the actor
/// by modifying the material of each static mesh component
function ChangeColor(Color NewColor)
{
    /// Get all the static mesh components attached to the actor
    local array<StaticMeshComponent> Components;
    Components = GetComponentsByClass(StaticMeshComponent::StaticClass());
    
    /// Loop through each component and change the material color
    foreach (StaticMeshComponent Component in Components)
    {
        /// Get the material instance dynamic of the component
        local MaterialInstanceDynamic DynMaterial;
        DynMaterial = MaterialInstanceDynamic(Component.BaseMaterial);
        
        /// Set the new color of the material
        DynMaterial.SetVectorParameterValue("BaseColor", NewColor);
        
        /// Update the material on the component
        Component.SetMaterial(0, DynMaterial);
    }
}

defaultproperties
{
    /// Set the default values for the width and height properties
    Width=10
    Height=10
    /// Set the default mesh for the actor
    Begin Object Class=StaticMeshComponent Name=BaseMesh
    StaticMesh=StaticMesh'EngineMeshes.Sphere'
    End Object
    Components.Add(BaseMesh) // Add the mesh component to the actor's components list
}