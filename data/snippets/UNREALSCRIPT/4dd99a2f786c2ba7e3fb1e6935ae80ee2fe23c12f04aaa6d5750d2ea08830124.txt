/**
 * This code snippet includes a custom Player Controller class with various functionality.
 */

class CustomPlayerController extends PlayerController;

// Base class for custom Player Controller with added functionality

var int PlayerLevel; // Variable to track player's current level

var float PlayerExp; // Variable to track player's experience points

var delegate LevelUpDelegate(); // Delegate to be called when player levels up

var bool CanDoubleJump; // Variable to determine if player can double jump

defaultproperties
{
    PlayerLevel=1; // Set default value for PlayerLevel to 1
    PlayerExp=0; // Set default value for PlayerExp to 0
    InputYawRate=16000; // Set base value for yaw rate (turning speed)
}

// Function to add experience points to player's current total
function AddExp(int ExpToAdd)
{
    PlayerExp += ExpToAdd; // Add experience points to player's current total
    CheckLevelUp(); // Call function to check if player has enough experience points to level up
}

// Function to check if player has enough experience points to level up
function CheckLevelUp()
{
    local bool bLevelUp=false; // Variable to track if player has leveled up
    local int ExpToNextLevel=PlayerLevel*100; // Variable to track experience points needed to level up
    if(PlayerExp >= ExpToNextLevel) // Check if player's experience points are greater than or equal to required amount
    {
        PlayerLevel++; // Increase player's level
        PlayerExp -= ExpToNextLevel; // Subtract required experience points from player's current total
        bLevelUp=true; // Set bLevelUp to true
    }
    
    if(bLevelUp) // If player has leveled up
    {
        GotoState('NotifyLevelUp'); // Go to NotifyLevelUp state
        LevelUpDelegate(); // Call delegate for any additional functionality
    }
}

// Function to perform double jump
function DoDoubleJump()
{
    if(CanDoubleJump) // Check if player is allowed to double jump
    {
        Super.Jump(); // Call base Jump function
        Super.Jump(); // Call Jump function again to perform second jump
    }
}

// Base state for NotifyLevelUp
state NotifyLevelUp
{
    event Tick(float Delta)
    {
        // Code to display message to player about leveling up
    }
    event PlayerTick(float Delta)
    {
        GotoState('Player'); // Go back to Player state after message is displayed
    }
}

// Override Player state to add functionality for double jump
state Player extends GamePlayer
{
    event Jump(key Key)
    {
        DoDoubleJump(); // Call custom function to perform double jump
    }
}