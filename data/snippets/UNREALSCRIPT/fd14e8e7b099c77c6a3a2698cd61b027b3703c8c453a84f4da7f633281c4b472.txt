/**
* This is a class that represents a player character in the game.
*
* @abstract
*/
class PlayerCharacter extends GameObject
    placeable
    within DefaultProperties
        even PlayerStart PlayerStartTag
        var int Health
        var int Ammo
        var vec3 PlayerPosition
        var rotator PlayerRotation
    
    /**
    * Event called when the player takes damage.
    *
    * @param DamageAmount The amount of damage taken.
    * @param DamageSource The source of the damage.
    */
    event TakeDamage(int DamageAmount, Actor DamageSource)
        Health += DamageAmount
    
    /**
    * Function used to shoot a projectile.
    *
    * @return The spawned projectile.
    */
    simulated function Projectile Shoot()
        local Projectile SpawnedProjectile
        
        // Spawn the projectile at the player's position.
        SpawnedProjectile = Spawn(Class'BasicProjectile',,, PlayerPosition);
        
        // Set the projectile's initial rotation to match the player's rotation.
        SpawnedProjectile.SetRotation(PlayerRotation);
        
        // Set the projectile's speed based on the player's ammo count.
        SpawnedProjectile.setVelocity(100.0 * Ammo);
        
        // Decrease the player's ammo after shooting.
        Ammo--;
        
        return SpawnedProjectile
    
    /**
    * Function used to check if the player is at a safe location.
    *
    * @return True if the player is safe, false if not.
    */
    function bool IsSafeLocation()
        local array<Actor> FoundActors
        local Actor FoundActor
        
        // Get all actors within a certain radius of the player.
        FoundActors = GetActors(PlayerPosition, 200.0);
        
        // Loop through each actor found.
        foreach FoundActor in FoundActors
            // If the actor is an enemy, return false.
            if(FoundActor.IsA('EnemyCharacter'))
                return false
        
        // If no enemies were found, return true.
        return true