class PlayerController extends Controller
  implements UIInterface
  /* This class inherits from the Controller class and implements the UIInterface */

  /* Class properties */
  var map<name, UIComponent> Components;
  var UIConfig Config;
  var UIParent Parent;
  var bool bInitialized;

  /* Event that gets called when the player controller is created */
  /* Extends the base Controller event with some additional functionality */
  event PostBeginPlay()
  {
    /* Call the base Controller event first */
    Super.PostBeginPlay();
    /* Then initialize the UI components */
    InitComponents();
  }

  /* Initialize the UI components */
  function InitComponents()
  {
    /* Loop through all the UI components in the config and create them */
    foreach (Config.Components, UIConfigComponent)
    {
      /* Create a new UI component of the specified type */
      local UIComponent Component;
      Component = NewObject(UIParent, UIConfigComponent.ComponentClass, "", Parent);

      /* Add the component to the map with its specified name */
      Components.Set(UIConfigComponent.Name, Component);

      /* Set the component properties based on the config */
      Component.SetPosition(UIConfigComponent.Position);
      Component.SetSize(UIConfigComponent.Size);
      Component.SetText(UIConfigComponent.Text);
      Component.SetColor(UIConfigComponent.Color);
    }

    /* Mark the components as initialized */
    bInitialized = true;
  }

  /* Function to show all the initialized UI components */
  function ShowUIComponents()
  {
    /* Loop through all the components in the map and call their Show() function */
    foreach (Components, UIComponent)
    {
      UIComponent.Show();
    }
  }

  /* Function to hide all the initialized UI components */
  function HideUIComponents()
  {
    /* Loop through all the components in the map and call their Hide() function */
    foreach (Components, UIComponent)
    {
      UIComponent.Hide();
    }
  }

  /* Function that implements the UIInterface method to show a specific component */
  function ShowUIComponent(string componentName)
  {
    /* If the component exists in the map, call its Show() function */
    if (Components.Contains(componentName))
    {
      Components.Get(componentName).Show();
    }
  }

  /* Function that implements the UIInterface method to hide a specific component */
  function HideUIComponent(string componentName)
  {
    /* If the component exists in the map, call its Hide() function */
    if (Components.Contains(componentName))
    {
      Components.Get(componentName).Hide();
    }
  }

  /* Function that implements the UIInterface method to update a specific component text */
  function UpdateUIComponentText(string componentName, string newText)
  {
    /* If the component exists in the map, call its SetText() function */
    if (Components.Contains(componentName))
    {
      Components.Get(componentName).SetText(newText);
    }
  }
endscript