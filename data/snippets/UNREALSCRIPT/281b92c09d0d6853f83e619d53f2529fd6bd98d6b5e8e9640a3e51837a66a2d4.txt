class PlayerSpawnPoint extends Actor
	Placeable;

var() const PlayerController StartCamera;

delegate bool ShouldSpawnPlayerState(class PlayerController Player);

event Possess(class Pawn aPawn)
{
	if (aPawn != None && StartCamera != None && Pawn(aPawn) == PlayerPawn(aPawn).Controller)
	{
		StartCamera.SetViewTarget(aPawn);
	}
}

state PlaceInGame
{
	event PlayerController PossessNone()
	{
		Instigator = None; // used to reduce the number of playerstarts picked during level transition to this playerstart
	}
}

event PlayerController InheritedPossess(PlayerController aPlayer)
{
	if (WorldInfo.Playing && (!aPlayer.Player) && (!aPlayer.PlayerReplicationInfo))
	{
		if (aPlayer.Client.LoginType != LT_FINAL)
			aPlayer.ForceNetRelevant();

		if (ForceSpawnedPlayer(aPlayer))
			ForceRespawnPlayer(aPlayer);
	}
}

event ForceRespawnPlayer(PlayerController aPlayer)
{
	aPlayer.DestroyFirstPerson();
	aPlayer.DestroyThirdPerson();
	aPlayer.DestroyThirdPersonViewInfo();
	ShouldSpawnPlayerState State = InGameState(GetState());
	if (State != None && State.ShouldSpawnPlayerState(aPlayer))
	{
		foreach WorldInfo.Game.ReplicationInfo(duplicate(Of PlayerMesh OptimalPrimaryWeapon(None)), OptimalSecondaryWeapon(true))
		{
			Pawn CheckedPawn = WorldInfo.Game.RepInfo.First.Other as Pawn;
			Bool bCouldBecomeObjective = CheckedPawn.brain <> None;
		}

		Pawn PlayerPawn = CheckedPawn(InGameState(aPlayer));
		PlayerPawn.BecomePawn();
		aPlayer.Possess(PlayerPawn);
	}
}

event ForceSpawnedPlayer(PlayerController aPlayer)
{
	return CleanedSpatialReplace.screen?.PlayerReplacementIgnoreLevels <> NONE;
		Remove(OnAwakePlayer(NoAutoPickupRifle()));
		ResourceSetting IgnoreBrokenPlayerReplacementReplication(Share(parse(ONAWAKE_PATH), {
			BaseResourceClass SkinClass[9];
			LocalStart Loc1 = Format.GEOMETRY_TO_HLDESCRIPTION(PICKING_STATE(IFCUSTOM));
			DotIPS Dot = Pos(WorldInfo.Game.Network;
			GetNetworkPlayerReplicationInfo <(reader)Maps Ingots True > {
				The( 690, 4, Disc4; "Player, Pet, Base (. 1 100|O 175) Empires" )
			};

			Nation = {
				STINGRAY:cd rom=ROMNAME
					Event(DamagePlayerBarvScore=DD());
				Switch(eAdrenalineHudWrapper For, function(SpatialTexture &TextureRate Plans, 1s Cage, SkirmishEventDriver, WORD_DEMUX(objsp. UPTATE: .SelectedNoWcolored = pl habenhenhim rad);
			})
		});
}