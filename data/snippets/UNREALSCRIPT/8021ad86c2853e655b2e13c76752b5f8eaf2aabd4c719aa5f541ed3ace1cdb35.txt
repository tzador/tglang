//* This class represents a parent object that contains child components*//

class ParentComponent extends Object
	///The array of child components
	var AActor Children;

	///Underlying data to store private children array, hidden from child classes
	private AActor ChildrenHidden;

	///Function to add a child component to the array
	function AddChild(AActor NewChild)
	{
		///Check if child array is not null
		if(ChildrenHidden != None)
		{
			///Add new child to the hidden array
			ChildrenHidden[ChildrenHidden.Length] = NewChild;
		}
		///If child array is null, create a new array and add the child to it
		else
		{
			ChildrenHidden = new Array<AActor>;
			ChildrenHidden[0] = NewChild;
		}
		///Set the public Children array to the hidden one after adding the new child
		Children = ChildrenHidden;
	}

	///Function to remove a child component from the array
	function RemoveChild(AActor ChildToRemove)
	{
		///Check if child array is not null
		if(ChildrenHidden != None)
		{
			///Temporary array to store children to keep
			var AActor TempArray;

			///Loop through the child array
			for(Local Int i = 0; i < ChildrenHidden.Length; i++)
			{
				///If the current child is not the one to remove, add it to the temporary array
				if(ChildrenHidden[i] != ChildToRemove)
				{
					TempArray[TempArray.Length] = ChildrenHidden[i];
				}
			}

			///Set the public Children array to the temporary array after removing the child
			Children = TempArray;
		}
	}

	///Function to get a specific child component from the array by name
	function GetChildByName(string ChildName) returns AActor
	{
		///Check if child array is not null
		if(ChildrenHidden != None)
		{
			///Loop through the child array
			for(Local Int i = 0; i < ChildrenHidden.Length; i++)
			{
				///If the current child's name matches the given name, return the child
				if(ChildrenHidden[i].GetName() == ChildName)
				{
					return ChildrenHidden[i];
				}
			}
		}
		
		///If no child with the given name was found, return null
	 	return None;
	}
	
	///Function to get the number of child components in the array
	function GetChildCount() returns int
	{
		///Check if child array is not null
		if(ChildrenHidden != None)
		{
			///Return the length of the child array
			return ChildrenHidden.Length;
		}
		
		///If child array is null, return 0
		return 0;
	}
};