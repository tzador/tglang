class MyGameMode extends GameMode;

// Creating a custom GameMode class named 'MyGameMode' that extends the base class 'GameMode'

// Variables
var int MaxPlayerCount; // Maximum number of players allowed in the game
var bool bFriendlyFireEnabled; // Boolean to indicate whether friendly fire is allowed or not
var float GameLength; // Length of the game in minutes
var array<PlayerController> ActivePlayers; // Array of active players in the game

// Functions
function SetGameLength(float NewLength)
{
    // Function to set the game length in minutes
    GameLength = NewLength;
}

function UpdateFriendlyFire()
{
    // Function to update the friendly fire setting based on game rules
    if (GameLength < 10) // If the game length is less than 10 minutes, disable friendly fire
    {
        bFriendlyFireEnabled = false;
    }
    else // Otherwise, enable friendly fire
    {
        bFriendlyFireEnabled = true;
    }
}

// Event Handlers
event PreLogin(string Options, string Address, out string ErrorMessage)
{
    // Event handler for when a player is trying to login to the game
    // Checking if the player count has reached the maximum allowed
    if (ActivePlayers.Length >= MaxPlayerCount)
    {
        ErrorMessage = "Game is full."; // Setting an error message if the game is full
    }
}

event PlayerSpawned(Pawn SpawnedPawn)
{
    // Event handler for when a player spawns in the game
    // Adding the spawned player to the array of active players
    ActivePlayers.AddItem(SpawnedPawn.Controller);
}