// This is a comment in UNREALSCRIPT

class FirstPersonCharacter extends Pawn
  placeable
  animtree PersonAnimTree

  var() int AmmoInClip;

/**
 * Replication property to keep track of current game time.
 */
var() float GameTime;

/**
 * Function to calculate the velocity of the character based on input from the player.
 * @param ForwardSpeed The speed at which the character should move forwards.
 * @param RightSpeed The speed at which the character should move right.
 * @param UpSpeed The speed at which the character should move up.
 */
simulated event CalcVelocity(float ForwardSpeed, float RightSpeed, float UpSpeed)
{
  // Calculate the velocity in the X direction based on the Forward and Right speed.
  local Vector NewVelocityX = Rotation *(ForwardSpeed * 500.0 + RightSpeed * 500.0);

  // Calculate the velocity in the Y direction based on the Up speed.
  local Vector NewVelocityY = Vector(0, 0, UpSpeed * 500.0);

  // Add the two velocities together.
  Velocity = NewVelocityX + NewVelocityY;

  // Update the GameTime property by adding the DeltaTime to it.
  GameTime += DeltaTime;
}

/**
 * Function to handle the character jumping.
 */
simulated event Jump()
{
  // Only make the character jump if they are on the ground.
  if(OnGround)
  {
    // Calculate the jump velocity and set it as the new Velocity.
    local Vector JumpVelocity = vect(0, 0, 500.0);

    // Update the Velocity with the JumpVelocity.
    Velocity += JumpVelocity;
  }
}

/**
 * Function to handle the character shooting.
 */
simulated event Shoot()
{
  // Only allow shooting if there is more than 0 Ammo in the clip.
  if(AmmoInClip > 0)
  {
    // Spawn a projectile at the character's current location.
    local Projectile Projectile = Spawn(class'Projectile', self, '', Location);

    // Check if the projectile successfully spawned.
    if(Projectile != None)
    {
      // Set the velocity of the projectile based on the rotation of the character.
      local Vector ProjectileVelocity = Rotation * vect(0, 1000, 0);
      Projectile.Velocity = ProjectileVelocity;

      // Decrease the AmmoInClip property by 1.
      AmmoInClip--;
    }
  }
}

/**
 * Function to handle the character reloading.
 */
simulated event Reload()
{
  // Reset the AmmoInClip property to its maximum value.
  AmmoInClip = MaxAmmoInClip;
}

// End of code snippet in UNREALSCRIPT