/*
This code snippet is a demonstration of a custom data structure in UnrealScript.
It creates a 2D array of vectors and provides methods to add, remove, and modify elements.
*/

class CustomArray extends Object;

/* 
The main data structure for storing the vectors
*/
var array<vector> VectorArray;

/**
Adds a new vector to the end of the array.
@param vectorToAdd - the vector to be added
*/
function AddVector(vector vectorToAdd)
{
	VectorArray.Add(vectorToAdd);
}

/**
Removes the specified vector from the array.
@param vectorToRemove - the vector to be removed
*/
function RemoveVector(vector vectorToRemove)
{
	local int indexToRemove;
	
	// Search for the vector in the array
	for (indexToRemove = 0; indexToRemove < VectorArray.Length; indexToRemove++)
	{
		if (VectorArray[indexToRemove] == vectorToRemove)
		{
			// Found the vector, remove it from the array
			VectorArray.Remove(indexToRemove);
			break;
		}
	}
}

/**
Modifies the vector at the specified index.
@param index - the index of the vector to be modified
@param newVector - the new values for the vector
*/
function ModifyVector(int index, vector newVector)
{
	// Check if index is within range
	if (index >= 0 && index < VectorArray.Length)
	{
		// Modify the vector at the specified index
		VectorArray[index] = newVector; 
	}
}

/**
Retrieves the vector at the specified index.
@param index - the index of the vector to be retrieved
@return vector - the vector at the specified index
*/
function GetVector(int index)
{
	// Check if index is within range
	if (index >= 0 && index < VectorArray.Length)
	{
		return VectorArray[index];
	}
	else
	{
		return vector(0, 0, 0);
	}
}

/**
Clears all elements from the array.
*/
function ClearArray()
{
	VectorArray.Empty();
}

defaultproperties
{
	// Initialize the array with 10 empty vectors
	VectorArray[10];
}