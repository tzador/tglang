//Declare a class called "Enemy"
class Enemy extends Actor
    placeable; //allows placement of enemy in level editor

//Declare variables for the enemy class
var(Enemy) int MaxHealth; //maximum health of enemy
var(Enemy) int CurrentHealth; //current health of enemy
var(Enemy) bool bIsDead; //boolean to check if enemy is dead

//Define a default constructor for the enemy class
function Enemy()
{
    Super(); //calls parent class constructor

    //Initialize variables
    MaxHealth = 100;
    CurrentHealth = MaxHealth;
    bIsDead = false;
}

//Override the "TakeDamage" function from Actor class
//Decreases current health of enemy when taking damage
//Checks if enemy is dead and calls "Die" function if true
//Params: Damage - amount of damage taken
function TakeDamage(int Damage)
{
    Super.TakeDamage(Damage); //calls parent class function

    //Decrease current health by damage amount
    CurrentHealth -= Damage;

    //Check if enemy is dead
    if (CurrentHealth <= 0)
    {
        Die(); //call Die function
    }
}

//Define "Die" function for enemy class
//Sets bIsDead to true and destroys actor after 2 seconds
function Die()
{
    //Set bIsDead to true
    bIsDead = true;

    //Destroy actor after 2 seconds
    SetTimer(2.0, false, 'Destroy', true);
}

//Define "Destroy" function for enemy class
//Destroys actor and spawns a particle effect at its location
auto state Destroy()
{
    //Destroy actor
    Destroy();

    //Spawn explosion particle effect at actor's location
    ParticleSystemManager(SpawnedParticleSystem, SpawnLocation, Rotation);
}

//Override "Touch" function from Actor class
//Causes damage to player when touched by enemy
function Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation,
    Vector HitNormal)
{
    local PlayerPawn Player; //create PlayerPawn variable

    if (PlayerPawn(Other) != none) //checks if Other is a PlayerPawn
    {
        Player = PlayerPawn(Other); //assign Other to Player
        Player.TakeDamage(10); //causes 10 damage to player
    }
}

//Override "Tick" function from Actor class
//Rotates actor to face player every tick
function Tick(float DeltaTime)
{
    Super.Tick(DeltaTime); //calls parent class function

    //Rotate to face player
    RotateToFace(PlayerPawn(PlayerPawnController(PlayerIndex = 0).Pawn));
}