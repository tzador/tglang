class MyActor extends Actor
    placeable;

var int health;
var float speed;

event BeginPlay()
{
    ` This event is called when the actor starts playing in the level.`
    ` This is where we initialize variables and set up functionality.`
    health = 100;
    speed = 1.5;
    `Here we create an instance of our custom AI controller for this actor.`
    `This will allow us to add behaviors and actions to our actor.`
    AddController(Class'MyAIController');
}

function MoveToEnemy()
{
    `This function handles the movement of the actor towards the nearest enemy.`
    `First, we get all actors of type Pawn and store them in an array.`
    local array<Pawn> allEnemies;
    foreach WorldInfo.AllActors(Class'Pawn',AllEnemies)
    {
        `Next, we loop through each actor and check if it is an enemy.`
        if (allEnemies[i].bIsEnemy)
        {
            `If it is an enemy, we set the actor's rotation and move it forward.`
            `This will make it face the enemy and move towards it.`
            rotator newRotation = rotator(GetActorLocation() - allEnemies[i].GetActorLocation());
            SetRotation(newRotation);
            Move(Dir_Forward);
            `We break the loop after finding the first enemy.`
            break;
        }
    }
}

event TakeDamage(int Damage, Controller EventInstigator, vector HitLocation, vector Momentum, class<DamageType> DamageType)
{
    `This event is called when the actor takes damage from another actor or trigger.`
    `We decrease the health of the actor and check if it has reached 0.`
    health = health - Damage;
    if (health <= 0)
    {
        `If health is 0, the actor is destroyed and removed from the level.`
        Destroy();
    }
}