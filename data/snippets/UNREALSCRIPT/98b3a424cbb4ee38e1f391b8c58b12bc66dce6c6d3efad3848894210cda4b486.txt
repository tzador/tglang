class MutatorZones extends GameInfo;

/*
 * This class creates a custom game mode that changes certain variables
 * when a player enters a specific zone
 */

var int ZoneSpeedMultiplier;
  /* The speed multiplier applied when player is inside a zone */

var int ZoneGravityScale;
  /* The gravity scale applied when player is inside a zone */

var array<PlayerController> PlayersInZone;
  /* An array of players currently inside the zone */

function OnZoneEnter(Zone MyZone, Pawn Other, bool bFromSweep)
{
  /* Called when a pawn enters a special zone */
  
  // Check if player is an actual player
  local PlayerController Player = PlayerController(Other);
  if(Player != None)
  {
    // Add player to array
    PlayersInZone.Add(Player);
    
    // Modify speed
    Player.SetSpeed(Player.GetSpeed() * ZoneSpeedMultiplier);
    
    // Modify gravity scale
    Player.GravityScale = ZoneGravityScale;
  }
}

function OnZoneExit(Zone MyZone, Pawn Other)
{
  /* Called when a pawn exits a special zone */
  
  // Check if player is an actual player
  local PlayerController Player = PlayerController(Other);
  if(Player != None)
  {
    // Remove player from array
    PlayersInZone.Remove(Player);
    
    // Reset speed
    Player.SetSpeed(Player.GetDefaultSpeed());
    
    // Reset gravity scale
    Player.GravityScale = 1.0;
  }
}

defaultproperties
{
  // Set default values for mutator zones
  ZoneSpeedMultiplier=2;
  ZoneGravityScale=0.5;
  
  // Set up collision components and triggers for zones
  Begin Object Class=WorldTrigger Name=ZoneTrigger1
    Begin Using Class=SmartTriggerComponent Name=ZoneTrigger1Component
      TraceList.Add(class'Pawn');
    End Using
    CollisionComponent=ZoneTrigger1Component
    TriggerArray[0]=ZoneTrigger1Component
    CollisionComponent.bTraceComplex=True
    CollisionComponent.bIgnoreEncroachers=True
    CollisionComponent.bUseCCD=True
    ZoneFilter=PAC_PlayerLevel
  End Object
}