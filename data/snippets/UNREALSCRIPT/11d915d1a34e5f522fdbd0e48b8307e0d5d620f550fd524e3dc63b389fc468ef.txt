/* This code snippet is a custom TArray class implementation using UnrealScript */

class CustomTArray expands Object
    /* Stores an array of objects */
    
    var(TArray) array Object;
    
    /* Adds an object to the end of the array */
    function Add(Object obj)
    {
        local TArrayElement element;
        element.obj = obj;
        self.AddElementToArray(element);
    }
    
    /* Adds an object to the specified index of the array */
    function Insert(Object obj, index)
    {
        local TArrayElement element;
        local int size, i;
        
        size = self.array.Length;
        element.obj = obj;
        
        self.array.SetSize(size + 1);
        
        /* Shifts all elements after the specified index by one position to make room for the new element */
        for(i = size; i > index; i--)
        {
            self.array[i] = self.array[i - 1];
        }
        
        self.array[index] = element;
    }
    
    /* Removes the specified object from the array */
    function Remove(Object obj)
    {
        local int index;
        index = self.array.FindObject(obj);
        
        if(index >= 0)
        {
            self.RemoveAt(index);
        }
    }
    
    /* Removes the object at the specified index from the array */
    function RemoveAt(index)
    {
        local TArrayElement removed;
        local int size, i;
        
        size = self.array.Length;
        removed = self.array[index];
        
        /* Shifts all elements after the specified index by one position */
        for(i = index; i < (size - 1); i++)
        {
            self.array[i] = self.array[i + 1];
        }
        
        /* Sets the last element to null to remove any references */
        self.array[size - 1] = None;
        self.array.SetSize(size - 1);
    }
    
    /* Checks if the array contains the specified object */
    function Contains(Object obj)
    {
        return self.array.Contains(obj);
    }
    
    /* Sorts the array in ascending order based on the specified comparison function */
    function Sort(SortFunction func)
    {
        self.array.Sort(func);
    }
    
    /* Returns the size of the array */
    function Size()
    {
        return self.array.Length;
    }
    
    /* Clears the array */
    function Clear()
    {
        self.array.Empty();
    }
    
    struct TArrayElement
    {
        var(Object) obj;
    }
    
    /* Override of GetObject() function to return the array as a parameter */
    simulated function GetObject(ref TArray resultArray)
    {
        local int i;
        
        for(i = 0; i < self.array.Length; i++)
        {
            resultArray.Add(self.array[i].obj);
        }
    }
    
    /* Override of GetObject() function to return the array as a return value */
    function TArray GetObject()
    {
        local int i;
        local TArray resultArray;
        
        for(i = 0; i < self.array.Length; i++)
        {
            resultArray.Add(self.array[i].obj);
        }
        
        return resultArray;
    }
    
defaultproperties
{
    array.SetSize(0);
}