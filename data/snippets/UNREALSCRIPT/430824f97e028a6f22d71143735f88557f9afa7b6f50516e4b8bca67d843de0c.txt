/** 
* This is a basic class definition in UnrealScript
* It contains various properties, functions, and events
* that can be used to define custom behavior in a game
*/

class MyCustomClass extends Actor
    implements Interactable, KPotentialTarget
    extends Object;

/**
* The state block is used to define different states 
* that the class can be in, controlling its behavior
* based on certain conditions
*/

state Waiting
{
    Begin:
        // This function is called when the state begins
        Super.Begin();

        // Set the actor's location and rotation
        SetActorLocationAndRotation(Vector(100, 0, 50), Rotator(0, 90, 0));
    
    Tick:
        // This function is called every frame while in this state
        Super.Tick(DeltaTime);

        // Rotate the actor
        AddActorLocalRotation(Rotator(0, 1, 0));

    End:
        // This function is called when the state ends
        Super.End();
}

state Active extends Waiting
{
    Begin:
        // Call the parent class's Begin event
        Super.Begin();

        // Set properties specific to this state
        bIsActive = true;
        InitialSpeed = 500;
    
    Tick:
        // Call the parent class's Tick event
        Super.Tick(DeltaTime);

        // Update the actor's location based on its current rotation and speed
        SetActorLocation(InitialSpeed * GetActorRotation().Vector() * DeltaTime);
    
    End:
        // Call the parent class's End event
        Super.End();
}

/**
* Properties are variables that define the characteristics of
* an object or class. They can be used to store data or control
* behavior.
*/

var bool bIsActive;
var float InitialSpeed;

/**
* Functions are reusable blocks of code that can be called
* from different parts of the class. They can take in parameters 
* and return values.
*/

function OnInteract()
{
    // This function handles what happens when the object is interacted with.
    // For example, it could toggle the active state of the object.

    if (bIsActive)
    {
        ChangeState('Waiting');
    }
    else
    {
        ChangeState('Active');
    }
}

function float GetSpeedMultiplier(float Multiplier)
{
    // This function calculates a new speed based on a given multiplier
    // and returns the result.

    return Multiplier * InitialSpeed;
}

/**
* Events are special functions that are called by the game engine
* when certain actions or conditions are met. They can be used to 
* trigger custom behavior.
*/

event FallOutOfWorld()
{
    // This event is called when the actor falls out of the world 
    // and handles what happens when that occurs.

    bIsActive = false;
    ChangeState('Waiting');
}

defaultproperties
{
    // The default properties and values for instances of this class

    BeginState = 'Waiting';
    CollisionType = COLLIDE_BlockAll;
    bCanBeDamaged = true;
    MaxHealth = 100;
    InitialSpeed = 500;
}