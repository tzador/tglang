/**
 * This class represents a player character in a game.
 * It contains properties and functions for controlling the character's actions and interactions.
 */
note class PlayerCharacter extends Object
	/**
	 * The character's current health.
	 * This property is only editable by the server.
	 */
	private editconst float Health;

	/**
	 * The character's maximum health.
	 * This property is editable by both the server and clients.
	 */
	private edit float MaxHealth;

	/**
	 * The character's movement speed.
	 * This property is only editable by the server.
	 */
	private editconst float MovementSpeed;

	/**
	 * The character's current inventory.
	 * This property is editable by both the server and clients.
	 */
	private edit array<Item> Inventory;

	/**
	 * The character's current weapon.
	 * This property is editable by both the server and clients.
	 */
	private edit Item CurrentWeapon;

	/**
	 * Function for damaging the character and decreasing their health.
	 * This function is only callable by the server.
	 *
	 * @param Damage - The amount of damage to be dealt to the character.
	 */
	private server function Damage(float Damage)
	{
		if (Damage > 0)
		{
			Health -= Damage;
		}
	}

	/**
	 * Function for increasing the character's health.
	 * This function is only callable by the server.
	 *
	 * @param Amount - The amount of health to be added to the character.
	 */
	private server function AddHealth(float Amount)
	{
		if (Amount > 0)
		{
			Health = min(MaxHealth, Health + Amount);
		}
	}

	/**
	 * Function for equipping a new weapon to the character.
	 * This function is only callable by the server.
	 *
	 * @param NewWeapon - The new weapon to be equipped.
	 */
	private server function EquipWeapon(Item NewWeapon)
	{
		if (NewWeapon != None)
		{
			if (CurrentWeapon != None)
			{
				Inventory.AddItem(CurrentWeapon); //Add the current weapon to the inventory
			}

			Inventory.RemoveItem(NewWeapon); //Remove the new weapon from the inventory
			CurrentWeapon = NewWeapon;
		}
	}

	/**
	 * Function for picking up an item and adding it to the character's inventory.
	 * This function is only callable by the server.
	 *
	 * @param ItemToPickUp - The item to be picked up.
	 */
	private server function PickUpItem(Item ItemToPickUp)
	{
		if (ItemToPickUp != None)
		{
			Inventory.AddItem(ItemToPickUp);
		}
	}

	/**
	 * Function for dropping an item from the character's inventory.
	 * This function is only callable by the server.
	 *
	 * @param ItemToDrop - The item to be dropped.
	 */
	private server function DropItem(Item ItemToDrop)
	{
		if (ItemToDrop != None)
		{
			Inventory.RemoveItem(ItemToDrop);
		}
	}

	/**
	 * Function for using the character's currently equipped weapon.
	 * This function is only callable by the server.
	 *
	 * @param Target - The target to use the weapon on.
	 */
	private server function UseWeapon(Object Target)
	{
		if (CurrentWeapon != None)
		{
			CurrentWeapon.Use(Target);
		}
	}

	/**
	 * Called when the character takes damage.
	 * This function is called on both the server and clients.
	 *
	 * @param Damage - The amount of damage taken.
	 */
	event OnDamageReceived(float Damage)
	{
		if (Health <= 0)
		{
			Die(); //If health is zero or below, the character dies
		}
	}

	/**
	 * Called when the character dies.
	 * This function is called on both the server and clients.
	 * It handles character death and respawning.
	 */
	event OnDeath()
	{
		//Handle character death and respawn logic
	}

	defaultproperties
{
	Health = 100;
	MaxHealth = 100;
	MovementSpeed = 500;
}