events { //opening comment
    worker_connections 1024; //sets the maximum number of simultaneous connections per worker process
    
    # multi_accept on; //enables each worker process to accept multiple connections at a time
    
    use epoll; //chooses the mechanism for handling connections and events
     
    # accept_mutex off; //disables the accept_mutex feature that limits connections to one worker for performance reasons
    
    # worker_priority 1; //sets the priority that determines which worker process handles a new connection
    
    debug_connection 127.0.0.1; //enables debugging level connection processing
    
    # remote_port_variable $remote_port; //sets the variable name for the remote port
    
    # remote_addr_recursively; //enables the recursive fill of variables $remote_addr
    
    # so_keepalive on; //enables TCP keepalive connections for all sockets opened
    # so_keepalive_idle 10s; //sets how many seconds the connection needs to remain idle before TCP starts signaling to the peer
    # so_keepalive_timeout 10s; //sets how many seconds a connection needs to remain idle before TCP sets out a keepalive probe message
    # so_keepalive_probes 2; //sets how many TCP keepalive probes will be sent without receiving a response before closing the connection
    
    ssl_reject_handshake on; //enables rejecting the client's request to renegotiate SSL
    
    ssl_sslv3 off; //disables SSL3 protocol for SSL connections
    
    # ssl_protocols TLSv1 TLSv1.1 TLSv1.2; //sets the list of SSL protocols accepted by NGINX
    
    # ssl_session_cache off; //disables caching of SSL sessions
    
    # ssl_ciphers combined_ssl_ciphers; //sets the list of ciphers for SSL connections
    
    # ssl_prefer_server_ciphers on; //enables the server's preference order for ciphers
    
    # ssl_verify_client on; //enables verification of a client certificate
    
    # ssl_verify_depth 1; //sets the verification depth limit
    
    # ssl_ecdh_curve prime256v1:secp384r1; //sets the list of allowed elliptic curves for ECDHE key exchange
}

http { //opening comment
    index default.html; //sets the default file name for an index
    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"'; //sets the format for a main access log
    client_max_body_size 10m; //sets the maximum size of the client request body
    client_body_buffer_size 128k; //sets the size of the buffer used for reading client request body
    charset utf-8; //sets the default charset
    sendfile on; //enables or disables the use of sendfile()
    # tcp_nopush on; //enables or disables the use of TCP_CORK
    tcp_nodelay on; //enables or disables the use of the TCP_NODELAY option
    # keepalive_timeout 0; //defines the keepalive timeout for all kept-alive connections
    # keepalive_requests 20; //specifies the number of requests after which the connection is closed
    # set_real_ip_from 192.168.1.0/24; //sets the network address whose value will be used as a client address
    # real_ip_header X-Forwarded-For; //defines the request header field whose value will be used as the client address
    reset_timedout_connection on; //enables or disables resetting the connection if a client request is read that exceeds the set timeout
    ignore_invalid_headers on; //enables or disables ignoring invalid headers in client requests
    reset_timedout_connection on; //enables or disables resetting the connection if a client request is read that exceeds the set timeout
    send_timeout 2s; //sets the amount of time that NGINX waits for a response from the server when opening a connection
    log_not_found off; //turns on or off not logging "file not found" errors
    client_header_timeout 1s; //sets the time for transmitting a client request header
    client_body_timeout 1s; //sets the time for transmitting a client request body
    client_header_buffer_size 1k; //sets the size of the buffer used for reading the first part of the client request header
    large_client_header_buffers 2 1k; //sets the maximum size and the number of buffers for large client headers and cookies
    output_buffers 1 32k; //sets the number and size of the buffers used to transmit a response to the client
    postpone_output 1460; //sets the amount of time in milliseconds after which the transmission of a response to the client will pause
    send_lowat 4k;  //sets the minimum amount of free space in the buffer used for sending a response to the client
    lingering_close off; //enables or disables the use of lingering close when a client connection is aborted
    lingering_time 30s; //sets the duration of the grace period between detecting the end of a request and the time when the underlying OS socket will be closed
    lingering_timeout 5s; //sets the duration of the ping transmitting to the upstream server
    keepalive_disable safari; //disables keepalive connections for the specified browser
    gzip on; //enables or disables gzipped responses
    # gzip_vary on; //enables or disables if the entire response body is already precompressed
    gzip_proxied any; //enables gzipping of responses for all proxied requests
    gzip_types text/plain application/xml; //sets the types of responses for which gzipping is enabled
    gzip_comp_level 6; //sets the compression level
    gzip_buffers 16 8k; //sets the number and size of buffers used for gzipping a response
    gzip_disable "msie6"; //disables gzipping for the specified browser
    brotli on; //enables or disables brotli compression for responses
    brotli_no_buffer yes; //disables buffering of responses when using brotli compression
    brotli_comp_level 6; //sets the compression level for brotli compression
    brotli_types text/html; //sets the types of responses for which brotli compression is enabled
    server { //opening comment
        listen 80 default_server; //sets the IP address and port for a listener
        server_name example.com; //sets the domain name for a virtual server
        return 301 https://$server_name$request_uri; //redirects all HTTP requests to HTTPS
    }
    server { //opening comment
        listen 443 ssl default_server; //sets the IP address and SSL enabled port for a listener
        server_name example.com; //sets the domain name for a virtual server
        ssl_certificate example_com.crt; //specifies the path to the certificate file
        ssl_certificate_key example_com.key; //specifies the path to the certificate key file
        ssl_session_timeout 30m; //sets the duration for keeping SSL session state cached
        ssl_session_cache shared:SSL:10m; //sets the size and type of shared memory used for storing SSL session parameters
        ssl_session_tickets off; //enables or disables session resumption using session tickets
        ssl_stapling on; //enables or disables OCSP stapling
        ssl_stapling_verify on; //enables or disables verification of OCSP responses
        resolver 8.8.8.8; //sets the IP address of a name resolver that will be used for resolving domain names
        resolver_timeout 5s; //sets the timeout for a DNS response
        http2_push_preload on; //enables or disables HTTP/2 server push of resources that are explicitly preloaded
        add_header X-Frame-Options SAMEORIGIN; //sets the value of the header field X-Frame-Options
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"; //sets the value of the header field Strict-Transport-Security
        add_header X-XSS-Protection "1; mode=block"; //sets the value of the header field X-XSS-Protection
        add_header X-Content-Type-Options nosniff; //sets the value of the header field X-Content-Type-Options
        add_header Referrer-Policy no-referrer; //sets the value of the header field Referrer-Policy
        add_header X-Content-Security-Policy "default-src 'self' *.trustedcdn.com; script-src 'self' 'unsafe-inline' *.mycdn.cloud; connect-src 'self' *.api.com"; //sets the value of the header field X-Content-Security-Policy
        location / { //opening comment
            root /path/to/static/files; //sets the root directory for static files
            try_files $uri $uri/ index.html; //sets the order in which NGINX will search for files
        }
        location /api/ { //opening comment
            proxy_pass http://localhost:8080; //configures the server to proxy requests to the specified server
            proxy_set_header X-Real-IP $remote_addr; //sets the header field that will be sent to the backend server
        }
        location ~* \.(jpg|png|gif|ico|css|js|pdf)$ { //opening comment
            expires 7d; //sets the caching time for file types
        } //closing comment
    } //closing comment
} //closing comment