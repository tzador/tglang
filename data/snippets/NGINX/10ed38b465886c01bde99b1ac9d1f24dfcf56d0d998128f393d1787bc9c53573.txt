server {
  # specifies the port to listen on
  listen 80;
  
  # sets the domain name for the server
  server_name example.com www.example.com;
  
  # specifies the document root directory
  root /var/www/example/;
  
  # location block for handling requests for the index page
  location / {
    index index.html;
  }
  
  # location block for handling requests for a specific page
  location /about/ {
    # enables the use of regular expressions to match the request
    # in this case, it matches with any subdirectory after /about/
    # and captures it in the $uri variable
    # example: /about/history/ would capture "history" in $uri
    # the captured value can be used in the proxy_pass directive below
    # to dynamically serve different pages based on the subdirectory
    rewrite (^/about/[^/\.]+)/?$ $1.php last;
    
    # specifies which PHP files to handle
    index index.php;
    
    # specifies additional configuration for PHP handling
    location ~ \.php$ {
      # specifies which PHP interpreter to use
      # in this case, we are using the PHP-FPM socket to connect to the 
      # PHP-FPM server running on the same machine
      fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
      
      # specifies additional configuration for PHP handling
      # this is optional and can be customized depending on server 
      # requirements
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      include fastcgi_params;
    }
  }
  
  # location block for handling static files
  # this is optional and can be customized depending on server 
  # requirements
  location ~ \.(js|css|png|jpg|jpeg|gif|ico)$ {
    # enables caching of these static files for better performance
    # and reduced server load
    expires max;
    
    # specifies the path to the static files
    # in this case, they are stored in a separate directory outside 
    # of the document root
    # this adds an additional layer of security to the server
    # as sensitive files will not be publicly accessible
    root /var/www/static/;
    
    # allows the requests to be handled by Nginx first before passing
    # it to other applications or backend servers
    try_files $uri $uri/ =404;
  }
  
  # location block for handling requests to the PHP-FPM server
  location ~ \.php$ {
    # specifies which PHP interpreter to use
    # in this case, we are using the PHP-FPM socket to connect to the 
    # PHP-FPM server running on the same machine
    fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
    
    # specifies additional configuration for PHP handling
    # this is optional and can be customized depending on server 
    # requirements
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
  }
  
  # location block for handling requests to other backend servers
  # in this case, we are using a reverse proxy to serve requests for 
  # another website on a different server
  location /other/ {
    # specifies the URL to proxy the request to
    # in this case, we are proxying to another server on port 8080
    proxy_pass http://example2.com:8080/;
    
    # specifies additional configuration for the proxy server
    proxy_set_header Host $host;
    
    # enables caching of the proxy server's response for better 
    # performance and reduced server load
    proxy_cache_bypass $http_pragma;
  }
  
  # enables gzip compression for the server's response
  gzip on;
  
  # specifies the types of files to compress
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
  
  # specifies the minimum file size to compress
  gzip_min_length 1000;
  
  # specifies the compression level
  gzip_comp_level 6;
  
  # specifies the buffer size for compression
  gzip_buffers 16 8k;
  
  # enables HTTP/2 for better performance and reduced server load
  # this requires the use of an SSL certificate
  listen 443 ssl http2; 
  ssl_certificate /etc/ssl/certs/example.com.crt;
  ssl_certificate_key /etc/ssl/private/example.com.key;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384";
  
  # enables HTTP/2 server push for faster website loading
  # this requires the use of link preload headers in the HTML code
  add_header Link "</static/styles.css>; rel=preload; as=style";
  add_header Link "</static/image.jpg>; rel=preload; as=image";
  add_header Link "</static/script.js>; rel=preload; as=script";
  
  # enables server-side caching for better performance and reduced 
  # server load
  # this requires the use of additional configuration in the server 
  # level configuration file
  proxy_cache_path /tmp/cache levels=1:2 keys_zone=example1cache:10m inactive=60m;
  
  # specifies a limit for the size of a request body
  # this can help prevent large data transfers that could potentially 
  # cause a denial of service attack
  client_max_body_size 10m;
  
  # allows for file uploads up to a certain size
  # this should match the value set in the PHP configuration
  client_body_buffer_size 128k;
}