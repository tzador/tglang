# nginx configuration file

# setting up server block for website
server {
  listen 80;
  server_name www.example.com;
  
  # location block for root directory
  location / {
    root /var/www/html;
    
    # setting default page as index.html
    index index.html;
  }
  
  # location block for static files
  location /static/ {
    root /var/www/html;
    
    # setting caching options for static files
    expires 1d;
    access_log off;
    add_header Cache-Control "public";
  }
  
  # location block for API endpoint
  location /api/ {
    proxy_pass http://localhost:8000;
    
    # setting proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded_For $proxy_add_x_forwarded_for;
  }
  
  # error pages
  error_page 404 /404.html;
  error_page 500 502 503 504 /50x.html;
  
  # redirecting trailing slashes in URLs
  if ($request_uri ~* "/(.*)/$") {
    return 301 $scheme://$host$1;
  }
}

# setting up nginx load balancer
upstream backend_pool {
  server backend1.example.com:8000;
  server backend2.example.com:8000;
}

server {
  listen 80;
  server_name www.example.com;
  
  # location block for load balancing
  location / {
    proxy_pass http://backend_pool;
    
    # setting proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded_For $proxy_add_x_forwarded_for;
  }
}

# setting up SSL for HTTPS
server {
  listen 443 ssl;
  server_name www.example.com;
  
  # path to SSL certificate and key
  ssl_certificate /etc/ssl/certificate.crt;
  ssl_certificate_key /etc/ssl/private/key.key;
  
  # setting up SSL protocols and ciphers
  ssl_protocols TLSv1.2;
  ssl_ciphers HIGH:!aNULL:!MD5;
  
  # location block for secure traffic
  location / {
    proxy_pass https://backend.example.com;
    
    # setting proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded_For $proxy_add_x_forwarded_for;
  }
  
  # redirecting HTTP requests to HTTPS
  if ($scheme = http) {
    return 301 https://$server_name$request_uri;
  }
}