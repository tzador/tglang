worker_processes 4; # This sets the number of worker processes that the server will spawn. 

    events { # This section configures how the server handles connections and requests.
        worker_connections 1024; # This sets the maximum number of simultaneous connections that each worker process can handle.
    }

    http { # This is the main context of the HTTP server configuration.
        sendfile on; # This enables the use of sendfile() to send files, which is more efficient than traditional read() and write() calls.
        tcp_nodelay on; # This disables the TCP algorithm that holds packets in a buffer before sending a larger block of data.
        gzip on; # This enables gzip compression for responses, reducing the size of transmitted data.

        server { # This is the virtual server configuration for "example.com".
            listen 80; # This sets the port that the server will listen on for requests.
            server_name  example.com; # This sets the server name as "example.com" for the virtual server.
            access_log /var/log/nginx/example.com-access.log; # This sets the location for the server's access logs.

            location / { # This is the location directive that will handle requests to the root of the server.
                root /var/www/example.com; # This sets the document root for the server.
                index index.html; # This sets the default file to be served if no file is specified in the request.
            }

            location /api/ { # This is the location directive that will handle requests to the "/api" path.
                proxy_pass http://127.0.0.1:8000; # This sets the proxy_pass destination for requests to this location.
                proxy_set_header Host $host; # This sets the "Host" header to the value of the original request's "Host" header.
            }

            error_page 404 /404.html; # This handles errors with a 404 status code, directing users to the "/404.html" page.
        }
    }