# define the server block
server {
    listen 80; # listen on port 80
    server_name example.com; # server name

    # configure root directory
    root /var/www/example.com;

    # enable gzip compression
    gzip on;  
    gzip_types text/plain text/css application/json; 
    
    # set cache expiry for certain file types
    location ~* \.(jpg|jpeg|png|gif|ico|mp4)$ {
        expires 30d;
    }

    # enable server-side caching
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=one:10m inactive=60m;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    # configure proxy settings
    location / {
        proxy_pass http://localhost:3000; # proxy to port 3000
        proxy_set_header Host $http_host; # pass the originally requested host
        proxy_set_header X-Real-IP $remote_addr; # pass the real client IP address
        proxy_cache_bypass $http_upgrade; # disable caching for certain request types
    }

    # configure SSL settings
    listen 443 ssl;
    ssl_certificate /etc/nginx/ssl/example.crt;
    ssl_certificate_key /etc/nginx/ssl/example.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # set server timeouts
    client_header_timeout 5m;
    client_body_timeout 5m;
    send_timeout 5m;

    # configure error pages
    error_page 404 /404.html;
    location = /40x.html {
        root /usr/share/nginx/html;
    }

    # disable insecure server directives
    if ($http_user_agent ~* (curl|wget|libwww-perl) ) {
        return 403;
    }

    # set custom headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # block certain file types from being accessed
    location ~* \.(js|css|png|jpg|jpeg|gif|svg|pdf|doc|txt|ico|mp3|avi|mov|flv|wmv)$ {
        try_files $uri $uri/ /404.html;
    }

    # prevent directory listing
    location ~* /favicon\.ico$ {
        log_not_found off;
        access_log off;
        expires 1d;
    }

    # block certain IP addresses
    deny 1.2.3.4;
}

# configure caching for static files
map $sent_http_content_type $expires {
    "text/html"                 epoch;
    "text/html; charset=utf-8"  epoch;
    default                     off;
}

# enable fastcgi cache
fastcgi_cache_path /tmp/nginxfastcgi levels=1:2 keys_zone=cache:10m inactive=60m;
fastcgi_cache_key "$scheme$request_method$host$request_uri";
fastcgi_ignore_headers Cache-Control Expires;
fastcgi_cache_use_stale error timeout invalid_header http_500;
fastcgi_cache_bypass $http_pragma;
fastcgi_cache_revalidate on;
fastcgi_cache_bypass $skip_cache;
fastcgi_no_cache $skip_cache;

# configure SSL ciphers
ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PS
kibanaBasicAuthUser  /var/www/sites/kibana/.htkibanaBasicAuthUser file1;
resolver 8.8.8.8 8.8.4.4;
    location  /sites/kibana/ {
        auth_basic "Restricted Access";
        auth_basic_user_file /var/www/.htkibanaBasicAuthUser kpsteve;
        proxy_pass http://localhost:5601;
        proxy_http_version 1.1;
        proxy_no_cache $http_pragma;
        proxy_cache_bypass $http_pragma;
        map $http_upgrade $connection_upgrade {
          default upgrade;
          ''         close;
        }
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header Early-Data $ssl_early_data;
        ssl_early_data on;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port 443;
        proxy_read_timeout 86400;
    }

# configure server redirects
server {
    listen      80;
    server_name example.com www.example.com;
    return      301 https://$host$request_uri;
}

# set up rate limiting
limit_req_zone $binary_remote_addr zone=addr:10m rate=50r/s;
limit_req zone=addr burst=0 nodelay;

# enable HTTP/2
server {
    listen 443 ssl http2;
    server_name example.com;

    # configure SSL certificate and key
    ssl_certificate /etc/nginx/ssl/example.crt;
    ssl_certificate_key /etc/nginx/ssl/example.key;
    
    # list of available ciphers for HTTP/2
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-EC-DES-CBC3-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!RC4:!MD5:!SSLv2';
    
    # enable HTTP/2 server push
    http2_push /style.css;
    
    # enable server side includes for caching
    ssi on;
    ssi_types *;
    
    # set buffer size for HTTP/2
    http2_recv_buffer_size 64k;
    http2_max_requests 1024;
}

# use CORS to allow cross-domain requests
server {
    listen 80;
    server_name example.com;

    # allow cross-domain requests for specific URI
    location /api/ {
        add_header 'Access-Control-Allow-Origin' '*';
    }
}