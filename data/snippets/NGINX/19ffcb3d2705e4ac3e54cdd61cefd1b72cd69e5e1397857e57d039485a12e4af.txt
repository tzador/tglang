server {
	listen 80; #specifies which port to listen on for incoming requests
	server_name www.example.com; #specifies the domain name where the server will host the website
	return 301 https://$server_name$request_uri; #redirects all HTTP requests to HTTPS
}

server {
	listen 443 ssl; #specifies which port to listen on for secure connections
	server_name www.example.com; #specifies the domain name where the server will host the website

	#specifies the location of the SSL certificate and key files
	ssl_certificate /etc/ssl/certs/example.crt;
	ssl_certificate_key /etc/ssl/private/example.key;

	#enables SSL session caching to improve performance
	ssl_session_cache shared:SSL:10m;

	#specifies which protocols and ciphers to use for secure connections
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers HIGH:!aNULL:!MD5;

	#enables HTTP Strict Transport Security (HSTS) to force all connections to use HTTPS
	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

	#specifies the root directory of the website's static files
	root /var/www/example;

	#index file for the website
	index index.html;

	#enables gzip compression to reduce data transfer and improve performance
	gzip on;
	gzip_comp_level 5;
	gzip_min_length 256;
	gzip_types text/plain text/css application/xml application/json;

	#specifies rules for handling requests to specific URLs
	location / {
		try_files $uri $uri/ /index.html; #tries to serve the requested file, or if not found, serves the index.html file
	}

	location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
		expires 30d; #sets the caching time for specific file types
		add_header Pragma public; #sets caching rules for older browsers
		add_header Cache-Control "public"; #sets caching rules for newer browsers
	}
}