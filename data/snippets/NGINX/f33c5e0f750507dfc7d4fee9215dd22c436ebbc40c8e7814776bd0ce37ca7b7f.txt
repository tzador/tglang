# This is a complex code snippet for an NGINX configuration file
# It includes multiple server blocks, proxy directives, and more

# This server block listens on port 80 and redirects all HTTP traffic to HTTPS
server {
    listen 80;
    server_name example.com;

    return 301 https://$host$request_uri;
}

# This server block is for handling HTTPS traffic
server {
    listen 443 ssl;
    server_name example.com;
    root /var/www/html;
    index index.html;

    # Specify the location of the SSL certificate and key
    ssl_certificate /etc/ssl/certs/example.com.pem;
    ssl_certificate_key /etc/ssl/private/example.com.key;

    # Enable TLSv1.3 for enhanced security
    ssl_protocols TLSv1.3;

    # Enable HTTP/2 for improved performance
    http2_push_preload on;

    # Set cache control headers for static files
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 1d;
        add_header Cache-Control "public";
    }

    # Set up proxy for handling requests to backend server
    # This example handles requests to a Node.js server on port 3000
    location /api/ {
        proxy_pass http://localhost:3000/;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Redirect all other requests to the root index.html
    # This enables client-side routing for SPA applications
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Enable gzip compression for faster page loads
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Exclude certain file types from gzip compression
    gzip_exclude  js/css;

    # Enable HTTP Strict Transport Security (HSTS) for enhanced security
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
}