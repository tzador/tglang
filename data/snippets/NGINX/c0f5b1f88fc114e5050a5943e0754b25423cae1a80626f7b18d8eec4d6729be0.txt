server {
    listen 80;                  # NGINX directive for listening to a certain port
    server_name example.com;    # NGINX directive for specifying the server name

    location / {                  # NGINX directive for location-based configurations
        root /var/www/example;     # NGINX directive for specifying the root directory for the location
    }

    location ~ ^/static/ {                     # NGINX directive for location-based regex matching
        root /var/www/example;                # NGINX directive for specifying the root directory for the location
        expires 30d;                           # NGINX directive for setting a cache expiration time
        add_header Cache-Control "public";     # NGINX directive for adding a header to the response
        access_log /var/log/nginx/static.log;  # NGINX directive for specifying the access log file for the location
    }

    location ~ \.php$ {                         # NGINX directive for location-based regex matching
        fastcgi_pass unix:/var/run/php-fpm.sock; # NGINX directive for specifying the fastcgi server for processing PHP files
        fastcgi_index index.php;                 # NGINX directive for setting the default index file for fastcgi requests
        include fastcgi_params;                  # NGINX directive for including predefined fastcgi parameters
    }

    error_page 404 /404.html;             # NGINX directive for specifying a custom error page
    error_page 500 502 503 504 /50x.html; # NGINX directive for specifying a custom error page for 500-level errors

    location = /50x.html {   # NGINX directive for location-based matching
        root /var/www/error;  # NGINX directive for specifying the root directory for the location
    }

    # Redirect trailing slash to non-slash version
    if ($request_uri ~ "^(.+)/$") {                 # NGINX directive for using a regular expression in a condition
        return 301 "$1";                            # NGINX command for redirecting to a new page
    }

    # Redirect old page to new page
    location /oldpage.html {
        return 301 https://example.com/newpage.html; # NGINX command for redirecting to a specified URL
    }

    # Enable Gzip Compression
    gzip on;                                # NGINX directive for enabling gzip compression
    gzip_comp_level 4;                      # NGINX directive for setting the compression level
    gzip_types text/plain application/json; # NGINX directive for specifying the file types to be compressed
}