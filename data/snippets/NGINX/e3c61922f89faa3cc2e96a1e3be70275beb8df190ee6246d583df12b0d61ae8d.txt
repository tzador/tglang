# Redirect all traffic from HTTP to HTTPS
server {
    listen 80;
    server_name example.com;
    return 301 https://$server_name$request_uri;
}

# Configure HTTPS server
server {
    listen 443 ssl;
    server_name example.com;

    # SSL certificate configuration
    ssl_certificate /path/to/cert.crt;
    ssl_certificate_key /path/to/privatekey.crt;
    
    # Enable TLS versions and cipher suites
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA;

    # HTTP/2 protocol support
    http2_push_preload on;

    # Enable OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /path/to/certchain.pem;

    # Enable HSTS
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload";
    
    # Enable HTTP to HTTPS redirect for specific URIs
    location ~ ^/(login|signup|admin) {
        return 301 https://$server_name$request_uri;
    }

    # Enable HTTP to HTTPS redirect for specific file types
    if ($request_uri ~* \.(ico|css|js|gif|jpeg|jpg|png)$) {
        return 301 https://$server_name$request_uri;
    }

    # Disable access to hidden files and directories
    location ~ /\. {
        deny all;
    }

    # Enable server-side caching for static files
    location ~* \.(js|css|jpg|jpeg|png|gif|ico|webp|svg)$ {
        expires 1d;
        add_header Cache-Control "public";
    }

    # Enable gzip compression for faster load times
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Enable server-side caching for dynamic content
    location / {
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_valid 200 2h;
        proxy_cache_valid 404 5m;
        proxy_cache_bypass $http_pragma;
        proxy_cache_revalidate on;
        add_header X-Cache-Status $upstream_cache_status;
        proxy_pass http://localhost:8000;
        proxy_cache_bypass $http_pragma;
        proxy_no_cache $http_pragma;
    }
}