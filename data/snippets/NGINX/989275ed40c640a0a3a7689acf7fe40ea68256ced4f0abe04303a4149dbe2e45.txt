# NGINX Configuration File

# Defining a variable for the server name
server_name example.com;

# Setting the root directory
root /var/www/example;

# Location block for handling requests
location / {

    # Setting the index file
    index index.html;

    # Defining a proxy for handling requests
    # to backend servers
    proxy_pass http://backend-server;

    # Setting headers for HTTP response
    # to client
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    # Setting caching directives
    expires 1d;
    add_header Cache-Control "public";

    # Handling file uploads
    client_body_temp_path /var/tmp/nginx;
    client_max_body_size 10m;
    # Handling client errors
    error_page 404 /error.html;
    error_page 500 502 503 504 /error.html;
    
    # Setting up basic authentication
    auth_basic "Restricted";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    # Redirecting requests to HTTPS
    return 301 https://$host$request_uri;
}

# Location block for handling static files
location ~* \.(jpg|jpeg|gif|png|css|js|ico)$ {
    # Setting caching directives
    expires 1d;
    add_header Cache-Control "public";

    # Setting gzip compression for files
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary on;
    gzip_disable "MSIE [1-6]\.";

    # Setting CORS headers
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
}

# HTTPS server
server {
    # Listening on port 443
    listen 443 ssl;
    # Defining the server name
    server_name example.com;

    # Setting the ssl certificate and key
    ssl_certificate /etc/ssl/certs/example.crt;
    ssl_certificate_key /etc/ssl/private/example.key;

    # Disabling old SSL protocols and ciphers
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/nginx/dhparam.pem;

    # Enabling HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload;";
    
    # Using modern encryption with OCSP stapling
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8; # Using Google's public DNS server
}