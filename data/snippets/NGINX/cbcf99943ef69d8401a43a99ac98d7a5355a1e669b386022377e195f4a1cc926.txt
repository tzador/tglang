# Define upstream server configurations
upstream server_backend {
    server 127.0.0.1:8000;
    server 127.0.0.1:8001;
    server 127.0.0.1:8002;
}

# Defining SSL certificates for HTTPS
ssl_certificate /etc/nginx/ssl/example.com/certificate.crt;
ssl_certificate_key /etc/nginx/ssl/example.com/certificate.key;

# Redirect all HTTP requests to HTTPS
server {
    listen 80;
    server_name example.com www.example.com;
    return 301 https://$server_name$request_uri;
}

# Server configuration for HTTPS requests
server {
    # Listen on port 443 for HTTPS requests
    listen 443 ssl;

    # Server name and root directory
    server_name example.com;
    root /var/www/example.com;

    # SSL certificate and key locations
    ssl_certificate /etc/nginx/ssl/example.com/certificate.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com/certificate.key;

    # Set up SSL parameters
    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

    # Redirect all requests to HTTPS
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }

    # Serve static files directly (images, css, js, etc.)
    location ~* \.(jpg|jpeg|gif|png|css|js|ico)$ {
       try_files $uri =404;
       expires max;
       log_not_found off;
    }

    # Serve remaining requests to the backend servers
    location / {
        proxy_pass http://server_backend;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
}