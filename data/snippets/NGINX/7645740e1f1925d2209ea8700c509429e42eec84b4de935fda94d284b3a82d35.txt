# This is the main configuration file for the NGINX web server.
# It contains settings and directives that control how the server operates.

# Configures the user and group that the server will run as.
user nginx nginx;

# Begins a block of directives that apply only to the specified context or module.
http {

    # Sets the number of worker processes that will serve requests.
    worker_processes 4;

    # Sets the maximum number of connections that each worker process can handle.
    worker_connections 1024;

    # Configures a shared memory zone which can hold variables shared between worker processes.
    # This improves caching and reduces memory usage.
    # The size parameter sets the size of the shared memory zone.
    # The zone name "static" can be used in other directives to refer to this shared memory zone.
    # The default value is 1m (one megabyte).
    # The "locking" parameter enables synchronization between worker processes when modifying shared memory.
    # The default is off.
    # The "levels" parameter sets the number of levels in the shared memory hierarchy.
    # The default is 1.
    # The "keys_zone" parameter specifies key-value pairs that can be used to store data in the shared memory.
    # The default is an empty string.
    # The "inactive" parameter sets the time in minutes after which the shared memory zone will be marked as inactive.
    # The default is 10 minutes.
    # The "max_size" parameter sets the maximum size of the shared memory zone.
    # The default is unlimited.
    # The "allocation" parameter sets the allocation size for new shared memory entries.
    # The default is the size parameter.
    # The "use_temp_path" parameter sets the path for storing temporary files when the shared memory zone is full.
    # The default is /var/cache/nginx/tmp.
    # The "watch" parameter enables automatic re-creation of the shared memory zone when it is removed due to inactivity.
    # The default is off.
    # The "uc-collect" parameter enables garbage collection of unused zones that have been inactive for a specified time.
    # The default is off.
    # The "uc-status" parameter enables tracking of statistics for unused zones.
    # The default is off.
    # The "uc-interval" parameter sets the interval in seconds at which the server will perform garbage collection.
    # The default is 60 seconds.
    # The "uc-maintenance" parameter enables maintenance tasks, such as zone defragmentation, during garbage collection.
    # The default is off.
    # The "hash" parameter sets the hash type used to generate indexes in the shared memory zone.
    # The default is consistent.
    # The "hash_bucket_size" parameter sets the size of hash buckets in the shared memory zone.
    # The default is 32.
    # The "hash_max_size" parameter sets the maximum size of the hash table in the shared memory zone.
    # The default is unlimited.
    # The "ssl_session_cache" directives can be used to enable caching of SSL session data in the shared memory zone.
    # The "off" option disables SSL session caching.
    # The other options require additional parameters to be set.
    # The "timeout" parameter sets the time after which the SSL session cache entry will expire.
    # The default is 5 minutes.
    # The "size" parameter sets the size of the shared memory zone used for SSL session caching.
    # The default is unlimited.
    ssl_session_cache off;

    # Configures various SSL session cache size limits.
    # The "sharedsession" option specifies the shared memory zone to use for SSL session storage.
    # The "size" option sets the size of the shared memory zone.
    # The "name" option sets the name of the shared memory zone to be used in caching.
    # The "max_size" option sets the maximum size of the SSL session cache.
    # The "timeout" option sets the timeout for SSL session cache entries.
    # The "nolock" option disables synchronization within the SSL session cache.
    # The "shared" option sets the mode in which SSL session data is shared between worker processes.
    # The "no-ssl" option disables SSL server name searching.
    # The "none" option disables SSL session caching.
    ssl_session_cache sharedsession:size=2m:name=SSL:max_size=2048:timeout=10m:nolock:shared:no-ssl:none;

    # Enables or disables reverse DNS lookups for remote addresses.
    # If enabled, the server will attempt to resolve the remote addresses to hostnames.
    # If disabled, the server will use the IP address as the hostname.
    # The default is off.
    # This setting only applies to connections that nginx receives.
    # It does not apply to connections that nginx makes to upstream servers.
    resolver 192.0.2.4 ipv6=on valid=30s;

    # Enables or disables caching of DNS responses.
    # If disabled, nginx will use the system resolver to resolve DNS names.
    # The default is on.
    # This setting does not apply to requests handled by an upstream server.
    # It only applies to requests handled directly by nginx.
    # The name specified in the "directory" parameter will be used to store the cached DNS responses.
    # The default is /var/cache/nginx/dns.
    resolver_cache off directory=/var/cache/nginx/dns;

    # Configures the parameters for handling clients that fail to provide proper HTTP header information.
    # The "recursive_error_pages" option enables recursive error pages for headers that result in a 400 or 500 series response.
    # The default is off.
    # The "error_page" directives can be used to define custom error pages for specific errors.
    # The http, server, and location blocks can all have their own error pages defined.
    # The "return" and "error_page" directives can be used in the same block, but only the "error_page" directive will take effect.
    # The "proxy_intercept_errors" option enables interception of client and server errors by a proxy server.
    # The default is off.
    # The "proxy_redirect" option can be set to default, off, or force.
    # The default setting will use the proxy server's settings for redirecting.
    # The off setting will disable redirection.
    # The force setting will force redirection, regardless of the proxy server's settings.
    # The "proxy_pass_error_message" option allows a message to be sent to the client in the event of an error returned from a proxy server.
    # The default is off.
    recursive_error_pages off error_page 400 = /400.html proxy_intercept_errors on proxy_redirect off proxy_pass_error_message something bad happened;

    # Enables or disables TCP socket keep-alive functionality.
    # If enabled, nginx will send periodic TCP keep-alive messages to the client to maintain the connection.
    # If set to off, nginx will disable keep-alive functionality.
    # The default is on.
    keepalive_timeout 75s;

    # Enables or disables gzip compression for HTTP responses.
    # If enabled, nginx will attempt to gzip HTTP responses that pass certain criteria.
    # These criteria include the "Accept-Encoding" header, the response size, and the MIME type.
    # The "gzip_comp_level" option sets the compression level to use.
    # The default is 1, which indicates the fastest compression.
    # The "gzip_types" option indicates which MIME types should be compressed.
    # The default is text/html, which compresses HTML documents.
    gzip on;
    gzip_comp_level 1;
    gzip_types text/html;

    # Configures the location of the proxy server's temp directory.
    # This directory is used to store temporary files when the proxy server is storing or caching data.
    # The default is /var/cache/nginx/temp.
    proxy_temp_path /var/cache/nginx/proxy_temp 1 2;

    # Configures timeouts for the proxy server.
    # The "proxy_read_timeout" option sets the timeout for reading the response body from an upstream server.
    # The default is 60 seconds.
    # The "proxy_send_timeout" option sets the timeout for sending data to an upstream server.
    # The default is 60 seconds.
    # The "proxy_connect_timeout" option sets the timeout for establishing a connection with an upstream server.
    # The default is 60 seconds.
    # The "proxy_next_upstream" option sets which upstream server will be selected if an error occurs on the current one.
    # The default is default, which will choose the next server in the upstream group.
    # The "error" argument will make the server return an error to the client.
    # The "timeout" argument will make the server timeout the request.
    # The "invalid_header" argument will cause the server to ignore the response if it contains an invalid header.
    # The "off" argument will disable selection of a different upstream server.
    proxy_read_timeout 60s;
    proxy_send_timeout 60s;
    proxy_connect_timeout 60s;
    proxy_next_upstream default error timeout invalid_header off;

    # Configures the proxy server's buffering settings.
    # The "proxy_buffering" option enables or disables response buffering.
    # If enabled, the server will buffer the entire response before sending it to the client.
    # If disabled, the server will stream the response to the client without buffering.
    # The default is on.
    # The "proxy_buffer_size" option sets the size of the buffer used for buffering responses from upstream servers.
    # The default is equal to the "proxy_buffers" setting.
    # The "proxy_busy_buffers_size" option sets the maximum size of the buffer when the server is busy.
    # The default is equal to the "proxy_buffers" setting.
    # The "proxy_buffers" option sets the number and size of the server's buffers.
    # The buffer size can be specified in bytes, kilobytes, or megabytes.
    # The default is 8 buffers with a size of 4k each.
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_busy_buffers_size 8k;
    proxy_buffers 8 4k;

    # Configures the headers included in responses from upstream servers.
    # The "server_names_hash_max_size" option sets the maximum size of the hash for server names.
    # The default is 512.
    # The "server_names_hash_bucket_size" option sets the size of the hash buckets for server names.
    # The default is 64.
    # The "proxy_set_header" directive can be used to set HTTP headers in the response.
    # The "referer" header can be set to the URI of the page where the request originated.
    # The "target" header can be set to the target URL of the proxy request.
    # The "host" header can be set to the hostname of the proxy request.
    # The "proxy_pass_header" directive can be used to add or remove headers from the response.
    # The "ETag" header can be removed from the response to prevent caching.
    # The "Last-Modified" header can be added to the response to facilitate caching.
    server_names_hash_max_size 1024;
    server_names_hash_bucket_size 128;
    proxy_set_header Referer $http_referer;
    proxy_set_header Target $target_uri;
    proxy_set_header Host $host;
    proxy_pass_header ETag;
    proxy_pass_header Last-Modified;

    # Configures the proxy server's cache settings.
    # The "proxy_cache" option enables caching of responses from upstream servers.
    # If enabled, the server will cache the response and serve it directly to future requests.
    # If disabled, the server will pass the request to the upstream server each time.
    # The default is off.
    # The "proxy_cache_valid" option specifies how long a response will be stored in the cache.
    # The default is 60 seconds.
    # The time value can be specified in seconds, minutes, hours, days, or weeks.
    # The "proxy_cache_key" option sets the key used to identify a cached response.
    # The default is the complete URI of the request.
    # The "proxy_cache_bypass" option can be used to exclude certain requests from the cache.
    # Requests with the specified parameter in the request URI will not be cached.
    # The "proxy_cache_methods" option sets which HTTP methods will be cached.
    # The default is GET and HEAD.
    # The "proxy_cache_path" option sets the directory used to store cached responses.
    # The default is /var/cache/nginx/proxy_cache.
    # The "proxy_cache_lock" option enables or disables caching for responses that are currently being generated.
    # If enabled, the server will wait for a response to be generated and then add it to the cache.
    # If disabled, the server will pass the request to the upstream server instead.
    # The default is on.
    # The "proxy_cache_use_stale" option specifies how the server should handle stale cached responses.
    # The default is off.
    proxy_cache off;
    proxy_cache_valid 1h;
    proxy_cache_key "$scheme$request_method$request_uri";
    proxy_cache_bypass $http_pragma;
    proxy_cache_methods GET HEAD;
    proxy_cache_path /var/cache/nginx/proxy_cache levels=1:2 keys_zone=static:10m inactive=10m max_size=10m;
    proxy_cache_lock on;
    proxy_cache_use_stale error timeout invalid_header updating;

    # Configures various proxy server settings.
    # The "proxy_next_upstream_timeout" option sets the timeout after which the server will select a different upstream server.
    # The default is 0 (unlimited).
    # The "proxy_set_body" directive can be used to set the request body for a proxy server.
    # The "proxy_pass_request_body" option can be used to set the request body for a proxy server.
    # The "proxy_pass_request_headers" option can be used to set the request headers for a proxy server.
    # The "proxy_redirect" option can be used to specify how the server should handle redirects from upstream servers.
    # The "on