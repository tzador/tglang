server {
    listen 80;
    server_name example.com;

    # Redirect HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name example.com;

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;

    # Enable HTTP Strict Transport Security
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    location / {
        root /var/www/example.com;
        index index.html;
    }

    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /404.html {
        root /var/www/example.com;
    }
    location = /50x.html {
        root /var/www/example.com;
    }

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/rss+xml application/atom+xml;

    # Enable cache control
    expires 1d;
    add_header Cache-Control "public, max-age=86400";

    # Enable server-side caching
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=example.com:10m inactive=60m;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    # Serve cached content if available
    proxy_cache_valid 200 302 304 10m;
    proxy_cache_valid 404 1m;

    # Enable caching of responses to named locations
    proxy_cache_bypass $http_pragma;
    proxy_cache_revalidate on;
    proxy_cache_min_uses 1;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

    # Enable gzip compression of cached content
    gzip_comp_level 6;
    gzip_vary on;
    gzip_static on;

    # Enable rate limiting
    limit_req zone=example.com burst=5 nodelay;

    # Enable access control
    allow 192.168.1.0/24;
    deny all;

    # Log requests
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Enable reverse proxy
    location /api/ {
        proxy_pass https://api.example.com;
    }

    # Allow WebSocket connections
    location /ws/ {
        proxy_pass https://ws.example.com;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    # Enable hotlink protection
    valid_referers blocked example.com *.example.com;
    if ($invalid_referer) {
        return 403;
    }

    # Enable request body filtering
    client_body_filter_by_lua_block {
        if ngx.req.get_method() == "POST" then
            ngx.req.read_body()
            local args, err = ngx.req.get_post_args()
            if not args then
                ngx.log(ngx.ERR, "failed to get post args: ", err)
                return ngx.exit(400)
            end
            ngx.req.set_body_data(ngx.encode_args(args))
        end
    }

    # Enable server-side includes
    ssi on;
    ssi_types text/html;

    # Enable cookie-based session persistence
    upstream backend {
        server 127.0.0.1:8080;
        server 127.0.0.1:8081;
        ip_hash;
        keepalive 32;
        hash $http_cookie;
        server_tokens off;
    }
    server {
        listen 80;
        location / {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}