server {
    listen 80;
    server_name example.com;

    # set proxy headers for incoming requests
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $http_host;
    
    # configure error log locations
    error_log /var/log/nginx/error.log;
    error_log /var/log/nginx/error.log notice;
    error_log /var/log/nginx/error.log info;
    
    # set path for root directory
    root /var/www/example;

    # enable compression to improve performance
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # configure caching for static files
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 1d;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

    # redirect all requests to HTTPS
    if ($scheme = http) {
        return 301 https://$server_name$request_uri;
    }

    # configure HTTPS server
    server {
        listen 443 ssl http2;
        server_name example.com;

        # configure SSL certificate and key
        ssl_certificate /etc/ssl/example.com.crt;
        ssl_certificate_key /etc/ssl/example.com.key;

        # configure SSL session cache
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 5m;

        # enable OCSP stapling to improve performance
        ssl_stapling on;
        ssl_stapling_verify on;

        # configure secure protocols and ciphers
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;

        # enable HTTP/2 for improved performance
        http2_max_field_size 16k;
        http2_max_header_size 128k;
        http2_max_requests 100;
        http2_recv_timeout 3s;

        # configure HTTP Strict Transport Security (HSTS)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

        location / {
            proxy_pass http://127.0.0.1:8000;
            # configure proxy headers
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
        }
    }

    # configure reverse proxy server for handling API requests
    location /api/ {
        proxy_pass http://127.0.0.1:3000/;
        # configure proxy headers
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
    }

    # configure custom error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        internal;
    }
}