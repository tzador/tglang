# This code snippet is a sample NGINX configuration file for a website.
# It includes multiple blocks and directives to demonstrate the complexity of NGINX configuration.

# This block is for setting the user and group for NGINX processes to run under.
# This is recommended for security reasons.
user nginx;
# An example of setting the group to 'www-data'
#group www-data;

# This block is for setting the number of worker processes to spawn.
# The default value is 1, but it is recommended to set it to the number of CPU cores on the server.
worker_processes auto;

# This block is for setting the maximum number of connections that each worker process can handle.
# It is recommended to set this to a value of 8192 or higher for high traffic websites.
worker_connections 8192;

# This directive enables NGINX to use all available CPU cores for handling connections.
# It should only be used if the server has more than one CPU core.
multi_accept on;

# This block is for setting the maximum size for file uploads and requests.
# It is recommended to set this to a value of 10m or higher for larger file sizes.
client_max_body_size 10m;

# This block is for setting the timeout for keepalive connections.
# A longer timeout may improve performance for websites with a lot of traffic.
keepalive_timeout 65;

# This block is for setting the server's default file type.
# By default, NGINX will serve files with a MIME type that matches their extension.
# However, this can be overridden with this directive.
# An example of serving all files as 'text/html'
#default_type text/html;

# This block is for setting the location of the server's root directory.
# All files will be served from this directory by default.
root /var/www/html;

# This block is for configuring error pages.
# It is recommended to create custom error pages for a more user-friendly experience.
# An example of a custom 404 error page
#error_page 404 /404.html;
#location = /404.html {
#  internal;
#}

# This block is for setting up caching for certain types of files.
# Caching can improve website performance and reduce server load.
# An example of caching all files with '.css' extension for 1 year.
#location ~* \.css$ {
#  expires 1y;
#}

# This block is for setting up virtual hosts for multiple websites.
# Each virtual host requires its own server block.
# An example of a virtual host for 'www.example.com'.
server {
  # The domain name or IP address that this virtual host is for
  server_name www.example.com;
  
  # This block is for setting up SSL for secure connections.
  # It requires a valid SSL certificate and key.
  # An example of setting up SSL with a self-signed certificate and key.
  ssl on;
  ssl_certificate /etc/nginx/ssl/example.crt;
  ssl_certificate_key /etc/nginx/ssl/example.key;
  
  # This block is for redirecting HTTP requests to HTTPS.
  # It is recommended to always use HTTPS for security reasons.
  # An example of redirecting all HTTP requests to HTTPS.
  if ($scheme != "https") {
    return 301 https://$host$request_uri;
  }

  # This block is for setting the root directory and index file for this virtual host.
  root /var/www/html/example;
  index index.html;

  # This block is for setting up caching for this virtual host.
  # It can be configured for specific file types or locations.
  # An example of caching all files from '/images' directory for 1 week.
  location /images {
    expires 1w;
  }

  # This block is for setting up custom error pages for this virtual host.
  # An example of a custom 404 error page for this virtual host.
  error_page 404 /404.html;
  location = /404.html {
    internal;
  }

  # This block is for configuring proxy servers.
  # It is used to forward requests to other servers, such as application servers.
  # An example of proxying requests to an application server.
  location /api/ {
    proxy_pass http://localhost:8080/api/;
  }
}

# This block is for setting up a reverse proxy.
# It is used to handle requests and forward them to the appropriate server.
# An example of a reverse proxy for 'api.example.com'.
server {
  server_name api.example.com;

  # The address of the server to proxy requests to.
  proxy_pass http://localhost:5000;

  # This block is for setting up caching for this reverse proxy server.
  # It can be configured for specific file types or locations.
  # An example of caching all files with '.js' or '.css' extension for 1 month.
  location ~* \.(js|css)$ {
    expires 1M;
  }
}