*&---------------------------------------------------------------------*
*& Report ZEXAMPLE_REPORT
*&---------------------------------------------------------------------*

REPORT zexample_report.

* Declaring variables and constants
DATA: lv_var1 TYPE i,
      lv_var2 TYPE f,
      lv_var3 TYPE c LENGTH 10,
      lv_const TYPE c VALUE 'CONSTANT VALUE'.

* Select statement with inner join
SELECT mt~field1 mt~field2
  INTO TABLE @DATA(lt_table)
  FROM main_table AS mt
  INNER JOIN join_table AS jt ON mt~field1 = jt~field1
  WHERE mt~field2 = @lv_var1
  AND jt~field2 = @lv_var2.

* Loop to process data
LOOP AT lt_table INTO DATA(ls_table).
  ADD ls_table-field1 TO lv_var1.
ENDLOOP.

* Simple calculation
lv_var2 = lv_var1 * 2.

* Dynamic work area
DATA(lw_table) = VALUE mt%ROWTYPE( field1 = lv_var1
                                   field2 = lv_var2
                                   field3 = lv_var3 ).

* Dynamic internal table
DATA(lt_table2) = VALUE mt[](
                    ( field1 = lv_var1 field2 = lv_var2 field3 = lv_const )
                    ( field1 = lv_var1 field2 = lv_var2 field3 = lv_const )
                    ( field1 = lv_var1 field2 = lv_var2 field3 = lv_const ) ).

* Standard table functions for inner join
DATA(lt_final) = cl_abap_tabledescr=>tabkey_join( lt_table[] lt_table2[] ).

* Shortcut for SELECT statement
SELECT * FROM table_name
  INTO TABLE @DATA(lt_final2).

* Accessing individual rows in internal table
DATA(ls_final2) = lt_final2[ 1 ].

* Outputting data to screen
WRITE: / ls_final2-field1, ls_final2-field2, ls_final2-field3.

* Dynamically calling method
DATA(l_ref) = cl_abap_classdescr=>load( class_name = 'CLASS_NAME' ).
l_ref->method( ).

* Submitting job in background
SUBMIT report_name AND RETURN.

* Built-in function for current date and time
DATA(lv_date) = sy-datum.
DATA(lv_time) = sy-uzeit.
DATA(lv_week) = sy-uzeit+6(2).

* Conditional statement
IF lv_var1 > lv_var2.
  WRITE: 'Var1 is greater than Var2'.
ELSE.
  WRITE: 'Var1 is less than Var2'.
ENDIF.