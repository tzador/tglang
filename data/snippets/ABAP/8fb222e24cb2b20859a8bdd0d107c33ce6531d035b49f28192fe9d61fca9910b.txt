CLASS lcl_main DEFINITION.
  PUBLIC SECTION.
    METHODS:
      constructor
        IMPORTING
          !io_data TYPE REF TO data_table,
        IMPORTING
          !io_parameters TYPE REF TO data_table,
        EXPORTING
          !eo_result TYPE REF TO data_table.
  PROTECTED SECTION.
    METHODS:
      helper_method
        IMPORTING
          !io_data TYPE REF TO data_table,
        IMPORTING
          !io_parameters TYPE REF TO data_table,
        EXPORTING
          !eo_result TYPE REF TO data_table.
  PRIVATE SECTION.
    METHODS:
      private_method
        IMPORTING
          !io_data TYPE REF TO data_table,
        IMPORTING
          !io_parameters TYPE REF TO data_table,
        EXPORTING
          !eo_result TYPE REF TO data_table.
    DATA:
      lv_variable TYPE i,
      lv_constant TYPE i VALUE 10.
ENDCLASS.

CLASS lcl_main IMPLEMENTATION.
  METHOD constructor.
    CREATE OBJECT io_result TYPE zcl_result.
    helper_method(
      EXPORTING
        io_data = io_data
        io_parameters = io_parameters
      IMPORTING
        eo_result = io_result
    ).
    private_method(
      EXPORTING
        io_data = io_data
        io_parameters = io_parameters
      IMPORTING
        eo_result = io_result
    ).
    eo_result->add_data( lv_variable * lv_constant ).
    eo_result->send_data.
  ENDMETHOD.
  METHOD helper_method.
    DATA:
      lv_parameter TYPE c LENGTH 1.
    CASE io_parameters->get_param( 'PARAM' ).
      WHEN 'A'.
        lv_parameter = 'X'.
      WHEN 'B'.
        lv_parameter = 'Y'.
      WHEN 'C'.
        lv_parameter = 'Z'.
      WHEN OTHERS.
        lv_parameter = 'N'.
    ENDCASE.
    io_result->set_param( 'PARAM', lv_parameter ).
  ENDMETHOD.
  METHOD private_method.
    DATA:
      lv_table TYPE REF TO data_table,
      lv_column TYPE string,
      lv_value TYPE string.
    FIELD-SYMBOLS:
      <fs_data> TYPE data.
    ASSIGN io_data->* TO <ft_data>.
    IF lv_constant > 0.
      LOOP AT <ft_data> ASSIGNING <fs_data>.
        CASE lv_table->get_column( lv_column ).
          WHEN 1.
            ASSIGN COMPONENT lv_column OF STRUCTURE <fs_data> TO <lv_value>.
            <lv_value> = lv_value.
        ENDCASE.
      ENDLOOP.
      IF lv_constant > 10.
        lv_constant = lv_constant - 1.
        private_method(
          EXPORTING
            io_data = io_data
            io_parameters = io_parameters
          IMPORTING
            eo_result = io_result
        ).
      ENDIF.
    ENDIF.
    io_result->set_data( io_data ).
  ENDMETHOD.
ENDCLASS.