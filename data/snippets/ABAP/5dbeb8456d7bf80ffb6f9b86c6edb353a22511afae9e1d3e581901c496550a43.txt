" This code snippet creates a class to perform mathematical operations
CLASS zcl_math_operations DEFINITION
  PUBLIC
    FINAL
    CREATE PUBLIC .

  PUBLIC SECTION.
    METHODS:
      constructor
        IMPORTING
          !iv_number1 TYPE i
          !iv_number2 TYPE i,
      addition
        RETURNING
          VALUE(rv_sum) TYPE i,
      subtraction
        RETURNING
          VALUE(rv_difference) TYPE i,
      multiplication
        RETURNING
          VALUE(rv_product) TYPE i,
      division
        RETURNING
          VALUE(rv_quotient) TYPE f.

    DATA:
      mv_number1 TYPE i,
      mv_number2 TYPE i.

  PRIVATE SECTION.
    METHODS:
      validate_numbers.

ENDCLASS.


CLASS zcl_math_operations IMPLEMENTATION.
  METHOD constructor.
    CHECK iv_number1 IS NOT INITIAL.
    CHECK iv_number2 IS NOT INITIAL.

    mv_number1 = iv_number1.
    mv_number2 = iv_number2.
  ENDMETHOD.

  METHOD validate_numbers.
    IF mv_number2 = 0.
      RAISE EXCEPTION TYPE cx_root
        EXPORTING
          textid = 'DIVISION_BY_ZERO'.
    ENDIF.
  ENDMETHOD.

  METHOD addition.
    RETURN mv_number1 + mv_number2.
  ENDMETHOD.

  METHOD subtraction.
    RETURN mv_number1 - mv_number2.
  ENDMETHOD.

  METHOD multiplication.
    RETURN mv_number1 * mv_number2.
  ENDMETHOD.

  METHOD division.
    validate_numbers( ).
    RETURN mv_number1 / mv_number2.
  ENDMETHOD.
ENDCLASS.


START-OF-SELECTION.
  DATA(lo_math) = NEW zcl_math_operations( 10, 5 ). " Creating an instance of the class with numbers 10 and 5

  " Performing additions, subtractions, multiplications and divisions
  DATA(lv_sum) = lo_math->addition( ).
  DATA(lv_difference) = lo_math->subtraction( ).
  DATA(lv_product) = lo_math->multiplication( ).
  DATA(lv_quotient) = lo_math->division( ).

  " Printing the results
  WRITE: / 'Sum:', lv_sum.
  WRITE: / 'Difference:', lv_difference.
  WRITE: / 'Product:', lv_product.
  WRITE: / 'Quotient:', lv_quotient.

  " Output:
  " Sum: 15
  " Difference: 5
  " Product: 50
  " Quotient: 2

END-OF-SELECTION.