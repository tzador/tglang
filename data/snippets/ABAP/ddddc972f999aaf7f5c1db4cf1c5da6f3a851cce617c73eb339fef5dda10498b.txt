* @Class: ZCL_CAR
* @Description: This class represents a car object
CLASS zcl_car DEFINITION PUBLIC FINAL CREATE PRIVATE.
  PUBLIC SECTION.
    * Properties: brand, model, color, price
    DATA:
      brand TYPE string,
      model TYPE string,
      color TYPE string,
      price TYPE i.

    * Methods:
    METHODS:
      constructor IMPORTING iv_brand TYPE string iv_model TYPE string iv_color TYPE string iv_price TYPE i,
      get_brand RETURNING VALUE(rv_brand) TYPE string,
      get_model RETURNING VALUE(rv_model) TYPE string,
      get_color RETURNING VALUE(rv_color) TYPE string,
      get_price RETURNING VALUE(rv_price) TYPE i,
      set_brand IMPORTING iv_brand TYPE string,
      set_model IMPORTING iv_model TYPE string,
      set_color IMPORTING iv_color TYPE string,
      set_price IMPORTING iv_price TYPE i.

  PRIVATE SECTION.
    * Methods:
    METHODS:
      validate_price RETURNING VALUE(rv_valid) TYPE abap_bool,
      calculate_discount RETURNING VALUE(rv_discount) TYPE i.

  PROTECTED SECTION.
    * Methods:
    METHODS:
      set_default_price,
      apply_discount,
      validate_brand,
      validate_model,
      validate_color.

  ENDCLASS.

* @Implementation section
CLASS zcl_car IMPLEMENTATION.
  METHOD constructor.
    me->set_brand( iv_brand ).
    me->set_model( iv_model ).
    me->set_color( iv_color ).
    me->set_price( iv_price ).
  ENDMETHOD.

  METHOD get_brand.
    rv_brand = me->brand.
  ENDMETHOD.

  METHOD get_model.
    rv_model = me->model.
  ENDMETHOD.

  METHOD get_color.
    rv_color = me->color.
  ENDMETHOD.

  METHOD get_price.
    rv_price = me->price.
  ENDMETHOD.

  METHOD set_brand.
    me->brand = iv_brand.
  ENDMETHOD.

  METHOD set_model.
    me->model = iv_model.
  ENDMETHOD.

  METHOD set_color.
    me->color = iv_color.
  ENDMETHOD.

  METHOD set_price.
    me->price = iv_price.
  ENDMETHOD.

  METHOD validate_price.
    rv_valid = COND #( WHEN me->price < 0 THEN abap_false ELSE abap_true ).
  ENDMETHOD.

  METHOD calculate_discount.
    rv_discount = COND #( WHEN me->price >= 50000 THEN ( me->price * 0.1 )
                          WHEN me->price >= 10000 THEN ( me->price * 0.05 )
                          WHEN me->price >= 5000 THEN ( me->price * 0.02 )
                          ELSE 0 ).
  ENDMETHOD.

  METHOD set_default_price.
    me->price = 10000.
  ENDMETHOD.

  METHOD apply_discount.
    me->price = me->price - me->calculate_discount( ).
  ENDMETHOD.

  METHOD validate_brand.
    IF me->brand IS INITIAL.
      me->brand = 'Unknown'.
    ENDIF.
  ENDMETHOD.

  METHOD validate_model.
    IF me->model IS INITIAL.
      me->model = 'Unknown'.
    ENDIF.
  ENDMETHOD.

  METHOD validate_color.
    IF me->color IS INITIAL.
      me->color = 'Unknown'.
    ENDIF.
  ENDMETHOD.

ENDCLASS.

* @Demo code
* Instantiate using constructor
DATA(car) = NEW zcl_car( 'Toyota' 'Corolla' 'Blue' 20000 ).

* Get properties
WRITE: / car->get_brand( ).
WRITE: / car->get_model( ).
WRITE: / car->get_color( ).
WRITE: / car->get_price( ).

* Set properties using methods
car->set_brand( 'Honda' ).
car->set_model( 'Civic' ).
car->set_color( 'Black' ).
car->set_price( 40000 ).

* Validate properties
car->validate_brand( ).
car->validate_model( ).
car->validate_color( ).

* Apply discount
car->set_default_price( ).
car->apply_discount( ).

* Get updated price
WRITE: / car->get_price( ).

* Instantiate using default constructor
DATA(car2) = NEW zcl_car( ).

* Get properties
WRITE: / car2->get_brand( ).
WRITE: / car2->get_model( ).
WRITE: / car2->get_color( ).
WRITE: / car2->get_price( ).