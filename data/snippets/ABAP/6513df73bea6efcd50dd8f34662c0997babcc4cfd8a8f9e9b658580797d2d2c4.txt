*&---------------------------------------------------------------------*
*& Report Z_REPORT_NAME
*&---------------------------------------------------------------------*
*& Description: This program calculates the average salary for each 
*& department
*&---------------------------------------------------------------------*

REPORT z_report_name.

TYPES: BEGIN OF ty_employee,
         emp_id TYPE i,
         emp_name TYPE string,
         dept_id TYPE i,
         salary TYPE p DECIMALS 2,
       END OF ty_employee.

DATA: lt_employees TYPE STANDARD TABLE OF ty_employee,
      ls_employee TYPE ty_employee,
      lt_avg_salary TYPE SORTED TABLE OF sc department
      WITH UNIQUE KEY dept_id.

START-OF-SELECTION.

* Select all employees from the database
SELECT emp_id
       emp_name
       dept_id
       salary
  FROM employees
  INTO TABLE lt_employees.

LOOP AT lt_employees INTO ls_employee.

  * Calculate the sum of salaries for each department
  IF lt_avg_salary[dept_id] IS INITIAL.
    lt_avg_salary[dept_id] = ls_employee-salary.
  ELSE.
    lt_avg_salary[dept_id] = lt_avg_salary[dept_id] + ls_employee-salary.
  ENDIF.

ENDLOOP.

* Calculate the average salary for each department
LOOP AT lt_avg_salary ASSIGNING FIELD-SYMBOL(<ls_dept>).
  <ls_dept>-avg_salary = <ls_dept>-sum_salary / <ls_dept>-count.
ENDLOOP.

* Display the results in a formatted table
cl_demo_output=>write_text( |DEPARTMENT | AVERAGE SALARY | ).

cl_demo_output=>write_text( |----------+--------------| ).

LOOP AT lt_avg_salary INTO ls_avg_salary.
  cl_demo_output=>write_text( |{ ls_avg_salary-dept_id } | { ls_avg_salary-avg_salary } | ).
ENDLOOP.