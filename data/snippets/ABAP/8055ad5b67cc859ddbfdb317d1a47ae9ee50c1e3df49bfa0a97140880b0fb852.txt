*&---------------------------------------------------------------------*
*& Report Z_GET_CUSTOMER_INPUT
*&---------------------------------------------------------------------*
REPORT Z_GET_CUSTOMER_INPUT.

* This program prompts the user for customer input and displays the data in a table. 

* Here we define the program's selection screen, which will display the input fields.
SELECTION-SCREEN BEGIN OF SCREEN 100.
PARAMETERS: p_customer TYPE kunnr, "Customer Number
            p_name1 TYPE KNA1-NAME1, "Customer Name
            p_city TYPE KNA1-CITY1. "Customer City
SELECTION-SCREEN END OF SCREEN 100.

* We declare an internal table to store the data entered by the user.
DATA: lt_customer_data TYPE STANDARD TABLE OF kna1 WITH HEADER LINE.

* This is the program's start-of-selection event.
START-OF-SELECTION.

* We use the SELECT-OPTIONS statement to get data from the KNA1 table based on the input fields selected by the user.
SELECT-OPTIONS: s_customer FOR kna1-kunnr NO INTERVALS, "Customer Number
                s_name1 FOR KNA1-NAME1 NO INTERVALS, "Customer Name
                s_city FOR KNA1-CITY1 NO INTERVALS. "Customer City

* We use the WHERE clause to filter the data based on the user's input.
WHERE kunnr IN s_customer
  AND name1 IN s_name1
  AND city1 IN s_city.

* Finally, we display the data in a basic ALV table using the CL_SALV_TABLE class.
cl_salv_table=>factory(
    IMPORTING
        r_salv_table = DATA(lo_alv)
    CHANGING
        t_table      = lt_customer_data ).

* We add some additional formatting options to the table and display it.
lo_alv->display( ).