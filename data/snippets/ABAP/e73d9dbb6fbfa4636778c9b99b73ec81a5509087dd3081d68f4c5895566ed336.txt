* Selection screen
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE t1.
PARAMETERS: p_matnr TYPE matnr OBLIGATORY.
PARAMETERS: p_werks TYPE werks OBLIGATORY.
SELECT-OPTIONS: s_date FOR sy-datum NO-EXTENSION NO INTERVALS NO-ABAPMMS ALIASES p_date.
SELECT-OPTIONS: s_maktx FOR mara-maktx NO INTERVALS EXCLUDING NO-ABAPMMS NO-FAST ALIASES p_maktx OBLIGATORY.
SELECT-OPTIONS: s_labst FOR marc-labst NO-EXTENSION NO INTERVALS NO-ABAPMMS ALIASES p_labst.
SELECT-OPTIONS: s_mblnr FOR mseg-mblnr NO INTERVALS EXCLUDING NO-ABAPMMS NO-FAST ALIASES p_mblnr.
SELECT-OPTIONS: s_wgbst FOR mbew-wgbst NO INTERVALS NO-ABAPMMS ALIASES p_wgbst.
SELECT-OPTIONS: s_kostl FOR kunnr-kostl NO-EXTENSION NO INTERVALS NO-ABAPMMS ALIASES p_kostl.
SELECTION-SCREEN END OF BLOCK b1.
* Events
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_date.
  CALL FUNCTION 'F4_FDATE'
    EXPORTING
      CUMULATED_DAY = 'X'
      INIT_DATE     = 'X'
    IMPORTING
      RETDATE       = s_date-high.
* Begin of event for at selection-screen for p_matnr
AT SELECTION-SCREEN ON p_matnr.
* Local variable to pass error message
DATA: lv_error_message TYPE string.
* Check if input is valid
IF p_matnr IS NOT INITIAL.
    SELECT SINGLE matkl FROM mara INTO @DATA(lv_matkl) WHERE matnr = @p_matnr.
    IF sy-subrc = 0.
      MESSAGE |Valid input for material { p_matnr } with material group { lv_matkl }| TYPE 'I'.
    ELSE.
      lv_error_message = |Invalid input for material { p_matnr }|.
      MESSAGE lv_error_message TYPE 'E'.
    ENDIF.
ENDIF.
* Begin of event for at selection-screen for p_werks
AT SELECTION-SCREEN ON p_werks.
* Local variable to pass error message
DATA: lv_error_message TYPE string.
* Check if input is valid
IF p_werks IS NOT INITIAL.
    SELECT SINGLE name1 FROM t001w INTO @DATA(lv_name1) WHERE werks = @p_werks.
    IF sy-subrc = 0.
      MESSAGE |Valid input for plant { p_werks } with description { lv_name1 }| TYPE 'I'.
    ELSE.
      lv_error_message = |Invalid input for plant { p_werks }|.
      MESSAGE lv_error_message TYPE 'E'.
    ENDIF.
ENDIF.
* Begin of event for at selection-screen for p_maktx
AT SELECTION-SCREEN ON p_maktx.
* Local variable to pass error message
DATA: lv_error_message TYPE string.
* Check if input is valid
IF s_maktx[] IS NOT INITIAL.
  SELECT * FROM mara WHERE maktx IN @s_maktx.
  IF sy-subrc = 0.
    MESSAGE |Valid input for material description { p_maktx }| TYPE 'I'.
  ELSE.
    lv_error_message = |Invalid input for material description { p_maktx }|.
    MESSAGE lv_error_message TYPE 'E'.
  ENDIF.
ENDIF.
* Begin of event for at selection-screen for p_labst
AT SELECTION-SCREEN ON p_labst.
* Local variable to pass error message
DATA: lv_error_message TYPE string.
* Check if input is valid
IF s_labst[] IS NOT INITIAL.
  SELECT * FROM marc WHERE matnr = @p_matnr AND werks = @p_werks AND labst IN @s_labst.
  IF sy-subrc = 0.
    MESSAGE |Valid input for available stock { p_labst }| TYPE 'I'.
  ELSE.
    lv_error_message = |Invalid input for available stock { p_labst }|.
    MESSAGE lv_error_message TYPE 'E'.
  ENDIF.
ENDIF.
* Begin of event for at selection-screen for p_mblnr
AT SELECTION-SCREEN ON p_mblnr.
* Local variable to pass error message
DATA: lv_error_message TYPE string.
* Check if input is valid
IF s_mblnr[] IS NOT INITIAL.
  SELECT * FROM mseg WHERE mblnr IN @s_mblnr AND matnr = @p_matnr.
  IF sy-subrc = 0.
    MESSAGE |Valid input for document number { p_mblnr }| TYPE 'I'.
  ELSE.
    lv_error_message = |Invalid input for document number { p_mblnr }|.
    MESSAGE lv_error_message TYPE 'E'.
  ENDIF.
ENDIF.
* Begin of event for at selection-screen for p_wgbst
AT SELECTION-SCREEN ON p_wgbst.
* Local variable to pass error message
DATA: lv_error_message TYPE string.
* Check if input is valid
IF s_wgbst[] IS NOT INITIAL.
  SELECT * FROM mbew WHERE matnr = @p_matnr AND werks = @p_werks AND wgbst IN @s_wgbst.
  IF sy-subrc = 0.
    MESSAGE |Valid input for stock value { p_wgbst }| TYPE 'I'.
  ELSE.
    lv_error_message = |Invalid input for stock value { p_wgbst }|.
    MESSAGE lv_error_message TYPE 'E'.
  ENDIF.
ENDIF.
* Begin of event for at selection-screen for p_kostl
AT SELECTION-SCREEN ON p_kostl.
* Local variable to pass error message
DATA: lv_error_message TYPE string.
* Check if input is valid
IF s_kostl[] IS NOT INITIAL.
  SELECT * FROM kunnr WHERE kostl IN @s_kostl.
  IF sy-subrc = 0.
    MESSAGE |Valid input for cost center { p_kostl }| TYPE 'I'.
  ELSE.
    lv_error_message = |Invalid input for cost center { p_kostl }|.
    MESSAGE lv_error_message TYPE 'E'.
  ENDIF.
ENDIF.