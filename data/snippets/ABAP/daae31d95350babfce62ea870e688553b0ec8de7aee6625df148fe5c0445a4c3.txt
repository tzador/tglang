DATA:
  lv_name TYPE string, "lv_name is of data type string
  lv_age TYPE i VALUE 30, "lv_age is of data type i (integer) with initial value 30
  lv_height TYPE f DECIMALS 2, "lv_height is of data type f (float) with 2 decimal places
  lt_data TYPE TABLE OF string WITH DEFAULT KEY, "lt_data is of internal table type with string values and default key
  ls_info TYPE SORTED TABLE OF string WITH NON-UNIQUE KEY table_line ASCENDING, "ls_info is of sorted table type with string values and non-unique key sorted in ascending order
  lv_count TYPE i, "lv_count is of data type i (integer)
  lv_sum TYPE i. "lv_sum is of data type i (integer)

FIELD-SYMBOLS:
  <lv_field> TYPE ANY, "dynamic field symbol that can point to any data type
  <lt_field> TYPE STANDARD TABLE. "dynamic field symbol that can point to any internal table type

"Start of selection process
START-OF-SELECTION.
  "Get data from database table 'PERSON'
  SELECT name, age, height FROM person
  INTO CORRESPONDING FIELDS OF TABLE lt_data.

  "Loop through the internal table
  LOOP AT lt_data INTO DATA(ls_person_data).
    "Assign current values to field symbols
    ASSIGN COMPONENT 'NAME' OF STRUCTURE ls_person_data TO <lv_field>.
    ASSIGN COMPONENT 'AGE' OF STRUCTURE ls_person_data TO <lv_field>.
    ASSIGN COMPONENT 'HEIGHT' OF STRUCTURE ls_person_data TO <lv_field>.

    "Convert age to string and concatenate with height
    CONCATENATE <lv_field> lv_height INTO <lv_field>.

    "Check if age is less than 18
    CHECK <lv_field> LT 18.

    "Add 1 to count
    ADD 1 TO lv_count.

    "Calculate sum of ages
    lv_sum = lv_sum + <lv_field>.
  ENDLOOP.

  "Sort the sorted table in descending order
  SORT ls_info BY table_line DESCENDING.

  "Get first and last entry
  READ TABLE ls_info ASSIGNING FIELD-SYMBOL(<ls_first_entry>) INDEX 1.
  READ TABLE ls_info ASSIGNING FIELD-SYMBOL(<ls_last_entry>) INDEX lines(ls_info).

  "Output results
  WRITE: / 'Number of people: ', lv_count.
  WRITE: / 'Average age: ', lv_sum / lv_count.
  WRITE: / 'Youngest person: ', <ls_first_entry>.
  WRITE: / 'Oldest person: ', <ls_last_entry>.