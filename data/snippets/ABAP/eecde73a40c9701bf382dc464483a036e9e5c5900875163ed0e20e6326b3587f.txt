report ZEXAMPLEPROGRAM.
* this is a sample ABAP program 
data: lv_name type string value 'John Doe',
      lv_age type i value 30.
* declares two variables, one for name and one for age
write: 'Hello', lv_name, '. You are', lv_age, 'years old.'.
* displays a message using the variables
if lv_age >= 18.
  write: 'You are considered an adult.'.
else.
  write: 'You are considered a minor.'.
endif.
* checks if the person is considered an adult or minor based on their age
select * from zexampletable into table @data(lt_table).
if sy-subrc = 0.
* checks if the select statement was successful
  loop at lt_table into @data(ls_row).
* loops through the table data and stores each row in ls_row
    if ls_row-name = lv_name.
* checks if the name in the current row is equal to lv_name
      write: 'Your age is', ls_row-age, 'according to our records.'.
    endif.
  endloop.
else.
  write: 'No data found for', lv_name.
endif.
* displays the person's age according to the data in the table
perform calculate_average_ages using lv_name changing lv_average_age.
* calls a subroutine to calculate the average age of people with the same name
write: 'The average age of people with the name', lv_name, 'is', lv_average_age.
* displays the calculated average age for people with the same name

form calculate_average_ages using p_name type string changing p_average_age type i.
* subroutine to calculate the average age of people with the same name
data: lv_name type string,
      lv_age type i,
      lv_total_age type i,
      lv_count type i,
      lv_average_age type i.
* declares local variables for name, age, total age, count and average age
lv_name = p_name.
* sets the value of lv_name to the input parameter p_name
select * from zexampletable into table @data(lt_table).
* selects data from the table and stores it in internal table lt_table
if sy-subrc = 0.
* checks if select statement was successful
  loop at lt_table into @data(ls_row).
* loops through the table data and stores each row in ls_row
    if ls_row-name = lv_name.
* checks if the name in the current row is equal to lv_name
      lv_age = ls_row-age.
* sets the value of lv_age to the age in the current row
      add lv_age to lv_total_age.
* adds the current age to the total age
      add 1 to lv_count.
* increments the count by 1
    endif.
  endloop.
  divide lv_total_age by lv_count into lv_average_age.
* calculates the average age by dividing the total age by the count
  p_average_age = lv_average_age.
* sets the value of p_average_age to the calculated average age
endif.
endform.
* end of subroutine to calculate average age