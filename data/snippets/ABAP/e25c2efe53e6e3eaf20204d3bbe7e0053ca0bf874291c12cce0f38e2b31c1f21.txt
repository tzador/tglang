*&---------------------------------------------------------------------*
*& Report Z_DEMO_CODE_SNIPPET
*&---------------------------------------------------------------------*
*
* This report takes in two inputs,
* calculates the fibonacci series of the first input,
* and multiplies it with the second input.
*
* Input:
* @DATA(lv_num1) TYPE i VALUE 10. "first input
* @DATA(lv_num2) TYPE i VALUE 5. "second input
*
* Output:
* @DATA(lv_result) TYPE i. "result of calculated fibonacci series multiplied with second input
*
* This report uses a recursive function to calculate the fibonacci series.
* It takes in two parameters, current number and previous number,
* and returns the sum of those two numbers.
*
* This function is called recursively until the desired number is reached.
* The initial numbers are set to 1 and 0, as the first two numbers in fibonacci series.
*
* The main method first checks if the input number is valid,
* and then calls the fibonacci function with initial values.
*
*-----------------------------------------------------------------------*
*
REPORT Z_DEMO_CODE_SNIPPET.

"set default values for input
DATA(lv_num1) TYPE i VALUE 10.
DATA(lv_num2) TYPE i VALUE 5.

"calculate the fibonacci series of the first input
DATA(lv_result) TYPE i.
IF lv_num1 >= 0.

  "call function to calculate fibonacci series recursively
  DATA(lv_current) TYPE i VALUE 1.
  DATA(lv_previous) TYPE i VALUE 0.
  CALL FUNCTION 'FIBONACCI'
    EXPORTING
      current  = lv_current
      previous = lv_previous
    IMPORTING
      result   = lv_result
      number   = lv_num1.

  "multiply the result with the second input
  lv_result = lv_result * lv_num2.
ENDIF.

*pass final result to output variable
lv_result = lv_num2.

"function to calculate fibonacci series recursively
FUNCTION FIBONACCI.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(CURRENT) TYPE  I
*"     VALUE(PREVIOUS) TYPE  I
*"  EXPORTING
*"     VALUE(NUMBER) TYPE  I
*"  EXCEPTIONS
*"      INVALID_NUMBER.
*"----------------------------------------------------------------------
  DATA(lv_sum) TYPE i.
  lv_sum = CURRENT + PREVIOUS.

  "check if desired number is reached and return sum
  IF NUMBER = 2.
    RAISE INVALID_NUMBER.
  ELSE.
    CALL FUNCTION 'FIBONACCI'
      EXPORTING
        current  = lv_sum
        previous = CURRENT
      IMPORTING
        result   = NUMBER
        number   = NUMBER - 1.
  ENDIF.
ENDFUNCTION.