*&---------------------------------------------------------------------*
*& Report Z_DEMO_PARSING
*&---------------------------------------------------------------------*
REPORT z_demo_parsing.

* Variables to hold data.
DATA: gv_string TYPE string,
      gv_char TYPE char10,
      gv_int TYPE i,
      gv_flt TYPE f,
      gv_dec TYPE p,
      gv_dnum TYPE decfloat16.

* Parsing a string into different data types.
CONCATENATE '135' 'ABAP' INTO gv_string.
gv_char = gv_string.
gv_int = gv_string.
gv_flt = gv_string.
gv_dec = gv_string.
gv_dnum = gv_string.

* Output the result.
WRITE: 'The string is', gv_string.
WRITE: 'The character is', gv_char.
WRITE: 'The integer is', gv_int.
WRITE: 'The float is', gv_flt.
WRITE: 'The decimal is', gv_dec.
WRITE: 'The decimal float is', gv_dnum.

* Parsing a string with exception handling.
TRY.
    CONCATENATE 'A12' 'ABAP' INTO gv_string.
    gv_int = gv_string.
    WRITE: 'The integer is', gv_int.
  CATCH cx_sy_conversion_error INTO DATA(lx_conv).
    WRITE: 'A conversion error has occurred:', lx_conv->get_text( ).
ENDTRY.

* Parsing a string using a regular expression.
FIND FIRST OCCURRENCE OF REGEX '([0-9]+)' IN gv_string
    SUBMATCHES DATA(lt_submatches).
LOOP AT lt_submatches ASSIGNING FIELD-SYMBOL(<fs_submatch>).
    gv_int = <fs_submatch>.
    WRITE: 'The integer is', gv_int.
ENDLOOP.