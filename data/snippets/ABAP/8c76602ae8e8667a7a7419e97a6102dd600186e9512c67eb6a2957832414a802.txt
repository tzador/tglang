CLASS zcl_demo DEFINITION.
  PUBLIC SECTION.
    METHODS: constructor,
      check_email_address
                      IMPORTING
                        iv_email_address TYPE string OPTIONAL
                      RETURNING
                        VALUE(rv_valid) TYPE abap_bool,
      get_email_address,
      check_username
                      IMPORTING
                        iv_username TYPE string OPTIONAL
                      RETURNING
                        VALUE(rv_valid) TYPE abap_bool,
      get_username.
  PROTECTED SECTION.
    DATA: gv_email_address TYPE string,
      gv_username TYPE string.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_demo IMPLEMENTATION.
  METHOD constructor.
  ENDMETHOD.
  METHOD check_email_address.
    DATA: lv_email_address TYPE string,
      lv_valid TYPE abap_bool.
    CHECK iv_email_address IS NOT INITIAL.
    TRANSLATE iv_email_address TO UPPER CASE.
    lv_email_address = iv_email_address.
    IF lv_email_address CO 'A-Z0-9_{}#./^p!$Ã±P&()*,+?<>@'.
      lv_valid = abap_false.
    ELSE.
      lv_valid = abap_true.
    ENDIF.
    rv_valid = lv_valid.
  ENDMETHOD.
  METHOD get_email_address.
    gv_email_address = lg_email_address.
  ENDMETHOD.
  METHOD check_username.
    DATA: lv_username TYPE string,
      lv_valid TYPE abap_bool.
    IF iv_username IS INITIAL.
      lv_valid = abap_false.
    ELSE.
      IF iv_username CO 'a-zA-Z0-9!#$%&'*+/=?^`{}~.-_' AND strlen( iv_username ) BETWEEN 6 AND 30.
        lv_valid = abap_true.
      ELSE.
        lv_valid = abap_false.
      ENDIF.
    ENDIF.
    rv_valid = lv_valid.
  ENDMETHOD.
  METHOD get_username.
    gv_username = gv_username.
  ENDMETHOD.
ENDCLASS.