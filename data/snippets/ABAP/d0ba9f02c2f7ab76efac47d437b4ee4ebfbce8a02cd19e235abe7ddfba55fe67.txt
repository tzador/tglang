" * Implementation of the Bubble Sort Algorithm in ABAP
" * Author: John Smith
CLASS lcl_bubble_sort DEFINITION.
  PUBLIC SECTION.
    METHODS:
      constructor,
      sort IMPORTING iv_tab TYPE STANDARD TABLE,
      display_sorted_data.
  PRIVATE SECTION.
    TYPES: BEGIN OF ty_data,
             col1 type i,
             col2 type i.
    DATA:
      mt_data type standard TABLE OF ty_data.
    METHODS:
      bubble_sort IMPORTING iv_tab TYPE STANDARD TABLE,
      swap_changes CHANGING cs_data type ty_data,
      transpose_data IMPORTING iw_tab type standard TABLE CHANGING cw_tab type standard TABLE.
ENDCLASS.

CLASS lcl_bubble_sort IMPLEMENTATION.
  METHOD constructor.
    CREATE DATA mt_data.
  ENDMETHOD.

  METHOD bubble_sort.
    FIELD-SYMBOLS:
      <fs_left> TYPE ANY,
      <fs_right> TYPE ANY.

    DESCRIPTIVE.
    " Loop to iterate over the elements of the table
    DO rows OF itab.
      LOOP AT itab ASSIGNING FIELD-SYMBOL(<fs_left>) FROM row+1.
        " Loop to compare the current element with the rest of the unsorted elements
        LOOP AT itab INTO FIELD-SYMBOL(<fs_right>) FROM row.
          " Check if the current element is greater than the element being compared
          IF <fs_left> > <fs_right>.
            " Swap the elements
            cs_data = swap_changes( cs_data = <fs_left> iw_tab = <fs_right> ).
          ENDIF.
        ENDLOOP.
      ENDLOOP.
    ENDDO.
  ENDMETHOD.

  METHOD swap_changes.
    " Temporary variable to store data during swap
    FIELD-SYMBOLS:
      <fs_temp> TYPE ANY.
    <fs_temp> = cs_data.
    cs_data = iw_tab.
    iw_tab = <fs_temp>.
  ENDMETHOD.
  
  METHOD transpose_data.
    " Transpose the sorted data into the output table
    DATA(lv_index) = 1.
    LOOP AT iw_tab INTO DATA(ls_tab).
      cw_tab[lv_index] = ls_tab.
      lv_index = lv_index + 1.
    ENDLOOP.
  ENDMETHOD.

  METHOD sort.
    " Call the bubble sort method
    bubble_sort( iv_tab = iv_tab ).
    " Display the sorted data
    display_sorted_data( ).
  ENDMETHOD.

  METHOD display_sorted_data.
    " Transpose the sorted data into the output table
    transpose_data( iw_tab = mt_data CHANGING cw_tab = CONV rst_unit=>(
      value = VALUE #( ( name = 'Column 1' ) ( name = 'Column 2' ) ) ) ).
    " Display the output
    cl_demo_output=>write( CONV #( mt_data ) ).
  ENDMETHOD.
ENDCLASS.