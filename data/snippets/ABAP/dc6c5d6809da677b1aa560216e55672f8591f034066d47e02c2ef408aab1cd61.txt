TYPES:
  BEGIN OF type_address,
    company   TYPE string,
    address   TYPE string,
    city      TYPE string,
    country   TYPE string,
    postal    TYPE string,
  END OF type_address.

TYPES:
  flights TYPE STANDARD TABLE OF type_flight WITH KEY primary_key.

TYPES:
  BEGIN OF type_passenger,
    name       TYPE string,
    age        TYPE i,
    address    TYPE type_address,
  END OF type_passenger.

CLASS passenger DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      create_passenger
        IMPORTING
          i_name     TYPE string
          i_age      TYPE i
          i_address  TYPE type_address
        RETURNING
          VALUE(ro_passenger) TYPE type_passenger.

  PRIVATE SECTION.
    DATA:
      name        TYPE string,
      age         TYPE i,
      address     TYPE type_address.

ENDCLASS.

CLASS passenger IMPLEMENTATION.
  METHOD create_passenger.
    ro_passenger = VALUE #(
      name = i_name
      age = i_age
      address = i_address ).
  ENDMETHOD.
ENDCLASS.

CLASS flight DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      create_flight
        IMPORTING
          i_flight_number  TYPE string
          i_origin         TYPE string
          i_destination    TYPE string
        RETURNING
          VALUE(ro_flight)  TYPE type_flight.
  
  PRIVATE SECTION.
    DATA:
      flight_number  TYPE string,
      origin         TYPE string,
      destination    TYPE string.
ENDCLASS.

CLASS flight IMPLEMENTATION.
  METHOD create_flight.
    ro_flight = VALUE #(
      flight_number = i_flight_number
      origin = i_origin
      destination = i_destination ).
  ENDMETHOD.
ENDCLASS.

METHOD book_flight.
  DATA:
    lo_passenger  TYPE REF TO passenger,
    lo_flight     TYPE REF TO flight.

  lo_passenger = passenger=>create_passenger(
     i_name = 'John Smith'
     i_age = 42
     i_address = VALUE type_address(
      company = 'ABC Airlines'
      address = '123 Main Street'
      city = 'New York'
      country = 'USA'
      postal = '10001' )
  ).
  
  lo_flight = flight=>create_flight(
    i_flight_number = 'ABC123'
    i_origin = 'New York'
    i_destination = 'Paris' ).
    
  IF lo_passenger IS BOUND AND lo_flight IS BOUND.
    DATA:
      lt_flights TYPE flights,
      lv_price TYPE p DECIMALS 2.
    
    "Logic for calculating price of flight ticket goes here"
    
    "Display flight details and price to user"
    WRITE: / 'Passenger name:', lo_passenger->name.
    WRITE: / 'Company:', lo_passenger->address-company.
    WRITE: / 'Origin:', lo_flight->origin.
    WRITE: / 'Destination:', lo_flight->destination.
    WRITE: / 'Price:', lv_price.
    
  ENDIF.
ENDMETHOD.