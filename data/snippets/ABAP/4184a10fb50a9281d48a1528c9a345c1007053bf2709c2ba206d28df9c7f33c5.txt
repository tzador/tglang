*&---------------------------------------------------------------------*
*& Report ZSAPABAP_DEMO
*&---------------------------------------------------------------------*
*& This is a demo program to showcase the use of ABAP programming language
*&---------------------------------------------------------------------*

REPORT ZSAPABAP_DEMO.

* Data declaration for internal table
DATA: lt_flightdata TYPE TABLE OF sperfl.

* Select query to retrieve data from database table
SELECT * FROM sperfl INTO TABLE lt_flightdata.

* Loop through internal table and perform logic
LOOP AT lt_flightdata ASSIGNING FIELD-SYMBOL(<fs_flight>).

  * Perform some calculations using the data in the internal table
  DATA(lv_total_distance) = <fs_flight>-distance * <fs_flight>-num_passengers.

  * Modify the existing data in the internal table
  <fs_flight>-cost = lv_total_distance / <fs_flight>-num_seats.

  * Check for errors and handle them using exceptions
  CHECK <fs_flight>-cost > 1000.
  IF sy-subrc = 0.
    RAISE cost_too_high EXCEPTION TYPE exception_handler.
  ENDIF.

  * Update the database table with the changes made in the internal table
  MODIFY sperfl FROM <fs_flight>.

ENDLOOP.

* Subroutine to display the final data
PERFORM display_flight_data.

* Exception handling subroutine
FORM exception_handler.
  WRITE: / 'Cost is too high for flight', <fs_flight>-flight_number.
ENDFORM.

* Subroutine to display the flight data
FORM display_flight_data.
  WRITE: / 'Flight data after processing:', sy-uzeit.

  * Loop through internal table and display the data
  LOOP AT lt_flightdata INTO DATA(ls_flight).
    WRITE: / ls_flight-flight_number, ls_flight-distance, ls_flight-num_passengers, ls_flight-cost.
  ENDLOOP.
ENDFORM.

* Extra code for testing purposes
DATA: lv_total_revenue TYPE c LENGTH 6.
SELECT SUM( cost ) FROM sperfl INTO lv_total_revenue.
WRITE: / 'Total revenue for all flights:', lv_total_revenue.