" This is a code snippet in ABAP for creating a dynamic internal table with dynamic column names

" Declare a dictionary structure type
TYPES: BEGIN OF ty_table_line,
         value TYPE string,
       END OF ty_table_line.

" Declare the dynamic internal table using the dictionary structure type
DATA: gt_table TYPE STANDARD TABLE OF ty_table_line.

" Declare an empty work area for the table
DATA: gs_table TYPE ty_table_line.

" Get the columns' names from the user input
PARAMETERS: p_column1 TYPE string,
            p_column2 TYPE string,
            p_column3 TYPE string,
            p_column4 TYPE string.

" Declare a field-symbol for looping through the columns
FIELD-SYMBOLS: <fs_col> TYPE string.

" Append the columns' names to the internal table field catalog
APPEND INITIAL LINE TO gt_table ASSIGNING <fs_col>.
<fs_col>-value = p_column1.
APPEND INITIAL LINE TO gt_table ASSIGNING <fs_col>.
<fs_col>-value = p_column2.
APPEND INITIAL LINE TO gt_table ASSIGNING <fs_col>.
<fs_col>-value = p_column3.
APPEND INITIAL LINE TO gt_table ASSIGNING <fs_col>.
<fs_col>-value = p_column4.

" Fill the dynamic internal table with sample data
gs_table-value = 'Sample 1'.
APPEND gs_table TO gt_table.
gs_table-value = 'Sample 2'.
APPEND gs_table TO gt_table.
gs_table-value = 'Sample 3'.
APPEND gs_table TO gt_table.

" Output the dynamic internal table in a formatted way using the column names as headers
WRITE: / 'Column 1', / '--------'.
LOOP AT gt_table ASSIGNING <fs_col> WHERE value = p_column1.
  WRITE: / <fs_col>-value.
ENDLOOP.

WRITE: / 'Column 2', / '--------'.
LOOP AT gt_table ASSIGNING <fs_col> WHERE value = p_column2.
  WRITE: / <fs_col>-value.
ENDLOOP.

WRITE: / 'Column 3', / '--------'.
LOOP AT gt_table ASSIGNING <fs_col> WHERE value = p_column3.
  WRITE: / <fs_col>-value.
ENDLOOP.