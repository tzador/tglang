* Begin program

REPORT ZS_TEST.
* Program to display employee details

DATA: ls_employee TYPE zs_employee_details.
" Structure for storing employee details

DATA: lv_name TYPE string.
" Variable for storing employee name

DATA: lv_id TYPE zs_employee_details-employee_id.
" Variable for storing employee id

CONSTANTS: co_unassigned TYPE zs_employee_details-employee_id VALUE 9999.
" Constant for unassigned employee ID with a predefined value of 9999

DATA: lt_employees TYPE STANDARD TABLE OF zs_employee_details.
" Internal table for storing multiple employee details

* Select data from Employee master table
SELECT * FROM zs_employee_details INTO CORRESPONDING FIELDS OF TABLE lt_employees.

* Loop through the records in internal table
LOOP AT lt_employees INTO ls_employee.

  * Check if employee is assigned a ID
  IF ls_employee-employee_id <> co_unassigned.

    * Concatenate employee name with employee id
    CONCATENATE ls_employee-first_name ` ` ls_employee-last_name INTO lv_name.

    * Assign employee name to corresponding field
    ls_employee-full_name = lv_name.

    * Calculate employee age based on birth date
    ls_employee-age = YEAR( sy-datum ) - YEAR( ls_employee-birth_date ).

    * Modify employee role
    CASE ls_employee-role.
      WHEN 'PM'.
        ls_employee-role = 'Project Manager'.
      WHEN 'SD'.
        ls_employee-role = 'Software Developer'.
      WHEN 'BA'.
        ls_employee-role = 'Business Analyst'.
      WHEN 'QA'.
        ls_employee-role = 'Quality Analyst'.
    ENDCASE.

    * Update employee details in database
    UPDATE zs_employee_details FROM ls_employee.
  ENDIF.

ENDLOOP.

* Exit program
EXIT.