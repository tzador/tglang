*&---------------------------------------------------------------------*
*& Report ZTRM_ABAP_SNIPPET
*&---------------------------------------------------------------------*
*
* This program demonstrates a complex ABAP snippet with various features.
*
*-----------------------------------------------------------------------*
REPORT ztrm_abap_snippet.

*-- Declarations -------------------------------------------------------*
* Global data declaration
DATA: lv_count TYPE i, " Integer
      lv_string TYPE string, " String
      lt_table TYPE TABLE OF string, " Internal table
      ls_entry TYPE string. " Structure

*-- Initialization -----------------------------------------------------*
* Initialization event
INITIALIZATION.
  lv_string = 'Hello World'.
  lv_count = 5.

*-- Selection screen ----------------------------------------------------*
* Selection screen event
SELECTION-SCREEN BEGIN OF SCREEN 100 AS SUBSCREEN.
  * Checkboxes
  PARAMETERS: check1 TYPE c AS CHECKBOX,
              check2 TYPE c AS CHECKBOX.
  * Radio buttons
  PARAMETERS: radio1 TYPE c AS RADIOBUTTON USER-COMMAND rb1,
              radio2 TYPE c AS RADIOBUTTON USER-COMMAND rb2 DEFAULT 'X'.

  * Text input field
  PARAMETERS: p_input TYPE string.

  * Pushbuttons
  SELECTION-SCREEN PUSHBUTTON /00(20) text-001 USER-COMMAND pb1.
SELECTION-SCREEN END OF SCREEN 100.

*-- AT SELECTION-SCREEN OUTPUT ------------------------------------------*
* Selection screen output event
AT SELECTION-SCREEN OUTPUT.
* Set the radio buttons
  LOOP AT SCREEN.
    IF screen-group1 = 'RADIOGRP'.
      CASE screen-name.
        WHEN 'RADIO1'.
          screen-active = check1.
        WHEN 'RADIO2'.
          screen-active = check2.
      ENDCASE.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.

  * Set the input field
  LOOP AT SCREEN.
    IF screen-name = 'P_INPUT'.
      screen-input = check1.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.

*-- START-OF-SELECTION --------------------------------------------------*
* Start of selection event
START-OF-SELECTION.
* Fill the internal table with values
  DO lv_count TIMES.
    ls_entry = 'Entry ' && sy-index.
    APPEND ls_entry TO lt_table.
  ENDDO.

*-- GET, READ and MODIFY ------------------------------------------------*
* Get, read and modify event
GET [USER-COMMAND|LINE|+n|-n|FILTER|COUNTERS|UP TO|COLUMN|PAGE|DIALOG]
    [FULL|FULL LINE|POINTER FIELD|POINTER FIELD|SXX]
    [n|a|USING|- USING]
    [NO END OF PAGE|NO STANDARD PAGE|DEFALUT SCREEN]
    [VALUES|EDIT MASK|CURSOR|WINDOW]
    [HELP-REQUEST|DOUBLE CLICK]
    { addition ... or ... addition }
    [UP TO NUMBER|LINE|PAGE|LENGTH].
READ TABLE lt_table INDEX 5 INTO ls_entry.
MODIFY lt_table INDEX sy-index FROM 'New entry'.

*-- LOOP AT -------------------------------------------------------------*
* Loop at event
LOOP AT lt_table INTO ls_entry.

*-- OPEN DATASET --------------------------------------------------------*
* Open dataset event
OPEN DATASET 'ZTRM_ABAP_SNIPPET' FOR OUTPUT IN TEXT MODE
    ENCODING DEFAULT.

*-- WRITE ---------------------------------------------------------------*
* Write event
WRITE: 'Hello',

*-- CASE ----------------------------------------------------------------*
* Case event
CASE lv_count.
  WHEN 5.
    WRITE: 'five'.
  WHEN OTHERS.
    WRITE: 'other'.
ENDCASE.

*-- IF...ELSE -----------------------------------------------------------*
* If...else event
IF lv_count > 10.
  WRITE: 'Greater than 10'.
ELSE.
  WRITE: 'Less than or equal to 10'.
ENDIF.

*-- ADDITIONS -----------------------------------------------------------*/
* Additions event
[...].