*&---------------------------------------------------------------------*
*& Report ZFS_COMPLEX_CODE                                           *
*&---------------------------------------------------------------------*
REPORT zfs_complex_code.

*-- Class Definition ---------------------------------------------------*
CLASS lcl_complex_code DEFINITION ABSTRACT CREATE PRIVATE FINAL.
  PUBLIC SECTION.
    METHODS: complex_method
      IMPORTING
        iv_input TYPE i
      RETURNING
        VALUE(rv_output) TYPE i.
ENDCLASS.

*-- Class Implementation -----------------------------------------------*
CLASS lcl_complex_code IMPLEMENTATION.
  METHOD complex_method.
    DATA: lv_result TYPE i.

    CASE iv_input.
      WHEN 1.
        SELECT *
          FROM ztable1
          INTO TABLE @DATA(lt_table1).

        SELECT *
          FROM ztable2
          INTO TABLE @DATA(lt_table2).

        SELECT *
          FROM ztable3
          INTO TABLE @DATA(lt_table3).
      WHEN 2.
        SELECT *
          FROM ztable4
          INTO TABLE @DATA(lt_table4).
    ENDCASE.

    LOOP AT lt_table1 INTO DATA(ls_table1).
      LOOP AT lt_table2 INTO DATA(ls_table2).
        IF ls_table1-field1 = ls_table2-field2.
          WRITE:/ ls_table1-field1 LS_table2-field2.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    LOOP AT lt_table3 INTO DATA(ls_table3).
      LOOP AT lt_table4 INTO DATA(ls_table4).
        IF ls_table3-field3 = ls_table4-field4.
          WRITE:/ ls_table3-field3 LS_table4-field4.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    rv_output = iv_input + lv_result.
  ENDMETHOD.
ENDCLASS.

*-- Main Program -------------------------------------------------------*
DATA: lo_complex_code TYPE REF TO lcl_complex_code.

CREATE OBJECT lo_complex_code.
WRITE:/ lo_complex_code->complex_method( 1 ).
WRITE:/ lo_complex_code->complex_method( 2 ).