REPORT demo.

*" This is a simple report to demonstrate ABAP code snippets

TABLES: sflight.

*" This is a table declaration, sflight is a standard SAP flight information table

SELECT *
FROM sflight
WHERE carrid = 'LH'
AND connid = '522'
ORDER BY fldate ASCENDING
INTO TABLE @DATA(flight_info).

*" This is a SELECT statement, used to retrieve data from a database table
*" 'carrid' and 'connid' are fields in sflight table, and 'LH' and '522' are values to match
*" 'fldate' is another field in sflight table, and 'ASCENDING' specifies the order in which the data should be retrieved
*" The '@' symbol is used for inline declarations, and 'flight_info' is the name of the internal table where the data will be stored

DATA: lv_total_price TYPE p DECIMALS 2,
      lv_avg_price   TYPE p DECIMALS 2.

*" This is a declaration of two variables, 'lv_total_price' and 'lv_avg_price'.
*" 'TYPE p' specifies that the variables are of type decimal with 2 decimal places

LOOP AT flight_info INTO DATA(flight).
  lv_total_price = lv_total_price + flight.price.
ENDLOOP.

*" This is a LOOP statement, used to iterate over the internal table 'flight_info'
*" 'flight' is a work area, used to access the fields in each row of 'flight_info'
*" 'lv_total_price' is incremented by adding the 'price' field from each row of the internal table

lv_avg_price = lv_total_price / lines( flight_info ).

*" This line calculates the average price by dividing the total price by the number of rows in the internal table

WRITE: / 'Total Price:', lv_total_price.
WRITE: / 'Average Price:', lv_avg_price.

*" The WRITE statement is used to output data to the user interface.
*" The '/' specifies a new line, and the variables 'lv_total_price' and 'lv_avg_price' are displayed in the output

START-OF-SELECTION.

*" This event is triggered when the report is executed
*" The code inside this event is executed first, before any other code in the report

DO 10 TIMES.

*" This statement executes the code block inside it 10 times
*" In this case, the LOOP and WRITE statements from earlier will be executed 10 times, displaying the data multiple times in the output

  LOOP AT flight_info INTO DATA(flight).
    lv_total_price = lv_total_price + flight.price.
  ENDLOOP.

  lv_avg_price = lv_total_price / lines( flight_info ).

  WRITE: / 'Total Price:', lv_total_price.
  WRITE: / 'Average Price:', lv_avg_price.
ENDLOOP.

*" This ENDLOOP statement ends the DO loop