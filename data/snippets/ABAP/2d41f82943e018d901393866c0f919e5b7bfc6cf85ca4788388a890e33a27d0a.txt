*& This is a complex and detailed ABAP code snippet

  *& This program checks for an invoice and its corresponding payment status

  *& Declare variables
  DATA: l_invoiceno TYPE string.
  DATA: l_paymentstatus TYPE string.
  DATA: l_dueamount TYPE p LENGTH 15 DECIMALS 2.

  *& Get input from user
  PARAMETERS: p_invoiceno TYPE string LOWER CASE DEFAULT 'INV-123'.

  *& Open a database cursor
  CREATE DATA lr_cursor TYPE REF TO data.
  IF lr_cursor IS BOUND.
    lr_cursor->deactivate( ).
    FREE lr_cursor.
  ENDIF.

  *& Get invoice details from database
  TRY.
      CREATE DATA lr_cursor TYPE REF TO data.
      lr_cursor = cl_demo_input=>new( ).
      lr_cursor->set( p_fields = 'INVOICE_NO' p_value  = p_invoiceno ).
      lr_cursor->set( p_fields = 'DUE_AMOUNT' p_value  = '' ).
      lr_cursor->set( p_fields = 'PAYMENT_STATUS' p_value = '' ).
      lr_cursor->activate( ).
      lr_cursor->move_first( ).
      l_invoiceno = lr_cursor->get( 'INVOICE_NO' ).
      l_dueamount = lr_cursor->get( 'DUE_AMOUNT' ).
      l_paymentstatus = lr_cursor->get( 'PAYMENT_STATUS' ).
    CATCH cx_sy_conversion_error.
      " Error handling logic
  ENDTRY.

  *& Check payment status
  CASE l_paymentstatus.
    WHEN 'P' OR 'C'.
      WRITE: / 'Invoice ', l_invoiceno, ' is paid in full.'.
      WHEN 'U'.
      WRITE: / 'Invoice ', l_invoiceno, ' is unpaid.';
    WHEN 'D'.
      WRITE:/ 'Invoice ', l_invoiceno, ' has been paid partially. Amount due: ', l_dueamount.
    WHEN 'O'.
      WRITE: / 'Invoice ', l_invoiceno, ' has an open payment status.'.
    WHEN 'N'.
      WRITE: / 'Invoice ', l_invoiceno, ' has not yet been processed for payment.'.
    WHEN others.
      " Error handling logic
  ENDCASE.

  *& Close database cursor
  TRY.
    lr_cursor = cl_demo_input=>new( ).
    lr_cursor->set( p_fields = 'INVOICE_NO' p_value  = SPACE ).
    lr_cursor->set( p_fields = 'DUE_AMOUNT' p_value  = SPACE ).
    lr_cursor->set( p_fields = 'PAYMENT_STATUS' p_value = SPACE ).
    lr_cursor->activate( ).
    lr_cursor->move_first( ).
    lr_cursor->deactivate( ).
  CATCH cx_sy_conversion_error.
    " Error handling logic
  ENDTRY.