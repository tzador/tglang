### Subroutine to calculate the square root of a number using the bisection method

      subroutine bisection_method(x, xn, ep, sqrtn)
      implicit none
      integer :: max_iter, iter
      real :: xn, x, sqrtn, xmidsqrtn, del
      real :: ep  ! Tolerance

      ! Define initial values
      max_iter = 100 ! Maximum number of iterations
      xn = 0.5 * x  ! Initial guess for the square root

      do iter = 1, max_iter
         xmidsqrtn = (xn + sqrtn) / 2.0 ! Calculate the midpoint
         del = xmidsqrtn - sqrtn  ! Calculate the difference between the midpoint and the square root
         if (abs(del) < ep) exit ! Check if the difference is within tolerance
         if (del < 0) then  ! If the midpoint is smaller than the square root
            xn = xmidsqrtn ! Change xn to be the midpoint
         else ! If the midpoint is larger than the square root
            sqrtn = xmidsqrtn ! Change sqrtn to be the midpoint
         end if
      end do
      end subroutine bisection_method

      ! Sample call to the subroutine
      call bisection_method(x, xn, ep, sqrtn)
      print *, "The square root of", x, "is", xn