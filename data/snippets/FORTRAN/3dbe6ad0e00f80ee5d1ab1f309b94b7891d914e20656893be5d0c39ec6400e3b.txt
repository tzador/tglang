subroutine inverse(n, a, b, x, eps)
      integer, intent(in) :: n
      double precision, intent(inout) :: a(n,n)
      double precision, intent(inout) :: b(n,n)
      double precision, intent(inout) :: x(n,n)
      double precision, intent(in) :: eps
      double precision, dimension(n,n) :: u, I
      integer :: k, l, i, j
      double precision :: temp, m
      do i = 1, n
            u(i,:) = 0     !set all elements of u to 0
            u(i,i) = 1     !set diagonal elements to 1
      end do
      do i = 1, n     !set diagonal elements of b to 1
            b(i,i) = 1
      end do
      do k = 1, n-1
            m = abs(a(k,k))
            l = k
            do i = k+1, n
                  if abs(a(i,k)) > m then !find the largest element in the column
                        m = abs(a(i,k))
                        l = i
                  end if
            end do
            if m <= eps then
                  print *, "Matrix is singular"  !if the largest element is too small, the inverse does not exist
                  return
            end if
            if l /= k then     !if the largest element is not in the kth row, swap the rows to make it so
                  do j = 1, n
                        temp = a(k,j)
                        a(k,j) = a(l,j)
                        a(l,j) = temp
                        temp = b(k,j)
                        b(k,j) = b(l,j)
                        b(l,j) = temp
                  end do
            end if
            do i = k+1, n
                  temp = a(i,k) / a(k,k)
                  do j = k+1, n
                        a(i,j) = a(i,j) - temp * a(k,j)   !perform Gaussian elimination on a
                  end do
                  do j = 1, n
                        b(i,j) = b(i,j) - temp * b(k,j)   !apply the same transformations to b
                  end do
            end do
      end do
      do k = n, 1, -1
            do i = 1, k-1
                  temp = a(i,k)
                  do j = 1, n
                        b(i,j) = b(i,j) - temp * b(k,j)   !perform back substitution on b
                  end do
                  a(i,k) = 0     !set the elements of a below the diagonal to 0
            end do
      end do
      do i = 1, n
            x(i,:) = b(i,:) / a(i,i)     !divide each row of b by the corresponding diagonal element of a to get the inverse
      end do
end subroutine inverse