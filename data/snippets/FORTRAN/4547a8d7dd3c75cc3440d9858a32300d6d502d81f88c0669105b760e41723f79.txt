subroutine sort(array, length)
    ! This subroutine will sort an array of integer values in ascending order
    ! Inputs:
    ! array - the array to be sorted
    ! length - the length of the array
    ! Outputs:
    ! sorted_arr - the sorted array

    implicit none
    integer, intent(in) :: array(length) ! declare the input array and its length
    integer, intent(out) :: sorted_arr(length) ! declare the output array and its length
    integer :: i, j, temp ! declare loop counters and a temporary variable
    logical :: swapped ! declare a logical variable to track if any swaps were made

    sorted_arr = array ! initialize the output array to be equal to the input array

    do i = 1, length - 1 ! loop through the first element to the second-to-last element
        swapped = .false. ! reset the swapped variable to false at the beginning of each loop
        do j = 1, length - i ! loop through the unsorted portion of the array
            if (sorted_arr(j) > sorted_arr(j+1)) then ! check if the current element is greater than its right neighbor
                temp = sorted_arr(j) ! if it is, swap the two elements
                sorted_arr(j) = sorted_arr(j+1)
                sorted_arr(j+1) = temp
                swapped = .true. ! update the swapped variable to true
            end if
        end do
        if (.not. swapped) exit ! if no swaps were made in the previous loop, the array is already sorted
    end do

end subroutine sort