! This is a comment in FORTRAN

program complex_calculation
! This program calculates the square of a complex number using FORTRAN's built-in complex data type

implicit none
! explicit declaration of all variables to avoid errors

complex :: z ! declaration of a complex variable called z

z = (3.0, 4.0) ! assign the value of z to a complex number with real part = 3.0 and imaginary part = 4.0

! complex numbers in FORTRAN are represented using a pair of real numbers
! the first number represents the real part and the second number represents the imaginary part

print*, "Calculating the square of", z ! print the complex number that will be squared

call square(z) ! call the subroutine square to calculate the square of z

contains ! contains statement to define subroutines and functions

    subroutine square(z) ! define the subroutine square with an input parameter z
        complex :: z ! redeclaration of z as a complex variable since it is passed by reference
        z = z**2 ! calculate the square of z using the built-in exponentiation operator
        print*, "The square of", z, "is", z ! print the result
    end subroutine square
    
end program complex_calculation ! end of program

! Output: Calculating the square of (3.0,4.0)
           The square of (-7.0,24.0) is (-7.0,24.0)

! In FORTRAN, complex numbers are often used in scientific and engineering applications that involve calculations with imaginary numbers. This code snippet showcases how a complex number can be declared, assigned a value, and manipulated using built-in operators and subroutines in FORTRAN. The implicit none statement ensures that all variables are explicitly declared, preventing any undeclared variables from causing errors.