! This program uses Newton's method to find the root of a given function
real function f(x)  ! Define the function f(x)
    implicit none
    real, intent(in) :: x ! Define the input variable x
    f = x**3 - 2*x + 5 ! Define the function expression
end function

! Declare the necessary variables
real :: guess, x, y, yprime
integer :: max_iter, iter = 0
logical :: converged = .false.

! Set the initial guess for the root
guess = 1.0

! Set the maximum number of iterations
max_iter = 100

! Print the header for the iteration table
print *, "Iteration | x | f(x) | f'(x)"

! Start the iteration loop
do while ((converged .neq. .true.) .and. (iter < max_iter))

    ! Calculate the value of the function and its derivative at the current guess
    x = guess
    y = f(x)
    yprime = (f(x + 0.001) - f(x - 0.001)) / (0.002)

    ! Update the guess using Newton's method
    guess = x - y/yprime

    ! Print the iteration table
    print *, iter, " | ", guess, " | ", y, " | ", yprime

    ! Check for convergence
    if (abs(y) < 0.0001) then
        converged = .true.
    end if

    ! Increment the iteration counter
    iter = iter + 1
    
    ! Check for maximum iterations reached
    if (iter == max_iter) then
        print *, "Maximum number of iterations reached."
    end if

end do

! Print the final root approximation
print *, "The root is approximately: ", guess