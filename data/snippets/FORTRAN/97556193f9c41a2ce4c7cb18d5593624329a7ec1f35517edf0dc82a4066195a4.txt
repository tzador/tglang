! This code snippet solves a system of linear equations using the Gauss elimination method.
program Gauss_Elimination
 
  ! Number of unknowns
  integer :: n = 3
 
  ! Initialize matrices A (coefficient matrix) and B (constant matrix)
  real :: A(n,n), B(n)
 
  ! Declare variables
  integer :: i, j, k
 
  ! Get input values for matrix A
  write(*,*) "Enter coefficients for matrix A:"
  do i = 1, n
    do j = 1, n
        read(*,*) A(i,j)
    end do
  end do
 
  ! Get input values for matrix B
  write(*,*) "Enter constants for matrix B:"
  do i = 1, n
    read(*,*) B(i)
  end do
 
  ! Perform Gauss elimination
  do k = 1, n-1
 
    ! Partial pivoting
    do i = k+1, n
      if (abs(A(i,k)) > abs(A(k,k))) then
        do j = 1, n
          temp = A(k,j) ! Store A(k,j) in temporary variable
          A(k,j) = A(i,j) ! Swap A(k,j) with A(i,j)
          A(i,j) = temp ! Store A(i,j) in A(k,j)
        end do
        temp = B(k) ! Store B(k) in temporary variable
        B(k) = B(i) ! Swap B(k) with B(i)
        B(i) = temp ! Store B(i) in B(k)
      end if
    end do
 
    ! Forward elimination
    do i = k+1, n
      factor = A(i,k)/A(k,k) ! Calculate the factor
      do j = k, n
        A(i,j) = A(i,j) - factor*A(k,j) ! Update A(i,j)
      end do
      B(i) = B(i) - factor*B(k) ! Update B(i)
    end do
 
  end do
 
  ! Backward substitution
  X(n) = B(n)/A(n,n) ! Calculate the last unknown
  do i = n-1, 1, -1 ! Loop from second last unknown
    sum = 0.0
    do j = i+1, n
      sum = sum + A(i,j)*X(j) ! Calculate the sum of known variables
    end do
    X(i) = (B(i) - sum)/A(i,i) ! Calculate the unknown
  end do
 
  ! Print results
  write(*,*) "Solution using Gauss elimination:"
  do i = 1, n
    write(*,*) "x", i, "=", X(i)
  end do
 
end program Gauss_Elimination