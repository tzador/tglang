program main
! This program solves a system of linear equations using Gauss-Seidel method
implicit none
integer :: i, j, k, n, iter_max, flag
real, dimension(:,:), allocatable :: A, b, x, x_next, L, U
real :: error, tol

! Set the number of equations
n = 5 

! Set the maximum number of iterations
iter_max = 1000 

! Set the tolerance for error
tol = 0.00001 

! Allocate memory for matrices A, b, x and x_next
allocate(A(n,n), b(n), x(n), x_next(n))

! Fill matrix A with random values 
call random_number(A)

! Fill vector b with random values 
call random_number(b)

! Set the initial guess for x to be all zeros 
x = 0.0 

! Initialize iteration counter 
k = 0 

! Start Gauss-Seidel iteration 
do while(k < iter_max)

    ! Set flag to 1 indicating no errors
    flag = 1

    ! Calculate lower and upper triangular matrices L and U respectively
    do j = 1, n 
        do i = 1, n
            if(i < j) then 
                U(i,j) = A(i,j)
            elseif(i > j) then 
                L(i,j) = A(i,j)
            end if
        end do
    end do

    ! Calculate x_next using the updated x values
    do i = 1, n 
        x_next(i) = (b(i) - dot_product(L(i,:),x) - dot_product(U(i,:), x_next)) / A(i,i) 
    end do

    ! Check for convergence by calculating error
    error = maxval(abs(x_next - x))

    ! Update x with x_next
    x = x_next 

    ! Increment iteration counter
    k = k + 1 

    ! Check if error is within tolerance 
    if(error <= tol)then 
        flag = 0
        exit
    end if
end do 

! Check for errors 
if(flag == 1) then 

    ! Print error message if not converged
    print *, "Gauss-Seidel method failed to converge within max number of iterations."
else 

    ! Print solution vector 
    print *, "Solution vector:"
    do i = 1, n 
        print *, x(i)
    end do
end if 

end program main