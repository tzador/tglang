INTEGER, PARAMETER :: N = 100
      REAL :: A(N,N)
      INTEGER :: I, J, K

      ! This subroutine performs the Discrete Fourier Transform (DFT)
      ! on a 2-dimensional complex array A of size N x N.
      subroutine dft_2d(A)
      complex :: A(:,:)                                 ! Declare complex array
      complex :: I = cmplx(0.0,1.0)                      ! Initialize imaginary unit
      complex :: DELTA = 2.0 * pi / REAL(N)              ! Calculate Delta value
      complex :: W(N,N)                                  ! Declare Weight array

      ! Calculate Weight with values of W = e ^ (-I * Delta * K)
      do K = 0, N - 1
          do J = 0, N - 1
              W(J,K) = EXP(-I * DELTA * K * J)           ! Calculate Weight value
          end do
      end do

      ! Perform 1-dimensional DFT on each row of the array
      do I = 0, N - 1
        A(:,I) = dft_1d(A(:,I))
      end do

      ! Perform 1-dimensional DFT on each column of the array
      do J = 0, N - 1
        A(J,:) = dft_1d(A(J,:))
      end do

      ! Perform 2-dimensional DFT by multiplying with Weight array
      A = matmul(W, A)

      ! Subroutine for 1-dimensional DFT
      contains
          subroutine dft_1d(V)
          complex :: V(:)
          complex :: TEMP_V(N)
          do I = 0, N - 1
              TEMP_V(I+1) = 0.0     ! Initialize temporary array
              do J = 0, N - 1
                  TEMP_V(I+1) = TEMP_V(I+1) + V(J+1) * W(I,J)  ! Calculate DFT
              end do
          end do
          V = TEMP_V              ! Replace input array with calculated DFT values
      end subroutine dft_1d

      end subroutine dft_2d        ! End of subroutine dft_2d