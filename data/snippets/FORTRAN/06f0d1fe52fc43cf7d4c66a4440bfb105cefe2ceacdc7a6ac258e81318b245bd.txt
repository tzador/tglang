SUBROUTINE NEWTON_RAPHSON(X0, MAX_ITER)
    ! This subroutine implements the Newton-Raphson method for finding the root of a given function.
    ! Inputs:
    !   X0 - Initial guess for the root
    !   MAX_ITER - Maximum number of iterations
    
    ! Declare variables
    REAL :: X, DELTA_X, FX, DERIV
    INTEGER :: ITER
    
    ! Initialize variables
    X = X0
    ITER = 0
    DELTA_X = 1.0
    
    ! Begin loop for Newton-Raphson method
    DO WHILE (DELTA_X > 1e-6 .AND. ITER < MAX_ITER)
        ! Calculate function value at current point
        FX = MY_FUNC(X)
        
        ! Calculate derivative of the function at current point
        DERIV = MY_DERIV(X)
        
        ! Calculate the change in x
        DELTA_X = -FX / DERIV
        
        ! Update the current point
        X = X + DELTA_X
        
        ! Increase iteration count
        ITER = ITER + 1
    END DO
    
    ! Print the final root value
    PRINT *, "Root found at x =", X
END SUBROUTINE

FUNCTION MY_FUNC(X)
    ! This function calculates the value of a given function at a given point.
    IMPLICIT NONE
    
    ! Declare input and output variables
    REAL :: X, FX
    
    ! Calculate the function value
    FX = EXP(-X**2) - SIN(X)
    
    ! Return the function value
    MY_FUNC = FX
END FUNCTION

FUNCTION MY_DERIV(X)
    ! This function calculates the derivative of a given function at a given point.
    IMPLICIT NONE
    
    ! Declare input and output variables
    REAL :: X, DERIV
    
    ! Calculate the derivative of the function
    DERIV = -2.0 * X * EXP(-X**2) - COS(X)
    
    ! Return the derivative value
    MY_DERIV = DERIV
END FUNCTION