! This is a program called "Integration"
! It calculates the integral of a function over a given interval using the trapezoidal rule.

PROGRAM Integration
    IMPLICIT NONE

    INTEGER, PARAMETER  :: N = 1000    ! Number of subintervals

    REAL :: a, b   ! Interval endpoints
    REAL :: h      ! Length of each subinterval
    REAL :: x      ! Current x-value
    REAL :: sum    ! Running sum for the integral
    REAL :: integral  ! Final integral value
    REAL :: func   ! Function to be integrated
    INTEGER :: i   ! Loop counter

    ! Input interval endpoints
    WRITE (*, *) "Enter the left endpoint: "
    READ *, a
    WRITE (*, *) "Enter the right endpoint: "
    READ *, b

    ! Calculate length of each subinterval
    h = (b - a) / N

    ! Initialize running sum to 0
    sum = 0.0

    ! Perform loop for trapezoidal rule
    DO i = 1, N - 1
        x = a + i*h                    ! Current x-value
        call func(x,func)              ! Evaluates function at x
        sum = sum + func               ! Adds function value to running sum
    END DO

    ! Calculate final integral value
    integral = (h / 2.0) * (func(a) + func(b)) + h * sum

    ! Print result
    WRITE (*, *) "The integral of the function over the interval is: ", integral

    CONTAINS
        ! Subroutine to define the function to be integrated
        SUBROUTINE func(x, func)
            IMPLICIT NONE
            REAL, INTENT(IN) :: x             ! Current x-value
            REAL, INTENT(OUT) :: func         ! Function value at x

            ! Define function here (e.g. x^2)
            func = x * x
        END SUBROUTINE func

END PROGRAM Integration