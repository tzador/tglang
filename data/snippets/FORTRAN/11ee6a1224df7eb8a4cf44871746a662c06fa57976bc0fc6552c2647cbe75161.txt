subroutine quicksort(a, l, r)
! This subroutine implements the quicksort algorithm
! which sorts an array 'a' from index 'l' to 'r'
! Input:
! a - array to be sorted
! l - left index of the array
! r - right index of the array

  integer :: i, j, p, temp

  ! If array size is 1 or less, it is already sorted
  if (r <= l) then
    return
  end if

  ! Pick a pivot element, in this case the first element
  p = a(l)
  i = l + 1
  j = r

  do while (i < j)
    ! Find the value smaller than pivot from the right
    do while (i <= r .and. a(i) <= p)
      i = i + 1
    end do

    ! Find the value larger than pivot from the left
    do while (j >= l .and. a(j) > p)
      j = j - 1
    end do

    ! Swap the values if they are in the wrong place
    if (i < j) then
      temp = a(i)
      a(i) = a(j)
      a(j) = temp
    end if
  end do

  ! Move the pivot to its correct index
  temp = a(l)
  a(l) = a(j)
  a(j) = temp

  ! Sort the two sub-arrays
  call quicksort(a, l, j-1)
  call quicksort(a, j+1, r)
end subroutine quicksort