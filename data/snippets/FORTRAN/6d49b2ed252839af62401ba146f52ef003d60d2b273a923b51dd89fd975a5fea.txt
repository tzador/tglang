! This is a program to solve a linear system of equations using Gaussian Elimination method
! Set the size of the matrix
param INTEGER, PARAMETER :: n = 3	! Number of rows/columns in the matrix

! Define the arrays for storing the matrix and solution
REAL :: A(n,n)	! Matrix A
REAL :: b(n)	! Solution vector b
REAL :: x(n)	! Solution vector x
REAL :: pivot	! Pivot element
REAL :: mult	! Multiplication factor

! Initialize the matrix A and solution vector b with user input
PRINT *, "Enter the elements of the matrix A:"
DO i = 1, n	! Loop over rows
	DO j = 1, n	! Loop over columns
		READ *, A(i,j)	! Read in element from user input
	END DO
END DO
PRINT *, "Enter the elements of the solution vector b:"
DO i = 1, n	! Loop over rows
	READ *, b(i)	! Read in element from user input
END DO

! Perform Gaussian Elimination
DO k = 1, n-1	! Loop over columns
	! Find the pivot element
	pivot = A(k,k)	! Set pivot element as the current element in A
	! Eliminate elements below the pivot in the k-th column
	DO i = k+1, n	! Loop over rows
		! Calculate the multiplication factor
		mult = A(i,k) / pivot	! Divide current element by pivot
		! Subtract the k-th row multiplied by the multiplication factor from the i-th row
		DO j = k, n	! Loop over columns
			A(i,j) = A(i,j) - mult * A(k,j)
		END DO
		! Update the corresponding element in the solution vector
		b(i) = b(i) - mult * b(k)
	END DO
END DO

! Solve the resulting upper triangular system by back-substitution
x(n) = b(n) / A(n,n)	! Set the last element of x as the solution to the last row
DO k = n-1, 1, -1	! Loop backwards over rows
	! Initialize the sum for computing the remaining elements of x
	SUM = 0
	DO i = k+1, n	! Loop over columns
		SUM = SUM + A(k,i) * x(i)	! Sum over the previously solved elements
	END DO
	x(k) = (b(k) - SUM) / A(k,k)	! Calculate the remaining element of x

! Print the solution vector x
PRINT *, "The solution vector is:"
DO i = 1, n	! Loop over elements in x
	PRINT *, x(i)
END DO