SUBROUTINE newton_method(f, df, x0, tol, max_iter)
    INTEGER :: iter = 1, max_iter
    REAL :: x0, tol
    REAL :: x, x_old, fx, dfx, v, dvt
    REAL, PARAMETER :: eps = 1.e-8  ! tolerance limit
    x = x0
    100 continue                     ! start of loop
    fx = f(x)                       ! function value at current estimate
    dfx = df(x)                     ! derivative of function at current estimate
    v = fx / dfx                    ! Newton's method
    dvt = abs(x - v)                ! absolute error
    IF (dvt .LE. eps) THEN          ! check error limit
        PRINT *, 'solution: ', x    ! output solution
        RETURN
    ENDIF
    x_old = x
    x = x - v                       ! update current estimate
    iter = iter + 1                 ! update iteration count
    IF (iter .EQ. max_iter) THEN    ! check for maximum iterations
        PRINT *, 'solution not found within max iterations'
        RETURN
    ELSE IF (x_old .EQ. x) THEN     ! check for convergence
        PRINT *, 'solution has converged, check for accuracy'
        RETURN
    ELSE
        GO TO 100                   ! repeat loop
    ENDIF
END SUBROUTINE newton_method