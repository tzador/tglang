program calc_matrix   ! Begin program declaration
    implicit none   ! Declare all variables explicitly
    
    integer :: n,m      ! Declare integer variables 'n' and 'm'
    real, dimension(:, :) :: matrix_a, matrix_b  ! Declare real, two-dimensional arrays 'matrix_a' and 'matrix_b'
    
    print *, 'Enter the number of rows in the matrices'    ! Print message to prompt for input
    read *, n       ! Read user input for number of rows, stored in n
    print *, 'Enter the number of columns in the matrices'      ! Print message to prompt for input
    read *, m       ! Read user input for number of columns, stored in m
    
    allocate(matrix_a(n,m))
    allocate(matrix_b(n,m))     ! Allocate required memory for the arrays
    
    print *, 'Enter values for matrix a:'      ! Print message to prompt for input
    do i = 1, n     ! Begin do loop for rows of matrix_a
        do j = 1, m     ! Begin do loop for columns of matrix_a
            read *, matrix_a(i,j)       ! Read user input for each element in the matrix and store in array
        end do      ! End do loop for columns of matrix_a
    end do      ! End do loop for rows of matrix_a
    
    print *, 'Enter values for matrix b:'      ! Print message to prompt for input
    do i = 1, n     ! Begin do loop for rows of matrix_b
        do j = 1, m     ! Begin do loop for columns of matrix_b
            read *, matrix_b(i,j)       ! Read user input for each element in the matrix and store in array
        end do      ! End do loop for columns of matrix_b
    end do      ! End do loop for rows of matrix_b
    
    ! Printing results
    print *, 'Matrix a: '     ! Print message for matrix_a
    do i = 1, n     ! Begin do loop for rows of matrix_a
        do j = 1, m     ! Begin do loop for columns of matrix_a
            print *, matrix_a(i,j), ' '     ! Print elements of matrix_a with a space in between
        end do      ! End do loop for columns of matrix_a
        print *     ! Print a blank line after each row
    end do      ! End do loop for rows of matrix_a
    
    print *, 'Matrix b: '     ! Print message for matrix_b
    do i = 1, n     ! Begin do loop for rows of matrix_b
        do j = 1, m     ! Begin do loop for columns of matrix_b
            print *, matrix_b(i,j), ' '     ! Print elements of matrix_b with a space in between
        end do      ! End do loop for columns of matrix_b
        print *     ! Print a blank line after each row
    end do      ! End do loop for rows of matrix_b
    
    ! Calculating matrix product
    real, dimension(:, :) :: product     ! Declare new real, two-dimensional array for product
    allocate(product(n,m))      ! Allocate required memory for the array
    
    do i = 1, n     ! Begin do loop for rows of product
        do j = 1, m     ! Begin do loop for columns of product
            product(i,j) = 0.0      ! Initialize values of product to 0
            do k = 1, n     ! Begin do loop for multiplication calculation
                product(i,j) = product(i,j) + matrix_a(i,k) * matrix_b(k,j)      ! Multiply and add elements of matrices
            end do      ! End do loop for multiplication calculation
        end do      ! End do loop for columns of product
    end do      ! End do loop for rows of product
    
    print *, 'Product of matrices a and b:'      ! Print message for product
    do i = 1, n     ! Begin do loop for rows of product
        do j = 1, m     ! Begin do loop for columns of product
            print *, product(i,j), ' '      ! Print elements of product with a space in between
        end do      ! End do loop for columns of product
        print *     ! Print a blank line after each row
    end do      ! End do loop for rows of product
    
    deallocate(matrix_a)
    deallocate(matrix_b)
    deallocate(product)     ! Deallocate memory for all arrays
    
end program calc_matrix      ! End program declaration