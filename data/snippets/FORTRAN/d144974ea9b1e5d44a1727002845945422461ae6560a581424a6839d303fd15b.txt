program parallel_sum
  ! Parallel sum of two arrays using OpenMP
  implicit none
 
  ! Set the size of the arrays
  integer, parameter :: n = 100000
  integer :: i
  
  ! Declare the two arrays to sum
  real, dimension(n) :: array1, array2
  
  ! Initialize the arrays with random numbers
  call random_number(array1)
  call random_number(array2)
 
  ! Set the number of threads to use
  integer, parameter :: num_threads = 4
 
  ! Set the result array
  real, dimension(n) :: result_array
 
  ! Set the shared variables
  integer :: tid, chunk_size, start, end
 
  ! Set the chunk size for each thread
  chunk_size = n / num_threads
 
  ! Specify the parallel region using OpenMP directive
  !$omp parallel private(tid, start, end)
 
  ! Get the thread id
  tid = omp_get_thread_num()
 
  ! Calculate the start and end indices for each thread
  start = tid * chunk_size + 1
  end = (tid + 1) * chunk_size
 
  ! Loop over the array elements and add them together
  do i = start, end
    result_array(i) = array1(i) + array2(i)
  end do
 
  ! Exit the parallel region
  !$omp end parallel
 
  ! Print the first and last elements of the result array
  print *, "Parallel sum result:"
  print *, "First element:", result_array(1)
  print *, "Last element:", result_array(n)
 
end program parallel_sum