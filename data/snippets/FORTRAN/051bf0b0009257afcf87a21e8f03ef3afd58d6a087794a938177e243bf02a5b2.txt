! This program solves a system of linear equations using Jacobi method
 
program Jacobi
 
   implicit none
 
   ! Declare variables
   integer :: n, maxiter, iter, i, j
   real :: tol, error
   real, dimension(10,10) :: A    ! coefficient matrix
   real, dimension(10)    :: b    ! right-hand side vector
   real, dimension(10)    :: x    ! solution vector
   real, dimension(10)    :: xnew ! temporary solution vector
 
   ! Get user input
   print *, "Enter the number of equations and unknowns: "
   read *, n
 
   ! Initialize maximum number of iterations and tolerance
   maxiter = 100
   tol = 1.e-6
 
   ! Initialize coefficient matrix and right-hand side vector
   print *, "Enter the coefficient matrix: "
   do i = 1, n
       do j = 1, n
           read *, A(i,j)
       end do
   end do
   print *, "Enter the right-hand side vector: "
   do i = 1, n
       read *, b(i)
   end do
 
   ! Initialize solution vector to zero
   x = 0.0
 
   ! Start Jacobi method iteration
   iter = 0
   error = tol + 1.0
 
   do while ((iter < maxiter) .and. (error > tol))
       iter = iter + 1
 
       ! Calculate temporary solution vector
       do i = 1, n
           xnew(i) = b(i)
           do j = 1, n
               if (i /= j) then
                   xnew(i) = xnew(i) - A(i,j)*x(j)
               end if
           end do
           xnew(i) = xnew(i)/A(i,i)
       end do
 
       ! Calculate error
       error = 0.0
       do i = 1, n
           error = error + abs(xnew(i) - x(i))
       end do
 
       ! Update solution vector
       x = xnew
 
   end do
 
   ! Print solution vector
   print *, "The solution is:"
   do i = 1, n
       print *, "x(",i,") = ", x(i)
   end do
 
end program Jacobi