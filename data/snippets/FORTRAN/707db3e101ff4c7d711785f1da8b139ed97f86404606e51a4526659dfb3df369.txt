SUBROUTINE QP_SOLVER(A, B, C, D, E)
! This subroutine takes in matrices A, B, C, D, and E, and solves the quadratic programming problem using Fortran 90
! A: nxn matrix
! B: 1xn vector
! C: scalar
! D: nx1 vector
! E: scalar
USE, INTRINSIC :: ISO_FORTRAN_ENV, ONLY: REAL64 ! Import precision module
IMPLICIT NONE ! Explicitly declare all variables
INTEGER, INTENT(IN) :: N ! Size of matrices
REAL(REAL64), DIMENSION(N,N), INTENT(IN) :: A ! Matrix A
REAL(REAL64), DIMENSION(N), INTENT(IN) :: B, D ! Vectors B and D
REAL(REAL64), INTENT(IN) :: C, E ! Scalars C and E
REAL(REAL64), DIMENSION(N) :: X ! Solution vector
REAL(REAL64), DIMENSION(N,N) :: H, L, U ! Matrices for solution
INTEGER :: INFO ! Error flag
! Initialize matrices
X = 0.0_REAL64
H = TRANSPOSE(A) ! Transpose of A
L = MATMUL(H, A) + C*IDENTITY(N, REAL64) ! L matrix for solution
U = MATMUL(H, B) - D ! U matrix for solution
! Use LAPACK library to solve system of equations
CALL DPOSV('U', N, 1, L, N, U, N, INFO)
! Check for error
IF (INFO == 0) THEN
! If no error, store solution in X vector
X = U
ELSE
PRINT *, 'Error in solving QP problem.'
END IF
END SUBROUTINE QP_SOLVER