PROGRAM NewtonRaphsonSubroutine
! This is a program that implements the Newton-Raphson method
! for finding the root of a function.

IMPLICIT NONE

INTEGER :: i, MAX_ITER
REAL :: x0, x1, f, fp, TOL

! Define the function to find the root of.
! Here, we are using the function f(x) = x^2 - 4.

REAL FUNCTION function(x)
  REAL, INTENT(IN) :: x
  function = x**2 - 4
END FUNCTION function

! Define the derivative of the function.
! Here, we are using the derivative f'(x) = 2x.

REAL FUNCTION derivative(x)
  REAL, INTENT(IN) :: x
  derivative = 2*x
END FUNCTION derivative

! Initialize the variables for the subroutine.
! x0 is the initial guess, MAX_ITER is the maximum number of iterations,
! TOL is the desired tolerance for the root.

x0 = 1.0
MAX_ITER = 50
TOL = 0.0001

! Call the subroutine for finding the root of the function.
CALL NewtonRaphson(x0, MAX_ITER, TOL)

!

! Define the Newton-Raphson subroutine.
SUBROUTINE NewtonRaphson(x0, MAX_ITER, TOL)
  REAL, INTENT(IN) :: x0, TOL
  INTEGER, INTENT(IN) :: MAX_ITER
  REAL :: f, fp, x1
  INTEGER :: i

  ! Loop through the maximum number of iterations.
  DO i = 1, MAX_ITER
    ! Calculate the value of the function and its derivative at x0.
    f = function(x0)
    fp = derivative(x0)

    ! Calculate the new value of x1 using the Newton-Raphson formula.
    x1 = x0 - f/fp

    ! Check if the absolute difference between x0 and x1 is within the tolerance.
    IF (ABS(x1 - x0) < TOL) EXIT

    ! Otherwise, set x0 to the new value of x1 and continue looping.
    x0 = x1
  END DO

  ! Output the final estimated root.
  WRITE(*, '(A, F8.4)') 'The estimated root is: ', x1

END SUBROUTINE NewtonRaphson

! end program NewtonRaphsonSubroutine
END PROGRAM NewtonRaphsonSubroutine