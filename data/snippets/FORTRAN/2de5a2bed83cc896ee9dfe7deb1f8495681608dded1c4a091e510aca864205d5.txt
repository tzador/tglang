! This code snippet performs a Newton-Raphson iteration to solve for the root of a function

program Newton_Raphson

! Define variables
    real :: x_old, x_new, fx, dfdx, tol ! x_old: previous Guess, x_new: New guess, fx: current value of function, dfdx: Derivative of function at current value, tol: Tolerance for error
    real :: a, b, c, d ! Coefficients for the function: ax^3 + bx^2 + cx + d = 0
    integer :: iterations, max_iters ! iterations: number of iterations completed, max_iters: maximum allowed iterations

! Initialize variables
    x_old = 0.5 ! starting guess for root
    tol = 1E-6 ! tolerance set to 10^-6
    max_iters = 50 ! maximum allowed iterations

! Function to solve for
    fx = a*x_old**3 + b*x_old**2 + c*x_old + d ! f(x)
    dfdx = 3*a*x_old**2 + 2*b*x_old + c ! f'(x)

! Begin iteration loop
    do while (abs(fx) > tol) ! loop until function value is sufficiently close to zero
        x_new = x_old - (fx/dfdx) ! Newton-Raphson formula for updating guess
        x_old = x_new ! update previous guess
        fx = a*x_old**3 + b*x_old**2 + c*x_old + d ! re-calculate function value with updated guess
        dfdx = 3*a*x_old**2 + 2*b*x_old + c ! re-calculate derivative with updated guess
        iterations = iterations + 1 ! update number of iterations completed
        if (iterations > max_iters) then ! check if maximum allowed iterations has been reached
            print*, "Maximum number of iterations reached"
            exit ! stop program
        end if
    end do

! Print results
    print*, "Root found at x = ", x_old ! print final value of x_old, which should be a root of the function
    print*, "Iterations completed: ", iterations ! print number of iterations required to find the root
    print*, "Function value at root: ", a*x_old**3 + b*x_old**2 + c*x_old + d ! print function value at the root, should be close to zero

end program Newton_Raphson