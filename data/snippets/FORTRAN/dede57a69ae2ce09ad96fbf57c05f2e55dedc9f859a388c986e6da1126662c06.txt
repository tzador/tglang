subroutine NewtonRaphson(x0, tol, max_iters)

        ! This subroutine implements the Newton-Raphson method to find the
        ! root of a given function f(x). The initial guess is denoted by x0,
        ! the tolerance is tol and the maximum number of iterations is given
        ! by max_iters.

        implicit none

        integer, parameter :: dp = selected_real_kind(15,307)
        real(dp) :: x0, xn, fxn, dfxn
        real(dp) :: tol
        integer :: i, max_iters
        
        ! Initial guess
        xn = x0
        ! Maximum number of iterations
        do i=1, max_iters
            ! Function value at current iteration
            fxn = f(xn)
            ! Derivative value at current iteration
            dfxn = df(xn)
            ! Check if convergence criteria is met
            if (abs(fxn) < tol) then
                ! Print final root and number of iterations
                write(*,*) 'Root found: ', xn
                write(*,*) 'Number of iterations: ', i
                return
            end if
            ! Update root estimate using Newton-Raphson method
            xn = xn - fxn/dfxn
        end do
        
        ! If maximum number of iterations is reached without convergence, print error message
        write(*,*) 'Error: Maximum number of iterations reached without convergence'
        
        contains
            function f(x)
            ! This function calculates and returns the value of the given function f(x)
            implicit none
            real(dp), intent(in) :: x
            f = x**3 - 2*x + 1
            end function f
            
            function df(x)
            ! This function calculates and returns the value of the derivative of the given function f(x)
            implicit none
            real(dp), intent(in) :: x
            df = 3*x**2 - 2
            end function df
            
        end subroutine NewtonRaphson