subroutine numerical_integration
      implicit none
      integer :: num_points, i
      real :: lower_limit, upper_limit, delta_x, area, sum

      num_points = 100 ! number of points to use for integration
      lower_limit = 0.0 ! lower limit of integration
      upper_limit = 1.0 ! upper limit of integration
      delta_x = (upper_limit - lower_limit) /num_points ! calculate delta x
      area = 0.0 ! initialize variable for storing area
      sum = 0.0 ! initialize variable for storing sum

      do i = 0, num_points-1 ! loop over the specified number of points
            area = area + delta_x * (exp(i*delta_x) + exp(i*delta_x+delta_x)) ! calculate trapezoidal area
            sum = sum + (exp(i*delta_x) + exp(i*delta_x+delta_x)) ! calculate sum of function values
      end do

      area = 0.5 * (area - (exp(lower_limit) + exp(upper_limit))) * delta_x ! adjust for endpoint function values
      sum = 0.5 * (sum - (exp(lower_limit) + exp(upper_limit))) * delta_x ! adjust for endpoint function values

      write(*, *) "The approximate area under the curve is ", area ! print the calculated area
      write(*, *) "The approximate sum of function values is ", sum ! print the calculated sum
end subroutine numerical_integration