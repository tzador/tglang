! This code snippet calculates the inverse of a matrix using LU decomposition
program inverse_matrix
  implicit none
  integer :: n, i, j, k, pivot_idx, temp_neg, temp_pos
  real :: pivot, l(n,n), u(n,n), a(n,n), b(n,n), x(n,n), ident(n,n)

  ! Enter the size of the matrix
  print*, "Enter the size of the matrix: "
  read*, n

  ! Initializing the identity matrix
  do i = 1, n
    do j = 1, n
      ident(i,j) = 1.0
    end do
  end do

  ! Printing the identity matrix
  print*, "Identity matrix:"
  do i = 1, n
    do j = 1, n
      print*, ident(i,j)
    end do
  end do

  ! Printing a blank line
  print*, ""

  ! Input the values of the matrix
  print*, "Enter the values of the matrix: "
  do i = 1, n
    do j = 1, n
      read*, a(i,j)
    end do
  end do

  ! LU decomposition
  do k = 1, n-1
    pivot = a(k,k)
    pivot_idx = k
    if (pivot < 0) pivot_idx = n

    ! Swapping rows if pivot is negative
    if (pivot_idx /= k) then
      do j = 1, n
        temp_neg = a(k,j)
        temp_pos = a(pivot_idx,j)
        a(k,j) = temp_pos
        a(pivot_idx,j) = temp_neg
      end do

      do j = 1, n
        temp_neg = ident(k,j)
        temp_pos = ident(pivot_idx,j)
        ident(k,j) = temp_pos
        ident(pivot_idx,j) = temp_neg
      end do
    end if

    do i = k+1, n
      l(i,k) = a(i,k) / pivot
      u(k,i) = a(k,i)
      do j = k+1, n
        a(i,j) = a(i,j) - l(i,k)*u(k,j)
      end do
    end do
  end do

  ! Last pivot for n x n matrix
  pivot = a(n,n)
  u(n,n) = pivot
  l(n,n) = ident(n,n)

  ! Backward substitution
  do i = n-1, 1, -1
    do j = n, i+1, -1
      x(i,j) = a(i,j)
      b(i,j) = x(i,j)
    end do
    do j = i+1, n
      x(i,i) = l(i,i)*b(i,j)
      do k = i+1, n
        x(i,i) = x(i,i) - l(i,k)*b(k,j)
      end do
      x(i,i) = x(i,i) / u(i,i)
    end do
  end do

  ! Printing the inverted matrix
  print*, "Inverse of the matrix is: "
  print*, ""
  do i = 1, n
    do j = 1, n
      print*, x(i,j)
    end do
  end do

end program inverse_matrix