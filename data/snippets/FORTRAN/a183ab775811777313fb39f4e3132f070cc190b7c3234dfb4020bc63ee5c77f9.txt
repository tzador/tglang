PROGRAM newton_damped
  IMPLICIT NONE
  
  INTEGER :: i, iter, n
  REAL :: x, y, f, df, x_new
  
  WRITE(*,*) 'Enter initial guess of root (x): '
  READ(*,*) x
  
  WRITE(*,*) 'Enter number of iterations (iter): '
  READ(*,*) iter
  
  WRITE(*,*) 'Enter number of function evaluations (n): '
  READ(*,*) n
  
  DO i = 1, iter
     y = func(x)  !evaluate function at current guess
     f = y        !initialize f to current function value
     df = 0.0     !initialize derivative to 0
     
     !compute derivative using central difference formula
     IF (i > 1) df = (func(x+1.0e-8)-func(x-1.0e-8)) / (2.0e-8)
     
     x_new = x - y/df                     !new estimate for root
     WRITE(*,*) 'x_new =', x_new          !print new estimate
     y = func(x_new)                      !evaluate function at new estimate
     x = x - y/df + (nabs(y)/nabs(f))*y   !compute damped step
     
     IF (nabs(y) < 1.0e-8) THEN            !check convergence
        WRITE(*,*) 'Root found after', i, 'iterations.'  !print output
        EXIT
     END IF
  END DO
CONTAINS
  
  FUNCTION func(x)
    IMPLICIT NONE
    REAL :: func, x
    
    !define function to find root of here (e.g. x**2 - 2*x)
    func = x**2 - 2*x
  END FUNCTION
END PROGRAM newton_damped