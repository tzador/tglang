* Program to calculate the integral of a function using Simpson's rule

 real*8 :: a, b            ! declaring variables a and b as double precision real numbers
 integer :: n              ! declaring variable n as an integer
 real*8 :: h, sum, x, int  ! declaring h, sum, x and int as double precision real numbers

 h = (b - a) / n           ! calculating step size using the formula h = (b - a) / n

 sum = f(a) + f(b)         ! calculating initial sum value by evaluating function at end points

 do i = 1, n/2 - 1         ! loop for calculating sum of odd-indexed terms
    x = a + (2 * i * h)    ! calculating x value for odd terms
    sum = sum + 4 * f(x)   ! adding 4 * f(x) to sum
 end do

 do i = 1, n/2            ! loop for calculating sum of even-indexed terms
    x = a + ((2 * i - 1) * h)    ! calculating x value for even terms
    sum = sum + 2 * f(x)   ! adding 2 * f(x) to sum
 end do

 int = (h / 3) * sum       ! calculating final integral value using Simpson's rule

 print *, "The integral of the given function is:", int   ! printing the result

 contains

    ! function to calculate the given function
    function f(x)
        real*8 :: x, result   ! declaring x and result as double precision real numbers
        result = exp(-x**2)   ! evaluating function at x
    end function

 end program