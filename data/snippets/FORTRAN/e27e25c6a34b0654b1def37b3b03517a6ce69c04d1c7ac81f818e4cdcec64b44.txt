subroutine bisection(a,b,nmax,epsilon,x)
  
  real :: a, b, epsilon
  integer :: nmax, n, sign
  real :: m, x
  integer :: count

  ! Define a function that we want to find a root for
  real function func(y)
    real :: y
    func = y**2 - 4  ! f(y) = y^2 - 4
  end function

  ! Check the sign of the function at the two endpoints
  sign = func(a) * func(b)

  ! If the signs are equal, then there is no root within the interval
  if(sign >=0) then
    write(*,*) "Error! No root within interval."
    return
  end if

  ! Set the initial values for n (number of iterations) and m (middle point)
  n = 0
  m = (a + b) / 2.0

  ! Loop until the difference between b and a is less than epsilon or
  ! until we have reached the maximum number of iterations
  do while(abs(b-a) > epsilon .and. n < nmax)

    ! Determine if the root is on the left or right side of m
    if (sign*func(m) < 0) then
      a = m  ! Root is on the left side, so set a to m
    else
      b = m  ! Root is on the right side, so set b to m
    end if

    ! Re-calculate the middle point
    m = (a + b) / 2.0

    ! Increase the iteration count by 1
    n = n + 1

  end do

  ! If the loop has reached the maximum number of iterations
  if (n == nmax) then
    write(*,*) "Maximum number of iterations reached."
  end if

  ! Store the final value of m (the root) in the variable x
  x = m

end subroutine bisection