RECURSIVE SUBROUTINE MERGE_SORT(array, left, right)
  INTEGER, INTENT(INOUT) :: array(:)
  INTEGER, INTENT(IN) :: left, right
  INTEGER :: middle, i, j, k
  INTEGER, DIMENSION(:), ALLOCATABLE :: temp(:)
  
  ! Base case
  IF (left >= right) THEN
    RETURN
  END IF
  
  ! Find middle index
  middle = (left + right) / 2
  
  ! Recursively sort left half
  CALL MERGE_SORT(array, left, middle)
  
  ! Recursively sort right half
  CALL MERGE_SORT(array, middle + 1, right)
  
  ! Merge two sorted subarrays
  ALLOCATE(temp(left:right))
  i = left   ! Index for left subarray
  j = middle + 1   ! Index for right subarray
  k = 0   ! Index for temporary array
  
  DO WHILE (i <= middle .AND. j <= right)
    IF (array(i) < array(j)) THEN
      temp(k) = array(i)
      k = k + 1
      i = i + 1
    ELSE
      temp(k) = array(j)
      k = k + 1
      j = j + 1
    END IF
  END DO
  
  ! Copy remaining elements from left subarray
  DO WHILE (i <= middle)
    temp(k) = array(i)
    k = k + 1
    i = i + 1
  END DO
  
  ! Copy remaining elements from right subarray
  DO WHILE (j <= right)
    temp(k) = array(j)
    k = k + 1
    j = j + 1
  END DO
  
  ! Copy sorted elements back to original array
  DO i = left, right
    array(i) = temp(i - left + 1)
  END DO
  
  ! Deallocate temporary array
  DEALLOCATE(temp)
END SUBROUTINE MERGE_SORT