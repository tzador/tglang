! This program implements the Simpson's rule for numerical integration

program simpson
    implicit none
    
    ! Defining necessary variables
    real :: a, b, h, integral
    integer :: n
    real, dimension(:), allocatable :: f
    ! 'real' is used to represent floating point numbers
    ! 'integer' is used to represent whole numbers
    ! 'dimension' is used to specify the number of dimensions in an array
    ! 'allocatable' is used to allocate memory for an array at run time
    
    ! Prompt user to enter integration limits and number of segments
    write(*,*)"Enter the lower limit of integration: "
    read(*,*)a
    write(*,*)"Enter the upper limit of integration: "
    read(*,*)b
    write(*,*)"Enter the number of segments (n): "
    read(*,*)n
    
    ! Calculate the step size (h)
    h = (b-a)/n
    
    ! Dynamically allocate the 'f' array based on the number of segments
    allocate(f(0:n))
    
    ! Store values of function at the segment boundaries in 'f' array
    do i = 0, n
        x = a + i*h
        f(i) = func(x)
    end do
    
    ! Calculate the integral using Simpson's rule formula
    integral = h*(f(0) + 4*f(1) + 2*f(2) + 4*f(3) + ... + 2*f(n-2) + 4*f(n-1) + f(n))
    integral = integral/3
    
    ! Display the result
    write(*,*) "The value of the integral is: ", integral
    
    ! Deallocate the 'f' array to free up memory
    deallocate(f)
    
contains
    ! Function to calculate the value of the function to be integrated
    function func(x)
        real :: x
        func = 2*x + 1
    end function func
end program simpson