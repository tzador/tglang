SUBROUTINE interpolation(input_array, output_array, num_points, input_value, output_value)
    INTEGER, DIMENSION(:), INTENT(IN) :: input_array         ! defining input array as integer array
    REAL, DIMENSION(:), INTENT(OUT) :: output_array          ! defining output array as real array
    INTEGER, INTENT(IN) :: num_points                         ! number of points in input array
    REAL, INTENT(IN) :: input_value                           ! input value for interpolation
    REAL, INTENT(OUT) :: output_value                         ! output value from interpolation
    INTEGER :: i                                              ! integer variable for loop indexing
    REAL :: input_diff, output_diff, slope, intercept         ! variables for calculation within loop

    DO i = 1, num_points                                      ! begin loop
        input_diff = input_value - input_array(i)             ! calculate difference between input value and current input array element
        IF (input_diff .GE. -0.000001 .AND. input_diff .LE. 0.000001) THEN  ! check if input value is equal to current input array element
            output_value = output_array(i)                    ! if true, output value is equal to current output array element
            EXIT                                              ! exit loop
        ELSE
            output_diff = output_array(i+1) - output_array(i) ! calculate difference between next output array element and current output array element
            slope = output_diff / input_diff                   ! calculate slope using differences
            intercept = output_array(i) - input_array(i) * slope  ! calculate intercept using current input/output elements and slope
            output_value = input_value * slope + intercept    ! calculate output value using equation for linear interpolation
        END IF
    END DO
END SUBROUTINE