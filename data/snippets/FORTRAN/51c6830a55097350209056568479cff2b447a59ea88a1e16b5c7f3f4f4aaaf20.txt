program interpolation_methods

! This program illustrates various interpolation methods in FORTRAN

implicit none

! Declaring variables
integer :: i, j, n  ! loop counters and number of data points
real :: x(10), y(10), xs, ys   ! arrays for data points and values to be interpolated
real :: l2, l3, l4, l5, l6    ! coefficients for calculating interpolated values
integer :: choice     ! input choice from user to select interpolation method
integer :: num_value     ! number of values to be interpolated by the chosen method
real :: inter_val(100)    ! array to store interpolated values
 
! Taking input from user
print *, 'Enter the number of data points: '
read *, n

print *, 'Enter the data points in the form of x and y coordinates:'
do i = 1, n
    print *, 'x', i, ': '
    read *, x(i)
    print *, 'y', i, ': '
    read *, y(i)
end do

! Prompting user to choose interpolation method
print *, 'Select the interpolation method (enter corresponding number):'
print *, '1. Linear Interpolation'
print *, '2. Quadratic Interpolation'
print *, '3. Cubic Interpolation'
print *, '4. Quintic Interpolation'
read *, choice

! Calculating interpolated values according to chosen method
if (choice == 1) then
    print *, 'Enter the number of values to be interpolated: '
    read *, num_value

    print *, 'Enter the values of x at which y is to be interpolated:'
    do i = 1, num_value
        read *, xs
        
        ! Calculating interpolated value for xs using linear interpolation method
        l2 = (y(2)-y(1))/(x(2)-x(1))
        ys = y(1) + l2*(xs-x(1))
        
        ! Storing interpolated value in array
        inter_val(i) = ys
    end do

elseif (choice == 2) then
    print *, 'Enter the number of values to be interpolated: '
    read *, num_value

    print *, 'Enter the values of x at which y is to be interpolated:'
    do i = 1, num_value
        read *, xs
        
        ! Calculating interpolated value for xs using quadratic interpolation method
        l2 = (y(2)-y(1))/(x(2)-x(1))
        l3 = ((y(3)-y(2))/(x(3)-x(2)) - l2)/(x(3)-x(1))
        ys = y(1) + l2*(xs-x(1)) + l3*(xs-x(1))*(xs-x(2))
        
        ! Storing interpolated value in array
        inter_val(i) = ys
    end do
    
elseif (choice == 3) then
    print *, 'Enter the number of values to be interpolated: '
    read *, num_value

    print *, 'Enter the values of x at which y is to be interpolated:'
    do i = 1, num_value
        read *, xs
        
        ! Calculating interpolated value for xs using cubic interpolation method
        l2 = (y(2)-y(1))/(x(2)-x(1))
        l3 = ((y(3)-y(2))/(x(3)-x(2)) - l2)/(x(3)-x(1))
        l4 = (((y(4)-y(3))/(x(4)-x(3)) - (y(3)-y(2))/(x(3)-x(2)))/(x(4)-x(2)) - l3)/(x(4)-x(1))
        ys = y(1) + l2*(xs-x(1)) + l3*(xs-x(1))*(xs-x(2)) + l4*(xs-x(1))*(xs-x(2))*(xs-x(3))
        
        ! Storing interpolated value in array
        inter_val(i) = ys
    end do
    
elseif (choice == 4) then
    print *, 'Enter the number of values to be interpolated: '
    read *, num_value

    print *, 'Enter the values of x at which y is to be interpolated:'
    do i = 1, num_value
        read *, xs
        
        ! Calculating interpolated value for xs using quintic interpolation method
        l2 = (y(2)-y(1))/(x(2)-x(1))
        l3 = ((y(3)-y(2))/(x(3)-x(2)) - l2)/(x(3)-x(1))
        l4 = (((y(4)-y(3))/(x(4)-x(3)) - (y(3)-y(2))/(x(3)-x(2)))/(x(4)-x(2)) - l3)/(x(4)-x(1))
        l5 = ((((y(5)-y(4))/(x(5)-x(4)) - (y(4)-y(3))/(x(4)-x(3)))/(x(5)-x(3)) - (y(3)-y(2))/(x(3)-x(2)))/(x(5)-x(1)) - l4)/(x(5)-x(2))
        l6 = ((((((y(6)-y(5))/(x(6)-x(5)) - (y(5)-y(4))/(x(5)-x(4)))/(x(6)-x(4)) - ((y(4)-y(3))/(x(4)-x(3)))/(x(5)-x(3)))/(x(6)-x(3))) - l5)/(x(6)-x(2)) - l4)/(x(6)-x(1))
        ys = y(1) + l2*(xs-x(1)) + l3*(xs-x(1))*(xs-x(2)) + l4*(xs-x(1))*(xs-x(2))*(xs-x(3)) + l5*(xs-x(1))*(xs-x(2))*(xs-x(3))*(xs-x(4)) + l6*(xs-x(1))*(xs-x(2))*(xs-x(3))*(xs-x(4))*(xs-x(5))
        
        ! Storing interpolated value in array
        inter_val(i) = ys
    end do
    
else
    print *, 'Invalid choice. Please choose a number from 1 to 4.'
    stop
end if

! Outputting all interpolated values
print *, 'Interpolated values:'
do i = 1, num_value
    print *, inter_val(i)
end do

end program interpolation_methods