! Code to find the inverse of a matrix using Gauss-Jordan elimination method

program inverse_matrix
    implicit none
    integer :: N, i, j, k
    decimal(8) :: A(N,N), b(N,N), c(N,N)
    ! N is the size of the matrix, A is the input matrix, b is the identity matrix and c is the output matrix
    print*, "Enter the size of the matrix:"
    read*, N
    print*, "Enter the elements of the matrix:"
    do i=1,N ! Loop to input the matrix values
        do j=1,N
            read*, A(i,j)
            if(i==j) then ! Initializing the identity matrix
                b(i,j) = 1.0
            else
                b(i,j) = 0.0
            end if
        end do
    end do

    do k=1,N
        ! Swapping rows if the diagonal element is zero
        if (A(k,k) == 0) then
            do i=k+1,N
                if(A(i,k) /= 0) then
                    do j=1,N
                        A(k,j) = A(k,j) + A(i,j)
                        A(i,j) = A(k,j) - A(i,j)
                        A(k,j) = A(k,j) - A(i,j)
                    end do
                    do j=1,N
                        b(k,j) = b(k,j) + b(i,j)
                        b(i,j) = b(k,j) - b(i,j)
                        b(k,j) = b(k,j) - b(i,j)
                    end do
                end if
            end do
        end if

        ! Making the diagonal element 1
        b(k,k) = b(k,k)/A(k,k)
        do j=1,N
            A(k,j) = A(k,j)/A(k,k)
        end do
        do j=1,N
            if(j /= k) then
                b(k,j) = b(k,j)/A(k,k)
                do i=1,N
                    if(i /= k) then
                        A(i,j) = A(i,j) - A(i,k)*A(k,j)
                        b(i,j) = b(i,j) - b(i,k)*A(k,j)
                    end if
                end do
            end if
        end do
    end do

    ! Output the inverse matrix
    print*, "The inverse matrix is:"
    do i=1,N
        do j=1,N
            print*, b(i,j)
        end do
    end do
end program inverse_matrix