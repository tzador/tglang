SUBROUTINE MAX_CUBED(n, x, y)                     ! SUBROUTINE THAT CALCULATES THE MAXIMUM OF CUBES
    INTEGER :: n                                   ! DECLARING INTEGER VARIABLE "n"
    REAL :: x                                      ! DECLARING REAL VARIABLE "x"
    REAL :: y                                      ! DECLARING REAL VARIABLE "y"
    REAL :: cube_orig                               ! VARIABLE TO STORE ORIGINAL CUBE VALUE
    REAL :: max_cube                                ! VARIABLE TO STORE MAXIMUM CUBE VALUE
    INTEGER :: i                                    ! LOOP VARIABLE

    DO i = 1, n                                    ! LOOP THROUGH N VALUES
        if (x(i)**3 > y(i)**3) then                 ! CONDITIONAL STATEMENT TO CHECK IF X^3 > Y^3
            max_cube = x(i)**3                      ! STORE X^3 IF LARGER
        else
            max_cube = y(i)**3                      ! ELSE, STORE Y^3 IF LARGER
        end if
    END DO                                          ! END OF DO LOOP

    cube_orig = (x(1)**3 + x(n)**3) / 2             ! CALCULATE AVERAGE OF FIRST AND LAST ELEMENT
    PRINT *, "Maximum of original cubes:", cube_orig ! PRINT STATEMENT TO DISPLAY ORIGINAL CUBE VALUE

    PRINT *, "Maximum of new cubes:", max_cube      ! PRINT STATEMENT TO DISPLAY MAXIMUM CUBE VALUE

END SUBROUTINE MAX_CUBED                            ! END OF SUBROUTINE