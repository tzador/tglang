! A program to solve Laplace's equation using the finite difference method
program laplace_solve
  implicit none

  ! Define variables and arrays
  integer :: i, j ! Loop variables
  integer, parameter :: m = 100, n = 100 ! Number of grid points
  real, parameter :: L = 1.0, W = 1.0 ! Length and width of domain
  real, parameter :: dx = L / (m - 1), dy = W / (n - 1) ! Grid spacing
  real, dimension(0:m+1,0:n+1) :: u ! Solution array
  real, dimension(0:m+1,0:n+1) :: b ! Right hand side array
  real :: error_prev, error_curr, tolerance ! Error variables
  integer :: max_iter ! Maximum number of iterations

  ! Set initial values for solution and right hand side
  do i = 0, m + 1
    do j = 0, n + 1
      ! Set boundary conditions
      if (i == 0) then
        u(i,j) = 0.0 ! Left boundary
        b(i,j) = 0.0
      elseif (i == m + 1) then
        u(i,j) = 1.0 ! Right boundary
        b(i,j) = 1.0
      elseif (j == 0) then
        u(i,j) = 0.0 ! Bottom boundary
        b(i,j) = 0.0
      elseif (j == n + 1) then
        u(i,j) = 1.0 ! Top boundary
        b(i,j) = 1.0
      else
        u(i,j) = 0.5 ! Initial guess for interior points
        b(i,j) = 0.0
      end if
    end do
  end do

  ! Set convergence criteria
  error_prev = 1.0
  tolerance = 1.0e-6
  max_iter = 10000

  ! Begin iteration loop
  do while (error_prev > tolerance)
    error_curr = 0.0

    ! Perform one iteration over all interior points
    do i = 1, m
      do j = 1, n
        u(i,j) = (u(i-1,j) + u(i+1,j) + u(i,j-1) + u(i,j+1)) / 4.0
        error_curr = max(error_curr, abs(b(i,j) - u(i,j))) ! Calculate current error
      end do
    end do

    ! Check for convergence and update error
    if (error_prev > error_curr) then
      error_prev = error_curr
    else
      exit ! Exit loop if error does not decrease
    end if

  end do

  ! Print results
  print *, "Solution:"
  do i = 1, m
    do j = 1, n
      print "(3f8.4)", u(i,j)
    end do
  end do

end program laplace_solve