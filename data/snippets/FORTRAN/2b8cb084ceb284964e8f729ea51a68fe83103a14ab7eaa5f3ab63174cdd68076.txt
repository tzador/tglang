PROGRAM bisection_method
  implicit none
  
  real :: a, b, x, f_a, f_b, f_x, tolerance ! variables to store user inputs
  real :: upper_bound, lower_bound ! variables to store the upper and lower bounds of the interval
  real :: max_iterations ! variable to store the maximum number of iterations allowed
  
  integer :: i ! counter variable for iterations
  
  ! function to be solved
  real function func(x)
    real :: x
    func = EXP(x) - x**3 + x
  end function func
  
  ! subroutine to perform bisection method
  subroutine bisection(a, b, x, f_a, f_b, f_x, tolerance, upper_bound, lower_bound, max_iterations)
    ! inputs:
    ! a, b - interval bounds
    ! tolerance - tolerance value for convergence
    ! max_iterations - maximum number of iterations allowed
    
    ! outputs:
    ! x - root of the function
    ! f_a, f_b, f_x - function values at points a, b, and x
    
    ! subroutine variables
    real :: c, f_c ! variables to store the values at the midpoint c and function value at c
    
    f_a = func(a) ! calculate function value at point a
    f_b = func(b) ! calculate function value at point b
    
    do i = 1, max_iterations ! loop to perform bisection method
      c = (a + b) / 2.0 ! calculate midpoint
      
      f_c = func(c) ! calculate function value at midpoint
      
      if (f_a * f_c < 0.0) then ! check if root lies between a and c
        b = c
        f_b = f_c
      else ! root lies between c and b
        a = c
        f_a = f_c
      end if
      
      x = (a + b) / 2.0 ! update root value
      f_x = func(x) ! calculate function value at updated root
      
      ! check for convergence
      if (abs(f_x) < tolerance) exit ! exit loop if convergence is met
    end do
    
    ! store the final values
    upper_bound = b
    lower_bound = a
  end subroutine bisection
  
  ! main program
  print *, "Enter the interval bounds:"
  read *, a, b ! accept interval bounds from user
  
  print *, "Enter the tolerance value:"
  read *, tolerance ! accept tolerance value from user
  
  print *, "Enter the maximum number of iterations allowed:"
  read *, max_iterations ! accept maximum number of iterations allowed from user
  
  call bisection(a, b, x, f_a, f_b, f_x, tolerance, upper_bound, lower_bound, max_iterations) ! call subroutine to perform bisection method
  
  ! print the results
  print *, "Root of the function is:", x
  print *, "Function value at the root is:", f_x
  print *, "Upper bound of the root is:", upper_bound
  print *, "Lower bound of the root is:", lower_bound
  
END PROGRAM bisection_method