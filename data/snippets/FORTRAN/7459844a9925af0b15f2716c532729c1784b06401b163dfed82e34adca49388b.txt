program test
! This program calculates the root of a function using the bisection method
implicit none

integer :: max_iter, iter, sign
real :: x_lower, x_upper, x_mid, f_lower, f_upper, f_mid
real, parameter :: tolerance = 1e-6 ! Set the tolerance level
real, parameter :: target = 0 ! Set the target value for the root
real, parameter :: a = 1, b = 10 ! Set the initial bounds for x
max_iter = 100 ! Set the maximum number of iterations

! Calculate the values of the function at the initial bounds
f_lower = a**3 + 2*a - 4 ! Example function: f(x) = x^3 + 2x - 4
f_upper = b**3 + 2*b - 4

! Check for the sign of the function at the initial bounds
if (f_lower * f_upper < 0) then
    sign = 1 ! If the signs are different, there is at least one root
else
    print*, 'ERROR: No root exists between the initial bounds'
    stop
end if

! Initialize the iteration counter and set the initial midpoint
iter = 0
x_mid = (x_lower + x_upper) / 2

! Begin the bisection method
do while (abs(f_mid) > tolerance .and. iter < max_iter)
    if (f_mid * f_lower < 0) then ! If the sign of func(x_mid) is the same as func(x_lower)
        x_upper = x_mid ! Set x_upper to x_mid
    else
        x_lower = x_mid ! Set x_lower to x_mid
    end if

    ! Calculate the new midpoint and the value of the function
    x_mid = (x_lower + x_upper) / 2
    f_mid = x_mid**3 + 2*x_mid - 4

    iter = iter + 1 ! Increment the iteration counter
end do

! Check for convergence and print results
if (iter == max_iter) then
    print*, 'ERROR: Maximum iterations reached without convergence'
    stop
elseif (iter == 0) then
    print*, 'ERROR: No iterations performed'
    stop
else
    print*, 'Root:', x_mid ! Print the calculated root
end if

end program test