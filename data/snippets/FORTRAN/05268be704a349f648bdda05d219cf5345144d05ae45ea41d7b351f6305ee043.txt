PROGRAM simulation  // start of program
  IMPLICIT NONE  // declare no implicit variables

  INTEGER :: i, j, n  // declare integer variables i, j, n

  REAL :: delta_x, delta_t, lambda, u_0, v_0, u, v, time  // declare real variables delta_x, delta_t, lambda, u_0, v_0, u, v, time

  REAL, DIMENSION(100,100) :: u_timestep  // declare real array variable of size 100x100, representing the value of u at each timestep

  // input parameters
  delta_x = 0.01  // value of delta_x - spatial step size
  delta_t = 0.001  // value of delta_t - time step size
  lambda = 1.2  // value of lambda - a physical constant
  u_0 = 1.0  // value of u_0 - initial condition for u
  v_0 = 0.5  // value of v_0 - initial condition for v
  n = 100  // value of n - number of timesteps
  
  // initial condition for u at first timestep
  DO i = 1, 100
    DO j = 1, 100
      u_timestep(i,j) = u_0  // set all values of u_timestep array to u_0 
    END DO
  END DO
  
  // main loop over timesteps
  DO i = 2, n // start at second timestep
    time = (i-1)*delta_t  // calculate time at current timestep
    DO j = 2, 99 // skip first and last elements of u_timestep array 
      // calculate new values for u and v using finite difference method
      u = u_timestep(i-1,j) + lambda * (u_timestep(i-1,j-1) - 2*u_timestep(i-1,j) + u_timestep(i-1,j+1)) * delta_t / (delta_x**2) 
      v = v_0 * u_timestep(i-1,j) * delta_t / delta_x
      
      // update value of u at current timestep in u_timestep array
      u_timestep(i,j) = u
      
      // update value of v at current timestep in u_timestep array 
      u_timestep(i,j+1) = u_timestep(i,j+1) + v 
    END DO
    
    // enforce boundary conditions for u 
    u_timestep(i,1) = u_0  // u at first element remains constant
    u_timestep(i,100) = u_timestep(i,99)  // extrapolate u at last element
    
    // print results for current timestep 
    PRINT *, "At time= ", time, "u = ", u, ", v = ", v 
  END DO // end of main loop

END PROGRAM simulation