PROGRAM Quicksort
    IMPLICIT NONE
    INTEGER :: entry(1000), size, i
    INTEGER :: pivot
    INTEGER :: left(-1000: -1), right(1: 1000), stack_loc(100)
    INTEGER :: stack_top, stack_upper, stack_lower
    
    ! ask for user input for size of array
    WRITE(*,*) 'Enter size of array (max 1000):'
    READ(*,*) size
    
    ! ask for user input for elements of array
    WRITE(*,*) 'Enter elements of array:'
    DO i = 1, size
      READ(*,*) entry(i)
    END DO
    
    ! initial stack values
    stack_top = 1
    stack_lower = -1000
    stack_upper = 1000
    stack_loc(1) = stack_lower
    stack_loc(2) = stack_upper
    
    ! start of iteration
    DO WHILE (stack_top > 0)
      ! pop values from stack
      stack_upper = stack_loc(stack_top)
      stack_lower = stack_loc(stack_top - 1)
      stack_top = stack_top - 2
      
      ! check if sub array has more than one element
      IF (stack_upper - stack_lower > 1) THEN
        ! set pivot to first element of sub array
        pivot = entry(stack_lower)
        
        ! use two pointers to partition sub array
        DO WHILE (stack_lower < stack_upper)
          ! move left pointer until it finds a value greater than pivot
          DO WHILE (entry(stack_lower) <= pivot .AND. stack_lower < stack_upper)
            stack_lower = stack_lower + 1
          END DO
          
          ! move right pointer until it finds a value less than pivot
          DO WHILE (entry(stack_upper) > pivot)
            stack_upper = stack_upper - 1
          END DO
          
          ! swap values at left and right pointers
          IF (stack_lower < stack_upper) THEN
            temp = entry(stack_lower)
            entry(stack_lower) = entry(stack_upper)
            entry(stack_upper) = temp
          END IF
        END DO
        
        ! set pivot in correct position in sub array
        entry(stack_loc(stack_top) + 1) = entry(stack_upper)
        entry(stack_upper) = pivot
        
        ! push sub arrays onto stack
        IF (stack_upper - 1 - stack_lower > 0) THEN
          stack_top = stack_top + 2
          stack_loc(stack_top - 1) = stack_lower
          stack_loc(stack_top) = stack_upper - 1
        END IF
        
        IF (stack_upper + 1 - stack_upper > 0) THEN
          stack_top = stack_top + 2
          stack_loc(stack_top - 1) = stack_upper + 1
          stack_loc(stack_top) = stack_upper
        END IF
      END IF
    END DO
    
    ! print sorted array
    WRITE(*,*) 'Sorted array:'
    DO i = 1, size
      WRITE(*,*) entry(i)
    END DO
  END PROGRAM Quicksort