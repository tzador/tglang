! This code snippet generates a random matrix and performs matrix multiplication on it
program matrixMult
    implicit none

    ! Define variables
    integer :: n, m, p ! dimensions of matrices
    integer :: i, j, k ! loop variables
    real, allocatable :: A(:,:), B(:,:), C(:,:) ! matrices to be multiplied
    real :: u ! random number between 0 and 1
    
    ! Prompt user for matrix dimensions
    print *, "Enter number of rows in matrix A:"
    read *, n
    print *, "Enter number of columns in matrix A:"
    read *, m
    print *, "Enter number of columns in matrix B:"
    read *, p
    
    ! Allocate memory for matrices
    allocate(A(n,m), B(m,p), C(n,p))
    
    ! Generate random matrix A
    print *, "Matrix A:"
    do i = 1, n
        do j = 1, m
            call random_number(u)
            A(i,j) = 10 * u ! scale random number between 0 and 1 to 0 and 10
            print *, A(i,j)
        end do
    end do
    
    ! Generate random matrix B
    print *, "Matrix B:"
    do i = 1, m
        do j = 1, p
            call random_number(u)
            B(i,j) = 10 * u ! scale random number between 0 and 1 to 0 and 10
            print *, B(i,j)
        end do
    end do
    
    ! Perform matrix multiplication
    print *, "Matrix C = A * B:"
    do i = 1, n
        do j = 1, p
            C(i,j) = 0 ! initialize C(i,j) to 0
            do k = 1, m
                C(i,j) = C(i,j) + A(i,k) * B(k,j) ! perform dot product
            end do
        end do
    end do
    
    ! Print result
    do i = 1, n
        do j = 1, p
            print *, C(i,j)
        end do
    end do
    
    ! Deallocate memory
    deallocate(A, B, C)
    
end program matrixMult