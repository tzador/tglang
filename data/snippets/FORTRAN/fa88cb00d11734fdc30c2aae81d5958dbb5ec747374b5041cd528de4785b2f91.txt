program complex_integration
  implicit none
  
  ! This program calculates the complex integration of a function using Simpson's rule.
  
  integer, parameter :: DP = selected_real_kind(14, 300)  ! specifies double precision
  integer :: n   ! number of intervals
  real(DP) :: a, b  ! limits of integration
  real(DP) :: h, z, integral ! variables for calculating integration
  real(DP), allocatable :: func(:)  ! array containing function values
  
  ! prompt user for inputs
  print *, "Enter number of intervals:"
  read *, n
  print *, "Enter lower and upper limits of integration:"
  read *, a, b
  
  ! calculate step size
  h = (b - a)/n
  
  ! allocate memory for function values
  allocate(func(n+1))
  
  ! calculate function values
  do i = 0, n
    z = a + i*h
    func(i+1) = f(z)
  end do
  
  ! calculate complex integration using Simpson's rule
  integral = (h/3)*(func(1) + &  ! this line uses the continuation character to span multiple lines
             4*sum(func(2:n:2)) +  ! calculates sum of terms at even indices
             2*sum(func(3:n:2)) +  ! calculates sum of terms at odd indices, excluding last term
             func(n+1))  ! adds last term
  
  ! print result
  print *, "The complex integration of the function is:"
  print *, integral
  
  contains
  
    ! function for the function to be integrated, define your own function here
    function f(x)
      implicit none
      real(DP), intent(in) :: x  ! input argument
      real(DP) :: f  ! function value
      
      ! function definition
      f = exp(x)/(x**2 + 1)
      
    end function f
  
end program complex_integration