C This program uses the bisection method to find the root of a user-defined function
      INTEGER :: N, I
      REAL*8 :: X(100), FA, FB, FC, DUMMY, A, B, C, TOL
      print*, "Enter the function f(x) in the form of 'f(x) = ...'"
      read*, DUMMY, DUMMY    ! Dummy reads in the 'f(x) =' portion of input
      read*, A, DUMMY, B     ! A and B are the initial endpoints of the interval
      print*, "Enter the tolerance for the root:"
      read*, TOL             ! Tolerance for the root
      print*, "Enter the maximum number of iterations:"
      read*, N               ! Maximum number of iterations

C Initialize array with initial guesses
      X(1) = A
      X(2) = B

C Start iterations
      DO I = 1, N
         FA = F(X(I))           ! Function value at first guess
         FB = F(X(I + 1))       ! Function value at second guess
         FC = (FA + FB) / 2.0   ! Function value at midpoint

         IF (ABS(FC) < TOL) THEN    ! Check for convergence
            print*, "Root found at x = ", X(I)    ! Print root
            STOP
         ELSE IF (FC*FA < 0) THEN   ! Root is between first guess and midpoint
            X(I + 2) = X(I + 1)     ! Set second guess to midpoint
            X(I + 1) = X(I)         ! Set first guess to previous second guess
         ELSE                       ! Root is between second guess and endpoint
            X(I + 2) = X(I)         ! Set second guess to previous first guess
         END IF
      END DO

C If loop reaches maximum number of iterations, print error message
      print*, "Root was not found within the maximum number of iterations."
      STOP

C Function f(x) must be defined outside of the main program
      FUNCTION F(X)
         REAL*8 :: X
         F = EXP(-X) - X     ! Example function f(x) = e^(-x) - x
      END FUNCTION F