program linear_system

    implicit none                        ! Declare all variables
    integer :: n, i, j, k                ! n is matrix size, i and j are loop counters, k is pivot index
    real :: sum, pivot, multiplier       ! sum is temporary storage for current row sum, pivot is pivot value, multiplier is coefficient for row subtraction
    real, allocatable :: a(:,:), b(:), x(:) ! Declare arrays for matrix A, vector b, and solution vector x

    ! Read matrix size from user
    print *, "Enter the size of the matrix:" ! Prompt user for input
    read *, n                                 ! Read in matrix size

    ! Allocate memory for arrays
    allocate(a(n,n), b(n), x(n))

    ! Read in matrix A from user
    print *, "Enter the elements of the matrix A:" ! Prompt user for input
    do i = 1, n                                  ! Loop over rows
        do j = 1, n                              ! Loop over columns
            read *, a(i,j)                        ! Read in current element
        end do
    end do

    ! Read in vector b from user
    print *, "Enter the elements of the vector b:" ! Prompt user for input
    do i = 1, n                                    ! Loop over elements
        read *, b(i)                               ! Read in current element
    end do

    ! Gauss elimination with partial pivoting
    do k = 1, n - 1                       ! Loop over pivot rows
        pivot = a(k,k)                    ! Set pivot to current diagonal element
        do i = k + 1, n                    ! Loop over rows below pivot
            multiplier = a(i,k) / pivot   ! Calculate coefficient for row subtraction
            do j = k + 1, n                ! Loop over columns
                a(i,j) = a(i,j) - multiplier * a(k,j) ! Subtract pivot row from current row
            end do
            b(i) = b(i) - multiplier * b(k) ! Subtract pivot row from vector b
        end do
    end do

    ! Back substitution
    x(n) = b(n) / a(n,n)                   ! Set last solution variable
    do i = n - 1, 1, -1                    ! Loop backwards over rows
        sum = 0.0                          ! Reset sum
        do j = i + 1, n                    ! Loop over columns to the right
            sum = sum + a(i,j) * x(j)      ! Add current element to sum
        end do
        x(i) = (b(i) - sum) / a(i,i)       ! Calculate current solution variable
    end do

    ! Print solution
    print *, "Solution vector x:"           ! Print header
    do i = 1, n                             ! Loop over elements
        print "(F8.3)", x(i)                ! Print element with 8 decimal places
    end do

    ! Deallocate memory
    deallocate(a, b, x)

end program linear_system     ! End program