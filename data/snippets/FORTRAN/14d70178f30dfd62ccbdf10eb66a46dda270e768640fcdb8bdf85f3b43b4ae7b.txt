PROGRAM polynomial_solver
! This program solves a polynomial equation using the bisection method
IMPLICIT NONE
! Declare variables
REAL :: a, b, tolerance, c, fa, fb, fc
INTEGER :: max_iterations, iteration_count
! Set initial values for a, b
a = 0.0
b = 1.0
! Set desired tolerance and maximum number of iterations
tolerance = 0.0001
max_iterations = 1000
! Calculate f(a), f(b)
fa = fun(a)
fb = fun(b)
! Check for initial guesses on opposite sides of zero
IF (fa * fb > 0) THEN
    PRINT*, "Error: Initial guesses do not bracket the root"
ELSE
    ! Loop until desired tolerance is achieved or maximum iterations is reached
    DO WHILE (ABS(b-a) > tolerance .AND. iteration_count < max_iterations)
        c = (a + b) / 2.0
        fc = fun(c)
        ! Check for root convergence
        IF ((ABS(fc) < tolerance) .OR. (ABS(fc) > ABS(fa) .AND. ABS(fc) > ABS(fb))) THEN
            ! Root has converged, set new bounds to c
            a = c
            b = c
        ELSE IF (fc * fa < 0) THEN
            b = c
        ELSE IF (fc * fb < 0) THEN
            a = c
        END IF
        ! Update iteration count
        iteration_count = iteration_count + 1
    END DO
    ! Check if root was found
    IF (ABS(fc) < tolerance) THEN
        PRINT*, "Root found at x = ", c
    ELSE
        PRINT*, "Error: Maximum iterations reached"
    END IF
END IF
CONTAINS
! Define function to solve
FUNCTION fun(x)
    IMPLICIT NONE
    REAL, INTENT(IN) :: x
    REAL, SAVE :: fun
    fun = x**3 - 2.0*x - 5.0
END FUNCTION fun
END PROGRAM polynomial_solver