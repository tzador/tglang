! This is a FORTRAN code snippet that performs a Monte Carlo Simulation using the Metropolis algorithm.

program monte_carlo
    implicit none
    integer :: i, j, k, n       ! initializing integer variables for loop indices and number of simulations
    integer, parameter :: niter = 1000, nruns = 10000     ! setting parameters for number of iterations and runs
    
    real :: energy, new_energy, delta_energy      ! initializing real variables for energy calculations
    real, dimension(3) :: r, r_trial       ! initializing arrays for position vectors
    real, dimension(niter) :: energies     ! array to store energies of each iteration
    
    real, parameter :: k_B = 1.380649e-23, T = 300.0     ! setting physical constants, temperature (in Kelvins)
    
    ! Initializing seed for random number generation
    call srand(123456)
    
    ! Setting initial position of particle at origin
    r = 0.0
    
    ! Loop to perform multiple runs of simulation
    do i = 1, nruns
        
        ! Performing niter iterations for each run
        do j = 1, niter
            ! Generating a random displacement for the particle
            r_trial = r + (rand() - 0.5) * 0.1
            
            ! Calculating energy of current position
            energy = -0.5 * (r(1)**2 + r(2)**2 + r(3)**2)
            
            ! Calculating energy of trial position
            new_energy = -0.5 * (r_trial(1)**2 + r_trial(2)**2 + r_trial(3)**2)
            
            ! Calculating difference in energy
            delta_energy = new_energy - energy
            
            ! Determining whether to accept or reject the trial position
            if (delta_energy < 0.0) then
                r = r_trial        ! if trial position has lower energy, accept the move
            else
                ! if trial position has higher energy, generate a random number between 0 and 1
                real :: prob = rand()
                
                ! calculating the acceptance probability based on the difference in energy and temperature
                real :: acceptance_prob = exp(-delta_energy / (k_B * T))
                
                if (prob < acceptance_prob) then
                    r = r_trial    ! accept the move with the calculated acceptance probability
                else
                    continue       ! reject the move and continue with the current position
                end if
            end if
        end do
        
        ! Storing final energy of each run in the energies array
        energies(i) = energy
    end do
    
    ! Printing average energy and standard deviation of energies
    print *, "Average Energy:", sum(energies) / nruns
    print *, "Standard Deviation:", sqrt(sum((energies - (sum(energies) / nruns))**2) / nruns)
end program monte_carlo