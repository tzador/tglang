! This FORTRAN code snippet calculates the roots of a cubic equation using
! the Newton-Raphson method.

program roots_of_cubic
    implicit none
    integer :: iter, max_iter
    real :: a, b, c, d
    real :: x0, x1
    real :: tol, root
    real, parameter :: epsilon = 1.0E-06  ! convergence criterion

    ! Input coefficients of cubic equation in the form ax^3 + bx^2 + cx + d = 0
    a = 1.0    ! coefficient of x^3 term
    b = 2.0    ! coefficient of x^2 term
    c = -3.0   ! coefficient of x term
    d = 1.0    ! constant term

    ! Initial guess for one of the roots
    x0 = 1.0

    ! Maximum number of iterations to perform
    max_iter = 100

    ! Tolerance for convergence
    tol = epsilon * abs(x0)

    ! Initialize counter for iterations
    iter = 0

    do while (iter < max_iter)
        ! Calculate value of function and its derivative at current guess
        f = a*x0**3 + b*x0**2 + c*x0 + d
        df = 3.0*a*x0**2 + 2.0*b*x0 + c

        ! Calculate next guess using Newton-Raphson formula
        x1 = x0 - f/df

        ! Check for convergence
        if (abs(x1-x0) < tol) then
            root = x1
            exit  ! exit loop if solution has converged
        end if

        ! Update current guess
        x0 = x1

        ! Increment iteration counter
        iter = iter + 1
    end do

    ! Output the solution (if it has converged)
    if (iter >= max_iter) then
        write(*, *) "Maximum number of iterations reached."
    else
        write(*, *) "Root of cubic equation is ", root
    end if
end program roots_of_cubic