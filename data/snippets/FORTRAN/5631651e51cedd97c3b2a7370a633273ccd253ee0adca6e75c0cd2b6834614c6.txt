program complex_calculations
! This is a FORTRAN program that performs complex calculations
    implicit none
    integer :: n, i, j
    real :: x(10), y(10), a(10, 10)

    print*, "Enter the number of equations (n): " !ask user for number of equations
    read*, n ! store user input in n

    do i = 1, n ! loop through each equation
        print*, "Enter the coefficients of equation ", i, " (10 values):"
        read*, x ! store 10 values in x array
        
        print*, "Enter the constants of equation ", i, " (10 values):"
        read*, y ! store 10 values in y array
        
        do j = 1, n ! loop through each coefficient in a matrix
            a(i, j) = x(j) + y(j) ! add the values from x and y arrays
        end do
    end do

    print*, "The coefficients matrix (a) is:"
    do i = 1, n ! loop through each row in a matrix
        do j = 1, n ! loop through each column in a matrix
            print*, a(i, j) ! print the value at current position in the matrix
        end do
    end do

    contains
        ! This is a function that calculates the determinant of a matrix recursively
        function determinant (m, n, mat) result (det)
            integer, intent(in) :: m, n ! dimensions of matrix
            real, intent(in) :: mat(m, n) ! matrix
            real :: det ! determinant of matrix

            if (m == 1) then ! base case: determinant of 1x1 matrix is the value itself
                det = mat(1, 1) 
            else 
                det = 0.0 ! initialize determinant to 0
                do i = 1, m ! loop through each element in first row of matrix
                    sign = (-1)**(i+1) ! calculate sign of current element
                    submat = form_submatrix(m, n, mat, i) ! form submatrix by removing current row and column
                    det = det + sign * mat(1, i) * determinant(m-1, n-1, submat) ! calculate determinant recursively using submatrix
                end do
            end if
        end function determinant
        
        ! This is a function that forms a submatrix by removing a specified row and column from a matrix
        function form_submatrix (m, n, mat, row, col) result (submat)
            integer, intent(in) :: m, n ! dimensions of matrix
            real, intent(in) :: mat(m, n) ! matrix
            integer, intent(in) :: row, col ! row and column to be removed
            real :: submat(m-1, n-1) ! submatrix that is formed

            submat = reshape(mat, shape(submat)) ! reshape matrix into 1D array
            submat = pack(submat, [(i /= row .and. j /= col) | i = 1:m, j = 1:n]) ! remove specified row and column from matrix
            submat = reshape(submat, shape(mat) - (/ 1, 1 /)) ! reshape back into 2D array
        end function form_submatrix
end program complex_calculations