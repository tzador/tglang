! This example code uses FORTRAN to numerically solve the heat equation in one dimension
program HeatEquation

! Define variables and arrays
integer:: N, i, j ! N is the number of grid points, i and j are loop counters
real*8, dimension(:), allocatable:: u, u_old, u_new ! Arrays to store the temperature values at each point
real*8:: dt, dx, t, x, alpha ! Time step, spatial step, current time, current position, and diffusion coefficient

! Input parameters
N = 100 ! Number of grid points
t = 0 ! Start time
x = 0 ! Start position
dt = 0.01 ! Time step
dx = 0.1 ! Spatial step
alpha = 1.0 ! Diffusion coefficient

! Allocate memory for arrays
allocate(u(N), u_old(N), u_new(N))

! Set initial condition
do i = 1, N
  u(i) = exp(-2*x(i)**2) ! Gaussian-shaped initial condition
end do

! Time-stepping loop
do while (t < 1.0) ! Loop until final time is reached
  t = t + dt ! Increment current time by time step

  do i = 2, N-1 ! Loop over all grid points except for boundary points
    u_new(i) = u(i) + alpha*dt/dx**2 * (u(i+1) - 2*u(i) + u(i-1)) ! Numerical solution to heat equation
  end do
  
  ! Update boundary points using forward/backward difference approximation
  u_new(1) = u(1) + 2*alpha*dt/dx**2 * (u(2) - u(1))
  u_new(N) = u(N) + 2*alpha*dt/dx**2 * (u(N-1) - u(N))
  
  ! Update old temperature values and assign new values to u array
  u_old = u ! Save old values
  u = u_new ! Assign new values to u array
end do

! Output final solution at final time
write(*,*) "Final solution at t = ", t
write(*,*) u

end program HeatEquation