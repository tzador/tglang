subroutine newton(x0, f, dfdx, tol, x_sol, n_iters)
  implicit none

  ! This subroutine implements the Newton's method for solving a
  ! non-linear equation with a given initial guess, tolerance and
  ! maximum number of iterations.

  ! Input:
  !   x0: Initial guess for the root of the equation
  !   f: A function that evaluates the equation at a given value of x
  !   dfdx: A function that evaluates the derivative of the equation
  !         at a given value of x
  !   tol: Tolerance used for determining convergence
  !   n_iters: Maximum number of iterations allowed

  ! Output:
  !   x_sol: The solution of the equation
  !   n_iters: The number of iterations used for convergence

  real :: x0, x, dfdx0, delta_x ! Declare variables
  real, parameter :: iteration_limit = 100 ! Set maximum number of iterations

  x = x0 ! Set initial guess as the current value of x
  dfdx0 = dfdx(x0) ! Evaluate the derivative of the equation at x0

  do n_iters = 1, iteration_limit ! Start loop for maximum number of iterations
    delta_x = - f(x) / dfdx0 ! Calculate the change in x using Newton's method
    x = x + delta_x ! Update x
    if (abs(delta_x) < tol) exit ! Exit loop if tolerance is met
  end do

  x_sol = x ! Set solution to be the current value of x
  n_iters = n_iters - 1 ! Subtract 1 from number of iterations to get actual count
end subroutine newton