PROGRAM FIND_PRIME_NUMBERS

      ! This program finds the prime numbers within a given range
      ! of numbers using the sieve of Eratosthenes algorithm.

      ! Define starting and ending values
      INTEGER :: start, end
      LOGICAL :: is_prime

      ! Get starting and ending values from user
      PRINT *, 'Enter starting value:'
      READ *, start

      PRINT *, 'Enter ending value:'
      READ *, end

      ! Define array of numbers to check
      INTEGER, DIMENSION(end) :: numbers

      ! Initialize array with all numbers from starting to ending value
      numbers = [(i, i = start, end)]

      ! Loop through array of numbers to check for primes
      DO i = start, end

          ! Assume number is prime until proven otherwise
          is_prime = .TRUE.

          ! Check if number has already been marked as non-prime
          IF (numbers(i) == 0) THEN
              is_prime = .FALSE.
              CYCLE
          END IF

          ! Loop through all numbers up to square root of current number
          DO j = 2, INT(SQRT(REAL(i)))

              ! Check if current number is divisible by any number
              ! up to its square root
              IF (i % j == 0) THEN
                  ! Mark number as non-prime
                  numbers(i) = 0
                  is_prime = .FALSE.
                  EXIT
              END IF
          END DO

          ! Print prime numbers
          IF (is_prime) THEN
              PRINT *, i
          END IF
      END DO
      END PROGRAM FIND_PRIME_NUMBERS