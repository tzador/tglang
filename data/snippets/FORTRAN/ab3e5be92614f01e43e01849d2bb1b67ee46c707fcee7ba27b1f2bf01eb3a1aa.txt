! This is a code snippet in FORTRAN that solves the 2D Poisson's equation using the finite difference method
PROGRAM poisson_2D
  IMPLICIT NONE
  
  ! Defining variables and constants
  INTEGER :: n, max_iter ! size of the grid and maximum number of iterations
  REAL :: dx, tol ! grid spacing and convergence tolerance
  REAL, DIMENSION(:,:), ALLOCATABLE :: phi, rho, phi_old ! grid of potential, charge density and previous potential
  
  ! Read in user inputs
  n = READ(unit=*, fmt=*) ! read grid size
  dx = 1.0 / REAL(n) ! calculate grid spacing
  max_iter = READ(unit=*, fmt=*) ! read maximum number of iterations
  tol = READ(unit=*, fmt=*) ! read convergence tolerance
  
  ! Allocate memory for grids
  ALLOCATE(phi(n,n), rho(n,n), phi_old(n,n))
  
  ! Set initial guess for potential
  phi = 0.0
  
  ! Calculate charge density
  DO i = 1, n
    DO j = 1, n
      rho(i,j) = -SIN(PI*i*dx) * SIN(PI*j*dx)
    END DO
  END DO
  
  ! Begin iteration loop
  DO iter = 1, max_iter
    ! Set previous potential grid to current grid
    phi_old = phi
    
    ! Solve Poisson's equation using finite difference method
    DO i = 2, n-1
      DO j = 2, n-1
        phi(i,j) = 0.25 * (phi_old(i+1,j) + phi_old(i-1,j) + phi_old(i,j+1) + phi_old(i,j-1)) - (dx**2) * rho(i,j)
      END DO
    END DO
    
    ! Check for convergence
    IF (MAXVAL(ABS(phi-phi_old)) < tol) THEN
      EXIT ! exit iteration loop if convergence has been achieved
    END IF
    
  END DO
  
  ! Print final potential grid
  WRITE(unit=*, fmt=*)
  WRITE(unit=*, fmt=*) "Final potential grid:"
  WRITE(unit=*, fmt=*)
  DO i = 1, n
    WRITE(unit=*, fmt=*) (phi(i,j), j = 1, n)
  END DO
  
  ! Deallocate memory
  DEALLOCATE(phi, rho, phi_old)
  
END PROGRAM poisson_2D