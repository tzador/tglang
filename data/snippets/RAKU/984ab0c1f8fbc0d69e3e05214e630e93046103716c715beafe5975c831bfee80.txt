# This is a complex code snippet that illustrates sorting an array of numbers using quicksort algorithm

sub quicksort(@arr, $left = 0, $right = @arr.elems - 1) { # subroutine to perform quicksort on array
    if $left < $right { # check if current pivot is still within boundaries of array
        my $pivot_index = partition(@arr, $left, $right); # get index of pivot element after partitioning
        quicksort(@arr, $left, $pivot_index - 1); # recursively sort the left subarray
        quicksort(@arr, $pivot_index + 1, $right); # recursively sort the right subarray
    }
}

sub partition(@arr, $left, $right) { # subroutine to partition the array
    my $pivot = @arr[$right]; # choose pivot element as rightmost element in array
    my $i = $left - 1; # initialize index for elements less than pivot
    for $left..$right - 1 -> $j { # loop through elements from left to right
        if @arr[$j] < $pivot { # if current element is less than pivot
            $i++; # increment index for elements less than pivot
            (@arr[$i], @arr[$j]) = (@arr[$j], @arr[$i]); # swap current element with element at index $i
        }
    }
    (@arr[$i + 1], @arr[$right]) = (@arr[$right], @arr[$i + 1]); # swap pivot element with element at index $i + 1
    return $i + 1; # return index of pivot element
}

my @numbers = (9, 5, 2, 7, 1, 4, 8, 3, 6); # define an unsorted array of numbers
say "Unsorted array: @numbers"; # print initial unsorted array
quicksort(@numbers); # sort the array using quicksort
say "Sorted array: @numbers"; # print sorted array