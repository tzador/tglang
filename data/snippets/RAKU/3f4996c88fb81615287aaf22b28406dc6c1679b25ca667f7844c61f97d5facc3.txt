# This code snippet uses the Raku programming language
# and shows a complex sorting algorithm using nested maps and loops

my @numbers = (5, 3, 7, 1, 9, 2, 8, 4, 6); # a list of unsorted numbers

my %sorted; # a map to store the sorted numbers
my $index = 0; # index variable for looping through the unsorted list

while $index < @numbers.elems { # loop through the unsorted list
    my $number = @numbers[$index]; # store the current number in a variable

    # check if the number already exists as a key in the map
    if %sorted{$number}:exists {
        # if it does, add it to the list of values for that key
        %sorted{$number}.push($number);
    } else {
        # if it doesn't, create a new key-value pair with the number as the key and a list containing the number as the value
        %sorted{$number} = [$number];
    }

    $index++; # increment the index variable
}

# sort the map by the keys (numbers) in ascending order
my @sorted_keys = %sorted.keys.sort;

# loop through the sorted keys and for each key, loop through the list of values and push them into a new array
my @sorted_numbers;
for @sorted_keys -> $key {
    for %sorted{$key}.list -> $value {
        @sorted_numbers.push($value);
    }
}

say "Unsorted numbers: @numbers";
say "Sorted numbers: @sorted_numbers";