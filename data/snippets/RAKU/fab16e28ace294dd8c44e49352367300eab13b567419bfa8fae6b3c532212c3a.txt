# This code snippet generates a list of prime numbers using the Sieve of Eratosthenes algorithm
# All numbers less than or equal to the given limit will be checked for primality

sub sieve_of_eratosthenes(Int $limit) {
    my @primes = 2..$limit; # initialize a list of prime numbers from 2 up to the limit
    my $current = 2; # start with the first prime number
    my $sqrt_limit = $limit.sqrt.floor; # calculate the square root of the limit and round down

    # loop through all numbers from the current prime up to the square root of the limit
    while ($current <= $sqrt_limit) {
        # remove any multiples of the current prime from the list of primes
        @primes .= grep({ $_ == $current || $_ % $current != 0 });
        $current++; # move on to the next prime number
    }

    return @primes; # return the list of primes
}

say "List of prime numbers up to 100: {@(sieve_of_eratosthenes(100))}"; # print out the list of prime numbers up to 100