# This is a code snippet in Raku that demonstrates the use of the is cached trait for memoization
# Memoization is a technique that stores the result of a function call and returns it for subsequent calls with the same input parameters
# The is cached trait allows us to automatically memoize a function

sub fib (Int:D $n is cached) {    # Defining a function 'fib' that takes an Int and is memoized
    if $n < 2 { return $n }       # Returns 0 or 1 if $n is less than 2
    else {                        # Otherwise, recursively calculates the Fibonacci sequence
        return fib($n-1) + fib($n-2)    # The result of each call is stored and returned for subsequent calls with the same input
    }
}

say fib(50);    # Calling the function with an input of 50, the result will be stored and returned for future calls
say fib(50);    # This call will return the result from the previous call, without having to recalculate it

# Output:
# 12586269025
# 12586269025