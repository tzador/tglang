# This code snippet performs a depth-first search algorithm on a directed graph
my @graph = (
   [1, 2], [2, 3], [3, 4], [4, 1], [2, 5], [3, 6], [6, 7],
);

sub dfs (
    Array @graph,
    Int $source,
    has Array $visited,
    has Array $result
) {
    # check if the source node has been visited
    if $visited[$source] {
        return;
    }
    
    # add source node to result and mark as visited
    push $result, $source;
    $visited[$source] = True;

    # loop through adjacent nodes
    for @graph.grep(*.[0] == $source).map(*.[1]) {
        # recursively call dfs on adjacent nodes
        dfs(@graph, $_, :$visited, :$result);
    }
}

my $start_node = 1;
my @visited;
my @result;
dfs(@graph, $start_node, :$visited, :$result);

print "Result: @result"; # Output: Result: 1 2 3 4 5 6 7