#This is a code snippet in Raku.

my @array = (1,2,3); #Creating an array with 3 elements.

my %hash = {
    "key1" => "value1", #Adding two key-value pairs to the hash.
    "key2" => "value2"
};

#Subroutine to find the average of two numbers.
sub avg($a, $b) is export {
    return ($a + $b) / 2;
}

my $avg = avg(5,10); #Calling the avg subroutine and storing the result in a variable.

say "The average of 5 and 10 is $avg."; #Printing the result using the say built-in function.

#Create a class called "Person" with attributes "name" and "age".
class Person {
    has $.name;
    has $.age;

    #Method to print information about the person.
    method info() {
        say "$.name is $.age years old.";
    }
}

my $person = Person.new(name => "John", age => 25); #Instantiating a new object of the class "Person".
$person.info(); #Calling the info method to print the person's information.

#Creating a subroutine that takes in a hash and returns the number of key-value pairs.
sub count_pairs(%hash) is export {
    my $count = 0;
    for %hash.kv -> $key, $value {
        $count++;
    }
    return $count;
}

my $num_pairs = count_pairs(%hash); #Calling the count_pairs subroutine and storing the result in a variable.
say "The hash has $num_pairs key-value pairs."; #Printing the result using the say built-in function.

#Creating a multi-sub to find the square of a number.
multi sub square(Int $num) {
    return $num * $num;
}

multi sub square(Num $num) {
    return $num ** 2;
}

say square(5); #Calling the first multi-sub with an integer argument and printing the result.
say square(2.5); #Calling the second multi-sub with a decimal argument and printing the result.

#Creating a regex to match a valid email address.
my $email_regex = rx {
    [<alpha | digit>+] '@' [<alpha | digit | '-'>+] '.' [<alpha | digit | '-'>+] 
};

my $valid_email = "john@example.com"; #A valid email address.
my $invalid_email = "john(at)example.com"; #An invalid email address.

say $valid_email ~~ $email_regex; #Matching the valid email address with the regex.
say $invalid_email ~~ $email_regex; #Matching the invalid email address with the regex.

#Creating a point class with attributes x and y.
class Point {
    has $.x;
    has $.y;

    #Method to calculate the distance between two points.
    method distance(Point $point) {
        my $x_dist = abs($.x - $point.x); #Calculating the distance between the x-coordinates.
        my $y_dist = abs($.y - $point.y); #Calculating the distance between the y-coordinates.
        my $dist = sqrt($x_dist ** 2 + $y_dist ** 2); #Using the Pythagorean theorem to calculate the distance.
        return $dist;
    }
}

my $point1 = Point.new(x => 1, y => 2); #Instantiating a new point object.
my $point2 = Point.new(x => 5, y => 4); #Instantiating another point object.

say $point1.distance($point2); #Calling the distance method to calculate the distance between the two points.