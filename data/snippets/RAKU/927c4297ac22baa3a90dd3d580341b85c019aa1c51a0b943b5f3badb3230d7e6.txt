# This is a sample code snippet in Raku

unit module Example;

# Raku Arrays
my @colors = ["red", "blue", "green"]; # Creating an array
@colors.push("yellow"); # Adding a new element to the array
say @colors; # Printing array values in the terminal

# Raku Control Flow
if @colors.elems > 3 { # Checking the number of elements in the array
    for @colors -> $color { # Iterating through array elements
        if $color eq "red" { # Checking if element is equal to string "red"
            say "Found a red color!";
        }
        else {
            say "Found a different color!";
        }
    }
}

# Raku Subroutines
sub sum(@numbers) { # Defining a subroutine to calculate sum of numbers in an array
    my $total = 0;
    for @numbers -> $num {
        $total += $num;
    }
    return $total; # Returning the sum
}

my @numbers = [1, 2, 3, 4, 5]; # Creating an array of numbers
say "The sum of all numbers is " ~ sum(@numbers); # Calling the sum subroutine and printing the result

# Raku Classes
class Student {
    has $.name; # Declaring attributes using class keyword "has"
    has $.grade;
    has $.age;

    method print_info { # Defining a method to print student information
        say "Name: " ~ $!name;
        say "Grade: " ~ $!grade;
        say "Age: " ~ $!age;
    }
}

my $student = Student.new(name => "John", grade => 12, age => 18); # Creating a new student object
$student.print_info; # Calling the print_info method to print student info