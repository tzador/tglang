# This code snippet uses a recursive approach to print out all possible
# combinations of a given array of letters.
sub combinations(@letters) {
    my @results;
    my sub helper(@prefix, @suffix) {
        for @suffix -> $letter {
            my @new_prefix = @prefix;
            push @new_prefix, $letter;

            my @new_suffix = @suffix;
            @new_suffix .= grep: { $_ ne $letter };

            if @new_suffix {
                # Recursive call with the updated prefix and suffix
                helper(@new_prefix, @new_suffix);
            } else {
                # Final result when the suffix is empty
                push @results, @new_prefix;
            }
        }
    }
    # Initial recursive call with an empty prefix and the array of letters
    helper([], @letters);

    # Print out all the possible combinations
    for @results -> @result {
        say @result.join(' ');
    }
}

# Sample input array of letters
my @letters = <a b c>;

# Call the combinations subroutine on the input array
combinations(@letters);