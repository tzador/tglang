# This code snippet generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm


# Define a sub routine that takes in a limit as input
sub prime-sieve (Int $limit) {

    # Create an array of boolean values each representing whether its index is a prime number
    my @is-prime = True xx $limit;

    # Iterate through the array starting from index 2
    for 2 .. $limit -> $num {

        # Check if the current number is a prime number
        if @is-prime[$num] {
            # Set all the multiples of the current number to False in the array
            for $num * $num .. $limit step $num {
                @is-prime[$_] = False;
            }
        }
    }

    # Print out all the indexes that still have True values, representing prime numbers
    for 2 .. $limit -> $num {
        if @is-prime[$num] {
            say $num;
        }
    }
}

# Call the prime-sieve subroutine with a limit of 100
prime-sieve(100);