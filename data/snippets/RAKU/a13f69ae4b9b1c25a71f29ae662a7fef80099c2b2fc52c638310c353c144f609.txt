sub sieve_of_eratosthenes(Int $n) { # Define a subroutine called "sieve_of_eratosthenes" with one parameter, which takes in an integer value
    my @array = [1..$n]; # Create an array of size $n, containing numbers from 1 to $n
    my $p = 2; # Initialize a variable $p to 2, which will be our prime number
    while $p * $p <= $n { # While loop to check if the square of $p is less than or equal to $n
        if @array[$p - 2] != 0 { # Check if the current index of the array is not equal to 0
            for $p..$n -> $i { # For loop to iterate through numbers starting from $p to $n
                if $i % $p == 0 { # Check if the current number is divisible by $p
                    @array[$i - 2] = 0; # If yes, replace the number in the array at that index with 0
                }
            }
        }
        $p++; # Increment $p by 1
    }
    for 2..$n -> $i { # For loop to iterate through numbers from 2 to $n
        if @array[$i - 2] != 0 { # Check if the number at current index in the array is not 0
            say $i; # If yes, print the number (which is a prime number)
        }
    }
}

sieve_of_eratosthenes(100); # Call the subroutine with 100 as the argument