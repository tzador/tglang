# This code snippet generates a Fibonacci sequence using a recursive function in Raku (formerly known as Perl 6)

# Declare a recursive function named 'fibonacci' that takes an integer argument and returns a sequence of Fibonacci numbers
sub fibonacci(Int $n) {
    # Base case: Return 0 if $n is 0
    return 0 if $n == 0;

    # Second base case: Return 1 if $n is 1
    return 1 if $n == 1;

    # Recursive case: Call the 'fibonacci' function with $n-1 and $n-2 and add them together
    # Also use the '+' prefix operator to denote that the return value is a Raku sequence
    return +(fibonacci($n-1)) + +(fibonacci($n-2));
}

# Prompt the user for input
print "Enter the number of sequences to generate: ";

# Get input from user and convert it to an integer
my $input = prompt("Please enter a number: ").Int;

# Call the 'fibonacci' function with the user input
my @seq = fibonacci($input);

# Print the generated sequence using the 'say' keyword
say "Fibonacci sequence of $input numbers: " ~ @seq;