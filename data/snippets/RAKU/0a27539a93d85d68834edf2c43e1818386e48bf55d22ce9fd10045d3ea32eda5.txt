my $current_year = Date.today.year; #` This line declares a variable called $current_year and assigns it the current year using a built-in function Date.today.year in RAKU.

my $text = "Welcome to the year $current_year!"; #` This line creates a string variable called $text and uses double quotes to interpolate the $current_year variable into the string.

say $text; #` This line uses the built-in function say to print the string variable $text to the console. This will output the phrase "Welcome to the year [current year]!", with the current year dynamically inserted.

my @months = ("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"); #` This line declares an array variable called @months and assigns it an ordered list of the months of the year in RAKU.

for @months -> $month { #` This line starts a for loop that iterates through each element in the @months array and assigns it to the variable $month.
    say "Next month is $month!"; #` This line uses the built-in function say to print a string that interpolates the $month variable, indicating which month is next in the loop.

    my $month_length = $month.chars; #` This line declares a variable called $month_length and uses the built-in function chars to get the number of characters in the string variable $month.

    say "It has $month_length letters."; #` This line uses the built-in function say to print a string that interpolates the $month_length variable, indicating how many letters are in the month name.
} #` This line ends the for loop.

my $i = 0; #` This line declares a variable called $i and assigns it an initial value of 0.

while $i < @months.elems { #` This line starts a while loop that will run as long as the condition $i is less than the number of elements in the @months array.
    my $month = @months[$i]; #` This line declares a variable called $month and assigns it the element from the @months array at the current index $i.
    say "$month is month number { $i + 1 } in the year."; #` This line uses the built-in function say to print a string that interpolates the $month variable and the current index $i + 1 to indicate which month it is in the year.

    $i++; #` This line increments the value of $i by 1.
} #` This line ends the while loop.

# Output:
# Welcome to the year [current year]!
# Next month is January!
# It has 7 letters.
# Next month is February!
# It has 8 letters.
# Next month is March!
# It has 5 letters.
# Next month is April!
# It has 5 letters.
# Next month is May!
# It has 3 letters.
# Next month is June!
# It has 4 letters.
# Next month is July!
# It has 4 letters.
# Next month is August!
# It has 6 letters.
# Next month is September!
# It has 9 letters.
# Next month is October!
# It has 7 letters.
# Next month is November!
# It has 8 letters.
# Next month is December!
# It has 8 letters.
# January is month number 1 in the year.
# February is month number 2 in the year.
# March is month number 3 in the year.
# April is month number 4 in the year.
# May is month number 5 in the year.
# June is month number 6 in the year.
# July is month number 7 in the year.
# August is month number 8 in the year.
# September is month number 9 in the year.
# October is month number 10 in the year.
# November is month number 11 in the year.
# December is month number 12 in the year.