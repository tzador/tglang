# This code snippet uses multi-methods, exceptions, and complex data structures
# Multi-methods allow for more specific method calls based on arguments

# Example of a complex data structure
my %data = (
  'name' => 'John',
  'age' => 25,
  'hobbies' => ['reading', 'cooking', 'coding'],
  'address' => {
    'street' => '123 Main Street',
    'city' => 'New York',
    'country' => 'USA'
  }
);

# Define a class with a multi-method that handles different types of data
class DataHandler {
  multi method handle_str(Str $str) {
    # Do something with a string data
    return "String data: $str";
  }
  multi method handle_int(Int $int) {
    # Do something with an integer data
    return "Integer data: $int";
  }
  multi method handle_arr(Array $arr) {
    # Do something with an array data
    return "Array data: $arr";
  }
  multi method handle_hash(Hash $hash) {
    # Do something with a hash data
    return "Hash data: $hash";
  }
}

# Try using the multi-method with different types of data, and handle exceptions
my $handler = DataHandler.new;

# Handle an integer data
my $int_data = 10;
try {
  $handler.handle_int($int_data);
}
catch {
  say "Error handling integer data: $_";
}

# Handle a string data
my $str_data = 'Hello World';
try {
  $handler.handle_str($str_data);
}
catch {
  say "Error handling string data: $_";
}

# Handle an array data
my @arr_data = ['apple', 'banana', 'orange'];
try {
  $handler.handle_arr(@arr_data);
}
catch {
  say "Error handling array data: $_";
}

# Handle a hash data
try {
  $handler.handle_hash(%data);
}
catch {
  say "Error handling hash data: $_";
}