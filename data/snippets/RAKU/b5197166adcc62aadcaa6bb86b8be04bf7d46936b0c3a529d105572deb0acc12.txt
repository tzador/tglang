subset LargeInt where * > 1_000_000;
# Define a subset of the Int type called LargeInt that only includes integers greater than 1 million.

proto shape(|) {*}
# Create a proto (protocol) that defines the shape of a function that takes in an unknown number of arguments.

multi shape (|args) {
# Define a multi (multi-dispatch) version of the shape function that takes in any number of arguments.

    given args.elems {
        when 2 {
            return "rectangle";
        }
        when 3 {
            return "triangle";
        }
        when 4 {
            return "square";
        }
        default {
            return "unknown shape";
        }
    }
}

say shape(3);
# Output: triangle

class Rectangle {
    has LargeInt $.width;
    has LargeInt $.length;
# Define a class called Rectangle with attributes of width and length, both of type LargeInt.

    method area {
        return $.width * $.length;
    }
# Define a method called area that calculates the area of a rectangle based on the width and length attributes.

    method perimeter {
        return ($.width + $.length) * 2;
    }
# Define a method called perimeter that calculates the perimeter of a rectangle based on the width and length attributes.
}

my $rect = Rectangle.new(width => 5_000_000, length => 2_000_000);
say $rect.area;
# Output: 10000000000000000 (area of a rectangle with width 5 million and length 2 million)

say $rect.perimeter;
# Output: 14000000 (perimeter of a rectangle with width 5 million and length 2 million)