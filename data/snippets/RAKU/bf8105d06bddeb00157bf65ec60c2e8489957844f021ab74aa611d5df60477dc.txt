# This is a code snippet in Raku
# It uses parallelism and regex to search for specific strings in a text file and count their occurrences
# It then outputs the results in an annotated markdown table

my $FILE_PATH = "text.txt"; # set the file path to the text file to be searched

my @words = ( # specify the words to be searched for (can add more if needed)
    "apple",
    "banana",
    "orange"
);

my %word_count; # hash to store the count for each word
my $total_words = 0; # variable to store the total number of words in the file

my $text = do { given open $FILE_PATH { $^a.slurp } }; # read the file into a string variable using parallelism

# use regex to find the specified words in the text variable and increment their count in the hash
for @words -> $word {
    %word_count{$word}++ while $text ~~ m:g/$word/;
}

# total up the count for all words and store in $total_words
$total_words += %word_count{$^WORD} for @words;

# create a markdown table header
my $header = "|Word|Count|Percentage|\n|----|----|----|";

# create a string variable to store the markdown table rows
my $table = "";

# loop through the hash and calculate the percentage for each word and add to the table variable
for %word_count.keys -> $word {
    my $percent = (%word_count{$word} / $total_words) * 100;
    $table = $table ~ "|$word|%word_count{$word}|$percent%|\n";
}

say $header; # print the table header to the console
say $table; # print the table rows to the console