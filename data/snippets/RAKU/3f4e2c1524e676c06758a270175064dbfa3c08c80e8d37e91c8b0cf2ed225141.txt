# This code snippet performs a sorting algorithm using the merge sort method in RAKU

# Define a routine for merge sort
sub merge_sort(@arr) {
    # If the array is of size 0 or 1, it is already sorted, so return it
    return @arr if @arr.elems < 2;

    # Find the middle index of the array
    my $mid = @arr.elems div 2;

    # Define empty arrays for the left and right subarrays
    my @left = ();
    my @right = ();

    # Populate the left subarray with values from index 0 to mid-1
    for my $i (0..$mid-1) {
        push @left, @arr[$i];
    }

    # Populate the right subarray with values from index mid to the end
    for my $i ($mid..@arr.elems-1) {
        push @right, @arr[$i];
    }

    # Recursive calls to the merge_sort routine on the left and right subarrays
    @left = merge_sort(@left);
    @right = merge_sort(@right);

    # Initialize counters for left and right subarrays
    my $i = 0;
    my $j = 0;

    # Initialize an empty array to store the sorted values
    my @sorted = ();

    # Compare values from left and right subarrays and push the smaller value to the sorted array
    while $i < @left.elems && $j < @right.elems {
        if @left[$i] < @right[$j] {
            push @sorted, @left[$i];
            $i++;
        }
        else {
            push @sorted, @right[$j];
            $j++;
        }
    }

    # Push any remaining values from left subarray to the sorted array
    while $i < @left.elems {
        push @sorted, @left[$i];
        $i++;
    }

    # Push any remaining values from right subarray to the sorted array
    while $j < @right.elems {
        push @sorted, @right[$j];
        $j++;
    }

    # Return the sorted array
    return @sorted;
}

# Initialize an unsorted array
my @unsorted = (5, 3, 1, 4, 2);

# Call the merge_sort routine on the unsorted array
my @sorted = merge_sort(@unsorted);

# Print the sorted array
say "Sorted array: @sorted";

# Output:
# Sorted array: 1 2 3 4 5