use v6;
my @numbers = <1 2 3 4 5 6>;
my %hash = 'a' => 1, 'b' => 2;

# This code snippet creates an object called "fizzbuzz" using a class in Raku
class fizzbuzz {
    has $.limit;
    has @.rules;

    method generate {
        return [~] gather for (1..$.limit) {  # ~ operator concatenates values into a single string
            take self.check($_);
        }
    }

    method check (Int $num) {
        my @matches;  #creates a new array
        for @.rules -> $rule {
            next unless $rule.value($num); # checks if the rule is valid for the given number
            push @matches, $rule.key; # adds the rule key if it is valid
        }
        return @matches ?? [~] @matches !! $num; # if @matches is not empty, combine the values into a string, otherwise return the number itself
    }
}

# Creating a new instance of the class with a limit of 20 and two rules
my $fizzbuzz = fizzbuzz.new(limit => 20, rules => %hash, 'c' => sub ($num) { $num %% 3 }); 

# Calling the generate method and printing the output
say $fizzbuzz.generate;

# Output: 1 2 c 4 5 c 7 8 c 10 11 c 13 14 cb 16 17 c 19 20