# This code snippet uses Raku's Object Oriented Programming (OOP) features to create a complex game simulation.

# Create a game class
class Game {
    has Int $.current_round;                              # Attribute to keep track of current round
    has Str @.players;                                    # Attribute to store names of players
    has Int $.total_rounds;                               # Attribute to store total number of rounds in the game
    has Int %!player_scores;                              # Attribute to store player scores as a hash

    # Constructor method to initialize game
    method new( :$players, :$total_rounds ) {
        self.bless(:$players, :current_round(1), :$total_rounds);   # Initialize attributes using :$named parameter
        %!player_scores{@.players} = 0;                     # Set initial score for each player to 0
        return self;                                        # Return game object
    }

    # Method to simulate a round of the game
    method play_round( ) {
        for @.players -> $player {                              # Loop through each player in the game
            my $random_score = (1..6).pick;                      # Generate a random score between 1 and 6
            %!player_scores{$player} += $random_score;           # Add the score to the player's total score using hash
        }

        $!current_round++;                                      # Increment the current round by 1
        say "Completed round $!current_round.";                  # Output the current round

        return self;                                            # Return the game object
    }

    # Method to check if the game has ended
    method has_ended( ) {
        return $!current_round > $!total_rounds;                 # Check if current round is greater than total rounds
    }

    # Method to determine the winner of the game
    method get_winner( ) {
        my @winners;                                            # Initialize an empty array to store winners

        for @.players -> $player {                              # Loop through each player in the game
            if %!player_scores{$player} == $!total_rounds {      # If player's score is equal to total rounds
                push @winners, $player;                         # Add player to winners array
            }
        }

        return @winners;                                        # Return winners array
    }
}

# Create a game object with 3 players and 5 total rounds
my $game = Game.new( :players<John, Jane, Bob>, :total_rounds(5) );

# Main loop to play the game
while !$game.has_ended {
    $game.play_round;                                        # Simulate a round of the game
}

# Get the winner/winners of the game
my @winners = $game.get_winner;

# Output the winner/winner depending on number of winners
if @winners.elems > 1 {
    say "The winners are: @winners.join(', ')!";
} else {
    say "The winner is: @winners[0]!";
}