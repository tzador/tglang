use v6;

# Define subroutine to calculate factorial
sub factorial(Int $n) {
  return 1 if $n == 0; # base case
  return $n * factorial($n - 1); # recursive call
}

# Define class representing a matrix
class Matrix {
  has @!values;

  method new(@values) {
    return self.bless( :@values ); # bless a reference to a Matrix object
  }

  method get-row(Int $row ) {
    return @!values[$row];
  }

  method set-element(Int $row, Int $col, $value) {
    @!values[$row][$col] = $value;
  }

  method print() {
    for @!values -> @row {
      for @row -> $value {
        print "$value ";
      }
      say "";
    }
  }

  method transpose() {
    my @transposed;
    
    for ^@!values[0].elems -> $col { # iterate through columns
      my @row;

      for ^@!values.elems -> $row { # iterate through rows
        push @row, @!values[$row][$col]; # swap row and column indexes
      }
      
      push @transposed, @row; # add transposed rows to result
    }

    return Matrix.new(@transposed);
  }

  # Calculate matrix determinant using Laplace expansion
  method determinant() {
    die "Matrix is not square" unless %!values.elems == @!values[0].elems;

    return @!values[0].elems == 2 ?? (@!values[0][0] * @!values[1][1]) - (@!values[0][1] * @!values[1][0]) !! 
     (@!values[0] Z* factorial([*] 1..^@!values.elems[0])) + [+] gather for (0..@!values.elems[0]) -> $n { 
      my $submatrix = Matrix.new(@!values[0..0].map({$_[^$n]}), @!values[1..*].map({$_[^$n..*]}));
      take @!values[0][^$n].elems % 2 == 0 ?? -self.determinant($submatrix) !! self.determinant($submatrix)
     }
  }
}

# Create a 3x3 matrix
my $m = Matrix.new([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]]);

# Print matrix
$m.print();

# Transpose matrix
say "Transposed matrix:";
$m.transpose().print();

# Calculate determinant
say "Matrix determinant: ", $m.determinant();