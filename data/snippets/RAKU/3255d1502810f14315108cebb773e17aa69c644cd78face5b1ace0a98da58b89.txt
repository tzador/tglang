#This code snippet is a sorting algorithm called bubble sort
#It takes an array of numbers and sorts them in ascending order

sub bubble-sort (@arr) {
    my Bool $swapped = False;
    loop (my $i = 0; $i < @arr.elems - 1; $i++) {
        for my $j in 0..^(@arr.elems - $i - 1) {
            if (@arr[$j] > @arr[$j + 1]) { #compare current and next element
                #swap elements
                my $temp = @arr[$j];
                @arr[$j] = @arr[$j + 1];
                @arr[$j + 1] = $temp;
                $swapped = True;
            }
        }
        last if !$swapped; #if no swaps were made, array is already sorted
        $swapped = False;
    }
    return @arr;
}

#Example usage
my @unsorted = (9, 4, 6, 2, 1, 5, 7);
say bubble-sort(@unsorted); #prints [1 2 4 5 6 7 9]

#Explanation:
#The bubble sort algorithm works by repeatedly swapping adjacent elements if they are in the wrong order.
#In this implementation, a flag is used to check if any swaps were made in a particular loop iteration.
#If no swaps were made, it means the array is already sorted and the algorithm can stop.
#The loop iterates through the array, with each iteration reducing by 1 since the last element in the array is already in its correct position.
#The inner loop goes through the elements in the unsorted part of the array and swaps them if they are in the wrong order.
#Once the inner loop is completed, the flag is checked and if no swaps were made, the loop is terminated.
#Once the algorithm is completed, the sorted array is returned.