# This program uses a dynamic programming algorithm to solve a knapsack problem.

sub knapsack($capacity, @profits, @weights) {
    my @items = @profits Z @weights; # create an array of item-value pairs
    my @results; # array to store results
    
    # loop through each item and calculate the maximum profit for each capacity
    for 1..@items {
        my @maxes;
        
        # loop through each capacity and calculate the maximum profit
        for 1..$capacity {
            my ($profit, $weight) = @items[$_ - 1];
            
            # if the weight of the current item is less than or equal to the current capacity
            if $weight <= $_ {
                # calculate the remaining capacity
                my $remaining_capacity = $_ - $weight;
                
                # add the profit of the current item to the maximum profit at the remaining capacity
                push @maxes, $profit + @results[$remaining_capacity];
            }
            else {
                # if the weight of the current item is greater than the current capacity
                # set the maximum profit to be the same as the previous capacity
                push @maxes, @results[$_-1];
            }
        }
        
        # push the maximum profit at the current capacity to the results array
        push @results, @maxes.max;
    }
    
    # return the maximum profit at the given capacity
    return @results[$capacity];
}

# example input
my $capacity = 7;
my @profits = (1, 4, 5, 7);
my @weights = (1, 3, 4, 5);

# call knapsack sub routine and print the results
say "Maximum profit for capacity $capacity is " . knapsack($capacity, @profits, @weights);