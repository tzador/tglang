# This program uses dynamic programming to find the minimum number of coins needed to make
# a given amount of change using a given set of coin denominations

sub min-change(Int $amount, @coins) {

    # Initialize an array to store the minimum number of coins needed for each amount,
    # with an extra slot at the front for $0
    my @min-coins = (0 xx $amount + 1);

    # Loop through each possible amount from 1 to $amount
    for 1..$amount -> $amt {

        # Initialize $min-coins with a value that is greater than the maximum possible
        # number of coins needed to make $amt
        my $min-coins = $amount + 1;

        # Loop through each coin denomination in @coins
        for @coins -> $coin {

            # Check if the value of the coin is less than or equal to $amt
            if $coin <= $amt {

                # Calculate the minimum number of coins needed to make $amt - $coin
                # by adding 1 (the current coin) to the minimum number of coins needed
                # for $amt - $coin
                my $temp = 1 + @min-coins[$amt - $coin];

                # If $temp is less than the current value of $min-coins, update it
                if $temp < $min-coins {
                    $min-coins = $temp;
                }
            }
        }

        # Set the value of @min-coins at index $amt to be the minimum number of coins
        # needed to make $amt
        @min-coins[$amt] = $min-coins;
    }

    # Return the minimum number of coins needed to make $amount
    return @min-coins[$amount];
}

# Example usage:
my $amount = 25;
my @coins = (1, 5, 10, 25);
my $answer = min-change($amount, @coins);
say "The minimum number of coins needed to make $amount cents is $answer."