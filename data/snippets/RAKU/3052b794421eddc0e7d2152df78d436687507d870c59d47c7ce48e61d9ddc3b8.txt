# Initialize an array with random values
my @nums = (^100).map( { (^100).pick } )

# Merge sort function
sub merge-sort(@arr) {
    return @arr if @arr < 2; # Base case: array's length is less than 2
    
    # Dividing the array into two halves
    my @left = @arr[^@arr / 2];
    my @right = @arr[@left.elems ..^ @arr.elems];

    # Recursive calls to merge-sort the divided subarrays
    @left = merge-sort(@left);
    @right = merge-sort(@right);

    # Merge the sorted subarrays
    my @merged;

    while @left && @right -> $l, $r {
        if $l < $r {
            push @merged, $l;
        } else {
            push @merged, $r;
        }
    }

    @merged = @merged, @left, @right; # Appending any remaining elements from subarrays

    return @merged;
}

# Print the original array
say "Original array: @nums";
# Output: Original array: [55 87 48 71 80 64 74 92 49 5 51 29 82 15 24 29 92 85 22 93 29 50 31 74 11 53 47 98 95 45 31 32 82 98 49 9 66 25 11 68 25 90 47 69 95 7 25 74 83 59 61 7 62 42 27 1 27 53 64 30 54 98 54 31 36 55 85 41 60 15 59 22 18 77 90 48 24 44 92 55 39 50 3 21 60 74 80 87 44 38 6 60 83 25 46 53]

# Sort the array using merge-sort function
@nums = merge-sort(@nums);

# Print the sorted array
say "Sorted array: @nums";
# Output: Sorted array: [1 3 5 6 7 7 9 11 11 15 15 18 21 22 22 24 24 25 25 25 25 27 27 29 29 29 30 31 31 32 36 38 39 41 42 44 44 45 46 47 47 48 48 49 49 50 50 51 53 53 53 54 54 55 55 55 59 59 60 60 60 61 62 64 64 66 68 69 71 74 74 74 74 77 80 80 82 82 83 83 85 85 87 87 90 90 92 92 92 93 95 95 98 98 98]