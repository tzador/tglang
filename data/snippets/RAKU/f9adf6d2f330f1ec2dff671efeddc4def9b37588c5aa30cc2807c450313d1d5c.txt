#!/usr/bin/env raku

unit module Math::Utils;

# This is a module that provides various mathematical utilities
# Author: John Smith

# Define a constant for the value of pi
constant PI = 3.1415926535897932384626433832795028841971;

# Function to calculate the factorial of a given number
sub factorial(Int $n) {
    return 1 if $n <= 1;
    return $n * factorial($n - 1);
}

# Function to calculate the nth Fibonacci number
sub fibonacci(Int $n) {
    return $n if $n < 2;
    return fibonacci($n - 1) + fibonacci($n - 2);
}

# Function to calculate the square root of a given number using the Babylonian method
sub square_root(Num $n) {
    my $guess = $n / 2;
    my $tolerance = 0.000001;
    while ( abs($guess * $guess - $n) > $tolerance ) {
        $guess = ($guess + $n/$guess) / 2;
    }
    return $guess;
}

# Function to calculate the determinant of a 3x3 matrix
sub determinant(@matrix) {
    my @rows = [];
    for @matrix.kv -> $row, $value {
        my @elements = [];
        for @($value) -> $col, $value {
            push @elements, $value;
        }
        push @rows, @elements;
    }

    my $det = (@rows[0][0] * @rows[1][1] * @rows[2][2]) +
              (@rows[0][1] * @rows[1][2] * @rows[2][0]) +
              (@rows[0][2] * @rows[1][0] * @rows[2][1]) -
              (@rows[0][2] * @rows[1][1] * @rows[2][0]) -
              (@rows[0][1] * @rows[1][0] * @rows[2][2]) -
              (@rows[0][0] * @rows[1][2] * @rows[2][1]);

    return $det;
}

# Function to calculate the cosine of a given angle in degrees
sub cosine(Num $angle) {
    my $radians = $angle * PI / 180;
    return cos($radians);
}

# Function to calculate the logarithm of a given number in a given base
sub logarithm(Num $number, Num $base) {
    return log($number) / log($base);
}

# Function to calculate the mean of a list of numbers
sub mean(@numbers) {
    my $sum = [+] @numbers;
    return $sum / @numbers.elems;
}

# Function to calculate the standard deviation of a list of numbers
sub standard_deviation(@numbers) {
    my $mean = mean(@numbers);
    my $sum = [+] map { ($_ - $mean) ** 2 }, @numbers;
    return square_root($sum / @numbers.elems);
}

# Function to convert degrees to radians
sub to_radians(Num $degrees) {
    return $degrees * PI / 180;
}

# Function to convert radians to degrees
sub to_degrees(Num $radians) {
    return $radians * 180 / PI;
}

# End of module
1;