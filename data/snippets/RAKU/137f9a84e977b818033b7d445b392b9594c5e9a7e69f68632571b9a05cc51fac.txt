# This code snippet uses the Raku programming language to implement a quicksort algorithm
# This function takes in an array of numbers and sorts them in ascending order
sub quicksort(@array) {
    # If the array has one or less elements, it is already sorted
    if @array.elems <= 1 {
        return @array;
    }
    # Select a pivot element from the array, in this case we choose the first element
    my $pivot = @array[0];
    # Initialize two empty arrays to store elements less than and greater than the pivot
    my @less_than_pivot = ();
    my @greater_than_pivot = ();
    # Loop through the array starting from the second element 
    for @array[1..@array.end] {
        # If the current element is less than the pivot, push it to the @less_than_pivot array
        if $_ < $pivot {
            @less_than_pivot.push($_);
        }
        # If the current element is greater than the pivot, push it to the @greater_than_pivot array
        elsif $_ > $pivot {
            @greater_than_pivot.push($_);
        }
        # If the current element is equal to the pivot, no need to do anything
        else {
            next;
        }
    }
    # Recursively call the quicksort function on the @less_than_pivot and @greater_than_pivot arrays
    # Concatenate the returned arrays with the pivot element between them to get the final sorted array
    return quicksort(@less_than_pivot) + $pivot + quicksort(@greater_than_pivot);
}
# Call the function with an example array and print the sorted result
say quicksort([7, 3, 5, 10, 1, 9]);

# Output: [1, 3, 5, 7, 9, 10]