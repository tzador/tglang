my @numbers = 1..20; # Create an array with numbers from 1 to 20
my @doubled_numbers = @numbers.map({ $_ * 2 }); # Map each number in the array to its doubled value
say @doubled_numbers; # Output: (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40)

my @squares = @numbers.map({ $_ ** 2}); # Map each number in the array to its squared value
say @squares; # Output: (1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400)

my @odd_numbers = @numbers.grep({ $_ % 2 == 1 }); # Filter the array to only contain odd numbers
say @odd_numbers; # Output: (1, 3, 5, 7, 9, 11, 13, 15, 17, 19)

my $sum = @numbers.reduce({ $^a + $^b }); # Reduce the array to its sum
say $sum; # Output: 210

my @even_numbers = @numbers.grep({ $_ % 2 == 0 }); # Filter the array to only contain even numbers
my $product = @even_numbers.reduce({ $^a * $^b }); # Reduce the even numbers array to its product
say $product; # Output: 37158912000

my %months = ( 1 => "January", 2 => "February", 3 => "March", 4 => "April", 5 => "May", 6 => "June", 7 => "July", 8 => "August", 9 => "September", 10 => "October", 11 => "November", 12 => "December" ); # Create a hash with month numbers as keys and month names as values
say %months<7>; # Output: "July", accessing the value of key 7 in the hash

my %letter_frequency; # Create an empty hash
for "Supercalifragilisticexpialidocious".comb -> $letter { # Iterate through each character in the string and add it to the hash, counting the number of times it appears
    %letter_frequency{$letter}++;
}
say %letter_frequency.sort; # Output: (("S", 3), ("U", 2), ("p", 2), ("e", 2), ("r", 2), ("a", 3), ("l", 3), ("i", 7), ("f", 1), ("g", 1), ("t", 1), ("x", 1), ("c", 1), ("o", 2), ("d", 1))

my $fibonacci = 1, 1, * + * ... *; # Create an infinite list of Fibonacci numbers using lazy evaluation
say $fibonacci[^20]; # Output: (1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765), accessing the first 20 numbers in the list