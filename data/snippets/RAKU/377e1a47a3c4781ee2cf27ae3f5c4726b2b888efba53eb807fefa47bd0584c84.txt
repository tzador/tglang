# This is a code snippet that creates a hash with various data types as keys and values, using Rakudo's convenient assignment syntax.
# We start by creating a variable, %hash, and assigning it an empty hash using the `{}` syntax.
my %hash = {};

# Next, we assign keys and values to the hash using the `=>` operator.
# In this example, we have a string as a key and an array as a value.
# We also use interpolation to generate a dynamic key, and use a list of strings as a value.
%hash{"key1"} = [1, 2, 3];
%hash{"key2"} = ["string1", "string2", "string3"];
%hash{"dynamic_{2 + 2}"} = ["hello", "world"];

# We can also assign keys and values in a more traditional way, using the `=` operator.
%hash{"key3"} = 42;
%hash{"key4"} = True;

# To access the values in the hash, we can use the `{}` syntax again.
# In this example, we print the first value of the array assigned to "key1".
say %hash{"key1"}[0];

# We can also iterate through the keys and values in the hash using a `for` loop.
# In this example, we print out each key-value pair in the hash.
for %hash.kv -> $key, $value {
    say "$key => $value";
}

# Output:
1
# => ["string1", "string2", "string3"]
# => ["hello", "world"]
# => ["key3", 42]
# => ["key4", True]