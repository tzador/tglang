sub merge-sorts(@list, $key, $cmp = >) { # Define a sub routine with parameters list, key, and $cmp (a comparator)
    return @list if @list < 2; # base case, return list if it has less than 2 elements
    
    my $half = @list.elems div 2; # split the list into 2 halves
    my @left = merge-sorts(@list[^$half], $key, ).&("sort$cmp"); # sort the left half recursively and store it in @left
    my @right = merge-sorts(@list[$half..^@list.end], $key, ).&("sort$cmp"); # sort the right half recursively and store it in @right
    my @result; # initialize an empty array to store the sorted result
    
    while @left && @right { # while both @left and @right are not empty
        given @left[0]{$key} cmp @right[0]{$key} { # compare the first elements of @left and @right based on the key
            when Less { @result.push(@left.shift) } # if the left value is smaller, push it to the result array and remove it from @left
            when More { @result.push(@right.shift) } # if the right value is smaller, push it to the result array and remove it from @right
            when Same { @result.push(@left.shift, @right.shift) } # if the values are equal, push both to the result array and remove them from @left and @right respectively
        }
    }
    
    @result = @result + @left + @right; # concatenate the result array with the remaining elements in @left and @right
    return @result; # return the sorted result
}