# Define a class with a constructor and multiple methods
class Employee {
    has $.name;
    has $.age;

    # Constructor
    method BUILD(Str $name, Int $age) {
        $!name = $name;
        $!age = $age;
    }

    # Method to calculate salary based on years of experience
    # Returns a string with the calculated salary
    method calculate-salary(Int $years-of-exp) {
        my $salary = $years-of-exp * $!age * 1000;
        return "$!name's salary after $years-of-exp years of experience is $$salary";
    }

    # Method to assign a new project to the employee
    method assign-project(Str $project-name) {
        # Add the project to a list of current projects
        my @projects = @.current-projects;
        push @projects, $project-name;

        # Update the list of current projects
        @.current-projects = @projects;

        return "$!name has been assigned to work on $project-name";
    }

    # Method to check if the employee needs a promotion based on their age and salary
    # Returns a string with the appropriate message
    method check-for-promotion() {
        if $!age >= 30 && $!age * 10000 > 500000 {
            return "$!name is eligible for a promotion!";
        }
        elsif $!age < 30 && $!age * 10000 > 250000 {
            return "$!name is doing well, but may need more experience before promotion.";
        }
        else {
            return "$!name does not meet the requirements for a promotion.";
        }
    }
}

# Create an instance of the Employee class
my $employee = Employee.new("John", 35);

# Call the calculate-salary method
say $employee.calculate-salary(5); # Output: John's salary after 5 years of experience is $175000

# Call the assign-project method
say $employee.assign-project("New Website Development"); # Output: John has been assigned to work on New Website Development

# Call the check-for-promotion method
say $employee.check-for-promotion(); # Output: John is eligible for a promotion!