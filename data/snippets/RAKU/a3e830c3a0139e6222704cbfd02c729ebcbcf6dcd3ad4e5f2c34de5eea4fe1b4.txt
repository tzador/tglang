# This code snippet is a custom implementation of the merge sort algorithm in Raku.

# Function to split the array into two subarrays
sub split-array(@arr) {
    my $mid = int(@arr.elems / 2);
    my @left = @arr[0..$mid-1];
    my @right = @arr[$mid..*];

    return (@left, @right);
}

# Function to merge the two sorted subarrays
sub merge-sorted(@left, @right) {
    my @result;
    while ((@left.elems > 0) && (@right.elems > 0)) {
        (@left[0] < @right[0]) 
            ?? push @result, shift @left
            !! push @result, shift @right;
    }

    # Add the remaining elements from either subarray
    if (@left.elems > 0) {
        push @result, @left;
    } else {
        push @result, @right;
    }

    return @result;
}

# Function to perform merge sort on an array
sub merge-sort(@arr) {
    # Base case - if the array only has one element, it is already sorted
    return @arr if (@arr.elems <= 1);

    # Recursively split the array into two subarrays and merge them
    my ($left, $right) = split-array(@arr);
    return merge-sorted(merge-sort($left), merge-sort($right));
}

# Example usage
my @array = 3, 1, 5, 2, 4;
say "Unsorted array: " ~ @array;
@array = merge-sort(@array);
say "Sorted array: " ~ @array;

# Output:
# Unsorted array: [3 1 5 2 4]
# Sorted array: [1 2 3 4 5]