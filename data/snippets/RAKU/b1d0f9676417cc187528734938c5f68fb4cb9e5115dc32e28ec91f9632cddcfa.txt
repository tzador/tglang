# This code snippet calculates the nth number in the Fibonacci sequence using memoization

# Define a MemoizationHash to store previously calculated values
my %fibonacci-memo;

# Define a recursive subroutine to calculate the Fibonacci number
sub fibonacci(Int $n) {
    # Check if the value has already been calculated and stored in the MemoizationHash
    if %fibonacci-memo{$n}:exists {
        # If so, return the stored value
        return %fibonacci-memo{$n};
    }
    else {
        # Otherwise, calculate the value
        if $n < 2 {
            # Base cases for 0 and 1
            return $n;
        }
        else {
            # Recursive call to calculate the previous two values
            my $result = fibonacci( $n - 1 ) + fibonacci( $n - 2 );

            # Store the result in the MemoizationHash for future use
            %fibonacci-memo{$n} = $result;

            # Return the calculated value
            return $result;
        }
    }
}

# Prompt the user to enter the position of the Fibonacci number they want to calculate
print "Enter the position of the Fibonacci number: ";

# Read and store the input
my $n = prompt();

# Call the fibonacci subroutine with the input as the parameter
my $result = fibonacci($n);

# Print the result
print "The $n th Fibonacci number is: $result";