# This program calculates the nth number in the Fibonacci sequence
# by using memoization and dynamic programming techniques

# Initialize a cache to store previously calculated Fibonacci numbers
my %cache;

# Define a subroutine to calculate the nth number in the Fibonacci sequence
sub fib($n) {
    
    # Check if the number is already in the cache
    if %cache{$n}:exists {
        return %cache{$n};
    }
    
    # Base cases: if n is 0 or 1, return n
    if $n == 0 | $n == 1 {
        return $n;
    }
    
    # Otherwise, use dynamic programming to calculate the Fibonacci number
    else {
        
        # Calculate the previous two Fibonacci numbers
        my $f1 = fib($n-1);
        my $f2 = fib($n-2);
        
        # Add them together and store the result in the cache
        my $result = $f1 + $f2;
        %cache{$n} = $result;
        
        # Return the calculated Fibonacci number
        return $result;
    }
}

# Take user input for the nth number to calculate
print "Enter the value of n: ";
my $n = prompt();

# Call the fib subroutine and store the result in a variable
my $result = fib($n);

# Print the result
say "The $n-th number in the Fibonacci sequence is: $result";