// Define a class representing a car
class Car {
    // Properties of car class
    private String make
    private String model
    private int year
    private int mileage

    // Constructor for car class
    Car(String make, String model, int year, int mileage) {
        this.make = make
        this.model = model
        this.year = year
        this.mileage = mileage
    }

    // Method to calculate the current value of the car
    def getCurrentValue() {
        // Define a map of makes and their corresponding depreciation rates
        def depreciationRates = [ "Toyota": 0.85, "Honda": 0.8, "Ford": 0.75, "Chevrolet": 0.7, "Nissan": 0.65]

        // Calculate the depreciation rate based on the make of the car
        def depreciationRate = depreciationRates.get(this.make)

        // Calculate the current value of the car based on the depreciation rate
        def currentValue = this.mileage * depreciationRate

        // Return the current value of the car
        return currentValue
    }

    // Method to update the mileage of the car
    void updateMileage(int newMileage) {
        // Check if the new mileage is valid
        if (newMileage > this.mileage) {
            // Set the new mileage for the car
            this.mileage = newMileage
            println("Mileage successfully updated for ${this.year} ${this.make} ${this.model} to ${newMileage}")
        } else {
            println("Invalid mileage input. New mileage must be greater than current mileage.")
        }
    }
}

// Instantiate a new car object
def myCar = new Car("Toyota", "Camry", 2015, 50000)

// Update the mileage of the car
myCar.updateMileage(60000)

// Get the current value of the car
def currentValue = myCar.getCurrentValue()

// Print the current value of the car with some formatting
println("The current value of the ${myCar.year} ${myCar.make} ${myCar.model} is $${currentValue.format('%.2f')}.")