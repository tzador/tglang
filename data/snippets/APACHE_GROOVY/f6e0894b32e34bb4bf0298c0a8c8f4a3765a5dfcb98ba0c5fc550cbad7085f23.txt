class CustomLinkedList {
    Node head
    int size

    /**
     * Adds a new value to the end of the linked list.
     * @param value The value to be added.
     */
    void add(value) {
        Node newNode = new Node(value)

        if (head == null) {
            head = newNode
        } else {
            Node current = head

            while (current.next != null) {
                current = current.next
            }

            current.next = newNode
        }

        size++
    }

    /**
     * Inserts a new value at the specified index.
     * @param index The index at which to insert the value.
     * @param value The value to be inserted.
     */
    void insertAt(index, value) {
        if (index < 0 || index > size) {
			throw new IndexOutOfBoundsException("Invalid index: $index")
		}

        Node newNode = new Node(value)

        if (index == 0) {
            newNode.next = head
            head = newNode
        } else {
            int currentIndex = 0
            Node current = head

            while (currentIndex < index - 1) {
                current = current.next
                currentIndex++
            }

            newNode.next = current.next
            current.next = newNode
        }

        size++
    }

    /**
     * Removes the value at the specified index.
     * @param index The index at which to remove the value.
     * @return The removed value.
     */
    def removeAt(index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Invalid index: $index")
        }

        if (index == 0) {
            Node removedNode = head
            head = head.next
            removedNode.next = null
            return removedNode.value
        } else {
            int currentIndex = 0
            Node current = head

            while (currentIndex < index - 1) {
                current = current.next
                currentIndex++
            }

            Node removedNode = current.next
            current.next = current.next.next
            removedNode.next = null
            return removedNode.value
        }

        size--
    }

    /**
     * Gets the value at the specified index.
     * @param index The index of the value to be retrieved.
     * @return The value at the specified index.
     */
    def get(index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Invalid index: $index")
        }

        Node current = head

        for (int i = 0; i < index; i++) {
            current = current.next
        }

        return current.value
    }

    /**
     * Checks whether the linked list contains a given value.
     * @param value The value to be checked.
     * @return True if the value is present, otherwise False.
     */
    def contains(value) {
        Node current = head

        while (current != null) {
            if (current.value == value) {
                return true
            }

            current = current.next
        }

        return false
    }

    /**
     * Gets the size of the linked list.
     * @return The number of elements in the linked list.
     */
    def size() {
        return size
    }

    /**
     * Node class which represents a single element in the linked list.
     * Contains a value and a pointer to the next node in the list.
     */
    class Node {
        def value
        Node next

        Node(def value) {
            this.value = value
        }
    }
}