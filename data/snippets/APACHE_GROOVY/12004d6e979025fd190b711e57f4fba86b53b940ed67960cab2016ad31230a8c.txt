/*
This code snippet is an example of a Groovy class that implements a binary search algorithm. 
Binary search is a searching algorithm that works on sorted arrays by repeatedly dividing the search interval in half.
*/

// Define a binary search class
class BinarySearch {

  // Create a method to perform binary search
  static def binarySearch(int[] arr, int low, int high, int target) {

    // Check for base case
    if (high >= low) {

      // Calculate mid point of array
      int mid = low + (high - low) / 2

      // Check if target is found at mid point
      if (arr[mid] == target) {
        return mid
      }
      // Check if target is less than mid point element, search left half of array
      if (arr[mid] > target) {
        return binarySearch(arr, low, mid - 1, target)
      }
      // Otherwise, target must be greater than mid point element, search right half of array
      return binarySearch(arr, mid + 1, high, target)
    }
    // If target is not found, return -1
    return -1
  }

  // Main method to test binary search functionality
  static void main(String[] args) {

    // Define input array
    int[] input = [3, 6, 9, 12, 15, 18, 21, 24]

    // Define target element to search for
    int target = 15

    // Get index of target element using binary search
    int index = binarySearch(input, 0, input.length - 1, target)

    // Print result
    println("Index of target element is: " + index)
  }
}

// Output:
// Index of target element is: 4