// This code snippet generates a list of all possible combinations
// of three elements from a given list

// Define a list to generate combinations from
def list = [1, 2, 3, 4]

// Initialize an empty list to store combinations
def combinations = []

// Define a recursive function to generate combinations 
// Takes in the current combination, number of elements left to choose, 
// and the remaining elements in the starting list
def generateCombinations = { currCombo, remaining, remainingList ->

    // Base case: when no more elements left to choose
    if(remaining == 0) {
        // Add current combination to list of combinations
        combinations << currCombo
    } else {
        // Loop through remaining elements in list
        for(int i = 0; i < remainingList.size(); i++) {
            // Add current element to current combination
            def newCombo = currCombo + remainingList[i]
            // Recursive call with updated current combination, 
            // one less element left to choose, and updated remaining list
            generateCombinations(newCombo, remaining - 1, 
                                remainingList.drop(i+1))
        }
    }
}

// Call recursive function to generate all combinations 
// of three elements from the given list
generateCombinations('', 3, list)

// Print out all combinations
println(combinations)