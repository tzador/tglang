// This code snippet uses Apache Groovy to create a multi-threaded program that calculates the sum of numbers from 1 to 1000

import java.util.concurrent.Callable
import java.util.concurrent.Executors
import java.util.concurrent.Future

// Create a callable class for calculating sum
class Sum implements Callable<Integer> {
    int start
    int end

    Sum(int s, int e) {
        start = s
        end = e
    }

    Integer call() {
        def sum = 0
        for (int i = start; i <= end; i++) {
            sum += i
        }
        return sum
    }
}

// Create a fixed thread pool with 5 threads
def executor = Executors.newFixedThreadPool(5)

// Create a list to store the Future objects
def results = []

// Create 5 callable objects and submit them to the executor
for (int i = 0; i < 5; i++) {
    def sum = new Sum(i * 200 + 1, (i + 1) * 200)
    results.add(executor.submit(sum))
}

// Wait for all tasks to complete
executor.shutdown()
executor.awaitTermination(1, java.util.concurrent.TimeUnit.MINUTES)

// Retrieve the results from the Future objects and calculate the final sum
def finalSum = 0
for (Future<Integer> result : results) {
    finalSum += result.get()
}

// Print the final sum
println("The sum of numbers from 1 to 1000 is ${finalSum}")