// This code snippet shows a complex sorting algorithm using the Groovy programming language

// defining a list of numbers to sort
def numList = [5, 7, 1, 9, 4, 3, 8, 2, 6]

// creating a helper function to swap two elements in a list
def swap = { list, i, j ->
    def temp = list[i]
    list[i] = list[j]
    list[j] = temp
}

// creating a function to perform the sorting algorithm
def quickSort = { list ->
    // base case: if the list has 0 or 1 element, it is already sorted
    if (list.size() < 2) {
        return list
    }

    // selecting a pivot element (in this case, the last element in the list)
    def pivot = list[-1]

    // creating two sublists, one for elements smaller than the pivot, and one for elements larger than the pivot
    def smaller = []
    def larger = []

    // iterating through the list and comparing each element to the pivot
    for (int i = 0; i < list.size() - 1; i++) {
        if (list[i] < pivot) {
            smaller.add(list[i])
        } else {
            larger.add(list[i])
        }
    }

    // recursively calling the function on the two sublists and combining them with the pivot in the middle
    return (quickSort(smaller) + [pivot] + quickSort(larger)).each { swap(list, it, list.indexOf(it)) }
}

// calling the quickSort function on the initial list and storing the sorted list in a variable
def sortedList = quickSort(numList)

// printing the sorted list
println("Sorted list: $sortedList")