/* This is a complex code snippet in APACHE_GROOVY that generates a list of prime numbers using the Sieve of Eratosthenes algorithm */

// Define a function to generate prime numbers up to a given limit
def sieveOfEratosthenes(limit) {

    // Create a Boolean array to store prime number flags
    Boolean[] isPrime = new Boolean[limit + 1].collect { true }

    // By definition, 0 and 1 are not considered prime numbers
    isPrime[0] = false
    isPrime[1] = false

    // Start with the first prime number, 2, and iterate through all numbers up to the square root of the limit
    for (int i = 2; (i * i) <= limit; i++) {

        // If the current number is marked as prime, then it is a prime number
        if (isPrime[i]) {

            // Mark all multiples of the current prime number as not prime
            for (int j = (i * i); j <= limit; j += i) {
                isPrime[j] = false
            }
        }
    }

    // Create a new list to store the prime numbers
    List<Integer> primeNumbers = []

    // Add all numbers that are marked as prime to the list
    isPrime.eachWithIndex { isPrime, index ->
        if (isPrime) {
            primeNumbers << index
        }
    }

    // Return the list of prime numbers
    return primeNumbers
}

// Call the function with a limit of 100 and print the result
println sieveOfEratosthenes(100)