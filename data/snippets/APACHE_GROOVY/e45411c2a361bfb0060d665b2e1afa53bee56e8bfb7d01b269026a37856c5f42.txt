// This code snippet generates a random password with a length of 10 characters
import javax.crypto.Cipher
import javax.crypto.SecretKeyFactory
import javax.crypto.spec.PBEKeySpec
import org.apache.commons.lang3.RandomStringUtils

// Generate a salt for added security
byte[] salt = SecureRandom.getSeed(16)

// Create a key spec using the salt and password
PBEKeySpec keySpec = new PBEKeySpec("MySecretPassword".toCharArray(), salt, 10000, 256)

// Generate a secret key using PBKDF2 algorithm
SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256")
SecretKey secretKey = keyFactory.generateSecret(keySpec)

// Initialize a cipher with AES encryption
Cipher cipher = Cipher.getInstance("AES")

// Generate a random initialization vector
byte[] iv = new byte[16]
SecureRandom random = new SecureRandom()
random.nextBytes(iv)

// Initialize the cipher with secret key and IV
cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(iv))

// Generate random password of specified length
String randomPassword = RandomStringUtils.randomAlphanumeric(10)

// Encrypt the password using cipher
byte[] encryptedPassword = cipher.doFinal(randomPassword.getBytes())

// Print the encrypted password in hexadecimal format
println("Encrypted password: " + encryptedPassword.toString())

// For decryption, initialize the cipher and use the same IV and secret key
cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(iv))

// Decrypt the password and convert to string
byte[] decryptedPassword = cipher.doFinal(encryptedPassword)
String originalPassword = new String(decryptedPassword)

// Print the original password
println("Original password: " + originalPassword)