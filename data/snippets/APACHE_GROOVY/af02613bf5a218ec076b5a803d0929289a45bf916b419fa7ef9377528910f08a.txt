// Define function to calculate factorial of a number
static int factorial(int n) {
    // Base case
    if (n == 0 || n == 1) {
        return 1
    }
    // Recursive call
    return n * factorial(n -1)
}

// Define function to find largest number in a list
static int findLargest(list) {
    // Base case
    if (list.size() == 1) {
        return list[0]
    }
    // Recursive call
    return Math.max(list[0], findLargest(list[1..-1]))
}

// Define function to reverse a string
static String reverseString(String str) {
    // Base case
    if (str.size() == 1) {
        return str
    }
    // Recursive call
    return reverseString(str[1..-1]) + str[0]
}

// Define function to check if a string is a palindrome
static boolean isPalindrome(String str) {
    // Base case
    if (str.size() == 1 || str.size() == 0) {
        return true
    }
    // Recursive call
    return str[0] == str[-1] && isPalindrome(str[1..-2])
}

// Define function to sort a list using merge sort algorithm
static List mergeSort(List list) {
    // Base case
    if (list.size() < 2) {
        return list
    }
    // Divide list into two sublists
    int middle = list.size() / 2
    List left = list[0..middle - 1]
    List right = list[middle..-1]

    // Sort sublists using recursive call
    List sortedLeft = mergeSort(left)
    List sortedRight = mergeSort(right)

    // Merge sorted sublists
    return merge(sortedLeft, sortedRight)
}

// Helper function to merge two sorted lists
static List merge(List left, List right) {
    List result = []
    // Loop until one of the lists is empty
    while (left.size() > 0 && right.size() > 0) {
        // Compare first elements of both lists
        if (left[0] < right[0]) {
            // Add first element of left list to result
            result << left.remove(0)
        } else {
            // Add first element of right list to result
            result << right.remove(0)
        }
    }
    // Add remaining elements of non-empty list to result
    result << left << right
    return result
}