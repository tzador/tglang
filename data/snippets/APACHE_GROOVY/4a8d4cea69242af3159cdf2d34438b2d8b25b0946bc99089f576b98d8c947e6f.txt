/* This is a function that creates a list of all possible permutations of the elements in a given list */

def permuteList(List list) {

    /* If the given list is empty, return an empty list as there are no permutations */
    if (list.isEmpty()) {
        return []
    }

    /* If the given list only has one element, return a list with that element as the only permutation */
    if (list.size() == 1) {
        return [list]
    }

    /* Create an empty list to store the permutations */
    List result = []

    /* Iterate through each element in the list */
    list.each { element ->

        /* Create a temporary list to store the elements in the given list except for the current element */
        List tempList = list - element

        /* Recursively call permuteList function on the temporary list to get all possible permutations */
        List subPermutations = permuteList(tempList)

        /* For each sub-permutation, add the current element at the beginning to create a new permutation */
        subPermutations.each { permutation ->
            permutation.unshift(element)

            /* Add the new permutation to the result list */
            result.add(permutation)
        }
    }

    /* Finally, return the list of all permutations */
    return result
}

/* Example usage of the function */
def exampleList = [1, 2, 3]
def permutations = permuteList(exampleList)
println(permutations)
/* Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] */