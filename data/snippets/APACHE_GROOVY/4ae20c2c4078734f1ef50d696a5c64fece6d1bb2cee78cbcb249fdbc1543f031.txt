class Tree {
    // Defining a node in the tree
    class Node {
        // Value of the node
        def value
        // Left child of the node
        Node left
        // Right child of the node
        Node right
        // Constructor for the node class
        Node(def value) {
            this.value = value
        }
    }
    // Root node of the tree
    Node root
    // Method to add a new node to the tree
    void add(def value) {
        // If the tree is empty, make the new node the root node
        if (root == null) {
            root = new Node(value)
            return
        }
        // else, traverse the tree to find the appropriate position for the new node
        def current = root
        while (true) {
            // If the value of the new node is less than the current node, add it as the left child
            if (value < current.value) {
                if (current.left == null) {
                    current.left = new Node(value)
                    break
                } else {
                    current = current.left
                }
            // If the value of the new node is greater than the current node, add it as the right child
            } else if (value > current.value) {
                if (current.right == null) {
                    current.right = new Node(value)
                    break
                } else {
                    current = current.right
                }
            // If the value already exists in the tree, return without adding it
            } else {
                return
            }
        }
    }
    // Method to traverse the tree in-order (left-root-right)
    void inOrder(Node node) {
        if (node != null) {
            inOrder(node.left)
            println(node.value)
            inOrder(node.right)
        }
    }
    // Method to traverse the tree pre-order (root-left-right)
    void preOrder(Node node) {
        if (node != null) {
            println(node.value)
            preOrder(node.left)
            preOrder(node.right)
        }
    }
    // Method to traverse the tree post-order (left-right-root)
    void postOrder(Node node) {
        if (node != null) {
            postOrder(node.left)
            postOrder(node.right)
            println(node.value)
        }
    }
}
// Creating a new tree
Tree myTree = new Tree()
// Adding nodes to the tree
myTree.add(8)
myTree.add(3)
myTree.add(10)
myTree.add(1)
myTree.add(6)
myTree.add(14)
myTree.add(4)
// Printing the tree in-order
println("In-order traversal:")
myTree.inOrder(myTree.root)