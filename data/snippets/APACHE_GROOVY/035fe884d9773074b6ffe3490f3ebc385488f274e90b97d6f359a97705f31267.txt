/* This program calculates the nth Fibonacci number
   and uses memoization for optimized performance */

/* function to calculate the nth Fibonacci number
   using memoization */
memoizedFibonacci = { n ->
    /* define an empty map to store previously calculated
       Fibonacci numbers */
    Map<Integer, Integer> memo = [:]

    /* base case for n = 0 and n = 1 */
    memo.put(0, 0)
    memo.put(1, 1)

    /* recursive function to calculate the nth Fibonacci
       number using memoization */
    def calculateFibonacci = { n ->
        /* check if the Fibonacci number has already been
           calculated and stored in the map */
        if (memo.containsKey(n)) {
            /* if yes, return the value from the map */
            return memo.get(n)
        } else {
            /* if not, calculate the Fibonacci number
               recursively and store it in the map */
            def fib = calculateFibonacci(n-1) + calculateFibonacci(n-2)
            memo.put(n, fib)
            return fib
        }
    }

    /* return the nth Fibonacci number using the
       recursive function */
    return calculateFibonacci(n)
}

/* define the input value for n, i.e. the desired
   Fibonacci number to be calculated */
int n = 10

/* call the memoizedFibonacci function with n as
   the input parameter */
def fibonacci = memoizedFibonacci(n)

/* print the calculated Fibonacci number */
println("The ${n}th Fibonacci number is ${fibonacci}.")