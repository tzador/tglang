/* This is a complex code snippet in APACHE_GROOVY
It uses recursion to generate a binary tree structure
with randomly generated values.

The tree is then recursively traversed in pre-order to print out
all the values in the tree. */

// define a Node class for the binary tree
class Node {
    int value // node value
    Node leftChild // left child
    Node rightChild // right child
}

// function to generate a random integer between a given range
def generateRandomInt(int min, int max) {
    return new Random().nextInt((max - min) + 1) + min;
}

// function to recursively generate a binary tree structure with random values
def generateBinaryTree(Node node, int depth, int maxDepth) {
    // base case: reached maximum depth
    if (depth >= maxDepth) {
        return
    }

    // generate left child
    node.leftChild = new Node(value: generateRandomInt(0, 100))
    // recursively generate left subtree with reduced depth
    generateBinaryTree(node.leftChild, depth + 1, maxDepth)

    // generate right child
    node.rightChild = new Node(value: generateRandomInt(0, 100))
    // recursively generate right subtree with reduced depth
    generateBinaryTree(node.rightChild, depth + 1, maxDepth)
}

// function to recursively traverse the binary tree in pre-order
def traverseBinaryTree(Node node) {
    if (node == null) {
        return // reached end of tree
    }

    // print out current node value
    print(node.value + " ")

    // traverse left subtree
    traverseBinaryTree(node.leftChild)

    // traverse right subtree
    traverseBinaryTree(node.rightChild)
}

// create root node and generate binary tree with depth = 4
Node root = new Node(value: generateRandomInt(0, 100))
generateBinaryTree(root, 0, 4)

// recursively traverse the binary tree in pre-order
traverseBinaryTree(root)