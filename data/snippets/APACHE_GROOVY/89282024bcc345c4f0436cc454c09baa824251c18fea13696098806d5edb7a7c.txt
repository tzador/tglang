// Define a class called Car
class Car {

  // Define private properties of the Car class
  private String brand
  private int year
  private String color

  // Define a constructor that takes in the brand and year of the car
  Car(String brand, int year) {
    this.brand = brand
    this.year = year
  }

  // Define a public method to set the color of the car
  public void setColor(String color) {
    this.color = color
  }

  // Define a static method to calculate the total distance traveled by all cars of the same brand
  static int calculateTotalDistance(Car[] cars, String brand) {
    int totalDistance = 0
    
    // Loop through the cars array and add up the distance of the cars with the given brand
    for (Car car : cars) {
      if (car.brand.equals(brand)) {
        totalDistance += car.year * 10000
      }
    }
    return totalDistance
  }

  // Define a method to print out the details of the car
  def printDetails() {
    println("Brand: $brand, Year: $year, Color: $color")
  }

  // Define a method to check if the car is a vintage car (over 25 years old)
  def isVintage() {
    if (year < 1996) {
      return true
    } else {
      return false
    }
  }
}

// Create an array of cars with different brands and years
Car[] cars = [
  new Car("Toyota", 2005),
  new Car("Honda", 2012),
  new Car("Ford", 1998),
  new Car("BMW", 2018)
]

// Set the color of the first car in the array
cars[0].setColor("blue")

// Print the details of the first car
cars[0].printDetails()

// Check if the first car is a vintage car
if (cars[0].isVintage()) {
  println("${cars[0].brand} is a vintage car.")
} else {
  println("${cars[0].brand} is not a vintage car.")
}

// Calculate the total distance traveled by all cars of the same brand
int totalDistance = Car.calculateTotalDistance(cars, "Ford")
println("Total distance traveled by all Ford cars is ${totalDistance}km.")