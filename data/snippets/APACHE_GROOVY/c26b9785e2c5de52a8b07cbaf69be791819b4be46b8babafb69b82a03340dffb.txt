// Custom HashMap class to store string keys and values
class CustomHashMap {
    // node to store key-value pair
    class Node {
        // variables
        String key
        String value
        Node next
        // constructor
        Node(String key, String value) {
            this.key = key
            this.value = value
            this.next = null
        }
    }
    // array to store linked lists
    Node[] array
    // constructor
    CustomHashMap(int size) {
        this.array = new Node[size]
    }
    // method to add key-value pair to the HashMap
    void put(String key, String value) {
        // calculate index using the hashcode of the key
        int index = key.hashCode() % array.length
        // check if a linked list exists at the index
        if(array[index] == null) {
            // create a new node and add it to the array at the index
            array[index] = new Node(key, value)
        } else {
            // traverse the linked list at the index
            Node current = array[index]
            while(current != null) {
                // check if the current node has the same key as the new key
                if(current.key.equals(key)) {
                    // update the value if the keys match
                    current.value = value
                    return
                }
                // move to the next node
                current = current.next
            }
            // add the new node to the front of the linked list
            Node newNode = new Node(key, value)
            newNode.next = array[index]
            array[index] = newNode
        }
    }
    // method to retrieve a value given its key
    String get(String key) {
        // calculate index using the hashcode of the key
        int index = key.hashCode() % array.length
        // check if a linked list exists at the index
        if(array[index] == null) {
            // return null if the key is not found
            return null
        } else {
            // traverse the linked list at the index
            Node current = array[index]
            while(current != null) {
                // check if the current node has the same key as the searched key
                if(current.key.equals(key)) {
                    // return the value if the keys match
                    return current.value
                }
                // move to the next node
                current = current.next
            }
            // return null if the key is not found
            return null
        }
    }
    // method to print out the HashMap in a readable format
    void print() {
        // loop through the array
        for(int i = 0; i < array.length; i++) {
            // print out the index
            System.out.print(i + ": ")
            // check if a linked list exists at the index
            if(array[i] == null) {
                // print out "empty" if the linked list is null
                System.out.print("empty")
            } else {
                // traverse the linked list at the index
                Node current = array[i]
                while(current != null) {
                    // print out the key-value pair in the format key=value
                    System.out.print(current.key + "=" + current.value + ", ")
                    // move to the next node
                    current = current.next
                }
            }
            // move to the next line
            System.out.println()
        }
    }
}

// create an instance of CustomHashMap with a size of 10
CustomHashMap map = new CustomHashMap(10)

// add key-value pairs to the map
map.put("name", "John")
map.put("age", "25")
map.put("city", "New York")
map.put("country", "USA")

// retrieve the value of a key
String name = map.get("name")
println("Name: $name")

// print out the HashMap
map.print()