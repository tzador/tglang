// This is a Groovy code snippet for generating prime numbers using the Sieve of Eratosthenes algorithm

// Define a function to generate prime numbers up to a given limit
def getPrimes(limit) {
    // Create an array of boolean values indicating whether a number is prime or not
    def primes = new boolean[limit + 1]
    // Set all values in the array to true
    primes.fill(true)

    // Set the first two values in the array (0 and 1) to false, as they are not prime numbers
    primes[0] = false
    primes[1] = false

    // Use the Sieve of Eratosthenes algorithm to mark off all multiples of a number as not prime
    for (int i = 2; i * i <= limit; i++) {
        // If the current number is marked as prime, mark off all its multiples as not prime
        if (primes[i]) {
            for (int j = i * i; j <= limit; j += i) {
                // Set the value at the current index to false, marking it as not prime
                primes[j] = false
            }
        }
    }

    // Create an empty list to store the prime numbers
    def primeNumbers = []

    // Loop through the boolean array and add all numbers marked as prime to the list
    for (int i = 2; i <= limit; i++) {
        if (primes[i]) {
            primeNumbers << i
        }
    }

    // Return the list of prime numbers
    return primeNumbers
}

// Call the function to generate prime numbers up to 100
def primes = getPrimes(100)
// Print the list of prime numbers
println(primes)