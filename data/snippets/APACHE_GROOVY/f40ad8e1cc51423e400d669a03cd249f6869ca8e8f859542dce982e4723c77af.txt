// Groovy code snippet to find the closest Fibonacci number smaller than a given number

// Function to find the closest Fibonacci number smaller than a given number
def closestFibonacci(number) {
    // Check if the given number is a Fibonacci number
    if(isFibonacci(number)) {
        // Return the number itself since it is a Fibonacci number
        return number
    } else {
        // Initialize variables to store two consecutive Fibonacci numbers
        def prevFib = 0
        def currFib = 1

        // Loop through Fibonacci sequence until current Fibonacci number is greater than the given number
        while(currFib <= number) {
            // Update the previous and current Fibonacci numbers
            def temp = currFib
            currFib = prevFib + currFib
            prevFib = temp
        }

        // Return the previous Fibonacci number since it is the closest Fibonacci number smaller than the given number
        return prevFib
    }
}

// Function to check if a number is a Fibonacci number
def isFibonacci(number) {
    // Initialize variables to store two consecutive Fibonacci numbers
    def prevFib = 0
    def currFib = 1

    // Loop through Fibonacci sequence until current Fibonacci number is equal to or greater than the given number
    while(currFib < number) {
        // Update the previous and current Fibonacci numbers
        def temp = currFib
        currFib = prevFib + currFib
        prevFib = temp
    }

    // If the given number is equal to the current Fibonacci number, it is a Fibonacci number
    if(currFib == number) {
        return true
    } else {
        return false
    }
}

// Sample input
def number = 21

// Call the closestFibonacci function and store the result in a variable
def closestNumber = closestFibonacci(number)

// Print the result
println("The closest Fibonacci number smaller than $number is $closestNumber.")