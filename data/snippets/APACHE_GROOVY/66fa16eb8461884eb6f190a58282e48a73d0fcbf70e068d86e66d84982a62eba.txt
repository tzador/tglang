/*
This code is a demo of how to use closures in Apache Groovy.
Closures are first-class functions that can be passed around as objects and executed later.
They can also have their own local variables, allowing for code that is more concise and functional.
*/

//define a closure that takes in a parameter and adds it to a running total
def sumClosure = { num ->
    int runningTotal = 0 //local variable within the closure
    runningTotal += num //add the parameter to the total
    return runningTotal //return the total
}

//create a list of numbers to pass into the closure
def numbers = [1, 2, 3, 4, 5]

//use the collect method to apply the closure to each number in the list
def results = numbers.collect(sumClosure)

//print out the results, which should be [1, 3, 6, 10, 15]
println results

//define a closure that takes in a parameter and doubles it
def doubleClosure = { number ->
    number * 2 //cannot assign this to a variable since it is the last statement in the closure
}

//use the find method to find the first number in the list that, when doubled, is greater than 8
def number = numbers.find { number ->
    doubleClosure(number) > 8
}

//print out the number, which should be 5
println number

//define a closure that takes in two parameters and multiplies them
def multiplyClosure = { num1, num2 ->
    num1 * num2
}

//use the collectEntries method to create a map of numbers and their products with 2
def products = numbers.collectEntries { number ->
    [(number): multiplyClosure(number, 2)] //use a map as the closure's return value
}

//print out the map, which should be [1: 2, 2: 4, 3: 6, 4: 8, 5: 10]
println products