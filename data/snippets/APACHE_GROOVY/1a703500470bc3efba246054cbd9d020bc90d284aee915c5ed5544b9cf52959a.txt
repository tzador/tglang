/*
This class represents a student and contains methods to calculate their grades,
attendance, and overall performance in the class
*/
class Student {
  //instance variables
  String name
  int[] grades
  int attendance

  /* constructor for creating a new student object with their name and initial grades
  * name - string representing the student's name
  * grades - integer array representing the student's initial grades in the class
  */
  Student(String name, int[] grades) {
    this.name = name
    this.grades = grades
    this.attendance = 100 //initialize attendance to 100%
  }

  /* method to add a new grade to the student's array of grades
  * grade - integer representing the new grade to be added
  */
  void addGrade(int grade) {
    //check if grade is within valid range of 0-100
    if(grade >= 0 && grade <= 100) {
      //create a new array with a larger size to hold the new grade
      int[] newGrades = new int[grades.size() + 1]
      //copy previous grades to the new array
      System.arraycopy(grades, 0, newGrades, 0, grades.size())
      //add the new grade to the end of the array
      newGrades[grades.size()] = grade
      //update the grades variable to hold the new array
      grades = newGrades
    } else {
      //handle error if grade is not within valid range
      println("Error: Grade must be between 0 and 100.")
    }
  }

  /* method to update the student's attendance
  * attended - boolean representing whether the student attended class or not
  */
  void updateAttendance(boolean attended) {
    //if student did not attend class, decrease attendance by 5%
    if(!attended) {
      attendance -= 5
    }
  }

  /* method to calculate the student's average grade in the class
  * returns the calculated average grade as a double
  */
  double calculateAverageGrade() {
    //initialize sum variable to calculate total sum of grades
    int sum = 0
    //loop through grades array and add each grade to the sum
    for(int grade : grades) {
      sum += grade
    }
    //calculate average grade by dividing sum by number of grades
    return sum / grades.size()
  }

  /* method to calculate the student's overall performance in the class
  * returns the student's performance as a string
  */
  String calculatePerformance() {
    //calculate attendance percentage using attendance variable and format it to two decimal places
    double attendancePercentage = String.format("%.2f",(attendance / 100) * 100)
    //calculate average grade and format it to two decimal places
    double averageGrade = String.format("%.2f", calculateAverageGrade())
    //calculate overall performance by multiplying average grade by attendance percentage
    double performance = String.format("%.2f", averageGrade * attendancePercentage)
    //create and return a string with the calculated performance and student's name
    return "${name}'s performance: ${performance}%, based on an average grade of ${averageGrade}% and ${attendancePercentage}% attendance."
  }
}

//testing the Student class
//create a new student with name "John" and initial grades
Student john = new Student("John", [75, 82, 90])
//add a new grade of 85
john.addGrade(85)
//update attendance to false (did not attend class)
john.updateAttendance(false)
//calculate and print John's performance
println(john.calculatePerformance())