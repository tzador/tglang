// This code snippet generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm

// Create a function to generate the list of primes
def generatePrimes(int limit) {
    
    // Create a boolean array to represent if a number is prime or not
    boolean[] primes = new boolean[limit + 1]
    
    // Mark all numbers as prime initially
    for (int i = 0; i <= limit; i++) {
        primes[i] = true
    }
    
    // Set 0 and 1 as not prime
    primes[0] = false
    primes[1] = false
    
    // Use Sieve of Eratosthenes to mark non-prime numbers
    for (int i = 2; i <= Math.sqrt(limit); i++) {
        
        // If the number is marked as prime, mark its multiples as not prime
        if (primes[i]) {
            for (int j = i * i; j <= limit; j += i) {
                primes[j] = false
            }
        }
    }
    
    // Create a list to store the prime numbers
    List<Integer> primeList = new ArrayList<>()
    
    // Add all the prime numbers to the list
    for (int i = 0; i <= limit; i++) {
        if (primes[i]) {
            primeList.add(i)
        }
    }
    
    // Return the list of primes up to the limit
    return primeList
}

// Call the function with a limit of 100 and print the output
print generatePrimes(100)