//This code snippet demonstrates the use of closures in Groovy

//Defining a closure with a parameter
def calculateArea = { radius ->
    pi * radius * radius
}

//Calling the closure with an argument
println "The area of a circle with radius 5 is " + calculateArea(5)

//Defining a closure with multiple parameters
def calculateVolume = { length, width, height ->
    length * width * height
}

//Calling the closure with arguments
println "The volume of a cube with length 5, width 10, and height 15 is " + calculateVolume(5, 10, 15)

//Defining a closure with a default value for a parameter
def calculatePercentage = { value, percent = 0.1 ->
    value * percent
}

//Calling the closure with one argument
println "10% of 100 is " + calculatePercentage(100)

//Calling the closure with two arguments
println "20% of 100 is " + calculatePercentage(100, 0.2)

//Defining a closure with multiple statements
def calculateDiscount = { originalPrice, discount ->
    def discountedPrice = originalPrice - (originalPrice * discount)
    println "The original price is " + originalPrice
    println "The discount applied is " + (discount * 100) + "%"
    println "The discounted price is " + discountedPrice
    discountedPrice //returning the discounted price from the closure
}

//Calling the closure and storing the returned value in a variable
def finalPrice = calculateDiscount(500, 0.2)
println "The final price after 20% discount is " + finalPrice

//Defining a closure with a body and explicit return statement
def calculateFactorial = { num ->
    def result = 1
    for (i in 1..num) {
        result *= i
    }
    return result //explicitly returning result
}

//Calling the closure and storing the returned value in a variable
def factorialOfTen = calculateFactorial(10)
println "The factorial of 10 is " + factorialOfTen