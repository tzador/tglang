/*
Groovy code for finding the longest Palindrome string in a given string
*/

// define a function to check if a string is a palindrome
def isPalindrome(str) {
    // convert the string to lowercase
    str = str.toLowerCase()
    // loop through the string
    for (int i = 0; i < str.length() / 2; i++) {
        // compare the characters from both ends of the string
        if (str[i] != str[str.length() - i - 1]) {
            return false // if characters don't match, string is not a palindrome
        }
    }
    return true // if the whole string has been checked and characters all match, string is a palindrome
}

// define function to find the longest palindrome in a given string
def findLongestPalindrome(str) {
    // initialize variables
    def longestPalindrome = ""
    def currentPalindrome = ""
    // loop through the string
    for (int i = 0; i < str.length() - 1; i++) {
        // create substring starting from index i
        def subString = str.substring(i)
        // loop through substring
        for (int j = subString.length(); j > 0; j--) {
            // create substring with length j
            def sub = subString.substring(0, j)
            // check if substring is a palindrome
            if (isPalindrome(sub)) {
                // if yes, check if it is longer than current longest palindrome
                if (sub.length() > longestPalindrome.length()) {
                    longestPalindrome = sub // update longest palindrome accordingly
                }
            }
        }
    }
    return longestPalindrome // return the longest palindrome found
}

// example output
def string = "abracadabra"
println(findLongestPalindrome(string)) // output: "aca"