// This code snippet generates a random maze using Prim's algorithm
// Define the maze dimensions
def width = 10
def height = 10

// Create a maze grid with all walls
def maze = Array(width) { Array(height) { true } }

// Define starting position
def start = [0, 0]

// Define list of visited cells
def visited = [start]

// Define list of wall cells
def walls = []

// Function to get neighbors of a cell
def getNeighbors(cell) {
    def x = cell[0]
    def y = cell[1]
    [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]].findAll { it[0] >= 0 && it[0] < width && it[1] >= 0 && it[1] < height }
}

// Function to remove a wall between two cells
def removeWall(fromCell, toCell) {
    if (fromCell[0] == toCell[0]) {
        // Cells are in same column
        if (fromCell[1] < toCell[1]) {
            // `fromCell` is above `toCell`
            maze[fromCell[0]][fromCell[1] + 1] = false
        } else {
            // `fromCell` is below `toCell`
            maze[fromCell[0]][fromCell[1]] = false
        }
    } else {
        // Cells are in same row
        if (fromCell[0] < toCell[0]) {
            // `fromCell` is to the left of `toCell`
            maze[fromCell[0] + 1][fromCell[1]] = false
        } else {
            // `fromCell` is to the right of `toCell`
            maze[fromCell[0]][fromCell[1]] = false
        }
    }
}

// Function to generate maze using Prim's algorithm
def generateMaze() {
    def currentCell = [0, 0]
    visited.add(currentCell)
    
    def neighbors = getNeighbors(currentCell)
    
    // Add walls of current cell to `walls`
    neighbors.each { neighbor ->
        if (neighbor[0] != currentCell[0] && neighbor[1] != currentCell[1]) {
            walls.add([neighbor[0], currentCell[1]])
            walls.add([currentCell[0], neighbor[1]])
        } else if (neighbor[0] == currentCell[0]) {
            walls.add([currentCell[0], neighbor[1]])
        } else {
            walls.add([neighbor[0], currentCell[1]])
        }
    }
    
    while (walls.size() > 0) {
        // Randomly select a wall and remove it
        def index = new Random().nextInt(walls.size())
        def wall = walls[index]
        walls.remove(index)
        
        
        // Check if wall separates two visited cells
        def cell1 = [wall[0], wall[1] - 1]
        def cell2 = [wall[0], wall[1] + 1]
        
        if (cell1 in visited && cell2 in visited) {
            removeWall(cell1, cell2)
        }
        
        // Check if wall separates visited cell and unvisited cell
        def unvisitedCell = []
        
        if (cell1 in visited && cell2 !in visited) {
            unvisitedCell = cell2
        } else if (cell1 !in visited && cell2 in visited) {
            unvisitedCell = cell1
        }
        
        if (unvisitedCell.size() > 0) {
            removeWall(unvisitedCell, wall)
            currentCell = unvisitedCell
            visited.add(currentCell)
            
            // Add walls of current cell to `walls`
            neighbors = getNeighbors(currentCell)
            neighbors.each { neighbor ->
                if (neighbor[0] != currentCell[0] && neighbor[1] != currentCell[1]) {
                    walls.add([neighbor[0], currentCell[1]])
                    walls.add([currentCell[0], neighbor[1]])
                } else if (neighbor[0] == currentCell[0]) {
                    walls.add([currentCell[0], neighbor[1]])
                } else {
                    walls.add([neighbor[0], currentCell[1]])
                }
            }
        }       
    }
}

// Function to print the maze
def printMaze() {
    // Print top wall
    print("+")
    for (int i = 0; i < width; i++) {
        print("---+")
    }
    println()
    
    for (int j = 0; j < height; j++) {
        // Print left wall
        print("|")
        
        for (int k = 0; k < width; k++) {
            if (maze[k][j]) {
                print("   |")
            } else {
                print("    ")
            }
        }
        
        println()
        
        // Print bottom wall
        print("+")
        for (int i = 0; i < width; i++) {
            print("---+")
        }
        println()
    }
}

// Generate and print the maze
generateMaze()
printMaze()