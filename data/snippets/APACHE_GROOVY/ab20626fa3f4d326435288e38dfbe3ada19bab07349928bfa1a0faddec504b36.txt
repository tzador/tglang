def numList = [3, 8, 1, 6, 4, 2, 9, 5, 12, 7]

//function to partition list based on a pivot element
def partition(list, left, right, pivot) {
    def pivotVal = list[pivot] //pivot element
    def temp = list[right] //last element of list
    list[right] = list[pivot] //swap pivot element with last element
    list[pivot] = temp
    def storeIndex = left

    //loop through list and move elements smaller than pivot to the left of storeIndex
    for (def i=left; i<right; i++) {
        if(list[i] < pivotVal) {
            temp = list[i]
            list[i] = list[storeIndex]
            list[storeIndex] = temp
            storeIndex++
        }
    }

    //swap pivot element with element at storeIndex
    temp = list[right]
    list[right] = list[storeIndex]
    list[storeIndex] = temp
    return storeIndex
}

//function to perform quicksort on list
def quicksort(list, left, right) {
    if(left < right) {
        def pivot = left + (right - left) / 2 //choose pivot element
        def pivotNewIndex = partition(list, left, right, pivot) //get new index of pivot element after partitioning
        quicksort(list, left, pivotNewIndex-1) //recursively call quicksort on left half of list
        quicksort(list, pivotNewIndex+1, right) //recursively call quicksort on right half of list
    }
}

quicksort(numList, 0, numList.size()-1)
println(numList) //outputs sorted list in ascending order: [1, 2, 3, 4, 5, 6, 7, 8, 9, 12]