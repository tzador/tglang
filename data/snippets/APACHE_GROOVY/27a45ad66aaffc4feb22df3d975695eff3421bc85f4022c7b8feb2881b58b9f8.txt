class Car {
    String brand
    String model
    int year
    float fuelCapacity

    // Constructor
    Car(String carBrand, String carModel, int carYear, float fuelCap) {
        this.brand = carBrand
        this.model = carModel
        this.year = carYear
        this.fuelCapacity = fuelCap
    }

    // Method to calculate maximum distance traveled based on fuel efficiency
    float calculateMaxDistance(float fuelEfficiency) {
        return this.fuelCapacity * fuelEfficiency
    }

    // Static method to check if a certain car brand is eligible for a tax deduction
    static boolean isTaxDeductible(String brand) {
        String[] eligibleBrands = ["Toyota", "Honda", "Ford", "Chevrolet", "Nissan"]
        for (String b : eligibleBrands) {
            if (b.equals(brand)) {
                return true
            }
        }
        return false
    }

    // Main method to create a car object and call the methods
    static void main(String[] args) {
        // Create a new car object with brand, model, year, and fuel capacity parameters
        Car myCar = new Car("Toyota", "Camry", 2015, 15.5)

        // Calculate the maximum distance the car can travel with a fuel efficiency of 10 km/L
        float maxDistance = myCar.calculateMaxDistance(10.0)

        // Check if the car brand is eligible for a tax deduction
        boolean isEligible = Car.isTaxDeductible(myCar.brand)

        // Print out the car details and maximum distance
        println("Brand: " + myCar.brand)
        println("Model: " + myCar.model)
        println("Year: " + myCar.year)
        println("Fuel capacity: " + myCar.fuelCapacity + " liters")
        println("Maximum distance: " + maxDistance + " km")

        // Print out the tax deduction eligibility
        if (isEligible) {
            println("This car is eligible for a tax deduction.")
        } else {
            println("This car is not eligible for a tax deduction.")
        }
    }
}