// This code snippet demonstrates a generic class with multiple methods and properties
// that can be accessed by creating an instance of the class

// Define the generic class with type parameters
class GenericClass<T, U> {
    // Define some properties
    List<T> list = []
    Map<U, T> map = [:]
    String stringValue
    Integer integerValue

    // Create a constructor to set initial values for properties
    GenericClass(List<T> initialList, Map<U, T> initialMap, String initialString, Integer initialInteger) {
        this.list = initialList
        this.map = initialMap
        this.stringValue = initialString
        this.integerValue = initialInteger
    }

    // Define a method that adds an element to the list property
    def addToList(T element) {
        list.add(element)
    }

    // Define a method that removes an element from the list property
    def removeFromList(T element) {
        list.remove(element)
    }

    // Define a method that adds a key-value pair to the map property
    def addToMap(U key, T value) {
        map.put(key, value)
    }

    // Define a method that removes a key-value pair from the map property
    def removeFromMap(U key) {
        map.remove(key)
    }
}

// Create an instance of the GenericClass class with different data types
def genericInstance = new GenericClass<String, Integer>(
        ['apple', 'orange', 'banana'],
        [1: 'red', 2: 'orange', 3: 'yellow'],
        'Groovy',
        10
)

// Access and manipulate the properties and methods of the instance
genericInstance.addToList('strawberry')
genericInstance.addToMap(4, 'green')
genericInstance.removeFromList('banana')
genericInstance.removeFromMap(1)

// Print out the final state of the properties
println "List: $genericInstance.list"
println "Map: $genericInstance.map"
println "String: $genericInstance.stringValue"
println "Integer: $genericInstance.integerValue"

// Output:
// List: [apple, orange, strawberry]
// Map: [2: orange, 3: yellow, 4: green]
// String: Groovy
// Integer: 10