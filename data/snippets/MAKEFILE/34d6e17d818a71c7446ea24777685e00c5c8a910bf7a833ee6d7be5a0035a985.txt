# This is a sample makefile for a C++ project
# The code below handles compilation, linking, and cleaning

# Define variables for the compiler and compiler flags
CXX = g++ # This is the C++ compiler we will use
# -Wall enables warnings
# -std=c++11 sets the language standard
# -g enables debugging information
CXXFLAGS = -Wall -std=c++11 -g

# Define variable for the output executable file
EXEC = myProgram

# Define variable for source files
SRCS = main.cpp helper.cpp

# Define variable for object files
OBJS = $(SRCS:.cpp=.o) # This uses pattern substitution and replaces .cpp with .o

# Define rule to build the executable
$(EXEC): $(OBJS) # For the executable, we need all the object files first
	$(CXX) $(OBJS) -o $@ # $@ represents the target, which is the executable file

# Define rule to compile each source file into an object file
# $< represents the first prerequisite (source file)
.cpp.o:
	$(CXX) $(CXXFLAGS) -c $< # -c flag indicates compilation only, no linking

# Define clean rule to remove all generated files
clean:
	rm -f $(EXEC) $(OBJS)

# Define PHONY targets, which are actions and not file names
.PHONY: all clean

# Define all target to compile everything
all: $(EXEC)