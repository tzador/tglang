# This is a comment in a Makefile
# Variables can be defined using the variable name followed by a '=', and the value
# Variables can also be set using the export keyword, allowing the variable to be accessed by child processes

# example of two variables being defined
NAME = John Doe
AGE = 35

# example of using export to set a variable
export FILE = textfile.txt

# Targets are used to define actions that should be executed when a particular command is run
# Targets can have dependencies, which are other targets or files that need to be created or updated before the target can be executed
# Dependencies are defined after a colon (:) following the target name

# example of a target with dependencies
all: main.o functions.o
	gcc main.o functions.o -o output.exe

# The commands to execute for a target are indented using a tab character or four spaces
# targets can also have multiple commands, which are executed in the order they are listed
# In this example, if either of the dependencies are updated, the target will be executed
main.o: main.c
	gcc -c main.c
functions.o: functions.c
	gcc -c functions.c

# The .PHONY target is used to define targets that do not actually correspond to a file with the same name
.PHONY: clean
clean:
	rm *.o output.exe

# In addition to commands, targets can also have variables
# In this example, the $(NAME) variable will be substituted with its defined value when the target is executed
.PHONY: greeting
greeting:
	echo "Hello, $(NAME)! You are $(AGE) years old."

# Variables can also have default values, which can be overridden by setting the variable when calling the make command
# In this example, if no value is set for the FILE variable, a default value of 'default.txt' will be used
print-file:
	cat $(FILE:-default=default.txt)

# Conditional statements can also be used in Makefiles, using the 'ifeq' or 'ifneq' keywords
# In this example, if the FILE variable is set to 'textfile.txt', the output will be 'File found!', otherwise it will be 'File not found!'
ifeq ($(FILE), textfile.txt)
	@echo "File found!"
else
	@echo "File not found!"
endif