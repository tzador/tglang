# Makefile for building and compiling a C++ program with dependencies

# Define compiler and compile flags
CC = g++
CFLAGS = -Wall -g

# Define directories for source files, object files, and executable
SRCDIR = src
BUILDDIR = build
BINDIR = bin

# Define a list of source files and create a corresponding list of object files
SRC = $(wildcard $(SRCDIR)/*.cpp)
OBJ = $(patsubst $(SRCDIR)/%.cpp,$(BUILDDIR)/%.o,$(SRC))

# Define executable name
TARGET = $(BINDIR)/program

# Default target is executable
default: $(TARGET)

# Rule for creating executable
$(TARGET): $(OBJ)
	$(CC) $(CFLAGS) -o $@ $^

# Rule for creating object files from source files
$(BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

# Add a phony target for cleaning up object and executable files
.PHONY: clean
clean:
	rm -f $(OBJ) $(TARGET)

# Add a phony target for running the program
.PHONY: run
run:
	./$(TARGET)