# This makefile uses variables and functions for compiling a C program with headers and libraries
CC = gcc # Sets the compiler variable
CFLAGS = -I/mypath/headers # Sets the compiler flags to include header files from specified path
LDFLAGS = -L/mypath/libraries # Sets the linker flags to link libraries from specified path
SOURCES := main.c functions.c util.c # Lists all source files to be compiled
OBJECTS := $(SOURCES:.c=.o) # Uses substitution to change extension from .c to .o
PROGRAM = myprogram # Sets the name of the executable file 
# The first target in a makefile is the default target that gets executed when no target is specified
# Here, we create a default target to build the program with its object files
$(PROGRAM): $(OBJECTS) # Defines dependencies for the target
	$(CC) $(CFLAGS) $(OBJECTS) -o $(PROGRAM) $(LDFLAGS) # Compiles the program and links libraries
# Targets can also have prerequisites, in this case we create a target to generate object files
# Each prerequisite is a source file that needs to be compiled
$(OBJECTS): $(SOURCES) # Defines the prerequisites for the target
	$(CC) $(CFLAGS) -c $(@:.o=.c) -o $@ # Compiles each source file into an object file
# The .PHONY target is used to declare targets that are not associated with any files
.PHONY: clean # Here, clean is declared as a phony target
clean: # Commands for the clean target
	rm -rf $(OBJECTS) $(PROGRAM) # Removes all object files and the executable program