# This Makefile creates a binary executable for a C++ project with multiple source files, libraries, and dependencies

# Compiler and flag variables
CC = g++ # compiler
CFLAGS = -Wall -Wextra -Wpedantic -std=c++11 # c++ compiler flags

# Directories
SRCDIR = src # source directory
BINDIR = bin # output directory for executable
INCDIR = include # external header files directory
LIBDIR = lib # library directory

# External libraries
LIBS = -lm # math library

# Source files
SRCS = $(wildcard $(SRCDIR)/*.cpp) # find all .cpp files in source directory
OBJS = $(SRCS:.cpp=.o) # list of object files to be created from source files

# Target executable
TARGET = myprogram

# Rule to create executable
$(TARGET): $(OBJS)
	$(CC) -I$(INCDIR) -L$(LIBDIR) $^ -o $(BINDIR)/$@ $(LIBS)
	@echo "Successfully created executable $@"

# Compile .cpp source files into object files
%.o: %.cpp
	$(CC) $(CFLAGS) -I$(INCDIR) -c $< -o $@

# Clean up generated files
.PHONY: clean
clean:
	@rm -rf $(OBJS) $(BINDIR)/$(TARGET)
	@echo "Cleaned up generated files"