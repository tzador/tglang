# This is a comment in a MAKEFILE
# Define the variable "SOURCES" with a list of source files
SOURCES = file1.c file2.c file3.c
# Define the variable "OBJECTS" with the list of object files corresponding to the source files
OBJECTS = $(SOURCES:.c=.o)
# Define the variable "EXECUTABLE" with the name of the executable file to be generated
EXECUTABLE = program

# Specify the default target to be executed when the user runs "make" without any arguments
default: all

# Specify the target "all" with a list of dependencies and a recipe to be executed when the target is run
all: $(EXECUTABLE)

# Specify the target "clean" with a recipe to remove all object files and the executable file
clean:
	rm -f $(OBJECTS) $(EXECUTABLE)

# Specify the target "run" with a recipe to first compile the source files and then run the executable
run: $(EXECUTABLE)
	./$(EXECUTABLE)

# Specify the target "$(EXECUTABLE)" with a list of dependencies and a recipe to compile the source files and generate the executable
$(EXECUTABLE): $(OBJECTS)
	gcc $(OBJECTS) -o $(EXECUTABLE)

# Specify the target for each object file with a list of dependencies and a recipe to compile the corresponding source file
# The recipe first checks if the source file has been modified since the object file was last generated
# If yes, it compiles the source file into an object file, otherwise it does nothing
# This ensures that only modified source files are recompiled
%.o: %.c
	$(CC) -c $< -o $@

# Specify the variable "CC" with the compiler command to be used
# Here, we are using gcc as the compiler
CC=gcc

# Specify the variable "CFLAGS" with the flags to be passed to the compiler
# Here, we are enabling all warnings and using the C99 language standard
CFLAGS=-Wall -std=c99