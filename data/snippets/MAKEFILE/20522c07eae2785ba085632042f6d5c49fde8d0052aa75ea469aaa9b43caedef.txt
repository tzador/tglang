# This is a makefile that compiles and runs a C++ program
# Makefiles are used to automate the process of compiling code

# Define variables for the compiler and compiler flags
CC = g++
CFLAGS = -Wall -std=c++11

# Define the name of the output executable
TARGET = myprogram

# Define directories for source code and object files
SRCDIR = src
OBJDIR = obj

# Get all C++ files inside the source directory
SRCS = $(wildcard $(SRCDIR)/*.cpp)

# Convert the C++ source files into object files
# The 'patsubst' function replaces the '.cpp' extension with '.o'
OBJS = $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(SRCS))

# Create a rule to compile the object files
# The '@' symbol suppresses the print-out of the command being executed
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	@$(CC) $(CFLAGS) -c $< -o $@

# Create a rule to compile the executable
# The '$^' symbol represents all the dependencies (object files in this case)
$(TARGET): $(OBJS)
	@$(CC) $^ -o $@

# Create a 'clean' rule to remove all the generated object files and the executable
clean:
	@rm -f $(OBJDIR)/*.o $(TARGET)

# Create a 'run' rule to compile and execute the program
run: $(TARGET)
	@./$(TARGET)

# Make the 'run' rule the default one to execute when running 'make' command
# This ensures that the program will be compiled and run by default
# without the need to specify the 'run' rule
.PHONY: run

# Define a 'help' rule to print out the available make commands
help:
	@echo "Available make commands:"
	@echo "make - compile and run the program"
	@echo "make run - compile and run the program"
	@echo "make clean - remove all generated object files and the executable"
	@echo "make help - print out the available make commands"

# By default, when running 'make' command, it will compile and run the program
default: run