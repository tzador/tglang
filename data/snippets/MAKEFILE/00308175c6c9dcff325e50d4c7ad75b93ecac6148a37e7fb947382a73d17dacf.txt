# Define variables
OUT_DIR = build
SRC_DIR = src

# Define compilation flags
CXXFLAGS = -Wall -std=c++11
LDFLAGS = -lm

# Define sources
SRCS := $(wildcard $(SRC_DIR)/*.cpp)      # use built-in wildcard function to get all .cpp files
OBJS := $(patsubst $(SRC_DIR)/%.cpp, $(OUT_DIR)/%.o, $(SRCS))     # substitute SRC_DIR with OUT_DIR in all .cpp files
DEPS := $(OBJS:.o=.d)            # .d files store dependency info, generated by -MMD option in gcc

.PHONY: all clean
all: my_app                   # make the first target the default one, so just `make` will build my_app

# Use pattern rule to build object files
# $@ - target name, $< - first prerequisite, $^ - all prerequisites
$(OUT_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) -MMD -MF $(@:%.o=%.d) -c -o $@ $<
    
# Create executable
my_app: $(OBJS)
	$(CXX) $(LDFLAGS) -o $@ $^
    
# Include dependency files
-include $(DEPS)

clean:
	rm -rf $(OUT_DIR)