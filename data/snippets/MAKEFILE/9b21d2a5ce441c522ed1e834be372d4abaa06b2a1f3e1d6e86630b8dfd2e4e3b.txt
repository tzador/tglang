# This is a makefile for a C++ project

# Variables
CC = g++ # C++ compiler
CFLAGS = -Wall -O2 # Compiler flags
SRCDIR = src # Source directory
OBJDIR = obj # Object directory
BINDIR = bin # Binary directory

# Sources and Objects
SOURCES = $(wildcard $(SRCDIR)/*.cpp) # Get all .cpp files in source directory
OBJECTS = $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(SOURCES)) # Create list of .o files in object directory

# Targets
all: $(BINDIR)/output # Default target is output binary

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp # Rule to generate .o files
	$(CC) -c -o $@ $< $(CFLAGS) # Compile .cpp file to .o file

$(BINDIR)/output: $(OBJECTS) # Rule to generate output binary
	$(CC) -o $@ $(OBJECTS) # Link .o files to generate binary

.PHONY: clean # Make `clean` a phony target
clean:
	rm -f $(OBJDIR)/*.o # Remove all .o files

# End of makefile