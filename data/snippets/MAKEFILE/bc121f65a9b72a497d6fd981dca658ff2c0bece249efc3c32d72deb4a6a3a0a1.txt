#This part of the code sets the variables for the compiler and the flags for compilation
CC=gcc
CFLAGS=-Wall -g
#This part of the code sets the variable for the directory containing the source files
SRC_DIR=src
#This part of the code sets the variable for the directory where the object files will be placed
OBJ_DIR=obj
#This part of the code sets the variable for the directory where the executable will be placed
BIN_DIR=bin
#This part of the code creates a list of all the source files in the source directory
SRCS=$(wildcard $(SRC_DIR)/*.c)
#This part of the code creates a list of corresponding object files based on the source file names
OBJS=$(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SRCS))
#This part of the code creates a list of all the header files in the source directory
HEADERS=$(wildcard $(SRC_DIR)/*.h)
#This part of the code sets the name of the final executable
TARGET=program

#This part of the code defines a make target to compile the source files into object files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

#This part of the code defines a make target to compile the object files into the final executable
$(BIN_DIR)/$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) $(OBJS) -o $@

#This part of the code defines a make target to clean up the object files and the executable
clean:
	rm -f $(OBJ_DIR)/*.o $(BIN_DIR)/$(TARGET)

#This part of the code defines a make target to run the program
run: $(BIN_DIR)/$(TARGET)
	./$(BIN_DIR)/$(TARGET)

#This part of the code defines a make target to run the program with a specific input
test: $(BIN_DIR)/$(TARGET)
	./$(BIN_DIR)/$(TARGET) input.txt

#This part of the code defines the default make target, which will compile the program and run it
#It also ensures that the object and executable directories exist
all: | $(OBJ_DIR) $(BIN_DIR) $(BIN_DIR)/$(TARGET) run

#This part of the code defines a pragma to create the object and executable directories if they do not exist
.PHONY: all clean run test
$(BIN_DIR) $(OBJ_DIR):
	mkdir -p $@