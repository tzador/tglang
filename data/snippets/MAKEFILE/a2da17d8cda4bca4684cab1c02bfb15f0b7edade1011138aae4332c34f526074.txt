# Using variables to hold values
FILE_NAME := main.cpp
# Using conditional statement
ifdef FILE_NAME
# Using macros to define multiple commands
all: $(FILE_NAME)
# Using tab indentation to specify command
	$(CXX) -o output $(FILE_NAME) -Wall
endif
# Using for loop to iterate over a list
for current_file in source/*.cpp
# Using automatic variable to access iterator value
object_files = $(notdir $(patsubst %.cpp, %.o, $(current_file)))
# Using substitution references to set new variable value
old_value = ../lib/viewer
new_value = include/viewer
newer_object_files = $(old_value:$(new_value)=include/"")
# Using wildcard to search for all .o files
objects = $(wildcard *.o)
endef
# Using a function to execute shell command
define clean
	@echo "Cleaning up object files..."
	$(RM) $(objects) $(object_files) $(newer_object_files)
endef
# Calling function in a target
.PHONY:clean
clean: $(clean)
# Using parallel execution with the special .NOTPARALLEL target
.NOTPARALLEL: