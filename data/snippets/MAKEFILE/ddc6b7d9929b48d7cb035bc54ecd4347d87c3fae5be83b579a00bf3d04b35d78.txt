# Makefile for building and running a C++ project

# Variable defining the compiler
CC = g++

# Variable defining the compiler flags
CFLAGS = -Wall -g -std=c++11

# Variable defining the name of the executable
EXECUTABLE = myproject

# A rule for building the executable
$(EXECUTABLE): main.cpp functions.cpp
	$(CC) $(CFLAGS) $^ -o $@

# A rule for cleaning the project
clean:
	rm -f *.o $(EXECUTABLE)

# A phony target for running the project
run:
	./$(EXECUTABLE)

# A rule for generating documentation
docs:
	doxygen Doxyfile

# A phony target for cleaning and rebuilding the project
rebuild: clean $(EXECUTABLE)

# A rule for building a release version of the project
release:
	$(CC) $(CFLAGS) -O2 -DNDEBUG main.cpp functions.cpp -o $(EXECUTABLE)

# A rule for running tests
test: $(EXECUTABLE)
	./$(EXECUTABLE)

# A phony target for running all tests
test-all:
	$(foreach test, $(wildcard test_*), ./$(test);)

# A rule for building all test files
build-tests:
	$(foreach test, $(wildcard test_*), $(CC) $(CFLAGS) -c $(test);)

# A rule for cleaning all test files
clean-tests:
	$(foreach test, $(wildcard test_*), rm -f *.o $(test);)

# A rule for running memory leak tests
test-leaks: $(EXECUTABLE)
	valgrind --leak-check=full ./$(EXECUTABLE)

# A rule for compiling and linking all files
all: clean $(EXECUTABLE) docs build-tests

# Set the default target to all
.DEFAULT_GOAL = all