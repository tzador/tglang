# This is a complex code snippet in MAKEFILE language

# Declaring variables
CC = gcc 					# sets the compiler to gcc using the '=' sign
CFLAGS = -Wall -g 			# sets compiler flags for debugging purpose

# Specify make targets
all: program 				# specifies the 'all' target with dependencies on the 'program' target

program: main.o func1.o func2.o 	# specifies the 'program' target and its dependencies
	$(CC) $(CFLAGS) -o program main.o func1.o func2.o 	# runs the compilation command for creating the 'program' executable

main.o: main.c 			# specifies the 'main.o' target with dependency on 'main.c'
	$(CC) $(CFLAGS) -c main.c 	# compiles 'main.c' into an object file 'main.o'

func1.o: func1.c 			# specifies the 'func1.o' target with dependency on 'func1.c'
	$(CC) $(CFLAGS) -c func1.c 	# compiles 'func1.c' into an object file 'func1.o'

func2.o: func2.c 			# specifies the 'func2.o' target with dependency on 'func2.c'
	$(CC) $(CFLAGS) -c func2.c 	# compiles 'func2.c' into an object file 'func2.o'

# Specify a clean target to remove object files and executable
clean:
	rm -f program *.o 		# command to remove the 'program' executable and all '.o' object files

.PHONY: all clean 			# declares the targets 'all' and 'clean' as phony targets
								# this ensures that even if a file with the same name exists, the target will still be executed.