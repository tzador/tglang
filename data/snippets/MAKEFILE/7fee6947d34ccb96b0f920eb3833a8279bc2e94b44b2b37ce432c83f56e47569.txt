# A Makefile for compiling and running a C program with dependencies

# Variable for program name
PROGRAM = myprogram

# Compiler and flag variables
CC = gcc
CFLAGS = -Wall -g

# Directory variable for source and object files
SRCDIR = src
OBJDIR = obj

# Source and object file lists
# Here we use wildcard pattern matching to find all .c and .o files respectively
# in the source and object file directories
# We then substitute the directory path to remove it from the filename
# e.g. src/main.c becomes main.c
SRC = $(wildcard $(SRCDIR)/*.c)
OBJ = $(patsubst $(SRCDIR)/%, $(OBJDIR)/%, $(SRC:.c=.o))

# Default target
# Specifies that when we just run 'make' without any arguments,
# it will run the target 'all'
all: $(PROGRAM)

# Target for compiling the program
# We specify the dependencies as the object files
$(PROGRAM): $(OBJ)
	$(CC) $(CFLAGS) -o $@ $^

# Target for compiling each individual object file
# We specify the dependencies as the corresponding source file
# and also create the object file in the object file directory
$(OBJDIR)/%.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) -c -o $@ $<

# Other targets
# We can add any other custom targets here
# e.g. a target for cleaning out all the object files and the program executable
clean:
	rm -f $(OBJDIR)/*.o $(PROGRAM)

# Target for running the program
run:
	./$(PROGRAM)

# Target for running the program with arguments
# We use the 'ARGS' variable to specify the arguments
run_args:
	./$(PROGRAM) $(ARGS)

# .PHONY targets
# These targets are not connected to actual files and will always run when called
.PHONY: all clean run run_args

# Dependencies
# We can include any other dependencies here,
# such as header files or external libraries
# e.g. $(OBJDIR)/main.o: include/some_header.h