# This is a Makefile, a special kind of file that automates compiling and linking of source code into executable programs.
# MAKEFILE targets help to specify the files to compile and the rules to follow when compiling them.
# In this example, we are using GNU Compiler Collection (GCC) to compile a C++ program.

# Set the compiler to use
CC = g++

# Set the compiler flags
CFLAGS = -Wall -g

# Set the executable file name
TARGET = my_program

# List the source files to compile
SRCS = main.cpp helper.cpp

# Generate a list of object files based on the source files
OBJS = $(SRCS:.cpp=.o)

# Specify the default target to be executed when no target is specified
all: $(TARGET)

# Define the rule to create the executable
$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) -o $(TARGET) $(OBJS)

# Define a rule to compile each individual source file into an object file
# The @ symbol suppresses the command output in terminal
%.o: %.cpp
	@echo "Compiling $<..."
	$(CC) $(CFLAGS) -c $< -o $@

# Define the rule to clean up object files and the executable
clean:
	rm -rf $(TARGET) $(OBJS)

# Specify the targets that are not file names
.PHONY: all clean