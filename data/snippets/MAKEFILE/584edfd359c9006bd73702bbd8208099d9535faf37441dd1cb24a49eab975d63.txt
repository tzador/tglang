# Creates a variable called 'SOURCE' and assigns it the value 'main.cpp'
SOURCE = main.cpp

# Creates a variable called 'OBJECTS' and assigns it the value of 'SOURCE' with the .o extension
# For example, if SOURCE is 'main.cpp', OBJECTS will be 'main.o'
OBJECTS = $(SOURCE:.cpp=.o)

# Creates a variable called 'EXECUTABLE' and assigns it the value 'my_program'
EXECUTABLE = my_program

# Creates a rule called 'all' that depends on the '$(OBJECTS)' variable
# This rule will be the default target, meaning it will be executed when "make" is called without specifying a target
all: $(OBJECTS)
	# Compiles the object files into an executable, using the $(EXECUTABLE) variable for the name
	g++ -o $(EXECUTABLE) $(OBJECTS)

# Creates a rule for each object file in the $(OBJECTS) variable
# This rule will compile the corresponding source file into object code
# By using the $< and $@ special variables, we can refer to the source and target files in a generic way
# For example, if the first object file is 'main.o', this rule will compile 'main.cpp' into 'main.o'
# The -c flag tells g++ to only compile and not link, as the final linking will be done in the 'all' rule
%.o: %.cpp
	g++ -c $< -o $@

# Creates a 'clean' rule, which will delete all the object and executable files
clean:
	# Uses the 'rm' command to remove the specified files
	rm *.o *.exe

# Creates a 'run' rule which will run the executable file
run:
	# Uses the '$(EXECUTABLE)' variable to specify which program to run
	./$(EXECUTABLE)