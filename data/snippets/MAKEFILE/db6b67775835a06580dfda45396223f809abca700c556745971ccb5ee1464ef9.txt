# This is a sample makefile

# Declaring variables
SOURCES = main.c helper.c display.c
OBJECTS = $(SOURCES:.c=.o)

# Compiling the executable
executable: $(OBJECTS)
	gcc -o executable $(OBJECTS)

# Compile individual source files
main.o: main.c
	gcc -c main.c

helper.o: helper.c
	gcc -c helper.c

display.o: display.c
	gcc -c display.c

# Phony targets for cleaning and running the program
.PHONY: clean
clean:
	rm -rf $(OBJECTS) executable

.PHONY: run
run:
	./executable

#  Explanations for annotations:
#  - '#' are used for comments in Makefile
#  - '=' sign is used to declare a variable
#  - ':=' is used to set a variable to a specific value (unlike '=', which uses lazy evaluation)
#  - '$()' is used for referencing a variable within another variable
#  - '.c' is used as a suffix for source files.
#  - '.o' is used as a suffix for object files.
#  - '@', '-@' or '@-' symbols are used for suppressing the echo of a command.
#  - '.PHONY' targets are used for declaring commands that do not correspond to actual files.
#  - '$<' is a special automatic variable which stores the first item in 'SOURCES'
#  - '$@' is a special automatic variable which stores the name of the current target.

# Explanation for code:
# This makefile declares three variables: SOURCES, OBJECTS, and executable.
# It then defines a target 'executable' which depends on the OBJECTS.
# The goal of this target is to compile the final executable by calling the 'gcc' compiler with the OBJECTS as dependencies.
# Next, there are three separate targets for each source file which compile them into their respective object files.
# The '.PHONY' targets 'clean' and 'run' are declared for cleaning up object files and running the program respectively.
# Finally, the code uses special automatic variables '$<' and '$@' to reference the first item in 'SOURCES' and the current target name.
# By using these variables, the code becomes more flexible and maintainable.
# The 'clean' target uses 'rm' command to delete the object files and the executable.
# The 'run' target simply calls the executable.
# These targets can be invoked by simply running 'make clean' or 'make run'.
# To compile only specific source files, one can call 'make main.o' or 'make helper.o' instead of 'make executable'.
# This makefile can be used to efficiently compile a complex program with multiple source files and dependencies.