# This is a makefile for building and testing a C++ project
# Use tabs for indentation

# Define variables
CC = g++ # Compiler
CFLAGS = -Wall -g # Compiler flags
LIBS = -lm # Additional libraries
SRCDIR = src # Source code directory
INCDIR = include # Header file directory
BUILDDIR = build # Build directory
TARGET = app # Name of the compiled program

# Set up source and object files
SRCS = $(wildcard $(SRCDIR)/*.cpp) # Get all .cpp files in source directory
OBJS = $(SRCS:$(SRCDIR)/%.cpp=$(BUILDDIR)/%.o) # Substitute .cpp with .o for object files
DEPS = $(OBJS:.o=.dep) # Get all .o files for targets
# Note: DEPS will contain all .o files, but only the .dep files will be used
# We use the .dep files for managing dependencies between headers and source files

# Build target
$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LIBS) # $@ is a built-in variable that represents the target's name
# The above command will compile all object files into an executable called $(TARGET)

# Compile source files into object files
$(BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	$(CC) $(CFLAGS) -I $(INCDIR) -MMD -c $< -o $@
# $< is a built-in variable that represents the first prerequisite, in this case, the .cpp file
# -MMD is a flag that generates .dep files for each object file
# -c flag tells the compiler to only compile, not link
# -o is used to specify the output file, in this case, the object file

# Include the dependency files
-include $(DEPS)

# Clean command
clean:
	rm -f $(BUILDDIR)/*.o $(TARGET) # Remove all .o files and the compiled program
	rm -f $(DEPS) # Remove all .dep files

.PHONY: clean # Specify clean as a "phony" target, meaning it is not a file.
# This ensures that clean will always be executed, even if there is a file named "clean"