# This is a makefile for a project

# Variables
CC = gcc          # compiler
CFLAGS = -Wall    # compiler flags
LIBS = -lm        # libraries
PRGM = main       # name of executable

# Directories
SRCDIR = src      # source code directory
INCDIR = include  # header files directory
OBJDIR = obj      # object files directory

# Source files
SRC = $(wildcard $(SRCDIR)/*.c) # grabs all .c files in SRCDIR
OBJ = $(SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o) # creates list of corresponding object files

# Build rule
$(PRGM): $(OBJ) # rule for building the executable
    $(CC) $(CFLAGS) $(OBJ) -o $(PRGM) $(LIBS) # linking object files and libraries to create executable

# Compile rule
$(OBJDIR)/%.o: $(SRCDIR)/%.c # rule for compiling each .c file
    @mkdir -p $(OBJDIR) # creating object file directory if it doesn't exist
    $(CC) $(CFLAGS) -I$(INCDIR) -c $< -o $@ # compiling source file into object file

# Clean rule
clean: # rule for cleaning up object files and executable
    rm -rf $(OBJDIR) $(PRGM) # remove object files and executable

# PHONY targets
.PHONY: all clean # declare all and clean as phony targets (not real files)

# Default target
all: $(PRGM) # default target to build executable