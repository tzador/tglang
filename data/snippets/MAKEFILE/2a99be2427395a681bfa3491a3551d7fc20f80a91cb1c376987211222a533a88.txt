# This is a complex Makefile that demonstrates how to compile a C program with different options

# Variable definitions
CC = gcc # compiler to use
CFLAGS = -Wall -Werror # compiler flags
DEBUGCFLAGS = -g # additional flags for debugging
RELEASECFLAGS = -O2 # additional flags for release build
SRC = main.c # source files
OBJ = $(SRC:.c=.o) # object files

# Default rule to build executable 'program'
program: $(OBJ)
	@$(CC) $(CFLAGS) -o $@ $(OBJ)

# Rule to build C files into object files
%.o: %.c
	@echo "Compiling $<"
	@$(CC) $(CFLAGS) -o $@ -c $<

# Rule to build executable 'debug' with debug flags
debug: CFLAGS += $(DEBUGCFLAGS)
debug: program

# Rule to build executable 'release' with release flags
release: CFLAGS += $(RELEASECFLAGS)
release: program

# Rule to clean up object files
clean:
	rm -f $(OBJ)

# Rule to clean up all generated files
clean-all:
	rm -f $(OBJ) program

# Mark certain rules as phony targets, meaning they don't actually generate a file
.PHONY: program debug release clean clean-all