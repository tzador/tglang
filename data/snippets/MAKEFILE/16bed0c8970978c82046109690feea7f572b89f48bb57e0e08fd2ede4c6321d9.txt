# This is a complex and long code snippet written in MAKEFILE.
# It uses multiple variables and functions to automate a build process.
# It compiles code, creates directories, and sets environment variables.

# Define variables for compiler, flags, and directory paths
COMPILER = gcc
CFLAGS = -Wall -g
SRCDIR = src
OBJDIR = obj
BINDIR = bin

# Define list of all source files and corresponding object files
SOURCES = $(wildcard $(SRCDIR)/*.c)
OBJECTS = $(patsubst $(SRCDIR)/%.c, $(OBJDIR)/%.o, $(SOURCES))

# Set default target to build executable file
default: $(BINDIR)/my_program

# Compile source files into object files
$(OBJDIR)/%.o: $(SRCDIR)/%.c
	$(COMPILER) $(CFLAGS) -c $< -o $@

# Create necessary directories if they don't exist
$(shell mkdir -p $(OBJDIR) $(BINDIR))

# Link object files into executable file
$(BINDIR)/my_program: $(OBJECTS)
	$(COMPILER) $(CFLAGS) $^ -o $@

# Set environment variable for run-time executable
export PATH := $(BINDIR):$(PATH)

# Define target to run executable
run:
	@my_program

# Define target to clean up compiled files and executable
clean:
	rm -f $(OBJDIR)/* $(BINDIR)/my_program

# Define phony targets to prevent conflicts with file names
.PHONY: default run clean