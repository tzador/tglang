# Sets the default goal or target of the Makefile
.DEFAULT_GOAL := all

# Defining a variable for compiler flags
CFLAGS := -Wall -Werror

# Defining a variable for the source files
SRC := src/main.c src/utils.c

# Defining a variable for the object files
# This variable uses string substitution to replace the .c extension with .o
OBJ := $(patsubst %.c, %.o, $(SRC))

# Defining a rule to compile the source files into object files
# This rule uses automatic variables for target and prerequisites
# The $@ represents the target and $< represents the first prerequisite
%.o: %.c
	gcc $(CFLAGS) -c $< -o $@

# Defining a rule for linking the object files into an executable
# This rule has a dependency on the object files, which will trigger the compilation rule if needed
# The $^ represents all the prerequisites
# The -o flag specifies the name of the executable
bin/my_program: $(OBJ)
	gcc $(CFLAGS) $^ -o $@

# Defining a target to clean up the built files
# This rule uses the .PHONY directive to ensure it always runs, even if there's a file named clean
.PHONY: clean
clean:
	rm -f bin/my_program $(OBJ)

# Defining a target to run the program
.PHONY: run
run:
	./bin/my_program

# Defining a target that runs the clean and run targets
.PHONY: all
all: clean run