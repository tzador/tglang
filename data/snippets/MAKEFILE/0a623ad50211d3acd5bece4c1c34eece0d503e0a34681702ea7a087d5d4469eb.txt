# This is a comment in MAKEFILE

# Set the compiler variable to gcc
CC = gcc

# Set the flags variable to include -Wall (turn on all warnings), -pedantic (compile in strict ISO C mode) and -O3 (optimize code for speed)
CFLAGS = -Wall -pedantic -O3

# Define a phony target called build that compiles all the C source files, using the CC and CFLAGS variables, and outputs an executable named main
.PHONY: build
build:
    ${CC} ${CFLAGS} *.c -o main

# Define a phony target called clean that removes the executable file named main
.PHONY: clean
clean:
    rm main

# Define a phony target called debug that compiles all the C source files with the -g flag (include debugging symbols), using the CC and CFLAGS variables, and outputs an executable named main
.PHONY: debug
debug:
    ${CC} ${CFLAGS} -g *.c -o main

# Define a phony target called all that depends on both build and debug targets, running both compilation processes and creating both executable files
.PHONY: all
all: build debug

# Define a variable containing a list of directories where header files may be located
INCLUDE_DIRS = include/

# Define a variable containing a list of library directories where library files may be located
LIB_DIRS = libs/

# Define a variable containing a list of libraries to be linked against during compilation
LIBS = -lmylib -lm

# Define a phony target called release that compiles all the C source files with the -O3 flag (optimize code for speed), using the CC and CFLAGS variables, adding the directories listed in INCLUDE_DIRS and LIB_DIRS to the compilation process, linking against the libraries listed in LIBS, and outputs an executable named main
.PHONY: release
release:
    ${CC} ${CFLAGS} -O3 -I ${INCLUDE_DIRS} -L ${LIB_DIRS} *.c -o main ${LIBS}

# Define a phony target called install that compiles all the C source files with the -O3 flag (optimize code for speed), using the CC and CFLAGS variables, adding the directories listed in INCLUDE_DIRS and LIB_DIRS to the compilation process, linking against the libraries listed in LIBS, and outputs an executable named main, then copies the main executable to the /usr/bin directory, making it globally accessible
.PHONY: install
install: release
    sudo cp main /usr/bin

# Define a phony target called uninstall that removes the main executable from the /usr/bin directory, preventing it from being globally accessible
.PHONY: uninstall
uninstall:
    sudo rm /usr/bin/main