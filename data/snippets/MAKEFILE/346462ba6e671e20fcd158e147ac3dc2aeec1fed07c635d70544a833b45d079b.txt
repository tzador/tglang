# This is a complex Makefile code snippet that automates the build process of a C++ project.

# Set the compiler and its flags
CC = g++
CFLAGS = -Wall -pedantic -std=c++11

# Set the source and object directories
SRC_DIR = src
OBJ_DIR = obj

# Create a list of all the source files
SRC = $(wildcard $(SRC_DIR)/*.cpp)

# Create a list of all the object files
OBJ = $(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(SRC))

# Set the name of the executable
EXECUTABLE = myprogram

# Define the build target
all: $(EXECUTABLE)

# Compile the source code into object files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CC) -c $(CFLAGS) $< -o $@

# Link the object files to create the executable
$(EXECUTABLE): $(OBJ)
	$(CC) $(CFLAGS) $^ -o $@

# Set the clean target to remove all the object files and the executable
clean:
	rm -f $(OBJ_DIR)/*.o $(EXECUTABLE)

# Set the install target to install the executable to the bin directory
install:
	mv $(EXECUTABLE) /usr/local/bin

# Set the uninstall target to remove the installed executable from the bin directory
uninstall:
	rm -f /usr/local/bin/$(EXECUTABLE)

# Set the .PHONY target to ensure that these targets are considered phony and not actual file names
.PHONY: all clean install uninstall