# This section defines the variables for our makefile.
# The 'CC' variable specifies the compiler we will use.
# The 'CFLAGS' variable specifies any additional flags we want to pass to the compiler.
# The 'OBJS' variable lists all of the object files we want to create.
# The 'TARGET' variable specifies the name of our final executable file.
CC=gcc
CFLAGS=-Wall -g
OBJS=main.o function1.o function2.o
TARGET=my_program

# This section defines the rules for our makefile.
# Each rule consists of a target, followed by a colon, and then a list of dependencies.
# The dependencies are the files that the target depends on.
# If any of the dependencies change, the target will be recompiled.
# The lines after the dependencies are the commands that will be executed to create the target.
# Here, we are using $(CC) and $(CFLAGS) to compile our source code into object files.
# The -c flag tells the compiler to only compile the code, not link it.
# The -o flag specifies the output file name.
# We also have a 'clean' rule, which removes all of the object files and the executable file.
$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) -o $(TARGET) $(OBJS)

# This section defines the dependencies for each object file.
# Here, we are telling make that each object file depends on its corresponding source file.
# The '%' is a wildcard that matches any string, allowing us to create a generic rule for all of our objects.
# The command here uses the '%' as a placeholder for the file name and specifies the -c flag as before.
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

# This is our 'clean' rule, which removes all of the object files and the final executable.
# The '@' symbol suppresses the output, so we don't need to see the 'rm' command being executed.
# The 'rm' command uses the wildcard to remove all files matching the pattern.
clean:
	@rm -f $(OBJS) $(TARGET)

# This is a phony target, which means it won't create an actual file.
# Instead, it just serves as a way for us to run multiple commands at once.
# Here, we are using it to first clean our files and then compile them again.
all: clean $(TARGET)