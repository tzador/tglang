at the beginning of this snippet, we create a variable `SOURCES` which contains all the source files needed to compile our program.

SOURCES = main.c hello.c utils.c

we then declare another variable `OBJECTS` which contains the names of all the object files that will be created when compiling our program.

OBJECTS = $(SOURCES:.c=.o)

passing `.c` and `.o` as parameters in our `OBJECTS` variable
specifies that each source file should be compiled into an object file with the `.o` extension.

# This is a comment in makefile syntax

the `all` target specifies the default target when running `make`, in this case, we want to compile our program.
`.PHONY` is used to ensure that the `all` target is always executed, even if there is a file with the same name in the directory.

.PHONY: all 

# The default target
all: target 

the `target` target is where the actual compilation happens.
we use the `$(CC)` variable to specify the compiler we want to use, in this case `gcc`.
the `-o` flag is used to specify the name of the output file, in this case `hello`.
`$(OBJECTS)` is used to specify the list of object files that need to be linked together to create our program.

target: $(OBJECTS)
	$(CC) -o hello $(OBJECTS)

# This target compiles each individual source file into an object file
%.o: %.c
	$(CC) -c $< -o $@

the `clean` target removes all object files and the executable.
.PHONY: clean

clean:
	rm -f $(OBJECTS) hello

the `install` target is used to install our program into a specific directory, in this case `/usr/local/bin`.
we use the `install` command and specify the location of our executable and the destination directory.

.PHONY: install

install:
	install -m 755 hello /usr/local/bin 

the `uninstall` target is used to remove our program from the destination directory.
.PHONY: uninstall

uninstall:
	rm -f /usr/local/bin/hello 

we can also add dependencies to our targets.
in this example, the `all` target depends on the `target` target, which means that the `target` target will be executed first before the `all` target.
this is useful when we have multiple targets and want to specify the order in which they should be executed.

all: target

target: dependency 

dependency:
	@echo "This target will be executed first"

output:
	@echo "This target will be executed second"