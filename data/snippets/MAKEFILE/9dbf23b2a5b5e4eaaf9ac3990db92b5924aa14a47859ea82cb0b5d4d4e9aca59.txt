# This is a comment in a Makefile
# The first line specifies the target and its prerequisites
target: prerequisite1 prerequisite2
    @echo "Target executed successfully!"

# This is a phony target that doesn't correspond to a file
.PHONY: phony_target

# Variables can be defined using the assignment operator (=)
VAR = value

# Variables can also have dependencies
VAR2 := $(VAR) value2

# Rules can have multiple commands, separated by semicolons
target2:
    @echo "Executing first command..."; \
    echo "Executing second command..."; \
    echo "Target2 executed successfully!"

# Rules can also use automatic variables, such as $@ for the target name
target3:
    @echo "Executing command for $@"

# Patterns can be used to match multiple targets and prerequisites
file%.txt: input/%.txt
    @echo "Copying $< to $@..."; \
    cp $< $@

# Conditional statements can be used to control the execution flow
ifeq ($(VAR),value)
    @echo "Variable is set to value"
else
    @echo "Variable is not set to value"
endif

# Functions can also be used in Makefile
VAR3 = $(shell ls ./input) # This assigns the output of 'ls' command to VAR3

# Default target is automatically executed if no target is specified 
.DEFAULT_GOAL := default
default: 
    @echo "This is the default target"

# Rules can be chained together to build complex workflows
output: target3 target2 target file1.txt file2.txt
    @echo "All targets executed successfully!"