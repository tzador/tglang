# This is a comment, it will not be executed.
# This MAKEFILE is used for building a C++ project named "my_project" with one main source file "main.cpp".

# Set the compiler to g++ and add the "-std=c++11" flag for C++11 compliance.
CXX = g++ -std=c++11

# Set the output file name to "my_project".
# Add the "-o" flag to specify the output file name.
OUTPUT = -o my_project

# Set the compiler flags, including debugging and optimization options.
# Use the "-g" flag for debugging and "-O2" for optimization.
CXXFLAGS = -g -O2

# Set the source files, in this case only "main.cpp".
# Each source file is separated by a space.
SOURCES = main.cpp

# Set the object files by replacing the ".cpp" extension with ".o".
# This creates a list of object files corresponding to the source files.
# The wildcard function is used to find all ".cpp" files in the current directory.
OBJECTS = $(SOURCES:.cpp=.o)

# The "all" target is the default target that will be executed when no target is specified.
# In this case, the "all" target will build the project by first compiling each source file into an object file.
# It then links all the object files together to create the "my_project" executable.
# The "@" symbol suppresses the command from being printed to the console.
all: $(OBJECTS)
	@$(CXX) $(OUTPUT) $(CXXFLAGS) $(OBJECTS)

# The pattern rule for creating object files from source files.
# The '%' symbol matches any string and can be used as a wildcard in filenames.
# This rule recompiles any source file that has changed or does not have an existing corresponding object file.
%.o: %.cpp
	@$(CXX) $(CXXFLAGS) -c -o $@ $<

# The "clean" target removes all object files and the "my_project" executable.
clean:
	@rm -f $(OBJECTS) my_project

# The "dist" target creates a compressed tarball of the project.
dist:
	@tar -czf my_project.tar.gz $(SOURCES) makefile