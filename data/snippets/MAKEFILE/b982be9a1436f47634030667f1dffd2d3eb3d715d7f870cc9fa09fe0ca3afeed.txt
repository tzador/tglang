# This is a complex Makefile that will help compile and link a C++ project

# The variables below will hold information about the project
# You can modify these variables to fit your project's structure and needs
# Comments are added on the side to explain what each variable represents

# Compiler flags
# CXXFLAGS: compiler options for both C and C++ files
# OBJ_FLAGS: flags for compiling object files
# LINK_FLAGS: flags for linking object files
CXXFLAGS = -g -Wall
OBJ_FLAGS = -c
LINK_FLAGS = -lm

# Project name
# Change this variable to match the name of your project
# This will be used as the executable name when the project is compiled
PROJECT_NAME = my_project

# Source files
# Add or remove .cpp files here depending on the structure of your project
# The wildcard function will automatically detect all .cpp files in the current directory
# and add them to the SOURCES variable
SOURCES = $(wildcard *.cpp)

# Object files
# This variable will hold a list of all the object files that need to be compiled
# based on the source files in the SOURCES variable
OBJECTS = $(SOURCES:.cpp=.o)

# Main target
# The main target is the executable that will be generated when the project is compiled
# It depends on all the object files in the OBJECTS variable
# This means that all the object files must be compiled before the final executable can be created
$(PROJECT_NAME): $(OBJECTS)
	g++ $(LINK_FLAGS) $^ -o $@

# Compile rule for objects
# This rule will compile each source file into an object file
# The rule depends on the corresponding source file and the compiler flags
# The output file is specified using the -o flag, the $< variable refers to the source file
%.o: %.cpp
	g++ $(OBJ_FLAGS) $(CXXFLAGS) $< -o $@

# Clean target
# This target is used to remove all the generated object and executable files
# It depends on the CLEAN_EXT target to remove all object files
# It also removes the final executable file
clean:
	rm -f $(OBJECTS) $(PROJECT_NAME)

# Phony targets
# These targets are used to specify special actions that do not create a file with the same name
# They must be explicitly specified as phony to avoid conflicts with files and directories
# These targets are usually used for specifying dependencies or performing actions
.PHONY: all clean
all: $(PROJECT_NAME)
clean: