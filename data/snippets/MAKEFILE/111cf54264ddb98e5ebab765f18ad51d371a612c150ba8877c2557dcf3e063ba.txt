# This is a Makefile used to build and compile a C++ project
# The `CXX` variable specifies the compiler to use
CXX = g++

# `CXX_FLAGS` variable specifies additional flags to pass to the compiler
CXX_FLAGS = -Wall -Werror -pedantic

# `SOURCE_DIR` specifies the directory where source files are located
SOURCE_DIR = src

# `BUILD_DIR` specifies the directory where object files and final binary will be placed
BUILD_DIR = build

# `SOURCES` variable specifies the source files to be compiled
# `wildcard` function is used to search recursively for files with `.cpp` extension in `SOURCE_DIR`
SOURCES = $(wildcard $(SOURCE_DIR)/**/*.cpp)

# `OBJECTS` variable specifies the object files to be linked
# `addprefix` function is used to add `BUILD_DIR/` prefix to each object file
OBJECTS = $(addprefix $(BUILD_DIR)/, $(notdir $(SOURCES:.cpp=.o)))

# `TARGET` variable specifies the name of the final binary
TARGET = executable

# The `all` target is the default target to build the project
# `@` symbol is used to suppress the output of the commands
all: $(TARGET)

# The `.PHONY` directive specifies that `clean` is not a file target
# `rm` command is used to remove all object files and the final binary
.PHONY: clean
clean:
	@rm -f $(OBJECTS) $(TARGET)

# The `$(TARGET)` target specifies the dependencies and commands to build the final binary
# The `$(OBJECTS)` dependency triggers the `$(CXX)` command to compile each object file
# The `@` symbol is used to suppress the output of the commands
$(TARGET): $(OBJECTS)
	@echo Linking $(TARGET)...
	@$(CXX) $(CXX_FLAGS) -o $(TARGET) $(OBJECTS)

# The `$(OBJECTS)` target specifies the source file dependencies and commands to compile each object file
# The `$<` variable takes the path of the current dependency source file
# The `$@` variable takes the path of the current object file being compiled
# The `@` symbol is used to suppress the output of the commands
$(OBJECTS): $(SOURCES)
	@echo Compiling $<...
	@$(CXX) $(CXX_FLAGS) -c $< -o $@