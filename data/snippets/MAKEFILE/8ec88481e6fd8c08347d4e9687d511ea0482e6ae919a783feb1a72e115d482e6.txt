# This is a comment in a MAKEFILE code snippet.
# It is used to provide context and explanation for the code.

# Define a variable 'SOURCES' with a list of source files.
SOURCES = main.c helper.c functions.c

# Define a variable 'OBJECTS' with a list of object files.
# This is used to build the executable file.
OBJECTS = $(SOURCES:.c=.o)

# Define a variable 'CC' to store the compiler command.
CC = gcc

# Define a variable 'CFLAGS' with compiler flags.
# '-c' flag is used to compile without linking.
CFLAGS = -c -Wall -g

# Define a variable 'LDFLAGS' with linker flags.
LDFLAGS =

# Define a variable 'EXECUTABLE' to store the name of the executable file.
EXECUTABLE = program

# Define a rule to build the executable file.
# This rule depends on the object files and the linker flags.
$(EXECUTABLE): $(OBJECTS)
	$(CC) $(LDFLAGS) $(OBJECTS) -o $@

# Define a rule to compile the source files.
# This rule depends on the source files and the compiler flags.
.c.o:
	$(CC) $(CFLAGS) $< -o $@

# Define a rule to clean up the object files and the executable file.
# This rule is used when the user inputs 'make clean' in the command line.
clean:
	rm -f $(OBJECTS) $(EXECUTABLE)