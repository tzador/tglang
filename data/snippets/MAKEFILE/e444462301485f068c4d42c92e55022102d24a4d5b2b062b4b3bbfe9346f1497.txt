# This is a complex Makefile that compiles C code in multiple directories and links them into an executable
# The Makefile uses variables and functions to make the process more efficient
# It also includes conditional statements for different situations

CC = gcc # variable for compiler
CFLAGS = -Wall -g # variable for compiler flags

# target for executable, depends on all object files
project: main.o utils.o input.o
	$(CC) $(CFLAGS) main.o utils.o input.o -o project # link object files into executable

# dependencies for main object file
main.o: main.c utils.h input.h # main.o depends on main.c, utils.h, and input.h
	$(CC) $(CFLAGS) -c main.c -o main.o # compile main.c into object file

# dependencies for utils object file
utils.o: utils.c utils.h # utils.o depends on utils.c and utils.h
	$(CC) $(CFLAGS) -c utils.c -o utils.o # compile utils.c into object file

# dependencies for input object file
input.o: input.c input.h # input.o depends on input.c and input.h
	$(CC) $(CFLAGS) -c input.c -o input.o # compile input.c into object file

clean:
	rm *.o # removes all object files
	rm project # removes executable

# conditional statements for different situations
ifdef VERBOSE # if VERBOSE variable is defined
	@echo "Verbose mode on" # print message
else # if VERBOSE variable is not defined
	@echo "Verbose mode off" # print message
endif # end if statement

.PHONY: clean # make clean command doesn't correspond to any file