# This is a complex Makefile for compiling and linking multiple files
# using gcc and storing intermediate files in separate directories

CC = gcc  # set the compiler to gcc

# define variable for source files
SRCS = main.c functions.c

# define variable for object files
OBJS = $(SRCS:.c=.o)

# specify directories for object files and executable
OBJDIR = obj
BINDIR = bin

# specify flags for compiling and linking
CFLAGS = -Wall -Iinclude
LFLAGS = -lm

.PHONY: all clean  # declare targets that are not associated with a file name

all: $(BINDIR)/myprogram  # specify the executable as the target

$(BINDIR)/myprogram: $(addprefix $(OBJDIR)/, $(OBJS))  # specify all object files as prerequisites
	$(CC) $^ -o $@ $(LFLAGS)  # compile and link the object files into the executable

$(OBJDIR)/%.o: %.c  # specify each object file as a target with its corresponding source file as a prerequisite
	$(CC) $(CFLAGS) -c $< -o $@  # compile each source file into an object file in the object directory

clean: # delete all intermediate and executable files
	rm -rf $(BINDIR) $(OBJDIR)