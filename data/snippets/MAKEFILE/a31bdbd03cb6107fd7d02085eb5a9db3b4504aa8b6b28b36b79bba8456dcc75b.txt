# Declare variables
CC = gcc
CFLAGS = -Wall -g

# Default target (first one in the file)
# This should be the final output or executable file name
TARGET = final

# Define all object files
OBJS = main.o file_processing.o helper_functions.o

# Build target
all: $(TARGET)

# Link object files and create executable
$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) -o $(TARGET) $(OBJS)

# Compile main file
main.o: main.c
	$(CC) $(CFLAGS) -c main.c

# Compile file_processing file
file_processing.o: file_processing.c
	$(CC) $(CFLAGS) -c file_processing.c

# Compile helper_functions file
helper_functions.o: helper_functions.c
	$(CC) $(CFLAGS) -c helper_functions.c

# Clean up object files and executable
clean:
	rm -f $(OBJS) $(TARGET)

# Declare dependencies (files that other files depend on)
# For example, if helper_functions.c changes,
# then both main.c and file_processing.c need to be recompiled
main.o: helper_functions.h file_processing.h
file_processing.o: helper_functions.h file_processing.h
helper_functions.o: helper_functions.h

# Specify special build targets
.PHONY: all clean