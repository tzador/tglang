# This is a sample makefile with a long and complex code snippet
# It is used to define dependencies and compile a project

# Define variables
CC = gcc # Compiler used
CFLAGS = -Wall -g # Compiler flags
LDFLAGS = -lm # Linker flags
SRC_DIR = src # Source code directory
OBJ_DIR = obj # Object code directory
TARGET = project # Name of executable
SRCS = $(wildcard $(SRC_DIR)/*.c) # Get all source files
OBJS = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(SRCS)) # Get all object files
DEPS = $(OBJS:.o=.d) # Generate dependency files

# Default target
all: $(TARGET) # Compile project executable

# Compile object files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c # For each .c file in source directory
	$(CC) $(CFLAGS) -MMD -c $< -o $@ # Compile into corresponding object file
include $(DEPS) # Include all dependency files to handle changes

# Link object files into executable
$(TARGET): $(OBJS) # For each object file
	$(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS) # Link into executable

# Clean up files
clean:
	rm -rf $(OBJ_DIR)/*.o $(DEPS) $(TARGET) # Remove all object files, dependencies, and executable
.PHONY: clean # Indicate that clean is not a file

# Remove intermediate files
.INTERMEDIATE: $(OBJS) # Indicate that object files are not to be kept

# Phony targets
.PHONY: all # Indicate that all is not a file
.PHONY: debug # Indicate that debug is not a file

# Target for debugging
debug: CFLAGS += -DDEBUG # Add debug flag to compiler flags
debug: $(TARGET) # Compile project executable
.PHONY: debug

# Phony targets are always executed
.PHONY: always # Indicate that always is not a file
always: ; # Empty recipe, always executed