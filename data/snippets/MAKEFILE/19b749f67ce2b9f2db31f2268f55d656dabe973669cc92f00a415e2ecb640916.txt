# This is a makefile that will compile and link multiple C++ files
# to create an executable program.
# Makefiles are used to automate the build process for software projects.
# This makefile is used for educational purposes only, and may not work for
# all systems or project setups.

# Defines the compiler to be used to compile C++ code.
# In this case, we are using g++ which is a popular compiler for C++.
CXX := g++

# Specifies the flags to be passed to the compiler.
# These flags control various aspects of the compilation process.
# In this case, we are using the flags -std=c++11 for using C++11 standard
# and -Wall for enabling all warnings.
CXX_FLAGS := -std=c++11 -Wall

# Specifies the source files for the project.
# In this case, we have three source files: main.cpp, helper.cpp, and
# calculations.cpp.
SOURCES := main.cpp helper.cpp calculations.cpp

# Specifies the directory where the object files will be stored.
# Object files contain the compiled machine code for each source file.
# They are created by the compiler and used during the linking process.
# In this case, we are using the directory "build" to store the object files.
BUILD_DIR := build

# Specifies the name of the final executable program.
# In this case, we will call our program "calculator".
TARGET := calculator

# Specifies the full path to the compiler.
# If the compiler is in the system path, this variable is not needed.
# In this case, we will use the default value of g++, which is "g++".
# If the compiler is not in the system path, this variable can be set to
# the full path of the compiler.
# For example, on macOS, this variable might be set to
# /usr/bin/clang++.
CXX_PATH := g++

# Specifies the full path to the linker.
# If the linker is in the system path, this variable is not needed.
# In this case, we will use the default value of g++, which is "g++".
# If the linker is not in the system path, this variable can be set to
# the full path of the linker.
# For example, on Linux, this variable might be set to
# /usr/bin/ld.
LD_PATH := g++

# Specifies the flags to be passed to the linker.
# This controls various aspects of the linking process.
# In this case, we are using the flags -o for specifying the output file
# and -lm for linking with the math library.
LD_FLAGS := -o $(TARGET) -lm

# The first target in the makefile is always executed when the make command
# is run with no specific target specified.
# In this case, we will use the target "all" as the first target.
# The "all" target will compile and link the program.
all: $(TARGET)

# The $(TARGET) target depends on the object files generated by the
# $(BUILD_DIR) target.
# This ensures that the program will be recompiled only when
# the source code has been changed.
$(TARGET): $(BUILD_DIR)
	@echo "Building $(TARGET)..."
	$(LD_PATH) $(LD_FLAGS) $(addprefix $(BUILD_DIR)/, $(notdir $(SOURCES)))

# The $(BUILD_DIR) target creates the directory specified in the
# BUILD_DIR variable if it does not already exist.
$(BUILD_DIR):
	@echo "Creating build directory..."
	mkdir -p $(BUILD_DIR)

# This target cleans the project by removing the executable and object
# files.
clean:
	@echo "Cleaning up..."
	rm -rf $(TARGET) $(BUILD_DIR)

# This target prints out the help message when the "help" target is specified.
# It provides a brief description of what the makefile does and the possible
# targets that can be used.
help:
	@echo "This makefile compiles and links multiple C++ files to create an executable program."
	@echo "Targets available:"
	@echo "  all         : Compiles and links the program"
	@echo "  clean       : Cleans the project by removing the executable and object files"
	@echo "  help        : Prints this help message"