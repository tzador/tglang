# This is a makefile for compiling a project

# Define variables
TARGET = project    # The name of the executable
SRCDIR = src        # Source directory
OBJDIR = obj        # Object files directory
BINDIR = bin        # Executable directory

# Define compiler and flags
CC = gcc
CFLAGS = -Wall -g   # Warning and debug flags

# Define source and object files
SRCS = $(wildcard $(SRCDIR)/*.c)        # Finds all .c source files in SRCDIR
OBJS = $(SRCS:$(SRCDIR)/%.c=$(OBJDIR)/%.o)   # Replaces src directory with obj for object files

# Define targets and dependencies
all: $(BINDIR)/$(TARGET)     # Default target to build executable
$(BINDIR)/$(TARGET): $(OBJS)
    mkdir -p $(BINDIR)
    $(CC) $(CFLAGS) -o $@ $^   # Compiles all object files and links them into an executable
$(OBJDIR)/%.o: $(SRCDIR)/%.c     # For each .c file, create a .o file
    mkdir -p $(OBJDIR)
    $(CC) $(CFLAGS) -c $< -o $@     # Compiles each .c file into a .o file
.PHONY: clean      # Make sure 'clean' is not considered a file name
clean:
    rm -rf $(OBJDIR) $(BINDIR)      # Removes object files and executable