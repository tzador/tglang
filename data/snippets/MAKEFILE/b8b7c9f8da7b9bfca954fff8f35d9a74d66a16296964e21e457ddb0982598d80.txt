# Define the variable 'FLAGS' and set its value to '-Wall -O2'
FLAGS = -Wall -O2
# Define the variable 'SOURCES' and set its value to all .c files in the current directory
SOURCES = $(wildcard *.c)
# Define the variable 'OBJECTS' and replace the .c extension of each source file with .o
OBJECTS = $(SOURCES:.c=.o)
# Define the variable 'EXEC' and set its value to 'program'
EXEC = program
# Define the rule 'all' which depends on 'EXEC'
all: $(EXEC)
# Define the rule '$(EXEC)' which depends on 'OBJECTS'
$(EXEC): $(OBJECTS)
	# Print a message showing the creation of the executable
	@echo "Creating executable '$(EXEC)'..."
	# Compile and link all object files with the 'FLAGS' variable
	gcc $(FLAGS) -o $@ $^
# Define the rule '%.o' which depends on its respective .c source file
%.o: %.c
	# Print a message showing the compilation of the source file
	@echo "Compiling source file '$<'..."
	# Compile the source file with the 'FLAGS' variable
	gcc $(FLAGS) -c -o $@ $<
# Define the rule 'clean'
clean:
	# Print a message showing the removal of all object files
	@echo "Removing all object files..."
	# Remove all .o files in the current directory
	rm -f *.o
	# Print a message showing the removal of the executable
	@echo "Removing executable '$(EXEC)'..."
	# Remove the executable
	rm -f $(EXEC)
# Define the rule 'help'
help:
	# Print a message showing the available make commands
	@echo "Available make commands:"
	# Print a message showing the usage of the 'all' command
	@echo "- all: compiles all source files and creates the executable"
	# Print a message showing the usage of the 'clean' command
	@echo "- clean: removes all object files and the executable"
	# Print a message showing the usage of the 'help' command
	@echo "- help: displays this help menu"