# This is a Makefile used for compiling and linking a C++ program

# Define the compiler and flags
CC = g++
CFLAGS = -std=c++11 -Wall -Wextra -pedantic

# Define the directories for source code and object files
SRCDIR = src
OBJDIR = obj

# List of source files
SRCS = $(wildcard $(SRCDIR)/*.cpp) # using wildcard function to automatically find all .cpp files in source directory

# Generate a list of object files
OBJS = $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(SRCS)) # using pattern substitution function to create a list of .o files based on .cpp files list

# Define the target executable and dependencies
TARGET = main
DEPS = $(OBJDIR)/main.o $(OBJS) # main.o file is also a dependency since it contains the main() function

# Default target
all: $(TARGET)

# Target to create the executable
$(TARGET): $(DEPS)
	$(CC) $(CFLAGS) $^ -o $@ # $^ represents all the dependencies, $@ represents the target executable

# Target to compile each source file into object files
# Pattern rule definition
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@ # $< represents the source file

# Target to clean the object files and executable
clean:
	rm -f $(OBJDIR)/*.o $(TARGET)

# Target to reset the project to a clean state
reset:
	make clean
	make all