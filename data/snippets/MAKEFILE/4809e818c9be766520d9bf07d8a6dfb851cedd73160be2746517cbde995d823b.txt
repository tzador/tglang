# This is a Makefile that compiles a C++ program

# Define the compiler and its flags
CXX = g++
CXXFLAGS = -std=c++11 -Wall -Werror

# Define a variable for the program
PROGRAM = main

# Define a source directory and retrieve all .cpp files from it
SRC_DIR = src
SOURCES = $(wildcard $(SRC_DIR)/*.cpp)

# Define an output directory
BUILD_DIR = build

# Create a list of object files from source files
OBJECTS = $(patsubst $(SRC_DIR)/%.cpp,$(BUILD_DIR)/%.o,$(SOURCES))

# Define a rule to make the program
main: $(OBJECTS)
    $(CXX) $(CXXFLAGS) -o $(PROGRAM) $(OBJECTS)

# Define a rule to create object files from source files
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp
    @mkdir -p $(BUILD_DIR)
    $(CXX) $(CXXFLAGS) -c $< -o $@

# A phony target to clean up generated files
.PHONY: clean
clean:
    @rm -rf $(BUILD_DIR) $(PROGRAM)
``

Explanation:

- `#` is used to add comments in Makefiles
- `CXX` and `CXXFLAGS` are variables that store the compiler and its flags respectively.
- `PROGRAM` is a variable that stores the name of the output executable.
- `SRC_DIR` is the name of the source directory.
- `SOURCES` is a list of all the source files in the `SRC_DIR` that have the `.cpp` extension.
- `BUILD_DIR` is the name of the output directory where the object files will be stored.
- `OBJECTS` is a list of all the object files that will be created from the source files.
- `main` is the name of the rule to make the program. It depends on the `OBJECTS` list.
- The rule for `main` first checks if the `OBJECTS` list has changed since the last time it was made. If yes, it will compile and link all the object files to create the `PROGRAM` executable using the `CXX` compiler and `CXXFLAGS` flags.
- The rule for creating object files depends on the corresponding source file. It first creates the `BUILD_DIR` directory if it doesn't exist and then compiles the source file using the `CXX` compiler and `CXXFLAGS` flags and stores the resulting object file in the `BUILD_DIR`.
- `.PHONY` is used to declare a target that is not an actual file. In this case, `clean` is a phony target that removes the `BUILD_DIR` directory and the `PROGRAM` executable when called.
- To call the `clean` target, we can use the command `make clean` in the terminal.

Note: Makefiles can be used for any programming language, but in this example, it is specifically used for a C++ program. Makefiles are used to automate the compilation and linking process, making it easier to manage large projects with multiple source files.