# This Makefile demonstrates how to compile a C program
# with multiple source files and headers, and how to create object files

# Compiler options: -Wall turns on all warnings, -g includes debugging symbols
CC = gcc
CFLAGS = -Wall -g

# List of sources for the program, separated by spaces
SOURCES = main.c functions.c

# List of header files needed for compilation
HEADERS = functions.h

# Create a variable for the executable name
# This will be the name of the program created after compilation,
# and can be changed easily by modifying the variable's value
EXECUTABLE = program

# Use the $(patsubst) function to generate a list of object files
# based on the list of sources
# Format is: (pattern, replacement, list of strings)
OBJECTS = $(patsubst %.c, %.o, $(SOURCES))

# Default target, defined as "all"
# This target is run when you just type "make" without arguments
all: $(EXECUTABLE)

# Specify the dependencies for the executable
# All object files should be up to date before creating the executable
$(EXECUTABLE): $(OBJECTS)
	$(CC) $(CFLAGS) -o $@ $^

# Specify the rules for creating object files
# Every object file depends on its corresponding source and header files
# Use the -c flag to tell the compiler to only create object files
%.o: %.c $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

# Define a "clean" target to remove all object files and the executable
clean:
	rm -f $(OBJECTS) $(EXECUTABLE)