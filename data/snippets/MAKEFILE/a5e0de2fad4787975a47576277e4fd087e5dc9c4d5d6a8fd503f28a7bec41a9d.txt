# This is a comment in a makefile

# Variables are declared and can be accessed by using the '$' symbol
VARIABLE = value

# Targets are what the makefile will build
# They have dependencies, which are other targets or files that need to be present before the target can be built
# They also have commands, which are the actions that the makefile will take to build the target
target: dependency1 dependency2
	command1
	command2
	command3

# The .PHONY target declares other targets as phony, meaning they always need to be rebuilt
.PHONY: target1 target2

# The $@ symbol refers to the current target being built
# The $< symbol refers to the first dependency
# The $^ symbol refers to all dependencies
target1: dependency1 dependency2
	command1 $^ $<

# Pattern rules allow for multiple targets to be built using the same command and dependencies
# The '%' symbol acts as a wildcard, matching any string
# The '%' symbol can also be used in dependencies to match multiple files
%.o: %.c
	$(CC) -c $< -o $@

# Conditional statements can be used to execute different commands based on a condition
ifdef DEBUG
	command1
else
	command2
endif

# Functions can be used to manipulate variables or perform actions
# The $(foreach) function loops through a list of values and performs a command for each value
FILES := file1 file2 file3
all:
	$(foreach file, $(FILES), echo "File: $(file)")