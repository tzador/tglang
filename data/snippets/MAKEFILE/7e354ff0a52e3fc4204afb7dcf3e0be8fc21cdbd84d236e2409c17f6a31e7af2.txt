# This is a complex Makefile that compiles, links, and runs a C++ program
# The program consists of multiple source files, and has different build options

# Set the compiler and compile flags
CC = g++
CFLAGS = -c -Wall -O
LDFLAGS = -lm

# Set the target executable name
TARGET = program

# Set the source file names
SOURCES = main.cpp add.cpp multiply.cpp

# Set the corresponding object file names
# Prefix with "build/" to store them in a separate "build" directory
OBJECTS = $(patsubst %.cpp, build/%.o, $(SOURCES))

# Set any additional libraries to link
LIBS = -lboost_regex

# Default target, which will be executed when "make" is called
# This will first create the "build" directory if it doesn't exist
# Then compile the source files into object files and link them into the target executable
# The "make clean" target can be used to remove all generated files
all: | build
	$(CC) $(CFLAGS) $(SOURCES)
	$(CC) $(OBJECTS) $(LIBS) $(LDFLAGS) -o $(TARGET)

# Target to create the "build" directory
build:
	mkdir -p build

# Target to clean all generated files
clean:
	rm -rf build $(TARGET)

# Target for each individual source file to compile it into an object file
# The ".DEPEND" files are generated by the compiler and contain a list of dependencies for each source file
# This will ensure that if a header file is changed, the corresponding source file will be recompiled
build/%.o: %.cpp | build
	$(CC) $(CFLAGS) -MMD -MP -o $@ $<

# Include the ".DEPEND" files to ensure dependencies are updated
# This will read the list of dependencies for each source file and execute the corresponding target if needed
# The "-" in front of the "include" command will suppress any error if a file doesn't exist
-include $(OBJECTS:.o=.DEPEND)