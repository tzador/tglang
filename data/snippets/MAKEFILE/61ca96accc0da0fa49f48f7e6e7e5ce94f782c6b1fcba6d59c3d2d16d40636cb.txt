# This is a Makefile, a build automation tool used for compiling code and building software projects

# Declare variables to store compiler and compiler flags
CC = gcc
CFLAGS = -Wall -Werror -pedantic

# Declare targets, which are commands that can be run by the user
.PHONY : all clean

# The 'all' target is the default target, and will be run if no target is specified
all : program

# The 'clean' target removes any previously built files
clean :
	rm -f program

# The program target specifies the dependencies and commands needed to build the program
program : main.o functions.o
	$(CC) $(CFLAGS) main.o functions.o -o program

# The main.o target specifies the dependencies and commands needed to build the main object file
main.o : main.c functions.h
	$(CC) $(CFLAGS) -c main.c -o main.o

# The functions.o target specifies the dependencies and commands needed to build the functions object file
functions.o : functions.c functions.h
	$(CC) $(CFLAGS) -c functions.c -o functions.o

# The '.c' files and '.h' files are listed as dependencies for each target, so the target will only be run if any of those files have changed since the last time the target was run. This helps with building efficiently and avoiding unnecessary recompiling.

# After the ':', the commands to be run are listed, indented by a tab. The variables can be used in the command by using the '$' symbol followed by the variable name.

# The '-c' flag in the commands means to compile the code without linking, so it creates an object file instead of an executable.

# The '-o' flag specifies the name of the output file for the command.

# The '.PHONY' target is used to declare other targets that are not associated with any files, so they will always be run regardless of whether there is a file with the same name.

# You can run this Makefile by navigating to the directory it is saved in and typing 'make' in the command line.