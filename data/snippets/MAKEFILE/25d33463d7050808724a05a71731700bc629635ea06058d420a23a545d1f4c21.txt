ifeq ($(OS),Windows)  # Conditional statement checking the OS variable for Windows
	SOURCES = src/windows/*.cpp  # Setting the SOURCES variable to all .cpp files in the windows folder
else ifeq ($(OS),Linux) # Else if statement checking the OS variable for Linux
	SOURCES = src/linux/*.cpp # Setting the SOURCES variable to all .cpp files in the linux folder
else # Else statement if none of the above conditions are met
	SOURCES = src/*.cpp # Setting the SOURCES variable to all .cpp files in the src folder
endif # End of conditional statement

CXX = g++ # Setting the CXX variable to the g++ compiler
CXXFLAGS = -Wall -g # Setting the CXXFLAGS variable to include compiler flags for better error checking and debugging
LIBS = -lSDL2 -lSDL2_Image # Setting the LIBS variable to include required libraries for the project (SDL2 and SDL2_Image)

OBJECTS = $(SOURCES:.cpp=.o) # Setting the OBJECTS variable to be all the .o files generated from the .cpp files listed in SOURCES
EXEC = game # Setting the EXEC variable to the name of the executable file

all: $(EXEC) # Default target that builds the executable file using the $(EXEC) variable and executes all commands listed after

$(EXEC): $(OBJECTS) # Target to build the executable using the object files listed in OBJECTS
	$(CXX) $(CXXFLAGS) $(OBJECTS) -o $(EXEC) $(LIBS) # Command to link the object files and libraries to create the executable

.cpp.o: # Rule for converting .cpp files to .o files
	$(CXX) $(CXXFLAGS) -c $< -o $@ # Command to compile the .cpp file to a .o file using the $< and $@ symbols for input and output files respectively

clean: # Target to clean up all generated files
	rm -f $(OBJECTS) $(EXEC) # Command to remove both the object files and the executable file