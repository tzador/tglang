# This is a Makefile, a build automation tool
# It is used to specify targets and dependencies in a software project

# Define variables for compiler and compiler flags
CC = gcc
CFLAGS = -Wall -O3

# Define a variable for the source file
SRCS = main.c

# Define a variable for the object files
OBJS = $(SRCS:.c=.o)

# Define a target and its dependencies
# In this case, the target is 'program' and its dependencies are the object files
program: $(OBJS)
	# Use the compiler and compiler flags to link the object files and generate an executable
	# The -o flag specifies the output file name
	$(CC) $(CFLAGS) $(OBJS) -o program

# Define a target to clean up object and executable files
clean:
	# Use the 'rm' command to remove any files with the specified names
	# The -f flag suppresses errors if the files do not exist
	rm -f $(OBJS) program

# Define a target to run the program
run:
	# Use the './' notation to run the program from the current directory
	./program

# By default, the first target is executed when 'make' is called
# In this case, we want to compile and link the program
# The use of '.PHONY' ensures that the target is always executed, even if a file with the same name already exists
.PHONY: program