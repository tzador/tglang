# Declare variables
SOURCE_FILES := main.c helper.c
HEADER_FILES := helper.h
BUILD_DIRECTORY := build

# Use pattern rules to compile source files in build directory
# Use wildcards to get list of files to compile
${BUILD_DIRECTORY}/%.o: %.c $(HEADER_FILES)
	gcc -c $< -o $@

# Compile main program by linking all object files in build directory
app: ${addprefix ${BUILD_DIRECTORY}/,${notdir ${SOURCE_FILES:.c=.o}}}
	gcc $^ -o $@

# Define phony target 'clean' to remove build directory and compiled program
.PHONY: clean
clean:
	rm -r ${BUILD_DIRECTORY} app

# Use 'make' as default target, depends on 'all'
all: app

# Define phony target 'help' to print out a help message
.PHONY: help
help:
	@echo "Available targets:"
	@echo "- make: builds the main program 'app'"
	@echo "- make clean: removes the build directory and compiled program"
	@echo "- make help: prints out this help message"