# Create a variable that holds the compiler
CC := gcc

# Create a variable that holds the flags to be used in compilation
CFLAGS := -Wall -O2

# Create a variable that holds the directory where the source files are located
SRC_DIR := src

# Create a variable that holds the directory for object files
OBJ_DIR := obj

# Create a variable that holds the directory for the final executable
BIN_DIR := bin

# Create a wildcard to get all source files from SRC_DIR
SOURCES := $(wildcard $(SRC_DIR)/*.c)

# Create a list of object files by replacing .c extension with .o extension for each source file
OBJECTS := $(SOURCES:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)

# Main target, default target
all: $(BIN_DIR)/executable

# Rule to compile all source files into object files
$(OBJECTS): $(OBJ_DIR)/%.o : $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

# Rule to create the final executable by linking all object files
$(BIN_DIR)/executable: $(OBJECTS)
	$(CC) $(CFLAGS) $^ -o $@

# Rule to clean all object and executable files
.PHONY: clean
clean:
	rm -rf $(OBJ_DIR)/* $(BIN_DIR)/*