# Makefile for a C++ project
# This file is used to compile and link the project

# Set the compiler to g++
CC=g++

# Set compilation flags
CFLAGS=-c -Wall

# Set linking flags
LDFLAGS=-L/usr/lib -lglut -lGL -lGLU -lm

# Set header file directory
INCLUDES=-I/usr/include/GL

# Set the source files
SOURCES=main.cpp helper.cpp renderer.cpp

# Set the object files
OBJECTS=$(SOURCES:.cpp=.o)

# Set the name of the executable
EXECUTABLE=project

# The default target, will be executed when simply calling make without any target specified
# It will compile and link the project
all: $(SOURCES) $(EXECUTABLE)

# Compile the source files into object files
# This rule will be executed for each source file
.cpp.o:
	$(CC) $(CFLAGS) $(INCLUDES) $< -o $@

# Link the object files into the executable
# The object files are automatically expanded from the $(OBJECTS) variable
$(EXECUTABLE): $(OBJECTS)
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@

# Rule to clean up object files and the executable
clean:
	rm -rf $(OBJECTS) $(EXECUTABLE)

# Install the executable to /usr/bin
install:
	cp $(EXECUTABLE) /usr/bin

# Uninstall the executable from /usr/bin
uninstall:
	rm /usr/bin/$(EXECUTABLE)