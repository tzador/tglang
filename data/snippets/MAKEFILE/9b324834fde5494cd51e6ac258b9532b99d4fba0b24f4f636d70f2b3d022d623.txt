# This is a makefile for a project
# It contains instructions to build, test, and run the project

# Variables for compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra -g # Enable all warnings and debugging symbols

# Directories
SRCDIR = src
BUILDDIR = build
TESTDIR = test

# Include directories
INC_DIRS = -I $(SRCDIR) -I $(TESTDIR)

# Files: list of all source files and test files
SRC = $(wildcard $(SRCDIR)/*.c) # Wildcard function to find all files with ".c" extension
TEST_SRC = $(wildcard $(TESTDIR)/*.c) # Wildcard function to find all files with ".c" extension

# Objects: list of compiled object files
OBJ = $(patsubst $(SRCDIR)/%.c, $(BUILDDIR)/%.o, $(SRC)) # Substitution function to create object file names
TEST_OBJ = $(patsubst $(TESTDIR)/%.c, $(BUILDDIR)/%.o, $(TEST_SRC)) # Substitution function to create object file names

# Targets: default target is build
all: build

# Build target
build: $(BUILDDIR) $(OBJ) # Build directory and all object files
	$(CC) $(CFLAGS) $(OBJ) -o my_project # Link all object files to create executable

# Test target
test: $(TEST_OBJ) $(OBJ) # Compile test object files and main object files
	$(CC) $(CFLAGS) $(INC_DIRS) $(TEST_OBJ) $(OBJ) -o test_project # Link all object files and include directories to create test executable
	./test_project # Run test executable

# Rules for creating directories
$(BUILDDIR):
	mkdir -p $@ # Create build directory if it doesn't exist yet

# Rule for compiling source files into object files
$(BUILDDIR)/%.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) $(INC_DIRS) -c $< -o $@ # Compile each source file and output corresponding object file in build directory

# Rule for compiling test files into object files
$(BUILDDIR)/%.o: $(TESTDIR)/%.c
	$(CC) $(CFLAGS) $(INC_DIRS) -c $< -o $@ # Compile each test file and output corresponding object file in build directory

# Clean target to delete all generated files
clean:
	rm -rf $(BUILDDIR)/*.o my_project test_project # Delete all files with ".o" extension and executable