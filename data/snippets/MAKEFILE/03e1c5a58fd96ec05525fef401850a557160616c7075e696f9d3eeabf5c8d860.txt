# This is a complex Makefile that compiles and links multiple files
   # and includes header files and libraries

# Compiler used
CC = gcc
# Flags for compilation
CC_FLAGS = -g -Wall -I include

# Path where source files are located
SRC_PATH = src
# Path where object files will be created
OBJ_PATH = obj

# List of source files
SRCS = $(wildcard $(SRC_PATH)/*.c)

# Generate the names of the object files based on source file names
# e.g. 'src/main.c' will generate 'obj/main.o'
OBJS = $(SRCS:$(SRC_PATH)/%.c=$(OBJ_PATH)/%.o)

# List of directories where header files are located
INCLUDE_DIRS = -I include -I src/includes

# Libraries to be linked
LIBS = -lm -lpthread

# Default target, will be executed when 'make' is called
all: main

# Target to compile the application
main: $(OBJS)
	$(CC) $(CC_FLAGS) $^ -o $@ $(LIBS)

# Rule to generate object files
# First check if the OBJ_PATH directory exists, if not, create it
$(OBJ_PATH):
	mkdir -p $(OBJ_PATH)
# Compile each source file into an object file
$(OBJ_PATH)/%.o: $(SRC_PATH)/%.c
	$(CC) -c $(CC_FLAGS) $(INCLUDE_DIRS) $< -o $@

# Clean up target, will remove the obj folder and the executable 'main'
clean:
	rm -rf $(OBJ_PATH) main