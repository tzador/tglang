CC ?= gcc # Assigns the 'CC' variable to gcc compiler, the '?' ensures it only assigns if 'CC' variable is not already set

CFLAGS := -Wall -O3 # Assigns the 'CFLAGS' variable to -Wall (enable all warnings) and -O3 (optimize fully) flags

INCLUDES = -I_inc -I_lib # Assigns the 'INCLUDES' variable to include directories '_inc' and '_lib'

SRCDIR = src # Assigns the 'SRCDIR' variable to source directory 'src'

SOURCES := $(wildcard $(SRCDIR)/*.c) # Assigns the 'SOURCES' variable to a list of .c files from the source directory

OBJDIR = obj # Assigns the 'OBJDIR' variable to the object directory 'obj'

OBJECTS := $(patsubst $(SRCDIR)/%.c,$(OBJDIR)/%.o,$(SOURCES)) # Assigns the 'OBJECTS' variable to a list of object files based on the .c files in the source directory

TARGET = output # Assigns the 'TARGET' variable to the target executable 'output'

.PHONY: clean # 'clean' is a phony target, meaning it doesn't create a file (used for cleaning up)

all: $(TARGET) # 'all' is the default target, which depends on the target executable

$(TARGET): $(OBJECTS) # The target executable depends on the object files
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $(OBJECTS) # Compiles the target executable using 'CC' compiler, 'CFLAGS' and 'INCLUDES' variables, and object files ($@ symbol represents the target)

$(OBJDIR)/%.o: $(SRCDIR)/%.c # Rules for compiling each object file from its corresponding .c file
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@ # Compiles the .c file into an object file in the object directory

clean: # Rule for cleaning up object and executable files
	rm -f $(OBJDIR)/*.o $(TARGET) # Removes all object and executable files in the object directory and target executable file