# This is a Makefile, a type of build automation tool used in software development.
# It specifies how and when to compile and link different parts of a project.

# Variables can be defined to store values that can be used throughout the Makefile.
# Here, we define the compiler and its flags.
CC = g++
CFLAGS = -c -Wall

# The first target specified is usually the default target to be executed when running the Makefile.
# In this case, the 'all' target is depended on the 'main' target.
# This means that when running 'make all', the 'main' target will also be executed.
all: main

# Dependencies can be specified for a target by using a colon after the target name.
# In this case, the 'main' target depends on two files: main.cpp and helper.o.
main: main.cpp helper.o
	# A tab is used to denote commands that should be executed for this target.
	$(CC) main.cpp helper.o -o main

# The 'helper.o' target depends on the 'helper.cpp' file.
# By default, the target name should match the name of the file.
helper.o: helper.cpp
	# The '-c' flag tells the compiler to only compile the source code into an object file.
	# The '-o' flag specifies the name of the output file.
	$(CC) $(CFLAGS) helper.cpp -o helper.o
	
# This is a phony target, meaning it does not correspond to an actual file.
# It is used to group together targets and make executing them easier.
# In this case, we define the 'clean' target to remove all generated files.
.PHONY: clean
clean:
	rm -rf *.o main