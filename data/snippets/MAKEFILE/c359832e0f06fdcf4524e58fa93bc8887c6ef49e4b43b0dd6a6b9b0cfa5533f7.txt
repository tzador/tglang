# This Makefile creates a multi-step build process for a software application

# Define variables for source files and output directories
SRCDIR = src
OBJDIR = obj
BINDIR = bin

# Define compiler and flags
CC = gcc
CFLAGS = -Wall -Werror -pedantic -std=c99

# Define source files
SRCS = $(wildcard $(SRCDIR)/*.c)

# Create an object file for each source file
# The variable $< represents the current source file being compiled
# The variable $@ represents the corresponding object file being generated
# The -c flag ensures the source file is only compiled (not linked)
# The -o flag specifies the output file
$(OBJDIR)/%.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

# Create a list of object files by replacing the .c extension with .o
OBJS = $(patsubst $(SRCDIR)/%.c, $(OBJDIR)/%.o, $(SRCS))

# Define the final executable name
EXEC = program

# Build process with dependencies
build: $(OBJS)
	$(CC) $(CFLAGS) $(OBJS) -o $(BINDIR)/$(EXEC)

# Clean process to remove all generated files
clean:
	rm -rf $(BINDIR)/*
	rm -rf $(OBJDIR)/*

# Command to run the program
run:
	./$(BINDIR)/$(EXEC)

# Make the 'build' command the default by placing it first
default: build