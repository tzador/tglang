## Makefile example ##
 # `Makefile` is a build automation tool that is used to generate executable programs or libraries from source code files. 

# Variables are used to store values that can be used later in the code.
# They are declared with the `=` operator and called with the `$(variable)` syntax.
 
CC = gcc # C compiler
CFLAGS = -std=c11 -Wall -Werror # compilation flags
 
TARGET = program # executable name
 
# The first item in the `make` command is the `target` - the desired output of the Makefile.
# This is followed by a colon and the `prerequisites` - the files needed to generate the target.
# The `$(TARGET)` variable is used here to specify the executable name as the target.
 
$(TARGET): main.o helper.o # target: prerequisites
	$(CC) main.o helper.o -o $(TARGET) # The `$(CC)` variable is used here to specify the C compiler and the `-o` flag is used to specify the output file name.
 
main.o: main.c # prerequisite: source file
	$(CC) $(CFLAGS) -c main.c # The `$(CFLAGS)` variable is used here to specify any necessary compilation flags and the `-c` flag is used to compile without linking.
 
helper.o: helper.c # prerequisite: source file
	$(CC) $(CFLAGS) -c helper.c # Same as above
 
.PHONY: clean # `.PHONY` is used to indicate that `clean` is not a file, but a command.
clean:
	rm -f *.o # `rm` is used to remove files, and the `-f` flag is used to force the removal without prompting.