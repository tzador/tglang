######### VARIABLES ###########

# Creates a variable named 'CC' and assigns it the value 'gcc'
CC = gcc
# Creates a variable named 'CFLAGS' and assigns it with compiler flags for debugging
CFLAGS = -g
# Creates a variable named 'RM' and assigns it the value 'rm -f'
RM = rm -f

# Creates a variable named 'SOURCES' and assigns it with all the source files
SOURCES = main.c util.c constants.c

# Creates a variable named 'OBJECTS' and uses wildcard function to get all object file names
OBJECTS = $(SOURCES:.c=.o)

# Creates a variable named 'EXECUTABLE' and assigns it with the executable file name
EXECUTABLE = program

######### RULES ##########

# The 'all' rule is used to compile the program
all: $(SOURCES) $(EXECUTABLE)

# The '$(EXECUTABLE)' target depends on the '$(OBJECTS)' target, and if it is not up-to-date, it will be recompiled
$(EXECUTABLE): $(OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) -o $@

# The '%.o' rule is used to compile each source file into an object file
# The '%.o' notation specifies a pattern and can match any filename that ends with .o
# The '$@' notation refers to the target (i.e. the object file being created)
# The '$<' notation refers to the first prerequisite (i.e. the source file being compiled)
%.o: %.c
	$(CC) -c $(CFLAGS) $< -o $@

# The 'clean' rule is used to remove all object and executable files
clean:
	$(RM) $(OBJECTS) $(EXECUTABLE)