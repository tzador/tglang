# Set compiler and compiler flags
CC = gcc
CFLAGS = -Wall -Wextra -pedantic -O2

# Define source and build directories
SRCDIR = src
BUILDDIR = build

# Create a list of all C source files in source directory
SRCS = $(wildcard $(SRCDIR)/*.c)

# Create a list of corresponding object files in build directory
OBJS = $(patsubst $(SRCDIR)/%, $(BUILDDIR)/%, $(SRCS:.c=.o))

# Set target file and specify all object files as dependencies
TARGET = program
$(TARGET): $(OBJS)
	# Compile all object files and build the executable
	$(CC) $(CFLAGS) $^ -o $@

# Specify build rules for each object file
$(BUILDDIR)/%.o: $(SRCDIR)/%.c
	# Create build directory if it doesn't already exist
	mkdir -p $(BUILDDIR)
	# Compile each source file into its corresponding object file
	$(CC) $(CFLAGS) -c $< -o $@

# Specify clean rule to remove all object and executable files
.PHONY: clean
clean:
	rm -f $(BUILDDIR)/*.o $(TARGET)

# Specify a "all" rule as first target, so it's executed by default
.PHONY: all
all: $(TARGET)