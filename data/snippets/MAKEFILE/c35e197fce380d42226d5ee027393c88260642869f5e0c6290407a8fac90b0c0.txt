# This is a sample makefile for a project
# with multiple source files and dependencies

# Variables
CXX = g++
# The compiler of choice
CXXFLAGS = -Wall -Wextra -pedantic -std=c++11
# Flags for the compiler

# Define directories
SRCDIR = src
# Directory for source files
OBJDIR = obj
# Directory for object files
BINDIR = bin
# Directory for binary files

# List of source files
SOURCES = $(wildcard $(SRCDIR)/*.cpp)
# Grabs all .cpp files in SRCDIR
# and stores them in SOURCES
OBJECTS = $(SOURCES:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)
# Converts .cpp files in SOURCES to .o files
# in OBJDIR and stores them in OBJECTS

# Variables for final executable
EXEC = $(BINDIR)/project
# Name of final executable
DEPS = $(wildcard *.h)
# Grabs all .h files in current directory
# and stores them in DEPS

# Main target
$(EXEC): $(OBJECTS)
	$(CXX) $(CXXFLAGS) $^ -o $@
# Compiles and links all object files
# into the final executable

# Rules for building object files
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp $(DEPS)
	$(CXX) $(CXXFLAGS) -c $< -o $@
# Compiles .cpp files into .o files
# and stores them in OBJDIR

.PHONY: clean
clean:
	rm -rf $(OBJDIR)/*.o $(BINDIR)/*
# Removes all object and binary files
# in the OBJDIR and BINDIR directories

.PHONY: run
run:
	./$(EXEC)
# Runs the final executable

.PHONY: all
all: clean $(EXEC)
# Cleans and then builds the final executable

# Specify dependencies
$(OBJECTS): | $(OBJDIR)
# Specifies that the object files
# are dependent on the OBJDIR

$(EXEC): | $(BINDIR)
# Specifies that the final executable
# is dependent on the BINDIR directory

$(OBJDIR) $(BINDIR):
	mkdir -p $@
# Creates the OBJDIR and BINDIR directories
# if they do not already exist