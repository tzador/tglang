# A Makefile is commonly used in the Unix environment to automate the build process of a software project.

# The first line of a Makefile is usually used to define variables that can be reused throughout the file.
# In this example, the variable "CC" is set to the C compiler used for compilation.
CC = gcc

# The next few lines specify the different targets that can be built using this Makefile.
# A target is usually either a program or a library.
# In this case, we have two targets: "hello" and "libhello.a".
# Each target has a list of dependencies, defined using the ":" symbol.
# The ":=" symbol is used to assign a value to a variable.
# In this case, the "hello" target depends on the "hello.o" file, which in turn depends on the "hello.c" file.
# The "libhello.a" target depends on the "hello.o" and "helper.o" files.
hello: hello.o
	$(CC) -o hello hello.o

libhello.a: hello.o helper.o
	ar rcs $@ $^

# The "clean" target is used to remove any generated files and clean up the directory.
# The "@rm -f" command is used to forcefully remove files.
clean:
	@rm -f *.o hello libhello.a

# The ".PHONY" target is used to mark a target as being phony, meaning it does not correspond to a file name.
# This is useful for targets that do not actually create a file, but perform some actions.
.PHONY: clean

# The "hello.o" target is used to compile the "hello.c" file using the defined compiler.
# The "-c" flag is used to compile the code and create an object file.
# The "-o" flag is used to specify the output file name.
hello.o: hello.c
	$(CC) -c -o hello.o hello.c

helper.o: helper.c
	$(CC) -c -o helper.o helper.c