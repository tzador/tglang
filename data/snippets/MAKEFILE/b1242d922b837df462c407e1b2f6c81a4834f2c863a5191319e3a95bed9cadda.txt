# This is a sample makefile that compiles and links multiple C++ source files, with different build options

# Compiler and flags
CC = g++
CFLAGS = -std=c++11 -Wall -O

# Directories
SRCDIR = src
OBJDIR = obj
BINDIR = bin

# Target executable name
TARGET = program

# Listing all source files
SOURCES = $(wildcard $(SRCDIR)/*.cpp)
# Generating object files list
OBJECTS = $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(SOURCES))

# Rules for generating object files
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

# Default target - compiling and linking all object files
all: $(OBJECTS)
	$(CC) $(CFLAGS) $^ -o $(BINDIR)/$(TARGET)

# Clean up object files and executable
clean:
	rm -f $(OBJECTS) $(BINDIR)/$(TARGET)

# Specify dependencies for object files
$(OBJDIR)/main.o: $(SRCDIR)/main.cpp $(SRCDIR)/functions.h
$(OBJDIR)/functions.o: $(SRCDIR)/functions.cpp $(SRCDIR)/functions.h

# Build option targets
debug: CFLAGS += -g
debug: all

profile: CFLAGS += -pg
profile: all

# Disable built-in rules and variables
.SUFFIXES:
.PHONY: all clean debug profile