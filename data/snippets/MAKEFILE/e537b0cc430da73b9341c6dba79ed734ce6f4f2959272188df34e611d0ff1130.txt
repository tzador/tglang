# Define variables
SRCDIR := src
BINDIR := bin
TARGET := $(BINDIR)/program
INCLUDE := include
# Set compiler and flags
CC := gcc
CFLAGS := -Wall -g
# Create object files from source files
SOURCES := $(wildcard $(SRCDIR)/*.c)  # gets all .c files in src directory
OBJECTS := $(patsubst %.c, %.o, $(SOURCES))  # replaces the .c extension with .o for all source files
# Define rules
$(TARGET): $(OBJECTS)  # sets up dependencies for target
	$(CC) $(CFLAGS) -I$(INCLUDE) -o $@ $^  # compiles object files and creates target
$(SRCDIR)/%.o: $(SRCDIR)/%.c  # sets up rule for individual object files
	$(CC) $(CFLAGS) -I$(INCLUDE) -lm -c $< -o $@  # compiles individual object file with necessary flags
# Phony targets (do not match existing files)
.PHONY: all clean
all: $(TARGET)  # default target that will be executed if 'make' is called without any arguments
clean:
	rm -rf $(BINDIR)/*.o $(TARGET)  # removes all object files and target

# This Makefile is capable of compiling a program from source files in the `src` directory.
# It also creates a separate `bin` directory to store the compiled program.
# To use this Makefile, simply run `make` in the same directory as the Makefile.