# Makefile for project

# Set compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra

# Define directories
SRC_DIR = src
INCLUDE_DIR = include
OBJ_DIR = obj
BIN_DIR = bin

# Define source files and object files
SRCS = $(wildcard $(SRC_DIR)/*.c)	# All .c files in src directory
OBJS = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(SRCS)) # Create .o for each .c in obj directory

# Define dependencies for each object file
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c		# .o file depends on corresponding .c file
	$(CC) $(CFLAGS) -c $^ -o $@ -I $(INCLUDE_DIR) # Compile .c file and output as .o in obj directory with includes from include directory

# Define main target
main: $(OBJS)	# main target depends on all object files
	$(CC) -o $(BIN_DIR)/$@ $^ $(CFLAGS)	# Compile all object files and output as main executable in bin directory

# Define clean target
clean:
	rm -f $(OBJ_DIR)/*.o $(BIN_DIR)/main 	# Remove all object files and main executable in obj and bin directories

# Define .PHONY targets
.PHONY: all clean

# Define default target
all: main	# by default, run main target