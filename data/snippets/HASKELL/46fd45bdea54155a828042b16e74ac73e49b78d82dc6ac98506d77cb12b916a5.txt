{-# LANGUAGE FlexibleContexts #-}
    import Data.Char
    import Control.Monad
    import Text.Parsec
    import Text.Parsec.String
    
    -- | A 'Parser' that matches any alphabetical character
    alpha :: Stream s m Char => ParsecT s u m Char
    alpha = satisfy isAlpha
    
    -- | A 'Parser' that matches any digit
    digit :: Stream s m Char => ParsecT s u m Char
    digit = satisfy isDigit
    
    -- | A 'Parser' that matches any alphanumeric character
    alphaNum :: Stream s m Char => ParsecT s u m Char
    alphaNum = satisfy isAlphaNum
    
    -- | A 'Parser' that matches any whitespace character
    space :: Stream s m Char => ParsecT s u m Char
    space = satisfy isSpace

    -- | A 'Parser' that matches an integer number
    int :: Stream s m Char => ParsecT s u m Int
    int = fmap read $ many1 digit

    -- | A 'Parser' that matches a string of characters
    string :: Stream s m Char => String -> ParsecT s u m String
    string str = mapM char str
    
    -- | A 'Parser' that matches a comma-separated list of integers
    intList :: Stream s m Char => ParsecT s u m [Int]
    intList = sepBy int (char ',')

    -- | A 'Parser' that matches a boolean value
    bool :: Stream s m Char => ParsecT s u m Bool
    bool = fmap (== "True") (string "True" <|> string "False")