data User = User { --creates a new data type User
    firstName :: String, --defines the firstName field of type String
    lastName :: String, --defines the lastName field of type String
    age :: Int, --defines the age field of type Int
    occupation :: String --defines the occupation field of type String
} deriving (Show) --inherits the Show typeclass which allows us to print values of type User

getFullName :: User -> String --function that takes in a User and returns their full name
getFullName user = (firstName user) ++ " " ++ (lastName user) --concatenates the user's first and last name

checkAgeRestriction :: User -> Bool --function that checks if a user is above 18 years old
checkAgeRestriction user = (age user) >= 18 --compares the user's age to 18 and returns a boolean

updateOccupation :: User -> String -> User --function that updates a user's occupation
updateOccupation user newOccupation = user {occupation = newOccupation} --replaces the current occupation with the new one and returns the updated user

--sample user data
sampleUser = User {
    firstName = "John",
    lastName = "Doe",
    age = 25,
    occupation = "Software Developer"
}

--output: "John Doe"
print (getFullName sampleUser)

--output: True
print (checkAgeRestriction sampleUser)

--output: User {firstName = "John", lastName = "Doe", age = 25, occupation = "Data Scientist"}
print (updateOccupation sampleUser "Data Scientist")