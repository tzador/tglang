{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE TypeFamilies #-}

-- Define a type-level multiplication function using GADTs
-- This function takes in two type level natural numbers and returns their product

data Nat = Z | S Nat

type family Mult (a :: Nat) (b :: Nat) where
  Mult 'Z b = 'Z
  Mult ('S a) b = Add b (Mult a b)

-- Define a type-level addition function using GADTs
-- This function takes in two type level natural numbers and returns their sum

type family Add (a :: Nat) (b :: Nat) where
  Add 'Z b = b
  Add ('S a) b = 'S (Add a b)

-- Define a GADT representing a type level number
data TNat (n :: Nat) where
  TZ :: TNat 'Z
  TS :: TNat n -> TNat ('S n)

-- Define a function that converts a type level number to a value level number
toInt :: TNat n -> Int
toInt TZ = 0
toInt (TS n) = 1 + toInt n

-- Example usage
-- Multiply 3 and 4
multExample :: TNat (Mult ('S ('S ('S 'Z))) ('S ('S 'Z)))
multExample = TS (TS (TS (TS (TS (TS TZ)))))

-- Convert the type level number to a value level number and print the result
main :: IO ()
main = print (toInt multExample) -- Output: 12