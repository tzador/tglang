-- A function to check if a number is prime
prime :: Int -> Bool
prime n = null [x | x <- [2..floor.sqrt $ fromIntegral n], n `mod` x == 0]

-- A recursive function to generate prime numbers
-- starting from the given number
recursePrime :: Int -> [Int]
recursePrime start = if prime start then start : recursePrime (start + 1)
else recursePrime (start + 1)

-- A function to print the first 10 prime numbers
main :: IO ()
main = do
  let primes = take 10 (recursePrime 2)
  putStrLn "The first 10 prime numbers are:"
  mapM_ print primes