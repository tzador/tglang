-- This is a function in Haskell that takes in a list of integers and returns the sum of all the even numbers in the list
sumOfEvenNumbers :: [Int] -> Int
sumOfEvenNumbers list = foldr (+) 0 (filter even list) 

-- Explanation:
-- The function starts by defining the type signature, indicating that it takes in a list of integers and returns an integer as the output
-- Then, the function uses the higher-order function `foldr` to sum up all the elements in the list
-- The `(+)` function is passed as an argument to `foldr` to indicate that we want to add all the elements in the list
-- As the first argument, the function `foldr` takes in `0` as the starting value for the sum
-- Finally, the `filter` function is used to only keep the even numbers in the original list before passing it to `foldr` for the summing process
-- This code snippet showcases some of the powerful features of functional programming in Haskell, such as higher-order functions and function composition.

-- Sample input/output:
-- Input: [1, 2, 3, 4, 5, 6]
-- Output: 12