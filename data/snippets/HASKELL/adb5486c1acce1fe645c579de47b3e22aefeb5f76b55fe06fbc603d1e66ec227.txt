{-# LANGUAGE FlexibleContexts #-}

module Main where 

import Data.List (sort)

-- | Calculates the n-th term of the Fibonacci sequence
fib :: Int -> Int 
fib n = fibs !! n 
    where fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

-- | Checks if a given list is sorted in ascending order
isSorted :: Ord a => [a] -> Bool
isSorted [] = True
isSorted [_] = True
isSorted (x:y:xs) = x <= y && isSorted (y:xs)

-- | Returns the nth prime number
getNthPrime :: Int -> Int
getNthPrime n = primes !! (n - 1)

-- | List of prime numbers using the Sieve of Eratosthenes
primes :: [Int]
primes = sieve [2..]
    where sieve (p:xs) = p : sieve [x | x <- xs, x `mod` p /= 0]

-- | Generates an infinite list of natural numbers
naturals :: [Int]
naturals = [1..]

main :: IO ()
main = do
    -- Gets user input for the number of terms in the Fibonacci sequence to generate
    putStrLn "Enter the number of terms in the Fibonacci sequence:"
    input <- getLine
    let n = read input :: Int

    -- Prints out the Fibonacci sequence
    putStrLn "Fibonacci sequence up to the n-th term:"
    print $ take n fibs

    -- Checks if the Fibonacci sequence is sorted in ascending order
    putStrLn "Is the Fibonacci sequence sorted in ascending order?"
    print $ isSorted (take n fibs)

    -- Gets user input for the n-th prime number to generate
    putStrLn "Enter the n-th prime number:"
    input2 <- getLine
    let n2 = read input2 :: Int
    
    -- Prints out the n-th prime number
    putStrLn "The n-th prime number is:"
    print $ getNthPrime n2