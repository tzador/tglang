data Tree a = Leaf a | Node a (Tree a) (Tree a) -- Creates a data type called Tree with two different constructors, Leaf and Node
instance Functor Tree where -- Creates an instance for the Functor typeclass for our Tree data type
    fmap f (Leaf x) = Leaf (f x) -- Applies function f to the value inside a Leaf constructor and returns a new Leaf with the transformed value
    fmap f (Node x left right) = Node (f x) (fmap f left) (fmap f right) -- Applies function f to the value inside a Node constructor and recursively maps the function to the left and right subtrees, returning a new Node with the transformed values
instance Monad Tree where -- Creates an instance for the Monad typeclass for our Tree data type
    return x = Leaf x -- Returns a new Leaf with the given value
    (Leaf x) >>= f = f x -- Applies function f to the value inside a Leaf constructor and returns the result of that function
    (Node x left right) >>= f = Node (f x) (left >>= f) (right >>= f) -- Applies function f to the value inside a Node constructor and recursively uses the >>= operator to apply the function to the left and right subtrees, returning a new Node with the transformed values
treeSum :: (Num a) => Tree a -> a -- Creates a function treeSum that takes in a Tree of numbers and returns their sum
treeSum (Leaf x) = x -- If the Tree is a Leaf, return its value
treeSum (Node x left right) = x + treeSum left + treeSum right -- If the Tree is a Node, recursively sum the values of the left and right subtrees and add it to the value of the current Node