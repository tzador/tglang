-- Declare the function "findElement" which takes a list of integers and an integer n as parameters
findElement :: [Int] -> Int -> Maybe Int
-- Define the base case where the element is found and return its index
findElement (x:xs) n | x == n = Just 0
-- Call the function recursively on the rest of the list and add one to the final result
                     | otherwise = case (findElement xs n) of
                                     Just result -> Just (result + 1)
-- If no element is found, return Nothing
                                     _ -> Nothing