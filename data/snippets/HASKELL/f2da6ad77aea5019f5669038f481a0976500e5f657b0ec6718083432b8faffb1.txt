module Main where

import Data.List

-- Define a function that checks if a list is sorted in ascending order
isSorted :: Ord a => [a] -> Bool
isSorted [] = True
isSorted [x] = True
isSorted (x:y:xs) = x <= y && isSorted (y:xs)

-- Define a recursive function that counts the number of occurrences of an element in a list
countOccurrences :: Eq a => a -> [a] -> Int
countOccurrences _ [] = 0
countOccurrences n (x:xs)
    | n == x = 1 + countOccurrences n xs
    | otherwise = countOccurrences n xs

-- Define a function that merges two sorted lists into one sorted list
mergeSortedLists :: Ord a => [a] -> [a] -> [a]
mergeSortedLists [] ys = ys
mergeSortedLists xs [] = xs
mergeSortedLists (x:xs) (y:ys)
    | x <= y = x : mergeSortedLists xs (y:ys)
    | otherwise = y : mergeSortedLists (x:xs) ys

main :: IO ()
main = do
    -- Generate a list of random numbers
    let xs = [5, 2, 10, 8, 4]
    let ys = [1, 6, 3, 9, 7]

    -- Merge the two lists and output the result
    let sortedList = mergeSortedLists (sort xs) (sort ys)
    print sortedList

    -- Check if the list is sorted and output the result
    print $ isSorted sortedList

    -- Count the occurrences of the number 5 in the merged list
    print $ countOccurrences 5 sortedList