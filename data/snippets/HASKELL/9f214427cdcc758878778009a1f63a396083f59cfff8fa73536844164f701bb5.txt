-- Function to calculate the factorial of a number
-- Takes in an integer and returns its factorial
let factorial x = if x < 2 then 1
                   else x * factorial(x-1) --Recursive call to calculate factorial

-- Function to check if a number is prime or not
-- Takes in an integer and returns a boolean value
let isPrime x = if x < 2 then False
                else null [y | y <- [2..x-1], x `mod` y == 0] --Checks if any number from 2 to x-1 is a factor of x, if yes then it is not prime

-- Function to calculate the nth Fibonacci number
-- Takes in an integer n and returns the nth Fibonacci number
let fibonacci n = if n < 2 then n
                  else fibonacci(n-1) + fibonacci(n-2) --Uses recursion to calculate the nth Fibonacci number by adding the previous two numbers in the sequence

-- Function to reverse a list
-- Takes in a list and returns the reversed list
let reverseList list = if null list then []
                        else (reverseList (tail list)) ++ [head list] --Using recursion to swap the first and last elements of the list until list is empty and then appending them in reverse order

-- Function to implement binary search on a list
-- Takes in a sorted list and a search element and returns its index if found, else returns -1
let binarySearch list x = if null list then -1
                          else let mid = length list `div` 2 --Finding the mid index of the list
                                   midVal = list !! mid --Finding the mid element of the list
                               in if x == midVal then mid
                                  else if x < midVal then binarySearch (take mid list) x --Recursive call on the first half of the list
                                       else let index = binarySearch (drop (mid+1) list) x --Recursive call on the second half of the list
                                            in if index == -1 then -1 else mid+1+index --Returns the index of the search element if found, else -1