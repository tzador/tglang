--This code snippet implements the quicksort algorithm in Haskell

--Defining the quicksort function, with the input list of type 'a' (generic)
--and returning a sorted list of type 'a'

quicksort :: Ord a => [a] -> [a]

--Handling the empty list case
quicksort [] = []

--Making the first element the pivot and partitioning the rest of the list into two sublists
quicksort (x:xs) = 
    let left = quicksort [a | a <- xs, a <= x] --creating a sublist of elements less than or equal to the pivot
        right = quicksort [a | a <- xs, a > x] --creating a sublist of elements greater than the pivot
    in left ++ [x] ++ right --concatenating the sublists with the pivot element in between

--Example:
--Input: [4,2,7,1,5]
--Output: [1,2,4,5,7]