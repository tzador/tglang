module Main where

import Data.List (nub,sort)
import Control.Monad (replicateM)

data Suit = Spades | Hearts | Diamonds | Clubs
    deriving (Eq, Show)

data Rank = Ace | Two | Three | Four | Five | Six | Seven | Eight | Nine | Ten | Jack | Queen | King
    deriving (Eq, Ord, Enum, Show)

type Card = (Rank, Suit)

type Deck = [Card]

newDeck :: Deck
newDeck = [(rank, suit) | rank <- [Ace .. King], suit <- [Spades .. Clubs]]

randomCards :: Int -> Deck -> IO Deck
randomCards numCards deck = do
    let indices = take numCards $ randomRs (0, 51) (mkStdGen 42) :: [Int]
        cards = nub $ map (deck !!) indices
    if length cards == numCards
        then return cards
        else replicateM (numCards - length cards) (randomIO :: IO Card) >>= return . (cards ++)

main :: IO ()
main = do
    putStrLn "How many cards would you like?"
    num <- readLn :: IO Int
    result <- randomCards num newDeck
    putStrLn $ "Here are your " ++ show num ++ " cards:"
    mapM_ (putStrLn . formatCard) result

formatCard :: Card -> String
formatCard (rank, suit) = "[" ++ show rank ++ " of " ++ show suit ++ "]"