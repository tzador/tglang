{- 
A recursive function that checks if a given number is prime
Input: a positive integer n
Output: a boolean value indicating if n is prime or not
-}
checkPrime :: Int -> Bool
checkPrime n = if n < 2 
                 then False -- 2 is the smallest prime number
                 else checkPrimeHelper n 2 -- start the recursion at 2

-- Helper function that checks each potential factor
checkPrimeHelper :: Int -> Int -> Bool
checkPrimeHelper n x 
  | x >= n = True -- if we reach n without finding a factor, n must be prime
  | mod n x == 0 = False -- if x divides n evenly, n is not prime
  | otherwise = checkPrimeHelper n (x+1) -- otherwise, continue checking with the next potential factor

{- 
Sample output:
Input: 7
Output: True
-}