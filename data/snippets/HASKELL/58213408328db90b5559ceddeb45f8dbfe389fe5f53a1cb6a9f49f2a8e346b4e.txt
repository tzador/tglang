-- function for calculating factorial
factorial :: Integer -> Integer
factorial 0 = 1 -- base case
factorial n = n * factorial (n - 1) -- recursive case

-- function for generating a list of factorials
factorialList :: Integer -> [Integer]
factorialList n = map factorial [1..n] -- using map function to apply factorial function to list of numbers from 1 to n

-- function for finding the maximum factorial in a list of factorials
maxFactorial :: [Integer] -> Integer
maxFactorial [] = error "List is empty!" -- edge case
maxFactorial (x:xs) = foldl max x xs -- using foldl function to calculate maximum value in the list

-- testing the functions
main :: IO ()
main = do
    -- calculating factorial of 5
    let result = factorial 5
    putStrLn $ "Factorial of 5 is: " ++ show result
    -- generating a list of factorials up to 10
    let factors = factorialList 10
    putStrLn $ "List of factorials up to 10: " ++ show factors
    -- finding the maximum factorial in the list
    let max = maxFactorial factors
    putStrLn $ "Maximum factorial in the list is: " ++ show max