-- This is a complex function that takes in a list of integers
-- and returns a list that only contains the prime numbers from the original list.
-- First, we define a helper function that checks if a number is prime.
isPrime :: Int -> Bool
isPrime n | n < 2  = False
          | n == 2 = True
          | n == 3 = True
          | otherwise = not $ any (`divides` n) $ takeWhile (\x -> x * x <= n) [2..]
    where divides a b = b `mod` a == 0

-- Next, we define the main function that filters out non-prime numbers from a given list.
primes :: [Int] -> [Int]
primes xs = filter isPrime xs