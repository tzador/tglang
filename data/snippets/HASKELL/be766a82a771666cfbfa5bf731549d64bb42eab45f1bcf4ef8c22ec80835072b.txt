-- Define a recursive function to calculate the factorial of a number
factorial :: Integer -> Integer
factorial 0 = 1 -- base case when n = 0, the factorial is 1
factorial n = n * factorial (n-1) -- recursive case, n multiplied by factorial of n-1

-- Define a function to check if a number is prime
isPrime :: Integer -> Bool
isPrime n
  | n < 2 = False -- numbers less than 2 are not prime
  | n == 2 = True -- 2 is a prime number
  | otherwise = all (/=0) [n `mod` x | x <- [2..(n-1)]] -- check if n is divisible by any number from 2 to n-1, if not, then n is prime

-- Define a data type for a binary tree with elements of type Integer
data Tree a = Leaf a | Branch (Tree a) a (Tree a)

-- Define a function to insert an element into a binary search tree
insert :: Ord a => a -> Tree a -> Tree a
insert x (Leaf y) = if x > y then Branch (Leaf y) x (Leaf x) else Branch (Leaf x) y (Leaf y) -- if x is larger than the leaf, add it to the right, else add it to the left
insert x (Branch left y right)
  | x == y = Branch left y right -- if x is equal to the value at the current branch, do not insert it
  | x < y = Branch (insert x left) y right -- if x is smaller than the value at the current branch, insert it into the left subtree
  | x > y = Branch left y (insert x right) -- if x is larger than the value at the current branch, insert it into the right subtree