{-# LANGUAGE TypeFamilies #-}

import Data.Map (Map)
import qualified Data.Map as Map

-- A simple type family example
type family Multiply a b where
  Multiply Int Double = Double
  Multiply Double Int = Double
  Multiply Int Int = Int
  Multiply Double Double = Double

-- A typeclass with a method that uses the type family
class Multiplyable a where
  multiply :: a -> a -> Multiply a a

-- Implementations for the Multiplyable class
instance Multiplyable Int where
  multiply a b = a * b

instance Multiplyable Double where
  multiply a b = a * b

instance {-# OVERLAPPABLE #-} (Multiply a b ~ Double) => Multiplyable (a, b) where
  multiply (a, b) (c, d) = multiply a c * multiply b d

-- Example usage
myMap :: Map Int Double
myMap = Map.fromList [(1, 2.5), (2, 1.5), (3, 3.25)]

-- Sum of squares of values in the map
sumOfSquares :: Double
sumOfSquares = Map.foldrWithKey (\k v acc -> acc + multiply v v) 0 myMap