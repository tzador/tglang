-- Defining a recursive function to calculate the factorial of a given number
factorial :: Integer -> Integer
factorial 0 = 1 
factorial n = n * factorial (n-1)  -- Recursive call to calculate the factorial

-- A function to determine if a number is prime or not
isPrime :: Integer -> Bool
isPrime n 
    | n <= 1 = False
    | otherwise = null [x | x <- [2..(floor . sqrt . fromIntegral $ n)], n `mod` x == 0]

-- A function to generate a list of prime numbers
primeList :: Integer -> [Integer]
primeList n = filter isPrime [2..n]

-- Using the previously defined functions to find the sum of digits in the factorial of a given number
sumFactorialDigits :: Integer -> Integer
sumFactorialDigits n = sum (map (read . return) (show (factorial n)))

-- Printing the sum of digits in the factorial of 10
sumFactorialDigits 10

-- Output: 27