-- | A basic data type representing a binary tree with labeled nodes
data Tree a = EmptyNode
            | Node a (Tree a) (Tree a)
-- | An example tree of type 'Tree Int'
tree :: Tree Int
tree = Node 1 (Node 2 (Node 3 EmptyNode EmptyNode) (Node 4 EmptyNode EmptyNode)) (Node 5 (Node 6 EmptyNode EmptyNode) (Node 7 EmptyNode EmptyNode))
-- | A function to count the number of nodes in a tree
countNodes :: Tree a -> Int
countNodes EmptyNode = 0
countNodes (Node _ left right) = 1 + countNodes left + countNodes right
-- | A function to map a function to each node in the tree
mapTree :: (a -> b) -> Tree a -> Tree b
mapTree _ EmptyNode = EmptyNode
mapTree f (Node x left right) = Node (f x) (mapTree f left) (mapTree f right)
-- | A higher-order function to fold a tree into a single value
foldTree :: (a -> b -> b -> b) -> b -> Tree a -> b
foldTree _ acc EmptyNode = acc
foldTree f acc (Node x left right) = f x (foldTree f acc left) (foldTree f acc right)
-- | A function to calculate the height of a tree
height :: Tree a -> Int
height EmptyNode = 0
height (Node _ left right) = 1 + max (height left) (height right)