module Main where

import Data.List (nub)

-- | A custom type for a binary tree with nodes of any type
data BinaryTree a = Node a (BinaryTree a) (BinaryTree a) | Leaf


-- | A function that inserts a new element into the binary tree
-- If the element already exists, it is not inserted again
-- and the original tree is returned
insert :: Ord a => a -> BinaryTree a -> BinaryTree a
insert x Leaf = Node x Leaf Leaf
insert x (Node a left right)
    | x == a = Node a left right
    | x < a = Node a (insert x left) right
    | x > a = Node a left (insert x right)

-- | A function to check if an element exists in the binary tree
contains :: Ord a => a -> BinaryTree a -> Bool
contains _ Leaf = False
contains x (Node a left right)
    | x == a = True
    | x < a = contains x left
    | x > a = contains x right

-- | A function to remove an element from the binary tree
-- If the element is not found, the original tree is returned
remove :: Ord a => a -> BinaryTree a -> BinaryTree a
remove _ Leaf = Leaf
remove x (Node a left right)
    | x == a = removeNode (Node a left right)
    | x < a = Node a (remove x left) right
    | x > a = Node a left (remove x right)
    where
        -- | Helper function to remove the node with the element
        removeNode :: Ord a => BinaryTree a -> BinaryTree a
        removeNode (Node _ Leaf right) = right
        removeNode (Node _ left Leaf) = left
        removeNode (Node _ left right) = Node leftMax left (remove leftMax right)
            where
                -- | Helper function to get the maximum element in the left subtree
                leftMax :: Ord a => a
                leftMax = maximum left

-- | A function that returns a list of all elements in the binary tree
flatten :: BinaryTree a -> [a]
flatten Leaf = []
flatten (Node a left right) = (flatten left) ++ [a] ++ (flatten right)

-- | A function that removes duplicate elements from the binary tree
-- and returns a new tree with only distinct elements
removeDuplicates :: Ord a => BinaryTree a -> BinaryTree a
removeDuplicates tree = foldr insert Leaf (nub (flatten tree))