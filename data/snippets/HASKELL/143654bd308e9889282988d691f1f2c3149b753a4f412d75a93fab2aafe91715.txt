-- | A monad for non-deterministic computations.
data NonDet a = Empty | Single a | Choice (NonDet a) (NonDet a) deriving (Show)

-- | Bind operation for NonDet monad
(>>=) :: NonDet a -> (a -> NonDet b) -> NonDet b
Empty >>= f = Empty
Single x >>= f = f x
Choice x y >>= f = Choice (x >>= f) (y >>= f)

-- | Applicative operation for NonDet monad
(<*>) :: NonDet (a -> b) -> NonDet a -> NonDet b
Empty <*> _ = Empty
_ <*> Empty = Empty
Single f <*> x = fmap f x
Choice f g <*> x = Choice (f <*> x) (g <*> x)

-- | Monad instance for NonDet
instance Monad NonDet where
    (>>=) = (>>=)
    return = Single

-- | Applicative instance for NonDet
instance Applicative NonDet where (<*>) = (<*>); pure = return

-- | Functor instance for NonDet
instance Functor NonDet where fmap = (<*>)