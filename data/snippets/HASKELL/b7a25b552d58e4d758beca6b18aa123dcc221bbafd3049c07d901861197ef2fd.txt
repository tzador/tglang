import Data.List

-- Finds the maximum element in a list using recursion
findMax :: Ord a => [a] -> a
findMax [] = error "empty list"
findMax [x] = x
findMax (x:xs) = max x (findMax xs)

-- Generates a list of random integers
genList :: Int -> Int -> [Int]
genList seed size = take size . randomRs (0, 100) . mkStdGen seed

-- Performs bubble sort on a list
bubbleSort :: Ord a => [a] -> [a]
bubbleSort [] = []
bubbleSort xs = if sorted xs then xs else bubbleSort (init sortedList) ++ [last sortedList]
  where
    sortedList = foldr bubbleSortStep [] xs
    bubbleSortStep x [] = [x]
    bubbleSortStep x (y:ys)
      | x <= y    = x:y:ys
      | otherwise = y: bubbleSortStep x ys
    sorted xs = and $ zipWith (<) xs (tail xs)