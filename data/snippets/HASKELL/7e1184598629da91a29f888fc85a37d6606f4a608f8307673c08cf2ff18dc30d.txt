mergeSort :: Ord a => [a] -> [a]  -- A function that takes in a list of ordereable elements and returns a sorted list
mergeSort [] = []                   -- Base case: An empty list is already sorted
mergeSort [x] = [x]                 -- Base case: A list with only one element is already sorted
mergeSort xs = do                   -- Recursive case: Pattern matching to split the list into two
    let half = div (length xs) 2    -- Finds the midpoint of the list
    let left = take half xs         -- Splits the list into two halves
    let right = drop half xs         
    merge (mergeSort left) (mergeSort right)   -- Recursively calls mergeSort on the two halves and merges them in sorted order
    
merge :: Ord a => [a] -> [a] -> [a]    -- A helper function that merges two sorted lists
merge [] ys = ys                       -- If one list is empty, return the other list
merge xs [] = xs
merge (x:xs) (y:ys) = if x < y         -- Compares the first element of each list and adds the smaller one to the result
    then x : merge xs (y:ys)           -- Recursively calls merge on the remaining elements
    else y : merge (x:xs) ys