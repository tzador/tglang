{-# LANGUAGE OverloadedStrings, DeriveGeneric #-}
-- ^ Enables some language extensions we will use below

import Data.Aeson
-- ^ Library for working with JSON data

import Data.Maybe (fromJust)
-- ^ Library for handling Maybe types

import GHC.Generics
-- ^ Needed for our custom data type

-- | Represents a user with a name, age, and list of friends
data User = User { 
  name :: String, -- ^ User's name
  age :: Int, -- ^ User's age
  friends :: [String] -- ^ User's list of friends
} deriving (Show, Generic) -- ^ Derives default instances for our type

-- | Encodes a User into a JSON object
encodeUser :: User -> Value
encodeUser user = 
  object [ "name" .= name user
         , "age"  .= age user
         , "friends" .= friends user
         ]

-- | Decodes a JSON object into a User
decodeUser :: Value -> User
decodeUser val =
  User 
    (fromJust $ val ^? key "name" . _String) -- ^ Extracts name from JSON
    (fromJust $ val ^? key "age" . _Integer) -- ^ Extracts age from JSON
    (fromJust $ val ^? key "friends" . _Array . traverse . _String) -- ^ Extracts list of friends from JSON