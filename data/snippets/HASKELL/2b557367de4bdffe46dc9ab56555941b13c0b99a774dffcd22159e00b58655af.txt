module Main where -- Declare the module
    import Data.List -- Import Data.List module
    import Control.Monad.State -- Import Control.Monad.State module

    data BinaryTree a = Leaf | Node a (BinaryTree a) (BinaryTree a) -- Define a binary tree data type

    -- Function to insert a new element into a binary tree, using monadic state
    insert :: Ord a => a -> State (BinaryTree a) ()
    insert val = state $ \tree -> ((), insertInternal val tree)

    -- Internal helper function for insert
    insertInternal :: Ord a => a -> BinaryTree a -> BinaryTree a
    insertInternal val Leaf = Node val Leaf Leaf -- Insert value as root if tree is empty
    insertInternal val (Node nval left right)
        | val < nval = Node nval (insertInternal val left) right -- Insert to left subtree if value is less than current node
        | otherwise = Node nval left (insertInternal val right) -- Insert to right subtree if value is greater than current node

    -- Function to insert a list of elements into a binary tree using foldM from Control.Monad.State
    insertList :: Ord a => [a] -> State (BinaryTree a) ()
    insertList list = foldM (\_ num -> insert num) () list -- Insert each element in the list using foldM and insert function

    -- Function to get the sorted list of elements in a binary tree
    toList :: BinaryTree a -> [a]
    toList Leaf = [] -- Return empty list if tree is empty
    toList (Node val left right) = toList left ++ [val] ++ toList right -- Concatenate sorted lists of left subtree, root value, and right subtree

    -- Example usage:
    main :: IO ()
    main = do
        let initialTree = Leaf -- Create an empty binary tree
        let numList = [5, 2, 7, 9, 3, 1] -- Create a list of numbers
        let sortedList = evalState (insertList numList >> toList) initialTree -- Insert list into tree and get sorted list using evalState
        print sortedList -- Print sorted list