{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}

-- | The `Haskell` code snippet demonstrates the usage of various language extensions 
-- | and features to create a complex and extensible datatype and typeclass hierarchy.

-- | Defines a simple data type `List` with empty and cons constructors.
data List a where
  Nil :: List a
  Cons :: a -> List a -> List a

-- | Defines a typeclass `Append` that supports append operations on any two types.
class Append a b where
  type Result a b -- Type families extension to calculate the result type of the append operation
  (<>) :: a -> b -> Result a b

-- | Allows list concatenation by implementing `Append` for the `List` type.
instance Append (List a) (List a) where
  type Result (List a) (List a) = List a
  (<>) Nil ys = ys
  (<>) (Cons x xs) ys = Cons x (xs <> ys)

-- | Defines a typeclass `Monoid` that includes the `Append` operation and an identity element.
class Monoid a where
  (<>) :: a -> a -> a
  zero :: a

-- | Implements `Monoid` for the `Int` type with addition and 0 as the identity element.
instance Monoid Int where
  (<>) = (+)
  zero = 0

-- | Implements `Monoid` for `List` using list concatenation and an empty list as the identity element.
instance Monoid (List a) where
  (<>) = (<>)
  zero = Nil

-- | Defines a typeclass `Collection` that includes the `Monoid` operation and a `reverse` function.
-- | It also requires the type to be an instance of `Append` to allow for list concatenation.
class (Append a a, Monoid a) => Collection a where
  reverse :: a -> a

-- | Defines the `reverse` function for the `List` type, which reverses the elements of the list.
instance Collection (List a) where
  reverse Nil = Nil
  reverse (Cons x xs) = reverse xs <> Cons x Nil

-- | Defines a type `Tree` with a binary tree structure and values at each node.
data Tree a = Leaf a | Node (Tree a) (Tree a) deriving Show

-- | Defines a typeclass `Traversable` that allows for traversing a data structure.
class Traversable t where
  traverse :: Applicative f => (a -> f b) -> t a -> f (t b)

-- | Implements `traverse` for `Tree` by traversing the tree in-order and mapping the function over each value.
instance Traversable Tree where
  traverse f (Leaf x) = Leaf <$> f x
  traverse f (Node l r) = Node <$> traverse f l <*> traverse f r

-- | Defines a typeclass `Functor` that allows for mapping a function over a data structure.
class Functor f where
  fmap :: (a -> b) -> f a -> f b

-- | Implements `fmap` for `Tree` by mapping the function over each value in the tree.
instance Functor Tree where
  fmap f (Leaf x) = Leaf $ f x
  fmap f (Node l r) = Node (fmap f l) (fmap f r)