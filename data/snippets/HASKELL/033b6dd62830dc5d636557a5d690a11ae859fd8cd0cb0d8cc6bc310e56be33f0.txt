{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleContexts #-}

-- Declare a data type with a type family to represent different types of shapes 
data Shape a = Circle a | Rectangle a a | Triangle a a a

-- Define a type family instance to determine the area of a shape
type family Area (s :: Shape a) :: a where
    Area (Circle r) = a * a * pi  -- Area of a circle is pi times the square of its radius
    Area (Rectangle l w) = a * w  -- Area of a rectangle is its length times its width
    Area (Triangle a b c) = sqrt(s * (s - a) * (s - b) * (s - c))  -- Area of a triangle using Heron's formula

-- Define a function to calculate the perimeter of a shape using a type class constraint
perimeter :: (Num a, Shape s) => s -> a
perimeter s =
    case s of
        Circle r -> 2 * pi * a  -- Perimeter of a circle is 2 times pi times its radius
        Rectangle l w -> (2 * a) + (2 * w)  -- Perimeter of a rectangle is 2 times its length plus 2 times its width
        Triangle a b c -> a + b + c  -- Perimeter of a triangle is the sum of its sides

-- Define a function to calculate the surface area of a shape using recursion
surfaceArea :: (Num a, Shape s) => s -> a
surfaceArea s = 
    case s of
        Circle r -> Area (Circle r)  -- the surface area of a circle is equal to its area as it has no defined edges
        Rectangle l w -> Area (Rectangle l w)  -- the surface area of a rectangle is equal to its area as it has no defined edges
        Triangle a b c -> Area (Triangle a b c) + surfaceArea (Rectangle b c)  -- the surface area of a triangle can be calculated by adding its area to the surface area of the rectangle formed by its base and height