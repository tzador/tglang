module Main where

-- This is a comment
import Data.List

-- Function that generates a list of prime numbers up to a given number
primesTo :: Int -> [Int]
primesTo m = filter isPrime [2..m]
  where
    isPrime n = all ((/= 0) . (n `mod`)) [2..(sqrt' n)]
    sqrt' = round . sqrt . fromIntegral

-- Function to calculate the sum of the first n Fibonacci numbers
fibSum :: Int -> Int
fibSum n = foldl (\acc fib -> acc + fib) 0 (take n fibs)
  where fibs = 1 : 1 : zipWith (+) fibs (tail fibs)

-- Main function
main :: IO ()
main = do
    putStrLn "Enter a number to generate the Fibonacci sum:"
    n <- getLine
    let sum = fibSum (read n :: Int)
    putStrLn ("The sum of the first " ++ n ++ " Fibonacci numbers is: " ++ show sum)

-- Output:
-- Enter a number to generate the Fibonacci sum:
-- 10
-- The sum of the first 10 Fibonacci numbers is: 143