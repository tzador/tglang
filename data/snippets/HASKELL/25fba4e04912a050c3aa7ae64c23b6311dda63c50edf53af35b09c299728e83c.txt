data Tree a = Null | Node a (Tree a) (Tree a) --`Defining a binary tree with a value and left and right subtrees`

empty :: Tree a -> Bool
empty Null = True
empty _ = False
--`Function to check if a tree is empty`

insert :: (Ord a) => Tree a -> a -> Tree a
insert Null x = Node x Null Null
insert (Node val left right) x
  | x == val = Node val left right
  | x < val = Node val (insert left x) right
  | otherwise = Node val left (insert right x)
--`Function to insert a value into a tree while maintaining its binary search tree structure`

contains :: (Ord a) => Tree a -> a -> Bool
contains Null _ = False
contains (Node val left right) x
  | x == val = True
  | x < val = contains left x
  | otherwise = contains right x
--`Function to check if a given value is present in the tree`

delete :: (Ord a) => Tree a -> a -> Tree a
delete Null _ = Null
delete (Node val left right) x
  | x == val = case (left, right) of
      (Null, _) -> right
      (_, Null) -> left
      _ -> Node (findMin right) left (deleteMin right)
  | x < val = Node val (delete left x) right
  | otherwise = Node val left (delete right x)
  where
    findMin :: Tree a -> a
    findMin (Node val Null _) = val
    findMin (Node _ left _) = findMin left
    deleteMin :: Tree a -> Tree a
    deleteMin (Node _ Null right) = right
    deleteMin (Node val left right) = Node val (deleteMin left) right
--`Function to delete a given value from the tree while maintaining its binary search tree structure`