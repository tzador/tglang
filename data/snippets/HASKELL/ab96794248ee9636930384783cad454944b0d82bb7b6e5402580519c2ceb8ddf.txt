-- Define a data type for a binary tree
data BinaryTree a = Empty | Node (BinaryTree a) a (BinaryTree a)

-- Function to insert a value into a binary tree in a sorted order
insert :: Ord a => a -> BinaryTree a -> BinaryTree a
insert x Empty = Node Empty x Empty
insert x (Node left root right)
    | x < root = Node (insert x left) root right
    | x > root = Node left root (insert x right)
    | otherwise = Node left root right -- if value already exists, do not insert it again

-- Function to convert a binary tree to a list in a sorted order
toList :: BinaryTree a -> [a]
toList Empty = []
toList (Node left root right) = toList left ++ [root] ++ toList right

-- Example usage
let tree = Node (Node Empty 2 Empty) 1 (Node Empty 3 Empty) -- create a binary tree with 1 as root node and 2 and 3 as its children
let newTree = insert 4 tree -- insert value 4 into the tree
toList newTree -- convert the tree to a sorted list: [1,2,3,4]