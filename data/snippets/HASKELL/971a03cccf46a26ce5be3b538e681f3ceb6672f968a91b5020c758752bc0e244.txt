-- Define a function for generating the nth Fibonacci number
fibonacci :: Int -> Int
fibonacci 0 = 0     -- base case for 0
fibonacci 1 = 1     -- base case for 1
fibonacci n = nth - 1 + nth - 2     -- recursive case for n

-- Define a function for calculating the factorial of a number
factorial :: Integer -> Integer
factorial 0 = 1     -- base case for 0
factorial n = n * factorial (n - 1)     -- recursive case for n

-- Define a function for finding the maximum number in a list
maximum :: (Ord a) => [a] -> a
maximum [] = error "Empty list"   -- handle empty list case
maximum [x] = x     -- base case for a list with single element
maximum (x:xs) = if x > maxTail
                  then x
                  else maxTail    -- recursive case

-- Define a function for checking if a list is in ascending order
isAscending :: (Ord a) => [a] -> Bool
isAscending [] = True    -- base case for empty list, always ascending
isAscending [x] = True     -- base case for a list with single element, always ascending
isAscending (x:y:xs) = if x <= y
                       then isAscending (y:xs)
                       else False     -- recursive case, check if the current and next element are in ascending order