data Tree a = Node a (Tree a) (Tree a)
	      | Leaf

mapTree :: (a -> b) -> Tree a -> Tree b
mapTree _ Leaf = Leaf
mapTree f (Node x left right) = Node (f x) (mapTree f left) (mapTree f right)

class (Num a) => Vector a where
  dotProduct :: a -> a -> a
  crossProduct :: a -> a -> a

  magnitude :: a -> a
  magnitude vector = sqrt (dotProduct vector vector)

instance Vector Float where
  dotProduct x y = sum (zipWith (*) x y)
  crossProduct [x1, y1, z1] [x2, y2, z2] = [y1 * z2 - z1 * y2, z1 * x2 - x1 * z2, x1 * y2 - y1 * x2]
  magnitude vector = sqrt (dotProduct vector vector)

instance Vector Double where
  dotProduct x y = sum (zipWith (*) x y)
  crossProduct [x1, y1, z1] [x2, y2, z2] = [y1 * z2 - z1 * y2, z1 * x2 - x1 * z2, x1 * y2 - y1 * x2]
  magnitude vector = sqrt (dotProduct vector vector)