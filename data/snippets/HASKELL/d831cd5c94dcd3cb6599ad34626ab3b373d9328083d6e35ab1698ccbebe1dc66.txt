-- This code snippet implements a function to calculate the factorial of a number, using tail recursion.
-- It takes in an integer as input and returns the factorial value as an integer.

factorial :: Integer -> Integer          -- Define a function called 'factorial' that takes in an Integer and returns an Integer
factorial n = go n 1                      -- Initialize the recursive function by calling 'go' with the input and a starting value of 1
  where go 0 acc = acc                    -- Base case: if input is 0, return the accumulated value
        go x acc = go (x-1) (acc * x)     -- Recursive case: call 'go' with the input decremented by 1 and the accumulated value multiplied by the input

-- Example usage:
-- factorial 5 will return 120, as 5! = 5 * 4 * 3 * 2 * 1 = 120

-- This implementation of the factorial function is more efficient than a naive recursion method,
-- as it uses tail recursion and does not create a stack of function calls.
-- It also makes use of pattern matching in the 'where' clause for concise code.