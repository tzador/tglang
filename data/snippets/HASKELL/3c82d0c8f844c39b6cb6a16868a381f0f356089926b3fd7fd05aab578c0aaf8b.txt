-- Define the factorial function using pattern matching
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- Define a data type for a binary tree
data Tree a = Empty | Node a (Tree a) (Tree a)

-- Define a function to insert an element into a binary search tree
insert :: (Ord a) => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty
insert x (Node a left right)
    | x == a = Node x left right
    | x < a = Node a (insert x left) right
    | otherwise = Node a left (insert x right)

-- Define a function to sort a list using the insertion sort algorithm
insertionSort :: (Ord a) => [a] -> [a]
insertionSort [] = []
insertionSort (x:xs) = insert x (insertionSort xs)

-- Define the QuickSort function using list comprehension
quickSort :: (Ord a) => [a] -> [a]
quickSort [] = []
quickSort (x:xs) = smallerItems ++ [x] ++ largerItems
    where
        smallerItems = quickSort [a | a <- xs, a <= x]
        largerItems = quickSort [b | b <- xs, b > x]