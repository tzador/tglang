-- Define a function that calculates the sum of two lists
sumLists :: [Int] -> [Int] -> [Int]
sumLists [] [] = []
sumLists (x:xs) (y:ys) = (x+y) : sumLists xs ys

-- Define a function that returns the nth Fibonacci number
fibonacci :: Int -> Int
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci(n-1) + fibonacci(n-2)

-- Define a datatype for a binary tree
data BinaryTree a = EmptyTree | Node a (BinaryTree a) (BinaryTree a) 

-- Define a function that inserts a value into a binary tree
insert :: (Ord a) => a -> BinaryTree a -> BinaryTree a
insert x EmptyTree = Node x EmptyTree EmptyTree
insert x (Node a left right)
    | x == a = Node x left right
    | x < a = Node a (insert x left) right
    | x > a = Node a left (insert x right)

-- Define a function that applies a binary function to a binary tree
mapTree :: (a -> b -> c) -> BinaryTree a -> BinaryTree b -> BinaryTree c
mapTree _ EmptyTree _ = EmptyTree
mapTree _ _ EmptyTree = EmptyTree
mapTree f (Node a leftA rightA) (Node b leftB rightB) = 
    Node (f a b) (mapTree f leftA leftB) (mapTree f rightA rightB)