-- This function takes in two numbers and returns their product
mult :: Int -> Int -> Int
mult x y = x * y

-- This function takes in a list of strings and concatenates them
concatenate :: [String] -> String
concatenate [] = ""
concatenate (x:xs) = x ++ (concatenate xs)

-- This function takes in a string and checks if it is a palindrome
isPalindrome :: String -> Bool
isPalindrome str = str == reverse str

-- This function takes in a list and returns the sum of all even numbers
sumEven :: [Int] -> Int
sumEven = sum . filter even

-- This function recursively calculates the factorial of a number
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)

-- This function takes in two numbers and returns their greatest common divisor
gcd :: Int -> Int -> Int
gcd a b = if b == 0 then a else gcd b (a `mod` b)

-- This function takes in a list of numbers and returns the minimum value
minValue :: [Int] -> Int
minValue = foldl1 min

-- This function takes in a list of tuples and returns the product of their second elements
productOfSecond :: [(Int, Int)] -> Int
productOfSecond = foldl1 (\acc (x,y) -> acc * y)