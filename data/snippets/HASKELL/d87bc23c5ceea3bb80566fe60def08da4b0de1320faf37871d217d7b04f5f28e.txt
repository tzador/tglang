data Tree a = Leaf a | Node (Tree a) (Tree a) 
-- Declaring a new data type 'Tree' with type parameter 'a', which can either be a Leaf containing a single value of type 'a'
-- or a Node containing two subtrees of type 'Tree a'

mapTree :: (a -> b) -> Tree a -> Tree b 
-- Declaring a function 'mapTree' which takes in a function from type 'a' to type 'b', and a Tree of type 'a'
-- and returns a Tree of type 'b'

mapTree f (Leaf a) = Leaf (f a) 
-- Base case: when the input Tree is a Leaf, apply the function 'f' to the value inside the Leaf and return a Leaf with the new value

mapTree f (Node left right) = Node (mapTree f left) (mapTree f right) 
-- Recursive case: when the input Tree is a Node, apply the function 'f' to each of the subtrees (left and right) and construct a new Node with the mapped subtrees