-- Function that checks if a number is prime
-- Takes in a number and returns a boolean
isPrime :: Int -> Bool
isPrime n
  | n < 2 = False -- Checks if number is less than 2
  | n == 2 = True -- Checks if number is equal to 2
  | n `mod` 2 == 0 = False -- Checks if number is divisible by 2
  | otherwise = all (\x -> n `mod` x /= 0) [3,5..sqrtN] -- Checks if number is divisible by any odd number up to the square root of the number
    where sqrtN = floor $ sqrt $ fromIntegral n -- Calculates the square root of the number and converts it to an Int
  
-- Function that generates a list of prime numbers up to a given limit
-- takes in an integer and returns a list of primes
generatePrimes :: Int -> [Int]
generatePrimes limit = [x | x <- [2..limit], isPrime x] -- Uses list comprehension to generate a list of numbers up to the limit and filters out non-prime numbers using the isPrime function