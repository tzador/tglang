{-# LANGUAGE DeriveGeneric #-}

import Data.List (sort)
import Data.Map (Map)
import qualified Data.Map as Map
import Data.Set (Set)
import qualified Data.Set as Set
import GHC.Generics

data Person = Person
  { name :: String,
    age :: Int,
    favoriteFood :: String,
    likesCats :: Bool
  }
  deriving (Show, Generic)

data Tree a = Leaf a | Branch (Tree a) (Tree a)
  deriving Show

-- | Custom instance of `Eq` for `Tree` data type
instance (Eq a) => Eq (Tree a) where
  (Leaf x) == (Leaf y) = x == y
  (Branch xl xr) == (Branch yl yr) = xl == yl && xr == yr
  _ == _ = False

-- | Function that takes in a list of `Person` and returns a map
-- of their names as keys and their ages as values
getAges :: [Person] -> Map String Int
getAges people = Map.fromList $ map (\p -> (name p, age p)) people

-- | Function that takes in a list of `Person` and returns a set
-- of their favorite foods
getFavoriteFoods :: [Person] -> Set String
getFavoriteFoods people = Set.fromList $ map favoriteFood people

-- | Function that takes in a list of `Person` and returns a boolean
-- representing whether there is at least one person who likes cats
anyLikesCats :: [Person] -> Bool
anyLikesCats people = any likesCats people

-- | Recursive function that finds the maximum value in a `Tree` of `Int`
findMax :: Tree Int -> Int
findMax (Leaf x) = x
findMax (Branch l r) = max (findMax l) (findMax r)

-- | Function that takes in two `Tree` of `Int` and returns a `Tree` representing
-- the union of the two trees, with duplicate values being combined with sum
treeUnion :: Tree Int -> Tree Int -> Tree Int
treeUnion (Leaf x) (Leaf y) = Leaf (x + y)
treeUnion (Branch xl xr) (Branch yl yr) = Branch (treeUnion xl yl) (treeUnion xr yr)
treeUnion tree _ = tree -- if one tree is a `Leaf` and the other is a `Branch`, return the `Leaf`

-- | Example usage

people :: [Person]
people =
  [ Person "Alice" 30 "Pizza" True,
    Person "Bob" 25 "Burgers" False,
    Person "Charlie" 35 "Sushi" True,
    Person "Diane" 40 "Italian" False
  ]

-- Output:
-- Map.fromList [("Alice",30),("Bob",25),("Charlie",35),("Diane",40)]
getAges people

-- Output:
-- fromList ["Burgers", "Italian", "Pizza", "Sushi"]
getFavoriteFoods people

-- Output:
-- True
anyLikesCats people

-- Output:
-- 41
findMax $ Branch (Leaf 20) (Branch (Leaf 15) (Leaf 41))

-- Output:
-- Branch (Leaf 40) (Branch (Leaf 25) (Leaf 48))
treeUnion (Branch (Leaf 20) (Leaf 25)) (Branch (Leaf 40) (Leaf 23))