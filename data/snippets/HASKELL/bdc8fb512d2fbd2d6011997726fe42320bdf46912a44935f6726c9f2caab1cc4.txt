{-# LANGUAGE LambdaCase #-}
import Data.List (sortBy)
import Data.Ord (comparing)

-- |A function that takes in a list of integers and returns a list of the first 10 even numbers in ascending order.
-- The list comprehension creates a list of even numbers by filtering out elements that leave a remainder when divided by 2.
-- Then, we sort the list in ascending order using the 'sortBy' function, with the comparison based on the value of each number.
-- Finally, we take the first 10 elements of the now-sorted list using the 'take' function and return the result.
getFirst10EvenNumbers :: [Integer] -> [Integer]
getFirst10EvenNumbers xs = take 10 (sortBy (comparing fst) [(x, ()) | x <- xs, x `mod` 2 == 0])