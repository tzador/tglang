--| This function takes in a list, adds the first and last elements, and returns the sum
sumOfFirstAndLast :: [Int] -> Int
sumOfFirstAndLast [] = 0
sumOfFirstAndLast [x] = x
sumOfFirstAndLast (x:xs) = x + last xs

--| This function takes in a list of integers and a number, and returns a list of integers
--| where each element is multiplied by the number
multiplyNum :: [Int] -> Int -> [Int]
multiplyNum [] _ = []
multiplyNum (x:xs) num = (x * num) : (multiplyNum xs num)

--| This function takes in a list of pairs and returns the sum of the first elements of each pair
sumOfPairs :: [(Int, Int)] -> Int
sumOfPairs [] = 0
sumOfPairs ((x,y):xs) = x + (sumOfPairs xs)