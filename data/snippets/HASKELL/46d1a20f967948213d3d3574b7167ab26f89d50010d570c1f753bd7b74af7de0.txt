module Main where

import Data.List (sort)

-- This function takes in a list and returns the sum of all its elements.
getSum :: [Int] -> Int
getSum [] = 0
getSum (x:xs) = x + getSum xs

-- This function takes in a String, sorts it, and returns a new String with the characters in ascending order.
sortString :: String -> String
sortString str = sort str

-- This function takes in a list of Maybe values and returns a list containing only the Just values.
getJustValues :: [Maybe a] -> [a]
getJustValues [] = []
getJustValues (Nothing:xs) = getJustValues xs
getJustValues (Just x:xs) = x:getJustValues xs

main :: IO ()
main = do
  putStrLn "Enter a list of numbers separated by spaces:"
  input <- getLine
  let numList = map read (words input) :: [Int]
  let sum = getSum numList
  putStrLn "Sum of the list is:"
  print sum

  putStrLn "Enter a string to sort:"
  str <- getLine
  let sortedStr = sortString str
  putStrLn "Sorted string:"
  putStrLn sortedStr

  let maybeList = [Just 2, Nothing, Just 5, Just 9, Nothing, Just 1]
  let justList = getJustValues maybeList
  putStrLn "List containing only Just values:"
  print justList