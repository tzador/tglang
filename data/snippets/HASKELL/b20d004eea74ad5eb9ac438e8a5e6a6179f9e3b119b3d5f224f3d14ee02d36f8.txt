{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE TypeFamilies #-}

module VectorAdd where

import GHC.TypeLits

-- | The `Vector` type represents a vector of type `a` with length `n`.

-- | `Nat` is a type-level natural number.

data Vector (a :: *) (n :: Nat) where
  Nil :: Vector a 'Z
  (:-) :: a -> Vector a n -> Vector a ('S n)

-- | The `Add` type family calculates the sum of two natural numbers.
type family Add (n :: Nat) (m :: Nat) :: Nat where
  Add 'Z m = m
  Add ('S n) m = 'S (Add n m)

-- | The `add` function adds two vectors of the same length element-wise.
add :: (Num a, KnownNat n) => Vector a n -> Vector a n -> Vector a n
add Nil Nil = Nil
add (x :- xs) (y :- ys) = x + y :- add xs ys

-- | `main` is the main entry point for the program.
main :: IO ()
main = print $ add (1 :- 2 :- Nil) (5 :- 6 :- Nil) -- Outputs: (6 :- 8 :- Nil)