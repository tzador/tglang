-- | This function generates all possible permutations of a list of integers, including duplicates if present
-- | Example input: [1,2,3]
-- | Example output: [[1,2,3], [2,1,3], [2,3,1], [3,1,2], [3,2,1], [1,3,2]]
permute :: [Int] -> [[Int]]
permute [] = [[]] -- if the list is empty, return an empty list
permute xs = [x:ys | x <- xs, ys <- permute (delete x xs)] -- recursively generate all permutations, adding one element at a time from the input list

-- | This function deletes an element from a list and returns the remaining list
delete :: Eq a => a -> [a] -> [a]
delete _ [] = []
delete x (y:ys) -- if the first element in the list is the one to be deleted, skip it
    | x == y = ys
    | otherwise = y:delete x ys

main :: IO ()
main = do
    putStrLn "Enter a list of integers: "
    input <- getLine
    let result = permute (read input :: [Int]) -- read the user input and convert it to a list of integers
    putStrLn ("All permutations: " ++ show result) -- print the resulting list of permutations