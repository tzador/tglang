-- Declare a custom data type for a binary tree
data Tree a = Empty
            | Leaf a
            | Node (Tree a) a (Tree a)

-- Function to insert an element into the binary tree in sorted order
insert :: Ord a => a -> Tree a -> Tree a
insert x Empty = Leaf x
insert x (Leaf y)
  | x < y = Node (Leaf x) y Empty
  | x > y = Node Empty y (Leaf x)
  | otherwise = Leaf y
insert x (Node left y right)
  | x < y = Node (insert x left) y right
  | x > y = Node left y (insert x right)
  | otherwise = Node left y right

-- Function to delete an element from the binary tree
remove :: Ord a => a -> Tree a -> Tree a
remove x Empty = Empty
remove x (Leaf y)
  | x == y = Empty
  | otherwise = Leaf y
remove x (Node left y right)
  | x < y = Node (remove x left) y right
  | x > y = Node left y (remove x right)
  | otherwise = merge left right
    where merge Empty r = r
          merge l Empty = l
          merge l r = let Node maxLeft _ _ = findMax l in Node maxLeft y r
          findMax (Node _ a Empty) = Leaf a
          findMax (Node _ _ right) = findMax right

-- Function to check if an element is present in the binary tree
search :: Ord a => a -> Tree a -> Bool
search x Empty = False
search x (Leaf y)
  | x == y = True
  | otherwise = False
search x (Node left y right)
  | x < y = search x left
  | x > y = search x right
  | otherwise = True

-- Code to create and manipulate the binary tree
-- Let's insert some numbers into the tree
tree = foldr insert Empty [7, 4, 9, 2, 8, 10, 3, 5]

-- Output the tree
-- Expected output: Node (Node (Node (Leaf 2) 3 (Leaf 4)) 5 Empty) 7 (Node (Leaf 8) 9 (Leaf 10))
print tree

-- Check if the number 8 is present in the tree
-- Expected output: True
print $ search 8 tree

-- Delete the number 8 from the tree
-- Expected output: Node (Node (Node (Leaf 2) 3 (Leaf 4)) 5 Empty) 7 (Leaf 10)
print $ remove 8 tree