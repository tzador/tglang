{-# LANGUAGE FlexibleInstances #-}
-- This is a comment in haskell
add :: Num a => a -> a -> a
add x y = x + y

-- This is a function that takes in another function and applies it twice
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

-- This is a typeclass that supports equality checking
class Eq a where
  (==) :: a -> a -> Bool
  (/=) :: a -> a -> Bool
  
-- This is an instance of the Eq typeclass for Bool
instance Eq Bool where
  True == True = True
  False == False = True
  _ == _ = False
  
-- This is a datatype that represents a binary tree
data BinaryTree a = EmptyTree | Node a (BinaryTree a) (BinaryTree a)

-- This is a function that inserts an element into a binary tree
insert :: Ord a => a -> BinaryTree a -> BinaryTree a
insert x EmptyTree = Node x EmptyTree EmptyTree
insert x (Node a left right)
  | x == a = Node x left right
  | x < a = Node a (insert x left) right
  | x > a = Node a left (insert x right)
  
-- This is a monadic function that outputs a list of pairs from two lists
listPairs :: Monad m => [a] -> [b] -> m (a, b)
listPairs as bs = do
  a <- as
  b <- bs
  return (a, b)
  
-- This is a function that takes in a list and returns a list of tuples containing each element and its index
enumerate :: [a] -> [(Int, a)]
enumerate as = zip [0..] as