-- This is a function that takes in two numbers and returns their sum
sum :: Int -> Int -> Int
sum x y = x + y

-- This is a recursive function that calculates the factorial of a number
factorial :: Int -> Int
factorial n = if n == 0 then 1 else n * factorial (n - 1)

-- This is a function that takes in a list of numbers and returns the product of all the numbers in the list
product :: [Int] -> Int
product [] = 1
product (x:xs) = x * product xs

-- This is a custom data type that represents a person with a name and age
data Person = Person String Int

-- This is a function that takes in a list of people and returns a list of their ages
getAges :: [Person] -> [Int]
getAges [] = []
getAges ((Person name age):xs) = age : getAges xs

-- This is an example of using higher-order functions to filter a list based on a predicate
-- The function takes in a list of numbers and returns a list of numbers that are greater than 10
filter :: (Int -> Bool) -> [Int] -> [Int]
filter _ [] = []
filter p (x:xs)
    | p x = x : filter p xs
    | otherwise = filter p xs