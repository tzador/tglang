-- Define a binary tree type
data Tree a = Empty | Branch a (Tree a) (Tree a)

-- Define a function to flatten a tree into a list
flatten :: Tree a -> [a]
flatten Empty = []
flatten (Branch x l r) = flatten l ++ [x] ++ flatten r

-- Define a function to map a function over all values in a tree
mapTree :: (a -> b) -> Tree a -> Tree b
mapTree _ Empty = Empty
mapTree f (Branch x l r) = Branch (f x) (mapTree f l) (mapTree f r)

-- Define a function to check if a tree is balanced (height of left and right subtrees differ by at most 1)
isBalanced :: Tree a -> Bool
isBalanced Empty = True
isBalanced (Branch _ l r) = abs (height l - height r) <= 1 && isBalanced l && isBalanced r

-- Define a function to calculate the height of a tree
height :: Tree a -> Int
height Empty = 0
height (Branch _ l r) = 1 + max (height l) (height r)