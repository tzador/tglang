module Main where

import Data.List (sort)  -- Import the sort function from the Data.List module

{- This function checks if a given list is a palindrome
   by comparing the list with its reversed version
   using recursion and pattern matching -}
isPalindrome :: Eq a => [a] -> Bool
isPalindrome [] = True        -- An empty list is a palindrome
isPalindrome [_] = True       -- A list with only one element is a palindrome
isPalindrome (x:xs)
  | x == last xs = isPalindrome (init xs)    -- Check if first and last element of list are equal
  | otherwise = False                        -- If not, list is not a palindrome

-- This function reverses a list using foldl
reverseList :: [a] -> [a]
reverseList = foldl (\acc x -> x:acc) []  -- Using an anonymous function and accumulator for reverse

-- Main function
main :: IO ()
main = do
  putStrLn "Enter a list of numbers: "
  input <- getLine               -- Get input from user
  let numbers = read input :: [Int]     -- Read input as list of integers
  if isPalindrome numbers           -- If input list is a palindrome
    then putStrLn "The list is a palindrome!"   -- Print message
    else do
      let reversed = reverseList numbers    -- Reverse the list
      putStrLn "The reversed list is: "
      print (sort reversed)          -- Print the sorted reversed list