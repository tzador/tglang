-- Defining a higher-order function to find the sum of a list of
-- numbers, using recursion and pattern matching
sum :: [Int] -> Int
sum [] = 0
sum [x] = x
sum (x:xs) = x + sum xs

-- Defining a function to remove duplicates from a list
removeDuplicates :: Eq a => [a] -> [a]
removeDuplicates [] = []
removeDuplicates (x:xs) = x : removeDuplicates (filter (/=x) xs)

-- Defining a function to print the first n numbers of the Fibonacci sequence
-- using dynamic programming and memoization
fib :: Int -> [Int]
fib n = map fib' [0..n]
  where
    fib' 0 = 0
    fib' 1 = 1
    fib' n = fib (n-1) + fib (n-2)