-- | A representation of a binary tree with annotated nodes
data Tree a = Empty
            | Node a (Tree a) (Tree a)
   deriving (Show, Eq) -- derive the Show and Eq typeclasses for automatic printing and equality checking

-- | A function that takes in two trees and returns their intersection
treeIntersection :: Tree a -> Tree a -> Tree a
treeIntersection Empty _ = Empty -- if first tree is empty, return empty tree
treeIntersection _ Empty = Empty -- if second tree is empty, return empty tree
treeIntersection (Node val1 l1 r1) (Node val2 l2 r2)
    | val1 == val2 = Node val1 (treeIntersection l1 l2) (treeIntersection r1 r2) -- if values are equal, add value and recurse on left and right subtrees
    | otherwise = Empty -- if values are not equal, return empty tree

-- | Example usage
exampleTree1 :: Tree Int -- example tree holding integer values
exampleTree1 = Node 1 (Node 2 Empty (Node 3 Empty Empty)) (Node 4 (Node 5 Empty Empty) Empty)

exampleTree2 :: Tree Int -- another example tree holding integer values
exampleTree2 = Node 2 (Node 3 (Node 10 Empty Empty) Empty) (Node 4 (Node 5 Empty Empty) (Node 6 Empty Empty))

-- | Call the function on the example trees and print the result
main :: IO ()
main = do
    let intersection = treeIntersection exampleTree1 exampleTree2 -- calculate the intersection of the example trees
    print intersection -- print the result