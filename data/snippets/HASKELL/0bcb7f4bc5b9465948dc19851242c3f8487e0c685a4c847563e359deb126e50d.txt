{-# LANGUAGE GADTs #-}

module ComplexNumbers where

-- Defining a data type for complex numbers
data ComplexNumber a where
  Complex :: (a, a) -> ComplexNumber a  -- (real part, imaginary part)

-- Adding two complex numbers
instance Num a => Num (ComplexNumber a) where
  (+) (Complex (a1,b1)) (Complex (a2,b2)) = Complex (a1 + a2, b1 + b2)
  (*) (Complex (a1,b1)) (Complex (a2,b2)) = Complex (a1*a2 - b1*b2, a1*b2 + b1*a2)
  negate (Complex (a,b)) = Complex (negate a, negate b)
  signum (Complex (a,_)) = fromInteger $ signum a
  abs (Complex (a,b)) = Complex (abs a, abs b)
  fromInteger x = Complex (fromInteger x, 0)

-- Multiplying two complex numbers
instance Fractional a => Fractional (ComplexNumber a) where
  (/) (Complex (a1,b1)) (Complex (a2,b2)) = Complex (real/q, imag/q)
    where
      q = a2*a2 + b2*b2
      real = a1*a2 + b1*b2
      imag = b1*a2 - a1*b2
  fromRational x = Complex (fromRational x, 0)

-- Converting complex number to string
instance Show a => Show (ComplexNumber a) where
  show (Complex (a,b))
    | b > 0 = show a ++ " + " ++ show b ++ "i"
    | b < 0 = show a ++ " - " ++ show (-b) ++ "i"
    | otherwise = show a

-- Example usage
-- Creating two complex numbers
n1 = Complex (2, 4)
n2 = Complex (3, -5)

-- Adding two complex numbers
n1 + n2
-- Output: Complex (-1,-1)

-- Multiplying two complex numbers
n1 * n2
-- Output: Complex (26,-14)

-- Converting complex number to string
show n1
-- Output: "2 + 4i"