-- This function takes in two integers and returns their product
product :: Int -> Int -> Int
product x y = x * y

-- This function checks if a number is prime or not
isPrime :: Int -> Bool
isPrime n = n > 1 && foldr (\x acc -> acc && n `mod` x /= 0) True [2..n-1]

-- This function calculates the sum of all prime numbers from 1 to n
sumOfPrimes :: Int -> Int
sumOfPrimes n = sum $ filter isPrime [1..n]

-- This function takes in a list of strings and returns the reverse of each
reverseStrings :: [String] -> [String]
reverseStrings list = map reverse list

-- This function checks if a list is a palindrome or not
isPalindrome :: Eq a => [a] -> Bool
isPalindrome list = list == reverse list