-- | Function that checks if a given number is prime
isPrime :: Int -> Bool
isPrime num = null [
  x | x <- [2..(num `div` 2)],
  num `mod` x == 0
 ]

-- | Function that recursively calculates the nth Fibonacci number
fibonacci :: Int -> Int
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n-1) + fibonacci (n-2)

-- | Function that takes in a list of strings and removes all vowels
removeVowels :: [String] -> [String]
removeVowels = map (filter (`notElem` "aeiou"))

-- | Function that sorts a list of integers in ascending order using insertion sort
insertionSort :: [Int] -> [Int]
insertionSort list = foldr insert [] list
  where
    insert x [] = [x]
    insert x (y:ys)
      | x < y = x : y : ys
      | otherwise = y : insert x ys