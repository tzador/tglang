-- This is a sample code snippet in Haskell
-- Defines a function 'sumList' which takes a list of integers as input and returns their sum
-- Using pattern matching and recursion
sumList :: [Int] -> Int
sumList [] = 0 -- Base case: empty list returns 0
sumList (x:xs) = x + sumList xs -- Recursive case: adds the first element of the list to the sum of the rest

-- Example usage:
-- sumList [1,2,3] returns 6
-- sumList [5,10,15] returns 30

-- Function application using infix notation
2 `sumList` [5,10,15] -- Equivalent to sumList [2,5,10,15] which returns 32