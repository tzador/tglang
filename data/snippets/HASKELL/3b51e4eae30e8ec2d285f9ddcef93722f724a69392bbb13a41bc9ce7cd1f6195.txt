{-# LANGUAGE OverloadedStrings #-}

import Data.Maybe (fromMaybe)
import Data.Text (Text, toLower, pack)

-- | A type representing a Person with their name and age.
data Person = Person
     { name :: Text
     , age :: Int
     } deriving (Show, Eq)

-- | A function that takes in a list of Maybe Person and returns the average age,
-- | including only those with a valid age value.
averageAge :: [Maybe Person] -> Int
averageAge ppl =
  let -- Filter out the Nothings and convert the ages to Ints
      ages = map (fromMaybe 0 . fmap age) $ filter isJust ppl
      -- Sum all the Ints and divide by the length of the list
      totalAge = sum ages
      numPeople = length ages
  in totalAge `div` numPeople

-- | A list of Maybe Person with some valid and some invalid ages
people :: [Maybe Person]
people =
  [Just (Person "John" 23),
   Just (Person "Jane" 30),
   Just (Person "Bob" 40),
   Nothing,
   Just (Person "Alice" 29),
   Nothing,
   Just (Person "Dave" 35)]

-- | Output the average age of the people list in formatted text
main :: IO ()
main = do
  let avg = averageAge people
  putStrLn $ "The average age of the people list is: " ++ pack (show avg)