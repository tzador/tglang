{-# LANGUAGE NamedFieldPuns #-} -- enables the use of named field notation

import Data.List (sort) -- import the sort function from the Data.List module

-- define a data type called Person with fields for name, age, and hobbies
data Person = Person
    { name :: String
    , age :: Int
    , hobbies :: [String]
    }

-- define a function that prints a formatted string with a person's details
printPerson :: Person -> String
printPerson Person{name, age, hobbies} =
    "Name: " ++ name ++
    ", Age: " ++ show age ++
    ", Hobbies: " ++ unwords (sort hobbies)

-- create a list of Person objects
people :: [Person]
people =
    [ Person{name = "John", age = 30, hobbies = ["hiking", "painting"]}
    , Person{name = "Amy", age = 25, hobbies = ["reading", "baking", "gardening"]}
    , Person{name = "David", age = 40, hobbies = ["coding", "gaming", "photography"]}
    ]

-- print each person's details using a list comprehension and the printPerson function
main :: IO ()
main = do
    putStrLn "People:"
    putStrLn "-------"
    mapM_ putStrLn [printPerson person | person <- people]