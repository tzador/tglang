import Data.List

-- Function to check if a list is sorted in ascending order
isSorted :: Ord a => [a] -> Bool
isSorted xs = and $ zipWith (>=) xs (tail xs)

-- Function to merge two sorted lists into one sorted list
merge :: Ord a => [a] -> [a] -> [a]
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys)
  | x < y = x : merge xs (y:ys)
  | otherwise = y : merge (x:xs) ys

-- Function to divide a list into two sublists of equal length
halve :: [a] -> ([a], [a])
halve xs = splitAt (length xs `div` 2) xs

-- Function to merge sort a list
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs =
  let (left, right) = halve xs
  in merge (mergeSort left) (mergeSort right)

-- Example usage: mergeSort [5,2,7,1,3,8,4,6] => [1,2,3,4,5,6,7,8]