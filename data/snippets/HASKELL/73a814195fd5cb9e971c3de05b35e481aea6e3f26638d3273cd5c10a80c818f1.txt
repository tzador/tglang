{-# LANGUAGE DataKinds, FlexibleInstances, MultiParamTypeClasses, GADTs #-}

{-| A type level natural number that gives the length of a list -}
data Length (n :: Nat) where
  Zero :: Length '[]
  Succ :: Length xs -> Length (x ': xs)

{-| A data type representing an empty list -}
data EmptyList = EmptyList

{-| A type class for finding the length of a list -}
class FindLength xs n where
  findLength :: xs -> Length n

{-| An instance for an empty list -}
instance FindLength [] 'Zero where
  findLength _ = Zero

{-| An instance for a non-empty list -}
instance FindLength xs n
  => FindLength (x ': xs) (Succ n) where
  findLength (_ : xs) = Succ (findLength xs)

{- Examples
   findLength [1,2,3] ⟹ Succ (Succ (Succ Zero))
   findLength []     ⟹ Zero
-}