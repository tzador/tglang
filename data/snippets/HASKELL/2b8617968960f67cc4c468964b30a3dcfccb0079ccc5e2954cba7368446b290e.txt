data BinaryTree a = Empty | Node a (BinaryTree a) (BinaryTree a) -- creating a data type called BinaryTree with two constructors, Empty and Node

insert :: Ord a => a -> BinaryTree a -> BinaryTree a -- defining an insert function that takes in an element of the Ord type class and a BinaryTree of the same type, and returns a BinaryTree

insert x Empty = Node x Empty Empty -- base case for when the BinaryTree is empty, creating a new Node with the given element as the value and two empty branches

insert x (Node value left right) -- pattern matching for when the BinaryTree is not empty, with a Node constructor that contains a value and two branches
  | x < value = Node value (insert x left) right -- if the given element is less than the value in the Node, recursively insert it in the left branch
  | otherwise = Node value left (insert x right) -- otherwise, recursively insert the element in the right branch

inOrder :: BinaryTree a -> [a] -- defining an in-order traversal function that takes in a BinaryTree and returns a list of elements in sorted order
inOrder Empty = [] -- base case for when the BinaryTree is empty, return an empty list
inOrder (Node value left right) = inOrder left ++ [value] ++ inOrder right -- recursively traverse the left branch, add the value to the list, then recursively traverse the right branch

find :: Ord a => a -> BinaryTree a -> Bool -- defining a find function that takes in an element of the Ord type class and a BinaryTree of the same type, and returns a boolean
find _ Empty = False -- base case for when the BinaryTree is empty, element is not found
find x (Node value left right) -- pattern matching for when the BinaryTree is not empty
  | x == value = True -- if the given element is equal to the value in the Node, return True
  | x < value = find x left -- if the element is less than the value, recursively search in the left branch
  | otherwise = find x right -- if the element is greater than the value, recursively search in the right branch

main :: IO () -- defining a main function that takes in no arguments and returns IO (input/output) action that prints to the console
main = do -- defining an IO action that contains multiple statements
  let tree = foldr insert Empty [5,3,8,2,1,4] -- using foldr to insert elements into an empty BinaryTree in a single line
  putStrLn "In-order traversal:" -- printing a string to the console
  print (inOrder tree) -- printing the result of the in-order traversal of the BinaryTree to the console
  putStrLn "Finding element 4:" -- printing a string to the console
  print (find 4 tree) -- printing the result of finding the element 4 in the BinaryTree to the console