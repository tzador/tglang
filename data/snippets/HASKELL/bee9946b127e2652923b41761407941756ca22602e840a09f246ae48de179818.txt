module Main where

import Control.Monad.Trans.State, Control.Monad.Trans.Class
import Data.List

-- Type declaration for the data structure list
type List = [Int]

-- A function to generate a list of random numbers
generateList :: Int -> IO List
generateList n = replicateM n randomIO

-- A helper function to find the median of a list
findMedian :: [Int] -> Int
findMedian lst = if null lst then error "list is empty"
                 else (sort lst) !! (length lst `div` 2)

-- This function takes a list and returns the median and a list with
-- the median removed
removeMedian :: [Int] -> (Int, [Int])
removeMedian lst = (findMedian lst, delete (findMedian lst) lst)

-- An iterative function to calculate the median of a given list
calcMedian :: [Int] -> Int
calcMedian lst = evalState (runStateT (findMedianRecursive lst) lst) lst where
    findMedianRecursive :: (Monad m) => [Int] -> StateT [Int] m Int
    findMedianRecursive lst = do
        (med, newLst) <- lift $ return (removeMedian lst)
        if length lst `mod` 2 == 0
            then do
                modify tail
                findMedianRecursive newLst
        else
            return med