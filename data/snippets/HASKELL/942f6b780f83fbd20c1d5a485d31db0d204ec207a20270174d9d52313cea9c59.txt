type Point = (Int, Int) -- creates a type synonym for a tuple of 2 Integers, representing a point
data Shape = Circle Point Int | Rectangle Point Point -- creates a data type called Shape, with two possible constructors: Circle takes a point for the center and an integer for the radius, Rectangle takes two points for the top left and bottom right corners
area :: Shape -> Float -- creates a function that takes in a Shape and returns a Float
area (Circle _ r) = pi * fromIntegral (r * r) -- pattern matches for a Circle and calculates the area using pi and the radius
area (Rectangle (x1,y1) (x2,y2)) = abs $ fromIntegral ((x1-x2) * (y1-y2)) -- pattern matches for a Rectangle and calculates the area by taking the absolute value of the product of the differences of the coordinates
perimeter :: Shape -> Float
perimeter (Circle _ r) = 2 * pi * fromIntegral r -- calculates the perimeter of a Circle by using pi and the radius
perimeter (Rectangle (x1,y1) (x2,y2)) = 2 * abs (fromIntegral (x1-x2) + fromIntegral (y1-y2)) -- calculates the perimeter of a Rectangle by using the absolute value of the differences of the coordinates and multiplying by 2