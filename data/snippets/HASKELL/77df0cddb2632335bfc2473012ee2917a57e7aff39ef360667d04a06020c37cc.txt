{-# LANGUAGE FlexibleInstances #-}

-- Define a type class for a monoid
class Monoid a where
    mempty  :: a            -- represents the identity element
    mappend :: a -> a -> a  -- represents the binary operation

-- Create an instance of the Monoid type class for the Integer type
instance Monoid Integer where
    mempty = 0
    mappend = (+)

-- Define a Monoid type class instance for a list of Integers
instance Monoid [Integer] where
    mempty = []               -- empty list is the identity element
    mappend = (++)            -- appending lists is the binary operation

-- Define a function to calculate the sum of a list of Integers
sum :: [Integer] -> Integer
sum [] = mempty                -- if list is empty, return the identity element
sum (x:xs) = x `mappend` sum xs -- recursively apply the binary operation to each element

-- Define a Monoid type class instance for a tuple of Integers
instance Monoid (Integer, Integer) where
    mempty = (0,0)                 -- tuple of zeros is the identity element
    mappend (x1,y1) (x2,y2) = (x1+x2, y1+y2) -- add the corresponding elements

-- Example usage: calculate the sum of a list of Integers and a tuple of Integers
myList = [1,2,3]
myTuple = (4,5)
mySum = sum myList           -- 6
myTupleSum = myTuple `mappend` myTuple -- (5,7)