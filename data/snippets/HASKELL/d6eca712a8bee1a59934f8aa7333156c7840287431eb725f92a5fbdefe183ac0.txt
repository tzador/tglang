{-# LANGUAGE MultiParamTypeClasses, AllowAmbiguousTypes, FlexibleContexts #-}

-- Define a typeclass for a matrix data structure with a 'transposable' function
class Matrix a where
    -- Takes in a matrix and returns its transpose
    transposable :: a -> a

-- Define an instance for the 'Matrix' typeclass for lists of lists of 'Int'
instance Matrix [[Int]] where
    -- The rows of the original matrix become the columns of the transposed matrix
    transposable m = transpose m

-- Define an instance for the 'Matrix' typeclass for lists of lists of 'Double'
instance Matrix [[Double]] where
    -- The rows of the original matrix become the columns of the transposed matrix
    transposable m = transpose m

-- Define an instance for the 'Matrix' typeclass for lists of lists of 'Bool'
instance Matrix [[Bool]] where
    -- The rows of the original matrix become the columns of the transposed matrix
    transposable m = transpose m

-- Define a function that multiplies two matrices using the 'Matrix' typeclass
matMultiply :: (Num a, Matrix b, Matrix c) => b -> c -> [[a]]
matMultiply m1 m2 = 
    -- Take the dot product of each row in the transposed first matrix with each column in the second matrix
    [ [ sum $ zipWith (*) row col | col <- transposedM2 ] | row <- transposedM1]
    where 
        -- Transpose the first matrix
        transposedM1 = transposable m1 
        -- Transpose the second matrix
        transposedM2 = transposable m2

-- Example usage of the 'matMultiply' function
main = do
    -- Define two matrices to multiply - a 2x3 and a 3x4
    let m1 = [[1,2,3], [4,5,6]]
    let m2 = [[7,8], [9,10], [11,12]]
    -- Multiply the matrices and print the result
    print $ matMultiply m1 m2