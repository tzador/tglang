-- This function takes in a list of numbers and returns the sum of 
-- their squares, with an upper limit specified by the user
sumSquares :: Int -> [Int] -> Int
sumSquares n [] = 0
sumSquares n (x:xs)
    | x > n = 0
    | otherwise = (x^2) + sumSquares n xs

-- This function takes in a string and checks if it is a palindrome
isPalindrome :: String -> Bool
isPalindrome str = str == reverse str

-- This higher order function takes in a function and a list, and returns a new list
-- where the function has been applied to each element
applyFunction :: (a -> b) -> [a] -> [b]
applyFunction f [] = []
applyFunction f (x:xs) = f x : applyFunction f xs

-- This recursive function calculates the factorial of a number
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)

-- This code snippet demonstrates the use of various functions
-- to manipulate and transform a list