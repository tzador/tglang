data Tree a = Leaf a | Node (Tree a) a (Tree a) -- Definition of a binary tree data type

buildTree :: [a] -> Tree a -- Function to build a binary tree from a list of elements
buildTree [] = Leaf -- Base case, empty list results in an empty tree
buildTree [x] = Node Leaf x Leaf -- Single element in list creates a leaf node
buildTree xs = let (left, right) = splitAt (length xs `div` 2) xs
                   in Node (buildTree left) (head right) (buildTree $ tail right) -- Recursive function to build tree from left and right subtrees

sumTree :: Num a => Tree a -> a -- Function to find the sum of elements in a binary tree
sumTree (Leaf x) = x -- Base case, leaf node has a single element
sumTree (Node left x right) = x + sumTree left + sumTree right -- Recursively sum the elements in left and right subtrees

-- Example of using the functions to build and sum a binary tree
tree = buildTree [1,2,3,4,5] -- Building a binary tree with integers 1 to 5
sumTree tree -- Output should be 15, as 1+2+3+4+5 = 15