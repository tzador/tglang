-- This is a function that calculates the nth element in the Fibonacci sequence.
-- It takes in an integer n and returns an integer.
fib :: Int -> Int
-- Base cases for 0 and 1 to return 0 and 1 respectively.
fib 0 = 0
fib 1 = 1
-- The function is recursive, calculating the sum of the previous 2 elements.
fib n = (fib (n-1)) + (fib (n-2))

-- This is a function that calculates the factorial of a number.
-- It takes in an integer and returns an integer.
fact :: Int -> Int
-- Base case for 0 returning 1.
fact 0 = 1
-- Recursive function that multiplies n with the factorial of n-1.
fact n = n * fact (n-1)

-- This is a higher order function that takes in a function f and a list of integers.
-- It applies f to each element in the list and returns a new list of the results.
map :: (Int -> Int) -> [Int] -> [Int]
-- Base case for empty list returning empty list.
map _ [] = []
-- Recursive function that applies f to the head of the list and recursively applies map to the tail.
map f (x:xs) = f x : map f xs

-- An example of using the map function to apply factorial to a list of integers.
-- The result will be a list of factorials in the same order as the original list.
result = map fact [0..10]