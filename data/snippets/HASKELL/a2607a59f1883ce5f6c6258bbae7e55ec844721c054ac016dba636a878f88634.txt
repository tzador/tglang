module Main where -- Creating a module named 'Main'
import Data.List (sort) -- Importing the 'sort' function from the 'Data.List' module

-- Defining a recursive function to calculate the factorial of a number
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- Defining a function to check if a number is prime
isPrime :: Integer -> Bool
isPrime n = n > 1
         && all (\x -> n `mod` x /= 0) [2..(floor (sqrt (fromIntegral n)))]

-- Declaring a list of numbers
numbers = [5, 1, 8, 3, 9, 2, 7, 6, 4]

-- Sorting the list of numbers in descending order
sortedNumbers = sort numbers

-- Printing out the first 10 terms of the Fibonacci sequence using list comprehension
fibonacci = take 10 [0, 1, (fibonacci !! (n-2)) + (fibonacci !! (n-1)) | n <- [2..]]

-- Calculating the sum of the first 100 prime numbers using recursion and pattern matching
sumOfPrimes :: Integer -> Integer -> Integer
sumOfPrimes 0 _ = 0
sumOfPrimes count number
  | isPrime number = number + sumOfPrimes (count - 1) (number + 1)
  | otherwise = sumOfPrimes count (number + 1)

-- Calculating the sum of the first 100 factorials using recursion and pattern matching
sumOfFactorials :: Integer -> Integer -> Integer
sumOfFactorials 0 _ = 0
sumOfFactorials count number = factorial number + sumOfFactorials (count - 1) (number + 1)

-- Printing out the sum of the first 100 prime numbers and the sum of the first 100 factorials
main :: IO ()
main = putStrLn ("Sum of first 100 prime numbers: " ++ show (sumOfPrimes 100 2))
    >> putStrLn ("Sum of first 100 factorials: " ++ show (sumOfFactorials 100 0))