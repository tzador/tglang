{-# LANGUAGE RecursiveDo #-}
module Main where

import Data.List (sort)
import Control.Monad (when)
import Control.Monad.Fix (MonadFix)

-- | Takes a list of values and returns a sorted list using quicksort algorithm.
quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (pivot:xs) = recCat (quicksort left) (pivot : quicksort right)
    where (left, right) = partition (< pivot) xs

-- | Runs the recursive do notation to recursively concatenate two lists together.
recCat :: (Monad m, MonadFix m) => m [a] -> m [a] -> m [a]
recCat xs ys = mdo
    result <- ask xs
    case result of
        [] -> return ys
        x:xs' -> return (x : recCat xs' ys)