data Tree a = Leaf a | Node a (Tree a) (Tree a)     -- defining a binary tree data type
-- this function iteratively inserts a new element into the tree
insert :: (Ord a) => Tree a -> a -> Tree a           -- taking a tree and an element as input and returning a tree
insert (Leaf x) value = if value < x                 -- if the element is less than the current node
							then Node x (Leaf value) (Leaf x)        -- insert it as a left child
							else Node x (Leaf x) (Leaf value)        -- else insert it as a right child
insert (Node x left right) value = if value < x                       -- if the element is less than the current node 
							then Node x (insert left value) right     -- insert it recursively to the left sub-tree
							else Node x left (insert right value)     -- else insert it recursively to the right sub-tree

inorder :: Tree a -> [a]      -- function to traverse the tree in sorted order
inorder (Leaf x) = [x]        -- if the current node is a leaf, return a singleton list of its value
inorder (Node x left right) = inorder left ++ [x] ++ inorder right        -- recursively traverse left sub-tree first, then add the current node value, and finally traverse the right sub-tree

exampleTree = insert (Leaf 5) 3     -- creating an example tree and inserting elements into it
insert exampleTree 8

inorder exampleTree     -- would give [3, 5, 8] as output