{-# LANGUAGE TypeApplications, GADTs #-}

module Main where

import Data.Kind (Type)

data TypeClass :: Type -> Type where
  Boolean :: TypeClass Bool
  Character :: TypeClass Char
  Number :: (Num a) => TypeClass a
  List :: (TypeClass a) => TypeClass [a]
  Tuple :: (TypeClass a, TypeClass b) => TypeClass (a, b)

class Typeable (a :: Type) where
  typeOf :: TypeClass a

instance Typeable Bool where
  typeOf = Boolean

instance Typeable Char where
  typeOf = Character

instance (Num a) => Typeable a where
  typeOf = Number

instance (Typeable a) => Typeable [a] where
  typeOf = List @a

instance (Typeable a, Typeable b) => Typeable (a, b) where
  typeOf = Tuple @a @b

main :: IO ()
main = do
  putStrLn $ "Type of Bool: " ++ show (typeOf @Bool)
  putStrLn $ "Type of Char: " ++ show (typeOf @Char)
  putStrLn $ "Type of Int: " ++ show (typeOf @Int)
  putStrLn $ "Type of List Bool: " ++ show (typeOf @[Bool])
  putStrLn $ "Type of Tuple (Char, Bool): " ++ show (typeOf @(Char, Bool))