-- Function to check if a list is palindrome
checkPalindrome :: Eq a => [a] -> Bool
checkPalindrome list = list == reverse list

-- Function to check if a number is prime
isPrime :: Int -> Bool
isPrime num = length [x | x <- [2..(round (sqrt (fromIntegral num)))], num `mod` x == 0] == 0

-- Function to find the largest prime palindrome under a given limit
largestPrimePalindrome :: Int -> Int
largestPrimePalindrome limit = maximum [x | x <- [1..(limit - 2)], isPrime x == True && checkPalindrome (show x) == True]

-- Main function to take user input and call the largestPrimePalindrome function
main :: IO ()
main = do
    putStrLn "Enter a limit: "
    limit <- getLine
    let primePalindrome = largestPrimePalindrome (read limit :: Int)
    putStrLn ("Largest prime palindrome below " ++ limit ++ ": " ++ show primePalindrome )