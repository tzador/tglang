{-# LANGUAGE RecordWildCards #-}
module Main where

import Data.List (findIndices, sort)
import Data.Maybe (catMaybes)
import Data.Ord (comparing)
import Text.Printf (printf)

data Person = Person
  { age :: Int
  , name :: String
  } deriving (Eq, Show)

-- | Get the maximum age from a list of persons.
getMaxAge :: [Person] -> Int
getMaxAge persons = maximum (map age persons)

-- | Get the names of all persons whose age is below the given limit.
getNamesBelowAge :: [Person] -> Int -> [String]
getNamesBelowAge persons limit = filter (\Person {..} -> age < limit) (map name persons) 

-- | Get the names of all persons with the given name.
getNamesWithSameName :: [Person] -> String -> [String]
getNamesWithSameName persons name = map name (filter (\Person {..} -> name == name) persons)

-- | Get the names of all persons whose age is within the given range.
getNamesWithinAgeRange :: [Person] -> Int -> Int -> [String]
getNamesWithinAgeRange persons lower upper = 
  let inRange person = (age person) `elem` [lower..upper]
  in map name (filter inRange persons)

-- | Get the average age of all persons.
getAverageAge :: [Person] -> Double
getAverageAge persons =
  let ages = map age persons
  in fromIntegral (sum ages) / fromIntegral (length ages)

-- | Write the names of all persons in alphabetical order.
printNamesInAlphabeticalOrder :: [Person] -> IO ()
printNamesInAlphabeticalOrder persons = do 
  let names = sort (map name persons)
  mapM_ putStrLn names

-- | Create a new person with the given age and name.
createPerson :: Int -> String -> Person
createPerson age name = Person { age = age, name = name }

main :: IO ()
main = do
  let persons = [ Person { age = 25, name = "John" }
                , Person { age = 30, name = "Emily" }
                , Person { age = 20, name = "Michael" }
                ]
  putStrLn ("Maximum age: " ++ show (getMaxAge persons))
  putStrLn ("Names below age 30: " ++ show (getNamesBelowAge persons 30))
  putStrLn ("Names with name 'John': " ++ show (getNamesWithSameName persons "John"))
  putStrLn ("Names within age range 20-30: " ++ show (getNamesWithinAgeRange persons 20 30))
  putStrLn ("Average age: " ++ printf "%.2f" (getAverageAge persons))
  printNamesInAlphabeticalOrder persons

  let newPerson = createPerson 35 "Anna"
  putStrLn ("New person: " ++ show newPerson)
  putStrLn ("Updated list of persons: " ++ show (newPerson : persons))