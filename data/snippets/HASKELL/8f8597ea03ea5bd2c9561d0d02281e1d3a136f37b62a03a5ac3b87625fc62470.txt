-- Function to find the maximum of a list
maxList :: Ord a => [a] -> a
maxList [] = error "Empty list"
maxList [x] = x
maxList (x:xs)
  | x > maxTail = x
  | otherwise = maxTail
  where 
    maxTail = maxList xs
    
-- Function to merge sort a list
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs = merge (mergeSort firstHalf) (mergeSort secondHalf)
  where 
    (firstHalf, secondHalf) = splitAt ((length xs) `div` 2) xs
    merge [] ys = ys
    merge xs [] = xs
    merge (x:xs) (y:ys) 
      | x < y = x : merge xs (y:ys)
      | otherwise = y : merge (x:xs) ys
      
-- Function to map a function over a list
map :: (a -> b) -> [a] -> [b]
map f [] = []
map f (x:xs) = f x : map f xs