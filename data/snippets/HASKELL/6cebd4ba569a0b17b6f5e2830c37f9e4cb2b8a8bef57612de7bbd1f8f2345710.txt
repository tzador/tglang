data Tree a = Leaf a | Node (Tree a) (Tree a) deriving (Show) {- Define a custom data type called Tree that can either have a single value of type a as a Leaf or two subtrees as a Node. The deriving (Show) allows for automatic printing of the type. -}

mapTree :: (a -> b) -> Tree a -> Tree b {- Define a function called mapTree that takes in a function from type a to type b and a Tree of type a and returns a Tree of type b. -}
mapTree f (Leaf x) = Leaf (f x) {- If the Tree is a Leaf, apply the function to the value and return a new Leaf with the result. -}
mapTree f (Node left right) = Node (mapTree f left) (mapTree f right) {- If the Tree is a Node, recursively apply the function to both subtrees and return a new Node with the resulting subtrees. -}

foldTree :: (a -> b -> b -> b) -> b -> Tree a -> b {- Define a function called foldTree that takes in a function from type a to type b to type b to type b, an initial value of type b, and a Tree of type a, and returns a value of type b. -}
foldTree op base (Leaf x) = base {- If the Tree is a Leaf, return the base value. -}
foldTree op base (Node left right) = op x (foldTree op base left) (foldTree op base right) {- If the Tree is a Node, recursively fold the subtrees using the operator function and the base value. -}
    where x = Root (foldTree op base left) (foldTree op base right) {- Define a new variable x that represents the result of recursively folding the subtrees using the operator function and the base value. This is used in the operator function to combine the values of the subtrees. -}