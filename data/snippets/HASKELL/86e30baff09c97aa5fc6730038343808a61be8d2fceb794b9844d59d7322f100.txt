-- This is a function that takes in a list of integers and returns the sum of all even numbers in the list
-- It uses recursion and pattern matching

sumEven :: [Int] -> Int  -- function signature
sumEven [] = 0  -- base case: empty list returns sum of 0
sumEven (x:xs)  -- pattern matching
  | x `mod` 2 == 0 = x + sumEven xs  -- if current number is even, add it to sum and recursively call function on rest of list
  | otherwise = sumEven xs  -- if current number is odd, skip it and recursively call function on rest of list

-- Example input and output:
sumEven [1,2,3,4,5]  -- result: 6 (2 + 4)
sumEven [2,4,6,8,10]  -- result: 30 (2 + 4 + 6 + 8 + 10)