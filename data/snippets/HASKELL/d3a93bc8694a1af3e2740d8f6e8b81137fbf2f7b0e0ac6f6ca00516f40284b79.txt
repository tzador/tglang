{-# LANGUAGE GADTs, DataKinds #-}
{- This code snippet defines a nested type called 'Tree'
   with three constructors: 'Leaf', 'Branch', and 'Node'. -}
data Tree a where
    Leaf :: a -> Tree a
    Branch :: Tree a -> Tree a -> Tree a
    Node :: [Tree a] -> Tree a

{- This function takes two 'Tree' values as arguments
   and checks if they have the same structure.
   It returns a boolean value. -}
isSameStructure :: Tree a -> Tree b -> Bool
isSameStructure (Leaf _) (Leaf _) = True -- if both are leaves, return True
isSameStructure (Branch left1 right1) (Branch left2 right2) =
    isSameStructure left1 left2 &&
    isSameStructure right1 right2 -- recursively check structure of branches
isSameStructure (Node trees1) (Node trees2) =
    all (\(tree1, tree2) -> isSameStructure tree1 tree2) (zip trees1 trees2)
    -- recursively check structure of nodes by ziping list of trees and checking each pair
isSameStructure _ _ = False -- if all other cases fail, return False