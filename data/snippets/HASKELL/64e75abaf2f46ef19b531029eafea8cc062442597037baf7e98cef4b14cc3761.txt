import Data.List
    {- This is an import statement for the Data.List library, which provides functions for working with lists in Haskell. -}

factorial :: Integer -> Integer
    {- This is a type signature for a function named "factorial" that takes an Integer as input and returns an Integer as output. -}
factorial 0 = 1
factorial n = n * factorial (n-1)
    {- This is a recursive function that calculates the factorial of a number. It checks for the base case of 0 and returns 1. Otherwise, it multiplies the current number by the factorial of the previous number. -}

fibonacci :: Int -> [Int]
    {- This is a type signature for a function named "fibonacci" that takes an Int as input and returns a list of Ints as output. -}
fibonacci n = take n $ unfoldr (\(a,b) -> Just (a,(b,a+b))) (0,1)
    {- This is a function that uses the unfoldr function from the Data.List library to generate a list of Fibonacci numbers. It takes the first "n" numbers and returns them. -}