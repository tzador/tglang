-- Define a custom datatype representing a binary tree
data Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show)

-- Function to insert an element into a binary tree
insert :: Ord a => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty
insert x (Node a left right)
  | x == a = Node x left right
  | x < a = Node a (insert x left) right
  | otherwise = Node a left (insert x right)

-- Function to check if a binary tree is a BST (binary search tree)
isBST :: Ord a => Tree a -> Bool
isBST Empty = True
isBST (Node x left right) =
  if (elementInRange x left right) && (isBST left) && (isBST right)
  then True
  else False
    where elementInRange :: Ord a => a -> Tree a -> Tree a -> Bool
          elementInRange x Empty Empty = True 
          elementInRange x Empty (Node y left right) =
            (y > x) && (isBST (insert y right))
          elementInRange x (Node y left right) Empty =
            (y < x) && (isBST (insert y left))
          elementInRange x (Node y left right) (Node z l r) =
            (y < x) && (z > x) && (isBST (insert y left)) && (isBST (insert z right))