-- Function to check if a given number is prime
isPrime :: Int -> Bool
isPrime n
    | n < 2 = False
    | otherwise = not $ any (\x -> n `mod` x == 0) [2..floor(sqrt(fromIntegral n))]

-- Function to generate a list of prime numbers up to a given number
primeList :: Int -> [Int]
primeList n = [x | x <- [2..n], isPrime x]

-- Function to find the sum of all prime numbers in a given list
primeSum :: [Int] -> Int
primeSum xs = sum $ filter isPrime xs

-- Main function to print the sum of all prime numbers up to a given number
main :: IO ()
main = do
    putStrLn "Enter a number:"
    input <- getLine
    let n = read input :: Int
    let primes = primeList n
    let sum = primeSum primes
    putStrLn ("The sum of all prime numbers up to " ++ show n ++ " is " ++ show sum)