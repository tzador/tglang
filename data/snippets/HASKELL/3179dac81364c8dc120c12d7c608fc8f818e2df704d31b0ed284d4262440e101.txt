{-# LANGUAGE TypeFamilies #-}

import Data.Maybe

-- Definition of a type family
type family Option a where
  Option Int = Int
  Option Bool = Bool
  Option Char = Maybe Char

-- Definition of a type class
class HasOption a where
  getOption :: a -> Option a
  setOption :: Option a -> a -> a

-- Instance of the type class for Int options
instance HasOption Int where
  getOption n = n
  setOption n _ = n

-- Instance of the type class for Bool options
instance HasOption Bool where
  getOption b = b
  setOption b _ = b

-- Instance of the type class for Char options
instance HasOption Char where
  getOption c = Just c
  setOption (Just c) _ = c

-- Example use case
main :: IO ()
main = do
  let optionInt = setOption 5 :: Int
  print $ getOption optionInt -- Output: 5

  let optionBool = setOption True :: Bool
  print $ getOption optionBool -- Output: True

  let optionChar = setOption 'a' :: Char
  print $ getOption optionChar -- Output: Just 'a'