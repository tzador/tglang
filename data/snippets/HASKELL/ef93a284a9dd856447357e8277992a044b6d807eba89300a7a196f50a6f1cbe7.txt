-- Function that determines if a list is a palindrome
isPalindrome :: Eq a => [a] -> Bool     
isPalindrome xs = xs == reverse xs  -- Using the built-in function 'reverse' to check if the list is the same forwards and backwards

-- Function that maps each element in a list to its square
squareList :: Num a => [a] -> [a]      
squareList xs = map (\x -> x^2) xs     -- Using the 'map' function to apply the anonymous function '(\x -> x^2)' to each element in the list

-- Function that calculates the factorial of a number
factorial :: Int -> Int
factorial n
  | n <= 1 = 1                        -- Base case: factorial of 0 and 1 is 1
  | otherwise = n * factorial (n-1)   -- Recursive case: factorial of n is n multiplied by factorial of n-1