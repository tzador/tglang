-- An example of a higher-order function that takes in a function as an argument and returns a new function that applies the original function twice.
doubleApply :: (a -> a) -> (a -> a)
doubleApply f = f . f

-- An example of a recursive function that calculates the factorial of a given number.
-- This function uses pattern matching to handle the base case and recursive calls.
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- An example of a function that uses a fold to compute the sum of a list of numbers.
-- It takes in a starting value and a list, and applies an accumulator function to each element in the list.
sumWith :: (Num a) => a -> [a] -> a
sumWith start xs = foldl (\acc x -> acc + x) start xs

-- An example of a monad do notation that uses pattern matching to handle the Maybe type.
-- It checks if a Maybe value is present, and if it is, adds 10 to it and assigns it to a new Maybe value.
addTenMaybe :: Maybe Int -> Maybe Int
addTenMaybe maybeVal = do
  val <- maybeVal
  return (val + 10)

-- An example of a typeclass instance for a custom data type.
-- This instance defines the Eq behavior for list values, checking if all elements in two lists are equal.
instance (Eq a) => Eq [a] where
  [] == [] = True
  (x:xs) == (y:ys) = x == y && xs == ys
  _ == _ = False