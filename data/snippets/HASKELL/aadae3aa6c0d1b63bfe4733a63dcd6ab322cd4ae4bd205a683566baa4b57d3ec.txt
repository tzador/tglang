-- Define a recursive function to determine if a given number is prime
isPrime :: Int -> Bool
isPrime x = not $ any (\y -> x `mod` y == 0) [2..x-1]

-- Define a recursive function to generate a list of all prime numbers up to a given limit
generatePrimes :: Int -> [Int]
generatePrimes limit = [x | x <- [2..limit], isPrime x]

-- Define a recursive function to calculate the sum of all prime numbers in a given list
sumPrimes :: [Int] -> Int
sumPrimes [] = 0
sumPrimes (x:xs)
    | isPrime x = x + sumPrimes xs
    | otherwise = sumPrimes xs

-- Generate a list of prime numbers up to 100 and calculate their sum
main :: IO ()
main = do
    let limit = 100
    let primes = generatePrimes limit
    let sum = sumPrimes primes
    putStrLn $ "Primes up to " ++ show limit ++ ": " ++ show primes ++ "\n"
    putStrLn $ "Sum of primes up to " ++ show limit ++ ": " ++ show sum