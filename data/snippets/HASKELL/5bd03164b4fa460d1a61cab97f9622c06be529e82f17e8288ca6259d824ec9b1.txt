module Main where -- This declares the module name

-- Import necessary libraries
import Data.List
import Data.Maybe

-- Define a custom data type
data Tree a = Leaf a | Node (Tree a) a (Tree a)

-- Function to count the number of occurrences of a given element in a list
countOccurrences :: (Eq a) => a -> [a] -> Int 
countOccurrences x = length . filter (==x)

-- Recursive function to traverse the tree and find the maximum element stored
findMax :: (Ord a) => Tree a -> a
findMax (Leaf x) = x
findMax (Node left x right) = maximum . filter isJust $ [Just x, findMax left, findMax right]

-- Define a function to insert an element into the tree in a sorting manner
insertSort :: (Ord a) => a -> Tree a -> Tree a 
insertSort x (Leaf y) = if x < y then Node (Leaf x) y (Leaf x) else Node (Leaf y) x (Leaf y)
insertSort x (Node left y right) = if x < y then Node (insertSort x left) y right else Node left y (insertSort x right)

-- Define a function to insert multiple elements into the tree at once
insertList :: (Ord a) => [a] -> Tree a -> Tree a
insertList [] tree = tree
insertList (x:xs) tree = insertList xs (insertSort x tree)

-- Main function to test the code
main :: IO ()
main = do
    let myList = [5, 2, 8, 6, 3, 1, 9] :: [Int] -- List of integers to be inserted
        myTree = insertList myList (Leaf 0) :: Tree Int -- Initial tree with value 0
        max = findMax myTree -- Find the maximum element in the tree
        count = countOccurrences max myList -- Count the occurrences of the maximum element in the list
    putStrLn $ "The maximum element in the tree is: " ++ show max -- Print the result
    putStrLn $ "The number of occurrences of the maximum element is: " ++ show count -- Print the result