-- This code snippet uses a customized Monoid instance to sum and multiply a list of numbers
import Data.Monoid

-- Define a newtype to represent our customized Monoid instance
newtype SumProd = SumProd { getSumProd :: (Sum Int, Product Int) }
  deriving (Eq, Ord, Show)

-- Define the custom Monoid instance that adds the first number in a tuple and multiplies the second
instance Monoid SumProd where
  mempty = SumProd (mzero, monoid)

  -- Define the operation to combine two SumProd types
  (SumProd (x1, y1)) `mappend` (SumProd (x2, y2)) = SumProd (x1 `mappend` x2, y1 `mappend` y2)

-- Define a function to convert a list of numbers into a list of SumProd types
sumProductList :: [Int] -> [SumProd]
sumProductList = map (\n -> SumProd (Sum n, Product n))

-- Define a function to get the sum and product of a list of numbers by using our customized Monoid instance
sumAndProduct :: [Int] -> Int -> Int
sumAndProduct xs s = s + getProduct (snd $ getSumProd $ mconcat $ sumProductList xs)

-- Use our function to calculate the sum and product of a list of numbers
main :: IO ()
main = do
  let list = [1, 2, 3, 4, 5]
  let sumAndProduct = sumAndProduct list 0
  putStrLn $ "The sum of " ++ show list ++ " is " ++ show sumAndProduct