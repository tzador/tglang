module Main (main) where

import Data.List (sort)

-- | The 'merge' function takes in two sorted lists and merges them into one sorted list
-- | This is a major optimization for the 'mergeSort' function
merge :: Ord a => [a] -> [a] -> [a]
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys)
    | x <= y    = x : merge xs (y:ys)
    | otherwise = y : merge (x:xs) ys

-- | The 'mergeSort' function takes in a list and recursively divides it into smaller
-- | lists until each list only has one element. It then merges the lists while sorting
-- | them to create one sorted list
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x] -- base case
mergeSort xs =
    let (left, right) = splitAt (length xs `div` 2) xs -- divide the list into two halves
    in merge (mergeSort left) (mergeSort right) -- recursively merge and sort the two halves

-- | The 'main' function is the entry point of the program
main :: IO ()
main = do
    putStrLn "Enter a list of numbers:"
    input <- getLine -- take in user input
    let numbers = read input :: [Int] -- convert input into a list of integers
    putStrLn "Sorting using merge sort..."
    let sorted = mergeSort numbers -- use mergeSort to sort the numbers
    putStrLn "Sorted list:"
    print sorted -- print the sorted list to the console