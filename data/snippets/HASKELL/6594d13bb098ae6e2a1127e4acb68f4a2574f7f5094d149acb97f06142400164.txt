-- This is a comment in Haskell
data Tree a = EmptyTree | Node a (Tree a) (Tree a) -- Defining a binary tree data structure
insert :: (Ord a) => a -> Tree a -> Tree a -- Function to insert a value into the tree
insert x EmptyTree = Node x EmptyTree EmptyTree -- If tree is empty, create a new node with value x
insert x (Node a left right)                    -- If tree is not empty, compare x with current node's value a
    | x == a = Node x left right                -- If x is equal to a, return the same tree (no duplicates allowed)
    | x < a  = Node a (insert x left) right     -- If x is smaller than a, insert x into left subtree
    | x > a  = Node a left (insert x right)     -- If x is larger than a, insert x into right subtree

-- Function to check if a value is present in the tree
search :: (Ord a) => a -> Tree a -> Bool
search x EmptyTree = False                       -- If tree is empty, value is not present
search x (Node a left right)                     -- If tree is not empty, compare x with current node's value a
    | x == a = True                              -- If x is equal to a, value is present
    | x < a  = search x left                     -- If x is smaller than a, search through left subtree
    | x > a  = search x right                    -- If x is larger than a, search through right subtree

-- Function to get the minimum value in the tree
getMin :: (Ord a) => Tree a -> Maybe a
getMin EmptyTree = Nothing                       -- If tree is empty, there is no minimum value
getMin (Node a EmptyTree _) = Just a             -- If there is no left subtree, current node is the minimum value
getMin (Node a left _) = getMin left             -- Otherwise, keep searching through the left subtree

-- Function to get the maximum value in the tree
getMax :: (Ord a) => Tree a -> Maybe a
getMax EmptyTree = Nothing                       -- If tree is empty, there is no maximum value
getMax (Node a _ EmptyTree) = Just a             -- If there is no right subtree, current node is the maximum value
getMax (Node a _ right) = getMax right           -- Otherwise, keep searching through the right subtree

-- Function to delete a value from the tree
delete :: (Ord a) => a -> Tree a -> Tree a
delete x EmptyTree = EmptyTree                                 -- If tree is empty, no need to delete anything
delete x (Node a EmptyTree EmptyTree)                            -- If current node is the value to be deleted
    | x == a = EmptyTree                                        -- and has no children, delete it
delete x (Node a EmptyTree right@(Node b left right))            -- If current node is the value to be deleted
    | x == a = right                                            -- and has a right child, replace it with right child
delete x (Node a left@(Node b left' right') EmptyTree)           -- If current node is the value to be deleted
    | x == a = left                                             -- and has a left child, replace it with left child
delete x (Node a left right)                                    -- If current node is not the value to be deleted
    | x < a  = Node a (delete x left) right                      -- and value is smaller than current node, delete from left subtree
    | x > a  = Node a left (delete x right)                      -- and value is larger than current node, delete from right subtree
    | x == a = Node (min elm . getMin $ right) left (delete elm right)
-- Otherwise, if value is equal to current node, replace it with minimum value in right subtree, and delete that value from right subtree