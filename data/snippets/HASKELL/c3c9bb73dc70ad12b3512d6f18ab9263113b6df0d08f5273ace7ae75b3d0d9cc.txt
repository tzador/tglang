-- | Function that takes in two lists and returns the intersections between them in a new list 
-- | Example Input: [1,2,3] [2,3,4] 
-- | Output: [2,3]
intersect :: (Ord a) => [a] -> [a] -> [a]
intersect [] _ = []
intersect _ [] = []
intersect (x:xs) (y:ys)
    | x == y = x : intersect xs ys -- adding element to the new list if it is in both lists
    | x < y = intersect xs (y:ys) -- moving to the next element in the first list as it is smaller
    | otherwise = intersect (x:xs) ys -- moving to the next element in the second list as it is smaller

main :: IO ()
main = do
    putStrLn "Enter the first list: "
    input1 <- getLine
    let list1 = read input1 :: [Int] -- converting input string to list of integers
    putStrLn "Enter the second list: "
    input2 <- getLine
    let list2 = read input2 :: [Int] -- converting input string to list of integers
    let output = intersect list1 list2 -- calling the intersect function with the two lists as parameters
    putStrLn ("The intersection is: " ++ show output) -- printing the result as a string