{-# LANGUAGE QuasiQuotes #-}
import Text.Hamlet (hamlet)
import Data.List (sort)
import Data.Maybe (mapMaybe)
import Data.Function (on)
import Database.Persist
import Database.Persist.Sqlite
import Control.Monad.Trans.Resource (runResourceT)
import qualified Data.Text as T

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Person
    firstName T.Text
    lastName T.Text Maybe
    age Int Maybe
|]

main :: IO ()
main = runResourceT $ withSqliteConn ":memory:" $ runSqlConn $ do
    runMigration migrateAll

    aliceId <- insert $ Person "Alice" (Just "Smith") (Just 25)
    bobId <- insert $ Person "Bob" (Just "Johnson") Nothing
    carolId <- insert $ Person "Carol" Nothing (Just 30)

    -- Query database for list of all people
    people <- selectList [] [Asc PersonFirstName]

    -- Convert list of people into list of their first names
    let names = map (personFirstName . entityVal) people

    -- Sort names alphabetically
    let sortedNames = sort names

    -- Map over list of names, removing any that have an empty string
    let nonEmptyNames = mapMaybe removeEmpty sortedNames
        where removeEmpty :: a -> Maybe a
              removeEmpty name
                | T.null name = Nothing
                | otherwise = Just name

    -- Calculate average length of first names
    let averageLength = calculateAverageLength nonEmptyNames
        where calculateAverageLength :: [T.Text] -> Double
              calculateAverageLength names = totalLength / numNames
                where totalLength = fromIntegral $ sum $ map T.length names
                      numNames = fromIntegral $ length names

    -- Compare average name length to each person's age
    let agesMatch = map (calculateAgeMatch averageLength . entityVal) people
        where calculateAgeMatch :: Double -> Person -> Bool
              calculateAgeMatch avgLength person = fromIntegral (personAge person) > avgLength

    -- Print out results of age comparison
    putStrLn "People whose age is greater than average name length:"
    mapM_ (\x -> putStrLn $ "> " ++ (show $ personFirstName x)) $ map fst $ filter snd $ zip (map entityVal people) agesMatch