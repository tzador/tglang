module Main where
-- Define a type alias for a list of integers
type IntList = [Int]

-- Define a recursive function to reverse a list
reverseList :: IntList -> IntList
reverseList [] = []
reverseList (x:xs) = reverseList xs ++ [x]

-- Define a function to check if a list is sorted in ascending order
isSorted :: IntList -> Bool
isSorted [] = True
isSorted [_] = True
isSorted (x:y:xs) = x <= y && isSorted (y:xs)

-- Define a function that takes in two lists and returns their cartesian product as a list of tuples
cartesianProduct :: IntList -> IntList -> [(Int, Int)]
cartesianProduct xs ys = [(x, y) | x <- xs, y <- ys]

-- Define a function to calculate the factorial of a number
-- Using pattern matching and recursion
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)