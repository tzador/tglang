module Main where

-- This is a comment
-- defining a recursive function called factorial that takes in an integer and returns an integer
factorial :: Integer -> Integer
factorial 0 = 1  -- base case
factorial n = n * factorial (n - 1)  -- recursive case

-- defining a function called fibonacci that takes in an integer and returns an integer
-- using pattern matching to handle the base cases
fibonacci :: Int -> Int
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)  -- recursive case

-- defining a function called quicksort that takes in a list of integers and returns a sorted list of integers
quicksort :: [Int] -> [Int]
quicksort [] = []  -- base case
quicksort (x:xs) =  -- recursive case
    let smallerSorted = quicksort [a | a <- xs, a <= x]  -- creating a list of all elements in xs that are smaller than or equal to x
        largerSorted = quicksort [b | b <- xs, b > x]  -- creating a list of all elements in xs that are larger than x
    in smallerSorted ++ [x] ++ largerSorted  -- returning the sorted list by combining the two sorted lists and adding x in between

main :: IO ()  -- defining a main function that takes no arguments and returns an IO action
main = do
    print $ factorial 5  -- printing the result of 5 factorial
    print $ fibonacci 10  -- printing the 10th number in the fibonacci sequence
    print $ quicksort [5,2,7,-3,0]  -- printing a sorted list of numbers using quicksort

-- Output:
-- 120
-- 55
-- [-3,0,2,5,7]