import Data.List -- imports the Data.List library
import System.IO -- imports the System.IO library

-- defines a function called "quicksort" that takes in a list of numbers as input
-- and returns a sorted list of numbers using the quicksort algorithm
quicksort :: (Ord a) => [a] -> [a]
quicksort [] = [] -- base case, empty list returns empty list
quicksort (x:xs) = -- pattern matching on the first element of the list
    let smallerSorted = quicksort [a | a <- xs, a <= x] -- finds values smaller or equal to the first element
        biggerSorted = quicksort [a | a <- xs, a > x] -- finds values larger than the first element
    in smallerSorted ++ [x] ++ biggerSorted -- concatenates the sorted lists

-- defines a function called "main" that takes in no input and returns nothing
main :: IO ()
main = do
    putStrLn "Enter a list of numbers: "
    input <- getLine -- takes user input as a string
    let numbers = map (read :: String -> Int) (words input) -- converts the string input into a list of integers
        sortedNumbers = quicksort numbers -- applies the quicksort function to the list of numbers
    putStrLn "Sorted list of numbers: "
    print sortedNumbers -- prints out the sorted list of numbers