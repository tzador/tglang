{-# OPTIONS_GHC -Wall #-}
module Main where

import Data.List (sort)

-- | The 'mergeSort' function implements the merge sort algorithm on a list of
-- comparable elements.
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []  -- base case: empty list
mergeSort [x] = [x]  -- base case: single element
mergeSort xs =         -- recursive case: list of more than one element
  let (left, right) = splitAt (length xs `div` 2) xs  -- split list in two
  in merge (mergeSort left) (mergeSort right)          -- recursively merge sublists

-- | The 'merge' function merges two sorted lists into one sorted list by
-- repeatedly comparing the first elements of each list and appending the
-- smaller one to the result.
merge :: Ord a => [a] -> [a] -> [a]
merge xs [] = xs  -- base case: first list is empty
merge [] ys = ys  -- base case: second list is empty
merge (x:xs) (y:ys)  -- recursive case: both lists have elements
  | x <= y = x : merge xs (y:ys)  -- append smaller element to result
  | otherwise = y : merge (x:xs) ys  -- append smaller element to result

main :: IO ()
main = do
  let inputList = [6,3,1,9,2,5,4,8,7]  -- initial list to be sorted
  putStrLn "Unsorted list:"
  print inputList  -- print unsorted list
  let sortedList = mergeSort inputList  -- apply merge sort algorithm
  putStrLn "Sorted list:"
  print sortedList  -- print sorted list