{-# OPTIONS_GHC -Wall #-}
module Main where

-- | A function that takes in a list and returns the length of the list.
listLength :: [a] -> Int
listLength [] = 0
listLength (x:xs) = 1 + listLength xs

-- | A function that takes in two lists and concatenates them.
listConcat :: [a] -> [a] -> [a]
listConcat [] ys = ys
listConcat (x:xs) ys = x : listConcat xs ys

-- | A function that maps a given function to each element of a given list.
listMap :: (a -> b) -> [a] -> [b]
listMap _ [] = []
listMap f (x:xs) = f x : listMap f xs

-- | A function that filters a given list based on a given predicate.
listFilter :: (a -> Bool) -> [a] -> [a]
listFilter _ [] = []
listFilter p (x:xs)
  | p x = x : listFilter p xs
  | otherwise = listFilter p xs

-- | A function that takes in a list and reverses the order of its elements.
listReverse :: [a] -> [a]
listReverse xs = foldl (\acc x -> x : acc) [] xs

-- | A function that takes a list and applies a function to each element, returning the resulting list.
listApply :: [a -> b] -> [a] -> [b]
listApply [] _ = []
listApply (f:fs) xs = listMap f xs `listConcat` listApply fs xs

main :: IO ()
main = do
  let nums = [1,2,3,4,5]
  let squares = listApply [\x -> x * x] nums
  putStrLn $ "Original list: " ++ show nums
  putStrLn $ "Squares of original list: " ++ show squares
  putStrLn $ "Length of squares list: " ++ show (listLength squares)
  putStrLn $ "Filtered squares list (even numbers only): " ++ show (listFilter even squares)
  putStrLn $ "Reversed squares list: " ++ show (listReverse squares)