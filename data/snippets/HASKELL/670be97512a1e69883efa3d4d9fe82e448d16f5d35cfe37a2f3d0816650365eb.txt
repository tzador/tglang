-- Typeclass for monoids
class Monoid m where
  -- Monoid binary operation
  (<>) :: m -> m -> m
  -- Identity element
  mempty :: m

-- Instance of Monoid for Integer type
instance Monoid Integer where
  -- Integer binary operation is addition
  (<>) x y = x + y
  -- Identity element is 0
  mempty = 0

-- Instance of Monoid for String type
instance Monoid String where
  -- String binary operation is concatenation
  (<>) x y = x ++ y
  -- Identity element is empty string
  mempty = ""

-- Recursive function that takes in a list of monoids and applies the binary operation
-- to combine them into a single monoid
combineMonoids :: Monoid m => [m] -> m
combineMonoids [] = mempty
combineMonoids (x:xs) = x <> combineMonoids xs

-- Example usage: combining list of integers using combineMonoids
combineMonoids [1, 2, 3, 4] -- Output: 10