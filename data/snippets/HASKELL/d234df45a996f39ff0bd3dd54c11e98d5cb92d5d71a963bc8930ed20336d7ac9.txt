module Main where
import Data.List (groupBy)

-- Define a list of numbers
numbers :: [Int]
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

-- Define a function to check if a number is even
isEven :: Int -> Bool
isEven x = x `mod` 2 == 0

-- Use a higher order function to filter out even numbers from the list
evenNumbers :: [Int]
evenNumbers = filter isEven numbers

-- Define a function to calculate the factorial of a number
factorial :: Int -> Int
factorial n = product [1..n]

-- Use recursion to calculate the sum of all factorials in a list
sumOfFactorials :: [Int] -> Int
sumOfFactorials [] = 0
sumOfFactorials (x:xs) = factorial x + sumOfFactorials xs

-- Use pattern matching to define a function that groups numbers into odd and even lists
groupOddEven :: [Int] -> ([Int], [Int])
groupOddEven [] = ([], [])
groupOddEven (x:xs)
    | isEven x = (x:evenList, oddList)
    | otherwise = (evenList, x:oddList)
    where (evenList, oddList) = groupOddEven xs

-- Use map and lambdas to square all the numbers in the list
squaredNumbers :: [Int]
squaredNumbers = map (\x -> x*x) numbers

-- Use foldl to calculate the product of all numbers in the list
productOfNumbers :: [Int] -> Int
productOfNumbers = foldl (*) 1

-- Use foldr and recursion to reverse a list
reverseList :: [a] -> [a]
reverseList = foldr (\x acc -> acc ++ [x]) []

main = do
    print $ evenNumbers -- Output: [2, 4, 6, 8]
    print $ sumOfFactorials numbers -- Output: 409113
    print $ groupOddEven numbers -- Output: ([2, 4, 6, 8], [1, 3, 5, 7, 9])
    print $ squaredNumbers -- Output: [1, 4, 9, 16, 25, 36, 49, 64, 81]
    print $ productOfNumbers numbers -- Output: 362880
    print $ reverseList numbers -- Output: [9, 8, 7, 6, 5, 4, 3, 2, 1]