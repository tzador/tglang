{-#LANGUAGE MultiParamTypeClasses, FlexibleInstances, TypeSynonymInstances #-}

class Point p where
  getX :: p -> Int
  getY :: p -> Int  
  move :: (Int, Int) -> p -> p

data CartesianPoint = CartesianPoint { xc :: Int, yc :: Int }
data PolarPoint = PolarPoint { rp :: Int, ap :: Int }

instance Point CartesianPoint where
  getX = xc
  getY = yc
  move (dx, dy) (CartesianPoint x y) = CartesianPoint (x + dx) (y + dy)

instance Point PolarPoint where
  getX = rp * cos . (pi / 180) . ap
  getY = rp * sin . (pi / 180) . ap
  move (dr, da) (PolarPoint r a) = PolarPoint (r + dr) (a + da)

main :: IO ()
main = do
  putStr "Enter coordinates in form (x, y): "
  input <- getLine
  let coords = read input :: (Int, Int)
  let cartesianPt = CartesianPoint (fst coords) (snd coords)
  let polarPt = PolarPoint (fst coords) (snd coords)
  putStrLn $ "The x coordinate for " ++ show cartesianPt ++ " is " ++ show (getX cartesianPt)
  putStrLn $ "The y coordinate for " ++ show polarPt ++ " is " ++ show (getY polarPt)