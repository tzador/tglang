-- This is a complex code snippet in Haskell
data Point = Point { x :: Int,
                     y :: Int
                   } deriving (Show) -- defining a custom data type with two int fields and a show instance

instance Functor Point where  -- implementing the Functor typeclass for the Point data type
  fmap f (Point x y) = Point (f x) (f y)  -- defines a fmap function which applies a given function to each field of the Point data type

calculateDistance :: Point -> Point -> Float  -- defining a function that calculates the distance between two Point objects and returns a Float
calculateDistance (Point x1 y1) (Point x2 y2) =
    sqrt $ fromIntegral ((x2 - x1)^2 + (y2 - y1)^2)  -- using the fromIntegral function to convert the result of the calculation to a Float

main :: IO ()  -- the main function for the program
main = do
    putStrLn "Enter the coordinates for Point 1:"
    x1 <- readLn  -- reading user input for the x coordinate of Point 1
    y1 <- readLn  -- reading user input for the y coordinate of Point 1
    putStrLn "Enter the coordinates for Point 2:"
    x2 <- readLn  -- reading user input for the x coordinate of Point 2
    y2 <- readLn  -- reading user input for the y coordinate of Point 2
    let point1 = Point x1 y1  -- creating a Point object with the user input coordinates for Point 1
        point2 = Point x2 y2  -- creating a Point object with the user input coordinates for Point 2
        distance = calculateDistance point1 point2  -- calculating the distance between the two Points
    putStrLn $ "The distance between Point 1 and Point 2 is: " ++ show distance  -- printing the final result using the show function to convert the Float to a String