{-|
    This is a multi-line comment in Haskell.
    Below is an example of a recursive function to find the factorial of a number.
-}
factorial :: Int -> Int
factorial n
    | n == 0 = 1
    | otherwise = n * factorial(n - 1)

{-|
    Below is an example of a higher-order function that takes in a function as an argument.
    It applies the given function to each element in the list and returns a new list.
    In this case, the function takes in an Int and returns its square.
    The output of this code snippet would be [1, 4, 9, 16, 25].
-}
map :: (a -> b) -> [a] -> [b]
map f [] = []
map f (x:xs) = f x : map f xs

numbers :: [Int]
numbers = [1, 2, 3, 4, 5]

squaredNumbers :: [Int]
squaredNumbers = map (\x -> x * x) numbers

{-|
    The code above can also be written using a lambda expression as follows:
    \x -> x * x
    This is an anonymous function that takes in a parameter x and returns its square.
    The output of this code snippet would be [2, 4, 6, 8, 10].
-}
doubledNumbers :: [Int]
doubledNumbers = map (\x -> x * 2) numbers