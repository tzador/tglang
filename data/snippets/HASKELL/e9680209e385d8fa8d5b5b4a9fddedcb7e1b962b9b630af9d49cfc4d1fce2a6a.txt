-- Declare a new data type called "Expr" with two constructors
data Expr = Val Double | Var String Expr deriving Show

-- Create a function "eval" that evaluates expressions with respect to a given variable
eval :: Expr -> Double -> Double
eval (Val x) _ = x
eval (Var name expr) val = (eval expr val) * val

-- Declare a function "derivative" that calculates the derivative of a given expression
derivative :: Expr -> Expr
derivative (Val _) = Val 0
derivative (Var name _) = Val 1
derivative (Var name expr) = Var name (derivative expr)

-- Declare a function "simplify" that simplifies an expression by combining like terms
simplify :: Expr -> Expr
simplify (Val x) = Val x
simplify (Var name expr) = Var name (simplify expr)
simplify (Var name (Val x1)) = Var name (Val x1)
simplify (Var name (Var _ (Val x1))) = Var name (Val x1)
simplify (Var name (Var _ (Var _ (Val x1)))) = Var name (Val x1)
simplify (Var name (Var _ (Var _ (Var _ (Val x1))))) = Var name (Val x1)
simplify (Var name (Var _ (Var _ (Var _ (Var _ (Val x1)))))) = Var name (Val x1)

-- Define an expression to test the functions
expr = Var "x" (Val 5)

-- Print results
main = do
    print (eval expr 2) -- Output: 10.0
    print (derivative expr) -- Output: Var "x" (Val 1)
    print (simplify expr) -- Output: Var "x" (Val 5)