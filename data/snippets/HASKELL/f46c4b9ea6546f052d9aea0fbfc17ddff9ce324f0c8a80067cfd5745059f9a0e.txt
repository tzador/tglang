{-
This is a block comment in Haskell
-}

-- Define a function to calculate the factorial of a number
factorial :: Integer -> Integer
factorial n = if n == 0 then 1 else n * factorial (n-1)

-- Define a higher order function that takes in a function and applies it twice
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

-- Define a data type for a binary tree
data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)

-- Define a function to insert a new element into a binary tree
insert :: (Ord a) => a -> Tree a -> Tree a
insert x EmptyTree = Node x EmptyTree EmptyTree
insert x (Node a left right)
  | x == a = Node x left right
  | x < a = Node a (insert x left) right
  | x > a = Node a left (insert x right)

-- Define a function to convert a list to a binary tree using the insert function
listToTree :: (Ord a) => [a] -> Tree a
listToTree xs = foldr insert EmptyTree xs

-- Define a function to check if a binary tree is a binary search tree
isBST :: (Ord a) => Tree a -> Bool
isBST EmptyTree = True
isBST (Node x left right) = all (< x) (nodes left) && all (> x) (nodes right) && isBST left && isBST right
  where nodes EmptyTree = []
        nodes (Node x left right) = x : nodes left ++ nodes right

-- Use the listToTree function to convert a list to a binary search tree and then check if it is a BST
isBST (listToTree [1,2,3,4,5])