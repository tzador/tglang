import Data.Map (Map)
import qualified Data.Map as Map

factorial :: Integer -> Integer -- Define a function called 'factorial' that takes in an Integer as a parameter and returns an Integer as the output
  
factorial n = if n == 0 -- Conditional statement for when n is 0
                then 1 -- Return 1 if n is 0
                else n * factorial (n - 1) -- Otherwise, recursively call the factorial function with n - 1 as the parameter and multiply it by n

memoizedFactorial :: Integer -> Integer -- Define a function called 'memoizedFactorial' that takes in an Integer as a parameter and returns an Integer as the output
memoizedFactorial = (map factorial [0..] !!) -- Map the factorial function over a list from 0 to infinity and use the !! operator to return the element at the specified index

memoize :: (Integer -> Integer) -> Integer -> Integer -- Define a higher-order function called 'memoize' that takes in a function as its first parameter and an Integer as its second parameter, and returns an Integer as the output
memoize f = (map f [0..] !!) -- Use the same technique as above, but map over the given function instead of the factorial function

cachedFactorial :: Integer -> Integer -- Define a function called 'cachedFactorial' that takes in an Integer as a parameter and returns an Integer as the output
cachedFactorial = memoize factorial -- Use the memoize function to memoize the factorial function

main :: IO () -- Define the main function
main = do -- Start a do block
    let n = 10 -- Assign a value of 10 to the variable 'n'
    print $ cachedFactorial n -- Print the cached factorial of n
    print $ factorial n -- Print the factorial of n without caching