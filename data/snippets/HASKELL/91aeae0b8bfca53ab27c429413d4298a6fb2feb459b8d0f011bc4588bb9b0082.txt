{-# LANGUAGE TypeFamilies, DataKinds, TypeOperators #-}
import Data.Kind
type family Or (x :: Bool) (y :: Bool) :: Bool where
    Or 'True y = 'True
    Or 'False y = y

data List (a :: Type) (b :: Bool) where
    Nil :: List a 'False
    Cons :: a -> List a 'True -> List a 'True

type family Append (l1 :: List a x) (l2 :: List a y) :: List a (Or x y) where
    Append 'Nil l = l
    Append (Cons x xs) ys = Cons x (Append xs ys)

type family Reverse (l :: List a x) :: List a x where
    Reverse 'Nil = 'Nil
    Reverse (Cons x xs) = Append (Reverse xs) (Cons x 'Nil)