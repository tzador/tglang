-- This is a multi-line comment in Haskell

-- Define a function called `fibonacci` that takes in an Int parameter
-- and returns an infinite list of fibonacci numbers

fibonacci :: Int -> [Int]  -- Type signature specifying input and output type of the function
fibonacci 0 = [0]  -- Pattern matching for the base case when input is 0, return list with 0 as only element
fibonacci 1 = [0, 1]  -- Pattern matching for the second base case when input is 1, return list with 0 and 1 as first two elements
fibonacci n = fibonacci (n-1) ++ [last (take (n-1) (fibonacci (n-1))) + last (take (n-2) (fibonacci (n-2)))]  
-- Recursive definition of the function, taking the sum of the last two elements of the fibonacci list for the current input
-- and adding it to the end of the fibonacci list for the previous input

-- Example usage:
-- fibonacci 10 returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]