-- Define a data type for a binary tree with two constructors
data Binary Tree a = Empty | Node a (Binary Tree a) (Binary Tree a)

-- Define a function to insert a value into a binary tree
insertTree :: Ord a => a -> Binary Tree a -> Binary Tree a
insertTree x Empty = Node x Empty Empty
insertTree x (Node y left right)
    | x < y = Node y (insertTree x left) right
    | x > y = Node y left (insertTree x right)
    | otherwise = Node y left right -- Value already exists, do not insert

-- Define a function to search for a value in a binary tree
searchTree :: Ord a => a -> Binary Tree a -> Bool
searchTree x Empty = False -- Value not found
searchTree x (Node y left right)
    | x == y = True -- Value found
    | x < y = searchTree x left -- Search left subtree
    | x > y = searchTree x right -- Search right subtree

-- Example usage
main = do
    let tree = Node 5 (Node 3 (Node 1 Empty Empty) (Node 4 Empty Empty)) (Node 7 (Node 6 Empty Empty) (Node 8 Empty Empty))
    print (insertTree 2 tree) -- Output: Node 5 (Node 3 (Node 1 Empty (Node 2 Empty Empty)) (Node 4 Empty Empty)) (Node 7 (Node 6 Empty Empty) (Node 8 Empty Empty))
    print (searchTree 6 tree) -- Output: True