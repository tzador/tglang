-- | This is an example of a higher-order function in Haskell
{-# LANGUAGE FlexibleContexts #-}
-- We enable the FlexibleContexts language extension for this snippet

-- | 'mapFilter' applies a function to each element of a list,
-- | and removes any elements that fail a given predicate
mapFilter :: (a -> b) -> (a -> Bool) -> [a] -> [b]
mapFilter f p xs = [f x | x <- xs, p x] -- Using list comprehension and guards

-- | Here we define a list of integers
values :: [Int]
values = [1,2,3,4,5,6,7,8,9,10] -- Values can be of any type, as long as it satisfies the predicate

-- | Here we define a predicate to filter even numbers
isEven :: Int -> Bool
isEven x = (x `mod` 2) == 0

-- | We call the function 'mapFilter' with our defined function and predicate,
-- | and pass in the list of values as the third argument
evenValues :: [Int] -- This function returns a list of even integers
evenValues = mapFilter (*2) isEven values

-- | We can also pass in an anonymous function and combine it with our predicate
oddValues :: [Int] -- This function returns a list of odd integers
oddValues = mapFilter (\x -> x * 3) (\x -> x `mod` 2 == 1) values

-- | Finally, we print out the results of our higher-order functions
main :: IO ()
main = do
  putStrLn "Even values:"
  print evenValues
  putStrLn "Odd values:"
  print oddValues