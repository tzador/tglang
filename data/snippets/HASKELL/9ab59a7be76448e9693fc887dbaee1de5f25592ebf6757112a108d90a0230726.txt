{-# LANGUAGE TypeFamilies #-}  -- annotation for type families
data family Function a          -- define a family of data types with a type variable 'a'
data instance Function Int = IntegerFunction (Int -> Int)  -- create an instance of the 'Function' type with a function type
data instance Function Char = StringFunction (Char -> Char -> Char)  -- create another instance with a different function type

main :: IO ()  -- main function with no input and no output
main = do     -- monadic do-notation for sequencing actions
    let intFunc = IntegerFunction (*2)  -- create an instance of IntegerFunction with a function that multiplies input by 2
        charFunc = StringFunction (\x y -> x:y:"!")  -- create an instance of StringFunction with a function that appends an exclamation mark at the end of two characters
    print $ apply intFunc 5  -- apply the IntegerFunction to the number 5 and print the result
    print $ apply charFunc 'H' 'i'  -- apply the StringFunction to the characters 'H' and 'i' and print the result

apply :: Function a -> a -> a -> a  -- function that applies a function from the 'Function' family to two inputs of type 'a' and returns output of type 'a'
apply (IntegerFunction f) x _ = f x  -- pattern matching to extract the function from the IntegerFunction and apply it to the first input
apply (StringFunction f) x y = f x y  -- pattern matching to extract the function from the StringFunction and apply it to the two inputs