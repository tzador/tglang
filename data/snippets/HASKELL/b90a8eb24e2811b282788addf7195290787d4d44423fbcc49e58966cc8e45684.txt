{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}

module Example where

-- Defining a type class 'ExampleClass' with a type family
class ExampleClass a where
  type ExampleType a -- Defines a type family 'ExampleType'

  -- Function that takes a type 'a' and returns a value of type 'ExampleType a'
  exampleFunction :: a -> ExampleType a

-- Making instance of 'ExampleClass' for type 'Int'
instance ExampleClass Int where
  -- Defining 'ExampleType' as 'Int'
  type ExampleType Int = Int

  -- Implementing 'exampleFunction' for 'Int' type
  exampleFunction x = x + 10

-- Making instance of 'ExampleClass' for type 'Bool'
instance ExampleClass Bool where
  -- Defining 'ExampleType' as 'String'
  type ExampleType Bool = String

  -- Implementing 'exampleFunction' for 'Bool' type
  exampleFunction x = if x then "True" else "False"

-- Making instance of 'ExampleClass' for type 'Char'
instance ExampleClass Char where
  -- Defining 'ExampleType' as 'Bool'
  type ExampleType Char = Bool

  -- Implementing 'exampleFunction' for 'Char' type
  exampleFunction x = if x == 'a' then True else False

-- Main function
main :: IO ()
main = do
  -- Using 'exampleFunction' with different types
  putStrLn $ show $ exampleFunction (5 :: Int) -- Output: 15
  putStrLn $ show $ exampleFunction (True :: Bool) -- Output: "True"
  putStrLn $ show $ exampleFunction ('b' :: Char) -- Output: False