-- Define a data type for a binary tree
data Tree a = Leaf a | Node (Tree a) a (Tree a)

-- Function to insert a value into the tree
insert :: Ord a => a -> Tree a -> Tree a
insert x (Leaf a) = if x < a then Node (Leaf x) a (Leaf a) else Node (Leaf a) x (Leaf x)
insert x (Node l a r) = if x < a then Node (insert x l) a r else Node l a (insert x r)

-- Function to delete a value from the tree
delete :: Ord a => a -> Tree a -> Tree a
delete _ (Leaf _) = error "Element not found"
delete x (Node l a r) = if x == a then merge l r else if x < a then Node (delete x l) a r else Node l a (delete x r)
    where 
        merge :: Ord a => Tree a -> Tree a -> Tree a
        merge (Leaf _) r = r
        merge l (Leaf _) = l
        merge l (Node ll a rr) = Node l a (merge ll rr)
        
-- Function to find the minimum value in the tree
findMin :: Ord a => Tree a -> a
findMin (Leaf a) = a
findMin (Node l a _) = findMin l

-- Function to delete the minimum value in the tree
delMin :: Ord a => Tree a -> Tree a
delMin (Leaf _) = error "Tree is empty"
delMin (Node (Leaf _) a r) = r
delMin (Node l a r) = Node (delMin l) a r