{-# LANGUAGE DataKinds, TypeFamilies #-}

-- | A datatype representing a linked list
data List a = Nil | Cons a (List a)

-- | A type family that calculates the length of a list
type family ListLength (xs :: List k) :: Nat where
  ListLength 'Nil = 0
  ListLength ('Cons x xs) = 1 + ListLength xs

-- | A type family that appends two lists
type family Append (xs :: List k) (ys :: List k) :: List k where
  Append 'Nil ys = ys
  Append ('Cons x xs) ys = 'Cons x (Append xs ys)

-- | A type family that reverses a list
type family Reverse (xs :: List k) :: List k where
  Reverse 'Nil = 'Nil
  Reverse ('Cons x xs) = Append (Reverse xs) ('Cons x 'Nil)

-- | A type family that checks if a list is empty
type family IsEmpty (xs :: List k) :: Bool where
  IsEmpty 'Nil = 'True
  IsEmpty ('Cons x xs) = 'False

-- | A type family that gets the head of a list
type family Head (xs :: List k) :: k where
  Head ('Cons x 'Nil) = x
  Head ('Cons x xs) = Head xs

-- | A type family that gets the tail of a list
type family Tail (xs :: List k) :: List k where
  Tail ('Cons x 'Nil) = 'Nil
  Tail ('Cons x xs) = xs