{-# LANGUAGE NoImplicitPrelude #-} {-"#This sets the language extensions for the code snippet"-}
import Prelude (print, ($), fmap, Show) {-"#importing necessary modules for the code snippet-"}
import Control.Monad ((>>=), Monad) {-"#importing Control.Monad module for monadic operations-"}
import Control.Monad.Cont (ContT, return, runContT) {-"#importing Control.Monad.Cont module for continuation monad-"}

main :: IO () {-"#main function for executing the program-"}
main = do {-"#do notation for sequencing actions-"}
    putStrLn "Enter a number:" {-"#printing a prompt for user input-"}
    number <- readLn {-"#using readLn to read a number from user input and bind it to 'number'-"}
    let result = addOne number {-"#using 'let' to define a variable 'result' which adds 1 to 'number'-"}
    runContT (printResult result) print {-"#using runContT to print the result using the 'printResult' function-"}
    -- printResult function defined below

addOne :: Int -> Int {-"#defining a function 'addOne' that takes an Int as input and returns an Int-"}
addOne x = x + 1 {-"#function body adding 1 to the input and returning the result-"}

printResult :: (Show a, Monad m) => a -> ContT r m () {-"#function to print a result using the continuation monad-"}
printResult res = ContT (\_ -> print res) {-"#using 'ContT' to create a continuation monad that prints the result-"}