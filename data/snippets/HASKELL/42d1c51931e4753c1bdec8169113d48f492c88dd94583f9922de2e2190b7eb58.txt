{-# LANGUAGE OverloadedLists #-}
import Data.Map (Map)
import qualified Data.Map as Map

fibonacci :: Int -> Int
fibonacci n
  | n == 0 || n == 1 = n
  | otherwise        = fibonacci (n-1) + fibonacci (n-2)

-- | Takes a list of integers and returns a map with the number as the key
-- and the fibonacci of that number as the value
--
-- >>> fibMap [1,2,3,4]
-- fromList [(1,1),(2,1),(3,2),(4,3)]
--
fibMap :: [Int] -> Map Int Int
fibMap = Map.fromList . map (\n -> (n, fibonacci n))