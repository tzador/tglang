{-# LANGUAGE MultiParamTypeClasses, FlexibleInstances, UndecidableInstances #-}

-- Define a type class for a monoid
class Monoid m where
    -- An operation that combines two values of type m
    combine :: m -> m -> m
    -- An identity element for the combine operation
    identity :: m

-- Define a monoid instance for integers using addition as the combination
instance Monoid Int where
    combine x y = x + y
    identity = 0

-- Define a monoid instance for strings using concatenation as the combination
instance Monoid String where
    combine x y = x ++ y
    identity = ""

-- Define a function that uses the combine operation on a list of monoid values
combineList :: Monoid m => [m] -> m
combineList [] = identity
combineList (x:xs) = x `combine` combineList xs

-- Define a type class for a functor
class Functor f where
    -- A mapping function that applies a function to elements of type a inside f
    fmap :: (a -> b) -> f a -> f b

-- Define a functor instance for lists
instance Functor [] where
    fmap _ [] = []
    fmap f (x:xs) = f x : fmap f xs

-- Define a type class for a foldable data structure
class Foldable f where
    -- A function that reduces a foldable data structure to a single value
    foldr :: (a -> b -> b) -> b -> f a -> b

-- Define a foldable instance for lists
instance Foldable [] where
    foldr _ acc [] = acc
    foldr f acc (x:xs) = f x (foldr f acc xs)