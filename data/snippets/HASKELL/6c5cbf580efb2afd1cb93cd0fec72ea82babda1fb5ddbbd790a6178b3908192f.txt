{-# LANGUAGE LambdaCase #-}

-- Data types definition
data Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show)

-- Function to map a function over a tree
mapTree :: (a -> b) -> Tree a -> Tree b
mapTree _ Empty = Empty
mapTree f (Node x left right) = Node (f x) (mapTree f left) (mapTree f right)

-- Function to filter a tree based on a predicate
filterTree :: (a -> Bool) -> Tree a -> Tree a
filterTree _ Empty = Empty
filterTree p (Node x left right)
    | p x = Node x (filterTree p left) (filterTree p right)
    | otherwise = Empty

-- Function to fold a tree into a single value
foldTree :: (a -> b -> b) -> b -> Tree a -> b
foldTree _ acc Empty = acc
foldTree f acc (Node x left right) = foldTree f (f x (foldTree f acc left)) right

-- Example tree
tree :: Tree Int
tree = Node 1 (Node 2 (Node 3 Empty Empty) (Node 4 Empty Empty)) (Node 5 (Node 6 Empty Empty) (Node 7 Empty Empty))

-- Applying mapTree function on the tree to square each element
mappedTree :: Tree Int
mappedTree = mapTree (\x -> x * x) tree

-- Applying filterTree function on the tree to keep only odd numbers
filteredTree :: Tree Int
filteredTree = filterTree (\x -> x `mod` 2 == 1) tree

-- Applying foldTree function on the tree to get the sum of all elements
sumOfTree :: Int
sumOfTree = foldTree (+) 0 tree

-- Output annotation
-- The `Tree` data type represents a binary tree with values of type `a`. 
-- The `mapTree` function maps a given function over each element in the given tree, 
-- resulting in a new tree with elements of type `b`. 
-- The `filterTree` function filters the given tree based on a predicate function, 
-- resulting in a new tree with the same type and structure. 
-- The `foldTree` function reduces the given tree into a single value, 
-- starting with a given accumulator value. 
-- The `tree` variable represents an example binary tree with values of type `Int`. 
-- The `mappedTree` variable is the result of mapping the `square` function over the `tree`. 
-- The `filteredTree` variable is the result of filtering out even numbers from the `tree`. 
-- The `sumOfTree` variable is the sum of all elements in the `tree`.