{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ConstraintKinds #-}
{-# LANGUAGE KindSignatures #-}

-- | Constraint for a type that is an instance of 'Show'
type ShowConstraint (a :: *) = Show a

-- | Constraint for a type that is an instance of 'Read'
type ReadConstraint (a :: *) = Read a

-- | Constraint for a type that is an instance of both 'Show' and 'Read'
type ShowReadConstraint (a :: *) = (ShowConstraint a, ReadConstraint a)

-- | A function that converts a 'Show' instance to a 'Read' instance
toRead :: forall a. ShowConstraint a => a -> ReadConstraint a
toRead = read . show

-- | A function that converts a 'Read' instance to a 'Show' instance
toShow :: forall a. ReadConstraint a => a -> ShowConstraint a
toShow = show . read

-- | A function that combines a 'Show' and 'Read' instance into a tuple
combineInstances :: forall a. (ShowConstraint a, ReadConstraint a) => a -> (a, a)
combineInstances x = (toRead x, toShow x)

-- | A type class for types that can be 'Show'n and 'Read'
class (Show a, Read a) => Serializable a where
  -- | A function that serializes an instance of type 'a' to a 'String'
  serialize :: a -> String
  serialize = show
  
  -- | A function that deserializes a 'String' into an instance of type 'a'
  deserialize :: String -> a
  deserialize = read
  
-- | A type that implements the 'Serializable' type class
data Person = Person String Int deriving (Show, Read)

-- | An instance of 'Serializable' for the type 'Person'
instance Serializable Person

-- | A function that combines a 'Serializable' instance and a 'Read' instance into a tuple
combineInstances' :: forall a. (Serializable a, ReadConstraint a) => a -> (a, a)
combineInstances' x = (deserialize $ serialize x, read $ serialize x)