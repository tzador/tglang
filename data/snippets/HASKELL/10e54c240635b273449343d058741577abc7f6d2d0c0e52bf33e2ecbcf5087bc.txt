{-# LANGUAGE RankNTypes #-}

module Example where

data List a = Nil | Cons a (List a)

data Tree a = Leaf a | Branch (Tree a) a (Tree a)

example :: Int -> [Int]
example n = foldr ($!) [] . map ($!) $ rise n
 where
  rise 0 = [[]]
  rise n = [ x : xs | xs <- rise (n - 1), x <- [1 .. n] ]

select :: (forall a. a -> Bool) -> List a -> List a
select _ Nil = Nil
select p (Cons x xs) | p x       = Cons x (select p xs)
                     | otherwise = select p xs

branch_order :: List a -> List a
branch_order tree = select (const True) tree

leaf_order :: Tree a -> Tree a
leaf_order tree = go [] tree
 where
  go acc (Leaf x)       = Leaf x
  go acc (Branch l x r) = Branch (go (x : acc) l) x (go acc r)