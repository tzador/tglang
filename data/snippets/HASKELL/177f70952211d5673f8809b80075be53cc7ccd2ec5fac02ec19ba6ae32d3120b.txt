-- a custom data type for a binary search tree
data Tree a = 
    EmptyTree -- represents an empty tree 
    | Node a (Tree a) (Tree a) -- represents a tree node with a value and two subtrees (left and right)

-- function to insert a value into the tree
insert :: (Ord a) => a -> Tree a -> Tree a 
insert x EmptyTree = Node x EmptyTree EmptyTree -- if tree is empty, create node with value and empty subtrees
insert x (Node a left right)
    | x == a = Node x left right -- if value exists already, return the same tree
    | x < a  = Node a (insert x left) right -- if value is less than node, insert into left subtree
    | x > a  = Node a left (insert x right) -- if value is greater than node, insert into right subtree

-- function to check if a value is present in the tree
contains :: (Ord a) => a -> Tree a -> Bool 
contains x EmptyTree = False -- if tree is empty, value does not exist in the tree
contains x (Node a left right)
    | x == a = True -- if value is equal to node, value is present in the tree
    | x < a  = contains x left -- if value is less than node, check in left subtree
    | x > a  = contains x right -- if value is greater than node, check in right subtree