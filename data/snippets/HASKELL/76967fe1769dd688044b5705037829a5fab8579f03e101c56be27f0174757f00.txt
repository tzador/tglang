{-# LANGUAGE RankNTypes #-}

newtype Functor f = Functor (forall a b. (a -> b) -> f a -> f b)

instance (Functor f) where
    fmap :: (a -> b) -> f a -> f b
    fmap f (Functor g) = g f

data Tree a = Empty | Node a (Tree a) (Tree a)

instance Functor Tree where
    fmap :: (a -> b) -> Tree a -> Tree b
    fmap f Empty = Empty
    fmap f (Node a left right) = Node (f a) (fmap f left) (fmap f right)