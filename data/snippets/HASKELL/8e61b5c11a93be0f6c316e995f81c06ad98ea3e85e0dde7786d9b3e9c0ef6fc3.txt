{-# LANGUAGE MultiParamTypeClasses #-}   {-# LANGUAGE FlexibleInstances #-}   {-# LANGUAGE UndecidableInstances #-}   {-# LANGUAGE FunctionalDependencies #-}   {-# LANGUAGE TypeOperators #-}

-- Defining a type-level natural number
data Z     -- Zero
data S n   -- Successor

class Add a b c | a b -> c where -- Functional dependency to ensure correctness
    add :: a -> b -> c
    
instance Add Z b b where
    add _ b = b -- Base case where first argument is Zero
   
instance (Add a b c) => Add (S a) b (S c) where
    add (S a) b = S (add a b) -- Recursive case for positive numbers

class Subtract a b c | c b -> a where -- Functional dependency to ensure correctness
    subtract :: a -> b -> c
    
instance Subtract Z b b where
    subtract _ b = b -- Base case where first argument is Zero
    
instance (Subtract a b c) => Subtract (S a) (S b) c where
    subtract (S a) (S b) = subtract a b -- Recursive case for positive numbers
    
class Multiply a b c | a b -> c where -- Functional dependency to ensure correctness
    multiply :: a -> b -> c
    
instance Multiply Z b Z where
    multiply _ _ = Z -- Base case where first argument is Zero
    
instance (Multiply a b c, Add b c d) => Multiply (S a) b d where
    multiply (S a) b = add b (multiply a b) -- Recursive case for positive numbers, using addition to simulate multiplication

class Fibonacci a where
    fib :: a -> Int
    
instance Fibonacci Z where
    fib _ = 0 -- First Fibonacci number
    
instance Fibonacci b => Fibonacci (S b) where
    fib _ = fib (undefined :: b) + fib (undefined :: S b) -- Recursive case for calculating Fibonacci numbers, using type-level natural numbers to determine length

-- Example usage:
-- fib (undefined :: S (S (S Z))) -- Outputs 1