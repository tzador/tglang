-- Defining a custom Maybe type
data MyMaybe a = MyJust a | MyNothing

-- A function that maps a function over a Maybe value
myMaybeMap :: (a -> b) -> MyMaybe a -> MyMaybe b
myMaybeMap _ MyNothing = MyNothing
myMaybeMap f (MyJust x) = MyJust (f x)

-- A recursive function to compute the factorial of a number
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)

-- A higher-order function that combines two functions into one
-- The second function must take in the output of the first function as its input
compose :: (b -> c) -> (a -> b) -> (a -> c)
compose f g x = f (g x)

-- An example of using the compose function to compute the factorial of a number
factViaCompose :: Int -> Int
factViaCompose = compose factorial (\x -> x)