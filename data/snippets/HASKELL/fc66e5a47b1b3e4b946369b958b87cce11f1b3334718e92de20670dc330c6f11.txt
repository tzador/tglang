import Control.Monad.State.Lazy

-- Define a function named 'factorial' that takes in an Integer
-- and returns the factorial of that Integer using recursion
factorial :: Integer -> Integer 
factorial n
    | n == 0 = 1
    | otherwise = n * factorial (n - 1)

-- Define a State monad that stores two Integers as its state
type MyState = State (Integer, Integer)

-- Define a function named 'runFactorial' that takes in an Integer
-- and runs the 'factorial' function using the State monad
runFactorial :: Integer -> Integer
runFactorial n = evalState (factorialState n) (0, 1)

-- Define a function named 'factorialState' that takes in an Integer
-- and updates the state by multiplying the current state's first Integer 
-- with the given Integer, and then decreasing the given Integer by 1
factorialState :: Integer -> MyState Integer
factorialState n = do
    (acc, cur) <- get
    if n == 0
        then return acc
        else put (acc + cur, cur * n) >> factorialState (n - 1)

-- Print the result of running the 'runFactorial' function with input 5
main :: IO ()
main = print $ runFactorial 5

-- Output: 120