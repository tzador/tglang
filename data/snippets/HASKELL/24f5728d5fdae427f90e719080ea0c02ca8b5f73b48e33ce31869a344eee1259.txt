-- Define a type for a binary tree
data Tree a = Empty | Node a (Tree a) (Tree a)

-- Define a function to insert a new element into a binary tree
insert :: (Ord a) => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty
insert x (Node value left right)
    -- if the new value is less than the current node, insert it into the left subtree
    | x < value = Node value (insert x left) right
    -- if the new value is greater than the current node, insert it into the right subtree
    | x > value = Node value left (insert x right)
    -- if the new value is equal to the current node, do not insert it
    | otherwise = Node value left right

-- Define a function to check if a value is present in a binary tree
contains :: (Ord a) => a -> Tree a -> Bool
contains x Empty = False
contains x (Node value left right)
    -- if the value is equal to the current node, return True
    | x == value = True
    -- if the new value is less than the current node, check the left subtree
    | x < value = contains x left
    -- if the new value is greater than the current node, check the right subtree
    | x > value = contains x right