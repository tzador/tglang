f :: Int -> [Int] -> [Int] -- Defining a function `f` that takes an `Int` and a list of `Int` and returns a list of `Int`

f x xs = [y | y <- xs, y `mod` x == 0] -- Defining the function body using list comprehension,
                                      -- filtering for elements in the list `xs` that are divisible by `x`

main :: IO () -- Defining the main function that has an IO () (input/output action)

main = do
    putStrLn "Enter an integer: " -- Printing a message (using `putStrLn`) to prompt the user to enter an integer
    input <- getLine -- Using `getLine` to capture user input and binding it to the variable `input`
    let num = read input :: Int -- Converting the user input (which is captured as a `String`) to an `Int`
    let output = f num [1..10] -- Calling our function `f` and passing in the `num` variable and a list of numbers from 1 to 10
    print output -- Printing the output of our function, which will be a list of numbers divisible by the user input