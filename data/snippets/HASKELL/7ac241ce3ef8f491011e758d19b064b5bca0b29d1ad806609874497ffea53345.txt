--- Define a function that takes in two integers, x and y, and returns their product multiplied by the sum of x and y
multBySum :: Int -> Int -> Int
multBySum x y = (x + y) * (x * y)

--- Create a list containing the results of applying the function to a list of tuples
productList :: [(Int, Int)] -> [Int]
productList xs = map (\(x, y) -> multBySum x y) xs

--- Define a function that takes in a string and returns the number of vowels in the string
numVowels :: String -> Int
numVowels str = length $ filter (\x -> x `elem` "aeiou") str

--- Create a list of strings and map the numVowels function to each string
vowelCounts :: [String] -> [Int]
vowelCounts strs = map numVowels strs

--- Define a function that takes in a list of strings and returns a new list with each string reversed
revList :: [String] -> [String]
revList strs = map reverse strs

--- Create a list of strings and map the revList function to each string
reversedStrings :: [String] -> [String]
reversedStrings strs = map revList strs