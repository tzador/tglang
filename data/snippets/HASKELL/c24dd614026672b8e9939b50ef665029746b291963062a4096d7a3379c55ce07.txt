import Data.List (sort)

{-| This function merges two sorted lists into a single sorted list.
    The input lists must be sorted in ascending order.
    The output list will also be sorted in ascending order.
-}
merge :: Ord a => [a] -> [a] -> [a]
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys)
    | x < y     = x : merge xs (y:ys)
    | otherwise = y : merge (x:xs) ys

{-| This function recursively performs mergesort on a list.
    It splits the list into two equal parts, recursively sorts each part,
    and then merges the sorted parts.
-}
mergesort :: Ord a => [a] -> [a]
mergesort []  = []
mergesort [x] = [x]
mergesort xs  = merge (mergesort (take half xs)) (mergesort (drop half xs))
    where half = length xs `div` 2

{-| Example usage:
>>> mergesort [5,3,8,2,9,1]
[1,2,3,5,8,9]
-}