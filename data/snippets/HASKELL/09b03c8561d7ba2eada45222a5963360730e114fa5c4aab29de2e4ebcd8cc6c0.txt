-- This is a function that calculates the nth Fibonacci number
-- Input: An integer n
-- Output: The nth Fibonacci number
fibonacci :: Int -> Int
fibonacci n = fibs !! n
  where
    fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
-- This function uses recursion and dynamic programming to generate the list of Fibonacci numbers
-- The '!!' operator gives the nth element of a list
-- The 'zipWith' function combines two lists by applying a given function to each pair of elements
-- In this case, we are adding the first two elements together, then adding the second and third, and so on
-- This generates a list of Fibonacci numbers, starting with 0 and 1, and in each subsequent element, adding the two previous elements together
-- By using lazy evaluation, we only calculate the elements that we need, making this function efficient