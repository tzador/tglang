type Pair a b = (a, b) -- creates a type synonym named Pair with two type parameters a and b   

data Tree a = Empty | Node a (Tree a) (Tree a) -- defines a recursive data structure that represents a binary tree  

size :: Tree a -> Int -- defines a function named size which takes in a Tree of type a and returns an Int  
size Empty = 0 -- pattern matching for when the tree is Empty, return 0  
size (Node _ leftTree rightTree) = 1 + size leftTree + size rightTree -- pattern matching for a non-empty tree, recursively call size on both left and right subtrees and add 1 for the current node, resulting in the total size of the tree

insert :: Ord a => a -> Tree a -> Tree a -- defines a function named insert which takes in a value of type a and a Tree of type a and returns a Tree of type a  
insert value Empty = Node value Empty Empty -- pattern matching for when the tree is Empty, create a new Node with the value and two Empty subtrees  
insert value (Node nodeValue leftTree rightTree) -- pattern matching for a non-empty tree  
  | value == nodeValue = Node nodeValue leftTree rightTree -- if the value is equal to the node's value, return the same tree  
  | value < nodeValue = Node nodeValue (insert value leftTree) rightTree -- if the value is less than the node's value, recursively call insert on the left subtree and return a new tree with the updated subtree  
  | otherwise = Node nodeValue leftTree (insert value rightTree) -- if the value is greater than the node's value, recursively call insert on the right subtree and return a new tree with the updated subtree

inorder :: Tree a -> [a] -- defines a function named inorder which takes in a Tree of type a and returns a list of type a  
inorder Empty = [] -- pattern matching for when the tree is Empty, return an empty list  
inorder (Node value leftTree rightTree) = inorder leftTree ++ [value] ++ inorder rightTree -- pattern matching for a non-empty tree, recursively call inorder on the left subtree, add the node value, and recursively call inorder on the right subtree, resulting in a list of values in ascending order