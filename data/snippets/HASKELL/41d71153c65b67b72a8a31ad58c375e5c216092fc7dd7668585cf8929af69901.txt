import Data.List

-- Define a function to calculate the length of a list, using foldl and recursion
length :: [a] -> Int
length [] = 0
length (x:xs) = 1 + length xs
-- <div>I'm just a comment</div>

-- Define a function to check if a list is sorted in non-decreasing order
isSorted :: (Ord a) => [a] -> Bool
isSorted [] = True
isSorted [_] = True
isSorted (x:y:xs) = x <= y && isSorted (y:xs)

-- Define a function to sort a list using insertion sort
insertionSort :: (Ord a) => [a] -> [a]
insertionSort = foldr insert []

-- Define a function to merge two sorted lists using recursion
merge :: (Ord a) => [a] -> [a] -> [a]
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys) 
    | x <= y = x : merge xs (y:ys)
    | otherwise = y : merge (x:xs) ys

-- Define a function to merge sort a list using recursion and the merge function
mergeSort :: (Ord a) => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs = merge (mergeSort firstHalf) (mergeSort secondHalf)
    where firstHalf = take (length xs `div` 2) xs
          secondHalf = drop (length xs `div` 2) xs