-- This function takes in a list of integers and returns
-- the sum of all the even numbers in the list
sumEven :: [Int] -> Int
sumEven list = foldr (+) 0 (filter even list) -- Using higher order functions to filter and sum the even numbers

-- This function checks if a given string is a palindrome
checkPalindrome :: String -> Bool
checkPalindrome str = str == reverse str -- String is compared to its reversed version to check if it is a palindrome
-- Note: This function does not handle special characters or cases where spaces are significant

-- This function implements the fibonacci sequence using recursion
fibonacci :: Int -> Int
fibonacci n
    | n <= 0 = 0 -- Base case
    | n == 1 = 1 -- Base case
    | otherwise = fibonacci (n-1) + fibonacci (n-2) -- Recursive call

-- This function flattens a list of lists into a single list
flatten :: [[a]] -> [a]
flatten list = foldr (++) [] list -- Using higher order function to concatenate the lists into a single list

-- This function counts the number of occurrences of an element in a list
countOccurrence :: Eq a => [a] -> a -> Int
countOccurrence list element = length (filter (== element) list) -- Using higher order function to filter and count the occurrences of the element

-- This function maps a function to each element in a list and returns the resulting list
mapList :: (a -> b) -> [a] -> [b]
mapList f list = foldr (\x acc -> f x : acc) [] list -- Using higher order function and lambda expression to apply the function to each element and append it to the accumulator list

-- This function finds the maximum element in a list
findMax :: Ord a => [a] -> a
findMax list = foldl1 (\acc x -> if x > acc then x else acc) list -- Using higher order function, lambda expression and conditional statement to iterate through the list and find the maximum element