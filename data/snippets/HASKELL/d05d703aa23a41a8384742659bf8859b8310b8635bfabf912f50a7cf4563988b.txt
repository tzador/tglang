{-# LANGUAGE FlexibleInstances #-}
module Main where

import Control.Monad
import Data.Char

data Expression = Constant Int
                | Variable Char
                | Addition Expression Expression
                | Subtraction Expression Expression
                | Multiplication Expression Expression
                | Division Expression Expression
                | Power Expression Int
                | Negate Expression

instance Num Expression where
    (+) = Addition
    (-) = Subtraction 
    (*) = Multiplication
    negate = Negate

instance Fractional Expression where
    (/) = Division

instance IsString Expression where 
    fromString [c] = Variable c

instance Show Expression where
    show (Constant x) = show x
    show (Variable x) = [x]
    show (Addition e1 e2) = "(" ++ show e1 ++ " + " ++ show e2 ++ ")"
    show (Subtraction e1 e2) = "(" ++ show e1 ++ " - " ++ show e2 ++ ")"
    show (Multiplication e1 e2) = "(" ++ show e1 ++ " * " ++ show e2 ++ ")"
    show (Division e1 e2) = "(" ++ show e1 ++ " / " ++ show e2 ++ ")"
    show (Power e1 p) = "(" ++ show e1 ++ "^" ++ show p ++ ")"
    show (Negate e) = "-" ++ show e

evaluate :: Expression -> Float
evaluate (Constant x) = fromIntegral x
evaluate (Addition e1 e2) = evaluate e1 + evaluate e2
evaluate (Subtraction e1 e2) = evaluate e1 - evaluate e2
evaluate (Multiplication e1 e2) = evaluate e1 * evaluate e2
evaluate (Division e1 e2) = evaluate e1 / evaluate e2
evaluate (Power e p) = (fromIntegral (round (evaluate e))) ^ p
evaluate (Negate e) = - evaluate e

main :: IO ()
main = do
    putStrLn "Enter a mathematical expression:"
    input <- getLine
    let expression = read input :: Expression
    putStrLn $ show expression ++ " =" ++ show (evaluate expression)