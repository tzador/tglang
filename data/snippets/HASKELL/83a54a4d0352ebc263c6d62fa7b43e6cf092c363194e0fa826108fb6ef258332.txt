{-# LANGUAGE TemplateHaskell, TypeApplications #-}

import Language.Haskell.TH.Syntax

{-@
  measure nat :: Int -> Prop @-}

{-@ assume i :: {v: Int | v >= 0} @-}

{-@ assume myFunction :: x:Int -> [Int] -> [Int]<{\xi -> xi <= x}> / [v] @-}
myFunction :: Int -> [Int] -> [Int]
myFunction x ys = take x ys

{-@
  myType ::= MkMyType { fld1 :: {v: Int | v > 0}
                       , fld2 :: {v: String | len v > 3}
                       , fld3 :: {v: [Int] | len v > 5 && all (>= 0) v} }
@-}
data MyType = MkMyType { fld1 :: Int, fld2 :: String, fld3 :: [Int] }

{-@
  invariant {v: MyType | v.fld1 > 0 && len v.fld2 > 3 && len v.fld3 > 5 && all (>= 0) v.fld3 }
@-}