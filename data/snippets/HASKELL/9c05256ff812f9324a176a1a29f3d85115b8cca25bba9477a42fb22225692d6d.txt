{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE KindSignatures #-}

-- | An ordered list data structure.
data List a :: Nat -> Type
  where
    -- | An empty list.
    Nil :: List a 0
    -- | A non-empty list.
    Cons :: a -> List a n -> List a (n + 1)

-- | Concatenate two lists.
(++) :: List a m -> List a n -> List a (m + n)
Nil ++ ys = ys
Cons x xs ++ ys = Cons x (xs ++ ys)

main :: IO ()
main = do
  let list1 = Cons 1 (Cons 2 Nil)
      list2 = Cons 3 (Cons 4 Nil)

  putStrLn $ "List 1: " ++ show list1
  putStrLn $ "List 2: " ++ show list2
  putStrLn $ "Concatenated List: " ++ show (list1 ++ list2)