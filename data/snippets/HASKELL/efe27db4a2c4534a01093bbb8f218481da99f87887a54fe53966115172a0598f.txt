-- This is a function to check if a number is prime or not
isPrime :: Integer -> Bool
isPrime num = if num < 2
  then False
  else (null [x | x <- [2..(num `div` 2)], num `mod` x == 0])

-- This is a function to generate a list of primes up to a given number
listPrimes :: Integer -> [Integer]
listPrimes num = [x | x <- [2..num], isPrime x]

-- Define a data type for Binary Tree
data BinaryTree a = EmptyTree | Node a (BinaryTree a) (BinaryTree a)

-- Define a function to insert a value into the Binary Tree
insertIntoTree :: (Ord a) => a -> BinaryTree a -> BinaryTree a
insertIntoTree val EmptyTree = Node val EmptyTree EmptyTree
insertIntoTree val (Node root left right)
  | val == root = Node val left right
  | val < root = Node root (insertIntoTree val left) right
  | val > root = Node root left (insertIntoTree val right)