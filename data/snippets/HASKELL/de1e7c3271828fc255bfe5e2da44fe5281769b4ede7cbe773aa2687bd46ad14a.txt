data List a = EmptyList | Cons a (List a) -- define a custom list data type 
instance Functor List where -- implement the Functor typeclass for the custom list
  fmap _ EmptyList = EmptyList -- if list is empty, return empty list
  fmap f (Cons x xs) = Cons (f x) (fmap f xs) -- map the function to each element in the list and return a new list

doubleList :: List Int -> List Int -- function to double every element in a custom list of integers
doubleList list = fmap (\x -> 2 * x) list -- use the fmap function to map the lambda function to each element in the list

main :: IO () -- main function to print the results
main = do
  let myList = Cons 1 (Cons 2 (Cons 3 EmptyList)) -- create a custom list with 3 elements
  let doubledList = doubleList myList -- use the doubleList function to double each element in the list
  print doubledList -- print the result, which should be Cons 2 (Cons 4 (Cons 6 EmptyList))