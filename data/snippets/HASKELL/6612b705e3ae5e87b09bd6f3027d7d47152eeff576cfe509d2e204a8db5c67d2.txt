{-# LANGUAGE RankNTypes #-}

import Data.Monoid

newtype Endo a = Endo (a -> a)

instance Monoid (Endo a) where
  mempty = Endo id
  mappend (Endo f) (Endo g) = Endo (g . f)

foldMap :: Monoid m => (a -> m) -> [a] -> m
foldMap f as = appEndo (mconcat (map (fmap f) as)) mempty

foo :: Monoid m => (a -> m) -> [a] -> m
-- Fold in terms of foldMap
foo f as = getEndo $ foldMap (Endo . (mappend . f)) as

-- Usage:
-- foo (+1) [1,2,3] ===> 9
-- foo (*2) [1,2,3] ===> 16
-- foo show [1,2,3] ===> "123"