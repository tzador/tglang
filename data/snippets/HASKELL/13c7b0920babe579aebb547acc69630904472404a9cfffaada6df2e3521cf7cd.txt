{-# LANGUAGE MultiParamTypeClasses, TypeFamilies, FlexibleInstances #-}
 
-- Defining a class for 2D points
class TwoDimPointClass p where
 
    -- type for the data type representing a 2D point
    type TwoDimPoint p :: *
 
    -- function for creating a 2D point from x and y coordinates
    createPoint :: Double -> Double -> p
 
    -- function for getting the x coordinate of a 2D point
    getX :: p -> Double
 
    -- function for getting the y coordinate of a 2D point
    getY :: p -> Double
 
    -- function for translating a 2D point by a given vector
    translate :: p -> (Double, Double) -> p
 
    -- function for rotating a 2D point around the origin
    rotate :: p -> Double -> p
    
instance TwoDimPointClass (Double, Double) where
    type TwoDimPoint (Double, Double) = (Double, Double)
    createPoint x y = (x, y)
    getX (x, _) = x
    getY (_, y) = y
    translate (x, y) (dx, dy) = (x+dx, y+dy)
    rotate (x, y) theta = (x*cos theta - y*sin theta, x*sin theta + y*cos theta)
    
instance TwoDimPointClass (Point Double) where
    type TwoDimPoint (Point Double) = Point Double
    createPoint x y = Point x y
    getX (Point x _) = x
    getY (Point _ y) = y
    translate (Point x y) (dx, dy) = Point (x+dx) (y+dy)
    rotate (Point x y) theta = Point (x*cos theta - y*sin theta) (x*sin theta + y*cos theta)
 
-- data type for representing a point with x and y coordinates
data Point a = Point { pointX :: a, pointY :: a }
 
-- function for getting the x coordinate of a Point
getX :: Point a -> a
getX (Point x _) = x
 
-- function for getting the y coordinate of a Point
getY :: Point a -> a
getY (Point _ y) = y
 
-- Creating a 2D point using the createPoint function
myPoint :: (Double, Double)
myPoint = createPoint 3.0 5.0
 
-- Translating the point by a given vector
translatedPoint :: (Double, Double)
translatedPoint = translate myPoint (2.0, 3.0)
 
-- Rotating the point around the origin
rotatedPoint :: (Double, Double)
rotatedPoint = rotate myPoint (pi/2)
 
-- Creating a Point using the Point data type
myPoint2 :: Point Double
myPoint2 = Point 3.0 5.0
 
-- Translating the Point using the translate function
translatedPoint2 :: Point Double
translatedPoint2 = translate myPoint2 (2.0, 3.0)
 
-- Rotating the Point using the rotate function
rotatedPoint2 :: Point Double
rotatedPoint2 = rotate myPoint2 (pi/2)