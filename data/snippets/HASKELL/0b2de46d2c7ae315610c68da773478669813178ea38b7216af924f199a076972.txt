-- Data type declaration for a binary tree
data Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show)

-- Function to insert a new element into a binary tree
insert :: Ord a => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty
insert x (Node value left right) 
    | x < value = Node value (insert x left) right
    | x > value = Node value left (insert x right)
    | otherwise = Node value left right -- handles case where x is already in tree, does not add duplicate

-- Function to find the minimum value in a binary tree
minValue :: Tree a -> Maybe a
minValue Empty = Nothing
minValue (Node value Empty _) = Just value
minValue (Node _ left _) = minValue left

-- Example usage
myTree :: Tree Int
myTree = Node 5 (Node 2 (Node 1 Empty Empty) (Node 3 Empty Empty)) (Node 7 Empty (Node 9 Empty Empty))
-- Output: Node 5 (Node 2 (Node 1 Empty Empty) (Node 3 Empty Empty)) (Node 7 Empty (Node 9 Empty Empty))

insert 4 myTree 
-- Output: Node 5 (Node 2 (Node 1 Empty Empty) (Node 3 (Node 4 Empty Empty) Empty)) (Node 7 Empty (Node 9 Empty Empty))

minValue myTree 
-- Output: Just 1