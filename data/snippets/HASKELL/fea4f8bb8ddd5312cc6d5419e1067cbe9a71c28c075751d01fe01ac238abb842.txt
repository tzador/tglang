{-# LANGUAGE GADTs #-}
{-# LANGUAGE Arrows #-}

-- | This function takes in an input list and uses recursion to reverse the order of the elements.

reverseList :: [a] -> [a]
reverseList [] = []
reverseList (x:xs) = reverseList xs ++ [x]

-- | This data type represents a binary tree with either one or two branches.

data BinaryTree a where
  Node :: a -> BinaryTree a -> BinaryTree a -> BinaryTree a
  Leaf :: BinaryTree a

-- | This function takes in a binary tree and uses pattern matching to
-- count the number of nodes in the tree.

countNodes :: BinaryTree a -> Integer
countNodes Leaf = 0
countNodes (Node val left right) = 1 + countNodes left + countNodes right

-- | This is an example of a function that uses the `case` expression
-- to check different patterns and handle them accordingly.

checkNumber :: Int -> String
checkNumber n = case n of
  0 -> "Zero"
  1 -> "One"
  2 -> "Two"
  _ -> "Not Zero, One or Two"