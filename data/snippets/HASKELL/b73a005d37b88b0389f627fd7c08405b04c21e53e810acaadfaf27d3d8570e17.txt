-- Function to calculate the nth Fibonacci number using a recursive function
fibonacci :: Int -> Int
fibonacci 0 = 0  -- Base case for n = 0
fibonacci 1 = 1  -- Base case for n = 1
fibonacci n = fibonacci (n-1) + fibonacci (n-2)  -- Recursive case to calculate nth Fibonacci number

-- Function to generate a list of Fibonacci numbers up to n
fibList :: Int -> [Int]
fibList n = map fibonacci [0..n]

-- Function to filter out even numbers from a list
filterEven :: [Int] -> [Int]
filterEven [] = []  -- Base case for empty list
filterEven (x:xs) | x `mod` 2 == 0 = x : filterEven xs  -- If current number is even, add it to list
                   | otherwise = filterEven xs  -- If current number is odd, skip it

-- Function to sum all numbers in a list
sumList :: [Int] -> Int
sumList [] = 0  -- Base case for empty list
sumList (x:xs) = x + sumList xs  -- Recursive case to sum all numbers in list

-- Calculate the sum of even Fibonacci numbers up to n
sumEvenFib :: Int -> Int
sumEvenFib n = sumList $ filterEven $ fibList n  -- Compose filterEven and fibList functions to get sum of even Fibonacci numbers up to n

-- Print the sum of even Fibonacci numbers up to n
main :: IO ()
main = do
  let n = 10  -- Change this value to calculate the sum for a different n
  let result = sumEvenFib n
  putStrLn $ "The sum of even Fibonacci numbers up to " ++ show n ++ " is " ++ show result