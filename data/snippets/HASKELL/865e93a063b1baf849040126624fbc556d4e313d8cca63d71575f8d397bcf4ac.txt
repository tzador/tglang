{-# LANGUAGE GADTs, EmptyDataDecls, EmptyCase, KindSignatures #-}
{-# OPTIONS_GHC -Wincomplete-patterns #-}
 
-- creating a custom type representing an expression
data Expr :: Type -> Type where
    Lit :: a -> Expr a
    Add :: Num a => Expr a -> Expr a -> Expr a
    Mul :: Num a => Expr a -> Expr a -> Expr a
    Neg :: Expr a -> Expr a
    And :: Expr Bool -> Expr Bool -> Expr Bool
    Or :: Expr Bool -> Expr Bool -> Expr Bool
    Not :: Expr Bool -> Expr Bool
    If :: Expr Bool -> Expr a -> Expr a -> Expr a
    Empty :: Expr a
 
-- defining an evaluation function for our custom type
eval :: Expr a -> a
eval (Lit a) = a
eval (Add e1 e2) = eval e1 + eval e2
eval (Mul e1 e2) = eval e1 * eval e2
eval (Neg e) = negate $ eval e
eval (And e1 e2) = eval e1 && eval e2
eval (Or e1 e2) = eval e1 || eval e2
eval (Not e) = not $ eval e
eval (If c e1 e2) = if eval c then eval e1 else eval e2
eval Empty = error "Empty expression"
 
-- example expressions
expr1 :: Expr Int
expr1 = Add (Lit 5) (Mul (Lit 2) (Lit 3))
 
expr2 :: Expr Bool
expr2 = And (Or (Lit True) (Lit False)) (Not (Lit False))
 
-- evaluating expressions
main :: IO ()
main = do
    print $ eval expr1 -- output: 11
    print $ eval expr2 -- output: True