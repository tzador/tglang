{-# LANGUAGE FlexibleInstances, UndecidableInstances #-}       -- enables the use of typeclasses

data List a = Empty | Cons a (List a)       -- defines a list datatype
            deriving (Show)                 -- allows for list to be printed

instance Monoid (List a) where               -- creates a Monoid instance for the List datatype
    mempty = Empty                          -- defines the identity element
    mappend Empty ys = ys                   -- defines how Empty and a list concatenate
    mappend (Cons x xs) ys = Cons x $ mappend xs ys
                                            -- defines how two non-empty lists concatenate

instance Functor List where                  -- creates a Functor instance for the List datatype
    fmap f Empty = Empty                    -- maps over an Empty list
    fmap f (Cons x xs) = Cons (f x) (fmap f xs)
                                            -- maps over a non-empty list

fold :: (b -> a -> b) -> b -> List a -> b     -- creates a fold function for the List datatype
fold f acc Empty = acc                      -- base case for an Empty list
fold f acc (Cons x xs) = f (fold f acc xs) x 
                                            -- recursively applies function to each element in list