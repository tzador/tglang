-- A function that takes in two lists and returns the sum of the first element of each list
sumFirst :: [Int] -> [Int] -> Int
sumFirst [] _ = 0 -- Base case: if the first list is empty, return 0
sumFirst _ [] = 0 -- Base case: if the second list is empty, return 0
sumFirst (x:xs) (y:ys) = x + y + sumFirst xs ys -- Recursive case: add the first element of each list and recursively call the function with the remaining elements

-- Example usage:
-- sumFirst [1,2,3] [4,5,6] should return 5
-- sumFirst [1,2,3] [4,5,6,7] should return 5