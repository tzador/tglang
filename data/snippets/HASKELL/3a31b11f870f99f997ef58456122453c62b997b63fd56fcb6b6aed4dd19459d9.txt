-- The following code creates a function that calculates the area
-- of a circle with the given radius and pi value.

circleArea :: Double -> Double -> Double
circleArea radius piValue =
    piValue * (radius ^ 2)

-- This code uses recursion to determine if a list is a palindrome
-- by comparing the first and last element and then excluding them
-- until there is only one or no element left.

isPalindrome :: Eq a => [a] -> Bool
isPalindrome [] = True
isPalindrome [_] = True
isPalindrome (x:xs)
    | x == last xs = isPalindrome $ init xs
    | otherwise = False

-- This code implements the QuickSort algorithm to sort a list
-- of integers in ascending order.

quickSort :: Ord a => [a] -> [a]
quickSort [] = []
quickSort (x:xs) = 
    let smaller = [a | a <- xs, a <= x]
        bigger = [a | a <- xs, a > x]
    in quickSort smaller ++ [x] ++ quickSort bigger

-- This code creates a custom data type called Student, with
-- a constructor that takes in a name and a list of grades.

data Student = Student String [Int]

-- A function to calculate the average grade of a student.
-- If the list is empty, it returns 0.

averageGrade :: Student -> Double
averageGrade (Student _ []) = 0
averageGrade (Student _ grades) = 
    fromIntegral (sum grades) / fromIntegral (length grades)