--This code snippet creates a function that calculates the length of a string.

strlen :: String -> Int   --defines a function strlen that takes in a string and returns an integer
strlen "" = 0             --base case for an empty string, returns 0
strlen (c:cs) = 1 + strlen cs --recursive case, adds 1 to the length and calls the function again with the rest of the string

--This code snippet creates a function that reverses the elements in a list.

reverse :: [a] -> [a]     --defines a function reverse that takes in a list and returns a list
reverse [] = []           --base case for an empty list, returns an empty list
reverse (x:xs) = reverse xs ++ [x]   --recursive case, calls the function again with the rest of the list and appends the first element to the end

--This code snippet creates a function that checks if a given number is prime.

isPrime :: Integer -> Bool       --defines a function isPrime that takes in an integer and returns a boolean
isPrime n = null [x | x <- [2..n-1], n `mod` x == 0]  --checks if there are any factors of n between 2 and n-1, if there are, returns false, otherwise returns true