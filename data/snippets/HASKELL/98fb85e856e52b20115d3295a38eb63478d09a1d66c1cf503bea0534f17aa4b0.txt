{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveFunctor #-}

-- | The binary tree data type
data BinaryTree a
    = Empty
    | Node (BinaryTree a) a (BinaryTree a)
    deriving (Show, Eq, Functor, Foldable)

-- | Map a function over a binary tree
mapTree :: (a -> b) -> BinaryTree a -> BinaryTree b
mapTree f (Node left a right) =
    Node (mapTree f left) (f a) (mapTree f right)
mapTree _ Empty =
    Empty

-- | Fold a binary tree using a function and an initial accumulator
foldTree :: (a -> b -> b -> b) -> b -> BinaryTree a -> b
foldTree _ z Empty = z
foldTree f z (Node left a right) =
    foldTree f (f a (foldTree f z left) (foldTree f z right)) 

-- | Get the size of a binary tree
size :: BinaryTree a -> Int
size = foldTree (\_ left right -> 1 + left + right) 0

-- | Get the maximum value in a binary tree
maximum :: Ord a => BinaryTree a -> Maybe a
maximum = foldTree (\a left right -> Just $ maybe a (max a) left `max` right) Nothing

-- | Get the height of a binary tree
height :: BinaryTree a -> Int
height = foldTree (\_ left right -> 1 + max left right) 0