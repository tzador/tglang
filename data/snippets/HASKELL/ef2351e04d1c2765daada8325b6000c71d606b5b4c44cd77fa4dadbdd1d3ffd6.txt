-- Define a function that recursively calculates the factorial of a given number
factorial :: Integer -> Integer
factorial 0 = 1 -- Base case: factorial of 0 is 1
factorial n = n * factorial (n - 1) -- Recursive case: multiply n with the factorial of n-1

-- Define a function that calculates the nth number in the Fibonacci sequence
fibonacci :: Int -> Int
fibonacci 0 = 0 -- Base case: the first Fibonacci number is 0
fibonacci 1 = 1 -- Base case: the second Fibonacci number is 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2) -- Recursive case: sum the previous two Fibonacci numbers

-- Define a data type for a binary tree with integer values
data BinaryTree = EmptyTree -- Represents an empty binary tree
                 | Node Int BinaryTree BinaryTree -- Represents a node with an integer value and two branches
                 
-- Define a function that inserts a new value into a binary tree in ascending order
insert :: Int -> BinaryTree -> BinaryTree
insert n EmptyTree = Node n EmptyTree EmptyTree -- If the tree is empty, create a new node with the given value
insert n (Node v left right) 
    | n < v = Node v (insert n left) right -- If the value is less than the current node, insert it in the left branch
    | otherwise = Node v left (insert n right) -- Else, insert it in the right branch 
    -- This function uses pattern matching and guards to handle different cases and recursively insert the value

-- Define a function that converts a binary tree into a list using an in-order traversal
inorderTraversal :: BinaryTree -> [Int]
inorderTraversal EmptyTree = [] -- If the tree is empty, return an empty list
inorderTraversal (Node v left right) = inorderTraversal left ++ [v] ++ inorderTraversal right
    -- This function recursively traverses the left subtree, adds the current value to the list, 
    -- and then recursively traverses the right subtree to create the final ordered list.