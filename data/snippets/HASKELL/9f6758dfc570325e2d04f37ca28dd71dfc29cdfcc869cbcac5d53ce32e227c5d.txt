data Coin = Heads
          | Tails

type Hand = (Coin, Coin, Coin)

shuffle :: Hand -> Hand
shuffle (c1, c2, c3) = (c2, c3, c1)

type Deck = [Hand]

removeDuplicates :: Deck -> Deck
removeDuplicates [] = []
removeDuplicates (h:t)
  | h `elem` t = removeDuplicates t
  | otherwise = h : removeDuplicates t

generateDeck :: Int -> Deck
generateDeck 0 = []
generateDeck n = let deck = generateDeck (n - 1)
                 in removeDuplicates (map shuffle deck ++ [(Heads, Tails, Tails)])