-- This code uses recursion and guards to generate a list of all the prime numbers between two given numbers

-- Function to check if a number is prime
isPrime :: Int -> Bool
isPrime n 
    | n == 1 = False -- 1 is not a prime number
    | n == 2 = True -- 2 is the only even prime number
    | n `mod` 2 == 0 = False -- all other even numbers are not prime
    | otherwise =
        let factors = [x | x <- [3,5..floor $ sqrt (fromIntegral n)], n `mod` x == 0] -- generate a list of odd factors using list comprehension
        in null factors -- check if there are any factors besides 1 and the number itself

-- Recursive function to generate a list of prime numbers between a given range
generatePrimes :: Int -> Int -> [Int]
generatePrimes start end
    | start > end = [] -- base case: start number is greater than end number
    | start == end = [start] -- base case: start number is equal to end number
    | otherwise =
        let primes = [x | x <- [start..end], isPrime x] -- generate a list of numbers between start and end and filter out non-prime numbers
        in head primes : generatePrimes (start + 1) (end) -- add the first prime number to the list and recurse with start number incremented by 1

-- Example output:
-- generatePrimes 1 50 --> [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]