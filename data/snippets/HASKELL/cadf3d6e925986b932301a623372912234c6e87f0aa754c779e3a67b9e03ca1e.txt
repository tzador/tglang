{-# LANGUAGE MultiParamTypeClasses, FunctionalDependencies, FlexibleInstances #-}
import Data.Char  (chr, ord)
infixr 5 <^>
class Haxr a b | a -> b where
  (<^>) :: a -> a -> b
instance Haxr Int Int where
  (<^>) = xor
instance Haxr a b => Haxr (IO a) (IO b) where
  u <^> v = do
    x <- u
    y <- v
    return (x <^> y)
(><) :: a -> b -> (a, b)
a >< b = (a, b)
xor :: Int -> Int -> Int
xor = (+)
 
-- Example usage
main :: IO ()
main = do
  let str1 = "Hello, World!"
  let str2 = "HASKELL"
  let str3 = (ord 'A' <^> ord 'a') >< (ord 'x' <^> ord 'x') >< (ord 'P' <^> ord 'y')
  print str1
  print str2
  print str3
  
  -- Output:
  -- "Hello, World!"
  -- "HASKELL"
  -- (176, 120)