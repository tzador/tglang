-- define a data type for a binary tree
data Tree a = EmptyTree | Node a (Tree a) (Tree a)

-- function for inserting a new element into a binary tree
insert :: (Ord a) => a -> Tree a -> Tree a
insert x EmptyTree = Node x EmptyTree EmptyTree -- if tree is empty, create a new node with the element
insert x (Node a left right) -- if tree is not empty, compare the element with the root value
    | x == a = Node a left right -- if element is equal to root, do not insert it again and return the tree as is
    | x < a = Node a (insert x left) right -- if element is less than root, insert into left subtree
    | otherwise = Node a left (insert x right) -- if element is greater than root, insert into right subtree

-- function for creating a binary tree from a list of elements
createTree :: (Ord a) => [a] -> Tree a
createTree xs = foldr insert EmptyTree xs -- use the insert function to insert each element into the tree, starting with an empty tree

-- function for performing a depth-first search on a binary tree
-- returns a list of values in a depth-first order
dfs :: Tree a -> [a]
dfs EmptyTree = [] -- if tree is empty, return empty list
dfs (Node a left right) = [a] ++ dfs left ++ dfs right -- recursively traverse left and right subtrees, adding root value to the list

-- example usage
exampleTree = createTree [5,3,2,4,7,6,8]
dfs exampleTree -- output: [5,3,2,4,7,6,8]