{-# LANGUAGE DeriveDataTypeable #-}       -- enables Data and Typeable deriving
{-# LANGUAGE DeriveGeneric #-}            -- enables Generic deriving
{-# LANGUAGE FlexibleContexts #-}         -- enables flexible contexts
{-# LANGUAGE MultiParamTypeClasses #-}    -- enables multi-parameter type classes

import Data.Typeable                      -- imports Typeable module
import Data.Data                          -- imports Data module
import GHC.Generics                       -- imports Generics module

data Shape a b = Rectangle a b            -- defines a Shape data type with two type parameters a and b 
               | Circle a                 -- with two constructors Rectangle and Circle
  deriving (Data, Typeable, Generic)      -- enables deriving instances for Data, Typeable, and Generic

class Area a where                        -- defines a type class Area parametrized by a
  getArea :: a -> Double                  -- with a getArea function that takes a and returns a Double

instance (Num a) => Area (Shape a a) where  -- instance of Area type class for Shape type with two equal type parameters
  getArea (Rectangle w h) = w * h          -- defines getArea function for Rectangle
  getArea (Circle r) = pi * r * r          -- defines getArea function for Circle

main :: IO ()                              -- main function, IO takes no parameters and returns no values
main = do
  let rect = Rectangle 5 10                -- define a rectangle with width = 5 and height = 10
  let circle = Circle 7                    -- define a circle with radius = 7
  putStrLn $ "Area of rectangle: " ++ show (getArea rect)  -- print the area of rectangle using show to convert it to String
  putStrLn $ "Area of circle: " ++ show (getArea circle)    -- print the area of circle using show to convert it to String