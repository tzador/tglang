{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}

module TypeFunctions where

-- Type-level addition
type family Add (m :: Nat) (n :: Nat) :: Nat where
  Add Zero n = n
  Add (Succ m) n = Succ (Add m n)

-- Type-level multiplication
type family Mul (m :: Nat) (n :: Nat) :: Nat where
  Mul Zero n = Zero
  Mul (Succ m) n = Add n (Mul m n)

-- Type-level exponentiation
type family Exp (m :: Nat) (n :: Nat) :: Nat where
  Exp m Zero = Succ Zero
  Exp m (Succ n) = Mul m (Exp m n)

-- Type-level natural numbers
data Nat = Zero | Succ Nat

-- Type-level list
data List a = Nil | Cons a (List a)

-- Type-level map
type family Map f xs where
  Map f Nil = Nil
  Map f (Cons x xs) = Cons (f x) (Map f xs)

main :: IO ()
main = do
  let nums = Cons (Succ (Succ (Succ Zero))) (Cons (Succ (Succ Zero)) (Cons Zero Nil)) :: List Nat
  let squares = Map (Exp (Succ (Succ Zero))) nums :: List Nat -- squares = [9,4,1]
  print squares