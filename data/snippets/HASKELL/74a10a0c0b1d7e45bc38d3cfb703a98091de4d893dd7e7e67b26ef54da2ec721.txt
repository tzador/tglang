{-# LANGUAGE TypeOperators #-}

import Data.Map (Map)
import qualified Data.Map as Map

import Data.Kind (Type)

-- | A type-level list.
--
-- This type is implemented as a type-level binary operator, so it can be
-- used infix in types or type signatures.
type hlist = (:) Type

-- | A type-level map from types to lists of types.
--
-- This type is implemented as a type-level binary operator, so it can be
-- used infix in types or type signatures.
type TypeMap = Map Type hlist

-- | Get the list of types associated with a given key type in the 'TypeMap'.
type family Lookup (key :: Type) (map :: TypeMap) :: hlist where
  Lookup key (Map key x) = x

-- | Insert a new key-value pair into the 'TypeMap'.
type family Insert (key :: Type) (val :: hlist) (map :: TypeMap) :: TypeMap where
  Insert key val (Map key x) = Map key val
  Insert key val (Map k x) = Map k x `Map.union` (Map key val)

-- | Convert a list of types into a 'TypeMap'.
type family ToMap (list :: hlist) :: TypeMap where
  ToMap '[] = Map.Empty
  ToMap (x ': xs) = Insert x xs (ToMap xs)