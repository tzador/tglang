-- This function calculates the factorial of a given number
factorial :: Integer -> Integer
factorial n
   | n < 0 = error "Invalid input! Number must be non-negative."
   | n == 0 = 1
   | otherwise = n * factorial (n - 1)
   
-- This function implements the bubble sort algorithm to sort a list
bubbleSort :: (Ord a) => [a] -> [a]
bubbleSort [] = []
bubbleSort [x] = [x]
bubbleSort list =
   let swapped = swap list []
   in bubbleSort (init swapped) ++ [last swapped]
       where
           swap :: (Ord a) => [a] -> [a] -> [a]
           swap [] temp = temp
           swap [x] temp = temp ++ [x]
           swap (x:y:ys) temp
               | x > y = swap (x:ys) (temp ++ [y])
               | otherwise = swap (y:ys) (temp ++ [x])
               
-- This function calculates the Fibonacci sequence up to a given number of terms
fibonacci :: Int -> [Int]
fibonacci n = take n (0 : 1 : zipWith (+) fibonacciList (tail fibonacciList))
   where fibonacciList = fibonacci 1
   
-- This function checks if a given list is a palindrome
isPalindrome :: (Eq a) => [a] -> Bool
isPalindrome list = list == reverse list

-- This function implements the quicksort algorithm to sort a list
quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) = (quicksort lesser) ++ [x] ++ (quicksort greater)
   where
       lesser = filter (<=x) xs
       greater = filter (>x) xs