-- | Abstract data type for a 2D point
data Point = Point {x :: Float, y :: Float}

-- | Function to calculate the distance between two points
distance :: Point -> Point -> Float
distance p1 p2 = sqrt $ (x p2 - x p1) ^ 2 + (y p2 - y p1) ^ 2

-- | Function to calculate the slope between two points
slope :: Point -> Point -> Float
slope p1 p2 = (y p2 - y p1) / (x p2 - x p1)

-- | Function to check if two points are equal
instance Eq Point where
    (==) (Point x1 y1) (Point x2 y2) = x1 == x2 && y1 == y2

-- | Function to check if a point is on a given line
isOnLine :: Point -> (Point, Point) -> Bool
isOnLine p (p1, p2) = slope p1 p2 == slope p1 p && distance p1 p == distance p1 p2

-- | Function to get the midpoint between two points
midpoint :: Point -> Point -> Point
midpoint p1 p2 = Point ((x p1 + x p2) / 2) ((y p1 + y p2) / 2)

-- | Function to calculate the area of a triangle formed by three points
area :: Point -> Point -> Point -> Float
area p1 p2 p3 = abs $ x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)
    where x1 = x p1
          x2 = x p2
          x3 = x p3
          y1 = y p1
          y2 = y p2
          y3 = y p3

-- | Function to calculate the perimeter of a triangle formed by three points
perimeter :: Point -> Point -> Point -> Float
perimeter p1 p2 p3 = distance p1 p2 + distance p2 p3 + distance p3 p1