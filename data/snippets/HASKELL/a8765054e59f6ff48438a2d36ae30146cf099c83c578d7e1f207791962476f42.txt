-- This code snippet uses recursion and pattern matching to generate a list of
-- all possible permutations of a given list.

-- Define a function to generate all permutations of a list
perms :: [a] -> [[a]]
-- Declare an empty list as the base case
perms [] = [[]]
-- Define the recursive case
perms (x:xs) = concatMap (insertAll x) (perms xs)
-- Define a helper function to insert an element at all possible positions in a list
insertAll :: a -> [a] -> [[a]]
-- Declare an empty list as the base case
insertAll x [] = [[x]]
-- Define the recursive case
insertAll x (y:ys) = (x : y : ys) : map (y:) (insertAll x ys)

-- Example usage:
-- Input list: [1,2,3]
-- Output: [[1,2,3],[2,1,3],[2,3,1],[1,3,2],[3,1,2],[3,2,1]]