-- This code snippet implements a quicksort algorithm in Haskell
  -- Define the function 'quicksort' that takes in a list of elements of type 'a' and returns a sorted list of the same type
quicksort :: (Ord a) => [a] -> [a]
-- Base case: If the list is empty, return an empty list
quicksort [] = []
-- Recursive case: Perform quicksort on the list by choosing the first element as the pivot
-- and partitioning the list into two sublists based on elements smaller and larger than the pivot
quicksort (x:xs) =
  let smallerSorted = quicksort [a | a <- xs, a <= x]
      biggerSorted = quicksort [a | a <- xs, a > x]
  in smallerSorted ++ [x] ++ biggerSorted

-- Example usage:
-- quicksort [4,2,1,6,3]
-- Output : [1,2,3,4,6]