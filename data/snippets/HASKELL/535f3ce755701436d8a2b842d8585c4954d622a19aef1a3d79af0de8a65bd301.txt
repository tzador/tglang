-- This is a function that calculates the factorial of a number using recursion
-- It takes in an Integer as input and returns an Integer as output
factorial :: Integer -> Integer
factorial 0 = 1 -- base case, 0 factorial is 1
factorial x = x * factorial (x-1) -- recursive case, multiply x with (x-1) factorial

-- This is a function that calculates the nth element in the Fibonacci sequence using recursion
-- It takes in an Integer as input and returns an Integer as output
fibonacci :: Integer -> Integer
fibonacci 0 = 0 -- base case, 0th element is 0
fibonacci 1 = 1 -- base case, 1st element is 1
fibonacci n = fibonacci (n-1) + fibonacci (n-2) -- recursive case, add the previous two elements in the sequence

-- This is a list comprehension that generates a list of all possible combinations of two colors
-- It takes in two lists of colors and returns a list of all combinations
combinations :: [String] -> [String] -> [String]
combinations list1 list2 = [color1 ++ " and " ++ color2 | color1 <- list1, color2 <- list2]

-- This is a higher-order function that checks if a given element exists in a list using recursion
-- It takes in a list and a function that checks for equality and returns a boolean value
elementExists :: (a -> Bool) -> [a] -> Bool
elementExists _ [] = False -- base case, empty list means element does not exist
elementExists func (x:xs) -- recursive case
    | func x = True -- element found, return True
    | otherwise = elementExists func xs -- call function again with rest of list

-- Example usage:
-- factorial 5 		-- 120
-- fibonacci 10 	-- 55
-- combinations ["red", "green"] ["blue", "yellow"] 		-- ["red and blue", "red and yellow", "green and blue", "green and yellow"]
-- elementExists (>10) [5, 13, 8, 21] 		-- True
-- elementExists (=='z') "Hello World" 		-- False