data Expr = Const Integer | Var String |  Expr :+: Expr | Expr :-: Expr | Expr :*: Expr

eval :: Expr -> Integer
eval (Const x) = x
eval (Var x) = 0 -- not used
eval (e1 :+: e2) = eval e1 + eval e2
eval (e1 :-: e2) = eval e1 - eval e2
eval (e1 :*: e2) = eval e1 * eval e2

showExpr :: Expr -> String
showExpr (Const x) = show x
showExpr (Var x) = x
showExpr (e1 :+: e2) = showExpr e1 ++ " + " ++ showExpr e2
showExpr (e1 :-: e2) = showExpr e1 ++ " - " ++ showExpr e2
showExpr (e1 :*: e2) = showExpr e1 ++ " * " ++ showExpr e2

-- Example usage:
-- eval (Const 5 :+: Const 10) -- returns 15
-- showExpr (Var "x" :*: (Const 3 :+: Const 5)) -- returns "x * (3 + 5)"

-- Expected output:
--