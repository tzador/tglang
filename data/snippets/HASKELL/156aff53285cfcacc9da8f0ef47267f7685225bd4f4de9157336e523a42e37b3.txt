-- Define a custom data type called "Person"
data Person = Person
  { firstName :: String -- first name of person
  , lastName  :: String -- last name of person
  , age       :: Int    -- age of person
  , address   :: String -- address of person
  , phoneNumber :: String -- phone number of person
  } deriving (Show) -- make Person type an instance of "Show" so it can be printed

-- Define a function to create a new Person given all the information
createPerson :: String -> String -> Int -> String -> String -> Person
createPerson fName lName age addr phone = Person { firstName = fName
                                                , lastName = lName
                                                , age = age
                                                , address = addr
                                                , phoneNumber = phone
                                                }

-- Create a list of Person instances with different information
people :: [Person]
people = [ createPerson "John" "Smith" 25 "123 Main Street" "555-555-5555"
         , createPerson "Jane" "Doe" 32 "456 First Avenue" "111-111-1111"
         , createPerson "Bob" "Johnson" 40 "789 Fifth Street" "999-999-9999"
         ]

-- Define a function to filter the list of people by age
filterByAge :: [Person] -> Int -> [Person]
filterByAge persons age = filter (\p -> age == Person.age p) persons

-- Use function to filter people list by age 25 and print the results
main :: IO ()
main = do
  putStrLn "People aged 25:"
  let filteredPeople = filterByAge people 25 -- filter list of people by age 25
  putStrLn $ show filteredPeople -- print results