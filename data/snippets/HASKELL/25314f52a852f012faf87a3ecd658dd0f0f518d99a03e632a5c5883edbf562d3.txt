-- Imports the Data.List module
import Data.List

-- Creates a function named "mergesort" that takes in a list of integers
mergesort :: [Int] -> [Int]
-- Checks if the list is empty, if so, returns the empty list
mergesort [] = []
-- Checks if the list only has one element, if so, returns that element
mergesort [x] = [x]
-- Calls the helper function "merge" which takes two lists as parameters
mergesort xs = merge (mergesort (firstHalf xs)) (mergesort (secondHalf xs))

-- Creates a function named "merge" that takes in two lists of integers
merge :: [Int] -> [Int] -> [Int]
-- Checks if either list is empty, if so, just returns the other list
merge [] x = x
merge x [] = x
-- Compares the first elements of both lists and combines them in ascending order
merge (x:xs) (y:ys)
    | x < y     = x:merge xs (y:ys)
    | otherwise = y:merge (x:xs) ys

-- Helper function to split a list into two halves
firstHalf :: [Int] -> [Int]
firstHalf xs = take ((length xs) `div` 2) xs

secondHalf :: [Int] -> [Int]
secondHalf xs = drop ((length xs) `div` 2) xs


-- Example input and output
*Main> mergesort [5,3,1,4,2]
[1,2,3,4,5]