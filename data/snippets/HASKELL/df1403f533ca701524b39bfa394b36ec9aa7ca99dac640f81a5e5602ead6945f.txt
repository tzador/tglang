{-# LANGUAGE RankNTypes, TypeApplications, LambdaCase #-}

import Data.Functor.Const (Const(..))
import Data.Functor.Contravariant (Contravariant(..), Predicate(..))

-- | Typeclass for types that can be made into lenses.
class Lensy a where
  change :: Functor f => (a -> f a) -> a -> f a

-- | Lens whose focus is its argument.
self :: Functor f => (a -> f b) -> a -> f a
self f = fmap change . f

-- | Lens for a constant value.
the :: Functor f => (a -> f b) -> Const a x -> f (Const a x)
the f (Const a) = fmap Const $ f a

-- | Lens for reading and writing to a tuple's first element.
fstL :: Functor f => (a -> f b) -> (a, c) -> f (b, c)
fstL f (a, c) = fmap (\b -> (b, c)) $ f a

-- Description: This code snippet defines a typeclass for types that can be used as lenses, then includes lenses for self, the rest of the tuple, and the first element of a tuple.