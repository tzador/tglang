-- create a datatype for a binary tree
data BinaryTree a = EmptyTree | Node a (BinaryTree a) (BinaryTree a)

-- create a function that inserts an element into a binary tree
insert :: Ord a => a -> BinaryTree a -> BinaryTree a

-- if the binary tree is empty, create a new node
insert x EmptyTree = Node x EmptyTree EmptyTree

-- if the element being inserted is less than the root node, insert it into the left subtree
insert x (Node root left right)
    | x < root = Node root (insert x left) right

-- if the element being inserted is greater than the root node, insert it into the right subtree
    | x > root = Node root left (insert x right)

-- if the element being inserted is already in the tree, return the tree unchanged
    | otherwise = Node root left right

-- create a function that checks if an element is in a binary tree
contains :: Ord a => a -> BinaryTree a -> Bool
contains _ EmptyTree = False

-- if the element being searched for is equal to the root node, return True
contains x (Node root left right)
    | x == root = True

-- if the element being searched for is less than the root node, search the left subtree
    | x < root = contains x left

-- if the element being searched for is greater than the root node, search the right subtree
    | otherwise = contains x right

-- create a function that deletes an element from a binary tree
delete :: Ord a => a -> BinaryTree a -> BinaryTree a
delete _ EmptyTree = EmptyTree

-- if the element being deleted is less than the root node, delete it from the left subtree
delete x (Node root left right)
    | x < root = Node root (delete x left) right

-- if the element being deleted is greater than the root node, delete it from the right subtree
    | x > root = Node root left (delete x right)

-- if the element being deleted is equal to the root node, delete it and rearrange the tree
    | x == root = case (left, right) of
        (EmptyTree, EmptyTree) -> EmptyTree -- if the root node has no children
        (EmptyTree, right') -> right' -- if the root node has only a right child
        (left', EmptyTree) -> left' -- if the root node has only a left child
        _ -> let successor = findSuccessor right -- find the successor of the root node
                 -- replace the root node with the successor and delete the successor from the right subtree
                 in Node successor left (delete successor right)
        -- helper function to find the successor of a node (the smallest element in its right subtree)
        where findSuccessor (Node val EmptyTree _) = val
              findSuccessor (Node _ left' _) = findSuccessor left'

-- create a function that returns the size of a binary tree
size :: BinaryTree a -> Int
size EmptyTree = 0 -- an empty tree has a size of 0
size (Node root left right) = 1 + size left + size right -- the size is 1 + the size of the left subtree + the size of the right subtree

-- create a function that returns the maximum element in a binary tree
findMax :: Ord a => BinaryTree a -> a
findMax EmptyTree = error "Empty tree has no maximum element"
findMax (Node root left right)
    | right == EmptyTree = root -- if there is no right child, the root node is the maximum
    | otherwise = findMax right -- otherwise, the maximum is in the right subtree

-- create a function that returns the inorder traversal of a binary tree
inorder :: BinaryTree a -> [a]
inorder EmptyTree = []
inorder (Node root left right) = inorder left ++ [root] ++ inorder right -- traverse the left subtree, add the root node, then traverse the right subtree

-- create a function that returns the preorder traversal of a binary tree
preorder :: BinaryTree a -> [a]
preorder EmptyTree = []
preorder (Node root left right) = [root] ++ preorder left ++ preorder right -- add the root node, then traverse the left subtree, then traverse the right subtree

-- create a function that returns the postorder traversal of a binary tree
postorder :: BinaryTree a -> [a]
postorder EmptyTree = []
postorder (Node root left right) = postorder left ++ postorder right ++ [root] -- traverse the left subtree, then traverse the right subtree, then add the root node

-- create a function that converts a list to a binary tree
fromList :: Ord a => [a] -> BinaryTree a
fromList = foldr insert EmptyTree -- insert each element in the list into an empty tree to create a binary tree

-- create a function that converts a binary tree to a list
toList :: BinaryTree a -> [a]
toList = inorder -- use inorder traversal to convert the binary tree to a list