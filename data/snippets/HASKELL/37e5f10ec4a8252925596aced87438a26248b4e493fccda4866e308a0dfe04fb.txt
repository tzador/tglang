import Data.List

-- | Function that merges two sorted lists
-- | using a custom comparison function
sortMergeBy :: (a -> a -> Ordering) -> [a] -> [a] -> [a]
sortMergeBy _ xs [] = xs
sortMergeBy _ [] ys = ys
sortMergeBy cmp (x:xs) (y:ys) =
    case cmp x y of
        LT -> x : sortMergeBy cmp xs (y:ys)
        _ -> y : sortMergeBy cmp (x:xs) ys

-- | Function that recursively merges lists using the sortMergeBy function
-- | until only one sorted list remains
sortMerge :: (a -> a -> Ordering) -> [[a]] -> [a]
sortMerge _ [] = []
sortMerge cmp [xs] = xs
sortMerge cmp (xs:ys:xss) = sortMerge cmp (sortMergeBy cmp xs ys : xss)

-- | Example usage
main = do
    -- | Merge two lists sorted by length
    let lengths = sortMerge (comparing length) [[1,2,4,5,6], [2,3,5,8,9,10]]
    putStrLn $ "Merged by length: " ++ show lengths
    -- | Merge two lists sorted by first element
    let firstElem = sortMerge (comparing head) [[1,2,4,5,6], [2,3,5,8,9,10]]
    putStrLn $ "Merged by first element: " ++ show firstElem