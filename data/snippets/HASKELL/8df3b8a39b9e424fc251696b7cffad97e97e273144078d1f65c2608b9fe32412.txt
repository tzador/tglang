{-# OPTIONS_GHC -Wall #-}
{-# LANGUAGE UnicodeSyntax #-}
-- This is a comment
module Main (main) where

-- We start with some type declarations
type Point = (Int, Int)
type Vector = (Double, Double)
data Shape = Circle Point Double | Rectangle Point Point

-- Function with pattern matching
translate :: Vector -> Shape -> Shape
translate (dx, dy) (Circle (x, y) r) = Circle (x + floor dx, y + floor dy) r
translate (dx, dy) (Rectangle (x1, y1) (x2, y2)) = Rectangle (x1 + floor dx, y1 + floor dy) (x2 + floor dx, y2 + floor dy)

-- Function with guards
isCircle :: Shape -> Bool
isCircle (Circle _ _) = True
isCircle _ = False

-- Function composition
area :: Shape -> Double
area = calcArea . normalize

normalize :: Shape -> Shape
normalize (Rectangle (x1, y1) (x2, y2)) = Rectangle (min x1 x2, min y1 y2) (max x1 x2, max y1 y2)
normalize s = s

calcArea :: Shape -> Double
calcArea (Circle _ r) = pi * r * r
calcArea (Rectangle (x1, y1) (x2, y2)) = fromIntegral (abs (x2 - x1) * abs (y2 - y1))

-- List monad
combinations :: [a] -> Int -> [[a]]
combinations xs 0 = [[]]
combinations [] _ = []
combinations (x:xs) n = [x:c | c <- combinations xs (n-1)] ++ combinations xs n

-- Main function
main :: IO ()
main = do
  let list = ["A", "B", "C", "D"]
  print $ combinations list 2
  print $ area $ Circle (2, 2) 3