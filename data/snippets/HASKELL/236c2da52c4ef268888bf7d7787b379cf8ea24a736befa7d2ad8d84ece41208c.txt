data Tree a                              -- declares a data type Tree that takes a type parameter a
  = Leaf a                               -- constructor for a leaf node that takes a value of type a
  | Node (Tree a) a (Tree a)             -- constructor for a node that has two child trees and a value of type a
  deriving (Show, Eq)                    -- makes the Tree type an instance of Show and Eq

treeMap :: (a -> b) -> Tree a -> Tree b   -- declares a function treeMap that takes a function from type a to type b and a Tree of type a as parameters
treeMap f (Leaf x) = Leaf (f x)           -- pattern matches a Leaf and applies the function to the value
treeMap f (Node leftTree x rightTree)     -- pattern matches a Node and applies the function to the value
  = Node (treeMap f leftTree) (f x) (treeMap f rightTree)   -- recursively maps the function to the child trees and applies it to the value of the node

flattenTree :: Tree a -> [a]              -- declares a function flattenTree that takes a Tree of type a and returns a list of type a
flattenTree (Leaf x) = [x]                -- pattern matches a Leaf and returns a singleton list with the value
flattenTree (Node leftTree x rightTree)   -- pattern matches a Node and appends the flattened left and right child trees to the value
  = flattenTree leftTree ++ [x] ++ flattenTree rightTree     -- recursively flattens and appends the child trees

sumTree :: (Num a) => Tree a -> a         -- declares a function sumTree that takes a Tree of type a, where a is an instance of Num, and returns a value of type a
sumTree (Leaf x) = x                      -- pattern matches a Leaf and returns the value
sumTree (Node leftTree x rightTree)       -- pattern matches a Node and recursively sums the values of the child trees and the node value
  = sumTree leftTree + x + sumTree rightTree

exampleTree :: Tree Int                   -- declares an exampleTree of type Tree Int
exampleTree = Node (Node (Leaf 1) 2 (Leaf 3)) 4 (Node (Leaf 5) 6 (Leaf 7))
                                          -- constructs a tree with 4 nodes, each containing either a Leaf or a subtree
mappedTree :: Tree Int                    -- declares a mappedTree of type Tree Int 
mappedTree = treeMap (+1) exampleTree     -- applies the function that adds 1 to the value to every node in exampleTree, resulting in mappedTree
flattenExampleTree = flattenTree exampleTree     -- flattens the exampleTree, resulting in a list of type Int
sumExampleTree = sumTree exampleTree      -- sums all the values in the exampleTree, resulting in a value of type Int