module Main where

data MyType a b
  = Constructor1 a  -- ^ This is the first constructor, takes an argument of type 'a'
  | Constructor2 b  -- ^ This is the second constructor, takes an argument of type 'b'

-- | This function takes in a list of 'MyType' and returns a new list containing only the values from 'Constructor1'
filterConstructor1 :: [MyType a b] -> [a]
filterConstructor1 xs = [x | (Constructor1 x) <- xs]

-- | This is a specialized version of the 'map' function, which only applies to the first constructor
mapConstructor1 :: (a -> c) -> [MyType a b] -> [MyType c b]
mapConstructor1 f xs = [Constructor1 (f x) | (Constructor1 x) <- xs]

-- | This is a monadic function that returns the result of applying a function to the first constructor in a 'MyType' value
-- It also takes in a function that takes in a value of type 'a' and returns a monadic value
-- and returns a value of type 'MyType' containing the result of the monadic function applied to the first constructor
bindConstructor1 :: MyType a b -> (a -> MyType c b) -> MyType c b
bindConstructor1 (Constructor1 x) f = f x
bindConstructor1 (Constructor2 y) _ = Constructor2 y

main :: IO ()
main = do
  let myValue = Constructor1 "hello"
  let newMyValue = bindConstructor1 myValue (\x -> Constructor1 (x ++ " world"))
  putStrLn $ show newMyValue