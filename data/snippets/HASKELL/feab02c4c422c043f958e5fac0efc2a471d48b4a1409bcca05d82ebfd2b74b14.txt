import Control.Monad (join)

takeWhileNot :: (a -> Bool) -> [a] -> [a]
-- ^ Takes elements from a list until the predicate is true.

takeWhileNot _ [] = []
takeWhileNot p (x:xs) = if p x then [] else x : takeWhileNot p xs
-- ^ Uses pattern matching and recursion to filter out elements based on the predicate.

takeWhileNot' :: (a -> Bool) -> [a] -> [a]
-- ^ Takes elements from a list until the predicate is true, using the foldr function.

takeWhileNot' _ [] = []
takeWhileNot' p xs = foldr (\x acc -> if p x then [] else x : acc) [] xs
-- ^ Combines the elements using a lambda function and applies the predicate to each element.

main :: IO ()
main = do
  putStrLn "Enter a list of numbers:"
  input <- getLine
  let numbers = map read (words input) :: [Int] -- ^ Converts the user input into a list of integers.
      evenNumbers = takeWhileNot' odd numbers -- ^ Uses the takeWhileNot' function on the list of numbers.
  putStrLn "The even numbers are:"
  putStrLn (show evenNumbers) -- ^ Prints the result.