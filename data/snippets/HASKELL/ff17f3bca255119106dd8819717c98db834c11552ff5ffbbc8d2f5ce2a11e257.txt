{-# LANGUAGE TypeFamilies #-}
module Main where

import Data.Map (Map)
import qualified Data.Map as Map

-- Example of a type family
type family Element t where
  Element (Map k v) = v
  Element [a] = a
  Element Char = Int

-- | Checks if the given key is present in the given Map
contains :: Ord k => k -> Map k v -> Bool
contains key map =
  case Map.lookup key map of
    Just _ -> True
    Nothing -> False

-- | Some type declarations for testing
type ExampleTuple = (Char, Bool, [Int])
data ExampleType = ExampleType Int String

-- | Helper function for adding to a Map and keeping track of key presence
addAndTrack ::
  Ord k =>
  k ->
  Element (Map k v) ->
  Map k v ->
  (v, Map k v)
addAndTrack key val map =
  (val, Map.insert key val map)

-- | Main function, creates a Map and adds some values to it
main :: IO ()
main = do
  let exampleMap :: Map Char Bool
      exampleMap = Map.fromList [('a', True), ('b', False)]
  putStrLn $ "Map before adding: " ++ show exampleMap

  let (val, newMap) = addAndTrack 'c' True exampleMap
  putStrLn $ "Added key 'c' with value " ++ show val
  putStrLn $ "Map after adding: " ++ show newMap

  putStrLn $ "Does the map contain key 'a'?: " ++ show (contains 'a' newMap)
  putStrLn $ "Does the map contain key 'd'?: " ++ show (contains 'd' newMap)