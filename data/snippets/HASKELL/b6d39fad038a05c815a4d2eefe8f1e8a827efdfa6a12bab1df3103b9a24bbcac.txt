{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE StandaloneDeriving #-}

{-|
This is a complex algebraic data type in Haskell,
representing a binary tree where the values in the nodes
are of a generic type `a`.
The leaf nodes contain no values, indicated by the `Empty` constructor,
while the `Node` constructor contains two branches,
represented by `left` and `right`,
which are either empty or contain a value and two sub-trees.
-}
data Tree a where
  Empty :: Tree a
  Node :: a -> Tree a -> Tree a -> Tree a

{-|
The `Show` typeclass allows for converting
a value of type `a` to a `String` representation,
which is useful for debugging and displaying data.
-}
deriving instance Show a => Show (Tree a)

{-|
The `Eq` typeclass allows for comparing
two values of type `a` and returning a `Bool`.
This can be useful for checking for equality or inequality.
-}
deriving instance Eq a => Eq (Tree a)