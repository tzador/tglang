data Tree a
    = Empty
    | Node (Tree a) a (Tree a)
  deriving (Eq, Show)

-- | Applies a function to each element in a tree, constructing a new tree from
--   the results.
mapTree :: (a -> b) -> Tree a -> Tree b
mapTree _ Empty = Empty
mapTree f (Node left x right) = Node (mapTree f left) (f x) (mapTree f right)

-- | Folds a function over a tree. The order of folding is in-order.
foldTree :: (a -> b -> b) -> b -> Tree a -> b
foldTree _ e Empty = e
foldTree f e (Node left x right) = foldTree f (f x (foldTree f e right)) left

-- | Create a tree from a list of values, using a binary search tree ordering.
makeTree :: Ord a => [a] -> Tree a
makeTree = foldr insert Empty
  where
    insert x Empty = Node Empty x Empty
    insert x (Node left y right)
      | x < y = Node (insert x left) y right
      | otherwise = Node left y (insert x right)

-- Example tree
exampleTree :: Tree Int
exampleTree =
  Node
    (Node Empty 1 Empty)
    2
    (Node (Node Empty 3 (Node Empty 4 Empty)) 5 (Node Empty 6 Empty))