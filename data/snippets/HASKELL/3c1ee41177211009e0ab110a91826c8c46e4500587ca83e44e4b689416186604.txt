-- This function takes in a list and returns a new list with all elements doubled
doubleList :: [Int] -> [Int]
doubleList list = map (*2) list

-- This function takes in a list of tuples and returns a new list with the sum of each tuple's elements
sumTupleList :: [(Int, Int)] -> [Int]
sumTupleList tupleList = map (\(a,b) -> a+b) tupleList

-- This function uses recursion to find the nth Fibonacci number
fib :: Int -> Int
fib n 
  | n <= 1 = 1
  | otherwise = fib (n-1) + fib (n-2)

-- This function uses pattern matching to check if the input list is empty
isEmpty :: [a] -> Bool
isEmpty [] = True
isEmpty _ = False

-- This function implements quicksort on a list of Integers
quicksort :: [Int] -> [Int]
quicksort [] = []
quicksort (x:xs) = 
  let smaller = quicksort [a | a <- xs, a <= x]
      bigger = quicksort [a | a <- xs, a > x]
  in smaller ++ [x] ++ bigger