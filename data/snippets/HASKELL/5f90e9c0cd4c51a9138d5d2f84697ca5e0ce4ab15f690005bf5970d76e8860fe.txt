main :: IO ()
main = do
  putStrLn "Welcome to the game of Tic-Tac-Toe!"
  putStrLn "Player 1, please choose your symbol (X/O):"
  player1Symbol <- getLine
  putStrLn "Player 2, please choose your symbol (X/O):"
  player2Symbol <- getLine
  let player1 = if player1Symbol == "X" then "Player 1" else "Player 2"
  let player2 = if player2Symbol == "X" then "Player 1" else "Player 2"
  putStrLn (player1 ++ " goes first!")
  playGame player1 player2 []

playGame :: String -> String -> [Int] -> IO ()
playGame player1 player2 board
  | checkWinner board = putStrLn (player1 ++ " wins!")
  | length board == 9 = putStrLn "It's a tie!"
  | player1 == "Player 1" = do
      putStrLn "Player 1's turn. Please choose a spot on the board (1-9):"
      move <- getLine
      let updatedBoard = makeMove board (read move :: Int) 0
      printBoard updatedBoard
      playGame player2 player1 updatedBoard
  | player2 == "Player 1" = do
      putStrLn "Player 2's turn. Please choose a spot on the board (1-9):"
      move <- getLine
      let updatedBoard = makeMove board (read move :: Int) 0
      printBoard updatedBoard
      playGame player1 player2 updatedBoard

printBoard :: [Int] -> IO ()
printBoard [a,b,c,d,e,f,g,h,i] =
    putStrLn ("  " ++ (show a) ++ " | " ++ (show b) ++ " | " ++ (show c) ++ " "
      ++ "\n ---+---+---"
      ++ "\n  " ++ (show d) ++ " | " ++ (show e) ++ " | " ++ (show f) ++ " "
      ++ "\n ---+---+---"
      ++ "\n  " ++ (show g) ++ " | " ++ (show h) ++ " | " ++ (show i) ++ " ")
printBoard _ = return ()

makeMove :: [Int] -> Int -> Int -> [Int]
makeMove (x:xs) move count
  | move == count = 1 : xs
  | otherwise = x : makeMove xs move (count + 1)

checkWinner :: [Int] -> Bool
checkWinner board =
  let winningCombos = [[0,1,2], [3,4,5], [6,7,8], [0,3,6], [1,4,7], [2,5,8], [0,4,8], [2,4,6]]
      in any (\combo -> all (\i -> board !! i == 1) combo) winningCombos