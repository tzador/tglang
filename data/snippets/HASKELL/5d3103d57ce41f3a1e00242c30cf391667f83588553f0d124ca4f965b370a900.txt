-- | Function to compute the factorial of a number using recursion
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial(n-1)

-- | Function to check if a list is a palindrome using list comprehension
isPalindrome :: Eq a => [a] -> Bool
isPalindrome xs = xs == [x | x <- reverse xs]

-- | Function to mergesort a list using recursion
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs = merge (mergeSort $ take (halfLength xs) xs) (mergeSort $ drop (halfLength xs) xs)
    where
    halfLength xs = length xs `div` 2
    merge left right
        | null left = right
        | null right = left
        | head left < head right = head left : merge (tail left) right
        | otherwise = head right : merge left (tail right)