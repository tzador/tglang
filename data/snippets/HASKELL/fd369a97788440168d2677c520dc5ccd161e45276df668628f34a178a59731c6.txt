-- This code snippet creates a Tree data structure with a defined set of operations
-- which allows for easier manipulation and traversal of the tree

data Tree a = EmptyTree | Node a (Tree a) (Tree a) -- defines the Tree data type with two constructors, EmptyTree and Node which takes in a value and two sub-trees
    deriving (Show)

insert :: (Ord a) => a -> Tree a -> Tree a  -- insert function takes in an element of type a and a Tree and returns a Tree with the element added in the correct position
insert x EmptyTree = Node x EmptyTree EmptyTree  -- if the Tree is empty, create a new Node with the value x and two empty sub-trees
insert x (Node a left right)
    | x == a = Node x left right  -- if the element is equal to the root value, just return the same tree
    | x < a = Node a (insert x left) right  -- if the element is less than the root value, insert it to the left sub-tree
    | otherwise = Node a left (insert x right)  -- if the element is greater than the root value, insert it to the right sub-tree

-- function to check if a Tree contains a certain element
contains :: (Ord a) => a -> Tree a -> Bool
contains x EmptyTree = False  -- if the Tree is empty, return False
contains x (Node a left right)
    | x == a = True  -- if the element is equal to the root value, return True
    | x < a = contains x left  -- if the element is less than the root value, check in the left sub-tree
    | otherwise = contains x right  -- if the element is greater than the root value, check in the right sub-tree

-- function to delete an element from a Tree
delete :: (Ord a) => a -> Tree a -> Tree a
delete x EmptyTree = EmptyTree  -- if the Tree is empty, return an empty Tree
delete x (Node a left right)
    | x == a = deleteNode (Node a left right)  -- if the element is equal to the root value, call the deleteNode function to delete the Node
    | x < a = Node a (delete x left) right  -- if the element is less than the root value, delete it from the left sub-tree
    | otherwise = Node a left (delete x right)  -- if the element is greater than the root value, delete it from the right sub-tree

-- function to delete a Node from a Tree
deleteNode :: (Ord a) => Tree a -> Tree a
deleteNode (Node a EmptyTree EmptyTree) = EmptyTree  -- if the Node's sub-trees are empty, just return an empty Tree
deleteNode (Node a left EmptyTree) = left  -- if the Node only has a left sub-tree, return the left sub-tree
deleteNode (Node a EmptyTree right) = right  -- if the Node only has a right sub-tree, return the right sub-tree
deleteNode (Node a left right) = Node minRight (delete minRight (Node a left right)) EmptyTree  -- if the Node has both sub-trees, replace it with the minimum element from the right sub-tree which has been deleted

-- function to find the minimum element in a Tree
minValue :: (Ord a) => Tree a -> Maybe a
minValue EmptyTree = Nothing  -- if the Tree is empty, return Nothing
minValue (Node a EmptyTree _) = Just a  -- if the left sub-tree is empty, the root value is the minimum
minValue (Node a left _) = minValue left  -- recursively check the left sub-tree for the minimum value

-- function to find the maximum element in a Tree
maxValue :: (Ord a) => Tree a -> Maybe a
maxValue EmptyTree = Nothing  -- if the Tree is empty, return Nothing
maxValue (Node a _ EmptyTree) = Just a  -- if the right sub-tree is empty, the root value is the maximum
maxValue (Node a _ right) = maxValue right  -- recursively check the right sub-tree for the maximum value

-- function to perform an inorder traversal of a Tree
inorder :: (Ord a) => Tree a -> [a]
inorder EmptyTree = []  -- if the Tree is empty, return an empty list
inorder (Node a left right) = (inorder left) ++ [a] ++ (inorder right)  -- recursively traverse the left sub-tree, add the root value, and then recursively traverse the right sub-tree

-- function to perform a preorder traversal of a Tree
preorder :: (Ord a) => Tree a -> [a]
preorder EmptyTree = []  -- if the Tree is empty, return an empty list
preorder (Node a left right) = [a] ++ (preorder left) ++ (preorder right)  -- add the root value, recursively traverse the left sub-tree, and then recursively traverse the right sub-tree

-- function to perform a postorder traversal of a Tree
postorder :: (Ord a) => Tree a -> [a]
postorder EmptyTree = []  -- if the Tree is empty, return an empty list
postorder (Node a left right) = (postorder left) ++ (postorder right) ++ [a]  -- recursively traverse the left sub-tree, then recursively traverse the right sub-tree, and finally add the root value