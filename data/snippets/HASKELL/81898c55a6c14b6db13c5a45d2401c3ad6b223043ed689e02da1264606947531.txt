{-# LANGUAGE TypeFamilies #-}

-- Defining a custom type `Equation` that represents a mathematical equation
-- that takes in a type `a`
data Equation a = Equation a

-- Defining the type family `Solve` that calculates
-- the solution of a given `Equation` type
type family Solve eqn :: a

-- Defining an instance of the type family `Solve` for the `Equation` type
-- where `a` is an instance of the `Num` typeclass, meaning it is numeric.
type instance Solve (Equation a) = a

-- Defining a `solve` function that takes in an `Equation` type
-- and uses the `Solve` type family to calculate the solution.
solve :: (Num a) => Equation a -> a
solve eqn = solve' (Solve eqn)
  where
    -- Helper function that uses pattern matching to extract the value
    -- from the `Equation` type and returns it as the solution
    solve' :: a -> a
    solve' (Equation val) = val

-- Creating an `Equation` type with the equation `2x + 3 = 7`
equation :: Equation Int
equation = Equation (solve eqn)
  where
    eqn = (2 * x) + 3 = 7
          -- ^ x will be our unknown variable

-- Output: 2
-- Since `x = 2` is the solution to the equation `2x + 3 = 7`