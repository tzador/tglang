{-# LANGUAGE DataKinds, GADTs, TypeFamilies #-}

-- define a type-level list
data List a where
    -- an empty list has no elements
    Nil :: List a
    -- a non-empty list contains a head element followed by a tail
    Cons :: a -> List a -> List a

-- define a type-level function to append two lists
type family Append (xs :: List a) (ys :: List a) :: List a where
    -- append an empty list to another list results in the second list
    Append Nil ys = ys
    -- append a non-empty list to another list by recursively appending the tail
    Append (Cons x xs) ys = Cons x (Append xs ys)

-- define a type-level function to reverse a list
type family Reverse (xs :: List a) :: List a where
    -- the reverse of an empty list is an empty list
    Reverse Nil = Nil
    -- the reverse of a non-empty list is the reverse of the tail appended with the head
    Reverse (Cons x xs) = Append (Reverse xs) (Cons x Nil)

-- define a function to create a list given a type-level list
createList :: List a -> [a]
-- an empty type-level list results in an empty normal list
createList Nil = []
-- a non-empty type-level list results in a list with the head element prepended to the rest of the list
createList (Cons x xs) = x : createList xs

-- create a type-level list with some elements
type MyList = Cons Int (Cons String (Cons Bool Nil))

-- create a normal list from the type-level list
myList :: [Bool]
-- the resulting list is [False, True, True]
myList = createList (Reverse MyList)