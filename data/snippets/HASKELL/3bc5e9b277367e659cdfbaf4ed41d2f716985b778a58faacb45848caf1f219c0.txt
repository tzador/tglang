-- Example implementation of a binary tree data structure

-- Type declaration for a binary tree
data BinaryTree a = Leaf a | Node (BinaryTree a) a (BinaryTree a)

-- Function for inserting a new element into the tree
insert :: Ord a => a -> BinaryTree a -> BinaryTree a
insert x (Leaf v) = Node (Leaf x) v (Leaf x)
insert x (Node left v right)
  | x < v = Node (insert x left) v right
  | x > v = Node left v (insert x right)
  | otherwise = Node left v right -- Element already exists in the tree

-- Function for searching for an element in the tree
search :: Ord a => a -> BinaryTree a -> Bool
search _ (Leaf _) = False
search x (Node left v right)
  | x < v = search x left
  | x > v = search x right
  | otherwise = True -- Element found in the tree

-- Function for converting a list into a binary tree
fromList :: Ord a => [a] -> BinaryTree a
fromList = foldr insert (Leaf a)

-- Function for converting a binary tree into a list
toList :: BinaryTree a -> [a]
toList (Leaf v) = [v]
toList (Node left v right) = toList left ++ [v] ++ toList right