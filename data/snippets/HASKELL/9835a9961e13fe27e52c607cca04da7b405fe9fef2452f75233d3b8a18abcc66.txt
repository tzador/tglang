-- Function to find the length of a list
findLength :: [a] -> Int
findLength [] = 0 -- base case
findLength (x:xs) = 1 + findLength xs -- recursive case to add 1 to the length for each element in the list

-- Function to reverse a list
findReverse :: [a] -> [a]
findReverse [] = [] -- base case
findReverse (x:xs) = findReverse xs ++ [x] -- recursive case to add the current element at the end of the reversed list

-- Function to find the minimum element in a list
findMin :: Ord a => [a] -> a
findMin [x] = x -- base case
findMin (x:xs)
    | x < minTail = x -- if the current element is smaller than the minimum of the tail, return it as the new minimum
    | otherwise = minTail -- otherwise, return the minimum of the tail
    where minTail = findMin xs -- define the minimum of the tail using recursion

-- Function to map a function over a list
findMap :: (a -> b) -> [a] -> [b]
findMap _ [] = [] -- base case
findMap f (x:xs) = f x : findMap f xs -- recursive case to apply the function to each element in the list

-- Function to filter elements from a list based on a predicate
findFilter :: (a -> Bool) -> [a] -> [a]
findFilter _ [] = [] -- base case
findFilter p (x:xs)
    | p x = x : findFilter p xs -- if the current element satisfies the predicate, add it to the filtered list
    | otherwise = findFilter p xs -- otherwise, continue to filter the rest of the list

-- Function to fold a list from the left using a binary function
findFoldl :: (a -> b -> a) -> a -> [b] -> a
findFoldl _ acc [] = acc -- base case
findFoldl f acc (x:xs) = findFoldl f (f acc x) xs -- recursive case to apply the function with the accumulator and current element to the rest of the list

-- Function to fold a list from the right using a binary function
findFoldr :: (a -> b -> b) -> b -> [a] -> b
findFoldr _ acc [] = acc -- base case
findFoldr f acc (x:xs) = f x (findFoldr f acc xs) -- recursive case to apply the function with the current element and result of folding the rest of the list from the right

-- Example usage of the functions
main = do
    let list = [5,2,3,8,1,12,4]
    putStrLn "Original list: "
    print list
    
    putStrLn "Length of list: "
    print (findLength list)
    putStrLn "Reverse of list: "
    print (findReverse list)
    putStrLn "Minimum element in list: "
    print (findMin list)
    putStrLn "List mapped using function (*2): "
    print (findMap (*2) list)
    putStrLn "List filtered based on predicate (even): "
    print (findFilter even list)
    putStrLn "List folded from left using function (+): "
    print (findFoldl (+) 0 list)
    putStrLn "List folded from right using function (*): "
    print (findFoldr (*) 1 list)