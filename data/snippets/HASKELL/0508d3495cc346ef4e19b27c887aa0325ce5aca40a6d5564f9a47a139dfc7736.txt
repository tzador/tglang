{-# LANGUAGE MultiParamTypeClasses #-}

module Main where

-- Define a class for a stack data structure
class Stack stk where
  empty :: stk a
  push :: a -> stk a -> stk a
  pop :: stk a -> (Maybe a, stk a)
  peek :: stk a -> Maybe a
  size :: stk a -> Int
  isEmpty :: stk a -> Bool

-- Define a type for a stack with a list implementation
newtype ListStack a = ListStack [a]

-- Implement the Stack class functions for the ListStack type
instance Stack ListStack where
  empty = ListStack []
  push x (ListStack xs) = ListStack (x:xs)
  pop (ListStack []) = (Nothing, ListStack [])
  pop (ListStack xs) = (Just $ head xs, ListStack $ tail xs)
  peek (ListStack []) = Nothing
  peek (ListStack xs) = Just $ head xs
  size (ListStack xs) = length xs
  isEmpty (ListStack []) = True
  isEmpty (ListStack xs) = False

-- Define a type for a stack with a custom implementation
data CustomStack a = CustomStack Int [a]

-- Implement the Stack class functions for the CustomStack type
instance Stack CustomStack where
  empty = CustomStack 0 []
  push x (CustomStack n xs) = CustomStack (n+1) (x:xs)
  pop (CustomStack 0 []) = (Nothing, CustomStack 0 [])
  pop (CustomStack n xs) = (Just $ head xs, CustomStack (n-1) (tail xs))
  peek (CustomStack 0 _) = Nothing
  peek (CustomStack _ xs) = Just $ head xs
  size (CustomStack n _) = n
  isEmpty (CustomStack 0 _) = True
  isEmpty (CustomStack _ _) = False

-- Main function to demonstrate the usage of the Stack classes
main :: IO ()
main = do
  putStrLn "Creating a ListStack of Strings"
  let listStack = push "world" $ push "hello" emptyListStack :: ListStack String
  putStrLn $ "Is the ListStack empty? " ++ (show $ isEmpty listStack)
  putStrLn $ "The peek item of ListStack: " ++ (show $ peek listStack)
  putStrLn $ "The size of ListStack: " ++ (show $ size listStack)
  let (popped, updatedListStack) = pop listStack
  putStrLn $ "Popping the top item: " ++ (maybe "" show popped)
  putStrLn $ "The new peek item of ListStack: " ++ (show $ peek updatedListStack)

  putStrLn "\nCreating a CustomStack of Integers"
  let customStack = push 5 $ push 3 $ push 1 emptyCustomStack :: CustomStack Int
  putStrLn $ "Is the CustomStack empty? " ++ (show $ isEmpty customStack)
  putStrLn $ "The peek item of CustomStack: " ++ (show $ peek customStack)
  putStrLn $ "The size of CustomStack: " ++ (show $ size customStack)
  let (popped2, updatedCustomStack) = pop customStack
  putStrLn $ "Popping the top item: " ++ (maybe "" show popped2)
  putStrLn $ "The new peek item of CustomStack: " ++ (show $ peek updatedCustomStack)