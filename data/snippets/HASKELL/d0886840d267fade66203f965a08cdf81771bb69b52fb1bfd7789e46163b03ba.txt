{-# LANGUAGE OverloadedStrings #-} 

module Main where

import Data.ByteString.Lazy (ByteString)
import qualified Data.ByteString.Lazy.Char8 as C

main :: IO ()
main = do
  let s :: ByteString  -- define a typed ByteString variable
      s = "Hello, world!"  -- assign a string to the variable
  C.putStrLn s  -- print the string to the console
  let reversed = C.reverse s  -- reverse the string and assign it to a new variable
  C.putStrLn reversed  -- print the reversed string to the console

  -- function to calculate the factorial of a number
  let factorial :: Integer -> Integer
      factorial n
        | n == 0    = 1  -- factorial of 0 is 1
        | otherwise = n * factorial (n-1)  -- recursive call to calculate factorial

  let n = 10  -- define a number for factorial calculation
  let result = factorial n  -- calculate factorial and assign it to a variable
  let message = "Factorial of " ++ show n ++ " is " ++ show result  -- create a message to print to console
  C.putStrLn message  -- print the message to the console

  -- custom data type to represent a circle
  data Circle = Circle { radius :: Float, x :: Float, y :: Float }
  -- function to calculate the area of a circle
  area :: Circle -> Float
  area (Circle r _ _) = pi * r^2  -- use pattern matching to access radius of circle
  -- function to calculate the circumference of a circle
  circumference :: Circle -> Float
  circumference (Circle r _ _) = 2 * pi * r  -- use pattern matching to access radius of circle

  let c = Circle 5.0 0.0 0.0  -- define a circle with radius 5
  C.putStrLn $ "Area of circle with radius " ++ show (radius c) ++ " is " ++ show (area c)  -- print the area of the circle
  C.putStrLn $ "Circumference of circle with radius " ++ show (radius c) ++ " is " ++ show (circumference c)  -- print the circumference of the circle