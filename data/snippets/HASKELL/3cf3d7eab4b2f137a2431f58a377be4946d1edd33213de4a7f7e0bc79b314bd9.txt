{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}

module Main where

import GHC.Generics

-- | This is a datatype representing a Person with a name and age.
-- It also implements the `Show` typeclass for pretty printing.
data Person = Person
  { name :: String -- ^ name of the person
  , age :: Int -- ^ age of the person
  } deriving stock (Generic)

instance Show Person where
  show (Person name age) = "Name: " ++ name ++ ", Age: " ++ show age

-- | A function that takes in a list of Persons and returns a list of their names.
-- It uses the `map` function to apply a transformation on each element in the list.
getNames :: [Person] -> [String]
getNames persons = map name persons

-- | This is a higher-order function that takes in a function operating on `Person` and returns a new function.
-- The new function takes in a `Person` and returns either True or False based on the result of the input function.
-- It uses the `flip` function to flip the order of the arguments.
-- Example usage: `isAdult (>= 18) person`.
isAdult :: (Person -> Int) -> Person -> Bool
isAdult func person = flip func person >= 18

-- | This is a function that takes in a list of Persons and returns the sum of their ages.
-- It uses the `foldr` function to reduce the list by adding each element's age to a running total.
getTotalAge :: [Person] -> Int
getTotalAge persons = foldr (\person totalAge -> age person + totalAge) 0 persons