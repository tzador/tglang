-- This is a commented line in Haskell

-- Function to check if a given number is prime
isPrime :: (Integral a) => a -> Bool
isPrime 1 = False
isPrime n = all (\x -> n `mod` x /= 0) [2..floor(sqrt(fromIntegral n))]

-- Function to get the nth prime number
nthPrime :: (Integral a) => Int -> a
nthPrime n = head (filter isPrime [2..]) !! (n-1)

-- Mapping the nthPrime function to a list of numbers
primes :: (Integral a) => [a]
primes = map nthPrime [1..]

-- Generating a list of Fibonacci numbers
fibs :: [Int]
fibs = 0 : scanl (+) 1 fibs

-- Function to check if a given number is a Fibonacci number
isFib :: Int -> Bool
isFib n = n `elem` (takeWhile (<= n) fibs)