{-# LANGUAGE TypeFamilies, GADTs, KindSignatures #-}
 
 module ComplexNumbers where
 
 -- Define a type representing complex numbers
 data Complex a =
   Complex { real :: a
           , imag :: a }
 
 -- Define instances for Num, Show, and Eq for Complex numbers
 instance Num a => Num (Complex a) where
   -- Addition of complex numbers
   (Complex a b) + (Complex c d) = Complex (a+c) (b+d)
   -- Multiplication of complex numbers
   (Complex a b) * (Complex c d) = Complex (a*c - b*d) (a*d + b*c)
   -- Subtraction of complex numbers
   (Complex a b) - (Complex c d) = Complex (a-c) (b-d)
   -- Absolute value of a complex number
   abs (Complex a b) = sqrt (a*a + b*b)
   -- Negation of a complex number
   negate (Complex a b) = Complex (-a) (-b)
   -- Sign of a complex number
   signum (Complex a b) = Complex (a / abs z) (b / abs z)
     where z = Complex a b
 
 instance Show a => Show (Complex a) where
   -- Show the complex number with the format "(real + imag*i)"
   show (Complex a b) = show a ++ " + " ++ show b ++ "i"
 
 instance Eq a => Eq (Complex a) where
   -- Check equality of two complex numbers
   (Complex a b) == (Complex c d) = (a == c) && (b == d)
 
 -- Define a type representing matrices with complex entries
 data Matrix a =
   Matrix { rows :: Int
          , cols :: Int
          , entries :: [[Complex a]] }
 
 -- Define a function to add two matrices
 addMatrices :: Num a => Matrix a -> Matrix a -> Matrix a
 addMatrices (Matrix r c e1) (Matrix r' c' e2)
   -- Check if the matrices have the same dimensions
   | r == r' && c == c' = Matrix r c (zipWith (zipWith (+)) e1 e2)
   -- Throw an error if the matrices have different dimensions
   | otherwise = error "Matrices must have the same dimensions for addition"