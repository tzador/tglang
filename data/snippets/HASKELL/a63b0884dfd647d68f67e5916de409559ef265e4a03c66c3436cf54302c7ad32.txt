-- Define a function that takes in a string and returns the reverse of the string
reverseStr :: String -> String 
reverseStr [] = [] -- empty string case
reverseStr (x:xs) = reverseStr xs ++ [x] -- recursive call to reverse rest of string and add current character to end


-- Define a function that checks if a given number is prime
isPrime :: Int -> Bool 
isPrime n = n > 1 && all (\x -> n `mod` x /= 0) [2..(n-1)] -- checks if number is greater than 1 and not divisible by any numbers between 2 and itself


-- Define a function that calculates the factorial of a given number
factorial :: Int -> Int 
factorial 0 = 1 -- base case
factorial n = n * factorial (n - 1) -- recursive call to multiply current number by the factorial of the previous number


-- Define a data type for shapes
data Shape = Circle Float Float Float | Rectangle Float Float Float Float 

-- Define a function that calculates the area of a shape
area :: Shape -> Float 
area (Circle _ _ r) = pi * r^2 -- pattern match for circle
area (Rectangle x1 y1 x2 y2) = abs (x2 - x1) * abs (y2 - y1) -- pattern match for rectangle


-- Define a function that zips two lists together with a custom combining function 
customZipWith :: (a -> b -> c) -> [a] -> [b] -> [c] 
customZipWith f [] _ = [] -- empty list case
customZipWith f _ [] = [] -- empty list case
customZipWith f (x:xs) (y:ys) = f x y : customZipWith f xs ys -- combine the heads and recursively call on the tails