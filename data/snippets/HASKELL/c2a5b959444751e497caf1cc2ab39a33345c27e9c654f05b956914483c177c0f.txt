module Main where

-- Function to concatenate two strings and check if they are palindromes
isPalindrome :: String -> String -> Bool
isPalindrome s t = (reverse s) == t

-- Create a list with all possible palindromes of a given length
possiblePalindromes :: Int -> [String]
possiblePalindromes len = [s + t | s <- ['a'..'z'], t <- ['a'..'z'], length (s + t) == len]

-- Function to find the longest palindromic substring in a given string
longestPalindrome :: String -> String
longestPalindrome string =
  let
    -- Create a list with all possible substrings of the given string
    substrings = concatMap inits (tails string)
    -- Filter the list to contain only palindromes
    palindromes = filter (\s -> isPalindrome s (reverse s)) substrings
    -- Find the longest palindrome in the list
    longestPalindrome = maximumBy (comparing length) palindromes
  in
   -- Return the longest palindrome
   longestPalindrome

main :: IO ()
main = do
  putStrLn "Enter a string to find the longest palindromic substring: "
  string <- getLine
  let palindrome = longestPalindrome string
  putStrLn ("The longest palindromic substring in '" ++ string ++ "' is '" ++ palindrome ++ "'.")