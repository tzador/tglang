-- | Function assignment in Haskell
fib :: Int -> Int
fib 0 = 0
fib 1 = 1
fib n = fib (n - 1) + fib (n - 2)

-- | List comprehension in Haskell
multiplesOfThree :: [Int]
multiplesOfThree = [x | x <- [1..10], x `mod` 3 == 0]

-- | Higher order function in Haskell
sum :: [Int] -> Int
sum [] = 0
sum (x:xs) = x + sum xs

-- | Recursive factorial function in Haskell
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)

-- | Pattern matching in Haskell
largest :: [Int] -> Int
largest [x] = x
largest (x:xs)
  | x > largest xs = x
  | otherwise = largest xs