-- Function to find the nth Fibonacci number
fib :: Int -> Integer
fib n = memo !! n
    where memo = 0 : 1 : zipWith (+) memo (tail memo)

-- Function to calculate area of a circle
area :: Double -> Double
area r = pi * r^2

-- Function to check if a number is prime
isPrime :: Int -> Bool
isPrime n = n > 1 && foldr (\ p r -> p*p > n || ((n `rem` p) /= 0 && r))
              True primes
    where primes = 2 : filter isPrime [3,5..]  -- a generalized version of Sieve of Eratosthenes

-- Function to generate a list of the first n prime numbers
generatePrimes :: Int -> [Int]
generatePrimes n = take n primes
    where primes = filter isPrime [2..]

-- Function to generate a table of fibonacci numbers and their corresponding area of circle with radius equal to the fibonacci number
fibTable :: Int -> [(Integer, Double)]
fibTable n = [(fib i, area (fromIntegral (fib i))) | i <- [1..n]]

-- Example usage: fibTable 5
-- Returns: [(1, 3.141592653589793), (1, 3.141592653589793), (2, 12.566370614359172), (3, 28.274333882308138), (5, 78.53981633974483)]