import Data.List (sortBy)
import Data.Ord (comparing)

-- These are two helper functions used in the main sort function.
-- The first one takes in a function and a list and applies the function to every element in the list.
-- The second one takes in two values and returns the larger of the two.
map :: (a -> b) -> [a] -> [b]
max :: Ord a => a -> a -> a

-- This is the main sort function, using the quicksort algorithm.
-- It takes in a list and recursively partitions it into smaller sublists, sorting each sublist, and then combining them in the correct order.
quicksort :: Ord a => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
  let smaller = quicksort (filter (<=x) xs)
      bigger = quicksort (filter (>x) xs)
  in smaller ++ [x] ++ bigger

-- This is a helper function for the quicksort function.
-- It takes in a list, a pivot element, and returns two sublists: one containing elements smaller than the pivot, and the other containing elements larger than the pivot.
partition :: Ord a => [a] -> a -> ([a], [a])
partition [] _ = ([], [])
partition (x:xs) pivot =
  let (smaller, bigger) = partition xs pivot
  in if x < pivot then (x:smaller, bigger) else (smaller, x:bigger)

-- This is a function to sort a list of tuples based on the first element in each tuple.
-- It uses the sortBy function from the Data.List module and the comparing function from the Data.Ord module.
sortTuples :: Ord a => [(a, b)] -> [(a, b)]
sortTuples xs =
  let compareFn = comparing fst
  in sortBy compareFn xs

-- This is an example function using the above functions to sort a list of tuples containing names and ages.
-- It first sorts them by name in alphabetical order, and then by age.
sortPeople :: [(String, Int)] -> [(String, Int)]
sortPeople people =
  let sortedNames = sortTuples people
      sortedAges = sortTuples (reverse sortedNames)
  in sortedAges