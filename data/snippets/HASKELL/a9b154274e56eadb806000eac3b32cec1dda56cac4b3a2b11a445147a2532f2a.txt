{-# LANGUAGE OverloadedStrings, DeriveGeneric #-} -- enable language extensions

import Data.Aeson (ToJSON, FromJSON, Value, decode, eitherDecode)
import Data.Map (Map, fromList)

data MyClass = MyConstructor { -- define a new data type with fields
    field1 :: String,
    field2 :: Int,
    field3 :: Maybe Bool
} deriving (Show, Generic) -- make the data type printable and enable generic deriving

instance FromJSON MyClass -- allow parsing from JSON
instance ToJSON MyClass -- allow conversion to JSON

myObject :: MyClass -- declare an object of type MyClass
myObject = MyConstructor "hello world" 42 (Just True) -- initialize the object with values

myJSON :: Value -- declare a JSON value
myJSON = object ["field1" .= "hello world", "field2" .= (42 :: Int), "field3" .= Just True] -- create a JSON object with the same values as myObject

myEncodedJSON :: ByteString -- declare a bytestring to hold the encoded JSON
myEncodedJSON = encode myObject -- encode myObject into JSON format and save it in myEncodedJSON

myDecodedObject :: Either String MyClass -- declare an Either type to hold either the decoded object or an error message
myDecodedObject = eitherDecode myEncodedJSON -- decode myEncodedJSON into a MyClass object, either returning the object or an error message if decoding fails