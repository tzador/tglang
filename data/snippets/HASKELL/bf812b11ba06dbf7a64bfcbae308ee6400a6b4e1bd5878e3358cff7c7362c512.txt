-- Define a data type for a binary tree
data BinaryTree a = EmptyTree | Node a (BinaryTree a) (BinaryTree a)

-- Insert a value into a binary tree
insert :: (Ord a) => a -> BinaryTree a -> BinaryTree a
insert x EmptyTree = Node x EmptyTree EmptyTree
insert x (Node a left right)
    | x == a = Node x left right
    | x < a = Node a (insert x left) right
    | x > a = Node a left (insert x right)

-- Fold over a binary tree
treeFold :: (a -> b -> b) -> b -> BinaryTree a -> b
treeFold f z EmptyTree = z
treeFold f z (Node x left right) = f x (treeFold f (treeFold f z right) left)

-- Get the size of a binary tree
treeSize :: BinaryTree a -> Int
treeSize = treeFold (\_ b -> 1 + b) 0

-- Determine if a value is in a binary tree
treeContains :: (Ord a) => a -> BinaryTree a -> Bool
treeContains x = treeFold (\y b -> if x == y then True else b) False

-- Map over a binary tree
treeMap :: (a -> b) -> BinaryTree a -> BinaryTree b
treeMap f = treeFold (\x t -> insert (f x) t) EmptyTree