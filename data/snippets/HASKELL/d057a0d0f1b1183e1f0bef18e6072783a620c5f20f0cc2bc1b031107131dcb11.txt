{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE OverloadedStrings #-}

-- Define type class for outer product
class OuterProduct a b where
    outerProduct :: a -> b -> [String]

-- Define instance for outer product of Strings
instance OuterProduct String String where
    outerProduct x y = [ x ++ ": " ++ y ]

-- Define instance for outer product of lists
instance (Show a, Show b) => OuterProduct [a] [b] where
    outerProduct xs ys = [ show xs ++ ": " ++ show ys ]

-- Define function to apply outer product on list of arguments
outerProductOnList :: OuterProduct a b => [a] -> [b] -> [[String]]
outerProductOnList [] _ = []
outerProductOnList (x:xs) ys = map (outerProduct x) ys ++ outerProductOnList xs ys

-- Example usage:
-- outerProductOnList ["Apple", "Banana"] ["Yellow", "Red"]
-- [["Apple: Yellow", "Apple: Red"], ["Banana: Yellow", "Banana: Red"]]