data Tree a = Leaf | Node a (Tree a) (Tree a) -- Creating a recursive data type called Tree that represents a binary tree, with a value of type 'a' and two sub-trees of type 'a'

treeInsert :: (Ord a) => a -> Tree a -> Tree a -- Defining a function that takes a value of type 'a' and a Tree of type 'a' and returns a new Tree with the value inserted in the correct position, following the rules of binary search trees
treeInsert x Leaf = Node x Leaf Leaf -- If the Tree is empty, create a new Node with the value as its only child and return it as the new Tree
treeInsert x (Node a left right) 
    | x == a = Node a left right -- If the value already exists in the Tree, return the original Tree
    | x < a = Node a (treeInsert x left) right -- If the value is smaller than the current node's value, insert it in the left sub-tree
    | x > a = Node a left (treeInsert x right) -- If the value is larger than the current node's value, insert it in the right sub-tree

treeSearch :: (Ord a) => a -> Tree a -> Bool -- Defining a function that takes a value of type 'a' and a Tree of type 'a' and returns a boolean indicating whether the value exists in the Tree or not
treeSearch x Leaf = False -- If the Tree is empty, return False
treeSearch x (Node a left right)
    | x == a = True -- If the value matches the current node's value, return True
    | x < a = treeSearch x left -- If the value is smaller than the current node's value, search in the left sub-tree
    | x > a = treeSearch x right -- If the value is larger than the current node's value, search in the right sub-tree

treeMap :: (a -> b) -> Tree a -> Tree b -- Defining a function that takes a function from type 'a' to type 'b' and a Tree of type 'a' and returns a new Tree with all values transformed by the function
treeMap _ Leaf = Leaf -- If the Tree is empty, return an empty Tree
treeMap f (Node a left right) = Node (f a) (treeMap f left) (treeMap f right) -- Apply the function to the current node's value and recursively map the function to the left and right sub-trees

treeFold :: (a -> b -> b) -> b -> Tree a -> b -- Defining a function that takes a function with two parameters ('a' and 'b') and an initial value of type 'b', and a Tree of type 'a', and returns a value of type 'b' by applying the function to each node's value in the Tree
treeFold _ initial Leaf = initial -- If the Tree is empty, return the initial value
treeFold f initial (Node a left right) = f a (treeFold f (treeFold f initial left) right) -- Apply the function to the current node's value and recursively fold the function to the left and right sub-trees, using the previously folded value as the new initial value

exampleTree :: Tree Int -- Creating an example Tree with values of type Int
exampleTree = Node 10 (Node 5 (Node 3 Leaf Leaf) (Node 8 (Node 6 Leaf Leaf) Leaf)) (Node 15 (Node 13 Leaf Leaf) (Node 17 Leaf Leaf))

mappedTree :: Tree Int -- Mapping the exampleTree using (+2) as the mapping function
mappedTree = treeMap (+2) exampleTree

foldedTree :: Int -- Folding the exampleTree using (*) as the folding function and 1 as the initial value, which should result in the product of all values in the Tree
foldedTree = treeFold (*) 1 exampleTree