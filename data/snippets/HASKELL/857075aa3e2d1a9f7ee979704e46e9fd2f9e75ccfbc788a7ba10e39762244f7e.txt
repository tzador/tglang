{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE StandaloneDeriving #-}

-- | A generic implementation of type-safe heterogeneous lists
data HList (ts :: [*]) where
  HNil :: HList '[]
  (:::) :: t -> HList ts -> HList (t ': ts)

deriving instance Eq (HList '[])
deriving instance (Eq t, Eq (HList ts)) => Eq (HList (t ': ts))

atIndex
  :: forall n ts t.
     ( KnownNat n
     , n < Length ts
     )
  => HList ts
  -> t
atIndex HNil = error "Cannot access empty list"
atIndex (x ::: xs) =
  if natVal @n Proxy == 0
    then x
    else atIndex @(n-1) xs