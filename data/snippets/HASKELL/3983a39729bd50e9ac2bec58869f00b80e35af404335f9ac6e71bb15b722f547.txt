{-# LANGUAGE OverloadedLists #-} -- Language extension for overloaded lists
{-# OPTIONS_GHC -Wall #-} -- Compiler options to enable all warnings

module Main where -- Main module declaration

import Data.List (intercalate) -- Importing intercalate function from Data.List module

data Person = Person   -- Defining a new data type 'Person'
  { -- with the following fields:
    name :: String
  , age :: Int
  , hobbies :: [String]
  } deriving (Show) -- Deriving a Show instance for Person type

addHobby :: Person -> String -> Person -- Function to add a hobby to a Person
addHobby person hobby = person {hobbies = hobby : hobbies person} -- Updating the hobbies field of the Person

main :: IO () -- Main function definition
main = do
  let person = Person {name = "John", age = 25, hobbies = ["Hiking", "Reading"]} -- Creating a new Person
  putStrLn $ "Name: " ++ name person -- Printing person's name
  putStrLn $ "Age: " ++ show (age person) -- Printing person's age
  putStrLn $ "Hobbies: " ++ intercalate ", " (hobbies person) -- Printing person's hobbies with a comma in between
  let personWithHobby = addHobby person "Coding" -- Adding a new hobby to the person
  putStrLn $ "Hobbies after adding Coding: " ++ intercalate ", " (hobbies personWithHobby) -- Printing person's updated hobbies