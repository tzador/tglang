data Tree a = Empty | Node a (Tree a) (Tree a) -- defines a binary tree data type with nodes and leaves

treeMap :: (a -> b) -> Tree a -> Tree b -- function to map a function onto every element in the tree
treeMap f Empty = Empty -- base case: map on empty tree returns empty tree
treeMap f (Node val left right) = Node (f val) (treeMap f left) (treeMap f right) -- recursive call to map onto the node value and the left and right subtrees

treeFold :: (a -> b -> b -> b) -> b -> Tree a -> b -- function to fold a tree into a single value
treeFold f acc Empty = acc -- base case: fold on empty tree returns accumulator value
treeFold f acc (Node val left right) = f val (treeFold f acc left) (treeFold f acc right) -- recursive call to fold on node value and the folded left and right subtrees