module Main where

data Tree a = Empty | Node a (Tree a) (Tree a) deriving Show

-- | Function that takes a list of elements and creates a binary search tree
makeTree :: (Ord a) => [a] -> Tree a
makeTree [] = Empty
makeTree (x:xs) = Node x (makeTree smaller) (makeTree larger)
  where smaller = filter (<x) xs
        larger = filter (>=x) xs
        
-- | Function that checks if an element is present in a binary search tree
searchTree :: (Ord a) => Tree a -> a -> Bool
searchTree Empty _ = False
searchTree (Node val left right) x
  | x == val = True
  | x < val = searchTree left x
  | otherwise = searchTree right x
  
main :: IO ()
main = do
  let myList = [5, 3, 8, 1, 6, 9, 4, 2, 7]
  let tree = makeTree myList
  print $ searchTree tree 5
  print $ searchTree tree 10