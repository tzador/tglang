-- function to calculate the factorial of a number
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- function to calculate the fibonacci sequence
fibonacci :: Int -> Int
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

-- function to calculate the sum of a list of numbers
sumList :: [Int] -> Int
sumList [] = 0
sumList (x:xs) = x + sumList xs

-- function to check if a number is prime
isPrime :: Int -> Bool
isPrime 1 = False
isPrime n = null [x | x <- [2..n-1], n `mod` x == 0]

-- function to calculate the nth power of a number
power :: Int -> Int -> Int
power _ 0 = 1
power x n = x * power x (n - 1)

-- function to find the length of a list
length :: [a] -> Int
length [] = 0
length (x:xs) = 1 + length xs

-- function to check if two lists are equal
equals :: [a] -> [a] -> Bool
equals [] [] = True
equals [] _ = False
equals _ [] = False
equals (x:xs) (y:ys) = x == y && equals xs ys

-- function to reverse a list
reverse :: [a] -> [a]
reverse [] = []
reverse (x:xs) = reverse xs ++ [x]

-- function to filter out odd numbers from a list
filterOdd :: [Int] -> [Int]
filterOdd [] = []
filterOdd (x:xs)
  | odd x = x : filterOdd xs
  | otherwise = filterOdd xs

-- function to map a function over a list
map :: (a -> b) -> [a] -> [b]
map _ [] = []
map f (x:xs) = f x : map f xs