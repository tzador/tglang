{-# LANGUAGE FlexibleContexts #-}

module Main where

import Data.List
import Data.Function
import Control.Monad.Except

main :: IO ()
main = runExceptT $ do
    let numbers = [1,2,3,4,5,6,7,8,9,10] :: [Int]
    let permutation = permutations numbers
    let mapped = map sum permutation
    let sorted = sortBy (compare `on` length . show) mapped
    let filtered = filter (\x -> x `mod` 2 == 0) sorted
    let result = head filtered
    liftIO $ putStrLn ("The result is: " ++ show result)

{-
The above code snippet generates a list of numbers, creates a list of all possible permutations, maps the sum of each permutation, sorts the results by the length of their string representation, filters out odd numbers, and returns the first even number in the sorted list. The final result is then printed to the console.
-}