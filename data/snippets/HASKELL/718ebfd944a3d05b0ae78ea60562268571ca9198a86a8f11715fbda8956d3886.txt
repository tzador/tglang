{-# LANGUAGE LambdaCase #-}
-- This code snippet uses the LambdaCase extension to allow pattern matching with anonymous functions

data Tree a = EmptyNode | TreeNode a (Tree a) (Tree a)
-- The Tree data type represents a binary tree, with either an EmptyNode or a TreeNode with a value and left and right subtrees

depth :: Tree a -> Int
depth EmptyNode = 0 -- If the tree is empty, the depth is 0
depth (TreeNode _ left right) = 1 + max (depth left) (depth right)
-- If the tree is a TreeNode, the depth is 1 plus the maximum depth of its left and right subtrees

flatten :: Tree a -> [a]
flatten EmptyNode = [] -- If the tree is empty, the flattened list is empty
flatten (TreeNode val left right) = flatten left ++ [val] ++ flatten right
-- If the tree is a TreeNode, the flattened list is the concatenation of the flattened left subtree, the value, and the flattened right subtree

mapTree :: (a -> b) -> Tree a -> Tree b
mapTree _ EmptyNode = EmptyNode -- If the tree is empty, the mapped tree is also empty
mapTree f (TreeNode val left right) = TreeNode (f val) (mapTree f left) (mapTree f right)
-- If the tree is a TreeNode, the mapped tree is a TreeNode with the mapped value and mapped left and right subtrees

foldTree :: (a -> b -> b -> b) -> b -> Tree a -> b
foldTree _ z EmptyNode = z -- If the tree is empty, the folded value is just the base value z
foldTree f z (TreeNode val left right) = f val (foldTree f z left) (foldTree f z right)
-- If the tree is a TreeNode, the folded value is the result of applying the function f to the value and the folded left and right subtrees, starting with the base value z

-- Example tree
exampleTree :: Tree Int
exampleTree = TreeNode 1 (TreeNode 2 (TreeNode 3 EmptyNode EmptyNode) EmptyNode) (TreeNode 4 EmptyNode (TreeNode 5 EmptyNode EmptyNode))

-- The depth of the example tree is 3
exampleTreeDepth = depth exampleTree

-- The flattened list of the example tree is [3,2,1,4,5]
exampleTreeFlattened = flatten exampleTree

-- The mapped tree of the example tree, where values are doubled, is TreeNode 2 (TreeNode 4 (TreeNode 6 EmptyNode EmptyNode) EmptyNode) (TreeNode 8 EmptyNode (TreeNode 10 EmptyNode EmptyNode))
exampleTreeMapped = mapTree (*2) exampleTree

-- The folded value of the example tree, where the function returns the product of the value and the folded subtree, starting with the base value 1, is 120
exampleTreeFolded = foldTree (\x l r -> x * l * r) 1 exampleTree