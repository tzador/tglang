import Data.List (group)

-- Define a type alias for a list of integers
type IntList = [Int]

-- Define a function to concatenate two lists of integers
concatIntLists :: IntList -> IntList -> IntList
concatIntLists [] ys = ys
concatIntLists (x:xs) ys = x : concatIntLists xs ys

-- Define a function to check if two lists of integers are equal
equalIntLists :: IntList -> IntList -> Bool
equalIntLists [] [] = True
equalIntLists _ [] = False
equalIntLists [] _ = False
equalIntLists (x:xs) (y:ys) = (x == y) && equalIntLists xs ys

-- Define a function to count the frequency of occurrences in a list
frequency :: (Eq a) => [a] -> [(a, Int)]
frequency xs = map (\ys -> (head ys, length ys)) (group xs)

-- Annotate the function
-- Takes a list of any type that can be compared for equality
-- Returns a list of tuples where the first element is the value and the second element is the frequency of occurrences in the input list
frequency :: (Eq a) => [a] -> [(a, Int)]
frequency xs = map (\ys -> (head ys, length ys)) (group xs)