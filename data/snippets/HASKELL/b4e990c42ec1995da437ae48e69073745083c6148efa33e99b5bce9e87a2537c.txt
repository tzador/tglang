{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-orphans #-}

module Complex where

import Data.Complex
import Control.Monad (liftM)
import Data.List (intercalate)

-- | This instance allows for complex numbers to be printed in a user-friendly format.
instance (Show a, Num a, Eq a) => Show (Complex a) where
  show c
    | imagPart == 0 = show realPart
    | realPart == 0 = show imagPart ++ "i"
    | signum imagPart == -1 = show realPart ++ " - " ++ show (abs imagPart) ++ "i"
    | otherwise = show realPart ++ " + " ++ show imagPart ++ "i"
    where
      realPart = realPart c
      imagPart = imagPart c

-- | This function calculates the norm of a complex number.
norm :: (RealFloat a) => Complex a -> a
norm (a :+ b) = sqrt (a^2 + b^2)

-- | This function generates a list of quadratic equations for a given list of coefficients.
quadraticEquations :: [String] -> [String]
quadraticEquations coefficients =
  map (\x -> equationHeader ++ show (x^2) ++ quadraticCoefficientString ++ show x ++ " + " ++ constantCoefficientString ++ "= 0") xs
  where
    xs = map read coefficients :: [Double]
    equationHeader = "Equation: "
    quadraticCoefficientString = "x^2"
    constantCoefficient = last xs
    constantCoefficientString = if constantCoefficient == 0 then "" else show constantCoefficient

-- | Main function that generates a list of quadratic equations for a given list of coefficients and prints them.
main :: IO ()
main = do
  putStrLn "Enter a list of coefficients for a quadratic equation, separated by spaces:"
  input <- getLine
  let coefficients = words input
  putStrLn "Generated Quadratic Equations:"
  let equations = quadraticEquations coefficients
  mapM_ putStrLn equations