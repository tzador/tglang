-- This code snippet is an implementation of a binary search tree
-- that supports insertion, search, and deletion operations
-- using the functional programming language Haskell

-- Define a BST data type that can either be a leaf node empty tree
-- or a node with a value and two child sub-trees
data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Eq)

-- Define a function that inserts a new node into the BST while maintaing the
-- binary search property where all values in the left sub-tree are smaller
-- and all values in the right sub-tree are larger than the parent node
insert :: (Ord a) => a -> Tree a -> Tree a
insert x EmptyTree = Node x EmptyTree EmptyTree -- insert into empty tree
insert x (Node y left right) -- insert into non-empty tree
  | x == y = Node x left right -- value already exists, no change
  | x < y = Node y (insert x left) right -- insert into left sub-tree
  | x > y = Node y left (insert x right) -- insert into right sub-tree

-- Define a function that searches for a given value in the BST
search :: (Ord a) => a -> Tree a -> Bool
search x EmptyTree = False -- value not found, return False
search x (Node y left right) -- value found if it matches root or found in sub-tree
  | x == y = True
  | x < y = search x left
  | x > y = search x right

-- Define a function that finds and deletes a node from the BST while maintaining
-- the binary search property by replacing the deleted node with its successor node
delete :: (Ord a) => a -> Tree a -> Tree a
delete x EmptyTree = EmptyTree -- value not found, return empty tree
delete x (Node y EmptyTree right) -- no left sub-tree, replace with right sub-tree
  | x == y = right
delete x (Node y left EmptyTree) -- no right sub-tree, replace with left sub-tree
  | x == y = left
delete x (Node y left right) -- node to delete has two child sub-trees
  | x == y = Node successor (delete successor right) -- replace with successor
  where successor = findSuccessor left -- find smallest value in left sub-tree
        findSuccessor (Node val EmptyTree _) = val -- base case, reached smallest node
        findSuccessor (Node val left _) = findSuccessor left -- recurse until smallest node is found
        findSuccessor _ = error "Error finding successor"

-- Example usage of the BST functions
let mytree = insert 5 (insert 3 (insert 8 (insert 1 (insert 7 EmptyTree))))
-- mytree = Node 5 (Node 3 (Node 1 EmptyTree EmptyTree) EmptyTree) (Node 8 (Node 7 EmptyTree EmptyTree) EmptyTree)

search 1 mytree -- True
search 4 mytree -- False

let newtree = delete 3 mytree -- Node 5 (Node 1 EmptyTree EmptyTree) (Node 8 (Node 7 EmptyTree EmptyTree) EmptyTree)
search 3 newtree -- False