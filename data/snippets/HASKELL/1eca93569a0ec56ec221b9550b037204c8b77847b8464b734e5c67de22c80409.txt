{-# OPTIONS_GHC -Wall #-}
{-# OPTIONS_GHC -fno-warn-type-defaults #-}
{-# LANGUAGE FlexibleInstances, CPP #-}
{-| Contains the definition of a type class 'Semigroup' 
    which provides an associative binary operation. 
    A common example of a Semigroup is the list type, 
    where the binary operation is concatenation. 
    We also define instances of 'Semigroup' for some 
    built-in types like 'Integer' and 'Data.Monoid.Sum'
-}
module Data.Semigroup
    ( Semigroup(..)
    , Arg a b(..)
    , WrappedArg a
    ) where

import Control.Applicative (ZipList(..), WrappedMonad(..))
import Data.Bifunctor

#ifdef MIN_VERSION_base
#if MIN_VERSION_base(4,9,0)
import qualified Data.Semigroup as BaseSemigroup
#else
import Data.Monoid (Monoid(..))
#endif
#else
import Data.Monoid (Monoid(..))
#endif

-- | Class 'Semigroup' 
class Semigroup a where
    -- | An associative binary operation
    (<>) :: a -> a -> a

    -- | Reduce a list of values using the binary operation
    (<>) = foldr (<>) mempty

instance Semigroup [a] where
    (<>) :: [a] -> [a] -> [a]
    (<>) = (++)