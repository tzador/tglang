-- Define a data type for a binary tree
data BinaryTree a = Empty | Node a (BinaryTree a) (BinaryTree a)

-- Function to insert an element into a binary tree in a sorted manner
insert :: Ord a => a -> BinaryTree a -> BinaryTree a
insert x Empty = Node x Empty Empty
insert x (Node y left right)
   | x == y = Node x left right
   | x < y  = Node y (insert x left) right
    | x > y  = Node y left (insert x right)
    
-- Function to delete an element from a binary tree
delete :: Ord a => a -> BinaryTree a -> BinaryTree a
delete _ Empty = Empty
delete x (Node y left right)
    | x < y  = Node y (delete x left) right
    | x > y  = Node y left (delete x right)
    | otherwise = case (left, right) of
                      (Empty, Empty) -> Empty
                      (Empty, right) -> right
                      (left, Empty) -> left
                      (left, right) -> let successor = getMin right
                                           right' = delete successor right
                                       in Node successor left right'
        where
            getMin :: BinaryTree a -> a
            getMin (Node x Empty _) = x
            getMin (Node _ left _) = getMin left