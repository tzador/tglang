{-# LANGUAGE DeriveGeneric #-} -- enables a module pragma that allows deriving the Generic representation of a type
module Main where

import GHC.Generics -- imports the generics module from the GHC library

-- defines a new data type named 'Employee' with three fields: name, age, and salary
data Employee = Employee {
    name :: String,
    age :: Int,
    salary :: Double
} deriving (Generic, Show) -- 'Employee' is an instance of the 'Generic' typeclass and can be printed with the 'Show' typeclass

-- defines a function that takes in two parameters: a list of employees and a salary threshold
-- and filters the list of employees based on the given salary threshold
filterEmployees :: [Employee] -> Double -> [String]
filterEmployees employees threshold = 
    let -- binds a new variable 'filteredEmployees' to the result of filtering the list of employees based on the given threshold
        filteredEmployees = filter (\e -> salary e >= threshold) employees
    in -- defines the result of the function to be a list of strings containing the names of the filtered employees
        map name filteredEmployees

main :: IO () -- defines the main function to have an IO action with no return type
main = do -- starts a do block for defining the actions to be executed in sequence
    let employees = [Employee "John" 25 50000, Employee "Jane" 30 60000, Employee "Bob" 40 75000] -- binds a list of employees to a variable 'employees'
    putStrLn "Enter salary threshold: " -- prints a prompt for the user to enter a salary threshold
    threshold <- readLn -- reads in the user's input and binds it to a new variable 'threshold'
    let filteredNames = filterEmployees employees threshold -- binds a list of filtered employee names to a variable 'filteredNames'
    putStrLn $ "Employees earning equal to or more than $" ++ show threshold ++ ":\n" -- prints a message indicating the threshold and the start of the list
    mapM_ putStrLn filteredNames -- executes the 'putStrLn' action for each element of the 'filteredNames' list