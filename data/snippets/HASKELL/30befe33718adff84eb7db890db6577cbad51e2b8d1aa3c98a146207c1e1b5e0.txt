-- Function to find the product of two numbers using recursion
product :: Int -> Int -> Int 
product x y = if y == 0       -- base case: when y is 0, product is 0
              then 0
              else x + product x (y-1) -- recursive call: add x to the product of x and y-1

-- Function to compute the factorial of a number using pattern matching
factorial :: Int -> Int 
factorial 0 = 1         -- base case: factorial of 0 is 1
factorial n = n * factorial (n-1) -- recursive call: factorial of n is n times factorial of n-1

-- Function to check if a list is sorted in ascending order using foldl
isSorted :: Ord a => [a] -> Bool 
isSorted [] = True         -- base case: empty list is sorted
isSorted (x:xs) = foldl (\acc y -> if acc && (x <= y) then True else False) True xs -- using foldl to check if x is less than or equal to every element in xs

-- Function to reverse a list using foldr
reverseList :: [a] -> [a] 
reverseList = foldr (\x acc -> acc ++ [x]) [] -- append each element of the list to the end of the accumulator list, starting from the end of the original list

-- Function to find the Kth element in a list using recursion
kthElement :: [a] -> Int -> a 
kthElement [] _ = error "Empty list" -- base case: list is empty, cannot find Kth element
kthElement (x:xs) k = if k == 1     -- base case: when k is 1, the first element is the Kth element
                      then x
                      else kthElement xs (k-1) -- recursive call: find the Kth element in the rest of the list