main = do                                 -- HASKELL main function
  let myList = [1, 2, 3, 4, 5]             -- define a list of integers called myList
  putStrLn "The sum of the list is: "       -- print a message to the console
  print (sum myList)                        -- calculate the sum of the list and print it
  let myMap = map (+1) myList               -- create a new list, applying the function (+1) to each element of myList
  putStrLn "The original list is: "         -- print a message to the console
  print myList                              -- print the original list
  putStrLn "The mapped list is: "           -- print a message to the console
  print myMap                               -- print the mapped list
  let myFiltered = filter (\x -> x `mod` 2 == 0) myList      -- create a new list, filtering out all odd numbers from myList
  putStrLn "The filtered list is: "          -- print a message to the console
  print myFiltered                           -- print the filtered list
  let myFoldl = foldl (\acc x -> acc + x) 0 myList           -- calculate the sum of the list using foldl
  putStrLn "The sum of the list using foldl is: "             -- print a message to the console
  print myFoldl                                               -- print the sum of the list using foldl
  let myFoldr = foldr (\x acc -> x + acc) 0 myList           -- calculate the sum of the list using foldr
  putStrLn "The sum of the list using foldr is: "             -- print a message to the console
  print myFoldr                                               -- print the sum of the list using foldr
  let myConcat = concat ["Hello", " ", "World!"]              -- concatenate a list of strings
  putStrLn "The concatenated string is: "                     -- print a message to the console
  print myConcat                                              -- print the concatenated string