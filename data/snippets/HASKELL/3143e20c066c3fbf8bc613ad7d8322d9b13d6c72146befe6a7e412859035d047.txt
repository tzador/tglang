{-# LANGUAGE RankNTypes, GADTs #-}

module Main where

data Expr a where                        -- A GADT called 'Expr'
  Lit    :: Int -> Expr Int              -- A literal value of type 'Int'
  Str    :: String -> Expr String        -- A literal value of type 'String'
  Add    :: Expr Int -> Expr Int -> Expr Int    -- Addition of two 'Int' expressions
  Length :: Expr String -> Expr Int             -- Length of a 'String' expression
  Map    :: (a -> b) -> Expr [a] -> Expr [b]    -- A map function that takes a function and a list expression

eval :: Expr a -> a                      -- A function to evaluate an 'Expr' and return its value
eval (Lit n)      = n                    -- Literal values evaluate to themselves
eval (Str s)      = s
eval (Add e1 e2)  = eval e1 + eval e2     -- Addition evaluates both operands and returns the sum
eval (Length e)   = length (eval e)       -- Length evaluates its expression and calculates the length of the result
eval (Map f e)    = map (eval f) (eval e) -- Map applies the function to each element of the list and evaluates the result

main = do
  let expression = Add (Lit 3) (Length (Str "hello"))
  putStrLn ("The result of evaluating the expression is: " ++ show (eval expression))  -- Prints: The result of evaluating the expression is: 8