data Tree a = Empty
            | Node a (Tree a) (Tree a) -- defining a Tree datatype with two constructors
            deriving (Show) -- deriving the Show typeclass to enable tree display

-- using an infix operator to insert a new element into a tree
-- this function recursively compares the element to be inserted with the current node and inserts it in the correct position
insert :: (Ord a) => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty
insert x (Node value left right)
    | x == value = Node value left right
    | x < value = Node value (insert x left) right
    | otherwise = Node value left (insert x right)

-- function to check if a given element is present in the tree
-- returns True if element is found, otherwise returns False
contains :: (Ord a) => a -> Tree a -> Bool
contains _ Empty = False
contains x (Node value left right)
    | x == value = True
    | x < value = contains x left
    | otherwise = contains x right

-- function to find the height of a tree (maximum number of nodes from root to leaf)
height :: Tree a -> Int
height Empty = 0
height (Node _ left right) = 1 + max (height left) (height right)

-- function to create a list containing all elements in a tree using an inorder traversal
inOrder :: Tree a -> [a]
inOrder Empty = []
inOrder (Node value left right) = inOrder left ++ [value] ++ inOrder right

-- function to create a list containing all elements in a tree using a preorder traversal
preOrder :: Tree a -> [a]
preOrder Empty = []
preOrder (Node value left right) = [value] ++ preOrder left ++ preOrder right

-- function to create a list containing all elements in a tree using a postorder traversal
postOrder :: Tree a -> [a]
postOrder Empty = []
postOrder (Node value left right) = postOrder left ++ postOrder right ++ [value]

-- example code to insert elements into a tree and then print it using various traversal methods
main = do
    let tree = foldr insert Empty [5, 2, 3, 7, 4, 6, 1]
    putStrLn "Inorder traversal:"
    print (inOrder tree)
    putStrLn "Preorder traversal:"
    print (preOrder tree)
    putStrLn "Postorder traversal:"
    print (postOrder tree)

-- output:
-- Inorder traversal:
-- [1,2,3,4,5,6,7]
-- Preorder traversal:
-- [5,2,1,3,4,7,6]
-- Postorder traversal:
-- [1,4,3,2,6,7,5]