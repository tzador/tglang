{-# LANGUAGE ScopedTypeVariables #-}
module Main where

import Control.Monad.State
import Data.List (permutations)

-- | This function takes in a list of numbers and calculates the sum of all possible permutations
-- | using the State Monad.
-- | The calculated sum is returned as the final state.
-- | Example input: [1,2,3]
-- | Example output: 231
-- | Example code:
sumPermutations :: forall a. (Num a) => [a] -> a
sumPermutations numbers = evalState (calculateSum numbers) []

-- | Helper function to actually calculate the sum of all permutations.
-- | Uses the State Monad to keep track of the sum as it iterates through the list of numbers.
-- | The final state is the calculated sum.
calculateSum :: forall a. (Num a) => [a] -> State [a] a
calculateSum numbers = do
  let perms = permutations numbers
  foldM (\acc perm -> acc + sum perm) 0 perms

{-|
  Example usage:

  > sumPermutations [1,2,3]
  231
-}

main :: IO ()
main = return ()