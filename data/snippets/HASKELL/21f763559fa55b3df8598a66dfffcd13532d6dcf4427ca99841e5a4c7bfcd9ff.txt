-- | Mapping function for list data structures.
mappingFunc :: (a -> b) -> [a] -> [b]
mappingFunc _ [] = [] -- Empty list case.
mappingFunc f (x:xs) = f x : mappingFunc f xs -- Recursive case, applies function to head element and recursively maps over tail.

-- | A higher-order function that takes in any function, applies it to each element of a given list, and returns a new list with the transformed elements.
applyFunc :: (a -> b) -> [a] -> [b]
applyFunc f lst = mappingFunc f lst -- Uses mapping function to apply given function to each element.

-- | An example of using the applyFunc function to double each element in a list.
doubledList :: [Int] -- Generates a list of Int values.
doubledList = applyFunc (*2) [1, 2, 3, 4, 5] -- Calls applyFunc with the function to double and a list of numbers.
-- Output: [2, 4, 6, 8, 10] -- Final list with doubled values.