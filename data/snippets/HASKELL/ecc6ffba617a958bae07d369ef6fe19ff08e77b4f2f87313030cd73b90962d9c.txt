-- Function to calculate the nth Fibonacci number
fibonacci :: Int -> Integer
fibonacci n = if n == 0 then 0
else if n == 1 then 1
else fibonacci (n-1) + fibonacci (n-2)

-- Function to check if a number is prime
isPrime :: Int -> Bool
isPrime n = if n <= 1 then False
else null [x | x <- [2..n-1], n `mod` x == 0]

-- Function to take a list of numbers and return a list of prime numbers
getPrimeNumbers :: [Int] -> [Int]
getPrimeNumbers numbers = [x | x <- numbers, isPrime x]

-- Function to print the Fibonacci sequence for the first n numbers
-- Usage: printFibonacciSequence n
printFibonacciSequence :: Int -> IO ()
printFibonacciSequence n = do
    putStrLn "The Fibonacci sequence for the first n numbers:"
    putStrLn (unwords [show (fibonacci x) | x <- [0..n-1]])

-- Function to print the list of prime numbers for the first n numbers
-- Usage: printPrimeNumbersSequence n
printPrimeNumbersSequence :: Int -> IO ()
printPrimeNumbersSequence n = do
    putStrLn "The List of prime numbers for the first n numbers:"
    putStrLn (unwords (map show (getPrimeNumbers [1..n-1])))

-- Main function to execute both functions
main = do
    printFibonacciSequence 10
    printPrimeNumbersSequence 20