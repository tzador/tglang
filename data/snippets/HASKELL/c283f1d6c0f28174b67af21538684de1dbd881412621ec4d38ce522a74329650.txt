data Tree a = Empty | Node a (Tree a) (Tree a) -- defining a binary tree data type

-- function to insert an element into a binary search tree
insert :: Ord a => a -> Tree a -> Tree a 
insert x Empty = Node x Empty Empty                -- if tree is empty, create a node with value x
insert x (Node val left right)                     -- otherwise, recursively traverse the tree
    | x == val = Node val left right               -- if the value already exists, return the same tree
    | x < val = Node val (insert x left) right     -- if value is less than the current node, insert it in the left subtree
    | otherwise = Node val left (insert x right)   -- if value is greater than the current node, insert it in the right subtree

-- function to check if a given element exists in a binary search tree
search :: Ord a => a -> Tree a -> Bool 
search x Empty = False                                  -- if tree is empty, element doesn't exist
search x (Node val left right)                           -- otherwise, recursively traverse the tree
    | x == val = True                                    -- if current node is equal to the element, return True
    | x < val = search x left                            -- if element is less than the current node, search in the left subtree
    | otherwise = search x right                         -- if element is greater than the current node, search in the right subtree 

-- function to delete an element from a binary search tree
delete :: Ord a => a -> Tree a -> Tree a 
delete x Empty = Empty                                   -- if tree is empty, element doesn't exist so return empty tree
delete x (Node val left right)                           -- otherwise, recursively traverse the tree
    | x == val = deleteNode (Node val left right)        -- if current node is equal to the element, call deleteNode function
    | x < val = Node val (delete x left) right           -- if element is less than the current node, delete from left subtree
    | otherwise = Node val left (delete x right)         -- if element is greater than the current node, delete from right subtree

-- function to delete a node from a binary search tree
deleteNode :: Ord a => Tree a -> Tree a 
deleteNode (Node val Empty Empty) = Empty                 -- if node to be deleted is a leaf node, return empty tree
deleteNode (Node val Empty right) = right                 -- if node to be deleted has only right subtree, return it
deleteNode (Node val left Empty) = left                   -- if node to be deleted has only left subtree, return it
deleteNode (Node val left right) = Node minVal left right -- if node to be deleted has both left and right subtree, replace it with the min value of right subtree
    where minVal = findMin right                           -- function to find minimum value in a tree
          findMin (Node x Empty _) = x                    -- if the left subtree is empty, the current node is the minimum value
          findMin (Node x l _) = findMin l               -- otherwise, recursively traverse the left subtree

-- function to convert a binary search tree into a sorted list
toList :: Ord a => Tree a -> [a] 
toList Empty = []                                      -- if tree is empty, return empty list
toList (Node val left right) = toList left ++ [val] ++ toList right    -- convert left subtree, add current node to list, then convert right subtree