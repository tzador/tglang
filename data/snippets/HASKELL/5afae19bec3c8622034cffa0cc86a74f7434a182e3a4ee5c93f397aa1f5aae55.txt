-- This example code snippet implements a simple binary search algorithm
-- in Haskell. It takes in a list of elements and a key to search for,
-- and returns the index of the key in the list if found, or -1 if
-- the key is not present in the list.
binarySearch :: Ord a => [a] -> a -> Int
binarySearch arr key = binarySearchHelper arr key 0 (length arr - 1)

binarySearchHelper :: Ord a => [a] -> a -> Int -> Int -> Int
binarySearchHelper arr key start end
    | start > end = -1
    | middleVal == key = middle
    | middleVal < key = binarySearchHelper arr key (middle + 1) end
    | otherwise = binarySearchHelper arr key start (middle - 1)
    where
        middle = start + (end - start) `div` 2
        middleVal = arr !! middle