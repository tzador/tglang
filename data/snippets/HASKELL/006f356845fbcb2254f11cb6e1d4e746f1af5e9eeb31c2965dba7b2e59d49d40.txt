-- Define a custom data type with two constructors
data BinaryTree a = EmptyTree | Node a (BinaryTree a) (BinaryTree a)

-- Function to insert a value into the binary tree
insert :: (Ord a) => a -> BinaryTree a -> BinaryTree a
insert val EmptyTree = Node val EmptyTree EmptyTree
insert val (Node val' left right)
    | val < val' = Node val' (insert val left) right
    | val > val' = Node val' left (insert val right)
    | otherwise = Node val' left right  -- value already exists in tree, no change needed

-- Function to check if a value is in the binary tree
contains :: (Ord a) => a -> BinaryTree a -> Bool
contains val EmptyTree = False
contains val (Node val' left right)
    | val == val' = True
    | val < val' = contains val left
    | val > val' = contains val right

-- Function to delete a value from the binary tree
delete :: (Ord a) => a -> BinaryTree a -> BinaryTree a
delete val EmptyTree = EmptyTree
delete val (Node val' left right)
    | val == val' = deleteNode (Node val' left right)
    | val < val' = Node val' (delete val left) right
    | val > val' = Node val' left (delete val right)
  where
    -- Helper function to delete a node from the binary tree
    -- Returns the resulting binary tree after deletion
    deleteNode :: (Ord a) => BinaryTree a -> BinaryTree a
    deleteNode (Node val' EmptyTree EmptyTree) = EmptyTree -- leaf node, just delete
    deleteNode (Node val' left EmptyTree) = left  -- only has left subtree, replace with that subtree
    deleteNode (Node val' EmptyTree right) = right  -- only has right subtree, replace with that subtree
    deleteNode (Node val' left right) = Node minVal left (delete minVal right)  -- has both subtrees, find min value in right subtree and replace with that 

    -- Function to find the minimum value in the binary tree
    -- Used in deleteNode to find the successor value for deletion
    -- Assumes the given binary tree is not empty
    minVal :: (Ord a) => BinaryTree a -> a
    minVal (Node val' EmptyTree _) = val'  -- since it is the minimum value, left subtree must be EmptyTree
    minVal (Node _ left _) = minVal left