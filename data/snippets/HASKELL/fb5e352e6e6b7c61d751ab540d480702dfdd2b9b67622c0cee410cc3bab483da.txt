​
{-# LANGUAGE RecordWildCards #-}
​
module Main where
​
import Control.Monad (when)
import Data.List (sortOn)
import System.Environment (getArgs)
import Text.Read (readMaybe)
​
data Person = Person
  { name :: String
  , age :: Int
  , city :: String
  } deriving (Show)
​
main :: IO ()
main = do
  args <- getArgs
  when (length args /= 3) $
    error "Expected 3 command line arguments"
  let [name, age, city] = args
      parsedAge = readMaybe age :: Maybe Int
      person = Person name (maybe 0 id parsedAge) city
  print person
​
-- | A function that sorts a list of persons by age in ascending order.
sortPersonsByAge :: [Person] -> [Person]
sortPersonsByAge = sortOn age
​
-- | A function that filters out persons older than a given age.
filterOldPersons :: Int -> [Person] -> [Person]
filterOldPersons limit = filter (\p -> age p <= limit)
​
-- | A function that prints out the names of a list of persons.
printPersonNames :: [Person] -> IO ()
printPersonNames = mapM_ (putStrLn . name)
​
-- | An example list of Persons.
persons :: [Person]
persons =
  [ Person "Alice" 26 "New York"
  , Person "Bob" 35 "Los Angeles"
  , Person "Claire" 41 "Chicago"
  , Person "David" 18 "Miami"
  ]
​
{- Output:
Person {name = "David", age = 18, city = "Miami"}
[Person {name = "David", age = 18, city = "Miami"},Person {name = "Alice", age = 26, city = "New York"},Person {name = "Bob", age = 35, city = "Los Angeles"},Person {name = "Claire", age = 41, city = "Chicago"}]
Alice
Bob
Claire
David
-}