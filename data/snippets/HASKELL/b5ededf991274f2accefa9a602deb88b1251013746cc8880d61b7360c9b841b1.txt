{-# LANGUAGE ScopedTypeVariables #-}

-- Create a new data type called 'Tree' with two constructors: Leaf and Node.
-- 'Tree' takes in a type parameter 'a' to represent the data in each node.
data Tree a = Leaf a | Node (Tree a) a (Tree a)

-- Create a function that takes in a Tree and a function.
-- The function will be applied on each node in the Tree and return a new Tree.
mapTree :: (a -> b) -> Tree a -> Tree b
mapTree f (Leaf x) = Leaf (f x)
mapTree f (Node leftTree x rightTree) = Node (mapTree f leftTree) (f x) (mapTree f rightTree)

-- Create an example Tree holding integers.
-- The Tree is a binary search tree with the numbers 1, 2, 3 in it.
exampleTree :: Tree Int
exampleTree = Node (Leaf 1) 2 (Node (Leaf 3) 4 (Leaf 5))

-- Use the mapTree function to double all the values in the exampleTree.
-- Result should be a new Tree with the numbers 2, 4, 6 in it.
doubledTree :: Tree Int
doubledTree = mapTree (*2) exampleTree