let fibonacci :: Integer -> Integer -- define a function that takes in an integer and returns an integer 
fibonacci n = case n of -- use pattern matching to specify the behavior of the function for different input cases
    0 -> 0 -- if input is 0, return 0
    1 -> 1 -- if input is 1, return 1
    _ -> fibonacci (n-1) + fibonacci (n-2) -- for any other input, recursively call the function and add the result of calling it on n-1 and n-2

-- test the function by calling it on the first 10 fibonacci numbers
map fibonacci [0..9] -- use the map function to apply the fibonacci function to a list of numbers from 0 to 9
-- output: [0,1,1,2,3,5,8,13,21,34] -- the output should be the first 10 fibonacci numbers in a list