-- This function calculates the average of an infinite list of numbers using recursion and pattern matching
average :: (Fractional a) => [a] -> a
average xs = helper xs 0 0  -- call the helper function with initial sum and length values

-- helper function takes in the list, sum of elements, number of elements, and returns the average
helper :: (Fractional a) => [a] -> a -> Int -> a
helper [] sum len = sum / (fromIntegral len)  -- base case: return the average by dividing the sum by the length
helper (x:xs) sum len = helper xs (sum + x) (len + 1)  -- recursive case: add current element to sum and increase length by 1

-- example usage
avg = average [1, 2, 3, 4, 5]  -- calculates the average of the list [1, 2, 3, 4, 5] which is 3.0