-- | Function to calculate the sum of a list of numbers
-- Takes in a list of numbers and returns the sum as an integer
calculateSum :: [Int] -> Int
calculateSum [] = 0                             -- Base case: empty list returns 0
calculateSum (x:xs) = x + calculateSum xs       -- Recursive case: add first element to sum of rest of list

-- | Function to calculate the average of a list of numbers
-- Takes in a list of numbers and returns the average as a float
calculateAverage :: [Int] -> Float
calculateAverage [] = 0                         -- Base case: empty list returns 0
calculateAverage xs = fromIntegral (calculateSum xs) / fromIntegral (length xs)   -- Calculates average using sum and length functions