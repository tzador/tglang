-- Creates an infinite list of Fibonacci numbers
fibonacci :: [Integer]
fibonacci = 1 : 1 : zipWith (+) fibonacci (tail fibonacci)
-- Returns the factorial of a number using recursion
factorial :: Int -> Int
factorial n
  | n < 0 = error "Factorial cannot be calculated for negative numbers"
  | n == 0 = 1
  | otherwise = n * factorial (n-1)
-- Implements a simple queue data structure using two lists
data Queue a = Queue [a] [a]
-- Adds an item to the end of the queue
enqueue :: a -> Queue a -> Queue a
enqueue x (Queue front back) = Queue front (x:back)
-- Removes the first item from the queue
dequeue :: Queue a -> Queue a
dequeue (Queue [] []) = error "Queue is empty"
dequeue (Queue [] back) = dequeue (Queue (reverse back) [])
dequeue (Queue (x:xs) back) = Queue xs back