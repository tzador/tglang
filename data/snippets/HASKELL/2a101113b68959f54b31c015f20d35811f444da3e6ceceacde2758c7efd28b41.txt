-- Create a list of even numbers using list comprehension and pattern matching
-- and then multiply each number by its position in the list
-- Output: [0, 2, 8, 24, 64, 160, 384]

-- Define a function that takes in a list and returns a new list with only even numbers after multiplying
evenAndMultiply :: [Int] -> [Int]
evenAndMultiply xs = [x * i | (x, i) <- zip xs [0..], even x]

-- Example usage
-- Input: evenAndMultiply [1, 3, 5, 7, 9, 11, 13]
-- Output: []
-- Explanation: The original list does not contain any even numbers
-- and therefore the filtered list is empty

-- Example usage
-- Input: evenAndMultiply [1, 2, 3, 4, 5, 6, 7, 8]
-- Output: [0, 8, 24, 64]
-- Explanation: The even numbers in the list are multiplied by their position,
-- resulting in a new list with only even numbers

-- Example usage
-- Input: evenAndMultiply [2, 4, 6, 8, 10, 12, 14]
-- Output: [0, 8, 24, 64, 160, 384]
-- Explanation: The even numbers in the list are multiplied by their position,
-- resulting in a new list with only even numbers and larger values compared to the previous example

-- Other possible implementations using recursion
evenAndMultiplyRecursive :: [Int] -> [Int]
evenAndMultiplyRecursive [] = []
evenAndMultiplyRecursive (x:xs)
    | even x = x * (length xs) : evenAndMultiplyRecursive xs
    | otherwise = evenAndMultiplyRecursive xs