{-# LANGUAGE GeneralizedNewtypeDeriving #-}

{-|
Module: Example
Description: An example module showcasing the use of newtype deriving in Haskell.
-}
module Example where

import Data.Char (toUpper)

-- | A simple custom type representing a person's name.
newtype Name = Name String
  deriving (Eq, Show)

-- | An example function that takes a Name and capitalizes it.
capitalizeName :: Name -> Name
capitalizeName (Name n) = Name (map toUpper n)

-- | A custom type representing an age, using a bounded Int.
newtype Age = Age { getAge :: Int }
  deriving (Eq, Ord, Num, Real, Enum, Integral, Show)

-- | An example function that checks if a person is old enough to vote.
canVote :: Age -> Bool
canVote age = getAge age >= 18