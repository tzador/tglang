import Data.List

-- define a function that takes in two lists and returns the intersection of the two
intersect :: (Eq a) => [a] -> [a] -> [a]
intersect xs ys = [x | x <- xs, y <- ys, x == y]

-- define a function that takes in a list and returns the powerset of that list
powerset :: [a] -> [[a]]
powerset xs = filterM (const [True, False]) xs

-- define a function that checks if a list is a palindrome
isPalindrome :: (Eq a) => [a] -> Bool
isPalindrome xs = if xs == reverse xs then True else False

main = do
    -- create two example lists to use in our functions
    let list1 = [1,2,3,4,5]
    let list2 = [4,5,6,7,8]
    
    -- print out the intersection of list1 and list2
    putStrLn "The intersection of list1 and list2 is:"
    print (intersect list1 list2)
    
    -- print out the powerset of list1
    putStrLn "The powerset of list1 is:"
    print (powerset list1)
    
    -- check if list1 is a palindrome
    putStrLn "Is list1 a palindrome?"
    print (isPalindrome list1)
    
    -- check if list2 is a palindrome
    putStrLn "Is list2 a palindrome?"
    print (isPalindrome list2)

-- Output:
--