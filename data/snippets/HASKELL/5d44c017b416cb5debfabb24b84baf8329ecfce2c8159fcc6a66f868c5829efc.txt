module Main where

-- import necessary libraries
import Data.List
import System.IO

-- define a data type containing a tuple of integers and a boolean
data NumberTuple = NumberTuple (Int, Int) Bool

-- create an instance of Show for NumberTuple
instance Show NumberTuple where
  show (NumberTuple (x,y) b) = "The tuple contains " ++ show x ++ " and " ++ show y ++ ", with a boolean of " ++ show b ++ "."

-- create a function that takes in an integer and returns a list of NumberTuples that contain that integer
genNumberTuples :: Int -> [NumberTuple]
genNumberTuples x = [(NumberTuple (x, i) (x `mod` i == 0)) | i <- [1..x]]

-- main function to print out a list of NumberTuples for the integer 10
main :: IO ()
main = do
  let numberTuples = genNumberTuples 10
  putStrLn $ intercalate "\n" $ map show numberTuples