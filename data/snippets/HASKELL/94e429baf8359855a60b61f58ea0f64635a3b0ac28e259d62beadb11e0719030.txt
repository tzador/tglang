import Data.List (permutations) -- Importing the permutations function from the Data.List module

-- Function to generate all possible unique combinations of a list
combinations :: [a] -> [[a]]
combinations [] = [[]] -- base case
combinations (x:xs) = [x:ys | ys <- combinations xs] ++ combinations xs -- Recursive call to generate all combinations

-- Function to generate all possible ways to arrange elements in a list
arrangements :: [a] -> [[a]]
arrangements [] = [[]] -- base case
arrangements xs = [y:ys | y <- xs , ys <- arrangements (delete y xs)] -- Recursive call using list comprehension

-- Function to generate all possible permutations of a list
permutations :: [a] -> [[a]]
permutations [] = [[]] -- base case
permutations xs = [y:ys | y <- xs, ys <- permutations (delete y xs)] -- Recursive call using list comprehension

-- Example usage
main = do
    let list = [1,2,3]
    let allCombinations = combinations list -- Generating all combinations of the list
    let allArrangements = arrangements list -- Generating all arrangements of the list
    let allPermutations = permutations list -- Generating all permutations of the list
    putStrLn "All possible combinations:"
    print allCombinations
    putStrLn "All possible arrangements:"
    print allArrangements
    putStrLn "All possible permutations:"
    print allPermutations