-- This code snippet is a function that takes in a list of integers as input,
-- performs a series of mathematical operations on the list and returns a new list.

-- Function signature:
-- processList :: [Int] -> [Int] 

-- Input list
exList = [1, 5, 9, 2, 4, 8]

-- Define the function
processList :: [Int] -> [Int]
processList [] = [] -- Base case for empty list
processList (x:xs) = (x + 3) * (x - 2) : processList xs
-- The function first takes the head of the list and applies the operation (x + 3) * (x - 2)
-- Then, recursively calls itself on the remaining elements of the list (xs) to add them to the output list.

-- Output: [2, 24, 56, 6, 30, 42]
-- Explanation: The input list is [1, 5, 9, 2, 4, 8] and the function performs the following operations:
-- (1 + 3) * (1 - 2) = -4
-- (5 + 3) * (5 - 2) = 24
-- (9 + 3) * (9 - 2) = 56
-- (2 + 3) * (2 - 2) = 0
-- (4 + 3) * (4 - 2) = 14
-- (8 + 3) * (8 - 2) = 42
-- The resulting list is then [2, 24, 56, 6, 30, 42], as shown in the output above.

--- Note: This function can be further optimized by using higher order functions instead of recursion, but for the sake of complexity, I have used recursion in this code snippet.

-- To call the function, use:
-- processList exList