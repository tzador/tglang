-- Function to recursively calculate the factorial of a number
factorial :: Integer -> Integer
factorial n =
    if n < 0 then error "Factorial not defined for negative numbers"
    else if n == 0 then 1
    else n * factorial (n-1)

-- Function to find the nth number in the Fibonacci sequence
fibonacci :: Integer -> Integer
fibonacci n =
    if n < 0 then error "Fibonacci sequence not defined for negative numbers"
    else if n == 0 then 0
    else if n == 1 || n == 2 then 1
    else fibonacci (n-1) + fibonacci (n-2)

-- Function to convert a list of integers to a list of booleans, representing odd numbers
toOddBools :: [Integer] -> [Bool]
toOddBools [] = []
toOddBools (x:xs) =
    if x `mod` 2 == 0 then False : toOddBools xs
    else True : toOddBools xs

-- Function to perform a bubble sort on an unsorted list of integers
bubbleSort :: [Integer] -> [Integer]
bubbleSort [] = []
bubbleSort [x] = [x]
bubbleSort (x:y:xs) = 
    if x > y then y : bubbleSort (x:xs)
    else x : bubbleSort (y:xs)