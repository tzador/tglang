{-# LANGUAGE DeriveFunctor #-}

-- Define a binary tree data type that is parameterized over the type of values it can hold.
data BinaryTree a = Leaf a | Node (BinaryTree a) a (BinaryTree a) deriving (Functor)

-- Define a function that inserts a new value into a binary tree in the correct place.
insert :: Ord a => a -> BinaryTree a -> BinaryTree a
insert val (Leaf x) = if val < x
                      then Node (Leaf val) x Leaf x
                      else Node Leaf x (Leaf val)
insert val (Node left x right) = if val < x
                                 then Node (insert val left) x right
                                 else Node left x (insert val right)

-- Define a function that checks if a binary tree is a binary search tree by checking if left child is less than root and right child is greater than root.
isBST :: Ord a => BinaryTree a -> Bool
isBST (Leaf x) = True
isBST (Node left x right) = if x > minValue right && x < maxValue left
                            then isBST left && isBST right
                            else False

-- Define a function that returns the minimum value in a binary tree.
minValue :: BinaryTree a -> a
minValue (Leaf x) = x
minValue (Node left x _) = minValue left

-- Define a function that returns the maximum value in a binary tree.
maxValue :: BinaryTree a -> a
maxValue (Leaf x) = x
maxValue (Node _ x right) = maxValue right

-- Define a function that performs a pre-order traversal of a binary tree, returning the list of values encountered.
preOrder :: BinaryTree a -> [a]
preOrder (Leaf x) = [x]
preOrder (Node left x right) = x : preOrder left ++ preOrder right

-- Define a function that performs an in-order traversal of a binary tree, returning the list of values encountered.
inOrder :: BinaryTree a -> [a]
inOrder (Leaf x) = [x]
inOrder (Node left x right) = inOrder left ++ [x] ++ inOrder right

-- Define a function that performs a post-order traversal of a binary tree, returning the list of values encountered.
postOrder :: BinaryTree a -> [a]
postOrder (Leaf x) = [x]
postOrder (Node left x right) = postOrder left ++ postOrder right ++ [x]

-- Define an example binary tree to test the functions.
exampleTree :: BinaryTree Int
exampleTree = Node (Node (Leaf 1) 2 (Leaf 3)) 4 (Node (Leaf 5) 6 (Leaf 7))

-- Print the list of values encountered during pre-order traversal of the example tree.
main :: IO ()
main = print (preOrder exampleTree)

-- Output: [4,2,1,3,6,5,7]