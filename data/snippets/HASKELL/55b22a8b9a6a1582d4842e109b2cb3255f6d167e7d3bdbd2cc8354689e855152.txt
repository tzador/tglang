-- Function to calculate the factorial of a number
factorial :: Integer -> Integer
factorial 0 = 1 -- Base case of 0, factorial is 1
factorial n = n * factorial (n - 1) -- Recursive call of factorial function

-- Function to calculate the fibonacci sequence up to n
fibonacci :: Integer -> [Integer]
fibonacci 0 = [0] -- Base case of 0, fibonacci sequence is [0]
fibonacci 1 = [0, 1] -- Base case of 1, fibonacci sequence is [0, 1]
fibonacci n = prev ++ [sum (take 2 $ reverse prev)] -- Recursive call using take and reverse function
    where prev = fibonacci (n - 1) -- Previous fibonacci sequence

-- Function to calculate the nth prime number
primes :: [Integer]
primes = sieve [2..] -- Generate an infinite list starting from 2 and use the sieve function

sieve :: [Integer] -> [Integer]
sieve (p:xs) = p : sieve [x | x <- xs, mod x p /= 0] -- Remove multiples of prime from the list and continue sieving

nThPrime :: Int -> Integer
nThPrime n = last (take n primes) -- Get the nth element from the list of primes

-- Main function to take user input and print the results
main :: IO ()
main = do
    putStrLn "Enter a number to calculate its factorial:"
    n <- readLn :: IO Integer
    putStrLn ("Factorial of " ++ show n ++ ": " ++ show (factorial n))
    putStrLn "Enter a number to calculate the fibonacci sequence up to that number:"
    m <- readLn :: IO Integer
    putStrLn ("Fibonacci sequence up to " ++ show m ++ ": " ++ show (fibonacci m))
    putStrLn "Enter a number to calculate the nth prime number:"
    p <- readLn :: IO Int
    putStrLn ("The nth prime number is: " ++ show (nThPrime p))