-- | Represents a binary tree with elements of type 'a'
data BinaryTree a = EmptyTree | Node a (BinaryTree a) (BinaryTree a)

-- | Inserts an element into the binary tree
insert :: Ord a => a -> BinaryTree a -> BinaryTree a
insert x EmptyTree = Node x EmptyTree EmptyTree
insert x (Node y left right)
    | x == y = Node y left right
    | x < y  = Node y (insert x left) right
    | x > y  = Node y left (insert x right)

-- | Checks if an element is in the binary tree
contains :: Ord a => a -> BinaryTree a -> Bool
contains x EmptyTree = False
contains x (Node y left right)
    | x == y = True
    | x < y  = contains x left
    | x > y  = contains x right

-- | Returns the size of the binary tree
size :: BinaryTree a -> Int
size EmptyTree = 0
size (Node _ left right) = 1 + size left + size right

-- | Returns a list of all elements in the binary tree
toList :: BinaryTree a -> [a]
toList EmptyTree = []
toList (Node x left right) = [x] ++ toList left ++ toList right