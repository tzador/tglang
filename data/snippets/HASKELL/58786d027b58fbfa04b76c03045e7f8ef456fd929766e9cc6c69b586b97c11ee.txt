~~~{.haskell}
-- Function for calculating the factorial of a number
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- Function for calculating the binomial coefficient of two numbers
binomial :: Integer -> Integer -> Integer
binomial n k
    | k == 0 = 1
    | k > n = 0
    | otherwise = factorial n `div` (factorial k * factorial (n - k))

-- List comprehension for generating all possible combinations of n elements from a given list
combinations :: Int -> [a] -> [[a]]
combinations 0 _ = [[]]
combinations n xs = [y:ys | y:xs' <- tails xs, ys <- combinations (n-1) xs']

-- Function for finding the count of occurrences of each element in a list
countElements :: (Eq a) => [a] -> [Int]
countElements [] = []
countElements (x:xs) = length (filter (== x) xs) + 1 : countElements (filter (/= x) xs)
~~~