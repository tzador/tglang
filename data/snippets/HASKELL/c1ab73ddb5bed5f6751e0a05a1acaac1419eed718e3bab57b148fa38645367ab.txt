{-# LANGUAGE LambdaCase #-}

import Control.Monad (join)

-- | Apply a function to a value wrapped in a monadic context.
--   If the value is 'Nothing', return 'Nothing'.
--   If the function returns 'Nothing', return 'Nothing'.
--   Otherwise, return the function applied to the value.
applyMaybe :: Monad m => m (Maybe a) -> (a -> m (Maybe b)) -> m (Maybe b)
applyMaybe m f =
    m >>= \case
        Nothing -> return Nothing
        Just x -> f x

-- | Runs a function on a list of values and returns all the results in a list.
--   If any of the values return 'Nothing', the final result will be 'Nothing'.
runMaybe :: Monad m => [m (Maybe a)] -> m (Maybe [a])
runMaybe =
    foldr (\m acc -> applyMaybe m (\x -> fmap (x:) acc)) (return $ Just [])
    . map (fmap join)