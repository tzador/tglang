-- Function to calculate the sum of squares of all odd numbers in a list
sumOfOddSquares :: [Int] -> Int
sumOfOddSquares = foldl (\acc x -> if odd x then acc + x^2 else acc) 0

-- Function to get the nth element of the Fibonacci sequence
fib :: Int -> Int
fib n = fibHelper n (0, 1)

-- Helper function for fib
fibHelper :: Int -> (Int, Int) -> Int
fibHelper 0 (a, b) = a
fibHelper n (a, b) = fibHelper (n-1) (b, a+b)

-- Function to check if a number is prime
isPrime :: Int -> Bool
isPrime n = null [x | x <- [2..n-1], n `mod` x == 0]

-- Function to get the next prime number after a given number
nextPrime :: Int -> Int
nextPrime n = if isPrime (n+1) then n+1 else nextPrime (n+1)

-- Function to get a list of prime numbers up to a given limit
primeList :: Int -> [Int]
primeList limit = [x | x <- [2..limit], isPrime x]

-- Function to remove duplicates from a list while maintaining order
removeDuplicates :: Eq a => [a] -> [a]
removeDuplicates = foldl (\acc x -> if x `elem` acc then acc else acc ++ [x]) []

-- Function to combine two lists by alternating elements
combineLists :: [a] -> [a] -> [a]
combineLists xs ys = foldr (\x acc -> x : acc) ys xs