-- Function to calculate the sum of numbers in a list
sumList :: [Int] -> Int
sumList [] = 0                              -- Base case: empty list returns 0
sumList (x:xs) = x + sumList xs             -- Recursive case: adds first element
                                            -- to the sum of the rest of the list

-- Function to filter for even numbers in a list
filterEven :: [Int] -> [Int]
filterEven [] = []                              -- Base case: empty list returns empty list
filterEven (x:xs) = if x `mod` 2 == 0           -- Conditional statement to check for even number
                     then x : filterEven xs    -- If even, add to filtered list
                     else filterEven xs        -- If not, continue to the next element

main :: IO ()
main = do                                   -- Main function for IO (input/output)
    putStrLn "Enter a list of numbers: "    -- Prompt user for a list of numbers
    input <- getLine                       -- Get input from user
    let list = map read (words input)      -- Convert string input into list of integers
    putStrLn $ "The sum is: " ++ show (sumList list)         -- Print the sum of the list
    putStrLn $ "The even numbers are: " ++ show (filterEven list)  -- Print the filtered list of even numbers