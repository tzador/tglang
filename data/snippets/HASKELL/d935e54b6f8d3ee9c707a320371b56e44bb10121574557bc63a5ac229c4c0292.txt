-- Define a custom data type for a binary tree with values of any type
data BinaryTree a = Leaf | Node (BinaryTree a) a (BinaryTree a)

-- Define a function that takes in a binary tree and returns its size
binaryTreeSize :: BinaryTree a -> Int
binaryTreeSize Leaf = 0
binaryTreeSize (Node left _ right) = 1 + binaryTreeSize left + binaryTreeSize right

-- Define a function that inserts a value into a binary tree in the correct position
insert :: (Ord a) => a -> BinaryTree a -> BinaryTree a
insert value Leaf = Node Leaf value Leaf
insert value (Node left root right)
    | value < root = Node (insert value left) root right
    | otherwise = Node left root (insert value right)

-- Define a function that checks if a binary tree is a binary search tree
isBinarySearchTree :: (Ord a) => BinaryTree a -> Bool
isBinarySearchTree Leaf = True
isBinarySearchTree (Node left root right) = isOrdered left root && isOrdered right root
    where isOrdered Leaf _ = True
          isOrdered (Node l rtree r) parent
            | parent <= r = False
            | otherwise = isOrdered ltree parent && isOrdered rtree parent

-- Create a sample binary tree with integers
exampleTree :: BinaryTree Int
exampleTree = Node (Node (Node Leaf 4 Leaf) 2 (Node Leaf 5 Leaf)) 1 (Node (Node Leaf 6 Leaf) 3 (Node Leaf 7 Leaf))