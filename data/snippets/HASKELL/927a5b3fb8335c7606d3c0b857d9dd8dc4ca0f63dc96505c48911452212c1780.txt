{-# LANGUAGE OverloadedStrings #-}
--Define types
data Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show)

--Define a function for preorder traversal
preorder :: Tree a -> [a]
preorder Empty = []
preorder (Node val left right) = [val] ++ preorder left ++ preorder right

--Define a function for inorder traversal
inorder :: Tree a -> [a]
inorder Empty = []
inorder (Node val left right) = inorder left ++ [val] ++ inorder right

--Define a function for postorder traversal
postorder :: Tree a -> [a]
postorder Empty = []
postorder (Node val left right) = postorder left ++ postorder right ++ [val]

--Define a function for calculating the height of a tree
height :: Tree a -> Int
height Empty = 0
height (Node val left right) = 1 + max (height left) (height right)

--Define a function for inserting a value into a binary search tree
insert :: (Ord a) => a -> Tree a -> Tree a
insert val Empty = Node val Empty Empty
insert val (Node root left right)
    | val <= root = Node root (insert val left) right
    | otherwise = Node root left (insert val right)

--Define a function for creating a binary search tree from a list of values
createBST :: (Ord a) => [a] -> Tree a
createBST [] = Empty
createBST (x:xs) = insert x (createBST xs)

--Example usage
main = do
    let tree = createBST [5, 6, 3, 1, 7, 2, 4] --Creates a binary search tree with values 1, 2, 3, 4, 5, 6, 7
    putStrLn $ "Preorder traversal: " ++ show (preorder tree) --Prints [5, 3, 1, 2, 4, 6, 7]
    putStrLn $ "Inorder traversal: " ++ show (inorder tree) --Prints [1, 2, 3, 4, 5, 6, 7]
    putStrLn $ "Postorder traversal: " ++ show (postorder tree) --Prints [2, 1, 4, 3, 7, 6, 5]
    putStrLn $ "Height of tree: " ++ show (height tree) --Prints 3
    putStrLn $ "Tree after inserting 8: " ++ show (insert 8 tree) --Prints Node 5 (Node 3 (Node 1 Empty (Node 2 Empty Empty)) (Node 4 Empty Empty)) (Node 6 Empty (Node 7 Empty (Node 8 Empty Empty)))