data Tree a = Empty | Node a (Tree a) (Tree a) -- defines a binary tree datatype

-- function to insert an element into the tree while maintaining the binary tree properties
insert :: (Ord a) => a -> Tree a -> Tree a 
insert x Empty = Node x Empty Empty -- if tree is empty, create a new node with x as value
insert x (Node val left right) -- if tree is not empty, check if x is smaller, larger, or equal to current node value
    | x == val = Node val left right -- if x is equal, just return the same tree 
    | x < val = Node val (insert x left) right -- if x is smaller, recursively insert into the left subtree
    | otherwise = Node val left (insert x right) -- if x is larger, recursively insert into the right subtree

-- function to check if an element is in the tree
inTree :: (Ord a) => a -> Tree a -> Bool 
inTree x Empty = False -- if tree is empty, element is not in the tree
inTree x (Node val left right) -- if tree is not empty, check if x is equal to current node value
    | x == val = True -- if x is equal, element is in the tree
    | x < val = inTree x left -- if x is smaller, recursively check the left subtree
    | otherwise = inTree x right -- if x is larger, recursively check the right subtree

-- function to convert a tree to a list in-order
treeToList :: (Ord a) => Tree a -> [a]
treeToList Empty = [] -- if tree is empty, return empty list
treeToList (Node val left right) = treeToList left ++ [val] ++ treeToList right -- recursively add left subtree, current node value, and right subtree to list

-- example: create a tree and insert elements
tree = insert 5 $ insert 3 $ insert 8 $ insert 1 $ insert 7 $ insert 4 $ insert 9 $ insert 2 $ insert 6 $ Empty
-- output: Node 5 (Node 3 (Node 1 Empty (Node 2 Empty Empty)) (Node 4 Empty Empty)) (Node 8 (Node 7 (Node 6 Empty Empty) Empty) (Node 9 Empty Empty))

-- example: check if element is in tree
inTree 7 tree -- output: True

-- example: convert tree to list
treeToList tree -- output: [1,2,3,4,5,6,7,8,9]