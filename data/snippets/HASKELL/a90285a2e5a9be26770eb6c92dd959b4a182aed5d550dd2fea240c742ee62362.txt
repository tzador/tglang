data BinaryTree a = Leaf a | Node (BinaryTree a) a (BinaryTree a)
-- This defines a binary tree data structure, where a is the type of values stored in the tree.

instance Functor BinaryTree where
    fmap _ (Leaf value) = Leaf value  -- If the given function is not applicable to leaves, return the same leaf.
    fmap f (Node left value right) = Node (fmap f left) (f value) (fmap f right)
    -- If the given function is applicable to a node, recursively apply it to the left and right subtrees.

add :: (Num a) => BinaryTree a -> a -> BinaryTree a
add (Leaf value) newValue = Leaf (value + newValue)  -- Add the new value to the leaf.
add (Node left value right) newValue = Node (add left newValue) (value + newValue) (add right newValue)
-- Add the new value to the node and recursively apply to the left and right subtrees.

flipTree :: BinaryTree a -> BinaryTree a
flipTree (Leaf value) = Leaf value  -- If the tree only has one leaf, return the original tree.
flipTree (Node left value right) = Node (flipTree right) (value) (flipTree left)
-- Flip the left and right subtrees and return a new node with the flipped subtrees.

height :: BinaryTree a -> Int
height (Leaf _) = 0  -- The height of a leaf is 0.
height (Node left _ right) = 1 + max (height left) (height right)
-- Get the maximum height of the left and right subtrees and add 1 for the current node.