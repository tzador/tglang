-- | Function to calculate the Fibonacci sequence up to a given number
fibonacci :: Int -> [Int]
fibonacci n
    | n <= 0    = [] -- Base case, return an empty list
    | n == 1    = [0] -- Case for n = 1, return the first number in the sequence
    | n == 2    = [0, 1] -- Case for n = 2, return the first two numbers in the sequence
    | otherwise = let -- Recursive case, use pattern matching to access the previous two numbers in the sequence
        (a:b:_) = fibonacci (n - 1) -- Get the previous two numbers by recursively calling the function
        in fibonacci (n - 1) ++ [(a + b)] -- Add the sum of the previous two numbers to the list

-- Usage example:
-- fibonacci 10 == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]