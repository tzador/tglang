module Main where

import Data.List

mean :: Fractional a => [a] -> a
mean xs = sum xs / fromIntegral (length xs)

median :: Ord a => [a] -> a
median xs = sort xs !! (length xs `div` 2)

mode :: Ord a => [a] -> a
mode xs = head $ maximumBy (comparing length) $ group $ sort xs

data Frequency a = Element !a | Times !Int deriving (Eq, Ord, Show)

freq :: (Ord a) => [a] -> [Frequency a]
freq xs = [Times count | (x:xs') <- group $ sort xs, let count = length xs' + 1, xs == x:xs']

cons :: (Show a, Ord a, Num a) => [Frequency a] -> IO ()
cons xs = mapM_ (print . changeCol) $ foldl1 (zipWith (+)) $ map (concatMap (\(Element a) (Times b) -> replicate b a) . replicate 1) xs
 where changeCol x
         | x <= 30 = Blue ++ x
         | x <= 60 = Green ++ x
         | x <= 85 = Red ++ x
         | otherwise = [x]
       (Blue,Green,Red) = ([|"," ++ "\x1b[34m"|], [->] ++ "\x1b[32m"], [->] ++ "\x1b[31m"])

main = do
    let list = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]
    let meanValue = mean list
    let medianValue = median list
    let modeValue = mode list
    let frequencies = freq list
    putStrLn "Mean: "
    print meanValue
    putStrLn "Median: "
    print medianValue
    putStrLn "Mode: "
    print modeValue
    putStrLn "Frequencies: "
    print frequencies