import Data.List (sort) -- import sort function from Data.List library

-- | Calculates the factorial of a given number
-- >>> factorial 5
-- 120
factorial :: Int -> Int
factorial n = product [1..n] -- uses the product function to calculate the factorial

-- | Finds the largest prime number below a given limit using
-- | the sieve of Eratosthenes algorithm
-- >>> sieve 20
-- 19
sieve :: Int -> Int
sieve limit = last . filter isPrime $ [2..limit] where
    isPrime :: Int -> Bool
    isPrime n = all (\x -> n `mod` x /= 0) [2..floor . sqrt $ fromIntegral n]

-- | Generates a list of Fibonacci numbers up to a given limit
-- >>> fib 10
-- [0, 1, 1, 2, 3, 5, 8]
fib :: Int -> [Int]
fib limit = takeWhile (<limit) $ 0 : 1 : zipWith (+) (fib limit) (tail (fib limit))