-- | Function to calculate the kth element in the Fibonacci sequence
fibonacci :: Int -> Int
fibonacci n = if n <= 1
                then 1
                else fibonacci (n-1) + fibonacci (n-2)

-- | Function to calculate the factorial of a number using recursion
factorial :: Int -> Int
factorial n = if n <= 1
                then 1
                else n * factorial (n-1)

-- | Function to calculate the sum of all numbers in a list using pattern matching and recursion
sumList :: [Int] -> Int
sumList [] = 0
sumList (x:xs) = x + sumList xs

-- | Function to check if a number is prime or not using recursion and list comprehension
isPrime :: Int -> Bool
isPrime n = if n <= 1
                then False
                else null [x | x <- [2..n-1], n `mod` x == 0]

-- | Function to map a function over a list using list comprehension and recursion
mapList :: (a -> b) -> [a] -> [b]
mapList f [] = []
mapList f (x:xs) = f x : mapList f xs

-- | Function to filter a list using a predicate function and recursion
filterList :: (a -> Bool) -> [a] -> [a]
filterList p [] = []
filterList p (x:xs) = if p x
                        then x : filterList p xs
                        else filterList p xs