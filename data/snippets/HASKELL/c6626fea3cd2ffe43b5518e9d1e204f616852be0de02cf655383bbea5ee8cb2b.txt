-- This function takes in a list of numbers and returns the sum of all numbers above zero
-- with the help of recursion and pattern matching

sumPositive :: [Int] -> Int
sumPositive list = case list of
  [] -> 0 -- Base case: empty list returns 0
  (x:xs) 
    | x > 0 -> x + sumPositive xs -- Recursive case: add current number and call function on rest of list
    | otherwise -> sumPositive xs -- Recursive case: ignore current number and call function on rest of list

-- Example usage:
-- sumPositive [1, -2, 3, 0, 4] => 8 (1 + 3 + 4)