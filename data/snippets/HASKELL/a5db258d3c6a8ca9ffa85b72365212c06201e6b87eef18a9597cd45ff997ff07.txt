-- Define a function to calculate the factorial of a number
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- Define a function to check if a number is prime
isPrime :: Integer -> Bool
isPrime 1 = False
isPrime n = null [x | x <- [2..floor(sqrt(fromIntegral n))], n `mod` x == 0]

-- Define a higher-order function to apply a function to each element of a list
map :: (a -> b) -> [a] -> [b]
map _ [] = []
map f (x:xs) = f x : map f xs

-- Define a function to calculate the n-th Fibonacci number using dynamic programming
fibonacci :: Integer -> Integer
fibonacci n = fiblist !! n
  where fiblist = 0:1:(map (\x -> (fiblist !! (x-2)) + (fiblist !! (x-1))) [2..])

-- Define a function to calculate the sum of a list of numbers using tail recursion
sum :: [Int] -> Int
sum' :: [Int] -> Int -> Int
sum' [] acc = acc
sum' (x:xs) acc = sum' xs (x + acc)

sum xs = sum' xs 0