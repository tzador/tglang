{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Define a multi-parameter class for operations on a binary tree
class TreeOps a b where
  -- Insert an element into a binary tree
  insert :: a -> b -> b
  -- Check if an element exists in a binary tree
  contains :: a -> b -> Bool
  -- Merge two binary trees together using a custom merge function
  mergeWith :: (a -> a -> a) -> b -> b -> b

-- Create an instance for the binary tree data structure
data BinaryTree a = Empty | Node a (BinaryTree a) (BinaryTree a)

instance TreeOps a (BinaryTree a) where
  -- Define the insert function for binary trees
  insert x Empty = Node x Empty Empty
  insert x (Node y left right)
    | x < y = Node y (insert x left) right
    | x > y = Node y left (insert x right)
    | otherwise = Node y left right

  -- Define the contains function for binary trees
  contains x Empty = False
  contains x (Node y left right)
    | x < y = contains x left
    | x > y = contains x right
    | otherwise = True

  -- Define the mergeWith function for binary trees
  mergeWith f t1 Empty = t1
  mergeWith f Empty t2 = t2
  mergeWith f (Node x left1 right1) (Node y left2 right2) =
    Node (f x y) (mergeWith f left1 left2) (mergeWith f right1 right2)