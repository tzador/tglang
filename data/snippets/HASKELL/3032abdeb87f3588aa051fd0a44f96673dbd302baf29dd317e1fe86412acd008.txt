{-
This is a multi-line comment in Haskell.
It is used to provide explanations and documentation for code.
-}

--This is a single-line comment in Haskell, it is used to provide brief explanations for code.

--Importing the 'Data.Map' module for working with maps
import qualified Data.Map as Map

--Defining a recursive function 'fibonacci' to calculate the fibonacci sequence up to the given 'n' number
fibonacci :: Int -> [Int]
fibonacci 0 = [0]
fibonacci 1 = [0, 1]
fibonacci n = fibonacci (n-1) ++ [fibonacci (n-1) !! (n-1) + fibonacci (n-2) !! (n-2)]

--Creating a Map that maps roman numerals to their respective integer values
romanNumerals :: Map.Map Char Int
romanNumerals = Map.fromList [('I', 1), ('V', 5), ('X', 10), ('L', 50), ('C', 100), ('D', 500), ('M', 1000)]

--Defining a function 'romanToInt' that converts a given roman numeral string to its integer value
romanToInt :: String -> Int
romanToInt "" = 0 --base case if input is an empty string
romanToInt (x:xs)
    | length xs /= 0 && romanNumerals Map.! x < romanNumerals Map.! (head xs) = (romanNumerals Map.! x) * (-1) + romanToInt xs
    --first element is smaller, subtract its value from accumulated value and recurse on remaining string
    | otherwise = (romanNumerals Map.! x) + romanToInt xs
    --first element is equal or larger, add its value to accumulated value and recurse on remaining string

--Calculating the sum of all fibonacci numbers that are also roman numerals, up to a given 'n' number
solution :: Int -> Int
solution n = foldl (+) 0 $ map romanToInt $ filter (\x -> x `elem` (map show $ fibonacci n)) $ map Map.keys romanNumerals

--Printing the solution for 'n = 10'
main :: IO()
main = putStrLn $ "The solution for n=10 is: " ++ show (solution 10)