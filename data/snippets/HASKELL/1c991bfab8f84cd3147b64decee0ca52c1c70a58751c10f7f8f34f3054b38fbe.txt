-- Function to generate the nth Fibonacci number
fibonacci :: Int -> Int
fibonacci n = 
    if n < 2
        then n 
        else fibonacci (n-1) + fibonacci (n-2)
        
-- Function to find the length of a list
length :: [a] -> Int
length [] = 0
length (x:xs) = 1 + length xs

-- Function to filter out odd numbers from a list
filterOdd :: [Int] -> [Int]
filterOdd [] = []
filterOdd (x:xs) = 
    if x `mod` 2 == 0 
        then filterOdd xs
        else x : filterOdd xs

-- Function to map a function to each element of a list
map :: (a -> b) -> [a] -> [b]
map _ [] = []
map f (x:xs) = f x : map f xs

-- Example usage
main :: IO ()
main = do
    let l = [1,2,3,4,5,6]
    putStrLn "Original list:"
    print l
    
    let fib = map fibonacci l
    putStrLn "Fibonacci numbers for each element:"
    print fib
    
    let evenNumbers = filterOdd l
    putStrLn "Filtered list with only odd numbers:"
    print evenNumbers
    
    putStrLn "Length of original list:"
    print $ length l
    
    putStrLn "Length of filtered list:"
    print $ length evenNumbers