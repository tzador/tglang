-- Function to find the length of a list
len :: [a] -> Int
len [] = 0 -- Base case, an empty list has length 0
len (x:xs) = 1 + len xs -- Recursive case, add 1 to the length of the remaining list

-- Using a list comprehension to multiply each element in the list by 2
multiplyBy2 :: Num a => [a] -> [a]
multiplyBy2 list = [x * 2 | x <- list]

-- Pattern matching to check if the first element in the list is greater than the second
isGreaterThan :: Ord a => [a] -> Bool
isGreaterThan (x:y:_) | x > y = True
                      | otherwise = False