{- This function takes in a list and returns a new list
containing only even numbers -}
evenList :: [Int] -> [Int]
evenList [] = []
evenList (x:xs)
  | x `mod` 2 == 0 = x:evenList xs  -- adds x to the new list if it is even
  | otherwise = evenList xs  -- otherwise, just calls the function again on the rest of the input list

{- This function takes in a list of strings and returns a new list
containing the length of each string -}
stringLenList :: [String] -> [Int]
stringLenList [] = []
stringLenList (x:xs) = length x:stringLenList xs  -- adds the length of x to the new list and calls the function again on the rest of the input list

{- This function takes in two lists and returns a new list
containing the elements of both lists, but only if the element 
is not present in both lists -}
uniqueList :: (Eq a) => [a] -> [a] -> [a]
uniqueList [] ys = ys  -- if first list is empty, return second list
uniqueList (x:xs) ys
  | x `elem` ys = uniqueList xs ys  -- if x is already in ys, don't add it to the new list
  | otherwise = x:uniqueList xs ys  -- otherwise, add x to the new list and call function again on rest of first list and ys

{- This function takes in a list of tuples and returns a new list
where the elements of each tuple are swapped -}
swapTuples :: [(a,b)] -> [(b,a)]
swapTuples [] = []
swapTuples ((x,y):xs) = (y,x):swapTuples xs  -- swaps x and y in each tuple and adds it to the new list, calls function again on rest of list

{- This function takes in a list of lists and returns a new list
containing the length of each inner list -}
listLenList :: [[a]] -> [Int]
listLenList [] = []
listLenList (x:xs) = length x:listLenList xs  -- adds the length of x to the new list and calls the function again on the rest of the input list