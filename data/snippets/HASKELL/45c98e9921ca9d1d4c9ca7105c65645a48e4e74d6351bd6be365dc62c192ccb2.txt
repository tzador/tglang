{-
This code snippet uses the 'MonadState' type class in the 'mtl' library to perform state manipulation.
It defines a function 'addToState' which takes in an 'Int' and adds it to the current state. 
The current state is then printed out using the 'get' function in 'MonadState'.

Requires imports: Control.Monad.State
-}

{-# LANGUAGE FlexibleContexts #-}

import Control.Monad.State

-- |'addToState' function takes in an 'Int' and adds it to the current state
addToState :: MonadState Int m => Int -> m ()
addToState n = modify (+n)

-- initialize the initial state to be 0
initialState :: Int
initialState = 0
  
-- run the stateful computation using 'runState'
main :: IO ()
main = print $ runState (addToState 5) initialState