module Main where

import Data.List

-- | Function that takes in two lists and returns their symmetrical difference
-- Using list comprehension and the symmetric difference operator (/)
symmetricalDiff :: Eq a => [a] -> [a] -> [a]
symmetricalDiff xs ys = [x / y | x <- xs, y <- ys, not $ x == y]

main :: IO ()
main = do
  -- Prompt user for two lists
  putStrLn "Enter first list:"
  input1 <- getLine
  putStrLn "Enter second list:"
  input2 <- getLine

  -- Parse input strings to lists of integers
  let list1 = map read $ words input1 :: [Int]
      list2 = map read $ words input2 :: [Int]

  -- Calculate symmetrical difference and print result
  let result = symmetricalDiff list1 list2
  putStrLn $ "Symmetrical difference: " ++ show result