{-# LANGUAGE GADTs, KindSignatures #-}
{-|
Module : Test
Description : This is a test module

This is a code snippet that demonstrates the use of
Generalized Algebraic Data Types (GADTs) and Kind Signatures in Haskell.

data Tree :: * -> * where 
      Leaf :: a -> Tree a 
      Node :: Tree a -> Tree a -> Tree a 

instance Show a => Show (Tree a) where
      show (Leaf x) = "Leaf " ++ show x
      show (Node l r) = "(" ++ show l ++  " :<| " ++ show r ++ ")"

class Foldable f where
      foldr :: (a -> b -> b) -> b -> f a -> b

instance Foldable Tree where
      foldr f z (Leaf x) = f x z
      foldr f z (Node l r) = foldr f (foldr f z r) l

toList :: (Foldable t) => t a -> [a]
toList = foldr (:) []

testTree :: Tree Int
testTree = Node (Node (Leaf 3) (Leaf 4)) (Leaf 5)

main :: IO ()
main = print (toList testTree) -- Outputs [3,4,5]