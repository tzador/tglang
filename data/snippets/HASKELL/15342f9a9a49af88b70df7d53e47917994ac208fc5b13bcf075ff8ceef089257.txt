-- Define a function that takes two lists and returns the Cartesian product of the two
cartesianProduct :: [a] -> [b] -> [(a, b)]
cartesianProduct xs ys = [(x,y) | x <- xs, y <- ys]

-- Define a function that takes a list of tuples and returns the first element of each tuple
getFirstElements :: [(a, b)] -> [a]
getFirstElements xs = map (\(x,_) -> x) xs

-- Define a function that takes a list of integers and returns the sum of all even numbers in the list
sumOfEvens :: [Int] -> Int
sumOfEvens xs = sum [x | x <- xs, x `mod` 2 == 0]

-- Define a function that takes a list of strings and returns the number of characters in the longest string
longestString :: [String] -> Int
longestString xs = maximum (map length xs)

-- Define a function that takes a string and returns the number of vowels in the string
countVowels :: String -> Int
countVowels str = length [x | x <- str, x `elem` "aeiouAEIOU"]

-- Define a function that takes a list of integers and returns a list of their prime factors
primeFactors :: [Int] -> [[Int]]
primeFactors xs = [[factor | factor <- [2..x], x `mod` factor == 0] | x <- xs]

-- Define a function that takes two integers and returns their greatest common divisor using Euclid's algorithm
gcd :: Int -> Int -> Int
gcd a b = if b == 0 then a else (gcd b (a `mod` b))

-- Define a function that takes a list of integers and returns a list of only the prime numbers in the list
getPrimes :: [Int] -> [Int]
getPrimes xs = [x | x <- xs, all (\y -> x `mod` y /= 0) [2..(x-1)]]