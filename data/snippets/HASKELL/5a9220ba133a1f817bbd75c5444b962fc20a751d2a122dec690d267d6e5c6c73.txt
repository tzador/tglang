module Main where
import Data.List -- importing List module
import System.IO -- importing IO module

-- defining a function to find the sum of a list using recursion
sumList :: [Int] -> Int
sumList [] = 0 -- base case: empty list has sum of 0
sumList (x:xs) = x + sumList xs -- recursive case: add current element to sum of rest of list

-- defining a function to find the product of a list using recursion
productList :: [Int] -> Int
productList [] = 1 -- base case: empty list has product of 1
productList (x:xs) = x * productList xs -- recursive case: multiply current element with product of rest of list

-- main function to run the program
main = do
  putStrLn "Enter a list of numbers: "
  input <- getLine -- taking input from user
  let numbers = map read (words input) :: [Int] -- converting input into a list of integers
  putStrLn ("Sum of list: " ++ show (sumList numbers)) -- showing the sum of the list to user
  putStrLn ("Product of list: " ++ show (productList numbers)) -- showing the product of the list to user