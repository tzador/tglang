{-# LANGUAGE GADTs #-}
{-# LANGUAGE KindSignatures #-}
module Main where

-- | Example data type for a binary tree
data Tree a where
    Branch :: a       -- ^ Leaves of a tree
           -> Tree a  -- ^ Subtree on the left
           -> Tree a  -- ^ Subtree on the right
           -> Tree a  -- ^ Resulting tree
    Empty :: Tree a   -- ^ Empty tree

-- | Function to check if a tree is empty
isEmpty :: Tree a -> Bool
isEmpty Empty = True
isEmpty _ = False

-- | Function to insert an element into a tree
insert :: Ord a => a -> Tree a -> Tree a
insert x Empty = Branch x Empty Empty
insert x (Branch y left right)
    | x < y = Branch y (insert x left) right
    | x > y = Branch y left (insert x right)
    | otherwise = Branch y left right

-- | Function to find the minimum element in a tree
minValue :: Ord a => Tree a -> Maybe a
minValue Empty = Nothing
minValue (Branch x Empty _) = Just x
minValue (Branch _ left _) = minValue left

-- | Function to find the maximum element in a tree
maxValue :: Ord a => Tree a -> Maybe a
maxValue Empty = Nothing
maxValue (Branch x _ Empty) = Just x
maxValue (Branch _ _ right) = maxValue right

-- | Function to check if an element is present in a tree
containsElement :: Ord a => a -> Tree a -> Bool
containsElement _ Empty = False
containsElement x (Branch y left right)
    | x == y = True
    | x < y = containsElement x left
    | x > y = containsElement x right

-- | Function to convert a tree to a list of elements
treeToList :: Tree a -> [a]
treeToList Empty = []
treeToList (Branch x left right) = treeToList left ++ [x] ++ treeToList right

main :: IO ()
main = do
    let tree = foldr insert Empty [8, 6, 10, 4, 7, 9, 12] -- ^ Create a tree with some elements using the `insert` function
    print (isEmpty tree) -- ^ Prints `False` since the tree is not empty
    print (containsElement 9 tree) -- ^ Prints `True` since 9 is present in the tree
    print (containsElement 5 tree) -- ^ Prints `False` since 5 is not present in the tree
    print (minValue tree) -- ^ Prints `Just 4` since 4 is the minimum element in the tree
    print (maxValue tree) -- ^ Prints `Just 12` since 12 is the maximum element in the tree
    print (treeToList tree) -- ^ Prints `[4,6,7,8,9,10,12]` which is the sorted list of elements in the tree