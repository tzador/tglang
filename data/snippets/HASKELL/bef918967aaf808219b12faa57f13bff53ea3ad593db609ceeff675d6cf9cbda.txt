-- Declares a function "factorial" which takes in an integer "n" 
-- and returns the factorial of "n" using recursion 
factorial :: Int -> Int 
factorial n = if n == 0 then 1 else n * factorial (n-1) 
 
-- Declares a function "fibonacci" which takes in an integer "n" 
-- and returns the "n"th number in the Fibonacci sequence 
fibonacci :: Int -> Int 
fibonacci n = if n == 0 then 0 else fibonacciHelper n 0 1 
 
-- Helper function for "fibonacci" which uses tail recursion 
fibonacciHelper :: Int -> Int -> Int -> Int 
fibonacciHelper n a b = if n == 1 then a else fibonacciHelper (n-1) b (a+b) 
 
-- Declares a function "sumDigits" which takes in an integer "n" 
-- and returns the sum of its digits using recursion 
sumDigits :: Int -> Int 
sumDigits n = if n < 10 then n else (n `mod` 10) + sumDigits (n `div` 10) 
 
-- Declares a function "isPrime" which takes in an integer "n" 
-- and returns whether or not "n" is a prime number 
isPrime :: Int -> Bool 
isPrime n = if n < 2 then False
           else helper n (floor (sqrt (fromIntegral n))) 
  where
      helper :: Int -> Int -> Bool
      helper n x
        | x == 1 = True
        | n `mod` x == 0 = False
        | otherwise = helper n (x-1) 
 
-- Declares a function "rotateLeft" which takes in a list "xs" and an integer "n" 
-- and returns the list with its elements rotated to the left "n" times 
rotateLeft :: [a] -> Int -> [a] 
rotateLeft xs n | n < 1 = xs 
                | otherwise = rotateLeft (tail xs ++ [head xs]) (n-1) 
 
-- Declares a function "zipWithIndex" which takes in a list "xs" 
-- and returns the list of tuples of "xs" elements and their indices 
zipWithIndex :: [a] -> [(a, Int)] 
zipWithIndex xs = zip xs [0..] 
 
-- Declares a function "quicksort" which takes in a list "xs" 
-- and returns the sorted list using the quicksort algorithm 
quicksort :: (Ord a) => [a] -> [a] 
quicksort [] = [] 
quicksort (x:xs) = smaller ++ [x] ++ larger 
  where smaller = quicksort [a | a <- xs, a <= x] 
        larger = quicksort [b | b <- xs, b > x]