-- Define a Tree data type with a generic type variable
data Tree a = Empty | Node a (Tree a) (Tree a)

-- Define a function to insert an element into the tree, maintaining the binary search property
insert :: (Ord a) => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty
insert x (Node val left right)
    | x < val = Node val (insert x left) right
    | x > val = Node val left (insert x right)
    | otherwise = Node x left right

-- Define a function to perform an in-order traversal of the tree and return a list of elements
inOrder :: Tree a -> [a]
inOrder Empty = []
inOrder (Node val left right) = inOrder left ++ [val] ++ inOrder right  -- recursive call to left and right subtrees, with current node value in between

-- Define a function to check if a given element is present in the tree
contains :: (Ord a) => a -> Tree a -> Bool
contains _ Empty = False
contains x (Node val left right)
    | x < val = contains x left
    | x > val = contains x right
    | otherwise = True  -- element is equal to current node value

-- Define a function to delete an element from the tree and maintain the binary search property
delete :: (Ord a) => a -> Tree a -> Tree a
delete _ Empty = Empty
delete x (Node val left right)
    | x < val = Node val (delete x left) right
    | x > val = Node val left (delete x right)
    | otherwise = case (left, right) of
        (Empty, Empty) -> Empty  -- If the node has no children, simply remove it
        (Empty, _) -> right  -- If the node has no left child, replace it with its right child
        (_, Empty) -> left  -- If the node has no right child, replace it with its left child
        _ -> let (successor, newLeft) = deleteSuccessor left  -- Find the successor of the current node by finding the minimum value in its left subtree, and delete it from its original position
             in Node successor newLeft right
    where
        -- Helper function to find and remove the minimum value in a tree and return both the value and the new tree
        deleteSuccessor :: (Ord a) => Tree a -> (a,Tree a)
        deleteSuccessor (Node val Empty right) = (val, right)
        deleteSuccessor (Node val left right) = let (minVal, newLeft) = deleteSuccessor left
                                                in (minVal, Node val newLeft right)