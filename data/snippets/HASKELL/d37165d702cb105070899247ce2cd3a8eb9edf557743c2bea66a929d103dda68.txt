module Main where
--This is a comment in Haskell

-- Define a function that calculates the factorial of a given number
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n-1)

-- Define a list of numbers 
numbers :: [Int]
numbers = [1, 3, 5, 7, 9]

-- Define a function that squares a list of numbers
squareList :: [Int] -> [Int]
squareList [] = []
squareList (x:xs) = x * x : squareList xs

-- Define a custom data type for a person
data Person = Person {
  name :: String,
  age :: Int,
  occupation :: String
  }

-- Define a function that prints out information about a person
printPerson :: Person -> String
printPerson person =
  "Name: " ++ name person ++ "\n" ++
  "Age: " ++ show (age person) ++ "\n" ++
  "Occupation: " ++ occupation person

main :: IO ()
main = do
  putStrLn "Enter a number to calculate its factorial:"
  num <- readLn :: IO Integer
  putStrLn ("The factorial of " ++ show num ++ " is " ++ show (factorial num))
  putStrLn "Square List:"
  putStrLn (show (squareList numbers))
  putStrLn "Person Information:"
  let person = Person "John" 25 "Software Engineer"
  putStrLn (printPerson person)