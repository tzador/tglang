{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE FlexibleInstances #-}

module Main where

-- Define a typeclass for a monoid
class Monoid a where
    -- Define an empty value of the type
    mempty :: a
    -- Define a function to combine two values
    mappend :: a -> a -> a

    {-# MINIMAL mempty, mappend #-}

-- Define an instance of the Monoid class for Integers
instance Monoid Integer where
    -- Set the empty value of Integer to 0
    mempty = 0
    -- Combine two Integers by adding them
    mappend = (+)

-- Define an instance of the Monoid class for Strings
instance Monoid String where
    -- Set the empty value of String to empty string
    mempty = ""
    -- Combine two Strings by concatenating them
    mappend = (++)

-- Define a typeclass for a functor
class Functor f where
    -- Define a function to map over the values inside the datatype
    fmap :: (a -> b) -> f a -> f b

-- Define an instance of the Functor class for Lists
instance Functor [] where
    -- Map over the list by applying the function to each element
    fmap f [] = []
    fmap f (x:xs) = f x : fmap f xs