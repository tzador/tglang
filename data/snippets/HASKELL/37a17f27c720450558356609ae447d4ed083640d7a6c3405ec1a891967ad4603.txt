data Tree a = Empty | Node a (Tree a) (Tree a) -- create a Tree data type with Empty and Node constructors, taking in 3 arguments of type 'a'

-- Define a function to insert a value into the tree in proper order
insert :: (Ord a) => a -> Tree a -> Tree a  -- function takes in a value of type 'a' and a Tree, and returns a Tree
insert value Empty = Node value Empty Empty  -- if the Tree is empty, create a new Node with the value at the root
insert value (Node x left right)             -- otherwise, if the Tree is not empty
    | value == x = Node x left right         -- if the value is already in the tree, return the original tree
    | value < x = Node x (insert value left) right  -- if the value is less than the root, insert it into the left subtree
    | otherwise = Node x left (insert value right)  -- if the value is greater than the root, insert it into the right subtree
    
-- Define a function to check if a value is present in the tree
contains :: (Ord a) => a -> Tree a -> Bool  -- function takes in a value of type 'a' and a Tree, and returns a boolean
contains value Empty = False  -- if the tree is empty, the value is not present
contains value (Node x left right)  -- otherwise, if the Tree is not empty
    | value == x = True  -- if the value is found at the root, return True
    | value < x = contains value left  -- if the value is less than the root, check the left subtree
    | otherwise = contains value right  -- if the value is greater than the root, check the right subtree