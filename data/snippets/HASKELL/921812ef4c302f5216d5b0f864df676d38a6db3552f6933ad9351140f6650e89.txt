data Tree a = Leaf a | Node (Tree a) (Tree a)

instance Functor Tree where
  -- fmap :: (a -> b) -> Tree a -> Tree b
  fmap f (Leaf x) = Leaf (f x)
  fmap f (Node left right) = Node (fmap f left) (fmap f right)

instance Applicative Tree where
  -- pure :: a -> Tree a
  pure x = Leaf x
  
  -- (<*>) :: Tree (a -> b) -> Tree a -> Tree b
  Node f g <*> Leaf x = fmap f (Leaf x) <> fmap g (Leaf x)
  Node f g <*> Node left right = Node (f <*> left) (g <*> right)