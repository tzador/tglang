{-#LANGUAGE FlexibleInstances #-}

-- Create a type class called "Speak"
-- with a single function "say" that takes in a String
-- and returns another String
class Speak a where
  say :: String -> String

-- Implement the "Speak" type class for Integers
-- by converting the Integer value to a String and appending " dollars" to the end
instance Speak Integer where
  say int = show int ++ " dollars"

-- Implement the "Speak" type class for Lists
-- by recursively mapping the "say" function to each element in the List
instance Speak a => Speak [a] where
  say list = "[" ++ concatMap (say . show) list ++ "]"

-- Create a function that takes in any value that implements "Speak"
-- and returns a string saying "I am speaking: " followed by the value's "say" output
speak :: Speak a => a -> String
speak a = "I am speaking: " ++ say a

main :: IO ()
main = do
  putStrLn $ speak (5 :: Integer) -- outputs "I am speaking: 5 dollars"
  putStrLn $ speak ["hello", "world"] -- outputs "I am speaking: [\"hello\",\"world\"]"