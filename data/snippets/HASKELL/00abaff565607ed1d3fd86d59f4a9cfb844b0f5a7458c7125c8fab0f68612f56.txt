-- Function to calculate factorial of a number 
factorial :: Int -> Int
factorial n = if n == 0 
              then 1 
              else n * factorial (n - 1) 

-- Function to generate a list of all possible combinations 
combinations :: [a] -> Int -> [[a]] 
combinations xs n = combinationsHelper xs n [] 

-- A helper function to generate combinations 
combinationsHelper :: [a] -> Int -> [a] -> [[a]] 
combinationsHelper [] _ _ = [] 
combinationsHelper _ 0 currComb = [currComb] 
combinationsHelper (x:xs) n currComb = 
    [x:combo | combo <- combinationsHelper xs (n-1) (x:currComb)] 
         ++ combinationsHelper xs n currComb 

-- Main function 
main :: IO () 
main = do 
    putStrLn "How many elements do you want in the combination?" 
    input <- getLine 
    let n = read input :: Int 
    let xs = ["A", "B", "C", "D", "E"] 
    let allCombinations = combinations xs n 
    putStrLn ("All possible combinations of " ++ show n ++ " elements:" ) 
    mapM_ print allCombinations