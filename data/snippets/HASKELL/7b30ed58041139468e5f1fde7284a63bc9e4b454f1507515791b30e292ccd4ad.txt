-- This is a function that uses recursion to return the nth Fibonacci number
fib :: Integer -> Integer
fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)

-- This is a list comprehension that returns all the odd numbers in a given list
-- It uses the even function and the 'mod' operator to filter out even numbers
filterOdd :: [Int] -> [Int]
filterOdd list = [x | x <- list, (mod x 2 /= 0)]

-- This is a higher-order function that takes in a list and returns a list of functions
-- Each function in the list takes in an integer and adds it to the index of that function in the list
-- This function is useful for creating a dynamic list of functions based on the input list
makeAddFunctions :: [Int] -> [(Int -> Int)]
makeAddFunctions list = [(\x -> x + index) | (value, index) <- (zip list [0..])]