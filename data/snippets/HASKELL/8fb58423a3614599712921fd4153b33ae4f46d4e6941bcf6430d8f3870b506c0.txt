-- A simple implementation of Dijkstra's algorithm for finding shortest path in a graph

-- Creating a type synonym for representing vertices in the graph
type Vertex = Int

-- Creating a type synonym for representing edges in the graph
type Edge = (Vertex, Vertex, Int) -- (Source, Destination, Weight)

-- Creating a type synonym for representing the entire graph
-- as a list of edges
type Graph = [Edge]

-- Function to find the shortest path from a given source vertex to all other vertices in the graph
dijkstra :: Graph -> Vertex -> [Int]
dijkstra graph src = 
    let -- Initialize distance array with infinity for all vertices except source
        distArray = map (\v -> if v == src then 0 else maxBound) [1..length graph]
        
        -- Calculate shortest paths using helper function
        shortestPaths = dijkstraHelper graph distArray

        -- Function to recursively update the distance array with shortest paths from source
        dijkstraHelper :: Graph -> [Int] -> [Int]
        dijkstraHelper [] dist = dist
        dijkstraHelper ((s, d, w):rest) dist = 
            if dist !! (d-1) > dist !! (s-1) + w then -- If current shortest path is longer than new path
                let newDist = replaceNth (d-1) (dist !! (s-1) + w) dist -- Replace distance with new shortest path
                in dijkstraHelper rest newDist -- Keep updating with remaining edges in graph
            else
                dijkstraHelper rest dist -- Otherwise, move on to next edge in graph

    in shortestPaths

-- Function to replace an element at a given index in a list
replaceNth :: Int -> a -> [a] -> [a]
replaceNth _ _ [] = []
replaceNth n new (x:xs)
    | n == 0 = new:xs -- Replace element at index 0
    | otherwise = x : replaceNth (n-1) new xs

-- Sample graph with 5 vertices and 7 edges
testGraph :: Graph
testGraph = [(1,2,3),(1,5,9),(2,3,1),(2,4,3),(3,4,1),(4,5,2),(3,5,1)]

-- Output shortest paths from vertex 1 to all other vertices in the graph
output = dijkstra testGraph 1 -- [0,3,4,6,8]