{-# OPTIONS_GHC -Wall #-}
module Main where

import Data.List (intercalate)

data Item = Item
    { name :: String
    , price :: Int
    }

instance Show Item where
    show (Item name price) = name ++ (show price)

calculateTotal :: [Item] -> Int
calculateTotal items = sum $ map price items

main :: IO ()
main = do
    putStrLn "Welcome to the shopping cart!"
    putStrLn "Please enter the items you wish to purchase (separated by commas):"
    input <- getLine
    let rawItems = splitOn "," input
    let items = map (\x -> Item x 100) rawItems -- setting default price of each item as 100
    putStr "You have purchased: "
    putStrLn $ intercalate ", " (map show items)
    putStrLn $ "Total cost: " ++ (show $ calculateTotal items)
    
-- Helper function to split a string on a delimiter
splitOn :: String -> String -> [String]
splitOn d xs = splitOnHelper d xs []

-- Recursive helper function for splitOn
splitOnHelper :: String -> String -> [String] -> [String]
splitOnHelper d "" acc = reverse acc
splitOnHelper d xs acc =
    case break (== d) xs of
        (l,r) -> splitOnHelper d (drop 1 r) (takeWhile (/= d) l : acc)

-- Example run:
-- Welcome to the shopping cart!
-- Please enter the items you wish to purchase (separated by commas):
-- Apple, Banana, Orange
-- You have purchased: Apple100, Banana100, Orange100
-- Total cost: 300