-- This is a comment in Haskell

-- Defining a new data type called Tree with two constructors: Leaf and Node
data Tree a = Leaf a | Node (Tree a) (Tree a)

-- Function to insert an element into a binary search tree
insert :: Ord a => a -> Tree a -> Tree a
insert x (Leaf a) = Node (Leaf a) (Leaf x)
insert x (Node left right)
    | x < root  = Node (insert x left) right
    | x > root  = Node left (insert x right)
    | otherwise = Node left right
    where root = getRoot right -- Helper function to get the root value of a tree

-- Function to get the root value of a tree
getRoot :: Tree a -> a
getRoot (Leaf a) = a
getRoot (Node left right) = getRoot left -- We do not have to check both branches since this is a binary search tree

-- Function to delete an element from a binary search tree
delete :: Ord a => a -> Tree a -> Tree a
delete x (Leaf a)
    | x == a = Leaf a -- If the leaf value is equal to the value to be deleted, do not insert it into the tree again
    | otherwise = Leaf a -- Otherwise, do nothing and leave the leaf as it is
delete x (Node left right)
    | x < root  = Node (delete x left) right
    | x > root  = Node left (delete x right)
    | otherwise = deleteHelper (Node left right) -- Call helper function to handle special cases for deletion
    where root = getRoot right

-- Helper function for delete function
deleteHelper :: Ord a => Tree a -> Tree a
deleteHelper (Node left (Leaf a)) = left -- If the right branch is a leaf, simply replace the node with its left branch
deleteHelper (Node (Leaf a) right) = right -- If the left branch is a leaf, simply replace the node with its right branch
deleteHelper (Node left right) = Node left (deleteRight mostLeft right) -- If both branches are nodes, replace node with the most left node in its right branch and delete that node from the branch
    where
        mostLeft = getMostLeft right -- Helper function to get the most left node in a tree

-- Helper function to get the most left node in a tree
getMostLeft :: Tree a -> a
getMostLeft (Leaf a) = a
getMostLeft (Node left right) = getMostLeft left

-- Example usage of the functions above
exampleTree :: Tree Int
exampleTree = Node (Leaf 2) (Node (Leaf 1) (Leaf 3))
newTree = insert 5 exampleTree -- newTree = Node (Leaf 2) (Node (Leaf 1) (Node (Leaf 3) (Leaf 5)))

finalTree = delete 1 newTree -- finalTree = Node (Leaf 2) (Node (Leaf 3) (Leaf 5))