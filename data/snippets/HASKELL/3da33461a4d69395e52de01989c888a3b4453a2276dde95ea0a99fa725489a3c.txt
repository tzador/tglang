-- The following function takes in two lists and checks if the first list is a subsequence of the second list
-- It returns True if it is a subsequence, False otherwise

subsequence :: (Eq a) => [a] -> [a] -> Bool
subsequence [] [] = True  -- empty lists are considered a subsequence of any list
subsequence [] _ = True
subsequence _ [] = False
subsequence (x:xs) (y:ys) | x == y = subsequence xs ys  -- if first elements are equal, check the rest of the lists
                          | otherwise = subsequence (x:xs) ys  -- if not, check the tail of the second list

-- Example usage
subsequence [1,2] [5,4,3,2,1]  -- returns True
subsequence [7,8] [1,2,3,4,5]  -- returns False