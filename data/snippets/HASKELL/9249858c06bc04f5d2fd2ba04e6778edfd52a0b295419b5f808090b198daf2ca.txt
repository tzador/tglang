-- This is a function that recursively computes the nth Fibonacci number
fib :: Int -> Int
fib n 
  | n <= 1 = n 
  | otherwise = fib (n - 1) + fib (n - 2)
 
-- This is a function that calculates the factorial of a number using pattern matching and guarding
factorial :: Int -> Int
factorial 0 = 1
factorial n 
  | n < 0 = error "Cannot compute factorial of a negative number"
  | otherwise = n * factorial (n - 1)
  
-- This is a function that calculates the sum of a list of numbers using a fold
sumList :: [Int] -> Int
sumList = foldl (+) 0

-- This is a function that checks if a list is a palindrome
isPalindrome :: Eq a => [a] -> Bool
isPalindrome [] = True
isPalindrome [x] = True
isPalindrome (x:xs)
  | x == last xs = isPalindrome (init xs)
  | otherwise = False
  
-- This is a higher order function that applies a function twice in succession
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

-- This is a function that merges two sorted lists into one sorted list
mergeSortedLists :: Ord a => [a] -> [a] -> [a]
mergeSortedLists [] ys = ys
mergeSortedLists xs [] = xs
mergeSortedLists (x:xs) (y:ys)
  | x <= y = x : mergeSortedLists xs (y:ys)
  | otherwise = y : mergeSortedLists (x:xs) ys

-- This is a function that finds the largest number in a list using recursion
maxList :: Ord a => [a] -> a
maxList [x] = x
maxList (x:xs) = max x (maxList xs)