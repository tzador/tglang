{-# LANGUAGE FlexibleInstances #-}

-- Creating a typeclass 
class CustomType a where
    -- defining a function inside the typeclass
    customFunction :: a -> a -> a
    -- defining another function inside the typeclass
    anotherFunction :: a -> a
    -- defining a default implementation for the customFunction
    customFunction x y = anotherFunction x

-- Creating an instance of the CustomType typeclass for the Integer type
instance CustomType Integer where
    -- implementing the anotherFunction for Integer
    anotherFunction x = x * 2

-- Creating an instance of the CustomType typeclass for the Bool type
instance CustomType Bool where
    -- implementing the anotherFunction for Bool
    anotherFunction x = not x

-- Creating an instance of the CustomType typeclass for the String type
instance CustomType String where
    -- implementing the customFunction for String
    customFunction x y = x ++ y

-- Creating a function that uses the customFunction for a given type
useCustomFunction :: CustomType a => a -> a -> a
useCustomFunction x y = customFunction x y

-- Calling the useCustomFunction function with different types
main :: IO ()
main = do
    print $ useCustomFunction (5 :: Integer) (10 :: Integer) -- Output: 20
    print $ useCustomFunction True False -- Output: True
    print $ useCustomFunction "Hello, " "World!" -- Output: "Hello, World!"