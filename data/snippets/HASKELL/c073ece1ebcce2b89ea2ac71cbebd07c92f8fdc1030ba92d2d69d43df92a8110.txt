{-# LANGUAGE InstanceSigs #-}
-- The above line enables `InstanceSigs` language extension.
-- This allows us to write explicit type signatures in class instances.

-- A Sample algebraic data type `Tree` with two constructors `Leaf` and `Node`.
-- The `Leaf` constructor takes in a single `Int` value, while `Node` takes in a `Tree` value and two children `Tree` values.
data Tree a = Leaf Int | Node (Tree a) (Tree a) (Tree a)

-- `Functor` instance for `Tree` datatype
instance Functor Tree where
    fmap :: (a -> b) -> Tree a -> Tree b
    -- Pattern match on `Leaf` constructor and apply the function to its `Int` value.
    fmap f (Leaf a) = Leaf (f a)
    -- Pattern match on `Node` constructor, recursively apply `f` to the children `Tree` values, and combine them into a `Node` tree.
    fmap f (Node leftTree midTree rightTree) = Node (fmap f leftTree) (fmap f midTree) (fmap f rightTree)

-- `Foldable` instance for `Tree` datatype
instance Foldable Tree where
    foldr :: (a -> b -> b) -> b -> Tree a -> b
    -- Pattern match on `Leaf` constructor and apply `foldr` on the `Int` value and `z` accumulator.
    foldr f z (Leaf a) = f a z
    -- Pattern match on `Node` constructor, recursively `foldr` on the children `Tree` values, and combine the results using the provided function.
    foldr f z (Node leftTree midTree rightTree) = foldr f (foldr f (foldr f z rightTree) midTree) leftTree

-- Sample `Tree` instance with `Int` as `a` type.
tree :: Tree Int
tree = Node (Node (Leaf 1) (Leaf 2) (Leaf 3)) (Node (Leaf 4) (Leaf 5) (Leaf 6)) (Node (Leaf 7) (Leaf 8) (Leaf 9))

-- Sample function to add 10 to each element in `tree` using `fmap`.
treePlus10 :: Tree Int
treePlus10 = fmap (+10) tree

-- Sample function to sum all elements in `tree` using `foldr`.
treeSum :: Int
treeSum = foldr (+) 0 tree