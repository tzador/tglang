-- Define a function to calculate the sum of elements in a list
sum :: [Int] -> Int
sum [] = 0 -- base case for empty list
sum (x:xs) = x + sum xs -- recursive case, recursively calls sum on the rest of the list and adds current element to it

-- Define a function to calculate the product of elements in a list
product :: [Int] -> Int
product [] = 1 -- base case for empty list
product (x:xs) = x * product xs -- recursive case, recursively calls product on the rest of the list and multiplies current element to it

-- Define a function to calculate the length of a list
length :: [a] -> Int
length [] = 0 -- base case for empty list
length (x:xs) = 1 + length xs -- recursive case, recursively calls length on the rest of the list and adds 1 for every element in the list

-- Define a function to check if a given number is even 
isEven :: Int -> Bool
isEven num = if num `mod` 2 == 0 then True else False -- uses the modulus operator to check if the number is divisible by 2 and returns True if it is, else returns False 

-- Define a function to check if a given list is sorted in ascending order
isSorted :: [Int] -> Bool
isSorted [] = True -- base case for empty list
isSorted [x] = True -- base case for list with only one element
isSorted (x:y:xs) = if x <= y then isSorted (y:xs) else False -- recursively checks if each consecutive pair in the list is in ascending order, if not returns False

-- Define a function to zip two lists together
zip :: [a] -> [b] -> [(a,b)]
zip [] _ = [] -- base case for empty first list
zip _ [] = [] -- base case for empty second list
zip (x:xs) (y:ys) = (x,y) : zip xs ys -- recursive case, zips the first elements of both lists together and recursively calls zip on the rest of the lists 

-- Define a function that takes in a list of strings and returns the number of vowels in each string
countVowels :: [String] -> [Int]
countVowels strList = map (\str -> length (filter (\x -> x `elem` "aeiou") str)) strList -- uses map and lambda functions to count the number of vowels in each string in the given list and returns a list of those counts