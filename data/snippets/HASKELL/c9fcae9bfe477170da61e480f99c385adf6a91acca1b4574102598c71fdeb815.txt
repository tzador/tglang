-- A function to calculate the Fibonacci sequence up to a given number
fibonacci :: Int -> [Int]
fibonacci n
    | n == 0 = []
    | n == 1 = [1]
    | otherwise = [x + y | (x, y) <- (fibonacci (n-1) `zip` fibonacci (n-2))]

-- A function to calculate the nth prime number
prime :: Int -> Int
prime n = last (take n primes)
    where
        primes = 2 : [p | p <- [3,5..], all ((> 0) . mod p) (takeWhile (<= (floor $ sqrt $ fromIntegral p)) primes)]

-- A function to convert a list of integers to binary
binList :: [Int] -> [String]
binList = map (\x -> reverse $ take 8 $ pad (toBin x) ++ (takeWhile (\x -> x == '0') $ repeat '0'))
    where
        toBin 0 = "0"
        toBin n = reverse $ toBin' n
        toBin' 0 = []
        toBin' n = show (n `mod` 2) : toBin' (n `div` 2)
        pad bin = replicate (8 - length bin) '0'

-- A function to find the sum of all multiples of 3 or 5 below a given number
sumMultiples :: Int -> Int
sumMultiples n = sum [x | x <- [1..n-1], x `mod` 3 == 0 || x `mod` 5 == 0]