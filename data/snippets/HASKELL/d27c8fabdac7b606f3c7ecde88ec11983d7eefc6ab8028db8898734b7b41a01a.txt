-- Generate a list of numbers from 1 to n using recursion
generateList :: Int -> [Int]
generateList n = if n < 1
                 then []
                 else generateList (n-1) ++ [n]

-- Calculate the sum of all the elements in the list
sumList :: [Int] -> Int
sumList [] = 0
sumList (x:xs) = x + sumList xs

-- Calculate the factorial of a number using pattern matching and recursion
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)

-- Calculate the nth fibonacci number using dynamic programming
fibonacci :: Int -> Int
fibonacci n = let
                 fibs = 0 : 1 : next fibs
                 next (a : t@(b:_)) = (a+b) : next t
              in fibs !! n

-- Calculate the nth prime number using the sieve of Eratosthenes
primes :: [Int] 
primes = [x | x <- [2..], isPrime x]
  where isPrime x = all (\p -> x `mod` p > 0) (takeWhile (\p -> p*p <= x) primes)

-- Merge sort implementation using recursion and functional programming
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs = let left = mergeSort (take (length xs `div` 2) xs)
                  right = mergeSort (drop (length xs `div` 2) xs)
              in merge left right
  where merge [] ys = ys
        merge xs [] = xs
        merge (x:xs) (y:ys) | x <= y    = x : merge xs (y:ys)
                            | otherwise = y : merge (x:xs) ys