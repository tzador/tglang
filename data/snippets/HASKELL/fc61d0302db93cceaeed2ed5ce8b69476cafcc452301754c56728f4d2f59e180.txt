-- | A function that computes the sum of a list
-- Input: xs, a list of integers
-- Output: sum of the list
sumList :: [Int] -> Int
sumList [] = 0 -- base case, empty list has a sum of 0
sumList (x:xs) = x + sumList xs -- recursively sum the list

-- | A function that computes the factorial of a number
-- Input: n, an integer
-- Output: factorial of n
factorial :: Int -> Int
factorial 0 = 1 -- 0! = 1
factorial n = n * factorial (n - 1) -- recursively calculate factorial

-- | A function that computes the n-th Fibonacci number
-- Input: n, an integer
-- Output: n-th Fibonacci number
fibonacci :: Int -> Int
fibonacci 0 = 0 -- base case, 0th Fibonacci number is 0
fibonacci 1 = 1 -- base case, 1st Fibonacci number is 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2) -- recursively calculate Fibonacci number using previous two numbers

-- | A function that checks if a string is a palindrome
-- Input: str, a string
-- Output: True if str is a palindrome, False otherwise
isPalindrome :: String -> Bool
isPalindrome str = str == reverse str -- compare string to its reverse, if they are equal then it is a palindrome

-- | A function that sorts a list using merge sort algorithm
-- Input: xs, a list of comparable elements
-- Output: sorted version of xs
mergeSort :: (Ord a) => [a] -> [a]
mergeSort [] = [] -- empty list is already sorted
mergeSort [x] = [x] -- single element list is already sorted
mergeSort xs = merge (mergeSort left) (mergeSort right) -- recursively sort left and right halves, then merge them together
    where (left, right) = splitAt (div (length xs) 2) xs -- split list into two halves
          merge :: (Ord a) => [a] -> [a] -> [a] -- local function to merge two sorted lists
          merge [] ys = ys -- if one list is empty, return the other list
          merge xs [] = xs
          merge (x:xs) (y:ys) -- compare first elements of both lists and add the smaller one to the sorted list
            | x < y = x : merge xs (y:ys)
            | otherwise = y : merge (x:xs) ys