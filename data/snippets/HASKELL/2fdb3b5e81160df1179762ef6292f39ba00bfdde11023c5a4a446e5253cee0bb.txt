-- Function to merge two sorted lists
merge :: Ord a => [a] -> [a] -> [a]
merge xs [] = xs
merge [] ys = ys
merge (x:xs) (y:ys) 
  | x <= y = x : merge xs (y:ys)
  | otherwise = y : merge (x:xs) ys
  
-- Function to perform a binary search on a list
binarySearch :: Ord a => [a] -> a -> Maybe Int
binarySearch xs target = binarySearchHelper xs target 0 (length xs - 1)

-- Helper function for binarySearch
binarySearchHelper :: Ord a => [a] -> a -> Int -> Int -> Maybe Int
binarySearchHelper xs target low high
  | low > high = Nothing
  | otherwise = 
    let mid = (low + high) `div` 2
        num = xs !! mid
    in if num == target
        then Just mid
        else if num > target
          then binarySearchHelper xs target low (mid - 1)
          else binarySearchHelper xs target (mid + 1) high