-- define a function to calculate the factorial of a number
fact :: Integer -> Integer
fact 0 = 1 -- base case
fact n = n * fact (n-1) -- recursive case

-- define a data type for binary trees
data Tree a = Empty | Node a (Tree a) (Tree a)

-- define a function to insert a value into a binary tree
insert :: Ord a => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty -- insert into an empty tree
insert x (Node y left right)
    | x < y  = Node y (insert x left) right -- insert into left subtree if value is less than current node
    | x > y  = Node y left (insert x right) -- insert into right subtree if value is greater than current node
    | x == y = Node y left right -- do not insert if value already exists in tree

-- define a function to check if a binary tree is a binary search tree
isBST :: Ord a => Tree a -> Bool
isBST Empty = True -- empty tree is a binary search tree
isBST (Node x left right) = 
    checkLeft x left && checkRight x right && isBST left && isBST right
    where
        checkLeft :: Ord a => a -> Tree a -> Bool -- helper function to check if values in left subtree are less than current node's value
        checkLeft _ Empty = True
        checkLeft x (Node y left right)
            | y < x = checkLeft y left && checkLeft y right
            | otherwise = False
        checkRight :: Ord a => a -> Tree a -> Bool -- helper function to check if values in right subtree are greater than current node's value
        checkRight _ Empty = True
        checkRight x (Node y left right)
            | y > x = checkRight y left && checkRight y right
            | otherwise = False