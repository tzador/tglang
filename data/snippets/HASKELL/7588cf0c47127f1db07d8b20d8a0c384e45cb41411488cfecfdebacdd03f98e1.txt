data List a = EmptyList | Cons a (List a)      -- defines a data type named "List" with two possible values: an empty list or a list that contains a value and a reference to another list of the same type
-- This code snippet demonstrates the use of higher-order functions in Haskell
-- The "map" function takes a function and a list, and applies the function to each element in the list, returning a new list with the results
-- The "filter" function takes a predicate function and a list, and returns a new list containing only elements that satisfy the predicate
-- The "foldl" function takes a binary function, a starting value, and a list, and recursively applies the function to each element of the list, accumulating the results in the starting value
-- The "zipWith" function takes a binary function and two lists, and applies the function to corresponding elements in each list, returning a new list with the results

-- Define a function that adds 1 to each element in a list
addOneToEach :: Num a => [a] -> [a]           -- specifies the data type of the input and output of the function
addOneToEach [] = []                          -- base case for empty list
addOneToEach (x:xs) = (x+1) : addOneToEach xs  -- recursively applies the function to each element in the list, adding 1 to the head and concatenating it to the result of the function applied to the tail

-- Define a function that multiplies two lists element-wise
multiplyLists :: Num a => [a] -> [a] -> [a]
multiplyLists [] _ = []                              -- base case for first list being empty
multiplyLists _ [] = []                              -- base case for second list being empty
multiplyLists (x:xs) (y:ys) = (x*y) : multiplyLists xs ys   -- recursively applies the function to corresponding elements in each list, multiplying them and concatenating it to the result of the function applied to the rest of the lists

let myNumList = [1,2,3,4,5]          -- create a list of numbers
let myStrList = ["a", "b", "c", "d", "e"]    -- create a list of strings
let result1 = map (\x -> x * 2) myNumList     -- result1 = [2,4,6,8,10]. applies the anonymous function (\x -> x * 2) to each element in myNumList
let result2 = filter (\x -> x `mod` 2 == 0) myNumList   -- result2 = [2,4]. filters myNumList to only contain even numbers
let result3 = foldl (\acc x -> acc ++ x) "" myStrList   -- result3 = "abcde". concatenates all the strings in myStrList
let result4 = zipWith (*) myNumList myNumList     -- result4 = [1,4,9,16,25]. multiplies each element in myNumList with itself using the * function