-- function that calculates the square of a number
square :: Int -> Int
square x = x * x

-- function that calculates the sum of squares
sumOfSquares :: [Int] -> Int
sumOfSquares [] = 0 -- base case, if list is empty, return 0
sumOfSquares (x:xs) = (square x) + (sumOfSquares xs) -- recursive case, calculates square of first element and adds it to sum of squares of the rest of the list

-- function that calculates the mean of a list of numbers
mean :: [Int] -> Float
mean [] = 0 -- base case, if list is empty, return 0
mean xs = (fromIntegral (sum xs)) / (fromIntegral (length xs)) -- calculates the sum and length of the list and returns their mean as a float value

-- function that finds the largest number in a list
largest :: [Int] -> Int
largest [x] = x -- base case, if list contains only one element, return that element
largest (x:xs) = max x (largest xs) -- recursive case, compares first element with largest element of the rest of the list and returns the maximum value

-- main function that calculates the sum of squares, mean, and largest number in a given list of numbers
main :: IO ()
main = do
    putStrLn "Enter a list of numbers (separated by spaces):" -- prompts the user to enter a list of numbers
    input <- getLine -- gets user input
    let numbers = map read (words input) :: [Int] -- converts the input into a list of integers
    putStrLn ("Sum of squares: " ++ show (sumOfSquares numbers)) -- calculates and prints the sum of squares of the given list
    putStrLn ("Mean: " ++ show (mean numbers)) -- calculates and prints the mean of the given list
    putStrLn ("Largest number: " ++ show (largest numbers)) -- calculates and prints the largest number in the given list
    return ()