{-# LANGUAGE OverloadedStrings #-}
-- This is a comment
-- Define a data type called "Shape" with multiple constructors
data Shape
  = Rectangle Double Double
  | Square Double
  | Circle Double
  | Triangle Double Double Double

-- Define a function to calculate the area of a shape

shapeArea :: Shape -> Double
shapeArea (Rectangle length width) = length * width
shapeArea (Square side) = side * side
shapeArea (Circle radius) = pi * radius ^ 2
shapeArea (Triangle a b c) =
  let s = (a + b + c) / 2 -- Calculate the semi-perimeter
      in sqrt(s * (s - a) * (s - b) * (s - c)) -- Use Heron's formula

-- Define a function to check if a shape is a square

isSquare :: Shape -> Bool
isSquare (Square _) = True
isSquare _ = False

-- Create a list of shapes
shapes = [Rectangle 5 4, Square 3, Circle 2, Triangle 3 4 5]

-- Print the area of each shape in the list
main = do
  print $ "Area of rectangle: " ++ show (shapeArea (head shapes))
  print $ "Area of square: " ++ show (shapeArea (shapes !! 1))
  print $ "Area of circle: " ++ show (shapeArea (shapes !! 2))
  print $ "Area of triangle: " ++ show (shapeArea (shapes !! 3))

-- Output:
--
-- *Main> main
-- "Area of rectangle: 20.0"
-- "Area of square: 9.0"
-- "Area of circle: 12.566370614359172"
-- "Area of triangle: 6.0"