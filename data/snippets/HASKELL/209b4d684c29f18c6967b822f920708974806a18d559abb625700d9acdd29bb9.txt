-- This is a function that uses recursion to calculate the nth Fibonacci number
fibonacci :: Int -> Int
fibonacci n
  | n < 0 = error "Input must be a non-negative integer"
  | n == 0 = 0
  | n == 1 = 1
  | otherwise = fibonacci (n - 1) + fibonacci (n - 2)

-- This is a higher-order function that takes in a function and applies it n times to a value
applyNTimes :: (a -> a) -> a -> Int -> a
applyNTimes f x n
  | n < 0 = error "Input must be a non-negative integer"
  | n == 0 = x
  | otherwise = applyNTimes f (f x) (n - 1)

-- This function takes in a list and returns a list of all possible sublists
sublists :: [a] -> [[a]]
sublists [] = [[]]
sublists (x:xs) = [x:ys | ys <- sublists xs] ++ sublists xs

-- A typeclass for types that can be compared using a specified comparison function
class Comparable a where
  comp :: a -> (a -> Ordering) -> Bool

-- A type representing a binary tree with nodes containing a value and left and right subtrees
data BinaryTree a = Leaf | Node a (BinaryTree a) (BinaryTree a)

-- This function performs an inorder traversal of a binary tree and returns a list of its elements
inOrder :: BinaryTree a -> [a]
inOrder Leaf = []
inOrder (Node v left right) = inOrder left ++ [v] ++ inOrder right