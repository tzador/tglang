addTwoNums :: Int -> Int -> Int -- function declaration
addTwoNums x y = x + y -- function definition, adds two integers and returns result

-- this function uses recursion to calculate the factorial of a number
factorial :: Int -> Int
factorial 0 = 1 -- base case, factorial of 0 is 1
factorial n = n * factorial (n-1) -- recursive case, multiplies n with factorial of n-1

-- function to check if a list is sorted in ascending order
isSorted :: Ord a => [a] -> Bool
isSorted [] = True -- empty list is considered sorted
isSorted [_] = True -- single element list is considered sorted
isSorted (x:y:xs) = (x <= y) && isSorted (y:xs) -- recursively checks if elements are in ascending order

-- function to calculate the nth term in fibonacci sequence
fibonacci :: Int -> Int
fibonacci 0 = 0 -- base case, 0th term in sequence is 0
fibonacci 1 = 1 -- base case, 1st term in sequence is 1
fibonacci n = fibonacci (n-1) + fibonacci (n-2) -- recursive case, nth term is sum of previous two terms

-- function to reverse a list using an accumulator
reverseList :: [a] -> [a]
reverseList list = reverseListHelper list [] -- calls helper function with list and empty accumulator

-- helper function to reverse a list using an accumulator
reverseListHelper :: [a] -> [a] -> [a]
reverseListHelper [] acc = acc -- reverse of empty list is accumulator
reverseListHelper (x:xs) acc = reverseListHelper xs (x:acc) -- recursively adds elements to accumulator in reverse order