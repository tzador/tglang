-- A function that takes in a list of integers and returns a list of
-- all possible permutations of elements in the original list
--
-- Example:
-- permute [1, 2, 3] -> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1],
--                        [3, 1, 2], [3, 2, 1]]
--
-- Algorithm:
-- Start with empty list
-- Add each element of the original list to all possible positions in
-- each existing list in the result
-- Repeat until all permutations are found
--
-- Time complexity: O(n!)
-- Space complexity: O(n!)
--
permute :: [Int] -> [[Int]]
permute [] = [[]]
permute (x:xs) = concatMap (insertEveryPos x) (permute xs)
    where insertEveryPos x [] = [[x]]
          insertEveryPos x (y:ys) = (x:y:ys) : map (y:) (insertEveryPos x ys)

-- Helper function to insert element at every position in a list
insertAtPos :: Int -> a -> [a] -> [[a]]
insertAtPos 0 x xs = [x:xs]
insertAtPos _ _ [] = []
insertAtPos n x (y:ys) = (y : head) : map (y:) (insertAtPos (n-1) x ys)
    where head = insertAtPos (n-1) x ys

-- Another approach using list comprehension
permute2 :: [Int] -> [[Int]]
permute2 [] = [[]]
permute2 (x:xs) = [y | ys <- permute2 xs, y <- insertEveryPos x ys]
    where insertEveryPos x [] = [[x]]
          insertEveryPos x (y:ys) = (x:y:ys) : map (y:) (insertEveryPos x ys)