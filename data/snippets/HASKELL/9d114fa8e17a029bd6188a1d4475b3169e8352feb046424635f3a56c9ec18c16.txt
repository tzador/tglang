module Euler where
import Data.List
fib :: Integer -> Integer
fib n = if n < 2 then n else fib (n - 1) + fib (n - 2)
main :: IO()
main = do let fibs = map fib [1..]
        let seqs = nub . concatMap (flip (take . length) fibs) $ inits fibs
        print $ maximum $ map (\x -> if (fromIntegral x) `elem` seqs then fromIntegral x else 0) [1..]