-- | Represents a binary tree data structure
data Tree a = Empty | Node a (Tree a) (Tree a)

-- | Calculates the height of a binary tree
treeHeight :: Tree a -> Int
treeHeight Empty = 0
treeHeight (Node _ left right) = 1 + max (treeHeight left) (treeHeight right)

-- | Maps the given function to each element in the tree
treeMap :: (a -> b) -> Tree a -> Tree b
treeMap _ Empty = Empty
treeMap f (Node x left right) = Node (f x) (treeMap f left) (treeMap f right)

-- | Folds the tree from the bottom up using the given function
treeFold :: (a -> b -> b -> b) -> b -> Tree a -> b
treeFold _ z Empty = z
treeFold f z (Node x left right) = f x (treeFold f z left) (treeFold f z right)

-- | Flips the tree so that the left and right subtrees are reversed
treeFlip :: Tree a -> Tree a
treeFlip Empty = Empty
treeFlip (Node x left right) = Node x (treeFlip right) (treeFlip left)