{-
This is a multi-line comment in Haskell
-}
import Data.List

-- This function takes in two lists and returns a list of tuples,
-- where each tuple contains one element from each list.
zip :: [a] -> [b] -> [(a, b)]
zip [] _ = []
zip _ [] = []
zip (x:xs) (y:ys) = [(x, y)] ++ zip xs ys

-- This is a recursive function to calculate the Fibonacci Sequence
-- The input n is the number of terms in the sequence.
fib :: Int -> [Integer]
fib 0 = []
fib 1 = [0]
fib 2 = [0, 1]
fib n = fib (n-1) ++ [last (fib (n-1)) + last (fib (n-2))]

-- This function checks if a given number is prime or not
isPrime :: Int -> Bool
isPrime n
  | n <= 1 = False
  | n == 2 = True
  | otherwise = notElem 0 (map (n `mod`) [2..(n-1)])

-- This is a higher-order function to apply a function to every element in a list
map :: (a -> b) -> [a] -> [b]
map _ [] = []
map f (x:xs) = [f x] ++ map f xs

-- This function sorts a list of integers using the quicksort algorithm
quickSort :: [Int] -> [Int]
quickSort [] = []
quickSort [x] = [x]
quickSort (x:xs) = quickSort (filter (<= x) xs) ++ [x] ++ quickSort (filter (> x) xs)

-- Example usage of the functions
main :: IO ()
main = do
  let list1 = [5..10]
  let list2 = [1, 3..10]
  putStrLn "List 1:"
  print list1
  putStrLn "List 2:"
  print list2
  putStrLn "Zipped list:"
  print $ zip list1 list2
  putStrLn "Fibonacci Sequence with 10 terms:"
  print $ fib 10
  putStrLn "5th term of the Fibonacci Sequence:"
  print $ last $ fib 5
  putStrLn "Is 13 a prime number?"
  print $ isPrime 13
  putStrLn "Is 24 a prime number?"
  print $ isPrime 24
  putStrLn "Quicksort on List 1:"
  print $ quickSort list1