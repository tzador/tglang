{-# LANGUAGE NoImplicitPrelude #-}
-- Importing necessary modules
import Prelude (Int, Double, IO, Integer, (+), (*), show, Num, putStrLn, (++), String, return, Monad)
import System.IO (FilePath, openFile, IOMode(ReadMode), hGetContents, hClose)
import Control.Monad (void)

-- Defining a custom data type
data User = User { name :: String, age :: Int, email :: String }

-- Implementing typeclass instances
instance Show User where
  show user = (name user) ++ " is " ++ (show $ age user) ++ " years old. Email: " ++ (email user)

instance Num User where
  (+) u1 u2 = User { name = (name u1) ++ " and " ++ (name u2), age = (age u1) + (age u2), email = (email u1) ++ (email u2) }

instance Monad User where
  return u = User { name = name u, age = age u, email = email u }
  u >>= f = f u

-- Main function
main :: IO ()
main = do
  -- Opening file and reading contents
  let filePath = "users.txt"
  fileHandle <- openFile filePath ReadMode
  fileContents <- hGetContents fileHandle
  hClose fileHandle

  -- Parsing and printing users from file contents
  let users = map parseUser $ lines fileContents
  putStrLn "Users from file:"
  void $ mapM print users

-- Function to parse a line from file to a User
parseUser :: String -> User
parseUser str = User { name = words str !! 0, age = read (words str !! 1) :: Int, email = words str !! 2 }