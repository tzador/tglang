-- Define a tree data structure
data Tree a = Leaf a | Node (Tree a) (Tree a)

-- Helper function to flatten a tree
flattenTree :: Tree a -> [a]
flattenTree (Leaf x) = [x]
flattenTree (Node left right) = flattenTree left ++ flattenTree right

-- Calculate the factorial of a number
factorial :: Integer -> Integer
factorial n = if n == 0 then 1 else n * factorial (n-1)

-- Define a function to reverse a list
reverseList :: [a] -> [a]
reverseList [] = []
reverseList (x:xs) = reverseList xs ++ [x]

-- Sort a list using quicksort algorithm
quicksort :: [Int] -> [Int]
quicksort [] = []
quicksort (x:xs) = quicksort smaller ++ [x] ++ quicksort larger
  where
    smaller = [a | a <- xs, a <= x]
    larger = [b | b <- xs, b > x]

-- Use the Maybe data type for handling possible errors
safeDivide :: Int -> Int -> Maybe Int
safeDivide x y
  | y == 0 = Nothing
  | otherwise = Just (x `div` y)

-- Define a generic map function
map :: (a -> b) -> [a] -> [b]
map _ [] = []
map f (x:xs) = f x : map f xs