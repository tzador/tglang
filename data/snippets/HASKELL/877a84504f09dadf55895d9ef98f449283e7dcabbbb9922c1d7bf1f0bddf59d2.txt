{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
 
module Main where
  
data Tree a = Leaf a | Branch (Tree a) (Tree a)
 
class Collection c where
  type Item c
  insert :: Item c -> c -> c
  remove :: Item c -> c -> c 
  contains :: Item c -> c -> Bool
  size :: c -> Int

instance Collection Int where
  type Item Int = Int
  insert x xs = x + xs
  remove x xs = xs - x
  contains x xs = xs == x
  size x = 1
 
instance Collection (Tree Int) where
  type Item (Tree Int) = Int
  insert x (Leaf a) = Branch (Leaf x) (Leaf a)
  insert x (Branch left right) = Branch (insert x left) (insert x right)
  remove x (Leaf a) = if x == a then Leaf a else Leaf a 
  remove x (Branch left right) = if x == a then Branch (remove x left) right else if x == a then Branch left (remove x right)
  contains x (Leaf a) = x == a
  contains x (Branch left right) = contains x left || contains x right
  size (Leaf a) = 1
  size (Branch left right) = size left + size right
 
main :: IO ()
main = do
  let tree = Branch (Leaf 5) (Leaf 10)
  putStrLn $ "Tree contains 5: " ++ show (contains 5 tree)
  putStrLn $ "Tree contains 7: " ++ show (contains 7 tree)
  putStrLn $ "Size of tree: " ++ show (size tree)
  let updatedTree = insert 7 tree
  putStrLn $ "Updated tree contains 7: " ++ show (contains 7 updatedTree)
  putStrLn $ "Size of updated tree: " ++ show (size updatedTree)