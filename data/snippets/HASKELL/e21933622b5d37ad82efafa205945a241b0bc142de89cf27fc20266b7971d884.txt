-- Define a binary tree data structure with label and left/right branches
data BinaryTree a = Empty | Node a (BinaryTree a) (BinaryTree a) 
  deriving (Eq, Ord, Show)

-- Define a function to insert an element into a binary tree
insert :: (Ord a) => a -> BinaryTree a -> BinaryTree a
insert x Empty = Node x Empty Empty
insert x (Node y left right)
  | x == y = Node x left right
  | x < y  = Node y (insert x left) right
  | x > y  = Node y left (insert x right)

-- Define a function to convert a binary tree to a list
treeToList :: BinaryTree a -> [a]
treeToList Empty = []
treeToList (Node x left right) = [x] ++ treeToList left ++ treeToList right

-- Create an example binary tree and insert elements
exampleTree :: BinaryTree Integer
exampleTree = foldr insert Empty [4,2,6,1,3,5,7]

-- Print the binary tree as a list
print (treeToList exampleTree)