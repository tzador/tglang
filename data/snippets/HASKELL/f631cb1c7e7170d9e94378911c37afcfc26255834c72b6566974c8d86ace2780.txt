-- This is a function that takes in two lists and returns the sum of their even elements

sumEven :: [Int] -> [Int] -> Int -- Function declaration, takes two lists of Int as parameters and returns an Int
sumEven [] _ = 0 -- Base case, if the first list is empty, return 0
sumEven _ [] = 0 -- Base case, if the second list is empty, return 0
sumEven (x:xs) (y:ys) -- Recursive case, takes the first element of each list and adds them together, then recursively adds the rest of the even elements
    | even x && even y = x + y + sumEven xs ys -- If both elements are even, add them together and recursively call sumEven on the remaining lists
    | even x = x + sumEven xs (y:ys) -- If only the first element is even, add it to the sum and recursively call sumEven on the remaining elements in the second list
    | even y = y + sumEven (x:xs) ys -- If only the second element is even, add it to the sum and recursively call sumEven on the remaining elements in the first list
    | otherwise = sumEven xs ys -- If neither element is even, recursively call sumEven on the remaining lists