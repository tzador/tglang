{-# LANGUAGE FlexibleContexts #-}

module Main where

import Control.Monad.State.Strict
import Data.List (sort)

-- | A function to count the number of occurrences of a given element in a list.
-- Returns the count and the remaining list.
countOccurrences :: (Eq a) => a -> [a] -> (Int, [a])
countOccurrences x xs = execState (count x xs) (0, xs)
  where
    count :: (Eq a) => a -> [a] -> State (Int, [a]) ()
    count _ [] = return ()
    count y (z:zs)
      | y == z = do
          modify (\(n, remain) -> (n + 1, remain))
          count y zs
      | otherwise = do
          modify (\(n, remain) -> (n, z:remain))
          count y zs

-- | A function to sort an input list using the quicksort algorithm.
quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
  let (lower, higher) = part x xs
  in quicksort lower ++ [x] ++ quicksort higher
  where
    part :: (Ord a) => a -> [a] -> ([a], [a])
    part y [] = ([], [])
    part y (z:zs)
      | z <= y = let (lower, higher) = part y zs in (z:lower, higher)
      | otherwise = let (lower, higher) = part y zs in (lower, z:higher)