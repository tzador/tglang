-- define a custom data type named 'Tree'
data Tree a = Leaf a | Node (Tree a) a (Tree a)

-- define a function that takes in two trees and merges them
mergeTrees :: Tree a -> Tree a -> Tree a
mergeTrees (Leaf a) (Leaf b) = Node (Leaf a) b (Leaf b)
mergeTrees (Leaf a) (Node t1 b t2) = Node (Leaf a) b (Leaf b)
mergeTrees (Node t1 a t2) (Leaf b) = Node t1 a (Node (Leaf b) b (Leaf b))
mergeTrees (Node t1 a t2) (Node t3 b t4) = Node (mergeTrees t1 t3) a (mergeTrees t2 t4)

-- example usage
tree1 = Node (Leaf 5) 10 (Leaf 15)
tree2 = Node (Leaf 3) 7 (Leaf 20)
mergedTree = mergeTrees tree1 tree2

-- print out the values of the merged tree
printValues :: Tree a -> IO ()
printStats (Leaf a) = print a
printStats (Node t1 a t2) = do
    printValues t1
    print a
    printValues t2

main :: IO ()
main = do
    printValues mergedTree