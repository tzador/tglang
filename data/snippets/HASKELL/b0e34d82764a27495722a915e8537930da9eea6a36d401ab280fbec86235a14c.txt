-- | Function that takes in a list and checks if all elements are equal to a given value
allElementsEqual :: (Eq a) => a -> [a] -> Bool
allElementsEqual x = all (== x)

-- | Function that takes in a list of integers and computes their sum using recursion
sum :: [Int] -> Int
sum [] = 0
sum (x:xs) = x + sum xs

-- | Function that returns the length of a list using recursion
length :: [a] -> Int
length [] = 0
length (_:xs) = 1 + length xs

-- | Function that maps a function to all elements in a list using recursion
map :: (a -> b) -> [a] -> [b]
map _ [] = []
map f (x:xs) = f x : map f xs

-- | Example usage of the functions
main :: IO ()
main = do
    let list = [1, 2, 3, 4, 5]
    putStrLn ("Is the list all equal to 1? " ++ show (allElementsEqual 1 list))
    putStrLn ("The sum of the list is: " ++ show (sum list))
    putStrLn ("The length of the list is: " ++ show (length list))
    putStrLn ("The mapped list is: " ++ show (map (^2) list))

-- Output:
-- Is the list all equal to 1? False
-- The sum of the list is: 15
-- The length of the list is: 5
-- The mapped list is: [1, 4, 9, 16, 25]