module Main where

-- Function to calculate the n-th fibonacci number
fib :: Integer -> Integer
fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)

-- Function to calculate the factorial of a number
fact :: Integer -> Integer
fact 0 = 1
fact n = n * fact (n-1)

-- Function to check if a number is prime
-- This function uses a faster trial division algorithm
isPrime :: Integer -> Bool
isPrime n 
    | n < 2 = False
    | otherwise = null [x | x <- [2..floor (sqrt (fromIntegral n))], n `mod` x == 0]

-- Function to generate a list of prime numbers up to n
primesTo :: Integer -> [Integer]
primesTo n = filter isPrime [2..n]

-- Main function that accepts user input and outputs results
main :: IO ()
main = do
    putStrLn "Enter a number to calculate its factorial:"
    num <- getLine
    let n = read num :: Integer
    putStrLn ("Factorial of " ++ show n ++ " is " ++ show (fact n))
    putStrLn "Enter a number to calculate its fibonacci number:"
    num <- getLine
    let n = read num :: Integer
    putStrLn ("Fibonacci number at position "  ++ show n ++ " is " ++ show (fib n))
    putStrLn "Enter a number to find all prime numbers up to it:"
    num <- getLine
    let n = read num :: Integer
    putStrLn ("List of prime numbers up to " ++ show n ++ " is " ++ show (primesTo n))