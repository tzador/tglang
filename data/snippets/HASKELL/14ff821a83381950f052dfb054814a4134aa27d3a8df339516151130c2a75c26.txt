{-# LANGUAGE RankNTypes #-}
module Main where

import Data.List (partition)

-- | A type synonym for a function that takes in an `a` and returns an `a`.
type MonoidFunc a = forall m. Monoid m => a -> m

-- | Takes in a list and partitions it into two lists based on a predicate function.
partitionWithFunction :: MonoidFunc a -> [a] -> ([a], [a])
partitionWithFunction _ [] = ([], [])
partitionWithFunction f (x:xs) =
  let (l, r) = partitionWithFunction f xs -- partition the rest of the list
  in (x : l, if f x == mempty then r else x : r) -- prepend current element to left list, depending on if it satisfies the predicate

main :: IO ()
main = do
  let nums = [1,2,3,4,5,6,7,8,9]
  let (evens, odds) = partitionWithFunction (\x -> if x `mod` 2 == 0 then Sum x else Product x) nums -- partition list into even and odd numbers using a function that returns the Sum or Product of the number
  putStrLn $ "Evens: " ++ show evens -- print the list of evens
  putStrLn $ "Odds: " ++ show odds -- print the list of odds