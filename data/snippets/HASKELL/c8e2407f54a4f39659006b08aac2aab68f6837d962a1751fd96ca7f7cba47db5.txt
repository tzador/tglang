-- Function to compute the factorial of a number recursively
factorial :: Integer -> Integer      -- Function type declaration
factorial 0 = 1                      -- Base case
factorial n = n * factorial (n-1)    -- Recursive case

-- Function to compute the nth Fibonacci number using pattern matching
fibonacci :: Integer -> Integer      -- Function type declaration
fibonacci 0 = 0                      -- Base case 1
fibonacci 1 = 1                      -- Base case 2
fibonacci n = fibonacci (n-1) + fibonacci (n-2)     -- Recursive case

-- Function to check if a number is prime
isPrime :: Integer -> Bool           -- Function type declaration
isPrime n
    | n < 2 = False                  -- 0 and 1 are not prime numbers
    | n == 2 = True                  -- 2 is the only even prime number
    | otherwise = all (\x -> n `mod` x /= 0) [2..(n-1)]      -- Checks if any number between 2 and n-1 divide n evenly 

-- Function to check if a list is sorted in ascending order using pattern matching
isSorted :: Ord a => [a] -> Bool     -- Function type declaration with a constraint on data type a
isSorted [] = True                   -- An empty list is considered sorted
isSorted [x] = True                  -- A list with only one element is considered sorted
isSorted (x:y:ys)
    | x <= y = isSorted (y:ys)       -- Recursive case if first element is smaller than second element
    | otherwise = False              -- Returns false if first element is larger than second element