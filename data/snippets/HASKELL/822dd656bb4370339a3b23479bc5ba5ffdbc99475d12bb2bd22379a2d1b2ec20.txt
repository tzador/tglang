import Data.List

-- | A function that counts the number of occurrences of a given element in a list
countOccurrences :: (Eq a) => a -> [a] -> Int
countOccurrences x = length                    -- length calculates the length of a list
                    . filter (==x)             -- filter takes a predicate function (==x) and a list and returns a new list containing only the elements that satisfy the predicate
                   
-- | A function that returns a list of unique elements in a given list
uniqueList :: (Eq a) => [a] -> [a]
uniqueList [] = []                             -- base case: empty list returns empty list
uniqueList (x:xs) = x : uniqueList (filter (/=x) xs)   -- recursively add the first element to the list, and remove all instances of it from the rest of the list

-- | A function that sorts a list in descending order
descendingSort :: (Ord a) => [a] -> [a]
descendingSort = reverse . sort                 -- sort function sorts a list in ascending order, reverse reverses the list, resulting in a descending sorted list