-- This is a function that takes in a list of integers and returns a new list of integers
-- where each element is increased by 1
inc :: [Int] -> [Int]
inc [] = [] -- base case: if given an empty list, return an empty list
inc (x:xs) = (x+1) : inc xs -- for a non-empty list, add 1 to the first element and recursively call the function on the rest of the list


-- This is a function that takes in a list of strings and returns a new list of strings
-- where each string is repeated 3 times
tripleStrings :: [String] -> [String]
tripleStrings [] = [] -- base case: if given an empty list, return an empty list
tripleStrings (x:xs) = replicate 3 x ++ tripleStrings xs -- for a non-empty list, use the 'replicate' function to repeat the string 3 times and recursively call the function on the rest of the list


-- This is a function that takes in a list of tuples and returns a new list of tuples
-- where the first element of each tuple is incremented by 1
incFirst :: [(Int, String)] -> [(Int, String)]
incFirst [] = [] -- base case: if given an empty list, return an empty list
incFirst ((x,y):xs) = (x+1, y) : incFirst xs -- for a non-empty list, add 1 to the first element of each tuple and recursively call the function on the rest of the list 


-- Example usage of the above functions:
-- inc [1,2,3,4] will output [2,3,4,5]
-- tripleStrings ["Hello", "world", "!"] will output ["HelloHelloHello", "worldworldworld", "!!!"]
-- incFirst [(1, "a"), (2, "b"), (3, "c")] will output [(2, "a"), (3, "b"), (4, "c")]