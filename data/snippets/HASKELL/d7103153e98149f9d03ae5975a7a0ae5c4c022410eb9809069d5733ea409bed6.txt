-- A type synonym for a polynomial function
type PolyFunc = [Double] -> Double

-- A function that computes the derivative of a polynomial function
-- using the power rule
deriv :: PolyFunc -> PolyFunc
deriv f = \x -> sum [fromIntegral n * p * (x^(n-1)) | (n,p) <- zip [1..] (f x)]

-- A function that computes the integral of a polynomial function
-- using the sum of rectangles method
integrate :: PolyFunc -> Double -> Double -> Double
integrate f a b = sum [f (a + ((b - a) * (fromIntegral n / 100))) * ((b - a) / 100)
                      | n <- [1..100]]

-- A function that composes two polynomial functions together
compose :: PolyFunc -> PolyFunc -> PolyFunc
compose f g = \x -> f (g x)

-- A type class for monoids
class Monoid a where
    -- An empty element
    mempty :: a
    
    -- An associative binary operation
    mappend :: a -> a -> a
    
    -- A function that folds a list using the binary operation and starting with the empty element
    fold :: [a] -> a
    fold [] = mempty
    fold (x:xs) = x `mappend` fold xs

-- A type synonym for a binary tree with elements of type "a"
type Tree a = Empty | Node a (Tree a) (Tree a)

-- A function that inserts a new element into a tree
insert :: (Ord a) => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty
insert x (Node v l r) | x == v = Node x l r
                      | x < v  = Node v (insert x l) r
                      | x > v  = Node v l (insert x r)