data BinaryTree a = Empty | Node a (BinaryTree a) (BinaryTree a)

-- The above line creates a Binary Tree data type with a generic value and two branches, either an empty node or a node with two BinaryTree branches.

insert :: (Ord a) => a -> BinaryTree a -> BinaryTree a
insert x Empty = Node x Empty Empty
insert x (Node val left right)
    | x == val = Node val left right
    | x < val = Node val (insert x left) right
    | x > val = Node val left (insert x right)
    
-- The above lines implement a function to insert a new element into the Binary Tree in the appropriate place according to its ordering.
    
contains :: (Ord a) => a -> BinaryTree a -> Bool
contains _ Empty = False
contains x (Node val left right)
    | x == val = True
    | x < val = contains x left
    | x > val = contains x right
    
-- The above lines implement a function to check if a given element is present in the Binary Tree.
    
size :: BinaryTree a -> Int
size Empty = 0
size (Node _ left right) = 1 + size left + size right

-- The above lines implement a function to calculate the size of the Binary Tree, i.e. the number of elements it contains.

height :: BinaryTree a -> Int
height Empty = 0
height (Node _ left right) = 1 + max (height left) (height right)

-- The above lines implement a function to calculate the height of the Binary Tree, i.e. the maximum number of branches from the root to a leaf node.

inorder :: BinaryTree a -> [a]
inorder Empty = []
inorder (Node val left right) = (inorder left) ++ [val] ++ (inorder right)

-- The above lines implement an inorder traversal function to return the elements of the Binary Tree in sorted order.

preorder :: BinaryTree a -> [a]
preorder Empty = []
preorder (Node val left right) = [val] ++ (preorder left) ++ (preorder right)

-- The above lines implement a preorder traversal function to return the elements of the Binary Tree in preorder.

postorder :: BinaryTree a -> [a]
postorder Empty = []
postorder (Node val left right) = (postorder left) ++ (postorder right) ++ [val]

-- The above lines implement a postorder traversal function to return the elements of the Binary Tree in postorder.