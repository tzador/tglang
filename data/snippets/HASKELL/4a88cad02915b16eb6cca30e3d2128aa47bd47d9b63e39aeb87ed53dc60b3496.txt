{-# OPTIONS_GHC -w #-}
module Main where

import Data.List

-- | The main function for the program.
main :: IO ()
main = do
    putStrLn "Welcome to this complex code snippet in Haskell!"

    -- | A list of integers.
    let list = [1,2,3,4,5]

    -- | A higher order function to filter out even numbers.
    let evenList = filter (\x -> x `mod` 2 == 0) list
    putStrLn "Filtered list of even numbers:"
    print evenList

    -- | A function to calculate the sum of a list of numbers.
    let sumList = foldl1' (+)
    putStrLn "Sum of the list:"
    print (sumList list)

    -- | A function to calculate the average of a list of numbers.
    let avgList = foldl1' (+) list `div` length list
    putStrLn "Average of the list:"
    print avgList

    -- | A list comprehension to create a list of tuples with the first element being a number and the second element being its square.
    let squaredList = [(x, x^2) | x <- list]
    putStrLn "List of tuples with number and its square:"
    print squaredList

    -- | A recursive function to find the factorial of a number.
    let factorial n = if n == 0 then 1 else n * factorial (n-1)
    putStrLn "Factorial of 5:"
    print (factorial 5)

    -- | A function to check if a number is prime.
    let isPrime n = n > 1 && all (\x -> n `mod` x /= 0) [2..n-1]
    putStrLn "Is 7 a prime number?"
    print (isPrime 7)