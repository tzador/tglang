module Main where -- module declaration

import Data.List (nub) -- importing nub function from Data.List module

-- function to check if a list is sorted in ascending order
isSorted :: Ord a => [a] -> Bool
isSorted [] = True
isSorted [_] = True
isSorted (x:y:xs) = x <= y && isSorted (y:xs) -- recursive call

-- function to find the longest increasing subsequence in a list
longestIncreasingSubsequence :: Ord a => [a] -> [a]
longestIncreasingSubsequence [] = []
longestIncreasingSubsequence xs = last $ foldl (\acc x -> if isSorted (x:acc) then x:acc else acc) [] xs
-- foldl function applies the lambda expression to each element of the list, starting with an empty list as initial accumulator
-- if the current element added to the accumulator is sorted, it is added to the list, otherwise the accumulator remains unchanged
-- the last element of the resulting list is the longest increasing subsequence

main :: IO () -- main function declaration
main = do -- do block
  let list = [5,1,2,3,4]
  putStrLn $ "Input list: " ++ show list
  let subsequence = longestIncreasingSubsequence list
  putStrLn $ "Longest increasing subsequence: " ++ show subsequence
-- let bindings are used to define variables within a do block
-- show function is used to convert a value into a string
-- putStr function prints a string on the screen