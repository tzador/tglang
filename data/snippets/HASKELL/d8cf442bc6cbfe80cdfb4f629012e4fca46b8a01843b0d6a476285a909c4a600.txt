import Data.Maybe

data Tree a = Leaf | Node a (Tree a) (Tree a) deriving (Show)

-- | A function that returns the maximum value in a binary tree.
-- | 
-- | This function uses the `Maybe` data type to handle the case of an empty tree.
-- | If the tree is empty, it returns `Nothing`.
-- | Otherwise, it recursively searches through the tree to find the maximum value.
-- | 
-- | For example:
-- | >>> maxTreeValue (Leaf :: Tree Int)
-- | Nothing
-- | >>> maxTreeValue (Node 5 (Leaf :: Tree Int) (Node 10 (Leaf :: Tree Int) Leaf))
-- | Just 10
maxTreeValue :: Ord a => Tree a -> Maybe a
maxTreeValue Leaf = Nothing
maxTreeValue (Node val left right) = Just (max val (maxTreeValue left `orElse` maxTreeValue right))

-- | A helper function that combines two `Maybe` values.
-- | If the first value is `Just`, it is returned.
-- | Otherwise, the second value is returned.
-- | 
-- | For example:
-- | >>> Just 5 `orElse` Just 10
-- | Just 5
-- | >>> Nothing `orElse` Just 10
-- | Just 10
orElse :: Maybe a -> Maybe a -> Maybe a
orElse (Just x) _ = Just x
orElse Nothing x = x