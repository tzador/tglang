type Name = String
data Employee = Programmer Name String Int | Manager Name String [Employee]
-- This code creates a new datatype Employee that can have two different forms: Programmer or Manager
-- The Programmer form contains a name, programming language, and number of years of experience
-- The Manager form contains a name, department, and a list of Employees as subordinates
employee1 :: Employee
employee1 = Programmer "John" "Haskell" 5
-- This creates a new Employee of form Programmer with name "John", programming language "Haskell", and 5 years of experience
employee2 :: Employee
employee2 = Employee "Jane" "Marketing" [employee1]
-- This creates a new Employee of form Manager with name "Jane", department "Marketing", and a list containing employee1 as a subordinate.
totalYearsExp :: Employee -> Int
-- This is a function that takes an Employee as input and outputs the total years of experience from that Employee
totalYearsExp (Programmer _ _ yearsExp) = yearsExp
-- This is a pattern-matching case for when the Employee is of form Programmer, it takes the number of yearsExp and outputs it
totalYearsExp (Manager _ _ subordinates) = sum (map totalYearsExp subordinates)
-- This is a pattern-matching case for when the Employee is of form Manager, it maps the totalYearsExp function onto each subordinate and sums them to get the total years of experience for the Manager's team.