-- This is a function that takes in two lists and returns a list containing the elements that are common to both lists, using recursion.

-- Function signature
commonElements :: Eq a => [a] -> [a] -> [a]

-- Base case: If either list is empty, return empty list
commonElements [] _ = []
commonElements _ [] = []

-- Recursive case: Check if the head of first list is in the second list
commonElements (x:xs) ys
    | x `elem` ys = x : commonElements xs ys -- If it is, add it to the output list and continue recursion
    | otherwise = commonElements xs ys -- If not, continue recursion without adding it to the output list