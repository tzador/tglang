-- | Implementation of Merge Sort in Haskell

-- | Define a function to split the list into two equal parts
split :: [a] -> ([a], [a])
split xs = (take h xs, drop h xs) 
  where 
    h = (length xs) `div` 2

-- | Define a function to merge two sorted lists into one
merge :: Ord a => [a] -> [a] -> [a]
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys) 
  | x <= y = x:(merge xs (y:ys))
  | otherwise = y:(merge (x:xs) ys)

-- | Define a function to perform merge sort
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs = 
  let (firstHalf, secondHalf) = split xs  -- Split the list into two halves
      sortedFirstHalf = mergeSort firstHalf  -- Sort the first half recursively
      sortedSecondHalf = mergeSort secondHalf  -- Sort the second half recursively
  in merge sortedFirstHalf sortedSecondHalf -- Merge the sorted halves
  
-- | Example usage
mergeSort [9,2,5,1,8,3]  -- Output: [1,2,3,5,8,9]