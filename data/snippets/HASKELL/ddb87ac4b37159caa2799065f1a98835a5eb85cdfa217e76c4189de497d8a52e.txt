import Data.List (group, sort, maximumBy)
import Data.Ord (comparing)

-- Calculates the Shannon entropy of a given list of data.
shannonEntropy :: [a] -> Double
shannonEntropy xs = sum [negate (p * logBase 2 p) | p <- frequencies]
  where frequencyList = map (\x -> (head x, length x)) (group (sort xs))
        frequencies = map (\(_, y) -> fromIntegral y / fromIntegral (length xs)) frequencyList

-- Finds the most frequent element of a given list.
mode :: [a] -> a
mode = fst . maximumBy (comparing snd) . map (\x -> (head x, length x)) . group . sort