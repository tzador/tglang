// The following code implements a function that checks if a given list is a palindrome

isPalindrome :: (Eq a) => [a] -> Bool
isPalindrome [] = True
isPalindrome [x] = True
isPalindrome (x:xs) = x == last xs && isPalindrome(init xs)

-- This function takes in a list and uses pattern matching to check for two base cases: an empty list and a list with only one element.
-- Then, it checks if the first element is equal to the last element of the list and calls itself recursively on the remaining list (excluding the first and last element)
-- If every recursive call returns true, the function will ultimately return true, indicating that the list is a palindrome. If at any point, the first and last elements are not equal, the function will return false.

-- Example usage:
-- isPalindrome [1,2,3,2,1] returns True
-- isPalindrome [1,2,3,2] returns False

-- Note: This function uses the built-in functions "last" and "init" to get the last and remaining elements of the list respectively.