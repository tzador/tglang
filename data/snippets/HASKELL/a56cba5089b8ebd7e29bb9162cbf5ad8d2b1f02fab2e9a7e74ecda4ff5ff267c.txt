import Control.Monad (guard) -- import the monad function

-- define a function that takes in a list and returns all permutations of that list
permutations :: Eq a => [a] -> [[a]]

-- base case: an empty list has only one permutation - an empty list
permutations [] = [[]]

-- recursive case: for each element in the list, find all permutations of the remaining elements
-- and add the current element to the front of each permutation
permutations (x:xs) = do
  perm <- permutations xs -- get all permutations of the remaining list
  guard (x `notElem` perm) -- ensure that the permutation does not already contain the current element
  [x:perm | perm <- permutations xs] -- add the current element to the front of each permutation and return them as a list

-- example usage:
-- permutations [1,2,3]
-- [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]