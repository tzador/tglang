{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, TypeSynonymInstances #-}

-- | A type class for monoids that can be compared.
class (Monoid a) => CompareMonoid a where
    -- | Compare two monoidal values
    compareMonoid :: a -> a -> Ordering

-- | A monoid that represents a binary tree with values at the leaves.
data BinaryTree a = TLeaf a | TBranch (BinaryTree a) (BinaryTree a)
                   deriving (Show)

-- | A type synonym for a binary tree of integers.
type IntBinaryTree = BinaryTree Int

-- instance for the CompareMonoid type class for the IntBinaryTree type.
instance CompareMonoid IntBinaryTree where
    -- | Compare two binary trees by summing their values and comparing the sums.
    compareMonoid (TLeaf a) (TLeaf b) = compare a b
    compareMonoid (TBranch left1 right1) (TBranch left2 right2) =
        compareMonoid left1 left2 `mappend` compareMonoid right1 right2
    compareMonoid _ _ = EQ