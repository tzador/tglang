first :: [a] -> a
first (a : _) = a
 
second :: [a] -> a
second (_ : b : _) = b
second _ = error "Not enough elements in list!"
 
reverse' :: [a] -> [a]
reverse' = foldl (flip (:)) []
 
merge :: Ord a => [a] -> [a] -> [a]
merge xs [] = xs
merge [] ys = ys
merge (x : xs) (y : ys)
  | x <= y = x : merge xs (y : ys)
  | otherwise = y : merge (x : xs) ys
 
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs = merge (mergeSort $ take half xs) (mergeSort $ drop half xs)
  where
    half = length xs `div` 2