{-# LANGUAGE MultiWayIf #-}

import Data.Char (isSpace)
import Data.List (elemIndex, partition, sort)
import Data.Maybe (fromMaybe)

{-
A complex code snippet in Haskell that utilizes multiple language extensions and library functions. 
The code snippet includes a function that takes in a list of ints, removes the negative numbers, 
and sorts the resulting list in descending order. The function also takes a Char as a parameter 
and converts it to lowercase before checking if it's a vowel using the "elemIndex" function from Data.List.
If the Char is a vowel, it returns the string "Vowel", otherwise, it returns "Not a vowel".
-}

removeNegatives :: [Int] -> [Int]
removeNegatives xs = [x | x <- xs, x >= 0]

sortDescending :: [Int] -> [Int]
sortDescending xs = reverse $ sort xs

checkVowel :: Char -> String
checkVowel c = 
  if | c `elemIndex` ['a', 'e', 'i', 'o', 'u'] /= Nothing -> "Vowel"
     | otherwise -> "Not a vowel"

main :: IO ()
main = do
  putStrLn $ "Enter a list of integers separated by a space:"
  input <- getLine
  let numbers = map read $ words input :: [Int]
  let positive = removeNegatives numbers
  putStrLn $ "Positive numbers sorted in descending order: " ++ show (sortDescending positive)
  putStrLn ""
  putStrLn $ "Enter a single character:"
  char <- getChar
  let lowercase = toLower char
  putStrLn $ "Result: " ++ checkVowel lowercase
  where
    toLower c | isSpace c = c
              | c `elemIndex` ['A'..'Z'] /= Nothing = fromMaybe c (c `elemIndex` ['A'..'Z'] >>= \i -> ['a'..'z'] !! i)
              | otherwise = c

-- Output:
-- `Enter a list of integers separated by a space:`
-- `2 15 -3 0 8 -1`
-- `Positive numbers sorted in descending order: [15,8,2,0]`

-- `Enter a single character:`
-- `a`
-- `Result: Vowel`