{-# LANGUAGE FlexibleContexts, GADTs, KindSignatures #-}

-- These are language extensions that allow for more flexible type contexts and
-- explicit type signatures in our code.

module ComplexNumbers (
    Complex(..), 
    cAdd,
    cMult,
    cSub,
    cDiv,
    cAbs,
    cConj,
    cReal,
    cImaginary
    ) where
    
-- This is a module declaration that exposes our functions and data types.

data Complex a = Complex !a !a
    deriving (Eq, Show)
    
-- This is our main data type, a Complex number with two fields, the real and imaginary parts.

instance (Num a) => Num (Complex a) where
    negate (Complex x y) = Complex (negate x) (negate y)
    (Complex x y) + (Complex z w) = Complex (x+z) (y+w)
    (Complex x y) * (Complex z w) = Complex (x*z - y*w) (x*w + y*z)
    abs (Complex x y) = Complex (sqrt (x*x + y*y)) 0
    signum c@(Complex x _) = if x == 0 then 0 else c / cAbs c
    fromInteger n = Complex (fromInteger n) 0
    
-- This is our Num typeclass instance for Complex numbers, allowing us to perform arithmetic operations.

cAdd :: (Num a) => Complex a -> Complex a -> Complex a
cAdd = (+)

-- A function that adds two Complex numbers together.

cMult :: (Num a) => Complex a -> Complex a -> Complex a
cMult = (*)

-- A function that multiplies two Complex numbers together.

cSub :: (Num a) => Complex a -> Complex a -> Complex a
cSub = (-)

-- A function that subtracts two Complex numbers.

cDiv :: (Fractional a) => Complex a -> Complex a -> Complex a
cDiv (Complex a b) (Complex c d) = Complex ((a*c + b*d) / q) ((b*c - a*d) / q)
  where
    q = c*c + d*d

-- A function that divides two Complex numbers together.

cAbs :: (Floating a) => Complex a -> Complex a
cAbs (Complex a b) = Complex (sqrt (a*a + b*b)) 0

-- A function that returns the absolute value of a Complex number.

cConj :: (RealFloat a) => Complex a -> Complex a
cConj (Complex a b) = Complex a (-b)

-- A function that takes the conjugate of a Complex number.

cReal :: (Real a) => Complex a -> a
cReal (Complex a _) = a

-- A function that returns the real part of a Complex number.

cImaginary :: (Real a) => Complex a -> a
cImaginary (Complex _ b) = b

-- A function that returns the imaginary part of a Complex number.