-- Define a recursive function to calculate the factorial of a number
factorial :: Integer -> Integer
factorial n 
  | n == 0 = 1
  | otherwise = n * factorial (n - 1)

-- Define a function to generate a list of natural numbers up until a given number
naturalNumbers :: Integer -> [Integer]
naturalNumbers n = [1..n]

-- Define a function to filter a list and return only even numbers
filterEven :: [Int] -> [Int]
filterEven xs = [x | x <- xs, x `mod` 2 == 0]

-- Define a function to sort a list in ascending order
sortAsc :: Ord a => [a] -> [a]
sortAsc [] = []
sortAsc (x:xs) = (sortAsc smaller) ++ [x] ++ (sortAsc larger)
  where
    smaller = [a | a <- xs, a <= x]
    larger = [a | a <- xs, a > x]

-- Define a function to calculate the area of a rectangle
areaRectangle :: Float -> Float -> Float
areaRectangle length width = length * width

-- Define a data type for a person with a name, age, and gender
data Person = Person {
  name :: String,
  age :: Int,
  gender :: String
} deriving (Show)