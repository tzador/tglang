{-# LANGUAGE TypeOperators, GADTs, DataKinds #-}

-- Define a Vector data type representing a vector with a given length
-- and containing values of a specific type
data Vector (length :: Nat) a where
  -- The empty vector has a length of 0 and no values
  VNil :: Vector 0 a
  -- A cons operation that adds a value to the vector, increasing its length by 1
  VCons :: a -> Vector n a -> Vector (n + 1) a

-- Concatenate two vectors of any length into a single vector
(+++) :: Vector n a -> Vector m a -> Vector (n + m) a
VNil +++ ys = ys  -- The empty vector concatenated with any vector is equal to the other vector
VCons x xs +++ ys = VCons x (xs +++ ys)  -- Concatenate the first vector with the rest of the concatenated vectors

-- Define a function that reverses the elements in a vector
reverse :: Vector n a -> Vector n a
reverse VNil = VNil  -- The reverse of an empty vector is just the empty vector
reverse (VCons x xs) = reverse xs +++ VCons x VNil  -- Recursively reverse the rest of the vector and add the first element to the end

-- Create a vector containing the numbers 1, 2, and 3
vec :: Vector 3 Int
vec = VCons 1 (VCons 2 (VCons 3 VNil))

-- Print the reversed vector
main :: IO ()
main = print $ reverse vec  -- Output: VCons 3 (VCons 2 (VCons 1 VNil))