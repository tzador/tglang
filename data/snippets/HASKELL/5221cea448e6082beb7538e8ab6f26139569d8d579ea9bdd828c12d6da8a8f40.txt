{-# LANGUAGE MultiParamTypeClasses, FunctionalDependencies, InstanceSigs, FlexibleInstances  #-}
module Main where

-- Class definition for a binary tree
class BinaryTree t a | t -> a where
  empty :: t
  add :: a -> t -> t
  contains :: a -> t -> Bool
  delete :: a -> t -> t
  size :: t -> Int
  isLeaf :: t -> Bool
  height :: t -> Int

-- Data type for a binary tree
data Tree a = Empty | Node a (Tree a) (Tree a)

instance BinaryTree (Tree a) a where
  empty :: Tree a
  empty = Empty
  
  add :: a -> Tree a -> Tree a
  add x Empty = Node x Empty Empty
  add x (Node y left right)
    | x == y = Node y left right
    | x < y = Node y (add x left) right
    | x > y = Node y left (add x right)
    
  contains :: a -> Tree a -> Bool
  contains x Empty = False
  contains x (Node y left right)
    | x == y = True
    | x < y = contains x left
    | x > y = contains x right
    
  delete :: a -> Tree a -> Tree a
  delete x Empty = Empty
  delete x (Node y left right)
    | x == y = removeNode (Node y left right)
    | x < y = Node y (delete x left) right
    | x > y = Node y left (delete x right)
  
  size :: Tree a -> Int
  size Empty = 0
  size (Node _ left right) = 1 + size left + size right
  
  isLeaf :: Tree a -> Bool
  isLeaf Empty = False
  isLeaf (Node _ Empty Empty) = True
  isLeaf _ = False
  
  height :: Tree a -> Int
  height Empty = 0
  height (Node _ left right) = 1 + max (height left) (height right)
  
instance Show a => Show (Tree a) where
  show :: Tree a -> String
  show tree = "[" ++ intercalate "," (toList tree) ++ "]"
    where
      toList :: Tree a -> [String]
      toList Empty = []
      toList (Node x left right) = show x : (toList left ++ toList right)
  
-- Example usage
exampleTree :: Tree Int
exampleTree = foldr add empty [3,5,8,2,7,4,1,9,6]
  
main :: IO ()
main = do
  print $ contains 2 exampleTree -- True
  print $ contains 10 exampleTree -- False
  print $ size exampleTree -- 9
  print $ isLeaf exampleTree -- False
  print $ height exampleTree -- 4
  print $ show exampleTree -- [1,2,3,4,5,6,7,8,9]
  print $ show (delete 5 exampleTree) -- [1,2,3,4,6,7,8,9]

-- Helper function to remove a node with two children
removeNode :: Tree a -> Tree a
removeNode (Node y left right) = deleteRoot (Node y left right)
  where
    deleteRoot :: Tree a -> Tree a
    deleteRoot (Node _ Empty right) = right
    deleteRoot (Node _ left Empty) = left
    deleteRoot (Node _ left right) = Node minRight left newRight
      where
        (minRight, newRight) = removeMin right

-- Helper function to find the minimum value in a tree and remove it
removeMin :: Tree a -> (a, Tree a)
removeMin (Node x Empty right) = (x, right)
removeMin (Node x left right) = (min, Node x newLeft right)
  where
    (min, newLeft) = removeMin left