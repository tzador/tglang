--A higher-order function
sumSquares :: [Int] -> Int
sumSquares xs = foldr (\x acc -> x^2 + acc) 0 xs

--Recursive function to calculate factorial
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)

--Map function using recursion
map :: (a -> b) -> [a] -> [b]
map f [] = []
map f (x:xs) = f x : map f xs

--A data type for a binary search tree
data Tree a = EmptyTree | Node a (Tree a) (Tree a)

--Insert function for a binary search tree
insert :: (Ord a) => a -> Tree a -> Tree a
insert x EmptyTree = Node x EmptyTree EmptyTree
insert x (Node a left right)
    | x == a = Node x left right
    | x < a = Node a (insert x left) right
    | x > a = Node a left (insert x right)

--Function to check if a binary search tree contains a given element
contains :: (Ord a) => a -> Tree a -> Bool
contains x EmptyTree = False
contains x (Node a left right)
    | x == a = True
    | x < a = contains x left
    | x > a = contains x right