fibs :: [Integer]
fibs = 0 : scanl (+) 1 fibs

isPrime :: Integer -> Bool
isPrime n = n > 1 && foldr (\p r -> p*p > n || ((n `rem` p) /= 0 && r))
                  True primes
 
primes :: [Integer]
primes = 2 : filter isPrime [3,5..]

diff :: (Ord a) => [a] -> [a]
diff xs = zipWith (-) (tail xs) xs
 
primeFibs :: [Integer]
primeFibs = filter isPrime (diff fibs)

main :: IO ()
main = do 
    putStrLn "This program will calculate the first 20 prime Fibonacci numbers."
    putStrLn "The first 20 prime Fibonacci numbers are:"
    print (take 20 primeFibs)