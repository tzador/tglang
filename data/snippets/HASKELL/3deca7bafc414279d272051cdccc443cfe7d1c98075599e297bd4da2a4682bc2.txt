-- This function counts the number of occurrences of a given element in a list
-- Input: lst - the list to search in, x - the element to search for
-- Output: count - the number of occurrences of x in lst

countOccurrences :: (Eq a) => [a] -> a -> Int -- function signature

countOccurrences [] _ = 0 -- base case, empty list 
countOccurrences (x:xs) y -- if first element matches y, add 1 to count
  | x == y = 1 + countOccurrences xs y
  | otherwise = countOccurrences xs y -- otherwise, continue recursion

-- Example usage:
-- countOccurrences [1, 2, 3, 3, 2, 3, 1] 3 -- returns 3, since 3 occurs 3 times in the list