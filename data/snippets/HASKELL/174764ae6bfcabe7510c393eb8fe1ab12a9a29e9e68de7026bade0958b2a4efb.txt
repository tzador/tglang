{-# LANGUAGE DataKinds, GADTs, KindSignatures, StandaloneDeriving, UndecidableInstances #-}

import Data.Kind (Type)

data List (a :: Type) :: Type where
  Nil  :: List a
  Cons :: a -> List a -> List a

infixr 5 `Cons`

deriving instance Show a => Show (List a)

type instance (a :: List l) ++ (b :: List l) = List l

type One = 'Cons Int 'Nil

-- 'Foldl' implementation of 'Foldable' instance
instance Foldable (List a) where
  foldr :: forall b. (a -> b -> b) -> b -> List a -> b
  foldr _ acc Nil        = acc
  foldr f acc (Cons h t) = foldr f (f h acc) t

infixr 5 `Cons`

data Nat :: Type where
  Zero :: Nat
  Succ :: Nat -> Nat

deriving instance Show Nat

type Two    = 'Succ One
type Three  = 'Succ Two
type Four   = 'Succ Three
type Five   = 'Succ Four
type Six    = 'Succ Five
type Seven  = 'Succ Six
type Eight  = 'Succ Seven
type Nine   = 'Succ Eight
type Ten    = 'Succ Nine

data Vec :: Type -> Nat -> Type where
  VNil  :: Vec a 'Zero
  VCons :: a -> Vec a n -> Vec a ('Succ n)

deriving instance Show a => Show (Vec a n)

type instance (a :: Vec l m) ++ (b :: Vec l n) = Vec l (m + n)

vec :: Vec Integer Nine
vec = VCons 1 $ VCons 2 $ VCons 3 $ VCons 4 $ VCons 5 $ VCons 6 $ VCons 7 $ VCons 8 $ VCons 9 VNil

transpose :: Vec (Vec Integer Five) Five -> Vec (Vec Integer Five) Five
transpose rows = case rows of
  VCons VNil       _           -> VNil
  VCons (VCons _ _) _           -> undefined -- implementation will not be provided for brevity sake

main :: IO ()
main = print . transpose $ vec `Cons` vec `Cons` vec `Cons` vec `Cons` vec `Cons` Nil