import Data.List

-- | Returns the list of all permutations of a given list.
-- Example: `perms [1,2,3] = [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]`
perms :: [a] -> [[a]]
perms [] = [[]]
perms (x:xs) = concatMap (insert x) (perms xs)
  where 
    -- | Inserts an element in all possible positions in a list.
    -- Example: `insert 4 [1,2,3] = [[4,1,2,3],[1,4,2,3],[1,2,4,3],[1,2,3,4]]`
    insert :: a -> [a] -> [[a]]
    insert x [] = [[x]]
    insert x (y:ys) = (x:y:ys) : map (y:) (insert x ys)

-- | Returns the list of all subsets of a given list.
-- Example: `subsets [1,2,3] = [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]`
subsets :: [a] -> [[a]]
subsets [] = [[]]
subsets (x:xs) = subsets xs ++ map (x:) (subsets xs)