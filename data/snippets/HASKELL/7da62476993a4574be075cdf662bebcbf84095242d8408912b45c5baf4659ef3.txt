{-# LANGUAGE TypeFamilies, DataKinds, ConstraintKinds #-}

-- Data type representing a tree with nodes and leaves
data Tree a = Node (Tree a) a (Tree a) | Leaf a

-- Type function that gets the type of the elements in the tree
type family Elem (t :: Tree a) :: a

-- Constraint kind for a type to be a valid element of a tree
type ValidElem a = (Eq a, Ord a, Show a)

-- Instance declaration for the type function
instance Eq a => Elem (Tree a) where
  type Elem (Tree a) = a

-- Function that determines if an element is in a tree
elem :: (ValidElem a, Elem t ~ a) => a -> t -> Bool
elem x (Leaf a) = x == a
elem x (Node l a r) = x == a || elem x l || elem x r

-- Function that inserts an element into a tree
insert :: (ValidElem a, Elem t ~ a) => a -> t -> t
insert x (Leaf a) = if x == a then Leaf x else Node (Leaf x) a (Leaf x)
insert x (Node l a r) = if x < a then Node (insert x l) a r else Node l a (insert x r)

-- Example usage of the above functions
exampleTree :: Tree Int
exampleTree = Node (Node (Leaf 1) 3 (Leaf 4)) 5 (Node (Leaf 6) 8 (Leaf 9))

-- Output: `Node (Node (Leaf 1) 5 (Node (Leaf 6) 8 (Leaf 9))) 5 (Node (Leaf 10) 12 (Leaf 13))`
insert 10 exampleTree