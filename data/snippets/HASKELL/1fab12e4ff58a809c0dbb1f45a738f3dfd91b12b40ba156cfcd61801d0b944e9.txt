import Data.List (transpose)

-- | A function that computes the sum of two matrices with annotated types for each parameter and output.
matrixSum :: Num a => [[a]]  -- ^ First matrix
          -> [[a]]  -- ^ Second matrix
          -> [[a]]  -- ^ Sum of the two matrices
matrixSum [] [] = []
matrixSum (x:xs) (y:ys) = zipWith (+) x y : matrixSum xs ys

-- | A function that replicates the elements of a list a certain number of times with type annotations.
replicate' :: Int  -- ^ Number of times to replicate each element
           -> [a]  -- ^ List to replicate
           -> [a]  -- ^ Resulting list with replicated elements
replicate' n xs = concatMap (replicate n) xs

-- | A function that calculates the transpose of a matrix with type annotations.
matrixTranspose :: [[a]]  -- ^ Input matrix
                -> [[a]]  -- ^ Transposed matrix
matrixTranspose = transpose