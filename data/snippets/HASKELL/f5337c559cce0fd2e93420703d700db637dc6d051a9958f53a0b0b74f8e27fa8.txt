{-|
This function calculates the factorial of a given number.
-}
factorial :: Integer -> Integer
factorial n
    | n == 0 = 1
    | n > 0 = n * factorial (n-1)
    | otherwise = error "Factorial can only be calculated for non-negative integers."

{-|
This function calculates the nth Fibonacci number using pattern matching.
-}
fibonacci :: Integer -> Integer
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n-1) + fibonacci (n-2)

{-|
This function finds the minimum element in a list using recursion and pattern matching.
-}
findMin :: Ord a => [a] -> a
findMin [x] = x
findMin (x:xs)
    | x < minTail = x
    | otherwise = minTail
    where minTail = findMin xs

{-|
This function reverses a list using recursion and pattern matching.
-}
reverseList :: [a] -> [a]
reverseList [] = []
reverseList (x:xs) = reverseList xs ++ [x]

{-|
This function implementing quicksort using list comprehensions.
-}
quicksort :: Ord a => [a] -> [a]
quicksort [] = []
quicksort (x:xs) = (quicksort smaller) ++ [x] ++ (quicksort larger)
    where
        smaller = [a | a <- xs, a <= x]
        larger = [a | a <- xs, a > x]