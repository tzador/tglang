-- This function takes in a list of integers and returns the sum of all the even numbers
-- from the list.
-- Code snippet:

-- This is a recursive function that takes in a list of integers and an accumulator,
-- and recursively sums the even numbers in the list.
sumEven :: [Int] -> Int -> Int
sumEven [] acc = acc -- When the list is empty, return the accumulator
sumEven (x:xs) acc
  | x `mod` 2 == 0 = sumEven xs (acc + x) -- If the current element is even, add it to
                                          -- the accumulator and continue recursing
  | otherwise = sumEven xs acc -- If the current element is odd, just continue recursing

main :: IO ()
main = do
  -- Sample list of integers
  let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]
  -- Call the sumEven function with the sample list and an initial accumulator value of 0
  let result = sumEven nums 0
  -- Print the result to the console
  print result -- Output: 20 (the sum of all even numbers in the list)