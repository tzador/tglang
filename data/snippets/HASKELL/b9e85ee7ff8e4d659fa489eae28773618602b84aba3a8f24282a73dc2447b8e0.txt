-- Define a function to compute the factorial of a number
-- Takes in an integer as input
-- Returns the factorial of that integer as output

factorial :: Int -> Int -- Specifies the input and output types
factorial n = if n == 0 then 1 else n * factorial (n-1) -- Uses recursion to compute the factorial

-- Define a function to compute the sum of a list of numbers
-- Takes in a list of integers as input
-- Returns the sum of the list as output

sumList :: [Int] -> Int -- Specifies the input and output types
sumList [] = 0 -- Base case: empty list returns 0
sumList (x:xs) = x + sumList xs -- Recursive case: adds the first element of the list to the sum of the rest of the list

-- Define a function to compute the nth Fibonacci number
-- Takes in an integer as input
-- Returns the nth Fibonacci number as output

fibonacci :: Int -> Int -- Specifies the input and output types
fibonacci n = if n == 0 || n == 1 then n else fibonacci (n-1) + fibonacci (n-2) -- Uses recursion to compute the Fibonacci number