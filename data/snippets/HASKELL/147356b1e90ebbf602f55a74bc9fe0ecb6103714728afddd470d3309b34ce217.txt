-- Define a custom data type called "Tree" with two constructors, "Leaf" and "Node"
data Tree a = Leaf a | Node (Tree a) (Tree a)

-- Define a function called "mapTree" that takes in a function and a Tree and returns a new Tree
-- where the function is applied to every element in the original Tree
mapTree :: (a -> b) -> Tree a -> Tree b
mapTree f (Leaf x) = Leaf (f x)
mapTree f (Node left right) = Node (mapTree f left) (mapTree f right)

-- Define a function called "foldTree" that takes in a function, an initial value and a Tree
-- and recursively applies the function to each element in the Tree, starting with the initial value
foldTree :: (a -> b -> b) -> b -> Tree a -> b
foldTree f acc (Leaf x) = f x acc
foldTree f acc (Node left right) = foldTree f (foldTree f acc right) left