{-# LANGUAGE FlexibleContexts #-} -- enables use of multi-param type classes

module Main where

import qualified Data.Map as Map -- import Data.Map module
import Data.Maybe (fromMaybe) -- import fromMaybe function from Data.Maybe module

type Name = String -- type synonym for Name
type Age = Int -- type synonym for Age
type Address = String --type synonym for Address
type PersonMap = Map.Map Name (Age, Address) -- type synonym for person map

data Person = Person
  { name :: Name -- define name field
  , age :: Age -- define age field
  , address :: Address -- define address field
  } deriving (Show)

class Printable a where
  print :: a -> String

instance Printable Person where
  print person =
    "Name: " ++ name person ++
    ", Age: " ++ show (age person) ++
    ", Address: " ++ address person

person1 :: Person
person1 = Person "John Smith" 25 "123 Main Street"

person2 :: Person
person2 = Person "Jane Doe" 30 "456 First Avenue"

personMap :: PersonMap -- create person map
personMap = Map.fromList [(name person1, (age person1, address person1)), (name person2, (age person2, address person2))]

getPerson :: Name -> PersonMap -> Maybe Person -- function to retrieve person from map
getPerson name personMap = case Map.lookup name personMap of
  Nothing -> Nothing
  Just (age, address) -> Just (Person name age address)

main :: IO ()
main = do
  putStrLn "Enter a name: "
  input <- getLine -- get name from user
  let maybePerson = getPerson input personMap -- retrieve person from map
  let printable = fromMaybe "No person found" (fmap print maybePerson) -- use fmap to print person if found, otherwise default message
  putStrLn printable