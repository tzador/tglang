{-# LANGUAGE DeriveGeneric #-}

module Main where

import GHC.Generics
import Data.Aeson

-- The type for a person record
data Person = Person
    { name :: String
    , age :: Int
    , hobbies :: [String]
    } deriving (Show, Generic)

-- Create an instance of the FromJSON typeclass for Person
instance FromJSON Person

-- The JSON string we want to parse
jsonString :: String
jsonString = "{\"name\":\"John Doe\",\"age\":30,\"hobbies\":[\"coding\",\"reading\",\"hiking\"]}"

-- Function to parse the JSON string into a Person record
parsePerson :: String -> Maybe Person
parsePerson str = decode $ fromString str

-- Main function
main :: IO ()
main = do
    let person = parsePerson jsonString
    case person of
        Just p -> putStrLn (show p)
        Nothing -> putStrLn "Error parsing JSON"