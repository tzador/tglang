import System.IO -- import System.IO library for input/output operations

-- function to merge two sorted lists
merge :: Ord a => [a] -> [a] -> [a]
merge [] xs = xs
merge xs [] = xs
merge (x:xs) (y:ys)
    | x <= y = x : merge xs (y:ys)
    | otherwise = y : merge (x:xs) ys

-- function to split a list into two halves
split :: [a] -> ([a], [a])
split [] = ([], [])
split [x] = ([x], [])
split (x:y:xs) = (x:xs1, y:xs2)
    where (xs1, xs2) = split xs -- recursively split the list

-- function to sort a list using the merge sort algorithm
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs = merge (mergeSort xs1) (mergeSort xs2)
    where (xs1, xs2) = split xs -- split the list into halves and recursively sort them

main = do
    putStrLn "Enter a list of numbers: "
    input <- getLine -- get user input
    let nums = map (read :: String -> Int) (words input) -- convert input string into list of integers
    putStrLn "Sorted list: "
    print (mergeSort nums) -- print sorted list