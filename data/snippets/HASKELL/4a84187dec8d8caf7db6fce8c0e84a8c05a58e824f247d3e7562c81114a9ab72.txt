{-# LANGUAGE DataKinds, GADTs, TypeFamilies, TypeOperators #-}
module BasicAlgebra.Add where

import Data.Kind (Type)

-- | Type-level addition.
--
-- >>> Refl :: Add 2 3 :~: 5
-- Refl
data Add (x :: Nat) (y :: Nat) where
  Refl :: (x + y) :~: (y + x)

-- | Peano natural numbers.
--
-- 'Zero and 'Succ are used for type level computation via DataKinds.
data Nat = Zero | Succ Nat

type family (n :: Nat) + (m :: Nat) :: Nat where
  Z + m = m
  (S n) + m = S (n + m)