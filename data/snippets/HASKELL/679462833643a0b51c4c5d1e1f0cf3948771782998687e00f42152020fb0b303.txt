{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE FunctionalDependencies #-}

module Example where

-- Example data types --
data Animal = Cat | Dog | Bird | Fish deriving Show
data Food = Meat | Vegetables | Seeds deriving Show

-- Typeclass for eating --
class Eatable a b | a -> b where -- a is the type of animal, b is the type of food
    eat :: a -> b -> String

-- Cat can only eat meat --
instance Eatable Animal Meat where
    eat Cat Meat = "Meow, I love this meat!"

-- Dog can eat both meat and vegetables --
instance Eatable Animal Meat where
    eat Dog Meat = "Woof, this meat is delicious!"
    eat Dog Vegetables = "Woof, I'm staying healthy eating vegetables!"

-- Bird can only eat seeds -- 
instance Eatable Animal Seeds where
    eat Bird Seeds = "Tweet, these seeds are so tasty!"

-- Function to feed the animal --
feed :: Animal -> Food -> String
feed animal food = eat animal food

-- Example usage --
main :: IO ()
main = do 
    putStrLn $ feed Dog Meat -- Output: "Woof, this meat is delicious!" 
    putStrLn $ feed Cat Vegetables -- Output: "Meow, I can't eat this!" (No instance for (Eatable Animal Vegetables))
    putStrLn $ feed Fish Seeds -- Output: "Sorry, I can't eat anything!" (No instance for (Eatable Animal Seeds))