-- This function takes in two lists and returns a list that contains elements that are present in both lists.
intersect :: (Eq a) => [a] -> [a] -> [a] -- A function definition with type constraints.
intersect [] _ = [] -- Base case: If first list is empty, return empty list.
intersect (x:xs) ys 
    | x `elem` ys = x : rest -- If first element is present in second list, add it to result and proceed recursively.
    | otherwise = rest -- Otherwise, just proceed recursively.
    where rest = intersect xs ys -- Calculate the intersection of the rest of the first list and second list.

-- Example usage:
intersect [1, 2, 3] [2, 3, 4] -- Output: [2, 3]