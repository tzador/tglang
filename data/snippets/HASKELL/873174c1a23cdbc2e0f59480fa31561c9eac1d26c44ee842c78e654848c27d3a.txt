-- Example program that implements a binary search tree data structure
-- with functions for insertion, deletion, and search.

-- Define a data type for the tree structure
data Tree a = Empty | Node a (Tree a) (Tree a)

-- Function to insert a value into the tree
insert :: (Ord a) => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty
insert x (Node a left right)
  -- If the value is less than the current node, insert it into the left subtree
  | x < a = Node a (insert x left) right
  -- If the value is greater than the current node, insert it into the right subtree
  | x > a = Node a left (insert x right)
  -- If the value already exists in the tree, do not insert it
  | otherwise = Node a left right

-- Function to delete a value from the tree
delete :: (Ord a) => a -> Tree a -> Tree a
delete _ Empty = Empty
delete x (Node a left right)
  -- If the value is less than the current node, delete it from the left subtree
  | x < a = Node a (delete x left) right
  -- If the value is greater than the current node, delete it from the right subtree
  | x > a = Node a left (delete x right)
  -- If the value is equal to the current node, delete it from the tree
  | x == a = case (left, right) of
    -- If both subtrees are empty, simply return an empty tree
    (Empty, Empty) -> Empty
    -- If the left subtree is empty, return the right subtree
    (Empty, _) -> right
    -- If the right subtree is empty, return the left subtree
    (_, Empty) -> left
    -- If both subtrees are non-empty, find the maximum value in the left subtree
    -- and replace the current node with it, then delete the original maximum value
    -- from the left subtree
    (_, _) ->
      let max = maximum (values left)
       in Node max (delete max left) right
  -- If the value is not found in the tree, do not change the tree
  | otherwise = Node a left right

-- Function to check if a value is present in the tree
search :: (Ord a) => a -> Tree a -> Bool
search _ Empty = False
search x (Node a left right)
  -- If the value is less than the current node, search the left subtree
  | x < a = search x left
  -- If the value is greater than the current node, search the right subtree
  | x > a = search x right
  -- If the value is equal to the current node, it is present in the tree
  | x == a = True