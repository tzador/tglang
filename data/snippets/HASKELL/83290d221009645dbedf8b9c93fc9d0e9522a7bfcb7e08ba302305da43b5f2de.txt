{-# LANGUAGE GADTs #-}

-- Defining a GADT called 'Term' with two type parameters
-- 'a' and 'b'
data Term a b where
  -- constructor 'Bool' takes a 'Bool' value and returns
  -- a 'Term Bool b' value
  Bool :: Bool -> Term Bool b
  -- constructor 'Int' takes an 'Int' value and returns
  -- a 'Term Int b' value
  Int :: Int -> Term Int b
  -- constructor 'Equals' takes two values of type 'Term a b'
  -- and returns a 'Term Bool b' value
  Equals :: Term a b -> Term a b -> Term Bool b

-- Defining a type synonym 'Environment' for a list of tuples
-- of type '(String, a)'
type Environment a = [(String, a)]

-- Defining a function 'interpret' that takes in a 'Term a b'
-- and an 'Environment a' and returns a value of type 'b'
interpret :: Term a b -> Environment a -> b
interpret (Bool b) _ = b
interpret (Int n) _ = n
interpret (Equals t1 t2) env =
  -- Getting the values of t1 and t2 by recursively calling
  -- the interpret function
  let v1 = interpret t1 env
      v2 = interpret t2 env
  -- Checking if the values are equal
  in v1 == v2

-- Defining an example environment containing some
-- boolean and integer values
env :: Environment a
env = [("x", True), ("y", False), ("z", 5)]

-- Using the 'Equals' constructor to compare two 'Term' values
-- and storing the result in a variable
result :: Term Bool b
result = Equals (Bool True) (Int 5)

-- Calling the 'interpret' function with the 'result' and 'env'
-- to get the final result
finalResult :: Bool
finalResult = interpret result env

-- Printing the final result
main :: IO ()
main = print finalResult