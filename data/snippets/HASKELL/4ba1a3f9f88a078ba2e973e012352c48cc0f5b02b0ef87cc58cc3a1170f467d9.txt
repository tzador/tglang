--Defining a function to filter a list based on a given predicate
filter :: (a -> Bool) -> [a] -> [a]
filter _ [] = []
filter p (x:xs) = if p x 
                then x : filter p xs 
                else filter p xs

--Defining a function to check if all elements in a list are even
allEven :: [Int] -> Bool
allEven xs = all (\x -> x `mod` 2 == 0) xs

--Defining a function to compute the square of a number
square :: Int -> Int
square x = x * x

--Defining a function to find the sum of squares of all even numbers in a given list
sumOfSquares :: [Int] -> Int
sumOfSquares xs = sum (map square (filter even xs))

--Example input 
> sumOfSquares [1,2,3,4,5,6]
> 56