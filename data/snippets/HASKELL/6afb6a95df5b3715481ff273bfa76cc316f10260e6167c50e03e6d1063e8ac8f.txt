{-# LANGUAGE DeriveGeneric, LambdaCase #-}

module Main where

import GHC.Generics (Generic)
import Data.Aeson (ToJSON, FromJSON, decode, encode)
import Data.Maybe (fromJust)

-- Define a custom data type using record syntax
data Person = Person {
  name :: String,
  age :: Int,
  occupation :: String
} deriving (Show, Generic)

-- Make the data type an instance of ToJSON and FromJSON
instance ToJSON Person
instance FromJSON Person

-- Define a list of Person objects
people :: [Person]
people = [
  Person "John" 25 "Developer",
  Person "Mary" 28 "Doctor",
  Person "Tom" 32 "Teacher"
]

main = do
  -- Encode the list of People to JSON and print it
  putStrLn $ "People JSON: " ++ show (encode people)
  -- Decode the JSON string back to a list of Person objects and print it
  putStrLn $ "People Decoded: " ++ show (decode (fromJust (encode people)) :: Maybe [Person])