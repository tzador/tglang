{- A function to merge two sorted lists -}
merge :: Ord a => [a] -> [a] -> [a]

merge x [] = x
merge [] y = y
merge (x:xs) (y:ys) 
    | x <= y = x:merge xs (y:ys)
    | otherwise = y:merge (x:xs) ys
    
{- A function to split a list into halves -}
halve :: [a] -> ([a], [a])

halve xs = (take (length xs `div` 2) xs, drop (length xs `div` 2) xs)

{- A function to merge sort a list -}
mergesort :: Ord a => [a] -> [a]

mergesort [] = []
mergesort [x] = [x]
mergesort xs =
    let (left, right) = halve xs
    in merge (mergesort left) (mergesort right)

{- Sample test case -}
main = do
    print $ mergesort [3,1,6,4,2,8,5,0] {- Output: [0,1,2,3,4,5,6,8] -}