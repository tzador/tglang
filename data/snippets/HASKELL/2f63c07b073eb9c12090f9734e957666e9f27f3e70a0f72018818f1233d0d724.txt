-- Define a data type for a binary tree
data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)

-- Function to insert an element into a binary tree
insert :: Ord a => a -> Tree a -> Tree a
insert x EmptyTree = Node x EmptyTree EmptyTree -- Create a new tree with the element as the root
insert x (Node val left right) -- If the tree is not empty, compare the element with the root value
    | x == val = Node val left right -- If it is equal, do nothing and return the same tree
    | x < val = Node val (insert x left) right -- If it is less than the root, insert into the left subtree
    | otherwise = Node val left (insert x right) -- If it is greater than the root, insert into the right subtree

-- Function to convert a list into a binary tree
listToTree :: Ord a => [a] -> Tree a
listToTree = foldr insert EmptyTree -- Use foldr to repeatedly insert elements into an initially empty tree

-- Function to perform an inorder traversal of a binary tree
inorder :: Tree a -> [a]
inorder EmptyTree = [] -- If the tree is empty, return an empty list
inorder (Node val left right) = inorder left ++ [val] ++ inorder right -- Inorder traversal is left, root, right

-- Function to perform a preorder traversal of a binary tree
preorder :: Tree a -> [a]
preorder EmptyTree = [] -- If the tree is empty, return an empty list
preorder (Node val left right) = [val] ++ preorder left ++ preorder right -- Preorder traversal is root, left, right

-- Function to perform a postorder traversal of a binary tree
postorder :: Tree a -> [a]
postorder EmptyTree = [] -- If the tree is empty, return an empty list
postorder (Node val left right) = postorder left ++ postorder right ++ [val] -- Postorder traversal is left, right, root