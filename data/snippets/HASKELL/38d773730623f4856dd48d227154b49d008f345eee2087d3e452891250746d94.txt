-- Define a recursive function to calculate the factorial of a number
factorial :: Int -> Int
factorial 0 = 1 -- The base case
factorial n = n * factorial (n - 1) -- The recursive case

-- Define a function to check if a given number is a prime number
isPrime :: Int -> Bool
isPrime n
  | n <= 1 = False
  | n == 2 = True
  | otherwise = not $ any (\x -> n `mod` x == 0) [2..(n-1)]

-- Create a list of prime numbers using the above function and recursion
primeList :: Int -> [Int]
primeList n = filter isPrime [2..n]

-- Define a tree data type
data Tree a = Leaf a | Node (Tree a) (Tree a)

-- Define a function to insert a value into a binary search tree
insert :: Ord a => a -> Tree a -> Tree a
insert value (Leaf a) = Node (Leaf a) (Leaf value)
insert value (Node left right)
  | value < rootValue = Node (insert value left) right
  | value > rootValue = Node left (insert value right)
  | otherwise = Node left right
  where rootValue = getValue (Leaf value)
        getValue (Leaf a) = a

-- Create an example binary search tree
tree :: Tree Int
tree = Node (Node (Leaf 5) (Leaf 3)) (Node (Leaf 8) (Leaf 2))