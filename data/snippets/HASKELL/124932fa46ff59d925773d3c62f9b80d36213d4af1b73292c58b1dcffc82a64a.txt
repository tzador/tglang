-- This is a function to calculate the factorial of a number recursively
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)
-- This is a higher order function that takes in a function 'f' and an integer 'n' and applies 'f' to n twice
applyTwice :: (Int -> Int) -> Int -> Int
applyTwice f n = f (f n)
-- This is an anonymous function that doubles a number
doubleNum :: Int -> Int
doubleNum = (\x -> 2*x)
-- This is a list that contains the first 10 prime numbers
primesList :: [Int]
primesList = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
-- This is a list comprehension that filters even numbers from a list
evenNums :: [Int] -> [Int]
evenNums list = [x | x <- list, even x]
-- This is a custom data type that represents a 2D point with x and y coordinates
data Point = Point Float Float
-- This is a type synonym for a list of points
type PointList = [Point]
-- This is a function that calculates the distance between two points
distance :: Point -> Point -> Float
distance (Point x1 y1) (Point x2 y2) = sqrt ((x1 - x2)^2 + (y1 - y2)^2)