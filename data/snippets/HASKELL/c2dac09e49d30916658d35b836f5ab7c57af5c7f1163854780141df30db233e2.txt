import System.IO
import Control.Monad
import Data.Char

-- A function to find the product of two numbers
multiply :: Int -> Int -> Int
multiply x y = x * y

-- A function to convert a string to uppercase using a list comprehension
uppercase :: String -> String
uppercase str = [toUpper char | char <- str]

-- A function to read a file and return a list of lines
readFileLines :: FilePath -> IO [String]
readFileLines filepath = do
    handle <- openFile filepath ReadMode
    lines <- liftM lines $ hGetContents handle
    hClose handle
    return lines

-- A recursive function to find the nth fibonacci number
fibonacci :: Int -> Int
fibonacci n = if n < 2 then n else fibonacci (n-1) + fibonacci (n-2)

-- A function to sort a list of integers in ascending order
-- using the quicksort algorithm
quicksort :: [Int] -> [Int]
quicksort [] = []
quicksort (x:xs) = quicksort smaller ++ [x] ++ quicksort larger
    where
        smaller = [a | a <- xs, a < x]
        larger = [b | b <- xs, b >= x]

-- A main function to test the above functions
main :: IO ()
main = do
    -- Test multiply function
    putStrLn "The product of 3 and 5 is:"
    putStrLn . show $ multiply 3 5

    -- Test uppercase function
    putStrLn "The string 'hello' in uppercase is:"
    putStrLn $ uppercase "hello"

    -- Test readFileLines function
    lines <- readFileLines "sample.txt"
    putStrLn "The file contains the following lines:"
    putStrLn $ unlines lines

    -- Test fibonacci function
    putStrLn "The 10th fibonacci number is:"
    putStrLn . show $ fibonacci 10

    -- Test quicksort function
    putStrLn "The sorted list [5, 8, 2, 9, 1, 3] is:"
    putStrLn $ show $ quicksort [5, 8, 2, 9, 1, 3]