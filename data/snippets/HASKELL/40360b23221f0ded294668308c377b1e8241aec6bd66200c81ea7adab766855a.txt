{-#LANGUAGE ExistentialQuantification, FlexibleInstances #-}

-- define a data type for a programming language
data Language = Haskell | Python | Java | C

-- define a typeclass for programming languages
class ProgrammingLanguage a where
  -- method to get the name of the language
  getName :: a -> String
  -- default implementation for getName
  getName = show

-- instance of the typeclass for Haskell
instance ProgrammingLanguage Language where
  getName :: Language -> String
  getName Haskell = "Haskell"
  getName language = show language

-- define an existential type for a programming language with a specific functionality
data FunctionalLang = forall a. ProgrammingLanguage a => FunctionalLang a

-- implement the functionality for Haskell
instance ProgrammingLanguage FunctionalLang where
  getName (FunctionalLang x) = "Functional " ++ (getName x)

-- define a function to print the name of a programming language
printLanguageName :: ProgrammingLanguage a => a -> IO ()
printLanguageName lang = putStrLn (getName lang)

-- create a list of different programming languages
languages :: [FunctionalLang]
languages = [FunctionalLang Haskell, FunctionalLang Python, FunctionalLang Java, FunctionalLang C]

-- print the names of the programming languages in the list
main :: IO ()
main = mapM_ printLanguageName languages