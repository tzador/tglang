data Tree a = Empty
            | Node a (Tree a) (Tree a)
            
-- Represents a binary tree with nodes containing values of type 'a'
-- Empty is a leaf node without any value
-- Node has three parameters, the value and the left and right subtree

instance (Show a) => Show (Tree a) where
    show Empty = "Empty"
    show (Node val left right) = "( " ++ show left ++ " <- " ++ show val ++ " -> " ++ show right ++ " )" 
    
-- Provides an implementation for the 'Show' typeclass for the 'Tree' data type
-- Uses pattern matching to display the nodes and their respective subtrees in a readable format

insert :: (Ord a) => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty
insert x (Node val left right)
    | x == val = Node x left right
    | x < val = Node val (insert x left) right
    | x > val = Node val left (insert x right)
    
-- Inserts a value of type 'a' into a binary tree in the correct sorted order
-- If the tree is empty, creates a new node with the given value as the root
-- Uses recursion and pattern matching to traverse the tree and insert the value in the correct location

preorder :: Tree a -> [a]
preorder Empty = []
preorder (Node val left right) = val : (preorder left ++ preorder right)

-- Traverses the binary tree in a preorder fashion, i.e. root, left subtree, right subtree
-- Returns a list of values in the order they are visited
-- Uses recursion and pattern matching to traverse the tree and concatenate the values from the subtrees in the correct order

postorder :: Tree a -> [a]
postorder Empty = []
postorder (Node val left right) = (postorder left ++ postorder right) ++ [val]

-- Traverses the binary tree in a postorder fashion, i.e. left subtree, right subtree, root
-- Returns a list of values in the order they are visited
-- Uses recursion and pattern matching to traverse the tree and concatenate the values from the subtrees in the correct order, followed by the root value

main :: IO ()
main = do
    let tree = Node 5 (Node 2 (Node 1 Empty Empty) (Node 4 Empty Empty)) (Node 7 (Node 6 Empty Empty) (Node 9 Empty Empty))
    
    -- Creates a binary tree with nodes containing integer values
    -- Tree structure is:          5
    --                         /      \
    --                       2          7
    --                     /   \      /   \
    --                    1     4    6     9
    
    putStrLn "Binary Tree in Preorder: "
    print (preorder tree)    -- Outputs [5,2,1,4,7,6,9]
    
    putStrLn "Binary Tree in Postorder: "
    print (postorder tree)   -- Outputs [1,4,2,6,9,7,5]
    
-- Main function to run the program
-- Creates a tree using the 'Node' constructor and prints the preorder and postorder traversal results using the 'print' function and 'putStrLn' to display the labels