{-# LANGUAGE OverloadedStrings #-}
import Data.List (sort)
import Data.Text (Text)

-- This function sorts a list of words alphabetically
alphaSort :: [Text] -> [Text]
alphaSort = sort

-- This function adds a given integer to all the elements of a list
addToList :: Int -> [Int] -> [Int]
addToList n list = map (+n) list

-- This function creates a list of fibonacci numbers up to a given limit
fib :: Int -> [Int]
fib limit = takeWhile (< limit) $ 1 : 1 : zipWith (+) fibs (tail fibs)
  where fibs = fib limit

-- This function checks if a given integer is prime or not
isPrime :: Int -> Bool
isPrime x = x > 1 && all (\n -> x `mod` n /= 0) [2..x-1]

-- This function generates a list of prime numbers up to a given limit
primes :: Int -> [Int]
primes limit = filter isPrime [2..limit]

-- This function calculates the factorial of a given integer
factorial :: Int -> Int
factorial n = product [1..n]

-- This function combines two lists into one using a binary operator
combineLists :: (a -> a -> a) -> [a] -> [a] -> [a]
combineLists f x y = zipWith f x y

-- This function computes the average of a list of numbers
average :: Fractional a => [a] -> a
average xs = sum xs / fromIntegral (length xs)

-- This function converts a string to uppercase using recursion
toUpper :: String -> String
toUpper [] = []
toUpper (x:xs) = toUpperChar x : toUpper xs
  where toUpperChar c
          | c >= 'a' && c <= 'z' = toEnum $ fromEnum c - 32
          | otherwise = c: []

main :: IO ()
main = do
  let words = ["apple", "cat", "banana", "dog"]
  let nums = [1, 2, 3, 4, 5]
  let limit = 100
  let primeNumbers = primes limit
  putStrLn $ "Sorted words: " ++ show (alphaSort words)
  putStrLn $ "Numbers added to list: " ++ show (addToList 5 nums)
  putStrLn $ "Fibonacci numbers up to " ++ show limit ++ ": " ++ show (fib limit)
  putStrLn $ "Prime numbers up to " ++ show limit ++ ": " ++ show primeNumbers
  putStrLn $ "Factorial of 5: " ++ show (factorial 5)
  putStrLn $ "Combined lists using (+): " ++ show (combineLists (+) nums [6, 7, 8, 9, 10])
  putStrLn $ "Combined lists using (*): " ++ show (combineLists (*) nums [6, 7, 8, 9, 10])
  putStrLn $ "Average of " ++ show nums ++ ": " ++ show (average nums)
  putStrLn $ "Uppercase of 'hello' using recursion: " ++ show (toUpper "hello")