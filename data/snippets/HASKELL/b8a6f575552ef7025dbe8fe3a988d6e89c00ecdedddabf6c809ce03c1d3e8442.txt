{- This is a complex code snippet in HASKELL -}

-- Function to calculate the nth fibonacci number
fib :: Int -> Int
fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)

-- Function to generate a list of first n fibonacci numbers
findFib :: Int -> [Int]
findFib n =
    let
        fibList = [fib x | x <- [1..n]]
    in
        fibList

-- Function to find the sum of all even numbers in a given list
sumOfEven :: [Int] -> Int
sumOfEven xs =
    let
        evenList = [x | x <- xs, (x `mod` 2 == 0)]
    in
        sum evenList

-- Function to calculate the product of all odd numbers in a given list
productOfOdd :: [Int] -> Int
productOfOdd xs =
    let
        oddList = [x | x <- xs, (x `mod` 2 /= 0)]
    in
        product oddList

-- Function that takes in a list of numbers and returns the product of their fibonacci sums
fibProduct :: [Int] -> Int
fibProduct xs =
    productOfOdd (findFib (sumOfEven xs))

-- Example usage:
-- fibProduct [1, 2, 3, 4, 5] = 15