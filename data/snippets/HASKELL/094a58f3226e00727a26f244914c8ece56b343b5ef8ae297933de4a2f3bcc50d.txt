-- example of a complex and long code snippet in Haskell

import Data.Map as Map

-- define a custom data type for a binary tree
data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq) 

-- create a function to insert a new element into a binary tree
-- using pattern matching and recursion
insertTree :: (Ord a) => a -> Tree a -> Tree a 
insertTree x EmptyTree = Node x EmptyTree EmptyTree
insertTree x (Node root left right) 
    | x == root = Node x left right -- if the element already exists, return the same tree
    | x < root  = Node root (insertTree x left) right -- recursively insert into the left subtree
    | x > root  = Node root left (insertTree x right) -- recursively insert into the right subtree

-- create a function to check if a given element is present in a binary tree
-- using pattern matching and recursion
isPresent :: (Ord a) => a -> Tree a -> Bool 
isPresent x EmptyTree = False
isPresent x (Node root left right) 
    | x == root = True  -- if the element is found at the root, return True
    | x < root  = isPresent x left -- recursively check the left subtree
    | x > root  = isPresent x right -- recursively check the right subtree

-- create a function to delete an element from a binary tree
-- using pattern matching and recursion
deleteTree :: (Ord a) => a -> Tree a -> Tree a 
deleteTree x EmptyTree = EmptyTree -- if the tree is empty, return an empty tree
deleteTree x (Node root left right) 
    | x == root = case (left, right) of -- use pattern matching to check the left and right subtrees
        (EmptyTree, EmptyTree) -> EmptyTree -- if both subtrees are empty, return an empty tree
        (EmptyTree, _) -> right -- if the left subtree is empty, return the right subtree
        (_, EmptyTree) -> left -- if the right subtree is empty, return the left subtree
        (_, _) -> let min = findMin right in Node min left (deleteTree min right) -- use the findMin and deleteTree functions to replace the root with the smallest element in the right subtree
    | x < root = Node root (deleteTree x left) right -- recursively delete from the left subtree
    | x > root = Node root left (deleteTree x right) -- recursively delete from the right subtree

-- create a function to find the smallest element in a binary tree
findMin :: (Ord a) => Tree a -> a 
findMin (Node root EmptyTree _) = root -- if the left subtree is empty, the root is the smallest element
findMin (Node _ left _) = findMin left -- recursively search the left subtree

-- create a function to convert a binary tree to a map
-- using pattern matching and recursion
treeToMap :: (Ord k) => Tree (k, v) -> Map.Map k v 
treeToMap EmptyTree = Map.empty -- if the tree is empty, return an empty map
treeToMap (Node (k, v) left right) = Map.insert k v (Map.union (treeToMap left) (treeToMap right)) -- insert the root into a new map and union it with the maps created from the left and right subtrees

-- create an example of a binary tree with integers
exampleTree :: Tree Int
exampleTree = Node 5 (Node 2 EmptyTree (Node 3 EmptyTree EmptyTree)) (Node 7 (Node 6 EmptyTree EmptyTree) EmptyTree)

main = do 
    putStrLn $ "Example Tree: " ++ show exampleTree -- print the example tree
    putStrLn $ "Is 3 present in the tree? " ++ show (isPresent 3 exampleTree) -- print whether 3 is present in the tree
    let newTree = insertTree 4 exampleTree -- insert 4 into the tree
    putStrLn $ "After inserting 4: " ++ show newTree -- print the updated tree
    putStrLn $ "Delete 2 from the tree: " ++ show (deleteTree 2 newTree) -- delete 2 from the tree and print the updated tree
    putStrLn $ "Convert the tree to a map: " ++ show (treeToMap newTree) -- convert the tree to a map and print it