import Data.List

-- | A function that takes in a list and returns a list of tuples
--   where the first element is the number of occurrences of a character
--   and the second element is the character itself
frequency :: (Eq a) => [a] -> [(Int, a)]
frequency [] = []
frequency (x:xs) = (count x : x : ) frequency (remove x xs)

  where
    -- | A function to count the number of occurrences of a character in a list
    count :: (Eq a) => a -> [a] -> Int
    count _ [] = 0
    count y (z:zs)
        | y == z = 1 + count y zs
        | otherwise = count y zs

    -- | A function to remove all occurrences of a character in a list
    remove :: (Eq a) => a -> [a] -> [a]
    remove _ [] = []
    remove y (z:zs)
        | y == z = remove y zs
        | otherwise = z : remove y zs