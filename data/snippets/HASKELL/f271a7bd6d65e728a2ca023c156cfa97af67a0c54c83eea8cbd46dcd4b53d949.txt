data Tree a = Leaf a | Node (Tree a) (Tree a)  -- define a data type Tree with two constructors, Leaf and Node

-- define a function `mapTree` that takes in a function `f` and a Tree `t`
-- and maps the function `f` to the values in the Tree `t`
mapTree :: (a -> b) -> Tree a -> Tree b        
mapTree f (Leaf x) = Leaf (f x)      -- if the Tree is a Leaf, map `f` to the value of the Leaf
mapTree f (Node left right) =        -- if the Tree is a Node,
   Node (mapTree f left) (mapTree f right)      -- recursively map `f` to the left and right subtrees

-- define a function `foldTree` that takes in two functions `f` and `g` and a Tree `t`
-- and reduces the Tree `t` to a single value using the functions `f` and `g`
foldTree :: (a -> b -> b) -> (a -> b) -> Tree a -> b   
foldTree f g (Leaf x) = g x           -- if the Tree is a Leaf, apply `g` to the value of the Leaf
foldTree f g (Node left right) =      
   f (foldTree f g left) (foldTree f g right)   -- if the Tree is a Node, apply `f` to the results of recursively folding the left and right subtrees with `f` and `g`

-- define a function `sumTree` that sums up all the values in a Tree of numbers
sumTree :: Tree Int -> Int 
sumTree = foldTree (+) id     -- use `foldTree` with the addition function `+` as `f` and the identity function `id` as `g` to sum up all the values

-- example usage: 
-- let t = Node (Node (Leaf 1) (Leaf 2)) (Node (Leaf 3) (Leaf 4)) 
-- sumTree t  => 10