-- This is a function that takes in two lists and returns their cartesian product as a list of tuples
cartesianProduct :: [a] -> [b] -> [(a, b)]
cartesianProduct _ [] = [] -- if second list is empty, return empty list
cartesianProduct [] _ = [] -- if first list is empty, return empty list
cartesianProduct (x:xs) (y:ys) = [(x,y) | y <- (y:ys)] ++ cartesianProduct xs (y:ys) -- for each element in first list, combine it with each element in second list and recursively call function

-- Example usage: 
-- cartesianProduct [1,2] ["a","b"] => [(1,"a"), (1,"b"), (2,"a"), (2,"b")]