{-# LANGUAGE DataKinds #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE RankNTypes -*-
{-# LANGUAGE StandaloneDeriving #-}

--This is a code snippet that defines a custom datatype called 'Tree'
--with a kind signature of '* -> *' which means it takes one type argument.
--The constructor 'Leaf' takes in a value of type 'a', while the constructor
--'Branch' takes in two values of type 'Tree a'.
--This datatype has been extended with a 'Functor' instance to map a function over all values in the Tree.

data Tree :: * -> * where
  Leaf :: a -> Tree a
  Branch :: Tree a -> Tree a -> Tree a

deriving instance Eq a => Eq (Tree a)
deriving instance Show a => Show (Tree a)

instance Functor Tree where
  fmap :: (a -> b) -> Tree a -> Tree b
  fmap f (Leaf x) = Leaf (f x)
  fmap f (Branch left right) = Branch (fmap f left) (fmap f right)