-- Define a data type for a binary tree with two possible values
data Tree a = Empty | Node a (Tree a) (Tree a)

-- Function to insert an element into the binary tree
insert :: (Ord a) => a -> Tree a -> Tree a
-- If the tree is empty, create a new tree with the element as the root
insert x Empty = Node x Empty Empty
-- Otherwise, check if the element is less than the root
insert x (Node y l r)
    | x < y     = Node y (insert x l) r -- If less, insert into left subtree
    | x > y     = Node y l (insert x r) -- If greater, insert into right subtree
    | otherwise = Node y l r            -- Element already exists, return tree as is

-- Function to convert a binary tree into a list
toList :: Tree a -> [a]
toList Empty = [] -- Empty tree returns an empty list
toList (Node x l r) = toList l ++ [x] ++ toList r -- Concatenate left subtree, root, and right subtree into a list

-- Example usage
let tree = Node 4 (Node 2 Empty Empty) (Node 7 (Node 5 Empty Empty) (Node 9 Empty Empty)) -- Create a binary tree with values
print (toList tree) -- Output: [2,4,5,7,9]