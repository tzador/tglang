-- This code snippet is a function that calculates the factorial of a given number
-- It uses recursion and pattern matching to handle edge cases
-- The function has a complexity of O(n) and is tail-recursive

-- Define the function with an Integer as input and an Integer as output
factorial :: Integer -> Integer
-- Base case: if input is 0, the output is 1
factorial 0 = 1
-- Recursive case: calculate factorial by multiplying the input with the factorial of the input minus 1
factorial n = n * factorial (n - 1)

-- Example usage:
-- factorial 5 would return 120 as output

-- We can also use the function to calculate the factorial of a list of numbers using map
list_factorial :: [Integer] -> [Integer]
list_factorial = map factorial