data BST a = Empty | Node a (BST a) (BST a)  -- Define a binary search tree (BST) with values of type a

insert :: Ord a => a -> BST a -> BST a  -- Function to insert a value into a BST
insert x Empty = Node x Empty Empty  -- If the BST is empty, create a node with x as the value
insert x (Node v left right) | x == v = Node v left right  -- If x is equal to the current node's value, do nothing
                             | x < v = Node v (insert x left) right  -- If x is less than the current node's value, insert x into the left subtree
                             | otherwise = Node v left (insert x right)  -- If x is greater than the current node's value, insert x into the right subtree

search :: Ord a => a -> BST a -> Bool  -- Function to search for a value in a BST
search x Empty = False  -- If the BST is empty, return False
search x (Node v left right) | x == v = True  -- If x is equal to the current node's value, return True
                             | x < v = search x left  -- If x is less than the current node's value, search in the left subtree
                             | otherwise = search x right  -- If x is greater than the current node's value, search in the right subtree

delete :: Ord a => a -> BST a -> BST a  -- Function to delete a value from a BST
delete x Empty = Empty  -- If the BST is empty, return an empty BST
delete x (Node v left right) | x == v = deleteNode (Node v left right)  -- If x is equal to the current node's value, delete the node using the deleteNode function
                             | x < v = Node v (delete x left) right  -- If x is less than the current node's value, delete x from the left subtree
                             | otherwise = Node v left (delete x right)  -- If x is greater than the current node's value, delete x from the right subtree

deleteNode :: Ord a => BST a -> BST a  -- Helper function to delete a node from a BST
deleteNode (Node v Empty right) = right  -- If the left subtree is empty, replace the node with its right subtree
deleteNode (Node v left Empty) = left  -- If the right subtree is empty, replace the node with its left subtree
deleteNode (Node v left right) = Node minRight left (delete minRight right)  -- If both subtrees exist, replace the node with the minimum value from its right subtree and delete that value from the right subtree
  where minRight = getMin right  -- Helper function to get the minimum value from a BST

getMin :: Ord a => BST a -> a  -- Helper function to get the minimum value from a BST
getMin (Node v Empty _) = v  -- If there is only one node (leaf), it is the minimum value
getMin (Node v left _) = getMin left  -- Otherwise, recursively search for the minimum value in the left subtree

preorder :: BST a -> [a]  -- Function to perform a preorder traversal of a BST
preorder Empty = []  -- If the BST is empty, return an empty list
preorder (Node v left right) = [v] ++ preorder left ++ preorder right  -- Preorder traversal: root, left subtree, right subtree

postorder :: BST a -> [a]  -- Function to perform a postorder traversal of a BST
postorder Empty = []  -- If the BST is empty, return an empty list
postorder (Node v left right) = postorder left ++ postorder right ++ [v]  -- Postorder traversal: left subtree, right subtree, root

inorder :: BST a -> [a]  -- Function to perform an inorder traversal of a BST
inorder Empty = []  -- If the BST is empty, return an empty list
inorder (Node v left right) = inorder left ++ [v] ++ inorder right  -- Inorder traversal: left subtree, root, right subtree

height :: BST a -> Int  -- Function to calculate the height of a BST (maximum depth of the tree)
height Empty = 0  -- If the BST is empty, the height is 0
height (Node v left right) = 1 + max (height left) (height right)  -- Otherwise, the height is 1 + the maximum height of its left and right subtrees

balanced :: BST a -> Bool  -- Function to check if a BST is balanced (height difference between left and right subtrees is no more than 1)
balanced Empty = True  -- An empty BST is balanced
balanced (Node v left right) = abs (height left - height right) <= 1 && balanced left && balanced right  -- A BST is balanced if the height difference between its subtrees is no more than 1 and its subtrees are also balanced

toList :: BST a -> [a]  -- Function to convert a BST to a list (ascending order)
toList Empty = []  -- If the BST is empty, return an empty list
toList (Node v left right) = toList left ++ [v] ++ toList right  -- Inorder traversal: left subtree, root, right subtree

instance (Show a) => Show (BST a) where
  show tree = showTree tree ""  -- Instance of the Show typeclass for BST, with the showTree function as its implementation

showTree :: (Show a) => BST a -> String -> String  -- Helper function to display a BST as a string
showTree Empty padding = padding ++ "Empty\n"  -- If the BST is empty, display "Empty" at the current padding
showTree (Node v left right) padding = padding ++ show v ++ "\n" ++ padding ++ "├──" ++ showTree left (padding ++ "│   ") ++ padding ++ "└──" ++ showTree right (padding ++ "    ")  -- Otherwise, display the node's value and recursively display its left and right subtrees with increased padding for visual representation