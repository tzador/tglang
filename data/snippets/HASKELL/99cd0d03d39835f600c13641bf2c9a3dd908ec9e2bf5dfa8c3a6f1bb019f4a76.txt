{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE TypeFamilies #-}

module Example where

import Data.Map (Map)
import qualified Data.Map as Map
import Data.Text (Text)

-- | A type class for types that can be converted to and from a `Map` of `Text` keys and values.
class Convertible a b | a -> b, b -> a where
  -- | Convert a value of type `a` to a `Map` of `Text` keys and values.
  toMap :: a -> Map Text Text
  -- | Convert a `Map` of `Text` keys and values to a value of type `a`.
  fromMap :: Map Text Text -> a

-- | An example data type that can be converted to and from a `Map` of `Text` keys and values.
data Example = Example
  { exampleName :: Text
  , exampleAge :: Int
  , exampleActive :: Bool
  }

instance Convertible Example (Map Text Text) where
  toMap example = Map.fromList
    [ ("name", exampleName example)
    , ("age", Text.pack $ show $ exampleAge example)
    , ("active", if exampleActive example then "yes" else "no")
    ]
  fromMap map = Example
    { exampleName = map Map.! "name"
    , exampleAge = read $ Text.unpack $ map Map.! "age"
    , exampleActive = map Map.! "active" == "yes"
    }

-- | A function that takes a value of type `a` and converts it to a `Map` of `Text` keys and values.
-- This function is polymorphic and can work with any type that implements the `Convertible` type class.
toMapPoly :: Convertible a b => a -> Map Text Text
toMapPoly = toMap

{- Output: