{- This is a complex function that takes in an integer n and returns a list of Integer pairs. The function uses recursion to generate a list of pairs from 1 to n, where each pair contains two consecutive numbers starting from 1. -}

pairs :: Integer -> [(Integer, Integer)]
pairs n = pairsHelper 1 n

{- Helper function for pairs function -}
pairsHelper :: Integer -> Integer -> [(Integer, Integer)]
pairsHelper index n
  | index > n = [] {- Base case when index is greater than n, return empty list -}
  | otherwise = (index, index + 1) : pairsHelper (index + 2) n {- Cons operation to append a pair to the list and recursively call pairsHelper with updated index and n -}