{-# LANGUAGE RecursiveDo, KindSignatures, GADTs #-}
import Control.Monad.ST
import Data.STRef
import Control.Monad (forM_)

-- | Creates a matching pair of mutable references
-- and updates the first reference using the second reference's value.
-- >In this example, the references are of type 'Int' but can be
-- >modified to any other type that has the 'Eq' typeclass.
mutateRefs :: Int -> Int -> (Int, Int)
mutateRefs ref1Val ref2Val = runST $ do
    ref1 <- newSTRef ref1Val
    ref2 <- newSTRef ref2Val
    rec
        writeSTRef ref1 updatedVal -- updates ref1 with the updated value
        updatedVal <- readSTRef ref2 >>= return . (+1) -- updates ref2's value
    return (ref1, ref2) -- return the references as a tuple

-- | Example usage: 
-- Assume x and y are of type 'Int' and have values of 1 and 2 respectively.
-- Calling 'mutateRefs x y' will return a tuple of references: (ref1, ref2).
-- Ref1 will have a value of 2 and ref2 will have a value of 3.
(ref1, ref2) = mutateRefs x y