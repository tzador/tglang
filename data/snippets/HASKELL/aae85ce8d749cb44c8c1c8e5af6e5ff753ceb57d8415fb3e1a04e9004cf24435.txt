-- This function uses recursion to calculate the factorial of a given number
factorial :: Int -> Int
factorial 0 = 1                   -- Base case: factorial of 0 is 1
factorial n = n * factorial (n-1) -- Recursive call with decremented number

-- This function uses pattern matching to handle edge cases
fibonacci :: Int -> Integer
fibonacci 0 = 0                   -- Base case: fibonacci of 0 is 0
fibonacci 1 = 1                   -- Base case: fibonacci of 1 is 1
fibonacci n = fibonacci (n-1) + fibonacci (n-2) -- Recursive call with previous two numbers

-- This code snippet uses higher-order functions to calculate the sum of a list
-- It maps the given function to each element in the list and then folds the list using the provided binary function
-- The sum function is defined using the lambda expression syntax
sum :: Num a => [a] -> a
sum list = foldl (\acc x -> acc + x) 0 (map (*2) list) -- Multiplies each element by 2 and then sums the list values

-- This typeclass definition specifies that a type is a monoid
-- A monoid must have a binary operation and an identity element
class Monoid m where
    mappend :: m -> m -> m       -- The binary operation
    mempty :: m                  -- The identity element

instance Monoid [a] where
    mempty = []                  -- Identity element of an empty list is an empty list
    mappend list1 list2 = list1 ++ list2 -- Combines two lists by appending them

-- This code snippet demonstrates the use of type constructors and pattern matching on types
-- The tree data structure is defined as either a leaf with a value or a branch with two subtrees
data Tree a = Leaf a | Branch (Tree a) (Tree a)

-- This function calculates the maximum value in a tree
-- It uses pattern matching to handle both leaf and branch cases
treeMax :: Ord a => Tree a -> a
treeMax (Leaf x) = x             -- Base case: max value of a leaf is its value
treeMax (Branch left right) = max (treeMax left) (treeMax right) -- Recursive call to find max of subtrees