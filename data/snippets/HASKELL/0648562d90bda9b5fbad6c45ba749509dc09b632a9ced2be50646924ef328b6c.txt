{-# OPTIONS_GHC -Wall #-}
module Main where

import Data.Map (Map)
import qualified Data.Map as Map
import Control.Monad (forM_)

-- | Represents a mathematical expression.
data Expr
  = Const Double       -- ^ A constant number expression
  | Var String         -- ^ A variable expression
  | Add Expr Expr      -- ^ Addition expression
  | Mul Expr Expr      -- ^ Multiplication expression
  | Min Expr Expr      -- ^ Subtraction expression
  | Div Expr Expr      -- ^ Division expression
  | Sin Expr           -- ^ Sine expression
  | Cos Expr           -- ^ Cosine expression
  | Tan Expr           -- ^ Tangent expression
  deriving (Eq, Show)

-- | Evaluates a mathematical expression using a given variable map.
eval :: Map String Double -> Expr -> Double
eval m (Const x) = x
eval m (Var name) = case Map.lookup name m of
  Just x -> x
  Nothing -> error "variable not found"
eval m (Add e1 e2) = (eval m e1) + (eval m e2)
eval m (Mul e1 e2) = (eval m e1) * (eval m e2)
eval m (Min e1 e2) = (eval m e1) - (eval m e2)
eval m (Div e1 e2) = (eval m e1) / (eval m e2)
eval m (Sin e) = sin (eval m e)
eval m (Cos e) = cos (eval m e)
eval m (Tan e) = tan (eval m e)

-- | Prints a set of expressions along with their evaluated values using the given variable map.
printExprs :: Map String Double -> [Expr] -> IO ()
printExprs m exprs = forM_ exprs (\e -> putStrLn $ show e ++ " = " ++ show (eval m e))

-- | Main function that runs the program.
main :: IO ()
main = do
  let vars = Map.fromList [("x", 3), ("y", 5), ("z", 10)]  -- variable map containing values for x, y and z
  let expressions = [ Add (Var "x") (Const 5)           -- x + 5
                    , Mul (Var "y") (Const 2)           -- y * 2
                    , Div (Const 10) (Var "z")         -- 10 / z
                    , Tan (Mul (Var "x") (Const (pi/2)))  -- tan (x * pi/2)
                    ]
  printExprs vars expressions  -- prints the expressions with their evaluated values