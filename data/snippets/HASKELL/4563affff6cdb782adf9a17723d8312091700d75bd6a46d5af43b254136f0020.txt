{-# LANGUAGE RankNTypes #-}
module Main where

data BinarySearchTree a = EmptyTree | Node a (BinarySearchTree a) (BinarySearchTree a)

insert :: (Ord a) => a -> BinarySearchTree a -> BinarySearchTree a
insert x EmptyTree = Node x EmptyTree EmptyTree
insert x (Node y left right)
    | x == y = Node x left right
    | x < y = Node y (insert x left) right
    | x > y = Node y left (insert x right)

search :: (Ord a) => a -> BinarySearchTree a -> Maybe a
search _ EmptyTree = Nothing
search x (Node y left right)
    | x == y = Just y
    | x < y = search x left
    | x > y = search x right

delete :: (Ord a) => a -> BinarySearchTree a -> BinarySearchTree a
delete _ EmptyTree = EmptyTree
delete x (Node y left right)
    | x < y = Node y (delete x left) right
    | x > y = Node y left (delete x right)
    | x == y = case (left, right) of
        (EmptyTree, EmptyTree) -> EmptyTree
        (EmptyTree, _) -> right
        (_, EmptyTree) -> left
        _ -> let successor = min right
                 in Node successor left (delete successor right)

min :: BinarySearchTree a -> a
min (Node x EmptyTree _) = x
min (Node _ left _) = min left

max :: BinarySearchTree a -> a
max (Node x _ EmptyTree) = x
max (Node _ _ right) = max right

inOrderTraversal :: BinarySearchTree a -> [a]
inOrderTraversal EmptyTree = []
inOrderTraversal (Node x left right) = inOrderTraversal left ++ [x] ++ inOrderTraversal right

<<<<<<< HEAD
preOrderTraversal :: BinarySearchTree a -> [a]
preOrderTraversal EmptyTree = []
preOrderTraversal (Node x left right) = [x] ++ preOrderTraversal left ++ preOrderTraversal right=======
postOrderTraversal :: BinarySearchTree a -> [a]
postOrderTraversal EmptyTree = []
postOrderTraversal (Node x left right) = postOrderTraversal left ++ postOrderTraversal right ++ [x]