-- define a function that takes in a list of integers and returns the sum of the odd numbers in the list
sumOdd :: [Int] -> Int
sumOdd numbers = sum [x | x <- numbers, x `mod` 2 /= 0] -- use list comprehension to filter out odd numbers and then sum them

-- define a recursive function that takes in an integer n and returns the nth element in the Fibonacci sequence
fibonacci :: Int -> Int
fibonacci n
    | n == 0 || n == 1 = n -- base case for the first two elements in the sequence
    | otherwise = fibonacci (n-1) + fibonacci (n-2) -- recursive step to calculate the nth element by adding the previous two elements

-- define a data type for a binary tree with nodes containing integers
data BinaryTree = Empty | Node Int BinaryTree BinaryTree

-- define a function that takes in a binary tree and returns a list of all the values in the tree in descending order
treeToList :: BinaryTree -> [Int]
treeToList Empty = [] -- base case for an empty tree
treeToList (Node value left right) = treeToList right ++ [value] ++ treeToList left -- recursively add the values from the right subtree, then the root, then the values from the left subtree

-- define a function that takes in a list of integers and returns a list of the same integers, but with any duplicates removed
removeDuplicates :: [Int] -> [Int]
removeDuplicates list = [x | (x,y) <- zip list [0..], x `notElem` (take y list)] -- use list comprehension and zip to compare each element with its index and remove any duplicates

-- define a function that takes in a list of integers and returns a list of all the possible pairs of numbers in the list
allPairs :: [Int] -> [(Int, Int)]
allPairs list = [(x,y) | x <- list, y <- list] -- use list comprehension to create a pair for each combination of numbers in the list

-- define a function that takes in two lists and returns a list of the common elements between them
commons :: Eq a => [a] -> [a] -> [a]
commons list1 list2 = [x | x <- list1, x `elem` list2] -- use list comprehension and the `elem` function to filter out the common elements from list1

-- define a monadic function that takes in an integer and returns a list of that length containing random numbers
import Control.Monad.Random -- import the necessary module to use monadic functions

randomList :: Int -> IO [Int]
randomList n = replicateM n (getRandomR (1,10)) -- use the replicateM function and the getRandomR function from the Random module to generate a list of random numbers of length n