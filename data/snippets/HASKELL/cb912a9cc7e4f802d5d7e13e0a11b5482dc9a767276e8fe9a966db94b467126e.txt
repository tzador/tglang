-- Define a custom data type for a binary tree
data Tree a = Empty
            | Leaf a
            | Node (Tree a) a (Tree a)

-- Define a function to insert an element into the binary tree
-- Takes in an element and a tree and returns a new tree with the element inserted
insert :: (Ord a) => a -> Tree a -> Tree a
insert x Empty = Leaf x -- If tree is empty, create a leaf node with the element
insert x (Leaf value) -- If tree is a leaf node, compare value with element and insert accordingly
    | x <= value = Node (Leaf x) value Empty
    | otherwise = Node Empty value (Leaf x)
insert x (Node left value right) -- If tree is a non-empty node, recursively insert element in the correct subtree
    | x <= value = Node (insert x left) value right
    | otherwise = Node left value (insert x right)

-- Define a function to check if an element is present in the binary tree
-- Takes in an element and a tree and returns True if element is present, False otherwise
contains :: (Ord a) => a -> Tree a -> Bool
contains _ Empty = False -- If tree is empty, element cannot be present
contains x (Leaf value) -- If tree is a leaf node, compare value with element
    | x == value = True
    | otherwise = False
contains x (Node left value right) -- If tree is a non-empty node, recursively search for element in one of the subtrees
    | x < value = contains x left
    | x > value = contains x right
    | otherwise = True -- If element is equal to value, it is present in the tree