-- Function to recursively find the nth Fibonacci number
fib :: Integer -> Integer
fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)

-- Function to calculate the average of a list
average :: [Double] -> Double
average xs = sum xs / fromIntegral (length xs)

-- Data type for a binary tree
data Tree a = EmptyTree | Node a (Tree a) (Tree a)

-- Function to insert an element into a binary tree
insert :: (Ord a) => a -> Tree a -> Tree a
insert x EmptyTree = Node x EmptyTree EmptyTree
insert x tree@(Node root left right)
    | x == root = tree
    | x < root = Node root (insert x left) right
    | x > root = Node root left (insert x right)

-- Function to check if a value is present in a binary tree
contains :: (Ord a) => a -> Tree a -> Bool
contains x EmptyTree = False
contains x (Node root left right)
    | x == root = True
    | x < root = contains x left
    | x > root = contains x right

-- Function to concatenate two lists
concatLists :: [a] -> [a] -> [a]
concatLists [] ys = ys
concatLists (x:xs) ys = x : concatLists xs ys

-- Function to reverse a list using foldr
reverseList :: [a] -> [a]
reverseList = foldr (\x acc -> acc ++ [x]) []