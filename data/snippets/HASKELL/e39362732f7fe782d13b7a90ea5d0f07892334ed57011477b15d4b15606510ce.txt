​
-- This is a function that returns the sum of a list of integers
-- Takes in a list of integers as input and returns an integer as output
sumList :: [Int] -> Int
sumList [] = 0  -- Base case: an empty list has a sum of 0
sumList (x:xs) = x + sumList xs  -- Recursive case: add current element to sum of rest of the list
​
-- This is a function that applies a given function to each element in a list
-- Takes in a function and a list as input and returns a new list with the function applied to each element
mapList :: (a -> b) -> [a] -> [b]
mapList _ [] = []  -- Base case: an empty list has no elements to map to
mapList f (x:xs) = f x : mapList f xs  -- Recursive case: apply function to current element and recursively map the rest of the list
​
-- This is a higher-order function that takes in a comparison function and a list and returns the minimum element in the list
-- Takes in a comparison function and a list as input and returns the minimum element in the list
minBy :: (a -> a -> Ordering) -> [a] -> a
minBy _ [x] = x  -- Base case: list with one element, so it is the minimum
minBy comp (x:xs) 
    | comp x currentMin == LT = x  -- If current element is smaller than current minimum, make it the new minimum
    | otherwise = currentMin  -- If current element is larger than current minimum, keep current minimum
    where currentMin = minBy comp xs  -- Recursively find minimum of rest of the list
​