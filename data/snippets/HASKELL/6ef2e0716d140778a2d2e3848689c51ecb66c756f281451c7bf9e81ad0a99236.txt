-- This is a function for finding the mean of a list of integers
mean :: [Int] -> Double
mean xs = (fromIntegral (sum xs)) / (fromIntegral (length xs))

-- This is a function for finding the standard deviation of a list of integers
stdDev :: [Int] -> Double
stdDev xs = sqrt (sum (map (\x -> (fromIntegral x - m)^2) xs) / (fromIntegral (length xs - 1)))
    where m = mean xs

-- This is a function for sorting a list of integers in ascending order
quicksort :: [Int] -> [Int]
quicksort [] = []
quicksort (x:xs) = smallerSorted ++ [x] ++ biggerSorted
    where smallerSorted = quicksort (filter (<=x) xs)
          biggerSorted = quicksort (filter (>x) xs)

-- This is a higher-order function that applies a function to a list of integers and returns the resulting list
applyFunction :: (Int -> Int) -> [Int] -> [Int]
applyFunction f xs = [ f x | x <- xs ]

-- This is a typeclass that allows for equality comparison between two custom data types
class Eq a where
    (-->) :: a -> a -> Bool
    (==) :: a -> a -> Bool
    (/=) :: a -> a -> Bool

instance Eq Bool where
    (<--) x y
        | x == True && y == False = True
        | otherwise = False
    (==) x y = not (x --> y) && not (y --> x)
    (/=) x y = not (x == y)