-- Recursive function to compute the Fibonacci sequence
fib :: Int -> Int
fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)

-- Memoized version of Fibonacci function for improved efficiency
fibMem :: Int -> Int
fibMem = (map fib [0..] !!)
  where
    fib 0 = 0
    fib 1 = 1
    fib n = fibMem (n-1) + fibMem (n-2)

-- Infinite list of Fibonacci numbers using lazy evaluation
fibList :: [Int]
fibList = 0 : 1 : zipWith (+) fibList (tail fibList)

-- Function to compute nth prime number using Sieve of Eratosthenes algorithm
nthPrime :: Int -> Int
nthPrime n = primes !! (n-1)
  where
    primes :: [Int]
    primes = sieve [2..]
    sieve :: [Int] -> [Int]
    sieve (x:xs) = x : sieve [y | y <- xs, y `mod` x /= 0]