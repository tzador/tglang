-- Define a type for a binary tree
data Tree a = Empty -- empty binary tree
            | Node a (Tree a) (Tree a) -- tree node with value and left and right subtrees

-- Function to insert a value into a binary search tree
insert :: (Ord a) => a -> Tree a -> Tree a -- takes a value and a tree and returns a new tree with the value inserted
insert x Empty = Node x Empty Empty -- if tree is empty, create a new node with value x
insert x (Node a left right) -- if tree is not empty with a root node
    | x == a = Node a left right -- if value is already in tree, return the same tree
    | x < a = Node a (insert x left) right -- if value is less than root, insert into left subtree
    | x > a = Node a left (insert x right) -- if value is greater than root, insert into right subtree

-- Function to check if a value is in a binary search tree
contains :: (Ord a) => a -> Tree a -> Bool -- takes a value and a tree and returns True if value is in tree, False otherwise
contains _ Empty = False -- base case: value not found in empty tree
contains x (Node a left right) -- if tree is not empty with a root node
    | x == a = True -- if value is equal to root node, return True
    | x < a = contains x left -- if value is less than root, check left subtree
    | x > a = contains x right -- if value is greater than root, check right subtree

-- Example usage of insert and contains functions
let tree = insert 5 (insert 3 (insert 8 (Node 10 Empty Empty))) -- create a binary search tree with values 5, 3, and 8
contains 5 tree -- returns True
contains 15 tree -- returns False