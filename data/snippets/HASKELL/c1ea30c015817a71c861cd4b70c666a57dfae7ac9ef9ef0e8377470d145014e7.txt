{-# LANGUAGE OverloadedStrings #-}

import Data.Set (Set)
import qualified Data.Set as Set

-- Binary tree data structure
data Tree a = Leaf | Node (Tree a) a (Tree a)

-- Insertion function for binary trees
insert :: Ord a => a -> Tree a -> Tree a
insert x Leaf = Node Leaf x Leaf
insert x (Node t1 y t2) | x == y    = Node t1 y t2
                        | x < y     = Node (insert x t1) y t2
                        | otherwise = Node t1 y (insert x t2)

-- Convert binary tree to sorted list
toList :: Tree a -> [a]
toList Leaf         = []
toList (Node l x r) = toList l ++ [x] ++ toList r

-- Convert list to binary tree
treeFromList :: Ord a => [a] -> Tree a
treeFromList = foldr insert Leaf

-- Function to check if a given element is in a binary tree
contains :: Ord a => a -> Tree a -> Bool
contains _ Leaf = False
contains x (Node t1 y t2) | x == y    = True
                          | x < y     = contains x t1
                          | otherwise = contains x t2

-- Function to find the height of a binary tree
height :: Tree a -> Int
height Leaf         = 0
height (Node l _ r) = 1 + max (height l) (height r)

-- Function to calculate the size of a binary tree
size :: Tree a -> Int
size Leaf          = 0
size (Node l _ r) = 1 + size l + size r

-- Function to create a tree with a given height and value
createTree :: Int -> a -> Tree a
createTree 0 x = Node Leaf x Leaf
createTree n x = Node (createTree (n-1) x) x (createTree (n-1) x)

-- Function to check if a binary tree is balanced
isBalanced :: Tree a -> Bool
isBalanced Leaf = True
isBalanced (Node l _ r) = abs (height l - height r) <= 1 && isBalanced l && isBalanced r

-- Function to check if a binary tree is a binary search tree
isBST :: Ord a => Tree a -> Bool
isBST Leaf         = True
isBST (Node l x r) = all (<x) (toList l) && all (>x) (toList r) && isBST l && isBST r