{-
This is a multi-line comment in Haskell.
It will be ignored by the compiler.
-}

-- This is a single-line comment in Haskell.

-- importing the 'Data.List' module
import Data.List

-- defining a function
-- `combinations` takes in a list of elements and returns a list of combinations of all elements in the given list
combinations :: [a] -> [[a]]
combinations [] = [[]] -- base case
combinations (x:xs) = combinations xs ++ map (x:) (combinations xs) -- recursive case, combines the current element with the combinations of the remaining list

-- defining a function
-- `permutations` takes in a list of elements and returns a list of permutations of all elements in the given list
permutations :: [a] -> [[a]]
permutations [] = [[]] -- base case
permutations (x:xs) = concatMap (interleave x) (permutations xs)
  where
    -- `interleave` takes in an element and a list and returns a list of all possible ways to insert the given element into the list
    interleave :: a -> [a] -> [[a]]
    interleave x [] = [[x]] -- base case, the only way to insert an element into an empty list is at the beginning
    interleave x (y:ys) = (x:y:ys) : map (y:) (interleave x ys) -- recursive case, insert the element in the beginning and then recursively insert it at different positions in the remaining list

-- defining a function
-- `combinationsWithDuplicates` takes in a list of elements and returns a list of combinations of all elements in the given list, allowing duplicates
combinationsWithDuplicates :: [a] -> Int -> [[a]]
combinationsWithDuplicates _ 0 = [[]] -- base case
combinationsWithDuplicates [] _ = [] -- base case
combinationsWithDuplicates xs n = [y:ys | y <- xs, ys <- combinationsWithDuplicates xs (n-1)] -- recursive case, for each element in the list, generate all combinations with the remaining number of elements

-- defining a function
-- `permutationsWithDuplicates` takes in a list of elements and returns a list of permutations of all elements in the given list, allowing duplicates
permutationsWithDuplicates :: [a] -> Int -> [[a]]
permutationsWithDuplicates _ 0 = [[]] -- base case
permutationsWithDuplicates [] _ = [] -- base case
permutationsWithDuplicates xs n = [y:ys | y <- xs, ys <- permutationsWithDuplicates (delete y xs) (n-1)] -- recursive case, for each element in the list, generate all permutations with the remaining elements