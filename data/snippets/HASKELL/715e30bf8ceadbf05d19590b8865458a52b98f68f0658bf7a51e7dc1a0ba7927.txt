-- This is a function that calculates the nth Fibonacci number
-- using pattern matching and recursion
fibonacci :: Int -> Int
fibonacci 0 = 0  -- base case for 0
fibonacci 1 = 1  -- base case for 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2) -- recursive case for any n

-- This is a function that checks if a given number is prime
-- using a helper function and recursion
isPrime :: Int -> Bool
isPrime n = isPrimeHelper n (n-1) -- start checking from n-1
            where 
                isPrimeHelper :: Int -> Int -> Bool
                isPrimeHelper n 1 = True  -- base case for 1
                isPrimeHelper n m = if (n `mod` m == 0) then False else isPrimeHelper n (m-1) -- if n is divisible by m, return False. Otherwise, check next m

-- This is a function that implements quicksort algorithm
-- using list comprehension and recursion
quicksort :: Ord a => [a] -> [a]
quicksort [] = []  -- base case for empty list
quicksort (x:xs) = quicksort smaller ++ [x] ++ quicksort larger
                    where
                        smaller = [a | a <- xs, a < x]
                        larger = [b | b <- xs, b >= x]