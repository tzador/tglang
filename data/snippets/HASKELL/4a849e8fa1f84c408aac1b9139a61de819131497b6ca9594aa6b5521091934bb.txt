{-# LANGUAGE FlexibleInstances #-}
module Main where

-- Typeclass declaration for Monoid
class Monoid m where
  (<>) :: m -> m -> m
  mempty :: m

instance Monoid [a] where
  (<>) = (++)
  mempty = []

instance (Monoid m) => Monoid (a -> m) where
  f <> g = \x -> f x <> g x
  mempty = \_ -> mempty

-- Function that counts occurrences of a given element in list
count :: (Eq a, Monoid m) => a -> [a] -> m
count x = foldMap (\y -> if x == y then [1] else [])

main :: IO ()
main = do
  -- List of names
  let names = ["John", "Jane", "Bob", "Alice", "John"]

  -- Count the occurrences of "John"
  let johnOccurrences = count "John" names

  -- Print the result
  putStr "Occurrences of John: "
  print johnOccurrences