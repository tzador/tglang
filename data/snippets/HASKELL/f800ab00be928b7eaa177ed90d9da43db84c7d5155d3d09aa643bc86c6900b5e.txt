-- | A data type representing a binary tree with values on each node 
data BinaryTree a = Leaf           -- Represents an empty tree
                   | Node           -- Represents a tree node
                   (BinaryTree a)   -- Left subtree
                   a                -- Value on this node
                   (BinaryTree a)   -- Right subtree

-- | A helper function to insert a value into a binary tree
insertTree :: Ord a => a -> BinaryTree a -> BinaryTree a
insertTree val Leaf = Node Leaf val Leaf -- If tree is empty, create a node with the value
insertTree val (Node left nodeVal right) -- If tree has nodes
  -- If value is less than the current node's value, insert it in the left subtree
  | val < nodeVal = Node (insertTree val left) nodeVal right 
  -- If value is greater than the current node's value, insert it in the right subtree
  | val > nodeVal = Node left nodeVal (insertTree val right)
  -- If value is equal to the current node's value, no need to insert
  | otherwise = Node left nodeVal right

-- | A function to find the depth of a binary tree
depth :: BinaryTree a -> Int
depth Leaf = 0
-- If tree has nodes, find the maximum depth of the left and right subtree and add 1 for the current node
depth (Node left _ right) = 1 + max (depth left) (depth right)

-- | An example of inserting values into a binary tree and finding its depth
main = do
  let tree = insertTree 10 (insertTree 5 (insertTree 3 (insertTree 8 Leaf))) -- Inserting values into a tree
  let treeDepth = depth tree -- Finding the depth of the tree
  putStrLn $ "Depth of tree: " ++ show treeDepth -- Printing the depth of the tree