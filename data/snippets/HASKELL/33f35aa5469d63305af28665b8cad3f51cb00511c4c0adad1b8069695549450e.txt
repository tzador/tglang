data Tree a = Leaf a | Node (Tree a) (Tree a)

instance (Show a) => Show (Tree a) where
    show (Leaf x) = show x
    show (Node left right) = "[" ++ show left ++ ", " ++ show right ++ "]"

instance Functor Tree where
    fmap f (Leaf x) = Leaf (f x)
    fmap f (Node left right) = Node (fmap f left) (fmap f right)

foldTree :: (b -> a -> b -> b) -> b -> Tree a -> b
foldTree _ s (Leaf x) = s x
foldTree f s (Node left right) = f (foldTree f s left) (head right) (foldTree f s tail)