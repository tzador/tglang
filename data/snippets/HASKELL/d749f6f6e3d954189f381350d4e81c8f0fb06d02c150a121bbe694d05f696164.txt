--This is a function that takes in an integer and returns twice its value.
twice :: Int -> Int
twice x = 2 * x

--This is a recursive function that calculates the factorial of a given number.
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)

--This is a higher-order function that applies a given function to every element in a list.
map :: (a -> b) -> [a] -> [b]
map _ [] = []
map f (x:xs) = f x : map f xs

--This is a function that takes in a list of numbers and returns the sum.
sum :: [Int] -> Int
sum [] = 0
sum (x:xs) = x + sum xs

--This is a function that checks if a given number is prime.
isPrime :: Int -> Bool
isPrime n = n > 1 && all (\x -> n `mod` x /= 0) [2..sqrt n]