{-# LANGUAGE OverloadedStrings #-}

module Main where

import qualified Data.Text as T
import Data.Text.IO as TIO

-- | Represents a student with their name, major, and list of grades
data Student = Student {
  name :: T.Text,
  major :: T.Text,
  grades :: [Int]
}

-- | A function which takes in a list of students and outputs their average grades
averageGrades :: [Student] -> [Int]
averageGrades [] = []
averageGrades (s:ss) =
  (\(g:gs) -> (foldl (+) 0 gs) `div` (length gs + 1)) (grades s) : averageGrades ss

-- | A function which takes in a student and outputs their information in a formatted string
studentInfo :: Student -> T.Text
studentInfo s =
  "Name: " `T.append` name s `T.append`
  "\nMajor: " `T.append` major s `T.append`
  "\nGrades: " `T.append` T.pack (show (grades s))

-- | An example list of students
students :: [Student]
students =
  [ Student "Alice" "Biology" [95, 86, 78, 91],
    Student "Bob" "Computer Science" [89, 94, 82, 98],
    Student "Carol" "Mathematics" [91, 88, 77, 85],
    Student "David" "English" [82, 91, 79, 90]
  ]

-- | The main function which prompts the user to input a student's name and outputs their information
main :: IO ()
main = do
  putStrLn "Enter a student's name:"
  input <- TIO.getLine
  let student = filter (\s -> name s == input) students
  if null student
    then putStrLn "Student not found."
    else TIO.putStrLn (studentInfo (head student))
  return ()