-- This code snippet implements the quicksort algorithm in Haskell

-- Function definition for quicksort that takes in a list of elements of type "a" and returns a list of elements of type "a"
quicksort :: (Ord a) => [a] -> [a]
-- Base case
quicksort [] = []
-- Recursive case
quicksort (x:xs) =
    -- Partition the list into two sublists - one with elements less than x and one with elements greater than x
    let smallerSorted = quicksort [a | a <- xs, a <= x]
        biggerSorted = quicksort [a | a <- xs, a > x]
    -- Combine the two sublists and add x at its correct position 
    in smallerSorted ++ [x] ++ biggerSorted