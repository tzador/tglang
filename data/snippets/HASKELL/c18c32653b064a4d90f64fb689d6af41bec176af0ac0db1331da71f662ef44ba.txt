import Data.List (sort)                                  -- Import the Data.List module, specifically the sort function
 import Control.Monad (guard)                              -- Import the Control.Monad module, specifically the guard function
 
 -- This function takes in two lists and returns a list of tuples containing elements from both lists
 combineLists :: [a] -> [b] -> [(a, b)]                    
 combineLists xs ys = do                                  -- Use the do notation for monads to combine the lists
   x <- xs                                                -- Assign each element of xs to the variable x
   y <- ys                                                -- Assign each element of ys to the variable y
   return (x, y)                                          -- Return a tuple of x and y
 
 -- This function takes in a list and checks if all elements are in ascending order
 isAscending :: Ord a => [a] -> Bool                      -- Specify that the elements in the list must be orderable
 isAscending xs = sort xs == xs                           -- Sort the list and check if it is equal to the original list
 
 -- This function checks if a given list contains a specific element
 contains :: Eq a => a -> [a] -> Bool                     -- Specify that the elements in the list must be comparable
 contains x xs = do                                       -- Use the do notation for monads to loop through the list
   y <- xs                                                -- Assign each element of xs to the variable y
   guard (x == y)                                         -- Use the guard function to check if x is equal to y
   return True                                            -- If a match is found, return True
 return False                                             -- If no match is found, return False

 -- Main function to demonstrate the usage of the above functions
 main :: IO ()
 main = do
   let list1 = [1, 2, 3]                                   -- Assign a list of numbers to the variable list1
   let list2 = ["a", "b", "c"]                             -- Assign a list of characters to the variable list2
   let combined = combineLists list1 list2                  -- Combine the two lists using the combineLists function
   putStrLn "Combined lists:"                              -- Print a message
   print combined                                          -- Print the combined list
   putStrLn "Is list1 ascending?"                           -- Print a message
   print (isAscending list1)                               -- Print the result of the isAscending function on list1
   putStrLn "Is list2 ascending?"                           -- Print a message
   print (isAscending list2)                               -- Print the result of the isAscending function on list2
   putStrLn "Does list1 contain the element 3?"             -- Print a message
   print (contains 3 list1)                                -- Print the result of the contains function on list1 and the element 3
   putStrLn "Does list1 contain the element 'd'?"           -- Print a message
   print (contains 'd' list1)                              -- Print the result of the contains function on list1 and the element 'd'