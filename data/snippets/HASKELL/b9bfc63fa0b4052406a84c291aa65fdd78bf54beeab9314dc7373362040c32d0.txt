--Declaring a data type named 'Tree' with an arbitrary type 'a'
data Tree a = Leaf a | Branch (Tree a) (Tree a)

--Declaring a function named 'mapTree' that takes in a function 'f' and a 'Tree' of type 'a' as parameters
mapTree :: (a -> b) -> Tree a -> Tree b

--Pattern matching for a 'Leaf' of type 'a'
mapTree f (Leaf x) = Leaf (f x)

--Pattern matching for a 'Branch' of type 'a'
--Recursively applies the 'mapTree' function to each subtree of the original 'Tree'
mapTree f (Branch left right) = Branch (mapTree f left) (mapTree f right)