-- This is a function that sorts a list using the merge sort algorithm
-- It takes in a list and returns a sorted list
mergeSort :: Ord a => [a] -> [a]
mergeSort [] = [] -- Base case: an empty list is already sorted
mergeSort [x] = [x] -- Base case: a single element list is already sorted
mergeSort xs = -- Recursive case
    let (left, right) = splitAt (length xs `div` 2) xs -- Split the list in half
        sortedLeft = mergeSort left -- Recursively sort the left half
        sortedRight = mergeSort right -- Recursively sort the right half
    in merge sortedLeft sortedRight -- Merge the sorted halves together

-- This is a function that merges two sorted lists
-- It takes in two lists and returns a merged list
merge :: Ord a => [a] -> [a] -> [a]
merge [] ys = ys -- If one list is empty, return the other list
merge xs [] = xs -- If one list is empty, return the other list
merge (x:xs) (y:ys) -- Compare the first elements of each list and merge accordingly
    | x <= y = x:merge xs (y:ys) -- If the first element of xs is smaller, add it to the merged list
    | otherwise = y:merge (x:xs) ys -- If the first element of ys is smaller, add it to the merged list