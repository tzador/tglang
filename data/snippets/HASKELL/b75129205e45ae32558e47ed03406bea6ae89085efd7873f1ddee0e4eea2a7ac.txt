-- This is a comment in Haskell
-- Function that takes in two lists and returns the cartesian product of the two
cartesian :: [a] -> [b] -> [(a, b)]
cartesian xs ys = [(x,y) | x <- xs, y <- ys]

-- Function that takes in a list of integers and recursively calculates their factorial
factorial :: Int -> Int
factorial 0 = 1 -- Factorial of 0 is 1
factorial n = n * factorial (n - 1)

-- Function that takes in a list of strings and filters out the strings that start with a vowel
filterVowels :: [String] -> [String]
filterVowels = filter (\x -> elem (head x) "aeiou")

-- Main function, calls the above functions and prints the results
main :: IO()
main = do
  putStrLn "Cartesian product of [1,2,3] and [4,5,6]: "
  print (cartesian [1,2,3] [4,5,6])
  putStrLn "Factorial of 5: "
  print (factorial 5)
  putStrLn "Filter out vowels from the list ['apple', 'orange', 'banana', 'pineapple']: "
  print (filterVowels ["apple", "orange", "banana", "pineapple"])