{-# LANGUAGE MultiParamTypeClasses, FlexibleInstances, FunctionalDependencies #-}

-- Defining a type class called "Addable" that takes two type parameters
class Addable a b | a -> b where
  -- Defining a function "add" that takes in two arguments of types "a" and "b" and returns a value of type "b"
  add :: a -> b -> b

-- Defining an instance of the "Addable" class for Integer types
instance Addable Int Int where
  add n m = n + m

-- Defining an instance of the "Addable" class for String types
instance Addable String String where
  add str1 str2 = str1 ++ str2

-- Defining a function "sum" that takes in a list of items that are instances of the "Addable" class and returns the sum of all elements in the list
sum :: (Addable a b) => [a] -> b
sum [] = add 0 0 -- Base case: return 0 for an empty list
sum (x:xs) = add x (sum xs) -- Recursive case: add the first element to the sum of the rest of the list

-- Example: summing a list of integers using the "sum" function
sum [1, 2, 3, 4, 5] -- Output: 15

-- Example: summing a list of strings using the "sum" function
sum ["Hello, ", "World!"] -- Output: "Hello, World!"