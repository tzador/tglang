-- | A function that calculates the factorial of a given number
factorial :: Integer -> Integer
factorial n = if n == 0 then 1 else n * factorial (n - 1)

-- | A function that calculates the nth Fibonacci number
fib :: Integer -> Integer
fib n = if n <= 2 then 1 else fib (n - 1) + fib (n - 2)

-- | A function that takes in a list of integers and returns the sum of all odd numbers
sumOdd :: [Integer] -> Integer
sumOdd [] = 0
sumOdd (x:xs) = if x `mod` 2 /= 0 then x + sumOdd xs else sumOdd xs

-- | A type representing a binary tree
data BinaryTree a = Leaf a | Node a (BinaryTree a) (BinaryTree a)

-- | A function that inserts an element into a binary search tree
insert :: Ord a => a -> BinaryTree a -> BinaryTree a
insert x (Leaf a) = if x < a then Node a (Leaf x) (Leaf a) else Node a (Leaf a) (Leaf x)
insert x (Node a left right) = if x <= a then Node a (insert x left) right else Node left insert x right)

-- | A function that returns the depth of a binary tree
treeDepth :: BinaryTree a -> Integer
treeDepth (Leaf _) = 0
treeDepth (Node _ left right) = 1 + max (treeDepth left) (treeDepth right)

-- | A function that returns a list of all elements in a binary tree using in-order traversal
inOrder :: BinaryTree a -> [a]
inOrder (Leaf a) = [a]
inOrder (Node a left right) = inOrder left ++ [a] ++ inOrder right

-- | A function that maps a function over a binary tree
mapTree :: (a -> b) -> BinaryTree a -> BinaryTree b
mapTree f (Leaf a) = Leaf (f a)
mapTree f (Node a left right) = Node (f a) (mapTree f left) (mapTree f right)