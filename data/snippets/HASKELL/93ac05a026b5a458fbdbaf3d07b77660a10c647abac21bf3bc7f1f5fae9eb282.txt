--Declaring a recursive function
let fibonacci :: Int -> Int
    fibonacci n | n <= 1    = n
                | otherwise = fibonacci (n-1) + fibonacci (n-2)
                
--Declaring a list of values
let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

--Using list comprehension to filter out even numbers and square them
let evenSquared = [x^2 | x <- numbers, x `mod` 2 == 0]

--Declaring a function that checks if a number is prime
let isPrime :: Int -> Bool
    isPrime n | n < 2              = False
              | n == 2             = True
              | n `mod` 2 == 0     = False
              | otherwise          = not $ any (\x -> n `mod` x == 0) [3,5..n-1]

--Using list comprehension to generate a list of prime numbers from the given numbers list
let primeNumbers = [x | x <- numbers, isPrime x]

--Declaring a recursive data type called Tree
data Tree a = Leaf a | Node (Tree a) a (Tree a)

--Defining a function to insert a value into the given tree in a binary search tree manner
let insert :: (Ord a) => a -> Tree a -> Tree a
    insert x (Leaf y) = Leaf $
        if x <= y then
            Node (Leaf x) y (Leaf y)
        else
            Node (Leaf y) y (Leaf x)
    insert x (Node l y r) = if x <= y then
                                Node (insert x l) y r
                            else 
                                Node l y (insert x r)

--Creating a sample tree with Leaf values - [1,2,3]
let sampleTree = Node (Leaf 1) 2 (Node (Leaf 3) 2 (Leaf 1))

--Inserting value 4 into the sample tree
let newTree = insert 4 sampleTree

--Printing out the new tree
newTree