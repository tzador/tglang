module Main where

import qualified Data.Map as Map
import qualified Data.List as List

-- The main function
main :: IO()
main = do
	-- Initialize a map with keys and values
    let m = Map.fromList [("apple", 2), ("banana", 4), ("orange", 3), ("strawberry", 5), ("kiwi", 2)]

    -- Print the map
    putStrLn "Current map:"
    print m

    -- Sort the map by values in ascending order
    let sortedMap = List.sortBy (\(_, a) (_, b) -> compare a b) (Map.toList m)

    -- Print the sorted map
    putStrLn "Sorted map (ascending order):"
    print sortedMap

    -- Check for the value of the key "apple"
    putStrLn "Value of key \"apple\":"
    print (Map.lookup "apple" m)

    -- Add a new key-value pair to the map
    let newMap = Map.insert "mango" 6 m

    -- Print the updated map
    putStrLn "Updated map:"
    print newMap

    -- Remove a key-value pair from the map
    let removedMap = Map.delete "orange" m

    -- Print the map without the removed key-value pair
    putStrLn "Map without \"orange\":"
    print removedMap

    -- Check if the map contains the key "strawberry"
    putStrLn "Does the map contain \"strawberry\"?:"
    print (Map.member "strawberry" m)

    -- Get a list of keys from the map
    putStrLn "Keys in the map:"
    print (Map.keys m)

    -- Get a list of values from the map
    putStrLn "Values in the map:"
    print (Map.elems m)