{-# LANGUAGE MultiParamTypeClasses, FlexibleInstances #-}

-- Typeclass definition for semigroup
class Semigroup a where
    (<*>) :: a -> a -> a

-- Instance of semigroup for list type
instance Semigroup [a] where
    (<*>) [] ys = ys
    (<*>) xs [] = xs
    (<*>) (x:xs) (y:ys) = x : y : (<*>) xs ys

-- Typeclass definition for monoid
class Semigroup a => Monoid a where
    mempty :: a

-- Instance of monoid for list type
instance Monoid [a] where
    mempty = []

-- Typeclass definition for functor
class Functor f where
    fmap :: (a -> b) -> f a -> f b

-- Instance of functor for list type
instance Functor [] where
    fmap _ [] = []
    fmap f (x:xs) = f x : fmap f xs

-- Typeclass definition for applicative
class Functor f => Applicative f where
    pure :: a -> f a
    (<*>) :: f (a -> b) -> f a -> f b

-- Typeclass definition for monad
class Applicative m => Monad m where
    return :: a -> m a
    (>>=) :: m a -> (a -> m b) -> m b

-- Instance of monad for list type
instance Monad [] where
    return x = [x]
    (>>=) [] _ = []
    (>>=) (x:xs) f = f x ++ (>>=) xs f

-- Example usage of monad
exampleMonad :: [Int]
-- Annotated code to explain usage:
exampleMonad = do
    -- Bind the list [1, 2] with the function [1, 2] -> [1, 2, 3]
    x <- return [1, 2] >>= (\x -> return (x ++ [3]))
    -- Bind the result of the previous bind with the function [1, 2, 3] -> [2, 3, 4]
    y <- return x >>= (\y -> return (fmap (+1) y))
    -- Bind the result of the previous bind with the function [2, 3, 4] -> [3, 4, 5]
    z <- return y >>= (\z -> return (fmap (+1) z))
    -- Return the final result of [3, 4, 5]
    return z

-- Output: [3, 4, 5]