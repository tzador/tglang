{-# LANGUAGE TypeFamilies #-}

-- Define a type class `Function` with one parameter `a`
class Function a where
    -- Define the associated type `Result` as a type function of `a`
    type Result a
    -- Define the `apply` function that takes in a value of type `a` and returns a value of type `Result a`
    apply :: a -> Result a
    
-- Define a type `IntFunction` that is an instance of the `Function` type class,
-- where `a` is set to `Int` and `Result Int` is set to `Int -> Int`
instance Function Int where
    type Result Int = Int -> Int
    -- Define the `apply` function for `Int` where it takes in an integer and adds it to the given `Int` value
    apply a b = a + b
    
-- Define a type `ListFunction` that is an instance of the `Function` type class,
-- where `a` is set to `[Int]` and `Result [Int]` is set to `Int -> [Int]`
instance Function [Int] where
    type Result [Int] = Int -> [Int]
    -- Define the `apply` function for `[Int]` where it appends the given `Int` value to the end of the list
    apply a b = a ++ [b]

-- Define a function `compose` that takes in two functions `f` and `g` and returns a function that
-- applies `f` to the result of `g` applied to a given value
compose :: Function a => (Result a -> Result a) -> (a -> Result a) -> a -> Result a
compose f g x = f (g x)

-- Use `compose` to create a new function `composed` that adds 5 to the result of `apply` on a list containing 1, 2, 3
composed :: [Int] -> Int -> Int
composed = compose (apply 5) (apply [1, 2, 3])

-- Call `composed` with a value of 10 and print the result, which should be 15
main :: IO ()
main = print $ composed 10