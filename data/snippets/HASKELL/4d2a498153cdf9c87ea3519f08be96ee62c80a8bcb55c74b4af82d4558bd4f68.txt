-- Example function in Haskell: complex exponentiation 
-- Takes in a base, exponent, and modulo value
exponentMod :: Integer -> Integer -> Integer -> Integer
exponentMod _ 0 _ = 1
exponentMod base exponent modulo 
    | exp `mod` 2 == 0 = (exp2 `mod` modulo)
    | otherwise = (base * exp2) `mod` modulo
    where
        exp = exponentMod base (exponent `div` 2) modulo
        exp2 = exp * exp