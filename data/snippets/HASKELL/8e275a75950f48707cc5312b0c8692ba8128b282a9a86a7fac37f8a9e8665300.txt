module Main where
import Data.List

-- | Represents a binary tree with values of type 'a'
data Tree a = Empty | Branch a (Tree a) (Tree a) deriving (Show, Eq)

-- | Maps a function over a binary tree
treeMap :: (a -> b) -> Tree a -> Tree b
treeMap _ Empty = Empty
treeMap f (Branch x left right) = Branch (f x) (treeMap f left) (treeMap f right)

-- | Converts a binary tree to a list, using in-order traversal
treeToList :: Tree a -> [a]
treeToList Empty = []
treeToList (Branch x left right) = treeToList left ++ [x] ++ treeToList right

-- | Inserts a value into a binary search tree
treeInsert :: (Ord a) => a -> Tree a -> Tree a
treeInsert x Empty = Branch x Empty Empty
treeInsert x (Branch y left right)
    | x < y = Branch y (treeInsert x left) right
    | otherwise = Branch y left (treeInsert x right)

-- | Checks if a given value exists in a binary search tree
treeMember :: (Ord a) => a -> Tree a -> Bool
treeMember _ Empty = False
treeMember x (Branch y left right)
    | x == y = True
    | x < y = treeMember x left
    | otherwise = treeMember x right

-- | Folds a binary tree into a single value, using a combination function and an initial value
treeFold :: (a -> b -> b -> b) -> b -> Tree a -> b
treeFold _ acc Empty = acc
treeFold f acc (Branch x left right) = f x (treeFold f acc left) (treeFold f acc right)

main :: IO ()
main = do
    -- Sample binary tree
    let tree = Branch 5 (Branch 3 (Branch 2 Empty Empty) (Branch 4 Empty Empty)) (Branch 7 Empty (Branch 8 (Branch 6 Empty Empty) Empty))

    -- Map function over tree to double each value
    let mappedTree = treeMap (*2) tree

    -- Convert tree to list and print
    print $ treeToList mappedTree

    -- Insert 9 into tree
    let newTree = treeInsert 9 tree

    -- Check if 6 exists in tree
    print $ treeMember 6 newTree

    -- Fold tree into single sum value
    print $ treeFold (\x leftSum rightSum -> x + leftSum + rightSum) 0 newTree