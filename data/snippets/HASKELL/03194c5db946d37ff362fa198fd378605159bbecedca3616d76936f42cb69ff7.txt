-- The following code snippet is a function called "quicksort" that sorts a list of integers in ascending order.
-- We first define the base case, where an empty list is already sorted.
-- Then we recursively partition the list into smaller and larger elements,
-- until we reach the base case and merge everything together.

-- Function declaration
quicksort :: (Ord a) => [a] -> [a]

-- Base case: An empty list is already sorted
quicksort [] = []

-- Recursive case: Partition the list and merge the smaller and larger elements
quicksort (x:xs) =
  let smallerSorted = quicksort [a | a <- xs, a <= x]
      biggerSorted  = quicksort [a | a <- xs, a > x]
  in smallerSorted ++ [x] ++ biggerSorted