{-# LANGUAGE TypeSynonymInstances, FlexibleInstances #-}

-- define a type class for mathematical operations
class Addition a where
    add :: a -> a -> a
    multiply :: a -> a -> a

-- define an instance for integers
instance Addition Integer where
    add x y = x + y
    multiply x y = x * y

-- define an instance for strings
instance Addition String where
    add x y = x ++ y
    multiply x y = error "Cannot multiply strings!"

-- define a function to apply addition on a list of numbers
sumList :: (Addition a, Num a) => [a] -> a
sumList [] = 0
sumList (x:xs) = add x (sumList xs)

-- define a function to apply multiplication on a list of numbers
productList :: (Addition a, Num a) => [a] -> a
productList [] = 1
productList (x:xs) = multiply x (productList xs)

-- example usage
main = do
    let nums = [1,2,3,4]
    putStrLn $ "Sum: " ++ show (sumList nums)
    putStrLn $ "Product: " ++ show (productList nums)

-- Output:
--
-- Sum: 10
-- Product: 24