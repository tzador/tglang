{-# LANGUAGE RankNTypes #-}

newtype List a = List { unList :: forall b. (a -> b -> b) -> b -> b }

nil :: List a
nil = List (\_ n -> n)

cons :: a -> List a -> List a
cons x xs = List (\c n -> c x (unList xs c n))

append :: List a -> List a -> List a
append xs ys = List (\c n -> unList xs c (unList ys c n))

fromList :: [a] -> List a
fromList = foldr cons nil

toList :: List a -> [a]
toList = fold (\x xs -> x : xs) []

fold :: (a -> b -> b) -> b -> List a -> b
fold f acc xs = unList xs f acc