{-# OPTIONS_GHC -Wall #-}

-- | Calculate the factorial of a given number
factorial :: Integer -> Integer
factorial n
    | n == 0 = 1
    | n > 0 = n * factorial (n - 1)
    | otherwise = error "Factorial is not defined for negative numbers"

-- | A function to calculate the nth Fibonacci number
fibonacci :: Integer -> Integer
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

-- | A function to calculate the sum of all even numbers in a given list
sumEven :: [Integer] -> Integer
sumEven [] = 0
sumEven (x:xs)
    | even x = x + sumEven xs
    | otherwise = sumEven xs

-- | A function to calculate the sum of all odd numbers in a given list
sumOdd :: [Integer] -> Integer
sumOdd [] = 0
sumOdd (x:xs)
    | odd x = x + sumOdd xs
    | otherwise = sumOdd xs

-- | A function to calculate the sum of a given list using recursion
sum :: Num a => [a] -> a
sum [] = 0
sum (x:xs) = x + sum xs

-- | A function to calculate the product of a given list using recursion
product :: Num a => [a] -> a
product [] = 1
product (x:xs) = x * product xs