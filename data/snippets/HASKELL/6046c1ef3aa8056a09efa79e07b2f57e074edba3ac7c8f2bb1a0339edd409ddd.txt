-- Define a recursive function to find factorial
factorial :: Integer -> Integer
factorial 0 = 1 -- If input is 0, output 1
factorial n = n * factorial(n-1) -- Otherwise, multiply input with factorial of (input - 1)

-- Define a function to find the nth element in a list
-- Implicitly uses recursion
nthElement :: Integer -> [a] -> a
nthElement _ [] = error "Empty list" -- If list is empty, throw error
nthElement 0 (x:_) = x -- If index is 0, return first element
nthElement n (x:xs) = nthElement (n-1) xs -- Otherwise, recursively call the function with index - 1 and remaining list

-- Define a type 'Tree' with two constructors for a binary tree
data Tree a = Leaf a | Node (Tree a) a (Tree a)

-- Define a function to insert an element into a binary search tree
insertBST :: Ord a => a -> Tree a -> Tree a
insertBST x (Leaf a) = Node (Leaf x) a (Leaf x) -- If tree is a leaf, insert element as the only child
insertBST x (Node left a right) -- Otherwise, check if element is less than, equal to, or greater than root element
    | x < a = Node (insertBST x left) a right -- If less than, insert into left subtree
    | x == a = Node left a (insertBST x right) -- If equal to, insert into right subtree
    | x > a = Node left a (insertBST x right) -- If greater than, insert into right subtree