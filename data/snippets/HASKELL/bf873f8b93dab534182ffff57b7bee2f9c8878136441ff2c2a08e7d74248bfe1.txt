-- Create a function that takes in two lists and merges them into a single sorted list
-- The function uses a recursive algorithm
-- Input:
-- list1 - first list
-- list2 - second list
-- Output:
-- merged_list - sorted list with elements from both input lists

mergeLists :: (Ord a) => [a] -> [a] -> [a]  -- Declare function with input lists of any orderable type
mergeLists [] list2 = list2  -- Base case: if first list is empty, return second list
mergeLists list1 [] = list1  -- Base case: if second list is empty, return first list
mergeLists (x:xs) (y:ys)  -- Otherwise, recurse through both lists
    | x <= y = x : mergeLists xs (y:ys)  -- If first element of first list <= first element of second list, add it to merged list and continue recursion with rest of first list
    | otherwise = y : mergeLists (x:xs) ys  -- Otherwise, add first element of second list to merged list and continue recursion with rest of second list

-- Example Usage:
-- Input: [1,3,5] [2,4,6]
-- Output: [1,2,3,4,5,6]