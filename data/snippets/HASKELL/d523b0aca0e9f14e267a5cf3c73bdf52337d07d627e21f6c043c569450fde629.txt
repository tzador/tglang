data BST a = Empty | Node a (BST a) (BST a) -- defines a binary search tree data type with a value and left and right branches
instance (Show a) => Show (BST a) where -- enables the printing of the tree's values
    show Empty = "Empty" -- displays "Empty" for an empty tree
    show (Node x Empty Empty) = show x -- displays the value for a tree with no children
    show (Node x left right) = show left ++ " -> " ++ show x ++ " <- " ++ show right -- displays the value and branches for a tree with children
insert :: (Ord a) => BST a -> a -> BST a -- function to insert a new value into a BST
insert Empty val = Node val Empty Empty -- if tree is empty, create new node with value
insert (Node x left right) val -- otherwise, compare value with current node
    | val == x = Node x left right -- if equal, no change needed
    | val < x = Node x (insert left val) right -- if less, insert into left subtree
    | val > x = Node x left (insert right val) -- if greater, insert into right subtree
delete :: (Ord a) => BST a -> a -> BST a -- function to delete a value from a BST
delete Empty _ = Empty -- if tree is empty, no change needed
delete (Node x left right) val -- otherwise, compare value with current node
    | val == x = removeNode (Node x left right) -- if equal, call removeNode function
    | val < x = Node x (delete left val) right -- if less, delete from left subtree
    | val > x = Node x left (delete right val) -- if greater, delete from right subtree
removeNode :: (Ord a) => BST a -> BST a -- function to remove a node from a BST
removeNode (Node x Empty right) = right -- if node has no left child, replace node with right child
removeNode (Node x left Empty) = left -- if node has no right child, replace node with left child
removeNode (Node x left right) = Node minRight left (delete right minRight) -- if node has both children, replace with minimum value from right subtree
    where minRight = findMin right -- helper function to find minimum value from right subtree
findMin :: (Ord a) => BST a -> a -- function to find minimum value in a BST
findMin (Node x Empty _) = x -- minimum value is the root if there is no left subtree
findMin (Node _ left _) = findMin left -- otherwise, recursively find minimum value in left subtree