{-# LANGUAGE MultiParamTypeClasses, FlexibleInstances #-}

-- Defining a new typeclass named "Vector"
class Vector v a where
    -- Function to get the magnitude of a vector
    magnitude :: v a -> a

    -- Function to add two vectors
    add :: v a -> v a -> v a

    -- Function to multiply a vector by a scalar
    multiply :: v a -> a -> v a

-- Defining a new data type "Vec3" with three elements of type "Double"
data Vec3 = Vec3 Double Double Double

-- Making "Vec3" an instance of the "Vector" typeclass
instance Vector Vec3 Double where
    -- Implementing "magnitude" function for "Vec3" type
    magnitude (Vec3 x y z) = sqrt (x^2 + y^2 + z^2)

    -- Implementing "add" function for "Vec3" type
    add (Vec3 x1 y1 z1) (Vec3 x2 y2 z2) = Vec3 (x1+x2) (y1+y2) (z1+z2)

    -- Implementing "multiply" function for "Vec3" type
    multiply (Vec3 x y z) scalar = Vec3 (x*scalar) (y*scalar) (z*scalar)

-- Creating two vectors of type "Vec3"
v1 :: Vec3
v1 = Vec3 1 2 3

v2 :: Vec3
v2 = Vec3 4 5 6

-- Getting the magnitude of v1
magV1 = magnitude v1

-- Adding v1 and v2
sumV1V2 = add v1 v2

-- Multiplying v1 by a scalar value of 2
mulV1 = multiply v1 2

-- Outputting the results
print magV1
print sumV1V2
print mulV1