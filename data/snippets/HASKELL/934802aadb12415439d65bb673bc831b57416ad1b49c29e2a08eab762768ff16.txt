data Tree a = Nil | Node a (Tree a) (Tree a)

insert :: (Eq a, Ord a) => a -> Tree a -> Tree a
insert x Nil = Node x Nil Nil
insert x (Node y left right)
    | x == y = Node y left right
    | x < y = Node y (insert x left) right
    | x > y = Node y left (insert x right)

toList :: Tree a -> [a]
toList Nil = []
toList (Node x left right) = toList left ++ [x] ++ toList right

main :: IO ()
main = do
    let tree = foldr insert Nil [4, 2, 7, 5, 3, 1, 9, 6, 8]
    let sortedList = toList tree
    putStrLn $ show sortedList