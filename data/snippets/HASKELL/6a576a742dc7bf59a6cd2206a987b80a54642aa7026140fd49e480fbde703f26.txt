haskell code

-- Function to calculate the factorial of a number recursively
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n-1)

-- Function to sum the first n natural numbers
sumN :: Integer -> Integer
sumN 0 = 0
sumN n = n + sumN (n-1)

-- Function to check if a number is prime
isPrime :: Integer -> Bool
isPrime n = null [x | x <- [2..n-1], n `mod` x == 0]

-- Function to generate a list of prime numbers up to a specified limit
generatePrimes :: Integer -> [Integer]
generatePrimes limit = [x | x <- [2..limit], isPrime x]

-- Function to calculate the nth fibonacci number
fibonacci :: Int -> Int
fibonacci n = if n < 2 then n else (fibonacci (n-1) + fibonacci (n-2))

-- Main function to take input from user and output the nth fibonacci number
main :: IO ()
main = do 
    putStrLn "Enter a number to calculate its factorial: "
    input <- getLine
    let n = (read input :: Int)
    putStrLn ("The factorial of " ++ input ++ " is " ++ show (factorial n))

    putStrLn "Enter a number to calculate the sum of the first n natural numbers: "
    input <- getLine
    let n = (read input :: Integer)
    putStrLn ("The sum of the first " ++ input ++ " natural numbers is " ++ show (sumN n))

    putStrLn "Enter a number to check if it is prime: "
    input <- getLine
    let n = (read input :: Integer)
    putStrLn (if isPrime n then "The number is prime." else "The number is not prime.")

    putStrLn "Enter a limit to generate a list of prime numbers: "
    input <- getLine
    let limit = (read input :: Integer)
    putStrLn ("The list of prime numbers up to " ++ input ++ " is " ++ show (generatePrimes limit))

    putStrLn "Enter a number to calculate the nth fibonacci number: "
    input <- getLine
    let n = (read input :: Int)
    putStrLn ("The " ++ show n ++ "th fibonacci number is " ++ show (fibonacci n))