{-# LANGUAGE OverloadedStrings #-}
import qualified Data.Text as T
import Data.List (intercalate)

-- This function takes in a list of integers and returns a string with the numbers formatted as a list in parentheses
formatList :: [Int] -> T.Text
formatList nums = "(" <> T.pack (intercalate ", " (map show nums)) <> ")"

-- This function creates a custom data type representing a student's information
data Student = Student { name :: T.Text
                        , age :: Int
                        , school :: T.Text
                        , major :: T.Text
                        }

-- This function checks if a student is eligible for graduation based on their major and age
checkEligibility :: Student -> T.Text
checkEligibility student
  | major student == "Computer Science" && age student >= 21 = "Eligible for graduation"
  | otherwise = "Not eligible for graduation"

-- Sample list of students
students :: [Student]
students = [Student "John Doe" 22 "University of Haskell" "Computer Science",
            Student "Jane Doe" 20 "University of Haskell" "Business"]

-- This function maps the checkEligibility function over the list of students
checkStudents :: [Student] -> [T.Text]
checkStudents students = map checkEligibility students

-- Output the list of eligible students in a formatted string
main :: IO ()
main = putStrLn $ "Eligible students: " <> formatList (checkStudents students)