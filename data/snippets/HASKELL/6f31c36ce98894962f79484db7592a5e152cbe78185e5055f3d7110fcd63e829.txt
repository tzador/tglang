{-# LANGUAGE GADTs #-}

-- Define a GADT (Generalized Algebraic Data Type) 
data Expr a where
  LitInt  :: Int -> Expr Int
  LitBool :: Bool -> Expr Bool
  Add     :: Expr Int -> Expr Int -> Expr Int
  Mul     :: Expr Int -> Expr Int -> Expr Int
  Not     :: Expr Bool -> Expr Bool
  And     :: Expr Bool -> Expr Bool -> Expr Bool

-- Evaluate an expression
eval :: Expr a -> a
eval (LitInt i)  = i
eval (LitBool b) = b
eval (Add e1 e2) = eval e1 + eval e2
eval (Mul e1 e2) = eval e1 * eval e2
eval (Not e)     = not (eval e)
eval (And e1 e2) = eval e1 && eval e2

-- Convert an expression to a string
-- with proper parentheses for operations
showExpr :: Expr a -> String
showExpr (LitInt i)  = show i
showExpr (LitBool b) = show b
showExpr (Add e1 e2) = "(" ++ showExpr e1 ++ " + " ++ showExpr e2 ++ ")"
showExpr (Mul e1 e2) = "(" ++ showExpr e1 ++ " * " ++ showExpr e2 ++ ")"
showExpr (Not e)     = "not (" ++ showExpr e ++ ")"
showExpr (And e1 e2) = "(" ++ showExpr e1 ++ " && " ++ showExpr e2 ++ ")"

-- Example expression: (not (2 + 3 * 4)) && (True)
expr :: Expr Bool
expr = And (Not (Add (LitInt 2) (Mul (LitInt 3) (LitInt 4)))) (LitBool True)

-- Output: "(not (2 + 3 * 4)) && (True)"