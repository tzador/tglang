{-# LANGUAGE DeriveGeneric #-}

import GHC.Generics (Generic)

-- | A custom data type representing a binary tree with generic values at each node
data BinaryTree a =    
    Empty
    | Node a (BinaryTree a) (BinaryTree a)
    deriving (Show, Eq, Generic)

-- | A function that inserts a new value into the binary tree at the appropriate location
insert :: (Ord a) => a -> BinaryTree a -> BinaryTree a
insert val Empty = Node val Empty Empty
insert val (Node root left right)
    | val < root = Node root (insert val left) right
    | otherwise = Node root left (insert val right)

-- | A function that checks if a given value is present in the binary tree
contains :: (Ord a) => a -> BinaryTree a -> Bool
contains val Empty = False
contains val (Node root left right)
    | val == root = True
    | val < root = contains val left
    | otherwise = contains val right

-- | A function that deletes a given value from the binary tree if it exists
delete :: (Ord a) => a -> BinaryTree a -> BinaryTree a
delete val Empty = Empty
delete val (Node root left right)
    | val < root = Node root (delete val left) right
    | val > root = Node root left (delete val right)
    | otherwise = merge left right
    where merge Empty btree = btree
          merge a Empty = a
          merge (Node root left right) btree = Node root left (merge right btree)