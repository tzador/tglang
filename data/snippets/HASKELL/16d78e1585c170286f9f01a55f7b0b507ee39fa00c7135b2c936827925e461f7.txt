import Data.List (intercalate)

-- Given list of numbers, return list with each number doubled
doubleList :: [Int] -> [Int]
doubleList [] = []
doubleList (x:xs) = 2 * x : doubleList xs

-- Given list of lists, return list with each inner list concatenated
concatLists :: [[Int]] -> [Int]
concatLists [] = []
concatLists (x:xs) = x ++ concatLists xs

-- Given list of strings, return list with each string capitalized
capitalizeList :: [String] -> [String]
capitalizeList [] = []
capitalizeList (x:xs) = capitalize x : capitalizeList xs
  where capitalize str = if null str then "" else head str : map toUpper (tail str)

-- Main function
main = do
  let numbers = [1, 2, 3, 4, 5]
  let lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  let strings = ["hello", "world", "haskell"]
  putStrLn "List of numbers:"
  print numbers
  putStrLn "List with each number doubled:"
  print (doubleList numbers)
  putStrLn "List of lists:"
  print lists
  putStrLn "List with each inner list concatenated:"
  print (concatLists lists)
  putStrLn "List of strings:"
  print strings
  putStrLn "List with each string capitalized:"
  print (capitalizeList strings)