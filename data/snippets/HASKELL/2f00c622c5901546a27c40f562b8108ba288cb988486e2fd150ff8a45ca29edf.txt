{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
{-# LANGUAGE OverloadedStrings #-}

module Main where

import Data.List (sort)
import Data.Text (Text, pack)

-- | Convert a Text to a list of Integers and sum them
sumText :: Text -> Integer
-- Use recursion to loop through all characters in the Text
sumText txt = sumText' (pack "") (pack "") (pack "") (pack "") txt
  where
    sumText' :: Text -> Text -> Text -> Text -> Text -> Integer
    -- Use pattern matching to handle all possible cases
    -- Base case 1: when the Text is empty, return 0
    sumText' acc currNum currChar currDecimal "" = 0
    -- Base case 2: when current character is not a digit, add current
    -- number to accumulator and start a new one
    sumText' acc currNum currChar currDecimal (x:xs)
      | not (x `elem` ['0'..'9']) = sumText' (acc + (read (unpack currNum))) (pack "") (pack "") (pack "") xs
      -- Check if current character is a decimal point
      | x == '.' && currDecimal == "" = sumText' acc currNum currChar (pack ".") xs
      -- If current character is a decimal point and there's already a
      -- decimal point in current number, then it's an invalid input
      | x == '.' && currDecimal /= "" = error "Invalid input"
      -- If current character is a digit, add it to current number
      -- and continue recursion
      | otherwise = sumText' acc (append currNum (pack [x])) currChar currDecimal xs
    -- Calculate the sum of all Integers in the Text
    sum = foldl (+) 0 (map (read . unpack) (words txt))
    -- Sort the list of Integers in descending order
    sortedList = sort (map (read . unpack) (words txt)) \\ [0]