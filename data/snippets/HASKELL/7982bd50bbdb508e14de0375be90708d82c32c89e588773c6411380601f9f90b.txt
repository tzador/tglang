-- This is a function that takes in two parameters and returns their sum
add :: Int -> Int -> Int
add x y = x + y

-- This is a function that takes in a list and checks if it is empty
isEmpty :: [a] -> Bool
isEmpty list = case list of
                    [] -> True
                    _ -> False

-- This is a recursive function that calculates the factorial of a number using pattern matching
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- This is a function that squares each element in a list and returns a new list
squareList :: [Int] -> [Int]
squareList list = map (\x -> x*x) list

-- This is a function that takes in a list of tuples and returns the sum of the second element in each tuple
sumSecond :: [(Int, Int)] -> Int
sumSecond list = foldr (\(_, y) acc -> acc + y) 0 list

-- This is a function that finds the minimum element in a list using recursion
minimumEl :: [Int] -> Int
minimumEl [x] = x
minimumEl (x:xs) = min x (minimumEl xs)