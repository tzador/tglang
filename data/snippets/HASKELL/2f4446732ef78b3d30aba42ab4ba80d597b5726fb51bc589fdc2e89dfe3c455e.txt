-- This is a function that recursively finds the greatest common divisor (GCD) of two integers
-- It uses Euclid's algorithm to find the GCD
gcd :: Int -> Int -> Int
gcd a b = if b == 0 then a else gcd b (a `mod` b)

-- This is a function that calculates the least common multiple (LCM) of two integers
-- It uses the formula a*b/GCD(a,b) to find the LCM
lcm :: Int -> Int -> Int
lcm a b = (a * b) `div` gcd a b

-- This is a function that takes in a list of integers and returns the sum of all the elements
sumList :: [Int] -> Int
sumList [] = 0
sumList (x:xs) = x + sumList xs

-- This is a function that checks if a given year is a leap year
-- It follows the rules for leap years: divisible by 400, or divisible by 4 and not by 100
isLeapYear :: Int -> Bool
isLeapYear year
    | year `mod` 400 == 0 = True
    | year `mod` 4 == 0 && year `mod` 100 /= 0 = True
    | otherwise = False