let prime = sieve [2..]
    sieve (p:xs) = p : sieve [x | x <- xs, x `mod` p /= 0]

len :: [a] -> Int
len [] = 0
len (_:xs) = 1 + len xs

factors :: Int -> [Int] -> [Int]
factors 1 _ = []
factors n (x:xs)
    | n `mod` x == 0 = x : factors (n `div` x) (x:xs)
    | otherwise = factors n xs

primeFactors :: Int -> [Int]
primeFactors n = factors n (takeWhile (<= n) prime)

powerSum :: Int -> Int -> [Int]
powerSum n k
    | len lst < k = []
    | otherwise = [head lst ^ k]
    where lst = primeFactors n