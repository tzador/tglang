{-# LANGUAGE DeriveAnyClass, StandaloneDeriving, TypeFamilies #-}
module Main where

import Data.Array

-- | This is a typeclass for a Monoid that can be split.
class SplitMonoid m where
  type SplitIndex m
  -- | Split the monoid in two parts at a specific index.
  splitIndex :: m -> SplitIndex m -> (m, m)
  -- | Combine two monoids into one.
  combine :: m -> m -> m

instance SplitMonoid [a] where
  type SplitIndex [a] = Int
  splitIndex xs i = (take i xs, drop i xs)
  combine xs ys = xs ++ ys

-- | This is a typeclass for a KDTree, a binary space partitioning tree used for efficient 
-- | searching in multidimensional data.
class KDTree t where
  type Point t :: *
  type Dimension t :: *
  -- | Find the k nearest neighbors to a given point in the KDTree.
  findKNearestNeighbors :: Point t -> Int -> t -> [Point t]
  -- | Insert a new point into the KDTree.
  insert :: Point t -> t -> t
  -- | Create a new KDTree from a list of points.
  fromList :: [Point t] -> t

data KDNode p d = KDLeaf { point :: p, data :: d}
                | KDBranch { left :: KDNode p d, right :: KDNode p d, splitDim :: Dimension p }

deriving instance (Show p, Show d) => Show (KDNode p d)
deriving instance (Eq p, Eq d) => Eq (KDNode p d)

instance (Ord (Dimension p), SplitMonoid p) => KDTree (KDNode p d) where
  type Point (KDNode p d) = p
  type Dimension (KDNode p d) = Dimension p
  findKNearestNeighbors = undefined -- omitted for brevity
  insert = insertHelper 0
    where
      insertHelper dim newPoint (KDLeaf point data) = if newPoint `atIndex` dim < point `atIndex` dim
                                                      then KDLeaf (combine newPoint point) data
                                                      else KDLeaf (combine point newPoint) data
      insertHelper dim newPoint (KDBranch left right splitDim) = if newPoint `atIndex` dim < splitDim
                                                                  then KDBranch (insertHelper (dim+1) newPoint left) right splitDim
                                                                  else KDBranch left (insertHelper (dim+1) newPoint right) splitDim
  -- the fromList function constructs balanced KDTree with O(n log n) time complexity
  fromList points = fromListHelper 0 points
    where
      -- This function computes the median of a list of points based on the given dimension.
      median :: Int -> [p] -> p
      median dim [] = error "cannot calculate median of empty list"
      median dim [x] = x
      median dim xs = (sort xs) !! (length xs `div` 2)
      -- This function recursively builds a balanced KDTree from a list of points
      fromListHelper :: Int -> [p] -> KDNode p d
      fromListHelper dim points = if length points == 1
                                  then KDLeaf (head points) defaultD
                                  else let medianPoint = median dim points
                                           leftPoints = takeWhile (< medianPoint) points
                                           rightPoints = dropWhile (< medianPoint) points
                                           newDim = if dim + 1 < dimension medianPoint
                                                    then dim + 1
                                                    else 0
                                           left = fromListHelper newDim leftPoints
                                           right = fromListHelper newDim rightPoints
                                           splitDim = medianPoint `atIndex` dim
                                       in KDBranch left right splitDim

main :: IO ()
main = do
  let points = [(0,0,0), (1,3,5), (10,10,10), (7,8,10), (2,1,2)]
      tree = fromList points
      neighbors = findKNearestNeighbors (5,5,5) 3 tree
  print neighbors