{-# LANGUAGE DataKinds      #-}
{-# LANGUAGE GADTs          #-}
{-# LANGUAGE KindSignatures #-}

import Data.Kind (Type)

-- | A tagged enum of type-level natural numbers
data Nat = Z     -- ^ Zero
         | S Nat -- ^ Successor of a natural number

-- | A list of n elements of type a
data Vec (a :: Type) (n :: Nat) where
  Nil  :: Vec a Z
  (:>) :: a -> Vec a n -> Vec a (S n)

-- | Append two vectors of size m and n
(++) :: Vec a m -> Vec a n -> Vec a (Add m n)
m ++ Nil       = m
m ++ (x :> xs) = x :> (xs ++ xs)

-- | Type-level addition of two natural numbers
type family Add (m :: Nat) (n :: Nat) :: Nat where
  Add Z     n = n
  Add (S m) n = S (Add m n)

-- | Map a function over each element of a vector
map :: (a -> b) -> Vec a n -> Vec b n
map f Nil       = Nil
map f (x :> xs) = f x :> map f xs