data Tree a = Empty | Node a (Tree a) (Tree a) -- defines a binary tree datatype

-- define a function to insert a value in a binary search tree
insert :: Ord a => a -> Tree a -> Tree a
insert x Empty = Node x Empty Empty -- if tree is empty, create a node with the value
insert x (Node v l r) -- if tree is not empty, compare value to value of current node
    | x == v = Node v l r  -- if x is equal to current node's value, no changes needed
    | x < v = Node v (insert x l) r  -- if x is less than current node's value, insert in left subtree
    | x > v = Node v l (insert x r)  -- if x is greater than current node's value, insert in right subtree

-- define a function to delete a value from a binary search tree
delete :: Ord a => a -> Tree a -> Tree a
delete _ Empty = Empty  -- if tree is empty, no changes needed
delete x (Node v l r)  -- if tree is not empty, compare value to value of current node
    | x == v = case (l, r) of  -- if x is equal to current node's value, check for cases
        (Empty, Empty) -> Empty  -- if both subtrees are empty, delete current node
        (Empty, _) -> r  -- if left subtree is empty, replace current node with right subtree
        (_, Empty) -> l  -- if right subtree is empty, replace current node with left subtree
        (_, _) -> Node (findMin r) l (delete (findMin r) r)  -- if both subtrees are non-empty, replace current node with minimum of right subtree and delete minimum from right subtree
    | x < v = Node v (delete x l) r  -- if x is less than current node's value, delete from left subtree
    | x > v = Node v l (delete x r)  -- if x is greater than current node's value, delete from right subtree

-- define a function to find the minimum value in a binary search tree
findMin :: Ord a => Tree a -> a
findMin (Node v Empty _) = v  -- if left subtree is empty, current node is minimum value
findMin (Node _ l _) = findMin l  -- otherwise, keep searching in left subtree

-- define a function to check if a value is present in a binary search tree
contains :: Ord a => a -> Tree a -> Bool
contains _ Empty = False  -- if tree is empty, value is not present
contains x (Node v l r)  -- if tree is not empty, compare value to value of current node
    | x == v = True  -- if x is equal to current node's value, value is present
    | x < v = contains x l  -- if x is less than current node's value, check in left subtree
    | x > v = contains x r  -- if x is greater than current node's value, check in right subtree

-- example usage of the functions defined above
let tree = Node 5 (Node 2 (Node 1 Empty Empty) (Node 4 Empty Empty)) (Node 8 (Node 6 Empty (Node 7 Empty Empty)) (Node 10 (Node 9 Empty Empty) Empty))  -- create a binary search tree
-- Output: Node 5 (Node 2 (Node 1 Empty Empty) (Node 4 Empty Empty)) (Node 8 (Node 6 Empty (Node 7 Empty Empty)) (Node 10 (Node 9 Empty Empty) Empty))

let newTree = insert 3 tree  -- insert a new value in the tree
-- Output: Node 5 (Node 2 (Node 1 Empty Empty) (Node 4 (Node 3 Empty Empty) Empty)) (Node 8 (Node 6 Empty (Node 7 Empty Empty)) (Node 10 (Node 9 Empty Empty) Empty))

let deletedTree = delete 7 newTree  -- delete a value from the tree
-- Output: Node 5 (Node 2 (Node 1 Empty Empty) (Node 4 (Node 3 Empty Empty) Empty)) (Node 8 (Node 6 Empty Empty) (Node 10 (Node 9 Empty Empty) Empty))

contains 9 deletedTree  -- check if a value is present in the tree
-- Output: True