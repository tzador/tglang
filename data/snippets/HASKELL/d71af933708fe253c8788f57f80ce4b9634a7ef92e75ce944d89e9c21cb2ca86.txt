module Main where

import Data.List

-- create a function that takes in two lists and returns a new list with the
-- elements from both lists, sorted in ascending order
mergeLists :: (Ord a) => [a] -> [a] -> [a]
mergeLists xs [] = xs
mergeLists [] ys = ys
mergeLists (x:xs) (y:ys) 
    | x <= y = x : (mergeLists xs (y:ys))
    | otherwise = y : (mergeLists (x:xs) ys)

-- create a function that takes in a list and returns a list containing all
-- possible combinations of elements in the original list
combinations :: [a] -> [[a]]
combinations [] = [[]]
combinations (x:xs) = combinations xs ++ map (x:) (combinations xs)

-- create a function that takes in two lists and returns a list of tuples
-- containing all possible combinations of elements from both lists
tuples :: [a] -> [b] -> [(a, b)]
tuples xs ys = [(x, y) | x <- xs, y <- ys]

-- create a data type for a binary tree
data BinaryTree a = EmptyTree | Node a (BinaryTree a) (BinaryTree a) deriving (Show)

-- create a function that takes in a binary tree and returns a list of all
-- values in the tree
treeToList :: BinaryTree a -> [a]
treeToList EmptyTree = []
treeToList (Node val left right) = treeToList left ++ [val] ++ treeToList right

-- create a function that takes in a list of strings and converts them to
-- uppercase
convertToUpper :: [String] -> [String]
convertToUpper = map (\x -> map toUpper x)