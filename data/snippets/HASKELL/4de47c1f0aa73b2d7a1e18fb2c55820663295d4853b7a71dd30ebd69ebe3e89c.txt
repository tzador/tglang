module Main where

-- Defining a binary tree data structure
data BinaryTree a = Nil | Node a (BinaryTree a) (BinaryTree a)

-- Function to insert a new element into the binary tree
insert :: (Ord a) => a -> BinaryTree a -> BinaryTree a
insert x Nil = Node x Nil Nil
insert x (Node y left right)
    | x == y = Node x left right
    | x < y = Node y (insert x left) right
    | otherwise = Node y left (insert x right)

-- Function to create a binary tree from a list of elements
createTree :: (Ord a) => [a] -> BinaryTree a
createTree [] = Nil
createTree (x:xs) = insert x (createTree xs)

-- Function to find the maximum element in a binary tree
findMax :: (Ord a) => BinaryTree a -> a
findMax Nil = error "Cannot find maximum element in an empty tree."
findMax (Node x _ Nil) = x
findMax (Node _ _ right) = findMax right

-- Function to delete an element from the binary tree
delete :: (Ord a) => a -> BinaryTree a -> BinaryTree a
delete _ Nil = Nil
delete x (Node y left right)
    | x == y = deleteNode (Node y left right)
    | x < y = Node y (delete x left) right
    | otherwise = Node y left (delete x right)

-- Helper function to delete a node from the binary tree
deleteNode :: (Ord a) => BinaryTree a -> BinaryTree a
deleteNode (Node x Nil Nil) = Nil
deleteNode (Node x left Nil) = left
deleteNode (Node x Nil right) = right
deleteNode (Node x left right) = Node maxLeft left (delete maxLeft right)
    where maxLeft = findMax left

-- Function to convert a binary tree to a list in inorder traversal
inorder :: (Ord a) => BinaryTree a -> [a]
inorder Nil = []
inorder (Node x left right) = (inorder left) ++ [x] ++ (inorder right)

-- Function to convert a binary tree to a list in preorder traversal
preorder :: (Ord a) => BinaryTree a -> [a]
preorder Nil = []
preorder (Node x left right) = [x] ++ (preorder left) ++ (preorder right)

-- Function to convert a binary tree to a list in postorder traversal
postorder :: (Ord a) => BinaryTree a -> [a]
postorder Nil = []
postorder (Node x left right) = (postorder left) ++ (postorder right) ++ [x]

-- Main function to create a binary tree from a list and print the traversals
main :: IO ()
main = do
    putStrLn "Enter the list of elements for the binary tree:"
    input <- getLine
    let tree = createTree (map (read::String->Int) (words input))
    putStrLn "Inorder traversal:"
    putStrLn (show (inorder tree))
    putStrLn "Preorder traversal:"
    putStrLn (show (preorder tree))
    putStrLn "Postorder traversal:"
    putStrLn (show (postorder tree))

-- Sample input and output:
-- Input: 5 2 7 3 9
-- Inorder traversal: [2,3,5,7,9]
-- Preorder traversal: [5,2,3,7,9]
-- Postorder traversal: [3,2,9,7,5]