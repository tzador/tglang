import Data.List
import Data.Char

-- Function to convert a string to a list of characters
stringToList :: String -> [Char]
stringToList str = [c | c <- str]

-- Function to filter out vowels in a given list of characters using recursion
filterVowels :: [Char] -> [Char]
filterVowels [] = []
filterVowels (c:cs) = if c `elem` "aeiouAEIOU" then filterVowels cs else c : filterVowels cs

-- Function to map lowercase letters to uppercase and vice versa in a given list of characters using list comprehension
mapCase :: [Char] -> [Char]
mapCase str = [if isLower c then toUpper c else toLower c | c <- str]

-- Function to recursively remove consecutive duplicates in a given list of characters
removeDuplicates :: [Char] -> [Char]
removeDuplicates [] = []
removeDuplicates [x] = [x]
removeDuplicates (x:xs)
    | x == head xs = removeDuplicates xs
    | otherwise = x : removeDuplicates xs

-- Function to sort a list of characters in descending order using built-in functions
sortDesc :: [Char] -> [Char]
sortDesc str = reverse $ sort str

-- Main function that takes a string as input, converts it to a list of characters,
-- removes vowels, maps case, removes duplicates, and sorts the list in descending order
main :: IO ()
main = do
    putStrLn "Enter a string:"
    input <- getLine
    let str = stringToList input
    let filtered = filterVowels str
    let mapped = mapCase filtered
    let removed = removeDuplicates mapped
    let sorted = sortDesc removed
    putStrLn $ "Output: " ++ sorted