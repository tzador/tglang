-- A function to calculate the nth Fibonacci number
fibonacci :: Integer -> Integer
fibonacci n
  | n <= 0 = error "Invalid input"
  | n == 1 = 0
  | n == 2 = 1
  | otherwise = fibonacci (n-1) + fibonacci (n-2)
  
-- A function to check if a number is prime
isPrime :: Integer -> Bool
isPrime n = n > 1 && all (\x -> n `mod` x /= 0) [2..n-1]

-- A function to generate a list of prime numbers up to a given limit
generatePrimes :: Integer -> [Integer]
generatePrimes limit = filter isPrime [2..limit]

-- A function to generate a list of Fibonacci numbers up to a given limit
generateFibonacci :: Integer -> [Integer]
generateFibonacci limit = takeWhile (<= limit) $ map fibonacci [1..]

-- A function to find the sum of all even Fibonacci numbers up to a given limit
sumEvenFibonacci :: Integer -> Integer
sumEvenFibonacci limit = sum $ filter even $ generateFibonacci limit

-- A function to find the largest prime number in a list
largestPrime :: [Integer] -> Integer
largestPrime list = maximum $ filter isPrime list

-- A function to find the sum of all prime numbers in a list
sumPrimes :: [Integer] -> Integer
sumPrimes list = sum $ filter isPrime list