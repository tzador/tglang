module Main where

import Data.Map (Map, empty, insert)
import Data.Maybe (fromMaybe)

-- Define a recursive function to perform a binary search on a list
binarySearch :: Ord a => [a] -> a -> Maybe Int
binarySearch list target = binarySearchHelper list target 0 (length list - 1)

-- Helper function that performs the binary search
binarySearchHelper :: Ord a => [a] -> a -> Int -> Int -> Maybe Int
binarySearchHelper list target low high
    | low > high = Nothing                                  -- If we've narrowed the list down to nothing, return Nothing
    | middleElement == target = Just middleIndex            -- If the middle element is the target, return its index
    | middleElement < target = binarySearchHelper list target (middleIndex + 1) high  -- If the middle element is smaller than the target, search the upper half
    | otherwise = binarySearchHelper list target low (middleIndex - 1)                 -- If the middle element is larger than the target, search the lower half
    where middleIndex = (low + high) `div` 2                 -- Calculate the index of the middle element
          middleElement = list !! middleIndex                -- Get the value of the middle element in the list

main :: IO ()
main = do
    let list = [1,2,3,4,5,6]
    let target = 4
    let index = fromMaybe (-1) (binarySearch list target)   -- Perform the binary search and if the result is Nothing, return -1 instead
    putStrLn $ "Index of " ++ show target ++ " in list " ++ show list ++ " is " ++ show index