-- A function that sorts a list of integers
-- using the bubble sort algorithm

bubbleSort :: [Int] -> [Int]  -- Function declaration with type signature
bubbleSort [] = []             -- Base case for empty list
bubbleSort [x] = [x]           -- Base case for list with one element
bubbleSort xs =                 -- Recursive case for list with multiple elements
  let sortedPartialList = bubbleSort (init xs)  -- Sorting the list except the last element
      lastElement = last xs                    -- Getting the last element of the list
  in insert sortedPartialList lastElement       -- Inserting the last element in the sorted list
  
-- A helper function to insert an element in a sorted list
-- Returns the list with the element inserted at the appropriate position
insert :: [Int] -> Int -> [Int]
insert [] x = [x]                      -- Base case for empty list, return list with the element
insert (x:xs) element                  -- Recursive case for non-empty list
  | element <= x = element : x : xs    -- If element is smaller than the current element, insert it before
  | otherwise = x : insert xs element  -- Otherwise, recursively insert the element in the remaining list