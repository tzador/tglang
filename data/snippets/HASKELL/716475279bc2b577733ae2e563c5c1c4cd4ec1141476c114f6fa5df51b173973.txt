-- Define a datatype for binary search tree, with either a leaf or a node
data BinarySearchTree a = Leaf | Node a (BinarySearchTree a) (BinarySearchTree a)

-- function to insert an element into a binary search tree

insert :: Ord a => a -> BinarySearchTree a -> BinarySearchTree a
insert x Leaf = Node x Leaf Leaf
insert x (Node y left right) 
  -- check if x is smaller than the value in the current node
  | x < y = Node y (insert x left) right
  -- check if x is larger than the value in the current node
  | x > y = Node y left (insert x right)
  -- if x is already in the tree, return the same tree
  | otherwise = Node y left right

-- function to delete an element from a binary search tree

delete :: Ord a => a -> BinarySearchTree a -> BinarySearchTree a
delete x Leaf = Leaf
delete x (Node y left right)
  -- check if x is smaller than the value in the current node
  | x < y = Node y (delete x left) right
  -- check if x is larger than the value in the current node
  | x > y = Node y left (delete x right)
  -- if x is equal to the value in the current node
  | otherwise = case (left, right) of 
      -- if both children are leaves, delete current node by returning Leaf
      (Leaf, Leaf) -> Leaf
      -- if left child is a leaf, replace current node with right subtree
      (Leaf, _) -> right
      -- if right child is a leaf, replace current node with left subtree
      (_, Leaf) -> left
      -- if both children are nodes, replace current node with leftmost node of right subtree
      _ -> let minNode = findMin right in Node minNode left (delete minNode right)
      
-- function to find the minimum value in a binary search tree

findMin :: Ord a => BinarySearchTree a -> a
findMin (Node x Leaf _) = x
findMin (Node x left _) = findMin left