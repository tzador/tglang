{-# LANGUAGE TypeFamilies, MultiParamTypeClasses #-}

-- | A type family that maps a type to a list containing that type
type family Listify a where
  Listify Int = [Int]
  Listify Char = [Char]
  Listify Bool = [Bool]
  Listify [a] = [[a]]
  Listify a = [a]

-- | A class with a method that takes in two types and returns their
-- list versions
class ListifyTypes a b where
  listifyTypes :: a -> b -> (Listify a, Listify b)

-- | A instance of ListifyTypes for two types that simply returns
-- the list versions of those types
instance ListifyTypes a b where
  listifyTypes x y = (listify x, listify y)
    where
      listify :: a -> Listify a
      listify x = x : []

-- | A function that takes in two values of any types that implement
-- ListifyTypes and returns the concatenated lists
concatLists :: (ListifyTypes a b) => a -> b -> [Listify a]
concatLists x y = concat . listifyTypes $ x y