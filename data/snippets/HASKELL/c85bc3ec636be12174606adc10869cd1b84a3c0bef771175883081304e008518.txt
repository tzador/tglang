map' :: (a -> b) -> [a] -> [b] -- Defines a function "map'" that takes a function and a list as arguments, and returns a list of the same type as the function's return value.
map' _ [] = [] -- Base case: if the list is empty, return an empty list.
map' f (x:xs) = f x : map' f xs -- Recursive case: apply the function to the first element of the list, then recursively apply the function to the rest of the list and concatenate the results.

filter' :: (a -> Bool) -> [a] -> [a] -- Defines a function "filter'" that takes a function and a list as arguments, and returns a list of elements that satisfy the condition of the function.
filter' _ [] = [] -- Base case: if the list is empty, return an empty list.
filter' p (x:xs)
    | p x = x : filter' p xs -- If the current element satisfies the condition, add it to the result list.
    | otherwise = filter' p xs -- Otherwise, skip the element and continue recursively.

foldl' :: (b -> a -> b) -> b -> [a] -> b -- Defines a function "foldl'" that takes a binary function, an initial value, and a list as arguments, and applies the function to each element of the list, starting from the left.
foldl' _ acc [] = acc -- Base case: if the list is empty, return the accumulator.
foldl' f acc (x:xs) = foldl' f (f acc x) xs -- Recursive case: apply the function to the accumulator and the first element of the list, then recursively apply the function to the result and the rest of the list.

reverse' :: [a] -> [a] -- Defines a function "reverse'" that takes a list as an argument and returns the reversed list.
reverse' [] = [] -- Base case: if the list is empty, return an empty list.
reverse' (x:xs) = reverse' xs ++ [x] -- Recursive case: recursively reverse the rest of the list and concatenate it with a singleton list containing the first element.

takeWhile' :: (a -> Bool) -> [a] -> [a] -- Defines a function "takeWhile'" that takes a function and a list as arguments, and returns a list of elements until the condition of the function is no longer satisfied.
takeWhile' _ [] = [] -- Base case: if the list is empty, return an empty list.
takeWhile' p (x:xs)
    | p x = x : takeWhile' p xs -- If the current element satisfies the condition, add it to the result list.
    | otherwise = [] -- Otherwise, stop and return an empty list.

main :: IO () -- Main function.
main = do
    let xs = [1,2,3,4,5] -- Define a list of numbers.
    
    -- Apply functions to the list and print the results.
    putStrLn $ "Original list: " ++ show xs
    putStrLn $ "Mapped list (*2): " ++ show (map' (*2) xs)
    putStrLn $ "Filtered list (even): " ++ show (filter' even xs)
    putStrLn $ "Folded list (sum): " ++ show (foldl' (+) 0 xs)
    putStrLn $ "Reversed list: " ++ show (reverse' xs)
    putStrLn $ "Taken list (<=3): " ++ show (takeWhile' (<=3) xs)