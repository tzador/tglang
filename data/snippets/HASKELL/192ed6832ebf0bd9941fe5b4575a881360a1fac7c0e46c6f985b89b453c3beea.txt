-- Declare a new type called "Tree" that can contain any type of data.
data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Eq)

-- Define a function that inserts a new element into the tree in the correct position.
-- It takes in a tree and an element and returns a new tree with the element inserted.
insert :: (Ord a) => Tree a -> a -> Tree a
insert EmptyTree x = Node x EmptyTree EmptyTree -- If tree is empty, create a new node with the element as the root
insert (Node a left right) x
    | x < a = Node a (insert left x) right -- If element is smaller than current node, insert into left subtree
    | x > a = Node a left (insert right x) -- If element is bigger than current node, insert into right subtree
    | otherwise = Node a left right -- If element already exists in the tree, return the same tree

-- Define a function that checks if an element is in the tree.
-- It takes in a tree and an element and returns a boolean value.
contains :: (Ord a) => Tree a -> a -> Bool
contains EmptyTree _ = False -- If tree is empty, element does not exist
contains (Node a left right) x
    | x == a = True -- If element is equal to current node, it exists in the tree
    | x < a = contains left x -- If element is smaller than current node, check left subtree
    | x > a = contains right x -- If element is bigger than current node, check right subtree

-- An example tree with Int values
exampleTree :: Tree Int
exampleTree = Node 5 (Node 3 (Node 1 EmptyTree EmptyTree) (Node 4 EmptyTree EmptyTree)) (Node 7 (Node 6 EmptyTree EmptyTree) (Node 8 EmptyTree EmptyTree))

-- Insert 2 into the example tree
exampleTreeWith2 :: Tree Int
exampleTreeWith2 = insert exampleTree 2 -- Output: Node 5 (Node 3 (Node 1 EmptyTree (Node 2 EmptyTree EmptyTree)) (Node 4 EmptyTree EmptyTree)) (Node 7 (Node 6 EmptyTree EmptyTree) (Node 8 EmptyTree EmptyTree))

-- Check if 6 exists in the example tree
has6 :: Bool
has6 = contains exampleTree 6 -- Output: True