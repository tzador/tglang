-- A sample function in Haskell
-- Takes in an integer and returns its square
square :: Int -> Int
square x = x * x

-- A function to determine if a list has an even number of elements
-- Takes in a list and returns True if the list has an even number of elements, False otherwise
isEven :: [a] -> Bool
isEven xs = length xs `mod` 2 == 0

-- A recursive function to find the nth fibonacci number
-- Takes in an integer n and returns the corresponding nth fibonacci number
fib :: Int -> Int
fib n
  | n == 0 = 0
  | n == 1 = 1
  | otherwise = fib (n - 1) + fib (n - 2)

-- An implementation of quicksort using list comprehensions
-- Takes in a list and returns the sorted list
quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
  let smaller = quicksort [a | a <- xs, a <= x]
      larger = quicksort [a | a <- xs, a > x]
   in smaller ++ [x] ++ larger