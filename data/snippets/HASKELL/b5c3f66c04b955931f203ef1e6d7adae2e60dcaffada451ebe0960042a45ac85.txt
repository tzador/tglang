{-# LANGUAGE FlexibleContexts, MultiParamTypeClasses #-}

import Control.Monad.ST
import Control.Monad.State

type Matrix s = SV.Vector (sv.Vector Int)

data Graph s = Graph
  { vertecies :: Int
  , edges :: Matrix s
  }

newMatrix :: Int -> ST s (Matrix s)
newMatrix n = SV.replicateM n $ V.replicate n 0

newGraph :: Int -> ST s (Graph s)
newGraph n = do
  m <- newMatrix n
  pure $ Graph
    { vertecies = n
    , edges = m
    }

addEdge :: Int -> Int -> ST s ()
addEdge u v = modify $ \g ->
  let
    m = edges g
  in
    edges g = newM
    where newM = SV.modify m $ V.modify (uv + 1) [u, v]

dijkstra :: Graph s -> Int -> Int -> ST s [Int]
dijkstra graph start end = do
  let n = vertecies graph
  dst <- newMatrix n
  flippedEdges <- newMatrix n
  flipFist flippedEdges
  let
    coor = (\x -> (x `div` n, x `mod` n))
    startCoor = coor start
    endCoor = coor end
  pure ()
  where
    exstractPath = exstractPath' (coor end) 

    flipFist = flipFist' (coor start) 

    exstractPath' (x, y)
     | x == y = return ()
    exstractPath' (x, y) = do
      exstractPath' =<<
        SV.modify (UV.modify flippedEdges (+1)) y
      pure STRN ()