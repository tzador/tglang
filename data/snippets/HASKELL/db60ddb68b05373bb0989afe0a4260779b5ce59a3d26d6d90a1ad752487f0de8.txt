data Tree a = Node a (Tree a) (Tree a) | Empty

mapTree :: (a -> b) -> Tree a -> Tree b
mapTree _ Empty = Empty
mapTree f (Node x left right) = Node (f x) (mapTree f left) (mapTree f right)

isBalancedTree :: Tree a -> Bool
isBalancedTree Empty = True
isBalancedTree (Node _ left right) =
  let hl = height left
      hr = height right
   in abs (hl - hr) <= 1 && isBalancedTree left && isBalancedTree right
 where
  height Empty         = 0
  height (Node _ l r)  = 1 + max (height l) (height r)