{-# OPTIONS_GHC -Wall #-}
module Main (main) where

import qualified Data.List as List

{-|
This function takes in a list of integers and returns the first element
that is a perfect square.
If there are no perfect squares, it returns zero.
-}

findPerfectSquare :: [Int] -> Int 
findPerfectSquare xs
    | null perfectSquares = 0
    | otherwise = head perfectSquares
    where perfectSquares = filter (\x -> x `elem` [y * y | y <- [1..x]]) xs

main :: IO ()
main = do
    let myList = [5, 8, 12, 16, 21, 25]
    putStrLn $ "My list: " ++ show myList
    putStrLn $ "First perfect square: " ++ show (findPerfectSquare myList)