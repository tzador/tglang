-- Functions for finding prime numbers using the Sieve of Eratosthenes

-- Function to generate a list of numbers from 2 to n
generateNumbers :: Int -> [Int]
generateNumbers n = [2..n]

-- Function to remove all multiples of a given number from a list
removeMultiples :: Int -> [Int] -> [Int]
removeMultiples x = filter (\y -> (y `mod` x) /= 0)

-- Main function for finding prime numbers using the Sieve of Eratosthenes
sieve :: Int -> [Int] -> [Int]
sieve n xs
    | null xs = [] -- Base case, empty list
    | length xs == 1 = xs -- Base case, list with only one element
    | otherwise = (head xs) : (sieve n (removeMultiples (head xs) (tail xs))) -- Recursive call, filters out multiples of first element and calls sieve function again

-- Function to find all prime numbers up to a given number using the Sieve of Eratosthenes
findPrimes :: Int -> [Int]
findPrimes n = sieve n (generateNumbers n)