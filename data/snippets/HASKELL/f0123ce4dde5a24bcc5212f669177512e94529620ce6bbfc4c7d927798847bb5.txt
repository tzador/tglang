{-# LANGUAGE DataKinds #-}
{-# OPTIONS_GHC -Wall #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}

-- | This module implements the 'Maybe' data type and its operations.

module MyMaybe
  ( Maybe(..)
  , fromMaybe
  , maybe
  , isJust
  , isNothing
  , fromJust
  , catMaybes
  , mapMaybe
  ) where

-- | The 'Maybe' data type represents a optional value.
-- It can either be 'Just' some value, or 'Nothing'.
data Maybe a
  = Just a -- ^ Represents a value
  | Nothing -- ^ Represents no value

-- | Takes a default value and a 'Maybe' value.
-- If the value is 'Just', it returns the value,
-- otherwise it returns the default value.
fromMaybe :: a -> Maybe a -> a
fromMaybe d Nothing = d
fromMaybe _ (Just x) = x

-- | Takes a function, a default value, and a 'Maybe' value.
-- If the value is 'Just', it applies the function to the value,
-- otherwise it returns the default value.
maybe :: b -> (a -> b) -> Maybe a -> b
maybe d f Nothing = d
maybe _ f (Just x) = f x

-- | Takes a 'Maybe' value and returns whether it is 'Just'.
isJust :: Maybe a -> Bool
isJust Nothing = False
isJust (Just _) = True

-- | Takes a 'Maybe' value and returns whether it is 'Nothing'.
isNothing :: Maybe a -> Bool
isNothing Nothing = True
isNothing (Just _) = False

-- | Takes a 'Maybe' value and returns its value.
-- Throws an error if the value is 'Nothing'.
fromJust :: Maybe a -> a
fromJust (Just x) = x
fromJust Nothing = error "Maybe.fromJust: Nothing"

-- | Takes a list of 'Maybe' values and returns a list
-- with all the 'Just' values.
catMaybes :: [Maybe a] -> [a]
catMaybes [] = []
catMaybes (Nothing : xs) = catMaybes xs
catMaybes (Just x : xs) = x : catMaybes xs

-- | Takes a function and a list, and returns a list
-- with the results of applying the function to each element,
-- only including the results for which the function returns 'Just'.
mapMaybe :: (a -> Maybe b) -> [a] -> [b]
mapMaybe _ [] = []
mapMaybe f (x : xs) = case f x of
  Nothing -> mapMaybe f xs
  Just y -> y : mapMaybe f xs