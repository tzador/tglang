-- | A data type representing a binary tree structure
data Tree a = Leaf a | Node (Tree a) (Tree a)

-- | A function that takes in a binary tree and returns its size (number of nodes)
size :: Tree a -> Int
size (Leaf a) = 1
size (Node leftSubtree rightSubtree) = 1 + size leftSubtree + size rightSubtree

-- | A function that takes in a binary tree and returns its maximum depth
maxDepth :: Tree a -> Int
maxDepth (Leaf a) = 1
maxDepth (Node leftSubtree rightSubtree) = 1 + max (maxDepth leftSubtree) (maxDepth rightSubtree)

-- | A function that takes in a binary tree and returns its inorder traversal
inorder :: Tree a -> [a]
inorder (Leaf a) = [a]
inorder (Node leftSubtree rightSubtree) = inorder leftSubtree ++ [a] ++ inorder rightSubtree

-- | A function that takes in a binary tree and returns its preorder traversal
preorder :: Tree a -> [a]
preorder (Leaf a) = [a]
preorder (Node leftSubtree rightSubtree) = [a] ++ preorder leftSubtree ++ preorder rightSubtree

-- | A function that takes in a binary tree and returns its postorder traversal
postorder :: Tree a -> [a]
postorder (Leaf a) = [a]
postorder (Node leftSubtree rightSubtree) = postorder leftSubtree ++ postorder rightSubtree ++ [a]