-- Calculates the factorial of a given number
factorial :: Integer -> Integer
factorial 0 = 1 -- base case, factorial of 0 is 1
factorial n = n * factorial (n - 1) -- recursion step, calculates factorial of n by multiplying it with factorial of n-1

-- Calculates the fibonacci sequence up to a given number
fibonacci :: Int -> [Int]
fibonacci 0 = [0] -- base case, fibonacci sequence starts with 0
fibonacci 1 = [0, 1] -- base case, fibonacci sequence starts with 0, 1
fibonacci n = fibonacci (n-1) ++ [lastValue + secondLastValue] -- recursion step, calculates fibonacci sequence by appending the sum of last two values to the previous sequence
    where lastValue = last (fibonacci (n-1)) -- get last value of previous sequence
          secondLastValue = last (init (fibonacci (n-1))) -- get second to last value of previous sequence 

-- Creates a list of prime numbers up to a given number
primes :: Int -> [Int]
primes n = sieve [2..n] -- start with a list of numbers from 2 to n
    where
        sieve (x:xs) = x : sieve [num | num <- xs, num `mod` x /= 0] -- filter out all multiples of current number x and recursively call sieve on remaining list
        sieve [] = [] -- base case, if list is empty, return empty list