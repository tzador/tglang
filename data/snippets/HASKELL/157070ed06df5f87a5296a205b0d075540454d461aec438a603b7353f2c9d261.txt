-- | Create a data type representing a binary search tree
data Tree a = Leaf | Node (Tree a) a (Tree a)

-- | Insert an element into the tree in the correct location based on its value
insert :: Ord a => a -> Tree a -> Tree a
insert x Leaf = Node Leaf x Leaf
insert x (Node left val right)
    | x < val   = Node (insert x left) val right
    | x > val   = Node left val (insert x right)
    | otherwise = Node left val right

-- | Check if an element exists in the tree
contains :: Ord a => a -> Tree a -> Bool
contains x Leaf = False
contains x (Node left val right)
    | x < val   = contains x left
    | x > val   = contains x right
    | otherwise = True

-- | Convert a list to a binary search tree
listToTree :: Ord a => [a] -> Tree a
listToTree [] = Leaf
listToTree (x:xs) = insert x (listToTree xs)

-- | Sort a list using a binary search tree
treeSort :: Ord a => [a] -> [a]
treeSort xs = let tree = listToTree xs 
              in inOrderTraversal tree

-- | Helper function for in-order traversal of the tree
inOrderTraversal :: Tree a -> [a]
inOrderTraversal Leaf = []
inOrderTraversal (Node left val right) = inOrderTraversal left ++ [val] ++ inOrderTraversal right

-- | Example usage
main :: IO ()
main = do
    let tree = listToTree [4, 3, 1, 5, 6, 2] :: Tree Int
    putStrLn "List before sorting:"
    print [4, 3, 1, 5, 6, 2]
    
    putStrLn "List after sorting:"
    print (treeSort [4, 3, 1, 5, 6, 2]) 
-- Output:
-- List before sorting:
-- [4, 3, 1, 5, 6, 2]
-- List after sorting:
-- [1, 2, 3, 4, 5, 6]