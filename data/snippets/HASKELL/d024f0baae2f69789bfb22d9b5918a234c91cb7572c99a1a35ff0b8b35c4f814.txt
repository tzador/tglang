{-# LANGUAGE TypeFamilies #-}
import Data.String
import Data.List
import Data.Map

-- Function to find the sum of lists in a map
-- Given a map of lists of integers and a key, the sum of list for that key is returned
sumList :: Map String [Int] -> String -> Int
sumList map key = sum (map ! key)

-- Type family to find the length of a list
-- Given a list of any type, the type family returns an Int
type family ListLength list
type instance ListLength [Int] = Int
type instance ListLength [String] = Int

-- Function to concatenate two lists
-- Given two lists of the same type, the concatenated list is returned
concatLists :: (ListLength list ~ Int) => list -> list -> list
concatLists list1 list2 = list1 ++ list2

-- A data type representing a user with a name and age
data User = User { name :: String, age :: Int }

-- Function to get the name and age of a user and return it as a string
-- Given a user, the function will return a string containing their name and age
getUserInfo :: User -> String
getUserInfo user = "Name: " ++ name user ++ ", Age: " ++ show (age user)

-- Recursive function to find the factorial of a number
-- Given a number, the factorial of that number is returned
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- Function to check if a given string is a palindrome
-- Given a string, the function will return True if it is a palindrome and False if it is not
isPalindrome :: String -> Bool
isPalindrome str = str == reverse str

-- Main function to run the program
main :: IO ()
main = do
    -- Create a map of lists of integers
    let numbersMap :: Map String [Int]
        numbersMap = fromList [("odd", [1, 3, 5]), ("even", [2, 4, 6])]
    
    -- Find the sum of the "odd" list in the map using the sumList function
    let oddSum = sumList numbersMap "odd"
    
    -- Create a list of strings
    let strList :: [String]
        strList = ["hello", "world"]
    
    -- Concatenate the list of strings with itself using the concatLists function
    let concatStr = concatLists strList strList
    
    -- Create a User with the name "John" and age 25
    let john = User { name = "John", age = 25 }
    
    -- Get the information of the user using the getUserInfo function
    let userInfo = getUserInfo john
    
    -- Find the factorial of 5 using the factorial function
    let factorial5 = factorial 5
    
    -- Check if "radar" is a palindrome using the isPalindrome function
    let isRadarPalindrome = isPalindrome "radar"
    
    -- Print the results to the console
    putStrLn ("Sum of odd numbers: " ++ show oddSum)
    putStrLn ("Concatenated string: " ++ show concatStr)
    putStrLn ("User info: " ++ userInfo)
    putStrLn ("Factorial of 5: " ++ show factorial5)
    putStrLn ("Is 'radar' a palindrome? " ++ show isRadarPalindrome)