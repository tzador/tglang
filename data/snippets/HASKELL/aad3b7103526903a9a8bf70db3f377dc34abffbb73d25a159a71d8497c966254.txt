data Tree a = Empty 
            | Leaf a 
            | Node (Tree a) a (Tree a)

instance Functor Tree where
    fmap _ Empty = Empty
    fmap f (Leaf x) = Leaf (f x)
    fmap f (Node left x right) = Node (fmap f left) (f x) (fmap f right)

instance Applicative Tree where
    pure x = Leaf x
    Empty <*> _ = Empty
    (Leaf f) <*> tree = fmap f tree
    (Node left f right) <*> tree = Node (left <*> tree) (fmap f tree) (right <*> tree)

instance Monad Tree where
    return x = Leaf x
    Empty >>= _ = Empty
    (Leaf x) >>= f = f x
    (Node left x right) >>= f = Node (left >>= f) (fmap f x) (right >>= f)