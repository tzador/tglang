module Main where

import Data.Char (toUpper)

mergeSort :: Ord a => [a] -> [a]
mergeSort [] = []
mergeSort [x] = [x]
mergeSort xs =
  let
    (left, right) = splitAt (length xs `div` 2) xs
  in
    merge (mergeSort left) (mergeSort right)

merge :: Ord a => [a] -> [a] -> [a]
merge [] [] = []
merge xs [] = xs
merge [] ys = ys
merge (x:xs) (y:ys)
  | x <= y = x : merge xs (y:ys)
  | otherwise = y : merge (x:xs) ys

capitalize :: String -> String
capitalize [] = []
capitalize (x:xs) = toUpper x : xs

main :: IO ()
main = do
  let list = [5, 4, 3, 9, 8, 2, 1, 6, 7]
  putStrLn "Unsorted list:"
  print list
  putStrLn "Sorted list:"
  print (mergeSort list)
  putStrLn "Capitalized string:"
  let string = "hello world"
  print (capitalize string)