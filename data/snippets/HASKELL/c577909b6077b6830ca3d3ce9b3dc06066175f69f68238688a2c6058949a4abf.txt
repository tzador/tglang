{-# LANGUAGE ExistentialQuantification #-}
module Main where

-- Define a wrapper data type with an existential quantification
data Wrapper = forall a. (Show a) => Wrapper a

-- Define a function that takes a list of Wrappers and outputs their string representations
printWrappers :: [Wrapper] -> IO ()
printWrappers [] = return ()
printWrappers (Wrapper x : xs) = do
  putStrLn (show x)
  printWrappers xs

-- Define a Sum type with an existential quantification
data Sum a b = forall x. (a ~ Int, b ~ Int) => Sum Int Int |  forall y. (a ~ Char, b ~ String) => Sum Char String

-- Create an instance of the Show typeclass for Sum
instance (Show a, Show b) => Show (Sum a b) where
  show (Sum x y) = "(Sum " ++ show x ++ " " ++ show y ++ ")"

-- Define a function that takes a Sum type and returns the sum of its two values
sumVals :: Sum a b -> Int
sumVals (Sum x y) = x + y

-- Define a list of Sum values
sumList :: [Sum a b]
sumList = [Sum 5 10, Sum 'a' "hello", Sum 3 3]

main :: IO ()
main = do
  -- Create an existential wrapper around the sumList
  let wrapperList = map (\sum -> Wrapper sum) sumList
  -- Print the string representation of the wrapperList
  printWrappers wrapperList
  -- Get the sum of the first two values in the list
  let total = sumVals (wrapperList !! 0)
  -- Print the sum
  putStrLn ("Total: " ++ show total)