{-# LANGUAGE MultiParamTypeClasses, FlexibleInstances #-}

module Graph where

import qualified Data.Map as Map

-- | A typeclass for graph structures.
class Ord n => Graph g n where
    -- | Adds a node to the graph.
    addNode :: n -> g n -> g n

    -- | Adds an edge between two nodes in the graph.
    addEdge :: n -> n -> g n -> g n

    -- | Checks if two nodes are connected by an edge in the graph.
    hasEdge :: n -> n -> g n -> Bool

    -- | Gets all the nodes in the graph.
    getNodes :: g n -> [n]

    -- | Gets all the neighboring nodes of a given node in the graph.
    getNeighbors :: n -> g n -> [n]

-- | A representation of a graph using an adjacency list.
newtype AdjList n = AdjList (Map.Map n [n])

instance Ord n => Graph AdjList n where
    addNode x (AdjList m) = AdjList (Map.insert x [] m)

    addEdge x y (AdjList m) = AdjList (Map.adjust (y:) x m)

    hasEdge x y (AdjList m) = y `elem` Map.findWithDefault [] x m

    getNodes (AdjList m) = Map.keys m

    getNeighbors x (AdjList m) = Map.findWithDefault [] x m