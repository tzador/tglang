module ComplexNumbers where

-- datatype representing a complex number with real and imaginary parts
data Complex = Complex { real :: Float, imag :: Float }

-- function to add two complex numbers
addComplex :: Complex -> Complex -> Complex
addComplex (Complex r1 i1) (Complex r2 i2) = Complex (r1+r2) (i1+i2)

-- function to multiply two complex numbers
multiComplex :: Complex -> Complex -> Complex
multiComplex (Complex r1 i1) (Complex r2 i2) =
    Complex ((r1*r2)-(i1*i2)) ((r1*i2)+(r2*i1))

-- function to find the absolute value of a complex number
absComplex :: Complex -> Float
absComplex (Complex r i) = sqrt (r^2 + i^2)

-- function to print a complex number
printComplex :: Complex -> IO ()
printComplex (Complex r i) = do
    putStr "The complex number is: "
    putStr (show r)
    putStr " + "
    putStr (show i)
    putStrLn "i"

-- sample usage
main = do
    let z1 = Complex 2 3
    let z2 = Complex (-4.5) 1
    printComplex (addComplex z1 z2)
    printComplex (multiComplex z1 z2)
    putStrLn ("The absolute value of " ++ show z1 ++ " is: " ++ show (absComplex z1))