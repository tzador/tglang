-- Function to find the sum of a list of numbers
-- Input: list of numbers
-- Output: sum of the numbers
sumList :: [Int] -> Int
sumList [] = 0
sumList (x:xs) = x + sumList xs

-- Function to filter the list to only even numbers
-- Input: list of numbers
-- Output: list of numbers with only even numbers
filterEven :: [Int] -> [Int]
filterEven [] = []
filterEven (x:xs)
  | even x = x : filterEven xs
  | otherwise = filterEven xs
  
-- Function to map a function to a list of numbers
-- Input: function, list of numbers
-- Output: list of numbers after applying the function
mapList :: (Int -> Int) -> [Int] -> [Int]
mapList f [] = []
mapList f (x:xs) = f x : mapList f xs

-- Function to compute the factorial of a number
-- Input: number
-- Output: factorial of the number
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n-1)

-- Function to find the nth Fibonacci number
-- Input: n (should be greater than or equal to 0)
-- Output: nth Fibonacci number
fibonacci :: Int -> Int
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n-1) + fibonacci (n-2)