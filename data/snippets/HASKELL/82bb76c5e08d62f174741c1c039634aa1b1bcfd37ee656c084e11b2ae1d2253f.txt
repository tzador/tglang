{-# LANGUAGE TupleSections #-}

import Data.List (elemIndex, tails)

-- | 'indexPermutation' takes a list and returns a list of the starting
-- | indices of all permutations of the list.
-- | For example, given the list [1,2,3], the output would be [[0,1,2], [1,0,2], [1,2,0], [2,0,1], [0,2,1], [2,1,0]]
indexPermutation :: [a] -> [[Int]]
indexPermutation [] = [[]]
indexPermutation xs = map (0:) $ insertAtIndex pos (indexPermutation $ deleteAtIndex pos xs)
  where pos = indexOfMaxElem xs

-- | 'indexOfMaxElem' finds the index of the maximum element in a list.
indexOfMaxElem :: Ord a => [a] -> Int
indexOfMaxElem xs = case elemIndex m xs of
    Just i  -> i
    Nothing -> error "List cannot be empty"
  where m = maximum xs

-- | 'deleteAtIndex' removes the element at the given index from a list.
deleteAtIndex :: Int -> [a] -> [a]
deleteAtIndex _ [] = []
deleteAtIndex i xs = take i xs ++ drop (i + 1) xs

-- | 'insertAtIndex' inserts an element at the given index in a list and
-- | shifts all elements after that index to the right.
insertAtIndex :: Int -> [a] -> [[a]]
insertAtIndex i xs = map (insertAt i m xs) [0..length xs]
  where m = xs !! i

-- | 'insertAt' inserts an element at the given index in a list.
insertAt :: Int -> a -> [a] -> Int -> [a]
insertAt i x xs =
  case splitAt i xs of
    (ys, zs) -> ys ++ [x] ++ zs

-- | 'subpermutations' takes a list and returns all its sublists (including
-- | the original list) in no particular order.
subpermutations :: [a] -> [[a]]
subpermutations xs = xs : foldr (\x a -> (x:) `concatMap` a) [] (tails xs)

-- | 'allPermutations' takes a list and returns all its permutations in no
-- | particular order.
allPermutations :: Eq a => [a] -> [[a]]
allPermutations xs = map ((map f) . indexPermutation) $ subpermutations xs
  where f = (xs !!)

-- This invokes the function and returns the result
allPermutations [1,2,3]