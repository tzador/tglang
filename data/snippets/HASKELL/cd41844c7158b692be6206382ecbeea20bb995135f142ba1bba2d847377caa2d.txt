module Main where
-- defining the data types
data Person = Person String Int
data Location = Location String String
data Event = Event String Int String
--function to determine if person is within location
checkLocation :: Person -> Location -> Bool
checkLocation (Person pName pAge) (Location lCity lState) = if length lCity > 3 then True else False
--function to determine if event is within location
checkEvent :: Event -> Location -> Bool
checkEvent (Event eName eYear eType) (Location lCity lState) = if eType == "concert" && eYear >= 2019 then True else False
--list of people and their locations
people :: [Person]
people = [Person "John" 25, Person "Amy" 30]
locations :: [Location]
locations = [Location "Los Angeles" "CA", Location "New York" "NY"]
--list of events and their locations
events :: [Event]
events = [Event "Taylor Swift Concert" 2021 "concert", Event "Basketball Game" 2020 "sporting event"]
--list comprehension to output all people within locations
peopleInLocation :: [Person]
peopleInLocation = [person | person <- people, location <- locations, checkLocation person location]
--list comprehension to output all events within locations
eventsInLocation :: [Event]
eventsInLocation = [event | event <- events, location <- locations, checkEvent event location]
--main function to print results
main :: IO ()
main = do
  putStrLn "People within locations:"
  print peopleInLocation
  putStrLn "Events within locations:"
  print eventsInLocation