-- ZipWith function in Haskell
-- This function takes in two lists and a function as parameters
-- and applies the function to each pair of elements from the two lists
-- and returns a new list with the results.

zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]    -- Declaring the function with three parameters: function, list a, list b
zipWith _ [] _ = []                              -- Base case: If list a is empty, return empty list
zipWith _ _ [] = []                              -- If list b is empty, return empty list
zipWith f (x:xs) (y:ys) = f x y : zipWith f xs ys -- Applying function to first elements of list a and b and recursively calling on the rest

-- Example Usage:
-- zipWith (+) [1,2,3] [4,5,6]
-- Output: [5,7,9]