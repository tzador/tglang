{-# OPTIONS_GHC -Wall #-}

import qualified Data.Map as Map
import qualified Data.Set as Set

-- | A data type representing a graph with labeled edges.
--     The labels are of type @a@; @Ord a@ constraint ensures uniqueness of edge labels.
data Graph a = Graph
  { nodes :: Set.Set a            -- ^ All nodes in the graph
  , edges :: Map.Map (a, a) [a]   -- ^ Mapping from edge label to a list of nodes
  } deriving (Show, Eq)

-- | Returns the inverse of a graph.
inverse :: (Ord a) => Graph a -> Graph a
inverse (Graph ns es) = let
  edgeList = Map.toList es        -- Converts mapping to list of key-value pairs
  newEdges = foldl addEdge Map.empty edgeList     -- Folds over list to create new mapping
  newNodes = Map.keysSet newEdges   -- Selects all keys, which represent new nodes
  in Graph newNodes newEdges

-- | Recursively adds the reversed edges to a new mapping.
--     First argument accumulates new mapping, second argument is current key-value pair.
addEdge :: (Ord a) => Map.Map (a, a) [a] -> ((a, a), [a]) -> Map.Map (a, a) [a]
addEdge acc ((x, y), labels) = foldl addReversedEdge acc labels
  where addReversedEdge a l = Map.insertWith (++) (l, x) [y] a