{-# LANGUAGE DeriveGeneric #-}

module Main where

import Control.Monad.State
import Data.Char (toUpper)
import Data.List (isPrefixOf, tails)
import GHC.Generics (Generic)

-- | Represents a user with a name and age.
data User = User
  { name :: String
  , age :: Int
  } deriving (Show, Generic)

-- | Function to update user's name.
updateName :: User -> String -> User
updateName user newName = user { name = newName }

-- | Function to update user's age.
updateAge :: User -> Int -> User
updateAge user newAge = user { age = newAge }

-- | Function to capitalize the first letters of a user's name.
capitalizeName :: User -> User
capitalizeName user = user { name = map toUpper (name user) }

-- | Function to generate a list of all possible combinations of a list's elements.
combinations :: [a] -> [[a]]
combinations [] = [[]]
combinations (x:xs) = [x:ys | ys <- combinations xs] ++ combinations xs

-- | Function to check if a given list is a prefix of another list.
isPrefix :: Eq a => [a] -> [a] -> Bool
isPrefix [] _ = True
isPrefix _ [] = False
isPrefix (x:xs) (y:ys) = x == y && isPrefix xs ys

-- | Function to check if a given substring is present in a string.
isSubstring :: String -> String -> Bool
isSubstring sub str = any (isPrefixOf sub) (tails str)

-- | Main function to run the program.
main :: IO ()
main = do
  let user = User { name = "john", age = 20 }
  let updatedUser = execState (do
                                  modify (capitalizeName . updateName "jane")
                                  modify (updateAge 21)) user
  putStrLn $ "Updated user: " ++ show updatedUser
  let nums = [1, 2, 3]
  putStrLn $ "Combinations of " ++ show nums ++ ": " ++ show (combinations nums)
  let str = "Hello, world!"
  putStrLn $ "Is \"world\" a substring of \"" ++ str ++ "\": " ++ show (isSubstring "world" str)