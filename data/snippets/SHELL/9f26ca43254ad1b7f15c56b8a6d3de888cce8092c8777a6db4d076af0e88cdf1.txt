# This code snippet sorts a list of numbers using the quicksort algorithm

# Function that selects a pivot element and partitions the list around it
partition() {
  local -n list=$1 # creating a reference to the array passed as argument
  local low=$2 # starting index
  local high=$3 # ending index
  local pivot # variable to store the pivot element
  local i # variable to keep track of elements lower than pivot
  local j # variable to keep track of elements higher than pivot
  local temp # variable to store temporary value during swap

  # selecting the pivot as the middle element of the list
  let pivot=(${low}+${high})/2

  # swapping the pivot element to the end of the array
  temp=${list[pivot]}
  list[pivot]=${list[high]}
  list[high]=$temp

  # setting the initial indices for i and j
  let i=low-1
  let j=low

  # loop to partition the list around the pivot element
  while [ ${j} -lt ${high} ]
  do
    # if the current element is less than pivot, increment i and swap the elements
    if [ ${list[j]} -le ${list[high]} ]
    then
      let i+=1
      temp=${list[i]}
      list[i]=${list[j]}
      list[j]=$temp
    fi
    
    # increment j for each iteration
    let j+=1
  done

  # swapping the pivot element to its correct position
  temp=${list[i+1]}
  list[i+1]=${list[high]}
  list[high]=$temp

  # returning the index of the pivot element
  return i+1
}

# Function that implements the quicksort algorithm
quicksort() {
  local -n list=$1 # creating a reference to the array passed as argument
  local low=$2 # starting index
  local high=$3 # ending index

  # if there are more than one element in the list, partition and recursively call quicksort
  if [ ${low} -lt ${high} ]
  then
    # partition the list and get the index of pivot element
    local pivot_index=$(partition "list" ${low} ${high})

    # recursively call quicksort on the sub-lists
    quicksort "list" ${low} $((${pivot_index}-1))
    quicksort "list" $((${pivot_index}+1)) ${high}
  fi
}

# creating a sample list of numbers
numbers=(9 5 2 7 1 3 8 4)

# calling quicksort function on the list
quicksort "numbers" 0 $((${#numbers[@]}-1))

# printing the sorted list
echo ${numbers[@]} # output: 1 2 3 4 5 7 8 9