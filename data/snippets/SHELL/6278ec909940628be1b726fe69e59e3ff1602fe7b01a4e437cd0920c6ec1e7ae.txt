#!/bin/bash

# This script performs a search in a given directory and its subdirectories for lines matching a given pattern
# It outputs the total number of matching lines found and the file names in which they were found

# Check if the correct number of arguments were provided
if [ $# -ne 2 ]; then
    echo "ERROR: Invalid number of arguments. Usage: ./search_pattern.sh <directory> <pattern>"
    exit 1
fi

# Assign the first argument as the directory to search
dir=$1

# Check if the given directory exists
if [ ! -d "$dir" ]; then
    echo "ERROR: Directory not found."
    exit 1
fi

# Assign the second argument as the pattern to search for
pattern=$2

# Perform the search in the given directory and its subdirectories
# The -n option displays the line number of each matching line
# The -H option displays the file name in which the match was found
# The -r option recursively searches in subdirectories
# The -c option displays only the count of matching lines
output=$(grep -nrHc "$pattern" "$dir")

# Parse the output to extract the total matching lines count
# The head command selects the first line of the output
# The awk command uses the field separator ":" to select the second field, which is the total count
# Finally, the tr command removes any leading or trailing whitespace
total_count=$(echo "$output" | head -n 1 | awk -F: '{print $2}' | tr -d " ")

# Parse the output to extract the file names in which matching lines were found
# The tail command selects all lines except the first one, which contains the total count
# The awk command uses the field separator ":" to select the first field, which is the file name
# The sed command replaces the colon separator with a blank space
# Finally, the tr command removes any leading or trailing whitespace
file_names=$(echo "$output" | tail -n +2 | awk -F: '{print $1}' | sed 's/:/ /g' | tr -d " ")

# Print the total count and the file names in which matching lines were found
echo "Total matching lines found: $total_count"
echo "File names: $file_names"