#!/bin/sh
# This is a comment that explains what this code does

# Declaring and initializing variables
num1=5       # This variable stores the value 5
num2=10      # This variable stores the value 10

# Performing arithmetic operations
sum=$(($num1 + $num2))     # Addition of num1 and num2
echo "The sum is $sum"     # Printing the result to the console

# Using command substitution to store the output of a command to a variable
current_date=$(date +%m/%d/%Y)    # Stores the current date in the specified format

# Iterating through a loop
for i in {1..10}
do
  echo "Current iteration: $i"
done

# Using conditional statements
if [ $num1 -gt $num2 ]
then
  echo "$num1 is greater than $num2"
elif [ $num1 -lt $num2 ]
then
  echo "$num2 is greater than $num1"
else
  echo "Both numbers are equal"
fi

# Calling a function with parameters
add_numbers() {
  num3=$1   # Store the first parameter in num3
  num4=$2   # Store the second parameter in num4
  result=$(($num3 + $num4))
  echo "The result is $result"
}

add_numbers 3 7    # Calling the function with arguments 3 and 7

# Using string manipulation
string="Hello World"
length=${#string}    # Stores the length of the string in a variable
echo "The length of the string is $length"

# Redirecting output to a file
echo "This text will be saved to a file" > output.txt  # Saves the text to a file called output.txt

# Creating and removing directories
mkdir new_directory    # Creates a new directory
rmdir new_directory    # Removes the directory

# Displaying command line arguments
echo "The total number of arguments passed: $#"
echo "The first argument is: $1"    # Displays the first argument passed to the script
echo "The second argument is: $2"   # Displays the second argument passed to the script

# Reading input from user
echo "Enter your name:"
read name
echo "Hello, $name!"

# Checking for file existence and permissions
if [ -e output.txt ]    # Checks if the file exists
then
  if [ -r output.txt ]    # Checks if the file is readable
  then
    echo "The file exists and is readable"
  fi
fi

# Displaying system information
echo "System information:"
uname -a    # Displays information about the system

# Using pipes to pass output from one command to another
ls -l | grep ".txt"    # Displays a list of all files with .txt extension in the current directory

# Using command substitution to assign the output of a command to a variable
file_permissions=$(ls -l output.txt | awk '{print $1}')    # Stores the file permissions in a variable
echo "The file permissions of output.txt are $file_permissions"    # Prints the file permissions to the console