#!/bin/bash
#This is a bash script to automate the setup process
#based on the OS and user input
#Author: John Doe


#Function to display error messages
display_error() {
    echo -e "\033[0;31mERROR:\033[0m $1"
    exit 1
}

#Function to display success message
display_success() {
    echo -e "\033[0;32mSUCCESS:\033[0m $1"
}

#Function to check if command exists
command_exists() {
    if ! command -v $1 &> /dev/null
    then
        display_error "$1 command could not be found"
    fi
}

#Function to install required packages
install_packages() {

    #Check if a package manager is available
    if command_exists apt-get; then
        display_success "Using apt-get package manager"
        #Update and install required packages
        sudo apt-get update && sudo apt-get install $@
    elif command_exists yum; then
        display_success "Using yum package manager"
        #Update and install required packages
        sudo yum update && sudo yum install $@
    elif command_exists pacman; then
        display_success "Using pacman package manager"
        #Update and install required packages
        sudo pacman -Syu && sudo pacman -S $@
    elif command_exists brew; then
        display_success "Using Homebrew package manager"
        #Update and install required packages
        brew update && brew install $@
    else
        display_error "No package manager could be found"
    fi
}

#Function to configure application
configure_app() {

    #Check if the application is already configured
    if [ -f config.ini ]; then
        display_error "The application is already configured"
    else
        #Get user input for configuration settings
        echo "Please enter the required configuration settings:"
        read -p "Database Host: " db_host
        read -p "Database Username: " db_username
        read -s -p "Database Password: " db_password
        read -p "Application Port: " app_port
        read -p "Application Secret Key: " app_secret

        #Create config.ini file with user input
        echo "[database]" >> config.ini
        echo "host=$db_host" >> config.ini
        echo "username=$db_username" >> config.ini
        echo "password=$db_password" >> config.ini
        echo "[application]" >> config.ini
        echo "port=$app_port" >> config.ini
        echo "secret=$app_secret" >> config.ini

        #Display success message
        display_success "Application configured successfully!"
    fi
}

#Main code starts here

#Set default values for configuration settings
db_host="localhost"
db_username="root"
db_password=""
app_port=8000
app_secret="mysupersecretkey"

#Check if user wants to change default settings
echo "Default configuration settings:"
echo "Database Host: $db_host"
echo "Database Username: $db_username"
echo "Application Port: $app_port"
echo "Application Secret Key: $app_secret"
read -p "Do you want to change these settings? (y/n) " choice

#Validate user's choice
case "$choice" in
    [yY][eE][sS]|[yY])
        #Call configure_app function
        configure_app
        ;;
    [nN][oO]|[nN])
        #Display success message
        display_success "Using default settings"
        ;;
    *)
        display_error "Invalid input, please try again"
        ;;
esac

#Call command_exists function for required command
command_exists git

#Install required packages
install_packages git vim curl

#Display success message
display_success "Setup completed!"