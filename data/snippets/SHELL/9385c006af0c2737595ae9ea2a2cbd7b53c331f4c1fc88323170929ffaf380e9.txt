# This is a complex code snippet in the SHELL programming language.
# It is a function that finds the shortest path in a weighted directed graph.
function findShortestPath(graph, start, goal) {
  # Create empty sets for calculated distances and parents.
  declare -A distances
  declare -A parents

  # Add start vertex to distances set with value 0.
  distances[start]=0

  # Create a queue and add the starting vertex to it.
  queue=([$start])

  # Loop until the queue is empty.
  while [ ${#queue[@]} -ne 0 ]; do
    # Remove first vertex from the queue.
    current=${queue[0]}
    # Remove current from the queue.
    queue=(${queue[@]:1})

    # Check if current is the goal vertex.
    if [ $current -eq $goal ]; then
      # Create an empty array for the shortest path.
      shortestPath=()

      # Loop through parents until we reach the start vertex.
      while [ "$current" != "$start" ]; do
        # Add current to the beginning of shortestPath.
        shortestPath=($current ${shortestPath[@]})
        # Set current to its parent.
        current=${parents[$current]}
      done

      # Add start vertex to the beginning of shortestPath.
      shortestPath=($start ${shortestPath[@]})

      # Return shortest path.
      return shortestPath
    fi

    # Loop through each neighbor of current.
    for neighbor in "${!graph[$current]}"; do
      # Calculate the distance from start to neighbor.
      distance=$((${distances[$current]} + ${graph[$current][$neighbor]}))

      # Check if distance is less than current stored distance or if distance hasn't been calculated yet.
      if ! [ "${distances[$neighbor]}" ] || [ $distance -lt ${distances[$neighbor]} ]; then
        # Update the distance to neighbor.
        distances[$neighbor]=$distance
        # Set neighbor's parent to current.
        parents[$neighbor]=$current
        # Add neighbor to the queue.
        queue=(${queue[@]} $neighbor)
      fi
    done
  done

  # No path found, return empty array.
  return ()
}

# Example graph with weighted edges.
# Each key represents a vertex and each value is an associative array with neighbor and weight pairs.
# This graph represents the following graph:
#       A -> B (4) -> C (2) -> D (5)
#       |    ^            |
#       v    |            v
#       E - (3) -> F - - - G - -> H (7)
declare -A graph=(
  [A]=([B]=4 [E]=3)
  [B]=([C]=2)
  [C]=([D]=5)
  [E]=([F]=3)
  [F]=([G]=1)
  [G]=([H]=7)
)

# Find the shortest path from A to H.
findShortestPath $graph A H # Output: ("A" "E" "F" "G" "H")