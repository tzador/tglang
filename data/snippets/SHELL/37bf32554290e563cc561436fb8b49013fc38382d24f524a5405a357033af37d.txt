#!/bin/bash # this is the shebang line, indicating that this script will be executed by the Bourne-Again shell (bash)
# This is a comment, used to provide information and explanations about the code

####### VARIABLES #######

# declaring a variable named "myString" and assigning a string value to it
myString="Hello World!"

# declaring a variable named "myNumber" and assigning an integer value to it
myNumber=100

# declaring a variable named "myArray" and assigning an array of strings to it
myArray=("apple" "banana" "orange" "grapes")

# declaring a variable named "myDate" and assigning the current date and time to it
myDate=$(date)

####### FUNCTIONS #######

# defining a function named "printMessage"
# "printMessage" takes one argument, which will be stored in the "name" variable
printMessage() {
  name=$1
  echo "Hello $name!"
}

# calling the "printMessage" function and passing the value of the "myString" variable as an argument
printMessage "$myString"

####### CONDITIONALS #######

# using the "if" statement to check if the value of the "myNumber" variable is greater than 50
if [ $myNumber -gt 50 ]
then
  echo "$myNumber is greater than 50"
else
  echo "$myNumber is not greater than 50"
fi

####### LOOPS #######

# using the "for" loop to iterate through the elements of the "myArray" variable
for values in "${myArray[@]}"
do
  echo "Fruit: $values"
done

####### INPUT #######

# using the "read" command to prompt the user to enter their name and storing it in the "name" variable
echo "Enter your name:"
read name

# calling the "printMessage" function and passing the value of the "name" variable as an argument
printMessage "$name"

####### FILE OPERATIONS #######

# creating a new file named "myFile.txt" and writing the value of the "myString" variable to it
echo "$myString" > myFile.txt

# checking if the file exists and printing a message based on the result
if [ -e myFile.txt ]
then
  echo "File created successfully"
else
  echo "Error creating file"
fi

# extracting the current date from the "myDate" variable and appending it to the end of the file
echo "${myDate%% *} >> myFile.txt

####### END OF SCRIPT #######

# end of the script, closing the "printMessage" function and the IF statement with the "fi" keyword
# closing the loop and ending the script with the "done" keyword