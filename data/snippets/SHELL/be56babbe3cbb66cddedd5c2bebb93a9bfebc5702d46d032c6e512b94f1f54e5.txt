###################################################
# This code snippet demonstrates some complex      #
# functionalities in the SHELL programming language #
###################################################

# First, we define a function that takes in a number and checks if it is prime or not
is_prime() {
    # Set a counter variable
    count=0
    # Loop through numbers from 2 to the input number
    for ((i=2; i<"$1"; i++))
    do
        # Check if the number is divisible by the current loop variable
        if [ $(("$1" % "$i")) -eq 0 ]
        then
            # If it is divisible, increment the counter
            count=$((count+1))
        fi
    done
    # If the counter is 0, then the number is prime
    if [ "$count" -eq 0 ]
    then
        echo "$1 is prime"
    else
        echo "$1 is not prime"
    fi
}

# Next, we define a function to calculate the factorial of a number
factorial() {
    # Set variables for the number and the result
    num="$1"
    result=1
    # Loop through numbers from 1 to the input number
    for ((i=1; i<=num; i++))
    do
        # Multiply the result by the current loop variable
        result=$((result*i))
    done
    # Print the result
    echo "Factorial of $num is $result"
}

# Now, we can use these functions in our code
# Let's check if 15 is prime
is_prime 15
# Output: 15 is not prime

# Let's calculate the factorial of 6
factorial 6
# Output: Factorial of 6 is 720