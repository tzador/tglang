# This is a code snippet in SHELL

# Declare a variable with a string value
my_name="John Doe"

# Display a welcome message with the declared variable
echo "Welcome, $my_name. This is a complex code snippet."

# Create an array with multiple values
my_numbers=(1 2 3 4 5)

# Loop through the array and display each value with a message
for number in "${my_numbers[@]}"
do
  echo "The number is $number"
done

# Use the expr command to perform arithmetic operations
result=`expr 10 \* 2 + 5`

# Display the result of the arithmetic operation
echo "The result is $result"

# Create a function to reverse a string
reverse_string() {
  # Store the input string in a variable
  input_string=$1
  # Initialize an empty string
  output_string=""
  # Loop through the input string in reverse
  for ((i=${#input_string}-1; i>=0; i--))
  do
    # Append each character to the output string
    output_string="$output_string${input_string:$i:1}"
  done
  # Display the reversed string
  echo "The reversed string is $output_string"
}

# Call the function and pass in a string
reverse_string "Hello World"

# Create a conditional statement
if [ "$result" -gt 20 ]
then
  # Display a message if the result is greater than 20
  echo "The result is greater than 20."
else
  # Display a message if the result is less than or equal to 20
  echo "The result is less than or equal to 20."
fi

# Use the read command to get user input
echo "Enter a number:"
read user_number

# Use a case statement to check the user input
case $user_number in
  1)
    echo "You entered the number 1."
    ;;
  2)
    echo "You entered the number 2."
    ;;
  *)
    echo "You entered a number other than 1 or 2."
    ;;
esac

# Create a file and write text to it
echo "This is a text file." >> my_file.txt

# Read and print the contents of the file
cat my_file.txt