# This is a complex shell script that takes in user input and performs various operations

#!/bin/bash # Shebang line to specify the interpreter for the script

echo "Welcome to my complex shell script!" # Prints a welcome message to the user

read -p "Please enter your name: " name # Prompts the user to enter their name and stores it in the variable "name"

echo "Thank you for using my script, $name!" # Uses the "name" variable in a message to the user

# Function to check if a string is a palindrome
palindrome() {
  local str="$1" # Stores the input string in a local variable
  local revStr="" # Initializes an empty string to store the reversed string
  local len=${#str} # Gets the length of the input string

  # Loop to reverse the input string
  for (( i=$len-1; i>=0; i-- )); do # Iterates backwards through the string
    revStr="$revStr${str:$i:1}" # Adds each character of the input string to the "revStr" variable
  done

  # Checks if the input string is equal to its reversed string
  if [[ "$str" == "$revStr" ]]; then
    echo "$str is a palindrome!" # Prints a message if the input string is a palindrome
  else
    echo "$str is not a palindrome." # Prints a message if the input string is not a palindrome
  fi
}

read -p "Please enter a string to check if it is a palindrome: " input # Prompts the user to enter a string to check for palindrome

palindrome "$input" # Calls the "palindrome" function with the user's input as an argument

# Function to check if a number is prime
isPrime() {
  local num="$1" # Stores the input number in a local variable
  local count=0 # Initializes a count variable to keep track of factors

  # Loop to check for factors of the input number
  for (( i=2; i<=num/2; i++ )); do # Iterates through all numbers from 2 to half of the input number
    if (( num%i == 0 )); then # Checks if the input number is divisible by the current number
      count=$((count+1)) # Increments the count variable if it is a factor
    fi
  done

  # Checks the count variable to determine if the input number is prime
  if (( count == 0 )); then
    echo "$num is a prime number!" # Prints a message if the input number is prime
  else
    echo "$num is not a prime number." # Prints a message if the input number is not prime
  fi
}

read -p "Please enter a number to check if it is prime: " input # Prompts the user to enter a number to check for primality

isPrime "$input" # Calls the "isPrime" function with the user's input as an argument

# Function to calculate the factorial of a number
factorial() {
  local num="$1" # Stores the input number in a local variable
  local fact=1 # Initializes a variable to store the factorial value

  # Loop to calculate the factorial
  for (( i=num; i>=1; i-- )); do # Iterates backwards from the input number to 1
    fact=$((fact*i)) # Multiplies the current factorial value by the current number and stores it in the "fact" variable
  done

  echo "The factorial of $num is $fact." # Prints the factorial value to the user
}

read -p "Please enter a number to calculate its factorial: " input # Prompts the user to enter a number to calculate its factorial

factorial "$input" # Calls the "factorial" function with the user's input as an argument

# Function to print a pattern of numbers
printPattern() {
  local num="$1" # Stores the input number in a local variable
  local i=1 # Initializes a counter variable

  # Loop to print the pattern
  while (( i<=num )); do # Loops until the counter reaches the input number
    j=1 # Initializes another counter variable
    while (( j<=i )); do # Loops until the internal counter reaches the value of the outer counter
      echo -n "$j " # Prints the value of the internal counter
      j=$((j+1)) # Increments the internal counter
    done
    echo "" # Prints a new line after each iteration of the outer loop
    i=$((i+1)) # Increments the outer counter
  done
}

read -p "Please enter a number to print a pattern: " input # Prompts the user to enter a number for the pattern

printPattern "$input" # Calls the "printPattern" function with the user's input as an argument